; ModuleID = 'output/const-obfuscation/ex5/ex5.ll'
source_filename = "input/const-obfuscation/ex5/ex5.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind ssp uwtable
define i32 @_Z1diPiS_(i32 %0, i32* nocapture %1, i32* nocapture %2) local_unnamed_addr #0 {
  %4 = sext i32 %0 to i64
  %5 = or i64 %4, 7567418818177146972
  %6 = xor i64 %4, -1
  %7 = and i64 7567418818177146972, %6
  %8 = add i64 %7, %4
  %9 = sext i32 %0 to i64
  %10 = add i64 %9, 7320517268083502928
  %11 = and i64 7320517268083502928, %9
  %12 = or i64 7320517268083502928, %9
  %13 = add i64 %11, %12
  %14 = xor i64 %13, %5
  %15 = xor i64 %14, %8
  %16 = xor i64 %15, 8291816051513058883
  %17 = xor i64 %16, %10
  %18 = sext i32 %0 to i64
  %19 = add i64 %18, -1250073477936319278
  %20 = add i64 7685349968485595342, %18
  %21 = sub i64 %20, 8935423446421914620
  %22 = sext i32 %0 to i64
  %23 = or i64 %22, 605081299365970578
  %24 = xor i64 %22, -1
  %25 = and i64 605081299365970578, %24
  %26 = add i64 %25, %22
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, 6138269959731544831
  %29 = add i64 899488556002159562, %27
  %30 = add i64 %29, 5238781403729385269
  %31 = xor i64 %28, %30
  %32 = xor i64 %31, 0
  %33 = xor i64 %32, %21
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, %23
  %36 = xor i64 %35, %19
  %37 = mul i64 %17, %36
  %38 = trunc i64 %37 to i32
  %39 = icmp sgt i32 %0, %38
  br i1 %39, label %40, label %165

40:                                               ; preds = %3
  %41 = sext i32 %0 to i64
  %42 = add i64 %41, -2721378086699806400
  %43 = add i64 -7249425082664381755, %41
  %44 = add i64 %43, 4528046995964575355
  %45 = sext i32 %0 to i64
  %46 = or i64 %45, 9091468096042235433
  %47 = and i64 9091468096042235433, %45
  %48 = xor i64 9091468096042235433, %45
  %49 = or i64 %47, %48
  %50 = sext i32 %0 to i64
  %51 = add i64 %50, -5269717424265279953
  %52 = add i64 -3303900062298191870, %50
  %53 = sub i64 %52, 1965817361967088083
  %54 = xor i64 %53, %42
  %55 = xor i64 %54, %51
  %56 = xor i64 %55, %49
  %57 = xor i64 %56, %44
  %58 = xor i64 %57, 6962849663882195539
  %59 = xor i64 %58, %46
  %60 = sext i32 %0 to i64
  %61 = and i64 %60, 8246096639267104949
  %62 = or i64 -8246096639267104950, %60
  %63 = sub i64 %62, -8246096639267104950
  %64 = sext i32 %0 to i64
  %65 = or i64 %64, 1452054433450389997
  %66 = xor i64 %64, -1
  %67 = and i64 %66, -7313056830364292235
  %68 = and i64 %64, 7313056830364292234
  %69 = or i64 %67, %68
  %70 = xor i64 -8168273672546346344, %69
  %71 = xor i64 %64, -1
  %72 = or i64 -1452054433450389998, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = or i64 %70, %74
  %76 = sext i32 %0 to i64
  %77 = add i64 %76, -8670423713652135682
  %78 = and i64 -8670423713652135682, %76
  %79 = or i64 -8670423713652135682, %76
  %80 = add i64 %78, %79
  %81 = xor i64 %77, %80
  %82 = xor i64 %81, %65
  %83 = xor i64 %82, 6380597203002551549
  %84 = xor i64 %83, %63
  %85 = xor i64 %84, %61
  %86 = xor i64 %85, %75
  %87 = mul i64 %59, %86
  %88 = trunc i64 %87 to i32
  %89 = add nsw i32 %0, %88
  %90 = sext i32 %0 to i64
  %91 = add i64 %90, 6314751060299011017
  %92 = add i64 -2600127126289407714, %90
  %93 = sub i64 %92, -8914878186588418731
  %94 = sext i32 %0 to i64
  %95 = and i64 %94, -6551431451036002850
  %96 = or i64 6551431451036002849, %94
  %97 = sub i64 %96, 6551431451036002849
  %98 = xor i64 %93, %91
  %99 = xor i64 %98, %97
  %100 = xor i64 %99, -4418199532179200723
  %101 = xor i64 %100, %95
  %102 = sext i32 %0 to i64
  %103 = or i64 %102, 4498451462441786212
  %104 = and i64 4498451462441786212, %102
  %105 = xor i64 4498451462441786212, %102
  %106 = or i64 %104, %105
  %107 = sext i32 %0 to i64
  %108 = and i64 %107, 2679842123342748969
  %109 = xor i64 %107, -1
  %110 = or i64 -2679842123342748970, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = sext i32 %0 to i64
  %114 = or i64 %113, 8724385518091647681
  %115 = and i64 8724385518091647681, %113
  %116 = xor i64 8724385518091647681, %113
  %117 = or i64 %115, %116
  %118 = xor i64 %103, %114
  %119 = xor i64 %118, %112
  %120 = xor i64 %119, %106
  %121 = xor i64 %120, %108
  %122 = xor i64 %121, %117
  %123 = xor i64 %122, -3857279477547952856
  %124 = mul i64 %101, %123
  %125 = trunc i64 %124 to i32
  %126 = sdiv i32 %89, %125
  %127 = sext i32 %0 to i64
  %128 = and i64 %127, -6310599645258299304
  %129 = or i64 6310599645258299303, %127
  %130 = sub i64 %129, 6310599645258299303
  %131 = sext i32 %0 to i64
  %132 = add i64 %131, -5194165216245622686
  %133 = xor i64 -5194165216245622686, %131
  %134 = and i64 -5194165216245622686, %131
  %135 = mul i64 2, %134
  %136 = add i64 %133, %135
  %137 = xor i64 %128, %130
  %138 = xor i64 %137, %136
  %139 = xor i64 %138, %132
  %140 = xor i64 %139, 1302252810353925359
  %141 = sext i32 %0 to i64
  %142 = and i64 %141, 3792436735412210259
  %143 = xor i64 %141, -1
  %144 = xor i64 3792436735412210259, %143
  %145 = and i64 %144, 3792436735412210259
  %146 = sext i32 %0 to i64
  %147 = and i64 %146, -9043980921040943401
  %148 = xor i64 %146, -1
  %149 = xor i64 -9043980921040943401, %148
  %150 = and i64 %149, -9043980921040943401
  %151 = sext i32 %0 to i64
  %152 = or i64 %151, -8834934716443269061
  %153 = and i64 -8834934716443269061, %151
  %154 = xor i64 -8834934716443269061, %151
  %155 = or i64 %153, %154
  %156 = xor i64 -2121705900362935793, %152
  %157 = xor i64 %156, %145
  %158 = xor i64 %157, %142
  %159 = xor i64 %158, %150
  %160 = xor i64 %159, %147
  %161 = xor i64 %160, %155
  %162 = mul i64 %140, %161
  %163 = trunc i64 %162 to i32
  %164 = call i32 @llvm.smax.i32(i32 %126, i32 %163)
  br label %170

165:                                              ; preds = %170, %3
  %166 = load i32, i32* %1, align 4, !tbaa !10
  %167 = add nsw i32 %166, %0
  %168 = load i32, i32* %2, align 4, !tbaa !10
  %169 = add nsw i32 %167, %168
  ret i32 %169

170:                                              ; preds = %170, %40
  %171 = phi i32 [ %248, %170 ], [ 0, %40 ]
  %172 = load i32, i32* %1, align 4, !tbaa !10
  %173 = sext i32 %126 to i64
  %174 = and i64 %173, -8352929041429301142
  %175 = or i64 8352929041429301141, %173
  %176 = sub i64 %175, 8352929041429301141
  %177 = sext i32 %126 to i64
  %178 = add i64 %177, 5764994019181550728
  %179 = add i64 -1888715899163670010, %177
  %180 = add i64 %179, 7653709918345220738
  %181 = sext i32 %89 to i64
  %182 = or i64 %181, -4239187078826724793
  %183 = and i64 -4239187078826724793, %181
  %184 = xor i64 -4239187078826724793, %181
  %185 = or i64 %183, %184
  %186 = xor i64 %174, %182
  %187 = xor i64 %186, %185
  %188 = xor i64 %187, %180
  %189 = xor i64 %188, %176
  %190 = xor i64 %189, 4055642176953519607
  %191 = xor i64 %190, %178
  %192 = sext i32 %164 to i64
  %193 = add i64 %192, 1666618578168917537
  %194 = xor i64 1666618578168917537, %192
  %195 = and i64 1666618578168917537, %192
  %196 = mul i64 2, %195
  %197 = add i64 %194, %196
  %198 = sext i32 %126 to i64
  %199 = and i64 %198, 701931689284423985
  %200 = xor i64 %198, -1
  %201 = or i64 -701931689284423986, %200
  %202 = xor i64 %201, -1
  %203 = and i64 %202, -1
  %204 = xor i64 %199, -6128931504797596729
  %205 = xor i64 %204, %197
  %206 = xor i64 %205, %203
  %207 = xor i64 %206, %193
  %208 = mul i64 %191, %207
  %209 = trunc i64 %208 to i32
  %210 = add nsw i32 %172, %209
  store i32 %210, i32* %1, align 4, !tbaa !10
  store i32 %172, i32* %2, align 4, !tbaa !10
  %211 = sext i32 %89 to i64
  %212 = and i64 %211, 4440040082076141043
  %213 = xor i64 %211, -1
  %214 = or i64 -4440040082076141044, %213
  %215 = xor i64 %214, -1
  %216 = and i64 %215, -1
  %217 = sext i32 %89 to i64
  %218 = add i64 %217, 7345958203929135817
  %219 = add i64 1312724959657492605, %217
  %220 = sub i64 %219, -6033233244271643212
  %221 = xor i64 %220, %212
  %222 = xor i64 %221, 5225312190496301043
  %223 = xor i64 %222, %216
  %224 = xor i64 %223, %218
  %225 = sext i32 %89 to i64
  %226 = or i64 %225, -4379369433419377556
  %227 = and i64 -4379369433419377556, %225
  %228 = xor i64 -4379369433419377556, %225
  %229 = or i64 %227, %228
  %230 = sext i32 %126 to i64
  %231 = or i64 %230, -3382562279897779024
  %232 = xor i64 %230, -1
  %233 = and i64 %232, -3075944602576818530
  %234 = and i64 %230, 3075944602576818529
  %235 = or i64 %233, %234
  %236 = xor i64 314888213719046702, %235
  %237 = xor i64 %230, -1
  %238 = or i64 3382562279897779023, %237
  %239 = xor i64 %238, -1
  %240 = and i64 %239, -1
  %241 = or i64 %236, %240
  %242 = xor i64 %226, %241
  %243 = xor i64 %242, %229
  %244 = xor i64 %243, 4358162534960845115
  %245 = xor i64 %244, %231
  %246 = mul i64 %224, %245
  %247 = trunc i64 %246 to i32
  %248 = add nuw nsw i32 %171, %247
  %249 = icmp eq i32 %248, %164
  br i1 %249, label %165, label %170, !llvm.loop !14
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind ssp uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = or i64 %3, 5903979303220408426
  %5 = and i64 5903979303220408426, %3
  %6 = xor i64 5903979303220408426, %3
  %7 = or i64 %5, %6
  %8 = sext i32 %0 to i64
  %9 = or i64 %8, 5181387795929204304
  %10 = and i64 5181387795929204304, %8
  %11 = xor i64 5181387795929204304, %8
  %12 = or i64 %10, %11
  %13 = xor i64 %9, 5545244505129718695
  %14 = xor i64 %13, %7
  %15 = xor i64 %14, %4
  %16 = xor i64 %15, %12
  %17 = sext i32 %0 to i64
  %18 = and i64 %17, -8558901661854415004
  %19 = or i64 8558901661854415003, %17
  %20 = sub i64 %19, 8558901661854415003
  %21 = sext i32 %0 to i64
  %22 = add i64 %21, -4444298877390220581
  %23 = add i64 -593871041234354453, %21
  %24 = add i64 %23, -3850427836155866128
  %25 = sext i32 %0 to i64
  %26 = or i64 %25, 3469072875632648329
  %27 = xor i64 %25, -1
  %28 = and i64 %27, 4777814215379396419
  %29 = and i64 %25, -4777814215379396420
  %30 = or i64 %28, %29
  %31 = xor i64 8244590984181499850, %30
  %32 = xor i64 %25, -1
  %33 = or i64 -3469072875632648330, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = or i64 %31, %35
  %37 = xor i64 %26, %22
  %38 = xor i64 %37, %20
  %39 = xor i64 %38, %18
  %40 = xor i64 %39, -1130286818848283625
  %41 = xor i64 %40, %24
  %42 = xor i64 %41, %36
  %43 = mul i64 %16, %42
  %44 = trunc i64 %43 to i32
  %45 = alloca i32, i32 %44, align 4
  %46 = sext i32 %0 to i64
  %47 = and i64 %46, -5527388674346554159
  %48 = or i64 5527388674346554158, %46
  %49 = sub i64 %48, 5527388674346554158
  %50 = sext i32 %0 to i64
  %51 = or i64 %50, -3928364359263380011
  %52 = and i64 -3928364359263380011, %50
  %53 = xor i64 -3928364359263380011, %50
  %54 = or i64 %52, %53
  %55 = sext i32 %0 to i64
  %56 = add i64 %55, -1727096396752098121
  %57 = add i64 -3450328295122741619, %55
  %58 = add i64 %57, 1723231898370643498
  %59 = xor i64 %54, %58
  %60 = xor i64 %59, 183492795255781323
  %61 = xor i64 %60, %56
  %62 = xor i64 %61, %49
  %63 = xor i64 %62, %47
  %64 = xor i64 %63, %51
  %65 = sext i32 %0 to i64
  %66 = add i64 %65, 2263045744033157711
  %67 = add i64 5462892906803811261, %65
  %68 = add i64 %67, -3199847162770653550
  %69 = sext i32 %0 to i64
  %70 = or i64 %69, 4412824223340036710
  %71 = xor i64 %69, -1
  %72 = and i64 %71, 8848727260671293750
  %73 = and i64 %69, -8848727260671293751
  %74 = or i64 %72, %73
  %75 = xor i64 5184064077341440848, %74
  %76 = xor i64 %69, -1
  %77 = or i64 -4412824223340036711, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = or i64 %75, %79
  %81 = sext i32 %0 to i64
  %82 = add i64 %81, -8055295900132811726
  %83 = sub i64 0, %81
  %84 = sub i64 -8055295900132811726, %83
  %85 = xor i64 %66, %80
  %86 = xor i64 %85, 4223869720823231971
  %87 = xor i64 %86, %82
  %88 = xor i64 %87, %70
  %89 = xor i64 %88, %84
  %90 = xor i64 %89, %68
  %91 = mul i64 %64, %90
  %92 = trunc i64 %91 to i32
  %93 = alloca i32, i32 %92, align 4
  %94 = sext i32 %0 to i64
  %95 = add i64 %94, 3957583613643666043
  %96 = add i64 -3214153011350306558, %94
  %97 = sub i64 %96, -7171736624993972601
  %98 = sext i32 %0 to i64
  %99 = add i64 %98, -3966744067507997294
  %100 = xor i64 -3966744067507997294, %98
  %101 = and i64 -3966744067507997294, %98
  %102 = mul i64 2, %101
  %103 = add i64 %100, %102
  %104 = sext i32 %0 to i64
  %105 = or i64 %104, -8762876733985949928
  %106 = xor i64 %104, -1
  %107 = and i64 %106, 5814791599491097519
  %108 = and i64 %104, -5814791599491097520
  %109 = or i64 %107, %108
  %110 = xor i64 -2966103937495804745, %109
  %111 = xor i64 %104, -1
  %112 = or i64 8762876733985949927, %111
  %113 = xor i64 %112, -1
  %114 = and i64 %113, -1
  %115 = or i64 %110, %114
  %116 = xor i64 %97, 4803279645737250439
  %117 = xor i64 %116, %95
  %118 = xor i64 %117, %105
  %119 = xor i64 %118, %103
  %120 = xor i64 %119, %115
  %121 = xor i64 %120, %99
  %122 = sext i32 %0 to i64
  %123 = and i64 %122, 9166333069976543403
  %124 = xor i64 %122, -1
  %125 = or i64 -9166333069976543404, %124
  %126 = xor i64 %125, -1
  %127 = and i64 %126, -1
  %128 = sext i32 %0 to i64
  %129 = or i64 %128, 5046559796980320917
  %130 = and i64 5046559796980320917, %128
  %131 = xor i64 5046559796980320917, %128
  %132 = or i64 %130, %131
  %133 = xor i64 %123, 3795035017731962679
  %134 = xor i64 %133, %129
  %135 = xor i64 %134, %132
  %136 = xor i64 %135, %127
  %137 = mul i64 %121, %136
  %138 = trunc i64 %137 to i32
  %139 = alloca i32, i32 %138, align 4
  %140 = sext i32 %0 to i64
  %141 = and i64 %140, 6282222445644960801
  %142 = xor i64 %140, -1
  %143 = xor i64 6282222445644960801, %142
  %144 = and i64 %143, 6282222445644960801
  %145 = sext i32 %0 to i64
  %146 = or i64 %145, -6805947469086250208
  %147 = xor i64 %145, -1
  %148 = and i64 %147, 6886430668400902662
  %149 = and i64 %145, -6886430668400902663
  %150 = or i64 %148, %149
  %151 = xor i64 -135689754602542810, %150
  %152 = xor i64 %145, -1
  %153 = or i64 6805947469086250207, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = or i64 %151, %155
  %157 = sext i32 %0 to i64
  %158 = or i64 %157, -4383507087890704055
  %159 = xor i64 %157, -1
  %160 = and i64 %159, 6860705566379561597
  %161 = and i64 %157, -6860705566379561598
  %162 = or i64 %160, %161
  %163 = xor i64 -7197674850699752652, %162
  %164 = xor i64 %157, -1
  %165 = or i64 4383507087890704054, %164
  %166 = xor i64 %165, -1
  %167 = and i64 %166, -1
  %168 = or i64 %163, %167
  %169 = xor i64 %144, %141
  %170 = xor i64 %169, %156
  %171 = xor i64 %170, -5666100624122530965
  %172 = xor i64 %171, %146
  %173 = xor i64 %172, %158
  %174 = xor i64 %173, %168
  %175 = sext i32 %0 to i64
  %176 = and i64 %175, -30597942396764754
  %177 = xor i64 %175, -1
  %178 = xor i64 -30597942396764754, %177
  %179 = and i64 %178, -30597942396764754
  %180 = sext i32 %0 to i64
  %181 = or i64 %180, 8669500163153985314
  %182 = and i64 8669500163153985314, %180
  %183 = xor i64 8669500163153985314, %180
  %184 = or i64 %182, %183
  %185 = sext i32 %0 to i64
  %186 = and i64 %185, 5615908356379775705
  %187 = xor i64 %185, -1
  %188 = or i64 -5615908356379775706, %187
  %189 = xor i64 %188, -1
  %190 = and i64 %189, -1
  %191 = xor i64 %179, %186
  %192 = xor i64 %191, -8284620357782806205
  %193 = xor i64 %192, %184
  %194 = xor i64 %193, %190
  %195 = xor i64 %194, %181
  %196 = xor i64 %195, %176
  %197 = mul i64 %174, %196
  %198 = trunc i64 %197 to i32
  %199 = alloca i32, i32 %198, align 4
  %200 = bitcast i32* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %200) #3
  %201 = sext i32 %0 to i64
  %202 = or i64 %201, 1374711601037857738
  %203 = xor i64 %201, -1
  %204 = and i64 1374711601037857738, %203
  %205 = add i64 %204, %201
  %206 = sext i32 %0 to i64
  %207 = or i64 %206, -5144827474075298515
  %208 = and i64 -5144827474075298515, %206
  %209 = xor i64 -5144827474075298515, %206
  %210 = or i64 %208, %209
  %211 = xor i64 %207, 2537625711689391861
  %212 = xor i64 %211, %205
  %213 = xor i64 %212, %202
  %214 = xor i64 %213, %210
  %215 = sext i32 %0 to i64
  %216 = add i64 %215, 8227554216665239002
  %217 = add i64 737037614942536889, %215
  %218 = add i64 %217, 7490516601722702113
  %219 = sext i32 %0 to i64
  %220 = and i64 %219, 5638988784250317181
  %221 = xor i64 %219, -1
  %222 = or i64 -5638988784250317182, %221
  %223 = xor i64 %222, -1
  %224 = and i64 %223, -1
  %225 = sext i32 %0 to i64
  %226 = add i64 %225, -8439403220116877414
  %227 = add i64 8200402414164607548, %225
  %228 = add i64 %227, 1806938439428066654
  %229 = xor i64 %224, %220
  %230 = xor i64 %229, %228
  %231 = xor i64 %230, 6752214397993377117
  %232 = xor i64 %231, %216
  %233 = xor i64 %232, %226
  %234 = xor i64 %233, %218
  %235 = mul i64 %214, %234
  %236 = trunc i64 %235 to i32
  store i32 %236, i32* %45, align 4, !tbaa !10
  %237 = bitcast i32* %93 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %237) #3
  %238 = sext i32 %0 to i64
  %239 = add i64 %238, 4018824793737204710
  %240 = add i64 1243601983089207598, %238
  %241 = add i64 %240, 2775222810647997112
  %242 = sext i32 %0 to i64
  %243 = or i64 %242, 359302469391689423
  %244 = and i64 359302469391689423, %242
  %245 = xor i64 359302469391689423, %242
  %246 = or i64 %244, %245
  %247 = sext i32 %0 to i64
  %248 = add i64 %247, 7209825116523786753
  %249 = add i64 -2187091563819069739, %247
  %250 = sub i64 %249, 9049827393366695124
  %251 = xor i64 %239, %248
  %252 = xor i64 %251, -4188509604548402023
  %253 = xor i64 %252, %243
  %254 = xor i64 %253, %250
  %255 = xor i64 %254, %246
  %256 = xor i64 %255, %241
  %257 = sext i32 %0 to i64
  %258 = and i64 %257, -2726775963870267725
  %259 = xor i64 %257, -1
  %260 = or i64 2726775963870267724, %259
  %261 = xor i64 %260, -1
  %262 = and i64 %261, -1
  %263 = sext i32 %0 to i64
  %264 = and i64 %263, 391126197284964601
  %265 = xor i64 %263, -1
  %266 = xor i64 391126197284964601, %265
  %267 = and i64 %266, 391126197284964601
  %268 = xor i64 %258, %267
  %269 = xor i64 %268, %262
  %270 = xor i64 %269, %264
  %271 = xor i64 %270, -1819847147750740403
  %272 = mul i64 %256, %271
  %273 = trunc i64 %272 to i32
  store i32 %273, i32* %93, align 4, !tbaa !10
  %274 = bitcast i32* %139 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %274) #3
  %275 = sext i32 %0 to i64
  %276 = or i64 %275, 6477619172410526367
  %277 = xor i64 %275, -1
  %278 = and i64 6477619172410526367, %277
  %279 = add i64 %278, %275
  %280 = sext i32 %0 to i64
  %281 = add i64 %280, 8099818459571754795
  %282 = and i64 8099818459571754795, %280
  %283 = or i64 8099818459571754795, %280
  %284 = add i64 %282, %283
  %285 = sext i32 %0 to i64
  %286 = add i64 %285, 3365215353381029484
  %287 = xor i64 3365215353381029484, %285
  %288 = and i64 3365215353381029484, %285
  %289 = mul i64 2, %288
  %290 = add i64 %287, %289
  %291 = xor i64 7156679965359216829, %279
  %292 = xor i64 %291, %281
  %293 = xor i64 %292, %276
  %294 = xor i64 %293, %286
  %295 = xor i64 %294, %284
  %296 = xor i64 %295, %290
  %297 = sext i32 %0 to i64
  %298 = add i64 %297, 3956507960727300267
  %299 = and i64 3956507960727300267, %297
  %300 = or i64 3956507960727300267, %297
  %301 = add i64 %299, %300
  %302 = sext i32 %0 to i64
  %303 = add i64 %302, -6942929264089445905
  %304 = sub i64 0, %302
  %305 = add i64 6942929264089445905, %304
  %306 = sub i64 0, %305
  %307 = sext i32 %0 to i64
  %308 = add i64 %307, 4502026224778620740
  %309 = add i64 4885014466536756532, %307
  %310 = sub i64 %309, 382988241758135792
  %311 = xor i64 %308, -776030308401241451
  %312 = xor i64 %311, %310
  %313 = xor i64 %312, %298
  %314 = xor i64 %313, %303
  %315 = xor i64 %314, %306
  %316 = xor i64 %315, %301
  %317 = mul i64 %296, %316
  %318 = trunc i64 %317 to i32
  store i32 %318, i32* %139, align 4, !tbaa !10
  %319 = bitcast i32* %199 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %319) #3
  %320 = sext i32 %0 to i64
  %321 = or i64 %320, -589382930355605125
  %322 = xor i64 %320, -1
  %323 = and i64 -589382930355605125, %322
  %324 = add i64 %323, %320
  %325 = sext i32 %0 to i64
  %326 = add i64 %325, -3019153323679708170
  %327 = and i64 -3019153323679708170, %325
  %328 = or i64 -3019153323679708170, %325
  %329 = add i64 %327, %328
  %330 = sext i32 %0 to i64
  %331 = or i64 %330, 3246309146411549264
  %332 = xor i64 %330, -1
  %333 = and i64 %332, -218171372074859634
  %334 = and i64 %330, 218171372074859633
  %335 = or i64 %333, %334
  %336 = xor i64 -3317513884018425378, %335
  %337 = xor i64 %330, -1
  %338 = or i64 -3246309146411549265, %337
  %339 = xor i64 %338, -1
  %340 = and i64 %339, -1
  %341 = or i64 %336, %340
  %342 = xor i64 %331, %326
  %343 = xor i64 %342, 6459010794934769261
  %344 = xor i64 %343, %341
  %345 = xor i64 %344, %321
  %346 = xor i64 %345, %324
  %347 = xor i64 %346, %329
  %348 = sext i32 %0 to i64
  %349 = and i64 %348, -7054558644403588330
  %350 = or i64 7054558644403588329, %348
  %351 = sub i64 %350, 7054558644403588329
  %352 = sext i32 %0 to i64
  %353 = and i64 %352, -2366764782016811641
  %354 = xor i64 %352, -1
  %355 = or i64 2366764782016811640, %354
  %356 = xor i64 %355, -1
  %357 = and i64 %356, -1
  %358 = xor i64 %353, %357
  %359 = xor i64 %358, %349
  %360 = xor i64 %359, %351
  %361 = xor i64 %360, -993017924518874887
  %362 = mul i64 %347, %361
  %363 = trunc i64 %362 to i32
  store i32 %363, i32* %199, align 4, !tbaa !10
  %364 = sext i32 %0 to i64
  %365 = and i64 %364, 1191171858732176273
  %366 = xor i64 %364, -1
  %367 = or i64 -1191171858732176274, %366
  %368 = xor i64 %367, -1
  %369 = and i64 %368, -1
  %370 = sext i32 %0 to i64
  %371 = or i64 %370, -5463042532472920375
  %372 = xor i64 %370, -1
  %373 = and i64 -5463042532472920375, %372
  %374 = add i64 %373, %370
  %375 = sext i32 %0 to i64
  %376 = or i64 %375, 4475634778331337124
  %377 = xor i64 %375, -1
  %378 = and i64 %377, -5519168931380131676
  %379 = and i64 %375, 5519168931380131675
  %380 = or i64 %378, %379
  %381 = xor i64 -8251897406553728768, %380
  %382 = xor i64 %375, -1
  %383 = or i64 -4475634778331337125, %382
  %384 = xor i64 %383, -1
  %385 = and i64 %384, -1
  %386 = or i64 %381, %385
  %387 = xor i64 -2958769578623220217, %365
  %388 = xor i64 %387, %376
  %389 = xor i64 %388, %371
  %390 = xor i64 %389, %374
  %391 = xor i64 %390, %369
  %392 = xor i64 %391, %386
  %393 = sext i32 %0 to i64
  %394 = add i64 %393, -1351216170494412775
  %395 = sub i64 0, %393
  %396 = add i64 1351216170494412775, %395
  %397 = sub i64 0, %396
  %398 = sext i32 %0 to i64
  %399 = add i64 %398, 3763021243234635219
  %400 = xor i64 3763021243234635219, %398
  %401 = and i64 3763021243234635219, %398
  %402 = mul i64 2, %401
  %403 = add i64 %400, %402
  %404 = xor i64 -1985853508074327111, %394
  %405 = xor i64 %404, %399
  %406 = xor i64 %405, %403
  %407 = xor i64 %406, %397
  %408 = mul i64 %392, %407
  %409 = trunc i64 %408 to i32
  %410 = call i32 @_Z1diPiS_(i32 %409, i32* nonnull %45, i32* nonnull %93)
  %411 = sext i32 %0 to i64
  %412 = add i64 %411, 9113296174396522927
  %413 = add i64 7958945847330740821, %411
  %414 = sub i64 %413, -1154350327065782106
  %415 = sext i32 %0 to i64
  %416 = add i64 %415, -7452012902263405120
  %417 = sub i64 0, %415
  %418 = sub i64 -7452012902263405120, %417
  %419 = sext i32 %0 to i64
  %420 = and i64 %419, -4144271825511988925
  %421 = xor i64 %419, -1
  %422 = xor i64 -4144271825511988925, %421
  %423 = and i64 %422, -4144271825511988925
  %424 = xor i64 %414, %412
  %425 = xor i64 %424, -4139446439246931641
  %426 = xor i64 %425, %423
  %427 = xor i64 %426, %416
  %428 = xor i64 %427, %420
  %429 = xor i64 %428, %418
  %430 = sext i32 %0 to i64
  %431 = and i64 %430, 5678423992539999227
  %432 = or i64 -5678423992539999228, %430
  %433 = sub i64 %432, -5678423992539999228
  %434 = sext i32 %0 to i64
  %435 = or i64 %434, -460027993291598953
  %436 = and i64 -460027993291598953, %434
  %437 = xor i64 -460027993291598953, %434
  %438 = or i64 %436, %437
  %439 = sext i32 %0 to i64
  %440 = and i64 %439, -8215867856334183358
  %441 = xor i64 %439, -1
  %442 = xor i64 -8215867856334183358, %441
  %443 = and i64 %442, -8215867856334183358
  %444 = xor i64 7788662848566823839, %443
  %445 = xor i64 %444, %435
  %446 = xor i64 %445, %440
  %447 = xor i64 %446, %433
  %448 = xor i64 %447, %438
  %449 = xor i64 %448, %431
  %450 = mul i64 %429, %449
  %451 = trunc i64 %450 to i32
  %452 = call i32 @_Z1diPiS_(i32 %451, i32* nonnull %139, i32* nonnull %199)
  %453 = add nsw i32 %452, %410
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %319) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %274) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %237) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %200) #3
  ret i32 %453
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = distinct !{!14, !15, !16}
!15 = !{!"llvm.loop.mustprogress"}
!16 = !{!"llvm.loop.unroll.disable"}
