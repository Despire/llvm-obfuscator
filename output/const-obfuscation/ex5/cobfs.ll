; ModuleID = 'output/const-obfuscation/ex5/ex5.ll'
source_filename = "input/const-obfuscation/ex5/ex5.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind ssp uwtable
define i32 @_Z1diPiS_(i32 %0, i32* nocapture %1, i32* nocapture %2) local_unnamed_addr #0 {
  %4 = sext i32 %0 to i64
  %5 = and i64 %4, -5801665384508059095
  %6 = xor i64 %4, -1
  %7 = xor i64 -5801665384508059095, %6
  %8 = and i64 %7, -5801665384508059095
  %9 = sext i32 %0 to i64
  %10 = or i64 %9, -2306642288701893388
  %11 = xor i64 %9, -1
  %12 = and i64 -2306642288701893388, %11
  %13 = add i64 %12, %9
  %14 = sext i32 %0 to i64
  %15 = add i64 %14, 79563500420793854
  %16 = sub i64 0, %14
  %17 = sub i64 79563500420793854, %16
  %18 = xor i64 %17, %10
  %19 = xor i64 %18, 5703940733053914973
  %20 = xor i64 %19, %13
  %21 = xor i64 %20, %15
  %22 = xor i64 %21, %8
  %23 = xor i64 %22, %5
  %24 = sext i32 %0 to i64
  %25 = or i64 %24, -6389739048291666775
  %26 = xor i64 %24, -1
  %27 = and i64 %26, -9164739375545799081
  %28 = and i64 %24, 9164739375545799080
  %29 = or i64 %27, %28
  %30 = xor i64 2847216321986255614, %29
  %31 = xor i64 %24, -1
  %32 = or i64 6389739048291666774, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = or i64 %30, %34
  %36 = sext i32 %0 to i64
  %37 = or i64 %36, -7894879865162095298
  %38 = xor i64 %36, -1
  %39 = and i64 -7894879865162095298, %38
  %40 = add i64 %39, %36
  %41 = sext i32 %0 to i64
  %42 = and i64 %41, -8438527879750452653
  %43 = xor i64 %41, -1
  %44 = xor i64 -8438527879750452653, %43
  %45 = and i64 %44, -8438527879750452653
  %46 = xor i64 %35, 0
  %47 = xor i64 %46, %45
  %48 = xor i64 %47, %40
  %49 = xor i64 %48, %42
  %50 = xor i64 %49, %25
  %51 = xor i64 %50, %37
  %52 = mul i64 %23, %51
  %53 = trunc i64 %52 to i32
  %54 = icmp sgt i32 %0, %53
  br i1 %54, label %55, label %188

55:                                               ; preds = %3
  %56 = sext i32 %0 to i64
  %57 = or i64 %56, -4335535619224868279
  %58 = xor i64 %56, -1
  %59 = and i64 -4335535619224868279, %58
  %60 = add i64 %59, %56
  %61 = sext i32 %0 to i64
  %62 = add i64 %61, 9066056842751181800
  %63 = and i64 9066056842751181800, %61
  %64 = or i64 9066056842751181800, %61
  %65 = add i64 %63, %64
  %66 = sext i32 %0 to i64
  %67 = or i64 %66, -5062556647286389492
  %68 = xor i64 %66, -1
  %69 = and i64 %68, -2631226024133132774
  %70 = and i64 %66, 2631226024133132773
  %71 = or i64 %69, %70
  %72 = xor i64 7116301292883163926, %71
  %73 = xor i64 %66, -1
  %74 = or i64 5062556647286389491, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = or i64 %72, %76
  %78 = xor i64 %60, -4681354962933907277
  %79 = xor i64 %78, %67
  %80 = xor i64 %79, %62
  %81 = xor i64 %80, %57
  %82 = xor i64 %81, %65
  %83 = xor i64 %82, %77
  %84 = sext i32 %0 to i64
  %85 = or i64 %84, -6166647859744906651
  %86 = xor i64 %84, -1
  %87 = and i64 -6166647859744906651, %86
  %88 = add i64 %87, %84
  %89 = sext i32 %0 to i64
  %90 = add i64 %89, -2510578813391763955
  %91 = add i64 3125954341750521775, %89
  %92 = sub i64 %91, 5636533155142285730
  %93 = xor i64 7583954094465926493, %85
  %94 = xor i64 %93, %90
  %95 = xor i64 %94, %92
  %96 = xor i64 %95, %88
  %97 = mul i64 %83, %96
  %98 = trunc i64 %97 to i32
  %99 = add nsw i32 %0, %98
  %100 = sext i32 %0 to i64
  %101 = and i64 %100, -7427291315134821825
  %102 = or i64 7427291315134821824, %100
  %103 = sub i64 %102, 7427291315134821824
  %104 = sext i32 %0 to i64
  %105 = or i64 %104, -7009497801580652960
  %106 = xor i64 %104, -1
  %107 = and i64 -7009497801580652960, %106
  %108 = add i64 %107, %104
  %109 = sext i32 %0 to i64
  %110 = or i64 %109, -5508067148878076653
  %111 = xor i64 %109, -1
  %112 = and i64 %111, 2809389968303690803
  %113 = and i64 %109, -2809389968303690804
  %114 = or i64 %112, %113
  %115 = xor i64 -7677617744122597088, %114
  %116 = xor i64 %109, -1
  %117 = or i64 5508067148878076652, %116
  %118 = xor i64 %117, -1
  %119 = and i64 %118, -1
  %120 = or i64 %115, %119
  %121 = xor i64 %120, %105
  %122 = xor i64 %121, %101
  %123 = xor i64 %122, %108
  %124 = xor i64 %123, 3992545134892623311
  %125 = xor i64 %124, %110
  %126 = xor i64 %125, %103
  %127 = sext i32 %0 to i64
  %128 = or i64 %127, -5776448963318193905
  %129 = xor i64 %127, -1
  %130 = and i64 -5776448963318193905, %129
  %131 = add i64 %130, %127
  %132 = sext i32 %0 to i64
  %133 = or i64 %132, -8225522981970945029
  %134 = xor i64 %132, -1
  %135 = and i64 %134, -1087534209185873113
  %136 = and i64 %132, 1087534209185873112
  %137 = or i64 %135, %136
  %138 = xor i64 9021096032195008732, %137
  %139 = xor i64 %132, -1
  %140 = or i64 8225522981970945028, %139
  %141 = xor i64 %140, -1
  %142 = and i64 %141, -1
  %143 = or i64 %138, %142
  %144 = xor i64 %131, %143
  %145 = xor i64 %144, -2760599249482806920
  %146 = xor i64 %145, %128
  %147 = xor i64 %146, %133
  %148 = mul i64 %126, %147
  %149 = trunc i64 %148 to i32
  %150 = sdiv i32 %99, %149
  %151 = sext i32 %0 to i64
  %152 = and i64 %151, 1247144729720804547
  %153 = or i64 -1247144729720804548, %151
  %154 = sub i64 %153, -1247144729720804548
  %155 = sext i32 %0 to i64
  %156 = or i64 %155, -2987444029397883640
  %157 = and i64 -2987444029397883640, %155
  %158 = xor i64 -2987444029397883640, %155
  %159 = or i64 %157, %158
  %160 = xor i64 %152, %156
  %161 = xor i64 %160, %154
  %162 = xor i64 %161, %159
  %163 = xor i64 %162, 6831921711889419035
  %164 = sext i32 %0 to i64
  %165 = add i64 %164, 1889140624242295002
  %166 = sub i64 0, %164
  %167 = add i64 -1889140624242295002, %166
  %168 = sub i64 0, %167
  %169 = sext i32 %0 to i64
  %170 = or i64 %169, 8796682148188829430
  %171 = xor i64 %169, -1
  %172 = and i64 8796682148188829430, %171
  %173 = add i64 %172, %169
  %174 = sext i32 %0 to i64
  %175 = and i64 %174, 6845540139295114124
  %176 = xor i64 %174, -1
  %177 = xor i64 6845540139295114124, %176
  %178 = and i64 %177, 6845540139295114124
  %179 = xor i64 %170, %175
  %180 = xor i64 %179, %178
  %181 = xor i64 %180, %168
  %182 = xor i64 %181, %165
  %183 = xor i64 %182, -7721625292182857965
  %184 = xor i64 %183, %173
  %185 = mul i64 %163, %184
  %186 = trunc i64 %185 to i32
  %187 = call i32 @llvm.smax.i32(i32 %150, i32 %186)
  br label %193

188:                                              ; preds = %193, %3
  %189 = load i32, i32* %1, align 4, !tbaa !10
  %190 = add nsw i32 %189, %0
  %191 = load i32, i32* %2, align 4, !tbaa !10
  %192 = add nsw i32 %190, %191
  ret i32 %192

193:                                              ; preds = %193, %55
  %194 = phi i32 [ %274, %193 ], [ 0, %55 ]
  %195 = load i32, i32* %1, align 4, !tbaa !10
  %196 = sext i32 %99 to i64
  %197 = or i64 %196, 140160474797605684
  %198 = and i64 140160474797605684, %196
  %199 = xor i64 140160474797605684, %196
  %200 = or i64 %198, %199
  %201 = sext i32 %187 to i64
  %202 = or i64 %201, 5372479867372968514
  %203 = and i64 5372479867372968514, %201
  %204 = xor i64 5372479867372968514, %201
  %205 = or i64 %203, %204
  %206 = sext i32 %0 to i64
  %207 = add i64 %206, -4925776548653441671
  %208 = add i64 1721317438949485277, %206
  %209 = add i64 %208, -6647093987602926948
  %210 = xor i64 %200, %197
  %211 = xor i64 %210, 7210919148643754433
  %212 = xor i64 %211, %205
  %213 = xor i64 %212, %209
  %214 = xor i64 %213, %207
  %215 = xor i64 %214, %202
  %216 = sext i32 %150 to i64
  %217 = add i64 %216, -86995785505744322
  %218 = add i64 1455008646924280684, %216
  %219 = add i64 %218, -1542004432430025006
  %220 = sext i32 %0 to i64
  %221 = or i64 %220, 1084481223141722246
  %222 = and i64 1084481223141722246, %220
  %223 = xor i64 1084481223141722246, %220
  %224 = or i64 %222, %223
  %225 = xor i64 %221, %219
  %226 = xor i64 %225, %217
  %227 = xor i64 %226, 7516081325319515713
  %228 = xor i64 %227, %224
  %229 = mul i64 %215, %228
  %230 = trunc i64 %229 to i32
  %231 = add nsw i32 %195, %230
  store i32 %231, i32* %1, align 4, !tbaa !10
  store i32 %195, i32* %2, align 4, !tbaa !10
  %232 = sext i32 %99 to i64
  %233 = add i64 %232, -7076710328702845511
  %234 = add i64 5970877402961740804, %232
  %235 = add i64 %234, 5399156342044965301
  %236 = sext i32 %99 to i64
  %237 = or i64 %236, 3078563650659583677
  %238 = xor i64 %236, -1
  %239 = and i64 %238, -6042427684785532773
  %240 = and i64 %236, 6042427684785532772
  %241 = or i64 %239, %240
  %242 = xor i64 -8746626695686924762, %241
  %243 = xor i64 %236, -1
  %244 = or i64 -3078563650659583678, %243
  %245 = xor i64 %244, -1
  %246 = and i64 %245, -1
  %247 = or i64 %242, %246
  %248 = xor i64 %247, %237
  %249 = xor i64 %248, %235
  %250 = xor i64 %249, 609140463410341915
  %251 = xor i64 %250, %233
  %252 = sext i32 %0 to i64
  %253 = or i64 %252, 7563105883239737188
  %254 = and i64 7563105883239737188, %252
  %255 = xor i64 7563105883239737188, %252
  %256 = or i64 %254, %255
  %257 = sext i32 %99 to i64
  %258 = or i64 %257, -6230974582452710146
  %259 = and i64 -6230974582452710146, %257
  %260 = xor i64 -6230974582452710146, %257
  %261 = or i64 %259, %260
  %262 = sext i32 %0 to i64
  %263 = add i64 %262, 8676323955778133522
  %264 = add i64 -8661027913855299276, %262
  %265 = add i64 %264, -1109392204076118818
  %266 = xor i64 2486227421029315091, %253
  %267 = xor i64 %266, %265
  %268 = xor i64 %267, %263
  %269 = xor i64 %268, %256
  %270 = xor i64 %269, %261
  %271 = xor i64 %270, %258
  %272 = mul i64 %251, %271
  %273 = trunc i64 %272 to i32
  %274 = add nuw nsw i32 %194, %273
  %275 = icmp eq i32 %274, %187
  br i1 %275, label %188, label %193, !llvm.loop !14
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind ssp uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = and i64 %3, -7680505479099171061
  %5 = or i64 7680505479099171060, %3
  %6 = sub i64 %5, 7680505479099171060
  %7 = sext i32 %0 to i64
  %8 = or i64 %7, 6403675365172858951
  %9 = xor i64 %7, -1
  %10 = and i64 %9, -2102674642914049835
  %11 = and i64 %7, 2102674642914049834
  %12 = or i64 %10, %11
  %13 = xor i64 -5039633138977910638, %12
  %14 = xor i64 %7, -1
  %15 = or i64 -6403675365172858952, %14
  %16 = xor i64 %15, -1
  %17 = and i64 %16, -1
  %18 = or i64 %13, %17
  %19 = sext i32 %0 to i64
  %20 = or i64 %19, 6992050176374796832
  %21 = xor i64 %19, -1
  %22 = and i64 %21, -57793035954713509
  %23 = and i64 %19, 57793035954713508
  %24 = or i64 %22, %23
  %25 = xor i64 -7045198694740951429, %24
  %26 = xor i64 %19, -1
  %27 = or i64 -6992050176374796833, %26
  %28 = xor i64 %27, -1
  %29 = and i64 %28, -1
  %30 = or i64 %25, %29
  %31 = xor i64 %30, %8
  %32 = xor i64 %31, %4
  %33 = xor i64 %32, 3703069812236174251
  %34 = xor i64 %33, %20
  %35 = xor i64 %34, %6
  %36 = xor i64 %35, %18
  %37 = sext i32 %0 to i64
  %38 = and i64 %37, -2830309516091412297
  %39 = xor i64 %37, -1
  %40 = or i64 2830309516091412296, %39
  %41 = xor i64 %40, -1
  %42 = and i64 %41, -1
  %43 = sext i32 %0 to i64
  %44 = or i64 %43, -3450057683374127911
  %45 = and i64 -3450057683374127911, %43
  %46 = xor i64 -3450057683374127911, %43
  %47 = or i64 %45, %46
  %48 = sext i32 %0 to i64
  %49 = or i64 %48, -7333432006431570562
  %50 = and i64 -7333432006431570562, %48
  %51 = xor i64 -7333432006431570562, %48
  %52 = or i64 %50, %51
  %53 = xor i64 %47, %49
  %54 = xor i64 %53, %42
  %55 = xor i64 %54, %52
  %56 = xor i64 %55, %38
  %57 = xor i64 %56, %44
  %58 = xor i64 %57, 4635092551825727235
  %59 = mul i64 %36, %58
  %60 = trunc i64 %59 to i32
  %61 = alloca i32, i32 %60, align 4
  %62 = sext i32 %0 to i64
  %63 = or i64 %62, 3671575981961452988
  %64 = xor i64 %62, -1
  %65 = and i64 %64, 240799923689752864
  %66 = and i64 %62, -240799923689752865
  %67 = or i64 %65, %66
  %68 = xor i64 3576826387930223772, %67
  %69 = xor i64 %62, -1
  %70 = or i64 -3671575981961452989, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = or i64 %68, %72
  %74 = sext i32 %0 to i64
  %75 = add i64 %74, 8828895490653733416
  %76 = sub i64 0, %74
  %77 = sub i64 8828895490653733416, %76
  %78 = sext i32 %0 to i64
  %79 = add i64 %78, -3963747086722372804
  %80 = sub i64 0, %78
  %81 = add i64 3963747086722372804, %80
  %82 = sub i64 0, %81
  %83 = xor i64 %79, 6739614337444372743
  %84 = xor i64 %83, %82
  %85 = xor i64 %84, %75
  %86 = xor i64 %85, %73
  %87 = xor i64 %86, %63
  %88 = xor i64 %87, %77
  %89 = sext i32 %0 to i64
  %90 = or i64 %89, 8111705192560536350
  %91 = and i64 8111705192560536350, %89
  %92 = xor i64 8111705192560536350, %89
  %93 = or i64 %91, %92
  %94 = sext i32 %0 to i64
  %95 = and i64 %94, 8319690019060882936
  %96 = xor i64 %94, -1
  %97 = or i64 -8319690019060882937, %96
  %98 = xor i64 %97, -1
  %99 = and i64 %98, -1
  %100 = sext i32 %0 to i64
  %101 = add i64 %100, -3358936697645969902
  %102 = and i64 -3358936697645969902, %100
  %103 = or i64 -3358936697645969902, %100
  %104 = add i64 %102, %103
  %105 = xor i64 -7369265002766975817, %104
  %106 = xor i64 %105, %99
  %107 = xor i64 %106, %101
  %108 = xor i64 %107, %95
  %109 = xor i64 %108, %93
  %110 = xor i64 %109, %90
  %111 = mul i64 %88, %110
  %112 = trunc i64 %111 to i32
  %113 = alloca i32, i32 %112, align 4
  %114 = sext i32 %0 to i64
  %115 = add i64 %114, 1937931299438787446
  %116 = and i64 1937931299438787446, %114
  %117 = or i64 1937931299438787446, %114
  %118 = add i64 %116, %117
  %119 = sext i32 %0 to i64
  %120 = or i64 %119, -6912084575404438302
  %121 = xor i64 %119, -1
  %122 = and i64 -6912084575404438302, %121
  %123 = add i64 %122, %119
  %124 = sext i32 %0 to i64
  %125 = or i64 %124, -3271926673832385584
  %126 = and i64 -3271926673832385584, %124
  %127 = xor i64 -3271926673832385584, %124
  %128 = or i64 %126, %127
  %129 = xor i64 %120, %125
  %130 = xor i64 %129, %123
  %131 = xor i64 %130, %115
  %132 = xor i64 %131, -4619440694050847551
  %133 = xor i64 %132, %128
  %134 = xor i64 %133, %118
  %135 = sext i32 %0 to i64
  %136 = add i64 %135, -4160522569506963002
  %137 = add i64 -8750637878541513127, %135
  %138 = sub i64 %137, -4590115309034550125
  %139 = sext i32 %0 to i64
  %140 = add i64 %139, -1007537112559369303
  %141 = add i64 -2077331291818440319, %139
  %142 = sub i64 %141, -1069794179259071016
  %143 = sext i32 %0 to i64
  %144 = and i64 %143, 9115414542202524972
  %145 = xor i64 %143, -1
  %146 = or i64 -9115414542202524973, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = xor i64 %144, %148
  %150 = xor i64 %149, %140
  %151 = xor i64 %150, %136
  %152 = xor i64 %151, 256476650329148225
  %153 = xor i64 %152, %138
  %154 = xor i64 %153, %142
  %155 = mul i64 %134, %154
  %156 = trunc i64 %155 to i32
  %157 = alloca i32, i32 %156, align 4
  %158 = sext i32 %0 to i64
  %159 = or i64 %158, -6522178158408368870
  %160 = and i64 -6522178158408368870, %158
  %161 = xor i64 -6522178158408368870, %158
  %162 = or i64 %160, %161
  %163 = sext i32 %0 to i64
  %164 = and i64 %163, 2950820749566972027
  %165 = xor i64 %163, -1
  %166 = xor i64 2950820749566972027, %165
  %167 = and i64 %166, 2950820749566972027
  %168 = sext i32 %0 to i64
  %169 = or i64 %168, -7892836301854746157
  %170 = and i64 -7892836301854746157, %168
  %171 = xor i64 -7892836301854746157, %168
  %172 = or i64 %170, %171
  %173 = xor i64 875252131774995127, %164
  %174 = xor i64 %173, %169
  %175 = xor i64 %174, %162
  %176 = xor i64 %175, %167
  %177 = xor i64 %176, %159
  %178 = xor i64 %177, %172
  %179 = sext i32 %0 to i64
  %180 = and i64 %179, -1509193088666911680
  %181 = xor i64 %179, -1
  %182 = xor i64 -1509193088666911680, %181
  %183 = and i64 %182, -1509193088666911680
  %184 = sext i32 %0 to i64
  %185 = add i64 %184, 4560718977692656158
  %186 = add i64 -8425371488607712455, %184
  %187 = sub i64 %186, 5460653607409183003
  %188 = sext i32 %0 to i64
  %189 = and i64 %188, 6370281955143873823
  %190 = xor i64 %188, -1
  %191 = or i64 -6370281955143873824, %190
  %192 = xor i64 %191, -1
  %193 = and i64 %192, -1
  %194 = xor i64 %187, 6281419530336985863
  %195 = xor i64 %194, %180
  %196 = xor i64 %195, %193
  %197 = xor i64 %196, %185
  %198 = xor i64 %197, %189
  %199 = xor i64 %198, %183
  %200 = mul i64 %178, %199
  %201 = trunc i64 %200 to i32
  %202 = alloca i32, i32 %201, align 4
  %203 = bitcast i32* %61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %203) #3
  %204 = sext i32 %0 to i64
  %205 = add i64 %204, -8997142571758400406
  %206 = add i64 5111656153773062533, %204
  %207 = sub i64 %206, -4337945348178088677
  %208 = sext i32 %0 to i64
  %209 = add i64 %208, -8036491096597110102
  %210 = sub i64 0, %208
  %211 = add i64 8036491096597110102, %210
  %212 = sub i64 0, %211
  %213 = sext i32 %0 to i64
  %214 = add i64 %213, -316995403267014198
  %215 = and i64 -316995403267014198, %213
  %216 = or i64 -316995403267014198, %213
  %217 = add i64 %215, %216
  %218 = xor i64 %205, %217
  %219 = xor i64 %218, %214
  %220 = xor i64 %219, %207
  %221 = xor i64 %220, %212
  %222 = xor i64 %221, %209
  %223 = xor i64 %222, -2837692937052028125
  %224 = sext i32 %0 to i64
  %225 = or i64 %224, 4447265575800227991
  %226 = xor i64 %224, -1
  %227 = and i64 4447265575800227991, %226
  %228 = add i64 %227, %224
  %229 = sext i32 %0 to i64
  %230 = and i64 %229, -7631952816564051934
  %231 = xor i64 %229, -1
  %232 = or i64 7631952816564051933, %231
  %233 = xor i64 %232, -1
  %234 = and i64 %233, -1
  %235 = xor i64 1478574224165192843, %225
  %236 = xor i64 %235, %234
  %237 = xor i64 %236, %230
  %238 = xor i64 %237, %228
  %239 = mul i64 %223, %238
  %240 = trunc i64 %239 to i32
  store i32 %240, i32* %61, align 4, !tbaa !10
  %241 = bitcast i32* %113 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %241) #3
  %242 = sext i32 %0 to i64
  %243 = add i64 %242, -2488435569912103876
  %244 = add i64 8839404275049803142, %242
  %245 = add i64 %244, 7118904228747644598
  %246 = sext i32 %0 to i64
  %247 = add i64 %246, 6437188597428100390
  %248 = xor i64 6437188597428100390, %246
  %249 = and i64 6437188597428100390, %246
  %250 = mul i64 2, %249
  %251 = add i64 %248, %250
  %252 = sext i32 %0 to i64
  %253 = and i64 %252, -3652633437927887069
  %254 = xor i64 %252, -1
  %255 = xor i64 -3652633437927887069, %254
  %256 = and i64 %255, -3652633437927887069
  %257 = xor i64 %251, -6809265590486909201
  %258 = xor i64 %257, %256
  %259 = xor i64 %258, %245
  %260 = xor i64 %259, %253
  %261 = xor i64 %260, %247
  %262 = xor i64 %261, %243
  %263 = sext i32 %0 to i64
  %264 = or i64 %263, -1786498257299419120
  %265 = xor i64 %263, -1
  %266 = and i64 -1786498257299419120, %265
  %267 = add i64 %266, %263
  %268 = sext i32 %0 to i64
  %269 = add i64 %268, 2434113505212292558
  %270 = xor i64 2434113505212292558, %268
  %271 = and i64 2434113505212292558, %268
  %272 = mul i64 2, %271
  %273 = add i64 %270, %272
  %274 = sext i32 %0 to i64
  %275 = or i64 %274, -120798132722355194
  %276 = xor i64 %274, -1
  %277 = and i64 %276, 5671892340301679908
  %278 = and i64 %274, -5671892340301679909
  %279 = or i64 %277, %278
  %280 = xor i64 -5700349085710714590, %279
  %281 = xor i64 %274, -1
  %282 = or i64 120798132722355193, %281
  %283 = xor i64 %282, -1
  %284 = and i64 %283, -1
  %285 = or i64 %280, %284
  %286 = xor i64 %273, %269
  %287 = xor i64 %286, %275
  %288 = xor i64 %287, -4460543889647013813
  %289 = xor i64 %288, %285
  %290 = xor i64 %289, %267
  %291 = xor i64 %290, %264
  %292 = mul i64 %262, %291
  %293 = trunc i64 %292 to i32
  store i32 %293, i32* %113, align 4, !tbaa !10
  %294 = bitcast i32* %157 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %294) #3
  %295 = sext i32 %0 to i64
  %296 = add i64 %295, -3570097743502569966
  %297 = sub i64 0, %295
  %298 = add i64 3570097743502569966, %297
  %299 = sub i64 0, %298
  %300 = sext i32 %0 to i64
  %301 = add i64 %300, -8528149994388629698
  %302 = xor i64 -8528149994388629698, %300
  %303 = and i64 -8528149994388629698, %300
  %304 = mul i64 2, %303
  %305 = add i64 %302, %304
  %306 = sext i32 %0 to i64
  %307 = add i64 %306, -3413685613686091410
  %308 = add i64 -4493200028358349920, %306
  %309 = add i64 %308, 1079514414672258510
  %310 = xor i64 %305, 2925707606689707355
  %311 = xor i64 %310, %296
  %312 = xor i64 %311, %307
  %313 = xor i64 %312, %299
  %314 = xor i64 %313, %301
  %315 = xor i64 %314, %309
  %316 = sext i32 %0 to i64
  %317 = add i64 %316, 6171738936359887068
  %318 = add i64 1902213910498564075, %316
  %319 = add i64 %318, 4269525025861322993
  %320 = sext i32 %0 to i64
  %321 = add i64 %320, -7243652202311969489
  %322 = and i64 -7243652202311969489, %320
  %323 = or i64 -7243652202311969489, %320
  %324 = add i64 %322, %323
  %325 = xor i64 %319, %317
  %326 = xor i64 %325, 4704755949017051859
  %327 = xor i64 %326, %321
  %328 = xor i64 %327, %324
  %329 = mul i64 %315, %328
  %330 = trunc i64 %329 to i32
  store i32 %330, i32* %157, align 4, !tbaa !10
  %331 = bitcast i32* %202 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %331) #3
  %332 = sext i32 %0 to i64
  %333 = and i64 %332, -4426318614842612287
  %334 = xor i64 %332, -1
  %335 = xor i64 -4426318614842612287, %334
  %336 = and i64 %335, -4426318614842612287
  %337 = sext i32 %0 to i64
  %338 = or i64 %337, 3676805451656610898
  %339 = and i64 3676805451656610898, %337
  %340 = xor i64 3676805451656610898, %337
  %341 = or i64 %339, %340
  %342 = sext i32 %0 to i64
  %343 = or i64 %342, 2051945106520236870
  %344 = and i64 2051945106520236870, %342
  %345 = xor i64 2051945106520236870, %342
  %346 = or i64 %344, %345
  %347 = xor i64 %333, %336
  %348 = xor i64 %347, %341
  %349 = xor i64 %348, %338
  %350 = xor i64 %349, %346
  %351 = xor i64 %350, %343
  %352 = xor i64 %351, 3596705766508387123
  %353 = sext i32 %0 to i64
  %354 = and i64 %353, 5961834074402516162
  %355 = or i64 -5961834074402516163, %353
  %356 = sub i64 %355, -5961834074402516163
  %357 = sext i32 %0 to i64
  %358 = add i64 %357, 4505709639124859880
  %359 = and i64 4505709639124859880, %357
  %360 = or i64 4505709639124859880, %357
  %361 = add i64 %359, %360
  %362 = sext i32 %0 to i64
  %363 = or i64 %362, 4686334200383119146
  %364 = and i64 4686334200383119146, %362
  %365 = xor i64 4686334200383119146, %362
  %366 = or i64 %364, %365
  %367 = xor i64 5256324610455042023, %363
  %368 = xor i64 %367, %354
  %369 = xor i64 %368, %356
  %370 = xor i64 %369, %361
  %371 = xor i64 %370, %358
  %372 = xor i64 %371, %366
  %373 = mul i64 %352, %372
  %374 = trunc i64 %373 to i32
  store i32 %374, i32* %202, align 4, !tbaa !10
  %375 = sext i32 %0 to i64
  %376 = or i64 %375, 3769241352249390520
  %377 = xor i64 %375, -1
  %378 = and i64 3769241352249390520, %377
  %379 = add i64 %378, %375
  %380 = sext i32 %0 to i64
  %381 = or i64 %380, -9046391033853548033
  %382 = xor i64 %380, -1
  %383 = and i64 -9046391033853548033, %382
  %384 = add i64 %383, %380
  %385 = xor i64 %384, %376
  %386 = xor i64 %385, %381
  %387 = xor i64 %386, %379
  %388 = xor i64 %387, -886833791858873135
  %389 = sext i32 %0 to i64
  %390 = add i64 %389, 3746969994478584415
  %391 = add i64 -7295729438733255223, %389
  %392 = add i64 %391, -7404044640497711978
  %393 = sext i32 %0 to i64
  %394 = or i64 %393, 8679257385864269884
  %395 = xor i64 %393, -1
  %396 = and i64 8679257385864269884, %395
  %397 = add i64 %396, %393
  %398 = xor i64 %390, %397
  %399 = xor i64 %398, 3211075181746542303
  %400 = xor i64 %399, %392
  %401 = xor i64 %400, %394
  %402 = mul i64 %388, %401
  %403 = trunc i64 %402 to i32
  %404 = call i32 @_Z1diPiS_(i32 %403, i32* nonnull %61, i32* nonnull %113)
  %405 = sext i32 %0 to i64
  %406 = add i64 %405, -1849592959311420755
  %407 = sub i64 0, %405
  %408 = sub i64 -1849592959311420755, %407
  %409 = sext i32 %0 to i64
  %410 = and i64 %409, 7937522449659539406
  %411 = xor i64 %409, -1
  %412 = or i64 -7937522449659539407, %411
  %413 = xor i64 %412, -1
  %414 = and i64 %413, -1
  %415 = xor i64 %408, %410
  %416 = xor i64 %415, %406
  %417 = xor i64 %416, %414
  %418 = xor i64 %417, 6738178182459222303
  %419 = sext i32 %0 to i64
  %420 = or i64 %419, -4685919065835908294
  %421 = xor i64 %419, -1
  %422 = and i64 %421, -6811835803732576761
  %423 = and i64 %419, 6811835803732576760
  %424 = or i64 %422, %423
  %425 = xor i64 2274100119536510269, %424
  %426 = xor i64 %419, -1
  %427 = or i64 4685919065835908293, %426
  %428 = xor i64 %427, -1
  %429 = and i64 %428, -1
  %430 = or i64 %425, %429
  %431 = sext i32 %0 to i64
  %432 = or i64 %431, 8101332475827475238
  %433 = and i64 8101332475827475238, %431
  %434 = xor i64 8101332475827475238, %431
  %435 = or i64 %433, %434
  %436 = xor i64 -1472880280646510649, %435
  %437 = xor i64 %436, %432
  %438 = xor i64 %437, %430
  %439 = xor i64 %438, %420
  %440 = mul i64 %418, %439
  %441 = trunc i64 %440 to i32
  %442 = call i32 @_Z1diPiS_(i32 %441, i32* nonnull %157, i32* nonnull %202)
  %443 = add nsw i32 %442, %404
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %331) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %294) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %241) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %203) #3
  ret i32 %443
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = distinct !{!14, !15, !16}
!15 = !{!"llvm.loop.mustprogress"}
!16 = !{!"llvm.loop.unroll.disable"}
