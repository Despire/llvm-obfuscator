; ModuleID = 'output/const-obfuscation/ex8/ex8.ll'
source_filename = "input/const-obfuscation/ex8/ex8.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [4 x i8] c"\1B[H\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c".,-~:;=!*#$@\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1

; Function Attrs: mustprogress nofree nounwind ssp uwtable
define void @_Z7displayPKcRfS1_i(i8* nocapture readonly %0, float* nocapture nonnull align 4 dereferenceable(4) %1, float* nocapture nonnull align 4 dereferenceable(4) %2, i32 %3) local_unnamed_addr #0 {
  %5 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %7

6:                                                ; preds = %112
  ret void

7:                                                ; preds = %112, %4
  %8 = phi i64 [ 0, %4 ], [ %158, %112 ]
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %5 to i64
  %11 = and i64 %10, 4082813275417620432
  %12 = or i64 -4082813275417620433, %10
  %13 = sub i64 %12, -4082813275417620433
  %14 = sext i32 %5 to i64
  %15 = add i64 %14, -8150649142334017971
  %16 = add i64 -425768536196954388, %14
  %17 = sub i64 %16, 7724880606137063583
  %18 = sext i32 %3 to i64
  %19 = and i64 %18, -5883672136136441104
  %20 = xor i64 %18, -1
  %21 = or i64 5883672136136441103, %20
  %22 = xor i64 %21, -1
  %23 = and i64 %22, -1
  %24 = xor i64 %23, %15
  %25 = xor i64 %24, -6159644815836402811
  %26 = xor i64 %25, %13
  %27 = xor i64 %26, %17
  %28 = xor i64 %27, %19
  %29 = xor i64 %28, %11
  %30 = sext i32 %5 to i64
  %31 = and i64 %30, 6595238664075221941
  %32 = xor i64 %30, -1
  %33 = or i64 -6595238664075221942, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = sext i32 %3 to i64
  %37 = and i64 %36, 6613296150723037163
  %38 = xor i64 %36, -1
  %39 = or i64 -6613296150723037164, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = sext i32 %5 to i64
  %43 = and i64 %42, -1826785738699226479
  %44 = xor i64 %42, -1
  %45 = xor i64 -1826785738699226479, %44
  %46 = and i64 %45, -1826785738699226479
  %47 = xor i64 %37, %31
  %48 = xor i64 %47, %41
  %49 = xor i64 %48, %46
  %50 = xor i64 %49, 218354202467805200
  %51 = xor i64 %50, %35
  %52 = xor i64 %51, %43
  %53 = mul i64 %29, %52
  %54 = trunc i64 %53 to i32
  %55 = urem i32 %9, %54
  %56 = sext i32 %5 to i64
  %57 = and i64 %56, -1765298930828662651
  %58 = xor i64 %56, -1
  %59 = xor i64 -1765298930828662651, %58
  %60 = and i64 %59, -1765298930828662651
  %61 = sext i32 %5 to i64
  %62 = and i64 %61, -8671988463889140887
  %63 = xor i64 %61, -1
  %64 = or i64 8671988463889140886, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = sext i32 %5 to i64
  %68 = and i64 %67, -8829700244537217669
  %69 = xor i64 %67, -1
  %70 = xor i64 -8829700244537217669, %69
  %71 = and i64 %70, -8829700244537217669
  %72 = xor i64 %68, %71
  %73 = xor i64 %72, %62
  %74 = xor i64 %73, %66
  %75 = xor i64 %74, %57
  %76 = xor i64 %75, -3348407341987609985
  %77 = xor i64 %76, %60
  %78 = sext i32 %5 to i64
  %79 = and i64 %78, 489991409736695209
  %80 = or i64 -489991409736695210, %78
  %81 = sub i64 %80, -489991409736695210
  %82 = sext i32 %3 to i64
  %83 = or i64 %82, -8699936327009107967
  %84 = xor i64 %82, -1
  %85 = and i64 %84, 696826573564645846
  %86 = and i64 %82, -696826573564645847
  %87 = or i64 %85, %86
  %88 = xor i64 -8149195276024507945, %87
  %89 = xor i64 %82, -1
  %90 = or i64 8699936327009107966, %89
  %91 = xor i64 %90, -1
  %92 = and i64 %91, -1
  %93 = or i64 %88, %92
  %94 = sext i32 %3 to i64
  %95 = and i64 %94, 1841361693849408241
  %96 = xor i64 %94, -1
  %97 = xor i64 1841361693849408241, %96
  %98 = and i64 %97, 1841361693849408241
  %99 = xor i64 %98, %79
  %100 = xor i64 %99, %95
  %101 = xor i64 %100, %81
  %102 = xor i64 %101, %93
  %103 = xor i64 %102, 0
  %104 = xor i64 %103, %83
  %105 = mul i64 %77, %104
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %55, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %7
  %109 = getelementptr inbounds i8, i8* %0, i64 %8
  %110 = load i8, i8* %109, align 1, !tbaa !10
  %111 = sext i8 %110 to i32
  br label %112

112:                                              ; preds = %108, %7
  %113 = phi i32 [ %111, %108 ], [ 10, %7 ]
  %114 = call i32 @putchar(i32 %113)
  %115 = load float, float* %1, align 4, !tbaa !13
  %116 = fpext float %115 to double
  %117 = fadd double %116, 4.000000e-05
  %118 = fptrunc double %117 to float
  store float %118, float* %1, align 4, !tbaa !13
  %119 = load float, float* %2, align 4, !tbaa !13
  %120 = fpext float %119 to double
  %121 = fadd double %120, 2.000000e-05
  %122 = fptrunc double %121 to float
  store float %122, float* %2, align 4, !tbaa !13
  %123 = sext i32 %9 to i64
  %124 = and i64 %123, 2677551168211200284
  %125 = xor i64 %123, -1
  %126 = xor i64 2677551168211200284, %125
  %127 = and i64 %126, 2677551168211200284
  %128 = sext i32 %5 to i64
  %129 = add i64 %128, 2091659527313598089
  %130 = and i64 2091659527313598089, %128
  %131 = or i64 2091659527313598089, %128
  %132 = add i64 %130, %131
  %133 = sext i32 %5 to i64
  %134 = add i64 %133, -61287961392164101
  %135 = sub i64 0, %133
  %136 = add i64 61287961392164101, %135
  %137 = sub i64 0, %136
  %138 = xor i64 %137, %129
  %139 = xor i64 %138, %127
  %140 = xor i64 %139, 3651591391810323355
  %141 = xor i64 %140, %132
  %142 = xor i64 %141, %124
  %143 = xor i64 %142, %134
  %144 = sext i32 %9 to i64
  %145 = add i64 %144, 7623758889873327242
  %146 = sub i64 0, %144
  %147 = sub i64 7623758889873327242, %146
  %148 = sext i32 %9 to i64
  %149 = add i64 %148, -6157790187274592236
  %150 = and i64 -6157790187274592236, %148
  %151 = or i64 -6157790187274592236, %148
  %152 = add i64 %150, %151
  %153 = xor i64 8488981060889946771, %149
  %154 = xor i64 %153, %147
  %155 = xor i64 %154, %145
  %156 = xor i64 %155, %152
  %157 = mul i64 %143, %156
  %158 = add nuw nsw i64 %8, %157
  %159 = sext i32 %3 to i64
  %160 = or i64 %159, 2731730338352745029
  %161 = xor i64 %159, -1
  %162 = and i64 2731730338352745029, %161
  %163 = add i64 %162, %159
  %164 = sext i32 %5 to i64
  %165 = add i64 %164, -6742555174056176830
  %166 = sub i64 0, %164
  %167 = sub i64 -6742555174056176830, %166
  %168 = sext i32 %9 to i64
  %169 = and i64 %168, -8165465951952070557
  %170 = xor i64 %168, -1
  %171 = or i64 8165465951952070556, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = xor i64 %163, %160
  %175 = xor i64 %174, %169
  %176 = xor i64 %175, %167
  %177 = xor i64 %176, %165
  %178 = xor i64 %177, %173
  %179 = xor i64 %178, -2961303423770471583
  %180 = sext i32 %55 to i64
  %181 = and i64 %180, -8900738258461750937
  %182 = or i64 8900738258461750936, %180
  %183 = sub i64 %182, 8900738258461750936
  %184 = sext i32 %5 to i64
  %185 = add i64 %184, -9151640257076885209
  %186 = add i64 -6821061874921878966, %184
  %187 = add i64 %186, -2330578382155006243
  %188 = xor i64 %185, %181
  %189 = xor i64 %188, %187
  %190 = xor i64 %189, -4711293554022620287
  %191 = xor i64 %190, %183
  %192 = mul i64 %179, %191
  %193 = icmp eq i64 %158, %192
  br i1 %193, label %6, label %7, !llvm.loop !15
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind ssp uwtable
define void @_Z6renderffiPfPcii(float %0, float %1, i32 %2, float* nocapture %3, i8* nocapture %4, i32 %5, i32 %6) local_unnamed_addr #3 {
  %8 = sext i32 %5 to i64
  %9 = add i64 %8, -2727177989149918288
  %10 = add i64 -92845463789129379, %8
  %11 = sub i64 %10, 2634332525360788909
  %12 = sext i32 %2 to i64
  %13 = add i64 %12, 2626293678943863921
  %14 = add i64 -8093391432070533814, %12
  %15 = add i64 %14, -7727058962695153881
  %16 = sext i32 %5 to i64
  %17 = or i64 %16, 2118653566146094244
  %18 = xor i64 %16, -1
  %19 = and i64 2118653566146094244, %18
  %20 = add i64 %19, %16
  %21 = xor i64 %13, %15
  %22 = xor i64 %21, %17
  %23 = xor i64 %22, %9
  %24 = xor i64 %23, %11
  %25 = xor i64 %24, 8941898647032288197
  %26 = xor i64 %25, %20
  %27 = sext i32 %6 to i64
  %28 = and i64 %27, -6340378307287003101
  %29 = or i64 6340378307287003100, %27
  %30 = sub i64 %29, 6340378307287003100
  %31 = sext i32 %6 to i64
  %32 = add i64 %31, 2038729017888378119
  %33 = sub i64 0, %31
  %34 = add i64 -2038729017888378119, %33
  %35 = sub i64 0, %34
  %36 = xor i64 %35, -4231829710086604280
  %37 = xor i64 %36, %32
  %38 = xor i64 %37, %28
  %39 = xor i64 %38, %30
  %40 = mul i64 %26, %39
  %41 = trunc i64 %40 to i32
  %42 = sdiv i32 %6, %41
  %43 = sext i32 %2 to i64
  %44 = sext i32 %6 to i64
  %45 = add i64 %44, 3883705111173639699
  %46 = add i64 5105349009163887357, %44
  %47 = sub i64 %46, 1221643897990247658
  %48 = sext i32 %6 to i64
  %49 = and i64 %48, 2923742594277642422
  %50 = xor i64 %48, -1
  %51 = or i64 -2923742594277642423, %50
  %52 = xor i64 %51, -1
  %53 = and i64 %52, -1
  %54 = xor i64 %45, %49
  %55 = xor i64 %54, 4215450937021753271
  %56 = xor i64 %55, %53
  %57 = xor i64 %56, %47
  %58 = sext i32 %6 to i64
  %59 = and i64 %58, 2382498782152156940
  %60 = xor i64 %58, -1
  %61 = xor i64 2382498782152156940, %60
  %62 = and i64 %61, 2382498782152156940
  %63 = sext i32 %5 to i64
  %64 = add i64 %63, -7851662192961681775
  %65 = sub i64 0, %63
  %66 = add i64 7851662192961681775, %65
  %67 = sub i64 0, %66
  %68 = xor i64 1480191497121087712, %64
  %69 = xor i64 %68, %67
  %70 = xor i64 %69, %62
  %71 = xor i64 %70, %59
  %72 = mul i64 %57, %71
  %73 = trunc i64 %72 to i8
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %73, i64 %43, i1 false)
  %74 = bitcast float* %3 to i8*
  %75 = sext i32 %5 to i64
  %76 = or i64 %75, -5708092728145213196
  %77 = and i64 -5708092728145213196, %75
  %78 = xor i64 -5708092728145213196, %75
  %79 = or i64 %77, %78
  %80 = sext i32 %5 to i64
  %81 = and i64 %80, 6927200908890678793
  %82 = xor i64 %80, -1
  %83 = xor i64 6927200908890678793, %82
  %84 = and i64 %83, 6927200908890678793
  %85 = sext i32 %5 to i64
  %86 = add i64 %85, 3683451916563694523
  %87 = sub i64 0, %85
  %88 = sub i64 3683451916563694523, %87
  %89 = xor i64 %86, %79
  %90 = xor i64 %89, %84
  %91 = xor i64 %90, -594178656462280897
  %92 = xor i64 %91, %76
  %93 = xor i64 %92, %81
  %94 = xor i64 %93, %88
  %95 = sext i32 %6 to i64
  %96 = or i64 %95, 3568883314027789212
  %97 = xor i64 %95, -1
  %98 = and i64 %97, 649422508907815963
  %99 = and i64 %95, -649422508907815964
  %100 = or i64 %98, %99
  %101 = xor i64 4072395510326370183, %100
  %102 = xor i64 %95, -1
  %103 = or i64 -3568883314027789213, %102
  %104 = xor i64 %103, -1
  %105 = and i64 %104, -1
  %106 = or i64 %101, %105
  %107 = sext i32 %2 to i64
  %108 = or i64 %107, -629986891966525936
  %109 = xor i64 %107, -1
  %110 = and i64 -629986891966525936, %109
  %111 = add i64 %110, %107
  %112 = sext i32 %6 to i64
  %113 = or i64 %112, 5165427171015148897
  %114 = and i64 5165427171015148897, %112
  %115 = xor i64 5165427171015148897, %112
  %116 = or i64 %114, %115
  %117 = xor i64 %113, %106
  %118 = xor i64 %117, %96
  %119 = xor i64 %118, -6718636970447597186
  %120 = xor i64 %119, %111
  %121 = xor i64 %120, %116
  %122 = xor i64 %121, %108
  %123 = mul i64 %94, %122
  %124 = shl nsw i64 %43, %123
  %125 = sext i32 %2 to i64
  %126 = add i64 %125, 6955042530275876801
  %127 = sub i64 0, %125
  %128 = add i64 -6955042530275876801, %127
  %129 = sub i64 0, %128
  %130 = sext i32 %5 to i64
  %131 = and i64 %130, 8074919236954256443
  %132 = or i64 -8074919236954256444, %130
  %133 = sub i64 %132, -8074919236954256444
  %134 = xor i64 %133, -8126787481721334963
  %135 = xor i64 %134, %129
  %136 = xor i64 %135, %131
  %137 = xor i64 %136, %126
  %138 = sext i32 %6 to i64
  %139 = add i64 %138, -5563976439558817328
  %140 = add i64 -7338502171662074040, %138
  %141 = add i64 %140, 1774525732103256712
  %142 = sext i32 %6 to i64
  %143 = and i64 %142, -6647972517869587686
  %144 = or i64 6647972517869587685, %142
  %145 = sub i64 %144, 6647972517869587685
  %146 = sext i32 %5 to i64
  %147 = and i64 %146, -2314479589872350721
  %148 = or i64 2314479589872350720, %146
  %149 = sub i64 %148, 2314479589872350720
  %150 = xor i64 %149, %139
  %151 = xor i64 %150, %143
  %152 = xor i64 %151, %145
  %153 = xor i64 %152, %147
  %154 = xor i64 %153, 0
  %155 = xor i64 %154, %141
  %156 = mul i64 %137, %155
  %157 = trunc i64 %156 to i8
  call void @llvm.memset.p0i8.i64(i8* align 4 %74, i8 %157, i64 %124, i1 false)
  %158 = sitofp i32 %42 to float
  %159 = sext i32 %5 to i64
  %160 = and i64 %159, 6560772410854669040
  %161 = xor i64 %159, -1
  %162 = or i64 -6560772410854669041, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = sext i32 %6 to i64
  %166 = and i64 %165, -5277781511025328401
  %167 = or i64 5277781511025328400, %165
  %168 = sub i64 %167, 5277781511025328400
  %169 = sext i32 %6 to i64
  %170 = and i64 %169, 6021616599687268714
  %171 = xor i64 %169, -1
  %172 = or i64 -6021616599687268715, %171
  %173 = xor i64 %172, -1
  %174 = and i64 %173, -1
  %175 = xor i64 %170, %164
  %176 = xor i64 %175, %160
  %177 = xor i64 %176, %168
  %178 = xor i64 %177, %174
  %179 = xor i64 %178, 6569746009127923153
  %180 = xor i64 %179, %166
  %181 = sext i32 %6 to i64
  %182 = or i64 %181, -741514278052829859
  %183 = xor i64 %181, -1
  %184 = and i64 %183, -8627619431378970319
  %185 = and i64 %181, 8627619431378970318
  %186 = or i64 %184, %185
  %187 = xor i64 9075058259670465644, %186
  %188 = xor i64 %181, -1
  %189 = or i64 741514278052829858, %188
  %190 = xor i64 %189, -1
  %191 = and i64 %190, -1
  %192 = or i64 %187, %191
  %193 = sext i32 %5 to i64
  %194 = and i64 %193, -1566492051272377930
  %195 = xor i64 %193, -1
  %196 = xor i64 -1566492051272377930, %195
  %197 = and i64 %196, -1566492051272377930
  %198 = sext i32 %5 to i64
  %199 = and i64 %198, 4544958043597898682
  %200 = xor i64 %198, -1
  %201 = xor i64 4544958043597898682, %200
  %202 = and i64 %201, 4544958043597898682
  %203 = xor i64 3590487963873482338, %192
  %204 = xor i64 %203, %194
  %205 = xor i64 %204, %197
  %206 = xor i64 %205, %199
  %207 = xor i64 %206, %182
  %208 = xor i64 %207, %202
  %209 = mul i64 %180, %208
  %210 = trunc i64 %209 to i32
  %211 = sdiv i32 %6, %210
  %212 = sitofp i32 %211 to float
  %213 = sext i32 %2 to i64
  %214 = add i64 %213, 7668363996686169587
  %215 = sub i64 0, %213
  %216 = add i64 -7668363996686169587, %215
  %217 = sub i64 0, %216
  %218 = sext i32 %2 to i64
  %219 = and i64 %218, 1045734202113520017
  %220 = or i64 -1045734202113520018, %218
  %221 = sub i64 %220, -1045734202113520018
  %222 = sext i32 %5 to i64
  %223 = and i64 %222, -9205456825127583431
  %224 = xor i64 %222, -1
  %225 = xor i64 -9205456825127583431, %224
  %226 = and i64 %225, -9205456825127583431
  %227 = xor i64 %223, %217
  %228 = xor i64 %227, %219
  %229 = xor i64 %228, %214
  %230 = xor i64 %229, %221
  %231 = xor i64 %230, %226
  %232 = xor i64 %231, -4100162579066960611
  %233 = sext i32 %6 to i64
  %234 = add i64 %233, -6089519006813997395
  %235 = xor i64 -6089519006813997395, %233
  %236 = and i64 -6089519006813997395, %233
  %237 = mul i64 2, %236
  %238 = add i64 %235, %237
  %239 = sext i32 %6 to i64
  %240 = and i64 %239, -3481453952283265824
  %241 = or i64 3481453952283265823, %239
  %242 = sub i64 %241, 3481453952283265823
  %243 = xor i64 1777375923445910122, %234
  %244 = xor i64 %243, %242
  %245 = xor i64 %244, %238
  %246 = xor i64 %245, %240
  %247 = mul i64 %232, %246
  %248 = trunc i64 %247 to i32
  %249 = sdiv i32 %5, %248
  %250 = sext i32 %2 to i64
  %251 = and i64 %250, 5852768296858940821
  %252 = or i64 -5852768296858940822, %250
  %253 = sub i64 %252, -5852768296858940822
  %254 = sext i32 %6 to i64
  %255 = add i64 %254, 1666962349643112854
  %256 = sub i64 0, %254
  %257 = sub i64 1666962349643112854, %256
  %258 = xor i64 %253, %257
  %259 = xor i64 %258, 3108887837123954531
  %260 = xor i64 %259, %251
  %261 = xor i64 %260, %255
  %262 = sext i32 %6 to i64
  %263 = or i64 %262, 8468418753370610359
  %264 = and i64 8468418753370610359, %262
  %265 = xor i64 8468418753370610359, %262
  %266 = or i64 %264, %265
  %267 = sext i32 %2 to i64
  %268 = and i64 %267, 4671531102936321895
  %269 = xor i64 %267, -1
  %270 = xor i64 4671531102936321895, %269
  %271 = and i64 %270, 4671531102936321895
  %272 = xor i64 %263, 6457920594381730379
  %273 = xor i64 %272, %271
  %274 = xor i64 %273, %266
  %275 = xor i64 %274, %268
  %276 = mul i64 %261, %275
  %277 = trunc i64 %276 to i32
  %278 = add nsw i32 %249, %277
  %279 = sitofp i32 %278 to float
  %280 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  %281 = call fastcc float @_ZL3sinf(float %0) #9
  %282 = call fastcc float @_ZL3cosf(float %0) #9
  %283 = call fastcc float @_ZL3cosf(float 5.000000e-01) #9
  %284 = call fastcc float @_ZL3cosf(float %1) #9
  %285 = call fastcc float @_ZL3sinf(float %1) #9
  br label %287

286:                                              ; preds = %586
  ret void

287:                                              ; preds = %586, %7
  %288 = phi double [ 0.000000e+00, %7 ], [ %589, %586 ]
  %289 = phi float [ 0.000000e+00, %7 ], [ %588, %586 ]
  %290 = call fastcc float @_ZL3cosf(float %289) #9
  %291 = call fastcc float @_ZL3sinf(float %289) #9
  %292 = fadd float %290, %158
  %293 = fmul float %280, %292
  %294 = fmul float %293, %282
  %295 = fmul float %281, %291
  %296 = fsub float %294, %295
  %297 = fmul float %281, %293
  %298 = fmul float %291, %282
  %299 = fadd float %297, %298
  %300 = fadd float %299, 5.000000e+00
  %301 = fdiv float 1.000000e+00, %300
  %302 = fmul float %292, %283
  %303 = fmul float %301, 1.500000e+01
  %304 = fmul float %302, %285
  %305 = fmul float %296, %284
  %306 = fsub float %304, %305
  %307 = fmul float %303, %306
  %308 = fadd float %307, %279
  %309 = fptosi float %308 to i32
  %310 = fmul float %280, %290
  %311 = fmul float %310, %282
  %312 = fsub float %295, %311
  %313 = fmul float %312, %284
  %314 = fmul float %310, %281
  %315 = fsub float %313, %314
  %316 = fsub float %315, %298
  %317 = fmul float %290, %283
  %318 = fmul float %317, %285
  %319 = fsub float %316, %318
  %320 = fmul float %319, 8.000000e+00
  %321 = fmul float %301, 3.000000e+01
  %322 = fmul float %302, %284
  %323 = fmul float %296, %285
  %324 = fadd float %322, %323
  %325 = fmul float %321, %324
  %326 = fadd float %325, %212
  %327 = fptosi float %326 to i32
  %328 = fptosi float %320 to i32
  %329 = icmp slt i32 %309, %5
  %330 = sext i32 %278 to i64
  %331 = and i64 %330, 5690383501660851961
  %332 = or i64 -5690383501660851962, %330
  %333 = sub i64 %332, -5690383501660851962
  %334 = sext i32 %42 to i64
  %335 = or i64 %334, 4996166776314234082
  %336 = xor i64 %334, -1
  %337 = and i64 4996166776314234082, %336
  %338 = add i64 %337, %334
  %339 = xor i64 3014001629968182457, %335
  %340 = xor i64 %339, %331
  %341 = xor i64 %340, %338
  %342 = xor i64 %341, %333
  %343 = sext i32 %42 to i64
  %344 = add i64 %343, -5157714883126769114
  %345 = xor i64 -5157714883126769114, %343
  %346 = and i64 -5157714883126769114, %343
  %347 = mul i64 2, %346
  %348 = add i64 %345, %347
  %349 = sext i32 %5 to i64
  %350 = and i64 %349, 8494122541186262462
  %351 = xor i64 %349, -1
  %352 = xor i64 8494122541186262462, %351
  %353 = and i64 %352, 8494122541186262462
  %354 = sext i32 %2 to i64
  %355 = add i64 %354, -745554029788005788
  %356 = sub i64 0, %354
  %357 = sub i64 -745554029788005788, %356
  %358 = xor i64 %353, %344
  %359 = xor i64 %358, %348
  %360 = xor i64 %359, %357
  %361 = xor i64 %360, %355
  %362 = xor i64 %361, %350
  %363 = xor i64 %362, 0
  %364 = mul i64 %342, %363
  %365 = trunc i64 %364 to i32
  %366 = icmp sgt i32 %309, %365
  %367 = and i1 %329, %366
  %368 = sext i32 %278 to i64
  %369 = or i64 %368, 414976329322330179
  %370 = xor i64 %368, -1
  %371 = and i64 414976329322330179, %370
  %372 = add i64 %371, %368
  %373 = sext i32 %6 to i64
  %374 = and i64 %373, -8986559697159680502
  %375 = xor i64 %373, -1
  %376 = or i64 8986559697159680501, %375
  %377 = xor i64 %376, -1
  %378 = and i64 %377, -1
  %379 = xor i64 %369, %372
  %380 = xor i64 %379, 1887360066042500377
  %381 = xor i64 %380, %374
  %382 = xor i64 %381, %378
  %383 = sext i32 %5 to i64
  %384 = add i64 %383, -1691085327662748426
  %385 = xor i64 -1691085327662748426, %383
  %386 = and i64 -1691085327662748426, %383
  %387 = mul i64 2, %386
  %388 = add i64 %385, %387
  %389 = and i64 %43, 7459320700992539024
  %390 = xor i64 %43, -1
  %391 = or i64 -7459320700992539025, %390
  %392 = xor i64 %391, -1
  %393 = and i64 %392, -1
  %394 = sext i32 %249 to i64
  %395 = and i64 %394, -4920121170801917885
  %396 = xor i64 %394, -1
  %397 = xor i64 -4920121170801917885, %396
  %398 = and i64 %397, -4920121170801917885
  %399 = xor i64 %393, 0
  %400 = xor i64 %399, %384
  %401 = xor i64 %400, %389
  %402 = xor i64 %401, %398
  %403 = xor i64 %402, %395
  %404 = xor i64 %403, %388
  %405 = mul i64 %382, %404
  %406 = trunc i64 %405 to i32
  %407 = icmp sgt i32 %327, %406
  %408 = sext i32 %249 to i64
  %409 = or i64 %408, 2232295203380789073
  %410 = and i64 2232295203380789073, %408
  %411 = xor i64 2232295203380789073, %408
  %412 = or i64 %410, %411
  %413 = sext i32 %42 to i64
  %414 = or i64 %413, 2341668747590434199
  %415 = and i64 2341668747590434199, %413
  %416 = xor i64 2341668747590434199, %413
  %417 = or i64 %415, %416
  %418 = sext i32 %278 to i64
  %419 = add i64 %418, 2033594968045215499
  %420 = sub i64 0, %418
  %421 = add i64 -2033594968045215499, %420
  %422 = sub i64 0, %421
  %423 = xor i64 %419, 7788918162757221329
  %424 = xor i64 %423, %409
  %425 = xor i64 %424, %412
  %426 = xor i64 %425, %417
  %427 = xor i64 %426, %422
  %428 = xor i64 %427, %414
  %429 = and i64 %43, -6886723060511207850
  %430 = or i64 6886723060511207849, %43
  %431 = sub i64 %430, 6886723060511207849
  %432 = sext i32 %249 to i64
  %433 = and i64 %432, 7327792221638973052
  %434 = or i64 -7327792221638973053, %432
  %435 = sub i64 %434, -7327792221638973053
  %436 = xor i64 0, %431
  %437 = xor i64 %436, %429
  %438 = xor i64 %437, %435
  %439 = xor i64 %438, %433
  %440 = mul i64 %428, %439
  %441 = trunc i64 %440 to i1
  %442 = select i1 %367, i1 %407, i1 %441
  %443 = icmp slt i32 %327, %6
  %444 = sext i32 %5 to i64
  %445 = and i64 %444, 2299799220250810910
  %446 = or i64 -2299799220250810911, %444
  %447 = sub i64 %446, -2299799220250810911
  %448 = sext i32 %278 to i64
  %449 = add i64 %448, -964312875389630676
  %450 = xor i64 -964312875389630676, %448
  %451 = and i64 -964312875389630676, %448
  %452 = mul i64 2, %451
  %453 = add i64 %450, %452
  %454 = xor i64 %453, %445
  %455 = xor i64 %454, -4523350564842794321
  %456 = xor i64 %455, %449
  %457 = xor i64 %456, %447
  %458 = or i64 %124, 8951923987542045740
  %459 = xor i64 %124, -1
  %460 = and i64 %459, 5675667811032314191
  %461 = and i64 %124, -5675667811032314192
  %462 = or i64 %460, %461
  %463 = xor i64 3674825843379455331, %462
  %464 = xor i64 %124, -1
  %465 = or i64 -8951923987542045741, %464
  %466 = xor i64 %465, -1
  %467 = and i64 %466, -1
  %468 = or i64 %463, %467
  %469 = sext i32 %278 to i64
  %470 = or i64 %469, 1113695329778950236
  %471 = xor i64 %469, -1
  %472 = and i64 %471, -1673150956816325849
  %473 = and i64 %469, 1673150956816325848
  %474 = or i64 %472, %473
  %475 = xor i64 -1750948001806302341, %474
  %476 = xor i64 %469, -1
  %477 = or i64 -1113695329778950237, %476
  %478 = xor i64 %477, -1
  %479 = and i64 %478, -1
  %480 = or i64 %475, %479
  %481 = xor i64 %480, %458
  %482 = xor i64 %481, %470
  %483 = xor i64 %482, %468
  %484 = xor i64 %483, 0
  %485 = mul i64 %457, %484
  %486 = trunc i64 %485 to i1
  %487 = select i1 %442, i1 %443, i1 %486
  br i1 %487, label %488, label %586

488:                                              ; preds = %287
  %489 = mul nsw i32 %309, %6
  %490 = add nsw i32 %489, %327
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds float, float* %3, i64 %491
  %493 = load float, float* %492, align 4, !tbaa !13
  %494 = fcmp ogt float %301, %493
  br i1 %494, label %495, label %586

495:                                              ; preds = %488
  store float %301, float* %492, align 4, !tbaa !13
  %496 = sext i32 %490 to i64
  %497 = or i64 %496, -4716687212278238000
  %498 = xor i64 %496, -1
  %499 = and i64 -4716687212278238000, %498
  %500 = add i64 %499, %496
  %501 = add i64 %491, 7596484892909550653
  %502 = and i64 7596484892909550653, %491
  %503 = or i64 7596484892909550653, %491
  %504 = add i64 %502, %503
  %505 = or i64 %43, 6620641151695260173
  %506 = and i64 6620641151695260173, %43
  %507 = xor i64 6620641151695260173, %43
  %508 = or i64 %506, %507
  %509 = xor i64 -8251081427066730811, %504
  %510 = xor i64 %509, %501
  %511 = xor i64 %510, %500
  %512 = xor i64 %511, %497
  %513 = xor i64 %512, %508
  %514 = xor i64 %513, %505
  %515 = sext i32 %211 to i64
  %516 = or i64 %515, -3349028526891149756
  %517 = xor i64 %515, -1
  %518 = and i64 %517, 7518106910432006811
  %519 = and i64 %515, -7518106910432006812
  %520 = or i64 %518, %519
  %521 = xor i64 -5057416850452429601, %520
  %522 = xor i64 %515, -1
  %523 = or i64 3349028526891149755, %522
  %524 = xor i64 %523, -1
  %525 = and i64 %524, -1
  %526 = or i64 %521, %525
  %527 = sext i32 %249 to i64
  %528 = or i64 %527, -6352246081360160602
  %529 = xor i64 %527, -1
  %530 = and i64 %529, -1244496300564439827
  %531 = and i64 %527, 1244496300564439826
  %532 = or i64 %530, %531
  %533 = xor i64 5288036222780343371, %532
  %534 = xor i64 %527, -1
  %535 = or i64 6352246081360160601, %534
  %536 = xor i64 %535, -1
  %537 = and i64 %536, -1
  %538 = or i64 %533, %537
  %539 = xor i64 %516, %528
  %540 = xor i64 %539, %526
  %541 = xor i64 %540, %538
  %542 = xor i64 %541, 0
  %543 = mul i64 %514, %542
  %544 = trunc i64 %543 to i32
  %545 = icmp sgt i32 %328, %544
  %546 = sext i32 %2 to i64
  %547 = or i64 %546, 6651379724113418005
  %548 = and i64 6651379724113418005, %546
  %549 = xor i64 6651379724113418005, %546
  %550 = or i64 %548, %549
  %551 = sext i32 %490 to i64
  %552 = and i64 %551, -2544201100025285503
  %553 = xor i64 %551, -1
  %554 = xor i64 -2544201100025285503, %553
  %555 = and i64 %554, -2544201100025285503
  %556 = xor i64 %547, 7315990965211112123
  %557 = xor i64 %556, %552
  %558 = xor i64 %557, %555
  %559 = xor i64 %558, %550
  %560 = or i64 %43, -7268181128733095977
  %561 = xor i64 %43, -1
  %562 = and i64 -7268181128733095977, %561
  %563 = add i64 %562, %43
  %564 = sext i32 %249 to i64
  %565 = and i64 %564, -6763820974385270016
  %566 = or i64 6763820974385270015, %564
  %567 = sub i64 %566, 6763820974385270015
  %568 = sext i32 %6 to i64
  %569 = or i64 %568, 5143821405085545814
  %570 = xor i64 %568, -1
  %571 = and i64 5143821405085545814, %570
  %572 = add i64 %571, %568
  %573 = xor i64 %567, %569
  %574 = xor i64 %573, %572
  %575 = xor i64 %574, %560
  %576 = xor i64 %575, %563
  %577 = xor i64 %576, %565
  %578 = xor i64 %577, 0
  %579 = mul i64 %559, %578
  %580 = trunc i64 %579 to i32
  %581 = select i1 %545, i32 %328, i32 %580
  %582 = zext i32 %581 to i64
  %583 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %582
  %584 = load i8, i8* %583, align 1, !tbaa !10
  %585 = getelementptr inbounds i8, i8* %4, i64 %491
  store i8 %584, i8* %585, align 1, !tbaa !10
  br label %586

586:                                              ; preds = %495, %488, %287
  %587 = fadd double %288, 7.000000e-02
  %588 = fptrunc double %587 to float
  %589 = fpext float %588 to double
  %590 = fcmp olt double %589, 6.280000e+00
  br i1 %590, label %287, label %286, !llvm.loop !18
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3sinf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3cosf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: mustprogress nofree norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  %3 = bitcast float* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store float 0.000000e+00, float* %1, align 4, !tbaa !13
  %4 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store float 0.000000e+00, float* %2, align 4, !tbaa !13
  %5 = call i8* @llvm.stacksave()
  %6 = alloca [1760 x float], align 4
  %7 = alloca [1760 x i8], align 1
  %8 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 0
  %9 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 0
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %11, %0
  %12 = phi i32 [ 5, %0 ], [ %244, %11 ]
  %13 = load float, float* %1, align 4, !tbaa !13
  %14 = load float, float* %2, align 4, !tbaa !13
  %15 = sext i32 %10 to i64
  %16 = or i64 %15, -1784996033397875809
  %17 = and i64 -1784996033397875809, %15
  %18 = xor i64 -1784996033397875809, %15
  %19 = or i64 %17, %18
  %20 = sext i32 %10 to i64
  %21 = or i64 %20, -7888956237218458257
  %22 = xor i64 %20, -1
  %23 = and i64 -7888956237218458257, %22
  %24 = add i64 %23, %20
  %25 = sext i32 %10 to i64
  %26 = and i64 %25, 2818172089319538634
  %27 = xor i64 %25, -1
  %28 = xor i64 2818172089319538634, %27
  %29 = and i64 %28, 2818172089319538634
  %30 = xor i64 %21, %26
  %31 = xor i64 %30, %19
  %32 = xor i64 %31, %16
  %33 = xor i64 %32, -913219016771642899
  %34 = xor i64 %33, %24
  %35 = xor i64 %34, %29
  %36 = sext i32 %10 to i64
  %37 = add i64 %36, -8339882873055949262
  %38 = and i64 -8339882873055949262, %36
  %39 = or i64 -8339882873055949262, %36
  %40 = add i64 %38, %39
  %41 = sext i32 %10 to i64
  %42 = add i64 %41, -2001667856380922710
  %43 = and i64 -2001667856380922710, %41
  %44 = or i64 -2001667856380922710, %41
  %45 = add i64 %43, %44
  %46 = sext i32 %10 to i64
  %47 = add i64 %46, -620982381259702901
  %48 = sub i64 0, %46
  %49 = add i64 620982381259702901, %48
  %50 = sub i64 0, %49
  %51 = xor i64 %47, 4915153887581029984
  %52 = xor i64 %51, %50
  %53 = xor i64 %52, %37
  %54 = xor i64 %53, %40
  %55 = xor i64 %54, %42
  %56 = xor i64 %55, %45
  %57 = mul i64 %35, %56
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %10 to i64
  %60 = add i64 %59, 3895088256273579948
  %61 = and i64 3895088256273579948, %59
  %62 = or i64 3895088256273579948, %59
  %63 = add i64 %61, %62
  %64 = sext i32 %10 to i64
  %65 = add i64 %64, 3607858254010447165
  %66 = sub i64 0, %64
  %67 = sub i64 3607858254010447165, %66
  %68 = sext i32 %10 to i64
  %69 = or i64 %68, 4642893150754617205
  %70 = and i64 4642893150754617205, %68
  %71 = xor i64 4642893150754617205, %68
  %72 = or i64 %70, %71
  %73 = xor i64 %65, %69
  %74 = xor i64 %73, %72
  %75 = xor i64 %74, %60
  %76 = xor i64 %75, %67
  %77 = xor i64 %76, %63
  %78 = xor i64 %77, 1206328757036342723
  %79 = sext i32 %10 to i64
  %80 = and i64 %79, 230073593707926309
  %81 = xor i64 %79, -1
  %82 = xor i64 230073593707926309, %81
  %83 = and i64 %82, 230073593707926309
  %84 = sext i32 %10 to i64
  %85 = or i64 %84, -6350803592133605646
  %86 = xor i64 %84, -1
  %87 = and i64 %86, 6442701668013493079
  %88 = and i64 %84, -6442701668013493080
  %89 = or i64 %87, %88
  %90 = xor i64 -93314659178197595, %89
  %91 = xor i64 %84, -1
  %92 = or i64 6350803592133605645, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = or i64 %90, %94
  %96 = sext i32 %10 to i64
  %97 = or i64 %96, 8867570687356270925
  %98 = and i64 8867570687356270925, %96
  %99 = xor i64 8867570687356270925, %96
  %100 = or i64 %98, %99
  %101 = xor i64 %80, %83
  %102 = xor i64 %101, %100
  %103 = xor i64 %102, %85
  %104 = xor i64 %103, %97
  %105 = xor i64 %104, %95
  %106 = xor i64 %105, -7238096251592208334
  %107 = mul i64 %78, %106
  %108 = trunc i64 %107 to i32
  %109 = sext i32 %10 to i64
  %110 = and i64 %109, 5581968256786355405
  %111 = xor i64 %109, -1
  %112 = or i64 -5581968256786355406, %111
  %113 = xor i64 %112, -1
  %114 = and i64 %113, -1
  %115 = sext i32 %10 to i64
  %116 = and i64 %115, -6869554948354873955
  %117 = xor i64 %115, -1
  %118 = xor i64 -6869554948354873955, %117
  %119 = and i64 %118, -6869554948354873955
  %120 = sext i32 %10 to i64
  %121 = or i64 %120, -7334624755468292229
  %122 = xor i64 %120, -1
  %123 = and i64 %122, -367618929857878858
  %124 = and i64 %120, 367618929857878857
  %125 = or i64 %123, %124
  %126 = xor i64 6977158991144684493, %125
  %127 = xor i64 %120, -1
  %128 = or i64 7334624755468292228, %127
  %129 = xor i64 %128, -1
  %130 = and i64 %129, -1
  %131 = or i64 %126, %130
  %132 = xor i64 %131, %116
  %133 = xor i64 %132, -6204070537941969749
  %134 = xor i64 %133, %110
  %135 = xor i64 %134, %114
  %136 = xor i64 %135, %119
  %137 = xor i64 %136, %121
  %138 = sext i32 %10 to i64
  %139 = add i64 %138, -6054112627271257745
  %140 = sub i64 0, %138
  %141 = add i64 6054112627271257745, %140
  %142 = sub i64 0, %141
  %143 = sext i32 %10 to i64
  %144 = and i64 %143, 5287806253285518527
  %145 = xor i64 %143, -1
  %146 = or i64 -5287806253285518528, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = sext i32 %10 to i64
  %150 = or i64 %149, 7413637736840324611
  %151 = xor i64 %149, -1
  %152 = and i64 %151, -1784590022796420160
  %153 = and i64 %149, 1784590022796420159
  %154 = or i64 %152, %153
  %155 = xor i64 -9090141007792620093, %154
  %156 = xor i64 %149, -1
  %157 = or i64 -7413637736840324612, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = or i64 %155, %159
  %161 = xor i64 %150, 8463568616290115824
  %162 = xor i64 %161, %160
  %163 = xor i64 %162, %139
  %164 = xor i64 %163, %142
  %165 = xor i64 %164, %148
  %166 = xor i64 %165, %144
  %167 = mul i64 %137, %166
  %168 = trunc i64 %167 to i32
  call void @_Z6renderffiPfPcii(float %13, float %14, i32 %58, float* nonnull %9, i8* nonnull %8, i32 %108, i32 %168)
  %169 = sext i32 %10 to i64
  %170 = and i64 %169, -5398371389195443058
  %171 = xor i64 %169, -1
  %172 = or i64 5398371389195443057, %171
  %173 = xor i64 %172, -1
  %174 = and i64 %173, -1
  %175 = sext i32 %10 to i64
  %176 = or i64 %175, 7447232846999727950
  %177 = xor i64 %175, -1
  %178 = and i64 7447232846999727950, %177
  %179 = add i64 %178, %175
  %180 = sext i32 %10 to i64
  %181 = and i64 %180, -4496040759745050806
  %182 = xor i64 %180, -1
  %183 = or i64 4496040759745050805, %182
  %184 = xor i64 %183, -1
  %185 = and i64 %184, -1
  %186 = xor i64 %185, %170
  %187 = xor i64 %186, %176
  %188 = xor i64 %187, %174
  %189 = xor i64 %188, %179
  %190 = xor i64 %189, %181
  %191 = xor i64 %190, 7745471741031428985
  %192 = sext i32 %10 to i64
  %193 = and i64 %192, 6810537697258181762
  %194 = xor i64 %192, -1
  %195 = xor i64 6810537697258181762, %194
  %196 = and i64 %195, 6810537697258181762
  %197 = sext i32 %10 to i64
  %198 = and i64 %197, -9031389859658165107
  %199 = or i64 9031389859658165106, %197
  %200 = sub i64 %199, 9031389859658165106
  %201 = sext i32 %10 to i64
  %202 = add i64 %201, 6380240415439459539
  %203 = sub i64 0, %201
  %204 = sub i64 6380240415439459539, %203
  %205 = xor i64 -3793468776763636023, %198
  %206 = xor i64 %205, %202
  %207 = xor i64 %206, %196
  %208 = xor i64 %207, %193
  %209 = xor i64 %208, %200
  %210 = xor i64 %209, %204
  %211 = mul i64 %191, %210
  %212 = trunc i64 %211 to i32
  call void @_Z7displayPKcRfS1_i(i8* nonnull %8, float* nonnull align 4 dereferenceable(4) %1, float* nonnull align 4 dereferenceable(4) %2, i32 %212)
  %213 = sext i32 %10 to i64
  %214 = and i64 %213, 7029024196398008135
  %215 = xor i64 %213, -1
  %216 = or i64 -7029024196398008136, %215
  %217 = xor i64 %216, -1
  %218 = and i64 %217, -1
  %219 = sext i32 %10 to i64
  %220 = add i64 %219, -5973202313728654861
  %221 = and i64 -5973202313728654861, %219
  %222 = or i64 -5973202313728654861, %219
  %223 = add i64 %221, %222
  %224 = xor i64 %218, -6713319775746957019
  %225 = xor i64 %224, %223
  %226 = xor i64 %225, %220
  %227 = xor i64 %226, %214
  %228 = sext i32 %10 to i64
  %229 = and i64 %228, -5322188622827235051
  %230 = or i64 5322188622827235050, %228
  %231 = sub i64 %230, 5322188622827235050
  %232 = sext i32 %10 to i64
  %233 = and i64 %232, 7224875816775900513
  %234 = xor i64 %232, -1
  %235 = or i64 -7224875816775900514, %234
  %236 = xor i64 %235, -1
  %237 = and i64 %236, -1
  %238 = xor i64 %229, %231
  %239 = xor i64 %238, %233
  %240 = xor i64 %239, 1334632901901275821
  %241 = xor i64 %240, %237
  %242 = mul i64 %227, %241
  %243 = trunc i64 %242 to i32
  %244 = add nuw nsw i32 %12, %243
  %245 = sext i32 %10 to i64
  %246 = and i64 %245, -3590217861362784212
  %247 = or i64 3590217861362784211, %245
  %248 = sub i64 %247, 3590217861362784211
  %249 = sext i32 %10 to i64
  %250 = add i64 %249, 1317813837318536648
  %251 = and i64 1317813837318536648, %249
  %252 = or i64 1317813837318536648, %249
  %253 = add i64 %251, %252
  %254 = xor i64 %246, %250
  %255 = xor i64 %254, -7689082877608845673
  %256 = xor i64 %255, %253
  %257 = xor i64 %256, %248
  %258 = sext i32 %10 to i64
  %259 = and i64 %258, 8384100041182881803
  %260 = xor i64 %258, -1
  %261 = or i64 -8384100041182881804, %260
  %262 = xor i64 %261, -1
  %263 = and i64 %262, -1
  %264 = sext i32 %10 to i64
  %265 = and i64 %264, -8444214370301939855
  %266 = xor i64 %264, -1
  %267 = or i64 8444214370301939854, %266
  %268 = xor i64 %267, -1
  %269 = and i64 %268, -1
  %270 = xor i64 %265, %269
  %271 = xor i64 %270, %259
  %272 = xor i64 %271, %263
  %273 = xor i64 %272, -7123324797862245498
  %274 = mul i64 %257, %273
  %275 = trunc i64 %274 to i32
  %276 = icmp eq i32 %244, %275
  br i1 %276, label %278, label %11, !llvm.loop !19

277:                                              ; preds = %278
  call void @llvm.stackrestore(i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i32 %289

278:                                              ; preds = %278, %11
  %279 = phi i64 [ %327, %278 ], [ 0, %11 ]
  %280 = phi i32 [ %289, %278 ], [ 0, %11 ]
  %281 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 %279
  %282 = load i8, i8* %281, align 1, !tbaa !10
  %283 = sext i8 %282 to i32
  %284 = add nsw i32 %280, %283
  %285 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 %279
  %286 = load float, float* %285, align 4, !tbaa !13
  %287 = sitofp i32 %284 to float
  %288 = fadd float %286, %287
  %289 = fptosi float %288 to i32
  %290 = sext i32 %10 to i64
  %291 = or i64 %290, -601012480153927982
  %292 = and i64 -601012480153927982, %290
  %293 = xor i64 -601012480153927982, %290
  %294 = or i64 %292, %293
  %295 = sext i32 %12 to i64
  %296 = or i64 %295, -8158978600691208673
  %297 = and i64 -8158978600691208673, %295
  %298 = xor i64 -8158978600691208673, %295
  %299 = or i64 %297, %298
  %300 = sext i32 %244 to i64
  %301 = and i64 %300, 6213169543032931476
  %302 = xor i64 %300, -1
  %303 = or i64 -6213169543032931477, %302
  %304 = xor i64 %303, -1
  %305 = and i64 %304, -1
  %306 = xor i64 %299, %294
  %307 = xor i64 %306, %291
  %308 = xor i64 %307, %301
  %309 = xor i64 %308, %305
  %310 = xor i64 %309, %296
  %311 = xor i64 %310, 4025633606204923805
  %312 = sext i32 %244 to i64
  %313 = or i64 %312, 8201559676806498856
  %314 = xor i64 %312, -1
  %315 = and i64 8201559676806498856, %314
  %316 = add i64 %315, %312
  %317 = sext i32 %10 to i64
  %318 = or i64 %317, -6157916827076154106
  %319 = xor i64 %317, -1
  %320 = and i64 -6157916827076154106, %319
  %321 = add i64 %320, %317
  %322 = xor i64 %316, %318
  %323 = xor i64 %322, %321
  %324 = xor i64 %323, %313
  %325 = xor i64 %324, 1432601031563173557
  %326 = mul i64 %311, %325
  %327 = add nuw nsw i64 %279, %326
  %328 = sext i32 %244 to i64
  %329 = add i64 %328, -5524091730669857530
  %330 = sub i64 0, %328
  %331 = sub i64 -5524091730669857530, %330
  %332 = sext i32 %10 to i64
  %333 = or i64 %332, 5706210677461312398
  %334 = and i64 5706210677461312398, %332
  %335 = xor i64 5706210677461312398, %332
  %336 = or i64 %334, %335
  %337 = xor i64 %336, -7881970711282587153
  %338 = xor i64 %337, %333
  %339 = xor i64 %338, %331
  %340 = xor i64 %339, %329
  %341 = sext i32 %10 to i64
  %342 = add i64 %341, -3460634180684472809
  %343 = xor i64 -3460634180684472809, %341
  %344 = and i64 -3460634180684472809, %341
  %345 = mul i64 2, %344
  %346 = add i64 %343, %345
  %347 = sext i32 %12 to i64
  %348 = and i64 %347, 8926394095131484294
  %349 = or i64 -8926394095131484295, %347
  %350 = sub i64 %349, -8926394095131484295
  %351 = sext i32 %244 to i64
  %352 = and i64 %351, -3103799507346732435
  %353 = xor i64 %351, -1
  %354 = or i64 3103799507346732434, %353
  %355 = xor i64 %354, -1
  %356 = and i64 %355, -1
  %357 = xor i64 %350, %342
  %358 = xor i64 %357, %356
  %359 = xor i64 %358, %346
  %360 = xor i64 %359, -1427127344019618016
  %361 = xor i64 %360, %352
  %362 = xor i64 %361, %348
  %363 = mul i64 %340, %362
  %364 = icmp eq i64 %327, %363
  br i1 %364, label %277, label %278, !llvm.loop !20
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #8

attributes #0 = { mustprogress nofree nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #5 = { inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { mustprogress nofree norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !11, i64 0}
!15 = distinct !{!15, !16, !17}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !16, !17}
!19 = distinct !{!19, !16, !17}
!20 = distinct !{!20, !16, !17}
