; ModuleID = 'output/const-obfuscation/ex8/ex8.ll'
source_filename = "input/const-obfuscation/ex8/ex8.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [4 x i8] c"\1B[H\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c".,-~:;=!*#$@\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1

; Function Attrs: mustprogress nofree nounwind ssp uwtable
define void @_Z7displayPKcRfS1_i(i8* nocapture readonly %0, float* nocapture nonnull align 4 dereferenceable(4) %1, float* nocapture nonnull align 4 dereferenceable(4) %2, i32 %3) local_unnamed_addr #0 {
  %5 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %7

6:                                                ; preds = %106
  ret void

7:                                                ; preds = %106, %4
  %8 = phi i64 [ 0, %4 ], [ %156, %106 ]
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %3 to i64
  %11 = and i64 %10, -3404737650337966064
  %12 = xor i64 %10, -1
  %13 = xor i64 -3404737650337966064, %12
  %14 = and i64 %13, -3404737650337966064
  %15 = sext i32 %3 to i64
  %16 = add i64 %15, -2987034092302319533
  %17 = xor i64 -2987034092302319533, %15
  %18 = and i64 -2987034092302319533, %15
  %19 = mul i64 2, %18
  %20 = add i64 %17, %19
  %21 = xor i64 %16, %20
  %22 = xor i64 %21, -2152445441562606413
  %23 = xor i64 %22, %14
  %24 = xor i64 %23, %11
  %25 = sext i32 %5 to i64
  %26 = and i64 %25, 4100712951535452860
  %27 = xor i64 %25, -1
  %28 = xor i64 4100712951535452860, %27
  %29 = and i64 %28, 4100712951535452860
  %30 = sext i32 %3 to i64
  %31 = and i64 %30, 5824115855660131975
  %32 = xor i64 %30, -1
  %33 = xor i64 5824115855660131975, %32
  %34 = and i64 %33, 5824115855660131975
  %35 = sext i32 %3 to i64
  %36 = add i64 %35, 5541241495054273168
  %37 = sub i64 0, %35
  %38 = add i64 -5541241495054273168, %37
  %39 = sub i64 0, %38
  %40 = xor i64 %31, %29
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, %26
  %43 = xor i64 %42, %39
  %44 = xor i64 %43, %34
  %45 = xor i64 %44, 4523151357129999984
  %46 = mul i64 %24, %45
  %47 = trunc i64 %46 to i32
  %48 = urem i32 %9, %47
  %49 = sext i32 %3 to i64
  %50 = or i64 %49, -6584659916016496007
  %51 = xor i64 %49, -1
  %52 = and i64 %51, 7542921127164063078
  %53 = and i64 %49, -7542921127164063079
  %54 = or i64 %52, %53
  %55 = xor i64 -3732568762382909665, %54
  %56 = xor i64 %49, -1
  %57 = or i64 6584659916016496006, %56
  %58 = xor i64 %57, -1
  %59 = and i64 %58, -1
  %60 = or i64 %55, %59
  %61 = sext i32 %5 to i64
  %62 = or i64 %61, 8908730978349184995
  %63 = xor i64 %61, -1
  %64 = and i64 %63, 4358490893548550420
  %65 = and i64 %61, -4358490893548550421
  %66 = or i64 %64, %65
  %67 = xor i64 5178668979672649463, %66
  %68 = xor i64 %61, -1
  %69 = or i64 -8908730978349184996, %68
  %70 = xor i64 %69, -1
  %71 = and i64 %70, -1
  %72 = or i64 %67, %71
  %73 = sext i32 %3 to i64
  %74 = or i64 %73, -4279104266780559687
  %75 = and i64 -4279104266780559687, %73
  %76 = xor i64 -4279104266780559687, %73
  %77 = or i64 %75, %76
  %78 = xor i64 %72, %60
  %79 = xor i64 %78, %62
  %80 = xor i64 %79, %74
  %81 = xor i64 %80, %50
  %82 = xor i64 %81, -3512492790376452011
  %83 = xor i64 %82, %77
  %84 = sext i32 %3 to i64
  %85 = or i64 %84, 520859653087659509
  %86 = xor i64 %84, -1
  %87 = and i64 520859653087659509, %86
  %88 = add i64 %87, %84
  %89 = sext i32 %5 to i64
  %90 = and i64 %89, 2656573848617737522
  %91 = xor i64 %89, -1
  %92 = or i64 -2656573848617737523, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = xor i64 %88, 0
  %96 = xor i64 %95, %94
  %97 = xor i64 %96, %90
  %98 = xor i64 %97, %85
  %99 = mul i64 %83, %98
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %48, %100
  br i1 %101, label %106, label %102

102:                                              ; preds = %7
  %103 = getelementptr inbounds i8, i8* %0, i64 %8
  %104 = load i8, i8* %103, align 1, !tbaa !10
  %105 = sext i8 %104 to i32
  br label %106

106:                                              ; preds = %102, %7
  %107 = phi i32 [ %105, %102 ], [ 10, %7 ]
  %108 = call i32 @putchar(i32 %107)
  %109 = load float, float* %1, align 4, !tbaa !13
  %110 = fpext float %109 to double
  %111 = fadd double %110, 4.000000e-05
  %112 = fptrunc double %111 to float
  store float %112, float* %1, align 4, !tbaa !13
  %113 = load float, float* %2, align 4, !tbaa !13
  %114 = fpext float %113 to double
  %115 = fadd double %114, 2.000000e-05
  %116 = fptrunc double %115 to float
  store float %116, float* %2, align 4, !tbaa !13
  %117 = sext i32 %9 to i64
  %118 = add i64 %117, -1206904719991578394
  %119 = sub i64 0, %117
  %120 = add i64 1206904719991578394, %119
  %121 = sub i64 0, %120
  %122 = sext i32 %9 to i64
  %123 = and i64 %122, -4215830000439141811
  %124 = xor i64 %122, -1
  %125 = or i64 4215830000439141810, %124
  %126 = xor i64 %125, -1
  %127 = and i64 %126, -1
  %128 = sext i32 %5 to i64
  %129 = and i64 %128, -7143867679027150709
  %130 = xor i64 %128, -1
  %131 = or i64 7143867679027150708, %130
  %132 = xor i64 %131, -1
  %133 = and i64 %132, -1
  %134 = xor i64 %121, %129
  %135 = xor i64 %134, %123
  %136 = xor i64 %135, %133
  %137 = xor i64 %136, -66998519636372777
  %138 = xor i64 %137, %127
  %139 = xor i64 %138, %118
  %140 = sext i32 %3 to i64
  %141 = and i64 %140, 828173309600617754
  %142 = xor i64 %140, -1
  %143 = xor i64 828173309600617754, %142
  %144 = and i64 %143, 828173309600617754
  %145 = sext i32 %3 to i64
  %146 = add i64 %145, 3175688321696912968
  %147 = xor i64 3175688321696912968, %145
  %148 = and i64 3175688321696912968, %145
  %149 = mul i64 2, %148
  %150 = add i64 %147, %149
  %151 = xor i64 %146, %144
  %152 = xor i64 %151, %141
  %153 = xor i64 %152, -7539877544649277209
  %154 = xor i64 %153, %150
  %155 = mul i64 %139, %154
  %156 = add nuw nsw i64 %8, %155
  %157 = sext i32 %9 to i64
  %158 = and i64 %157, 4890338341700358255
  %159 = xor i64 %157, -1
  %160 = or i64 -4890338341700358256, %159
  %161 = xor i64 %160, -1
  %162 = and i64 %161, -1
  %163 = and i64 %8, 3859875137363257350
  %164 = xor i64 %8, -1
  %165 = xor i64 3859875137363257350, %164
  %166 = and i64 %165, 3859875137363257350
  %167 = xor i64 %163, %166
  %168 = xor i64 %167, %162
  %169 = xor i64 %168, 1252967947942114253
  %170 = xor i64 %169, %158
  %171 = sext i32 %48 to i64
  %172 = or i64 %171, 5429278764356591660
  %173 = xor i64 %171, -1
  %174 = and i64 5429278764356591660, %173
  %175 = add i64 %174, %171
  %176 = sext i32 %5 to i64
  %177 = add i64 %176, 4809221512208530836
  %178 = sub i64 0, %176
  %179 = sub i64 4809221512208530836, %178
  %180 = xor i64 %175, 2358535746799203173
  %181 = xor i64 %180, %172
  %182 = xor i64 %181, %177
  %183 = xor i64 %182, %179
  %184 = mul i64 %170, %183
  %185 = icmp eq i64 %156, %184
  br i1 %185, label %6, label %7, !llvm.loop !15
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind ssp uwtable
define void @_Z6renderffiPfPcii(float %0, float %1, i32 %2, float* nocapture %3, i8* nocapture %4, i32 %5, i32 %6) local_unnamed_addr #3 {
  %8 = sext i32 %6 to i64
  %9 = add i64 %8, -241441076896763846
  %10 = and i64 -241441076896763846, %8
  %11 = or i64 -241441076896763846, %8
  %12 = add i64 %10, %11
  %13 = sext i32 %2 to i64
  %14 = and i64 %13, -1844249898670405865
  %15 = or i64 1844249898670405864, %13
  %16 = sub i64 %15, 1844249898670405864
  %17 = sext i32 %6 to i64
  %18 = and i64 %17, -3428561167225725805
  %19 = xor i64 %17, -1
  %20 = xor i64 -3428561167225725805, %19
  %21 = and i64 %20, -3428561167225725805
  %22 = xor i64 %12, %18
  %23 = xor i64 %22, 950448674007523573
  %24 = xor i64 %23, %16
  %25 = xor i64 %24, %21
  %26 = xor i64 %25, %14
  %27 = xor i64 %26, %9
  %28 = sext i32 %2 to i64
  %29 = or i64 %28, 3692444112752118183
  %30 = xor i64 %28, -1
  %31 = and i64 3692444112752118183, %30
  %32 = add i64 %31, %28
  %33 = sext i32 %2 to i64
  %34 = or i64 %33, -8370869589257087070
  %35 = and i64 -8370869589257087070, %33
  %36 = xor i64 -8370869589257087070, %33
  %37 = or i64 %35, %36
  %38 = sext i32 %2 to i64
  %39 = or i64 %38, -3052274184642917138
  %40 = xor i64 %38, -1
  %41 = and i64 %40, -2196762358274324759
  %42 = and i64 %38, 2196762358274324758
  %43 = or i64 %41, %42
  %44 = xor i64 3758162126265354759, %43
  %45 = xor i64 %38, -1
  %46 = or i64 3052274184642917137, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = or i64 %44, %48
  %50 = xor i64 1150828222033806984, %34
  %51 = xor i64 %50, %49
  %52 = xor i64 %51, %29
  %53 = xor i64 %52, %39
  %54 = xor i64 %53, %32
  %55 = xor i64 %54, %37
  %56 = mul i64 %27, %55
  %57 = trunc i64 %56 to i32
  %58 = sdiv i32 %6, %57
  %59 = sext i32 %2 to i64
  %60 = sext i32 %5 to i64
  %61 = or i64 %60, -2339766728261848737
  %62 = and i64 -2339766728261848737, %60
  %63 = xor i64 -2339766728261848737, %60
  %64 = or i64 %62, %63
  %65 = sext i32 %2 to i64
  %66 = add i64 %65, -31963706425882721
  %67 = add i64 4713276835997782438, %65
  %68 = add i64 %67, -4745240542423665159
  %69 = xor i64 %68, %66
  %70 = xor i64 %69, %64
  %71 = xor i64 %70, %61
  %72 = xor i64 %71, 6301818483775271445
  %73 = sext i32 %6 to i64
  %74 = add i64 %73, -7267008807785599985
  %75 = sub i64 0, %73
  %76 = sub i64 -7267008807785599985, %75
  %77 = sext i32 %2 to i64
  %78 = add i64 %77, -6483089798418844067
  %79 = sub i64 0, %77
  %80 = sub i64 -6483089798418844067, %79
  %81 = xor i64 -1990876481959909472, %76
  %82 = xor i64 %81, %78
  %83 = xor i64 %82, %80
  %84 = xor i64 %83, %74
  %85 = mul i64 %72, %84
  %86 = trunc i64 %85 to i8
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %86, i64 %59, i1 false)
  %87 = bitcast float* %3 to i8*
  %88 = sext i32 %2 to i64
  %89 = add i64 %88, -39632727866271444
  %90 = sub i64 0, %88
  %91 = add i64 39632727866271444, %90
  %92 = sub i64 0, %91
  %93 = sext i32 %2 to i64
  %94 = add i64 %93, 3102389596605272680
  %95 = sub i64 0, %93
  %96 = sub i64 3102389596605272680, %95
  %97 = sext i32 %2 to i64
  %98 = and i64 %97, -5972131122692037683
  %99 = xor i64 %97, -1
  %100 = xor i64 -5972131122692037683, %99
  %101 = and i64 %100, -5972131122692037683
  %102 = xor i64 %94, %92
  %103 = xor i64 %102, %89
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, %96
  %106 = xor i64 %105, %101
  %107 = xor i64 %106, 4743408793762909825
  %108 = sext i32 %6 to i64
  %109 = add i64 %108, -8882199886407326474
  %110 = sub i64 0, %108
  %111 = sub i64 -8882199886407326474, %110
  %112 = sext i32 %5 to i64
  %113 = add i64 %112, 1147314791506596240
  %114 = add i64 8571865806976613687, %112
  %115 = add i64 %114, -7424551015470017447
  %116 = xor i64 %111, %113
  %117 = xor i64 %116, %115
  %118 = xor i64 %117, %109
  %119 = xor i64 %118, -6219951711960898814
  %120 = mul i64 %107, %119
  %121 = shl nsw i64 %59, %120
  %122 = sext i32 %6 to i64
  %123 = and i64 %122, 5142828653135975003
  %124 = xor i64 %122, -1
  %125 = or i64 -5142828653135975004, %124
  %126 = xor i64 %125, -1
  %127 = and i64 %126, -1
  %128 = sext i32 %5 to i64
  %129 = or i64 %128, 6373381776562400157
  %130 = xor i64 %128, -1
  %131 = and i64 %130, -3268247749162027539
  %132 = and i64 %128, 3268247749162027538
  %133 = or i64 %131, %132
  %134 = xor i64 -8442537319960338832, %133
  %135 = xor i64 %128, -1
  %136 = or i64 -6373381776562400158, %135
  %137 = xor i64 %136, -1
  %138 = and i64 %137, -1
  %139 = or i64 %134, %138
  %140 = xor i64 -2442986815791062777, %129
  %141 = xor i64 %140, %127
  %142 = xor i64 %141, %139
  %143 = xor i64 %142, %123
  %144 = sext i32 %5 to i64
  %145 = and i64 %144, -7757448407992818216
  %146 = or i64 7757448407992818215, %144
  %147 = sub i64 %146, 7757448407992818215
  %148 = sext i32 %5 to i64
  %149 = add i64 %148, -1778891997263761982
  %150 = sub i64 0, %148
  %151 = sub i64 -1778891997263761982, %150
  %152 = xor i64 0, %145
  %153 = xor i64 %152, %149
  %154 = xor i64 %153, %151
  %155 = xor i64 %154, %147
  %156 = mul i64 %143, %155
  %157 = trunc i64 %156 to i8
  call void @llvm.memset.p0i8.i64(i8* align 4 %87, i8 %157, i64 %121, i1 false)
  %158 = sitofp i32 %58 to float
  %159 = sext i32 %6 to i64
  %160 = or i64 %159, 8688153482268219192
  %161 = xor i64 %159, -1
  %162 = and i64 %161, 1388615468195926660
  %163 = and i64 %159, -1388615468195926661
  %164 = or i64 %162, %163
  %165 = xor i64 7770925862324913596, %164
  %166 = xor i64 %159, -1
  %167 = or i64 -8688153482268219193, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = or i64 %165, %169
  %171 = sext i32 %6 to i64
  %172 = and i64 %171, -6402083910186228050
  %173 = or i64 6402083910186228049, %171
  %174 = sub i64 %173, 6402083910186228049
  %175 = sext i32 %5 to i64
  %176 = add i64 %175, -8593381926358677910
  %177 = sub i64 0, %175
  %178 = add i64 8593381926358677910, %177
  %179 = sub i64 0, %178
  %180 = xor i64 %179, %160
  %181 = xor i64 %180, %170
  %182 = xor i64 %181, -8280699421346293803
  %183 = xor i64 %182, %176
  %184 = xor i64 %183, %172
  %185 = xor i64 %184, %174
  %186 = sext i32 %6 to i64
  %187 = add i64 %186, -5777464936160237815
  %188 = add i64 687335680805570672, %186
  %189 = sub i64 %188, 6464800616965808487
  %190 = sext i32 %2 to i64
  %191 = add i64 %190, 4883961584298592786
  %192 = xor i64 4883961584298592786, %190
  %193 = and i64 4883961584298592786, %190
  %194 = mul i64 2, %193
  %195 = add i64 %192, %194
  %196 = xor i64 %191, %195
  %197 = xor i64 %196, %189
  %198 = xor i64 %197, 5318624083103896314
  %199 = xor i64 %198, %187
  %200 = mul i64 %185, %199
  %201 = trunc i64 %200 to i32
  %202 = sdiv i32 %6, %201
  %203 = sitofp i32 %202 to float
  %204 = sext i32 %6 to i64
  %205 = and i64 %204, -1689168272014800307
  %206 = or i64 1689168272014800306, %204
  %207 = sub i64 %206, 1689168272014800306
  %208 = sext i32 %6 to i64
  %209 = or i64 %208, 8263572110779896130
  %210 = xor i64 %208, -1
  %211 = and i64 8263572110779896130, %210
  %212 = add i64 %211, %208
  %213 = xor i64 %212, 4082089763430547197
  %214 = xor i64 %213, %205
  %215 = xor i64 %214, %209
  %216 = xor i64 %215, %207
  %217 = sext i32 %6 to i64
  %218 = and i64 %217, 4263777519981103335
  %219 = or i64 -4263777519981103336, %217
  %220 = sub i64 %219, -4263777519981103336
  %221 = sext i32 %6 to i64
  %222 = add i64 %221, 7568532471410905137
  %223 = sub i64 0, %221
  %224 = sub i64 7568532471410905137, %223
  %225 = xor i64 3195215811388284074, %222
  %226 = xor i64 %225, %218
  %227 = xor i64 %226, %224
  %228 = xor i64 %227, %220
  %229 = mul i64 %216, %228
  %230 = trunc i64 %229 to i32
  %231 = sdiv i32 %5, %230
  %232 = sext i32 %5 to i64
  %233 = add i64 %232, -6751240323596414105
  %234 = sub i64 0, %232
  %235 = sub i64 -6751240323596414105, %234
  %236 = sext i32 %6 to i64
  %237 = or i64 %236, -3355092698231528869
  %238 = and i64 -3355092698231528869, %236
  %239 = xor i64 -3355092698231528869, %236
  %240 = or i64 %238, %239
  %241 = xor i64 %233, 4196974892159524775
  %242 = xor i64 %241, %240
  %243 = xor i64 %242, %237
  %244 = xor i64 %243, %235
  %245 = sext i32 %5 to i64
  %246 = or i64 %245, 1254961876541067232
  %247 = and i64 1254961876541067232, %245
  %248 = xor i64 1254961876541067232, %245
  %249 = or i64 %247, %248
  %250 = sext i32 %6 to i64
  %251 = or i64 %250, 1315780885371777925
  %252 = xor i64 %250, -1
  %253 = and i64 1315780885371777925, %252
  %254 = add i64 %253, %250
  %255 = xor i64 %251, 4379836822934247447
  %256 = xor i64 %255, %249
  %257 = xor i64 %256, %254
  %258 = xor i64 %257, %246
  %259 = mul i64 %244, %258
  %260 = trunc i64 %259 to i32
  %261 = add nsw i32 %231, %260
  %262 = sitofp i32 %261 to float
  %263 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  %264 = call fastcc float @_ZL3sinf(float %0) #9
  %265 = call fastcc float @_ZL3cosf(float %0) #9
  %266 = call fastcc float @_ZL3cosf(float 5.000000e-01) #9
  %267 = call fastcc float @_ZL3cosf(float %1) #9
  %268 = call fastcc float @_ZL3sinf(float %1) #9
  br label %270

269:                                              ; preds = %575
  ret void

270:                                              ; preds = %575, %7
  %271 = phi double [ 0.000000e+00, %7 ], [ %578, %575 ]
  %272 = phi float [ 0.000000e+00, %7 ], [ %577, %575 ]
  %273 = call fastcc float @_ZL3cosf(float %272) #9
  %274 = call fastcc float @_ZL3sinf(float %272) #9
  %275 = fadd float %273, %158
  %276 = fmul float %263, %275
  %277 = fmul float %276, %265
  %278 = fmul float %264, %274
  %279 = fsub float %277, %278
  %280 = fmul float %264, %276
  %281 = fmul float %274, %265
  %282 = fadd float %280, %281
  %283 = fadd float %282, 5.000000e+00
  %284 = fdiv float 1.000000e+00, %283
  %285 = fmul float %275, %266
  %286 = fmul float %284, 1.500000e+01
  %287 = fmul float %285, %268
  %288 = fmul float %279, %267
  %289 = fsub float %287, %288
  %290 = fmul float %286, %289
  %291 = fadd float %290, %262
  %292 = fptosi float %291 to i32
  %293 = fmul float %263, %273
  %294 = fmul float %293, %265
  %295 = fsub float %278, %294
  %296 = fmul float %295, %267
  %297 = fmul float %293, %264
  %298 = fsub float %296, %297
  %299 = fsub float %298, %281
  %300 = fmul float %273, %266
  %301 = fmul float %300, %268
  %302 = fsub float %299, %301
  %303 = fmul float %302, 8.000000e+00
  %304 = fmul float %284, 3.000000e+01
  %305 = fmul float %285, %267
  %306 = fmul float %279, %268
  %307 = fadd float %305, %306
  %308 = fmul float %304, %307
  %309 = fadd float %308, %203
  %310 = fptosi float %309 to i32
  %311 = fptosi float %303 to i32
  %312 = icmp slt i32 %292, %5
  %313 = sext i32 %2 to i64
  %314 = or i64 %313, 7363622312860005934
  %315 = and i64 7363622312860005934, %313
  %316 = xor i64 7363622312860005934, %313
  %317 = or i64 %315, %316
  %318 = sext i32 %202 to i64
  %319 = and i64 %318, -2514888152584832616
  %320 = or i64 2514888152584832615, %318
  %321 = sub i64 %320, 2514888152584832615
  %322 = xor i64 %319, %317
  %323 = xor i64 %322, 7271417207974622379
  %324 = xor i64 %323, %314
  %325 = xor i64 %324, %321
  %326 = sext i32 %202 to i64
  %327 = and i64 %326, 6715218106432494763
  %328 = xor i64 %326, -1
  %329 = or i64 -6715218106432494764, %328
  %330 = xor i64 %329, -1
  %331 = and i64 %330, -1
  %332 = sext i32 %58 to i64
  %333 = and i64 %332, -2766447309764175418
  %334 = or i64 2766447309764175417, %332
  %335 = sub i64 %334, 2766447309764175417
  %336 = sext i32 %2 to i64
  %337 = or i64 %336, -3885300826785410059
  %338 = xor i64 %336, -1
  %339 = and i64 %338, 4051370208329635717
  %340 = and i64 %336, -4051370208329635718
  %341 = or i64 %339, %340
  %342 = xor i64 -995866409047554960, %341
  %343 = xor i64 %336, -1
  %344 = or i64 3885300826785410058, %343
  %345 = xor i64 %344, -1
  %346 = and i64 %345, -1
  %347 = or i64 %342, %346
  %348 = xor i64 %333, %331
  %349 = xor i64 %348, %335
  %350 = xor i64 %349, %347
  %351 = xor i64 %350, %327
  %352 = xor i64 %351, 0
  %353 = xor i64 %352, %337
  %354 = mul i64 %325, %353
  %355 = trunc i64 %354 to i32
  %356 = icmp sgt i32 %292, %355
  %357 = and i1 %312, %356
  %358 = and i64 %121, 7756170502853212264
  %359 = xor i64 %121, -1
  %360 = xor i64 7756170502853212264, %359
  %361 = and i64 %360, 7756170502853212264
  %362 = sext i32 %6 to i64
  %363 = or i64 %362, -1689989148406834000
  %364 = and i64 -1689989148406834000, %362
  %365 = xor i64 -1689989148406834000, %362
  %366 = or i64 %364, %365
  %367 = xor i64 %363, %366
  %368 = xor i64 %367, 4612050934693754565
  %369 = xor i64 %368, %358
  %370 = xor i64 %369, %361
  %371 = sext i32 %2 to i64
  %372 = or i64 %371, 2922078752904872098
  %373 = xor i64 %371, -1
  %374 = and i64 2922078752904872098, %373
  %375 = add i64 %374, %371
  %376 = sext i32 %5 to i64
  %377 = add i64 %376, 3117430954519254082
  %378 = sub i64 0, %376
  %379 = add i64 -3117430954519254082, %378
  %380 = sub i64 0, %379
  %381 = sext i32 %202 to i64
  %382 = and i64 %381, -1150650149346750684
  %383 = xor i64 %381, -1
  %384 = or i64 1150650149346750683, %383
  %385 = xor i64 %384, -1
  %386 = and i64 %385, -1
  %387 = xor i64 %375, %382
  %388 = xor i64 %387, 0
  %389 = xor i64 %388, %380
  %390 = xor i64 %389, %372
  %391 = xor i64 %390, %386
  %392 = xor i64 %391, %377
  %393 = mul i64 %370, %392
  %394 = trunc i64 %393 to i32
  %395 = icmp sgt i32 %310, %394
  %396 = sext i32 %261 to i64
  %397 = and i64 %396, 1226406763149257836
  %398 = xor i64 %396, -1
  %399 = xor i64 1226406763149257836, %398
  %400 = and i64 %399, 1226406763149257836
  %401 = sext i32 %202 to i64
  %402 = and i64 %401, -8306632425564803942
  %403 = xor i64 %401, -1
  %404 = or i64 8306632425564803941, %403
  %405 = xor i64 %404, -1
  %406 = and i64 %405, -1
  %407 = xor i64 %402, %400
  %408 = xor i64 %407, %406
  %409 = xor i64 %408, %397
  %410 = xor i64 %409, 3674098962064354231
  %411 = sext i32 %261 to i64
  %412 = or i64 %411, -6151849545565837143
  %413 = xor i64 %411, -1
  %414 = and i64 -6151849545565837143, %413
  %415 = add i64 %414, %411
  %416 = or i64 %59, -1595796148402946232
  %417 = xor i64 %59, -1
  %418 = and i64 -1595796148402946232, %417
  %419 = add i64 %418, %59
  %420 = xor i64 %415, 0
  %421 = xor i64 %420, %412
  %422 = xor i64 %421, %416
  %423 = xor i64 %422, %419
  %424 = mul i64 %410, %423
  %425 = trunc i64 %424 to i1
  %426 = select i1 %357, i1 %395, i1 %425
  %427 = icmp slt i32 %310, %6
  %428 = sext i32 %2 to i64
  %429 = add i64 %428, 9094880323402403948
  %430 = sub i64 0, %428
  %431 = add i64 -9094880323402403948, %430
  %432 = sub i64 0, %431
  %433 = sext i32 %2 to i64
  %434 = or i64 %433, 5429060018434052669
  %435 = and i64 5429060018434052669, %433
  %436 = xor i64 5429060018434052669, %433
  %437 = or i64 %435, %436
  %438 = sext i32 %2 to i64
  %439 = or i64 %438, -8475240441414657533
  %440 = xor i64 %438, -1
  %441 = and i64 -8475240441414657533, %440
  %442 = add i64 %441, %438
  %443 = xor i64 %439, %432
  %444 = xor i64 %443, %437
  %445 = xor i64 %444, -4111284945323705673
  %446 = xor i64 %445, %434
  %447 = xor i64 %446, %442
  %448 = xor i64 %447, %429
  %449 = sext i32 %2 to i64
  %450 = or i64 %449, 7208143442581433479
  %451 = xor i64 %449, -1
  %452 = and i64 %451, -4006283324403743896
  %453 = and i64 %449, 4006283324403743895
  %454 = or i64 %452, %453
  %455 = xor i64 -6021687842987003921, %454
  %456 = xor i64 %449, -1
  %457 = or i64 -7208143442581433480, %456
  %458 = xor i64 %457, -1
  %459 = and i64 %458, -1
  %460 = or i64 %455, %459
  %461 = sext i32 %231 to i64
  %462 = and i64 %461, -1593299941485724093
  %463 = or i64 1593299941485724092, %461
  %464 = sub i64 %463, 1593299941485724092
  %465 = sext i32 %2 to i64
  %466 = or i64 %465, -4542554797527673634
  %467 = xor i64 %465, -1
  %468 = and i64 %467, 8896671137545001556
  %469 = and i64 %465, -8896671137545001557
  %470 = or i64 %468, %469
  %471 = xor i64 -4935160990761562486, %470
  %472 = xor i64 %465, -1
  %473 = or i64 4542554797527673633, %472
  %474 = xor i64 %473, -1
  %475 = and i64 %474, -1
  %476 = or i64 %471, %475
  %477 = xor i64 0, %466
  %478 = xor i64 %477, %464
  %479 = xor i64 %478, %450
  %480 = xor i64 %479, %462
  %481 = xor i64 %480, %476
  %482 = xor i64 %481, %460
  %483 = mul i64 %448, %482
  %484 = trunc i64 %483 to i1
  %485 = select i1 %426, i1 %427, i1 %484
  br i1 %485, label %486, label %575

486:                                              ; preds = %270
  %487 = mul nsw i32 %292, %6
  %488 = add nsw i32 %487, %310
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds float, float* %3, i64 %489
  %491 = load float, float* %490, align 4, !tbaa !13
  %492 = fcmp ogt float %284, %491
  br i1 %492, label %493, label %575

493:                                              ; preds = %486
  store float %284, float* %490, align 4, !tbaa !13
  %494 = add i64 %489, -7252141443712448148
  %495 = and i64 -7252141443712448148, %489
  %496 = or i64 -7252141443712448148, %489
  %497 = add i64 %495, %496
  %498 = sext i32 %58 to i64
  %499 = and i64 %498, -5378163614793401599
  %500 = xor i64 %498, -1
  %501 = xor i64 -5378163614793401599, %500
  %502 = and i64 %501, -5378163614793401599
  %503 = sext i32 %6 to i64
  %504 = add i64 %503, -7994091520403179013
  %505 = add i64 -6410644231249402601, %503
  %506 = add i64 %505, -1583447289153776412
  %507 = xor i64 %497, %504
  %508 = xor i64 %507, %499
  %509 = xor i64 %508, %494
  %510 = xor i64 %509, %506
  %511 = xor i64 %510, 4162437383980593569
  %512 = xor i64 %511, %502
  %513 = sext i32 %487 to i64
  %514 = or i64 %513, -5453747517619954107
  %515 = and i64 -5453747517619954107, %513
  %516 = xor i64 -5453747517619954107, %513
  %517 = or i64 %515, %516
  %518 = sext i32 %487 to i64
  %519 = add i64 %518, 8220443008932532445
  %520 = add i64 -4444912343643692426, %518
  %521 = sub i64 %520, 5781388721133326745
  %522 = add i64 %489, 349901737269939265
  %523 = add i64 371722317674206454, %489
  %524 = add i64 %523, -21820580404267189
  %525 = xor i64 %517, %514
  %526 = xor i64 %525, %519
  %527 = xor i64 %526, %521
  %528 = xor i64 %527, %522
  %529 = xor i64 %528, %524
  %530 = xor i64 %529, 0
  %531 = mul i64 %512, %530
  %532 = trunc i64 %531 to i32
  %533 = icmp sgt i32 %311, %532
  %534 = sext i32 %488 to i64
  %535 = add i64 %534, 3073737057566597297
  %536 = add i64 2824808810823231309, %534
  %537 = sub i64 %536, -248928246743365988
  %538 = sext i32 %311 to i64
  %539 = add i64 %538, 8988412775342584712
  %540 = add i64 3041431378199599069, %538
  %541 = add i64 %540, 5946981397142985643
  %542 = xor i64 %541, %535
  %543 = xor i64 %542, -627681581890503933
  %544 = xor i64 %543, %537
  %545 = xor i64 %544, %539
  %546 = sext i32 %231 to i64
  %547 = or i64 %546, 4108359348618698864
  %548 = xor i64 %546, -1
  %549 = and i64 4108359348618698864, %548
  %550 = add i64 %549, %546
  %551 = sext i32 %487 to i64
  %552 = and i64 %551, -1576339464267276180
  %553 = xor i64 %551, -1
  %554 = or i64 1576339464267276179, %553
  %555 = xor i64 %554, -1
  %556 = and i64 %555, -1
  %557 = sext i32 %488 to i64
  %558 = and i64 %557, -1436230968486823859
  %559 = xor i64 %557, -1
  %560 = xor i64 -1436230968486823859, %559
  %561 = and i64 %560, -1436230968486823859
  %562 = xor i64 %552, 0
  %563 = xor i64 %562, %550
  %564 = xor i64 %563, %547
  %565 = xor i64 %564, %558
  %566 = xor i64 %565, %561
  %567 = xor i64 %566, %556
  %568 = mul i64 %545, %567
  %569 = trunc i64 %568 to i32
  %570 = select i1 %533, i32 %311, i32 %569
  %571 = zext i32 %570 to i64
  %572 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %571
  %573 = load i8, i8* %572, align 1, !tbaa !10
  %574 = getelementptr inbounds i8, i8* %4, i64 %489
  store i8 %573, i8* %574, align 1, !tbaa !10
  br label %575

575:                                              ; preds = %493, %486, %270
  %576 = fadd double %271, 7.000000e-02
  %577 = fptrunc double %576 to float
  %578 = fpext float %577 to double
  %579 = fcmp olt double %578, 6.280000e+00
  br i1 %579, label %270, label %269, !llvm.loop !18
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3sinf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3cosf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: mustprogress nofree norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  %3 = bitcast float* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store float 0.000000e+00, float* %1, align 4, !tbaa !13
  %4 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store float 0.000000e+00, float* %2, align 4, !tbaa !13
  %5 = call i8* @llvm.stacksave()
  %6 = alloca [1760 x float], align 4
  %7 = alloca [1760 x i8], align 1
  %8 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 0
  %9 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 0
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %11, %0
  %12 = phi i32 [ 5, %0 ], [ %212, %11 ]
  %13 = load float, float* %1, align 4, !tbaa !13
  %14 = load float, float* %2, align 4, !tbaa !13
  %15 = sext i32 %10 to i64
  %16 = add i64 %15, -8993069452670730791
  %17 = xor i64 -8993069452670730791, %15
  %18 = and i64 -8993069452670730791, %15
  %19 = mul i64 2, %18
  %20 = add i64 %17, %19
  %21 = sext i32 %10 to i64
  %22 = and i64 %21, 7556881619764027597
  %23 = or i64 -7556881619764027598, %21
  %24 = sub i64 %23, -7556881619764027598
  %25 = sext i32 %10 to i64
  %26 = or i64 %25, -8648656812260187367
  %27 = xor i64 %25, -1
  %28 = and i64 -8648656812260187367, %27
  %29 = add i64 %28, %25
  %30 = xor i64 %24, %22
  %31 = xor i64 %30, %16
  %32 = xor i64 %31, 863977887544851689
  %33 = xor i64 %32, %29
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, %20
  %36 = sext i32 %10 to i64
  %37 = or i64 %36, 4483110056250052160
  %38 = and i64 4483110056250052160, %36
  %39 = xor i64 4483110056250052160, %36
  %40 = or i64 %38, %39
  %41 = sext i32 %10 to i64
  %42 = add i64 %41, -2749118003224005169
  %43 = and i64 -2749118003224005169, %41
  %44 = or i64 -2749118003224005169, %41
  %45 = add i64 %43, %44
  %46 = xor i64 8423285691438597088, %37
  %47 = xor i64 %46, %45
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %40
  %50 = mul i64 %35, %49
  %51 = trunc i64 %50 to i32
  %52 = sext i32 %10 to i64
  %53 = or i64 %52, -3190095097846007241
  %54 = xor i64 %52, -1
  %55 = and i64 -3190095097846007241, %54
  %56 = add i64 %55, %52
  %57 = sext i32 %10 to i64
  %58 = or i64 %57, -6348148245454356964
  %59 = xor i64 %57, -1
  %60 = and i64 -6348148245454356964, %59
  %61 = add i64 %60, %57
  %62 = sext i32 %10 to i64
  %63 = and i64 %62, -4439154676913483531
  %64 = xor i64 %62, -1
  %65 = xor i64 -4439154676913483531, %64
  %66 = and i64 %65, -4439154676913483531
  %67 = xor i64 %58, %66
  %68 = xor i64 %67, %53
  %69 = xor i64 %68, %63
  %70 = xor i64 %69, %56
  %71 = xor i64 %70, %61
  %72 = xor i64 %71, 3755992984483454465
  %73 = sext i32 %10 to i64
  %74 = and i64 %73, 1018766036973684326
  %75 = xor i64 %73, -1
  %76 = xor i64 1018766036973684326, %75
  %77 = and i64 %76, 1018766036973684326
  %78 = sext i32 %10 to i64
  %79 = or i64 %78, -4195402414087093062
  %80 = xor i64 %78, -1
  %81 = and i64 -4195402414087093062, %80
  %82 = add i64 %81, %78
  %83 = xor i64 %77, %79
  %84 = xor i64 %83, -6601254117447767018
  %85 = xor i64 %84, %82
  %86 = xor i64 %85, %74
  %87 = mul i64 %72, %86
  %88 = trunc i64 %87 to i32
  %89 = sext i32 %10 to i64
  %90 = and i64 %89, 1794737035674037256
  %91 = xor i64 %89, -1
  %92 = xor i64 1794737035674037256, %91
  %93 = and i64 %92, 1794737035674037256
  %94 = sext i32 %10 to i64
  %95 = or i64 %94, -3703537275105085517
  %96 = and i64 -3703537275105085517, %94
  %97 = xor i64 -3703537275105085517, %94
  %98 = or i64 %96, %97
  %99 = sext i32 %10 to i64
  %100 = add i64 %99, -4565883234712002997
  %101 = sub i64 0, %99
  %102 = add i64 4565883234712002997, %101
  %103 = sub i64 0, %102
  %104 = xor i64 %90, -4124086827278262381
  %105 = xor i64 %104, %98
  %106 = xor i64 %105, %100
  %107 = xor i64 %106, %103
  %108 = xor i64 %107, %93
  %109 = xor i64 %108, %95
  %110 = sext i32 %10 to i64
  %111 = add i64 %110, -3521521536541997187
  %112 = add i64 4230989701671294135, %110
  %113 = sub i64 %112, 7752511238213291322
  %114 = sext i32 %10 to i64
  %115 = and i64 %114, -4504312678160851072
  %116 = xor i64 %114, -1
  %117 = xor i64 -4504312678160851072, %116
  %118 = and i64 %117, -4504312678160851072
  %119 = sext i32 %10 to i64
  %120 = and i64 %119, -1170374177285668072
  %121 = xor i64 %119, -1
  %122 = or i64 1170374177285668071, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = xor i64 -4666499582142508944, %120
  %126 = xor i64 %125, %124
  %127 = xor i64 %126, %118
  %128 = xor i64 %127, %113
  %129 = xor i64 %128, %115
  %130 = xor i64 %129, %111
  %131 = mul i64 %109, %130
  %132 = trunc i64 %131 to i32
  call void @_Z6renderffiPfPcii(float %13, float %14, i32 %51, float* nonnull %9, i8* nonnull %8, i32 %88, i32 %132)
  %133 = sext i32 %10 to i64
  %134 = add i64 %133, -5707130641052549451
  %135 = add i64 -2244417117397667602, %133
  %136 = sub i64 %135, 3462713523654881849
  %137 = sext i32 %10 to i64
  %138 = add i64 %137, -1110828228485951990
  %139 = xor i64 -1110828228485951990, %137
  %140 = and i64 -1110828228485951990, %137
  %141 = mul i64 2, %140
  %142 = add i64 %139, %141
  %143 = sext i32 %10 to i64
  %144 = and i64 %143, 1136963769139797834
  %145 = or i64 -1136963769139797835, %143
  %146 = sub i64 %145, -1136963769139797835
  %147 = xor i64 %134, %144
  %148 = xor i64 %147, %142
  %149 = xor i64 %148, %138
  %150 = xor i64 %149, %146
  %151 = xor i64 %150, 4248239132192267581
  %152 = xor i64 %151, %136
  %153 = sext i32 %10 to i64
  %154 = and i64 %153, -4580013021270837774
  %155 = or i64 4580013021270837773, %153
  %156 = sub i64 %155, 4580013021270837773
  %157 = sext i32 %10 to i64
  %158 = and i64 %157, 5505293178691490757
  %159 = xor i64 %157, -1
  %160 = or i64 -5505293178691490758, %159
  %161 = xor i64 %160, -1
  %162 = and i64 %161, -1
  %163 = xor i64 %154, %158
  %164 = xor i64 %163, 1148326447951372821
  %165 = xor i64 %164, %156
  %166 = xor i64 %165, %162
  %167 = mul i64 %152, %166
  %168 = trunc i64 %167 to i32
  call void @_Z7displayPKcRfS1_i(i8* nonnull %8, float* nonnull align 4 dereferenceable(4) %1, float* nonnull align 4 dereferenceable(4) %2, i32 %168)
  %169 = sext i32 %10 to i64
  %170 = add i64 %169, 2471941967265166547
  %171 = add i64 -8540594678320146312, %169
  %172 = add i64 %171, -7434207428124238757
  %173 = sext i32 %10 to i64
  %174 = and i64 %173, -5719067334111795278
  %175 = xor i64 %173, -1
  %176 = xor i64 -5719067334111795278, %175
  %177 = and i64 %176, -5719067334111795278
  %178 = sext i32 %10 to i64
  %179 = and i64 %178, -3759940307558720505
  %180 = xor i64 %178, -1
  %181 = xor i64 -3759940307558720505, %180
  %182 = and i64 %181, -3759940307558720505
  %183 = xor i64 %174, %177
  %184 = xor i64 %183, %179
  %185 = xor i64 %184, 1897767911119045409
  %186 = xor i64 %185, %170
  %187 = xor i64 %186, %172
  %188 = xor i64 %187, %182
  %189 = sext i32 %10 to i64
  %190 = and i64 %189, -3423802939146074288
  %191 = xor i64 %189, -1
  %192 = xor i64 -3423802939146074288, %191
  %193 = and i64 %192, -3423802939146074288
  %194 = sext i32 %10 to i64
  %195 = or i64 %194, -4102503659183301448
  %196 = xor i64 %194, -1
  %197 = and i64 %196, -9165546393965679546
  %198 = and i64 %194, 9165546393965679545
  %199 = or i64 %197, %198
  %200 = xor i64 5178447660162724094, %199
  %201 = xor i64 %194, -1
  %202 = or i64 4102503659183301447, %201
  %203 = xor i64 %202, -1
  %204 = and i64 %203, -1
  %205 = or i64 %200, %204
  %206 = xor i64 %190, %205
  %207 = xor i64 %206, %193
  %208 = xor i64 %207, %195
  %209 = xor i64 %208, 229984665541443809
  %210 = mul i64 %188, %209
  %211 = trunc i64 %210 to i32
  %212 = add nuw nsw i32 %12, %211
  %213 = sext i32 %10 to i64
  %214 = add i64 %213, 8667797529848220813
  %215 = sub i64 0, %213
  %216 = add i64 -8667797529848220813, %215
  %217 = sub i64 0, %216
  %218 = sext i32 %10 to i64
  %219 = and i64 %218, -4746492019617583148
  %220 = xor i64 %218, -1
  %221 = xor i64 -4746492019617583148, %220
  %222 = and i64 %221, -4746492019617583148
  %223 = xor i64 %217, %214
  %224 = xor i64 %223, %219
  %225 = xor i64 %224, -7722432660836923817
  %226 = xor i64 %225, %222
  %227 = sext i32 %10 to i64
  %228 = or i64 %227, 347501201490250667
  %229 = xor i64 %227, -1
  %230 = and i64 %229, -4136279102386003890
  %231 = and i64 %227, 4136279102386003889
  %232 = or i64 %230, %231
  %233 = xor i64 -4446620107997697051, %232
  %234 = xor i64 %227, -1
  %235 = or i64 -347501201490250668, %234
  %236 = xor i64 %235, -1
  %237 = and i64 %236, -1
  %238 = or i64 %233, %237
  %239 = sext i32 %10 to i64
  %240 = add i64 %239, 1666776963706043809
  %241 = sub i64 0, %239
  %242 = sub i64 1666776963706043809, %241
  %243 = sext i32 %10 to i64
  %244 = or i64 %243, -7976396254068536759
  %245 = and i64 -7976396254068536759, %243
  %246 = xor i64 -7976396254068536759, %243
  %247 = or i64 %245, %246
  %248 = xor i64 %242, -3339848995722545658
  %249 = xor i64 %248, %247
  %250 = xor i64 %249, %240
  %251 = xor i64 %250, %238
  %252 = xor i64 %251, %228
  %253 = xor i64 %252, %244
  %254 = mul i64 %226, %253
  %255 = trunc i64 %254 to i32
  %256 = icmp eq i32 %212, %255
  br i1 %256, label %258, label %11, !llvm.loop !19

257:                                              ; preds = %258
  call void @llvm.stackrestore(i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i32 %269

258:                                              ; preds = %258, %11
  %259 = phi i64 [ %320, %258 ], [ 0, %11 ]
  %260 = phi i32 [ %269, %258 ], [ 0, %11 ]
  %261 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 %259
  %262 = load i8, i8* %261, align 1, !tbaa !10
  %263 = sext i8 %262 to i32
  %264 = add nsw i32 %260, %263
  %265 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 %259
  %266 = load float, float* %265, align 4, !tbaa !13
  %267 = sitofp i32 %264 to float
  %268 = fadd float %266, %267
  %269 = fptosi float %268 to i32
  %270 = sext i32 %10 to i64
  %271 = or i64 %270, -5374034272847689728
  %272 = xor i64 %270, -1
  %273 = and i64 %272, -2974609826359973305
  %274 = and i64 %270, 2974609826359973304
  %275 = or i64 %273, %274
  %276 = xor i64 7193242918802350663, %275
  %277 = xor i64 %270, -1
  %278 = or i64 5374034272847689727, %277
  %279 = xor i64 %278, -1
  %280 = and i64 %279, -1
  %281 = or i64 %276, %280
  %282 = sext i32 %212 to i64
  %283 = or i64 %282, -4400777291955502207
  %284 = and i64 -4400777291955502207, %282
  %285 = xor i64 -4400777291955502207, %282
  %286 = or i64 %284, %285
  %287 = sext i32 %212 to i64
  %288 = add i64 %287, -9154598173665557304
  %289 = and i64 -9154598173665557304, %287
  %290 = or i64 -9154598173665557304, %287
  %291 = add i64 %289, %290
  %292 = xor i64 %291, %286
  %293 = xor i64 %292, %288
  %294 = xor i64 %293, %283
  %295 = xor i64 %294, 3456648503411017501
  %296 = xor i64 %295, %281
  %297 = xor i64 %296, %271
  %298 = sext i32 %212 to i64
  %299 = or i64 %298, -5321400122303195982
  %300 = xor i64 %298, -1
  %301 = and i64 %300, 5992095783474413836
  %302 = and i64 %298, -5992095783474413837
  %303 = or i64 %301, %302
  %304 = xor i64 -1941432323664898626, %303
  %305 = xor i64 %298, -1
  %306 = or i64 5321400122303195981, %305
  %307 = xor i64 %306, -1
  %308 = and i64 %307, -1
  %309 = or i64 %304, %308
  %310 = sext i32 %212 to i64
  %311 = or i64 %310, -7237404031945876219
  %312 = and i64 -7237404031945876219, %310
  %313 = xor i64 -7237404031945876219, %310
  %314 = or i64 %312, %313
  %315 = xor i64 %299, %314
  %316 = xor i64 %315, %311
  %317 = xor i64 %316, %309
  %318 = xor i64 %317, 3954140584234185525
  %319 = mul i64 %297, %318
  %320 = add nuw nsw i64 %259, %319
  %321 = sext i32 %10 to i64
  %322 = and i64 %321, 9215852384686340960
  %323 = or i64 -9215852384686340961, %321
  %324 = sub i64 %323, -9215852384686340961
  %325 = sext i32 %10 to i64
  %326 = or i64 %325, 3453853904288322663
  %327 = xor i64 %325, -1
  %328 = and i64 3453853904288322663, %327
  %329 = add i64 %328, %325
  %330 = sext i32 %10 to i64
  %331 = and i64 %330, 2339136824815000383
  %332 = xor i64 %330, -1
  %333 = or i64 -2339136824815000384, %332
  %334 = xor i64 %333, -1
  %335 = and i64 %334, -1
  %336 = xor i64 %335, %329
  %337 = xor i64 %336, %326
  %338 = xor i64 %337, %324
  %339 = xor i64 %338, %322
  %340 = xor i64 %339, %331
  %341 = xor i64 %340, -1195131871852827463
  %342 = sext i32 %10 to i64
  %343 = add i64 %342, 5319080274522630989
  %344 = and i64 5319080274522630989, %342
  %345 = or i64 5319080274522630989, %342
  %346 = add i64 %344, %345
  %347 = sext i32 %212 to i64
  %348 = or i64 %347, -432190967628376908
  %349 = and i64 -432190967628376908, %347
  %350 = xor i64 -432190967628376908, %347
  %351 = or i64 %349, %350
  %352 = sext i32 %12 to i64
  %353 = add i64 %352, 8830289901729713781
  %354 = and i64 8830289901729713781, %352
  %355 = or i64 8830289901729713781, %352
  %356 = add i64 %354, %355
  %357 = xor i64 %346, %343
  %358 = xor i64 %357, %348
  %359 = xor i64 %358, %356
  %360 = xor i64 %359, %353
  %361 = xor i64 %360, %351
  %362 = xor i64 %361, 5797972920949509600
  %363 = mul i64 %341, %362
  %364 = icmp eq i64 %320, %363
  br i1 %364, label %257, label %258, !llvm.loop !20
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #8

attributes #0 = { mustprogress nofree nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #5 = { inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { mustprogress nofree norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !11, i64 0}
!15 = distinct !{!15, !16, !17}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !16, !17}
!19 = distinct !{!19, !16, !17}
!20 = distinct !{!20, !16, !17}
