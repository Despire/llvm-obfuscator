; ModuleID = 'output/const-obfuscation/ex7/ex7.ll'
source_filename = "input/const-obfuscation/ex7/ex7.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [4 x i8] c"\1B[H\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c".,-~:;=!*#$@\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1

; Function Attrs: mustprogress nofree nounwind ssp uwtable
define void @_Z7displayPKcRfS1_i(i8* nocapture readonly %0, float* nocapture nonnull align 4 dereferenceable(4) %1, float* nocapture nonnull align 4 dereferenceable(4) %2, i32 %3) local_unnamed_addr #0 {
  %5 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %7

6:                                                ; preds = %99
  ret void

7:                                                ; preds = %99, %4
  %8 = phi i64 [ 0, %4 ], [ %148, %99 ]
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %3 to i64
  %11 = add i64 %10, 4057565163421877568
  %12 = sub i64 0, %10
  %13 = add i64 -4057565163421877568, %12
  %14 = sub i64 0, %13
  %15 = sext i32 %5 to i64
  %16 = or i64 %15, 1665841126227955458
  %17 = xor i64 %15, -1
  %18 = and i64 1665841126227955458, %17
  %19 = add i64 %18, %15
  %20 = xor i64 %19, %11
  %21 = xor i64 %20, %14
  %22 = xor i64 %21, %16
  %23 = xor i64 %22, 3797732936584043261
  %24 = sext i32 %5 to i64
  %25 = or i64 %24, -3437592942699851416
  %26 = xor i64 %24, -1
  %27 = and i64 %26, -2082380625869114802
  %28 = and i64 %24, 2082380625869114801
  %29 = or i64 %27, %28
  %30 = xor i64 3698249914763322150, %29
  %31 = xor i64 %24, -1
  %32 = or i64 3437592942699851415, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = or i64 %30, %34
  %36 = sext i32 %5 to i64
  %37 = add i64 %36, 8969575141779144649
  %38 = sub i64 0, %36
  %39 = add i64 -8969575141779144649, %38
  %40 = sub i64 0, %39
  %41 = sext i32 %3 to i64
  %42 = and i64 %41, -4554518159594324369
  %43 = xor i64 %41, -1
  %44 = xor i64 -4554518159594324369, %43
  %45 = and i64 %44, -4554518159594324369
  %46 = xor i64 %35, -5967373193016395120
  %47 = xor i64 %46, %37
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %45
  %50 = xor i64 %49, %25
  %51 = xor i64 %50, %40
  %52 = mul i64 %23, %51
  %53 = trunc i64 %52 to i32
  %54 = urem i32 %9, %53
  %55 = sext i32 %5 to i64
  %56 = and i64 %55, -7966814223604809666
  %57 = xor i64 %55, -1
  %58 = or i64 7966814223604809665, %57
  %59 = xor i64 %58, -1
  %60 = and i64 %59, -1
  %61 = sext i32 %5 to i64
  %62 = and i64 %61, -3618801253789673394
  %63 = xor i64 %61, -1
  %64 = xor i64 -3618801253789673394, %63
  %65 = and i64 %64, -3618801253789673394
  %66 = xor i64 %65, %56
  %67 = xor i64 %66, %62
  %68 = xor i64 %67, -5527467398776269695
  %69 = xor i64 %68, %60
  %70 = sext i32 %5 to i64
  %71 = add i64 %70, 5657130652068618161
  %72 = and i64 5657130652068618161, %70
  %73 = or i64 5657130652068618161, %70
  %74 = add i64 %72, %73
  %75 = sext i32 %5 to i64
  %76 = and i64 %75, 7108103509581530185
  %77 = xor i64 %75, -1
  %78 = or i64 -7108103509581530186, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = sext i32 %5 to i64
  %82 = or i64 %81, 5279219732825126314
  %83 = xor i64 %81, -1
  %84 = and i64 5279219732825126314, %83
  %85 = add i64 %84, %81
  %86 = xor i64 %82, %85
  %87 = xor i64 %86, %80
  %88 = xor i64 %87, %74
  %89 = xor i64 %88, 0
  %90 = xor i64 %89, %76
  %91 = xor i64 %90, %71
  %92 = mul i64 %69, %91
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %54, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %7
  %96 = getelementptr inbounds i8, i8* %0, i64 %8
  %97 = load i8, i8* %96, align 1, !tbaa !10
  %98 = sext i8 %97 to i32
  br label %99

99:                                               ; preds = %95, %7
  %100 = phi i32 [ %98, %95 ], [ 10, %7 ]
  %101 = call i32 @putchar(i32 %100)
  %102 = load float, float* %1, align 4, !tbaa !13
  %103 = fpext float %102 to double
  %104 = fadd double %103, 4.000000e-05
  %105 = fptrunc double %104 to float
  store float %105, float* %1, align 4, !tbaa !13
  %106 = load float, float* %2, align 4, !tbaa !13
  %107 = fpext float %106 to double
  %108 = fadd double %107, 2.000000e-05
  %109 = fptrunc double %108 to float
  store float %109, float* %2, align 4, !tbaa !13
  %110 = add i64 %8, 5197470200554478061
  %111 = sub i64 0, %8
  %112 = sub i64 5197470200554478061, %111
  %113 = sext i32 %5 to i64
  %114 = or i64 %113, -6210702262592735868
  %115 = and i64 -6210702262592735868, %113
  %116 = xor i64 -6210702262592735868, %113
  %117 = or i64 %115, %116
  %118 = xor i64 %117, %110
  %119 = xor i64 %118, %114
  %120 = xor i64 %119, %112
  %121 = xor i64 %120, 8934342994927794271
  %122 = sext i32 %5 to i64
  %123 = and i64 %122, 5828139142601366969
  %124 = or i64 -5828139142601366970, %122
  %125 = sub i64 %124, -5828139142601366970
  %126 = and i64 %8, -5858403469958239420
  %127 = or i64 5858403469958239419, %8
  %128 = sub i64 %127, 5858403469958239419
  %129 = sext i32 %9 to i64
  %130 = or i64 %129, -7986109907074245780
  %131 = xor i64 %129, -1
  %132 = and i64 %131, 1799674960472362170
  %133 = and i64 %129, -1799674960472362171
  %134 = or i64 %132, %133
  %135 = xor i64 -8515715850387171370, %134
  %136 = xor i64 %129, -1
  %137 = or i64 7986109907074245779, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = or i64 %135, %139
  %141 = xor i64 %128, %123
  %142 = xor i64 %141, %130
  %143 = xor i64 %142, %140
  %144 = xor i64 %143, 445625299037365151
  %145 = xor i64 %144, %126
  %146 = xor i64 %145, %125
  %147 = mul i64 %121, %146
  %148 = add nuw nsw i64 %8, %147
  %149 = sext i32 %54 to i64
  %150 = add i64 %149, 1368642392651219988
  %151 = sub i64 0, %149
  %152 = sub i64 1368642392651219988, %151
  %153 = sext i32 %5 to i64
  %154 = add i64 %153, -8277977754396490927
  %155 = sub i64 0, %153
  %156 = add i64 8277977754396490927, %155
  %157 = sub i64 0, %156
  %158 = sext i32 %54 to i64
  %159 = or i64 %158, -5369368101814713958
  %160 = xor i64 %158, -1
  %161 = and i64 %160, 2365722470119321735
  %162 = and i64 %158, -2365722470119321736
  %163 = or i64 %161, %162
  %164 = xor i64 -7662716274235248355, %163
  %165 = xor i64 %158, -1
  %166 = or i64 5369368101814713957, %165
  %167 = xor i64 %166, -1
  %168 = and i64 %167, -1
  %169 = or i64 %164, %168
  %170 = xor i64 %152, %159
  %171 = xor i64 %170, -8772995267741536195
  %172 = xor i64 %171, %150
  %173 = xor i64 %172, %154
  %174 = xor i64 %173, %169
  %175 = xor i64 %174, %157
  %176 = sext i32 %54 to i64
  %177 = or i64 %176, 9182485521682792669
  %178 = and i64 9182485521682792669, %176
  %179 = xor i64 9182485521682792669, %176
  %180 = or i64 %178, %179
  %181 = sext i32 %3 to i64
  %182 = add i64 %181, -948592787723904226
  %183 = and i64 -948592787723904226, %181
  %184 = or i64 -948592787723904226, %181
  %185 = add i64 %183, %184
  %186 = xor i64 %180, %182
  %187 = xor i64 %186, %177
  %188 = xor i64 %187, 9024211831478130549
  %189 = xor i64 %188, %185
  %190 = mul i64 %175, %189
  %191 = icmp eq i64 %148, %190
  br i1 %191, label %6, label %7, !llvm.loop !15
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind ssp uwtable
define void @_Z6renderffiPfPcii(float %0, float %1, i32 %2, float* nocapture %3, i8* nocapture %4, i32 %5, i32 %6) local_unnamed_addr #3 {
  %8 = sext i32 %6 to i64
  %9 = or i64 %8, 7913949055714806753
  %10 = xor i64 %8, -1
  %11 = and i64 %10, 3498788180759071536
  %12 = and i64 %8, -3498788180759071537
  %13 = or i64 %11, %12
  %14 = xor i64 6727762032458825937, %13
  %15 = xor i64 %8, -1
  %16 = or i64 -7913949055714806754, %15
  %17 = xor i64 %16, -1
  %18 = and i64 %17, -1
  %19 = or i64 %14, %18
  %20 = sext i32 %5 to i64
  %21 = and i64 %20, -1387784120760426202
  %22 = xor i64 %20, -1
  %23 = or i64 1387784120760426201, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = xor i64 %25, %19
  %27 = xor i64 %26, 3577073822701931183
  %28 = xor i64 %27, %21
  %29 = xor i64 %28, %9
  %30 = sext i32 %2 to i64
  %31 = and i64 %30, -1712477813592446113
  %32 = or i64 1712477813592446112, %30
  %33 = sub i64 %32, 1712477813592446112
  %34 = sext i32 %2 to i64
  %35 = or i64 %34, 3416185894849477559
  %36 = and i64 3416185894849477559, %34
  %37 = xor i64 3416185894849477559, %34
  %38 = or i64 %36, %37
  %39 = xor i64 %33, 6522820045606480984
  %40 = xor i64 %39, %35
  %41 = xor i64 %40, %31
  %42 = xor i64 %41, %38
  %43 = mul i64 %29, %42
  %44 = trunc i64 %43 to i32
  %45 = sdiv i32 %6, %44
  %46 = sext i32 %2 to i64
  %47 = sext i32 %6 to i64
  %48 = add i64 %47, -891501750373787327
  %49 = add i64 4173949335156972890, %47
  %50 = add i64 %49, -5065451085530760217
  %51 = sext i32 %2 to i64
  %52 = add i64 %51, 8416699624155129378
  %53 = and i64 8416699624155129378, %51
  %54 = or i64 8416699624155129378, %51
  %55 = add i64 %53, %54
  %56 = sext i32 %6 to i64
  %57 = or i64 %56, 1786979352156555441
  %58 = xor i64 %56, -1
  %59 = and i64 1786979352156555441, %58
  %60 = add i64 %59, %56
  %61 = xor i64 8227977448130069237, %52
  %62 = xor i64 %61, %50
  %63 = xor i64 %62, %48
  %64 = xor i64 %63, %60
  %65 = xor i64 %64, %57
  %66 = xor i64 %65, %55
  %67 = sext i32 %6 to i64
  %68 = add i64 %67, 4604984878651242299
  %69 = add i64 -500924302354917077, %67
  %70 = add i64 %69, 5105909181006159376
  %71 = sext i32 %5 to i64
  %72 = add i64 %71, 4641672574229528318
  %73 = and i64 4641672574229528318, %71
  %74 = or i64 4641672574229528318, %71
  %75 = add i64 %73, %74
  %76 = xor i64 -2818250948622996576, %72
  %77 = xor i64 %76, %70
  %78 = xor i64 %77, %68
  %79 = xor i64 %78, %75
  %80 = mul i64 %66, %79
  %81 = trunc i64 %80 to i8
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %81, i64 %46, i1 false)
  %82 = bitcast float* %3 to i8*
  %83 = sext i32 %6 to i64
  %84 = or i64 %83, -6432994375215220919
  %85 = and i64 -6432994375215220919, %83
  %86 = xor i64 -6432994375215220919, %83
  %87 = or i64 %85, %86
  %88 = sext i32 %5 to i64
  %89 = or i64 %88, -2145732791811004203
  %90 = xor i64 %88, -1
  %91 = and i64 %90, -1949876469619349705
  %92 = and i64 %88, 1949876469619349704
  %93 = or i64 %91, %92
  %94 = xor i64 488771171425226722, %93
  %95 = xor i64 %88, -1
  %96 = or i64 2145732791811004202, %95
  %97 = xor i64 %96, -1
  %98 = and i64 %97, -1
  %99 = or i64 %94, %98
  %100 = sext i32 %5 to i64
  %101 = or i64 %100, 7816866455750283966
  %102 = xor i64 %100, -1
  %103 = and i64 %102, -1163088287629891417
  %104 = and i64 %100, 1163088287629891416
  %105 = or i64 %103, %104
  %106 = xor i64 -8961890590810785255, %105
  %107 = xor i64 %100, -1
  %108 = or i64 -7816866455750283967, %107
  %109 = xor i64 %108, -1
  %110 = and i64 %109, -1
  %111 = or i64 %106, %110
  %112 = xor i64 %111, %87
  %113 = xor i64 %112, -1025684894419459915
  %114 = xor i64 %113, %99
  %115 = xor i64 %114, %101
  %116 = xor i64 %115, %84
  %117 = xor i64 %116, %89
  %118 = sext i32 %2 to i64
  %119 = or i64 %118, 3728240310461176189
  %120 = xor i64 %118, -1
  %121 = and i64 %120, -5959843538911650840
  %122 = and i64 %118, 5959843538911650839
  %123 = or i64 %121, %122
  %124 = xor i64 -6992050421412461931, %123
  %125 = xor i64 %118, -1
  %126 = or i64 -3728240310461176190, %125
  %127 = xor i64 %126, -1
  %128 = and i64 %127, -1
  %129 = or i64 %124, %128
  %130 = sext i32 %5 to i64
  %131 = add i64 %130, -3603391060676135280
  %132 = and i64 -3603391060676135280, %130
  %133 = or i64 -3603391060676135280, %130
  %134 = add i64 %132, %133
  %135 = xor i64 %129, -7337883670035162310
  %136 = xor i64 %135, %131
  %137 = xor i64 %136, %134
  %138 = xor i64 %137, %119
  %139 = mul i64 %117, %138
  %140 = shl nsw i64 %46, %139
  %141 = sext i32 %6 to i64
  %142 = or i64 %141, 2167026148602028678
  %143 = xor i64 %141, -1
  %144 = and i64 2167026148602028678, %143
  %145 = add i64 %144, %141
  %146 = sext i32 %2 to i64
  %147 = add i64 %146, -4776722374717447732
  %148 = sub i64 0, %146
  %149 = sub i64 -4776722374717447732, %148
  %150 = xor i64 %142, -2565354420326113815
  %151 = xor i64 %150, %149
  %152 = xor i64 %151, %145
  %153 = xor i64 %152, %147
  %154 = sext i32 %6 to i64
  %155 = and i64 %154, 802260258231305104
  %156 = xor i64 %154, -1
  %157 = xor i64 802260258231305104, %156
  %158 = and i64 %157, 802260258231305104
  %159 = sext i32 %6 to i64
  %160 = or i64 %159, 6768411723322750374
  %161 = xor i64 %159, -1
  %162 = and i64 %161, -7307186151157131338
  %163 = and i64 %159, 7307186151157131337
  %164 = or i64 %162, %163
  %165 = xor i64 -4073063364578909680, %164
  %166 = xor i64 %159, -1
  %167 = or i64 -6768411723322750375, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = or i64 %165, %169
  %171 = xor i64 %170, %160
  %172 = xor i64 %171, %155
  %173 = xor i64 %172, 0
  %174 = xor i64 %173, %158
  %175 = mul i64 %153, %174
  %176 = trunc i64 %175 to i8
  call void @llvm.memset.p0i8.i64(i8* align 4 %82, i8 %176, i64 %140, i1 false)
  %177 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  %178 = call fastcc float @_ZL3sinf(float %0) #9
  %179 = call fastcc float @_ZL3cosf(float %0) #9
  %180 = sitofp i32 %45 to float
  %181 = call fastcc float @_ZL3cosf(float 5.000000e-01) #9
  %182 = call fastcc float @_ZL3cosf(float %1) #9
  %183 = call fastcc float @_ZL3sinf(float %1) #9
  %184 = sext i32 %2 to i64
  %185 = add i64 %184, 7662425578674816895
  %186 = and i64 7662425578674816895, %184
  %187 = or i64 7662425578674816895, %184
  %188 = add i64 %186, %187
  %189 = sext i32 %5 to i64
  %190 = and i64 %189, 8210402586935127463
  %191 = or i64 -8210402586935127464, %189
  %192 = sub i64 %191, -8210402586935127464
  %193 = xor i64 -2441304980712829477, %185
  %194 = xor i64 %193, %190
  %195 = xor i64 %194, %188
  %196 = xor i64 %195, %192
  %197 = sext i32 %6 to i64
  %198 = and i64 %197, 5719691877269359547
  %199 = or i64 -5719691877269359548, %197
  %200 = sub i64 %199, -5719691877269359548
  %201 = sext i32 %6 to i64
  %202 = and i64 %201, 5623154138577565409
  %203 = xor i64 %201, -1
  %204 = or i64 -5623154138577565410, %203
  %205 = xor i64 %204, -1
  %206 = and i64 %205, -1
  %207 = sext i32 %2 to i64
  %208 = or i64 %207, -1326282629919249455
  %209 = xor i64 %207, -1
  %210 = and i64 -1326282629919249455, %209
  %211 = add i64 %210, %207
  %212 = xor i64 %202, %200
  %213 = xor i64 %212, %198
  %214 = xor i64 %213, %211
  %215 = xor i64 %214, %206
  %216 = xor i64 %215, %208
  %217 = xor i64 %216, -4842567221957243738
  %218 = mul i64 %196, %217
  %219 = trunc i64 %218 to i32
  %220 = sdiv i32 %6, %219
  %221 = sitofp i32 %220 to float
  %222 = sext i32 %2 to i64
  %223 = or i64 %222, 1915951051786143079
  %224 = xor i64 %222, -1
  %225 = and i64 1915951051786143079, %224
  %226 = add i64 %225, %222
  %227 = sext i32 %6 to i64
  %228 = or i64 %227, -4003586569000771467
  %229 = xor i64 %227, -1
  %230 = and i64 -4003586569000771467, %229
  %231 = add i64 %230, %227
  %232 = sext i32 %2 to i64
  %233 = add i64 %232, -3634718064581948177
  %234 = and i64 -3634718064581948177, %232
  %235 = or i64 -3634718064581948177, %232
  %236 = add i64 %234, %235
  %237 = xor i64 %226, %228
  %238 = xor i64 %237, -4733089900128497741
  %239 = xor i64 %238, %231
  %240 = xor i64 %239, %223
  %241 = xor i64 %240, %233
  %242 = xor i64 %241, %236
  %243 = sext i32 %2 to i64
  %244 = and i64 %243, 860803932182648220
  %245 = xor i64 %243, -1
  %246 = or i64 -860803932182648221, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = sext i32 %2 to i64
  %250 = and i64 %249, 3404549023317901338
  %251 = or i64 -3404549023317901339, %249
  %252 = sub i64 %251, -3404549023317901339
  %253 = xor i64 %244, %252
  %254 = xor i64 %253, %248
  %255 = xor i64 %254, 7043000641583738614
  %256 = xor i64 %255, %250
  %257 = mul i64 %242, %256
  %258 = trunc i64 %257 to i32
  %259 = sdiv i32 %5, %258
  %260 = sext i32 %5 to i64
  %261 = or i64 %260, 2848956203650079966
  %262 = xor i64 %260, -1
  %263 = and i64 2848956203650079966, %262
  %264 = add i64 %263, %260
  %265 = sext i32 %6 to i64
  %266 = add i64 %265, -952426373384421454
  %267 = xor i64 -952426373384421454, %265
  %268 = and i64 -952426373384421454, %265
  %269 = mul i64 2, %268
  %270 = add i64 %267, %269
  %271 = xor i64 %270, 2365607332659618673
  %272 = xor i64 %271, %261
  %273 = xor i64 %272, %264
  %274 = xor i64 %273, %266
  %275 = sext i32 %2 to i64
  %276 = add i64 %275, 630304274818366930
  %277 = add i64 -8804262021223310606, %275
  %278 = sub i64 %277, 9012177777667874080
  %279 = sext i32 %6 to i64
  %280 = add i64 %279, 404246158335788689
  %281 = and i64 404246158335788689, %279
  %282 = or i64 404246158335788689, %279
  %283 = add i64 %281, %282
  %284 = xor i64 %276, %283
  %285 = xor i64 %284, 509132225797029265
  %286 = xor i64 %285, %278
  %287 = xor i64 %286, %280
  %288 = mul i64 %274, %287
  %289 = trunc i64 %288 to i32
  %290 = add nsw i32 %259, %289
  %291 = sitofp i32 %290 to float
  br label %292

292:                                              ; preds = %586, %7
  %293 = phi float [ 0.000000e+00, %7 ], [ %589, %586 ]
  %294 = call fastcc float @_ZL3cosf(float %293) #9
  %295 = call fastcc float @_ZL3sinf(float %293) #9
  %296 = fadd float %294, %180
  %297 = fmul float %177, %296
  %298 = fmul float %297, %179
  %299 = fmul float %178, %295
  %300 = fsub float %298, %299
  %301 = fmul float %178, %297
  %302 = fmul float %295, %179
  %303 = fadd float %301, %302
  %304 = fadd float %303, 5.000000e+00
  %305 = fdiv float 1.000000e+00, %304
  %306 = fmul float %305, 3.000000e+01
  %307 = fmul float %296, %181
  %308 = fmul float %307, %182
  %309 = fmul float %300, %183
  %310 = fadd float %308, %309
  %311 = fmul float %306, %310
  %312 = fadd float %311, %221
  %313 = fptosi float %312 to i32
  %314 = fmul float %305, 1.500000e+01
  %315 = fmul float %307, %183
  %316 = fmul float %300, %182
  %317 = fsub float %315, %316
  %318 = fmul float %314, %317
  %319 = fadd float %318, %291
  %320 = fptosi float %319 to i32
  %321 = fmul float %177, %294
  %322 = fmul float %321, %179
  %323 = fsub float %299, %322
  %324 = fmul float %323, %182
  %325 = fmul float %321, %178
  %326 = fsub float %324, %325
  %327 = fsub float %326, %302
  %328 = fmul float %294, %181
  %329 = fmul float %328, %183
  %330 = fsub float %327, %329
  %331 = fmul float %330, 8.000000e+00
  %332 = fptosi float %331 to i32
  %333 = icmp slt i32 %320, %5
  %334 = sext i32 %6 to i64
  %335 = add i64 %334, 1424782753343110467
  %336 = sub i64 0, %334
  %337 = add i64 -1424782753343110467, %336
  %338 = sub i64 0, %337
  %339 = sext i32 %5 to i64
  %340 = add i64 %339, -2518067246810839117
  %341 = and i64 -2518067246810839117, %339
  %342 = or i64 -2518067246810839117, %339
  %343 = add i64 %341, %342
  %344 = sext i32 %220 to i64
  %345 = and i64 %344, 461702329441493464
  %346 = xor i64 %344, -1
  %347 = xor i64 461702329441493464, %346
  %348 = and i64 %347, 461702329441493464
  %349 = xor i64 %343, %338
  %350 = xor i64 %349, %348
  %351 = xor i64 %350, %345
  %352 = xor i64 %351, -679795470116315005
  %353 = xor i64 %352, %340
  %354 = xor i64 %353, %335
  %355 = sext i32 %45 to i64
  %356 = and i64 %355, -6660874092346223857
  %357 = xor i64 %355, -1
  %358 = or i64 6660874092346223856, %357
  %359 = xor i64 %358, -1
  %360 = and i64 %359, -1
  %361 = sext i32 %290 to i64
  %362 = add i64 %361, -646264764723518497
  %363 = add i64 -5571744495308391040, %361
  %364 = add i64 %363, 4925479730584872543
  %365 = xor i64 %360, %362
  %366 = xor i64 %365, %356
  %367 = xor i64 %366, %364
  %368 = xor i64 %367, 0
  %369 = mul i64 %354, %368
  %370 = trunc i64 %369 to i32
  %371 = icmp sgt i32 %320, %370
  %372 = and i1 %333, %371
  %373 = sext i32 %45 to i64
  %374 = add i64 %373, 2341164682709257070
  %375 = sub i64 0, %373
  %376 = sub i64 2341164682709257070, %375
  %377 = add i64 %46, 1723767929678319800
  %378 = add i64 8293967062059875822, %46
  %379 = add i64 %378, -6570199132381556022
  %380 = xor i64 %379, %377
  %381 = xor i64 %380, %374
  %382 = xor i64 %381, 7709495013159329783
  %383 = xor i64 %382, %376
  %384 = and i64 %140, -5869699277427282243
  %385 = xor i64 %140, -1
  %386 = or i64 5869699277427282242, %385
  %387 = xor i64 %386, -1
  %388 = and i64 %387, -1
  %389 = add i64 %46, -8002156863538838067
  %390 = xor i64 -8002156863538838067, %46
  %391 = and i64 -8002156863538838067, %46
  %392 = mul i64 2, %391
  %393 = add i64 %390, %392
  %394 = add i64 %46, -4418106407022736971
  %395 = sub i64 0, %46
  %396 = sub i64 -4418106407022736971, %395
  %397 = xor i64 %384, %388
  %398 = xor i64 %397, 0
  %399 = xor i64 %398, %396
  %400 = xor i64 %399, %389
  %401 = xor i64 %400, %393
  %402 = xor i64 %401, %394
  %403 = mul i64 %383, %402
  %404 = trunc i64 %403 to i32
  %405 = icmp sgt i32 %313, %404
  %406 = sext i32 %290 to i64
  %407 = or i64 %406, 1453810503717156981
  %408 = and i64 1453810503717156981, %406
  %409 = xor i64 1453810503717156981, %406
  %410 = or i64 %408, %409
  %411 = sext i32 %45 to i64
  %412 = and i64 %411, 2341949622064857775
  %413 = or i64 -2341949622064857776, %411
  %414 = sub i64 %413, -2341949622064857776
  %415 = sext i32 %6 to i64
  %416 = or i64 %415, 2076712793177345522
  %417 = and i64 2076712793177345522, %415
  %418 = xor i64 2076712793177345522, %415
  %419 = or i64 %417, %418
  %420 = xor i64 %419, 5675586806616600835
  %421 = xor i64 %420, %414
  %422 = xor i64 %421, %407
  %423 = xor i64 %422, %412
  %424 = xor i64 %423, %410
  %425 = xor i64 %424, %416
  %426 = sext i32 %290 to i64
  %427 = add i64 %426, -906979320218397680
  %428 = add i64 844549291196595104, %426
  %429 = sub i64 %428, 1751528611414992784
  %430 = sext i32 %259 to i64
  %431 = and i64 %430, -4075031330833427108
  %432 = xor i64 %430, -1
  %433 = or i64 4075031330833427107, %432
  %434 = xor i64 %433, -1
  %435 = and i64 %434, -1
  %436 = xor i64 0, %435
  %437 = xor i64 %436, %427
  %438 = xor i64 %437, %431
  %439 = xor i64 %438, %429
  %440 = mul i64 %425, %439
  %441 = trunc i64 %440 to i1
  %442 = select i1 %372, i1 %405, i1 %441
  %443 = icmp slt i32 %313, %6
  %444 = sext i32 %45 to i64
  %445 = or i64 %444, -4849848563615020047
  %446 = xor i64 %444, -1
  %447 = and i64 -4849848563615020047, %446
  %448 = add i64 %447, %444
  %449 = sext i32 %259 to i64
  %450 = or i64 %449, 1721096867492190763
  %451 = xor i64 %449, -1
  %452 = and i64 %451, -730880900114937652
  %453 = and i64 %449, 730880900114937651
  %454 = or i64 %452, %453
  %455 = xor i64 -2145415694708059417, %454
  %456 = xor i64 %449, -1
  %457 = or i64 -1721096867492190764, %456
  %458 = xor i64 %457, -1
  %459 = and i64 %458, -1
  %460 = or i64 %455, %459
  %461 = sext i32 %290 to i64
  %462 = and i64 %461, -827348954088057299
  %463 = xor i64 %461, -1
  %464 = or i64 827348954088057298, %463
  %465 = xor i64 %464, -1
  %466 = and i64 %465, -1
  %467 = xor i64 %445, %448
  %468 = xor i64 %467, %450
  %469 = xor i64 %468, %462
  %470 = xor i64 %469, -1271040602632353207
  %471 = xor i64 %470, %460
  %472 = xor i64 %471, %466
  %473 = sext i32 %5 to i64
  %474 = add i64 %473, -5741642338056109478
  %475 = add i64 7248428248925471757, %473
  %476 = add i64 %475, 5456673486727970381
  %477 = add i64 %46, -2313341189102021377
  %478 = add i64 -2602101412418741028, %46
  %479 = add i64 %478, 288760223316719651
  %480 = xor i64 %477, %474
  %481 = xor i64 %480, %479
  %482 = xor i64 %481, 0
  %483 = xor i64 %482, %476
  %484 = mul i64 %472, %483
  %485 = trunc i64 %484 to i1
  %486 = select i1 %442, i1 %443, i1 %485
  br i1 %486, label %487, label %586

487:                                              ; preds = %292
  %488 = mul nsw i32 %320, %6
  %489 = add nsw i32 %488, %313
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds float, float* %3, i64 %490
  %492 = load float, float* %491, align 4, !tbaa !13
  %493 = fcmp ogt float %305, %492
  br i1 %493, label %494, label %586

494:                                              ; preds = %487
  store float %305, float* %491, align 4, !tbaa !13
  %495 = sext i32 %489 to i64
  %496 = and i64 %495, 2198042033123944529
  %497 = xor i64 %495, -1
  %498 = or i64 -2198042033123944530, %497
  %499 = xor i64 %498, -1
  %500 = and i64 %499, -1
  %501 = sext i32 %320 to i64
  %502 = or i64 %501, -6522892688536309270
  %503 = and i64 -6522892688536309270, %501
  %504 = xor i64 -6522892688536309270, %501
  %505 = or i64 %503, %504
  %506 = sext i32 %6 to i64
  %507 = or i64 %506, -7938179199852606130
  %508 = xor i64 %506, -1
  %509 = and i64 %508, 8945050849331991676
  %510 = and i64 %506, -8945050849331991677
  %511 = or i64 %509, %510
  %512 = xor i64 -1299613631430174414, %511
  %513 = xor i64 %506, -1
  %514 = or i64 7938179199852606129, %513
  %515 = xor i64 %514, -1
  %516 = and i64 %515, -1
  %517 = or i64 %512, %516
  %518 = xor i64 %507, %505
  %519 = xor i64 %518, %502
  %520 = xor i64 %519, %500
  %521 = xor i64 %520, %517
  %522 = xor i64 %521, %496
  %523 = xor i64 %522, 8621591144928649207
  %524 = and i64 %140, -9140935379235847959
  %525 = xor i64 %140, -1
  %526 = xor i64 -9140935379235847959, %525
  %527 = and i64 %526, -9140935379235847959
  %528 = sext i32 %488 to i64
  %529 = or i64 %528, 5576012592480333008
  %530 = xor i64 %528, -1
  %531 = and i64 %530, 1353180739507318839
  %532 = and i64 %528, -1353180739507318840
  %533 = or i64 %531, %532
  %534 = xor i64 6892353915285593319, %533
  %535 = xor i64 %528, -1
  %536 = or i64 -5576012592480333009, %535
  %537 = xor i64 %536, -1
  %538 = and i64 %537, -1
  %539 = or i64 %534, %538
  %540 = xor i64 %539, %527
  %541 = xor i64 %540, 0
  %542 = xor i64 %541, %524
  %543 = xor i64 %542, %529
  %544 = mul i64 %523, %543
  %545 = trunc i64 %544 to i32
  %546 = icmp sgt i32 %332, %545
  %547 = sext i32 %488 to i64
  %548 = and i64 %547, -3364592963014015854
  %549 = xor i64 %547, -1
  %550 = xor i64 -3364592963014015854, %549
  %551 = and i64 %550, -3364592963014015854
  %552 = sext i32 %290 to i64
  %553 = add i64 %552, 8248018293314676507
  %554 = add i64 -5378482167349749621, %552
  %555 = add i64 %554, -4820243613045125488
  %556 = sext i32 %6 to i64
  %557 = add i64 %556, 8599555108879885806
  %558 = sub i64 0, %556
  %559 = add i64 -8599555108879885806, %558
  %560 = sub i64 0, %559
  %561 = xor i64 %555, %548
  %562 = xor i64 %561, 4241318757126723327
  %563 = xor i64 %562, %560
  %564 = xor i64 %563, %557
  %565 = xor i64 %564, %551
  %566 = xor i64 %565, %553
  %567 = sext i32 %45 to i64
  %568 = add i64 %567, 806808595763813521
  %569 = add i64 -5107299470229586228, %567
  %570 = sub i64 %569, -5914108065993399749
  %571 = sext i32 %320 to i64
  %572 = and i64 %571, -2628276414458594878
  %573 = or i64 2628276414458594877, %571
  %574 = sub i64 %573, 2628276414458594877
  %575 = xor i64 %574, 0
  %576 = xor i64 %575, %568
  %577 = xor i64 %576, %572
  %578 = xor i64 %577, %570
  %579 = mul i64 %566, %578
  %580 = trunc i64 %579 to i32
  %581 = select i1 %546, i32 %332, i32 %580
  %582 = zext i32 %581 to i64
  %583 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %582
  %584 = load i8, i8* %583, align 1, !tbaa !10
  %585 = getelementptr inbounds i8, i8* %4, i64 %490
  store i8 %584, i8* %585, align 1, !tbaa !10
  br label %586

586:                                              ; preds = %494, %487, %292
  %587 = fpext float %293 to double
  %588 = fadd double %587, 7.000000e-02
  %589 = fptrunc double %588 to float
  %590 = fpext float %589 to double
  %591 = fcmp olt double %590, 6.280000e+00
  br i1 %591, label %292, label %592, !llvm.loop !18

592:                                              ; preds = %874, %586
  %593 = phi double [ %877, %874 ], [ 0.000000e+00, %586 ]
  %594 = phi float [ %876, %874 ], [ 0.000000e+00, %586 ]
  %595 = call fastcc float @_ZL3cosf(float %594) #9
  %596 = call fastcc float @_ZL3sinf(float %594) #9
  %597 = fadd float %595, %180
  %598 = fmul float %177, %597
  %599 = fmul float %179, %598
  %600 = fmul float %178, %596
  %601 = fsub float %599, %600
  %602 = fmul float %178, %598
  %603 = fmul float %179, %596
  %604 = fadd float %603, %602
  %605 = fadd float %604, 5.000000e+00
  %606 = fdiv float 1.000000e+00, %605
  %607 = fmul float %606, 3.000000e+01
  %608 = fmul float %181, %597
  %609 = fmul float %182, %608
  %610 = fmul float %183, %601
  %611 = fadd float %609, %610
  %612 = fmul float %611, %607
  %613 = fadd float %612, %221
  %614 = fptosi float %613 to i32
  %615 = fmul float %606, 1.500000e+01
  %616 = fmul float %183, %608
  %617 = fmul float %182, %601
  %618 = fsub float %616, %617
  %619 = fmul float %618, %615
  %620 = fadd float %619, %291
  %621 = fptosi float %620 to i32
  %622 = fmul float %177, %595
  %623 = fmul float %179, %622
  %624 = fsub float %600, %623
  %625 = fmul float %182, %624
  %626 = fmul float %178, %622
  %627 = fsub float %625, %626
  %628 = fsub float %627, %603
  %629 = fmul float %181, %595
  %630 = fmul float %183, %629
  %631 = fsub float %628, %630
  %632 = fmul float %631, 8.000000e+00
  %633 = fptosi float %632 to i32
  %634 = icmp slt i32 %621, %5
  %635 = sext i32 %313 to i64
  %636 = add i64 %635, -6011559575551901111
  %637 = sub i64 0, %635
  %638 = add i64 6011559575551901111, %637
  %639 = sub i64 0, %638
  %640 = sext i32 %2 to i64
  %641 = and i64 %640, -8374478220247589218
  %642 = xor i64 %640, -1
  %643 = or i64 8374478220247589217, %642
  %644 = xor i64 %643, -1
  %645 = and i64 %644, -1
  %646 = sext i32 %45 to i64
  %647 = add i64 %646, 3434510243130886121
  %648 = add i64 2124585992051346141, %646
  %649 = sub i64 %648, -1309924251079539980
  %650 = xor i64 %645, %647
  %651 = xor i64 %650, 3758002986062464249
  %652 = xor i64 %651, %636
  %653 = xor i64 %652, %641
  %654 = xor i64 %653, %639
  %655 = xor i64 %654, %649
  %656 = sext i32 %5 to i64
  %657 = and i64 %656, 4017865332549111937
  %658 = xor i64 %656, -1
  %659 = xor i64 4017865332549111937, %658
  %660 = and i64 %659, 4017865332549111937
  %661 = and i64 %46, -1615004862446669658
  %662 = xor i64 %46, -1
  %663 = xor i64 -1615004862446669658, %662
  %664 = and i64 %663, -1615004862446669658
  %665 = sext i32 %332 to i64
  %666 = and i64 %665, -8511675683184776750
  %667 = xor i64 %665, -1
  %668 = xor i64 -8511675683184776750, %667
  %669 = and i64 %668, -8511675683184776750
  %670 = xor i64 %657, %669
  %671 = xor i64 %670, 0
  %672 = xor i64 %671, %664
  %673 = xor i64 %672, %666
  %674 = xor i64 %673, %661
  %675 = xor i64 %674, %660
  %676 = mul i64 %655, %675
  %677 = trunc i64 %676 to i32
  %678 = icmp sgt i32 %621, %677
  %679 = and i1 %634, %678
  %680 = sext i32 %259 to i64
  %681 = or i64 %680, -6115327200923663036
  %682 = xor i64 %680, -1
  %683 = and i64 %682, 4580013317181522988
  %684 = and i64 %680, -4580013317181522989
  %685 = or i64 %683, %684
  %686 = xor i64 -7733094426691468952, %685
  %687 = xor i64 %680, -1
  %688 = or i64 6115327200923663035, %687
  %689 = xor i64 %688, -1
  %690 = and i64 %689, -1
  %691 = or i64 %686, %690
  %692 = sext i32 %332 to i64
  %693 = add i64 %692, -7430987240341662510
  %694 = add i64 -756860673530961597, %692
  %695 = sub i64 %694, 6674126566810700913
  %696 = xor i64 %691, 6663665346843018939
  %697 = xor i64 %696, %695
  %698 = xor i64 %697, %681
  %699 = xor i64 %698, %693
  %700 = sext i32 %290 to i64
  %701 = or i64 %700, 5842517252092748309
  %702 = and i64 5842517252092748309, %700
  %703 = xor i64 5842517252092748309, %700
  %704 = or i64 %702, %703
  %705 = or i64 %46, -6716728566576987478
  %706 = xor i64 %46, -1
  %707 = and i64 %706, -60996196461906585
  %708 = and i64 %46, 60996196461906584
  %709 = or i64 %707, %708
  %710 = xor i64 6768398678350182349, %709
  %711 = xor i64 %46, -1
  %712 = or i64 6716728566576987477, %711
  %713 = xor i64 %712, -1
  %714 = and i64 %713, -1
  %715 = or i64 %710, %714
  %716 = xor i64 %704, 0
  %717 = xor i64 %716, %715
  %718 = xor i64 %717, %701
  %719 = xor i64 %718, %705
  %720 = mul i64 %699, %719
  %721 = trunc i64 %720 to i32
  %722 = icmp sgt i32 %614, %721
  %723 = sext i32 %332 to i64
  %724 = add i64 %723, -4693438746123101522
  %725 = sub i64 0, %723
  %726 = add i64 4693438746123101522, %725
  %727 = sub i64 0, %726
  %728 = add i64 %46, -9216458922558964681
  %729 = add i64 -7791445757099845061, %46
  %730 = add i64 %729, -1425013165459119620
  %731 = xor i64 %728, %730
  %732 = xor i64 %731, %724
  %733 = xor i64 %732, -5406089191591184215
  %734 = xor i64 %733, %727
  %735 = and i64 %140, 4319799458502766822
  %736 = or i64 -4319799458502766823, %140
  %737 = sub i64 %736, -4319799458502766823
  %738 = sext i32 %320 to i64
  %739 = or i64 %738, 834735920717929266
  %740 = xor i64 %738, -1
  %741 = and i64 834735920717929266, %740
  %742 = add i64 %741, %738
  %743 = xor i64 %737, %735
  %744 = xor i64 %743, %742
  %745 = xor i64 %744, %739
  %746 = xor i64 %745, 0
  %747 = mul i64 %734, %746
  %748 = trunc i64 %747 to i1
  %749 = select i1 %679, i1 %722, i1 %748
  %750 = icmp slt i32 %614, %6
  %751 = add i64 %140, 8267340709432521443
  %752 = and i64 8267340709432521443, %140
  %753 = or i64 8267340709432521443, %140
  %754 = add i64 %752, %753
  %755 = sext i32 %313 to i64
  %756 = or i64 %755, -1739912640347544011
  %757 = xor i64 %755, -1
  %758 = and i64 -1739912640347544011, %757
  %759 = add i64 %758, %755
  %760 = xor i64 %754, %756
  %761 = xor i64 %760, %751
  %762 = xor i64 %761, 8245128317557182655
  %763 = xor i64 %762, %759
  %764 = sext i32 %313 to i64
  %765 = add i64 %764, -1644034431365725370
  %766 = xor i64 -1644034431365725370, %764
  %767 = and i64 -1644034431365725370, %764
  %768 = mul i64 2, %767
  %769 = add i64 %766, %768
  %770 = sext i32 %290 to i64
  %771 = add i64 %770, -3235215292215698016
  %772 = and i64 -3235215292215698016, %770
  %773 = or i64 -3235215292215698016, %770
  %774 = add i64 %772, %773
  %775 = xor i64 %769, 0
  %776 = xor i64 %775, %765
  %777 = xor i64 %776, %774
  %778 = xor i64 %777, %771
  %779 = mul i64 %763, %778
  %780 = trunc i64 %779 to i1
  %781 = select i1 %749, i1 %750, i1 %780
  br i1 %781, label %782, label %874

782:                                              ; preds = %592
  %783 = mul nsw i32 %621, %6
  %784 = add nsw i32 %783, %614
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds float, float* %3, i64 %785
  %787 = load float, float* %786, align 4, !tbaa !13
  %788 = fcmp ogt float %606, %787
  br i1 %788, label %789, label %874

789:                                              ; preds = %782
  store float %606, float* %786, align 4, !tbaa !13
  %790 = sext i32 %332 to i64
  %791 = and i64 %790, 8397310579080306983
  %792 = xor i64 %790, -1
  %793 = xor i64 8397310579080306983, %792
  %794 = and i64 %793, 8397310579080306983
  %795 = sext i32 %2 to i64
  %796 = or i64 %795, -846860793954058087
  %797 = xor i64 %795, -1
  %798 = and i64 -846860793954058087, %797
  %799 = add i64 %798, %795
  %800 = xor i64 %799, %796
  %801 = xor i64 %800, %794
  %802 = xor i64 %801, %791
  %803 = xor i64 %802, 6943041407189223199
  %804 = sext i32 %290 to i64
  %805 = add i64 %804, -7249707525781182929
  %806 = sub i64 0, %804
  %807 = sub i64 -7249707525781182929, %806
  %808 = and i64 %785, 1935134765772772722
  %809 = xor i64 %785, -1
  %810 = xor i64 1935134765772772722, %809
  %811 = and i64 %810, 1935134765772772722
  %812 = sext i32 %621 to i64
  %813 = and i64 %812, 1434753629502166102
  %814 = xor i64 %812, -1
  %815 = xor i64 1434753629502166102, %814
  %816 = and i64 %815, 1434753629502166102
  %817 = xor i64 %811, %816
  %818 = xor i64 %817, 0
  %819 = xor i64 %818, %807
  %820 = xor i64 %819, %808
  %821 = xor i64 %820, %813
  %822 = xor i64 %821, %805
  %823 = mul i64 %803, %822
  %824 = trunc i64 %823 to i32
  %825 = icmp sgt i32 %633, %824
  %826 = sext i32 %332 to i64
  %827 = or i64 %826, -5910327756261098811
  %828 = xor i64 %826, -1
  %829 = and i64 %828, 8366405999481454952
  %830 = and i64 %826, -8366405999481454953
  %831 = or i64 %829, %830
  %832 = xor i64 -2746846309995054163, %831
  %833 = xor i64 %826, -1
  %834 = or i64 5910327756261098810, %833
  %835 = xor i64 %834, -1
  %836 = and i64 %835, -1
  %837 = or i64 %832, %836
  %838 = and i64 %140, 6205955193370736473
  %839 = xor i64 %140, -1
  %840 = or i64 -6205955193370736474, %839
  %841 = xor i64 %840, -1
  %842 = and i64 %841, -1
  %843 = xor i64 3222851792476085005, %842
  %844 = xor i64 %843, %838
  %845 = xor i64 %844, %837
  %846 = xor i64 %845, %827
  %847 = sext i32 %614 to i64
  %848 = or i64 %847, -7578223328248104198
  %849 = xor i64 %847, -1
  %850 = and i64 -7578223328248104198, %849
  %851 = add i64 %850, %847
  %852 = sext i32 %633 to i64
  %853 = add i64 %852, 6060004683719496443
  %854 = xor i64 6060004683719496443, %852
  %855 = and i64 6060004683719496443, %852
  %856 = mul i64 2, %855
  %857 = add i64 %854, %856
  %858 = and i64 %46, 7931656786686669214
  %859 = or i64 -7931656786686669215, %46
  %860 = sub i64 %859, -7931656786686669215
  %861 = xor i64 %858, 0
  %862 = xor i64 %861, %860
  %863 = xor i64 %862, %848
  %864 = xor i64 %863, %857
  %865 = xor i64 %864, %851
  %866 = xor i64 %865, %853
  %867 = mul i64 %846, %866
  %868 = trunc i64 %867 to i32
  %869 = select i1 %825, i32 %633, i32 %868
  %870 = zext i32 %869 to i64
  %871 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %870
  %872 = load i8, i8* %871, align 1, !tbaa !10
  %873 = getelementptr inbounds i8, i8* %4, i64 %785
  store i8 %872, i8* %873, align 1, !tbaa !10
  br label %874

874:                                              ; preds = %789, %782, %592
  %875 = fadd double %593, 7.000000e-02
  %876 = fptrunc double %875 to float
  %877 = fpext float %876 to double
  %878 = fcmp olt double %877, 6.280000e+00
  br i1 %878, label %592, label %883, !llvm.loop !19

879:                                              ; preds = %1181
  %880 = fcmp une float %178, 0.000000e+00
  %881 = fmul float %178, 2.000000e+00
  %882 = select i1 %880, float %881, float %178
  br label %1187

883:                                              ; preds = %1181, %874
  %884 = phi double [ %1184, %1181 ], [ 0.000000e+00, %874 ]
  %885 = phi float [ %1183, %1181 ], [ 0.000000e+00, %874 ]
  %886 = call fastcc float @_ZL3cosf(float %885) #9
  %887 = call fastcc float @_ZL3sinf(float %885) #9
  %888 = fadd float %886, %180
  %889 = fmul float %177, %888
  %890 = fmul float %179, %889
  %891 = fmul float %178, %887
  %892 = fsub float %890, %891
  %893 = fmul float %178, %889
  %894 = fmul float %179, %887
  %895 = fadd float %894, %893
  %896 = fadd float %895, 5.000000e+00
  %897 = fdiv float 1.000000e+00, %896
  %898 = fmul float %897, 3.000000e+01
  %899 = fmul float %181, %888
  %900 = fmul float %182, %899
  %901 = fmul float %183, %892
  %902 = fadd float %900, %901
  %903 = fmul float %902, %898
  %904 = fadd float %903, %221
  %905 = fptosi float %904 to i32
  %906 = fmul float %897, 1.500000e+01
  %907 = fmul float %183, %899
  %908 = fmul float %182, %892
  %909 = fsub float %907, %908
  %910 = fmul float %909, %906
  %911 = fadd float %910, %291
  %912 = fptosi float %911 to i32
  %913 = fmul float %177, %886
  %914 = fmul float %179, %913
  %915 = fsub float %891, %914
  %916 = fmul float %182, %915
  %917 = fmul float %178, %913
  %918 = fsub float %916, %917
  %919 = fsub float %918, %894
  %920 = fmul float %181, %886
  %921 = fmul float %183, %920
  %922 = fsub float %919, %921
  %923 = fmul float %922, 8.000000e+00
  %924 = fptosi float %923 to i32
  %925 = icmp slt i32 %912, %5
  %926 = sext i32 %633 to i64
  %927 = and i64 %926, 483203031798127672
  %928 = or i64 -483203031798127673, %926
  %929 = sub i64 %928, -483203031798127673
  %930 = sext i32 %621 to i64
  %931 = or i64 %930, 4671691938544046063
  %932 = and i64 4671691938544046063, %930
  %933 = xor i64 4671691938544046063, %930
  %934 = or i64 %932, %933
  %935 = xor i64 %929, 5605046924379320647
  %936 = xor i64 %935, %927
  %937 = xor i64 %936, %931
  %938 = xor i64 %937, %934
  %939 = or i64 %140, 5956729770663499052
  %940 = xor i64 %140, -1
  %941 = and i64 %940, 5082783396962841818
  %942 = and i64 %140, -5082783396962841819
  %943 = or i64 %941, %942
  %944 = xor i64 1451041692795625974, %943
  %945 = xor i64 %140, -1
  %946 = or i64 -5956729770663499053, %945
  %947 = xor i64 %946, -1
  %948 = and i64 %947, -1
  %949 = or i64 %944, %948
  %950 = sext i32 %332 to i64
  %951 = or i64 %950, -1134508500276101008
  %952 = xor i64 %950, -1
  %953 = and i64 -1134508500276101008, %952
  %954 = add i64 %953, %950
  %955 = xor i64 %939, %951
  %956 = xor i64 %955, %949
  %957 = xor i64 %956, 0
  %958 = xor i64 %957, %954
  %959 = mul i64 %938, %958
  %960 = trunc i64 %959 to i32
  %961 = icmp sgt i32 %912, %960
  %962 = and i1 %925, %961
  %963 = sext i32 %320 to i64
  %964 = or i64 %963, -5431274177564931985
  %965 = xor i64 %963, -1
  %966 = and i64 -5431274177564931985, %965
  %967 = add i64 %966, %963
  %968 = sext i32 %313 to i64
  %969 = or i64 %968, -3056470032212205613
  %970 = xor i64 %968, -1
  %971 = and i64 %970, -7038471844960696726
  %972 = and i64 %968, 7038471844960696725
  %973 = or i64 %971, %972
  %974 = xor i64 5460455767152449977, %973
  %975 = xor i64 %968, -1
  %976 = or i64 3056470032212205612, %975
  %977 = xor i64 %976, -1
  %978 = and i64 %977, -1
  %979 = or i64 %974, %978
  %980 = sext i32 %2 to i64
  %981 = or i64 %980, -1381465313875739273
  %982 = xor i64 %980, -1
  %983 = and i64 -1381465313875739273, %982
  %984 = add i64 %983, %980
  %985 = xor i64 %981, %979
  %986 = xor i64 %985, 5978140399945352877
  %987 = xor i64 %986, %969
  %988 = xor i64 %987, %964
  %989 = xor i64 %988, %967
  %990 = xor i64 %989, %984
  %991 = sext i32 %220 to i64
  %992 = and i64 %991, 4216064871876865620
  %993 = xor i64 %991, -1
  %994 = xor i64 4216064871876865620, %993
  %995 = and i64 %994, 4216064871876865620
  %996 = sext i32 %220 to i64
  %997 = or i64 %996, 5991578374717942558
  %998 = xor i64 %996, -1
  %999 = and i64 %998, 909557544178231782
  %1000 = and i64 %996, -909557544178231783
  %1001 = or i64 %999, %1000
  %1002 = xor i64 6897607032551801592, %1001
  %1003 = xor i64 %996, -1
  %1004 = or i64 -5991578374717942559, %1003
  %1005 = xor i64 %1004, -1
  %1006 = and i64 %1005, -1
  %1007 = or i64 %1002, %1006
  %1008 = xor i64 %995, %992
  %1009 = xor i64 %1008, %1007
  %1010 = xor i64 %1009, 0
  %1011 = xor i64 %1010, %997
  %1012 = mul i64 %990, %1011
  %1013 = trunc i64 %1012 to i32
  %1014 = icmp sgt i32 %905, %1013
  %1015 = sext i32 %290 to i64
  %1016 = and i64 %1015, -266940332250614081
  %1017 = or i64 266940332250614080, %1015
  %1018 = sub i64 %1017, 266940332250614080
  %1019 = sext i32 %2 to i64
  %1020 = add i64 %1019, -4491944322255044373
  %1021 = xor i64 -4491944322255044373, %1019
  %1022 = and i64 -4491944322255044373, %1019
  %1023 = mul i64 2, %1022
  %1024 = add i64 %1021, %1023
  %1025 = xor i64 %1020, %1018
  %1026 = xor i64 %1025, %1024
  %1027 = xor i64 %1026, 5105384095126240485
  %1028 = xor i64 %1027, %1016
  %1029 = sext i32 %290 to i64
  %1030 = add i64 %1029, -5467598533176096815
  %1031 = sub i64 0, %1029
  %1032 = sub i64 -5467598533176096815, %1031
  %1033 = sext i32 %614 to i64
  %1034 = or i64 %1033, -8477965825984918472
  %1035 = xor i64 %1033, -1
  %1036 = and i64 -8477965825984918472, %1035
  %1037 = add i64 %1036, %1033
  %1038 = xor i64 %1034, 0
  %1039 = xor i64 %1038, %1032
  %1040 = xor i64 %1039, %1030
  %1041 = xor i64 %1040, %1037
  %1042 = mul i64 %1028, %1041
  %1043 = trunc i64 %1042 to i1
  %1044 = select i1 %962, i1 %1014, i1 %1043
  %1045 = icmp slt i32 %905, %6
  %1046 = sext i32 %320 to i64
  %1047 = and i64 %1046, 3090880801016677192
  %1048 = xor i64 %1046, -1
  %1049 = or i64 -3090880801016677193, %1048
  %1050 = xor i64 %1049, -1
  %1051 = and i64 %1050, -1
  %1052 = sext i32 %290 to i64
  %1053 = and i64 %1052, 25624754779993239
  %1054 = or i64 -25624754779993240, %1052
  %1055 = sub i64 %1054, -25624754779993240
  %1056 = sext i32 %332 to i64
  %1057 = or i64 %1056, -6373847010841383406
  %1058 = xor i64 %1056, -1
  %1059 = and i64 %1058, -3501759307107465509
  %1060 = and i64 %1056, 3501759307107465508
  %1061 = or i64 %1059, %1060
  %1062 = xor i64 7560641760102983881, %1061
  %1063 = xor i64 %1056, -1
  %1064 = or i64 6373847010841383405, %1063
  %1065 = xor i64 %1064, -1
  %1066 = and i64 %1065, -1
  %1067 = or i64 %1062, %1066
  %1068 = xor i64 588907520465022623, %1047
  %1069 = xor i64 %1068, %1051
  %1070 = xor i64 %1069, %1067
  %1071 = xor i64 %1070, %1057
  %1072 = xor i64 %1071, %1053
  %1073 = xor i64 %1072, %1055
  %1074 = sext i32 %45 to i64
  %1075 = add i64 %1074, 5989911949964334200
  %1076 = sub i64 0, %1074
  %1077 = sub i64 5989911949964334200, %1076
  %1078 = sext i32 %614 to i64
  %1079 = or i64 %1078, 3088129952065149506
  %1080 = xor i64 %1078, -1
  %1081 = and i64 3088129952065149506, %1080
  %1082 = add i64 %1081, %1078
  %1083 = sext i32 %614 to i64
  %1084 = add i64 %1083, -1406342014533104772
  %1085 = add i64 -2140151400709119618, %1083
  %1086 = sub i64 %1085, -733809386176014846
  %1087 = xor i64 %1086, %1077
  %1088 = xor i64 %1087, %1079
  %1089 = xor i64 %1088, %1084
  %1090 = xor i64 %1089, %1082
  %1091 = xor i64 %1090, 0
  %1092 = xor i64 %1091, %1075
  %1093 = mul i64 %1073, %1092
  %1094 = trunc i64 %1093 to i1
  %1095 = select i1 %1044, i1 %1045, i1 %1094
  br i1 %1095, label %1096, label %1181

1096:                                             ; preds = %883
  %1097 = mul nsw i32 %912, %6
  %1098 = add nsw i32 %1097, %905
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds float, float* %3, i64 %1099
  %1101 = load float, float* %1100, align 4, !tbaa !13
  %1102 = fcmp ogt float %897, %1101
  br i1 %1102, label %1103, label %1181

1103:                                             ; preds = %1096
  store float %897, float* %1100, align 4, !tbaa !13
  %1104 = sext i32 %1098 to i64
  %1105 = or i64 %1104, -1679972480497954817
  %1106 = xor i64 %1104, -1
  %1107 = and i64 -1679972480497954817, %1106
  %1108 = add i64 %1107, %1104
  %1109 = add i64 %1099, -5909644343739281022
  %1110 = sub i64 0, %1099
  %1111 = add i64 5909644343739281022, %1110
  %1112 = sub i64 0, %1111
  %1113 = xor i64 %1108, %1105
  %1114 = xor i64 %1113, %1112
  %1115 = xor i64 %1114, 6868396564149588523
  %1116 = xor i64 %1115, %1109
  %1117 = sext i32 %220 to i64
  %1118 = add i64 %1117, 4868435186573651291
  %1119 = xor i64 4868435186573651291, %1117
  %1120 = and i64 4868435186573651291, %1117
  %1121 = mul i64 2, %1120
  %1122 = add i64 %1119, %1121
  %1123 = sext i32 %924 to i64
  %1124 = or i64 %1123, -5254485536603831382
  %1125 = xor i64 %1123, -1
  %1126 = and i64 %1125, -6396114295609719917
  %1127 = and i64 %1123, 6396114295609719916
  %1128 = or i64 %1126, %1127
  %1129 = xor i64 1164249574704906297, %1128
  %1130 = xor i64 %1123, -1
  %1131 = or i64 5254485536603831381, %1130
  %1132 = xor i64 %1131, -1
  %1133 = and i64 %1132, -1
  %1134 = or i64 %1129, %1133
  %1135 = xor i64 %1118, %1124
  %1136 = xor i64 %1135, 0
  %1137 = xor i64 %1136, %1122
  %1138 = xor i64 %1137, %1134
  %1139 = mul i64 %1116, %1138
  %1140 = trunc i64 %1139 to i32
  %1141 = icmp sgt i32 %924, %1140
  %1142 = or i64 %140, 1785901721024684877
  %1143 = xor i64 %140, -1
  %1144 = and i64 %1143, -583165447302568361
  %1145 = and i64 %140, 583165447302568360
  %1146 = or i64 %1144, %1145
  %1147 = xor i64 -1215723157544975078, %1146
  %1148 = xor i64 %140, -1
  %1149 = or i64 -1785901721024684878, %1148
  %1150 = xor i64 %1149, -1
  %1151 = and i64 %1150, -1
  %1152 = or i64 %1147, %1151
  %1153 = add i64 %46, 521658419587527803
  %1154 = add i64 5669387558521560424, %46
  %1155 = add i64 %1154, -5147729138934032621
  %1156 = xor i64 %1153, %1155
  %1157 = xor i64 %1156, -3407457561525635151
  %1158 = xor i64 %1157, %1142
  %1159 = xor i64 %1158, %1152
  %1160 = sext i32 %45 to i64
  %1161 = or i64 %1160, -8382650814111418133
  %1162 = xor i64 %1160, -1
  %1163 = and i64 -8382650814111418133, %1162
  %1164 = add i64 %1163, %1160
  %1165 = sext i32 %912 to i64
  %1166 = or i64 %1165, 8927174270626825140
  %1167 = and i64 8927174270626825140, %1165
  %1168 = xor i64 8927174270626825140, %1165
  %1169 = or i64 %1167, %1168
  %1170 = xor i64 0, %1166
  %1171 = xor i64 %1170, %1161
  %1172 = xor i64 %1171, %1169
  %1173 = xor i64 %1172, %1164
  %1174 = mul i64 %1159, %1173
  %1175 = trunc i64 %1174 to i32
  %1176 = select i1 %1141, i32 %924, i32 %1175
  %1177 = zext i32 %1176 to i64
  %1178 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %1177
  %1179 = load i8, i8* %1178, align 1, !tbaa !10
  %1180 = getelementptr inbounds i8, i8* %4, i64 %1099
  store i8 %1179, i8* %1180, align 1, !tbaa !10
  br label %1181

1181:                                             ; preds = %1103, %1096, %883
  %1182 = fadd double %884, 7.000000e-02
  %1183 = fptrunc double %1182 to float
  %1184 = fpext float %1183 to double
  %1185 = fcmp olt double %1184, 6.280000e+00
  br i1 %1185, label %883, label %879, !llvm.loop !20

1186:                                             ; preds = %1577
  ret void

1187:                                             ; preds = %1577, %879
  %1188 = phi double [ 0.000000e+00, %879 ], [ %1580, %1577 ]
  %1189 = phi i32 [ 0, %879 ], [ %1229, %1577 ]
  %1190 = phi float [ 0.000000e+00, %879 ], [ %1579, %1577 ]
  %1191 = sext i32 %905 to i64
  %1192 = and i64 %1191, 423988269525284515
  %1193 = xor i64 %1191, -1
  %1194 = or i64 -423988269525284516, %1193
  %1195 = xor i64 %1194, -1
  %1196 = and i64 %1195, -1
  %1197 = sext i32 %313 to i64
  %1198 = add i64 %1197, 2214135823215304533
  %1199 = and i64 2214135823215304533, %1197
  %1200 = or i64 2214135823215304533, %1197
  %1201 = add i64 %1199, %1200
  %1202 = sext i32 %313 to i64
  %1203 = and i64 %1202, 4273517130696874663
  %1204 = xor i64 %1202, -1
  %1205 = or i64 -4273517130696874664, %1204
  %1206 = xor i64 %1205, -1
  %1207 = and i64 %1206, -1
  %1208 = xor i64 %1198, %1196
  %1209 = xor i64 %1208, %1192
  %1210 = xor i64 %1209, 3816948417579882183
  %1211 = xor i64 %1210, %1207
  %1212 = xor i64 %1211, %1201
  %1213 = xor i64 %1212, %1203
  %1214 = sext i32 %924 to i64
  %1215 = add i64 %1214, 2928921699025862153
  %1216 = and i64 2928921699025862153, %1214
  %1217 = or i64 2928921699025862153, %1214
  %1218 = add i64 %1216, %1217
  %1219 = sext i32 %320 to i64
  %1220 = add i64 %1219, -8412800851533776301
  %1221 = add i64 320203621745364609, %1219
  %1222 = add i64 %1221, -8733004473279140910
  %1223 = xor i64 %1222, %1218
  %1224 = xor i64 %1223, %1220
  %1225 = xor i64 %1224, %1215
  %1226 = xor i64 %1225, -2108525150345803017
  %1227 = mul i64 %1213, %1226
  %1228 = trunc i64 %1227 to i32
  %1229 = add nuw nsw i32 %1189, %1228
  %1230 = sitofp i32 %1189 to float
  %1231 = fadd float %177, %1230
  %1232 = call fastcc float @_ZL3cosf(float %1190) #9
  %1233 = fcmp une float %1231, 0.000000e+00
  %1234 = fmul float %1231, 2.000000e+00
  %1235 = fmul float %1232, 2.000000e+00
  %1236 = select i1 %1233, float %1232, float %1235
  %1237 = select i1 %1233, float %1234, float %1231
  %1238 = call fastcc float @_ZL3sinf(float %1190) #9
  %1239 = fmul float %1238, 2.000000e+00
  %1240 = select i1 %880, float %1238, float %1239
  %1241 = fadd float %1236, %180
  %1242 = fmul float %1237, %1241
  %1243 = fmul float %179, %1242
  %1244 = fmul float %882, %1240
  %1245 = fsub float %1243, %1244
  %1246 = fcmp une float %1241, 0.000000e+00
  %1247 = fmul float %1245, 2.000000e+00
  %1248 = fmul float %1241, 2.000000e+00
  %1249 = select i1 %1246, float %1241, float %1248
  %1250 = select i1 %1246, float %1247, float %1245
  %1251 = fmul float %1237, %1249
  %1252 = fmul float %882, %1251
  %1253 = fmul float %179, %1240
  %1254 = fadd float %1253, %1252
  %1255 = fadd float %1254, 5.000000e+00
  %1256 = fdiv float 1.000000e+00, %1255
  %1257 = fmul float %1256, 3.000000e+01
  %1258 = fmul float %181, %1249
  %1259 = fmul float %182, %1258
  %1260 = fmul float %183, %1250
  %1261 = fadd float %1259, %1260
  %1262 = fmul float %1261, %1257
  %1263 = fadd float %1262, %221
  %1264 = fptosi float %1263 to i32
  %1265 = fmul float %1256, 1.500000e+01
  %1266 = fmul float %183, %1258
  %1267 = fmul float %182, %1250
  %1268 = fsub float %1266, %1267
  %1269 = fmul float %1268, %1265
  %1270 = fadd float %1269, %291
  %1271 = fptosi float %1270 to i32
  %1272 = fmul float %1237, %1236
  %1273 = fmul float %179, %1272
  %1274 = fsub float %1244, %1273
  %1275 = fmul float %182, %1274
  %1276 = fmul float %882, %1272
  %1277 = fsub float %1275, %1276
  %1278 = fsub float %1277, %1253
  %1279 = fmul float %181, %1236
  %1280 = fmul float %183, %1279
  %1281 = fsub float %1278, %1280
  %1282 = fmul float %1281, 8.000000e+00
  %1283 = fptosi float %1282 to i32
  %1284 = icmp slt i32 %1271, %5
  %1285 = sext i32 %614 to i64
  %1286 = and i64 %1285, 8135443051946758323
  %1287 = xor i64 %1285, -1
  %1288 = xor i64 8135443051946758323, %1287
  %1289 = and i64 %1288, 8135443051946758323
  %1290 = sext i32 %5 to i64
  %1291 = add i64 %1290, -7104499452495382139
  %1292 = sub i64 0, %1290
  %1293 = sub i64 -7104499452495382139, %1292
  %1294 = xor i64 %1291, %1293
  %1295 = xor i64 %1294, %1289
  %1296 = xor i64 %1295, %1286
  %1297 = xor i64 %1296, -6508869406999759631
  %1298 = sext i32 %45 to i64
  %1299 = or i64 %1298, -6922772296436181073
  %1300 = and i64 -6922772296436181073, %1298
  %1301 = xor i64 -6922772296436181073, %1298
  %1302 = or i64 %1300, %1301
  %1303 = sext i32 %621 to i64
  %1304 = and i64 %1303, -2955777274074273937
  %1305 = xor i64 %1303, -1
  %1306 = xor i64 -2955777274074273937, %1305
  %1307 = and i64 %1306, -2955777274074273937
  %1308 = sext i32 %924 to i64
  %1309 = or i64 %1308, 7484080964292454877
  %1310 = and i64 7484080964292454877, %1308
  %1311 = xor i64 7484080964292454877, %1308
  %1312 = or i64 %1310, %1311
  %1313 = xor i64 %1312, 0
  %1314 = xor i64 %1313, %1307
  %1315 = xor i64 %1314, %1304
  %1316 = xor i64 %1315, %1302
  %1317 = xor i64 %1316, %1299
  %1318 = xor i64 %1317, %1309
  %1319 = mul i64 %1297, %1318
  %1320 = trunc i64 %1319 to i32
  %1321 = icmp sgt i32 %1271, %1320
  %1322 = and i1 %1284, %1321
  %1323 = sext i32 %290 to i64
  %1324 = add i64 %1323, 6210146463134573774
  %1325 = sub i64 0, %1323
  %1326 = add i64 -6210146463134573774, %1325
  %1327 = sub i64 0, %1326
  %1328 = sext i32 %259 to i64
  %1329 = add i64 %1328, 4663624935917660541
  %1330 = add i64 -6574584839050155735, %1328
  %1331 = add i64 %1330, -7208534298741735340
  %1332 = sext i32 %6 to i64
  %1333 = or i64 %1332, 6388113751212276361
  %1334 = xor i64 %1332, -1
  %1335 = and i64 %1334, 2572152702359920953
  %1336 = and i64 %1332, -2572152702359920954
  %1337 = or i64 %1335, %1336
  %1338 = xor i64 8869061961765280688, %1337
  %1339 = xor i64 %1332, -1
  %1340 = or i64 -6388113751212276362, %1339
  %1341 = xor i64 %1340, -1
  %1342 = and i64 %1341, -1
  %1343 = or i64 %1338, %1342
  %1344 = xor i64 %1343, %1333
  %1345 = xor i64 %1344, %1329
  %1346 = xor i64 %1345, 625074552325969301
  %1347 = xor i64 %1346, %1324
  %1348 = xor i64 %1347, %1331
  %1349 = xor i64 %1348, %1327
  %1350 = sext i32 %2 to i64
  %1351 = and i64 %1350, 2795184103656784375
  %1352 = xor i64 %1350, -1
  %1353 = xor i64 2795184103656784375, %1352
  %1354 = and i64 %1353, 2795184103656784375
  %1355 = sext i32 %45 to i64
  %1356 = or i64 %1355, -707246441212943122
  %1357 = and i64 -707246441212943122, %1355
  %1358 = xor i64 -707246441212943122, %1355
  %1359 = or i64 %1357, %1358
  %1360 = xor i64 %1359, %1351
  %1361 = xor i64 %1360, %1354
  %1362 = xor i64 %1361, 0
  %1363 = xor i64 %1362, %1356
  %1364 = mul i64 %1349, %1363
  %1365 = trunc i64 %1364 to i32
  %1366 = icmp sgt i32 %1264, %1365
  %1367 = and i64 %140, 4845244747339191184
  %1368 = xor i64 %140, -1
  %1369 = xor i64 4845244747339191184, %1368
  %1370 = and i64 %1369, 4845244747339191184
  %1371 = sext i32 %259 to i64
  %1372 = or i64 %1371, -6501735652619236666
  %1373 = xor i64 %1371, -1
  %1374 = and i64 %1373, 1122781255634728723
  %1375 = and i64 %1371, -1122781255634728724
  %1376 = or i64 %1374, %1375
  %1377 = xor i64 -6173913622974005803, %1376
  %1378 = xor i64 %1371, -1
  %1379 = or i64 6501735652619236665, %1378
  %1380 = xor i64 %1379, -1
  %1381 = and i64 %1380, -1
  %1382 = or i64 %1377, %1381
  %1383 = or i64 %140, -4819851157546501175
  %1384 = xor i64 %140, -1
  %1385 = and i64 %1384, -824882317940245208
  %1386 = and i64 %140, 824882317940245207
  %1387 = or i64 %1385, %1386
  %1388 = xor i64 5301052382816552673, %1387
  %1389 = xor i64 %140, -1
  %1390 = or i64 4819851157546501174, %1389
  %1391 = xor i64 %1390, -1
  %1392 = and i64 %1391, -1
  %1393 = or i64 %1388, %1392
  %1394 = xor i64 %1367, %1393
  %1395 = xor i64 %1394, %1382
  %1396 = xor i64 %1395, %1383
  %1397 = xor i64 %1396, %1370
  %1398 = xor i64 %1397, %1372
  %1399 = xor i64 %1398, -8102341143703574381
  %1400 = sext i32 %633 to i64
  %1401 = or i64 %1400, 2761238785499447956
  %1402 = xor i64 %1400, -1
  %1403 = and i64 2761238785499447956, %1402
  %1404 = add i64 %1403, %1400
  %1405 = and i64 %140, -6925262692232558113
  %1406 = xor i64 %140, -1
  %1407 = or i64 6925262692232558112, %1406
  %1408 = xor i64 %1407, -1
  %1409 = and i64 %1408, -1
  %1410 = sext i32 %6 to i64
  %1411 = or i64 %1410, -4487693520864854679
  %1412 = xor i64 %1410, -1
  %1413 = and i64 %1412, 1478922335804166593
  %1414 = and i64 %1410, -1478922335804166594
  %1415 = or i64 %1413, %1414
  %1416 = xor i64 -3080828822049215320, %1415
  %1417 = xor i64 %1410, -1
  %1418 = or i64 4487693520864854678, %1417
  %1419 = xor i64 %1418, -1
  %1420 = and i64 %1419, -1
  %1421 = or i64 %1416, %1420
  %1422 = xor i64 %1409, %1405
  %1423 = xor i64 %1422, %1411
  %1424 = xor i64 %1423, 0
  %1425 = xor i64 %1424, %1401
  %1426 = xor i64 %1425, %1404
  %1427 = xor i64 %1426, %1421
  %1428 = mul i64 %1399, %1427
  %1429 = trunc i64 %1428 to i1
  %1430 = select i1 %1322, i1 %1366, i1 %1429
  %1431 = icmp slt i32 %1264, %6
  %1432 = sext i32 %912 to i64
  %1433 = or i64 %1432, 6881846729772698592
  %1434 = xor i64 %1432, -1
  %1435 = and i64 %1434, -2935828261716046163
  %1436 = and i64 %1432, 2935828261716046162
  %1437 = or i64 %1435, %1436
  %1438 = xor i64 -8592607626299849395, %1437
  %1439 = xor i64 %1432, -1
  %1440 = or i64 -6881846729772698593, %1439
  %1441 = xor i64 %1440, -1
  %1442 = and i64 %1441, -1
  %1443 = or i64 %1438, %1442
  %1444 = sext i32 %905 to i64
  %1445 = add i64 %1444, -1852003005533281720
  %1446 = add i64 2877810788286290604, %1444
  %1447 = add i64 %1446, -4729813793819572324
  %1448 = xor i64 5663599475042811715, %1447
  %1449 = xor i64 %1448, %1445
  %1450 = xor i64 %1449, %1433
  %1451 = xor i64 %1450, %1443
  %1452 = sext i32 %924 to i64
  %1453 = add i64 %1452, 5137999854692141898
  %1454 = add i64 3340991224241521140, %1452
  %1455 = sub i64 %1454, -1797008630450620758
  %1456 = or i64 %46, -9063222144211666337
  %1457 = xor i64 %46, -1
  %1458 = and i64 %1457, 598155565850387605
  %1459 = and i64 %46, -598155565850387606
  %1460 = or i64 %1458, %1459
  %1461 = xor i64 -8469612646786638134, %1460
  %1462 = xor i64 %46, -1
  %1463 = or i64 9063222144211666336, %1462
  %1464 = xor i64 %1463, -1
  %1465 = and i64 %1464, -1
  %1466 = or i64 %1461, %1465
  %1467 = xor i64 %1466, %1456
  %1468 = xor i64 %1467, %1455
  %1469 = xor i64 %1468, %1453
  %1470 = xor i64 %1469, 0
  %1471 = mul i64 %1451, %1470
  %1472 = trunc i64 %1471 to i1
  %1473 = select i1 %1430, i1 %1431, i1 %1472
  br i1 %1473, label %1474, label %1577

1474:                                             ; preds = %1187
  %1475 = mul nsw i32 %1271, %6
  %1476 = add nsw i32 %1475, %1264
  %1477 = sext i32 %1476 to i64
  %1478 = getelementptr inbounds float, float* %3, i64 %1477
  %1479 = load float, float* %1478, align 4, !tbaa !13
  %1480 = fcmp ogt float %1256, %1479
  br i1 %1480, label %1481, label %1577

1481:                                             ; preds = %1474
  store float %1256, float* %1478, align 4, !tbaa !13
  %1482 = sext i32 %905 to i64
  %1483 = add i64 %1482, -5945801145699548327
  %1484 = sub i64 0, %1482
  %1485 = add i64 5945801145699548327, %1484
  %1486 = sub i64 0, %1485
  %1487 = and i64 %46, 5526228650984057288
  %1488 = xor i64 %46, -1
  %1489 = or i64 -5526228650984057289, %1488
  %1490 = xor i64 %1489, -1
  %1491 = and i64 %1490, -1
  %1492 = sext i32 %1189 to i64
  %1493 = add i64 %1492, -1338721603142655160
  %1494 = xor i64 -1338721603142655160, %1492
  %1495 = and i64 -1338721603142655160, %1492
  %1496 = mul i64 2, %1495
  %1497 = add i64 %1494, %1496
  %1498 = xor i64 %1493, %1486
  %1499 = xor i64 %1498, %1497
  %1500 = xor i64 %1499, %1483
  %1501 = xor i64 %1500, -8903303797145840961
  %1502 = xor i64 %1501, %1491
  %1503 = xor i64 %1502, %1487
  %1504 = sext i32 %259 to i64
  %1505 = or i64 %1504, -4691514428706856879
  %1506 = xor i64 %1504, -1
  %1507 = and i64 %1506, 4421533124905555019
  %1508 = and i64 %1504, -4421533124905555020
  %1509 = or i64 %1507, %1508
  %1510 = xor i64 -8955385281678101478, %1509
  %1511 = xor i64 %1504, -1
  %1512 = or i64 4691514428706856878, %1511
  %1513 = xor i64 %1512, -1
  %1514 = and i64 %1513, -1
  %1515 = or i64 %1510, %1514
  %1516 = sext i32 %924 to i64
  %1517 = or i64 %1516, 1915073403865947352
  %1518 = xor i64 %1516, -1
  %1519 = and i64 1915073403865947352, %1518
  %1520 = add i64 %1519, %1516
  %1521 = xor i64 0, %1505
  %1522 = xor i64 %1521, %1515
  %1523 = xor i64 %1522, %1517
  %1524 = xor i64 %1523, %1520
  %1525 = mul i64 %1503, %1524
  %1526 = trunc i64 %1525 to i32
  %1527 = icmp sgt i32 %1283, %1526
  %1528 = sext i32 %1229 to i64
  %1529 = or i64 %1528, -8357184340459494205
  %1530 = xor i64 %1528, -1
  %1531 = and i64 %1530, 4462805356954378105
  %1532 = and i64 %1528, -4462805356954378106
  %1533 = or i64 %1531, %1532
  %1534 = xor i64 -5626613534653826118, %1533
  %1535 = xor i64 %1528, -1
  %1536 = or i64 8357184340459494204, %1535
  %1537 = xor i64 %1536, -1
  %1538 = and i64 %1537, -1
  %1539 = or i64 %1534, %1538
  %1540 = and i64 %140, -1243033264255028640
  %1541 = xor i64 %140, -1
  %1542 = or i64 1243033264255028639, %1541
  %1543 = xor i64 %1542, -1
  %1544 = and i64 %1543, -1
  %1545 = sext i32 %2 to i64
  %1546 = add i64 %1545, 1836104956750653526
  %1547 = xor i64 1836104956750653526, %1545
  %1548 = and i64 1836104956750653526, %1545
  %1549 = mul i64 2, %1548
  %1550 = add i64 %1547, %1549
  %1551 = xor i64 %1529, %1546
  %1552 = xor i64 %1551, %1539
  %1553 = xor i64 %1552, %1544
  %1554 = xor i64 %1553, %1540
  %1555 = xor i64 %1554, %1550
  %1556 = xor i64 %1555, -121315689497354203
  %1557 = sext i32 %1475 to i64
  %1558 = add i64 %1557, -8209303726059875814
  %1559 = sub i64 0, %1557
  %1560 = sub i64 -8209303726059875814, %1559
  %1561 = sext i32 %332 to i64
  %1562 = add i64 %1561, 151752402011743689
  %1563 = and i64 151752402011743689, %1561
  %1564 = or i64 151752402011743689, %1561
  %1565 = add i64 %1563, %1564
  %1566 = xor i64 %1560, %1565
  %1567 = xor i64 %1566, %1558
  %1568 = xor i64 %1567, 0
  %1569 = xor i64 %1568, %1562
  %1570 = mul i64 %1556, %1569
  %1571 = trunc i64 %1570 to i32
  %1572 = select i1 %1527, i32 %1283, i32 %1571
  %1573 = zext i32 %1572 to i64
  %1574 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %1573
  %1575 = load i8, i8* %1574, align 1, !tbaa !10
  %1576 = getelementptr inbounds i8, i8* %4, i64 %1477
  store i8 %1575, i8* %1576, align 1, !tbaa !10
  br label %1577

1577:                                             ; preds = %1481, %1474, %1187
  %1578 = fadd double %1188, 7.000000e-02
  %1579 = fptrunc double %1578 to float
  %1580 = fpext float %1579 to double
  %1581 = sext i32 %320 to i64
  %1582 = or i64 %1581, 5095308401523547870
  %1583 = xor i64 %1581, -1
  %1584 = and i64 5095308401523547870, %1583
  %1585 = add i64 %1584, %1581
  %1586 = sext i32 %1271 to i64
  %1587 = or i64 %1586, -7799141512292310367
  %1588 = xor i64 %1586, -1
  %1589 = and i64 %1588, 7701500699659168981
  %1590 = and i64 %1586, -7701500699659168982
  %1591 = or i64 %1589, %1590
  %1592 = xor i64 -494595476993405324, %1591
  %1593 = xor i64 %1586, -1
  %1594 = or i64 7799141512292310366, %1593
  %1595 = xor i64 %1594, -1
  %1596 = and i64 %1595, -1
  %1597 = or i64 %1592, %1596
  %1598 = sext i32 %1283 to i64
  %1599 = add i64 %1598, -687025208069496785
  %1600 = sub i64 0, %1598
  %1601 = add i64 687025208069496785, %1600
  %1602 = sub i64 0, %1601
  %1603 = xor i64 %1597, 5076742856568965635
  %1604 = xor i64 %1603, %1582
  %1605 = xor i64 %1604, %1585
  %1606 = xor i64 %1605, %1602
  %1607 = xor i64 %1606, %1587
  %1608 = xor i64 %1607, %1599
  %1609 = sext i32 %5 to i64
  %1610 = or i64 %1609, 5997736914214486123
  %1611 = xor i64 %1609, -1
  %1612 = and i64 5997736914214486123, %1611
  %1613 = add i64 %1612, %1609
  %1614 = sext i32 %1229 to i64
  %1615 = or i64 %1614, 4108286652609028923
  %1616 = xor i64 %1614, -1
  %1617 = and i64 %1616, -348433469432704235
  %1618 = and i64 %1614, 348433469432704234
  %1619 = or i64 %1617, %1618
  %1620 = xor i64 -4455874866970218450, %1619
  %1621 = xor i64 %1614, -1
  %1622 = or i64 -4108286652609028924, %1621
  %1623 = xor i64 %1622, -1
  %1624 = and i64 %1623, -1
  %1625 = or i64 %1620, %1624
  %1626 = sext i32 %614 to i64
  %1627 = add i64 %1626, -2936369416364298980
  %1628 = sub i64 0, %1626
  %1629 = add i64 2936369416364298980, %1628
  %1630 = sub i64 0, %1629
  %1631 = xor i64 %1625, %1613
  %1632 = xor i64 %1631, %1615
  %1633 = xor i64 %1632, %1630
  %1634 = xor i64 %1633, %1610
  %1635 = xor i64 %1634, %1627
  %1636 = xor i64 %1635, 8459469756326779934
  %1637 = mul i64 %1608, %1636
  %1638 = trunc i64 %1637 to i32
  %1639 = icmp eq i32 %1229, %1638
  br i1 %1639, label %1186, label %1187, !llvm.loop !21
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3sinf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3cosf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: mustprogress nofree norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  %3 = bitcast float* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store float 0.000000e+00, float* %1, align 4, !tbaa !13
  %4 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store float 0.000000e+00, float* %2, align 4, !tbaa !13
  %5 = call i8* @llvm.stacksave()
  %6 = alloca [1760 x float], align 4
  %7 = alloca [1760 x i8], align 1
  %8 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 0
  %9 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 0
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %11, %0
  %12 = phi i32 [ 5, %0 ], [ %212, %11 ]
  %13 = load float, float* %1, align 4, !tbaa !13
  %14 = load float, float* %2, align 4, !tbaa !13
  %15 = sext i32 %10 to i64
  %16 = or i64 %15, -7803903354350649756
  %17 = xor i64 %15, -1
  %18 = and i64 -7803903354350649756, %17
  %19 = add i64 %18, %15
  %20 = sext i32 %10 to i64
  %21 = add i64 %20, -3939637621432346335
  %22 = sub i64 0, %20
  %23 = add i64 3939637621432346335, %22
  %24 = sub i64 0, %23
  %25 = sext i32 %10 to i64
  %26 = add i64 %25, -3770046671116205049
  %27 = add i64 2809738428418361786, %25
  %28 = add i64 %27, -6579785099534566835
  %29 = xor i64 5708523365483508403, %26
  %30 = xor i64 %29, %28
  %31 = xor i64 %30, %16
  %32 = xor i64 %31, %19
  %33 = xor i64 %32, %24
  %34 = xor i64 %33, %21
  %35 = sext i32 %10 to i64
  %36 = and i64 %35, 978200119782493790
  %37 = or i64 -978200119782493791, %35
  %38 = sub i64 %37, -978200119782493791
  %39 = sext i32 %10 to i64
  %40 = or i64 %39, 7489608328678762292
  %41 = xor i64 %39, -1
  %42 = and i64 %41, 4188684375306821172
  %43 = and i64 %39, -4188684375306821173
  %44 = or i64 %42, %43
  %45 = xor i64 6760286945459321088, %44
  %46 = xor i64 %39, -1
  %47 = or i64 -7489608328678762293, %46
  %48 = xor i64 %47, -1
  %49 = and i64 %48, -1
  %50 = or i64 %45, %49
  %51 = sext i32 %10 to i64
  %52 = or i64 %51, 2179977140430062927
  %53 = and i64 2179977140430062927, %51
  %54 = xor i64 2179977140430062927, %51
  %55 = or i64 %53, %54
  %56 = xor i64 %55, %38
  %57 = xor i64 %56, %50
  %58 = xor i64 %57, %40
  %59 = xor i64 %58, %52
  %60 = xor i64 %59, %36
  %61 = xor i64 %60, 266936965419879840
  %62 = mul i64 %34, %61
  %63 = trunc i64 %62 to i32
  %64 = sext i32 %10 to i64
  %65 = or i64 %64, 427506005964374883
  %66 = and i64 427506005964374883, %64
  %67 = xor i64 427506005964374883, %64
  %68 = or i64 %66, %67
  %69 = sext i32 %10 to i64
  %70 = and i64 %69, 3903225174136353397
  %71 = xor i64 %69, -1
  %72 = or i64 -3903225174136353398, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = xor i64 %70, %65
  %76 = xor i64 %75, %68
  %77 = xor i64 %76, %74
  %78 = xor i64 %77, 846528297065144457
  %79 = sext i32 %10 to i64
  %80 = add i64 %79, -5054088648437079640
  %81 = add i64 8102540983660749635, %79
  %82 = sub i64 %81, -5290114441611722341
  %83 = sext i32 %10 to i64
  %84 = or i64 %83, 7248618634582528373
  %85 = xor i64 %83, -1
  %86 = and i64 7248618634582528373, %85
  %87 = add i64 %86, %83
  %88 = sext i32 %10 to i64
  %89 = add i64 %88, 1073133949693224719
  %90 = add i64 -6407728547144426219, %88
  %91 = sub i64 %90, -7480862496837650938
  %92 = xor i64 %91, %84
  %93 = xor i64 %92, 5933294021732457958
  %94 = xor i64 %93, %80
  %95 = xor i64 %94, %87
  %96 = xor i64 %95, %89
  %97 = xor i64 %96, %82
  %98 = mul i64 %78, %97
  %99 = trunc i64 %98 to i32
  %100 = sext i32 %10 to i64
  %101 = or i64 %100, 8031066748598611287
  %102 = and i64 8031066748598611287, %100
  %103 = xor i64 8031066748598611287, %100
  %104 = or i64 %102, %103
  %105 = sext i32 %10 to i64
  %106 = and i64 %105, -5687190792358935968
  %107 = xor i64 %105, -1
  %108 = xor i64 -5687190792358935968, %107
  %109 = and i64 %108, -5687190792358935968
  %110 = xor i64 %109, %101
  %111 = xor i64 %110, 9130314293831401579
  %112 = xor i64 %111, %104
  %113 = xor i64 %112, %106
  %114 = sext i32 %10 to i64
  %115 = and i64 %114, 3639680439285185894
  %116 = or i64 -3639680439285185895, %114
  %117 = sub i64 %116, -3639680439285185895
  %118 = sext i32 %10 to i64
  %119 = and i64 %118, 8113276883354797045
  %120 = or i64 -8113276883354797046, %118
  %121 = sub i64 %120, -8113276883354797046
  %122 = sext i32 %10 to i64
  %123 = add i64 %122, -4373442328173402425
  %124 = and i64 -4373442328173402425, %122
  %125 = or i64 -4373442328173402425, %122
  %126 = add i64 %124, %125
  %127 = xor i64 %115, -1269150072493976336
  %128 = xor i64 %127, %119
  %129 = xor i64 %128, %126
  %130 = xor i64 %129, %123
  %131 = xor i64 %130, %121
  %132 = xor i64 %131, %117
  %133 = mul i64 %113, %132
  %134 = trunc i64 %133 to i32
  call void @_Z6renderffiPfPcii(float %13, float %14, i32 %63, float* nonnull %9, i8* nonnull %8, i32 %99, i32 %134)
  %135 = sext i32 %10 to i64
  %136 = and i64 %135, -173169683124864490
  %137 = xor i64 %135, -1
  %138 = xor i64 -173169683124864490, %137
  %139 = and i64 %138, -173169683124864490
  %140 = sext i32 %10 to i64
  %141 = and i64 %140, -3783844780729281061
  %142 = or i64 3783844780729281060, %140
  %143 = sub i64 %142, 3783844780729281060
  %144 = xor i64 -6586795364579820101, %143
  %145 = xor i64 %144, %136
  %146 = xor i64 %145, %139
  %147 = xor i64 %146, %141
  %148 = sext i32 %10 to i64
  %149 = or i64 %148, 5439706800482279999
  %150 = xor i64 %148, -1
  %151 = and i64 %150, -4453136428735609330
  %152 = and i64 %148, 4453136428735609329
  %153 = or i64 %151, %152
  %154 = xor i64 -8552634207068150735, %153
  %155 = xor i64 %148, -1
  %156 = or i64 -5439706800482280000, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = sext i32 %10 to i64
  %161 = and i64 %160, 3053586435375112101
  %162 = xor i64 %160, -1
  %163 = or i64 -3053586435375112102, %162
  %164 = xor i64 %163, -1
  %165 = and i64 %164, -1
  %166 = sext i32 %10 to i64
  %167 = add i64 %166, -7439210131656347302
  %168 = sub i64 0, %166
  %169 = sub i64 -7439210131656347302, %168
  %170 = xor i64 %167, %159
  %171 = xor i64 %170, %169
  %172 = xor i64 %171, 6146107992309923699
  %173 = xor i64 %172, %149
  %174 = xor i64 %173, %165
  %175 = xor i64 %174, %161
  %176 = mul i64 %147, %175
  %177 = trunc i64 %176 to i32
  call void @_Z7displayPKcRfS1_i(i8* nonnull %8, float* nonnull align 4 dereferenceable(4) %1, float* nonnull align 4 dereferenceable(4) %2, i32 %177)
  %178 = sext i32 %10 to i64
  %179 = or i64 %178, 1199676840448550754
  %180 = xor i64 %178, -1
  %181 = and i64 1199676840448550754, %180
  %182 = add i64 %181, %178
  %183 = sext i32 %10 to i64
  %184 = add i64 %183, -551851133079578205
  %185 = add i64 -6899441428824588609, %183
  %186 = add i64 %185, 6347590295745010404
  %187 = xor i64 %184, %179
  %188 = xor i64 %187, %182
  %189 = xor i64 %188, -7002340895653555111
  %190 = xor i64 %189, %186
  %191 = sext i32 %10 to i64
  %192 = add i64 %191, 2375233340485838359
  %193 = and i64 2375233340485838359, %191
  %194 = or i64 2375233340485838359, %191
  %195 = add i64 %193, %194
  %196 = sext i32 %10 to i64
  %197 = add i64 %196, -5336306562551960021
  %198 = add i64 1928785484627397515, %196
  %199 = sub i64 %198, 7265092047179357536
  %200 = sext i32 %10 to i64
  %201 = and i64 %200, 5770914367622947832
  %202 = or i64 -5770914367622947833, %200
  %203 = sub i64 %202, -5770914367622947833
  %204 = xor i64 %195, %203
  %205 = xor i64 %204, %192
  %206 = xor i64 %205, %197
  %207 = xor i64 %206, 1453925072215798761
  %208 = xor i64 %207, %199
  %209 = xor i64 %208, %201
  %210 = mul i64 %190, %209
  %211 = trunc i64 %210 to i32
  %212 = add nuw nsw i32 %12, %211
  %213 = sext i32 %10 to i64
  %214 = and i64 %213, -6042081178031180640
  %215 = or i64 6042081178031180639, %213
  %216 = sub i64 %215, 6042081178031180639
  %217 = sext i32 %10 to i64
  %218 = add i64 %217, 3977110323366609015
  %219 = add i64 -3453836180041723015, %217
  %220 = add i64 %219, 7430946503408332030
  %221 = xor i64 %216, %220
  %222 = xor i64 %221, 3285711416693213867
  %223 = xor i64 %222, %214
  %224 = xor i64 %223, %218
  %225 = sext i32 %10 to i64
  %226 = and i64 %225, -3958936478438939540
  %227 = xor i64 %225, -1
  %228 = xor i64 -3958936478438939540, %227
  %229 = and i64 %228, -3958936478438939540
  %230 = sext i32 %10 to i64
  %231 = and i64 %230, 6046577099949261715
  %232 = xor i64 %230, -1
  %233 = xor i64 6046577099949261715, %232
  %234 = and i64 %233, 6046577099949261715
  %235 = sext i32 %10 to i64
  %236 = or i64 %235, -516987081180098914
  %237 = and i64 -516987081180098914, %235
  %238 = xor i64 -516987081180098914, %235
  %239 = or i64 %237, %238
  %240 = xor i64 %239, %236
  %241 = xor i64 %240, %231
  %242 = xor i64 %241, 2101779603319078942
  %243 = xor i64 %242, %234
  %244 = xor i64 %243, %226
  %245 = xor i64 %244, %229
  %246 = mul i64 %224, %245
  %247 = trunc i64 %246 to i32
  %248 = icmp eq i32 %212, %247
  br i1 %248, label %250, label %11, !llvm.loop !22

249:                                              ; preds = %250
  call void @llvm.stackrestore(i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i32 %261

250:                                              ; preds = %250, %11
  %251 = phi i64 [ %305, %250 ], [ 0, %11 ]
  %252 = phi i32 [ %261, %250 ], [ 0, %11 ]
  %253 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 %251
  %254 = load i8, i8* %253, align 1, !tbaa !10
  %255 = sext i8 %254 to i32
  %256 = add nsw i32 %252, %255
  %257 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 %251
  %258 = load float, float* %257, align 4, !tbaa !13
  %259 = sitofp i32 %256 to float
  %260 = fadd float %258, %259
  %261 = fptosi float %260 to i32
  %262 = sext i32 %212 to i64
  %263 = and i64 %262, 618473904308492653
  %264 = or i64 -618473904308492654, %262
  %265 = sub i64 %264, -618473904308492654
  %266 = sext i32 %12 to i64
  %267 = or i64 %266, -7401334459304366109
  %268 = xor i64 %266, -1
  %269 = and i64 -7401334459304366109, %268
  %270 = add i64 %269, %266
  %271 = sext i32 %212 to i64
  %272 = add i64 %271, 2910296391674638469
  %273 = sub i64 0, %271
  %274 = add i64 -2910296391674638469, %273
  %275 = sub i64 0, %274
  %276 = xor i64 %265, %275
  %277 = xor i64 %276, %270
  %278 = xor i64 %277, 7719378720304764733
  %279 = xor i64 %278, %267
  %280 = xor i64 %279, %272
  %281 = xor i64 %280, %263
  %282 = sext i32 %10 to i64
  %283 = and i64 %282, -6366857903340612837
  %284 = xor i64 %282, -1
  %285 = or i64 6366857903340612836, %284
  %286 = xor i64 %285, -1
  %287 = and i64 %286, -1
  %288 = sext i32 %212 to i64
  %289 = or i64 %288, -8109718955204513720
  %290 = xor i64 %288, -1
  %291 = and i64 %290, -597710596078844280
  %292 = and i64 %288, 597710596078844279
  %293 = or i64 %291, %292
  %294 = xor i64 8701232600635913920, %293
  %295 = xor i64 %288, -1
  %296 = or i64 8109718955204513719, %295
  %297 = xor i64 %296, -1
  %298 = and i64 %297, -1
  %299 = or i64 %294, %298
  %300 = xor i64 %283, -8594526590245111787
  %301 = xor i64 %300, %289
  %302 = xor i64 %301, %287
  %303 = xor i64 %302, %299
  %304 = mul i64 %281, %303
  %305 = add nuw nsw i64 %251, %304
  %306 = sext i32 %12 to i64
  %307 = add i64 %306, 3613958457093796696
  %308 = and i64 3613958457093796696, %306
  %309 = or i64 3613958457093796696, %306
  %310 = add i64 %308, %309
  %311 = sext i32 %10 to i64
  %312 = or i64 %311, -800096456685083377
  %313 = xor i64 %311, -1
  %314 = and i64 %313, -4829420220627352739
  %315 = and i64 %311, 4829420220627352738
  %316 = or i64 %314, %315
  %317 = xor i64 5196889428174808658, %316
  %318 = xor i64 %311, -1
  %319 = or i64 800096456685083376, %318
  %320 = xor i64 %319, -1
  %321 = and i64 %320, -1
  %322 = or i64 %317, %321
  %323 = sext i32 %212 to i64
  %324 = add i64 %323, -9114946623844494023
  %325 = sub i64 0, %323
  %326 = sub i64 -9114946623844494023, %325
  %327 = xor i64 %307, %310
  %328 = xor i64 %327, 6532198192956563675
  %329 = xor i64 %328, %324
  %330 = xor i64 %329, %312
  %331 = xor i64 %330, %326
  %332 = xor i64 %331, %322
  %333 = sext i32 %12 to i64
  %334 = add i64 %333, -3423249652162181448
  %335 = add i64 443362489632602097, %333
  %336 = sub i64 %335, 3866612141794783545
  %337 = sext i32 %10 to i64
  %338 = and i64 %337, -8801133976450382091
  %339 = xor i64 %337, -1
  %340 = or i64 8801133976450382090, %339
  %341 = xor i64 %340, -1
  %342 = and i64 %341, -1
  %343 = xor i64 %334, %342
  %344 = xor i64 %343, 4456108817685142176
  %345 = xor i64 %344, %338
  %346 = xor i64 %345, %336
  %347 = mul i64 %332, %346
  %348 = icmp eq i64 %305, %347
  br i1 %348, label %249, label %250, !llvm.loop !23
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #8

attributes #0 = { mustprogress nofree nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #5 = { inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { mustprogress nofree norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !11, i64 0}
!15 = distinct !{!15, !16, !17}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !16, !17}
!19 = distinct !{!19, !16, !17}
!20 = distinct !{!20, !16, !17}
!21 = distinct !{!21, !16, !17}
!22 = distinct !{!22, !16, !17}
!23 = distinct !{!23, !16, !17}
