; ModuleID = 'output/const-obfuscation/ex7/ex7.ll'
source_filename = "input/const-obfuscation/ex7/ex7.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [4 x i8] c"\1B[H\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c".,-~:;=!*#$@\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1

; Function Attrs: mustprogress nofree nounwind ssp uwtable
define void @_Z7displayPKcRfS1_i(i8* nocapture readonly %0, float* nocapture nonnull align 4 dereferenceable(4) %1, float* nocapture nonnull align 4 dereferenceable(4) %2, i32 %3) local_unnamed_addr #0 {
  %5 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %7

6:                                                ; preds = %75
  ret void

7:                                                ; preds = %75, %4
  %8 = phi i64 [ 0, %4 ], [ %127, %75 ]
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %5 to i64
  %11 = or i64 %10, 6164815375928718043
  %12 = xor i64 %10, -1
  %13 = and i64 6164815375928718043, %12
  %14 = add i64 %13, %10
  %15 = sext i32 %5 to i64
  %16 = or i64 %15, 3488206454084049458
  %17 = xor i64 %15, -1
  %18 = and i64 3488206454084049458, %17
  %19 = add i64 %18, %15
  %20 = xor i64 6215163810233637551, %14
  %21 = xor i64 %20, %19
  %22 = xor i64 %21, %16
  %23 = xor i64 %22, %11
  %24 = sext i32 %3 to i64
  %25 = add i64 %24, 956084561663895567
  %26 = add i64 -1452095426462725544, %24
  %27 = sub i64 %26, -2408179988126621111
  %28 = sext i32 %5 to i64
  %29 = or i64 %28, 4285924550170645586
  %30 = xor i64 %28, -1
  %31 = and i64 4285924550170645586, %30
  %32 = add i64 %31, %28
  %33 = xor i64 %27, %25
  %34 = xor i64 %33, %29
  %35 = xor i64 %34, -5729355115943765840
  %36 = xor i64 %35, %32
  %37 = mul i64 %23, %36
  %38 = trunc i64 %37 to i32
  %39 = urem i32 %9, %38
  %40 = sext i32 %3 to i64
  %41 = or i64 %40, -232380022020975535
  %42 = xor i64 %40, -1
  %43 = and i64 -232380022020975535, %42
  %44 = add i64 %43, %40
  %45 = sext i32 %5 to i64
  %46 = and i64 %45, -1258838422699223370
  %47 = xor i64 %45, -1
  %48 = or i64 1258838422699223369, %47
  %49 = xor i64 %48, -1
  %50 = and i64 %49, -1
  %51 = xor i64 %50, 6907747054336490861
  %52 = xor i64 %51, %46
  %53 = xor i64 %52, %44
  %54 = xor i64 %53, %41
  %55 = sext i32 %5 to i64
  %56 = and i64 %55, -8917079371641381651
  %57 = xor i64 %55, -1
  %58 = xor i64 -8917079371641381651, %57
  %59 = and i64 %58, -8917079371641381651
  %60 = sext i32 %5 to i64
  %61 = and i64 %60, -3963298601895382285
  %62 = or i64 3963298601895382284, %60
  %63 = sub i64 %62, 3963298601895382284
  %64 = xor i64 0, %56
  %65 = xor i64 %64, %61
  %66 = xor i64 %65, %63
  %67 = xor i64 %66, %59
  %68 = mul i64 %54, %67
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %39, %69
  br i1 %70, label %75, label %71

71:                                               ; preds = %7
  %72 = getelementptr inbounds i8, i8* %0, i64 %8
  %73 = load i8, i8* %72, align 1, !tbaa !10
  %74 = sext i8 %73 to i32
  br label %75

75:                                               ; preds = %71, %7
  %76 = phi i32 [ %74, %71 ], [ 10, %7 ]
  %77 = call i32 @putchar(i32 %76)
  %78 = load float, float* %1, align 4, !tbaa !13
  %79 = fpext float %78 to double
  %80 = fadd double %79, 4.000000e-05
  %81 = fptrunc double %80 to float
  store float %81, float* %1, align 4, !tbaa !13
  %82 = load float, float* %2, align 4, !tbaa !13
  %83 = fpext float %82 to double
  %84 = fadd double %83, 2.000000e-05
  %85 = fptrunc double %84 to float
  store float %85, float* %2, align 4, !tbaa !13
  %86 = and i64 %8, -5057013472931206989
  %87 = xor i64 %8, -1
  %88 = xor i64 -5057013472931206989, %87
  %89 = and i64 %88, -5057013472931206989
  %90 = add i64 %8, 6171877127445557289
  %91 = sub i64 0, %8
  %92 = add i64 -6171877127445557289, %91
  %93 = sub i64 0, %92
  %94 = or i64 %8, 3992671765729541907
  %95 = xor i64 %8, -1
  %96 = and i64 %95, -6162304610389838664
  %97 = and i64 %8, 6162304610389838663
  %98 = or i64 %96, %97
  %99 = xor i64 -7128132464610096213, %98
  %100 = xor i64 %8, -1
  %101 = or i64 -3992671765729541908, %100
  %102 = xor i64 %101, -1
  %103 = and i64 %102, -1
  %104 = or i64 %99, %103
  %105 = xor i64 -5571627262503893379, %94
  %106 = xor i64 %105, %104
  %107 = xor i64 %106, %90
  %108 = xor i64 %107, %93
  %109 = xor i64 %108, %86
  %110 = xor i64 %109, %89
  %111 = sext i32 %3 to i64
  %112 = add i64 %111, -9207159739089299899
  %113 = xor i64 -9207159739089299899, %111
  %114 = and i64 -9207159739089299899, %111
  %115 = mul i64 2, %114
  %116 = add i64 %113, %115
  %117 = and i64 %8, -4343127992967700297
  %118 = xor i64 %8, -1
  %119 = or i64 4343127992967700296, %118
  %120 = xor i64 %119, -1
  %121 = and i64 %120, -1
  %122 = xor i64 %116, 3315771148729934549
  %123 = xor i64 %122, %121
  %124 = xor i64 %123, %117
  %125 = xor i64 %124, %112
  %126 = mul i64 %110, %125
  %127 = add nuw nsw i64 %8, %126
  %128 = sext i32 %39 to i64
  %129 = and i64 %128, -6387903028779196156
  %130 = or i64 6387903028779196155, %128
  %131 = sub i64 %130, 6387903028779196155
  %132 = sext i32 %3 to i64
  %133 = or i64 %132, -2491675979381481203
  %134 = xor i64 %132, -1
  %135 = and i64 %134, 4348477571832378319
  %136 = and i64 %132, -4348477571832378320
  %137 = or i64 %135, %136
  %138 = xor i64 -2219381082585460030, %137
  %139 = xor i64 %132, -1
  %140 = or i64 2491675979381481202, %139
  %141 = xor i64 %140, -1
  %142 = and i64 %141, -1
  %143 = or i64 %138, %142
  %144 = sext i32 %39 to i64
  %145 = add i64 %144, -211241974837853252
  %146 = add i64 -8623354242533860641, %144
  %147 = sub i64 %146, -8412112267696007389
  %148 = xor i64 %143, %145
  %149 = xor i64 %148, %133
  %150 = xor i64 %149, 155213114060637165
  %151 = xor i64 %150, %131
  %152 = xor i64 %151, %147
  %153 = xor i64 %152, %129
  %154 = and i64 %8, -2691578349213929165
  %155 = xor i64 %8, -1
  %156 = or i64 2691578349213929164, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = sext i32 %5 to i64
  %160 = and i64 %159, 7583342077380342379
  %161 = xor i64 %159, -1
  %162 = or i64 -7583342077380342380, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = or i64 %8, -883324852253069641
  %166 = and i64 -883324852253069641, %8
  %167 = xor i64 -883324852253069641, %8
  %168 = or i64 %166, %167
  %169 = xor i64 %164, %160
  %170 = xor i64 %169, %158
  %171 = xor i64 %170, %165
  %172 = xor i64 %171, %154
  %173 = xor i64 %172, -1066305448077764539
  %174 = xor i64 %173, %168
  %175 = mul i64 %153, %174
  %176 = icmp eq i64 %127, %175
  br i1 %176, label %6, label %7, !llvm.loop !15
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind ssp uwtable
define void @_Z6renderffiPfPcii(float %0, float %1, i32 %2, float* nocapture %3, i8* nocapture %4, i32 %5, i32 %6) local_unnamed_addr #3 {
  %8 = sext i32 %5 to i64
  %9 = and i64 %8, -2303226813603016570
  %10 = xor i64 %8, -1
  %11 = xor i64 -2303226813603016570, %10
  %12 = and i64 %11, -2303226813603016570
  %13 = sext i32 %2 to i64
  %14 = add i64 %13, 36842281854116349
  %15 = xor i64 36842281854116349, %13
  %16 = and i64 36842281854116349, %13
  %17 = mul i64 2, %16
  %18 = add i64 %15, %17
  %19 = xor i64 %14, %9
  %20 = xor i64 %19, %18
  %21 = xor i64 %20, -5735675062283174275
  %22 = xor i64 %21, %12
  %23 = sext i32 %2 to i64
  %24 = and i64 %23, 514194350154150471
  %25 = xor i64 %23, -1
  %26 = xor i64 514194350154150471, %25
  %27 = and i64 %26, 514194350154150471
  %28 = sext i32 %2 to i64
  %29 = or i64 %28, 7426094810057258410
  %30 = and i64 7426094810057258410, %28
  %31 = xor i64 7426094810057258410, %28
  %32 = or i64 %30, %31
  %33 = sext i32 %2 to i64
  %34 = or i64 %33, 2802282409885818285
  %35 = xor i64 %33, -1
  %36 = and i64 %35, 5344319287706766873
  %37 = and i64 %33, -5344319287706766874
  %38 = or i64 %36, %37
  %39 = xor i64 7838905557918815156, %38
  %40 = xor i64 %33, -1
  %41 = or i64 -2802282409885818286, %40
  %42 = xor i64 %41, -1
  %43 = and i64 %42, -1
  %44 = or i64 %39, %43
  %45 = xor i64 %44, %34
  %46 = xor i64 %45, -532207560115048120
  %47 = xor i64 %46, %24
  %48 = xor i64 %47, %27
  %49 = xor i64 %48, %32
  %50 = xor i64 %49, %29
  %51 = mul i64 %22, %50
  %52 = trunc i64 %51 to i32
  %53 = sdiv i32 %6, %52
  %54 = sext i32 %2 to i64
  %55 = sext i32 %6 to i64
  %56 = add i64 %55, -9121905987697438214
  %57 = sub i64 0, %55
  %58 = sub i64 -9121905987697438214, %57
  %59 = sext i32 %2 to i64
  %60 = and i64 %59, -5265175745467055864
  %61 = xor i64 %59, -1
  %62 = or i64 5265175745467055863, %61
  %63 = xor i64 %62, -1
  %64 = and i64 %63, -1
  %65 = xor i64 %60, -6692328499237142125
  %66 = xor i64 %65, %64
  %67 = xor i64 %66, %58
  %68 = xor i64 %67, %56
  %69 = sext i32 %5 to i64
  %70 = add i64 %69, -815868443832988568
  %71 = xor i64 -815868443832988568, %69
  %72 = and i64 -815868443832988568, %69
  %73 = mul i64 2, %72
  %74 = add i64 %71, %73
  %75 = sext i32 %2 to i64
  %76 = or i64 %75, 7140305353561888097
  %77 = xor i64 %75, -1
  %78 = and i64 7140305353561888097, %77
  %79 = add i64 %78, %75
  %80 = xor i64 %79, %70
  %81 = xor i64 %80, %76
  %82 = xor i64 %81, %74
  %83 = xor i64 %82, -4623356581531053216
  %84 = mul i64 %68, %83
  %85 = trunc i64 %84 to i8
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %85, i64 %54, i1 false)
  %86 = bitcast float* %3 to i8*
  %87 = sext i32 %2 to i64
  %88 = and i64 %87, -7880858110886926673
  %89 = xor i64 %87, -1
  %90 = xor i64 -7880858110886926673, %89
  %91 = and i64 %90, -7880858110886926673
  %92 = sext i32 %5 to i64
  %93 = and i64 %92, -5818781875658146002
  %94 = or i64 5818781875658146001, %92
  %95 = sub i64 %94, 5818781875658146001
  %96 = xor i64 %88, %95
  %97 = xor i64 %96, %93
  %98 = xor i64 %97, 4030885438987089679
  %99 = xor i64 %98, %91
  %100 = sext i32 %6 to i64
  %101 = or i64 %100, 2605663283094111941
  %102 = xor i64 %100, -1
  %103 = and i64 %102, -6665233715320960500
  %104 = and i64 %100, 6665233715320960499
  %105 = or i64 %103, %104
  %106 = xor i64 -8671265687554224951, %105
  %107 = xor i64 %100, -1
  %108 = or i64 -2605663283094111942, %107
  %109 = xor i64 %108, -1
  %110 = and i64 %109, -1
  %111 = or i64 %106, %110
  %112 = sext i32 %6 to i64
  %113 = add i64 %112, -3529728270947684516
  %114 = add i64 2518393078652327995, %112
  %115 = sub i64 %114, 6048121349600012511
  %116 = xor i64 %113, %101
  %117 = xor i64 %116, 3198667341221507038
  %118 = xor i64 %117, %115
  %119 = xor i64 %118, %111
  %120 = mul i64 %99, %119
  %121 = shl nsw i64 %54, %120
  %122 = sext i32 %2 to i64
  %123 = or i64 %122, -3671742039474885152
  %124 = xor i64 %122, -1
  %125 = and i64 %124, -3501446483908370410
  %126 = and i64 %122, 3501446483908370409
  %127 = or i64 %125, %126
  %128 = xor i64 171988808309591542, %127
  %129 = xor i64 %122, -1
  %130 = or i64 3671742039474885151, %129
  %131 = xor i64 %130, -1
  %132 = and i64 %131, -1
  %133 = or i64 %128, %132
  %134 = sext i32 %5 to i64
  %135 = and i64 %134, -235672532111050209
  %136 = xor i64 %134, -1
  %137 = xor i64 -235672532111050209, %136
  %138 = and i64 %137, -235672532111050209
  %139 = xor i64 %138, 8460863867945608861
  %140 = xor i64 %139, %133
  %141 = xor i64 %140, %123
  %142 = xor i64 %141, %135
  %143 = sext i32 %6 to i64
  %144 = and i64 %143, 3288277221880905407
  %145 = xor i64 %143, -1
  %146 = or i64 -3288277221880905408, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = sext i32 %2 to i64
  %150 = or i64 %149, -3040368313682688970
  %151 = and i64 -3040368313682688970, %149
  %152 = xor i64 -3040368313682688970, %149
  %153 = or i64 %151, %152
  %154 = sext i32 %2 to i64
  %155 = and i64 %154, -1839458570950266576
  %156 = or i64 1839458570950266575, %154
  %157 = sub i64 %156, 1839458570950266575
  %158 = xor i64 %157, %150
  %159 = xor i64 %158, %148
  %160 = xor i64 %159, %155
  %161 = xor i64 %160, %144
  %162 = xor i64 %161, 0
  %163 = xor i64 %162, %153
  %164 = mul i64 %142, %163
  %165 = trunc i64 %164 to i8
  call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 %165, i64 %121, i1 false)
  %166 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  %167 = call fastcc float @_ZL3sinf(float %0) #9
  %168 = call fastcc float @_ZL3cosf(float %0) #9
  %169 = sitofp i32 %53 to float
  %170 = call fastcc float @_ZL3cosf(float 5.000000e-01) #9
  %171 = call fastcc float @_ZL3cosf(float %1) #9
  %172 = call fastcc float @_ZL3sinf(float %1) #9
  %173 = sext i32 %2 to i64
  %174 = or i64 %173, -4405440006438201338
  %175 = and i64 -4405440006438201338, %173
  %176 = xor i64 -4405440006438201338, %173
  %177 = or i64 %175, %176
  %178 = sext i32 %2 to i64
  %179 = and i64 %178, 5643000293327939584
  %180 = or i64 -5643000293327939585, %178
  %181 = sub i64 %180, -5643000293327939585
  %182 = sext i32 %5 to i64
  %183 = and i64 %182, 4492612178386009876
  %184 = xor i64 %182, -1
  %185 = xor i64 4492612178386009876, %184
  %186 = and i64 %185, 4492612178386009876
  %187 = xor i64 %174, %177
  %188 = xor i64 %187, %186
  %189 = xor i64 %188, %183
  %190 = xor i64 %189, %181
  %191 = xor i64 %190, 3278084334163336093
  %192 = xor i64 %191, %179
  %193 = sext i32 %6 to i64
  %194 = and i64 %193, -5659118753807747126
  %195 = or i64 5659118753807747125, %193
  %196 = sub i64 %195, 5659118753807747125
  %197 = sext i32 %6 to i64
  %198 = and i64 %197, -1002411101423080594
  %199 = or i64 1002411101423080593, %197
  %200 = sub i64 %199, 1002411101423080593
  %201 = xor i64 1223391195840152938, %196
  %202 = xor i64 %201, %194
  %203 = xor i64 %202, %200
  %204 = xor i64 %203, %198
  %205 = mul i64 %192, %204
  %206 = trunc i64 %205 to i32
  %207 = sdiv i32 %6, %206
  %208 = sitofp i32 %207 to float
  %209 = sext i32 %5 to i64
  %210 = or i64 %209, 481893536886540553
  %211 = and i64 481893536886540553, %209
  %212 = xor i64 481893536886540553, %209
  %213 = or i64 %211, %212
  %214 = sext i32 %5 to i64
  %215 = or i64 %214, 9035524158480291538
  %216 = xor i64 %214, -1
  %217 = and i64 9035524158480291538, %216
  %218 = add i64 %217, %214
  %219 = sext i32 %6 to i64
  %220 = add i64 %219, -5596848034681104146
  %221 = add i64 7522512536280562555, %219
  %222 = sub i64 %221, -5327383502747884915
  %223 = xor i64 %215, %213
  %224 = xor i64 %223, 3149496492858405123
  %225 = xor i64 %224, %220
  %226 = xor i64 %225, %222
  %227 = xor i64 %226, %210
  %228 = xor i64 %227, %218
  %229 = sext i32 %5 to i64
  %230 = or i64 %229, 2748727123846858932
  %231 = xor i64 %229, -1
  %232 = and i64 %231, -2686774912224767274
  %233 = and i64 %229, 2686774912224767273
  %234 = or i64 %232, %233
  %235 = xor i64 -246615292670191006, %234
  %236 = xor i64 %229, -1
  %237 = or i64 -2748727123846858933, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = or i64 %235, %239
  %241 = sext i32 %2 to i64
  %242 = add i64 %241, 5258266353297501988
  %243 = add i64 -4100929510622074975, %241
  %244 = sub i64 %243, 9087548209789974653
  %245 = xor i64 5343210106474595158, %244
  %246 = xor i64 %245, %242
  %247 = xor i64 %246, %230
  %248 = xor i64 %247, %240
  %249 = mul i64 %228, %248
  %250 = trunc i64 %249 to i32
  %251 = sdiv i32 %5, %250
  %252 = sext i32 %6 to i64
  %253 = add i64 %252, -5114100603262849378
  %254 = sub i64 0, %252
  %255 = sub i64 -5114100603262849378, %254
  %256 = sext i32 %2 to i64
  %257 = and i64 %256, 8520377296828693830
  %258 = xor i64 %256, -1
  %259 = or i64 -8520377296828693831, %258
  %260 = xor i64 %259, -1
  %261 = and i64 %260, -1
  %262 = xor i64 %261, %253
  %263 = xor i64 %262, %255
  %264 = xor i64 %263, %257
  %265 = xor i64 %264, -3215632991063045275
  %266 = sext i32 %2 to i64
  %267 = and i64 %266, -7480276181872294896
  %268 = xor i64 %266, -1
  %269 = or i64 7480276181872294895, %268
  %270 = xor i64 %269, -1
  %271 = and i64 %270, -1
  %272 = sext i32 %2 to i64
  %273 = add i64 %272, -5965428591952338780
  %274 = and i64 -5965428591952338780, %272
  %275 = or i64 -5965428591952338780, %272
  %276 = add i64 %274, %275
  %277 = sext i32 %5 to i64
  %278 = or i64 %277, 8812254989350406870
  %279 = xor i64 %277, -1
  %280 = and i64 8812254989350406870, %279
  %281 = add i64 %280, %277
  %282 = xor i64 -2929207031960031635, %276
  %283 = xor i64 %282, %273
  %284 = xor i64 %283, %281
  %285 = xor i64 %284, %278
  %286 = xor i64 %285, %271
  %287 = xor i64 %286, %267
  %288 = mul i64 %265, %287
  %289 = trunc i64 %288 to i32
  %290 = add nsw i32 %251, %289
  %291 = sitofp i32 %290 to float
  br label %292

292:                                              ; preds = %615, %7
  %293 = phi float [ 0.000000e+00, %7 ], [ %618, %615 ]
  %294 = call fastcc float @_ZL3cosf(float %293) #9
  %295 = call fastcc float @_ZL3sinf(float %293) #9
  %296 = fadd float %294, %169
  %297 = fmul float %166, %296
  %298 = fmul float %297, %168
  %299 = fmul float %167, %295
  %300 = fsub float %298, %299
  %301 = fmul float %167, %297
  %302 = fmul float %295, %168
  %303 = fadd float %301, %302
  %304 = fadd float %303, 5.000000e+00
  %305 = fdiv float 1.000000e+00, %304
  %306 = fmul float %305, 3.000000e+01
  %307 = fmul float %296, %170
  %308 = fmul float %307, %171
  %309 = fmul float %300, %172
  %310 = fadd float %308, %309
  %311 = fmul float %306, %310
  %312 = fadd float %311, %208
  %313 = fptosi float %312 to i32
  %314 = fmul float %305, 1.500000e+01
  %315 = fmul float %307, %172
  %316 = fmul float %300, %171
  %317 = fsub float %315, %316
  %318 = fmul float %314, %317
  %319 = fadd float %318, %291
  %320 = fptosi float %319 to i32
  %321 = fmul float %166, %294
  %322 = fmul float %321, %168
  %323 = fsub float %299, %322
  %324 = fmul float %323, %171
  %325 = fmul float %321, %167
  %326 = fsub float %324, %325
  %327 = fsub float %326, %302
  %328 = fmul float %294, %170
  %329 = fmul float %328, %172
  %330 = fsub float %327, %329
  %331 = fmul float %330, 8.000000e+00
  %332 = fptosi float %331 to i32
  %333 = icmp slt i32 %320, %5
  %334 = sext i32 %2 to i64
  %335 = add i64 %334, 2581105322440902303
  %336 = add i64 2314781752921176469, %334
  %337 = add i64 %336, 266323569519725834
  %338 = sext i32 %251 to i64
  %339 = or i64 %338, 7981576628506234140
  %340 = xor i64 %338, -1
  %341 = and i64 %340, 7445976865915244841
  %342 = and i64 %338, -7445976865915244842
  %343 = or i64 %341, %342
  %344 = xor i64 689381857502633013, %343
  %345 = xor i64 %338, -1
  %346 = or i64 -7981576628506234141, %345
  %347 = xor i64 %346, -1
  %348 = and i64 %347, -1
  %349 = or i64 %344, %348
  %350 = xor i64 %349, %335
  %351 = xor i64 %350, %339
  %352 = xor i64 %351, %337
  %353 = xor i64 %352, -926686112783276487
  %354 = and i64 %121, 5003422523082685084
  %355 = or i64 -5003422523082685085, %121
  %356 = sub i64 %355, -5003422523082685085
  %357 = sext i32 %251 to i64
  %358 = or i64 %357, -9088168189873765379
  %359 = xor i64 %357, -1
  %360 = and i64 %359, -2029896054889470716
  %361 = and i64 %357, 2029896054889470715
  %362 = or i64 %360, %361
  %363 = xor i64 7076293439885240057, %362
  %364 = xor i64 %357, -1
  %365 = or i64 9088168189873765378, %364
  %366 = xor i64 %365, -1
  %367 = and i64 %366, -1
  %368 = or i64 %363, %367
  %369 = xor i64 %354, %356
  %370 = xor i64 %369, %358
  %371 = xor i64 %370, %368
  %372 = xor i64 %371, 0
  %373 = mul i64 %353, %372
  %374 = trunc i64 %373 to i32
  %375 = icmp sgt i32 %320, %374
  %376 = and i1 %333, %375
  %377 = sext i32 %251 to i64
  %378 = add i64 %377, 195975072142054073
  %379 = sub i64 0, %377
  %380 = sub i64 195975072142054073, %379
  %381 = sext i32 %290 to i64
  %382 = or i64 %381, -2100943239429566449
  %383 = xor i64 %381, -1
  %384 = and i64 %383, -1571758409102778924
  %385 = and i64 %381, 1571758409102778923
  %386 = or i64 %384, %385
  %387 = xor i64 646281169687072219, %386
  %388 = xor i64 %381, -1
  %389 = or i64 2100943239429566448, %388
  %390 = xor i64 %389, -1
  %391 = and i64 %390, -1
  %392 = or i64 %387, %391
  %393 = xor i64 %378, 108005161986212773
  %394 = xor i64 %393, %380
  %395 = xor i64 %394, %392
  %396 = xor i64 %395, %382
  %397 = sext i32 %6 to i64
  %398 = and i64 %397, -4657253781239979306
  %399 = xor i64 %397, -1
  %400 = xor i64 -4657253781239979306, %399
  %401 = and i64 %400, -4657253781239979306
  %402 = sext i32 %5 to i64
  %403 = or i64 %402, 7533824498112947043
  %404 = xor i64 %402, -1
  %405 = and i64 %404, -6021956231823038909
  %406 = and i64 %402, 6021956231823038908
  %407 = or i64 %405, %406
  %408 = xor i64 -4260348341607168736, %407
  %409 = xor i64 %402, -1
  %410 = or i64 -7533824498112947044, %409
  %411 = xor i64 %410, -1
  %412 = and i64 %411, -1
  %413 = or i64 %408, %412
  %414 = sext i32 %6 to i64
  %415 = add i64 %414, -3412098548535144019
  %416 = xor i64 -3412098548535144019, %414
  %417 = and i64 -3412098548535144019, %414
  %418 = mul i64 2, %417
  %419 = add i64 %416, %418
  %420 = xor i64 %401, 0
  %421 = xor i64 %420, %413
  %422 = xor i64 %421, %419
  %423 = xor i64 %422, %398
  %424 = xor i64 %423, %415
  %425 = xor i64 %424, %403
  %426 = mul i64 %396, %425
  %427 = trunc i64 %426 to i32
  %428 = icmp sgt i32 %313, %427
  %429 = sext i32 %290 to i64
  %430 = add i64 %429, -4628144010714970177
  %431 = sub i64 0, %429
  %432 = sub i64 -4628144010714970177, %431
  %433 = sext i32 %290 to i64
  %434 = add i64 %433, -7957562815637366045
  %435 = and i64 -7957562815637366045, %433
  %436 = or i64 -7957562815637366045, %433
  %437 = add i64 %435, %436
  %438 = xor i64 1026828165429524981, %432
  %439 = xor i64 %438, %430
  %440 = xor i64 %439, %437
  %441 = xor i64 %440, %434
  %442 = sext i32 %290 to i64
  %443 = add i64 %442, -79834631412705110
  %444 = sub i64 0, %442
  %445 = sub i64 -79834631412705110, %444
  %446 = sext i32 %207 to i64
  %447 = add i64 %446, 4927004224304123883
  %448 = xor i64 4927004224304123883, %446
  %449 = and i64 4927004224304123883, %446
  %450 = mul i64 2, %449
  %451 = add i64 %448, %450
  %452 = and i64 %54, 2545276417045279058
  %453 = xor i64 %54, -1
  %454 = or i64 -2545276417045279059, %453
  %455 = xor i64 %454, -1
  %456 = and i64 %455, -1
  %457 = xor i64 %443, 0
  %458 = xor i64 %457, %447
  %459 = xor i64 %458, %451
  %460 = xor i64 %459, %452
  %461 = xor i64 %460, %445
  %462 = xor i64 %461, %456
  %463 = mul i64 %441, %462
  %464 = trunc i64 %463 to i1
  %465 = select i1 %376, i1 %428, i1 %464
  %466 = icmp slt i32 %313, %6
  %467 = add i64 %121, 4926401415391002358
  %468 = sub i64 0, %121
  %469 = sub i64 4926401415391002358, %468
  %470 = sext i32 %5 to i64
  %471 = or i64 %470, 3840546417949548699
  %472 = and i64 3840546417949548699, %470
  %473 = xor i64 3840546417949548699, %470
  %474 = or i64 %472, %473
  %475 = sext i32 %251 to i64
  %476 = or i64 %475, 7747896374505535096
  %477 = xor i64 %475, -1
  %478 = and i64 7747896374505535096, %477
  %479 = add i64 %478, %475
  %480 = xor i64 %467, %474
  %481 = xor i64 %480, %471
  %482 = xor i64 %481, %469
  %483 = xor i64 %482, -5110766469572594927
  %484 = xor i64 %483, %476
  %485 = xor i64 %484, %479
  %486 = sext i32 %207 to i64
  %487 = add i64 %486, -5283079554044594667
  %488 = and i64 -5283079554044594667, %486
  %489 = or i64 -5283079554044594667, %486
  %490 = add i64 %488, %489
  %491 = sext i32 %207 to i64
  %492 = and i64 %491, 8061608459399942224
  %493 = xor i64 %491, -1
  %494 = xor i64 8061608459399942224, %493
  %495 = and i64 %494, 8061608459399942224
  %496 = xor i64 %490, %495
  %497 = xor i64 %496, 0
  %498 = xor i64 %497, %492
  %499 = xor i64 %498, %487
  %500 = mul i64 %485, %499
  %501 = trunc i64 %500 to i1
  %502 = select i1 %465, i1 %466, i1 %501
  br i1 %502, label %503, label %615

503:                                              ; preds = %292
  %504 = mul nsw i32 %320, %6
  %505 = add nsw i32 %504, %313
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds float, float* %3, i64 %506
  %508 = load float, float* %507, align 4, !tbaa !13
  %509 = fcmp ogt float %305, %508
  br i1 %509, label %510, label %615

510:                                              ; preds = %503
  store float %305, float* %507, align 4, !tbaa !13
  %511 = sext i32 %332 to i64
  %512 = or i64 %511, 4214640136439813318
  %513 = xor i64 %511, -1
  %514 = and i64 %513, 3424321346168669758
  %515 = and i64 %511, -3424321346168669759
  %516 = or i64 %514, %515
  %517 = xor i64 1583238197816759032, %516
  %518 = xor i64 %511, -1
  %519 = or i64 -4214640136439813319, %518
  %520 = xor i64 %519, -1
  %521 = and i64 %520, -1
  %522 = or i64 %517, %521
  %523 = sext i32 %504 to i64
  %524 = and i64 %523, 8608734887865536584
  %525 = xor i64 %523, -1
  %526 = xor i64 8608734887865536584, %525
  %527 = and i64 %526, 8608734887865536584
  %528 = sext i32 %504 to i64
  %529 = or i64 %528, 4430179193245166715
  %530 = xor i64 %528, -1
  %531 = and i64 %530, 8563724024844940075
  %532 = and i64 %528, -8563724024844940076
  %533 = or i64 %531, %532
  %534 = xor i64 5450302373986049872, %533
  %535 = xor i64 %528, -1
  %536 = or i64 -4430179193245166716, %535
  %537 = xor i64 %536, -1
  %538 = and i64 %537, -1
  %539 = or i64 %534, %538
  %540 = xor i64 %539, %522
  %541 = xor i64 %540, %512
  %542 = xor i64 %541, %524
  %543 = xor i64 %542, 5585664982702869423
  %544 = xor i64 %543, %529
  %545 = xor i64 %544, %527
  %546 = or i64 %121, -7446760825404842698
  %547 = xor i64 %121, -1
  %548 = and i64 %547, 5431113294152319815
  %549 = and i64 %121, -5431113294152319816
  %550 = or i64 %548, %549
  %551 = xor i64 -3172510235299750287, %550
  %552 = xor i64 %121, -1
  %553 = or i64 7446760825404842697, %552
  %554 = xor i64 %553, -1
  %555 = and i64 %554, -1
  %556 = or i64 %551, %555
  %557 = and i64 %506, -451972622027091360
  %558 = xor i64 %506, -1
  %559 = xor i64 -451972622027091360, %558
  %560 = and i64 %559, -451972622027091360
  %561 = xor i64 0, %560
  %562 = xor i64 %561, %546
  %563 = xor i64 %562, %557
  %564 = xor i64 %563, %556
  %565 = mul i64 %545, %564
  %566 = trunc i64 %565 to i32
  %567 = icmp sgt i32 %332, %566
  %568 = sext i32 %313 to i64
  %569 = or i64 %568, -1756403122572895766
  %570 = xor i64 %568, -1
  %571 = and i64 -1756403122572895766, %570
  %572 = add i64 %571, %568
  %573 = sext i32 %53 to i64
  %574 = or i64 %573, 4756080058159791862
  %575 = and i64 4756080058159791862, %573
  %576 = xor i64 4756080058159791862, %573
  %577 = or i64 %575, %576
  %578 = xor i64 %569, -2005140544039310499
  %579 = xor i64 %578, %574
  %580 = xor i64 %579, %577
  %581 = xor i64 %580, %572
  %582 = add i64 %121, 8596015741553547358
  %583 = sub i64 0, %121
  %584 = add i64 -8596015741553547358, %583
  %585 = sub i64 0, %584
  %586 = sext i32 %504 to i64
  %587 = or i64 %586, -4345115905087900107
  %588 = xor i64 %586, -1
  %589 = and i64 %588, 8694580989108594496
  %590 = and i64 %586, -8694580989108594497
  %591 = or i64 %589, %590
  %592 = xor i64 -4964559651267194507, %591
  %593 = xor i64 %586, -1
  %594 = or i64 4345115905087900106, %593
  %595 = xor i64 %594, -1
  %596 = and i64 %595, -1
  %597 = or i64 %592, %596
  %598 = add i64 %506, 3969556177136481312
  %599 = and i64 3969556177136481312, %506
  %600 = or i64 3969556177136481312, %506
  %601 = add i64 %599, %600
  %602 = xor i64 %601, %598
  %603 = xor i64 %602, %587
  %604 = xor i64 %603, %582
  %605 = xor i64 %604, %597
  %606 = xor i64 %605, 0
  %607 = xor i64 %606, %585
  %608 = mul i64 %581, %607
  %609 = trunc i64 %608 to i32
  %610 = select i1 %567, i32 %332, i32 %609
  %611 = zext i32 %610 to i64
  %612 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %611
  %613 = load i8, i8* %612, align 1, !tbaa !10
  %614 = getelementptr inbounds i8, i8* %4, i64 %506
  store i8 %613, i8* %614, align 1, !tbaa !10
  br label %615

615:                                              ; preds = %510, %503, %292
  %616 = fpext float %293 to double
  %617 = fadd double %616, 7.000000e-02
  %618 = fptrunc double %617 to float
  %619 = fpext float %618 to double
  %620 = fcmp olt double %619, 6.280000e+00
  br i1 %620, label %292, label %621, !llvm.loop !18

621:                                              ; preds = %925, %615
  %622 = phi double [ %928, %925 ], [ 0.000000e+00, %615 ]
  %623 = phi float [ %927, %925 ], [ 0.000000e+00, %615 ]
  %624 = call fastcc float @_ZL3cosf(float %623) #9
  %625 = call fastcc float @_ZL3sinf(float %623) #9
  %626 = fadd float %624, %169
  %627 = fmul float %166, %626
  %628 = fmul float %168, %627
  %629 = fmul float %167, %625
  %630 = fsub float %628, %629
  %631 = fmul float %167, %627
  %632 = fmul float %168, %625
  %633 = fadd float %632, %631
  %634 = fadd float %633, 5.000000e+00
  %635 = fdiv float 1.000000e+00, %634
  %636 = fmul float %635, 3.000000e+01
  %637 = fmul float %170, %626
  %638 = fmul float %171, %637
  %639 = fmul float %172, %630
  %640 = fadd float %638, %639
  %641 = fmul float %640, %636
  %642 = fadd float %641, %208
  %643 = fptosi float %642 to i32
  %644 = fmul float %635, 1.500000e+01
  %645 = fmul float %172, %637
  %646 = fmul float %171, %630
  %647 = fsub float %645, %646
  %648 = fmul float %647, %644
  %649 = fadd float %648, %291
  %650 = fptosi float %649 to i32
  %651 = fmul float %166, %624
  %652 = fmul float %168, %651
  %653 = fsub float %629, %652
  %654 = fmul float %171, %653
  %655 = fmul float %167, %651
  %656 = fsub float %654, %655
  %657 = fsub float %656, %632
  %658 = fmul float %170, %624
  %659 = fmul float %172, %658
  %660 = fsub float %657, %659
  %661 = fmul float %660, 8.000000e+00
  %662 = fptosi float %661 to i32
  %663 = icmp slt i32 %650, %5
  %664 = sext i32 %53 to i64
  %665 = add i64 %664, -729029977801946405
  %666 = add i64 -5556473528795965532, %664
  %667 = add i64 %666, 4827443550994019127
  %668 = sext i32 %5 to i64
  %669 = and i64 %668, 1185525842825294744
  %670 = xor i64 %668, -1
  %671 = xor i64 1185525842825294744, %670
  %672 = and i64 %671, 1185525842825294744
  %673 = xor i64 %667, -3264148687123496329
  %674 = xor i64 %673, %669
  %675 = xor i64 %674, %672
  %676 = xor i64 %675, %665
  %677 = sext i32 %290 to i64
  %678 = and i64 %677, 6713004747038661021
  %679 = xor i64 %677, -1
  %680 = xor i64 6713004747038661021, %679
  %681 = and i64 %680, 6713004747038661021
  %682 = sext i32 %5 to i64
  %683 = or i64 %682, 918099758332446536
  %684 = xor i64 %682, -1
  %685 = and i64 %684, 7876872500048981272
  %686 = and i64 %682, -7876872500048981273
  %687 = or i64 %685, %686
  %688 = xor i64 7056572252358273616, %687
  %689 = xor i64 %682, -1
  %690 = or i64 -918099758332446537, %689
  %691 = xor i64 %690, -1
  %692 = and i64 %691, -1
  %693 = or i64 %688, %692
  %694 = sext i32 %5 to i64
  %695 = or i64 %694, 4751186473872857434
  %696 = xor i64 %694, -1
  %697 = and i64 4751186473872857434, %696
  %698 = add i64 %697, %694
  %699 = xor i64 %683, 0
  %700 = xor i64 %699, %681
  %701 = xor i64 %700, %698
  %702 = xor i64 %701, %693
  %703 = xor i64 %702, %678
  %704 = xor i64 %703, %695
  %705 = mul i64 %676, %704
  %706 = trunc i64 %705 to i32
  %707 = icmp sgt i32 %650, %706
  %708 = and i1 %663, %707
  %709 = or i64 %121, 4417455882346416871
  %710 = xor i64 %121, -1
  %711 = and i64 %710, -2196958895619474843
  %712 = and i64 %121, 2196958895619474842
  %713 = or i64 %711, %712
  %714 = xor i64 -2535771514372837246, %713
  %715 = xor i64 %121, -1
  %716 = or i64 -4417455882346416872, %715
  %717 = xor i64 %716, -1
  %718 = and i64 %717, -1
  %719 = or i64 %714, %718
  %720 = sext i32 %5 to i64
  %721 = or i64 %720, -2128151522138553237
  %722 = xor i64 %720, -1
  %723 = and i64 %722, -66665978799294769
  %724 = and i64 %720, 66665978799294768
  %725 = or i64 %723, %724
  %726 = xor i64 2117939574900126372, %725
  %727 = xor i64 %720, -1
  %728 = or i64 2128151522138553236, %727
  %729 = xor i64 %728, -1
  %730 = and i64 %729, -1
  %731 = or i64 %726, %730
  %732 = xor i64 %721, %709
  %733 = xor i64 %732, %719
  %734 = xor i64 %733, -2347507844030197717
  %735 = xor i64 %734, %731
  %736 = sext i32 %251 to i64
  %737 = and i64 %736, -719062267331851438
  %738 = or i64 719062267331851437, %736
  %739 = sub i64 %738, 719062267331851437
  %740 = sext i32 %2 to i64
  %741 = and i64 %740, 1258405667892438229
  %742 = or i64 -1258405667892438230, %740
  %743 = sub i64 %742, -1258405667892438230
  %744 = sext i32 %6 to i64
  %745 = and i64 %744, 3345939373022575215
  %746 = xor i64 %744, -1
  %747 = or i64 -3345939373022575216, %746
  %748 = xor i64 %747, -1
  %749 = and i64 %748, -1
  %750 = xor i64 %737, 0
  %751 = xor i64 %750, %739
  %752 = xor i64 %751, %749
  %753 = xor i64 %752, %743
  %754 = xor i64 %753, %741
  %755 = xor i64 %754, %745
  %756 = mul i64 %735, %755
  %757 = trunc i64 %756 to i32
  %758 = icmp sgt i32 %643, %757
  %759 = sext i32 %313 to i64
  %760 = or i64 %759, -4662011427568606158
  %761 = xor i64 %759, -1
  %762 = and i64 %761, 3617385071617580775
  %763 = and i64 %759, -3617385071617580776
  %764 = or i64 %762, %763
  %765 = xor i64 -8250948834807039275, %764
  %766 = xor i64 %759, -1
  %767 = or i64 4662011427568606157, %766
  %768 = xor i64 %767, -1
  %769 = and i64 %768, -1
  %770 = or i64 %765, %769
  %771 = sext i32 %290 to i64
  %772 = and i64 %771, -3653824532921421249
  %773 = or i64 3653824532921421248, %771
  %774 = sub i64 %773, 3653824532921421248
  %775 = xor i64 -9118763917684014031, %760
  %776 = xor i64 %775, %774
  %777 = xor i64 %776, %772
  %778 = xor i64 %777, %770
  %779 = sext i32 %5 to i64
  %780 = add i64 %779, -8425615173911455037
  %781 = sub i64 0, %779
  %782 = sub i64 -8425615173911455037, %781
  %783 = sext i32 %320 to i64
  %784 = add i64 %783, 386047629231429612
  %785 = add i64 2112742830128702608, %783
  %786 = add i64 %785, -1726695200897272996
  %787 = sext i32 %332 to i64
  %788 = add i64 %787, -6859163532242249375
  %789 = sub i64 0, %787
  %790 = sub i64 -6859163532242249375, %789
  %791 = xor i64 %790, 0
  %792 = xor i64 %791, %780
  %793 = xor i64 %792, %786
  %794 = xor i64 %793, %788
  %795 = xor i64 %794, %784
  %796 = xor i64 %795, %782
  %797 = mul i64 %778, %796
  %798 = trunc i64 %797 to i1
  %799 = select i1 %708, i1 %758, i1 %798
  %800 = icmp slt i32 %643, %6
  %801 = and i64 %121, -8396813964152920092
  %802 = xor i64 %121, -1
  %803 = or i64 8396813964152920091, %802
  %804 = xor i64 %803, -1
  %805 = and i64 %804, -1
  %806 = sext i32 %332 to i64
  %807 = and i64 %806, 3417375086976019385
  %808 = or i64 -3417375086976019386, %806
  %809 = sub i64 %808, -3417375086976019386
  %810 = xor i64 %807, %809
  %811 = xor i64 %810, -2211253934845643303
  %812 = xor i64 %811, %805
  %813 = xor i64 %812, %801
  %814 = sext i32 %6 to i64
  %815 = add i64 %814, -4689383307028796575
  %816 = add i64 1482007913993821234, %814
  %817 = sub i64 %816, 6171391221022617809
  %818 = sext i32 %251 to i64
  %819 = or i64 %818, 5050463667434469607
  %820 = xor i64 %818, -1
  %821 = and i64 5050463667434469607, %820
  %822 = add i64 %821, %818
  %823 = or i64 %121, 5662913975854431943
  %824 = xor i64 %121, -1
  %825 = and i64 5662913975854431943, %824
  %826 = add i64 %825, %121
  %827 = xor i64 0, %822
  %828 = xor i64 %827, %826
  %829 = xor i64 %828, %823
  %830 = xor i64 %829, %815
  %831 = xor i64 %830, %819
  %832 = xor i64 %831, %817
  %833 = mul i64 %813, %832
  %834 = trunc i64 %833 to i1
  %835 = select i1 %799, i1 %800, i1 %834
  br i1 %835, label %836, label %925

836:                                              ; preds = %621
  %837 = mul nsw i32 %650, %6
  %838 = add nsw i32 %837, %643
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds float, float* %3, i64 %839
  %841 = load float, float* %840, align 4, !tbaa !13
  %842 = fcmp ogt float %635, %841
  br i1 %842, label %843, label %925

843:                                              ; preds = %836
  store float %635, float* %840, align 4, !tbaa !13
  %844 = sext i32 %320 to i64
  %845 = and i64 %844, 5429761671207597130
  %846 = or i64 -5429761671207597131, %844
  %847 = sub i64 %846, -5429761671207597131
  %848 = or i64 %54, 1688030866439680670
  %849 = and i64 1688030866439680670, %54
  %850 = xor i64 1688030866439680670, %54
  %851 = or i64 %849, %850
  %852 = xor i64 %845, 643559210740079855
  %853 = xor i64 %852, %847
  %854 = xor i64 %853, %851
  %855 = xor i64 %854, %848
  %856 = sext i32 %313 to i64
  %857 = and i64 %856, -2590841206632864289
  %858 = or i64 2590841206632864288, %856
  %859 = sub i64 %858, 2590841206632864288
  %860 = and i64 %121, 2434114081088620091
  %861 = or i64 -2434114081088620092, %121
  %862 = sub i64 %861, -2434114081088620092
  %863 = xor i64 %862, %857
  %864 = xor i64 %863, 0
  %865 = xor i64 %864, %860
  %866 = xor i64 %865, %859
  %867 = mul i64 %855, %866
  %868 = trunc i64 %867 to i32
  %869 = icmp sgt i32 %662, %868
  %870 = or i64 %839, -3913205151128868488
  %871 = and i64 -3913205151128868488, %839
  %872 = xor i64 -3913205151128868488, %839
  %873 = or i64 %871, %872
  %874 = sext i32 %6 to i64
  %875 = and i64 %874, 3623548943566241112
  %876 = xor i64 %874, -1
  %877 = or i64 -3623548943566241113, %876
  %878 = xor i64 %877, -1
  %879 = and i64 %878, -1
  %880 = sext i32 %313 to i64
  %881 = or i64 %880, -8621931879042790694
  %882 = xor i64 %880, -1
  %883 = and i64 %882, -2990716580281269640
  %884 = and i64 %880, 2990716580281269639
  %885 = or i64 %883, %884
  %886 = xor i64 6784226156406048930, %885
  %887 = xor i64 %880, -1
  %888 = or i64 8621931879042790693, %887
  %889 = xor i64 %888, -1
  %890 = and i64 %889, -1
  %891 = or i64 %886, %890
  %892 = xor i64 %891, %873
  %893 = xor i64 %892, 7337872863553825357
  %894 = xor i64 %893, %881
  %895 = xor i64 %894, %875
  %896 = xor i64 %895, %870
  %897 = xor i64 %896, %879
  %898 = sext i32 %837 to i64
  %899 = and i64 %898, 1893158912176563830
  %900 = or i64 -1893158912176563831, %898
  %901 = sub i64 %900, -1893158912176563831
  %902 = sext i32 %662 to i64
  %903 = or i64 %902, 2612985697377339858
  %904 = xor i64 %902, -1
  %905 = and i64 2612985697377339858, %904
  %906 = add i64 %905, %902
  %907 = sext i32 %650 to i64
  %908 = add i64 %907, -4466048169900121272
  %909 = sub i64 0, %907
  %910 = add i64 4466048169900121272, %909
  %911 = sub i64 0, %910
  %912 = xor i64 %903, %906
  %913 = xor i64 %912, 0
  %914 = xor i64 %913, %911
  %915 = xor i64 %914, %901
  %916 = xor i64 %915, %908
  %917 = xor i64 %916, %899
  %918 = mul i64 %897, %917
  %919 = trunc i64 %918 to i32
  %920 = select i1 %869, i32 %662, i32 %919
  %921 = zext i32 %920 to i64
  %922 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %921
  %923 = load i8, i8* %922, align 1, !tbaa !10
  %924 = getelementptr inbounds i8, i8* %4, i64 %839
  store i8 %923, i8* %924, align 1, !tbaa !10
  br label %925

925:                                              ; preds = %843, %836, %621
  %926 = fadd double %622, 7.000000e-02
  %927 = fptrunc double %926 to float
  %928 = fpext float %927 to double
  %929 = fcmp olt double %928, 6.280000e+00
  br i1 %929, label %621, label %934, !llvm.loop !19

930:                                              ; preds = %1205
  %931 = fcmp une float %167, 0.000000e+00
  %932 = fmul float %167, 2.000000e+00
  %933 = select i1 %931, float %932, float %167
  br label %1211

934:                                              ; preds = %1205, %925
  %935 = phi double [ %1208, %1205 ], [ 0.000000e+00, %925 ]
  %936 = phi float [ %1207, %1205 ], [ 0.000000e+00, %925 ]
  %937 = call fastcc float @_ZL3cosf(float %936) #9
  %938 = call fastcc float @_ZL3sinf(float %936) #9
  %939 = fadd float %937, %169
  %940 = fmul float %166, %939
  %941 = fmul float %168, %940
  %942 = fmul float %167, %938
  %943 = fsub float %941, %942
  %944 = fmul float %167, %940
  %945 = fmul float %168, %938
  %946 = fadd float %945, %944
  %947 = fadd float %946, 5.000000e+00
  %948 = fdiv float 1.000000e+00, %947
  %949 = fmul float %948, 3.000000e+01
  %950 = fmul float %170, %939
  %951 = fmul float %171, %950
  %952 = fmul float %172, %943
  %953 = fadd float %951, %952
  %954 = fmul float %953, %949
  %955 = fadd float %954, %208
  %956 = fptosi float %955 to i32
  %957 = fmul float %948, 1.500000e+01
  %958 = fmul float %172, %950
  %959 = fmul float %171, %943
  %960 = fsub float %958, %959
  %961 = fmul float %960, %957
  %962 = fadd float %961, %291
  %963 = fptosi float %962 to i32
  %964 = fmul float %166, %937
  %965 = fmul float %168, %964
  %966 = fsub float %942, %965
  %967 = fmul float %171, %966
  %968 = fmul float %167, %964
  %969 = fsub float %967, %968
  %970 = fsub float %969, %945
  %971 = fmul float %170, %937
  %972 = fmul float %172, %971
  %973 = fsub float %970, %972
  %974 = fmul float %973, 8.000000e+00
  %975 = fptosi float %974 to i32
  %976 = icmp slt i32 %963, %5
  %977 = sext i32 %332 to i64
  %978 = add i64 %977, -4523556395583034458
  %979 = add i64 7831563389977205074, %977
  %980 = sub i64 %979, -6091624288149312084
  %981 = sext i32 %662 to i64
  %982 = or i64 %981, 2865290196322589083
  %983 = xor i64 %981, -1
  %984 = and i64 2865290196322589083, %983
  %985 = add i64 %984, %981
  %986 = xor i64 %980, %985
  %987 = xor i64 %986, %982
  %988 = xor i64 %987, 2466585816822439033
  %989 = xor i64 %988, %978
  %990 = sext i32 %650 to i64
  %991 = or i64 %990, 3265351661987826044
  %992 = and i64 3265351661987826044, %990
  %993 = xor i64 3265351661987826044, %990
  %994 = or i64 %992, %993
  %995 = sext i32 %2 to i64
  %996 = and i64 %995, 918525686505549446
  %997 = xor i64 %995, -1
  %998 = xor i64 918525686505549446, %997
  %999 = and i64 %998, 918525686505549446
  %1000 = xor i64 %991, %994
  %1001 = xor i64 %1000, %996
  %1002 = xor i64 %1001, %999
  %1003 = xor i64 %1002, 0
  %1004 = mul i64 %989, %1003
  %1005 = trunc i64 %1004 to i32
  %1006 = icmp sgt i32 %963, %1005
  %1007 = and i1 %976, %1006
  %1008 = sext i32 %251 to i64
  %1009 = add i64 %1008, -5452623729953728786
  %1010 = sub i64 0, %1008
  %1011 = sub i64 -5452623729953728786, %1010
  %1012 = and i64 %121, 6759247467654197813
  %1013 = or i64 -6759247467654197814, %121
  %1014 = sub i64 %1013, -6759247467654197814
  %1015 = sext i32 %313 to i64
  %1016 = add i64 %1015, 6004097222438133468
  %1017 = xor i64 6004097222438133468, %1015
  %1018 = and i64 6004097222438133468, %1015
  %1019 = mul i64 2, %1018
  %1020 = add i64 %1017, %1019
  %1021 = xor i64 %1016, %1012
  %1022 = xor i64 %1021, %1020
  %1023 = xor i64 %1022, -1295267283838947859
  %1024 = xor i64 %1023, %1014
  %1025 = xor i64 %1024, %1009
  %1026 = xor i64 %1025, %1011
  %1027 = sext i32 %313 to i64
  %1028 = add i64 %1027, 1054146880303320081
  %1029 = sub i64 0, %1027
  %1030 = sub i64 1054146880303320081, %1029
  %1031 = sext i32 %251 to i64
  %1032 = or i64 %1031, -685995184200022741
  %1033 = and i64 -685995184200022741, %1031
  %1034 = xor i64 -685995184200022741, %1031
  %1035 = or i64 %1033, %1034
  %1036 = xor i64 0, %1030
  %1037 = xor i64 %1036, %1032
  %1038 = xor i64 %1037, %1035
  %1039 = xor i64 %1038, %1028
  %1040 = mul i64 %1026, %1039
  %1041 = trunc i64 %1040 to i32
  %1042 = icmp sgt i32 %956, %1041
  %1043 = sext i32 %313 to i64
  %1044 = add i64 %1043, -3242596610949677198
  %1045 = sub i64 0, %1043
  %1046 = sub i64 -3242596610949677198, %1045
  %1047 = sext i32 %251 to i64
  %1048 = or i64 %1047, 3927089136385822045
  %1049 = xor i64 %1047, -1
  %1050 = and i64 3927089136385822045, %1049
  %1051 = add i64 %1050, %1047
  %1052 = xor i64 %1044, %1046
  %1053 = xor i64 %1052, %1051
  %1054 = xor i64 %1053, %1048
  %1055 = xor i64 %1054, -3093545533490392689
  %1056 = sext i32 %53 to i64
  %1057 = and i64 %1056, -4428746181937985321
  %1058 = xor i64 %1056, -1
  %1059 = xor i64 -4428746181937985321, %1058
  %1060 = and i64 %1059, -4428746181937985321
  %1061 = sext i32 %6 to i64
  %1062 = and i64 %1061, -9022960968548318634
  %1063 = xor i64 %1061, -1
  %1064 = or i64 9022960968548318633, %1063
  %1065 = xor i64 %1064, -1
  %1066 = and i64 %1065, -1
  %1067 = sext i32 %2 to i64
  %1068 = or i64 %1067, -1717390363338300318
  %1069 = and i64 -1717390363338300318, %1067
  %1070 = xor i64 -1717390363338300318, %1067
  %1071 = or i64 %1069, %1070
  %1072 = xor i64 0, %1071
  %1073 = xor i64 %1072, %1066
  %1074 = xor i64 %1073, %1060
  %1075 = xor i64 %1074, %1068
  %1076 = xor i64 %1075, %1062
  %1077 = xor i64 %1076, %1057
  %1078 = mul i64 %1055, %1077
  %1079 = trunc i64 %1078 to i1
  %1080 = select i1 %1007, i1 %1042, i1 %1079
  %1081 = icmp slt i32 %956, %6
  %1082 = sext i32 %320 to i64
  %1083 = and i64 %1082, 8488832307688131717
  %1084 = xor i64 %1082, -1
  %1085 = or i64 -8488832307688131718, %1084
  %1086 = xor i64 %1085, -1
  %1087 = and i64 %1086, -1
  %1088 = sext i32 %2 to i64
  %1089 = add i64 %1088, 1439951969957726518
  %1090 = xor i64 1439951969957726518, %1088
  %1091 = and i64 1439951969957726518, %1088
  %1092 = mul i64 2, %1091
  %1093 = add i64 %1090, %1092
  %1094 = xor i64 4272879644330495133, %1087
  %1095 = xor i64 %1094, %1093
  %1096 = xor i64 %1095, %1083
  %1097 = xor i64 %1096, %1089
  %1098 = sext i32 %251 to i64
  %1099 = or i64 %1098, 1415490137316127555
  %1100 = and i64 1415490137316127555, %1098
  %1101 = xor i64 1415490137316127555, %1098
  %1102 = or i64 %1100, %1101
  %1103 = and i64 %54, 862332545373560226
  %1104 = xor i64 %54, -1
  %1105 = or i64 -862332545373560227, %1104
  %1106 = xor i64 %1105, -1
  %1107 = and i64 %1106, -1
  %1108 = sext i32 %313 to i64
  %1109 = add i64 %1108, -5654343972403783727
  %1110 = add i64 4649688326336695533, %1108
  %1111 = add i64 %1110, 8142711774969072356
  %1112 = xor i64 %1103, %1099
  %1113 = xor i64 %1112, %1102
  %1114 = xor i64 %1113, 0
  %1115 = xor i64 %1114, %1111
  %1116 = xor i64 %1115, %1109
  %1117 = xor i64 %1116, %1107
  %1118 = mul i64 %1097, %1117
  %1119 = trunc i64 %1118 to i1
  %1120 = select i1 %1080, i1 %1081, i1 %1119
  br i1 %1120, label %1121, label %1205

1121:                                             ; preds = %934
  %1122 = mul nsw i32 %963, %6
  %1123 = add nsw i32 %1122, %956
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds float, float* %3, i64 %1124
  %1126 = load float, float* %1125, align 4, !tbaa !13
  %1127 = fcmp ogt float %948, %1126
  br i1 %1127, label %1128, label %1205

1128:                                             ; preds = %1121
  store float %948, float* %1125, align 4, !tbaa !13
  %1129 = sext i32 %1123 to i64
  %1130 = and i64 %1129, 9065757253841119544
  %1131 = xor i64 %1129, -1
  %1132 = or i64 -9065757253841119545, %1131
  %1133 = xor i64 %1132, -1
  %1134 = and i64 %1133, -1
  %1135 = sext i32 %5 to i64
  %1136 = and i64 %1135, 9091353949923486286
  %1137 = or i64 -9091353949923486287, %1135
  %1138 = sub i64 %1137, -9091353949923486287
  %1139 = xor i64 %1136, %1134
  %1140 = xor i64 %1139, %1130
  %1141 = xor i64 %1140, %1138
  %1142 = xor i64 %1141, -1914792318316040247
  %1143 = sext i32 %662 to i64
  %1144 = and i64 %1143, -6303497599618101458
  %1145 = or i64 6303497599618101457, %1143
  %1146 = sub i64 %1145, 6303497599618101457
  %1147 = add i64 %1124, -8978609849058869876
  %1148 = xor i64 -8978609849058869876, %1124
  %1149 = and i64 -8978609849058869876, %1124
  %1150 = mul i64 2, %1149
  %1151 = add i64 %1148, %1150
  %1152 = sext i32 %320 to i64
  %1153 = and i64 %1152, -2867896059770871838
  %1154 = or i64 2867896059770871837, %1152
  %1155 = sub i64 %1154, 2867896059770871837
  %1156 = xor i64 %1153, %1144
  %1157 = xor i64 %1156, %1146
  %1158 = xor i64 %1157, 0
  %1159 = xor i64 %1158, %1147
  %1160 = xor i64 %1159, %1151
  %1161 = xor i64 %1160, %1155
  %1162 = mul i64 %1142, %1161
  %1163 = trunc i64 %1162 to i32
  %1164 = icmp sgt i32 %975, %1163
  %1165 = sext i32 %1123 to i64
  %1166 = and i64 %1165, 7073292254963167203
  %1167 = or i64 -7073292254963167204, %1165
  %1168 = sub i64 %1167, -7073292254963167204
  %1169 = sext i32 %956 to i64
  %1170 = add i64 %1169, -7807506440261613705
  %1171 = sub i64 0, %1169
  %1172 = add i64 7807506440261613705, %1171
  %1173 = sub i64 0, %1172
  %1174 = xor i64 %1166, 5004249166642091461
  %1175 = xor i64 %1174, %1168
  %1176 = xor i64 %1175, %1173
  %1177 = xor i64 %1176, %1170
  %1178 = sext i32 %956 to i64
  %1179 = add i64 %1178, 4109103207098261212
  %1180 = and i64 4109103207098261212, %1178
  %1181 = or i64 4109103207098261212, %1178
  %1182 = add i64 %1180, %1181
  %1183 = sext i32 %251 to i64
  %1184 = and i64 %1183, 7203437309909791367
  %1185 = or i64 -7203437309909791368, %1183
  %1186 = sub i64 %1185, -7203437309909791368
  %1187 = sext i32 %662 to i64
  %1188 = add i64 %1187, 8207214592794122480
  %1189 = and i64 8207214592794122480, %1187
  %1190 = or i64 8207214592794122480, %1187
  %1191 = add i64 %1189, %1190
  %1192 = xor i64 %1186, %1188
  %1193 = xor i64 %1192, 0
  %1194 = xor i64 %1193, %1184
  %1195 = xor i64 %1194, %1191
  %1196 = xor i64 %1195, %1182
  %1197 = xor i64 %1196, %1179
  %1198 = mul i64 %1177, %1197
  %1199 = trunc i64 %1198 to i32
  %1200 = select i1 %1164, i32 %975, i32 %1199
  %1201 = zext i32 %1200 to i64
  %1202 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %1201
  %1203 = load i8, i8* %1202, align 1, !tbaa !10
  %1204 = getelementptr inbounds i8, i8* %4, i64 %1124
  store i8 %1203, i8* %1204, align 1, !tbaa !10
  br label %1205

1205:                                             ; preds = %1128, %1121, %934
  %1206 = fadd double %935, 7.000000e-02
  %1207 = fptrunc double %1206 to float
  %1208 = fpext float %1207 to double
  %1209 = fcmp olt double %1208, 6.280000e+00
  br i1 %1209, label %934, label %930, !llvm.loop !20

1210:                                             ; preds = %1542
  ret void

1211:                                             ; preds = %1542, %930
  %1212 = phi double [ 0.000000e+00, %930 ], [ %1545, %1542 ]
  %1213 = phi i32 [ 0, %930 ], [ %1248, %1542 ]
  %1214 = phi float [ 0.000000e+00, %930 ], [ %1544, %1542 ]
  %1215 = sext i32 %290 to i64
  %1216 = and i64 %1215, -7439362255668561444
  %1217 = xor i64 %1215, -1
  %1218 = or i64 7439362255668561443, %1217
  %1219 = xor i64 %1218, -1
  %1220 = and i64 %1219, -1
  %1221 = sext i32 %956 to i64
  %1222 = or i64 %1221, -7685155295280040829
  %1223 = xor i64 %1221, -1
  %1224 = and i64 -7685155295280040829, %1223
  %1225 = add i64 %1224, %1221
  %1226 = xor i64 %1220, %1225
  %1227 = xor i64 %1226, %1216
  %1228 = xor i64 %1227, 1445228069302256643
  %1229 = xor i64 %1228, %1222
  %1230 = sext i32 %643 to i64
  %1231 = and i64 %1230, 868878120093457467
  %1232 = xor i64 %1230, -1
  %1233 = or i64 -868878120093457468, %1232
  %1234 = xor i64 %1233, -1
  %1235 = and i64 %1234, -1
  %1236 = sext i32 %963 to i64
  %1237 = and i64 %1236, -7455682298041886731
  %1238 = xor i64 %1236, -1
  %1239 = or i64 7455682298041886730, %1238
  %1240 = xor i64 %1239, -1
  %1241 = and i64 %1240, -1
  %1242 = xor i64 %1231, %1235
  %1243 = xor i64 %1242, %1237
  %1244 = xor i64 %1243, %1241
  %1245 = xor i64 %1244, -3461980224795933013
  %1246 = mul i64 %1229, %1245
  %1247 = trunc i64 %1246 to i32
  %1248 = add nuw nsw i32 %1213, %1247
  %1249 = sitofp i32 %1213 to float
  %1250 = fadd float %166, %1249
  %1251 = call fastcc float @_ZL3cosf(float %1214) #9
  %1252 = fcmp une float %1250, 0.000000e+00
  %1253 = fmul float %1250, 2.000000e+00
  %1254 = fmul float %1251, 2.000000e+00
  %1255 = select i1 %1252, float %1251, float %1254
  %1256 = select i1 %1252, float %1253, float %1250
  %1257 = call fastcc float @_ZL3sinf(float %1214) #9
  %1258 = fmul float %1257, 2.000000e+00
  %1259 = select i1 %931, float %1257, float %1258
  %1260 = fadd float %1255, %169
  %1261 = fmul float %1256, %1260
  %1262 = fmul float %168, %1261
  %1263 = fmul float %933, %1259
  %1264 = fsub float %1262, %1263
  %1265 = fcmp une float %1260, 0.000000e+00
  %1266 = fmul float %1264, 2.000000e+00
  %1267 = fmul float %1260, 2.000000e+00
  %1268 = select i1 %1265, float %1260, float %1267
  %1269 = select i1 %1265, float %1266, float %1264
  %1270 = fmul float %1256, %1268
  %1271 = fmul float %933, %1270
  %1272 = fmul float %168, %1259
  %1273 = fadd float %1272, %1271
  %1274 = fadd float %1273, 5.000000e+00
  %1275 = fdiv float 1.000000e+00, %1274
  %1276 = fmul float %1275, 3.000000e+01
  %1277 = fmul float %170, %1268
  %1278 = fmul float %171, %1277
  %1279 = fmul float %172, %1269
  %1280 = fadd float %1278, %1279
  %1281 = fmul float %1280, %1276
  %1282 = fadd float %1281, %208
  %1283 = fptosi float %1282 to i32
  %1284 = fmul float %1275, 1.500000e+01
  %1285 = fmul float %172, %1277
  %1286 = fmul float %171, %1269
  %1287 = fsub float %1285, %1286
  %1288 = fmul float %1287, %1284
  %1289 = fadd float %1288, %291
  %1290 = fptosi float %1289 to i32
  %1291 = fmul float %1256, %1255
  %1292 = fmul float %168, %1291
  %1293 = fsub float %1263, %1292
  %1294 = fmul float %171, %1293
  %1295 = fmul float %933, %1291
  %1296 = fsub float %1294, %1295
  %1297 = fsub float %1296, %1272
  %1298 = fmul float %170, %1255
  %1299 = fmul float %172, %1298
  %1300 = fsub float %1297, %1299
  %1301 = fmul float %1300, 8.000000e+00
  %1302 = fptosi float %1301 to i32
  %1303 = icmp slt i32 %1290, %5
  %1304 = or i64 %54, -2791994703458018673
  %1305 = and i64 -2791994703458018673, %54
  %1306 = xor i64 -2791994703458018673, %54
  %1307 = or i64 %1305, %1306
  %1308 = sext i32 %2 to i64
  %1309 = or i64 %1308, -842524211580091529
  %1310 = xor i64 %1308, -1
  %1311 = and i64 %1310, -2407443267964525652
  %1312 = and i64 %1308, 2407443267964525651
  %1313 = or i64 %1311, %1312
  %1314 = xor i64 3087722958497243355, %1313
  %1315 = xor i64 %1308, -1
  %1316 = or i64 842524211580091528, %1315
  %1317 = xor i64 %1316, -1
  %1318 = and i64 %1317, -1
  %1319 = or i64 %1314, %1318
  %1320 = xor i64 %1307, %1319
  %1321 = xor i64 %1320, 7250041375299713021
  %1322 = xor i64 %1321, %1304
  %1323 = xor i64 %1322, %1309
  %1324 = sext i32 %963 to i64
  %1325 = add i64 %1324, 7324649311524323606
  %1326 = add i64 -830899628846207457, %1324
  %1327 = sub i64 %1326, -8155548940370531063
  %1328 = sext i32 %2 to i64
  %1329 = or i64 %1328, -1664952175133031196
  %1330 = and i64 -1664952175133031196, %1328
  %1331 = xor i64 -1664952175133031196, %1328
  %1332 = or i64 %1330, %1331
  %1333 = xor i64 0, %1332
  %1334 = xor i64 %1333, %1327
  %1335 = xor i64 %1334, %1325
  %1336 = xor i64 %1335, %1329
  %1337 = mul i64 %1323, %1336
  %1338 = trunc i64 %1337 to i32
  %1339 = icmp sgt i32 %1290, %1338
  %1340 = and i1 %1303, %1339
  %1341 = sext i32 %313 to i64
  %1342 = add i64 %1341, 290883784732250974
  %1343 = sub i64 0, %1341
  %1344 = sub i64 290883784732250974, %1343
  %1345 = sext i32 %207 to i64
  %1346 = or i64 %1345, 7592291709067119170
  %1347 = xor i64 %1345, -1
  %1348 = and i64 7592291709067119170, %1347
  %1349 = add i64 %1348, %1345
  %1350 = sext i32 %290 to i64
  %1351 = or i64 %1350, -3869317541126281234
  %1352 = and i64 -3869317541126281234, %1350
  %1353 = xor i64 -3869317541126281234, %1350
  %1354 = or i64 %1352, %1353
  %1355 = xor i64 %1354, %1346
  %1356 = xor i64 %1355, %1351
  %1357 = xor i64 %1356, %1344
  %1358 = xor i64 %1357, %1349
  %1359 = xor i64 %1358, -812486360922012097
  %1360 = xor i64 %1359, %1342
  %1361 = sext i32 %5 to i64
  %1362 = and i64 %1361, 7517082014430889435
  %1363 = or i64 -7517082014430889436, %1361
  %1364 = sub i64 %1363, -7517082014430889436
  %1365 = sext i32 %6 to i64
  %1366 = add i64 %1365, -676209937301424944
  %1367 = and i64 -676209937301424944, %1365
  %1368 = or i64 -676209937301424944, %1365
  %1369 = add i64 %1367, %1368
  %1370 = xor i64 %1369, %1364
  %1371 = xor i64 %1370, %1362
  %1372 = xor i64 %1371, %1366
  %1373 = xor i64 %1372, 0
  %1374 = mul i64 %1360, %1373
  %1375 = trunc i64 %1374 to i32
  %1376 = icmp sgt i32 %1283, %1375
  %1377 = sext i32 %6 to i64
  %1378 = add i64 %1377, -2247558444446968654
  %1379 = sub i64 0, %1377
  %1380 = sub i64 -2247558444446968654, %1379
  %1381 = or i64 %121, -7592687825836242552
  %1382 = xor i64 %121, -1
  %1383 = and i64 %1382, 1858425614676267496
  %1384 = and i64 %121, -1858425614676267497
  %1385 = or i64 %1383, %1384
  %1386 = xor i64 -8112338736272041888, %1385
  %1387 = xor i64 %121, -1
  %1388 = or i64 7592687825836242551, %1387
  %1389 = xor i64 %1388, -1
  %1390 = and i64 %1389, -1
  %1391 = or i64 %1386, %1390
  %1392 = xor i64 %1380, %1378
  %1393 = xor i64 %1392, %1381
  %1394 = xor i64 %1393, 3688874533073770147
  %1395 = xor i64 %1394, %1391
  %1396 = sext i32 %975 to i64
  %1397 = add i64 %1396, 7761210576449201276
  %1398 = sub i64 0, %1396
  %1399 = add i64 -7761210576449201276, %1398
  %1400 = sub i64 0, %1399
  %1401 = sext i32 %6 to i64
  %1402 = and i64 %1401, -1391925636970578672
  %1403 = xor i64 %1401, -1
  %1404 = xor i64 -1391925636970578672, %1403
  %1405 = and i64 %1404, -1391925636970578672
  %1406 = xor i64 %1402, %1400
  %1407 = xor i64 %1406, 0
  %1408 = xor i64 %1407, %1397
  %1409 = xor i64 %1408, %1405
  %1410 = mul i64 %1395, %1409
  %1411 = trunc i64 %1410 to i1
  %1412 = select i1 %1340, i1 %1376, i1 %1411
  %1413 = icmp slt i32 %1283, %6
  %1414 = sext i32 %6 to i64
  %1415 = add i64 %1414, 5022769797431638996
  %1416 = xor i64 5022769797431638996, %1414
  %1417 = and i64 5022769797431638996, %1414
  %1418 = mul i64 2, %1417
  %1419 = add i64 %1416, %1418
  %1420 = sext i32 %650 to i64
  %1421 = and i64 %1420, -9038479158989820803
  %1422 = or i64 9038479158989820802, %1420
  %1423 = sub i64 %1422, 9038479158989820802
  %1424 = sext i32 %956 to i64
  %1425 = or i64 %1424, 2101097006826453462
  %1426 = xor i64 %1424, -1
  %1427 = and i64 %1426, -2546247040764169879
  %1428 = and i64 %1424, 2546247040764169878
  %1429 = or i64 %1427, %1428
  %1430 = xor i64 -4503193534415091521, %1429
  %1431 = xor i64 %1424, -1
  %1432 = or i64 -2101097006826453463, %1431
  %1433 = xor i64 %1432, -1
  %1434 = and i64 %1433, -1
  %1435 = or i64 %1430, %1434
  %1436 = xor i64 %1415, %1425
  %1437 = xor i64 %1436, %1435
  %1438 = xor i64 %1437, %1423
  %1439 = xor i64 %1438, 1363733948080784053
  %1440 = xor i64 %1439, %1419
  %1441 = xor i64 %1440, %1421
  %1442 = sext i32 %6 to i64
  %1443 = or i64 %1442, -5663886960903889884
  %1444 = xor i64 %1442, -1
  %1445 = and i64 %1444, -7071454557752897292
  %1446 = and i64 %1442, 7071454557752897291
  %1447 = or i64 %1445, %1446
  %1448 = xor i64 3222590906268454096, %1447
  %1449 = xor i64 %1442, -1
  %1450 = or i64 5663886960903889883, %1449
  %1451 = xor i64 %1450, -1
  %1452 = and i64 %1451, -1
  %1453 = or i64 %1448, %1452
  %1454 = sext i32 %320 to i64
  %1455 = add i64 %1454, -7962726681564756389
  %1456 = add i64 -5651987916152633524, %1454
  %1457 = sub i64 %1456, 2310738765412122865
  %1458 = xor i64 %1457, %1443
  %1459 = xor i64 %1458, %1453
  %1460 = xor i64 %1459, 0
  %1461 = xor i64 %1460, %1455
  %1462 = mul i64 %1441, %1461
  %1463 = trunc i64 %1462 to i1
  %1464 = select i1 %1412, i1 %1413, i1 %1463
  br i1 %1464, label %1465, label %1542

1465:                                             ; preds = %1211
  %1466 = mul nsw i32 %1290, %6
  %1467 = add nsw i32 %1466, %1283
  %1468 = sext i32 %1467 to i64
  %1469 = getelementptr inbounds float, float* %3, i64 %1468
  %1470 = load float, float* %1469, align 4, !tbaa !13
  %1471 = fcmp ogt float %1275, %1470
  br i1 %1471, label %1472, label %1542

1472:                                             ; preds = %1465
  store float %1275, float* %1469, align 4, !tbaa !13
  %1473 = sext i32 %650 to i64
  %1474 = add i64 %1473, 6969070270542152808
  %1475 = sub i64 0, %1473
  %1476 = sub i64 6969070270542152808, %1475
  %1477 = sext i32 %207 to i64
  %1478 = add i64 %1477, -125376677539140164
  %1479 = sub i64 0, %1477
  %1480 = add i64 125376677539140164, %1479
  %1481 = sub i64 0, %1480
  %1482 = xor i64 %1478, 1476964512617380217
  %1483 = xor i64 %1482, %1474
  %1484 = xor i64 %1483, %1481
  %1485 = xor i64 %1484, %1476
  %1486 = sext i32 %5 to i64
  %1487 = and i64 %1486, 7560449191397036896
  %1488 = xor i64 %1486, -1
  %1489 = xor i64 7560449191397036896, %1488
  %1490 = and i64 %1489, 7560449191397036896
  %1491 = sext i32 %975 to i64
  %1492 = add i64 %1491, 5541824681085455215
  %1493 = xor i64 5541824681085455215, %1491
  %1494 = and i64 5541824681085455215, %1491
  %1495 = mul i64 2, %1494
  %1496 = add i64 %1493, %1495
  %1497 = xor i64 %1490, %1487
  %1498 = xor i64 %1497, 0
  %1499 = xor i64 %1498, %1496
  %1500 = xor i64 %1499, %1492
  %1501 = mul i64 %1485, %1500
  %1502 = trunc i64 %1501 to i32
  %1503 = icmp sgt i32 %1302, %1502
  %1504 = and i64 %1468, -1167492603582032953
  %1505 = xor i64 %1468, -1
  %1506 = xor i64 -1167492603582032953, %1505
  %1507 = and i64 %1506, -1167492603582032953
  %1508 = sext i32 %963 to i64
  %1509 = and i64 %1508, -7626104214014506445
  %1510 = or i64 7626104214014506444, %1508
  %1511 = sub i64 %1510, 7626104214014506444
  %1512 = sext i32 %1213 to i64
  %1513 = or i64 %1512, -1948345750879339434
  %1514 = and i64 -1948345750879339434, %1512
  %1515 = xor i64 -1948345750879339434, %1512
  %1516 = or i64 %1514, %1515
  %1517 = xor i64 %1507, %1509
  %1518 = xor i64 %1517, %1504
  %1519 = xor i64 %1518, -1753081808700973949
  %1520 = xor i64 %1519, %1511
  %1521 = xor i64 %1520, %1516
  %1522 = xor i64 %1521, %1513
  %1523 = sext i32 %5 to i64
  %1524 = or i64 %1523, 657849427269165107
  %1525 = and i64 657849427269165107, %1523
  %1526 = xor i64 657849427269165107, %1523
  %1527 = or i64 %1525, %1526
  %1528 = and i64 %121, 5869259463119615493
  %1529 = or i64 -5869259463119615494, %121
  %1530 = sub i64 %1529, -5869259463119615494
  %1531 = xor i64 %1527, %1524
  %1532 = xor i64 %1531, 0
  %1533 = xor i64 %1532, %1530
  %1534 = xor i64 %1533, %1528
  %1535 = mul i64 %1522, %1534
  %1536 = trunc i64 %1535 to i32
  %1537 = select i1 %1503, i32 %1302, i32 %1536
  %1538 = zext i32 %1537 to i64
  %1539 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %1538
  %1540 = load i8, i8* %1539, align 1, !tbaa !10
  %1541 = getelementptr inbounds i8, i8* %4, i64 %1468
  store i8 %1540, i8* %1541, align 1, !tbaa !10
  br label %1542

1542:                                             ; preds = %1472, %1465, %1211
  %1543 = fadd double %1212, 7.000000e-02
  %1544 = fptrunc double %1543 to float
  %1545 = fpext float %1544 to double
  %1546 = add i64 %121, -4130420173466644423
  %1547 = sub i64 0, %121
  %1548 = sub i64 -4130420173466644423, %1547
  %1549 = sext i32 %320 to i64
  %1550 = or i64 %1549, -7618775160816959440
  %1551 = xor i64 %1549, -1
  %1552 = and i64 %1551, -8184913280218964306
  %1553 = and i64 %1549, 8184913280218964305
  %1554 = or i64 %1552, %1553
  %1555 = xor i64 1742317907138076318, %1554
  %1556 = xor i64 %1549, -1
  %1557 = or i64 7618775160816959439, %1556
  %1558 = xor i64 %1557, -1
  %1559 = and i64 %1558, -1
  %1560 = or i64 %1555, %1559
  %1561 = sext i32 %53 to i64
  %1562 = or i64 %1561, 494180121065651807
  %1563 = xor i64 %1561, -1
  %1564 = and i64 494180121065651807, %1563
  %1565 = add i64 %1564, %1561
  %1566 = xor i64 %1550, %1560
  %1567 = xor i64 %1566, %1546
  %1568 = xor i64 %1567, %1562
  %1569 = xor i64 %1568, %1565
  %1570 = xor i64 %1569, %1548
  %1571 = xor i64 %1570, 4509333354276316681
  %1572 = sext i32 %2 to i64
  %1573 = and i64 %1572, 2674636836938825161
  %1574 = xor i64 %1572, -1
  %1575 = or i64 -2674636836938825162, %1574
  %1576 = xor i64 %1575, -1
  %1577 = and i64 %1576, -1
  %1578 = sext i32 %251 to i64
  %1579 = add i64 %1578, 5300932265533869267
  %1580 = add i64 5207630414147414228, %1578
  %1581 = add i64 %1580, 93301851386455039
  %1582 = sext i32 %2 to i64
  %1583 = or i64 %1582, 5429644971306043471
  %1584 = xor i64 %1582, -1
  %1585 = and i64 %1584, -5916569112605689105
  %1586 = and i64 %1582, 5916569112605689104
  %1587 = or i64 %1585, %1586
  %1588 = xor i64 -1820044789455244640, %1587
  %1589 = xor i64 %1582, -1
  %1590 = or i64 -5429644971306043472, %1589
  %1591 = xor i64 %1590, -1
  %1592 = and i64 %1591, -1
  %1593 = or i64 %1588, %1592
  %1594 = xor i64 %1579, %1581
  %1595 = xor i64 %1594, %1573
  %1596 = xor i64 %1595, %1583
  %1597 = xor i64 %1596, %1577
  %1598 = xor i64 %1597, -7604597623330315254
  %1599 = xor i64 %1598, %1593
  %1600 = mul i64 %1571, %1599
  %1601 = trunc i64 %1600 to i32
  %1602 = icmp eq i32 %1248, %1601
  br i1 %1602, label %1210, label %1211, !llvm.loop !21
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3sinf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3cosf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: mustprogress nofree norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  %3 = bitcast float* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store float 0.000000e+00, float* %1, align 4, !tbaa !13
  %4 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store float 0.000000e+00, float* %2, align 4, !tbaa !13
  %5 = call i8* @llvm.stacksave()
  %6 = alloca [1760 x float], align 4
  %7 = alloca [1760 x i8], align 1
  %8 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 0
  %9 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 0
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %11, %0
  %12 = phi i32 [ 5, %0 ], [ %215, %11 ]
  %13 = load float, float* %1, align 4, !tbaa !13
  %14 = load float, float* %2, align 4, !tbaa !13
  %15 = sext i32 %10 to i64
  %16 = add i64 %15, -5655093538296528264
  %17 = and i64 -5655093538296528264, %15
  %18 = or i64 -5655093538296528264, %15
  %19 = add i64 %17, %18
  %20 = sext i32 %10 to i64
  %21 = or i64 %20, 3971297311683198775
  %22 = xor i64 %20, -1
  %23 = and i64 %22, -8368679423214857170
  %24 = and i64 %20, 8368679423214857169
  %25 = or i64 %23, %24
  %26 = xor i64 -4845701974198359271, %25
  %27 = xor i64 %20, -1
  %28 = or i64 -3971297311683198776, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = or i64 %26, %30
  %32 = xor i64 %21, %16
  %33 = xor i64 %32, %31
  %34 = xor i64 %33, 6381101499662312275
  %35 = xor i64 %34, %19
  %36 = sext i32 %10 to i64
  %37 = or i64 %36, -4081582651399315615
  %38 = xor i64 %36, -1
  %39 = and i64 %38, -4349557460649701040
  %40 = and i64 %36, 4349557460649701039
  %41 = or i64 %39, %40
  %42 = xor i64 358047977075461681, %41
  %43 = xor i64 %36, -1
  %44 = or i64 4081582651399315614, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = sext i32 %10 to i64
  %49 = and i64 %48, -3192521437676398084
  %50 = xor i64 %48, -1
  %51 = xor i64 -3192521437676398084, %50
  %52 = and i64 %51, -3192521437676398084
  %53 = xor i64 %49, %52
  %54 = xor i64 %53, -775616404855791200
  %55 = xor i64 %54, %47
  %56 = xor i64 %55, %37
  %57 = mul i64 %35, %56
  %58 = trunc i64 %57 to i32
  %59 = sext i32 %10 to i64
  %60 = or i64 %59, -2294251686591866047
  %61 = and i64 -2294251686591866047, %59
  %62 = xor i64 -2294251686591866047, %59
  %63 = or i64 %61, %62
  %64 = sext i32 %10 to i64
  %65 = and i64 %64, 4576311545030303060
  %66 = xor i64 %64, -1
  %67 = or i64 -4576311545030303061, %66
  %68 = xor i64 %67, -1
  %69 = and i64 %68, -1
  %70 = sext i32 %10 to i64
  %71 = add i64 %70, 1856151113067481246
  %72 = sub i64 0, %70
  %73 = add i64 -1856151113067481246, %72
  %74 = sub i64 0, %73
  %75 = xor i64 %74, 6378238540634613103
  %76 = xor i64 %75, %63
  %77 = xor i64 %76, %69
  %78 = xor i64 %77, %71
  %79 = xor i64 %78, %65
  %80 = xor i64 %79, %60
  %81 = sext i32 %10 to i64
  %82 = add i64 %81, 141841096720103991
  %83 = sub i64 0, %81
  %84 = add i64 -141841096720103991, %83
  %85 = sub i64 0, %84
  %86 = sext i32 %10 to i64
  %87 = add i64 %86, -8264296542078320537
  %88 = xor i64 -8264296542078320537, %86
  %89 = and i64 -8264296542078320537, %86
  %90 = mul i64 2, %89
  %91 = add i64 %88, %90
  %92 = xor i64 %87, %91
  %93 = xor i64 %92, 5410730587324101194
  %94 = xor i64 %93, %85
  %95 = xor i64 %94, %82
  %96 = mul i64 %80, %95
  %97 = trunc i64 %96 to i32
  %98 = sext i32 %10 to i64
  %99 = add i64 %98, -5327029795106286060
  %100 = sub i64 0, %98
  %101 = add i64 5327029795106286060, %100
  %102 = sub i64 0, %101
  %103 = sext i32 %10 to i64
  %104 = and i64 %103, 6377536048500805571
  %105 = or i64 -6377536048500805572, %103
  %106 = sub i64 %105, -6377536048500805572
  %107 = xor i64 %102, %104
  %108 = xor i64 %107, %99
  %109 = xor i64 %108, 983682098580508091
  %110 = xor i64 %109, %106
  %111 = sext i32 %10 to i64
  %112 = or i64 %111, -7627098654523130266
  %113 = xor i64 %111, -1
  %114 = and i64 %113, -8974550404210062159
  %115 = and i64 %111, 8974550404210062158
  %116 = or i64 %114, %115
  %117 = xor i64 1537108304590893783, %116
  %118 = xor i64 %111, -1
  %119 = or i64 7627098654523130265, %118
  %120 = xor i64 %119, -1
  %121 = and i64 %120, -1
  %122 = or i64 %117, %121
  %123 = sext i32 %10 to i64
  %124 = and i64 %123, 4477968044772025210
  %125 = xor i64 %123, -1
  %126 = xor i64 4477968044772025210, %125
  %127 = and i64 %126, 4477968044772025210
  %128 = xor i64 %122, %112
  %129 = xor i64 %128, %124
  %130 = xor i64 %129, %127
  %131 = xor i64 %130, -5412060184916601872
  %132 = mul i64 %110, %131
  %133 = trunc i64 %132 to i32
  call void @_Z6renderffiPfPcii(float %13, float %14, i32 %58, float* nonnull %9, i8* nonnull %8, i32 %97, i32 %133)
  %134 = sext i32 %10 to i64
  %135 = or i64 %134, -8210905653604313479
  %136 = xor i64 %134, -1
  %137 = and i64 -8210905653604313479, %136
  %138 = add i64 %137, %134
  %139 = sext i32 %10 to i64
  %140 = or i64 %139, -1507513028949515835
  %141 = xor i64 %139, -1
  %142 = and i64 -1507513028949515835, %141
  %143 = add i64 %142, %139
  %144 = sext i32 %10 to i64
  %145 = and i64 %144, -4794582925798970911
  %146 = or i64 4794582925798970910, %144
  %147 = sub i64 %146, 4794582925798970910
  %148 = xor i64 %140, -7619722884830685071
  %149 = xor i64 %148, %138
  %150 = xor i64 %149, %145
  %151 = xor i64 %150, %143
  %152 = xor i64 %151, %147
  %153 = xor i64 %152, %135
  %154 = sext i32 %10 to i64
  %155 = and i64 %154, 1700544618997851429
  %156 = xor i64 %154, -1
  %157 = or i64 -1700544618997851430, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = sext i32 %10 to i64
  %161 = and i64 %160, 8107981151528611496
  %162 = xor i64 %160, -1
  %163 = xor i64 8107981151528611496, %162
  %164 = and i64 %163, 8107981151528611496
  %165 = sext i32 %10 to i64
  %166 = and i64 %165, -7741027150868791504
  %167 = xor i64 %165, -1
  %168 = or i64 7741027150868791503, %167
  %169 = xor i64 %168, -1
  %170 = and i64 %169, -1
  %171 = xor i64 %155, %164
  %172 = xor i64 %171, %161
  %173 = xor i64 %172, %166
  %174 = xor i64 %173, 2685817726350928017
  %175 = xor i64 %174, %170
  %176 = xor i64 %175, %159
  %177 = mul i64 %153, %176
  %178 = trunc i64 %177 to i32
  call void @_Z7displayPKcRfS1_i(i8* nonnull %8, float* nonnull align 4 dereferenceable(4) %1, float* nonnull align 4 dereferenceable(4) %2, i32 %178)
  %179 = sext i32 %10 to i64
  %180 = add i64 %179, -7262626753648971725
  %181 = sub i64 0, %179
  %182 = add i64 7262626753648971725, %181
  %183 = sub i64 0, %182
  %184 = sext i32 %10 to i64
  %185 = add i64 %184, -5195993656341221599
  %186 = sub i64 0, %184
  %187 = add i64 5195993656341221599, %186
  %188 = sub i64 0, %187
  %189 = xor i64 %180, %183
  %190 = xor i64 %189, -1620004333444070309
  %191 = xor i64 %190, %185
  %192 = xor i64 %191, %188
  %193 = sext i32 %10 to i64
  %194 = and i64 %193, 1280658278726129431
  %195 = xor i64 %193, -1
  %196 = xor i64 1280658278726129431, %195
  %197 = and i64 %196, 1280658278726129431
  %198 = sext i32 %10 to i64
  %199 = or i64 %198, -8878004046451701775
  %200 = xor i64 %198, -1
  %201 = and i64 -8878004046451701775, %200
  %202 = add i64 %201, %198
  %203 = sext i32 %10 to i64
  %204 = add i64 %203, 1216396128524352041
  %205 = add i64 -7648842338070590637, %203
  %206 = add i64 %205, 8865238466594942678
  %207 = xor i64 %206, %194
  %208 = xor i64 %207, -9075212611071734829
  %209 = xor i64 %208, %202
  %210 = xor i64 %209, %199
  %211 = xor i64 %210, %204
  %212 = xor i64 %211, %197
  %213 = mul i64 %192, %212
  %214 = trunc i64 %213 to i32
  %215 = add nuw nsw i32 %12, %214
  %216 = sext i32 %10 to i64
  %217 = add i64 %216, 6583394689676020424
  %218 = add i64 1099085291529348079, %216
  %219 = add i64 %218, 5484309398146672345
  %220 = sext i32 %10 to i64
  %221 = and i64 %220, 6618407515284353444
  %222 = or i64 -6618407515284353445, %220
  %223 = sub i64 %222, -6618407515284353445
  %224 = xor i64 %219, %217
  %225 = xor i64 %224, %221
  %226 = xor i64 %225, 6673482237300820341
  %227 = xor i64 %226, %223
  %228 = sext i32 %10 to i64
  %229 = and i64 %228, -3344562694674515636
  %230 = xor i64 %228, -1
  %231 = or i64 3344562694674515635, %230
  %232 = xor i64 %231, -1
  %233 = and i64 %232, -1
  %234 = sext i32 %10 to i64
  %235 = add i64 %234, -2833903179214355880
  %236 = xor i64 -2833903179214355880, %234
  %237 = and i64 -2833903179214355880, %234
  %238 = mul i64 2, %237
  %239 = add i64 %236, %238
  %240 = xor i64 %229, %235
  %241 = xor i64 %240, 1929651102185157794
  %242 = xor i64 %241, %239
  %243 = xor i64 %242, %233
  %244 = mul i64 %227, %243
  %245 = trunc i64 %244 to i32
  %246 = icmp eq i32 %215, %245
  br i1 %246, label %248, label %11, !llvm.loop !22

247:                                              ; preds = %248
  call void @llvm.stackrestore(i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i32 %259

248:                                              ; preds = %248, %11
  %249 = phi i64 [ %295, %248 ], [ 0, %11 ]
  %250 = phi i32 [ %259, %248 ], [ 0, %11 ]
  %251 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 %249
  %252 = load i8, i8* %251, align 1, !tbaa !10
  %253 = sext i8 %252 to i32
  %254 = add nsw i32 %250, %253
  %255 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 %249
  %256 = load float, float* %255, align 4, !tbaa !13
  %257 = sitofp i32 %254 to float
  %258 = fadd float %256, %257
  %259 = fptosi float %258 to i32
  %260 = sext i32 %10 to i64
  %261 = and i64 %260, -3318685902572921085
  %262 = xor i64 %260, -1
  %263 = xor i64 -3318685902572921085, %262
  %264 = and i64 %263, -3318685902572921085
  %265 = sext i32 %215 to i64
  %266 = and i64 %265, 3942823692486333539
  %267 = or i64 -3942823692486333540, %265
  %268 = sub i64 %267, -3942823692486333540
  %269 = xor i64 %261, 3345764700922114099
  %270 = xor i64 %269, %268
  %271 = xor i64 %270, %264
  %272 = xor i64 %271, %266
  %273 = sext i32 %12 to i64
  %274 = or i64 %273, 8589304959360152831
  %275 = xor i64 %273, -1
  %276 = and i64 %275, 552383431859436613
  %277 = and i64 %273, -552383431859436614
  %278 = or i64 %276, %277
  %279 = xor i64 8113554238872963258, %278
  %280 = xor i64 %273, -1
  %281 = or i64 -8589304959360152832, %280
  %282 = xor i64 %281, -1
  %283 = and i64 %282, -1
  %284 = or i64 %279, %283
  %285 = sext i32 %215 to i64
  %286 = or i64 %285, 1198973271262654252
  %287 = and i64 1198973271262654252, %285
  %288 = xor i64 1198973271262654252, %285
  %289 = or i64 %287, %288
  %290 = xor i64 %286, 2623645394277731067
  %291 = xor i64 %290, %274
  %292 = xor i64 %291, %289
  %293 = xor i64 %292, %284
  %294 = mul i64 %272, %293
  %295 = add nuw nsw i64 %249, %294
  %296 = sext i32 %215 to i64
  %297 = and i64 %296, 4200939732226328436
  %298 = xor i64 %296, -1
  %299 = or i64 -4200939732226328437, %298
  %300 = xor i64 %299, -1
  %301 = and i64 %300, -1
  %302 = sext i32 %215 to i64
  %303 = or i64 %302, 6226385775872833631
  %304 = xor i64 %302, -1
  %305 = and i64 %304, 3445130792441858392
  %306 = and i64 %302, -3445130792441858393
  %307 = or i64 %305, %306
  %308 = xor i64 8765976214204592391, %307
  %309 = xor i64 %302, -1
  %310 = or i64 -6226385775872833632, %309
  %311 = xor i64 %310, -1
  %312 = and i64 %311, -1
  %313 = or i64 %308, %312
  %314 = xor i64 %301, %297
  %315 = xor i64 %314, %303
  %316 = xor i64 %315, 4967694371804845443
  %317 = xor i64 %316, %313
  %318 = sext i32 %215 to i64
  %319 = or i64 %318, -8754756823752092998
  %320 = xor i64 %318, -1
  %321 = and i64 -8754756823752092998, %320
  %322 = add i64 %321, %318
  %323 = sext i32 %12 to i64
  %324 = and i64 %323, -8566894016272661128
  %325 = xor i64 %323, -1
  %326 = or i64 8566894016272661127, %325
  %327 = xor i64 %326, -1
  %328 = and i64 %327, -1
  %329 = xor i64 2879517614097565600, %319
  %330 = xor i64 %329, %322
  %331 = xor i64 %330, %324
  %332 = xor i64 %331, %328
  %333 = mul i64 %317, %332
  %334 = icmp eq i64 %295, %333
  br i1 %334, label %247, label %248, !llvm.loop !23
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #8

attributes #0 = { mustprogress nofree nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #5 = { inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { mustprogress nofree norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !11, i64 0}
!15 = distinct !{!15, !16, !17}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !16, !17}
!19 = distinct !{!19, !16, !17}
!20 = distinct !{!20, !16, !17}
!21 = distinct !{!21, !16, !17}
!22 = distinct !{!22, !16, !17}
!23 = distinct !{!23, !16, !17}
