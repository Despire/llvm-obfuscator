; ModuleID = 'output/const-obfuscation/ex9/ex9.ll'
source_filename = "input/const-obfuscation/ex9/ex9.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [4 x i8] c"\1B[H\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c".,-~:;=!*#$@\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1

; Function Attrs: mustprogress nofree nounwind ssp uwtable
define void @_Z7displayPKcRfS1_i(i8* nocapture readonly %0, float* nocapture nonnull align 4 dereferenceable(4) %1, float* nocapture nonnull align 4 dereferenceable(4) %2, i32 %3) local_unnamed_addr #0 {
  %5 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %7

6:                                                ; preds = %105
  ret void

7:                                                ; preds = %105, %4
  %8 = phi i64 [ 0, %4 ], [ %144, %105 ]
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %3 to i64
  %11 = and i64 %10, -2156011662885262721
  %12 = or i64 2156011662885262720, %10
  %13 = sub i64 %12, 2156011662885262720
  %14 = sext i32 %3 to i64
  %15 = add i64 %14, -2520123198458892202
  %16 = xor i64 -2520123198458892202, %14
  %17 = and i64 -2520123198458892202, %14
  %18 = mul i64 2, %17
  %19 = add i64 %16, %18
  %20 = sext i32 %3 to i64
  %21 = or i64 %20, 3422293380677184545
  %22 = xor i64 %20, -1
  %23 = and i64 %22, -733471894978219059
  %24 = and i64 %20, 733471894978219058
  %25 = or i64 %23, %24
  %26 = xor i64 -2689701759664250900, %25
  %27 = xor i64 %20, -1
  %28 = or i64 -3422293380677184546, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = or i64 %26, %30
  %32 = xor i64 %13, %11
  %33 = xor i64 %32, %21
  %34 = xor i64 %33, %15
  %35 = xor i64 %34, %19
  %36 = xor i64 %35, 6781501322396120145
  %37 = xor i64 %36, %31
  %38 = sext i32 %5 to i64
  %39 = add i64 %38, -7192350104699536690
  %40 = add i64 7518125674813467840, %38
  %41 = sub i64 %40, -3736268294196547086
  %42 = sext i32 %3 to i64
  %43 = add i64 %42, -7133920949436457104
  %44 = add i64 -5619182268212026267, %42
  %45 = sub i64 %44, 1514738681224430837
  %46 = sext i32 %3 to i64
  %47 = or i64 %46, 1699968068744649659
  %48 = and i64 1699968068744649659, %46
  %49 = xor i64 1699968068744649659, %46
  %50 = or i64 %48, %49
  %51 = xor i64 %41, %50
  %52 = xor i64 %51, %45
  %53 = xor i64 %52, %43
  %54 = xor i64 %53, %47
  %55 = xor i64 %54, -2280411974786451632
  %56 = xor i64 %55, %39
  %57 = mul i64 %37, %56
  %58 = trunc i64 %57 to i32
  %59 = urem i32 %9, %58
  %60 = sext i32 %3 to i64
  %61 = add i64 %60, -2453682264566006854
  %62 = add i64 1725263090026418556, %60
  %63 = sub i64 %62, 4178945354592425410
  %64 = sext i32 %5 to i64
  %65 = add i64 %64, -973855480153560110
  %66 = add i64 -1293792296987259343, %64
  %67 = add i64 %66, 319936816833699233
  %68 = xor i64 %63, -5024245267083874565
  %69 = xor i64 %68, %61
  %70 = xor i64 %69, %65
  %71 = xor i64 %70, %67
  %72 = sext i32 %5 to i64
  %73 = and i64 %72, 8546851916976640703
  %74 = or i64 -8546851916976640704, %72
  %75 = sub i64 %74, -8546851916976640704
  %76 = sext i32 %3 to i64
  %77 = or i64 %76, 4842899911448515506
  %78 = xor i64 %76, -1
  %79 = and i64 %78, -2886959748630923991
  %80 = and i64 %76, 2886959748630923990
  %81 = or i64 %79, %80
  %82 = xor i64 -7720829302070548837, %81
  %83 = xor i64 %76, -1
  %84 = or i64 -4842899911448515507, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = sext i32 %5 to i64
  %89 = and i64 %88, -1642197396507526494
  %90 = or i64 1642197396507526493, %88
  %91 = sub i64 %90, 1642197396507526493
  %92 = xor i64 0, %91
  %93 = xor i64 %92, %73
  %94 = xor i64 %93, %75
  %95 = xor i64 %94, %87
  %96 = xor i64 %95, %77
  %97 = xor i64 %96, %89
  %98 = mul i64 %71, %97
  %99 = trunc i64 %98 to i32
  %100 = icmp eq i32 %59, %99
  br i1 %100, label %105, label %101

101:                                              ; preds = %7
  %102 = getelementptr inbounds i8, i8* %0, i64 %8
  %103 = load i8, i8* %102, align 1, !tbaa !10
  %104 = sext i8 %103 to i32
  br label %105

105:                                              ; preds = %101, %7
  %106 = phi i32 [ %104, %101 ], [ 10, %7 ]
  %107 = call i32 @putchar(i32 %106)
  %108 = load float, float* %1, align 4, !tbaa !13
  %109 = fpext float %108 to double
  %110 = fadd double %109, 4.000000e-05
  %111 = fptrunc double %110 to float
  store float %111, float* %1, align 4, !tbaa !13
  %112 = load float, float* %2, align 4, !tbaa !13
  %113 = fpext float %112 to double
  %114 = fadd double %113, 2.000000e-05
  %115 = fptrunc double %114 to float
  store float %115, float* %2, align 4, !tbaa !13
  %116 = sext i32 %5 to i64
  %117 = or i64 %116, 1033995037849429401
  %118 = and i64 1033995037849429401, %116
  %119 = xor i64 1033995037849429401, %116
  %120 = or i64 %118, %119
  %121 = sext i32 %5 to i64
  %122 = or i64 %121, 8362359969402611096
  %123 = and i64 8362359969402611096, %121
  %124 = xor i64 8362359969402611096, %121
  %125 = or i64 %123, %124
  %126 = xor i64 2311201821591670565, %125
  %127 = xor i64 %126, %120
  %128 = xor i64 %127, %122
  %129 = xor i64 %128, %117
  %130 = and i64 %8, 7903464009207772153
  %131 = xor i64 %8, -1
  %132 = or i64 -7903464009207772154, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = and i64 %8, -7380387347285437237
  %136 = xor i64 %8, -1
  %137 = xor i64 -7380387347285437237, %136
  %138 = and i64 %137, -7380387347285437237
  %139 = xor i64 %135, %134
  %140 = xor i64 %139, %130
  %141 = xor i64 %140, -9135956898432387923
  %142 = xor i64 %141, %138
  %143 = mul i64 %129, %142
  %144 = add nuw nsw i64 %8, %143
  %145 = sext i32 %59 to i64
  %146 = add i64 %145, -4051243344677536900
  %147 = add i64 1281274510195552180, %145
  %148 = add i64 %147, -5332517854873089080
  %149 = and i64 %8, 4858835291419471159
  %150 = xor i64 %8, -1
  %151 = xor i64 4858835291419471159, %150
  %152 = and i64 %151, 4858835291419471159
  %153 = xor i64 -2796934033747672811, %146
  %154 = xor i64 %153, %149
  %155 = xor i64 %154, %148
  %156 = xor i64 %155, %152
  %157 = sext i32 %3 to i64
  %158 = or i64 %157, 4344999509156572091
  %159 = and i64 4344999509156572091, %157
  %160 = xor i64 4344999509156572091, %157
  %161 = or i64 %159, %160
  %162 = sext i32 %5 to i64
  %163 = or i64 %162, -1708087179945056328
  %164 = xor i64 %162, -1
  %165 = and i64 %164, 2144084150223485489
  %166 = and i64 %162, -2144084150223485490
  %167 = or i64 %165, %166
  %168 = xor i64 -753518482223243895, %167
  %169 = xor i64 %162, -1
  %170 = or i64 1708087179945056327, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %168, %172
  %174 = xor i64 6957854783092435357, %173
  %175 = xor i64 %174, %158
  %176 = xor i64 %175, %163
  %177 = xor i64 %176, %161
  %178 = mul i64 %156, %177
  %179 = icmp eq i64 %144, %178
  br i1 %179, label %6, label %7, !llvm.loop !15
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind ssp uwtable
define void @_Z6renderffiPfPcii(float %0, float %1, i32 %2, float* nocapture %3, i8* nocapture %4, i32 %5, i32 %6) local_unnamed_addr #3 {
  %8 = sext i32 %2 to i64
  %9 = and i64 %8, 3786391526229523841
  %10 = or i64 -3786391526229523842, %8
  %11 = sub i64 %10, -3786391526229523842
  %12 = sext i32 %5 to i64
  %13 = and i64 %12, -8395028532562397298
  %14 = xor i64 %12, -1
  %15 = or i64 8395028532562397297, %14
  %16 = xor i64 %15, -1
  %17 = and i64 %16, -1
  %18 = xor i64 %9, %17
  %19 = xor i64 %18, %13
  %20 = xor i64 %19, -2290059995215198643
  %21 = xor i64 %20, %11
  %22 = sext i32 %2 to i64
  %23 = and i64 %22, 1097467960943580181
  %24 = xor i64 %22, -1
  %25 = xor i64 1097467960943580181, %24
  %26 = and i64 %25, 1097467960943580181
  %27 = sext i32 %5 to i64
  %28 = or i64 %27, 8728239645460865711
  %29 = xor i64 %27, -1
  %30 = and i64 %29, 6566093247890280746
  %31 = and i64 %27, -6566093247890280747
  %32 = or i64 %30, %31
  %33 = xor i64 2467863416333300613, %32
  %34 = xor i64 %27, -1
  %35 = or i64 -8728239645460865712, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %33, %37
  %39 = sext i32 %5 to i64
  %40 = and i64 %39, 8485077661972640446
  %41 = xor i64 %39, -1
  %42 = xor i64 8485077661972640446, %41
  %43 = and i64 %42, 8485077661972640446
  %44 = xor i64 %26, %40
  %45 = xor i64 %44, %38
  %46 = xor i64 %45, %28
  %47 = xor i64 %46, %43
  %48 = xor i64 %47, %23
  %49 = xor i64 %48, 2172433437608993992
  %50 = mul i64 %21, %49
  %51 = trunc i64 %50 to i32
  %52 = sdiv i32 %6, %51
  %53 = sext i32 %2 to i64
  %54 = sext i32 %5 to i64
  %55 = add i64 %54, -3598152468473131913
  %56 = add i64 -7870663117377970592, %54
  %57 = add i64 %56, 4272510648904838679
  %58 = sext i32 %6 to i64
  %59 = and i64 %58, -6390631617429310943
  %60 = xor i64 %58, -1
  %61 = xor i64 -6390631617429310943, %60
  %62 = and i64 %61, -6390631617429310943
  %63 = xor i64 %62, -8557721411581755879
  %64 = xor i64 %63, %59
  %65 = xor i64 %64, %57
  %66 = xor i64 %65, %55
  %67 = sext i32 %2 to i64
  %68 = and i64 %67, 6640905793221025109
  %69 = or i64 -6640905793221025110, %67
  %70 = sub i64 %69, -6640905793221025110
  %71 = sext i32 %2 to i64
  %72 = add i64 %71, 1339110752185715631
  %73 = sub i64 0, %71
  %74 = sub i64 1339110752185715631, %73
  %75 = sext i32 %5 to i64
  %76 = or i64 %75, 6053492621455577303
  %77 = and i64 6053492621455577303, %75
  %78 = xor i64 6053492621455577303, %75
  %79 = or i64 %77, %78
  %80 = xor i64 %70, %76
  %81 = xor i64 %80, %72
  %82 = xor i64 %81, %79
  %83 = xor i64 %82, 468893905325638944
  %84 = xor i64 %83, %74
  %85 = xor i64 %84, %68
  %86 = mul i64 %66, %85
  %87 = trunc i64 %86 to i8
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %87, i64 %53, i1 false)
  %88 = bitcast float* %3 to i8*
  %89 = sext i32 %5 to i64
  %90 = and i64 %89, 4403034598059425288
  %91 = xor i64 %89, -1
  %92 = or i64 -4403034598059425289, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = sext i32 %2 to i64
  %96 = add i64 %95, -8204113649131357326
  %97 = xor i64 -8204113649131357326, %95
  %98 = and i64 -8204113649131357326, %95
  %99 = mul i64 2, %98
  %100 = add i64 %97, %99
  %101 = sext i32 %6 to i64
  %102 = add i64 %101, -5099886681414231441
  %103 = sub i64 0, %101
  %104 = sub i64 -5099886681414231441, %103
  %105 = xor i64 %102, %94
  %106 = xor i64 %105, %90
  %107 = xor i64 %106, 2424029913044301399
  %108 = xor i64 %107, %104
  %109 = xor i64 %108, %96
  %110 = xor i64 %109, %100
  %111 = sext i32 %2 to i64
  %112 = or i64 %111, 5234254552181068117
  %113 = xor i64 %111, -1
  %114 = and i64 5234254552181068117, %113
  %115 = add i64 %114, %111
  %116 = sext i32 %2 to i64
  %117 = add i64 %116, -2798966433832452081
  %118 = sub i64 0, %116
  %119 = sub i64 -2798966433832452081, %118
  %120 = xor i64 %115, %119
  %121 = xor i64 %120, %112
  %122 = xor i64 %121, 7577115584377924302
  %123 = xor i64 %122, %117
  %124 = mul i64 %110, %123
  %125 = shl nsw i64 %53, %124
  %126 = sext i32 %2 to i64
  %127 = and i64 %126, -6277203877718358514
  %128 = xor i64 %126, -1
  %129 = or i64 6277203877718358513, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = sext i32 %2 to i64
  %133 = and i64 %132, 2990304826817494245
  %134 = xor i64 %132, -1
  %135 = or i64 -2990304826817494246, %134
  %136 = xor i64 %135, -1
  %137 = and i64 %136, -1
  %138 = sext i32 %2 to i64
  %139 = or i64 %138, 4653263157008076200
  %140 = xor i64 %138, -1
  %141 = and i64 %140, -3996916136429735692
  %142 = and i64 %138, 3996916136429735691
  %143 = or i64 %141, %142
  %144 = xor i64 -8639118097582310052, %143
  %145 = xor i64 %138, -1
  %146 = or i64 -4653263157008076201, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = or i64 %144, %148
  %150 = xor i64 %149, %133
  %151 = xor i64 %150, %139
  %152 = xor i64 %151, -1000875605525435517
  %153 = xor i64 %152, %131
  %154 = xor i64 %153, %137
  %155 = xor i64 %154, %127
  %156 = sext i32 %5 to i64
  %157 = add i64 %156, -3756855490448351159
  %158 = sub i64 0, %156
  %159 = add i64 3756855490448351159, %158
  %160 = sub i64 0, %159
  %161 = sext i32 %2 to i64
  %162 = add i64 %161, -7620144632764397894
  %163 = and i64 -7620144632764397894, %161
  %164 = or i64 -7620144632764397894, %161
  %165 = add i64 %163, %164
  %166 = sext i32 %2 to i64
  %167 = or i64 %166, 1802692066494865292
  %168 = xor i64 %166, -1
  %169 = and i64 %168, -8929531338746735981
  %170 = and i64 %166, 8929531338746735980
  %171 = or i64 %169, %170
  %172 = xor i64 -7127055893432169185, %171
  %173 = xor i64 %166, -1
  %174 = or i64 -1802692066494865293, %173
  %175 = xor i64 %174, -1
  %176 = and i64 %175, -1
  %177 = or i64 %172, %176
  %178 = xor i64 %167, %177
  %179 = xor i64 %178, %160
  %180 = xor i64 %179, %165
  %181 = xor i64 %180, 0
  %182 = xor i64 %181, %162
  %183 = xor i64 %182, %157
  %184 = mul i64 %155, %183
  %185 = trunc i64 %184 to i8
  call void @llvm.memset.p0i8.i64(i8* align 4 %88, i8 %185, i64 %125, i1 false)
  %186 = sitofp i32 %52 to float
  %187 = sext i32 %2 to i64
  %188 = and i64 %187, -1744460588995454750
  %189 = xor i64 %187, -1
  %190 = or i64 1744460588995454749, %189
  %191 = xor i64 %190, -1
  %192 = and i64 %191, -1
  %193 = sext i32 %5 to i64
  %194 = add i64 %193, 3866720427625819018
  %195 = add i64 -6519999415591697885, %193
  %196 = sub i64 %195, 8060024230492034713
  %197 = sext i32 %5 to i64
  %198 = and i64 %197, -6163302609329076778
  %199 = or i64 6163302609329076777, %197
  %200 = sub i64 %199, 6163302609329076777
  %201 = xor i64 %194, %200
  %202 = xor i64 %201, %188
  %203 = xor i64 %202, 6014609114100409497
  %204 = xor i64 %203, %192
  %205 = xor i64 %204, %196
  %206 = xor i64 %205, %198
  %207 = sext i32 %6 to i64
  %208 = or i64 %207, -8909772337014035260
  %209 = xor i64 %207, -1
  %210 = and i64 %209, -9073591745472396054
  %211 = and i64 %207, 9073591745472396053
  %212 = or i64 %210, %211
  %213 = xor i64 454301859304089646, %212
  %214 = xor i64 %207, -1
  %215 = or i64 8909772337014035259, %214
  %216 = xor i64 %215, -1
  %217 = and i64 %216, -1
  %218 = or i64 %213, %217
  %219 = sext i32 %2 to i64
  %220 = and i64 %219, -7292801595819166815
  %221 = xor i64 %219, -1
  %222 = xor i64 -7292801595819166815, %221
  %223 = and i64 %222, -7292801595819166815
  %224 = sext i32 %2 to i64
  %225 = and i64 %224, 5295915529178725177
  %226 = or i64 -5295915529178725178, %224
  %227 = sub i64 %226, -5295915529178725178
  %228 = xor i64 -5715954196872962222, %223
  %229 = xor i64 %228, %208
  %230 = xor i64 %229, %218
  %231 = xor i64 %230, %225
  %232 = xor i64 %231, %220
  %233 = xor i64 %232, %227
  %234 = mul i64 %206, %233
  %235 = trunc i64 %234 to i32
  %236 = sdiv i32 %6, %235
  %237 = sitofp i32 %236 to float
  %238 = sext i32 %2 to i64
  %239 = add i64 %238, 1783666150464680357
  %240 = and i64 1783666150464680357, %238
  %241 = or i64 1783666150464680357, %238
  %242 = add i64 %240, %241
  %243 = sext i32 %2 to i64
  %244 = or i64 %243, 6312685225810791090
  %245 = and i64 6312685225810791090, %243
  %246 = xor i64 6312685225810791090, %243
  %247 = or i64 %245, %246
  %248 = xor i64 %247, %239
  %249 = xor i64 %248, -6222520689842458323
  %250 = xor i64 %249, %244
  %251 = xor i64 %250, %242
  %252 = sext i32 %5 to i64
  %253 = and i64 %252, 3608121058853933887
  %254 = xor i64 %252, -1
  %255 = or i64 -3608121058853933888, %254
  %256 = xor i64 %255, -1
  %257 = and i64 %256, -1
  %258 = sext i32 %6 to i64
  %259 = and i64 %258, 2145949228742919468
  %260 = xor i64 %258, -1
  %261 = xor i64 2145949228742919468, %260
  %262 = and i64 %261, 2145949228742919468
  %263 = xor i64 %257, %262
  %264 = xor i64 %263, 8155291351766863178
  %265 = xor i64 %264, %259
  %266 = xor i64 %265, %253
  %267 = mul i64 %251, %266
  %268 = trunc i64 %267 to i32
  %269 = sdiv i32 %5, %268
  %270 = sext i32 %2 to i64
  %271 = and i64 %270, 1894794565629804445
  %272 = xor i64 %270, -1
  %273 = xor i64 1894794565629804445, %272
  %274 = and i64 %273, 1894794565629804445
  %275 = sext i32 %2 to i64
  %276 = add i64 %275, -88497161959303151
  %277 = sub i64 0, %275
  %278 = add i64 88497161959303151, %277
  %279 = sub i64 0, %278
  %280 = xor i64 %271, %274
  %281 = xor i64 %280, %279
  %282 = xor i64 %281, -8378877869202213327
  %283 = xor i64 %282, %276
  %284 = sext i32 %6 to i64
  %285 = or i64 %284, -8308263380616978441
  %286 = xor i64 %284, -1
  %287 = and i64 %286, -905904256377785041
  %288 = and i64 %284, 905904256377785040
  %289 = or i64 %287, %288
  %290 = xor i64 9213954279929686744, %289
  %291 = xor i64 %284, -1
  %292 = or i64 8308263380616978440, %291
  %293 = xor i64 %292, -1
  %294 = and i64 %293, -1
  %295 = or i64 %290, %294
  %296 = sext i32 %5 to i64
  %297 = and i64 %296, -2339327367504898496
  %298 = or i64 2339327367504898495, %296
  %299 = sub i64 %298, 2339327367504898495
  %300 = sext i32 %5 to i64
  %301 = add i64 %300, -305475977290621650
  %302 = sub i64 0, %300
  %303 = sub i64 -305475977290621650, %302
  %304 = xor i64 %285, %295
  %305 = xor i64 %304, %299
  %306 = xor i64 %305, %301
  %307 = xor i64 %306, %303
  %308 = xor i64 %307, %297
  %309 = xor i64 %308, 4649674006465323729
  %310 = mul i64 %283, %309
  %311 = trunc i64 %310 to i32
  %312 = add nsw i32 %269, %311
  %313 = sitofp i32 %312 to float
  %314 = call fastcc float @_ZL3cosf(float 5.000000e-01) #9
  %315 = call fastcc float @_ZL3cosf(float %1) #9
  %316 = call fastcc float @_ZL3sinf(float %1) #9
  br label %324

317:                                              ; preds = %664
  %318 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  %319 = call fastcc float @_ZL3sinf(float %0) #9
  %320 = fcmp une float %319, 0.000000e+00
  %321 = fmul float %319, 2.000000e+00
  %322 = select i1 %320, float %321, float %319
  %323 = call fastcc float @_ZL3cosf(float %0) #9
  br label %670

324:                                              ; preds = %664, %7
  %325 = phi double [ 0.000000e+00, %7 ], [ %667, %664 ]
  %326 = phi float [ 0.000000e+00, %7 ], [ %666, %664 ]
  %327 = fptosi float %326 to i32
  switch i32 %327, label %366 [
    i32 0, label %328
    i32 1, label %330
    i32 2, label %333
    i32 3, label %337
    i32 4, label %342
    i32 5, label %348
    i32 6, label %355
  ]

328:                                              ; preds = %324
  %329 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  br label %330

330:                                              ; preds = %328, %324
  %331 = phi float [ 0.000000e+00, %324 ], [ %329, %328 ]
  %332 = call fastcc float @_ZL3cosf(float %326) #9
  br label %333

333:                                              ; preds = %330, %324
  %334 = phi float [ 0.000000e+00, %324 ], [ %332, %330 ]
  %335 = phi float [ 0.000000e+00, %324 ], [ %331, %330 ]
  %336 = call fastcc float @_ZL3sinf(float %0) #9
  br label %337

337:                                              ; preds = %333, %324
  %338 = phi float [ 0.000000e+00, %324 ], [ %336, %333 ]
  %339 = phi float [ 0.000000e+00, %324 ], [ %334, %333 ]
  %340 = phi float [ 0.000000e+00, %324 ], [ %335, %333 ]
  %341 = call fastcc float @_ZL3sinf(float %326) #9
  br label %342

342:                                              ; preds = %337, %324
  %343 = phi float [ 0.000000e+00, %324 ], [ %341, %337 ]
  %344 = phi float [ 0.000000e+00, %324 ], [ %338, %337 ]
  %345 = phi float [ 0.000000e+00, %324 ], [ %339, %337 ]
  %346 = phi float [ 0.000000e+00, %324 ], [ %340, %337 ]
  %347 = call fastcc float @_ZL3cosf(float %0) #9
  br label %348

348:                                              ; preds = %342, %324
  %349 = phi float [ 0.000000e+00, %324 ], [ %347, %342 ]
  %350 = phi float [ 0.000000e+00, %324 ], [ %343, %342 ]
  %351 = phi float [ 0.000000e+00, %324 ], [ %344, %342 ]
  %352 = phi float [ 0.000000e+00, %324 ], [ %345, %342 ]
  %353 = phi float [ 0.000000e+00, %324 ], [ %346, %342 ]
  %354 = fadd float %352, %186
  br label %355

355:                                              ; preds = %348, %324
  %356 = phi float [ 0.000000e+00, %324 ], [ %354, %348 ]
  %357 = phi float [ 0.000000e+00, %324 ], [ %349, %348 ]
  %358 = phi float [ 0.000000e+00, %324 ], [ %350, %348 ]
  %359 = phi float [ 0.000000e+00, %324 ], [ %351, %348 ]
  %360 = phi float [ 0.000000e+00, %324 ], [ %352, %348 ]
  %361 = phi float [ 0.000000e+00, %324 ], [ %353, %348 ]
  %362 = fmul float %356, %361
  %363 = fmul float %357, %362
  %364 = fmul float %358, %359
  %365 = fsub float %363, %364
  br label %366

366:                                              ; preds = %355, %324
  %367 = phi float [ 0.000000e+00, %324 ], [ %365, %355 ]
  %368 = phi float [ 0.000000e+00, %324 ], [ %356, %355 ]
  %369 = phi float [ 0.000000e+00, %324 ], [ %357, %355 ]
  %370 = phi float [ 0.000000e+00, %324 ], [ %358, %355 ]
  %371 = phi float [ 0.000000e+00, %324 ], [ %359, %355 ]
  %372 = phi float [ 0.000000e+00, %324 ], [ %360, %355 ]
  %373 = phi float [ 0.000000e+00, %324 ], [ %361, %355 ]
  %374 = fmul float %368, %373
  %375 = fmul float %371, %374
  %376 = fmul float %369, %370
  %377 = fadd float %376, %375
  %378 = fadd float %377, 5.000000e+00
  %379 = fdiv float 1.000000e+00, %378
  %380 = fmul float %379, 3.000000e+01
  %381 = fmul float %368, %314
  %382 = fmul float %381, %315
  %383 = fmul float %367, %316
  %384 = fadd float %382, %383
  %385 = fmul float %384, %380
  %386 = fadd float %385, %237
  %387 = fptosi float %386 to i32
  %388 = fmul float %379, 1.500000e+01
  %389 = fmul float %381, %316
  %390 = fmul float %367, %315
  %391 = fsub float %389, %390
  %392 = fmul float %391, %388
  %393 = fadd float %392, %313
  %394 = fptosi float %393 to i32
  %395 = fmul float %370, %371
  %396 = fmul float %372, %373
  %397 = fmul float %369, %396
  %398 = fsub float %395, %397
  %399 = fmul float %315, %398
  %400 = fmul float %371, %396
  %401 = fsub float %399, %400
  %402 = fsub float %401, %376
  %403 = fmul float %372, %314
  %404 = fmul float %403, %316
  %405 = fsub float %402, %404
  %406 = fmul float %405, 8.000000e+00
  %407 = fptosi float %406 to i32
  %408 = icmp slt i32 %394, %5
  %409 = sext i32 %312 to i64
  %410 = add i64 %409, -2437331719488257560
  %411 = add i64 -7787855696710842404, %409
  %412 = sub i64 %411, -5350523977222584844
  %413 = sext i32 %2 to i64
  %414 = add i64 %413, -6459464400514866154
  %415 = add i64 -9153876487985857746, %413
  %416 = sub i64 %415, -2694412087470991592
  %417 = sext i32 %269 to i64
  %418 = add i64 %417, 8335526457462083560
  %419 = xor i64 8335526457462083560, %417
  %420 = and i64 8335526457462083560, %417
  %421 = mul i64 2, %420
  %422 = add i64 %419, %421
  %423 = xor i64 %422, %414
  %424 = xor i64 %423, %416
  %425 = xor i64 %424, %410
  %426 = xor i64 %425, %418
  %427 = xor i64 %426, %412
  %428 = xor i64 %427, 3988431630741968941
  %429 = and i64 %53, -7320498565214553080
  %430 = or i64 7320498565214553079, %53
  %431 = sub i64 %430, 7320498565214553079
  %432 = or i64 %53, -7619164277685875540
  %433 = and i64 -7619164277685875540, %53
  %434 = xor i64 -7619164277685875540, %53
  %435 = or i64 %433, %434
  %436 = xor i64 0, %435
  %437 = xor i64 %436, %429
  %438 = xor i64 %437, %431
  %439 = xor i64 %438, %432
  %440 = mul i64 %428, %439
  %441 = trunc i64 %440 to i32
  %442 = icmp sgt i32 %394, %441
  %443 = and i1 %408, %442
  %444 = sext i32 %6 to i64
  %445 = and i64 %444, -1351541525841673628
  %446 = xor i64 %444, -1
  %447 = or i64 1351541525841673627, %446
  %448 = xor i64 %447, -1
  %449 = and i64 %448, -1
  %450 = sext i32 %236 to i64
  %451 = and i64 %450, 3693850371913478006
  %452 = or i64 -3693850371913478007, %450
  %453 = sub i64 %452, -3693850371913478007
  %454 = sext i32 %6 to i64
  %455 = or i64 %454, 5215984909631909697
  %456 = and i64 5215984909631909697, %454
  %457 = xor i64 5215984909631909697, %454
  %458 = or i64 %456, %457
  %459 = xor i64 %458, %455
  %460 = xor i64 %459, %445
  %461 = xor i64 %460, 2856278228252256563
  %462 = xor i64 %461, %451
  %463 = xor i64 %462, %449
  %464 = xor i64 %463, %453
  %465 = sext i32 %6 to i64
  %466 = and i64 %465, -1960925576428439576
  %467 = xor i64 %465, -1
  %468 = or i64 1960925576428439575, %467
  %469 = xor i64 %468, -1
  %470 = and i64 %469, -1
  %471 = add i64 %125, -2093726009285677248
  %472 = and i64 -2093726009285677248, %125
  %473 = or i64 -2093726009285677248, %125
  %474 = add i64 %472, %473
  %475 = sext i32 %6 to i64
  %476 = or i64 %475, 6316909941379988821
  %477 = xor i64 %475, -1
  %478 = and i64 %477, -3001454126504588149
  %479 = and i64 %475, 3001454126504588148
  %480 = or i64 %478, %479
  %481 = xor i64 -9083024598739045922, %480
  %482 = xor i64 %475, -1
  %483 = or i64 -6316909941379988822, %482
  %484 = xor i64 %483, -1
  %485 = and i64 %484, -1
  %486 = or i64 %481, %485
  %487 = xor i64 %474, %471
  %488 = xor i64 %487, %486
  %489 = xor i64 %488, %476
  %490 = xor i64 %489, 0
  %491 = xor i64 %490, %466
  %492 = xor i64 %491, %470
  %493 = mul i64 %464, %492
  %494 = trunc i64 %493 to i32
  %495 = icmp sgt i32 %387, %494
  %496 = and i64 %53, -2727639835306999107
  %497 = xor i64 %53, -1
  %498 = or i64 2727639835306999106, %497
  %499 = xor i64 %498, -1
  %500 = and i64 %499, -1
  %501 = sext i32 %327 to i64
  %502 = or i64 %501, 7038424534823375609
  %503 = and i64 7038424534823375609, %501
  %504 = xor i64 7038424534823375609, %501
  %505 = or i64 %503, %504
  %506 = xor i64 3552338288472330043, %502
  %507 = xor i64 %506, %505
  %508 = xor i64 %507, %496
  %509 = xor i64 %508, %500
  %510 = add i64 %125, -5293047648189828009
  %511 = xor i64 -5293047648189828009, %125
  %512 = and i64 -5293047648189828009, %125
  %513 = mul i64 2, %512
  %514 = add i64 %511, %513
  %515 = sext i32 %269 to i64
  %516 = and i64 %515, 1198086207050227882
  %517 = or i64 -1198086207050227883, %515
  %518 = sub i64 %517, -1198086207050227883
  %519 = sext i32 %2 to i64
  %520 = and i64 %519, 4759807821437427132
  %521 = xor i64 %519, -1
  %522 = or i64 -4759807821437427133, %521
  %523 = xor i64 %522, -1
  %524 = and i64 %523, -1
  %525 = xor i64 0, %514
  %526 = xor i64 %525, %520
  %527 = xor i64 %526, %524
  %528 = xor i64 %527, %516
  %529 = xor i64 %528, %510
  %530 = xor i64 %529, %518
  %531 = mul i64 %509, %530
  %532 = trunc i64 %531 to i1
  %533 = select i1 %443, i1 %495, i1 %532
  %534 = icmp slt i32 %387, %6
  %535 = sext i32 %312 to i64
  %536 = or i64 %535, -3501304268445090529
  %537 = xor i64 %535, -1
  %538 = and i64 -3501304268445090529, %537
  %539 = add i64 %538, %535
  %540 = or i64 %53, -5085120935009093458
  %541 = xor i64 %53, -1
  %542 = and i64 %541, -7319067810308724386
  %543 = and i64 %53, 7319067810308724385
  %544 = or i64 %542, %543
  %545 = xor i64 2522992060536721904, %544
  %546 = xor i64 %53, -1
  %547 = or i64 5085120935009093457, %546
  %548 = xor i64 %547, -1
  %549 = and i64 %548, -1
  %550 = or i64 %545, %549
  %551 = sext i32 %5 to i64
  %552 = and i64 %551, -7431355839039536585
  %553 = xor i64 %551, -1
  %554 = xor i64 -7431355839039536585, %553
  %555 = and i64 %554, -7431355839039536585
  %556 = xor i64 %540, %536
  %557 = xor i64 %556, %550
  %558 = xor i64 %557, %552
  %559 = xor i64 %558, -440930690328083583
  %560 = xor i64 %559, %539
  %561 = xor i64 %560, %555
  %562 = sext i32 %6 to i64
  %563 = and i64 %562, 5722527391874834695
  %564 = or i64 -5722527391874834696, %562
  %565 = sub i64 %564, -5722527391874834696
  %566 = sext i32 %6 to i64
  %567 = and i64 %566, -2970107440283061685
  %568 = xor i64 %566, -1
  %569 = xor i64 -2970107440283061685, %568
  %570 = and i64 %569, -2970107440283061685
  %571 = xor i64 %565, %563
  %572 = xor i64 %571, %567
  %573 = xor i64 %572, 0
  %574 = xor i64 %573, %570
  %575 = mul i64 %561, %574
  %576 = trunc i64 %575 to i1
  %577 = select i1 %533, i1 %534, i1 %576
  br i1 %577, label %578, label %664

578:                                              ; preds = %366
  %579 = mul nsw i32 %394, %6
  %580 = add nsw i32 %579, %387
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds float, float* %3, i64 %581
  %583 = load float, float* %582, align 4, !tbaa !13
  %584 = fcmp ogt float %379, %583
  br i1 %584, label %585, label %664

585:                                              ; preds = %578
  store float %379, float* %582, align 4, !tbaa !13
  %586 = sext i32 %327 to i64
  %587 = and i64 %586, -8526203617524767881
  %588 = xor i64 %586, -1
  %589 = xor i64 -8526203617524767881, %588
  %590 = and i64 %589, -8526203617524767881
  %591 = or i64 %125, -8285711538736943633
  %592 = xor i64 %125, -1
  %593 = and i64 %592, 2896041504595102987
  %594 = and i64 %125, -2896041504595102988
  %595 = or i64 %593, %594
  %596 = xor i64 -6542618485378817820, %595
  %597 = xor i64 %125, -1
  %598 = or i64 8285711538736943632, %597
  %599 = xor i64 %598, -1
  %600 = and i64 %599, -1
  %601 = or i64 %596, %600
  %602 = sext i32 %5 to i64
  %603 = or i64 %602, 7033629100447051735
  %604 = and i64 7033629100447051735, %602
  %605 = xor i64 7033629100447051735, %602
  %606 = or i64 %604, %605
  %607 = xor i64 -3163357642969483455, %603
  %608 = xor i64 %607, %601
  %609 = xor i64 %608, %590
  %610 = xor i64 %609, %591
  %611 = xor i64 %610, %587
  %612 = xor i64 %611, %606
  %613 = sext i32 %394 to i64
  %614 = or i64 %613, -221332830861779322
  %615 = xor i64 %613, -1
  %616 = and i64 -221332830861779322, %615
  %617 = add i64 %616, %613
  %618 = or i64 %125, 678901369574596318
  %619 = and i64 678901369574596318, %125
  %620 = xor i64 678901369574596318, %125
  %621 = or i64 %619, %620
  %622 = xor i64 %614, %618
  %623 = xor i64 %622, %621
  %624 = xor i64 %623, 0
  %625 = xor i64 %624, %617
  %626 = mul i64 %612, %625
  %627 = trunc i64 %626 to i32
  %628 = icmp sgt i32 %407, %627
  %629 = sext i32 %580 to i64
  %630 = and i64 %629, -3359618563673330551
  %631 = xor i64 %629, -1
  %632 = xor i64 -3359618563673330551, %631
  %633 = and i64 %632, -3359618563673330551
  %634 = sext i32 %6 to i64
  %635 = add i64 %634, -4578409372811249645
  %636 = sub i64 0, %634
  %637 = sub i64 -4578409372811249645, %636
  %638 = xor i64 %630, %637
  %639 = xor i64 %638, 6723949352953417141
  %640 = xor i64 %639, %635
  %641 = xor i64 %640, %633
  %642 = sext i32 %580 to i64
  %643 = and i64 %642, -8790995362466763177
  %644 = xor i64 %642, -1
  %645 = or i64 8790995362466763176, %644
  %646 = xor i64 %645, -1
  %647 = and i64 %646, -1
  %648 = sext i32 %6 to i64
  %649 = or i64 %648, -7289908211392310170
  %650 = xor i64 %648, -1
  %651 = and i64 -7289908211392310170, %650
  %652 = add i64 %651, %648
  %653 = xor i64 0, %652
  %654 = xor i64 %653, %643
  %655 = xor i64 %654, %647
  %656 = xor i64 %655, %649
  %657 = mul i64 %641, %656
  %658 = trunc i64 %657 to i32
  %659 = select i1 %628, i32 %407, i32 %658
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %660
  %662 = load i8, i8* %661, align 1, !tbaa !10
  %663 = getelementptr inbounds i8, i8* %4, i64 %581
  store i8 %662, i8* %663, align 1, !tbaa !10
  br label %664

664:                                              ; preds = %585, %578, %366
  %665 = fadd double %325, 7.000000e-02
  %666 = fptrunc double %665 to float
  %667 = fpext float %666 to double
  %668 = fcmp olt double %667, 6.280000e+00
  br i1 %668, label %324, label %317, !llvm.loop !18

669:                                              ; preds = %990
  ret void

670:                                              ; preds = %990, %317
  %671 = phi double [ 0.000000e+00, %317 ], [ %993, %990 ]
  %672 = phi i32 [ 0, %317 ], [ %717, %990 ]
  %673 = phi float [ 0.000000e+00, %317 ], [ %992, %990 ]
  %674 = sext i32 %2 to i64
  %675 = add i64 %674, -3394822341870736895
  %676 = sub i64 0, %674
  %677 = add i64 3394822341870736895, %676
  %678 = sub i64 0, %677
  %679 = sext i32 %312 to i64
  %680 = add i64 %679, 1034705011156945247
  %681 = xor i64 1034705011156945247, %679
  %682 = and i64 1034705011156945247, %679
  %683 = mul i64 2, %682
  %684 = add i64 %681, %683
  %685 = sext i32 %312 to i64
  %686 = add i64 %685, -6952589222257824270
  %687 = sub i64 0, %685
  %688 = sub i64 -6952589222257824270, %687
  %689 = xor i64 2222713308873699077, %675
  %690 = xor i64 %689, %680
  %691 = xor i64 %690, %684
  %692 = xor i64 %691, %688
  %693 = xor i64 %692, %686
  %694 = xor i64 %693, %678
  %695 = sext i32 %2 to i64
  %696 = and i64 %695, -7581307327143711009
  %697 = xor i64 %695, -1
  %698 = xor i64 -7581307327143711009, %697
  %699 = and i64 %698, -7581307327143711009
  %700 = sext i32 %327 to i64
  %701 = add i64 %700, -1175836280175355712
  %702 = sub i64 0, %700
  %703 = sub i64 -1175836280175355712, %702
  %704 = sext i32 %236 to i64
  %705 = add i64 %704, 7575308256702141381
  %706 = and i64 7575308256702141381, %704
  %707 = or i64 7575308256702141381, %704
  %708 = add i64 %706, %707
  %709 = xor i64 %705, %701
  %710 = xor i64 %709, %708
  %711 = xor i64 %710, -2766126471659698739
  %712 = xor i64 %711, %703
  %713 = xor i64 %712, %699
  %714 = xor i64 %713, %696
  %715 = mul i64 %694, %714
  %716 = trunc i64 %715 to i32
  %717 = add nuw nsw i32 %672, %716
  %718 = sitofp i32 %672 to float
  %719 = fadd float %318, %718
  %720 = call fastcc float @_ZL3cosf(float %673) #9
  %721 = fcmp une float %719, 0.000000e+00
  %722 = fmul float %719, 2.000000e+00
  %723 = fmul float %720, 2.000000e+00
  %724 = select i1 %721, float %722, float %719
  %725 = select i1 %721, float %720, float %723
  %726 = call fastcc float @_ZL3sinf(float %673) #9
  %727 = fmul float %726, 2.000000e+00
  %728 = select i1 %320, float %726, float %727
  %729 = fadd float %725, %186
  %730 = fmul float %724, %729
  %731 = fmul float %323, %730
  %732 = fmul float %322, %728
  %733 = fsub float %731, %732
  %734 = fcmp une float %729, 0.000000e+00
  %735 = fmul float %733, 2.000000e+00
  %736 = fmul float %729, 2.000000e+00
  %737 = select i1 %734, float %729, float %736
  %738 = select i1 %734, float %735, float %733
  %739 = fmul float %724, %737
  %740 = fmul float %322, %739
  %741 = fmul float %323, %728
  %742 = fadd float %741, %740
  %743 = fadd float %742, 5.000000e+00
  %744 = fdiv float 1.000000e+00, %743
  %745 = fmul float %744, 3.000000e+01
  %746 = fmul float %314, %737
  %747 = fmul float %315, %746
  %748 = fmul float %316, %738
  %749 = fadd float %747, %748
  %750 = fmul float %749, %745
  %751 = fadd float %750, %237
  %752 = fptosi float %751 to i32
  %753 = fmul float %744, 1.500000e+01
  %754 = fmul float %746, %316
  %755 = fmul float %315, %738
  %756 = fsub float %754, %755
  %757 = fmul float %756, %753
  %758 = fadd float %757, %313
  %759 = fptosi float %758 to i32
  %760 = fmul float %724, %725
  %761 = fmul float %760, %323
  %762 = fsub float %732, %761
  %763 = fmul float %315, %762
  %764 = fmul float %760, %322
  %765 = fsub float %763, %764
  %766 = fsub float %765, %741
  %767 = fmul float %725, %314
  %768 = fmul float %767, %316
  %769 = fsub float %766, %768
  %770 = fmul float %769, 8.000000e+00
  %771 = fptosi float %770 to i32
  %772 = icmp slt i32 %759, %5
  %773 = sext i32 %236 to i64
  %774 = and i64 %773, -1419268114925121248
  %775 = xor i64 %773, -1
  %776 = xor i64 -1419268114925121248, %775
  %777 = and i64 %776, -1419268114925121248
  %778 = sext i32 %52 to i64
  %779 = or i64 %778, 4855403151570530004
  %780 = xor i64 %778, -1
  %781 = and i64 %780, -5273345293658218847
  %782 = and i64 %778, 5273345293658218846
  %783 = or i64 %781, %782
  %784 = xor i64 -742941012260130699, %783
  %785 = xor i64 %778, -1
  %786 = or i64 -4855403151570530005, %785
  %787 = xor i64 %786, -1
  %788 = and i64 %787, -1
  %789 = or i64 %784, %788
  %790 = xor i64 %774, %777
  %791 = xor i64 %790, %779
  %792 = xor i64 %791, -5383259607265558295
  %793 = xor i64 %792, %789
  %794 = sext i32 %327 to i64
  %795 = and i64 %794, -6960587545898925366
  %796 = xor i64 %794, -1
  %797 = or i64 6960587545898925365, %796
  %798 = xor i64 %797, -1
  %799 = and i64 %798, -1
  %800 = sext i32 %312 to i64
  %801 = and i64 %800, 5762324687442058248
  %802 = or i64 -5762324687442058249, %800
  %803 = sub i64 %802, -5762324687442058249
  %804 = xor i64 0, %801
  %805 = xor i64 %804, %803
  %806 = xor i64 %805, %795
  %807 = xor i64 %806, %799
  %808 = mul i64 %793, %807
  %809 = trunc i64 %808 to i32
  %810 = icmp sgt i32 %759, %809
  %811 = and i1 %772, %810
  %812 = and i64 %53, -4052532309747010109
  %813 = or i64 4052532309747010108, %53
  %814 = sub i64 %813, 4052532309747010108
  %815 = sext i32 %327 to i64
  %816 = add i64 %815, 6275978033334632400
  %817 = sub i64 0, %815
  %818 = add i64 -6275978033334632400, %817
  %819 = sub i64 0, %818
  %820 = xor i64 %814, %816
  %821 = xor i64 %820, %812
  %822 = xor i64 %821, %819
  %823 = xor i64 %822, 1415602003009251105
  %824 = sext i32 %407 to i64
  %825 = add i64 %824, 8558289128281873223
  %826 = sub i64 0, %824
  %827 = add i64 -8558289128281873223, %826
  %828 = sub i64 0, %827
  %829 = or i64 %125, -1014631491157162170
  %830 = and i64 -1014631491157162170, %125
  %831 = xor i64 -1014631491157162170, %125
  %832 = or i64 %830, %831
  %833 = sext i32 %327 to i64
  %834 = or i64 %833, 2664498660477090222
  %835 = xor i64 %833, -1
  %836 = and i64 2664498660477090222, %835
  %837 = add i64 %836, %833
  %838 = xor i64 %832, %829
  %839 = xor i64 %838, %825
  %840 = xor i64 %839, %828
  %841 = xor i64 %840, %834
  %842 = xor i64 %841, 0
  %843 = xor i64 %842, %837
  %844 = mul i64 %823, %843
  %845 = trunc i64 %844 to i32
  %846 = icmp sgt i32 %752, %845
  %847 = sext i32 %407 to i64
  %848 = and i64 %847, -5398923552123271883
  %849 = xor i64 %847, -1
  %850 = xor i64 -5398923552123271883, %849
  %851 = and i64 %850, -5398923552123271883
  %852 = sext i32 %5 to i64
  %853 = and i64 %852, 2645128996889972801
  %854 = xor i64 %852, -1
  %855 = or i64 -2645128996889972802, %854
  %856 = xor i64 %855, -1
  %857 = and i64 %856, -1
  %858 = xor i64 %848, -4354323327677385227
  %859 = xor i64 %858, %853
  %860 = xor i64 %859, %857
  %861 = xor i64 %860, %851
  %862 = sext i32 %269 to i64
  %863 = and i64 %862, 7809699353045267222
  %864 = or i64 -7809699353045267223, %862
  %865 = sub i64 %864, -7809699353045267223
  %866 = sext i32 %236 to i64
  %867 = and i64 %866, -5908443895612025639
  %868 = xor i64 %866, -1
  %869 = or i64 5908443895612025638, %868
  %870 = xor i64 %869, -1
  %871 = and i64 %870, -1
  %872 = xor i64 %865, 0
  %873 = xor i64 %872, %867
  %874 = xor i64 %873, %871
  %875 = xor i64 %874, %863
  %876 = mul i64 %861, %875
  %877 = trunc i64 %876 to i1
  %878 = select i1 %811, i1 %846, i1 %877
  %879 = icmp slt i32 %752, %6
  %880 = sext i32 %269 to i64
  %881 = add i64 %880, -5985930157347211351
  %882 = add i64 -3537000639750067787, %880
  %883 = sub i64 %882, 2448929517597143564
  %884 = sext i32 %312 to i64
  %885 = add i64 %884, -1231968573037909104
  %886 = and i64 -1231968573037909104, %884
  %887 = or i64 -1231968573037909104, %884
  %888 = add i64 %886, %887
  %889 = xor i64 -1515556068774306501, %881
  %890 = xor i64 %889, %883
  %891 = xor i64 %890, %885
  %892 = xor i64 %891, %888
  %893 = or i64 %53, -4461728437155094228
  %894 = xor i64 %53, -1
  %895 = and i64 -4461728437155094228, %894
  %896 = add i64 %895, %53
  %897 = sext i32 %407 to i64
  %898 = add i64 %897, -7839344224385240015
  %899 = sub i64 0, %897
  %900 = sub i64 -7839344224385240015, %899
  %901 = xor i64 %896, %893
  %902 = xor i64 %901, %900
  %903 = xor i64 %902, 0
  %904 = xor i64 %903, %898
  %905 = mul i64 %892, %904
  %906 = trunc i64 %905 to i1
  %907 = select i1 %878, i1 %879, i1 %906
  br i1 %907, label %908, label %990

908:                                              ; preds = %670
  %909 = mul nsw i32 %759, %6
  %910 = add nsw i32 %909, %752
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds float, float* %3, i64 %911
  %913 = load float, float* %912, align 4, !tbaa !13
  %914 = fcmp ogt float %744, %913
  br i1 %914, label %915, label %990

915:                                              ; preds = %908
  store float %744, float* %912, align 4, !tbaa !13
  %916 = sext i32 %236 to i64
  %917 = add i64 %916, 7024062475080193979
  %918 = add i64 -2360747269261090059, %916
  %919 = sub i64 %918, 9061934329368267578
  %920 = sext i32 %752 to i64
  %921 = and i64 %920, 4209387696189531653
  %922 = xor i64 %920, -1
  %923 = xor i64 4209387696189531653, %922
  %924 = and i64 %923, 4209387696189531653
  %925 = sext i32 %312 to i64
  %926 = add i64 %925, -5151213395377396258
  %927 = sub i64 0, %925
  %928 = add i64 5151213395377396258, %927
  %929 = sub i64 0, %928
  %930 = xor i64 %924, %929
  %931 = xor i64 %930, %917
  %932 = xor i64 %931, 440301351001899435
  %933 = xor i64 %932, %926
  %934 = xor i64 %933, %919
  %935 = xor i64 %934, %921
  %936 = sext i32 %236 to i64
  %937 = or i64 %936, -5697128622573328816
  %938 = xor i64 %936, -1
  %939 = and i64 -5697128622573328816, %938
  %940 = add i64 %939, %936
  %941 = add i64 %125, 3289984885194778415
  %942 = add i64 2764612768798643203, %125
  %943 = add i64 %942, 525372116396135212
  %944 = xor i64 %937, %943
  %945 = xor i64 %944, 0
  %946 = xor i64 %945, %941
  %947 = xor i64 %946, %940
  %948 = mul i64 %935, %947
  %949 = trunc i64 %948 to i32
  %950 = icmp sgt i32 %771, %949
  %951 = sext i32 %312 to i64
  %952 = add i64 %951, 6922250524538813547
  %953 = add i64 -5469080054909839975, %951
  %954 = add i64 %953, -6055413494260898094
  %955 = sext i32 %236 to i64
  %956 = add i64 %955, 4068320931044593938
  %957 = add i64 6369798780467199460, %955
  %958 = sub i64 %957, 2301477849422605522
  %959 = sext i32 %752 to i64
  %960 = and i64 %959, -4142365076615375404
  %961 = xor i64 %959, -1
  %962 = or i64 4142365076615375403, %961
  %963 = xor i64 %962, -1
  %964 = and i64 %963, -1
  %965 = xor i64 %956, %954
  %966 = xor i64 %965, 233206998475603617
  %967 = xor i64 %966, %964
  %968 = xor i64 %967, %960
  %969 = xor i64 %968, %958
  %970 = xor i64 %969, %952
  %971 = sext i32 %717 to i64
  %972 = add i64 %971, -4027825443383762375
  %973 = sub i64 0, %971
  %974 = sub i64 -4027825443383762375, %973
  %975 = sext i32 %236 to i64
  %976 = and i64 %975, 3345632087096199455
  %977 = or i64 -3345632087096199456, %975
  %978 = sub i64 %977, -3345632087096199456
  %979 = xor i64 %972, %978
  %980 = xor i64 %979, %976
  %981 = xor i64 %980, %974
  %982 = xor i64 %981, 0
  %983 = mul i64 %970, %982
  %984 = trunc i64 %983 to i32
  %985 = select i1 %950, i32 %771, i32 %984
  %986 = zext i32 %985 to i64
  %987 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %986
  %988 = load i8, i8* %987, align 1, !tbaa !10
  %989 = getelementptr inbounds i8, i8* %4, i64 %911
  store i8 %988, i8* %989, align 1, !tbaa !10
  br label %990

990:                                              ; preds = %915, %908, %670
  %991 = fadd double %671, 7.000000e-02
  %992 = fptrunc double %991 to float
  %993 = fpext float %992 to double
  %994 = sext i32 %312 to i64
  %995 = or i64 %994, -4402399834162136962
  %996 = xor i64 %994, -1
  %997 = and i64 %996, -6657745607066721502
  %998 = and i64 %994, 6657745607066721501
  %999 = or i64 %997, %998
  %1000 = xor i64 7024884286286732124, %999
  %1001 = xor i64 %994, -1
  %1002 = or i64 4402399834162136961, %1001
  %1003 = xor i64 %1002, -1
  %1004 = and i64 %1003, -1
  %1005 = or i64 %1000, %1004
  %1006 = sext i32 %5 to i64
  %1007 = or i64 %1006, 6377121975013253068
  %1008 = and i64 6377121975013253068, %1006
  %1009 = xor i64 6377121975013253068, %1006
  %1010 = or i64 %1008, %1009
  %1011 = sext i32 %771 to i64
  %1012 = and i64 %1011, 5487219315127662848
  %1013 = xor i64 %1011, -1
  %1014 = xor i64 5487219315127662848, %1013
  %1015 = and i64 %1014, 5487219315127662848
  %1016 = xor i64 %995, %1005
  %1017 = xor i64 %1016, %1012
  %1018 = xor i64 %1017, %1007
  %1019 = xor i64 %1018, -5406461355102489187
  %1020 = xor i64 %1019, %1015
  %1021 = xor i64 %1020, %1010
  %1022 = sext i32 %236 to i64
  %1023 = or i64 %1022, 965145590590428857
  %1024 = xor i64 %1022, -1
  %1025 = and i64 %1024, -6574989255437024944
  %1026 = and i64 %1022, 6574989255437024943
  %1027 = or i64 %1025, %1026
  %1028 = xor i64 -6222830270856833047, %1027
  %1029 = xor i64 %1022, -1
  %1030 = or i64 -965145590590428858, %1029
  %1031 = xor i64 %1030, -1
  %1032 = and i64 %1031, -1
  %1033 = or i64 %1028, %1032
  %1034 = sext i32 %407 to i64
  %1035 = or i64 %1034, 1612279290132356783
  %1036 = xor i64 %1034, -1
  %1037 = and i64 1612279290132356783, %1036
  %1038 = add i64 %1037, %1034
  %1039 = xor i64 %1033, %1023
  %1040 = xor i64 %1039, %1035
  %1041 = xor i64 %1040, %1038
  %1042 = xor i64 %1041, -5976619258345853022
  %1043 = mul i64 %1021, %1042
  %1044 = trunc i64 %1043 to i32
  %1045 = icmp eq i32 %717, %1044
  br i1 %1045, label %669, label %670, !llvm.loop !19
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3sinf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3cosf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: mustprogress nofree norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  %3 = bitcast float* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store float 0.000000e+00, float* %1, align 4, !tbaa !13
  %4 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store float 0.000000e+00, float* %2, align 4, !tbaa !13
  %5 = call i8* @llvm.stacksave()
  %6 = alloca [1760 x float], align 4
  %7 = alloca [1760 x i8], align 1
  %8 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 0
  %9 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 0
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %11, %0
  %12 = phi i32 [ 5, %0 ], [ %192, %11 ]
  %13 = load float, float* %1, align 4, !tbaa !13
  %14 = load float, float* %2, align 4, !tbaa !13
  %15 = sext i32 %10 to i64
  %16 = or i64 %15, 6801785543909874161
  %17 = and i64 6801785543909874161, %15
  %18 = xor i64 6801785543909874161, %15
  %19 = or i64 %17, %18
  %20 = sext i32 %10 to i64
  %21 = or i64 %20, -8511333015799051544
  %22 = xor i64 %20, -1
  %23 = and i64 -8511333015799051544, %22
  %24 = add i64 %23, %20
  %25 = xor i64 4479376070118642961, %21
  %26 = xor i64 %25, %16
  %27 = xor i64 %26, %19
  %28 = xor i64 %27, %24
  %29 = sext i32 %10 to i64
  %30 = or i64 %29, 5684802963469123126
  %31 = and i64 5684802963469123126, %29
  %32 = xor i64 5684802963469123126, %29
  %33 = or i64 %31, %32
  %34 = sext i32 %10 to i64
  %35 = and i64 %34, 7911572959616037006
  %36 = xor i64 %34, -1
  %37 = or i64 -7911572959616037007, %36
  %38 = xor i64 %37, -1
  %39 = and i64 %38, -1
  %40 = sext i32 %10 to i64
  %41 = add i64 %40, -1696455921792866952
  %42 = add i64 -8346333466807561884, %40
  %43 = sub i64 %42, -6649877545014694932
  %44 = xor i64 %39, 2472239389334575328
  %45 = xor i64 %44, %35
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, %33
  %48 = xor i64 %47, %30
  %49 = xor i64 %48, %43
  %50 = mul i64 %28, %49
  %51 = trunc i64 %50 to i32
  %52 = sext i32 %10 to i64
  %53 = add i64 %52, -3477219097812939670
  %54 = add i64 3137819960617769207, %52
  %55 = add i64 %54, -6615039058430708877
  %56 = sext i32 %10 to i64
  %57 = or i64 %56, -5120122714628581796
  %58 = xor i64 %56, -1
  %59 = and i64 %58, 3720160350420488733
  %60 = and i64 %56, -3720160350420488734
  %61 = or i64 %59, %60
  %62 = xor i64 -8407937224793275327, %61
  %63 = xor i64 %56, -1
  %64 = or i64 5120122714628581795, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = xor i64 %53, %55
  %69 = xor i64 %68, %57
  %70 = xor i64 %69, %67
  %71 = xor i64 %70, -5892210354928238499
  %72 = sext i32 %10 to i64
  %73 = or i64 %72, 4024241809933227471
  %74 = and i64 4024241809933227471, %72
  %75 = xor i64 4024241809933227471, %72
  %76 = or i64 %74, %75
  %77 = sext i32 %10 to i64
  %78 = and i64 %77, 302958212843256725
  %79 = or i64 -302958212843256726, %77
  %80 = sub i64 %79, -302958212843256726
  %81 = xor i64 %78, %80
  %82 = xor i64 %81, 2576882336510883598
  %83 = xor i64 %82, %73
  %84 = xor i64 %83, %76
  %85 = mul i64 %71, %84
  %86 = trunc i64 %85 to i32
  %87 = sext i32 %10 to i64
  %88 = add i64 %87, -8681410315881342453
  %89 = sub i64 0, %87
  %90 = add i64 8681410315881342453, %89
  %91 = sub i64 0, %90
  %92 = sext i32 %10 to i64
  %93 = add i64 %92, -6512303784500860935
  %94 = sub i64 0, %92
  %95 = sub i64 -6512303784500860935, %94
  %96 = sext i32 %10 to i64
  %97 = and i64 %96, -4922494774932369745
  %98 = xor i64 %96, -1
  %99 = xor i64 -4922494774932369745, %98
  %100 = and i64 %99, -4922494774932369745
  %101 = xor i64 %88, %95
  %102 = xor i64 %101, 312236038054664217
  %103 = xor i64 %102, %93
  %104 = xor i64 %103, %91
  %105 = xor i64 %104, %97
  %106 = xor i64 %105, %100
  %107 = sext i32 %10 to i64
  %108 = add i64 %107, 5557246535097139582
  %109 = add i64 -6342761244135313923, %107
  %110 = add i64 %109, -6546736294477098111
  %111 = sext i32 %10 to i64
  %112 = or i64 %111, -6584240279834241838
  %113 = and i64 -6584240279834241838, %111
  %114 = xor i64 -6584240279834241838, %111
  %115 = or i64 %113, %114
  %116 = xor i64 -7523002339361207088, %108
  %117 = xor i64 %116, %115
  %118 = xor i64 %117, %110
  %119 = xor i64 %118, %112
  %120 = mul i64 %106, %119
  %121 = trunc i64 %120 to i32
  call void @_Z6renderffiPfPcii(float %13, float %14, i32 %51, float* nonnull %9, i8* nonnull %8, i32 %86, i32 %121)
  %122 = sext i32 %10 to i64
  %123 = add i64 %122, 253252023393099143
  %124 = and i64 253252023393099143, %122
  %125 = or i64 253252023393099143, %122
  %126 = add i64 %124, %125
  %127 = sext i32 %10 to i64
  %128 = add i64 %127, 4674227354522779068
  %129 = add i64 -4274464130148255753, %127
  %130 = add i64 %129, 8948691484671034821
  %131 = xor i64 %123, -8421051783010668359
  %132 = xor i64 %131, %130
  %133 = xor i64 %132, %126
  %134 = xor i64 %133, %128
  %135 = sext i32 %10 to i64
  %136 = and i64 %135, 5144257392816307534
  %137 = xor i64 %135, -1
  %138 = xor i64 5144257392816307534, %137
  %139 = and i64 %138, 5144257392816307534
  %140 = sext i32 %10 to i64
  %141 = and i64 %140, 6451034777056362226
  %142 = xor i64 %140, -1
  %143 = or i64 -6451034777056362227, %142
  %144 = xor i64 %143, -1
  %145 = and i64 %144, -1
  %146 = xor i64 %141, %139
  %147 = xor i64 %146, 5143617824739710345
  %148 = xor i64 %147, %145
  %149 = xor i64 %148, %136
  %150 = mul i64 %134, %149
  %151 = trunc i64 %150 to i32
  call void @_Z7displayPKcRfS1_i(i8* nonnull %8, float* nonnull align 4 dereferenceable(4) %1, float* nonnull align 4 dereferenceable(4) %2, i32 %151)
  %152 = sext i32 %10 to i64
  %153 = add i64 %152, 5279168614289840113
  %154 = add i64 8835115604618157750, %152
  %155 = add i64 %154, -3555946990328317637
  %156 = sext i32 %10 to i64
  %157 = add i64 %156, -6793336273183961612
  %158 = add i64 -4045593632085718616, %156
  %159 = add i64 %158, -2747742641098242996
  %160 = xor i64 %153, -1373203352861397787
  %161 = xor i64 %160, %157
  %162 = xor i64 %161, %155
  %163 = xor i64 %162, %159
  %164 = sext i32 %10 to i64
  %165 = and i64 %164, -3655845379316554587
  %166 = or i64 3655845379316554586, %164
  %167 = sub i64 %166, 3655845379316554586
  %168 = sext i32 %10 to i64
  %169 = and i64 %168, -6390340635602813978
  %170 = or i64 6390340635602813977, %168
  %171 = sub i64 %170, 6390340635602813977
  %172 = sext i32 %10 to i64
  %173 = or i64 %172, 4230233251313120024
  %174 = xor i64 %172, -1
  %175 = and i64 %174, 8900210780705377678
  %176 = and i64 %172, -8900210780705377679
  %177 = or i64 %175, %176
  %178 = xor i64 4699268948839612054, %177
  %179 = xor i64 %172, -1
  %180 = or i64 -4230233251313120025, %179
  %181 = xor i64 %180, -1
  %182 = and i64 %181, -1
  %183 = or i64 %178, %182
  %184 = xor i64 4240954756117541101, %165
  %185 = xor i64 %184, %171
  %186 = xor i64 %185, %167
  %187 = xor i64 %186, %183
  %188 = xor i64 %187, %173
  %189 = xor i64 %188, %169
  %190 = mul i64 %163, %189
  %191 = trunc i64 %190 to i32
  %192 = add nuw nsw i32 %12, %191
  %193 = sext i32 %10 to i64
  %194 = and i64 %193, 6837159323591757384
  %195 = xor i64 %193, -1
  %196 = xor i64 6837159323591757384, %195
  %197 = and i64 %196, 6837159323591757384
  %198 = sext i32 %10 to i64
  %199 = add i64 %198, -7513996296151216011
  %200 = sub i64 0, %198
  %201 = sub i64 -7513996296151216011, %200
  %202 = sext i32 %10 to i64
  %203 = add i64 %202, 7650098488179410587
  %204 = sub i64 0, %202
  %205 = sub i64 7650098488179410587, %204
  %206 = xor i64 %201, %199
  %207 = xor i64 %206, %197
  %208 = xor i64 %207, %205
  %209 = xor i64 %208, %203
  %210 = xor i64 %209, %194
  %211 = xor i64 %210, -4625811907192450135
  %212 = sext i32 %10 to i64
  %213 = add i64 %212, -8853151954807744848
  %214 = add i64 5758528695116980792, %212
  %215 = add i64 %214, 3835063423784825976
  %216 = sext i32 %10 to i64
  %217 = add i64 %216, 7546034538238188964
  %218 = add i64 8869053815100013089, %216
  %219 = add i64 %218, -1323019276861824125
  %220 = sext i32 %10 to i64
  %221 = or i64 %220, 138343691199094669
  %222 = xor i64 %220, -1
  %223 = and i64 %222, 7667779908775015944
  %224 = and i64 %220, -7667779908775015945
  %225 = or i64 %223, %224
  %226 = xor i64 7746776201095539077, %225
  %227 = xor i64 %220, -1
  %228 = or i64 -138343691199094670, %227
  %229 = xor i64 %228, -1
  %230 = and i64 %229, -1
  %231 = or i64 %226, %230
  %232 = xor i64 %221, -2822073052752280070
  %233 = xor i64 %232, %231
  %234 = xor i64 %233, %215
  %235 = xor i64 %234, %213
  %236 = xor i64 %235, %219
  %237 = xor i64 %236, %217
  %238 = mul i64 %211, %237
  %239 = trunc i64 %238 to i32
  %240 = icmp eq i32 %192, %239
  br i1 %240, label %242, label %11, !llvm.loop !20

241:                                              ; preds = %242
  call void @llvm.stackrestore(i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i32 %253

242:                                              ; preds = %242, %11
  %243 = phi i64 [ %299, %242 ], [ 0, %11 ]
  %244 = phi i32 [ %253, %242 ], [ 0, %11 ]
  %245 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 %243
  %246 = load i8, i8* %245, align 1, !tbaa !10
  %247 = sext i8 %246 to i32
  %248 = add nsw i32 %244, %247
  %249 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 %243
  %250 = load float, float* %249, align 4, !tbaa !13
  %251 = sitofp i32 %248 to float
  %252 = fadd float %250, %251
  %253 = fptosi float %252 to i32
  %254 = sext i32 %192 to i64
  %255 = or i64 %254, 8361312542230391676
  %256 = xor i64 %254, -1
  %257 = and i64 8361312542230391676, %256
  %258 = add i64 %257, %254
  %259 = sext i32 %192 to i64
  %260 = add i64 %259, 1346290705663632194
  %261 = sub i64 0, %259
  %262 = add i64 -1346290705663632194, %261
  %263 = sub i64 0, %262
  %264 = xor i64 %263, 4855023928600421895
  %265 = xor i64 %264, %260
  %266 = xor i64 %265, %258
  %267 = xor i64 %266, %255
  %268 = sext i32 %10 to i64
  %269 = add i64 %268, -2950608410606235810
  %270 = xor i64 -2950608410606235810, %268
  %271 = and i64 -2950608410606235810, %268
  %272 = mul i64 2, %271
  %273 = add i64 %270, %272
  %274 = sext i32 %12 to i64
  %275 = or i64 %274, 5716817211920200755
  %276 = xor i64 %274, -1
  %277 = and i64 %276, -8691150783924408051
  %278 = and i64 %274, 8691150783924408050
  %279 = or i64 %277, %278
  %280 = xor i64 -4020339390637914818, %279
  %281 = xor i64 %274, -1
  %282 = or i64 -5716817211920200756, %281
  %283 = xor i64 %282, -1
  %284 = and i64 %283, -1
  %285 = or i64 %280, %284
  %286 = sext i32 %12 to i64
  %287 = and i64 %286, -7920035004928256351
  %288 = xor i64 %286, -1
  %289 = or i64 7920035004928256350, %288
  %290 = xor i64 %289, -1
  %291 = and i64 %290, -1
  %292 = xor i64 %285, %287
  %293 = xor i64 %292, %269
  %294 = xor i64 %293, %291
  %295 = xor i64 %294, 5848566945265002423
  %296 = xor i64 %295, %275
  %297 = xor i64 %296, %273
  %298 = mul i64 %267, %297
  %299 = add nuw nsw i64 %243, %298
  %300 = sext i32 %192 to i64
  %301 = or i64 %300, -5880464034766937562
  %302 = and i64 -5880464034766937562, %300
  %303 = xor i64 -5880464034766937562, %300
  %304 = or i64 %302, %303
  %305 = sext i32 %12 to i64
  %306 = or i64 %305, -7102931180181913911
  %307 = and i64 -7102931180181913911, %305
  %308 = xor i64 -7102931180181913911, %305
  %309 = or i64 %307, %308
  %310 = sext i32 %12 to i64
  %311 = add i64 %310, 2200440222045660870
  %312 = sub i64 0, %310
  %313 = add i64 -2200440222045660870, %312
  %314 = sub i64 0, %313
  %315 = xor i64 %309, %314
  %316 = xor i64 %315, 16467058479509429
  %317 = xor i64 %316, %304
  %318 = xor i64 %317, %311
  %319 = xor i64 %318, %306
  %320 = xor i64 %319, %301
  %321 = sext i32 %12 to i64
  %322 = add i64 %321, 6450418098008509044
  %323 = add i64 8935707470310722773, %321
  %324 = sub i64 %323, 2485289372302213729
  %325 = sext i32 %192 to i64
  %326 = and i64 %325, 8792620024132371834
  %327 = or i64 -8792620024132371835, %325
  %328 = sub i64 %327, -8792620024132371835
  %329 = xor i64 %324, %328
  %330 = xor i64 %329, %322
  %331 = xor i64 %330, -728443799974611104
  %332 = xor i64 %331, %326
  %333 = mul i64 %320, %332
  %334 = icmp eq i64 %299, %333
  br i1 %334, label %241, label %242, !llvm.loop !21
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #8

attributes #0 = { mustprogress nofree nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #5 = { inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { mustprogress nofree norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !11, i64 0}
!15 = distinct !{!15, !16, !17}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !16, !17}
!19 = distinct !{!19, !16, !17}
!20 = distinct !{!20, !16, !17}
!21 = distinct !{!21, !16, !17}
