; ModuleID = 'output/const-obfuscation/ex9/ex9.ll'
source_filename = "input/const-obfuscation/ex9/ex9.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [4 x i8] c"\1B[H\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c".,-~:;=!*#$@\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1

; Function Attrs: mustprogress nofree nounwind ssp uwtable
define void @_Z7displayPKcRfS1_i(i8* nocapture readonly %0, float* nocapture nonnull align 4 dereferenceable(4) %1, float* nocapture nonnull align 4 dereferenceable(4) %2, i32 %3) local_unnamed_addr #0 {
  %5 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %7

6:                                                ; preds = %100
  ret void

7:                                                ; preds = %100, %4
  %8 = phi i64 [ 0, %4 ], [ %152, %100 ]
  %9 = trunc i64 %8 to i32
  %10 = sext i32 %5 to i64
  %11 = or i64 %10, -3131944572039836737
  %12 = and i64 -3131944572039836737, %10
  %13 = xor i64 -3131944572039836737, %10
  %14 = or i64 %12, %13
  %15 = sext i32 %3 to i64
  %16 = or i64 %15, 5737746290151088899
  %17 = xor i64 %15, -1
  %18 = and i64 5737746290151088899, %17
  %19 = add i64 %18, %15
  %20 = xor i64 %19, %14
  %21 = xor i64 %20, %16
  %22 = xor i64 %21, %11
  %23 = xor i64 %22, 6558401517995805509
  %24 = sext i32 %3 to i64
  %25 = and i64 %24, -6880393201934371782
  %26 = or i64 6880393201934371781, %24
  %27 = sub i64 %26, 6880393201934371781
  %28 = sext i32 %5 to i64
  %29 = and i64 %28, 4196508883468933639
  %30 = or i64 -4196508883468933640, %28
  %31 = sub i64 %30, -4196508883468933640
  %32 = sext i32 %5 to i64
  %33 = and i64 %32, 2019343566400057521
  %34 = xor i64 %32, -1
  %35 = or i64 -2019343566400057522, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = xor i64 %31, 1021386347654732816
  %39 = xor i64 %38, %33
  %40 = xor i64 %39, %29
  %41 = xor i64 %40, %25
  %42 = xor i64 %41, %27
  %43 = xor i64 %42, %37
  %44 = mul i64 %23, %43
  %45 = trunc i64 %44 to i32
  %46 = urem i32 %9, %45
  %47 = sext i32 %5 to i64
  %48 = or i64 %47, -6505199360749441351
  %49 = xor i64 %47, -1
  %50 = and i64 %49, 3297423380823745023
  %51 = and i64 %47, -3297423380823745024
  %52 = or i64 %50, %51
  %53 = xor i64 -8612519945600807098, %52
  %54 = xor i64 %47, -1
  %55 = or i64 6505199360749441350, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = or i64 %53, %57
  %59 = sext i32 %3 to i64
  %60 = or i64 %59, 5042562257423114942
  %61 = xor i64 %59, -1
  %62 = and i64 5042562257423114942, %61
  %63 = add i64 %62, %59
  %64 = sext i32 %5 to i64
  %65 = add i64 %64, -2153262458039484039
  %66 = add i64 -5194921770178637002, %64
  %67 = add i64 %66, 3041659312139152963
  %68 = xor i64 %63, %60
  %69 = xor i64 %68, %58
  %70 = xor i64 %69, 566367424546342195
  %71 = xor i64 %70, %65
  %72 = xor i64 %71, %67
  %73 = xor i64 %72, %48
  %74 = sext i32 %3 to i64
  %75 = and i64 %74, 4035424237208519891
  %76 = xor i64 %74, -1
  %77 = xor i64 4035424237208519891, %76
  %78 = and i64 %77, 4035424237208519891
  %79 = sext i32 %3 to i64
  %80 = add i64 %79, -488699460724572521
  %81 = sub i64 0, %79
  %82 = sub i64 -488699460724572521, %81
  %83 = sext i32 %5 to i64
  %84 = add i64 %83, 2786949368555701521
  %85 = add i64 8332153106115152863, %83
  %86 = sub i64 %85, 5545203737559451342
  %87 = xor i64 0, %86
  %88 = xor i64 %87, %82
  %89 = xor i64 %88, %78
  %90 = xor i64 %89, %80
  %91 = xor i64 %90, %75
  %92 = xor i64 %91, %84
  %93 = mul i64 %73, %92
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %46, %94
  br i1 %95, label %100, label %96

96:                                               ; preds = %7
  %97 = getelementptr inbounds i8, i8* %0, i64 %8
  %98 = load i8, i8* %97, align 1, !tbaa !10
  %99 = sext i8 %98 to i32
  br label %100

100:                                              ; preds = %96, %7
  %101 = phi i32 [ %99, %96 ], [ 10, %7 ]
  %102 = call i32 @putchar(i32 %101)
  %103 = load float, float* %1, align 4, !tbaa !13
  %104 = fpext float %103 to double
  %105 = fadd double %104, 4.000000e-05
  %106 = fptrunc double %105 to float
  store float %106, float* %1, align 4, !tbaa !13
  %107 = load float, float* %2, align 4, !tbaa !13
  %108 = fpext float %107 to double
  %109 = fadd double %108, 2.000000e-05
  %110 = fptrunc double %109 to float
  store float %110, float* %2, align 4, !tbaa !13
  %111 = sext i32 %9 to i64
  %112 = and i64 %111, -7346080269662291031
  %113 = or i64 7346080269662291030, %111
  %114 = sub i64 %113, 7346080269662291030
  %115 = sext i32 %3 to i64
  %116 = add i64 %115, -6708094112848273581
  %117 = and i64 -6708094112848273581, %115
  %118 = or i64 -6708094112848273581, %115
  %119 = add i64 %117, %118
  %120 = sext i32 %5 to i64
  %121 = and i64 %120, 7523950242177045202
  %122 = xor i64 %120, -1
  %123 = or i64 -7523950242177045203, %122
  %124 = xor i64 %123, -1
  %125 = and i64 %124, -1
  %126 = xor i64 5922042822687732163, %125
  %127 = xor i64 %126, %121
  %128 = xor i64 %127, %112
  %129 = xor i64 %128, %114
  %130 = xor i64 %129, %116
  %131 = xor i64 %130, %119
  %132 = sext i32 %46 to i64
  %133 = and i64 %132, -6085784249798649658
  %134 = xor i64 %132, -1
  %135 = xor i64 -6085784249798649658, %134
  %136 = and i64 %135, -6085784249798649658
  %137 = sext i32 %5 to i64
  %138 = and i64 %137, -1070232528408893511
  %139 = or i64 1070232528408893510, %137
  %140 = sub i64 %139, 1070232528408893510
  %141 = sext i32 %9 to i64
  %142 = add i64 %141, 8919306549039686698
  %143 = sub i64 0, %141
  %144 = sub i64 8919306549039686698, %143
  %145 = xor i64 %133, 5194311622908790507
  %146 = xor i64 %145, %138
  %147 = xor i64 %146, %144
  %148 = xor i64 %147, %142
  %149 = xor i64 %148, %140
  %150 = xor i64 %149, %136
  %151 = mul i64 %131, %150
  %152 = add nuw nsw i64 %8, %151
  %153 = sext i32 %5 to i64
  %154 = add i64 %153, 7612459222438738073
  %155 = and i64 7612459222438738073, %153
  %156 = or i64 7612459222438738073, %153
  %157 = add i64 %155, %156
  %158 = or i64 %8, -5206838785576503274
  %159 = and i64 -5206838785576503274, %8
  %160 = xor i64 -5206838785576503274, %8
  %161 = or i64 %159, %160
  %162 = sext i32 %5 to i64
  %163 = and i64 %162, -7797178895814512932
  %164 = or i64 7797178895814512931, %162
  %165 = sub i64 %164, 7797178895814512931
  %166 = xor i64 %163, %165
  %167 = xor i64 %166, %161
  %168 = xor i64 %167, 1891343664240470743
  %169 = xor i64 %168, %157
  %170 = xor i64 %169, %154
  %171 = xor i64 %170, %158
  %172 = add i64 %8, 7945528437332082536
  %173 = sub i64 0, %8
  %174 = add i64 -7945528437332082536, %173
  %175 = sub i64 0, %174
  %176 = sext i32 %46 to i64
  %177 = or i64 %176, -4689013026418828452
  %178 = and i64 -4689013026418828452, %176
  %179 = xor i64 -4689013026418828452, %176
  %180 = or i64 %178, %179
  %181 = xor i64 %175, %180
  %182 = xor i64 %181, %172
  %183 = xor i64 %182, -8245672013136225017
  %184 = xor i64 %183, %177
  %185 = mul i64 %171, %184
  %186 = icmp eq i64 %152, %185
  br i1 %186, label %6, label %7, !llvm.loop !15
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind ssp uwtable
define void @_Z6renderffiPfPcii(float %0, float %1, i32 %2, float* nocapture %3, i8* nocapture %4, i32 %5, i32 %6) local_unnamed_addr #3 {
  %8 = sext i32 %6 to i64
  %9 = or i64 %8, 3285118437261871389
  %10 = xor i64 %8, -1
  %11 = and i64 %10, 1961339619609816063
  %12 = and i64 %8, -1961339619609816064
  %13 = or i64 %11, %12
  %14 = xor i64 3940374994494333666, %13
  %15 = xor i64 %8, -1
  %16 = or i64 -3285118437261871390, %15
  %17 = xor i64 %16, -1
  %18 = and i64 %17, -1
  %19 = or i64 %14, %18
  %20 = sext i32 %6 to i64
  %21 = and i64 %20, -7404596388489565244
  %22 = xor i64 %20, -1
  %23 = or i64 7404596388489565243, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = sext i32 %6 to i64
  %27 = and i64 %26, 5194625762759943730
  %28 = xor i64 %26, -1
  %29 = xor i64 5194625762759943730, %28
  %30 = and i64 %29, 5194625762759943730
  %31 = xor i64 %19, %25
  %32 = xor i64 %31, %21
  %33 = xor i64 %32, -1504121495491149133
  %34 = xor i64 %33, %27
  %35 = xor i64 %34, %9
  %36 = xor i64 %35, %30
  %37 = sext i32 %6 to i64
  %38 = add i64 %37, -4144647453596789305
  %39 = sub i64 0, %37
  %40 = add i64 4144647453596789305, %39
  %41 = sub i64 0, %40
  %42 = sext i32 %6 to i64
  %43 = add i64 %42, -4870571237429084521
  %44 = add i64 -4814568806933078915, %42
  %45 = sub i64 %44, 56002430496005606
  %46 = sext i32 %5 to i64
  %47 = or i64 %46, -8828579348659560289
  %48 = xor i64 %46, -1
  %49 = and i64 %48, -7397018596478412464
  %50 = and i64 %46, 7397018596478412463
  %51 = or i64 %49, %50
  %52 = xor i64 2027208194454862287, %51
  %53 = xor i64 %46, -1
  %54 = or i64 8828579348659560288, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = xor i64 -6335972409956404424, %38
  %59 = xor i64 %58, %41
  %60 = xor i64 %59, %57
  %61 = xor i64 %60, %47
  %62 = xor i64 %61, %45
  %63 = xor i64 %62, %43
  %64 = mul i64 %36, %63
  %65 = trunc i64 %64 to i32
  %66 = sdiv i32 %6, %65
  %67 = sext i32 %2 to i64
  %68 = sext i32 %2 to i64
  %69 = or i64 %68, 7933964751199540065
  %70 = xor i64 %68, -1
  %71 = and i64 7933964751199540065, %70
  %72 = add i64 %71, %68
  %73 = sext i32 %5 to i64
  %74 = and i64 %73, 3909706880516793344
  %75 = or i64 -3909706880516793345, %73
  %76 = sub i64 %75, -3909706880516793345
  %77 = sext i32 %6 to i64
  %78 = or i64 %77, -775908226217717918
  %79 = xor i64 %77, -1
  %80 = and i64 %79, -4189956613205082001
  %81 = and i64 %77, 4189956613205082000
  %82 = or i64 %80, %81
  %83 = xor i64 3522135126741978893, %82
  %84 = xor i64 %77, -1
  %85 = or i64 775908226217717917, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = or i64 %83, %87
  %89 = xor i64 %88, %74
  %90 = xor i64 %89, %78
  %91 = xor i64 %90, %72
  %92 = xor i64 %91, %76
  %93 = xor i64 %92, 1781375697711264449
  %94 = xor i64 %93, %69
  %95 = sext i32 %5 to i64
  %96 = and i64 %95, -8467487790672707462
  %97 = xor i64 %95, -1
  %98 = xor i64 -8467487790672707462, %97
  %99 = and i64 %98, -8467487790672707462
  %100 = sext i32 %2 to i64
  %101 = and i64 %100, 6031465532779399891
  %102 = or i64 -6031465532779399892, %100
  %103 = sub i64 %102, -6031465532779399892
  %104 = sext i32 %2 to i64
  %105 = and i64 %104, -8179015381475081537
  %106 = xor i64 %104, -1
  %107 = or i64 8179015381475081536, %106
  %108 = xor i64 %107, -1
  %109 = and i64 %108, -1
  %110 = xor i64 %103, %101
  %111 = xor i64 %110, %105
  %112 = xor i64 %111, %109
  %113 = xor i64 %112, %96
  %114 = xor i64 %113, 1437017649550960672
  %115 = xor i64 %114, %99
  %116 = mul i64 %94, %115
  %117 = trunc i64 %116 to i8
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %117, i64 %67, i1 false)
  %118 = bitcast float* %3 to i8*
  %119 = sext i32 %5 to i64
  %120 = or i64 %119, -8404037622387560207
  %121 = and i64 -8404037622387560207, %119
  %122 = xor i64 -8404037622387560207, %119
  %123 = or i64 %121, %122
  %124 = sext i32 %6 to i64
  %125 = add i64 %124, 6071601863617250060
  %126 = and i64 6071601863617250060, %124
  %127 = or i64 6071601863617250060, %124
  %128 = add i64 %126, %127
  %129 = sext i32 %5 to i64
  %130 = and i64 %129, -488197026411490567
  %131 = xor i64 %129, -1
  %132 = xor i64 -488197026411490567, %131
  %133 = and i64 %132, -488197026411490567
  %134 = xor i64 %123, %130
  %135 = xor i64 %134, %120
  %136 = xor i64 %135, %133
  %137 = xor i64 %136, %125
  %138 = xor i64 %137, -43722309405739303
  %139 = xor i64 %138, %128
  %140 = sext i32 %2 to i64
  %141 = and i64 %140, -8450766637928970454
  %142 = or i64 8450766637928970453, %140
  %143 = sub i64 %142, 8450766637928970453
  %144 = sext i32 %6 to i64
  %145 = add i64 %144, -8450345588980083233
  %146 = add i64 2965634608792295493, %144
  %147 = add i64 %146, 7030763875937172890
  %148 = sext i32 %5 to i64
  %149 = or i64 %148, 8852557844751838977
  %150 = xor i64 %148, -1
  %151 = and i64 %150, -8335684089276475095
  %152 = and i64 %148, 8335684089276475094
  %153 = or i64 %151, %152
  %154 = xor i64 -681405800911260120, %153
  %155 = xor i64 %148, -1
  %156 = or i64 -8852557844751838978, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = xor i64 %149, %147
  %161 = xor i64 %160, %159
  %162 = xor i64 %161, %145
  %163 = xor i64 %162, %141
  %164 = xor i64 %163, %143
  %165 = xor i64 %164, 7621907162270094034
  %166 = mul i64 %139, %165
  %167 = shl nsw i64 %67, %166
  %168 = sext i32 %5 to i64
  %169 = or i64 %168, -1137798139161868058
  %170 = and i64 -1137798139161868058, %168
  %171 = xor i64 -1137798139161868058, %168
  %172 = or i64 %170, %171
  %173 = sext i32 %5 to i64
  %174 = or i64 %173, -118358905673608366
  %175 = xor i64 %173, -1
  %176 = and i64 -118358905673608366, %175
  %177 = add i64 %176, %173
  %178 = sext i32 %2 to i64
  %179 = or i64 %178, -6338946183247011346
  %180 = xor i64 %178, -1
  %181 = and i64 -6338946183247011346, %180
  %182 = add i64 %181, %178
  %183 = xor i64 %172, %179
  %184 = xor i64 %183, -3122591001506247339
  %185 = xor i64 %184, %169
  %186 = xor i64 %185, %177
  %187 = xor i64 %186, %174
  %188 = xor i64 %187, %182
  %189 = sext i32 %5 to i64
  %190 = or i64 %189, -5230121975177363784
  %191 = and i64 -5230121975177363784, %189
  %192 = xor i64 -5230121975177363784, %189
  %193 = or i64 %191, %192
  %194 = sext i32 %2 to i64
  %195 = and i64 %194, 4665096454999834589
  %196 = xor i64 %194, -1
  %197 = xor i64 4665096454999834589, %196
  %198 = and i64 %197, 4665096454999834589
  %199 = xor i64 %198, %195
  %200 = xor i64 %199, %193
  %201 = xor i64 %200, 0
  %202 = xor i64 %201, %190
  %203 = mul i64 %188, %202
  %204 = trunc i64 %203 to i8
  call void @llvm.memset.p0i8.i64(i8* align 4 %118, i8 %204, i64 %167, i1 false)
  %205 = sitofp i32 %66 to float
  %206 = sext i32 %6 to i64
  %207 = add i64 %206, -2730300640205419535
  %208 = add i64 -7433840338192114061, %206
  %209 = add i64 %208, 4703539697986694526
  %210 = sext i32 %6 to i64
  %211 = or i64 %210, -5418587944947430224
  %212 = xor i64 %210, -1
  %213 = and i64 %212, -3375202441583886429
  %214 = and i64 %210, 3375202441583886428
  %215 = or i64 %213, %214
  %216 = xor i64 7342434995638481683, %215
  %217 = xor i64 %210, -1
  %218 = or i64 5418587944947430223, %217
  %219 = xor i64 %218, -1
  %220 = and i64 %219, -1
  %221 = or i64 %216, %220
  %222 = sext i32 %5 to i64
  %223 = add i64 %222, -1651708822255003135
  %224 = xor i64 -1651708822255003135, %222
  %225 = and i64 -1651708822255003135, %222
  %226 = mul i64 2, %225
  %227 = add i64 %224, %226
  %228 = xor i64 %223, %211
  %229 = xor i64 %228, 29897148662798261
  %230 = xor i64 %229, %209
  %231 = xor i64 %230, %221
  %232 = xor i64 %231, %227
  %233 = xor i64 %232, %207
  %234 = sext i32 %2 to i64
  %235 = and i64 %234, -8125882548813943366
  %236 = xor i64 %234, -1
  %237 = xor i64 -8125882548813943366, %236
  %238 = and i64 %237, -8125882548813943366
  %239 = sext i32 %6 to i64
  %240 = and i64 %239, 1549265018845438417
  %241 = or i64 -1549265018845438418, %239
  %242 = sub i64 %241, -1549265018845438418
  %243 = sext i32 %6 to i64
  %244 = or i64 %243, -3043948973913370255
  %245 = and i64 -3043948973913370255, %243
  %246 = xor i64 -3043948973913370255, %243
  %247 = or i64 %245, %246
  %248 = xor i64 %244, %238
  %249 = xor i64 %248, %235
  %250 = xor i64 %249, %242
  %251 = xor i64 %250, -582817880538137286
  %252 = xor i64 %251, %240
  %253 = xor i64 %252, %247
  %254 = mul i64 %233, %253
  %255 = trunc i64 %254 to i32
  %256 = sdiv i32 %6, %255
  %257 = sitofp i32 %256 to float
  %258 = sext i32 %6 to i64
  %259 = add i64 %258, -253634755032544994
  %260 = and i64 -253634755032544994, %258
  %261 = or i64 -253634755032544994, %258
  %262 = add i64 %260, %261
  %263 = sext i32 %5 to i64
  %264 = or i64 %263, 4577880806541851818
  %265 = xor i64 %263, -1
  %266 = and i64 4577880806541851818, %265
  %267 = add i64 %266, %263
  %268 = sext i32 %2 to i64
  %269 = add i64 %268, 5742330840680070111
  %270 = sub i64 0, %268
  %271 = sub i64 5742330840680070111, %270
  %272 = xor i64 %262, 1128831205087254217
  %273 = xor i64 %272, %269
  %274 = xor i64 %273, %271
  %275 = xor i64 %274, %264
  %276 = xor i64 %275, %267
  %277 = xor i64 %276, %259
  %278 = sext i32 %6 to i64
  %279 = or i64 %278, -2813307340556398254
  %280 = xor i64 %278, -1
  %281 = and i64 %280, 6666540128803357758
  %282 = and i64 %278, -6666540128803357759
  %283 = or i64 %281, %282
  %284 = xor i64 -8903245875412396692, %283
  %285 = xor i64 %278, -1
  %286 = or i64 2813307340556398253, %285
  %287 = xor i64 %286, -1
  %288 = and i64 %287, -1
  %289 = or i64 %284, %288
  %290 = sext i32 %2 to i64
  %291 = or i64 %290, -4439756101751856991
  %292 = and i64 -4439756101751856991, %290
  %293 = xor i64 -4439756101751856991, %290
  %294 = or i64 %292, %293
  %295 = xor i64 7031163178553689842, %291
  %296 = xor i64 %295, %289
  %297 = xor i64 %296, %294
  %298 = xor i64 %297, %279
  %299 = mul i64 %277, %298
  %300 = trunc i64 %299 to i32
  %301 = sdiv i32 %5, %300
  %302 = sext i32 %2 to i64
  %303 = add i64 %302, 4199932501863141173
  %304 = sub i64 0, %302
  %305 = add i64 -4199932501863141173, %304
  %306 = sub i64 0, %305
  %307 = sext i32 %2 to i64
  %308 = and i64 %307, 3525162947899571051
  %309 = xor i64 %307, -1
  %310 = or i64 -3525162947899571052, %309
  %311 = xor i64 %310, -1
  %312 = and i64 %311, -1
  %313 = xor i64 %312, 2178925826385343651
  %314 = xor i64 %313, %306
  %315 = xor i64 %314, %308
  %316 = xor i64 %315, %303
  %317 = sext i32 %5 to i64
  %318 = and i64 %317, -6668727296626903173
  %319 = xor i64 %317, -1
  %320 = or i64 6668727296626903172, %319
  %321 = xor i64 %320, -1
  %322 = and i64 %321, -1
  %323 = sext i32 %5 to i64
  %324 = or i64 %323, -6178959274584488955
  %325 = xor i64 %323, -1
  %326 = and i64 -6178959274584488955, %325
  %327 = add i64 %326, %323
  %328 = sext i32 %6 to i64
  %329 = or i64 %328, -6437967601130600954
  %330 = xor i64 %328, -1
  %331 = and i64 -6437967601130600954, %330
  %332 = add i64 %331, %328
  %333 = xor i64 %327, %329
  %334 = xor i64 %333, %332
  %335 = xor i64 %334, %318
  %336 = xor i64 %335, %324
  %337 = xor i64 %336, %322
  %338 = xor i64 %337, -8751268013400596725
  %339 = mul i64 %316, %338
  %340 = trunc i64 %339 to i32
  %341 = add nsw i32 %301, %340
  %342 = sitofp i32 %341 to float
  %343 = call fastcc float @_ZL3cosf(float 5.000000e-01) #9
  %344 = call fastcc float @_ZL3cosf(float %1) #9
  %345 = call fastcc float @_ZL3sinf(float %1) #9
  br label %353

346:                                              ; preds = %668
  %347 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  %348 = call fastcc float @_ZL3sinf(float %0) #9
  %349 = fcmp une float %348, 0.000000e+00
  %350 = fmul float %348, 2.000000e+00
  %351 = select i1 %349, float %350, float %348
  %352 = call fastcc float @_ZL3cosf(float %0) #9
  br label %674

353:                                              ; preds = %668, %7
  %354 = phi double [ 0.000000e+00, %7 ], [ %671, %668 ]
  %355 = phi float [ 0.000000e+00, %7 ], [ %670, %668 ]
  %356 = fptosi float %355 to i32
  switch i32 %356, label %395 [
    i32 0, label %357
    i32 1, label %359
    i32 2, label %362
    i32 3, label %366
    i32 4, label %371
    i32 5, label %377
    i32 6, label %384
  ]

357:                                              ; preds = %353
  %358 = call fastcc float @_ZL3sinf(float 5.000000e-01) #9
  br label %359

359:                                              ; preds = %357, %353
  %360 = phi float [ 0.000000e+00, %353 ], [ %358, %357 ]
  %361 = call fastcc float @_ZL3cosf(float %355) #9
  br label %362

362:                                              ; preds = %359, %353
  %363 = phi float [ 0.000000e+00, %353 ], [ %361, %359 ]
  %364 = phi float [ 0.000000e+00, %353 ], [ %360, %359 ]
  %365 = call fastcc float @_ZL3sinf(float %0) #9
  br label %366

366:                                              ; preds = %362, %353
  %367 = phi float [ 0.000000e+00, %353 ], [ %365, %362 ]
  %368 = phi float [ 0.000000e+00, %353 ], [ %363, %362 ]
  %369 = phi float [ 0.000000e+00, %353 ], [ %364, %362 ]
  %370 = call fastcc float @_ZL3sinf(float %355) #9
  br label %371

371:                                              ; preds = %366, %353
  %372 = phi float [ 0.000000e+00, %353 ], [ %370, %366 ]
  %373 = phi float [ 0.000000e+00, %353 ], [ %367, %366 ]
  %374 = phi float [ 0.000000e+00, %353 ], [ %368, %366 ]
  %375 = phi float [ 0.000000e+00, %353 ], [ %369, %366 ]
  %376 = call fastcc float @_ZL3cosf(float %0) #9
  br label %377

377:                                              ; preds = %371, %353
  %378 = phi float [ 0.000000e+00, %353 ], [ %376, %371 ]
  %379 = phi float [ 0.000000e+00, %353 ], [ %372, %371 ]
  %380 = phi float [ 0.000000e+00, %353 ], [ %373, %371 ]
  %381 = phi float [ 0.000000e+00, %353 ], [ %374, %371 ]
  %382 = phi float [ 0.000000e+00, %353 ], [ %375, %371 ]
  %383 = fadd float %381, %205
  br label %384

384:                                              ; preds = %377, %353
  %385 = phi float [ 0.000000e+00, %353 ], [ %383, %377 ]
  %386 = phi float [ 0.000000e+00, %353 ], [ %378, %377 ]
  %387 = phi float [ 0.000000e+00, %353 ], [ %379, %377 ]
  %388 = phi float [ 0.000000e+00, %353 ], [ %380, %377 ]
  %389 = phi float [ 0.000000e+00, %353 ], [ %381, %377 ]
  %390 = phi float [ 0.000000e+00, %353 ], [ %382, %377 ]
  %391 = fmul float %385, %390
  %392 = fmul float %386, %391
  %393 = fmul float %387, %388
  %394 = fsub float %392, %393
  br label %395

395:                                              ; preds = %384, %353
  %396 = phi float [ 0.000000e+00, %353 ], [ %394, %384 ]
  %397 = phi float [ 0.000000e+00, %353 ], [ %385, %384 ]
  %398 = phi float [ 0.000000e+00, %353 ], [ %386, %384 ]
  %399 = phi float [ 0.000000e+00, %353 ], [ %387, %384 ]
  %400 = phi float [ 0.000000e+00, %353 ], [ %388, %384 ]
  %401 = phi float [ 0.000000e+00, %353 ], [ %389, %384 ]
  %402 = phi float [ 0.000000e+00, %353 ], [ %390, %384 ]
  %403 = fmul float %397, %402
  %404 = fmul float %400, %403
  %405 = fmul float %398, %399
  %406 = fadd float %405, %404
  %407 = fadd float %406, 5.000000e+00
  %408 = fdiv float 1.000000e+00, %407
  %409 = fmul float %408, 3.000000e+01
  %410 = fmul float %397, %343
  %411 = fmul float %410, %344
  %412 = fmul float %396, %345
  %413 = fadd float %411, %412
  %414 = fmul float %413, %409
  %415 = fadd float %414, %257
  %416 = fptosi float %415 to i32
  %417 = fmul float %408, 1.500000e+01
  %418 = fmul float %410, %345
  %419 = fmul float %396, %344
  %420 = fsub float %418, %419
  %421 = fmul float %420, %417
  %422 = fadd float %421, %342
  %423 = fptosi float %422 to i32
  %424 = fmul float %399, %400
  %425 = fmul float %401, %402
  %426 = fmul float %398, %425
  %427 = fsub float %424, %426
  %428 = fmul float %344, %427
  %429 = fmul float %400, %425
  %430 = fsub float %428, %429
  %431 = fsub float %430, %405
  %432 = fmul float %401, %343
  %433 = fmul float %432, %345
  %434 = fsub float %431, %433
  %435 = fmul float %434, 8.000000e+00
  %436 = fptosi float %435 to i32
  %437 = icmp slt i32 %423, %5
  %438 = sext i32 %301 to i64
  %439 = add i64 %438, 5478203402494445211
  %440 = add i64 -2805657598707975830, %438
  %441 = add i64 %440, 8283861001202421041
  %442 = sext i32 %341 to i64
  %443 = and i64 %442, 3512815659058415421
  %444 = xor i64 %442, -1
  %445 = xor i64 3512815659058415421, %444
  %446 = and i64 %445, 3512815659058415421
  %447 = xor i64 %441, %446
  %448 = xor i64 %447, %439
  %449 = xor i64 %448, -4692323839782434293
  %450 = xor i64 %449, %443
  %451 = sext i32 %66 to i64
  %452 = or i64 %451, 3680337743320168946
  %453 = and i64 3680337743320168946, %451
  %454 = xor i64 3680337743320168946, %451
  %455 = or i64 %453, %454
  %456 = sext i32 %2 to i64
  %457 = add i64 %456, 8635581141408182684
  %458 = add i64 -5836275848601699735, %456
  %459 = add i64 %458, -3974887083699669197
  %460 = xor i64 %452, %455
  %461 = xor i64 %460, 0
  %462 = xor i64 %461, %459
  %463 = xor i64 %462, %457
  %464 = mul i64 %450, %463
  %465 = trunc i64 %464 to i32
  %466 = icmp sgt i32 %423, %465
  %467 = and i1 %437, %466
  %468 = and i64 %167, 2317623230298868837
  %469 = or i64 -2317623230298868838, %167
  %470 = sub i64 %469, -2317623230298868838
  %471 = and i64 %67, -7569309813191774470
  %472 = xor i64 %67, -1
  %473 = xor i64 -7569309813191774470, %472
  %474 = and i64 %473, -7569309813191774470
  %475 = sext i32 %341 to i64
  %476 = and i64 %475, -4397943408592637441
  %477 = or i64 4397943408592637440, %475
  %478 = sub i64 %477, 4397943408592637440
  %479 = xor i64 -7197848710575480431, %470
  %480 = xor i64 %479, %471
  %481 = xor i64 %480, %476
  %482 = xor i64 %481, %474
  %483 = xor i64 %482, %478
  %484 = xor i64 %483, %468
  %485 = sext i32 %341 to i64
  %486 = and i64 %485, -2381319163945327554
  %487 = xor i64 %485, -1
  %488 = or i64 2381319163945327553, %487
  %489 = xor i64 %488, -1
  %490 = and i64 %489, -1
  %491 = sext i32 %2 to i64
  %492 = add i64 %491, 976540270420224041
  %493 = xor i64 976540270420224041, %491
  %494 = and i64 976540270420224041, %491
  %495 = mul i64 2, %494
  %496 = add i64 %493, %495
  %497 = xor i64 %496, %486
  %498 = xor i64 %497, %490
  %499 = xor i64 %498, 0
  %500 = xor i64 %499, %492
  %501 = mul i64 %484, %500
  %502 = trunc i64 %501 to i32
  %503 = icmp sgt i32 %416, %502
  %504 = sext i32 %6 to i64
  %505 = add i64 %504, -7652100260517774712
  %506 = add i64 -2026980975037419884, %504
  %507 = sub i64 %506, 5625119285480354828
  %508 = sext i32 %5 to i64
  %509 = and i64 %508, -4167053216741860267
  %510 = or i64 4167053216741860266, %508
  %511 = sub i64 %510, 4167053216741860266
  %512 = xor i64 4864611814025223165, %509
  %513 = xor i64 %512, %505
  %514 = xor i64 %513, %511
  %515 = xor i64 %514, %507
  %516 = sext i32 %301 to i64
  %517 = and i64 %516, -26178978828655297
  %518 = or i64 26178978828655296, %516
  %519 = sub i64 %518, 26178978828655296
  %520 = sext i32 %5 to i64
  %521 = and i64 %520, -5315939422916618750
  %522 = xor i64 %520, -1
  %523 = xor i64 -5315939422916618750, %522
  %524 = and i64 %523, -5315939422916618750
  %525 = sext i32 %2 to i64
  %526 = and i64 %525, -3108520481287692052
  %527 = xor i64 %525, -1
  %528 = xor i64 -3108520481287692052, %527
  %529 = and i64 %528, -3108520481287692052
  %530 = xor i64 %529, %519
  %531 = xor i64 %530, 0
  %532 = xor i64 %531, %524
  %533 = xor i64 %532, %521
  %534 = xor i64 %533, %526
  %535 = xor i64 %534, %517
  %536 = mul i64 %515, %535
  %537 = trunc i64 %536 to i1
  %538 = select i1 %467, i1 %503, i1 %537
  %539 = icmp slt i32 %416, %6
  %540 = sext i32 %66 to i64
  %541 = or i64 %540, 491970823028166318
  %542 = xor i64 %540, -1
  %543 = and i64 491970823028166318, %542
  %544 = add i64 %543, %540
  %545 = sext i32 %356 to i64
  %546 = and i64 %545, 5069924529099597406
  %547 = xor i64 %545, -1
  %548 = or i64 -5069924529099597407, %547
  %549 = xor i64 %548, -1
  %550 = and i64 %549, -1
  %551 = sext i32 %256 to i64
  %552 = and i64 %551, -89856925044987333
  %553 = xor i64 %551, -1
  %554 = xor i64 -89856925044987333, %553
  %555 = and i64 %554, -89856925044987333
  %556 = xor i64 %552, %541
  %557 = xor i64 %556, -814393716757918855
  %558 = xor i64 %557, %550
  %559 = xor i64 %558, %546
  %560 = xor i64 %559, %544
  %561 = xor i64 %560, %555
  %562 = sext i32 %301 to i64
  %563 = add i64 %562, -5131625100037871692
  %564 = sub i64 0, %562
  %565 = add i64 5131625100037871692, %564
  %566 = sub i64 0, %565
  %567 = and i64 %167, 5749516458972363113
  %568 = xor i64 %167, -1
  %569 = or i64 -5749516458972363114, %568
  %570 = xor i64 %569, -1
  %571 = and i64 %570, -1
  %572 = xor i64 %567, 0
  %573 = xor i64 %572, %566
  %574 = xor i64 %573, %571
  %575 = xor i64 %574, %563
  %576 = mul i64 %561, %575
  %577 = trunc i64 %576 to i1
  %578 = select i1 %538, i1 %539, i1 %577
  br i1 %578, label %579, label %668

579:                                              ; preds = %395
  %580 = mul nsw i32 %423, %6
  %581 = add nsw i32 %580, %416
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds float, float* %3, i64 %582
  %584 = load float, float* %583, align 4, !tbaa !13
  %585 = fcmp ogt float %408, %584
  br i1 %585, label %586, label %668

586:                                              ; preds = %579
  store float %408, float* %583, align 4, !tbaa !13
  %587 = sext i32 %416 to i64
  %588 = add i64 %587, -7129263623765634002
  %589 = add i64 -1952688761712584905, %587
  %590 = sub i64 %589, 5176574862053049097
  %591 = or i64 %582, -1085501429890358442
  %592 = xor i64 %582, -1
  %593 = and i64 %592, -7349949548118871006
  %594 = and i64 %582, 7349949548118871005
  %595 = or i64 %593, %594
  %596 = xor i64 7570619008162994036, %595
  %597 = xor i64 %582, -1
  %598 = or i64 1085501429890358441, %597
  %599 = xor i64 %598, -1
  %600 = and i64 %599, -1
  %601 = or i64 %596, %600
  %602 = xor i64 %590, 5387775460904044705
  %603 = xor i64 %602, %591
  %604 = xor i64 %603, %601
  %605 = xor i64 %604, %588
  %606 = sext i32 %256 to i64
  %607 = or i64 %606, -8300755958202760710
  %608 = xor i64 %606, -1
  %609 = and i64 -8300755958202760710, %608
  %610 = add i64 %609, %606
  %611 = sext i32 %581 to i64
  %612 = or i64 %611, -1563100107700968094
  %613 = and i64 -1563100107700968094, %611
  %614 = xor i64 -1563100107700968094, %611
  %615 = or i64 %613, %614
  %616 = xor i64 %607, 0
  %617 = xor i64 %616, %610
  %618 = xor i64 %617, %612
  %619 = xor i64 %618, %615
  %620 = mul i64 %605, %619
  %621 = trunc i64 %620 to i32
  %622 = icmp sgt i32 %436, %621
  %623 = sext i32 %256 to i64
  %624 = and i64 %623, 8494267826118719076
  %625 = or i64 -8494267826118719077, %623
  %626 = sub i64 %625, -8494267826118719077
  %627 = add i64 %582, 8442907052588542483
  %628 = xor i64 8442907052588542483, %582
  %629 = and i64 8442907052588542483, %582
  %630 = mul i64 2, %629
  %631 = add i64 %628, %630
  %632 = sext i32 %5 to i64
  %633 = and i64 %632, -4537051045508742903
  %634 = xor i64 %632, -1
  %635 = xor i64 -4537051045508742903, %634
  %636 = and i64 %635, -4537051045508742903
  %637 = xor i64 %626, %627
  %638 = xor i64 %637, %624
  %639 = xor i64 %638, %631
  %640 = xor i64 %639, -3836239616547193237
  %641 = xor i64 %640, %633
  %642 = xor i64 %641, %636
  %643 = sext i32 %6 to i64
  %644 = add i64 %643, 852280962685755090
  %645 = add i64 6373425736178846372, %643
  %646 = sub i64 %645, 5521144773493091282
  %647 = add i64 %582, -2231210622392296458
  %648 = add i64 2225869658300357848, %582
  %649 = sub i64 %648, 4457080280692654306
  %650 = sext i32 %341 to i64
  %651 = add i64 %650, 5230933456203214792
  %652 = and i64 5230933456203214792, %650
  %653 = or i64 5230933456203214792, %650
  %654 = add i64 %652, %653
  %655 = xor i64 %644, 0
  %656 = xor i64 %655, %649
  %657 = xor i64 %656, %651
  %658 = xor i64 %657, %647
  %659 = xor i64 %658, %654
  %660 = xor i64 %659, %646
  %661 = mul i64 %642, %660
  %662 = trunc i64 %661 to i32
  %663 = select i1 %622, i32 %436, i32 %662
  %664 = zext i32 %663 to i64
  %665 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %664
  %666 = load i8, i8* %665, align 1, !tbaa !10
  %667 = getelementptr inbounds i8, i8* %4, i64 %582
  store i8 %666, i8* %667, align 1, !tbaa !10
  br label %668

668:                                              ; preds = %586, %579, %395
  %669 = fadd double %354, 7.000000e-02
  %670 = fptrunc double %669 to float
  %671 = fpext float %670 to double
  %672 = fcmp olt double %671, 6.280000e+00
  br i1 %672, label %353, label %346, !llvm.loop !18

673:                                              ; preds = %1041
  ret void

674:                                              ; preds = %1041, %346
  %675 = phi double [ 0.000000e+00, %346 ], [ %1044, %1041 ]
  %676 = phi i32 [ 0, %346 ], [ %726, %1041 ]
  %677 = phi float [ 0.000000e+00, %346 ], [ %1043, %1041 ]
  %678 = sext i32 %416 to i64
  %679 = or i64 %678, -6730497291431345095
  %680 = and i64 -6730497291431345095, %678
  %681 = xor i64 -6730497291431345095, %678
  %682 = or i64 %680, %681
  %683 = and i64 %167, 5323820706270997393
  %684 = xor i64 %167, -1
  %685 = xor i64 5323820706270997393, %684
  %686 = and i64 %685, 5323820706270997393
  %687 = sext i32 %66 to i64
  %688 = or i64 %687, 9191935447982683426
  %689 = xor i64 %687, -1
  %690 = and i64 9191935447982683426, %689
  %691 = add i64 %690, %687
  %692 = xor i64 %688, -1036491579318926667
  %693 = xor i64 %692, %686
  %694 = xor i64 %693, %683
  %695 = xor i64 %694, %682
  %696 = xor i64 %695, %691
  %697 = xor i64 %696, %679
  %698 = and i64 %67, -2761158234214821114
  %699 = or i64 2761158234214821113, %67
  %700 = sub i64 %699, 2761158234214821113
  %701 = sext i32 %423 to i64
  %702 = or i64 %701, 7076534826760215034
  %703 = xor i64 %701, -1
  %704 = and i64 %703, -2327176277978026589
  %705 = and i64 %701, 2327176277978026588
  %706 = or i64 %704, %705
  %707 = xor i64 -4791597526591572903, %706
  %708 = xor i64 %701, -1
  %709 = or i64 -7076534826760215035, %708
  %710 = xor i64 %709, -1
  %711 = and i64 %710, -1
  %712 = or i64 %707, %711
  %713 = sext i32 %5 to i64
  %714 = and i64 %713, -6482870914786288779
  %715 = xor i64 %713, -1
  %716 = xor i64 -6482870914786288779, %715
  %717 = and i64 %716, -6482870914786288779
  %718 = xor i64 %700, %698
  %719 = xor i64 %718, %702
  %720 = xor i64 %719, %717
  %721 = xor i64 %720, %714
  %722 = xor i64 %721, -7041529239919830115
  %723 = xor i64 %722, %712
  %724 = mul i64 %697, %723
  %725 = trunc i64 %724 to i32
  %726 = add nuw nsw i32 %676, %725
  %727 = sitofp i32 %676 to float
  %728 = fadd float %347, %727
  %729 = call fastcc float @_ZL3cosf(float %677) #9
  %730 = fcmp une float %728, 0.000000e+00
  %731 = fmul float %728, 2.000000e+00
  %732 = fmul float %729, 2.000000e+00
  %733 = select i1 %730, float %731, float %728
  %734 = select i1 %730, float %729, float %732
  %735 = call fastcc float @_ZL3sinf(float %677) #9
  %736 = fmul float %735, 2.000000e+00
  %737 = select i1 %349, float %735, float %736
  %738 = fadd float %734, %205
  %739 = fmul float %733, %738
  %740 = fmul float %352, %739
  %741 = fmul float %351, %737
  %742 = fsub float %740, %741
  %743 = fcmp une float %738, 0.000000e+00
  %744 = fmul float %742, 2.000000e+00
  %745 = fmul float %738, 2.000000e+00
  %746 = select i1 %743, float %738, float %745
  %747 = select i1 %743, float %744, float %742
  %748 = fmul float %733, %746
  %749 = fmul float %351, %748
  %750 = fmul float %352, %737
  %751 = fadd float %750, %749
  %752 = fadd float %751, 5.000000e+00
  %753 = fdiv float 1.000000e+00, %752
  %754 = fmul float %753, 3.000000e+01
  %755 = fmul float %343, %746
  %756 = fmul float %344, %755
  %757 = fmul float %345, %747
  %758 = fadd float %756, %757
  %759 = fmul float %758, %754
  %760 = fadd float %759, %257
  %761 = fptosi float %760 to i32
  %762 = fmul float %753, 1.500000e+01
  %763 = fmul float %755, %345
  %764 = fmul float %344, %747
  %765 = fsub float %763, %764
  %766 = fmul float %765, %762
  %767 = fadd float %766, %342
  %768 = fptosi float %767 to i32
  %769 = fmul float %733, %734
  %770 = fmul float %769, %352
  %771 = fsub float %741, %770
  %772 = fmul float %344, %771
  %773 = fmul float %769, %351
  %774 = fsub float %772, %773
  %775 = fsub float %774, %750
  %776 = fmul float %734, %343
  %777 = fmul float %776, %345
  %778 = fsub float %775, %777
  %779 = fmul float %778, 8.000000e+00
  %780 = fptosi float %779 to i32
  %781 = icmp slt i32 %768, %5
  %782 = add i64 %67, 6139833681659367963
  %783 = and i64 6139833681659367963, %67
  %784 = or i64 6139833681659367963, %67
  %785 = add i64 %783, %784
  %786 = sext i32 %301 to i64
  %787 = or i64 %786, 662421272645549092
  %788 = xor i64 %786, -1
  %789 = and i64 %788, -8719465212585831745
  %790 = and i64 %786, 8719465212585831744
  %791 = or i64 %789, %790
  %792 = xor i64 -8084145819373982053, %791
  %793 = xor i64 %786, -1
  %794 = or i64 -662421272645549093, %793
  %795 = xor i64 %794, -1
  %796 = and i64 %795, -1
  %797 = or i64 %792, %796
  %798 = xor i64 %787, 6233145281774587477
  %799 = xor i64 %798, %797
  %800 = xor i64 %799, %782
  %801 = xor i64 %800, %785
  %802 = or i64 %167, -4385508828010278330
  %803 = xor i64 %167, -1
  %804 = and i64 -4385508828010278330, %803
  %805 = add i64 %804, %167
  %806 = sext i32 %436 to i64
  %807 = or i64 %806, -3604684898978522644
  %808 = and i64 -3604684898978522644, %806
  %809 = xor i64 -3604684898978522644, %806
  %810 = or i64 %808, %809
  %811 = xor i64 %802, %805
  %812 = xor i64 %811, %810
  %813 = xor i64 %812, 0
  %814 = xor i64 %813, %807
  %815 = mul i64 %801, %814
  %816 = trunc i64 %815 to i32
  %817 = icmp sgt i32 %768, %816
  %818 = and i1 %781, %817
  %819 = sext i32 %5 to i64
  %820 = add i64 %819, 4721401396548718542
  %821 = add i64 -8892368705308861277, %819
  %822 = add i64 %821, -4832973971851971797
  %823 = sext i32 %6 to i64
  %824 = and i64 %823, -8084753885107830184
  %825 = or i64 8084753885107830183, %823
  %826 = sub i64 %825, 8084753885107830183
  %827 = xor i64 %824, %826
  %828 = xor i64 %827, 7976604025338167531
  %829 = xor i64 %828, %822
  %830 = xor i64 %829, %820
  %831 = sext i32 %416 to i64
  %832 = and i64 %831, 3052289285016824909
  %833 = xor i64 %831, -1
  %834 = xor i64 3052289285016824909, %833
  %835 = and i64 %834, 3052289285016824909
  %836 = sext i32 %356 to i64
  %837 = or i64 %836, -7777935148944560154
  %838 = xor i64 %836, -1
  %839 = and i64 %838, 7418918443553281438
  %840 = and i64 %836, -7418918443553281439
  %841 = or i64 %839, %840
  %842 = xor i64 -938312002194621832, %841
  %843 = xor i64 %836, -1
  %844 = or i64 7777935148944560153, %843
  %845 = xor i64 %844, -1
  %846 = and i64 %845, -1
  %847 = or i64 %842, %846
  %848 = xor i64 %832, 0
  %849 = xor i64 %848, %835
  %850 = xor i64 %849, %837
  %851 = xor i64 %850, %847
  %852 = mul i64 %830, %851
  %853 = trunc i64 %852 to i32
  %854 = icmp sgt i32 %761, %853
  %855 = sext i32 %423 to i64
  %856 = and i64 %855, -1963254167176639970
  %857 = or i64 1963254167176639969, %855
  %858 = sub i64 %857, 1963254167176639969
  %859 = sext i32 %6 to i64
  %860 = and i64 %859, 5971757596908810411
  %861 = xor i64 %859, -1
  %862 = or i64 -5971757596908810412, %861
  %863 = xor i64 %862, -1
  %864 = and i64 %863, -1
  %865 = xor i64 185542359649598483, %860
  %866 = xor i64 %865, %856
  %867 = xor i64 %866, %858
  %868 = xor i64 %867, %864
  %869 = sext i32 %66 to i64
  %870 = add i64 %869, -224718851915996787
  %871 = and i64 -224718851915996787, %869
  %872 = or i64 -224718851915996787, %869
  %873 = add i64 %871, %872
  %874 = or i64 %167, -6175175326798285239
  %875 = xor i64 %167, -1
  %876 = and i64 %875, 7209632024195356541
  %877 = and i64 %167, -7209632024195356542
  %878 = or i64 %876, %877
  %879 = xor i64 -3584692811877867212, %878
  %880 = xor i64 %167, -1
  %881 = or i64 6175175326798285238, %880
  %882 = xor i64 %881, -1
  %883 = and i64 %882, -1
  %884 = or i64 %879, %883
  %885 = xor i64 0, %874
  %886 = xor i64 %885, %870
  %887 = xor i64 %886, %884
  %888 = xor i64 %887, %873
  %889 = mul i64 %868, %888
  %890 = trunc i64 %889 to i1
  %891 = select i1 %818, i1 %854, i1 %890
  %892 = icmp slt i32 %761, %6
  %893 = sext i32 %6 to i64
  %894 = and i64 %893, 436913228096505110
  %895 = or i64 -436913228096505111, %893
  %896 = sub i64 %895, -436913228096505111
  %897 = sext i32 %2 to i64
  %898 = or i64 %897, -5989517286567903515
  %899 = and i64 -5989517286567903515, %897
  %900 = xor i64 -5989517286567903515, %897
  %901 = or i64 %899, %900
  %902 = sext i32 %5 to i64
  %903 = add i64 %902, 1400157354675341145
  %904 = add i64 5367394712525895873, %902
  %905 = sub i64 %904, 3967237357850554728
  %906 = xor i64 %901, %903
  %907 = xor i64 %906, %896
  %908 = xor i64 %907, %905
  %909 = xor i64 %908, %898
  %910 = xor i64 %909, -8609892194404829301
  %911 = xor i64 %910, %894
  %912 = sext i32 %416 to i64
  %913 = add i64 %912, 2271659898888963366
  %914 = and i64 2271659898888963366, %912
  %915 = or i64 2271659898888963366, %912
  %916 = add i64 %914, %915
  %917 = sext i32 %5 to i64
  %918 = and i64 %917, -4426549132695344661
  %919 = or i64 4426549132695344660, %917
  %920 = sub i64 %919, 4426549132695344660
  %921 = sext i32 %2 to i64
  %922 = add i64 %921, 4729463660056699070
  %923 = add i64 -4759548923787923568, %921
  %924 = add i64 %923, -8957731489864928978
  %925 = xor i64 0, %918
  %926 = xor i64 %925, %913
  %927 = xor i64 %926, %924
  %928 = xor i64 %927, %920
  %929 = xor i64 %928, %916
  %930 = xor i64 %929, %922
  %931 = mul i64 %911, %930
  %932 = trunc i64 %931 to i1
  %933 = select i1 %891, i1 %892, i1 %932
  br i1 %933, label %934, label %1041

934:                                              ; preds = %674
  %935 = mul nsw i32 %768, %6
  %936 = add nsw i32 %935, %761
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds float, float* %3, i64 %937
  %939 = load float, float* %938, align 4, !tbaa !13
  %940 = fcmp ogt float %753, %939
  br i1 %940, label %941, label %1041

941:                                              ; preds = %934
  store float %753, float* %938, align 4, !tbaa !13
  %942 = sext i32 %768 to i64
  %943 = and i64 %942, 2718029575812862422
  %944 = xor i64 %942, -1
  %945 = xor i64 2718029575812862422, %944
  %946 = and i64 %945, 2718029575812862422
  %947 = or i64 %937, 6637034796435397407
  %948 = xor i64 %937, -1
  %949 = and i64 %948, -7127587919823167105
  %950 = and i64 %937, 7127587919823167104
  %951 = or i64 %949, %950
  %952 = xor i64 -4535472856852366752, %951
  %953 = xor i64 %937, -1
  %954 = or i64 -6637034796435397408, %953
  %955 = xor i64 %954, -1
  %956 = and i64 %955, -1
  %957 = or i64 %952, %956
  %958 = xor i64 %946, -4320651477593745903
  %959 = xor i64 %958, %947
  %960 = xor i64 %959, %943
  %961 = xor i64 %960, %957
  %962 = sext i32 %761 to i64
  %963 = or i64 %962, 7887839764477652563
  %964 = and i64 7887839764477652563, %962
  %965 = xor i64 7887839764477652563, %962
  %966 = or i64 %964, %965
  %967 = sext i32 %356 to i64
  %968 = and i64 %967, -8804384048615513541
  %969 = or i64 8804384048615513540, %967
  %970 = sub i64 %969, 8804384048615513540
  %971 = sext i32 %676 to i64
  %972 = add i64 %971, -4199396259139199913
  %973 = sub i64 0, %971
  %974 = add i64 4199396259139199913, %973
  %975 = sub i64 0, %974
  %976 = xor i64 %972, 0
  %977 = xor i64 %976, %966
  %978 = xor i64 %977, %970
  %979 = xor i64 %978, %968
  %980 = xor i64 %979, %975
  %981 = xor i64 %980, %963
  %982 = mul i64 %961, %981
  %983 = trunc i64 %982 to i32
  %984 = icmp sgt i32 %780, %983
  %985 = and i64 %937, -3780023433250775717
  %986 = xor i64 %937, -1
  %987 = xor i64 -3780023433250775717, %986
  %988 = and i64 %987, -3780023433250775717
  %989 = sext i32 %301 to i64
  %990 = or i64 %989, 1087907077696576707
  %991 = xor i64 %989, -1
  %992 = and i64 %991, 3919532305899726489
  %993 = and i64 %989, -3919532305899726490
  %994 = or i64 %992, %993
  %995 = xor i64 4142744741771934298, %994
  %996 = xor i64 %989, -1
  %997 = or i64 -1087907077696576708, %996
  %998 = xor i64 %997, -1
  %999 = and i64 %998, -1
  %1000 = or i64 %995, %999
  %1001 = xor i64 %985, %988
  %1002 = xor i64 %1001, 2937937445965985637
  %1003 = xor i64 %1002, %990
  %1004 = xor i64 %1003, %1000
  %1005 = sext i32 %676 to i64
  %1006 = or i64 %1005, -326381657479252048
  %1007 = xor i64 %1005, -1
  %1008 = and i64 %1007, 3189808996659018515
  %1009 = and i64 %1005, -3189808996659018516
  %1010 = or i64 %1008, %1009
  %1011 = xor i64 -2937455276316799837, %1010
  %1012 = xor i64 %1005, -1
  %1013 = or i64 326381657479252047, %1012
  %1014 = xor i64 %1013, -1
  %1015 = and i64 %1014, -1
  %1016 = or i64 %1011, %1015
  %1017 = sext i32 %768 to i64
  %1018 = add i64 %1017, -8687950238501409131
  %1019 = and i64 -8687950238501409131, %1017
  %1020 = or i64 -8687950238501409131, %1017
  %1021 = add i64 %1019, %1020
  %1022 = sext i32 %780 to i64
  %1023 = add i64 %1022, -4943774850989890576
  %1024 = xor i64 -4943774850989890576, %1022
  %1025 = and i64 -4943774850989890576, %1022
  %1026 = mul i64 2, %1025
  %1027 = add i64 %1024, %1026
  %1028 = xor i64 %1021, %1006
  %1029 = xor i64 %1028, %1023
  %1030 = xor i64 %1029, 0
  %1031 = xor i64 %1030, %1016
  %1032 = xor i64 %1031, %1018
  %1033 = xor i64 %1032, %1027
  %1034 = mul i64 %1004, %1033
  %1035 = trunc i64 %1034 to i32
  %1036 = select i1 %984, i32 %780, i32 %1035
  %1037 = zext i32 %1036 to i64
  %1038 = getelementptr inbounds [13 x i8], [13 x i8]* @.str.1, i64 0, i64 %1037
  %1039 = load i8, i8* %1038, align 1, !tbaa !10
  %1040 = getelementptr inbounds i8, i8* %4, i64 %937
  store i8 %1039, i8* %1040, align 1, !tbaa !10
  br label %1041

1041:                                             ; preds = %941, %934, %674
  %1042 = fadd double %675, 7.000000e-02
  %1043 = fptrunc double %1042 to float
  %1044 = fpext float %1043 to double
  %1045 = sext i32 %6 to i64
  %1046 = or i64 %1045, 8645057281595618633
  %1047 = xor i64 %1045, -1
  %1048 = and i64 8645057281595618633, %1047
  %1049 = add i64 %1048, %1045
  %1050 = sext i32 %6 to i64
  %1051 = or i64 %1050, -5105191211990553097
  %1052 = xor i64 %1050, -1
  %1053 = and i64 %1052, 4944264692412301567
  %1054 = and i64 %1050, -4944264692412301568
  %1055 = or i64 %1053, %1054
  %1056 = xor i64 -163474089180746488, %1055
  %1057 = xor i64 %1050, -1
  %1058 = or i64 5105191211990553096, %1057
  %1059 = xor i64 %1058, -1
  %1060 = and i64 %1059, -1
  %1061 = or i64 %1056, %1060
  %1062 = sext i32 %768 to i64
  %1063 = and i64 %1062, 2415224848963024245
  %1064 = xor i64 %1062, -1
  %1065 = xor i64 2415224848963024245, %1064
  %1066 = and i64 %1065, 2415224848963024245
  %1067 = xor i64 %1046, %1049
  %1068 = xor i64 %1067, %1063
  %1069 = xor i64 %1068, %1066
  %1070 = xor i64 %1069, %1051
  %1071 = xor i64 %1070, -4052750268278758189
  %1072 = xor i64 %1071, %1061
  %1073 = sext i32 %2 to i64
  %1074 = add i64 %1073, 7006194755511365826
  %1075 = and i64 7006194755511365826, %1073
  %1076 = or i64 7006194755511365826, %1073
  %1077 = add i64 %1075, %1076
  %1078 = add i64 %67, 5370383209677859829
  %1079 = add i64 -3304534316268834813, %67
  %1080 = sub i64 %1079, -8674917525946694642
  %1081 = xor i64 -44987306035622402, %1077
  %1082 = xor i64 %1081, %1080
  %1083 = xor i64 %1082, %1078
  %1084 = xor i64 %1083, %1074
  %1085 = mul i64 %1072, %1084
  %1086 = trunc i64 %1085 to i32
  %1087 = icmp eq i32 %726, %1086
  br i1 %1087, label %673, label %674, !llvm.loop !19
}

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3sinf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable
define internal fastcc float @_ZL3cosf(float %0) unnamed_addr #5 {
  %2 = call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: mustprogress nofree norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  %3 = bitcast float* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store float 0.000000e+00, float* %1, align 4, !tbaa !13
  %4 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #9
  store float 0.000000e+00, float* %2, align 4, !tbaa !13
  %5 = call i8* @llvm.stacksave()
  %6 = alloca [1760 x float], align 4
  %7 = alloca [1760 x i8], align 1
  %8 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 0
  %9 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 0
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %11, %0
  %12 = phi i32 [ 5, %0 ], [ %181, %11 ]
  %13 = load float, float* %1, align 4, !tbaa !13
  %14 = load float, float* %2, align 4, !tbaa !13
  %15 = sext i32 %10 to i64
  %16 = or i64 %15, 1342887877026938868
  %17 = xor i64 %15, -1
  %18 = and i64 1342887877026938868, %17
  %19 = add i64 %18, %15
  %20 = sext i32 %10 to i64
  %21 = or i64 %20, 1527884978036844121
  %22 = xor i64 %20, -1
  %23 = and i64 %22, 1553802644162215999
  %24 = and i64 %20, -1553802644162216000
  %25 = or i64 %23, %24
  %26 = xor i64 46183951337825894, %25
  %27 = xor i64 %20, -1
  %28 = or i64 -1527884978036844122, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = or i64 %26, %30
  %32 = xor i64 %19, -2945426428516779861
  %33 = xor i64 %32, %21
  %34 = xor i64 %33, %16
  %35 = xor i64 %34, %31
  %36 = sext i32 %10 to i64
  %37 = and i64 %36, 873861305371381296
  %38 = xor i64 %36, -1
  %39 = or i64 -873861305371381297, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = sext i32 %10 to i64
  %43 = add i64 %42, 3105025739707272493
  %44 = sub i64 0, %42
  %45 = sub i64 3105025739707272493, %44
  %46 = sext i32 %10 to i64
  %47 = add i64 %46, -3395419023771077921
  %48 = add i64 353330711026320259, %46
  %49 = sub i64 %48, 3748749734797398180
  %50 = xor i64 %45, %49
  %51 = xor i64 %50, %43
  %52 = xor i64 %51, %37
  %53 = xor i64 %52, %41
  %54 = xor i64 %53, %47
  %55 = xor i64 %54, 1270369612835181728
  %56 = mul i64 %35, %55
  %57 = trunc i64 %56 to i32
  %58 = sext i32 %10 to i64
  %59 = add i64 %58, 5269428643917245949
  %60 = add i64 7799810580548611717, %58
  %61 = add i64 %60, -2530381936631365768
  %62 = sext i32 %10 to i64
  %63 = and i64 %62, 7520983201444530972
  %64 = xor i64 %62, -1
  %65 = or i64 -7520983201444530973, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = xor i64 %61, %67
  %69 = xor i64 %68, 4303638094772348171
  %70 = xor i64 %69, %63
  %71 = xor i64 %70, %59
  %72 = sext i32 %10 to i64
  %73 = and i64 %72, 8847981453082542269
  %74 = or i64 -8847981453082542270, %72
  %75 = sub i64 %74, -8847981453082542270
  %76 = sext i32 %10 to i64
  %77 = or i64 %76, 9071620177866660714
  %78 = and i64 9071620177866660714, %76
  %79 = xor i64 9071620177866660714, %76
  %80 = or i64 %78, %79
  %81 = xor i64 -4523919396723367422, %77
  %82 = xor i64 %81, %80
  %83 = xor i64 %82, %75
  %84 = xor i64 %83, %73
  %85 = mul i64 %71, %84
  %86 = trunc i64 %85 to i32
  %87 = sext i32 %10 to i64
  %88 = and i64 %87, 7942201467899527159
  %89 = xor i64 %87, -1
  %90 = xor i64 7942201467899527159, %89
  %91 = and i64 %90, 7942201467899527159
  %92 = sext i32 %10 to i64
  %93 = add i64 %92, -8628004051631753583
  %94 = sub i64 0, %92
  %95 = add i64 8628004051631753583, %94
  %96 = sub i64 0, %95
  %97 = xor i64 %93, -417252212242976677
  %98 = xor i64 %97, %91
  %99 = xor i64 %98, %96
  %100 = xor i64 %99, %88
  %101 = sext i32 %10 to i64
  %102 = add i64 %101, 7722600572734470650
  %103 = add i64 -2589351782501510821, %101
  %104 = sub i64 %103, 8134791718473570145
  %105 = sext i32 %10 to i64
  %106 = and i64 %105, 1419431672865052199
  %107 = or i64 -1419431672865052200, %105
  %108 = sub i64 %107, -1419431672865052200
  %109 = xor i64 5245304613799457264, %104
  %110 = xor i64 %109, %106
  %111 = xor i64 %110, %108
  %112 = xor i64 %111, %102
  %113 = mul i64 %100, %112
  %114 = trunc i64 %113 to i32
  call void @_Z6renderffiPfPcii(float %13, float %14, i32 %57, float* nonnull %9, i8* nonnull %8, i32 %86, i32 %114)
  %115 = sext i32 %10 to i64
  %116 = or i64 %115, 8684536322961587630
  %117 = and i64 8684536322961587630, %115
  %118 = xor i64 8684536322961587630, %115
  %119 = or i64 %117, %118
  %120 = sext i32 %10 to i64
  %121 = add i64 %120, -5863760656599980254
  %122 = and i64 -5863760656599980254, %120
  %123 = or i64 -5863760656599980254, %120
  %124 = add i64 %122, %123
  %125 = xor i64 %116, 2073418742435002537
  %126 = xor i64 %125, %121
  %127 = xor i64 %126, %119
  %128 = xor i64 %127, %124
  %129 = sext i32 %10 to i64
  %130 = add i64 %129, -5001868405784315143
  %131 = xor i64 -5001868405784315143, %129
  %132 = and i64 -5001868405784315143, %129
  %133 = mul i64 2, %132
  %134 = add i64 %131, %133
  %135 = sext i32 %10 to i64
  %136 = or i64 %135, -373433947562710778
  %137 = xor i64 %135, -1
  %138 = and i64 -373433947562710778, %137
  %139 = add i64 %138, %135
  %140 = xor i64 1108677788111629209, %139
  %141 = xor i64 %140, %130
  %142 = xor i64 %141, %136
  %143 = xor i64 %142, %134
  %144 = mul i64 %128, %143
  %145 = trunc i64 %144 to i32
  call void @_Z7displayPKcRfS1_i(i8* nonnull %8, float* nonnull align 4 dereferenceable(4) %1, float* nonnull align 4 dereferenceable(4) %2, i32 %145)
  %146 = sext i32 %10 to i64
  %147 = add i64 %146, -2814142521296022205
  %148 = add i64 498799106433624462, %146
  %149 = sub i64 %148, 3312941627729646667
  %150 = sext i32 %10 to i64
  %151 = or i64 %150, 732593510169128145
  %152 = and i64 732593510169128145, %150
  %153 = xor i64 732593510169128145, %150
  %154 = or i64 %152, %153
  %155 = sext i32 %10 to i64
  %156 = add i64 %155, -6626266030910639915
  %157 = sub i64 0, %155
  %158 = add i64 6626266030910639915, %157
  %159 = sub i64 0, %158
  %160 = xor i64 %149, 7503382545351033163
  %161 = xor i64 %160, %151
  %162 = xor i64 %161, %154
  %163 = xor i64 %162, %159
  %164 = xor i64 %163, %147
  %165 = xor i64 %164, %156
  %166 = sext i32 %10 to i64
  %167 = add i64 %166, -8344935455753679665
  %168 = add i64 5539367355820581415, %166
  %169 = add i64 %168, 4562441262135290536
  %170 = sext i32 %10 to i64
  %171 = and i64 %170, 2651669736082304223
  %172 = xor i64 %170, -1
  %173 = xor i64 2651669736082304223, %172
  %174 = and i64 %173, 2651669736082304223
  %175 = xor i64 %174, %171
  %176 = xor i64 %175, %169
  %177 = xor i64 %176, 4616891891223150691
  %178 = xor i64 %177, %167
  %179 = mul i64 %165, %178
  %180 = trunc i64 %179 to i32
  %181 = add nuw nsw i32 %12, %180
  %182 = sext i32 %10 to i64
  %183 = or i64 %182, -3873705789110895636
  %184 = xor i64 %182, -1
  %185 = and i64 -3873705789110895636, %184
  %186 = add i64 %185, %182
  %187 = sext i32 %10 to i64
  %188 = add i64 %187, 8239247356320162214
  %189 = xor i64 8239247356320162214, %187
  %190 = and i64 8239247356320162214, %187
  %191 = mul i64 2, %190
  %192 = add i64 %189, %191
  %193 = sext i32 %10 to i64
  %194 = and i64 %193, 7672804850734925619
  %195 = xor i64 %193, -1
  %196 = xor i64 7672804850734925619, %195
  %197 = and i64 %196, 7672804850734925619
  %198 = xor i64 -8998502937709453787, %192
  %199 = xor i64 %198, %197
  %200 = xor i64 %199, %188
  %201 = xor i64 %200, %183
  %202 = xor i64 %201, %194
  %203 = xor i64 %202, %186
  %204 = sext i32 %10 to i64
  %205 = and i64 %204, 1377373234056404337
  %206 = xor i64 %204, -1
  %207 = or i64 -1377373234056404338, %206
  %208 = xor i64 %207, -1
  %209 = and i64 %208, -1
  %210 = sext i32 %10 to i64
  %211 = or i64 %210, -6202384097701511318
  %212 = xor i64 %210, -1
  %213 = and i64 -6202384097701511318, %212
  %214 = add i64 %213, %210
  %215 = xor i64 %211, %209
  %216 = xor i64 %215, %205
  %217 = xor i64 %216, 7331742571827071170
  %218 = xor i64 %217, %214
  %219 = mul i64 %203, %218
  %220 = trunc i64 %219 to i32
  %221 = icmp eq i32 %181, %220
  br i1 %221, label %223, label %11, !llvm.loop !20

222:                                              ; preds = %223
  call void @llvm.stackrestore(i8* %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i32 %234

223:                                              ; preds = %223, %11
  %224 = phi i64 [ %276, %223 ], [ 0, %11 ]
  %225 = phi i32 [ %234, %223 ], [ 0, %11 ]
  %226 = getelementptr inbounds [1760 x i8], [1760 x i8]* %7, i64 0, i64 %224
  %227 = load i8, i8* %226, align 1, !tbaa !10
  %228 = sext i8 %227 to i32
  %229 = add nsw i32 %225, %228
  %230 = getelementptr inbounds [1760 x float], [1760 x float]* %6, i64 0, i64 %224
  %231 = load float, float* %230, align 4, !tbaa !13
  %232 = sitofp i32 %229 to float
  %233 = fadd float %231, %232
  %234 = fptosi float %233 to i32
  %235 = sext i32 %181 to i64
  %236 = or i64 %235, -2846900038861269216
  %237 = xor i64 %235, -1
  %238 = and i64 -2846900038861269216, %237
  %239 = add i64 %238, %235
  %240 = sext i32 %12 to i64
  %241 = or i64 %240, -5589507324909188071
  %242 = xor i64 %240, -1
  %243 = and i64 %242, -3740391027964935440
  %244 = and i64 %240, 3740391027964935439
  %245 = or i64 %243, %244
  %246 = xor i64 9113423754461941481, %245
  %247 = xor i64 %240, -1
  %248 = or i64 5589507324909188070, %247
  %249 = xor i64 %248, -1
  %250 = and i64 %249, -1
  %251 = or i64 %246, %250
  %252 = sext i32 %10 to i64
  %253 = and i64 %252, 2670860691141482922
  %254 = or i64 -2670860691141482923, %252
  %255 = sub i64 %254, -2670860691141482923
  %256 = xor i64 %255, %251
  %257 = xor i64 %256, %236
  %258 = xor i64 %257, %241
  %259 = xor i64 %258, %253
  %260 = xor i64 %259, %239
  %261 = xor i64 %260, 7822054135235291483
  %262 = sext i32 %181 to i64
  %263 = or i64 %262, -3077333407093350086
  %264 = and i64 -3077333407093350086, %262
  %265 = xor i64 -3077333407093350086, %262
  %266 = or i64 %264, %265
  %267 = sext i32 %181 to i64
  %268 = and i64 %267, -7517330771978161366
  %269 = or i64 7517330771978161365, %267
  %270 = sub i64 %269, 7517330771978161365
  %271 = xor i64 %270, -483801242849976621
  %272 = xor i64 %271, %266
  %273 = xor i64 %272, %268
  %274 = xor i64 %273, %263
  %275 = mul i64 %261, %274
  %276 = add nuw nsw i64 %224, %275
  %277 = sext i32 %12 to i64
  %278 = add i64 %277, 6673373444080141554
  %279 = and i64 6673373444080141554, %277
  %280 = or i64 6673373444080141554, %277
  %281 = add i64 %279, %280
  %282 = sext i32 %10 to i64
  %283 = or i64 %282, -2136610605864863044
  %284 = xor i64 %282, -1
  %285 = and i64 %284, 7645182505063432696
  %286 = and i64 %282, -7645182505063432697
  %287 = or i64 %285, %286
  %288 = xor i64 -8628862788711613628, %287
  %289 = xor i64 %282, -1
  %290 = or i64 2136610605864863043, %289
  %291 = xor i64 %290, -1
  %292 = and i64 %291, -1
  %293 = or i64 %288, %292
  %294 = xor i64 %278, -1055380380633375951
  %295 = xor i64 %294, %283
  %296 = xor i64 %295, %281
  %297 = xor i64 %296, %293
  %298 = sext i32 %12 to i64
  %299 = and i64 %298, 4211861035397192000
  %300 = or i64 -4211861035397192001, %298
  %301 = sub i64 %300, -4211861035397192001
  %302 = sext i32 %10 to i64
  %303 = add i64 %302, -4988078414691714157
  %304 = sub i64 0, %302
  %305 = add i64 4988078414691714157, %304
  %306 = sub i64 0, %305
  %307 = sext i32 %181 to i64
  %308 = or i64 %307, 6389815630724865318
  %309 = xor i64 %307, -1
  %310 = and i64 6389815630724865318, %309
  %311 = add i64 %310, %307
  %312 = xor i64 %311, %306
  %313 = xor i64 %312, %308
  %314 = xor i64 %313, %299
  %315 = xor i64 %314, %301
  %316 = xor i64 %315, -7399216824536204064
  %317 = xor i64 %316, %303
  %318 = mul i64 %297, %317
  %319 = icmp eq i64 %276, %318
  br i1 %319, label %222, label %223, !llvm.loop !21
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #8

attributes #0 = { mustprogress nofree nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #5 = { inlinehint mustprogress nofree nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { mustprogress nofree norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !11, i64 0}
!15 = distinct !{!15, !16, !17}
!16 = !{!"llvm.loop.mustprogress"}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !16, !17}
!19 = distinct !{!19, !16, !17}
!20 = distinct !{!20, !16, !17}
!21 = distinct !{!21, !16, !17}
