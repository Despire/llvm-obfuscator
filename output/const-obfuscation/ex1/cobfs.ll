; ModuleID = 'output/const-obfuscation/ex1/ex1.ll'
source_filename = "input/const-obfuscation/ex1/ex1.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @_Z8digitSumi(i32 %0) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = add i64 %2, -2087937388649069476
  %4 = add i64 -851326719785267733, %2
  %5 = add i64 %4, -1236610668863801743
  %6 = sext i32 %0 to i64
  %7 = and i64 %6, -181316309475086720
  %8 = xor i64 %6, -1
  %9 = or i64 181316309475086719, %8
  %10 = xor i64 %9, -1
  %11 = and i64 %10, -1
  %12 = sext i32 %0 to i64
  %13 = or i64 %12, 1397995078947292924
  %14 = xor i64 %12, -1
  %15 = and i64 %14, 5469289159012217423
  %16 = and i64 %12, -5469289159012217424
  %17 = or i64 %15, %16
  %18 = xor i64 6377234087026144435, %17
  %19 = xor i64 %12, -1
  %20 = or i64 -1397995078947292925, %19
  %21 = xor i64 %20, -1
  %22 = and i64 %21, -1
  %23 = or i64 %18, %22
  %24 = xor i64 %23, %3
  %25 = xor i64 %24, %11
  %26 = xor i64 %25, %5
  %27 = xor i64 %26, %7
  %28 = xor i64 %27, %13
  %29 = xor i64 %28, -275427997077651201
  %30 = sext i32 %0 to i64
  %31 = and i64 %30, 3716487906451330101
  %32 = xor i64 %30, -1
  %33 = or i64 -3716487906451330102, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = sext i32 %0 to i64
  %37 = or i64 %36, 3592745272588185850
  %38 = xor i64 %36, -1
  %39 = and i64 %38, 3979330103273131972
  %40 = and i64 %36, -3979330103273131973
  %41 = or i64 %39, %40
  %42 = xor i64 496123213148340030, %41
  %43 = xor i64 %36, -1
  %44 = or i64 -3592745272588185851, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = sext i32 %0 to i64
  %49 = or i64 %48, -357013886292881802
  %50 = xor i64 %48, -1
  %51 = and i64 -357013886292881802, %50
  %52 = add i64 %51, %48
  %53 = xor i64 %31, %47
  %54 = xor i64 %53, %35
  %55 = xor i64 %54, %52
  %56 = xor i64 %55, %49
  %57 = xor i64 %56, %37
  %58 = xor i64 %57, 0
  %59 = mul i64 %29, %58
  %60 = trunc i64 %59 to i32
  %61 = icmp sgt i32 %0, %60
  br i1 %61, label %62, label %205

62:                                               ; preds = %62, %1
  %63 = phi i32 [ %161, %62 ], [ 0, %1 ]
  %64 = phi i32 [ %121, %62 ], [ %0, %1 ]
  %65 = freeze i32 %64
  %66 = sext i32 %0 to i64
  %67 = add i64 %66, -3018617021400831886
  %68 = add i64 6315861412363464403, %66
  %69 = sub i64 %68, -9112265639945255327
  %70 = sext i32 %0 to i64
  %71 = add i64 %70, 9140836845331043952
  %72 = sub i64 0, %70
  %73 = sub i64 9140836845331043952, %72
  %74 = sext i32 %0 to i64
  %75 = or i64 %74, 684777544118762782
  %76 = xor i64 %74, -1
  %77 = and i64 %76, -8982803558241254368
  %78 = and i64 %74, 8982803558241254367
  %79 = or i64 %77, %78
  %80 = xor i64 -8442425976356947650, %79
  %81 = xor i64 %74, -1
  %82 = or i64 -684777544118762783, %81
  %83 = xor i64 %82, -1
  %84 = and i64 %83, -1
  %85 = or i64 %80, %84
  %86 = xor i64 %85, %71
  %87 = xor i64 %86, %69
  %88 = xor i64 %87, 657790340875803477
  %89 = xor i64 %88, %67
  %90 = xor i64 %89, %73
  %91 = xor i64 %90, %75
  %92 = sext i32 %0 to i64
  %93 = or i64 %92, -514349155422506490
  %94 = xor i64 %92, -1
  %95 = and i64 %94, 969966183927983670
  %96 = and i64 %92, -969966183927983671
  %97 = or i64 %95, %96
  %98 = xor i64 -744596756268852176, %97
  %99 = xor i64 %92, -1
  %100 = or i64 514349155422506489, %99
  %101 = xor i64 %100, -1
  %102 = and i64 %101, -1
  %103 = or i64 %98, %102
  %104 = sext i32 %0 to i64
  %105 = add i64 %104, -1994680674923076442
  %106 = add i64 -1457278180432786384, %104
  %107 = sub i64 %106, 537402494490290058
  %108 = sext i32 %0 to i64
  %109 = and i64 %108, -4207041455017904031
  %110 = xor i64 %108, -1
  %111 = xor i64 -4207041455017904031, %110
  %112 = and i64 %111, -4207041455017904031
  %113 = xor i64 %107, -1936181034104593438
  %114 = xor i64 %113, %112
  %115 = xor i64 %114, %109
  %116 = xor i64 %115, %103
  %117 = xor i64 %116, %93
  %118 = xor i64 %117, %105
  %119 = mul i64 %91, %118
  %120 = trunc i64 %119 to i32
  %121 = sdiv i32 %65, %120
  %122 = sext i32 %0 to i64
  %123 = and i64 %122, 680839624646410869
  %124 = xor i64 %122, -1
  %125 = xor i64 680839624646410869, %124
  %126 = and i64 %125, 680839624646410869
  %127 = sext i32 %0 to i64
  %128 = or i64 %127, 5255735163873333884
  %129 = and i64 5255735163873333884, %127
  %130 = xor i64 5255735163873333884, %127
  %131 = or i64 %129, %130
  %132 = xor i64 %126, -8077668495254313833
  %133 = xor i64 %132, %123
  %134 = xor i64 %133, %131
  %135 = xor i64 %134, %128
  %136 = sext i32 %0 to i64
  %137 = and i64 %136, -484685205719603412
  %138 = or i64 484685205719603411, %136
  %139 = sub i64 %138, 484685205719603411
  %140 = sext i32 %0 to i64
  %141 = add i64 %140, 5916250565526757580
  %142 = and i64 5916250565526757580, %140
  %143 = or i64 5916250565526757580, %140
  %144 = add i64 %142, %143
  %145 = sext i32 %0 to i64
  %146 = and i64 %145, -6794113769016740826
  %147 = xor i64 %145, -1
  %148 = or i64 6794113769016740825, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = xor i64 %137, %141
  %152 = xor i64 %151, 5817209757500641158
  %153 = xor i64 %152, %150
  %154 = xor i64 %153, %144
  %155 = xor i64 %154, %146
  %156 = xor i64 %155, %139
  %157 = mul i64 %135, %156
  %158 = trunc i64 %157 to i32
  %159 = mul i32 %121, %158
  %160 = sub i32 %65, %159
  %161 = add nsw i32 %63, %160
  %162 = sext i32 %0 to i64
  %163 = add i64 %162, -4112864458842848981
  %164 = add i64 2280287128474376851, %162
  %165 = add i64 %164, -6393151587317225832
  %166 = sext i32 %0 to i64
  %167 = or i64 %166, -3023413684675052884
  %168 = xor i64 %166, -1
  %169 = and i64 %168, 7812217441592745338
  %170 = and i64 %166, -7812217441592745339
  %171 = or i64 %169, %170
  %172 = xor i64 -5016940601676109866, %171
  %173 = xor i64 %166, -1
  %174 = or i64 3023413684675052883, %173
  %175 = xor i64 %174, -1
  %176 = and i64 %175, -1
  %177 = or i64 %172, %176
  %178 = xor i64 %163, 1125897377687967845
  %179 = xor i64 %178, %167
  %180 = xor i64 %179, %177
  %181 = xor i64 %180, %165
  %182 = sext i32 %0 to i64
  %183 = or i64 %182, -4173612573698329855
  %184 = xor i64 %182, -1
  %185 = and i64 -4173612573698329855, %184
  %186 = add i64 %185, %182
  %187 = sext i32 %0 to i64
  %188 = and i64 %187, -1892511633914363008
  %189 = or i64 1892511633914363007, %187
  %190 = sub i64 %189, 1892511633914363007
  %191 = sext i32 %0 to i64
  %192 = or i64 %191, 5395993651226501239
  %193 = xor i64 %191, -1
  %194 = and i64 5395993651226501239, %193
  %195 = add i64 %194, %191
  %196 = xor i64 6059618484266280149, %192
  %197 = xor i64 %196, %190
  %198 = xor i64 %197, %188
  %199 = xor i64 %198, %195
  %200 = xor i64 %199, %186
  %201 = xor i64 %200, %183
  %202 = mul i64 %181, %201
  %203 = trunc i64 %202 to i32
  %204 = icmp sgt i32 %64, %203
  br i1 %204, label %62, label %205, !llvm.loop !10

205:                                              ; preds = %62, %1
  %206 = phi i32 [ 0, %1 ], [ %161, %62 ]
  ret i32 %206
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = add i64 %3, -4980793607778259370
  %5 = add i64 5334985547017174657, %3
  %6 = sub i64 %5, -8130964918914117589
  %7 = sext i32 %0 to i64
  %8 = and i64 %7, -9175412723407974372
  %9 = xor i64 %7, -1
  %10 = or i64 9175412723407974371, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %11, -1
  %13 = xor i64 %12, %6
  %14 = xor i64 %13, -3382616587028241261
  %15 = xor i64 %14, %8
  %16 = xor i64 %15, %4
  %17 = sext i32 %0 to i64
  %18 = add i64 %17, -2200184789040506600
  %19 = sub i64 0, %17
  %20 = sub i64 -2200184789040506600, %19
  %21 = sext i32 %0 to i64
  %22 = and i64 %21, 5133055973397172890
  %23 = xor i64 %21, -1
  %24 = or i64 -5133055973397172891, %23
  %25 = xor i64 %24, -1
  %26 = and i64 %25, -1
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, 6641159319587316301
  %29 = xor i64 6641159319587316301, %27
  %30 = and i64 6641159319587316301, %27
  %31 = mul i64 2, %30
  %32 = add i64 %29, %31
  %33 = xor i64 %28, 9133199152770400277
  %34 = xor i64 %33, %22
  %35 = xor i64 %34, %18
  %36 = xor i64 %35, %26
  %37 = xor i64 %36, %20
  %38 = xor i64 %37, %32
  %39 = mul i64 %16, %38
  %40 = trunc i64 %39 to i32
  %41 = call i32 @_Z8digitSumi(i32 %40)
  %42 = sext i32 %0 to i64
  %43 = add i64 %42, -1349605006674927517
  %44 = sub i64 0, %42
  %45 = add i64 1349605006674927517, %44
  %46 = sub i64 0, %45
  %47 = sext i32 %0 to i64
  %48 = or i64 %47, 3035149918034403973
  %49 = xor i64 %47, -1
  %50 = and i64 %49, 1727769821333499377
  %51 = and i64 %47, -1727769821333499378
  %52 = or i64 %50, %51
  %53 = xor i64 4460043275621240692, %52
  %54 = xor i64 %47, -1
  %55 = or i64 -3035149918034403974, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = or i64 %53, %57
  %59 = sext i32 %0 to i64
  %60 = or i64 %59, -924915354554478323
  %61 = and i64 -924915354554478323, %59
  %62 = xor i64 -924915354554478323, %59
  %63 = or i64 %61, %62
  %64 = xor i64 %58, 3653300032471701191
  %65 = xor i64 %64, %60
  %66 = xor i64 %65, %63
  %67 = xor i64 %66, %43
  %68 = xor i64 %67, %48
  %69 = xor i64 %68, %46
  %70 = sext i32 %0 to i64
  %71 = or i64 %70, -5504852856034326603
  %72 = xor i64 %70, -1
  %73 = and i64 %72, -6054005181893178214
  %74 = and i64 %70, 6054005181893178213
  %75 = or i64 %73, %74
  %76 = xor i64 1756701971032935215, %75
  %77 = xor i64 %70, -1
  %78 = or i64 5504852856034326602, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = or i64 %76, %80
  %82 = sext i32 %0 to i64
  %83 = and i64 %82, 2718525509834393468
  %84 = xor i64 %82, -1
  %85 = xor i64 2718525509834393468, %84
  %86 = and i64 %85, 2718525509834393468
  %87 = sext i32 %0 to i64
  %88 = or i64 %87, -3540829039420062283
  %89 = and i64 -3540829039420062283, %87
  %90 = xor i64 -3540829039420062283, %87
  %91 = or i64 %89, %90
  %92 = xor i64 %81, %71
  %93 = xor i64 %92, %88
  %94 = xor i64 %93, %86
  %95 = xor i64 %94, %83
  %96 = xor i64 %95, %91
  %97 = xor i64 %96, -6735573648369987041
  %98 = mul i64 %69, %97
  %99 = trunc i64 %98 to i32
  %100 = call i32 @_Z8digitSumi(i32 %99)
  %101 = add nsw i32 %100, %41
  ret i32 %101
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.unroll.disable"}
