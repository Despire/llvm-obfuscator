; ModuleID = 'output/const-obfuscation/ex1/ex1.ll'
source_filename = "input/const-obfuscation/ex1/ex1.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @_Z8digitSumi(i32 %0) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = add i64 %2, 4269347689366407730
  %4 = and i64 4269347689366407730, %2
  %5 = or i64 4269347689366407730, %2
  %6 = add i64 %4, %5
  %7 = sext i32 %0 to i64
  %8 = and i64 %7, 5885117985489018708
  %9 = xor i64 %7, -1
  %10 = or i64 -5885117985489018709, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %11, -1
  %13 = sext i32 %0 to i64
  %14 = add i64 %13, 2436432670466864026
  %15 = add i64 -6630456266922981279, %13
  %16 = sub i64 %15, -9066888937389845305
  %17 = xor i64 %12, %6
  %18 = xor i64 %17, %14
  %19 = xor i64 %18, 1852195968994270223
  %20 = xor i64 %19, %8
  %21 = xor i64 %20, %16
  %22 = xor i64 %21, %3
  %23 = sext i32 %0 to i64
  %24 = and i64 %23, -5987868910788210207
  %25 = or i64 5987868910788210206, %23
  %26 = sub i64 %25, 5987868910788210206
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, 8556642317102654445
  %29 = sub i64 0, %27
  %30 = sub i64 8556642317102654445, %29
  %31 = sext i32 %0 to i64
  %32 = add i64 %31, 9122774763188587823
  %33 = xor i64 9122774763188587823, %31
  %34 = and i64 9122774763188587823, %31
  %35 = mul i64 2, %34
  %36 = add i64 %33, %35
  %37 = xor i64 %28, 0
  %38 = xor i64 %37, %36
  %39 = xor i64 %38, %24
  %40 = xor i64 %39, %30
  %41 = xor i64 %40, %32
  %42 = xor i64 %41, %26
  %43 = mul i64 %22, %42
  %44 = trunc i64 %43 to i32
  %45 = icmp sgt i32 %0, %44
  br i1 %45, label %46, label %169

46:                                               ; preds = %46, %1
  %47 = phi i32 [ %124, %46 ], [ 0, %1 ]
  %48 = phi i32 [ %88, %46 ], [ %0, %1 ]
  %49 = freeze i32 %48
  %50 = sext i32 %0 to i64
  %51 = add i64 %50, 3940209858408625239
  %52 = xor i64 3940209858408625239, %50
  %53 = and i64 3940209858408625239, %50
  %54 = mul i64 2, %53
  %55 = add i64 %52, %54
  %56 = sext i32 %0 to i64
  %57 = and i64 %56, 3723642395912041143
  %58 = xor i64 %56, -1
  %59 = or i64 -3723642395912041144, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = xor i64 -28887623122322567, %57
  %63 = xor i64 %62, %51
  %64 = xor i64 %63, %61
  %65 = xor i64 %64, %55
  %66 = sext i32 %0 to i64
  %67 = or i64 %66, 174162518722142793
  %68 = and i64 174162518722142793, %66
  %69 = xor i64 174162518722142793, %66
  %70 = or i64 %68, %69
  %71 = sext i32 %0 to i64
  %72 = or i64 %71, 2550167556815689360
  %73 = and i64 2550167556815689360, %71
  %74 = xor i64 2550167556815689360, %71
  %75 = or i64 %73, %74
  %76 = sext i32 %0 to i64
  %77 = and i64 %76, 1292668079432895851
  %78 = or i64 -1292668079432895852, %76
  %79 = sub i64 %78, -1292668079432895852
  %80 = xor i64 %70, %75
  %81 = xor i64 %80, 1699052190162613210
  %82 = xor i64 %81, %67
  %83 = xor i64 %82, %79
  %84 = xor i64 %83, %77
  %85 = xor i64 %84, %72
  %86 = mul i64 %65, %85
  %87 = trunc i64 %86 to i32
  %88 = sdiv i32 %49, %87
  %89 = sext i32 %0 to i64
  %90 = and i64 %89, 559563821371773561
  %91 = or i64 -559563821371773562, %89
  %92 = sub i64 %91, -559563821371773562
  %93 = sext i32 %0 to i64
  %94 = add i64 %93, -7126639729798908895
  %95 = sub i64 0, %93
  %96 = sub i64 -7126639729798908895, %95
  %97 = sext i32 %0 to i64
  %98 = add i64 %97, 1159544199126686196
  %99 = add i64 -3442515262830948937, %97
  %100 = add i64 %99, 4602059461957635133
  %101 = xor i64 %90, %92
  %102 = xor i64 %101, %94
  %103 = xor i64 %102, 7427469691424813329
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, %96
  %106 = xor i64 %105, %100
  %107 = sext i32 %0 to i64
  %108 = and i64 %107, 8482507714584952547
  %109 = or i64 -8482507714584952548, %107
  %110 = sub i64 %109, -8482507714584952548
  %111 = sext i32 %0 to i64
  %112 = or i64 %111, 9083071823626535407
  %113 = xor i64 %111, -1
  %114 = and i64 9083071823626535407, %113
  %115 = add i64 %114, %111
  %116 = xor i64 %112, %108
  %117 = xor i64 %116, %115
  %118 = xor i64 %117, %110
  %119 = xor i64 %118, 1957259933217111914
  %120 = mul i64 %106, %119
  %121 = trunc i64 %120 to i32
  %122 = mul i32 %88, %121
  %123 = sub i32 %49, %122
  %124 = add nsw i32 %47, %123
  %125 = sext i32 %0 to i64
  %126 = add i64 %125, 2552813613428617984
  %127 = add i64 8138991823465870081, %125
  %128 = sub i64 %127, 5586178210037252097
  %129 = sext i32 %0 to i64
  %130 = add i64 %129, 9008692321099172005
  %131 = and i64 9008692321099172005, %129
  %132 = or i64 9008692321099172005, %129
  %133 = add i64 %131, %132
  %134 = sext i32 %0 to i64
  %135 = or i64 %134, -2248547349233861054
  %136 = xor i64 %134, -1
  %137 = and i64 %136, 6820781009689898886
  %138 = and i64 %134, -6820781009689898887
  %139 = or i64 %137, %138
  %140 = xor i64 -4727717300905504316, %139
  %141 = xor i64 %134, -1
  %142 = or i64 2248547349233861053, %141
  %143 = xor i64 %142, -1
  %144 = and i64 %143, -1
  %145 = or i64 %140, %144
  %146 = xor i64 %145, %128
  %147 = xor i64 %146, %133
  %148 = xor i64 %147, %126
  %149 = xor i64 %148, %130
  %150 = xor i64 %149, %135
  %151 = xor i64 %150, -1662124508243525163
  %152 = sext i32 %0 to i64
  %153 = add i64 %152, 984709414668924892
  %154 = and i64 984709414668924892, %152
  %155 = or i64 984709414668924892, %152
  %156 = add i64 %154, %155
  %157 = sext i32 %0 to i64
  %158 = or i64 %157, -8528168165606905587
  %159 = and i64 -8528168165606905587, %157
  %160 = xor i64 -8528168165606905587, %157
  %161 = or i64 %159, %160
  %162 = xor i64 %158, %156
  %163 = xor i64 %162, 704982981342276453
  %164 = xor i64 %163, %161
  %165 = xor i64 %164, %153
  %166 = mul i64 %151, %165
  %167 = trunc i64 %166 to i32
  %168 = icmp sgt i32 %48, %167
  br i1 %168, label %46, label %169, !llvm.loop !10

169:                                              ; preds = %46, %1
  %170 = phi i32 [ 0, %1 ], [ %124, %46 ]
  ret i32 %170
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = or i64 %3, 6323835276946674886
  %5 = and i64 6323835276946674886, %3
  %6 = xor i64 6323835276946674886, %3
  %7 = or i64 %5, %6
  %8 = sext i32 %0 to i64
  %9 = add i64 %8, -5377119847685409933
  %10 = sub i64 0, %8
  %11 = sub i64 -5377119847685409933, %10
  %12 = sext i32 %0 to i64
  %13 = add i64 %12, -7144832230038314396
  %14 = add i64 -5322380414561932867, %12
  %15 = add i64 %14, -1822451815476381529
  %16 = xor i64 %9, %4
  %17 = xor i64 %16, %7
  %18 = xor i64 %17, %13
  %19 = xor i64 %18, %11
  %20 = xor i64 %19, -1489884210708925587
  %21 = xor i64 %20, %15
  %22 = sext i32 %0 to i64
  %23 = add i64 %22, 8698356766207425369
  %24 = sub i64 0, %22
  %25 = add i64 -8698356766207425369, %24
  %26 = sub i64 0, %25
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, -1489562585056923715
  %29 = and i64 -1489562585056923715, %27
  %30 = or i64 -1489562585056923715, %27
  %31 = add i64 %29, %30
  %32 = sext i32 %0 to i64
  %33 = and i64 %32, 8687238626926193508
  %34 = xor i64 %32, -1
  %35 = xor i64 8687238626926193508, %34
  %36 = and i64 %35, 8687238626926193508
  %37 = xor i64 %31, %36
  %38 = xor i64 %37, %33
  %39 = xor i64 %38, %28
  %40 = xor i64 %39, %23
  %41 = xor i64 %40, %26
  %42 = xor i64 %41, -6498292159512504341
  %43 = mul i64 %21, %42
  %44 = trunc i64 %43 to i32
  %45 = call i32 @_Z8digitSumi(i32 %44)
  %46 = sext i32 %0 to i64
  %47 = and i64 %46, -1951028776906661580
  %48 = or i64 1951028776906661579, %46
  %49 = sub i64 %48, 1951028776906661579
  %50 = sext i32 %0 to i64
  %51 = add i64 %50, -8319400310773694613
  %52 = add i64 -9075993042883252600, %50
  %53 = sub i64 %52, -756592732109557987
  %54 = xor i64 %53, %47
  %55 = xor i64 %54, %49
  %56 = xor i64 %55, %51
  %57 = xor i64 %56, 4492423805919806713
  %58 = sext i32 %0 to i64
  %59 = and i64 %58, 8447446857624183649
  %60 = xor i64 %58, -1
  %61 = or i64 -8447446857624183650, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = sext i32 %0 to i64
  %65 = or i64 %64, -2526555592731016527
  %66 = xor i64 %64, -1
  %67 = and i64 %66, -938761124620321529
  %68 = and i64 %64, 938761124620321528
  %69 = or i64 %67, %68
  %70 = xor i64 3321130568899559350, %69
  %71 = xor i64 %64, -1
  %72 = or i64 2526555592731016526, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = or i64 %70, %74
  %76 = xor i64 %59, 2064000090231241761
  %77 = xor i64 %76, %63
  %78 = xor i64 %77, %75
  %79 = xor i64 %78, %65
  %80 = mul i64 %57, %79
  %81 = trunc i64 %80 to i32
  %82 = call i32 @_Z8digitSumi(i32 %81)
  %83 = add nsw i32 %82, %45
  ret i32 %83
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.unroll.disable"}
