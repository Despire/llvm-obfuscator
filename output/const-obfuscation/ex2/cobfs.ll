; ModuleID = 'output/const-obfuscation/ex2/ex2.ll'
source_filename = "input/const-obfuscation/ex2/ex2.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @_Z8digitSumi(i32 %0) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i32 [ %0, %1 ], [ %90, %2 ]
  %4 = phi i32 [ 0, %1 ], [ %40, %2 ]
  %5 = sext i32 %0 to i64
  %6 = or i64 %5, 1331616628836578421
  %7 = and i64 1331616628836578421, %5
  %8 = xor i64 1331616628836578421, %5
  %9 = or i64 %7, %8
  %10 = sext i32 %0 to i64
  %11 = add i64 %10, -6982660221906584509
  %12 = sub i64 0, %10
  %13 = sub i64 -6982660221906584509, %12
  %14 = sext i32 %0 to i64
  %15 = or i64 %14, 2193448289536314696
  %16 = xor i64 %14, -1
  %17 = and i64 2193448289536314696, %16
  %18 = add i64 %17, %14
  %19 = xor i64 %11, %6
  %20 = xor i64 %19, 3815539625717652223
  %21 = xor i64 %20, %13
  %22 = xor i64 %21, %15
  %23 = xor i64 %22, %18
  %24 = xor i64 %23, %9
  %25 = sext i32 %0 to i64
  %26 = and i64 %25, 2731211630264118821
  %27 = xor i64 %25, -1
  %28 = xor i64 2731211630264118821, %27
  %29 = and i64 %28, 2731211630264118821
  %30 = sext i32 %0 to i64
  %31 = add i64 %30, -4064189357018360377
  %32 = add i64 -4963581083441271693, %30
  %33 = sub i64 %32, -899391726422911316
  %34 = xor i64 %33, %29
  %35 = xor i64 %34, %26
  %36 = xor i64 %35, %31
  %37 = xor i64 %36, -5210155316249680641
  %38 = mul i64 %24, %37
  %39 = trunc i64 %38 to i32
  %40 = add nuw nsw i32 %4, %39
  %41 = sext i32 %0 to i64
  %42 = or i64 %41, -8949281055173136364
  %43 = xor i64 %41, -1
  %44 = and i64 %43, -4074866375212434124
  %45 = and i64 %41, 4074866375212434123
  %46 = or i64 %44, %45
  %47 = xor i64 4953659237155917088, %46
  %48 = xor i64 %41, -1
  %49 = or i64 8949281055173136363, %48
  %50 = xor i64 %49, -1
  %51 = and i64 %50, -1
  %52 = or i64 %47, %51
  %53 = sext i32 %0 to i64
  %54 = or i64 %53, 6602719552774326177
  %55 = xor i64 %53, -1
  %56 = and i64 %55, -878822768447669108
  %57 = and i64 %53, 878822768447669107
  %58 = or i64 %56, %57
  %59 = xor i64 -6310570938840286419, %58
  %60 = xor i64 %53, -1
  %61 = or i64 -6602719552774326178, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = or i64 %59, %63
  %65 = xor i64 %42, 2521604304628325835
  %66 = xor i64 %65, %64
  %67 = xor i64 %66, %54
  %68 = xor i64 %67, %52
  %69 = sext i32 %0 to i64
  %70 = or i64 %69, 7845371695391123519
  %71 = xor i64 %69, -1
  %72 = and i64 7845371695391123519, %71
  %73 = add i64 %72, %69
  %74 = sext i32 %0 to i64
  %75 = add i64 %74, 4542955522668156977
  %76 = add i64 1811840465360909442, %74
  %77 = sub i64 %76, -2731115057307247535
  %78 = sext i32 %0 to i64
  %79 = and i64 %78, 4037764202209852378
  %80 = or i64 -4037764202209852379, %78
  %81 = sub i64 %80, -4037764202209852379
  %82 = xor i64 %70, %77
  %83 = xor i64 %82, %79
  %84 = xor i64 %83, 4176491277927988958
  %85 = xor i64 %84, %81
  %86 = xor i64 %85, %75
  %87 = xor i64 %86, %73
  %88 = mul i64 %68, %87
  %89 = trunc i64 %88 to i32
  %90 = sdiv i32 %3, %89
  %91 = sext i32 %0 to i64
  %92 = or i64 %91, 5177642356070265168
  %93 = xor i64 %91, -1
  %94 = and i64 5177642356070265168, %93
  %95 = add i64 %94, %91
  %96 = sext i32 %0 to i64
  %97 = and i64 %96, 353356234365246125
  %98 = xor i64 %96, -1
  %99 = xor i64 353356234365246125, %98
  %100 = and i64 %99, 353356234365246125
  %101 = xor i64 -68916660080930091, %92
  %102 = xor i64 %101, %97
  %103 = xor i64 %102, %95
  %104 = xor i64 %103, %100
  %105 = sext i32 %0 to i64
  %106 = or i64 %105, 5496994794290543412
  %107 = xor i64 %105, -1
  %108 = and i64 %107, 2730275236793051855
  %109 = and i64 %105, -2730275236793051856
  %110 = or i64 %108, %109
  %111 = xor i64 7614141630203007483, %110
  %112 = xor i64 %105, -1
  %113 = or i64 -5496994794290543413, %112
  %114 = xor i64 %113, -1
  %115 = and i64 %114, -1
  %116 = or i64 %111, %115
  %117 = sext i32 %0 to i64
  %118 = add i64 %117, 2755049695743801695
  %119 = and i64 2755049695743801695, %117
  %120 = or i64 2755049695743801695, %117
  %121 = add i64 %119, %120
  %122 = xor i64 7077517729771965029, %121
  %123 = xor i64 %122, %118
  %124 = xor i64 %123, %106
  %125 = xor i64 %124, %116
  %126 = mul i64 %104, %125
  %127 = trunc i64 %126 to i32
  %128 = add i32 %3, %127
  %129 = sext i32 %0 to i64
  %130 = add i64 %129, -1368581764574542621
  %131 = and i64 -1368581764574542621, %129
  %132 = or i64 -1368581764574542621, %129
  %133 = add i64 %131, %132
  %134 = sext i32 %0 to i64
  %135 = and i64 %134, 5277280036380056219
  %136 = xor i64 %134, -1
  %137 = or i64 -5277280036380056220, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = sext i32 %0 to i64
  %141 = add i64 %140, 6940390288508953744
  %142 = sub i64 0, %140
  %143 = add i64 -6940390288508953744, %142
  %144 = sub i64 0, %143
  %145 = xor i64 %130, %139
  %146 = xor i64 %145, %133
  %147 = xor i64 %146, %144
  %148 = xor i64 %147, -2804061769096492233
  %149 = xor i64 %148, %135
  %150 = xor i64 %149, %141
  %151 = sext i32 %0 to i64
  %152 = and i64 %151, -3086374135762193387
  %153 = xor i64 %151, -1
  %154 = or i64 3086374135762193386, %153
  %155 = xor i64 %154, -1
  %156 = and i64 %155, -1
  %157 = sext i32 %0 to i64
  %158 = or i64 %157, -2694474971984195445
  %159 = xor i64 %157, -1
  %160 = and i64 %159, -537286275938611741
  %161 = and i64 %157, 537286275938611740
  %162 = or i64 %160, %161
  %163 = xor i64 2454569220446297448, %162
  %164 = xor i64 %157, -1
  %165 = or i64 2694474971984195444, %164
  %166 = xor i64 %165, -1
  %167 = and i64 %166, -1
  %168 = or i64 %163, %167
  %169 = sext i32 %0 to i64
  %170 = add i64 %169, 2784146447440394755
  %171 = and i64 2784146447440394755, %169
  %172 = or i64 2784146447440394755, %169
  %173 = add i64 %171, %172
  %174 = xor i64 %168, 2159628300194052101
  %175 = xor i64 %174, %152
  %176 = xor i64 %175, %173
  %177 = xor i64 %176, %170
  %178 = xor i64 %177, %158
  %179 = xor i64 %178, %156
  %180 = mul i64 %150, %179
  %181 = trunc i64 %180 to i32
  %182 = icmp ult i32 %128, %181
  br i1 %182, label %183, label %2, !llvm.loop !10

183:                                              ; preds = %2
  ret i32 %40
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = and i64 %3, -424536874141549000
  %5 = or i64 424536874141548999, %3
  %6 = sub i64 %5, 424536874141548999
  %7 = sext i32 %0 to i64
  %8 = or i64 %7, -1397250293844160225
  %9 = and i64 -1397250293844160225, %7
  %10 = xor i64 -1397250293844160225, %7
  %11 = or i64 %9, %10
  %12 = sext i32 %0 to i64
  %13 = and i64 %12, -1608907507492458510
  %14 = or i64 1608907507492458509, %12
  %15 = sub i64 %14, 1608907507492458509
  %16 = xor i64 %13, %6
  %17 = xor i64 %16, %4
  %18 = xor i64 %17, 7498382642206659669
  %19 = xor i64 %18, %8
  %20 = xor i64 %19, %15
  %21 = xor i64 %20, %11
  %22 = sext i32 %0 to i64
  %23 = add i64 %22, -5637551846551799022
  %24 = and i64 -5637551846551799022, %22
  %25 = or i64 -5637551846551799022, %22
  %26 = add i64 %24, %25
  %27 = sext i32 %0 to i64
  %28 = or i64 %27, -2934120312810622636
  %29 = xor i64 %27, -1
  %30 = and i64 -2934120312810622636, %29
  %31 = add i64 %30, %27
  %32 = sext i32 %0 to i64
  %33 = add i64 %32, 651502294554059993
  %34 = sub i64 0, %32
  %35 = add i64 -651502294554059993, %34
  %36 = sub i64 0, %35
  %37 = xor i64 %26, %31
  %38 = xor i64 %37, %28
  %39 = xor i64 %38, %23
  %40 = xor i64 %39, %33
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, -747951983771973933
  %43 = mul i64 %21, %42
  %44 = trunc i64 %43 to i32
  %45 = call i32 @_Z8digitSumi(i32 %44)
  %46 = sext i32 %0 to i64
  %47 = or i64 %46, 4770622922730904519
  %48 = xor i64 %46, -1
  %49 = and i64 %48, -604022625185415999
  %50 = and i64 %46, 604022625185415998
  %51 = or i64 %49, %50
  %52 = xor i64 -5356261158570416378, %51
  %53 = xor i64 %46, -1
  %54 = or i64 -4770622922730904520, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = sext i32 %0 to i64
  %59 = and i64 %58, -9100366625289067997
  %60 = xor i64 %58, -1
  %61 = xor i64 -9100366625289067997, %60
  %62 = and i64 %61, -9100366625289067997
  %63 = xor i64 -9161118605772781525, %57
  %64 = xor i64 %63, %47
  %65 = xor i64 %64, %62
  %66 = xor i64 %65, %59
  %67 = sext i32 %0 to i64
  %68 = add i64 %67, -9062990375504884272
  %69 = sub i64 0, %67
  %70 = add i64 9062990375504884272, %69
  %71 = sub i64 0, %70
  %72 = sext i32 %0 to i64
  %73 = or i64 %72, 8333996880470425177
  %74 = and i64 8333996880470425177, %72
  %75 = xor i64 8333996880470425177, %72
  %76 = or i64 %74, %75
  %77 = sext i32 %0 to i64
  %78 = and i64 %77, 5269345899939240517
  %79 = or i64 -5269345899939240518, %77
  %80 = sub i64 %79, -5269345899939240518
  %81 = xor i64 %78, %76
  %82 = xor i64 %81, %80
  %83 = xor i64 %82, -6489284072552885557
  %84 = xor i64 %83, %73
  %85 = xor i64 %84, %68
  %86 = xor i64 %85, %71
  %87 = mul i64 %66, %86
  %88 = trunc i64 %87 to i32
  %89 = call i32 @_Z8digitSumi(i32 %88)
  %90 = add nsw i32 %89, %45
  ret i32 %90
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.unroll.disable"}
