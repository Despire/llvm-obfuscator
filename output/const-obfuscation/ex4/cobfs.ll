; ModuleID = 'output/const-obfuscation/ex4/ex4.ll'
source_filename = "input/const-obfuscation/ex4/ex4.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @_Z6decideii(i32 %0, i32 %1) local_unnamed_addr #0 {
  br label %4

3:                                                ; preds = %4
  unreachable

4:                                                ; preds = %259, %2
  %5 = phi i32 [ %0, %2 ], [ %260, %259 ]
  %6 = phi i32 [ 0, %2 ], [ %261, %259 ]
  switch i32 %6, label %3 [
    i32 0, label %7
    i32 1, label %157
    i32 2, label %262
    i32 3, label %307
  ], !llvm.loop !10

7:                                                ; preds = %4
  %8 = icmp slt i32 %5, %1
  %9 = sext i32 %0 to i64
  %10 = and i64 %9, 6907335055317852249
  %11 = xor i64 %9, -1
  %12 = or i64 -6907335055317852250, %11
  %13 = xor i64 %12, -1
  %14 = and i64 %13, -1
  %15 = sext i32 %6 to i64
  %16 = and i64 %15, -164484306205430607
  %17 = or i64 164484306205430606, %15
  %18 = sub i64 %17, 164484306205430606
  %19 = sext i32 %0 to i64
  %20 = and i64 %19, -4209524569963423263
  %21 = xor i64 %19, -1
  %22 = xor i64 -4209524569963423263, %21
  %23 = and i64 %22, -4209524569963423263
  %24 = xor i64 2251388879918905155, %18
  %25 = xor i64 %24, %20
  %26 = xor i64 %25, %14
  %27 = xor i64 %26, %10
  %28 = xor i64 %27, %16
  %29 = xor i64 %28, %23
  %30 = sext i32 %1 to i64
  %31 = or i64 %30, -2376927247038424230
  %32 = xor i64 %30, -1
  %33 = and i64 %32, 8045612391406978561
  %34 = and i64 %30, -8045612391406978562
  %35 = or i64 %33, %34
  %36 = xor i64 -5718247076805436069, %35
  %37 = xor i64 %30, -1
  %38 = or i64 2376927247038424229, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = or i64 %36, %40
  %42 = sext i32 %6 to i64
  %43 = and i64 %42, 1226616519552987583
  %44 = or i64 -1226616519552987584, %42
  %45 = sub i64 %44, -1226616519552987584
  %46 = sext i32 %0 to i64
  %47 = add i64 %46, -5726577769008816864
  %48 = xor i64 -5726577769008816864, %46
  %49 = and i64 -5726577769008816864, %46
  %50 = mul i64 2, %49
  %51 = add i64 %48, %50
  %52 = xor i64 %43, 0
  %53 = xor i64 %52, %47
  %54 = xor i64 %53, %31
  %55 = xor i64 %54, %41
  %56 = xor i64 %55, %45
  %57 = xor i64 %56, %51
  %58 = mul i64 %29, %57
  %59 = trunc i64 %58 to i32
  %60 = select i1 %8, i32 %1, i32 %59
  %61 = add nsw i32 %60, %5
  %62 = sext i32 %0 to i64
  %63 = or i64 %62, 5034603892930689847
  %64 = xor i64 %62, -1
  %65 = and i64 %64, -2384309837211939627
  %66 = and i64 %62, 2384309837211939626
  %67 = or i64 %65, %66
  %68 = xor i64 -7262129969077291038, %67
  %69 = xor i64 %62, -1
  %70 = or i64 -5034603892930689848, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = or i64 %68, %72
  %74 = sext i32 %0 to i64
  %75 = add i64 %74, 8157651009681914993
  %76 = and i64 8157651009681914993, %74
  %77 = or i64 8157651009681914993, %74
  %78 = add i64 %76, %77
  %79 = xor i64 %73, %63
  %80 = xor i64 %79, -1259853938483910259
  %81 = xor i64 %80, %75
  %82 = xor i64 %81, %78
  %83 = sext i32 %1 to i64
  %84 = and i64 %83, 5443695339808664902
  %85 = xor i64 %83, -1
  %86 = xor i64 5443695339808664902, %85
  %87 = and i64 %86, 5443695339808664902
  %88 = sext i32 %6 to i64
  %89 = or i64 %88, 2750406414590196641
  %90 = xor i64 %88, -1
  %91 = and i64 2750406414590196641, %90
  %92 = add i64 %91, %88
  %93 = sext i32 %5 to i64
  %94 = and i64 %93, 5475221251085029210
  %95 = xor i64 %93, -1
  %96 = xor i64 5475221251085029210, %95
  %97 = and i64 %96, 5475221251085029210
  %98 = xor i64 %89, 2743890637386073039
  %99 = xor i64 %98, %84
  %100 = xor i64 %99, %94
  %101 = xor i64 %100, %97
  %102 = xor i64 %101, %87
  %103 = xor i64 %102, %92
  %104 = mul i64 %82, %103
  %105 = trunc i64 %104 to i32
  %106 = sext i32 %0 to i64
  %107 = and i64 %106, -1033589857955663546
  %108 = or i64 1033589857955663545, %106
  %109 = sub i64 %108, 1033589857955663545
  %110 = sext i32 %6 to i64
  %111 = or i64 %110, -9137679245585625865
  %112 = xor i64 %110, -1
  %113 = and i64 -9137679245585625865, %112
  %114 = add i64 %113, %110
  %115 = sext i32 %5 to i64
  %116 = or i64 %115, -3705742644097522364
  %117 = xor i64 %115, -1
  %118 = and i64 -3705742644097522364, %117
  %119 = add i64 %118, %115
  %120 = xor i64 %119, %109
  %121 = xor i64 %120, %114
  %122 = xor i64 %121, %107
  %123 = xor i64 %122, %116
  %124 = xor i64 %123, -3556472076975975301
  %125 = xor i64 %124, %111
  %126 = sext i32 %1 to i64
  %127 = or i64 %126, 1623304363580301944
  %128 = xor i64 %126, -1
  %129 = and i64 %128, 2021728237793055134
  %130 = and i64 %126, -2021728237793055135
  %131 = or i64 %129, %130
  %132 = xor i64 759346546667140070, %131
  %133 = xor i64 %126, -1
  %134 = or i64 -1623304363580301945, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = or i64 %132, %136
  %138 = sext i32 %6 to i64
  %139 = or i64 %138, -6508869089603730462
  %140 = and i64 -6508869089603730462, %138
  %141 = xor i64 -6508869089603730462, %138
  %142 = or i64 %140, %141
  %143 = sext i32 %0 to i64
  %144 = or i64 %143, 1017219882870147075
  %145 = and i64 1017219882870147075, %143
  %146 = xor i64 1017219882870147075, %143
  %147 = or i64 %145, %146
  %148 = xor i64 %139, %142
  %149 = xor i64 %148, %144
  %150 = xor i64 %149, 918619727226366643
  %151 = xor i64 %150, %147
  %152 = xor i64 %151, %137
  %153 = xor i64 %152, %127
  %154 = mul i64 %125, %153
  %155 = trunc i64 %154 to i32
  %156 = select i1 %8, i32 %105, i32 %155
  br label %259

157:                                              ; preds = %4
  %158 = icmp eq i32 %5, %1
  %159 = sub nsw i32 %1, %5
  %160 = select i1 %158, i32 %159, i32 %5
  %161 = sext i32 %1 to i64
  %162 = and i64 %161, -4457482416827286409
  %163 = xor i64 %161, -1
  %164 = or i64 4457482416827286408, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = sext i32 %0 to i64
  %168 = or i64 %167, -7190070001590075665
  %169 = xor i64 %167, -1
  %170 = and i64 %169, 7407235621506399355
  %171 = and i64 %167, -7407235621506399356
  %172 = or i64 %170, %171
  %173 = xor i64 -361285360673242476, %172
  %174 = xor i64 %167, -1
  %175 = or i64 7190070001590075664, %174
  %176 = xor i64 %175, -1
  %177 = and i64 %176, -1
  %178 = or i64 %173, %177
  %179 = sext i32 %1 to i64
  %180 = and i64 %179, 5594992650290571057
  %181 = xor i64 %179, -1
  %182 = or i64 -5594992650290571058, %181
  %183 = xor i64 %182, -1
  %184 = and i64 %183, -1
  %185 = xor i64 %180, 7267067463568755447
  %186 = xor i64 %185, %178
  %187 = xor i64 %186, %162
  %188 = xor i64 %187, %184
  %189 = xor i64 %188, %166
  %190 = xor i64 %189, %168
  %191 = sext i32 %6 to i64
  %192 = or i64 %191, -5637945616236961652
  %193 = xor i64 %191, -1
  %194 = and i64 -5637945616236961652, %193
  %195 = add i64 %194, %191
  %196 = sext i32 %5 to i64
  %197 = or i64 %196, -4587076309169404499
  %198 = xor i64 %196, -1
  %199 = and i64 %198, 3730086044083444260
  %200 = and i64 %196, -3730086044083444261
  %201 = or i64 %199, %200
  %202 = xor i64 -894946282720370807, %201
  %203 = xor i64 %196, -1
  %204 = or i64 4587076309169404498, %203
  %205 = xor i64 %204, -1
  %206 = and i64 %205, -1
  %207 = or i64 %202, %206
  %208 = sext i32 %6 to i64
  %209 = add i64 %208, -5497807415827141413
  %210 = xor i64 -5497807415827141413, %208
  %211 = and i64 -5497807415827141413, %208
  %212 = mul i64 2, %211
  %213 = add i64 %210, %212
  %214 = xor i64 %192, %197
  %215 = xor i64 %214, %209
  %216 = xor i64 %215, %195
  %217 = xor i64 %216, %213
  %218 = xor i64 %217, -8034887701253979051
  %219 = xor i64 %218, %207
  %220 = mul i64 %190, %219
  %221 = trunc i64 %220 to i32
  %222 = sext i32 %6 to i64
  %223 = add i64 %222, -8094378335829671652
  %224 = and i64 -8094378335829671652, %222
  %225 = or i64 -8094378335829671652, %222
  %226 = add i64 %224, %225
  %227 = sext i32 %1 to i64
  %228 = add i64 %227, 511195531893179691
  %229 = add i64 7818901651060943699, %227
  %230 = sub i64 %229, 7307706119167764008
  %231 = xor i64 -5324593045230106133, %223
  %232 = xor i64 %231, %226
  %233 = xor i64 %232, %230
  %234 = xor i64 %233, %228
  %235 = sext i32 %5 to i64
  %236 = or i64 %235, 5407253303005029466
  %237 = xor i64 %235, -1
  %238 = and i64 %237, -1232402205974115001
  %239 = and i64 %235, 1232402205974115000
  %240 = or i64 %238, %239
  %241 = xor i64 -6489743671436678883, %240
  %242 = xor i64 %235, -1
  %243 = or i64 -5407253303005029467, %242
  %244 = xor i64 %243, -1
  %245 = and i64 %244, -1
  %246 = or i64 %241, %245
  %247 = sext i32 %5 to i64
  %248 = and i64 %247, 1063649189945988981
  %249 = xor i64 %247, -1
  %250 = xor i64 1063649189945988981, %249
  %251 = and i64 %250, 1063649189945988981
  %252 = xor i64 -3858437895949177466, %246
  %253 = xor i64 %252, %248
  %254 = xor i64 %253, %251
  %255 = xor i64 %254, %236
  %256 = mul i64 %234, %255
  %257 = trunc i64 %256 to i32
  %258 = select i1 %158, i32 %221, i32 %257
  br label %259

259:                                              ; preds = %262, %157, %7
  %260 = phi i32 [ %306, %262 ], [ %61, %7 ], [ %160, %157 ]
  %261 = phi i32 [ 3, %262 ], [ %156, %7 ], [ %258, %157 ]
  br label %4, !llvm.loop !10

262:                                              ; preds = %4
  %263 = sext i32 %0 to i64
  %264 = or i64 %263, -802262979455317126
  %265 = xor i64 %263, -1
  %266 = and i64 %265, -4654696369148656075
  %267 = and i64 %263, 4654696369148656074
  %268 = or i64 %266, %267
  %269 = xor i64 5456946862047530319, %268
  %270 = xor i64 %263, -1
  %271 = or i64 802262979455317125, %270
  %272 = xor i64 %271, -1
  %273 = and i64 %272, -1
  %274 = or i64 %269, %273
  %275 = sext i32 %6 to i64
  %276 = and i64 %275, 5894121819256255198
  %277 = or i64 -5894121819256255199, %275
  %278 = sub i64 %277, -5894121819256255199
  %279 = xor i64 %274, %264
  %280 = xor i64 %279, %276
  %281 = xor i64 %280, %278
  %282 = xor i64 %281, -789836092514102785
  %283 = sext i32 %0 to i64
  %284 = or i64 %283, -2023729521941892086
  %285 = xor i64 %283, -1
  %286 = and i64 -2023729521941892086, %285
  %287 = add i64 %286, %283
  %288 = sext i32 %6 to i64
  %289 = or i64 %288, 4991243973707498844
  %290 = xor i64 %288, -1
  %291 = and i64 4991243973707498844, %290
  %292 = add i64 %291, %288
  %293 = sext i32 %5 to i64
  %294 = and i64 %293, 2284047226599661985
  %295 = or i64 -2284047226599661986, %293
  %296 = sub i64 %295, -2284047226599661986
  %297 = xor i64 %294, %289
  %298 = xor i64 %297, 6229357971731770879
  %299 = xor i64 %298, %284
  %300 = xor i64 %299, %287
  %301 = xor i64 %300, %296
  %302 = xor i64 %301, %292
  %303 = mul i64 %282, %302
  %304 = trunc i64 %303 to i32
  %305 = shl i32 %5, %304
  %306 = sub i32 %305, %1
  br label %259

307:                                              ; preds = %4
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = add i64 %3, 405343992626101226
  %5 = and i64 405343992626101226, %3
  %6 = or i64 405343992626101226, %3
  %7 = add i64 %5, %6
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, 7890770409253474625
  %10 = xor i64 %8, -1
  %11 = xor i64 7890770409253474625, %10
  %12 = and i64 %11, 7890770409253474625
  %13 = xor i64 %4, %7
  %14 = xor i64 %13, %12
  %15 = xor i64 %14, -5833418837453746079
  %16 = xor i64 %15, %9
  %17 = sext i32 %0 to i64
  %18 = or i64 %17, 4327673017548702492
  %19 = xor i64 %17, -1
  %20 = and i64 4327673017548702492, %19
  %21 = add i64 %20, %17
  %22 = sext i32 %0 to i64
  %23 = add i64 %22, 934005951059169705
  %24 = xor i64 934005951059169705, %22
  %25 = and i64 934005951059169705, %22
  %26 = mul i64 2, %25
  %27 = add i64 %24, %26
  %28 = xor i64 %23, -8810387089952217489
  %29 = xor i64 %28, %18
  %30 = xor i64 %29, %27
  %31 = xor i64 %30, %21
  %32 = mul i64 %16, %31
  %33 = trunc i64 %32 to i32
  %34 = sext i32 %0 to i64
  %35 = or i64 %34, -7828130712249995302
  %36 = xor i64 %34, -1
  %37 = and i64 -7828130712249995302, %36
  %38 = add i64 %37, %34
  %39 = sext i32 %0 to i64
  %40 = add i64 %39, -733224704382061697
  %41 = add i64 -5166161361583168223, %39
  %42 = add i64 %41, 4432936657201106526
  %43 = xor i64 -1026606334117944261, %38
  %44 = xor i64 %43, %35
  %45 = xor i64 %44, %42
  %46 = xor i64 %45, %40
  %47 = sext i32 %0 to i64
  %48 = or i64 %47, -6827350969836463537
  %49 = xor i64 %47, -1
  %50 = and i64 -6827350969836463537, %49
  %51 = add i64 %50, %47
  %52 = sext i32 %0 to i64
  %53 = or i64 %52, 8159450563889706853
  %54 = xor i64 %52, -1
  %55 = and i64 8159450563889706853, %54
  %56 = add i64 %55, %52
  %57 = xor i64 2501184081094069179, %48
  %58 = xor i64 %57, %56
  %59 = xor i64 %58, %51
  %60 = xor i64 %59, %53
  %61 = mul i64 %46, %60
  %62 = trunc i64 %61 to i32
  %63 = call i32 @_Z6decideii(i32 %33, i32 %62)
  ret i32 %63
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.unroll.disable"}
