; ModuleID = 'output/const-obfuscation/ex4/ex4.ll'
source_filename = "input/const-obfuscation/ex4/ex4.cpp"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @_Z6decideii(i32 %0, i32 %1) local_unnamed_addr #0 {
  br label %4

3:                                                ; preds = %4
  unreachable

4:                                                ; preds = %220, %2
  %5 = phi i32 [ %0, %2 ], [ %221, %220 ]
  %6 = phi i32 [ 0, %2 ], [ %222, %220 ]
  switch i32 %6, label %3 [
    i32 0, label %7
    i32 1, label %136
    i32 2, label %223
    i32 3, label %272
  ], !llvm.loop !10

7:                                                ; preds = %4
  %8 = icmp slt i32 %5, %1
  %9 = sext i32 %6 to i64
  %10 = or i64 %9, -7539710746408454458
  %11 = and i64 -7539710746408454458, %9
  %12 = xor i64 -7539710746408454458, %9
  %13 = or i64 %11, %12
  %14 = sext i32 %6 to i64
  %15 = and i64 %14, 8159825837984113124
  %16 = or i64 -8159825837984113125, %14
  %17 = sub i64 %16, -8159825837984113125
  %18 = sext i32 %5 to i64
  %19 = and i64 %18, -894011626220805621
  %20 = or i64 894011626220805620, %18
  %21 = sub i64 %20, 894011626220805620
  %22 = xor i64 %10, %19
  %23 = xor i64 %22, %17
  %24 = xor i64 %23, %15
  %25 = xor i64 %24, %21
  %26 = xor i64 %25, %13
  %27 = xor i64 %26, 1394203687932094657
  %28 = sext i32 %1 to i64
  %29 = or i64 %28, -8217303824900697605
  %30 = and i64 -8217303824900697605, %28
  %31 = xor i64 -8217303824900697605, %28
  %32 = or i64 %30, %31
  %33 = sext i32 %1 to i64
  %34 = or i64 %33, 8338503953088163224
  %35 = and i64 8338503953088163224, %33
  %36 = xor i64 8338503953088163224, %33
  %37 = or i64 %35, %36
  %38 = xor i64 %29, %34
  %39 = xor i64 %38, %32
  %40 = xor i64 %39, %37
  %41 = xor i64 %40, 0
  %42 = mul i64 %27, %41
  %43 = trunc i64 %42 to i32
  %44 = select i1 %8, i32 %1, i32 %43
  %45 = add nsw i32 %44, %5
  %46 = sext i32 %1 to i64
  %47 = and i64 %46, 492426043524666992
  %48 = or i64 -492426043524666993, %46
  %49 = sub i64 %48, -492426043524666993
  %50 = sext i32 %1 to i64
  %51 = add i64 %50, 768700797228084256
  %52 = xor i64 768700797228084256, %50
  %53 = and i64 768700797228084256, %50
  %54 = mul i64 2, %53
  %55 = add i64 %52, %54
  %56 = sext i32 %6 to i64
  %57 = or i64 %56, 8031651272350934144
  %58 = and i64 8031651272350934144, %56
  %59 = xor i64 8031651272350934144, %56
  %60 = or i64 %58, %59
  %61 = xor i64 %57, %60
  %62 = xor i64 %61, %49
  %63 = xor i64 %62, %47
  %64 = xor i64 %63, 4315784069786642035
  %65 = xor i64 %64, %55
  %66 = xor i64 %65, %51
  %67 = sext i32 %5 to i64
  %68 = or i64 %67, -1228165658217404451
  %69 = and i64 -1228165658217404451, %67
  %70 = xor i64 -1228165658217404451, %67
  %71 = or i64 %69, %70
  %72 = sext i32 %0 to i64
  %73 = or i64 %72, 876863708609079768
  %74 = xor i64 %72, -1
  %75 = and i64 %74, -1069511376920574388
  %76 = and i64 %72, 1069511376920574387
  %77 = or i64 %75, %76
  %78 = xor i64 -215209661006450796, %77
  %79 = xor i64 %72, -1
  %80 = or i64 -876863708609079769, %79
  %81 = xor i64 %80, -1
  %82 = and i64 %81, -1
  %83 = or i64 %78, %82
  %84 = sext i32 %0 to i64
  %85 = add i64 %84, 5904502603526031811
  %86 = add i64 -706188790260582745, %84
  %87 = add i64 %86, 6610691393786614556
  %88 = xor i64 %83, %85
  %89 = xor i64 %88, %71
  %90 = xor i64 %89, -5106121449510024143
  %91 = xor i64 %90, %68
  %92 = xor i64 %91, %73
  %93 = xor i64 %92, %87
  %94 = mul i64 %66, %93
  %95 = trunc i64 %94 to i32
  %96 = sext i32 %0 to i64
  %97 = and i64 %96, -8583153194273548945
  %98 = xor i64 %96, -1
  %99 = xor i64 -8583153194273548945, %98
  %100 = and i64 %99, -8583153194273548945
  %101 = sext i32 %6 to i64
  %102 = and i64 %101, 681446393542397899
  %103 = xor i64 %101, -1
  %104 = or i64 -681446393542397900, %103
  %105 = xor i64 %104, -1
  %106 = and i64 %105, -1
  %107 = sext i32 %0 to i64
  %108 = and i64 %107, -7413988593374794722
  %109 = xor i64 %107, -1
  %110 = or i64 7413988593374794721, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = xor i64 %100, %106
  %114 = xor i64 %113, %108
  %115 = xor i64 %114, %97
  %116 = xor i64 %115, -6161267019415446839
  %117 = xor i64 %116, %112
  %118 = xor i64 %117, %102
  %119 = sext i32 %0 to i64
  %120 = add i64 %119, 8939979324318200913
  %121 = sub i64 0, %119
  %122 = sub i64 8939979324318200913, %121
  %123 = sext i32 %0 to i64
  %124 = add i64 %123, -711641606575470049
  %125 = xor i64 -711641606575470049, %123
  %126 = and i64 -711641606575470049, %123
  %127 = mul i64 2, %126
  %128 = add i64 %125, %127
  %129 = xor i64 %120, %124
  %130 = xor i64 %129, %122
  %131 = xor i64 %130, 2594782801502642041
  %132 = xor i64 %131, %128
  %133 = mul i64 %118, %132
  %134 = trunc i64 %133 to i32
  %135 = select i1 %8, i32 %95, i32 %134
  br label %220

136:                                              ; preds = %4
  %137 = icmp eq i32 %5, %1
  %138 = sub nsw i32 %1, %5
  %139 = select i1 %137, i32 %138, i32 %5
  %140 = sext i32 %1 to i64
  %141 = or i64 %140, 4585155317162929103
  %142 = xor i64 %140, -1
  %143 = and i64 4585155317162929103, %142
  %144 = add i64 %143, %140
  %145 = sext i32 %6 to i64
  %146 = add i64 %145, -713128195236560483
  %147 = add i64 -9170168243770205338, %145
  %148 = sub i64 %147, -8457040048533644855
  %149 = sext i32 %1 to i64
  %150 = and i64 %149, -4079390797630916619
  %151 = or i64 4079390797630916618, %149
  %152 = sub i64 %151, 4079390797630916618
  %153 = xor i64 5793306580260021133, %146
  %154 = xor i64 %153, %144
  %155 = xor i64 %154, %141
  %156 = xor i64 %155, %148
  %157 = xor i64 %156, %150
  %158 = xor i64 %157, %152
  %159 = sext i32 %5 to i64
  %160 = and i64 %159, -7025315377476413955
  %161 = xor i64 %159, -1
  %162 = or i64 7025315377476413954, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = sext i32 %6 to i64
  %166 = add i64 %165, 93153623994090076
  %167 = and i64 93153623994090076, %165
  %168 = or i64 93153623994090076, %165
  %169 = add i64 %167, %168
  %170 = xor i64 %166, -8518761638686145073
  %171 = xor i64 %170, %160
  %172 = xor i64 %171, %169
  %173 = xor i64 %172, %164
  %174 = mul i64 %158, %173
  %175 = trunc i64 %174 to i32
  %176 = sext i32 %6 to i64
  %177 = or i64 %176, 2678878673347949380
  %178 = xor i64 %176, -1
  %179 = and i64 %178, 6422310447007683465
  %180 = and i64 %176, -6422310447007683466
  %181 = or i64 %179, %180
  %182 = xor i64 8939056638659813581, %181
  %183 = xor i64 %176, -1
  %184 = or i64 -2678878673347949381, %183
  %185 = xor i64 %184, -1
  %186 = and i64 %185, -1
  %187 = or i64 %182, %186
  %188 = sext i32 %6 to i64
  %189 = and i64 %188, -3313942290512975941
  %190 = or i64 3313942290512975940, %188
  %191 = sub i64 %190, 3313942290512975940
  %192 = xor i64 767359088125338163, %189
  %193 = xor i64 %192, %187
  %194 = xor i64 %193, %191
  %195 = xor i64 %194, %177
  %196 = sext i32 %5 to i64
  %197 = add i64 %196, 8837824509644046653
  %198 = add i64 6108483856897410822, %196
  %199 = sub i64 %198, -2729340652746635831
  %200 = sext i32 %6 to i64
  %201 = or i64 %200, -8765865442781648254
  %202 = xor i64 %200, -1
  %203 = and i64 -8765865442781648254, %202
  %204 = add i64 %203, %200
  %205 = sext i32 %6 to i64
  %206 = and i64 %205, 2179322610157446261
  %207 = xor i64 %205, -1
  %208 = or i64 -2179322610157446262, %207
  %209 = xor i64 %208, -1
  %210 = and i64 %209, -1
  %211 = xor i64 %201, %206
  %212 = xor i64 %211, %210
  %213 = xor i64 %212, 7787924778817016310
  %214 = xor i64 %213, %204
  %215 = xor i64 %214, %197
  %216 = xor i64 %215, %199
  %217 = mul i64 %195, %216
  %218 = trunc i64 %217 to i32
  %219 = select i1 %137, i32 %175, i32 %218
  br label %220

220:                                              ; preds = %223, %136, %7
  %221 = phi i32 [ %271, %223 ], [ %45, %7 ], [ %139, %136 ]
  %222 = phi i32 [ 3, %223 ], [ %135, %7 ], [ %219, %136 ]
  br label %4, !llvm.loop !10

223:                                              ; preds = %4
  %224 = sext i32 %6 to i64
  %225 = and i64 %224, -1463503918064776696
  %226 = xor i64 %224, -1
  %227 = or i64 1463503918064776695, %226
  %228 = xor i64 %227, -1
  %229 = and i64 %228, -1
  %230 = sext i32 %1 to i64
  %231 = and i64 %230, 7424747374216689326
  %232 = xor i64 %230, -1
  %233 = or i64 -7424747374216689327, %232
  %234 = xor i64 %233, -1
  %235 = and i64 %234, -1
  %236 = sext i32 %5 to i64
  %237 = and i64 %236, -6100315101514728039
  %238 = xor i64 %236, -1
  %239 = or i64 6100315101514728038, %238
  %240 = xor i64 %239, -1
  %241 = and i64 %240, -1
  %242 = xor i64 %241, 992406767139806609
  %243 = xor i64 %242, %225
  %244 = xor i64 %243, %237
  %245 = xor i64 %244, %229
  %246 = xor i64 %245, %235
  %247 = xor i64 %246, %231
  %248 = sext i32 %5 to i64
  %249 = add i64 %248, 4141862673804134986
  %250 = add i64 -7377079666177331497, %248
  %251 = add i64 %250, -6927801733728085133
  %252 = sext i32 %1 to i64
  %253 = add i64 %252, -1949750328378805402
  %254 = add i64 4905033130417880768, %252
  %255 = sub i64 %254, 6854783458796686170
  %256 = sext i32 %6 to i64
  %257 = add i64 %256, -7835452578360723513
  %258 = xor i64 -7835452578360723513, %256
  %259 = and i64 -7835452578360723513, %256
  %260 = mul i64 2, %259
  %261 = add i64 %258, %260
  %262 = xor i64 %261, %249
  %263 = xor i64 %262, %255
  %264 = xor i64 %263, %251
  %265 = xor i64 %264, %253
  %266 = xor i64 %265, %257
  %267 = xor i64 %266, 3767327623743439729
  %268 = mul i64 %247, %267
  %269 = trunc i64 %268 to i32
  %270 = shl i32 %5, %269
  %271 = sub i32 %270, %1
  br label %220

272:                                              ; preds = %4
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #0 {
  %3 = sext i32 %0 to i64
  %4 = or i64 %3, -8438956238952738170
  %5 = xor i64 %3, -1
  %6 = and i64 %5, -6596072911948284653
  %7 = and i64 %3, 6596072911948284652
  %8 = or i64 %6, %7
  %9 = xor i64 3356523819351748501, %8
  %10 = xor i64 %3, -1
  %11 = or i64 8438956238952738169, %10
  %12 = xor i64 %11, -1
  %13 = and i64 %12, -1
  %14 = or i64 %9, %13
  %15 = sext i32 %0 to i64
  %16 = or i64 %15, -5418305147434309017
  %17 = and i64 -5418305147434309017, %15
  %18 = xor i64 -5418305147434309017, %15
  %19 = or i64 %17, %18
  %20 = sext i32 %0 to i64
  %21 = add i64 %20, 6245794240131600726
  %22 = add i64 -5256658327826141405, %20
  %23 = sub i64 %22, 6944291505751809485
  %24 = xor i64 %16, %21
  %25 = xor i64 %24, %14
  %26 = xor i64 %25, -8979398131682542311
  %27 = xor i64 %26, %23
  %28 = xor i64 %27, %4
  %29 = xor i64 %28, %19
  %30 = sext i32 %0 to i64
  %31 = or i64 %30, -7005293192746157764
  %32 = and i64 -7005293192746157764, %30
  %33 = xor i64 -7005293192746157764, %30
  %34 = or i64 %32, %33
  %35 = sext i32 %0 to i64
  %36 = and i64 %35, 3416707967327220950
  %37 = xor i64 %35, -1
  %38 = xor i64 3416707967327220950, %37
  %39 = and i64 %38, 3416707967327220950
  %40 = sext i32 %0 to i64
  %41 = add i64 %40, -4551445037405923882
  %42 = add i64 -7863459377856552657, %40
  %43 = add i64 %42, 3312014340450628775
  %44 = xor i64 %39, %31
  %45 = xor i64 %44, %43
  %46 = xor i64 %45, %34
  %47 = xor i64 %46, %36
  %48 = xor i64 %47, -6204517074841738393
  %49 = xor i64 %48, %41
  %50 = mul i64 %29, %49
  %51 = trunc i64 %50 to i32
  %52 = sext i32 %0 to i64
  %53 = add i64 %52, -2373615433786401609
  %54 = xor i64 -2373615433786401609, %52
  %55 = and i64 -2373615433786401609, %52
  %56 = mul i64 2, %55
  %57 = add i64 %54, %56
  %58 = sext i32 %0 to i64
  %59 = add i64 %58, 3481580494660952596
  %60 = add i64 39848829868422839, %58
  %61 = add i64 %60, 3441731664792529757
  %62 = sext i32 %0 to i64
  %63 = or i64 %62, 9180327098600862808
  %64 = xor i64 %62, -1
  %65 = and i64 9180327098600862808, %64
  %66 = add i64 %65, %62
  %67 = xor i64 %66, %57
  %68 = xor i64 %67, %53
  %69 = xor i64 %68, %63
  %70 = xor i64 %69, 6389018053581655817
  %71 = xor i64 %70, %61
  %72 = xor i64 %71, %59
  %73 = sext i32 %0 to i64
  %74 = or i64 %73, -3803302419606665787
  %75 = and i64 -3803302419606665787, %73
  %76 = xor i64 -3803302419606665787, %73
  %77 = or i64 %75, %76
  %78 = sext i32 %0 to i64
  %79 = add i64 %78, 5847174389826366014
  %80 = add i64 3646463650876603512, %78
  %81 = sub i64 %80, -2200710738949762502
  %82 = sext i32 %0 to i64
  %83 = add i64 %82, 4728071978038165961
  %84 = add i64 -1477500571341933400, %82
  %85 = add i64 %84, 6205572549380099361
  %86 = xor i64 %83, %74
  %87 = xor i64 %86, %79
  %88 = xor i64 %87, %81
  %89 = xor i64 %88, %85
  %90 = xor i64 %89, -6354123836621988719
  %91 = xor i64 %90, %77
  %92 = mul i64 %72, %91
  %93 = trunc i64 %92 to i32
  %94 = call i32 @_Z6decideii(i32 %51, i32 %93)
  ret i32 %94
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.unroll.disable"}
