digraph "CFG for 'update' function" {
	label="CFG for 'update' function";

	Node0x6000035e21c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{entry:\l  %.reg2mem4 = alloca i32, align 4\l  %.reg2mem2 = alloca i1, align 1\l  %.reg2mem = alloca i1, align 1\l  %lookupTable = alloca [8 x i32], align 4\l  %2 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0\l  store i32 -3, i32* %2, align 4\l  %3 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1\l  store i32 -2, i32* %3, align 4\l  %4 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2\l  store i32 -1, i32* %4, align 4\l  %5 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3\l  store i32 0, i32* %5, align 4\l  %6 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4\l  store i32 1, i32* %6, align 4\l  %7 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5\l  store i32 2, i32* %7, align 4\l  %8 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6\l  store i32 3, i32* %8, align 4\l  %9 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7\l  store i32 4, i32* %9, align 4\l  %10 = icmp eq float* %0, null\l  store i1 %10, i1* %.reg2mem, align 1\l  %11 = icmp eq float* %1, null\l  store i1 %11, i1* %.reg2mem2, align 1\l  %dispatcher = alloca i32, align 4\l  store i32 0, i32* %dispatcher, align 4\l  br label %loopStart\l}"];
	Node0x6000035e21c0 -> Node0x6000035e2200;
	Node0x6000035e2200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{loopStart:                                        \l  %dispatcher1 = load i32, i32* %dispatcher, align 4\l  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [\l    i32 0, label %EntryBasicBlockSplit\l    i32 1, label %24\l    i32 2, label %38\l    i32 3, label %BogusBasicBlock\l  ]\l|{<s0>def|<s1>0|<s2>1|<s3>2|<s4>3}}"];
	Node0x6000035e2200:s0 -> Node0x6000035e2240;
	Node0x6000035e2200:s1 -> Node0x6000035e2280;
	Node0x6000035e2200:s2 -> Node0x6000035e22c0;
	Node0x6000035e2200:s3 -> Node0x6000035e2340;
	Node0x6000035e2200:s4 -> Node0x6000035e23c0;
	Node0x6000035e2280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{EntryBasicBlockSplit:                             \l  %.reload = load i1, i1* %.reg2mem, align 1\l  %.reload3 = load i1, i1* %.reg2mem2, align 1\l  %12 = select i1 %.reload, i1 true, i1 %.reload3\l  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5\l  %14 = load i32, i32* %13, align 4\l  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3\l  %16 = load i32, i32* %15, align 4\l  %17 = add i32 %14, %16\l  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4\l  %19 = load i32, i32* %18, align 4\l  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7\l  %21 = load i32, i32* %20, align 4\l  %22 = srem i32 %19, %21\l  %23 = select i1 %12, i32 %17, i32 %22\l  store i32 %23, i32* %dispatcher, align 4\l  store i32 2, i32* %.reg2mem4, align 4\l  br label %loopEnd\l}"];
	Node0x6000035e2280 -> Node0x6000035e2400;
	Node0x6000035e22c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{%24:\l24:                                               \l  %25 = load float, float* %0, align 4, !tbaa !10\l  %26 = fpext float %25 to double\l  %27 = fadd double %26, 4.000000e-05\l  %28 = fptrunc double %27 to float\l  store float %28, float* %0, align 4, !tbaa !10\l  %29 = load float, float* %1, align 4, !tbaa !10\l  %30 = fpext float %29 to double\l  %31 = fadd double %30, 2.000000e-05\l  %32 = fptrunc double %31 to float\l  store float %32, float* %1, align 4, !tbaa !10\l  %33 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4\l  %34 = load i32, i32* %33, align 4\l  %35 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2\l  %36 = load i32, i32* %35, align 4\l  %37 = sub i32 %34, %36\l  store i32 %37, i32* %dispatcher, align 4\l  store i32 0, i32* %.reg2mem4, align 4\l  br label %loopEnd\l}"];
	Node0x6000035e22c0 -> Node0x6000035e2400;
	Node0x6000035e2340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%38:\l38:                                               \l  %.reload5 = load i32, i32* %.reg2mem4, align 4\l  ret i32 %.reload5\l}"];
	Node0x6000035e23c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{BogusBasicBlock:                                  \l  %39 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0\l  store i32 -1, i32* %39, align 4\l  %40 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2\l  store i32 1, i32* %40, align 4\l  %41 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4\l  store i32 3, i32* %41, align 4\l  %42 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6\l  store i32 5, i32* %42, align 4\l  %43 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0\l  %44 = load i32, i32* %43, align 4\l  store i32 %44, i32* %dispatcher, align 4\l  br label %EntryBasicBlockSplit\l}"];
	Node0x6000035e23c0 -> Node0x6000035e2280;
	Node0x6000035e2240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ef886b70",label="{defaultSwitchBasicBlock:                          \l  br label %loopEnd\l}"];
	Node0x6000035e2240 -> Node0x6000035e2400;
	Node0x6000035e2400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{loopEnd:                                          \l  br label %loopStart\l}"];
	Node0x6000035e2400 -> Node0x6000035e2200;
}
