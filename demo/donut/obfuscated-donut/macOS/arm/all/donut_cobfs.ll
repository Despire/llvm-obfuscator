; ModuleID = './donut_substitution.ll'
source_filename = "donut_deobfuscated.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@Z_SIZE = local_unnamed_addr constant i64 1760, align 8
@B_SIZE = local_unnamed_addr constant i64 1760, align 8
@WAIT_TIME = local_unnamed_addr constant i64 30000, align 8
@.str = private unnamed_addr global [13 x i8] c"\01\01\01\00\00\00\00\00\01\01\00\01\00", align 1
@CHARS = local_unnamed_addr global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr global [5 x i8] c"\00\01\01\01\01", align 1
@.str.2 = private unnamed_addr global [4 x i8] c"\00\00\01\01", align 1
@obfsfuncAddrLookupTable1089487772040816285 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable158318506353328179 = private global [14 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10165329826716484505 = private global [5 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3834657715494109575 = private global [21 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7222083486153558644 = private global [21 x i8*] zeroinitializer
@obfsfuncAddrLookupTable14936983426752459058 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable18293723675824487353 = private global [4 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2137045860480766185 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable16508952818686298381 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable661054169283609905 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3263059483920280765 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable15872309927006380141 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11254744462274370258 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13610838496713195053 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7946610297334770699 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable14921214450106092310 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2676540328822753780 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13930894579797800242 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable14804151815533204912 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1582770808220149332 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1008750604835695442 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable4439605908938760544 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable8394725189750568945 = private global [3 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5603075018834282146 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13246253495866921194 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10519794407393913923 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable18139037964304201484 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7927533323930379990 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2001930920301229235 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7635078272535982493 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11568173901483765685 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11073436793896439777 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11542178627540477363 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7942542406399699170 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2124429793559527863 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12197573581419751257 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6678268903096122989 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11614317241804279208 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5701602599771018107 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12279660055629207190 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5394018512801838177 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable16975137384401352206 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable9270819550216953813 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3104023660497480400 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1872332816392812891 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable8397835548565163023 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1228217607110177373 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1819560383262807543 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12395021631910078423 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable466230988663405414 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11450567809067022175 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6801622834913932444 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable4787608969622056690 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10345614790745952775 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable8730671779138474223 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2282200235023931699 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12747837976195886284 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable14417565406211868142 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable9397402919615645715 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10017737418098223963 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6864560605196664741 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6670628566329903666 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5994868871536864535 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1786965691037181812 = private global [1 x i8*] zeroinitializer
@obfsblockAddrLookupTable14602772856972359921 = private global [64 x i8*] zeroinitializer
@obfsblockAddrLookupTable1675382302700983680 = private global [8 x i8*] zeroinitializer
@obfsblockAddrLookupTable7023837512976842738 = private global [65 x i8*] zeroinitializer
@obfsblockAddrLookupTable10333322412831550620 = private global [15 x i8*] zeroinitializer
@obfsblockAddrLookupTable17975729477749297177 = private global [51 x i8*] zeroinitializer
@obfsblockAddrLookupTable7806922215650597966 = private global [53 x i8*] zeroinitializer
@obfsblockAddrLookupTable5681188989244187324 = private global [19 x i8*] zeroinitializer
@obfsblockAddrLookupTable627280723735628316 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable12142388729970394614 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable18069468935861293036 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable13671396500338455014 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable10395363378856985495 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable2059185066680446929 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable2490446019641129485 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable5538191963925840052 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable10542299481062128749 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable3344898759500944034 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable721320004813605145 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable6411101475104065434 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable18311079036208169777 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable9651444969545546290 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable869952976517638611 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable17483817777465953375 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable7073427795398676039 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable18070328068862507537 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable607629558949487478 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable10639372946606728569 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable17442865676092226486 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable4767101006511538369 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable4295862735387337237 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable5256400659331720855 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable1542317342180117104 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable110712339244340611 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable7151764222053429975 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable12568258043102494611 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable10214129599215908645 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable3216832321708071451 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable4045253587417335053 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable8013969641835849439 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable9583133371259958317 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable15945169503269941469 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable8379073977622402907 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable8792233532497471479 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable15072500868116077034 = private global [3 x i8*] zeroinitializer
@obfsblockAddrLookupTable7566136434962294925 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable7146363402020245244 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable4742261919227970024 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable18162914415852497466 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable6415106747569470537 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable4883168609508392360 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable15774460795949983293 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable3877704362992657921 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable8775210668299724181 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable5729685810929087705 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable5017855980880175355 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable18196541893470973885 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable14803168233408389419 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable12012081229678312772 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable4658091490867282012 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable12851308745052110949 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable8483248504687110788 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable11119709064161687412 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable13306541676709936060 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable9864388630873030894 = private global [4 x i8*] zeroinitializer
@obfsblockAddrLookupTable6614939931088871305 = private global [4 x i8*] zeroinitializer
@llvm.compiler.used = appending global [260 x i8*] [i8* bitcast (i64 (i64)* @m4181846979565521366 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable1089487772040816285 to i8*), i8* bitcast (i8** (i64*)* @lk15143322792737984910 to i8*), i8* bitcast ([14 x i8*]* @obfsfuncAddrLookupTable158318506353328179 to i8*), i8* bitcast (i8** (i64*)* @lk8153326119118101986 to i8*), i8* bitcast ([5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505 to i8*), i8* bitcast (i8** (i64*)* @lk17093456354810283869 to i8*), i8* bitcast ([21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575 to i8*), i8* bitcast (i8** (i64*)* @lk1336881106680510526 to i8*), i8* bitcast ([21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644 to i8*), i8* bitcast (i8** (i64*)* @lk9254909843318351582 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable14936983426752459058 to i8*), i8* bitcast (i8** (i64*)* @lk2528754644522447028 to i8*), i8* bitcast ([4 x i8*]* @obfsfuncAddrLookupTable18293723675824487353 to i8*), i8* bitcast (i8** (i64*)* @lk12478154414877683305 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2137045860480766185 to i8*), i8* bitcast (i8** (i64*)* @lk15516825027481801371 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable16508952818686298381 to i8*), i8* bitcast (i8** (i64*)* @lk7062456313021011374 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable661054169283609905 to i8*), i8* bitcast (i8** (i64*)* @lk10020772496071677461 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable3263059483920280765 to i8*), i8* bitcast (i8** (i64*)* @lk15283925730859341009 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable15872309927006380141 to i8*), i8* bitcast (i8** (i64*)* @lk13043518718726078595 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11254744462274370258 to i8*), i8* bitcast (i8** (i64*)* @lk10323673655277611966 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13610838496713195053 to i8*), i8* bitcast (i8** (i64*)* @lk9507439604238316874 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7946610297334770699 to i8*), i8* bitcast (i8** (i64*)* @lk574401168482893006 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable14921214450106092310 to i8*), i8* bitcast (i8** (i64*)* @lk17710973302758990871 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2676540328822753780 to i8*), i8* bitcast (i8** (i64*)* @lk13131460919683370831 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13930894579797800242 to i8*), i8* bitcast (i8** (i64*)* @lk7850175081304604761 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable14804151815533204912 to i8*), i8* bitcast (i8** (i64*)* @lk18433947796118248817 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1582770808220149332 to i8*), i8* bitcast (i8** (i64*)* @lk2210454470600176687 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1008750604835695442 to i8*), i8* bitcast (i8** (i64*)* @lk16846511957834172191 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable4439605908938760544 to i8*), i8* bitcast (i8** (i64*)* @lk17754232458190986103 to i8*), i8* bitcast ([3 x i8*]* @obfsfuncAddrLookupTable8394725189750568945 to i8*), i8* bitcast (i8** (i64*)* @lk6905989959671697645 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable5603075018834282146 to i8*), i8* bitcast (i8** (i64*)* @lk11019626905570507809 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13246253495866921194 to i8*), i8* bitcast (i8** (i64*)* @lk6906225544584497095 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable10519794407393913923 to i8*), i8* bitcast (i8** (i64*)* @lk15254634105568956878 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable18139037964304201484 to i8*), i8* bitcast (i8** (i64*)* @lk14415857824142216237 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7927533323930379990 to i8*), i8* bitcast (i8** (i64*)* @lk17728768479695395648 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2001930920301229235 to i8*), i8* bitcast (i8** (i64*)* @lk6590627545456677261 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7635078272535982493 to i8*), i8* bitcast (i8** (i64*)* @lk6996706366312423136 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11568173901483765685 to i8*), i8* bitcast (i8** (i64*)* @lk14541245032599740191 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11073436793896439777 to i8*), i8* bitcast (i8** (i64*)* @lk7953750587911823265 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11542178627540477363 to i8*), i8* bitcast (i8** (i64*)* @lk6494449342842820069 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7942542406399699170 to i8*), i8* bitcast (i8** (i64*)* @lk1932705876204994384 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2124429793559527863 to i8*), i8* bitcast (i8** (i64*)* @lk4227238758197037501 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable12197573581419751257 to i8*), i8* bitcast (i8** (i64*)* @lk9085697242675703551 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable6678268903096122989 to i8*), i8* bitcast (i8** (i64*)* @lk5239088532693830486 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11614317241804279208 to i8*), i8* bitcast (i8** (i64*)* @lk4462616265759468068 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable5701602599771018107 to i8*), i8* bitcast (i8** (i64*)* @lk2361039735857797459 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable12279660055629207190 to i8*), i8* bitcast (i8** (i64*)* @lk8862629089039270275 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable5394018512801838177 to i8*), i8* bitcast (i8** (i64*)* @lk628540616057857234 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable16975137384401352206 to i8*), i8* bitcast (i8** (i64*)* @lk6873818407714615644 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable9270819550216953813 to i8*), i8* bitcast (i8** (i64*)* @lk6906303440313898649 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable3104023660497480400 to i8*), i8* bitcast (i8** (i64*)* @lk379752535366543268 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1872332816392812891 to i8*), i8* bitcast (i8** (i64*)* @lk4630455211724975250 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable8397835548565163023 to i8*), i8* bitcast (i8** (i64*)* @lk416499455634074828 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1228217607110177373 to i8*), i8* bitcast (i8** (i64*)* @lk18308803058659636891 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1819560383262807543 to i8*), i8* bitcast (i8** (i64*)* @lk2605295399637884959 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable12395021631910078423 to i8*), i8* bitcast (i8** (i64*)* @lk733164823360870755 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable466230988663405414 to i8*), i8* bitcast (i8** (i64*)* @lk263679519223026857 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11450567809067022175 to i8*), i8* bitcast (i8** (i64*)* @lk330495605987470769 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable6801622834913932444 to i8*), i8* bitcast (i8** (i64*)* @lk3651362651451987676 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable4787608969622056690 to i8*), i8* bitcast (i8** (i64*)* @lk10773722924660164129 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable10345614790745952775 to i8*), i8* bitcast (i8** (i64*)* @lk6232502509854216282 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable8730671779138474223 to i8*), i8* bitcast (i8** (i64*)* @lk16264275912986551985 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2282200235023931699 to i8*), i8* bitcast (i8** (i64*)* @lk14624544468785892217 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable12747837976195886284 to i8*), i8* bitcast (i8** (i64*)* @lk783237237269819673 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable14417565406211868142 to i8*), i8* bitcast (i8** (i64*)* @lk12603504826973659978 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable9397402919615645715 to i8*), i8* bitcast (i8** (i64*)* @lk9467855542099712350 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable10017737418098223963 to i8*), i8* bitcast (i8** (i64*)* @lk2847145900876727517 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable6864560605196664741 to i8*), i8* bitcast (i8** (i64*)* @lk15015715335973622966 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable6670628566329903666 to i8*), i8* bitcast (i8** (i64*)* @lk8071742946585926715 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable5994868871536864535 to i8*), i8* bitcast (i8** (i64*)* @lk2567203579303046852 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1786965691037181812 to i8*), i8* bitcast (i8** (i64*)* @lk12700749691518738181 to i8*), i8* bitcast (i64 (i64)* @h6542867261474098886 to i8*), i8* bitcast ([64 x i8*]* @obfsblockAddrLookupTable14602772856972359921 to i8*), i8* bitcast (i8** (i32*)* @bf6338069988336422972 to i8*), i8* bitcast ([8 x i8*]* @obfsblockAddrLookupTable1675382302700983680 to i8*), i8* bitcast (i8** (i32*)* @bf11363924245358311224 to i8*), i8* bitcast ([65 x i8*]* @obfsblockAddrLookupTable7023837512976842738 to i8*), i8* bitcast (i8** (i32*)* @bf6047435729067610447 to i8*), i8* bitcast ([15 x i8*]* @obfsblockAddrLookupTable10333322412831550620 to i8*), i8* bitcast (i8** (i32*)* @bf16388050368864114983 to i8*), i8* bitcast ([51 x i8*]* @obfsblockAddrLookupTable17975729477749297177 to i8*), i8* bitcast (i8** (i32*)* @bf3690775341412318723 to i8*), i8* bitcast ([53 x i8*]* @obfsblockAddrLookupTable7806922215650597966 to i8*), i8* bitcast (i8** (i32*)* @bf7763123487515004013 to i8*), i8* bitcast ([19 x i8*]* @obfsblockAddrLookupTable5681188989244187324 to i8*), i8* bitcast (i8** (i32*)* @bf17181708843024921859 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable627280723735628316 to i8*), i8* bitcast (i8** (i32*)* @bf17581931123197219510 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable12142388729970394614 to i8*), i8* bitcast (i8** (i32*)* @bf2569683251699683914 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable18069468935861293036 to i8*), i8* bitcast (i8** (i32*)* @bf17157896522806037044 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable13671396500338455014 to i8*), i8* bitcast (i8** (i32*)* @bf3182636109140662499 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable10395363378856985495 to i8*), i8* bitcast (i8** (i32*)* @bf5922628416545449076 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable2059185066680446929 to i8*), i8* bitcast (i8** (i32*)* @bf8275677406198937660 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable2490446019641129485 to i8*), i8* bitcast (i8** (i32*)* @bf16247341047232784373 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable5538191963925840052 to i8*), i8* bitcast (i8** (i32*)* @bf12628453140567268413 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable10542299481062128749 to i8*), i8* bitcast (i8** (i32*)* @bf2764126284152288184 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable3344898759500944034 to i8*), i8* bitcast (i8** (i32*)* @bf18153841645268142413 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable721320004813605145 to i8*), i8* bitcast (i8** (i32*)* @bf13060471314557800498 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable6411101475104065434 to i8*), i8* bitcast (i8** (i32*)* @bf7851453730528659025 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable18311079036208169777 to i8*), i8* bitcast (i8** (i32*)* @bf8242492124939957577 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable9651444969545546290 to i8*), i8* bitcast (i8** (i32*)* @bf14057770961472521071 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable869952976517638611 to i8*), i8* bitcast (i8** (i32*)* @bf4423765630577650784 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable17483817777465953375 to i8*), i8* bitcast (i8** (i32*)* @bf8865144524772024419 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable7073427795398676039 to i8*), i8* bitcast (i8** (i32*)* @bf15416862713012807793 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable18070328068862507537 to i8*), i8* bitcast (i8** (i32*)* @bf1662976488351824164 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable607629558949487478 to i8*), i8* bitcast (i8** (i32*)* @bf16763515590375349614 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable10639372946606728569 to i8*), i8* bitcast (i8** (i32*)* @bf10111600441450393745 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable17442865676092226486 to i8*), i8* bitcast (i8** (i32*)* @bf12854391879425916569 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable4767101006511538369 to i8*), i8* bitcast (i8** (i32*)* @bf16412650203074185332 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable4295862735387337237 to i8*), i8* bitcast (i8** (i32*)* @bf2542622646541168406 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable5256400659331720855 to i8*), i8* bitcast (i8** (i32*)* @bf1061434821978349071 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable1542317342180117104 to i8*), i8* bitcast (i8** (i32*)* @bf14701068836225390076 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable110712339244340611 to i8*), i8* bitcast (i8** (i32*)* @bf13929252136177070272 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable7151764222053429975 to i8*), i8* bitcast (i8** (i32*)* @bf11856947853498104389 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable12568258043102494611 to i8*), i8* bitcast (i8** (i32*)* @bf8839532275006299043 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable10214129599215908645 to i8*), i8* bitcast (i8** (i32*)* @bf4375101210048835390 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable3216832321708071451 to i8*), i8* bitcast (i8** (i32*)* @bf7541961726349755274 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable4045253587417335053 to i8*), i8* bitcast (i8** (i32*)* @bf17124241044688097502 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable8013969641835849439 to i8*), i8* bitcast (i8** (i32*)* @bf6667396463122897288 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable9583133371259958317 to i8*), i8* bitcast (i8** (i32*)* @bf861539622850162277 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable15945169503269941469 to i8*), i8* bitcast (i8** (i32*)* @bf7835958905179672536 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable8379073977622402907 to i8*), i8* bitcast (i8** (i32*)* @bf12112455805171328756 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable8792233532497471479 to i8*), i8* bitcast (i8** (i32*)* @bf9625773503618811097 to i8*), i8* bitcast ([3 x i8*]* @obfsblockAddrLookupTable15072500868116077034 to i8*), i8* bitcast (i8** (i32*)* @bf7593563620049415213 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable7566136434962294925 to i8*), i8* bitcast (i8** (i32*)* @bf5553753146581063602 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable7146363402020245244 to i8*), i8* bitcast (i8** (i32*)* @bf10580636527388110965 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable4742261919227970024 to i8*), i8* bitcast (i8** (i32*)* @bf7762184481881667074 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable18162914415852497466 to i8*), i8* bitcast (i8** (i32*)* @bf6596980413736034409 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable6415106747569470537 to i8*), i8* bitcast (i8** (i32*)* @bf1524551660851897346 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable4883168609508392360 to i8*), i8* bitcast (i8** (i32*)* @bf9670062208140280490 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable15774460795949983293 to i8*), i8* bitcast (i8** (i32*)* @bf3925661578790816960 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable3877704362992657921 to i8*), i8* bitcast (i8** (i32*)* @bf14887632971262094281 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable8775210668299724181 to i8*), i8* bitcast (i8** (i32*)* @bf2316937588321097812 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable5729685810929087705 to i8*), i8* bitcast (i8** (i32*)* @bf6276024088074375969 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable5017855980880175355 to i8*), i8* bitcast (i8** (i32*)* @bf10859602166879710780 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable18196541893470973885 to i8*), i8* bitcast (i8** (i32*)* @bf7438893577993244349 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable14803168233408389419 to i8*), i8* bitcast (i8** (i32*)* @bf9393873928285995723 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable12012081229678312772 to i8*), i8* bitcast (i8** (i32*)* @bf15059041393394650618 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable4658091490867282012 to i8*), i8* bitcast (i8** (i32*)* @bf8956670186687295878 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable12851308745052110949 to i8*), i8* bitcast (i8** (i32*)* @bf405698465177500870 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable8483248504687110788 to i8*), i8* bitcast (i8** (i32*)* @bf16488349645348535505 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable11119709064161687412 to i8*), i8* bitcast (i8** (i32*)* @bf17851141059802040221 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable13306541676709936060 to i8*), i8* bitcast (i8** (i32*)* @bf8213767146710455205 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable9864388630873030894 to i8*), i8* bitcast (i8** (i32*)* @bf9302465224130596104 to i8*), i8* bitcast ([4 x i8*]* @obfsblockAddrLookupTable6614939931088871305 to i8*), i8* bitcast (i8** (i32*)* @bf9847471633196389420 to i8*)], section "llvm.metadata"
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @init2136336765189503303, i8* null }]

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind ssp willreturn uwtable
define i32 @update(float* %0, float* %1) local_unnamed_addr #0 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876143)
  %4 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %3
  store i8* blockaddress(@update, %loopEnd), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %5
  store i8* blockaddress(@update, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876136)
  %8 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %7
  store i8* blockaddress(@update, %217), i8** %8, align 8
  %9 = call i64 @h6542867261474098886(i64 984876140)
  %10 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %9
  store i8* blockaddress(@update, %defaultSwitchBasicBlock), i8** %10, align 8
  %11 = call i64 @h6542867261474098886(i64 984876137)
  %12 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %11
  store i8* blockaddress(@update, %codeRepl), i8** %12, align 8
  %13 = call i64 @h6542867261474098886(i64 984876141)
  %14 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %13
  store i8* blockaddress(@update, %codeRepl1), i8** %14, align 8
  %15 = call i64 @h6542867261474098886(i64 984876139)
  %16 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %15
  store i8* blockaddress(@update, %loopStart), i8** %16, align 8
  %17 = alloca i64, align 8
  %18 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %19 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable1089487772040816285, i32 0, i64 %18
  store i8* bitcast (void (i1*, i1*, [8 x i32]*, i32*, i32*)* @update.EntryBasicBlockSplit to i8*), i8** %19, align 8
  %20 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %21 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable1089487772040816285, i32 0, i64 %20
  store i8* bitcast (void (float*, float*, [8 x i32]*, i32*, i32*)* @update.extracted to i8*), i8** %21, align 8
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i1, align 1
  %lookupTable = alloca [8 x i32], align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %22, align 4
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %23, align 4
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %24, align 4
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %27, align 4
  %28 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %28, align 4
  %29 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %29, align 4
  %30 = icmp eq float* %0, null
  store i1 %30, i1* %.reg2mem, align 1
  %31 = icmp eq float* %1, null
  store i1 %31, i1* %.reg2mem2, align 1
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 984876139, i32* %2, align 4
  %32 = call i8** @bf11363924245358311224(i32* %2)
  %33 = load i8*, i8** %32, align 8
  indirectbr i8* %33, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %codeRepl
    i32 1, label %codeRepl1
    i32 2, label %217
    i32 3, label %BogusBasicBlock
  ]

codeRepl:                                         ; preds = %BogusBasicBlock, %codeRepl, %loopStart
  store i64 4070807658626890126, i64* %17, align 8
  %34 = call i8** @lk15143322792737984910(i64* %17)
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to void (i1*, i1*, [8 x i32]*, i32*, i32*)*
  call void %36(i1* %.reg2mem, i1* %.reg2mem2, [8 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem4)
  %37 = load i8*, i8** %14, align 8
  %38 = load i8, i8* %37, align 1
  %39 = add i64 %18, -6780636785792341717
  %40 = and i64 -6780636785792341717, %18
  %41 = or i64 -6780636785792341717, %18
  %42 = add i64 %40, %41
  %43 = sext i32 %dispatcher1 to i64
  %44 = or i64 %43, 1287886133243834887
  %45 = xor i64 %43, -1
  %46 = and i64 %45, -6985810015615251530
  %47 = and i64 %43, 6985810015615251529
  %48 = or i64 %46, %47
  %49 = xor i64 -8155430339531671119, %48
  %50 = xor i64 %43, -1
  %51 = or i64 -1287886133243834888, %50
  %52 = xor i64 %51, -1
  %53 = and i64 %52, -1
  %54 = or i64 %49, %53
  %55 = xor i64 -5996515905437586733, %39
  %56 = xor i64 %55, %54
  %57 = xor i64 %56, %42
  %58 = xor i64 %57, %44
  %59 = or i64 %13, -5742657910170220333
  %60 = xor i64 %13, -1
  %61 = and i64 -5742657910170220333, %60
  %62 = add i64 %61, %13
  %63 = add i64 %18, -791959732256032297
  %64 = add i64 -5604752831099172614, %18
  %65 = sub i64 %64, -4812793098843140317
  %66 = or i64 %20, -5603141631509749564
  %67 = xor i64 %20, -1
  %68 = and i64 -5603141631509749564, %67
  %69 = add i64 %68, %20
  %70 = xor i64 %69, %59
  %71 = xor i64 %70, -4688621996682478922
  %72 = xor i64 %71, %66
  %73 = xor i64 %72, %63
  %74 = xor i64 %73, %62
  %75 = xor i64 %74, %65
  %76 = mul i64 %58, %75
  %77 = trunc i64 %76 to i8
  %78 = mul i8 %38, %77
  %79 = mul i8 %38, 2
  %80 = add i8 2, %79
  %81 = mul i8 %78, %80
  %82 = srem i8 %81, 4
  %83 = icmp eq i8 %82, 0
  %84 = mul i8 %38, %38
  %85 = mul i8 %84, %38
  %86 = add i8 %85, %38
  %87 = srem i8 %86, 2
  %88 = icmp eq i8 %87, 0
  %89 = and i1 %83, %88
  %90 = select i1 %89, i32 984876139, i32 984876143
  %91 = add i64 %5, 8487701175190862881
  %92 = sub i64 0, %5
  %93 = add i64 -8487701175190862881, %92
  %94 = sub i64 0, %93
  %95 = and i64 %15, 5402038109621873821
  %96 = xor i64 %15, -1
  %97 = xor i64 5402038109621873821, %96
  %98 = and i64 %97, 5402038109621873821
  %99 = sext i32 %dispatcher1 to i64
  %100 = add i64 %99, 124925891100036283
  %101 = add i64 1136645147783952594, %99
  %102 = sub i64 %101, 1011719256683916311
  %103 = xor i64 %102, %94
  %104 = xor i64 %103, -7284617700565026107
  %105 = xor i64 %104, %98
  %106 = xor i64 %105, %91
  %107 = xor i64 %106, %100
  %108 = xor i64 %107, %95
  %109 = or i64 %13, -7592807606308156472
  %110 = xor i64 %13, -1
  %111 = and i64 %110, -6576609056808928140
  %112 = and i64 %13, 6576609056808928139
  %113 = or i64 %111, %112
  %114 = xor i64 3610722921465984956, %113
  %115 = xor i64 %13, -1
  %116 = or i64 7592807606308156471, %115
  %117 = xor i64 %116, -1
  %118 = and i64 %117, -1
  %119 = or i64 %114, %118
  %120 = and i64 %20, -8534965557381418079
  %121 = xor i64 %20, -1
  %122 = or i64 8534965557381418078, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = xor i64 %109, %120
  %126 = xor i64 %125, %124
  %127 = xor i64 %126, %119
  %128 = xor i64 %127, -2904244785872383948
  %129 = mul i64 %108, %128
  %130 = trunc i64 %129 to i32
  %131 = xor i32 %90, %130
  store i32 %131, i32* %2, align 4
  %132 = call i8** @bf11363924245358311224(i32* %2)
  %133 = load i8*, i8** %132, align 8
  indirectbr i8* %133, [label %loopEnd, label %codeRepl]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 4070807658626890127, i64* %17, align 8
  %134 = call i8** @lk15143322792737984910(i64* %17)
  %135 = load i8*, i8** %134, align 8
  %136 = bitcast i8* %135 to void (float*, float*, [8 x i32]*, i32*, i32*)*
  call void %136(float* %0, float* %1, [8 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem4)
  %137 = load i8*, i8** %12, align 8
  %138 = load i8, i8* %137, align 1
  %139 = mul i8 %138, %138
  %140 = sub i8 0, %139
  %141 = sub i8 0, %138
  %142 = add i8 %140, %141
  %143 = sub i8 0, %142
  %144 = mul i8 %143, 3
  %145 = or i64 %13, -7984201729273966848
  %146 = xor i64 %13, -1
  %147 = and i64 -7984201729273966848, %146
  %148 = add i64 %147, %13
  %149 = add i64 %20, -3608744828224742130
  %150 = and i64 -3608744828224742130, %20
  %151 = or i64 -3608744828224742130, %20
  %152 = add i64 %150, %151
  %153 = xor i64 %145, %152
  %154 = xor i64 %153, -4717870588448077429
  %155 = xor i64 %154, %148
  %156 = xor i64 %155, %149
  %157 = and i64 %5, -5708357704830113498
  %158 = xor i64 %5, -1
  %159 = xor i64 -5708357704830113498, %158
  %160 = and i64 %159, -5708357704830113498
  %161 = or i64 %20, -1163221123523644632
  %162 = xor i64 %20, -1
  %163 = and i64 %162, 2140886535766887183
  %164 = and i64 %20, -2140886535766887184
  %165 = or i64 %163, %164
  %166 = xor i64 -977672016898738137, %165
  %167 = xor i64 %20, -1
  %168 = or i64 1163221123523644631, %167
  %169 = xor i64 %168, -1
  %170 = and i64 %169, -1
  %171 = or i64 %166, %170
  %172 = xor i64 %171, %160
  %173 = xor i64 %172, %161
  %174 = xor i64 %173, 4874943742723271750
  %175 = xor i64 %174, %157
  %176 = mul i64 %156, %175
  %177 = trunc i64 %176 to i8
  %178 = srem i8 %144, %177
  %179 = icmp eq i8 %178, 0
  %180 = mul i8 %138, %138
  %181 = add i8 %180, %138
  %182 = srem i8 %181, 2
  %183 = icmp eq i8 %182, 0
  %184 = and i1 %179, %183
  %185 = and i64 %7, 1503776144674869476
  %186 = or i64 -1503776144674869477, %7
  %187 = sub i64 %186, -1503776144674869477
  %188 = and i64 %11, -480889612166198684
  %189 = xor i64 %11, -1
  %190 = or i64 480889612166198683, %189
  %191 = xor i64 %190, -1
  %192 = and i64 %191, -1
  %193 = xor i64 %187, %192
  %194 = xor i64 %193, %188
  %195 = xor i64 %194, %185
  %196 = xor i64 %195, 6645438623001248431
  %197 = and i64 %9, 7125365959725901772
  %198 = xor i64 %9, -1
  %199 = or i64 -7125365959725901773, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = sext i32 %dispatcher1 to i64
  %203 = or i64 %202, 6335136397342619541
  %204 = and i64 6335136397342619541, %202
  %205 = xor i64 6335136397342619541, %202
  %206 = or i64 %204, %205
  %207 = xor i64 %201, %203
  %208 = xor i64 %207, %206
  %209 = xor i64 %208, 8389087733549999286
  %210 = xor i64 %209, %197
  %211 = mul i64 %196, %210
  %212 = trunc i64 %211 to i32
  %213 = select i1 %184, i32 %212, i32 984876143
  %214 = xor i32 %213, 5
  store i32 %214, i32* %2, align 4
  %215 = call i8** @bf11363924245358311224(i32* %2)
  %216 = load i8*, i8** %215, align 8
  indirectbr i8* %216, [label %loopEnd, label %codeRepl1]

217:                                              ; preds = %loopStart
  %.reload5 = load i32, i32* %.reg2mem4, align 4
  ret i32 %.reload5

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %218 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %218, align 4
  %219 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %219, align 4
  %220 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %220, align 4
  %221 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %221, align 4
  %222 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %223 = load i32, i32* %222, align 4
  store i32 %223, i32* %dispatcher, align 4
  %224 = load i8*, i8** %8, align 8
  %225 = load i8, i8* %224, align 1
  %226 = and i8 %225, 1
  %227 = icmp eq i8 %226, 0
  %228 = mul i8 %225, %225
  %229 = sub i8 0, %225
  %230 = sub i8 %228, %229
  %231 = mul i8 %230, 3
  %232 = srem i8 %231, 2
  %233 = icmp eq i8 %232, 0
  %234 = or i1 %227, %233
  %235 = select i1 %234, i32 984876136, i32 984876137
  %236 = or i32 %235, 1
  %237 = add i64 %3, -1184053622350580750
  %238 = add i64 -4940608499771106975, %3
  %239 = add i64 %238, 3756554877420526225
  %240 = add i64 %18, -6077886570006128379
  %241 = and i64 -6077886570006128379, %18
  %242 = or i64 -6077886570006128379, %18
  %243 = add i64 %241, %242
  %244 = xor i64 %240, %243
  %245 = xor i64 %244, %237
  %246 = xor i64 %245, -2182319195378139159
  %247 = xor i64 %246, %239
  %248 = sext i32 %dispatcher1 to i64
  %249 = add i64 %248, -2975886788551038401
  %250 = xor i64 -2975886788551038401, %248
  %251 = and i64 -2975886788551038401, %248
  %252 = mul i64 2, %251
  %253 = add i64 %250, %252
  %254 = add i64 %18, -1261330703394898493
  %255 = sub i64 0, %18
  %256 = sub i64 -1261330703394898493, %255
  %257 = sext i32 %dispatcher1 to i64
  %258 = add i64 %257, 3576723328013503255
  %259 = xor i64 3576723328013503255, %257
  %260 = and i64 3576723328013503255, %257
  %261 = mul i64 2, %260
  %262 = add i64 %259, %261
  %263 = xor i64 %258, %249
  %264 = xor i64 %263, %254
  %265 = xor i64 %264, %262
  %266 = xor i64 %265, %256
  %267 = xor i64 %266, %253
  %268 = xor i64 %267, 6781477303727589465
  %269 = mul i64 %247, %268
  %270 = trunc i64 %269 to i32
  %271 = and i32 %235, %270
  %272 = sub i32 %236, %271
  store i32 %272, i32* %2, align 4
  %273 = call i8** @bf11363924245358311224(i32* %2)
  %274 = load i8*, i8** %273, align 8
  indirectbr i8* %274, [label %codeRepl, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %275 = load i8*, i8** %10, align 8
  %276 = load i8, i8* %275, align 1
  %277 = mul i8 %276, 2
  %278 = and i64 %18, 3646976765669686981
  %279 = xor i64 %18, -1
  %280 = or i64 -3646976765669686982, %279
  %281 = xor i64 %280, -1
  %282 = and i64 %281, -1
  %283 = add i64 %15, -5223382322655993554
  %284 = sub i64 0, %15
  %285 = add i64 5223382322655993554, %284
  %286 = sub i64 0, %285
  %287 = xor i64 %278, 6307960612241889585
  %288 = xor i64 %287, %282
  %289 = xor i64 %288, %283
  %290 = xor i64 %289, %286
  %291 = and i64 %20, 6164587536907314790
  %292 = or i64 -6164587536907314791, %20
  %293 = sub i64 %292, -6164587536907314791
  %294 = and i64 %18, -195439720432969776
  %295 = xor i64 %18, -1
  %296 = or i64 195439720432969775, %295
  %297 = xor i64 %296, -1
  %298 = and i64 %297, -1
  %299 = xor i64 %293, -7049149435706425438
  %300 = xor i64 %299, %298
  %301 = xor i64 %300, %294
  %302 = xor i64 %301, %291
  %303 = mul i64 %290, %302
  %304 = trunc i64 %303 to i8
  %305 = mul i8 %276, %304
  %306 = and i64 %13, -5451221828962702786
  %307 = or i64 5451221828962702785, %13
  %308 = sub i64 %307, 5451221828962702785
  %309 = add i64 %15, -3128490850597201993
  %310 = sub i64 0, %15
  %311 = sub i64 -3128490850597201993, %310
  %312 = xor i64 %311, -3275838670839085263
  %313 = xor i64 %312, %308
  %314 = xor i64 %313, %306
  %315 = xor i64 %314, %309
  %316 = add i64 %18, -11138913677714353
  %317 = xor i64 -11138913677714353, %18
  %318 = and i64 -11138913677714353, %18
  %319 = mul i64 2, %318
  %320 = add i64 %317, %319
  %321 = and i64 %5, -2532842015344447932
  %322 = xor i64 %5, -1
  %323 = or i64 2532842015344447931, %322
  %324 = xor i64 %323, -1
  %325 = and i64 %324, -1
  %326 = and i64 %11, 1278521759465243620
  %327 = or i64 -1278521759465243621, %11
  %328 = sub i64 %327, -1278521759465243621
  %329 = xor i64 %320, %325
  %330 = xor i64 %329, -5598964085514312798
  %331 = xor i64 %330, %326
  %332 = xor i64 %331, %316
  %333 = xor i64 %332, %321
  %334 = xor i64 %333, %328
  %335 = mul i64 %315, %334
  %336 = trunc i64 %335 to i8
  %337 = add i8 %336, %305
  %338 = mul i8 %277, %337
  %339 = srem i8 %338, 4
  %340 = icmp eq i8 %339, 0
  %341 = mul i8 %276, %276
  %342 = add i64 %11, -2252396238548557521
  %343 = add i64 7720088704958556274, %11
  %344 = sub i64 %343, -8474259130202437821
  %345 = and i64 %20, 8360054003306545860
  %346 = or i64 -8360054003306545861, %20
  %347 = sub i64 %346, -8360054003306545861
  %348 = and i64 %3, 4257358240704088608
  %349 = or i64 -4257358240704088609, %3
  %350 = sub i64 %349, -4257358240704088609
  %351 = xor i64 %345, %342
  %352 = xor i64 %351, -6916203902539872645
  %353 = xor i64 %352, %347
  %354 = xor i64 %353, %348
  %355 = xor i64 %354, %344
  %356 = xor i64 %355, %350
  %357 = and i64 %18, -2316149759533664050
  %358 = or i64 2316149759533664049, %18
  %359 = sub i64 %358, 2316149759533664049
  %360 = or i64 %20, 7223763538699788301
  %361 = xor i64 %20, -1
  %362 = and i64 7223763538699788301, %361
  %363 = add i64 %362, %20
  %364 = and i64 %11, 8988100006550226088
  %365 = xor i64 %11, -1
  %366 = xor i64 8988100006550226088, %365
  %367 = and i64 %366, 8988100006550226088
  %368 = xor i64 %363, %359
  %369 = xor i64 %368, %360
  %370 = xor i64 %369, %357
  %371 = xor i64 %370, %364
  %372 = xor i64 %371, 3608868587080480357
  %373 = xor i64 %372, %367
  %374 = mul i64 %356, %373
  %375 = trunc i64 %374 to i8
  %376 = add i8 %341, %375
  %377 = add i8 %376, %276
  %378 = sub i8 %377, -121
  %379 = srem i8 %378, 2
  %380 = icmp eq i8 %379, 0
  %381 = or i64 %7, 1219783156294405503
  %382 = and i64 1219783156294405503, %7
  %383 = xor i64 1219783156294405503, %7
  %384 = or i64 %382, %383
  %385 = add i64 %9, 6311493153736200086
  %386 = add i64 4509219034388681918, %9
  %387 = sub i64 %386, -1802274119347518168
  %388 = and i64 %20, 5480508117186787907
  %389 = xor i64 %20, -1
  %390 = or i64 -5480508117186787908, %389
  %391 = xor i64 %390, -1
  %392 = and i64 %391, -1
  %393 = xor i64 %384, %381
  %394 = xor i64 %393, %387
  %395 = xor i64 %394, %392
  %396 = xor i64 %395, %385
  %397 = xor i64 %396, -8178495151308836011
  %398 = xor i64 %397, %388
  %399 = or i64 %13, -3206129721156771169
  %400 = and i64 -3206129721156771169, %13
  %401 = xor i64 -3206129721156771169, %13
  %402 = or i64 %400, %401
  %403 = add i64 %11, 5041873357972775847
  %404 = add i64 -473733663055190075, %11
  %405 = add i64 %404, 5515607021027965922
  %406 = add i64 %5, -2975677863972738214
  %407 = and i64 -2975677863972738214, %5
  %408 = or i64 -2975677863972738214, %5
  %409 = add i64 %407, %408
  %410 = xor i64 %402, %406
  %411 = xor i64 %410, %405
  %412 = xor i64 %411, %403
  %413 = xor i64 %412, -5647574637853478403
  %414 = xor i64 %413, %399
  %415 = xor i64 %414, %409
  %416 = mul i64 %398, %415
  %417 = trunc i64 %416 to i1
  %418 = xor i1 %380, %417
  %419 = and i1 %340, %418
  %420 = add i1 %419, %380
  %421 = select i1 %420, i32 984876136, i32 984876143
  %422 = xor i32 %421, 7
  store i32 %422, i32* %2, align 4
  %423 = call i8** @bf11363924245358311224(i32* %2)
  %424 = load i8*, i8** %423, align 8
  indirectbr i8* %424, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl1, %codeRepl
  %425 = load i8*, i8** %4, align 8
  %426 = load i8, i8* %425, align 1
  %427 = and i8 %426, 1
  %428 = icmp eq i8 %427, 0
  %429 = mul i8 %426, %426
  %430 = add i8 %429, %426
  %431 = mul i8 %430, 3
  %432 = or i64 %7, -3723355143767665664
  %433 = xor i64 %7, -1
  %434 = and i64 %433, 2437256351329298914
  %435 = and i64 %7, -2437256351329298915
  %436 = or i64 %434, %435
  %437 = xor i64 -1332744963463119390, %436
  %438 = xor i64 %7, -1
  %439 = or i64 3723355143767665663, %438
  %440 = xor i64 %439, -1
  %441 = and i64 %440, -1
  %442 = or i64 %437, %441
  %443 = add i64 %9, 7103561353924578933
  %444 = add i64 8157742314288677007, %9
  %445 = sub i64 %444, 1054180960364098074
  %446 = xor i64 %443, %432
  %447 = xor i64 %446, %442
  %448 = xor i64 %447, -2714260362622042373
  %449 = xor i64 %448, %445
  %450 = sext i32 %dispatcher1 to i64
  %451 = add i64 %450, 4378323987282986292
  %452 = add i64 3275698934333039294, %450
  %453 = add i64 %452, 1102625052949946998
  %454 = add i64 %3, -5895272396899842317
  %455 = add i64 -266416529195752341, %3
  %456 = add i64 %455, -5628855867704089976
  %457 = xor i64 1715091067239512166, %454
  %458 = xor i64 %457, %451
  %459 = xor i64 %458, %456
  %460 = xor i64 %459, %453
  %461 = mul i64 %449, %460
  %462 = trunc i64 %461 to i8
  %463 = srem i8 %431, %462
  %464 = icmp eq i8 %463, 0
  %465 = or i1 %428, %464
  %466 = select i1 %465, i32 984876143, i32 984876139
  %467 = or i32 %466, 4
  %468 = and i32 %466, 4
  %469 = sub i32 %467, %468
  store i32 %469, i32* %2, align 4
  %470 = call i8** @bf11363924245358311224(i32* %2)
  %471 = load i8*, i8** %470, align 8
  indirectbr i8* %471, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define i32 @render(float* %0, float* %1, i8* nocapture readonly %2, i64 %3) local_unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h6542867261474098886(i64 984876144)
  %6 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %5
  store i8* blockaddress(@render, %loopEnd), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876103)
  %8 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %7
  store i8* blockaddress(@render, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h6542867261474098886(i64 984876153)
  %10 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %9
  store i8* blockaddress(@render, %8341), i8** %10, align 8
  %11 = call i64 @h6542867261474098886(i64 984876138)
  %12 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %11
  store i8* blockaddress(@render, %.loopexit), i8** %12, align 8
  %13 = call i64 @h6542867261474098886(i64 984876131)
  %14 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %13
  store i8* blockaddress(@render, %defaultSwitchBasicBlock), i8** %14, align 8
  %15 = call i64 @h6542867261474098886(i64 984876128)
  %16 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %15
  store i8* blockaddress(@render, %codeRepl13), i8** %16, align 8
  %17 = call i64 @h6542867261474098886(i64 984876097)
  %18 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %17
  store i8* blockaddress(@render, %8118), i8** %18, align 8
  %19 = call i64 @h6542867261474098886(i64 984876117)
  %20 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %19
  store i8* blockaddress(@render, %8055), i8** %20, align 8
  %21 = call i64 @h6542867261474098886(i64 984876134)
  %22 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %21
  store i8* blockaddress(@render, %7895), i8** %22, align 8
  %23 = and i64 %3, 4102825296433823493
  %24 = xor i64 %3, -1
  %25 = xor i64 4102825296433823493, %24
  %26 = and i64 %25, 4102825296433823493
  %27 = add i64 %3, -5688250102552271936
  %28 = sub i64 0, %3
  %29 = add i64 5688250102552271936, %28
  %30 = sub i64 0, %29
  %31 = and i64 %3, 7251870566367194455
  %32 = or i64 -7251870566367194456, %3
  %33 = sub i64 %32, -7251870566367194456
  %34 = xor i64 %31, %33
  %35 = xor i64 %34, %27
  %36 = xor i64 %35, -194450112451608639
  %37 = xor i64 %36, %26
  %38 = xor i64 %37, %30
  %39 = xor i64 %38, %23
  %40 = add i64 %3, 5762020434590194243
  %41 = sub i64 0, %3
  %42 = sub i64 5762020434590194243, %41
  %43 = or i64 %3, 6533265181726519532
  %44 = and i64 6533265181726519532, %3
  %45 = xor i64 6533265181726519532, %3
  %46 = or i64 %44, %45
  %47 = and i64 %3, 8716337904380727805
  %48 = xor i64 %3, -1
  %49 = xor i64 8716337904380727805, %48
  %50 = and i64 %49, 8716337904380727805
  %51 = xor i64 %42, %50
  %52 = xor i64 %51, %46
  %53 = xor i64 %52, %43
  %54 = xor i64 %53, 7872766840407975301
  %55 = xor i64 %54, %40
  %56 = xor i64 %55, %47
  %57 = mul i64 %39, %56
  %58 = call i64 @h6542867261474098886(i64 %57)
  %59 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %58
  store i8* blockaddress(@render, %7834), i8** %59, align 8
  %60 = call i64 @h6542867261474098886(i64 984876110)
  %61 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %60
  store i8* blockaddress(@render, %7803), i8** %61, align 8
  %62 = call i64 @h6542867261474098886(i64 984876102)
  %63 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %62
  store i8* blockaddress(@render, %7572), i8** %63, align 8
  %64 = call i64 @h6542867261474098886(i64 984876148)
  %65 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %64
  store i8* blockaddress(@render, %codeRepl12), i8** %65, align 8
  %66 = call i64 @h6542867261474098886(i64 984876158)
  %67 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %66
  store i8* blockaddress(@render, %7245), i8** %67, align 8
  %68 = call i64 @h6542867261474098886(i64 984876108)
  %69 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %68
  store i8* blockaddress(@render, %5943), i8** %69, align 8
  %70 = call i64 @h6542867261474098886(i64 984876152)
  %71 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %70
  store i8* blockaddress(@render, %7630), i8** %71, align 8
  %72 = call i64 @h6542867261474098886(i64 984876125)
  %73 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %72
  store i8* blockaddress(@render, %codeRepl9), i8** %73, align 8
  %74 = call i64 @h6542867261474098886(i64 984876119)
  %75 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %74
  store i8* blockaddress(@render, %5777), i8** %75, align 8
  %76 = call i64 @h6542867261474098886(i64 984876123)
  %77 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %76
  store i8* blockaddress(@render, %6273), i8** %77, align 8
  %78 = call i64 @h6542867261474098886(i64 984876105)
  %79 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %78
  store i8* blockaddress(@render, %codeRepl8), i8** %79, align 8
  %80 = call i64 @h6542867261474098886(i64 984876130)
  %81 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %80
  store i8* blockaddress(@render, %3095), i8** %81, align 8
  %82 = call i64 @h6542867261474098886(i64 984876129)
  %83 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %82
  store i8* blockaddress(@render, %7083), i8** %83, align 8
  %84 = call i64 @h6542867261474098886(i64 984876146)
  %85 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %84
  store i8* blockaddress(@render, %codeRepl7), i8** %85, align 8
  %86 = or i64 %3, 5474476336682138052
  %87 = xor i64 %3, -1
  %88 = and i64 5474476336682138052, %87
  %89 = add i64 %88, %3
  %90 = or i64 %3, 5274916915847111999
  %91 = xor i64 %3, -1
  %92 = and i64 5274916915847111999, %91
  %93 = add i64 %92, %3
  %94 = xor i64 %89, -3957829212596407693
  %95 = xor i64 %94, %90
  %96 = xor i64 %95, %93
  %97 = xor i64 %96, %86
  %98 = and i64 %3, 145349199219614078
  %99 = or i64 -145349199219614079, %3
  %100 = sub i64 %99, -145349199219614079
  %101 = or i64 %3, 6668281369301271990
  %102 = xor i64 %3, -1
  %103 = and i64 6668281369301271990, %102
  %104 = add i64 %103, %3
  %105 = and i64 %3, -3755026686501060261
  %106 = xor i64 %3, -1
  %107 = xor i64 -3755026686501060261, %106
  %108 = and i64 %107, -3755026686501060261
  %109 = xor i64 %108, %101
  %110 = xor i64 %109, -2663984568569163735
  %111 = xor i64 %110, %100
  %112 = xor i64 %111, %105
  %113 = xor i64 %112, %98
  %114 = xor i64 %113, %104
  %115 = mul i64 %97, %114
  %116 = call i64 @h6542867261474098886(i64 %115)
  %117 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %116
  store i8* blockaddress(@render, %6725), i8** %117, align 8
  %118 = and i64 %3, 5159266552292529192
  %119 = or i64 -5159266552292529193, %3
  %120 = sub i64 %119, -5159266552292529193
  %121 = and i64 %3, -3275128965184382833
  %122 = xor i64 %3, -1
  %123 = xor i64 -3275128965184382833, %122
  %124 = and i64 %123, -3275128965184382833
  %125 = xor i64 %118, %124
  %126 = xor i64 %125, %121
  %127 = xor i64 %126, %120
  %128 = xor i64 %127, -1659507747011828001
  %129 = and i64 %3, -1999691620224658338
  %130 = or i64 1999691620224658337, %3
  %131 = sub i64 %130, 1999691620224658337
  %132 = add i64 %3, -3659729400824537223
  %133 = add i64 -8912533120108265779, %3
  %134 = sub i64 %133, -5252803719283728556
  %135 = xor i64 -6026307021259904794, %132
  %136 = xor i64 %135, %131
  %137 = xor i64 %136, %129
  %138 = xor i64 %137, %134
  %139 = mul i64 %128, %138
  %140 = call i64 @h6542867261474098886(i64 %139)
  %141 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %140
  store i8* blockaddress(@render, %5524), i8** %141, align 8
  %142 = add i64 %3, 8021617610806610653
  %143 = sub i64 0, %3
  %144 = sub i64 8021617610806610653, %143
  %145 = add i64 %3, 7019507304966018296
  %146 = xor i64 7019507304966018296, %3
  %147 = and i64 7019507304966018296, %3
  %148 = mul i64 2, %147
  %149 = add i64 %146, %148
  %150 = add i64 %3, 7384006261262202385
  %151 = sub i64 0, %3
  %152 = add i64 -7384006261262202385, %151
  %153 = sub i64 0, %152
  %154 = xor i64 %144, %153
  %155 = xor i64 %154, %145
  %156 = xor i64 %155, -3790797450871178503
  %157 = xor i64 %156, %142
  %158 = xor i64 %157, %150
  %159 = xor i64 %158, %149
  %160 = or i64 %3, 658884874197721089
  %161 = xor i64 %3, -1
  %162 = and i64 658884874197721089, %161
  %163 = add i64 %162, %3
  %164 = and i64 %3, -6181378492143025934
  %165 = xor i64 %3, -1
  %166 = xor i64 -6181378492143025934, %165
  %167 = and i64 %166, -6181378492143025934
  %168 = xor i64 %163, %167
  %169 = xor i64 %168, %160
  %170 = xor i64 %169, -8912416523299912354
  %171 = xor i64 %170, %164
  %172 = mul i64 %159, %171
  %173 = call i64 @h6542867261474098886(i64 %172)
  %174 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %173
  store i8* blockaddress(@render, %3031), i8** %174, align 8
  %175 = call i64 @h6542867261474098886(i64 984876135)
  %176 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %175
  store i8* blockaddress(@render, %5370), i8** %176, align 8
  %177 = call i64 @h6542867261474098886(i64 984876143)
  %178 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %177
  store i8* blockaddress(@render, %4768), i8** %178, align 8
  %179 = call i64 @h6542867261474098886(i64 984876107)
  %180 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %179
  store i8* blockaddress(@render, %4544), i8** %180, align 8
  %181 = call i64 @h6542867261474098886(i64 984876154)
  %182 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %181
  store i8* blockaddress(@render, %3851), i8** %182, align 8
  %183 = call i64 @h6542867261474098886(i64 984876151)
  %184 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %183
  store i8* blockaddress(@render, %5492), i8** %184, align 8
  %185 = call i64 @h6542867261474098886(i64 984876100)
  %186 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %185
  store i8* blockaddress(@render, %codeRepl6), i8** %186, align 8
  %187 = call i64 @h6542867261474098886(i64 984876127)
  %188 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %187
  store i8* blockaddress(@render, %EntryBasicBlockSplit), i8** %188, align 8
  %189 = call i64 @h6542867261474098886(i64 984876104)
  %190 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %189
  store i8* blockaddress(@render, %1268), i8** %190, align 8
  %191 = call i64 @h6542867261474098886(i64 984876114)
  %192 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %191
  store i8* blockaddress(@render, %codeRepl4), i8** %192, align 8
  %193 = call i64 @h6542867261474098886(i64 984876115)
  %194 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %193
  store i8* blockaddress(@render, %codeRepl3), i8** %194, align 8
  %195 = call i64 @h6542867261474098886(i64 984876150)
  %196 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %195
  store i8* blockaddress(@render, %codeRepl2), i8** %196, align 8
  %197 = call i64 @h6542867261474098886(i64 984876118)
  %198 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %197
  store i8* blockaddress(@render, %codeRepl11), i8** %198, align 8
  %199 = call i64 @h6542867261474098886(i64 984876124)
  %200 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %199
  store i8* blockaddress(@render, %5159), i8** %200, align 8
  %201 = call i64 @h6542867261474098886(i64 984876140)
  %202 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %201
  store i8* blockaddress(@render, %codeRepl1), i8** %202, align 8
  %203 = call i64 @h6542867261474098886(i64 984876126)
  %204 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %203
  store i8* blockaddress(@render, %3502), i8** %204, align 8
  %205 = call i64 @h6542867261474098886(i64 984876074)
  %206 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %205
  store i8* blockaddress(@render, %3713), i8** %206, align 8
  %207 = or i64 %3, 3920445060723640285
  %208 = and i64 3920445060723640285, %3
  %209 = xor i64 3920445060723640285, %3
  %210 = or i64 %208, %209
  %211 = and i64 %3, -3601078736439889344
  %212 = xor i64 %3, -1
  %213 = or i64 3601078736439889343, %212
  %214 = xor i64 %213, -1
  %215 = and i64 %214, -1
  %216 = xor i64 8996882589800546003, %210
  %217 = xor i64 %216, %211
  %218 = xor i64 %217, %207
  %219 = xor i64 %218, %215
  %220 = and i64 %3, -522945004695977296
  %221 = xor i64 %3, -1
  %222 = or i64 522945004695977295, %221
  %223 = xor i64 %222, -1
  %224 = and i64 %223, -1
  %225 = or i64 %3, 6364109758677338417
  %226 = xor i64 %3, -1
  %227 = and i64 %226, -805039573952364435
  %228 = and i64 %3, 805039573952364434
  %229 = or i64 %227, %228
  %230 = xor i64 -6016192419186390692, %229
  %231 = xor i64 %3, -1
  %232 = or i64 -6364109758677338418, %231
  %233 = xor i64 %232, -1
  %234 = and i64 %233, -1
  %235 = or i64 %230, %234
  %236 = xor i64 %224, -6218909743805338461
  %237 = xor i64 %236, %235
  %238 = xor i64 %237, %225
  %239 = xor i64 %238, %220
  %240 = mul i64 %219, %239
  %241 = call i64 @h6542867261474098886(i64 %240)
  %242 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %241
  store i8* blockaddress(@render, %3322), i8** %242, align 8
  %243 = call i64 @h6542867261474098886(i64 984876149)
  %244 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %243
  store i8* blockaddress(@render, %5467), i8** %244, align 8
  %245 = call i64 @h6542867261474098886(i64 984876112)
  %246 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %245
  store i8* blockaddress(@render, %3916), i8** %246, align 8
  %247 = and i64 %3, -7119151153647964095
  %248 = xor i64 %3, -1
  %249 = or i64 7119151153647964094, %248
  %250 = xor i64 %249, -1
  %251 = and i64 %250, -1
  %252 = add i64 %3, -3478449013723835651
  %253 = xor i64 -3478449013723835651, %3
  %254 = and i64 -3478449013723835651, %3
  %255 = mul i64 2, %254
  %256 = add i64 %253, %255
  %257 = xor i64 %247, %252
  %258 = xor i64 %257, -4236238820076648601
  %259 = xor i64 %258, %251
  %260 = xor i64 %259, %256
  %261 = or i64 %3, -7397513551295183170
  %262 = xor i64 %3, -1
  %263 = and i64 -7397513551295183170, %262
  %264 = add i64 %263, %3
  %265 = or i64 %3, -3045067336942237149
  %266 = xor i64 %3, -1
  %267 = and i64 %266, 8750313875494316998
  %268 = and i64 %3, -8750313875494316999
  %269 = or i64 %267, %268
  %270 = xor i64 -5993478048628121115, %269
  %271 = xor i64 %3, -1
  %272 = or i64 3045067336942237148, %271
  %273 = xor i64 %272, -1
  %274 = and i64 %273, -1
  %275 = or i64 %270, %274
  %276 = and i64 %3, -7458818382508218727
  %277 = xor i64 %3, -1
  %278 = or i64 7458818382508218726, %277
  %279 = xor i64 %278, -1
  %280 = and i64 %279, -1
  %281 = xor i64 %265, 2562909752450232915
  %282 = xor i64 %281, %275
  %283 = xor i64 %282, %276
  %284 = xor i64 %283, %280
  %285 = xor i64 %284, %264
  %286 = xor i64 %285, %261
  %287 = mul i64 %260, %286
  %288 = call i64 @h6542867261474098886(i64 %287)
  %289 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %288
  store i8* blockaddress(@render, %2516), i8** %289, align 8
  %290 = call i64 @h6542867261474098886(i64 984876098)
  %291 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %290
  store i8* blockaddress(@render, %1495), i8** %291, align 8
  %292 = call i64 @h6542867261474098886(i64 984876099)
  %293 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %292
  store i8* blockaddress(@render, %codeRepl), i8** %293, align 8
  %294 = call i64 @h6542867261474098886(i64 984876141)
  %295 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %294
  store i8* blockaddress(@render, %6359), i8** %295, align 8
  %296 = call i64 @h6542867261474098886(i64 984876147)
  %297 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %296
  store i8* blockaddress(@render, %1529), i8** %297, align 8
  %298 = call i64 @h6542867261474098886(i64 984876132)
  %299 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %298
  store i8* blockaddress(@render, %codeRepl10), i8** %299, align 8
  %300 = call i64 @h6542867261474098886(i64 984876096)
  %301 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %300
  store i8* blockaddress(@render, %2773), i8** %301, align 8
  %302 = call i64 @h6542867261474098886(i64 984876155)
  %303 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %302
  store i8* blockaddress(@render, %1711), i8** %303, align 8
  %304 = call i64 @h6542867261474098886(i64 984876113)
  %305 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %304
  store i8* blockaddress(@render, %6964), i8** %305, align 8
  %306 = add i64 %3, 8062329082264640652
  %307 = and i64 8062329082264640652, %3
  %308 = or i64 8062329082264640652, %3
  %309 = add i64 %307, %308
  %310 = and i64 %3, -780954081808856552
  %311 = xor i64 %3, -1
  %312 = xor i64 -780954081808856552, %311
  %313 = and i64 %312, -780954081808856552
  %314 = xor i64 -7813942023522539605, %310
  %315 = xor i64 %314, %306
  %316 = xor i64 %315, %313
  %317 = xor i64 %316, %309
  %318 = add i64 %3, -4483167483922673753
  %319 = sub i64 0, %3
  %320 = add i64 4483167483922673753, %319
  %321 = sub i64 0, %320
  %322 = add i64 %3, -7995651313107821095
  %323 = sub i64 0, %3
  %324 = add i64 7995651313107821095, %323
  %325 = sub i64 0, %324
  %326 = or i64 %3, -7898394771946679569
  %327 = xor i64 %3, -1
  %328 = and i64 %327, 9020608489848223475
  %329 = and i64 %3, -9020608489848223476
  %330 = or i64 %328, %329
  %331 = xor i64 -1203340238486346724, %330
  %332 = xor i64 %3, -1
  %333 = or i64 7898394771946679568, %332
  %334 = xor i64 %333, -1
  %335 = and i64 %334, -1
  %336 = or i64 %331, %335
  %337 = xor i64 %325, %336
  %338 = xor i64 %337, 4657515044339956855
  %339 = xor i64 %338, %322
  %340 = xor i64 %339, %321
  %341 = xor i64 %340, %326
  %342 = xor i64 %341, %318
  %343 = mul i64 %317, %342
  %344 = call i64 @h6542867261474098886(i64 %343)
  %345 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %344
  store i8* blockaddress(@render, %1815), i8** %345, align 8
  %346 = add i64 %3, 128470194333879636
  %347 = add i64 -2687644311278068833, %3
  %348 = add i64 %347, 2816114505611948469
  %349 = add i64 %3, 6958955943104734540
  %350 = add i64 5461094984012950062, %3
  %351 = add i64 %350, 1497860959091784478
  %352 = add i64 %3, 1677149282975697862
  %353 = add i64 -5287069148938991733, %3
  %354 = add i64 %353, 6964218431914689595
  %355 = xor i64 %349, -634735741637433899
  %356 = xor i64 %355, %348
  %357 = xor i64 %356, %352
  %358 = xor i64 %357, %346
  %359 = xor i64 %358, %351
  %360 = xor i64 %359, %354
  %361 = add i64 %3, 2400015138994070993
  %362 = sub i64 0, %3
  %363 = add i64 -2400015138994070993, %362
  %364 = sub i64 0, %363
  %365 = or i64 %3, -3455409239766786098
  %366 = xor i64 %3, -1
  %367 = and i64 %366, -7918687719574211445
  %368 = and i64 %3, 7918687719574211444
  %369 = or i64 %367, %368
  %370 = xor i64 4760516890636249925, %369
  %371 = xor i64 %3, -1
  %372 = or i64 3455409239766786097, %371
  %373 = xor i64 %372, -1
  %374 = and i64 %373, -1
  %375 = or i64 %370, %374
  %376 = xor i64 %375, %365
  %377 = xor i64 %376, %364
  %378 = xor i64 %377, 7692883515688937208
  %379 = xor i64 %378, %361
  %380 = mul i64 %360, %379
  %381 = call i64 @h6542867261474098886(i64 %380)
  %382 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %381
  store i8* blockaddress(@render, %.preheader), i8** %382, align 8
  %383 = call i64 @h6542867261474098886(i64 984876156)
  %384 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %383
  store i8* blockaddress(@render, %1898), i8** %384, align 8
  %385 = call i64 @h6542867261474098886(i64 984876136)
  %386 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %385
  store i8* blockaddress(@render, %2380), i8** %386, align 8
  %387 = add i64 %3, 1208274917558304045
  %388 = add i64 2560795406134747459, %3
  %389 = add i64 %388, -1352520488576443414
  %390 = add i64 %3, 1172900822506688461
  %391 = add i64 -4776630852894714174, %3
  %392 = add i64 %391, 5949531675401402635
  %393 = xor i64 %392, -8013735182529220603
  %394 = xor i64 %393, %389
  %395 = xor i64 %394, %390
  %396 = xor i64 %395, %387
  %397 = and i64 %3, 8495664890049653645
  %398 = or i64 -8495664890049653646, %3
  %399 = sub i64 %398, -8495664890049653646
  %400 = add i64 %3, -8050618684609081673
  %401 = sub i64 0, %3
  %402 = add i64 8050618684609081673, %401
  %403 = sub i64 0, %402
  %404 = add i64 %3, 3012363174540044666
  %405 = xor i64 3012363174540044666, %3
  %406 = and i64 3012363174540044666, %3
  %407 = mul i64 2, %406
  %408 = add i64 %405, %407
  %409 = xor i64 %397, %403
  %410 = xor i64 %409, %404
  %411 = xor i64 %410, %408
  %412 = xor i64 %411, %399
  %413 = xor i64 %412, -2555242070143402573
  %414 = xor i64 %413, %400
  %415 = mul i64 %396, %414
  %416 = call i64 @h6542867261474098886(i64 %415)
  %417 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %416
  store i8* blockaddress(@render, %4171), i8** %417, align 8
  %418 = call i64 @h6542867261474098886(i64 984876106)
  %419 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %418
  store i8* blockaddress(@render, %2156), i8** %419, align 8
  %420 = call i64 @h6542867261474098886(i64 984876145)
  %421 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %420
  store i8* blockaddress(@render, %5244), i8** %421, align 8
  %422 = and i64 %3, -8821175828372675786
  %423 = or i64 8821175828372675785, %3
  %424 = sub i64 %423, 8821175828372675785
  %425 = or i64 %3, -8103626273320969250
  %426 = and i64 -8103626273320969250, %3
  %427 = xor i64 -8103626273320969250, %3
  %428 = or i64 %426, %427
  %429 = xor i64 5093629343069935051, %428
  %430 = xor i64 %429, %425
  %431 = xor i64 %430, %422
  %432 = xor i64 %431, %424
  %433 = add i64 %3, 8131545035104497936
  %434 = xor i64 8131545035104497936, %3
  %435 = and i64 8131545035104497936, %3
  %436 = mul i64 2, %435
  %437 = add i64 %434, %436
  %438 = or i64 %3, -3929863298674052090
  %439 = xor i64 %3, -1
  %440 = and i64 -3929863298674052090, %439
  %441 = add i64 %440, %3
  %442 = xor i64 -7293189460185298105, %441
  %443 = xor i64 %442, %433
  %444 = xor i64 %443, %438
  %445 = xor i64 %444, %437
  %446 = mul i64 %432, %445
  %447 = call i64 @h6542867261474098886(i64 %446)
  %448 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %447
  store i8* blockaddress(@render, %codeRepl5), i8** %448, align 8
  %449 = call i64 @h6542867261474098886(i64 984876111)
  %450 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %449
  store i8* blockaddress(@render, %3222), i8** %450, align 8
  %451 = call i64 @h6542867261474098886(i64 984876137)
  %452 = getelementptr [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %451
  store i8* blockaddress(@render, %loopStart), i8** %452, align 8
  %453 = alloca i64, align 8
  %454 = call i64 @m4181846979565521366(i64 4070807658626890124)
  %455 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %454
  store i8* bitcast (void ([65 x i32]*, i32*)* @render.extracted to i8*), i8** %455, align 8
  %456 = call i64 @m4181846979565521366(i64 4070807658626890125)
  %457 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %456
  store i8* bitcast (void (i64*, i64, i1*, [65 x i32]*, i32*, i64*, i1*)* @render.extracted.1 to i8*), i8** %457, align 8
  %458 = call i64 @m4181846979565521366(i64 4070807658626890114)
  %459 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %458
  store i8* bitcast (void ([65 x i32]*, i32*)* @render.extracted.2 to i8*), i8** %459, align 8
  %460 = call i64 @m4181846979565521366(i64 4070807658626890116)
  %461 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %460
  store i8* bitcast (void (i64*, [65 x i32]*, i32*)* @render.extracted.3 to i8*), i8** %461, align 8
  %462 = and i64 %3, 2051870590024718928
  %463 = xor i64 %3, -1
  %464 = or i64 -2051870590024718929, %463
  %465 = xor i64 %464, -1
  %466 = and i64 %465, -1
  %467 = add i64 %3, -861240465823782273
  %468 = sub i64 0, %3
  %469 = add i64 861240465823782273, %468
  %470 = sub i64 0, %469
  %471 = and i64 %3, -5840581662492647009
  %472 = xor i64 %3, -1
  %473 = xor i64 -5840581662492647009, %472
  %474 = and i64 %473, -5840581662492647009
  %475 = xor i64 %467, 7750062417266379199
  %476 = xor i64 %475, %470
  %477 = xor i64 %476, %462
  %478 = xor i64 %477, %474
  %479 = xor i64 %478, %466
  %480 = xor i64 %479, %471
  %481 = add i64 %3, -362350857106776613
  %482 = add i64 -4992366704044927376, %3
  %483 = add i64 %482, 4630015846938150763
  %484 = or i64 %3, -61176250877841242
  %485 = and i64 -61176250877841242, %3
  %486 = xor i64 -61176250877841242, %3
  %487 = or i64 %485, %486
  %488 = or i64 %3, 249949107857170434
  %489 = xor i64 %3, -1
  %490 = and i64 %489, -8996375900057793906
  %491 = and i64 %3, 8996375900057793905
  %492 = or i64 %490, %491
  %493 = xor i64 -9200417897490732404, %492
  %494 = xor i64 %3, -1
  %495 = or i64 -249949107857170435, %494
  %496 = xor i64 %495, -1
  %497 = and i64 %496, -1
  %498 = or i64 %493, %497
  %499 = xor i64 %483, %484
  %500 = xor i64 %499, %487
  %501 = xor i64 %500, %498
  %502 = xor i64 %501, %481
  %503 = xor i64 %502, -3980417365986394441
  %504 = xor i64 %503, %488
  %505 = mul i64 %480, %504
  %506 = call i64 @m4181846979565521366(i64 %505)
  %507 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %506
  store i8* bitcast (void (i64*, [65 x i32]*, i32*)* @render.extracted.4 to i8*), i8** %507, align 8
  %508 = and i64 %3, -8845153489920470915
  %509 = or i64 8845153489920470914, %3
  %510 = sub i64 %509, 8845153489920470914
  %511 = add i64 %3, 5394169195923562142
  %512 = sub i64 0, %3
  %513 = add i64 -5394169195923562142, %512
  %514 = sub i64 0, %513
  %515 = xor i64 %511, %514
  %516 = xor i64 %515, %510
  %517 = xor i64 %516, 6976646393158967363
  %518 = xor i64 %517, %508
  %519 = or i64 %3, 7716738702202231440
  %520 = xor i64 %3, -1
  %521 = and i64 %520, 2454451532347444794
  %522 = and i64 %3, -2454451532347444795
  %523 = or i64 %521, %522
  %524 = xor i64 5267147080194741418, %523
  %525 = xor i64 %3, -1
  %526 = or i64 -7716738702202231441, %525
  %527 = xor i64 %526, -1
  %528 = and i64 %527, -1
  %529 = or i64 %524, %528
  %530 = or i64 %3, -1839771599660766462
  %531 = and i64 -1839771599660766462, %3
  %532 = xor i64 -1839771599660766462, %3
  %533 = or i64 %531, %532
  %534 = or i64 %3, 3536593579878782469
  %535 = and i64 3536593579878782469, %3
  %536 = xor i64 3536593579878782469, %3
  %537 = or i64 %535, %536
  %538 = xor i64 %533, -688114305332330643
  %539 = xor i64 %538, %530
  %540 = xor i64 %539, %537
  %541 = xor i64 %540, %534
  %542 = xor i64 %541, %519
  %543 = xor i64 %542, %529
  %544 = mul i64 %518, %543
  %545 = call i64 @m4181846979565521366(i64 %544)
  %546 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %545
  store i8* bitcast (void ([65 x i32]*, i1*, i32*)* @render.extracted.5 to i8*), i8** %546, align 8
  %547 = call i64 @m4181846979565521366(i64 4070807658626890123)
  %548 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %547
  store i8* bitcast (void ([65 x i32]*, i32*)* @render.extracted.6 to i8*), i8** %548, align 8
  %549 = call i64 @m4181846979565521366(i64 4070807658626890117)
  %550 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %549
  store i8* bitcast (void ([65 x i32]*, i32*)* @render.extracted.7 to i8*), i8** %550, align 8
  %551 = call i64 @m4181846979565521366(i64 4070807658626890122)
  %552 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %551
  store i8* bitcast (void ([65 x i32]*, i1*, i32*, i64*, i64*, i32*)* @render.extracted.8 to i8*), i8** %552, align 8
  %553 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %554 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %553
  store i8* bitcast (void (i64*, i8*, i32*, i64*, i64*, [65 x i32]*, i32*)* @render.extracted.9 to i8*), i8** %554, align 8
  %555 = and i64 %3, 5099062435495671105
  %556 = or i64 -5099062435495671106, %3
  %557 = sub i64 %556, -5099062435495671106
  %558 = add i64 %3, -5609311371449841514
  %559 = add i64 2151226467059616464, %3
  %560 = sub i64 %559, 7760537838509457978
  %561 = xor i64 -6104836615852301723, %558
  %562 = xor i64 %561, %560
  %563 = xor i64 %562, %557
  %564 = xor i64 %563, %555
  %565 = and i64 %3, 4749065650780584275
  %566 = xor i64 %3, -1
  %567 = or i64 -4749065650780584276, %566
  %568 = xor i64 %567, -1
  %569 = and i64 %568, -1
  %570 = and i64 %3, -2557146042991682747
  %571 = or i64 2557146042991682746, %3
  %572 = sub i64 %571, 2557146042991682746
  %573 = xor i64 %569, -1429546962335828248
  %574 = xor i64 %573, %565
  %575 = xor i64 %574, %570
  %576 = xor i64 %575, %572
  %577 = mul i64 %564, %576
  %578 = call i64 @m4181846979565521366(i64 %577)
  %579 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %578
  store i8* bitcast (void (i1*, [65 x i32]*, i32*)* @render.extracted.10 to i8*), i8** %579, align 8
  %580 = call i64 @m4181846979565521366(i64 4070807658626890118)
  %581 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %580
  store i8* bitcast (void (i64*, [65 x i32]*, i32*)* @render.extracted.11 to i8*), i8** %581, align 8
  %582 = call i64 @m4181846979565521366(i64 4070807658626890115)
  %583 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %582
  store i8* bitcast (void ([65 x i32]*, i32*)* @render.extracted.12 to i8*), i8** %583, align 8
  %584 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %585 = getelementptr [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %584
  store i8* bitcast (void (i32*, float*, float*, i64*, i64*, [65 x i32]*, i32*, i32*)* @render.extracted.13 to i8*), i8** %585, align 8
  %.reg2mem107 = alloca i32, align 4
  %586 = and i64 %3, -3865950201831902323
  %587 = xor i64 %3, -1
  %588 = or i64 3865950201831902322, %587
  %589 = xor i64 %588, -1
  %590 = and i64 %589, -1
  %591 = or i64 %3, -3056596208723257816
  %592 = xor i64 %3, -1
  %593 = and i64 -3056596208723257816, %592
  %594 = add i64 %593, %3
  %595 = xor i64 %594, %591
  %596 = xor i64 %595, %590
  %597 = xor i64 %596, %586
  %598 = xor i64 %597, -4353175131107396439
  %599 = and i64 %3, 5565361227479027682
  %600 = xor i64 %3, -1
  %601 = or i64 -5565361227479027683, %600
  %602 = xor i64 %601, -1
  %603 = and i64 %602, -1
  %604 = and i64 %3, 3383842394715194038
  %605 = xor i64 %3, -1
  %606 = or i64 -3383842394715194039, %605
  %607 = xor i64 %606, -1
  %608 = and i64 %607, -1
  %609 = add i64 %3, 3817867765165761092
  %610 = add i64 2086555917076600764, %3
  %611 = add i64 %610, 1731311848089160328
  %612 = xor i64 %599, %604
  %613 = xor i64 %612, %609
  %614 = xor i64 %613, %608
  %615 = xor i64 %614, %611
  %616 = xor i64 %615, 684531830976049049
  %617 = xor i64 %616, %603
  %618 = mul i64 %598, %617
  %619 = trunc i64 %618 to i32
  %.ph.reg2mem = alloca i32, i32 %619, align 4
  %.reg2mem105 = alloca i32, align 4
  %.reg2mem103 = alloca i1, align 1
  %.reg2mem101 = alloca i64, align 8
  %620 = or i64 %3, -1530222070655657271
  %621 = xor i64 %3, -1
  %622 = and i64 -1530222070655657271, %621
  %623 = add i64 %622, %3
  %624 = or i64 %3, 2412256521373597650
  %625 = xor i64 %3, -1
  %626 = and i64 %625, 7347191515292775303
  %627 = and i64 %3, -7347191515292775304
  %628 = or i64 %626, %627
  %629 = xor i64 4939456237342133333, %628
  %630 = xor i64 %3, -1
  %631 = or i64 -2412256521373597651, %630
  %632 = xor i64 %631, -1
  %633 = and i64 %632, -1
  %634 = or i64 %629, %633
  %635 = xor i64 %623, 1969405398742481351
  %636 = xor i64 %635, %620
  %637 = xor i64 %636, %624
  %638 = xor i64 %637, %634
  %639 = or i64 %3, 890655404949027569
  %640 = and i64 890655404949027569, %3
  %641 = xor i64 890655404949027569, %3
  %642 = or i64 %640, %641
  %643 = or i64 %3, -4646205502388448801
  %644 = xor i64 %3, -1
  %645 = and i64 %644, -4603320100029597673
  %646 = and i64 %3, 4603320100029597672
  %647 = or i64 %645, %646
  %648 = xor i64 9194349828274530760, %647
  %649 = xor i64 %3, -1
  %650 = or i64 4646205502388448800, %649
  %651 = xor i64 %650, -1
  %652 = and i64 %651, -1
  %653 = or i64 %648, %652
  %654 = and i64 %3, -822347819217550788
  %655 = xor i64 %3, -1
  %656 = or i64 822347819217550787, %655
  %657 = xor i64 %656, -1
  %658 = and i64 %657, -1
  %659 = xor i64 %642, %654
  %660 = xor i64 %659, %639
  %661 = xor i64 %660, %643
  %662 = xor i64 %661, %658
  %663 = xor i64 %662, %653
  %664 = xor i64 %663, -6415734471912998921
  %665 = mul i64 %638, %664
  %666 = trunc i64 %665 to i32
  %.reg2mem99 = alloca i1, i32 %666, align 1
  %667 = and i64 %3, -8270226094078361003
  %668 = xor i64 %3, -1
  %669 = xor i64 -8270226094078361003, %668
  %670 = and i64 %669, -8270226094078361003
  %671 = add i64 %3, 3064246153978812186
  %672 = add i64 -7835355643289810626, %3
  %673 = add i64 %672, -7547142276440928804
  %674 = xor i64 -3441688610681774593, %667
  %675 = xor i64 %674, %671
  %676 = xor i64 %675, %670
  %677 = xor i64 %676, %673
  %678 = and i64 %3, -6594085351036547536
  %679 = or i64 6594085351036547535, %3
  %680 = sub i64 %679, 6594085351036547535
  %681 = and i64 %3, 7030142528853838206
  %682 = or i64 -7030142528853838207, %3
  %683 = sub i64 %682, -7030142528853838207
  %684 = xor i64 %683, 2709921816199946751
  %685 = xor i64 %684, %681
  %686 = xor i64 %685, %680
  %687 = xor i64 %686, %678
  %688 = mul i64 %677, %687
  %689 = trunc i64 %688 to i32
  %.reg2mem97 = alloca i64, i32 %689, align 8
  %.reg2mem95 = alloca i1, align 1
  %.reg2mem92 = alloca i64, align 8
  %.reg2mem89 = alloca i1, align 1
  %.reg2mem86 = alloca i1, align 1
  %.reg2mem84 = alloca i1, align 1
  %690 = and i64 %3, -7336244860797540398
  %691 = or i64 7336244860797540397, %3
  %692 = sub i64 %691, 7336244860797540397
  %693 = add i64 %3, -7620400031482127554
  %694 = add i64 -9060983420877479036, %3
  %695 = add i64 %694, 1440583389395351482
  %696 = xor i64 %693, %695
  %697 = xor i64 %696, %692
  %698 = xor i64 %697, %690
  %699 = xor i64 %698, 4477498604184375703
  %700 = or i64 %3, -3516282030362534484
  %701 = xor i64 %3, -1
  %702 = and i64 %701, -3048513708959369741
  %703 = and i64 %3, 3048513708959369740
  %704 = or i64 %702, %703
  %705 = xor i64 1910134209368270943, %704
  %706 = xor i64 %3, -1
  %707 = or i64 3516282030362534483, %706
  %708 = xor i64 %707, -1
  %709 = and i64 %708, -1
  %710 = or i64 %705, %709
  %711 = add i64 %3, -5723699523461735019
  %712 = xor i64 -5723699523461735019, %3
  %713 = and i64 -5723699523461735019, %3
  %714 = mul i64 2, %713
  %715 = add i64 %712, %714
  %716 = xor i64 %710, -2839991621226594777
  %717 = xor i64 %716, %715
  %718 = xor i64 %717, %700
  %719 = xor i64 %718, %711
  %720 = mul i64 %699, %719
  %721 = trunc i64 %720 to i32
  %.reg2mem81 = alloca i64, i32 %721, align 8
  %.reg2mem78 = alloca i64, align 8
  %722 = add i64 %3, -5117450456584515509
  %723 = and i64 -5117450456584515509, %3
  %724 = or i64 -5117450456584515509, %3
  %725 = add i64 %723, %724
  %726 = add i64 %3, 8851632371179017380
  %727 = and i64 8851632371179017380, %3
  %728 = or i64 8851632371179017380, %3
  %729 = add i64 %727, %728
  %730 = and i64 %3, 3184427830075387977
  %731 = or i64 -3184427830075387978, %3
  %732 = sub i64 %731, -3184427830075387978
  %733 = xor i64 53952390843358555, %722
  %734 = xor i64 %733, %732
  %735 = xor i64 %734, %726
  %736 = xor i64 %735, %730
  %737 = xor i64 %736, %725
  %738 = xor i64 %737, %729
  %739 = add i64 %3, 8384522189547795706
  %740 = add i64 -2125744216211754903, %3
  %741 = sub i64 %740, 7936477667950001007
  %742 = and i64 %3, -6122517429841644472
  %743 = xor i64 %3, -1
  %744 = xor i64 -6122517429841644472, %743
  %745 = and i64 %744, -6122517429841644472
  %746 = xor i64 %742, %741
  %747 = xor i64 %746, %739
  %748 = xor i64 %747, -741143604954625325
  %749 = xor i64 %748, %745
  %750 = mul i64 %738, %749
  %751 = trunc i64 %750 to i32
  %.reg2mem73 = alloca i64, i32 %751, align 8
  %.reg2mem70 = alloca i32, align 4
  %752 = and i64 %3, -8362637538352272192
  %753 = xor i64 %3, -1
  %754 = xor i64 -8362637538352272192, %753
  %755 = and i64 %754, -8362637538352272192
  %756 = and i64 %3, 2091552584748339854
  %757 = xor i64 %3, -1
  %758 = or i64 -2091552584748339855, %757
  %759 = xor i64 %758, -1
  %760 = and i64 %759, -1
  %761 = or i64 %3, 367016691367778280
  %762 = and i64 367016691367778280, %3
  %763 = xor i64 367016691367778280, %3
  %764 = or i64 %762, %763
  %765 = xor i64 %752, %755
  %766 = xor i64 %765, %760
  %767 = xor i64 %766, 8997012598441326997
  %768 = xor i64 %767, %761
  %769 = xor i64 %768, %756
  %770 = xor i64 %769, %764
  %771 = and i64 %3, 8587698015041312493
  %772 = or i64 -8587698015041312494, %3
  %773 = sub i64 %772, -8587698015041312494
  %774 = or i64 %3, -6528681397061750051
  %775 = xor i64 %3, -1
  %776 = and i64 %775, -2047185426000859972
  %777 = and i64 %3, 2047185426000859971
  %778 = or i64 %776, %777
  %779 = xor i64 5112598706326232673, %778
  %780 = xor i64 %3, -1
  %781 = or i64 6528681397061750050, %780
  %782 = xor i64 %781, -1
  %783 = and i64 %782, -1
  %784 = or i64 %779, %783
  %785 = xor i64 %773, 3991915348629342653
  %786 = xor i64 %785, %784
  %787 = xor i64 %786, %771
  %788 = xor i64 %787, %774
  %789 = mul i64 %770, %788
  %790 = trunc i64 %789 to i32
  %.reg2mem63 = alloca i32, i32 %790, align 4
  %.reg2mem56 = alloca i64, align 8
  %.reg2mem54 = alloca i1, align 1
  %.reg2mem51 = alloca i1, align 1
  %.reg2mem49 = alloca i64, align 8
  %.reg2mem46 = alloca i1, align 1
  %791 = add i64 %3, -3544405103881848079
  %792 = sub i64 0, %3
  %793 = sub i64 -3544405103881848079, %792
  %794 = or i64 %3, -5953504659037155161
  %795 = xor i64 %3, -1
  %796 = and i64 -5953504659037155161, %795
  %797 = add i64 %796, %3
  %798 = and i64 %3, -6831849317204699016
  %799 = xor i64 %3, -1
  %800 = or i64 6831849317204699015, %799
  %801 = xor i64 %800, -1
  %802 = and i64 %801, -1
  %803 = xor i64 %798, %791
  %804 = xor i64 %803, %794
  %805 = xor i64 %804, %797
  %806 = xor i64 %805, %802
  %807 = xor i64 %806, %793
  %808 = xor i64 %807, -9188002976074255831
  %809 = or i64 %3, -8473865468316281675
  %810 = xor i64 %3, -1
  %811 = and i64 %810, -5795424285734268517
  %812 = and i64 %3, 5795424285734268516
  %813 = or i64 %811, %812
  %814 = xor i64 2734894511911863598, %813
  %815 = xor i64 %3, -1
  %816 = or i64 8473865468316281674, %815
  %817 = xor i64 %816, -1
  %818 = and i64 %817, -1
  %819 = or i64 %814, %818
  %820 = and i64 %3, -7873438713206140893
  %821 = xor i64 %3, -1
  %822 = xor i64 -7873438713206140893, %821
  %823 = and i64 %822, -7873438713206140893
  %824 = xor i64 %820, %823
  %825 = xor i64 %824, 7362643025018030617
  %826 = xor i64 %825, %809
  %827 = xor i64 %826, %819
  %828 = mul i64 %808, %827
  %829 = trunc i64 %828 to i32
  %.reg2mem44 = alloca i1, i32 %829, align 1
  %.reg2mem41 = alloca i1, align 1
  %.reg2mem38 = alloca i64, align 8
  %.reg2mem35 = alloca i64, align 8
  %.reg2mem32 = alloca i1, align 1
  %.reg2mem30 = alloca i1, align 1
  %.reg2mem25 = alloca i64, align 8
  %830 = add i64 %3, -1086863215876315667
  %831 = sub i64 0, %3
  %832 = sub i64 -1086863215876315667, %831
  %833 = or i64 %3, -7506692818041165862
  %834 = and i64 -7506692818041165862, %3
  %835 = xor i64 -7506692818041165862, %3
  %836 = or i64 %834, %835
  %837 = add i64 %3, 3242115601917149691
  %838 = sub i64 0, %3
  %839 = add i64 -3242115601917149691, %838
  %840 = sub i64 0, %839
  %841 = xor i64 %833, %837
  %842 = xor i64 %841, %836
  %843 = xor i64 %842, %832
  %844 = xor i64 %843, %830
  %845 = xor i64 %844, 1524743276097938907
  %846 = xor i64 %845, %840
  %847 = or i64 %3, 6174131064049336307
  %848 = xor i64 %3, -1
  %849 = and i64 %848, -1709184919078018002
  %850 = and i64 %3, 1709184919078018001
  %851 = or i64 %849, %850
  %852 = xor i64 -4762228803038929955, %851
  %853 = xor i64 %3, -1
  %854 = or i64 -6174131064049336308, %853
  %855 = xor i64 %854, -1
  %856 = and i64 %855, -1
  %857 = or i64 %852, %856
  %858 = add i64 %3, 4965955732410871250
  %859 = sub i64 0, %3
  %860 = add i64 -4965955732410871250, %859
  %861 = sub i64 0, %860
  %862 = xor i64 %861, %858
  %863 = xor i64 %862, %857
  %864 = xor i64 %863, -4092683802763473325
  %865 = xor i64 %864, %847
  %866 = mul i64 %846, %865
  %867 = trunc i64 %866 to i32
  %.reg2mem22 = alloca i1, i32 %867, align 1
  %.reg2mem18 = alloca i64, align 8
  %868 = or i64 %3, -5855340073793531309
  %869 = and i64 -5855340073793531309, %3
  %870 = xor i64 -5855340073793531309, %3
  %871 = or i64 %869, %870
  %872 = and i64 %3, 729816621486657406
  %873 = xor i64 %3, -1
  %874 = or i64 -729816621486657407, %873
  %875 = xor i64 %874, -1
  %876 = and i64 %875, -1
  %877 = xor i64 %871, %876
  %878 = xor i64 %877, -1193872636903461009
  %879 = xor i64 %878, %872
  %880 = xor i64 %879, %868
  %881 = and i64 %3, -691667130620384293
  %882 = xor i64 %3, -1
  %883 = or i64 691667130620384292, %882
  %884 = xor i64 %883, -1
  %885 = and i64 %884, -1
  %886 = add i64 %3, -1557625049957828085
  %887 = sub i64 0, %3
  %888 = sub i64 -1557625049957828085, %887
  %889 = add i64 %3, 8999451045997919457
  %890 = add i64 1314467114625944356, %3
  %891 = sub i64 %890, -7684983931371975101
  %892 = xor i64 %888, -2273332265895669873
  %893 = xor i64 %892, %886
  %894 = xor i64 %893, %891
  %895 = xor i64 %894, %889
  %896 = xor i64 %895, %885
  %897 = xor i64 %896, %881
  %898 = mul i64 %880, %897
  %899 = trunc i64 %898 to i32
  %.reg2mem15 = alloca i64, i32 %899, align 8
  %.reg2mem12 = alloca i64, align 8
  %.reg2mem9 = alloca i1, align 1
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem = alloca i64, align 8
  %lookupTable = alloca [65 x i32], align 4
  %900 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %901 = and i64 %3, 3907956835848947834
  %902 = xor i64 %3, -1
  %903 = xor i64 3907956835848947834, %902
  %904 = and i64 %903, 3907956835848947834
  %905 = add i64 %3, -4511087473816504541
  %906 = sub i64 0, %3
  %907 = sub i64 -4511087473816504541, %906
  %908 = xor i64 %907, %905
  %909 = xor i64 %908, %904
  %910 = xor i64 %909, 4749347261750851459
  %911 = xor i64 %910, %901
  %912 = add i64 %3, -8097266354425886766
  %913 = add i64 -6804483862230226150, %3
  %914 = add i64 %913, -1292782492195660616
  %915 = or i64 %3, 774080566589433105
  %916 = xor i64 %3, -1
  %917 = and i64 774080566589433105, %916
  %918 = add i64 %917, %3
  %919 = add i64 %3, -1889836009781722939
  %920 = sub i64 0, %3
  %921 = add i64 1889836009781722939, %920
  %922 = sub i64 0, %921
  %923 = xor i64 %918, %914
  %924 = xor i64 %923, -7245381340428774785
  %925 = xor i64 %924, %922
  %926 = xor i64 %925, %915
  %927 = xor i64 %926, %919
  %928 = xor i64 %927, %912
  %929 = mul i64 %911, %928
  %930 = trunc i64 %929 to i32
  store i32 %930, i32* %900, align 4
  %931 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 1
  %932 = or i64 %3, -1319462894785553932
  %933 = xor i64 %3, -1
  %934 = and i64 %933, -3395302336479429082
  %935 = and i64 %3, 3395302336479429081
  %936 = or i64 %934, %935
  %937 = xor i64 4418354488535508946, %936
  %938 = xor i64 %3, -1
  %939 = or i64 1319462894785553931, %938
  %940 = xor i64 %939, -1
  %941 = and i64 %940, -1
  %942 = or i64 %937, %941
  %943 = and i64 %3, 1307796908477981956
  %944 = or i64 -1307796908477981957, %3
  %945 = sub i64 %944, -1307796908477981957
  %946 = and i64 %3, -2710186058421543634
  %947 = xor i64 %3, -1
  %948 = or i64 2710186058421543633, %947
  %949 = xor i64 %948, -1
  %950 = and i64 %949, -1
  %951 = xor i64 %945, -1726823427425812045
  %952 = xor i64 %951, %942
  %953 = xor i64 %952, %946
  %954 = xor i64 %953, %943
  %955 = xor i64 %954, %950
  %956 = xor i64 %955, %932
  %957 = and i64 %3, 9169743379361342827
  %958 = or i64 -9169743379361342828, %3
  %959 = sub i64 %958, -9169743379361342828
  %960 = add i64 %3, -5898331190996472981
  %961 = add i64 -7860722915505372135, %3
  %962 = add i64 %961, 1962391724508899154
  %963 = add i64 %3, -1249007059995711273
  %964 = add i64 8459253662725645676, %3
  %965 = add i64 %964, 8738483350988194667
  %966 = xor i64 %959, -1295454065757825782
  %967 = xor i64 %966, %963
  %968 = xor i64 %967, %965
  %969 = xor i64 %968, %957
  %970 = xor i64 %969, %962
  %971 = xor i64 %970, %960
  %972 = mul i64 %956, %971
  %973 = trunc i64 %972 to i32
  store i32 %973, i32* %931, align 4
  %974 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %974, align 4
  %975 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %975, align 4
  %976 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %976, align 4
  %977 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %977, align 4
  %978 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %978, align 4
  %979 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %979, align 4
  %980 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %980, align 4
  %981 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %981, align 4
  %982 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 10
  %983 = add i64 %3, 1417855719196996000
  %984 = sub i64 0, %3
  %985 = add i64 -1417855719196996000, %984
  %986 = sub i64 0, %985
  %987 = or i64 %3, -8030959147815881446
  %988 = xor i64 %3, -1
  %989 = and i64 -8030959147815881446, %988
  %990 = add i64 %989, %3
  %991 = add i64 %3, 2564332803354886968
  %992 = add i64 6401491769709012552, %3
  %993 = sub i64 %992, 3837158966354125584
  %994 = xor i64 %991, %990
  %995 = xor i64 %994, %987
  %996 = xor i64 %995, %993
  %997 = xor i64 %996, %983
  %998 = xor i64 %997, -4992164409538729523
  %999 = xor i64 %998, %986
  %1000 = add i64 %3, -7561478882515562082
  %1001 = sub i64 0, %3
  %1002 = sub i64 -7561478882515562082, %1001
  %1003 = add i64 %3, -7314524335911138362
  %1004 = add i64 6250904250691566386, %3
  %1005 = sub i64 %1004, -4881315487106846868
  %1006 = add i64 %3, 5049893139394234682
  %1007 = and i64 5049893139394234682, %3
  %1008 = or i64 5049893139394234682, %3
  %1009 = add i64 %1007, %1008
  %1010 = xor i64 %1000, %1006
  %1011 = xor i64 %1010, %1002
  %1012 = xor i64 %1011, 801026231698386211
  %1013 = xor i64 %1012, %1009
  %1014 = xor i64 %1013, %1005
  %1015 = xor i64 %1014, %1003
  %1016 = mul i64 %999, %1015
  %1017 = trunc i64 %1016 to i32
  store i32 %1017, i32* %982, align 4
  %1018 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %1018, align 4
  %1019 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %1019, align 4
  %1020 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %1020, align 4
  %1021 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %1021, align 4
  %1022 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %1022, align 4
  %1023 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %1023, align 4
  %1024 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %1024, align 4
  %1025 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %1025, align 4
  %1026 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %1026, align 4
  %1027 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %1027, align 4
  %1028 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %1028, align 4
  %1029 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %1029, align 4
  %1030 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 23
  store i32 20, i32* %1030, align 4
  %1031 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 24
  %1032 = and i64 %3, -1698583277207645560
  %1033 = xor i64 %3, -1
  %1034 = xor i64 -1698583277207645560, %1033
  %1035 = and i64 %1034, -1698583277207645560
  %1036 = add i64 %3, -4066809722589782334
  %1037 = sub i64 0, %3
  %1038 = sub i64 -4066809722589782334, %1037
  %1039 = or i64 %3, -7066627763180996005
  %1040 = xor i64 %3, -1
  %1041 = and i64 %1040, -3582725021695809707
  %1042 = and i64 %3, 3582725021695809706
  %1043 = or i64 %1041, %1042
  %1044 = xor i64 6028580397523410190, %1043
  %1045 = xor i64 %3, -1
  %1046 = or i64 7066627763180996004, %1045
  %1047 = xor i64 %1046, -1
  %1048 = and i64 %1047, -1
  %1049 = or i64 %1044, %1048
  %1050 = xor i64 %1035, %1038
  %1051 = xor i64 %1050, %1039
  %1052 = xor i64 %1051, %1036
  %1053 = xor i64 %1052, %1049
  %1054 = xor i64 %1053, %1032
  %1055 = xor i64 %1054, -7482743819874624977
  %1056 = or i64 %3, 7669195739764537768
  %1057 = xor i64 %3, -1
  %1058 = and i64 %1057, -3995608134392075601
  %1059 = and i64 %3, 3995608134392075600
  %1060 = or i64 %1058, %1059
  %1061 = xor i64 -6709576786583448825, %1060
  %1062 = xor i64 %3, -1
  %1063 = or i64 -7669195739764537769, %1062
  %1064 = xor i64 %1063, -1
  %1065 = and i64 %1064, -1
  %1066 = or i64 %1061, %1065
  %1067 = add i64 %3, -4210800539314647544
  %1068 = sub i64 0, %3
  %1069 = sub i64 -4210800539314647544, %1068
  %1070 = add i64 %3, -5009520275324689807
  %1071 = and i64 -5009520275324689807, %3
  %1072 = or i64 -5009520275324689807, %3
  %1073 = add i64 %1071, %1072
  %1074 = xor i64 %1070, %1056
  %1075 = xor i64 %1074, %1069
  %1076 = xor i64 %1075, %1067
  %1077 = xor i64 %1076, %1066
  %1078 = xor i64 %1077, %1073
  %1079 = xor i64 %1078, 3175951225879817467
  %1080 = mul i64 %1055, %1079
  %1081 = trunc i64 %1080 to i32
  store i32 %1081, i32* %1031, align 4
  %1082 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %1082, align 4
  %1083 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %1083, align 4
  %1084 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %1084, align 4
  %1085 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 28
  store i32 25, i32* %1085, align 4
  %1086 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 29
  store i32 26, i32* %1086, align 4
  %1087 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 30
  store i32 27, i32* %1087, align 4
  %1088 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %1088, align 4
  %1089 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %1089, align 4
  %1090 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %1090, align 4
  %1091 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %1091, align 4
  %1092 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %1092, align 4
  %1093 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %1093, align 4
  %1094 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %1094, align 4
  %1095 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 38
  store i32 35, i32* %1095, align 4
  %1096 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 39
  store i32 36, i32* %1096, align 4
  %1097 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 40
  store i32 37, i32* %1097, align 4
  %1098 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 41
  store i32 38, i32* %1098, align 4
  %1099 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 42
  store i32 39, i32* %1099, align 4
  %1100 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 43
  store i32 40, i32* %1100, align 4
  %1101 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 44
  store i32 41, i32* %1101, align 4
  %1102 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 45
  %1103 = add i64 %3, -9088739712827057852
  %1104 = and i64 -9088739712827057852, %3
  %1105 = or i64 -9088739712827057852, %3
  %1106 = add i64 %1104, %1105
  %1107 = and i64 %3, 8143506540179985767
  %1108 = xor i64 %3, -1
  %1109 = xor i64 8143506540179985767, %1108
  %1110 = and i64 %1109, 8143506540179985767
  %1111 = add i64 %3, -376686267960268626
  %1112 = and i64 -376686267960268626, %3
  %1113 = or i64 -376686267960268626, %3
  %1114 = add i64 %1112, %1113
  %1115 = xor i64 %1106, %1103
  %1116 = xor i64 %1115, 8790091351208147313
  %1117 = xor i64 %1116, %1111
  %1118 = xor i64 %1117, %1110
  %1119 = xor i64 %1118, %1114
  %1120 = xor i64 %1119, %1107
  %1121 = add i64 %3, 3271959669138673363
  %1122 = xor i64 3271959669138673363, %3
  %1123 = and i64 3271959669138673363, %3
  %1124 = mul i64 2, %1123
  %1125 = add i64 %1122, %1124
  %1126 = add i64 %3, -5387329070363476644
  %1127 = add i64 -1068574378434723349, %3
  %1128 = sub i64 %1127, 4318754691928753295
  %1129 = xor i64 %1126, %1125
  %1130 = xor i64 %1129, 2600276008037645770
  %1131 = xor i64 %1130, %1121
  %1132 = xor i64 %1131, %1128
  %1133 = mul i64 %1120, %1132
  %1134 = trunc i64 %1133 to i32
  store i32 %1134, i32* %1102, align 4
  %1135 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 46
  store i32 43, i32* %1135, align 4
  %1136 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 47
  store i32 44, i32* %1136, align 4
  %1137 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 48
  store i32 45, i32* %1137, align 4
  %1138 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 49
  store i32 46, i32* %1138, align 4
  %1139 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 50
  store i32 47, i32* %1139, align 4
  %1140 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 51
  store i32 48, i32* %1140, align 4
  %1141 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 52
  store i32 49, i32* %1141, align 4
  %1142 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 53
  store i32 50, i32* %1142, align 4
  %1143 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 54
  store i32 51, i32* %1143, align 4
  %1144 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 55
  store i32 52, i32* %1144, align 4
  %1145 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 56
  store i32 53, i32* %1145, align 4
  %1146 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 57
  store i32 54, i32* %1146, align 4
  %1147 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 58
  store i32 55, i32* %1147, align 4
  %1148 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 59
  store i32 56, i32* %1148, align 4
  %1149 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 60
  store i32 57, i32* %1149, align 4
  %1150 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 61
  store i32 58, i32* %1150, align 4
  %1151 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 62
  store i32 59, i32* %1151, align 4
  %1152 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 63
  store i32 60, i32* %1152, align 4
  %1153 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  store i32 61, i32* %1153, align 4
  %1154 = srem i64 %3, 2
  store i64 %1154, i64* %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  %1155 = or i64 %3, -6132809405259748897
  %1156 = xor i64 %3, -1
  %1157 = and i64 -6132809405259748897, %1156
  %1158 = add i64 %1157, %3
  %1159 = add i64 %3, -8495089971984135130
  %1160 = add i64 6178819950992539859, %3
  %1161 = add i64 %1160, 3772834150732876627
  %1162 = xor i64 %1158, %1159
  %1163 = xor i64 %1162, %1155
  %1164 = xor i64 %1163, -8805981247831022641
  %1165 = xor i64 %1164, %1161
  %1166 = and i64 %3, -6799524110171201845
  %1167 = or i64 6799524110171201844, %3
  %1168 = sub i64 %1167, 6799524110171201844
  %1169 = or i64 %3, 6001184703610116945
  %1170 = xor i64 %3, -1
  %1171 = and i64 6001184703610116945, %1170
  %1172 = add i64 %1171, %3
  %1173 = xor i64 %1168, -948022723429905849
  %1174 = xor i64 %1173, %1172
  %1175 = xor i64 %1174, %1166
  %1176 = xor i64 %1175, %1169
  %1177 = mul i64 %1165, %1176
  %1178 = trunc i64 %1177 to i32
  store i32 %1178, i32* %4, align 4
  %1179 = call i8** @bf6047435729067610447(i32* %4)
  %1180 = load i8*, i8** %1179, align 8
  indirectbr i8* %1180, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %1268
    i32 2, label %1495
    i32 3, label %1529
    i32 4, label %1711
    i32 5, label %1815
    i32 6, label %1898
    i32 7, label %.preheader
    i32 8, label %2156
    i32 9, label %2380
    i32 10, label %2516
    i32 11, label %2773
    i32 12, label %codeRepl
    i32 13, label %3031
    i32 14, label %3095
    i32 15, label %3222
    i32 16, label %3322
    i32 17, label %3502
    i32 18, label %3713
    i32 19, label %3851
    i32 20, label %3916
    i32 21, label %codeRepl1
    i32 22, label %4171
    i32 23, label %codeRepl2
    i32 24, label %codeRepl3
    i32 25, label %codeRepl4
    i32 26, label %4544
    i32 27, label %4768
    i32 28, label %codeRepl5
    i32 29, label %codeRepl6
    i32 30, label %5159
    i32 31, label %5244
    i32 32, label %5370
    i32 33, label %5467
    i32 34, label %5492
    i32 35, label %5524
    i32 36, label %codeRepl7
    i32 37, label %codeRepl8
    i32 38, label %5777
    i32 39, label %codeRepl9
    i32 40, label %5943
    i32 41, label %6273
    i32 42, label %6359
    i32 43, label %6725
    i32 44, label %6964
    i32 45, label %7083
    i32 46, label %7245
    i32 47, label %codeRepl10
    i32 48, label %codeRepl11
    i32 49, label %7572
    i32 50, label %7630
    i32 51, label %codeRepl12
    i32 52, label %7803
    i32 53, label %7834
    i32 54, label %7895
    i32 55, label %8055
    i32 56, label %8118
    i32 57, label %codeRepl13
    i32 58, label %.loopexit
    i32 59, label %8341
    i32 60, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload6 = load i64, i64* %.reg2mem, align 8
  %1181 = icmp eq i64 %.reload6, 0
  %1182 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 4
  %1183 = load i32, i32* %1182, align 4
  %1184 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 3
  %1185 = load i32, i32* %1184, align 4
  %1186 = add i32 %1183, %1185
  %1187 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 6
  %1188 = load i32, i32* %1187, align 4
  %1189 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 5
  %1190 = load i32, i32* %1189, align 4
  %1191 = add i32 %1188, %1190
  %1192 = select i1 %1181, i32 %1186, i32 %1191
  store i32 %1192, i32* %dispatcher, align 4
  %1193 = load i8*, i8** %295, align 8
  %1194 = load i8, i8* %1193, align 1
  %1195 = or i64 %449, -4259242833714469795
  %1196 = xor i64 %449, -1
  %1197 = and i64 %1196, -5384327064372208832
  %1198 = and i64 %449, 5384327064372208831
  %1199 = or i64 %1197, %1198
  %1200 = xor i64 8188430580082327325, %1199
  %1201 = xor i64 %449, -1
  %1202 = or i64 4259242833714469794, %1201
  %1203 = xor i64 %1202, -1
  %1204 = and i64 %1203, -1
  %1205 = or i64 %1200, %1204
  %1206 = or i64 %60, -1721985826013112205
  %1207 = xor i64 %60, -1
  %1208 = and i64 %1207, -733599999803302760
  %1209 = and i64 %60, 733599999803302759
  %1210 = or i64 %1208, %1209
  %1211 = xor i64 2147088562955502827, %1210
  %1212 = xor i64 %60, -1
  %1213 = or i64 1721985826013112204, %1212
  %1214 = xor i64 %1213, -1
  %1215 = and i64 %1214, -1
  %1216 = or i64 %1211, %1215
  %1217 = and i64 %80, -4282848241323100099
  %1218 = or i64 4282848241323100098, %80
  %1219 = sub i64 %1218, 4282848241323100098
  %1220 = xor i64 %1195, %1205
  %1221 = xor i64 %1220, %1206
  %1222 = xor i64 %1221, %1217
  %1223 = xor i64 %1222, %1219
  %1224 = xor i64 %1223, %1216
  %1225 = xor i64 %1224, 4929958854927587737
  %1226 = add i64 %68, -364514311054149986
  %1227 = sub i64 0, %68
  %1228 = add i64 364514311054149986, %1227
  %1229 = sub i64 0, %1228
  %1230 = or i64 %68, -6083890896778500972
  %1231 = xor i64 %68, -1
  %1232 = and i64 %1231, -7402308431224639190
  %1233 = and i64 %68, 7402308431224639189
  %1234 = or i64 %1232, %1233
  %1235 = xor i64 3662581834592622014, %1234
  %1236 = xor i64 %68, -1
  %1237 = or i64 6083890896778500971, %1236
  %1238 = xor i64 %1237, -1
  %1239 = and i64 %1238, -1
  %1240 = or i64 %1235, %1239
  %1241 = sext i32 %dispatcher1 to i64
  %1242 = or i64 %1241, -8084978215011245668
  %1243 = and i64 -8084978215011245668, %1241
  %1244 = xor i64 -8084978215011245668, %1241
  %1245 = or i64 %1243, %1244
  %1246 = xor i64 %1229, %1226
  %1247 = xor i64 %1246, -1667843898211402153
  %1248 = xor i64 %1247, %1242
  %1249 = xor i64 %1248, %1240
  %1250 = xor i64 %1249, %1230
  %1251 = xor i64 %1250, %1245
  %1252 = mul i64 %1225, %1251
  %1253 = trunc i64 %1252 to i8
  %1254 = xor i8 %1194, %1253
  %1255 = or i8 %1254, -2
  %1256 = xor i8 %1255, -1
  %1257 = and i8 %1256, -1
  %1258 = icmp eq i8 %1257, 1
  %1259 = mul i8 %1194, %1194
  %1260 = add i8 %1259, %1194
  %1261 = srem i8 %1260, 2
  %1262 = icmp eq i8 %1261, 0
  %1263 = or i1 %1258, %1262
  %1264 = select i1 %1263, i32 984876099, i32 984876144
  %1265 = xor i32 %1264, 51
  store i32 %1265, i32* %4, align 4
  %1266 = call i8** @bf6047435729067610447(i32* %4)
  %1267 = load i8*, i8** %1266, align 8
  indirectbr i8* %1267, [label %loopEnd, label %EntryBasicBlockSplit]

1268:                                             ; preds = %1268, %loopStart
  %1269 = sub i64 25, 35
  %1270 = icmp eq i64 %3, 1760
  store i1 %1270, i1* %.reg2mem7, align 1
  %1271 = mul i64 34, 51
  %1272 = sdiv i64 114, 60
  %1273 = sdiv i64 77, 42
  %1274 = srem i64 %3, 2
  %1275 = icmp eq i64 %1274, 0
  %1276 = mul i64 %3, 2
  %1277 = mul i64 %3, 2
  %1278 = sub i64 0, %1277
  %1279 = and i64 %302, 7685385131320340963
  %1280 = xor i64 %302, -1
  %1281 = xor i64 7685385131320340963, %1280
  %1282 = and i64 %1281, 7685385131320340963
  %1283 = and i64 %68, -4818012317008879515
  %1284 = or i64 4818012317008879514, %68
  %1285 = sub i64 %1284, 4818012317008879514
  %1286 = add i64 %1154, -3313211474244444380
  %1287 = sub i64 0, %1154
  %1288 = sub i64 -3313211474244444380, %1287
  %1289 = xor i64 %1286, %1283
  %1290 = xor i64 %1289, %1285
  %1291 = xor i64 %1290, %1288
  %1292 = xor i64 %1291, 1715463647793090501
  %1293 = xor i64 %1292, %1279
  %1294 = xor i64 %1293, %1282
  %1295 = add i64 %304, -718077199062341837
  %1296 = add i64 515156457966121600, %304
  %1297 = sub i64 %1296, 1233233657028463437
  %1298 = and i64 %416, -8336194969544090519
  %1299 = xor i64 %416, -1
  %1300 = xor i64 -8336194969544090519, %1299
  %1301 = and i64 %1300, -8336194969544090519
  %1302 = xor i64 %1295, 875901024592581094
  %1303 = xor i64 %1302, %1297
  %1304 = xor i64 %1303, %1298
  %1305 = xor i64 %1304, %1301
  %1306 = mul i64 %1294, %1305
  %1307 = add i64 %1306, %1278
  %1308 = or i64 %72, 7185690449620997132
  %1309 = and i64 7185690449620997132, %72
  %1310 = xor i64 7185690449620997132, %72
  %1311 = or i64 %1309, %1310
  %1312 = add i64 %456, -7864939106397122100
  %1313 = sub i64 0, %456
  %1314 = add i64 7864939106397122100, %1313
  %1315 = sub i64 0, %1314
  %1316 = or i64 %140, -8447875883086755190
  %1317 = and i64 -8447875883086755190, %140
  %1318 = xor i64 -8447875883086755190, %140
  %1319 = or i64 %1317, %1318
  %1320 = xor i64 %1316, %1311
  %1321 = xor i64 %1320, %1315
  %1322 = xor i64 %1321, 2572894530390945393
  %1323 = xor i64 %1322, %1308
  %1324 = xor i64 %1323, %1312
  %1325 = xor i64 %1324, %1319
  %1326 = and i64 %580, -1243857982073950404
  %1327 = xor i64 %580, -1
  %1328 = xor i64 -1243857982073950404, %1327
  %1329 = and i64 %1328, -1243857982073950404
  %1330 = add i64 %58, -4645863210771237125
  %1331 = add i64 5806540818442867731, %58
  %1332 = sub i64 %1331, -7994340044495446760
  %1333 = and i64 %78, -1118254165725149500
  %1334 = xor i64 %78, -1
  %1335 = or i64 1118254165725149499, %1334
  %1336 = xor i64 %1335, -1
  %1337 = and i64 %1336, -1
  %1338 = xor i64 %1326, %1337
  %1339 = xor i64 %1338, 0
  %1340 = xor i64 %1339, %1329
  %1341 = xor i64 %1340, %1333
  %1342 = xor i64 %1341, %1332
  %1343 = xor i64 %1342, %1330
  %1344 = mul i64 %1325, %1343
  %1345 = sub i64 %1344, %1307
  %1346 = mul i64 %1276, %1345
  %1347 = srem i64 %1346, 4
  %1348 = icmp eq i64 %1347, 0
  %1349 = mul i64 %3, %3
  %1350 = mul i64 %1349, %3
  %1351 = add i64 %1350, %3
  %1352 = srem i64 %1351, 2
  %1353 = icmp eq i64 %1352, 0
  %1354 = and i1 %1348, %1353
  store i1 %1354, i1* %.reg2mem9, align 1
  %1355 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 6
  %1356 = load i32, i32* %1355, align 4
  %1357 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %1358 = load i32, i32* %1357, align 4
  %1359 = srem i32 %1356, %1358
  %1360 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 57
  %1361 = load i32, i32* %1360, align 4
  %1362 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 55
  %1363 = load i32, i32* %1362, align 4
  %1364 = sub i32 %1361, %1363
  %.reload11 = load i1, i1* %.reg2mem9, align 1
  %1365 = select i1 %.reload11, i32 %1359, i32 %1364
  store i32 %1365, i32* %dispatcher, align 4
  %1366 = load i8*, i8** %182, align 8
  %1367 = load i8, i8* %1366, align 1
  %1368 = add i64 %74, -3128638782252420628
  %1369 = sub i64 0, %74
  %1370 = sub i64 -3128638782252420628, %1369
  %1371 = add i64 %19, 5092276415141962368
  %1372 = add i64 -1145450967810426220, %19
  %1373 = sub i64 %1372, -6237727382952388588
  %1374 = add i64 %116, -6472576276012162243
  %1375 = add i64 5942753734307057584, %116
  %1376 = add i64 %1375, 6031414063390331789
  %1377 = xor i64 %1373, %1376
  %1378 = xor i64 %1377, %1371
  %1379 = xor i64 %1378, %1368
  %1380 = xor i64 %1379, -4484096610043778471
  %1381 = xor i64 %1380, %1374
  %1382 = xor i64 %1381, %1370
  %1383 = add i64 %201, -4841895765651529056
  %1384 = sub i64 0, %201
  %1385 = add i64 4841895765651529056, %1384
  %1386 = sub i64 0, %1385
  %1387 = add i64 %551, 6858111456961405166
  %1388 = and i64 6858111456961405166, %551
  %1389 = or i64 6858111456961405166, %551
  %1390 = add i64 %1388, %1389
  %1391 = and i64 %189, -6482960659984910197
  %1392 = xor i64 %189, -1
  %1393 = xor i64 -6482960659984910197, %1392
  %1394 = and i64 %1393, -6482960659984910197
  %1395 = xor i64 %1383, %1394
  %1396 = xor i64 %1395, -5918506693005153513
  %1397 = xor i64 %1396, %1390
  %1398 = xor i64 %1397, %1387
  %1399 = xor i64 %1398, %1386
  %1400 = xor i64 %1399, %1391
  %1401 = mul i64 %1382, %1400
  %1402 = trunc i64 %1401 to i8
  %1403 = xor i8 %1367, %1402
  %1404 = or i64 %584, -2590090061660845424
  %1405 = xor i64 %584, -1
  %1406 = and i64 %1405, 6218513420259255355
  %1407 = and i64 %584, -6218513420259255356
  %1408 = or i64 %1406, %1407
  %1409 = xor i64 -8484007856932983125, %1408
  %1410 = xor i64 %584, -1
  %1411 = or i64 2590090061660845423, %1410
  %1412 = xor i64 %1411, -1
  %1413 = and i64 %1412, -1
  %1414 = or i64 %1409, %1413
  %1415 = add i64 %187, -4159097717242834809
  %1416 = sub i64 0, %187
  %1417 = sub i64 -4159097717242834809, %1416
  %1418 = xor i64 %1404, %1414
  %1419 = xor i64 %1418, %1415
  %1420 = xor i64 %1419, 6801825361244146315
  %1421 = xor i64 %1420, %1417
  %1422 = and i64 %60, 718124232044611894
  %1423 = xor i64 %60, -1
  %1424 = xor i64 718124232044611894, %1423
  %1425 = and i64 %1424, 718124232044611894
  %1426 = add i64 %7, 7707247163003984004
  %1427 = and i64 7707247163003984004, %7
  %1428 = or i64 7707247163003984004, %7
  %1429 = add i64 %1427, %1428
  %1430 = xor i64 -8981850509129905990, %1422
  %1431 = xor i64 %1430, %1429
  %1432 = xor i64 %1431, %1426
  %1433 = xor i64 %1432, %1425
  %1434 = mul i64 %1421, %1433
  %1435 = trunc i64 %1434 to i8
  %1436 = or i8 %1403, %1435
  %1437 = and i64 %116, 5613637165232703994
  %1438 = or i64 -5613637165232703995, %116
  %1439 = sub i64 %1438, -5613637165232703995
  %1440 = add i64 %11, -7018136365447310362
  %1441 = sub i64 0, %11
  %1442 = add i64 7018136365447310362, %1441
  %1443 = sub i64 0, %1442
  %1444 = and i64 %64, -744471343034027464
  %1445 = xor i64 %64, -1
  %1446 = xor i64 -744471343034027464, %1445
  %1447 = and i64 %1446, -744471343034027464
  %1448 = xor i64 %1440, 2344419998808754235
  %1449 = xor i64 %1448, %1443
  %1450 = xor i64 %1449, %1447
  %1451 = xor i64 %1450, %1444
  %1452 = xor i64 %1451, %1437
  %1453 = xor i64 %1452, %1439
  %1454 = or i64 %185, 5979443052618142118
  %1455 = xor i64 %185, -1
  %1456 = and i64 %1455, -9215261485210213651
  %1457 = and i64 %185, 9215261485210213650
  %1458 = or i64 %1456, %1457
  %1459 = xor i64 -3249365520783264949, %1458
  %1460 = xor i64 %185, -1
  %1461 = or i64 -5979443052618142119, %1460
  %1462 = xor i64 %1461, -1
  %1463 = and i64 %1462, -1
  %1464 = or i64 %1459, %1463
  %1465 = add i64 %294, -3702298872973693821
  %1466 = xor i64 -3702298872973693821, %294
  %1467 = and i64 -3702298872973693821, %294
  %1468 = mul i64 2, %1467
  %1469 = add i64 %1466, %1468
  %1470 = or i64 %58, 6807415189128059465
  %1471 = xor i64 %58, -1
  %1472 = and i64 6807415189128059465, %1471
  %1473 = add i64 %1472, %58
  %1474 = xor i64 7294893262284694029, %1454
  %1475 = xor i64 %1474, %1469
  %1476 = xor i64 %1475, %1465
  %1477 = xor i64 %1476, %1464
  %1478 = xor i64 %1477, %1470
  %1479 = xor i64 %1478, %1473
  %1480 = mul i64 %1453, %1479
  %1481 = trunc i64 %1480 to i8
  %1482 = xor i8 %1436, %1481
  %1483 = and i8 %1482, -1
  %1484 = icmp eq i8 %1483, 1
  %1485 = mul i8 %1367, %1367
  %1486 = add i8 %1485, %1367
  %1487 = srem i8 %1486, 2
  %1488 = icmp eq i8 %1487, 0
  %1489 = or i1 %1484, %1488
  %1490 = select i1 %1489, i32 984876103, i32 984876144
  %1491 = xor i32 %1490, -1321891147
  %1492 = xor i32 %1491, -1321891198
  store i32 %1492, i32* %4, align 4
  %1493 = call i8** @bf6047435729067610447(i32* %4)
  %1494 = load i8*, i8** %1493, align 8
  indirectbr i8* %1494, [label %loopEnd, label %1268]

1495:                                             ; preds = %1495, %loopStart
  %1496 = sdiv i64 54, 17
  %1497 = sub i64 -1474853819510590634, -1474853819510590730
  %1498 = sdiv i64 117, 60
  %1499 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 6
  %1500 = load i32, i32* %1499, align 4
  %1501 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 4
  %1502 = load i32, i32* %1501, align 4
  %1503 = add i32 %1500, %1502
  %1504 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 4
  %1505 = load i32, i32* %1504, align 4
  %1506 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 3
  %1507 = load i32, i32* %1506, align 4
  %1508 = add i32 %1505, %1507
  %.reload10 = load i1, i1* %.reg2mem9, align 1
  %1509 = select i1 %.reload10, i32 %1503, i32 %1508
  store i32 %1509, i32* %dispatcher, align 4
  %1510 = load i8*, i8** %22, align 8
  %1511 = load i8, i8* %1510, align 1
  %1512 = and i8 %1511, 1
  %1513 = icmp eq i8 %1512, 1
  %1514 = mul i8 %1511, %1511
  %1515 = and i8 %1514, %1511
  %1516 = or i8 %1514, %1511
  %1517 = add i8 %1515, %1516
  %1518 = srem i8 %1517, 2
  %1519 = icmp eq i8 %1518, 0
  %1520 = or i1 %1513, %1519
  %1521 = select i1 %1520, i32 984876135, i32 984876144
  %1522 = xor i32 %1521, -1
  %1523 = and i32 %1522, -807869598
  %1524 = and i32 %1521, 807869597
  %1525 = or i32 %1523, %1524
  %1526 = xor i32 %1525, -807869579
  store i32 %1526, i32* %4, align 4
  %1527 = call i8** @bf6047435729067610447(i32* %4)
  %1528 = load i8*, i8** %1527, align 8
  indirectbr i8* %1528, [label %loopEnd, label %1495]

1529:                                             ; preds = %1529, %loopStart
  %1530 = or i64 %84, 7727291492958498817
  %1531 = xor i64 %84, -1
  %1532 = and i64 %1531, 7527625451564302335
  %1533 = and i64 %84, -7527625451564302336
  %1534 = or i64 %1532, %1533
  %1535 = xor i64 237465765704208382, %1534
  %1536 = xor i64 %84, -1
  %1537 = or i64 -7727291492958498818, %1536
  %1538 = xor i64 %1537, -1
  %1539 = and i64 %1538, -1
  %1540 = or i64 %1535, %1539
  %1541 = and i64 %243, -3968476353179530650
  %1542 = or i64 3968476353179530649, %243
  %1543 = sub i64 %1542, 3968476353179530649
  %1544 = xor i64 %1540, %1530
  %1545 = xor i64 %1544, -9007712681190821283
  %1546 = xor i64 %1545, %1541
  %1547 = xor i64 %1546, %1543
  %1548 = add i64 %191, -3659025522988236129
  %1549 = xor i64 -3659025522988236129, %191
  %1550 = and i64 -3659025522988236129, %191
  %1551 = mul i64 2, %1550
  %1552 = add i64 %1549, %1551
  %1553 = or i64 %21, -3282972079473199207
  %1554 = and i64 -3282972079473199207, %21
  %1555 = xor i64 -3282972079473199207, %21
  %1556 = or i64 %1554, %1555
  %1557 = or i64 %549, 8064408767501374511
  %1558 = xor i64 %549, -1
  %1559 = and i64 %1558, -3946421008506310340
  %1560 = and i64 %549, 3946421008506310339
  %1561 = or i64 %1559, %1560
  %1562 = xor i64 -6426084659941038829, %1561
  %1563 = xor i64 %549, -1
  %1564 = or i64 -8064408767501374512, %1563
  %1565 = xor i64 %1564, -1
  %1566 = and i64 %1565, -1
  %1567 = or i64 %1562, %1566
  %1568 = xor i64 %1553, %1556
  %1569 = xor i64 %1568, 1003597424810430789
  %1570 = xor i64 %1569, %1552
  %1571 = xor i64 %1570, %1548
  %1572 = xor i64 %1571, %1557
  %1573 = xor i64 %1572, %1567
  %1574 = mul i64 %1547, %1573
  %1575 = sdiv i64 54, %1574
  %1576 = add i64 53, 43
  %1577 = sdiv i64 117, 60
  %1578 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 52
  %1579 = load i32, i32* %1578, align 4
  %1580 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 48
  %1581 = load i32, i32* %1580, align 4
  %1582 = sub i32 %1579, %1581
  store i32 %1582, i32* %dispatcher, align 4
  %1583 = load i8*, i8** %75, align 8
  %1584 = load i8, i8* %1583, align 1
  %1585 = mul i8 %1584, 2
  %1586 = mul i8 %1584, 2
  %1587 = xor i8 2, %1586
  %1588 = and i8 2, %1586
  %1589 = add i64 %302, 8614747273257974825
  %1590 = and i64 8614747273257974825, %302
  %1591 = or i64 8614747273257974825, %302
  %1592 = add i64 %1590, %1591
  %1593 = or i64 %193, 5233105968496294307
  %1594 = and i64 5233105968496294307, %193
  %1595 = xor i64 5233105968496294307, %193
  %1596 = or i64 %1594, %1595
  %1597 = add i64 %175, -2026753772677893333
  %1598 = sub i64 0, %175
  %1599 = sub i64 -2026753772677893333, %1598
  %1600 = xor i64 %1599, %1593
  %1601 = xor i64 %1600, %1597
  %1602 = xor i64 %1601, %1589
  %1603 = xor i64 %1602, %1596
  %1604 = xor i64 %1603, %1592
  %1605 = xor i64 %1604, -3814609942804623461
  %1606 = or i64 %199, -6739466791029871150
  %1607 = and i64 -6739466791029871150, %199
  %1608 = xor i64 -6739466791029871150, %199
  %1609 = or i64 %1607, %1608
  %1610 = add i64 %245, 6642227915134716716
  %1611 = sub i64 0, %245
  %1612 = add i64 -6642227915134716716, %1611
  %1613 = sub i64 0, %1612
  %1614 = and i64 %458, 4545685288114034265
  %1615 = xor i64 %458, -1
  %1616 = xor i64 4545685288114034265, %1615
  %1617 = and i64 %1616, 4545685288114034265
  %1618 = xor i64 %1606, %1609
  %1619 = xor i64 %1618, %1614
  %1620 = xor i64 %1619, %1610
  %1621 = xor i64 %1620, %1617
  %1622 = xor i64 %1621, %1613
  %1623 = xor i64 %1622, 7487617606956055846
  %1624 = mul i64 %1605, %1623
  %1625 = trunc i64 %1624 to i8
  %1626 = mul i8 %1625, %1588
  %1627 = add i8 %1587, %1626
  %1628 = mul i8 39, %1627
  %1629 = add i64 %344, -4116910010498758144
  %1630 = sub i64 0, %344
  %1631 = sub i64 -4116910010498758144, %1630
  %1632 = and i64 %304, 9139219831473123584
  %1633 = xor i64 %304, -1
  %1634 = xor i64 9139219831473123584, %1633
  %1635 = and i64 %1634, 9139219831473123584
  %1636 = and i64 %177, 4693928466396249060
  %1637 = xor i64 %177, -1
  %1638 = xor i64 4693928466396249060, %1637
  %1639 = and i64 %1638, 4693928466396249060
  %1640 = xor i64 -2390764967983207943, %1629
  %1641 = xor i64 %1640, %1635
  %1642 = xor i64 %1641, %1636
  %1643 = xor i64 %1642, %1639
  %1644 = xor i64 %1643, %1632
  %1645 = xor i64 %1644, %1631
  %1646 = add i64 %551, 1014331130513749586
  %1647 = add i64 -5332261899303287099, %551
  %1648 = sub i64 %1647, -6346593029817036685
  %1649 = or i64 %420, 3563435746013906133
  %1650 = xor i64 %420, -1
  %1651 = and i64 3563435746013906133, %1650
  %1652 = add i64 %1651, %420
  %1653 = add i64 %302, 9137561684772391596
  %1654 = and i64 9137561684772391596, %302
  %1655 = or i64 9137561684772391596, %302
  %1656 = add i64 %1654, %1655
  %1657 = xor i64 4334512200203763343, %1653
  %1658 = xor i64 %1657, %1656
  %1659 = xor i64 %1658, %1646
  %1660 = xor i64 %1659, %1652
  %1661 = xor i64 %1660, %1648
  %1662 = xor i64 %1661, %1649
  %1663 = mul i64 %1645, %1662
  %1664 = trunc i64 %1663 to i8
  %1665 = add i8 %1664, %1628
  %1666 = mul i8 -105, %1665
  %1667 = add i8 111, %1666
  %1668 = mul i8 %1585, %1667
  %1669 = srem i8 %1668, 4
  %1670 = icmp eq i8 %1669, 0
  %1671 = mul i8 %1584, %1584
  %1672 = add i8 %1671, %1584
  %1673 = srem i8 %1672, 2
  %1674 = icmp eq i8 %1673, 0
  %1675 = or i1 %1670, %1674
  %1676 = select i1 %1675, i32 984876131, i32 984876144
  %1677 = and i64 %175, 5706518765435750141
  %1678 = xor i64 %175, -1
  %1679 = xor i64 5706518765435750141, %1678
  %1680 = and i64 %1679, 5706518765435750141
  %1681 = or i64 %298, 4551524354416354848
  %1682 = xor i64 %298, -1
  %1683 = and i64 %1682, -4184479808634736037
  %1684 = and i64 %298, 4184479808634736036
  %1685 = or i64 %1683, %1684
  %1686 = xor i64 -376052210518289285, %1685
  %1687 = xor i64 %298, -1
  %1688 = or i64 -4551524354416354849, %1687
  %1689 = xor i64 %1688, -1
  %1690 = and i64 %1689, -1
  %1691 = or i64 %1686, %1690
  %1692 = xor i64 -1857581824918461173, %1681
  %1693 = xor i64 %1692, %1677
  %1694 = xor i64 %1693, %1691
  %1695 = xor i64 %1694, %1680
  %1696 = add i64 %381, 6537951306350429818
  %1697 = add i64 -314933601614260408, %381
  %1698 = add i64 %1697, 6852884907964690226
  %1699 = and i64 %296, 6239810645658672568
  %1700 = or i64 -6239810645658672569, %296
  %1701 = sub i64 %1700, -6239810645658672569
  %1702 = xor i64 %1701, %1698
  %1703 = xor i64 %1702, %1699
  %1704 = xor i64 %1703, -2166132346427628007
  %1705 = xor i64 %1704, %1696
  %1706 = mul i64 %1695, %1705
  %1707 = trunc i64 %1706 to i32
  %1708 = xor i32 %1676, %1707
  store i32 %1708, i32* %4, align 4
  %1709 = call i8** @bf6047435729067610447(i32* %4)
  %1710 = load i8*, i8** %1709, align 8
  indirectbr i8* %1710, [label %loopEnd, label %1529]

1711:                                             ; preds = %1711, %loopStart
  %1712 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 9
  %1713 = load i32, i32* %1712, align 4
  %1714 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %1715 = load i32, i32* %1714, align 4
  %1716 = srem i32 %1713, %1715
  store i32 %1716, i32* %dispatcher, align 4
  %.reload8 = load i1, i1* %.reg2mem7, align 1
  store i1 %.reload8, i1* %.reg2mem95, align 1
  %1717 = load i8*, i8** %174, align 8
  %1718 = load i8, i8* %1717, align 1
  %1719 = mul i8 %1718, 2
  %1720 = mul i8 %1718, 2
  %1721 = or i64 %545, -48643938877839036
  %1722 = xor i64 %545, -1
  %1723 = and i64 %1722, 817590640777264515
  %1724 = and i64 %545, -817590640777264516
  %1725 = or i64 %1723, %1724
  %1726 = xor i64 -861448929491577657, %1725
  %1727 = xor i64 %545, -1
  %1728 = or i64 48643938877839035, %1727
  %1729 = xor i64 %1728, -1
  %1730 = and i64 %1729, -1
  %1731 = or i64 %1726, %1730
  %1732 = and i64 %506, 5237246708665648117
  %1733 = xor i64 %506, -1
  %1734 = or i64 -5237246708665648118, %1733
  %1735 = xor i64 %1734, -1
  %1736 = and i64 %1735, -1
  %1737 = and i64 %547, 6715994112327006000
  %1738 = xor i64 %547, -1
  %1739 = xor i64 6715994112327006000, %1738
  %1740 = and i64 %1739, 6715994112327006000
  %1741 = xor i64 %1731, %1736
  %1742 = xor i64 %1741, %1740
  %1743 = xor i64 %1742, %1721
  %1744 = xor i64 %1743, %1732
  %1745 = xor i64 %1744, %1737
  %1746 = xor i64 %1745, 8212720944146836141
  %1747 = or i64 %70, -6561424256070022595
  %1748 = and i64 -6561424256070022595, %70
  %1749 = xor i64 -6561424256070022595, %70
  %1750 = or i64 %1748, %1749
  %1751 = or i64 %13, -8183511042095984093
  %1752 = xor i64 %13, -1
  %1753 = and i64 -8183511042095984093, %1752
  %1754 = add i64 %1753, %13
  %1755 = xor i64 %1750, 0
  %1756 = xor i64 %1755, %1751
  %1757 = xor i64 %1756, %1747
  %1758 = xor i64 %1757, %1754
  %1759 = mul i64 %1746, %1758
  %1760 = trunc i64 %1759 to i8
  %1761 = sub i8 %1760, %1720
  %1762 = and i64 %7, -5159526569456783222
  %1763 = xor i64 %7, -1
  %1764 = or i64 5159526569456783221, %1763
  %1765 = xor i64 %1764, -1
  %1766 = and i64 %1765, -1
  %1767 = add i64 %58, 3960713135110376549
  %1768 = add i64 3063279208194690982, %58
  %1769 = add i64 %1768, 897433926915685567
  %1770 = or i64 %82, 6535064082273692718
  %1771 = and i64 6535064082273692718, %82
  %1772 = xor i64 6535064082273692718, %82
  %1773 = or i64 %1771, %1772
  %1774 = xor i64 %1770, %1767
  %1775 = xor i64 %1774, %1769
  %1776 = xor i64 %1775, 3776177630883354087
  %1777 = xor i64 %1776, %1762
  %1778 = xor i64 %1777, %1766
  %1779 = xor i64 %1778, %1773
  %1780 = add i64 %66, 7603693131001228084
  %1781 = xor i64 7603693131001228084, %66
  %1782 = and i64 7603693131001228084, %66
  %1783 = mul i64 2, %1782
  %1784 = add i64 %1781, %1783
  %1785 = and i64 %553, 2492472860832207166
  %1786 = xor i64 %553, -1
  %1787 = xor i64 2492472860832207166, %1786
  %1788 = and i64 %1787, 2492472860832207166
  %1789 = xor i64 %1785, -6764584720795673682
  %1790 = xor i64 %1789, %1788
  %1791 = xor i64 %1790, %1780
  %1792 = xor i64 %1791, %1784
  %1793 = mul i64 %1779, %1792
  %1794 = trunc i64 %1793 to i8
  %1795 = sub i8 %1794, %1761
  %1796 = mul i8 %1719, %1795
  %1797 = srem i8 %1796, 4
  %1798 = icmp eq i8 %1797, 0
  %1799 = mul i8 %1718, %1718
  %1800 = mul i8 %1799, %1718
  %1801 = add i8 %1800, %1718
  %1802 = srem i8 %1801, 2
  %1803 = icmp eq i8 %1802, 0
  %1804 = xor i1 %1798, true
  %1805 = xor i1 %1803, true
  %1806 = or i1 %1804, %1805
  %1807 = xor i1 %1806, true
  %1808 = and i1 %1807, true
  %1809 = select i1 %1808, i32 984876096, i32 984876144
  %1810 = or i32 %1809, 48
  %1811 = and i32 %1809, 48
  %1812 = sub i32 %1810, %1811
  store i32 %1812, i32* %4, align 4
  %1813 = call i8** @bf6047435729067610447(i32* %4)
  %1814 = load i8*, i8** %1813, align 8
  indirectbr i8* %1814, [label %loopEnd, label %1711]

1815:                                             ; preds = %1815, %loopStart
  %1816 = icmp eq i64 %3, 1760
  %1817 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 7
  %1818 = load i32, i32* %1817, align 4
  %1819 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 5
  %1820 = load i32, i32* %1819, align 4
  %1821 = sub i32 0, %1820
  %1822 = sub i32 %1818, %1821
  store i32 %1822, i32* %dispatcher, align 4
  store i1 %1816, i1* %.reg2mem95, align 1
  %1823 = load i8*, i8** %301, align 8
  %1824 = load i8, i8* %1823, align 1
  %1825 = mul i8 %1824, 2
  %1826 = add i64 %15, -5585604720905335309
  %1827 = sub i64 0, %15
  %1828 = sub i64 -5585604720905335309, %1827
  %1829 = add i64 %288, 7437236919467927821
  %1830 = add i64 -3574858658038687028, %288
  %1831 = add i64 %1830, -7434648496202936767
  %1832 = or i64 %549, -3552390218245471064
  %1833 = xor i64 %549, -1
  %1834 = and i64 -3552390218245471064, %1833
  %1835 = add i64 %1834, %549
  %1836 = xor i64 %1829, %1826
  %1837 = xor i64 %1836, %1835
  %1838 = xor i64 %1837, %1831
  %1839 = xor i64 %1838, %1832
  %1840 = xor i64 %1839, -8990992946897312731
  %1841 = xor i64 %1840, %1828
  %1842 = add i64 %62, -4080275821744776495
  %1843 = xor i64 -4080275821744776495, %62
  %1844 = and i64 -4080275821744776495, %62
  %1845 = mul i64 2, %1844
  %1846 = add i64 %1843, %1845
  %1847 = add i64 %547, -5506371284391586844
  %1848 = add i64 6747191243651691290, %547
  %1849 = sub i64 %1848, -6193181545666273482
  %1850 = xor i64 %1849, %1847
  %1851 = xor i64 %1850, -7297920229282828454
  %1852 = xor i64 %1851, %1846
  %1853 = xor i64 %1852, %1842
  %1854 = mul i64 %1841, %1853
  %1855 = trunc i64 %1854 to i8
  %1856 = mul i8 %1824, %1855
  %1857 = add i8 2, %1856
  %1858 = mul i8 %1825, %1857
  %1859 = srem i8 %1858, 4
  %1860 = icmp eq i8 %1859, 0
  %1861 = mul i8 %1824, %1824
  %1862 = add i8 %1861, %1824
  %1863 = and i64 %13, 5769462996143041912
  %1864 = or i64 -5769462996143041913, %13
  %1865 = sub i64 %1864, -5769462996143041913
  %1866 = and i64 %15, -3350586373284272783
  %1867 = xor i64 %15, -1
  %1868 = xor i64 -3350586373284272783, %1867
  %1869 = and i64 %1868, -3350586373284272783
  %1870 = xor i64 %1866, %1869
  %1871 = xor i64 %1870, %1865
  %1872 = xor i64 %1871, %1863
  %1873 = xor i64 %1872, 353245773498986719
  %1874 = add i64 %140, -838652605765112551
  %1875 = add i64 740971987615424489, %140
  %1876 = add i64 %1875, -1579624593380537040
  %1877 = and i64 %78, -1000231952475769784
  %1878 = or i64 1000231952475769783, %78
  %1879 = sub i64 %1878, 1000231952475769783
  %1880 = and i64 %243, 7066926332939341643
  %1881 = or i64 -7066926332939341644, %243
  %1882 = sub i64 %1881, -7066926332939341644
  %1883 = xor i64 %1874, %1876
  %1884 = xor i64 %1883, -3358112150089492930
  %1885 = xor i64 %1884, %1879
  %1886 = xor i64 %1885, %1882
  %1887 = xor i64 %1886, %1877
  %1888 = xor i64 %1887, %1880
  %1889 = mul i64 %1873, %1888
  %1890 = trunc i64 %1889 to i8
  %1891 = srem i8 %1862, %1890
  %1892 = icmp eq i8 %1891, 0
  %1893 = and i1 %1860, %1892
  %1894 = select i1 %1893, i32 984876148, i32 984876144
  %1895 = xor i32 %1894, 4
  store i32 %1895, i32* %4, align 4
  %1896 = call i8** @bf6047435729067610447(i32* %4)
  %1897 = load i8*, i8** %1896, align 8
  indirectbr i8* %1897, [label %loopEnd, label %1815]

1898:                                             ; preds = %1898, %loopStart
  %.reload96 = load i1, i1* %.reg2mem95, align 1
  %1899 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 7
  %1900 = load i32, i32* %1899, align 4
  %1901 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 6
  %1902 = load i32, i32* %1901, align 4
  %1903 = and i32 %1900, %1902
  %1904 = or i32 %1900, %1902
  %1905 = add i32 %1903, %1904
  %1906 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 33
  %1907 = load i32, i32* %1906, align 4
  %1908 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 32
  %1909 = load i32, i32* %1908, align 4
  %1910 = and i32 %1907, %1909
  %1911 = or i32 %1907, %1909
  %1912 = add i32 %1910, %1911
  %1913 = select i1 %.reload96, i32 %1905, i32 %1912
  store i32 %1913, i32* %dispatcher, align 4
  %1914 = add i64 %68, -533846139423179108
  %1915 = sub i64 0, %68
  %1916 = add i64 533846139423179108, %1915
  %1917 = sub i64 0, %1916
  %1918 = and i64 %294, -5535023052917126432
  %1919 = or i64 5535023052917126431, %294
  %1920 = sub i64 %1919, 5535023052917126431
  %1921 = xor i64 %1917, %1914
  %1922 = xor i64 %1921, -2908707769272150367
  %1923 = xor i64 %1922, %1918
  %1924 = xor i64 %1923, %1920
  %1925 = and i64 %74, -7031893793710289864
  %1926 = xor i64 %74, -1
  %1927 = or i64 7031893793710289863, %1926
  %1928 = xor i64 %1927, -1
  %1929 = and i64 %1928, -1
  %1930 = or i64 %1154, 3613480577901010755
  %1931 = xor i64 %1154, -1
  %1932 = and i64 %1931, 6617964698250797045
  %1933 = and i64 %1154, -6617964698250797046
  %1934 = or i64 %1932, %1933
  %1935 = xor i64 7634184816476307638, %1934
  %1936 = xor i64 %1154, -1
  %1937 = or i64 -3613480577901010756, %1936
  %1938 = xor i64 %1937, -1
  %1939 = and i64 %1938, -1
  %1940 = or i64 %1935, %1939
  %1941 = add i64 %298, -2413726144037918073
  %1942 = sub i64 0, %298
  %1943 = add i64 2413726144037918073, %1942
  %1944 = sub i64 0, %1943
  %1945 = xor i64 -6333522980375094590, %1929
  %1946 = xor i64 %1945, %1941
  %1947 = xor i64 %1946, %1930
  %1948 = xor i64 %1947, %1925
  %1949 = xor i64 %1948, %1940
  %1950 = xor i64 %1949, %1944
  %1951 = mul i64 %1924, %1950
  %1952 = trunc i64 %1951 to i32
  store i32 %1952, i32* %.reg2mem107, align 4
  %1953 = load i8*, i8** %419, align 8
  %1954 = load i8, i8* %1953, align 1
  %1955 = xor i8 %1954, -2
  %1956 = and i8 %1955, %1954
  %1957 = icmp eq i8 %1956, 1
  %1958 = mul i8 %1954, %1954
  %1959 = add i8 %1958, %1954
  %1960 = srem i8 %1959, 2
  %1961 = icmp eq i8 %1960, 0
  %1962 = or i1 %1957, %1961
  %1963 = add i64 %420, -1755607051044687314
  %1964 = sub i64 0, %420
  %1965 = sub i64 -1755607051044687314, %1964
  %1966 = and i64 %451, -9034115083281257926
  %1967 = xor i64 %451, -1
  %1968 = xor i64 -9034115083281257926, %1967
  %1969 = and i64 %1968, -9034115083281257926
  %1970 = xor i64 %1963, %1966
  %1971 = xor i64 %1970, 1930704993442789755
  %1972 = xor i64 %1971, %1969
  %1973 = xor i64 %1972, %1965
  %1974 = and i64 %9, 1163160839521121079
  %1975 = or i64 -1163160839521121080, %9
  %1976 = sub i64 %1975, -1163160839521121080
  %1977 = add i64 %191, 4993721547960206415
  %1978 = add i64 -2666369832316010153, %191
  %1979 = sub i64 %1978, -7660091380276216568
  %1980 = xor i64 %1974, %1979
  %1981 = xor i64 %1980, %1976
  %1982 = xor i64 %1981, %1977
  %1983 = xor i64 %1982, 7120943976467778128
  %1984 = mul i64 %1973, %1983
  %1985 = trunc i64 %1984 to i32
  %1986 = select i1 %1962, i32 984876152, i32 %1985
  %1987 = xor i32 %1986, 8
  store i32 %1987, i32* %4, align 4
  %1988 = call i8** @bf6047435729067610447(i32* %4)
  %1989 = load i8*, i8** %1988, align 8
  indirectbr i8* %1989, [label %loopEnd, label %1898]

.preheader:                                       ; preds = %.preheader, %loopStart
  %1990 = mul i64 %3, 2
  %1991 = add i64 %300, 9127932388625554994
  %1992 = xor i64 9127932388625554994, %300
  %1993 = and i64 9127932388625554994, %300
  %1994 = mul i64 2, %1993
  %1995 = add i64 %1992, %1994
  %1996 = and i64 %582, 7652635624058836106
  %1997 = xor i64 %582, -1
  %1998 = or i64 -7652635624058836107, %1997
  %1999 = xor i64 %1998, -1
  %2000 = and i64 %1999, -1
  %2001 = xor i64 %1991, %1995
  %2002 = xor i64 %2001, %2000
  %2003 = xor i64 %2002, %1996
  %2004 = xor i64 %2003, -4787766428421380085
  %2005 = or i64 %15, -757506385702752740
  %2006 = xor i64 %15, -1
  %2007 = and i64 %2006, 8986294122122051664
  %2008 = and i64 %15, -8986294122122051665
  %2009 = or i64 %2007, %2008
  %2010 = xor i64 -8518152906101428660, %2009
  %2011 = xor i64 %15, -1
  %2012 = or i64 757506385702752739, %2011
  %2013 = xor i64 %2012, -1
  %2014 = and i64 %2013, -1
  %2015 = or i64 %2010, %2014
  %2016 = add i64 %580, -9086440044365787663
  %2017 = add i64 -5356261437121186970, %580
  %2018 = add i64 %2017, -3730178607244600693
  %2019 = or i64 %68, -1014464736617489668
  %2020 = xor i64 %68, -1
  %2021 = and i64 %2020, -2262568520871491725
  %2022 = and i64 %68, 2262568520871491724
  %2023 = or i64 %2021, %2022
  %2024 = xor i64 1257164383414934927, %2023
  %2025 = xor i64 %68, -1
  %2026 = or i64 1014464736617489667, %2025
  %2027 = xor i64 %2026, -1
  %2028 = and i64 %2027, -1
  %2029 = or i64 %2024, %2028
  %2030 = xor i64 %2029, %2018
  %2031 = xor i64 %2030, %2015
  %2032 = xor i64 %2031, -7878359613625579706
  %2033 = xor i64 %2032, %2016
  %2034 = xor i64 %2033, %2019
  %2035 = xor i64 %2034, %2005
  %2036 = mul i64 %2004, %2035
  %2037 = mul i64 %3, %2036
  store i64 %2037, i64* %.reg2mem12, align 8
  %.reload14 = load i64, i64* %.reg2mem12, align 8
  %2038 = add i64 2, %.reload14
  %2039 = mul i64 %1990, %2038
  store i64 %2039, i64* %.reg2mem15, align 8
  %.reload17 = load i64, i64* %.reg2mem15, align 8
  %2040 = srem i64 %.reload17, 4
  store i64 %2040, i64* %.reg2mem18, align 8
  %.reload21 = load i64, i64* %.reg2mem18, align 8
  %2041 = icmp eq i64 %.reload21, 0
  store i1 %2041, i1* %.reg2mem22, align 1
  %2042 = mul i64 %3, %3
  store i64 %2042, i64* %.reg2mem25, align 8
  %2043 = srem i64 %3, 2
  %2044 = icmp eq i64 %2043, 0
  store i1 %2044, i1* %.reg2mem30, align 1
  %.reload5 = load i64, i64* %.reg2mem, align 8
  %2045 = srem i64 %.reload5, 2
  %2046 = icmp eq i64 %2045, 0
  %2047 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 11
  %2048 = load i32, i32* %2047, align 4
  %2049 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %2050 = load i32, i32* %2049, align 4
  %2051 = srem i32 %2048, %2050
  %2052 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 32
  %2053 = load i32, i32* %2052, align 4
  %2054 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 20
  %2055 = load i32, i32* %2054, align 4
  %2056 = sub i32 %2053, %2055
  %2057 = select i1 %2046, i32 %2051, i32 %2056
  store i32 %2057, i32* %dispatcher, align 4
  %2058 = load i8*, i8** %419, align 8
  %2059 = load i8, i8* %2058, align 1
  %2060 = or i64 %584, -7787116875008819032
  %2061 = and i64 -7787116875008819032, %584
  %2062 = xor i64 -7787116875008819032, %584
  %2063 = or i64 %2061, %2062
  %2064 = or i64 %116, -6568058613606603508
  %2065 = and i64 -6568058613606603508, %116
  %2066 = xor i64 -6568058613606603508, %116
  %2067 = or i64 %2065, %2066
  %2068 = xor i64 %2063, -7199264962148022023
  %2069 = xor i64 %2068, %2064
  %2070 = xor i64 %2069, %2060
  %2071 = xor i64 %2070, %2067
  %2072 = add i64 %582, 827747384501948177
  %2073 = sub i64 0, %582
  %2074 = sub i64 827747384501948177, %2073
  %2075 = add i64 %64, 2315178754756344163
  %2076 = sub i64 0, %64
  %2077 = sub i64 2315178754756344163, %2076
  %2078 = xor i64 2016865177570636434, %2075
  %2079 = xor i64 %2078, %2077
  %2080 = xor i64 %2079, %2074
  %2081 = xor i64 %2080, %2072
  %2082 = mul i64 %2071, %2081
  %2083 = trunc i64 %2082 to i8
  %2084 = mul i8 %2059, %2083
  %2085 = mul i8 %2059, 2
  %2086 = add i8 2, %2085
  %2087 = mul i8 %2084, %2086
  %2088 = srem i8 %2087, 4
  %2089 = icmp eq i8 %2088, 0
  %2090 = mul i8 %2059, %2059
  %2091 = mul i8 %2090, %2059
  %2092 = and i8 %2091, %2059
  %2093 = or i8 %2091, %2059
  %2094 = add i8 %2092, %2093
  %2095 = srem i8 %2094, 2
  %2096 = icmp eq i8 %2095, 0
  %2097 = and i1 %2089, %2096
  %2098 = and i64 %21, -6164829774396703854
  %2099 = or i64 6164829774396703853, %21
  %2100 = sub i64 %2099, 6164829774396703853
  %2101 = add i64 %296, 8625843768014813429
  %2102 = sub i64 0, %296
  %2103 = sub i64 8625843768014813429, %2102
  %2104 = xor i64 -5325088736691113821, %2098
  %2105 = xor i64 %2104, %2101
  %2106 = xor i64 %2105, %2100
  %2107 = xor i64 %2106, %2103
  %2108 = add i64 %15, 5256480311105605055
  %2109 = xor i64 5256480311105605055, %15
  %2110 = and i64 5256480311105605055, %15
  %2111 = mul i64 2, %2110
  %2112 = add i64 %2109, %2111
  %2113 = add i64 %74, -948523750800906734
  %2114 = and i64 -948523750800906734, %74
  %2115 = or i64 -948523750800906734, %74
  %2116 = add i64 %2114, %2115
  %2117 = xor i64 %2113, %2108
  %2118 = xor i64 %2117, 5119186677302132944
  %2119 = xor i64 %2118, %2116
  %2120 = xor i64 %2119, %2112
  %2121 = mul i64 %2107, %2120
  %2122 = trunc i64 %2121 to i32
  %2123 = select i1 %2097, i32 984876111, i32 %2122
  %2124 = add i64 %243, -6779295431623112053
  %2125 = sub i64 0, %243
  %2126 = sub i64 -6779295431623112053, %2125
  %2127 = add i64 %296, -2832086480436542539
  %2128 = add i64 1446859316179118127, %296
  %2129 = add i64 %2128, -4278945796615660666
  %2130 = add i64 %62, 4933220801889013718
  %2131 = add i64 -7900566221137949312, %62
  %2132 = add i64 %2131, -5612957050682588586
  %2133 = xor i64 %2132, %2127
  %2134 = xor i64 %2133, 2206980351835143523
  %2135 = xor i64 %2134, %2130
  %2136 = xor i64 %2135, %2124
  %2137 = xor i64 %2136, %2126
  %2138 = xor i64 %2137, %2129
  %2139 = and i64 %294, 3260289280480051790
  %2140 = xor i64 %294, -1
  %2141 = or i64 -3260289280480051791, %2140
  %2142 = xor i64 %2141, -1
  %2143 = and i64 %2142, -1
  %2144 = and i64 %383, 2239399719987819366
  %2145 = or i64 -2239399719987819367, %383
  %2146 = sub i64 %2145, -2239399719987819367
  %2147 = xor i64 %2146, %2144
  %2148 = xor i64 %2147, 824764395883341429
  %2149 = xor i64 %2148, %2143
  %2150 = xor i64 %2149, %2139
  %2151 = mul i64 %2138, %2150
  %2152 = trunc i64 %2151 to i32
  %2153 = xor i32 %2123, %2152
  store i32 %2153, i32* %4, align 4
  %2154 = call i8** @bf6047435729067610447(i32* %4)
  %2155 = load i8*, i8** %2154, align 8
  indirectbr i8* %2155, [label %loopEnd, label %.preheader]

2156:                                             ; preds = %2156, %loopStart
  %2157 = and i64 %76, -254365088943091175
  %2158 = or i64 254365088943091174, %76
  %2159 = sub i64 %2158, 254365088943091174
  %2160 = add i64 %15, -410648668788627009
  %2161 = add i64 6288365284276893790, %15
  %2162 = add i64 %2161, -6699013953065520799
  %2163 = add i64 %193, 6306301512420352281
  %2164 = sub i64 0, %193
  %2165 = sub i64 6306301512420352281, %2164
  %2166 = xor i64 %2157, %2163
  %2167 = xor i64 %2166, %2165
  %2168 = xor i64 %2167, %2160
  %2169 = xor i64 %2168, %2159
  %2170 = xor i64 %2169, %2162
  %2171 = xor i64 %2170, 4610379772433418813
  %2172 = and i64 %420, 2504290236500831223
  %2173 = or i64 -2504290236500831224, %420
  %2174 = sub i64 %2173, -2504290236500831224
  %2175 = and i64 %19, -1149809800797370285
  %2176 = or i64 1149809800797370284, %19
  %2177 = sub i64 %2176, 1149809800797370284
  %2178 = and i64 %1154, -9001262877536759320
  %2179 = xor i64 %1154, -1
  %2180 = xor i64 -9001262877536759320, %2179
  %2181 = and i64 %2180, -9001262877536759320
  %2182 = xor i64 -708755377038398001, %2177
  %2183 = xor i64 %2182, %2181
  %2184 = xor i64 %2183, %2178
  %2185 = xor i64 %2184, %2174
  %2186 = xor i64 %2185, %2175
  %2187 = xor i64 %2186, %2172
  %2188 = mul i64 %2171, %2187
  %2189 = sdiv i64 %2188, 86
  %.reload16 = load i64, i64* %.reg2mem15, align 8
  %2190 = srem i64 %.reload16, 2
  %2191 = icmp eq i64 %2190, 0
  %2192 = mul i64 %3, 2
  %2193 = mul i64 %3, 2
  %2194 = sub i64 0, %2193
  %2195 = add i64 -2, %2194
  %2196 = and i64 %418, -7882095849736482477
  %2197 = or i64 7882095849736482476, %418
  %2198 = sub i64 %2197, 7882095849736482476
  %2199 = and i64 %292, -2561313774117115429
  %2200 = xor i64 %292, -1
  %2201 = xor i64 -2561313774117115429, %2200
  %2202 = and i64 %2201, -2561313774117115429
  %2203 = and i64 %64, 5780280113104911175
  %2204 = xor i64 %64, -1
  %2205 = or i64 -5780280113104911176, %2204
  %2206 = xor i64 %2205, -1
  %2207 = and i64 %2206, -1
  %2208 = xor i64 %2202, %2207
  %2209 = xor i64 %2208, 3833860638355841455
  %2210 = xor i64 %2209, %2199
  %2211 = xor i64 %2210, %2203
  %2212 = xor i64 %2211, %2196
  %2213 = xor i64 %2212, %2198
  %2214 = and i64 %304, 9141612399152154292
  %2215 = or i64 -9141612399152154293, %304
  %2216 = sub i64 %2215, -9141612399152154293
  %2217 = or i64 %195, 1660246677941529214
  %2218 = xor i64 %195, -1
  %2219 = and i64 1660246677941529214, %2218
  %2220 = add i64 %2219, %195
  %2221 = xor i64 %2217, %2220
  %2222 = xor i64 %2221, %2214
  %2223 = xor i64 %2222, %2216
  %2224 = xor i64 %2223, 0
  %2225 = mul i64 %2213, %2224
  %2226 = sub i64 %2225, %2195
  %2227 = mul i64 %2192, %2226
  %2228 = sext i32 %dispatcher1 to i64
  %2229 = and i64 %2228, 7742848565969338721
  %2230 = xor i64 %2228, -1
  %2231 = xor i64 7742848565969338721, %2230
  %2232 = and i64 %2231, 7742848565969338721
  %2233 = add i64 %189, 6447794933528034250
  %2234 = xor i64 6447794933528034250, %189
  %2235 = and i64 6447794933528034250, %189
  %2236 = mul i64 2, %2235
  %2237 = add i64 %2234, %2236
  %2238 = or i64 %13, 6591478086363312662
  %2239 = and i64 6591478086363312662, %13
  %2240 = xor i64 6591478086363312662, %13
  %2241 = or i64 %2239, %2240
  %2242 = xor i64 %2238, %2233
  %2243 = xor i64 %2242, 7863529704400891591
  %2244 = xor i64 %2243, %2232
  %2245 = xor i64 %2244, %2241
  %2246 = xor i64 %2245, %2237
  %2247 = xor i64 %2246, %2229
  %2248 = and i64 %140, 1684762921962662437
  %2249 = xor i64 %140, -1
  %2250 = or i64 -1684762921962662438, %2249
  %2251 = xor i64 %2250, -1
  %2252 = and i64 %2251, -1
  %2253 = and i64 %80, 1001613444791851045
  %2254 = or i64 -1001613444791851046, %80
  %2255 = sub i64 %2254, -1001613444791851046
  %2256 = add i64 %288, 7722763177269003230
  %2257 = add i64 -2995066596731103187, %288
  %2258 = sub i64 %2257, 7728914299709445199
  %2259 = xor i64 %2256, %2253
  %2260 = xor i64 %2259, %2255
  %2261 = xor i64 %2260, -3404848971664798756
  %2262 = xor i64 %2261, %2258
  %2263 = xor i64 %2262, %2252
  %2264 = xor i64 %2263, %2248
  %2265 = mul i64 %2247, %2264
  %2266 = srem i64 %2227, %2265
  %2267 = icmp eq i64 %2266, 0
  %2268 = mul i64 %3, %3
  %2269 = add i64 %2268, %3
  %2270 = srem i64 %2269, 2
  %2271 = icmp eq i64 %2270, 0
  %2272 = or i1 %2267, %2271
  store i1 %2272, i1* %.reg2mem32, align 1
  %2273 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 9
  %2274 = load i32, i32* %2273, align 4
  %2275 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %2276 = load i32, i32* %2275, align 4
  %2277 = sub i32 %2274, -1061418286
  %2278 = sub i32 %2277, %2276
  %2279 = and i64 %205, 3644112505655491570
  %2280 = xor i64 %205, -1
  %2281 = or i64 -3644112505655491571, %2280
  %2282 = xor i64 %2281, -1
  %2283 = and i64 %2282, -1
  %2284 = add i64 %193, 5526204340745026798
  %2285 = and i64 5526204340745026798, %193
  %2286 = or i64 5526204340745026798, %193
  %2287 = add i64 %2285, %2286
  %2288 = and i64 %298, 1633827683966510369
  %2289 = xor i64 %298, -1
  %2290 = or i64 -1633827683966510370, %2289
  %2291 = xor i64 %2290, -1
  %2292 = and i64 %2291, -1
  %2293 = xor i64 %2292, %2283
  %2294 = xor i64 %2293, 1647011094262202137
  %2295 = xor i64 %2294, %2288
  %2296 = xor i64 %2295, %2284
  %2297 = xor i64 %2296, %2287
  %2298 = xor i64 %2297, %2279
  %2299 = or i64 %385, -2044544414326673059
  %2300 = xor i64 %385, -1
  %2301 = and i64 -2044544414326673059, %2300
  %2302 = add i64 %2301, %385
  %2303 = or i64 %203, 381739667188779286
  %2304 = xor i64 %203, -1
  %2305 = and i64 381739667188779286, %2304
  %2306 = add i64 %2305, %203
  %2307 = xor i64 %2303, %2302
  %2308 = xor i64 %2307, %2306
  %2309 = xor i64 %2308, %2299
  %2310 = xor i64 %2309, -5877038236096682590
  %2311 = mul i64 %2298, %2310
  %2312 = trunc i64 %2311 to i32
  %2313 = add i32 %2278, %2312
  %2314 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 13
  %2315 = load i32, i32* %2314, align 4
  %2316 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %2317 = load i32, i32* %2316, align 4
  %2318 = srem i32 %2315, %2317
  %.reload34 = load i1, i1* %.reg2mem32, align 1
  %2319 = select i1 %.reload34, i32 %2313, i32 %2318
  store i32 %2319, i32* %dispatcher, align 4
  %2320 = load i8*, i8** %141, align 8
  %2321 = load i8, i8* %2320, align 1
  %2322 = xor i8 %2321, -2
  %2323 = and i8 %2322, %2321
  %2324 = icmp eq i8 %2323, 1
  %2325 = mul i8 %2321, %2321
  %2326 = and i8 %2325, %2321
  %2327 = or i8 %2325, %2321
  %2328 = add i8 %2326, %2327
  %2329 = srem i8 %2328, 2
  %2330 = icmp eq i8 %2329, 0
  %2331 = xor i1 %2330, true
  %2332 = and i1 %2324, %2331
  %2333 = add i1 %2332, %2330
  %2334 = add i64 %116, -299985618460621088
  %2335 = add i64 4922967075295132596, %116
  %2336 = sub i64 %2335, 5222952693755753684
  %2337 = and i64 %243, 739787759173404761
  %2338 = xor i64 %243, -1
  %2339 = or i64 -739787759173404762, %2338
  %2340 = xor i64 %2339, -1
  %2341 = and i64 %2340, -1
  %2342 = or i64 %458, -5518156147792469797
  %2343 = xor i64 %458, -1
  %2344 = and i64 %2343, -3079862884847413077
  %2345 = and i64 %458, 3079862884847413076
  %2346 = or i64 %2344, %2345
  %2347 = xor i64 7361612146736871536, %2346
  %2348 = xor i64 %458, -1
  %2349 = or i64 5518156147792469796, %2348
  %2350 = xor i64 %2349, -1
  %2351 = and i64 %2350, -1
  %2352 = or i64 %2347, %2351
  %2353 = xor i64 %2336, %2341
  %2354 = xor i64 %2353, %2334
  %2355 = xor i64 %2354, -8401128534806330869
  %2356 = xor i64 %2355, %2352
  %2357 = xor i64 %2356, %2342
  %2358 = xor i64 %2357, %2337
  %2359 = or i64 %241, 8011110793918296916
  %2360 = and i64 8011110793918296916, %241
  %2361 = xor i64 8011110793918296916, %241
  %2362 = or i64 %2360, %2361
  %2363 = or i64 %82, -7800821228987351433
  %2364 = and i64 -7800821228987351433, %82
  %2365 = xor i64 -7800821228987351433, %82
  %2366 = or i64 %2364, %2365
  %2367 = xor i64 -5649346016234192048, %2359
  %2368 = xor i64 %2367, %2362
  %2369 = xor i64 %2368, %2366
  %2370 = xor i64 %2369, %2363
  %2371 = mul i64 %2358, %2370
  %2372 = trunc i64 %2371 to i32
  %2373 = select i1 %2333, i32 984876132, i32 %2372
  %2374 = xor i32 %2373, -1
  %2375 = and i32 %2374, 20
  %2376 = and i32 %2373, -21
  %2377 = or i32 %2375, %2376
  store i32 %2377, i32* %4, align 4
  %2378 = call i8** @bf6047435729067610447(i32* %4)
  %2379 = load i8*, i8** %2378, align 8
  indirectbr i8* %2379, [label %loopEnd, label %2156]

2380:                                             ; preds = %2380, %loopStart
  %2381 = add i64 122, 5
  %2382 = add i64 8757709252378877214, -8757709252378877289
  %2383 = and i64 %183, 928572636167622443
  %2384 = or i64 -928572636167622444, %183
  %2385 = sub i64 %2384, -928572636167622444
  %2386 = and i64 %553, -3437730562864024003
  %2387 = or i64 3437730562864024002, %553
  %2388 = sub i64 %2387, 3437730562864024002
  %2389 = or i64 %447, -3399071053763812748
  %2390 = and i64 -3399071053763812748, %447
  %2391 = xor i64 -3399071053763812748, %447
  %2392 = or i64 %2390, %2391
  %2393 = xor i64 %2388, %2383
  %2394 = xor i64 %2393, -3641878121890244897
  %2395 = xor i64 %2394, %2392
  %2396 = xor i64 %2395, %2389
  %2397 = xor i64 %2396, %2385
  %2398 = xor i64 %2397, %2386
  %2399 = add i64 %11, -3078107842624149065
  %2400 = add i64 -4704653752340252784, %11
  %2401 = sub i64 %2400, -1626545909716103719
  %2402 = add i64 %185, 5216929663166899491
  %2403 = add i64 -1609575178238458199, %185
  %2404 = add i64 %2403, 6826504841405357690
  %2405 = and i64 %506, -2389051893453065605
  %2406 = xor i64 %506, -1
  %2407 = xor i64 -2389051893453065605, %2406
  %2408 = and i64 %2407, -2389051893453065605
  %2409 = xor i64 -5195891602936583916, %2402
  %2410 = xor i64 %2409, %2404
  %2411 = xor i64 %2410, %2401
  %2412 = xor i64 %2411, %2405
  %2413 = xor i64 %2412, %2408
  %2414 = xor i64 %2413, %2399
  %2415 = mul i64 %2398, %2414
  %2416 = mul i64 56, %2415
  %2417 = add i64 2, 30
  %2418 = mul i64 29, 83
  %2419 = sdiv i64 122, 34
  %2420 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  %2421 = load i32, i32* %2420, align 4
  %2422 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %2423 = load i32, i32* %2422, align 4
  %2424 = srem i32 %2421, %2423
  store i32 %2424, i32* %dispatcher, align 4
  %2425 = load i8*, i8** %305, align 8
  %2426 = load i8, i8* %2425, align 1
  %2427 = and i8 %2426, 1
  %2428 = icmp eq i8 %2427, 0
  %2429 = mul i8 %2426, %2426
  %2430 = add i8 %2429, %2426
  %2431 = mul i8 %2430, 3
  %2432 = or i64 %203, -1707571431582334717
  %2433 = xor i64 %203, -1
  %2434 = and i64 %2433, 4496801426683640234
  %2435 = and i64 %203, -4496801426683640235
  %2436 = or i64 %2434, %2435
  %2437 = xor i64 -3014414726703826775, %2436
  %2438 = xor i64 %203, -1
  %2439 = or i64 1707571431582334716, %2438
  %2440 = xor i64 %2439, -1
  %2441 = and i64 %2440, -1
  %2442 = or i64 %2437, %2441
  %2443 = or i64 %458, -3821385508312117126
  %2444 = xor i64 %458, -1
  %2445 = and i64 %2444, -193539963038369104
  %2446 = and i64 %458, 193539963038369103
  %2447 = or i64 %2445, %2446
  %2448 = xor i64 4010418418283604682, %2447
  %2449 = xor i64 %458, -1
  %2450 = or i64 3821385508312117125, %2449
  %2451 = xor i64 %2450, -1
  %2452 = and i64 %2451, -1
  %2453 = or i64 %2448, %2452
  %2454 = xor i64 %2443, %2453
  %2455 = xor i64 %2454, -6980559073074226481
  %2456 = xor i64 %2455, %2442
  %2457 = xor i64 %2456, %2432
  %2458 = or i64 %203, 1130713855317815856
  %2459 = and i64 1130713855317815856, %203
  %2460 = xor i64 1130713855317815856, %203
  %2461 = or i64 %2459, %2460
  %2462 = and i64 %78, -6639152255251269446
  %2463 = xor i64 %78, -1
  %2464 = xor i64 -6639152255251269446, %2463
  %2465 = and i64 %2464, -6639152255251269446
  %2466 = add i64 %296, -15709192384858284
  %2467 = and i64 -15709192384858284, %296
  %2468 = or i64 -15709192384858284, %296
  %2469 = add i64 %2467, %2468
  %2470 = xor i64 7129849982014838878, %2462
  %2471 = xor i64 %2470, %2458
  %2472 = xor i64 %2471, %2465
  %2473 = xor i64 %2472, %2469
  %2474 = xor i64 %2473, %2466
  %2475 = xor i64 %2474, %2461
  %2476 = mul i64 %2457, %2475
  %2477 = trunc i64 %2476 to i8
  %2478 = srem i8 %2431, %2477
  %2479 = or i64 %292, 8966515143957622593
  %2480 = xor i64 %292, -1
  %2481 = and i64 8966515143957622593, %2480
  %2482 = add i64 %2481, %292
  %2483 = and i64 %545, -8564708665770219823
  %2484 = or i64 8564708665770219822, %545
  %2485 = sub i64 %2484, 8564708665770219822
  %2486 = xor i64 %2483, %2479
  %2487 = xor i64 %2486, %2482
  %2488 = xor i64 %2487, %2485
  %2489 = xor i64 %2488, -3738095712266353987
  %2490 = or i64 %78, -8068835684397677603
  %2491 = xor i64 %78, -1
  %2492 = and i64 -8068835684397677603, %2491
  %2493 = add i64 %2492, %78
  %2494 = and i64 %70, 7146821857091835939
  %2495 = or i64 -7146821857091835940, %70
  %2496 = sub i64 %2495, -7146821857091835940
  %2497 = add i64 %344, 6492220753408328903
  %2498 = sub i64 0, %344
  %2499 = sub i64 6492220753408328903, %2498
  %2500 = xor i64 %2497, %2494
  %2501 = xor i64 %2500, %2496
  %2502 = xor i64 %2501, %2499
  %2503 = xor i64 %2502, %2490
  %2504 = xor i64 %2503, 0
  %2505 = xor i64 %2504, %2493
  %2506 = mul i64 %2489, %2505
  %2507 = trunc i64 %2506 to i8
  %2508 = icmp eq i8 %2478, %2507
  %2509 = xor i1 %2508, true
  %2510 = and i1 %2428, %2509
  %2511 = add i1 %2510, %2508
  %2512 = select i1 %2511, i32 984876144, i32 984876144
  %2513 = xor i32 %2512, 0
  store i32 %2513, i32* %4, align 4
  %2514 = call i8** @bf6047435729067610447(i32* %4)
  %2515 = load i8*, i8** %2514, align 8
  indirectbr i8* %2515, [label %loopEnd, label %2380]

2516:                                             ; preds = %2516, %loopStart
  %2517 = add i64 %185, -3511418571247930112
  %2518 = add i64 2852209064551267733, %185
  %2519 = add i64 %2518, -6363627635799197845
  %2520 = or i64 %460, 694043857445531405
  %2521 = xor i64 %460, -1
  %2522 = and i64 %2521, 8594344506400776780
  %2523 = and i64 %460, -8594344506400776781
  %2524 = or i64 %2522, %2523
  %2525 = xor i64 9143578267071810881, %2524
  %2526 = xor i64 %460, -1
  %2527 = or i64 -694043857445531406, %2526
  %2528 = xor i64 %2527, -1
  %2529 = and i64 %2528, -1
  %2530 = or i64 %2525, %2529
  %2531 = xor i64 %2520, -5648926105092868581
  %2532 = xor i64 %2531, %2530
  %2533 = xor i64 %2532, %2517
  %2534 = xor i64 %2533, %2519
  %2535 = add i64 %294, -4840284989877383251
  %2536 = and i64 -4840284989877383251, %294
  %2537 = or i64 -4840284989877383251, %294
  %2538 = add i64 %2536, %2537
  %2539 = or i64 %21, -8434201289718565222
  %2540 = and i64 -8434201289718565222, %21
  %2541 = xor i64 -8434201289718565222, %21
  %2542 = or i64 %2540, %2541
  %2543 = xor i64 %2538, -5526407511626755826
  %2544 = xor i64 %2543, %2539
  %2545 = xor i64 %2544, %2542
  %2546 = xor i64 %2545, %2535
  %2547 = mul i64 %2534, %2546
  %2548 = add i64 %582, 7357269343761357953
  %2549 = xor i64 7357269343761357953, %582
  %2550 = and i64 7357269343761357953, %582
  %2551 = mul i64 2, %2550
  %2552 = add i64 %2549, %2551
  %2553 = add i64 %294, 6459933300240458429
  %2554 = xor i64 6459933300240458429, %294
  %2555 = and i64 6459933300240458429, %294
  %2556 = mul i64 2, %2555
  %2557 = add i64 %2554, %2556
  %2558 = xor i64 %2552, %2548
  %2559 = xor i64 %2558, -3128441938247071035
  %2560 = xor i64 %2559, %2557
  %2561 = xor i64 %2560, %2553
  %2562 = add i64 %449, -2511989607752531785
  %2563 = and i64 -2511989607752531785, %449
  %2564 = or i64 -2511989607752531785, %449
  %2565 = add i64 %2563, %2564
  %2566 = or i64 %447, 1252103639716214059
  %2567 = and i64 1252103639716214059, %447
  %2568 = xor i64 1252103639716214059, %447
  %2569 = or i64 %2567, %2568
  %2570 = add i64 %80, 1542013219026494740
  %2571 = sub i64 0, %80
  %2572 = sub i64 1542013219026494740, %2571
  %2573 = xor i64 %2570, -2243378451629984703
  %2574 = xor i64 %2573, %2565
  %2575 = xor i64 %2574, %2569
  %2576 = xor i64 %2575, %2572
  %2577 = xor i64 %2576, %2566
  %2578 = xor i64 %2577, %2562
  %2579 = mul i64 %2561, %2578
  %2580 = add i64 %2547, %2579
  %2581 = add i64 %5, 151976690543643394
  %2582 = sub i64 0, %5
  %2583 = add i64 -151976690543643394, %2582
  %2584 = sub i64 0, %2583
  %2585 = or i64 %201, -8779634876424964926
  %2586 = xor i64 %201, -1
  %2587 = and i64 -8779634876424964926, %2586
  %2588 = add i64 %2587, %201
  %2589 = xor i64 %2581, %2588
  %2590 = xor i64 %2589, 2190832103183786109
  %2591 = xor i64 %2590, %2584
  %2592 = xor i64 %2591, %2585
  %2593 = add i64 %9, -1115739353913680257
  %2594 = add i64 -8572553965631161121, %9
  %2595 = add i64 %2594, 7456814611717480864
  %2596 = and i64 %175, 5660301689309908155
  %2597 = or i64 -5660301689309908156, %175
  %2598 = sub i64 %2597, -5660301689309908156
  %2599 = xor i64 %2598, 9087744464142568784
  %2600 = xor i64 %2599, %2595
  %2601 = xor i64 %2600, %2596
  %2602 = xor i64 %2601, %2593
  %2603 = mul i64 %2592, %2602
  %2604 = add i64 %2603, -91
  %2605 = add i64 %9, -5889122740994746146
  %2606 = xor i64 -5889122740994746146, %9
  %2607 = and i64 -5889122740994746146, %9
  %2608 = mul i64 2, %2607
  %2609 = add i64 %2606, %2608
  %2610 = and i64 %454, 2386390625259749093
  %2611 = or i64 -2386390625259749094, %454
  %2612 = sub i64 %2611, -2386390625259749094
  %2613 = xor i64 %2605, %2609
  %2614 = xor i64 %2613, %2612
  %2615 = xor i64 %2614, %2610
  %2616 = xor i64 %2615, -8438922516493580161
  %2617 = add i64 %116, 2089542884225022344
  %2618 = and i64 2089542884225022344, %116
  %2619 = or i64 2089542884225022344, %116
  %2620 = add i64 %2618, %2619
  %2621 = or i64 %19, 321068915041857044
  %2622 = and i64 321068915041857044, %19
  %2623 = xor i64 321068915041857044, %19
  %2624 = or i64 %2622, %2623
  %2625 = add i64 %418, -3839441535557379075
  %2626 = sub i64 0, %418
  %2627 = add i64 3839441535557379075, %2626
  %2628 = sub i64 0, %2627
  %2629 = xor i64 %2620, %2617
  %2630 = xor i64 %2629, %2624
  %2631 = xor i64 %2630, %2621
  %2632 = xor i64 %2631, %2628
  %2633 = xor i64 %2632, %2625
  %2634 = xor i64 %2633, 5138513545403966408
  %2635 = mul i64 %2616, %2634
  %2636 = mul i64 %2635, 108
  %2637 = and i64 %447, 6486467575776592615
  %2638 = xor i64 %447, -1
  %2639 = xor i64 6486467575776592615, %2638
  %2640 = and i64 %2639, 6486467575776592615
  %2641 = or i64 %458, 812246178181683381
  %2642 = and i64 812246178181683381, %458
  %2643 = xor i64 812246178181683381, %458
  %2644 = or i64 %2642, %2643
  %2645 = or i64 %80, -7446641941020612440
  %2646 = xor i64 %80, -1
  %2647 = and i64 -7446641941020612440, %2646
  %2648 = add i64 %2647, %80
  %2649 = xor i64 %2641, %2644
  %2650 = xor i64 %2649, %2648
  %2651 = xor i64 %2650, %2637
  %2652 = xor i64 %2651, %2640
  %2653 = xor i64 %2652, %2645
  %2654 = xor i64 %2653, -5676762476906943033
  %2655 = or i64 %17, 7035303974921111194
  %2656 = xor i64 %17, -1
  %2657 = and i64 7035303974921111194, %2656
  %2658 = add i64 %2657, %17
  %2659 = and i64 %416, -3506179160294529740
  %2660 = or i64 3506179160294529739, %416
  %2661 = sub i64 %2660, 3506179160294529739
  %2662 = or i64 %302, -8920983225614574175
  %2663 = xor i64 %302, -1
  %2664 = and i64 %2663, 7916722044302990080
  %2665 = and i64 %302, -7916722044302990081
  %2666 = or i64 %2664, %2665
  %2667 = xor i64 -1589887471269099871, %2666
  %2668 = xor i64 %302, -1
  %2669 = or i64 8920983225614574174, %2668
  %2670 = xor i64 %2669, -1
  %2671 = and i64 %2670, -1
  %2672 = or i64 %2667, %2671
  %2673 = xor i64 %2661, %2658
  %2674 = xor i64 %2673, %2659
  %2675 = xor i64 %2674, 6865321132054206266
  %2676 = xor i64 %2675, %2672
  %2677 = xor i64 %2676, %2662
  %2678 = xor i64 %2677, %2655
  %2679 = mul i64 %2654, %2678
  %2680 = add i64 %2679, 10
  %2681 = or i64 %62, 1786224000618966518
  %2682 = and i64 1786224000618966518, %62
  %2683 = xor i64 1786224000618966518, %62
  %2684 = or i64 %2682, %2683
  %2685 = or i64 %21, 3570385032164361946
  %2686 = xor i64 %21, -1
  %2687 = and i64 3570385032164361946, %2686
  %2688 = add i64 %2687, %21
  %2689 = add i64 %460, 8608939995124438973
  %2690 = add i64 -2134488795505541942, %460
  %2691 = add i64 %2690, -7703315283079570701
  %2692 = xor i64 %2684, %2681
  %2693 = xor i64 %2692, %2691
  %2694 = xor i64 %2693, 5597064987705594851
  %2695 = xor i64 %2694, %2689
  %2696 = xor i64 %2695, %2685
  %2697 = xor i64 %2696, %2688
  %2698 = add i64 %304, -9129917475902541434
  %2699 = add i64 6154908677231677201, %304
  %2700 = add i64 %2699, 3161917920575332981
  %2701 = add i64 %551, 2238468421500204101
  %2702 = add i64 6184377940984967444, %551
  %2703 = sub i64 %2702, 3945909519484763343
  %2704 = xor i64 %2700, 3316015109298138321
  %2705 = xor i64 %2704, %2703
  %2706 = xor i64 %2705, %2701
  %2707 = xor i64 %2706, %2698
  %2708 = mul i64 %2697, %2707
  %2709 = mul i64 29, %2708
  %2710 = sdiv i64 122, 34
  %2711 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  %2712 = load i32, i32* %2711, align 4
  %2713 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %2714 = load i32, i32* %2713, align 4
  %2715 = srem i32 %2712, %2714
  %2716 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 62
  %2717 = load i32, i32* %2716, align 4
  %2718 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 55
  %2719 = load i32, i32* %2718, align 4
  %2720 = add i32 %2717, 1930375922
  %2721 = sub i32 %2720, %2719
  %2722 = sub i32 %2721, 1930375922
  %.reload33 = load i1, i1* %.reg2mem32, align 1
  %2723 = select i1 %.reload33, i32 %2715, i32 %2722
  store i32 %2723, i32* %dispatcher, align 4
  %2724 = load i8*, i8** %8, align 8
  %2725 = load i8, i8* %2724, align 1
  %2726 = and i8 %2725, 1
  %2727 = icmp eq i8 %2726, 0
  %2728 = mul i8 %2725, %2725
  %2729 = xor i8 %2728, %2725
  %2730 = and i8 %2728, %2725
  %2731 = mul i8 2, %2730
  %2732 = add i8 %2729, %2731
  %2733 = mul i8 39, %2732
  %2734 = add i64 %304, 6489092306775690741
  %2735 = xor i64 6489092306775690741, %304
  %2736 = and i64 6489092306775690741, %304
  %2737 = mul i64 2, %2736
  %2738 = add i64 %2735, %2737
  %2739 = add i64 %179, -3464813432864540753
  %2740 = xor i64 -3464813432864540753, %179
  %2741 = and i64 -3464813432864540753, %179
  %2742 = mul i64 2, %2741
  %2743 = add i64 %2740, %2742
  %2744 = xor i64 %2743, -5487341115319455869
  %2745 = xor i64 %2744, %2739
  %2746 = xor i64 %2745, %2738
  %2747 = xor i64 %2746, %2734
  %2748 = or i64 %203, -2680313314322735102
  %2749 = xor i64 %203, -1
  %2750 = and i64 -2680313314322735102, %2749
  %2751 = add i64 %2750, %203
  %2752 = add i64 %416, -9195395079662596795
  %2753 = and i64 -9195395079662596795, %416
  %2754 = or i64 -9195395079662596795, %416
  %2755 = add i64 %2753, %2754
  %2756 = xor i64 %2752, %2755
  %2757 = xor i64 %2756, %2748
  %2758 = xor i64 %2757, -7645369841277922083
  %2759 = xor i64 %2758, %2751
  %2760 = mul i64 %2747, %2759
  %2761 = trunc i64 %2760 to i8
  %2762 = add i8 %2761, %2733
  %2763 = mul i8 -105, %2762
  %2764 = add i8 111, %2763
  %2765 = mul i8 %2764, 3
  %2766 = srem i8 %2765, 2
  %2767 = icmp eq i8 %2766, 0
  %2768 = or i1 %2727, %2767
  %2769 = select i1 %2768, i32 984876141, i32 984876144
  %2770 = xor i32 %2769, 29
  store i32 %2770, i32* %4, align 4
  %2771 = call i8** @bf6047435729067610447(i32* %4)
  %2772 = load i8*, i8** %2771, align 8
  indirectbr i8* %2772, [label %loopEnd, label %2516]

2773:                                             ; preds = %2773, %loopStart
  %2774 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 42
  %2775 = load i32, i32* %2774, align 4
  %2776 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 29
  %2777 = load i32, i32* %2776, align 4
  %2778 = sub i32 %2775, %2777
  store i32 %2778, i32* %dispatcher, align 4
  %2779 = load i8*, i8** %61, align 8
  %2780 = load i8, i8* %2779, align 1
  %2781 = xor i8 %2780, -1
  %2782 = or i8 %2781, -2
  %2783 = xor i8 %2782, -1
  %2784 = and i8 %2783, -1
  %2785 = icmp eq i8 %2784, 1
  %2786 = mul i8 %2780, %2780
  %2787 = sub i8 0, %2780
  %2788 = sub i8 %2786, %2787
  %2789 = srem i8 %2788, 2
  %2790 = and i64 %449, -2355604399017162223
  %2791 = xor i64 %449, -1
  %2792 = or i64 2355604399017162222, %2791
  %2793 = xor i64 %2792, -1
  %2794 = and i64 %2793, -1
  %2795 = sext i32 %dispatcher1 to i64
  %2796 = add i64 %2795, -5650020793432066388
  %2797 = add i64 9178204358689373978, %2795
  %2798 = sub i64 %2797, -3618518921588111250
  %2799 = or i64 %1154, -6920658064339534181
  %2800 = and i64 -6920658064339534181, %1154
  %2801 = xor i64 -6920658064339534181, %1154
  %2802 = or i64 %2800, %2801
  %2803 = xor i64 %2794, %2799
  %2804 = xor i64 %2803, %2798
  %2805 = xor i64 %2804, -6227255033420008431
  %2806 = xor i64 %2805, %2790
  %2807 = xor i64 %2806, %2802
  %2808 = xor i64 %2807, %2796
  %2809 = add i64 %292, 5922916184592684497
  %2810 = sub i64 0, %292
  %2811 = sub i64 5922916184592684497, %2810
  %2812 = or i64 %580, -8342682813062690239
  %2813 = and i64 -8342682813062690239, %580
  %2814 = xor i64 -8342682813062690239, %580
  %2815 = or i64 %2813, %2814
  %2816 = xor i64 0, %2811
  %2817 = xor i64 %2816, %2812
  %2818 = xor i64 %2817, %2809
  %2819 = xor i64 %2818, %2815
  %2820 = mul i64 %2808, %2819
  %2821 = trunc i64 %2820 to i8
  %2822 = icmp eq i8 %2789, %2821
  %2823 = xor i1 %2822, true
  %2824 = and i1 %2785, %2823
  %2825 = add i1 %2824, %2822
  %2826 = and i64 %66, -862557564080329102
  %2827 = or i64 862557564080329101, %66
  %2828 = sub i64 %2827, 862557564080329101
  %2829 = add i64 %76, 4181918820231279775
  %2830 = add i64 1413214213988999343, %76
  %2831 = add i64 %2830, 2768704606242280432
  %2832 = xor i64 %2826, %2828
  %2833 = xor i64 %2832, %2829
  %2834 = xor i64 %2833, %2831
  %2835 = xor i64 %2834, -3302708081999871975
  %2836 = and i64 %458, 2923819430808929289
  %2837 = xor i64 %458, -1
  %2838 = or i64 -2923819430808929290, %2837
  %2839 = xor i64 %2838, -1
  %2840 = and i64 %2839, -1
  %2841 = or i64 %195, -7171019297670209327
  %2842 = xor i64 %195, -1
  %2843 = and i64 -7171019297670209327, %2842
  %2844 = add i64 %2843, %195
  %2845 = xor i64 %2841, %2844
  %2846 = xor i64 %2845, -6638540568033167888
  %2847 = xor i64 %2846, %2840
  %2848 = xor i64 %2847, %2836
  %2849 = mul i64 %2835, %2848
  %2850 = trunc i64 %2849 to i32
  %2851 = select i1 %2825, i32 984876119, i32 %2850
  %2852 = xor i32 %2851, -1
  %2853 = and i32 %2852, -1750231942
  %2854 = and i32 %2851, 1750231941
  %2855 = or i32 %2853, %2854
  %2856 = xor i32 %2855, -1750231971
  store i32 %2856, i32* %4, align 4
  %2857 = call i8** @bf6047435729067610447(i32* %4)
  %2858 = load i8*, i8** %2857, align 8
  indirectbr i8* %2858, [label %loopEnd, label %2773]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 4070807658626890124, i64* %453, align 8
  %2859 = call i8** @lk8153326119118101986(i64* %453)
  %2860 = load i8*, i8** %2859, align 8
  %2861 = bitcast i8* %2860 to void ([65 x i32]*, i32*)*
  call void %2861([65 x i32]* %lookupTable, i32* %dispatcher)
  %2862 = load i8*, i8** %176, align 8
  %2863 = load i8, i8* %2862, align 1
  %2864 = mul i8 %2863, 2
  %2865 = mul i8 %2863, 2
  %2866 = add i8 2, %2865
  %2867 = mul i8 %2864, %2866
  %2868 = srem i8 %2867, 4
  %2869 = icmp eq i8 %2868, 0
  %2870 = mul i8 %2863, %2863
  %2871 = add i8 %2870, %2863
  %2872 = add i64 %296, -3026623936648833758
  %2873 = add i64 5649971729243242804, %296
  %2874 = add i64 %2873, -8676595665892076562
  %2875 = or i64 %13, 5661286866691713362
  %2876 = and i64 5661286866691713362, %13
  %2877 = xor i64 5661286866691713362, %13
  %2878 = or i64 %2876, %2877
  %2879 = add i64 %175, -6246184854958299813
  %2880 = add i64 2611857190500310730, %175
  %2881 = add i64 %2880, -8858042045458610543
  %2882 = xor i64 %2872, %2875
  %2883 = xor i64 %2882, %2879
  %2884 = xor i64 %2883, %2874
  %2885 = xor i64 %2884, -8520190594633822067
  %2886 = xor i64 %2885, %2878
  %2887 = xor i64 %2886, %2881
  %2888 = add i64 %545, 1743680293472554876
  %2889 = xor i64 1743680293472554876, %545
  %2890 = and i64 1743680293472554876, %545
  %2891 = mul i64 2, %2890
  %2892 = add i64 %2889, %2891
  %2893 = add i64 %185, -7837530908570997181
  %2894 = add i64 -3107264213128339908, %185
  %2895 = add i64 %2894, -4730266695442657273
  %2896 = xor i64 %2892, %2888
  %2897 = xor i64 %2896, %2895
  %2898 = xor i64 %2897, -6572982042090511222
  %2899 = xor i64 %2898, %2893
  %2900 = mul i64 %2887, %2899
  %2901 = trunc i64 %2900 to i8
  %2902 = srem i8 %2871, %2901
  %2903 = icmp eq i8 %2902, 0
  %2904 = xor i1 %2869, true
  %2905 = and i1 %2904, true
  %2906 = and i1 %2869, false
  %2907 = or i1 %2905, %2906
  %2908 = xor i1 %2903, true
  %2909 = or i64 %17, 3435387940386516123
  %2910 = xor i64 %17, -1
  %2911 = and i64 %2910, -2427307690131329786
  %2912 = and i64 %17, 2427307690131329785
  %2913 = or i64 %2911, %2912
  %2914 = xor i64 -1009778673684594275, %2913
  %2915 = xor i64 %17, -1
  %2916 = or i64 -3435387940386516124, %2915
  %2917 = xor i64 %2916, -1
  %2918 = and i64 %2917, -1
  %2919 = or i64 %2914, %2918
  %2920 = and i64 %243, 3748132609262989107
  %2921 = xor i64 %243, -1
  %2922 = xor i64 3748132609262989107, %2921
  %2923 = and i64 %2922, 3748132609262989107
  %2924 = xor i64 %2923, %2909
  %2925 = xor i64 %2924, %2919
  %2926 = xor i64 %2925, %2920
  %2927 = xor i64 %2926, 3765428941945775067
  %2928 = add i64 %298, 4309955859497042757
  %2929 = sub i64 0, %298
  %2930 = sub i64 4309955859497042757, %2929
  %2931 = and i64 %241, -3466172768864410119
  %2932 = xor i64 %241, -1
  %2933 = or i64 3466172768864410118, %2932
  %2934 = xor i64 %2933, -1
  %2935 = and i64 %2934, -1
  %2936 = xor i64 %2928, %2930
  %2937 = xor i64 %2936, -1680027627748057005
  %2938 = xor i64 %2937, %2931
  %2939 = xor i64 %2938, %2935
  %2940 = mul i64 %2927, %2939
  %2941 = trunc i64 %2940 to i1
  %2942 = and i1 %2908, %2941
  %2943 = or i64 %68, -5248346278438072539
  %2944 = xor i64 %68, -1
  %2945 = and i64 -5248346278438072539, %2944
  %2946 = add i64 %2945, %68
  %2947 = and i64 %60, -7076542510075787305
  %2948 = or i64 7076542510075787304, %60
  %2949 = sub i64 %2948, 7076542510075787304
  %2950 = xor i64 %2947, %2949
  %2951 = xor i64 %2950, %2946
  %2952 = xor i64 %2951, 7852955011844048737
  %2953 = xor i64 %2952, %2943
  %2954 = add i64 %13, -2993960975431458464
  %2955 = and i64 -2993960975431458464, %13
  %2956 = or i64 -2993960975431458464, %13
  %2957 = add i64 %2955, %2956
  %2958 = add i64 %13, 2896539750226150160
  %2959 = add i64 3350516771342659000, %13
  %2960 = sub i64 %2959, 453977021116508840
  %2961 = xor i64 %2954, %2957
  %2962 = xor i64 %2961, %2958
  %2963 = xor i64 %2962, %2960
  %2964 = xor i64 %2963, 0
  %2965 = mul i64 %2953, %2964
  %2966 = trunc i64 %2965 to i1
  %2967 = and i1 %2903, %2966
  %2968 = or i1 %2942, %2967
  %2969 = xor i1 %2907, %2968
  %2970 = xor i1 %2869, true
  %2971 = xor i1 %2903, true
  %2972 = or i1 %2970, %2971
  %2973 = xor i1 %2972, true
  %2974 = and i1 %2973, true
  %2975 = or i1 %2969, %2974
  %2976 = select i1 %2975, i32 984876111, i32 984876144
  %2977 = or i64 %203, 5942844545556117443
  %2978 = xor i64 %203, -1
  %2979 = and i64 %2978, 1205364350915652396
  %2980 = and i64 %203, -1205364350915652397
  %2981 = or i64 %2979, %2980
  %2982 = xor i64 4810805224937774319, %2981
  %2983 = xor i64 %203, -1
  %2984 = or i64 -5942844545556117444, %2983
  %2985 = xor i64 %2984, -1
  %2986 = and i64 %2985, -1
  %2987 = or i64 %2982, %2986
  %2988 = or i64 %82, 3509358012418628455
  %2989 = xor i64 %82, -1
  %2990 = and i64 3509358012418628455, %2989
  %2991 = add i64 %2990, %82
  %2992 = add i64 %458, -6673302567123609276
  %2993 = sub i64 0, %458
  %2994 = sub i64 -6673302567123609276, %2993
  %2995 = xor i64 %2988, %2994
  %2996 = xor i64 %2995, %2977
  %2997 = xor i64 %2996, 3023838210377100237
  %2998 = xor i64 %2997, %2987
  %2999 = xor i64 %2998, %2992
  %3000 = xor i64 %2999, %2991
  %3001 = and i64 %302, 8948992956210267949
  %3002 = xor i64 %302, -1
  %3003 = xor i64 8948992956210267949, %3002
  %3004 = and i64 %3003, 8948992956210267949
  %3005 = or i64 %383, -7149418872452736945
  %3006 = and i64 -7149418872452736945, %383
  %3007 = xor i64 -7149418872452736945, %383
  %3008 = or i64 %3006, %3007
  %3009 = or i64 %76, 42276020322058958
  %3010 = xor i64 %76, -1
  %3011 = and i64 %3010, -2089022376780188531
  %3012 = and i64 %76, 2089022376780188530
  %3013 = or i64 %3011, %3012
  %3014 = xor i64 -2047874601417116093, %3013
  %3015 = xor i64 %76, -1
  %3016 = or i64 -42276020322058959, %3015
  %3017 = xor i64 %3016, -1
  %3018 = and i64 %3017, -1
  %3019 = or i64 %3014, %3018
  %3020 = xor i64 %3005, %3009
  %3021 = xor i64 %3020, %3004
  %3022 = xor i64 %3021, %3008
  %3023 = xor i64 %3022, %3001
  %3024 = xor i64 %3023, -2578191697040046021
  %3025 = xor i64 %3024, %3019
  %3026 = mul i64 %3000, %3025
  %3027 = trunc i64 %3026 to i32
  %3028 = xor i32 %2976, %3027
  store i32 %3028, i32* %4, align 4
  %3029 = call i8** @bf6047435729067610447(i32* %4)
  %3030 = load i8*, i8** %3029, align 8
  indirectbr i8* %3030, [label %loopEnd, label %codeRepl]

3031:                                             ; preds = %3031, %loopStart
  %3032 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 17
  %3033 = load i32, i32* %3032, align 4
  %3034 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %3035 = load i32, i32* %3034, align 4
  %3036 = srem i32 %3033, %3035
  %3037 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  %3038 = load i32, i32* %3037, align 4
  %3039 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 13
  %3040 = load i32, i32* %3039, align 4
  %3041 = and i32 %3038, %3040
  %3042 = or i32 %3038, %3040
  %3043 = add i32 %3041, %3042
  %.reload31 = load i1, i1* %.reg2mem30, align 1
  %3044 = select i1 %.reload31, i32 %3036, i32 %3043
  store i32 %3044, i32* %dispatcher, align 4
  %3045 = load i8*, i8** %141, align 8
  %3046 = load i8, i8* %3045, align 1
  %3047 = mul i8 %3046, %3046
  %3048 = add i8 %3047, %3046
  %3049 = mul i8 %3048, 3
  %3050 = or i64 %385, 3003480378565045616
  %3051 = and i64 3003480378565045616, %385
  %3052 = xor i64 3003480378565045616, %385
  %3053 = or i64 %3051, %3052
  %3054 = and i64 %298, -6020306916995889909
  %3055 = xor i64 %298, -1
  %3056 = xor i64 -6020306916995889909, %3055
  %3057 = and i64 %3056, -6020306916995889909
  %3058 = xor i64 %3054, %3057
  %3059 = xor i64 %3058, 5375049892348596973
  %3060 = xor i64 %3059, %3053
  %3061 = xor i64 %3060, %3050
  %3062 = and i64 %58, -8440147745453237628
  %3063 = xor i64 %58, -1
  %3064 = or i64 8440147745453237627, %3063
  %3065 = xor i64 %3064, -1
  %3066 = and i64 %3065, -1
  %3067 = add i64 %5, 3702819863550749191
  %3068 = sub i64 0, %5
  %3069 = sub i64 3702819863550749191, %3068
  %3070 = or i64 %9, -3001124077060337704
  %3071 = and i64 -3001124077060337704, %9
  %3072 = xor i64 -3001124077060337704, %9
  %3073 = or i64 %3071, %3072
  %3074 = xor i64 %3073, %3066
  %3075 = xor i64 %3074, %3069
  %3076 = xor i64 %3075, %3062
  %3077 = xor i64 %3076, %3067
  %3078 = xor i64 %3077, %3070
  %3079 = xor i64 %3078, 4491708493818312138
  %3080 = mul i64 %3061, %3079
  %3081 = trunc i64 %3080 to i8
  %3082 = srem i8 %3049, %3081
  %3083 = icmp eq i8 %3082, 0
  %3084 = mul i8 %3046, %3046
  %3085 = add i8 %3084, %3046
  %3086 = srem i8 %3085, 2
  %3087 = icmp eq i8 %3086, 0
  %3088 = and i1 %3083, %3087
  %3089 = select i1 %3088, i32 984876138, i32 984876144
  %3090 = or i32 %3089, 26
  %3091 = and i32 %3089, 26
  %3092 = sub i32 %3090, %3091
  store i32 %3092, i32* %4, align 4
  %3093 = call i8** @bf6047435729067610447(i32* %4)
  %3094 = load i8*, i8** %3093, align 8
  indirectbr i8* %3094, [label %loopEnd, label %3031]

3095:                                             ; preds = %3095, %loopStart
  %.reload29 = load i64, i64* %.reg2mem25, align 8
  %3096 = sub i64 %.reload29, -227415904097822936
  %3097 = add i64 %3096, %3
  %3098 = add i64 %3097, -227415904097822936
  store i64 %3098, i64* %.reg2mem35, align 8
  %.reload37 = load i64, i64* %.reg2mem35, align 8
  %3099 = srem i64 %.reload37, 2
  store i64 %3099, i64* %.reg2mem38, align 8
  %.reload40 = load i64, i64* %.reg2mem38, align 8
  %3100 = icmp eq i64 %.reload40, 0
  store i1 %3100, i1* %.reg2mem41, align 1
  %.reload24 = load i1, i1* %.reg2mem22, align 1
  %.reload43 = load i1, i1* %.reg2mem41, align 1
  %3101 = and i1 %.reload24, %.reload43
  store i1 %3101, i1* %.reg2mem44, align 1
  %3102 = srem i64 %3, 2
  %3103 = icmp eq i64 %3102, 0
  %3104 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 11
  %3105 = load i32, i32* %3104, align 4
  %3106 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 10
  %3107 = load i32, i32* %3106, align 4
  %3108 = add i32 %3105, -2054319436
  %3109 = add i32 %3108, %3107
  %3110 = sub i32 %3109, -2054319436
  %3111 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 12
  %3112 = load i32, i32* %3111, align 4
  %3113 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 10
  %3114 = load i32, i32* %3113, align 4
  %3115 = add i32 %3112, -99666186
  %3116 = add i32 %3115, %3114
  %3117 = and i64 %420, -5910825434639980452
  %3118 = xor i64 %420, -1
  %3119 = or i64 5910825434639980451, %3118
  %3120 = xor i64 %3119, -1
  %3121 = and i64 %3120, -1
  %3122 = add i64 %181, 2523460792319053145
  %3123 = and i64 2523460792319053145, %181
  %3124 = or i64 2523460792319053145, %181
  %3125 = add i64 %3123, %3124
  %3126 = and i64 %449, 7456457952560645481
  %3127 = xor i64 %449, -1
  %3128 = or i64 -7456457952560645482, %3127
  %3129 = xor i64 %3128, -1
  %3130 = and i64 %3129, -1
  %3131 = xor i64 %3125, %3130
  %3132 = xor i64 %3131, %3126
  %3133 = xor i64 %3132, %3122
  %3134 = xor i64 %3133, %3121
  %3135 = xor i64 %3134, %3117
  %3136 = xor i64 %3135, 870920384789828945
  %3137 = sext i32 %dispatcher1 to i64
  %3138 = and i64 %3137, 4756955232435696646
  %3139 = xor i64 %3137, -1
  %3140 = or i64 -4756955232435696647, %3139
  %3141 = xor i64 %3140, -1
  %3142 = and i64 %3141, -1
  %3143 = or i64 %460, -6335156057150852487
  %3144 = and i64 -6335156057150852487, %460
  %3145 = xor i64 -6335156057150852487, %460
  %3146 = or i64 %3144, %3145
  %3147 = and i64 %11, -6824687879057205704
  %3148 = xor i64 %11, -1
  %3149 = xor i64 -6824687879057205704, %3148
  %3150 = and i64 %3149, -6824687879057205704
  %3151 = xor i64 %3138, %3147
  %3152 = xor i64 %3151, -2839564736840383978
  %3153 = xor i64 %3152, %3142
  %3154 = xor i64 %3153, %3150
  %3155 = xor i64 %3154, %3146
  %3156 = xor i64 %3155, %3143
  %3157 = mul i64 %3136, %3156
  %3158 = trunc i64 %3157 to i32
  %3159 = sub i32 %3116, %3158
  %3160 = select i1 %3103, i32 %3110, i32 %3159
  store i32 %3160, i32* %dispatcher, align 4
  %3161 = load i8*, i8** %345, align 8
  %3162 = load i8, i8* %3161, align 1
  %3163 = mul i8 %3162, 2
  %3164 = mul i8 %3162, 2
  %3165 = add i8 2, %3164
  %3166 = mul i8 %3163, %3165
  %3167 = srem i8 %3166, 4
  %3168 = icmp eq i8 %3167, 0
  %3169 = mul i8 %3162, %3162
  %3170 = add i8 %3169, %3162
  %3171 = and i64 %456, -2778659010918158377
  %3172 = xor i64 %456, -1
  %3173 = or i64 2778659010918158376, %3172
  %3174 = xor i64 %3173, -1
  %3175 = and i64 %3174, -1
  %3176 = or i64 %205, 7495154423951419826
  %3177 = xor i64 %205, -1
  %3178 = and i64 %3177, 748091683125849264
  %3179 = and i64 %205, -748091683125849265
  %3180 = or i64 %3178, %3179
  %3181 = xor i64 7090322024952857858, %3180
  %3182 = xor i64 %205, -1
  %3183 = or i64 -7495154423951419827, %3182
  %3184 = xor i64 %3183, -1
  %3185 = and i64 %3184, -1
  %3186 = or i64 %3181, %3185
  %3187 = xor i64 %3186, %3171
  %3188 = xor i64 %3187, %3176
  %3189 = xor i64 %3188, -6211469277268790879
  %3190 = xor i64 %3189, %3175
  %3191 = or i64 %187, 8174497357399607649
  %3192 = xor i64 %187, -1
  %3193 = and i64 %3192, 259668500336578705
  %3194 = and i64 %187, -259668500336578706
  %3195 = or i64 %3193, %3194
  %3196 = xor i64 8280748801250548208, %3195
  %3197 = xor i64 %187, -1
  %3198 = or i64 -8174497357399607650, %3197
  %3199 = xor i64 %3198, -1
  %3200 = and i64 %3199, -1
  %3201 = or i64 %3196, %3200
  %3202 = and i64 %185, 6124998710220241319
  %3203 = xor i64 %185, -1
  %3204 = xor i64 6124998710220241319, %3203
  %3205 = and i64 %3204, 6124998710220241319
  %3206 = xor i64 %3191, -7399363675397561150
  %3207 = xor i64 %3206, %3201
  %3208 = xor i64 %3207, %3202
  %3209 = xor i64 %3208, %3205
  %3210 = mul i64 %3190, %3209
  %3211 = trunc i64 %3210 to i8
  %3212 = srem i8 %3170, %3211
  %3213 = icmp eq i8 %3212, 0
  %3214 = or i1 %3168, %3213
  %3215 = select i1 %3214, i32 984876112, i32 984876144
  %3216 = xor i32 %3215, -1
  %3217 = and i32 %3216, 32
  %3218 = and i32 %3215, -33
  %3219 = or i32 %3217, %3218
  store i32 %3219, i32* %4, align 4
  %3220 = call i8** @bf6047435729067610447(i32* %4)
  %3221 = load i8*, i8** %3220, align 8
  indirectbr i8* %3221, [label %loopEnd, label %3095]

3222:                                             ; preds = %3222, %loopStart
  %3223 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  %3224 = load i32, i32* %3223, align 4
  %3225 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 12
  %3226 = load i32, i32* %3225, align 4
  %3227 = add i32 %3224, %3226
  store i32 %3227, i32* %dispatcher, align 4
  %3228 = load i8*, i8** %63, align 8
  %3229 = load i8, i8* %3228, align 1
  %3230 = and i8 %3229, 1
  %3231 = icmp eq i8 %3230, 1
  %3232 = mul i8 %3229, %3229
  %3233 = add i8 %3232, %3229
  %3234 = srem i8 %3233, 2
  %3235 = add i64 %13, -4046325656308179806
  %3236 = and i64 -4046325656308179806, %13
  %3237 = or i64 -4046325656308179806, %13
  %3238 = add i64 %3236, %3237
  %3239 = or i64 %241, 9109438534457113594
  %3240 = xor i64 %241, -1
  %3241 = and i64 %3240, 1986507814535218181
  %3242 = and i64 %241, -1986507814535218182
  %3243 = or i64 %3241, %3242
  %3244 = xor i64 7348260785178214399, %3243
  %3245 = xor i64 %241, -1
  %3246 = or i64 -9109438534457113595, %3245
  %3247 = xor i64 %3246, -1
  %3248 = and i64 %3247, -1
  %3249 = or i64 %3244, %3248
  %3250 = xor i64 %3239, 1189031459056769751
  %3251 = xor i64 %3250, %3235
  %3252 = xor i64 %3251, %3249
  %3253 = xor i64 %3252, %3238
  %3254 = and i64 %385, -3740850526368102693
  %3255 = xor i64 %385, -1
  %3256 = or i64 3740850526368102692, %3255
  %3257 = xor i64 %3256, -1
  %3258 = and i64 %3257, -1
  %3259 = and i64 %547, 1666293771232956555
  %3260 = xor i64 %547, -1
  %3261 = xor i64 1666293771232956555, %3260
  %3262 = and i64 %3261, 1666293771232956555
  %3263 = and i64 %545, -7219752309670765931
  %3264 = xor i64 %545, -1
  %3265 = or i64 7219752309670765930, %3264
  %3266 = xor i64 %3265, -1
  %3267 = and i64 %3266, -1
  %3268 = xor i64 %3259, %3258
  %3269 = xor i64 %3268, %3254
  %3270 = xor i64 %3269, %3267
  %3271 = xor i64 %3270, %3263
  %3272 = xor i64 %3271, %3262
  %3273 = xor i64 %3272, 0
  %3274 = mul i64 %3253, %3273
  %3275 = trunc i64 %3274 to i8
  %3276 = icmp eq i8 %3234, %3275
  %3277 = or i1 %3231, %3276
  %3278 = add i64 %551, 8044187439267346024
  %3279 = sub i64 0, %551
  %3280 = add i64 -8044187439267346024, %3279
  %3281 = sub i64 0, %3280
  %3282 = or i64 %547, 6801268751987492384
  %3283 = xor i64 %547, -1
  %3284 = and i64 %3283, 1673126515253936047
  %3285 = and i64 %547, -1673126515253936048
  %3286 = or i64 %3284, %3285
  %3287 = xor i64 5285772778699667855, %3286
  %3288 = xor i64 %547, -1
  %3289 = or i64 -6801268751987492385, %3288
  %3290 = xor i64 %3289, -1
  %3291 = and i64 %3290, -1
  %3292 = or i64 %3287, %3291
  %3293 = or i64 %74, 6574931877672922523
  %3294 = xor i64 %74, -1
  %3295 = and i64 6574931877672922523, %3294
  %3296 = add i64 %3295, %74
  %3297 = xor i64 %3292, %3281
  %3298 = xor i64 %3297, %3293
  %3299 = xor i64 %3298, %3278
  %3300 = xor i64 %3299, %3282
  %3301 = xor i64 %3300, %3296
  %3302 = xor i64 %3301, 1573607109534312045
  %3303 = and i64 %195, -4835080071772617937
  %3304 = xor i64 %195, -1
  %3305 = or i64 4835080071772617936, %3304
  %3306 = xor i64 %3305, -1
  %3307 = and i64 %3306, -1
  %3308 = and i64 %416, 2419934871063602597
  %3309 = xor i64 %416, -1
  %3310 = xor i64 2419934871063602597, %3309
  %3311 = and i64 %3310, 2419934871063602597
  %3312 = xor i64 %3303, %3308
  %3313 = xor i64 %3312, -5613727433707352016
  %3314 = xor i64 %3313, %3311
  %3315 = xor i64 %3314, %3307
  %3316 = mul i64 %3302, %3315
  %3317 = trunc i64 %3316 to i32
  %3318 = select i1 %3277, i32 984876144, i32 %3317
  %3319 = xor i32 %3318, 0
  store i32 %3319, i32* %4, align 4
  %3320 = call i8** @bf6047435729067610447(i32* %4)
  %3321 = load i8*, i8** %3320, align 8
  indirectbr i8* %3321, [label %loopEnd, label %3222]

3322:                                             ; preds = %3322, %loopStart
  %3323 = srem i64 %3, 2
  %3324 = icmp eq i64 %3323, 0
  %.reload4 = load i64, i64* %.reg2mem, align 8
  %3325 = and i64 %3, -7202618797305767912
  %3326 = or i64 7202618797305767911, %3
  %3327 = sub i64 %3326, 7202618797305767911
  %3328 = and i64 %173, 2542797940928771978
  %3329 = or i64 -2542797940928771979, %173
  %3330 = sub i64 %3329, -2542797940928771979
  %3331 = and i64 %578, -1224854897603996514
  %3332 = or i64 1224854897603996513, %578
  %3333 = sub i64 %3332, 1224854897603996513
  %3334 = xor i64 -1485546207421878931, %3333
  %3335 = xor i64 %3334, %3327
  %3336 = xor i64 %3335, %3328
  %3337 = xor i64 %3336, %3331
  %3338 = xor i64 %3337, %3330
  %3339 = xor i64 %3338, %3325
  %3340 = add i64 %580, 8200341658053691945
  %3341 = sub i64 0, %580
  %3342 = add i64 -8200341658053691945, %3341
  %3343 = sub i64 0, %3342
  %3344 = and i64 %80, 5139489521098346350
  %3345 = xor i64 %80, -1
  %3346 = xor i64 5139489521098346350, %3345
  %3347 = and i64 %3346, 5139489521098346350
  %3348 = add i64 %80, -3800235130452112158
  %3349 = xor i64 -3800235130452112158, %80
  %3350 = and i64 -3800235130452112158, %80
  %3351 = mul i64 2, %3350
  %3352 = add i64 %3349, %3351
  %3353 = xor i64 %3343, %3344
  %3354 = xor i64 %3353, %3348
  %3355 = xor i64 %3354, %3340
  %3356 = xor i64 %3355, %3352
  %3357 = xor i64 %3356, %3347
  %3358 = xor i64 %3357, 9170309224155236554
  %3359 = mul i64 %3339, %3358
  %3360 = mul i64 %.reload4, %3359
  %.reload3 = load i64, i64* %.reg2mem, align 8
  %3361 = mul i64 %.reload3, 2
  %3362 = and i64 %191, -3442124624819335059
  %3363 = xor i64 %191, -1
  %3364 = or i64 3442124624819335058, %3363
  %3365 = xor i64 %3364, -1
  %3366 = and i64 %3365, -1
  %3367 = and i64 %447, -1135748496418835999
  %3368 = or i64 1135748496418835998, %447
  %3369 = sub i64 %3368, 1135748496418835998
  %3370 = xor i64 %3366, %3369
  %3371 = xor i64 %3370, %3367
  %3372 = xor i64 %3371, 4599045976898843271
  %3373 = xor i64 %3372, %3362
  %3374 = add i64 %416, 1174639218557573106
  %3375 = xor i64 1174639218557573106, %416
  %3376 = and i64 1174639218557573106, %416
  %3377 = mul i64 2, %3376
  %3378 = add i64 %3375, %3377
  %3379 = add i64 %582, 8369155803833774304
  %3380 = xor i64 8369155803833774304, %582
  %3381 = and i64 8369155803833774304, %582
  %3382 = mul i64 2, %3381
  %3383 = add i64 %3380, %3382
  %3384 = xor i64 -8547404426119813522, %3374
  %3385 = xor i64 %3384, %3378
  %3386 = xor i64 %3385, %3379
  %3387 = xor i64 %3386, %3383
  %3388 = mul i64 %3373, %3387
  %3389 = add i64 %3388, %3361
  %3390 = mul i64 %3360, %3389
  %3391 = srem i64 %3390, 4
  %3392 = icmp eq i64 %3391, 0
  %.reload2 = load i64, i64* %.reg2mem, align 8
  %3393 = mul i64 %.reload2, %.reload2
  %.reload = load i64, i64* %.reg2mem, align 8
  %3394 = and i64 %3393, %.reload
  %3395 = or i64 %3393, %.reload
  %3396 = add i64 %3394, %3395
  %3397 = srem i64 %3396, 2
  %3398 = icmp eq i64 %3397, 0
  %3399 = xor i1 %3398, true
  %3400 = xor i1 %3392, %3399
  %3401 = and i1 %3400, %3392
  store i1 %3401, i1* %.reg2mem46, align 1
  %3402 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 13
  %3403 = load i32, i32* %3402, align 4
  %3404 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 11
  %3405 = load i32, i32* %3404, align 4
  %3406 = add i32 %3403, %3405
  %3407 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 12
  %3408 = load i32, i32* %3407, align 4
  %3409 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 11
  %3410 = load i32, i32* %3409, align 4
  %3411 = add i32 %3408, %3410
  %.reload48 = load i1, i1* %.reg2mem46, align 1
  %3412 = select i1 %.reload48, i32 %3406, i32 %3411
  store i32 %3412, i32* %dispatcher, align 4
  %3413 = load i8*, i8** %345, align 8
  %3414 = load i8, i8* %3413, align 1
  %3415 = xor i8 %3414, -1
  %3416 = or i8 %3415, -2
  %3417 = xor i8 %3416, -1
  %3418 = and i64 %70, 7149023687504908544
  %3419 = xor i64 %70, -1
  %3420 = xor i64 7149023687504908544, %3419
  %3421 = and i64 %3420, 7149023687504908544
  %3422 = and i64 %553, 4737818227950189278
  %3423 = xor i64 %553, -1
  %3424 = xor i64 4737818227950189278, %3423
  %3425 = and i64 %3424, 4737818227950189278
  %3426 = xor i64 %3418, %3422
  %3427 = xor i64 %3426, %3425
  %3428 = xor i64 %3427, -3506782849945931963
  %3429 = xor i64 %3428, %3421
  %3430 = and i64 %191, -8409564809000231938
  %3431 = xor i64 %191, -1
  %3432 = or i64 8409564809000231937, %3431
  %3433 = xor i64 %3432, -1
  %3434 = and i64 %3433, -1
  %3435 = and i64 %11, -4399061503062275046
  %3436 = xor i64 %11, -1
  %3437 = xor i64 -4399061503062275046, %3436
  %3438 = and i64 %3437, -4399061503062275046
  %3439 = xor i64 %3438, %3430
  %3440 = xor i64 %3439, %3435
  %3441 = xor i64 %3440, 3832427173173117299
  %3442 = xor i64 %3441, %3434
  %3443 = mul i64 %3429, %3442
  %3444 = trunc i64 %3443 to i8
  %3445 = and i8 %3417, %3444
  %3446 = icmp eq i8 %3445, 1
  %3447 = mul i8 %3414, %3414
  %3448 = add i8 %3447, %3414
  %3449 = srem i8 %3448, 2
  %3450 = icmp eq i8 %3449, 0
  %3451 = or i1 %3446, %3450
  %3452 = select i1 %3451, i32 984876147, i32 984876144
  %3453 = or i64 %13, 8164442071917287102
  %3454 = xor i64 %13, -1
  %3455 = and i64 %3454, 3160664938664638523
  %3456 = and i64 %13, -3160664938664638524
  %3457 = or i64 %3455, %3456
  %3458 = xor i64 6526028991743225477, %3457
  %3459 = xor i64 %13, -1
  %3460 = or i64 -8164442071917287103, %3459
  %3461 = xor i64 %3460, -1
  %3462 = and i64 %3461, -1
  %3463 = or i64 %3458, %3462
  %3464 = add i64 %17, -5967917024864700455
  %3465 = xor i64 -5967917024864700455, %17
  %3466 = and i64 -5967917024864700455, %17
  %3467 = mul i64 2, %3466
  %3468 = add i64 %3465, %3467
  %3469 = add i64 %551, 5085158239679218954
  %3470 = add i64 7720326253916187386, %551
  %3471 = add i64 %3470, -2635168014236968432
  %3472 = xor i64 %3469, %3471
  %3473 = xor i64 %3472, %3463
  %3474 = xor i64 %3473, %3468
  %3475 = xor i64 %3474, %3464
  %3476 = xor i64 %3475, -5684677496721547861
  %3477 = xor i64 %3476, %3453
  %3478 = add i64 %245, 5721198182252751964
  %3479 = xor i64 5721198182252751964, %245
  %3480 = and i64 5721198182252751964, %245
  %3481 = mul i64 2, %3480
  %3482 = add i64 %3479, %3481
  %3483 = and i64 %385, 2526678245551129198
  %3484 = xor i64 %385, -1
  %3485 = or i64 -2526678245551129199, %3484
  %3486 = xor i64 %3485, -1
  %3487 = and i64 %3486, -1
  %3488 = add i64 %13, -5772803141986164676
  %3489 = add i64 -5146257698540110863, %13
  %3490 = add i64 %3489, -626545443446053813
  %3491 = xor i64 2487291652953349897, %3488
  %3492 = xor i64 %3491, %3490
  %3493 = xor i64 %3492, %3483
  %3494 = xor i64 %3493, %3482
  %3495 = xor i64 %3494, %3478
  %3496 = xor i64 %3495, %3487
  %3497 = mul i64 %3477, %3496
  %3498 = trunc i64 %3497 to i32
  %3499 = xor i32 %3452, %3498
  store i32 %3499, i32* %4, align 4
  %3500 = call i8** @bf6047435729067610447(i32* %4)
  %3501 = load i8*, i8** %3500, align 8
  indirectbr i8* %3501, [label %loopEnd, label %3322]

3502:                                             ; preds = %3502, %loopStart
  %3503 = and i64 %1154, -3294984842364307425
  %3504 = xor i64 %1154, -1
  %3505 = or i64 3294984842364307424, %3504
  %3506 = xor i64 %3505, -1
  %3507 = and i64 %3506, -1
  %3508 = add i64 %458, 4498544811402767002
  %3509 = sub i64 0, %458
  %3510 = add i64 -4498544811402767002, %3509
  %3511 = sub i64 0, %3510
  %3512 = xor i64 %3511, %3507
  %3513 = xor i64 %3512, %3508
  %3514 = xor i64 %3513, -7111110318575655463
  %3515 = xor i64 %3514, %3503
  %3516 = or i64 %62, -8132505669713585333
  %3517 = xor i64 %62, -1
  %3518 = and i64 -8132505669713585333, %3517
  %3519 = add i64 %3518, %62
  %3520 = or i64 %300, 5094144204414180247
  %3521 = xor i64 %300, -1
  %3522 = and i64 5094144204414180247, %3521
  %3523 = add i64 %3522, %300
  %3524 = and i64 %21, 4748827122267311670
  %3525 = xor i64 %21, -1
  %3526 = or i64 -4748827122267311671, %3525
  %3527 = xor i64 %3526, -1
  %3528 = and i64 %3527, -1
  %3529 = xor i64 %3520, %3523
  %3530 = xor i64 %3529, %3528
  %3531 = xor i64 %3530, %3519
  %3532 = xor i64 %3531, %3524
  %3533 = xor i64 %3532, 2043132031954982377
  %3534 = xor i64 %3533, %3516
  %3535 = mul i64 %3515, %3534
  %3536 = sub i64 0, %3535
  %3537 = sub i64 90, 83
  %3538 = mul i64 100, 38
  %3539 = add i64 5, 85
  %3540 = or i64 %458, 9172014037753905827
  %3541 = xor i64 %458, -1
  %3542 = and i64 9172014037753905827, %3541
  %3543 = add i64 %3542, %458
  %3544 = or i64 %296, -6972235836038524589
  %3545 = xor i64 %296, -1
  %3546 = and i64 -6972235836038524589, %3545
  %3547 = add i64 %3546, %296
  %3548 = add i64 %183, 6312082041415754200
  %3549 = and i64 6312082041415754200, %183
  %3550 = or i64 6312082041415754200, %183
  %3551 = add i64 %3549, %3550
  %3552 = xor i64 %3544, %3551
  %3553 = xor i64 %3552, %3540
  %3554 = xor i64 %3553, %3548
  %3555 = xor i64 %3554, %3547
  %3556 = xor i64 %3555, %3543
  %3557 = xor i64 %3556, 7130482911408566923
  %3558 = and i64 %245, 616450433179817446
  %3559 = or i64 -616450433179817447, %245
  %3560 = sub i64 %3559, -616450433179817447
  %3561 = or i64 %447, 1597434482286881649
  %3562 = xor i64 %447, -1
  %3563 = and i64 1597434482286881649, %3562
  %3564 = add i64 %3563, %447
  %3565 = xor i64 %3558, %3564
  %3566 = xor i64 %3565, %3560
  %3567 = xor i64 %3566, %3561
  %3568 = xor i64 %3567, 2311148041851563686
  %3569 = mul i64 %3557, %3568
  %3570 = add i64 %3569, 28
  %3571 = sub i64 55, 23
  %3572 = or i64 %456, -5450165420762161637
  %3573 = xor i64 %456, -1
  %3574 = and i64 %3573, -48587000815277366
  %3575 = and i64 %456, 48587000815277365
  %3576 = or i64 %3574, %3575
  %3577 = xor i64 5408397694151341265, %3576
  %3578 = xor i64 %456, -1
  %3579 = or i64 5450165420762161636, %3578
  %3580 = xor i64 %3579, -1
  %3581 = and i64 %3580, -1
  %3582 = or i64 %3577, %3581
  %3583 = and i64 %58, -2968257572853215069
  %3584 = or i64 2968257572853215068, %58
  %3585 = sub i64 %3584, 2968257572853215068
  %3586 = xor i64 %3572, %3583
  %3587 = xor i64 %3586, %3585
  %3588 = xor i64 %3587, %3582
  %3589 = xor i64 %3588, -775721739174817453
  %3590 = add i64 %460, -6390188979129489654
  %3591 = add i64 8388273799132089663, %460
  %3592 = add i64 %3591, 3668281295447972299
  %3593 = and i64 %580, -199865834089984919
  %3594 = or i64 199865834089984918, %580
  %3595 = sub i64 %3594, 199865834089984918
  %3596 = add i64 %458, 2041470919619514527
  %3597 = sub i64 0, %458
  %3598 = add i64 -2041470919619514527, %3597
  %3599 = sub i64 0, %3598
  %3600 = xor i64 %3595, %3593
  %3601 = xor i64 %3600, %3599
  %3602 = xor i64 %3601, %3592
  %3603 = xor i64 %3602, -2355486544664890957
  %3604 = xor i64 %3603, %3596
  %3605 = xor i64 %3604, %3590
  %3606 = mul i64 %3589, %3605
  %3607 = and i64 %451, -855891114097109585
  %3608 = xor i64 %451, -1
  %3609 = xor i64 -855891114097109585, %3608
  %3610 = and i64 %3609, -855891114097109585
  %3611 = add i64 %68, -3451918157692155419
  %3612 = sub i64 0, %68
  %3613 = add i64 3451918157692155419, %3612
  %3614 = sub i64 0, %3613
  %3615 = and i64 %7, 4643422344326742078
  %3616 = or i64 -4643422344326742079, %7
  %3617 = sub i64 %3616, -4643422344326742079
  %3618 = xor i64 %3610, %3615
  %3619 = xor i64 %3618, %3614
  %3620 = xor i64 %3619, %3617
  %3621 = xor i64 %3620, -6523432153859412559
  %3622 = xor i64 %3621, %3611
  %3623 = xor i64 %3622, %3607
  %3624 = add i64 %418, -9045194987713780189
  %3625 = sub i64 0, %418
  %3626 = add i64 9045194987713780189, %3625
  %3627 = sub i64 0, %3626
  %3628 = and i64 %243, -987456209858515067
  %3629 = xor i64 %243, -1
  %3630 = xor i64 -987456209858515067, %3629
  %3631 = and i64 %3630, -987456209858515067
  %3632 = xor i64 -2550918026761811230, %3627
  %3633 = xor i64 %3632, %3631
  %3634 = xor i64 %3633, %3628
  %3635 = xor i64 %3634, %3624
  %3636 = mul i64 %3623, %3635
  %3637 = mul i64 %3606, %3636
  %3638 = sdiv i64 117, 88
  %3639 = add i64 %60, 3783312513037425974
  %3640 = sub i64 0, %60
  %3641 = add i64 -3783312513037425974, %3640
  %3642 = sub i64 0, %3641
  %3643 = add i64 %58, 8191999056196822393
  %3644 = add i64 -5100703320283497782, %58
  %3645 = sub i64 %3644, 5154041697229231441
  %3646 = or i64 %580, -8490135376579375585
  %3647 = xor i64 %580, -1
  %3648 = and i64 %3647, 9129649502858974062
  %3649 = and i64 %580, -9129649502858974063
  %3650 = or i64 %3648, %3649
  %3651 = xor i64 -819658424177828495, %3650
  %3652 = xor i64 %580, -1
  %3653 = or i64 8490135376579375584, %3652
  %3654 = xor i64 %3653, -1
  %3655 = and i64 %3654, -1
  %3656 = or i64 %3651, %3655
  %3657 = xor i64 %3643, %3642
  %3658 = xor i64 %3657, %3646
  %3659 = xor i64 %3658, %3639
  %3660 = xor i64 %3659, 4816762610918007383
  %3661 = xor i64 %3660, %3656
  %3662 = xor i64 %3661, %3645
  %3663 = and i64 %456, 5479328388600799321
  %3664 = or i64 -5479328388600799322, %456
  %3665 = sub i64 %3664, -5479328388600799322
  %3666 = and i64 %11, -5429747343280997106
  %3667 = xor i64 %11, -1
  %3668 = or i64 5429747343280997105, %3667
  %3669 = xor i64 %3668, -1
  %3670 = and i64 %3669, -1
  %3671 = or i64 %201, 8746641415130122529
  %3672 = and i64 8746641415130122529, %201
  %3673 = xor i64 8746641415130122529, %201
  %3674 = or i64 %3672, %3673
  %3675 = xor i64 %3663, %3671
  %3676 = xor i64 %3675, %3670
  %3677 = xor i64 %3676, %3666
  %3678 = xor i64 %3677, 9185409879704446200
  %3679 = xor i64 %3678, %3674
  %3680 = xor i64 %3679, %3665
  %3681 = mul i64 %3662, %3680
  %3682 = sdiv i64 10, %3681
  %3683 = sub i64 -5529902742839209455, -5529902742839209528
  %3684 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 22
  %3685 = load i32, i32* %3684, align 4
  %3686 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %3687 = load i32, i32* %3686, align 4
  %3688 = srem i32 %3685, %3687
  %3689 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  %3690 = load i32, i32* %3689, align 4
  %3691 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %3692 = load i32, i32* %3691, align 4
  %3693 = sub i32 %3690, %3692
  %.reload47 = load i1, i1* %.reg2mem46, align 1
  %3694 = select i1 %.reload47, i32 %3688, i32 %3693
  store i32 %3694, i32* %dispatcher, align 4
  %3695 = load i8*, i8** %6, align 8
  %3696 = load i8, i8* %3695, align 1
  %3697 = and i8 %3696, 1
  %3698 = icmp eq i8 %3697, 1
  %3699 = mul i8 %3696, %3696
  %3700 = xor i8 %3699, %3696
  %3701 = and i8 %3699, %3696
  %3702 = mul i8 2, %3701
  %3703 = add i8 %3700, %3702
  %3704 = srem i8 %3703, 2
  %3705 = icmp eq i8 %3704, 0
  %3706 = or i1 %3698, %3705
  %3707 = select i1 %3706, i32 984876107, i32 984876144
  %3708 = or i32 %3707, 59
  %3709 = and i32 %3707, 59
  %3710 = sub i32 %3708, %3709
  store i32 %3710, i32* %4, align 4
  %3711 = call i8** @bf6047435729067610447(i32* %4)
  %3712 = load i8*, i8** %3711, align 8
  indirectbr i8* %3712, [label %loopEnd, label %3502]

3713:                                             ; preds = %3713, %loopStart
  %3714 = add i64 68, 59
  %3715 = sub i64 90, 83
  %3716 = mul i64 100, 38
  %3717 = add i64 85, 5
  %3718 = add i64 34, 28
  %3719 = sub i64 55, 23
  %3720 = or i64 %294, 7684851865752026353
  %3721 = and i64 7684851865752026353, %294
  %3722 = xor i64 7684851865752026353, %294
  %3723 = or i64 %3721, %3722
  %3724 = or i64 %454, -7859710397467217844
  %3725 = xor i64 %454, -1
  %3726 = and i64 -7859710397467217844, %3725
  %3727 = add i64 %3726, %454
  %3728 = add i64 %62, -630291509308493762
  %3729 = sub i64 0, %62
  %3730 = sub i64 -630291509308493762, %3729
  %3731 = xor i64 %3724, %3730
  %3732 = xor i64 %3731, %3723
  %3733 = xor i64 %3732, %3728
  %3734 = xor i64 %3733, -7328351812629867197
  %3735 = xor i64 %3734, %3727
  %3736 = xor i64 %3735, %3720
  %3737 = and i64 %58, -4564328796510745492
  %3738 = xor i64 %58, -1
  %3739 = xor i64 -4564328796510745492, %3738
  %3740 = and i64 %3739, -4564328796510745492
  %3741 = add i64 %383, 5710886990880693019
  %3742 = add i64 -3150078873618469228, %383
  %3743 = add i64 %3742, 8860965864499162247
  %3744 = xor i64 -8487628703676917354, %3737
  %3745 = xor i64 %3744, %3743
  %3746 = xor i64 %3745, %3741
  %3747 = xor i64 %3746, %3740
  %3748 = mul i64 %3736, %3747
  %3749 = mul i64 9, %3748
  %3750 = sdiv i64 117, 88
  %3751 = sdiv i64 10, 72
  %3752 = add i64 8, 65
  %3753 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 13
  %3754 = load i32, i32* %3753, align 4
  %3755 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 12
  %3756 = load i32, i32* %3755, align 4
  %3757 = sub i32 %3754, 403809761
  %3758 = add i32 %3757, %3756
  %3759 = add i32 %3758, 403809761
  store i32 %3759, i32* %dispatcher, align 4
  %3760 = load i8*, i8** %8, align 8
  %3761 = load i8, i8* %3760, align 1
  %3762 = mul i8 %3761, 2
  %3763 = add i64 %545, 1937393887277787341
  %3764 = add i64 3116089072310876111, %545
  %3765 = sub i64 %3764, 1178695185033088770
  %3766 = or i64 %140, -3853470243318607399
  %3767 = and i64 -3853470243318607399, %140
  %3768 = xor i64 -3853470243318607399, %140
  %3769 = or i64 %3767, %3768
  %3770 = xor i64 -5468014090735921009, %3763
  %3771 = xor i64 %3770, %3769
  %3772 = xor i64 %3771, %3765
  %3773 = xor i64 %3772, %3766
  %3774 = or i64 %21, 2611976662654689886
  %3775 = xor i64 %21, -1
  %3776 = and i64 %3775, -1880883355443627863
  %3777 = and i64 %21, 1880883355443627862
  %3778 = or i64 %3776, %3777
  %3779 = xor i64 -4478169700899824905, %3778
  %3780 = xor i64 %21, -1
  %3781 = or i64 -2611976662654689887, %3780
  %3782 = xor i64 %3781, -1
  %3783 = and i64 %3782, -1
  %3784 = or i64 %3779, %3783
  %3785 = add i64 %78, 1408959380295306186
  %3786 = and i64 1408959380295306186, %78
  %3787 = or i64 1408959380295306186, %78
  %3788 = add i64 %3786, %3787
  %3789 = and i64 %175, -6710701976411526534
  %3790 = or i64 6710701976411526533, %175
  %3791 = sub i64 %3790, 6710701976411526533
  %3792 = xor i64 %3789, %3784
  %3793 = xor i64 %3792, %3785
  %3794 = xor i64 %3793, %3774
  %3795 = xor i64 %3794, %3788
  %3796 = xor i64 %3795, 5124429734017928414
  %3797 = xor i64 %3796, %3791
  %3798 = mul i64 %3773, %3797
  %3799 = trunc i64 %3798 to i8
  %3800 = mul i8 %3761, %3799
  %3801 = add i8 2, %3800
  %3802 = mul i8 %3762, %3801
  %3803 = srem i8 %3802, 4
  %3804 = add i64 %553, 4492177125080734425
  %3805 = xor i64 4492177125080734425, %553
  %3806 = and i64 4492177125080734425, %553
  %3807 = mul i64 2, %3806
  %3808 = add i64 %3805, %3807
  %3809 = add i64 %553, -7143521082591364165
  %3810 = sub i64 0, %553
  %3811 = sub i64 -7143521082591364165, %3810
  %3812 = add i64 %66, -8544084907824624303
  %3813 = add i64 -8155081395564100561, %66
  %3814 = add i64 %3813, -389003512260523742
  %3815 = xor i64 %3811, %3809
  %3816 = xor i64 %3815, %3804
  %3817 = xor i64 %3816, %3812
  %3818 = xor i64 %3817, %3808
  %3819 = xor i64 %3818, 2024824792070898871
  %3820 = xor i64 %3819, %3814
  %3821 = add i64 %9, -4062939583767652778
  %3822 = add i64 7759360271756817477, %9
  %3823 = add i64 %3822, 6624444218185081361
  %3824 = add i64 %547, -3667933260636774901
  %3825 = and i64 -3667933260636774901, %547
  %3826 = or i64 -3667933260636774901, %547
  %3827 = add i64 %3825, %3826
  %3828 = or i64 %7, 5211060888672637985
  %3829 = xor i64 %7, -1
  %3830 = and i64 5211060888672637985, %3829
  %3831 = add i64 %3830, %7
  %3832 = xor i64 %3828, %3823
  %3833 = xor i64 %3832, %3821
  %3834 = xor i64 %3833, 0
  %3835 = xor i64 %3834, %3831
  %3836 = xor i64 %3835, %3827
  %3837 = xor i64 %3836, %3824
  %3838 = mul i64 %3820, %3837
  %3839 = trunc i64 %3838 to i8
  %3840 = icmp eq i8 %3803, %3839
  %3841 = mul i8 %3761, %3761
  %3842 = mul i8 %3841, %3761
  %3843 = add i8 %3842, %3761
  %3844 = srem i8 %3843, 2
  %3845 = icmp eq i8 %3844, 0
  %3846 = and i1 %3840, %3845
  %3847 = select i1 %3846, i32 984876101, i32 984876144
  %3848 = xor i32 %3847, 53
  store i32 %3848, i32* %4, align 4
  %3849 = call i8** @bf6047435729067610447(i32* %4)
  %3850 = load i8*, i8** %3849, align 8
  indirectbr i8* %3850, [label %loopEnd, label %3713]

3851:                                             ; preds = %3851, %loopStart
  %3852 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 60
  %3853 = load i32, i32* %3852, align 4
  %3854 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 40
  %3855 = load i32, i32* %3854, align 4
  %3856 = sub i32 %3853, %3855
  store i32 %3856, i32* %dispatcher, align 4
  %3857 = load i8*, i8** %176, align 8
  %3858 = load i8, i8* %3857, align 1
  %3859 = mul i8 %3858, 2
  %3860 = mul i8 %3858, 2
  %3861 = add i8 2, %3860
  %3862 = mul i8 %3859, %3861
  %3863 = add i64 %78, 1569149354428423841
  %3864 = sub i64 0, %78
  %3865 = add i64 -1569149354428423841, %3864
  %3866 = sub i64 0, %3865
  %3867 = and i64 %11, 6920908386734182494
  %3868 = xor i64 %11, -1
  %3869 = xor i64 6920908386734182494, %3868
  %3870 = and i64 %3869, 6920908386734182494
  %3871 = or i64 %197, -4747803098559516605
  %3872 = xor i64 %197, -1
  %3873 = and i64 %3872, 8468300379610381385
  %3874 = and i64 %197, -8468300379610381386
  %3875 = or i64 %3873, %3874
  %3876 = xor i64 -3775959975081866230, %3875
  %3877 = xor i64 %197, -1
  %3878 = or i64 4747803098559516604, %3877
  %3879 = xor i64 %3878, -1
  %3880 = and i64 %3879, -1
  %3881 = or i64 %3876, %3880
  %3882 = xor i64 %3871, 6544256139169051069
  %3883 = xor i64 %3882, %3867
  %3884 = xor i64 %3883, %3866
  %3885 = xor i64 %3884, %3870
  %3886 = xor i64 %3885, %3881
  %3887 = xor i64 %3886, %3863
  %3888 = and i64 %580, 3137244528445711103
  %3889 = xor i64 %580, -1
  %3890 = or i64 -3137244528445711104, %3889
  %3891 = xor i64 %3890, -1
  %3892 = and i64 %3891, -1
  %3893 = add i64 %116, -7702448420939704438
  %3894 = sub i64 0, %116
  %3895 = add i64 7702448420939704438, %3894
  %3896 = sub i64 0, %3895
  %3897 = xor i64 %3892, %3896
  %3898 = xor i64 %3897, %3888
  %3899 = xor i64 %3898, %3893
  %3900 = xor i64 %3899, 8556221132637881940
  %3901 = mul i64 %3887, %3900
  %3902 = trunc i64 %3901 to i8
  %3903 = srem i8 %3862, %3902
  %3904 = icmp eq i8 %3903, 0
  %3905 = mul i8 %3858, %3858
  %3906 = add i8 %3905, %3858
  %3907 = srem i8 %3906, 2
  %3908 = icmp eq i8 %3907, 0
  %3909 = and i1 %3904, %3908
  %3910 = select i1 %3909, i32 984876097, i32 984876144
  %3911 = or i32 %3910, 49
  %3912 = and i32 %3910, 49
  %3913 = sub i32 %3911, %3912
  store i32 %3913, i32* %4, align 4
  %3914 = call i8** @bf6047435729067610447(i32* %4)
  %3915 = load i8*, i8** %3914, align 8
  indirectbr i8* %3915, [label %loopEnd, label %3851]

3916:                                             ; preds = %3916, %loopStart
  %3917 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 25
  %3918 = load i32, i32* %3917, align 4
  %3919 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %3920 = load i32, i32* %3919, align 4
  %3921 = srem i32 %3918, %3920
  store i32 %3921, i32* %dispatcher, align 4
  %.reload36 = load i64, i64* %.reg2mem35, align 8
  %.reload39 = load i64, i64* %.reg2mem38, align 8
  %.reload42 = load i1, i1* %.reg2mem41, align 1
  %.reload45 = load i1, i1* %.reg2mem44, align 1
  store i64 %.reload36, i64* %.reg2mem97, align 8
  store i1 %.reload45, i1* %.reg2mem99, align 1
  %3922 = load i8*, i8** %301, align 8
  %3923 = load i8, i8* %3922, align 1
  %3924 = mul i8 %3923, %3923
  %3925 = add i8 %3924, %3923
  %3926 = mul i8 %3925, 3
  %3927 = srem i8 %3926, 2
  %3928 = icmp eq i8 %3927, 0
  %3929 = mul i8 %3923, %3923
  %3930 = add i8 %3929, %3923
  %3931 = srem i8 %3930, 2
  %3932 = icmp eq i8 %3931, 0
  %3933 = and i1 %3928, %3932
  %3934 = select i1 %3933, i32 984876159, i32 984876144
  %3935 = or i64 %383, 4355952086826807305
  %3936 = xor i64 %383, -1
  %3937 = and i64 4355952086826807305, %3936
  %3938 = add i64 %3937, %383
  %3939 = add i64 %5, 8279611949452811409
  %3940 = sub i64 0, %5
  %3941 = add i64 -8279611949452811409, %3940
  %3942 = sub i64 0, %3941
  %3943 = xor i64 2303165522003733611, %3942
  %3944 = xor i64 %3943, %3939
  %3945 = xor i64 %3944, %3935
  %3946 = xor i64 %3945, %3938
  %3947 = and i64 %84, 9000696087241372035
  %3948 = xor i64 %84, -1
  %3949 = or i64 -9000696087241372036, %3948
  %3950 = xor i64 %3949, -1
  %3951 = and i64 %3950, -1
  %3952 = add i64 %58, -2437741493132384322
  %3953 = add i64 2056434986598823004, %58
  %3954 = add i64 %3953, -4494176479731207326
  %3955 = or i64 %582, 4542137604668146899
  %3956 = xor i64 %582, -1
  %3957 = and i64 4542137604668146899, %3956
  %3958 = add i64 %3957, %582
  %3959 = xor i64 %3954, 566351699827385325
  %3960 = xor i64 %3959, %3958
  %3961 = xor i64 %3960, %3955
  %3962 = xor i64 %3961, %3951
  %3963 = xor i64 %3962, %3952
  %3964 = xor i64 %3963, %3947
  %3965 = mul i64 %3946, %3964
  %3966 = trunc i64 %3965 to i32
  %3967 = xor i32 %3934, %3966
  store i32 %3967, i32* %4, align 4
  %3968 = call i8** @bf6047435729067610447(i32* %4)
  %3969 = load i8*, i8** %3968, align 8
  indirectbr i8* %3969, [label %loopEnd, label %3916]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 4070807658626890125, i64* %453, align 8
  %3970 = call i8** @lk8153326119118101986(i64* %453)
  %3971 = load i8*, i8** %3970, align 8
  %3972 = bitcast i8* %3971 to void (i64*, i64, i1*, [65 x i32]*, i32*, i64*, i1*)*
  call void %3972(i64* %.reg2mem25, i64 %3, i1* %.reg2mem22, [65 x i32]* %lookupTable, i32* %dispatcher, i64* %.reg2mem97, i1* %.reg2mem99)
  %3973 = load i8*, i8** %8, align 8
  %3974 = load i8, i8* %3973, align 1
  %3975 = mul i8 %3974, 2
  %3976 = mul i8 %3974, 2
  %3977 = add i64 %173, -1308401293692544999
  %3978 = and i64 -1308401293692544999, %173
  %3979 = or i64 -1308401293692544999, %173
  %3980 = add i64 %3978, %3979
  %3981 = and i64 %203, 1507765022156034551
  %3982 = xor i64 %203, -1
  %3983 = xor i64 1507765022156034551, %3982
  %3984 = and i64 %3983, 1507765022156034551
  %3985 = xor i64 5859617402073849499, %3984
  %3986 = xor i64 %3985, %3981
  %3987 = xor i64 %3986, %3980
  %3988 = xor i64 %3987, %3977
  %3989 = and i64 %3, -6755874152575753245
  %3990 = xor i64 %3, -1
  %3991 = or i64 6755874152575753244, %3990
  %3992 = xor i64 %3991, -1
  %3993 = and i64 %3992, -1
  %3994 = and i64 %1154, -3301659618312092823
  %3995 = or i64 3301659618312092822, %1154
  %3996 = sub i64 %3995, 3301659618312092822
  %3997 = xor i64 %3994, %3989
  %3998 = xor i64 %3997, %3993
  %3999 = xor i64 %3998, %3996
  %4000 = xor i64 %3999, 0
  %4001 = mul i64 %3988, %4000
  %4002 = trunc i64 %4001 to i8
  %4003 = sub i8 %4002, %3976
  %4004 = add i64 %454, 6805442814281686065
  %4005 = add i64 -5183039500924942322, %454
  %4006 = sub i64 %4005, 6458261758502923229
  %4007 = or i64 %578, -6937053965803419137
  %4008 = xor i64 %578, -1
  %4009 = and i64 %4008, -6124078523561318490
  %4010 = and i64 %578, 6124078523561318489
  %4011 = or i64 %4009, %4010
  %4012 = xor i64 3798862338922507865, %4011
  %4013 = xor i64 %578, -1
  %4014 = or i64 6937053965803419136, %4013
  %4015 = xor i64 %4014, -1
  %4016 = and i64 %4015, -1
  %4017 = or i64 %4012, %4016
  %4018 = and i64 %19, -5973898715067293691
  %4019 = or i64 5973898715067293690, %19
  %4020 = sub i64 %4019, 5973898715067293690
  %4021 = xor i64 %4017, %4007
  %4022 = xor i64 %4021, %4018
  %4023 = xor i64 %4022, 6901822784243376439
  %4024 = xor i64 %4023, %4004
  %4025 = xor i64 %4024, %4006
  %4026 = xor i64 %4025, %4020
  %4027 = add i64 %578, -6911406840308223045
  %4028 = add i64 7010420762283474141, %578
  %4029 = sub i64 %4028, -4524916471117854430
  %4030 = and i64 %11, 9108914757320577650
  %4031 = xor i64 %11, -1
  %4032 = xor i64 9108914757320577650, %4031
  %4033 = and i64 %4032, 9108914757320577650
  %4034 = and i64 %15, 346381298660449574
  %4035 = xor i64 %15, -1
  %4036 = or i64 -346381298660449575, %4035
  %4037 = xor i64 %4036, -1
  %4038 = and i64 %4037, -1
  %4039 = xor i64 %4033, -1094817647678603790
  %4040 = xor i64 %4039, %4029
  %4041 = xor i64 %4040, %4027
  %4042 = xor i64 %4041, %4034
  %4043 = xor i64 %4042, %4030
  %4044 = xor i64 %4043, %4038
  %4045 = mul i64 %4026, %4044
  %4046 = trunc i64 %4045 to i8
  %4047 = add i8 %4046, %4003
  %4048 = sub i8 0, %4047
  %4049 = mul i8 %3975, %4048
  %4050 = srem i8 %4049, 4
  %4051 = icmp eq i8 %4050, 0
  %4052 = mul i8 %3974, %3974
  %4053 = xor i8 %4052, %3974
  %4054 = and i8 %4052, %3974
  %4055 = mul i8 2, %4054
  %4056 = add i8 %4053, %4055
  %4057 = or i64 %13, 5652534756865358182
  %4058 = and i64 5652534756865358182, %13
  %4059 = xor i64 5652534756865358182, %13
  %4060 = or i64 %4058, %4059
  %4061 = or i64 %19, 3387169583965136195
  %4062 = xor i64 %19, -1
  %4063 = and i64 3387169583965136195, %4062
  %4064 = add i64 %4063, %19
  %4065 = add i64 %80, 3513096132606098403
  %4066 = add i64 -5580012770619722178, %80
  %4067 = sub i64 %4066, -9093108903225820581
  %4068 = xor i64 %4061, %4065
  %4069 = xor i64 %4068, %4067
  %4070 = xor i64 %4069, %4064
  %4071 = xor i64 %4070, 7149961775896633153
  %4072 = xor i64 %4071, %4057
  %4073 = xor i64 %4072, %4060
  %4074 = and i64 %15, -7616605730385962197
  %4075 = or i64 7616605730385962196, %15
  %4076 = sub i64 %4075, 7616605730385962196
  %4077 = and i64 %549, -8995372340740475465
  %4078 = xor i64 %549, -1
  %4079 = xor i64 -8995372340740475465, %4078
  %4080 = and i64 %4079, -8995372340740475465
  %4081 = xor i64 %4074, %4076
  %4082 = xor i64 %4081, %4077
  %4083 = xor i64 %4082, 4203350710157421927
  %4084 = xor i64 %4083, %4080
  %4085 = mul i64 %4073, %4084
  %4086 = trunc i64 %4085 to i8
  %4087 = mul i8 %4086, %4056
  %4088 = add i8 23, %4087
  %4089 = mul i8 -105, %4088
  %4090 = add i8 111, %4089
  %4091 = srem i8 %4090, 2
  %4092 = icmp eq i8 %4091, 0
  %4093 = xor i1 %4051, true
  %4094 = xor i1 %4092, true
  %4095 = or i1 %4093, %4094
  %4096 = xor i1 %4095, true
  %4097 = and i1 %4096, true
  %4098 = and i64 %385, 6859278906090320158
  %4099 = xor i64 %385, -1
  %4100 = xor i64 6859278906090320158, %4099
  %4101 = and i64 %4100, 6859278906090320158
  %4102 = add i64 %447, 8867825492507065583
  %4103 = and i64 8867825492507065583, %447
  %4104 = or i64 8867825492507065583, %447
  %4105 = add i64 %4103, %4104
  %4106 = or i64 %449, -3841696577945195830
  %4107 = xor i64 %449, -1
  %4108 = and i64 %4107, -3468520640041926129
  %4109 = and i64 %449, 3468520640041926128
  %4110 = or i64 %4108, %4109
  %4111 = xor i64 392617511114172613, %4110
  %4112 = xor i64 %449, -1
  %4113 = or i64 3841696577945195829, %4112
  %4114 = xor i64 %4113, -1
  %4115 = and i64 %4114, -1
  %4116 = or i64 %4111, %4115
  %4117 = xor i64 %4106, 4710446058488602655
  %4118 = xor i64 %4117, %4098
  %4119 = xor i64 %4118, %4116
  %4120 = xor i64 %4119, %4105
  %4121 = xor i64 %4120, %4102
  %4122 = xor i64 %4121, %4101
  %4123 = or i64 %420, 1432706886088386556
  %4124 = xor i64 %420, -1
  %4125 = and i64 1432706886088386556, %4124
  %4126 = add i64 %4125, %420
  %4127 = and i64 %78, -6459458055670471698
  %4128 = or i64 6459458055670471697, %78
  %4129 = sub i64 %4128, 6459458055670471697
  %4130 = xor i64 %4129, 8373186970827074960
  %4131 = xor i64 %4130, %4123
  %4132 = xor i64 %4131, %4127
  %4133 = xor i64 %4132, %4126
  %4134 = mul i64 %4122, %4133
  %4135 = trunc i64 %4134 to i32
  %4136 = select i1 %4097, i32 984876149, i32 %4135
  %4137 = or i64 %68, 7871251686822693381
  %4138 = xor i64 %68, -1
  %4139 = and i64 7871251686822693381, %4138
  %4140 = add i64 %4139, %68
  %4141 = or i64 %456, -608259749740973491
  %4142 = and i64 -608259749740973491, %456
  %4143 = xor i64 -608259749740973491, %456
  %4144 = or i64 %4142, %4143
  %4145 = xor i64 %4144, %4141
  %4146 = xor i64 %4145, -4435378472722844953
  %4147 = xor i64 %4146, %4140
  %4148 = xor i64 %4147, %4137
  %4149 = add i64 %290, 6876060316045484819
  %4150 = xor i64 6876060316045484819, %290
  %4151 = and i64 6876060316045484819, %290
  %4152 = mul i64 2, %4151
  %4153 = add i64 %4150, %4152
  %4154 = add i64 %304, 3690995750828268813
  %4155 = add i64 7229777594462841664, %304
  %4156 = sub i64 %4155, 3538781843634572851
  %4157 = and i64 %72, -3073392235129526044
  %4158 = or i64 3073392235129526043, %72
  %4159 = sub i64 %4158, 3073392235129526043
  %4160 = xor i64 8661784907047060531, %4154
  %4161 = xor i64 %4160, %4153
  %4162 = xor i64 %4161, %4156
  %4163 = xor i64 %4162, %4159
  %4164 = xor i64 %4163, %4149
  %4165 = xor i64 %4164, %4157
  %4166 = mul i64 %4148, %4165
  %4167 = trunc i64 %4166 to i32
  %4168 = xor i32 %4136, %4167
  store i32 %4168, i32* %4, align 4
  %4169 = call i8** @bf6047435729067610447(i32* %4)
  %4170 = load i8*, i8** %4169, align 8
  indirectbr i8* %4170, [label %loopEnd, label %codeRepl1]

4171:                                             ; preds = %4171, %loopStart
  %.reload100 = load i1, i1* %.reg2mem99, align 1
  %.reload98 = load i64, i64* %.reg2mem97, align 8
  store i64 %.reload98, i64* %.reg2mem49, align 8
  %4172 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 26
  %4173 = load i32, i32* %4172, align 4
  %4174 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 2
  %4175 = load i32, i32* %4174, align 4
  %4176 = sub i32 %4173, %4175
  %4177 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 26
  %4178 = load i32, i32* %4177, align 4
  %4179 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %4180 = load i32, i32* %4179, align 4
  %4181 = srem i32 %4178, %4180
  %4182 = select i1 %.reload100, i32 %4176, i32 %4181
  store i32 %4182, i32* %dispatcher, align 4
  %4183 = load i8*, i8** %384, align 8
  %4184 = load i8, i8* %4183, align 1
  %4185 = xor i8 %4184, -1
  %4186 = and i64 %1154, -7968795615596110914
  %4187 = xor i64 %1154, -1
  %4188 = or i64 7968795615596110913, %4187
  %4189 = xor i64 %4188, -1
  %4190 = and i64 %4189, -1
  %4191 = and i64 %344, 7423589801170850596
  %4192 = xor i64 %344, -1
  %4193 = or i64 -7423589801170850597, %4192
  %4194 = xor i64 %4193, -1
  %4195 = and i64 %4194, -1
  %4196 = add i64 %296, -6743481127804123543
  %4197 = add i64 1158817469747777664, %296
  %4198 = sub i64 %4197, 7902298597551901207
  %4199 = xor i64 %4191, %4196
  %4200 = xor i64 %4199, %4195
  %4201 = xor i64 %4200, %4186
  %4202 = xor i64 %4201, %4190
  %4203 = xor i64 %4202, %4198
  %4204 = xor i64 %4203, -7900982052620998475
  %4205 = add i64 %58, 1643375624982734671
  %4206 = sub i64 0, %58
  %4207 = sub i64 1643375624982734671, %4206
  %4208 = and i64 %381, -1259801136406134453
  %4209 = xor i64 %381, -1
  %4210 = or i64 1259801136406134452, %4209
  %4211 = xor i64 %4210, -1
  %4212 = and i64 %4211, -1
  %4213 = xor i64 %4207, %4205
  %4214 = xor i64 %4213, 7431196849934288285
  %4215 = xor i64 %4214, %4212
  %4216 = xor i64 %4215, %4208
  %4217 = mul i64 %4204, %4216
  %4218 = trunc i64 %4217 to i8
  %4219 = or i8 %4185, %4218
  %4220 = or i64 %179, -2657984201476274801
  %4221 = xor i64 %179, -1
  %4222 = and i64 -2657984201476274801, %4221
  %4223 = add i64 %4222, %179
  %4224 = or i64 %78, -7608074122323499942
  %4225 = and i64 -7608074122323499942, %78
  %4226 = xor i64 -7608074122323499942, %78
  %4227 = or i64 %4225, %4226
  %4228 = xor i64 %4227, %4224
  %4229 = xor i64 %4228, -8975160908448384247
  %4230 = xor i64 %4229, %4223
  %4231 = xor i64 %4230, %4220
  %4232 = and i64 %183, -8543771953865851224
  %4233 = xor i64 %183, -1
  %4234 = or i64 8543771953865851223, %4233
  %4235 = xor i64 %4234, -1
  %4236 = and i64 %4235, -1
  %4237 = or i64 %290, -4121998094678843447
  %4238 = and i64 -4121998094678843447, %290
  %4239 = xor i64 -4121998094678843447, %290
  %4240 = or i64 %4238, %4239
  %4241 = xor i64 -5253394176812943929, %4232
  %4242 = xor i64 %4241, %4236
  %4243 = xor i64 %4242, %4240
  %4244 = xor i64 %4243, %4237
  %4245 = mul i64 %4231, %4244
  %4246 = trunc i64 %4245 to i8
  %4247 = xor i8 %4184, %4246
  %4248 = sub i8 %4219, %4247
  %4249 = icmp eq i8 %4248, 0
  %4250 = mul i8 %4184, %4184
  %4251 = add i8 %4250, %4184
  %4252 = mul i8 %4251, 3
  %4253 = srem i8 %4252, 2
  %4254 = icmp eq i8 %4253, 0
  %4255 = xor i1 %4254, true
  %4256 = and i1 %4249, %4255
  %4257 = add i1 %4256, %4254
  %4258 = or i64 %298, -5181314820734320603
  %4259 = xor i64 %298, -1
  %4260 = and i64 -5181314820734320603, %4259
  %4261 = add i64 %4260, %298
  %4262 = or i64 %383, -7145014788580594441
  %4263 = xor i64 %383, -1
  %4264 = and i64 %4263, -2594668130502881627
  %4265 = and i64 %383, 2594668130502881626
  %4266 = or i64 %4264, %4265
  %4267 = xor i64 5127961646356292178, %4266
  %4268 = xor i64 %383, -1
  %4269 = or i64 7145014788580594440, %4268
  %4270 = xor i64 %4269, -1
  %4271 = and i64 %4270, -1
  %4272 = or i64 %4267, %4271
  %4273 = or i64 %7, 3467125372411047147
  %4274 = and i64 3467125372411047147, %7
  %4275 = xor i64 3467125372411047147, %7
  %4276 = or i64 %4274, %4275
  %4277 = xor i64 %4273, %4258
  %4278 = xor i64 %4277, %4276
  %4279 = xor i64 %4278, %4272
  %4280 = xor i64 %4279, -3335183205335068327
  %4281 = xor i64 %4280, %4262
  %4282 = xor i64 %4281, %4261
  %4283 = or i64 %199, -5768937700879554537
  %4284 = xor i64 %199, -1
  %4285 = and i64 %4284, -7208738311261151422
  %4286 = and i64 %199, 7208738311261151421
  %4287 = or i64 %4285, %4286
  %4288 = xor i64 3748673891089823573, %4287
  %4289 = xor i64 %199, -1
  %4290 = or i64 5768937700879554536, %4289
  %4291 = xor i64 %4290, -1
  %4292 = and i64 %4291, -1
  %4293 = or i64 %4288, %4292
  %4294 = or i64 %454, -5383778719488814941
  %4295 = xor i64 %454, -1
  %4296 = and i64 %4295, 5659275659631942754
  %4297 = and i64 %454, -5659275659631942755
  %4298 = or i64 %4296, %4297
  %4299 = xor i64 -305909436467147583, %4298
  %4300 = xor i64 %454, -1
  %4301 = or i64 5383778719488814940, %4300
  %4302 = xor i64 %4301, -1
  %4303 = and i64 %4302, -1
  %4304 = or i64 %4299, %4303
  %4305 = add i64 %189, -5423516454896868619
  %4306 = xor i64 -5423516454896868619, %189
  %4307 = and i64 -5423516454896868619, %189
  %4308 = mul i64 2, %4307
  %4309 = add i64 %4306, %4308
  %4310 = xor i64 2290731062472050994, %4309
  %4311 = xor i64 %4310, %4305
  %4312 = xor i64 %4311, %4283
  %4313 = xor i64 %4312, %4293
  %4314 = xor i64 %4313, %4304
  %4315 = xor i64 %4314, %4294
  %4316 = mul i64 %4282, %4315
  %4317 = trunc i64 %4316 to i32
  %4318 = select i1 %4257, i32 %4317, i32 984876144
  %4319 = xor i32 %4318, 1078746985
  %4320 = xor i32 %4319, 1078747003
  store i32 %4320, i32* %4, align 4
  %4321 = call i8** @bf6047435729067610447(i32* %4)
  %4322 = load i8*, i8** %4321, align 8
  indirectbr i8* %4322, [label %loopEnd, label %4171]

codeRepl2:                                        ; preds = %codeRepl2, %loopStart
  store i64 4070807658626890114, i64* %453, align 8
  %4323 = call i8** @lk8153326119118101986(i64* %453)
  %4324 = load i8*, i8** %4323, align 8
  %4325 = bitcast i8* %4324 to void ([65 x i32]*, i32*)*
  call void %4325([65 x i32]* %lookupTable, i32* %dispatcher)
  %4326 = load i8*, i8** %12, align 8
  %4327 = load i8, i8* %4326, align 1
  %4328 = mul i8 %4327, 2
  %4329 = mul i8 %4327, 2
  %4330 = add i8 2, %4329
  %4331 = mul i8 %4328, %4330
  %4332 = srem i8 %4331, 4
  %4333 = icmp eq i8 %4332, 0
  %4334 = mul i8 %4327, %4327
  %4335 = mul i8 %4334, %4327
  %4336 = add i8 %4335, %4327
  %4337 = or i64 %383, 3799033629937407764
  %4338 = xor i64 %383, -1
  %4339 = and i64 3799033629937407764, %4338
  %4340 = add i64 %4339, %383
  %4341 = add i64 %580, 9058432347821011582
  %4342 = add i64 7508002693627348109, %580
  %4343 = add i64 %4342, 1550429654193663473
  %4344 = xor i64 %4343, %4341
  %4345 = xor i64 %4344, 3448183700527849525
  %4346 = xor i64 %4345, %4337
  %4347 = xor i64 %4346, %4340
  %4348 = or i64 %1154, 5584031753949604131
  %4349 = xor i64 %1154, -1
  %4350 = and i64 5584031753949604131, %4349
  %4351 = add i64 %4350, %1154
  %4352 = sext i32 %dispatcher1 to i64
  %4353 = and i64 %4352, 7890896640614742682
  %4354 = xor i64 %4352, -1
  %4355 = xor i64 7890896640614742682, %4354
  %4356 = and i64 %4355, 7890896640614742682
  %4357 = xor i64 %4348, %4351
  %4358 = xor i64 %4357, 8991395600641713210
  %4359 = xor i64 %4358, %4353
  %4360 = xor i64 %4359, %4356
  %4361 = mul i64 %4347, %4360
  %4362 = trunc i64 %4361 to i8
  %4363 = srem i8 %4336, %4362
  %4364 = icmp eq i8 %4363, 0
  %4365 = and i1 %4333, %4364
  %4366 = select i1 %4365, i32 984876111, i32 984876144
  %4367 = xor i32 %4366, 63
  store i32 %4367, i32* %4, align 4
  %4368 = call i8** @bf6047435729067610447(i32* %4)
  %4369 = load i8*, i8** %4368, align 8
  indirectbr i8* %4369, [label %loopEnd, label %codeRepl2]

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  %4370 = or i64 %290, -4636041741607375516
  %4371 = xor i64 %290, -1
  %4372 = and i64 %4371, -5572646057138329231
  %4373 = and i64 %290, 5572646057138329230
  %4374 = or i64 %4372, %4373
  %4375 = xor i64 936893269127857173, %4374
  %4376 = xor i64 %290, -1
  %4377 = or i64 4636041741607375515, %4376
  %4378 = xor i64 %4377, -1
  %4379 = and i64 %4378, -1
  %4380 = or i64 %4375, %4379
  %4381 = add i64 %13, -4066919522170232690
  %4382 = sub i64 0, %13
  %4383 = sub i64 -4066919522170232690, %4382
  %4384 = xor i64 %4381, %4380
  %4385 = xor i64 %4384, %4383
  %4386 = xor i64 %4385, %4370
  %4387 = xor i64 %4386, 1796660042205833271
  %4388 = add i64 %82, -3155571941003934166
  %4389 = and i64 -3155571941003934166, %82
  %4390 = or i64 -3155571941003934166, %82
  %4391 = add i64 %4389, %4390
  %4392 = add i64 %66, -4375356710374203441
  %4393 = add i64 -7078147761270282694, %66
  %4394 = sub i64 %4393, -2702791050896079253
  %4395 = add i64 %458, 2567875755953551282
  %4396 = add i64 4143380382077859907, %458
  %4397 = sub i64 %4396, 1575504626124308625
  %4398 = xor i64 %4391, %4395
  %4399 = xor i64 %4398, %4394
  %4400 = xor i64 %4399, %4388
  %4401 = xor i64 %4400, %4397
  %4402 = xor i64 %4401, -442016237224392548
  %4403 = xor i64 %4402, %4392
  %4404 = mul i64 %4387, %4403
  store i64 %4404, i64* %453, align 8
  %4405 = call i8** @lk8153326119118101986(i64* %453)
  %4406 = load i8*, i8** %4405, align 8
  %4407 = bitcast i8* %4406 to void (i64*, [65 x i32]*, i32*)*
  call void %4407(i64* %.reg2mem25, [65 x i32]* %lookupTable, i32* %dispatcher)
  %4408 = load i8*, i8** %206, align 8
  %4409 = load i8, i8* %4408, align 1
  %4410 = xor i8 %4409, -1
  %4411 = or i8 %4410, -2
  %4412 = xor i8 %4411, -1
  %4413 = and i8 %4412, -1
  %4414 = icmp eq i8 %4413, 1
  %4415 = mul i8 %4409, %4409
  %4416 = xor i8 %4415, %4409
  %4417 = and i8 %4415, %4409
  %4418 = mul i8 2, %4417
  %4419 = add i8 %4416, %4418
  %4420 = mul i8 39, %4419
  %4421 = add i64 %381, -5903771202295110114
  %4422 = and i64 -5903771202295110114, %381
  %4423 = or i64 -5903771202295110114, %381
  %4424 = add i64 %4422, %4423
  %4425 = and i64 %193, -5879613267264275012
  %4426 = or i64 5879613267264275011, %193
  %4427 = sub i64 %4426, 5879613267264275011
  %4428 = xor i64 -3317396081351201171, %4421
  %4429 = xor i64 %4428, %4425
  %4430 = xor i64 %4429, %4424
  %4431 = xor i64 %4430, %4427
  %4432 = or i64 %21, -6117884049150195801
  %4433 = xor i64 %21, -1
  %4434 = and i64 -6117884049150195801, %4433
  %4435 = add i64 %4434, %21
  %4436 = or i64 %187, 2931188356898571495
  %4437 = xor i64 %187, -1
  %4438 = and i64 2931188356898571495, %4437
  %4439 = add i64 %4438, %187
  %4440 = or i64 %296, -6943925381479892417
  %4441 = xor i64 %296, -1
  %4442 = and i64 %4441, -3666392777972891465
  %4443 = and i64 %296, 3666392777972891464
  %4444 = or i64 %4442, %4443
  %4445 = xor i64 5961749504503593608, %4444
  %4446 = xor i64 %296, -1
  %4447 = or i64 6943925381479892416, %4446
  %4448 = xor i64 %4447, -1
  %4449 = and i64 %4448, -1
  %4450 = or i64 %4445, %4449
  %4451 = xor i64 %4450, %4436
  %4452 = xor i64 %4451, -6947594787375036909
  %4453 = xor i64 %4452, %4440
  %4454 = xor i64 %4453, %4439
  %4455 = xor i64 %4454, %4432
  %4456 = xor i64 %4455, %4435
  %4457 = mul i64 %4431, %4456
  %4458 = trunc i64 %4457 to i8
  %4459 = add i8 %4458, %4420
  %4460 = mul i8 -105, %4459
  %4461 = and i64 %420, -502107554475014118
  %4462 = or i64 502107554475014117, %420
  %4463 = sub i64 %4462, 502107554475014117
  %4464 = add i64 %72, 4372088187907379949
  %4465 = sub i64 0, %72
  %4466 = add i64 -4372088187907379949, %4465
  %4467 = sub i64 0, %4466
  %4468 = xor i64 %4461, %4463
  %4469 = xor i64 %4468, %4464
  %4470 = xor i64 %4469, %4467
  %4471 = xor i64 %4470, 4293051721892374341
  %4472 = or i64 %549, 1430343768304234716
  %4473 = and i64 1430343768304234716, %549
  %4474 = xor i64 1430343768304234716, %549
  %4475 = or i64 %4473, %4474
  %4476 = add i64 %78, 449257117315188142
  %4477 = xor i64 449257117315188142, %78
  %4478 = and i64 449257117315188142, %78
  %4479 = mul i64 2, %4478
  %4480 = add i64 %4477, %4479
  %4481 = xor i64 %4476, %4472
  %4482 = xor i64 %4481, -5146654851687040477
  %4483 = xor i64 %4482, %4480
  %4484 = xor i64 %4483, %4475
  %4485 = mul i64 %4471, %4484
  %4486 = trunc i64 %4485 to i8
  %4487 = add i8 %4486, %4460
  %4488 = srem i8 %4487, 2
  %4489 = icmp eq i8 %4488, 0
  %4490 = or i1 %4414, %4489
  %4491 = select i1 %4490, i32 984876133, i32 984876144
  %4492 = xor i32 %4491, 21
  store i32 %4492, i32* %4, align 4
  %4493 = call i8** @bf6047435729067610447(i32* %4)
  %4494 = load i8*, i8** %4493, align 8
  indirectbr i8* %4494, [label %loopEnd, label %codeRepl3]

codeRepl4:                                        ; preds = %codeRepl4, %loopStart
  store i64 4070807658626890121, i64* %453, align 8
  %4495 = call i8** @lk8153326119118101986(i64* %453)
  %4496 = load i8*, i8** %4495, align 8
  %4497 = bitcast i8* %4496 to void (i64*, [65 x i32]*, i32*)*
  call void %4497(i64* %.reg2mem49, [65 x i32]* %lookupTable, i32* %dispatcher)
  %4498 = load i8*, i8** %192, align 8
  %4499 = load i8, i8* %4498, align 1
  %4500 = and i8 %4499, 1
  %4501 = icmp eq i8 %4500, 0
  %4502 = mul i8 %4499, %4499
  %4503 = add i8 %4502, %4499
  %4504 = and i64 %199, 8817465557082591135
  %4505 = or i64 -8817465557082591136, %199
  %4506 = sub i64 %4505, -8817465557082591136
  %4507 = sext i32 %dispatcher1 to i64
  %4508 = or i64 %4507, -5146506006650796541
  %4509 = xor i64 %4507, -1
  %4510 = and i64 -5146506006650796541, %4509
  %4511 = add i64 %4510, %4507
  %4512 = xor i64 %4504, -5701423171247657991
  %4513 = xor i64 %4512, %4506
  %4514 = xor i64 %4513, %4508
  %4515 = xor i64 %4514, %4511
  %4516 = or i64 %296, 5920416829605447637
  %4517 = and i64 5920416829605447637, %296
  %4518 = xor i64 5920416829605447637, %296
  %4519 = or i64 %4517, %4518
  %4520 = and i64 %66, 5011917639696393235
  %4521 = xor i64 %66, -1
  %4522 = xor i64 5011917639696393235, %4521
  %4523 = and i64 %4522, 5011917639696393235
  %4524 = and i64 %454, -4805345086880563301
  %4525 = xor i64 %454, -1
  %4526 = xor i64 -4805345086880563301, %4525
  %4527 = and i64 %4526, -4805345086880563301
  %4528 = xor i64 %4519, %4516
  %4529 = xor i64 %4528, 7615784902489010907
  %4530 = xor i64 %4529, %4527
  %4531 = xor i64 %4530, %4520
  %4532 = xor i64 %4531, %4524
  %4533 = xor i64 %4532, %4523
  %4534 = mul i64 %4515, %4533
  %4535 = trunc i64 %4534 to i8
  %4536 = mul i8 %4503, %4535
  %4537 = srem i8 %4536, 2
  %4538 = icmp eq i8 %4537, 0
  %4539 = or i1 %4501, %4538
  %4540 = select i1 %4539, i32 984876159, i32 984876144
  %4541 = xor i32 %4540, 15
  store i32 %4541, i32* %4, align 4
  %4542 = call i8** @bf6047435729067610447(i32* %4)
  %4543 = load i8*, i8** %4542, align 8
  indirectbr i8* %4543, [label %loopEnd, label %codeRepl4]

4544:                                             ; preds = %4544, %loopStart
  %4545 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 34
  %4546 = load i32, i32* %4545, align 4
  %4547 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %4548 = load i32, i32* %4547, align 4
  %4549 = srem i32 %4546, %4548
  store i32 %4549, i32* %dispatcher, align 4
  %4550 = load i8*, i8** %141, align 8
  %4551 = load i8, i8* %4550, align 1
  %4552 = sext i32 %dispatcher1 to i64
  %4553 = and i64 %4552, -4050926337487429559
  %4554 = or i64 4050926337487429558, %4552
  %4555 = sub i64 %4554, 4050926337487429558
  %4556 = and i64 %3, -2866668984355587724
  %4557 = xor i64 %3, -1
  %4558 = xor i64 -2866668984355587724, %4557
  %4559 = and i64 %4558, -2866668984355587724
  %4560 = xor i64 %4556, %4559
  %4561 = xor i64 %4560, %4553
  %4562 = xor i64 %4561, -4256965625618132159
  %4563 = xor i64 %4562, %4555
  %4564 = add i64 %191, 3593019393628999499
  %4565 = sub i64 0, %191
  %4566 = add i64 -3593019393628999499, %4565
  %4567 = sub i64 0, %4566
  %4568 = and i64 %304, -988912188301146573
  %4569 = or i64 988912188301146572, %304
  %4570 = sub i64 %4569, 988912188301146572
  %4571 = or i64 %191, -8533162230032223949
  %4572 = xor i64 %191, -1
  %4573 = and i64 %4572, 3655784547819199789
  %4574 = and i64 %191, -3655784547819199790
  %4575 = or i64 %4573, %4574
  %4576 = xor i64 -4958486808833414114, %4575
  %4577 = xor i64 %191, -1
  %4578 = or i64 8533162230032223948, %4577
  %4579 = xor i64 %4578, -1
  %4580 = and i64 %4579, -1
  %4581 = or i64 %4576, %4580
  %4582 = xor i64 %4564, %4567
  %4583 = xor i64 %4582, %4581
  %4584 = xor i64 %4583, %4571
  %4585 = xor i64 %4584, %4568
  %4586 = xor i64 %4585, %4570
  %4587 = xor i64 %4586, 8855526764613859714
  %4588 = mul i64 %4563, %4587
  %4589 = trunc i64 %4588 to i8
  %4590 = mul i8 %4551, %4589
  %4591 = and i64 %64, 5022819794580699766
  %4592 = or i64 -5022819794580699767, %64
  %4593 = sub i64 %4592, -5022819794580699767
  %4594 = and i64 %381, 7121465487832302273
  %4595 = xor i64 %381, -1
  %4596 = xor i64 7121465487832302273, %4595
  %4597 = and i64 %4596, 7121465487832302273
  %4598 = xor i64 1121533815042526185, %4597
  %4599 = xor i64 %4598, %4593
  %4600 = xor i64 %4599, %4591
  %4601 = xor i64 %4600, %4594
  %4602 = add i64 %70, 7475893484530981482
  %4603 = add i64 -4865603098888295971, %70
  %4604 = add i64 %4603, -6105247490290274163
  %4605 = and i64 %451, 8476932769246677159
  %4606 = or i64 -8476932769246677160, %451
  %4607 = sub i64 %4606, -8476932769246677160
  %4608 = xor i64 %4604, %4605
  %4609 = xor i64 %4608, %4607
  %4610 = xor i64 %4609, -2908244376281843534
  %4611 = xor i64 %4610, %4602
  %4612 = mul i64 %4601, %4611
  %4613 = trunc i64 %4612 to i8
  %4614 = mul i8 %4551, %4613
  %4615 = or i64 %13, 483472074380903907
  %4616 = xor i64 %13, -1
  %4617 = and i64 %4616, 6512504699790757889
  %4618 = and i64 %13, -6512504699790757890
  %4619 = or i64 %4617, %4618
  %4620 = xor i64 6689169049422435810, %4619
  %4621 = xor i64 %13, -1
  %4622 = or i64 -483472074380903908, %4621
  %4623 = xor i64 %4622, -1
  %4624 = and i64 %4623, -1
  %4625 = or i64 %4620, %4624
  %4626 = or i64 %584, -3621120834327712004
  %4627 = xor i64 %584, -1
  %4628 = and i64 -3621120834327712004, %4627
  %4629 = add i64 %4628, %584
  %4630 = xor i64 %4629, %4626
  %4631 = xor i64 %4630, -2060816349533994773
  %4632 = xor i64 %4631, %4625
  %4633 = xor i64 %4632, %4615
  %4634 = and i64 %420, 8608945616058059102
  %4635 = xor i64 %420, -1
  %4636 = or i64 -8608945616058059103, %4635
  %4637 = xor i64 %4636, -1
  %4638 = and i64 %4637, -1
  %4639 = or i64 %5, -8783757600872704480
  %4640 = xor i64 %5, -1
  %4641 = and i64 -8783757600872704480, %4640
  %4642 = add i64 %4641, %5
  %4643 = xor i64 %4634, %4642
  %4644 = xor i64 %4643, %4639
  %4645 = xor i64 %4644, 0
  %4646 = xor i64 %4645, %4638
  %4647 = mul i64 %4633, %4646
  %4648 = trunc i64 %4647 to i8
  %4649 = sub i8 %4648, %4614
  %4650 = sub i8 2, %4649
  %4651 = mul i8 %4590, %4650
  %4652 = srem i8 %4651, 4
  %4653 = icmp eq i8 %4652, 0
  %4654 = mul i8 %4551, %4551
  %4655 = sub i8 %4654, -56
  %4656 = add i8 %4655, %4551
  %4657 = add i8 %4656, -56
  %4658 = srem i8 %4657, 2
  %4659 = icmp eq i8 %4658, 0
  %4660 = and i1 %4653, %4659
  %4661 = select i1 %4660, i32 984876125, i32 984876144
  %4662 = or i64 %68, -808043057500280135
  %4663 = xor i64 %68, -1
  %4664 = and i64 %4663, -5932611545866572311
  %4665 = and i64 %68, 5932611545866572310
  %4666 = or i64 %4664, %4665
  %4667 = xor i64 6440816133020075856, %4666
  %4668 = xor i64 %68, -1
  %4669 = or i64 808043057500280134, %4668
  %4670 = xor i64 %4669, -1
  %4671 = and i64 %4670, -1
  %4672 = or i64 %4667, %4671
  %4673 = add i64 %288, 811720351996194923
  %4674 = and i64 811720351996194923, %288
  %4675 = or i64 811720351996194923, %288
  %4676 = add i64 %4674, %4675
  %4677 = add i64 %116, 3481665052135246735
  %4678 = xor i64 3481665052135246735, %116
  %4679 = and i64 3481665052135246735, %116
  %4680 = mul i64 2, %4679
  %4681 = add i64 %4678, %4680
  %4682 = xor i64 %4662, %4672
  %4683 = xor i64 %4682, 8143817361753275547
  %4684 = xor i64 %4683, %4676
  %4685 = xor i64 %4684, %4681
  %4686 = xor i64 %4685, %4677
  %4687 = xor i64 %4686, %4673
  %4688 = and i64 %241, -627548814220796085
  %4689 = or i64 627548814220796084, %241
  %4690 = sub i64 %4689, 627548814220796084
  %4691 = add i64 %15, 6743273020905190603
  %4692 = sub i64 0, %15
  %4693 = sub i64 6743273020905190603, %4692
  %4694 = or i64 %60, -9223188377622905535
  %4695 = and i64 -9223188377622905535, %60
  %4696 = xor i64 -9223188377622905535, %60
  %4697 = or i64 %4695, %4696
  %4698 = xor i64 %4693, -7586625651861293459
  %4699 = xor i64 %4698, %4697
  %4700 = xor i64 %4699, %4694
  %4701 = xor i64 %4700, %4690
  %4702 = xor i64 %4701, %4688
  %4703 = xor i64 %4702, %4691
  %4704 = mul i64 %4687, %4703
  %4705 = trunc i64 %4704 to i32
  %4706 = xor i32 %4661, %4705
  %4707 = and i32 %4706, 45
  %4708 = and i64 %9, 3492538928012270218
  %4709 = xor i64 %9, -1
  %4710 = or i64 -3492538928012270219, %4709
  %4711 = xor i64 %4710, -1
  %4712 = and i64 %4711, -1
  %4713 = and i64 %11, -8656655137936452684
  %4714 = xor i64 %11, -1
  %4715 = or i64 8656655137936452683, %4714
  %4716 = xor i64 %4715, -1
  %4717 = and i64 %4716, -1
  %4718 = or i64 %547, 6669921631367466034
  %4719 = xor i64 %547, -1
  %4720 = and i64 %4719, 44844877152363348
  %4721 = and i64 %547, -44844877152363349
  %4722 = or i64 %4720, %4721
  %4723 = xor i64 6633521115743629158, %4722
  %4724 = xor i64 %547, -1
  %4725 = or i64 -6669921631367466035, %4724
  %4726 = xor i64 %4725, -1
  %4727 = and i64 %4726, -1
  %4728 = or i64 %4723, %4727
  %4729 = xor i64 %4708, 1859988705271022255
  %4730 = xor i64 %4729, %4713
  %4731 = xor i64 %4730, %4717
  %4732 = xor i64 %4731, %4718
  %4733 = xor i64 %4732, %4712
  %4734 = xor i64 %4733, %4728
  %4735 = and i64 %553, -5153278579494827255
  %4736 = xor i64 %553, -1
  %4737 = or i64 5153278579494827254, %4736
  %4738 = xor i64 %4737, -1
  %4739 = and i64 %4738, -1
  %4740 = and i64 %78, 3376109543663167934
  %4741 = xor i64 %78, -1
  %4742 = or i64 -3376109543663167935, %4741
  %4743 = xor i64 %4742, -1
  %4744 = and i64 %4743, -1
  %4745 = or i64 %66, -1641259481259189383
  %4746 = xor i64 %66, -1
  %4747 = and i64 %4746, -1133087578159768223
  %4748 = and i64 %66, 1133087578159768222
  %4749 = or i64 %4747, %4748
  %4750 = xor i64 1837299234310506008, %4749
  %4751 = xor i64 %66, -1
  %4752 = or i64 1641259481259189382, %4751
  %4753 = xor i64 %4752, -1
  %4754 = and i64 %4753, -1
  %4755 = or i64 %4750, %4754
  %4756 = xor i64 -2719214011578361394, %4755
  %4757 = xor i64 %4756, %4745
  %4758 = xor i64 %4757, %4740
  %4759 = xor i64 %4758, %4739
  %4760 = xor i64 %4759, %4735
  %4761 = xor i64 %4760, %4744
  %4762 = mul i64 %4734, %4761
  %4763 = trunc i64 %4762 to i32
  %4764 = and i32 %4661, %4763
  %4765 = or i32 %4707, %4764
  store i32 %4765, i32* %4, align 4
  %4766 = call i8** @bf6047435729067610447(i32* %4)
  %4767 = load i8*, i8** %4766, align 8
  indirectbr i8* %4767, [label %loopEnd, label %4544]

4768:                                             ; preds = %4768, %loopStart
  %4769 = sub i64 121, 15
  %4770 = mul i64 101, 87
  %4771 = mul i64 119, 40
  %.reload13 = load i64, i64* %.reg2mem12, align 8
  %4772 = srem i64 %.reload13, 2
  %4773 = and i64 %7, -3069119826972115775
  %4774 = xor i64 %7, -1
  %4775 = or i64 3069119826972115774, %4774
  %4776 = xor i64 %4775, -1
  %4777 = and i64 %4776, -1
  %4778 = or i64 %173, 1370267076297452940
  %4779 = xor i64 %173, -1
  %4780 = and i64 1370267076297452940, %4779
  %4781 = add i64 %4780, %173
  %4782 = and i64 %288, -5770813593981774905
  %4783 = xor i64 %288, -1
  %4784 = xor i64 -5770813593981774905, %4783
  %4785 = and i64 %4784, -5770813593981774905
  %4786 = xor i64 %4782, 7825581901975304345
  %4787 = xor i64 %4786, %4781
  %4788 = xor i64 %4787, %4778
  %4789 = xor i64 %4788, %4785
  %4790 = xor i64 %4789, %4777
  %4791 = xor i64 %4790, %4773
  %4792 = add i64 %553, -5871155630992030159
  %4793 = xor i64 -5871155630992030159, %553
  %4794 = and i64 -5871155630992030159, %553
  %4795 = mul i64 2, %4794
  %4796 = add i64 %4793, %4795
  %4797 = add i64 %584, -78261140561264006
  %4798 = add i64 6382810112082580965, %584
  %4799 = sub i64 %4798, 6461071252643844971
  %4800 = xor i64 %4797, %4792
  %4801 = xor i64 %4800, 0
  %4802 = xor i64 %4801, %4799
  %4803 = xor i64 %4802, %4796
  %4804 = mul i64 %4791, %4803
  %4805 = icmp eq i64 %4772, %4804
  %4806 = and i64 %3, 1
  %4807 = icmp eq i64 %4806, 0
  %4808 = mul i64 %3, %3
  %4809 = add i64 %4808, %3
  %4810 = mul i64 %4809, 3
  %4811 = srem i64 %4810, 2
  %4812 = icmp eq i64 %4811, 0
  %4813 = or i1 %4807, %4812
  store i1 %4813, i1* %.reg2mem51, align 1
  %4814 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 29
  %4815 = load i32, i32* %4814, align 4
  %4816 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %4817 = load i32, i32* %4816, align 4
  %4818 = sub i32 %4815, %4817
  %4819 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 28
  %4820 = load i32, i32* %4819, align 4
  %4821 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %4822 = load i32, i32* %4821, align 4
  %4823 = sub i32 %4820, %4822
  %.reload53 = load i1, i1* %.reg2mem51, align 1
  %4824 = select i1 %.reload53, i32 %4818, i32 %4823
  store i32 %4824, i32* %dispatcher, align 4
  %4825 = load i8*, i8** %176, align 8
  %4826 = load i8, i8* %4825, align 1
  %4827 = mul i8 %4826, 2
  %4828 = and i64 %17, -6051218641545230574
  %4829 = or i64 6051218641545230573, %17
  %4830 = sub i64 %4829, 6051218641545230573
  %4831 = or i64 %199, 7856019386357073407
  %4832 = xor i64 %199, -1
  %4833 = and i64 7856019386357073407, %4832
  %4834 = add i64 %4833, %199
  %4835 = or i64 %418, -6207082386020854393
  %4836 = and i64 -6207082386020854393, %418
  %4837 = xor i64 -6207082386020854393, %418
  %4838 = or i64 %4836, %4837
  %4839 = xor i64 %4834, %4831
  %4840 = xor i64 %4839, %4835
  %4841 = xor i64 %4840, -3314384756980921011
  %4842 = xor i64 %4841, %4828
  %4843 = xor i64 %4842, %4838
  %4844 = xor i64 %4843, %4830
  %4845 = or i64 %193, 615856428339228533
  %4846 = xor i64 %193, -1
  %4847 = and i64 615856428339228533, %4846
  %4848 = add i64 %4847, %193
  %4849 = or i64 %66, 4024597759185557668
  %4850 = xor i64 %66, -1
  %4851 = and i64 4024597759185557668, %4850
  %4852 = add i64 %4851, %66
  %4853 = xor i64 %4849, -1053792092006226166
  %4854 = xor i64 %4853, %4845
  %4855 = xor i64 %4854, %4852
  %4856 = xor i64 %4855, %4848
  %4857 = mul i64 %4844, %4856
  %4858 = trunc i64 %4857 to i8
  %4859 = mul i8 %4826, %4858
  %4860 = add i8 58, %4859
  %4861 = add i64 %175, -7099983542172181690
  %4862 = xor i64 -7099983542172181690, %175
  %4863 = and i64 -7099983542172181690, %175
  %4864 = mul i64 2, %4863
  %4865 = add i64 %4862, %4864
  %4866 = and i64 %553, -4963070682140600610
  %4867 = xor i64 %553, -1
  %4868 = or i64 4963070682140600609, %4867
  %4869 = xor i64 %4868, -1
  %4870 = and i64 %4869, -1
  %4871 = xor i64 %4866, %4870
  %4872 = xor i64 %4871, %4861
  %4873 = xor i64 %4872, %4865
  %4874 = xor i64 %4873, -6118573440615267517
  %4875 = or i64 %62, 6661738719384664495
  %4876 = and i64 6661738719384664495, %62
  %4877 = xor i64 6661738719384664495, %62
  %4878 = or i64 %4876, %4877
  %4879 = or i64 %187, -6779857774282273699
  %4880 = and i64 -6779857774282273699, %187
  %4881 = xor i64 -6779857774282273699, %187
  %4882 = or i64 %4880, %4881
  %4883 = and i64 %9, -2750471583820909472
  %4884 = or i64 2750471583820909471, %9
  %4885 = sub i64 %4884, 2750471583820909471
  %4886 = xor i64 %4878, %4885
  %4887 = xor i64 %4886, 3344425727348264808
  %4888 = xor i64 %4887, %4879
  %4889 = xor i64 %4888, %4882
  %4890 = xor i64 %4889, %4875
  %4891 = xor i64 %4890, %4883
  %4892 = mul i64 %4874, %4891
  %4893 = trunc i64 %4892 to i8
  %4894 = sub i8 %4860, %4893
  %4895 = mul i8 %4827, %4894
  %4896 = srem i8 %4895, 4
  %4897 = icmp eq i8 %4896, 0
  %4898 = mul i8 %4826, %4826
  %4899 = mul i8 %4898, %4826
  %4900 = add i8 %4899, %4826
  %4901 = srem i8 %4900, 2
  %4902 = icmp eq i8 %4901, 0
  %4903 = and i1 %4897, %4902
  %4904 = select i1 %4903, i32 984876130, i32 984876144
  %4905 = xor i32 %4904, 18
  store i32 %4905, i32* %4, align 4
  %4906 = call i8** @bf6047435729067610447(i32* %4)
  %4907 = load i8*, i8** %4906, align 8
  indirectbr i8* %4907, [label %loopEnd, label %4768]

codeRepl5:                                        ; preds = %codeRepl5, %loopStart
  store i64 4070807658626890119, i64* %453, align 8
  %4908 = call i8** @lk8153326119118101986(i64* %453)
  %4909 = load i8*, i8** %4908, align 8
  %4910 = bitcast i8* %4909 to void ([65 x i32]*, i1*, i32*)*
  call void %4910([65 x i32]* %lookupTable, i1* %.reg2mem51, i32* %dispatcher)
  %4911 = load i8*, i8** %18, align 8
  %4912 = load i8, i8* %4911, align 1
  %4913 = mul i8 %4912, %4912
  %4914 = add i8 %4913, %4912
  %4915 = mul i8 %4914, 3
  %4916 = srem i8 %4915, 2
  %4917 = icmp eq i8 %4916, 0
  %4918 = mul i8 %4912, %4912
  %4919 = add i8 %4918, %4912
  %4920 = or i64 %416, 7693065516777199194
  %4921 = xor i64 %416, -1
  %4922 = and i64 %4921, -3922463180952567415
  %4923 = and i64 %416, 3922463180952567414
  %4924 = or i64 %4922, %4923
  %4925 = xor i64 -6677748806663415853, %4924
  %4926 = xor i64 %416, -1
  %4927 = or i64 -7693065516777199195, %4926
  %4928 = xor i64 %4927, -1
  %4929 = and i64 %4928, -1
  %4930 = or i64 %4925, %4929
  %4931 = or i64 %68, -7314262021580276243
  %4932 = xor i64 %68, -1
  %4933 = and i64 -7314262021580276243, %4932
  %4934 = add i64 %4933, %68
  %4935 = or i64 %416, 5143795132537395039
  %4936 = xor i64 %416, -1
  %4937 = and i64 %4936, 3932152872412464373
  %4938 = and i64 %416, -3932152872412464374
  %4939 = or i64 %4937, %4938
  %4940 = xor i64 8211115863859467178, %4939
  %4941 = xor i64 %416, -1
  %4942 = or i64 -5143795132537395040, %4941
  %4943 = xor i64 %4942, -1
  %4944 = and i64 %4943, -1
  %4945 = or i64 %4940, %4944
  %4946 = xor i64 %4935, %4945
  %4947 = xor i64 %4946, %4920
  %4948 = xor i64 %4947, %4934
  %4949 = xor i64 %4948, -4578686725357469903
  %4950 = xor i64 %4949, %4930
  %4951 = xor i64 %4950, %4931
  %4952 = sext i32 %dispatcher1 to i64
  %4953 = add i64 %4952, -6523184497750914763
  %4954 = add i64 8503304245174257599, %4952
  %4955 = sub i64 %4954, -3420255330784379254
  %4956 = add i64 %58, -1652953030005625763
  %4957 = xor i64 -1652953030005625763, %58
  %4958 = and i64 -1652953030005625763, %58
  %4959 = mul i64 2, %4958
  %4960 = add i64 %4957, %4959
  %4961 = and i64 %553, 4877446647573456099
  %4962 = xor i64 %553, -1
  %4963 = xor i64 4877446647573456099, %4962
  %4964 = and i64 %4963, 4877446647573456099
  %4965 = xor i64 %4956, %4961
  %4966 = xor i64 %4965, %4955
  %4967 = xor i64 %4966, %4960
  %4968 = xor i64 %4967, %4953
  %4969 = xor i64 %4968, 2192691641749009314
  %4970 = xor i64 %4969, %4964
  %4971 = mul i64 %4951, %4970
  %4972 = trunc i64 %4971 to i8
  %4973 = srem i8 %4919, %4972
  %4974 = or i64 %296, 5574232081465660764
  %4975 = xor i64 %296, -1
  %4976 = and i64 %4975, -40167193328752376
  %4977 = and i64 %296, 40167193328752375
  %4978 = or i64 %4976, %4977
  %4979 = xor i64 -5608412353405436844, %4978
  %4980 = xor i64 %296, -1
  %4981 = or i64 -5574232081465660765, %4980
  %4982 = xor i64 %4981, -1
  %4983 = and i64 %4982, -1
  %4984 = or i64 %4979, %4983
  %4985 = or i64 %140, -1190992755621983538
  %4986 = xor i64 %140, -1
  %4987 = and i64 %4986, -2863257559404760566
  %4988 = and i64 %140, 2863257559404760565
  %4989 = or i64 %4987, %4988
  %4990 = xor i64 3979796743392639172, %4989
  %4991 = xor i64 %140, -1
  %4992 = or i64 1190992755621983537, %4991
  %4993 = xor i64 %4992, -1
  %4994 = and i64 %4993, -1
  %4995 = or i64 %4990, %4994
  %4996 = add i64 %185, -5471685258881254399
  %4997 = add i64 6614371088982419586, %185
  %4998 = add i64 %4997, 6360687725845877631
  %4999 = xor i64 %4974, %4995
  %5000 = xor i64 %4999, -6475608747441667537
  %5001 = xor i64 %5000, %4985
  %5002 = xor i64 %5001, %4998
  %5003 = xor i64 %5002, %4984
  %5004 = xor i64 %5003, %4996
  %5005 = and i64 %296, 5041877064411427791
  %5006 = xor i64 %296, -1
  %5007 = xor i64 5041877064411427791, %5006
  %5008 = and i64 %5007, 5041877064411427791
  %5009 = or i64 %62, -9174570745975376935
  %5010 = xor i64 %62, -1
  %5011 = and i64 %5010, -5215475004213547967
  %5012 = and i64 %62, 5215475004213547966
  %5013 = or i64 %5011, %5012
  %5014 = xor i64 3977674208562798488, %5013
  %5015 = xor i64 %62, -1
  %5016 = or i64 9174570745975376934, %5015
  %5017 = xor i64 %5016, -1
  %5018 = and i64 %5017, -1
  %5019 = or i64 %5014, %5018
  %5020 = and i64 %82, 288663889214940180
  %5021 = or i64 -288663889214940181, %82
  %5022 = sub i64 %5021, -288663889214940181
  %5023 = xor i64 %5022, %5019
  %5024 = xor i64 %5023, %5008
  %5025 = xor i64 %5024, 0
  %5026 = xor i64 %5025, %5009
  %5027 = xor i64 %5026, %5005
  %5028 = xor i64 %5027, %5020
  %5029 = mul i64 %5004, %5028
  %5030 = trunc i64 %5029 to i8
  %5031 = icmp eq i8 %4973, %5030
  %5032 = and i1 %4917, %5031
  %5033 = and i64 %447, 1927940831837510832
  %5034 = xor i64 %447, -1
  %5035 = or i64 -1927940831837510833, %5034
  %5036 = xor i64 %5035, -1
  %5037 = and i64 %5036, -1
  %5038 = and i64 %296, -3289973442529447141
  %5039 = xor i64 %296, -1
  %5040 = xor i64 -3289973442529447141, %5039
  %5041 = and i64 %5040, -3289973442529447141
  %5042 = xor i64 %5037, %5041
  %5043 = xor i64 %5042, -6634542650614698633
  %5044 = xor i64 %5043, %5033
  %5045 = xor i64 %5044, %5038
  %5046 = and i64 %584, 2375992695733435965
  %5047 = xor i64 %584, -1
  %5048 = or i64 -2375992695733435966, %5047
  %5049 = xor i64 %5048, -1
  %5050 = and i64 %5049, -1
  %5051 = or i64 %19, -5221199336040876372
  %5052 = and i64 -5221199336040876372, %19
  %5053 = xor i64 -5221199336040876372, %19
  %5054 = or i64 %5052, %5053
  %5055 = xor i64 %5054, %5050
  %5056 = xor i64 %5055, %5051
  %5057 = xor i64 %5056, -1092316941231714312
  %5058 = xor i64 %5057, %5046
  %5059 = mul i64 %5045, %5058
  %5060 = trunc i64 %5059 to i32
  %5061 = and i64 %62, -5664187119673290412
  %5062 = xor i64 %62, -1
  %5063 = xor i64 -5664187119673290412, %5062
  %5064 = and i64 %5063, -5664187119673290412
  %5065 = add i64 %78, -4002109317483797313
  %5066 = add i64 -2573896539933547006, %78
  %5067 = sub i64 %5066, 1428212777550250307
  %5068 = add i64 %177, 8749533875354714887
  %5069 = and i64 8749533875354714887, %177
  %5070 = or i64 8749533875354714887, %177
  %5071 = add i64 %5069, %5070
  %5072 = xor i64 %5067, %5064
  %5073 = xor i64 %5072, %5071
  %5074 = xor i64 %5073, %5068
  %5075 = xor i64 %5074, %5065
  %5076 = xor i64 %5075, -2061777398581054829
  %5077 = xor i64 %5076, %5061
  %5078 = or i64 %7, 2942326020530725072
  %5079 = xor i64 %7, -1
  %5080 = and i64 %5079, -6329453566779942328
  %5081 = and i64 %7, 6329453566779942327
  %5082 = or i64 %5080, %5081
  %5083 = xor i64 -9152301352701920616, %5082
  %5084 = xor i64 %7, -1
  %5085 = or i64 -2942326020530725073, %5084
  %5086 = xor i64 %5085, -1
  %5087 = and i64 %5086, -1
  %5088 = or i64 %5083, %5087
  %5089 = and i64 %292, -2704697878467104395
  %5090 = xor i64 %292, -1
  %5091 = or i64 2704697878467104394, %5090
  %5092 = xor i64 %5091, -1
  %5093 = and i64 %5092, -1
  %5094 = add i64 %447, 6607165307326470304
  %5095 = add i64 1241593787193080102, %447
  %5096 = sub i64 %5095, -5365571520133390202
  %5097 = xor i64 %5088, -5532941196976685104
  %5098 = xor i64 %5097, %5096
  %5099 = xor i64 %5098, %5089
  %5100 = xor i64 %5099, %5093
  %5101 = xor i64 %5100, %5078
  %5102 = xor i64 %5101, %5094
  %5103 = mul i64 %5077, %5102
  %5104 = trunc i64 %5103 to i32
  %5105 = select i1 %5032, i32 %5060, i32 %5104
  %5106 = or i32 %5105, 56
  %5107 = and i32 %5105, 56
  %5108 = sub i32 %5106, %5107
  store i32 %5108, i32* %4, align 4
  %5109 = call i8** @bf6047435729067610447(i32* %4)
  %5110 = load i8*, i8** %5109, align 8
  indirectbr i8* %5110, [label %loopEnd, label %codeRepl5]

codeRepl6:                                        ; preds = %codeRepl6, %loopStart
  store i64 4070807658626890123, i64* %453, align 8
  %5111 = call i8** @lk8153326119118101986(i64* %453)
  %5112 = load i8*, i8** %5111, align 8
  %5113 = bitcast i8* %5112 to void ([65 x i32]*, i32*)*
  call void %5113([65 x i32]* %lookupTable, i32* %dispatcher)
  %5114 = load i8*, i8** %450, align 8
  %5115 = load i8, i8* %5114, align 1
  %5116 = mul i8 %5115, %5115
  %5117 = add i8 %5116, %5115
  %5118 = mul i8 %5117, 3
  %5119 = srem i8 %5118, 2
  %5120 = icmp eq i8 %5119, 0
  %5121 = mul i8 %5115, %5115
  %5122 = add i8 %5121, %5115
  %5123 = srem i8 %5122, 2
  %5124 = icmp eq i8 %5123, 0
  %5125 = and i1 %5120, %5124
  %5126 = and i64 %68, 7462883500152685798
  %5127 = or i64 -7462883500152685799, %68
  %5128 = sub i64 %5127, -7462883500152685799
  %5129 = or i64 %193, 1795862967507376146
  %5130 = xor i64 %193, -1
  %5131 = and i64 1795862967507376146, %5130
  %5132 = add i64 %5131, %193
  %5133 = and i64 %13, -1631602518900403703
  %5134 = or i64 1631602518900403702, %13
  %5135 = sub i64 %5134, 1631602518900403702
  %5136 = xor i64 %5133, %5126
  %5137 = xor i64 %5136, %5128
  %5138 = xor i64 %5137, %5135
  %5139 = xor i64 %5138, 1890637183152883457
  %5140 = xor i64 %5139, %5129
  %5141 = xor i64 %5140, %5132
  %5142 = add i64 %300, 2830086929386284646
  %5143 = add i64 -5391233356068375263, %300
  %5144 = sub i64 %5143, -8221320285454659909
  %5145 = or i64 %179, 6817508529941804685
  %5146 = and i64 6817508529941804685, %179
  %5147 = xor i64 6817508529941804685, %179
  %5148 = or i64 %5146, %5147
  %5149 = xor i64 %5142, %5145
  %5150 = xor i64 %5149, -2884603536167044771
  %5151 = xor i64 %5150, %5148
  %5152 = xor i64 %5151, %5144
  %5153 = mul i64 %5141, %5152
  %5154 = trunc i64 %5153 to i32
  %5155 = select i1 %5125, i32 %5154, i32 984876144
  %5156 = xor i32 %5155, 45
  store i32 %5156, i32* %4, align 4
  %5157 = call i8** @bf6047435729067610447(i32* %4)
  %5158 = load i8*, i8** %5157, align 8
  indirectbr i8* %5158, [label %loopEnd, label %codeRepl6]

5159:                                             ; preds = %5159, %loopStart
  %5160 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 19
  %5161 = load i32, i32* %5160, align 4
  %5162 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 18
  %5163 = load i32, i32* %5162, align 4
  %5164 = add i32 %5161, %5163
  store i32 %5164, i32* %dispatcher, align 4
  %5165 = load i8*, i8** %184, align 8
  %5166 = load i8, i8* %5165, align 1
  %5167 = add i64 %288, 5872740925660995558
  %5168 = xor i64 5872740925660995558, %288
  %5169 = and i64 5872740925660995558, %288
  %5170 = mul i64 2, %5169
  %5171 = add i64 %5168, %5170
  %5172 = add i64 %21, 1899589490184982822
  %5173 = and i64 1899589490184982822, %21
  %5174 = or i64 1899589490184982822, %21
  %5175 = add i64 %5173, %5174
  %5176 = xor i64 %5167, %5171
  %5177 = xor i64 %5176, %5175
  %5178 = xor i64 %5177, %5172
  %5179 = xor i64 %5178, 8456558430819736651
  %5180 = and i64 %292, 5496657032585633788
  %5181 = or i64 -5496657032585633789, %292
  %5182 = sub i64 %5181, -5496657032585633789
  %5183 = add i64 %9, -1638145565542061742
  %5184 = and i64 -1638145565542061742, %9
  %5185 = or i64 -1638145565542061742, %9
  %5186 = add i64 %5184, %5185
  %5187 = xor i64 %5183, -8394960526924637498
  %5188 = xor i64 %5187, %5182
  %5189 = xor i64 %5188, %5180
  %5190 = xor i64 %5189, %5186
  %5191 = mul i64 %5179, %5190
  %5192 = trunc i64 %5191 to i8
  %5193 = mul i8 %5166, %5192
  %5194 = mul i8 %5166, 2
  %5195 = add i8 2, %5194
  %5196 = mul i8 %5193, %5195
  %5197 = and i64 %454, 7803484311717780586
  %5198 = or i64 -7803484311717780587, %454
  %5199 = sub i64 %5198, -7803484311717780587
  %5200 = add i64 %58, 7350297726440642417
  %5201 = add i64 2349582728328687436, %58
  %5202 = sub i64 %5201, -5000714998111954981
  %5203 = add i64 %298, -357635114984368192
  %5204 = xor i64 -357635114984368192, %298
  %5205 = and i64 -357635114984368192, %298
  %5206 = mul i64 2, %5205
  %5207 = add i64 %5204, %5206
  %5208 = xor i64 %5202, %5207
  %5209 = xor i64 %5208, %5199
  %5210 = xor i64 %5209, %5200
  %5211 = xor i64 %5210, %5197
  %5212 = xor i64 %5211, -6545389049156761651
  %5213 = xor i64 %5212, %5203
  %5214 = and i64 %288, 6766309477675719141
  %5215 = xor i64 %288, -1
  %5216 = or i64 -6766309477675719142, %5215
  %5217 = xor i64 %5216, -1
  %5218 = and i64 %5217, -1
  %5219 = add i64 %294, 8994754697207197520
  %5220 = sub i64 0, %294
  %5221 = add i64 -8994754697207197520, %5220
  %5222 = sub i64 0, %5221
  %5223 = xor i64 %5214, %5219
  %5224 = xor i64 %5223, %5222
  %5225 = xor i64 %5224, %5218
  %5226 = xor i64 %5225, -3378217523078826988
  %5227 = mul i64 %5213, %5226
  %5228 = trunc i64 %5227 to i8
  %5229 = srem i8 %5196, %5228
  %5230 = icmp eq i8 %5229, 0
  %5231 = mul i8 %5166, %5166
  %5232 = add i8 %5231, %5166
  %5233 = srem i8 %5232, 2
  %5234 = icmp eq i8 %5233, 0
  %5235 = and i1 %5230, %5234
  %5236 = xor i1 %5230, %5234
  %5237 = or i1 %5235, %5236
  %5238 = select i1 %5237, i32 984876115, i32 984876144
  %5239 = or i32 %5238, 35
  %5240 = and i32 %5238, 35
  %5241 = sub i32 %5239, %5240
  store i32 %5241, i32* %4, align 4
  %5242 = call i8** @bf6047435729067610447(i32* %4)
  %5243 = load i8*, i8** %5242, align 8
  indirectbr i8* %5243, [label %loopEnd, label %5159]

5244:                                             ; preds = %5244, %loopStart
  %5245 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 20
  %5246 = load i32, i32* %5245, align 4
  %5247 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 19
  %5248 = load i32, i32* %5247, align 4
  %5249 = add i32 %5246, %5248
  store i32 %5249, i32* %dispatcher, align 4
  %5250 = load i8*, i8** %73, align 8
  %5251 = load i8, i8* %5250, align 1
  %5252 = mul i8 %5251, %5251
  %5253 = add i8 %5252, %5251
  %5254 = mul i8 %5253, 3
  %5255 = srem i8 %5254, 2
  %5256 = icmp eq i8 %5255, 0
  %5257 = mul i8 %5251, %5251
  %5258 = add i8 %5257, %5251
  %5259 = srem i8 %5258, 2
  %5260 = and i64 %547, 2174395092241068265
  %5261 = xor i64 %547, -1
  %5262 = or i64 -2174395092241068266, %5261
  %5263 = xor i64 %5262, -1
  %5264 = and i64 %5263, -1
  %5265 = and i64 %294, -956413879185028313
  %5266 = xor i64 %294, -1
  %5267 = or i64 956413879185028312, %5266
  %5268 = xor i64 %5267, -1
  %5269 = and i64 %5268, -1
  %5270 = and i64 %456, -2417022417302958004
  %5271 = xor i64 %456, -1
  %5272 = xor i64 -2417022417302958004, %5271
  %5273 = and i64 %5272, -2417022417302958004
  %5274 = xor i64 %5269, %5273
  %5275 = xor i64 %5274, 2952372010538843579
  %5276 = xor i64 %5275, %5265
  %5277 = xor i64 %5276, %5260
  %5278 = xor i64 %5277, %5270
  %5279 = xor i64 %5278, %5264
  %5280 = add i64 %173, 5128680726285393421
  %5281 = sub i64 0, %173
  %5282 = add i64 -5128680726285393421, %5281
  %5283 = sub i64 0, %5282
  %5284 = and i64 %203, 6437892704529407604
  %5285 = xor i64 %203, -1
  %5286 = xor i64 6437892704529407604, %5285
  %5287 = and i64 %5286, 6437892704529407604
  %5288 = xor i64 %5280, %5284
  %5289 = xor i64 %5288, 0
  %5290 = xor i64 %5289, %5287
  %5291 = xor i64 %5290, %5283
  %5292 = mul i64 %5279, %5291
  %5293 = trunc i64 %5292 to i8
  %5294 = icmp eq i8 %5259, %5293
  %5295 = and i1 %5256, %5294
  %5296 = add i64 %21, 5981351013726295059
  %5297 = add i64 -80309070342393419, %21
  %5298 = sub i64 %5297, -6061660084068688478
  %5299 = or i64 %506, 9196847332051630774
  %5300 = and i64 9196847332051630774, %506
  %5301 = xor i64 9196847332051630774, %506
  %5302 = or i64 %5300, %5301
  %5303 = and i64 %245, 3101914961704492917
  %5304 = or i64 -3101914961704492918, %245
  %5305 = sub i64 %5304, -3101914961704492918
  %5306 = xor i64 %5305, 2926979202233485055
  %5307 = xor i64 %5306, %5302
  %5308 = xor i64 %5307, %5298
  %5309 = xor i64 %5308, %5296
  %5310 = xor i64 %5309, %5299
  %5311 = xor i64 %5310, %5303
  %5312 = or i64 %456, 834279415814208388
  %5313 = xor i64 %456, -1
  %5314 = and i64 834279415814208388, %5313
  %5315 = add i64 %5314, %456
  %5316 = add i64 %582, 5168231241513575024
  %5317 = sub i64 0, %582
  %5318 = add i64 -5168231241513575024, %5317
  %5319 = sub i64 0, %5318
  %5320 = xor i64 %5312, %5315
  %5321 = xor i64 %5320, %5316
  %5322 = xor i64 %5321, %5319
  %5323 = xor i64 %5322, -7528413615172293744
  %5324 = mul i64 %5311, %5323
  %5325 = trunc i64 %5324 to i32
  %5326 = select i1 %5295, i32 984876103, i32 %5325
  %5327 = or i64 %416, 8027733434413804810
  %5328 = xor i64 %416, -1
  %5329 = and i64 8027733434413804810, %5328
  %5330 = add i64 %5329, %416
  %5331 = and i64 %3, 1883965404306541858
  %5332 = or i64 -1883965404306541859, %3
  %5333 = sub i64 %5332, -1883965404306541859
  %5334 = and i64 %456, -166378674118263659
  %5335 = xor i64 %456, -1
  %5336 = or i64 166378674118263658, %5335
  %5337 = xor i64 %5336, -1
  %5338 = and i64 %5337, -1
  %5339 = xor i64 %5333, %5338
  %5340 = xor i64 %5339, 5198853234319842841
  %5341 = xor i64 %5340, %5330
  %5342 = xor i64 %5341, %5334
  %5343 = xor i64 %5342, %5327
  %5344 = xor i64 %5343, %5331
  %5345 = or i64 %245, -8817901800189702167
  %5346 = xor i64 %245, -1
  %5347 = and i64 %5346, 6004314494275892688
  %5348 = and i64 %245, -6004314494275892689
  %5349 = or i64 %5347, %5348
  %5350 = xor i64 -2957992835088811463, %5349
  %5351 = xor i64 %245, -1
  %5352 = or i64 8817901800189702166, %5351
  %5353 = xor i64 %5352, -1
  %5354 = and i64 %5353, -1
  %5355 = or i64 %5350, %5354
  %5356 = and i64 %3, 755630625740787794
  %5357 = xor i64 %3, -1
  %5358 = or i64 -755630625740787795, %5357
  %5359 = xor i64 %5358, -1
  %5360 = and i64 %5359, -1
  %5361 = xor i64 3070509350655261391, %5345
  %5362 = xor i64 %5361, %5355
  %5363 = xor i64 %5362, %5360
  %5364 = xor i64 %5363, %5356
  %5365 = mul i64 %5344, %5364
  %5366 = trunc i64 %5365 to i32
  %5367 = xor i32 %5326, %5366
  store i32 %5367, i32* %4, align 4
  %5368 = call i8** @bf6047435729067610447(i32* %4)
  %5369 = load i8*, i8** %5368, align 8
  indirectbr i8* %5369, [label %loopEnd, label %5244]

5370:                                             ; preds = %5370, %loopStart
  %5371 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 38
  %5372 = load i32, i32* %5371, align 4
  %5373 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 5
  %5374 = load i32, i32* %5373, align 4
  %5375 = sub i32 %5372, %5374
  store i32 %5375, i32* %dispatcher, align 4
  %5376 = load i8*, i8** %63, align 8
  %5377 = load i8, i8* %5376, align 1
  %5378 = and i64 %72, 5878470292081212035
  %5379 = xor i64 %72, -1
  %5380 = xor i64 5878470292081212035, %5379
  %5381 = and i64 %5380, 5878470292081212035
  %5382 = and i64 %584, -6362003567152793281
  %5383 = xor i64 %584, -1
  %5384 = xor i64 -6362003567152793281, %5383
  %5385 = and i64 %5384, -6362003567152793281
  %5386 = and i64 %290, 8387770491250947630
  %5387 = xor i64 %290, -1
  %5388 = xor i64 8387770491250947630, %5387
  %5389 = and i64 %5388, 8387770491250947630
  %5390 = xor i64 %5382, %5381
  %5391 = xor i64 %5390, %5385
  %5392 = xor i64 %5391, %5378
  %5393 = xor i64 %5392, -4187151589600706219
  %5394 = xor i64 %5393, %5389
  %5395 = xor i64 %5394, %5386
  %5396 = and i64 %78, 7810522106827754349
  %5397 = or i64 -7810522106827754350, %78
  %5398 = sub i64 %5397, -7810522106827754350
  %5399 = and i64 %140, -4130444535088127356
  %5400 = xor i64 %140, -1
  %5401 = xor i64 -4130444535088127356, %5400
  %5402 = and i64 %5401, -4130444535088127356
  %5403 = xor i64 %5398, %5402
  %5404 = xor i64 %5403, %5399
  %5405 = xor i64 %5404, 897341750280107005
  %5406 = xor i64 %5405, %5396
  %5407 = mul i64 %5395, %5406
  %5408 = trunc i64 %5407 to i8
  %5409 = and i8 %5377, %5408
  %5410 = icmp eq i8 %5409, 0
  %5411 = mul i8 %5377, %5377
  %5412 = add i8 %5411, %5377
  %5413 = mul i8 %5412, 3
  %5414 = srem i8 %5413, 2
  %5415 = icmp eq i8 %5414, 0
  %5416 = or i1 %5410, %5415
  %5417 = or i64 %15, -5380092152503893283
  %5418 = xor i64 %15, -1
  %5419 = and i64 -5380092152503893283, %5418
  %5420 = add i64 %5419, %15
  %5421 = add i64 %64, 5310452467283084085
  %5422 = xor i64 5310452467283084085, %64
  %5423 = and i64 5310452467283084085, %64
  %5424 = mul i64 2, %5423
  %5425 = add i64 %5422, %5424
  %5426 = or i64 %58, -2053077999500363937
  %5427 = xor i64 %58, -1
  %5428 = and i64 %5427, 595902545869056711
  %5429 = and i64 %58, -595902545869056712
  %5430 = or i64 %5428, %5429
  %5431 = xor i64 -1457175773841793640, %5430
  %5432 = xor i64 %58, -1
  %5433 = or i64 2053077999500363936, %5432
  %5434 = xor i64 %5433, -1
  %5435 = and i64 %5434, -1
  %5436 = or i64 %5431, %5435
  %5437 = xor i64 %5420, -5696270932790767999
  %5438 = xor i64 %5437, %5436
  %5439 = xor i64 %5438, %5417
  %5440 = xor i64 %5439, %5425
  %5441 = xor i64 %5440, %5421
  %5442 = xor i64 %5441, %5426
  %5443 = and i64 %580, 7402836820240344254
  %5444 = xor i64 %580, -1
  %5445 = or i64 -7402836820240344255, %5444
  %5446 = xor i64 %5445, -1
  %5447 = and i64 %5446, -1
  %5448 = add i64 %13, -4251531798570798636
  %5449 = xor i64 -4251531798570798636, %13
  %5450 = and i64 -4251531798570798636, %13
  %5451 = mul i64 2, %5450
  %5452 = add i64 %5449, %5451
  %5453 = xor i64 %5452, -46774225714303888
  %5454 = xor i64 %5453, %5447
  %5455 = xor i64 %5454, %5443
  %5456 = xor i64 %5455, %5448
  %5457 = mul i64 %5442, %5456
  %5458 = trunc i64 %5457 to i32
  %5459 = select i1 %5416, i32 984876128, i32 %5458
  %5460 = xor i32 %5459, -1
  %5461 = and i32 %5460, -1321776027
  %5462 = and i32 %5459, 1321776026
  %5463 = or i32 %5461, %5462
  %5464 = xor i32 %5463, -1321776011
  store i32 %5464, i32* %4, align 4
  %5465 = call i8** @bf6047435729067610447(i32* %4)
  %5466 = load i8*, i8** %5465, align 8
  indirectbr i8* %5466, [label %loopEnd, label %5370]

5467:                                             ; preds = %5467, %loopStart
  %5468 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 23
  %5469 = load i32, i32* %5468, align 4
  %5470 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 21
  %5471 = load i32, i32* %5470, align 4
  %5472 = add i32 %5469, %5471
  store i32 %5472, i32* %dispatcher, align 4
  store i64 0, i64* %.reg2mem101, align 8
  %5473 = load i8*, i8** %182, align 8
  %5474 = load i8, i8* %5473, align 1
  %5475 = mul i8 %5474, %5474
  %5476 = xor i8 %5475, %5474
  %5477 = and i8 %5475, %5474
  %5478 = mul i8 2, %5477
  %5479 = add i8 %5476, %5478
  %5480 = mul i8 %5479, 3
  %5481 = srem i8 %5480, 2
  %5482 = icmp eq i8 %5481, 0
  %5483 = mul i8 %5474, %5474
  %5484 = add i8 %5483, %5474
  %5485 = srem i8 %5484, 2
  %5486 = icmp eq i8 %5485, 0
  %5487 = and i1 %5482, %5486
  %5488 = select i1 %5487, i32 984876118, i32 984876144
  %5489 = xor i32 %5488, 38
  store i32 %5489, i32* %4, align 4
  %5490 = call i8** @bf6047435729067610447(i32* %4)
  %5491 = load i8*, i8** %5490, align 8
  indirectbr i8* %5491, [label %loopEnd, label %5467]

5492:                                             ; preds = %5492, %loopStart
  %.reload93 = load i64, i64* %.reg2mem92, align 8
  %5493 = icmp eq i64 %.reload93, 1761
  store i1 %5493, i1* %.reg2mem54, align 1
  %.reload69 = load i32, i32* %.reg2mem63, align 4
  %5494 = srem i32 %.reload69, 2
  %5495 = icmp eq i32 %5494, 0
  %5496 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 21
  %5497 = load i32, i32* %5496, align 4
  %5498 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 20
  %5499 = load i32, i32* %5498, align 4
  %5500 = sub i32 %5497, 648944568
  %5501 = add i32 %5500, %5499
  %5502 = add i32 %5501, 648944568
  %5503 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 39
  %5504 = load i32, i32* %5503, align 4
  %5505 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %5506 = load i32, i32* %5505, align 4
  %5507 = srem i32 %5504, %5506
  %5508 = select i1 %5495, i32 %5502, i32 %5507
  store i32 %5508, i32* %dispatcher, align 4
  %5509 = load i8*, i8** %83, align 8
  %5510 = load i8, i8* %5509, align 1
  %5511 = and i8 %5510, 1
  %5512 = icmp eq i8 %5511, 0
  %5513 = mul i8 %5510, %5510
  %5514 = add i8 %5513, %5510
  %5515 = mul i8 %5514, 3
  %5516 = srem i8 %5515, 2
  %5517 = icmp eq i8 %5516, 0
  %5518 = or i1 %5512, %5517
  %5519 = select i1 %5518, i32 984876111, i32 984876144
  %5520 = xor i32 %5519, -1718083663
  %5521 = xor i32 %5520, -1718083698
  store i32 %5521, i32* %4, align 4
  %5522 = call i8** @bf6047435729067610447(i32* %4)
  %5523 = load i8*, i8** %5522, align 8
  indirectbr i8* %5523, [label %loopEnd, label %5492]

5524:                                             ; preds = %5524, %loopStart
  %5525 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 22
  %5526 = load i32, i32* %5525, align 4
  %5527 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 21
  %5528 = load i32, i32* %5527, align 4
  %5529 = add i32 %5526, %5528
  store i32 %5529, i32* %dispatcher, align 4
  %5530 = load i8*, i8** %188, align 8
  %5531 = load i8, i8* %5530, align 1
  %5532 = add i64 %547, -4825307864321944305
  %5533 = add i64 2827695583199140802, %547
  %5534 = add i64 %5533, -7653003447521085107
  %5535 = add i64 %416, 7866919868275615991
  %5536 = sub i64 0, %416
  %5537 = sub i64 7866919868275615991, %5536
  %5538 = xor i64 %5535, %5532
  %5539 = xor i64 %5538, %5537
  %5540 = xor i64 %5539, %5534
  %5541 = xor i64 %5540, 2475839635263130767
  %5542 = and i64 %551, -3935546454345989474
  %5543 = or i64 3935546454345989473, %551
  %5544 = sub i64 %5543, 3935546454345989473
  %5545 = or i64 %197, 6524953940620386053
  %5546 = xor i64 %197, -1
  %5547 = and i64 %5546, 7154742881353055076
  %5548 = and i64 %197, -7154742881353055077
  %5549 = or i64 %5547, %5548
  %5550 = xor i64 4163450002652996705, %5549
  %5551 = xor i64 %197, -1
  %5552 = or i64 -6524953940620386054, %5551
  %5553 = xor i64 %5552, -1
  %5554 = and i64 %5553, -1
  %5555 = or i64 %5550, %5554
  %5556 = and i64 %58, 5350796912567364208
  %5557 = xor i64 %58, -1
  %5558 = xor i64 5350796912567364208, %5557
  %5559 = and i64 %5558, 5350796912567364208
  %5560 = xor i64 -785598055132093218, %5555
  %5561 = xor i64 %5560, %5556
  %5562 = xor i64 %5561, %5544
  %5563 = xor i64 %5562, %5559
  %5564 = xor i64 %5563, %5545
  %5565 = xor i64 %5564, %5542
  %5566 = mul i64 %5541, %5565
  %5567 = trunc i64 %5566 to i8
  %5568 = mul i8 %5531, %5567
  %5569 = mul i8 %5531, 2
  %5570 = add i8 2, %5569
  %5571 = mul i8 %5568, %5570
  %5572 = or i64 %447, -7909158176543954950
  %5573 = xor i64 %447, -1
  %5574 = and i64 -7909158176543954950, %5573
  %5575 = add i64 %5574, %447
  %5576 = or i64 %187, 946823807200903806
  %5577 = xor i64 %187, -1
  %5578 = and i64 %5577, 3278278322584564064
  %5579 = and i64 %187, -3278278322584564065
  %5580 = or i64 %5578, %5579
  %5581 = xor i64 2332024578375938846, %5580
  %5582 = xor i64 %187, -1
  %5583 = or i64 -946823807200903807, %5582
  %5584 = xor i64 %5583, -1
  %5585 = and i64 %5584, -1
  %5586 = or i64 %5581, %5585
  %5587 = and i64 %187, 3232245847933735961
  %5588 = or i64 -3232245847933735962, %187
  %5589 = sub i64 %5588, -3232245847933735962
  %5590 = xor i64 %5575, %5587
  %5591 = xor i64 %5590, %5572
  %5592 = xor i64 %5591, %5589
  %5593 = xor i64 %5592, %5586
  %5594 = xor i64 %5593, %5576
  %5595 = xor i64 %5594, -9146603108271346713
  %5596 = and i64 %197, 6257544378103924212
  %5597 = xor i64 %197, -1
  %5598 = or i64 -6257544378103924213, %5597
  %5599 = xor i64 %5598, -1
  %5600 = and i64 %5599, -1
  %5601 = or i64 %72, 2992006998648140332
  %5602 = xor i64 %72, -1
  %5603 = and i64 2992006998648140332, %5602
  %5604 = add i64 %5603, %72
  %5605 = xor i64 %5596, -7116795473391984804
  %5606 = xor i64 %5605, %5601
  %5607 = xor i64 %5606, %5604
  %5608 = xor i64 %5607, %5600
  %5609 = mul i64 %5595, %5608
  %5610 = trunc i64 %5609 to i8
  %5611 = srem i8 %5571, %5610
  %5612 = icmp eq i8 %5611, 0
  %5613 = mul i8 %5531, %5531
  %5614 = mul i8 %5613, %5531
  %5615 = add i8 %5614, %5531
  %5616 = srem i8 %5615, 2
  %5617 = icmp eq i8 %5616, 0
  %5618 = xor i1 %5617, true
  %5619 = xor i1 %5612, %5618
  %5620 = and i1 %5619, %5612
  %5621 = select i1 %5620, i32 984876102, i32 984876144
  %5622 = xor i32 %5621, 54
  store i32 %5622, i32* %4, align 4
  %5623 = call i8** @bf6047435729067610447(i32* %4)
  %5624 = load i8*, i8** %5623, align 8
  indirectbr i8* %5624, [label %loopEnd, label %5524]

codeRepl7:                                        ; preds = %codeRepl7, %loopStart
  store i64 4070807658626890117, i64* %453, align 8
  %5625 = call i8** @lk8153326119118101986(i64* %453)
  %5626 = load i8*, i8** %5625, align 8
  %5627 = bitcast i8* %5626 to void ([65 x i32]*, i32*)*
  call void %5627([65 x i32]* %lookupTable, i32* %dispatcher)
  %5628 = load i8*, i8** %448, align 8
  %5629 = load i8, i8* %5628, align 1
  %5630 = and i8 %5629, 1
  %5631 = or i64 %547, 5693894501556819089
  %5632 = and i64 5693894501556819089, %547
  %5633 = xor i64 5693894501556819089, %547
  %5634 = or i64 %5632, %5633
  %5635 = add i64 %549, 3978090548387686117
  %5636 = add i64 2685551134793339407, %549
  %5637 = sub i64 %5636, -1292539413594346710
  %5638 = xor i64 %5631, %5634
  %5639 = xor i64 %5638, %5637
  %5640 = xor i64 %5639, 6407549133034465159
  %5641 = xor i64 %5640, %5635
  %5642 = add i64 %420, 3316188451299944731
  %5643 = xor i64 3316188451299944731, %420
  %5644 = and i64 3316188451299944731, %420
  %5645 = mul i64 2, %5644
  %5646 = add i64 %5643, %5645
  %5647 = or i64 %15, 4939559750107283140
  %5648 = and i64 4939559750107283140, %15
  %5649 = xor i64 4939559750107283140, %15
  %5650 = or i64 %5648, %5649
  %5651 = add i64 %302, 2469640742178007346
  %5652 = add i64 -1721548700587979363, %302
  %5653 = add i64 %5652, 4191189442765986709
  %5654 = xor i64 %5647, %5651
  %5655 = xor i64 %5654, %5642
  %5656 = xor i64 %5655, %5653
  %5657 = xor i64 %5656, 7562165162437733943
  %5658 = xor i64 %5657, %5650
  %5659 = xor i64 %5658, %5646
  %5660 = mul i64 %5641, %5659
  %5661 = trunc i64 %5660 to i8
  %5662 = icmp eq i8 %5630, %5661
  %5663 = mul i8 %5629, %5629
  %5664 = add i8 %5663, %5629
  %5665 = srem i8 %5664, 2
  %5666 = or i64 %302, -6926950063389538714
  %5667 = xor i64 %302, -1
  %5668 = and i64 %5667, 5474023608998817775
  %5669 = and i64 %302, -5474023608998817776
  %5670 = or i64 %5668, %5669
  %5671 = xor i64 -3158953091538753143, %5670
  %5672 = xor i64 %302, -1
  %5673 = or i64 6926950063389538713, %5672
  %5674 = xor i64 %5673, -1
  %5675 = and i64 %5674, -1
  %5676 = or i64 %5671, %5675
  %5677 = or i64 %66, -1527766491529036813
  %5678 = xor i64 %66, -1
  %5679 = and i64 %5678, -7573602270866560857
  %5680 = and i64 %66, 7573602270866560856
  %5681 = or i64 %5679, %5680
  %5682 = xor i64 8946788392545456980, %5681
  %5683 = xor i64 %66, -1
  %5684 = or i64 1527766491529036812, %5683
  %5685 = xor i64 %5684, -1
  %5686 = and i64 %5685, -1
  %5687 = or i64 %5682, %5686
  %5688 = xor i64 %5687, %5676
  %5689 = xor i64 %5688, %5666
  %5690 = xor i64 %5689, %5677
  %5691 = xor i64 %5690, -8442895447225713321
  %5692 = or i64 %7, -640366987762878784
  %5693 = xor i64 %7, -1
  %5694 = and i64 %5693, 4974143461993387574
  %5695 = and i64 %7, -4974143461993387575
  %5696 = or i64 %5694, %5695
  %5697 = xor i64 -5612821583741378314, %5696
  %5698 = xor i64 %7, -1
  %5699 = or i64 640366987762878783, %5698
  %5700 = xor i64 %5699, -1
  %5701 = and i64 %5700, -1
  %5702 = or i64 %5697, %5701
  %5703 = or i64 %454, -4074696372767213016
  %5704 = xor i64 %454, -1
  %5705 = and i64 %5704, -38399792015490324
  %5706 = and i64 %454, 38399792015490323
  %5707 = or i64 %5705, %5706
  %5708 = xor i64 4036446460094773444, %5707
  %5709 = xor i64 %454, -1
  %5710 = or i64 4074696372767213015, %5709
  %5711 = xor i64 %5710, -1
  %5712 = and i64 %5711, -1
  %5713 = or i64 %5708, %5712
  %5714 = xor i64 %5702, %5713
  %5715 = xor i64 %5714, %5703
  %5716 = xor i64 %5715, 0
  %5717 = xor i64 %5716, %5692
  %5718 = mul i64 %5691, %5717
  %5719 = trunc i64 %5718 to i8
  %5720 = icmp eq i8 %5665, %5719
  %5721 = or i1 %5662, %5720
  %5722 = select i1 %5721, i32 984876114, i32 984876144
  %5723 = xor i32 %5722, 34
  store i32 %5723, i32* %4, align 4
  %5724 = call i8** @bf6047435729067610447(i32* %4)
  %5725 = load i8*, i8** %5724, align 8
  indirectbr i8* %5725, [label %loopEnd, label %codeRepl7]

codeRepl8:                                        ; preds = %codeRepl8, %loopStart
  store i64 4070807658626890122, i64* %453, align 8
  %5726 = call i8** @lk8153326119118101986(i64* %453)
  %5727 = load i8*, i8** %5726, align 8
  %5728 = bitcast i8* %5727 to void ([65 x i32]*, i1*, i32*, i64*, i64*, i32*)*
  call void %5728([65 x i32]* %lookupTable, i1* %.reg2mem54, i32* %dispatcher, i64* %.reg2mem92, i64* %.reg2mem101, i32* %.ph.reg2mem)
  %5729 = load i8*, i8** %83, align 8
  %5730 = load i8, i8* %5729, align 1
  %5731 = and i8 %5730, 1
  %5732 = icmp eq i8 %5731, 0
  %5733 = mul i8 %5730, %5730
  %5734 = add i8 %5733, %5730
  %5735 = add i64 %68, 8086687152193715970
  %5736 = add i64 -546906386591677690, %68
  %5737 = add i64 %5736, 8633593538785393660
  %5738 = and i64 %547, -5989390566436824239
  %5739 = or i64 5989390566436824238, %547
  %5740 = sub i64 %5739, 5989390566436824238
  %5741 = or i64 %300, -6399792228544931595
  %5742 = and i64 -6399792228544931595, %300
  %5743 = xor i64 -6399792228544931595, %300
  %5744 = or i64 %5742, %5743
  %5745 = xor i64 %5740, %5741
  %5746 = xor i64 %5745, %5735
  %5747 = xor i64 %5746, %5737
  %5748 = xor i64 %5747, %5744
  %5749 = xor i64 %5748, -4014095957741901751
  %5750 = xor i64 %5749, %5738
  %5751 = add i64 %72, 7583021615520384100
  %5752 = add i64 8615459616928141053, %72
  %5753 = sub i64 %5752, 1032438001407756953
  %5754 = and i64 %241, 8739471947835683322
  %5755 = or i64 -8739471947835683323, %241
  %5756 = sub i64 %5755, -8739471947835683323
  %5757 = or i64 %11, -4269109267190828096
  %5758 = and i64 -4269109267190828096, %11
  %5759 = xor i64 -4269109267190828096, %11
  %5760 = or i64 %5758, %5759
  %5761 = xor i64 %5751, %5757
  %5762 = xor i64 %5761, %5756
  %5763 = xor i64 %5762, %5760
  %5764 = xor i64 %5763, 5104948980204051947
  %5765 = xor i64 %5764, %5754
  %5766 = xor i64 %5765, %5753
  %5767 = mul i64 %5750, %5766
  %5768 = trunc i64 %5767 to i8
  %5769 = mul i8 %5734, %5768
  %5770 = srem i8 %5769, 2
  %5771 = icmp eq i8 %5770, 0
  %5772 = or i1 %5732, %5771
  %5773 = select i1 %5772, i32 984876145, i32 984876144
  %5774 = xor i32 %5773, 1
  store i32 %5774, i32* %4, align 4
  %5775 = call i8** @bf6047435729067610447(i32* %4)
  %5776 = load i8*, i8** %5775, align 8
  indirectbr i8* %5776, [label %loopEnd, label %codeRepl8]

5777:                                             ; preds = %5777, %loopStart
  %.reload102 = load i64, i64* %.reg2mem101, align 8
  store i64 %.reload102, i64* %.reg2mem56, align 8
  %.reload62 = load i64, i64* %.reg2mem56, align 8
  %5778 = trunc i64 %.reload62 to i32
  store i32 %5778, i32* %.reg2mem63, align 4
  %.reload68 = load i32, i32* %.reg2mem63, align 4
  %5779 = urem i32 %.reload68, 80
  %5780 = icmp eq i32 %5779, 0
  %5781 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 60
  %5782 = load i32, i32* %5781, align 4
  %5783 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %5784 = load i32, i32* %5783, align 4
  %5785 = srem i32 %5782, %5784
  %5786 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 42
  %5787 = load i32, i32* %5786, align 4
  %5788 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %5789 = load i32, i32* %5788, align 4
  %5790 = srem i32 %5787, %5789
  %5791 = select i1 %5780, i32 %5785, i32 %5790
  store i32 %5791, i32* %dispatcher, align 4
  %5792 = add i64 %21, -7262682742176473347
  %5793 = and i64 -7262682742176473347, %21
  %5794 = or i64 -7262682742176473347, %21
  %5795 = add i64 %5793, %5794
  %5796 = or i64 %449, -3527941962910319325
  %5797 = xor i64 %449, -1
  %5798 = and i64 %5797, 2398143444089277449
  %5799 = and i64 %449, -2398143444089277450
  %5800 = or i64 %5798, %5799
  %5801 = xor i64 -1275132515537473238, %5800
  %5802 = xor i64 %449, -1
  %5803 = or i64 3527941962910319324, %5802
  %5804 = xor i64 %5803, -1
  %5805 = and i64 %5804, -1
  %5806 = or i64 %5801, %5805
  %5807 = or i64 %201, 2376575033275093967
  %5808 = and i64 2376575033275093967, %201
  %5809 = xor i64 2376575033275093967, %201
  %5810 = or i64 %5808, %5809
  %5811 = xor i64 %5795, %5807
  %5812 = xor i64 %5811, 3144804123359194999
  %5813 = xor i64 %5812, %5796
  %5814 = xor i64 %5813, %5806
  %5815 = xor i64 %5814, %5810
  %5816 = xor i64 %5815, %5792
  %5817 = add i64 %298, 6866725250062059011
  %5818 = sub i64 0, %298
  %5819 = add i64 -6866725250062059011, %5818
  %5820 = sub i64 0, %5819
  %5821 = or i64 %13, 1990156615688158593
  %5822 = and i64 1990156615688158593, %13
  %5823 = xor i64 1990156615688158593, %13
  %5824 = or i64 %5822, %5823
  %5825 = add i64 %304, 2465483321724149674
  %5826 = add i64 7365734771476089639, %304
  %5827 = add i64 %5826, -4900251449751939965
  %5828 = xor i64 %5825, %5824
  %5829 = xor i64 %5828, %5821
  %5830 = xor i64 %5829, -4752013824012220730
  %5831 = xor i64 %5830, %5817
  %5832 = xor i64 %5831, %5820
  %5833 = xor i64 %5832, %5827
  %5834 = mul i64 %5816, %5833
  %5835 = trunc i64 %5834 to i32
  store i32 %5835, i32* %.reg2mem105, align 4
  %5836 = load i8*, i8** %202, align 8
  %5837 = load i8, i8* %5836, align 1
  %5838 = mul i8 %5837, %5837
  %5839 = add i8 %5838, %5837
  %5840 = mul i8 %5839, 3
  %5841 = srem i8 %5840, 2
  %5842 = icmp eq i8 %5841, 0
  %5843 = mul i8 %5837, %5837
  %5844 = add i8 %5843, %5837
  %5845 = srem i8 %5844, 2
  %5846 = icmp eq i8 %5845, 0
  %5847 = and i1 %5842, %5846
  %5848 = select i1 %5847, i32 984876104, i32 984876144
  %5849 = xor i32 %5848, -49980621
  %5850 = or i64 %177, 5563563333683652362
  %5851 = and i64 5563563333683652362, %177
  %5852 = xor i64 5563563333683652362, %177
  %5853 = or i64 %5851, %5852
  %5854 = or i64 %203, 1468831850933206256
  %5855 = and i64 1468831850933206256, %203
  %5856 = xor i64 1468831850933206256, %203
  %5857 = or i64 %5855, %5856
  %5858 = or i64 %62, -4745499235869542912
  %5859 = xor i64 %62, -1
  %5860 = and i64 -4745499235869542912, %5859
  %5861 = add i64 %5860, %62
  %5862 = xor i64 -5698084090045326143, %5857
  %5863 = xor i64 %5862, %5861
  %5864 = xor i64 %5863, %5858
  %5865 = xor i64 %5864, %5853
  %5866 = xor i64 %5865, %5854
  %5867 = xor i64 %5866, %5850
  %5868 = or i64 %456, 2452620427091737751
  %5869 = and i64 2452620427091737751, %456
  %5870 = xor i64 2452620427091737751, %456
  %5871 = or i64 %5869, %5870
  %5872 = and i64 %1154, 4463276414183570160
  %5873 = xor i64 %1154, -1
  %5874 = xor i64 4463276414183570160, %5873
  %5875 = and i64 %5874, 4463276414183570160
  %5876 = add i64 %60, 3376857843732181299
  %5877 = sub i64 0, %60
  %5878 = add i64 -3376857843732181299, %5877
  %5879 = sub i64 0, %5878
  %5880 = xor i64 %5871, %5879
  %5881 = xor i64 %5880, %5876
  %5882 = xor i64 %5881, %5872
  %5883 = xor i64 %5882, %5875
  %5884 = xor i64 %5883, %5868
  %5885 = xor i64 %5884, -2712651606068621621
  %5886 = mul i64 %5867, %5885
  %5887 = trunc i64 %5886 to i32
  %5888 = xor i32 %5849, %5887
  store i32 %5888, i32* %4, align 4
  %5889 = call i8** @bf6047435729067610447(i32* %4)
  %5890 = load i8*, i8** %5889, align 8
  indirectbr i8* %5890, [label %loopEnd, label %5777]

codeRepl9:                                        ; preds = %codeRepl9, %loopStart
  store i64 4070807658626890126, i64* %453, align 8
  %5891 = call i8** @lk8153326119118101986(i64* %453)
  %5892 = load i8*, i8** %5891, align 8
  %5893 = bitcast i8* %5892 to void (i64*, i8*, i32*, i64*, i64*, [65 x i32]*, i32*)*
  call void %5893(i64* %.reg2mem56, i8* %2, i32* %.reg2mem70, i64* %.reg2mem73, i64* %.reg2mem78, [65 x i32]* %lookupTable, i32* %dispatcher)
  %5894 = load i8*, i8** %198, align 8
  %5895 = load i8, i8* %5894, align 1
  %5896 = or i64 %458, -8765338820550414610
  %5897 = and i64 -8765338820550414610, %458
  %5898 = xor i64 -8765338820550414610, %458
  %5899 = or i64 %5897, %5898
  %5900 = add i64 %116, -5503810858411773233
  %5901 = and i64 -5503810858411773233, %116
  %5902 = or i64 -5503810858411773233, %116
  %5903 = add i64 %5901, %5902
  %5904 = xor i64 %5896, -1461962324851472091
  %5905 = xor i64 %5904, %5903
  %5906 = xor i64 %5905, %5899
  %5907 = xor i64 %5906, %5900
  %5908 = or i64 %551, -8902172862657062484
  %5909 = xor i64 %551, -1
  %5910 = and i64 %5909, 3560598638851227434
  %5911 = and i64 %551, -3560598638851227435
  %5912 = or i64 %5910, %5911
  %5913 = xor i64 -5396181609466337658, %5912
  %5914 = xor i64 %551, -1
  %5915 = or i64 8902172862657062483, %5914
  %5916 = xor i64 %5915, -1
  %5917 = and i64 %5916, -1
  %5918 = or i64 %5913, %5917
  %5919 = or i64 %58, 1691499597418331101
  %5920 = and i64 1691499597418331101, %58
  %5921 = xor i64 1691499597418331101, %58
  %5922 = or i64 %5920, %5921
  %5923 = xor i64 %5919, %5908
  %5924 = xor i64 %5923, %5918
  %5925 = xor i64 %5924, 6548673998118169261
  %5926 = xor i64 %5925, %5922
  %5927 = mul i64 %5907, %5926
  %5928 = trunc i64 %5927 to i8
  %5929 = and i8 %5895, %5928
  %5930 = icmp eq i8 %5929, 0
  %5931 = mul i8 %5895, %5895
  %5932 = add i8 %5931, %5895
  %5933 = mul i8 %5932, 3
  %5934 = srem i8 %5933, 2
  %5935 = icmp eq i8 %5934, 0
  %5936 = or i1 %5930, %5935
  %5937 = select i1 %5936, i32 984876143, i32 984876144
  %5938 = or i32 %5937, 31
  %5939 = and i32 %5937, 31
  %5940 = sub i32 %5938, %5939
  store i32 %5940, i32* %4, align 4
  %5941 = call i8** @bf6047435729067610447(i32* %4)
  %5942 = load i8*, i8** %5941, align 8
  indirectbr i8* %5942, [label %loopEnd, label %codeRepl9]

5943:                                             ; preds = %5943, %loopStart
  %5944 = and i64 %11, 3840179864381647900
  %5945 = xor i64 %11, -1
  %5946 = or i64 -3840179864381647901, %5945
  %5947 = xor i64 %5946, -1
  %5948 = and i64 %5947, -1
  %5949 = and i64 %78, -6168667883131274525
  %5950 = or i64 6168667883131274524, %78
  %5951 = sub i64 %5950, 6168667883131274524
  %5952 = xor i64 %5948, %5949
  %5953 = xor i64 %5952, %5951
  %5954 = xor i64 %5953, %5944
  %5955 = xor i64 %5954, 2791006023267870485
  %5956 = add i64 %344, 5347572700000616771
  %5957 = sub i64 0, %344
  %5958 = add i64 -5347572700000616771, %5957
  %5959 = sub i64 0, %5958
  %5960 = or i64 %140, 278758884743819783
  %5961 = and i64 278758884743819783, %140
  %5962 = xor i64 278758884743819783, %140
  %5963 = or i64 %5961, %5962
  %5964 = xor i64 %5956, %5959
  %5965 = xor i64 %5964, %5963
  %5966 = xor i64 %5965, -8288704932071664880
  %5967 = xor i64 %5966, %5960
  %5968 = mul i64 %5955, %5967
  %5969 = sdiv i64 30, %5968
  %5970 = add i64 %183, 7134122094820853508
  %5971 = add i64 -7805134200483749406, %183
  %5972 = sub i64 %5971, 3507487778404948702
  %5973 = or i64 %74, 4990827458070198475
  %5974 = xor i64 %74, -1
  %5975 = and i64 %5974, -4520473120231874963
  %5976 = and i64 %74, 4520473120231874962
  %5977 = or i64 %5975, %5976
  %5978 = xor i64 -8933181761254676826, %5977
  %5979 = xor i64 %74, -1
  %5980 = or i64 -4990827458070198476, %5979
  %5981 = xor i64 %5980, -1
  %5982 = and i64 %5981, -1
  %5983 = or i64 %5978, %5982
  %5984 = xor i64 -3761959272627892039, %5970
  %5985 = xor i64 %5984, %5973
  %5986 = xor i64 %5985, %5983
  %5987 = xor i64 %5986, %5972
  %5988 = add i64 %140, -7068672078895694733
  %5989 = sub i64 0, %140
  %5990 = sub i64 -7068672078895694733, %5989
  %5991 = or i64 %72, -6991168125355868267
  %5992 = xor i64 %72, -1
  %5993 = and i64 %5992, 8032211211852862038
  %5994 = and i64 %72, -8032211211852862039
  %5995 = or i64 %5993, %5994
  %5996 = xor i64 -1044197211849134653, %5995
  %5997 = xor i64 %72, -1
  %5998 = or i64 6991168125355868266, %5997
  %5999 = xor i64 %5998, -1
  %6000 = and i64 %5999, -1
  %6001 = or i64 %5996, %6000
  %6002 = or i64 %553, 2978259679498582625
  %6003 = and i64 2978259679498582625, %553
  %6004 = xor i64 2978259679498582625, %553
  %6005 = or i64 %6003, %6004
  %6006 = xor i64 %5990, %5991
  %6007 = xor i64 %6006, %6002
  %6008 = xor i64 %6007, %6005
  %6009 = xor i64 %6008, %5988
  %6010 = xor i64 %6009, 5214150013916946078
  %6011 = xor i64 %6010, %6001
  %6012 = mul i64 %5987, %6011
  %6013 = mul i64 115, %6012
  %6014 = add i64 -2459869575942963573, 2459869575942963584
  %6015 = sdiv i64 57, 105
  %6016 = add i64 4, 107
  %6017 = mul i64 34, 19
  %6018 = and i64 %15, 545267209558848083
  %6019 = or i64 -545267209558848084, %15
  %6020 = sub i64 %6019, -545267209558848084
  %6021 = and i64 %7, -1469910713771145894
  %6022 = or i64 1469910713771145893, %7
  %6023 = sub i64 %6022, 1469910713771145893
  %6024 = and i64 %191, -377359349577363005
  %6025 = or i64 377359349577363004, %191
  %6026 = sub i64 %6025, 377359349577363004
  %6027 = xor i64 %6021, %6026
  %6028 = xor i64 %6027, %6018
  %6029 = xor i64 %6028, 2217915316185967865
  %6030 = xor i64 %6029, %6020
  %6031 = xor i64 %6030, %6024
  %6032 = xor i64 %6031, %6023
  %6033 = add i64 %551, 8419695236942890334
  %6034 = add i64 4745165179392128062, %551
  %6035 = add i64 %6034, 3674530057550762272
  %6036 = add i64 %5, -1522776304589965637
  %6037 = xor i64 -1522776304589965637, %5
  %6038 = and i64 -1522776304589965637, %5
  %6039 = mul i64 2, %6038
  %6040 = add i64 %6037, %6039
  %6041 = xor i64 %6036, %6033
  %6042 = xor i64 %6041, -5595112672836934195
  %6043 = xor i64 %6042, %6040
  %6044 = xor i64 %6043, %6035
  %6045 = mul i64 %6032, %6044
  %6046 = add i64 81, %6045
  %6047 = sdiv i64 112, 113
  %6048 = add i64 %578, -5251674857895925613
  %6049 = sub i64 0, %578
  %6050 = sub i64 -5251674857895925613, %6049
  %6051 = add i64 %203, 766527984137831542
  %6052 = sub i64 0, %203
  %6053 = add i64 -766527984137831542, %6052
  %6054 = sub i64 0, %6053
  %6055 = add i64 %66, 993200229062579248
  %6056 = sub i64 0, %66
  %6057 = add i64 -993200229062579248, %6056
  %6058 = sub i64 0, %6057
  %6059 = xor i64 %6058, %6055
  %6060 = xor i64 %6059, %6048
  %6061 = xor i64 %6060, %6050
  %6062 = xor i64 %6061, -3850681556942115827
  %6063 = xor i64 %6062, %6051
  %6064 = xor i64 %6063, %6054
  %6065 = or i64 %189, -1752568132377804124
  %6066 = xor i64 %189, -1
  %6067 = and i64 -1752568132377804124, %6066
  %6068 = add i64 %6067, %189
  %6069 = or i64 %383, 4647864135310610850
  %6070 = and i64 4647864135310610850, %383
  %6071 = xor i64 4647864135310610850, %383
  %6072 = or i64 %6070, %6071
  %6073 = or i64 %70, 7385245781839002383
  %6074 = and i64 7385245781839002383, %70
  %6075 = xor i64 7385245781839002383, %70
  %6076 = or i64 %6074, %6075
  %6077 = xor i64 -2348383449221299823, %6072
  %6078 = xor i64 %6077, %6069
  %6079 = xor i64 %6078, %6076
  %6080 = xor i64 %6079, %6065
  %6081 = xor i64 %6080, %6068
  %6082 = xor i64 %6081, %6073
  %6083 = mul i64 %6064, %6082
  %6084 = sdiv i64 %6083, 26
  %6085 = or i64 %454, -1672620763440734591
  %6086 = xor i64 %454, -1
  %6087 = and i64 -1672620763440734591, %6086
  %6088 = add i64 %6087, %454
  %6089 = add i64 %80, 4417591248204961281
  %6090 = add i64 2333897585191543297, %80
  %6091 = sub i64 %6090, -2083693663013417984
  %6092 = and i64 %418, -4416888332929744893
  %6093 = xor i64 %418, -1
  %6094 = xor i64 -4416888332929744893, %6093
  %6095 = and i64 %6094, -4416888332929744893
  %6096 = xor i64 %6092, %6089
  %6097 = xor i64 %6096, %6088
  %6098 = xor i64 %6097, -7043341416366635017
  %6099 = xor i64 %6098, %6085
  %6100 = xor i64 %6099, %6095
  %6101 = xor i64 %6100, %6091
  %6102 = or i64 %296, 7061243898928885319
  %6103 = xor i64 %296, -1
  %6104 = and i64 %6103, 7814811565458547429
  %6105 = and i64 %296, -7814811565458547430
  %6106 = or i64 %6104, %6105
  %6107 = xor i64 976536059045842082, %6106
  %6108 = xor i64 %296, -1
  %6109 = or i64 -7061243898928885320, %6108
  %6110 = xor i64 %6109, -1
  %6111 = and i64 %6110, -1
  %6112 = or i64 %6107, %6111
  %6113 = or i64 %140, -8384384815210748273
  %6114 = xor i64 %140, -1
  %6115 = and i64 -8384384815210748273, %6114
  %6116 = add i64 %6115, %140
  %6117 = xor i64 %6113, %6112
  %6118 = xor i64 %6117, %6116
  %6119 = xor i64 %6118, %6102
  %6120 = xor i64 %6119, 1609686881697738742
  %6121 = mul i64 %6101, %6120
  %6122 = sdiv i64 %5969, %6121
  %6123 = sub i64 %6084, 21
  %6124 = sdiv i64 %6017, 75
  %6125 = mul i64 %6015, 4
  %6126 = mul i64 %6014, 122
  %6127 = sdiv i64 %6014, 120
  %6128 = add i64 %6084, 7964126120640134930
  %6129 = sub i64 %6128, 110
  %6130 = sub i64 %6129, 7964126120640134930
  %6131 = sub i64 %6015, 75
  %6132 = trunc i64 %6122 to i32
  %6133 = add i32 0, %6132
  %6134 = trunc i64 %6123 to i32
  %6135 = add i32 %6133, %6134
  %6136 = trunc i64 %6124 to i32
  %6137 = or i64 %383, 1481760587287430519
  %6138 = xor i64 %383, -1
  %6139 = and i64 1481760587287430519, %6138
  %6140 = add i64 %6139, %383
  %6141 = or i64 %19, -2474223991863497755
  %6142 = xor i64 %19, -1
  %6143 = and i64 %6142, 913393970583064610
  %6144 = and i64 %19, -913393970583064611
  %6145 = or i64 %6143, %6144
  %6146 = xor i64 -3385356060315583545, %6145
  %6147 = xor i64 %19, -1
  %6148 = or i64 2474223991863497754, %6147
  %6149 = xor i64 %6148, -1
  %6150 = and i64 %6149, -1
  %6151 = or i64 %6146, %6150
  %6152 = xor i64 %6151, %6141
  %6153 = xor i64 %6152, -6263724245957960093
  %6154 = xor i64 %6153, %6137
  %6155 = xor i64 %6154, %6140
  %6156 = add i64 %549, -8609083358654071199
  %6157 = xor i64 -8609083358654071199, %549
  %6158 = and i64 -8609083358654071199, %549
  %6159 = mul i64 2, %6158
  %6160 = add i64 %6157, %6159
  %6161 = and i64 %84, 207648047477305431
  %6162 = or i64 -207648047477305432, %84
  %6163 = sub i64 %6162, -207648047477305432
  %6164 = xor i64 %6156, %6160
  %6165 = xor i64 %6164, %6161
  %6166 = xor i64 %6165, -4021454946928821301
  %6167 = xor i64 %6166, %6163
  %6168 = mul i64 %6155, %6167
  %6169 = trunc i64 %6168 to i32
  %6170 = sub i32 %6135, %6169
  %6171 = add i32 %6170, %6136
  %6172 = add i32 %6171, -1329616511
  %6173 = trunc i64 %6125 to i32
  %6174 = add i32 %6172, %6173
  %6175 = trunc i64 %6126 to i32
  %6176 = add i32 %6174, %6175
  %6177 = trunc i64 %6127 to i32
  %6178 = add i32 %6176, 1119317948
  %6179 = add i32 %6178, %6177
  %6180 = sub i32 %6179, 1119317948
  %6181 = trunc i64 %6130 to i32
  %6182 = add i32 %6180, %6181
  %6183 = trunc i64 %6131 to i32
  %6184 = add i32 %6182, %6183
  %6185 = xor i32 %6184, -1
  %6186 = or i32 %6185, -2
  %6187 = and i64 %381, -2404796367862889176
  %6188 = xor i64 %381, -1
  %6189 = xor i64 -2404796367862889176, %6188
  %6190 = and i64 %6189, -2404796367862889176
  %6191 = sext i32 %dispatcher1 to i64
  %6192 = and i64 %6191, -508232068017473021
  %6193 = xor i64 %6191, -1
  %6194 = xor i64 -508232068017473021, %6193
  %6195 = and i64 %6194, -508232068017473021
  %6196 = xor i64 854217510746778483, %6195
  %6197 = xor i64 %6196, %6190
  %6198 = xor i64 %6197, %6187
  %6199 = xor i64 %6198, %6192
  %6200 = or i64 %19, -8229739376282761629
  %6201 = xor i64 %19, -1
  %6202 = and i64 %6201, 851790076723381607
  %6203 = and i64 %19, -851790076723381608
  %6204 = or i64 %6202, %6203
  %6205 = xor i64 -8784203813044894972, %6204
  %6206 = xor i64 %19, -1
  %6207 = or i64 8229739376282761628, %6206
  %6208 = xor i64 %6207, -1
  %6209 = and i64 %6208, -1
  %6210 = or i64 %6205, %6209
  %6211 = and i64 %72, -6171459716727111349
  %6212 = or i64 6171459716727111348, %72
  %6213 = sub i64 %6212, 6171459716727111348
  %6214 = add i64 %302, 2664481630625835977
  %6215 = xor i64 2664481630625835977, %302
  %6216 = and i64 2664481630625835977, %302
  %6217 = mul i64 2, %6216
  %6218 = add i64 %6215, %6217
  %6219 = xor i64 %6200, %6210
  %6220 = xor i64 %6219, %6218
  %6221 = xor i64 %6220, %6214
  %6222 = xor i64 %6221, %6213
  %6223 = xor i64 %6222, 1479666671680015941
  %6224 = xor i64 %6223, %6211
  %6225 = mul i64 %6199, %6224
  %6226 = trunc i64 %6225 to i32
  %6227 = xor i32 %6186, %6226
  %6228 = and i32 %6227, -1
  %6229 = icmp eq i32 %6228, 0
  %6230 = mul i32 %6184, %6184
  %6231 = add i32 %6230, %6184
  %6232 = mul i32 %6231, 3
  %6233 = srem i32 %6232, 2
  %6234 = icmp eq i32 %6233, 0
  %6235 = or i1 %6229, %6234
  %6236 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 23
  %6237 = load i32, i32* %6236, align 4
  %6238 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 21
  %6239 = load i32, i32* %6238, align 4
  %6240 = add i32 %6237, %6239
  %6241 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 24
  %6242 = load i32, i32* %6241, align 4
  %6243 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 22
  %6244 = load i32, i32* %6243, align 4
  %6245 = add i32 %6242, %6244
  %6246 = select i1 %6235, i32 %6240, i32 %6245
  store i32 %6246, i32* %dispatcher, align 4
  store i64 0, i64* %.reg2mem101, align 8
  %6247 = load i8*, i8** %141, align 8
  %6248 = load i8, i8* %6247, align 1
  %6249 = mul i8 %6248, 2
  %6250 = mul i8 %6248, 2
  %6251 = and i8 2, %6250
  %6252 = or i8 2, %6250
  %6253 = add i8 %6251, %6252
  %6254 = mul i8 %6249, %6253
  %6255 = srem i8 %6254, 4
  %6256 = icmp eq i8 %6255, 0
  %6257 = mul i8 %6248, %6248
  %6258 = mul i8 %6257, %6248
  %6259 = sub i8 0, %6258
  %6260 = sub i8 0, %6248
  %6261 = add i8 %6259, %6260
  %6262 = sub i8 0, %6261
  %6263 = srem i8 %6262, 2
  %6264 = icmp eq i8 %6263, 0
  %6265 = xor i1 %6256, true
  %6266 = or i1 %6265, %6264
  %6267 = xor i1 %6256, true
  %6268 = sub i1 %6266, %6267
  %6269 = select i1 %6268, i32 984876136, i32 984876144
  %6270 = xor i32 %6269, 24
  store i32 %6270, i32* %4, align 4
  %6271 = call i8** @bf6047435729067610447(i32* %4)
  %6272 = load i8*, i8** %6271, align 8
  indirectbr i8* %6272, [label %loopEnd, label %5943]

6273:                                             ; preds = %6273, %loopStart
  %.reload79 = load i64, i64* %.reg2mem78, align 8
  %6274 = and i64 %381, 2063954199622346501
  %6275 = xor i64 %381, -1
  %6276 = or i64 -2063954199622346502, %6275
  %6277 = xor i64 %6276, -1
  %6278 = and i64 %6277, -1
  %6279 = add i64 %197, -3194035810381998264
  %6280 = and i64 -3194035810381998264, %197
  %6281 = or i64 -3194035810381998264, %197
  %6282 = add i64 %6280, %6281
  %6283 = xor i64 %6274, %6278
  %6284 = xor i64 %6283, 2244037840566987719
  %6285 = xor i64 %6284, %6279
  %6286 = xor i64 %6285, %6282
  %6287 = and i64 %116, -5068497920523241825
  %6288 = or i64 5068497920523241824, %116
  %6289 = sub i64 %6288, 5068497920523241824
  %6290 = and i64 %116, 3666690090078048593
  %6291 = xor i64 %116, -1
  %6292 = or i64 -3666690090078048594, %6291
  %6293 = xor i64 %6292, -1
  %6294 = and i64 %6293, -1
  %6295 = add i64 %68, 2650267182577585197
  %6296 = add i64 -978287988045493292, %68
  %6297 = sub i64 %6296, -3628555170623078489
  %6298 = xor i64 %6295, %6287
  %6299 = xor i64 %6298, %6290
  %6300 = xor i64 %6299, %6294
  %6301 = xor i64 %6300, -4935402219397886994
  %6302 = xor i64 %6301, %6289
  %6303 = xor i64 %6302, %6297
  %6304 = mul i64 %6286, %6303
  %6305 = srem i64 %.reload79, %6304
  store i64 %6305, i64* %.reg2mem81, align 8
  %.reload20 = load i64, i64* %.reg2mem18, align 8
  %6306 = srem i64 %.reload20, 2
  %6307 = icmp eq i64 %6306, 0
  %6308 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 45
  %6309 = load i32, i32* %6308, align 4
  %6310 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %6311 = load i32, i32* %6310, align 4
  %6312 = srem i32 %6309, %6311
  %6313 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 60
  %6314 = load i32, i32* %6313, align 4
  %6315 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  %6316 = load i32, i32* %6315, align 4
  %6317 = add i32 %6314, 842865472
  %6318 = sub i32 %6317, %6316
  %6319 = sub i32 %6318, 842865472
  %6320 = select i1 %6307, i32 %6312, i32 %6319
  store i32 %6320, i32* %dispatcher, align 4
  %6321 = load i8*, i8** %206, align 8
  %6322 = load i8, i8* %6321, align 1
  %6323 = and i8 %6322, 1
  %6324 = icmp eq i8 %6323, 0
  %6325 = mul i8 %6322, %6322
  %6326 = add i8 %6325, %6322
  %6327 = mul i8 %6326, 3
  %6328 = srem i8 %6327, 2
  %6329 = icmp eq i8 %6328, 0
  %6330 = or i1 %6324, %6329
  %6331 = add i64 %243, -8102234698468315841
  %6332 = add i64 8751899228305539293, %243
  %6333 = add i64 %6332, 1592610146935696482
  %6334 = or i64 %189, -6951449915034865797
  %6335 = and i64 -6951449915034865797, %189
  %6336 = xor i64 -6951449915034865797, %189
  %6337 = or i64 %6335, %6336
  %6338 = xor i64 %6333, %6334
  %6339 = xor i64 %6338, %6337
  %6340 = xor i64 %6339, %6331
  %6341 = xor i64 %6340, 7040897527156013277
  %6342 = and i64 %381, 3975013841151893231
  %6343 = or i64 -3975013841151893232, %381
  %6344 = sub i64 %6343, -3975013841151893232
  %6345 = or i64 %62, -5256496464591711020
  %6346 = and i64 -5256496464591711020, %62
  %6347 = xor i64 -5256496464591711020, %62
  %6348 = or i64 %6346, %6347
  %6349 = xor i64 %6348, -2851276127566063824
  %6350 = xor i64 %6349, %6344
  %6351 = xor i64 %6350, %6342
  %6352 = xor i64 %6351, %6345
  %6353 = mul i64 %6341, %6352
  %6354 = trunc i64 %6353 to i32
  %6355 = select i1 %6330, i32 984876135, i32 %6354
  %6356 = xor i32 %6355, 23
  store i32 %6356, i32* %4, align 4
  %6357 = call i8** @bf6047435729067610447(i32* %4)
  %6358 = load i8*, i8** %6357, align 8
  indirectbr i8* %6358, [label %loopEnd, label %6273]

6359:                                             ; preds = %6359, %loopStart
  %6360 = or i64 %177, -2822720349892083781
  %6361 = xor i64 %177, -1
  %6362 = and i64 -2822720349892083781, %6361
  %6363 = add i64 %6362, %177
  %6364 = add i64 %506, -5138947961595608703
  %6365 = xor i64 -5138947961595608703, %506
  %6366 = and i64 -5138947961595608703, %506
  %6367 = mul i64 2, %6366
  %6368 = add i64 %6365, %6367
  %6369 = xor i64 %6364, %6360
  %6370 = xor i64 %6369, -7136790945471957803
  %6371 = xor i64 %6370, %6368
  %6372 = xor i64 %6371, %6363
  %6373 = add i64 %290, 7196487492028052111
  %6374 = add i64 7681132798044804189, %290
  %6375 = add i64 %6374, -484645306016752078
  %6376 = add i64 %185, 6360040217201800410
  %6377 = sub i64 0, %185
  %6378 = add i64 -6360040217201800410, %6377
  %6379 = sub i64 0, %6378
  %6380 = xor i64 -6733682936664890604, %6373
  %6381 = xor i64 %6380, %6379
  %6382 = xor i64 %6381, %6376
  %6383 = xor i64 %6382, %6375
  %6384 = mul i64 %6372, %6383
  %6385 = add i64 49, %6384
  %.reload83 = load i64, i64* %.reg2mem81, align 8
  %6386 = add i64 %420, -8507866271722674953
  %6387 = sub i64 0, %420
  %6388 = add i64 8507866271722674953, %6387
  %6389 = sub i64 0, %6388
  %6390 = and i64 %294, -795370140236616384
  %6391 = xor i64 %294, -1
  %6392 = xor i64 -795370140236616384, %6391
  %6393 = and i64 %6392, -795370140236616384
  %6394 = xor i64 -8086632850813640083, %6389
  %6395 = xor i64 %6394, %6393
  %6396 = xor i64 %6395, %6390
  %6397 = xor i64 %6396, %6386
  %6398 = or i64 %173, 5951470066561518000
  %6399 = and i64 5951470066561518000, %173
  %6400 = xor i64 5951470066561518000, %173
  %6401 = or i64 %6399, %6400
  %6402 = or i64 %584, -5396035152429457346
  %6403 = xor i64 %584, -1
  %6404 = and i64 %6403, -4495435289280068179
  %6405 = and i64 %584, 4495435289280068178
  %6406 = or i64 %6404, %6405
  %6407 = xor i64 8394832791939786131, %6406
  %6408 = xor i64 %584, -1
  %6409 = or i64 5396035152429457345, %6408
  %6410 = xor i64 %6409, -1
  %6411 = and i64 %6410, -1
  %6412 = or i64 %6407, %6411
  %6413 = xor i64 %6412, 0
  %6414 = xor i64 %6413, %6402
  %6415 = xor i64 %6414, %6401
  %6416 = xor i64 %6415, %6398
  %6417 = mul i64 %6397, %6416
  %6418 = icmp eq i64 %.reload83, %6417
  store i1 %6418, i1* %.reg2mem84, align 1
  %6419 = add i64 %13, -4847854273526602940
  %6420 = add i64 -4422926870746453064, %13
  %6421 = add i64 %6420, -424927402780149876
  %6422 = add i64 %195, 1699628904591951281
  %6423 = add i64 -4111225699974208993, %195
  %6424 = add i64 %6423, 5810854604566160274
  %6425 = or i64 %17, 4355072687125512079
  %6426 = and i64 4355072687125512079, %17
  %6427 = xor i64 4355072687125512079, %17
  %6428 = or i64 %6426, %6427
  %6429 = xor i64 %6428, %6422
  %6430 = xor i64 %6429, %6425
  %6431 = xor i64 %6430, %6419
  %6432 = xor i64 %6431, 3484259010770323815
  %6433 = xor i64 %6432, %6424
  %6434 = xor i64 %6433, %6421
  %6435 = and i64 %177, 2021654759274403050
  %6436 = or i64 -2021654759274403051, %177
  %6437 = sub i64 %6436, -2021654759274403051
  %6438 = and i64 %191, -8440039746529507333
  %6439 = or i64 8440039746529507332, %191
  %6440 = sub i64 %6439, 8440039746529507332
  %6441 = and i64 %17, 3903401614742502671
  %6442 = or i64 -3903401614742502672, %17
  %6443 = sub i64 %6442, -3903401614742502672
  %6444 = xor i64 -6602774480024716496, %6441
  %6445 = xor i64 %6444, %6438
  %6446 = xor i64 %6445, %6440
  %6447 = xor i64 %6446, %6443
  %6448 = xor i64 %6447, %6435
  %6449 = xor i64 %6448, %6437
  %6450 = mul i64 %6434, %6449
  %6451 = mul i64 %6450, 86
  %6452 = add i64 %3, 3550998054370226488
  %6453 = and i64 3550998054370226488, %3
  %6454 = or i64 3550998054370226488, %3
  %6455 = add i64 %6453, %6454
  %6456 = and i64 %418, 1708115986775196566
  %6457 = xor i64 %418, -1
  %6458 = or i64 -1708115986775196567, %6457
  %6459 = xor i64 %6458, -1
  %6460 = and i64 %6459, -1
  %6461 = xor i64 %6460, -3753191545105732085
  %6462 = xor i64 %6461, %6452
  %6463 = xor i64 %6462, %6456
  %6464 = xor i64 %6463, %6455
  %6465 = and i64 %179, -5311087793711133311
  %6466 = or i64 5311087793711133310, %179
  %6467 = sub i64 %6466, 5311087793711133310
  %6468 = add i64 %580, 2539409572006936215
  %6469 = add i64 -7803952400556794316, %580
  %6470 = add i64 %6469, -8103382101145821085
  %6471 = add i64 %420, 2247863507680278423
  %6472 = sub i64 0, %420
  %6473 = add i64 -2247863507680278423, %6472
  %6474 = sub i64 0, %6473
  %6475 = xor i64 %6465, %6474
  %6476 = xor i64 %6475, %6470
  %6477 = xor i64 %6476, %6471
  %6478 = xor i64 %6477, -7794909173140310805
  %6479 = xor i64 %6478, %6467
  %6480 = xor i64 %6479, %6468
  %6481 = mul i64 %6464, %6480
  %6482 = sdiv i64 %6481, 28
  %6483 = sdiv i64 70, 94
  %6484 = sub i64 103, 117
  %.reload26 = load i64, i64* %.reg2mem25, align 8
  %6485 = srem i64 %.reload26, 2
  %6486 = or i64 %179, 2570467708551526128
  %6487 = xor i64 %179, -1
  %6488 = and i64 %6487, 2380345686859168384
  %6489 = and i64 %179, -2380345686859168385
  %6490 = or i64 %6488, %6489
  %6491 = xor i64 190432155947289712, %6490
  %6492 = xor i64 %179, -1
  %6493 = or i64 -2570467708551526129, %6492
  %6494 = xor i64 %6493, -1
  %6495 = and i64 %6494, -1
  %6496 = or i64 %6491, %6495
  %6497 = add i64 %3, 8472225466130230624
  %6498 = sub i64 0, %3
  %6499 = add i64 -8472225466130230624, %6498
  %6500 = sub i64 0, %6499
  %6501 = xor i64 %6500, %6496
  %6502 = xor i64 %6501, %6486
  %6503 = xor i64 %6502, -8716384332486856443
  %6504 = xor i64 %6503, %6497
  %6505 = or i64 %458, -4750189210214963346
  %6506 = and i64 -4750189210214963346, %458
  %6507 = xor i64 -4750189210214963346, %458
  %6508 = or i64 %6506, %6507
  %6509 = or i64 %451, 7557853078840645071
  %6510 = and i64 7557853078840645071, %451
  %6511 = xor i64 7557853078840645071, %451
  %6512 = or i64 %6510, %6511
  %6513 = xor i64 0, %6509
  %6514 = xor i64 %6513, %6505
  %6515 = xor i64 %6514, %6508
  %6516 = xor i64 %6515, %6512
  %6517 = mul i64 %6504, %6516
  %6518 = icmp eq i64 %6485, %6517
  %.reload67 = load i32, i32* %.reg2mem63, align 4
  %6519 = mul i32 %.reload67, 2
  %.reload66 = load i32, i32* %.reg2mem63, align 4
  %6520 = mul i32 %.reload66, 2
  %6521 = and i64 %116, 6705790874046716202
  %6522 = xor i64 %116, -1
  %6523 = xor i64 6705790874046716202, %6522
  %6524 = and i64 %6523, 6705790874046716202
  %6525 = or i64 %5, 2103041538276954002
  %6526 = xor i64 %5, -1
  %6527 = and i64 %6526, -71390758359415745
  %6528 = and i64 %5, 71390758359415744
  %6529 = or i64 %6527, %6528
  %6530 = xor i64 -2148815872844739667, %6529
  %6531 = xor i64 %5, -1
  %6532 = or i64 -2103041538276954003, %6531
  %6533 = xor i64 %6532, -1
  %6534 = and i64 %6533, -1
  %6535 = or i64 %6530, %6534
  %6536 = and i64 %245, 7447187295014731271
  %6537 = or i64 -7447187295014731272, %245
  %6538 = sub i64 %6537, -7447187295014731272
  %6539 = xor i64 5234282500701976867, %6535
  %6540 = xor i64 %6539, %6524
  %6541 = xor i64 %6540, %6525
  %6542 = xor i64 %6541, %6521
  %6543 = xor i64 %6542, %6538
  %6544 = xor i64 %6543, %6536
  %6545 = and i64 %451, -781162235847344874
  %6546 = or i64 781162235847344873, %451
  %6547 = sub i64 %6546, 781162235847344873
  %6548 = or i64 %203, 8434984029603764495
  %6549 = xor i64 %203, -1
  %6550 = and i64 8434984029603764495, %6549
  %6551 = add i64 %6550, %203
  %6552 = and i64 %82, 7514087928718159434
  %6553 = xor i64 %82, -1
  %6554 = xor i64 7514087928718159434, %6553
  %6555 = and i64 %6554, 7514087928718159434
  %6556 = xor i64 %6551, %6552
  %6557 = xor i64 %6556, %6545
  %6558 = xor i64 %6557, %6548
  %6559 = xor i64 %6558, -7699571244696929002
  %6560 = xor i64 %6559, %6555
  %6561 = xor i64 %6560, %6547
  %6562 = mul i64 %6544, %6561
  %6563 = trunc i64 %6562 to i32
  %6564 = add i32 %6563, %6520
  %6565 = mul i32 %6519, %6564
  %6566 = srem i32 %6565, 4
  %6567 = icmp eq i32 %6566, 0
  %.reload65 = load i32, i32* %.reg2mem63, align 4
  %6568 = mul i32 %.reload65, %.reload65
  %.reload64 = load i32, i32* %.reg2mem63, align 4
  %6569 = add i32 %6568, %.reload64
  %6570 = srem i32 %6569, 2
  %6571 = icmp eq i32 %6570, 0
  %6572 = or i1 %6567, %6571
  store i1 %6572, i1* %.reg2mem86, align 1
  %6573 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 46
  %6574 = load i32, i32* %6573, align 4
  %6575 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %6576 = load i32, i32* %6575, align 4
  %6577 = srem i32 %6574, %6576
  %6578 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 55
  %6579 = load i32, i32* %6578, align 4
  %6580 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 11
  %6581 = load i32, i32* %6580, align 4
  %6582 = add i32 %6579, -506458234
  %6583 = sub i32 %6582, %6581
  %6584 = sub i32 %6583, -506458234
  %.reload88 = load i1, i1* %.reg2mem86, align 1
  %6585 = select i1 %.reload88, i32 %6577, i32 %6584
  store i32 %6585, i32* %dispatcher, align 4
  %6586 = load i8*, i8** %67, align 8
  %6587 = load i8, i8* %6586, align 1
  %6588 = mul i8 %6587, %6587
  %6589 = add i8 %6588, %6587
  %6590 = mul i8 %6589, 3
  %6591 = srem i8 %6590, 2
  %6592 = icmp eq i8 %6591, 0
  %6593 = mul i8 %6587, %6587
  %6594 = xor i8 %6593, %6587
  %6595 = and i8 %6593, %6587
  %6596 = mul i8 2, %6595
  %6597 = add i8 %6594, %6596
  %6598 = mul i8 39, %6597
  %6599 = add i8 23, %6598
  %6600 = or i64 %447, 5663929290880646160
  %6601 = xor i64 %447, -1
  %6602 = and i64 %6601, 4178777713485817849
  %6603 = and i64 %447, -4178777713485817850
  %6604 = or i64 %6602, %6603
  %6605 = xor i64 8603090930728885225, %6604
  %6606 = xor i64 %447, -1
  %6607 = or i64 -5663929290880646161, %6606
  %6608 = xor i64 %6607, -1
  %6609 = and i64 %6608, -1
  %6610 = or i64 %6605, %6609
  %6611 = and i64 %420, 119855278881873958
  %6612 = or i64 -119855278881873959, %420
  %6613 = sub i64 %6612, -119855278881873959
  %6614 = or i64 %60, -3980749712574708786
  %6615 = xor i64 %60, -1
  %6616 = and i64 -3980749712574708786, %6615
  %6617 = add i64 %6616, %60
  %6618 = xor i64 %6613, %6611
  %6619 = xor i64 %6618, %6614
  %6620 = xor i64 %6619, %6617
  %6621 = xor i64 %6620, 9089469711514886457
  %6622 = xor i64 %6621, %6610
  %6623 = xor i64 %6622, %6600
  %6624 = and i64 %195, 7902211748275232803
  %6625 = xor i64 %195, -1
  %6626 = xor i64 7902211748275232803, %6625
  %6627 = and i64 %6626, 7902211748275232803
  %6628 = add i64 %189, -8089453694167106787
  %6629 = and i64 -8089453694167106787, %189
  %6630 = or i64 -8089453694167106787, %189
  %6631 = add i64 %6629, %6630
  %6632 = and i64 %3, 56085332205150162
  %6633 = or i64 -56085332205150163, %3
  %6634 = sub i64 %6633, -56085332205150163
  %6635 = xor i64 -4042276818368724913, %6631
  %6636 = xor i64 %6635, %6634
  %6637 = xor i64 %6636, %6628
  %6638 = xor i64 %6637, %6627
  %6639 = xor i64 %6638, %6632
  %6640 = xor i64 %6639, %6624
  %6641 = mul i64 %6623, %6640
  %6642 = trunc i64 %6641 to i8
  %6643 = mul i8 %6642, %6599
  %6644 = add i8 111, %6643
  %6645 = srem i8 %6644, 2
  %6646 = icmp eq i8 %6645, 0
  %6647 = and i1 %6592, %6646
  %6648 = or i64 %3, -7060306365667375841
  %6649 = xor i64 %3, -1
  %6650 = and i64 %6649, 1543003682384214690
  %6651 = and i64 %3, -1543003682384214691
  %6652 = or i64 %6650, %6651
  %6653 = xor i64 -8400029791292031043, %6652
  %6654 = xor i64 %3, -1
  %6655 = or i64 7060306365667375840, %6654
  %6656 = xor i64 %6655, -1
  %6657 = and i64 %6656, -1
  %6658 = or i64 %6653, %6657
  %6659 = add i64 %62, 7860241516109589464
  %6660 = sub i64 0, %62
  %6661 = add i64 -7860241516109589464, %6660
  %6662 = sub i64 0, %6661
  %6663 = xor i64 %6662, %6648
  %6664 = xor i64 %6663, %6659
  %6665 = xor i64 %6664, %6658
  %6666 = xor i64 %6665, 523466427892086303
  %6667 = or i64 %241, 5570957269459644069
  %6668 = xor i64 %241, -1
  %6669 = and i64 5570957269459644069, %6668
  %6670 = add i64 %6669, %241
  %6671 = or i64 %383, -7157781292283423917
  %6672 = xor i64 %383, -1
  %6673 = and i64 %6672, -997631737105393741
  %6674 = and i64 %383, 997631737105393740
  %6675 = or i64 %6673, %6674
  %6676 = xor i64 7966235444602979552, %6675
  %6677 = xor i64 %383, -1
  %6678 = or i64 7157781292283423916, %6677
  %6679 = xor i64 %6678, -1
  %6680 = and i64 %6679, -1
  %6681 = or i64 %6676, %6680
  %6682 = xor i64 %6681, %6671
  %6683 = xor i64 %6682, %6670
  %6684 = xor i64 %6683, %6667
  %6685 = xor i64 %6684, 8265511742361177488
  %6686 = mul i64 %6666, %6685
  %6687 = trunc i64 %6686 to i32
  %6688 = select i1 %6647, i32 984876109, i32 %6687
  %6689 = add i64 %584, 7203113070764314147
  %6690 = sub i64 0, %584
  %6691 = add i64 -7203113070764314147, %6690
  %6692 = sub i64 0, %6691
  %6693 = add i64 %447, 1206452381481315257
  %6694 = add i64 5962457374696540386, %447
  %6695 = sub i64 %6694, 4756004993215225129
  %6696 = add i64 %189, 2022173378240449890
  %6697 = xor i64 2022173378240449890, %189
  %6698 = and i64 2022173378240449890, %189
  %6699 = mul i64 2, %6698
  %6700 = add i64 %6697, %6699
  %6701 = xor i64 %6695, %6696
  %6702 = xor i64 %6701, -3606382251678819543
  %6703 = xor i64 %6702, %6692
  %6704 = xor i64 %6703, %6693
  %6705 = xor i64 %6704, %6689
  %6706 = xor i64 %6705, %6700
  %6707 = add i64 %76, 2391156799816926081
  %6708 = xor i64 2391156799816926081, %76
  %6709 = and i64 2391156799816926081, %76
  %6710 = mul i64 2, %6709
  %6711 = add i64 %6708, %6710
  %6712 = add i64 %9, -5642207701562795103
  %6713 = sub i64 0, %9
  %6714 = add i64 5642207701562795103, %6713
  %6715 = sub i64 0, %6714
  %6716 = xor i64 %6712, %6711
  %6717 = xor i64 %6716, %6707
  %6718 = xor i64 %6717, 8834339504612651765
  %6719 = xor i64 %6718, %6715
  %6720 = mul i64 %6706, %6719
  %6721 = trunc i64 %6720 to i32
  %6722 = xor i32 %6688, %6721
  store i32 %6722, i32* %4, align 4
  %6723 = call i8** @bf6047435729067610447(i32* %4)
  %6724 = load i8*, i8** %6723, align 8
  indirectbr i8* %6724, [label %loopEnd, label %6359]

6725:                                             ; preds = %6725, %loopStart
  %6726 = or i64 %300, 256964081095333347
  %6727 = xor i64 %300, -1
  %6728 = and i64 %6727, 296320051302768237
  %6729 = and i64 %300, -296320051302768238
  %6730 = or i64 %6728, %6729
  %6731 = xor i64 543905295873788814, %6730
  %6732 = xor i64 %300, -1
  %6733 = or i64 -256964081095333348, %6732
  %6734 = xor i64 %6733, -1
  %6735 = and i64 %6734, -1
  %6736 = or i64 %6731, %6735
  %6737 = and i64 %183, 7083216921964467429
  %6738 = or i64 -7083216921964467430, %183
  %6739 = sub i64 %6738, -7083216921964467430
  %6740 = or i64 %381, 6976289013732622344
  %6741 = xor i64 %381, -1
  %6742 = and i64 %6741, -8266382299721491283
  %6743 = and i64 %381, 8266382299721491282
  %6744 = or i64 %6742, %6743
  %6745 = xor i64 -1326546497768498011, %6744
  %6746 = xor i64 %381, -1
  %6747 = or i64 -6976289013732622345, %6746
  %6748 = xor i64 %6747, -1
  %6749 = and i64 %6748, -1
  %6750 = or i64 %6745, %6749
  %6751 = xor i64 %6750, 8118819390820305465
  %6752 = xor i64 %6751, %6740
  %6753 = xor i64 %6752, %6737
  %6754 = xor i64 %6753, %6736
  %6755 = xor i64 %6754, %6739
  %6756 = xor i64 %6755, %6726
  %6757 = or i64 %11, -3051920526086247883
  %6758 = xor i64 %11, -1
  %6759 = and i64 %6758, -9062545396169690148
  %6760 = and i64 %11, 9062545396169690147
  %6761 = or i64 %6759, %6760
  %6762 = xor i64 6313545891962935785, %6761
  %6763 = xor i64 %11, -1
  %6764 = or i64 3051920526086247882, %6763
  %6765 = xor i64 %6764, -1
  %6766 = and i64 %6765, -1
  %6767 = or i64 %6762, %6766
  %6768 = and i64 %385, 6712434234011540483
  %6769 = xor i64 %385, -1
  %6770 = or i64 -6712434234011540484, %6769
  %6771 = xor i64 %6770, -1
  %6772 = and i64 %6771, -1
  %6773 = or i64 %181, 2826209780612672164
  %6774 = and i64 2826209780612672164, %181
  %6775 = xor i64 2826209780612672164, %181
  %6776 = or i64 %6774, %6775
  %6777 = xor i64 %6768, %6776
  %6778 = xor i64 %6777, %6757
  %6779 = xor i64 %6778, 6823010938118425314
  %6780 = xor i64 %6779, %6767
  %6781 = xor i64 %6780, %6772
  %6782 = xor i64 %6781, %6773
  %6783 = mul i64 %6756, %6782
  %6784 = add i64 %6783, 88
  %6785 = add i64 120, 6
  %6786 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 26
  %6787 = load i32, i32* %6786, align 4
  %6788 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 25
  %6789 = load i32, i32* %6788, align 4
  %6790 = add i32 %6787, %6789
  store i32 %6790, i32* %dispatcher, align 4
  %6791 = load i8*, i8** %184, align 8
  %6792 = load i8, i8* %6791, align 1
  %6793 = mul i8 %6792, 2
  %6794 = or i64 %460, 6346804039761639357
  %6795 = xor i64 %460, -1
  %6796 = and i64 %6795, 1270026241227427120
  %6797 = and i64 %460, -1270026241227427121
  %6798 = or i64 %6796, %6797
  %6799 = xor i64 5310986986663230093, %6798
  %6800 = xor i64 %460, -1
  %6801 = or i64 -6346804039761639358, %6800
  %6802 = xor i64 %6801, -1
  %6803 = and i64 %6802, -1
  %6804 = or i64 %6799, %6803
  %6805 = add i64 %15, 7408030185271636404
  %6806 = sub i64 0, %15
  %6807 = add i64 -7408030185271636404, %6806
  %6808 = sub i64 0, %6807
  %6809 = xor i64 %6804, -7308293302578328719
  %6810 = xor i64 %6809, %6805
  %6811 = xor i64 %6810, %6808
  %6812 = xor i64 %6811, %6794
  %6813 = add i64 %78, 2141439870164392857
  %6814 = add i64 8884950024003979068, %78
  %6815 = add i64 %6814, -6743510153839586211
  %6816 = or i64 %294, 2679185020359797982
  %6817 = xor i64 %294, -1
  %6818 = and i64 2679185020359797982, %6817
  %6819 = add i64 %6818, %294
  %6820 = or i64 %13, -8576291713237858441
  %6821 = xor i64 %13, -1
  %6822 = and i64 -8576291713237858441, %6821
  %6823 = add i64 %6822, %13
  %6824 = xor i64 %6819, %6823
  %6825 = xor i64 %6824, %6816
  %6826 = xor i64 %6825, %6820
  %6827 = xor i64 %6826, %6813
  %6828 = xor i64 %6827, %6815
  %6829 = xor i64 %6828, 2661034876339432226
  %6830 = mul i64 %6812, %6829
  %6831 = trunc i64 %6830 to i8
  %6832 = mul i8 %6792, %6831
  %6833 = and i64 %13, 7952160140165566751
  %6834 = xor i64 %13, -1
  %6835 = or i64 -7952160140165566752, %6834
  %6836 = xor i64 %6835, -1
  %6837 = and i64 %6836, -1
  %6838 = and i64 %70, -3559963336522777968
  %6839 = xor i64 %70, -1
  %6840 = xor i64 -3559963336522777968, %6839
  %6841 = and i64 %6840, -3559963336522777968
  %6842 = or i64 %298, 8314760212752408475
  %6843 = xor i64 %298, -1
  %6844 = and i64 8314760212752408475, %6843
  %6845 = add i64 %6844, %298
  %6846 = xor i64 %6841, %6833
  %6847 = xor i64 %6846, %6845
  %6848 = xor i64 %6847, 2490776064887791687
  %6849 = xor i64 %6848, %6842
  %6850 = xor i64 %6849, %6838
  %6851 = xor i64 %6850, %6837
  %6852 = add i64 %203, 873449485204763941
  %6853 = and i64 873449485204763941, %203
  %6854 = or i64 873449485204763941, %203
  %6855 = add i64 %6853, %6854
  %6856 = and i64 %177, 1786166795522643525
  %6857 = xor i64 %177, -1
  %6858 = or i64 -1786166795522643526, %6857
  %6859 = xor i64 %6858, -1
  %6860 = and i64 %6859, -1
  %6861 = xor i64 %6860, 1335393296839480046
  %6862 = xor i64 %6861, %6855
  %6863 = xor i64 %6862, %6852
  %6864 = xor i64 %6863, %6856
  %6865 = mul i64 %6851, %6864
  %6866 = trunc i64 %6865 to i8
  %6867 = add i8 %6866, %6832
  %6868 = mul i8 %6793, %6867
  %6869 = srem i8 %6868, 4
  %6870 = icmp eq i8 %6869, 0
  %6871 = mul i8 %6792, %6792
  %6872 = mul i8 %6871, %6792
  %6873 = add i8 %6872, %6792
  %6874 = and i64 %183, -2266752378072866952
  %6875 = or i64 2266752378072866951, %183
  %6876 = sub i64 %6875, 2266752378072866951
  %6877 = and i64 %3, -5383405807236771157
  %6878 = xor i64 %3, -1
  %6879 = xor i64 -5383405807236771157, %6878
  %6880 = and i64 %6879, -5383405807236771157
  %6881 = or i64 %195, -1207320035651833843
  %6882 = xor i64 %195, -1
  %6883 = and i64 %6882, 2069175151684256011
  %6884 = and i64 %195, -2069175151684256012
  %6885 = or i64 %6883, %6884
  %6886 = xor i64 -898024999272173306, %6885
  %6887 = xor i64 %195, -1
  %6888 = or i64 1207320035651833842, %6887
  %6889 = xor i64 %6888, -1
  %6890 = and i64 %6889, -1
  %6891 = or i64 %6886, %6890
  %6892 = xor i64 %6877, %6891
  %6893 = xor i64 %6892, %6876
  %6894 = xor i64 %6893, %6880
  %6895 = xor i64 %6894, 3120655125985903571
  %6896 = xor i64 %6895, %6881
  %6897 = xor i64 %6896, %6874
  %6898 = or i64 %78, -379150902443715866
  %6899 = and i64 -379150902443715866, %78
  %6900 = xor i64 -379150902443715866, %78
  %6901 = or i64 %6899, %6900
  %6902 = or i64 %193, -6085182350560491930
  %6903 = xor i64 %193, -1
  %6904 = and i64 %6903, 3468389238543953464
  %6905 = and i64 %193, -3468389238543953465
  %6906 = or i64 %6904, %6905
  %6907 = xor i64 -7228515694039619490, %6906
  %6908 = xor i64 %193, -1
  %6909 = or i64 6085182350560491929, %6908
  %6910 = xor i64 %6909, -1
  %6911 = and i64 %6910, -1
  %6912 = or i64 %6907, %6911
  %6913 = add i64 %584, 4502487157308536638
  %6914 = xor i64 4502487157308536638, %584
  %6915 = and i64 4502487157308536638, %584
  %6916 = mul i64 2, %6915
  %6917 = add i64 %6914, %6916
  %6918 = xor i64 %6901, %6902
  %6919 = xor i64 %6918, %6913
  %6920 = xor i64 %6919, -5276787172669384522
  %6921 = xor i64 %6920, %6898
  %6922 = xor i64 %6921, %6917
  %6923 = xor i64 %6922, %6912
  %6924 = mul i64 %6897, %6923
  %6925 = trunc i64 %6924 to i8
  %6926 = srem i8 %6873, %6925
  %6927 = icmp eq i8 %6926, 0
  %6928 = and i1 %6870, %6927
  %6929 = select i1 %6928, i32 984876157, i32 984876144
  %6930 = and i64 %245, 6635212877030677309
  %6931 = xor i64 %245, -1
  %6932 = xor i64 6635212877030677309, %6931
  %6933 = and i64 %6932, 6635212877030677309
  %6934 = add i64 %549, -4494618440956119294
  %6935 = add i64 -5221700246205421923, %549
  %6936 = sub i64 %6935, -727081805249302629
  %6937 = or i64 %195, -7404842452524739016
  %6938 = xor i64 %195, -1
  %6939 = and i64 -7404842452524739016, %6938
  %6940 = add i64 %6939, %195
  %6941 = xor i64 -5311098359775681311, %6933
  %6942 = xor i64 %6941, %6930
  %6943 = xor i64 %6942, %6936
  %6944 = xor i64 %6943, %6937
  %6945 = xor i64 %6944, %6934
  %6946 = xor i64 %6945, %6940
  %6947 = or i64 %302, 3815870816628623887
  %6948 = and i64 3815870816628623887, %302
  %6949 = xor i64 3815870816628623887, %302
  %6950 = or i64 %6948, %6949
  %6951 = add i64 %549, -2759753077692745208
  %6952 = sub i64 0, %549
  %6953 = add i64 2759753077692745208, %6952
  %6954 = sub i64 0, %6953
  %6955 = xor i64 %6947, %6950
  %6956 = xor i64 %6955, %6951
  %6957 = xor i64 %6956, 514918852201583789
  %6958 = xor i64 %6957, %6954
  %6959 = mul i64 %6946, %6958
  %6960 = trunc i64 %6959 to i32
  %6961 = xor i32 %6929, %6960
  store i32 %6961, i32* %4, align 4
  %6962 = call i8** @bf6047435729067610447(i32* %4)
  %6963 = load i8*, i8** %6962, align 8
  indirectbr i8* %6963, [label %loopEnd, label %6725]

6964:                                             ; preds = %6964, %loopStart
  %6965 = add i64 44, 126
  %6966 = add i64 3, 123
  %6967 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 45
  %6968 = load i32, i32* %6967, align 4
  %6969 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %6970 = load i32, i32* %6969, align 4
  %6971 = sub i32 %6968, %6970
  %6972 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 49
  %6973 = load i32, i32* %6972, align 4
  %6974 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 8
  %6975 = load i32, i32* %6974, align 4
  %6976 = sub i32 %6973, %6975
  %.reload87 = load i1, i1* %.reg2mem86, align 1
  %6977 = select i1 %.reload87, i32 %6971, i32 %6976
  store i32 %6977, i32* %dispatcher, align 4
  %6978 = load i8*, i8** %345, align 8
  %6979 = load i8, i8* %6978, align 1
  %6980 = add i64 %549, -9001834113036026170
  %6981 = and i64 -9001834113036026170, %549
  %6982 = or i64 -9001834113036026170, %549
  %6983 = add i64 %6981, %6982
  %6984 = or i64 %3, 6855769947487515157
  %6985 = xor i64 %3, -1
  %6986 = and i64 %6985, -759423645241857519
  %6987 = and i64 %3, 759423645241857518
  %6988 = or i64 %6986, %6987
  %6989 = xor i64 -6174036764150654972, %6988
  %6990 = xor i64 %3, -1
  %6991 = or i64 -6855769947487515158, %6990
  %6992 = xor i64 %6991, -1
  %6993 = and i64 %6992, -1
  %6994 = or i64 %6989, %6993
  %6995 = and i64 %418, 7158042024258701912
  %6996 = xor i64 %418, -1
  %6997 = xor i64 7158042024258701912, %6996
  %6998 = and i64 %6997, 7158042024258701912
  %6999 = xor i64 %6998, %6984
  %7000 = xor i64 %6999, %6994
  %7001 = xor i64 %7000, %6980
  %7002 = xor i64 %7001, %6983
  %7003 = xor i64 %7002, %6995
  %7004 = xor i64 %7003, 3401112955326524415
  %7005 = or i64 %545, -7045813791761123157
  %7006 = and i64 -7045813791761123157, %545
  %7007 = xor i64 -7045813791761123157, %545
  %7008 = or i64 %7006, %7007
  %7009 = or i64 %416, 1078110607446184850
  %7010 = xor i64 %416, -1
  %7011 = and i64 1078110607446184850, %7010
  %7012 = add i64 %7011, %416
  %7013 = add i64 %17, 4439851923578699268
  %7014 = sub i64 0, %17
  %7015 = add i64 -4439851923578699268, %7014
  %7016 = sub i64 0, %7015
  %7017 = xor i64 -6489192897221306622, %7012
  %7018 = xor i64 %7017, %7005
  %7019 = xor i64 %7018, %7009
  %7020 = xor i64 %7019, %7008
  %7021 = xor i64 %7020, %7016
  %7022 = xor i64 %7021, %7013
  %7023 = mul i64 %7004, %7022
  %7024 = trunc i64 %7023 to i8
  %7025 = xor i8 %6979, %7024
  %7026 = and i8 %7025, %6979
  %7027 = and i64 %460, -7539242692464280784
  %7028 = or i64 7539242692464280783, %460
  %7029 = sub i64 %7028, 7539242692464280783
  %7030 = and i64 %185, 6943377243304492528
  %7031 = xor i64 %185, -1
  %7032 = xor i64 6943377243304492528, %7031
  %7033 = and i64 %7032, 6943377243304492528
  %7034 = xor i64 7820222116280914559, %7027
  %7035 = xor i64 %7034, %7030
  %7036 = xor i64 %7035, %7033
  %7037 = xor i64 %7036, %7029
  %7038 = add i64 %456, -3475315285902518772
  %7039 = sub i64 0, %456
  %7040 = add i64 3475315285902518772, %7039
  %7041 = sub i64 0, %7040
  %7042 = or i64 %553, -3474048725742176603
  %7043 = xor i64 %553, -1
  %7044 = and i64 %7043, -5502929702855382504
  %7045 = and i64 %553, 5502929702855382503
  %7046 = or i64 %7044, %7045
  %7047 = xor i64 8964443097251896509, %7046
  %7048 = xor i64 %553, -1
  %7049 = or i64 3474048725742176602, %7048
  %7050 = xor i64 %7049, -1
  %7051 = and i64 %7050, -1
  %7052 = or i64 %7047, %7051
  %7053 = or i64 %70, 5688737577605755076
  %7054 = xor i64 %70, -1
  %7055 = and i64 %7054, -4387099352587392465
  %7056 = and i64 %70, 4387099352587392464
  %7057 = or i64 %7055, %7056
  %7058 = xor i64 -8219191579631035669, %7057
  %7059 = xor i64 %70, -1
  %7060 = or i64 -5688737577605755077, %7059
  %7061 = xor i64 %7060, -1
  %7062 = and i64 %7061, -1
  %7063 = or i64 %7058, %7062
  %7064 = xor i64 %7041, %7052
  %7065 = xor i64 %7064, %7053
  %7066 = xor i64 %7065, %7063
  %7067 = xor i64 %7066, 0
  %7068 = xor i64 %7067, %7042
  %7069 = xor i64 %7068, %7038
  %7070 = mul i64 %7037, %7069
  %7071 = trunc i64 %7070 to i8
  %7072 = icmp eq i8 %7026, %7071
  %7073 = mul i8 %6979, %6979
  %7074 = add i8 %7073, %6979
  %7075 = mul i8 %7074, 3
  %7076 = srem i8 %7075, 2
  %7077 = icmp eq i8 %7076, 0
  %7078 = or i1 %7072, %7077
  %7079 = select i1 %7078, i32 984876106, i32 984876144
  %7080 = xor i32 %7079, 58
  store i32 %7080, i32* %4, align 4
  %7081 = call i8** @bf6047435729067610447(i32* %4)
  %7082 = load i8*, i8** %7081, align 8
  indirectbr i8* %7082, [label %loopEnd, label %6964]

7083:                                             ; preds = %7083, %loopStart
  %7084 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 47
  %7085 = load i32, i32* %7084, align 4
  %7086 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %7087 = load i32, i32* %7086, align 4
  %7088 = add i32 %7085, -1413951968
  %7089 = sub i32 %7088, %7087
  %7090 = sub i32 %7089, -1413951968
  store i32 %7090, i32* %dispatcher, align 4
  %.reload85 = load i1, i1* %.reg2mem84, align 1
  store i1 %.reload85, i1* %.reg2mem103, align 1
  %7091 = load i8*, i8** %194, align 8
  %7092 = load i8, i8* %7091, align 1
  %7093 = mul i8 %7092, 2
  %7094 = mul i8 %7092, 2
  %7095 = sub i8 0, %7094
  %7096 = add i8 -2, %7095
  %7097 = sub i8 0, %7096
  %7098 = mul i8 %7093, %7097
  %7099 = srem i8 %7098, 4
  %7100 = icmp eq i8 %7099, 0
  %7101 = mul i8 %7092, %7092
  %7102 = add i8 %7101, %7092
  %7103 = or i64 %288, -208298184987205650
  %7104 = xor i64 %288, -1
  %7105 = and i64 %7104, 8508104744633959263
  %7106 = and i64 %288, -8508104744633959264
  %7107 = or i64 %7105, %7106
  %7108 = xor i64 -8428163684781286223, %7107
  %7109 = xor i64 %288, -1
  %7110 = or i64 208298184987205649, %7109
  %7111 = xor i64 %7110, -1
  %7112 = and i64 %7111, -1
  %7113 = or i64 %7108, %7112
  %7114 = or i64 %82, 2974369580844896391
  %7115 = and i64 2974369580844896391, %82
  %7116 = xor i64 2974369580844896391, %82
  %7117 = or i64 %7115, %7116
  %7118 = and i64 %290, -7818194608589035191
  %7119 = or i64 7818194608589035190, %290
  %7120 = sub i64 %7119, 7818194608589035190
  %7121 = xor i64 %7117, 6818920860481292527
  %7122 = xor i64 %7121, %7120
  %7123 = xor i64 %7122, %7103
  %7124 = xor i64 %7123, %7113
  %7125 = xor i64 %7124, %7118
  %7126 = xor i64 %7125, %7114
  %7127 = add i64 %549, -4206560349143802808
  %7128 = add i64 1665606530680774899, %549
  %7129 = add i64 %7128, -5872166879824577707
  %7130 = add i64 %3, -983280183047243809
  %7131 = add i64 8901363436954549633, %3
  %7132 = sub i64 %7131, -8562100453707758174
  %7133 = or i64 %300, 4862448114009887461
  %7134 = xor i64 %300, -1
  %7135 = and i64 %7134, 2652696397210562086
  %7136 = and i64 %300, -2652696397210562087
  %7137 = or i64 %7135, %7136
  %7138 = xor i64 7469967227029191875, %7137
  %7139 = xor i64 %300, -1
  %7140 = or i64 -4862448114009887462, %7139
  %7141 = xor i64 %7140, -1
  %7142 = and i64 %7141, -1
  %7143 = or i64 %7138, %7142
  %7144 = xor i64 %7130, 422484159671192606
  %7145 = xor i64 %7144, %7129
  %7146 = xor i64 %7145, %7127
  %7147 = xor i64 %7146, %7133
  %7148 = xor i64 %7147, %7132
  %7149 = xor i64 %7148, %7143
  %7150 = mul i64 %7126, %7149
  %7151 = trunc i64 %7150 to i8
  %7152 = srem i8 %7102, %7151
  %7153 = add i64 %553, -8758285274732361117
  %7154 = xor i64 -8758285274732361117, %553
  %7155 = and i64 -8758285274732361117, %553
  %7156 = mul i64 2, %7155
  %7157 = add i64 %7154, %7156
  %7158 = add i64 %82, -2955491021640698038
  %7159 = sub i64 0, %82
  %7160 = sub i64 -2955491021640698038, %7159
  %7161 = xor i64 %7157, %7158
  %7162 = xor i64 %7161, %7160
  %7163 = xor i64 %7162, 1732481378142873679
  %7164 = xor i64 %7163, %7153
  %7165 = and i64 %290, -7263512630676075446
  %7166 = xor i64 %290, -1
  %7167 = xor i64 -7263512630676075446, %7166
  %7168 = and i64 %7167, -7263512630676075446
  %7169 = and i64 %288, 9006130987608108492
  %7170 = xor i64 %288, -1
  %7171 = or i64 -9006130987608108493, %7170
  %7172 = xor i64 %7171, -1
  %7173 = and i64 %7172, -1
  %7174 = or i64 %449, 7317465738238464061
  %7175 = xor i64 %449, -1
  %7176 = and i64 %7175, -6418331877748030991
  %7177 = and i64 %449, 6418331877748030990
  %7178 = or i64 %7176, %7177
  %7179 = xor i64 -4368107393468804660, %7178
  %7180 = xor i64 %449, -1
  %7181 = or i64 -7317465738238464062, %7180
  %7182 = xor i64 %7181, -1
  %7183 = and i64 %7182, -1
  %7184 = or i64 %7179, %7183
  %7185 = xor i64 %7168, %7173
  %7186 = xor i64 %7185, %7165
  %7187 = xor i64 %7186, 0
  %7188 = xor i64 %7187, %7169
  %7189 = xor i64 %7188, %7184
  %7190 = xor i64 %7189, %7174
  %7191 = mul i64 %7164, %7190
  %7192 = trunc i64 %7191 to i8
  %7193 = icmp eq i8 %7152, %7192
  %7194 = add i64 %458, -1299489002887201211
  %7195 = sub i64 0, %458
  %7196 = add i64 1299489002887201211, %7195
  %7197 = sub i64 0, %7196
  %7198 = or i64 %578, -2509379589173098009
  %7199 = and i64 -2509379589173098009, %578
  %7200 = xor i64 -2509379589173098009, %578
  %7201 = or i64 %7199, %7200
  %7202 = xor i64 %7201, %7198
  %7203 = xor i64 %7202, %7197
  %7204 = xor i64 %7203, %7194
  %7205 = xor i64 %7204, -7276419812272831319
  %7206 = or i64 %1154, 6339233667549860762
  %7207 = xor i64 %1154, -1
  %7208 = and i64 %7207, 8204023312903390076
  %7209 = and i64 %1154, -8204023312903390077
  %7210 = or i64 %7208, %7209
  %7211 = xor i64 2748304988401881318, %7210
  %7212 = xor i64 %1154, -1
  %7213 = or i64 -6339233667549860763, %7212
  %7214 = xor i64 %7213, -1
  %7215 = and i64 %7214, -1
  %7216 = or i64 %7211, %7215
  %7217 = add i64 %11, 5583215079754667132
  %7218 = sub i64 0, %11
  %7219 = add i64 -5583215079754667132, %7218
  %7220 = sub i64 0, %7219
  %7221 = and i64 %449, 7558611476298552275
  %7222 = xor i64 %449, -1
  %7223 = or i64 -7558611476298552276, %7222
  %7224 = xor i64 %7223, -1
  %7225 = and i64 %7224, -1
  %7226 = xor i64 %7225, %7216
  %7227 = xor i64 %7226, %7217
  %7228 = xor i64 %7227, 7063707064898543513
  %7229 = xor i64 %7228, %7220
  %7230 = xor i64 %7229, %7206
  %7231 = xor i64 %7230, %7221
  %7232 = mul i64 %7205, %7231
  %7233 = trunc i64 %7232 to i1
  %7234 = xor i1 %7100, %7233
  %7235 = xor i1 %7193, true
  %7236 = or i1 %7234, %7235
  %7237 = xor i1 %7236, true
  %7238 = and i1 %7237, true
  %7239 = select i1 %7238, i32 984876111, i32 984876144
  %7240 = or i32 %7239, 63
  %7241 = and i32 %7239, 63
  %7242 = sub i32 %7240, %7241
  store i32 %7242, i32* %4, align 4
  %7243 = call i8** @bf6047435729067610447(i32* %4)
  %7244 = load i8*, i8** %7243, align 8
  indirectbr i8* %7244, [label %loopEnd, label %7083]

7245:                                             ; preds = %7245, %loopStart
  %.reload82 = load i64, i64* %.reg2mem81, align 8
  %7246 = icmp eq i64 %.reload82, 0
  %7247 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 47
  %7248 = load i32, i32* %7247, align 4
  %7249 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %7250 = load i32, i32* %7249, align 4
  %7251 = sub i32 %7248, %7250
  store i32 %7251, i32* %dispatcher, align 4
  store i1 %7246, i1* %.reg2mem103, align 1
  %7252 = load i8*, i8** %12, align 8
  %7253 = load i8, i8* %7252, align 1
  %7254 = mul i8 %7253, 2
  %7255 = mul i8 %7253, 2
  %7256 = add i8 2, %7255
  %7257 = mul i8 %7254, %7256
  %7258 = srem i8 %7257, 4
  %7259 = icmp eq i8 %7258, 0
  %7260 = mul i8 %7253, %7253
  %7261 = add i8 %7260, %7253
  %7262 = srem i8 %7261, 2
  %7263 = icmp eq i8 %7262, 0
  %7264 = or i1 %7259, %7263
  %7265 = and i64 %187, 365850482336838759
  %7266 = or i64 -365850482336838760, %187
  %7267 = sub i64 %7266, -365850482336838760
  %7268 = and i64 %5, 3696059205046987434
  %7269 = or i64 -3696059205046987435, %5
  %7270 = sub i64 %7269, -3696059205046987435
  %7271 = add i64 %296, 6531236017877115968
  %7272 = add i64 -6166388355164807136, %296
  %7273 = sub i64 %7272, 5749119700667628512
  %7274 = xor i64 -1817596132238727851, %7273
  %7275 = xor i64 %7274, %7270
  %7276 = xor i64 %7275, %7268
  %7277 = xor i64 %7276, %7271
  %7278 = xor i64 %7277, %7265
  %7279 = xor i64 %7278, %7267
  %7280 = and i64 %201, -3590310513566689763
  %7281 = xor i64 %201, -1
  %7282 = or i64 3590310513566689762, %7281
  %7283 = xor i64 %7282, -1
  %7284 = and i64 %7283, -1
  %7285 = or i64 %241, 3793621411434683823
  %7286 = and i64 3793621411434683823, %241
  %7287 = xor i64 3793621411434683823, %241
  %7288 = or i64 %7286, %7287
  %7289 = xor i64 %7285, %7284
  %7290 = xor i64 %7289, -3484651244226157787
  %7291 = xor i64 %7290, %7280
  %7292 = xor i64 %7291, %7288
  %7293 = mul i64 %7279, %7292
  %7294 = trunc i64 %7293 to i32
  %7295 = select i1 %7264, i32 %7294, i32 984876144
  %7296 = xor i32 %7295, 57
  store i32 %7296, i32* %4, align 4
  %7297 = call i8** @bf6047435729067610447(i32* %4)
  %7298 = load i8*, i8** %7297, align 8
  indirectbr i8* %7298, [label %loopEnd, label %7245]

codeRepl10:                                       ; preds = %codeRepl10, %loopStart
  %7299 = add i64 %416, 4066710700278230021
  %7300 = sub i64 0, %416
  %7301 = add i64 -4066710700278230021, %7300
  %7302 = sub i64 0, %7301
  %7303 = or i64 %549, 8834218695301185169
  %7304 = xor i64 %549, -1
  %7305 = and i64 %7304, 675790123606709323
  %7306 = and i64 %549, -675790123606709324
  %7307 = or i64 %7305, %7306
  %7308 = xor i64 8356869533687950042, %7307
  %7309 = xor i64 %549, -1
  %7310 = or i64 -8834218695301185170, %7309
  %7311 = xor i64 %7310, -1
  %7312 = and i64 %7311, -1
  %7313 = or i64 %7308, %7312
  %7314 = and i64 %11, -8676038058052707906
  %7315 = xor i64 %11, -1
  %7316 = xor i64 -8676038058052707906, %7315
  %7317 = and i64 %7316, -8676038058052707906
  %7318 = xor i64 %7299, %7314
  %7319 = xor i64 %7318, -8249153119454760153
  %7320 = xor i64 %7319, %7302
  %7321 = xor i64 %7320, %7303
  %7322 = xor i64 %7321, %7317
  %7323 = xor i64 %7322, %7313
  %7324 = or i64 %173, -9096763776149273413
  %7325 = xor i64 %173, -1
  %7326 = and i64 -9096763776149273413, %7325
  %7327 = add i64 %7326, %173
  %7328 = or i64 %116, 535585886487225154
  %7329 = xor i64 %116, -1
  %7330 = and i64 535585886487225154, %7329
  %7331 = add i64 %7330, %116
  %7332 = or i64 %7, -4484363315656689324
  %7333 = and i64 -4484363315656689324, %7
  %7334 = xor i64 -4484363315656689324, %7
  %7335 = or i64 %7333, %7334
  %7336 = xor i64 %7327, 2128745088179326776
  %7337 = xor i64 %7336, %7331
  %7338 = xor i64 %7337, %7332
  %7339 = xor i64 %7338, %7324
  %7340 = xor i64 %7339, %7335
  %7341 = xor i64 %7340, %7328
  %7342 = mul i64 %7323, %7341
  store i64 %7342, i64* %453, align 8
  %7343 = call i8** @lk8153326119118101986(i64* %453)
  %7344 = load i8*, i8** %7343, align 8
  %7345 = bitcast i8* %7344 to void (i1*, [65 x i32]*, i32*)*
  call void %7345(i1* %.reg2mem103, [65 x i32]* %lookupTable, i32* %dispatcher)
  %7346 = load i8*, i8** %297, align 8
  %7347 = load i8, i8* %7346, align 1
  %7348 = mul i8 %7347, 2
  %7349 = mul i8 %7347, 2
  %7350 = add i8 2, %7349
  %7351 = mul i8 %7348, %7350
  %7352 = srem i8 %7351, 4
  %7353 = icmp eq i8 %7352, 0
  %7354 = mul i8 %7347, %7347
  %7355 = sub i8 %7354, 106
  %7356 = add i8 %7355, %7347
  %7357 = add i8 %7356, 106
  %7358 = srem i8 %7357, 2
  %7359 = icmp eq i8 %7358, 0
  %7360 = and i1 %7353, %7359
  %7361 = add i64 %66, -2065790564345179370
  %7362 = add i64 144731510348671213, %66
  %7363 = sub i64 %7362, 2210522074693850583
  %7364 = or i64 %181, -1526561986934092830
  %7365 = xor i64 %181, -1
  %7366 = and i64 %7365, -6410051419874853189
  %7367 = and i64 %181, 6410051419874853188
  %7368 = or i64 %7366, %7367
  %7369 = xor i64 5609905979567322457, %7368
  %7370 = xor i64 %181, -1
  %7371 = or i64 1526561986934092829, %7370
  %7372 = xor i64 %7371, -1
  %7373 = and i64 %7372, -1
  %7374 = or i64 %7369, %7373
  %7375 = add i64 %199, 4785696221340378675
  %7376 = sub i64 0, %199
  %7377 = add i64 -4785696221340378675, %7376
  %7378 = sub i64 0, %7377
  %7379 = xor i64 1179556514514464829, %7361
  %7380 = xor i64 %7379, %7374
  %7381 = xor i64 %7380, %7375
  %7382 = xor i64 %7381, %7378
  %7383 = xor i64 %7382, %7364
  %7384 = xor i64 %7383, %7363
  %7385 = add i64 %175, -1659059091158718627
  %7386 = sub i64 0, %175
  %7387 = sub i64 -1659059091158718627, %7386
  %7388 = or i64 %545, 4999523718682390117
  %7389 = and i64 4999523718682390117, %545
  %7390 = xor i64 4999523718682390117, %545
  %7391 = or i64 %7389, %7390
  %7392 = add i64 %304, 7629343421094630216
  %7393 = xor i64 7629343421094630216, %304
  %7394 = and i64 7629343421094630216, %304
  %7395 = mul i64 2, %7394
  %7396 = add i64 %7393, %7395
  %7397 = xor i64 %7396, %7388
  %7398 = xor i64 %7397, %7387
  %7399 = xor i64 %7398, %7391
  %7400 = xor i64 %7399, -4924648105547043536
  %7401 = xor i64 %7400, %7385
  %7402 = xor i64 %7401, %7392
  %7403 = mul i64 %7384, %7402
  %7404 = trunc i64 %7403 to i32
  %7405 = select i1 %7360, i32 984876154, i32 %7404
  %7406 = or i64 %549, -6870919055195896827
  %7407 = xor i64 %549, -1
  %7408 = and i64 -6870919055195896827, %7407
  %7409 = add i64 %7408, %549
  %7410 = and i64 %199, 1462282163366565465
  %7411 = xor i64 %199, -1
  %7412 = xor i64 1462282163366565465, %7411
  %7413 = and i64 %7412, 1462282163366565465
  %7414 = and i64 %21, 1479323813799812116
  %7415 = xor i64 %21, -1
  %7416 = or i64 -1479323813799812117, %7415
  %7417 = xor i64 %7416, -1
  %7418 = and i64 %7417, -1
  %7419 = xor i64 %7406, %7410
  %7420 = xor i64 %7419, %7409
  %7421 = xor i64 %7420, %7418
  %7422 = xor i64 %7421, %7413
  %7423 = xor i64 %7422, %7414
  %7424 = xor i64 %7423, -205387242379601467
  %7425 = or i64 %418, 2715610942900972911
  %7426 = xor i64 %418, -1
  %7427 = and i64 2715610942900972911, %7426
  %7428 = add i64 %7427, %418
  %7429 = or i64 %290, 5174592526794960762
  %7430 = and i64 5174592526794960762, %290
  %7431 = xor i64 5174592526794960762, %290
  %7432 = or i64 %7430, %7431
  %7433 = xor i64 %7432, -7637332950914309502
  %7434 = xor i64 %7433, %7429
  %7435 = xor i64 %7434, %7428
  %7436 = xor i64 %7435, %7425
  %7437 = mul i64 %7424, %7436
  %7438 = trunc i64 %7437 to i32
  %7439 = xor i32 %7405, %7438
  store i32 %7439, i32* %4, align 4
  %7440 = call i8** @bf6047435729067610447(i32* %4)
  %7441 = load i8*, i8** %7440, align 8
  indirectbr i8* %7441, [label %loopEnd, label %codeRepl10]

codeRepl11:                                       ; preds = %codeRepl11, %loopStart
  store i64 4070807658626890118, i64* %453, align 8
  %7442 = call i8** @lk8153326119118101986(i64* %453)
  %7443 = load i8*, i8** %7442, align 8
  %7444 = bitcast i8* %7443 to void (i64*, [65 x i32]*, i32*)*
  call void %7444(i64* %.reg2mem18, [65 x i32]* %lookupTable, i32* %dispatcher)
  %7445 = load i8*, i8** %178, align 8
  %7446 = load i8, i8* %7445, align 1
  %7447 = add i64 %17, -5501896927371921727
  %7448 = sub i64 0, %17
  %7449 = sub i64 -5501896927371921727, %7448
  %7450 = and i64 %584, 1923313766258491424
  %7451 = xor i64 %584, -1
  %7452 = or i64 -1923313766258491425, %7451
  %7453 = xor i64 %7452, -1
  %7454 = and i64 %7453, -1
  %7455 = xor i64 3830794154736125061, %7450
  %7456 = xor i64 %7455, %7454
  %7457 = xor i64 %7456, %7447
  %7458 = xor i64 %7457, %7449
  %7459 = and i64 %58, -4664078656067650624
  %7460 = xor i64 %58, -1
  %7461 = or i64 4664078656067650623, %7460
  %7462 = xor i64 %7461, -1
  %7463 = and i64 %7462, -1
  %7464 = and i64 %203, -7224927849656945822
  %7465 = or i64 7224927849656945821, %203
  %7466 = sub i64 %7465, 7224927849656945821
  %7467 = or i64 %1154, -6428868146130908242
  %7468 = xor i64 %1154, -1
  %7469 = and i64 %7468, -4968843351632777616
  %7470 = and i64 %1154, 4968843351632777615
  %7471 = or i64 %7469, %7470
  %7472 = xor i64 2144572380307449310, %7471
  %7473 = xor i64 %1154, -1
  %7474 = or i64 6428868146130908241, %7473
  %7475 = xor i64 %7474, -1
  %7476 = and i64 %7475, -1
  %7477 = or i64 %7472, %7476
  %7478 = xor i64 %7464, %7459
  %7479 = xor i64 %7478, %7467
  %7480 = xor i64 %7479, %7466
  %7481 = xor i64 %7480, %7463
  %7482 = xor i64 %7481, 2184710879636018253
  %7483 = xor i64 %7482, %7477
  %7484 = mul i64 %7458, %7483
  %7485 = trunc i64 %7484 to i8
  %7486 = and i8 %7446, %7485
  %7487 = icmp eq i8 %7486, 0
  %7488 = mul i8 %7446, %7446
  %7489 = or i64 %177, 699762330150470173
  %7490 = xor i64 %177, -1
  %7491 = and i64 699762330150470173, %7490
  %7492 = add i64 %7491, %177
  %7493 = and i64 %177, 2503054315489391597
  %7494 = xor i64 %177, -1
  %7495 = xor i64 2503054315489391597, %7494
  %7496 = and i64 %7495, 2503054315489391597
  %7497 = xor i64 %7493, %7489
  %7498 = xor i64 %7497, 5240670033466932117
  %7499 = xor i64 %7498, %7496
  %7500 = xor i64 %7499, %7492
  %7501 = or i64 %140, -5726308416324411236
  %7502 = xor i64 %140, -1
  %7503 = and i64 -5726308416324411236, %7502
  %7504 = add i64 %7503, %140
  %7505 = and i64 %416, 4874203273795174636
  %7506 = xor i64 %416, -1
  %7507 = or i64 -4874203273795174637, %7506
  %7508 = xor i64 %7507, -1
  %7509 = and i64 %7508, -1
  %7510 = xor i64 -6001871391478570972, %7504
  %7511 = xor i64 %7510, %7509
  %7512 = xor i64 %7511, %7505
  %7513 = xor i64 %7512, %7501
  %7514 = mul i64 %7500, %7513
  %7515 = trunc i64 %7514 to i8
  %7516 = add i8 %7488, %7515
  %7517 = add i8 %7516, %7446
  %7518 = sub i8 %7517, -12
  %7519 = mul i8 %7518, 3
  %7520 = and i64 %298, 4334770648581332817
  %7521 = xor i64 %298, -1
  %7522 = or i64 -4334770648581332818, %7521
  %7523 = xor i64 %7522, -1
  %7524 = and i64 %7523, -1
  %7525 = and i64 %241, -7505913081635064576
  %7526 = xor i64 %241, -1
  %7527 = xor i64 -7505913081635064576, %7526
  %7528 = and i64 %7527, -7505913081635064576
  %7529 = xor i64 %7520, -8456256095029177997
  %7530 = xor i64 %7529, %7528
  %7531 = xor i64 %7530, %7524
  %7532 = xor i64 %7531, %7525
  %7533 = or i64 %203, -6126578572866039856
  %7534 = xor i64 %203, -1
  %7535 = and i64 %7534, 3975033936620510396
  %7536 = and i64 %203, -3975033936620510397
  %7537 = or i64 %7535, %7536
  %7538 = xor i64 -7075105049202945172, %7537
  %7539 = xor i64 %203, -1
  %7540 = or i64 6126578572866039855, %7539
  %7541 = xor i64 %7540, -1
  %7542 = and i64 %7541, -1
  %7543 = or i64 %7538, %7542
  %7544 = or i64 %187, -6753195149160111695
  %7545 = and i64 -6753195149160111695, %187
  %7546 = xor i64 -6753195149160111695, %187
  %7547 = or i64 %7545, %7546
  %7548 = and i64 %545, 6738317677858813403
  %7549 = xor i64 %545, -1
  %7550 = or i64 -6738317677858813404, %7549
  %7551 = xor i64 %7550, -1
  %7552 = and i64 %7551, -1
  %7553 = xor i64 %7548, %7543
  %7554 = xor i64 %7553, %7533
  %7555 = xor i64 %7554, %7552
  %7556 = xor i64 %7555, %7547
  %7557 = xor i64 %7556, -373681774222936202
  %7558 = xor i64 %7557, %7544
  %7559 = mul i64 %7532, %7558
  %7560 = trunc i64 %7559 to i8
  %7561 = srem i8 %7519, %7560
  %7562 = icmp eq i8 %7561, 0
  %7563 = or i1 %7487, %7562
  %7564 = select i1 %7563, i32 984876131, i32 984876144
  %7565 = xor i32 %7564, -1
  %7566 = and i32 %7565, 1135821715
  %7567 = and i32 %7564, -1135821716
  %7568 = or i32 %7566, %7567
  %7569 = xor i32 %7568, 1135821696
  store i32 %7569, i32* %4, align 4
  %7570 = call i8** @bf6047435729067610447(i32* %4)
  %7571 = load i8*, i8** %7570, align 8
  indirectbr i8* %7571, [label %loopEnd, label %codeRepl11]

7572:                                             ; preds = %7572, %loopStart
  %7573 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 57
  %7574 = load i32, i32* %7573, align 4
  %7575 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %7576 = load i32, i32* %7575, align 4
  %7577 = srem i32 %7574, %7576
  store i32 %7577, i32* %dispatcher, align 4
  %7578 = load i8*, i8** %421, align 8
  %7579 = load i8, i8* %7578, align 1
  %7580 = mul i8 %7579, 2
  %7581 = mul i8 %7579, 2
  %7582 = add i8 2, %7581
  %7583 = mul i8 %7580, %7582
  %7584 = add i64 %181, -7416277070518385821
  %7585 = xor i64 -7416277070518385821, %181
  %7586 = and i64 -7416277070518385821, %181
  %7587 = mul i64 2, %7586
  %7588 = add i64 %7585, %7587
  %7589 = and i64 %300, -4582011969119380502
  %7590 = xor i64 %300, -1
  %7591 = or i64 4582011969119380501, %7590
  %7592 = xor i64 %7591, -1
  %7593 = and i64 %7592, -1
  %7594 = xor i64 -8174377647347278501, %7588
  %7595 = xor i64 %7594, %7584
  %7596 = xor i64 %7595, %7589
  %7597 = xor i64 %7596, %7593
  %7598 = add i64 %582, 7438919143494355135
  %7599 = sub i64 0, %582
  %7600 = add i64 -7438919143494355135, %7599
  %7601 = sub i64 0, %7600
  %7602 = and i64 %243, 2405283834835357657
  %7603 = xor i64 %243, -1
  %7604 = or i64 -2405283834835357658, %7603
  %7605 = xor i64 %7604, -1
  %7606 = and i64 %7605, -1
  %7607 = xor i64 %7606, %7602
  %7608 = xor i64 %7607, %7601
  %7609 = xor i64 %7608, %7598
  %7610 = xor i64 %7609, 8466978520207207244
  %7611 = mul i64 %7597, %7610
  %7612 = trunc i64 %7611 to i8
  %7613 = srem i8 %7583, %7612
  %7614 = icmp eq i8 %7613, 0
  %7615 = mul i8 %7579, %7579
  %7616 = sub i8 %7615, -94
  %7617 = add i8 %7616, %7579
  %7618 = add i8 %7617, -94
  %7619 = srem i8 %7618, 2
  %7620 = icmp eq i8 %7619, 0
  %7621 = and i1 %7614, %7620
  %7622 = select i1 %7621, i32 984876150, i32 984876144
  %7623 = xor i32 %7622, -1
  %7624 = and i32 %7623, -1571682106
  %7625 = and i32 %7622, 1571682105
  %7626 = or i32 %7624, %7625
  %7627 = xor i32 %7626, -1571682112
  store i32 %7627, i32* %4, align 4
  %7628 = call i8** @bf6047435729067610447(i32* %4)
  %7629 = load i8*, i8** %7628, align 8
  indirectbr i8* %7629, [label %loopEnd, label %7572]

7630:                                             ; preds = %7630, %loopStart
  %7631 = add i64 %199, -1807336052473763088
  %7632 = sub i64 0, %199
  %7633 = add i64 1807336052473763088, %7632
  %7634 = sub i64 0, %7633
  %7635 = or i64 %80, -1528398386564761316
  %7636 = xor i64 %80, -1
  %7637 = and i64 -1528398386564761316, %7636
  %7638 = add i64 %7637, %80
  %7639 = xor i64 %7635, %7631
  %7640 = xor i64 %7639, %7634
  %7641 = xor i64 %7640, %7638
  %7642 = xor i64 %7641, -8635173179625401237
  %7643 = or i64 %385, -4421333039994650674
  %7644 = xor i64 %385, -1
  %7645 = and i64 -4421333039994650674, %7644
  %7646 = add i64 %7645, %385
  %7647 = or i64 %193, -1031107152958386301
  %7648 = xor i64 %193, -1
  %7649 = and i64 -1031107152958386301, %7648
  %7650 = add i64 %7649, %193
  %7651 = xor i64 %7650, 4113082731000130346
  %7652 = xor i64 %7651, %7647
  %7653 = xor i64 %7652, %7646
  %7654 = xor i64 %7653, %7643
  %7655 = mul i64 %7642, %7654
  %7656 = sub i64 6308519723398009450, %7655
  %7657 = sdiv i64 55, 125
  %7658 = add i64 94, 64
  %7659 = sub i64 17, 20
  %7660 = and i64 %302, -7751762759856867742
  %7661 = or i64 7751762759856867741, %302
  %7662 = sub i64 %7661, 7751762759856867741
  %7663 = or i64 %58, -5296609940381325782
  %7664 = xor i64 %58, -1
  %7665 = and i64 %7664, -6387351100196995972
  %7666 = and i64 %58, 6387351100196995971
  %7667 = or i64 %7665, %7666
  %7668 = xor i64 1235458915429915222, %7667
  %7669 = xor i64 %58, -1
  %7670 = or i64 5296609940381325781, %7669
  %7671 = xor i64 %7670, -1
  %7672 = and i64 %7671, -1
  %7673 = or i64 %7668, %7672
  %7674 = xor i64 %7673, %7660
  %7675 = xor i64 %7674, %7663
  %7676 = xor i64 %7675, 5910656823140300645
  %7677 = xor i64 %7676, %7662
  %7678 = and i64 %15, -2418080083837926371
  %7679 = or i64 2418080083837926370, %15
  %7680 = sub i64 %7679, 2418080083837926370
  %7681 = add i64 %545, 1034608515013920586
  %7682 = add i64 7711884847560489459, %545
  %7683 = sub i64 %7682, 6677276332546568873
  %7684 = add i64 %460, 4258200899983169563
  %7685 = add i64 -103595065905121922, %460
  %7686 = add i64 %7685, 4361795965888291485
  %7687 = xor i64 %7684, -3393137000918301069
  %7688 = xor i64 %7687, %7680
  %7689 = xor i64 %7688, %7683
  %7690 = xor i64 %7689, %7678
  %7691 = xor i64 %7690, %7686
  %7692 = xor i64 %7691, %7681
  %7693 = mul i64 %7677, %7692
  %7694 = sdiv i64 %7693, 54
  %7695 = mul i64 43, 66
  %7696 = add i64 84, 91
  %7697 = mul i64 119, 94
  %.reload72 = load i32, i32* %.reg2mem70, align 4
  %7698 = srem i32 %.reload72, 2
  %7699 = icmp eq i32 %7698, 0
  %.reload76 = load i64, i64* %.reg2mem73, align 8
  %7700 = xor i64 %.reload76, -1
  %7701 = or i64 %7700, -2
  %7702 = xor i64 %7701, -1
  %7703 = and i64 %7702, -1
  %7704 = icmp eq i64 %7703, 0
  %.reload75 = load i64, i64* %.reg2mem73, align 8
  %7705 = mul i64 %.reload75, %.reload75
  %.reload74 = load i64, i64* %.reg2mem73, align 8
  %7706 = xor i64 %7705, %.reload74
  %7707 = and i64 %7705, %.reload74
  %7708 = mul i64 2, %7707
  %7709 = add i64 %7706, %7708
  %7710 = mul i64 %7709, 3
  %7711 = srem i64 %7710, 2
  %7712 = icmp eq i64 %7711, 0
  %7713 = xor i1 %7712, true
  %7714 = and i1 %7704, %7713
  %7715 = add i1 %7714, %7712
  store i1 %7715, i1* %.reg2mem89, align 1
  %7716 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 51
  %7717 = load i32, i32* %7716, align 4
  %7718 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %7719 = load i32, i32* %7718, align 4
  %7720 = add i32 %7717, 1312514706
  %7721 = sub i32 %7720, %7719
  %7722 = sub i32 %7721, 1312514706
  %7723 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 55
  %7724 = load i32, i32* %7723, align 4
  %7725 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %7726 = load i32, i32* %7725, align 4
  %7727 = srem i32 %7724, %7726
  %.reload91 = load i1, i1* %.reg2mem89, align 1
  %7728 = select i1 %.reload91, i32 %7722, i32 %7727
  store i32 %7728, i32* %dispatcher, align 4
  %7729 = load i8*, i8** %178, align 8
  %7730 = load i8, i8* %7729, align 1
  %7731 = mul i8 %7730, 2
  %7732 = mul i8 %7730, 2
  %7733 = add i8 2, %7732
  %7734 = mul i8 %7731, %7733
  %7735 = srem i8 %7734, 4
  %7736 = icmp eq i8 %7735, 0
  %7737 = mul i8 %7730, %7730
  %7738 = add i8 %7737, %7730
  %7739 = srem i8 %7738, 2
  %7740 = icmp eq i8 %7739, 0
  %7741 = or i1 %7736, %7740
  %7742 = select i1 %7741, i32 984876146, i32 984876144
  %7743 = or i32 %7742, 2
  %7744 = and i32 %7742, 2
  %7745 = sub i32 %7743, %7744
  store i32 %7745, i32* %4, align 4
  %7746 = call i8** @bf6047435729067610447(i32* %4)
  %7747 = load i8*, i8** %7746, align 8
  indirectbr i8* %7747, [label %loopEnd, label %7630]

codeRepl12:                                       ; preds = %codeRepl12, %loopStart
  store i64 4070807658626890115, i64* %453, align 8
  %7748 = call i8** @lk8153326119118101986(i64* %453)
  %7749 = load i8*, i8** %7748, align 8
  %7750 = bitcast i8* %7749 to void ([65 x i32]*, i32*)*
  call void %7750([65 x i32]* %lookupTable, i32* %dispatcher)
  %7751 = load i8*, i8** %194, align 8
  %7752 = load i8, i8* %7751, align 1
  %7753 = mul i8 %7752, %7752
  %7754 = xor i8 %7753, %7752
  %7755 = and i8 %7753, %7752
  %7756 = mul i8 2, %7755
  %7757 = add i8 %7754, %7756
  %7758 = mul i8 39, %7757
  %7759 = add i8 23, %7758
  %7760 = mul i8 -105, %7759
  %7761 = and i64 %19, 815809009754378100
  %7762 = or i64 -815809009754378101, %19
  %7763 = sub i64 %7762, -815809009754378101
  %7764 = add i64 %68, 2077026578724111796
  %7765 = xor i64 2077026578724111796, %68
  %7766 = and i64 2077026578724111796, %68
  %7767 = mul i64 2, %7766
  %7768 = add i64 %7765, %7767
  %7769 = add i64 %3, -8337144738455573642
  %7770 = sub i64 0, %3
  %7771 = sub i64 -8337144738455573642, %7770
  %7772 = xor i64 %7761, 2657647733640712971
  %7773 = xor i64 %7772, %7771
  %7774 = xor i64 %7773, %7769
  %7775 = xor i64 %7774, %7768
  %7776 = xor i64 %7775, %7763
  %7777 = xor i64 %7776, %7764
  %7778 = add i64 %62, 2795274895615124505
  %7779 = add i64 -3061331727675677313, %62
  %7780 = sub i64 %7779, -5856606623290801818
  %7781 = add i64 %185, 5338406011724903602
  %7782 = sub i64 0, %185
  %7783 = sub i64 5338406011724903602, %7782
  %7784 = xor i64 %7783, 1403395469681845933
  %7785 = xor i64 %7784, %7778
  %7786 = xor i64 %7785, %7781
  %7787 = xor i64 %7786, %7780
  %7788 = mul i64 %7777, %7787
  %7789 = trunc i64 %7788 to i8
  %7790 = add i8 %7789, %7760
  %7791 = mul i8 %7790, 3
  %7792 = srem i8 %7791, 2
  %7793 = icmp eq i8 %7792, 0
  %7794 = mul i8 %7752, %7752
  %7795 = add i8 %7794, %7752
  %7796 = srem i8 %7795, 2
  %7797 = icmp eq i8 %7796, 0
  %7798 = and i1 %7793, %7797
  %7799 = select i1 %7798, i32 984876109, i32 984876144
  %7800 = xor i32 %7799, 61
  store i32 %7800, i32* %4, align 4
  %7801 = call i8** @bf6047435729067610447(i32* %4)
  %7802 = load i8*, i8** %7801, align 8
  indirectbr i8* %7802, [label %loopEnd, label %codeRepl12]

7803:                                             ; preds = %7803, %loopStart
  %7804 = mul i64 87, 69
  %7805 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 53
  %7806 = load i32, i32* %7805, align 4
  %7807 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %7808 = load i32, i32* %7807, align 4
  %7809 = sub i32 %7806, %7808
  %7810 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 51
  %7811 = load i32, i32* %7810, align 4
  %7812 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %7813 = load i32, i32* %7812, align 4
  %7814 = srem i32 %7811, %7813
  %.reload90 = load i1, i1* %.reg2mem89, align 1
  %7815 = select i1 %.reload90, i32 %7809, i32 %7814
  store i32 %7815, i32* %dispatcher, align 4
  %7816 = load i8*, i8** %117, align 8
  %7817 = load i8, i8* %7816, align 1
  %7818 = mul i8 %7817, 2
  %7819 = mul i8 %7817, 2
  %7820 = add i8 4, %7819
  %7821 = add i8 %7820, -2
  %7822 = mul i8 %7818, %7821
  %7823 = srem i8 %7822, 4
  %7824 = icmp eq i8 %7823, 0
  %7825 = mul i8 %7817, %7817
  %7826 = add i8 %7825, %7817
  %7827 = srem i8 %7826, 2
  %7828 = icmp eq i8 %7827, 0
  %7829 = and i1 %7824, %7828
  %7830 = select i1 %7829, i32 984876109, i32 984876144
  %7831 = xor i32 %7830, 61
  store i32 %7831, i32* %4, align 4
  %7832 = call i8** @bf6047435729067610447(i32* %4)
  %7833 = load i8*, i8** %7832, align 8
  indirectbr i8* %7833, [label %loopEnd, label %7803]

7834:                                             ; preds = %7834, %loopStart
  %7835 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 57
  %7836 = load i32, i32* %7835, align 4
  %7837 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %7838 = load i32, i32* %7837, align 4
  %7839 = srem i32 %7836, %7838
  store i32 %7839, i32* %dispatcher, align 4
  %7840 = load i8*, i8** %202, align 8
  %7841 = load i8, i8* %7840, align 1
  %7842 = mul i8 %7841, 2
  %7843 = mul i8 %7841, 2
  %7844 = add i8 2, %7843
  %7845 = mul i8 %7842, %7844
  %7846 = srem i8 %7845, 4
  %7847 = icmp eq i8 %7846, 0
  %7848 = mul i8 %7841, %7841
  %7849 = mul i8 %7848, %7841
  %7850 = add i8 %7849, %7841
  %7851 = or i64 %245, 600643656509150148
  %7852 = and i64 600643656509150148, %245
  %7853 = xor i64 600643656509150148, %245
  %7854 = or i64 %7852, %7853
  %7855 = or i64 %9, -5021739148428181232
  %7856 = xor i64 %9, -1
  %7857 = and i64 -5021739148428181232, %7856
  %7858 = add i64 %7857, %9
  %7859 = and i64 %458, -3182987606439731469
  %7860 = or i64 3182987606439731468, %458
  %7861 = sub i64 %7860, 3182987606439731468
  %7862 = xor i64 %7854, %7858
  %7863 = xor i64 %7862, %7855
  %7864 = xor i64 %7863, %7861
  %7865 = xor i64 %7864, 2430256730963366367
  %7866 = xor i64 %7865, %7851
  %7867 = xor i64 %7866, %7859
  %7868 = and i64 %62, 2104269410814205751
  %7869 = xor i64 %62, -1
  %7870 = or i64 -2104269410814205752, %7869
  %7871 = xor i64 %7870, -1
  %7872 = and i64 %7871, -1
  %7873 = add i64 %383, 4378343576843268679
  %7874 = add i64 -737286098358893302, %383
  %7875 = add i64 %7874, 5115629675202161981
  %7876 = or i64 %582, 3348165718658428123
  %7877 = xor i64 %582, -1
  %7878 = and i64 3348165718658428123, %7877
  %7879 = add i64 %7878, %582
  %7880 = xor i64 %7876, %7873
  %7881 = xor i64 %7880, %7879
  %7882 = xor i64 %7881, %7868
  %7883 = xor i64 %7882, 8467451004427457598
  %7884 = xor i64 %7883, %7872
  %7885 = xor i64 %7884, %7875
  %7886 = mul i64 %7867, %7885
  %7887 = trunc i64 %7886 to i8
  %7888 = srem i8 %7850, %7887
  %7889 = icmp eq i8 %7888, 0
  %7890 = and i1 %7847, %7889
  %7891 = select i1 %7890, i32 984876099, i32 984876144
  %7892 = xor i32 %7891, 51
  store i32 %7892, i32* %4, align 4
  %7893 = call i8** @bf6047435729067610447(i32* %4)
  %7894 = load i8*, i8** %7893, align 8
  indirectbr i8* %7894, [label %loopEnd, label %7834]

7895:                                             ; preds = %7895, %loopStart
  %7896 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 56
  %7897 = load i32, i32* %7896, align 4
  %7898 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %7899 = load i32, i32* %7898, align 4
  %7900 = sub i32 %7897, %7899
  store i32 %7900, i32* %dispatcher, align 4
  %7901 = load i8*, i8** %79, align 8
  %7902 = load i8, i8* %7901, align 1
  %7903 = mul i8 %7902, 2
  %7904 = mul i8 %7902, 2
  %7905 = add i8 2, %7904
  %7906 = mul i8 %7903, %7905
  %7907 = srem i8 %7906, 4
  %7908 = and i64 %197, -2132729108526886850
  %7909 = xor i64 %197, -1
  %7910 = xor i64 -2132729108526886850, %7909
  %7911 = and i64 %7910, -2132729108526886850
  %7912 = add i64 %84, -7936955295903563973
  %7913 = add i64 -6070328398026098551, %84
  %7914 = add i64 %7913, -1866626897877465422
  %7915 = xor i64 3415771623146097475, %7908
  %7916 = xor i64 %7915, %7911
  %7917 = xor i64 %7916, %7914
  %7918 = xor i64 %7917, %7912
  %7919 = or i64 %545, 7558816668496626958
  %7920 = xor i64 %545, -1
  %7921 = and i64 %7920, -295985169798641738
  %7922 = and i64 %545, 295985169798641737
  %7923 = or i64 %7921, %7922
  %7924 = xor i64 -7853648037743869256, %7923
  %7925 = xor i64 %545, -1
  %7926 = or i64 -7558816668496626959, %7925
  %7927 = xor i64 %7926, -1
  %7928 = and i64 %7927, -1
  %7929 = or i64 %7924, %7928
  %7930 = add i64 %1154, -7656858541661516986
  %7931 = and i64 -7656858541661516986, %1154
  %7932 = or i64 -7656858541661516986, %1154
  %7933 = add i64 %7931, %7932
  %7934 = xor i64 0, %7929
  %7935 = xor i64 %7934, %7919
  %7936 = xor i64 %7935, %7933
  %7937 = xor i64 %7936, %7930
  %7938 = mul i64 %7918, %7937
  %7939 = trunc i64 %7938 to i8
  %7940 = icmp eq i8 %7907, %7939
  %7941 = mul i8 %7902, %7902
  %7942 = add i64 %62, 5832415504743698758
  %7943 = and i64 5832415504743698758, %62
  %7944 = or i64 5832415504743698758, %62
  %7945 = add i64 %7943, %7944
  %7946 = and i64 %197, 881686214014118523
  %7947 = xor i64 %197, -1
  %7948 = or i64 -881686214014118524, %7947
  %7949 = xor i64 %7948, -1
  %7950 = and i64 %7949, -1
  %7951 = add i64 %5, -7695391061491333469
  %7952 = sub i64 0, %5
  %7953 = add i64 7695391061491333469, %7952
  %7954 = sub i64 0, %7953
  %7955 = xor i64 %7950, %7942
  %7956 = xor i64 %7955, %7946
  %7957 = xor i64 %7956, %7954
  %7958 = xor i64 %7957, -6317861266301312505
  %7959 = xor i64 %7958, %7945
  %7960 = xor i64 %7959, %7951
  %7961 = or i64 %547, -4829518241447160720
  %7962 = xor i64 %547, -1
  %7963 = and i64 -4829518241447160720, %7962
  %7964 = add i64 %7963, %547
  %7965 = and i64 %84, 1619145717921561867
  %7966 = xor i64 %84, -1
  %7967 = xor i64 1619145717921561867, %7966
  %7968 = and i64 %7967, 1619145717921561867
  %7969 = xor i64 %7961, -4436604525016861402
  %7970 = xor i64 %7969, %7968
  %7971 = xor i64 %7970, %7964
  %7972 = xor i64 %7971, %7965
  %7973 = mul i64 %7960, %7972
  %7974 = trunc i64 %7973 to i8
  %7975 = add i8 %7941, %7974
  %7976 = add i8 %7975, %7902
  %7977 = and i64 %181, -8913516117103097977
  %7978 = xor i64 %181, -1
  %7979 = xor i64 -8913516117103097977, %7978
  %7980 = and i64 %7979, -8913516117103097977
  %7981 = and i64 %66, 8010548134583741118
  %7982 = xor i64 %66, -1
  %7983 = xor i64 8010548134583741118, %7982
  %7984 = and i64 %7983, 8010548134583741118
  %7985 = xor i64 %7984, %7980
  %7986 = xor i64 %7985, %7981
  %7987 = xor i64 %7986, -3486760737512488411
  %7988 = xor i64 %7987, %7977
  %7989 = add i64 %290, 7160812229070376345
  %7990 = sub i64 0, %290
  %7991 = add i64 -7160812229070376345, %7990
  %7992 = sub i64 0, %7991
  %7993 = add i64 %506, 8229594777289096478
  %7994 = and i64 8229594777289096478, %506
  %7995 = or i64 8229594777289096478, %506
  %7996 = add i64 %7994, %7995
  %7997 = xor i64 %7993, %7996
  %7998 = xor i64 %7997, %7989
  %7999 = xor i64 %7998, %7992
  %8000 = xor i64 %7999, -4792416684046360382
  %8001 = mul i64 %7988, %8000
  %8002 = trunc i64 %8001 to i8
  %8003 = sub i8 %7976, %8002
  %8004 = srem i8 %8003, 2
  %8005 = icmp eq i8 %8004, 0
  %8006 = or i1 %7940, %8005
  %8007 = and i64 %460, -7906030732847799314
  %8008 = xor i64 %460, -1
  %8009 = or i64 7906030732847799313, %8008
  %8010 = xor i64 %8009, -1
  %8011 = and i64 %8010, -1
  %8012 = and i64 %458, 5192352458121452322
  %8013 = or i64 -5192352458121452323, %458
  %8014 = sub i64 %8013, -5192352458121452323
  %8015 = or i64 %187, -8161227365605270063
  %8016 = xor i64 %187, -1
  %8017 = and i64 %8016, 553789609604959143
  %8018 = and i64 %187, -553789609604959144
  %8019 = or i64 %8017, %8018
  %8020 = xor i64 -8569775852866709898, %8019
  %8021 = xor i64 %187, -1
  %8022 = or i64 8161227365605270062, %8021
  %8023 = xor i64 %8022, -1
  %8024 = and i64 %8023, -1
  %8025 = or i64 %8020, %8024
  %8026 = xor i64 5355229280826486903, %8014
  %8027 = xor i64 %8026, %8012
  %8028 = xor i64 %8027, %8007
  %8029 = xor i64 %8028, %8025
  %8030 = xor i64 %8029, %8011
  %8031 = xor i64 %8030, %8015
  %8032 = add i64 %547, 2917679530977994609
  %8033 = and i64 2917679530977994609, %547
  %8034 = or i64 2917679530977994609, %547
  %8035 = add i64 %8033, %8034
  %8036 = add i64 %205, 943484081614637289
  %8037 = sub i64 0, %205
  %8038 = add i64 -943484081614637289, %8037
  %8039 = sub i64 0, %8038
  %8040 = and i64 %302, 4932426396930808042
  %8041 = or i64 -4932426396930808043, %302
  %8042 = sub i64 %8041, -4932426396930808043
  %8043 = xor i64 %8039, %8040
  %8044 = xor i64 %8043, %8035
  %8045 = xor i64 %8044, %8032
  %8046 = xor i64 %8045, 3659393401113785190
  %8047 = xor i64 %8046, %8036
  %8048 = xor i64 %8047, %8042
  %8049 = mul i64 %8031, %8048
  %8050 = trunc i64 %8049 to i32
  %8051 = select i1 %8006, i32 %8050, i32 984876144
  %8052 = xor i32 %8051, 26
  store i32 %8052, i32* %4, align 4
  %8053 = call i8** @bf6047435729067610447(i32* %4)
  %8054 = load i8*, i8** %8053, align 8
  indirectbr i8* %8054, [label %loopEnd, label %7895]

8055:                                             ; preds = %8055, %loopStart
  %8056 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 32
  %8057 = load i32, i32* %8056, align 4
  %8058 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 30
  %8059 = load i32, i32* %8058, align 4
  %8060 = add i32 %8057, %8059
  store i32 %8060, i32* %dispatcher, align 4
  %8061 = load i8*, i8** %194, align 8
  %8062 = load i8, i8* %8061, align 1
  %8063 = mul i8 %8062, 2
  %8064 = mul i8 %8062, 2
  %8065 = add i8 2, %8064
  %8066 = mul i8 %8063, %8065
  %8067 = and i64 %290, 8096685433718610242
  %8068 = xor i64 %290, -1
  %8069 = xor i64 8096685433718610242, %8068
  %8070 = and i64 %8069, 8096685433718610242
  %8071 = add i64 %116, -6713964933830329055
  %8072 = xor i64 -6713964933830329055, %116
  %8073 = and i64 -6713964933830329055, %116
  %8074 = mul i64 2, %8073
  %8075 = add i64 %8072, %8074
  %8076 = or i64 %3, -6289125180200097592
  %8077 = and i64 -6289125180200097592, %3
  %8078 = xor i64 -6289125180200097592, %3
  %8079 = or i64 %8077, %8078
  %8080 = xor i64 %8070, %8071
  %8081 = xor i64 %8080, %8075
  %8082 = xor i64 %8081, 4675342976764219147
  %8083 = xor i64 %8082, %8079
  %8084 = xor i64 %8083, %8067
  %8085 = xor i64 %8084, %8076
  %8086 = and i64 %78, -2011037444109088851
  %8087 = xor i64 %78, -1
  %8088 = xor i64 -2011037444109088851, %8087
  %8089 = and i64 %8088, -2011037444109088851
  %8090 = and i64 %9, -910126436395046183
  %8091 = xor i64 %9, -1
  %8092 = or i64 910126436395046182, %8091
  %8093 = xor i64 %8092, -1
  %8094 = and i64 %8093, -1
  %8095 = and i64 %203, 1976563551509913949
  %8096 = or i64 -1976563551509913950, %203
  %8097 = sub i64 %8096, -1976563551509913950
  %8098 = xor i64 %8095, %8094
  %8099 = xor i64 %8098, %8090
  %8100 = xor i64 %8099, %8086
  %8101 = xor i64 %8100, -4954033086141361524
  %8102 = xor i64 %8101, %8097
  %8103 = xor i64 %8102, %8089
  %8104 = mul i64 %8085, %8103
  %8105 = trunc i64 %8104 to i8
  %8106 = srem i8 %8066, %8105
  %8107 = icmp eq i8 %8106, 0
  %8108 = mul i8 %8062, %8062
  %8109 = mul i8 %8108, %8062
  %8110 = add i8 %8109, %8062
  %8111 = srem i8 %8110, 2
  %8112 = icmp eq i8 %8111, 0
  %8113 = and i1 %8107, %8112
  %8114 = select i1 %8113, i32 984876104, i32 984876144
  %8115 = xor i32 %8114, 56
  store i32 %8115, i32* %4, align 4
  %8116 = call i8** @bf6047435729067610447(i32* %4)
  %8117 = load i8*, i8** %8116, align 8
  indirectbr i8* %8117, [label %loopEnd, label %8055]

8118:                                             ; preds = %8118, %loopStart
  %8119 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 60
  %8120 = load i32, i32* %8119, align 4
  %8121 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 3
  %8122 = load i32, i32* %8121, align 4
  %8123 = sub i32 %8120, %8122
  store i32 %8123, i32* %dispatcher, align 4
  %.reload71 = load i32, i32* %.reg2mem70, align 4
  store i32 %.reload71, i32* %.reg2mem105, align 4
  %8124 = load i8*, i8** %382, align 8
  %8125 = load i8, i8* %8124, align 1
  %8126 = mul i8 %8125, 2
  %8127 = mul i8 %8125, 2
  %8128 = and i8 2, %8127
  %8129 = or i8 2, %8127
  %8130 = add i8 %8128, %8129
  %8131 = mul i8 %8126, %8130
  %8132 = srem i8 %8131, 4
  %8133 = icmp eq i8 %8132, 0
  %8134 = mul i8 %8125, %8125
  %8135 = sub i8 0, %8125
  %8136 = sub i8 %8134, %8135
  %8137 = srem i8 %8136, 2
  %8138 = icmp eq i8 %8137, 0
  %8139 = xor i1 %8133, true
  %8140 = and i1 %8139, true
  %8141 = and i1 %8133, false
  %8142 = or i1 %8140, %8141
  %8143 = xor i1 %8138, true
  %8144 = and i1 %8143, true
  %8145 = or i64 %177, 6912504423736636565
  %8146 = xor i64 %177, -1
  %8147 = and i64 6912504423736636565, %8146
  %8148 = add i64 %8147, %177
  %8149 = add i64 %175, 1588263239535877979
  %8150 = add i64 2552298323063512961, %175
  %8151 = add i64 %8150, -964035083527634982
  %8152 = add i64 %381, 8849002645581020222
  %8153 = sub i64 0, %381
  %8154 = sub i64 8849002645581020222, %8153
  %8155 = xor i64 %8154, %8149
  %8156 = xor i64 %8155, %8148
  %8157 = xor i64 %8156, %8151
  %8158 = xor i64 %8157, 7089722011198839993
  %8159 = xor i64 %8158, %8145
  %8160 = xor i64 %8159, %8152
  %8161 = add i64 %11, 8383146831301139241
  %8162 = xor i64 8383146831301139241, %11
  %8163 = and i64 8383146831301139241, %11
  %8164 = mul i64 2, %8163
  %8165 = add i64 %8162, %8164
  %8166 = and i64 %304, 79032946940564475
  %8167 = xor i64 %304, -1
  %8168 = or i64 -79032946940564476, %8167
  %8169 = xor i64 %8168, -1
  %8170 = and i64 %8169, -1
  %8171 = xor i64 %8165, %8170
  %8172 = xor i64 %8171, %8166
  %8173 = xor i64 %8172, 0
  %8174 = xor i64 %8173, %8161
  %8175 = mul i64 %8160, %8174
  %8176 = trunc i64 %8175 to i1
  %8177 = and i1 %8138, %8176
  %8178 = or i1 %8144, %8177
  %8179 = xor i1 %8142, %8178
  %8180 = xor i1 %8133, true
  %8181 = xor i1 %8138, true
  %8182 = or i1 %8180, %8181
  %8183 = xor i1 %8182, true
  %8184 = and i1 %8183, true
  %8185 = or i1 %8179, %8184
  %8186 = select i1 %8185, i32 984876158, i32 984876144
  %8187 = xor i32 %8186, 14
  store i32 %8187, i32* %4, align 4
  %8188 = call i8** @bf6047435729067610447(i32* %4)
  %8189 = load i8*, i8** %8188, align 8
  indirectbr i8* %8189, [label %loopEnd, label %8118]

codeRepl13:                                       ; preds = %codeRepl13, %loopStart
  store i64 4070807658626890127, i64* %453, align 8
  %8190 = call i8** @lk8153326119118101986(i64* %453)
  %8191 = load i8*, i8** %8190, align 8
  %8192 = bitcast i8* %8191 to void (i32*, float*, float*, i64*, i64*, [65 x i32]*, i32*, i32*)*
  call void %8192(i32* %.reg2mem105, float* %0, float* %1, i64* %.reg2mem56, i64* %.reg2mem92, [65 x i32]* %lookupTable, i32* %dispatcher, i32* %.ph.reg2mem)
  %8193 = load i8*, i8** %176, align 8
  %8194 = load i8, i8* %8193, align 1
  %8195 = xor i8 %8194, -1
  %8196 = or i8 %8195, -2
  %8197 = xor i8 %8196, -1
  %8198 = and i8 %8197, -1
  %8199 = icmp eq i8 %8198, 0
  %8200 = mul i8 %8194, %8194
  %8201 = and i8 %8200, %8194
  %8202 = or i8 %8200, %8194
  %8203 = add i8 %8201, %8202
  %8204 = mul i8 %8203, 3
  %8205 = srem i8 %8204, 2
  %8206 = icmp eq i8 %8205, 0
  %8207 = or i1 %8199, %8206
  %8208 = and i64 %1154, -333770490495167782
  %8209 = or i64 333770490495167781, %1154
  %8210 = sub i64 %8209, 333770490495167781
  %8211 = and i64 %553, -1753813482740800097
  %8212 = xor i64 %553, -1
  %8213 = or i64 1753813482740800096, %8212
  %8214 = xor i64 %8213, -1
  %8215 = and i64 %8214, -1
  %8216 = xor i64 %8210, %8211
  %8217 = xor i64 %8216, %8215
  %8218 = xor i64 %8217, %8208
  %8219 = xor i64 %8218, -4792794282676428271
  %8220 = and i64 %300, 2842492823616017348
  %8221 = xor i64 %300, -1
  %8222 = xor i64 2842492823616017348, %8221
  %8223 = and i64 %8222, 2842492823616017348
  %8224 = and i64 %288, 7750950254309481589
  %8225 = xor i64 %288, -1
  %8226 = xor i64 7750950254309481589, %8225
  %8227 = and i64 %8226, 7750950254309481589
  %8228 = add i64 %1154, 5288531069104394764
  %8229 = and i64 5288531069104394764, %1154
  %8230 = or i64 5288531069104394764, %1154
  %8231 = add i64 %8229, %8230
  %8232 = xor i64 -6717027556619825808, %8227
  %8233 = xor i64 %8232, %8220
  %8234 = xor i64 %8233, %8223
  %8235 = xor i64 %8234, %8228
  %8236 = xor i64 %8235, %8231
  %8237 = xor i64 %8236, %8224
  %8238 = mul i64 %8219, %8237
  %8239 = trunc i64 %8238 to i32
  %8240 = select i1 %8207, i32 984876139, i32 %8239
  %8241 = xor i32 %8240, 27
  store i32 %8241, i32* %4, align 4
  %8242 = call i8** @bf6047435729067610447(i32* %4)
  %8243 = load i8*, i8** %8242, align 8
  indirectbr i8* %8243, [label %loopEnd, label %codeRepl13]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  %8244 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 62
  %8245 = load i32, i32* %8244, align 4
  %8246 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %8247 = load i32, i32* %8246, align 4
  %8248 = srem i32 %8245, %8247
  store i32 %8248, i32* %dispatcher, align 4
  store i32 %.ph.reload, i32* %.reg2mem107, align 4
  %8249 = load i8*, i8** %295, align 8
  %8250 = load i8, i8* %8249, align 1
  %8251 = and i8 %8250, 1
  %8252 = icmp eq i8 %8251, 1
  %8253 = mul i8 %8250, %8250
  %8254 = add i8 %8253, %8250
  %8255 = and i64 %584, 3336329052674185322
  %8256 = or i64 -3336329052674185323, %584
  %8257 = sub i64 %8256, -3336329052674185323
  %8258 = sext i32 %dispatcher1 to i64
  %8259 = add i64 %8258, -5387744653857285862
  %8260 = add i64 4458383505383224528, %8258
  %8261 = sub i64 %8260, -8600615914469041226
  %8262 = xor i64 -7054222502820661415, %8255
  %8263 = xor i64 %8262, %8257
  %8264 = xor i64 %8263, %8261
  %8265 = xor i64 %8264, %8259
  %8266 = sext i32 %dispatcher1 to i64
  %8267 = and i64 %8266, 3555116148250917521
  %8268 = xor i64 %8266, -1
  %8269 = or i64 -3555116148250917522, %8268
  %8270 = xor i64 %8269, -1
  %8271 = and i64 %8270, -1
  %8272 = or i64 %21, -7751421145106725317
  %8273 = xor i64 %21, -1
  %8274 = and i64 %8273, 5604826234880372398
  %8275 = and i64 %21, -5604826234880372399
  %8276 = or i64 %8274, %8275
  %8277 = xor i64 -2763736506309547883, %8276
  %8278 = xor i64 %21, -1
  %8279 = or i64 7751421145106725316, %8278
  %8280 = xor i64 %8279, -1
  %8281 = and i64 %8280, -1
  %8282 = or i64 %8277, %8281
  %8283 = or i64 %177, -4327879491199509699
  %8284 = xor i64 %177, -1
  %8285 = and i64 %8284, 1154762562695199858
  %8286 = and i64 %177, -1154762562695199859
  %8287 = or i64 %8285, %8286
  %8288 = xor i64 -3173134590763653297, %8287
  %8289 = xor i64 %177, -1
  %8290 = or i64 4327879491199509698, %8289
  %8291 = xor i64 %8290, -1
  %8292 = and i64 %8291, -1
  %8293 = or i64 %8288, %8292
  %8294 = xor i64 -4311975564381503022, %8283
  %8295 = xor i64 %8294, %8282
  %8296 = xor i64 %8295, %8271
  %8297 = xor i64 %8296, %8272
  %8298 = xor i64 %8297, %8293
  %8299 = xor i64 %8298, %8267
  %8300 = mul i64 %8265, %8299
  %8301 = trunc i64 %8300 to i8
  %8302 = srem i8 %8254, %8301
  %8303 = icmp eq i8 %8302, 0
  %8304 = and i1 %8252, %8303
  %8305 = xor i1 %8252, %8303
  %8306 = or i1 %8304, %8305
  %8307 = select i1 %8306, i32 984876153, i32 984876144
  %8308 = and i64 %302, -3287311331331733635
  %8309 = or i64 3287311331331733634, %302
  %8310 = sub i64 %8309, 3287311331331733634
  %8311 = add i64 %288, 200062630430400356
  %8312 = and i64 200062630430400356, %288
  %8313 = or i64 200062630430400356, %288
  %8314 = add i64 %8312, %8313
  %8315 = add i64 %296, -7414755241248637513
  %8316 = and i64 -7414755241248637513, %296
  %8317 = or i64 -7414755241248637513, %296
  %8318 = add i64 %8316, %8317
  %8319 = xor i64 %8308, 2280247211011921615
  %8320 = xor i64 %8319, %8315
  %8321 = xor i64 %8320, %8318
  %8322 = xor i64 %8321, %8314
  %8323 = xor i64 %8322, %8310
  %8324 = xor i64 %8323, %8311
  %8325 = and i64 %78, -2421235832656411120
  %8326 = or i64 2421235832656411119, %78
  %8327 = sub i64 %8326, 2421235832656411119
  %8328 = or i64 %15, 6197721588858202190
  %8329 = xor i64 %15, -1
  %8330 = and i64 6197721588858202190, %8329
  %8331 = add i64 %8330, %15
  %8332 = xor i64 -1139335588224831065, %8325
  %8333 = xor i64 %8332, %8327
  %8334 = xor i64 %8333, %8331
  %8335 = xor i64 %8334, %8328
  %8336 = mul i64 %8324, %8335
  %8337 = trunc i64 %8336 to i32
  %8338 = xor i32 %8307, %8337
  store i32 %8338, i32* %4, align 4
  %8339 = call i8** @bf6047435729067610447(i32* %4)
  %8340 = load i8*, i8** %8339, align 8
  indirectbr i8* %8340, [label %loopEnd, label %.loopexit]

8341:                                             ; preds = %loopStart
  %.reload108 = load i32, i32* %.reg2mem107, align 4
  ret i32 %.reload108

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %8342 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %8342, align 4
  %8343 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %8343, align 4
  %8344 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %8344, align 4
  %8345 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %8345, align 4
  %8346 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %8346, align 4
  %8347 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 10
  %8348 = add i64 %175, -7009429736715193159
  %8349 = sub i64 0, %175
  %8350 = add i64 7009429736715193159, %8349
  %8351 = sub i64 0, %8350
  %8352 = and i64 %296, -2478609351685895950
  %8353 = xor i64 %296, -1
  %8354 = xor i64 -2478609351685895950, %8353
  %8355 = and i64 %8354, -2478609351685895950
  %8356 = xor i64 %8351, %8352
  %8357 = xor i64 %8356, %8355
  %8358 = xor i64 %8357, %8348
  %8359 = xor i64 %8358, -8317523238587049249
  %8360 = add i64 %418, 2137303344855481232
  %8361 = sub i64 0, %418
  %8362 = sub i64 2137303344855481232, %8361
  %8363 = and i64 %78, 4529225796306934119
  %8364 = xor i64 %78, -1
  %8365 = or i64 -4529225796306934120, %8364
  %8366 = xor i64 %8365, -1
  %8367 = and i64 %8366, -1
  %8368 = add i64 %451, 8789847689736368975
  %8369 = add i64 1830269950393490249, %451
  %8370 = add i64 %8369, 6959577739342878726
  %8371 = xor i64 %8363, -4320072183323629033
  %8372 = xor i64 %8371, %8370
  %8373 = xor i64 %8372, %8362
  %8374 = xor i64 %8373, %8360
  %8375 = xor i64 %8374, %8367
  %8376 = xor i64 %8375, %8368
  %8377 = mul i64 %8359, %8376
  %8378 = trunc i64 %8377 to i32
  store i32 %8378, i32* %8347, align 4
  %8379 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %8379, align 4
  %8380 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %8380, align 4
  %8381 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %8381, align 4
  %8382 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %8382, align 4
  %8383 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %8383, align 4
  %8384 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 22
  store i32 21, i32* %8384, align 4
  %8385 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 24
  %8386 = or i64 %545, -5815064644848571728
  %8387 = xor i64 %545, -1
  %8388 = and i64 %8387, 4925798862847918108
  %8389 = and i64 %545, -4925798862847918109
  %8390 = or i64 %8388, %8389
  %8391 = xor i64 -1506649288484263252, %8390
  %8392 = xor i64 %545, -1
  %8393 = or i64 5815064644848571727, %8392
  %8394 = xor i64 %8393, -1
  %8395 = and i64 %8394, -1
  %8396 = or i64 %8391, %8395
  %8397 = or i64 %420, 4712443638163861312
  %8398 = and i64 4712443638163861312, %420
  %8399 = xor i64 4712443638163861312, %420
  %8400 = or i64 %8398, %8399
  %8401 = or i64 %385, 7176410653796430806
  %8402 = xor i64 %385, -1
  %8403 = and i64 7176410653796430806, %8402
  %8404 = add i64 %8403, %385
  %8405 = xor i64 3449900583184244953, %8400
  %8406 = xor i64 %8405, %8386
  %8407 = xor i64 %8406, %8397
  %8408 = xor i64 %8407, %8396
  %8409 = xor i64 %8408, %8401
  %8410 = xor i64 %8409, %8404
  %8411 = add i64 %545, 7662208375794211926
  %8412 = add i64 971286208826972610, %545
  %8413 = add i64 %8412, 6690922166967239316
  %8414 = and i64 %385, -2284061698357722536
  %8415 = or i64 2284061698357722535, %385
  %8416 = sub i64 %8415, 2284061698357722535
  %8417 = or i64 %191, 3201455575339391099
  %8418 = xor i64 %191, -1
  %8419 = and i64 %8418, -8755184912652376205
  %8420 = and i64 %191, 8755184912652376204
  %8421 = or i64 %8419, %8420
  %8422 = xor i64 -6191728932678353144, %8421
  %8423 = xor i64 %191, -1
  %8424 = or i64 -3201455575339391100, %8423
  %8425 = xor i64 %8424, -1
  %8426 = and i64 %8425, -1
  %8427 = or i64 %8422, %8426
  %8428 = xor i64 3880976057639277167, %8411
  %8429 = xor i64 %8428, %8416
  %8430 = xor i64 %8429, %8417
  %8431 = xor i64 %8430, %8414
  %8432 = xor i64 %8431, %8427
  %8433 = xor i64 %8432, %8413
  %8434 = mul i64 %8410, %8433
  %8435 = trunc i64 %8434 to i32
  store i32 %8435, i32* %8385, align 4
  %8436 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 26
  store i32 25, i32* %8436, align 4
  %8437 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 28
  store i32 27, i32* %8437, align 4
  %8438 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %8438, align 4
  %8439 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 32
  store i32 31, i32* %8439, align 4
  %8440 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 34
  store i32 33, i32* %8440, align 4
  %8441 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 36
  store i32 35, i32* %8441, align 4
  %8442 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 38
  store i32 37, i32* %8442, align 4
  %8443 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 40
  store i32 39, i32* %8443, align 4
  %8444 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 42
  store i32 41, i32* %8444, align 4
  %8445 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 44
  store i32 43, i32* %8445, align 4
  %8446 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 46
  store i32 45, i32* %8446, align 4
  %8447 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 48
  store i32 47, i32* %8447, align 4
  %8448 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 50
  store i32 49, i32* %8448, align 4
  %8449 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 52
  store i32 51, i32* %8449, align 4
  %8450 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 54
  store i32 53, i32* %8450, align 4
  %8451 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 56
  %8452 = and i64 %300, -7050002616118130171
  %8453 = xor i64 %300, -1
  %8454 = or i64 7050002616118130170, %8453
  %8455 = xor i64 %8454, -1
  %8456 = and i64 %8455, -1
  %8457 = add i64 %551, 9191880498464828661
  %8458 = and i64 9191880498464828661, %551
  %8459 = or i64 9191880498464828661, %551
  %8460 = add i64 %8458, %8459
  %8461 = and i64 %11, -8153111323151961025
  %8462 = or i64 8153111323151961024, %11
  %8463 = sub i64 %8462, 8153111323151961024
  %8464 = xor i64 %8457, %8463
  %8465 = xor i64 %8464, %8461
  %8466 = xor i64 %8465, %8456
  %8467 = xor i64 %8466, %8452
  %8468 = xor i64 %8467, -5615092457687803563
  %8469 = xor i64 %8468, %8460
  %8470 = add i64 %173, -1045349638398364396
  %8471 = sub i64 0, %173
  %8472 = sub i64 -1045349638398364396, %8471
  %8473 = add i64 %82, 6427245830772520116
  %8474 = xor i64 6427245830772520116, %82
  %8475 = and i64 6427245830772520116, %82
  %8476 = mul i64 2, %8475
  %8477 = add i64 %8474, %8476
  %8478 = and i64 %13, -7073441191969416996
  %8479 = xor i64 %13, -1
  %8480 = xor i64 -7073441191969416996, %8479
  %8481 = and i64 %8480, -7073441191969416996
  %8482 = xor i64 %8473, %8472
  %8483 = xor i64 %8482, %8478
  %8484 = xor i64 %8483, %8481
  %8485 = xor i64 %8484, %8477
  %8486 = xor i64 %8485, %8470
  %8487 = xor i64 %8486, 7928780984285791067
  %8488 = mul i64 %8469, %8487
  %8489 = trunc i64 %8488 to i32
  store i32 %8489, i32* %8451, align 4
  %8490 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 58
  store i32 57, i32* %8490, align 4
  %8491 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 60
  store i32 59, i32* %8491, align 4
  %8492 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 62
  store i32 61, i32* %8492, align 4
  %8493 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  store i32 63, i32* %8493, align 4
  %8494 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %8495 = load i32, i32* %8494, align 4
  store i32 %8495, i32* %dispatcher, align 4
  %8496 = load i8*, i8** %448, align 8
  %8497 = load i8, i8* %8496, align 1
  %8498 = mul i8 %8497, 2
  %8499 = and i64 %580, 5848187022259319559
  %8500 = or i64 -5848187022259319560, %580
  %8501 = sub i64 %8500, -5848187022259319560
  %8502 = add i64 %116, -8118170827155818341
  %8503 = add i64 8831374532671937312, %116
  %8504 = add i64 %8503, 1497198713881795963
  %8505 = add i64 %385, -7112068482110589231
  %8506 = sub i64 0, %385
  %8507 = sub i64 -7112068482110589231, %8506
  %8508 = xor i64 -4740481131249552999, %8504
  %8509 = xor i64 %8508, %8505
  %8510 = xor i64 %8509, %8502
  %8511 = xor i64 %8510, %8501
  %8512 = xor i64 %8511, %8507
  %8513 = xor i64 %8512, %8499
  %8514 = add i64 %205, 3225704596055504446
  %8515 = and i64 3225704596055504446, %205
  %8516 = or i64 3225704596055504446, %205
  %8517 = add i64 %8515, %8516
  %8518 = or i64 %241, 6497857863061082315
  %8519 = xor i64 %241, -1
  %8520 = and i64 %8519, 5248079413468466664
  %8521 = and i64 %241, -5248079413468466665
  %8522 = or i64 %8520, %8521
  %8523 = xor i64 1367382516371561763, %8522
  %8524 = xor i64 %241, -1
  %8525 = or i64 -6497857863061082316, %8524
  %8526 = xor i64 %8525, -1
  %8527 = and i64 %8526, -1
  %8528 = or i64 %8523, %8527
  %8529 = xor i64 %8514, %8517
  %8530 = xor i64 %8529, -8925316559534938798
  %8531 = xor i64 %8530, %8528
  %8532 = xor i64 %8531, %8518
  %8533 = mul i64 %8513, %8532
  %8534 = trunc i64 %8533 to i8
  %8535 = mul i8 %8497, %8534
  %8536 = sub i8 0, %8535
  %8537 = sub i8 2, %8536
  %8538 = mul i8 %8498, %8537
  %8539 = srem i8 %8538, 4
  %8540 = add i64 %82, 7355701419186696029
  %8541 = add i64 -4861530379381997187, %82
  %8542 = sub i64 %8541, 6229512275140858400
  %8543 = and i64 %243, 1362821941835299174
  %8544 = xor i64 %243, -1
  %8545 = xor i64 1362821941835299174, %8544
  %8546 = and i64 %8545, 1362821941835299174
  %8547 = xor i64 %8542, %8540
  %8548 = xor i64 %8547, %8543
  %8549 = xor i64 %8548, -8563830623276329201
  %8550 = xor i64 %8549, %8546
  %8551 = and i64 %72, 4702378507639745077
  %8552 = xor i64 %72, -1
  %8553 = xor i64 4702378507639745077, %8552
  %8554 = and i64 %8553, 4702378507639745077
  %8555 = add i64 %580, 5183052424617124882
  %8556 = xor i64 5183052424617124882, %580
  %8557 = and i64 5183052424617124882, %580
  %8558 = mul i64 2, %8557
  %8559 = add i64 %8556, %8558
  %8560 = xor i64 %8551, 0
  %8561 = xor i64 %8560, %8554
  %8562 = xor i64 %8561, %8559
  %8563 = xor i64 %8562, %8555
  %8564 = mul i64 %8550, %8563
  %8565 = trunc i64 %8564 to i8
  %8566 = icmp eq i8 %8539, %8565
  %8567 = mul i8 %8497, %8497
  %8568 = mul i8 %8567, %8497
  %8569 = add i8 %8568, %8497
  %8570 = srem i8 %8569, 2
  %8571 = icmp eq i8 %8570, 0
  %8572 = and i1 %8566, %8571
  %8573 = select i1 %8572, i32 984876110, i32 984876127
  %8574 = or i32 %8573, 17
  %8575 = or i64 %82, 7712238071108270142
  %8576 = and i64 7712238071108270142, %82
  %8577 = xor i64 7712238071108270142, %82
  %8578 = or i64 %8576, %8577
  %8579 = add i64 %578, 56400256385044000
  %8580 = xor i64 56400256385044000, %578
  %8581 = and i64 56400256385044000, %578
  %8582 = mul i64 2, %8581
  %8583 = add i64 %8580, %8582
  %8584 = add i64 %191, 1335528964248915340
  %8585 = sub i64 0, %191
  %8586 = add i64 -1335528964248915340, %8585
  %8587 = sub i64 0, %8586
  %8588 = xor i64 %8583, %8584
  %8589 = xor i64 %8588, -7383302304096306219
  %8590 = xor i64 %8589, %8575
  %8591 = xor i64 %8590, %8578
  %8592 = xor i64 %8591, %8587
  %8593 = xor i64 %8592, %8579
  %8594 = add i64 %82, -8375381266407430741
  %8595 = sub i64 0, %82
  %8596 = sub i64 -8375381266407430741, %8595
  %8597 = or i64 %460, -733144132037702392
  %8598 = and i64 -733144132037702392, %460
  %8599 = xor i64 -733144132037702392, %460
  %8600 = or i64 %8598, %8599
  %8601 = add i64 %582, 1551692957175004561
  %8602 = sub i64 0, %582
  %8603 = sub i64 1551692957175004561, %8602
  %8604 = xor i64 %8601, %8596
  %8605 = xor i64 %8604, %8594
  %8606 = xor i64 %8605, -2647905074139398835
  %8607 = xor i64 %8606, %8603
  %8608 = xor i64 %8607, %8600
  %8609 = xor i64 %8608, %8597
  %8610 = mul i64 %8593, %8609
  %8611 = trunc i64 %8610 to i32
  %8612 = and i32 %8573, %8611
  %8613 = sub i32 %8574, %8612
  store i32 %8613, i32* %4, align 4
  %8614 = call i8** @bf6047435729067610447(i32* %4)
  %8615 = load i8*, i8** %8614, align 8
  indirectbr i8* %8615, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %8616 = load i8*, i8** %8, align 8
  %8617 = load i8, i8* %8616, align 1
  %8618 = xor i8 %8617, -2
  %8619 = and i8 %8618, %8617
  %8620 = icmp eq i8 %8619, 0
  %8621 = mul i8 %8617, %8617
  %8622 = and i8 %8621, %8617
  %8623 = or i8 %8621, %8617
  %8624 = add i8 %8622, %8623
  %8625 = mul i8 %8624, 3
  %8626 = srem i8 %8625, 2
  %8627 = icmp eq i8 %8626, 0
  %8628 = and i1 %8620, %8627
  %8629 = xor i1 %8620, %8627
  %8630 = or i1 %8628, %8629
  %8631 = select i1 %8630, i32 984876112, i32 984876144
  %8632 = xor i32 %8631, 32
  store i32 %8632, i32* %4, align 4
  %8633 = call i8** @bf6047435729067610447(i32* %4)
  %8634 = load i8*, i8** %8633, align 8
  indirectbr i8* %8634, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.loopexit, %codeRepl13, %8118, %8055, %7895, %7834, %7803, %codeRepl12, %7630, %7572, %codeRepl11, %codeRepl10, %7245, %7083, %6964, %6725, %6359, %6273, %5943, %codeRepl9, %5777, %codeRepl8, %codeRepl7, %5524, %5492, %5467, %5370, %5244, %5159, %codeRepl6, %codeRepl5, %4768, %4544, %codeRepl4, %codeRepl3, %codeRepl2, %4171, %codeRepl1, %3916, %3851, %3713, %3502, %3322, %3222, %3095, %3031, %codeRepl, %2773, %2516, %2380, %2156, %.preheader, %1898, %1815, %1711, %1529, %1495, %1268, %EntryBasicBlockSplit
  %8635 = load i8*, i8** %386, align 8
  %8636 = load i8, i8* %8635, align 1
  %8637 = mul i8 %8636, %8636
  %8638 = add i8 %8637, %8636
  %8639 = mul i8 %8638, 3
  %8640 = srem i8 %8639, 2
  %8641 = icmp eq i8 %8640, 0
  %8642 = mul i8 %8636, %8636
  %8643 = add i8 %8642, %8636
  %8644 = srem i8 %8643, 2
  %8645 = icmp eq i8 %8644, 0
  %8646 = and i1 %8641, %8645
  %8647 = or i64 %451, 5090642458043723737
  %8648 = xor i64 %451, -1
  %8649 = and i64 5090642458043723737, %8648
  %8650 = add i64 %8649, %451
  %8651 = add i64 %17, -7397281088538503174
  %8652 = and i64 -7397281088538503174, %17
  %8653 = or i64 -7397281088538503174, %17
  %8654 = add i64 %8652, %8653
  %8655 = xor i64 5731154028920786613, %8654
  %8656 = xor i64 %8655, %8650
  %8657 = xor i64 %8656, %8647
  %8658 = xor i64 %8657, %8651
  %8659 = add i64 %578, -204791734717334817
  %8660 = add i64 -8762975084313073245, %578
  %8661 = add i64 %8660, 8558183349595738428
  %8662 = and i64 %460, -7804111632062504924
  %8663 = xor i64 %460, -1
  %8664 = or i64 7804111632062504923, %8663
  %8665 = xor i64 %8664, -1
  %8666 = and i64 %8665, -1
  %8667 = or i64 %197, -2929213557358038546
  %8668 = xor i64 %197, -1
  %8669 = and i64 -2929213557358038546, %8668
  %8670 = add i64 %8669, %197
  %8671 = xor i64 %8659, %8662
  %8672 = xor i64 %8671, %8661
  %8673 = xor i64 %8672, %8666
  %8674 = xor i64 %8673, %8670
  %8675 = xor i64 %8674, -3457491090657674395
  %8676 = xor i64 %8675, %8667
  %8677 = mul i64 %8658, %8676
  %8678 = trunc i64 %8677 to i32
  %8679 = select i1 %8646, i32 984876152, i32 %8678
  %8680 = xor i32 %8679, -1
  %8681 = and i32 %8680, 17
  %8682 = and i32 %8679, -18
  %8683 = or i32 %8681, %8682
  store i32 %8683, i32* %4, align 4
  %8684 = call i8** @bf6047435729067610447(i32* %4)
  %8685 = load i8*, i8** %8684, align 8
  indirectbr i8* %8685, [label %loopStart, label %loopEnd]
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree noinline nounwind ssp uwtable
define i32 @clear(i8* %0, i64 %1, float* %2, i64 %3) local_unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = or i64 %3, 7720708801895503195
  %6 = xor i64 %3, -1
  %7 = and i64 %6, -269862628580347098
  %8 = and i64 %3, 269862628580347097
  %9 = or i64 %7, %8
  %10 = xor i64 -7537839533322787203, %9
  %11 = xor i64 %3, -1
  %12 = or i64 -7720708801895503196, %11
  %13 = xor i64 %12, -1
  %14 = and i64 %13, -1
  %15 = or i64 %10, %14
  %16 = or i64 %3, 1707955898121525635
  %17 = xor i64 %3, -1
  %18 = and i64 %17, 2582388425464866668
  %19 = and i64 %3, -2582388425464866669
  %20 = or i64 %18, %19
  %21 = xor i64 3775595662729084655, %20
  %22 = xor i64 %3, -1
  %23 = or i64 -1707955898121525636, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = or i64 %21, %25
  %27 = add i64 %1, 1656131979543506752
  %28 = xor i64 1656131979543506752, %1
  %29 = and i64 1656131979543506752, %1
  %30 = mul i64 2, %29
  %31 = add i64 %28, %30
  %32 = xor i64 %16, %15
  %33 = xor i64 %32, %31
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, 4479336972943710589
  %36 = xor i64 %35, %27
  %37 = xor i64 %36, %5
  %38 = or i64 %1, 4203512962091919730
  %39 = xor i64 %1, -1
  %40 = and i64 4203512962091919730, %39
  %41 = add i64 %40, %1
  %42 = and i64 %1, 5189770998090337827
  %43 = xor i64 %1, -1
  %44 = or i64 -5189770998090337828, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = xor i64 %41, -7476867642558583883
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %46
  %50 = xor i64 %49, %38
  %51 = mul i64 %37, %50
  %52 = call i64 @h6542867261474098886(i64 %51)
  %53 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %52
  store i8* blockaddress(@clear, %loopEnd), i8** %53, align 8
  %54 = call i64 @h6542867261474098886(i64 984876130)
  %55 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %54
  store i8* blockaddress(@clear, %defaultSwitchBasicBlock), i8** %55, align 8
  %56 = call i64 @h6542867261474098886(i64 984876138)
  %57 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %56
  store i8* blockaddress(@clear, %1465), i8** %57, align 8
  %58 = call i64 @h6542867261474098886(i64 984876139)
  %59 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %58
  store i8* blockaddress(@clear, %1531), i8** %59, align 8
  %60 = call i64 @h6542867261474098886(i64 984876134)
  %61 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %60
  store i8* blockaddress(@clear, %codeRepl3), i8** %61, align 8
  %62 = call i64 @h6542867261474098886(i64 984876132)
  %63 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %62
  store i8* blockaddress(@clear, %1073), i8** %63, align 8
  %64 = add i64 %1, 4760639848113440533
  %65 = sub i64 0, %1
  %66 = sub i64 4760639848113440533, %65
  %67 = add i64 %1, -5312118690984787813
  %68 = xor i64 -5312118690984787813, %1
  %69 = and i64 -5312118690984787813, %1
  %70 = mul i64 2, %69
  %71 = add i64 %68, %70
  %72 = add i64 %1, 4937775470710901667
  %73 = add i64 -6655995482317666656, %1
  %74 = sub i64 %73, 6852973120680983293
  %75 = xor i64 %71, %72
  %76 = xor i64 %75, 4454490489559930025
  %77 = xor i64 %76, %66
  %78 = xor i64 %77, %67
  %79 = xor i64 %78, %64
  %80 = xor i64 %79, %74
  %81 = or i64 %1, 7780606913072754226
  %82 = and i64 7780606913072754226, %1
  %83 = xor i64 7780606913072754226, %1
  %84 = or i64 %82, %83
  %85 = add i64 %1, -7782555978137429281
  %86 = sub i64 0, %1
  %87 = sub i64 -7782555978137429281, %86
  %88 = and i64 %3, -1334014162301019972
  %89 = xor i64 %3, -1
  %90 = or i64 1334014162301019971, %89
  %91 = xor i64 %90, -1
  %92 = and i64 %91, -1
  %93 = xor i64 %81, %88
  %94 = xor i64 %93, 3622846220552383119
  %95 = xor i64 %94, %92
  %96 = xor i64 %95, %85
  %97 = xor i64 %96, %87
  %98 = xor i64 %97, %84
  %99 = mul i64 %80, %98
  %100 = call i64 @h6542867261474098886(i64 %99)
  %101 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %100
  store i8* blockaddress(@clear, %952), i8** %101, align 8
  %102 = call i64 @h6542867261474098886(i64 984876137)
  %103 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %102
  store i8* blockaddress(@clear, %codeRepl2), i8** %103, align 8
  %104 = call i64 @h6542867261474098886(i64 984876128)
  %105 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %104
  store i8* blockaddress(@clear, %codeRepl4), i8** %105, align 8
  %106 = call i64 @h6542867261474098886(i64 984876142)
  %107 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %106
  store i8* blockaddress(@clear, %692), i8** %107, align 8
  %108 = call i64 @h6542867261474098886(i64 984876136)
  %109 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %108
  store i8* blockaddress(@clear, %345), i8** %109, align 8
  %110 = call i64 @h6542867261474098886(i64 984876140)
  %111 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %110
  store i8* blockaddress(@clear, %codeRepl1), i8** %111, align 8
  %112 = call i64 @h6542867261474098886(i64 984876143)
  %113 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %112
  store i8* blockaddress(@clear, %codeRepl), i8** %113, align 8
  %114 = call i64 @h6542867261474098886(i64 984876131)
  %115 = getelementptr [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %114
  store i8* blockaddress(@clear, %loopStart), i8** %115, align 8
  %116 = alloca i64, align 8
  %117 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %118 = getelementptr [5 x i8*], [5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505, i32 0, i64 %117
  store i8* bitcast (void (i1*, i1*, [15 x i32]*, i32*, i32*)* @clear.EntryBasicBlockSplit to i8*), i8** %118, align 8
  %119 = call i64 @m4181846979565521366(i64 4070807658626890124)
  %120 = getelementptr [5 x i8*], [5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505, i32 0, i64 %119
  store i8* bitcast (void (i1*, i1*, [15 x i32]*, i32*, i1*)* @clear.extracted to i8*), i8** %120, align 8
  %121 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %122 = getelementptr [5 x i8*], [5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505, i32 0, i64 %121
  store i8* bitcast (void ([15 x i32]*, i32*, i1*, i1*)* @clear.extracted.14 to i8*), i8** %122, align 8
  %123 = call i64 @m4181846979565521366(i64 4070807658626890123)
  %124 = getelementptr [5 x i8*], [5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505, i32 0, i64 %123
  store i8* bitcast (void (i1*, [15 x i32]*, i32*, i32*)* @clear.extracted.15 to i8*), i8** %124, align 8
  %125 = call i64 @m4181846979565521366(i64 4070807658626890125)
  %126 = getelementptr [5 x i8*], [5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505, i32 0, i64 %125
  store i8* bitcast (void ([15 x i32]*, i32*)* @clear.BogusBasicBlock to i8*), i8** %126, align 8
  %127 = and i64 %1, 4299714378340078592
  %128 = xor i64 %1, -1
  %129 = or i64 -4299714378340078593, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = and i64 %1, 6219213743078544693
  %133 = xor i64 %1, -1
  %134 = xor i64 6219213743078544693, %133
  %135 = and i64 %134, 6219213743078544693
  %136 = xor i64 6573213700459800923, %132
  %137 = xor i64 %136, %135
  %138 = xor i64 %137, %127
  %139 = xor i64 %138, %131
  %140 = or i64 %1, -2084219973574985899
  %141 = and i64 -2084219973574985899, %1
  %142 = xor i64 -2084219973574985899, %1
  %143 = or i64 %141, %142
  %144 = or i64 %3, 291174438099670120
  %145 = xor i64 %3, -1
  %146 = and i64 291174438099670120, %145
  %147 = add i64 %146, %3
  %148 = xor i64 %140, %144
  %149 = xor i64 %148, %147
  %150 = xor i64 %149, %143
  %151 = xor i64 %150, -5872357225775178029
  %152 = mul i64 %139, %151
  %153 = trunc i64 %152 to i32
  %.reg2mem22 = alloca i32, i32 %153, align 4
  %.reg2mem20 = alloca i1, align 1
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem15 = alloca i1, align 1
  %.reg2mem10 = alloca i64, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem4 = alloca i1, align 1
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i1, align 1
  %lookupTable = alloca [15 x i32], align 4
  %154 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 0
  %155 = and i64 %1, -5681296933825407820
  %156 = or i64 5681296933825407819, %1
  %157 = sub i64 %156, 5681296933825407819
  %158 = and i64 %1, 8560428923357127609
  %159 = xor i64 %1, -1
  %160 = or i64 -8560428923357127610, %159
  %161 = xor i64 %160, -1
  %162 = and i64 %161, -1
  %163 = and i64 %1, -4563663052844169554
  %164 = or i64 4563663052844169553, %1
  %165 = sub i64 %164, 4563663052844169553
  %166 = xor i64 %155, %158
  %167 = xor i64 %166, %165
  %168 = xor i64 %167, %162
  %169 = xor i64 %168, %163
  %170 = xor i64 %169, %157
  %171 = xor i64 %170, 390466242382149347
  %172 = and i64 %3, 5912725118265654368
  %173 = or i64 -5912725118265654369, %3
  %174 = sub i64 %173, -5912725118265654369
  %175 = and i64 %3, -7018358434679424665
  %176 = xor i64 %3, -1
  %177 = or i64 7018358434679424664, %176
  %178 = xor i64 %177, -1
  %179 = and i64 %178, -1
  %180 = xor i64 -3610723366214974561, %175
  %181 = xor i64 %180, %174
  %182 = xor i64 %181, %172
  %183 = xor i64 %182, %179
  %184 = mul i64 %171, %183
  %185 = trunc i64 %184 to i32
  store i32 %185, i32* %154, align 4
  %186 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %186, align 4
  %187 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 2
  %188 = add i64 %1, 7520145296660173745
  %189 = add i64 -7714433218325175875, %1
  %190 = add i64 %189, -3212165558724201996
  %191 = and i64 %1, 8761249567562810797
  %192 = xor i64 %1, -1
  %193 = or i64 -8761249567562810798, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = xor i64 %188, %195
  %197 = xor i64 %196, %191
  %198 = xor i64 %197, -7823524307186000213
  %199 = xor i64 %198, %190
  %200 = add i64 %1, 8937616000002298193
  %201 = sub i64 0, %1
  %202 = sub i64 8937616000002298193, %201
  %203 = and i64 %1, 1936402099235076208
  %204 = xor i64 %1, -1
  %205 = xor i64 1936402099235076208, %204
  %206 = and i64 %205, 1936402099235076208
  %207 = xor i64 %202, %203
  %208 = xor i64 %207, %206
  %209 = xor i64 %208, -4736044437913316355
  %210 = xor i64 %209, %200
  %211 = mul i64 %199, %210
  %212 = trunc i64 %211 to i32
  store i32 %212, i32* %187, align 4
  %213 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %213, align 4
  %214 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %214, align 4
  %215 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %215, align 4
  %216 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %216, align 4
  %217 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %217, align 4
  %218 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %218, align 4
  %219 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %219, align 4
  %220 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %220, align 4
  %221 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %221, align 4
  %222 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %222, align 4
  %223 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 13
  %224 = and i64 %3, 4032911536772046678
  %225 = xor i64 %3, -1
  %226 = xor i64 4032911536772046678, %225
  %227 = and i64 %226, 4032911536772046678
  %228 = or i64 %1, -5209331573600454632
  %229 = xor i64 %1, -1
  %230 = and i64 -5209331573600454632, %229
  %231 = add i64 %230, %1
  %232 = add i64 %3, -7623457595052496282
  %233 = add i64 7954606001706855665, %3
  %234 = sub i64 %233, -2868680476950199669
  %235 = xor i64 %227, %234
  %236 = xor i64 %235, %224
  %237 = xor i64 %236, %231
  %238 = xor i64 %237, %228
  %239 = xor i64 %238, %232
  %240 = xor i64 %239, -8404288427537676677
  %241 = and i64 %1, 7791293117890874172
  %242 = xor i64 %1, -1
  %243 = or i64 -7791293117890874173, %242
  %244 = xor i64 %243, -1
  %245 = and i64 %244, -1
  %246 = or i64 %1, -2624957879316894140
  %247 = xor i64 %1, -1
  %248 = and i64 -2624957879316894140, %247
  %249 = add i64 %248, %1
  %250 = xor i64 %241, %246
  %251 = xor i64 %250, %249
  %252 = xor i64 %251, -3001532349885344002
  %253 = xor i64 %252, %245
  %254 = mul i64 %240, %253
  %255 = trunc i64 %254 to i32
  store i32 %255, i32* %223, align 4
  %256 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %256, align 4
  %257 = icmp eq i8* %0, null
  store i1 %257, i1* %.reg2mem, align 1
  %258 = icmp eq float* %2, null
  store i1 %258, i1* %.reg2mem2, align 1
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 984876131, i32* %4, align 4
  %259 = call i8** @bf16388050368864114983(i32* %4)
  %260 = load i8*, i8** %259, align 8
  indirectbr i8* %260, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %codeRepl
    i32 1, label %345
    i32 2, label %codeRepl1
    i32 3, label %692
    i32 4, label %952
    i32 5, label %1073
    i32 6, label %codeRepl2
    i32 7, label %codeRepl3
    i32 8, label %1465
    i32 9, label %1531
    i32 10, label %codeRepl4
  ]

codeRepl:                                         ; preds = %codeRepl4, %codeRepl, %loopStart
  store i64 4070807658626890127, i64* %116, align 8
  %261 = call i8** @lk17093456354810283869(i64* %116)
  %262 = load i8*, i8** %261, align 8
  %263 = bitcast i8* %262 to void (i1*, i1*, [15 x i32]*, i32*, i32*)*
  call void %263(i1* %.reg2mem, i1* %.reg2mem2, [15 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem22)
  %264 = load i8*, i8** %101, align 8
  %265 = load i8, i8* %264, align 1
  %266 = and i8 %265, 1
  %267 = icmp eq i8 %266, 0
  %268 = mul i8 %265, %265
  %269 = sub i8 %268, -114
  %270 = add i8 %269, %265
  %271 = add i8 %270, -114
  %272 = add i64 %110, -9005148996198436638
  %273 = add i64 7689967918515390819, %110
  %274 = add i64 %273, 1751627158995724159
  %275 = and i64 %114, -1142079311995339840
  %276 = xor i64 %114, -1
  %277 = or i64 1142079311995339839, %276
  %278 = xor i64 %277, -1
  %279 = and i64 %278, -1
  %280 = xor i64 %275, %272
  %281 = xor i64 %280, %274
  %282 = xor i64 %281, -7434274055498908953
  %283 = xor i64 %282, %279
  %284 = or i64 %58, -7029745190589492227
  %285 = and i64 -7029745190589492227, %58
  %286 = xor i64 -7029745190589492227, %58
  %287 = or i64 %285, %286
  %288 = and i64 %56, 1031128388085165072
  %289 = xor i64 %56, -1
  %290 = xor i64 1031128388085165072, %289
  %291 = and i64 %290, 1031128388085165072
  %292 = add i64 %123, -8585928896712104062
  %293 = and i64 -8585928896712104062, %123
  %294 = or i64 -8585928896712104062, %123
  %295 = add i64 %293, %294
  %296 = xor i64 %291, %287
  %297 = xor i64 %296, %288
  %298 = xor i64 %297, %295
  %299 = xor i64 %298, %292
  %300 = xor i64 %299, 1043392535656147589
  %301 = xor i64 %300, %284
  %302 = mul i64 %283, %301
  %303 = trunc i64 %302 to i8
  %304 = mul i8 %271, %303
  %305 = srem i8 %304, 2
  %306 = icmp eq i8 %305, 0
  %307 = and i1 %267, %306
  %308 = xor i1 %267, %306
  %309 = or i1 %307, %308
  %310 = or i64 %112, 1086473175698112382
  %311 = and i64 1086473175698112382, %112
  %312 = xor i64 1086473175698112382, %112
  %313 = or i64 %311, %312
  %314 = add i64 %106, -6052514939978568663
  %315 = add i64 -2321495915794369826, %106
  %316 = sub i64 %315, 3731019024184198837
  %317 = add i64 %125, 3598369732458261798
  %318 = xor i64 3598369732458261798, %125
  %319 = and i64 3598369732458261798, %125
  %320 = mul i64 2, %319
  %321 = add i64 %318, %320
  %322 = xor i64 %317, 2961419564400200247
  %323 = xor i64 %322, %310
  %324 = xor i64 %323, %321
  %325 = xor i64 %324, %313
  %326 = xor i64 %325, %314
  %327 = xor i64 %326, %316
  %328 = add i64 %108, -1128344482639104384
  %329 = add i64 5497132163491437035, %108
  %330 = add i64 %329, -6625476646130541419
  %331 = and i64 %52, 2894695052382220077
  %332 = xor i64 %52, -1
  %333 = xor i64 2894695052382220077, %332
  %334 = and i64 %333, 2894695052382220077
  %335 = xor i64 %330, -6569140704043462654
  %336 = xor i64 %335, %334
  %337 = xor i64 %336, %328
  %338 = xor i64 %337, %331
  %339 = mul i64 %327, %338
  %340 = trunc i64 %339 to i32
  %341 = select i1 %309, i32 %340, i32 984876129
  %342 = xor i32 %341, 15
  store i32 %342, i32* %4, align 4
  %343 = call i8** @bf16388050368864114983(i32* %4)
  %344 = load i8*, i8** %343, align 8
  indirectbr i8* %344, [label %loopEnd, label %codeRepl]

345:                                              ; preds = %345, %loopStart
  %346 = icmp ne i64 %1, 1760
  store i1 %346, i1* %.reg2mem4, align 1
  %347 = icmp ne i64 %3, 7040
  store i1 %347, i1* %.reg2mem7, align 1
  %348 = srem i64 %3, 2
  store i64 %348, i64* %.reg2mem10, align 8
  %.reload14 = load i64, i64* %.reg2mem10, align 8
  %349 = icmp eq i64 %.reload14, 0
  %350 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 5
  %351 = load i32, i32* %350, align 4
  %352 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 3
  %353 = load i32, i32* %352, align 4
  %354 = add i32 %351, %353
  %355 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 5
  %356 = load i32, i32* %355, align 4
  %357 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 4
  %358 = load i32, i32* %357, align 4
  %359 = add i32 %356, %358
  %360 = select i1 %349, i32 %354, i32 %359
  store i32 %360, i32* %dispatcher, align 4
  %361 = load i8*, i8** %61, align 8
  %362 = load i8, i8* %361, align 1
  %363 = mul i8 %362, 2
  %364 = mul i8 %362, 2
  %365 = xor i8 2, %364
  %366 = and i8 2, %364
  %367 = mul i8 2, %366
  %368 = add i8 %365, %367
  %369 = mul i8 %363, %368
  %370 = srem i8 %369, 4
  %371 = icmp eq i8 %370, 0
  %372 = mul i8 %362, %362
  %373 = sub i8 0, %362
  %374 = sub i8 %372, %373
  %375 = srem i8 %374, 2
  %376 = icmp eq i8 %375, 0
  %377 = xor i1 %371, true
  %378 = or i64 %52, 9043159512071998882
  %379 = xor i64 %52, -1
  %380 = and i64 9043159512071998882, %379
  %381 = add i64 %380, %52
  %382 = and i64 %58, 9080377915304406486
  %383 = or i64 -9080377915304406487, %58
  %384 = sub i64 %383, -9080377915304406487
  %385 = and i64 %114, -8836393917166548648
  %386 = or i64 8836393917166548647, %114
  %387 = sub i64 %386, 8836393917166548647
  %388 = xor i64 %387, %382
  %389 = xor i64 %388, 7545562343215974167
  %390 = xor i64 %389, %378
  %391 = xor i64 %390, %381
  %392 = xor i64 %391, %384
  %393 = xor i64 %392, %385
  %394 = sext i32 %dispatcher1 to i64
  %395 = or i64 %394, -134083994426806658
  %396 = xor i64 %394, -1
  %397 = and i64 %396, -2454813722289659375
  %398 = and i64 %394, 2454813722289659374
  %399 = or i64 %397, %398
  %400 = xor i64 2579749762768325743, %399
  %401 = xor i64 %394, -1
  %402 = or i64 134083994426806657, %401
  %403 = xor i64 %402, -1
  %404 = and i64 %403, -1
  %405 = or i64 %400, %404
  %406 = and i64 %123, -5597206032309081178
  %407 = or i64 5597206032309081177, %123
  %408 = sub i64 %407, 5597206032309081177
  %409 = sext i32 %dispatcher1 to i64
  %410 = and i64 %409, -6967402958367696869
  %411 = xor i64 %409, -1
  %412 = or i64 6967402958367696868, %411
  %413 = xor i64 %412, -1
  %414 = and i64 %413, -1
  %415 = xor i64 %414, %406
  %416 = xor i64 %415, %395
  %417 = xor i64 %416, %408
  %418 = xor i64 %417, %405
  %419 = xor i64 %418, %410
  %420 = xor i64 %419, -1823368093879770969
  %421 = mul i64 %393, %420
  %422 = trunc i64 %421 to i1
  %423 = and i1 %377, %422
  %424 = and i1 %371, false
  %425 = or i1 %423, %424
  %426 = xor i1 %376, true
  %427 = and i1 %426, true
  %428 = and i1 %376, false
  %429 = or i1 %427, %428
  %430 = xor i1 %425, %429
  %431 = xor i1 %371, true
  %432 = xor i1 %376, true
  %433 = or i1 %431, %432
  %434 = xor i1 %433, true
  %435 = and i1 %434, true
  %436 = or i1 %430, %435
  %437 = add i64 %121, -6771767103093861995
  %438 = sub i64 0, %121
  %439 = add i64 6771767103093861995, %438
  %440 = sub i64 0, %439
  %441 = or i64 %58, 2954823506757877355
  %442 = xor i64 %58, -1
  %443 = and i64 %442, 1154126494506146491
  %444 = and i64 %58, -1154126494506146492
  %445 = or i64 %443, %444
  %446 = xor i64 4108940633327084752, %445
  %447 = xor i64 %58, -1
  %448 = or i64 -2954823506757877356, %447
  %449 = xor i64 %448, -1
  %450 = and i64 %449, -1
  %451 = or i64 %446, %450
  %452 = xor i64 %440, %437
  %453 = xor i64 %452, %451
  %454 = xor i64 %453, -8941571239092816187
  %455 = xor i64 %454, %441
  %456 = and i64 %114, 2054570518804613010
  %457 = xor i64 %114, -1
  %458 = or i64 -2054570518804613011, %457
  %459 = xor i64 %458, -1
  %460 = and i64 %459, -1
  %461 = sext i32 %dispatcher1 to i64
  %462 = or i64 %461, 1343889933181303258
  %463 = and i64 1343889933181303258, %461
  %464 = xor i64 1343889933181303258, %461
  %465 = or i64 %463, %464
  %466 = xor i64 -922077963694008044, %465
  %467 = xor i64 %466, %456
  %468 = xor i64 %467, %462
  %469 = xor i64 %468, %460
  %470 = mul i64 %455, %469
  %471 = trunc i64 %470 to i32
  %472 = or i64 %119, 7757069522860873846
  %473 = xor i64 %119, -1
  %474 = and i64 7757069522860873846, %473
  %475 = add i64 %474, %119
  %476 = add i64 %125, 3390021692605796894
  %477 = add i64 1342104772718214337, %125
  %478 = sub i64 %477, -2047916919887582557
  %479 = add i64 %117, -1710466104143314627
  %480 = sub i64 0, %117
  %481 = sub i64 -1710466104143314627, %480
  %482 = xor i64 %478, %481
  %483 = xor i64 %482, %479
  %484 = xor i64 %483, %476
  %485 = xor i64 %484, %475
  %486 = xor i64 %485, -962045027636929443
  %487 = xor i64 %486, %472
  %488 = or i64 %60, 2126122711116422743
  %489 = xor i64 %60, -1
  %490 = and i64 %489, 5401834389185918466
  %491 = and i64 %60, -5401834389185918467
  %492 = or i64 %490, %491
  %493 = xor i64 6302412293767850069, %492
  %494 = xor i64 %60, -1
  %495 = or i64 -2126122711116422744, %494
  %496 = xor i64 %495, -1
  %497 = and i64 %496, -1
  %498 = or i64 %493, %497
  %499 = add i64 %52, 4320053596949369360
  %500 = xor i64 4320053596949369360, %52
  %501 = and i64 4320053596949369360, %52
  %502 = mul i64 2, %501
  %503 = add i64 %500, %502
  %504 = xor i64 6959668993499228117, %503
  %505 = xor i64 %504, %499
  %506 = xor i64 %505, %498
  %507 = xor i64 %506, %488
  %508 = mul i64 %487, %507
  %509 = trunc i64 %508 to i32
  %510 = select i1 %436, i32 %471, i32 %509
  %511 = or i64 %123, -2850921465468553103
  %512 = xor i64 %123, -1
  %513 = and i64 -2850921465468553103, %512
  %514 = add i64 %513, %123
  %515 = or i64 %3, -5551383991569222430
  %516 = and i64 -5551383991569222430, %3
  %517 = xor i64 -5551383991569222430, %3
  %518 = or i64 %516, %517
  %519 = xor i64 %514, %511
  %520 = xor i64 %519, %515
  %521 = xor i64 %520, %518
  %522 = xor i64 %521, -8963629058045290399
  %523 = add i64 %102, -7594117402203845234
  %524 = add i64 -4128272560027524280, %102
  %525 = add i64 %524, -3465844842176320954
  %526 = and i64 %121, 3835514409979418712
  %527 = xor i64 %121, -1
  %528 = xor i64 3835514409979418712, %527
  %529 = and i64 %528, 3835514409979418712
  %530 = add i64 %54, -5213773438657025972
  %531 = sub i64 0, %54
  %532 = add i64 5213773438657025972, %531
  %533 = sub i64 0, %532
  %534 = xor i64 %526, %533
  %535 = xor i64 %534, %525
  %536 = xor i64 %535, %530
  %537 = xor i64 %536, %523
  %538 = xor i64 %537, 3459117930571352747
  %539 = xor i64 %538, %529
  %540 = mul i64 %522, %539
  %541 = trunc i64 %540 to i32
  %542 = xor i32 %510, %541
  %543 = xor i32 %542, 144151246
  store i32 %543, i32* %4, align 4
  %544 = call i8** @bf16388050368864114983(i32* %4)
  %545 = load i8*, i8** %544, align 8
  indirectbr i8* %545, [label %loopEnd, label %345]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 4070807658626890124, i64* %116, align 8
  %546 = call i8** @lk17093456354810283869(i64* %116)
  %547 = load i8*, i8** %546, align 8
  %548 = bitcast i8* %547 to void (i1*, i1*, [15 x i32]*, i32*, i1*)*
  call void %548(i1* %.reg2mem4, i1* %.reg2mem7, [15 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem20)
  %549 = load i8*, i8** %109, align 8
  %550 = load i8, i8* %549, align 1
  %551 = mul i8 %550, 2
  %552 = mul i8 %550, 2
  %553 = sub i8 0, %552
  %554 = add i8 -2, %553
  %555 = sub i8 0, %554
  %556 = mul i8 %551, %555
  %557 = srem i8 %556, 4
  %558 = add i64 %121, -952257628175251548
  %559 = xor i64 -952257628175251548, %121
  %560 = and i64 -952257628175251548, %121
  %561 = mul i64 2, %560
  %562 = add i64 %559, %561
  %563 = add i64 %60, 5848173562903052109
  %564 = add i64 -5651862340175654483, %60
  %565 = sub i64 %564, 6946708170630845024
  %566 = and i64 %125, 6291911107523807212
  %567 = or i64 -6291911107523807213, %125
  %568 = sub i64 %567, -6291911107523807213
  %569 = xor i64 %562, %563
  %570 = xor i64 %569, %565
  %571 = xor i64 %570, %568
  %572 = xor i64 %571, %558
  %573 = xor i64 %572, 1752972169797173379
  %574 = xor i64 %573, %566
  %575 = and i64 %52, 4165615914800733301
  %576 = or i64 -4165615914800733302, %52
  %577 = sub i64 %576, -4165615914800733302
  %578 = and i64 %123, -1254069928523592052
  %579 = xor i64 %123, -1
  %580 = xor i64 -1254069928523592052, %579
  %581 = and i64 %580, -1254069928523592052
  %582 = xor i64 %578, %581
  %583 = xor i64 %582, 0
  %584 = xor i64 %583, %575
  %585 = xor i64 %584, %577
  %586 = mul i64 %574, %585
  %587 = trunc i64 %586 to i8
  %588 = icmp eq i8 %557, %587
  %589 = mul i8 %550, %550
  %590 = mul i8 %589, %550
  %591 = sub i8 0, %590
  %592 = sub i8 0, %550
  %593 = add i8 %591, %592
  %594 = add i64 %125, -5310901653513987634
  %595 = add i64 -6833413278899994820, %125
  %596 = add i64 %595, 1522511625386007186
  %597 = add i64 %108, 6190445468916432093
  %598 = add i64 -4655779884219702472, %108
  %599 = sub i64 %598, 7600518720573417051
  %600 = or i64 %62, -1807757324379370411
  %601 = xor i64 %62, -1
  %602 = and i64 %601, -7762056886165286525
  %603 = and i64 %62, 7762056886165286524
  %604 = or i64 %602, %603
  %605 = xor i64 8263590923124841942, %604
  %606 = xor i64 %62, -1
  %607 = or i64 1807757324379370410, %606
  %608 = xor i64 %607, -1
  %609 = and i64 %608, -1
  %610 = or i64 %605, %609
  %611 = xor i64 %600, %597
  %612 = xor i64 %611, %610
  %613 = xor i64 %612, -8674544579517849219
  %614 = xor i64 %613, %596
  %615 = xor i64 %614, %599
  %616 = xor i64 %615, %594
  %617 = or i64 %3, 9098877404434552427
  %618 = xor i64 %3, -1
  %619 = and i64 9098877404434552427, %618
  %620 = add i64 %619, %3
  %621 = add i64 %110, 3654137585210870266
  %622 = sub i64 0, %110
  %623 = sub i64 3654137585210870266, %622
  %624 = or i64 %62, -7348064309613050574
  %625 = xor i64 %62, -1
  %626 = and i64 %625, -8589904874040792083
  %627 = and i64 %62, 8589904874040792082
  %628 = or i64 %626, %627
  %629 = xor i64 1354714282804063967, %628
  %630 = xor i64 %62, -1
  %631 = or i64 7348064309613050573, %630
  %632 = xor i64 %631, -1
  %633 = and i64 %632, -1
  %634 = or i64 %629, %633
  %635 = xor i64 %624, %623
  %636 = xor i64 %635, %620
  %637 = xor i64 %636, %634
  %638 = xor i64 %637, %621
  %639 = xor i64 %638, 0
  %640 = xor i64 %639, %617
  %641 = mul i64 %616, %640
  %642 = trunc i64 %641 to i8
  %643 = sub i8 %642, %593
  %644 = srem i8 %643, 2
  %645 = or i64 %54, 4745888594359233571
  %646 = xor i64 %54, -1
  %647 = and i64 %646, -7182301101350168594
  %648 = and i64 %54, 7182301101350168593
  %649 = or i64 %647, %648
  %650 = xor i64 -2481589241826739251, %649
  %651 = xor i64 %54, -1
  %652 = or i64 -4745888594359233572, %651
  %653 = xor i64 %652, -1
  %654 = and i64 %653, -1
  %655 = or i64 %650, %654
  %656 = add i64 %3, 4024415287284906459
  %657 = add i64 8889037695263074476, %3
  %658 = add i64 %657, -4864622407978168017
  %659 = xor i64 %656, %645
  %660 = xor i64 %659, %658
  %661 = xor i64 %660, 1039239714494910007
  %662 = xor i64 %661, %655
  %663 = and i64 %121, -3968902309954029551
  %664 = xor i64 %121, -1
  %665 = xor i64 -3968902309954029551, %664
  %666 = and i64 %665, -3968902309954029551
  %667 = or i64 %58, 2795685144231370763
  %668 = and i64 2795685144231370763, %58
  %669 = xor i64 2795685144231370763, %58
  %670 = or i64 %668, %669
  %671 = and i64 %60, -6525368889322649229
  %672 = xor i64 %60, -1
  %673 = or i64 6525368889322649228, %672
  %674 = xor i64 %673, -1
  %675 = and i64 %674, -1
  %676 = xor i64 %663, 0
  %677 = xor i64 %676, %666
  %678 = xor i64 %677, %667
  %679 = xor i64 %678, %671
  %680 = xor i64 %679, %675
  %681 = xor i64 %680, %670
  %682 = mul i64 %662, %681
  %683 = trunc i64 %682 to i8
  %684 = icmp eq i8 %644, %683
  %685 = xor i1 %684, true
  %686 = xor i1 %588, %685
  %687 = and i1 %686, %588
  %688 = select i1 %687, i32 984876143, i32 984876129
  %689 = xor i32 %688, 14
  store i32 %689, i32* %4, align 4
  %690 = call i8** @bf16388050368864114983(i32* %4)
  %691 = load i8*, i8** %690, align 8
  indirectbr i8* %691, [label %loopEnd, label %codeRepl1]

692:                                              ; preds = %692, %loopStart
  %693 = sub i64 55, 61
  %.reload5 = load i1, i1* %.reg2mem4, align 1
  %.reload8 = load i1, i1* %.reg2mem7, align 1
  %694 = select i1 %.reload5, i1 true, i1 %.reload8
  store i1 %694, i1* %.reg2mem15, align 1
  %695 = add i64 58, 59
  %696 = add i64 %3, -5959804761931991747
  %697 = sub i64 0, %3
  %698 = sub i64 -5959804761931991747, %697
  %699 = and i64 %125, -2344789048008325456
  %700 = xor i64 %125, -1
  %701 = or i64 2344789048008325455, %700
  %702 = xor i64 %701, -1
  %703 = and i64 %702, -1
  %704 = or i64 %58, -5174136007128389410
  %705 = xor i64 %58, -1
  %706 = and i64 %705, -7230232433043268963
  %707 = and i64 %58, 7230232433043268962
  %708 = or i64 %706, %707
  %709 = xor i64 2565023599949738563, %708
  %710 = xor i64 %58, -1
  %711 = or i64 5174136007128389409, %710
  %712 = xor i64 %711, -1
  %713 = and i64 %712, -1
  %714 = or i64 %709, %713
  %715 = xor i64 %714, %696
  %716 = xor i64 %715, %698
  %717 = xor i64 %716, %703
  %718 = xor i64 %717, 557507927598251961
  %719 = xor i64 %718, %704
  %720 = xor i64 %719, %699
  %721 = or i64 %112, -3402541694890375209
  %722 = xor i64 %112, -1
  %723 = and i64 -3402541694890375209, %722
  %724 = add i64 %723, %112
  %725 = add i64 %112, -265132829012205929
  %726 = sub i64 0, %112
  %727 = add i64 265132829012205929, %726
  %728 = sub i64 0, %727
  %729 = and i64 %104, 9003185125675278867
  %730 = or i64 -9003185125675278868, %104
  %731 = sub i64 %730, -9003185125675278868
  %732 = xor i64 -5375606791243313326, %731
  %733 = xor i64 %732, %721
  %734 = xor i64 %733, %728
  %735 = xor i64 %734, %725
  %736 = xor i64 %735, %724
  %737 = xor i64 %736, %729
  %738 = mul i64 %720, %737
  %739 = sub i64 %738, 1
  %740 = srem i64 %1, 2
  %741 = or i64 %125, 6351270228568981666
  %742 = and i64 6351270228568981666, %125
  %743 = xor i64 6351270228568981666, %125
  %744 = or i64 %742, %743
  %745 = and i64 %1, 3981109692287970781
  %746 = or i64 -3981109692287970782, %1
  %747 = sub i64 %746, -3981109692287970782
  %748 = xor i64 -4407975073532506125, %741
  %749 = xor i64 %748, %744
  %750 = xor i64 %749, %747
  %751 = xor i64 %750, %745
  %752 = add i64 %110, 6174957684405885310
  %753 = and i64 6174957684405885310, %110
  %754 = or i64 6174957684405885310, %110
  %755 = add i64 %753, %754
  %756 = add i64 %3, 5752627554097616055
  %757 = add i64 -6644836301066951080, %3
  %758 = sub i64 %757, 6049280218544984481
  %759 = xor i64 %755, %756
  %760 = xor i64 %759, %758
  %761 = xor i64 %760, %752
  %762 = xor i64 %761, 0
  %763 = mul i64 %751, %762
  %764 = icmp eq i64 %740, %763
  %.reload13 = load i64, i64* %.reg2mem10, align 8
  %765 = xor i64 %.reload13, -1
  %766 = or i64 %765, 1
  %767 = xor i64 %.reload13, -1
  %768 = sub i64 %766, %767
  %769 = and i64 %121, -918007475353962019
  %770 = or i64 918007475353962018, %121
  %771 = sub i64 %770, 918007475353962018
  %772 = or i64 %102, 8027638710490577785
  %773 = xor i64 %102, -1
  %774 = and i64 %773, 3209358830742978665
  %775 = and i64 %102, -3209358830742978666
  %776 = or i64 %774, %775
  %777 = xor i64 4894858665733258000, %776
  %778 = xor i64 %102, -1
  %779 = or i64 -8027638710490577786, %778
  %780 = xor i64 %779, -1
  %781 = and i64 %780, -1
  %782 = or i64 %777, %781
  %783 = or i64 %125, -8646453899866382080
  %784 = xor i64 %125, -1
  %785 = and i64 %784, 2927471278927402967
  %786 = and i64 %125, -2927471278927402968
  %787 = or i64 %785, %786
  %788 = xor i64 -6871956044272355625, %787
  %789 = xor i64 %125, -1
  %790 = or i64 8646453899866382079, %789
  %791 = xor i64 %790, -1
  %792 = and i64 %791, -1
  %793 = or i64 %788, %792
  %794 = xor i64 -2714579972493206205, %783
  %795 = xor i64 %794, %782
  %796 = xor i64 %795, %771
  %797 = xor i64 %796, %793
  %798 = xor i64 %797, %772
  %799 = xor i64 %798, %769
  %800 = or i64 %110, -1964367204502452126
  %801 = xor i64 %110, -1
  %802 = and i64 %801, 4687383109043428866
  %803 = and i64 %110, -4687383109043428867
  %804 = or i64 %802, %803
  %805 = xor i64 -6507203978918930848, %804
  %806 = xor i64 %110, -1
  %807 = or i64 1964367204502452125, %806
  %808 = xor i64 %807, -1
  %809 = and i64 %808, -1
  %810 = or i64 %805, %809
  %811 = or i64 %100, -2619774864306208802
  %812 = xor i64 %100, -1
  %813 = and i64 -2619774864306208802, %812
  %814 = add i64 %813, %100
  %815 = add i64 %60, 8435333984232849327
  %816 = xor i64 8435333984232849327, %60
  %817 = and i64 8435333984232849327, %60
  %818 = mul i64 2, %817
  %819 = add i64 %816, %818
  %820 = xor i64 %811, %815
  %821 = xor i64 %820, %819
  %822 = xor i64 %821, %800
  %823 = xor i64 %822, %810
  %824 = xor i64 %823, 2846443227922782059
  %825 = xor i64 %824, %814
  %826 = mul i64 %799, %825
  %827 = icmp eq i64 %768, %826
  %.reload12 = load i64, i64* %.reg2mem10, align 8
  %828 = mul i64 %.reload12, %.reload12
  %.reload11 = load i64, i64* %.reg2mem10, align 8
  %829 = xor i64 %828, %.reload11
  %830 = and i64 %828, %.reload11
  %831 = mul i64 2, %830
  %832 = add i64 %829, %831
  %833 = srem i64 %832, 2
  %834 = icmp eq i64 %833, 0
  %835 = or i1 %827, %834
  store i1 %835, i1* %.reg2mem17, align 1
  %836 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 7
  %837 = load i32, i32* %836, align 4
  %838 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  %839 = load i32, i32* %838, align 4
  %840 = srem i32 %837, %839
  %841 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 5
  %842 = load i32, i32* %841, align 4
  %843 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 0
  %844 = load i32, i32* %843, align 4
  %845 = sub i32 %842, 793334132
  %846 = sub i32 %845, %844
  %847 = add i32 %846, 793334132
  %.reload19 = load i1, i1* %.reg2mem17, align 1
  %848 = select i1 %.reload19, i32 %840, i32 %847
  store i32 %848, i32* %dispatcher, align 4
  %849 = load i8*, i8** %111, align 8
  %850 = load i8, i8* %849, align 1
  %851 = mul i8 %850, 2
  %852 = mul i8 %850, 2
  %853 = sub i8 0, %852
  %854 = sub i8 2, %853
  %855 = mul i8 %851, %854
  %856 = srem i8 %855, 4
  %857 = icmp eq i8 %856, 0
  %858 = mul i8 %850, %850
  %859 = add i8 %858, %850
  %860 = srem i8 %859, 2
  %861 = icmp eq i8 %860, 0
  %862 = xor i1 %857, true
  %863 = and i1 %862, true
  %864 = and i1 %857, false
  %865 = or i1 %863, %864
  %866 = xor i1 %861, true
  %867 = add i64 %1, 5827647780042695677
  %868 = add i64 -3732068792556620229, %1
  %869 = sub i64 %868, 8887027501110235710
  %870 = or i64 %119, 842445255098611228
  %871 = xor i64 %119, -1
  %872 = and i64 842445255098611228, %871
  %873 = add i64 %872, %119
  %874 = xor i64 %873, %869
  %875 = xor i64 %874, 983134504624157985
  %876 = xor i64 %875, %867
  %877 = xor i64 %876, %870
  %878 = or i64 %102, 4705416810561378378
  %879 = xor i64 %102, -1
  %880 = and i64 4705416810561378378, %879
  %881 = add i64 %880, %102
  %882 = or i64 %58, 8809509032939694966
  %883 = xor i64 %58, -1
  %884 = and i64 %883, 2916020331299239740
  %885 = and i64 %58, -2916020331299239741
  %886 = or i64 %884, %885
  %887 = xor i64 5924028741043838026, %886
  %888 = xor i64 %58, -1
  %889 = or i64 -8809509032939694967, %888
  %890 = xor i64 %889, -1
  %891 = and i64 %890, -1
  %892 = or i64 %887, %891
  %893 = xor i64 %882, %878
  %894 = xor i64 %893, %892
  %895 = xor i64 %894, -8734888119364727071
  %896 = xor i64 %895, %881
  %897 = mul i64 %877, %896
  %898 = trunc i64 %897 to i1
  %899 = and i1 %866, %898
  %900 = and i1 %861, false
  %901 = or i1 %899, %900
  %902 = xor i1 %865, %901
  %903 = xor i1 %857, true
  %904 = xor i1 %861, true
  %905 = or i1 %903, %904
  %906 = xor i1 %905, true
  %907 = and i1 %906, true
  %908 = or i1 %902, %907
  %909 = select i1 %908, i32 984876138, i32 984876129
  %910 = or i64 %56, 5164485253424339192
  %911 = xor i64 %56, -1
  %912 = and i64 5164485253424339192, %911
  %913 = add i64 %912, %56
  %914 = add i64 %58, 9162017115205269165
  %915 = and i64 9162017115205269165, %58
  %916 = or i64 9162017115205269165, %58
  %917 = add i64 %915, %916
  %918 = or i64 %123, 2876499061178706888
  %919 = xor i64 %123, -1
  %920 = and i64 2876499061178706888, %919
  %921 = add i64 %920, %123
  %922 = xor i64 %914, %910
  %923 = xor i64 %922, 1365575868040490347
  %924 = xor i64 %923, %918
  %925 = xor i64 %924, %917
  %926 = xor i64 %925, %921
  %927 = xor i64 %926, %913
  %928 = add i64 %102, -9048508115445750948
  %929 = xor i64 -9048508115445750948, %102
  %930 = and i64 -9048508115445750948, %102
  %931 = mul i64 2, %930
  %932 = add i64 %929, %931
  %933 = or i64 %125, 289535156368218126
  %934 = xor i64 %125, -1
  %935 = and i64 289535156368218126, %934
  %936 = add i64 %935, %125
  %937 = or i64 %114, -7874841753941952791
  %938 = xor i64 %114, -1
  %939 = and i64 -7874841753941952791, %938
  %940 = add i64 %939, %114
  %941 = xor i64 %940, %936
  %942 = xor i64 %941, %933
  %943 = xor i64 %942, %928
  %944 = xor i64 %943, -3509376783684304927
  %945 = xor i64 %944, %932
  %946 = xor i64 %945, %937
  %947 = mul i64 %927, %946
  %948 = trunc i64 %947 to i32
  %949 = xor i32 %909, %948
  store i32 %949, i32* %4, align 4
  %950 = call i8** @bf16388050368864114983(i32* %4)
  %951 = load i8*, i8** %950, align 8
  indirectbr i8* %951, [label %loopEnd, label %692]

952:                                              ; preds = %952, %loopStart
  %953 = add i64 %121, 4770598570945152561
  %954 = xor i64 4770598570945152561, %121
  %955 = and i64 4770598570945152561, %121
  %956 = mul i64 2, %955
  %957 = add i64 %954, %956
  %958 = and i64 %1, 1634304944426652983
  %959 = xor i64 %1, -1
  %960 = xor i64 1634304944426652983, %959
  %961 = and i64 %960, 1634304944426652983
  %962 = add i64 %110, 8718841887022588229
  %963 = add i64 4501426699742255968, %110
  %964 = sub i64 %963, -4217415187280332261
  %965 = xor i64 -5032779788147036919, %958
  %966 = xor i64 %965, %961
  %967 = xor i64 %966, %953
  %968 = xor i64 %967, %957
  %969 = xor i64 %968, %962
  %970 = xor i64 %969, %964
  %971 = and i64 %119, 8443783140374594689
  %972 = xor i64 %119, -1
  %973 = or i64 -8443783140374594690, %972
  %974 = xor i64 %973, -1
  %975 = and i64 %974, -1
  %976 = add i64 %54, 6840000507835731818
  %977 = sub i64 0, %54
  %978 = sub i64 6840000507835731818, %977
  %979 = and i64 %119, -6186275947099311605
  %980 = or i64 6186275947099311604, %119
  %981 = sub i64 %980, 6186275947099311604
  %982 = xor i64 %971, %978
  %983 = xor i64 %982, %976
  %984 = xor i64 %983, %979
  %985 = xor i64 %984, 2011765487996864860
  %986 = xor i64 %985, %975
  %987 = xor i64 %986, %981
  %988 = mul i64 %970, %987
  %989 = mul i64 75, %988
  %990 = add i64 %112, 7654624144853024459
  %991 = sub i64 0, %112
  %992 = sub i64 7654624144853024459, %991
  %993 = or i64 %119, -3191927684978926385
  %994 = xor i64 %119, -1
  %995 = and i64 -3191927684978926385, %994
  %996 = add i64 %995, %119
  %997 = add i64 %54, 5747988302267444061
  %998 = add i64 2844466585458934923, %54
  %999 = sub i64 %998, -2903521716808509138
  %1000 = xor i64 -939249883582388735, %993
  %1001 = xor i64 %1000, %996
  %1002 = xor i64 %1001, %992
  %1003 = xor i64 %1002, %990
  %1004 = xor i64 %1003, %997
  %1005 = xor i64 %1004, %999
  %1006 = add i64 %1, -7056829348738811715
  %1007 = and i64 -7056829348738811715, %1
  %1008 = or i64 -7056829348738811715, %1
  %1009 = add i64 %1007, %1008
  %1010 = or i64 %114, -3617770742693406866
  %1011 = and i64 -3617770742693406866, %114
  %1012 = xor i64 -3617770742693406866, %114
  %1013 = or i64 %1011, %1012
  %1014 = xor i64 %1013, %1009
  %1015 = xor i64 %1014, %1010
  %1016 = xor i64 %1015, -4846203031607634409
  %1017 = xor i64 %1016, %1006
  %1018 = mul i64 %1005, %1017
  %1019 = mul i64 %1018, 65
  %1020 = sub i64 44, 12
  %1021 = and i64 %106, 2242582166990208466
  %1022 = xor i64 %106, -1
  %1023 = xor i64 2242582166990208466, %1022
  %1024 = and i64 %1023, 2242582166990208466
  %1025 = add i64 %106, 1108762291927765566
  %1026 = add i64 8436596988183884310, %106
  %1027 = sub i64 %1026, 7327834696256118744
  %1028 = add i64 %104, -4792968074237450652
  %1029 = and i64 -4792968074237450652, %104
  %1030 = or i64 -4792968074237450652, %104
  %1031 = add i64 %1029, %1030
  %1032 = xor i64 %1024, %1021
  %1033 = xor i64 %1032, %1028
  %1034 = xor i64 %1033, %1031
  %1035 = xor i64 %1034, %1025
  %1036 = xor i64 %1035, 3589944228047902575
  %1037 = xor i64 %1036, %1027
  %1038 = and i64 %125, -4502457801464077492
  %1039 = xor i64 %125, -1
  %1040 = xor i64 -4502457801464077492, %1039
  %1041 = and i64 %1040, -4502457801464077492
  %1042 = or i64 %121, 5315457475153506360
  %1043 = and i64 5315457475153506360, %121
  %1044 = xor i64 5315457475153506360, %121
  %1045 = or i64 %1043, %1044
  %1046 = xor i64 %1042, %1045
  %1047 = xor i64 %1046, %1038
  %1048 = xor i64 %1047, 4766905634428955598
  %1049 = xor i64 %1048, %1041
  %1050 = mul i64 %1037, %1049
  %1051 = add i64 96, %1050
  %1052 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  %1053 = load i32, i32* %1052, align 4
  %1054 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 8
  %1055 = load i32, i32* %1054, align 4
  %1056 = add i32 %1053, -892198921
  %1057 = sub i32 %1056, %1055
  %1058 = sub i32 %1057, -892198921
  store i32 %1058, i32* %dispatcher, align 4
  %1059 = load i8*, i8** %57, align 8
  %1060 = load i8, i8* %1059, align 1
  %1061 = and i8 %1060, 1
  %1062 = icmp eq i8 %1061, 0
  %1063 = mul i8 %1060, %1060
  %1064 = add i8 %1063, %1060
  %1065 = mul i8 %1064, 3
  %1066 = srem i8 %1065, 2
  %1067 = icmp eq i8 %1066, 0
  %1068 = or i1 %1062, %1067
  %1069 = select i1 %1068, i32 984876132, i32 984876129
  %1070 = xor i32 %1069, 5
  store i32 %1070, i32* %4, align 4
  %1071 = call i8** @bf16388050368864114983(i32* %4)
  %1072 = load i8*, i8** %1071, align 8
  indirectbr i8* %1072, [label %loopEnd, label %952]

1073:                                             ; preds = %1073, %loopStart
  %1074 = mul i64 75, 60
  %1075 = or i64 %3, -2237037026585594727
  %1076 = and i64 -2237037026585594727, %3
  %1077 = xor i64 -2237037026585594727, %3
  %1078 = or i64 %1076, %1077
  %1079 = add i64 %110, 2905576005081572744
  %1080 = sub i64 0, %110
  %1081 = add i64 -2905576005081572744, %1080
  %1082 = sub i64 0, %1081
  %1083 = and i64 %112, 1915066286354083281
  %1084 = or i64 -1915066286354083282, %112
  %1085 = sub i64 %1084, -1915066286354083282
  %1086 = xor i64 %1085, %1083
  %1087 = xor i64 %1086, %1078
  %1088 = xor i64 %1087, %1075
  %1089 = xor i64 %1088, %1079
  %1090 = xor i64 %1089, -705487421083940785
  %1091 = xor i64 %1090, %1082
  %1092 = and i64 %108, -5537233358817372656
  %1093 = or i64 5537233358817372655, %108
  %1094 = sub i64 %1093, 5537233358817372655
  %1095 = and i64 %104, 6133333289223534281
  %1096 = or i64 -6133333289223534282, %104
  %1097 = sub i64 %1096, -6133333289223534282
  %1098 = and i64 %117, 2751036250955275527
  %1099 = or i64 -2751036250955275528, %117
  %1100 = sub i64 %1099, -2751036250955275528
  %1101 = xor i64 %1097, %1095
  %1102 = xor i64 %1101, %1094
  %1103 = xor i64 %1102, %1098
  %1104 = xor i64 %1103, -9114554386722827847
  %1105 = xor i64 %1104, %1100
  %1106 = xor i64 %1105, %1092
  %1107 = mul i64 %1091, %1106
  %1108 = and i64 %3, -7441403311127823120
  %1109 = xor i64 %3, -1
  %1110 = xor i64 -7441403311127823120, %1109
  %1111 = and i64 %1110, -7441403311127823120
  %1112 = and i64 %54, -3675870902436058008
  %1113 = xor i64 %54, -1
  %1114 = or i64 3675870902436058007, %1113
  %1115 = xor i64 %1114, -1
  %1116 = and i64 %1115, -1
  %1117 = add i64 %117, 4305788915712030297
  %1118 = add i64 -8880508749175104518, %117
  %1119 = add i64 %1118, -5260446408822416801
  %1120 = xor i64 %1119, -6057083764215069013
  %1121 = xor i64 %1120, %1108
  %1122 = xor i64 %1121, %1117
  %1123 = xor i64 %1122, %1112
  %1124 = xor i64 %1123, %1111
  %1125 = xor i64 %1124, %1116
  %1126 = or i64 %56, 2387133020874691861
  %1127 = and i64 2387133020874691861, %56
  %1128 = xor i64 2387133020874691861, %56
  %1129 = or i64 %1127, %1128
  %1130 = add i64 %3, 7703969153500591884
  %1131 = and i64 7703969153500591884, %3
  %1132 = or i64 7703969153500591884, %3
  %1133 = add i64 %1131, %1132
  %1134 = or i64 %119, -6556895755496154309
  %1135 = and i64 -6556895755496154309, %119
  %1136 = xor i64 -6556895755496154309, %119
  %1137 = or i64 %1135, %1136
  %1138 = xor i64 1938551627994498243, %1129
  %1139 = xor i64 %1138, %1130
  %1140 = xor i64 %1139, %1134
  %1141 = xor i64 %1140, %1126
  %1142 = xor i64 %1141, %1137
  %1143 = xor i64 %1142, %1133
  %1144 = mul i64 %1125, %1143
  %1145 = mul i64 %1107, %1144
  %1146 = add i64 -4554525685163880205, 4554525685163880237
  %1147 = or i64 %117, 7406337665188009848
  %1148 = xor i64 %117, -1
  %1149 = and i64 %1148, 975746146442680057
  %1150 = and i64 %117, -975746146442680058
  %1151 = or i64 %1149, %1150
  %1152 = xor i64 7728761002661806465, %1151
  %1153 = xor i64 %117, -1
  %1154 = or i64 -7406337665188009849, %1153
  %1155 = xor i64 %1154, -1
  %1156 = and i64 %1155, -1
  %1157 = or i64 %1152, %1156
  %1158 = and i64 %123, -1968444644445684481
  %1159 = or i64 1968444644445684480, %123
  %1160 = sub i64 %1159, 1968444644445684480
  %1161 = xor i64 %1157, %1147
  %1162 = xor i64 %1161, -1098094746587142107
  %1163 = xor i64 %1162, %1160
  %1164 = xor i64 %1163, %1158
  %1165 = or i64 %104, 5751973631022716370
  %1166 = xor i64 %104, -1
  %1167 = and i64 5751973631022716370, %1166
  %1168 = add i64 %1167, %104
  %1169 = and i64 %106, 5502334053448911640
  %1170 = xor i64 %106, -1
  %1171 = or i64 -5502334053448911641, %1170
  %1172 = xor i64 %1171, -1
  %1173 = and i64 %1172, -1
  %1174 = and i64 %56, 8913925689495954894
  %1175 = xor i64 %56, -1
  %1176 = xor i64 8913925689495954894, %1175
  %1177 = and i64 %1176, 8913925689495954894
  %1178 = xor i64 %1165, %1177
  %1179 = xor i64 %1178, %1173
  %1180 = xor i64 %1179, %1168
  %1181 = xor i64 %1180, %1169
  %1182 = xor i64 %1181, 3180570524650215370
  %1183 = xor i64 %1182, %1174
  %1184 = mul i64 %1164, %1183
  %1185 = add i64 %1184, 128
  %1186 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 7
  %1187 = load i32, i32* %1186, align 4
  %1188 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 1
  %1189 = load i32, i32* %1188, align 4
  %1190 = sub i32 %1187, %1189
  %1191 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 12
  %1192 = load i32, i32* %1191, align 4
  %1193 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 11
  %1194 = load i32, i32* %1193, align 4
  %1195 = sub i32 %1192, %1194
  %.reload18 = load i1, i1* %.reg2mem17, align 1
  %1196 = select i1 %.reload18, i32 %1190, i32 %1195
  store i32 %1196, i32* %dispatcher, align 4
  %1197 = load i8*, i8** %105, align 8
  %1198 = load i8, i8* %1197, align 1
  %1199 = mul i8 %1198, %1198
  %1200 = add i8 %1199, %1198
  %1201 = mul i8 %1200, 3
  %1202 = srem i8 %1201, 2
  %1203 = icmp eq i8 %1202, 0
  %1204 = mul i8 %1198, %1198
  %1205 = add i8 %1204, %1198
  %1206 = srem i8 %1205, 2
  %1207 = icmp eq i8 %1206, 0
  %1208 = and i1 %1203, %1207
  %1209 = select i1 %1208, i32 984876142, i32 984876129
  %1210 = xor i32 %1209, 15
  store i32 %1210, i32* %4, align 4
  %1211 = call i8** @bf16388050368864114983(i32* %4)
  %1212 = load i8*, i8** %1211, align 8
  indirectbr i8* %1212, [label %loopEnd, label %1073]

codeRepl2:                                        ; preds = %codeRepl2, %loopStart
  %1213 = and i64 %110, -8888904786630978929
  %1214 = xor i64 %110, -1
  %1215 = or i64 8888904786630978928, %1214
  %1216 = xor i64 %1215, -1
  %1217 = and i64 %1216, -1
  %1218 = add i64 %102, -7784914650865193531
  %1219 = sub i64 0, %102
  %1220 = add i64 7784914650865193531, %1219
  %1221 = sub i64 0, %1220
  %1222 = or i64 %121, 732388062926487963
  %1223 = and i64 732388062926487963, %121
  %1224 = xor i64 732388062926487963, %121
  %1225 = or i64 %1223, %1224
  %1226 = xor i64 %1222, %1217
  %1227 = xor i64 %1226, %1221
  %1228 = xor i64 %1227, %1225
  %1229 = xor i64 %1228, %1213
  %1230 = xor i64 %1229, 8955716198091405939
  %1231 = xor i64 %1230, %1218
  %1232 = and i64 %3, -1741894826814879491
  %1233 = or i64 1741894826814879490, %3
  %1234 = sub i64 %1233, 1741894826814879490
  %1235 = add i64 %1, 5647795626327639202
  %1236 = and i64 5647795626327639202, %1
  %1237 = or i64 5647795626327639202, %1
  %1238 = add i64 %1236, %1237
  %1239 = xor i64 %1232, %1235
  %1240 = xor i64 %1239, 1449666476970981050
  %1241 = xor i64 %1240, %1234
  %1242 = xor i64 %1241, %1238
  %1243 = mul i64 %1231, %1242
  store i64 %1243, i64* %116, align 8
  %1244 = call i8** @lk17093456354810283869(i64* %116)
  %1245 = load i8*, i8** %1244, align 8
  %1246 = bitcast i8* %1245 to void ([15 x i32]*, i32*, i1*, i1*)*
  call void %1246([15 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem15, i1* %.reg2mem20)
  %1247 = load i8*, i8** %59, align 8
  %1248 = load i8, i8* %1247, align 1
  %1249 = mul i8 %1248, %1248
  %1250 = sub i8 0, %1249
  %1251 = sub i8 0, %1248
  %1252 = add i8 %1250, %1251
  %1253 = and i64 %104, -6520605221527519004
  %1254 = xor i64 %104, -1
  %1255 = or i64 6520605221527519003, %1254
  %1256 = xor i64 %1255, -1
  %1257 = and i64 %1256, -1
  %1258 = and i64 %106, 5274881311446415370
  %1259 = or i64 -5274881311446415371, %106
  %1260 = sub i64 %1259, -5274881311446415371
  %1261 = and i64 %112, 6888014525457244748
  %1262 = xor i64 %112, -1
  %1263 = or i64 -6888014525457244749, %1262
  %1264 = xor i64 %1263, -1
  %1265 = and i64 %1264, -1
  %1266 = xor i64 %1260, %1257
  %1267 = xor i64 %1266, %1265
  %1268 = xor i64 %1267, %1258
  %1269 = xor i64 %1268, %1253
  %1270 = xor i64 %1269, 3613371845469959717
  %1271 = xor i64 %1270, %1261
  %1272 = and i64 %102, 3366938681725295642
  %1273 = xor i64 %102, -1
  %1274 = xor i64 3366938681725295642, %1273
  %1275 = and i64 %1274, 3366938681725295642
  %1276 = and i64 %104, -2411790492938077721
  %1277 = or i64 2411790492938077720, %104
  %1278 = sub i64 %1277, 2411790492938077720
  %1279 = and i64 %100, 2283355843473952230
  %1280 = or i64 -2283355843473952231, %100
  %1281 = sub i64 %1280, -2283355843473952231
  %1282 = xor i64 0, %1279
  %1283 = xor i64 %1282, %1281
  %1284 = xor i64 %1283, %1275
  %1285 = xor i64 %1284, %1278
  %1286 = xor i64 %1285, %1272
  %1287 = xor i64 %1286, %1276
  %1288 = mul i64 %1271, %1287
  %1289 = trunc i64 %1288 to i8
  %1290 = sub i8 %1289, %1252
  %1291 = or i64 %54, -3496753125583050667
  %1292 = xor i64 %54, -1
  %1293 = and i64 -3496753125583050667, %1292
  %1294 = add i64 %1293, %54
  %1295 = add i64 %104, -7292643106617400907
  %1296 = and i64 -7292643106617400907, %104
  %1297 = or i64 -7292643106617400907, %104
  %1298 = add i64 %1296, %1297
  %1299 = and i64 %110, -3560963040183233520
  %1300 = xor i64 %110, -1
  %1301 = xor i64 -3560963040183233520, %1300
  %1302 = and i64 %1301, -3560963040183233520
  %1303 = xor i64 %1298, %1294
  %1304 = xor i64 %1303, %1302
  %1305 = xor i64 %1304, %1291
  %1306 = xor i64 %1305, %1295
  %1307 = xor i64 %1306, 198528794760732717
  %1308 = xor i64 %1307, %1299
  %1309 = and i64 %102, 4584129526148341141
  %1310 = or i64 -4584129526148341142, %102
  %1311 = sub i64 %1310, -4584129526148341142
  %1312 = add i64 %104, -3967232555910275578
  %1313 = add i64 4773192854839024511, %104
  %1314 = add i64 %1313, -8740425410749300089
  %1315 = add i64 %62, -6937064945304989905
  %1316 = and i64 -6937064945304989905, %62
  %1317 = or i64 -6937064945304989905, %62
  %1318 = add i64 %1316, %1317
  %1319 = xor i64 %1309, %1318
  %1320 = xor i64 %1319, -3594171297658515729
  %1321 = xor i64 %1320, %1311
  %1322 = xor i64 %1321, %1314
  %1323 = xor i64 %1322, %1312
  %1324 = xor i64 %1323, %1315
  %1325 = mul i64 %1308, %1324
  %1326 = trunc i64 %1325 to i8
  %1327 = mul i8 %1290, %1326
  %1328 = sext i32 %dispatcher1 to i64
  %1329 = and i64 %1328, 2292751433616977643
  %1330 = xor i64 %1328, -1
  %1331 = or i64 -2292751433616977644, %1330
  %1332 = xor i64 %1331, -1
  %1333 = and i64 %1332, -1
  %1334 = and i64 %52, 1390330014542727981
  %1335 = or i64 -1390330014542727982, %52
  %1336 = sub i64 %1335, -1390330014542727982
  %1337 = and i64 %54, 5160993365919983277
  %1338 = xor i64 %54, -1
  %1339 = xor i64 5160993365919983277, %1338
  %1340 = and i64 %1339, 5160993365919983277
  %1341 = xor i64 %1329, %1337
  %1342 = xor i64 %1341, %1334
  %1343 = xor i64 %1342, %1340
  %1344 = xor i64 %1343, %1333
  %1345 = xor i64 %1344, %1336
  %1346 = xor i64 %1345, 7244024687499881543
  %1347 = and i64 %60, 7072912001024793726
  %1348 = xor i64 %60, -1
  %1349 = or i64 -7072912001024793727, %1348
  %1350 = xor i64 %1349, -1
  %1351 = and i64 %1350, -1
  %1352 = and i64 %58, -6312894931065371600
  %1353 = xor i64 %58, -1
  %1354 = xor i64 -6312894931065371600, %1353
  %1355 = and i64 %1354, -6312894931065371600
  %1356 = xor i64 %1352, %1351
  %1357 = xor i64 %1356, %1347
  %1358 = xor i64 %1357, -3691445843790038290
  %1359 = xor i64 %1358, %1355
  %1360 = mul i64 %1346, %1359
  %1361 = trunc i64 %1360 to i8
  %1362 = srem i8 %1327, %1361
  %1363 = add i64 %123, 1352339349763188031
  %1364 = sub i64 0, %123
  %1365 = sub i64 1352339349763188031, %1364
  %1366 = add i64 %56, -9055554342250032083
  %1367 = sub i64 0, %56
  %1368 = sub i64 -9055554342250032083, %1367
  %1369 = and i64 %58, 4695056541719369125
  %1370 = xor i64 %58, -1
  %1371 = xor i64 4695056541719369125, %1370
  %1372 = and i64 %1371, 4695056541719369125
  %1373 = xor i64 %1369, %1363
  %1374 = xor i64 %1373, %1372
  %1375 = xor i64 %1374, 4596544484658803865
  %1376 = xor i64 %1375, %1368
  %1377 = xor i64 %1376, %1366
  %1378 = xor i64 %1377, %1365
  %1379 = sext i32 %dispatcher1 to i64
  %1380 = and i64 %1379, -1455540510945407193
  %1381 = xor i64 %1379, -1
  %1382 = xor i64 -1455540510945407193, %1381
  %1383 = and i64 %1382, -1455540510945407193
  %1384 = or i64 %3, 4751420496160778196
  %1385 = xor i64 %3, -1
  %1386 = and i64 4751420496160778196, %1385
  %1387 = add i64 %1386, %3
  %1388 = xor i64 %1380, 0
  %1389 = xor i64 %1388, %1384
  %1390 = xor i64 %1389, %1383
  %1391 = xor i64 %1390, %1387
  %1392 = mul i64 %1378, %1391
  %1393 = trunc i64 %1392 to i8
  %1394 = icmp eq i8 %1362, %1393
  %1395 = mul i8 %1248, %1248
  %1396 = add i8 %1395, %1248
  %1397 = srem i8 %1396, 2
  %1398 = icmp eq i8 %1397, 0
  %1399 = and i1 %1394, %1398
  %1400 = select i1 %1399, i32 984876139, i32 984876129
  %1401 = xor i32 %1400, 10
  store i32 %1401, i32* %4, align 4
  %1402 = call i8** @bf16388050368864114983(i32* %4)
  %1403 = load i8*, i8** %1402, align 8
  indirectbr i8* %1403, [label %loopEnd, label %codeRepl2]

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  store i64 4070807658626890123, i64* %116, align 8
  %1404 = call i8** @lk17093456354810283869(i64* %116)
  %1405 = load i8*, i8** %1404, align 8
  %1406 = bitcast i8* %1405 to void (i1*, [15 x i32]*, i32*, i32*)*
  call void %1406(i1* %.reg2mem20, [15 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem22)
  %1407 = load i8*, i8** %59, align 8
  %1408 = load i8, i8* %1407, align 1
  %1409 = mul i8 %1408, 2
  %1410 = mul i8 %1408, 2
  %1411 = add i8 2, %1410
  %1412 = mul i8 %1409, %1411
  %1413 = srem i8 %1412, 4
  %1414 = icmp eq i8 %1413, 0
  %1415 = mul i8 %1408, %1408
  %1416 = add i8 %1415, %1408
  %1417 = srem i8 %1416, 2
  %1418 = icmp eq i8 %1417, 0
  %1419 = xor i1 %1414, true
  %1420 = or i1 %1419, %1418
  %1421 = xor i1 %1414, true
  %1422 = sub i1 %1420, %1421
  %1423 = sext i32 %dispatcher1 to i64
  %1424 = and i64 %1423, 3029240443480075265
  %1425 = xor i64 %1423, -1
  %1426 = xor i64 3029240443480075265, %1425
  %1427 = and i64 %1426, 3029240443480075265
  %1428 = add i64 %58, 7941195158336622725
  %1429 = sub i64 0, %58
  %1430 = sub i64 7941195158336622725, %1429
  %1431 = and i64 %62, 86880478284955480
  %1432 = xor i64 %62, -1
  %1433 = xor i64 86880478284955480, %1432
  %1434 = and i64 %1433, 86880478284955480
  %1435 = xor i64 -693843622159042287, %1427
  %1436 = xor i64 %1435, %1434
  %1437 = xor i64 %1436, %1428
  %1438 = xor i64 %1437, %1424
  %1439 = xor i64 %1438, %1430
  %1440 = xor i64 %1439, %1431
  %1441 = add i64 %106, 6511183703143081651
  %1442 = add i64 -6473817386991435546, %106
  %1443 = add i64 %1442, -5461742983575034419
  %1444 = or i64 %1, 2053023333978839583
  %1445 = xor i64 %1, -1
  %1446 = and i64 %1445, 7877330578949979638
  %1447 = and i64 %1, -7877330578949979639
  %1448 = or i64 %1446, %1447
  %1449 = xor i64 8154941080337852393, %1448
  %1450 = xor i64 %1, -1
  %1451 = or i64 -2053023333978839584, %1450
  %1452 = xor i64 %1451, -1
  %1453 = and i64 %1452, -1
  %1454 = or i64 %1449, %1453
  %1455 = xor i64 %1454, %1444
  %1456 = xor i64 %1455, %1443
  %1457 = xor i64 %1456, -5256801512613794358
  %1458 = xor i64 %1457, %1441
  %1459 = mul i64 %1440, %1458
  %1460 = trunc i64 %1459 to i32
  %1461 = select i1 %1422, i32 %1460, i32 984876129
  %1462 = xor i32 %1461, 11
  store i32 %1462, i32* %4, align 4
  %1463 = call i8** @bf16388050368864114983(i32* %4)
  %1464 = load i8*, i8** %1463, align 8
  indirectbr i8* %1464, [label %loopEnd, label %codeRepl3]

1465:                                             ; preds = %1465, %loopStart
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1760) %0, i8 32, i64 1760, i1 false) #12
  %1466 = bitcast float* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(7040) %1466, i8 0, i64 7040, i1 false) #12
  %1467 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 12
  %1468 = load i32, i32* %1467, align 4
  %1469 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  %1470 = load i32, i32* %1469, align 4
  %1471 = srem i32 %1468, %1470
  store i32 %1471, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem22, align 4
  %1472 = load i8*, i8** %105, align 8
  %1473 = load i8, i8* %1472, align 1
  %1474 = xor i8 %1473, -1
  %1475 = or i8 %1474, -2
  %1476 = xor i8 %1475, -1
  %1477 = and i8 %1476, -1
  %1478 = icmp eq i8 %1477, 1
  %1479 = mul i8 %1473, %1473
  %1480 = add i8 %1479, %1473
  %1481 = srem i8 %1480, 2
  %1482 = icmp eq i8 %1481, 0
  %1483 = or i1 %1478, %1482
  %1484 = add i64 %106, -310763500867756749
  %1485 = add i64 -3544502075889694525, %106
  %1486 = add i64 %1485, 3233738575021937776
  %1487 = or i64 %123, -3626586703102292767
  %1488 = and i64 -3626586703102292767, %123
  %1489 = xor i64 -3626586703102292767, %123
  %1490 = or i64 %1488, %1489
  %1491 = xor i64 %1490, %1487
  %1492 = xor i64 %1491, 1764463549877077879
  %1493 = xor i64 %1492, %1484
  %1494 = xor i64 %1493, %1486
  %1495 = add i64 %114, -1237273421181211150
  %1496 = sub i64 0, %114
  %1497 = add i64 1237273421181211150, %1496
  %1498 = sub i64 0, %1497
  %1499 = add i64 %1, -1930047580671764256
  %1500 = xor i64 -1930047580671764256, %1
  %1501 = and i64 -1930047580671764256, %1
  %1502 = mul i64 2, %1501
  %1503 = add i64 %1500, %1502
  %1504 = or i64 %106, -694665179825323196
  %1505 = xor i64 %106, -1
  %1506 = and i64 %1505, -7943198421653256952
  %1507 = and i64 %106, 7943198421653256951
  %1508 = or i64 %1506, %1507
  %1509 = xor i64 7464745716427507276, %1508
  %1510 = xor i64 %106, -1
  %1511 = or i64 694665179825323195, %1510
  %1512 = xor i64 %1511, -1
  %1513 = and i64 %1512, -1
  %1514 = or i64 %1509, %1513
  %1515 = xor i64 %1495, 7724950671932276085
  %1516 = xor i64 %1515, %1514
  %1517 = xor i64 %1516, %1503
  %1518 = xor i64 %1517, %1499
  %1519 = xor i64 %1518, %1498
  %1520 = xor i64 %1519, %1504
  %1521 = mul i64 %1494, %1520
  %1522 = trunc i64 %1521 to i32
  %1523 = select i1 %1483, i32 %1522, i32 984876129
  %1524 = xor i32 %1523, -1
  %1525 = and i32 %1524, -1257012944
  %1526 = and i32 %1523, 1257012943
  %1527 = or i32 %1525, %1526
  %1528 = xor i32 %1527, -1257012942
  store i32 %1528, i32* %4, align 4
  %1529 = call i8** @bf16388050368864114983(i32* %4)
  %1530 = load i8*, i8** %1529, align 8
  indirectbr i8* %1530, [label %loopEnd, label %1465]

1531:                                             ; preds = %loopStart
  %.reload23 = load i32, i32* %.reg2mem22, align 4
  ret i32 %.reload23

codeRepl4:                                        ; preds = %codeRepl4, %loopStart
  store i64 4070807658626890125, i64* %116, align 8
  %1532 = call i8** @lk17093456354810283869(i64* %116)
  %1533 = load i8*, i8** %1532, align 8
  %1534 = bitcast i8* %1533 to void ([15 x i32]*, i32*)*
  call void %1534([15 x i32]* %lookupTable, i32* %dispatcher)
  %1535 = load i8*, i8** %55, align 8
  %1536 = load i8, i8* %1535, align 1
  %1537 = mul i8 %1536, 2
  %1538 = mul i8 %1536, 2
  %1539 = sext i32 %dispatcher1 to i64
  %1540 = add i64 %1539, 7265819005584648178
  %1541 = sub i64 0, %1539
  %1542 = sub i64 7265819005584648178, %1541
  %1543 = add i64 %125, -2126373890074827567
  %1544 = sub i64 0, %125
  %1545 = sub i64 -2126373890074827567, %1544
  %1546 = sext i32 %dispatcher1 to i64
  %1547 = and i64 %1546, 3178543656014839911
  %1548 = or i64 -3178543656014839912, %1546
  %1549 = sub i64 %1548, -3178543656014839912
  %1550 = xor i64 %1545, %1540
  %1551 = xor i64 %1550, %1549
  %1552 = xor i64 %1551, %1547
  %1553 = xor i64 %1552, -3453473745956421931
  %1554 = xor i64 %1553, %1543
  %1555 = xor i64 %1554, %1542
  %1556 = add i64 %106, -4140639325803479086
  %1557 = add i64 -8205702592918355465, %106
  %1558 = add i64 %1557, 4065063267114876379
  %1559 = or i64 %1, -357034467750040719
  %1560 = and i64 -357034467750040719, %1
  %1561 = xor i64 -357034467750040719, %1
  %1562 = or i64 %1560, %1561
  %1563 = xor i64 %1558, %1556
  %1564 = xor i64 %1563, -6344999030377933574
  %1565 = xor i64 %1564, %1562
  %1566 = xor i64 %1565, %1559
  %1567 = mul i64 %1555, %1566
  %1568 = trunc i64 %1567 to i8
  %1569 = add i8 %1568, %1538
  %1570 = mul i8 %1537, %1569
  %1571 = srem i8 %1570, 4
  %1572 = icmp eq i8 %1571, 0
  %1573 = mul i8 %1536, %1536
  %1574 = add i8 %1573, %1536
  %1575 = srem i8 %1574, 2
  %1576 = icmp eq i8 %1575, 0
  %1577 = and i1 %1572, %1576
  %1578 = add i64 %123, 101964904947168511
  %1579 = sub i64 0, %123
  %1580 = add i64 -101964904947168511, %1579
  %1581 = sub i64 0, %1580
  %1582 = add i64 %52, 5040904593736562239
  %1583 = sub i64 0, %52
  %1584 = add i64 -5040904593736562239, %1583
  %1585 = sub i64 0, %1584
  %1586 = xor i64 %1581, %1578
  %1587 = xor i64 %1586, %1582
  %1588 = xor i64 %1587, %1585
  %1589 = xor i64 %1588, -7832833066348977125
  %1590 = add i64 %58, 546932579196984036
  %1591 = add i64 -157329409939425543, %58
  %1592 = add i64 %1591, 704261989136409579
  %1593 = or i64 %112, 6310900991465401554
  %1594 = xor i64 %112, -1
  %1595 = and i64 6310900991465401554, %1594
  %1596 = add i64 %1595, %112
  %1597 = add i64 %62, -1006952144783120226
  %1598 = and i64 -1006952144783120226, %62
  %1599 = or i64 -1006952144783120226, %62
  %1600 = add i64 %1598, %1599
  %1601 = xor i64 3852953933942922813, %1596
  %1602 = xor i64 %1601, %1597
  %1603 = xor i64 %1602, %1592
  %1604 = xor i64 %1603, %1590
  %1605 = xor i64 %1604, %1600
  %1606 = xor i64 %1605, %1593
  %1607 = mul i64 %1589, %1606
  %1608 = trunc i64 %1607 to i32
  %1609 = select i1 %1577, i32 984876128, i32 %1608
  %1610 = xor i32 %1609, 509350080
  %1611 = add i64 %117, 7218888523591620576
  %1612 = sub i64 0, %117
  %1613 = sub i64 7218888523591620576, %1612
  %1614 = and i64 %106, 1349486620119451480
  %1615 = xor i64 %106, -1
  %1616 = or i64 -1349486620119451481, %1615
  %1617 = xor i64 %1616, -1
  %1618 = and i64 %1617, -1
  %1619 = or i64 %62, 5151297659773709167
  %1620 = and i64 5151297659773709167, %62
  %1621 = xor i64 5151297659773709167, %62
  %1622 = or i64 %1620, %1621
  %1623 = xor i64 %1614, %1619
  %1624 = xor i64 %1623, %1618
  %1625 = xor i64 %1624, %1611
  %1626 = xor i64 %1625, -2193610440719202233
  %1627 = xor i64 %1626, %1613
  %1628 = xor i64 %1627, %1622
  %1629 = add i64 %110, -2972844562784664862
  %1630 = add i64 628969282226218656, %110
  %1631 = sub i64 %1630, 3601813845010883518
  %1632 = or i64 %58, 5288121574603104575
  %1633 = xor i64 %58, -1
  %1634 = and i64 5288121574603104575, %1633
  %1635 = add i64 %1634, %58
  %1636 = xor i64 8070245246495194937, %1635
  %1637 = xor i64 %1636, %1632
  %1638 = xor i64 %1637, %1631
  %1639 = xor i64 %1638, %1629
  %1640 = mul i64 %1628, %1639
  %1641 = trunc i64 %1640 to i32
  %1642 = xor i32 %1610, %1641
  store i32 %1642, i32* %4, align 4
  %1643 = call i8** @bf16388050368864114983(i32* %4)
  %1644 = load i8*, i8** %1643, align 8
  indirectbr i8* %1644, [label %codeRepl, label %codeRepl4]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1645 = load i8*, i8** %59, align 8
  %1646 = load i8, i8* %1645, align 1
  %1647 = mul i8 %1646, 2
  %1648 = mul i8 %1646, 2
  %1649 = sub i8 0, %1648
  %1650 = add i8 -2, %1649
  %1651 = or i64 %1, 586922220609611443
  %1652 = xor i64 %1, -1
  %1653 = and i64 %1652, -5441616720909216348
  %1654 = and i64 %1, 5441616720909216347
  %1655 = or i64 %1653, %1654
  %1656 = xor i64 -4873364519195675881, %1655
  %1657 = xor i64 %1, -1
  %1658 = or i64 -586922220609611444, %1657
  %1659 = xor i64 %1658, -1
  %1660 = and i64 %1659, -1
  %1661 = or i64 %1656, %1660
  %1662 = add i64 %114, -2388748996671082090
  %1663 = xor i64 -2388748996671082090, %114
  %1664 = and i64 -2388748996671082090, %114
  %1665 = mul i64 2, %1664
  %1666 = add i64 %1663, %1665
  %1667 = xor i64 5948597031477417059, %1661
  %1668 = xor i64 %1667, %1662
  %1669 = xor i64 %1668, %1651
  %1670 = xor i64 %1669, %1666
  %1671 = add i64 %104, -7523395444021808472
  %1672 = and i64 -7523395444021808472, %104
  %1673 = or i64 -7523395444021808472, %104
  %1674 = add i64 %1672, %1673
  %1675 = and i64 %52, -1747120288606930950
  %1676 = or i64 1747120288606930949, %52
  %1677 = sub i64 %1676, 1747120288606930949
  %1678 = xor i64 0, %1671
  %1679 = xor i64 %1678, %1677
  %1680 = xor i64 %1679, %1675
  %1681 = xor i64 %1680, %1674
  %1682 = mul i64 %1670, %1681
  %1683 = trunc i64 %1682 to i8
  %1684 = sub i8 %1683, %1650
  %1685 = mul i8 %1647, %1684
  %1686 = srem i8 %1685, 4
  %1687 = icmp eq i8 %1686, 0
  %1688 = mul i8 %1646, %1646
  %1689 = add i8 %1688, -92
  %1690 = add i8 %1689, %1646
  %1691 = sub i8 %1690, -92
  %1692 = srem i8 %1691, 2
  %1693 = icmp eq i8 %1692, 0
  %1694 = and i1 %1687, %1693
  %1695 = xor i1 %1687, %1693
  %1696 = or i1 %1694, %1695
  %1697 = select i1 %1696, i32 984876137, i32 984876129
  %1698 = and i64 %3, 5004587348491746828
  %1699 = or i64 -5004587348491746829, %3
  %1700 = sub i64 %1699, -5004587348491746829
  %1701 = add i64 %125, -5316778563158659430
  %1702 = add i64 7094649985950336177, %125
  %1703 = sub i64 %1702, -6035315524600556009
  %1704 = and i64 %121, 8497302654809460495
  %1705 = xor i64 %121, -1
  %1706 = xor i64 8497302654809460495, %1705
  %1707 = and i64 %1706, 8497302654809460495
  %1708 = xor i64 %1701, %1707
  %1709 = xor i64 %1708, %1704
  %1710 = xor i64 %1709, %1703
  %1711 = xor i64 %1710, -453598180600679413
  %1712 = xor i64 %1711, %1700
  %1713 = xor i64 %1712, %1698
  %1714 = and i64 %3, 4083150973999254283
  %1715 = xor i64 %3, -1
  %1716 = or i64 -4083150973999254284, %1715
  %1717 = xor i64 %1716, -1
  %1718 = and i64 %1717, -1
  %1719 = add i64 %60, 3896534075644734121
  %1720 = and i64 3896534075644734121, %60
  %1721 = or i64 3896534075644734121, %60
  %1722 = add i64 %1720, %1721
  %1723 = xor i64 %1714, 1599622411787470941
  %1724 = xor i64 %1723, %1718
  %1725 = xor i64 %1724, %1722
  %1726 = xor i64 %1725, %1719
  %1727 = mul i64 %1713, %1726
  %1728 = trunc i64 %1727 to i32
  %1729 = xor i32 %1697, %1728
  %1730 = and i32 %1729, -1748019303
  %1731 = and i32 %1697, 1748019302
  %1732 = or i32 %1730, %1731
  %1733 = xor i32 %1732, -1748019311
  store i32 %1733, i32* %4, align 4
  %1734 = call i8** @bf16388050368864114983(i32* %4)
  %1735 = load i8*, i8** %1734, align 8
  indirectbr i8* %1735, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %1465, %codeRepl3, %codeRepl2, %1073, %952, %692, %codeRepl1, %345, %codeRepl
  %1736 = load i8*, i8** %53, align 8
  %1737 = load i8, i8* %1736, align 1
  %1738 = mul i8 %1737, 2
  %1739 = mul i8 %1737, 2
  %1740 = add i8 2, %1739
  %1741 = mul i8 %1738, %1740
  %1742 = add i64 %102, -8881134138014284512
  %1743 = and i64 -8881134138014284512, %102
  %1744 = or i64 -8881134138014284512, %102
  %1745 = add i64 %1743, %1744
  %1746 = and i64 %100, 4236994383603233500
  %1747 = or i64 -4236994383603233501, %100
  %1748 = sub i64 %1747, -4236994383603233501
  %1749 = or i64 %125, -1893600309148833728
  %1750 = and i64 -1893600309148833728, %125
  %1751 = xor i64 -1893600309148833728, %125
  %1752 = or i64 %1750, %1751
  %1753 = xor i64 %1748, %1742
  %1754 = xor i64 %1753, %1745
  %1755 = xor i64 %1754, %1752
  %1756 = xor i64 %1755, %1749
  %1757 = xor i64 %1756, -3767814061089954353
  %1758 = xor i64 %1757, %1746
  %1759 = and i64 %3, 6228856154118101993
  %1760 = xor i64 %3, -1
  %1761 = xor i64 6228856154118101993, %1760
  %1762 = and i64 %1761, 6228856154118101993
  %1763 = and i64 %58, 6201195972120155327
  %1764 = xor i64 %58, -1
  %1765 = or i64 -6201195972120155328, %1764
  %1766 = xor i64 %1765, -1
  %1767 = and i64 %1766, -1
  %1768 = xor i64 %1759, %1762
  %1769 = xor i64 %1768, 3001397240254694588
  %1770 = xor i64 %1769, %1763
  %1771 = xor i64 %1770, %1767
  %1772 = mul i64 %1758, %1771
  %1773 = trunc i64 %1772 to i8
  %1774 = srem i8 %1741, %1773
  %1775 = icmp eq i8 %1774, 0
  %1776 = mul i8 %1737, %1737
  %1777 = add i8 %1776, %1737
  %1778 = srem i8 %1777, 2
  %1779 = icmp eq i8 %1778, 0
  %1780 = or i1 %1775, %1779
  %1781 = select i1 %1780, i32 984876142, i32 984876131
  %1782 = xor i32 %1781, 13
  store i32 %1782, i32* %4, align 4
  %1783 = call i8** @bf16388050368864114983(i32* %4)
  %1784 = load i8*, i8** %1783, align 8
  indirectbr i8* %1784, [label %loopStart, label %loopEnd]
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #4 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876144)
  %2 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %1
  store i8* blockaddress(@main, %defaultSwitchBasicBlock), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876111)
  %4 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %3
  store i8* blockaddress(@main, %4376), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876142)
  %6 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %5
  store i8* blockaddress(@main, %codeRepl14), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876099)
  %8 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %7
  store i8* blockaddress(@main, %5410), i8** %8, align 8
  %9 = call i64 @h6542867261474098886(i64 984876154)
  %10 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %9
  store i8* blockaddress(@main, %codeRepl13), i8** %10, align 8
  %11 = call i64 @h6542867261474098886(i64 984876110)
  %12 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %11
  store i8* blockaddress(@main, %4754), i8** %12, align 8
  %13 = call i64 @h6542867261474098886(i64 984876138)
  %14 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %13
  store i8* blockaddress(@main, %4657), i8** %14, align 8
  %15 = call i64 @h6542867261474098886(i64 984876136)
  %16 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %15
  store i8* blockaddress(@main, %4455), i8** %16, align 8
  %17 = call i64 @h6542867261474098886(i64 984876096)
  %18 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %17
  store i8* blockaddress(@main, %3965), i8** %18, align 8
  %19 = call i64 @h6542867261474098886(i64 984876139)
  %20 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %19
  store i8* blockaddress(@main, %codeRepl11), i8** %20, align 8
  %21 = call i64 @h6542867261474098886(i64 984876149)
  %22 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %21
  store i8* blockaddress(@main, %2354), i8** %22, align 8
  %23 = call i64 @h6542867261474098886(i64 984876129)
  %24 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %23
  store i8* blockaddress(@main, %4961), i8** %24, align 8
  %25 = call i64 @h6542867261474098886(i64 984876157)
  %26 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %25
  store i8* blockaddress(@main, %3704), i8** %26, align 8
  %27 = call i64 @h6542867261474098886(i64 984876109)
  %28 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %27
  store i8* blockaddress(@main, %3651), i8** %28, align 8
  %29 = call i64 @h6542867261474098886(i64 984876155)
  %30 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %29
  store i8* blockaddress(@main, %codeRepl10), i8** %30, align 8
  %31 = call i64 @h6542867261474098886(i64 984876104)
  %32 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %31
  store i8* blockaddress(@main, %4265), i8** %32, align 8
  %33 = call i64 @h6542867261474098886(i64 984876101)
  %34 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %33
  store i8* blockaddress(@main, %3384), i8** %34, align 8
  %35 = call i64 @h6542867261474098886(i64 984876122)
  %36 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %35
  store i8* blockaddress(@main, %3108), i8** %36, align 8
  %37 = call i64 @h6542867261474098886(i64 984876140)
  %38 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %37
  store i8* blockaddress(@main, %codeRepl6), i8** %38, align 8
  %39 = call i64 @h6542867261474098886(i64 984876143)
  %40 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %39
  store i8* blockaddress(@main, %3107), i8** %40, align 8
  %41 = call i64 @h6542867261474098886(i64 984876150)
  %42 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %41
  store i8* blockaddress(@main, %loopEnd), i8** %42, align 8
  %43 = call i64 @h6542867261474098886(i64 984876159)
  %44 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %43
  store i8* blockaddress(@main, %2813), i8** %44, align 8
  %45 = call i64 @h6542867261474098886(i64 984876145)
  %46 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %45
  store i8* blockaddress(@main, %2258), i8** %46, align 8
  %47 = call i64 @h6542867261474098886(i64 984876128)
  %48 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %47
  store i8* blockaddress(@main, %1647), i8** %48, align 8
  %49 = call i64 @h6542867261474098886(i64 984876130)
  %50 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %49
  store i8* blockaddress(@main, %946), i8** %50, align 8
  %51 = call i64 @h6542867261474098886(i64 984876120)
  %52 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %51
  store i8* blockaddress(@main, %codeRepl5), i8** %52, align 8
  %53 = call i64 @h6542867261474098886(i64 984876106)
  %54 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %53
  store i8* blockaddress(@main, %BogusBasicBlock), i8** %54, align 8
  %55 = call i64 @h6542867261474098886(i64 984876146)
  %56 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %55
  store i8* blockaddress(@main, %2573), i8** %56, align 8
  %57 = call i64 @h6542867261474098886(i64 984876102)
  %58 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %57
  store i8* blockaddress(@main, %.loopexit), i8** %58, align 8
  %59 = call i64 @h6542867261474098886(i64 984876097)
  %60 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %59
  store i8* blockaddress(@main, %codeRepl8), i8** %60, align 8
  %61 = call i64 @h6542867261474098886(i64 984876108)
  %62 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %61
  store i8* blockaddress(@main, %2099), i8** %62, align 8
  %63 = call i64 @h6542867261474098886(i64 984876135)
  %64 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %63
  store i8* blockaddress(@main, %loopStart), i8** %64, align 8
  %65 = call i64 @h6542867261474098886(i64 984876152)
  %66 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %65
  store i8* blockaddress(@main, %codeRepl9), i8** %66, align 8
  %67 = call i64 @h6542867261474098886(i64 984876158)
  %68 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %67
  store i8* blockaddress(@main, %codeRepl3), i8** %68, align 8
  %69 = call i64 @h6542867261474098886(i64 984876100)
  %70 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %69
  store i8* blockaddress(@main, %5359), i8** %70, align 8
  %71 = call i64 @h6542867261474098886(i64 984876156)
  %72 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %71
  store i8* blockaddress(@main, %codeRepl7), i8** %72, align 8
  %73 = call i64 @h6542867261474098886(i64 984876137)
  %74 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %73
  store i8* blockaddress(@main, %EntryBasicBlockSplit), i8** %74, align 8
  %75 = call i64 @h6542867261474098886(i64 984876151)
  %76 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %75
  store i8* blockaddress(@main, %717), i8** %76, align 8
  %77 = call i64 @h6542867261474098886(i64 984876105)
  %78 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %77
  store i8* blockaddress(@main, %1156), i8** %78, align 8
  %79 = call i64 @h6542867261474098886(i64 984876147)
  %80 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %79
  store i8* blockaddress(@main, %codeRepl2), i8** %80, align 8
  %81 = call i64 @h6542867261474098886(i64 984876153)
  %82 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %81
  store i8* blockaddress(@main, %1008), i8** %82, align 8
  %83 = call i64 @h6542867261474098886(i64 984876141)
  %84 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %83
  store i8* blockaddress(@main, %codeRepl12), i8** %84, align 8
  %85 = call i64 @h6542867261474098886(i64 984876133)
  %86 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %85
  store i8* blockaddress(@main, %codeRepl), i8** %86, align 8
  %87 = call i64 @h6542867261474098886(i64 984876131)
  %88 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %87
  store i8* blockaddress(@main, %codeRepl4), i8** %88, align 8
  %89 = call i64 @h6542867261474098886(i64 984876134)
  %90 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %89
  store i8* blockaddress(@main, %.preheader), i8** %90, align 8
  %91 = call i64 @h6542867261474098886(i64 984876103)
  %92 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %91
  store i8* blockaddress(@main, %codeRepl1), i8** %92, align 8
  %93 = call i64 @h6542867261474098886(i64 984876107)
  %94 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %93
  store i8* blockaddress(@main, %5076), i8** %94, align 8
  %95 = call i64 @h6542867261474098886(i64 984876123)
  %96 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %95
  store i8* blockaddress(@main, %5183), i8** %96, align 8
  %97 = call i64 @h6542867261474098886(i64 984876132)
  %98 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %97
  store i8* blockaddress(@main, %1839), i8** %98, align 8
  %99 = call i64 @h6542867261474098886(i64 984876148)
  %100 = getelementptr [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %99
  store i8* blockaddress(@main, %525), i8** %100, align 8
  %101 = alloca i64, align 8
  %102 = call i64 @m4181846979565521366(i64 4070807658626890124)
  %103 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %102
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %103, align 8
  %104 = call i64 @m4181846979565521366(i64 4070807658626890121)
  %105 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %104
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %105, align 8
  %106 = call i64 @m4181846979565521366(i64 4070807658626890141)
  %107 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %106
  store i8* bitcast (void (i32*, i32*, [51 x i32]*, i32*)* @main.extracted to i8*), i8** %107, align 8
  %108 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %109 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %108
  store i8* bitcast (void ([51 x i32]*, i32*)* @main.extracted.16 to i8*), i8** %109, align 8
  %110 = call i64 @m4181846979565521366(i64 4070807658626890115)
  %111 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %110
  store i8* bitcast (void ([51 x i32]*, i32*)* @main.extracted.17 to i8*), i8** %111, align 8
  %112 = call i64 @m4181846979565521366(i64 4070807658626890125)
  %113 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %112
  store i8* bitcast (void (i32*, [51 x i32]*, i32*)* @main.extracted.18 to i8*), i8** %113, align 8
  %114 = call i64 @m4181846979565521366(i64 4070807658626890112)
  %115 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %114
  store i8* bitcast (void ([51 x i32]*, i32*)* @main.extracted.19 to i8*), i8** %115, align 8
  %116 = call i64 @m4181846979565521366(i64 4070807658626890118)
  %117 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %116
  store i8* bitcast (void (i32*, i32*, i32*, i32*, i1*, [51 x i32]*, i32*)* @main.extracted.20 to i8*), i8** %117, align 8
  %118 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %119 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %118
  store i8* bitcast (void (i32*, i32*, i32*, [51 x i32]*, i32*)* @main.extracted.21 to i8*), i8** %119, align 8
  %120 = call i64 @m4181846979565521366(i64 4070807658626890122)
  %121 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %120
  store i8* bitcast (void (i8**, i8**, i8**, i8**, i32*, i32*, i1*, [51 x i32]*, i32*)* @main.extracted.22 to i8*), i8** %121, align 8
  %122 = call i64 @m4181846979565521366(i64 4070807658626890119)
  %123 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %122
  store i8* bitcast (void ([51 x i32]*, i32*)* @main.extracted.23 to i8*), i8** %123, align 8
  %124 = call i64 @m4181846979565521366(i64 4070807658626890114)
  %125 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %124
  store i8* bitcast (void (i8**, i8**, i8**, i8**, [51 x i32]*, i32*)* @main.extracted.24 to i8*), i8** %125, align 8
  %126 = call i64 @m4181846979565521366(i64 4070807658626890113)
  %127 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %126
  store i8* bitcast (void ()* @wait to i8*), i8** %127, align 8
  %128 = call i64 @m4181846979565521366(i64 4070807658626890123)
  %129 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %128
  store i8* bitcast (void (i32*, i1*, i1*, i32*, [51 x i32]*, i32*)* @main.extracted.25 to i8*), i8** %129, align 8
  %130 = call i64 @m4181846979565521366(i64 4070807658626890140)
  %131 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %130
  store i8* bitcast (void ([51 x i32]*, i1*, i32*)* @main.extracted.26 to i8*), i8** %131, align 8
  %132 = call i64 @m4181846979565521366(i64 4070807658626890142)
  %133 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %132
  store i8* bitcast (void (i32*, [51 x i32]*, i32*)* @main.extracted.27 to i8*), i8** %133, align 8
  %134 = call i64 @m4181846979565521366(i64 4070807658626890117)
  %135 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %134
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %135, align 8
  %136 = call i64 @m4181846979565521366(i64 4070807658626890139)
  %137 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %136
  store i8* bitcast (void (i32*, [51 x i32]*, i1*, i32*, i1*)* @main.extracted.28 to i8*), i8** %137, align 8
  %138 = call i64 @m4181846979565521366(i64 4070807658626890116)
  %139 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %138
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %139, align 8
  %140 = call i64 @m4181846979565521366(i64 4070807658626890143)
  %141 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %140
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %141, align 8
  %142 = call i64 @m4181846979565521366(i64 4070807658626890120)
  %143 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %142
  store i8* bitcast (void (i1*, i32*, i32*, [51 x i32]*, i32*)* @main.extracted.29 to i8*), i8** %143, align 8
  %.reg2mem133 = alloca i1, align 1
  %.reg2mem131 = alloca i32, align 4
  %.reg2mem129 = alloca i1, align 1
  %.reg2mem127 = alloca i32, align 4
  %.reg2mem125 = alloca i1, align 1
  %.reg2mem123 = alloca i32, align 4
  %.reg2mem121 = alloca i32, align 4
  %.reg2mem118 = alloca i1, align 1
  %.reg2mem114 = alloca i32, align 4
  %.reg2mem111 = alloca i1, align 1
  %.reg2mem109 = alloca i1, align 1
  %.reg2mem100 = alloca i32, align 4
  %.reg2mem96 = alloca i32, align 4
  %.reg2mem91 = alloca i32, align 4
  %.reg2mem89 = alloca i1, align 1
  %.reg2mem86 = alloca i32, align 4
  %.reg2mem83 = alloca i1, align 1
  %.reg2mem77 = alloca i32, align 4
  %.reg2mem74 = alloca i1, align 1
  %.reg2mem72 = alloca i32, align 4
  %.reg2mem70 = alloca i32, align 4
  %.reg2mem67 = alloca i32, align 4
  %.reg2mem64 = alloca i1, align 1
  %.reg2mem61 = alloca i32, align 4
  %.reg2mem54 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem34 = alloca i32, align 4
  %.reg2mem29 = alloca float*, align 8
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem12 = alloca i8*, align 8
  %.reg2mem8 = alloca i8*, align 8
  %.reg2mem4 = alloca i8*, align 8
  %.reg2mem = alloca i8*, align 8
  %lookupTable = alloca [51 x i32], align 4
  %144 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %144, align 4
  %145 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %145, align 4
  %146 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %146, align 4
  %147 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %147, align 4
  %148 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %148, align 4
  %149 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %149, align 4
  %150 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %150, align 4
  %151 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %151, align 4
  %152 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %152, align 4
  %153 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %153, align 4
  %154 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %154, align 4
  %155 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %155, align 4
  %156 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %156, align 4
  %157 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %157, align 4
  %158 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %158, align 4
  %159 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %159, align 4
  %160 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %160, align 4
  %161 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %161, align 4
  %162 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %162, align 4
  %163 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %163, align 4
  %164 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %164, align 4
  %165 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %165, align 4
  %166 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %166, align 4
  %167 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 23
  store i32 20, i32* %167, align 4
  %168 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 24
  store i32 21, i32* %168, align 4
  %169 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %169, align 4
  %170 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %170, align 4
  %171 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %171, align 4
  %172 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 28
  store i32 25, i32* %172, align 4
  %173 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 29
  store i32 26, i32* %173, align 4
  %174 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 30
  store i32 27, i32* %174, align 4
  %175 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %175, align 4
  %176 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %176, align 4
  %177 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %177, align 4
  %178 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %178, align 4
  %179 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %179, align 4
  %180 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %180, align 4
  %181 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %181, align 4
  %182 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 38
  store i32 35, i32* %182, align 4
  %183 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 39
  store i32 36, i32* %183, align 4
  %184 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 40
  store i32 37, i32* %184, align 4
  %185 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 41
  store i32 38, i32* %185, align 4
  %186 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 42
  store i32 39, i32* %186, align 4
  %187 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 43
  store i32 40, i32* %187, align 4
  %188 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 44
  store i32 41, i32* %188, align 4
  %189 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 45
  store i32 42, i32* %189, align 4
  %190 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 46
  store i32 43, i32* %190, align 4
  %191 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 47
  store i32 44, i32* %191, align 4
  %192 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 48
  store i32 45, i32* %192, align 4
  %193 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 49
  store i32 46, i32* %193, align 4
  %194 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  store i32 47, i32* %194, align 4
  %195 = alloca float, align 4
  %196 = alloca float, align 4
  %197 = alloca [1760 x float], align 4
  %198 = alloca [1760 x i8], align 1
  %199 = bitcast float* %195 to i8*
  store i8* %199, i8** %.reg2mem, align 8
  %.reload3 = load i8*, i8** %.reg2mem, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %.reload3) #12
  store float 0.000000e+00, float* %195, align 4, !tbaa !10
  %200 = bitcast float* %196 to i8*
  store i8* %200, i8** %.reg2mem4, align 8
  %.reload7 = load i8*, i8** %.reg2mem4, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %.reload7) #12
  store float 0.000000e+00, float* %196, align 4, !tbaa !10
  %201 = bitcast [1760 x float]* %197 to i8*
  store i8* %201, i8** %.reg2mem8, align 8
  %.reload11 = load i8*, i8** %.reg2mem8, align 8
  call void @llvm.lifetime.start.p0i8(i64 7040, i8* nonnull %.reload11) #12
  %202 = getelementptr inbounds [1760 x i8], [1760 x i8]* %198, i64 0, i64 0
  store i8* %202, i8** %.reg2mem12, align 8
  %.reload19 = load i8*, i8** %.reg2mem12, align 8
  call void @llvm.lifetime.start.p0i8(i64 1760, i8* nonnull %.reload19) #12
  store i64 4070807658626890124, i64* %101, align 8
  %203 = call i8** @lk1336881106680510526(i64* %101)
  %204 = load i8*, i8** %203, align 8
  %205 = bitcast i8* %204 to i32 (i8*, ...)*
  %206 = call i32 (i8*, ...) %205(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i32 %206, i32* %.reg2mem20, align 4
  %207 = getelementptr inbounds [1760 x float], [1760 x float]* %197, i64 0, i64 0
  store float* %207, float** %.reg2mem29, align 8
  %.reload18 = load i8*, i8** %.reg2mem12, align 8
  %.reload33 = load float*, float** %.reg2mem29, align 8
  store i64 4070807658626890121, i64* %101, align 8
  %208 = call i8** @lk1336881106680510526(i64* %101)
  %209 = load i8*, i8** %208, align 8
  %210 = bitcast i8* %209 to i32 (float*, float*, i8*, float*)*
  %211 = call i32 %210(float* %195, float* %196, i8* %.reload18, float* %.reload33)
  store i32 %211, i32* %.reg2mem34, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 984876135, i32* %0, align 4
  %212 = call i8** @bf3690775341412318723(i32* %0)
  %213 = load i8*, i8** %212, align 8
  indirectbr i8* %213, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.preheader
    i32 2, label %codeRepl
    i32 3, label %525
    i32 4, label %codeRepl1
    i32 5, label %717
    i32 6, label %946
    i32 7, label %1008
    i32 8, label %codeRepl2
    i32 9, label %1156
    i32 10, label %.loopexit
    i32 11, label %codeRepl3
    i32 12, label %codeRepl4
    i32 13, label %codeRepl5
    i32 14, label %1647
    i32 15, label %1839
    i32 16, label %2099
    i32 17, label %2258
    i32 18, label %2354
    i32 19, label %codeRepl6
    i32 20, label %codeRepl7
    i32 21, label %2573
    i32 22, label %codeRepl8
    i32 23, label %2813
    i32 24, label %codeRepl9
    i32 25, label %3107
    i32 26, label %3108
    i32 27, label %3384
    i32 28, label %codeRepl10
    i32 29, label %3651
    i32 30, label %3704
    i32 31, label %codeRepl11
    i32 32, label %3965
    i32 33, label %4265
    i32 34, label %4376
    i32 35, label %4455
    i32 36, label %codeRepl12
    i32 37, label %4657
    i32 38, label %4754
    i32 39, label %codeRepl13
    i32 40, label %4961
    i32 41, label %5076
    i32 42, label %5183
    i32 43, label %5359
    i32 44, label %5410
    i32 45, label %codeRepl14
    i32 46, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload41 = load i32, i32* %.reg2mem34, align 4
  %214 = icmp eq i32 %.reload41, 0
  %215 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 26
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 25
  %218 = load i32, i32* %217, align 4
  %219 = sub i32 %216, -2059790999
  %220 = sub i32 %219, %218
  %221 = add i32 %220, -2059790999
  %222 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 22
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %225 = load i32, i32* %224, align 4
  %226 = srem i32 %223, %225
  %227 = select i1 %214, i32 %221, i32 %226
  store i32 %227, i32* %dispatcher, align 4
  %.reload40 = load i32, i32* %.reg2mem34, align 4
  store i32 %.reload40, i32* %.reg2mem123, align 4
  %228 = load i8*, i8** %70, align 8
  %229 = load i8, i8* %228, align 1
  %230 = mul i8 %229, 2
  %231 = mul i8 %229, 2
  %232 = add i8 2, %231
  %233 = mul i8 %230, %232
  %234 = srem i8 %233, 4
  %235 = icmp eq i8 %234, 0
  %236 = mul i8 %229, %229
  %237 = add i8 %236, %229
  %238 = add i64 %93, -8383972147311213544
  %239 = xor i64 -8383972147311213544, %93
  %240 = and i64 -8383972147311213544, %93
  %241 = mul i64 2, %240
  %242 = add i64 %239, %241
  %243 = or i64 %57, 2317102429787179364
  %244 = and i64 2317102429787179364, %57
  %245 = xor i64 2317102429787179364, %57
  %246 = or i64 %244, %245
  %247 = or i64 %102, -4260272747099805683
  %248 = xor i64 %102, -1
  %249 = and i64 -4260272747099805683, %248
  %250 = add i64 %249, %102
  %251 = xor i64 %242, %246
  %252 = xor i64 %251, %250
  %253 = xor i64 %252, %247
  %254 = xor i64 %253, -5008430866330287489
  %255 = xor i64 %254, %238
  %256 = xor i64 %255, %243
  %257 = or i64 %53, -3720847626838466030
  %258 = and i64 -3720847626838466030, %53
  %259 = xor i64 -3720847626838466030, %53
  %260 = or i64 %258, %259
  %261 = or i64 %69, -6424749500255558930
  %262 = xor i64 %69, -1
  %263 = and i64 %262, -6029030592921341245
  %264 = and i64 %69, 6029030592921341244
  %265 = or i64 %263, %264
  %266 = xor i64 757203700561465389, %265
  %267 = xor i64 %69, -1
  %268 = or i64 6424749500255558929, %267
  %269 = xor i64 %268, -1
  %270 = and i64 %269, -1
  %271 = or i64 %266, %270
  %272 = or i64 %33, -2560209042924947920
  %273 = xor i64 %33, -1
  %274 = and i64 %273, 8470832738856678844
  %275 = and i64 %33, -8470832738856678845
  %276 = or i64 %274, %275
  %277 = xor i64 -6199699605115239540, %276
  %278 = xor i64 %33, -1
  %279 = or i64 2560209042924947919, %278
  %280 = xor i64 %279, -1
  %281 = and i64 %280, -1
  %282 = or i64 %277, %281
  %283 = xor i64 %260, %282
  %284 = xor i64 %283, %272
  %285 = xor i64 %284, %257
  %286 = xor i64 %285, %271
  %287 = xor i64 %286, %261
  %288 = xor i64 %287, 7013635189597502206
  %289 = mul i64 %256, %288
  %290 = trunc i64 %289 to i8
  %291 = srem i8 %237, %290
  %292 = icmp eq i8 %291, 0
  %293 = and i1 %235, %292
  %294 = select i1 %293, i32 984876131, i32 984876150
  %295 = xor i32 %294, 1778022092
  %296 = xor i32 %295, 1778022105
  store i32 %296, i32* %0, align 4
  %297 = call i8** @bf3690775341412318723(i32* %0)
  %298 = load i8*, i8** %297, align 8
  indirectbr i8* %298, [label %loopEnd, label %EntryBasicBlockSplit]

.preheader:                                       ; preds = %.preheader, %loopStart
  %.reload28 = load i32, i32* %.reg2mem20, align 4
  %299 = xor i32 %.reload28, -1
  %300 = or i32 %299, -2
  %301 = xor i32 %300, -1
  %302 = and i32 %301, -1
  store i32 %302, i32* %.reg2mem42, align 4
  %.reload48 = load i32, i32* %.reg2mem42, align 4
  %303 = icmp eq i32 %.reload48, 1
  %.reload27 = load i32, i32* %.reg2mem20, align 4
  %304 = mul i32 %.reload27, %.reload27
  store i32 %304, i32* %.reg2mem49, align 4
  %.reload26 = load i32, i32* %.reg2mem20, align 4
  %.reload53 = load i32, i32* %.reg2mem49, align 4
  %305 = and i64 %142, -8929666645613380852
  %306 = or i64 8929666645613380851, %142
  %307 = sub i64 %306, 8929666645613380851
  %308 = or i64 %59, 5806299342161150956
  %309 = xor i64 %59, -1
  %310 = and i64 5806299342161150956, %309
  %311 = add i64 %310, %59
  %312 = or i64 %33, -5613038757483320651
  %313 = xor i64 %33, -1
  %314 = and i64 %313, -5314560241792788760
  %315 = and i64 %33, 5314560241792788759
  %316 = or i64 %314, %315
  %317 = xor i64 298532126183275613, %316
  %318 = xor i64 %33, -1
  %319 = or i64 5613038757483320650, %318
  %320 = xor i64 %319, -1
  %321 = and i64 %320, -1
  %322 = or i64 %317, %321
  %323 = xor i64 %311, %322
  %324 = xor i64 %323, %308
  %325 = xor i64 %324, %305
  %326 = xor i64 %325, %307
  %327 = xor i64 %326, -4193855453635487283
  %328 = xor i64 %327, %312
  %329 = and i64 %25, 466585289719743419
  %330 = or i64 -466585289719743420, %25
  %331 = sub i64 %330, -466585289719743420
  %332 = and i64 %73, 7536347314654672049
  %333 = xor i64 %73, -1
  %334 = xor i64 7536347314654672049, %333
  %335 = and i64 %334, 7536347314654672049
  %336 = xor i64 -1143928637242446336, %332
  %337 = xor i64 %336, %329
  %338 = xor i64 %337, %335
  %339 = xor i64 %338, %331
  %340 = mul i64 %328, %339
  %341 = trunc i64 %340 to i32
  %342 = sub i32 %.reload53, %341
  %343 = add i32 %342, %.reload26
  %344 = add i32 %343, 1720325632
  store i32 %344, i32* %.reg2mem54, align 4
  %.reload60 = load i32, i32* %.reg2mem54, align 4
  %345 = srem i32 %.reload60, 2
  %346 = and i64 %39, 7529035698332492283
  %347 = xor i64 %39, -1
  %348 = xor i64 7529035698332492283, %347
  %349 = and i64 %348, 7529035698332492283
  %350 = or i64 %27, 1830493996807295975
  %351 = xor i64 %27, -1
  %352 = and i64 %351, 8515913843198388697
  %353 = and i64 %27, -8515913843198388698
  %354 = or i64 %352, %353
  %355 = xor i64 8019118810013694526, %354
  %356 = xor i64 %27, -1
  %357 = or i64 -1830493996807295976, %356
  %358 = xor i64 %357, -1
  %359 = and i64 %358, -1
  %360 = or i64 %355, %359
  %361 = xor i64 %350, %346
  %362 = xor i64 %361, %360
  %363 = xor i64 %362, %349
  %364 = xor i64 %363, 2290233352048645987
  %365 = add i64 %140, -667744321686161889
  %366 = and i64 -667744321686161889, %140
  %367 = or i64 -667744321686161889, %140
  %368 = add i64 %366, %367
  %369 = and i64 %124, 4436045092515135208
  %370 = xor i64 %124, -1
  %371 = or i64 -4436045092515135209, %370
  %372 = xor i64 %371, -1
  %373 = and i64 %372, -1
  %374 = add i64 %108, 1348039529934940118
  %375 = xor i64 1348039529934940118, %108
  %376 = and i64 1348039529934940118, %108
  %377 = mul i64 2, %376
  %378 = add i64 %375, %377
  %379 = xor i64 %373, %368
  %380 = xor i64 %379, %374
  %381 = xor i64 %380, %369
  %382 = xor i64 %381, %365
  %383 = xor i64 %382, 0
  %384 = xor i64 %383, %378
  %385 = mul i64 %364, %384
  %386 = trunc i64 %385 to i32
  %387 = icmp eq i32 %345, %386
  %388 = or i1 %303, %387
  %389 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 8
  %390 = load i32, i32* %389, align 4
  %391 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 7
  %392 = load i32, i32* %391, align 4
  %393 = and i32 %390, %392
  %394 = or i32 %390, %392
  %395 = add i32 %393, %394
  %396 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 5
  %397 = load i32, i32* %396, align 4
  %398 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 3
  %399 = load i32, i32* %398, align 4
  %400 = add i32 %397, %399
  %401 = select i1 %388, i32 %395, i32 %400
  store i32 %401, i32* %dispatcher, align 4
  %402 = load i8*, i8** %30, align 8
  %403 = load i8, i8* %402, align 1
  %404 = xor i8 %403, -1
  %405 = or i8 %404, -2
  %406 = xor i8 %405, -1
  %407 = and i8 %406, -1
  %408 = icmp eq i8 %407, 1
  %409 = mul i8 %403, %403
  %410 = add i8 %409, %403
  %411 = srem i8 %410, 2
  %412 = or i64 %5, -7034055944682988864
  %413 = xor i64 %5, -1
  %414 = and i64 -7034055944682988864, %413
  %415 = add i64 %414, %5
  %416 = add i64 %15, -4544624202232530113
  %417 = sub i64 0, %15
  %418 = add i64 4544624202232530113, %417
  %419 = sub i64 0, %418
  %420 = and i64 %7, 5947664004984270375
  %421 = xor i64 %7, -1
  %422 = or i64 -5947664004984270376, %421
  %423 = xor i64 %422, -1
  %424 = and i64 %423, -1
  %425 = xor i64 %424, %419
  %426 = xor i64 %425, 1568571462028658001
  %427 = xor i64 %426, %420
  %428 = xor i64 %427, %412
  %429 = xor i64 %428, %415
  %430 = xor i64 %429, %416
  %431 = and i64 %37, -403391389825785907
  %432 = xor i64 %37, -1
  %433 = xor i64 -403391389825785907, %432
  %434 = and i64 %433, -403391389825785907
  %435 = add i64 %63, -3823868759174365208
  %436 = sub i64 0, %63
  %437 = add i64 3823868759174365208, %436
  %438 = sub i64 0, %437
  %439 = or i64 %11, 5728176104666994202
  %440 = xor i64 %11, -1
  %441 = and i64 %440, 8821778235147481119
  %442 = and i64 %11, -8821778235147481120
  %443 = or i64 %441, %442
  %444 = xor i64 3824630588903679493, %443
  %445 = xor i64 %11, -1
  %446 = or i64 -5728176104666994203, %445
  %447 = xor i64 %446, -1
  %448 = and i64 %447, -1
  %449 = or i64 %444, %448
  %450 = xor i64 %438, %449
  %451 = xor i64 %450, %439
  %452 = xor i64 %451, %431
  %453 = xor i64 %452, %435
  %454 = xor i64 %453, %434
  %455 = xor i64 %454, 0
  %456 = mul i64 %430, %455
  %457 = trunc i64 %456 to i8
  %458 = icmp eq i8 %411, %457
  %459 = or i1 %408, %458
  %460 = or i64 %63, 1674119071506289302
  %461 = xor i64 %63, -1
  %462 = and i64 %461, -5962580445691298969
  %463 = and i64 %63, 5962580445691298968
  %464 = or i64 %462, %463
  %465 = xor i64 -5009407136775017999, %464
  %466 = xor i64 %63, -1
  %467 = or i64 -1674119071506289303, %466
  %468 = xor i64 %467, -1
  %469 = and i64 %468, -1
  %470 = or i64 %465, %469
  %471 = add i64 %73, 2873061614892147206
  %472 = add i64 3637890555291772218, %73
  %473 = sub i64 %472, 764828940399625012
  %474 = xor i64 %473, %471
  %475 = xor i64 %474, %460
  %476 = xor i64 %475, %470
  %477 = xor i64 %476, -1551053526788660213
  %478 = add i64 %116, 6417167725769461637
  %479 = add i64 -1932631007956911845, %116
  %480 = add i64 %479, 8349798733726373482
  %481 = or i64 %108, -866016504940651670
  %482 = and i64 -866016504940651670, %108
  %483 = xor i64 -866016504940651670, %108
  %484 = or i64 %482, %483
  %485 = xor i64 %481, %484
  %486 = xor i64 %485, 2684478626566434
  %487 = xor i64 %486, %480
  %488 = xor i64 %487, %478
  %489 = mul i64 %477, %488
  %490 = trunc i64 %489 to i32
  %491 = select i1 %459, i32 984876153, i32 %490
  %492 = xor i32 %491, 15
  store i32 %492, i32* %0, align 4
  %493 = call i8** @bf3690775341412318723(i32* %0)
  %494 = load i8*, i8** %493, align 8
  indirectbr i8* %494, [label %loopEnd, label %.preheader]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 4070807658626890141, i64* %101, align 8
  %495 = call i8** @lk1336881106680510526(i64* %101)
  %496 = load i8*, i8** %495, align 8
  %497 = bitcast i8* %496 to void (i32*, i32*, [51 x i32]*, i32*)*
  call void %497(i32* %.reg2mem42, i32* %.reg2mem61, [51 x i32]* %lookupTable, i32* %dispatcher)
  %498 = load i8*, i8** %86, align 8
  %499 = load i8, i8* %498, align 1
  %500 = mul i8 %499, 2
  %501 = mul i8 %499, 2
  %502 = xor i8 2, %501
  %503 = and i8 2, %501
  %504 = mul i8 2, %503
  %505 = add i8 %502, %504
  %506 = mul i8 39, %505
  %507 = add i8 23, %506
  %508 = mul i8 -105, %507
  %509 = add i8 111, %508
  %510 = mul i8 %500, %509
  %511 = srem i8 %510, 4
  %512 = icmp eq i8 %511, 0
  %513 = mul i8 %499, %499
  %514 = add i8 %513, %499
  %515 = srem i8 %514, 2
  %516 = icmp eq i8 %515, 0
  %517 = xor i1 %512, true
  %518 = or i1 %517, %516
  %519 = xor i1 %512, true
  %520 = sub i1 %518, %519
  %521 = select i1 %520, i32 984876154, i32 984876150
  %522 = xor i32 %521, 12
  store i32 %522, i32* %0, align 4
  %523 = call i8** @bf3690775341412318723(i32* %0)
  %524 = load i8*, i8** %523, align 8
  indirectbr i8* %524, [label %loopEnd, label %codeRepl]

525:                                              ; preds = %525, %loopStart
  %.reload62 = load i32, i32* %.reg2mem61, align 4
  %526 = srem i32 %.reload62, 2
  %527 = icmp eq i32 %526, 0
  %.reload46 = load i32, i32* %.reg2mem42, align 4
  %528 = mul i32 %.reload46, 2
  %.reload45 = load i32, i32* %.reg2mem42, align 4
  %529 = mul i32 %.reload45, 2
  %530 = add i32 2, %529
  %531 = mul i32 %528, %530
  %532 = srem i32 %531, 4
  %533 = icmp eq i32 %532, 0
  %.reload44 = load i32, i32* %.reg2mem42, align 4
  %534 = mul i32 %.reload44, %.reload44
  %.reload43 = load i32, i32* %.reg2mem42, align 4
  %535 = add i32 %534, %.reload43
  %536 = srem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = and i1 %533, %537
  %539 = xor i1 %533, %537
  %540 = or i1 %538, %539
  store i1 %540, i1* %.reg2mem64, align 1
  %541 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 7
  %542 = load i32, i32* %541, align 4
  %543 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %544 = load i32, i32* %543, align 4
  %545 = srem i32 %542, %544
  %546 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 10
  %547 = load i32, i32* %546, align 4
  %548 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 5
  %549 = load i32, i32* %548, align 4
  %550 = sub i32 %547, %549
  %.reload66 = load i1, i1* %.reg2mem64, align 1
  %551 = select i1 %.reload66, i32 %545, i32 %550
  store i32 %551, i32* %dispatcher, align 4
  %552 = load i8*, i8** %12, align 8
  %553 = load i8, i8* %552, align 1
  %554 = and i8 %553, 1
  %555 = icmp eq i8 %554, 0
  %556 = mul i8 %553, %553
  %557 = sub i8 %556, 7
  %558 = add i8 %557, %553
  %559 = add i8 %558, 7
  %560 = mul i8 %559, 3
  %561 = srem i8 %560, 2
  %562 = add i64 %69, -7610402529060108022
  %563 = and i64 -7610402529060108022, %69
  %564 = or i64 -7610402529060108022, %69
  %565 = add i64 %563, %564
  %566 = and i64 %75, 351611596428574695
  %567 = xor i64 %75, -1
  %568 = xor i64 351611596428574695, %567
  %569 = and i64 %568, 351611596428574695
  %570 = xor i64 %566, %562
  %571 = xor i64 %570, %565
  %572 = xor i64 %571, %569
  %573 = xor i64 %572, -3290194459576933053
  %574 = add i64 %59, 6525261647347694419
  %575 = add i64 2079106590660072520, %59
  %576 = sub i64 %575, -4446155056687621899
  %577 = add i64 %106, 5145703563338581886
  %578 = add i64 -735674172090227443, %106
  %579 = sub i64 %578, -5881377735428809329
  %580 = xor i64 %576, %579
  %581 = xor i64 %580, 0
  %582 = xor i64 %581, %574
  %583 = xor i64 %582, %577
  %584 = mul i64 %573, %583
  %585 = trunc i64 %584 to i8
  %586 = icmp eq i8 %561, %585
  %587 = or i1 %555, %586
  %588 = select i1 %587, i32 984876146, i32 984876150
  %589 = xor i32 %588, 4
  store i32 %589, i32* %0, align 4
  %590 = call i8** @bf3690775341412318723(i32* %0)
  %591 = load i8*, i8** %590, align 8
  indirectbr i8* %591, [label %loopEnd, label %525]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 4070807658626890127, i64* %101, align 8
  %592 = call i8** @lk1336881106680510526(i64* %101)
  %593 = load i8*, i8** %592, align 8
  %594 = bitcast i8* %593 to void ([51 x i32]*, i32*)*
  call void %594([51 x i32]* %lookupTable, i32* %dispatcher)
  %595 = load i8*, i8** %2, align 8
  %596 = load i8, i8* %595, align 1
  %597 = mul i8 %596, %596
  %598 = sub i8 %597, -7
  %599 = add i8 %598, %596
  %600 = add i8 %599, -7
  %601 = mul i8 %600, 3
  %602 = and i64 %9, -7252586405538182938
  %603 = or i64 7252586405538182937, %9
  %604 = sub i64 %603, 7252586405538182937
  %605 = and i64 %112, 5728156402629799022
  %606 = or i64 -5728156402629799023, %112
  %607 = sub i64 %606, -5728156402629799023
  %608 = sext i32 %211 to i64
  %609 = or i64 %608, -3434323260384025508
  %610 = and i64 -3434323260384025508, %608
  %611 = xor i64 -3434323260384025508, %608
  %612 = or i64 %610, %611
  %613 = xor i64 %612, %605
  %614 = xor i64 %613, %607
  %615 = xor i64 %614, %609
  %616 = xor i64 %615, -5529689928967408617
  %617 = xor i64 %616, %602
  %618 = xor i64 %617, %604
  %619 = or i64 %35, -2750761864364258042
  %620 = and i64 -2750761864364258042, %35
  %621 = xor i64 -2750761864364258042, %35
  %622 = or i64 %620, %621
  %623 = add i64 %19, 3777452116567972125
  %624 = and i64 3777452116567972125, %19
  %625 = or i64 3777452116567972125, %19
  %626 = add i64 %624, %625
  %627 = xor i64 -7364446299471902898, %623
  %628 = xor i64 %627, %622
  %629 = xor i64 %628, %626
  %630 = xor i64 %629, %619
  %631 = mul i64 %618, %630
  %632 = trunc i64 %631 to i8
  %633 = srem i8 %601, %632
  %634 = icmp eq i8 %633, 0
  %635 = mul i8 %596, %596
  %636 = xor i8 %635, %596
  %637 = and i8 %635, %596
  %638 = mul i8 2, %637
  %639 = add i8 %636, %638
  %640 = srem i8 %639, 2
  %641 = icmp eq i8 %640, 0
  %642 = and i1 %634, %641
  %643 = or i64 %99, 8633042070429407991
  %644 = and i64 8633042070429407991, %99
  %645 = xor i64 8633042070429407991, %99
  %646 = or i64 %644, %645
  %647 = sext i32 %dispatcher1 to i64
  %648 = and i64 %647, -7577041517584810375
  %649 = or i64 7577041517584810374, %647
  %650 = sub i64 %649, 7577041517584810374
  %651 = xor i64 -3282633286331258759, %650
  %652 = xor i64 %651, %648
  %653 = xor i64 %652, %643
  %654 = xor i64 %653, %646
  %655 = add i64 %118, 241899146284759746
  %656 = and i64 241899146284759746, %118
  %657 = or i64 241899146284759746, %118
  %658 = add i64 %656, %657
  %659 = or i64 %5, -6068305810579761750
  %660 = and i64 -6068305810579761750, %5
  %661 = xor i64 -6068305810579761750, %5
  %662 = or i64 %660, %661
  %663 = xor i64 %659, %658
  %664 = xor i64 %663, 3642590470472978272
  %665 = xor i64 %664, %655
  %666 = xor i64 %665, %662
  %667 = mul i64 %654, %666
  %668 = trunc i64 %667 to i32
  %669 = and i64 %124, 9062452452624842016
  %670 = xor i64 %124, -1
  %671 = xor i64 9062452452624842016, %670
  %672 = and i64 %671, 9062452452624842016
  %673 = add i64 %33, 5285149560097215495
  %674 = add i64 -6374729250913080822, %33
  %675 = add i64 %674, -6786865262699255299
  %676 = or i64 %27, 152758829549678127
  %677 = xor i64 %27, -1
  %678 = and i64 %677, 4007063214051845878
  %679 = and i64 %27, -4007063214051845879
  %680 = or i64 %678, %679
  %681 = xor i64 3856567390473324761, %680
  %682 = xor i64 %27, -1
  %683 = or i64 -152758829549678128, %682
  %684 = xor i64 %683, -1
  %685 = and i64 %684, -1
  %686 = or i64 %681, %685
  %687 = xor i64 %675, %676
  %688 = xor i64 %687, %673
  %689 = xor i64 %688, %686
  %690 = xor i64 %689, %672
  %691 = xor i64 %690, %669
  %692 = xor i64 %691, -5341689159460962279
  %693 = add i64 %138, -105955286125713276
  %694 = sub i64 0, %138
  %695 = sub i64 -105955286125713276, %694
  %696 = or i64 %37, -4373465516810709024
  %697 = xor i64 %37, -1
  %698 = and i64 %697, 774952123783661532
  %699 = and i64 %37, -774952123783661533
  %700 = or i64 %698, %699
  %701 = xor i64 -3922781985329868740, %700
  %702 = xor i64 %37, -1
  %703 = or i64 4373465516810709023, %702
  %704 = xor i64 %703, -1
  %705 = and i64 %704, -1
  %706 = or i64 %701, %705
  %707 = xor i64 %706, %695
  %708 = xor i64 %707, -5840952136059347226
  %709 = xor i64 %708, %696
  %710 = xor i64 %709, %693
  %711 = mul i64 %692, %710
  %712 = trunc i64 %711 to i32
  %713 = select i1 %642, i32 %668, i32 %712
  %714 = xor i32 %713, 22
  store i32 %714, i32* %0, align 4
  %715 = call i8** @bf3690775341412318723(i32* %0)
  %716 = load i8*, i8** %715, align 8
  indirectbr i8* %716, [label %loopEnd, label %codeRepl1]

717:                                              ; preds = %717, %loopStart
  %718 = add i64 %116, -7877169885892146414
  %719 = sub i64 0, %116
  %720 = add i64 7877169885892146414, %719
  %721 = sub i64 0, %720
  %722 = and i64 %35, 4402465167101601375
  %723 = or i64 -4402465167101601376, %35
  %724 = sub i64 %723, -4402465167101601376
  %725 = add i64 %21, 2865536590311077781
  %726 = add i64 2805661158192296325, %21
  %727 = add i64 %726, 59875432118781456
  %728 = xor i64 %721, %722
  %729 = xor i64 %728, 4708208810617043423
  %730 = xor i64 %729, %718
  %731 = xor i64 %730, %725
  %732 = xor i64 %731, %727
  %733 = xor i64 %732, %724
  %734 = and i64 %7, 6294975960822846912
  %735 = xor i64 %7, -1
  %736 = or i64 -6294975960822846913, %735
  %737 = xor i64 %736, -1
  %738 = and i64 %737, -1
  %739 = and i64 %93, -4807308234918851448
  %740 = xor i64 %93, -1
  %741 = or i64 4807308234918851447, %740
  %742 = xor i64 %741, -1
  %743 = and i64 %742, -1
  %744 = xor i64 %738, %743
  %745 = xor i64 %744, -8555937633267003238
  %746 = xor i64 %745, %739
  %747 = xor i64 %746, %734
  %748 = mul i64 %733, %747
  %749 = add i64 %748, 26
  %750 = sub i64 3366887358662820762, 3366887358662820782
  %751 = and i64 %13, -2553246486642913961
  %752 = or i64 2553246486642913960, %13
  %753 = sub i64 %752, 2553246486642913960
  %754 = and i64 %33, -7916318009915146336
  %755 = xor i64 %33, -1
  %756 = or i64 7916318009915146335, %755
  %757 = xor i64 %756, -1
  %758 = and i64 %757, -1
  %759 = or i64 %128, -1378117268481292044
  %760 = xor i64 %128, -1
  %761 = and i64 -1378117268481292044, %760
  %762 = add i64 %761, %128
  %763 = xor i64 %762, 8338459418998248987
  %764 = xor i64 %763, %758
  %765 = xor i64 %764, %751
  %766 = xor i64 %765, %754
  %767 = xor i64 %766, %759
  %768 = xor i64 %767, %753
  %769 = add i64 %11, -4277980509261889601
  %770 = sub i64 0, %11
  %771 = sub i64 -4277980509261889601, %770
  %772 = or i64 %85, -7454502126071507184
  %773 = and i64 -7454502126071507184, %85
  %774 = xor i64 -7454502126071507184, %85
  %775 = or i64 %773, %774
  %776 = xor i64 673618266735208680, %771
  %777 = xor i64 %776, %772
  %778 = xor i64 %777, %775
  %779 = xor i64 %778, %769
  %780 = mul i64 %768, %779
  %781 = mul i64 111, %780
  %782 = sdiv i64 25, 30
  %783 = mul i64 37, 48
  %784 = mul i64 2, 41
  %785 = mul i64 39, 20
  %786 = and i64 %37, -9220710998011565020
  %787 = or i64 9220710998011565019, %37
  %788 = sub i64 %787, 9220710998011565019
  %789 = and i64 %132, -6708430651619559056
  %790 = xor i64 %132, -1
  %791 = xor i64 -6708430651619559056, %790
  %792 = and i64 %791, -6708430651619559056
  %793 = or i64 %9, -2668504787659915111
  %794 = xor i64 %9, -1
  %795 = and i64 %794, -7952737239814111501
  %796 = and i64 %9, 7952737239814111500
  %797 = or i64 %795, %796
  %798 = xor i64 5428423687080640106, %797
  %799 = xor i64 %9, -1
  %800 = or i64 2668504787659915110, %799
  %801 = xor i64 %800, -1
  %802 = and i64 %801, -1
  %803 = or i64 %798, %802
  %804 = xor i64 %792, -7416088814709866901
  %805 = xor i64 %804, %786
  %806 = xor i64 %805, %803
  %807 = xor i64 %806, %789
  %808 = xor i64 %807, %793
  %809 = xor i64 %808, %788
  %810 = add i64 %128, -3842894842901384001
  %811 = add i64 -400035104780136510, %128
  %812 = sub i64 %811, 3442859738121247491
  %813 = add i64 %136, -2403394607426028987
  %814 = and i64 -2403394607426028987, %136
  %815 = or i64 -2403394607426028987, %136
  %816 = add i64 %814, %815
  %817 = xor i64 %810, %816
  %818 = xor i64 %817, %813
  %819 = xor i64 %818, %812
  %820 = xor i64 %819, 8744026602277579111
  %821 = mul i64 %809, %820
  %822 = mul i64 105, %821
  %823 = add i64 %27, -2673560188437478381
  %824 = add i64 -4676222846110609549, %27
  %825 = add i64 %824, 2002662657673131168
  %826 = and i64 %51, 1209814093257891506
  %827 = xor i64 %51, -1
  %828 = xor i64 1209814093257891506, %827
  %829 = and i64 %828, 1209814093257891506
  %830 = or i64 %11, 3315186338882569946
  %831 = xor i64 %11, -1
  %832 = and i64 %831, -6862313420327345410
  %833 = and i64 %11, 6862313420327345409
  %834 = or i64 %832, %833
  %835 = xor i64 -8158901687911914460, %834
  %836 = xor i64 %11, -1
  %837 = or i64 -3315186338882569947, %836
  %838 = xor i64 %837, -1
  %839 = and i64 %838, -1
  %840 = or i64 %835, %839
  %841 = xor i64 %840, %825
  %842 = xor i64 %841, %829
  %843 = xor i64 %842, 6092364469518801155
  %844 = xor i64 %843, %830
  %845 = xor i64 %844, %826
  %846 = xor i64 %845, %823
  %847 = add i64 %97, -8824326790410326686
  %848 = and i64 -8824326790410326686, %97
  %849 = or i64 -8824326790410326686, %97
  %850 = add i64 %848, %849
  %851 = or i64 %140, 7530816734884278065
  %852 = and i64 7530816734884278065, %140
  %853 = xor i64 7530816734884278065, %140
  %854 = or i64 %852, %853
  %855 = or i64 %51, 2589179091695539604
  %856 = xor i64 %51, -1
  %857 = and i64 %856, -139977060244745414
  %858 = and i64 %51, 139977060244745413
  %859 = or i64 %857, %858
  %860 = xor i64 -2458913511140948306, %859
  %861 = xor i64 %51, -1
  %862 = or i64 -2589179091695539605, %861
  %863 = xor i64 %862, -1
  %864 = and i64 %863, -1
  %865 = or i64 %860, %864
  %866 = xor i64 %851, %855
  %867 = xor i64 %866, %865
  %868 = xor i64 %867, %850
  %869 = xor i64 %868, %847
  %870 = xor i64 %869, 5032353276802441683
  %871 = xor i64 %870, %854
  %872 = mul i64 %846, %871
  %873 = add i64 106, %872
  %874 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 38
  %875 = load i32, i32* %874, align 4
  %876 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 32
  %877 = load i32, i32* %876, align 4
  %878 = sub i32 %875, %877
  %879 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 5
  %880 = load i32, i32* %879, align 4
  %881 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 3
  %882 = load i32, i32* %881, align 4
  %883 = add i32 %880, %882
  %.reload65 = load i1, i1* %.reg2mem64, align 1
  %884 = select i1 %.reload65, i32 %878, i32 %883
  store i32 %884, i32* %dispatcher, align 4
  %885 = load i8*, i8** %90, align 8
  %886 = load i8, i8* %885, align 1
  %887 = mul i8 %886, 2
  %888 = mul i8 %886, 2
  %889 = add i8 2, %888
  %890 = mul i8 %887, %889
  %891 = srem i8 %890, 4
  %892 = icmp eq i8 %891, 0
  %893 = mul i8 %886, %886
  %894 = add i8 %893, %886
  %895 = srem i8 %894, 2
  %896 = icmp eq i8 %895, 0
  %897 = and i1 %892, %896
  %898 = select i1 %897, i32 984876103, i32 984876150
  %899 = add i64 %37, -4362232303495259540
  %900 = sub i64 0, %37
  %901 = sub i64 -4362232303495259540, %900
  %902 = or i64 %23, 8589617385676704979
  %903 = and i64 8589617385676704979, %23
  %904 = xor i64 8589617385676704979, %23
  %905 = or i64 %903, %904
  %906 = and i64 %25, 6705669495938982542
  %907 = xor i64 %25, -1
  %908 = or i64 -6705669495938982543, %907
  %909 = xor i64 %908, -1
  %910 = and i64 %909, -1
  %911 = xor i64 5931624305649859541, %906
  %912 = xor i64 %911, %910
  %913 = xor i64 %912, %905
  %914 = xor i64 %913, %901
  %915 = xor i64 %914, %899
  %916 = xor i64 %915, %902
  %917 = add i64 %19, -3838995900774011802
  %918 = add i64 -6954738470026638702, %19
  %919 = add i64 %918, 3115742569252626900
  %920 = or i64 %27, -5532747636867855873
  %921 = xor i64 %27, -1
  %922 = and i64 %921, 5610988623783245407
  %923 = and i64 %27, -5610988623783245408
  %924 = or i64 %922, %923
  %925 = xor i64 -78382834120147040, %924
  %926 = xor i64 %27, -1
  %927 = or i64 5532747636867855872, %926
  %928 = xor i64 %927, -1
  %929 = and i64 %928, -1
  %930 = or i64 %925, %929
  %931 = or i64 %97, -6792374223855868714
  %932 = and i64 -6792374223855868714, %97
  %933 = xor i64 -6792374223855868714, %97
  %934 = or i64 %932, %933
  %935 = xor i64 %917, %919
  %936 = xor i64 %935, -3003397590230029075
  %937 = xor i64 %936, %920
  %938 = xor i64 %937, %931
  %939 = xor i64 %938, %930
  %940 = xor i64 %939, %934
  %941 = mul i64 %916, %940
  %942 = trunc i64 %941 to i32
  %943 = xor i32 %898, %942
  store i32 %943, i32* %0, align 4
  %944 = call i8** @bf3690775341412318723(i32* %0)
  %945 = load i8*, i8** %944, align 8
  indirectbr i8* %945, [label %loopEnd, label %717]

946:                                              ; preds = %946, %loopStart
  %947 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 8
  %948 = load i32, i32* %947, align 4
  %949 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 6
  %950 = load i32, i32* %949, align 4
  %951 = sub i32 %948, -590369699
  %952 = add i32 %951, %950
  %953 = add i32 %952, -590369699
  store i32 %953, i32* %dispatcher, align 4
  %954 = load i8*, i8** %6, align 8
  %955 = load i8, i8* %954, align 1
  %956 = and i8 %955, 1
  %957 = icmp eq i8 %956, 0
  %958 = mul i8 %955, %955
  %959 = add i8 %958, %955
  %960 = mul i8 %959, 3
  %961 = srem i8 %960, 2
  %962 = icmp eq i8 %961, 0
  %963 = or i1 %957, %962
  %964 = and i64 %122, -4958916557189781370
  %965 = xor i64 %122, -1
  %966 = or i64 4958916557189781369, %965
  %967 = xor i64 %966, -1
  %968 = and i64 %967, -1
  %969 = or i64 %39, 2803878393935861570
  %970 = xor i64 %39, -1
  %971 = and i64 2803878393935861570, %970
  %972 = add i64 %971, %39
  %973 = xor i64 %964, %969
  %974 = xor i64 %973, 6451539407104032961
  %975 = xor i64 %974, %972
  %976 = xor i64 %975, %968
  %977 = or i64 %124, 3901698110855568289
  %978 = xor i64 %124, -1
  %979 = and i64 %978, 2387261451537824057
  %980 = and i64 %124, -2387261451537824058
  %981 = or i64 %979, %980
  %982 = xor i64 1658692894141112984, %981
  %983 = xor i64 %124, -1
  %984 = or i64 -3901698110855568290, %983
  %985 = xor i64 %984, -1
  %986 = and i64 %985, -1
  %987 = or i64 %982, %986
  %988 = add i64 %93, 1629435896855342902
  %989 = add i64 5603570076049757118, %93
  %990 = add i64 %989, -3974134179194414216
  %991 = add i64 %75, 7868641152563692959
  %992 = xor i64 7868641152563692959, %75
  %993 = and i64 7868641152563692959, %75
  %994 = mul i64 2, %993
  %995 = add i64 %992, %994
  %996 = xor i64 %990, %988
  %997 = xor i64 %996, %995
  %998 = xor i64 %997, %987
  %999 = xor i64 %998, %977
  %1000 = xor i64 %999, %991
  %1001 = xor i64 %1000, 471372314714213366
  %1002 = mul i64 %976, %1001
  %1003 = trunc i64 %1002 to i32
  %1004 = select i1 %963, i32 984876120, i32 %1003
  %1005 = xor i32 %1004, 46
  store i32 %1005, i32* %0, align 4
  %1006 = call i8** @bf3690775341412318723(i32* %0)
  %1007 = load i8*, i8** %1006, align 8
  indirectbr i8* %1007, [label %loopEnd, label %946]

1008:                                             ; preds = %1008, %loopStart
  %1009 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 11
  %1010 = load i32, i32* %1009, align 4
  %1011 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %1012 = load i32, i32* %1011, align 4
  %1013 = srem i32 %1010, %1012
  store i32 %1013, i32* %dispatcher, align 4
  %1014 = load i8*, i8** %98, align 8
  %1015 = load i8, i8* %1014, align 1
  %1016 = mul i8 %1015, 2
  %1017 = mul i8 %1015, 2
  %1018 = add i8 -79, %1017
  %1019 = and i64 %71, -1025206747974120898
  %1020 = or i64 1025206747974120897, %71
  %1021 = sub i64 %1020, 1025206747974120897
  %1022 = or i64 %31, 2565479711915189407
  %1023 = xor i64 %31, -1
  %1024 = and i64 2565479711915189407, %1023
  %1025 = add i64 %1024, %31
  %1026 = xor i64 %1019, %1021
  %1027 = xor i64 %1026, 5479046530272111139
  %1028 = xor i64 %1027, %1022
  %1029 = xor i64 %1028, %1025
  %1030 = add i64 %31, -1845817604512308559
  %1031 = and i64 -1845817604512308559, %31
  %1032 = or i64 -1845817604512308559, %31
  %1033 = add i64 %1031, %1032
  %1034 = and i64 %13, -8277801868186381680
  %1035 = xor i64 %13, -1
  %1036 = or i64 8277801868186381679, %1035
  %1037 = xor i64 %1036, -1
  %1038 = and i64 %1037, -1
  %1039 = xor i64 5866115960876595717, %1034
  %1040 = xor i64 %1039, %1038
  %1041 = xor i64 %1040, %1033
  %1042 = xor i64 %1041, %1030
  %1043 = mul i64 %1029, %1042
  %1044 = trunc i64 %1043 to i8
  %1045 = sub i8 %1018, %1044
  %1046 = mul i8 %1016, %1045
  %1047 = srem i8 %1046, 4
  %1048 = and i64 %45, -3235873467475454350
  %1049 = xor i64 %45, -1
  %1050 = or i64 3235873467475454349, %1049
  %1051 = xor i64 %1050, -1
  %1052 = and i64 %1051, -1
  %1053 = or i64 %110, -8939933757393244848
  %1054 = and i64 -8939933757393244848, %110
  %1055 = xor i64 -8939933757393244848, %110
  %1056 = or i64 %1054, %1055
  %1057 = xor i64 %1052, %1048
  %1058 = xor i64 %1057, -4187430085009699989
  %1059 = xor i64 %1058, %1053
  %1060 = xor i64 %1059, %1056
  %1061 = sext i32 %dispatcher1 to i64
  %1062 = or i64 %1061, -3762810694612783956
  %1063 = xor i64 %1061, -1
  %1064 = and i64 %1063, 190807738944226226
  %1065 = and i64 %1061, -190807738944226227
  %1066 = or i64 %1064, %1065
  %1067 = xor i64 -3935533385782726882, %1066
  %1068 = xor i64 %1061, -1
  %1069 = or i64 3762810694612783955, %1068
  %1070 = xor i64 %1069, -1
  %1071 = and i64 %1070, -1
  %1072 = or i64 %1067, %1071
  %1073 = add i64 %95, 7692570798900923866
  %1074 = and i64 7692570798900923866, %95
  %1075 = or i64 7692570798900923866, %95
  %1076 = add i64 %1074, %1075
  %1077 = xor i64 %1076, %1062
  %1078 = xor i64 %1077, %1072
  %1079 = xor i64 %1078, 0
  %1080 = xor i64 %1079, %1073
  %1081 = mul i64 %1060, %1080
  %1082 = trunc i64 %1081 to i8
  %1083 = icmp eq i8 %1047, %1082
  %1084 = mul i8 %1015, %1015
  %1085 = add i8 %1084, %1015
  %1086 = srem i8 %1085, 2
  %1087 = icmp eq i8 %1086, 0
  %1088 = and i1 %1083, %1087
  %1089 = select i1 %1088, i32 984876142, i32 984876150
  %1090 = xor i32 %1089, 1107023559
  %1091 = xor i32 %1090, 1107023583
  store i32 %1091, i32* %0, align 4
  %1092 = call i8** @bf3690775341412318723(i32* %0)
  %1093 = load i8*, i8** %1092, align 8
  indirectbr i8* %1093, [label %loopEnd, label %1008]

codeRepl2:                                        ; preds = %codeRepl2, %loopStart
  store i64 4070807658626890115, i64* %101, align 8
  %1094 = call i8** @lk1336881106680510526(i64* %101)
  %1095 = load i8*, i8** %1094, align 8
  %1096 = bitcast i8* %1095 to void ([51 x i32]*, i32*)*
  call void %1096([51 x i32]* %lookupTable, i32* %dispatcher)
  %1097 = load i8*, i8** %48, align 8
  %1098 = load i8, i8* %1097, align 1
  %1099 = xor i8 %1098, -1
  %1100 = or i8 %1099, 1
  %1101 = xor i8 %1098, -1
  %1102 = sub i8 %1100, %1101
  %1103 = icmp eq i8 %1102, 0
  %1104 = mul i8 %1098, %1098
  %1105 = add i8 %1104, %1098
  %1106 = mul i8 %1105, 3
  %1107 = srem i8 %1106, 2
  %1108 = and i64 %11, -3305099306031160025
  %1109 = or i64 3305099306031160024, %11
  %1110 = sub i64 %1109, 3305099306031160024
  %1111 = add i64 %102, -1856483084853867794
  %1112 = add i64 93400748653952945, %102
  %1113 = sub i64 %1112, 1949883833507820739
  %1114 = or i64 %89, -5659957066115249024
  %1115 = xor i64 %89, -1
  %1116 = and i64 %1115, -6562978238976955418
  %1117 = and i64 %89, 6562978238976955417
  %1118 = or i64 %1116, %1117
  %1119 = xor i64 1556087238915647334, %1118
  %1120 = xor i64 %89, -1
  %1121 = or i64 5659957066115249023, %1120
  %1122 = xor i64 %1121, -1
  %1123 = and i64 %1122, -1
  %1124 = or i64 %1119, %1123
  %1125 = xor i64 %1113, %1110
  %1126 = xor i64 %1125, %1108
  %1127 = xor i64 %1126, %1114
  %1128 = xor i64 %1127, 8513073501886706459
  %1129 = xor i64 %1128, %1111
  %1130 = xor i64 %1129, %1124
  %1131 = and i64 %21, -2040314411094254444
  %1132 = or i64 2040314411094254443, %21
  %1133 = sub i64 %1132, 2040314411094254443
  %1134 = or i64 %25, -2388799727008263854
  %1135 = and i64 -2388799727008263854, %25
  %1136 = xor i64 -2388799727008263854, %25
  %1137 = or i64 %1135, %1136
  %1138 = add i64 %83, -787027219861395784
  %1139 = sub i64 0, %83
  %1140 = add i64 787027219861395784, %1139
  %1141 = sub i64 0, %1140
  %1142 = xor i64 0, %1131
  %1143 = xor i64 %1142, %1134
  %1144 = xor i64 %1143, %1141
  %1145 = xor i64 %1144, %1138
  %1146 = xor i64 %1145, %1133
  %1147 = xor i64 %1146, %1137
  %1148 = mul i64 %1130, %1147
  %1149 = trunc i64 %1148 to i8
  %1150 = icmp eq i8 %1107, %1149
  %1151 = or i1 %1103, %1150
  %1152 = select i1 %1151, i32 984876144, i32 984876150
  %1153 = xor i32 %1152, 6
  store i32 %1153, i32* %0, align 4
  %1154 = call i8** @bf3690775341412318723(i32* %0)
  %1155 = load i8*, i8** %1154, align 8
  indirectbr i8* %1155, [label %loopEnd, label %codeRepl2]

1156:                                             ; preds = %1156, %loopStart
  %1157 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  %1158 = load i32, i32* %1157, align 4
  %1159 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 15
  %1160 = load i32, i32* %1159, align 4
  %1161 = sub i32 0, %1160
  %1162 = sub i32 %1158, %1161
  store i32 %1162, i32* %dispatcher, align 4
  %1163 = load i8*, i8** %46, align 8
  %1164 = load i8, i8* %1163, align 1
  %1165 = mul i8 %1164, 2
  %1166 = mul i8 %1164, 2
  %1167 = add i8 53, %1166
  %1168 = sub i8 %1167, 51
  %1169 = mul i8 %1165, %1168
  %1170 = srem i8 %1169, 4
  %1171 = icmp eq i8 %1170, 0
  %1172 = mul i8 %1164, %1164
  %1173 = add i8 %1172, %1164
  %1174 = srem i8 %1173, 2
  %1175 = icmp eq i8 %1174, 0
  %1176 = or i1 %1171, %1175
  %1177 = add i64 %29, 2638243511728687425
  %1178 = sub i64 0, %29
  %1179 = add i64 -2638243511728687425, %1178
  %1180 = sub i64 0, %1179
  %1181 = or i64 %5, -5666082666675281333
  %1182 = xor i64 %5, -1
  %1183 = and i64 %1182, 5263130856589274919
  %1184 = and i64 %5, -5263130856589274920
  %1185 = or i64 %1183, %1184
  %1186 = xor i64 -552708598506664596, %1185
  %1187 = xor i64 %5, -1
  %1188 = or i64 5666082666675281332, %1187
  %1189 = xor i64 %1188, -1
  %1190 = and i64 %1189, -1
  %1191 = or i64 %1186, %1190
  %1192 = xor i64 %1177, %1191
  %1193 = xor i64 %1192, %1181
  %1194 = xor i64 %1193, %1180
  %1195 = xor i64 %1194, -3302902411276462195
  %1196 = add i64 %19, 529531591963373730
  %1197 = and i64 529531591963373730, %19
  %1198 = or i64 529531591963373730, %19
  %1199 = add i64 %1197, %1198
  %1200 = add i64 %25, -7890037472164062825
  %1201 = xor i64 -7890037472164062825, %25
  %1202 = and i64 -7890037472164062825, %25
  %1203 = mul i64 2, %1202
  %1204 = add i64 %1201, %1203
  %1205 = xor i64 %1196, %1200
  %1206 = xor i64 %1205, %1199
  %1207 = xor i64 %1206, %1204
  %1208 = xor i64 %1207, -6561428262612701550
  %1209 = mul i64 %1195, %1208
  %1210 = trunc i64 %1209 to i32
  %1211 = select i1 %1176, i32 %1210, i32 984876150
  %1212 = xor i32 %1211, 28
  store i32 %1212, i32* %0, align 4
  %1213 = call i8** @bf3690775341412318723(i32* %0)
  %1214 = load i8*, i8** %1213, align 8
  indirectbr i8* %1214, [label %loopEnd, label %1156]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %.reload52 = load i32, i32* %.reg2mem49, align 4
  %1215 = and i32 %.reload52, 1
  %1216 = icmp eq i32 %1215, 0
  %.reload51 = load i32, i32* %.reg2mem49, align 4
  %1217 = mul i32 %.reload51, %.reload51
  store i32 %1217, i32* %.reg2mem67, align 4
  %.reload50 = load i32, i32* %.reg2mem49, align 4
  %.reload69 = load i32, i32* %.reg2mem67, align 4
  %1218 = add i32 %.reload69, %.reload50
  %1219 = add i64 %118, 3386560905676066850
  %1220 = xor i64 3386560905676066850, %118
  %1221 = and i64 3386560905676066850, %118
  %1222 = mul i64 2, %1221
  %1223 = add i64 %1220, %1222
  %1224 = or i64 %33, 8944533300803897662
  %1225 = xor i64 %33, -1
  %1226 = and i64 8944533300803897662, %1225
  %1227 = add i64 %1226, %33
  %1228 = xor i64 %1224, %1219
  %1229 = xor i64 %1228, %1223
  %1230 = xor i64 %1229, %1227
  %1231 = xor i64 %1230, -9114660954730421659
  %1232 = add i64 %97, -4447874171855355013
  %1233 = sub i64 0, %97
  %1234 = add i64 4447874171855355013, %1233
  %1235 = sub i64 0, %1234
  %1236 = add i64 %69, -758150991524108640
  %1237 = xor i64 -758150991524108640, %69
  %1238 = and i64 -758150991524108640, %69
  %1239 = mul i64 2, %1238
  %1240 = add i64 %1237, %1239
  %1241 = and i64 %15, 903295999715459111
  %1242 = or i64 -903295999715459112, %15
  %1243 = sub i64 %1242, -903295999715459112
  %1244 = xor i64 %1235, 3858071570999393863
  %1245 = xor i64 %1244, %1240
  %1246 = xor i64 %1245, %1232
  %1247 = xor i64 %1246, %1241
  %1248 = xor i64 %1247, %1236
  %1249 = xor i64 %1248, %1243
  %1250 = mul i64 %1231, %1249
  %1251 = trunc i64 %1250 to i32
  %1252 = mul i32 %1218, %1251
  %1253 = srem i32 %1252, 2
  %1254 = icmp eq i32 %1253, 0
  %1255 = xor i1 %1254, true
  %1256 = xor i1 %1216, true
  %1257 = xor i1 %1255, true
  %1258 = or i1 %1256, %1257
  %1259 = xor i1 %1258, true
  %1260 = and i1 %1259, true
  %1261 = add i1 %1260, %1254
  %1262 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 14
  %1263 = load i32, i32* %1262, align 4
  %1264 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %1265 = load i32, i32* %1264, align 4
  %1266 = srem i32 %1263, %1265
  %1267 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 21
  %1268 = load i32, i32* %1267, align 4
  %1269 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %1270 = load i32, i32* %1269, align 4
  %1271 = srem i32 %1268, %1270
  %1272 = select i1 %1261, i32 %1266, i32 %1271
  store i32 %1272, i32* %dispatcher, align 4
  %1273 = load i8*, i8** %60, align 8
  %1274 = load i8, i8* %1273, align 1
  %1275 = and i8 %1274, 1
  %1276 = icmp eq i8 %1275, 0
  %1277 = mul i8 %1274, %1274
  %1278 = add i8 %1277, 108
  %1279 = add i8 %1278, %1274
  %1280 = sub i8 %1279, 108
  %1281 = mul i8 %1280, 3
  %1282 = and i64 %45, 1388045613471681426
  %1283 = xor i64 %45, -1
  %1284 = or i64 -1388045613471681427, %1283
  %1285 = xor i64 %1284, -1
  %1286 = and i64 %1285, -1
  %1287 = add i64 %51, 6865504149795653179
  %1288 = xor i64 6865504149795653179, %51
  %1289 = and i64 6865504149795653179, %51
  %1290 = mul i64 2, %1289
  %1291 = add i64 %1288, %1290
  %1292 = and i64 %138, 6232555241466908119
  %1293 = or i64 -6232555241466908120, %138
  %1294 = sub i64 %1293, -6232555241466908120
  %1295 = xor i64 %1286, -7265409639277036225
  %1296 = xor i64 %1295, %1291
  %1297 = xor i64 %1296, %1287
  %1298 = xor i64 %1297, %1282
  %1299 = xor i64 %1298, %1294
  %1300 = xor i64 %1299, %1292
  %1301 = and i64 %51, 3338075071804303387
  %1302 = xor i64 %51, -1
  %1303 = or i64 -3338075071804303388, %1302
  %1304 = xor i64 %1303, -1
  %1305 = and i64 %1304, -1
  %1306 = and i64 %15, 4939629271339437990
  %1307 = or i64 -4939629271339437991, %15
  %1308 = sub i64 %1307, -4939629271339437991
  %1309 = add i64 %49, -986227778796202823
  %1310 = xor i64 -986227778796202823, %49
  %1311 = and i64 -986227778796202823, %49
  %1312 = mul i64 2, %1311
  %1313 = add i64 %1310, %1312
  %1314 = xor i64 %1306, %1305
  %1315 = xor i64 %1314, 6975904665290794366
  %1316 = xor i64 %1315, %1309
  %1317 = xor i64 %1316, %1313
  %1318 = xor i64 %1317, %1301
  %1319 = xor i64 %1318, %1308
  %1320 = mul i64 %1300, %1319
  %1321 = trunc i64 %1320 to i8
  %1322 = srem i8 %1281, %1321
  %1323 = icmp eq i8 %1322, 0
  %1324 = or i1 %1276, %1323
  %1325 = add i64 %95, -3509222365374832318
  %1326 = sub i64 0, %95
  %1327 = sub i64 -3509222365374832318, %1326
  %1328 = and i64 %110, 3391195452336767571
  %1329 = xor i64 %110, -1
  %1330 = xor i64 3391195452336767571, %1329
  %1331 = and i64 %1330, 3391195452336767571
  %1332 = add i64 %104, -8728022126699267967
  %1333 = add i64 -58023602327043942, %104
  %1334 = sub i64 %1333, 8669998524372224025
  %1335 = xor i64 %1328, -4696126749898389863
  %1336 = xor i64 %1335, %1334
  %1337 = xor i64 %1336, %1325
  %1338 = xor i64 %1337, %1331
  %1339 = xor i64 %1338, %1327
  %1340 = xor i64 %1339, %1332
  %1341 = add i64 %43, -2749916738604953207
  %1342 = add i64 3418282547051249199, %43
  %1343 = sub i64 %1342, 6168199285656202406
  %1344 = and i64 %71, 8275323253397528233
  %1345 = xor i64 %71, -1
  %1346 = or i64 -8275323253397528234, %1345
  %1347 = xor i64 %1346, -1
  %1348 = and i64 %1347, -1
  %1349 = or i64 %25, -2415076586088574930
  %1350 = xor i64 %25, -1
  %1351 = and i64 %1350, -6503512830093410609
  %1352 = and i64 %25, 6503512830093410608
  %1353 = or i64 %1351, %1352
  %1354 = xor i64 8918549112170082017, %1353
  %1355 = xor i64 %25, -1
  %1356 = or i64 2415076586088574929, %1355
  %1357 = xor i64 %1356, -1
  %1358 = and i64 %1357, -1
  %1359 = or i64 %1354, %1358
  %1360 = xor i64 %1359, %1348
  %1361 = xor i64 %1360, %1343
  %1362 = xor i64 %1361, -224953729159811098
  %1363 = xor i64 %1362, %1341
  %1364 = xor i64 %1363, %1349
  %1365 = xor i64 %1364, %1344
  %1366 = mul i64 %1340, %1365
  %1367 = trunc i64 %1366 to i32
  %1368 = select i1 %1324, i32 984876100, i32 %1367
  %1369 = xor i32 %1368, 50
  store i32 %1369, i32* %0, align 4
  %1370 = call i8** @bf3690775341412318723(i32* %0)
  %1371 = load i8*, i8** %1370, align 8
  indirectbr i8* %1371, [label %loopEnd, label %.loopexit]

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  store i64 4070807658626890125, i64* %101, align 8
  %1372 = call i8** @lk1336881106680510526(i64* %101)
  %1373 = load i8*, i8** %1372, align 8
  %1374 = bitcast i8* %1373 to void (i32*, [51 x i32]*, i32*)*
  call void %1374(i32* %.reg2mem67, [51 x i32]* %lookupTable, i32* %dispatcher)
  %1375 = load i8*, i8** %76, align 8
  %1376 = load i8, i8* %1375, align 1
  %1377 = xor i8 %1376, -1
  %1378 = or i8 %1377, -2
  %1379 = xor i8 %1378, -1
  %1380 = and i8 %1379, -1
  %1381 = icmp eq i8 %1380, 1
  %1382 = mul i8 %1376, %1376
  %1383 = add i8 %1382, %1376
  %1384 = srem i8 %1383, 2
  %1385 = icmp eq i8 %1384, 0
  %1386 = or i1 %1381, %1385
  %1387 = select i1 %1386, i32 984876135, i32 984876150
  %1388 = xor i32 %1387, -1
  %1389 = or i64 %37, -6909024998793876818
  %1390 = xor i64 %37, -1
  %1391 = and i64 -6909024998793876818, %1390
  %1392 = add i64 %1391, %37
  %1393 = or i64 %49, 1284219904147941792
  %1394 = xor i64 %49, -1
  %1395 = and i64 %1394, -3494600100278601538
  %1396 = and i64 %49, 3494600100278601537
  %1397 = or i64 %1395, %1396
  %1398 = xor i64 -2426639154619084514, %1397
  %1399 = xor i64 %49, -1
  %1400 = or i64 -1284219904147941793, %1399
  %1401 = xor i64 %1400, -1
  %1402 = and i64 %1401, -1
  %1403 = or i64 %1398, %1402
  %1404 = xor i64 %1389, 1186297617047627939
  %1405 = xor i64 %1404, %1393
  %1406 = xor i64 %1405, %1403
  %1407 = xor i64 %1406, %1392
  %1408 = or i64 %77, 7894326338520597791
  %1409 = xor i64 %77, -1
  %1410 = and i64 %1409, -8727437878814431112
  %1411 = and i64 %77, 8727437878814431111
  %1412 = or i64 %1410, %1411
  %1413 = xor i64 -1481773854761292441, %1412
  %1414 = xor i64 %77, -1
  %1415 = or i64 -7894326338520597792, %1414
  %1416 = xor i64 %1415, -1
  %1417 = and i64 %1416, -1
  %1418 = or i64 %1413, %1417
  %1419 = sext i32 %dispatcher1 to i64
  %1420 = and i64 %1419, -6800907754773112914
  %1421 = xor i64 %1419, -1
  %1422 = xor i64 -6800907754773112914, %1421
  %1423 = and i64 %1422, -6800907754773112914
  %1424 = xor i64 %1420, -5380576339872856137
  %1425 = xor i64 %1424, %1423
  %1426 = xor i64 %1425, %1408
  %1427 = xor i64 %1426, %1418
  %1428 = mul i64 %1407, %1427
  %1429 = trunc i64 %1428 to i32
  %1430 = and i32 %1388, %1429
  %1431 = and i32 %1387, -1177731462
  %1432 = or i32 %1430, %1431
  %1433 = xor i32 %1432, 1177731476
  store i32 %1433, i32* %0, align 4
  %1434 = call i8** @bf3690775341412318723(i32* %0)
  %1435 = load i8*, i8** %1434, align 8
  indirectbr i8* %1435, [label %loopEnd, label %codeRepl3]

codeRepl4:                                        ; preds = %codeRepl4, %loopStart
  store i64 4070807658626890112, i64* %101, align 8
  %1436 = call i8** @lk1336881106680510526(i64* %101)
  %1437 = load i8*, i8** %1436, align 8
  %1438 = bitcast i8* %1437 to void ([51 x i32]*, i32*)*
  call void %1438([51 x i32]* %lookupTable, i32* %dispatcher)
  %1439 = load i8*, i8** %56, align 8
  %1440 = load i8, i8* %1439, align 1
  %1441 = xor i8 %1440, -1
  %1442 = or i8 %1441, -2
  %1443 = xor i8 %1442, -1
  %1444 = and i64 %112, -1884555418070758940
  %1445 = or i64 1884555418070758939, %112
  %1446 = sub i64 %1445, 1884555418070758939
  %1447 = and i64 %11, -3048491115453961738
  %1448 = xor i64 %11, -1
  %1449 = or i64 3048491115453961737, %1448
  %1450 = xor i64 %1449, -1
  %1451 = and i64 %1450, -1
  %1452 = xor i64 %1447, %1446
  %1453 = xor i64 %1452, %1444
  %1454 = xor i64 %1453, 5099375827517982695
  %1455 = xor i64 %1454, %1451
  %1456 = or i64 %120, 7315054295765882215
  %1457 = and i64 7315054295765882215, %120
  %1458 = xor i64 7315054295765882215, %120
  %1459 = or i64 %1457, %1458
  %1460 = or i64 %39, -5104826503946819614
  %1461 = xor i64 %39, -1
  %1462 = and i64 %1461, 6595757967727223699
  %1463 = and i64 %39, -6595757967727223700
  %1464 = or i64 %1462, %1463
  %1465 = xor i64 -2116456828503767951, %1464
  %1466 = xor i64 %39, -1
  %1467 = or i64 5104826503946819613, %1466
  %1468 = xor i64 %1467, -1
  %1469 = and i64 %1468, -1
  %1470 = or i64 %1465, %1469
  %1471 = or i64 %106, -8897606918007038145
  %1472 = and i64 -8897606918007038145, %106
  %1473 = xor i64 -8897606918007038145, %106
  %1474 = or i64 %1472, %1473
  %1475 = xor i64 %1474, %1459
  %1476 = xor i64 %1475, %1456
  %1477 = xor i64 %1476, %1470
  %1478 = xor i64 %1477, %1460
  %1479 = xor i64 %1478, %1471
  %1480 = xor i64 %1479, 2958607011936205609
  %1481 = mul i64 %1455, %1480
  %1482 = trunc i64 %1481 to i8
  %1483 = and i8 %1443, %1482
  %1484 = icmp eq i8 %1483, 0
  %1485 = mul i8 %1440, %1440
  %1486 = add i8 %1485, %1440
  %1487 = mul i8 %1486, 3
  %1488 = srem i8 %1487, 2
  %1489 = icmp eq i8 %1488, 0
  %1490 = xor i1 %1484, true
  %1491 = and i1 %1490, true
  %1492 = and i1 %1484, false
  %1493 = or i1 %1491, %1492
  %1494 = xor i1 %1489, true
  %1495 = and i1 %1494, true
  %1496 = and i1 %1489, false
  %1497 = or i1 %1495, %1496
  %1498 = xor i1 %1493, %1497
  %1499 = xor i1 %1484, true
  %1500 = xor i1 %1489, true
  %1501 = or i1 %1499, %1500
  %1502 = xor i1 %1501, true
  %1503 = and i1 %1502, true
  %1504 = or i1 %1498, %1503
  %1505 = select i1 %1504, i32 984876106, i32 984876150
  %1506 = xor i32 %1505, -1
  %1507 = and i32 %1506, 60
  %1508 = and i32 %1505, -61
  %1509 = or i32 %1507, %1508
  store i32 %1509, i32* %0, align 4
  %1510 = call i8** @bf3690775341412318723(i32* %0)
  %1511 = load i8*, i8** %1510, align 8
  indirectbr i8* %1511, [label %loopEnd, label %codeRepl4]

codeRepl5:                                        ; preds = %codeRepl5, %loopStart
  store i64 4070807658626890118, i64* %101, align 8
  %1512 = call i8** @lk1336881106680510526(i64* %101)
  %1513 = load i8*, i8** %1512, align 8
  %1514 = bitcast i8* %1513 to void (i32*, i32*, i32*, i32*, i1*, [51 x i32]*, i32*)*
  call void %1514(i32* %.reg2mem70, i32* %.reg2mem72, i32* %.reg2mem96, i32* %.reg2mem100, i1* %.reg2mem74, [51 x i32]* %lookupTable, i32* %dispatcher)
  %1515 = load i8*, i8** %82, align 8
  %1516 = load i8, i8* %1515, align 1
  %1517 = mul i8 %1516, 2
  %1518 = mul i8 %1516, 2
  %1519 = sext i32 %211 to i64
  %1520 = or i64 %1519, 1162961927106684986
  %1521 = xor i64 %1519, -1
  %1522 = and i64 1162961927106684986, %1521
  %1523 = add i64 %1522, %1519
  %1524 = and i64 %29, -8407914142456674307
  %1525 = xor i64 %29, -1
  %1526 = xor i64 -8407914142456674307, %1525
  %1527 = and i64 %1526, -8407914142456674307
  %1528 = xor i64 %1520, -8614474738531882051
  %1529 = xor i64 %1528, %1524
  %1530 = xor i64 %1529, %1523
  %1531 = xor i64 %1530, %1527
  %1532 = and i64 %7, -6680948508703690975
  %1533 = or i64 6680948508703690974, %7
  %1534 = sub i64 %1533, 6680948508703690974
  %1535 = add i64 %45, 1392488272835314462
  %1536 = sub i64 0, %45
  %1537 = sub i64 1392488272835314462, %1536
  %1538 = and i64 %69, 3023587223150474655
  %1539 = xor i64 %69, -1
  %1540 = xor i64 3023587223150474655, %1539
  %1541 = and i64 %1540, 3023587223150474655
  %1542 = xor i64 %1538, %1541
  %1543 = xor i64 %1542, %1537
  %1544 = xor i64 %1543, %1535
  %1545 = xor i64 %1544, -185913424777761549
  %1546 = xor i64 %1545, %1532
  %1547 = xor i64 %1546, %1534
  %1548 = mul i64 %1531, %1547
  %1549 = trunc i64 %1548 to i8
  %1550 = add i8 %1549, %1518
  %1551 = add i8 %1550, -101
  %1552 = mul i8 %1517, %1551
  %1553 = srem i8 %1552, 4
  %1554 = icmp eq i8 %1553, 0
  %1555 = mul i8 %1516, %1516
  %1556 = add i8 %1555, %1516
  %1557 = srem i8 %1556, 2
  %1558 = icmp eq i8 %1557, 0
  %1559 = add i64 %59, 4580406531618138650
  %1560 = add i64 -5838542625183370913, %59
  %1561 = sub i64 %1560, 8027794916908042053
  %1562 = or i64 %71, 3978990100920839022
  %1563 = and i64 3978990100920839022, %71
  %1564 = xor i64 3978990100920839022, %71
  %1565 = or i64 %1563, %1564
  %1566 = xor i64 -8682147025928036753, %1561
  %1567 = xor i64 %1566, %1559
  %1568 = xor i64 %1567, %1565
  %1569 = xor i64 %1568, %1562
  %1570 = and i64 %110, -3098633391386746579
  %1571 = or i64 3098633391386746578, %110
  %1572 = sub i64 %1571, 3098633391386746578
  %1573 = and i64 %61, -6601792156706030633
  %1574 = or i64 6601792156706030632, %61
  %1575 = sub i64 %1574, 6601792156706030632
  %1576 = xor i64 %1573, -5114485744509861745
  %1577 = xor i64 %1576, %1575
  %1578 = xor i64 %1577, %1572
  %1579 = xor i64 %1578, %1570
  %1580 = mul i64 %1569, %1579
  %1581 = trunc i64 %1580 to i1
  %1582 = xor i1 %1554, %1581
  %1583 = or i1 %1582, %1558
  %1584 = and i64 %31, 8246968296977098543
  %1585 = xor i64 %31, -1
  %1586 = xor i64 8246968296977098543, %1585
  %1587 = and i64 %1586, 8246968296977098543
  %1588 = add i64 %134, 8209358083075359546
  %1589 = and i64 8209358083075359546, %134
  %1590 = or i64 8209358083075359546, %134
  %1591 = add i64 %1589, %1590
  %1592 = xor i64 %1588, -7759470911950877867
  %1593 = xor i64 %1592, %1584
  %1594 = xor i64 %1593, %1587
  %1595 = xor i64 %1594, %1591
  %1596 = add i64 %47, -6859302263051007248
  %1597 = add i64 4750684214556980021, %47
  %1598 = sub i64 %1597, -6836757596101564347
  %1599 = and i64 %27, 1191016775065398264
  %1600 = xor i64 %27, -1
  %1601 = or i64 -1191016775065398265, %1600
  %1602 = xor i64 %1601, -1
  %1603 = and i64 %1602, -1
  %1604 = xor i64 %1603, %1596
  %1605 = xor i64 %1604, %1598
  %1606 = xor i64 %1605, 5724853223277894141
  %1607 = xor i64 %1606, %1599
  %1608 = mul i64 %1595, %1607
  %1609 = trunc i64 %1608 to i1
  %1610 = xor i1 %1554, %1609
  %1611 = sub i1 %1583, %1610
  %1612 = and i64 %79, -7134782427777203020
  %1613 = or i64 7134782427777203019, %79
  %1614 = sub i64 %1613, 7134782427777203019
  %1615 = or i64 %138, -2259260877924115280
  %1616 = and i64 -2259260877924115280, %138
  %1617 = xor i64 -2259260877924115280, %138
  %1618 = or i64 %1616, %1617
  %1619 = xor i64 %1614, %1615
  %1620 = xor i64 %1619, 7694777275969134913
  %1621 = xor i64 %1620, %1612
  %1622 = xor i64 %1621, %1618
  %1623 = and i64 %35, -6214144511652329308
  %1624 = or i64 6214144511652329307, %35
  %1625 = sub i64 %1624, 6214144511652329307
  %1626 = sext i32 %206 to i64
  %1627 = add i64 %1626, 8024962624290070401
  %1628 = sub i64 0, %1626
  %1629 = add i64 -8024962624290070401, %1628
  %1630 = sub i64 0, %1629
  %1631 = or i64 %128, -602945081173247150
  %1632 = xor i64 %128, -1
  %1633 = and i64 -602945081173247150, %1632
  %1634 = add i64 %1633, %128
  %1635 = xor i64 %1627, %1630
  %1636 = xor i64 %1635, %1631
  %1637 = xor i64 %1636, 659769876023763509
  %1638 = xor i64 %1637, %1625
  %1639 = xor i64 %1638, %1623
  %1640 = xor i64 %1639, %1634
  %1641 = mul i64 %1622, %1640
  %1642 = trunc i64 %1641 to i32
  %1643 = select i1 %1611, i32 %1642, i32 984876150
  %1644 = xor i32 %1643, 3
  store i32 %1644, i32* %0, align 4
  %1645 = call i8** @bf3690775341412318723(i32* %0)
  %1646 = load i8*, i8** %1645, align 8
  indirectbr i8* %1646, [label %loopEnd, label %codeRepl5]

1647:                                             ; preds = %1647, %loopStart
  %1648 = mul i64 7, 97
  %1649 = add i64 55, 15
  %1650 = sub i64 -3346808964334772684, -3346808964334772653
  %1651 = add i64 %27, -6217517605455047693
  %1652 = sub i64 0, %27
  %1653 = sub i64 -6217517605455047693, %1652
  %1654 = or i64 %104, -6270801204780816325
  %1655 = and i64 -6270801204780816325, %104
  %1656 = xor i64 -6270801204780816325, %104
  %1657 = or i64 %1655, %1656
  %1658 = xor i64 5880571722849321775, %1657
  %1659 = xor i64 %1658, %1654
  %1660 = xor i64 %1659, %1651
  %1661 = xor i64 %1660, %1653
  %1662 = and i64 %108, 5352958979988604905
  %1663 = xor i64 %108, -1
  %1664 = or i64 -5352958979988604906, %1663
  %1665 = xor i64 %1664, -1
  %1666 = and i64 %1665, -1
  %1667 = add i64 %23, -8249232153310163242
  %1668 = sub i64 0, %23
  %1669 = add i64 8249232153310163242, %1668
  %1670 = sub i64 0, %1669
  %1671 = sext i32 %dispatcher1 to i64
  %1672 = add i64 %1671, -8195722797097235732
  %1673 = sub i64 0, %1671
  %1674 = add i64 8195722797097235732, %1673
  %1675 = sub i64 0, %1674
  %1676 = xor i64 %1672, %1670
  %1677 = xor i64 %1676, 2162586555624226213
  %1678 = xor i64 %1677, %1666
  %1679 = xor i64 %1678, %1662
  %1680 = xor i64 %1679, %1675
  %1681 = xor i64 %1680, %1667
  %1682 = mul i64 %1661, %1681
  %1683 = and i64 %29, -4115598862635077004
  %1684 = xor i64 %29, -1
  %1685 = or i64 4115598862635077003, %1684
  %1686 = xor i64 %1685, -1
  %1687 = and i64 %1686, -1
  %1688 = add i64 %79, -8750530332798535383
  %1689 = add i64 -7395046326174927927, %79
  %1690 = sub i64 %1689, 1355484006623607456
  %1691 = xor i64 %1683, %1690
  %1692 = xor i64 %1691, 6434739705480295725
  %1693 = xor i64 %1692, %1687
  %1694 = xor i64 %1693, %1688
  %1695 = and i64 %55, -7757135874170410401
  %1696 = xor i64 %55, -1
  %1697 = or i64 7757135874170410400, %1696
  %1698 = xor i64 %1697, -1
  %1699 = and i64 %1698, -1
  %1700 = and i64 %126, 98068616007504350
  %1701 = xor i64 %126, -1
  %1702 = xor i64 98068616007504350, %1701
  %1703 = and i64 %1702, 98068616007504350
  %1704 = add i64 %39, -426343750601928380
  %1705 = sub i64 0, %39
  %1706 = add i64 426343750601928380, %1705
  %1707 = sub i64 0, %1706
  %1708 = xor i64 3459982889247825716, %1707
  %1709 = xor i64 %1708, %1703
  %1710 = xor i64 %1709, %1704
  %1711 = xor i64 %1710, %1699
  %1712 = xor i64 %1711, %1700
  %1713 = xor i64 %1712, %1695
  %1714 = mul i64 %1694, %1713
  %1715 = sub i64 %1682, %1714
  %1716 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 12
  %1717 = load i32, i32* %1716, align 4
  %1718 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 10
  %1719 = load i32, i32* %1718, align 4
  %1720 = add i32 %1717, %1719
  %1721 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 9
  %1722 = load i32, i32* %1721, align 4
  %1723 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 8
  %1724 = load i32, i32* %1723, align 4
  %1725 = add i32 %1722, %1724
  %.reload75 = load i1, i1* %.reg2mem74, align 1
  %1726 = select i1 %.reload75, i32 %1720, i32 %1725
  store i32 %1726, i32* %dispatcher, align 4
  %1727 = load i8*, i8** %82, align 8
  %1728 = load i8, i8* %1727, align 1
  %1729 = xor i8 %1728, -1
  %1730 = or i8 %1729, 1
  %1731 = xor i8 %1728, -1
  %1732 = sub i8 %1730, %1731
  %1733 = icmp eq i8 %1732, 1
  %1734 = mul i8 %1728, %1728
  %1735 = add i8 %1734, -16
  %1736 = add i8 %1735, %1728
  %1737 = sub i8 %1736, -16
  %1738 = srem i8 %1737, 2
  %1739 = icmp eq i8 %1738, 0
  %1740 = or i1 %1733, %1739
  %1741 = and i64 %65, 1358748022376768966
  %1742 = xor i64 %65, -1
  %1743 = or i64 -1358748022376768967, %1742
  %1744 = xor i64 %1743, -1
  %1745 = and i64 %1744, -1
  %1746 = or i64 %31, 5250816779845806432
  %1747 = and i64 5250816779845806432, %31
  %1748 = xor i64 5250816779845806432, %31
  %1749 = or i64 %1747, %1748
  %1750 = or i64 %21, 3701230897649843952
  %1751 = xor i64 %21, -1
  %1752 = and i64 %1751, 6264209853261003023
  %1753 = and i64 %21, -6264209853261003024
  %1754 = or i64 %1752, %1753
  %1755 = xor i64 7328368454338201599, %1754
  %1756 = xor i64 %21, -1
  %1757 = or i64 -3701230897649843953, %1756
  %1758 = xor i64 %1757, -1
  %1759 = and i64 %1758, -1
  %1760 = or i64 %1755, %1759
  %1761 = xor i64 %1750, %1760
  %1762 = xor i64 %1761, %1745
  %1763 = xor i64 %1762, -1235618131535831151
  %1764 = xor i64 %1763, %1741
  %1765 = xor i64 %1764, %1746
  %1766 = xor i64 %1765, %1749
  %1767 = or i64 %37, 7406768608687198898
  %1768 = xor i64 %37, -1
  %1769 = and i64 %1768, 2734355032376257097
  %1770 = and i64 %37, -2734355032376257098
  %1771 = or i64 %1769, %1770
  %1772 = xor i64 4843693574631864571, %1771
  %1773 = xor i64 %37, -1
  %1774 = or i64 -7406768608687198899, %1773
  %1775 = xor i64 %1774, -1
  %1776 = and i64 %1775, -1
  %1777 = or i64 %1772, %1776
  %1778 = add i64 %85, -287952816234083901
  %1779 = xor i64 -287952816234083901, %85
  %1780 = and i64 -287952816234083901, %85
  %1781 = mul i64 2, %1780
  %1782 = add i64 %1779, %1781
  %1783 = and i64 %33, -5770803902636684757
  %1784 = xor i64 %33, -1
  %1785 = xor i64 -5770803902636684757, %1784
  %1786 = and i64 %1785, -5770803902636684757
  %1787 = xor i64 %1782, %1777
  %1788 = xor i64 %1787, %1786
  %1789 = xor i64 %1788, %1778
  %1790 = xor i64 %1789, %1783
  %1791 = xor i64 %1790, %1767
  %1792 = xor i64 %1791, -6026288726934869565
  %1793 = mul i64 %1766, %1792
  %1794 = trunc i64 %1793 to i32
  %1795 = select i1 %1740, i32 %1794, i32 984876150
  %1796 = and i64 %9, -569631785647442694
  %1797 = xor i64 %9, -1
  %1798 = or i64 569631785647442693, %1797
  %1799 = xor i64 %1798, -1
  %1800 = and i64 %1799, -1
  %1801 = add i64 %134, 646492519258437782
  %1802 = add i64 6666220743929927593, %134
  %1803 = add i64 %1802, -6019728224671489811
  %1804 = add i64 %114, -8859747278121823815
  %1805 = add i64 9178165647817051313, %114
  %1806 = add i64 %1805, 408831147770676488
  %1807 = xor i64 %1800, 1775610544891180229
  %1808 = xor i64 %1807, %1796
  %1809 = xor i64 %1808, %1803
  %1810 = xor i64 %1809, %1806
  %1811 = xor i64 %1810, %1804
  %1812 = xor i64 %1811, %1801
  %1813 = add i64 %97, -2998503831079048839
  %1814 = and i64 -2998503831079048839, %97
  %1815 = or i64 -2998503831079048839, %97
  %1816 = add i64 %1814, %1815
  %1817 = add i64 %114, -8116050474743891628
  %1818 = and i64 -8116050474743891628, %114
  %1819 = or i64 -8116050474743891628, %114
  %1820 = add i64 %1818, %1819
  %1821 = and i64 %81, -5060469743695436259
  %1822 = xor i64 %81, -1
  %1823 = xor i64 -5060469743695436259, %1822
  %1824 = and i64 %1823, -5060469743695436259
  %1825 = xor i64 -5261089724362926605, %1820
  %1826 = xor i64 %1825, %1813
  %1827 = xor i64 %1826, %1821
  %1828 = xor i64 %1827, %1824
  %1829 = xor i64 %1828, %1816
  %1830 = xor i64 %1829, %1817
  %1831 = mul i64 %1812, %1830
  %1832 = trunc i64 %1831 to i32
  %1833 = xor i32 %1795, %1832
  %1834 = and i32 %1833, 5
  %1835 = and i32 %1795, -6
  %1836 = or i32 %1834, %1835
  store i32 %1836, i32* %0, align 4
  %1837 = call i8** @bf3690775341412318723(i32* %0)
  %1838 = load i8*, i8** %1837, align 8
  indirectbr i8* %1838, [label %loopEnd, label %1647]

1839:                                             ; preds = %1839, %loopStart
  %1840 = and i64 %57, 8641047627724694755
  %1841 = xor i64 %57, -1
  %1842 = or i64 -8641047627724694756, %1841
  %1843 = xor i64 %1842, -1
  %1844 = and i64 %1843, -1
  %1845 = add i64 %87, -3599228249174676527
  %1846 = add i64 1687369481369368646, %87
  %1847 = add i64 %1846, -5286597730544045173
  %1848 = add i64 %53, 589316952879769174
  %1849 = sub i64 0, %53
  %1850 = sub i64 589316952879769174, %1849
  %1851 = xor i64 %1848, %1850
  %1852 = xor i64 %1851, %1840
  %1853 = xor i64 %1852, %1847
  %1854 = xor i64 %1853, 2337817564770339609
  %1855 = xor i64 %1854, %1845
  %1856 = xor i64 %1855, %1844
  %1857 = add i64 %140, 9069966775166311366
  %1858 = sub i64 0, %140
  %1859 = add i64 -9069966775166311366, %1858
  %1860 = sub i64 0, %1859
  %1861 = and i64 %75, -3345360390715830899
  %1862 = xor i64 %75, -1
  %1863 = or i64 3345360390715830898, %1862
  %1864 = xor i64 %1863, -1
  %1865 = and i64 %1864, -1
  %1866 = xor i64 6065979279671224351, %1860
  %1867 = xor i64 %1866, %1865
  %1868 = xor i64 %1867, %1861
  %1869 = xor i64 %1868, %1857
  %1870 = mul i64 %1856, %1869
  %1871 = and i64 %13, -5546266109716087842
  %1872 = xor i64 %13, -1
  %1873 = or i64 5546266109716087841, %1872
  %1874 = xor i64 %1873, -1
  %1875 = and i64 %1874, -1
  %1876 = and i64 %65, -872932666689719948
  %1877 = xor i64 %65, -1
  %1878 = xor i64 -872932666689719948, %1877
  %1879 = and i64 %1878, -872932666689719948
  %1880 = add i64 %69, 2154951183513114709
  %1881 = sub i64 0, %69
  %1882 = add i64 -2154951183513114709, %1881
  %1883 = sub i64 0, %1882
  %1884 = xor i64 %1875, 8448607311217133667
  %1885 = xor i64 %1884, %1879
  %1886 = xor i64 %1885, %1880
  %1887 = xor i64 %1886, %1883
  %1888 = xor i64 %1887, %1871
  %1889 = xor i64 %1888, %1876
  %1890 = or i64 %140, -3503761986396875153
  %1891 = xor i64 %140, -1
  %1892 = and i64 -3503761986396875153, %1891
  %1893 = add i64 %1892, %140
  %1894 = or i64 %1, 8163437171796379175
  %1895 = xor i64 %1, -1
  %1896 = and i64 %1895, -4089955741854266400
  %1897 = and i64 %1, 4089955741854266399
  %1898 = or i64 %1896, %1897
  %1899 = xor i64 -5298533102940746297, %1898
  %1900 = xor i64 %1, -1
  %1901 = or i64 -8163437171796379176, %1900
  %1902 = xor i64 %1901, -1
  %1903 = and i64 %1902, -1
  %1904 = or i64 %1899, %1903
  %1905 = and i64 %104, -2352038914432985319
  %1906 = xor i64 %104, -1
  %1907 = or i64 2352038914432985318, %1906
  %1908 = xor i64 %1907, -1
  %1909 = and i64 %1908, -1
  %1910 = xor i64 %1893, %1909
  %1911 = xor i64 %1910, %1890
  %1912 = xor i64 %1911, %1894
  %1913 = xor i64 %1912, -3916326031442659989
  %1914 = xor i64 %1913, %1905
  %1915 = xor i64 %1914, %1904
  %1916 = mul i64 %1889, %1915
  %1917 = mul i64 %1870, %1916
  %1918 = add i64 55, 15
  %1919 = or i64 %116, -5760543240140317036
  %1920 = xor i64 %116, -1
  %1921 = and i64 -5760543240140317036, %1920
  %1922 = add i64 %1921, %116
  %1923 = add i64 %99, 6214766099261898940
  %1924 = xor i64 6214766099261898940, %99
  %1925 = and i64 6214766099261898940, %99
  %1926 = mul i64 2, %1925
  %1927 = add i64 %1924, %1926
  %1928 = add i64 %61, -6400914494752651721
  %1929 = sub i64 0, %61
  %1930 = sub i64 -6400914494752651721, %1929
  %1931 = xor i64 %1919, %1922
  %1932 = xor i64 %1931, %1928
  %1933 = xor i64 %1932, %1923
  %1934 = xor i64 %1933, 5705545600804862769
  %1935 = xor i64 %1934, %1930
  %1936 = xor i64 %1935, %1927
  %1937 = add i64 %89, 1606709651274643477
  %1938 = add i64 6778486286432120190, %89
  %1939 = sub i64 %1938, 5171776635157476713
  %1940 = add i64 %91, 6516732670220318122
  %1941 = xor i64 6516732670220318122, %91
  %1942 = and i64 6516732670220318122, %91
  %1943 = mul i64 2, %1942
  %1944 = add i64 %1941, %1943
  %1945 = or i64 %67, -1840574451078800807
  %1946 = xor i64 %67, -1
  %1947 = and i64 -1840574451078800807, %1946
  %1948 = add i64 %1947, %67
  %1949 = xor i64 %1940, %1944
  %1950 = xor i64 %1949, %1945
  %1951 = xor i64 %1950, 5440194597710191196
  %1952 = xor i64 %1951, %1937
  %1953 = xor i64 %1952, %1939
  %1954 = xor i64 %1953, %1948
  %1955 = mul i64 %1936, %1954
  %1956 = add i64 69, %1955
  %1957 = add i64 -1097847851306274447, 1097847851306274486
  %1958 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  %1959 = load i32, i32* %1958, align 4
  %1960 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %1961 = load i32, i32* %1960, align 4
  %1962 = srem i32 %1959, %1961
  store i32 %1962, i32* %dispatcher, align 4
  %1963 = load i8*, i8** %68, align 8
  %1964 = load i8, i8* %1963, align 1
  %1965 = add i64 %17, 3794754187366900492
  %1966 = xor i64 3794754187366900492, %17
  %1967 = and i64 3794754187366900492, %17
  %1968 = mul i64 2, %1967
  %1969 = add i64 %1966, %1968
  %1970 = add i64 %61, 5782697415741515862
  %1971 = sub i64 0, %61
  %1972 = sub i64 5782697415741515862, %1971
  %1973 = add i64 %95, -7823578585844862494
  %1974 = sub i64 0, %95
  %1975 = add i64 7823578585844862494, %1974
  %1976 = sub i64 0, %1975
  %1977 = xor i64 %1972, %1965
  %1978 = xor i64 %1977, %1976
  %1979 = xor i64 %1978, %1973
  %1980 = xor i64 %1979, %1969
  %1981 = xor i64 %1980, -5472410709065579529
  %1982 = xor i64 %1981, %1970
  %1983 = or i64 %51, 6016348960504722389
  %1984 = xor i64 %51, -1
  %1985 = and i64 %1984, 1189647044055521483
  %1986 = and i64 %51, -1189647044055521484
  %1987 = or i64 %1985, %1986
  %1988 = xor i64 4898830275039554334, %1987
  %1989 = xor i64 %51, -1
  %1990 = or i64 -6016348960504722390, %1989
  %1991 = xor i64 %1990, -1
  %1992 = and i64 %1991, -1
  %1993 = or i64 %1988, %1992
  %1994 = add i64 %112, 4222475772450917860
  %1995 = sub i64 0, %112
  %1996 = sub i64 4222475772450917860, %1995
  %1997 = or i64 %39, -6439978426126886632
  %1998 = xor i64 %39, -1
  %1999 = and i64 -6439978426126886632, %1998
  %2000 = add i64 %1999, %39
  %2001 = xor i64 %2000, %1993
  %2002 = xor i64 %2001, %1994
  %2003 = xor i64 %2002, %1996
  %2004 = xor i64 %2003, %1997
  %2005 = xor i64 %2004, 6359766674778282894
  %2006 = xor i64 %2005, %1983
  %2007 = mul i64 %1982, %2006
  %2008 = trunc i64 %2007 to i8
  %2009 = mul i8 %1964, %2008
  %2010 = mul i8 %1964, 2
  %2011 = add i8 8, %2010
  %2012 = sub i8 %2011, 6
  %2013 = mul i8 %2009, %2012
  %2014 = srem i8 %2013, 4
  %2015 = add i64 %116, 1823134744369049048
  %2016 = sub i64 0, %116
  %2017 = add i64 -1823134744369049048, %2016
  %2018 = sub i64 0, %2017
  %2019 = add i64 %91, -8790790328672675334
  %2020 = add i64 1627607168185776540, %91
  %2021 = add i64 %2020, 8028346576851099742
  %2022 = xor i64 -4685677072665661541, %2015
  %2023 = xor i64 %2022, %2019
  %2024 = xor i64 %2023, %2021
  %2025 = xor i64 %2024, %2018
  %2026 = or i64 %29, 8666317261785556282
  %2027 = xor i64 %29, -1
  %2028 = and i64 %2027, -1474460410594181798
  %2029 = and i64 %29, 1474460410594181797
  %2030 = or i64 %2028, %2029
  %2031 = xor i64 -7796474552787642272, %2030
  %2032 = xor i64 %29, -1
  %2033 = or i64 -8666317261785556283, %2032
  %2034 = xor i64 %2033, -1
  %2035 = and i64 %2034, -1
  %2036 = or i64 %2031, %2035
  %2037 = or i64 %112, 8267116455237369392
  %2038 = xor i64 %112, -1
  %2039 = and i64 %2038, 1149086463377971173
  %2040 = and i64 %112, -1149086463377971174
  %2041 = or i64 %2039, %2040
  %2042 = xor i64 9027696975674288597, %2041
  %2043 = xor i64 %112, -1
  %2044 = or i64 -8267116455237369393, %2043
  %2045 = xor i64 %2044, -1
  %2046 = and i64 %2045, -1
  %2047 = or i64 %2042, %2046
  %2048 = xor i64 %2047, %2026
  %2049 = xor i64 %2048, %2036
  %2050 = xor i64 %2049, %2037
  %2051 = xor i64 %2050, 0
  %2052 = mul i64 %2025, %2051
  %2053 = trunc i64 %2052 to i8
  %2054 = icmp eq i8 %2014, %2053
  %2055 = mul i8 %1964, %1964
  %2056 = sub i8 %2055, 2
  %2057 = add i8 %2056, %1964
  %2058 = add i64 %61, 5245079259942799896
  %2059 = and i64 5245079259942799896, %61
  %2060 = or i64 5245079259942799896, %61
  %2061 = add i64 %2059, %2060
  %2062 = and i64 %41, 7218771428880812633
  %2063 = xor i64 %41, -1
  %2064 = xor i64 7218771428880812633, %2063
  %2065 = and i64 %2064, 7218771428880812633
  %2066 = add i64 %17, 2478531710876680815
  %2067 = xor i64 2478531710876680815, %17
  %2068 = and i64 2478531710876680815, %17
  %2069 = mul i64 2, %2068
  %2070 = add i64 %2067, %2069
  %2071 = xor i64 %2065, %2058
  %2072 = xor i64 %2071, %2070
  %2073 = xor i64 %2072, %2061
  %2074 = xor i64 %2073, %2066
  %2075 = xor i64 %2074, 4069302772766631087
  %2076 = xor i64 %2075, %2062
  %2077 = add i64 %35, 3450388653409574775
  %2078 = and i64 3450388653409574775, %35
  %2079 = or i64 3450388653409574775, %35
  %2080 = add i64 %2078, %2079
  %2081 = or i64 %69, 6073274854150230079
  %2082 = and i64 6073274854150230079, %69
  %2083 = xor i64 6073274854150230079, %69
  %2084 = or i64 %2082, %2083
  %2085 = xor i64 %2077, %2080
  %2086 = xor i64 %2085, %2081
  %2087 = xor i64 %2086, %2084
  %2088 = xor i64 %2087, -7908971856055311202
  %2089 = mul i64 %2076, %2088
  %2090 = trunc i64 %2089 to i8
  %2091 = add i8 %2057, %2090
  %2092 = srem i8 %2091, 2
  %2093 = icmp eq i8 %2092, 0
  %2094 = or i1 %2054, %2093
  %2095 = select i1 %2094, i32 984876102, i32 984876150
  %2096 = xor i32 %2095, 48
  store i32 %2096, i32* %0, align 4
  %2097 = call i8** @bf3690775341412318723(i32* %0)
  %2098 = load i8*, i8** %2097, align 8
  indirectbr i8* %2098, [label %loopEnd, label %1839]

2099:                                             ; preds = %2099, %loopStart
  %2100 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  %2101 = load i32, i32* %2100, align 4
  %2102 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %2103 = load i32, i32* %2102, align 4
  %2104 = sub i32 %2101, %2103
  store i32 %2104, i32* %dispatcher, align 4
  %.reload71 = load i32, i32* %.reg2mem70, align 4
  %.reload73 = load i32, i32* %.reg2mem72, align 4
  %2105 = load i8*, i8** %96, align 8
  %2106 = load i8, i8* %2105, align 1
  %2107 = mul i8 %2106, 2
  %2108 = mul i8 %2106, 2
  %2109 = add i8 45, %2108
  %2110 = or i64 %49, -7252555316221576936
  %2111 = xor i64 %49, -1
  %2112 = and i64 %2111, 1507582157393046965
  %2113 = and i64 %49, -1507582157393046966
  %2114 = or i64 %2112, %2113
  %2115 = xor i64 -8091351554527013715, %2114
  %2116 = xor i64 %49, -1
  %2117 = or i64 7252555316221576935, %2116
  %2118 = xor i64 %2117, -1
  %2119 = and i64 %2118, -1
  %2120 = or i64 %2115, %2119
  %2121 = add i64 %65, 6822685461323274311
  %2122 = add i64 -7525713641410256986, %65
  %2123 = sub i64 %2122, 4098344970976020319
  %2124 = add i64 %97, -1845532787724925281
  %2125 = add i64 1477693704312282896, %97
  %2126 = add i64 %2125, -3323226492037208177
  %2127 = xor i64 %2126, %2123
  %2128 = xor i64 %2127, -830407465532370791
  %2129 = xor i64 %2128, %2120
  %2130 = xor i64 %2129, %2121
  %2131 = xor i64 %2130, %2110
  %2132 = xor i64 %2131, %2124
  %2133 = and i64 %97, -8862000972359084641
  %2134 = or i64 8862000972359084640, %97
  %2135 = sub i64 %2134, 8862000972359084640
  %2136 = and i64 %63, -4391678815015752154
  %2137 = xor i64 %63, -1
  %2138 = or i64 4391678815015752153, %2137
  %2139 = xor i64 %2138, -1
  %2140 = and i64 %2139, -1
  %2141 = xor i64 %2133, 4326048003636595613
  %2142 = xor i64 %2141, %2135
  %2143 = xor i64 %2142, %2136
  %2144 = xor i64 %2143, %2140
  %2145 = mul i64 %2132, %2144
  %2146 = trunc i64 %2145 to i8
  %2147 = add i8 %2109, %2146
  %2148 = mul i8 %2107, %2147
  %2149 = srem i8 %2148, 4
  %2150 = add i64 %55, -3568085117755372660
  %2151 = sub i64 0, %55
  %2152 = add i64 3568085117755372660, %2151
  %2153 = sub i64 0, %2152
  %2154 = and i64 %55, 2481018910511787194
  %2155 = xor i64 %55, -1
  %2156 = xor i64 2481018910511787194, %2155
  %2157 = and i64 %2156, 2481018910511787194
  %2158 = or i64 %85, -7201418409664954821
  %2159 = and i64 -7201418409664954821, %85
  %2160 = xor i64 -7201418409664954821, %85
  %2161 = or i64 %2159, %2160
  %2162 = xor i64 %2157, %2154
  %2163 = xor i64 %2162, %2153
  %2164 = xor i64 %2163, %2150
  %2165 = xor i64 %2164, 2377542898504429283
  %2166 = xor i64 %2165, %2161
  %2167 = xor i64 %2166, %2158
  %2168 = add i64 %128, -3397428270174628238
  %2169 = xor i64 -3397428270174628238, %128
  %2170 = and i64 -3397428270174628238, %128
  %2171 = mul i64 2, %2170
  %2172 = add i64 %2169, %2171
  %2173 = add i64 %122, 8716684380142114516
  %2174 = add i64 4317666923564128488, %122
  %2175 = add i64 %2174, 4399017456577986028
  %2176 = xor i64 %2168, %2172
  %2177 = xor i64 %2176, %2173
  %2178 = xor i64 %2177, %2175
  %2179 = xor i64 %2178, 0
  %2180 = mul i64 %2167, %2179
  %2181 = trunc i64 %2180 to i8
  %2182 = icmp eq i8 %2149, %2181
  %2183 = mul i8 %2106, %2106
  %2184 = add i8 %2183, %2106
  %2185 = srem i8 %2184, 2
  %2186 = icmp eq i8 %2185, 0
  %2187 = and i1 %2182, %2186
  %2188 = add i64 %1, 6576922102670293887
  %2189 = sub i64 0, %1
  %2190 = sub i64 6576922102670293887, %2189
  %2191 = and i64 %130, 8275790994898212263
  %2192 = xor i64 %130, -1
  %2193 = xor i64 8275790994898212263, %2192
  %2194 = and i64 %2193, 8275790994898212263
  %2195 = xor i64 %2194, %2191
  %2196 = xor i64 %2195, %2188
  %2197 = xor i64 %2196, %2190
  %2198 = xor i64 %2197, 3186978274759105969
  %2199 = and i64 %99, -4026478076489120620
  %2200 = or i64 4026478076489120619, %99
  %2201 = sub i64 %2200, 4026478076489120619
  %2202 = and i64 %85, 744325331649438384
  %2203 = xor i64 %85, -1
  %2204 = xor i64 744325331649438384, %2203
  %2205 = and i64 %2204, 744325331649438384
  %2206 = xor i64 %2202, 868062626670639958
  %2207 = xor i64 %2206, %2205
  %2208 = xor i64 %2207, %2201
  %2209 = xor i64 %2208, %2199
  %2210 = mul i64 %2198, %2209
  %2211 = trunc i64 %2210 to i32
  %2212 = select i1 %2187, i32 984876147, i32 %2211
  %2213 = add i64 %132, -4422897891317987590
  %2214 = xor i64 -4422897891317987590, %132
  %2215 = and i64 -4422897891317987590, %132
  %2216 = mul i64 2, %2215
  %2217 = add i64 %2214, %2216
  %2218 = or i64 %91, -9088790768630452525
  %2219 = xor i64 %91, -1
  %2220 = and i64 -9088790768630452525, %2219
  %2221 = add i64 %2220, %91
  %2222 = add i64 %93, -8085473640044783239
  %2223 = sub i64 0, %93
  %2224 = sub i64 -8085473640044783239, %2223
  %2225 = xor i64 %2222, %2218
  %2226 = xor i64 %2225, %2221
  %2227 = xor i64 %2226, %2224
  %2228 = xor i64 %2227, %2217
  %2229 = xor i64 %2228, %2213
  %2230 = xor i64 %2229, -8360381464027354623
  %2231 = add i64 %31, 2367023902389933697
  %2232 = sub i64 0, %31
  %2233 = add i64 -2367023902389933697, %2232
  %2234 = sub i64 0, %2233
  %2235 = and i64 %29, 4750826350962012500
  %2236 = xor i64 %29, -1
  %2237 = or i64 -4750826350962012501, %2236
  %2238 = xor i64 %2237, -1
  %2239 = and i64 %2238, -1
  %2240 = and i64 %23, -7406336440689512855
  %2241 = or i64 7406336440689512854, %23
  %2242 = sub i64 %2241, 7406336440689512854
  %2243 = xor i64 -4939932725051151873, %2242
  %2244 = xor i64 %2243, %2239
  %2245 = xor i64 %2244, %2231
  %2246 = xor i64 %2245, %2234
  %2247 = xor i64 %2246, %2240
  %2248 = xor i64 %2247, %2235
  %2249 = mul i64 %2230, %2248
  %2250 = trunc i64 %2249 to i32
  %2251 = xor i32 %2212, %2250
  %2252 = and i32 %2251, -542602726
  %2253 = and i32 %2212, 542602725
  %2254 = or i32 %2252, %2253
  %2255 = xor i32 %2254, -542602721
  store i32 %2255, i32* %0, align 4
  %2256 = call i8** @bf3690775341412318723(i32* %0)
  %2257 = load i8*, i8** %2256, align 8
  indirectbr i8* %2257, [label %loopEnd, label %2099]

2258:                                             ; preds = %2258, %loopStart
  %2259 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 13
  %2260 = load i32, i32* %2259, align 4
  %2261 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 11
  %2262 = load i32, i32* %2261, align 4
  %2263 = add i32 %2260, %2262
  store i32 %2263, i32* %dispatcher, align 4
  %2264 = load i8*, i8** %40, align 8
  %2265 = load i8, i8* %2264, align 1
  %2266 = or i64 %39, -7945729141017352870
  %2267 = and i64 -7945729141017352870, %39
  %2268 = xor i64 -7945729141017352870, %39
  %2269 = or i64 %2267, %2268
  %2270 = and i64 %134, -6440987741344926170
  %2271 = xor i64 %134, -1
  %2272 = xor i64 -6440987741344926170, %2271
  %2273 = and i64 %2272, -6440987741344926170
  %2274 = xor i64 %2266, %2269
  %2275 = xor i64 %2274, %2270
  %2276 = xor i64 %2275, -773171156367698791
  %2277 = xor i64 %2276, %2273
  %2278 = add i64 %3, 8927675527896029384
  %2279 = xor i64 8927675527896029384, %3
  %2280 = and i64 8927675527896029384, %3
  %2281 = mul i64 2, %2280
  %2282 = add i64 %2279, %2281
  %2283 = add i64 %77, -1478799207670956504
  %2284 = xor i64 -1478799207670956504, %77
  %2285 = and i64 -1478799207670956504, %77
  %2286 = mul i64 2, %2285
  %2287 = add i64 %2284, %2286
  %2288 = xor i64 %2287, -998759974316409006
  %2289 = xor i64 %2288, %2278
  %2290 = xor i64 %2289, %2282
  %2291 = xor i64 %2290, %2283
  %2292 = mul i64 %2277, %2291
  %2293 = trunc i64 %2292 to i8
  %2294 = mul i8 %2265, %2293
  %2295 = add i64 %33, 8729919062182614138
  %2296 = add i64 889500255317736882, %33
  %2297 = sub i64 %2296, -7840418806864877256
  %2298 = add i64 %49, 6131312282749640555
  %2299 = and i64 6131312282749640555, %49
  %2300 = or i64 6131312282749640555, %49
  %2301 = add i64 %2299, %2300
  %2302 = or i64 %110, 2461688458677375795
  %2303 = and i64 2461688458677375795, %110
  %2304 = xor i64 2461688458677375795, %110
  %2305 = or i64 %2303, %2304
  %2306 = xor i64 %2297, %2305
  %2307 = xor i64 %2306, %2295
  %2308 = xor i64 %2307, %2298
  %2309 = xor i64 %2308, -4294473516041152997
  %2310 = xor i64 %2309, %2301
  %2311 = xor i64 %2310, %2302
  %2312 = or i64 %89, 951622673516865634
  %2313 = xor i64 %89, -1
  %2314 = and i64 %2313, -7144927749059383182
  %2315 = and i64 %89, 7144927749059383181
  %2316 = or i64 %2314, %2315
  %2317 = xor i64 -7931742919452141552, %2316
  %2318 = xor i64 %89, -1
  %2319 = or i64 -951622673516865635, %2318
  %2320 = xor i64 %2319, -1
  %2321 = and i64 %2320, -1
  %2322 = or i64 %2317, %2321
  %2323 = and i64 %19, -1480311370906939083
  %2324 = xor i64 %19, -1
  %2325 = xor i64 -1480311370906939083, %2324
  %2326 = and i64 %2325, -1480311370906939083
  %2327 = and i64 %104, -2972194133623117103
  %2328 = or i64 2972194133623117102, %104
  %2329 = sub i64 %2328, 2972194133623117102
  %2330 = xor i64 -113762848166434778, %2323
  %2331 = xor i64 %2330, %2329
  %2332 = xor i64 %2331, %2322
  %2333 = xor i64 %2332, %2312
  %2334 = xor i64 %2333, %2326
  %2335 = xor i64 %2334, %2327
  %2336 = mul i64 %2311, %2335
  %2337 = trunc i64 %2336 to i8
  %2338 = mul i8 %2265, %2337
  %2339 = sub i8 0, %2338
  %2340 = add i8 -2, %2339
  %2341 = sub i8 0, %2340
  %2342 = mul i8 %2294, %2341
  %2343 = srem i8 %2342, 4
  %2344 = icmp eq i8 %2343, 0
  %2345 = mul i8 %2265, %2265
  %2346 = add i8 %2345, %2265
  %2347 = srem i8 %2346, 2
  %2348 = icmp eq i8 %2347, 0
  %2349 = and i1 %2344, %2348
  %2350 = select i1 %2349, i32 984876097, i32 984876150
  %2351 = xor i32 %2350, 55
  store i32 %2351, i32* %0, align 4
  %2352 = call i8** @bf3690775341412318723(i32* %0)
  %2353 = load i8*, i8** %2352, align 8
  indirectbr i8* %2353, [label %loopEnd, label %2258]

2354:                                             ; preds = %2354, %loopStart
  %2355 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  %2356 = load i32, i32* %2355, align 4
  %2357 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %2358 = load i32, i32* %2357, align 4
  %2359 = sub i32 %2356, %2358
  store i32 %2359, i32* %dispatcher, align 4
  %.reload122 = load i32, i32* %.reg2mem121, align 4
  store i32 %.reload122, i32* %.reg2mem123, align 4
  %2360 = load i8*, i8** %88, align 8
  %2361 = load i8, i8* %2360, align 1
  %2362 = xor i8 %2361, -1
  %2363 = or i8 %2362, -2
  %2364 = xor i8 %2363, -1
  %2365 = and i8 %2364, -1
  %2366 = icmp eq i8 %2365, 0
  %2367 = mul i8 %2361, %2361
  %2368 = xor i8 %2367, %2361
  %2369 = and i8 %2367, %2361
  %2370 = mul i8 2, %2369
  %2371 = add i8 %2368, %2370
  %2372 = mul i8 39, %2371
  %2373 = add i8 23, %2372
  %2374 = mul i8 -105, %2373
  %2375 = add i8 111, %2374
  %2376 = mul i8 %2375, 3
  %2377 = srem i8 %2376, 2
  %2378 = icmp eq i8 %2377, 0
  %2379 = or i1 %2366, %2378
  %2380 = select i1 %2379, i32 984876109, i32 984876150
  %2381 = xor i32 %2380, 59
  store i32 %2381, i32* %0, align 4
  %2382 = call i8** @bf3690775341412318723(i32* %0)
  %2383 = load i8*, i8** %2382, align 8
  indirectbr i8* %2383, [label %loopEnd, label %2354]

codeRepl6:                                        ; preds = %codeRepl6, %loopStart
  store i64 4070807658626890126, i64* %101, align 8
  %2384 = call i8** @lk1336881106680510526(i64* %101)
  %2385 = load i8*, i8** %2384, align 8
  %2386 = bitcast i8* %2385 to void (i32*, i32*, i32*, [51 x i32]*, i32*)*
  call void %2386(i32* %.reg2mem123, i32* %.reg2mem77, i32* %.reg2mem34, [51 x i32]* %lookupTable, i32* %dispatcher)
  %2387 = load i8*, i8** %78, align 8
  %2388 = load i8, i8* %2387, align 1
  %2389 = mul i8 %2388, %2388
  %2390 = add i8 %2389, %2388
  %2391 = or i64 %93, -3980627533266204560
  %2392 = xor i64 %93, -1
  %2393 = and i64 -3980627533266204560, %2392
  %2394 = add i64 %2393, %93
  %2395 = and i64 %55, -7959261674156015311
  %2396 = xor i64 %55, -1
  %2397 = or i64 7959261674156015310, %2396
  %2398 = xor i64 %2397, -1
  %2399 = and i64 %2398, -1
  %2400 = xor i64 %2391, -9001686325955564055
  %2401 = xor i64 %2400, %2399
  %2402 = xor i64 %2401, %2394
  %2403 = xor i64 %2402, %2395
  %2404 = add i64 %99, -9197259990615205148
  %2405 = xor i64 -9197259990615205148, %99
  %2406 = and i64 -9197259990615205148, %99
  %2407 = mul i64 2, %2406
  %2408 = add i64 %2405, %2407
  %2409 = or i64 %77, -3888989202487046829
  %2410 = and i64 -3888989202487046829, %77
  %2411 = xor i64 -3888989202487046829, %77
  %2412 = or i64 %2410, %2411
  %2413 = add i64 %140, -4129638018393237054
  %2414 = add i64 -9015474291937771918, %140
  %2415 = add i64 %2414, 4885836273544534864
  %2416 = xor i64 %2409, %2413
  %2417 = xor i64 %2416, %2415
  %2418 = xor i64 %2417, %2404
  %2419 = xor i64 %2418, -8290637688305176821
  %2420 = xor i64 %2419, %2412
  %2421 = xor i64 %2420, %2408
  %2422 = mul i64 %2403, %2421
  %2423 = trunc i64 %2422 to i8
  %2424 = mul i8 %2390, %2423
  %2425 = srem i8 %2424, 2
  %2426 = icmp eq i8 %2425, 0
  %2427 = mul i8 %2388, %2388
  %2428 = add i8 %2427, %2388
  %2429 = srem i8 %2428, 2
  %2430 = and i64 %63, -4645538506896906083
  %2431 = xor i64 %63, -1
  %2432 = xor i64 -4645538506896906083, %2431
  %2433 = and i64 %2432, -4645538506896906083
  %2434 = and i64 %136, -1327057926350090937
  %2435 = or i64 1327057926350090936, %136
  %2436 = sub i64 %2435, 1327057926350090936
  %2437 = or i64 %53, -7637122140359066338
  %2438 = xor i64 %53, -1
  %2439 = and i64 -7637122140359066338, %2438
  %2440 = add i64 %2439, %53
  %2441 = xor i64 %2440, %2430
  %2442 = xor i64 %2441, -7973153575075053979
  %2443 = xor i64 %2442, %2434
  %2444 = xor i64 %2443, %2436
  %2445 = xor i64 %2444, %2433
  %2446 = xor i64 %2445, %2437
  %2447 = and i64 %87, 6398380835256841152
  %2448 = xor i64 %87, -1
  %2449 = xor i64 6398380835256841152, %2448
  %2450 = and i64 %2449, 6398380835256841152
  %2451 = add i64 %19, -6379458322508528923
  %2452 = xor i64 -6379458322508528923, %19
  %2453 = and i64 -6379458322508528923, %19
  %2454 = mul i64 2, %2453
  %2455 = add i64 %2452, %2454
  %2456 = sext i32 %211 to i64
  %2457 = add i64 %2456, -793702313447264389
  %2458 = and i64 -793702313447264389, %2456
  %2459 = or i64 -793702313447264389, %2456
  %2460 = add i64 %2458, %2459
  %2461 = xor i64 0, %2451
  %2462 = xor i64 %2461, %2447
  %2463 = xor i64 %2462, %2455
  %2464 = xor i64 %2463, %2460
  %2465 = xor i64 %2464, %2450
  %2466 = xor i64 %2465, %2457
  %2467 = mul i64 %2446, %2466
  %2468 = trunc i64 %2467 to i8
  %2469 = icmp eq i8 %2429, %2468
  %2470 = and i1 %2426, %2469
  %2471 = or i64 %33, -7364222726075964941
  %2472 = xor i64 %33, -1
  %2473 = and i64 -7364222726075964941, %2472
  %2474 = add i64 %2473, %33
  %2475 = add i64 %75, -1679030797137186239
  %2476 = xor i64 -1679030797137186239, %75
  %2477 = and i64 -1679030797137186239, %75
  %2478 = mul i64 2, %2477
  %2479 = add i64 %2476, %2478
  %2480 = add i64 %106, -3503482247401289509
  %2481 = xor i64 -3503482247401289509, %106
  %2482 = and i64 -3503482247401289509, %106
  %2483 = mul i64 2, %2482
  %2484 = add i64 %2481, %2483
  %2485 = xor i64 %2480, -6318368899291043291
  %2486 = xor i64 %2485, %2475
  %2487 = xor i64 %2486, %2474
  %2488 = xor i64 %2487, %2479
  %2489 = xor i64 %2488, %2471
  %2490 = xor i64 %2489, %2484
  %2491 = add i64 %63, 5719416371081987725
  %2492 = and i64 5719416371081987725, %63
  %2493 = or i64 5719416371081987725, %63
  %2494 = add i64 %2492, %2493
  %2495 = or i64 %102, -4079214524229830496
  %2496 = and i64 -4079214524229830496, %102
  %2497 = xor i64 -4079214524229830496, %102
  %2498 = or i64 %2496, %2497
  %2499 = xor i64 -1936803443659987468, %2494
  %2500 = xor i64 %2499, %2498
  %2501 = xor i64 %2500, %2491
  %2502 = xor i64 %2501, %2495
  %2503 = mul i64 %2490, %2502
  %2504 = trunc i64 %2503 to i32
  %2505 = select i1 %2470, i32 %2504, i32 984876150
  %2506 = xor i32 %2505, 50
  store i32 %2506, i32* %0, align 4
  %2507 = call i8** @bf3690775341412318723(i32* %0)
  %2508 = load i8*, i8** %2507, align 8
  indirectbr i8* %2508, [label %loopEnd, label %codeRepl6]

codeRepl7:                                        ; preds = %codeRepl7, %loopStart
  store i64 4070807658626890122, i64* %101, align 8
  %2509 = call i8** @lk1336881106680510526(i64* %101)
  %2510 = load i8*, i8** %2509, align 8
  %2511 = bitcast i8* %2510 to void (i8**, i8**, i8**, i8**, i32*, i32*, i1*, [51 x i32]*, i32*)*
  call void %2511(i8** %.reg2mem12, i8** %.reg2mem8, i8** %.reg2mem4, i8** %.reg2mem, i32* %.reg2mem34, i32* %.reg2mem77, i1* %.reg2mem83, [51 x i32]* %lookupTable, i32* %dispatcher)
  %2512 = load i8*, i8** %10, align 8
  %2513 = load i8, i8* %2512, align 1
  %2514 = mul i8 %2513, 2
  %2515 = mul i8 %2513, 2
  %2516 = add i8 2, %2515
  %2517 = mul i8 %2514, %2516
  %2518 = srem i8 %2517, 4
  %2519 = icmp eq i8 %2518, 0
  %2520 = mul i8 %2513, %2513
  %2521 = mul i8 %2520, %2513
  %2522 = add i8 %2521, %2513
  %2523 = srem i8 %2522, 2
  %2524 = icmp eq i8 %2523, 0
  %2525 = or i64 %59, 8890983851664017903
  %2526 = and i64 8890983851664017903, %59
  %2527 = xor i64 8890983851664017903, %59
  %2528 = or i64 %2526, %2527
  %2529 = and i64 %55, -6622189555990247729
  %2530 = xor i64 %55, -1
  %2531 = xor i64 -6622189555990247729, %2530
  %2532 = and i64 %2531, -6622189555990247729
  %2533 = add i64 %132, 8513163865475913034
  %2534 = sub i64 0, %132
  %2535 = add i64 -8513163865475913034, %2534
  %2536 = sub i64 0, %2535
  %2537 = xor i64 %2529, 1177074443702146621
  %2538 = xor i64 %2537, %2533
  %2539 = xor i64 %2538, %2532
  %2540 = xor i64 %2539, %2528
  %2541 = xor i64 %2540, %2536
  %2542 = xor i64 %2541, %2525
  %2543 = or i64 %126, -4396803158763147507
  %2544 = xor i64 %126, -1
  %2545 = and i64 %2544, -374866917457710407
  %2546 = and i64 %126, 374866917457710406
  %2547 = or i64 %2545, %2546
  %2548 = xor i64 4050810108277972404, %2547
  %2549 = xor i64 %126, -1
  %2550 = or i64 4396803158763147506, %2549
  %2551 = xor i64 %2550, -1
  %2552 = and i64 %2551, -1
  %2553 = or i64 %2548, %2552
  %2554 = or i64 %73, 3805924553530661212
  %2555 = xor i64 %73, -1
  %2556 = and i64 3805924553530661212, %2555
  %2557 = add i64 %2556, %73
  %2558 = xor i64 -8629853285903486699, %2543
  %2559 = xor i64 %2558, %2557
  %2560 = xor i64 %2559, %2554
  %2561 = xor i64 %2560, %2553
  %2562 = mul i64 %2542, %2561
  %2563 = trunc i64 %2562 to i1
  %2564 = xor i1 %2519, %2563
  %2565 = xor i1 %2524, true
  %2566 = or i1 %2564, %2565
  %2567 = xor i1 %2566, true
  %2568 = and i1 %2567, true
  %2569 = select i1 %2568, i32 984876149, i32 984876150
  %2570 = xor i32 %2569, 3
  store i32 %2570, i32* %0, align 4
  %2571 = call i8** @bf3690775341412318723(i32* %0)
  %2572 = load i8*, i8** %2571, align 8
  indirectbr i8* %2572, [label %loopEnd, label %codeRepl7]

2573:                                             ; preds = %2573, %loopStart
  %2574 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 15
  %2575 = load i32, i32* %2574, align 4
  %2576 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 14
  %2577 = load i32, i32* %2576, align 4
  %2578 = xor i32 %2575, %2577
  %2579 = and i32 %2575, %2577
  %2580 = mul i32 2, %2579
  %2581 = add i32 %2578, %2580
  %2582 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 22
  %2583 = load i32, i32* %2582, align 4
  %2584 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %2585 = load i32, i32* %2584, align 4
  %2586 = srem i32 %2583, %2585
  %.reload84 = load i1, i1* %.reg2mem83, align 1
  %2587 = select i1 %.reload84, i32 %2581, i32 %2586
  store i32 %2587, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem123, align 4
  %2588 = load i8*, i8** %26, align 8
  %2589 = load i8, i8* %2588, align 1
  %2590 = mul i8 %2589, 2
  %2591 = mul i8 %2589, 2
  %2592 = sub i8 0, %2591
  %2593 = sub i8 2, %2592
  %2594 = mul i8 %2590, %2593
  %2595 = add i64 %116, -5619800323671329464
  %2596 = and i64 -5619800323671329464, %116
  %2597 = or i64 -5619800323671329464, %116
  %2598 = add i64 %2596, %2597
  %2599 = sext i32 %dispatcher1 to i64
  %2600 = and i64 %2599, 6361320044956076946
  %2601 = or i64 -6361320044956076947, %2599
  %2602 = sub i64 %2601, -6361320044956076947
  %2603 = add i64 %31, -1152238226687148871
  %2604 = sub i64 0, %31
  %2605 = add i64 1152238226687148871, %2604
  %2606 = sub i64 0, %2605
  %2607 = xor i64 %2595, %2603
  %2608 = xor i64 %2607, %2598
  %2609 = xor i64 %2608, %2602
  %2610 = xor i64 %2609, %2606
  %2611 = xor i64 %2610, 7752076006010604979
  %2612 = xor i64 %2611, %2600
  %2613 = or i64 %87, 4585899913524990388
  %2614 = xor i64 %87, -1
  %2615 = and i64 %2614, -2413631296090900540
  %2616 = and i64 %87, 2413631296090900539
  %2617 = or i64 %2615, %2616
  %2618 = xor i64 -2223251323630213520, %2617
  %2619 = xor i64 %87, -1
  %2620 = or i64 -4585899913524990389, %2619
  %2621 = xor i64 %2620, -1
  %2622 = and i64 %2621, -1
  %2623 = or i64 %2618, %2622
  %2624 = or i64 %35, -6620243003949275282
  %2625 = and i64 -6620243003949275282, %35
  %2626 = xor i64 -6620243003949275282, %35
  %2627 = or i64 %2625, %2626
  %2628 = xor i64 %2624, -9040900179941612052
  %2629 = xor i64 %2628, %2627
  %2630 = xor i64 %2629, %2613
  %2631 = xor i64 %2630, %2623
  %2632 = mul i64 %2612, %2631
  %2633 = trunc i64 %2632 to i8
  %2634 = srem i8 %2594, %2633
  %2635 = icmp eq i8 %2634, 0
  %2636 = mul i8 %2589, %2589
  %2637 = mul i8 %2636, %2589
  %2638 = add i8 %2637, %2589
  %2639 = add i64 %57, -4467626021262992076
  %2640 = xor i64 -4467626021262992076, %57
  %2641 = and i64 -4467626021262992076, %57
  %2642 = mul i64 2, %2641
  %2643 = add i64 %2640, %2642
  %2644 = or i64 %73, 5350305508364323026
  %2645 = and i64 5350305508364323026, %73
  %2646 = xor i64 5350305508364323026, %73
  %2647 = or i64 %2645, %2646
  %2648 = add i64 %118, -1707457035331171370
  %2649 = sub i64 0, %118
  %2650 = sub i64 -1707457035331171370, %2649
  %2651 = xor i64 %2643, %2647
  %2652 = xor i64 %2651, %2648
  %2653 = xor i64 %2652, %2639
  %2654 = xor i64 %2653, -4975622519146856451
  %2655 = xor i64 %2654, %2650
  %2656 = xor i64 %2655, %2644
  %2657 = add i64 %104, -3561632153664687688
  %2658 = and i64 -3561632153664687688, %104
  %2659 = or i64 -3561632153664687688, %104
  %2660 = add i64 %2658, %2659
  %2661 = and i64 %77, 5819767572789843036
  %2662 = xor i64 %77, -1
  %2663 = or i64 -5819767572789843037, %2662
  %2664 = xor i64 %2663, -1
  %2665 = and i64 %2664, -1
  %2666 = or i64 %130, 7719064561181007494
  %2667 = xor i64 %130, -1
  %2668 = and i64 %2667, 1911002357185192167
  %2669 = and i64 %130, -1911002357185192168
  %2670 = or i64 %2668, %2669
  %2671 = xor i64 8186029918811143777, %2670
  %2672 = xor i64 %130, -1
  %2673 = or i64 -7719064561181007495, %2672
  %2674 = xor i64 %2673, -1
  %2675 = and i64 %2674, -1
  %2676 = or i64 %2671, %2675
  %2677 = xor i64 %2661, 2124362459429743274
  %2678 = xor i64 %2677, %2665
  %2679 = xor i64 %2678, %2676
  %2680 = xor i64 %2679, %2657
  %2681 = xor i64 %2680, %2666
  %2682 = xor i64 %2681, %2660
  %2683 = mul i64 %2656, %2682
  %2684 = trunc i64 %2683 to i8
  %2685 = srem i8 %2638, %2684
  %2686 = or i64 %31, 6824249597770721458
  %2687 = xor i64 %31, -1
  %2688 = and i64 6824249597770721458, %2687
  %2689 = add i64 %2688, %31
  %2690 = add i64 %49, -5381952923518619168
  %2691 = add i64 -2294114053545989684, %49
  %2692 = add i64 %2691, -3087838869972629484
  %2693 = xor i64 7151789297431379111, %2690
  %2694 = xor i64 %2693, %2689
  %2695 = xor i64 %2694, %2692
  %2696 = xor i64 %2695, %2686
  %2697 = and i64 %63, 2341807892521950474
  %2698 = xor i64 %63, -1
  %2699 = or i64 -2341807892521950475, %2698
  %2700 = xor i64 %2699, -1
  %2701 = and i64 %2700, -1
  %2702 = add i64 %108, 6858308338971823299
  %2703 = xor i64 6858308338971823299, %108
  %2704 = and i64 6858308338971823299, %108
  %2705 = mul i64 2, %2704
  %2706 = add i64 %2703, %2705
  %2707 = add i64 %114, 6022295501366082117
  %2708 = and i64 6022295501366082117, %114
  %2709 = or i64 6022295501366082117, %114
  %2710 = add i64 %2708, %2709
  %2711 = xor i64 %2702, %2697
  %2712 = xor i64 %2711, %2707
  %2713 = xor i64 %2712, %2706
  %2714 = xor i64 %2713, %2710
  %2715 = xor i64 %2714, 0
  %2716 = xor i64 %2715, %2701
  %2717 = mul i64 %2696, %2716
  %2718 = trunc i64 %2717 to i8
  %2719 = icmp eq i8 %2685, %2718
  %2720 = and i1 %2635, %2719
  %2721 = select i1 %2720, i32 984876139, i32 984876150
  %2722 = xor i32 %2721, 29
  store i32 %2722, i32* %0, align 4
  %2723 = call i8** @bf3690775341412318723(i32* %0)
  %2724 = load i8*, i8** %2723, align 8
  indirectbr i8* %2724, [label %loopEnd, label %2573]

codeRepl8:                                        ; preds = %codeRepl8, %loopStart
  store i64 4070807658626890119, i64* %101, align 8
  %2725 = call i8** @lk1336881106680510526(i64* %101)
  %2726 = load i8*, i8** %2725, align 8
  %2727 = bitcast i8* %2726 to void ([51 x i32]*, i32*)*
  call void %2727([51 x i32]* %lookupTable, i32* %dispatcher)
  %2728 = load i8*, i8** %8, align 8
  %2729 = load i8, i8* %2728, align 1
  %2730 = or i64 %73, 4904822125802547693
  %2731 = and i64 4904822125802547693, %73
  %2732 = xor i64 4904822125802547693, %73
  %2733 = or i64 %2731, %2732
  %2734 = add i64 %79, -1048642593413304827
  %2735 = sub i64 0, %79
  %2736 = add i64 1048642593413304827, %2735
  %2737 = sub i64 0, %2736
  %2738 = or i64 %73, -1540940640975739776
  %2739 = xor i64 %73, -1
  %2740 = and i64 -1540940640975739776, %2739
  %2741 = add i64 %2740, %73
  %2742 = xor i64 %2741, %2734
  %2743 = xor i64 %2742, %2737
  %2744 = xor i64 %2743, -2859021639699885907
  %2745 = xor i64 %2744, %2733
  %2746 = xor i64 %2745, %2738
  %2747 = xor i64 %2746, %2730
  %2748 = or i64 %118, 129690917054505897
  %2749 = xor i64 %118, -1
  %2750 = and i64 129690917054505897, %2749
  %2751 = add i64 %2750, %118
  %2752 = and i64 %37, -7583598929074303024
  %2753 = xor i64 %37, -1
  %2754 = or i64 7583598929074303023, %2753
  %2755 = xor i64 %2754, -1
  %2756 = and i64 %2755, -1
  %2757 = xor i64 %2751, %2752
  %2758 = xor i64 %2757, %2748
  %2759 = xor i64 %2758, 3905478312375833381
  %2760 = xor i64 %2759, %2756
  %2761 = mul i64 %2747, %2760
  %2762 = trunc i64 %2761 to i8
  %2763 = and i8 %2729, %2762
  %2764 = icmp eq i8 %2763, 0
  %2765 = mul i8 %2729, %2729
  %2766 = sub i8 0, %2765
  %2767 = sub i8 0, %2729
  %2768 = add i8 %2766, %2767
  %2769 = sub i8 0, %2768
  %2770 = mul i8 %2769, 3
  %2771 = srem i8 %2770, 2
  %2772 = icmp eq i8 %2771, 0
  %2773 = or i1 %2764, %2772
  %2774 = or i64 %140, 328922159120861889
  %2775 = xor i64 %140, -1
  %2776 = and i64 %2775, -8783372503501264355
  %2777 = and i64 %140, 8783372503501264354
  %2778 = or i64 %2776, %2777
  %2779 = xor i64 -9039953944302264100, %2778
  %2780 = xor i64 %140, -1
  %2781 = or i64 -328922159120861890, %2780
  %2782 = xor i64 %2781, -1
  %2783 = and i64 %2782, -1
  %2784 = or i64 %2779, %2783
  %2785 = and i64 %19, -2111563752750363693
  %2786 = xor i64 %19, -1
  %2787 = xor i64 -2111563752750363693, %2786
  %2788 = and i64 %2787, -2111563752750363693
  %2789 = xor i64 %2784, %2785
  %2790 = xor i64 %2789, %2774
  %2791 = xor i64 %2790, %2788
  %2792 = xor i64 %2791, 3016813366415522547
  %2793 = or i64 %99, -9187042656674470659
  %2794 = xor i64 %99, -1
  %2795 = and i64 -9187042656674470659, %2794
  %2796 = add i64 %2795, %99
  %2797 = or i64 %128, 1525901227374274134
  %2798 = and i64 1525901227374274134, %128
  %2799 = xor i64 1525901227374274134, %128
  %2800 = or i64 %2798, %2799
  %2801 = xor i64 %2800, %2797
  %2802 = xor i64 %2801, %2796
  %2803 = xor i64 %2802, %2793
  %2804 = xor i64 %2803, 1936559060447911612
  %2805 = mul i64 %2792, %2804
  %2806 = trunc i64 %2805 to i32
  %2807 = select i1 %2773, i32 %2806, i32 984876150
  %2808 = or i32 %2807, 2
  %2809 = and i32 %2807, 2
  %2810 = sub i32 %2808, %2809
  store i32 %2810, i32* %0, align 4
  %2811 = call i8** @bf3690775341412318723(i32* %0)
  %2812 = load i8*, i8** %2811, align 8
  indirectbr i8* %2812, [label %loopEnd, label %codeRepl8]

2813:                                             ; preds = %2813, %loopStart
  %2814 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 16
  %2815 = load i32, i32* %2814, align 4
  %2816 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 15
  %2817 = load i32, i32* %2816, align 4
  %2818 = add i64 %128, -1077606534249253230
  %2819 = add i64 -4133632054375809950, %128
  %2820 = add i64 %2819, 3056025520126556720
  %2821 = or i64 %118, 4762392204637993129
  %2822 = xor i64 %118, -1
  %2823 = and i64 4762392204637993129, %2822
  %2824 = add i64 %2823, %118
  %2825 = or i64 %134, -7801045336993820115
  %2826 = and i64 -7801045336993820115, %134
  %2827 = xor i64 -7801045336993820115, %134
  %2828 = or i64 %2826, %2827
  %2829 = xor i64 %2828, %2821
  %2830 = xor i64 %2829, -4330163357962461725
  %2831 = xor i64 %2830, %2820
  %2832 = xor i64 %2831, %2818
  %2833 = xor i64 %2832, %2825
  %2834 = xor i64 %2833, %2824
  %2835 = or i64 %140, -8611109208146887972
  %2836 = xor i64 %140, -1
  %2837 = and i64 -8611109208146887972, %2836
  %2838 = add i64 %2837, %140
  %2839 = and i64 %67, -2501753704258737759
  %2840 = or i64 2501753704258737758, %67
  %2841 = sub i64 %2840, 2501753704258737758
  %2842 = and i64 %7, -2588776414566777154
  %2843 = or i64 2588776414566777153, %7
  %2844 = sub i64 %2843, 2588776414566777153
  %2845 = xor i64 0, %2835
  %2846 = xor i64 %2845, %2838
  %2847 = xor i64 %2846, %2842
  %2848 = xor i64 %2847, %2841
  %2849 = xor i64 %2848, %2844
  %2850 = xor i64 %2849, %2839
  %2851 = mul i64 %2834, %2850
  %2852 = trunc i64 %2851 to i32
  %2853 = sub i32 %2852, %2815
  %2854 = sub i32 0, %2817
  %2855 = add i32 %2853, %2854
  %2856 = sub i32 0, %2855
  store i32 %2856, i32* %dispatcher, align 4
  %2857 = load i8*, i8** %6, align 8
  %2858 = load i8, i8* %2857, align 1
  %2859 = xor i8 %2858, -1
  %2860 = or i8 %2859, -2
  %2861 = or i64 %120, 7133138786300908748
  %2862 = xor i64 %120, -1
  %2863 = and i64 7133138786300908748, %2862
  %2864 = add i64 %2863, %120
  %2865 = or i64 %108, 6818890043171894951
  %2866 = xor i64 %108, -1
  %2867 = and i64 6818890043171894951, %2866
  %2868 = add i64 %2867, %108
  %2869 = xor i64 %2864, %2865
  %2870 = xor i64 %2869, %2868
  %2871 = xor i64 %2870, %2861
  %2872 = xor i64 %2871, 5063117478557850791
  %2873 = sext i32 %206 to i64
  %2874 = add i64 %2873, -3577396537017114832
  %2875 = sub i64 0, %2873
  %2876 = sub i64 -3577396537017114832, %2875
  %2877 = add i64 %102, -1473143888639833757
  %2878 = sub i64 0, %102
  %2879 = sub i64 -1473143888639833757, %2878
  %2880 = and i64 %33, -3750849664326694751
  %2881 = or i64 3750849664326694750, %33
  %2882 = sub i64 %2881, 3750849664326694750
  %2883 = xor i64 %2880, %2879
  %2884 = xor i64 %2883, %2882
  %2885 = xor i64 %2884, %2877
  %2886 = xor i64 %2885, -131257801656087575
  %2887 = xor i64 %2886, %2874
  %2888 = xor i64 %2887, %2876
  %2889 = mul i64 %2872, %2888
  %2890 = trunc i64 %2889 to i8
  %2891 = xor i8 %2860, %2890
  %2892 = and i8 %2891, -1
  %2893 = icmp eq i8 %2892, 0
  %2894 = mul i8 %2858, %2858
  %2895 = and i64 %140, 2776031551051094876
  %2896 = xor i64 %140, -1
  %2897 = or i64 -2776031551051094877, %2896
  %2898 = xor i64 %2897, -1
  %2899 = and i64 %2898, -1
  %2900 = sext i32 %206 to i64
  %2901 = or i64 %2900, -4980499036391531887
  %2902 = xor i64 %2900, -1
  %2903 = and i64 %2902, -9122259011532545209
  %2904 = and i64 %2900, 9122259011532545208
  %2905 = or i64 %2903, %2904
  %2906 = xor i64 4289273206193928662, %2905
  %2907 = xor i64 %2900, -1
  %2908 = or i64 4980499036391531886, %2907
  %2909 = xor i64 %2908, -1
  %2910 = and i64 %2909, -1
  %2911 = or i64 %2906, %2910
  %2912 = xor i64 %2901, %2911
  %2913 = xor i64 %2912, %2899
  %2914 = xor i64 %2913, 5760017738418115781
  %2915 = xor i64 %2914, %2895
  %2916 = add i64 %65, 8372820375157128844
  %2917 = add i64 6675617573018258106, %65
  %2918 = sub i64 %2917, -1697202802138870738
  %2919 = and i64 %43, 923208806648666323
  %2920 = xor i64 %43, -1
  %2921 = xor i64 923208806648666323, %2920
  %2922 = and i64 %2921, 923208806648666323
  %2923 = xor i64 %2922, %2918
  %2924 = xor i64 %2923, %2919
  %2925 = xor i64 %2924, %2916
  %2926 = xor i64 %2925, 418596401203958847
  %2927 = mul i64 %2915, %2926
  %2928 = trunc i64 %2927 to i8
  %2929 = sub i8 %2894, %2928
  %2930 = add i8 %2929, %2858
  %2931 = add i8 %2930, 123
  %2932 = mul i8 %2931, 3
  %2933 = srem i8 %2932, 2
  %2934 = icmp eq i8 %2933, 0
  %2935 = and i1 %2893, %2934
  %2936 = xor i1 %2893, %2934
  %2937 = or i1 %2935, %2936
  %2938 = select i1 %2937, i32 984876134, i32 984876150
  %2939 = xor i32 %2938, 16
  store i32 %2939, i32* %0, align 4
  %2940 = call i8** @bf3690775341412318723(i32* %0)
  %2941 = load i8*, i8** %2940, align 8
  indirectbr i8* %2941, [label %loopEnd, label %2813]

codeRepl9:                                        ; preds = %codeRepl9, %loopStart
  store i64 4070807658626890114, i64* %101, align 8
  %2942 = call i8** @lk1336881106680510526(i64* %101)
  %2943 = load i8*, i8** %2942, align 8
  %2944 = bitcast i8* %2943 to void (i8**, i8**, i8**, i8**, [51 x i32]*, i32*)*
  call void %2944(i8** %.reg2mem12, i8** %.reg2mem8, i8** %.reg2mem4, i8** %.reg2mem, [51 x i32]* %lookupTable, i32* %dispatcher)
  %2945 = load i8*, i8** %48, align 8
  %2946 = load i8, i8* %2945, align 1
  %2947 = sext i32 %206 to i64
  %2948 = and i64 %2947, -4252141044292779388
  %2949 = xor i64 %2947, -1
  %2950 = xor i64 -4252141044292779388, %2949
  %2951 = and i64 %2950, -4252141044292779388
  %2952 = add i64 %116, 1066544010357182326
  %2953 = add i64 -7918727078304870999, %116
  %2954 = add i64 %2953, 8985271088662053325
  %2955 = and i64 %67, 4294977905860653448
  %2956 = xor i64 %67, -1
  %2957 = xor i64 4294977905860653448, %2956
  %2958 = and i64 %2957, 4294977905860653448
  %2959 = xor i64 %2958, -2681038994630089751
  %2960 = xor i64 %2959, %2948
  %2961 = xor i64 %2960, %2952
  %2962 = xor i64 %2961, %2951
  %2963 = xor i64 %2962, %2954
  %2964 = xor i64 %2963, %2955
  %2965 = and i64 %85, 9019871581036809654
  %2966 = xor i64 %85, -1
  %2967 = xor i64 9019871581036809654, %2966
  %2968 = and i64 %2967, 9019871581036809654
  %2969 = add i64 %142, 4866560711172429166
  %2970 = add i64 6819483948103235012, %142
  %2971 = sub i64 %2970, 1952923236930805846
  %2972 = and i64 %65, -5981477527222496391
  %2973 = or i64 5981477527222496390, %65
  %2974 = sub i64 %2973, 5981477527222496390
  %2975 = xor i64 %2972, %2965
  %2976 = xor i64 %2975, %2974
  %2977 = xor i64 %2976, %2971
  %2978 = xor i64 %2977, -6931688207821921191
  %2979 = xor i64 %2978, %2969
  %2980 = xor i64 %2979, %2968
  %2981 = mul i64 %2964, %2980
  %2982 = trunc i64 %2981 to i8
  %2983 = and i8 %2946, %2982
  %2984 = icmp eq i8 %2983, 0
  %2985 = mul i8 %2946, %2946
  %2986 = sub i8 0, %2985
  %2987 = sub i8 0, %2946
  %2988 = add i8 %2986, %2987
  %2989 = sub i8 0, %2988
  %2990 = and i64 %51, -1077908038488803930
  %2991 = xor i64 %51, -1
  %2992 = xor i64 -1077908038488803930, %2991
  %2993 = and i64 %2992, -1077908038488803930
  %2994 = or i64 %136, 906575282389104618
  %2995 = xor i64 %136, -1
  %2996 = and i64 %2995, 4985153990345634245
  %2997 = and i64 %136, -4985153990345634246
  %2998 = or i64 %2996, %2997
  %2999 = xor i64 5312592034247181871, %2998
  %3000 = xor i64 %136, -1
  %3001 = or i64 -906575282389104619, %3000
  %3002 = xor i64 %3001, -1
  %3003 = and i64 %3002, -1
  %3004 = or i64 %2999, %3003
  %3005 = add i64 %51, -5384077563797476264
  %3006 = and i64 -5384077563797476264, %51
  %3007 = or i64 -5384077563797476264, %51
  %3008 = add i64 %3006, %3007
  %3009 = xor i64 %3004, %2993
  %3010 = xor i64 %3009, %3008
  %3011 = xor i64 %3010, %2990
  %3012 = xor i64 %3011, %2994
  %3013 = xor i64 %3012, -9157695734648894375
  %3014 = xor i64 %3013, %3005
  %3015 = or i64 %89, 1420068641489350428
  %3016 = and i64 1420068641489350428, %89
  %3017 = xor i64 1420068641489350428, %89
  %3018 = or i64 %3016, %3017
  %3019 = add i64 %33, -8462182673417312992
  %3020 = sub i64 0, %33
  %3021 = add i64 8462182673417312992, %3020
  %3022 = sub i64 0, %3021
  %3023 = add i64 %89, 7569137314978596610
  %3024 = sub i64 0, %89
  %3025 = add i64 -7569137314978596610, %3024
  %3026 = sub i64 0, %3025
  %3027 = xor i64 %3018, %3026
  %3028 = xor i64 %3027, %3023
  %3029 = xor i64 %3028, 47019027924382651
  %3030 = xor i64 %3029, %3015
  %3031 = xor i64 %3030, %3022
  %3032 = xor i64 %3031, %3019
  %3033 = mul i64 %3014, %3032
  %3034 = trunc i64 %3033 to i8
  %3035 = mul i8 %2989, %3034
  %3036 = srem i8 %3035, 2
  %3037 = icmp eq i8 %3036, 0
  %3038 = xor i1 %2984, true
  %3039 = and i1 %3038, true
  %3040 = and i1 %2984, false
  %3041 = or i1 %3039, %3040
  %3042 = xor i1 %3037, true
  %3043 = and i1 %3042, true
  %3044 = and i1 %3037, false
  %3045 = or i1 %3043, %3044
  %3046 = xor i1 %3041, %3045
  %3047 = xor i1 %2984, true
  %3048 = xor i1 %3037, true
  %3049 = or i1 %3047, %3048
  %3050 = xor i1 %3049, true
  %3051 = and i1 %3050, true
  %3052 = or i1 %3046, %3051
  %3053 = select i1 %3052, i32 984876096, i32 984876150
  %3054 = or i64 %118, 4823259090112967662
  %3055 = xor i64 %118, -1
  %3056 = and i64 %3055, 7372136591994688047
  %3057 = and i64 %118, -7372136591994688048
  %3058 = or i64 %3056, %3057
  %3059 = xor i64 2639320202866319809, %3058
  %3060 = xor i64 %118, -1
  %3061 = or i64 -4823259090112967663, %3060
  %3062 = xor i64 %3061, -1
  %3063 = and i64 %3062, -1
  %3064 = or i64 %3059, %3063
  %3065 = or i64 %65, 7834920762977334966
  %3066 = xor i64 %65, -1
  %3067 = and i64 7834920762977334966, %3066
  %3068 = add i64 %3067, %65
  %3069 = xor i64 %3054, %3065
  %3070 = xor i64 %3069, 8708128022297213957
  %3071 = xor i64 %3070, %3064
  %3072 = xor i64 %3071, %3068
  %3073 = or i64 %85, 5860674146985345765
  %3074 = xor i64 %85, -1
  %3075 = and i64 %3074, 7174267943903008762
  %3076 = and i64 %85, -7174267943903008763
  %3077 = or i64 %3075, %3076
  %3078 = xor i64 3658421235365123359, %3077
  %3079 = xor i64 %85, -1
  %3080 = or i64 -5860674146985345766, %3079
  %3081 = xor i64 %3080, -1
  %3082 = and i64 %3081, -1
  %3083 = or i64 %3078, %3082
  %3084 = add i64 %134, 3095265049759663399
  %3085 = sub i64 0, %134
  %3086 = add i64 -3095265049759663399, %3085
  %3087 = sub i64 0, %3086
  %3088 = add i64 %53, 3428774332787306990
  %3089 = xor i64 3428774332787306990, %53
  %3090 = and i64 3428774332787306990, %53
  %3091 = mul i64 2, %3090
  %3092 = add i64 %3089, %3091
  %3093 = xor i64 %3088, %3073
  %3094 = xor i64 %3093, %3087
  %3095 = xor i64 %3094, -4991420333381841101
  %3096 = xor i64 %3095, %3092
  %3097 = xor i64 %3096, %3084
  %3098 = xor i64 %3097, %3083
  %3099 = mul i64 %3072, %3098
  %3100 = trunc i64 %3099 to i32
  %3101 = xor i32 %3053, %3100
  %3102 = and i32 %3101, 54
  %3103 = and i32 %3053, -55
  %3104 = or i32 %3102, %3103
  store i32 %3104, i32* %0, align 4
  %3105 = call i8** @bf3690775341412318723(i32* %0)
  %3106 = load i8*, i8** %3105, align 8
  indirectbr i8* %3106, [label %loopEnd, label %codeRepl9]

3107:                                             ; preds = %loopStart
  %.reload78 = load i32, i32* %.reg2mem77, align 4
  ret i32 %.reload78

3108:                                             ; preds = %3108, %loopStart
  store i64 4070807658626890113, i64* %101, align 8
  %3109 = call i8** @lk1336881106680510526(i64* %101)
  %3110 = load i8*, i8** %3109, align 8
  %3111 = bitcast i8* %3110 to void ()*
  call void %3111()
  %.reload25 = load i32, i32* %.reg2mem20, align 4
  %3112 = mul i32 %.reload25, 2
  %.reload24 = load i32, i32* %.reg2mem20, align 4
  %3113 = mul i32 %.reload24, 2
  %3114 = add i32 2, %3113
  %3115 = mul i32 %3112, %3114
  %3116 = srem i32 %3115, 4
  store i32 %3116, i32* %.reg2mem86, align 4
  %.reload88 = load i32, i32* %.reg2mem86, align 4
  %3117 = icmp eq i32 %.reload88, 0
  store i1 %3117, i1* %.reg2mem89, align 1
  %.reload37 = load i32, i32* %.reg2mem34, align 4
  %3118 = and i32 %.reload37, 1
  store i32 %3118, i32* %.reg2mem91, align 4
  %.reload95 = load i32, i32* %.reg2mem91, align 4
  %3119 = icmp eq i32 %.reload95, 0
  %.reload36 = load i32, i32* %.reg2mem34, align 4
  %3120 = mul i32 %.reload36, %.reload36
  %.reload35 = load i32, i32* %.reg2mem34, align 4
  %3121 = add i32 %3120, %.reload35
  %3122 = add i64 %87, 897496104647568585
  %3123 = add i64 7308297483792852396, %87
  %3124 = add i64 %3123, -6410801379145283811
  %3125 = or i64 %23, -23216829382661494
  %3126 = xor i64 %23, -1
  %3127 = and i64 -23216829382661494, %3126
  %3128 = add i64 %3127, %23
  %3129 = add i64 %49, 5320770004624838147
  %3130 = and i64 5320770004624838147, %49
  %3131 = or i64 5320770004624838147, %49
  %3132 = add i64 %3130, %3131
  %3133 = xor i64 %3132, %3124
  %3134 = xor i64 %3133, %3125
  %3135 = xor i64 %3134, 6747379122015889233
  %3136 = xor i64 %3135, %3128
  %3137 = xor i64 %3136, %3129
  %3138 = xor i64 %3137, %3122
  %3139 = add i64 %5, 6692126693472933455
  %3140 = sub i64 0, %5
  %3141 = sub i64 6692126693472933455, %3140
  %3142 = and i64 %132, -7360540489538930467
  %3143 = or i64 7360540489538930466, %132
  %3144 = sub i64 %3143, 7360540489538930466
  %3145 = xor i64 %3144, %3139
  %3146 = xor i64 %3145, %3142
  %3147 = xor i64 %3146, %3141
  %3148 = xor i64 %3147, 3213289794210252051
  %3149 = mul i64 %3138, %3148
  %3150 = trunc i64 %3149 to i32
  %3151 = mul i32 %3121, %3150
  store i32 %3151, i32* %.reg2mem96, align 4
  %.reload98 = load i32, i32* %.reg2mem96, align 4
  %3152 = srem i32 %.reload98, 2
  store i32 %3152, i32* %.reg2mem100, align 4
  %.reload103 = load i32, i32* %.reg2mem100, align 4
  %3153 = add i64 %1, 6902766385446078537
  %3154 = sub i64 0, %1
  %3155 = add i64 -6902766385446078537, %3154
  %3156 = sub i64 0, %3155
  %3157 = add i64 %81, -6237358284706549396
  %3158 = and i64 -6237358284706549396, %81
  %3159 = or i64 -6237358284706549396, %81
  %3160 = add i64 %3158, %3159
  %3161 = add i64 %63, 2538509291148548728
  %3162 = add i64 703740031951349552, %63
  %3163 = sub i64 %3162, -1834769259197199176
  %3164 = xor i64 %3153, %3157
  %3165 = xor i64 %3164, %3160
  %3166 = xor i64 %3165, 9051515103906694223
  %3167 = xor i64 %3166, %3161
  %3168 = xor i64 %3167, %3163
  %3169 = xor i64 %3168, %3156
  %3170 = add i64 %57, 4218564545586907418
  %3171 = sub i64 0, %57
  %3172 = sub i64 4218564545586907418, %3171
  %3173 = add i64 %63, 9106222739007406911
  %3174 = add i64 -7121924136869867058, %63
  %3175 = sub i64 %3174, 2218597197832277647
  %3176 = add i64 %134, 2736605713198473154
  %3177 = add i64 5154695445117870972, %134
  %3178 = add i64 %3177, -2418089731919397818
  %3179 = xor i64 %3173, %3175
  %3180 = xor i64 %3179, %3176
  %3181 = xor i64 %3180, %3172
  %3182 = xor i64 %3181, %3178
  %3183 = xor i64 %3182, 0
  %3184 = xor i64 %3183, %3170
  %3185 = mul i64 %3169, %3184
  %3186 = trunc i64 %3185 to i32
  %3187 = icmp eq i32 %.reload103, %3186
  %3188 = xor i1 %3187, true
  %3189 = and i1 %3188, true
  %3190 = and i1 %3187, false
  %3191 = or i1 %3189, %3190
  %3192 = or i64 %104, 6078706789360429602
  %3193 = xor i64 %104, -1
  %3194 = and i64 %3193, 6523486057285155426
  %3195 = and i64 %104, -6523486057285155427
  %3196 = or i64 %3194, %3195
  %3197 = xor i64 1068465404267237440, %3196
  %3198 = xor i64 %104, -1
  %3199 = or i64 -6078706789360429603, %3198
  %3200 = xor i64 %3199, -1
  %3201 = and i64 %3200, -1
  %3202 = or i64 %3197, %3201
  %3203 = and i64 %45, 389780675920339006
  %3204 = or i64 -389780675920339007, %45
  %3205 = sub i64 %3204, -389780675920339007
  %3206 = xor i64 %3192, %3205
  %3207 = xor i64 %3206, %3203
  %3208 = xor i64 %3207, -1739295645736079729
  %3209 = xor i64 %3208, %3202
  %3210 = and i64 %33, -794359361431449323
  %3211 = xor i64 %33, -1
  %3212 = or i64 794359361431449322, %3211
  %3213 = xor i64 %3212, -1
  %3214 = and i64 %3213, -1
  %3215 = or i64 %108, -4051558435306565226
  %3216 = xor i64 %108, -1
  %3217 = and i64 %3216, -8424627479533235855
  %3218 = and i64 %108, 8424627479533235854
  %3219 = or i64 %3217, %3218
  %3220 = xor i64 5535008470513598695, %3219
  %3221 = xor i64 %108, -1
  %3222 = or i64 4051558435306565225, %3221
  %3223 = xor i64 %3222, -1
  %3224 = and i64 %3223, -1
  %3225 = or i64 %3220, %3224
  %3226 = xor i64 %3210, %3215
  %3227 = xor i64 %3226, 0
  %3228 = xor i64 %3227, %3214
  %3229 = xor i64 %3228, %3225
  %3230 = mul i64 %3209, %3229
  %3231 = trunc i64 %3230 to i1
  %3232 = xor i1 %3191, %3231
  %3233 = xor i1 %3119, true
  %3234 = or i1 %3233, %3232
  %3235 = xor i1 %3119, true
  %3236 = sub i1 %3234, %3235
  %3237 = add i1 %3236, true
  %3238 = add i1 %3237, %3187
  %3239 = sub i1 %3238, true
  %3240 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 30
  %3241 = load i32, i32* %3240, align 4
  %3242 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %3243 = load i32, i32* %3242, align 4
  %3244 = srem i32 %3241, %3243
  %3245 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 31
  %3246 = load i32, i32* %3245, align 4
  %3247 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %3248 = load i32, i32* %3247, align 4
  %3249 = srem i32 %3246, %3248
  %3250 = select i1 %3239, i32 %3244, i32 %3249
  store i32 %3250, i32* %dispatcher, align 4
  %3251 = load i8*, i8** %90, align 8
  %3252 = load i8, i8* %3251, align 1
  %3253 = and i8 %3252, 1
  %3254 = icmp eq i8 %3253, 1
  %3255 = mul i8 %3252, %3252
  %3256 = add i8 %3255, %3252
  %3257 = or i64 %45, 7250739200234334116
  %3258 = xor i64 %45, -1
  %3259 = and i64 7250739200234334116, %3258
  %3260 = add i64 %3259, %45
  %3261 = or i64 %19, -147829069261182341
  %3262 = xor i64 %19, -1
  %3263 = and i64 %3262, 6997046877357376390
  %3264 = and i64 %19, -6997046877357376391
  %3265 = or i64 %3263, %3264
  %3266 = xor i64 -7140370147951154691, %3265
  %3267 = xor i64 %19, -1
  %3268 = or i64 147829069261182340, %3267
  %3269 = xor i64 %3268, -1
  %3270 = and i64 %3269, -1
  %3271 = or i64 %3266, %3270
  %3272 = sext i32 %206 to i64
  %3273 = add i64 %3272, 7132772931684979358
  %3274 = xor i64 7132772931684979358, %3272
  %3275 = and i64 7132772931684979358, %3272
  %3276 = mul i64 2, %3275
  %3277 = add i64 %3274, %3276
  %3278 = xor i64 %3257, %3271
  %3279 = xor i64 %3278, 5616080953251422053
  %3280 = xor i64 %3279, %3260
  %3281 = xor i64 %3280, %3261
  %3282 = xor i64 %3281, %3273
  %3283 = xor i64 %3282, %3277
  %3284 = and i64 %57, -3310615259273072345
  %3285 = or i64 3310615259273072344, %57
  %3286 = sub i64 %3285, 3310615259273072344
  %3287 = add i64 %102, -4923700045718368919
  %3288 = add i64 -127867096372707775, %102
  %3289 = sub i64 %3288, 4795832949345661144
  %3290 = xor i64 %3287, %3289
  %3291 = xor i64 %3290, %3284
  %3292 = xor i64 %3291, %3286
  %3293 = xor i64 %3292, -7010508127143758630
  %3294 = mul i64 %3283, %3293
  %3295 = trunc i64 %3294 to i8
  %3296 = srem i8 %3256, %3295
  %3297 = icmp eq i8 %3296, 0
  %3298 = xor i1 %3254, true
  %3299 = or i64 %118, 8849263560772255534
  %3300 = xor i64 %118, -1
  %3301 = and i64 %3300, -4235208373779739944
  %3302 = and i64 %118, 4235208373779739943
  %3303 = or i64 %3301, %3302
  %3304 = xor i64 -4614111270952880650, %3303
  %3305 = xor i64 %118, -1
  %3306 = or i64 -8849263560772255535, %3305
  %3307 = xor i64 %3306, -1
  %3308 = and i64 %3307, -1
  %3309 = or i64 %3304, %3308
  %3310 = add i64 %35, -6229586589973596867
  %3311 = and i64 -6229586589973596867, %35
  %3312 = or i64 -6229586589973596867, %35
  %3313 = add i64 %3311, %3312
  %3314 = and i64 %45, 5791337324117411616
  %3315 = or i64 -5791337324117411617, %45
  %3316 = sub i64 %3315, -5791337324117411617
  %3317 = xor i64 %3299, 8807264571277560777
  %3318 = xor i64 %3317, %3313
  %3319 = xor i64 %3318, %3314
  %3320 = xor i64 %3319, %3316
  %3321 = xor i64 %3320, %3310
  %3322 = xor i64 %3321, %3309
  %3323 = sext i32 %dispatcher1 to i64
  %3324 = or i64 %3323, 7486480959261198985
  %3325 = xor i64 %3323, -1
  %3326 = and i64 7486480959261198985, %3325
  %3327 = add i64 %3326, %3323
  %3328 = add i64 %77, -2794596087635849671
  %3329 = sub i64 0, %77
  %3330 = add i64 2794596087635849671, %3329
  %3331 = sub i64 0, %3330
  %3332 = xor i64 %3327, %3331
  %3333 = xor i64 %3332, %3328
  %3334 = xor i64 %3333, %3324
  %3335 = xor i64 %3334, 0
  %3336 = mul i64 %3322, %3335
  %3337 = trunc i64 %3336 to i1
  %3338 = and i1 %3298, %3337
  %3339 = and i1 %3254, true
  %3340 = or i1 %3338, %3339
  %3341 = xor i1 %3297, true
  %3342 = and i1 %3341, false
  %3343 = or i64 %31, 1093901804781086403
  %3344 = xor i64 %31, -1
  %3345 = and i64 1093901804781086403, %3344
  %3346 = add i64 %3345, %31
  %3347 = or i64 %31, -3462117850902790361
  %3348 = xor i64 %31, -1
  %3349 = and i64 -3462117850902790361, %3348
  %3350 = add i64 %3349, %31
  %3351 = xor i64 %3343, 8562852911813901543
  %3352 = xor i64 %3351, %3346
  %3353 = xor i64 %3352, %3347
  %3354 = xor i64 %3353, %3350
  %3355 = add i64 %71, -6243135595773547048
  %3356 = xor i64 -6243135595773547048, %71
  %3357 = and i64 -6243135595773547048, %71
  %3358 = mul i64 2, %3357
  %3359 = add i64 %3356, %3358
  %3360 = and i64 %41, -7612411355022331555
  %3361 = xor i64 %41, -1
  %3362 = or i64 7612411355022331554, %3361
  %3363 = xor i64 %3362, -1
  %3364 = and i64 %3363, -1
  %3365 = xor i64 8001882632035047127, %3360
  %3366 = xor i64 %3365, %3355
  %3367 = xor i64 %3366, %3364
  %3368 = xor i64 %3367, %3359
  %3369 = mul i64 %3354, %3368
  %3370 = trunc i64 %3369 to i1
  %3371 = and i1 %3297, %3370
  %3372 = or i1 %3342, %3371
  %3373 = xor i1 %3340, %3372
  %3374 = xor i1 %3254, true
  %3375 = xor i1 %3297, true
  %3376 = or i1 %3374, %3375
  %3377 = xor i1 %3376, true
  %3378 = and i1 %3377, true
  %3379 = or i1 %3373, %3378
  %3380 = select i1 %3379, i32 984876132, i32 984876150
  %3381 = xor i32 %3380, 18
  store i32 %3381, i32* %0, align 4
  %3382 = call i8** @bf3690775341412318723(i32* %0)
  %3383 = load i8*, i8** %3382, align 8
  indirectbr i8* %3383, [label %loopEnd, label %3108]

3384:                                             ; preds = %3384, %loopStart
  %3385 = sdiv i32 4, 95
  %3386 = add i64 %11, 5680003494451881982
  %3387 = sub i64 0, %11
  %3388 = sub i64 5680003494451881982, %3387
  %3389 = or i64 %45, 2761408381574339072
  %3390 = and i64 2761408381574339072, %45
  %3391 = xor i64 2761408381574339072, %45
  %3392 = or i64 %3390, %3391
  %3393 = xor i64 %3386, 8920651129688756113
  %3394 = xor i64 %3393, %3388
  %3395 = xor i64 %3394, %3392
  %3396 = xor i64 %3395, %3389
  %3397 = add i64 %1, 823576791005947545
  %3398 = xor i64 823576791005947545, %1
  %3399 = and i64 823576791005947545, %1
  %3400 = mul i64 2, %3399
  %3401 = add i64 %3398, %3400
  %3402 = and i64 %124, -712130932139163024
  %3403 = xor i64 %124, -1
  %3404 = or i64 712130932139163023, %3403
  %3405 = xor i64 %3404, -1
  %3406 = and i64 %3405, -1
  %3407 = xor i64 %3401, %3397
  %3408 = xor i64 %3407, 435848330661937301
  %3409 = xor i64 %3408, %3402
  %3410 = xor i64 %3409, %3406
  %3411 = mul i64 %3396, %3410
  %3412 = trunc i64 %3411 to i32
  %3413 = add i32 %3412, 205041946
  %3414 = or i64 %138, -8096864164565118842
  %3415 = xor i64 %138, -1
  %3416 = and i64 %3415, 5930248813233393859
  %3417 = and i64 %138, -5930248813233393860
  %3418 = or i64 %3416, %3417
  %3419 = xor i64 -2454935614303977403, %3418
  %3420 = xor i64 %138, -1
  %3421 = or i64 8096864164565118841, %3420
  %3422 = xor i64 %3421, -1
  %3423 = and i64 %3422, -1
  %3424 = or i64 %3419, %3423
  %3425 = or i64 %3, -7691595740785320611
  %3426 = and i64 -7691595740785320611, %3
  %3427 = xor i64 -7691595740785320611, %3
  %3428 = or i64 %3426, %3427
  %3429 = xor i64 %3414, %3425
  %3430 = xor i64 %3429, %3424
  %3431 = xor i64 %3430, 8465326716623868343
  %3432 = xor i64 %3431, %3428
  %3433 = or i64 %69, -7186057103953223910
  %3434 = xor i64 %69, -1
  %3435 = and i64 -7186057103953223910, %3434
  %3436 = add i64 %3435, %69
  %3437 = add i64 %51, -488050474953062793
  %3438 = add i64 5420556657339865664, %51
  %3439 = sub i64 %3438, 5908607132292928457
  %3440 = xor i64 %3433, %3436
  %3441 = xor i64 %3440, 5076805304798915675
  %3442 = xor i64 %3441, %3437
  %3443 = xor i64 %3442, %3439
  %3444 = mul i64 %3432, %3443
  %3445 = trunc i64 %3444 to i32
  %3446 = sdiv i32 41, %3445
  %3447 = add i32 26, 127
  %3448 = mul i32 50, 12
  %3449 = sext i32 %206 to i64
  %3450 = or i64 %3449, 5418463788476934510
  %3451 = and i64 5418463788476934510, %3449
  %3452 = xor i64 5418463788476934510, %3449
  %3453 = or i64 %3451, %3452
  %3454 = and i64 %93, 3224224147604991132
  %3455 = xor i64 %93, -1
  %3456 = or i64 -3224224147604991133, %3455
  %3457 = xor i64 %3456, -1
  %3458 = and i64 %3457, -1
  %3459 = xor i64 %3450, %3454
  %3460 = xor i64 %3459, %3453
  %3461 = xor i64 %3460, %3458
  %3462 = xor i64 %3461, -7884631089384428043
  %3463 = and i64 %11, -4486001891306713595
  %3464 = xor i64 %11, -1
  %3465 = or i64 4486001891306713594, %3464
  %3466 = xor i64 %3465, -1
  %3467 = and i64 %3466, -1
  %3468 = add i64 %99, 6179349146237634347
  %3469 = add i64 1399221870154435609, %99
  %3470 = sub i64 %3469, -4780127276083198738
  %3471 = xor i64 %3463, -7634725382430686402
  %3472 = xor i64 %3471, %3467
  %3473 = xor i64 %3472, %3470
  %3474 = xor i64 %3473, %3468
  %3475 = mul i64 %3462, %3474
  %3476 = trunc i64 %3475 to i32
  %3477 = mul i32 %3476, 100
  %3478 = mul i32 34, 1
  %3479 = sub i32 122, -91
  %3480 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  %3481 = load i32, i32* %3480, align 4
  %3482 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 16
  %3483 = load i32, i32* %3482, align 4
  %3484 = add i32 %3481, 217380600
  %3485 = add i32 %3484, %3483
  %3486 = sub i32 %3485, 217380600
  store i32 %3486, i32* %dispatcher, align 4
  %3487 = load i8*, i8** %22, align 8
  %3488 = load i8, i8* %3487, align 1
  %3489 = mul i8 %3488, 2
  %3490 = mul i8 %3488, 2
  %3491 = sub i8 0, %3490
  %3492 = add i8 -2, %3491
  %3493 = sub i8 0, %3492
  %3494 = mul i8 %3489, %3493
  %3495 = srem i8 %3494, 4
  %3496 = or i64 %140, -2513789488823466317
  %3497 = xor i64 %140, -1
  %3498 = and i64 -2513789488823466317, %3497
  %3499 = add i64 %3498, %140
  %3500 = add i64 %73, -6604954221772069219
  %3501 = sub i64 0, %73
  %3502 = sub i64 -6604954221772069219, %3501
  %3503 = or i64 %31, -950388532908787362
  %3504 = xor i64 %31, -1
  %3505 = and i64 -950388532908787362, %3504
  %3506 = add i64 %3505, %31
  %3507 = xor i64 %3500, %3496
  %3508 = xor i64 %3507, %3506
  %3509 = xor i64 %3508, -6959126789743373265
  %3510 = xor i64 %3509, %3502
  %3511 = xor i64 %3510, %3503
  %3512 = xor i64 %3511, %3499
  %3513 = or i64 %126, 7313335370467092853
  %3514 = xor i64 %126, -1
  %3515 = and i64 %3514, 4197446567219853194
  %3516 = and i64 %126, -4197446567219853195
  %3517 = or i64 %3515, %3516
  %3518 = xor i64 6863059962435723007, %3517
  %3519 = xor i64 %126, -1
  %3520 = or i64 -7313335370467092854, %3519
  %3521 = xor i64 %3520, -1
  %3522 = and i64 %3521, -1
  %3523 = or i64 %3518, %3522
  %3524 = add i64 %104, 2732066247411739617
  %3525 = sub i64 0, %104
  %3526 = add i64 -2732066247411739617, %3525
  %3527 = sub i64 0, %3526
  %3528 = or i64 %128, 5697559719009189991
  %3529 = xor i64 %128, -1
  %3530 = and i64 5697559719009189991, %3529
  %3531 = add i64 %3530, %128
  %3532 = xor i64 %3528, %3527
  %3533 = xor i64 %3532, %3531
  %3534 = xor i64 %3533, %3524
  %3535 = xor i64 %3534, %3523
  %3536 = xor i64 %3535, %3513
  %3537 = xor i64 %3536, 0
  %3538 = mul i64 %3512, %3537
  %3539 = trunc i64 %3538 to i8
  %3540 = icmp eq i8 %3495, %3539
  %3541 = mul i8 %3488, %3488
  %3542 = and i8 %3541, %3488
  %3543 = or i8 %3541, %3488
  %3544 = add i8 %3542, %3543
  %3545 = srem i8 %3544, 2
  %3546 = icmp eq i8 %3545, 0
  %3547 = and i1 %3540, %3546
  %3548 = select i1 %3547, i32 984876096, i32 984876150
  %3549 = xor i32 %3548, -1
  %3550 = and i32 %3549, -1560699817
  %3551 = and i32 %3548, 1560699816
  %3552 = or i32 %3550, %3551
  %3553 = xor i32 %3552, -1560699807
  store i32 %3553, i32* %0, align 4
  %3554 = call i8** @bf3690775341412318723(i32* %0)
  %3555 = load i8*, i8** %3554, align 8
  indirectbr i8* %3555, [label %loopEnd, label %3384]

codeRepl10:                                       ; preds = %codeRepl10, %loopStart
  store i64 4070807658626890123, i64* %101, align 8
  %3556 = call i8** @lk1336881106680510526(i64* %101)
  %3557 = load i8*, i8** %3556, align 8
  %3558 = bitcast i8* %3557 to void (i32*, i1*, i1*, i32*, [51 x i32]*, i32*)*
  call void %3558(i32* %.reg2mem20, i1* %.reg2mem89, i1* %.reg2mem109, i32* %.reg2mem54, [51 x i32]* %lookupTable, i32* %dispatcher)
  %3559 = load i8*, i8** %84, align 8
  %3560 = load i8, i8* %3559, align 1
  %3561 = mul i8 %3560, 2
  %3562 = mul i8 %3560, 2
  %3563 = or i64 %112, -5850858347286404297
  %3564 = and i64 -5850858347286404297, %112
  %3565 = xor i64 -5850858347286404297, %112
  %3566 = or i64 %3564, %3565
  %3567 = and i64 %21, -6019446739583658407
  %3568 = xor i64 %21, -1
  %3569 = or i64 6019446739583658406, %3568
  %3570 = xor i64 %3569, -1
  %3571 = and i64 %3570, -1
  %3572 = xor i64 7050836559752021127, %3566
  %3573 = xor i64 %3572, %3571
  %3574 = xor i64 %3573, %3567
  %3575 = xor i64 %3574, %3563
  %3576 = add i64 %37, 5233245687051694386
  %3577 = add i64 4500716099417303366, %37
  %3578 = add i64 %3577, 732529587634391020
  %3579 = and i64 %110, -1088035398683109638
  %3580 = xor i64 %110, -1
  %3581 = xor i64 -1088035398683109638, %3580
  %3582 = and i64 %3581, -1088035398683109638
  %3583 = xor i64 %3582, 0
  %3584 = xor i64 %3583, %3576
  %3585 = xor i64 %3584, %3579
  %3586 = xor i64 %3585, %3578
  %3587 = mul i64 %3575, %3586
  %3588 = trunc i64 %3587 to i8
  %3589 = sub i8 %3588, %3562
  %3590 = sub i8 2, %3589
  %3591 = mul i8 %3561, %3590
  %3592 = srem i8 %3591, 4
  %3593 = icmp eq i8 %3592, 0
  %3594 = mul i8 %3560, %3560
  %3595 = add i8 %3594, %3560
  %3596 = srem i8 %3595, 2
  %3597 = icmp eq i8 %3596, 0
  %3598 = or i1 %3593, %3597
  %3599 = and i64 %53, 3610259256611292146
  %3600 = xor i64 %53, -1
  %3601 = or i64 -3610259256611292147, %3600
  %3602 = xor i64 %3601, -1
  %3603 = and i64 %3602, -1
  %3604 = and i64 %112, -1621652521616222971
  %3605 = xor i64 %112, -1
  %3606 = or i64 1621652521616222970, %3605
  %3607 = xor i64 %3606, -1
  %3608 = and i64 %3607, -1
  %3609 = or i64 %112, 4992284154488659875
  %3610 = xor i64 %112, -1
  %3611 = and i64 4992284154488659875, %3610
  %3612 = add i64 %3611, %112
  %3613 = xor i64 5496659540633647525, %3604
  %3614 = xor i64 %3613, %3609
  %3615 = xor i64 %3614, %3608
  %3616 = xor i64 %3615, %3612
  %3617 = xor i64 %3616, %3599
  %3618 = xor i64 %3617, %3603
  %3619 = or i64 %57, -3370396281020337479
  %3620 = xor i64 %57, -1
  %3621 = and i64 %3620, 2916450326200620991
  %3622 = and i64 %57, -2916450326200620992
  %3623 = or i64 %3621, %3622
  %3624 = xor i64 -486210165767494394, %3623
  %3625 = xor i64 %57, -1
  %3626 = or i64 3370396281020337478, %3625
  %3627 = xor i64 %3626, -1
  %3628 = and i64 %3627, -1
  %3629 = or i64 %3624, %3628
  %3630 = add i64 %97, -4696234587948484976
  %3631 = xor i64 -4696234587948484976, %97
  %3632 = and i64 -4696234587948484976, %97
  %3633 = mul i64 2, %3632
  %3634 = add i64 %3631, %3633
  %3635 = or i64 %51, -5554112522295019047
  %3636 = and i64 -5554112522295019047, %51
  %3637 = xor i64 -5554112522295019047, %51
  %3638 = or i64 %3636, %3637
  %3639 = xor i64 %3635, %3634
  %3640 = xor i64 %3639, 6565090993652229198
  %3641 = xor i64 %3640, %3629
  %3642 = xor i64 %3641, %3630
  %3643 = xor i64 %3642, %3619
  %3644 = xor i64 %3643, %3638
  %3645 = mul i64 %3618, %3644
  %3646 = trunc i64 %3645 to i32
  %3647 = select i1 %3598, i32 %3646, i32 984876150
  %3648 = xor i32 %3647, 48
  store i32 %3648, i32* %0, align 4
  %3649 = call i8** @bf3690775341412318723(i32* %0)
  %3650 = load i8*, i8** %3649, align 8
  indirectbr i8* %3650, [label %loopEnd, label %codeRepl10]

3651:                                             ; preds = %3651, %loopStart
  %3652 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 34
  %3653 = load i32, i32* %3652, align 4
  %3654 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %3655 = load i32, i32* %3654, align 4
  %3656 = sub i32 %3653, %3655
  store i32 %3656, i32* %dispatcher, align 4
  %3657 = load i8*, i8** %90, align 8
  %3658 = load i8, i8* %3657, align 1
  %3659 = mul i8 %3658, 2
  %3660 = mul i8 %3658, 2
  %3661 = add i8 2, %3660
  %3662 = mul i8 %3659, %3661
  %3663 = or i64 %41, 1856528762146557568
  %3664 = and i64 1856528762146557568, %41
  %3665 = xor i64 1856528762146557568, %41
  %3666 = or i64 %3664, %3665
  %3667 = or i64 %47, 4052222247918511971
  %3668 = and i64 4052222247918511971, %47
  %3669 = xor i64 4052222247918511971, %47
  %3670 = or i64 %3668, %3669
  %3671 = xor i64 %3667, 5619635924771635847
  %3672 = xor i64 %3671, %3663
  %3673 = xor i64 %3672, %3670
  %3674 = xor i64 %3673, %3666
  %3675 = sext i32 %dispatcher1 to i64
  %3676 = or i64 %3675, -9110660678230487017
  %3677 = and i64 -9110660678230487017, %3675
  %3678 = xor i64 -9110660678230487017, %3675
  %3679 = or i64 %3677, %3678
  %3680 = add i64 %114, 2070988211837854870
  %3681 = sub i64 0, %114
  %3682 = sub i64 2070988211837854870, %3681
  %3683 = xor i64 %3680, %3676
  %3684 = xor i64 %3683, %3679
  %3685 = xor i64 %3684, %3682
  %3686 = xor i64 %3685, -3403926860231439140
  %3687 = mul i64 %3674, %3686
  %3688 = trunc i64 %3687 to i8
  %3689 = srem i8 %3662, %3688
  %3690 = icmp eq i8 %3689, 0
  %3691 = mul i8 %3658, %3658
  %3692 = add i8 %3691, %3658
  %3693 = srem i8 %3692, 2
  %3694 = icmp eq i8 %3693, 0
  %3695 = xor i1 %3690, true
  %3696 = xor i1 %3694, true
  %3697 = or i1 %3695, %3696
  %3698 = xor i1 %3697, true
  %3699 = and i1 %3698, true
  %3700 = select i1 %3699, i32 984876102, i32 984876150
  %3701 = xor i32 %3700, 48
  store i32 %3701, i32* %0, align 4
  %3702 = call i8** @bf3690775341412318723(i32* %0)
  %3703 = load i8*, i8** %3702, align 8
  indirectbr i8* %3703, [label %loopEnd, label %3651]

3704:                                             ; preds = %3704, %loopStart
  %.reload87 = load i32, i32* %.reg2mem86, align 4
  %3705 = srem i32 %.reload87, 2
  %3706 = icmp eq i32 %3705, 0
  %.reload58 = load i32, i32* %.reg2mem54, align 4
  %3707 = mul i32 %.reload58, %.reload58
  %.reload57 = load i32, i32* %.reg2mem54, align 4
  %3708 = add i32 %3707, %.reload57
  %3709 = and i64 %118, 1533690576129176687
  %3710 = or i64 -1533690576129176688, %118
  %3711 = sub i64 %3710, -1533690576129176688
  %3712 = add i64 %81, 357568801479699237
  %3713 = sub i64 0, %81
  %3714 = add i64 -357568801479699237, %3713
  %3715 = sub i64 0, %3714
  %3716 = and i64 %31, 8761929199151437236
  %3717 = xor i64 %31, -1
  %3718 = xor i64 8761929199151437236, %3717
  %3719 = and i64 %3718, 8761929199151437236
  %3720 = xor i64 %3712, %3716
  %3721 = xor i64 %3720, %3711
  %3722 = xor i64 %3721, %3719
  %3723 = xor i64 %3722, -1223187642611135169
  %3724 = xor i64 %3723, %3709
  %3725 = xor i64 %3724, %3715
  %3726 = add i64 %116, -2446189132102848347
  %3727 = and i64 -2446189132102848347, %116
  %3728 = or i64 -2446189132102848347, %116
  %3729 = add i64 %3727, %3728
  %3730 = or i64 %55, 5161383977817828963
  %3731 = xor i64 %55, -1
  %3732 = and i64 5161383977817828963, %3731
  %3733 = add i64 %3732, %55
  %3734 = add i64 %79, 4796512950340239391
  %3735 = add i64 -4820996268611062205, %79
  %3736 = add i64 %3735, -8829234854758250020
  %3737 = xor i64 %3730, %3736
  %3738 = xor i64 %3737, -8890019294435792835
  %3739 = xor i64 %3738, %3733
  %3740 = xor i64 %3739, %3734
  %3741 = xor i64 %3740, %3726
  %3742 = xor i64 %3741, %3729
  %3743 = mul i64 %3725, %3742
  %3744 = trunc i64 %3743 to i32
  %3745 = mul i32 %3708, %3744
  %3746 = or i64 %9, 2507616826335371311
  %3747 = xor i64 %9, -1
  %3748 = and i64 2507616826335371311, %3747
  %3749 = add i64 %3748, %9
  %3750 = or i64 %67, 2793046180213467204
  %3751 = xor i64 %67, -1
  %3752 = and i64 2793046180213467204, %3751
  %3753 = add i64 %3752, %67
  %3754 = or i64 %91, 95768549283967704
  %3755 = xor i64 %91, -1
  %3756 = and i64 95768549283967704, %3755
  %3757 = add i64 %3756, %91
  %3758 = xor i64 %3757, %3746
  %3759 = xor i64 %3758, %3749
  %3760 = xor i64 %3759, %3753
  %3761 = xor i64 %3760, 8073347146856438179
  %3762 = xor i64 %3761, %3750
  %3763 = xor i64 %3762, %3754
  %3764 = add i64 %136, 6528298395619910653
  %3765 = sub i64 0, %136
  %3766 = add i64 -6528298395619910653, %3765
  %3767 = sub i64 0, %3766
  %3768 = add i64 %114, -4964037497675404776
  %3769 = sub i64 0, %114
  %3770 = add i64 4964037497675404776, %3769
  %3771 = sub i64 0, %3770
  %3772 = xor i64 %3764, %3771
  %3773 = xor i64 %3772, %3767
  %3774 = xor i64 %3773, -8225951343105096682
  %3775 = xor i64 %3774, %3768
  %3776 = mul i64 %3763, %3775
  %3777 = trunc i64 %3776 to i32
  %3778 = srem i32 %3745, %3777
  %3779 = icmp eq i32 %3778, 0
  %.reload56 = load i32, i32* %.reg2mem54, align 4
  %3780 = mul i32 %.reload56, %.reload56
  %.reload55 = load i32, i32* %.reg2mem54, align 4
  %3781 = add i32 %3780, %.reload55
  %3782 = srem i32 %3781, 2
  %3783 = icmp eq i32 %3782, 0
  %3784 = and i1 %3779, %3783
  store i1 %3784, i1* %.reg2mem111, align 1
  %3785 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 20
  %3786 = load i32, i32* %3785, align 4
  %3787 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  %3788 = load i32, i32* %3787, align 4
  %3789 = sub i32 0, %3788
  %3790 = sub i32 %3786, %3789
  %3791 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  %3792 = load i32, i32* %3791, align 4
  %3793 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  %3794 = load i32, i32* %3793, align 4
  %3795 = add i32 %3792, %3794
  %.reload113 = load i1, i1* %.reg2mem111, align 1
  %3796 = select i1 %.reload113, i32 %3790, i32 %3795
  store i32 %3796, i32* %dispatcher, align 4
  %3797 = load i8*, i8** %100, align 8
  %3798 = load i8, i8* %3797, align 1
  %3799 = mul i8 %3798, %3798
  %3800 = add i8 %3799, 117
  %3801 = add i8 %3800, %3798
  %3802 = sub i8 %3801, 117
  %3803 = mul i8 %3802, 3
  %3804 = srem i8 %3803, 2
  %3805 = icmp eq i8 %3804, 0
  %3806 = mul i8 %3798, %3798
  %3807 = add i8 %3806, %3798
  %3808 = or i64 %59, 1949775228109673084
  %3809 = and i64 1949775228109673084, %59
  %3810 = xor i64 1949775228109673084, %59
  %3811 = or i64 %3809, %3810
  %3812 = and i64 %112, 4442642069580297631
  %3813 = xor i64 %112, -1
  %3814 = or i64 -4442642069580297632, %3813
  %3815 = xor i64 %3814, -1
  %3816 = and i64 %3815, -1
  %3817 = or i64 %27, 8333174579746054003
  %3818 = xor i64 %27, -1
  %3819 = and i64 %3818, -5048532827136749901
  %3820 = and i64 %27, 5048532827136749900
  %3821 = or i64 %3819, %3820
  %3822 = xor i64 -3867079129152515648, %3821
  %3823 = xor i64 %27, -1
  %3824 = or i64 -8333174579746054004, %3823
  %3825 = xor i64 %3824, -1
  %3826 = and i64 %3825, -1
  %3827 = or i64 %3822, %3826
  %3828 = xor i64 %3812, %3817
  %3829 = xor i64 %3828, -7257676596763802589
  %3830 = xor i64 %3829, %3827
  %3831 = xor i64 %3830, %3808
  %3832 = xor i64 %3831, %3811
  %3833 = xor i64 %3832, %3816
  %3834 = add i64 %55, -7981484500258830506
  %3835 = add i64 -8095930300539132492, %55
  %3836 = sub i64 %3835, -114445800280301986
  %3837 = and i64 %45, 8493878452974311656
  %3838 = xor i64 %45, -1
  %3839 = or i64 -8493878452974311657, %3838
  %3840 = xor i64 %3839, -1
  %3841 = and i64 %3840, -1
  %3842 = or i64 %29, -1503715306378016455
  %3843 = xor i64 %29, -1
  %3844 = and i64 %3843, -8504580125341172969
  %3845 = and i64 %29, 8504580125341172968
  %3846 = or i64 %3844, %3845
  %3847 = xor i64 7122464294938374702, %3846
  %3848 = xor i64 %29, -1
  %3849 = or i64 1503715306378016454, %3848
  %3850 = xor i64 %3849, -1
  %3851 = and i64 %3850, -1
  %3852 = or i64 %3847, %3851
  %3853 = xor i64 %3841, %3852
  %3854 = xor i64 %3853, %3842
  %3855 = xor i64 %3854, %3834
  %3856 = xor i64 %3855, %3837
  %3857 = xor i64 %3856, %3836
  %3858 = xor i64 %3857, -5904820607390509290
  %3859 = mul i64 %3833, %3858
  %3860 = trunc i64 %3859 to i8
  %3861 = srem i8 %3807, %3860
  %3862 = icmp eq i8 %3861, 0
  %3863 = xor i1 %3805, true
  %3864 = or i1 %3863, %3862
  %3865 = xor i1 %3805, true
  %3866 = sub i1 %3864, %3865
  %3867 = add i64 %59, -8212034405495922594
  %3868 = add i64 -2003181564265727364, %59
  %3869 = add i64 %3868, -6208852841230195230
  %3870 = or i64 %122, 1386251948791244441
  %3871 = and i64 1386251948791244441, %122
  %3872 = xor i64 1386251948791244441, %122
  %3873 = or i64 %3871, %3872
  %3874 = or i64 %61, 5501481800012000514
  %3875 = xor i64 %61, -1
  %3876 = and i64 %3875, 6855673941962962370
  %3877 = and i64 %61, -6855673941962962371
  %3878 = or i64 %3876, %3877
  %3879 = xor i64 1404295890711566528, %3878
  %3880 = xor i64 %61, -1
  %3881 = or i64 -5501481800012000515, %3880
  %3882 = xor i64 %3881, -1
  %3883 = and i64 %3882, -1
  %3884 = or i64 %3879, %3883
  %3885 = xor i64 %3867, %3869
  %3886 = xor i64 %3885, %3884
  %3887 = xor i64 %3886, %3873
  %3888 = xor i64 %3887, %3870
  %3889 = xor i64 %3888, 8028942331284582935
  %3890 = xor i64 %3889, %3874
  %3891 = or i64 %130, -5413556853028036409
  %3892 = and i64 -5413556853028036409, %130
  %3893 = xor i64 -5413556853028036409, %130
  %3894 = or i64 %3892, %3893
  %3895 = and i64 %136, 4352900107186433081
  %3896 = or i64 -4352900107186433082, %136
  %3897 = sub i64 %3896, -4352900107186433082
  %3898 = or i64 %130, -7897805210836483676
  %3899 = xor i64 %130, -1
  %3900 = and i64 -7897805210836483676, %3899
  %3901 = add i64 %3900, %130
  %3902 = xor i64 %3891, %3901
  %3903 = xor i64 %3902, %3894
  %3904 = xor i64 %3903, %3897
  %3905 = xor i64 %3904, %3895
  %3906 = xor i64 %3905, -3709745583723722348
  %3907 = xor i64 %3906, %3898
  %3908 = mul i64 %3890, %3907
  %3909 = trunc i64 %3908 to i32
  %3910 = select i1 %3866, i32 %3909, i32 984876150
  %3911 = xor i32 %3910, 58
  store i32 %3911, i32* %0, align 4
  %3912 = call i8** @bf3690775341412318723(i32* %0)
  %3913 = load i8*, i8** %3912, align 8
  indirectbr i8* %3913, [label %loopEnd, label %3704]

codeRepl11:                                       ; preds = %codeRepl11, %loopStart
  store i64 4070807658626890140, i64* %101, align 8
  %3914 = call i8** @lk1336881106680510526(i64* %101)
  %3915 = load i8*, i8** %3914, align 8
  %3916 = bitcast i8* %3915 to void ([51 x i32]*, i1*, i32*)*
  call void %3916([51 x i32]* %lookupTable, i1* %.reg2mem111, i32* %dispatcher)
  %3917 = load i8*, i8** %92, align 8
  %3918 = load i8, i8* %3917, align 1
  %3919 = and i8 %3918, 1
  %3920 = icmp eq i8 %3919, 0
  %3921 = mul i8 %3918, %3918
  %3922 = add i8 %3921, %3918
  %3923 = and i64 %91, 7142504848079400870
  %3924 = xor i64 %91, -1
  %3925 = or i64 -7142504848079400871, %3924
  %3926 = xor i64 %3925, -1
  %3927 = and i64 %3926, -1
  %3928 = add i64 %43, -2560719675091747511
  %3929 = xor i64 -2560719675091747511, %43
  %3930 = and i64 -2560719675091747511, %43
  %3931 = mul i64 2, %3930
  %3932 = add i64 %3929, %3931
  %3933 = xor i64 -7487850330495728403, %3928
  %3934 = xor i64 %3933, %3932
  %3935 = xor i64 %3934, %3923
  %3936 = xor i64 %3935, %3927
  %3937 = add i64 %75, 2374976856094573725
  %3938 = add i64 3759937712226696149, %75
  %3939 = add i64 %3938, -1384960856132122424
  %3940 = or i64 %112, -6228396776048151965
  %3941 = xor i64 %112, -1
  %3942 = and i64 %3941, 3213562441458346275
  %3943 = and i64 %112, -3213562441458346276
  %3944 = or i64 %3942, %3943
  %3945 = xor i64 -8860669392667583680, %3944
  %3946 = xor i64 %112, -1
  %3947 = or i64 6228396776048151964, %3946
  %3948 = xor i64 %3947, -1
  %3949 = and i64 %3948, -1
  %3950 = or i64 %3945, %3949
  %3951 = xor i64 6015476887557417647, %3937
  %3952 = xor i64 %3951, %3950
  %3953 = xor i64 %3952, %3939
  %3954 = xor i64 %3953, %3940
  %3955 = mul i64 %3936, %3954
  %3956 = trunc i64 %3955 to i8
  %3957 = mul i8 %3922, %3956
  %3958 = srem i8 %3957, 2
  %3959 = icmp eq i8 %3958, 0
  %3960 = or i1 %3920, %3959
  %3961 = select i1 %3960, i32 984876120, i32 984876150
  %3962 = xor i32 %3961, 46
  store i32 %3962, i32* %0, align 4
  %3963 = call i8** @bf3690775341412318723(i32* %0)
  %3964 = load i8*, i8** %3963, align 8
  indirectbr i8* %3964, [label %loopEnd, label %codeRepl11]

3965:                                             ; preds = %3965, %loopStart
  %3966 = sext i32 %211 to i64
  %3967 = and i64 %3966, -1884025126302882126
  %3968 = xor i64 %3966, -1
  %3969 = or i64 1884025126302882125, %3968
  %3970 = xor i64 %3969, -1
  %3971 = and i64 %3970, -1
  %3972 = add i64 %45, -8014158696739505546
  %3973 = and i64 -8014158696739505546, %45
  %3974 = or i64 -8014158696739505546, %45
  %3975 = add i64 %3973, %3974
  %3976 = or i64 %69, -3619925421127862494
  %3977 = xor i64 %69, -1
  %3978 = and i64 -3619925421127862494, %3977
  %3979 = add i64 %3978, %69
  %3980 = xor i64 %3976, %3971
  %3981 = xor i64 %3980, %3975
  %3982 = xor i64 %3981, 4689445054305792941
  %3983 = xor i64 %3982, %3967
  %3984 = xor i64 %3983, %3972
  %3985 = xor i64 %3984, %3979
  %3986 = add i64 %61, -3215608263982355273
  %3987 = xor i64 -3215608263982355273, %61
  %3988 = and i64 -3215608263982355273, %61
  %3989 = mul i64 2, %3988
  %3990 = add i64 %3987, %3989
  %3991 = add i64 %138, -832905675923541128
  %3992 = xor i64 -832905675923541128, %138
  %3993 = and i64 -832905675923541128, %138
  %3994 = mul i64 2, %3993
  %3995 = add i64 %3992, %3994
  %3996 = xor i64 %3986, %3990
  %3997 = xor i64 %3996, -5191825447335107437
  %3998 = xor i64 %3997, %3995
  %3999 = xor i64 %3998, %3991
  %4000 = mul i64 %3985, %3999
  %4001 = or i64 %95, 8330413068790153744
  %4002 = xor i64 %95, -1
  %4003 = and i64 8330413068790153744, %4002
  %4004 = add i64 %4003, %95
  %4005 = and i64 %35, 3831216573298797433
  %4006 = or i64 -3831216573298797434, %35
  %4007 = sub i64 %4006, -3831216573298797434
  %4008 = add i64 %91, 1975691783429040876
  %4009 = sub i64 0, %91
  %4010 = add i64 -1975691783429040876, %4009
  %4011 = sub i64 0, %4010
  %4012 = xor i64 %4008, -1068096384383667755
  %4013 = xor i64 %4012, %4007
  %4014 = xor i64 %4013, %4004
  %4015 = xor i64 %4014, %4011
  %4016 = xor i64 %4015, %4005
  %4017 = xor i64 %4016, %4001
  %4018 = add i64 %11, -4076472754818492361
  %4019 = sub i64 0, %11
  %4020 = add i64 4076472754818492361, %4019
  %4021 = sub i64 0, %4020
  %4022 = add i64 %49, 2356832510341966203
  %4023 = and i64 2356832510341966203, %49
  %4024 = or i64 2356832510341966203, %49
  %4025 = add i64 %4023, %4024
  %4026 = and i64 %102, -247827533766735493
  %4027 = or i64 247827533766735492, %102
  %4028 = sub i64 %4027, 247827533766735492
  %4029 = xor i64 %4022, %4028
  %4030 = xor i64 %4029, %4021
  %4031 = xor i64 %4030, %4025
  %4032 = xor i64 %4031, 6630081938597867948
  %4033 = xor i64 %4032, %4018
  %4034 = xor i64 %4033, %4026
  %4035 = mul i64 %4017, %4034
  %4036 = add i64 %4000, %4035
  %4037 = add i64 68, 92
  %4038 = sdiv i64 23, 35
  %4039 = add i64 %13, -3534045603252795801
  %4040 = add i64 1445241980800533865, %13
  %4041 = sub i64 %4040, 4979287584053329666
  %4042 = add i64 %27, 3839640554501343904
  %4043 = xor i64 3839640554501343904, %27
  %4044 = and i64 3839640554501343904, %27
  %4045 = mul i64 2, %4044
  %4046 = add i64 %4043, %4045
  %4047 = and i64 %29, -7749390638444187836
  %4048 = xor i64 %29, -1
  %4049 = or i64 7749390638444187835, %4048
  %4050 = xor i64 %4049, -1
  %4051 = and i64 %4050, -1
  %4052 = xor i64 %4051, %4047
  %4053 = xor i64 %4052, -6327114952528136629
  %4054 = xor i64 %4053, %4046
  %4055 = xor i64 %4054, %4041
  %4056 = xor i64 %4055, %4039
  %4057 = xor i64 %4056, %4042
  %4058 = and i64 %142, 7499325286429566780
  %4059 = or i64 -7499325286429566781, %142
  %4060 = sub i64 %4059, -7499325286429566781
  %4061 = add i64 %7, 4298526324728669468
  %4062 = add i64 -8227465264550007214, %7
  %4063 = add i64 %4062, -5920752484430874934
  %4064 = and i64 %116, 580285349722614292
  %4065 = or i64 -580285349722614293, %116
  %4066 = sub i64 %4065, -580285349722614293
  %4067 = xor i64 %4066, %4058
  %4068 = xor i64 %4067, %4061
  %4069 = xor i64 %4068, -2663076885826691194
  %4070 = xor i64 %4069, %4064
  %4071 = xor i64 %4070, %4060
  %4072 = xor i64 %4071, %4063
  %4073 = mul i64 %4057, %4072
  %4074 = mul i64 %4073, 0
  %4075 = mul i64 63, 64
  %4076 = mul i64 46, 95
  %4077 = mul i64 1, 36
  %4078 = sdiv i64 37, 74
  %4079 = add i64 %71, -3933056545179141172
  %4080 = add i64 1305951736182914802, %71
  %4081 = add i64 %4080, -5239008281362055974
  %4082 = add i64 %15, 896017156779863185
  %4083 = xor i64 896017156779863185, %15
  %4084 = and i64 896017156779863185, %15
  %4085 = mul i64 2, %4084
  %4086 = add i64 %4083, %4085
  %4087 = or i64 %35, -6433076435682946633
  %4088 = xor i64 %35, -1
  %4089 = and i64 -6433076435682946633, %4088
  %4090 = add i64 %4089, %35
  %4091 = xor i64 -5922160046117500501, %4087
  %4092 = xor i64 %4091, %4086
  %4093 = xor i64 %4092, %4081
  %4094 = xor i64 %4093, %4079
  %4095 = xor i64 %4094, %4090
  %4096 = xor i64 %4095, %4082
  %4097 = add i64 %17, 1235304978361396793
  %4098 = sub i64 0, %17
  %4099 = add i64 -1235304978361396793, %4098
  %4100 = sub i64 0, %4099
  %4101 = and i64 %102, 8714344854996937398
  %4102 = xor i64 %102, -1
  %4103 = xor i64 8714344854996937398, %4102
  %4104 = and i64 %4103, 8714344854996937398
  %4105 = xor i64 -7771604329556164277, %4104
  %4106 = xor i64 %4105, %4097
  %4107 = xor i64 %4106, %4101
  %4108 = xor i64 %4107, %4100
  %4109 = mul i64 %4096, %4108
  %4110 = sdiv i64 %4109, 65
  %4111 = sdiv i64 109, 6
  %4112 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 33
  %4113 = load i32, i32* %4112, align 4
  %4114 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %4115 = load i32, i32* %4114, align 4
  %4116 = sub i32 0, %4115
  %4117 = add i32 %4113, %4116
  store i32 %4117, i32* %dispatcher, align 4
  %4118 = load i8*, i8** %26, align 8
  %4119 = load i8, i8* %4118, align 1
  %4120 = mul i8 %4119, 2
  %4121 = or i64 %25, 975706314785565489
  %4122 = and i64 975706314785565489, %25
  %4123 = xor i64 975706314785565489, %25
  %4124 = or i64 %4122, %4123
  %4125 = add i64 %79, -4335807515559443072
  %4126 = sub i64 0, %79
  %4127 = add i64 4335807515559443072, %4126
  %4128 = sub i64 0, %4127
  %4129 = xor i64 %4124, %4128
  %4130 = xor i64 %4129, %4121
  %4131 = xor i64 %4130, -649353198068527151
  %4132 = xor i64 %4131, %4125
  %4133 = and i64 %55, 1146985054328757601
  %4134 = or i64 -1146985054328757602, %55
  %4135 = sub i64 %4134, -1146985054328757602
  %4136 = sext i32 %211 to i64
  %4137 = add i64 %4136, -3709329927612866826
  %4138 = sub i64 0, %4136
  %4139 = add i64 3709329927612866826, %4138
  %4140 = sub i64 0, %4139
  %4141 = and i64 %136, -8764639536410378871
  %4142 = xor i64 %136, -1
  %4143 = or i64 8764639536410378870, %4142
  %4144 = xor i64 %4143, -1
  %4145 = and i64 %4144, -1
  %4146 = xor i64 %4137, %4140
  %4147 = xor i64 %4146, 7999983655860589154
  %4148 = xor i64 %4147, %4145
  %4149 = xor i64 %4148, %4141
  %4150 = xor i64 %4149, %4133
  %4151 = xor i64 %4150, %4135
  %4152 = mul i64 %4132, %4151
  %4153 = trunc i64 %4152 to i8
  %4154 = mul i8 %4119, %4153
  %4155 = xor i8 2, %4154
  %4156 = and i8 2, %4154
  %4157 = mul i8 2, %4156
  %4158 = add i8 %4155, %4157
  %4159 = mul i8 39, %4158
  %4160 = add i8 23, %4159
  %4161 = mul i8 -105, %4160
  %4162 = add i8 111, %4161
  %4163 = mul i8 %4120, %4162
  %4164 = srem i8 %4163, 4
  %4165 = add i64 %128, -39157285204823543
  %4166 = add i64 -8744089821282155118, %128
  %4167 = sub i64 %4166, -8704932536077331575
  %4168 = and i64 %43, 9131530953082025360
  %4169 = xor i64 %43, -1
  %4170 = xor i64 9131530953082025360, %4169
  %4171 = and i64 %4170, 9131530953082025360
  %4172 = or i64 %63, -364434115789718578
  %4173 = xor i64 %63, -1
  %4174 = and i64 %4173, -5655360042305359989
  %4175 = and i64 %63, 5655360042305359988
  %4176 = or i64 %4174, %4175
  %4177 = xor i64 5437363291777307717, %4176
  %4178 = xor i64 %63, -1
  %4179 = or i64 364434115789718577, %4178
  %4180 = xor i64 %4179, -1
  %4181 = and i64 %4180, -1
  %4182 = or i64 %4177, %4181
  %4183 = xor i64 6173032274896860629, %4165
  %4184 = xor i64 %4183, %4171
  %4185 = xor i64 %4184, %4168
  %4186 = xor i64 %4185, %4182
  %4187 = xor i64 %4186, %4167
  %4188 = xor i64 %4187, %4172
  %4189 = add i64 %108, 4412347061235329645
  %4190 = add i64 357646161279096827, %108
  %4191 = add i64 %4190, 4054700899956232818
  %4192 = add i64 %126, -9054173063658833706
  %4193 = add i64 16756011256427442, %126
  %4194 = add i64 %4193, -9070929074915261148
  %4195 = sext i32 %206 to i64
  %4196 = add i64 %4195, -2096897422514423760
  %4197 = sub i64 0, %4195
  %4198 = sub i64 -2096897422514423760, %4197
  %4199 = xor i64 %4191, %4192
  %4200 = xor i64 %4199, %4196
  %4201 = xor i64 %4200, %4194
  %4202 = xor i64 %4201, 0
  %4203 = xor i64 %4202, %4189
  %4204 = xor i64 %4203, %4198
  %4205 = mul i64 %4188, %4204
  %4206 = trunc i64 %4205 to i8
  %4207 = icmp eq i8 %4164, %4206
  %4208 = mul i8 %4119, %4119
  %4209 = mul i8 %4208, %4119
  %4210 = sub i8 %4209, -19
  %4211 = add i8 %4210, %4119
  %4212 = add i8 %4211, -19
  %4213 = srem i8 %4212, 2
  %4214 = icmp eq i8 %4213, 0
  %4215 = and i1 %4207, %4214
  %4216 = select i1 %4215, i32 984876144, i32 984876150
  %4217 = xor i32 %4216, -1
  %4218 = and i32 %4217, -750763898
  %4219 = and i32 %4216, 750763897
  %4220 = or i32 %4218, %4219
  %4221 = or i64 %77, -8916808937522738531
  %4222 = and i64 -8916808937522738531, %77
  %4223 = xor i64 -8916808937522738531, %77
  %4224 = or i64 %4222, %4223
  %4225 = or i64 %95, 1200533187315591805
  %4226 = xor i64 %95, -1
  %4227 = and i64 %4226, -4414677260594626042
  %4228 = and i64 %95, 4414677260594626041
  %4229 = or i64 %4227, %4228
  %4230 = xor i64 -3309357404746930053, %4229
  %4231 = xor i64 %95, -1
  %4232 = or i64 -1200533187315591806, %4231
  %4233 = xor i64 %4232, -1
  %4234 = and i64 %4233, -1
  %4235 = or i64 %4230, %4234
  %4236 = xor i64 %4225, %4224
  %4237 = xor i64 %4236, %4235
  %4238 = xor i64 %4237, -792608365620555097
  %4239 = xor i64 %4238, %4221
  %4240 = or i64 %33, 7108431451989435769
  %4241 = xor i64 %33, -1
  %4242 = and i64 7108431451989435769, %4241
  %4243 = add i64 %4242, %33
  %4244 = add i64 %132, -2413548010008005553
  %4245 = xor i64 -2413548010008005553, %132
  %4246 = and i64 -2413548010008005553, %132
  %4247 = mul i64 2, %4246
  %4248 = add i64 %4245, %4247
  %4249 = and i64 %97, 7444347805923144561
  %4250 = xor i64 %97, -1
  %4251 = or i64 -7444347805923144562, %4250
  %4252 = xor i64 %4251, -1
  %4253 = and i64 %4252, -1
  %4254 = xor i64 %4253, %4248
  %4255 = xor i64 %4254, %4240
  %4256 = xor i64 %4255, 5226967800827890560
  %4257 = xor i64 %4256, %4243
  %4258 = xor i64 %4257, %4249
  %4259 = xor i64 %4258, %4244
  %4260 = mul i64 %4239, %4259
  %4261 = trunc i64 %4260 to i32
  %4262 = xor i32 %4220, %4261
  store i32 %4262, i32* %0, align 4
  %4263 = call i8** @bf3690775341412318723(i32* %0)
  %4264 = load i8*, i8** %4263, align 8
  indirectbr i8* %4264, [label %loopEnd, label %3965]

4265:                                             ; preds = %4265, %loopStart
  %4266 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 37
  %4267 = load i32, i32* %4266, align 4
  %4268 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %4269 = load i32, i32* %4268, align 4
  %4270 = srem i32 %4267, %4269
  store i32 %4270, i32* %dispatcher, align 4
  %4271 = load i8*, i8** %44, align 8
  %4272 = load i8, i8* %4271, align 1
  %4273 = mul i8 %4272, %4272
  %4274 = sub i8 0, %4273
  %4275 = sub i8 0, %4272
  %4276 = add i8 %4274, %4275
  %4277 = sub i8 0, %4276
  %4278 = or i64 %114, 451766442673637385
  %4279 = xor i64 %114, -1
  %4280 = and i64 %4279, 4365876252047731783
  %4281 = and i64 %114, -4365876252047731784
  %4282 = or i64 %4280, %4281
  %4283 = xor i64 4238532105436357710, %4282
  %4284 = xor i64 %114, -1
  %4285 = or i64 -451766442673637386, %4284
  %4286 = xor i64 %4285, -1
  %4287 = and i64 %4286, -1
  %4288 = or i64 %4283, %4287
  %4289 = add i64 %67, -1212785079377957843
  %4290 = add i64 -3644249622879271298, %67
  %4291 = sub i64 %4290, -2431464543501313455
  %4292 = add i64 %128, 1554628485760171357
  %4293 = and i64 1554628485760171357, %128
  %4294 = or i64 1554628485760171357, %128
  %4295 = add i64 %4293, %4294
  %4296 = xor i64 %4288, %4278
  %4297 = xor i64 %4296, %4291
  %4298 = xor i64 %4297, %4295
  %4299 = xor i64 %4298, %4289
  %4300 = xor i64 %4299, %4292
  %4301 = xor i64 %4300, 6906640931828762395
  %4302 = add i64 %53, 4985240030186845608
  %4303 = and i64 4985240030186845608, %53
  %4304 = or i64 4985240030186845608, %53
  %4305 = add i64 %4303, %4304
  %4306 = or i64 %120, -1783303587019582861
  %4307 = and i64 -1783303587019582861, %120
  %4308 = xor i64 -1783303587019582861, %120
  %4309 = or i64 %4307, %4308
  %4310 = sext i32 %dispatcher1 to i64
  %4311 = or i64 %4310, -3468223897168074038
  %4312 = xor i64 %4310, -1
  %4313 = and i64 -3468223897168074038, %4312
  %4314 = add i64 %4313, %4310
  %4315 = xor i64 %4311, %4306
  %4316 = xor i64 %4315, %4305
  %4317 = xor i64 %4316, %4302
  %4318 = xor i64 %4317, %4309
  %4319 = xor i64 %4318, %4314
  %4320 = xor i64 %4319, 3289326973189124409
  %4321 = mul i64 %4301, %4320
  %4322 = trunc i64 %4321 to i8
  %4323 = mul i8 %4277, %4322
  %4324 = add i64 %43, 4372846006228067822
  %4325 = add i64 -7052144595183325749, %43
  %4326 = sub i64 %4325, 7021753472298158045
  %4327 = add i64 %15, 4264002251519121128
  %4328 = xor i64 4264002251519121128, %15
  %4329 = and i64 4264002251519121128, %15
  %4330 = mul i64 2, %4329
  %4331 = add i64 %4328, %4330
  %4332 = xor i64 %4324, %4327
  %4333 = xor i64 %4332, %4326
  %4334 = xor i64 %4333, 6572148432491687805
  %4335 = xor i64 %4334, %4331
  %4336 = add i64 %142, 1262760872249609061
  %4337 = sub i64 0, %142
  %4338 = add i64 -1262760872249609061, %4337
  %4339 = sub i64 0, %4338
  %4340 = or i64 %73, -2566655032842177353
  %4341 = and i64 -2566655032842177353, %73
  %4342 = xor i64 -2566655032842177353, %73
  %4343 = or i64 %4341, %4342
  %4344 = or i64 %85, -8668289639596374286
  %4345 = xor i64 %85, -1
  %4346 = and i64 %4345, 4265312287566830052
  %4347 = and i64 %85, -4265312287566830053
  %4348 = or i64 %4346, %4347
  %4349 = xor i64 -4862371840901816554, %4348
  %4350 = xor i64 %85, -1
  %4351 = or i64 8668289639596374285, %4350
  %4352 = xor i64 %4351, -1
  %4353 = and i64 %4352, -1
  %4354 = or i64 %4349, %4353
  %4355 = xor i64 %4344, %4354
  %4356 = xor i64 %4355, -8817260215746100310
  %4357 = xor i64 %4356, %4343
  %4358 = xor i64 %4357, %4339
  %4359 = xor i64 %4358, %4336
  %4360 = xor i64 %4359, %4340
  %4361 = mul i64 %4335, %4360
  %4362 = trunc i64 %4361 to i8
  %4363 = srem i8 %4323, %4362
  %4364 = icmp eq i8 %4363, 0
  %4365 = mul i8 %4272, %4272
  %4366 = sub i8 %4365, -119
  %4367 = add i8 %4366, %4272
  %4368 = add i8 %4367, -119
  %4369 = srem i8 %4368, 2
  %4370 = icmp eq i8 %4369, 0
  %4371 = and i1 %4364, %4370
  %4372 = select i1 %4371, i32 984876159, i32 984876150
  %4373 = xor i32 %4372, 9
  store i32 %4373, i32* %0, align 4
  %4374 = call i8** @bf3690775341412318723(i32* %0)
  %4375 = load i8*, i8** %4374, align 8
  indirectbr i8* %4375, [label %loopEnd, label %4265]

4376:                                             ; preds = %4376, %loopStart
  %4377 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 39
  %4378 = load i32, i32* %4377, align 4
  %4379 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %4380 = load i32, i32* %4379, align 4
  %4381 = srem i32 %4378, %4380
  %4382 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 21
  %4383 = load i32, i32* %4382, align 4
  %4384 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 20
  %4385 = load i32, i32* %4384, align 4
  %4386 = add i32 %4383, %4385
  %.reload110 = load i1, i1* %.reg2mem109, align 1
  %4387 = select i1 %.reload110, i32 %4381, i32 %4386
  store i32 %4387, i32* %dispatcher, align 4
  %4388 = load i8*, i8** %4, align 8
  %4389 = load i8, i8* %4388, align 1
  %4390 = xor i8 %4389, -1
  %4391 = or i8 %4390, -2
  %4392 = xor i8 %4391, -1
  %4393 = and i8 %4392, -1
  %4394 = icmp eq i8 %4393, 0
  %4395 = mul i8 %4389, %4389
  %4396 = add i8 %4395, %4389
  %4397 = add i64 %128, -5042336481181534727
  %4398 = sub i64 0, %128
  %4399 = sub i64 -5042336481181534727, %4398
  %4400 = and i64 %37, -362650686458165700
  %4401 = xor i64 %37, -1
  %4402 = xor i64 -362650686458165700, %4401
  %4403 = and i64 %4402, -362650686458165700
  %4404 = add i64 %85, 7052122551610621246
  %4405 = add i64 -5315012407903918951, %85
  %4406 = add i64 %4405, -6079609114195011419
  %4407 = xor i64 %4399, %4406
  %4408 = xor i64 %4407, %4400
  %4409 = xor i64 %4408, %4404
  %4410 = xor i64 %4409, %4403
  %4411 = xor i64 %4410, 1095018901682121153
  %4412 = xor i64 %4411, %4397
  %4413 = add i64 %85, -6359541136403919576
  %4414 = sub i64 0, %85
  %4415 = add i64 6359541136403919576, %4414
  %4416 = sub i64 0, %4415
  %4417 = and i64 %81, 8885920981895768996
  %4418 = xor i64 %81, -1
  %4419 = xor i64 8885920981895768996, %4418
  %4420 = and i64 %4419, 8885920981895768996
  %4421 = add i64 %120, 7035686278465755935
  %4422 = sub i64 0, %120
  %4423 = add i64 -7035686278465755935, %4422
  %4424 = sub i64 0, %4423
  %4425 = xor i64 %4417, %4416
  %4426 = xor i64 %4425, %4424
  %4427 = xor i64 %4426, %4421
  %4428 = xor i64 %4427, -4634078218114338109
  %4429 = xor i64 %4428, %4420
  %4430 = xor i64 %4429, %4413
  %4431 = mul i64 %4412, %4430
  %4432 = trunc i64 %4431 to i8
  %4433 = mul i8 %4396, %4432
  %4434 = srem i8 %4433, 2
  %4435 = icmp eq i8 %4434, 0
  %4436 = xor i1 %4394, true
  %4437 = and i1 %4436, true
  %4438 = and i1 %4394, false
  %4439 = or i1 %4437, %4438
  %4440 = xor i1 %4435, true
  %4441 = and i1 %4440, true
  %4442 = and i1 %4435, false
  %4443 = or i1 %4441, %4442
  %4444 = xor i1 %4439, %4443
  %4445 = xor i1 %4394, true
  %4446 = xor i1 %4435, true
  %4447 = or i1 %4445, %4446
  %4448 = xor i1 %4447, true
  %4449 = and i1 %4448, true
  %4450 = or i1 %4444, %4449
  %4451 = select i1 %4450, i32 984876105, i32 984876150
  %4452 = xor i32 %4451, 63
  store i32 %4452, i32* %0, align 4
  %4453 = call i8** @bf3690775341412318723(i32* %0)
  %4454 = load i8*, i8** %4453, align 8
  indirectbr i8* %4454, [label %loopEnd, label %4376]

4455:                                             ; preds = %4455, %loopStart
  %4456 = mul i32 7, 41
  %4457 = sdiv i32 38, 53
  %4458 = add i32 59, 103
  %4459 = mul i32 19, 31
  %4460 = sub i32 -1136384374, -1136384371
  %4461 = add i64 %47, 1639547738724826782
  %4462 = sub i64 0, %47
  %4463 = add i64 -1639547738724826782, %4462
  %4464 = sub i64 0, %4463
  %4465 = add i64 %65, 6932092323425033465
  %4466 = sub i64 0, %65
  %4467 = add i64 -6932092323425033465, %4466
  %4468 = sub i64 0, %4467
  %4469 = and i64 %23, -8689565236638504550
  %4470 = xor i64 %23, -1
  %4471 = or i64 8689565236638504549, %4470
  %4472 = xor i64 %4471, -1
  %4473 = and i64 %4472, -1
  %4474 = xor i64 %4461, %4473
  %4475 = xor i64 %4474, %4464
  %4476 = xor i64 %4475, 5995284158761077687
  %4477 = xor i64 %4476, %4465
  %4478 = xor i64 %4477, %4469
  %4479 = xor i64 %4478, %4468
  %4480 = add i64 %57, 1810237763059205929
  %4481 = add i64 -5914543882015426500, %57
  %4482 = sub i64 %4481, -7724781645074632429
  %4483 = and i64 %138, 1917091395412597157
  %4484 = xor i64 %138, -1
  %4485 = or i64 -1917091395412597158, %4484
  %4486 = xor i64 %4485, -1
  %4487 = and i64 %4486, -1
  %4488 = xor i64 %4480, %4483
  %4489 = xor i64 %4488, %4487
  %4490 = xor i64 %4489, %4482
  %4491 = xor i64 %4490, 6613839230366482137
  %4492 = mul i64 %4479, %4491
  %4493 = trunc i64 %4492 to i32
  %4494 = sub i32 %4493, 9
  %4495 = add i32 15, 42
  %4496 = sub i32 %4457, -799302845
  %4497 = add i32 %4496, 32
  %4498 = add i32 %4497, -799302845
  %4499 = mul i32 %4494, 63
  %4500 = mul i32 %4458, 94
  %4501 = xor i32 %4456, 5
  %4502 = and i32 %4456, 5
  %4503 = mul i32 2, %4502
  %4504 = add i32 %4501, %4503
  %4505 = add i64 %5, 2656853003973898693
  %4506 = sub i64 0, %5
  %4507 = add i64 -2656853003973898693, %4506
  %4508 = sub i64 0, %4507
  %4509 = and i64 %140, 7053919256583401985
  %4510 = xor i64 %140, -1
  %4511 = xor i64 7053919256583401985, %4510
  %4512 = and i64 %4511, 7053919256583401985
  %4513 = xor i64 %4512, %4509
  %4514 = xor i64 %4513, %4508
  %4515 = xor i64 %4514, %4505
  %4516 = xor i64 %4515, -8016883206181264849
  %4517 = or i64 %57, -7969245084248061332
  %4518 = xor i64 %57, -1
  %4519 = and i64 -7969245084248061332, %4518
  %4520 = add i64 %4519, %57
  %4521 = add i64 %134, -8723958087375084070
  %4522 = sub i64 0, %134
  %4523 = add i64 8723958087375084070, %4522
  %4524 = sub i64 0, %4523
  %4525 = xor i64 %4517, %4524
  %4526 = xor i64 %4525, 3864157993134794360
  %4527 = xor i64 %4526, %4521
  %4528 = xor i64 %4527, %4520
  %4529 = mul i64 %4516, %4528
  %4530 = trunc i64 %4529 to i32
  %4531 = sub i32 %4495, %4530
  %4532 = add i32 %4459, 15
  %4533 = mul i32 %4495, 32
  %4534 = sub i32 %4495, 85
  %4535 = mul i32 %4459, 33
  %4536 = sub i32 0, %4498
  %4537 = add i32 0, %4536
  %4538 = sub i32 0, %4537
  %4539 = add i64 %37, 6006267743667648071
  %4540 = sub i64 0, %37
  %4541 = add i64 -6006267743667648071, %4540
  %4542 = sub i64 0, %4541
  %4543 = or i64 %77, -625824537790309741
  %4544 = xor i64 %77, -1
  %4545 = and i64 %4544, -2270843013874574650
  %4546 = and i64 %77, 2270843013874574649
  %4547 = or i64 %4545, %4546
  %4548 = xor i64 1669929092593287253, %4547
  %4549 = xor i64 %77, -1
  %4550 = or i64 625824537790309740, %4549
  %4551 = xor i64 %4550, -1
  %4552 = and i64 %4551, -1
  %4553 = or i64 %4548, %4552
  %4554 = xor i64 %4543, %4553
  %4555 = xor i64 %4554, %4542
  %4556 = xor i64 %4555, %4539
  %4557 = xor i64 %4556, -6594799278285534413
  %4558 = or i64 %29, 2683449599857173888
  %4559 = xor i64 %29, -1
  %4560 = and i64 %4559, -942559540872465372
  %4561 = and i64 %29, 942559540872465371
  %4562 = or i64 %4560, %4561
  %4563 = xor i64 -2893883650904780380, %4562
  %4564 = xor i64 %29, -1
  %4565 = or i64 -2683449599857173889, %4564
  %4566 = xor i64 %4565, -1
  %4567 = and i64 %4566, -1
  %4568 = or i64 %4563, %4567
  %4569 = add i64 %97, 5258409812926548691
  %4570 = sub i64 0, %97
  %4571 = add i64 -5258409812926548691, %4570
  %4572 = sub i64 0, %4571
  %4573 = add i64 %39, -8868027643421791238
  %4574 = sub i64 0, %39
  %4575 = sub i64 -8868027643421791238, %4574
  %4576 = xor i64 %4558, %4572
  %4577 = xor i64 %4576, %4573
  %4578 = xor i64 %4577, %4568
  %4579 = xor i64 %4578, %4569
  %4580 = xor i64 %4579, 4083264089750404623
  %4581 = xor i64 %4580, %4575
  %4582 = mul i64 %4557, %4581
  %4583 = trunc i64 %4582 to i32
  %4584 = sub i32 %4538, %4583
  %4585 = add i32 %4584, %4499
  %4586 = add i32 %4585, -780140035
  %4587 = add i32 %4586, %4500
  %4588 = add i32 %4587, %4504
  %4589 = add i32 %4588, %4531
  %4590 = add i32 %4589, %4532
  %4591 = add i32 %4590, -730165889
  %4592 = add i32 %4591, %4533
  %4593 = sub i32 %4592, -730165889
  %4594 = add i32 %4593, %4534
  %4595 = add i32 %4594, %4535
  %4596 = mul i32 %4595, 2
  %4597 = mul i32 %4595, 2
  %4598 = add i32 2, %4597
  %4599 = mul i32 %4596, %4598
  %4600 = srem i32 %4599, 4
  %4601 = icmp eq i32 %4600, 0
  %4602 = mul i32 %4595, %4595
  %4603 = add i32 %4602, %4595
  %4604 = srem i32 %4603, 2
  %4605 = icmp eq i32 %4604, 0
  %4606 = and i1 %4601, %4605
  %4607 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 29
  %4608 = load i32, i32* %4607, align 4
  %4609 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %4610 = load i32, i32* %4609, align 4
  %4611 = srem i32 %4608, %4610
  %4612 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 38
  %4613 = load i32, i32* %4612, align 4
  %4614 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %4615 = load i32, i32* %4614, align 4
  %4616 = srem i32 %4613, %4615
  %4617 = select i1 %4606, i32 %4611, i32 %4616
  store i32 %4617, i32* %dispatcher, align 4
  %4618 = load i8*, i8** %36, align 8
  %4619 = load i8, i8* %4618, align 1
  %4620 = mul i8 %4619, %4619
  %4621 = add i8 %4620, %4619
  %4622 = mul i8 %4621, 3
  %4623 = srem i8 %4622, 2
  %4624 = icmp eq i8 %4623, 0
  %4625 = mul i8 %4619, %4619
  %4626 = add i8 %4625, %4619
  %4627 = srem i8 %4626, 2
  %4628 = icmp eq i8 %4627, 0
  %4629 = and i1 %4624, %4628
  %4630 = select i1 %4629, i32 984876102, i32 984876150
  %4631 = xor i32 %4630, 48
  store i32 %4631, i32* %0, align 4
  %4632 = call i8** @bf3690775341412318723(i32* %0)
  %4633 = load i8*, i8** %4632, align 8
  indirectbr i8* %4633, [label %loopEnd, label %4455]

codeRepl12:                                       ; preds = %codeRepl12, %loopStart
  store i64 4070807658626890142, i64* %101, align 8
  %4634 = call i8** @lk1336881106680510526(i64* %101)
  %4635 = load i8*, i8** %4634, align 8
  %4636 = bitcast i8* %4635 to void (i32*, [51 x i32]*, i32*)*
  call void %4636(i32* %.reg2mem100, [51 x i32]* %lookupTable, i32* %dispatcher)
  %4637 = load i8*, i8** %64, align 8
  %4638 = load i8, i8* %4637, align 1
  %4639 = mul i8 %4638, %4638
  %4640 = sub i8 0, %4638
  %4641 = sub i8 %4639, %4640
  %4642 = mul i8 %4641, 3
  %4643 = srem i8 %4642, 2
  %4644 = icmp eq i8 %4643, 0
  %4645 = mul i8 %4638, %4638
  %4646 = add i8 %4645, %4638
  %4647 = srem i8 %4646, 2
  %4648 = icmp eq i8 %4647, 0
  %4649 = and i1 %4644, %4648
  %4650 = select i1 %4649, i32 984876156, i32 984876150
  %4651 = xor i32 %4650, -1
  %4652 = and i32 %4651, 10
  %4653 = and i32 %4650, -11
  %4654 = or i32 %4652, %4653
  store i32 %4654, i32* %0, align 4
  %4655 = call i8** @bf3690775341412318723(i32* %0)
  %4656 = load i8*, i8** %4655, align 8
  indirectbr i8* %4656, [label %loopEnd, label %codeRepl12]

4657:                                             ; preds = %4657, %loopStart
  %.reload97 = load i32, i32* %.reg2mem96, align 4
  %4658 = add i64 %27, -3232637524210945296
  %4659 = and i64 -3232637524210945296, %27
  %4660 = or i64 -3232637524210945296, %27
  %4661 = add i64 %4659, %4660
  %4662 = or i64 %116, -1211357760961436755
  %4663 = and i64 -1211357760961436755, %116
  %4664 = xor i64 -1211357760961436755, %116
  %4665 = or i64 %4663, %4664
  %4666 = or i64 %83, -1611732805299597825
  %4667 = and i64 -1611732805299597825, %83
  %4668 = xor i64 -1611732805299597825, %83
  %4669 = or i64 %4667, %4668
  %4670 = xor i64 %4666, %4661
  %4671 = xor i64 %4670, %4658
  %4672 = xor i64 %4671, -6833052876103441053
  %4673 = xor i64 %4672, %4662
  %4674 = xor i64 %4673, %4665
  %4675 = xor i64 %4674, %4669
  %4676 = and i64 %112, -9123715169935713076
  %4677 = xor i64 %112, -1
  %4678 = xor i64 -9123715169935713076, %4677
  %4679 = and i64 %4678, -9123715169935713076
  %4680 = or i64 %85, -4976232084557899389
  %4681 = xor i64 %85, -1
  %4682 = and i64 -4976232084557899389, %4681
  %4683 = add i64 %4682, %85
  %4684 = xor i64 %4676, %4679
  %4685 = xor i64 %4684, %4680
  %4686 = xor i64 %4685, %4683
  %4687 = xor i64 %4686, 689537124637345942
  %4688 = mul i64 %4675, %4687
  %4689 = trunc i64 %4688 to i32
  %4690 = srem i32 %.reload97, %4689
  %4691 = icmp eq i32 %4690, 0
  %4692 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 23
  %4693 = load i32, i32* %4692, align 4
  %4694 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 21
  %4695 = load i32, i32* %4694, align 4
  %4696 = add i32 %4693, %4695
  %4697 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 45
  %4698 = load i32, i32* %4697, align 4
  %4699 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 3
  %4700 = load i32, i32* %4699, align 4
  %4701 = sub i32 %4698, %4700
  %4702 = select i1 %4691, i32 %4696, i32 %4701
  store i32 %4702, i32* %dispatcher, align 4
  %4703 = load i8*, i8** %28, align 8
  %4704 = load i8, i8* %4703, align 1
  %4705 = mul i8 %4704, %4704
  %4706 = add i8 %4705, %4704
  %4707 = mul i8 %4706, 3
  %4708 = srem i8 %4707, 2
  %4709 = icmp eq i8 %4708, 0
  %4710 = mul i8 %4704, %4704
  %4711 = add i8 %4710, %4704
  %4712 = srem i8 %4711, 2
  %4713 = icmp eq i8 %4712, 0
  %4714 = and i64 %95, 2004832876961027774
  %4715 = xor i64 %95, -1
  %4716 = xor i64 2004832876961027774, %4715
  %4717 = and i64 %4716, 2004832876961027774
  %4718 = add i64 %132, 3699100124865089966
  %4719 = add i64 128128121974830547, %132
  %4720 = sub i64 %4719, -3570972002890259419
  %4721 = xor i64 %4718, %4720
  %4722 = xor i64 %4721, %4714
  %4723 = xor i64 %4722, 7308126286266181659
  %4724 = xor i64 %4723, %4717
  %4725 = and i64 %29, 372197076206937837
  %4726 = xor i64 %29, -1
  %4727 = xor i64 372197076206937837, %4726
  %4728 = and i64 %4727, 372197076206937837
  %4729 = and i64 %37, -8310407495432047533
  %4730 = xor i64 %37, -1
  %4731 = or i64 8310407495432047532, %4730
  %4732 = xor i64 %4731, -1
  %4733 = and i64 %4732, -1
  %4734 = add i64 %89, 7304222759542291385
  %4735 = add i64 4108741459515036510, %89
  %4736 = add i64 %4735, 3195481300027254875
  %4737 = xor i64 %4728, %4734
  %4738 = xor i64 %4737, %4729
  %4739 = xor i64 %4738, -1196243094295252461
  %4740 = xor i64 %4739, %4725
  %4741 = xor i64 %4740, %4736
  %4742 = xor i64 %4741, %4733
  %4743 = mul i64 %4724, %4742
  %4744 = trunc i64 %4743 to i1
  %4745 = xor i1 %4709, %4744
  %4746 = or i1 %4745, %4713
  %4747 = xor i1 %4709, true
  %4748 = sub i1 %4746, %4747
  %4749 = select i1 %4748, i32 984876144, i32 984876150
  %4750 = xor i32 %4749, -1133076611
  %4751 = xor i32 %4750, -1133076613
  store i32 %4751, i32* %0, align 4
  %4752 = call i8** @bf3690775341412318723(i32* %0)
  %4753 = load i8*, i8** %4752, align 8
  indirectbr i8* %4753, [label %loopEnd, label %4657]

4754:                                             ; preds = %4754, %loopStart
  %4755 = sdiv i64 81, 61
  %.reload15 = load i8*, i8** %.reg2mem12, align 8
  %.reload32 = load float*, float** %.reg2mem29, align 8
  store i64 4070807658626890117, i64* %101, align 8
  %4756 = call i8** @lk1336881106680510526(i64* %101)
  %4757 = load i8*, i8** %4756, align 8
  %4758 = bitcast i8* %4757 to i32 (float*, float*, i8*, float*)*
  %4759 = call i32 %4758(float* %195, float* %196, i8* %.reload15, float* %.reload32)
  store i32 %4759, i32* %.reg2mem114, align 4
  %.reload101 = load i32, i32* %.reg2mem100, align 4
  %4760 = srem i32 %.reload101, 2
  %4761 = icmp eq i32 %4760, 0
  %.reload94 = load i32, i32* %.reg2mem91, align 4
  %4762 = and i32 %.reload94, 1
  %4763 = or i64 %53, -1612047718984320984
  %4764 = xor i64 %53, -1
  %4765 = and i64 %4764, 2298374397111871833
  %4766 = and i64 %53, -2298374397111871834
  %4767 = or i64 %4765, %4766
  %4768 = xor i64 -700964545249586831, %4767
  %4769 = xor i64 %53, -1
  %4770 = or i64 1612047718984320983, %4769
  %4771 = xor i64 %4770, -1
  %4772 = and i64 %4771, -1
  %4773 = or i64 %4768, %4772
  %4774 = or i64 %61, 1469681835903316118
  %4775 = xor i64 %61, -1
  %4776 = and i64 %4775, 76604780742886150
  %4777 = and i64 %61, -76604780742886151
  %4778 = or i64 %4776, %4777
  %4779 = xor i64 1546278883548640144, %4778
  %4780 = xor i64 %61, -1
  %4781 = or i64 -1469681835903316119, %4780
  %4782 = xor i64 %4781, -1
  %4783 = and i64 %4782, -1
  %4784 = or i64 %4779, %4783
  %4785 = xor i64 5851488031584419261, %4763
  %4786 = xor i64 %4785, %4784
  %4787 = xor i64 %4786, %4774
  %4788 = xor i64 %4787, %4773
  %4789 = and i64 %13, 1046726621886411425
  %4790 = xor i64 %13, -1
  %4791 = or i64 -1046726621886411426, %4790
  %4792 = xor i64 %4791, -1
  %4793 = and i64 %4792, -1
  %4794 = add i64 %57, 5747409034271902015
  %4795 = sub i64 0, %57
  %4796 = sub i64 5747409034271902015, %4795
  %4797 = xor i64 %4793, %4794
  %4798 = xor i64 %4797, %4789
  %4799 = xor i64 %4798, %4796
  %4800 = xor i64 %4799, 6400343544078214549
  %4801 = mul i64 %4788, %4800
  %4802 = trunc i64 %4801 to i32
  %4803 = icmp eq i32 %4762, %4802
  %.reload93 = load i32, i32* %.reg2mem91, align 4
  %4804 = mul i32 %.reload93, %.reload93
  %.reload92 = load i32, i32* %.reg2mem91, align 4
  %4805 = add i32 %4804, %.reload92
  %4806 = srem i32 %4805, 2
  %4807 = icmp eq i32 %4806, 0
  %4808 = or i1 %4803, %4807
  store i1 %4808, i1* %.reg2mem118, align 1
  %4809 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 24
  %4810 = load i32, i32* %4809, align 4
  %4811 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 22
  %4812 = load i32, i32* %4811, align 4
  %4813 = and i32 %4810, %4812
  %4814 = or i32 %4810, %4812
  %4815 = add i32 %4813, %4814
  %4816 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 39
  %4817 = load i32, i32* %4816, align 4
  %4818 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %4819 = load i32, i32* %4818, align 4
  %4820 = sub i32 %4817, %4819
  %.reload120 = load i1, i1* %.reg2mem118, align 1
  %4821 = select i1 %.reload120, i32 %4815, i32 %4820
  store i32 %4821, i32* %dispatcher, align 4
  %4822 = load i8*, i8** %16, align 8
  %4823 = load i8, i8* %4822, align 1
  %4824 = and i8 %4823, 1
  %4825 = icmp eq i8 %4824, 1
  %4826 = mul i8 %4823, %4823
  %4827 = add i8 %4826, %4823
  %4828 = srem i8 %4827, 2
  %4829 = icmp eq i8 %4828, 0
  %4830 = or i1 %4825, %4829
  %4831 = select i1 %4830, i32 984876155, i32 984876150
  %4832 = xor i32 %4831, -1
  %4833 = add i64 %136, -3319438631544815597
  %4834 = add i64 190636483709436831, %136
  %4835 = sub i64 %4834, 3510075115254252428
  %4836 = and i64 %112, -112972765205067687
  %4837 = or i64 112972765205067686, %112
  %4838 = sub i64 %4837, 112972765205067686
  %4839 = and i64 %31, 5946933904470939058
  %4840 = xor i64 %31, -1
  %4841 = or i64 -5946933904470939059, %4840
  %4842 = xor i64 %4841, -1
  %4843 = and i64 %4842, -1
  %4844 = xor i64 %4836, %4835
  %4845 = xor i64 %4844, %4839
  %4846 = xor i64 %4845, %4838
  %4847 = xor i64 %4846, -1223610062910253885
  %4848 = xor i64 %4847, %4843
  %4849 = xor i64 %4848, %4833
  %4850 = add i64 %43, 3306192719445415465
  %4851 = sub i64 0, %43
  %4852 = sub i64 3306192719445415465, %4851
  %4853 = or i64 %35, 5612589201134727032
  %4854 = and i64 5612589201134727032, %35
  %4855 = xor i64 5612589201134727032, %35
  %4856 = or i64 %4854, %4855
  %4857 = and i64 %79, -8347324472582920984
  %4858 = xor i64 %79, -1
  %4859 = xor i64 -8347324472582920984, %4858
  %4860 = and i64 %4859, -8347324472582920984
  %4861 = xor i64 %4860, -5584386903187851888
  %4862 = xor i64 %4861, %4852
  %4863 = xor i64 %4862, %4857
  %4864 = xor i64 %4863, %4856
  %4865 = xor i64 %4864, %4853
  %4866 = xor i64 %4865, %4850
  %4867 = mul i64 %4849, %4866
  %4868 = trunc i64 %4867 to i32
  %4869 = and i32 %4832, %4868
  %4870 = and i32 %4831, 795456335
  %4871 = or i32 %4869, %4870
  %4872 = and i64 %31, -2499495988700898552
  %4873 = xor i64 %31, -1
  %4874 = or i64 2499495988700898551, %4873
  %4875 = xor i64 %4874, -1
  %4876 = and i64 %4875, -1
  %4877 = add i64 %45, -6801887370016383841
  %4878 = add i64 -5910553071651453517, %45
  %4879 = sub i64 %4878, 891334298364930324
  %4880 = xor i64 %4879, %4872
  %4881 = xor i64 %4880, 3018195955475479279
  %4882 = xor i64 %4881, %4876
  %4883 = xor i64 %4882, %4877
  %4884 = or i64 %128, 6039897320484861931
  %4885 = xor i64 %128, -1
  %4886 = and i64 6039897320484861931, %4885
  %4887 = add i64 %4886, %128
  %4888 = add i64 %134, 7209652929687233765
  %4889 = add i64 -4085430293886902117, %134
  %4890 = sub i64 %4889, 7151660850135415734
  %4891 = xor i64 %4888, %4890
  %4892 = xor i64 %4891, %4884
  %4893 = xor i64 %4892, %4887
  %4894 = xor i64 %4893, 1895806514552185619
  %4895 = mul i64 %4883, %4894
  %4896 = trunc i64 %4895 to i32
  %4897 = xor i32 %4871, %4896
  store i32 %4897, i32* %0, align 4
  %4898 = call i8** @bf3690775341412318723(i32* %0)
  %4899 = load i8*, i8** %4898, align 8
  indirectbr i8* %4899, [label %loopEnd, label %4754]

codeRepl13:                                       ; preds = %codeRepl13, %loopStart
  store i64 4070807658626890139, i64* %101, align 8
  %4900 = call i8** @lk1336881106680510526(i64* %101)
  %4901 = load i8*, i8** %4900, align 8
  %4902 = bitcast i8* %4901 to void (i32*, [51 x i32]*, i1*, i32*, i1*)*
  call void %4902(i32* %.reg2mem114, [51 x i32]* %lookupTable, i1* %.reg2mem118, i32* %dispatcher, i1* %.reg2mem125)
  %4903 = load i8*, i8** %54, align 8
  %4904 = load i8, i8* %4903, align 1
  %4905 = and i8 %4904, 1
  %4906 = icmp eq i8 %4905, 0
  %4907 = mul i8 %4904, %4904
  %4908 = add i8 %4907, %4904
  %4909 = mul i8 %4908, 3
  %4910 = srem i8 %4909, 2
  %4911 = icmp eq i8 %4910, 0
  %4912 = or i1 %4906, %4911
  %4913 = sext i32 %206 to i64
  %4914 = and i64 %4913, -7161481119512052233
  %4915 = or i64 7161481119512052232, %4913
  %4916 = sub i64 %4915, 7161481119512052232
  %4917 = or i64 %116, 6107129741088397766
  %4918 = xor i64 %116, -1
  %4919 = and i64 6107129741088397766, %4918
  %4920 = add i64 %4919, %116
  %4921 = or i64 %27, -6287612516043822881
  %4922 = xor i64 %27, -1
  %4923 = and i64 %4922, -6228745771845599962
  %4924 = and i64 %27, 6228745771845599961
  %4925 = or i64 %4923, %4924
  %4926 = xor i64 86383140146599417, %4925
  %4927 = xor i64 %27, -1
  %4928 = or i64 6287612516043822880, %4927
  %4929 = xor i64 %4928, -1
  %4930 = and i64 %4929, -1
  %4931 = or i64 %4926, %4930
  %4932 = xor i64 %4916, %4920
  %4933 = xor i64 %4932, %4921
  %4934 = xor i64 %4933, -5342707567911139809
  %4935 = xor i64 %4934, %4931
  %4936 = xor i64 %4935, %4914
  %4937 = xor i64 %4936, %4917
  %4938 = and i64 %47, -1349681278906126803
  %4939 = or i64 1349681278906126802, %47
  %4940 = sub i64 %4939, 1349681278906126802
  %4941 = add i64 %108, -1636955367541920282
  %4942 = add i64 -9142012649856352107, %108
  %4943 = add i64 %4942, 7505057282314431825
  %4944 = add i64 %142, -3508477263311249973
  %4945 = and i64 -3508477263311249973, %142
  %4946 = or i64 -3508477263311249973, %142
  %4947 = add i64 %4945, %4946
  %4948 = xor i64 %4944, 3050268578699440858
  %4949 = xor i64 %4948, %4940
  %4950 = xor i64 %4949, %4938
  %4951 = xor i64 %4950, %4947
  %4952 = xor i64 %4951, %4941
  %4953 = xor i64 %4952, %4943
  %4954 = mul i64 %4937, %4953
  %4955 = trunc i64 %4954 to i32
  %4956 = select i1 %4912, i32 %4955, i32 984876150
  %4957 = xor i32 %4956, 660519045
  %4958 = xor i32 %4957, 660519061
  store i32 %4958, i32* %0, align 4
  %4959 = call i8** @bf3690775341412318723(i32* %0)
  %4960 = load i8*, i8** %4959, align 8
  indirectbr i8* %4960, [label %loopEnd, label %codeRepl13]

4961:                                             ; preds = %4961, %loopStart
  %4962 = add i64 68, -109
  %.reload116 = load i32, i32* %.reg2mem114, align 4
  %4963 = icmp eq i32 %.reload116, 0
  %4964 = sub i64 41, 26
  %4965 = mul i64 72, 124
  %4966 = sdiv i64 66, 52
  %4967 = sdiv i64 112, 84
  %4968 = add i64 8, 50
  %4969 = sdiv i64 37, 116
  %4970 = sdiv i64 88, 106
  %4971 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 44
  %4972 = load i32, i32* %4971, align 4
  %4973 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %4974 = load i32, i32* %4973, align 4
  %4975 = srem i32 %4972, %4974
  store i32 %4975, i32* %dispatcher, align 4
  store i1 %4963, i1* %.reg2mem125, align 1
  %4976 = load i8*, i8** %44, align 8
  %4977 = load i8, i8* %4976, align 1
  %4978 = mul i8 %4977, 2
  %4979 = mul i8 %4977, 2
  %4980 = add i64 %87, 4211533443556204
  %4981 = and i64 4211533443556204, %87
  %4982 = or i64 4211533443556204, %87
  %4983 = add i64 %4981, %4982
  %4984 = and i64 %130, -8701896697350901904
  %4985 = xor i64 %130, -1
  %4986 = xor i64 -8701896697350901904, %4985
  %4987 = and i64 %4986, -8701896697350901904
  %4988 = or i64 %51, -6669300672681908792
  %4989 = and i64 -6669300672681908792, %51
  %4990 = xor i64 -6669300672681908792, %51
  %4991 = or i64 %4989, %4990
  %4992 = xor i64 %4988, %4984
  %4993 = xor i64 %4992, %4980
  %4994 = xor i64 %4993, %4987
  %4995 = xor i64 %4994, %4991
  %4996 = xor i64 %4995, %4983
  %4997 = xor i64 %4996, 1741719845230251137
  %4998 = and i64 %79, 4305877273600640169
  %4999 = xor i64 %79, -1
  %5000 = or i64 -4305877273600640170, %4999
  %5001 = xor i64 %5000, -1
  %5002 = and i64 %5001, -1
  %5003 = add i64 %7, 3358149122678555955
  %5004 = and i64 3358149122678555955, %7
  %5005 = or i64 3358149122678555955, %7
  %5006 = add i64 %5004, %5005
  %5007 = or i64 %110, -1678157095084558297
  %5008 = and i64 -1678157095084558297, %110
  %5009 = xor i64 -1678157095084558297, %110
  %5010 = or i64 %5008, %5009
  %5011 = xor i64 %4998, %5003
  %5012 = xor i64 %5011, %5002
  %5013 = xor i64 %5012, %5006
  %5014 = xor i64 %5013, -4541155091247382226
  %5015 = xor i64 %5014, %5007
  %5016 = xor i64 %5015, %5010
  %5017 = mul i64 %4997, %5016
  %5018 = trunc i64 %5017 to i8
  %5019 = add i8 %5018, %4979
  %5020 = add i8 %5019, -44
  %5021 = mul i8 %4978, %5020
  %5022 = srem i8 %5021, 4
  %5023 = icmp eq i8 %5022, 0
  %5024 = mul i8 %4977, %4977
  %5025 = xor i8 %5024, %4977
  %5026 = and i8 %5024, %4977
  %5027 = mul i8 2, %5026
  %5028 = add i8 %5025, %5027
  %5029 = srem i8 %5028, 2
  %5030 = icmp eq i8 %5029, 0
  %5031 = and i1 %5023, %5030
  %5032 = and i64 %1, 548438386886319545
  %5033 = xor i64 %1, -1
  %5034 = or i64 -548438386886319546, %5033
  %5035 = xor i64 %5034, -1
  %5036 = and i64 %5035, -1
  %5037 = or i64 %102, -856149941335929967
  %5038 = xor i64 %102, -1
  %5039 = and i64 %5038, 4683242473327629228
  %5040 = and i64 %102, -4683242473327629229
  %5041 = or i64 %5039, %5040
  %5042 = xor i64 -5413221072625182659, %5041
  %5043 = xor i64 %102, -1
  %5044 = or i64 856149941335929966, %5043
  %5045 = xor i64 %5044, -1
  %5046 = and i64 %5045, -1
  %5047 = or i64 %5042, %5046
  %5048 = xor i64 7591462116746458157, %5047
  %5049 = xor i64 %5048, %5036
  %5050 = xor i64 %5049, %5032
  %5051 = xor i64 %5050, %5037
  %5052 = add i64 %43, 7617942864889843586
  %5053 = sub i64 0, %43
  %5054 = add i64 -7617942864889843586, %5053
  %5055 = sub i64 0, %5054
  %5056 = and i64 %49, -8475494167719060221
  %5057 = or i64 8475494167719060220, %49
  %5058 = sub i64 %5057, 8475494167719060220
  %5059 = add i64 %102, 6914887075358051838
  %5060 = xor i64 6914887075358051838, %102
  %5061 = and i64 6914887075358051838, %102
  %5062 = mul i64 2, %5061
  %5063 = add i64 %5060, %5062
  %5064 = xor i64 %5052, %5058
  %5065 = xor i64 %5064, %5063
  %5066 = xor i64 %5065, %5055
  %5067 = xor i64 %5066, 8706907410902782478
  %5068 = xor i64 %5067, %5056
  %5069 = xor i64 %5068, %5059
  %5070 = mul i64 %5051, %5069
  %5071 = trunc i64 %5070 to i32
  %5072 = select i1 %5031, i32 984876099, i32 %5071
  %5073 = xor i32 %5072, 53
  store i32 %5073, i32* %0, align 4
  %5074 = call i8** @bf3690775341412318723(i32* %0)
  %5075 = load i8*, i8** %5074, align 8
  indirectbr i8* %5075, [label %loopEnd, label %4961]

5076:                                             ; preds = %5076, %loopStart
  %.reload126 = load i1, i1* %.reg2mem125, align 1
  %5077 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 46
  %5078 = load i32, i32* %5077, align 4
  %5079 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %5080 = load i32, i32* %5079, align 4
  %5081 = srem i32 %5078, %5080
  store i32 %5081, i32* %dispatcher, align 4
  %.reload115 = load i32, i32* %.reg2mem114, align 4
  store i32 %.reload115, i32* %.reg2mem127, align 4
  store i1 %.reload126, i1* %.reg2mem129, align 1
  %5082 = load i8*, i8** %76, align 8
  %5083 = load i8, i8* %5082, align 1
  %5084 = or i64 %126, -6751261806380109271
  %5085 = xor i64 %126, -1
  %5086 = and i64 -6751261806380109271, %5085
  %5087 = add i64 %5086, %126
  %5088 = add i64 %91, 746543035056736724
  %5089 = sub i64 0, %91
  %5090 = add i64 -746543035056736724, %5089
  %5091 = sub i64 0, %5090
  %5092 = xor i64 3328788208442071769, %5084
  %5093 = xor i64 %5092, %5088
  %5094 = xor i64 %5093, %5087
  %5095 = xor i64 %5094, %5091
  %5096 = add i64 %37, -3032029270729726616
  %5097 = sub i64 0, %37
  %5098 = add i64 3032029270729726616, %5097
  %5099 = sub i64 0, %5098
  %5100 = add i64 %5, -6863301509744841792
  %5101 = sub i64 0, %5
  %5102 = add i64 6863301509744841792, %5101
  %5103 = sub i64 0, %5102
  %5104 = and i64 %51, -3484744788810320610
  %5105 = or i64 3484744788810320609, %51
  %5106 = sub i64 %5105, 3484744788810320609
  %5107 = xor i64 %5100, 4136121784427480425
  %5108 = xor i64 %5107, %5104
  %5109 = xor i64 %5108, %5106
  %5110 = xor i64 %5109, %5096
  %5111 = xor i64 %5110, %5099
  %5112 = xor i64 %5111, %5103
  %5113 = mul i64 %5095, %5112
  %5114 = trunc i64 %5113 to i8
  %5115 = and i8 %5083, %5114
  %5116 = icmp eq i8 %5115, 0
  %5117 = mul i8 %5083, %5083
  %5118 = add i8 %5117, %5083
  %5119 = mul i8 %5118, 3
  %5120 = srem i8 %5119, 2
  %5121 = icmp eq i8 %5120, 0
  %5122 = xor i1 %5116, true
  %5123 = and i1 %5122, false
  %5124 = and i1 %5116, true
  %5125 = or i1 %5123, %5124
  %5126 = xor i1 %5121, true
  %5127 = and i1 %5126, false
  %5128 = and i64 %112, 257254466321039778
  %5129 = xor i64 %112, -1
  %5130 = or i64 -257254466321039779, %5129
  %5131 = xor i64 %5130, -1
  %5132 = and i64 %5131, -1
  %5133 = and i64 %77, 5950595370897275661
  %5134 = xor i64 %77, -1
  %5135 = or i64 -5950595370897275662, %5134
  %5136 = xor i64 %5135, -1
  %5137 = and i64 %5136, -1
  %5138 = or i64 %138, 4927497548787762343
  %5139 = and i64 4927497548787762343, %138
  %5140 = xor i64 4927497548787762343, %138
  %5141 = or i64 %5139, %5140
  %5142 = xor i64 -5139824452393858855, %5132
  %5143 = xor i64 %5142, %5137
  %5144 = xor i64 %5143, %5141
  %5145 = xor i64 %5144, %5133
  %5146 = xor i64 %5145, %5128
  %5147 = xor i64 %5146, %5138
  %5148 = and i64 %61, -7478938021595250703
  %5149 = xor i64 %61, -1
  %5150 = or i64 7478938021595250702, %5149
  %5151 = xor i64 %5150, -1
  %5152 = and i64 %5151, -1
  %5153 = or i64 %45, -6218363161280869848
  %5154 = xor i64 %45, -1
  %5155 = and i64 %5154, -2251889642735312464
  %5156 = and i64 %45, 2251889642735312463
  %5157 = or i64 %5155, %5156
  %5158 = xor i64 5263654544815680408, %5157
  %5159 = xor i64 %45, -1
  %5160 = or i64 6218363161280869847, %5159
  %5161 = xor i64 %5160, -1
  %5162 = and i64 %5161, -1
  %5163 = or i64 %5158, %5162
  %5164 = xor i64 %5148, %5153
  %5165 = xor i64 %5164, %5152
  %5166 = xor i64 %5165, %5163
  %5167 = xor i64 %5166, -2203956728283695255
  %5168 = mul i64 %5147, %5167
  %5169 = trunc i64 %5168 to i1
  %5170 = and i1 %5121, %5169
  %5171 = or i1 %5127, %5170
  %5172 = xor i1 %5125, %5171
  %5173 = xor i1 %5116, true
  %5174 = xor i1 %5121, true
  %5175 = or i1 %5173, %5174
  %5176 = xor i1 %5175, true
  %5177 = and i1 %5176, true
  %5178 = or i1 %5172, %5177
  %5179 = select i1 %5178, i32 984876100, i32 984876150
  %5180 = xor i32 %5179, 50
  store i32 %5180, i32* %0, align 4
  %5181 = call i8** @bf3690775341412318723(i32* %0)
  %5182 = load i8*, i8** %5181, align 8
  indirectbr i8* %5182, [label %loopEnd, label %5076]

5183:                                             ; preds = %5183, %loopStart
  %.reload14 = load i8*, i8** %.reg2mem12, align 8
  %.reload31 = load float*, float** %.reg2mem29, align 8
  store i64 4070807658626890116, i64* %101, align 8
  %5184 = call i8** @lk1336881106680510526(i64* %101)
  %5185 = load i8*, i8** %5184, align 8
  %5186 = bitcast i8* %5185 to i32 (float*, float*, i8*, float*)*
  %5187 = call i32 %5186(float* %195, float* %196, i8* %.reload14, float* %.reload31)
  %5188 = icmp eq i32 %5187, 0
  %5189 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 25
  %5190 = load i32, i32* %5189, align 4
  %5191 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 24
  %5192 = load i32, i32* %5191, align 4
  %5193 = add i32 %5190, %5192
  store i32 %5193, i32* %dispatcher, align 4
  store i32 %5187, i32* %.reg2mem127, align 4
  store i1 %5188, i1* %.reg2mem129, align 1
  %5194 = load i8*, i8** %24, align 8
  %5195 = load i8, i8* %5194, align 1
  %5196 = mul i8 %5195, 2
  %5197 = mul i8 %5195, 2
  %5198 = add i8 2, %5197
  %5199 = mul i8 %5196, %5198
  %5200 = srem i8 %5199, 4
  %5201 = icmp eq i8 %5200, 0
  %5202 = mul i8 %5195, %5195
  %5203 = add i8 %5202, %5195
  %5204 = srem i8 %5203, 2
  %5205 = add i64 %95, 3176042081628861511
  %5206 = sub i64 0, %95
  %5207 = add i64 -3176042081628861511, %5206
  %5208 = sub i64 0, %5207
  %5209 = add i64 %114, 6643630088402736013
  %5210 = sub i64 0, %114
  %5211 = add i64 -6643630088402736013, %5210
  %5212 = sub i64 0, %5211
  %5213 = and i64 %49, 736481569347779961
  %5214 = or i64 -736481569347779962, %49
  %5215 = sub i64 %5214, -736481569347779962
  %5216 = xor i64 %5212, %5215
  %5217 = xor i64 %5216, 7223612222624511773
  %5218 = xor i64 %5217, %5208
  %5219 = xor i64 %5218, %5213
  %5220 = xor i64 %5219, %5205
  %5221 = xor i64 %5220, %5209
  %5222 = or i64 %7, 3968095554053944204
  %5223 = xor i64 %7, -1
  %5224 = and i64 %5223, -4801696772112162550
  %5225 = and i64 %7, 4801696772112162549
  %5226 = or i64 %5224, %5225
  %5227 = xor i64 -8480995151631854970, %5226
  %5228 = xor i64 %7, -1
  %5229 = or i64 -3968095554053944205, %5228
  %5230 = xor i64 %5229, -1
  %5231 = and i64 %5230, -1
  %5232 = or i64 %5227, %5231
  %5233 = and i64 %73, 1326355085675834669
  %5234 = xor i64 %73, -1
  %5235 = or i64 -1326355085675834670, %5234
  %5236 = xor i64 %5235, -1
  %5237 = and i64 %5236, -1
  %5238 = xor i64 %5237, %5222
  %5239 = xor i64 %5238, %5233
  %5240 = xor i64 %5239, %5232
  %5241 = xor i64 %5240, 0
  %5242 = mul i64 %5221, %5241
  %5243 = trunc i64 %5242 to i8
  %5244 = icmp eq i8 %5204, %5243
  %5245 = xor i1 %5201, true
  %5246 = add i64 %142, -4292747323711557453
  %5247 = add i64 4748109447495747091, %142
  %5248 = add i64 %5247, -9040856771207304544
  %5249 = or i64 %35, -2649443058922416694
  %5250 = xor i64 %35, -1
  %5251 = and i64 -2649443058922416694, %5250
  %5252 = add i64 %5251, %35
  %5253 = xor i64 %5248, 7042705290816776641
  %5254 = xor i64 %5253, %5246
  %5255 = xor i64 %5254, %5252
  %5256 = xor i64 %5255, %5249
  %5257 = or i64 %49, 7995086396024359987
  %5258 = xor i64 %49, -1
  %5259 = and i64 7995086396024359987, %5258
  %5260 = add i64 %5259, %49
  %5261 = add i64 %31, 8177639089267478925
  %5262 = xor i64 8177639089267478925, %31
  %5263 = and i64 8177639089267478925, %31
  %5264 = mul i64 2, %5263
  %5265 = add i64 %5262, %5264
  %5266 = xor i64 %5261, %5265
  %5267 = xor i64 %5266, %5257
  %5268 = xor i64 %5267, -4341405723076516287
  %5269 = xor i64 %5268, %5260
  %5270 = mul i64 %5256, %5269
  %5271 = trunc i64 %5270 to i1
  %5272 = and i1 %5245, %5271
  %5273 = and i1 %5201, false
  %5274 = or i1 %5272, %5273
  %5275 = xor i1 %5244, true
  %5276 = and i1 %5275, true
  %5277 = and i1 %5244, false
  %5278 = or i1 %5276, %5277
  %5279 = xor i1 %5274, %5278
  %5280 = xor i1 %5201, true
  %5281 = xor i1 %5244, true
  %5282 = or i1 %5280, %5281
  %5283 = xor i1 %5282, true
  %5284 = and i1 %5283, true
  %5285 = or i1 %5279, %5284
  %5286 = add i64 %97, 7363479041606966501
  %5287 = xor i64 7363479041606966501, %97
  %5288 = and i64 7363479041606966501, %97
  %5289 = mul i64 2, %5288
  %5290 = add i64 %5287, %5289
  %5291 = or i64 %27, 5175072029581998323
  %5292 = xor i64 %27, -1
  %5293 = and i64 5175072029581998323, %5292
  %5294 = add i64 %5293, %27
  %5295 = and i64 %87, -1801407633584442671
  %5296 = xor i64 %87, -1
  %5297 = xor i64 -1801407633584442671, %5296
  %5298 = and i64 %5297, -1801407633584442671
  %5299 = xor i64 %5290, %5294
  %5300 = xor i64 %5299, -1979709573996792035
  %5301 = xor i64 %5300, %5295
  %5302 = xor i64 %5301, %5291
  %5303 = xor i64 %5302, %5286
  %5304 = xor i64 %5303, %5298
  %5305 = add i64 %31, 3603609759637303386
  %5306 = add i64 -1062985029936122031, %31
  %5307 = add i64 %5306, 4666594789573425417
  %5308 = and i64 %73, -1397564677060384655
  %5309 = xor i64 %73, -1
  %5310 = xor i64 -1397564677060384655, %5309
  %5311 = and i64 %5310, -1397564677060384655
  %5312 = add i64 %25, 5365781882182224248
  %5313 = and i64 5365781882182224248, %25
  %5314 = or i64 5365781882182224248, %25
  %5315 = add i64 %5313, %5314
  %5316 = xor i64 %5315, %5308
  %5317 = xor i64 %5316, %5312
  %5318 = xor i64 %5317, -2609390765785126177
  %5319 = xor i64 %5318, %5307
  %5320 = xor i64 %5319, %5305
  %5321 = xor i64 %5320, %5311
  %5322 = mul i64 %5304, %5321
  %5323 = trunc i64 %5322 to i32
  %5324 = add i64 %61, 6164520047033683284
  %5325 = and i64 6164520047033683284, %61
  %5326 = or i64 6164520047033683284, %61
  %5327 = add i64 %5325, %5326
  %5328 = or i64 %79, -1953077546490159903
  %5329 = and i64 -1953077546490159903, %79
  %5330 = xor i64 -1953077546490159903, %79
  %5331 = or i64 %5329, %5330
  %5332 = xor i64 %5331, %5328
  %5333 = xor i64 %5332, %5327
  %5334 = xor i64 %5333, %5324
  %5335 = xor i64 %5334, 297055779562376921
  %5336 = or i64 %29, 1697087051309568288
  %5337 = xor i64 %29, -1
  %5338 = and i64 1697087051309568288, %5337
  %5339 = add i64 %5338, %29
  %5340 = or i64 %106, -3988333657594590448
  %5341 = xor i64 %106, -1
  %5342 = and i64 -3988333657594590448, %5341
  %5343 = add i64 %5342, %106
  %5344 = and i64 %110, 2887266577659767479
  %5345 = or i64 -2887266577659767480, %110
  %5346 = sub i64 %5345, -2887266577659767480
  %5347 = xor i64 %5339, %5344
  %5348 = xor i64 %5347, %5336
  %5349 = xor i64 %5348, %5343
  %5350 = xor i64 %5349, 5777602783819999846
  %5351 = xor i64 %5350, %5346
  %5352 = xor i64 %5351, %5340
  %5353 = mul i64 %5335, %5352
  %5354 = trunc i64 %5353 to i32
  %5355 = select i1 %5285, i32 %5323, i32 %5354
  %5356 = xor i32 %5355, 53
  store i32 %5356, i32* %0, align 4
  %5357 = call i8** @bf3690775341412318723(i32* %0)
  %5358 = load i8*, i8** %5357, align 8
  indirectbr i8* %5358, [label %loopEnd, label %5183]

5359:                                             ; preds = %5359, %loopStart
  %.reload130 = load i1, i1* %.reg2mem129, align 1
  %.reload128 = load i32, i32* %.reg2mem127, align 4
  %5360 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 48
  %5361 = load i32, i32* %5360, align 4
  %5362 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %5363 = load i32, i32* %5362, align 4
  %5364 = srem i32 %5361, %5363
  store i32 %5364, i32* %dispatcher, align 4
  store i32 %.reload128, i32* %.reg2mem131, align 4
  store i1 %.reload130, i1* %.reg2mem133, align 1
  %5365 = load i8*, i8** %30, align 8
  %5366 = load i8, i8* %5365, align 1
  %5367 = and i8 %5366, 1
  %5368 = icmp eq i8 %5367, 0
  %5369 = mul i8 %5366, %5366
  %5370 = add i8 %5369, %5366
  %5371 = mul i8 %5370, 3
  %5372 = srem i8 %5371, 2
  %5373 = and i64 %53, -1091886743525568425
  %5374 = or i64 1091886743525568424, %53
  %5375 = sub i64 %5374, 1091886743525568424
  %5376 = add i64 %31, -3660828569448134019
  %5377 = sub i64 0, %31
  %5378 = add i64 3660828569448134019, %5377
  %5379 = sub i64 0, %5378
  %5380 = xor i64 484023290294298555, %5379
  %5381 = xor i64 %5380, %5375
  %5382 = xor i64 %5381, %5373
  %5383 = xor i64 %5382, %5376
  %5384 = and i64 %23, -3248169812350944166
  %5385 = xor i64 %23, -1
  %5386 = xor i64 -3248169812350944166, %5385
  %5387 = and i64 %5386, -3248169812350944166
  %5388 = add i64 %53, 7186874613681494552
  %5389 = sub i64 0, %53
  %5390 = sub i64 7186874613681494552, %5389
  %5391 = and i64 %15, -1745743224815621806
  %5392 = or i64 1745743224815621805, %15
  %5393 = sub i64 %5392, 1745743224815621805
  %5394 = xor i64 %5391, %5390
  %5395 = xor i64 %5394, %5387
  %5396 = xor i64 %5395, 0
  %5397 = xor i64 %5396, %5384
  %5398 = xor i64 %5397, %5388
  %5399 = xor i64 %5398, %5393
  %5400 = mul i64 %5383, %5399
  %5401 = trunc i64 %5400 to i8
  %5402 = icmp eq i8 %5372, %5401
  %5403 = and i1 %5368, %5402
  %5404 = xor i1 %5368, %5402
  %5405 = or i1 %5403, %5404
  %5406 = select i1 %5405, i32 984876147, i32 984876150
  %5407 = xor i32 %5406, 5
  store i32 %5407, i32* %0, align 4
  %5408 = call i8** @bf3690775341412318723(i32* %0)
  %5409 = load i8*, i8** %5408, align 8
  indirectbr i8* %5409, [label %loopEnd, label %5359]

5410:                                             ; preds = %5410, %loopStart
  %.reload13 = load i8*, i8** %.reg2mem12, align 8
  %.reload30 = load float*, float** %.reg2mem29, align 8
  store i64 4070807658626890143, i64* %101, align 8
  %5411 = call i8** @lk1336881106680510526(i64* %101)
  %5412 = load i8*, i8** %5411, align 8
  %5413 = bitcast i8* %5412 to i32 (float*, float*, i8*, float*)*
  %5414 = call i32 %5413(float* %195, float* %196, i8* %.reload13, float* %.reload30)
  %5415 = or i64 %19, -5973498477654822280
  %5416 = xor i64 %19, -1
  %5417 = and i64 %5416, -8912555909304068802
  %5418 = and i64 %19, 8912555909304068801
  %5419 = or i64 %5417, %5418
  %5420 = xor i64 2975158994275100486, %5419
  %5421 = xor i64 %19, -1
  %5422 = or i64 5973498477654822279, %5421
  %5423 = xor i64 %5422, -1
  %5424 = and i64 %5423, -1
  %5425 = or i64 %5420, %5424
  %5426 = add i64 %41, 7420763551664689238
  %5427 = add i64 -3518235510088231060, %41
  %5428 = sub i64 %5427, 7507745011956631318
  %5429 = xor i64 %5415, %5426
  %5430 = xor i64 %5429, %5425
  %5431 = xor i64 %5430, 224818812334634497
  %5432 = xor i64 %5431, %5428
  %5433 = add i64 %3, 4028193481278431854
  %5434 = add i64 -3294432352951339819, %3
  %5435 = add i64 %5434, 7322625834229771673
  %5436 = add i64 %99, 3206846008809574178
  %5437 = add i64 5531351103151175598, %99
  %5438 = sub i64 %5437, 2324505094341601420
  %5439 = xor i64 %5435, %5433
  %5440 = xor i64 %5439, 0
  %5441 = xor i64 %5440, %5438
  %5442 = xor i64 %5441, %5436
  %5443 = mul i64 %5432, %5442
  %5444 = trunc i64 %5443 to i32
  %5445 = icmp eq i32 %5414, %5444
  %5446 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 26
  %5447 = load i32, i32* %5446, align 4
  %5448 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 25
  %5449 = load i32, i32* %5448, align 4
  %5450 = add i32 %5447, %5449
  store i32 %5450, i32* %dispatcher, align 4
  store i32 %5414, i32* %.reg2mem131, align 4
  store i1 %5445, i1* %.reg2mem133, align 1
  %5451 = load i8*, i8** %30, align 8
  %5452 = load i8, i8* %5451, align 1
  %5453 = mul i8 %5452, 2
  %5454 = mul i8 %5452, 2
  %5455 = add i8 117, %5454
  %5456 = sub i8 %5455, 115
  %5457 = mul i8 %5453, %5456
  %5458 = srem i8 %5457, 4
  %5459 = icmp eq i8 %5458, 0
  %5460 = mul i8 %5452, %5452
  %5461 = add i8 %5460, %5452
  %5462 = srem i8 %5461, 2
  %5463 = icmp eq i8 %5462, 0
  %5464 = or i1 %5459, %5463
  %5465 = select i1 %5464, i32 984876151, i32 984876150
  %5466 = xor i32 %5465, 1
  store i32 %5466, i32* %0, align 4
  %5467 = call i8** @bf3690775341412318723(i32* %0)
  %5468 = load i8*, i8** %5467, align 8
  indirectbr i8* %5468, [label %loopEnd, label %5410]

codeRepl14:                                       ; preds = %codeRepl14, %loopStart
  store i64 4070807658626890120, i64* %101, align 8
  %5469 = call i8** @lk1336881106680510526(i64* %101)
  %5470 = load i8*, i8** %5469, align 8
  %5471 = bitcast i8* %5470 to void (i1*, i32*, i32*, [51 x i32]*, i32*)*
  call void %5471(i1* %.reg2mem133, i32* %.reg2mem131, i32* %.reg2mem121, [51 x i32]* %lookupTable, i32* %dispatcher)
  %5472 = load i8*, i8** %10, align 8
  %5473 = load i8, i8* %5472, align 1
  %5474 = mul i8 %5473, %5473
  %5475 = add i8 %5474, %5473
  %5476 = mul i8 %5475, 3
  %5477 = add i64 %47, -6797552533393170843
  %5478 = xor i64 -6797552533393170843, %47
  %5479 = and i64 -6797552533393170843, %47
  %5480 = mul i64 2, %5479
  %5481 = add i64 %5478, %5480
  %5482 = and i64 %45, -4359447191332633900
  %5483 = xor i64 %45, -1
  %5484 = or i64 4359447191332633899, %5483
  %5485 = xor i64 %5484, -1
  %5486 = and i64 %5485, -1
  %5487 = xor i64 %5477, %5481
  %5488 = xor i64 %5487, %5482
  %5489 = xor i64 %5488, %5486
  %5490 = xor i64 %5489, 3403213716968953669
  %5491 = or i64 %11, 6030025290645832815
  %5492 = and i64 6030025290645832815, %11
  %5493 = xor i64 6030025290645832815, %11
  %5494 = or i64 %5492, %5493
  %5495 = and i64 %5, 380882372214989864
  %5496 = xor i64 %5, -1
  %5497 = xor i64 380882372214989864, %5496
  %5498 = and i64 %5497, 380882372214989864
  %5499 = xor i64 %5491, 3964225435356120858
  %5500 = xor i64 %5499, %5495
  %5501 = xor i64 %5500, %5498
  %5502 = xor i64 %5501, %5494
  %5503 = mul i64 %5490, %5502
  %5504 = trunc i64 %5503 to i8
  %5505 = srem i8 %5476, %5504
  %5506 = icmp eq i8 %5505, 0
  %5507 = mul i8 %5473, %5473
  %5508 = add i8 %5507, %5473
  %5509 = or i64 %124, 6971919831154779941
  %5510 = and i64 6971919831154779941, %124
  %5511 = xor i64 6971919831154779941, %124
  %5512 = or i64 %5510, %5511
  %5513 = or i64 %31, 4068468268685371937
  %5514 = xor i64 %31, -1
  %5515 = and i64 4068468268685371937, %5514
  %5516 = add i64 %5515, %31
  %5517 = add i64 %106, -3021365967943589868
  %5518 = xor i64 -3021365967943589868, %106
  %5519 = and i64 -3021365967943589868, %106
  %5520 = mul i64 2, %5519
  %5521 = add i64 %5518, %5520
  %5522 = xor i64 %5509, %5513
  %5523 = xor i64 %5522, %5516
  %5524 = xor i64 %5523, 2011575291114886709
  %5525 = xor i64 %5524, %5512
  %5526 = xor i64 %5525, %5517
  %5527 = xor i64 %5526, %5521
  %5528 = and i64 %51, -5056982268861491086
  %5529 = xor i64 %51, -1
  %5530 = or i64 5056982268861491085, %5529
  %5531 = xor i64 %5530, -1
  %5532 = and i64 %5531, -1
  %5533 = and i64 %95, -5974346491765303770
  %5534 = or i64 5974346491765303769, %95
  %5535 = sub i64 %5534, 5974346491765303769
  %5536 = xor i64 -4772963829344102342, %5532
  %5537 = xor i64 %5536, %5535
  %5538 = xor i64 %5537, %5533
  %5539 = xor i64 %5538, %5528
  %5540 = mul i64 %5527, %5539
  %5541 = trunc i64 %5540 to i8
  %5542 = srem i8 %5508, %5541
  %5543 = add i64 %65, -6280992633815358046
  %5544 = add i64 -916500695025090306, %65
  %5545 = sub i64 %5544, 5364491938790267740
  %5546 = and i64 %35, 7510945260759281839
  %5547 = or i64 -7510945260759281840, %35
  %5548 = sub i64 %5547, -7510945260759281840
  %5549 = xor i64 %5548, %5546
  %5550 = xor i64 %5549, %5545
  %5551 = xor i64 %5550, 8283621199733630999
  %5552 = xor i64 %5551, %5543
  %5553 = or i64 %63, 5618153740197104461
  %5554 = and i64 5618153740197104461, %63
  %5555 = xor i64 5618153740197104461, %63
  %5556 = or i64 %5554, %5555
  %5557 = and i64 %25, 2209273788189815190
  %5558 = or i64 -2209273788189815191, %25
  %5559 = sub i64 %5558, -2209273788189815191
  %5560 = xor i64 %5553, 0
  %5561 = xor i64 %5560, %5557
  %5562 = xor i64 %5561, %5556
  %5563 = xor i64 %5562, %5559
  %5564 = mul i64 %5552, %5563
  %5565 = trunc i64 %5564 to i8
  %5566 = icmp eq i8 %5542, %5565
  %5567 = and i1 %5506, %5566
  %5568 = select i1 %5567, i32 984876151, i32 984876150
  %5569 = xor i32 %5568, -1989705316
  %5570 = xor i32 %5569, -1989705315
  store i32 %5570, i32* %0, align 4
  %5571 = call i8** @bf3690775341412318723(i32* %0)
  %5572 = load i8*, i8** %5571, align 8
  indirectbr i8* %5572, [label %loopEnd, label %codeRepl14]

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %5573 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %5573, align 4
  %5574 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %5574, align 4
  %5575 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %5575, align 4
  %5576 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %5576, align 4
  %5577 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %5577, align 4
  %5578 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %5578, align 4
  %5579 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %5579, align 4
  %5580 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %5580, align 4
  %5581 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %5581, align 4
  %5582 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %5582, align 4
  %5583 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %5583, align 4
  %5584 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 22
  %5585 = or i64 %19, -4245574275581939822
  %5586 = xor i64 %19, -1
  %5587 = and i64 %5586, -2488799333652736181
  %5588 = and i64 %19, 2488799333652736180
  %5589 = or i64 %5587, %5588
  %5590 = xor i64 1757163073963079897, %5589
  %5591 = xor i64 %19, -1
  %5592 = or i64 4245574275581939821, %5591
  %5593 = xor i64 %5592, -1
  %5594 = and i64 %5593, -1
  %5595 = or i64 %5590, %5594
  %5596 = add i64 %23, 4654307601619408627
  %5597 = sub i64 0, %23
  %5598 = add i64 -4654307601619408627, %5597
  %5599 = sub i64 0, %5598
  %5600 = add i64 %49, -2313564368654771324
  %5601 = sub i64 0, %49
  %5602 = sub i64 -2313564368654771324, %5601
  %5603 = xor i64 %5595, %5585
  %5604 = xor i64 %5603, %5602
  %5605 = xor i64 %5604, %5599
  %5606 = xor i64 %5605, %5596
  %5607 = xor i64 %5606, -6480415510207327291
  %5608 = xor i64 %5607, %5600
  %5609 = or i64 %23, -2508744681541269578
  %5610 = xor i64 %23, -1
  %5611 = and i64 -2508744681541269578, %5610
  %5612 = add i64 %5611, %23
  %5613 = or i64 %118, 3117176649284817236
  %5614 = and i64 3117176649284817236, %118
  %5615 = xor i64 3117176649284817236, %118
  %5616 = or i64 %5614, %5615
  %5617 = and i64 %43, 4195706950844543026
  %5618 = xor i64 %43, -1
  %5619 = or i64 -4195706950844543027, %5618
  %5620 = xor i64 %5619, -1
  %5621 = and i64 %5620, -1
  %5622 = xor i64 %5621, %5617
  %5623 = xor i64 %5622, -8262252935055282159
  %5624 = xor i64 %5623, %5609
  %5625 = xor i64 %5624, %5616
  %5626 = xor i64 %5625, %5613
  %5627 = xor i64 %5626, %5612
  %5628 = mul i64 %5608, %5627
  %5629 = trunc i64 %5628 to i32
  store i32 %5629, i32* %5584, align 4
  %5630 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 24
  store i32 23, i32* %5630, align 4
  %5631 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 26
  store i32 25, i32* %5631, align 4
  %5632 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 28
  store i32 27, i32* %5632, align 4
  %5633 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %5633, align 4
  %5634 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 32
  store i32 31, i32* %5634, align 4
  %5635 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 34
  store i32 33, i32* %5635, align 4
  %5636 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 36
  store i32 35, i32* %5636, align 4
  %5637 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 38
  store i32 37, i32* %5637, align 4
  %5638 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 40
  store i32 39, i32* %5638, align 4
  %5639 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 42
  store i32 41, i32* %5639, align 4
  %5640 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 44
  store i32 43, i32* %5640, align 4
  %5641 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 46
  store i32 45, i32* %5641, align 4
  %5642 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 48
  store i32 47, i32* %5642, align 4
  %5643 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  store i32 49, i32* %5643, align 4
  %5644 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %5645 = load i32, i32* %5644, align 4
  store i32 %5645, i32* %dispatcher, align 4
  %5646 = load i8*, i8** %70, align 8
  %5647 = load i8, i8* %5646, align 1
  %5648 = mul i8 %5647, 2
  %5649 = or i64 %120, 480809781117625040
  %5650 = and i64 480809781117625040, %120
  %5651 = xor i64 480809781117625040, %120
  %5652 = or i64 %5650, %5651
  %5653 = or i64 %118, -8101156062093345833
  %5654 = xor i64 %118, -1
  %5655 = and i64 %5654, 4503439475245601677
  %5656 = and i64 %118, -4503439475245601678
  %5657 = or i64 %5655, %5656
  %5658 = xor i64 -5625691736105801638, %5657
  %5659 = xor i64 %118, -1
  %5660 = or i64 8101156062093345832, %5659
  %5661 = xor i64 %5660, -1
  %5662 = and i64 %5661, -1
  %5663 = or i64 %5658, %5662
  %5664 = xor i64 %5653, %5649
  %5665 = xor i64 %5664, -3207892455861606301
  %5666 = xor i64 %5665, %5652
  %5667 = xor i64 %5666, %5663
  %5668 = add i64 %89, -4643126473804814322
  %5669 = and i64 -4643126473804814322, %89
  %5670 = or i64 -4643126473804814322, %89
  %5671 = add i64 %5669, %5670
  %5672 = add i64 %49, 4919233367906502913
  %5673 = add i64 -2847105589360938400, %49
  %5674 = add i64 %5673, 7766338957267441313
  %5675 = add i64 %116, -711307133696353522
  %5676 = add i64 -8881636984208592658, %116
  %5677 = sub i64 %5676, -8170329850512239136
  %5678 = xor i64 %5672, %5668
  %5679 = xor i64 %5678, -6076162821543808362
  %5680 = xor i64 %5679, %5677
  %5681 = xor i64 %5680, %5675
  %5682 = xor i64 %5681, %5674
  %5683 = xor i64 %5682, %5671
  %5684 = mul i64 %5667, %5683
  %5685 = trunc i64 %5684 to i8
  %5686 = mul i8 %5647, %5685
  %5687 = sub i8 0, %5686
  %5688 = sub i8 2, %5687
  %5689 = mul i8 %5648, %5688
  %5690 = srem i8 %5689, 4
  %5691 = icmp eq i8 %5690, 0
  %5692 = mul i8 %5647, %5647
  %5693 = add i8 %5692, %5647
  %5694 = and i64 %53, 7538838830042613745
  %5695 = xor i64 %53, -1
  %5696 = xor i64 7538838830042613745, %5695
  %5697 = and i64 %5696, 7538838830042613745
  %5698 = and i64 %65, -9156358501088818528
  %5699 = xor i64 %65, -1
  %5700 = or i64 9156358501088818527, %5699
  %5701 = xor i64 %5700, -1
  %5702 = and i64 %5701, -1
  %5703 = xor i64 %5702, %5694
  %5704 = xor i64 %5703, %5698
  %5705 = xor i64 %5704, -8226222402422161045
  %5706 = xor i64 %5705, %5697
  %5707 = and i64 %17, -4667878656606062271
  %5708 = xor i64 %17, -1
  %5709 = or i64 4667878656606062270, %5708
  %5710 = xor i64 %5709, -1
  %5711 = and i64 %5710, -1
  %5712 = or i64 %87, 1762120251974346681
  %5713 = xor i64 %87, -1
  %5714 = and i64 1762120251974346681, %5713
  %5715 = add i64 %5714, %87
  %5716 = or i64 %83, -4035871367304377407
  %5717 = xor i64 %83, -1
  %5718 = and i64 -4035871367304377407, %5717
  %5719 = add i64 %5718, %83
  %5720 = xor i64 %5715, %5712
  %5721 = xor i64 %5720, %5711
  %5722 = xor i64 %5721, %5707
  %5723 = xor i64 %5722, %5719
  %5724 = xor i64 %5723, -767146874761656698
  %5725 = xor i64 %5724, %5716
  %5726 = mul i64 %5706, %5725
  %5727 = trunc i64 %5726 to i8
  %5728 = srem i8 %5693, %5727
  %5729 = and i64 %122, -455591507956132738
  %5730 = xor i64 %122, -1
  %5731 = xor i64 -455591507956132738, %5730
  %5732 = and i64 %5731, -455591507956132738
  %5733 = and i64 %39, 7438843814023840314
  %5734 = or i64 -7438843814023840315, %39
  %5735 = sub i64 %5734, -7438843814023840315
  %5736 = xor i64 %5735, %5729
  %5737 = xor i64 %5736, %5732
  %5738 = xor i64 %5737, -4048484031792119535
  %5739 = xor i64 %5738, %5733
  %5740 = or i64 %45, -5000943202407746337
  %5741 = xor i64 %45, -1
  %5742 = and i64 -5000943202407746337, %5741
  %5743 = add i64 %5742, %45
  %5744 = or i64 %132, -8034880529969980930
  %5745 = and i64 -8034880529969980930, %132
  %5746 = xor i64 -8034880529969980930, %132
  %5747 = or i64 %5745, %5746
  %5748 = xor i64 %5740, %5743
  %5749 = xor i64 %5748, %5747
  %5750 = xor i64 %5749, %5744
  %5751 = xor i64 %5750, 0
  %5752 = mul i64 %5739, %5751
  %5753 = trunc i64 %5752 to i8
  %5754 = icmp eq i8 %5728, %5753
  %5755 = and i1 %5691, %5754
  %5756 = select i1 %5755, i32 984876128, i32 984876137
  %5757 = xor i32 %5756, 9
  store i32 %5757, i32* %0, align 4
  %5758 = call i8** @bf3690775341412318723(i32* %0)
  %5759 = load i8*, i8** %5758, align 8
  indirectbr i8* %5759, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %5760 = load i8*, i8** %2, align 8
  %5761 = load i8, i8* %5760, align 1
  %5762 = mul i8 %5761, 2
  %5763 = mul i8 %5761, 2
  %5764 = add i8 2, %5763
  %5765 = mul i8 %5762, %5764
  %5766 = srem i8 %5765, 4
  %5767 = icmp eq i8 %5766, 0
  %5768 = mul i8 %5761, %5761
  %5769 = add i8 %5768, %5761
  %5770 = srem i8 %5769, 2
  %5771 = icmp eq i8 %5770, 0
  %5772 = and i1 %5767, %5771
  %5773 = xor i1 %5767, %5771
  %5774 = or i1 %5772, %5773
  %5775 = select i1 %5774, i32 984876101, i32 984876150
  %5776 = xor i32 %5775, 51
  store i32 %5776, i32* %0, align 4
  %5777 = call i8** @bf3690775341412318723(i32* %0)
  %5778 = load i8*, i8** %5777, align 8
  indirectbr i8* %5778, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl14, %5410, %5359, %5183, %5076, %4961, %codeRepl13, %4754, %4657, %codeRepl12, %4455, %4376, %4265, %3965, %codeRepl11, %3704, %3651, %codeRepl10, %3384, %3108, %codeRepl9, %2813, %codeRepl8, %2573, %codeRepl7, %codeRepl6, %2354, %2258, %2099, %1839, %1647, %codeRepl5, %codeRepl4, %codeRepl3, %.loopexit, %1156, %codeRepl2, %1008, %946, %717, %codeRepl1, %525, %codeRepl, %.preheader, %EntryBasicBlockSplit
  %5779 = load i8*, i8** %24, align 8
  %5780 = load i8, i8* %5779, align 1
  %5781 = or i64 %120, -6438711173735098504
  %5782 = xor i64 %120, -1
  %5783 = and i64 -6438711173735098504, %5782
  %5784 = add i64 %5783, %120
  %5785 = add i64 %112, 261061366444413549
  %5786 = add i64 -8270879162791808311, %112
  %5787 = sub i64 %5786, -8531940529236221860
  %5788 = xor i64 %5784, %5787
  %5789 = xor i64 %5788, 8531509567225013999
  %5790 = xor i64 %5789, %5781
  %5791 = xor i64 %5790, %5785
  %5792 = and i64 %130, 4142961050294792288
  %5793 = xor i64 %130, -1
  %5794 = or i64 -4142961050294792289, %5793
  %5795 = xor i64 %5794, -1
  %5796 = and i64 %5795, -1
  %5797 = and i64 %85, -4191148609614121633
  %5798 = xor i64 %85, -1
  %5799 = or i64 4191148609614121632, %5798
  %5800 = xor i64 %5799, -1
  %5801 = and i64 %5800, -1
  %5802 = or i64 %63, 8401185161408373880
  %5803 = and i64 8401185161408373880, %63
  %5804 = xor i64 8401185161408373880, %63
  %5805 = or i64 %5803, %5804
  %5806 = xor i64 %5792, %5805
  %5807 = xor i64 %5806, %5801
  %5808 = xor i64 %5807, 7608063194704463601
  %5809 = xor i64 %5808, %5796
  %5810 = xor i64 %5809, %5797
  %5811 = xor i64 %5810, %5802
  %5812 = mul i64 %5791, %5811
  %5813 = trunc i64 %5812 to i8
  %5814 = xor i8 %5780, %5813
  %5815 = or i8 %5814, -2
  %5816 = xor i8 %5815, -1
  %5817 = and i8 %5816, -1
  %5818 = icmp eq i8 %5817, 1
  %5819 = mul i8 %5780, %5780
  %5820 = add i8 %5819, %5780
  %5821 = srem i8 %5820, 2
  %5822 = icmp eq i8 %5821, 0
  %5823 = xor i1 %5818, true
  %5824 = and i1 %5823, false
  %5825 = and i1 %5818, true
  %5826 = or i1 %5824, %5825
  %5827 = xor i1 %5822, true
  %5828 = and i1 %5827, false
  %5829 = and i1 %5822, true
  %5830 = or i1 %5828, %5829
  %5831 = xor i1 %5826, %5830
  %5832 = xor i1 %5818, true
  %5833 = xor i1 %5822, true
  %5834 = or i1 %5832, %5833
  %5835 = xor i1 %5834, true
  %5836 = and i1 %5835, true
  %5837 = or i1 %5831, %5836
  %5838 = and i64 %106, 5162537310892098202
  %5839 = xor i64 %106, -1
  %5840 = or i64 -5162537310892098203, %5839
  %5841 = xor i64 %5840, -1
  %5842 = and i64 %5841, -1
  %5843 = or i64 %83, -5766405018120247238
  %5844 = xor i64 %83, -1
  %5845 = and i64 %5844, 9044837076450434974
  %5846 = and i64 %83, -9044837076450434975
  %5847 = or i64 %5845, %5846
  %5848 = xor i64 -3279699878452267100, %5847
  %5849 = xor i64 %83, -1
  %5850 = or i64 5766405018120247237, %5849
  %5851 = xor i64 %5850, -1
  %5852 = and i64 %5851, -1
  %5853 = or i64 %5848, %5852
  %5854 = xor i64 %5843, %5838
  %5855 = xor i64 %5854, %5842
  %5856 = xor i64 %5855, %5853
  %5857 = xor i64 %5856, -7895431955311963007
  %5858 = add i64 %93, 4543329180421748248
  %5859 = add i64 3394714340978541237, %93
  %5860 = sub i64 %5859, -1148614839443207011
  %5861 = add i64 %132, -3445294166896903836
  %5862 = and i64 -3445294166896903836, %132
  %5863 = or i64 -3445294166896903836, %132
  %5864 = add i64 %5862, %5863
  %5865 = xor i64 -7926929352737012505, %5861
  %5866 = xor i64 %5865, %5858
  %5867 = xor i64 %5866, %5860
  %5868 = xor i64 %5867, %5864
  %5869 = mul i64 %5857, %5868
  %5870 = trunc i64 %5869 to i32
  %5871 = select i1 %5837, i32 984876155, i32 %5870
  %5872 = xor i32 %5871, 28
  store i32 %5872, i32* %0, align 4
  %5873 = call i8** @bf3690775341412318723(i32* %0)
  %5874 = load i8*, i8** %5873, align 8
  indirectbr i8* %5874, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal fastcc i32 @main_loop(float* %0, float* %1, i8* %2, float* %3) unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h6542867261474098886(i64 984876128)
  %6 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %5
  store i8* blockaddress(@main_loop, %loopEnd), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876096)
  %8 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %7
  store i8* blockaddress(@main_loop, %defaultSwitchBasicBlock), i8** %8, align 8
  %9 = call i64 @h6542867261474098886(i64 984876109)
  %10 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %9
  store i8* blockaddress(@main_loop, %BogusBasicBlock), i8** %10, align 8
  %11 = call i64 @h6542867261474098886(i64 984876156)
  %12 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %11
  store i8* blockaddress(@main_loop, %5852), i8** %12, align 8
  %13 = call i64 @h6542867261474098886(i64 984876107)
  %14 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %13
  store i8* blockaddress(@main_loop, %codeRepl16), i8** %14, align 8
  %15 = call i64 @h6542867261474098886(i64 984876102)
  %16 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %15
  store i8* blockaddress(@main_loop, %5642), i8** %16, align 8
  %17 = call i64 @h6542867261474098886(i64 984876143)
  %18 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %17
  store i8* blockaddress(@main_loop, %5460), i8** %18, align 8
  %19 = call i64 @h6542867261474098886(i64 984876098)
  %20 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %19
  store i8* blockaddress(@main_loop, %1042), i8** %20, align 8
  %21 = call i64 @h6542867261474098886(i64 984876139)
  %22 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %21
  store i8* blockaddress(@main_loop, %codeRepl15), i8** %22, align 8
  %23 = call i64 @h6542867261474098886(i64 984876158)
  %24 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %23
  store i8* blockaddress(@main_loop, %codeRepl8), i8** %24, align 8
  %25 = call i64 @h6542867261474098886(i64 984876142)
  %26 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %25
  store i8* blockaddress(@main_loop, %5122), i8** %26, align 8
  %27 = call i64 @h6542867261474098886(i64 984876121)
  %28 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %27
  store i8* blockaddress(@main_loop, %5048), i8** %28, align 8
  %29 = call i64 @h6542867261474098886(i64 984876149)
  %30 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %29
  store i8* blockaddress(@main_loop, %codeRepl13), i8** %30, align 8
  %31 = call i64 @h6542867261474098886(i64 984876111)
  %32 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %31
  store i8* blockaddress(@main_loop, %4964), i8** %32, align 8
  %33 = call i64 @h6542867261474098886(i64 984876133)
  %34 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %33
  store i8* blockaddress(@main_loop, %5576), i8** %34, align 8
  %35 = call i64 @h6542867261474098886(i64 984876157)
  %36 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %35
  store i8* blockaddress(@main_loop, %codeRepl12), i8** %36, align 8
  %37 = call i64 @h6542867261474098886(i64 984876120)
  %38 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %37
  store i8* blockaddress(@main_loop, %4748), i8** %38, align 8
  %39 = call i64 @h6542867261474098886(i64 984876108)
  %40 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %39
  store i8* blockaddress(@main_loop, %loopStart), i8** %40, align 8
  %41 = call i64 @h6542867261474098886(i64 984876105)
  %42 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %41
  store i8* blockaddress(@main_loop, %4702), i8** %42, align 8
  %43 = call i64 @h6542867261474098886(i64 984876140)
  %44 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %43
  store i8* blockaddress(@main_loop, %622), i8** %44, align 8
  %45 = call i64 @h6542867261474098886(i64 984876153)
  %46 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %45
  store i8* blockaddress(@main_loop, %codeRepl11), i8** %46, align 8
  %47 = call i64 @h6542867261474098886(i64 984876155)
  %48 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %47
  store i8* blockaddress(@main_loop, %2509), i8** %48, align 8
  %49 = call i64 @h6542867261474098886(i64 984876130)
  %50 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %49
  store i8* blockaddress(@main_loop, %4516), i8** %50, align 8
  %51 = call i64 @h6542867261474098886(i64 984876137)
  %52 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %51
  store i8* blockaddress(@main_loop, %3853), i8** %52, align 8
  %53 = call i64 @h6542867261474098886(i64 984876131)
  %54 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %53
  store i8* blockaddress(@main_loop, %3315), i8** %54, align 8
  %55 = call i64 @h6542867261474098886(i64 984876104)
  %56 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %55
  store i8* blockaddress(@main_loop, %codeRepl14), i8** %56, align 8
  %57 = call i64 @h6542867261474098886(i64 984876123)
  %58 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %57
  store i8* blockaddress(@main_loop, %2245), i8** %58, align 8
  %59 = call i64 @h6542867261474098886(i64 984876154)
  %60 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %59
  store i8* blockaddress(@main_loop, %3135), i8** %60, align 8
  %61 = call i64 @h6542867261474098886(i64 984876134)
  %62 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %61
  store i8* blockaddress(@main_loop, %2188), i8** %62, align 8
  %63 = call i64 @h6542867261474098886(i64 984876141)
  %64 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %63
  store i8* blockaddress(@main_loop, %985), i8** %64, align 8
  %65 = call i64 @h6542867261474098886(i64 984876103)
  %66 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %65
  store i8* blockaddress(@main_loop, %codeRepl), i8** %66, align 8
  %67 = call i64 @h6542867261474098886(i64 984876101)
  %68 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %67
  store i8* blockaddress(@main_loop, %.loopexit), i8** %68, align 8
  %69 = call i64 @h6542867261474098886(i64 984876136)
  %70 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %69
  store i8* blockaddress(@main_loop, %codeRepl6), i8** %70, align 8
  %71 = call i64 @h6542867261474098886(i64 984876099)
  %72 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %71
  store i8* blockaddress(@main_loop, %codeRepl4), i8** %72, align 8
  %73 = call i64 @h6542867261474098886(i64 984876145)
  %74 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %73
  store i8* blockaddress(@main_loop, %codeRepl3), i8** %74, align 8
  %75 = call i64 @h6542867261474098886(i64 984876152)
  %76 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %75
  store i8* blockaddress(@main_loop, %4290), i8** %76, align 8
  %77 = call i64 @h6542867261474098886(i64 984876135)
  %78 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %77
  store i8* blockaddress(@main_loop, %1075), i8** %78, align 8
  %79 = call i64 @h6542867261474098886(i64 984876100)
  %80 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %79
  store i8* blockaddress(@main_loop, %1828), i8** %80, align 8
  %81 = call i64 @h6542867261474098886(i64 984876147)
  %82 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %81
  store i8* blockaddress(@main_loop, %codeRepl1), i8** %82, align 8
  %83 = call i64 @h6542867261474098886(i64 984876122)
  %84 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %83
  store i8* blockaddress(@main_loop, %2810), i8** %84, align 8
  %85 = call i64 @h6542867261474098886(i64 984876151)
  %86 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %85
  store i8* blockaddress(@main_loop, %1338), i8** %86, align 8
  %87 = call i64 @h6542867261474098886(i64 984876138)
  %88 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %87
  store i8* blockaddress(@main_loop, %codeRepl2), i8** %88, align 8
  %89 = call i64 @h6542867261474098886(i64 984876159)
  %90 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %89
  store i8* blockaddress(@main_loop, %3422), i8** %90, align 8
  %91 = call i64 @h6542867261474098886(i64 984876097)
  %92 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %91
  store i8* blockaddress(@main_loop, %codeRepl7), i8** %92, align 8
  %93 = call i64 @h6542867261474098886(i64 984876144)
  %94 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %93
  store i8* blockaddress(@main_loop, %1221), i8** %94, align 8
  %95 = call i64 @h6542867261474098886(i64 984876129)
  %96 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %95
  store i8* blockaddress(@main_loop, %822), i8** %96, align 8
  %97 = call i64 @h6542867261474098886(i64 984876148)
  %98 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %97
  store i8* blockaddress(@main_loop, %.preheader), i8** %98, align 8
  %99 = call i64 @h6542867261474098886(i64 984876106)
  %100 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %99
  store i8* blockaddress(@main_loop, %codeRepl5), i8** %100, align 8
  %101 = call i64 @h6542867261474098886(i64 984876132)
  %102 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %101
  store i8* blockaddress(@main_loop, %codeRepl10), i8** %102, align 8
  %103 = call i64 @h6542867261474098886(i64 984876146)
  %104 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %103
  store i8* blockaddress(@main_loop, %codeRepl9), i8** %104, align 8
  %105 = call i64 @h6542867261474098886(i64 984876150)
  %106 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %105
  store i8* blockaddress(@main_loop, %3493), i8** %106, align 8
  %107 = call i64 @h6542867261474098886(i64 984876110)
  %108 = getelementptr [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %107
  store i8* blockaddress(@main_loop, %416), i8** %108, align 8
  %109 = alloca i64, align 8
  %110 = call i64 @m4181846979565521366(i64 4070807658626890122)
  %111 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %110
  store i8* bitcast (i32 (i8*, i64, float*, i64)* @clear to i8*), i8** %111, align 8
  %112 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %113 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %112
  store i8* bitcast (void (i32*, [53 x i32]*, i32*, i32*)* @main_loop.EntryBasicBlockSplit to i8*), i8** %113, align 8
  %114 = call i64 @m4181846979565521366(i64 4070807658626890115)
  %115 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %114
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %115, align 8
  %116 = call i64 @m4181846979565521366(i64 4070807658626890143)
  %117 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %116
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted to i8*), i8** %117, align 8
  %118 = call i64 @m4181846979565521366(i64 4070807658626890121)
  %119 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %118
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted.30 to i8*), i8** %119, align 8
  %120 = call i64 @m4181846979565521366(i64 4070807658626890141)
  %121 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %120
  store i8* bitcast (void (i32*, i32*, [53 x i32]*, i32*)* @main_loop.extracted.31 to i8*), i8** %121, align 8
  %122 = call i64 @m4181846979565521366(i64 4070807658626890139)
  %123 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %122
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted.32 to i8*), i8** %123, align 8
  %124 = call i64 @m4181846979565521366(i64 4070807658626890125)
  %125 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %124
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted.33 to i8*), i8** %125, align 8
  %126 = call i64 @m4181846979565521366(i64 4070807658626890112)
  %127 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %126
  store i8* bitcast (void ([53 x i32]*, i32*, i32*, i32*, double*)* @main_loop.extracted.34 to i8*), i8** %127, align 8
  %128 = call i64 @m4181846979565521366(i64 4070807658626890113)
  %129 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %128
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %129, align 8
  %130 = call i64 @m4181846979565521366(i64 4070807658626890140)
  %131 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %130
  store i8* bitcast (void (i32*, [53 x i32]*, i32*, i32*, i1*)* @main_loop.extracted.35 to i8*), i8** %131, align 8
  %132 = call i64 @m4181846979565521366(i64 4070807658626890119)
  %133 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %132
  store i8* bitcast (void (i32*, i32*, [53 x i32]*, i32*)* @main_loop.extracted.36 to i8*), i8** %133, align 8
  %134 = call i64 @m4181846979565521366(i64 4070807658626890120)
  %135 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %134
  store i8* bitcast (void (double*, i1*, i32*, i32*, i1*, [53 x i32]*, i32*)* @main_loop.extracted.37 to i8*), i8** %135, align 8
  %136 = call i64 @m4181846979565521366(i64 4070807658626890124)
  %137 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %136
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted.38 to i8*), i8** %137, align 8
  %138 = call i64 @m4181846979565521366(i64 4070807658626890114)
  %139 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %138
  store i8* bitcast (void (double*, [53 x i32]*, i32*, i1*)* @main_loop.extracted.39 to i8*), i8** %139, align 8
  %140 = call i64 @m4181846979565521366(i64 4070807658626890118)
  %141 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %140
  store i8* bitcast (void (i1*, i32*, i32*, [53 x i32]*, i32*, i32*)* @main_loop.extracted.40 to i8*), i8** %141, align 8
  %142 = call i64 @m4181846979565521366(i64 4070807658626890117)
  %143 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %142
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %143, align 8
  %144 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %145 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %144
  store i8* bitcast (void (float*, float*, i8*, i32*, i32*, i32*, i1*, [53 x i32]*, i32*)* @main_loop.extracted.41 to i8*), i8** %145, align 8
  %146 = call i64 @m4181846979565521366(i64 4070807658626890123)
  %147 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %146
  store i8* bitcast (void ([53 x i32]*, i32*, i32*, i32*)* @main_loop.extracted.42 to i8*), i8** %147, align 8
  %148 = call i64 @m4181846979565521366(i64 4070807658626890142)
  %149 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %148
  store i8* bitcast (void (float*, float*, i8*, [53 x i32]*, i32*, i32*)* @main_loop.extracted.43 to i8*), i8** %149, align 8
  %150 = call i64 @m4181846979565521366(i64 4070807658626890116)
  %151 = getelementptr [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %150
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted.44 to i8*), i8** %151, align 8
  %.reg2mem175 = alloca i32, align 4
  %.reg2mem173 = alloca i32, align 4
  %.reg2mem171 = alloca i1, align 1
  %.reg2mem169 = alloca i32, align 4
  %.ph.reg2mem = alloca i32, align 4
  %.reg2mem167 = alloca i1, align 1
  %.reg2mem165 = alloca i1, align 1
  %.reg2mem163 = alloca i32, align 4
  %.reg2mem161 = alloca i1, align 1
  %.reg2mem159 = alloca i1, align 1
  %.reg2mem157 = alloca i1, align 1
  %.reg2mem155 = alloca i1, align 1
  %.reg2mem153 = alloca i32, align 4
  %.reg2mem151 = alloca i32, align 4
  %.reg2mem149 = alloca double, align 8
  %.reg2mem147 = alloca i32, align 4
  %.reg2mem145 = alloca i1, align 1
  %.reg2mem143 = alloca i32, align 4
  %.reg2mem141 = alloca i32, align 4
  %.reg2mem138 = alloca i1, align 1
  %.reg2mem136 = alloca i32, align 4
  %.reg2mem129 = alloca i32, align 4
  %.reg2mem126 = alloca i32, align 4
  %.reg2mem123 = alloca i1, align 1
  %.reg2mem120 = alloca i1, align 1
  %.reg2mem118 = alloca i1, align 1
  %.reg2mem112 = alloca i32, align 4
  %.reg2mem110 = alloca i32, align 4
  %.reg2mem107 = alloca i1, align 1
  %.reg2mem103 = alloca i32, align 4
  %.reg2mem99 = alloca i1, align 1
  %.reg2mem96 = alloca i32, align 4
  %.reg2mem93 = alloca i32, align 4
  %.reg2mem90 = alloca i32, align 4
  %.reg2mem87 = alloca i32, align 4
  %.reg2mem84 = alloca i32, align 4
  %.reg2mem80 = alloca double, align 8
  %.reg2mem77 = alloca float, align 4
  %.reg2mem74 = alloca i32, align 4
  %.reg2mem71 = alloca i1, align 1
  %.reg2mem65 = alloca i32, align 4
  %.reg2mem61 = alloca i32, align 4
  %.reg2mem58 = alloca i1, align 1
  %.reg2mem56 = alloca i1, align 1
  %.reg2mem53 = alloca i1, align 1
  %.reg2mem50 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem44 = alloca i1, align 1
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem30 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %lookupTable = alloca [53 x i32], align 4
  %152 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %152, align 4
  %153 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %153, align 4
  %154 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %154, align 4
  %155 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %155, align 4
  %156 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %156, align 4
  %157 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %157, align 4
  %158 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %158, align 4
  %159 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %159, align 4
  %160 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %160, align 4
  %161 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %161, align 4
  %162 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %162, align 4
  %163 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %163, align 4
  %164 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %164, align 4
  %165 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %165, align 4
  %166 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %166, align 4
  %167 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %167, align 4
  %168 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %168, align 4
  %169 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %169, align 4
  %170 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %170, align 4
  %171 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %171, align 4
  %172 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %172, align 4
  %173 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %173, align 4
  %174 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %174, align 4
  %175 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  store i32 20, i32* %175, align 4
  %176 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 24
  store i32 21, i32* %176, align 4
  %177 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %177, align 4
  %178 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %178, align 4
  %179 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %179, align 4
  %180 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 28
  store i32 25, i32* %180, align 4
  %181 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 29
  store i32 26, i32* %181, align 4
  %182 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 30
  store i32 27, i32* %182, align 4
  %183 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %183, align 4
  %184 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %184, align 4
  %185 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %185, align 4
  %186 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %186, align 4
  %187 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %187, align 4
  %188 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %188, align 4
  %189 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %189, align 4
  %190 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 38
  store i32 35, i32* %190, align 4
  %191 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 39
  store i32 36, i32* %191, align 4
  %192 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 40
  store i32 37, i32* %192, align 4
  %193 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 41
  store i32 38, i32* %193, align 4
  %194 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 42
  store i32 39, i32* %194, align 4
  %195 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 43
  store i32 40, i32* %195, align 4
  %196 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 44
  store i32 41, i32* %196, align 4
  %197 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 45
  store i32 42, i32* %197, align 4
  %198 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 46
  store i32 43, i32* %198, align 4
  %199 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 47
  store i32 44, i32* %199, align 4
  %200 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 48
  store i32 45, i32* %200, align 4
  %201 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 49
  store i32 46, i32* %201, align 4
  %202 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 50
  store i32 47, i32* %202, align 4
  %203 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 51
  store i32 48, i32* %203, align 4
  %204 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  store i32 49, i32* %204, align 4
  store i64 4070807658626890122, i64* %109, align 8
  %205 = call i8** @lk9254909843318351582(i64* %109)
  %206 = load i8*, i8** %205, align 8
  %207 = bitcast i8* %206 to i32 (i8*, i64, float*, i64)*
  %208 = call i32 %207(i8* %2, i64 1760, float* %3, i64 7040)
  store i32 %208, i32* %.reg2mem, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 984876108, i32* %4, align 4
  %209 = call i8** @bf7763123487515004013(i32* %4)
  %210 = load i8*, i8** %209, align 8
  indirectbr i8* %210, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %codeRepl
    i32 1, label %416
    i32 2, label %.preheader
    i32 3, label %622
    i32 4, label %822
    i32 5, label %codeRepl1
    i32 6, label %985
    i32 7, label %1042
    i32 8, label %1075
    i32 9, label %codeRepl2
    i32 10, label %codeRepl3
    i32 11, label %1221
    i32 12, label %1338
    i32 13, label %1828
    i32 14, label %codeRepl4
    i32 15, label %codeRepl5
    i32 16, label %codeRepl6
    i32 17, label %2188
    i32 18, label %2245
    i32 19, label %codeRepl7
    i32 20, label %2509
    i32 21, label %2810
    i32 22, label %3135
    i32 23, label %3315
    i32 24, label %3422
    i32 25, label %3493
    i32 26, label %codeRepl8
    i32 27, label %3853
    i32 28, label %4290
    i32 29, label %codeRepl9
    i32 30, label %4516
    i32 31, label %codeRepl10
    i32 32, label %4702
    i32 33, label %codeRepl11
    i32 34, label %4748
    i32 35, label %.loopexit
    i32 36, label %codeRepl12
    i32 37, label %4964
    i32 38, label %codeRepl13
    i32 39, label %5048
    i32 40, label %5122
    i32 41, label %codeRepl14
    i32 42, label %codeRepl15
    i32 43, label %5460
    i32 44, label %5576
    i32 45, label %5642
    i32 46, label %codeRepl16
    i32 47, label %5852
    i32 48, label %BogusBasicBlock
  ]

codeRepl:                                         ; preds = %BogusBasicBlock, %codeRepl, %loopStart
  store i64 4070807658626890127, i64* %109, align 8
  %211 = call i8** @lk9254909843318351582(i64* %109)
  %212 = load i8*, i8** %211, align 8
  %213 = bitcast i8* %212 to void (i32*, [53 x i32]*, i32*, i32*)*
  call void %213(i32* %.reg2mem, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem175)
  %214 = load i8*, i8** %56, align 8
  %215 = load i8, i8* %214, align 1
  %216 = and i64 %75, 3997290076129475034
  %217 = or i64 -3997290076129475035, %75
  %218 = sub i64 %217, -3997290076129475035
  %219 = or i64 %47, 2444687853952736666
  %220 = xor i64 %47, -1
  %221 = and i64 2444687853952736666, %220
  %222 = add i64 %221, %47
  %223 = xor i64 %218, %222
  %224 = xor i64 %223, %216
  %225 = xor i64 %224, 5776541534268736487
  %226 = xor i64 %225, %219
  %227 = or i64 %17, -1262573312205096076
  %228 = xor i64 %17, -1
  %229 = and i64 %228, -4055286635886646190
  %230 = and i64 %17, 4055286635886646189
  %231 = or i64 %229, %230
  %232 = xor i64 3009189642428094246, %231
  %233 = xor i64 %17, -1
  %234 = or i64 1262573312205096075, %233
  %235 = xor i64 %234, -1
  %236 = and i64 %235, -1
  %237 = or i64 %232, %236
  %238 = and i64 %37, -6001544733233439968
  %239 = or i64 6001544733233439967, %37
  %240 = sub i64 %239, 6001544733233439967
  %241 = or i64 %95, -5252490263755536131
  %242 = xor i64 %95, -1
  %243 = and i64 -5252490263755536131, %242
  %244 = add i64 %243, %95
  %245 = xor i64 %237, %240
  %246 = xor i64 %245, %241
  %247 = xor i64 %246, -3997608089381290066
  %248 = xor i64 %247, %238
  %249 = xor i64 %248, %227
  %250 = xor i64 %249, %244
  %251 = mul i64 %226, %250
  %252 = trunc i64 %251 to i8
  %253 = mul i8 %215, %252
  %254 = mul i8 %215, 2
  %255 = or i64 %13, -71622572852882845
  %256 = xor i64 %13, -1
  %257 = and i64 %256, 7324792278072570219
  %258 = and i64 %13, -7324792278072570220
  %259 = or i64 %257, %258
  %260 = xor i64 -7302753496359607544, %259
  %261 = xor i64 %13, -1
  %262 = or i64 71622572852882844, %261
  %263 = xor i64 %262, -1
  %264 = and i64 %263, -1
  %265 = or i64 %260, %264
  %266 = or i64 %53, 3476668440782477891
  %267 = xor i64 %53, -1
  %268 = and i64 %267, 1846585654917870223
  %269 = and i64 %53, -1846585654917870224
  %270 = or i64 %268, %269
  %271 = xor i64 2999388935002564812, %270
  %272 = xor i64 %53, -1
  %273 = or i64 -3476668440782477892, %272
  %274 = xor i64 %273, -1
  %275 = and i64 %274, -1
  %276 = or i64 %271, %275
  %277 = or i64 %95, -6140062494294176906
  %278 = xor i64 %95, -1
  %279 = and i64 -6140062494294176906, %278
  %280 = add i64 %279, %95
  %281 = xor i64 %277, %276
  %282 = xor i64 %281, %255
  %283 = xor i64 %282, %265
  %284 = xor i64 %283, %266
  %285 = xor i64 %284, %280
  %286 = xor i64 %285, 4148277306117531645
  %287 = add i64 %25, -7456610268561021994
  %288 = xor i64 -7456610268561021994, %25
  %289 = and i64 -7456610268561021994, %25
  %290 = mul i64 2, %289
  %291 = add i64 %288, %290
  %292 = or i64 %35, 3964834912305818394
  %293 = and i64 3964834912305818394, %35
  %294 = xor i64 3964834912305818394, %35
  %295 = or i64 %293, %294
  %296 = and i64 %47, 1072160113876341917
  %297 = xor i64 %47, -1
  %298 = or i64 -1072160113876341918, %297
  %299 = xor i64 %298, -1
  %300 = and i64 %299, -1
  %301 = xor i64 1295664490502871722, %296
  %302 = xor i64 %301, %287
  %303 = xor i64 %302, %295
  %304 = xor i64 %303, %292
  %305 = xor i64 %304, %291
  %306 = xor i64 %305, %300
  %307 = mul i64 %286, %306
  %308 = trunc i64 %307 to i8
  %309 = add i8 %308, %254
  %310 = mul i8 %253, %309
  %311 = srem i8 %310, 4
  %312 = icmp eq i8 %311, 0
  %313 = mul i8 %215, %215
  %314 = mul i8 %313, %215
  %315 = add i8 %314, %215
  %316 = srem i8 %315, 2
  %317 = icmp eq i8 %316, 0
  %318 = xor i1 %312, true
  %319 = xor i1 %317, true
  %320 = or i1 %318, %319
  %321 = xor i1 %320, true
  %322 = and i64 %35, -6281274435129276561
  %323 = or i64 6281274435129276560, %35
  %324 = sub i64 %323, 6281274435129276560
  %325 = and i64 %83, 8166918624283879564
  %326 = xor i64 %83, -1
  %327 = xor i64 8166918624283879564, %326
  %328 = and i64 %327, 8166918624283879564
  %329 = and i64 %49, 3491693956474117485
  %330 = xor i64 %49, -1
  %331 = or i64 -3491693956474117486, %330
  %332 = xor i64 %331, -1
  %333 = and i64 %332, -1
  %334 = xor i64 %329, %322
  %335 = xor i64 %334, 2964695021848393113
  %336 = xor i64 %335, %324
  %337 = xor i64 %336, %325
  %338 = xor i64 %337, %328
  %339 = xor i64 %338, %333
  %340 = and i64 %51, -7493508008698264743
  %341 = xor i64 %51, -1
  %342 = xor i64 -7493508008698264743, %341
  %343 = and i64 %342, -7493508008698264743
  %344 = or i64 %144, 918236035190705227
  %345 = xor i64 %144, -1
  %346 = and i64 918236035190705227, %345
  %347 = add i64 %346, %144
  %348 = and i64 %81, -4503445430369386397
  %349 = xor i64 %81, -1
  %350 = or i64 4503445430369386396, %349
  %351 = xor i64 %350, -1
  %352 = and i64 %351, -1
  %353 = xor i64 %347, %352
  %354 = xor i64 %353, %344
  %355 = xor i64 %354, %348
  %356 = xor i64 %355, 7239788633438293673
  %357 = xor i64 %356, %343
  %358 = xor i64 %357, %340
  %359 = mul i64 %339, %358
  %360 = trunc i64 %359 to i1
  %361 = and i1 %321, %360
  %362 = select i1 %361, i32 984876147, i32 984876128
  %363 = xor i32 %362, 1469540216
  %364 = or i64 %47, 4923650639873317935
  %365 = xor i64 %47, -1
  %366 = and i64 4923650639873317935, %365
  %367 = add i64 %366, %47
  %368 = or i64 %128, -5320336292562104258
  %369 = xor i64 %128, -1
  %370 = and i64 %369, -892933572480914740
  %371 = and i64 %128, 892933572480914739
  %372 = or i64 %370, %371
  %373 = xor i64 5022067674364426994, %372
  %374 = xor i64 %128, -1
  %375 = or i64 5320336292562104257, %374
  %376 = xor i64 %375, -1
  %377 = and i64 %376, -1
  %378 = or i64 %373, %377
  %379 = add i64 %122, 1827193935545468287
  %380 = add i64 7794883382420867601, %122
  %381 = sub i64 %380, 5967689446875399314
  %382 = xor i64 %381, %364
  %383 = xor i64 %382, %367
  %384 = xor i64 %383, %378
  %385 = xor i64 %384, %379
  %386 = xor i64 %385, %368
  %387 = xor i64 %386, -6424093228171428603
  %388 = or i64 %81, 5140370715815764672
  %389 = xor i64 %81, -1
  %390 = and i64 %389, -7607406124988177213
  %391 = and i64 %81, 7607406124988177212
  %392 = or i64 %390, %391
  %393 = xor i64 -3370008082574342653, %392
  %394 = xor i64 %81, -1
  %395 = or i64 -5140370715815764673, %394
  %396 = xor i64 %395, -1
  %397 = and i64 %396, -1
  %398 = or i64 %393, %397
  %399 = add i64 %91, -5004620968455561687
  %400 = add i64 5579938465411587994, %91
  %401 = add i64 %400, 7862184639842401935
  %402 = add i64 %21, 3397179523377206480
  %403 = add i64 -5489122309701382375, %21
  %404 = sub i64 %403, -8886301833078588855
  %405 = xor i64 %388, %404
  %406 = xor i64 %405, %402
  %407 = xor i64 %406, -2970944477126328913
  %408 = xor i64 %407, %399
  %409 = xor i64 %408, %401
  %410 = xor i64 %409, %398
  %411 = mul i64 %387, %410
  %412 = trunc i64 %411 to i32
  %413 = xor i32 %363, %412
  store i32 %413, i32* %4, align 4
  %414 = call i8** @bf7763123487515004013(i32* %4)
  %415 = load i8*, i8** %414, align 8
  indirectbr i8* %415, [label %loopEnd, label %codeRepl]

416:                                              ; preds = %416, %loopStart
  store i64 4070807658626890115, i64* %109, align 8
  %417 = call i8** @lk9254909843318351582(i64* %109)
  %418 = load i8*, i8** %417, align 8
  %419 = bitcast i8* %418 to i32 (float, float*, float*, i8*, float*)*
  %420 = call i32 %419(float 0.000000e+00, float* %0, float* %1, i8* %2, float* %3)
  store i32 %420, i32* %.reg2mem10, align 4
  %.reload22 = load i32, i32* %.reg2mem10, align 4
  %421 = icmp eq i32 %.reload22, 0
  %422 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 5
  %423 = load i32, i32* %422, align 4
  %424 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 3
  %425 = load i32, i32* %424, align 4
  %426 = add i32 %423, 1865712753
  %427 = add i32 %426, %425
  %428 = or i64 %11, 8299267832021523521
  %429 = xor i64 %11, -1
  %430 = and i64 8299267832021523521, %429
  %431 = add i64 %430, %11
  %432 = add i64 %87, -3049560700383527895
  %433 = sub i64 0, %87
  %434 = sub i64 -3049560700383527895, %433
  %435 = xor i64 %434, %431
  %436 = xor i64 %435, %432
  %437 = xor i64 %436, -4584628822824329823
  %438 = xor i64 %437, %428
  %439 = add i64 %61, -2732298754180901742
  %440 = sub i64 0, %61
  %441 = sub i64 -2732298754180901742, %440
  %442 = or i64 %93, -7956364538032442068
  %443 = xor i64 %93, -1
  %444 = and i64 %443, 5074782113668036556
  %445 = and i64 %93, -5074782113668036557
  %446 = or i64 %444, %445
  %447 = xor i64 -2884432507921513760, %446
  %448 = xor i64 %93, -1
  %449 = or i64 7956364538032442067, %448
  %450 = xor i64 %449, -1
  %451 = and i64 %450, -1
  %452 = or i64 %447, %451
  %453 = and i64 %110, -7769044503158431374
  %454 = xor i64 %110, -1
  %455 = or i64 7769044503158431373, %454
  %456 = xor i64 %455, -1
  %457 = and i64 %456, -1
  %458 = xor i64 -6432451103822572335, %439
  %459 = xor i64 %458, %441
  %460 = xor i64 %459, %442
  %461 = xor i64 %460, %457
  %462 = xor i64 %461, %453
  %463 = xor i64 %462, %452
  %464 = mul i64 %438, %463
  %465 = trunc i64 %464 to i32
  %466 = sub i32 %427, %465
  %467 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 36
  %468 = load i32, i32* %467, align 4
  %469 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %470 = load i32, i32* %469, align 4
  %471 = sub i32 %468, %470
  %472 = select i1 %421, i32 %466, i32 %471
  store i32 %472, i32* %dispatcher, align 4
  %.reload11 = load i32, i32* %.reg2mem10, align 4
  store i32 %.reload11, i32* %.reg2mem169, align 4
  store i1 true, i1* %.reg2mem171, align 1
  %473 = load i8*, i8** %36, align 8
  %474 = load i8, i8* %473, align 1
  %475 = and i8 %474, 1
  %476 = icmp eq i8 %475, 0
  %477 = mul i8 %474, %474
  %478 = add i8 %477, %474
  %479 = mul i8 %478, 3
  %480 = srem i8 %479, 2
  %481 = icmp eq i8 %480, 0
  %482 = or i1 %476, %481
  %483 = select i1 %482, i32 984876101, i32 984876128
  %484 = xor i32 %483, 37
  store i32 %484, i32* %4, align 4
  %485 = call i8** @bf7763123487515004013(i32* %4)
  %486 = load i8*, i8** %485, align 8
  indirectbr i8* %486, [label %loopEnd, label %416]

.preheader:                                       ; preds = %.preheader, %loopStart
  %.reload21 = load i32, i32* %.reg2mem10, align 4
  %487 = mul i32 %.reload21, 2
  %.reload20 = load i32, i32* %.reg2mem10, align 4
  %488 = mul i32 %.reload20, 2
  store i32 %488, i32* %.reg2mem23, align 4
  %.reload29 = load i32, i32* %.reg2mem23, align 4
  %489 = add i32 2, %.reload29
  store i32 %489, i32* %.reg2mem30, align 4
  %.reload32 = load i32, i32* %.reg2mem30, align 4
  %490 = mul i32 %487, %.reload32
  %491 = and i64 %148, -5082433479999327037
  %492 = or i64 5082433479999327036, %148
  %493 = sub i64 %492, 5082433479999327036
  %494 = sext i32 %dispatcher1 to i64
  %495 = and i64 %494, -3417137395191083886
  %496 = xor i64 %494, -1
  %497 = or i64 3417137395191083885, %496
  %498 = xor i64 %497, -1
  %499 = and i64 %498, -1
  %500 = xor i64 %495, %491
  %501 = xor i64 %500, -4085988418968327219
  %502 = xor i64 %501, %499
  %503 = xor i64 %502, %493
  %504 = add i64 %27, -2946083916701889692
  %505 = and i64 -2946083916701889692, %27
  %506 = or i64 -2946083916701889692, %27
  %507 = add i64 %505, %506
  %508 = add i64 %69, -2731970805269002589
  %509 = xor i64 -2731970805269002589, %69
  %510 = and i64 -2731970805269002589, %69
  %511 = mul i64 2, %510
  %512 = add i64 %509, %511
  %513 = xor i64 %508, %507
  %514 = xor i64 %513, %504
  %515 = xor i64 %514, %512
  %516 = xor i64 %515, 1801060376589755412
  %517 = mul i64 %503, %516
  %518 = trunc i64 %517 to i32
  %519 = srem i32 %490, %518
  store i32 %519, i32* %.reg2mem33, align 4
  %.reload43 = load i32, i32* %.reg2mem33, align 4
  %520 = icmp eq i32 %.reload43, 0
  store i1 %520, i1* %.reg2mem44, align 1
  %.reload19 = load i32, i32* %.reg2mem10, align 4
  %521 = mul i32 %.reload19, %.reload19
  %.reload18 = load i32, i32* %.reg2mem10, align 4
  %522 = add i32 %521, %.reload18
  store i32 %522, i32* %.reg2mem47, align 4
  %.reload8 = load i32, i32* %.reg2mem, align 4
  %523 = srem i32 %.reload8, 2
  %524 = and i64 %21, -5004858093926549387
  %525 = xor i64 %21, -1
  %526 = or i64 5004858093926549386, %525
  %527 = xor i64 %526, -1
  %528 = and i64 %527, -1
  %529 = or i64 %45, 4365546266216530386
  %530 = xor i64 %45, -1
  %531 = and i64 4365546266216530386, %530
  %532 = add i64 %531, %45
  %533 = xor i64 %529, %528
  %534 = xor i64 %533, %532
  %535 = xor i64 %534, -4679453026931057907
  %536 = xor i64 %535, %524
  %537 = and i64 %5, -4033422431847935694
  %538 = xor i64 %5, -1
  %539 = xor i64 -4033422431847935694, %538
  %540 = and i64 %539, -4033422431847935694
  %541 = or i64 %11, 7479710375705237327
  %542 = xor i64 %11, -1
  %543 = and i64 7479710375705237327, %542
  %544 = add i64 %543, %11
  %545 = xor i64 %541, 0
  %546 = xor i64 %545, %540
  %547 = xor i64 %546, %544
  %548 = xor i64 %547, %537
  %549 = mul i64 %536, %548
  %550 = trunc i64 %549 to i32
  %551 = icmp eq i32 %523, %550
  %552 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 5
  %553 = load i32, i32* %552, align 4
  %554 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 4
  %555 = load i32, i32* %554, align 4
  %556 = add i32 %553, %555
  %557 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 7
  %558 = load i32, i32* %557, align 4
  %559 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 6
  %560 = load i32, i32* %559, align 4
  %561 = add i32 %558, %560
  %562 = select i1 %551, i32 %556, i32 %561
  store i32 %562, i32* %dispatcher, align 4
  %563 = load i8*, i8** %54, align 8
  %564 = load i8, i8* %563, align 1
  %565 = and i8 %564, 1
  %566 = icmp eq i8 %565, 1
  %567 = mul i8 %564, %564
  %568 = add i8 %567, %564
  %569 = and i64 %57, 6458311442965568648
  %570 = xor i64 %57, -1
  %571 = or i64 -6458311442965568649, %570
  %572 = xor i64 %571, -1
  %573 = and i64 %572, -1
  %574 = add i64 %5, -1352460322874298529
  %575 = add i64 -5523785632792000316, %5
  %576 = sub i64 %575, -4171325309917701787
  %577 = or i64 %67, -4208697605835412766
  %578 = xor i64 %67, -1
  %579 = and i64 %578, -7250891278040456646
  %580 = and i64 %67, 7250891278040456645
  %581 = or i64 %579, %580
  %582 = xor i64 6829738658460797144, %581
  %583 = xor i64 %67, -1
  %584 = or i64 4208697605835412765, %583
  %585 = xor i64 %584, -1
  %586 = and i64 %585, -1
  %587 = or i64 %582, %586
  %588 = xor i64 %573, %574
  %589 = xor i64 %588, %577
  %590 = xor i64 %589, %576
  %591 = xor i64 %590, -4885648398340692575
  %592 = xor i64 %591, %569
  %593 = xor i64 %592, %587
  %594 = add i64 %126, 6507644903129186044
  %595 = xor i64 6507644903129186044, %126
  %596 = and i64 6507644903129186044, %126
  %597 = mul i64 2, %596
  %598 = add i64 %595, %597
  %599 = or i64 %61, -887017510578168804
  %600 = and i64 -887017510578168804, %61
  %601 = xor i64 -887017510578168804, %61
  %602 = or i64 %600, %601
  %603 = and i64 %75, -5624079790436978062
  %604 = xor i64 %75, -1
  %605 = xor i64 -5624079790436978062, %604
  %606 = and i64 %605, -5624079790436978062
  %607 = xor i64 %603, %594
  %608 = xor i64 %607, %598
  %609 = xor i64 %608, %599
  %610 = xor i64 %609, %602
  %611 = xor i64 %610, %606
  %612 = xor i64 %611, -2320581147077804862
  %613 = mul i64 %593, %612
  %614 = trunc i64 %613 to i8
  %615 = srem i8 %568, %614
  %616 = icmp eq i8 %615, 0
  %617 = or i1 %566, %616
  %618 = select i1 %617, i32 984876105, i32 984876128
  %619 = xor i32 %618, 41
  store i32 %619, i32* %4, align 4
  %620 = call i8** @bf7763123487515004013(i32* %4)
  %621 = load i8*, i8** %620, align 8
  indirectbr i8* %621, [label %loopEnd, label %.preheader]

622:                                              ; preds = %622, %loopStart
  %623 = mul i64 30, 97
  %.reload49 = load i32, i32* %.reg2mem47, align 4
  %624 = and i64 %51, -5362690926818122569
  %625 = or i64 5362690926818122568, %51
  %626 = sub i64 %625, 5362690926818122568
  %627 = or i64 %59, 8999247096082727580
  %628 = xor i64 %59, -1
  %629 = and i64 8999247096082727580, %628
  %630 = add i64 %629, %59
  %631 = or i64 %122, -8837278770484562870
  %632 = xor i64 %122, -1
  %633 = and i64 -8837278770484562870, %632
  %634 = add i64 %633, %122
  %635 = xor i64 %627, %631
  %636 = xor i64 %635, %634
  %637 = xor i64 %636, %626
  %638 = xor i64 %637, %630
  %639 = xor i64 %638, %624
  %640 = xor i64 %639, 8932758391551849001
  %641 = add i64 %93, 5552659490118101263
  %642 = sub i64 0, %93
  %643 = add i64 -5552659490118101263, %642
  %644 = sub i64 0, %643
  %645 = or i64 %85, 1990487132696431144
  %646 = xor i64 %85, -1
  %647 = and i64 %646, -8619464650270997316
  %648 = and i64 %85, 8619464650270997315
  %649 = or i64 %647, %648
  %650 = xor i64 -7782744546691723628, %649
  %651 = xor i64 %85, -1
  %652 = or i64 -1990487132696431145, %651
  %653 = xor i64 %652, -1
  %654 = and i64 %653, -1
  %655 = or i64 %650, %654
  %656 = xor i64 %641, %655
  %657 = xor i64 %656, %645
  %658 = xor i64 %657, -6239712491645004750
  %659 = xor i64 %658, %644
  %660 = mul i64 %640, %659
  %661 = trunc i64 %660 to i32
  %662 = srem i32 %.reload49, %661
  store i32 %662, i32* %.reg2mem50, align 4
  %663 = add i64 %17, 5170193105709448331
  %664 = sub i64 0, %17
  %665 = sub i64 5170193105709448331, %664
  %666 = or i64 %17, 152041148209725604
  %667 = and i64 152041148209725604, %17
  %668 = xor i64 152041148209725604, %17
  %669 = or i64 %667, %668
  %670 = or i64 %47, -8162466730349316362
  %671 = and i64 -8162466730349316362, %47
  %672 = xor i64 -8162466730349316362, %47
  %673 = or i64 %671, %672
  %674 = xor i64 %666, %665
  %675 = xor i64 %674, %670
  %676 = xor i64 %675, %673
  %677 = xor i64 %676, %663
  %678 = xor i64 %677, -9119632378708494385
  %679 = xor i64 %678, %669
  %680 = add i64 %97, -1043602993881331261
  %681 = sub i64 0, %97
  %682 = add i64 1043602993881331261, %681
  %683 = sub i64 0, %682
  %684 = add i64 %89, -3897970135007571242
  %685 = xor i64 -3897970135007571242, %89
  %686 = and i64 -3897970135007571242, %89
  %687 = mul i64 2, %686
  %688 = add i64 %685, %687
  %689 = add i64 %67, -409828436375065598
  %690 = add i64 8272554672968234874, %67
  %691 = sub i64 %690, 8682383109343300472
  %692 = xor i64 %684, %683
  %693 = xor i64 %692, %680
  %694 = xor i64 %693, -8197472594437318947
  %695 = xor i64 %694, %689
  %696 = xor i64 %695, %688
  %697 = xor i64 %696, %691
  %698 = mul i64 %679, %697
  %699 = sub i64 -8890168222723180669, %698
  %.reload52 = load i32, i32* %.reg2mem50, align 4
  %700 = icmp eq i32 %.reload52, 0
  store i1 %700, i1* %.reg2mem53, align 1
  %701 = sdiv i64 42, 42
  %.reload46 = load i1, i1* %.reg2mem44, align 1
  %.reload55 = load i1, i1* %.reg2mem53, align 1
  %702 = or i1 %.reload46, %.reload55
  store i1 %702, i1* %.reg2mem56, align 1
  %.reload7 = load i32, i32* %.reg2mem, align 4
  %703 = srem i32 %.reload7, 2
  %704 = icmp eq i32 %703, 0
  %.reload28 = load i32, i32* %.reg2mem23, align 4
  %705 = mul i32 %.reload28, 2
  %.reload27 = load i32, i32* %.reg2mem23, align 4
  %706 = mul i32 %.reload27, 2
  %707 = add i32 2, %706
  %708 = mul i32 %705, %707
  %709 = srem i32 %708, 4
  %710 = icmp eq i32 %709, 0
  %.reload26 = load i32, i32* %.reg2mem23, align 4
  %711 = mul i32 %.reload26, %.reload26
  %.reload25 = load i32, i32* %.reg2mem23, align 4
  %712 = mul i32 %711, %.reload25
  %.reload24 = load i32, i32* %.reg2mem23, align 4
  %713 = add i32 %712, %.reload24
  %714 = srem i32 %713, 2
  %715 = icmp eq i32 %714, 0
  %716 = xor i1 %710, true
  %717 = xor i1 %715, true
  %718 = or i1 %716, %717
  %719 = xor i1 %718, true
  %720 = and i1 %719, true
  store i1 %720, i1* %.reg2mem58, align 1
  %721 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 6
  %722 = load i32, i32* %721, align 4
  %723 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 5
  %724 = load i32, i32* %723, align 4
  %725 = add i32 %722, %724
  %726 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 7
  %727 = load i32, i32* %726, align 4
  %728 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %729 = load i32, i32* %728, align 4
  %730 = srem i32 %727, %729
  %.reload60 = load i1, i1* %.reg2mem58, align 1
  %731 = select i1 %.reload60, i32 %725, i32 %730
  store i32 %731, i32* %dispatcher, align 4
  %732 = load i8*, i8** %102, align 8
  %733 = load i8, i8* %732, align 1
  %734 = mul i8 %733, 2
  %735 = mul i8 %733, 2
  %736 = add i8 -65, %735
  %737 = and i64 %150, 1161197483230860502
  %738 = xor i64 %150, -1
  %739 = xor i64 1161197483230860502, %738
  %740 = and i64 %739, 1161197483230860502
  %741 = and i64 %5, 2218523035787385422
  %742 = or i64 -2218523035787385423, %5
  %743 = sub i64 %742, -2218523035787385423
  %744 = xor i64 -5265601393883691295, %743
  %745 = xor i64 %744, %737
  %746 = xor i64 %745, %740
  %747 = xor i64 %746, %741
  %748 = or i64 %142, 6306727907219967138
  %749 = and i64 6306727907219967138, %142
  %750 = xor i64 6306727907219967138, %142
  %751 = or i64 %749, %750
  %752 = add i64 %33, 555110833564934256
  %753 = sub i64 0, %33
  %754 = add i64 -555110833564934256, %753
  %755 = sub i64 0, %754
  %756 = xor i64 %748, %751
  %757 = xor i64 %756, -7793819381188599459
  %758 = xor i64 %757, %755
  %759 = xor i64 %758, %752
  %760 = mul i64 %747, %759
  %761 = trunc i64 %760 to i8
  %762 = sub i8 %736, %761
  %763 = mul i8 %734, %762
  %764 = srem i8 %763, 4
  %765 = icmp eq i8 %764, 0
  %766 = mul i8 %733, %733
  %767 = add i8 %766, 16
  %768 = add i8 %767, %733
  %769 = or i64 %31, 4897728957468488317
  %770 = xor i64 %31, -1
  %771 = and i64 %770, -519307856912005291
  %772 = and i64 %31, 519307856912005290
  %773 = or i64 %771, %772
  %774 = xor i64 -4957558528027036376, %773
  %775 = xor i64 %31, -1
  %776 = or i64 -4897728957468488318, %775
  %777 = xor i64 %776, -1
  %778 = and i64 %777, -1
  %779 = or i64 %774, %778
  %780 = or i64 %112, -7095128501163668453
  %781 = xor i64 %112, -1
  %782 = and i64 -7095128501163668453, %781
  %783 = add i64 %782, %112
  %784 = and i64 %33, 6594993125614240869
  %785 = xor i64 %33, -1
  %786 = xor i64 6594993125614240869, %785
  %787 = and i64 %786, 6594993125614240869
  %788 = xor i64 8932687579263135019, %779
  %789 = xor i64 %788, %769
  %790 = xor i64 %789, %787
  %791 = xor i64 %790, %783
  %792 = xor i64 %791, %780
  %793 = xor i64 %792, %784
  %794 = add i64 %138, 4038163017241569682
  %795 = sub i64 0, %138
  %796 = sub i64 4038163017241569682, %795
  %797 = or i64 %81, 4419979781577627554
  %798 = and i64 4419979781577627554, %81
  %799 = xor i64 4419979781577627554, %81
  %800 = or i64 %798, %799
  %801 = and i64 %43, 713563947327142180
  %802 = xor i64 %43, -1
  %803 = xor i64 713563947327142180, %802
  %804 = and i64 %803, 713563947327142180
  %805 = xor i64 %801, %804
  %806 = xor i64 %805, %796
  %807 = xor i64 %806, 8225358964032182320
  %808 = xor i64 %807, %794
  %809 = xor i64 %808, %797
  %810 = xor i64 %809, %800
  %811 = mul i64 %793, %810
  %812 = trunc i64 %811 to i8
  %813 = sub i8 %768, %812
  %814 = srem i8 %813, 2
  %815 = icmp eq i8 %814, 0
  %816 = and i1 %765, %815
  %817 = select i1 %816, i32 984876135, i32 984876128
  %818 = xor i32 %817, -167655143
  %819 = xor i32 %818, -167655138
  store i32 %819, i32* %4, align 4
  %820 = call i8** @bf7763123487515004013(i32* %4)
  %821 = load i8*, i8** %820, align 8
  indirectbr i8* %821, [label %loopEnd, label %622]

822:                                              ; preds = %822, %loopStart
  %823 = or i64 %45, 1932826879234628785
  %824 = and i64 1932826879234628785, %45
  %825 = xor i64 1932826879234628785, %45
  %826 = or i64 %824, %825
  %827 = or i64 %128, 1676007179198446103
  %828 = and i64 1676007179198446103, %128
  %829 = xor i64 1676007179198446103, %128
  %830 = or i64 %828, %829
  %831 = add i64 %79, -5909924698220895807
  %832 = xor i64 -5909924698220895807, %79
  %833 = and i64 -5909924698220895807, %79
  %834 = mul i64 2, %833
  %835 = add i64 %832, %834
  %836 = xor i64 %831, %835
  %837 = xor i64 %836, %830
  %838 = xor i64 %837, -7236628087639356217
  %839 = xor i64 %838, %827
  %840 = xor i64 %839, %826
  %841 = xor i64 %840, %823
  %842 = and i64 %95, -8323497649828016865
  %843 = or i64 8323497649828016864, %95
  %844 = sub i64 %843, 8323497649828016864
  %845 = add i64 %73, 5817948752267323955
  %846 = sub i64 0, %73
  %847 = add i64 -5817948752267323955, %846
  %848 = sub i64 0, %847
  %849 = xor i64 %842, %845
  %850 = xor i64 %849, %848
  %851 = xor i64 %850, 9132916014014450446
  %852 = xor i64 %851, %844
  %853 = mul i64 %841, %852
  %854 = add i64 113, %853
  %855 = sub i64 126, 83
  %856 = sub i64 0, -15
  %857 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 24
  %858 = load i32, i32* %857, align 4
  %859 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 18
  %860 = load i32, i32* %859, align 4
  %861 = sub i32 %858, 2013953939
  %862 = sub i32 %861, %860
  %863 = add i32 %862, 2013953939
  %864 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 5
  %865 = load i32, i32* %864, align 4
  %866 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %867 = load i32, i32* %866, align 4
  %868 = srem i32 %865, %867
  %.reload59 = load i1, i1* %.reg2mem58, align 1
  %869 = select i1 %.reload59, i32 %863, i32 %868
  store i32 %869, i32* %dispatcher, align 4
  %870 = load i8*, i8** %8, align 8
  %871 = load i8, i8* %870, align 1
  %872 = mul i8 %871, %871
  %873 = add i8 %872, %871
  %874 = mul i8 %873, 3
  %875 = srem i8 %874, 2
  %876 = add i64 %89, -4352377899529779548
  %877 = add i64 -510978118327695450, %89
  %878 = sub i64 %877, 3841399781202084098
  %879 = and i64 %49, -9218207375105296128
  %880 = xor i64 %49, -1
  %881 = xor i64 -9218207375105296128, %880
  %882 = and i64 %881, -9218207375105296128
  %883 = xor i64 %878, %876
  %884 = xor i64 %883, %882
  %885 = xor i64 %884, %879
  %886 = xor i64 %885, -3312470428818411169
  %887 = or i64 %138, 5535791362196063379
  %888 = xor i64 %138, -1
  %889 = and i64 5535791362196063379, %888
  %890 = add i64 %889, %138
  %891 = or i64 %103, -1686394695089163379
  %892 = and i64 -1686394695089163379, %103
  %893 = xor i64 -1686394695089163379, %103
  %894 = or i64 %892, %893
  %895 = or i64 %23, -3414258568853267424
  %896 = xor i64 %23, -1
  %897 = and i64 %896, 785657113520729677
  %898 = and i64 %23, -785657113520729678
  %899 = or i64 %897, %898
  %900 = xor i64 -2704082750343499155, %899
  %901 = xor i64 %23, -1
  %902 = or i64 3414258568853267423, %901
  %903 = xor i64 %902, -1
  %904 = and i64 %903, -1
  %905 = or i64 %900, %904
  %906 = xor i64 0, %895
  %907 = xor i64 %906, %894
  %908 = xor i64 %907, %905
  %909 = xor i64 %908, %891
  %910 = xor i64 %909, %890
  %911 = xor i64 %910, %887
  %912 = mul i64 %886, %911
  %913 = trunc i64 %912 to i8
  %914 = icmp eq i8 %875, %913
  %915 = mul i8 %871, %871
  %916 = sub i8 0, %871
  %917 = sub i8 %915, %916
  %918 = srem i8 %917, 2
  %919 = or i64 %112, 881189914172857881
  %920 = xor i64 %112, -1
  %921 = and i64 881189914172857881, %920
  %922 = add i64 %921, %112
  %923 = add i64 %15, 4578917770135143662
  %924 = xor i64 4578917770135143662, %15
  %925 = and i64 4578917770135143662, %15
  %926 = mul i64 2, %925
  %927 = add i64 %924, %926
  %928 = or i64 %53, 3550059006695860563
  %929 = and i64 3550059006695860563, %53
  %930 = xor i64 3550059006695860563, %53
  %931 = or i64 %929, %930
  %932 = xor i64 %928, %927
  %933 = xor i64 %932, 4177989614042492643
  %934 = xor i64 %933, %919
  %935 = xor i64 %934, %922
  %936 = xor i64 %935, %923
  %937 = xor i64 %936, %931
  %938 = add i64 %61, -4829963198739581804
  %939 = sub i64 0, %61
  %940 = sub i64 -4829963198739581804, %939
  %941 = or i64 %83, 8925824727740553197
  %942 = and i64 8925824727740553197, %83
  %943 = xor i64 8925824727740553197, %83
  %944 = or i64 %942, %943
  %945 = and i64 %63, 3119461943142832037
  %946 = or i64 -3119461943142832038, %63
  %947 = sub i64 %946, -3119461943142832038
  %948 = xor i64 %941, %940
  %949 = xor i64 %948, %938
  %950 = xor i64 %949, %947
  %951 = xor i64 %950, %945
  %952 = xor i64 %951, %944
  %953 = xor i64 %952, 0
  %954 = mul i64 %937, %953
  %955 = trunc i64 %954 to i8
  %956 = icmp eq i8 %918, %955
  %957 = xor i1 %914, true
  %958 = xor i1 %956, true
  %959 = or i1 %957, %958
  %960 = xor i1 %959, true
  %961 = and i1 %960, true
  %962 = select i1 %961, i32 984876128, i32 984876128
  %963 = xor i32 %962, -1
  %964 = and i32 %963, 0
  %965 = and i32 %962, -1
  %966 = or i32 %964, %965
  store i32 %966, i32* %4, align 4
  %967 = call i8** @bf7763123487515004013(i32* %4)
  %968 = load i8*, i8** %967, align 8
  indirectbr i8* %968, [label %loopEnd, label %822]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 4070807658626890143, i64* %109, align 8
  %969 = call i8** @lk9254909843318351582(i64* %109)
  %970 = load i8*, i8** %969, align 8
  %971 = bitcast i8* %970 to void ([53 x i32]*, i32*)*
  call void %971([53 x i32]* %lookupTable, i32* %dispatcher)
  %972 = load i8*, i8** %82, align 8
  %973 = load i8, i8* %972, align 1
  %974 = and i8 %973, 1
  %975 = icmp eq i8 %974, 1
  %976 = mul i8 %973, %973
  %977 = add i8 %976, %973
  %978 = srem i8 %977, 2
  %979 = icmp eq i8 %978, 0
  %980 = or i1 %975, %979
  %981 = select i1 %980, i32 984876150, i32 984876128
  %982 = xor i32 %981, 22
  store i32 %982, i32* %4, align 4
  %983 = call i8** @bf7763123487515004013(i32* %4)
  %984 = load i8*, i8** %983, align 8
  indirectbr i8* %984, [label %loopEnd, label %codeRepl1]

985:                                              ; preds = %985, %loopStart
  %986 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 8
  %987 = load i32, i32* %986, align 4
  %988 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 6
  %989 = load i32, i32* %988, align 4
  %990 = sub i32 0, %989
  %991 = sub i32 %987, %990
  store i32 %991, i32* %dispatcher, align 4
  %.reload51 = load i32, i32* %.reg2mem50, align 4
  %.reload54 = load i1, i1* %.reg2mem53, align 1
  %.reload57 = load i1, i1* %.reg2mem56, align 1
  store i32 %.reload51, i32* %.reg2mem143, align 4
  store i1 %.reload57, i1* %.reg2mem145, align 1
  %992 = load i8*, i8** %36, align 8
  %993 = load i8, i8* %992, align 1
  %994 = xor i8 %993, -2
  %995 = and i8 %994, %993
  %996 = icmp eq i8 %995, 1
  %997 = mul i8 %993, %993
  %998 = add i8 %997, %993
  %999 = and i64 %136, -4593303427515055355
  %1000 = or i64 4593303427515055354, %136
  %1001 = sub i64 %1000, 4593303427515055354
  %1002 = add i64 %29, -2741838724681933211
  %1003 = sub i64 0, %29
  %1004 = sub i64 -2741838724681933211, %1003
  %1005 = and i64 %146, -402385874144338626
  %1006 = xor i64 %146, -1
  %1007 = xor i64 -402385874144338626, %1006
  %1008 = and i64 %1007, -402385874144338626
  %1009 = xor i64 -2886368556616064653, %1001
  %1010 = xor i64 %1009, %1002
  %1011 = xor i64 %1010, %1004
  %1012 = xor i64 %1011, %1008
  %1013 = xor i64 %1012, %999
  %1014 = xor i64 %1013, %1005
  %1015 = or i64 %97, 7121667346085542692
  %1016 = and i64 7121667346085542692, %97
  %1017 = xor i64 7121667346085542692, %97
  %1018 = or i64 %1016, %1017
  %1019 = add i64 %128, -3713788731634073564
  %1020 = add i64 -5402059834702710754, %128
  %1021 = sub i64 %1020, -1688271103068637190
  %1022 = add i64 %5, 6970330541585234000
  %1023 = sub i64 0, %5
  %1024 = sub i64 6970330541585234000, %1023
  %1025 = xor i64 %1019, %1024
  %1026 = xor i64 %1025, %1021
  %1027 = xor i64 %1026, %1022
  %1028 = xor i64 %1027, %1015
  %1029 = xor i64 %1028, -6458197403841702026
  %1030 = xor i64 %1029, %1018
  %1031 = mul i64 %1014, %1030
  %1032 = trunc i64 %1031 to i8
  %1033 = srem i8 %998, %1032
  %1034 = icmp eq i8 %1033, 0
  %1035 = and i1 %996, %1034
  %1036 = xor i1 %996, %1034
  %1037 = or i1 %1035, %1036
  %1038 = select i1 %1037, i32 984876155, i32 984876128
  %1039 = xor i32 %1038, 27
  store i32 %1039, i32* %4, align 4
  %1040 = call i8** @bf7763123487515004013(i32* %4)
  %1041 = load i8*, i8** %1040, align 8
  indirectbr i8* %1041, [label %loopEnd, label %985]

1042:                                             ; preds = %1042, %loopStart
  %.reload48 = load i32, i32* %.reg2mem47, align 4
  %1043 = srem i32 %.reload48, 2
  %1044 = icmp eq i32 %1043, 0
  %1045 = xor i1 %1044, true
  %.reload45 = load i1, i1* %.reg2mem44, align 1
  %1046 = and i1 %.reload45, %1045
  %1047 = add i1 %1046, %1044
  %1048 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  %1049 = load i32, i32* %1048, align 4
  %1050 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 15
  %1051 = load i32, i32* %1050, align 4
  %1052 = add i32 %1049, -1634309174
  %1053 = sub i32 %1052, %1051
  %1054 = sub i32 %1053, -1634309174
  store i32 %1054, i32* %dispatcher, align 4
  store i32 %1043, i32* %.reg2mem143, align 4
  store i1 %1047, i1* %.reg2mem145, align 1
  %1055 = load i8*, i8** %42, align 8
  %1056 = load i8, i8* %1055, align 1
  %1057 = mul i8 %1056, %1056
  %1058 = add i8 %1057, %1056
  %1059 = mul i8 %1058, 3
  %1060 = srem i8 %1059, 2
  %1061 = icmp eq i8 %1060, 0
  %1062 = mul i8 %1056, %1056
  %1063 = add i8 %1062, %1056
  %1064 = srem i8 %1063, 2
  %1065 = icmp eq i8 %1064, 0
  %1066 = xor i1 %1061, true
  %1067 = xor i1 %1065, true
  %1068 = or i1 %1066, %1067
  %1069 = xor i1 %1068, true
  %1070 = and i1 %1069, true
  %1071 = select i1 %1070, i32 984876103, i32 984876128
  %1072 = xor i32 %1071, 39
  store i32 %1072, i32* %4, align 4
  %1073 = call i8** @bf7763123487515004013(i32* %4)
  %1074 = load i8*, i8** %1073, align 8
  indirectbr i8* %1074, [label %loopEnd, label %1042]

1075:                                             ; preds = %1075, %loopStart
  %.reload146 = load i1, i1* %.reg2mem145, align 1
  %.reload144 = load i32, i32* %.reg2mem143, align 4
  store i32 %.reload144, i32* %.reg2mem61, align 4
  %1076 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 9
  %1077 = load i32, i32* %1076, align 4
  %1078 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 7
  %1079 = load i32, i32* %1078, align 4
  %1080 = add i32 %1077, %1079
  %1081 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 31
  %1082 = load i32, i32* %1081, align 4
  %1083 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 22
  %1084 = load i32, i32* %1083, align 4
  %1085 = sub i32 %1082, 372787713
  %1086 = sub i32 %1085, %1084
  %1087 = add i32 %1086, 372787713
  %1088 = select i1 %.reload146, i32 %1080, i32 %1087
  store i32 %1088, i32* %dispatcher, align 4
  %1089 = load i8*, i8** %8, align 8
  %1090 = load i8, i8* %1089, align 1
  %1091 = mul i8 %1090, %1090
  %1092 = add i8 %1091, %1090
  %1093 = mul i8 %1092, 3
  %1094 = or i64 %47, -4441467605623351778
  %1095 = xor i64 %47, -1
  %1096 = and i64 %1095, -3721274295440510023
  %1097 = and i64 %47, 3721274295440510022
  %1098 = or i64 %1096, %1097
  %1099 = xor i64 1011018534078358951, %1098
  %1100 = xor i64 %47, -1
  %1101 = or i64 4441467605623351777, %1100
  %1102 = xor i64 %1101, -1
  %1103 = and i64 %1102, -1
  %1104 = or i64 %1099, %1103
  %1105 = or i64 %89, 6410149385059061742
  %1106 = xor i64 %89, -1
  %1107 = and i64 %1106, 873946462389141709
  %1108 = and i64 %89, -873946462389141710
  %1109 = or i64 %1107, %1108
  %1110 = xor i64 6112947419916816163, %1109
  %1111 = xor i64 %89, -1
  %1112 = or i64 -6410149385059061743, %1111
  %1113 = xor i64 %1112, -1
  %1114 = and i64 %1113, -1
  %1115 = or i64 %1110, %1114
  %1116 = xor i64 %1115, 6358896234756474455
  %1117 = xor i64 %1116, %1104
  %1118 = xor i64 %1117, %1105
  %1119 = xor i64 %1118, %1094
  %1120 = or i64 %148, 7432942587030608295
  %1121 = and i64 7432942587030608295, %148
  %1122 = xor i64 7432942587030608295, %148
  %1123 = or i64 %1121, %1122
  %1124 = add i64 %136, -6809964432200230543
  %1125 = sub i64 0, %136
  %1126 = add i64 6809964432200230543, %1125
  %1127 = sub i64 0, %1126
  %1128 = xor i64 %1120, %1127
  %1129 = xor i64 %1128, 4358141174168128206
  %1130 = xor i64 %1129, %1124
  %1131 = xor i64 %1130, %1123
  %1132 = mul i64 %1119, %1131
  %1133 = trunc i64 %1132 to i8
  %1134 = srem i8 %1093, %1133
  %1135 = icmp eq i8 %1134, 0
  %1136 = mul i8 %1090, %1090
  %1137 = add i8 %1136, %1090
  %1138 = srem i8 %1137, 2
  %1139 = icmp eq i8 %1138, 0
  %1140 = and i1 %1135, %1139
  %1141 = select i1 %1140, i32 984876109, i32 984876128
  %1142 = xor i32 %1141, 45
  store i32 %1142, i32* %4, align 4
  %1143 = call i8** @bf7763123487515004013(i32* %4)
  %1144 = load i8*, i8** %1143, align 8
  indirectbr i8* %1144, [label %loopEnd, label %1075]

codeRepl2:                                        ; preds = %codeRepl2, %loopStart
  store i64 4070807658626890121, i64* %109, align 8
  %1145 = call i8** @lk9254909843318351582(i64* %109)
  %1146 = load i8*, i8** %1145, align 8
  %1147 = bitcast i8* %1146 to void ([53 x i32]*, i32*)*
  call void %1147([53 x i32]* %lookupTable, i32* %dispatcher)
  %1148 = load i8*, i8** %64, align 8
  %1149 = load i8, i8* %1148, align 1
  %1150 = mul i8 %1149, 2
  %1151 = mul i8 %1149, 2
  %1152 = add i8 2, %1151
  %1153 = mul i8 %1150, %1152
  %1154 = srem i8 %1153, 4
  %1155 = icmp eq i8 %1154, 0
  %1156 = mul i8 %1149, %1149
  %1157 = add i8 %1156, %1149
  %1158 = srem i8 %1157, 2
  %1159 = icmp eq i8 %1158, 0
  %1160 = or i1 %1155, %1159
  %1161 = add i64 %75, -5407291579502665501
  %1162 = and i64 -5407291579502665501, %75
  %1163 = or i64 -5407291579502665501, %75
  %1164 = add i64 %1162, %1163
  %1165 = and i64 %99, 2159623538478360626
  %1166 = xor i64 %99, -1
  %1167 = xor i64 2159623538478360626, %1166
  %1168 = and i64 %1167, 2159623538478360626
  %1169 = add i64 %61, 4237247206309672056
  %1170 = sub i64 0, %61
  %1171 = add i64 -4237247206309672056, %1170
  %1172 = sub i64 0, %1171
  %1173 = xor i64 %1172, %1164
  %1174 = xor i64 %1173, %1169
  %1175 = xor i64 %1174, %1165
  %1176 = xor i64 %1175, %1161
  %1177 = xor i64 %1176, -6939851563252227435
  %1178 = xor i64 %1177, %1168
  %1179 = or i64 %73, -2178298010945199101
  %1180 = xor i64 %73, -1
  %1181 = and i64 -2178298010945199101, %1180
  %1182 = add i64 %1181, %73
  %1183 = add i64 %59, 3879558761538955071
  %1184 = and i64 3879558761538955071, %59
  %1185 = or i64 3879558761538955071, %59
  %1186 = add i64 %1184, %1185
  %1187 = and i64 %148, -7083757450891532201
  %1188 = or i64 7083757450891532200, %148
  %1189 = sub i64 %1188, 7083757450891532200
  %1190 = xor i64 %1179, %1183
  %1191 = xor i64 %1190, %1189
  %1192 = xor i64 %1191, %1186
  %1193 = xor i64 %1192, 7286323329332951776
  %1194 = xor i64 %1193, %1182
  %1195 = xor i64 %1194, %1187
  %1196 = mul i64 %1178, %1195
  %1197 = trunc i64 %1196 to i32
  %1198 = select i1 %1160, i32 984876109, i32 %1197
  %1199 = xor i32 %1198, 45
  store i32 %1199, i32* %4, align 4
  %1200 = call i8** @bf7763123487515004013(i32* %4)
  %1201 = load i8*, i8** %1200, align 8
  indirectbr i8* %1201, [label %loopEnd, label %codeRepl2]

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  store i64 4070807658626890141, i64* %109, align 8
  %1202 = call i8** @lk9254909843318351582(i64* %109)
  %1203 = load i8*, i8** %1202, align 8
  %1204 = bitcast i8* %1203 to void (i32*, i32*, [53 x i32]*, i32*)*
  call void %1204(i32* %.reg2mem30, i32* %.reg2mem65, [53 x i32]* %lookupTable, i32* %dispatcher)
  %1205 = load i8*, i8** %6, align 8
  %1206 = load i8, i8* %1205, align 1
  %1207 = and i8 %1206, 1
  %1208 = icmp eq i8 %1207, 0
  %1209 = mul i8 %1206, %1206
  %1210 = add i8 %1209, %1206
  %1211 = mul i8 %1210, 3
  %1212 = srem i8 %1211, 2
  %1213 = icmp eq i8 %1212, 0
  %1214 = or i1 %1208, %1213
  %1215 = select i1 %1214, i32 984876150, i32 984876128
  %1216 = or i32 %1215, 22
  %1217 = and i32 %1215, 22
  %1218 = sub i32 %1216, %1217
  store i32 %1218, i32* %4, align 4
  %1219 = call i8** @bf7763123487515004013(i32* %4)
  %1220 = load i8*, i8** %1219, align 8
  indirectbr i8* %1220, [label %loopEnd, label %codeRepl3]

1221:                                             ; preds = %1221, %loopStart
  %1222 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 19
  %1223 = load i32, i32* %1222, align 4
  %1224 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %1225 = load i32, i32* %1224, align 4
  %1226 = srem i32 %1223, %1225
  store i32 %1226, i32* %dispatcher, align 4
  %1227 = load i8*, i8** %32, align 8
  %1228 = load i8, i8* %1227, align 1
  %1229 = mul i8 %1228, %1228
  %1230 = add i8 %1229, %1228
  %1231 = mul i8 %1230, 3
  %1232 = srem i8 %1231, 2
  %1233 = icmp eq i8 %1232, 0
  %1234 = mul i8 %1228, %1228
  %1235 = xor i8 %1234, %1228
  %1236 = and i8 %1234, %1228
  %1237 = mul i8 2, %1236
  %1238 = add i8 %1235, %1237
  %1239 = mul i8 39, %1238
  %1240 = add i8 23, %1239
  %1241 = mul i8 -105, %1240
  %1242 = and i64 %15, -8151186247818516762
  %1243 = or i64 8151186247818516761, %15
  %1244 = sub i64 %1243, 8151186247818516761
  %1245 = or i64 %138, -6746143949699879296
  %1246 = xor i64 %138, -1
  %1247 = and i64 %1246, -3712838332861541907
  %1248 = and i64 %138, 3712838332861541906
  %1249 = or i64 %1247, %1248
  %1250 = xor i64 7933575521658044269, %1249
  %1251 = xor i64 %138, -1
  %1252 = or i64 6746143949699879295, %1251
  %1253 = xor i64 %1252, -1
  %1254 = and i64 %1253, -1
  %1255 = or i64 %1250, %1254
  %1256 = and i64 %77, 1162851358399884879
  %1257 = xor i64 %77, -1
  %1258 = xor i64 1162851358399884879, %1257
  %1259 = and i64 %1258, 1162851358399884879
  %1260 = xor i64 %1242, %1245
  %1261 = xor i64 %1260, 7118767611902459129
  %1262 = xor i64 %1261, %1256
  %1263 = xor i64 %1262, %1255
  %1264 = xor i64 %1263, %1244
  %1265 = xor i64 %1264, %1259
  %1266 = and i64 %17, 7743137153114900307
  %1267 = xor i64 %17, -1
  %1268 = or i64 -7743137153114900308, %1267
  %1269 = xor i64 %1268, -1
  %1270 = and i64 %1269, -1
  %1271 = or i64 %57, 715899253516592629
  %1272 = xor i64 %57, -1
  %1273 = and i64 %1272, -4841600139863290264
  %1274 = and i64 %57, 4841600139863290263
  %1275 = or i64 %1273, %1274
  %1276 = xor i64 -5395227962278319203, %1275
  %1277 = xor i64 %57, -1
  %1278 = or i64 -715899253516592630, %1277
  %1279 = xor i64 %1278, -1
  %1280 = and i64 %1279, -1
  %1281 = or i64 %1276, %1280
  %1282 = add i64 %5, 5614623876738920347
  %1283 = sub i64 0, %5
  %1284 = sub i64 5614623876738920347, %1283
  %1285 = xor i64 %1271, %1270
  %1286 = xor i64 %1285, %1281
  %1287 = xor i64 %1286, %1266
  %1288 = xor i64 %1287, %1284
  %1289 = xor i64 %1288, -8733212772585518425
  %1290 = xor i64 %1289, %1282
  %1291 = mul i64 %1265, %1290
  %1292 = trunc i64 %1291 to i8
  %1293 = add i8 %1292, %1241
  %1294 = srem i8 %1293, 2
  %1295 = icmp eq i8 %1294, 0
  %1296 = xor i1 %1295, true
  %1297 = xor i1 %1233, %1296
  %1298 = and i1 %1297, %1233
  %1299 = or i64 %71, 7702105436390294019
  %1300 = xor i64 %71, -1
  %1301 = and i64 %1300, -116305545962716372
  %1302 = and i64 %71, 116305545962716371
  %1303 = or i64 %1301, %1302
  %1304 = xor i64 -7745720016987094737, %1303
  %1305 = xor i64 %71, -1
  %1306 = or i64 -7702105436390294020, %1305
  %1307 = xor i64 %1306, -1
  %1308 = and i64 %1307, -1
  %1309 = or i64 %1304, %1308
  %1310 = or i64 %124, 860352329157749258
  %1311 = xor i64 %124, -1
  %1312 = and i64 860352329157749258, %1311
  %1313 = add i64 %1312, %124
  %1314 = xor i64 %1313, -4979847912110484277
  %1315 = xor i64 %1314, %1309
  %1316 = xor i64 %1315, %1299
  %1317 = xor i64 %1316, %1310
  %1318 = or i64 %136, -8292777275114087806
  %1319 = and i64 -8292777275114087806, %136
  %1320 = xor i64 -8292777275114087806, %136
  %1321 = or i64 %1319, %1320
  %1322 = add i64 %116, -6452073752547263273
  %1323 = and i64 -6452073752547263273, %116
  %1324 = or i64 -6452073752547263273, %116
  %1325 = add i64 %1323, %1324
  %1326 = xor i64 %1321, -8337318630181524066
  %1327 = xor i64 %1326, %1325
  %1328 = xor i64 %1327, %1322
  %1329 = xor i64 %1328, %1318
  %1330 = mul i64 %1317, %1329
  %1331 = trunc i64 %1330 to i32
  %1332 = select i1 %1298, i32 %1331, i32 984876128
  %1333 = or i32 %1332, 42
  %1334 = and i32 %1332, 42
  %1335 = sub i32 %1333, %1334
  store i32 %1335, i32* %4, align 4
  %1336 = call i8** @bf7763123487515004013(i32* %4)
  %1337 = load i8*, i8** %1336, align 8
  indirectbr i8* %1337, [label %loopEnd, label %1221]

1338:                                             ; preds = %1338, %loopStart
  %1339 = mul i64 113, 25
  %1340 = add i64 63, -119
  %1341 = add i64 %120, 6772782556176060973
  %1342 = and i64 6772782556176060973, %120
  %1343 = or i64 6772782556176060973, %120
  %1344 = add i64 %1342, %1343
  %1345 = or i64 %142, 820928229730852978
  %1346 = xor i64 %142, -1
  %1347 = and i64 820928229730852978, %1346
  %1348 = add i64 %1347, %142
  %1349 = xor i64 %1344, %1345
  %1350 = xor i64 %1349, %1341
  %1351 = xor i64 %1350, %1348
  %1352 = xor i64 %1351, -4473951954423929333
  %1353 = add i64 %83, -7825291937889403661
  %1354 = sub i64 0, %83
  %1355 = add i64 7825291937889403661, %1354
  %1356 = sub i64 0, %1355
  %1357 = add i64 %39, -7708785866179638211
  %1358 = xor i64 -7708785866179638211, %39
  %1359 = and i64 -7708785866179638211, %39
  %1360 = mul i64 2, %1359
  %1361 = add i64 %1358, %1360
  %1362 = xor i64 3660227811375306343, %1353
  %1363 = xor i64 %1362, %1357
  %1364 = xor i64 %1363, %1356
  %1365 = xor i64 %1364, %1361
  %1366 = mul i64 %1352, %1365
  %1367 = sdiv i64 %1366, 30
  %1368 = and i64 %128, -2553869315683303418
  %1369 = xor i64 %128, -1
  %1370 = or i64 2553869315683303417, %1369
  %1371 = xor i64 %1370, -1
  %1372 = and i64 %1371, -1
  %1373 = add i64 %140, -3508125226457387913
  %1374 = add i64 -5821082812689105410, %140
  %1375 = sub i64 %1374, -2312957586231717497
  %1376 = xor i64 %1368, %1373
  %1377 = xor i64 %1376, %1375
  %1378 = xor i64 %1377, %1372
  %1379 = xor i64 %1378, -3883450227380095969
  %1380 = add i64 %57, -9090307555353935591
  %1381 = xor i64 -9090307555353935591, %57
  %1382 = and i64 -9090307555353935591, %57
  %1383 = mul i64 2, %1382
  %1384 = add i64 %1381, %1383
  %1385 = and i64 %73, 896453190402529106
  %1386 = xor i64 %73, -1
  %1387 = or i64 -896453190402529107, %1386
  %1388 = xor i64 %1387, -1
  %1389 = and i64 %1388, -1
  %1390 = add i64 %99, 7989778117371596978
  %1391 = and i64 7989778117371596978, %99
  %1392 = or i64 7989778117371596978, %99
  %1393 = add i64 %1391, %1392
  %1394 = xor i64 %1380, %1384
  %1395 = xor i64 %1394, -2479900494234414836
  %1396 = xor i64 %1395, %1389
  %1397 = xor i64 %1396, %1385
  %1398 = xor i64 %1397, %1390
  %1399 = xor i64 %1398, %1393
  %1400 = mul i64 %1379, %1399
  %1401 = sdiv i64 108, %1400
  %1402 = mul i64 90, 105
  %1403 = or i64 %128, -2131418090226410906
  %1404 = xor i64 %128, -1
  %1405 = and i64 -2131418090226410906, %1404
  %1406 = add i64 %1405, %128
  %1407 = or i64 %69, -1826568983820442234
  %1408 = and i64 -1826568983820442234, %69
  %1409 = xor i64 -1826568983820442234, %69
  %1410 = or i64 %1408, %1409
  %1411 = xor i64 %1407, %1410
  %1412 = xor i64 %1411, -8704986446413328305
  %1413 = xor i64 %1412, %1403
  %1414 = xor i64 %1413, %1406
  %1415 = add i64 %43, 309090839867656894
  %1416 = sub i64 0, %43
  %1417 = sub i64 309090839867656894, %1416
  %1418 = or i64 %31, -3768470890336454960
  %1419 = xor i64 %31, -1
  %1420 = and i64 %1419, 6534308291262565517
  %1421 = and i64 %31, -6534308291262565518
  %1422 = or i64 %1420, %1421
  %1423 = xor i64 -7990171390302995875, %1422
  %1424 = xor i64 %31, -1
  %1425 = or i64 3768470890336454959, %1424
  %1426 = xor i64 %1425, -1
  %1427 = and i64 %1426, -1
  %1428 = or i64 %1423, %1427
  %1429 = and i64 %5, -4835464751467777895
  %1430 = xor i64 %5, -1
  %1431 = xor i64 -4835464751467777895, %1430
  %1432 = and i64 %1431, -4835464751467777895
  %1433 = xor i64 %1432, %1429
  %1434 = xor i64 %1433, %1417
  %1435 = xor i64 %1434, -705291997142823378
  %1436 = xor i64 %1435, %1418
  %1437 = xor i64 %1436, %1428
  %1438 = xor i64 %1437, %1415
  %1439 = mul i64 %1414, %1438
  %1440 = sdiv i64 38, %1439
  %.reload64 = load i32, i32* %.reg2mem61, align 4
  %1441 = srem i32 %.reload64, 2
  %1442 = or i64 %27, 5686382337634089898
  %1443 = and i64 5686382337634089898, %27
  %1444 = xor i64 5686382337634089898, %27
  %1445 = or i64 %1443, %1444
  %1446 = add i64 %57, 5067896788935341017
  %1447 = add i64 2087552883347655100, %57
  %1448 = sub i64 %1447, -2980343905587685917
  %1449 = or i64 %75, 2791960777752240891
  %1450 = xor i64 %75, -1
  %1451 = and i64 2791960777752240891, %1450
  %1452 = add i64 %1451, %75
  %1453 = xor i64 %1446, %1442
  %1454 = xor i64 %1453, 4673220292406052963
  %1455 = xor i64 %1454, %1449
  %1456 = xor i64 %1455, %1452
  %1457 = xor i64 %1456, %1445
  %1458 = xor i64 %1457, %1448
  %1459 = and i64 %17, 5805326385152364670
  %1460 = or i64 -5805326385152364671, %17
  %1461 = sub i64 %1460, -5805326385152364671
  %1462 = and i64 %114, 8127099794145914010
  %1463 = xor i64 %114, -1
  %1464 = xor i64 8127099794145914010, %1463
  %1465 = and i64 %1464, 8127099794145914010
  %1466 = xor i64 %1461, %1462
  %1467 = xor i64 %1466, 0
  %1468 = xor i64 %1467, %1459
  %1469 = xor i64 %1468, %1465
  %1470 = mul i64 %1458, %1469
  %1471 = trunc i64 %1470 to i32
  %1472 = icmp eq i32 %1441, %1471
  %.reload69 = load i32, i32* %.reg2mem65, align 4
  %1473 = mul i32 %.reload69, 2
  %.reload68 = load i32, i32* %.reg2mem65, align 4
  %1474 = mul i32 %.reload68, 2
  %1475 = or i64 %107, 7729563691440840684
  %1476 = and i64 7729563691440840684, %107
  %1477 = xor i64 7729563691440840684, %107
  %1478 = or i64 %1476, %1477
  %1479 = and i64 %122, 7915843492278870753
  %1480 = xor i64 %122, -1
  %1481 = or i64 -7915843492278870754, %1480
  %1482 = xor i64 %1481, -1
  %1483 = and i64 %1482, -1
  %1484 = and i64 %15, -169532014761075402
  %1485 = xor i64 %15, -1
  %1486 = xor i64 -169532014761075402, %1485
  %1487 = and i64 %1486, -169532014761075402
  %1488 = xor i64 %1478, %1479
  %1489 = xor i64 %1488, %1484
  %1490 = xor i64 %1489, 6473990350295200745
  %1491 = xor i64 %1490, %1475
  %1492 = xor i64 %1491, %1483
  %1493 = xor i64 %1492, %1487
  %1494 = and i64 %103, -7953906312816950562
  %1495 = or i64 7953906312816950561, %103
  %1496 = sub i64 %1495, 7953906312816950561
  %1497 = and i64 %47, 4230804745489361927
  %1498 = xor i64 %47, -1
  %1499 = or i64 -4230804745489361928, %1498
  %1500 = xor i64 %1499, -1
  %1501 = and i64 %1500, -1
  %1502 = and i64 %21, 7129107619796158312
  %1503 = xor i64 %21, -1
  %1504 = or i64 -7129107619796158313, %1503
  %1505 = xor i64 %1504, -1
  %1506 = and i64 %1505, -1
  %1507 = xor i64 %1502, %1496
  %1508 = xor i64 %1507, %1501
  %1509 = xor i64 %1508, -4050481522457827150
  %1510 = xor i64 %1509, %1506
  %1511 = xor i64 %1510, %1497
  %1512 = xor i64 %1511, %1494
  %1513 = mul i64 %1493, %1512
  %1514 = trunc i64 %1513 to i32
  %1515 = xor i32 %1514, %1474
  %1516 = and i32 2, %1474
  %1517 = and i64 %13, -959960331259401773
  %1518 = or i64 959960331259401772, %13
  %1519 = sub i64 %1518, 959960331259401772
  %1520 = add i64 %114, 2469191343689158197
  %1521 = xor i64 2469191343689158197, %114
  %1522 = and i64 2469191343689158197, %114
  %1523 = mul i64 2, %1522
  %1524 = add i64 %1521, %1523
  %1525 = and i64 %114, -6007390252583487567
  %1526 = xor i64 %114, -1
  %1527 = or i64 6007390252583487566, %1526
  %1528 = xor i64 %1527, -1
  %1529 = and i64 %1528, -1
  %1530 = xor i64 %1524, %1520
  %1531 = xor i64 %1530, %1517
  %1532 = xor i64 %1531, -5024202972225327549
  %1533 = xor i64 %1532, %1529
  %1534 = xor i64 %1533, %1519
  %1535 = xor i64 %1534, %1525
  %1536 = or i64 %112, 2449422545938844229
  %1537 = and i64 2449422545938844229, %112
  %1538 = xor i64 2449422545938844229, %112
  %1539 = or i64 %1537, %1538
  %1540 = add i64 %130, -4307020536504907803
  %1541 = sub i64 0, %130
  %1542 = sub i64 -4307020536504907803, %1541
  %1543 = and i64 %39, 6230344525058239566
  %1544 = xor i64 %39, -1
  %1545 = xor i64 6230344525058239566, %1544
  %1546 = and i64 %1545, 6230344525058239566
  %1547 = xor i64 %1540, %1542
  %1548 = xor i64 %1547, %1546
  %1549 = xor i64 %1548, 3415764633147284694
  %1550 = xor i64 %1549, %1543
  %1551 = xor i64 %1550, %1536
  %1552 = xor i64 %1551, %1539
  %1553 = mul i64 %1535, %1552
  %1554 = trunc i64 %1553 to i32
  %1555 = mul i32 %1554, %1516
  %1556 = add i32 %1515, %1555
  %1557 = mul i32 %1473, %1556
  %1558 = srem i32 %1557, 4
  %1559 = icmp eq i32 %1558, 0
  %.reload67 = load i32, i32* %.reg2mem65, align 4
  %1560 = mul i32 %.reload67, %.reload67
  %.reload66 = load i32, i32* %.reg2mem65, align 4
  %1561 = xor i32 %1560, %.reload66
  %1562 = and i32 %1560, %.reload66
  %1563 = mul i32 2, %1562
  %1564 = add i32 %1561, %1563
  %1565 = srem i32 %1564, 2
  %1566 = and i64 %87, 5895332210501989230
  %1567 = or i64 -5895332210501989231, %87
  %1568 = sub i64 %1567, -5895332210501989231
  %1569 = or i64 %148, 7846643446843595609
  %1570 = xor i64 %148, -1
  %1571 = and i64 %1570, -6465283913427236557
  %1572 = and i64 %148, 6465283913427236556
  %1573 = or i64 %1571, %1572
  %1574 = xor i64 -3845420777379917206, %1573
  %1575 = xor i64 %148, -1
  %1576 = or i64 -7846643446843595610, %1575
  %1577 = xor i64 %1576, -1
  %1578 = and i64 %1577, -1
  %1579 = or i64 %1574, %1578
  %1580 = xor i64 %1566, %1579
  %1581 = xor i64 %1580, %1569
  %1582 = xor i64 %1581, %1568
  %1583 = xor i64 %1582, 4861632635066559397
  %1584 = or i64 %144, -4245793830399768645
  %1585 = xor i64 %144, -1
  %1586 = and i64 %1585, 1768079154761725107
  %1587 = and i64 %144, -1768079154761725108
  %1588 = or i64 %1586, %1587
  %1589 = xor i64 -2478506337980222712, %1588
  %1590 = xor i64 %144, -1
  %1591 = or i64 4245793830399768644, %1590
  %1592 = xor i64 %1591, -1
  %1593 = and i64 %1592, -1
  %1594 = or i64 %1589, %1593
  %1595 = or i64 %107, 4218254290783523571
  %1596 = xor i64 %107, -1
  %1597 = and i64 4218254290783523571, %1596
  %1598 = add i64 %1597, %107
  %1599 = and i64 %134, 8253996426907352455
  %1600 = xor i64 %134, -1
  %1601 = xor i64 8253996426907352455, %1600
  %1602 = and i64 %1601, 8253996426907352455
  %1603 = xor i64 %1598, %1595
  %1604 = xor i64 %1603, %1599
  %1605 = xor i64 %1604, %1602
  %1606 = xor i64 %1605, %1584
  %1607 = xor i64 %1606, 0
  %1608 = xor i64 %1607, %1594
  %1609 = mul i64 %1583, %1608
  %1610 = trunc i64 %1609 to i32
  %1611 = icmp eq i32 %1565, %1610
  %1612 = and i1 %1559, %1611
  store i1 %1612, i1* %.reg2mem71, align 1
  %1613 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 11
  %1614 = load i32, i32* %1613, align 4
  %1615 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 9
  %1616 = load i32, i32* %1615, align 4
  %1617 = add i32 %1614, %1616
  %1618 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 19
  %1619 = load i32, i32* %1618, align 4
  %1620 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 6
  %1621 = load i32, i32* %1620, align 4
  %1622 = sub i32 %1619, -333868460
  %1623 = sub i32 %1622, %1621
  %1624 = and i64 %118, 3617790403916837217
  %1625 = or i64 -3617790403916837218, %118
  %1626 = sub i64 %1625, -3617790403916837218
  %1627 = add i64 %140, 2936905845482152407
  %1628 = and i64 2936905845482152407, %140
  %1629 = or i64 2936905845482152407, %140
  %1630 = add i64 %1628, %1629
  %1631 = add i64 %105, -8135984206336148017
  %1632 = sub i64 0, %105
  %1633 = add i64 8135984206336148017, %1632
  %1634 = sub i64 0, %1633
  %1635 = xor i64 %1631, 4444864582849900067
  %1636 = xor i64 %1635, %1630
  %1637 = xor i64 %1636, %1634
  %1638 = xor i64 %1637, %1626
  %1639 = xor i64 %1638, %1627
  %1640 = xor i64 %1639, %1624
  %1641 = add i64 %126, -8006398126885844798
  %1642 = sub i64 0, %126
  %1643 = sub i64 -8006398126885844798, %1642
  %1644 = and i64 %144, -8795598792215289381
  %1645 = xor i64 %144, -1
  %1646 = or i64 8795598792215289380, %1645
  %1647 = xor i64 %1646, -1
  %1648 = and i64 %1647, -1
  %1649 = xor i64 %1643, %1644
  %1650 = xor i64 %1649, %1648
  %1651 = xor i64 %1650, %1641
  %1652 = xor i64 %1651, 6879353564988016540
  %1653 = mul i64 %1640, %1652
  %1654 = trunc i64 %1653 to i32
  %1655 = add i32 %1623, %1654
  %.reload73 = load i1, i1* %.reg2mem71, align 1
  %1656 = select i1 %.reload73, i32 %1617, i32 %1655
  store i32 %1656, i32* %dispatcher, align 4
  %1657 = load i8*, i8** %84, align 8
  %1658 = load i8, i8* %1657, align 1
  %1659 = and i64 %81, 2197763915721848861
  %1660 = or i64 -2197763915721848862, %81
  %1661 = sub i64 %1660, -2197763915721848862
  %1662 = add i64 %148, -5424076385313985490
  %1663 = xor i64 -5424076385313985490, %148
  %1664 = and i64 -5424076385313985490, %148
  %1665 = mul i64 2, %1664
  %1666 = add i64 %1663, %1665
  %1667 = and i64 %5, -4353540210752756848
  %1668 = xor i64 %5, -1
  %1669 = xor i64 -4353540210752756848, %1668
  %1670 = and i64 %1669, -4353540210752756848
  %1671 = xor i64 %1666, %1661
  %1672 = xor i64 %1671, %1662
  %1673 = xor i64 %1672, %1667
  %1674 = xor i64 %1673, %1659
  %1675 = xor i64 %1674, %1670
  %1676 = xor i64 %1675, -4161508351699075095
  %1677 = or i64 %59, 8795535104920032331
  %1678 = xor i64 %59, -1
  %1679 = and i64 8795535104920032331, %1678
  %1680 = add i64 %1679, %59
  %1681 = add i64 %122, 1510352950631092802
  %1682 = xor i64 1510352950631092802, %122
  %1683 = and i64 1510352950631092802, %122
  %1684 = mul i64 2, %1683
  %1685 = add i64 %1682, %1684
  %1686 = xor i64 %1680, %1681
  %1687 = xor i64 %1686, %1685
  %1688 = xor i64 %1687, %1677
  %1689 = xor i64 %1688, -7756222679145901902
  %1690 = mul i64 %1676, %1689
  %1691 = trunc i64 %1690 to i8
  %1692 = mul i8 %1658, %1691
  %1693 = or i64 %19, 5126482254470070216
  %1694 = xor i64 %19, -1
  %1695 = and i64 %1694, -3116104685892228270
  %1696 = and i64 %19, 3116104685892228269
  %1697 = or i64 %1695, %1696
  %1698 = xor i64 -7789622898519534438, %1697
  %1699 = xor i64 %19, -1
  %1700 = or i64 -5126482254470070217, %1699
  %1701 = xor i64 %1700, -1
  %1702 = and i64 %1701, -1
  %1703 = or i64 %1698, %1702
  %1704 = add i64 %120, 1114814998814217438
  %1705 = add i64 7560381693927587324, %120
  %1706 = sub i64 %1705, 6445566695113369886
  %1707 = or i64 %23, -6247304706001268138
  %1708 = xor i64 %23, -1
  %1709 = and i64 %1708, 8941736504023622500
  %1710 = and i64 %23, -8941736504023622501
  %1711 = or i64 %1709, %1710
  %1712 = xor i64 -3073020093449129678, %1711
  %1713 = xor i64 %23, -1
  %1714 = or i64 6247304706001268137, %1713
  %1715 = xor i64 %1714, -1
  %1716 = and i64 %1715, -1
  %1717 = or i64 %1712, %1716
  %1718 = xor i64 844726835533768279, %1717
  %1719 = xor i64 %1718, %1706
  %1720 = xor i64 %1719, %1693
  %1721 = xor i64 %1720, %1704
  %1722 = xor i64 %1721, %1707
  %1723 = xor i64 %1722, %1703
  %1724 = or i64 %29, -7201477621086959738
  %1725 = xor i64 %29, -1
  %1726 = and i64 -7201477621086959738, %1725
  %1727 = add i64 %1726, %29
  %1728 = or i64 %124, -6295133480037583233
  %1729 = xor i64 %124, -1
  %1730 = and i64 -6295133480037583233, %1729
  %1731 = add i64 %1730, %124
  %1732 = xor i64 %1731, %1728
  %1733 = xor i64 %1732, -5951010199774508338
  %1734 = xor i64 %1733, %1727
  %1735 = xor i64 %1734, %1724
  %1736 = mul i64 %1723, %1735
  %1737 = trunc i64 %1736 to i8
  %1738 = mul i8 %1658, %1737
  %1739 = add i8 -54, %1738
  %1740 = sub i8 %1739, -56
  %1741 = mul i8 %1692, %1740
  %1742 = srem i8 %1741, 4
  %1743 = add i64 %47, 832613660713178013
  %1744 = sub i64 0, %47
  %1745 = add i64 -832613660713178013, %1744
  %1746 = sub i64 0, %1745
  %1747 = or i64 %65, -5371340699550147303
  %1748 = xor i64 %65, -1
  %1749 = and i64 -5371340699550147303, %1748
  %1750 = add i64 %1749, %65
  %1751 = xor i64 %1743, %1747
  %1752 = xor i64 %1751, 1742813462595628335
  %1753 = xor i64 %1752, %1746
  %1754 = xor i64 %1753, %1750
  %1755 = and i64 %47, -7256758245114381187
  %1756 = xor i64 %47, -1
  %1757 = or i64 7256758245114381186, %1756
  %1758 = xor i64 %1757, -1
  %1759 = and i64 %1758, -1
  %1760 = and i64 %83, -3015133330092522613
  %1761 = xor i64 %83, -1
  %1762 = or i64 3015133330092522612, %1761
  %1763 = xor i64 %1762, -1
  %1764 = and i64 %1763, -1
  %1765 = add i64 %140, -7438616480741769983
  %1766 = add i64 -7168493963254767449, %140
  %1767 = sub i64 %1766, 270122517487002534
  %1768 = xor i64 %1765, %1760
  %1769 = xor i64 %1768, %1767
  %1770 = xor i64 %1769, %1764
  %1771 = xor i64 %1770, %1755
  %1772 = xor i64 %1771, %1759
  %1773 = xor i64 %1772, 0
  %1774 = mul i64 %1754, %1773
  %1775 = trunc i64 %1774 to i8
  %1776 = icmp eq i8 %1742, %1775
  %1777 = mul i8 %1658, %1658
  %1778 = add i8 %1777, %1658
  %1779 = srem i8 %1778, 2
  %1780 = icmp eq i8 %1779, 0
  %1781 = xor i1 %1780, true
  %1782 = xor i1 %1776, %1781
  %1783 = and i1 %1782, %1776
  %1784 = select i1 %1783, i32 984876132, i32 984876128
  %1785 = or i32 %1784, 4
  %1786 = add i64 %31, -3386437058456865553
  %1787 = sub i64 0, %31
  %1788 = sub i64 -3386437058456865553, %1787
  %1789 = and i64 %150, 8309634402772246305
  %1790 = or i64 -8309634402772246306, %150
  %1791 = sub i64 %1790, -8309634402772246306
  %1792 = xor i64 7871931461832086703, %1786
  %1793 = xor i64 %1792, %1791
  %1794 = xor i64 %1793, %1789
  %1795 = xor i64 %1794, %1788
  %1796 = and i64 %126, 2407030044865364859
  %1797 = xor i64 %126, -1
  %1798 = or i64 -2407030044865364860, %1797
  %1799 = xor i64 %1798, -1
  %1800 = and i64 %1799, -1
  %1801 = add i64 %146, 396590981428564583
  %1802 = sub i64 0, %146
  %1803 = add i64 -396590981428564583, %1802
  %1804 = sub i64 0, %1803
  %1805 = or i64 %146, -6653436238161015301
  %1806 = xor i64 %146, -1
  %1807 = and i64 %1806, 6199405474291534170
  %1808 = and i64 %146, -6199405474291534171
  %1809 = or i64 %1807, %1808
  %1810 = xor i64 -746884432082647903, %1809
  %1811 = xor i64 %146, -1
  %1812 = or i64 6653436238161015300, %1811
  %1813 = xor i64 %1812, -1
  %1814 = and i64 %1813, -1
  %1815 = or i64 %1810, %1814
  %1816 = xor i64 %1804, %1800
  %1817 = xor i64 %1816, %1805
  %1818 = xor i64 %1817, 5029438911150754108
  %1819 = xor i64 %1818, %1815
  %1820 = xor i64 %1819, %1796
  %1821 = xor i64 %1820, %1801
  %1822 = mul i64 %1795, %1821
  %1823 = trunc i64 %1822 to i32
  %1824 = and i32 %1784, %1823
  %1825 = sub i32 %1785, %1824
  store i32 %1825, i32* %4, align 4
  %1826 = call i8** @bf7763123487515004013(i32* %4)
  %1827 = load i8*, i8** %1826, align 8
  indirectbr i8* %1827, [label %loopEnd, label %1338]

1828:                                             ; preds = %1828, %loopStart
  %1829 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 11
  %1830 = load i32, i32* %1829, align 4
  %1831 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 10
  %1832 = load i32, i32* %1831, align 4
  %1833 = add i32 %1830, -1195636825
  %1834 = add i32 %1833, %1832
  %1835 = sub i32 %1834, -1195636825
  %1836 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 17
  %1837 = load i32, i32* %1836, align 4
  %1838 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 7
  %1839 = load i32, i32* %1838, align 4
  %1840 = or i64 %31, -6193401516065462293
  %1841 = xor i64 %31, -1
  %1842 = and i64 %1841, 373493455975220943
  %1843 = and i64 %31, -373493455975220944
  %1844 = or i64 %1842, %1843
  %1845 = xor i64 -5826966929069612764, %1844
  %1846 = xor i64 %31, -1
  %1847 = or i64 6193401516065462292, %1846
  %1848 = xor i64 %1847, -1
  %1849 = and i64 %1848, -1
  %1850 = or i64 %1845, %1849
  %1851 = or i64 %55, -566060481302772495
  %1852 = xor i64 %55, -1
  %1853 = and i64 -566060481302772495, %1852
  %1854 = add i64 %1853, %55
  %1855 = xor i64 %1854, %1840
  %1856 = xor i64 %1855, 9165283573225090171
  %1857 = xor i64 %1856, %1850
  %1858 = xor i64 %1857, %1851
  %1859 = and i64 %39, 6416362001595134426
  %1860 = xor i64 %39, -1
  %1861 = xor i64 6416362001595134426, %1860
  %1862 = and i64 %1861, 6416362001595134426
  %1863 = add i64 %35, -8525162537145001313
  %1864 = add i64 -8478415048713667519, %35
  %1865 = add i64 %1864, -46747488431333794
  %1866 = add i64 %105, -1486166405492506394
  %1867 = sub i64 0, %105
  %1868 = sub i64 -1486166405492506394, %1867
  %1869 = xor i64 %1863, 3141674507077352006
  %1870 = xor i64 %1869, %1865
  %1871 = xor i64 %1870, %1859
  %1872 = xor i64 %1871, %1862
  %1873 = xor i64 %1872, %1868
  %1874 = xor i64 %1873, %1866
  %1875 = mul i64 %1858, %1874
  %1876 = trunc i64 %1875 to i32
  %1877 = sub i32 %1837, %1876
  %1878 = sub i32 %1877, %1839
  %1879 = or i64 %67, -2434471255573992536
  %1880 = and i64 -2434471255573992536, %67
  %1881 = xor i64 -2434471255573992536, %67
  %1882 = or i64 %1880, %1881
  %1883 = add i64 %116, 1433737561287527262
  %1884 = xor i64 1433737561287527262, %116
  %1885 = and i64 1433737561287527262, %116
  %1886 = mul i64 2, %1885
  %1887 = add i64 %1884, %1886
  %1888 = xor i64 %1882, %1887
  %1889 = xor i64 %1888, %1879
  %1890 = xor i64 %1889, -7004296081632981811
  %1891 = xor i64 %1890, %1883
  %1892 = or i64 %45, -5808403444263072532
  %1893 = xor i64 %45, -1
  %1894 = and i64 -5808403444263072532, %1893
  %1895 = add i64 %1894, %45
  %1896 = or i64 %148, -1419404378148308989
  %1897 = and i64 -1419404378148308989, %148
  %1898 = xor i64 -1419404378148308989, %148
  %1899 = or i64 %1897, %1898
  %1900 = xor i64 %1899, -4406713738187807190
  %1901 = xor i64 %1900, %1892
  %1902 = xor i64 %1901, %1895
  %1903 = xor i64 %1902, %1896
  %1904 = mul i64 %1891, %1903
  %1905 = trunc i64 %1904 to i32
  %1906 = add i32 %1878, %1905
  %.reload72 = load i1, i1* %.reg2mem71, align 1
  %1907 = select i1 %.reload72, i32 %1835, i32 %1906
  store i32 %1907, i32* %dispatcher, align 4
  %1908 = load i8*, i8** %24, align 8
  %1909 = load i8, i8* %1908, align 1
  %1910 = mul i8 %1909, %1909
  %1911 = xor i8 %1910, %1909
  %1912 = and i8 %1910, %1909
  %1913 = mul i8 2, %1912
  %1914 = add i8 %1911, %1913
  %1915 = mul i8 %1914, 3
  %1916 = srem i8 %1915, 2
  %1917 = icmp eq i8 %1916, 0
  %1918 = mul i8 %1909, %1909
  %1919 = xor i8 %1918, %1909
  %1920 = and i8 %1918, %1909
  %1921 = mul i8 2, %1920
  %1922 = add i8 %1919, %1921
  %1923 = srem i8 %1922, 2
  %1924 = icmp eq i8 %1923, 0
  %1925 = xor i1 %1924, true
  %1926 = xor i1 %1917, %1925
  %1927 = and i1 %1926, %1917
  %1928 = select i1 %1927, i32 984876130, i32 984876128
  %1929 = xor i32 %1928, 2
  store i32 %1929, i32* %4, align 4
  %1930 = call i8** @bf7763123487515004013(i32* %4)
  %1931 = load i8*, i8** %1930, align 8
  indirectbr i8* %1931, [label %loopEnd, label %1828]

codeRepl4:                                        ; preds = %codeRepl4, %loopStart
  %1932 = and i64 %114, 2154279391235788003
  %1933 = xor i64 %114, -1
  %1934 = or i64 -2154279391235788004, %1933
  %1935 = xor i64 %1934, -1
  %1936 = and i64 %1935, -1
  %1937 = or i64 %39, 2904036994689171605
  %1938 = and i64 2904036994689171605, %39
  %1939 = xor i64 2904036994689171605, %39
  %1940 = or i64 %1938, %1939
  %1941 = add i64 %110, 4828523226660676286
  %1942 = add i64 -3401461413474712013, %110
  %1943 = sub i64 %1942, -8229984640135388299
  %1944 = xor i64 %1937, %1941
  %1945 = xor i64 %1944, %1932
  %1946 = xor i64 %1945, %1940
  %1947 = xor i64 %1946, %1936
  %1948 = xor i64 %1947, %1943
  %1949 = xor i64 %1948, -6707580560041694757
  %1950 = add i64 %29, 886851891532896883
  %1951 = sub i64 0, %29
  %1952 = add i64 -886851891532896883, %1951
  %1953 = sub i64 0, %1952
  %1954 = add i64 %35, -4165335558663321325
  %1955 = sub i64 0, %35
  %1956 = add i64 4165335558663321325, %1955
  %1957 = sub i64 0, %1956
  %1958 = add i64 %33, 6688081767034349485
  %1959 = add i64 4104634819386676357, %33
  %1960 = sub i64 %1959, -2583446947647673128
  %1961 = xor i64 %1953, %1957
  %1962 = xor i64 %1961, %1950
  %1963 = xor i64 %1962, %1958
  %1964 = xor i64 %1963, %1954
  %1965 = xor i64 %1964, 1865375651887291201
  %1966 = xor i64 %1965, %1960
  %1967 = mul i64 %1949, %1966
  store i64 %1967, i64* %109, align 8
  %1968 = call i8** @lk9254909843318351582(i64* %109)
  %1969 = load i8*, i8** %1968, align 8
  %1970 = bitcast i8* %1969 to void ([53 x i32]*, i32*)*
  call void %1970([53 x i32]* %lookupTable, i32* %dispatcher)
  %1971 = load i8*, i8** %20, align 8
  %1972 = load i8, i8* %1971, align 1
  %1973 = mul i8 %1972, 2
  %1974 = mul i8 %1972, 2
  %1975 = xor i8 2, %1974
  %1976 = and i64 %69, -8846839092691159525
  %1977 = xor i64 %69, -1
  %1978 = or i64 8846839092691159524, %1977
  %1979 = xor i64 %1978, -1
  %1980 = and i64 %1979, -1
  %1981 = and i64 %103, 44999558952714345
  %1982 = or i64 -44999558952714346, %103
  %1983 = sub i64 %1982, -44999558952714346
  %1984 = add i64 %97, -1770449594224665367
  %1985 = xor i64 -1770449594224665367, %97
  %1986 = and i64 -1770449594224665367, %97
  %1987 = mul i64 2, %1986
  %1988 = add i64 %1985, %1987
  %1989 = xor i64 3273822716555490737, %1984
  %1990 = xor i64 %1989, %1976
  %1991 = xor i64 %1990, %1983
  %1992 = xor i64 %1991, %1988
  %1993 = xor i64 %1992, %1981
  %1994 = xor i64 %1993, %1980
  %1995 = add i64 %150, 12379600340197011
  %1996 = add i64 -3660183639292404062, %150
  %1997 = add i64 %1996, 3672563239632601073
  %1998 = or i64 %65, -2350126832846500689
  %1999 = xor i64 %65, -1
  %2000 = and i64 %1999, 4230507876275929422
  %2001 = and i64 %65, -4230507876275929423
  %2002 = or i64 %2000, %2001
  %2003 = xor i64 -1884927525353075231, %2002
  %2004 = xor i64 %65, -1
  %2005 = or i64 2350126832846500688, %2004
  %2006 = xor i64 %2005, -1
  %2007 = and i64 %2006, -1
  %2008 = or i64 %2003, %2007
  %2009 = or i64 %19, 4395848590739411829
  %2010 = and i64 4395848590739411829, %19
  %2011 = xor i64 4395848590739411829, %19
  %2012 = or i64 %2010, %2011
  %2013 = xor i64 4176407868326045346, %1998
  %2014 = xor i64 %2013, %2008
  %2015 = xor i64 %2014, %2012
  %2016 = xor i64 %2015, %2009
  %2017 = xor i64 %2016, %1995
  %2018 = xor i64 %2017, %1997
  %2019 = mul i64 %1994, %2018
  %2020 = trunc i64 %2019 to i8
  %2021 = and i8 %2020, %1974
  %2022 = mul i8 2, %2021
  %2023 = add i8 %1975, %2022
  %2024 = mul i8 39, %2023
  %2025 = add i8 23, %2024
  %2026 = mul i8 -105, %2025
  %2027 = add i8 111, %2026
  %2028 = mul i8 %1973, %2027
  %2029 = srem i8 %2028, 4
  %2030 = icmp eq i8 %2029, 0
  %2031 = mul i8 %1972, %1972
  %2032 = add i8 %2031, %1972
  %2033 = srem i8 %2032, 2
  %2034 = icmp eq i8 %2033, 0
  %2035 = xor i1 %2030, true
  %2036 = or i1 %2035, %2034
  %2037 = and i64 %21, 8695790321839019654
  %2038 = or i64 -8695790321839019655, %21
  %2039 = sub i64 %2038, -8695790321839019655
  %2040 = or i64 %63, -6456148567507292639
  %2041 = xor i64 %63, -1
  %2042 = and i64 -6456148567507292639, %2041
  %2043 = add i64 %2042, %63
  %2044 = or i64 %71, 794940023450980495
  %2045 = and i64 794940023450980495, %71
  %2046 = xor i64 794940023450980495, %71
  %2047 = or i64 %2045, %2046
  %2048 = xor i64 %2040, -6682332383272154783
  %2049 = xor i64 %2048, %2037
  %2050 = xor i64 %2049, %2043
  %2051 = xor i64 %2050, %2039
  %2052 = xor i64 %2051, %2047
  %2053 = xor i64 %2052, %2044
  %2054 = add i64 %73, 445997075343807627
  %2055 = add i64 8283285346317633841, %73
  %2056 = add i64 %2055, -7837288270973826214
  %2057 = and i64 %128, -4391606400351993025
  %2058 = xor i64 %128, -1
  %2059 = xor i64 -4391606400351993025, %2058
  %2060 = and i64 %2059, -4391606400351993025
  %2061 = xor i64 -7859530283209123167, %2056
  %2062 = xor i64 %2061, %2060
  %2063 = xor i64 %2062, %2057
  %2064 = xor i64 %2063, %2054
  %2065 = mul i64 %2053, %2064
  %2066 = trunc i64 %2065 to i1
  %2067 = xor i1 %2030, %2066
  %2068 = sub i1 %2036, %2067
  %2069 = select i1 %2068, i32 984876096, i32 984876128
  %2070 = xor i32 %2069, 32
  store i32 %2070, i32* %4, align 4
  %2071 = call i8** @bf7763123487515004013(i32* %4)
  %2072 = load i8*, i8** %2071, align 8
  indirectbr i8* %2072, [label %loopEnd, label %codeRepl4]

codeRepl5:                                        ; preds = %codeRepl5, %loopStart
  store i64 4070807658626890125, i64* %109, align 8
  %2073 = call i8** @lk9254909843318351582(i64* %109)
  %2074 = load i8*, i8** %2073, align 8
  %2075 = bitcast i8* %2074 to void ([53 x i32]*, i32*)*
  call void %2075([53 x i32]* %lookupTable, i32* %dispatcher)
  %2076 = load i8*, i8** %56, align 8
  %2077 = load i8, i8* %2076, align 1
  %2078 = mul i8 %2077, %2077
  %2079 = add i8 %2078, %2077
  %2080 = mul i8 %2079, 3
  %2081 = srem i8 %2080, 2
  %2082 = icmp eq i8 %2081, 0
  %2083 = mul i8 %2077, %2077
  %2084 = add i8 %2083, %2077
  %2085 = srem i8 %2084, 2
  %2086 = icmp eq i8 %2085, 0
  %2087 = and i1 %2082, %2086
  %2088 = select i1 %2087, i32 984876150, i32 984876128
  %2089 = or i32 %2088, 22
  %2090 = and i32 %2088, 22
  %2091 = sub i32 %2089, %2090
  store i32 %2091, i32* %4, align 4
  %2092 = call i8** @bf7763123487515004013(i32* %4)
  %2093 = load i8*, i8** %2092, align 8
  indirectbr i8* %2093, [label %loopEnd, label %codeRepl5]

codeRepl6:                                        ; preds = %codeRepl6, %loopStart
  store i64 4070807658626890112, i64* %109, align 8
  %2094 = call i8** @lk9254909843318351582(i64* %109)
  %2095 = load i8*, i8** %2094, align 8
  %2096 = bitcast i8* %2095 to void ([53 x i32]*, i32*, i32*, i32*, double*)*
  call void %2096([53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem10, i32* %.reg2mem147, double* %.reg2mem149)
  %2097 = load i8*, i8** %90, align 8
  %2098 = load i8, i8* %2097, align 1
  %2099 = and i8 %2098, 1
  %2100 = or i64 %5, 1489750727962603632
  %2101 = xor i64 %5, -1
  %2102 = and i64 1489750727962603632, %2101
  %2103 = add i64 %2102, %5
  %2104 = or i64 %39, -8411099868050976288
  %2105 = xor i64 %39, -1
  %2106 = and i64 -8411099868050976288, %2105
  %2107 = add i64 %2106, %39
  %2108 = or i64 %93, -3143153671969781258
  %2109 = xor i64 %93, -1
  %2110 = and i64 -3143153671969781258, %2109
  %2111 = add i64 %2110, %93
  %2112 = xor i64 %2108, %2107
  %2113 = xor i64 %2112, %2104
  %2114 = xor i64 %2113, -6487717293419166411
  %2115 = xor i64 %2114, %2100
  %2116 = xor i64 %2115, %2103
  %2117 = xor i64 %2116, %2111
  %2118 = and i64 %41, 3215660557300160763
  %2119 = xor i64 %41, -1
  %2120 = xor i64 3215660557300160763, %2119
  %2121 = and i64 %2120, 3215660557300160763
  %2122 = or i64 %29, 2941531974251945212
  %2123 = and i64 2941531974251945212, %29
  %2124 = xor i64 2941531974251945212, %29
  %2125 = or i64 %2123, %2124
  %2126 = add i64 %118, -4197510198123771861
  %2127 = and i64 -4197510198123771861, %118
  %2128 = or i64 -4197510198123771861, %118
  %2129 = add i64 %2127, %2128
  %2130 = xor i64 %2126, %2121
  %2131 = xor i64 %2130, %2122
  %2132 = xor i64 %2131, 0
  %2133 = xor i64 %2132, %2129
  %2134 = xor i64 %2133, %2118
  %2135 = xor i64 %2134, %2125
  %2136 = mul i64 %2117, %2135
  %2137 = trunc i64 %2136 to i8
  %2138 = icmp eq i8 %2099, %2137
  %2139 = mul i8 %2098, %2098
  %2140 = add i8 %2139, %2098
  %2141 = mul i8 %2140, 3
  %2142 = and i64 %120, 3672473964343782928
  %2143 = xor i64 %120, -1
  %2144 = or i64 -3672473964343782929, %2143
  %2145 = xor i64 %2144, -1
  %2146 = and i64 %2145, -1
  %2147 = or i64 %136, -337939513603248569
  %2148 = and i64 -337939513603248569, %136
  %2149 = xor i64 -337939513603248569, %136
  %2150 = or i64 %2148, %2149
  %2151 = xor i64 %2142, 860033485715469345
  %2152 = xor i64 %2151, %2146
  %2153 = xor i64 %2152, %2147
  %2154 = xor i64 %2153, %2150
  %2155 = add i64 %107, -1381497391005910395
  %2156 = add i64 -6596611636132919393, %107
  %2157 = sub i64 %2156, -5215114245127008998
  %2158 = add i64 %140, 5320290632277378606
  %2159 = and i64 5320290632277378606, %140
  %2160 = or i64 5320290632277378606, %140
  %2161 = add i64 %2159, %2160
  %2162 = or i64 %53, 1208852465247946905
  %2163 = xor i64 %53, -1
  %2164 = and i64 %2163, -6167202892896708818
  %2165 = and i64 %53, 6167202892896708817
  %2166 = or i64 %2164, %2165
  %2167 = xor i64 -4994767631449530441, %2166
  %2168 = xor i64 %53, -1
  %2169 = or i64 -1208852465247946906, %2168
  %2170 = xor i64 %2169, -1
  %2171 = and i64 %2170, -1
  %2172 = or i64 %2167, %2171
  %2173 = xor i64 -8109653806338072638, %2157
  %2174 = xor i64 %2173, %2155
  %2175 = xor i64 %2174, %2172
  %2176 = xor i64 %2175, %2161
  %2177 = xor i64 %2176, %2162
  %2178 = xor i64 %2177, %2158
  %2179 = mul i64 %2154, %2178
  %2180 = trunc i64 %2179 to i8
  %2181 = srem i8 %2141, %2180
  %2182 = icmp eq i8 %2181, 0
  %2183 = or i1 %2138, %2182
  %2184 = select i1 %2183, i32 984876144, i32 984876128
  %2185 = xor i32 %2184, 16
  store i32 %2185, i32* %4, align 4
  %2186 = call i8** @bf7763123487515004013(i32* %4)
  %2187 = load i8*, i8** %2186, align 8
  indirectbr i8* %2187, [label %loopEnd, label %codeRepl6]

2188:                                             ; preds = %2188, %loopStart
  %.reload79 = load float, float* %.reg2mem77, align 4
  store i64 4070807658626890113, i64* %109, align 8
  %2189 = call i8** @lk9254909843318351582(i64* %109)
  %2190 = load i8*, i8** %2189, align 8
  %2191 = bitcast i8* %2190 to i32 (float, float*, float*, i8*, float*)*
  %2192 = call i32 %2191(float %.reload79, float* %0, float* %1, i8* %2, float* %3)
  %2193 = icmp eq i32 %2192, 0
  %2194 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 45
  %2195 = load i32, i32* %2194, align 4
  %2196 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 27
  %2197 = load i32, i32* %2196, align 4
  %2198 = sub i32 %2195, %2197
  %2199 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 35
  %2200 = load i32, i32* %2199, align 4
  %2201 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %2202 = load i32, i32* %2201, align 4
  %2203 = add i64 %132, -7073959020413233846
  %2204 = add i64 7583322083587823889, %132
  %2205 = add i64 %2204, 3789462969708493881
  %2206 = and i64 %142, 7130004484612658603
  %2207 = xor i64 %142, -1
  %2208 = or i64 -7130004484612658604, %2207
  %2209 = xor i64 %2208, -1
  %2210 = and i64 %2209, -1
  %2211 = xor i64 %2203, %2210
  %2212 = xor i64 %2211, %2205
  %2213 = xor i64 %2212, %2206
  %2214 = xor i64 %2213, 3834214307349946833
  %2215 = add i64 %124, 2941718120272764026
  %2216 = and i64 2941718120272764026, %124
  %2217 = or i64 2941718120272764026, %124
  %2218 = add i64 %2216, %2217
  %2219 = and i64 %136, -3269199234800500094
  %2220 = or i64 3269199234800500093, %136
  %2221 = sub i64 %2220, 3269199234800500093
  %2222 = xor i64 %2221, %2215
  %2223 = xor i64 %2222, %2219
  %2224 = xor i64 %2223, %2218
  %2225 = xor i64 %2224, -8515928309683467527
  %2226 = mul i64 %2214, %2225
  %2227 = trunc i64 %2226 to i32
  %2228 = sub i32 %2200, %2227
  %2229 = sub i32 %2228, %2202
  %2230 = add i32 %2229, -1171452343
  %2231 = select i1 %2193, i32 %2198, i32 %2230
  store i32 %2231, i32* %dispatcher, align 4
  %.reload83 = load double, double* %.reg2mem80, align 8
  store i32 %2192, i32* %.reg2mem147, align 4
  store double %.reload83, double* %.reg2mem149, align 8
  store i32 %2192, i32* %.ph.reg2mem, align 4
  %2232 = load i8*, i8** %12, align 8
  %2233 = load i8, i8* %2232, align 1
  %2234 = and i8 %2233, 1
  %2235 = icmp eq i8 %2234, 1
  %2236 = mul i8 %2233, %2233
  %2237 = add i8 %2236, %2233
  %2238 = srem i8 %2237, 2
  %2239 = icmp eq i8 %2238, 0
  %2240 = or i1 %2235, %2239
  %2241 = select i1 %2240, i32 984876156, i32 984876128
  %2242 = xor i32 %2241, 28
  store i32 %2242, i32* %4, align 4
  %2243 = call i8** @bf7763123487515004013(i32* %4)
  %2244 = load i8*, i8** %2243, align 8
  indirectbr i8* %2244, [label %loopEnd, label %2188]

2245:                                             ; preds = %2245, %loopStart
  %.reload150 = load double, double* %.reg2mem149, align 8
  %.reload148 = load i32, i32* %.reg2mem147, align 4
  store i32 %.reload148, i32* %.reg2mem74, align 4
  %2246 = fadd double %.reload150, 7.000000e-02
  %2247 = fptrunc double %2246 to float
  store float %2247, float* %.reg2mem77, align 4
  %.reload78 = load float, float* %.reg2mem77, align 4
  %2248 = fpext float %.reload78 to double
  store double %2248, double* %.reg2mem80, align 8
  %.reload63 = load i32, i32* %.reg2mem61, align 4
  %2249 = srem i32 %.reload63, 2
  %2250 = icmp eq i32 %2249, 0
  %2251 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 13
  %2252 = load i32, i32* %2251, align 4
  %2253 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 12
  %2254 = load i32, i32* %2253, align 4
  %2255 = add i32 %2252, %2254
  %2256 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  %2257 = load i32, i32* %2256, align 4
  %2258 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %2259 = load i32, i32* %2258, align 4
  %2260 = srem i32 %2257, %2259
  %2261 = select i1 %2250, i32 %2255, i32 %2260
  store i32 %2261, i32* %dispatcher, align 4
  %2262 = load i8*, i8** %90, align 8
  %2263 = load i8, i8* %2262, align 1
  %2264 = mul i8 %2263, %2263
  %2265 = sub i8 %2264, -114
  %2266 = add i8 %2265, %2263
  %2267 = add i8 %2266, -114
  %2268 = or i64 %120, -5349491756303368891
  %2269 = and i64 -5349491756303368891, %120
  %2270 = xor i64 -5349491756303368891, %120
  %2271 = or i64 %2269, %2270
  %2272 = or i64 %9, -8355978360859215082
  %2273 = and i64 -8355978360859215082, %9
  %2274 = xor i64 -8355978360859215082, %9
  %2275 = or i64 %2273, %2274
  %2276 = or i64 %120, -7089953155465081791
  %2277 = xor i64 %120, -1
  %2278 = and i64 -7089953155465081791, %2277
  %2279 = add i64 %2278, %120
  %2280 = xor i64 %2272, %2276
  %2281 = xor i64 %2280, %2279
  %2282 = xor i64 %2281, %2275
  %2283 = xor i64 %2282, %2268
  %2284 = xor i64 %2283, %2271
  %2285 = xor i64 %2284, -2508094264303171295
  %2286 = add i64 %91, -356134131954295546
  %2287 = add i64 -7441562682065405223, %91
  %2288 = sub i64 %2287, -7085428550111109677
  %2289 = or i64 %105, -7589319502449711317
  %2290 = xor i64 %105, -1
  %2291 = and i64 -7589319502449711317, %2290
  %2292 = add i64 %2291, %105
  %2293 = xor i64 %2292, %2289
  %2294 = xor i64 %2293, -5506712416655183709
  %2295 = xor i64 %2294, %2286
  %2296 = xor i64 %2295, %2288
  %2297 = mul i64 %2285, %2296
  %2298 = trunc i64 %2297 to i8
  %2299 = mul i8 %2267, %2298
  %2300 = srem i8 %2299, 2
  %2301 = icmp eq i8 %2300, 0
  %2302 = mul i8 %2263, %2263
  %2303 = add i8 %2302, %2263
  %2304 = srem i8 %2303, 2
  %2305 = icmp eq i8 %2304, 0
  %2306 = and i1 %2301, %2305
  %2307 = and i64 %41, 6240147050317801807
  %2308 = xor i64 %41, -1
  %2309 = or i64 -6240147050317801808, %2308
  %2310 = xor i64 %2309, -1
  %2311 = and i64 %2310, -1
  %2312 = or i64 %77, 2743767794786800457
  %2313 = and i64 2743767794786800457, %77
  %2314 = xor i64 2743767794786800457, %77
  %2315 = or i64 %2313, %2314
  %2316 = and i64 %17, -6004833249359868224
  %2317 = xor i64 %17, -1
  %2318 = xor i64 -6004833249359868224, %2317
  %2319 = and i64 %2318, -6004833249359868224
  %2320 = xor i64 %2315, 1068580746675140805
  %2321 = xor i64 %2320, %2316
  %2322 = xor i64 %2321, %2319
  %2323 = xor i64 %2322, %2312
  %2324 = xor i64 %2323, %2307
  %2325 = xor i64 %2324, %2311
  %2326 = and i64 %77, 6981337957311080302
  %2327 = or i64 -6981337957311080303, %77
  %2328 = sub i64 %2327, -6981337957311080303
  %2329 = and i64 %134, -1032201008310635240
  %2330 = or i64 1032201008310635239, %134
  %2331 = sub i64 %2330, 1032201008310635239
  %2332 = or i64 %95, -2192553039724718790
  %2333 = and i64 -2192553039724718790, %95
  %2334 = xor i64 -2192553039724718790, %95
  %2335 = or i64 %2333, %2334
  %2336 = xor i64 %2328, %2331
  %2337 = xor i64 %2336, %2326
  %2338 = xor i64 %2337, %2332
  %2339 = xor i64 %2338, %2335
  %2340 = xor i64 %2339, -6325615054418970400
  %2341 = xor i64 %2340, %2329
  %2342 = mul i64 %2325, %2341
  %2343 = trunc i64 %2342 to i32
  %2344 = select i1 %2306, i32 984876144, i32 %2343
  %2345 = xor i32 %2344, -1859537570
  %2346 = xor i32 %2345, -1859537586
  store i32 %2346, i32* %4, align 4
  %2347 = call i8** @bf7763123487515004013(i32* %4)
  %2348 = load i8*, i8** %2347, align 8
  indirectbr i8* %2348, [label %loopEnd, label %2245]

codeRepl7:                                        ; preds = %codeRepl7, %loopStart
  %2349 = or i64 %126, -547832443913270953
  %2350 = xor i64 %126, -1
  %2351 = and i64 %2350, -8881025494488125929
  %2352 = and i64 %126, 8881025494488125928
  %2353 = or i64 %2351, %2352
  %2354 = xor i64 8981856708804831040, %2353
  %2355 = xor i64 %126, -1
  %2356 = or i64 547832443913270952, %2355
  %2357 = xor i64 %2356, -1
  %2358 = and i64 %2357, -1
  %2359 = or i64 %2354, %2358
  %2360 = or i64 %11, -2331439942332263980
  %2361 = and i64 -2331439942332263980, %11
  %2362 = xor i64 -2331439942332263980, %11
  %2363 = or i64 %2361, %2362
  %2364 = xor i64 %2360, 6420908528046096701
  %2365 = xor i64 %2364, %2359
  %2366 = xor i64 %2365, %2349
  %2367 = xor i64 %2366, %2363
  %2368 = and i64 %150, 4027453671701026827
  %2369 = xor i64 %150, -1
  %2370 = xor i64 4027453671701026827, %2369
  %2371 = and i64 %2370, 4027453671701026827
  %2372 = add i64 %93, -8428803195530160237
  %2373 = and i64 -8428803195530160237, %93
  %2374 = or i64 -8428803195530160237, %93
  %2375 = add i64 %2373, %2374
  %2376 = add i64 %23, -4938388811201036915
  %2377 = and i64 -4938388811201036915, %23
  %2378 = or i64 -4938388811201036915, %23
  %2379 = add i64 %2377, %2378
  %2380 = xor i64 %2375, -7924505043789020724
  %2381 = xor i64 %2380, %2368
  %2382 = xor i64 %2381, %2372
  %2383 = xor i64 %2382, %2379
  %2384 = xor i64 %2383, %2376
  %2385 = xor i64 %2384, %2371
  %2386 = mul i64 %2367, %2385
  store i64 %2386, i64* %109, align 8
  %2387 = call i8** @lk9254909843318351582(i64* %109)
  %2388 = load i8*, i8** %2387, align 8
  %2389 = bitcast i8* %2388 to void (i32*, [53 x i32]*, i32*, i32*, i1*)*
  call void %2389(i32* %.reg2mem33, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem163, i1* %.reg2mem165)
  %2390 = load i8*, i8** %46, align 8
  %2391 = load i8, i8* %2390, align 1
  %2392 = mul i8 %2391, %2391
  %2393 = add i8 %2392, %2391
  %2394 = mul i8 %2393, 3
  %2395 = and i64 %93, 6206733588905800495
  %2396 = xor i64 %93, -1
  %2397 = or i64 -6206733588905800496, %2396
  %2398 = xor i64 %2397, -1
  %2399 = and i64 %2398, -1
  %2400 = or i64 %81, 319751395902343992
  %2401 = xor i64 %81, -1
  %2402 = and i64 %2401, -9212917796016222281
  %2403 = and i64 %81, 9212917796016222280
  %2404 = or i64 %2402, %2403
  %2405 = xor i64 -8914074877008952177, %2404
  %2406 = xor i64 %81, -1
  %2407 = or i64 -319751395902343993, %2406
  %2408 = xor i64 %2407, -1
  %2409 = and i64 %2408, -1
  %2410 = or i64 %2405, %2409
  %2411 = add i64 %53, -6917728100083935913
  %2412 = sub i64 0, %53
  %2413 = sub i64 -6917728100083935913, %2412
  %2414 = xor i64 %2399, %2410
  %2415 = xor i64 %2414, %2413
  %2416 = xor i64 %2415, %2395
  %2417 = xor i64 %2416, -5706401195008594331
  %2418 = xor i64 %2417, %2411
  %2419 = xor i64 %2418, %2400
  %2420 = add i64 %39, 6305995764661569774
  %2421 = xor i64 6305995764661569774, %39
  %2422 = and i64 6305995764661569774, %39
  %2423 = mul i64 2, %2422
  %2424 = add i64 %2421, %2423
  %2425 = and i64 %142, -1597643171318295766
  %2426 = xor i64 %142, -1
  %2427 = xor i64 -1597643171318295766, %2426
  %2428 = and i64 %2427, -1597643171318295766
  %2429 = add i64 %130, 7665038167908216224
  %2430 = xor i64 7665038167908216224, %130
  %2431 = and i64 7665038167908216224, %130
  %2432 = mul i64 2, %2431
  %2433 = add i64 %2430, %2432
  %2434 = xor i64 %2420, %2429
  %2435 = xor i64 %2434, %2425
  %2436 = xor i64 %2435, %2433
  %2437 = xor i64 %2436, %2424
  %2438 = xor i64 %2437, -8813135192105408806
  %2439 = xor i64 %2438, %2428
  %2440 = mul i64 %2419, %2439
  %2441 = trunc i64 %2440 to i8
  %2442 = srem i8 %2394, %2441
  %2443 = icmp eq i8 %2442, 0
  %2444 = mul i8 %2391, %2391
  %2445 = sub i8 0, %2444
  %2446 = sub i8 0, %2391
  %2447 = add i8 %2445, %2446
  %2448 = add i64 %122, 7402930836882098667
  %2449 = and i64 7402930836882098667, %122
  %2450 = or i64 7402930836882098667, %122
  %2451 = add i64 %2449, %2450
  %2452 = and i64 %15, 68278493822516051
  %2453 = or i64 -68278493822516052, %15
  %2454 = sub i64 %2453, -68278493822516052
  %2455 = xor i64 %2452, %2451
  %2456 = xor i64 %2455, %2454
  %2457 = xor i64 %2456, -7331337266672316311
  %2458 = xor i64 %2457, %2448
  %2459 = add i64 %21, 878399312094429720
  %2460 = and i64 878399312094429720, %21
  %2461 = or i64 878399312094429720, %21
  %2462 = add i64 %2460, %2461
  %2463 = add i64 %138, -295261748127130596
  %2464 = and i64 -295261748127130596, %138
  %2465 = or i64 -295261748127130596, %138
  %2466 = add i64 %2464, %2465
  %2467 = xor i64 %2462, %2459
  %2468 = xor i64 %2467, %2463
  %2469 = xor i64 %2468, 0
  %2470 = xor i64 %2469, %2466
  %2471 = mul i64 %2458, %2470
  %2472 = trunc i64 %2471 to i8
  %2473 = sub i8 %2472, %2447
  %2474 = srem i8 %2473, 2
  %2475 = icmp eq i8 %2474, 0
  %2476 = and i64 %95, -2387198388327563810
  %2477 = or i64 2387198388327563809, %95
  %2478 = sub i64 %2477, 2387198388327563809
  %2479 = and i64 %9, -1746054343916356465
  %2480 = xor i64 %9, -1
  %2481 = xor i64 -1746054343916356465, %2480
  %2482 = and i64 %2481, -1746054343916356465
  %2483 = xor i64 %2482, %2476
  %2484 = xor i64 %2483, -1906935178370851061
  %2485 = xor i64 %2484, %2479
  %2486 = xor i64 %2485, %2478
  %2487 = or i64 %17, -7073770613383557420
  %2488 = xor i64 %17, -1
  %2489 = and i64 -7073770613383557420, %2488
  %2490 = add i64 %2489, %17
  %2491 = and i64 %130, -7011892821166626927
  %2492 = xor i64 %130, -1
  %2493 = xor i64 -7011892821166626927, %2492
  %2494 = and i64 %2493, -7011892821166626927
  %2495 = xor i64 %2491, %2487
  %2496 = xor i64 %2495, 8497527664382702755
  %2497 = xor i64 %2496, %2490
  %2498 = xor i64 %2497, %2494
  %2499 = mul i64 %2486, %2498
  %2500 = trunc i64 %2499 to i1
  %2501 = xor i1 %2443, %2500
  %2502 = or i1 %2501, %2475
  %2503 = xor i1 %2443, true
  %2504 = sub i1 %2502, %2503
  %2505 = select i1 %2504, i32 984876135, i32 984876128
  %2506 = xor i32 %2505, 7
  store i32 %2506, i32* %4, align 4
  %2507 = call i8** @bf7763123487515004013(i32* %4)
  %2508 = load i8*, i8** %2507, align 8
  indirectbr i8* %2508, [label %loopEnd, label %codeRepl7]

2509:                                             ; preds = %2509, %loopStart
  %2510 = sdiv i64 84, 19
  %.reload38 = load i32, i32* %.reg2mem33, align 4
  %2511 = and i64 %39, 8048243833463879144
  %2512 = or i64 -8048243833463879145, %39
  %2513 = sub i64 %2512, -8048243833463879145
  %2514 = add i64 %7, 1024354581233393690
  %2515 = add i64 1799922381128555721, %7
  %2516 = add i64 %2515, -775567799895162031
  %2517 = or i64 %120, 6788098730364972247
  %2518 = xor i64 %120, -1
  %2519 = and i64 6788098730364972247, %2518
  %2520 = add i64 %2519, %120
  %2521 = xor i64 %2517, %2520
  %2522 = xor i64 %2521, -6077028168880730227
  %2523 = xor i64 %2522, %2516
  %2524 = xor i64 %2523, %2513
  %2525 = xor i64 %2524, %2514
  %2526 = xor i64 %2525, %2511
  %2527 = and i64 %15, 4588660921898477372
  %2528 = xor i64 %15, -1
  %2529 = or i64 -4588660921898477373, %2528
  %2530 = xor i64 %2529, -1
  %2531 = and i64 %2530, -1
  %2532 = and i64 %79, 6620298415823193253
  %2533 = xor i64 %79, -1
  %2534 = xor i64 6620298415823193253, %2533
  %2535 = and i64 %2534, 6620298415823193253
  %2536 = xor i64 %2532, %2531
  %2537 = xor i64 %2536, %2527
  %2538 = xor i64 %2537, %2535
  %2539 = xor i64 %2538, -3334839043975866742
  %2540 = mul i64 %2526, %2539
  %2541 = trunc i64 %2540 to i32
  %2542 = mul i32 %.reload38, %2541
  store i32 %2542, i32* %.reg2mem84, align 4
  %2543 = and i64 %130, 5121292190040171799
  %2544 = xor i64 %130, -1
  %2545 = xor i64 5121292190040171799, %2544
  %2546 = and i64 %2545, 5121292190040171799
  %2547 = or i64 %122, -3624378790333634276
  %2548 = xor i64 %122, -1
  %2549 = and i64 -3624378790333634276, %2548
  %2550 = add i64 %2549, %122
  %2551 = and i64 %99, -7048207136167740181
  %2552 = xor i64 %99, -1
  %2553 = or i64 7048207136167740180, %2552
  %2554 = xor i64 %2553, -1
  %2555 = and i64 %2554, -1
  %2556 = xor i64 7291905509413788751, %2543
  %2557 = xor i64 %2556, %2550
  %2558 = xor i64 %2557, %2547
  %2559 = xor i64 %2558, %2551
  %2560 = xor i64 %2559, %2555
  %2561 = xor i64 %2560, %2546
  %2562 = and i64 %21, -9051058567117646445
  %2563 = or i64 9051058567117646444, %21
  %2564 = sub i64 %2563, 9051058567117646444
  %2565 = and i64 %110, 690119280260064706
  %2566 = xor i64 %110, -1
  %2567 = xor i64 690119280260064706, %2566
  %2568 = and i64 %2567, 690119280260064706
  %2569 = and i64 %136, 732868133884557941
  %2570 = xor i64 %136, -1
  %2571 = or i64 -732868133884557942, %2570
  %2572 = xor i64 %2571, -1
  %2573 = and i64 %2572, -1
  %2574 = xor i64 %2562, %2564
  %2575 = xor i64 %2574, %2573
  %2576 = xor i64 %2575, %2569
  %2577 = xor i64 %2576, %2565
  %2578 = xor i64 %2577, -2339671740648652384
  %2579 = xor i64 %2578, %2568
  %2580 = mul i64 %2561, %2579
  %2581 = add i64 %2580, -118
  %.reload37 = load i32, i32* %.reg2mem33, align 4
  %2582 = mul i32 %.reload37, 2
  store i32 %2582, i32* %.reg2mem87, align 4
  %2583 = or i64 %81, -1072684270348980353
  %2584 = xor i64 %81, -1
  %2585 = and i64 -1072684270348980353, %2584
  %2586 = add i64 %2585, %81
  %2587 = and i64 %35, 2544167368830866048
  %2588 = xor i64 %35, -1
  %2589 = xor i64 2544167368830866048, %2588
  %2590 = and i64 %2589, 2544167368830866048
  %2591 = add i64 %35, 6748916453808742779
  %2592 = sub i64 0, %35
  %2593 = add i64 -6748916453808742779, %2592
  %2594 = sub i64 0, %2593
  %2595 = xor i64 -4622941161599155067, %2587
  %2596 = xor i64 %2595, %2594
  %2597 = xor i64 %2596, %2586
  %2598 = xor i64 %2597, %2583
  %2599 = xor i64 %2598, %2590
  %2600 = xor i64 %2599, %2591
  %2601 = or i64 %136, 8512549544142587658
  %2602 = xor i64 %136, -1
  %2603 = and i64 %2602, -1348553046898988251
  %2604 = and i64 %136, 1348553046898988250
  %2605 = or i64 %2603, %2604
  %2606 = xor i64 -7247878862102008785, %2605
  %2607 = xor i64 %136, -1
  %2608 = or i64 -8512549544142587659, %2607
  %2609 = xor i64 %2608, -1
  %2610 = and i64 %2609, -1
  %2611 = or i64 %2606, %2610
  %2612 = add i64 %75, -2922502647895189361
  %2613 = sub i64 0, %75
  %2614 = sub i64 -2922502647895189361, %2613
  %2615 = xor i64 %2611, 4103051709456278205
  %2616 = xor i64 %2615, %2612
  %2617 = xor i64 %2616, %2614
  %2618 = xor i64 %2617, %2601
  %2619 = mul i64 %2600, %2618
  %2620 = mul i64 %2619, 37
  %.reload89 = load i32, i32* %.reg2mem87, align 4
  %2621 = and i64 %31, -1804984173714228142
  %2622 = xor i64 %31, -1
  %2623 = or i64 1804984173714228141, %2622
  %2624 = xor i64 %2623, -1
  %2625 = and i64 %2624, -1
  %2626 = add i64 %5, 5242980282457053337
  %2627 = add i64 927080700097442628, %5
  %2628 = sub i64 %2627, -4315899582359610709
  %2629 = xor i64 %2621, %2628
  %2630 = xor i64 %2629, %2626
  %2631 = xor i64 %2630, %2625
  %2632 = xor i64 %2631, 2828507157058747023
  %2633 = add i64 %120, 3704563941973374464
  %2634 = xor i64 3704563941973374464, %120
  %2635 = and i64 3704563941973374464, %120
  %2636 = mul i64 2, %2635
  %2637 = add i64 %2634, %2636
  %2638 = and i64 %118, -5544244000202573620
  %2639 = xor i64 %118, -1
  %2640 = or i64 5544244000202573619, %2639
  %2641 = xor i64 %2640, -1
  %2642 = and i64 %2641, -1
  %2643 = xor i64 %2637, %2633
  %2644 = xor i64 %2643, %2638
  %2645 = xor i64 %2644, %2642
  %2646 = xor i64 %2645, 9064790624404097246
  %2647 = mul i64 %2632, %2646
  %2648 = trunc i64 %2647 to i32
  %2649 = and i32 %2648, %.reload89
  %2650 = or i32 2, %.reload89
  %2651 = add i32 %2649, %2650
  store i32 %2651, i32* %.reg2mem90, align 4
  %2652 = sub i64 4862272400889749247, 4862272400889749148
  %.reload86 = load i32, i32* %.reg2mem84, align 4
  %.reload92 = load i32, i32* %.reg2mem90, align 4
  %2653 = mul i32 %.reload86, %.reload92
  store i32 %2653, i32* %.reg2mem93, align 4
  %2654 = sdiv i64 97, 112
  %.reload95 = load i32, i32* %.reg2mem93, align 4
  %2655 = srem i32 %.reload95, 4
  store i32 %2655, i32* %.reg2mem96, align 4
  %2656 = add i64 %148, 5550500572719088916
  %2657 = add i64 6712468139160894074, %148
  %2658 = sub i64 %2657, 1161967566441805158
  %2659 = and i64 %130, -8285063409327402125
  %2660 = or i64 8285063409327402124, %130
  %2661 = sub i64 %2660, 8285063409327402124
  %2662 = xor i64 %2659, %2661
  %2663 = xor i64 %2662, %2658
  %2664 = xor i64 %2663, -5469431044847840129
  %2665 = xor i64 %2664, %2656
  %2666 = add i64 %81, -7532658564482708734
  %2667 = add i64 8948709005455086974, %81
  %2668 = sub i64 %2667, -1965376503771755908
  %2669 = and i64 %53, 3972077795222735032
  %2670 = xor i64 %53, -1
  %2671 = xor i64 3972077795222735032, %2670
  %2672 = and i64 %2671, 3972077795222735032
  %2673 = and i64 %45, -1451342905812174046
  %2674 = xor i64 %45, -1
  %2675 = xor i64 -1451342905812174046, %2674
  %2676 = and i64 %2675, -1451342905812174046
  %2677 = xor i64 %2666, %2676
  %2678 = xor i64 %2677, %2669
  %2679 = xor i64 %2678, -7493500703774605006
  %2680 = xor i64 %2679, %2673
  %2681 = xor i64 %2680, %2668
  %2682 = xor i64 %2681, %2672
  %2683 = mul i64 %2665, %2682
  %2684 = sub i64 34, %2683
  %.reload98 = load i32, i32* %.reg2mem96, align 4
  %2685 = icmp eq i32 %.reload98, 0
  store i1 %2685, i1* %.reg2mem99, align 1
  %2686 = sdiv i64 71, 126
  %.reload36 = load i32, i32* %.reg2mem33, align 4
  %2687 = mul i32 %.reload36, %.reload36
  store i32 %2687, i32* %.reg2mem103, align 4
  %.reload76 = load i32, i32* %.reg2mem74, align 4
  %2688 = srem i32 %.reload76, 2
  %2689 = icmp eq i32 %2688, 0
  %.reload6 = load i32, i32* %.reg2mem, align 4
  %2690 = and i32 %.reload6, 1
  %2691 = icmp eq i32 %2690, 0
  %.reload5 = load i32, i32* %.reg2mem, align 4
  %2692 = mul i32 %.reload5, %.reload5
  %.reload4 = load i32, i32* %.reg2mem, align 4
  %2693 = add i32 %2692, %.reload4
  %2694 = mul i32 %2693, 3
  %2695 = srem i32 %2694, 2
  %2696 = icmp eq i32 %2695, 0
  %2697 = or i1 %2691, %2696
  store i1 %2697, i1* %.reg2mem107, align 1
  %2698 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 25
  %2699 = load i32, i32* %2698, align 4
  %2700 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %2701 = load i32, i32* %2700, align 4
  %2702 = srem i32 %2699, %2701
  %2703 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %2704 = load i32, i32* %2703, align 4
  %2705 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %2706 = load i32, i32* %2705, align 4
  %2707 = sub i32 %2704, %2706
  %.reload109 = load i1, i1* %.reg2mem107, align 1
  %2708 = select i1 %.reload109, i32 %2702, i32 %2707
  store i32 %2708, i32* %dispatcher, align 4
  %2709 = load i8*, i8** %26, align 8
  %2710 = load i8, i8* %2709, align 1
  %2711 = xor i8 %2710, -1
  %2712 = or i8 %2711, 1
  %2713 = xor i8 %2710, -1
  %2714 = sub i8 %2712, %2713
  %2715 = icmp eq i8 %2714, 1
  %2716 = mul i8 %2710, %2710
  %2717 = add i8 %2716, %2710
  %2718 = srem i8 %2717, 2
  %2719 = and i64 %126, 8381013013227988282
  %2720 = xor i64 %126, -1
  %2721 = or i64 -8381013013227988283, %2720
  %2722 = xor i64 %2721, -1
  %2723 = and i64 %2722, -1
  %2724 = and i64 %87, -9206367696697159950
  %2725 = xor i64 %87, -1
  %2726 = xor i64 -9206367696697159950, %2725
  %2727 = and i64 %2726, -9206367696697159950
  %2728 = or i64 %27, -3214276302074126628
  %2729 = and i64 -3214276302074126628, %27
  %2730 = xor i64 -3214276302074126628, %27
  %2731 = or i64 %2729, %2730
  %2732 = xor i64 %2727, %2723
  %2733 = xor i64 %2732, %2719
  %2734 = xor i64 %2733, %2724
  %2735 = xor i64 %2734, 3123459470616784411
  %2736 = xor i64 %2735, %2731
  %2737 = xor i64 %2736, %2728
  %2738 = add i64 %85, -7922396650382933938
  %2739 = sub i64 0, %85
  %2740 = add i64 7922396650382933938, %2739
  %2741 = sub i64 0, %2740
  %2742 = or i64 %93, 8265031206872763786
  %2743 = xor i64 %93, -1
  %2744 = and i64 %2743, 3961618711186850917
  %2745 = and i64 %93, -3961618711186850918
  %2746 = or i64 %2744, %2745
  %2747 = xor i64 4920522538909305327, %2746
  %2748 = xor i64 %93, -1
  %2749 = or i64 -8265031206872763787, %2748
  %2750 = xor i64 %2749, -1
  %2751 = and i64 %2750, -1
  %2752 = or i64 %2747, %2751
  %2753 = or i64 %132, 9129730130203014299
  %2754 = xor i64 %132, -1
  %2755 = and i64 9129730130203014299, %2754
  %2756 = add i64 %2755, %132
  %2757 = xor i64 %2752, %2742
  %2758 = xor i64 %2757, %2756
  %2759 = xor i64 %2758, %2753
  %2760 = xor i64 %2759, %2738
  %2761 = xor i64 %2760, %2741
  %2762 = xor i64 %2761, 0
  %2763 = mul i64 %2737, %2762
  %2764 = trunc i64 %2763 to i8
  %2765 = icmp eq i8 %2718, %2764
  %2766 = or i1 %2715, %2765
  %2767 = select i1 %2766, i32 984876123, i32 984876128
  %2768 = xor i32 %2767, -1
  %2769 = and i32 %2768, 1876563216
  %2770 = and i32 %2767, -1876563217
  %2771 = or i32 %2769, %2770
  %2772 = add i64 %11, -388794629244467712
  %2773 = add i64 8897800115226293213, %11
  %2774 = sub i64 %2773, -9160149329238790691
  %2775 = or i64 %55, -5461734339057534309
  %2776 = and i64 -5461734339057534309, %55
  %2777 = xor i64 -5461734339057534309, %55
  %2778 = or i64 %2776, %2777
  %2779 = add i64 %97, 1473616951817421781
  %2780 = and i64 1473616951817421781, %97
  %2781 = or i64 1473616951817421781, %97
  %2782 = add i64 %2780, %2781
  %2783 = xor i64 %2778, %2779
  %2784 = xor i64 %2783, %2774
  %2785 = xor i64 %2784, %2772
  %2786 = xor i64 %2785, %2782
  %2787 = xor i64 %2786, -8083800903351161349
  %2788 = xor i64 %2787, %2775
  %2789 = and i64 %71, 605404180388295775
  %2790 = or i64 -605404180388295776, %71
  %2791 = sub i64 %2790, -605404180388295776
  %2792 = sext i32 %208 to i64
  %2793 = add i64 %2792, 8885216352937913433
  %2794 = sub i64 0, %2792
  %2795 = sub i64 8885216352937913433, %2794
  %2796 = add i64 %148, 1543284372004060637
  %2797 = add i64 -5188545568857633358, %148
  %2798 = add i64 %2797, 6731829940861693995
  %2799 = xor i64 %2796, %2789
  %2800 = xor i64 %2799, -2049094142080614767
  %2801 = xor i64 %2800, %2791
  %2802 = xor i64 %2801, %2798
  %2803 = xor i64 %2802, %2795
  %2804 = xor i64 %2803, %2793
  %2805 = mul i64 %2788, %2804
  %2806 = trunc i64 %2805 to i32
  %2807 = xor i32 %2771, %2806
  store i32 %2807, i32* %4, align 4
  %2808 = call i8** @bf7763123487515004013(i32* %4)
  %2809 = load i8*, i8** %2808, align 8
  indirectbr i8* %2809, [label %loopEnd, label %2509]

2810:                                             ; preds = %2810, %loopStart
  %2811 = mul i64 4, 80
  %.reload35 = load i32, i32* %.reg2mem33, align 4
  %.reload106 = load i32, i32* %.reg2mem103, align 4
  %2812 = add i32 %.reload106, %.reload35
  %2813 = mul i64 12, 47
  %2814 = srem i32 %2812, 2
  %2815 = sub i64 67, -38
  %2816 = icmp eq i32 %2814, 0
  %2817 = xor i1 %2816, true
  %2818 = and i1 %2817, true
  %2819 = and i1 %2816, false
  %2820 = or i1 %2818, %2819
  %2821 = add i64 %21, -4034960177834645648
  %2822 = sub i64 0, %21
  %2823 = sub i64 -4034960177834645648, %2822
  %2824 = and i64 %122, -636900728054571017
  %2825 = or i64 636900728054571016, %122
  %2826 = sub i64 %2825, 636900728054571016
  %2827 = and i64 %85, 3852731873598984624
  %2828 = or i64 -3852731873598984625, %85
  %2829 = sub i64 %2828, -3852731873598984625
  %2830 = xor i64 %2823, %2826
  %2831 = xor i64 %2830, %2829
  %2832 = xor i64 %2831, %2827
  %2833 = xor i64 %2832, %2824
  %2834 = xor i64 %2833, %2821
  %2835 = xor i64 %2834, -3190579682226266767
  %2836 = or i64 %55, -7539899697536917088
  %2837 = and i64 -7539899697536917088, %55
  %2838 = xor i64 -7539899697536917088, %55
  %2839 = or i64 %2837, %2838
  %2840 = or i64 %23, 3595509980827266970
  %2841 = xor i64 %23, -1
  %2842 = and i64 %2841, -2124787273904726599
  %2843 = and i64 %23, 2124787273904726598
  %2844 = or i64 %2842, %2843
  %2845 = xor i64 -3213621264711683549, %2844
  %2846 = xor i64 %23, -1
  %2847 = or i64 -3595509980827266971, %2846
  %2848 = xor i64 %2847, -1
  %2849 = and i64 %2848, -1
  %2850 = or i64 %2845, %2849
  %2851 = or i64 %29, 277995987838087014
  %2852 = and i64 277995987838087014, %29
  %2853 = xor i64 277995987838087014, %29
  %2854 = or i64 %2852, %2853
  %2855 = xor i64 %2850, %2840
  %2856 = xor i64 %2855, %2839
  %2857 = xor i64 %2856, %2851
  %2858 = xor i64 %2857, 0
  %2859 = xor i64 %2858, %2836
  %2860 = xor i64 %2859, %2854
  %2861 = mul i64 %2835, %2860
  %2862 = trunc i64 %2861 to i1
  %2863 = xor i1 %2820, %2862
  %.reload102 = load i1, i1* %.reg2mem99, align 1
  %2864 = xor i1 %.reload102, true
  %2865 = and i64 %31, 352771411692836300
  %2866 = xor i64 %31, -1
  %2867 = or i64 -352771411692836301, %2866
  %2868 = xor i64 %2867, -1
  %2869 = and i64 %2868, -1
  %2870 = or i64 %65, 3551152874717958824
  %2871 = xor i64 %65, -1
  %2872 = and i64 %2871, -3577689549981312523
  %2873 = and i64 %65, 3577689549981312522
  %2874 = or i64 %2872, %2873
  %2875 = xor i64 -67196692858451107, %2874
  %2876 = xor i64 %65, -1
  %2877 = or i64 -3551152874717958825, %2876
  %2878 = xor i64 %2877, -1
  %2879 = and i64 %2878, -1
  %2880 = or i64 %2875, %2879
  %2881 = add i64 %107, -6074614478761156714
  %2882 = sub i64 0, %107
  %2883 = add i64 6074614478761156714, %2882
  %2884 = sub i64 0, %2883
  %2885 = xor i64 %2869, %2880
  %2886 = xor i64 %2885, %2870
  %2887 = xor i64 %2886, %2865
  %2888 = xor i64 %2887, %2884
  %2889 = xor i64 %2888, 8327582167867966559
  %2890 = xor i64 %2889, %2881
  %2891 = add i64 %29, 9216117184013491309
  %2892 = xor i64 9216117184013491309, %29
  %2893 = and i64 9216117184013491309, %29
  %2894 = mul i64 2, %2893
  %2895 = add i64 %2892, %2894
  %2896 = sext i32 %dispatcher1 to i64
  %2897 = add i64 %2896, 4411602954155882624
  %2898 = add i64 6557201581402070496, %2896
  %2899 = sub i64 %2898, 2145598627246187872
  %2900 = xor i64 %2895, 5915199350130710431
  %2901 = xor i64 %2900, %2897
  %2902 = xor i64 %2901, %2891
  %2903 = xor i64 %2902, %2899
  %2904 = mul i64 %2890, %2903
  %2905 = trunc i64 %2904 to i1
  %2906 = and i1 %2864, %2905
  %2907 = and i1 %.reload102, false
  %2908 = or i1 %2906, %2907
  %2909 = xor i1 %2908, false
  %2910 = xor i1 %2863, true
  %2911 = add i64 %15, -6804858622797856207
  %2912 = sub i64 0, %15
  %2913 = add i64 6804858622797856207, %2912
  %2914 = sub i64 0, %2913
  %2915 = add i64 %85, -8655229073173212355
  %2916 = sub i64 0, %85
  %2917 = sub i64 -8655229073173212355, %2916
  %2918 = or i64 %67, 5467372704421482520
  %2919 = and i64 5467372704421482520, %67
  %2920 = xor i64 5467372704421482520, %67
  %2921 = or i64 %2919, %2920
  %2922 = xor i64 %2911, %2921
  %2923 = xor i64 %2922, %2914
  %2924 = xor i64 %2923, %2918
  %2925 = xor i64 %2924, %2917
  %2926 = xor i64 %2925, %2915
  %2927 = xor i64 %2926, 2001547972592678739
  %2928 = add i64 %132, 8051931027809818779
  %2929 = add i64 8456262638678413272, %132
  %2930 = add i64 %2929, -404331610868594493
  %2931 = and i64 %49, -4598508353802025055
  %2932 = xor i64 %49, -1
  %2933 = or i64 4598508353802025054, %2932
  %2934 = xor i64 %2933, -1
  %2935 = and i64 %2934, -1
  %2936 = and i64 %77, 7965216922788016538
  %2937 = xor i64 %77, -1
  %2938 = or i64 -7965216922788016539, %2937
  %2939 = xor i64 %2938, -1
  %2940 = and i64 %2939, -1
  %2941 = xor i64 %2928, %2930
  %2942 = xor i64 %2941, %2931
  %2943 = xor i64 %2942, 4035518039296910555
  %2944 = xor i64 %2943, %2936
  %2945 = xor i64 %2944, %2935
  %2946 = xor i64 %2945, %2940
  %2947 = mul i64 %2927, %2946
  %2948 = trunc i64 %2947 to i1
  %2949 = xor i1 %2910, %2948
  %2950 = and i1 %2909, %2949
  %2951 = add i1 %2950, %2910
  %2952 = xor i1 %2951, true
  %2953 = xor i1 %2952, true
  %2954 = and i1 %2953, true
  %2955 = and i1 %2952, false
  %2956 = or i1 %2954, %2955
  %2957 = or i1 %2956, true
  %2958 = xor i1 %2952, true
  %2959 = and i1 %2958, true
  %2960 = and i1 %2952, false
  %2961 = or i1 %2959, %2960
  %2962 = xor i1 %2961, false
  %2963 = sub i1 %2957, %2962
  %2964 = sub i1 false, %2816
  %2965 = sub i1 %2963, %2964
  %2966 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 43
  %2967 = load i32, i32* %2966, align 4
  %2968 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 20
  %2969 = load i32, i32* %2968, align 4
  %2970 = add i32 %2967, 1972855307
  %2971 = sub i32 %2970, %2969
  %2972 = sub i32 %2971, 1972855307
  %2973 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 13
  %2974 = load i32, i32* %2973, align 4
  %2975 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 11
  %2976 = load i32, i32* %2975, align 4
  %2977 = add i32 %2974, %2976
  %.reload108 = load i1, i1* %.reg2mem107, align 1
  %2978 = select i1 %.reload108, i32 %2972, i32 %2977
  store i32 %2978, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem147, align 4
  store double 0.000000e+00, double* %.reg2mem149, align 8
  store i32 %2812, i32* %.reg2mem151, align 4
  store i32 %2814, i32* %.reg2mem153, align 4
  store i1 %2816, i1* %.reg2mem155, align 1
  store i1 %2863, i1* %.reg2mem157, align 1
  store i1 %2963, i1* %.reg2mem159, align 1
  store i1 %2965, i1* %.reg2mem161, align 1
  %2979 = load i8*, i8** %86, align 8
  %2980 = load i8, i8* %2979, align 1
  %2981 = xor i8 %2980, -1
  %2982 = or i8 %2981, -2
  %2983 = xor i8 %2982, -1
  %2984 = and i8 %2983, -1
  %2985 = icmp eq i8 %2984, 0
  %2986 = mul i8 %2980, %2980
  %2987 = sub i8 0, %2980
  %2988 = sub i8 %2986, %2987
  %2989 = mul i8 %2988, 3
  %2990 = srem i8 %2989, 2
  %2991 = icmp eq i8 %2990, 0
  %2992 = or i64 %116, -5407289077908008916
  %2993 = and i64 -5407289077908008916, %116
  %2994 = xor i64 -5407289077908008916, %116
  %2995 = or i64 %2993, %2994
  %2996 = and i64 %132, -669357078895256515
  %2997 = xor i64 %132, -1
  %2998 = or i64 669357078895256514, %2997
  %2999 = xor i64 %2998, -1
  %3000 = and i64 %2999, -1
  %3001 = add i64 %49, -1280077886488503203
  %3002 = xor i64 -1280077886488503203, %49
  %3003 = and i64 -1280077886488503203, %49
  %3004 = mul i64 2, %3003
  %3005 = add i64 %3002, %3004
  %3006 = xor i64 %2995, %2992
  %3007 = xor i64 %3006, %2996
  %3008 = xor i64 %3007, %3000
  %3009 = xor i64 %3008, -5535887053765605097
  %3010 = xor i64 %3009, %3005
  %3011 = xor i64 %3010, %3001
  %3012 = or i64 %69, -7000038381077577568
  %3013 = xor i64 %69, -1
  %3014 = and i64 %3013, 2909057261813185831
  %3015 = and i64 %69, -2909057261813185832
  %3016 = or i64 %3014, %3015
  %3017 = xor i64 -5294594869860205177, %3016
  %3018 = xor i64 %69, -1
  %3019 = or i64 7000038381077577567, %3018
  %3020 = xor i64 %3019, -1
  %3021 = and i64 %3020, -1
  %3022 = or i64 %3017, %3021
  %3023 = add i64 %97, -261788553715696530
  %3024 = add i64 -5320560090276952889, %97
  %3025 = add i64 %3024, 5058771536561256359
  %3026 = or i64 %81, -6354371351781538399
  %3027 = xor i64 %81, -1
  %3028 = and i64 %3027, -192919445366464107
  %3029 = and i64 %81, 192919445366464106
  %3030 = or i64 %3028, %3029
  %3031 = xor i64 6521810555727914036, %3030
  %3032 = xor i64 %81, -1
  %3033 = or i64 6354371351781538398, %3032
  %3034 = xor i64 %3033, -1
  %3035 = and i64 %3034, -1
  %3036 = or i64 %3031, %3035
  %3037 = xor i64 %3026, %3025
  %3038 = xor i64 %3037, %3036
  %3039 = xor i64 %3038, %3012
  %3040 = xor i64 %3039, %3023
  %3041 = xor i64 %3040, -5823591225755713881
  %3042 = xor i64 %3041, %3022
  %3043 = mul i64 %3011, %3042
  %3044 = trunc i64 %3043 to i1
  %3045 = xor i1 %2985, %3044
  %3046 = and i1 %3045, false
  %3047 = and i1 %2985, true
  %3048 = or i1 %3046, %3047
  %3049 = xor i1 %2991, true
  %3050 = and i1 %3049, false
  %3051 = and i64 %13, -4499731468115795733
  %3052 = xor i64 %13, -1
  %3053 = xor i64 -4499731468115795733, %3052
  %3054 = and i64 %3053, -4499731468115795733
  %3055 = or i64 %41, -2475074966632988105
  %3056 = xor i64 %41, -1
  %3057 = and i64 -2475074966632988105, %3056
  %3058 = add i64 %3057, %41
  %3059 = xor i64 %3054, %3051
  %3060 = xor i64 %3059, %3058
  %3061 = xor i64 %3060, %3055
  %3062 = xor i64 %3061, 5502428119212002189
  %3063 = or i64 %118, -4964719696103365312
  %3064 = xor i64 %118, -1
  %3065 = and i64 -4964719696103365312, %3064
  %3066 = add i64 %3065, %118
  %3067 = add i64 %49, -8588459892401920146
  %3068 = and i64 -8588459892401920146, %49
  %3069 = or i64 -8588459892401920146, %49
  %3070 = add i64 %3068, %3069
  %3071 = xor i64 %3063, %3066
  %3072 = xor i64 %3071, %3070
  %3073 = xor i64 %3072, 1989766886787231557
  %3074 = xor i64 %3073, %3067
  %3075 = mul i64 %3062, %3074
  %3076 = trunc i64 %3075 to i1
  %3077 = and i1 %2991, %3076
  %3078 = or i1 %3050, %3077
  %3079 = xor i1 %3048, %3078
  %3080 = xor i1 %2985, true
  %3081 = xor i1 %2991, true
  %3082 = or i1 %3080, %3081
  %3083 = xor i1 %3082, true
  %3084 = and i1 %3083, true
  %3085 = or i1 %3079, %3084
  %3086 = or i64 %134, 2132742286552928379
  %3087 = xor i64 %134, -1
  %3088 = and i64 %3087, -24328176998378666
  %3089 = and i64 %134, 24328176998378665
  %3090 = or i64 %3088, %3089
  %3091 = xor i64 -2148053840601316563, %3090
  %3092 = xor i64 %134, -1
  %3093 = or i64 -2132742286552928380, %3092
  %3094 = xor i64 %3093, -1
  %3095 = and i64 %3094, -1
  %3096 = or i64 %3091, %3095
  %3097 = or i64 %33, 8158912588332252081
  %3098 = xor i64 %33, -1
  %3099 = and i64 8158912588332252081, %3098
  %3100 = add i64 %3099, %33
  %3101 = add i64 %85, 4726998738662874031
  %3102 = sub i64 0, %85
  %3103 = sub i64 4726998738662874031, %3102
  %3104 = xor i64 %3096, %3100
  %3105 = xor i64 %3104, %3103
  %3106 = xor i64 %3105, -4708937335036447779
  %3107 = xor i64 %3106, %3086
  %3108 = xor i64 %3107, %3097
  %3109 = xor i64 %3108, %3101
  %3110 = and i64 %110, -6419940552839284225
  %3111 = xor i64 %110, -1
  %3112 = or i64 6419940552839284224, %3111
  %3113 = xor i64 %3112, -1
  %3114 = and i64 %3113, -1
  %3115 = add i64 %77, -3591435311011243149
  %3116 = add i64 -7386597616945927690, %77
  %3117 = add i64 %3116, 3795162305934684541
  %3118 = and i64 %53, -4142193512797889627
  %3119 = xor i64 %53, -1
  %3120 = or i64 4142193512797889626, %3119
  %3121 = xor i64 %3120, -1
  %3122 = and i64 %3121, -1
  %3123 = xor i64 %3110, %3117
  %3124 = xor i64 %3123, 2216593098607460320
  %3125 = xor i64 %3124, %3115
  %3126 = xor i64 %3125, %3114
  %3127 = xor i64 %3126, %3122
  %3128 = xor i64 %3127, %3118
  %3129 = mul i64 %3109, %3128
  %3130 = trunc i64 %3129 to i32
  %3131 = select i1 %3085, i32 984876120, i32 %3130
  %3132 = xor i32 %3131, 56
  store i32 %3132, i32* %4, align 4
  %3133 = call i8** @bf7763123487515004013(i32* %4)
  %3134 = load i8*, i8** %3133, align 8
  indirectbr i8* %3134, [label %loopEnd, label %2810]

3135:                                             ; preds = %3135, %loopStart
  %3136 = add i64 %103, 7889836095524873125
  %3137 = sub i64 0, %103
  %3138 = add i64 -7889836095524873125, %3137
  %3139 = sub i64 0, %3138
  %3140 = and i64 %65, -3457852676399065766
  %3141 = or i64 3457852676399065765, %65
  %3142 = sub i64 %3141, 3457852676399065765
  %3143 = xor i64 %3136, %3140
  %3144 = xor i64 %3143, %3142
  %3145 = xor i64 %3144, %3139
  %3146 = xor i64 %3145, 1940574031918799655
  %3147 = or i64 %67, -3662273059693985866
  %3148 = xor i64 %67, -1
  %3149 = and i64 -3662273059693985866, %3148
  %3150 = add i64 %3149, %67
  %3151 = and i64 %144, 2446075199878748686
  %3152 = xor i64 %144, -1
  %3153 = or i64 -2446075199878748687, %3152
  %3154 = xor i64 %3153, -1
  %3155 = and i64 %3154, -1
  %3156 = xor i64 %3155, -3156519916325137828
  %3157 = xor i64 %3156, %3150
  %3158 = xor i64 %3157, %3151
  %3159 = xor i64 %3158, %3147
  %3160 = mul i64 %3146, %3159
  %3161 = mul i64 %3160, 80
  %.reload34 = load i32, i32* %.reg2mem33, align 4
  %.reload105 = load i32, i32* %.reg2mem103, align 4
  %3162 = add i32 %.reload105, %.reload34
  %3163 = and i64 %33, -7510510307461683365
  %3164 = xor i64 %33, -1
  %3165 = or i64 7510510307461683364, %3164
  %3166 = xor i64 %3165, -1
  %3167 = and i64 %3166, -1
  %3168 = and i64 %103, 521229687114866579
  %3169 = xor i64 %103, -1
  %3170 = xor i64 521229687114866579, %3169
  %3171 = and i64 %3170, 521229687114866579
  %3172 = and i64 %120, -2874543450867783276
  %3173 = xor i64 %120, -1
  %3174 = xor i64 -2874543450867783276, %3173
  %3175 = and i64 %3174, -2874543450867783276
  %3176 = xor i64 -6833666583063396005, %3163
  %3177 = xor i64 %3176, %3175
  %3178 = xor i64 %3177, %3172
  %3179 = xor i64 %3178, %3168
  %3180 = xor i64 %3179, %3167
  %3181 = xor i64 %3180, %3171
  %3182 = and i64 %53, 1537977980772253697
  %3183 = or i64 -1537977980772253698, %53
  %3184 = sub i64 %3183, -1537977980772253698
  %3185 = add i64 %19, 8503520636064150900
  %3186 = add i64 5454733586258972302, %19
  %3187 = sub i64 %3186, -3048787049805178598
  %3188 = or i64 %29, -1257023508305698791
  %3189 = xor i64 %29, -1
  %3190 = and i64 %3189, -5545223152593078278
  %3191 = and i64 %29, 5545223152593078277
  %3192 = or i64 %3190, %3191
  %3193 = xor i64 6738879464948979683, %3192
  %3194 = xor i64 %29, -1
  %3195 = or i64 1257023508305698790, %3194
  %3196 = xor i64 %3195, -1
  %3197 = and i64 %3196, -1
  %3198 = or i64 %3193, %3197
  %3199 = xor i64 %3185, %3198
  %3200 = xor i64 %3199, %3184
  %3201 = xor i64 %3200, %3187
  %3202 = xor i64 %3201, %3188
  %3203 = xor i64 %3202, %3182
  %3204 = xor i64 %3203, 9201644165731799524
  %3205 = mul i64 %3181, %3204
  %3206 = mul i64 %3205, 47
  %3207 = srem i32 %3162, 2
  %3208 = add i64 67, 38
  %3209 = or i64 %41, 8984740973036606180
  %3210 = xor i64 %41, -1
  %3211 = and i64 %3210, -3511589231423959289
  %3212 = and i64 %41, 3511589231423959288
  %3213 = or i64 %3211, %3212
  %3214 = xor i64 -5479646556797936157, %3213
  %3215 = xor i64 %41, -1
  %3216 = or i64 -8984740973036606181, %3215
  %3217 = xor i64 %3216, -1
  %3218 = and i64 %3217, -1
  %3219 = or i64 %3214, %3218
  %3220 = or i64 %148, -4504670494551030751
  %3221 = and i64 -4504670494551030751, %148
  %3222 = xor i64 -4504670494551030751, %148
  %3223 = or i64 %3221, %3222
  %3224 = and i64 %59, 434997259171793767
  %3225 = xor i64 %59, -1
  %3226 = xor i64 434997259171793767, %3225
  %3227 = and i64 %3226, 434997259171793767
  %3228 = xor i64 %3223, %3224
  %3229 = xor i64 %3228, %3219
  %3230 = xor i64 %3229, %3220
  %3231 = xor i64 %3230, %3227
  %3232 = xor i64 %3231, %3209
  %3233 = xor i64 %3232, -7710388269364201281
  %3234 = and i64 %114, -7666826022462462704
  %3235 = xor i64 %114, -1
  %3236 = xor i64 -7666826022462462704, %3235
  %3237 = and i64 %3236, -7666826022462462704
  %3238 = or i64 %25, -105462506944121719
  %3239 = xor i64 %25, -1
  %3240 = and i64 %3239, -6418419614707231581
  %3241 = and i64 %25, 6418419614707231580
  %3242 = or i64 %3240, %3241
  %3243 = xor i64 6369324854398738474, %3242
  %3244 = xor i64 %25, -1
  %3245 = or i64 105462506944121718, %3244
  %3246 = xor i64 %3245, -1
  %3247 = and i64 %3246, -1
  %3248 = or i64 %3243, %3247
  %3249 = add i64 %15, 8503038149186732736
  %3250 = add i64 8385707266643803185, %15
  %3251 = add i64 %3250, 117330882542929551
  %3252 = xor i64 %3238, %3234
  %3253 = xor i64 %3252, 0
  %3254 = xor i64 %3253, %3237
  %3255 = xor i64 %3254, %3248
  %3256 = xor i64 %3255, %3251
  %3257 = xor i64 %3256, %3249
  %3258 = mul i64 %3233, %3257
  %3259 = trunc i64 %3258 to i32
  %3260 = icmp eq i32 %3207, %3259
  %3261 = xor i1 %3260, true
  %.reload101 = load i1, i1* %.reg2mem99, align 1
  %3262 = xor i1 %.reload101, true
  %3263 = or i1 %3261, true
  %3264 = and i1 %3261, true
  %3265 = sub i1 %3263, %3264
  %3266 = and i1 %3262, %3265
  %3267 = xor i1 %3262, %3265
  %3268 = or i1 %3266, %3267
  %3269 = xor i1 %3268, true
  %3270 = and i1 %3269, true
  %3271 = sub i1 false, %3260
  %3272 = sub i1 %3270, %3271
  %3273 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 26
  %3274 = load i32, i32* %3273, align 4
  %3275 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %3276 = load i32, i32* %3275, align 4
  %3277 = srem i32 %3274, %3276
  store i32 %3277, i32* %dispatcher, align 4
  store i32 %3162, i32* %.reg2mem151, align 4
  store i32 %3207, i32* %.reg2mem153, align 4
  store i1 %3260, i1* %.reg2mem155, align 1
  store i1 %3261, i1* %.reg2mem157, align 1
  store i1 %3270, i1* %.reg2mem159, align 1
  store i1 %3272, i1* %.reg2mem161, align 1
  %3278 = load i8*, i8** %52, align 8
  %3279 = load i8, i8* %3278, align 1
  %3280 = and i8 %3279, 1
  %3281 = icmp eq i8 %3280, 1
  %3282 = mul i8 %3279, %3279
  %3283 = add i8 %3282, %3279
  %3284 = srem i8 %3283, 2
  %3285 = icmp eq i8 %3284, 0
  %3286 = or i1 %3281, %3285
  %3287 = add i64 %13, 1992295007040456327
  %3288 = and i64 1992295007040456327, %13
  %3289 = or i64 1992295007040456327, %13
  %3290 = add i64 %3288, %3289
  %3291 = add i64 %134, 4500729625818849050
  %3292 = sub i64 0, %134
  %3293 = add i64 -4500729625818849050, %3292
  %3294 = sub i64 0, %3293
  %3295 = xor i64 %3287, %3290
  %3296 = xor i64 %3295, %3291
  %3297 = xor i64 %3296, %3294
  %3298 = xor i64 %3297, -5737603052066987531
  %3299 = add i64 %55, 7422914442671139242
  %3300 = add i64 6924674045884922611, %55
  %3301 = add i64 %3300, 498240396786216631
  %3302 = add i64 %93, -4355527525657790033
  %3303 = add i64 1382697000305092482, %93
  %3304 = sub i64 %3303, 5738224525962882515
  %3305 = xor i64 %3304, %3299
  %3306 = xor i64 %3305, %3301
  %3307 = xor i64 %3306, %3302
  %3308 = xor i64 %3307, 6627371631191152352
  %3309 = mul i64 %3298, %3308
  %3310 = trunc i64 %3309 to i32
  %3311 = select i1 %3286, i32 984876122, i32 %3310
  %3312 = xor i32 %3311, 58
  store i32 %3312, i32* %4, align 4
  %3313 = call i8** @bf7763123487515004013(i32* %4)
  %3314 = load i8*, i8** %3313, align 8
  indirectbr i8* %3314, [label %loopEnd, label %3135]

3315:                                             ; preds = %3315, %loopStart
  %.reload162 = load i1, i1* %.reg2mem161, align 1
  %.reload160 = load i1, i1* %.reg2mem159, align 1
  %.reload158 = load i1, i1* %.reg2mem157, align 1
  %.reload156 = load i1, i1* %.reg2mem155, align 1
  %.reload154 = load i32, i32* %.reg2mem153, align 4
  %.reload152 = load i32, i32* %.reg2mem151, align 4
  %3316 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 16
  %3317 = load i32, i32* %3316, align 4
  %3318 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 14
  %3319 = load i32, i32* %3318, align 4
  %3320 = sub i32 0, %3317
  %3321 = sub i32 0, %3319
  %3322 = add i32 %3320, %3321
  %3323 = sub i32 0, %3322
  store i32 %3323, i32* %dispatcher, align 4
  %.reload85 = load i32, i32* %.reg2mem84, align 4
  %.reload88 = load i32, i32* %.reg2mem87, align 4
  %.reload91 = load i32, i32* %.reg2mem90, align 4
  %.reload94 = load i32, i32* %.reg2mem93, align 4
  %.reload97 = load i32, i32* %.reg2mem96, align 4
  %.reload100 = load i1, i1* %.reg2mem99, align 1
  %.reload104 = load i32, i32* %.reg2mem103, align 4
  store i32 %.reload94, i32* %.reg2mem163, align 4
  store i1 %.reload162, i1* %.reg2mem165, align 1
  %3324 = load i8*, i8** %82, align 8
  %3325 = load i8, i8* %3324, align 1
  %3326 = mul i8 %3325, 2
  %3327 = mul i8 %3325, 2
  %3328 = add i64 %61, 456327790599617194
  %3329 = sub i64 0, %61
  %3330 = sub i64 456327790599617194, %3329
  %3331 = add i64 %65, -2328676779230829654
  %3332 = add i64 8870061104759852267, %65
  %3333 = sub i64 %3332, -7248006189718869695
  %3334 = add i64 %15, 6256038100466387167
  %3335 = sub i64 0, %15
  %3336 = add i64 -6256038100466387167, %3335
  %3337 = sub i64 0, %3336
  %3338 = xor i64 %3334, 3655678800893754257
  %3339 = xor i64 %3338, %3330
  %3340 = xor i64 %3339, %3328
  %3341 = xor i64 %3340, %3331
  %3342 = xor i64 %3341, %3333
  %3343 = xor i64 %3342, %3337
  %3344 = and i64 %116, -2549950916471022000
  %3345 = or i64 2549950916471021999, %116
  %3346 = sub i64 %3345, 2549950916471021999
  %3347 = and i64 %71, -1986624247195238417
  %3348 = xor i64 %71, -1
  %3349 = or i64 1986624247195238416, %3348
  %3350 = xor i64 %3349, -1
  %3351 = and i64 %3350, -1
  %3352 = or i64 %49, 463697356080849078
  %3353 = and i64 463697356080849078, %49
  %3354 = xor i64 463697356080849078, %49
  %3355 = or i64 %3353, %3354
  %3356 = xor i64 %3344, 9148098008797596386
  %3357 = xor i64 %3356, %3352
  %3358 = xor i64 %3357, %3346
  %3359 = xor i64 %3358, %3351
  %3360 = xor i64 %3359, %3347
  %3361 = xor i64 %3360, %3355
  %3362 = mul i64 %3343, %3361
  %3363 = trunc i64 %3362 to i8
  %3364 = add i8 %3363, %3327
  %3365 = mul i8 %3326, %3364
  %3366 = srem i8 %3365, 4
  %3367 = icmp eq i8 %3366, 0
  %3368 = mul i8 %3325, %3325
  %3369 = and i8 %3368, %3325
  %3370 = or i8 %3368, %3325
  %3371 = add i8 %3369, %3370
  %3372 = add i64 %142, 8786378427715962433
  %3373 = add i64 -4209529193994786594, %142
  %3374 = add i64 %3373, -5450836451998802589
  %3375 = and i64 %7, 5738832346203159982
  %3376 = or i64 -5738832346203159983, %7
  %3377 = sub i64 %3376, -5738832346203159983
  %3378 = or i64 %97, 4984197866714199827
  %3379 = xor i64 %97, -1
  %3380 = and i64 4984197866714199827, %3379
  %3381 = add i64 %3380, %97
  %3382 = xor i64 %3381, %3377
  %3383 = xor i64 %3382, 164797722852103211
  %3384 = xor i64 %3383, %3378
  %3385 = xor i64 %3384, %3372
  %3386 = xor i64 %3385, %3375
  %3387 = xor i64 %3386, %3374
  %3388 = or i64 %21, 1426156240237185652
  %3389 = and i64 1426156240237185652, %21
  %3390 = xor i64 1426156240237185652, %21
  %3391 = or i64 %3389, %3390
  %3392 = or i64 %47, 4070735666349325909
  %3393 = xor i64 %47, -1
  %3394 = and i64 %3393, 3769444518322539636
  %3395 = and i64 %47, -3769444518322539637
  %3396 = or i64 %3394, %3395
  %3397 = xor i64 878739950314140193, %3396
  %3398 = xor i64 %47, -1
  %3399 = or i64 -4070735666349325910, %3398
  %3400 = xor i64 %3399, -1
  %3401 = and i64 %3400, -1
  %3402 = or i64 %3397, %3401
  %3403 = add i64 %85, -1927922093963010627
  %3404 = sub i64 0, %85
  %3405 = add i64 1927922093963010627, %3404
  %3406 = sub i64 0, %3405
  %3407 = xor i64 %3403, 1092774853275489542
  %3408 = xor i64 %3407, %3402
  %3409 = xor i64 %3408, %3392
  %3410 = xor i64 %3409, %3391
  %3411 = xor i64 %3410, %3388
  %3412 = xor i64 %3411, %3406
  %3413 = mul i64 %3387, %3412
  %3414 = trunc i64 %3413 to i8
  %3415 = srem i8 %3371, %3414
  %3416 = icmp eq i8 %3415, 0
  %3417 = or i1 %3367, %3416
  %3418 = select i1 %3417, i32 984876156, i32 984876128
  %3419 = xor i32 %3418, 28
  store i32 %3419, i32* %4, align 4
  %3420 = call i8** @bf7763123487515004013(i32* %4)
  %3421 = load i8*, i8** %3420, align 8
  indirectbr i8* %3421, [label %loopEnd, label %3315]

3422:                                             ; preds = %3422, %loopStart
  %.reload166 = load i1, i1* %.reg2mem165, align 1
  %.reload164 = load i32, i32* %.reg2mem163, align 4
  store i32 %.reload164, i32* %.reg2mem110, align 4
  %3423 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 25
  %3424 = load i32, i32* %3423, align 4
  %3425 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %3426 = load i32, i32* %3425, align 4
  %3427 = sub i32 %3424, 1090334646
  %3428 = sub i32 %3427, %3426
  %3429 = add i32 %3428, 1090334646
  %3430 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 29
  %3431 = load i32, i32* %3430, align 4
  %3432 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %3433 = load i32, i32* %3432, align 4
  %3434 = srem i32 %3431, %3433
  %3435 = select i1 %.reload166, i32 %3429, i32 %3434
  store i32 %3435, i32* %dispatcher, align 4
  %3436 = load i8*, i8** %48, align 8
  %3437 = load i8, i8* %3436, align 1
  %3438 = and i8 %3437, 1
  %3439 = icmp eq i8 %3438, 0
  %3440 = mul i8 %3437, %3437
  %3441 = add i8 %3440, %3437
  %3442 = mul i8 %3441, 3
  %3443 = srem i8 %3442, 2
  %3444 = icmp eq i8 %3443, 0
  %3445 = and i1 %3439, %3444
  %3446 = xor i1 %3439, %3444
  %3447 = or i1 %3445, %3446
  %3448 = select i1 %3447, i32 984876098, i32 984876128
  %3449 = or i64 %105, -1399142395279927102
  %3450 = and i64 -1399142395279927102, %105
  %3451 = xor i64 -1399142395279927102, %105
  %3452 = or i64 %3450, %3451
  %3453 = add i64 %19, 4939959396954553904
  %3454 = xor i64 4939959396954553904, %19
  %3455 = and i64 4939959396954553904, %19
  %3456 = mul i64 2, %3455
  %3457 = add i64 %3454, %3456
  %3458 = or i64 %29, -3532158418111593827
  %3459 = and i64 -3532158418111593827, %29
  %3460 = xor i64 -3532158418111593827, %29
  %3461 = or i64 %3459, %3460
  %3462 = xor i64 %3453, %3461
  %3463 = xor i64 %3462, %3457
  %3464 = xor i64 %3463, 4054453272028401843
  %3465 = xor i64 %3464, %3449
  %3466 = xor i64 %3465, %3452
  %3467 = xor i64 %3466, %3458
  %3468 = or i64 %47, 3052959034663591091
  %3469 = xor i64 %47, -1
  %3470 = and i64 3052959034663591091, %3469
  %3471 = add i64 %3470, %47
  %3472 = add i64 %7, -1318065028223806701
  %3473 = and i64 -1318065028223806701, %7
  %3474 = or i64 -1318065028223806701, %7
  %3475 = add i64 %3473, %3474
  %3476 = and i64 %110, 7291894749156709501
  %3477 = xor i64 %110, -1
  %3478 = xor i64 7291894749156709501, %3477
  %3479 = and i64 %3478, 7291894749156709501
  %3480 = xor i64 %3475, -5771071719739913130
  %3481 = xor i64 %3480, %3468
  %3482 = xor i64 %3481, %3472
  %3483 = xor i64 %3482, %3471
  %3484 = xor i64 %3483, %3476
  %3485 = xor i64 %3484, %3479
  %3486 = mul i64 %3467, %3485
  %3487 = trunc i64 %3486 to i32
  %3488 = or i32 %3448, %3487
  %3489 = and i32 %3448, 34
  %3490 = sub i32 %3488, %3489
  store i32 %3490, i32* %4, align 4
  %3491 = call i8** @bf7763123487515004013(i32* %4)
  %3492 = load i8*, i8** %3491, align 8
  indirectbr i8* %3492, [label %loopEnd, label %3422]

3493:                                             ; preds = %3493, %loopStart
  %3494 = or i64 %29, -3501983068016050499
  %3495 = and i64 -3501983068016050499, %29
  %3496 = xor i64 -3501983068016050499, %29
  %3497 = or i64 %3495, %3496
  %3498 = or i64 %73, 8799866384918053460
  %3499 = xor i64 %73, -1
  %3500 = and i64 8799866384918053460, %3499
  %3501 = add i64 %3500, %73
  %3502 = or i64 %150, -5048990735349738720
  %3503 = xor i64 %150, -1
  %3504 = and i64 -5048990735349738720, %3503
  %3505 = add i64 %3504, %150
  %3506 = xor i64 %3502, %3494
  %3507 = xor i64 %3506, %3497
  %3508 = xor i64 %3507, %3498
  %3509 = xor i64 %3508, -629180742356504395
  %3510 = xor i64 %3509, %3505
  %3511 = xor i64 %3510, %3501
  %3512 = and i64 %49, -1523212894702396731
  %3513 = xor i64 %49, -1
  %3514 = or i64 1523212894702396730, %3513
  %3515 = xor i64 %3514, -1
  %3516 = and i64 %3515, -1
  %3517 = or i64 %83, 1621277578934609873
  %3518 = xor i64 %83, -1
  %3519 = and i64 1621277578934609873, %3518
  %3520 = add i64 %3519, %83
  %3521 = and i64 %23, 1384425607703867755
  %3522 = xor i64 %23, -1
  %3523 = or i64 -1384425607703867756, %3522
  %3524 = xor i64 %3523, -1
  %3525 = and i64 %3524, -1
  %3526 = xor i64 %3512, %3525
  %3527 = xor i64 %3526, %3521
  %3528 = xor i64 %3527, %3516
  %3529 = xor i64 %3528, 7332240988696502521
  %3530 = xor i64 %3529, %3520
  %3531 = xor i64 %3530, %3517
  %3532 = mul i64 %3511, %3531
  %3533 = trunc i64 %3532 to i32
  %3534 = sub i32 14, %3533
  %3535 = add i32 -609047414, 609047591
  %3536 = sub i32 88, 58
  %3537 = add i32 61, 66
  %3538 = sub i32 -1254229839, -1254229752
  %3539 = sub i32 30, 74
  %3540 = add i64 %126, 1869715325467092650
  %3541 = add i64 -2655228603179478106, %126
  %3542 = add i64 %3541, 4524943928646570756
  %3543 = or i64 %29, -2655701231213078167
  %3544 = and i64 -2655701231213078167, %29
  %3545 = xor i64 -2655701231213078167, %29
  %3546 = or i64 %3544, %3545
  %3547 = xor i64 %3542, %3543
  %3548 = xor i64 %3547, %3540
  %3549 = xor i64 %3548, 4718262332927174829
  %3550 = xor i64 %3549, %3546
  %3551 = and i64 %97, 7052291858379252897
  %3552 = xor i64 %97, -1
  %3553 = xor i64 7052291858379252897, %3552
  %3554 = and i64 %3553, 7052291858379252897
  %3555 = add i64 %33, 3053067518823450266
  %3556 = add i64 -5375520411467758626, %33
  %3557 = sub i64 %3556, -8428587930291208892
  %3558 = xor i64 %3551, %3557
  %3559 = xor i64 %3558, %3555
  %3560 = xor i64 %3559, -3682575769644907987
  %3561 = xor i64 %3560, %3554
  %3562 = mul i64 %3550, %3561
  %3563 = trunc i64 %3562 to i32
  %3564 = or i64 %71, -1879805949026603636
  %3565 = and i64 -1879805949026603636, %71
  %3566 = xor i64 -1879805949026603636, %71
  %3567 = or i64 %3565, %3566
  %3568 = or i64 %17, 8978835440029469416
  %3569 = xor i64 %17, -1
  %3570 = and i64 %3569, 1170583393558231439
  %3571 = and i64 %17, -1170583393558231440
  %3572 = or i64 %3570, %3571
  %3573 = xor i64 7828808826981151591, %3572
  %3574 = xor i64 %17, -1
  %3575 = or i64 -8978835440029469417, %3574
  %3576 = xor i64 %3575, -1
  %3577 = and i64 %3576, -1
  %3578 = or i64 %3573, %3577
  %3579 = xor i64 %3567, -9119694853915096441
  %3580 = xor i64 %3579, %3564
  %3581 = xor i64 %3580, %3568
  %3582 = xor i64 %3581, %3578
  %3583 = add i64 %37, -6079652385411387764
  %3584 = sub i64 0, %37
  %3585 = add i64 6079652385411387764, %3584
  %3586 = sub i64 0, %3585
  %3587 = add i64 %7, -5854684754748750430
  %3588 = add i64 4134712170273315019, %7
  %3589 = add i64 %3588, 8457347148687486167
  %3590 = or i64 %49, 6069982406056276136
  %3591 = xor i64 %49, -1
  %3592 = and i64 6069982406056276136, %3591
  %3593 = add i64 %3592, %49
  %3594 = xor i64 %3589, %3583
  %3595 = xor i64 %3594, %3586
  %3596 = xor i64 %3595, %3587
  %3597 = xor i64 %3596, %3593
  %3598 = xor i64 %3597, -701474846799132118
  %3599 = xor i64 %3598, %3590
  %3600 = mul i64 %3582, %3599
  %3601 = trunc i64 %3600 to i32
  %3602 = mul i32 %3563, %3601
  %3603 = sdiv i32 43, 47
  %3604 = mul i32 84, 57
  %3605 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 29
  %3606 = load i32, i32* %3605, align 4
  %3607 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %3608 = load i32, i32* %3607, align 4
  %3609 = srem i32 %3606, %3608
  store i32 %3609, i32* %dispatcher, align 4
  %3610 = load i8*, i8** %108, align 8
  %3611 = load i8, i8* %3610, align 1
  %3612 = add i64 %134, -8818867483399361429
  %3613 = and i64 -8818867483399361429, %134
  %3614 = or i64 -8818867483399361429, %134
  %3615 = add i64 %3613, %3614
  %3616 = and i64 %103, 6752103792333493977
  %3617 = xor i64 %103, -1
  %3618 = or i64 -6752103792333493978, %3617
  %3619 = xor i64 %3618, -1
  %3620 = and i64 %3619, -1
  %3621 = add i64 %9, -7487360388431343770
  %3622 = add i64 -6743130675026325850, %9
  %3623 = sub i64 %3622, 744229713405017920
  %3624 = xor i64 %3621, -4345655690361735467
  %3625 = xor i64 %3624, %3620
  %3626 = xor i64 %3625, %3623
  %3627 = xor i64 %3626, %3615
  %3628 = xor i64 %3627, %3616
  %3629 = xor i64 %3628, %3612
  %3630 = add i64 %67, 1142960928269294853
  %3631 = xor i64 1142960928269294853, %67
  %3632 = and i64 1142960928269294853, %67
  %3633 = mul i64 2, %3632
  %3634 = add i64 %3631, %3633
  %3635 = or i64 %146, 8849366518823502295
  %3636 = xor i64 %146, -1
  %3637 = and i64 8849366518823502295, %3636
  %3638 = add i64 %3637, %146
  %3639 = add i64 %101, 4712324629400156142
  %3640 = add i64 576982887007197109, %101
  %3641 = add i64 %3640, 4135341742392959033
  %3642 = xor i64 -5920033615701208451, %3635
  %3643 = xor i64 %3642, %3638
  %3644 = xor i64 %3643, %3630
  %3645 = xor i64 %3644, %3639
  %3646 = xor i64 %3645, %3641
  %3647 = xor i64 %3646, %3634
  %3648 = mul i64 %3629, %3647
  %3649 = trunc i64 %3648 to i8
  %3650 = and i8 %3611, %3649
  %3651 = icmp eq i8 %3650, 1
  %3652 = mul i8 %3611, %3611
  %3653 = add i8 %3652, 73
  %3654 = add i8 %3653, %3611
  %3655 = sub i8 %3654, 73
  %3656 = srem i8 %3655, 2
  %3657 = icmp eq i8 %3656, 0
  %3658 = or i1 %3651, %3657
  %3659 = or i64 %71, -2129585629455226262
  %3660 = xor i64 %71, -1
  %3661 = and i64 %3660, -1227651963396125365
  %3662 = and i64 %71, 1227651963396125364
  %3663 = or i64 %3661, %3662
  %3664 = xor i64 902039528414242593, %3663
  %3665 = xor i64 %71, -1
  %3666 = or i64 2129585629455226261, %3665
  %3667 = xor i64 %3666, -1
  %3668 = and i64 %3667, -1
  %3669 = or i64 %3664, %3668
  %3670 = and i64 %138, -1548930321808938760
  %3671 = xor i64 %138, -1
  %3672 = or i64 1548930321808938759, %3671
  %3673 = xor i64 %3672, -1
  %3674 = and i64 %3673, -1
  %3675 = xor i64 %3674, %3659
  %3676 = xor i64 %3675, 5468603728413913171
  %3677 = xor i64 %3676, %3669
  %3678 = xor i64 %3677, %3670
  %3679 = or i64 %29, -3422108518656654383
  %3680 = and i64 -3422108518656654383, %29
  %3681 = xor i64 -3422108518656654383, %29
  %3682 = or i64 %3680, %3681
  %3683 = and i64 %118, 6397048809530979433
  %3684 = xor i64 %118, -1
  %3685 = xor i64 6397048809530979433, %3684
  %3686 = and i64 %3685, 6397048809530979433
  %3687 = or i64 %134, 4575553847096194358
  %3688 = xor i64 %134, -1
  %3689 = and i64 %3688, -9149437239887355365
  %3690 = and i64 %134, 9149437239887355364
  %3691 = or i64 %3689, %3690
  %3692 = xor i64 -4721730961427949779, %3691
  %3693 = xor i64 %134, -1
  %3694 = or i64 -4575553847096194359, %3693
  %3695 = xor i64 %3694, -1
  %3696 = and i64 %3695, -1
  %3697 = or i64 %3692, %3696
  %3698 = xor i64 %3686, %3697
  %3699 = xor i64 %3698, %3683
  %3700 = xor i64 %3699, %3687
  %3701 = xor i64 %3700, %3682
  %3702 = xor i64 %3701, %3679
  %3703 = xor i64 %3702, 83037969438033909
  %3704 = mul i64 %3678, %3703
  %3705 = trunc i64 %3704 to i32
  %3706 = select i1 %3658, i32 %3705, i32 984876128
  %3707 = xor i32 %3706, 15
  store i32 %3707, i32* %4, align 4
  %3708 = call i8** @bf7763123487515004013(i32* %4)
  %3709 = load i8*, i8** %3708, align 8
  indirectbr i8* %3709, [label %loopEnd, label %3493]

codeRepl8:                                        ; preds = %codeRepl8, %loopStart
  store i64 4070807658626890119, i64* %109, align 8
  %3710 = call i8** @lk9254909843318351582(i64* %109)
  %3711 = load i8*, i8** %3710, align 8
  %3712 = bitcast i8* %3711 to void (i32*, i32*, [53 x i32]*, i32*)*
  call void %3712(i32* %.reg2mem10, i32* %.reg2mem112, [53 x i32]* %lookupTable, i32* %dispatcher)
  %3713 = load i8*, i8** %72, align 8
  %3714 = load i8, i8* %3713, align 1
  %3715 = or i64 %21, -6024381553621034774
  %3716 = xor i64 %21, -1
  %3717 = and i64 %3716, 4497638192712385074
  %3718 = and i64 %21, -4497638192712385075
  %3719 = or i64 %3717, %3718
  %3720 = xor i64 -7921890026884261160, %3719
  %3721 = xor i64 %21, -1
  %3722 = or i64 6024381553621034773, %3721
  %3723 = xor i64 %3722, -1
  %3724 = and i64 %3723, -1
  %3725 = or i64 %3720, %3724
  %3726 = sext i32 %208 to i64
  %3727 = add i64 %3726, -1672567378751589768
  %3728 = and i64 -1672567378751589768, %3726
  %3729 = or i64 -1672567378751589768, %3726
  %3730 = add i64 %3728, %3729
  %3731 = and i64 %75, 6602656967076054030
  %3732 = xor i64 %75, -1
  %3733 = xor i64 6602656967076054030, %3732
  %3734 = and i64 %3733, 6602656967076054030
  %3735 = xor i64 %3715, %3727
  %3736 = xor i64 %3735, %3731
  %3737 = xor i64 %3736, -1618088882522078041
  %3738 = xor i64 %3737, %3734
  %3739 = xor i64 %3738, %3730
  %3740 = xor i64 %3739, %3725
  %3741 = and i64 %59, -8906523344274307498
  %3742 = xor i64 %59, -1
  %3743 = xor i64 -8906523344274307498, %3742
  %3744 = and i64 %3743, -8906523344274307498
  %3745 = or i64 %101, 4479806678552350220
  %3746 = xor i64 %101, -1
  %3747 = and i64 4479806678552350220, %3746
  %3748 = add i64 %3747, %101
  %3749 = xor i64 %3741, -8960032765409570606
  %3750 = xor i64 %3749, %3748
  %3751 = xor i64 %3750, %3744
  %3752 = xor i64 %3751, %3745
  %3753 = mul i64 %3740, %3752
  %3754 = trunc i64 %3753 to i8
  %3755 = xor i8 %3714, %3754
  %3756 = and i8 %3755, %3714
  %3757 = icmp eq i8 %3756, 0
  %3758 = mul i8 %3714, %3714
  %3759 = add i8 %3758, %3714
  %3760 = mul i8 %3759, 3
  %3761 = srem i8 %3760, 2
  %3762 = add i64 %55, -216751194025861381
  %3763 = add i64 5871031259021015622, %55
  %3764 = sub i64 %3763, 6087782453046877003
  %3765 = and i64 %39, 7871185055372599497
  %3766 = xor i64 %39, -1
  %3767 = xor i64 7871185055372599497, %3766
  %3768 = and i64 %3767, 7871185055372599497
  %3769 = or i64 %7, 6543959463059705474
  %3770 = xor i64 %7, -1
  %3771 = and i64 6543959463059705474, %3770
  %3772 = add i64 %3771, %7
  %3773 = xor i64 %3768, %3769
  %3774 = xor i64 %3773, %3765
  %3775 = xor i64 %3774, %3762
  %3776 = xor i64 %3775, %3764
  %3777 = xor i64 %3776, 8616751166769295405
  %3778 = xor i64 %3777, %3772
  %3779 = and i64 %21, 4764389137211209176
  %3780 = xor i64 %21, -1
  %3781 = or i64 -4764389137211209177, %3780
  %3782 = xor i64 %3781, -1
  %3783 = and i64 %3782, -1
  %3784 = and i64 %136, 1216469858420982054
  %3785 = xor i64 %136, -1
  %3786 = or i64 -1216469858420982055, %3785
  %3787 = xor i64 %3786, -1
  %3788 = and i64 %3787, -1
  %3789 = xor i64 %3779, 0
  %3790 = xor i64 %3789, %3784
  %3791 = xor i64 %3790, %3788
  %3792 = xor i64 %3791, %3783
  %3793 = mul i64 %3778, %3792
  %3794 = trunc i64 %3793 to i8
  %3795 = icmp eq i8 %3761, %3794
  %3796 = or i1 %3757, %3795
  %3797 = add i64 %79, 6659461722628168413
  %3798 = add i64 -632936260176324668, %79
  %3799 = sub i64 %3798, -7292397982804493081
  %3800 = or i64 %85, -636024009138253481
  %3801 = xor i64 %85, -1
  %3802 = and i64 %3801, 3196654346644394281
  %3803 = and i64 %85, -3196654346644394282
  %3804 = or i64 %3802, %3803
  %3805 = xor i64 -2634412570697318274, %3804
  %3806 = xor i64 %85, -1
  %3807 = or i64 636024009138253480, %3806
  %3808 = xor i64 %3807, -1
  %3809 = and i64 %3808, -1
  %3810 = or i64 %3805, %3809
  %3811 = or i64 %41, -6888254289995077096
  %3812 = xor i64 %41, -1
  %3813 = and i64 %3812, 5755432289070501185
  %3814 = and i64 %41, -5755432289070501186
  %3815 = or i64 %3813, %3814
  %3816 = xor i64 -1173356940268132519, %3815
  %3817 = xor i64 %41, -1
  %3818 = or i64 6888254289995077095, %3817
  %3819 = xor i64 %3818, -1
  %3820 = and i64 %3819, -1
  %3821 = or i64 %3816, %3820
  %3822 = xor i64 %3811, 4083305984349781529
  %3823 = xor i64 %3822, %3800
  %3824 = xor i64 %3823, %3821
  %3825 = xor i64 %3824, %3799
  %3826 = xor i64 %3825, %3810
  %3827 = xor i64 %3826, %3797
  %3828 = or i64 %45, -5315993297505715482
  %3829 = xor i64 %45, -1
  %3830 = and i64 %3829, 58102906564172049
  %3831 = and i64 %45, -58102906564172050
  %3832 = or i64 %3830, %3831
  %3833 = xor i64 -5262561667165936649, %3832
  %3834 = xor i64 %45, -1
  %3835 = or i64 5315993297505715481, %3834
  %3836 = xor i64 %3835, -1
  %3837 = and i64 %3836, -1
  %3838 = or i64 %3833, %3837
  %3839 = or i64 %144, -1323910058331829596
  %3840 = xor i64 %144, -1
  %3841 = and i64 -1323910058331829596, %3840
  %3842 = add i64 %3841, %144
  %3843 = xor i64 %3839, %3842
  %3844 = xor i64 %3843, %3838
  %3845 = xor i64 %3844, %3828
  %3846 = xor i64 %3845, 6839917588114568032
  %3847 = mul i64 %3827, %3846
  %3848 = trunc i64 %3847 to i32
  %3849 = select i1 %3796, i32 984876102, i32 %3848
  %3850 = xor i32 %3849, 38
  store i32 %3850, i32* %4, align 4
  %3851 = call i8** @bf7763123487515004013(i32* %4)
  %3852 = load i8*, i8** %3851, align 8
  indirectbr i8* %3852, [label %loopEnd, label %codeRepl8]

3853:                                             ; preds = %3853, %loopStart
  %3854 = or i64 %150, 223565449660064485
  %3855 = xor i64 %150, -1
  %3856 = and i64 223565449660064485, %3855
  %3857 = add i64 %3856, %150
  %3858 = and i64 %69, -5119626915767536430
  %3859 = xor i64 %69, -1
  %3860 = or i64 5119626915767536429, %3859
  %3861 = xor i64 %3860, -1
  %3862 = and i64 %3861, -1
  %3863 = xor i64 %3862, 1311311366150441525
  %3864 = xor i64 %3863, %3857
  %3865 = xor i64 %3864, %3858
  %3866 = xor i64 %3865, %3854
  %3867 = and i64 %146, 8008916579130858012
  %3868 = xor i64 %146, -1
  %3869 = xor i64 8008916579130858012, %3868
  %3870 = and i64 %3869, 8008916579130858012
  %3871 = or i64 %17, 8603798868904168406
  %3872 = xor i64 %17, -1
  %3873 = and i64 %3872, -7624209747078871268
  %3874 = and i64 %17, 7624209747078871267
  %3875 = or i64 %3873, %3874
  %3876 = xor i64 -2209146606216033078, %3875
  %3877 = xor i64 %17, -1
  %3878 = or i64 -8603798868904168407, %3877
  %3879 = xor i64 %3878, -1
  %3880 = and i64 %3879, -1
  %3881 = or i64 %3876, %3880
  %3882 = or i64 %63, -4398088904316812361
  %3883 = xor i64 %63, -1
  %3884 = and i64 %3883, 3545897007376753790
  %3885 = and i64 %63, -3545897007376753791
  %3886 = or i64 %3884, %3885
  %3887 = xor i64 -881764366463801399, %3886
  %3888 = xor i64 %63, -1
  %3889 = or i64 4398088904316812360, %3888
  %3890 = xor i64 %3889, -1
  %3891 = and i64 %3890, -1
  %3892 = or i64 %3887, %3891
  %3893 = xor i64 %3881, %3882
  %3894 = xor i64 %3893, %3867
  %3895 = xor i64 %3894, %3892
  %3896 = xor i64 %3895, %3871
  %3897 = xor i64 %3896, 375768201718722223
  %3898 = xor i64 %3897, %3870
  %3899 = mul i64 %3866, %3898
  %3900 = trunc i64 %3899 to i32
  %3901 = mul i32 %3900, 21
  %3902 = or i64 %41, -2585738686012670504
  %3903 = xor i64 %41, -1
  %3904 = and i64 -2585738686012670504, %3903
  %3905 = add i64 %3904, %41
  %3906 = add i64 %99, 6484688605956904237
  %3907 = add i64 876672643882648349, %99
  %3908 = add i64 %3907, 5608015962074255888
  %3909 = xor i64 %3908, -4321242811387518907
  %3910 = xor i64 %3909, %3905
  %3911 = xor i64 %3910, %3902
  %3912 = xor i64 %3911, %3906
  %3913 = add i64 %59, 8591234123284785840
  %3914 = add i64 1901416164513680836, %59
  %3915 = add i64 %3914, 6689817958771105004
  %3916 = add i64 %51, 6844078840498206927
  %3917 = add i64 -7807165011655888532, %51
  %3918 = sub i64 %3917, 3795500221555456157
  %3919 = and i64 %128, -7342554667939183590
  %3920 = xor i64 %128, -1
  %3921 = xor i64 -7342554667939183590, %3920
  %3922 = and i64 %3921, -7342554667939183590
  %3923 = xor i64 %3919, %3918
  %3924 = xor i64 %3923, -9130859653770463082
  %3925 = xor i64 %3924, %3916
  %3926 = xor i64 %3925, %3922
  %3927 = xor i64 %3926, %3913
  %3928 = xor i64 %3927, %3915
  %3929 = mul i64 %3912, %3928
  %3930 = trunc i64 %3929 to i32
  %3931 = sdiv i32 %3930, 1
  %3932 = and i64 %35, -345614152254024499
  %3933 = xor i64 %35, -1
  %3934 = or i64 345614152254024498, %3933
  %3935 = xor i64 %3934, -1
  %3936 = and i64 %3935, -1
  %3937 = or i64 %71, 7718369121637668275
  %3938 = xor i64 %71, -1
  %3939 = and i64 7718369121637668275, %3938
  %3940 = add i64 %3939, %71
  %3941 = xor i64 %3940, %3932
  %3942 = xor i64 %3941, %3936
  %3943 = xor i64 %3942, -235080699757659651
  %3944 = xor i64 %3943, %3937
  %3945 = or i64 %150, -6083174778173927264
  %3946 = xor i64 %150, -1
  %3947 = and i64 -6083174778173927264, %3946
  %3948 = add i64 %3947, %150
  %3949 = and i64 %29, -2224042394195043636
  %3950 = xor i64 %29, -1
  %3951 = xor i64 -2224042394195043636, %3950
  %3952 = and i64 %3951, -2224042394195043636
  %3953 = or i64 %124, 63227357535396342
  %3954 = xor i64 %124, -1
  %3955 = and i64 63227357535396342, %3954
  %3956 = add i64 %3955, %124
  %3957 = xor i64 %3948, %3952
  %3958 = xor i64 %3957, %3953
  %3959 = xor i64 %3958, %3945
  %3960 = xor i64 %3959, %3956
  %3961 = xor i64 %3960, %3949
  %3962 = xor i64 %3961, 0
  %3963 = mul i64 %3944, %3962
  %3964 = trunc i64 %3963 to i32
  %3965 = sdiv i32 56, %3964
  %3966 = mul i32 101, 26
  %3967 = mul i32 77, 48
  %3968 = sub i32 73, 62
  %3969 = sub i32 53, -27
  %3970 = add i64 %136, -2518921194397606290
  %3971 = xor i64 -2518921194397606290, %136
  %3972 = and i64 -2518921194397606290, %136
  %3973 = mul i64 2, %3972
  %3974 = add i64 %3971, %3973
  %3975 = and i64 %49, 4611109881144520631
  %3976 = xor i64 %49, -1
  %3977 = or i64 -4611109881144520632, %3976
  %3978 = xor i64 %3977, -1
  %3979 = and i64 %3978, -1
  %3980 = and i64 %83, -592167970585289528
  %3981 = xor i64 %83, -1
  %3982 = or i64 592167970585289527, %3981
  %3983 = xor i64 %3982, -1
  %3984 = and i64 %3983, -1
  %3985 = xor i64 %3970, %3979
  %3986 = xor i64 %3985, %3984
  %3987 = xor i64 %3986, %3974
  %3988 = xor i64 %3987, %3975
  %3989 = xor i64 %3988, %3980
  %3990 = xor i64 %3989, 1935386145216774523
  %3991 = or i64 %57, -8247256710592704862
  %3992 = and i64 -8247256710592704862, %57
  %3993 = xor i64 -8247256710592704862, %57
  %3994 = or i64 %3992, %3993
  %3995 = or i64 %21, -3252372881473731554
  %3996 = xor i64 %21, -1
  %3997 = and i64 -3252372881473731554, %3996
  %3998 = add i64 %3997, %21
  %3999 = and i64 %136, 6737320734619817657
  %4000 = xor i64 %136, -1
  %4001 = or i64 -6737320734619817658, %4000
  %4002 = xor i64 %4001, -1
  %4003 = and i64 %4002, -1
  %4004 = xor i64 %3994, %3995
  %4005 = xor i64 %4004, %4003
  %4006 = xor i64 %4005, -8342981962120787422
  %4007 = xor i64 %4006, %3999
  %4008 = xor i64 %4007, %3991
  %4009 = xor i64 %4008, %3998
  %4010 = mul i64 %3990, %4009
  %4011 = trunc i64 %4010 to i32
  %4012 = add i32 %4011, 82
  %4013 = add i64 %13, -3990184523983403756
  %4014 = sub i64 0, %13
  %4015 = sub i64 -3990184523983403756, %4014
  %4016 = and i64 %134, -1997724836346229482
  %4017 = xor i64 %134, -1
  %4018 = xor i64 -1997724836346229482, %4017
  %4019 = and i64 %4018, -1997724836346229482
  %4020 = or i64 %69, 1954494171105394271
  %4021 = and i64 1954494171105394271, %69
  %4022 = xor i64 1954494171105394271, %69
  %4023 = or i64 %4021, %4022
  %4024 = xor i64 %4015, 7122555012069740103
  %4025 = xor i64 %4024, %4013
  %4026 = xor i64 %4025, %4023
  %4027 = xor i64 %4026, %4019
  %4028 = xor i64 %4027, %4020
  %4029 = xor i64 %4028, %4016
  %4030 = or i64 %39, -8203145015928076321
  %4031 = xor i64 %39, -1
  %4032 = and i64 -8203145015928076321, %4031
  %4033 = add i64 %4032, %39
  %4034 = or i64 %91, -6506366467239768616
  %4035 = xor i64 %91, -1
  %4036 = and i64 %4035, 7724777031677487132
  %4037 = and i64 %91, -7724777031677487133
  %4038 = or i64 %4036, %4037
  %4039 = xor i64 -3564786143179135548, %4038
  %4040 = xor i64 %91, -1
  %4041 = or i64 6506366467239768615, %4040
  %4042 = xor i64 %4041, -1
  %4043 = and i64 %4042, -1
  %4044 = or i64 %4039, %4043
  %4045 = or i64 %65, 6139878210921785740
  %4046 = xor i64 %65, -1
  %4047 = and i64 6139878210921785740, %4046
  %4048 = add i64 %4047, %65
  %4049 = xor i64 %4048, %4033
  %4050 = xor i64 %4049, %4034
  %4051 = xor i64 %4050, %4044
  %4052 = xor i64 %4051, %4045
  %4053 = xor i64 %4052, 2469639262008932784
  %4054 = xor i64 %4053, %4030
  %4055 = mul i64 %4029, %4054
  %4056 = trunc i64 %4055 to i32
  %4057 = sub i32 -1493213191, %4056
  %4058 = mul i32 %3968, 112
  %4059 = mul i32 %4057, 39
  %4060 = add i64 %83, 7912581571936895016
  %4061 = add i64 -1674206477803766533, %83
  %4062 = sub i64 %4061, 8859956023968890067
  %4063 = and i64 %150, -2865479119478187778
  %4064 = or i64 2865479119478187777, %150
  %4065 = sub i64 %4064, 2865479119478187777
  %4066 = and i64 %39, -5447074444830802750
  %4067 = xor i64 %39, -1
  %4068 = or i64 5447074444830802749, %4067
  %4069 = xor i64 %4068, -1
  %4070 = and i64 %4069, -1
  %4071 = xor i64 %4060, 3135462235834515925
  %4072 = xor i64 %4071, %4070
  %4073 = xor i64 %4072, %4062
  %4074 = xor i64 %4073, %4063
  %4075 = xor i64 %4074, %4066
  %4076 = xor i64 %4075, %4065
  %4077 = add i64 %65, 3336770806108206948
  %4078 = add i64 5024266243904547621, %65
  %4079 = add i64 %4078, -1687495437796340673
  %4080 = add i64 %116, -6324188430097181304
  %4081 = xor i64 -6324188430097181304, %116
  %4082 = and i64 -6324188430097181304, %116
  %4083 = mul i64 2, %4082
  %4084 = add i64 %4081, %4083
  %4085 = xor i64 %4084, -2793399030833553111
  %4086 = xor i64 %4085, %4080
  %4087 = xor i64 %4086, %4077
  %4088 = xor i64 %4087, %4079
  %4089 = mul i64 %4076, %4088
  %4090 = trunc i64 %4089 to i32
  %4091 = mul i32 %3966, %4090
  %4092 = add i32 %3931, 39
  %4093 = add i32 %4012, 101
  %4094 = sdiv i32 %3931, 7
  %4095 = and i32 %4057, 33
  %4096 = or i32 %4057, 33
  %4097 = add i32 %4095, %4096
  %4098 = mul i32 %3967, 53
  %4099 = and i32 %3969, 78
  %4100 = or i32 %3969, 78
  %4101 = add i32 %4099, %4100
  %4102 = add i64 %29, -5579519274913094205
  %4103 = add i64 1021210211544110636, %29
  %4104 = sub i64 %4103, 6600729486457204841
  %4105 = and i64 %33, -6844825824370497685
  %4106 = xor i64 %33, -1
  %4107 = xor i64 -6844825824370497685, %4106
  %4108 = and i64 %4107, -6844825824370497685
  %4109 = xor i64 %4102, %4105
  %4110 = xor i64 %4109, %4104
  %4111 = xor i64 %4110, -7429214829366118195
  %4112 = xor i64 %4111, %4108
  %4113 = and i64 %71, 5578327317141131815
  %4114 = or i64 -5578327317141131816, %71
  %4115 = sub i64 %4114, -5578327317141131816
  %4116 = add i64 %116, -6200334107441956842
  %4117 = xor i64 -6200334107441956842, %116
  %4118 = and i64 -6200334107441956842, %116
  %4119 = mul i64 2, %4118
  %4120 = add i64 %4117, %4119
  %4121 = xor i64 %4113, %4120
  %4122 = xor i64 %4121, %4115
  %4123 = xor i64 %4122, 6052492736186342495
  %4124 = xor i64 %4123, %4116
  %4125 = mul i64 %4112, %4124
  %4126 = trunc i64 %4125 to i32
  %4127 = add i32 %3968, %4126
  %4128 = add i32 0, %4058
  %4129 = add i32 %4128, %4059
  %4130 = add i32 %4129, %4091
  %4131 = add i32 %4130, -732924186
  %4132 = add i32 %4131, %4092
  %4133 = sub i32 %4132, -732924186
  %4134 = add i32 %4133, %4093
  %4135 = add i32 %4134, %4094
  %4136 = add i32 %4135, %4097
  %4137 = add i32 %4136, %4098
  %4138 = add i32 %4137, %4101
  %4139 = add i32 %4138, 314425467
  %4140 = add i32 %4139, %4127
  %4141 = sub i32 %4140, 314425467
  %4142 = xor i32 %4141, -1
  %4143 = or i32 %4142, 1
  %4144 = xor i32 %4141, -1
  %4145 = sub i32 %4143, %4144
  %4146 = icmp eq i32 %4145, 0
  %4147 = mul i32 %4141, %4141
  %4148 = add i32 %4147, %4141
  %4149 = mul i32 %4148, 3
  %4150 = srem i32 %4149, 2
  %4151 = icmp eq i32 %4150, 0
  %4152 = and i1 %4146, %4151
  %4153 = xor i1 %4146, %4151
  %4154 = or i1 %4152, %4153
  %4155 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %4156 = load i32, i32* %4155, align 4
  %4157 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %4158 = load i32, i32* %4157, align 4
  %4159 = srem i32 %4156, %4158
  %4160 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 30
  %4161 = load i32, i32* %4160, align 4
  %4162 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %4163 = load i32, i32* %4162, align 4
  %4164 = srem i32 %4161, %4163
  %4165 = select i1 %4154, i32 %4159, i32 %4164
  store i32 %4165, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem147, align 4
  store double 0.000000e+00, double* %.reg2mem149, align 8
  %4166 = load i8*, i8** %10, align 8
  %4167 = load i8, i8* %4166, align 1
  %4168 = or i64 %148, 2695280795061274976
  %4169 = and i64 2695280795061274976, %148
  %4170 = xor i64 2695280795061274976, %148
  %4171 = or i64 %4169, %4170
  %4172 = add i64 %146, 8920023135705954447
  %4173 = add i64 -6593749012421621934, %146
  %4174 = add i64 %4173, -2932971925581975235
  %4175 = xor i64 %4168, 2954282162386003013
  %4176 = xor i64 %4175, %4171
  %4177 = xor i64 %4176, %4174
  %4178 = xor i64 %4177, %4172
  %4179 = and i64 %128, -6318955658152951880
  %4180 = xor i64 %128, -1
  %4181 = xor i64 -6318955658152951880, %4180
  %4182 = and i64 %4181, -6318955658152951880
  %4183 = and i64 %138, 864414881332498103
  %4184 = xor i64 %138, -1
  %4185 = xor i64 864414881332498103, %4184
  %4186 = and i64 %4185, 864414881332498103
  %4187 = or i64 %126, 4654584894863967509
  %4188 = xor i64 %126, -1
  %4189 = and i64 4654584894863967509, %4188
  %4190 = add i64 %4189, %126
  %4191 = xor i64 %4179, %4187
  %4192 = xor i64 %4191, 7230832756360355098
  %4193 = xor i64 %4192, %4183
  %4194 = xor i64 %4193, %4186
  %4195 = xor i64 %4194, %4190
  %4196 = xor i64 %4195, %4182
  %4197 = mul i64 %4178, %4196
  %4198 = trunc i64 %4197 to i8
  %4199 = mul i8 %4167, %4198
  %4200 = mul i8 %4167, 2
  %4201 = add i8 2, %4200
  %4202 = mul i8 %4199, %4201
  %4203 = srem i8 %4202, 4
  %4204 = icmp eq i8 %4203, 0
  %4205 = mul i8 %4167, %4167
  %4206 = mul i8 %4205, %4167
  %4207 = add i8 %4206, %4167
  %4208 = srem i8 %4207, 2
  %4209 = icmp eq i8 %4208, 0
  %4210 = and i1 %4204, %4209
  %4211 = select i1 %4210, i32 984876152, i32 984876128
  %4212 = xor i32 %4211, -1
  %4213 = or i64 %110, -5483367275087947977
  %4214 = xor i64 %110, -1
  %4215 = and i64 %4214, 6965914884484474192
  %4216 = and i64 %110, -6965914884484474193
  %4217 = or i64 %4215, %4216
  %4218 = xor i64 -3220975136573476249, %4217
  %4219 = xor i64 %110, -1
  %4220 = or i64 5483367275087947976, %4219
  %4221 = xor i64 %4220, -1
  %4222 = and i64 %4221, -1
  %4223 = or i64 %4218, %4222
  %4224 = or i64 %5, -7437231825573392197
  %4225 = xor i64 %5, -1
  %4226 = and i64 -7437231825573392197, %4225
  %4227 = add i64 %4226, %5
  %4228 = xor i64 1178227386355993577, %4223
  %4229 = xor i64 %4228, %4227
  %4230 = xor i64 %4229, %4224
  %4231 = xor i64 %4230, %4213
  %4232 = and i64 %105, 4987840589604696086
  %4233 = xor i64 %105, -1
  %4234 = or i64 -4987840589604696087, %4233
  %4235 = xor i64 %4234, -1
  %4236 = and i64 %4235, -1
  %4237 = or i64 %103, 743161425189991178
  %4238 = and i64 743161425189991178, %103
  %4239 = xor i64 743161425189991178, %103
  %4240 = or i64 %4238, %4239
  %4241 = and i64 %5, 1524017355108321946
  %4242 = xor i64 %5, -1
  %4243 = or i64 -1524017355108321947, %4242
  %4244 = xor i64 %4243, -1
  %4245 = and i64 %4244, -1
  %4246 = xor i64 %4245, %4232
  %4247 = xor i64 %4246, %4237
  %4248 = xor i64 %4247, %4241
  %4249 = xor i64 %4248, -4494489056443258792
  %4250 = xor i64 %4249, %4236
  %4251 = xor i64 %4250, %4240
  %4252 = mul i64 %4231, %4251
  %4253 = trunc i64 %4252 to i32
  %4254 = and i32 %4212, %4253
  %4255 = add i64 %136, 7148485722399439259
  %4256 = add i64 -1669018725557401919, %136
  %4257 = sub i64 %4256, -8817504447956841178
  %4258 = and i64 %124, 4068704787721523711
  %4259 = or i64 -4068704787721523712, %124
  %4260 = sub i64 %4259, -4068704787721523712
  %4261 = and i64 %27, 7677316704712640283
  %4262 = xor i64 %27, -1
  %4263 = xor i64 7677316704712640283, %4262
  %4264 = and i64 %4263, 7677316704712640283
  %4265 = xor i64 %4255, %4264
  %4266 = xor i64 %4265, %4257
  %4267 = xor i64 %4266, 2125818210597532525
  %4268 = xor i64 %4267, %4261
  %4269 = xor i64 %4268, %4258
  %4270 = xor i64 %4269, %4260
  %4271 = add i64 %19, -1029025626149691886
  %4272 = sub i64 0, %19
  %4273 = add i64 1029025626149691886, %4272
  %4274 = sub i64 0, %4273
  %4275 = and i64 %142, -3767717529670478574
  %4276 = xor i64 %142, -1
  %4277 = or i64 3767717529670478573, %4276
  %4278 = xor i64 %4277, -1
  %4279 = and i64 %4278, -1
  %4280 = xor i64 %4279, %4275
  %4281 = xor i64 %4280, %4271
  %4282 = xor i64 %4281, %4274
  %4283 = xor i64 %4282, 336284880124418083
  %4284 = mul i64 %4270, %4283
  %4285 = trunc i64 %4284 to i32
  %4286 = and i32 %4211, %4285
  %4287 = or i32 %4254, %4286
  store i32 %4287, i32* %4, align 4
  %4288 = call i8** @bf7763123487515004013(i32* %4)
  %4289 = load i8*, i8** %4288, align 8
  indirectbr i8* %4289, [label %loopEnd, label %3853]

4290:                                             ; preds = %4290, %loopStart
  %.reload62 = load i32, i32* %.reg2mem61, align 4
  %4291 = or i64 %114, 2757818642935796124
  %4292 = xor i64 %114, -1
  %4293 = and i64 2757818642935796124, %4292
  %4294 = add i64 %4293, %114
  %4295 = and i64 %134, 8598192500284396077
  %4296 = xor i64 %134, -1
  %4297 = or i64 -8598192500284396078, %4296
  %4298 = xor i64 %4297, -1
  %4299 = and i64 %4298, -1
  %4300 = xor i64 %4295, %4291
  %4301 = xor i64 %4300, -7298792838044718581
  %4302 = xor i64 %4301, %4299
  %4303 = xor i64 %4302, %4294
  %4304 = and i64 %107, 2512173637136643035
  %4305 = xor i64 %107, -1
  %4306 = or i64 -2512173637136643036, %4305
  %4307 = xor i64 %4306, -1
  %4308 = and i64 %4307, -1
  %4309 = or i64 %79, 3304596859415231435
  %4310 = xor i64 %79, -1
  %4311 = and i64 %4310, -2073777122794107296
  %4312 = and i64 %79, 2073777122794107295
  %4313 = or i64 %4311, %4312
  %4314 = xor i64 -3538633156576512597, %4313
  %4315 = xor i64 %79, -1
  %4316 = or i64 -3304596859415231436, %4315
  %4317 = xor i64 %4316, -1
  %4318 = and i64 %4317, -1
  %4319 = or i64 %4314, %4318
  %4320 = add i64 %23, 3998781345535950106
  %4321 = add i64 7353286251826443504, %23
  %4322 = sub i64 %4321, 3354504906290493398
  %4323 = xor i64 %4308, %4322
  %4324 = xor i64 %4323, %4320
  %4325 = xor i64 %4324, %4304
  %4326 = xor i64 %4325, %4319
  %4327 = xor i64 %4326, %4309
  %4328 = xor i64 %4327, -6226341692616236218
  %4329 = mul i64 %4303, %4328
  %4330 = trunc i64 %4329 to i32
  %4331 = srem i32 %.reload62, %4330
  %4332 = icmp eq i32 %4331, 0
  %4333 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 32
  %4334 = load i32, i32* %4333, align 4
  %4335 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %4336 = load i32, i32* %4335, align 4
  %4337 = srem i32 %4334, %4336
  %4338 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 20
  %4339 = load i32, i32* %4338, align 4
  %4340 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 19
  %4341 = load i32, i32* %4340, align 4
  %4342 = add i32 %4339, %4341
  %4343 = select i1 %4332, i32 %4337, i32 %4342
  store i32 %4343, i32* %dispatcher, align 4
  %4344 = load i8*, i8** %106, align 8
  %4345 = load i8, i8* %4344, align 1
  %4346 = mul i8 %4345, 2
  %4347 = mul i8 %4345, 2
  %4348 = add i8 2, %4347
  %4349 = mul i8 %4346, %4348
  %4350 = srem i8 %4349, 4
  %4351 = or i64 %17, 4797532016819624788
  %4352 = xor i64 %17, -1
  %4353 = and i64 4797532016819624788, %4352
  %4354 = add i64 %4353, %17
  %4355 = add i64 %31, 5909589992218320069
  %4356 = add i64 -740984576592341921, %31
  %4357 = sub i64 %4356, -6650574568810661990
  %4358 = xor i64 %4357, 6641163418768536781
  %4359 = xor i64 %4358, %4354
  %4360 = xor i64 %4359, %4355
  %4361 = xor i64 %4360, %4351
  %4362 = and i64 %138, 8142726062768590226
  %4363 = xor i64 %138, -1
  %4364 = xor i64 8142726062768590226, %4363
  %4365 = and i64 %4364, 8142726062768590226
  %4366 = and i64 %73, 1526041048680169831
  %4367 = xor i64 %73, -1
  %4368 = or i64 -1526041048680169832, %4367
  %4369 = xor i64 %4368, -1
  %4370 = and i64 %4369, -1
  %4371 = or i64 %128, -6282372960008032754
  %4372 = and i64 -6282372960008032754, %128
  %4373 = xor i64 -6282372960008032754, %128
  %4374 = or i64 %4372, %4373
  %4375 = xor i64 %4362, %4370
  %4376 = xor i64 %4375, %4366
  %4377 = xor i64 %4376, 0
  %4378 = xor i64 %4377, %4365
  %4379 = xor i64 %4378, %4371
  %4380 = xor i64 %4379, %4374
  %4381 = mul i64 %4361, %4380
  %4382 = trunc i64 %4381 to i8
  %4383 = icmp eq i8 %4350, %4382
  %4384 = mul i8 %4345, %4345
  %4385 = sub i8 %4384, -70
  %4386 = add i8 %4385, %4345
  %4387 = add i8 %4386, -70
  %4388 = srem i8 %4387, 2
  %4389 = icmp eq i8 %4388, 0
  %4390 = and i64 %103, -43768289977934297
  %4391 = or i64 43768289977934296, %103
  %4392 = sub i64 %4391, 43768289977934296
  %4393 = add i64 %31, 6094459576125568036
  %4394 = add i64 3449945392250644311, %31
  %4395 = sub i64 %4394, -2644514183874923725
  %4396 = add i64 %5, -5520052381232722370
  %4397 = and i64 -5520052381232722370, %5
  %4398 = or i64 -5520052381232722370, %5
  %4399 = add i64 %4397, %4398
  %4400 = xor i64 %4395, 2560877311677322959
  %4401 = xor i64 %4400, %4393
  %4402 = xor i64 %4401, %4396
  %4403 = xor i64 %4402, %4399
  %4404 = xor i64 %4403, %4390
  %4405 = xor i64 %4404, %4392
  %4406 = add i64 %120, -6176501564200937363
  %4407 = sub i64 0, %120
  %4408 = sub i64 -6176501564200937363, %4407
  %4409 = add i64 %148, 7723635291379380635
  %4410 = sub i64 0, %148
  %4411 = add i64 -7723635291379380635, %4410
  %4412 = sub i64 0, %4411
  %4413 = xor i64 %4406, %4408
  %4414 = xor i64 %4413, %4409
  %4415 = xor i64 %4414, -339455305896103889
  %4416 = xor i64 %4415, %4412
  %4417 = mul i64 %4405, %4416
  %4418 = trunc i64 %4417 to i1
  %4419 = xor i1 %4383, %4418
  %4420 = xor i1 %4389, true
  %4421 = or i1 %4419, %4420
  %4422 = xor i1 %4421, true
  %4423 = and i1 %4422, true
  %4424 = select i1 %4423, i32 984876129, i32 984876128
  %4425 = xor i32 %4424, 1
  store i32 %4425, i32* %4, align 4
  %4426 = call i8** @bf7763123487515004013(i32* %4)
  %4427 = load i8*, i8** %4426, align 8
  indirectbr i8* %4427, [label %loopEnd, label %4290]

codeRepl9:                                        ; preds = %codeRepl9, %loopStart
  store i64 4070807658626890120, i64* %109, align 8
  %4428 = call i8** @lk9254909843318351582(i64* %109)
  %4429 = load i8*, i8** %4428, align 8
  %4430 = bitcast i8* %4429 to void (double*, i1*, i32*, i32*, i1*, [53 x i32]*, i32*)*
  call void %4430(double* %.reg2mem80, i1* %.reg2mem118, i32* %.reg2mem110, i32* %.reg2mem112, i1* %.reg2mem120, [53 x i32]* %lookupTable, i32* %dispatcher)
  %4431 = load i8*, i8** %100, align 8
  %4432 = load i8, i8* %4431, align 1
  %4433 = mul i8 %4432, 2
  %4434 = mul i8 %4432, 2
  %4435 = and i8 2, %4434
  %4436 = or i8 2, %4434
  %4437 = add i8 %4435, %4436
  %4438 = mul i8 %4433, %4437
  %4439 = and i64 %116, -7088314344245066758
  %4440 = or i64 7088314344245066757, %116
  %4441 = sub i64 %4440, 7088314344245066757
  %4442 = or i64 %49, -5530503876764663848
  %4443 = xor i64 %49, -1
  %4444 = and i64 -5530503876764663848, %4443
  %4445 = add i64 %4444, %49
  %4446 = xor i64 %4442, %4441
  %4447 = xor i64 %4446, -3210833312436431657
  %4448 = xor i64 %4447, %4439
  %4449 = xor i64 %4448, %4445
  %4450 = and i64 %9, 2642865509262122097
  %4451 = xor i64 %9, -1
  %4452 = xor i64 2642865509262122097, %4451
  %4453 = and i64 %4452, 2642865509262122097
  %4454 = and i64 %110, 2697492063261071905
  %4455 = xor i64 %110, -1
  %4456 = or i64 -2697492063261071906, %4455
  %4457 = xor i64 %4456, -1
  %4458 = and i64 %4457, -1
  %4459 = xor i64 %4453, %4458
  %4460 = xor i64 %4459, %4454
  %4461 = xor i64 %4460, 6353944761794001820
  %4462 = xor i64 %4461, %4450
  %4463 = mul i64 %4449, %4462
  %4464 = trunc i64 %4463 to i8
  %4465 = srem i8 %4438, %4464
  %4466 = icmp eq i8 %4465, 0
  %4467 = mul i8 %4432, %4432
  %4468 = add i8 %4467, %4432
  %4469 = srem i8 %4468, 2
  %4470 = icmp eq i8 %4469, 0
  %4471 = xor i1 %4470, true
  %4472 = and i1 %4466, %4471
  %4473 = add i1 %4472, %4470
  %4474 = or i64 %97, -9219329207053673743
  %4475 = and i64 -9219329207053673743, %97
  %4476 = xor i64 -9219329207053673743, %97
  %4477 = or i64 %4475, %4476
  %4478 = or i64 %103, -5207269882375966300
  %4479 = xor i64 %103, -1
  %4480 = and i64 %4479, -5732961102682954217
  %4481 = and i64 %103, 5732961102682954216
  %4482 = or i64 %4480, %4481
  %4483 = xor i64 561931676537624499, %4482
  %4484 = xor i64 %103, -1
  %4485 = or i64 5207269882375966299, %4484
  %4486 = xor i64 %4485, -1
  %4487 = and i64 %4486, -1
  %4488 = or i64 %4483, %4487
  %4489 = xor i64 %4477, %4488
  %4490 = xor i64 %4489, %4478
  %4491 = xor i64 %4490, %4474
  %4492 = xor i64 %4491, -2199215600745855497
  %4493 = or i64 %138, 5822107100901385279
  %4494 = xor i64 %138, -1
  %4495 = and i64 5822107100901385279, %4494
  %4496 = add i64 %4495, %138
  %4497 = or i64 %130, 6735599074832850055
  %4498 = xor i64 %130, -1
  %4499 = and i64 6735599074832850055, %4498
  %4500 = add i64 %4499, %130
  %4501 = add i64 %89, 7539293241234656929
  %4502 = add i64 -7828930644471413384, %89
  %4503 = sub i64 %4502, 3078520188003481303
  %4504 = xor i64 %4503, %4496
  %4505 = xor i64 %4504, %4501
  %4506 = xor i64 %4505, %4497
  %4507 = xor i64 %4506, 2580937770242686966
  %4508 = xor i64 %4507, %4493
  %4509 = xor i64 %4508, %4500
  %4510 = mul i64 %4492, %4509
  %4511 = trunc i64 %4510 to i32
  %4512 = select i1 %4473, i32 %4511, i32 984876128
  %4513 = xor i32 %4512, 58
  store i32 %4513, i32* %4, align 4
  %4514 = call i8** @bf7763123487515004013(i32* %4)
  %4515 = load i8*, i8** %4514, align 8
  indirectbr i8* %4515, [label %loopEnd, label %codeRepl9]

4516:                                             ; preds = %4516, %loopStart
  %4517 = add i64 3, 44
  %4518 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 20
  %4519 = load i32, i32* %4518, align 4
  %4520 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 18
  %4521 = load i32, i32* %4520, align 4
  %4522 = xor i32 %4519, %4521
  %4523 = and i32 %4519, %4521
  %4524 = mul i32 2, %4523
  %4525 = add i32 %4522, %4524
  %4526 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 18
  %4527 = load i32, i32* %4526, align 4
  %4528 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 16
  %4529 = load i32, i32* %4528, align 4
  %4530 = add i32 %4527, %4529
  %.reload121 = load i1, i1* %.reg2mem120, align 1
  %4531 = select i1 %.reload121, i32 %4525, i32 %4530
  store i32 %4531, i32* %dispatcher, align 4
  %4532 = load i8*, i8** %86, align 8
  %4533 = load i8, i8* %4532, align 1
  %4534 = mul i8 %4533, %4533
  %4535 = add i8 %4534, %4533
  %4536 = mul i8 %4535, 3
  %4537 = srem i8 %4536, 2
  %4538 = icmp eq i8 %4537, 0
  %4539 = mul i8 %4533, %4533
  %4540 = add i8 %4539, %4533
  %4541 = srem i8 %4540, 2
  %4542 = icmp eq i8 %4541, 0
  %4543 = xor i1 %4538, true
  %4544 = xor i1 %4542, true
  %4545 = or i1 %4543, %4544
  %4546 = xor i1 %4545, true
  %4547 = add i64 %97, -759263210822778562
  %4548 = xor i64 -759263210822778562, %97
  %4549 = and i64 -759263210822778562, %97
  %4550 = mul i64 2, %4549
  %4551 = add i64 %4548, %4550
  %4552 = or i64 %49, -2050326183825203709
  %4553 = xor i64 %49, -1
  %4554 = and i64 %4553, -5246006806221309903
  %4555 = and i64 %49, 5246006806221309902
  %4556 = or i64 %4554, %4555
  %4557 = xor i64 6105112703579137586, %4556
  %4558 = xor i64 %49, -1
  %4559 = or i64 2050326183825203708, %4558
  %4560 = xor i64 %4559, -1
  %4561 = and i64 %4560, -1
  %4562 = or i64 %4557, %4561
  %4563 = or i64 %69, -8100057224435284080
  %4564 = and i64 -8100057224435284080, %69
  %4565 = xor i64 -8100057224435284080, %69
  %4566 = or i64 %4564, %4565
  %4567 = xor i64 %4563, -2918229426990047035
  %4568 = xor i64 %4567, %4547
  %4569 = xor i64 %4568, %4552
  %4570 = xor i64 %4569, %4566
  %4571 = xor i64 %4570, %4562
  %4572 = xor i64 %4571, %4551
  %4573 = or i64 %63, 3155809523047476261
  %4574 = xor i64 %63, -1
  %4575 = and i64 %4574, -8670949469308598745
  %4576 = and i64 %63, 8670949469308598744
  %4577 = or i64 %4575, %4576
  %4578 = xor i64 -6025489267705910782, %4577
  %4579 = xor i64 %63, -1
  %4580 = or i64 -3155809523047476262, %4579
  %4581 = xor i64 %4580, -1
  %4582 = and i64 %4581, -1
  %4583 = or i64 %4578, %4582
  %4584 = add i64 %9, -1696283731385662199
  %4585 = sub i64 0, %9
  %4586 = add i64 1696283731385662199, %4585
  %4587 = sub i64 0, %4586
  %4588 = and i64 %43, 1564698557286277910
  %4589 = xor i64 %43, -1
  %4590 = or i64 -1564698557286277911, %4589
  %4591 = xor i64 %4590, -1
  %4592 = and i64 %4591, -1
  %4593 = xor i64 %4583, %4587
  %4594 = xor i64 %4593, %4588
  %4595 = xor i64 %4594, %4592
  %4596 = xor i64 %4595, %4584
  %4597 = xor i64 %4596, -5878288684143354355
  %4598 = xor i64 %4597, %4573
  %4599 = mul i64 %4572, %4598
  %4600 = trunc i64 %4599 to i1
  %4601 = and i1 %4546, %4600
  %4602 = select i1 %4601, i32 984876150, i32 984876128
  %4603 = xor i32 %4602, -1599661873
  %4604 = xor i32 %4603, -1599661863
  store i32 %4604, i32* %4, align 4
  %4605 = call i8** @bf7763123487515004013(i32* %4)
  %4606 = load i8*, i8** %4605, align 8
  indirectbr i8* %4606, [label %loopEnd, label %4516]

codeRepl10:                                       ; preds = %codeRepl10, %loopStart
  store i64 4070807658626890124, i64* %109, align 8
  %4607 = call i8** @lk9254909843318351582(i64* %109)
  %4608 = load i8*, i8** %4607, align 8
  %4609 = bitcast i8* %4608 to void ([53 x i32]*, i32*)*
  call void %4609([53 x i32]* %lookupTable, i32* %dispatcher)
  %4610 = load i8*, i8** %68, align 8
  %4611 = load i8, i8* %4610, align 1
  %4612 = or i64 %85, -4429521979660135158
  %4613 = and i64 -4429521979660135158, %85
  %4614 = xor i64 -4429521979660135158, %85
  %4615 = or i64 %4613, %4614
  %4616 = sext i32 %dispatcher1 to i64
  %4617 = and i64 %4616, -2648408956821699591
  %4618 = xor i64 %4616, -1
  %4619 = xor i64 -2648408956821699591, %4618
  %4620 = and i64 %4619, -2648408956821699591
  %4621 = xor i64 %4615, %4612
  %4622 = xor i64 %4621, %4620
  %4623 = xor i64 %4622, 5803980412760140297
  %4624 = xor i64 %4623, %4617
  %4625 = add i64 %63, -2356176607973155545
  %4626 = sub i64 0, %63
  %4627 = sub i64 -2356176607973155545, %4626
  %4628 = or i64 %116, -3831921310245616242
  %4629 = and i64 -3831921310245616242, %116
  %4630 = xor i64 -3831921310245616242, %116
  %4631 = or i64 %4629, %4630
  %4632 = add i64 %112, -3090480271920930099
  %4633 = sub i64 0, %112
  %4634 = sub i64 -3090480271920930099, %4633
  %4635 = xor i64 %4634, %4627
  %4636 = xor i64 %4635, %4628
  %4637 = xor i64 %4636, %4625
  %4638 = xor i64 %4637, %4631
  %4639 = xor i64 %4638, %4632
  %4640 = xor i64 %4639, 1119253279914330226
  %4641 = mul i64 %4624, %4640
  %4642 = trunc i64 %4641 to i8
  %4643 = mul i8 %4611, %4642
  %4644 = mul i8 %4611, 2
  %4645 = add i8 2, %4644
  %4646 = mul i8 %4643, %4645
  %4647 = srem i8 %4646, 4
  %4648 = icmp eq i8 %4647, 0
  %4649 = mul i8 %4611, %4611
  %4650 = mul i8 %4649, %4611
  %4651 = add i8 %4650, %4611
  %4652 = srem i8 %4651, 2
  %4653 = icmp eq i8 %4652, 0
  %4654 = and i1 %4648, %4653
  %4655 = add i64 %132, -8210802888580532797
  %4656 = and i64 -8210802888580532797, %132
  %4657 = or i64 -8210802888580532797, %132
  %4658 = add i64 %4656, %4657
  %4659 = or i64 %27, 4697924655050754328
  %4660 = xor i64 %27, -1
  %4661 = and i64 %4660, 2494234239671645462
  %4662 = and i64 %27, -2494234239671645463
  %4663 = or i64 %4661, %4662
  %4664 = xor i64 7183009710288092174, %4663
  %4665 = xor i64 %27, -1
  %4666 = or i64 -4697924655050754329, %4665
  %4667 = xor i64 %4666, -1
  %4668 = and i64 %4667, -1
  %4669 = or i64 %4664, %4668
  %4670 = add i64 %63, 5487979767124683185
  %4671 = add i64 3615035845650613678, %63
  %4672 = sub i64 %4671, -1872943921474069507
  %4673 = xor i64 %4659, %4658
  %4674 = xor i64 %4673, %4669
  %4675 = xor i64 %4674, -8385950800650323359
  %4676 = xor i64 %4675, %4672
  %4677 = xor i64 %4676, %4655
  %4678 = xor i64 %4677, %4670
  %4679 = add i64 %37, 677283033914448105
  %4680 = add i64 1750002408908526578, %37
  %4681 = add i64 %4680, -1072719374994078473
  %4682 = or i64 %55, 7192688497912271030
  %4683 = and i64 7192688497912271030, %55
  %4684 = xor i64 7192688497912271030, %55
  %4685 = or i64 %4683, %4684
  %4686 = or i64 %37, 1243313331498913373
  %4687 = and i64 1243313331498913373, %37
  %4688 = xor i64 1243313331498913373, %37
  %4689 = or i64 %4687, %4688
  %4690 = xor i64 %4685, -567185224630097333
  %4691 = xor i64 %4690, %4682
  %4692 = xor i64 %4691, %4686
  %4693 = xor i64 %4692, %4679
  %4694 = xor i64 %4693, %4681
  %4695 = xor i64 %4694, %4689
  %4696 = mul i64 %4678, %4695
  %4697 = trunc i64 %4696 to i32
  %4698 = select i1 %4654, i32 %4697, i32 984876128
  %4699 = xor i32 %4698, 11
  store i32 %4699, i32* %4, align 4
  %4700 = call i8** @bf7763123487515004013(i32* %4)
  %4701 = load i8*, i8** %4700, align 8
  indirectbr i8* %4701, [label %loopEnd, label %codeRepl10]

4702:                                             ; preds = %4702, %loopStart
  %4703 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 37
  %4704 = load i32, i32* %4703, align 4
  %4705 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %4706 = load i32, i32* %4705, align 4
  %4707 = srem i32 %4704, %4706
  store i32 %4707, i32* %dispatcher, align 4
  %.reload119 = load i1, i1* %.reg2mem118, align 1
  store i1 %.reload119, i1* %.reg2mem167, align 1
  %4708 = load i8*, i8** %86, align 8
  %4709 = load i8, i8* %4708, align 1
  %4710 = mul i8 %4709, %4709
  %4711 = add i8 %4710, %4709
  %4712 = mul i8 %4711, 3
  %4713 = srem i8 %4712, 2
  %4714 = icmp eq i8 %4713, 0
  %4715 = mul i8 %4709, %4709
  %4716 = add i8 %4715, %4709
  %4717 = srem i8 %4716, 2
  %4718 = icmp eq i8 %4717, 0
  %4719 = xor i1 %4718, true
  %4720 = xor i1 %4714, %4719
  %4721 = and i1 %4720, %4714
  %4722 = select i1 %4721, i32 984876123, i32 984876128
  %4723 = xor i32 %4722, 59
  store i32 %4723, i32* %4, align 4
  %4724 = call i8** @bf7763123487515004013(i32* %4)
  %4725 = load i8*, i8** %4724, align 8
  indirectbr i8* %4725, [label %loopEnd, label %4702]

codeRepl11:                                       ; preds = %codeRepl11, %loopStart
  store i64 4070807658626890114, i64* %109, align 8
  %4726 = call i8** @lk9254909843318351582(i64* %109)
  %4727 = load i8*, i8** %4726, align 8
  %4728 = bitcast i8* %4727 to void (double*, [53 x i32]*, i32*, i1*)*
  call void %4728(double* %.reg2mem80, [53 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem167)
  %4729 = load i8*, i8** %48, align 8
  %4730 = load i8, i8* %4729, align 1
  %4731 = mul i8 %4730, %4730
  %4732 = add i8 %4731, %4730
  %4733 = mul i8 %4732, 3
  %4734 = srem i8 %4733, 2
  %4735 = icmp eq i8 %4734, 0
  %4736 = mul i8 %4730, %4730
  %4737 = add i8 %4736, %4730
  %4738 = srem i8 %4737, 2
  %4739 = icmp eq i8 %4738, 0
  %4740 = xor i1 %4739, true
  %4741 = xor i1 %4735, %4740
  %4742 = and i1 %4741, %4735
  %4743 = select i1 %4742, i32 984876141, i32 984876128
  %4744 = xor i32 %4743, 2004021331
  %4745 = xor i32 %4744, 2004021342
  store i32 %4745, i32* %4, align 4
  %4746 = call i8** @bf7763123487515004013(i32* %4)
  %4747 = load i8*, i8** %4746, align 8
  indirectbr i8* %4747, [label %loopEnd, label %codeRepl11]

4748:                                             ; preds = %4748, %loopStart
  %.reload168 = load i1, i1* %.reg2mem167, align 1
  store i1 %.reload168, i1* %.reg2mem123, align 1
  %4749 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 12
  %4750 = load i32, i32* %4749, align 4
  %4751 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 11
  %4752 = load i32, i32* %4751, align 4
  %4753 = add i32 %4750, %4752
  %4754 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %4755 = load i32, i32* %4754, align 4
  %4756 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 20
  %4757 = load i32, i32* %4756, align 4
  %4758 = add i32 %4755, %4757
  %.reload124 = load i1, i1* %.reg2mem123, align 1
  %4759 = select i1 %.reload124, i32 %4753, i32 %4758
  store i32 %4759, i32* %dispatcher, align 4
  %.reload75 = load i32, i32* %.reg2mem74, align 4
  store i32 %.reload75, i32* %.ph.reg2mem, align 4
  %4760 = load i8*, i8** %102, align 8
  %4761 = load i8, i8* %4760, align 1
  %4762 = xor i8 %4761, -2
  %4763 = and i8 %4762, %4761
  %4764 = or i64 %41, 2429680603472235390
  %4765 = and i64 2429680603472235390, %41
  %4766 = xor i64 2429680603472235390, %41
  %4767 = or i64 %4765, %4766
  %4768 = add i64 %23, -3835415404914533849
  %4769 = add i64 -5319503367281042054, %23
  %4770 = add i64 %4769, 1484087962366508205
  %4771 = add i64 %17, -1765472166537736582
  %4772 = add i64 957294920799591330, %17
  %4773 = sub i64 %4772, 2722767087337327912
  %4774 = xor i64 %4767, %4771
  %4775 = xor i64 %4774, %4768
  %4776 = xor i64 %4775, 8840422213943510987
  %4777 = xor i64 %4776, %4764
  %4778 = xor i64 %4777, %4770
  %4779 = xor i64 %4778, %4773
  %4780 = and i64 %83, 8406237868891706304
  %4781 = xor i64 %83, -1
  %4782 = xor i64 8406237868891706304, %4781
  %4783 = and i64 %4782, 8406237868891706304
  %4784 = or i64 %33, 5362879850824603602
  %4785 = and i64 5362879850824603602, %33
  %4786 = xor i64 5362879850824603602, %33
  %4787 = or i64 %4785, %4786
  %4788 = xor i64 0, %4787
  %4789 = xor i64 %4788, %4784
  %4790 = xor i64 %4789, %4783
  %4791 = xor i64 %4790, %4780
  %4792 = mul i64 %4779, %4791
  %4793 = trunc i64 %4792 to i8
  %4794 = icmp eq i8 %4763, %4793
  %4795 = mul i8 %4761, %4761
  %4796 = add i8 %4795, %4761
  %4797 = mul i8 %4796, 3
  %4798 = srem i8 %4797, 2
  %4799 = icmp eq i8 %4798, 0
  %4800 = xor i1 %4799, true
  %4801 = and i1 %4794, %4800
  %4802 = add i1 %4801, %4799
  %4803 = select i1 %4802, i32 984876096, i32 984876128
  %4804 = xor i32 %4803, 32
  store i32 %4804, i32* %4, align 4
  %4805 = call i8** @bf7763123487515004013(i32* %4)
  %4806 = load i8*, i8** %4805, align 8
  indirectbr i8* %4806, [label %loopEnd, label %4748]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  %4807 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 39
  %4808 = load i32, i32* %4807, align 4
  %4809 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %4810 = load i32, i32* %4809, align 4
  %4811 = srem i32 %4808, %4810
  store i32 %4811, i32* %dispatcher, align 4
  %.reload125 = load i1, i1* %.reg2mem123, align 1
  store i32 %.ph.reload, i32* %.reg2mem169, align 4
  store i1 %.reload125, i1* %.reg2mem171, align 1
  %4812 = load i8*, i8** %66, align 8
  %4813 = load i8, i8* %4812, align 1
  %4814 = xor i8 %4813, -2
  %4815 = and i8 %4814, %4813
  %4816 = icmp eq i8 %4815, 0
  %4817 = mul i8 %4813, %4813
  %4818 = add i8 %4817, %4813
  %4819 = add i64 %35, -8560779159221666706
  %4820 = sub i64 0, %35
  %4821 = add i64 8560779159221666706, %4820
  %4822 = sub i64 0, %4821
  %4823 = add i64 %140, -1720829539081798667
  %4824 = add i64 -4758568247508986714, %140
  %4825 = add i64 %4824, 3037738708427188047
  %4826 = xor i64 7814330386022469577, %4819
  %4827 = xor i64 %4826, %4825
  %4828 = xor i64 %4827, %4822
  %4829 = xor i64 %4828, %4823
  %4830 = or i64 %61, 5899608705210139971
  %4831 = xor i64 %61, -1
  %4832 = and i64 5899608705210139971, %4831
  %4833 = add i64 %4832, %61
  %4834 = add i64 %85, 6602538103801473579
  %4835 = sub i64 0, %85
  %4836 = add i64 -6602538103801473579, %4835
  %4837 = sub i64 0, %4836
  %4838 = xor i64 %4834, %4833
  %4839 = xor i64 %4838, -7079403159001714837
  %4840 = xor i64 %4839, %4837
  %4841 = xor i64 %4840, %4830
  %4842 = mul i64 %4829, %4841
  %4843 = trunc i64 %4842 to i8
  %4844 = mul i8 %4818, %4843
  %4845 = srem i8 %4844, 2
  %4846 = and i64 %73, 699873508848623458
  %4847 = xor i64 %73, -1
  %4848 = xor i64 699873508848623458, %4847
  %4849 = and i64 %4848, 699873508848623458
  %4850 = and i64 %39, -5545347672712131165
  %4851 = or i64 5545347672712131164, %39
  %4852 = sub i64 %4851, 5545347672712131164
  %4853 = xor i64 %4852, %4846
  %4854 = xor i64 %4853, 8096896703679075249
  %4855 = xor i64 %4854, %4849
  %4856 = xor i64 %4855, %4850
  %4857 = and i64 %7, -5653100171639168394
  %4858 = xor i64 %7, -1
  %4859 = or i64 5653100171639168393, %4858
  %4860 = xor i64 %4859, -1
  %4861 = and i64 %4860, -1
  %4862 = and i64 %105, 6831572459568769503
  %4863 = or i64 -6831572459568769504, %105
  %4864 = sub i64 %4863, -6831572459568769504
  %4865 = xor i64 %4864, %4862
  %4866 = xor i64 %4865, %4861
  %4867 = xor i64 %4866, %4857
  %4868 = xor i64 %4867, 0
  %4869 = mul i64 %4856, %4868
  %4870 = trunc i64 %4869 to i8
  %4871 = icmp eq i8 %4845, %4870
  %4872 = or i1 %4816, %4871
  %4873 = select i1 %4872, i32 984876159, i32 984876128
  %4874 = xor i32 %4873, 31
  store i32 %4874, i32* %4, align 4
  %4875 = call i8** @bf7763123487515004013(i32* %4)
  %4876 = load i8*, i8** %4875, align 8
  indirectbr i8* %4876, [label %loopEnd, label %.loopexit]

codeRepl12:                                       ; preds = %codeRepl12, %loopStart
  store i64 4070807658626890118, i64* %109, align 8
  %4877 = call i8** @lk9254909843318351582(i64* %109)
  %4878 = load i8*, i8** %4877, align 8
  %4879 = bitcast i8* %4878 to void (i1*, i32*, i32*, [53 x i32]*, i32*, i32*)*
  call void %4879(i1* %.reg2mem171, i32* %.reg2mem169, i32* %.reg2mem126, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem175)
  %4880 = load i8*, i8** %94, align 8
  %4881 = load i8, i8* %4880, align 1
  %4882 = and i8 %4881, 1
  %4883 = and i64 %13, -3905062928051754779
  %4884 = xor i64 %13, -1
  %4885 = or i64 3905062928051754778, %4884
  %4886 = xor i64 %4885, -1
  %4887 = and i64 %4886, -1
  %4888 = or i64 %59, -2957190718533234632
  %4889 = xor i64 %59, -1
  %4890 = and i64 -2957190718533234632, %4889
  %4891 = add i64 %4890, %59
  %4892 = add i64 %79, -2389295937082219370
  %4893 = xor i64 -2389295937082219370, %79
  %4894 = and i64 -2389295937082219370, %79
  %4895 = mul i64 2, %4894
  %4896 = add i64 %4893, %4895
  %4897 = xor i64 %4892, %4891
  %4898 = xor i64 %4897, 7679138925530797943
  %4899 = xor i64 %4898, %4883
  %4900 = xor i64 %4899, %4888
  %4901 = xor i64 %4900, %4896
  %4902 = xor i64 %4901, %4887
  %4903 = and i64 %71, 6936797892145391197
  %4904 = or i64 -6936797892145391198, %71
  %4905 = sub i64 %4904, -6936797892145391198
  %4906 = and i64 %15, 1258301711316284834
  %4907 = or i64 -1258301711316284835, %15
  %4908 = sub i64 %4907, -1258301711316284835
  %4909 = add i64 %77, 3629868877840614228
  %4910 = sub i64 0, %77
  %4911 = add i64 -3629868877840614228, %4910
  %4912 = sub i64 0, %4911
  %4913 = xor i64 %4909, %4906
  %4914 = xor i64 %4913, %4905
  %4915 = xor i64 %4914, 0
  %4916 = xor i64 %4915, %4908
  %4917 = xor i64 %4916, %4903
  %4918 = xor i64 %4917, %4912
  %4919 = mul i64 %4902, %4918
  %4920 = trunc i64 %4919 to i8
  %4921 = icmp eq i8 %4882, %4920
  %4922 = mul i8 %4881, %4881
  %4923 = add i8 %4922, %4881
  %4924 = mul i8 %4923, 3
  %4925 = srem i8 %4924, 2
  %4926 = and i64 %110, 879995437603959728
  %4927 = xor i64 %110, -1
  %4928 = xor i64 879995437603959728, %4927
  %4929 = and i64 %4928, 879995437603959728
  %4930 = and i64 %89, 3317179747376069893
  %4931 = xor i64 %89, -1
  %4932 = xor i64 3317179747376069893, %4931
  %4933 = and i64 %4932, 3317179747376069893
  %4934 = xor i64 900512359492556547, %4929
  %4935 = xor i64 %4934, %4930
  %4936 = xor i64 %4935, %4933
  %4937 = xor i64 %4936, %4926
  %4938 = and i64 %53, -2814292895100295965
  %4939 = or i64 2814292895100295964, %53
  %4940 = sub i64 %4939, 2814292895100295964
  %4941 = add i64 %35, -1279812407502722131
  %4942 = xor i64 -1279812407502722131, %35
  %4943 = and i64 -1279812407502722131, %35
  %4944 = mul i64 2, %4943
  %4945 = add i64 %4942, %4944
  %4946 = or i64 %85, 3158950704949172943
  %4947 = xor i64 %85, -1
  %4948 = and i64 3158950704949172943, %4947
  %4949 = add i64 %4948, %85
  %4950 = xor i64 %4938, %4946
  %4951 = xor i64 %4950, 0
  %4952 = xor i64 %4951, %4945
  %4953 = xor i64 %4952, %4941
  %4954 = xor i64 %4953, %4940
  %4955 = xor i64 %4954, %4949
  %4956 = mul i64 %4937, %4955
  %4957 = trunc i64 %4956 to i8
  %4958 = icmp eq i8 %4925, %4957
  %4959 = or i1 %4921, %4958
  %4960 = select i1 %4959, i32 984876146, i32 984876128
  %4961 = xor i32 %4960, 18
  store i32 %4961, i32* %4, align 4
  %4962 = call i8** @bf7763123487515004013(i32* %4)
  %4963 = load i8*, i8** %4962, align 8
  indirectbr i8* %4963, [label %loopEnd, label %codeRepl12]

4964:                                             ; preds = %4964, %loopStart
  store i64 4070807658626890117, i64* %109, align 8
  %4965 = call i8** @lk9254909843318351582(i64* %109)
  %4966 = load i8*, i8** %4965, align 8
  %4967 = bitcast i8* %4966 to i32 (i8*, ...)*
  %4968 = call i32 (i8*, ...) %4967(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %.reload128 = load i32, i32* %.reg2mem126, align 4
  %4969 = srem i32 %.reload128, 2
  store i32 %4969, i32* %.reg2mem129, align 4
  %.reload135 = load i32, i32* %.reg2mem129, align 4
  %4970 = icmp eq i32 %.reload135, 0
  %4971 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  %4972 = load i32, i32* %4971, align 4
  %4973 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %4974 = load i32, i32* %4973, align 4
  %4975 = add i32 %4972, %4974
  %4976 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 25
  %4977 = load i32, i32* %4976, align 4
  %4978 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  %4979 = load i32, i32* %4978, align 4
  %4980 = add i32 %4977, %4979
  %4981 = select i1 %4970, i32 %4975, i32 %4980
  store i32 %4981, i32* %dispatcher, align 4
  %4982 = load i8*, i8** %68, align 8
  %4983 = load i8, i8* %4982, align 1
  %4984 = and i8 %4983, 1
  %4985 = icmp eq i8 %4984, 0
  %4986 = mul i8 %4983, %4983
  %4987 = add i8 %4986, %4983
  %4988 = mul i8 %4987, 3
  %4989 = srem i8 %4988, 2
  %4990 = icmp eq i8 %4989, 0
  %4991 = or i1 %4985, %4990
  %4992 = select i1 %4991, i32 984876135, i32 984876128
  %4993 = xor i32 %4992, 1157969178
  %4994 = xor i32 %4993, 1157969181
  store i32 %4994, i32* %4, align 4
  %4995 = call i8** @bf7763123487515004013(i32* %4)
  %4996 = load i8*, i8** %4995, align 8
  indirectbr i8* %4996, [label %loopEnd, label %4964]

codeRepl13:                                       ; preds = %codeRepl13, %loopStart
  store i64 4070807658626890126, i64* %109, align 8
  %4997 = call i8** @lk9254909843318351582(i64* %109)
  %4998 = load i8*, i8** %4997, align 8
  %4999 = bitcast i8* %4998 to void (float*, float*, i8*, i32*, i32*, i32*, i1*, [53 x i32]*, i32*)*
  call void %4999(float* %0, float* %1, i8* %2, i32* %.reg2mem136, i32* %.reg2mem, i32* %.reg2mem129, i1* %.reg2mem138, [53 x i32]* %lookupTable, i32* %dispatcher)
  %5000 = load i8*, i8** %6, align 8
  %5001 = load i8, i8* %5000, align 1
  %5002 = and i8 %5001, 1
  %5003 = icmp eq i8 %5002, 1
  %5004 = mul i8 %5001, %5001
  %5005 = add i8 %5004, %5001
  %5006 = srem i8 %5005, 2
  %5007 = and i64 %13, -5827106456723607406
  %5008 = xor i64 %13, -1
  %5009 = or i64 5827106456723607405, %5008
  %5010 = xor i64 %5009, -1
  %5011 = and i64 %5010, -1
  %5012 = or i64 %130, 87383803303783363
  %5013 = xor i64 %130, -1
  %5014 = and i64 87383803303783363, %5013
  %5015 = add i64 %5014, %130
  %5016 = or i64 %87, 6804818560184844954
  %5017 = xor i64 %87, -1
  %5018 = and i64 6804818560184844954, %5017
  %5019 = add i64 %5018, %87
  %5020 = xor i64 %5011, %5019
  %5021 = xor i64 %5020, %5015
  %5022 = xor i64 %5021, %5012
  %5023 = xor i64 %5022, %5016
  %5024 = xor i64 %5023, 3015766234718663199
  %5025 = xor i64 %5024, %5007
  %5026 = add i64 %57, -8491701054410598370
  %5027 = xor i64 -8491701054410598370, %57
  %5028 = and i64 -8491701054410598370, %57
  %5029 = mul i64 2, %5028
  %5030 = add i64 %5027, %5029
  %5031 = and i64 %41, 4581265137906580004
  %5032 = xor i64 %41, -1
  %5033 = or i64 -4581265137906580005, %5032
  %5034 = xor i64 %5033, -1
  %5035 = and i64 %5034, -1
  %5036 = xor i64 0, %5026
  %5037 = xor i64 %5036, %5035
  %5038 = xor i64 %5037, %5031
  %5039 = xor i64 %5038, %5030
  %5040 = mul i64 %5025, %5039
  %5041 = trunc i64 %5040 to i8
  %5042 = icmp eq i8 %5006, %5041
  %5043 = or i1 %5003, %5042
  %5044 = select i1 %5043, i32 984876141, i32 984876128
  %5045 = xor i32 %5044, 13
  store i32 %5045, i32* %4, align 4
  %5046 = call i8** @bf7763123487515004013(i32* %4)
  %5047 = load i8*, i8** %5046, align 8
  indirectbr i8* %5047, [label %loopEnd, label %codeRepl13]

5048:                                             ; preds = %5048, %loopStart
  %5049 = add i64 16, 54
  %5050 = sdiv i64 106, 62
  %5051 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 24
  %5052 = load i32, i32* %5051, align 4
  %5053 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  %5054 = load i32, i32* %5053, align 4
  %5055 = add i32 %5052, %5054
  %5056 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 22
  %5057 = load i32, i32* %5056, align 4
  %5058 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %5059 = load i32, i32* %5058, align 4
  %5060 = sub i32 0, %5059
  %5061 = sub i32 %5057, %5060
  %.reload139 = load i1, i1* %.reg2mem138, align 1
  %5062 = select i1 %.reload139, i32 %5055, i32 %5061
  store i32 %5062, i32* %dispatcher, align 4
  %5063 = load i8*, i8** %90, align 8
  %5064 = load i8, i8* %5063, align 1
  %5065 = and i8 %5064, 1
  %5066 = icmp eq i8 %5065, 1
  %5067 = mul i8 %5064, %5064
  %5068 = add i8 %5067, %5064
  %5069 = srem i8 %5068, 2
  %5070 = icmp eq i8 %5069, 0
  %5071 = xor i1 %5066, true
  %5072 = and i1 %5071, true
  %5073 = and i1 %5066, false
  %5074 = or i1 %5072, %5073
  %5075 = xor i1 %5070, true
  %5076 = and i1 %5075, true
  %5077 = and i1 %5070, false
  %5078 = or i1 %5076, %5077
  %5079 = xor i1 %5074, %5078
  %5080 = add i64 %77, 3522866566513903231
  %5081 = xor i64 3522866566513903231, %77
  %5082 = and i64 3522866566513903231, %77
  %5083 = mul i64 2, %5082
  %5084 = add i64 %5081, %5083
  %5085 = and i64 %19, 8575214621546102234
  %5086 = or i64 -8575214621546102235, %19
  %5087 = sub i64 %5086, -8575214621546102235
  %5088 = and i64 %103, 8066978542434620402
  %5089 = xor i64 %103, -1
  %5090 = xor i64 8066978542434620402, %5089
  %5091 = and i64 %5090, 8066978542434620402
  %5092 = xor i64 %5088, %5080
  %5093 = xor i64 %5092, %5091
  %5094 = xor i64 %5093, %5087
  %5095 = xor i64 %5094, %5085
  %5096 = xor i64 %5095, -8058654914317058553
  %5097 = xor i64 %5096, %5084
  %5098 = add i64 %69, -6381348303735173417
  %5099 = xor i64 -6381348303735173417, %69
  %5100 = and i64 -6381348303735173417, %69
  %5101 = mul i64 2, %5100
  %5102 = add i64 %5099, %5101
  %5103 = add i64 %138, -7221056405287086114
  %5104 = add i64 -2322466877673693405, %138
  %5105 = add i64 %5104, -4898589527613392709
  %5106 = xor i64 %5105, %5098
  %5107 = xor i64 %5106, %5102
  %5108 = xor i64 %5107, 7120385556347621303
  %5109 = xor i64 %5108, %5103
  %5110 = mul i64 %5097, %5109
  %5111 = trunc i64 %5110 to i1
  %5112 = xor i1 %5066, %5111
  %5113 = xor i1 %5070, true
  %5114 = or i1 %5112, %5113
  %5115 = xor i1 %5114, true
  %5116 = and i1 %5115, true
  %5117 = or i1 %5079, %5116
  %5118 = select i1 %5117, i32 984876141, i32 984876128
  %5119 = xor i32 %5118, 13
  store i32 %5119, i32* %4, align 4
  %5120 = call i8** @bf7763123487515004013(i32* %4)
  %5121 = load i8*, i8** %5120, align 8
  indirectbr i8* %5121, [label %loopEnd, label %5048]

5122:                                             ; preds = %5122, %loopStart
  %5123 = add i64 20, 50
  %5124 = sdiv i64 106, 62
  %5125 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 24
  %5126 = load i32, i32* %5125, align 4
  %5127 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 23
  %5128 = load i32, i32* %5127, align 4
  %5129 = xor i32 %5126, %5128
  %5130 = and i32 %5126, %5128
  %5131 = mul i32 2, %5130
  %5132 = add i32 %5129, %5131
  store i32 %5132, i32* %dispatcher, align 4
  %5133 = load i8*, i8** %8, align 8
  %5134 = load i8, i8* %5133, align 1
  %5135 = mul i8 %5134, 2
  %5136 = or i64 %138, -4416932790185502744
  %5137 = xor i64 %138, -1
  %5138 = and i64 -4416932790185502744, %5137
  %5139 = add i64 %5138, %138
  %5140 = and i64 %75, -4934889679830873471
  %5141 = or i64 4934889679830873470, %75
  %5142 = sub i64 %5141, 4934889679830873470
  %5143 = xor i64 %5142, %5139
  %5144 = xor i64 %5143, 3648487560521423933
  %5145 = xor i64 %5144, %5140
  %5146 = xor i64 %5145, %5136
  %5147 = and i64 %61, -2503892597813059507
  %5148 = xor i64 %61, -1
  %5149 = xor i64 -2503892597813059507, %5148
  %5150 = and i64 %5149, -2503892597813059507
  %5151 = and i64 %136, 4652472293189211639
  %5152 = xor i64 %136, -1
  %5153 = or i64 -4652472293189211640, %5152
  %5154 = xor i64 %5153, -1
  %5155 = and i64 %5154, -1
  %5156 = or i64 %136, 6529335710475033493
  %5157 = xor i64 %136, -1
  %5158 = and i64 %5157, -1388833310241910313
  %5159 = and i64 %136, 1388833310241910312
  %5160 = or i64 %5158, %5159
  %5161 = xor i64 -5321843766545479102, %5160
  %5162 = xor i64 %136, -1
  %5163 = or i64 -6529335710475033494, %5162
  %5164 = xor i64 %5163, -1
  %5165 = and i64 %5164, -1
  %5166 = or i64 %5161, %5165
  %5167 = xor i64 %5155, %5156
  %5168 = xor i64 %5167, %5147
  %5169 = xor i64 %5168, %5166
  %5170 = xor i64 %5169, -2547357818405407190
  %5171 = xor i64 %5170, %5151
  %5172 = xor i64 %5171, %5150
  %5173 = mul i64 %5146, %5172
  %5174 = trunc i64 %5173 to i8
  %5175 = mul i8 %5134, %5174
  %5176 = sub i8 0, %5175
  %5177 = sub i8 2, %5176
  %5178 = mul i8 %5135, %5177
  %5179 = srem i8 %5178, 4
  %5180 = icmp eq i8 %5179, 0
  %5181 = mul i8 %5134, %5134
  %5182 = xor i8 %5181, %5134
  %5183 = and i8 %5181, %5134
  %5184 = mul i8 2, %5183
  %5185 = add i8 %5182, %5184
  %5186 = and i64 %99, 8447334728431218082
  %5187 = xor i64 %99, -1
  %5188 = xor i64 8447334728431218082, %5187
  %5189 = and i64 %5188, 8447334728431218082
  %5190 = add i64 %136, -4001757068477555283
  %5191 = add i64 -2076163273429590309, %136
  %5192 = sub i64 %5191, 1925593795047964974
  %5193 = xor i64 -1154009484456381963, %5192
  %5194 = xor i64 %5193, %5186
  %5195 = xor i64 %5194, %5189
  %5196 = xor i64 %5195, %5190
  %5197 = and i64 %89, -3550461434584963614
  %5198 = xor i64 %89, -1
  %5199 = or i64 3550461434584963613, %5198
  %5200 = xor i64 %5199, -1
  %5201 = and i64 %5200, -1
  %5202 = or i64 %144, 1132924952555677630
  %5203 = xor i64 %144, -1
  %5204 = and i64 1132924952555677630, %5203
  %5205 = add i64 %5204, %144
  %5206 = add i64 %61, -7649557375796077688
  %5207 = xor i64 -7649557375796077688, %61
  %5208 = and i64 -7649557375796077688, %61
  %5209 = mul i64 2, %5208
  %5210 = add i64 %5207, %5209
  %5211 = xor i64 %5205, %5197
  %5212 = xor i64 %5211, 4676415473094059194
  %5213 = xor i64 %5212, %5201
  %5214 = xor i64 %5213, %5206
  %5215 = xor i64 %5214, %5210
  %5216 = xor i64 %5215, %5202
  %5217 = mul i64 %5196, %5216
  %5218 = trunc i64 %5217 to i8
  %5219 = srem i8 %5185, %5218
  %5220 = add i64 %126, -402761096423124601
  %5221 = xor i64 -402761096423124601, %126
  %5222 = and i64 -402761096423124601, %126
  %5223 = mul i64 2, %5222
  %5224 = add i64 %5221, %5223
  %5225 = or i64 %116, 2663655091880652612
  %5226 = xor i64 %116, -1
  %5227 = and i64 %5226, 5263157903684101710
  %5228 = and i64 %116, -5263157903684101711
  %5229 = or i64 %5227, %5228
  %5230 = xor i64 7925572334077184266, %5229
  %5231 = xor i64 %116, -1
  %5232 = or i64 -2663655091880652613, %5231
  %5233 = xor i64 %5232, -1
  %5234 = and i64 %5233, -1
  %5235 = or i64 %5230, %5234
  %5236 = xor i64 %5235, -1020989301391963533
  %5237 = xor i64 %5236, %5224
  %5238 = xor i64 %5237, %5220
  %5239 = xor i64 %5238, %5225
  %5240 = add i64 %112, 4227791349264823537
  %5241 = add i64 -806374331875996406, %112
  %5242 = sub i64 %5241, -5034165681140819943
  %5243 = add i64 %21, -4169764408053810492
  %5244 = sub i64 0, %21
  %5245 = sub i64 -4169764408053810492, %5244
  %5246 = add i64 %37, -7151405768300011949
  %5247 = add i64 -787966160262423432, %37
  %5248 = sub i64 %5247, 6363439608037588517
  %5249 = xor i64 %5248, 0
  %5250 = xor i64 %5249, %5242
  %5251 = xor i64 %5250, %5246
  %5252 = xor i64 %5251, %5243
  %5253 = xor i64 %5252, %5245
  %5254 = xor i64 %5253, %5240
  %5255 = mul i64 %5239, %5254
  %5256 = trunc i64 %5255 to i8
  %5257 = icmp eq i8 %5219, %5256
  %5258 = xor i1 %5180, true
  %5259 = and i1 %5258, true
  %5260 = and i1 %5180, false
  %5261 = or i1 %5259, %5260
  %5262 = xor i1 %5257, true
  %5263 = and i1 %5262, true
  %5264 = or i64 %47, -1716896640054437098
  %5265 = and i64 -1716896640054437098, %47
  %5266 = xor i64 -1716896640054437098, %47
  %5267 = or i64 %5265, %5266
  %5268 = add i64 %65, 3944896149464860626
  %5269 = add i64 8386742645252652273, %65
  %5270 = add i64 %5269, -4441846495787791647
  %5271 = xor i64 %5264, 8481934906665189883
  %5272 = xor i64 %5271, %5270
  %5273 = xor i64 %5272, %5268
  %5274 = xor i64 %5273, %5267
  %5275 = add i64 %114, -4466926400406576446
  %5276 = sub i64 0, %114
  %5277 = add i64 4466926400406576446, %5276
  %5278 = sub i64 0, %5277
  %5279 = add i64 %144, 813736682913672463
  %5280 = xor i64 813736682913672463, %144
  %5281 = and i64 813736682913672463, %144
  %5282 = mul i64 2, %5281
  %5283 = add i64 %5280, %5282
  %5284 = xor i64 %5279, %5283
  %5285 = xor i64 %5284, %5278
  %5286 = xor i64 %5285, 0
  %5287 = xor i64 %5286, %5275
  %5288 = mul i64 %5274, %5287
  %5289 = trunc i64 %5288 to i1
  %5290 = and i1 %5257, %5289
  %5291 = or i1 %5263, %5290
  %5292 = xor i1 %5261, %5291
  %5293 = xor i1 %5180, true
  %5294 = xor i1 %5257, true
  %5295 = or i1 %5293, %5294
  %5296 = xor i1 %5295, true
  %5297 = and i1 %5296, true
  %5298 = or i1 %5292, %5297
  %5299 = or i64 %95, 2655571699607240421
  %5300 = and i64 2655571699607240421, %95
  %5301 = xor i64 2655571699607240421, %95
  %5302 = or i64 %5300, %5301
  %5303 = or i64 %65, -5935701038717635654
  %5304 = xor i64 %65, -1
  %5305 = and i64 %5304, -1107958046087215206
  %5306 = and i64 %65, 1107958046087215205
  %5307 = or i64 %5305, %5306
  %5308 = xor i64 6719257791132791840, %5307
  %5309 = xor i64 %65, -1
  %5310 = or i64 5935701038717635653, %5309
  %5311 = xor i64 %5310, -1
  %5312 = and i64 %5311, -1
  %5313 = or i64 %5308, %5312
  %5314 = xor i64 -8460501875189458483, %5299
  %5315 = xor i64 %5314, %5303
  %5316 = xor i64 %5315, %5302
  %5317 = xor i64 %5316, %5313
  %5318 = and i64 %77, 4669728275294863222
  %5319 = xor i64 %77, -1
  %5320 = xor i64 4669728275294863222, %5319
  %5321 = and i64 %5320, 4669728275294863222
  %5322 = add i64 %9, 8201259635064374270
  %5323 = sub i64 0, %9
  %5324 = add i64 -8201259635064374270, %5323
  %5325 = sub i64 0, %5324
  %5326 = or i64 %112, -5762493353803445513
  %5327 = xor i64 %112, -1
  %5328 = and i64 -5762493353803445513, %5327
  %5329 = add i64 %5328, %112
  %5330 = xor i64 %5325, %5321
  %5331 = xor i64 %5330, %5318
  %5332 = xor i64 %5331, %5329
  %5333 = xor i64 %5332, -6697201929615664963
  %5334 = xor i64 %5333, %5322
  %5335 = xor i64 %5334, %5326
  %5336 = mul i64 %5317, %5335
  %5337 = trunc i64 %5336 to i32
  %5338 = select i1 %5298, i32 %5337, i32 984876128
  %5339 = xor i32 %5338, 57
  store i32 %5339, i32* %4, align 4
  %5340 = call i8** @bf7763123487515004013(i32* %4)
  %5341 = load i8*, i8** %5340, align 8
  indirectbr i8* %5341, [label %loopEnd, label %5122]

codeRepl14:                                       ; preds = %codeRepl14, %loopStart
  store i64 4070807658626890123, i64* %109, align 8
  %5342 = call i8** @lk9254909843318351582(i64* %109)
  %5343 = load i8*, i8** %5342, align 8
  %5344 = bitcast i8* %5343 to void ([53 x i32]*, i32*, i32*, i32*)*
  call void %5344([53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem136, i32* %.reg2mem173)
  %5345 = load i8*, i8** %40, align 8
  %5346 = load i8, i8* %5345, align 1
  %5347 = mul i8 %5346, 2
  %5348 = mul i8 %5346, 2
  %5349 = add i8 2, %5348
  %5350 = mul i8 %5347, %5349
  %5351 = srem i8 %5350, 4
  %5352 = icmp eq i8 %5351, 0
  %5353 = mul i8 %5346, %5346
  %5354 = sext i32 %208 to i64
  %5355 = or i64 %5354, -8405683308862564460
  %5356 = and i64 -8405683308862564460, %5354
  %5357 = xor i64 -8405683308862564460, %5354
  %5358 = or i64 %5356, %5357
  %5359 = or i64 %122, 8333874865584138824
  %5360 = and i64 8333874865584138824, %122
  %5361 = xor i64 8333874865584138824, %122
  %5362 = or i64 %5360, %5361
  %5363 = or i64 %71, 4455990833515955371
  %5364 = xor i64 %71, -1
  %5365 = and i64 %5364, -5381346380361432904
  %5366 = and i64 %71, 5381346380361432903
  %5367 = or i64 %5365, %5366
  %5368 = xor i64 -8608839631785130989, %5367
  %5369 = xor i64 %71, -1
  %5370 = or i64 -4455990833515955372, %5369
  %5371 = xor i64 %5370, -1
  %5372 = and i64 %5371, -1
  %5373 = or i64 %5368, %5372
  %5374 = xor i64 %5362, %5355
  %5375 = xor i64 %5374, %5359
  %5376 = xor i64 %5375, %5358
  %5377 = xor i64 %5376, %5373
  %5378 = xor i64 %5377, 2730674718009665479
  %5379 = xor i64 %5378, %5363
  %5380 = and i64 %146, -2498150155322088132
  %5381 = or i64 2498150155322088131, %146
  %5382 = sub i64 %5381, 2498150155322088131
  %5383 = or i64 %124, -8588861223486033780
  %5384 = xor i64 %124, -1
  %5385 = and i64 %5384, 2042258056345995585
  %5386 = and i64 %124, -2042258056345995586
  %5387 = or i64 %5385, %5386
  %5388 = xor i64 -7738957840373368371, %5387
  %5389 = xor i64 %124, -1
  %5390 = or i64 8588861223486033779, %5389
  %5391 = xor i64 %5390, -1
  %5392 = and i64 %5391, -1
  %5393 = or i64 %5388, %5392
  %5394 = xor i64 %5380, %5383
  %5395 = xor i64 %5394, %5393
  %5396 = xor i64 %5395, -4621149828393032868
  %5397 = xor i64 %5396, %5382
  %5398 = mul i64 %5379, %5397
  %5399 = trunc i64 %5398 to i8
  %5400 = sub i8 %5353, %5399
  %5401 = add i8 %5400, %5346
  %5402 = add i8 %5401, -124
  %5403 = srem i8 %5402, 2
  %5404 = icmp eq i8 %5403, 0
  %5405 = xor i1 %5352, true
  %5406 = or i1 %5405, %5404
  %5407 = xor i1 %5352, true
  %5408 = sub i1 %5406, %5407
  %5409 = or i64 %45, -8884498324136360647
  %5410 = xor i64 %45, -1
  %5411 = and i64 -8884498324136360647, %5410
  %5412 = add i64 %5411, %45
  %5413 = or i64 %144, -1295335010338837408
  %5414 = xor i64 %144, -1
  %5415 = and i64 -1295335010338837408, %5414
  %5416 = add i64 %5415, %144
  %5417 = xor i64 %5416, %5412
  %5418 = xor i64 %5417, -7706655530950417369
  %5419 = xor i64 %5418, %5413
  %5420 = xor i64 %5419, %5409
  %5421 = and i64 %17, 7746552336638593589
  %5422 = xor i64 %17, -1
  %5423 = xor i64 7746552336638593589, %5422
  %5424 = and i64 %5423, 7746552336638593589
  %5425 = add i64 %47, 6975668413105285559
  %5426 = and i64 6975668413105285559, %47
  %5427 = or i64 6975668413105285559, %47
  %5428 = add i64 %5426, %5427
  %5429 = xor i64 %5421, %5424
  %5430 = xor i64 %5429, -816376770708196192
  %5431 = xor i64 %5430, %5428
  %5432 = xor i64 %5431, %5425
  %5433 = mul i64 %5420, %5432
  %5434 = trunc i64 %5433 to i32
  %5435 = select i1 %5408, i32 984876152, i32 %5434
  %5436 = xor i32 %5435, 24
  store i32 %5436, i32* %4, align 4
  %5437 = call i8** @bf7763123487515004013(i32* %4)
  %5438 = load i8*, i8** %5437, align 8
  indirectbr i8* %5438, [label %loopEnd, label %codeRepl14]

codeRepl15:                                       ; preds = %codeRepl15, %loopStart
  store i64 4070807658626890142, i64* %109, align 8
  %5439 = call i8** @lk9254909843318351582(i64* %109)
  %5440 = load i8*, i8** %5439, align 8
  %5441 = bitcast i8* %5440 to void (float*, float*, i8*, [53 x i32]*, i32*, i32*)*
  call void %5441(float* %0, float* %1, i8* %2, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem173)
  %5442 = load i8*, i8** %102, align 8
  %5443 = load i8, i8* %5442, align 1
  %5444 = and i8 %5443, 1
  %5445 = icmp eq i8 %5444, 1
  %5446 = mul i8 %5443, %5443
  %5447 = add i8 %5446, %5443
  %5448 = srem i8 %5447, 2
  %5449 = icmp eq i8 %5448, 0
  %5450 = xor i1 %5449, true
  %5451 = and i1 %5445, %5450
  %5452 = add i1 %5451, %5449
  %5453 = select i1 %5452, i32 984876103, i32 984876128
  %5454 = xor i32 %5453, -1
  %5455 = and i32 %5454, 39
  %5456 = and i32 %5453, -40
  %5457 = or i32 %5455, %5456
  store i32 %5457, i32* %4, align 4
  %5458 = call i8** @bf7763123487515004013(i32* %4)
  %5459 = load i8*, i8** %5458, align 8
  indirectbr i8* %5459, [label %loopEnd, label %codeRepl15]

5460:                                             ; preds = %5460, %loopStart
  %.reload174 = load i32, i32* %.reg2mem173, align 4
  %5461 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 44
  %5462 = load i32, i32* %5461, align 4
  %5463 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %5464 = load i32, i32* %5463, align 4
  %5465 = sub i32 %5462, %5464
  store i32 %5465, i32* %dispatcher, align 4
  store i32 %.reload174, i32* %.reg2mem175, align 4
  %5466 = load i8*, i8** %26, align 8
  %5467 = load i8, i8* %5466, align 1
  %5468 = mul i8 %5467, 2
  %5469 = add i64 %31, -7846580471966946098
  %5470 = add i64 -8973339161933377820, %31
  %5471 = add i64 %5470, 1126758689966431722
  %5472 = and i64 %134, 7138688828948689387
  %5473 = xor i64 %134, -1
  %5474 = or i64 -7138688828948689388, %5473
  %5475 = xor i64 %5474, -1
  %5476 = and i64 %5475, -1
  %5477 = xor i64 %5469, %5476
  %5478 = xor i64 %5477, 5415743368779467589
  %5479 = xor i64 %5478, %5472
  %5480 = xor i64 %5479, %5471
  %5481 = add i64 %5, 2963018120806357042
  %5482 = sub i64 0, %5
  %5483 = sub i64 2963018120806357042, %5482
  %5484 = or i64 %39, 7812499467775654294
  %5485 = and i64 7812499467775654294, %39
  %5486 = xor i64 7812499467775654294, %39
  %5487 = or i64 %5485, %5486
  %5488 = xor i64 %5481, %5487
  %5489 = xor i64 %5488, %5483
  %5490 = xor i64 %5489, 7634240027089018650
  %5491 = xor i64 %5490, %5484
  %5492 = mul i64 %5480, %5491
  %5493 = trunc i64 %5492 to i8
  %5494 = mul i8 %5467, %5493
  %5495 = add i8 2, %5494
  %5496 = mul i8 %5468, %5495
  %5497 = srem i8 %5496, 4
  %5498 = icmp eq i8 %5497, 0
  %5499 = mul i8 %5467, %5467
  %5500 = add i8 %5499, %5467
  %5501 = add i64 %132, -6283400059094301327
  %5502 = add i64 9117964939042733424, %132
  %5503 = add i64 %5502, 3045379075572516865
  %5504 = add i64 %138, 6928670970747794787
  %5505 = add i64 -2643680555504081635, %138
  %5506 = sub i64 %5505, 8874392547457675194
  %5507 = xor i64 %5506, 1350426836484141213
  %5508 = xor i64 %5507, %5503
  %5509 = xor i64 %5508, %5501
  %5510 = xor i64 %5509, %5504
  %5511 = and i64 %13, 1854684374039609368
  %5512 = xor i64 %13, -1
  %5513 = or i64 -1854684374039609369, %5512
  %5514 = xor i64 %5513, -1
  %5515 = and i64 %5514, -1
  %5516 = add i64 %43, 4322327522474944989
  %5517 = xor i64 4322327522474944989, %43
  %5518 = and i64 4322327522474944989, %43
  %5519 = mul i64 2, %5518
  %5520 = add i64 %5517, %5519
  %5521 = and i64 %55, 4951126859976388481
  %5522 = or i64 -4951126859976388482, %55
  %5523 = sub i64 %5522, -4951126859976388482
  %5524 = xor i64 %5516, %5520
  %5525 = xor i64 %5524, %5523
  %5526 = xor i64 %5525, 6960144342604491626
  %5527 = xor i64 %5526, %5521
  %5528 = xor i64 %5527, %5511
  %5529 = xor i64 %5528, %5515
  %5530 = mul i64 %5510, %5529
  %5531 = trunc i64 %5530 to i8
  %5532 = srem i8 %5500, %5531
  %5533 = icmp eq i8 %5532, 0
  %5534 = and i1 %5498, %5533
  %5535 = or i64 %83, -5405296028985318076
  %5536 = and i64 -5405296028985318076, %83
  %5537 = xor i64 -5405296028985318076, %83
  %5538 = or i64 %5536, %5537
  %5539 = or i64 %110, -7565068317690328748
  %5540 = xor i64 %110, -1
  %5541 = and i64 %5540, 4254575440260060598
  %5542 = and i64 %110, -4254575440260060599
  %5543 = or i64 %5541, %5542
  %5544 = xor i64 -6050529335133283102, %5543
  %5545 = xor i64 %110, -1
  %5546 = or i64 7565068317690328747, %5545
  %5547 = xor i64 %5546, -1
  %5548 = and i64 %5547, -1
  %5549 = or i64 %5544, %5548
  %5550 = xor i64 %5549, %5538
  %5551 = xor i64 %5550, %5539
  %5552 = xor i64 %5551, 8459275243578596131
  %5553 = xor i64 %5552, %5535
  %5554 = add i64 %69, 1879988946840881631
  %5555 = add i64 5956225586285108907, %69
  %5556 = sub i64 %5555, 4076236639444227276
  %5557 = add i64 %91, 6309639711819154948
  %5558 = add i64 -6781156731336483660, %91
  %5559 = add i64 %5558, -5355947630553913008
  %5560 = or i64 %73, 3360674603179991687
  %5561 = and i64 3360674603179991687, %73
  %5562 = xor i64 3360674603179991687, %73
  %5563 = or i64 %5561, %5562
  %5564 = xor i64 %5560, -6929519358727638248
  %5565 = xor i64 %5564, %5563
  %5566 = xor i64 %5565, %5556
  %5567 = xor i64 %5566, %5559
  %5568 = xor i64 %5567, %5557
  %5569 = xor i64 %5568, %5554
  %5570 = mul i64 %5553, %5569
  %5571 = trunc i64 %5570 to i32
  %5572 = select i1 %5534, i32 %5571, i32 984876128
  %5573 = xor i32 %5572, 40
  store i32 %5573, i32* %4, align 4
  %5574 = call i8** @bf7763123487515004013(i32* %4)
  %5575 = load i8*, i8** %5574, align 8
  indirectbr i8* %5575, [label %loopEnd, label %5460]

5576:                                             ; preds = %5576, %loopStart
  %.reload176 = load i32, i32* %.reg2mem175, align 4
  store i32 %.reload176, i32* %.reg2mem141, align 4
  %.reload = load i32, i32* %.reg2mem, align 4
  %5577 = srem i32 %.reload, 2
  %5578 = icmp eq i32 %5577, 0
  %5579 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 26
  %5580 = load i32, i32* %5579, align 4
  %5581 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 25
  %5582 = load i32, i32* %5581, align 4
  %5583 = xor i32 %5580, %5582
  %5584 = and i32 %5580, %5582
  %5585 = mul i32 2, %5584
  %5586 = add i32 %5583, %5585
  %5587 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 27
  %5588 = load i32, i32* %5587, align 4
  %5589 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 25
  %5590 = load i32, i32* %5589, align 4
  %5591 = xor i32 %5588, %5590
  %5592 = and i32 %5588, %5590
  %5593 = add i64 %144, 2044186562879852123
  %5594 = sub i64 0, %144
  %5595 = add i64 -2044186562879852123, %5594
  %5596 = sub i64 0, %5595
  %5597 = and i64 %138, 2841969698171681965
  %5598 = xor i64 %138, -1
  %5599 = xor i64 2841969698171681965, %5598
  %5600 = and i64 %5599, 2841969698171681965
  %5601 = xor i64 7526954320138624315, %5600
  %5602 = xor i64 %5601, %5596
  %5603 = xor i64 %5602, %5597
  %5604 = xor i64 %5603, %5593
  %5605 = add i64 %45, 5261837781989544187
  %5606 = sub i64 0, %45
  %5607 = sub i64 5261837781989544187, %5606
  %5608 = and i64 %43, 2780785319336189157
  %5609 = xor i64 %43, -1
  %5610 = xor i64 2780785319336189157, %5609
  %5611 = and i64 %5610, 2780785319336189157
  %5612 = xor i64 %5605, -6632514407710791706
  %5613 = xor i64 %5612, %5608
  %5614 = xor i64 %5613, %5607
  %5615 = xor i64 %5614, %5611
  %5616 = mul i64 %5604, %5615
  %5617 = trunc i64 %5616 to i32
  %5618 = mul i32 %5617, %5592
  %5619 = add i32 %5591, %5618
  %5620 = select i1 %5578, i32 %5586, i32 %5619
  store i32 %5620, i32* %dispatcher, align 4
  %5621 = load i8*, i8** %78, align 8
  %5622 = load i8, i8* %5621, align 1
  %5623 = mul i8 %5622, 2
  %5624 = mul i8 %5622, 2
  %5625 = add i8 2, %5624
  %5626 = mul i8 %5623, %5625
  %5627 = srem i8 %5626, 4
  %5628 = icmp eq i8 %5627, 0
  %5629 = mul i8 %5622, %5622
  %5630 = add i8 %5629, %5622
  %5631 = srem i8 %5630, 2
  %5632 = icmp eq i8 %5631, 0
  %5633 = and i1 %5628, %5632
  %5634 = xor i1 %5628, %5632
  %5635 = or i1 %5633, %5634
  %5636 = select i1 %5635, i32 984876140, i32 984876128
  %5637 = or i32 %5636, 12
  %5638 = and i32 %5636, 12
  %5639 = sub i32 %5637, %5638
  store i32 %5639, i32* %4, align 4
  %5640 = call i8** @bf7763123487515004013(i32* %4)
  %5641 = load i8*, i8** %5640, align 8
  indirectbr i8* %5641, [label %loopEnd, label %5576]

5642:                                             ; preds = %5642, %loopStart
  %5643 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 50
  %5644 = load i32, i32* %5643, align 4
  %5645 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %5646 = load i32, i32* %5645, align 4
  %5647 = srem i32 %5644, %5646
  store i32 %5647, i32* %dispatcher, align 4
  %5648 = load i8*, i8** %6, align 8
  %5649 = load i8, i8* %5648, align 1
  %5650 = mul i8 %5649, %5649
  %5651 = add i8 %5650, %5649
  %5652 = or i64 %148, -815846366456156597
  %5653 = xor i64 %148, -1
  %5654 = and i64 %5653, 6126588533661219538
  %5655 = and i64 %148, -6126588533661219539
  %5656 = or i64 %5654, %5655
  %5657 = xor i64 -6797185543725788007, %5656
  %5658 = xor i64 %148, -1
  %5659 = or i64 815846366456156596, %5658
  %5660 = xor i64 %5659, -1
  %5661 = and i64 %5660, -1
  %5662 = or i64 %5657, %5661
  %5663 = or i64 %112, -5301315920430212466
  %5664 = and i64 -5301315920430212466, %112
  %5665 = xor i64 -5301315920430212466, %112
  %5666 = or i64 %5664, %5665
  %5667 = xor i64 -1546372165576981675, %5652
  %5668 = xor i64 %5667, %5663
  %5669 = xor i64 %5668, %5662
  %5670 = xor i64 %5669, %5666
  %5671 = or i64 %47, 6686462577656117385
  %5672 = xor i64 %47, -1
  %5673 = and i64 6686462577656117385, %5672
  %5674 = add i64 %5673, %47
  %5675 = add i64 %55, -7834401509212011532
  %5676 = add i64 -5935660005529354902, %55
  %5677 = add i64 %5676, -1898741503682656630
  %5678 = xor i64 %5675, 7757149471396668919
  %5679 = xor i64 %5678, %5671
  %5680 = xor i64 %5679, %5674
  %5681 = xor i64 %5680, %5677
  %5682 = mul i64 %5670, %5681
  %5683 = trunc i64 %5682 to i8
  %5684 = mul i8 %5651, %5683
  %5685 = srem i8 %5684, 2
  %5686 = icmp eq i8 %5685, 0
  %5687 = mul i8 %5649, %5649
  %5688 = add i8 %5687, %5649
  %5689 = srem i8 %5688, 2
  %5690 = icmp eq i8 %5689, 0
  %5691 = and i1 %5686, %5690
  %5692 = or i64 %51, -5039942923602920024
  %5693 = xor i64 %51, -1
  %5694 = and i64 %5693, -1011437267028907094
  %5695 = and i64 %51, 1011437267028907093
  %5696 = or i64 %5694, %5695
  %5697 = xor i64 5474162417002944002, %5696
  %5698 = xor i64 %51, -1
  %5699 = or i64 5039942923602920023, %5698
  %5700 = xor i64 %5699, -1
  %5701 = and i64 %5700, -1
  %5702 = or i64 %5697, %5701
  %5703 = and i64 %9, 1926776424322477409
  %5704 = xor i64 %9, -1
  %5705 = xor i64 1926776424322477409, %5704
  %5706 = and i64 %5705, 1926776424322477409
  %5707 = and i64 %75, -5841337835961679723
  %5708 = xor i64 %75, -1
  %5709 = xor i64 -5841337835961679723, %5708
  %5710 = and i64 %5709, -5841337835961679723
  %5711 = xor i64 %5706, %5707
  %5712 = xor i64 %5711, 2027048754312229917
  %5713 = xor i64 %5712, %5703
  %5714 = xor i64 %5713, %5710
  %5715 = xor i64 %5714, %5692
  %5716 = xor i64 %5715, %5702
  %5717 = or i64 %105, 194006759246837646
  %5718 = xor i64 %105, -1
  %5719 = and i64 194006759246837646, %5718
  %5720 = add i64 %5719, %105
  %5721 = add i64 %21, -6545892910258311039
  %5722 = and i64 -6545892910258311039, %21
  %5723 = or i64 -6545892910258311039, %21
  %5724 = add i64 %5722, %5723
  %5725 = xor i64 2539393826450558627, %5720
  %5726 = xor i64 %5725, %5724
  %5727 = xor i64 %5726, %5717
  %5728 = xor i64 %5727, %5721
  %5729 = mul i64 %5716, %5728
  %5730 = trunc i64 %5729 to i32
  %5731 = select i1 %5691, i32 %5730, i32 984876128
  %5732 = xor i32 %5731, 23
  store i32 %5732, i32* %4, align 4
  %5733 = call i8** @bf7763123487515004013(i32* %4)
  %5734 = load i8*, i8** %5733, align 8
  indirectbr i8* %5734, [label %loopEnd, label %5642]

codeRepl16:                                       ; preds = %codeRepl16, %loopStart
  store i64 4070807658626890116, i64* %109, align 8
  %5735 = call i8** @lk9254909843318351582(i64* %109)
  %5736 = load i8*, i8** %5735, align 8
  %5737 = bitcast i8* %5736 to void ([53 x i32]*, i32*)*
  call void %5737([53 x i32]* %lookupTable, i32* %dispatcher)
  %5738 = load i8*, i8** %42, align 8
  %5739 = load i8, i8* %5738, align 1
  %5740 = mul i8 %5739, 2
  %5741 = and i64 %118, -2476615152614258997
  %5742 = xor i64 %118, -1
  %5743 = xor i64 -2476615152614258997, %5742
  %5744 = and i64 %5743, -2476615152614258997
  %5745 = add i64 %126, -4311085337530495343
  %5746 = add i64 -3018647240508275058, %126
  %5747 = add i64 %5746, -1292438097022220285
  %5748 = xor i64 %5745, %5747
  %5749 = xor i64 %5748, %5741
  %5750 = xor i64 %5749, %5744
  %5751 = xor i64 %5750, -2152693702705811085
  %5752 = sext i32 %dispatcher1 to i64
  %5753 = add i64 %5752, -1760359450063541184
  %5754 = add i64 -5127932262990121616, %5752
  %5755 = sub i64 %5754, -3367572812926580432
  %5756 = or i64 %144, -3509505519728310665
  %5757 = xor i64 %144, -1
  %5758 = and i64 %5757, -4571856603417233162
  %5759 = and i64 %144, 4571856603417233161
  %5760 = or i64 %5758, %5759
  %5761 = xor i64 1136661886827822721, %5760
  %5762 = xor i64 %144, -1
  %5763 = or i64 3509505519728310664, %5762
  %5764 = xor i64 %5763, -1
  %5765 = and i64 %5764, -1
  %5766 = or i64 %5761, %5765
  %5767 = xor i64 %5755, %5766
  %5768 = xor i64 %5767, 2049876618288904054
  %5769 = xor i64 %5768, %5756
  %5770 = xor i64 %5769, %5753
  %5771 = mul i64 %5751, %5770
  %5772 = trunc i64 %5771 to i8
  %5773 = mul i8 %5739, %5772
  %5774 = add i8 8, %5773
  %5775 = or i64 %97, 4062146212583560422
  %5776 = xor i64 %97, -1
  %5777 = and i64 %5776, -3798904757931380729
  %5778 = and i64 %97, 3798904757931380728
  %5779 = or i64 %5777, %5778
  %5780 = xor i64 -929940317564001055, %5779
  %5781 = xor i64 %97, -1
  %5782 = or i64 -4062146212583560423, %5781
  %5783 = xor i64 %5782, -1
  %5784 = and i64 %5783, -1
  %5785 = or i64 %5780, %5784
  %5786 = add i64 %47, 6428015587929246971
  %5787 = add i64 343932067564231128, %47
  %5788 = sub i64 %5787, -6084083520365015843
  %5789 = xor i64 %5775, %5785
  %5790 = xor i64 %5789, %5788
  %5791 = xor i64 %5790, -640229915747114227
  %5792 = xor i64 %5791, %5786
  %5793 = add i64 %128, 4631751565798341822
  %5794 = and i64 4631751565798341822, %128
  %5795 = or i64 4631751565798341822, %128
  %5796 = add i64 %5794, %5795
  %5797 = add i64 %134, -8766113613507462831
  %5798 = sub i64 0, %134
  %5799 = add i64 8766113613507462831, %5798
  %5800 = sub i64 0, %5799
  %5801 = xor i64 %5793, 7040976015985372770
  %5802 = xor i64 %5801, %5800
  %5803 = xor i64 %5802, %5797
  %5804 = xor i64 %5803, %5796
  %5805 = mul i64 %5792, %5804
  %5806 = trunc i64 %5805 to i8
  %5807 = add i8 %5774, %5806
  %5808 = mul i8 %5740, %5807
  %5809 = srem i8 %5808, 4
  %5810 = icmp eq i8 %5809, 0
  %5811 = mul i8 %5739, %5739
  %5812 = add i8 %5811, %5739
  %5813 = srem i8 %5812, 2
  %5814 = icmp eq i8 %5813, 0
  %5815 = and i1 %5810, %5814
  %5816 = select i1 %5815, i32 984876105, i32 984876128
  %5817 = or i32 %5816, 41
  %5818 = sext i32 %dispatcher1 to i64
  %5819 = and i64 %5818, 1299732344884635460
  %5820 = or i64 -1299732344884635461, %5818
  %5821 = sub i64 %5820, -1299732344884635461
  %5822 = add i64 %107, -1982291905146773068
  %5823 = add i64 -3037899332096133440, %107
  %5824 = add i64 %5823, 1055607426949360372
  %5825 = and i64 %35, -2000025281792841955
  %5826 = xor i64 %35, -1
  %5827 = xor i64 -2000025281792841955, %5826
  %5828 = and i64 %5827, -2000025281792841955
  %5829 = xor i64 %5824, %5828
  %5830 = xor i64 %5829, %5821
  %5831 = xor i64 %5830, 8621440192123457369
  %5832 = xor i64 %5831, %5822
  %5833 = xor i64 %5832, %5825
  %5834 = xor i64 %5833, %5819
  %5835 = add i64 %112, -5629559249923387393
  %5836 = add i64 6643077094471781667, %112
  %5837 = sub i64 %5836, -6174107729314382556
  %5838 = or i64 %71, -7927188114033958133
  %5839 = xor i64 %71, -1
  %5840 = and i64 -7927188114033958133, %5839
  %5841 = add i64 %5840, %71
  %5842 = xor i64 %5838, %5835
  %5843 = xor i64 %5842, 6926186331305110865
  %5844 = xor i64 %5843, %5841
  %5845 = xor i64 %5844, %5837
  %5846 = mul i64 %5834, %5845
  %5847 = trunc i64 %5846 to i32
  %5848 = and i32 %5816, %5847
  %5849 = sub i32 %5817, %5848
  store i32 %5849, i32* %4, align 4
  %5850 = call i8** @bf7763123487515004013(i32* %4)
  %5851 = load i8*, i8** %5850, align 8
  indirectbr i8* %5851, [label %loopEnd, label %codeRepl16]

5852:                                             ; preds = %loopStart
  %.reload142 = load i32, i32* %.reg2mem141, align 4
  ret i32 %.reload142

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %5853 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %5853, align 4
  %5854 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %5854, align 4
  %5855 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %5855, align 4
  %5856 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %5856, align 4
  %5857 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %5857, align 4
  %5858 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %5858, align 4
  %5859 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %5859, align 4
  %5860 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %5860, align 4
  %5861 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %5861, align 4
  %5862 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %5862, align 4
  %5863 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %5863, align 4
  %5864 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 22
  %5865 = and i64 %17, 1340610261615400853
  %5866 = xor i64 %17, -1
  %5867 = or i64 -1340610261615400854, %5866
  %5868 = xor i64 %5867, -1
  %5869 = and i64 %5868, -1
  %5870 = add i64 %150, -8684469714324247023
  %5871 = add i64 -91293851435323039, %150
  %5872 = add i64 %5871, -8593175862888923984
  %5873 = add i64 %148, 5786382854800625953
  %5874 = xor i64 5786382854800625953, %148
  %5875 = and i64 5786382854800625953, %148
  %5876 = mul i64 2, %5875
  %5877 = add i64 %5874, %5876
  %5878 = xor i64 %5865, %5870
  %5879 = xor i64 %5878, 315357633811218521
  %5880 = xor i64 %5879, %5869
  %5881 = xor i64 %5880, %5873
  %5882 = xor i64 %5881, %5877
  %5883 = xor i64 %5882, %5872
  %5884 = or i64 %75, 8441218727569832491
  %5885 = xor i64 %75, -1
  %5886 = and i64 %5885, -221175336893218164
  %5887 = and i64 %75, 221175336893218163
  %5888 = or i64 %5886, %5887
  %5889 = xor i64 -8517712593538008921, %5888
  %5890 = xor i64 %75, -1
  %5891 = or i64 -8441218727569832492, %5890
  %5892 = xor i64 %5891, -1
  %5893 = and i64 %5892, -1
  %5894 = or i64 %5889, %5893
  %5895 = or i64 %27, 1365078650797874193
  %5896 = xor i64 %27, -1
  %5897 = and i64 1365078650797874193, %5896
  %5898 = add i64 %5897, %27
  %5899 = xor i64 %5894, %5895
  %5900 = xor i64 %5899, %5884
  %5901 = xor i64 %5900, %5898
  %5902 = xor i64 %5901, -3946255722313914851
  %5903 = mul i64 %5883, %5902
  %5904 = trunc i64 %5903 to i32
  store i32 %5904, i32* %5864, align 4
  %5905 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 24
  store i32 23, i32* %5905, align 4
  %5906 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 26
  store i32 25, i32* %5906, align 4
  %5907 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 28
  store i32 27, i32* %5907, align 4
  %5908 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %5908, align 4
  %5909 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 32
  store i32 31, i32* %5909, align 4
  %5910 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 34
  store i32 33, i32* %5910, align 4
  %5911 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 36
  %5912 = add i64 %7, 4201300217806470468
  %5913 = sub i64 0, %7
  %5914 = add i64 -4201300217806470468, %5913
  %5915 = sub i64 0, %5914
  %5916 = or i64 %51, 5211641808396813213
  %5917 = xor i64 %51, -1
  %5918 = and i64 5211641808396813213, %5917
  %5919 = add i64 %5918, %51
  %5920 = add i64 %118, -7292161768866629609
  %5921 = sub i64 0, %118
  %5922 = add i64 7292161768866629609, %5921
  %5923 = sub i64 0, %5922
  %5924 = xor i64 %5919, %5920
  %5925 = xor i64 %5924, 9095188525964528121
  %5926 = xor i64 %5925, %5923
  %5927 = xor i64 %5926, %5912
  %5928 = xor i64 %5927, %5916
  %5929 = xor i64 %5928, %5915
  %5930 = add i64 %35, 4359697531438613943
  %5931 = add i64 4957266579350698315, %35
  %5932 = sub i64 %5931, 597569047912084372
  %5933 = add i64 %43, 6095677268004932826
  %5934 = sub i64 0, %43
  %5935 = add i64 -6095677268004932826, %5934
  %5936 = sub i64 0, %5935
  %5937 = add i64 %9, -2180280160500636659
  %5938 = add i64 1336785298737814346, %9
  %5939 = add i64 %5938, -3517065459238451005
  %5940 = xor i64 %5933, -5348467308371820037
  %5941 = xor i64 %5940, %5939
  %5942 = xor i64 %5941, %5930
  %5943 = xor i64 %5942, %5932
  %5944 = xor i64 %5943, %5936
  %5945 = xor i64 %5944, %5937
  %5946 = mul i64 %5929, %5945
  %5947 = trunc i64 %5946 to i32
  store i32 %5947, i32* %5911, align 4
  %5948 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 38
  store i32 37, i32* %5948, align 4
  %5949 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 40
  store i32 39, i32* %5949, align 4
  %5950 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 42
  %5951 = or i64 %132, -1413843818277417897
  %5952 = xor i64 %132, -1
  %5953 = and i64 -1413843818277417897, %5952
  %5954 = add i64 %5953, %132
  %5955 = and i64 %99, -5234874398029170650
  %5956 = xor i64 %99, -1
  %5957 = or i64 5234874398029170649, %5956
  %5958 = xor i64 %5957, -1
  %5959 = and i64 %5958, -1
  %5960 = and i64 %47, 2146156875463710955
  %5961 = or i64 -2146156875463710956, %47
  %5962 = sub i64 %5961, -2146156875463710956
  %5963 = xor i64 %5959, %5960
  %5964 = xor i64 %5963, %5962
  %5965 = xor i64 %5964, %5951
  %5966 = xor i64 %5965, %5954
  %5967 = xor i64 %5966, %5955
  %5968 = xor i64 %5967, 6032148679791475127
  %5969 = add i64 %25, 8467741420910483917
  %5970 = sub i64 0, %25
  %5971 = sub i64 8467741420910483917, %5970
  %5972 = and i64 %67, -7556634454324140202
  %5973 = xor i64 %67, -1
  %5974 = xor i64 -7556634454324140202, %5973
  %5975 = and i64 %5974, -7556634454324140202
  %5976 = xor i64 %5971, -2223233731658689249
  %5977 = xor i64 %5976, %5972
  %5978 = xor i64 %5977, %5975
  %5979 = xor i64 %5978, %5969
  %5980 = mul i64 %5968, %5979
  %5981 = trunc i64 %5980 to i32
  store i32 %5981, i32* %5950, align 4
  %5982 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 44
  store i32 43, i32* %5982, align 4
  %5983 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 46
  store i32 45, i32* %5983, align 4
  %5984 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 48
  store i32 47, i32* %5984, align 4
  %5985 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 50
  store i32 49, i32* %5985, align 4
  %5986 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  store i32 51, i32* %5986, align 4
  %5987 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %5988 = load i32, i32* %5987, align 4
  store i32 %5988, i32* %dispatcher, align 4
  %5989 = load i8*, i8** %90, align 8
  %5990 = load i8, i8* %5989, align 1
  %5991 = and i64 %120, 1255135777628882243
  %5992 = or i64 -1255135777628882244, %120
  %5993 = sub i64 %5992, -1255135777628882244
  %5994 = and i64 %73, -6527005969734482730
  %5995 = xor i64 %73, -1
  %5996 = or i64 6527005969734482729, %5995
  %5997 = xor i64 %5996, -1
  %5998 = and i64 %5997, -1
  %5999 = or i64 %29, -4548393235786176136
  %6000 = and i64 -4548393235786176136, %29
  %6001 = xor i64 -4548393235786176136, %29
  %6002 = or i64 %6000, %6001
  %6003 = xor i64 %6002, 4708071500649961709
  %6004 = xor i64 %6003, %5999
  %6005 = xor i64 %6004, %5993
  %6006 = xor i64 %6005, %5998
  %6007 = xor i64 %6006, %5994
  %6008 = xor i64 %6007, %5991
  %6009 = and i64 %148, -1794311527495919031
  %6010 = xor i64 %148, -1
  %6011 = or i64 1794311527495919030, %6010
  %6012 = xor i64 %6011, -1
  %6013 = and i64 %6012, -1
  %6014 = and i64 %81, -4920901154462010449
  %6015 = xor i64 %81, -1
  %6016 = or i64 4920901154462010448, %6015
  %6017 = xor i64 %6016, -1
  %6018 = and i64 %6017, -1
  %6019 = xor i64 %6018, %6009
  %6020 = xor i64 %6019, %6014
  %6021 = xor i64 %6020, %6013
  %6022 = xor i64 %6021, -5235497218223864603
  %6023 = mul i64 %6008, %6022
  %6024 = trunc i64 %6023 to i8
  %6025 = and i8 %5990, %6024
  %6026 = icmp eq i8 %6025, 1
  %6027 = mul i8 %5990, %5990
  %6028 = add i8 %6027, %5990
  %6029 = srem i8 %6028, 2
  %6030 = icmp eq i8 %6029, 0
  %6031 = or i1 %6026, %6030
  %6032 = select i1 %6031, i32 984876099, i32 984876103
  %6033 = xor i32 %6032, 4
  store i32 %6033, i32* %4, align 4
  %6034 = call i8** @bf7763123487515004013(i32* %4)
  %6035 = load i8*, i8** %6034, align 8
  indirectbr i8* %6035, [label %codeRepl, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %6036 = load i8*, i8** %94, align 8
  %6037 = load i8, i8* %6036, align 1
  %6038 = mul i8 %6037, 2
  %6039 = mul i8 %6037, 2
  %6040 = add i8 2, %6039
  %6041 = mul i8 %6038, %6040
  %6042 = srem i8 %6041, 4
  %6043 = icmp eq i8 %6042, 0
  %6044 = mul i8 %6037, %6037
  %6045 = and i8 %6044, %6037
  %6046 = or i8 %6044, %6037
  %6047 = add i8 %6045, %6046
  %6048 = srem i8 %6047, 2
  %6049 = icmp eq i8 %6048, 0
  %6050 = or i1 %6043, %6049
  %6051 = select i1 %6050, i32 984876156, i32 984876128
  %6052 = xor i32 %6051, 28
  store i32 %6052, i32* %4, align 4
  %6053 = call i8** @bf7763123487515004013(i32* %4)
  %6054 = load i8*, i8** %6053, align 8
  indirectbr i8* %6054, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl16, %5642, %5576, %5460, %codeRepl15, %codeRepl14, %5122, %5048, %codeRepl13, %4964, %codeRepl12, %.loopexit, %4748, %codeRepl11, %4702, %codeRepl10, %4516, %codeRepl9, %4290, %3853, %codeRepl8, %3493, %3422, %3315, %3135, %2810, %2509, %codeRepl7, %2245, %2188, %codeRepl6, %codeRepl5, %codeRepl4, %1828, %1338, %1221, %codeRepl3, %codeRepl2, %1075, %1042, %985, %codeRepl1, %822, %622, %.preheader, %416, %codeRepl
  %6055 = load i8*, i8** %80, align 8
  %6056 = load i8, i8* %6055, align 1
  %6057 = and i8 %6056, 1
  %6058 = or i64 %122, 4889562466717634907
  %6059 = and i64 4889562466717634907, %122
  %6060 = xor i64 4889562466717634907, %122
  %6061 = or i64 %6059, %6060
  %6062 = and i64 %87, 5552933335642030552
  %6063 = or i64 -5552933335642030553, %87
  %6064 = sub i64 %6063, -5552933335642030553
  %6065 = and i64 %116, -1145075929102815595
  %6066 = or i64 1145075929102815594, %116
  %6067 = sub i64 %6066, 1145075929102815594
  %6068 = xor i64 -1186268366615453199, %6061
  %6069 = xor i64 %6068, %6065
  %6070 = xor i64 %6069, %6058
  %6071 = xor i64 %6070, %6062
  %6072 = xor i64 %6071, %6064
  %6073 = xor i64 %6072, %6067
  %6074 = add i64 %73, 2723770945539531733
  %6075 = sub i64 0, %73
  %6076 = add i64 -2723770945539531733, %6075
  %6077 = sub i64 0, %6076
  %6078 = and i64 %67, 23764435553012602
  %6079 = xor i64 %67, -1
  %6080 = or i64 -23764435553012603, %6079
  %6081 = xor i64 %6080, -1
  %6082 = and i64 %6081, -1
  %6083 = xor i64 %6082, %6074
  %6084 = xor i64 %6083, 0
  %6085 = xor i64 %6084, %6077
  %6086 = xor i64 %6085, %6078
  %6087 = mul i64 %6073, %6086
  %6088 = trunc i64 %6087 to i8
  %6089 = icmp eq i8 %6057, %6088
  %6090 = mul i8 %6056, %6056
  %6091 = add i8 %6090, %6056
  %6092 = mul i8 %6091, 3
  %6093 = srem i8 %6092, 2
  %6094 = icmp eq i8 %6093, 0
  %6095 = and i1 %6089, %6094
  %6096 = xor i1 %6089, %6094
  %6097 = or i1 %6095, %6096
  %6098 = and i64 %13, -543409920302971574
  %6099 = or i64 543409920302971573, %13
  %6100 = sub i64 %6099, 543409920302971573
  %6101 = or i64 %67, -6831861520007745253
  %6102 = xor i64 %67, -1
  %6103 = and i64 -6831861520007745253, %6102
  %6104 = add i64 %6103, %67
  %6105 = xor i64 %6100, %6098
  %6106 = xor i64 %6105, %6104
  %6107 = xor i64 %6106, %6101
  %6108 = xor i64 %6107, -5020221840361092201
  %6109 = or i64 %53, -6558710990461026931
  %6110 = and i64 -6558710990461026931, %53
  %6111 = xor i64 -6558710990461026931, %53
  %6112 = or i64 %6110, %6111
  %6113 = and i64 %91, -1715018620150976287
  %6114 = or i64 1715018620150976286, %91
  %6115 = sub i64 %6114, 1715018620150976286
  %6116 = add i64 %114, -9051598811401426575
  %6117 = add i64 -1139432637616329001, %114
  %6118 = add i64 %6117, -7912166173785097574
  %6119 = xor i64 %6118, %6116
  %6120 = xor i64 %6119, %6109
  %6121 = xor i64 %6120, %6115
  %6122 = xor i64 %6121, %6113
  %6123 = xor i64 %6122, %6112
  %6124 = xor i64 %6123, 2962244222475655060
  %6125 = mul i64 %6108, %6124
  %6126 = trunc i64 %6125 to i32
  %6127 = select i1 %6097, i32 984876097, i32 %6126
  %6128 = xor i32 %6127, 13
  store i32 %6128, i32* %4, align 4
  %6129 = call i8** @bf7763123487515004013(i32* %4)
  %6130 = load i8*, i8** %6129, align 8
  indirectbr i8* %6130, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @wait() unnamed_addr #5 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %4 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14936983426752459058, i32 0, i64 %3
  store i8* bitcast (i32 (i32)* @"\01_usleep" to i8*), i8** %4, align 8
  store i64 4070807658626890127, i64* %2, align 8
  %5 = call i8** @lk2528754644522447028(i64* %2)
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8* %6 to i32 (i32)*
  %8 = call i32 %7(i32 30000)
  ret void
}

; Function Attrs: nofree noinline nosync nounwind ssp uwtable
define internal fastcc i32 @inner_loop(float %0, float* readonly %1, float* readonly %2, i8* %3, float* %4) unnamed_addr #6 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h6542867261474098886(i64 984876141)
  %7 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %6
  store i8* blockaddress(@inner_loop, %loopEnd), i8** %7, align 8
  %8 = call i64 @h6542867261474098886(i64 984876135)
  %9 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %8
  store i8* blockaddress(@inner_loop, %defaultSwitchBasicBlock), i8** %9, align 8
  %10 = call i64 @h6542867261474098886(i64 984876134)
  %11 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %10
  store i8* blockaddress(@inner_loop, %1517), i8** %11, align 8
  %12 = call i64 @h6542867261474098886(i64 984876143)
  %13 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %12
  store i8* blockaddress(@inner_loop, %1446), i8** %13, align 8
  %14 = call i64 @h6542867261474098886(i64 984876140)
  %15 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %14
  store i8* blockaddress(@inner_loop, %1749), i8** %15, align 8
  %16 = call i64 @h6542867261474098886(i64 984876129)
  %17 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %16
  store i8* blockaddress(@inner_loop, %EntryBasicBlockSplit), i8** %17, align 8
  %18 = call i64 @h6542867261474098886(i64 984876152)
  %19 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %18
  store i8* blockaddress(@inner_loop, %1416), i8** %19, align 8
  %20 = call i64 @h6542867261474098886(i64 984876128)
  %21 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %20
  store i8* blockaddress(@inner_loop, %codeRepl3), i8** %21, align 8
  %22 = call i64 @h6542867261474098886(i64 984876142)
  %23 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %22
  store i8* blockaddress(@inner_loop, %1115), i8** %23, align 8
  %24 = call i64 @h6542867261474098886(i64 984876133)
  %25 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %24
  store i8* blockaddress(@inner_loop, %815), i8** %25, align 8
  %26 = call i64 @h6542867261474098886(i64 984876137)
  %27 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %26
  store i8* blockaddress(@inner_loop, %codeRepl2), i8** %27, align 8
  %28 = call i64 @h6542867261474098886(i64 984876138)
  %29 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %28
  store i8* blockaddress(@inner_loop, %codeRepl1), i8** %29, align 8
  %30 = call i64 @h6542867261474098886(i64 984876139)
  %31 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %30
  store i8* blockaddress(@inner_loop, %.loopexit), i8** %31, align 8
  %32 = call i64 @h6542867261474098886(i64 984876130)
  %33 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %32
  store i8* blockaddress(@inner_loop, %946), i8** %33, align 8
  %34 = call i64 @h6542867261474098886(i64 984876154)
  %35 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %34
  store i8* blockaddress(@inner_loop, %189), i8** %35, align 8
  %36 = call i64 @h6542867261474098886(i64 984876132)
  %37 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %36
  store i8* blockaddress(@inner_loop, %562), i8** %37, align 8
  %38 = call i64 @h6542867261474098886(i64 984876136)
  %39 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %38
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %39, align 8
  %40 = call i64 @h6542867261474098886(i64 984876155)
  %41 = getelementptr [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %40
  store i8* blockaddress(@inner_loop, %loopStart), i8** %41, align 8
  %42 = alloca i64, align 8
  %43 = call i64 @m4181846979565521366(i64 4070807658626890125)
  %44 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable18293723675824487353, i32 0, i64 %43
  store i8* bitcast (void (float, float*, float*, float*, [19 x i32]*, i32*, double*)* @inner_loop.extracted to i8*), i8** %44, align 8
  %45 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %46 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable18293723675824487353, i32 0, i64 %45
  store i8* bitcast (void ([19 x i32]*, i32*)* @inner_loop.extracted.45 to i8*), i8** %46, align 8
  %47 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %48 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable18293723675824487353, i32 0, i64 %47
  store i8* bitcast (void ([19 x i32]*, i32*)* @inner_loop.extracted.46 to i8*), i8** %48, align 8
  %49 = call i64 @m4181846979565521366(i64 4070807658626890124)
  %50 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable18293723675824487353, i32 0, i64 %49
  store i8* bitcast (void ([19 x i32]*, i32*)* @inner_loop.BogusBasicBlock to i8*), i8** %50, align 8
  %.reg2mem51 = alloca i32, align 4
  %.reg2mem49 = alloca double, align 8
  %.reg2mem46 = alloca i1, align 1
  %.reg2mem44 = alloca i1, align 1
  %.reg2mem41 = alloca float*, align 8
  %.reg2mem38 = alloca i64, align 8
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem30 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem18 = alloca float, align 4
  %.reg2mem14 = alloca double, align 8
  %.reg2mem11 = alloca float, align 4
  %.reg2mem8 = alloca float, align 4
  %.reg2mem4 = alloca float, align 4
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i1, align 1
  %lookupTable = alloca [19 x i32], align 4
  %51 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %51, align 4
  %52 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %52, align 4
  %53 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %53, align 4
  %54 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %54, align 4
  %55 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %55, align 4
  %56 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %56, align 4
  %57 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %57, align 4
  %58 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %58, align 4
  %59 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %59, align 4
  %60 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %60, align 4
  %61 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %61, align 4
  %62 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %62, align 4
  %63 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %63, align 4
  %64 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %64, align 4
  %65 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %65, align 4
  %66 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %66, align 4
  %67 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %67, align 4
  %68 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %68, align 4
  %69 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %69, align 4
  %70 = icmp eq float* %1, null
  %71 = icmp eq float* %2, null
  %72 = select i1 %70, i1 true, i1 %71
  %73 = icmp eq i8* %3, null
  %74 = select i1 %72, i1 true, i1 %73
  store i1 %74, i1* %.reg2mem, align 1
  %75 = icmp eq float* %4, null
  store i1 %75, i1* %.reg2mem2, align 1
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 984876155, i32* %5, align 4
  %76 = call i8** @bf17181708843024921859(i32* %5)
  %77 = load i8*, i8** %76, align 8
  indirectbr i8* %77, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %codeRepl
    i32 2, label %189
    i32 3, label %562
    i32 4, label %codeRepl1
    i32 5, label %815
    i32 6, label %946
    i32 7, label %1115
    i32 8, label %codeRepl2
    i32 9, label %1416
    i32 10, label %1446
    i32 11, label %1517
    i32 12, label %.loopexit
    i32 13, label %1749
    i32 14, label %codeRepl3
  ]

EntryBasicBlockSplit:                             ; preds = %codeRepl3, %EntryBasicBlockSplit, %loopStart
  %.reload = load i1, i1* %.reg2mem, align 1
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %78 = select i1 %.reload, i1 true, i1 %.reload3
  %79 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 16
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %82 = load i32, i32* %81, align 4
  %83 = srem i32 %80, %82
  %84 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 4
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = add i32 %85, %87
  %89 = select i1 %78, i32 %83, i32 %88
  store i32 %89, i32* %dispatcher, align 4
  store i32 2, i32* %.reg2mem51, align 4
  %90 = load i8*, i8** %39, align 8
  %91 = load i8, i8* %90, align 1
  %92 = mul i8 %91, 2
  %93 = mul i8 %91, 2
  %94 = add i8 2, %93
  %95 = mul i8 %92, %94
  %96 = srem i8 %95, 4
  %97 = icmp eq i8 %96, 0
  %98 = mul i8 %91, %91
  %99 = add i8 %98, %91
  %100 = srem i8 %99, 2
  %101 = icmp eq i8 %100, 0
  %102 = and i1 %97, %101
  %103 = and i64 %43, 9137923744191854729
  %104 = xor i64 %43, -1
  %105 = xor i64 9137923744191854729, %104
  %106 = and i64 %105, 9137923744191854729
  %107 = and i64 %36, -7821919212015928116
  %108 = xor i64 %36, -1
  %109 = or i64 7821919212015928115, %108
  %110 = xor i64 %109, -1
  %111 = and i64 %110, -1
  %112 = add i64 %34, 2386438800332637176
  %113 = xor i64 2386438800332637176, %34
  %114 = and i64 2386438800332637176, %34
  %115 = mul i64 2, %114
  %116 = add i64 %113, %115
  %117 = xor i64 %112, %107
  %118 = xor i64 %117, %111
  %119 = xor i64 %118, %103
  %120 = xor i64 %119, %116
  %121 = xor i64 %120, -8261637777180589675
  %122 = xor i64 %121, %106
  %123 = or i64 %38, 3648553586690030668
  %124 = xor i64 %38, -1
  %125 = and i64 3648553586690030668, %124
  %126 = add i64 %125, %38
  %127 = add i64 %16, 8628887854412819494
  %128 = xor i64 8628887854412819494, %16
  %129 = and i64 8628887854412819494, %16
  %130 = mul i64 2, %129
  %131 = add i64 %128, %130
  %132 = xor i64 %127, %123
  %133 = xor i64 %132, %126
  %134 = xor i64 %133, -3456688566667204408
  %135 = xor i64 %134, %131
  %136 = mul i64 %122, %135
  %137 = trunc i64 %136 to i32
  %138 = select i1 %102, i32 %137, i32 984876141
  %139 = xor i32 %138, 1709527784
  %140 = xor i32 %139, 1709527789
  store i32 %140, i32* %5, align 4
  %141 = call i8** @bf17181708843024921859(i32* %5)
  %142 = load i8*, i8** %141, align 8
  indirectbr i8* %142, [label %loopEnd, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 4070807658626890125, i64* %42, align 8
  %143 = call i8** @lk12478154414877683305(i64* %42)
  %144 = load i8*, i8** %143, align 8
  %145 = bitcast i8* %144 to void (float, float*, float*, float*, [19 x i32]*, i32*, double*)*
  call void %145(float %0, float* %.reg2mem4, float* %.reg2mem8, float* %.reg2mem11, [19 x i32]* %lookupTable, i32* %dispatcher, double* %.reg2mem49)
  %146 = load i8*, i8** %7, align 8
  %147 = load i8, i8* %146, align 1
  %148 = mul i8 %147, 2
  %149 = mul i8 %147, 2
  %150 = add i8 2, %149
  %151 = mul i8 %148, %150
  %152 = srem i8 %151, 4
  %153 = icmp eq i8 %152, 0
  %154 = mul i8 %147, %147
  %155 = add i8 %154, %147
  %156 = srem i8 %155, 2
  %157 = icmp eq i8 %156, 0
  %158 = and i1 %153, %157
  %159 = select i1 %158, i32 984876130, i32 984876141
  %160 = and i64 %24, -4635501479976879147
  %161 = xor i64 %24, -1
  %162 = or i64 4635501479976879146, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = add i64 %28, 2714524001113429103
  %166 = add i64 -2695374613967802520, %28
  %167 = sub i64 %166, -5409898615081231623
  %168 = xor i64 7399693593848238709, %164
  %169 = xor i64 %168, %167
  %170 = xor i64 %169, %160
  %171 = xor i64 %170, %165
  %172 = or i64 %6, 4720180023445274009
  %173 = and i64 4720180023445274009, %6
  %174 = xor i64 4720180023445274009, %6
  %175 = or i64 %173, %174
  %176 = add i64 %49, 4737105102052678734
  %177 = sub i64 0, %49
  %178 = add i64 -4737105102052678734, %177
  %179 = sub i64 0, %178
  %180 = xor i64 %176, %172
  %181 = xor i64 %180, -6324784593672605709
  %182 = xor i64 %181, %175
  %183 = xor i64 %182, %179
  %184 = mul i64 %171, %183
  %185 = trunc i64 %184 to i32
  %186 = xor i32 %159, %185
  store i32 %186, i32* %5, align 4
  %187 = call i8** @bf17181708843024921859(i32* %5)
  %188 = load i8*, i8** %187, align 8
  indirectbr i8* %188, [label %loopEnd, label %codeRepl]

189:                                              ; preds = %189, %loopStart
  %.reload50 = load double, double* %.reg2mem49, align 8
  store double %.reload50, double* %.reg2mem14, align 8
  %.reload17 = load double, double* %.reg2mem14, align 8
  %190 = call double @llvm.sin.f64(double %.reload17)
  %191 = fptrunc double %190 to float
  %192 = load float, float* %1, align 4, !tbaa !10
  %193 = fpext float %192 to double
  %194 = call double @llvm.sin.f64(double %193)
  %195 = fptrunc double %194 to float
  %196 = call double @llvm.cos.f64(double %193)
  %197 = fptrunc double %196 to float
  %.reload13 = load float, float* %.reg2mem11, align 4
  %198 = fmul float %.reload13, %191
  %199 = fmul float %198, %195
  %.reload10 = load float, float* %.reg2mem8, align 4
  %200 = fmul float %.reload10, %197
  %201 = fadd float %199, %200
  %202 = fadd float %201, 5.000000e+00
  %203 = fdiv float 1.000000e+00, %202
  store float %203, float* %.reg2mem18, align 4
  %.reload16 = load double, double* %.reg2mem14, align 8
  %204 = call double @llvm.cos.f64(double %.reload16)
  %205 = fptrunc double %204 to float
  %206 = load float, float* %2, align 4, !tbaa !10
  %207 = fpext float %206 to double
  %208 = call double @llvm.cos.f64(double %207)
  %209 = fptrunc double %208 to float
  %210 = call double @llvm.sin.f64(double %207)
  %211 = fptrunc double %210 to float
  %212 = fmul float %198, %197
  %.reload9 = load float, float* %.reg2mem8, align 4
  %213 = fmul float %.reload9, %195
  %214 = fsub float %212, %213
  %.reload22 = load float, float* %.reg2mem18, align 4
  %215 = fmul float %.reload22, 3.000000e+01
  %.reload12 = load float, float* %.reg2mem11, align 4
  %216 = fmul float %.reload12, %205
  %217 = fmul float %216, %209
  %218 = fmul float %214, %211
  %219 = fsub float %217, %218
  %220 = fmul float %219, %215
  %221 = fadd float %220, 4.000000e+01
  %222 = fptosi float %221 to i32
  store i32 %222, i32* %.reg2mem23, align 4
  %.reload21 = load float, float* %.reg2mem18, align 4
  %223 = fmul float %.reload21, 1.500000e+01
  %224 = fmul float %216, %211
  %225 = fmul float %214, %209
  %226 = fadd float %224, %225
  %227 = fmul float %226, %223
  %228 = fadd float %227, 1.200000e+01
  %229 = fptosi float %228 to i32
  store i32 %229, i32* %.reg2mem30, align 4
  %.reload6 = load float, float* %.reg2mem4, align 4
  %230 = fmul float %.reload6, %191
  %231 = fmul float %230, %197
  %232 = fsub float %213, %231
  %233 = fmul float %232, %209
  %234 = fmul float %230, %195
  %235 = fsub float %233, %234
  %236 = fsub float %235, %200
  %.reload5 = load float, float* %.reg2mem4, align 4
  %237 = fmul float %.reload5, %205
  %238 = fmul float %237, %211
  %239 = fsub float %236, %238
  %240 = fmul float %239, 8.000000e+00
  %241 = fptosi float %240 to i32
  store i32 %241, i32* %.reg2mem33, align 4
  %.reload32 = load i32, i32* %.reg2mem30, align 4
  %242 = and i64 %26, 7051211698522598939
  %243 = xor i64 %26, -1
  %244 = or i64 -7051211698522598940, %243
  %245 = xor i64 %244, -1
  %246 = and i64 %245, -1
  %247 = or i64 %26, -1630958825988664397
  %248 = xor i64 %26, -1
  %249 = and i64 %248, -8466922109688804452
  %250 = and i64 %26, 8466922109688804451
  %251 = or i64 %249, %250
  %252 = xor i64 7143510165007980591, %251
  %253 = xor i64 %26, -1
  %254 = or i64 1630958825988664396, %253
  %255 = xor i64 %254, -1
  %256 = and i64 %255, -1
  %257 = or i64 %252, %256
  %258 = xor i64 -6342071815841979487, %246
  %259 = xor i64 %258, %247
  %260 = xor i64 %259, %242
  %261 = xor i64 %260, %257
  %262 = and i64 %16, -1715254217240900585
  %263 = xor i64 %16, -1
  %264 = or i64 1715254217240900584, %263
  %265 = xor i64 %264, -1
  %266 = and i64 %265, -1
  %267 = or i64 %36, -436106290917030369
  %268 = and i64 -436106290917030369, %36
  %269 = xor i64 -436106290917030369, %36
  %270 = or i64 %268, %269
  %271 = xor i64 9070234396471415600, %266
  %272 = xor i64 %271, %270
  %273 = xor i64 %272, %262
  %274 = xor i64 %273, %267
  %275 = mul i64 %261, %274
  %276 = trunc i64 %275 to i32
  %277 = sub i32 %.reload32, %276
  %278 = add i32 %277, -1
  %279 = add i32 %278, -204676816
  %280 = sext i32 %dispatcher1 to i64
  %281 = or i64 %280, -7704909848088450620
  %282 = and i64 -7704909848088450620, %280
  %283 = xor i64 -7704909848088450620, %280
  %284 = or i64 %282, %283
  %285 = add i64 %12, 8523616366697387326
  %286 = xor i64 8523616366697387326, %12
  %287 = and i64 8523616366697387326, %12
  %288 = mul i64 2, %287
  %289 = add i64 %286, %288
  %290 = add i64 %36, -321762417773318931
  %291 = xor i64 -321762417773318931, %36
  %292 = and i64 -321762417773318931, %36
  %293 = mul i64 2, %292
  %294 = add i64 %291, %293
  %295 = xor i64 %289, %281
  %296 = xor i64 %295, %285
  %297 = xor i64 %296, %294
  %298 = xor i64 %297, %290
  %299 = xor i64 %298, 1568484416947096797
  %300 = xor i64 %299, %284
  %301 = and i64 %8, -3442607142204904940
  %302 = xor i64 %8, -1
  %303 = or i64 3442607142204904939, %302
  %304 = xor i64 %303, -1
  %305 = and i64 %304, -1
  %306 = add i64 %14, -7425536492037069190
  %307 = sub i64 0, %14
  %308 = sub i64 -7425536492037069190, %307
  %309 = xor i64 %306, %301
  %310 = xor i64 %309, %308
  %311 = xor i64 %310, 3924283914833006745
  %312 = xor i64 %311, %305
  %313 = mul i64 %300, %312
  %314 = trunc i64 %313 to i32
  %315 = icmp ult i32 %279, %314
  %.reload29 = load i32, i32* %.reg2mem23, align 4
  %316 = icmp sgt i32 %.reload29, 0
  %317 = or i64 %30, 4918627823505848296
  %318 = and i64 4918627823505848296, %30
  %319 = xor i64 4918627823505848296, %30
  %320 = or i64 %318, %319
  %321 = and i64 %6, 6170293971747047814
  %322 = xor i64 %6, -1
  %323 = or i64 -6170293971747047815, %322
  %324 = xor i64 %323, -1
  %325 = and i64 %324, -1
  %326 = sext i32 %dispatcher1 to i64
  %327 = and i64 %326, 6682085488586683078
  %328 = xor i64 %326, -1
  %329 = or i64 -6682085488586683079, %328
  %330 = xor i64 %329, -1
  %331 = and i64 %330, -1
  %332 = xor i64 %320, %321
  %333 = xor i64 %332, -384854035274917175
  %334 = xor i64 %333, %331
  %335 = xor i64 %334, %317
  %336 = xor i64 %335, %325
  %337 = xor i64 %336, %327
  %338 = and i64 %38, -6924376631623985063
  %339 = xor i64 %38, -1
  %340 = or i64 6924376631623985062, %339
  %341 = xor i64 %340, -1
  %342 = and i64 %341, -1
  %343 = or i64 %38, -9143448065795005780
  %344 = xor i64 %38, -1
  %345 = and i64 %344, -7979015715520467531
  %346 = and i64 %38, 7979015715520467530
  %347 = or i64 %345, %346
  %348 = xor i64 1179702406417141529, %347
  %349 = xor i64 %38, -1
  %350 = or i64 9143448065795005779, %349
  %351 = xor i64 %350, -1
  %352 = and i64 %351, -1
  %353 = or i64 %348, %352
  %354 = xor i64 0, %353
  %355 = xor i64 %354, %343
  %356 = xor i64 %355, %338
  %357 = xor i64 %356, %342
  %358 = mul i64 %337, %357
  %359 = trunc i64 %358 to i1
  %360 = select i1 %315, i1 %316, i1 %359
  %.reload28 = load i32, i32* %.reg2mem23, align 4
  %361 = icmp slt i32 %.reload28, 80
  %362 = select i1 %360, i1 %361, i1 false
  %363 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 13
  %364 = load i32, i32* %363, align 4
  %365 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 10
  %366 = load i32, i32* %365, align 4
  %367 = sub i32 %364, %366
  %368 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 14
  %369 = load i32, i32* %368, align 4
  %370 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %371 = load i32, i32* %370, align 4
  %372 = srem i32 %369, %371
  %373 = select i1 %362, i32 %367, i32 %372
  store i32 %373, i32* %dispatcher, align 4
  %374 = load i8*, i8** %37, align 8
  %375 = load i8, i8* %374, align 1
  %376 = mul i8 %375, %375
  %377 = xor i8 %376, %375
  %378 = and i8 %376, %375
  %379 = mul i8 2, %378
  %380 = add i8 %377, %379
  %381 = mul i8 39, %380
  %382 = add i8 23, %381
  %383 = add i64 %49, -3484456404769743400
  %384 = sub i64 0, %49
  %385 = sub i64 -3484456404769743400, %384
  %386 = and i64 %22, -6965523163189950493
  %387 = or i64 6965523163189950492, %22
  %388 = sub i64 %387, 6965523163189950492
  %389 = add i64 %18, 7705670392264793998
  %390 = add i64 -4021155807539894267, %18
  %391 = sub i64 %390, 6719917873904863351
  %392 = xor i64 %386, %391
  %393 = xor i64 %392, %389
  %394 = xor i64 %393, 6683568537832014101
  %395 = xor i64 %394, %383
  %396 = xor i64 %395, %385
  %397 = xor i64 %396, %388
  %398 = and i64 %40, -5689391057059365480
  %399 = xor i64 %40, -1
  %400 = or i64 5689391057059365479, %399
  %401 = xor i64 %400, -1
  %402 = and i64 %401, -1
  %403 = and i64 %12, -267782279014572206
  %404 = or i64 267782279014572205, %12
  %405 = sub i64 %404, 267782279014572205
  %406 = xor i64 %398, %402
  %407 = xor i64 %406, %405
  %408 = xor i64 %407, %403
  %409 = xor i64 %408, 4422498548032318971
  %410 = mul i64 %397, %409
  %411 = trunc i64 %410 to i8
  %412 = mul i8 %411, %382
  %413 = add i8 111, %412
  %414 = or i64 %43, -1954446298214560914
  %415 = and i64 -1954446298214560914, %43
  %416 = xor i64 -1954446298214560914, %43
  %417 = or i64 %415, %416
  %418 = add i64 %6, -7290176799957538858
  %419 = sub i64 0, %6
  %420 = add i64 7290176799957538858, %419
  %421 = sub i64 0, %420
  %422 = xor i64 %421, %414
  %423 = xor i64 %422, -6104040818981241825
  %424 = xor i64 %423, %418
  %425 = xor i64 %424, %417
  %426 = and i64 %47, 8928163819851931446
  %427 = xor i64 %47, -1
  %428 = or i64 -8928163819851931447, %427
  %429 = xor i64 %428, -1
  %430 = and i64 %429, -1
  %431 = add i64 %6, 5331471855722754581
  %432 = sub i64 0, %6
  %433 = sub i64 5331471855722754581, %432
  %434 = xor i64 %430, -1154476651914526819
  %435 = xor i64 %434, %433
  %436 = xor i64 %435, %431
  %437 = xor i64 %436, %426
  %438 = mul i64 %425, %437
  %439 = trunc i64 %438 to i8
  %440 = mul i8 %413, %439
  %441 = srem i8 %440, 2
  %442 = or i64 %32, -2286339272903246932
  %443 = xor i64 %32, -1
  %444 = and i64 -2286339272903246932, %443
  %445 = add i64 %444, %32
  %446 = and i64 %22, -6847163539855768097
  %447 = xor i64 %22, -1
  %448 = xor i64 -6847163539855768097, %447
  %449 = and i64 %448, -6847163539855768097
  %450 = or i64 %14, -7662405854029022139
  %451 = xor i64 %14, -1
  %452 = and i64 -7662405854029022139, %451
  %453 = add i64 %452, %14
  %454 = xor i64 %442, %450
  %455 = xor i64 %454, -4288512036585364607
  %456 = xor i64 %455, %449
  %457 = xor i64 %456, %446
  %458 = xor i64 %457, %453
  %459 = xor i64 %458, %445
  %460 = or i64 %26, -5785211580737062030
  %461 = and i64 -5785211580737062030, %26
  %462 = xor i64 -5785211580737062030, %26
  %463 = or i64 %461, %462
  %464 = add i64 %22, -6512521361494755233
  %465 = and i64 -6512521361494755233, %22
  %466 = or i64 -6512521361494755233, %22
  %467 = add i64 %465, %466
  %468 = add i64 %43, -1155707937618401597
  %469 = and i64 -1155707937618401597, %43
  %470 = or i64 -1155707937618401597, %43
  %471 = add i64 %469, %470
  %472 = xor i64 0, %463
  %473 = xor i64 %472, %460
  %474 = xor i64 %473, %467
  %475 = xor i64 %474, %471
  %476 = xor i64 %475, %464
  %477 = xor i64 %476, %468
  %478 = mul i64 %459, %477
  %479 = trunc i64 %478 to i8
  %480 = icmp eq i8 %441, %479
  %481 = mul i8 %375, %375
  %482 = add i8 %481, %375
  %483 = srem i8 %482, 2
  %484 = add i64 %12, 8034452388137222718
  %485 = sub i64 0, %12
  %486 = sub i64 8034452388137222718, %485
  %487 = and i64 %8, 4190706325083303079
  %488 = xor i64 %8, -1
  %489 = xor i64 4190706325083303079, %488
  %490 = and i64 %489, 4190706325083303079
  %491 = xor i64 %486, %484
  %492 = xor i64 %491, %487
  %493 = xor i64 %492, %490
  %494 = xor i64 %493, 6018227196882256245
  %495 = or i64 %16, -4868292099279733074
  %496 = xor i64 %16, -1
  %497 = and i64 %496, 2455722102752959341
  %498 = and i64 %16, -2455722102752959342
  %499 = or i64 %497, %498
  %500 = xor i64 -7033461409820351037, %499
  %501 = xor i64 %16, -1
  %502 = or i64 4868292099279733073, %501
  %503 = xor i64 %502, -1
  %504 = and i64 %503, -1
  %505 = or i64 %500, %504
  %506 = or i64 %47, 7527161568015845614
  %507 = xor i64 %47, -1
  %508 = and i64 7527161568015845614, %507
  %509 = add i64 %508, %47
  %510 = and i64 %16, 5038289516564457307
  %511 = xor i64 %16, -1
  %512 = or i64 -5038289516564457308, %511
  %513 = xor i64 %512, -1
  %514 = and i64 %513, -1
  %515 = xor i64 %505, %509
  %516 = xor i64 %515, %506
  %517 = xor i64 %516, %495
  %518 = xor i64 %517, 0
  %519 = xor i64 %518, %514
  %520 = xor i64 %519, %510
  %521 = mul i64 %494, %520
  %522 = trunc i64 %521 to i8
  %523 = icmp eq i8 %483, %522
  %524 = xor i1 %480, true
  %525 = or i1 %524, %523
  %526 = xor i1 %480, true
  %527 = sub i1 %525, %526
  %528 = add i64 %22, -7727103061661791062
  %529 = xor i64 -7727103061661791062, %22
  %530 = and i64 -7727103061661791062, %22
  %531 = mul i64 2, %530
  %532 = add i64 %529, %531
  %533 = and i64 %38, 3573122284844658856
  %534 = or i64 -3573122284844658857, %38
  %535 = sub i64 %534, -3573122284844658857
  %536 = xor i64 %532, -6379433374966957351
  %537 = xor i64 %536, %535
  %538 = xor i64 %537, %528
  %539 = xor i64 %538, %533
  %540 = and i64 %6, 7967382998010515261
  %541 = or i64 -7967382998010515262, %6
  %542 = sub i64 %541, -7967382998010515262
  %543 = add i64 %40, 3027531697674443864
  %544 = add i64 -7114217470504322621, %40
  %545 = add i64 %544, -8304994905530785131
  %546 = add i64 %45, 799886907637371355
  %547 = and i64 799886907637371355, %45
  %548 = or i64 799886907637371355, %45
  %549 = add i64 %547, %548
  %550 = xor i64 %546, %540
  %551 = xor i64 %550, 3218574833555677562
  %552 = xor i64 %551, %549
  %553 = xor i64 %552, %542
  %554 = xor i64 %553, %545
  %555 = xor i64 %554, %543
  %556 = mul i64 %539, %555
  %557 = trunc i64 %556 to i32
  %558 = select i1 %527, i32 %557, i32 984876141
  %559 = xor i32 %558, 7
  store i32 %559, i32* %5, align 4
  %560 = call i8** @bf17181708843024921859(i32* %5)
  %561 = load i8*, i8** %560, align 8
  indirectbr i8* %561, [label %loopEnd, label %189]

562:                                              ; preds = %562, %loopStart
  %.reload31 = load i32, i32* %.reg2mem30, align 4
  %563 = mul nsw i32 %.reload31, 80
  %.reload27 = load i32, i32* %.reg2mem23, align 4
  %564 = or i64 %18, -6454723063533891292
  %565 = xor i64 %18, -1
  %566 = and i64 -6454723063533891292, %565
  %567 = add i64 %566, %18
  %568 = and i64 %38, -6453142625521774721
  %569 = xor i64 %38, -1
  %570 = or i64 6453142625521774720, %569
  %571 = xor i64 %570, -1
  %572 = and i64 %571, -1
  %573 = or i64 %12, 5065434385156055107
  %574 = xor i64 %12, -1
  %575 = and i64 %574, 6580436668559931788
  %576 = and i64 %12, -6580436668559931789
  %577 = or i64 %575, %576
  %578 = xor i64 2098222182776609231, %577
  %579 = xor i64 %12, -1
  %580 = or i64 -5065434385156055108, %579
  %581 = xor i64 %580, -1
  %582 = and i64 %581, -1
  %583 = or i64 %578, %582
  %584 = xor i64 %568, %564
  %585 = xor i64 %584, 7611615473452888717
  %586 = xor i64 %585, %573
  %587 = xor i64 %586, %583
  %588 = xor i64 %587, %572
  %589 = xor i64 %588, %567
  %590 = and i64 %47, -6532898921540442106
  %591 = xor i64 %47, -1
  %592 = xor i64 -6532898921540442106, %591
  %593 = and i64 %592, -6532898921540442106
  %594 = add i64 %36, 9025572418308004823
  %595 = sub i64 0, %36
  %596 = add i64 -9025572418308004823, %595
  %597 = sub i64 0, %596
  %598 = or i64 %28, -3934718569628399324
  %599 = xor i64 %28, -1
  %600 = and i64 %599, -3178074714734582037
  %601 = and i64 %28, 3178074714734582036
  %602 = or i64 %600, %601
  %603 = xor i64 1909569862778400719, %602
  %604 = xor i64 %28, -1
  %605 = or i64 3934718569628399323, %604
  %606 = xor i64 %605, -1
  %607 = and i64 %606, -1
  %608 = or i64 %603, %607
  %609 = xor i64 %594, %598
  %610 = xor i64 %609, %593
  %611 = xor i64 %610, %590
  %612 = xor i64 %611, 4454667486719227498
  %613 = xor i64 %612, %608
  %614 = xor i64 %613, %597
  %615 = mul i64 %589, %614
  %616 = trunc i64 %615 to i32
  %617 = add i32 %563, %616
  %618 = add i32 %617, %.reload27
  %619 = sub i32 %618, -2094846878
  %620 = sext i32 %619 to i64
  store i64 %620, i64* %.reg2mem38, align 8
  %.reload40 = load i64, i64* %.reg2mem38, align 8
  %621 = getelementptr inbounds float, float* %4, i64 %.reload40
  store float* %621, float** %.reg2mem41, align 8
  %.reload43 = load float*, float** %.reg2mem41, align 8
  %622 = load float, float* %.reload43, align 4, !tbaa !10
  %.reload20 = load float, float* %.reg2mem18, align 4
  %623 = fcmp ogt float %.reload20, %622
  store i1 %623, i1* %.reg2mem44, align 1
  %.reload37 = load i32, i32* %.reg2mem33, align 4
  %624 = srem i32 %.reload37, 2
  %625 = icmp eq i32 %624, 0
  %626 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 6
  %627 = load i32, i32* %626, align 4
  %628 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 4
  %629 = load i32, i32* %628, align 4
  %630 = add i32 %627, %629
  %631 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 6
  %632 = load i32, i32* %631, align 4
  %633 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 5
  %634 = load i32, i32* %633, align 4
  %635 = add i32 %632, 844484990
  %636 = add i32 %635, %634
  %637 = sub i32 %636, 844484990
  %638 = select i1 %625, i32 %630, i32 %637
  store i32 %638, i32* %dispatcher, align 4
  %639 = load i8*, i8** %37, align 8
  %640 = load i8, i8* %639, align 1
  %641 = mul i8 %640, %640
  %642 = add i8 %641, %640
  %643 = mul i8 %642, 3
  %644 = srem i8 %643, 2
  %645 = icmp eq i8 %644, 0
  %646 = mul i8 %640, %640
  %647 = sub i8 %646, 72
  %648 = add i8 %647, %640
  %649 = add i8 %648, 72
  %650 = and i64 %32, 3709432982474336995
  %651 = xor i64 %32, -1
  %652 = xor i64 3709432982474336995, %651
  %653 = and i64 %652, 3709432982474336995
  %654 = and i64 %47, -3611801418851015132
  %655 = xor i64 %47, -1
  %656 = xor i64 -3611801418851015132, %655
  %657 = and i64 %656, -3611801418851015132
  %658 = add i64 %43, -5386166168408646914
  %659 = add i64 -3028184362129732877, %43
  %660 = add i64 %659, -2357981806278914037
  %661 = xor i64 %657, 6669459080953109547
  %662 = xor i64 %661, %660
  %663 = xor i64 %662, %650
  %664 = xor i64 %663, %658
  %665 = xor i64 %664, %654
  %666 = xor i64 %665, %653
  %667 = and i64 %30, 4169340374746373958
  %668 = xor i64 %30, -1
  %669 = or i64 -4169340374746373959, %668
  %670 = xor i64 %669, -1
  %671 = and i64 %670, -1
  %672 = add i64 %8, 3799098342973288922
  %673 = add i64 3770044984346384581, %8
  %674 = sub i64 %673, -29053358626904341
  %675 = or i64 %40, -8095172951858408896
  %676 = and i64 -8095172951858408896, %40
  %677 = xor i64 -8095172951858408896, %40
  %678 = or i64 %676, %677
  %679 = xor i64 %675, %674
  %680 = xor i64 %679, %667
  %681 = xor i64 %680, %678
  %682 = xor i64 %681, -6976713892571216634
  %683 = xor i64 %682, %672
  %684 = xor i64 %683, %671
  %685 = mul i64 %666, %684
  %686 = trunc i64 %685 to i8
  %687 = srem i8 %649, %686
  %688 = icmp eq i8 %687, 0
  %689 = and i1 %645, %688
  %690 = select i1 %689, i32 984876137, i32 984876141
  %691 = or i64 %36, -6594238315899116578
  %692 = and i64 -6594238315899116578, %36
  %693 = xor i64 -6594238315899116578, %36
  %694 = or i64 %692, %693
  %695 = or i64 %8, 6630382777417254680
  %696 = xor i64 %8, -1
  %697 = and i64 %696, 4962880316731157247
  %698 = and i64 %8, -4962880316731157248
  %699 = or i64 %697, %698
  %700 = xor i64 1791424791335087591, %699
  %701 = xor i64 %8, -1
  %702 = or i64 -6630382777417254681, %701
  %703 = xor i64 %702, -1
  %704 = and i64 %703, -1
  %705 = or i64 %700, %704
  %706 = add i64 %20, 757129723468681059
  %707 = sub i64 0, %20
  %708 = add i64 -757129723468681059, %707
  %709 = sub i64 0, %708
  %710 = xor i64 %706, %709
  %711 = xor i64 %710, %705
  %712 = xor i64 %711, %691
  %713 = xor i64 %712, %695
  %714 = xor i64 %713, %694
  %715 = xor i64 %714, 3682467164039574571
  %716 = add i64 %38, -6691409912623418378
  %717 = xor i64 -6691409912623418378, %38
  %718 = and i64 -6691409912623418378, %38
  %719 = mul i64 2, %718
  %720 = add i64 %717, %719
  %721 = add i64 %20, -3856989389433812419
  %722 = add i64 -9018239031221110951, %20
  %723 = sub i64 %722, -5161249641787298532
  %724 = xor i64 %723, -8030929541389440500
  %725 = xor i64 %724, %721
  %726 = xor i64 %725, %720
  %727 = xor i64 %726, %716
  %728 = mul i64 %715, %727
  %729 = trunc i64 %728 to i32
  %730 = xor i32 %690, %729
  store i32 %730, i32* %5, align 4
  %731 = call i8** @bf17181708843024921859(i32* %5)
  %732 = load i8*, i8** %731, align 8
  indirectbr i8* %732, [label %loopEnd, label %562]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 4070807658626890126, i64* %42, align 8
  %733 = call i8** @lk12478154414877683305(i64* %42)
  %734 = load i8*, i8** %733, align 8
  %735 = bitcast i8* %734 to void ([19 x i32]*, i32*)*
  call void %735([19 x i32]* %lookupTable, i32* %dispatcher)
  %736 = load i8*, i8** %39, align 8
  %737 = load i8, i8* %736, align 1
  %738 = mul i8 %737, 2
  %739 = mul i8 %737, 2
  %740 = add i8 2, %739
  %741 = mul i8 %738, %740
  %742 = srem i8 %741, 4
  %743 = or i64 %40, 2087538160997167019
  %744 = and i64 2087538160997167019, %40
  %745 = xor i64 2087538160997167019, %40
  %746 = or i64 %744, %745
  %747 = and i64 %45, 7850535841846661632
  %748 = xor i64 %45, -1
  %749 = xor i64 7850535841846661632, %748
  %750 = and i64 %749, 7850535841846661632
  %751 = xor i64 %746, -3075121930851511631
  %752 = xor i64 %751, %750
  %753 = xor i64 %752, %747
  %754 = xor i64 %753, %743
  %755 = and i64 %49, -5465318613189003046
  %756 = xor i64 %49, -1
  %757 = xor i64 -5465318613189003046, %756
  %758 = and i64 %757, -5465318613189003046
  %759 = add i64 %12, -7934544050804185403
  %760 = add i64 -5646606113075721582, %12
  %761 = sub i64 %760, 2287937937728463821
  %762 = add i64 %32, 3618201914135049635
  %763 = xor i64 3618201914135049635, %32
  %764 = and i64 3618201914135049635, %32
  %765 = mul i64 2, %764
  %766 = add i64 %763, %765
  %767 = xor i64 0, %755
  %768 = xor i64 %767, %766
  %769 = xor i64 %768, %762
  %770 = xor i64 %769, %761
  %771 = xor i64 %770, %759
  %772 = xor i64 %771, %758
  %773 = mul i64 %754, %772
  %774 = trunc i64 %773 to i8
  %775 = icmp eq i8 %742, %774
  %776 = mul i8 %737, %737
  %777 = mul i8 %776, %737
  %778 = add i8 %777, %737
  %779 = srem i8 %778, 2
  %780 = and i64 %28, 8995992679267077605
  %781 = or i64 -8995992679267077606, %28
  %782 = sub i64 %781, -8995992679267077606
  %783 = add i64 %43, -174422765315556496
  %784 = add i64 -2946519019752977058, %43
  %785 = add i64 %784, 2772096254437420562
  %786 = xor i64 %785, %782
  %787 = xor i64 %786, %783
  %788 = xor i64 %787, -6480150919009976749
  %789 = xor i64 %788, %780
  %790 = add i64 %45, -9185152651235015185
  %791 = add i64 -615473963527705634, %45
  %792 = sub i64 %791, 8569678687707309551
  %793 = add i64 %47, 313401616228395476
  %794 = xor i64 313401616228395476, %47
  %795 = and i64 313401616228395476, %47
  %796 = mul i64 2, %795
  %797 = add i64 %794, %796
  %798 = xor i64 %792, %797
  %799 = xor i64 %798, 0
  %800 = xor i64 %799, %790
  %801 = xor i64 %800, %793
  %802 = mul i64 %789, %801
  %803 = trunc i64 %802 to i8
  %804 = icmp eq i8 %779, %803
  %805 = xor i1 %775, true
  %806 = or i1 %805, %804
  %807 = xor i1 %775, true
  %808 = sub i1 %806, %807
  %809 = select i1 %808, i32 984876140, i32 984876141
  %810 = or i32 %809, 1
  %811 = and i32 %809, 1
  %812 = sub i32 %810, %811
  store i32 %812, i32* %5, align 4
  %813 = call i8** @bf17181708843024921859(i32* %5)
  %814 = load i8*, i8** %813, align 8
  indirectbr i8* %814, [label %loopEnd, label %codeRepl1]

815:                                              ; preds = %815, %loopStart
  %816 = add i64 102, 93
  %.reload36 = load i32, i32* %.reg2mem33, align 4
  %817 = srem i32 %.reload36, 2
  %818 = icmp eq i32 %817, 0
  %.reload26 = load i32, i32* %.reg2mem23, align 4
  %819 = and i32 %.reload26, 1
  %820 = icmp eq i32 %819, 0
  %.reload25 = load i32, i32* %.reg2mem23, align 4
  %821 = mul i32 %.reload25, %.reload25
  %.reload24 = load i32, i32* %.reg2mem23, align 4
  %822 = add i32 %821, %.reload24
  %823 = or i64 %18, -5292206138353147768
  %824 = and i64 -5292206138353147768, %18
  %825 = xor i64 -5292206138353147768, %18
  %826 = or i64 %824, %825
  %827 = and i64 %36, 228834519560823985
  %828 = xor i64 %36, -1
  %829 = or i64 -228834519560823986, %828
  %830 = xor i64 %829, -1
  %831 = and i64 %830, -1
  %832 = or i64 %20, 1134017074854640253
  %833 = and i64 1134017074854640253, %20
  %834 = xor i64 1134017074854640253, %20
  %835 = or i64 %833, %834
  %836 = xor i64 %827, %826
  %837 = xor i64 %836, %823
  %838 = xor i64 %837, -3190286203420066287
  %839 = xor i64 %838, %835
  %840 = xor i64 %839, %832
  %841 = xor i64 %840, %831
  %842 = or i64 %36, -99668379064875519
  %843 = xor i64 %36, -1
  %844 = and i64 %843, 6842512494300038059
  %845 = and i64 %36, -6842512494300038060
  %846 = or i64 %844, %845
  %847 = xor i64 -6888091805387930198, %846
  %848 = xor i64 %36, -1
  %849 = or i64 99668379064875518, %848
  %850 = xor i64 %849, -1
  %851 = and i64 %850, -1
  %852 = or i64 %847, %851
  %853 = and i64 %20, -4229966229983223999
  %854 = xor i64 %20, -1
  %855 = or i64 4229966229983223998, %854
  %856 = xor i64 %855, -1
  %857 = and i64 %856, -1
  %858 = xor i64 %857, %852
  %859 = xor i64 %858, 4952888823042562259
  %860 = xor i64 %859, %853
  %861 = xor i64 %860, %842
  %862 = mul i64 %841, %861
  %863 = trunc i64 %862 to i32
  %864 = mul i32 %822, %863
  %865 = srem i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = xor i1 %866, true
  %868 = and i1 %820, %867
  %869 = add i1 %868, %866
  store i1 %869, i1* %.reg2mem46, align 1
  %870 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 7
  %871 = load i32, i32* %870, align 4
  %872 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 5
  %873 = load i32, i32* %872, align 4
  %874 = add i32 %871, %873
  %875 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 10
  %876 = load i32, i32* %875, align 4
  %877 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %878 = load i32, i32* %877, align 4
  %879 = srem i32 %876, %878
  %.reload48 = load i1, i1* %.reg2mem46, align 1
  %880 = select i1 %.reload48, i32 %874, i32 %879
  store i32 %880, i32* %dispatcher, align 4
  %881 = load i8*, i8** %7, align 8
  %882 = load i8, i8* %881, align 1
  %883 = mul i8 %882, 2
  %884 = mul i8 %882, 2
  %885 = add i8 2, %884
  %886 = mul i8 %883, %885
  %887 = srem i8 %886, 4
  %888 = icmp eq i8 %887, 0
  %889 = mul i8 %882, %882
  %890 = add i8 %889, %882
  %891 = srem i8 %890, 2
  %892 = icmp eq i8 %891, 0
  %893 = and i64 %18, -7870644606943206099
  %894 = xor i64 %18, -1
  %895 = or i64 7870644606943206098, %894
  %896 = xor i64 %895, -1
  %897 = and i64 %896, -1
  %898 = and i64 %40, 7814155458474417864
  %899 = xor i64 %40, -1
  %900 = xor i64 7814155458474417864, %899
  %901 = and i64 %900, 7814155458474417864
  %902 = xor i64 %897, %898
  %903 = xor i64 %902, -5028237598740634193
  %904 = xor i64 %903, %893
  %905 = xor i64 %904, %901
  %906 = add i64 %49, 6440381604219008981
  %907 = sub i64 0, %49
  %908 = add i64 -6440381604219008981, %907
  %909 = sub i64 0, %908
  %910 = sext i32 %dispatcher1 to i64
  %911 = add i64 %910, -4358972893110937308
  %912 = sub i64 0, %910
  %913 = add i64 4358972893110937308, %912
  %914 = sub i64 0, %913
  %915 = or i64 %20, -2086092346372828423
  %916 = xor i64 %20, -1
  %917 = and i64 -2086092346372828423, %916
  %918 = add i64 %917, %20
  %919 = xor i64 %915, %909
  %920 = xor i64 %919, %911
  %921 = xor i64 %920, %918
  %922 = xor i64 %921, -4762559992613351089
  %923 = xor i64 %922, %914
  %924 = xor i64 %923, %906
  %925 = mul i64 %905, %924
  %926 = trunc i64 %925 to i1
  %927 = xor i1 %888, %926
  %928 = and i1 %927, true
  %929 = and i1 %888, false
  %930 = or i1 %928, %929
  %931 = xor i1 %892, true
  %932 = and i1 %931, true
  %933 = and i1 %892, false
  %934 = or i1 %932, %933
  %935 = xor i1 %930, %934
  %936 = xor i1 %888, true
  %937 = xor i1 %892, true
  %938 = or i1 %936, %937
  %939 = xor i1 %938, true
  %940 = and i1 %939, true
  %941 = or i1 %935, %940
  %942 = select i1 %941, i32 984876155, i32 984876141
  %943 = xor i32 %942, 22
  store i32 %943, i32* %5, align 4
  %944 = call i8** @bf17181708843024921859(i32* %5)
  %945 = load i8*, i8** %944, align 8
  indirectbr i8* %945, [label %loopEnd, label %815]

946:                                              ; preds = %946, %loopStart
  %947 = sdiv i64 121, 70
  %948 = sdiv i64 92, 98
  %949 = or i64 %12, -3514970499567153637
  %950 = xor i64 %12, -1
  %951 = and i64 %950, 3648601852155723649
  %952 = and i64 %12, -3648601852155723650
  %953 = or i64 %951, %952
  %954 = xor i64 -172789379637415526, %953
  %955 = xor i64 %12, -1
  %956 = or i64 3514970499567153636, %955
  %957 = xor i64 %956, -1
  %958 = and i64 %957, -1
  %959 = or i64 %954, %958
  %960 = and i64 %36, -3690705769984354528
  %961 = or i64 3690705769984354527, %36
  %962 = sub i64 %961, 3690705769984354527
  %963 = xor i64 %959, -4190734856297858147
  %964 = xor i64 %963, %962
  %965 = xor i64 %964, %949
  %966 = xor i64 %965, %960
  %967 = add i64 %6, -322041472910297664
  %968 = sub i64 0, %6
  %969 = sub i64 -322041472910297664, %968
  %970 = or i64 %38, -2195495225817235780
  %971 = xor i64 %38, -1
  %972 = and i64 -2195495225817235780, %971
  %973 = add i64 %972, %38
  %974 = xor i64 %969, -9181320488570729524
  %975 = xor i64 %974, %970
  %976 = xor i64 %975, %973
  %977 = xor i64 %976, %967
  %978 = mul i64 %966, %977
  %979 = add i64 33, %978
  %980 = mul i64 65, 42
  %981 = sub i64 83, 36
  %982 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 11
  %983 = load i32, i32* %982, align 4
  %984 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %985 = load i32, i32* %984, align 4
  %986 = srem i32 %983, %985
  store i32 %986, i32* %dispatcher, align 4
  %987 = load i8*, i8** %31, align 8
  %988 = load i8, i8* %987, align 1
  %989 = or i64 %38, -6976179045311202059
  %990 = xor i64 %38, -1
  %991 = and i64 %990, 1451100246472795417
  %992 = and i64 %38, -1451100246472795418
  %993 = or i64 %991, %992
  %994 = xor i64 -8427090448370263572, %993
  %995 = xor i64 %38, -1
  %996 = or i64 6976179045311202058, %995
  %997 = xor i64 %996, -1
  %998 = and i64 %997, -1
  %999 = or i64 %994, %998
  %1000 = add i64 %40, 3183854007854166770
  %1001 = sub i64 0, %40
  %1002 = add i64 -3183854007854166770, %1001
  %1003 = sub i64 0, %1002
  %1004 = and i64 %10, -3999039717144291582
  %1005 = or i64 3999039717144291581, %10
  %1006 = sub i64 %1005, 3999039717144291581
  %1007 = xor i64 %1003, %1004
  %1008 = xor i64 %1007, %1006
  %1009 = xor i64 %1008, -3679597684724683653
  %1010 = xor i64 %1009, %989
  %1011 = xor i64 %1010, %999
  %1012 = xor i64 %1011, %1000
  %1013 = or i64 %20, -8073239330534800455
  %1014 = and i64 -8073239330534800455, %20
  %1015 = xor i64 -8073239330534800455, %20
  %1016 = or i64 %1014, %1015
  %1017 = or i64 %47, 6451353499583512755
  %1018 = xor i64 %47, -1
  %1019 = and i64 %1018, -7330715358442679892
  %1020 = and i64 %47, 7330715358442679891
  %1021 = or i64 %1019, %1020
  %1022 = xor i64 -4340380514526424801, %1021
  %1023 = xor i64 %47, -1
  %1024 = or i64 -6451353499583512756, %1023
  %1025 = xor i64 %1024, -1
  %1026 = and i64 %1025, -1
  %1027 = or i64 %1022, %1026
  %1028 = xor i64 %1013, %1016
  %1029 = xor i64 %1028, %1027
  %1030 = xor i64 %1029, -3025937936025868954
  %1031 = xor i64 %1030, %1017
  %1032 = mul i64 %1012, %1031
  %1033 = trunc i64 %1032 to i8
  %1034 = mul i8 %988, %1033
  %1035 = mul i8 %988, 2
  %1036 = add i64 %34, -8402089439642510803
  %1037 = xor i64 -8402089439642510803, %34
  %1038 = and i64 -8402089439642510803, %34
  %1039 = mul i64 2, %1038
  %1040 = add i64 %1037, %1039
  %1041 = add i64 %24, -4456009107710836270
  %1042 = xor i64 -4456009107710836270, %24
  %1043 = and i64 -4456009107710836270, %24
  %1044 = mul i64 2, %1043
  %1045 = add i64 %1042, %1044
  %1046 = xor i64 %1040, %1045
  %1047 = xor i64 %1046, 814684006341491187
  %1048 = xor i64 %1047, %1036
  %1049 = xor i64 %1048, %1041
  %1050 = add i64 %32, 1801121992072390822
  %1051 = sub i64 0, %32
  %1052 = sub i64 1801121992072390822, %1051
  %1053 = and i64 %18, 2547668808067785453
  %1054 = xor i64 %18, -1
  %1055 = xor i64 2547668808067785453, %1054
  %1056 = and i64 %1055, 2547668808067785453
  %1057 = xor i64 -5143036614782218634, %1056
  %1058 = xor i64 %1057, %1053
  %1059 = xor i64 %1058, %1050
  %1060 = xor i64 %1059, %1052
  %1061 = mul i64 %1049, %1060
  %1062 = trunc i64 %1061 to i8
  %1063 = add i8 %1062, %1035
  %1064 = mul i8 %1034, %1063
  %1065 = srem i8 %1064, 4
  %1066 = icmp eq i8 %1065, 0
  %1067 = mul i8 %988, %988
  %1068 = add i8 %1067, %988
  %1069 = srem i8 %1068, 2
  %1070 = icmp eq i8 %1069, 0
  %1071 = xor i1 %1070, true
  %1072 = and i1 %1066, %1071
  %1073 = add i1 %1072, %1070
  %1074 = or i64 %45, -7395434423621297139
  %1075 = and i64 -7395434423621297139, %45
  %1076 = xor i64 -7395434423621297139, %45
  %1077 = or i64 %1075, %1076
  %1078 = and i64 %43, 3398217565590953388
  %1079 = or i64 -3398217565590953389, %43
  %1080 = sub i64 %1079, -3398217565590953389
  %1081 = or i64 %16, 6510493386566838149
  %1082 = and i64 6510493386566838149, %16
  %1083 = xor i64 6510493386566838149, %16
  %1084 = or i64 %1082, %1083
  %1085 = xor i64 %1080, 2857267127723642689
  %1086 = xor i64 %1085, %1074
  %1087 = xor i64 %1086, %1078
  %1088 = xor i64 %1087, %1084
  %1089 = xor i64 %1088, %1077
  %1090 = xor i64 %1089, %1081
  %1091 = or i64 %8, 2121188993676829296
  %1092 = and i64 2121188993676829296, %8
  %1093 = xor i64 2121188993676829296, %8
  %1094 = or i64 %1092, %1093
  %1095 = and i64 %36, 2128608594295267542
  %1096 = xor i64 %36, -1
  %1097 = xor i64 2128608594295267542, %1096
  %1098 = and i64 %1097, 2128608594295267542
  %1099 = or i64 %34, 4381778699143098800
  %1100 = xor i64 %34, -1
  %1101 = and i64 4381778699143098800, %1100
  %1102 = add i64 %1101, %34
  %1103 = xor i64 %1102, %1091
  %1104 = xor i64 %1103, %1099
  %1105 = xor i64 %1104, %1094
  %1106 = xor i64 %1105, %1095
  %1107 = xor i64 %1106, 354679944763461862
  %1108 = xor i64 %1107, %1098
  %1109 = mul i64 %1090, %1108
  %1110 = trunc i64 %1109 to i32
  %1111 = select i1 %1073, i32 %1110, i32 984876141
  %1112 = xor i32 %1111, 11
  store i32 %1112, i32* %5, align 4
  %1113 = call i8** @bf17181708843024921859(i32* %5)
  %1114 = load i8*, i8** %1113, align 8
  indirectbr i8* %1114, [label %loopEnd, label %946]

1115:                                             ; preds = %1115, %loopStart
  %1116 = sdiv i64 121, 70
  %1117 = sdiv i64 92, 98
  %1118 = sext i32 %dispatcher1 to i64
  %1119 = and i64 %1118, -3566517533945015968
  %1120 = xor i64 %1118, -1
  %1121 = or i64 3566517533945015967, %1120
  %1122 = xor i64 %1121, -1
  %1123 = and i64 %1122, -1
  %1124 = or i64 %34, 2226474544470227729
  %1125 = and i64 2226474544470227729, %34
  %1126 = xor i64 2226474544470227729, %34
  %1127 = or i64 %1125, %1126
  %1128 = or i64 %49, -8492257305600525927
  %1129 = xor i64 %49, -1
  %1130 = and i64 %1129, 568165227165003029
  %1131 = and i64 %49, -568165227165003030
  %1132 = or i64 %1130, %1131
  %1133 = xor i64 -8230337411522964340, %1132
  %1134 = xor i64 %49, -1
  %1135 = or i64 8492257305600525926, %1134
  %1136 = xor i64 %1135, -1
  %1137 = and i64 %1136, -1
  %1138 = or i64 %1133, %1137
  %1139 = xor i64 %1119, %1124
  %1140 = xor i64 %1139, %1123
  %1141 = xor i64 %1140, %1128
  %1142 = xor i64 %1141, 5965877053439619831
  %1143 = xor i64 %1142, %1138
  %1144 = xor i64 %1143, %1127
  %1145 = and i64 %43, -8997525937587165206
  %1146 = or i64 8997525937587165205, %43
  %1147 = sub i64 %1146, 8997525937587165205
  %1148 = add i64 %26, -3648308245795331392
  %1149 = sub i64 0, %26
  %1150 = sub i64 -3648308245795331392, %1149
  %1151 = and i64 %32, 5542596487109734959
  %1152 = or i64 -5542596487109734960, %32
  %1153 = sub i64 %1152, -5542596487109734960
  %1154 = xor i64 %1151, %1147
  %1155 = xor i64 %1154, %1145
  %1156 = xor i64 %1155, %1150
  %1157 = xor i64 %1156, %1153
  %1158 = xor i64 %1157, -2765169675885475929
  %1159 = xor i64 %1158, %1148
  %1160 = mul i64 %1144, %1159
  %1161 = add i64 %1160, 28
  %1162 = or i64 %38, -500548400654852895
  %1163 = xor i64 %38, -1
  %1164 = and i64 %1163, 1204134953466105419
  %1165 = and i64 %38, -1204134953466105420
  %1166 = or i64 %1164, %1165
  %1167 = xor i64 -1605458784087878998, %1166
  %1168 = xor i64 %38, -1
  %1169 = or i64 500548400654852894, %1168
  %1170 = xor i64 %1169, -1
  %1171 = and i64 %1170, -1
  %1172 = or i64 %1167, %1171
  %1173 = add i64 %16, 2892571474749862594
  %1174 = xor i64 2892571474749862594, %16
  %1175 = and i64 2892571474749862594, %16
  %1176 = mul i64 2, %1175
  %1177 = add i64 %1174, %1176
  %1178 = xor i64 %1162, 127306885325394043
  %1179 = xor i64 %1178, %1173
  %1180 = xor i64 %1179, %1177
  %1181 = xor i64 %1180, %1172
  %1182 = add i64 %30, 6789696067442318641
  %1183 = add i64 8899911012644968510, %30
  %1184 = sub i64 %1183, 2110214945202649869
  %1185 = or i64 %49, -2819305192018517902
  %1186 = xor i64 %49, -1
  %1187 = and i64 %1186, -8663292248119497191
  %1188 = and i64 %49, 8663292248119497190
  %1189 = or i64 %1187, %1188
  %1190 = xor i64 6852821964267146859, %1189
  %1191 = xor i64 %49, -1
  %1192 = or i64 2819305192018517901, %1191
  %1193 = xor i64 %1192, -1
  %1194 = and i64 %1193, -1
  %1195 = or i64 %1190, %1194
  %1196 = xor i64 %1195, %1182
  %1197 = xor i64 %1196, %1185
  %1198 = xor i64 %1197, 2435974247695842163
  %1199 = xor i64 %1198, %1184
  %1200 = mul i64 %1181, %1199
  %1201 = mul i64 %1200, 42
  %1202 = sub i64 83, 36
  %1203 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 11
  %1204 = load i32, i32* %1203, align 4
  %1205 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %1206 = load i32, i32* %1205, align 4
  %1207 = srem i32 %1204, %1206
  %1208 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 6
  %1209 = load i32, i32* %1208, align 4
  %1210 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %1211 = load i32, i32* %1210, align 4
  %1212 = srem i32 %1209, %1211
  %.reload47 = load i1, i1* %.reg2mem46, align 1
  %1213 = select i1 %.reload47, i32 %1207, i32 %1212
  store i32 %1213, i32* %dispatcher, align 4
  %1214 = load i8*, i8** %35, align 8
  %1215 = load i8, i8* %1214, align 1
  %1216 = mul i8 %1215, 2
  %1217 = mul i8 %1215, 2
  %1218 = xor i8 2, %1217
  %1219 = or i64 %20, 4000145658298356410
  %1220 = xor i64 %20, -1
  %1221 = and i64 4000145658298356410, %1220
  %1222 = add i64 %1221, %20
  %1223 = or i64 %28, 1032686030992596904
  %1224 = and i64 1032686030992596904, %28
  %1225 = xor i64 1032686030992596904, %28
  %1226 = or i64 %1224, %1225
  %1227 = xor i64 %1219, %1226
  %1228 = xor i64 %1227, %1222
  %1229 = xor i64 %1228, %1223
  %1230 = xor i64 %1229, -1777702647551711479
  %1231 = add i64 %28, -3633440962943452630
  %1232 = sub i64 0, %28
  %1233 = sub i64 -3633440962943452630, %1232
  %1234 = add i64 %6, 7666336908201732119
  %1235 = and i64 7666336908201732119, %6
  %1236 = or i64 7666336908201732119, %6
  %1237 = add i64 %1235, %1236
  %1238 = xor i64 %1237, %1233
  %1239 = xor i64 %1238, -5549230014801498510
  %1240 = xor i64 %1239, %1231
  %1241 = xor i64 %1240, %1234
  %1242 = mul i64 %1230, %1241
  %1243 = trunc i64 %1242 to i8
  %1244 = and i8 %1243, %1217
  %1245 = mul i8 2, %1244
  %1246 = add i8 %1218, %1245
  %1247 = mul i8 39, %1246
  %1248 = add i8 23, %1247
  %1249 = mul i8 -105, %1248
  %1250 = add i8 111, %1249
  %1251 = mul i8 %1216, %1250
  %1252 = srem i8 %1251, 4
  %1253 = icmp eq i8 %1252, 0
  %1254 = mul i8 %1215, %1215
  %1255 = add i8 %1254, %1215
  %1256 = srem i8 %1255, 2
  %1257 = and i64 %14, 2444456978501706465
  %1258 = xor i64 %14, -1
  %1259 = xor i64 2444456978501706465, %1258
  %1260 = and i64 %1259, 2444456978501706465
  %1261 = add i64 %18, 1528842054413810345
  %1262 = xor i64 1528842054413810345, %18
  %1263 = and i64 1528842054413810345, %18
  %1264 = mul i64 2, %1263
  %1265 = add i64 %1262, %1264
  %1266 = xor i64 -3808466900405602217, %1261
  %1267 = xor i64 %1266, %1260
  %1268 = xor i64 %1267, %1257
  %1269 = xor i64 %1268, %1265
  %1270 = or i64 %12, -311072690253785481
  %1271 = and i64 -311072690253785481, %12
  %1272 = xor i64 -311072690253785481, %12
  %1273 = or i64 %1271, %1272
  %1274 = sext i32 %dispatcher1 to i64
  %1275 = add i64 %1274, -7261482085262646898
  %1276 = add i64 -6616665806689757144, %1274
  %1277 = sub i64 %1276, 644816278572889754
  %1278 = xor i64 %1270, 0
  %1279 = xor i64 %1278, %1277
  %1280 = xor i64 %1279, %1275
  %1281 = xor i64 %1280, %1273
  %1282 = mul i64 %1269, %1281
  %1283 = trunc i64 %1282 to i8
  %1284 = icmp eq i8 %1256, %1283
  %1285 = or i1 %1253, %1284
  %1286 = select i1 %1285, i32 984876132, i32 984876141
  %1287 = xor i32 %1286, 9
  store i32 %1287, i32* %5, align 4
  %1288 = call i8** @bf17181708843024921859(i32* %5)
  %1289 = load i8*, i8** %1288, align 8
  indirectbr i8* %1289, [label %loopEnd, label %1115]

codeRepl2:                                        ; preds = %codeRepl2, %loopStart
  store i64 4070807658626890127, i64* %42, align 8
  %1290 = call i8** @lk12478154414877683305(i64* %42)
  %1291 = load i8*, i8** %1290, align 8
  %1292 = bitcast i8* %1291 to void ([19 x i32]*, i32*)*
  call void %1292([19 x i32]* %lookupTable, i32* %dispatcher)
  %1293 = load i8*, i8** %21, align 8
  %1294 = load i8, i8* %1293, align 1
  %1295 = mul i8 %1294, 2
  %1296 = or i64 %14, 42999121222721966
  %1297 = and i64 42999121222721966, %14
  %1298 = xor i64 42999121222721966, %14
  %1299 = or i64 %1297, %1298
  %1300 = or i64 %28, -5376674449235036109
  %1301 = xor i64 %28, -1
  %1302 = and i64 %1301, 7230164013716666613
  %1303 = and i64 %28, -7230164013716666614
  %1304 = or i64 %1302, %1303
  %1305 = xor i64 -3371924199403044666, %1304
  %1306 = xor i64 %28, -1
  %1307 = or i64 5376674449235036108, %1306
  %1308 = xor i64 %1307, -1
  %1309 = and i64 %1308, -1
  %1310 = or i64 %1305, %1309
  %1311 = xor i64 6203461792206037765, %1299
  %1312 = xor i64 %1311, %1310
  %1313 = xor i64 %1312, %1300
  %1314 = xor i64 %1313, %1296
  %1315 = add i64 %8, -2199472380227928397
  %1316 = and i64 -2199472380227928397, %8
  %1317 = or i64 -2199472380227928397, %8
  %1318 = add i64 %1316, %1317
  %1319 = add i64 %8, 7144062223549705388
  %1320 = sub i64 0, %8
  %1321 = add i64 -7144062223549705388, %1320
  %1322 = sub i64 0, %1321
  %1323 = xor i64 %1319, %1315
  %1324 = xor i64 %1323, -1611530073524640870
  %1325 = xor i64 %1324, %1318
  %1326 = xor i64 %1325, %1322
  %1327 = mul i64 %1314, %1326
  %1328 = trunc i64 %1327 to i8
  %1329 = mul i8 %1294, %1328
  %1330 = add i8 2, %1329
  %1331 = mul i8 %1295, %1330
  %1332 = srem i8 %1331, 4
  %1333 = icmp eq i8 %1332, 0
  %1334 = mul i8 %1294, %1294
  %1335 = mul i8 %1334, %1294
  %1336 = sub i8 %1335, 73
  %1337 = add i8 %1336, %1294
  %1338 = add i8 %1337, 73
  %1339 = srem i8 %1338, 2
  %1340 = icmp eq i8 %1339, 0
  %1341 = and i1 %1333, %1340
  %1342 = add i64 %40, -8830214032394753873
  %1343 = add i64 -4809691521818851662, %40
  %1344 = add i64 %1343, -4020522510575902211
  %1345 = add i64 %14, 2795418620290252927
  %1346 = and i64 2795418620290252927, %14
  %1347 = or i64 2795418620290252927, %14
  %1348 = add i64 %1346, %1347
  %1349 = or i64 %47, 673238118973932915
  %1350 = xor i64 %47, -1
  %1351 = and i64 673238118973932915, %1350
  %1352 = add i64 %1351, %47
  %1353 = xor i64 %1352, %1349
  %1354 = xor i64 %1353, %1344
  %1355 = xor i64 %1354, %1345
  %1356 = xor i64 %1355, %1348
  %1357 = xor i64 %1356, %1342
  %1358 = xor i64 %1357, -8050467595683177877
  %1359 = or i64 %28, 7492057270843349879
  %1360 = xor i64 %28, -1
  %1361 = and i64 7492057270843349879, %1360
  %1362 = add i64 %1361, %28
  %1363 = or i64 %45, -1196793400099690674
  %1364 = xor i64 %45, -1
  %1365 = and i64 -1196793400099690674, %1364
  %1366 = add i64 %1365, %45
  %1367 = xor i64 7294441637071684231, %1366
  %1368 = xor i64 %1367, %1359
  %1369 = xor i64 %1368, %1363
  %1370 = xor i64 %1369, %1362
  %1371 = mul i64 %1358, %1370
  %1372 = trunc i64 %1371 to i32
  %1373 = select i1 %1341, i32 984876138, i32 %1372
  %1374 = xor i32 %1373, -1
  %1375 = add i64 %8, -5992779910015128920
  %1376 = sub i64 0, %8
  %1377 = add i64 5992779910015128920, %1376
  %1378 = sub i64 0, %1377
  %1379 = or i64 %32, -5848659738779876328
  %1380 = xor i64 %32, -1
  %1381 = and i64 -5848659738779876328, %1380
  %1382 = add i64 %1381, %32
  %1383 = and i64 %45, 2084781249184042319
  %1384 = xor i64 %45, -1
  %1385 = xor i64 2084781249184042319, %1384
  %1386 = and i64 %1385, 2084781249184042319
  %1387 = xor i64 %1375, %1386
  %1388 = xor i64 %1387, 2926679964326111795
  %1389 = xor i64 %1388, %1378
  %1390 = xor i64 %1389, %1379
  %1391 = xor i64 %1390, %1382
  %1392 = xor i64 %1391, %1383
  %1393 = add i64 %40, 4385597212704957305
  %1394 = add i64 -4769078904872162034, %40
  %1395 = add i64 %1394, 9154676117577119339
  %1396 = or i64 %38, -5311728715998256438
  %1397 = and i64 -5311728715998256438, %38
  %1398 = xor i64 -5311728715998256438, %38
  %1399 = or i64 %1397, %1398
  %1400 = add i64 %38, 173652066683660962
  %1401 = add i64 6353411536808291502, %38
  %1402 = add i64 %1401, -6179759470124630540
  %1403 = xor i64 %1399, %1400
  %1404 = xor i64 %1403, -3647228418933578019
  %1405 = xor i64 %1404, %1393
  %1406 = xor i64 %1405, %1395
  %1407 = xor i64 %1406, %1396
  %1408 = xor i64 %1407, %1402
  %1409 = mul i64 %1392, %1408
  %1410 = trunc i64 %1409 to i32
  %1411 = and i32 %1374, %1410
  %1412 = and i32 %1373, -8
  %1413 = or i32 %1411, %1412
  store i32 %1413, i32* %5, align 4
  %1414 = call i8** @bf17181708843024921859(i32* %5)
  %1415 = load i8*, i8** %1414, align 8
  indirectbr i8* %1415, [label %loopEnd, label %codeRepl2]

1416:                                             ; preds = %1416, %loopStart
  %1417 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 9
  %1418 = load i32, i32* %1417, align 4
  %1419 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 7
  %1420 = load i32, i32* %1419, align 4
  %1421 = xor i32 %1418, %1420
  %1422 = and i32 %1418, %1420
  %1423 = mul i32 2, %1422
  %1424 = add i32 %1421, %1423
  %1425 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 11
  %1426 = load i32, i32* %1425, align 4
  %1427 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 0
  %1428 = load i32, i32* %1427, align 4
  %1429 = add i32 %1426, -519779910
  %1430 = sub i32 %1429, %1428
  %1431 = sub i32 %1430, -519779910
  %.reload45 = load i1, i1* %.reg2mem44, align 1
  %1432 = select i1 %.reload45, i32 %1424, i32 %1431
  store i32 %1432, i32* %dispatcher, align 4
  %1433 = load i8*, i8** %41, align 8
  %1434 = load i8, i8* %1433, align 1
  %1435 = and i8 %1434, 1
  %1436 = icmp eq i8 %1435, 1
  %1437 = mul i8 %1434, %1434
  %1438 = add i8 %1437, %1434
  %1439 = srem i8 %1438, 2
  %1440 = icmp eq i8 %1439, 0
  %1441 = or i1 %1436, %1440
  %1442 = select i1 %1441, i32 984876137, i32 984876141
  %1443 = xor i32 %1442, 4
  store i32 %1443, i32* %5, align 4
  %1444 = call i8** @bf17181708843024921859(i32* %5)
  %1445 = load i8*, i8** %1444, align 8
  indirectbr i8* %1445, [label %loopEnd, label %1416]

1446:                                             ; preds = %1446, %loopStart
  %.reload19 = load float, float* %.reg2mem18, align 4
  %.reload42 = load float*, float** %.reg2mem41, align 8
  store float %.reload19, float* %.reload42, align 4, !tbaa !10
  %1447 = load i8*, i8** @CHARS, align 8, !tbaa !14
  %.reload35 = load i32, i32* %.reg2mem33, align 4
  %1448 = icmp sgt i32 %.reload35, 0
  %.reload34 = load i32, i32* %.reg2mem33, align 4
  %1449 = add i64 %24, -6600354867800328836
  %1450 = sub i64 0, %24
  %1451 = sub i64 -6600354867800328836, %1450
  %1452 = add i64 %28, 3087899206591321948
  %1453 = sub i64 0, %28
  %1454 = add i64 -3087899206591321948, %1453
  %1455 = sub i64 0, %1454
  %1456 = xor i64 %1451, -46950279193397225
  %1457 = xor i64 %1456, %1452
  %1458 = xor i64 %1457, %1449
  %1459 = xor i64 %1458, %1455
  %1460 = or i64 %47, 3870641205093813031
  %1461 = xor i64 %47, -1
  %1462 = and i64 %1461, 4665183682259200737
  %1463 = and i64 %47, -4665183682259200738
  %1464 = or i64 %1462, %1463
  %1465 = xor i64 8433351477385847238, %1464
  %1466 = xor i64 %47, -1
  %1467 = or i64 -3870641205093813032, %1466
  %1468 = xor i64 %1467, -1
  %1469 = and i64 %1468, -1
  %1470 = or i64 %1465, %1469
  %1471 = and i64 %49, -4340566933882549336
  %1472 = xor i64 %49, -1
  %1473 = or i64 4340566933882549335, %1472
  %1474 = xor i64 %1473, -1
  %1475 = and i64 %1474, -1
  %1476 = add i64 %28, -1008923586129216881
  %1477 = sub i64 0, %28
  %1478 = sub i64 -1008923586129216881, %1477
  %1479 = xor i64 0, %1460
  %1480 = xor i64 %1479, %1470
  %1481 = xor i64 %1480, %1471
  %1482 = xor i64 %1481, %1476
  %1483 = xor i64 %1482, %1478
  %1484 = xor i64 %1483, %1475
  %1485 = mul i64 %1459, %1484
  %1486 = trunc i64 %1485 to i32
  %1487 = select i1 %1448, i32 %.reload34, i32 %1486
  %1488 = zext i32 %1487 to i64
  %1489 = getelementptr inbounds i8, i8* %1447, i64 %1488
  %1490 = load i8, i8* %1489, align 1, !tbaa !16
  %.reload39 = load i64, i64* %.reg2mem38, align 8
  %1491 = getelementptr inbounds i8, i8* %3, i64 %.reload39
  store i8 %1490, i8* %1491, align 1, !tbaa !16
  %1492 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 9
  %1493 = load i32, i32* %1492, align 4
  %1494 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 8
  %1495 = load i32, i32* %1494, align 4
  %1496 = and i32 %1493, %1495
  %1497 = or i32 %1493, %1495
  %1498 = add i32 %1496, %1497
  store i32 %1498, i32* %dispatcher, align 4
  %1499 = load i8*, i8** %29, align 8
  %1500 = load i8, i8* %1499, align 1
  %1501 = xor i8 %1500, -1
  %1502 = or i8 %1501, 1
  %1503 = xor i8 %1500, -1
  %1504 = sub i8 %1502, %1503
  %1505 = icmp eq i8 %1504, 1
  %1506 = mul i8 %1500, %1500
  %1507 = and i8 %1506, %1500
  %1508 = or i8 %1506, %1500
  %1509 = add i8 %1507, %1508
  %1510 = srem i8 %1509, 2
  %1511 = icmp eq i8 %1510, 0
  %1512 = or i1 %1505, %1511
  %1513 = select i1 %1512, i32 984876142, i32 984876141
  %1514 = xor i32 %1513, 3
  store i32 %1514, i32* %5, align 4
  %1515 = call i8** @bf17181708843024921859(i32* %5)
  %1516 = load i8*, i8** %1515, align 8
  indirectbr i8* %1516, [label %loopEnd, label %1446]

1517:                                             ; preds = %1517, %loopStart
  %.reload15 = load double, double* %.reg2mem14, align 8
  %1518 = fadd double %.reload15, 2.000000e-02
  %1519 = fptrunc double %1518 to float
  %1520 = fpext float %1519 to double
  %1521 = fcmp olt double %1520, 6.280000e+00
  %1522 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 2
  %1523 = load i32, i32* %1522, align 4
  %1524 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 0
  %1525 = load i32, i32* %1524, align 4
  %1526 = sub i32 %1523, %1525
  %1527 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 15
  %1528 = load i32, i32* %1527, align 4
  %1529 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %1530 = load i32, i32* %1529, align 4
  %1531 = srem i32 %1528, %1530
  %1532 = select i1 %1521, i32 %1526, i32 %1531
  store i32 %1532, i32* %dispatcher, align 4
  store double %1520, double* %.reg2mem49, align 8
  %1533 = load i8*, i8** %7, align 8
  %1534 = load i8, i8* %1533, align 1
  %1535 = mul i8 %1534, 2
  %1536 = mul i8 %1534, 2
  %1537 = add i8 2, %1536
  %1538 = mul i8 %1535, %1537
  %1539 = srem i8 %1538, 4
  %1540 = icmp eq i8 %1539, 0
  %1541 = mul i8 %1534, %1534
  %1542 = mul i8 %1541, %1534
  %1543 = add i8 %1542, %1534
  %1544 = srem i8 %1543, 2
  %1545 = icmp eq i8 %1544, 0
  %1546 = and i1 %1540, %1545
  %1547 = add i64 %12, 4335162772404744818
  %1548 = add i64 5946336788263397814, %12
  %1549 = sub i64 %1548, 1611174015858652996
  %1550 = add i64 %24, 1087461431385676889
  %1551 = sub i64 0, %24
  %1552 = add i64 -1087461431385676889, %1551
  %1553 = sub i64 0, %1552
  %1554 = add i64 %18, -5352076429633441838
  %1555 = and i64 -5352076429633441838, %18
  %1556 = or i64 -5352076429633441838, %18
  %1557 = add i64 %1555, %1556
  %1558 = xor i64 %1550, 9099123411591376157
  %1559 = xor i64 %1558, %1553
  %1560 = xor i64 %1559, %1547
  %1561 = xor i64 %1560, %1549
  %1562 = xor i64 %1561, %1554
  %1563 = xor i64 %1562, %1557
  %1564 = add i64 %43, 825577825154536036
  %1565 = xor i64 825577825154536036, %43
  %1566 = and i64 825577825154536036, %43
  %1567 = mul i64 2, %1566
  %1568 = add i64 %1565, %1567
  %1569 = and i64 %38, -7450132939135621339
  %1570 = xor i64 %38, -1
  %1571 = xor i64 -7450132939135621339, %1570
  %1572 = and i64 %1571, -7450132939135621339
  %1573 = xor i64 8847646911956746050, %1569
  %1574 = xor i64 %1573, %1568
  %1575 = xor i64 %1574, %1564
  %1576 = xor i64 %1575, %1572
  %1577 = mul i64 %1563, %1576
  %1578 = trunc i64 %1577 to i32
  %1579 = select i1 %1546, i32 %1578, i32 984876141
  %1580 = xor i32 %1579, -1
  %1581 = and i32 %1580, 1879674405
  %1582 = and i32 %1579, -1879674406
  %1583 = or i32 %1581, %1582
  %1584 = xor i32 %1583, 1879674418
  store i32 %1584, i32* %5, align 4
  %1585 = call i8** @bf17181708843024921859(i32* %5)
  %1586 = load i8*, i8** %1585, align 8
  indirectbr i8* %1586, [label %loopEnd, label %1517]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %1587 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 16
  %1588 = load i32, i32* %1587, align 4
  %1589 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %1590 = load i32, i32* %1589, align 4
  %1591 = srem i32 %1588, %1590
  store i32 %1591, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem51, align 4
  %1592 = load i8*, i8** %11, align 8
  %1593 = load i8, i8* %1592, align 1
  %1594 = and i64 %45, 8485226920203018538
  %1595 = or i64 -8485226920203018539, %45
  %1596 = sub i64 %1595, -8485226920203018539
  %1597 = and i64 %8, -3041955933219904206
  %1598 = xor i64 %8, -1
  %1599 = xor i64 -3041955933219904206, %1598
  %1600 = and i64 %1599, -3041955933219904206
  %1601 = xor i64 5836078496554002291, %1596
  %1602 = xor i64 %1601, %1594
  %1603 = xor i64 %1602, %1600
  %1604 = xor i64 %1603, %1597
  %1605 = add i64 %49, 578718246318329198
  %1606 = xor i64 578718246318329198, %49
  %1607 = and i64 578718246318329198, %49
  %1608 = mul i64 2, %1607
  %1609 = add i64 %1606, %1608
  %1610 = add i64 %45, 3532502320227815441
  %1611 = sub i64 0, %45
  %1612 = sub i64 3532502320227815441, %1611
  %1613 = and i64 %24, 5503055719574824515
  %1614 = xor i64 %24, -1
  %1615 = or i64 -5503055719574824516, %1614
  %1616 = xor i64 %1615, -1
  %1617 = and i64 %1616, -1
  %1618 = xor i64 %1605, %1613
  %1619 = xor i64 %1618, %1610
  %1620 = xor i64 %1619, %1612
  %1621 = xor i64 %1620, -8963381329965346934
  %1622 = xor i64 %1621, %1609
  %1623 = xor i64 %1622, %1617
  %1624 = mul i64 %1604, %1623
  %1625 = trunc i64 %1624 to i8
  %1626 = xor i8 %1593, %1625
  %1627 = and i8 %1626, %1593
  %1628 = icmp eq i8 %1627, 0
  %1629 = mul i8 %1593, %1593
  %1630 = add i8 %1629, %1593
  %1631 = mul i8 %1630, 3
  %1632 = srem i8 %1631, 2
  %1633 = add i64 %10, 8295461378616148350
  %1634 = add i64 7406847133500116892, %10
  %1635 = add i64 %1634, 888614245116031458
  %1636 = and i64 %30, -7215009650801049962
  %1637 = xor i64 %30, -1
  %1638 = or i64 7215009650801049961, %1637
  %1639 = xor i64 %1638, -1
  %1640 = and i64 %1639, -1
  %1641 = and i64 %34, -4069190137872413454
  %1642 = xor i64 %34, -1
  %1643 = xor i64 -4069190137872413454, %1642
  %1644 = and i64 %1643, -4069190137872413454
  %1645 = xor i64 -1758973122404908253, %1644
  %1646 = xor i64 %1645, %1640
  %1647 = xor i64 %1646, %1641
  %1648 = xor i64 %1647, %1635
  %1649 = xor i64 %1648, %1636
  %1650 = xor i64 %1649, %1633
  %1651 = or i64 %20, -5840721156903942109
  %1652 = xor i64 %20, -1
  %1653 = and i64 -5840721156903942109, %1652
  %1654 = add i64 %1653, %20
  %1655 = add i64 %20, -8339849712548004865
  %1656 = add i64 -5046012302169628610, %20
  %1657 = add i64 %1656, -3293837410378376255
  %1658 = xor i64 %1657, %1651
  %1659 = xor i64 %1658, %1654
  %1660 = xor i64 %1659, 0
  %1661 = xor i64 %1660, %1655
  %1662 = mul i64 %1650, %1661
  %1663 = trunc i64 %1662 to i8
  %1664 = icmp eq i8 %1632, %1663
  %1665 = or i1 %1628, %1664
  %1666 = select i1 %1665, i32 984876136, i32 984876141
  %1667 = add i64 %40, -3930834134078299656
  %1668 = sub i64 0, %40
  %1669 = add i64 3930834134078299656, %1668
  %1670 = sub i64 0, %1669
  %1671 = and i64 %16, -869669791874509204
  %1672 = xor i64 %16, -1
  %1673 = xor i64 -869669791874509204, %1672
  %1674 = and i64 %1673, -869669791874509204
  %1675 = or i64 %24, 9099834608490052132
  %1676 = xor i64 %24, -1
  %1677 = and i64 %1676, 8129710975798819746
  %1678 = and i64 %24, -8129710975798819747
  %1679 = or i64 %1677, %1678
  %1680 = xor i64 1052595819859919238, %1679
  %1681 = xor i64 %24, -1
  %1682 = or i64 -9099834608490052133, %1681
  %1683 = xor i64 %1682, -1
  %1684 = and i64 %1683, -1
  %1685 = or i64 %1680, %1684
  %1686 = xor i64 %1671, 4064198786024504981
  %1687 = xor i64 %1686, %1667
  %1688 = xor i64 %1687, %1670
  %1689 = xor i64 %1688, %1674
  %1690 = xor i64 %1689, %1685
  %1691 = xor i64 %1690, %1675
  %1692 = and i64 %38, -7843027319120090698
  %1693 = or i64 7843027319120090697, %38
  %1694 = sub i64 %1693, 7843027319120090697
  %1695 = add i64 %16, 2165260520264502540
  %1696 = sub i64 0, %16
  %1697 = sub i64 2165260520264502540, %1696
  %1698 = xor i64 %1695, 8890919550476788547
  %1699 = xor i64 %1698, %1692
  %1700 = xor i64 %1699, %1697
  %1701 = xor i64 %1700, %1694
  %1702 = mul i64 %1691, %1701
  %1703 = trunc i64 %1702 to i32
  %1704 = xor i32 %1666, %1703
  %1705 = and i32 %1704, -1230036872
  %1706 = or i64 %14, 4926457455397347440
  %1707 = xor i64 %14, -1
  %1708 = and i64 4926457455397347440, %1707
  %1709 = add i64 %1708, %14
  %1710 = or i64 %20, -2691960664070256251
  %1711 = xor i64 %20, -1
  %1712 = and i64 -2691960664070256251, %1711
  %1713 = add i64 %1712, %20
  %1714 = and i64 %43, -4319753846068567332
  %1715 = xor i64 %43, -1
  %1716 = xor i64 -4319753846068567332, %1715
  %1717 = and i64 %1716, -4319753846068567332
  %1718 = xor i64 %1713, 7617668873336446769
  %1719 = xor i64 %1718, %1710
  %1720 = xor i64 %1719, %1709
  %1721 = xor i64 %1720, %1706
  %1722 = xor i64 %1721, %1717
  %1723 = xor i64 %1722, %1714
  %1724 = or i64 %49, -445858171544103556
  %1725 = xor i64 %49, -1
  %1726 = and i64 %1725, -7970401414986583988
  %1727 = and i64 %49, 7970401414986583987
  %1728 = or i64 %1726, %1727
  %1729 = xor i64 7542557951662007600, %1728
  %1730 = xor i64 %49, -1
  %1731 = or i64 445858171544103555, %1730
  %1732 = xor i64 %1731, -1
  %1733 = and i64 %1732, -1
  %1734 = or i64 %1729, %1733
  %1735 = add i64 %43, 3929738188728143454
  %1736 = add i64 6973156930452718517, %43
  %1737 = sub i64 %1736, 3043418741724575063
  %1738 = xor i64 %1734, %1724
  %1739 = xor i64 %1738, %1735
  %1740 = xor i64 %1739, %1737
  %1741 = xor i64 %1740, 569410991793679415
  %1742 = mul i64 %1723, %1741
  %1743 = trunc i64 %1742 to i32
  %1744 = and i32 %1666, %1743
  %1745 = or i32 %1705, %1744
  %1746 = xor i32 %1745, -1230036867
  store i32 %1746, i32* %5, align 4
  %1747 = call i8** @bf17181708843024921859(i32* %5)
  %1748 = load i8*, i8** %1747, align 8
  indirectbr i8* %1748, [label %loopEnd, label %.loopexit]

1749:                                             ; preds = %loopStart
  %.reload52 = load i32, i32* %.reg2mem51, align 4
  ret i32 %.reload52

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  store i64 4070807658626890124, i64* %42, align 8
  %1750 = call i8** @lk12478154414877683305(i64* %42)
  %1751 = load i8*, i8** %1750, align 8
  %1752 = bitcast i8* %1751 to void ([19 x i32]*, i32*)*
  call void %1752([19 x i32]* %lookupTable, i32* %dispatcher)
  %1753 = load i8*, i8** %41, align 8
  %1754 = load i8, i8* %1753, align 1
  %1755 = mul i8 %1754, %1754
  %1756 = add i8 %1755, %1754
  %1757 = mul i8 %1756, 3
  %1758 = srem i8 %1757, 2
  %1759 = icmp eq i8 %1758, 0
  %1760 = mul i8 %1754, %1754
  %1761 = add i8 %1760, %1754
  %1762 = srem i8 %1761, 2
  %1763 = icmp eq i8 %1762, 0
  %1764 = xor i1 %1763, true
  %1765 = xor i1 %1759, %1764
  %1766 = and i1 %1765, %1759
  %1767 = select i1 %1766, i32 984876129, i32 984876129
  %1768 = xor i32 %1767, 0
  store i32 %1768, i32* %5, align 4
  %1769 = call i8** @bf17181708843024921859(i32* %5)
  %1770 = load i8*, i8** %1769, align 8
  indirectbr i8* %1770, [label %EntryBasicBlockSplit, label %codeRepl3]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1771 = load i8*, i8** %29, align 8
  %1772 = load i8, i8* %1771, align 1
  %1773 = and i64 %28, -7379994315352407737
  %1774 = xor i64 %28, -1
  %1775 = xor i64 -7379994315352407737, %1774
  %1776 = and i64 %1775, -7379994315352407737
  %1777 = sext i32 %dispatcher1 to i64
  %1778 = and i64 %1777, -8080807307901224138
  %1779 = xor i64 %1777, -1
  %1780 = or i64 8080807307901224137, %1779
  %1781 = xor i64 %1780, -1
  %1782 = and i64 %1781, -1
  %1783 = xor i64 2270711605379329243, %1782
  %1784 = xor i64 %1783, %1776
  %1785 = xor i64 %1784, %1778
  %1786 = xor i64 %1785, %1773
  %1787 = or i64 %40, 8175123395704469649
  %1788 = and i64 8175123395704469649, %40
  %1789 = xor i64 8175123395704469649, %40
  %1790 = or i64 %1788, %1789
  %1791 = and i64 %14, 599127160241014513
  %1792 = xor i64 %14, -1
  %1793 = xor i64 599127160241014513, %1792
  %1794 = and i64 %1793, 599127160241014513
  %1795 = xor i64 %1790, 1384841210515971750
  %1796 = xor i64 %1795, %1791
  %1797 = xor i64 %1796, %1794
  %1798 = xor i64 %1797, %1787
  %1799 = mul i64 %1786, %1798
  %1800 = trunc i64 %1799 to i8
  %1801 = mul i8 %1772, %1800
  %1802 = mul i8 %1772, 2
  %1803 = add i8 2, %1802
  %1804 = mul i8 %1801, %1803
  %1805 = srem i8 %1804, 4
  %1806 = add i64 %36, -4234802662190861893
  %1807 = add i64 -5680193483095489379, %36
  %1808 = sub i64 %1807, -1445390820904627486
  %1809 = add i64 %40, 2704636537700744662
  %1810 = sub i64 0, %40
  %1811 = sub i64 2704636537700744662, %1810
  %1812 = or i64 %45, -5200378614880749553
  %1813 = xor i64 %45, -1
  %1814 = and i64 -5200378614880749553, %1813
  %1815 = add i64 %1814, %45
  %1816 = xor i64 %1809, %1815
  %1817 = xor i64 %1816, 7989979019203851119
  %1818 = xor i64 %1817, %1811
  %1819 = xor i64 %1818, %1812
  %1820 = xor i64 %1819, %1806
  %1821 = xor i64 %1820, %1808
  %1822 = or i64 %26, -2511270726482873392
  %1823 = and i64 -2511270726482873392, %26
  %1824 = xor i64 -2511270726482873392, %26
  %1825 = or i64 %1823, %1824
  %1826 = and i64 %43, -1210736025414046656
  %1827 = xor i64 %43, -1
  %1828 = or i64 1210736025414046655, %1827
  %1829 = xor i64 %1828, -1
  %1830 = and i64 %1829, -1
  %1831 = xor i64 0, %1825
  %1832 = xor i64 %1831, %1822
  %1833 = xor i64 %1832, %1830
  %1834 = xor i64 %1833, %1826
  %1835 = mul i64 %1821, %1834
  %1836 = trunc i64 %1835 to i8
  %1837 = icmp eq i8 %1805, %1836
  %1838 = mul i8 %1772, %1772
  %1839 = xor i8 %1838, %1772
  %1840 = and i8 %1838, %1772
  %1841 = mul i8 2, %1840
  %1842 = add i8 %1839, %1841
  %1843 = mul i8 39, %1842
  %1844 = add i8 23, %1843
  %1845 = mul i8 -105, %1844
  %1846 = add i8 111, %1845
  %1847 = add i64 %6, -2841458963926575345
  %1848 = xor i64 -2841458963926575345, %6
  %1849 = and i64 -2841458963926575345, %6
  %1850 = mul i64 2, %1849
  %1851 = add i64 %1848, %1850
  %1852 = sext i32 %dispatcher1 to i64
  %1853 = and i64 %1852, 2781438150478910047
  %1854 = xor i64 %1852, -1
  %1855 = xor i64 2781438150478910047, %1854
  %1856 = and i64 %1855, 2781438150478910047
  %1857 = xor i64 123110834745570737, %1856
  %1858 = xor i64 %1857, %1853
  %1859 = xor i64 %1858, %1851
  %1860 = xor i64 %1859, %1847
  %1861 = or i64 %12, -701639324771511239
  %1862 = xor i64 %12, -1
  %1863 = and i64 -701639324771511239, %1862
  %1864 = add i64 %1863, %12
  %1865 = add i64 %47, -2508675635801180394
  %1866 = sub i64 0, %47
  %1867 = sub i64 -2508675635801180394, %1866
  %1868 = and i64 %8, 8072563809781026436
  %1869 = xor i64 %8, -1
  %1870 = xor i64 8072563809781026436, %1869
  %1871 = and i64 %1870, 8072563809781026436
  %1872 = xor i64 %1864, -1579933605071919454
  %1873 = xor i64 %1872, %1868
  %1874 = xor i64 %1873, %1867
  %1875 = xor i64 %1874, %1861
  %1876 = xor i64 %1875, %1871
  %1877 = xor i64 %1876, %1865
  %1878 = mul i64 %1860, %1877
  %1879 = trunc i64 %1878 to i8
  %1880 = srem i8 %1846, %1879
  %1881 = icmp eq i8 %1880, 0
  %1882 = or i1 %1837, %1881
  %1883 = and i64 %38, 8123503627253402572
  %1884 = xor i64 %38, -1
  %1885 = xor i64 8123503627253402572, %1884
  %1886 = and i64 %1885, 8123503627253402572
  %1887 = add i64 %36, -4230270137768489401
  %1888 = sub i64 0, %36
  %1889 = add i64 4230270137768489401, %1888
  %1890 = sub i64 0, %1889
  %1891 = or i64 %36, -4119309199938315451
  %1892 = and i64 -4119309199938315451, %36
  %1893 = xor i64 -4119309199938315451, %36
  %1894 = or i64 %1892, %1893
  %1895 = xor i64 %1894, %1887
  %1896 = xor i64 %1895, %1890
  %1897 = xor i64 %1896, %1886
  %1898 = xor i64 %1897, %1883
  %1899 = xor i64 %1898, %1891
  %1900 = xor i64 %1899, -2812034348979893801
  %1901 = and i64 %45, 3519126052611248961
  %1902 = or i64 -3519126052611248962, %45
  %1903 = sub i64 %1902, -3519126052611248962
  %1904 = or i64 %14, 1086052328594675366
  %1905 = xor i64 %14, -1
  %1906 = and i64 1086052328594675366, %1905
  %1907 = add i64 %1906, %14
  %1908 = or i64 %26, 9171572185533386546
  %1909 = and i64 9171572185533386546, %26
  %1910 = xor i64 9171572185533386546, %26
  %1911 = or i64 %1909, %1910
  %1912 = xor i64 3544440411387773787, %1908
  %1913 = xor i64 %1912, %1911
  %1914 = xor i64 %1913, %1907
  %1915 = xor i64 %1914, %1903
  %1916 = xor i64 %1915, %1901
  %1917 = xor i64 %1916, %1904
  %1918 = mul i64 %1900, %1917
  %1919 = trunc i64 %1918 to i32
  %1920 = select i1 %1882, i32 984876133, i32 %1919
  %1921 = and i64 %24, -7106216822753468239
  %1922 = xor i64 %24, -1
  %1923 = or i64 7106216822753468238, %1922
  %1924 = xor i64 %1923, -1
  %1925 = and i64 %1924, -1
  %1926 = add i64 %18, -6678605659923443140
  %1927 = sub i64 0, %18
  %1928 = add i64 6678605659923443140, %1927
  %1929 = sub i64 0, %1928
  %1930 = and i64 %43, 5066058966109532043
  %1931 = xor i64 %43, -1
  %1932 = xor i64 5066058966109532043, %1931
  %1933 = and i64 %1932, 5066058966109532043
  %1934 = xor i64 %1930, %1933
  %1935 = xor i64 %1934, 6013366708512648155
  %1936 = xor i64 %1935, %1925
  %1937 = xor i64 %1936, %1926
  %1938 = xor i64 %1937, %1921
  %1939 = xor i64 %1938, %1929
  %1940 = and i64 %16, 1318711899269651553
  %1941 = or i64 -1318711899269651554, %16
  %1942 = sub i64 %1941, -1318711899269651554
  %1943 = and i64 %12, -1177168081003417598
  %1944 = xor i64 %12, -1
  %1945 = xor i64 -1177168081003417598, %1944
  %1946 = and i64 %1945, -1177168081003417598
  %1947 = xor i64 %1940, %1942
  %1948 = xor i64 %1947, -4879084623732358504
  %1949 = xor i64 %1948, %1943
  %1950 = xor i64 %1949, %1946
  %1951 = mul i64 %1939, %1950
  %1952 = trunc i64 %1951 to i32
  %1953 = or i32 %1920, %1952
  %1954 = add i64 %22, -30764648391287347
  %1955 = xor i64 -30764648391287347, %22
  %1956 = and i64 -30764648391287347, %22
  %1957 = mul i64 2, %1956
  %1958 = add i64 %1955, %1957
  %1959 = or i64 %49, -4599689633544771391
  %1960 = and i64 -4599689633544771391, %49
  %1961 = xor i64 -4599689633544771391, %49
  %1962 = or i64 %1960, %1961
  %1963 = xor i64 %1962, 574980703940720903
  %1964 = xor i64 %1963, %1958
  %1965 = xor i64 %1964, %1954
  %1966 = xor i64 %1965, %1959
  %1967 = and i64 %43, 2020163219782618123
  %1968 = or i64 -2020163219782618124, %43
  %1969 = sub i64 %1968, -2020163219782618124
  %1970 = sext i32 %dispatcher1 to i64
  %1971 = add i64 %1970, 7226491250591138516
  %1972 = and i64 7226491250591138516, %1970
  %1973 = or i64 7226491250591138516, %1970
  %1974 = add i64 %1972, %1973
  %1975 = or i64 %6, 111786503822487275
  %1976 = xor i64 %6, -1
  %1977 = and i64 %1976, 7230449495687700099
  %1978 = and i64 %6, -7230449495687700100
  %1979 = or i64 %1977, %1978
  %1980 = xor i64 7339339871923449960, %1979
  %1981 = xor i64 %6, -1
  %1982 = or i64 -111786503822487276, %1981
  %1983 = xor i64 %1982, -1
  %1984 = and i64 %1983, -1
  %1985 = or i64 %1980, %1984
  %1986 = xor i64 %1985, %1967
  %1987 = xor i64 %1986, %1975
  %1988 = xor i64 %1987, -7694522548638767688
  %1989 = xor i64 %1988, %1969
  %1990 = xor i64 %1989, %1971
  %1991 = xor i64 %1990, %1974
  %1992 = mul i64 %1966, %1991
  %1993 = trunc i64 %1992 to i32
  %1994 = and i32 %1920, %1993
  %1995 = sub i32 %1953, %1994
  store i32 %1995, i32* %5, align 4
  %1996 = call i8** @bf17181708843024921859(i32* %5)
  %1997 = load i8*, i8** %1996, align 8
  indirectbr i8* %1997, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.loopexit, %1517, %1446, %1416, %codeRepl2, %1115, %946, %815, %codeRepl1, %562, %189, %codeRepl, %EntryBasicBlockSplit
  %1998 = load i8*, i8** %21, align 8
  %1999 = load i8, i8* %1998, align 1
  %2000 = xor i8 %1999, -1
  %2001 = or i8 %2000, -2
  %2002 = xor i8 %2001, -1
  %2003 = and i8 %2002, -1
  %2004 = icmp eq i8 %2003, 1
  %2005 = mul i8 %1999, %1999
  %2006 = add i8 %2005, %1999
  %2007 = srem i8 %2006, 2
  %2008 = icmp eq i8 %2007, 0
  %2009 = or i1 %2004, %2008
  %2010 = sext i32 %dispatcher1 to i64
  %2011 = and i64 %2010, 1861115135915921799
  %2012 = xor i64 %2010, -1
  %2013 = or i64 -1861115135915921800, %2012
  %2014 = xor i64 %2013, -1
  %2015 = and i64 %2014, -1
  %2016 = and i64 %32, 1479701257801304979
  %2017 = xor i64 %32, -1
  %2018 = xor i64 1479701257801304979, %2017
  %2019 = and i64 %2018, 1479701257801304979
  %2020 = add i64 %32, 2655770684529884305
  %2021 = add i64 -176500778262440204, %32
  %2022 = add i64 %2021, 2832271462792324509
  %2023 = xor i64 %2011, -4731139768642977483
  %2024 = xor i64 %2023, %2016
  %2025 = xor i64 %2024, %2020
  %2026 = xor i64 %2025, %2015
  %2027 = xor i64 %2026, %2022
  %2028 = xor i64 %2027, %2019
  %2029 = add i64 %20, -120571543569170593
  %2030 = xor i64 -120571543569170593, %20
  %2031 = and i64 -120571543569170593, %20
  %2032 = mul i64 2, %2031
  %2033 = add i64 %2030, %2032
  %2034 = add i64 %8, -2491848266994142288
  %2035 = sub i64 0, %8
  %2036 = sub i64 -2491848266994142288, %2035
  %2037 = add i64 %6, 5342431289452749723
  %2038 = add i64 -2729097270619031661, %6
  %2039 = add i64 %2038, 8071528560071781384
  %2040 = xor i64 %2036, %2039
  %2041 = xor i64 %2040, %2029
  %2042 = xor i64 %2041, %2037
  %2043 = xor i64 %2042, 4610433487698957551
  %2044 = xor i64 %2043, %2034
  %2045 = xor i64 %2044, %2033
  %2046 = mul i64 %2028, %2045
  %2047 = trunc i64 %2046 to i32
  %2048 = select i1 %2009, i32 984876143, i32 %2047
  %2049 = xor i32 %2048, 20
  store i32 %2049, i32* %5, align 4
  %2050 = call i8** @bf17181708843024921859(i32* %5)
  %2051 = load i8*, i8** %2050, align 8
  indirectbr i8* %2051, [label %loopStart, label %loopEnd]
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double) #7

declare i32 @"\01_usleep"(i32) local_unnamed_addr #8

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: mustprogress nofree noinline norecurse nounwind ssp uwtable
define internal void @update.EntryBasicBlockSplit(i1* %.reg2mem, i1* %.reg2mem2, [8 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem4) #10 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable627280723735628316, i32 0, i64 %1
  store i8* blockaddress(@update.EntryBasicBlockSplit, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable627280723735628316, i32 0, i64 %3
  store i8* blockaddress(@update.EntryBasicBlockSplit, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable627280723735628316, i32 0, i64 %5
  store i8* blockaddress(@update.EntryBasicBlockSplit, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2137045860480766185, i32 0, i64 %8
  store i8* bitcast (void (i32*)* @update.EntryBasicBlockSplit.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf17581931123197219510(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %EntryBasicBlockSplit]

EntryBasicBlockSplit:                             ; preds = %EntryBasicBlockSplit, %newFuncRoot
  %.reload = load i1, i1* %.reg2mem, align 1
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %12 = select i1 %.reload, i1 true, i1 %.reload3
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %14, %16
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %19, 1362703824
  %23 = sub i32 %22, %21
  %24 = sub i32 %23, 1362703824
  %25 = select i1 %12, i32 %17, i32 %24
  store i32 %25, i32* %dispatcher, align 4
  %26 = load i8*, i8** %2, align 8
  %27 = load i8, i8* %26, align 1
  %28 = mul i8 %27, %27
  %29 = add i8 %28, %27
  %30 = mul i8 %29, 3
  %31 = srem i8 %30, 2
  %32 = icmp eq i8 %31, 0
  %33 = mul i8 %27, %27
  %34 = add i8 %33, %27
  %35 = srem i8 %34, 2
  %36 = icmp eq i8 %35, 0
  %37 = and i1 %32, %36
  %38 = select i1 %37, i32 984876138, i32 984876138
  %39 = add i64 %3, 1329600063216102801
  %40 = sub i64 0, %3
  %41 = add i64 -1329600063216102801, %40
  %42 = sub i64 0, %41
  %43 = or i64 %1, 9190199112118762881
  %44 = xor i64 %1, -1
  %45 = and i64 9190199112118762881, %44
  %46 = add i64 %45, %1
  %47 = add i64 %5, -2295664865734977525
  %48 = and i64 -2295664865734977525, %5
  %49 = or i64 -2295664865734977525, %5
  %50 = add i64 %48, %49
  %51 = xor i64 %47, %39
  %52 = xor i64 %51, %46
  %53 = xor i64 %52, 6511737510219474019
  %54 = xor i64 %53, %43
  %55 = xor i64 %54, %42
  %56 = xor i64 %55, %50
  %57 = or i64 %8, -3835221866335510446
  %58 = xor i64 %8, -1
  %59 = and i64 -3835221866335510446, %58
  %60 = add i64 %59, %8
  %61 = or i64 %3, -3905938523700392595
  %62 = xor i64 %3, -1
  %63 = and i64 -3905938523700392595, %62
  %64 = add i64 %63, %3
  %65 = or i64 %5, -8621549519921847226
  %66 = xor i64 %5, -1
  %67 = and i64 %66, 3502388727818225452
  %68 = and i64 %5, -3502388727818225453
  %69 = or i64 %67, %68
  %70 = xor i64 -5133855505786182806, %69
  %71 = xor i64 %5, -1
  %72 = or i64 8621549519921847225, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = or i64 %70, %74
  %76 = xor i64 %75, %57
  %77 = xor i64 %76, %64
  %78 = xor i64 %77, %65
  %79 = xor i64 %78, %61
  %80 = xor i64 %79, %60
  %81 = xor i64 %80, 0
  %82 = mul i64 %56, %81
  %83 = trunc i64 %82 to i32
  %84 = xor i32 %38, %83
  store i32 %84, i32* %0, align 4
  %85 = call i8** @bf17581931123197219510(i32* %0)
  %86 = load i8*, i8** %85, align 8
  indirectbr i8* %86, [label %codeRepl, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %EntryBasicBlockSplit
  store i64 4070807658626890127, i64* %7, align 8
  %87 = call i8** @lk15516825027481801371(i64* %7)
  %88 = load i8*, i8** %87, align 8
  %89 = bitcast i8* %88 to void (i32*)*
  call void %89(i32* %.reg2mem4)
  %90 = load i8*, i8** %4, align 8
  %91 = load i8, i8* %90, align 1
  %92 = xor i8 %91, -1
  %93 = or i8 %92, 1
  %94 = xor i8 %91, -1
  %95 = sub i8 %93, %94
  %96 = icmp eq i8 %95, 1
  %97 = mul i8 %91, %91
  %98 = sub i8 %97, 85
  %99 = add i8 %98, %91
  %100 = add i8 %99, 85
  %101 = srem i8 %100, 2
  %102 = icmp eq i8 %101, 0
  %103 = or i1 %96, %102
  %104 = select i1 %103, i32 984876139, i32 984876136
  %105 = xor i32 %104, -1
  %106 = and i32 %105, 3
  %107 = and i32 %104, -4
  %108 = or i32 %106, %107
  store i32 %108, i32* %0, align 4
  %109 = call i8** @bf17581931123197219510(i32* %0)
  %110 = load i8*, i8** %109, align 8
  indirectbr i8* %110, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nounwind ssp uwtable
define internal void @update.extracted(float* %0, float* %1, [8 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem4) #10 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12142388729970394614, i32 0, i64 %3
  store i8* blockaddress(@update.extracted, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12142388729970394614, i32 0, i64 %5
  store i8* blockaddress(@update.extracted, %codeRepl), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876136)
  %8 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12142388729970394614, i32 0, i64 %7
  store i8* blockaddress(@update.extracted, %14), i8** %8, align 8
  %9 = alloca i64, align 8
  %10 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %11 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable16508952818686298381, i32 0, i64 %10
  store i8* bitcast (void (double, float*, float*, [8 x i32]*, i32*, i32*)* @update.extracted.extracted to i8*), i8** %11, align 8
  store i32 984876136, i32* %2, align 4
  %12 = call i8** @bf2569683251699683914(i32* %2)
  %13 = load i8*, i8** %12, align 8
  indirectbr i8* %13, [label %14]

14:                                               ; preds = %14, %newFuncRoot
  %15 = load float, float* %0, align 4, !tbaa !10
  %16 = fpext float %15 to double
  %17 = load i8*, i8** %8, align 8
  %18 = load i8, i8* %17, align 1
  %19 = add i64 %7, 5015950619373020375
  %20 = and i64 5015950619373020375, %7
  %21 = or i64 5015950619373020375, %7
  %22 = add i64 %20, %21
  %23 = or i64 %3, 3274924563613062188
  %24 = xor i64 %3, -1
  %25 = and i64 %24, -7328927543157677877
  %26 = and i64 %3, 7328927543157677876
  %27 = or i64 %25, %26
  %28 = xor i64 -5244241995234724633, %27
  %29 = xor i64 %3, -1
  %30 = or i64 -3274924563613062189, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = or i64 %28, %32
  %34 = add i64 %3, 8491963993222234885
  %35 = add i64 2716425772195370570, %3
  %36 = sub i64 %35, -5775538221026864315
  %37 = xor i64 -2214683182931788403, %23
  %38 = xor i64 %37, %34
  %39 = xor i64 %38, %19
  %40 = xor i64 %39, %36
  %41 = xor i64 %40, %22
  %42 = xor i64 %41, %33
  %43 = and i64 %5, 8099644272161245128
  %44 = or i64 -8099644272161245129, %5
  %45 = sub i64 %44, -8099644272161245129
  %46 = and i64 %3, 4239233272798009064
  %47 = or i64 -4239233272798009065, %3
  %48 = sub i64 %47, -4239233272798009065
  %49 = xor i64 %46, -122013053731047493
  %50 = xor i64 %49, %48
  %51 = xor i64 %50, %43
  %52 = xor i64 %51, %45
  %53 = mul i64 %42, %52
  %54 = trunc i64 %53 to i8
  %55 = xor i8 %18, %54
  %56 = or i8 %55, -2
  %57 = xor i8 %56, -1
  %58 = and i8 %57, -1
  %59 = icmp eq i8 %58, 1
  %60 = mul i8 %18, %18
  %61 = add i8 %60, %18
  %62 = srem i8 %61, 2
  %63 = icmp eq i8 %62, 0
  %64 = or i1 %59, %63
  %65 = select i1 %64, i32 984876138, i32 984876138
  %66 = xor i32 %65, -1
  %67 = and i32 %66, -949431318
  %68 = and i32 %65, 949431317
  %69 = or i32 %67, %68
  %70 = xor i32 %69, -949431318
  store i32 %70, i32* %2, align 4
  %71 = call i8** @bf2569683251699683914(i32* %2)
  %72 = load i8*, i8** %71, align 8
  indirectbr i8* %72, [label %codeRepl, label %14]

codeRepl:                                         ; preds = %codeRepl, %14
  store i64 4070807658626890127, i64* %9, align 8
  %73 = call i8** @lk7062456313021011374(i64* %9)
  %74 = load i8*, i8** %73, align 8
  %75 = bitcast i8* %74 to void (double, float*, float*, [8 x i32]*, i32*, i32*)*
  call void %75(double %16, float* %0, float* %1, [8 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem4)
  %76 = load i8*, i8** %6, align 8
  %77 = load i8, i8* %76, align 1
  %78 = mul i8 %77, %77
  %79 = sub i8 0, %78
  %80 = sub i8 0, %77
  %81 = add i8 %79, %80
  %82 = sub i8 0, %81
  %83 = mul i8 %82, 3
  %84 = srem i8 %83, 2
  %85 = icmp eq i8 %84, 0
  %86 = mul i8 %77, %77
  %87 = xor i8 %86, %77
  %88 = and i8 %86, %77
  %89 = mul i8 2, %88
  %90 = add i8 %87, %89
  %91 = mul i8 39, %90
  %92 = add i8 23, %91
  %93 = mul i8 -105, %92
  %94 = add i8 111, %93
  %95 = srem i8 %94, 2
  %96 = icmp eq i8 %95, 0
  %97 = and i1 %85, %96
  %98 = select i1 %97, i32 984876138, i32 984876137
  %99 = sext i32 %66 to i64
  %100 = add i64 %99, -9185723876703028187
  %101 = sub i64 0, %99
  %102 = sub i64 -9185723876703028187, %101
  %103 = sext i32 %65 to i64
  %104 = and i64 %103, 7132184215708125739
  %105 = xor i64 %103, -1
  %106 = or i64 -7132184215708125740, %105
  %107 = xor i64 %106, -1
  %108 = and i64 %107, -1
  %109 = sext i32 %66 to i64
  %110 = and i64 %109, 7961534703607656802
  %111 = xor i64 %109, -1
  %112 = xor i64 7961534703607656802, %111
  %113 = and i64 %112, 7961534703607656802
  %114 = xor i64 %108, %110
  %115 = xor i64 %114, -9002723727132195875
  %116 = xor i64 %115, %113
  %117 = xor i64 %116, %102
  %118 = xor i64 %117, %100
  %119 = xor i64 %118, %104
  %120 = sext i32 %66 to i64
  %121 = and i64 %120, 5826247162267772794
  %122 = xor i64 %120, -1
  %123 = xor i64 5826247162267772794, %122
  %124 = and i64 %123, 5826247162267772794
  %125 = or i64 %10, -5505844896974503647
  %126 = xor i64 %10, -1
  %127 = and i64 %126, -3130793074633638340
  %128 = and i64 %10, 3130793074633638339
  %129 = or i64 %127, %128
  %130 = xor i64 7429390678175874845, %129
  %131 = xor i64 %10, -1
  %132 = or i64 5505844896974503646, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = or i64 %130, %134
  %136 = or i64 %5, 2303390963823887117
  %137 = and i64 2303390963823887117, %5
  %138 = xor i64 2303390963823887117, %5
  %139 = or i64 %137, %138
  %140 = xor i64 %139, %136
  %141 = xor i64 %140, 3669232890280711051
  %142 = xor i64 %141, %121
  %143 = xor i64 %142, %125
  %144 = xor i64 %143, %124
  %145 = xor i64 %144, %135
  %146 = mul i64 %119, %145
  %147 = trunc i64 %146 to i32
  %148 = xor i32 %98, %147
  %149 = and i32 %148, -1885439568
  %150 = or i64 %5, 6390826084544861123
  %151 = xor i64 %5, -1
  %152 = and i64 6390826084544861123, %151
  %153 = add i64 %152, %5
  %154 = add i64 %5, -7058012521520280426
  %155 = sub i64 0, %5
  %156 = add i64 7058012521520280426, %155
  %157 = sub i64 0, %156
  %158 = sext i8 %61 to i64
  %159 = add i64 %158, 34093265024101479
  %160 = add i64 2297550923026786891, %158
  %161 = add i64 %160, -2263457658002685412
  %162 = xor i64 %150, %154
  %163 = xor i64 %162, %153
  %164 = xor i64 %163, %161
  %165 = xor i64 %164, %157
  %166 = xor i64 %165, %159
  %167 = xor i64 %166, -4437907113874133925
  %168 = and i64 %10, 6907448114642008832
  %169 = xor i64 %10, -1
  %170 = xor i64 6907448114642008832, %169
  %171 = and i64 %170, 6907448114642008832
  %172 = sext i8 %62 to i64
  %173 = and i64 %172, 6712152119894958049
  %174 = xor i64 %172, -1
  %175 = xor i64 6712152119894958049, %174
  %176 = and i64 %175, 6712152119894958049
  %177 = sext i8 %57 to i64
  %178 = and i64 %177, -2543748162028524039
  %179 = or i64 2543748162028524038, %177
  %180 = sub i64 %179, 2543748162028524038
  %181 = xor i64 %168, %176
  %182 = xor i64 %181, %173
  %183 = xor i64 %182, %178
  %184 = xor i64 %183, 2832025682157879325
  %185 = xor i64 %184, %180
  %186 = xor i64 %185, %171
  %187 = mul i64 %167, %186
  %188 = trunc i64 %187 to i32
  %189 = and i32 %98, %188
  %190 = or i32 %149, %189
  %191 = xor i32 %190, -1885439565
  store i32 %191, i32* %2, align 4
  %192 = call i8** @bf2569683251699683914(i32* %2)
  %193 = load i8*, i8** %192, align 8
  indirectbr i8* %193, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nounwind ssp uwtable
define internal void @update.EntryBasicBlockSplit.extracted(i32* %.reg2mem4) #10 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876144)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@update.EntryBasicBlockSplit.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876110)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@update.EntryBasicBlockSplit.extracted, %7), i8** %4, align 8
  store i32 984876110, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  store i32 2, i32* %.reg2mem4, align 4
  %8 = load i8*, i8** %2, align 8
  %9 = load i8, i8* %8, align 1
  %10 = mul i8 %9, 2
  %11 = and i64 %1, 2080086517093061431
  %12 = xor i64 %1, -1
  %13 = xor i64 2080086517093061431, %12
  %14 = and i64 %13, 2080086517093061431
  %15 = or i64 %3, -3336257598573803273
  %16 = xor i64 %3, -1
  %17 = and i64 %16, -7002252526864014854
  %18 = and i64 %3, 7002252526864014853
  %19 = or i64 %17, %18
  %20 = xor i64 5719636461456713997, %19
  %21 = xor i64 %3, -1
  %22 = or i64 3336257598573803272, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = or i64 %20, %24
  %26 = xor i64 %11, %25
  %27 = xor i64 %26, -2965241134024793083
  %28 = xor i64 %27, %15
  %29 = xor i64 %28, %14
  %30 = and i64 %3, 435592784099619324
  %31 = or i64 -435592784099619325, %3
  %32 = sub i64 %31, -435592784099619325
  %33 = and i64 %3, 6338514401060302170
  %34 = xor i64 %3, -1
  %35 = or i64 -6338514401060302171, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = and i64 %3, 463112715008517746
  %39 = xor i64 %3, -1
  %40 = or i64 -463112715008517747, %39
  %41 = xor i64 %40, -1
  %42 = and i64 %41, -1
  %43 = xor i64 %42, %37
  %44 = xor i64 %43, %30
  %45 = xor i64 %44, %38
  %46 = xor i64 %45, %33
  %47 = xor i64 %46, 6062244841551794586
  %48 = xor i64 %47, %32
  %49 = mul i64 %29, %48
  %50 = trunc i64 %49 to i8
  %51 = mul i8 %9, %50
  %52 = add i64 %1, -5244136209398835370
  %53 = sub i64 0, %1
  %54 = add i64 5244136209398835370, %53
  %55 = sub i64 0, %54
  %56 = add i64 %3, 417693123295558141
  %57 = add i64 -1641874914163695789, %3
  %58 = add i64 %57, 2059568037459253930
  %59 = xor i64 %58, %55
  %60 = xor i64 %59, 816185233988375631
  %61 = xor i64 %60, %52
  %62 = xor i64 %61, %56
  %63 = or i64 %3, -1316551422186251325
  %64 = and i64 -1316551422186251325, %3
  %65 = xor i64 -1316551422186251325, %3
  %66 = or i64 %64, %65
  %67 = add i64 %3, 7824703984808470454
  %68 = sub i64 0, %3
  %69 = add i64 -7824703984808470454, %68
  %70 = sub i64 0, %69
  %71 = xor i64 %63, %66
  %72 = xor i64 %71, 5429880409963201886
  %73 = xor i64 %72, %70
  %74 = xor i64 %73, %67
  %75 = mul i64 %62, %74
  %76 = trunc i64 %75 to i8
  %77 = add i8 %76, %51
  %78 = mul i8 %10, %77
  %79 = srem i8 %78, 4
  %80 = icmp eq i8 %79, 0
  %81 = mul i8 %9, %9
  %82 = add i8 %81, %9
  %83 = and i64 %1, 6326042448398630286
  %84 = xor i64 %1, -1
  %85 = or i64 -6326042448398630287, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = add i64 %3, 1097643374712557000
  %89 = xor i64 1097643374712557000, %3
  %90 = and i64 1097643374712557000, %3
  %91 = mul i64 2, %90
  %92 = add i64 %89, %91
  %93 = and i64 %3, -8107342175536132468
  %94 = xor i64 %3, -1
  %95 = xor i64 -8107342175536132468, %94
  %96 = and i64 %95, -8107342175536132468
  %97 = xor i64 %93, %87
  %98 = xor i64 %97, %83
  %99 = xor i64 %98, %88
  %100 = xor i64 %99, 3828025292248529025
  %101 = xor i64 %100, %96
  %102 = xor i64 %101, %92
  %103 = or i64 %1, -2241447844420491476
  %104 = xor i64 %1, -1
  %105 = and i64 %104, -7180334603841850437
  %106 = and i64 %1, 7180334603841850436
  %107 = or i64 %105, %106
  %108 = xor i64 8988785420570449047, %107
  %109 = xor i64 %1, -1
  %110 = or i64 2241447844420491475, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = or i64 %108, %112
  %114 = add i64 %3, -3980380628038511178
  %115 = xor i64 -3980380628038511178, %3
  %116 = and i64 -3980380628038511178, %3
  %117 = mul i64 2, %116
  %118 = add i64 %115, %117
  %119 = or i64 %1, -8174225723593343988
  %120 = xor i64 %1, -1
  %121 = and i64 %120, 4260438477748046646
  %122 = and i64 %1, -4260438477748046647
  %123 = or i64 %121, %122
  %124 = xor i64 -5354974319735752902, %123
  %125 = xor i64 %1, -1
  %126 = or i64 8174225723593343987, %125
  %127 = xor i64 %126, -1
  %128 = and i64 %127, -1
  %129 = or i64 %124, %128
  %130 = xor i64 %103, %129
  %131 = xor i64 %130, %119
  %132 = xor i64 %131, %118
  %133 = xor i64 %132, %113
  %134 = xor i64 %133, -8931547727845519614
  %135 = xor i64 %134, %114
  %136 = mul i64 %102, %135
  %137 = trunc i64 %136 to i8
  %138 = srem i8 %82, %137
  %139 = icmp eq i8 %138, 0
  %140 = and i1 %80, %139
  %141 = select i1 %140, i32 984876144, i32 984876144
  %142 = add i64 %1, -8771595388773445041
  %143 = add i64 1107513896276530237, %1
  %144 = add i64 %143, 8567634788659576338
  %145 = add i64 %3, 2077070736917235438
  %146 = and i64 2077070736917235438, %3
  %147 = or i64 2077070736917235438, %3
  %148 = add i64 %146, %147
  %149 = and i64 %3, -8005539450806611540
  %150 = xor i64 %3, -1
  %151 = or i64 8005539450806611539, %150
  %152 = xor i64 %151, -1
  %153 = and i64 %152, -1
  %154 = xor i64 %149, %145
  %155 = xor i64 %154, %148
  %156 = xor i64 %155, -4661121888428619723
  %157 = xor i64 %156, %144
  %158 = xor i64 %157, %153
  %159 = xor i64 %158, %142
  %160 = add i64 %3, 3499786284141719917
  %161 = add i64 3102971365440612921, %3
  %162 = sub i64 %161, -396814918701106996
  %163 = add i64 %3, 1950021952098710500
  %164 = add i64 -3607195373837056206, %3
  %165 = sub i64 %164, -5557217325935766706
  %166 = xor i64 0, %160
  %167 = xor i64 %166, %165
  %168 = xor i64 %167, %162
  %169 = xor i64 %168, %163
  %170 = mul i64 %159, %169
  %171 = trunc i64 %170 to i32
  %172 = xor i32 %141, %171
  store i32 %172, i32* %0, align 4
  %173 = call i8** @bf6338069988336422972(i32* %0)
  %174 = load i8*, i8** %173, align 8
  indirectbr i8* %174, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nounwind ssp uwtable
define internal void @update.extracted.extracted(double %0, float* %1, float* %2, [8 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem4) #10 {
newFuncRoot:
  %3 = alloca i32, align 4
  %4 = call i64 @h6542867261474098886(i64 984876102)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@update.extracted.extracted, %loopEnd.exitStub.exitStub), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876114)
  %7 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %6
  store i8* blockaddress(@update.extracted.extracted, %10), i8** %7, align 8
  store i32 984876114, i32* %3, align 4
  %8 = call i8** @bf6338069988336422972(i32* %3)
  %9 = load i8*, i8** %8, align 8
  indirectbr i8* %9, [label %10]

10:                                               ; preds = %10, %newFuncRoot
  %11 = fadd double %0, 4.000000e-05
  %12 = fptrunc double %11 to float
  store float %12, float* %1, align 4, !tbaa !10
  %13 = load float, float* %2, align 4, !tbaa !10
  %14 = fpext float %13 to double
  %15 = fadd double %14, 2.000000e-05
  %16 = fptrunc double %15 to float
  store float %16, float* %2, align 4, !tbaa !10
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %20 = load i32, i32* %19, align 4
  %21 = srem i32 %18, %20
  store i32 %21, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem4, align 4
  %22 = load i8*, i8** %7, align 8
  %23 = load i8, i8* %22, align 1
  %24 = mul i8 %23, %23
  %25 = sub i8 %24, -23
  %26 = add i8 %25, %23
  %27 = add i8 %26, -23
  %28 = mul i8 %27, 3
  %29 = srem i8 %28, 2
  %30 = icmp eq i8 %29, 0
  %31 = mul i8 %23, %23
  %32 = add i64 %6, 2107391219867493976
  %33 = xor i64 2107391219867493976, %6
  %34 = and i64 2107391219867493976, %6
  %35 = mul i64 2, %34
  %36 = add i64 %33, %35
  %37 = add i64 %4, -2486357213683883920
  %38 = sub i64 0, %4
  %39 = sub i64 -2486357213683883920, %38
  %40 = xor i64 -8584962043465638533, %32
  %41 = xor i64 %40, %37
  %42 = xor i64 %41, %39
  %43 = xor i64 %42, %36
  %44 = add i64 %4, 2263795551220532193
  %45 = xor i64 2263795551220532193, %4
  %46 = and i64 2263795551220532193, %4
  %47 = mul i64 2, %46
  %48 = add i64 %45, %47
  %49 = or i64 %6, 4917954028371715368
  %50 = and i64 4917954028371715368, %6
  %51 = xor i64 4917954028371715368, %6
  %52 = or i64 %50, %51
  %53 = xor i64 %52, %49
  %54 = xor i64 %53, %44
  %55 = xor i64 %54, -6225733663554897485
  %56 = xor i64 %55, %48
  %57 = mul i64 %43, %56
  %58 = trunc i64 %57 to i8
  %59 = sub i8 %31, %58
  %60 = add i8 %59, %23
  %61 = and i64 %6, 8064674973893385529
  %62 = or i64 -8064674973893385530, %6
  %63 = sub i64 %62, -8064674973893385530
  %64 = or i64 %6, 2860314663063455785
  %65 = and i64 2860314663063455785, %6
  %66 = xor i64 2860314663063455785, %6
  %67 = or i64 %65, %66
  %68 = or i64 %6, -1329597761112421525
  %69 = xor i64 %6, -1
  %70 = and i64 %69, -2644953324602419413
  %71 = and i64 %6, 2644953324602419412
  %72 = or i64 %70, %71
  %73 = xor i64 3947243546199252032, %72
  %74 = xor i64 %6, -1
  %75 = or i64 1329597761112421524, %74
  %76 = xor i64 %75, -1
  %77 = and i64 %76, -1
  %78 = or i64 %73, %77
  %79 = xor i64 -541030043775091331, %67
  %80 = xor i64 %79, %78
  %81 = xor i64 %80, %61
  %82 = xor i64 %81, %68
  %83 = xor i64 %82, %63
  %84 = xor i64 %83, %64
  %85 = or i64 %4, 1494934770684297782
  %86 = and i64 1494934770684297782, %4
  %87 = xor i64 1494934770684297782, %4
  %88 = or i64 %86, %87
  %89 = add i64 %4, 2977314101170818953
  %90 = and i64 2977314101170818953, %4
  %91 = or i64 2977314101170818953, %4
  %92 = add i64 %90, %91
  %93 = xor i64 %85, %88
  %94 = xor i64 %93, %92
  %95 = xor i64 %94, -3191415327472786475
  %96 = xor i64 %95, %89
  %97 = mul i64 %84, %96
  %98 = trunc i64 %97 to i8
  %99 = add i8 %60, %98
  %100 = srem i8 %99, 2
  %101 = icmp eq i8 %100, 0
  %102 = or i64 %4, -1116144783935360324
  %103 = xor i64 %4, -1
  %104 = and i64 %103, 124538421791741450
  %105 = and i64 %4, -124538421791741451
  %106 = or i64 %104, %105
  %107 = xor i64 -1064860297964526410, %106
  %108 = xor i64 %4, -1
  %109 = or i64 1116144783935360323, %108
  %110 = xor i64 %109, -1
  %111 = and i64 %110, -1
  %112 = or i64 %107, %111
  %113 = add i64 %6, 7962616778678155363
  %114 = sub i64 0, %6
  %115 = sub i64 7962616778678155363, %114
  %116 = add i64 %4, 6413664984197507585
  %117 = add i64 8247579492905257740, %4
  %118 = add i64 %117, -1833914508707750155
  %119 = xor i64 -2659711808655641643, %112
  %120 = xor i64 %119, %113
  %121 = xor i64 %120, %116
  %122 = xor i64 %121, %118
  %123 = xor i64 %122, %115
  %124 = xor i64 %123, %102
  %125 = and i64 %4, 2701372478196810663
  %126 = xor i64 %4, -1
  %127 = or i64 -2701372478196810664, %126
  %128 = xor i64 %127, -1
  %129 = and i64 %128, -1
  %130 = add i64 %4, -179261025026427471
  %131 = sub i64 0, %4
  %132 = sub i64 -179261025026427471, %131
  %133 = xor i64 %132, 4915831419776691581
  %134 = xor i64 %133, %130
  %135 = xor i64 %134, %125
  %136 = xor i64 %135, %129
  %137 = mul i64 %124, %136
  %138 = trunc i64 %137 to i1
  %139 = xor i1 %30, %138
  %140 = xor i1 %101, true
  %141 = or i1 %139, %140
  %142 = xor i1 %141, true
  %143 = and i1 %142, true
  %144 = select i1 %143, i32 984876102, i32 984876102
  %145 = xor i32 %144, 0
  store i32 %145, i32* %3, align 4
  %146 = call i8** @bf6338069988336422972(i32* %3)
  %147 = load i8*, i8** %146, align 8
  indirectbr i8* %147, [label %loopEnd.exitStub.exitStub, label %10]

loopEnd.exitStub.exitStub:                        ; preds = %10
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted([65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18069468935861293036, i32 0, i64 %1
  store i8* blockaddress(@render.extracted, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18069468935861293036, i32 0, i64 %3
  store i8* blockaddress(@render.extracted, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18069468935861293036, i32 0, i64 %5
  store i8* blockaddress(@render.extracted, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable661054169283609905, i32 0, i64 %8
  store i8* bitcast (void ([65 x i32]*, i32*)* @render.extracted.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf17157896522806037044(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = load i8*, i8** %6, align 8
  %14 = load i8, i8* %13, align 1
  %15 = and i64 %8, -697450228250796625
  %16 = xor i64 %8, -1
  %17 = xor i64 -697450228250796625, %16
  %18 = and i64 %17, -697450228250796625
  %19 = add i64 %8, -4810891888512882789
  %20 = add i64 4432904148527388736, %8
  %21 = sub i64 %20, -9202948036669280091
  %22 = or i64 %3, 6429373005122027137
  %23 = xor i64 %3, -1
  %24 = and i64 %23, -3836634073311591447
  %25 = and i64 %3, 3836634073311591446
  %26 = or i64 %24, %25
  %27 = xor i64 -7784418027531731608, %26
  %28 = xor i64 %3, -1
  %29 = or i64 -6429373005122027138, %28
  %30 = xor i64 %29, -1
  %31 = and i64 %30, -1
  %32 = or i64 %27, %31
  %33 = xor i64 %22, %32
  %34 = xor i64 %33, %19
  %35 = xor i64 %34, %21
  %36 = xor i64 %35, %15
  %37 = xor i64 %36, -6308685935240369031
  %38 = xor i64 %37, %18
  %39 = or i64 %3, 1214774656026229734
  %40 = xor i64 %3, -1
  %41 = and i64 1214774656026229734, %40
  %42 = add i64 %41, %3
  %43 = and i64 %3, 284027250124078392
  %44 = xor i64 %3, -1
  %45 = xor i64 284027250124078392, %44
  %46 = and i64 %45, 284027250124078392
  %47 = or i64 %3, -368428416262129748
  %48 = and i64 -368428416262129748, %3
  %49 = xor i64 -368428416262129748, %3
  %50 = or i64 %48, %49
  %51 = xor i64 %43, %39
  %52 = xor i64 %51, %46
  %53 = xor i64 %52, -6801485972268647534
  %54 = xor i64 %53, %42
  %55 = xor i64 %54, %47
  %56 = xor i64 %55, %50
  %57 = mul i64 %38, %56
  %58 = trunc i64 %57 to i8
  %59 = mul i8 %14, %58
  %60 = mul i8 %14, 2
  %61 = add i8 2, %60
  %62 = mul i8 %59, %61
  %63 = and i64 %3, 7117174347288988417
  %64 = or i64 -7117174347288988418, %3
  %65 = sub i64 %64, -7117174347288988418
  %66 = or i64 %8, 6081706956081533518
  %67 = and i64 6081706956081533518, %8
  %68 = xor i64 6081706956081533518, %8
  %69 = or i64 %67, %68
  %70 = or i64 %3, 5962712095899064312
  %71 = xor i64 %3, -1
  %72 = and i64 %71, -2574968485090821218
  %73 = and i64 %3, 2574968485090821217
  %74 = or i64 %72, %73
  %75 = xor i64 -8143615604815238042, %74
  %76 = xor i64 %3, -1
  %77 = or i64 -5962712095899064313, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = or i64 %75, %79
  %81 = xor i64 %70, %66
  %82 = xor i64 %81, %63
  %83 = xor i64 %82, %80
  %84 = xor i64 %83, %69
  %85 = xor i64 %84, %65
  %86 = xor i64 %85, -6367333717531620309
  %87 = add i64 %8, 1773277708709739775
  %88 = add i64 7890699045195983062, %8
  %89 = add i64 %88, -6117421336486243287
  %90 = and i64 %1, -625778318423789959
  %91 = xor i64 %1, -1
  %92 = or i64 625778318423789958, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = xor i64 %90, %94
  %96 = xor i64 %95, -2378191317924754932
  %97 = xor i64 %96, %87
  %98 = xor i64 %97, %89
  %99 = mul i64 %86, %98
  %100 = trunc i64 %99 to i8
  %101 = srem i8 %62, %100
  %102 = icmp eq i8 %101, 0
  %103 = mul i8 %14, %14
  %104 = mul i8 %103, %14
  %105 = add i8 %104, %14
  %106 = srem i8 %105, 2
  %107 = icmp eq i8 %106, 0
  %108 = and i1 %102, %107
  %109 = select i1 %108, i32 984876139, i32 984876137
  %110 = xor i32 %109, 2
  store i32 %110, i32* %0, align 4
  %111 = call i8** @bf17157896522806037044(i32* %0)
  %112 = load i8*, i8** %111, align 8
  indirectbr i8* %112, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %113 = call i8** @lk10020772496071677461(i64* %7)
  %114 = load i8*, i8** %113, align 8
  %115 = bitcast i8* %114 to void ([65 x i32]*, i32*)*
  call void %115([65 x i32]* %lookupTable, i32* %dispatcher)
  %116 = load i8*, i8** %6, align 8
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %61 to i64
  %119 = add i64 %118, -7376118883565825829
  %120 = add i64 4513211107838406702, %118
  %121 = add i64 %120, 6557414082305319085
  %122 = and i64 %8, -6518370295533038874
  %123 = xor i64 %8, -1
  %124 = or i64 6518370295533038873, %123
  %125 = xor i64 %124, -1
  %126 = and i64 %125, -1
  %127 = sext i8 %62 to i64
  %128 = add i64 %127, -1097998913150687764
  %129 = xor i64 -1097998913150687764, %127
  %130 = and i64 -1097998913150687764, %127
  %131 = mul i64 2, %130
  %132 = add i64 %129, %131
  %133 = xor i64 %121, %128
  %134 = xor i64 %133, %126
  %135 = xor i64 %134, 5879866179921966353
  %136 = xor i64 %135, %132
  %137 = xor i64 %136, %122
  %138 = xor i64 %137, %119
  %139 = sext i8 %103 to i64
  %140 = and i64 %139, -5406228074853453359
  %141 = or i64 5406228074853453358, %139
  %142 = sub i64 %141, 5406228074853453358
  %143 = sext i8 %104 to i64
  %144 = or i64 %143, 761185859378336190
  %145 = xor i64 %143, -1
  %146 = and i64 761185859378336190, %145
  %147 = add i64 %146, %143
  %148 = xor i64 -3616393328724461598, %144
  %149 = xor i64 %148, %140
  %150 = xor i64 %149, %142
  %151 = xor i64 %150, %147
  %152 = mul i64 %138, %151
  %153 = trunc i64 %152 to i8
  %154 = mul i8 %117, %153
  %155 = mul i8 %117, 2
  %156 = sext i8 %106 to i64
  %157 = and i64 %156, -8421685398492132791
  %158 = xor i64 %156, -1
  %159 = xor i64 -8421685398492132791, %158
  %160 = and i64 %159, -8421685398492132791
  %161 = add i64 %1, 2037750742068136200
  %162 = add i64 119888921838834940, %1
  %163 = add i64 %162, 1917861820229301260
  %164 = sext i8 %105 to i64
  %165 = or i64 %164, -3880215283095017059
  %166 = and i64 -3880215283095017059, %164
  %167 = xor i64 -3880215283095017059, %164
  %168 = or i64 %166, %167
  %169 = xor i64 %161, %160
  %170 = xor i64 %169, 917736728803018317
  %171 = xor i64 %170, %163
  %172 = xor i64 %171, %157
  %173 = xor i64 %172, %168
  %174 = xor i64 %173, %165
  %175 = sext i8 %105 to i64
  %176 = or i64 %175, 4144669430185199929
  %177 = xor i64 %175, -1
  %178 = and i64 %177, 4199076540770385342
  %179 = and i64 %175, -4199076540770385343
  %180 = or i64 %178, %179
  %181 = xor i64 271006795287721095, %180
  %182 = xor i64 %175, -1
  %183 = or i64 -4144669430185199930, %182
  %184 = xor i64 %183, -1
  %185 = and i64 %184, -1
  %186 = or i64 %181, %185
  %187 = sext i32 %109 to i64
  %188 = and i64 %187, -1937242495792843048
  %189 = xor i64 %187, -1
  %190 = or i64 1937242495792843047, %189
  %191 = xor i64 %190, -1
  %192 = and i64 %191, -1
  %193 = sext i8 %60 to i64
  %194 = and i64 %193, -55578802010934382
  %195 = xor i64 %193, -1
  %196 = xor i64 -55578802010934382, %195
  %197 = and i64 %196, -55578802010934382
  %198 = xor i64 %176, %186
  %199 = xor i64 %198, %192
  %200 = xor i64 %199, %188
  %201 = xor i64 %200, %197
  %202 = xor i64 %201, %194
  %203 = xor i64 %202, 1942353572991419658
  %204 = mul i64 %174, %203
  %205 = trunc i64 %204 to i8
  %206 = add i8 %205, %155
  %207 = mul i8 %154, %206
  %208 = srem i8 %207, 4
  %209 = icmp eq i8 %208, 0
  %210 = mul i8 %117, %117
  %211 = sub i8 0, %210
  %212 = sub i8 0, %117
  %213 = add i8 %211, %212
  %214 = sext i8 %14 to i64
  %215 = or i64 %214, -5764507782247425121
  %216 = and i64 -5764507782247425121, %214
  %217 = xor i64 -5764507782247425121, %214
  %218 = or i64 %216, %217
  %219 = or i64 %3, -9103588287357969497
  %220 = xor i64 %3, -1
  %221 = and i64 -9103588287357969497, %220
  %222 = add i64 %221, %3
  %223 = sext i8 %62 to i64
  %224 = add i64 %223, -8333143007033833691
  %225 = sub i64 0, %223
  %226 = add i64 8333143007033833691, %225
  %227 = sub i64 0, %226
  %228 = xor i64 %222, %219
  %229 = xor i64 %228, %224
  %230 = xor i64 %229, -1398173149153578497
  %231 = xor i64 %230, %227
  %232 = xor i64 %231, %215
  %233 = xor i64 %232, %218
  %234 = sext i8 %105 to i64
  %235 = or i64 %234, 881822963203983000
  %236 = xor i64 %234, -1
  %237 = and i64 %236, -4155561236452582810
  %238 = and i64 %234, 4155561236452582809
  %239 = or i64 %237, %238
  %240 = xor i64 -3861653875684401922, %239
  %241 = xor i64 %234, -1
  %242 = or i64 -881822963203983001, %241
  %243 = xor i64 %242, -1
  %244 = and i64 %243, -1
  %245 = or i64 %240, %244
  %246 = sext i8 %105 to i64
  %247 = add i64 %246, 5907404772280614198
  %248 = and i64 5907404772280614198, %246
  %249 = or i64 5907404772280614198, %246
  %250 = add i64 %248, %249
  %251 = xor i64 %235, %245
  %252 = xor i64 %251, 0
  %253 = xor i64 %252, %247
  %254 = xor i64 %253, %250
  %255 = mul i64 %233, %254
  %256 = trunc i64 %255 to i8
  %257 = sub i8 %256, %213
  %258 = srem i8 %257, 2
  %259 = icmp eq i8 %258, 0
  %260 = and i1 %209, %259
  %261 = xor i1 %209, %259
  %262 = or i1 %260, %261
  %263 = sext i32 %109 to i64
  %264 = add i64 %263, -4082633199597262392
  %265 = sub i64 0, %263
  %266 = add i64 4082633199597262392, %265
  %267 = sub i64 0, %266
  %268 = add i64 %1, -2252447027341490378
  %269 = xor i64 -2252447027341490378, %1
  %270 = and i64 -2252447027341490378, %1
  %271 = mul i64 2, %270
  %272 = add i64 %269, %271
  %273 = xor i64 -5868642893977758605, %267
  %274 = xor i64 %273, %272
  %275 = xor i64 %274, %264
  %276 = xor i64 %275, %268
  %277 = sext i32 %109 to i64
  %278 = and i64 %277, 722274034533274127
  %279 = xor i64 %277, -1
  %280 = xor i64 722274034533274127, %279
  %281 = and i64 %280, 722274034533274127
  %282 = sext i8 %104 to i64
  %283 = and i64 %282, -5126871334805897732
  %284 = xor i64 %282, -1
  %285 = xor i64 -5126871334805897732, %284
  %286 = and i64 %285, -5126871334805897732
  %287 = sext i8 %105 to i64
  %288 = add i64 %287, 3945011819825467795
  %289 = xor i64 3945011819825467795, %287
  %290 = and i64 3945011819825467795, %287
  %291 = mul i64 2, %290
  %292 = add i64 %289, %291
  %293 = xor i64 %288, %283
  %294 = xor i64 %293, 737076336703932969
  %295 = xor i64 %294, %286
  %296 = xor i64 %295, %292
  %297 = xor i64 %296, %281
  %298 = xor i64 %297, %278
  %299 = mul i64 %276, %298
  %300 = trunc i64 %299 to i32
  %301 = select i1 %262, i32 984876139, i32 %300
  %302 = sext i8 %104 to i64
  %303 = or i64 %302, -6123829056070510739
  %304 = and i64 -6123829056070510739, %302
  %305 = xor i64 -6123829056070510739, %302
  %306 = or i64 %304, %305
  %307 = sext i32 %109 to i64
  %308 = and i64 %307, 3675488638071488965
  %309 = xor i64 %307, -1
  %310 = or i64 -3675488638071488966, %309
  %311 = xor i64 %310, -1
  %312 = and i64 %311, -1
  %313 = sext i8 %104 to i64
  %314 = and i64 %313, -6716851078069106273
  %315 = or i64 6716851078069106272, %313
  %316 = sub i64 %315, 6716851078069106272
  %317 = xor i64 %312, %306
  %318 = xor i64 %317, %303
  %319 = xor i64 %318, %308
  %320 = xor i64 %319, -7326814504067397007
  %321 = xor i64 %320, %314
  %322 = xor i64 %321, %316
  %323 = sext i8 %103 to i64
  %324 = or i64 %323, 4821968095627760386
  %325 = xor i64 %323, -1
  %326 = and i64 4821968095627760386, %325
  %327 = add i64 %326, %323
  %328 = add i64 %1, 5854813221738477359
  %329 = xor i64 5854813221738477359, %1
  %330 = and i64 5854813221738477359, %1
  %331 = mul i64 2, %330
  %332 = add i64 %329, %331
  %333 = sext i8 %61 to i64
  %334 = or i64 %333, 5929372446326209013
  %335 = and i64 5929372446326209013, %333
  %336 = xor i64 5929372446326209013, %333
  %337 = or i64 %335, %336
  %338 = xor i64 %324, %327
  %339 = xor i64 %338, %337
  %340 = xor i64 %339, -9076588469629253265
  %341 = xor i64 %340, %334
  %342 = xor i64 %341, %332
  %343 = xor i64 %342, %328
  %344 = mul i64 %322, %343
  %345 = trunc i64 %344 to i32
  %346 = xor i32 %301, %345
  %347 = and i32 %346, 846325392
  %348 = and i32 %301, -846325393
  %349 = or i32 %347, %348
  %350 = xor i32 %349, 846325392
  store i32 %350, i32* %0, align 4
  %351 = call i8** @bf17157896522806037044(i32* %0)
  %352 = load i8*, i8** %351, align 8
  indirectbr i8* %352, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.1(i64* %.reg2mem25, i64 %0, i1* %.reg2mem22, [65 x i32]* %lookupTable, i32* %dispatcher, i64* %.reg2mem97, i1* %.reg2mem99) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876137)
  %3 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13671396500338455014, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.1, %loopEnd.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876138)
  %5 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13671396500338455014, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.1, %codeRepl), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876136)
  %7 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13671396500338455014, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.1, %13), i8** %7, align 8
  %8 = alloca i64, align 8
  %9 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %10 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3263059483920280765, i32 0, i64 %9
  store i8* bitcast (void (i64*, i64, i1*, [65 x i32]*, i32*, i64*, i1*)* @render.extracted.1.extracted to i8*), i8** %10, align 8
  store i32 984876136, i32* %1, align 4
  %11 = call i8** @bf3182636109140662499(i32* %1)
  %12 = load i8*, i8** %11, align 8
  indirectbr i8* %12, [label %13]

13:                                               ; preds = %13, %newFuncRoot
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = mul i8 %15, 2
  %17 = mul i8 %15, 2
  %18 = add i8 2, %17
  %19 = mul i8 %16, %18
  %20 = srem i8 %19, 4
  %21 = icmp eq i8 %20, 0
  %22 = mul i8 %15, %15
  %23 = mul i8 %22, %15
  %24 = add i8 %23, %15
  %25 = srem i8 %24, 2
  %26 = icmp eq i8 %25, 0
  %27 = and i1 %21, %26
  %28 = or i64 %2, -3274017559781571912
  %29 = and i64 -3274017559781571912, %2
  %30 = xor i64 -3274017559781571912, %2
  %31 = or i64 %29, %30
  %32 = and i64 %4, 3670802953148240328
  %33 = xor i64 %4, -1
  %34 = or i64 -3670802953148240329, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, -1
  %37 = add i64 %2, -7475734123291233716
  %38 = add i64 3145649982463752067, %2
  %39 = sub i64 %38, -7825359967954565833
  %40 = xor i64 %28, %32
  %41 = xor i64 %40, 2414910249554313807
  %42 = xor i64 %41, %36
  %43 = xor i64 %42, %37
  %44 = xor i64 %43, %39
  %45 = xor i64 %44, %31
  %46 = and i64 %6, 7321581328591696234
  %47 = xor i64 %6, -1
  %48 = or i64 -7321581328591696235, %47
  %49 = xor i64 %48, -1
  %50 = and i64 %49, -1
  %51 = add i64 %6, -377425967247291788
  %52 = add i64 4070351827310451069, %6
  %53 = add i64 %52, -4447777794557742857
  %54 = or i64 %2, 872094250378280847
  %55 = xor i64 %2, -1
  %56 = and i64 872094250378280847, %55
  %57 = add i64 %56, %2
  %58 = xor i64 %54, %51
  %59 = xor i64 %58, %46
  %60 = xor i64 %59, %57
  %61 = xor i64 %60, %53
  %62 = xor i64 %61, %50
  %63 = xor i64 %62, -7955916102374448360
  %64 = mul i64 %45, %63
  %65 = trunc i64 %64 to i32
  %66 = select i1 %27, i32 %65, i32 984876138
  %67 = xor i32 %66, -1
  %68 = and i32 %67, 185451181
  %69 = and i32 %66, -185451182
  %70 = or i32 %68, %69
  %71 = xor i32 %70, 185451183
  store i32 %71, i32* %1, align 4
  %72 = call i8** @bf3182636109140662499(i32* %1)
  %73 = load i8*, i8** %72, align 8
  indirectbr i8* %73, [label %codeRepl, label %13]

codeRepl:                                         ; preds = %codeRepl, %13
  store i64 4070807658626890127, i64* %8, align 8
  %74 = call i8** @lk15283925730859341009(i64* %8)
  %75 = load i8*, i8** %74, align 8
  %76 = bitcast i8* %75 to void (i64*, i64, i1*, [65 x i32]*, i32*, i64*, i1*)*
  call void %76(i64* %.reg2mem25, i64 %0, i1* %.reg2mem22, [65 x i32]* %lookupTable, i32* %dispatcher, i64* %.reg2mem97, i1* %.reg2mem99)
  %77 = load i8*, i8** %7, align 8
  %78 = load i8, i8* %77, align 1
  %79 = and i64 %9, 6012275918941086561
  %80 = xor i64 %9, -1
  %81 = xor i64 6012275918941086561, %80
  %82 = and i64 %81, 6012275918941086561
  %83 = add i64 %0, -2874475309972932981
  %84 = add i64 6665352936716240058, %0
  %85 = add i64 %84, 8906915827020378577
  %86 = xor i64 %82, %79
  %87 = xor i64 %86, %85
  %88 = xor i64 %87, -7466656332732077925
  %89 = xor i64 %88, %83
  %90 = sext i8 %18 to i64
  %91 = or i64 %90, -6221749439013586366
  %92 = xor i64 %90, -1
  %93 = and i64 -6221749439013586366, %92
  %94 = add i64 %93, %90
  %95 = and i64 %4, -5833875351028508022
  %96 = xor i64 %4, -1
  %97 = xor i64 -5833875351028508022, %96
  %98 = and i64 %97, -5833875351028508022
  %99 = add i64 %2, -2664941230646038357
  %100 = and i64 -2664941230646038357, %2
  %101 = or i64 -2664941230646038357, %2
  %102 = add i64 %100, %101
  %103 = xor i64 901309252672961939, %91
  %104 = xor i64 %103, %94
  %105 = xor i64 %104, %95
  %106 = xor i64 %105, %99
  %107 = xor i64 %106, %98
  %108 = xor i64 %107, %102
  %109 = mul i64 %89, %108
  %110 = trunc i64 %109 to i8
  %111 = and i8 %78, %110
  %112 = sext i32 %70 to i64
  %113 = and i64 %112, 1204803956243486733
  %114 = or i64 -1204803956243486734, %112
  %115 = sub i64 %114, -1204803956243486734
  %116 = and i64 %6, 5814855848869383714
  %117 = xor i64 %6, -1
  %118 = or i64 -5814855848869383715, %117
  %119 = xor i64 %118, -1
  %120 = and i64 %119, -1
  %121 = xor i64 %113, %116
  %122 = xor i64 %121, -8069553460652293203
  %123 = xor i64 %122, %115
  %124 = xor i64 %123, %120
  %125 = sext i8 %25 to i64
  %126 = and i64 %125, -281043060923117667
  %127 = or i64 281043060923117666, %125
  %128 = sub i64 %127, 281043060923117666
  %129 = sext i8 %22 to i64
  %130 = or i64 %129, -1105632464481279069
  %131 = xor i64 %129, -1
  %132 = and i64 -1105632464481279069, %131
  %133 = add i64 %132, %129
  %134 = xor i64 %133, 2717696056154822693
  %135 = xor i64 %134, %126
  %136 = xor i64 %135, %130
  %137 = xor i64 %136, %128
  %138 = mul i64 %124, %137
  %139 = trunc i64 %138 to i8
  %140 = icmp eq i8 %111, %139
  %141 = mul i8 %78, %78
  %142 = add i8 %141, %78
  %143 = sext i32 %71 to i64
  %144 = add i64 %143, -2170741766023695054
  %145 = sub i64 0, %143
  %146 = sub i64 -2170741766023695054, %145
  %147 = or i64 %4, 970734942455567142
  %148 = xor i64 %4, -1
  %149 = and i64 %148, -7458584976026838429
  %150 = and i64 %4, 7458584976026838428
  %151 = or i64 %149, %150
  %152 = xor i64 -7708625229236057787, %151
  %153 = xor i64 %4, -1
  %154 = or i64 -970734942455567143, %153
  %155 = xor i64 %154, -1
  %156 = and i64 %155, -1
  %157 = or i64 %152, %156
  %158 = xor i64 5401831529017146647, %144
  %159 = xor i64 %158, %146
  %160 = xor i64 %159, %157
  %161 = xor i64 %160, %147
  %162 = sext i32 %69 to i64
  %163 = add i64 %162, 5724265239491608035
  %164 = and i64 5724265239491608035, %162
  %165 = or i64 5724265239491608035, %162
  %166 = add i64 %164, %165
  %167 = sext i32 %68 to i64
  %168 = add i64 %167, -2383294583662145496
  %169 = and i64 -2383294583662145496, %167
  %170 = or i64 -2383294583662145496, %167
  %171 = add i64 %169, %170
  %172 = sext i32 %68 to i64
  %173 = add i64 %172, 4865755119072862399
  %174 = and i64 4865755119072862399, %172
  %175 = or i64 4865755119072862399, %172
  %176 = add i64 %174, %175
  %177 = xor i64 %173, %163
  %178 = xor i64 %177, %166
  %179 = xor i64 %178, -423403343891851954
  %180 = xor i64 %179, %168
  %181 = xor i64 %180, %171
  %182 = xor i64 %181, %176
  %183 = mul i64 %161, %182
  %184 = trunc i64 %183 to i8
  %185 = srem i8 %142, %184
  %186 = icmp eq i8 %185, 0
  %187 = and i1 %140, %186
  %188 = xor i1 %140, %186
  %189 = or i1 %187, %188
  %190 = add i64 %0, -6648700774030208037
  %191 = sub i64 0, %0
  %192 = add i64 6648700774030208037, %191
  %193 = sub i64 0, %192
  %194 = sext i8 %23 to i64
  %195 = and i64 %194, 3662546612661188349
  %196 = xor i64 %194, -1
  %197 = xor i64 3662546612661188349, %196
  %198 = and i64 %197, 3662546612661188349
  %199 = xor i64 -7568936516970862855, %198
  %200 = xor i64 %199, %190
  %201 = xor i64 %200, %195
  %202 = xor i64 %201, %193
  %203 = sext i32 %67 to i64
  %204 = and i64 %203, -5563616863874944926
  %205 = xor i64 %203, -1
  %206 = or i64 5563616863874944925, %205
  %207 = xor i64 %206, -1
  %208 = and i64 %207, -1
  %209 = add i64 %9, 1512867059544837743
  %210 = add i64 -6552469656084920154, %9
  %211 = add i64 %210, 8065336715629757897
  %212 = sext i8 %23 to i64
  %213 = or i64 %212, 8289776519560821103
  %214 = xor i64 %212, -1
  %215 = and i64 8289776519560821103, %214
  %216 = add i64 %215, %212
  %217 = xor i64 %211, %204
  %218 = xor i64 %217, %213
  %219 = xor i64 %218, %208
  %220 = xor i64 %219, %209
  %221 = xor i64 %220, %216
  %222 = xor i64 %221, -6198862485322909272
  %223 = mul i64 %202, %222
  %224 = trunc i64 %223 to i32
  %225 = select i1 %189, i32 %224, i32 984876137
  %226 = xor i32 %225, -1
  %227 = and i32 %226, 1
  %228 = and i32 %225, -2
  %229 = or i32 %227, %228
  store i32 %229, i32* %1, align 4
  %230 = call i8** @bf3182636109140662499(i32* %1)
  %231 = load i8*, i8** %230, align 8
  indirectbr i8* %231, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.2([65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10395363378856985495, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.2, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10395363378856985495, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.2, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10395363378856985495, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.2, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable15872309927006380141, i32 0, i64 %8
  store i8* bitcast (void ()* @render.extracted.2.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf5922628416545449076(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 43
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %16 = load i32, i32* %15, align 4
  %17 = srem i32 %14, %16
  store i32 %17, i32* %dispatcher, align 4
  %18 = load i8*, i8** %2, align 8
  %19 = load i8, i8* %18, align 1
  %20 = add i64 %1, -4465485289845520056
  %21 = sub i64 0, %1
  %22 = sub i64 -4465485289845520056, %21
  %23 = add i64 %8, -7681478310275371770
  %24 = and i64 -7681478310275371770, %8
  %25 = or i64 -7681478310275371770, %8
  %26 = add i64 %24, %25
  %27 = and i64 %5, -3230091359797474027
  %28 = xor i64 %5, -1
  %29 = xor i64 -3230091359797474027, %28
  %30 = and i64 %29, -3230091359797474027
  %31 = xor i64 %22, %20
  %32 = xor i64 %31, %30
  %33 = xor i64 %32, -386904887187504939
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, %27
  %36 = xor i64 %35, %23
  %37 = or i64 %5, -4217959403320747680
  %38 = and i64 -4217959403320747680, %5
  %39 = xor i64 -4217959403320747680, %5
  %40 = or i64 %38, %39
  %41 = or i64 %5, 7562205035196127097
  %42 = and i64 7562205035196127097, %5
  %43 = xor i64 7562205035196127097, %5
  %44 = or i64 %42, %43
  %45 = and i64 %5, -147729732164334050
  %46 = xor i64 %5, -1
  %47 = xor i64 -147729732164334050, %46
  %48 = and i64 %47, -147729732164334050
  %49 = xor i64 %40, %41
  %50 = xor i64 %49, %48
  %51 = xor i64 %50, -6823666341397171974
  %52 = xor i64 %51, %45
  %53 = xor i64 %52, %44
  %54 = xor i64 %53, %37
  %55 = mul i64 %36, %54
  %56 = trunc i64 %55 to i8
  %57 = mul i8 %19, %56
  %58 = mul i8 %19, 2
  %59 = add i8 2, %58
  %60 = mul i8 %57, %59
  %61 = srem i8 %60, 4
  %62 = icmp eq i8 %61, 0
  %63 = mul i8 %19, %19
  %64 = and i8 %63, %19
  %65 = or i8 %63, %19
  %66 = add i8 %64, %65
  %67 = srem i8 %66, 2
  %68 = icmp eq i8 %67, 0
  %69 = or i1 %62, %68
  %70 = or i64 %1, -3179925313252746781
  %71 = xor i64 %1, -1
  %72 = and i64 %71, -6068211227549595434
  %73 = and i64 %1, 6068211227549595433
  %74 = or i64 %72, %73
  %75 = xor i64 8653597193645756725, %74
  %76 = xor i64 %1, -1
  %77 = or i64 3179925313252746780, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = or i64 %75, %79
  %81 = and i64 %1, -3263543005374835511
  %82 = or i64 3263543005374835510, %1
  %83 = sub i64 %82, 3263543005374835510
  %84 = and i64 %1, -8984942775236789450
  %85 = xor i64 %1, -1
  %86 = or i64 8984942775236789449, %85
  %87 = xor i64 %86, -1
  %88 = and i64 %87, -1
  %89 = xor i64 7662030690271920773, %70
  %90 = xor i64 %89, %81
  %91 = xor i64 %90, %88
  %92 = xor i64 %91, %84
  %93 = xor i64 %92, %80
  %94 = xor i64 %93, %83
  %95 = or i64 %1, -3325284448993498459
  %96 = xor i64 %1, -1
  %97 = and i64 %96, 3200522333264688994
  %98 = and i64 %1, -3200522333264688995
  %99 = or i64 %97, %98
  %100 = xor i64 -166424882288091705, %99
  %101 = xor i64 %1, -1
  %102 = or i64 3325284448993498458, %101
  %103 = xor i64 %102, -1
  %104 = and i64 %103, -1
  %105 = or i64 %100, %104
  %106 = or i64 %5, -7836518774510655466
  %107 = xor i64 %5, -1
  %108 = and i64 %107, 5229514020863828778
  %109 = and i64 %5, -5229514020863828779
  %110 = or i64 %108, %109
  %111 = xor i64 -2617188440862651588, %110
  %112 = xor i64 %5, -1
  %113 = or i64 7836518774510655465, %112
  %114 = xor i64 %113, -1
  %115 = and i64 %114, -1
  %116 = or i64 %111, %115
  %117 = xor i64 %95, %116
  %118 = xor i64 %117, %106
  %119 = xor i64 %118, -7347921008991989790
  %120 = xor i64 %119, %105
  %121 = mul i64 %94, %120
  %122 = trunc i64 %121 to i32
  %123 = add i64 %5, 4225319268564481936
  %124 = and i64 4225319268564481936, %5
  %125 = or i64 4225319268564481936, %5
  %126 = add i64 %124, %125
  %127 = or i64 %5, -8555767340748036194
  %128 = and i64 -8555767340748036194, %5
  %129 = xor i64 -8555767340748036194, %5
  %130 = or i64 %128, %129
  %131 = or i64 %5, 8289806214328446608
  %132 = xor i64 %5, -1
  %133 = and i64 8289806214328446608, %132
  %134 = add i64 %133, %5
  %135 = xor i64 %134, -8314304106411794535
  %136 = xor i64 %135, %130
  %137 = xor i64 %136, %127
  %138 = xor i64 %137, %123
  %139 = xor i64 %138, %131
  %140 = xor i64 %139, %126
  %141 = and i64 %5, -265156388041227154
  %142 = xor i64 %5, -1
  %143 = xor i64 -265156388041227154, %142
  %144 = and i64 %143, -265156388041227154
  %145 = or i64 %3, -2329121448848432075
  %146 = xor i64 %3, -1
  %147 = and i64 -2329121448848432075, %146
  %148 = add i64 %147, %3
  %149 = xor i64 %141, %144
  %150 = xor i64 %149, -6992547613753829725
  %151 = xor i64 %150, %145
  %152 = xor i64 %151, %148
  %153 = mul i64 %140, %152
  %154 = trunc i64 %153 to i32
  %155 = select i1 %69, i32 %122, i32 %154
  %156 = xor i32 %155, 1
  store i32 %156, i32* %0, align 4
  %157 = call i8** @bf5922628416545449076(i32* %0)
  %158 = load i8*, i8** %157, align 8
  indirectbr i8* %158, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %159 = call i8** @lk13043518718726078595(i64* %7)
  %160 = load i8*, i8** %159, align 8
  %161 = bitcast i8* %160 to void ()*
  call void %161()
  %162 = load i8*, i8** %6, align 8
  %163 = load i8, i8* %162, align 1
  %164 = and i8 %163, 1
  %165 = icmp eq i8 %164, 0
  %166 = mul i8 %163, %163
  %167 = add i8 %166, %163
  %168 = mul i8 %167, 3
  %169 = srem i8 %168, 2
  %170 = icmp eq i8 %169, 0
  %171 = and i1 %165, %170
  %172 = xor i1 %165, %170
  %173 = or i1 %171, %172
  %174 = sext i32 %156 to i64
  %175 = or i64 %174, 8935139112971152095
  %176 = and i64 8935139112971152095, %174
  %177 = xor i64 8935139112971152095, %174
  %178 = or i64 %176, %177
  %179 = sext i8 %64 to i64
  %180 = add i64 %179, 575896497162677400
  %181 = xor i64 575896497162677400, %179
  %182 = and i64 575896497162677400, %179
  %183 = mul i64 2, %182
  %184 = add i64 %181, %183
  %185 = sext i32 %17 to i64
  %186 = and i64 %185, -1620439835853022396
  %187 = xor i64 %185, -1
  %188 = or i64 1620439835853022395, %187
  %189 = xor i64 %188, -1
  %190 = and i64 %189, -1
  %191 = xor i64 %184, %178
  %192 = xor i64 %191, %186
  %193 = xor i64 %192, -4199232762657690605
  %194 = xor i64 %193, %180
  %195 = xor i64 %194, %175
  %196 = xor i64 %195, %190
  %197 = sext i8 %61 to i64
  %198 = or i64 %197, 6339642394310134697
  %199 = xor i64 %197, -1
  %200 = and i64 6339642394310134697, %199
  %201 = add i64 %200, %197
  %202 = sext i8 %60 to i64
  %203 = add i64 %202, -3366757200280019640
  %204 = sub i64 0, %202
  %205 = add i64 3366757200280019640, %204
  %206 = sub i64 0, %205
  %207 = sext i8 %65 to i64
  %208 = and i64 %207, 5401818071479424975
  %209 = xor i64 %207, -1
  %210 = or i64 -5401818071479424976, %209
  %211 = xor i64 %210, -1
  %212 = and i64 %211, -1
  %213 = xor i64 %198, %206
  %214 = xor i64 %213, %201
  %215 = xor i64 %214, %203
  %216 = xor i64 %215, %212
  %217 = xor i64 %216, %208
  %218 = xor i64 %217, -7172148096576838381
  %219 = mul i64 %196, %218
  %220 = trunc i64 %219 to i32
  %221 = select i1 %173, i32 984876137, i32 %220
  %222 = sext i8 %61 to i64
  %223 = or i64 %222, 7027586411903819921
  %224 = xor i64 %222, -1
  %225 = and i64 %224, -9113318729334966677
  %226 = and i64 %222, 9113318729334966676
  %227 = or i64 %225, %226
  %228 = xor i64 -2305283916393572614, %227
  %229 = xor i64 %222, -1
  %230 = or i64 -7027586411903819922, %229
  %231 = xor i64 %230, -1
  %232 = and i64 %231, -1
  %233 = or i64 %228, %232
  %234 = sext i8 %64 to i64
  %235 = or i64 %234, 2234972114463287924
  %236 = xor i64 %234, -1
  %237 = and i64 2234972114463287924, %236
  %238 = add i64 %237, %234
  %239 = xor i64 -1454802324711855085, %235
  %240 = xor i64 %239, %238
  %241 = xor i64 %240, %233
  %242 = xor i64 %241, %223
  %243 = sext i8 %57 to i64
  %244 = and i64 %243, 4189794112451878492
  %245 = xor i64 %243, -1
  %246 = or i64 -4189794112451878493, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = sext i8 %58 to i64
  %250 = and i64 %249, 4624712860757767495
  %251 = xor i64 %249, -1
  %252 = xor i64 4624712860757767495, %251
  %253 = and i64 %252, 4624712860757767495
  %254 = sext i8 %65 to i64
  %255 = add i64 %254, -7995865580042827504
  %256 = and i64 -7995865580042827504, %254
  %257 = or i64 -7995865580042827504, %254
  %258 = add i64 %256, %257
  %259 = xor i64 %258, %255
  %260 = xor i64 %259, %248
  %261 = xor i64 %260, %250
  %262 = xor i64 %261, %253
  %263 = xor i64 %262, 3727462958970470885
  %264 = xor i64 %263, %244
  %265 = mul i64 %242, %264
  %266 = trunc i64 %265 to i32
  %267 = xor i32 %221, %266
  %268 = and i32 %267, 0
  %269 = and i32 %221, -1
  %270 = or i32 %268, %269
  store i32 %270, i32* %0, align 4
  %271 = call i8** @bf5922628416545449076(i32* %0)
  %272 = load i8*, i8** %271, align 8
  indirectbr i8* %272, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.3(i64* %.reg2mem25, [65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2059185066680446929, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.3, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2059185066680446929, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.3, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2059185066680446929, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.3, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11254744462274370258, i32 0, i64 %8
  store i8* bitcast (void (i32*, [65 x i32]*, i1, i32*)* @render.extracted.3.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf8275677406198937660(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload27 = load i64, i64* %.reg2mem25, align 8
  %13 = srem i64 %.reload27, 2
  %14 = icmp eq i64 %13, 0
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 16
  %16 = load i8*, i8** %6, align 8
  %17 = load i8, i8* %16, align 1
  %18 = mul i8 %17, 2
  %19 = mul i8 %17, 2
  %20 = add i8 2, %19
  %21 = mul i8 %18, %20
  %22 = srem i8 %21, 4
  %23 = icmp eq i8 %22, 0
  %24 = mul i8 %17, %17
  %25 = add i8 %24, %17
  %26 = srem i8 %25, 2
  %27 = and i64 %3, 4182431853583324758
  %28 = xor i64 %3, -1
  %29 = xor i64 4182431853583324758, %28
  %30 = and i64 %29, 4182431853583324758
  %31 = add i64 %3, -3153903938706962732
  %32 = and i64 -3153903938706962732, %3
  %33 = or i64 -3153903938706962732, %3
  %34 = add i64 %32, %33
  %35 = xor i64 -4717197100523273089, %34
  %36 = xor i64 %35, %27
  %37 = xor i64 %36, %30
  %38 = xor i64 %37, %31
  %39 = or i64 %8, -8330557098161567989
  %40 = xor i64 %8, -1
  %41 = and i64 %40, 8834447123481217195
  %42 = and i64 %8, -8834447123481217196
  %43 = or i64 %41, %42
  %44 = xor i64 -650303202664034400, %43
  %45 = xor i64 %8, -1
  %46 = or i64 8330557098161567988, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = or i64 %44, %48
  %50 = and i64 %1, -3635627533410025601
  %51 = xor i64 %1, -1
  %52 = or i64 3635627533410025600, %51
  %53 = xor i64 %52, -1
  %54 = and i64 %53, -1
  %55 = add i64 %3, 7517330546092268792
  %56 = sub i64 0, %3
  %57 = sub i64 7517330546092268792, %56
  %58 = xor i64 %50, %54
  %59 = xor i64 %58, 0
  %60 = xor i64 %59, %57
  %61 = xor i64 %60, %55
  %62 = xor i64 %61, %39
  %63 = xor i64 %62, %49
  %64 = mul i64 %38, %63
  %65 = trunc i64 %64 to i8
  %66 = icmp eq i8 %26, %65
  %67 = and i1 %23, %66
  %68 = select i1 %67, i32 984876139, i32 984876139
  %69 = add i64 %8, 5517336336554987633
  %70 = add i64 -1625913091807396251, %8
  %71 = sub i64 %70, -7143249428362383884
  %72 = add i64 %3, -6346202899236452617
  %73 = sub i64 0, %3
  %74 = sub i64 -6346202899236452617, %73
  %75 = or i64 %8, 6761528399336668302
  %76 = xor i64 %8, -1
  %77 = and i64 %76, 5244078989784146555
  %78 = and i64 %8, -5244078989784146556
  %79 = or i64 %77, %78
  %80 = xor i64 1518680987666554613, %79
  %81 = xor i64 %8, -1
  %82 = or i64 -6761528399336668303, %81
  %83 = xor i64 %82, -1
  %84 = and i64 %83, -1
  %85 = or i64 %80, %84
  %86 = xor i64 5170189840910416775, %69
  %87 = xor i64 %86, %75
  %88 = xor i64 %87, %74
  %89 = xor i64 %88, %85
  %90 = xor i64 %89, %72
  %91 = xor i64 %90, %71
  %92 = or i64 %8, -2700882989616439379
  %93 = xor i64 %8, -1
  %94 = and i64 %93, -7004331377127082358
  %95 = and i64 %8, 7004331377127082357
  %96 = or i64 %94, %95
  %97 = xor i64 4922175466337724711, %96
  %98 = xor i64 %8, -1
  %99 = or i64 2700882989616439378, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = or i64 %97, %101
  %103 = add i64 %8, 837775252102657156
  %104 = xor i64 837775252102657156, %8
  %105 = and i64 837775252102657156, %8
  %106 = mul i64 2, %105
  %107 = add i64 %104, %106
  %108 = or i64 %3, -3049133336371141079
  %109 = and i64 -3049133336371141079, %3
  %110 = xor i64 -3049133336371141079, %3
  %111 = or i64 %109, %110
  %112 = xor i64 %103, 0
  %113 = xor i64 %112, %111
  %114 = xor i64 %113, %102
  %115 = xor i64 %114, %107
  %116 = xor i64 %115, %108
  %117 = xor i64 %116, %92
  %118 = mul i64 %91, %117
  %119 = trunc i64 %118 to i32
  %120 = xor i32 %68, %119
  store i32 %120, i32* %0, align 4
  %121 = call i8** @bf8275677406198937660(i32* %0)
  %122 = load i8*, i8** %121, align 8
  indirectbr i8* %122, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %123 = call i8** @lk10323673655277611966(i64* %7)
  %124 = load i8*, i8** %123, align 8
  %125 = bitcast i8* %124 to void (i32*, [65 x i32]*, i1, i32*)*
  call void %125(i32* %15, [65 x i32]* %lookupTable, i1 %14, i32* %dispatcher)
  %126 = load i8*, i8** %2, align 8
  %127 = load i8, i8* %126, align 1
  %128 = and i8 %127, 1
  %129 = icmp eq i8 %128, 1
  %130 = mul i8 %127, %127
  %131 = sub i8 0, %130
  %132 = sub i8 0, %127
  %133 = add i8 %131, %132
  %134 = sub i8 0, %133
  %135 = srem i8 %134, 2
  %136 = icmp eq i8 %135, 0
  %137 = and i1 %129, %136
  %138 = xor i1 %129, %136
  %139 = or i1 %137, %138
  %140 = and i64 %13, -1816169771246697563
  %141 = or i64 1816169771246697562, %13
  %142 = sub i64 %141, 1816169771246697562
  %143 = sext i8 %24 to i64
  %144 = add i64 %143, 2227850368707231081
  %145 = sub i64 0, %143
  %146 = add i64 -2227850368707231081, %145
  %147 = sub i64 0, %146
  %148 = sext i8 %21 to i64
  %149 = and i64 %148, -3342501429520721283
  %150 = or i64 3342501429520721282, %148
  %151 = sub i64 %150, 3342501429520721282
  %152 = xor i64 %144, %149
  %153 = xor i64 %152, %147
  %154 = xor i64 %153, %151
  %155 = xor i64 %154, -1280243530261004543
  %156 = xor i64 %155, %142
  %157 = xor i64 %156, %140
  %158 = sext i8 %21 to i64
  %159 = add i64 %158, -8737571476098842527
  %160 = and i64 -8737571476098842527, %158
  %161 = or i64 -8737571476098842527, %158
  %162 = add i64 %160, %161
  %163 = and i64 %8, 1453737160565096365
  %164 = xor i64 %8, -1
  %165 = or i64 -1453737160565096366, %164
  %166 = xor i64 %165, -1
  %167 = and i64 %166, -1
  %168 = or i64 %.reload27, 2170722746852527438
  %169 = xor i64 %.reload27, -1
  %170 = and i64 2170722746852527438, %169
  %171 = add i64 %170, %.reload27
  %172 = xor i64 -1955586991970029974, %168
  %173 = xor i64 %172, %167
  %174 = xor i64 %173, %171
  %175 = xor i64 %174, %162
  %176 = xor i64 %175, %163
  %177 = xor i64 %176, %159
  %178 = mul i64 %157, %177
  %179 = trunc i64 %178 to i32
  %180 = select i1 %139, i32 %179, i32 984876137
  %181 = xor i32 %180, 3
  store i32 %181, i32* %0, align 4
  %182 = call i8** @bf8275677406198937660(i32* %0)
  %183 = load i8*, i8** %182, align 8
  indirectbr i8* %183, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.4(i64* %.reg2mem49, [65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2490446019641129485, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.4, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2490446019641129485, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.4, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2490446019641129485, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.4, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13610838496713195053, i32 0, i64 %8
  store i8* bitcast (void ([65 x i32]*, i32, i1, i32, i32*)* @render.extracted.4.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf16247341047232784373(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload50 = load i64, i64* %.reg2mem49, align 8
  %13 = srem i64 %.reload50, 2
  %14 = icmp eq i64 %13, 0
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 29
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %18 = load i32, i32* %17, align 4
  %19 = srem i32 %16, %18
  %20 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 58
  %21 = load i32, i32* %20, align 4
  %22 = load i8*, i8** %6, align 8
  %23 = load i8, i8* %22, align 1
  %24 = xor i8 %23, -1
  %25 = or i64 %5, -1203560784280195522
  %26 = xor i64 %5, -1
  %27 = and i64 -1203560784280195522, %26
  %28 = add i64 %27, %5
  %29 = add i64 %8, -6696954010184577405
  %30 = sub i64 0, %8
  %31 = add i64 6696954010184577405, %30
  %32 = sub i64 0, %31
  %33 = and i64 %8, -3910692217804897549
  %34 = xor i64 %8, -1
  %35 = xor i64 -3910692217804897549, %34
  %36 = and i64 %35, -3910692217804897549
  %37 = xor i64 %36, %32
  %38 = xor i64 %37, -3568147648222749955
  %39 = xor i64 %38, %33
  %40 = xor i64 %39, %25
  %41 = xor i64 %40, %28
  %42 = xor i64 %41, %29
  %43 = or i64 %3, -8943672717034846739
  %44 = xor i64 %3, -1
  %45 = and i64 -8943672717034846739, %44
  %46 = add i64 %45, %3
  %47 = add i64 %3, -7694660874121132541
  %48 = add i64 -8080687814281200157, %3
  %49 = sub i64 %48, -386026940160067616
  %50 = xor i64 %46, %49
  %51 = xor i64 %50, 5916803875865416277
  %52 = xor i64 %51, %47
  %53 = xor i64 %52, %43
  %54 = mul i64 %42, %53
  %55 = trunc i64 %54 to i8
  %56 = or i8 %24, %55
  %57 = xor i8 %23, -1
  %58 = sub i8 %56, %57
  %59 = add i64 %8, 4057019708193460890
  %60 = and i64 4057019708193460890, %8
  %61 = or i64 4057019708193460890, %8
  %62 = add i64 %60, %61
  %63 = add i64 %8, 4692268409641797620
  %64 = sub i64 0, %8
  %65 = sub i64 4692268409641797620, %64
  %66 = add i64 %8, -2720497286422188364
  %67 = and i64 -2720497286422188364, %8
  %68 = or i64 -2720497286422188364, %8
  %69 = add i64 %67, %68
  %70 = xor i64 %66, %62
  %71 = xor i64 %70, %59
  %72 = xor i64 %71, %65
  %73 = xor i64 %72, %63
  %74 = xor i64 %73, %69
  %75 = xor i64 %74, 5473474328069977517
  %76 = or i64 %1, 5305558935886865710
  %77 = xor i64 %1, -1
  %78 = and i64 5305558935886865710, %77
  %79 = add i64 %78, %1
  %80 = and i64 %5, -3704824074065774618
  %81 = or i64 3704824074065774617, %5
  %82 = sub i64 %81, 3704824074065774617
  %83 = xor i64 %76, %80
  %84 = xor i64 %83, %79
  %85 = xor i64 %84, %82
  %86 = xor i64 %85, 0
  %87 = mul i64 %75, %86
  %88 = trunc i64 %87 to i8
  %89 = icmp eq i8 %58, %88
  %90 = mul i8 %23, %23
  %91 = xor i8 %90, %23
  %92 = and i8 %90, %23
  %93 = mul i8 2, %92
  %94 = add i8 %91, %93
  %95 = mul i8 %94, 3
  %96 = srem i8 %95, 2
  %97 = and i64 %1, -3050651230739540605
  %98 = xor i64 %1, -1
  %99 = or i64 3050651230739540604, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = or i64 %8, -4873368646242870223
  %103 = xor i64 %8, -1
  %104 = and i64 -4873368646242870223, %103
  %105 = add i64 %104, %8
  %106 = xor i64 %105, %97
  %107 = xor i64 %106, %102
  %108 = xor i64 %107, %101
  %109 = xor i64 %108, -2898385030041970127
  %110 = and i64 %8, -5282524794321831003
  %111 = xor i64 %8, -1
  %112 = xor i64 -5282524794321831003, %111
  %113 = and i64 %112, -5282524794321831003
  %114 = add i64 %5, 1313145300757475972
  %115 = add i64 4907491881366261150, %5
  %116 = sub i64 %115, 3594346580608785178
  %117 = xor i64 %110, 0
  %118 = xor i64 %117, %113
  %119 = xor i64 %118, %114
  %120 = xor i64 %119, %116
  %121 = mul i64 %109, %120
  %122 = trunc i64 %121 to i8
  %123 = icmp eq i8 %96, %122
  %124 = xor i1 %123, true
  %125 = and i1 %89, %124
  %126 = add i1 %125, %123
  %127 = add i64 %1, 2094458562501138046
  %128 = xor i64 2094458562501138046, %1
  %129 = and i64 2094458562501138046, %1
  %130 = mul i64 2, %129
  %131 = add i64 %128, %130
  %132 = or i64 %3, 8483103163535596276
  %133 = xor i64 %3, -1
  %134 = and i64 8483103163535596276, %133
  %135 = add i64 %134, %3
  %136 = add i64 %3, -6702047840668214532
  %137 = xor i64 -6702047840668214532, %3
  %138 = and i64 -6702047840668214532, %3
  %139 = mul i64 2, %138
  %140 = add i64 %137, %139
  %141 = xor i64 %135, %131
  %142 = xor i64 %141, %140
  %143 = xor i64 %142, %136
  %144 = xor i64 %143, %132
  %145 = xor i64 %144, -5617245749955945997
  %146 = xor i64 %145, %127
  %147 = and i64 %8, 5531441106884984859
  %148 = xor i64 %8, -1
  %149 = xor i64 5531441106884984859, %148
  %150 = and i64 %149, 5531441106884984859
  %151 = or i64 %8, -8088147521583551545
  %152 = xor i64 %8, -1
  %153 = and i64 -8088147521583551545, %152
  %154 = add i64 %153, %8
  %155 = and i64 %1, 3515026491484155321
  %156 = xor i64 %1, -1
  %157 = or i64 -3515026491484155322, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = xor i64 %147, %150
  %161 = xor i64 %160, %151
  %162 = xor i64 %161, -2734665835107964306
  %163 = xor i64 %162, %154
  %164 = xor i64 %163, %159
  %165 = xor i64 %164, %155
  %166 = mul i64 %146, %165
  %167 = trunc i64 %166 to i32
  %168 = select i1 %126, i32 %167, i32 984876137
  %169 = xor i32 %168, -1
  %170 = and i32 %169, 2008719428
  %171 = and i32 %168, -2008719429
  %172 = or i32 %170, %171
  %173 = xor i32 %172, 2008719431
  store i32 %173, i32* %0, align 4
  %174 = call i8** @bf16247341047232784373(i32* %0)
  %175 = load i8*, i8** %174, align 8
  indirectbr i8* %175, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %176 = call i8** @lk9507439604238316874(i64* %7)
  %177 = load i8*, i8** %176, align 8
  %178 = bitcast i8* %177 to void ([65 x i32]*, i32, i1, i32, i32*)*
  call void %178([65 x i32]* %lookupTable, i32 %21, i1 %14, i32 %19, i32* %dispatcher)
  %179 = load i8*, i8** %4, align 8
  %180 = load i8, i8* %179, align 1
  %181 = mul i8 %180, 2
  %182 = mul i8 %180, 2
  %183 = add i8 2, %182
  %184 = mul i8 %181, %183
  %185 = srem i8 %184, 4
  %186 = icmp eq i8 %185, 0
  %187 = mul i8 %180, %180
  %188 = mul i8 %187, %180
  %189 = sub i8 0, %180
  %190 = sub i8 %188, %189
  %191 = srem i8 %190, 2
  %192 = or i64 %1, 454611772030079559
  %193 = xor i64 %1, -1
  %194 = and i64 454611772030079559, %193
  %195 = add i64 %194, %1
  %196 = and i64 %13, 3492056407330121191
  %197 = xor i64 %13, -1
  %198 = xor i64 3492056407330121191, %197
  %199 = and i64 %198, 3492056407330121191
  %200 = sext i32 %169 to i64
  %201 = or i64 %200, 9092224374870574220
  %202 = and i64 9092224374870574220, %200
  %203 = xor i64 9092224374870574220, %200
  %204 = or i64 %202, %203
  %205 = xor i64 %199, %201
  %206 = xor i64 %205, %196
  %207 = xor i64 %206, -1044720622943994181
  %208 = xor i64 %207, %192
  %209 = xor i64 %208, %204
  %210 = xor i64 %209, %195
  %211 = sext i32 %16 to i64
  %212 = and i64 %211, 3900899833899161529
  %213 = or i64 -3900899833899161530, %211
  %214 = sub i64 %213, -3900899833899161530
  %215 = and i64 %1, 8621013850657362823
  %216 = xor i64 %1, -1
  %217 = or i64 -8621013850657362824, %216
  %218 = xor i64 %217, -1
  %219 = and i64 %218, -1
  %220 = add i64 %13, -5300143054476134287
  %221 = and i64 -5300143054476134287, %13
  %222 = or i64 -5300143054476134287, %13
  %223 = add i64 %221, %222
  %224 = xor i64 %214, %220
  %225 = xor i64 %224, %215
  %226 = xor i64 %225, %223
  %227 = xor i64 %226, 0
  %228 = xor i64 %227, %219
  %229 = xor i64 %228, %212
  %230 = mul i64 %210, %229
  %231 = trunc i64 %230 to i8
  %232 = icmp eq i8 %191, %231
  %233 = xor i1 %186, true
  %234 = or i1 %233, %232
  %235 = xor i1 %186, true
  %236 = sub i1 %234, %235
  %237 = select i1 %236, i32 984876136, i32 984876138
  %238 = sext i8 %96 to i64
  %239 = and i64 %238, -7845191193275996933
  %240 = xor i64 %238, -1
  %241 = xor i64 -7845191193275996933, %240
  %242 = and i64 %241, -7845191193275996933
  %243 = or i64 %1, -8725705742410710500
  %244 = xor i64 %1, -1
  %245 = and i64 %244, -4533430822055018970
  %246 = and i64 %1, 4533430822055018969
  %247 = or i64 %245, %246
  %248 = xor i64 5187606309571951674, %247
  %249 = xor i64 %1, -1
  %250 = or i64 8725705742410710499, %249
  %251 = xor i64 %250, -1
  %252 = and i64 %251, -1
  %253 = or i64 %248, %252
  %254 = sext i32 %169 to i64
  %255 = and i64 %254, -6051940069835339438
  %256 = or i64 6051940069835339437, %254
  %257 = sub i64 %256, 6051940069835339437
  %258 = xor i64 %239, %257
  %259 = xor i64 %258, 5077392191942405143
  %260 = xor i64 %259, %242
  %261 = xor i64 %260, %255
  %262 = xor i64 %261, %253
  %263 = xor i64 %262, %243
  %264 = and i64 %3, 8559818394556459337
  %265 = xor i64 %3, -1
  %266 = xor i64 8559818394556459337, %265
  %267 = and i64 %266, 8559818394556459337
  %268 = sext i8 %94 to i64
  %269 = add i64 %268, -2156112724445802263
  %270 = sub i64 0, %268
  %271 = sub i64 -2156112724445802263, %270
  %272 = xor i64 %264, -5929198255194466482
  %273 = xor i64 %272, %269
  %274 = xor i64 %273, %271
  %275 = xor i64 %274, %267
  %276 = mul i64 %263, %275
  %277 = trunc i64 %276 to i32
  %278 = xor i32 %237, %277
  store i32 %278, i32* %0, align 4
  %279 = call i8** @bf16247341047232784373(i32* %0)
  %280 = load i8*, i8** %279, align 8
  indirectbr i8* %280, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.5([65 x i32]* %lookupTable, i1* %.reg2mem51, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5538191963925840052, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.5, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5538191963925840052, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.5, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5538191963925840052, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.5, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7946610297334770699, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, [65 x i32]*, i1*, i32*)* @render.extracted.5.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf12628453140567268413(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = mul i64 109, 18
  %14 = and i64 %1, 5943412396265908125
  %15 = or i64 -5943412396265908126, %1
  %16 = sub i64 %15, -5943412396265908126
  %17 = or i64 %3, -4662297210956841778
  %18 = xor i64 %3, -1
  %19 = and i64 -4662297210956841778, %18
  %20 = add i64 %19, %3
  %21 = and i64 %3, 8392880090282530414
  %22 = xor i64 %3, -1
  %23 = or i64 -8392880090282530415, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = xor i64 %20, %17
  %27 = xor i64 %26, %16
  %28 = xor i64 %27, -2862283753079442311
  %29 = xor i64 %28, %25
  %30 = xor i64 %29, %14
  %31 = xor i64 %30, %21
  %32 = or i64 %1, 2111662457828986340
  %33 = and i64 2111662457828986340, %1
  %34 = xor i64 2111662457828986340, %1
  %35 = or i64 %33, %34
  %36 = or i64 %5, -4182720223631994847
  %37 = xor i64 %5, -1
  %38 = and i64 %37, 8557726423261789963
  %39 = and i64 %5, -8557726423261789964
  %40 = or i64 %38, %39
  %41 = xor i64 -5534685582947733718, %40
  %42 = xor i64 %5, -1
  %43 = or i64 4182720223631994846, %42
  %44 = xor i64 %43, -1
  %45 = and i64 %44, -1
  %46 = or i64 %41, %45
  %47 = xor i64 1481406504840586257, %35
  %48 = xor i64 %47, %36
  %49 = xor i64 %48, %46
  %50 = xor i64 %49, %32
  %51 = mul i64 %31, %50
  %52 = sdiv i64 48, %51
  %53 = and i64 %3, 5350080075583987945
  %54 = xor i64 %3, -1
  %55 = or i64 -5350080075583987946, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = add i64 %1, 8462138263985328176
  %59 = add i64 -5585654420816073332, %1
  %60 = sub i64 %59, 4398951388908150108
  %61 = add i64 %5, 7518412235343010648
  %62 = add i64 939598456026280647, %5
  %63 = sub i64 %62, -6578813779316730001
  %64 = xor i64 %58, %53
  %65 = xor i64 %64, %63
  %66 = xor i64 %65, 2754027186258152273
  %67 = xor i64 %66, %57
  %68 = xor i64 %67, %61
  %69 = xor i64 %68, %60
  %70 = or i64 %8, 701765914874776938
  %71 = and i64 701765914874776938, %8
  %72 = xor i64 701765914874776938, %8
  %73 = or i64 %71, %72
  %74 = add i64 %1, -7256761959101967569
  %75 = add i64 -7469294641784084445, %1
  %76 = add i64 %75, 212532682682116876
  %77 = and i64 %3, -4196977291820518283
  %78 = xor i64 %3, -1
  %79 = xor i64 -4196977291820518283, %78
  %80 = and i64 %79, -4196977291820518283
  %81 = xor i64 %80, %77
  %82 = xor i64 %81, -5788342597342481882
  %83 = xor i64 %82, %73
  %84 = xor i64 %83, %76
  %85 = xor i64 %84, %70
  %86 = xor i64 %85, %74
  %87 = mul i64 %69, %86
  %88 = sub i64 118, %87
  %89 = add i64 92, 0
  %90 = add i64 %5, 1455809746421251131
  %91 = sub i64 0, %5
  %92 = add i64 -1455809746421251131, %91
  %93 = sub i64 0, %92
  %94 = add i64 %8, 213780916831089240
  %95 = add i64 -3883490625234267954, %8
  %96 = add i64 %95, 4097271542065357194
  %97 = xor i64 -7211517326580828931, %93
  %98 = xor i64 %97, %94
  %99 = xor i64 %98, %96
  %100 = xor i64 %99, %90
  %101 = and i64 %1, -3285000600824273071
  %102 = xor i64 %1, -1
  %103 = or i64 3285000600824273070, %102
  %104 = xor i64 %103, -1
  %105 = and i64 %104, -1
  %106 = or i64 %5, -8980103860672593857
  %107 = and i64 -8980103860672593857, %5
  %108 = xor i64 -8980103860672593857, %5
  %109 = or i64 %107, %108
  %110 = or i64 %5, 5852763056000190951
  %111 = and i64 5852763056000190951, %5
  %112 = xor i64 5852763056000190951, %5
  %113 = or i64 %111, %112
  %114 = xor i64 8091765555043251860, %113
  %115 = xor i64 %114, %101
  %116 = xor i64 %115, %109
  %117 = xor i64 %116, %106
  %118 = xor i64 %117, %110
  %119 = xor i64 %118, %105
  %120 = mul i64 %100, %119
  %121 = add i64 %3, 684196962352533975
  %122 = sub i64 0, %3
  %123 = sub i64 684196962352533975, %122
  %124 = add i64 %1, 6807219399366043032
  %125 = add i64 -830203298045356076, %1
  %126 = sub i64 %125, -7637422697411399108
  %127 = and i64 %3, 6003054845840330976
  %128 = or i64 -6003054845840330977, %3
  %129 = sub i64 %128, -6003054845840330977
  %130 = xor i64 128700833109967929, %126
  %131 = xor i64 %130, %129
  %132 = xor i64 %131, %121
  %133 = xor i64 %132, %123
  %134 = xor i64 %133, %124
  %135 = xor i64 %134, %127
  %136 = and i64 %1, -5650107619721686770
  %137 = xor i64 %1, -1
  %138 = or i64 5650107619721686769, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = add i64 %8, 2321803218404142892
  %142 = add i64 -779089938518597250, %8
  %143 = sub i64 %142, -3100893156922740142
  %144 = add i64 %3, -151122435763982285
  %145 = sub i64 0, %3
  %146 = sub i64 -151122435763982285, %145
  %147 = xor i64 %140, %144
  %148 = xor i64 %147, %136
  %149 = xor i64 %148, %146
  %150 = xor i64 %149, %141
  %151 = xor i64 %150, -3338240830131437477
  %152 = xor i64 %151, %143
  %153 = mul i64 %135, %152
  %154 = sdiv i64 %120, %153
  %155 = mul i64 99, 111
  %156 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 19
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 17
  %159 = load i32, i32* %158, align 4
  %160 = load i8*, i8** %6, align 8
  %161 = load i8, i8* %160, align 1
  %162 = and i8 %161, 1
  %163 = icmp eq i8 %162, 1
  %164 = mul i8 %161, %161
  %165 = add i8 %164, %161
  %166 = srem i8 %165, 2
  %167 = icmp eq i8 %166, 0
  %168 = or i1 %163, %167
  %169 = select i1 %168, i32 984876138, i32 984876138
  %170 = xor i32 %169, 0
  store i32 %170, i32* %0, align 4
  %171 = call i8** @bf12628453140567268413(i32* %0)
  %172 = load i8*, i8** %171, align 8
  indirectbr i8* %172, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %173 = call i8** @lk574401168482893006(i64* %7)
  %174 = load i8*, i8** %173, align 8
  %175 = bitcast i8* %174 to void (i32, i32, [65 x i32]*, i1*, i32*)*
  call void %175(i32 %157, i32 %159, [65 x i32]* %lookupTable, i1* %.reg2mem51, i32* %dispatcher)
  %176 = load i8*, i8** %2, align 8
  %177 = load i8, i8* %176, align 1
  %178 = mul i8 %177, 2
  %179 = mul i8 %177, 2
  %180 = add i8 2, %179
  %181 = mul i8 %178, %180
  %182 = srem i8 %181, 4
  %183 = icmp eq i8 %182, 0
  %184 = mul i8 %177, %177
  %185 = mul i8 %184, %177
  %186 = xor i8 %185, %177
  %187 = and i8 %185, %177
  %188 = mul i8 2, %187
  %189 = add i8 %186, %188
  %190 = srem i8 %189, 2
  %191 = icmp eq i8 %190, 0
  %192 = xor i1 %183, true
  %193 = xor i1 %191, true
  %194 = or i1 %192, %193
  %195 = xor i1 %194, true
  %196 = and i1 %195, true
  %197 = select i1 %196, i32 984876138, i32 984876139
  %198 = and i64 %89, 1315509677556049422
  %199 = xor i64 %89, -1
  %200 = xor i64 1315509677556049422, %199
  %201 = and i64 %200, 1315509677556049422
  %202 = add i64 %8, 5106153766351727688
  %203 = sub i64 0, %8
  %204 = sub i64 5106153766351727688, %203
  %205 = sext i32 %157 to i64
  %206 = add i64 %205, -2385861445427745091
  %207 = sub i64 0, %205
  %208 = add i64 2385861445427745091, %207
  %209 = sub i64 0, %208
  %210 = xor i64 %209, %201
  %211 = xor i64 %210, %198
  %212 = xor i64 %211, %204
  %213 = xor i64 %212, 5062470853159359161
  %214 = xor i64 %213, %206
  %215 = xor i64 %214, %202
  %216 = or i64 %154, 4899514782480531399
  %217 = xor i64 %154, -1
  %218 = and i64 %217, -5069175715341274168
  %219 = and i64 %154, 5069175715341274167
  %220 = or i64 %218, %219
  %221 = xor i64 -407512857848247281, %220
  %222 = xor i64 %154, -1
  %223 = or i64 -4899514782480531400, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = or i64 %221, %225
  %227 = or i64 %5, -8808566072022816284
  %228 = xor i64 %5, -1
  %229 = and i64 %228, 3509428718193310689
  %230 = and i64 %5, -3509428718193310690
  %231 = or i64 %229, %230
  %232 = xor i64 -5372142342491680251, %231
  %233 = xor i64 %5, -1
  %234 = or i64 8808566072022816283, %233
  %235 = xor i64 %234, -1
  %236 = and i64 %235, -1
  %237 = or i64 %232, %236
  %238 = xor i64 %216, %227
  %239 = xor i64 %238, 3759880966686856073
  %240 = xor i64 %239, %226
  %241 = xor i64 %240, %237
  %242 = mul i64 %215, %241
  %243 = trunc i64 %242 to i32
  %244 = xor i32 %197, %243
  store i32 %244, i32* %0, align 4
  %245 = call i8** @bf12628453140567268413(i32* %0)
  %246 = load i8*, i8** %245, align 8
  indirectbr i8* %246, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.6([65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10542299481062128749, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.6, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10542299481062128749, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.6, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10542299481062128749, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.6, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14921214450106092310, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, i32*)* @render.extracted.6.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf2764126284152288184(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = or i64 %3, -5451802761556660805
  %14 = xor i64 %3, -1
  %15 = and i64 %14, 2152419213539427162
  %16 = and i64 %3, -2152419213539427163
  %17 = or i64 %15, %16
  %18 = xor i64 -6230268723017175327, %17
  %19 = xor i64 %3, -1
  %20 = or i64 5451802761556660804, %19
  %21 = xor i64 %20, -1
  %22 = and i64 %21, -1
  %23 = or i64 %18, %22
  %24 = and i64 %5, -7057778290858267407
  %25 = xor i64 %5, -1
  %26 = xor i64 -7057778290858267407, %25
  %27 = and i64 %26, -7057778290858267407
  %28 = xor i64 %13, %24
  %29 = xor i64 %28, %23
  %30 = xor i64 %29, -5827994464665457385
  %31 = xor i64 %30, %27
  %32 = add i64 %3, 4620305503738088276
  %33 = sub i64 0, %3
  %34 = sub i64 4620305503738088276, %33
  %35 = or i64 %8, -5364771150028003048
  %36 = xor i64 %8, -1
  %37 = and i64 %36, 8941381245969840226
  %38 = and i64 %8, -8941381245969840227
  %39 = or i64 %37, %38
  %40 = xor i64 -3919631621433716358, %39
  %41 = xor i64 %8, -1
  %42 = or i64 5364771150028003047, %41
  %43 = xor i64 %42, -1
  %44 = and i64 %43, -1
  %45 = or i64 %40, %44
  %46 = or i64 %5, -9184745498726480855
  %47 = and i64 -9184745498726480855, %5
  %48 = xor i64 -9184745498726480855, %5
  %49 = or i64 %47, %48
  %50 = xor i64 %35, %32
  %51 = xor i64 %50, %34
  %52 = xor i64 %51, %46
  %53 = xor i64 %52, %49
  %54 = xor i64 %53, %45
  %55 = xor i64 %54, 3051956190607925182
  %56 = mul i64 %31, %55
  %57 = mul i64 109, %56
  %58 = add i64 %1, -6856697034495128186
  %59 = and i64 -6856697034495128186, %1
  %60 = or i64 -6856697034495128186, %1
  %61 = add i64 %59, %60
  %62 = or i64 %1, 6913904157165838524
  %63 = xor i64 %1, -1
  %64 = and i64 6913904157165838524, %63
  %65 = add i64 %64, %1
  %66 = xor i64 %61, %65
  %67 = xor i64 %66, %62
  %68 = xor i64 %67, %58
  %69 = xor i64 %68, -4685341760026148847
  %70 = or i64 %8, -5649525177549742347
  %71 = and i64 -5649525177549742347, %8
  %72 = xor i64 -5649525177549742347, %8
  %73 = or i64 %71, %72
  %74 = or i64 %5, 5916282926952358319
  %75 = and i64 5916282926952358319, %5
  %76 = xor i64 5916282926952358319, %5
  %77 = or i64 %75, %76
  %78 = and i64 %1, 232130374066662420
  %79 = xor i64 %1, -1
  %80 = or i64 -232130374066662421, %79
  %81 = xor i64 %80, -1
  %82 = and i64 %81, -1
  %83 = xor i64 %70, %74
  %84 = xor i64 %83, %73
  %85 = xor i64 %84, %77
  %86 = xor i64 %85, %78
  %87 = xor i64 %86, %82
  %88 = xor i64 %87, 2717537783814368560
  %89 = mul i64 %69, %88
  %90 = sdiv i64 %89, 9
  %91 = sub i64 3982849826972944260, 3982849826972944148
  %92 = add i64 %8, 1417570974696329311
  %93 = add i64 -9212948065841817407, %8
  %94 = add i64 %93, -7816225033171404898
  %95 = or i64 %8, -983052926728806044
  %96 = and i64 -983052926728806044, %8
  %97 = xor i64 -983052926728806044, %8
  %98 = or i64 %96, %97
  %99 = and i64 %1, -6641496556303510115
  %100 = or i64 6641496556303510114, %1
  %101 = sub i64 %100, 6641496556303510114
  %102 = xor i64 %99, %95
  %103 = xor i64 %102, %94
  %104 = xor i64 %103, -6281506556233425879
  %105 = xor i64 %104, %98
  %106 = xor i64 %105, %101
  %107 = xor i64 %106, %92
  %108 = or i64 %1, 3369418234816282723
  %109 = xor i64 %1, -1
  %110 = and i64 %109, 1588894305486602142
  %111 = and i64 %1, -1588894305486602143
  %112 = or i64 %110, %111
  %113 = xor i64 4093339933913759741, %112
  %114 = xor i64 %1, -1
  %115 = or i64 -3369418234816282724, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = or i64 %113, %117
  %119 = or i64 %5, -621634951185590704
  %120 = xor i64 %5, -1
  %121 = and i64 -621634951185590704, %120
  %122 = add i64 %121, %5
  %123 = xor i64 %122, %118
  %124 = xor i64 %123, 0
  %125 = xor i64 %124, %108
  %126 = xor i64 %125, %119
  %127 = mul i64 %107, %126
  %128 = add i64 %127, 92
  %129 = add i64 %5, 4927954812009034286
  %130 = sub i64 0, %5
  %131 = sub i64 4927954812009034286, %130
  %132 = add i64 %5, -6150559405160152685
  %133 = sub i64 0, %5
  %134 = sub i64 -6150559405160152685, %133
  %135 = xor i64 %131, -5328365814184808811
  %136 = xor i64 %135, %129
  %137 = xor i64 %136, %132
  %138 = xor i64 %137, %134
  %139 = add i64 %5, -4706136800952733165
  %140 = add i64 -1366323631849128115, %5
  %141 = sub i64 %140, 3339813169103605050
  %142 = and i64 %1, -1279819691745547570
  %143 = or i64 1279819691745547569, %1
  %144 = sub i64 %143, 1279819691745547569
  %145 = or i64 %5, 7704921255558725189
  %146 = xor i64 %5, -1
  %147 = and i64 %146, -2226562644081416780
  %148 = and i64 %5, 2226562644081416779
  %149 = or i64 %147, %148
  %150 = xor i64 -8361838579987489807, %149
  %151 = xor i64 %5, -1
  %152 = or i64 -7704921255558725190, %151
  %153 = xor i64 %152, -1
  %154 = and i64 %153, -1
  %155 = or i64 %150, %154
  %156 = xor i64 %155, %139
  %157 = xor i64 %156, 992833145971466804
  %158 = xor i64 %157, %144
  %159 = xor i64 %158, %141
  %160 = xor i64 %159, %142
  %161 = xor i64 %160, %145
  %162 = mul i64 %138, %161
  %163 = add i64 %3, 3722299704114197670
  %164 = add i64 1810814126825875123, %3
  %165 = add i64 %164, 1911485577288322547
  %166 = add i64 %8, 2055145665407694113
  %167 = add i64 -226328711904911754, %8
  %168 = add i64 %167, 2281474377312605867
  %169 = and i64 %3, -4595091565119657067
  %170 = xor i64 %3, -1
  %171 = or i64 4595091565119657066, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = xor i64 %169, %173
  %175 = xor i64 %174, %168
  %176 = xor i64 %175, -4982666302506555603
  %177 = xor i64 %176, %166
  %178 = xor i64 %177, %163
  %179 = xor i64 %178, %165
  %180 = and i64 %3, 1461433798381858390
  %181 = or i64 -1461433798381858391, %3
  %182 = sub i64 %181, -1461433798381858391
  %183 = and i64 %1, 904524814575688691
  %184 = xor i64 %1, -1
  %185 = xor i64 904524814575688691, %184
  %186 = and i64 %185, 904524814575688691
  %187 = xor i64 %182, %183
  %188 = xor i64 %187, %180
  %189 = xor i64 %188, %186
  %190 = xor i64 %189, -4623934559051519185
  %191 = mul i64 %179, %190
  %192 = sdiv i64 %162, %191
  %193 = mul i64 99, 111
  %194 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 33
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %197 = load i32, i32* %196, align 4
  %198 = load i8*, i8** %4, align 8
  %199 = load i8, i8* %198, align 1
  %200 = and i64 %5, 225904638728496476
  %201 = xor i64 %5, -1
  %202 = xor i64 225904638728496476, %201
  %203 = and i64 %202, 225904638728496476
  %204 = and i64 %8, -5191414428627496508
  %205 = xor i64 %8, -1
  %206 = or i64 5191414428627496507, %205
  %207 = xor i64 %206, -1
  %208 = and i64 %207, -1
  %209 = xor i64 %208, %200
  %210 = xor i64 %209, %204
  %211 = xor i64 %210, %203
  %212 = xor i64 %211, -1166803450857116151
  %213 = add i64 %5, 4364004816986785887
  %214 = sub i64 0, %5
  %215 = sub i64 4364004816986785887, %214
  %216 = or i64 %5, 4369983562838841244
  %217 = xor i64 %5, -1
  %218 = and i64 %217, -4545104937217281324
  %219 = and i64 %5, 4545104937217281323
  %220 = or i64 %218, %219
  %221 = xor i64 -267463048308710072, %220
  %222 = xor i64 %5, -1
  %223 = or i64 -4369983562838841245, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = or i64 %221, %225
  %227 = add i64 %5, -361305491987247219
  %228 = xor i64 -361305491987247219, %5
  %229 = and i64 -361305491987247219, %5
  %230 = mul i64 2, %229
  %231 = add i64 %228, %230
  %232 = xor i64 %215, %213
  %233 = xor i64 %232, %231
  %234 = xor i64 %233, -1794039643375550407
  %235 = xor i64 %234, %226
  %236 = xor i64 %235, %227
  %237 = xor i64 %236, %216
  %238 = mul i64 %212, %237
  %239 = trunc i64 %238 to i8
  %240 = and i8 %199, %239
  %241 = icmp eq i8 %240, 1
  %242 = mul i8 %199, %199
  %243 = add i8 %242, %199
  %244 = or i64 %3, -4655156767369343398
  %245 = and i64 -4655156767369343398, %3
  %246 = xor i64 -4655156767369343398, %3
  %247 = or i64 %245, %246
  %248 = or i64 %1, 314370045734710292
  %249 = xor i64 %1, -1
  %250 = and i64 %249, 9032835296450329280
  %251 = and i64 %1, -9032835296450329281
  %252 = or i64 %250, %251
  %253 = xor i64 8721165960779814612, %252
  %254 = xor i64 %1, -1
  %255 = or i64 -314370045734710293, %254
  %256 = xor i64 %255, -1
  %257 = and i64 %256, -1
  %258 = or i64 %253, %257
  %259 = or i64 %1, -8473098648648895024
  %260 = xor i64 %1, -1
  %261 = and i64 -8473098648648895024, %260
  %262 = add i64 %261, %1
  %263 = xor i64 %244, %262
  %264 = xor i64 %263, %259
  %265 = xor i64 %264, %247
  %266 = xor i64 %265, 2655172651004994207
  %267 = xor i64 %266, %258
  %268 = xor i64 %267, %248
  %269 = or i64 %5, 2005111710662497956
  %270 = and i64 2005111710662497956, %5
  %271 = xor i64 2005111710662497956, %5
  %272 = or i64 %270, %271
  %273 = add i64 %5, 5689635430299230354
  %274 = add i64 -4370873619407195098, %5
  %275 = sub i64 %274, 8386235024003126164
  %276 = or i64 %1, 5678207331501435057
  %277 = xor i64 %1, -1
  %278 = and i64 %277, -2809369993267056735
  %279 = and i64 %1, 2809369993267056734
  %280 = or i64 %278, %279
  %281 = xor i64 -7508037570005727472, %280
  %282 = xor i64 %1, -1
  %283 = or i64 -5678207331501435058, %282
  %284 = xor i64 %283, -1
  %285 = and i64 %284, -1
  %286 = or i64 %281, %285
  %287 = xor i64 %273, %276
  %288 = xor i64 %287, %275
  %289 = xor i64 %288, %269
  %290 = xor i64 %289, %286
  %291 = xor i64 %290, %272
  %292 = xor i64 %291, -5296390360973643074
  %293 = mul i64 %268, %292
  %294 = trunc i64 %293 to i8
  %295 = srem i8 %243, %294
  %296 = icmp eq i8 %295, 0
  %297 = or i1 %241, %296
  %298 = and i64 %5, -1089290990232120532
  %299 = xor i64 %5, -1
  %300 = xor i64 -1089290990232120532, %299
  %301 = and i64 %300, -1089290990232120532
  %302 = or i64 %5, 8099497073228928200
  %303 = xor i64 %5, -1
  %304 = and i64 8099497073228928200, %303
  %305 = add i64 %304, %5
  %306 = and i64 %1, 7862351517069198179
  %307 = xor i64 %1, -1
  %308 = or i64 -7862351517069198180, %307
  %309 = xor i64 %308, -1
  %310 = and i64 %309, -1
  %311 = xor i64 %302, %305
  %312 = xor i64 %311, %301
  %313 = xor i64 %312, 2782241522338991363
  %314 = xor i64 %313, %298
  %315 = xor i64 %314, %310
  %316 = xor i64 %315, %306
  %317 = add i64 %5, -9087622896117089333
  %318 = add i64 -1628181713878129876, %5
  %319 = sub i64 %318, 7459441182238959457
  %320 = add i64 %8, 2623466218752010923
  %321 = add i64 4660439403211971239, %8
  %322 = sub i64 %321, 2036973184459960316
  %323 = add i64 %8, 72373213775653440
  %324 = add i64 -6062118183632442605, %8
  %325 = add i64 %324, 6134491397408096045
  %326 = xor i64 %323, -7097235644437575047
  %327 = xor i64 %326, %317
  %328 = xor i64 %327, %319
  %329 = xor i64 %328, %325
  %330 = xor i64 %329, %322
  %331 = xor i64 %330, %320
  %332 = mul i64 %316, %331
  %333 = trunc i64 %332 to i32
  %334 = select i1 %297, i32 984876137, i32 %333
  %335 = or i32 %334, 2
  %336 = and i32 %334, 2
  %337 = sub i32 %335, %336
  store i32 %337, i32* %0, align 4
  %338 = call i8** @bf2764126284152288184(i32* %0)
  %339 = load i8*, i8** %338, align 8
  indirectbr i8* %339, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %340 = call i8** @lk17710973302758990871(i64* %7)
  %341 = load i8*, i8** %340, align 8
  %342 = bitcast i8* %341 to void (i32, i32, i32*)*
  call void %342(i32 %195, i32 %197, i32* %dispatcher)
  %343 = load i8*, i8** %2, align 8
  %344 = load i8, i8* %343, align 1
  %345 = mul i8 %344, 2
  %346 = mul i8 %344, 2
  %347 = add i8 2, %346
  %348 = mul i8 %345, %347
  %349 = srem i8 %348, 4
  %350 = icmp eq i8 %349, 0
  %351 = mul i8 %344, %344
  %352 = sub i8 0, %344
  %353 = sub i8 %351, %352
  %354 = srem i8 %353, 2
  %355 = icmp eq i8 %354, 0
  %356 = xor i1 %355, true
  %357 = and i1 %350, %356
  %358 = add i1 %357, %355
  %359 = select i1 %358, i32 984876139, i32 984876137
  %360 = xor i32 %359, 2
  store i32 %360, i32* %0, align 4
  %361 = call i8** @bf2764126284152288184(i32* %0)
  %362 = load i8*, i8** %361, align 8
  indirectbr i8* %362, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.7([65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3344898759500944034, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.7, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3344898759500944034, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.7, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3344898759500944034, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.7, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2676540328822753780, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, i32*)* @render.extracted.7.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf18153841645268142413(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 40
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %6, align 8
  %18 = load i8, i8* %17, align 1
  %19 = mul i8 %18, %18
  %20 = add i8 %19, %18
  %21 = mul i8 %20, 3
  %22 = srem i8 %21, 2
  %23 = icmp eq i8 %22, 0
  %24 = mul i8 %18, %18
  %25 = add i8 %24, %18
  %26 = srem i8 %25, 2
  %27 = icmp eq i8 %26, 0
  %28 = xor i1 %23, true
  %29 = or i1 %28, %27
  %30 = xor i1 %23, true
  %31 = sub i1 %29, %30
  %32 = select i1 %31, i32 984876138, i32 984876136
  %33 = xor i32 %32, 2
  store i32 %33, i32* %0, align 4
  %34 = call i8** @bf18153841645268142413(i32* %0)
  %35 = load i8*, i8** %34, align 8
  indirectbr i8* %35, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %36 = call i8** @lk13131460919683370831(i64* %7)
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast i8* %37 to void (i32, i32, i32*)*
  call void %38(i32 %14, i32 %16, i32* %dispatcher)
  %39 = load i8*, i8** %4, align 8
  %40 = load i8, i8* %39, align 1
  %41 = mul i8 %40, 2
  %42 = mul i8 %40, 2
  %43 = xor i8 2, %42
  %44 = sext i8 %26 to i64
  %45 = or i64 %44, -3297586793396186084
  %46 = xor i64 %44, -1
  %47 = and i64 -3297586793396186084, %46
  %48 = add i64 %47, %44
  %49 = sext i8 %20 to i64
  %50 = and i64 %49, 6887852288852229756
  %51 = or i64 -6887852288852229757, %49
  %52 = sub i64 %51, -6887852288852229757
  %53 = xor i64 %52, -6907111177983652125
  %54 = xor i64 %53, %45
  %55 = xor i64 %54, %50
  %56 = xor i64 %55, %48
  %57 = sext i32 %14 to i64
  %58 = and i64 %57, -432945636812054471
  %59 = xor i64 %57, -1
  %60 = or i64 432945636812054470, %59
  %61 = xor i64 %60, -1
  %62 = and i64 %61, -1
  %63 = sext i32 %33 to i64
  %64 = or i64 %63, -4256762427976183427
  %65 = xor i64 %63, -1
  %66 = and i64 -4256762427976183427, %65
  %67 = add i64 %66, %63
  %68 = sext i8 %25 to i64
  %69 = or i64 %68, -7189110706796942186
  %70 = and i64 -7189110706796942186, %68
  %71 = xor i64 -7189110706796942186, %68
  %72 = or i64 %70, %71
  %73 = xor i64 %69, %64
  %74 = xor i64 %73, %58
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, %72
  %77 = xor i64 %76, 6261623712442240406
  %78 = xor i64 %77, %62
  %79 = mul i64 %56, %78
  %80 = trunc i64 %79 to i8
  %81 = and i8 %80, %42
  %82 = mul i8 2, %81
  %83 = add i8 %43, %82
  %84 = mul i8 %41, %83
  %85 = srem i8 %84, 4
  %86 = icmp eq i8 %85, 0
  %87 = mul i8 %40, %40
  %88 = add i8 %87, %40
  %89 = srem i8 %88, 2
  %90 = icmp eq i8 %89, 0
  %91 = sext i8 %20 to i64
  %92 = or i64 %91, 2918701246836039111
  %93 = xor i64 %91, -1
  %94 = and i64 2918701246836039111, %93
  %95 = add i64 %94, %91
  %96 = sext i8 %21 to i64
  %97 = or i64 %96, -8176411458131765085
  %98 = xor i64 %96, -1
  %99 = and i64 -8176411458131765085, %98
  %100 = add i64 %99, %96
  %101 = xor i64 %97, %95
  %102 = xor i64 %101, -7697896841973452939
  %103 = xor i64 %102, %92
  %104 = xor i64 %103, %100
  %105 = sext i8 %22 to i64
  %106 = or i64 %105, -1021164710465286863
  %107 = xor i64 %105, -1
  %108 = and i64 -1021164710465286863, %107
  %109 = add i64 %108, %105
  %110 = sext i32 %33 to i64
  %111 = add i64 %110, -1076122336422422223
  %112 = add i64 -307811160680732993, %110
  %113 = add i64 %112, -768311175741689230
  %114 = xor i64 %111, %109
  %115 = xor i64 %114, 1569179265235151069
  %116 = xor i64 %115, %113
  %117 = xor i64 %116, %106
  %118 = mul i64 %104, %117
  %119 = trunc i64 %118 to i1
  %120 = xor i1 %90, %119
  %121 = and i1 %86, %120
  %122 = add i1 %121, %90
  %123 = select i1 %122, i32 984876138, i32 984876138
  %124 = xor i32 %123, 0
  store i32 %124, i32* %0, align 4
  %125 = call i8** @bf18153841645268142413(i32* %0)
  %126 = load i8*, i8** %125, align 8
  indirectbr i8* %126, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.8([65 x i32]* %lookupTable, i1* %.reg2mem54, i32* %dispatcher, i64* %.reg2mem92, i64* %.reg2mem101, i32* %.ph.reg2mem) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable721320004813605145, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.8, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable721320004813605145, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.8, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable721320004813605145, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.8, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13930894579797800242, i32 0, i64 %8
  store i8* bitcast (void (i32*)* @render.extracted.8.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf13060471314557800498(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 61
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %16 = load i32, i32* %15, align 4
  %17 = srem i32 %14, %16
  %18 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 23
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 21
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 0, %19
  %23 = sub i32 0, %21
  %24 = add i32 %22, %23
  %25 = or i64 %3, 7409950601085899118
  %26 = and i64 7409950601085899118, %3
  %27 = xor i64 7409950601085899118, %3
  %28 = or i64 %26, %27
  %29 = and i64 %3, -3097206422777044618
  %30 = or i64 3097206422777044617, %3
  %31 = sub i64 %30, 3097206422777044617
  %32 = xor i64 %28, %29
  %33 = xor i64 %32, %31
  %34 = xor i64 %33, 4193345896440349387
  %35 = xor i64 %34, %25
  %36 = add i64 %3, 4341780137292389063
  %37 = sub i64 0, %3
  %38 = sub i64 4341780137292389063, %37
  %39 = add i64 %1, -5383750139764442340
  %40 = add i64 2995872666162640747, %1
  %41 = add i64 %40, -8379622805927083087
  %42 = and i64 %3, 3202178347164919221
  %43 = xor i64 %3, -1
  %44 = xor i64 3202178347164919221, %43
  %45 = and i64 %44, 3202178347164919221
  %46 = xor i64 %36, %39
  %47 = xor i64 %46, %45
  %48 = xor i64 %47, 0
  %49 = xor i64 %48, %42
  %50 = xor i64 %49, %38
  %51 = xor i64 %50, %41
  %52 = mul i64 %35, %51
  %53 = trunc i64 %52 to i32
  %54 = sub i32 %53, %24
  %.reload55 = load i1, i1* %.reg2mem54, align 1
  %55 = select i1 %.reload55, i32 %17, i32 %54
  store i32 %55, i32* %dispatcher, align 4
  %.reload94 = load i64, i64* %.reg2mem92, align 8
  store i64 %.reload94, i64* %.reg2mem101, align 8
  %56 = load i8*, i8** %6, align 8
  %57 = load i8, i8* %56, align 1
  %58 = mul i8 %57, 2
  %59 = mul i8 %57, 2
  %60 = xor i8 2, %59
  %61 = and i8 2, %59
  %62 = mul i8 2, %61
  %63 = add i8 %60, %62
  %64 = mul i8 39, %63
  %65 = add i8 23, %64
  %66 = mul i8 -105, %65
  %67 = add i8 111, %66
  %68 = mul i8 %58, %67
  %69 = srem i8 %68, 4
  %70 = icmp eq i8 %69, 0
  %71 = mul i8 %57, %57
  %72 = mul i8 %71, %57
  %73 = add i8 %72, %57
  %74 = add i64 %3, -1815593515269048410
  %75 = and i64 -1815593515269048410, %3
  %76 = or i64 -1815593515269048410, %3
  %77 = add i64 %75, %76
  %78 = and i64 %5, -8030818093241928664
  %79 = or i64 8030818093241928663, %5
  %80 = sub i64 %79, 8030818093241928663
  %81 = or i64 %8, 6206597462209304995
  %82 = xor i64 %8, -1
  %83 = and i64 6206597462209304995, %82
  %84 = add i64 %83, %8
  %85 = xor i64 %78, %80
  %86 = xor i64 %85, %74
  %87 = xor i64 %86, 7856629933118137305
  %88 = xor i64 %87, %77
  %89 = xor i64 %88, %84
  %90 = xor i64 %89, %81
  %91 = or i64 %8, -1591532416754199906
  %92 = xor i64 %8, -1
  %93 = and i64 -1591532416754199906, %92
  %94 = add i64 %93, %8
  %95 = and i64 %8, -2336949388647815915
  %96 = xor i64 %8, -1
  %97 = xor i64 -2336949388647815915, %96
  %98 = and i64 %97, -2336949388647815915
  %99 = add i64 %5, 7730332838071560265
  %100 = and i64 7730332838071560265, %5
  %101 = or i64 7730332838071560265, %5
  %102 = add i64 %100, %101
  %103 = xor i64 %102, %98
  %104 = xor i64 %103, %99
  %105 = xor i64 %104, %91
  %106 = xor i64 %105, -8752518094569187118
  %107 = xor i64 %106, %95
  %108 = xor i64 %107, %94
  %109 = mul i64 %90, %108
  %110 = trunc i64 %109 to i8
  %111 = srem i8 %73, %110
  %112 = icmp eq i8 %111, 0
  %113 = and i1 %70, %112
  %114 = select i1 %113, i32 984876138, i32 984876136
  %115 = xor i32 %114, -1
  %116 = and i32 %115, -1518858262
  %117 = and i32 %114, 1518858261
  %118 = or i32 %116, %117
  %119 = xor i32 %118, -1518858264
  store i32 %119, i32* %0, align 4
  %120 = call i8** @bf13060471314557800498(i32* %0)
  %121 = load i8*, i8** %120, align 8
  indirectbr i8* %121, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %122 = call i8** @lk7850175081304604761(i64* %7)
  %123 = load i8*, i8** %122, align 8
  %124 = bitcast i8* %123 to void (i32*)*
  call void %124(i32* %.ph.reg2mem)
  %125 = load i8*, i8** %4, align 8
  %126 = load i8, i8* %125, align 1
  %127 = mul i8 %126, %126
  %128 = add i8 %127, %126
  %129 = sext i8 %64 to i64
  %130 = or i64 %129, 474349172938748482
  %131 = and i64 474349172938748482, %129
  %132 = xor i64 474349172938748482, %129
  %133 = or i64 %131, %132
  %134 = sext i32 %23 to i64
  %135 = and i64 %134, -2186621327836043104
  %136 = or i64 2186621327836043103, %134
  %137 = sub i64 %136, 2186621327836043103
  %138 = xor i64 %133, %137
  %139 = xor i64 %138, %135
  %140 = xor i64 %139, 543647278088604775
  %141 = xor i64 %140, %130
  %142 = sext i8 %69 to i64
  %143 = add i64 %142, -1333718971489713857
  %144 = sub i64 0, %142
  %145 = add i64 1333718971489713857, %144
  %146 = sub i64 0, %145
  %147 = sext i8 %66 to i64
  %148 = and i64 %147, -6866344634863620554
  %149 = xor i64 %147, -1
  %150 = or i64 6866344634863620553, %149
  %151 = xor i64 %150, -1
  %152 = and i64 %151, -1
  %153 = xor i64 %148, %146
  %154 = xor i64 %153, 4022526032897650181
  %155 = xor i64 %154, %152
  %156 = xor i64 %155, %143
  %157 = mul i64 %141, %156
  %158 = trunc i64 %157 to i8
  %159 = mul i8 %128, %158
  %160 = srem i8 %159, 2
  %161 = icmp eq i8 %160, 0
  %162 = mul i8 %126, %126
  %163 = add i8 %162, %126
  %164 = sext i8 %65 to i64
  %165 = and i64 %164, -4737582290876635031
  %166 = xor i64 %164, -1
  %167 = xor i64 -4737582290876635031, %166
  %168 = and i64 %167, -4737582290876635031
  %169 = sext i8 %71 to i64
  %170 = add i64 %169, 4080767431048518805
  %171 = add i64 -2169107477552965988, %169
  %172 = add i64 %171, 6249874908601484793
  %173 = sext i8 %59 to i64
  %174 = add i64 %173, -3471330706928271942
  %175 = add i64 4684017732085961115, %173
  %176 = add i64 %175, -8155348439014233057
  %177 = xor i64 %174, %165
  %178 = xor i64 %177, -4985495348991183317
  %179 = xor i64 %178, %168
  %180 = xor i64 %179, %172
  %181 = xor i64 %180, %170
  %182 = xor i64 %181, %176
  %183 = sext i32 %55 to i64
  %184 = and i64 %183, -6312867745957574049
  %185 = xor i64 %183, -1
  %186 = or i64 6312867745957574048, %185
  %187 = xor i64 %186, -1
  %188 = and i64 %187, -1
  %189 = add i64 %3, -5194621113986735701
  %190 = add i64 -116674241174377291, %3
  %191 = sub i64 %190, 5077946872812358410
  %192 = xor i64 -6675039974174183162, %191
  %193 = xor i64 %192, %184
  %194 = xor i64 %193, %189
  %195 = xor i64 %194, %188
  %196 = mul i64 %182, %195
  %197 = trunc i64 %196 to i8
  %198 = srem i8 %163, %197
  %199 = icmp eq i8 %198, 0
  %200 = xor i1 %161, true
  %201 = or i1 %200, %199
  %202 = xor i1 %161, true
  %203 = sub i1 %201, %202
  %204 = select i1 %203, i32 984876139, i32 984876139
  %205 = and i64 %1, 622855169088193281
  %206 = or i64 -622855169088193282, %1
  %207 = sub i64 %206, -622855169088193282
  %208 = sext i8 %61 to i64
  %209 = or i64 %208, -144501168274763133
  %210 = and i64 -144501168274763133, %208
  %211 = xor i64 -144501168274763133, %208
  %212 = or i64 %210, %211
  %213 = sext i8 %59 to i64
  %214 = add i64 %213, -3656023790470168575
  %215 = sub i64 0, %213
  %216 = add i64 3656023790470168575, %215
  %217 = sub i64 0, %216
  %218 = xor i64 -5215886696865152703, %217
  %219 = xor i64 %218, %207
  %220 = xor i64 %219, %214
  %221 = xor i64 %220, %212
  %222 = xor i64 %221, %209
  %223 = xor i64 %222, %205
  %224 = sext i32 %16 to i64
  %225 = add i64 %224, -7824373867327206440
  %226 = sub i64 0, %224
  %227 = sub i64 -7824373867327206440, %226
  %228 = sext i32 %117 to i64
  %229 = add i64 %228, 6046812227655578210
  %230 = xor i64 6046812227655578210, %228
  %231 = and i64 6046812227655578210, %228
  %232 = mul i64 2, %231
  %233 = add i64 %230, %232
  %234 = add i64 %3, 1540330446793596077
  %235 = add i64 -4791023013336739, %3
  %236 = sub i64 %235, -1545121469806932816
  %237 = xor i64 9148980369125355839, %225
  %238 = xor i64 %237, %234
  %239 = xor i64 %238, %236
  %240 = xor i64 %239, %229
  %241 = xor i64 %240, %233
  %242 = xor i64 %241, %227
  %243 = mul i64 %223, %242
  %244 = trunc i64 %243 to i32
  %245 = xor i32 %204, %244
  %246 = and i32 %245, -868155007
  %247 = and i32 %204, 868155006
  %248 = or i32 %246, %247
  %249 = sext i32 %117 to i64
  %250 = or i64 %249, 8223086258493795557
  %251 = and i64 8223086258493795557, %249
  %252 = xor i64 8223086258493795557, %249
  %253 = or i64 %251, %252
  %254 = sext i8 %67 to i64
  %255 = or i64 %254, -7011275220929746491
  %256 = xor i64 %254, -1
  %257 = and i64 %256, -7490437046020816210
  %258 = and i64 %254, 7490437046020816209
  %259 = or i64 %257, %258
  %260 = xor i64 485946086779464555, %259
  %261 = xor i64 %254, -1
  %262 = or i64 7011275220929746490, %261
  %263 = xor i64 %262, -1
  %264 = and i64 %263, -1
  %265 = or i64 %260, %264
  %266 = xor i64 %255, %253
  %267 = xor i64 %266, %265
  %268 = xor i64 %267, 6529361840805033677
  %269 = xor i64 %268, %250
  %270 = sext i32 %14 to i64
  %271 = and i64 %270, 5902337596587344342
  %272 = xor i64 %270, -1
  %273 = xor i64 5902337596587344342, %272
  %274 = and i64 %273, 5902337596587344342
  %275 = sext i8 %68 to i64
  %276 = and i64 %275, 3978785273610160915
  %277 = xor i64 %275, -1
  %278 = xor i64 3978785273610160915, %277
  %279 = and i64 %278, 3978785273610160915
  %280 = sext i8 %67 to i64
  %281 = and i64 %280, -5453694751679823668
  %282 = or i64 5453694751679823667, %280
  %283 = sub i64 %282, 5453694751679823667
  %284 = xor i64 %283, %274
  %285 = xor i64 %284, %271
  %286 = xor i64 %285, %279
  %287 = xor i64 %286, %276
  %288 = xor i64 %287, 1669569049869430149
  %289 = xor i64 %288, %281
  %290 = mul i64 %269, %289
  %291 = trunc i64 %290 to i32
  %292 = xor i32 %248, %291
  store i32 %292, i32* %0, align 4
  %293 = call i8** @bf13060471314557800498(i32* %0)
  %294 = load i8*, i8** %293, align 8
  indirectbr i8* %294, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.9(i64* %.reg2mem56, i8* %0, i32* %.reg2mem70, i64* %.reg2mem73, i64* %.reg2mem78, [65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876138)
  %3 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6411101475104065434, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.9, %loopEnd.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876137)
  %5 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6411101475104065434, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.9, %codeRepl), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876139)
  %7 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6411101475104065434, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.9, %13), i8** %7, align 8
  %8 = alloca i64, align 8
  %9 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %10 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14804151815533204912, i32 0, i64 %9
  store i8* bitcast (void (i32*, i32, i1, i32, i32*)* @render.extracted.9.extracted to i8*), i8** %10, align 8
  store i32 984876139, i32* %1, align 4
  %11 = call i8** @bf7851453730528659025(i32* %1)
  %12 = load i8*, i8** %11, align 8
  indirectbr i8* %12, [label %13]

13:                                               ; preds = %13, %newFuncRoot
  %.reload61 = load i64, i64* %.reg2mem56, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 %.reload61
  %15 = load i8, i8* %14, align 1, !tbaa !16
  %16 = sext i8 %15 to i32
  store i32 %16, i32* %.reg2mem70, align 4
  %.reload60 = load i64, i64* %.reg2mem56, align 8
  %17 = or i64 %2, 5765259638346598753
  %18 = xor i64 %2, -1
  %19 = and i64 5765259638346598753, %18
  %20 = add i64 %19, %2
  %21 = add i64 %4, -4384619510843379218
  %22 = add i64 -6359350320347600802, %4
  %23 = add i64 %22, 1974730809504221584
  %24 = and i64 %9, 4094523139853693524
  %25 = or i64 -4094523139853693525, %9
  %26 = sub i64 %25, -4094523139853693525
  %27 = xor i64 %21, %24
  %28 = xor i64 %27, -6260753172569652183
  %29 = xor i64 %28, %17
  %30 = xor i64 %29, %23
  %31 = xor i64 %30, %20
  %32 = xor i64 %31, %26
  %33 = add i64 %9, 4426023301573617122
  %34 = add i64 -3514652240799140948, %9
  %35 = add i64 %34, 7940675542372758070
  %36 = add i64 %6, 6296012105463487811
  %37 = and i64 6296012105463487811, %6
  %38 = or i64 6296012105463487811, %6
  %39 = add i64 %37, %38
  %40 = and i64 %2, 4045369486953852464
  %41 = or i64 -4045369486953852465, %2
  %42 = sub i64 %41, -4045369486953852465
  %43 = xor i64 %42, %40
  %44 = xor i64 %43, %36
  %45 = xor i64 %44, %33
  %46 = xor i64 %45, -7796472766160447463
  %47 = xor i64 %46, %35
  %48 = xor i64 %47, %39
  %49 = mul i64 %32, %48
  %50 = and i64 %.reload60, %49
  store i64 %50, i64* %.reg2mem73, align 8
  %.reload77 = load i64, i64* %.reg2mem73, align 8
  %51 = icmp eq i64 %.reload77, 1
  %.reload59 = load i64, i64* %.reg2mem56, align 8
  %52 = mul i64 %.reload59, %.reload59
  store i64 %52, i64* %.reg2mem78, align 8
  %.reload58 = load i64, i64* %.reg2mem56, align 8
  %.reload80 = load i64, i64* %.reg2mem78, align 8
  %53 = and i64 %.reload80, %.reload58
  %54 = or i64 %.reload80, %.reload58
  %55 = add i64 %53, %54
  %56 = srem i64 %55, 2
  %57 = icmp eq i64 %56, 0
  %58 = or i1 %51, %57
  %59 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 44
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %62 = load i32, i32* %61, align 4
  %63 = srem i32 %60, %62
  %64 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 43
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %67 = load i8*, i8** %7, align 8
  %68 = load i8, i8* %67, align 1
  %69 = mul i8 %68, 2
  %70 = mul i8 %68, 2
  %71 = add i8 2, %70
  %72 = mul i8 %69, %71
  %73 = srem i8 %72, 4
  %74 = icmp eq i8 %73, 0
  %75 = mul i8 %68, %68
  %76 = add i8 %75, %68
  %77 = srem i8 %76, 2
  %78 = and i64 %4, -6505210139526907404
  %79 = xor i64 %4, -1
  %80 = xor i64 -6505210139526907404, %79
  %81 = and i64 %80, -6505210139526907404
  %82 = and i64 %2, 8522457689433998150
  %83 = xor i64 %2, -1
  %84 = or i64 -8522457689433998151, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %2, 8387575628924146052
  %88 = xor i64 %2, -1
  %89 = and i64 8387575628924146052, %88
  %90 = add i64 %89, %2
  %91 = xor i64 %81, %86
  %92 = xor i64 %91, %90
  %93 = xor i64 %92, 8444270270494310653
  %94 = xor i64 %93, %82
  %95 = xor i64 %94, %87
  %96 = xor i64 %95, %78
  %97 = or i64 %2, 7333145634585922536
  %98 = xor i64 %2, -1
  %99 = and i64 %98, 3956795952430343434
  %100 = and i64 %2, -3956795952430343435
  %101 = or i64 %99, %100
  %102 = xor i64 5993673103113400034, %101
  %103 = xor i64 %2, -1
  %104 = or i64 -7333145634585922537, %103
  %105 = xor i64 %104, -1
  %106 = and i64 %105, -1
  %107 = or i64 %102, %106
  %108 = add i64 %2, 5579410076879845261
  %109 = sub i64 0, %2
  %110 = sub i64 5579410076879845261, %109
  %111 = xor i64 %110, 0
  %112 = xor i64 %111, %108
  %113 = xor i64 %112, %107
  %114 = xor i64 %113, %97
  %115 = mul i64 %96, %114
  %116 = trunc i64 %115 to i8
  %117 = icmp eq i8 %77, %116
  %118 = or i1 %74, %117
  %119 = select i1 %118, i32 984876138, i32 984876137
  %120 = add i64 %4, 1993141921912667213
  %121 = and i64 1993141921912667213, %4
  %122 = or i64 1993141921912667213, %4
  %123 = add i64 %121, %122
  %124 = or i64 %4, -2912101857852238748
  %125 = xor i64 %4, -1
  %126 = and i64 -2912101857852238748, %125
  %127 = add i64 %126, %4
  %128 = xor i64 %120, %124
  %129 = xor i64 %128, %123
  %130 = xor i64 %129, 1831512528990462567
  %131 = xor i64 %130, %127
  %132 = and i64 %6, 123980416504665784
  %133 = or i64 -123980416504665785, %6
  %134 = sub i64 %133, -123980416504665785
  %135 = and i64 %6, -7380637315416271545
  %136 = or i64 7380637315416271544, %6
  %137 = sub i64 %136, 7380637315416271544
  %138 = and i64 %9, -3116180264219814214
  %139 = xor i64 %9, -1
  %140 = xor i64 -3116180264219814214, %139
  %141 = and i64 %140, -3116180264219814214
  %142 = xor i64 %137, %141
  %143 = xor i64 %142, %132
  %144 = xor i64 %143, %138
  %145 = xor i64 %144, -4849275672142033915
  %146 = xor i64 %145, %135
  %147 = xor i64 %146, %134
  %148 = mul i64 %131, %147
  %149 = trunc i64 %148 to i32
  %150 = xor i32 %119, %149
  store i32 %150, i32* %1, align 4
  %151 = call i8** @bf7851453730528659025(i32* %1)
  %152 = load i8*, i8** %151, align 8
  indirectbr i8* %152, [label %codeRepl, label %13]

codeRepl:                                         ; preds = %codeRepl, %13
  store i64 4070807658626890127, i64* %8, align 8
  %153 = call i8** @lk18433947796118248817(i64* %8)
  %154 = load i8*, i8** %153, align 8
  %155 = bitcast i8* %154 to void (i32*, i32, i1, i32, i32*)*
  call void %155(i32* %66, i32 %65, i1 %58, i32 %63, i32* %dispatcher)
  %156 = load i8*, i8** %7, align 8
  %157 = load i8, i8* %156, align 1
  %158 = and i8 %157, 1
  %159 = icmp eq i8 %158, 0
  %160 = mul i8 %157, %157
  %161 = xor i8 %160, %157
  %162 = and i8 %160, %157
  %163 = mul i8 2, %162
  %164 = add i8 %161, %163
  %165 = sext i8 %68 to i64
  %166 = add i64 %165, 34556266502326924
  %167 = add i64 7600531654610990668, %165
  %168 = sub i64 %167, 7565975388108663744
  %169 = or i64 %.reload60, 5872217166987287848
  %170 = xor i64 %.reload60, -1
  %171 = and i64 5872217166987287848, %170
  %172 = add i64 %171, %.reload60
  %173 = xor i64 %172, %166
  %174 = xor i64 %173, %168
  %175 = xor i64 %174, 9108825921603831423
  %176 = xor i64 %175, %169
  %177 = sext i32 %16 to i64
  %178 = or i64 %177, 4203975679842121960
  %179 = xor i64 %177, -1
  %180 = and i64 %179, 8138655193499198886
  %181 = and i64 %177, -8138655193499198887
  %182 = or i64 %180, %181
  %183 = xor i64 5378927828005199182, %182
  %184 = xor i64 %177, -1
  %185 = or i64 -4203975679842121961, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = or i64 %183, %187
  %189 = sext i32 %150 to i64
  %190 = and i64 %189, 6322946645159314391
  %191 = or i64 -6322946645159314392, %189
  %192 = sub i64 %191, -6322946645159314392
  %193 = and i64 %.reload60, 2602046528597492625
  %194 = or i64 -2602046528597492626, %.reload60
  %195 = sub i64 %194, -2602046528597492626
  %196 = xor i64 %193, %195
  %197 = xor i64 %196, %188
  %198 = xor i64 %197, %192
  %199 = xor i64 %198, 1670062757268439641
  %200 = xor i64 %199, %190
  %201 = xor i64 %200, %178
  %202 = mul i64 %176, %201
  %203 = trunc i64 %202 to i8
  %204 = mul i8 %203, %164
  %205 = add i8 23, %204
  %206 = sext i32 %16 to i64
  %207 = add i64 %206, 8616813145455630649
  %208 = xor i64 8616813145455630649, %206
  %209 = and i64 8616813145455630649, %206
  %210 = mul i64 2, %209
  %211 = add i64 %208, %210
  %212 = add i64 %.reload61, -2229733671535702624
  %213 = xor i64 -2229733671535702624, %.reload61
  %214 = and i64 -2229733671535702624, %.reload61
  %215 = mul i64 2, %214
  %216 = add i64 %213, %215
  %217 = add i64 %2, 4137911602079074935
  %218 = add i64 3749028116071374969, %2
  %219 = sub i64 %218, -388883486007699966
  %220 = xor i64 %211, %207
  %221 = xor i64 %220, %219
  %222 = xor i64 %221, %217
  %223 = xor i64 %222, %212
  %224 = xor i64 %223, -7234862346659324955
  %225 = xor i64 %224, %216
  %226 = or i64 %.reload59, -6879001458842680183
  %227 = and i64 -6879001458842680183, %.reload59
  %228 = xor i64 -6879001458842680183, %.reload59
  %229 = or i64 %227, %228
  %230 = or i64 %.reload60, -4731753470823220620
  %231 = xor i64 %.reload60, -1
  %232 = and i64 %231, 135906565901506346
  %233 = and i64 %.reload60, -135906565901506347
  %234 = or i64 %232, %233
  %235 = xor i64 -4632030260837225122, %234
  %236 = xor i64 %.reload60, -1
  %237 = or i64 4731753470823220619, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = or i64 %235, %239
  %241 = xor i64 -325929912880481589, %230
  %242 = xor i64 %241, %240
  %243 = xor i64 %242, %226
  %244 = xor i64 %243, %229
  %245 = mul i64 %225, %244
  %246 = trunc i64 %245 to i8
  %247 = mul i8 %246, %205
  %248 = add i8 111, %247
  %249 = mul i8 %248, 3
  %250 = srem i8 %249, 2
  %251 = icmp eq i8 %250, 0
  %252 = or i1 %159, %251
  %253 = select i1 %252, i32 984876139, i32 984876138
  %254 = xor i32 %253, 2117878066
  %255 = xor i32 %254, 2117878067
  store i32 %255, i32* %1, align 4
  %256 = call i8** @bf7851453730528659025(i32* %1)
  %257 = load i8*, i8** %256, align 8
  indirectbr i8* %257, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.10(i1* %.reg2mem103, [65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18311079036208169777, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.10, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18311079036208169777, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.10, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18311079036208169777, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.10, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1582770808220149332, i32 0, i64 %8
  store i8* bitcast (void (i1, i32, i32, i32*)* @render.extracted.10.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf8242492124939957577(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload104 = load i1, i1* %.reg2mem103, align 1
  %13 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 51
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %16 = load i32, i32* %15, align 4
  %17 = srem i32 %14, %16
  %18 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 58
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %21 = load i32, i32* %20, align 4
  %22 = srem i32 %19, %21
  %23 = load i8*, i8** %2, align 8
  %24 = load i8, i8* %23, align 1
  %25 = and i8 %24, 1
  %26 = icmp eq i8 %25, 1
  %27 = mul i8 %24, %24
  %28 = add i8 %27, %24
  %29 = srem i8 %28, 2
  %30 = icmp eq i8 %29, 0
  %31 = or i1 %26, %30
  %32 = select i1 %31, i32 984876138, i32 984876139
  %33 = xor i32 %32, 1
  store i32 %33, i32* %0, align 4
  %34 = call i8** @bf8242492124939957577(i32* %0)
  %35 = load i8*, i8** %34, align 8
  indirectbr i8* %35, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %36 = call i8** @lk2210454470600176687(i64* %7)
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast i8* %37 to void (i1, i32, i32, i32*)*
  call void %38(i1 %.reload104, i32 %17, i32 %22, i32* %dispatcher)
  %39 = load i8*, i8** %2, align 8
  %40 = load i8, i8* %39, align 1
  %41 = xor i8 %40, -1
  %42 = sext i8 %25 to i64
  %43 = and i64 %42, -6349110186238098597
  %44 = or i64 6349110186238098596, %42
  %45 = sub i64 %44, 6349110186238098596
  %46 = sext i32 %33 to i64
  %47 = add i64 %46, 3640574480146126388
  %48 = add i64 -8903720152363224121, %46
  %49 = sub i64 %48, 5902449441200201107
  %50 = sext i32 %17 to i64
  %51 = and i64 %50, 8768205744195034235
  %52 = xor i64 %50, -1
  %53 = xor i64 8768205744195034235, %52
  %54 = and i64 %53, 8768205744195034235
  %55 = xor i64 %45, -7622662116443531375
  %56 = xor i64 %55, %54
  %57 = xor i64 %56, %49
  %58 = xor i64 %57, %51
  %59 = xor i64 %58, %47
  %60 = xor i64 %59, %43
  %61 = sext i8 %25 to i64
  %62 = add i64 %61, -7196435821244339041
  %63 = xor i64 -7196435821244339041, %61
  %64 = and i64 -7196435821244339041, %61
  %65 = mul i64 2, %64
  %66 = add i64 %63, %65
  %67 = sext i32 %19 to i64
  %68 = and i64 %67, 6555860179116784226
  %69 = xor i64 %67, -1
  %70 = or i64 -6555860179116784227, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = xor i64 %66, %68
  %74 = xor i64 %73, 7511983856170518897
  %75 = xor i64 %74, %72
  %76 = xor i64 %75, %62
  %77 = mul i64 %60, %76
  %78 = trunc i64 %77 to i8
  %79 = or i8 %41, %78
  %80 = xor i8 %40, -1
  %81 = sub i8 %79, %80
  %82 = icmp eq i8 %81, 1
  %83 = mul i8 %40, %40
  %84 = add i8 %83, %40
  %85 = srem i8 %84, 2
  %86 = icmp eq i8 %85, 0
  %87 = add i64 %5, -7145122684465522941
  %88 = xor i64 -7145122684465522941, %5
  %89 = and i64 -7145122684465522941, %5
  %90 = mul i64 2, %89
  %91 = add i64 %88, %90
  %92 = sext i32 %33 to i64
  %93 = and i64 %92, 1374868381005961386
  %94 = xor i64 %92, -1
  %95 = or i64 -1374868381005961387, %94
  %96 = xor i64 %95, -1
  %97 = and i64 %96, -1
  %98 = xor i64 %97, %91
  %99 = xor i64 %98, 465046289612911335
  %100 = xor i64 %99, %87
  %101 = xor i64 %100, %93
  %102 = sext i8 %28 to i64
  %103 = or i64 %102, 7337634782609448838
  %104 = xor i64 %102, -1
  %105 = and i64 %104, 381186332396067118
  %106 = and i64 %102, -381186332396067119
  %107 = or i64 %105, %106
  %108 = xor i64 6962209908692289192, %107
  %109 = xor i64 %102, -1
  %110 = or i64 -7337634782609448839, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = or i64 %108, %112
  %114 = add i64 %5, 8002513019730061042
  %115 = sub i64 0, %5
  %116 = add i64 -8002513019730061042, %115
  %117 = sub i64 0, %116
  %118 = or i64 %3, 656474643339088197
  %119 = and i64 656474643339088197, %3
  %120 = xor i64 656474643339088197, %3
  %121 = or i64 %119, %120
  %122 = xor i64 %103, %117
  %123 = xor i64 %122, %118
  %124 = xor i64 %123, %114
  %125 = xor i64 %124, %121
  %126 = xor i64 %125, 4603055149961920727
  %127 = xor i64 %126, %113
  %128 = mul i64 %101, %127
  %129 = trunc i64 %128 to i1
  %130 = xor i1 %86, %129
  %131 = and i1 %82, %130
  %132 = add i1 %131, %86
  %133 = select i1 %132, i32 984876138, i32 984876137
  %134 = xor i32 %133, 3
  store i32 %134, i32* %0, align 4
  %135 = call i8** @bf8242492124939957577(i32* %0)
  %136 = load i8*, i8** %135, align 8
  indirectbr i8* %136, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.11(i64* %.reg2mem18, [65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9651444969545546290, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.11, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9651444969545546290, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.11, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9651444969545546290, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.11, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1008750604835695442, i32 0, i64 %8
  store i8* bitcast (void (i32*, i32, i1, i32, i32*)* @render.extracted.11.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf14057770961472521071(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload19 = load i64, i64* %.reg2mem18, align 8
  %13 = srem i64 %.reload19, 2
  %14 = icmp eq i64 %13, 0
  %15 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 28
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 27
  %18 = load i32, i32* %17, align 4
  %19 = add i32 %16, %18
  %20 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 53
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 64
  %23 = load i8*, i8** %6, align 8
  %24 = load i8, i8* %23, align 1
  %25 = mul i8 %24, %24
  %26 = add i8 %25, %24
  %27 = mul i8 %26, 3
  %28 = srem i8 %27, 2
  %29 = icmp eq i8 %28, 0
  %30 = mul i8 %24, %24
  %31 = add i8 %30, %24
  %32 = or i64 %5, 9209297153455740168
  %33 = xor i64 %5, -1
  %34 = and i64 9209297153455740168, %33
  %35 = add i64 %34, %5
  %36 = and i64 %1, 8944923607231990195
  %37 = or i64 -8944923607231990196, %1
  %38 = sub i64 %37, -8944923607231990196
  %39 = xor i64 %32, %38
  %40 = xor i64 %39, -6567133842201677179
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, %35
  %43 = and i64 %5, -493626717712880800
  %44 = xor i64 %5, -1
  %45 = xor i64 -493626717712880800, %44
  %46 = and i64 %45, -493626717712880800
  %47 = add i64 %8, 2687946921317171007
  %48 = add i64 7023952632362400420, %8
  %49 = sub i64 %48, 4336005711045229413
  %50 = or i64 %8, 1908876492779176642
  %51 = xor i64 %8, -1
  %52 = and i64 %51, 2617044038001141426
  %53 = and i64 %8, -2617044038001141427
  %54 = or i64 %52, %53
  %55 = xor i64 4480002603235599472, %54
  %56 = xor i64 %8, -1
  %57 = or i64 -1908876492779176643, %56
  %58 = xor i64 %57, -1
  %59 = and i64 %58, -1
  %60 = or i64 %55, %59
  %61 = xor i64 %60, %43
  %62 = xor i64 %61, %47
  %63 = xor i64 %62, %50
  %64 = xor i64 %63, 7423900934545173658
  %65 = xor i64 %64, %46
  %66 = xor i64 %65, %49
  %67 = mul i64 %42, %66
  %68 = trunc i64 %67 to i8
  %69 = srem i8 %31, %68
  %70 = icmp eq i8 %69, 0
  %71 = and i1 %29, %70
  %72 = select i1 %71, i32 984876136, i32 984876137
  %73 = xor i32 %72, 1
  store i32 %73, i32* %0, align 4
  %74 = call i8** @bf14057770961472521071(i32* %0)
  %75 = load i8*, i8** %74, align 8
  indirectbr i8* %75, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  %76 = sext i32 %72 to i64
  %77 = and i64 %76, -7183062722362551697
  %78 = xor i64 %76, -1
  %79 = xor i64 -7183062722362551697, %78
  %80 = and i64 %79, -7183062722362551697
  %81 = sext i8 %24 to i64
  %82 = or i64 %81, -1492933039300615091
  %83 = and i64 -1492933039300615091, %81
  %84 = xor i64 -1492933039300615091, %81
  %85 = or i64 %83, %84
  %86 = sext i8 %30 to i64
  %87 = add i64 %86, -5480603523844607521
  %88 = sub i64 0, %86
  %89 = add i64 5480603523844607521, %88
  %90 = sub i64 0, %89
  %91 = xor i64 -8758918130956915951, %82
  %92 = xor i64 %91, %90
  %93 = xor i64 %92, %85
  %94 = xor i64 %93, %77
  %95 = xor i64 %94, %80
  %96 = xor i64 %95, %87
  %97 = and i64 %.reload19, 2207144113667469987
  %98 = xor i64 %.reload19, -1
  %99 = or i64 -2207144113667469988, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = sext i8 %31 to i64
  %103 = add i64 %102, 158050457249805141
  %104 = add i64 -6236139210620736907, %102
  %105 = add i64 %104, 6394189667870542048
  %106 = xor i64 %105, %103
  %107 = xor i64 %106, %97
  %108 = xor i64 %107, -5015865998666081633
  %109 = xor i64 %108, %101
  %110 = mul i64 %96, %109
  store i64 %110, i64* %7, align 8
  %111 = call i8** @lk16846511957834172191(i64* %7)
  %112 = load i8*, i8** %111, align 8
  %113 = bitcast i8* %112 to void (i32*, i32, i1, i32, i32*)*
  call void %113(i32* %22, i32 %21, i1 %14, i32 %19, i32* %dispatcher)
  %114 = load i8*, i8** %2, align 8
  %115 = load i8, i8* %114, align 1
  %116 = mul i8 %115, 2
  %117 = mul i8 %115, 2
  %118 = add i8 2, %117
  %119 = mul i8 %116, %118
  %120 = srem i8 %119, 4
  %121 = icmp eq i8 %120, 0
  %122 = mul i8 %115, %115
  %123 = xor i8 %122, %115
  %124 = and i8 %122, %115
  %125 = mul i8 2, %124
  %126 = add i8 %123, %125
  %127 = or i64 %13, -8322102449496454221
  %128 = and i64 -8322102449496454221, %13
  %129 = xor i64 -8322102449496454221, %13
  %130 = or i64 %128, %129
  %131 = or i64 %8, 4459699838678863051
  %132 = xor i64 %8, -1
  %133 = and i64 %132, 8649804000939263812
  %134 = and i64 %8, -8649804000939263813
  %135 = or i64 %133, %134
  %136 = xor i64 5039052680302873487, %135
  %137 = xor i64 %8, -1
  %138 = or i64 -4459699838678863052, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = or i64 %136, %140
  %142 = xor i64 1479738591246408991, %141
  %143 = xor i64 %142, %130
  %144 = xor i64 %143, %131
  %145 = xor i64 %144, %127
  %146 = add i64 %3, -4190018938057645676
  %147 = sub i64 0, %3
  %148 = add i64 4190018938057645676, %147
  %149 = sub i64 0, %148
  %150 = sext i8 %27 to i64
  %151 = or i64 %150, -1607025555936796181
  %152 = and i64 -1607025555936796181, %150
  %153 = xor i64 -1607025555936796181, %150
  %154 = or i64 %152, %153
  %155 = sext i8 %30 to i64
  %156 = add i64 %155, 4436352183044612854
  %157 = sub i64 0, %155
  %158 = add i64 -4436352183044612854, %157
  %159 = sub i64 0, %158
  %160 = xor i64 %151, %149
  %161 = xor i64 %160, %154
  %162 = xor i64 %161, %146
  %163 = xor i64 %162, %156
  %164 = xor i64 %163, 191308174010793406
  %165 = xor i64 %164, %159
  %166 = mul i64 %145, %165
  %167 = trunc i64 %166 to i8
  %168 = srem i8 %126, %167
  %169 = icmp eq i8 %168, 0
  %170 = or i1 %121, %169
  %171 = select i1 %170, i32 984876138, i32 984876136
  %172 = xor i32 %171, 2
  store i32 %172, i32* %0, align 4
  %173 = call i8** @bf14057770961472521071(i32* %0)
  %174 = load i8*, i8** %173, align 8
  indirectbr i8* %174, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.12([65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable869952976517638611, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.12, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable869952976517638611, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.12, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable869952976517638611, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.12, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable4439605908938760544, i32 0, i64 %8
  store i8* bitcast (void (i32*, [65 x i32]*, i32*)* @render.extracted.12.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf4423765630577650784(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = mul i64 87, 69
  %14 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 53
  %15 = load i8*, i8** %6, align 8
  %16 = load i8, i8* %15, align 1
  %17 = and i64 %5, 3451273154177884430
  %18 = or i64 -3451273154177884431, %5
  %19 = sub i64 %18, -3451273154177884431
  %20 = or i64 %3, -8607306558590806835
  %21 = xor i64 %3, -1
  %22 = and i64 -8607306558590806835, %21
  %23 = add i64 %22, %3
  %24 = xor i64 %17, %23
  %25 = xor i64 %24, %20
  %26 = xor i64 %25, -7353421438990126677
  %27 = xor i64 %26, %19
  %28 = add i64 %1, -7138883325683360214
  %29 = xor i64 -7138883325683360214, %1
  %30 = and i64 -7138883325683360214, %1
  %31 = mul i64 2, %30
  %32 = add i64 %29, %31
  %33 = add i64 %1, -756354190248897626
  %34 = sub i64 0, %1
  %35 = sub i64 -756354190248897626, %34
  %36 = and i64 %8, 6599094233692455345
  %37 = xor i64 %8, -1
  %38 = or i64 -6599094233692455346, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = xor i64 %33, %32
  %42 = xor i64 %41, %28
  %43 = xor i64 %42, 7718173529300926982
  %44 = xor i64 %43, %40
  %45 = xor i64 %44, %36
  %46 = xor i64 %45, %35
  %47 = mul i64 %27, %46
  %48 = trunc i64 %47 to i8
  %49 = mul i8 %16, %48
  %50 = mul i8 %16, 2
  %51 = sub i8 0, %50
  %52 = add i8 -2, %51
  %53 = sub i8 0, %52
  %54 = mul i8 %49, %53
  %55 = srem i8 %54, 4
  %56 = icmp eq i8 %55, 0
  %57 = mul i8 %16, %16
  %58 = mul i8 %57, %16
  %59 = and i8 %58, %16
  %60 = or i8 %58, %16
  %61 = add i8 %59, %60
  %62 = srem i8 %61, 2
  %63 = icmp eq i8 %62, 0
  %64 = xor i1 %63, true
  %65 = xor i1 %56, %64
  %66 = and i1 %65, %56
  %67 = select i1 %66, i32 984876136, i32 984876138
  %68 = xor i32 %67, 2
  store i32 %68, i32* %0, align 4
  %69 = call i8** @bf4423765630577650784(i32* %0)
  %70 = load i8*, i8** %69, align 8
  indirectbr i8* %70, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %71 = call i8** @lk17754232458190986103(i64* %7)
  %72 = load i8*, i8** %71, align 8
  %73 = bitcast i8* %72 to void (i32*, [65 x i32]*, i32*)*
  call void %73(i32* %14, [65 x i32]* %lookupTable, i32* %dispatcher)
  %74 = load i8*, i8** %4, align 8
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %61 to i64
  %77 = add i64 %76, -9084354229658658013
  %78 = sub i64 0, %76
  %79 = sub i64 -9084354229658658013, %78
  %80 = or i64 %8, -2179755707755817252
  %81 = xor i64 %8, -1
  %82 = and i64 %81, 5513453765862773301
  %83 = and i64 %8, -5513453765862773302
  %84 = or i64 %82, %83
  %85 = xor i64 -5963809040346659607, %84
  %86 = xor i64 %8, -1
  %87 = or i64 2179755707755817251, %86
  %88 = xor i64 %87, -1
  %89 = and i64 %88, -1
  %90 = or i64 %85, %89
  %91 = sext i8 %16 to i64
  %92 = or i64 %91, 2164250391759301166
  %93 = xor i64 %91, -1
  %94 = and i64 2164250391759301166, %93
  %95 = add i64 %94, %91
  %96 = xor i64 %80, %95
  %97 = xor i64 %96, %90
  %98 = xor i64 %97, 2668528814374510499
  %99 = xor i64 %98, %92
  %100 = xor i64 %99, %79
  %101 = xor i64 %100, %77
  %102 = sext i8 %53 to i64
  %103 = or i64 %102, 4432156562597142715
  %104 = xor i64 %102, -1
  %105 = and i64 4432156562597142715, %104
  %106 = add i64 %105, %102
  %107 = sext i8 %60 to i64
  %108 = add i64 %107, 2223907720309872843
  %109 = sub i64 0, %107
  %110 = add i64 -2223907720309872843, %109
  %111 = sub i64 0, %110
  %112 = xor i64 -5712537435925165045, %108
  %113 = xor i64 %112, %111
  %114 = xor i64 %113, %106
  %115 = xor i64 %114, %103
  %116 = mul i64 %101, %115
  %117 = trunc i64 %116 to i8
  %118 = and i8 %75, %117
  %119 = icmp eq i8 %118, 1
  %120 = mul i8 %75, %75
  %121 = add i8 %120, %75
  %122 = sext i32 %68 to i64
  %123 = add i64 %122, 2387324004345547790
  %124 = add i64 5346527708573996209, %122
  %125 = sub i64 %124, 2959203704228448419
  %126 = sext i8 %51 to i64
  %127 = or i64 %126, 5893209532165181879
  %128 = xor i64 %126, -1
  %129 = and i64 %128, 1202786152434090172
  %130 = and i64 %126, -1202786152434090173
  %131 = or i64 %129, %130
  %132 = xor i64 4718019214625018123, %131
  %133 = xor i64 %126, -1
  %134 = or i64 -5893209532165181880, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = or i64 %132, %136
  %138 = sext i8 %49 to i64
  %139 = or i64 %138, -7643060345894904716
  %140 = xor i64 %138, -1
  %141 = and i64 %140, 7848331086650147584
  %142 = and i64 %138, -7848331086650147585
  %143 = or i64 %141, %142
  %144 = xor i64 -503072102039986316, %143
  %145 = xor i64 %138, -1
  %146 = or i64 7643060345894904715, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = or i64 %144, %148
  %150 = xor i64 %149, %139
  %151 = xor i64 %150, %127
  %152 = xor i64 %151, %137
  %153 = xor i64 %152, 7839990357617816637
  %154 = xor i64 %153, %125
  %155 = xor i64 %154, %123
  %156 = add i64 %3, -4026690252078074586
  %157 = sub i64 0, %3
  %158 = sub i64 -4026690252078074586, %157
  %159 = sext i32 %67 to i64
  %160 = add i64 %159, 8520277527415168011
  %161 = add i64 1116600693039067925, %159
  %162 = sub i64 %161, -7403676834376100086
  %163 = xor i64 %160, %162
  %164 = xor i64 %163, %158
  %165 = xor i64 %164, 6397101162276718122
  %166 = xor i64 %165, %156
  %167 = mul i64 %155, %166
  %168 = trunc i64 %167 to i8
  %169 = srem i8 %121, %168
  %170 = icmp eq i8 %169, 0
  %171 = and i1 %119, %170
  %172 = xor i1 %119, %170
  %173 = or i1 %171, %172
  %174 = and i64 %13, -8384257373999583649
  %175 = xor i64 %13, -1
  %176 = or i64 8384257373999583648, %175
  %177 = xor i64 %176, -1
  %178 = and i64 %177, -1
  %179 = sext i8 %49 to i64
  %180 = or i64 %179, -326590211324754148
  %181 = and i64 -326590211324754148, %179
  %182 = xor i64 -326590211324754148, %179
  %183 = or i64 %181, %182
  %184 = and i64 %1, 1803431462695854070
  %185 = xor i64 %1, -1
  %186 = xor i64 1803431462695854070, %185
  %187 = and i64 %186, 1803431462695854070
  %188 = xor i64 %184, %180
  %189 = xor i64 %188, %183
  %190 = xor i64 %189, -3376424508206893025
  %191 = xor i64 %190, %187
  %192 = xor i64 %191, %174
  %193 = xor i64 %192, %178
  %194 = sext i8 %61 to i64
  %195 = add i64 %194, -2068548039276488322
  %196 = and i64 -2068548039276488322, %194
  %197 = or i64 -2068548039276488322, %194
  %198 = add i64 %196, %197
  %199 = sext i32 %68 to i64
  %200 = add i64 %199, -5309592552400437284
  %201 = add i64 6625379026350965456, %199
  %202 = sub i64 %201, -6511772494958148876
  %203 = sext i8 %52 to i64
  %204 = and i64 %203, -2110221759407281669
  %205 = or i64 2110221759407281668, %203
  %206 = sub i64 %205, 2110221759407281668
  %207 = xor i64 %198, %206
  %208 = xor i64 %207, %195
  %209 = xor i64 %208, -6880873938066141544
  %210 = xor i64 %209, %200
  %211 = xor i64 %210, %202
  %212 = xor i64 %211, %204
  %213 = mul i64 %193, %212
  %214 = trunc i64 %213 to i32
  %215 = select i1 %173, i32 %214, i32 984876139
  %216 = sext i8 %60 to i64
  %217 = add i64 %216, -5373583610807628479
  %218 = sub i64 0, %216
  %219 = add i64 5373583610807628479, %218
  %220 = sub i64 0, %219
  %221 = and i64 %13, 9184146815418871866
  %222 = xor i64 %13, -1
  %223 = xor i64 9184146815418871866, %222
  %224 = and i64 %223, 9184146815418871866
  %225 = add i64 %13, 8188760873598890624
  %226 = add i64 -2397043816002514504, %13
  %227 = add i64 %226, -7860939384108146488
  %228 = xor i64 %227, %225
  %229 = xor i64 %228, %217
  %230 = xor i64 %229, %221
  %231 = xor i64 %230, 1140543235260661979
  %232 = xor i64 %231, %220
  %233 = xor i64 %232, %224
  %234 = sext i8 %58 to i64
  %235 = or i64 %234, 5101380896786106993
  %236 = xor i64 %234, -1
  %237 = and i64 %236, 5239655110533917245
  %238 = and i64 %234, -5239655110533917246
  %239 = or i64 %237, %238
  %240 = xor i64 1044061513973325900, %239
  %241 = xor i64 %234, -1
  %242 = or i64 -5101380896786106994, %241
  %243 = xor i64 %242, -1
  %244 = and i64 %243, -1
  %245 = or i64 %240, %244
  %246 = sext i8 %54 to i64
  %247 = and i64 %246, 8622185729378588407
  %248 = xor i64 %246, -1
  %249 = xor i64 8622185729378588407, %248
  %250 = and i64 %249, 8622185729378588407
  %251 = xor i64 %235, -7511460609523535367
  %252 = xor i64 %251, %250
  %253 = xor i64 %252, %245
  %254 = xor i64 %253, %247
  %255 = mul i64 %233, %254
  %256 = trunc i64 %255 to i32
  %257 = xor i32 %215, %256
  store i32 %257, i32* %0, align 4
  %258 = call i8** @bf4423765630577650784(i32* %0)
  %259 = load i8*, i8** %258, align 8
  indirectbr i8* %259, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.13(i32* %.reg2mem105, float* %0, float* %1, i64* %.reg2mem56, i64* %.reg2mem92, [65 x i32]* %lookupTable, i32* %dispatcher, i32* %.ph.reg2mem) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17483817777465953375, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.13, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17483817777465953375, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.13, %codeRepl), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876136)
  %8 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17483817777465953375, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.13, %18), i8** %8, align 8
  %9 = alloca i64, align 8
  %10 = call i64 @m4181846979565521366(i64 4070807658626890125)
  %11 = getelementptr [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable8394725189750568945, i32 0, i64 %10
  store i8* bitcast (i32 (i32)* @putchar to i8*), i8** %11, align 8
  %12 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %13 = getelementptr [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable8394725189750568945, i32 0, i64 %12
  store i8* bitcast (i32 (float*, float*)* @update to i8*), i8** %13, align 8
  %14 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %15 = getelementptr [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable8394725189750568945, i32 0, i64 %14
  store i8* bitcast (void (i32, i32, i1, i32, i32*, i32, i32*)* @render.extracted.13.extracted to i8*), i8** %15, align 8
  store i32 984876136, i32* %2, align 4
  %16 = call i8** @bf8865144524772024419(i32* %2)
  %17 = load i8*, i8** %16, align 8
  indirectbr i8* %17, [label %18]

18:                                               ; preds = %18, %newFuncRoot
  %.reload106 = load i32, i32* %.reg2mem105, align 4
  store i64 4070807658626890125, i64* %9, align 8
  %19 = call i8** @lk6905989959671697645(i64* %9)
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %20 to i32 (i32)*
  %22 = call i32 %21(i32 %.reload106)
  store i64 4070807658626890126, i64* %9, align 8
  %23 = call i8** @lk6905989959671697645(i64* %9)
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %24 to i32 (float*, float*)*
  %26 = call i32 %25(float* %0, float* %1)
  %27 = and i64 %3, -7919623306890517960
  %28 = xor i64 %3, -1
  %29 = or i64 7919623306890517959, %28
  %30 = xor i64 %29, -1
  %31 = and i64 %30, -1
  %32 = or i64 %5, -4196958347779037571
  %33 = and i64 -4196958347779037571, %5
  %34 = xor i64 -4196958347779037571, %5
  %35 = or i64 %33, %34
  %36 = or i64 %12, 1043430890318242353
  %37 = and i64 1043430890318242353, %12
  %38 = xor i64 1043430890318242353, %12
  %39 = or i64 %37, %38
  %40 = xor i64 -7984041367794609341, %35
  %41 = xor i64 %40, %27
  %42 = xor i64 %41, %36
  %43 = xor i64 %42, %39
  %44 = xor i64 %43, %32
  %45 = xor i64 %44, %31
  %46 = or i64 %14, -4536532645414905860
  %47 = xor i64 %14, -1
  %48 = and i64 %47, 6365317744718932502
  %49 = and i64 %14, -6365317744718932503
  %50 = or i64 %48, %49
  %51 = xor i64 -7395797500392456726, %50
  %52 = xor i64 %14, -1
  %53 = or i64 4536532645414905859, %52
  %54 = xor i64 %53, -1
  %55 = and i64 %54, -1
  %56 = or i64 %51, %55
  %57 = or i64 %7, 7673617535007762855
  %58 = xor i64 %7, -1
  %59 = and i64 %58, -6977477595125789147
  %60 = and i64 %7, 6977477595125789146
  %61 = or i64 %59, %60
  %62 = xor i64 -768656047771523198, %61
  %63 = xor i64 %7, -1
  %64 = or i64 -7673617535007762856, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = add i64 %3, 813877786867635241
  %69 = sub i64 0, %3
  %70 = add i64 -813877786867635241, %69
  %71 = sub i64 0, %70
  %72 = xor i64 %56, 0
  %73 = xor i64 %72, %57
  %74 = xor i64 %73, %46
  %75 = xor i64 %74, %71
  %76 = xor i64 %75, %67
  %77 = xor i64 %76, %68
  %78 = mul i64 %45, %77
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %26, %79
  %.reload57 = load i64, i64* %.reg2mem56, align 8
  %81 = add nuw nsw i64 %.reload57, 1
  store i64 %81, i64* %.reg2mem92, align 8
  %82 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 49
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 15
  %85 = load i32, i32* %84, align 4
  %86 = sub i32 0, %85
  %87 = add i32 %83, %86
  %88 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 58
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = load i8*, i8** %4, align 8
  %93 = load i8, i8* %92, align 1
  %94 = mul i8 %93, 2
  %95 = or i64 %14, 108341633088500066
  %96 = and i64 108341633088500066, %14
  %97 = xor i64 108341633088500066, %14
  %98 = or i64 %96, %97
  %99 = and i64 %12, 4846557280600029693
  %100 = xor i64 %12, -1
  %101 = or i64 -4846557280600029694, %100
  %102 = xor i64 %101, -1
  %103 = and i64 %102, -1
  %104 = xor i64 -8416755977154850409, %95
  %105 = xor i64 %104, %103
  %106 = xor i64 %105, %99
  %107 = xor i64 %106, %98
  %108 = or i64 %7, -3624199093213387340
  %109 = xor i64 %7, -1
  %110 = and i64 %109, -8910922726128324880
  %111 = and i64 %7, 8910922726128324879
  %112 = or i64 %110, %111
  %113 = xor i64 5323897828992568132, %112
  %114 = xor i64 %7, -1
  %115 = or i64 3624199093213387339, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = or i64 %113, %117
  %119 = and i64 %5, -2878198355375164772
  %120 = xor i64 %5, -1
  %121 = xor i64 -2878198355375164772, %120
  %122 = and i64 %121, -2878198355375164772
  %123 = xor i64 %118, %119
  %124 = xor i64 %123, %108
  %125 = xor i64 %124, %122
  %126 = xor i64 %125, 6768081292326272078
  %127 = mul i64 %107, %126
  %128 = trunc i64 %127 to i8
  %129 = mul i8 %93, %128
  %130 = add i8 2, %129
  %131 = mul i8 %94, %130
  %132 = srem i8 %131, 4
  %133 = or i64 %7, -623111153531004976
  %134 = xor i64 %7, -1
  %135 = and i64 %134, 1766998438364567648
  %136 = and i64 %7, -1766998438364567649
  %137 = or i64 %135, %136
  %138 = xor i64 -1161963876635340880, %137
  %139 = xor i64 %7, -1
  %140 = or i64 623111153531004975, %139
  %141 = xor i64 %140, -1
  %142 = and i64 %141, -1
  %143 = or i64 %138, %142
  %144 = add i64 %10, -5827818326919450177
  %145 = add i64 -2900863091282668661, %10
  %146 = add i64 %145, -2926955235636781516
  %147 = or i64 %14, -2499214531459661856
  %148 = xor i64 %14, -1
  %149 = and i64 %148, 6802079642533150569
  %150 = and i64 %14, -6802079642533150570
  %151 = or i64 %149, %150
  %152 = xor i64 -8992326412849348471, %151
  %153 = xor i64 %14, -1
  %154 = or i64 2499214531459661855, %153
  %155 = xor i64 %154, -1
  %156 = and i64 %155, -1
  %157 = or i64 %152, %156
  %158 = xor i64 %157, %144
  %159 = xor i64 %158, 5011407319849914113
  %160 = xor i64 %159, %146
  %161 = xor i64 %160, %133
  %162 = xor i64 %161, %147
  %163 = xor i64 %162, %143
  %164 = or i64 %12, 6332913928116125542
  %165 = and i64 6332913928116125542, %12
  %166 = xor i64 6332913928116125542, %12
  %167 = or i64 %165, %166
  %168 = and i64 %10, 1658325498123912310
  %169 = xor i64 %10, -1
  %170 = or i64 -1658325498123912311, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %3, -45452417983119786
  %174 = xor i64 %3, -1
  %175 = and i64 %174, 5387751167390181822
  %176 = and i64 %3, -5387751167390181823
  %177 = or i64 %175, %176
  %178 = xor i64 -5360507998503299096, %177
  %179 = xor i64 %3, -1
  %180 = or i64 45452417983119785, %179
  %181 = xor i64 %180, -1
  %182 = and i64 %181, -1
  %183 = or i64 %178, %182
  %184 = xor i64 %173, 0
  %185 = xor i64 %184, %164
  %186 = xor i64 %185, %168
  %187 = xor i64 %186, %167
  %188 = xor i64 %187, %172
  %189 = xor i64 %188, %183
  %190 = mul i64 %163, %189
  %191 = trunc i64 %190 to i8
  %192 = icmp eq i8 %132, %191
  %193 = mul i8 %93, %93
  %194 = sub i8 0, %93
  %195 = sub i8 %193, %194
  %196 = srem i8 %195, 2
  %197 = icmp eq i8 %196, 0
  %198 = and i1 %192, %197
  %199 = select i1 %198, i32 984876137, i32 984876139
  %200 = xor i32 %199, 2
  store i32 %200, i32* %2, align 4
  %201 = call i8** @bf8865144524772024419(i32* %2)
  %202 = load i8*, i8** %201, align 8
  indirectbr i8* %202, [label %codeRepl, label %18]

codeRepl:                                         ; preds = %codeRepl, %18
  store i64 4070807658626890127, i64* %9, align 8
  %203 = call i8** @lk6905989959671697645(i64* %9)
  %204 = load i8*, i8** %203, align 8
  %205 = bitcast i8* %204 to void (i32, i32, i1, i32, i32*, i32, i32*)*
  call void %205(i32 %89, i32 %91, i1 %80, i32 %87, i32* %dispatcher, i32 %26, i32* %.ph.reg2mem)
  %206 = load i8*, i8** %6, align 8
  %207 = load i8, i8* %206, align 1
  %208 = and i8 %207, 1
  %209 = icmp eq i8 %208, 1
  %210 = mul i8 %207, %207
  %211 = sub i8 0, %210
  %212 = sub i8 0, %207
  %213 = add i8 %211, %212
  %214 = sub i8 0, %213
  %215 = srem i8 %214, 2
  %216 = sext i8 %196 to i64
  %217 = add i64 %216, 6008435839893703889
  %218 = xor i64 6008435839893703889, %216
  %219 = and i64 6008435839893703889, %216
  %220 = mul i64 2, %219
  %221 = add i64 %218, %220
  %222 = or i64 %7, -5174285879351436862
  %223 = xor i64 %7, -1
  %224 = and i64 %223, -7804260368001731557
  %225 = and i64 %7, 7804260368001731556
  %226 = or i64 %224, %225
  %227 = xor i64 3134660247309315545, %226
  %228 = xor i64 %7, -1
  %229 = or i64 5174285879351436861, %228
  %230 = xor i64 %229, -1
  %231 = and i64 %230, -1
  %232 = or i64 %227, %231
  %233 = xor i64 %232, %217
  %234 = xor i64 %233, %222
  %235 = xor i64 %234, 7618885262200482181
  %236 = xor i64 %235, %221
  %237 = sext i8 %132 to i64
  %238 = or i64 %237, 2820341743092152805
  %239 = and i64 2820341743092152805, %237
  %240 = xor i64 2820341743092152805, %237
  %241 = or i64 %239, %240
  %242 = sext i8 %131 to i64
  %243 = and i64 %242, -5041295455374428336
  %244 = xor i64 %242, -1
  %245 = or i64 5041295455374428335, %244
  %246 = xor i64 %245, -1
  %247 = and i64 %246, -1
  %248 = sext i8 %195 to i64
  %249 = or i64 %248, 2520721263072031227
  %250 = xor i64 %248, -1
  %251 = and i64 %250, -8404279242826937136
  %252 = and i64 %248, 8404279242826937135
  %253 = or i64 %251, %252
  %254 = xor i64 -6222454969548522197, %253
  %255 = xor i64 %248, -1
  %256 = or i64 -2520721263072031228, %255
  %257 = xor i64 %256, -1
  %258 = and i64 %257, -1
  %259 = or i64 %254, %258
  %260 = xor i64 %241, %238
  %261 = xor i64 %260, %259
  %262 = xor i64 %261, %249
  %263 = xor i64 %262, %247
  %264 = xor i64 %263, 0
  %265 = xor i64 %264, %243
  %266 = mul i64 %236, %265
  %267 = trunc i64 %266 to i8
  %268 = icmp eq i8 %215, %267
  %269 = or i1 %209, %268
  %270 = select i1 %269, i32 984876137, i32 984876137
  %271 = xor i32 %270, 0
  store i32 %271, i32* %2, align 4
  %272 = call i8** @bf8865144524772024419(i32* %2)
  %273 = load i8*, i8** %272, align 8
  indirectbr i8* %273, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.extracted([65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876146)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876120)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.extracted, %7), i8** %4, align 8
  store i32 984876120, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 38
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 25
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %9, %11
  store i32 %12, i32* %dispatcher, align 4
  %13 = load i8*, i8** %4, align 8
  %14 = load i8, i8* %13, align 1
  %15 = and i8 %14, 1
  %16 = icmp eq i8 %15, 1
  %17 = mul i8 %14, %14
  %18 = add i8 %17, %14
  %19 = srem i8 %18, 2
  %20 = icmp eq i8 %19, 0
  %21 = xor i1 %16, true
  %22 = and i1 %21, false
  %23 = and i1 %16, true
  %24 = or i1 %22, %23
  %25 = xor i1 %20, true
  %26 = and i1 %25, false
  %27 = and i1 %20, true
  %28 = or i1 %26, %27
  %29 = xor i1 %24, %28
  %30 = xor i1 %16, true
  %31 = and i64 %1, -1510510574534228836
  %32 = or i64 1510510574534228835, %1
  %33 = sub i64 %32, 1510510574534228835
  %34 = and i64 %1, 4263649944888083128
  %35 = or i64 -4263649944888083129, %1
  %36 = sub i64 %35, -4263649944888083129
  %37 = xor i64 %31, %33
  %38 = xor i64 %37, -6457985542741162617
  %39 = xor i64 %38, %36
  %40 = xor i64 %39, %34
  %41 = and i64 %1, 5218483626903319578
  %42 = xor i64 %1, -1
  %43 = xor i64 5218483626903319578, %42
  %44 = and i64 %43, 5218483626903319578
  %45 = add i64 %1, 4453553157186131060
  %46 = sub i64 0, %1
  %47 = sub i64 4453553157186131060, %46
  %48 = xor i64 %41, %45
  %49 = xor i64 %48, 2845575640022822967
  %50 = xor i64 %49, %47
  %51 = xor i64 %50, %44
  %52 = mul i64 %40, %51
  %53 = trunc i64 %52 to i1
  %54 = xor i1 %20, %53
  %55 = or i1 %30, %54
  %56 = xor i1 %55, true
  %57 = add i64 %3, -6381378838103835416
  %58 = add i64 4101713997720109948, %3
  %59 = sub i64 %58, -7963651237885606252
  %60 = add i64 %1, 3699530988040483493
  %61 = xor i64 3699530988040483493, %1
  %62 = and i64 3699530988040483493, %1
  %63 = mul i64 2, %62
  %64 = add i64 %61, %63
  %65 = xor i64 %64, %60
  %66 = xor i64 %65, -8387161473495044961
  %67 = xor i64 %66, %59
  %68 = xor i64 %67, %57
  %69 = add i64 %3, -5204301616046224950
  %70 = add i64 -2904064308197381046, %3
  %71 = sub i64 %70, 2300237307848843904
  %72 = add i64 %1, 1181486548610787564
  %73 = add i64 -5531777640611874805, %1
  %74 = add i64 %73, 6713264189222662369
  %75 = xor i64 %72, %74
  %76 = xor i64 %75, %69
  %77 = xor i64 %76, 4235153368966606687
  %78 = xor i64 %77, %71
  %79 = mul i64 %68, %78
  %80 = trunc i64 %79 to i1
  %81 = and i1 %56, %80
  %82 = or i1 %29, %81
  %83 = select i1 %82, i32 984876146, i32 984876146
  %84 = xor i32 %83, 0
  store i32 %84, i32* %0, align 4
  %85 = call i8** @bf6338069988336422972(i32* %0)
  %86 = load i8*, i8** %85, align 8
  indirectbr i8* %86, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.1.extracted(i64* %.reg2mem25, i64 %0, i1* %.reg2mem22, [65 x i32]* %lookupTable, i32* %dispatcher, i64* %.reg2mem97, i1* %.reg2mem99) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876122)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.1.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876132)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.1.extracted, %8), i8** %5, align 8
  store i32 984876132, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %.reload28 = load i64, i64* %.reg2mem25, align 8
  %9 = add i64 %.reload28, %0
  %10 = srem i64 %9, 2
  %11 = add i64 %4, 5869789802727816618
  %12 = xor i64 5869789802727816618, %4
  %13 = and i64 5869789802727816618, %4
  %14 = mul i64 2, %13
  %15 = add i64 %12, %14
  %16 = or i64 %2, 3322508450083537839
  %17 = xor i64 %2, -1
  %18 = and i64 3322508450083537839, %17
  %19 = add i64 %18, %2
  %20 = and i64 %2, 889136444131997207
  %21 = xor i64 %2, -1
  %22 = or i64 -889136444131997208, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = xor i64 %24, %11
  %26 = xor i64 %25, %20
  %27 = xor i64 %26, %19
  %28 = xor i64 %27, %16
  %29 = xor i64 %28, %15
  %30 = xor i64 %29, 897717521787020379
  %31 = and i64 %4, 8291414683599718105
  %32 = or i64 -8291414683599718106, %4
  %33 = sub i64 %32, -8291414683599718106
  %34 = and i64 %0, -1307853016683414999
  %35 = xor i64 %0, -1
  %36 = or i64 1307853016683414998, %35
  %37 = xor i64 %36, -1
  %38 = and i64 %37, -1
  %39 = xor i64 %33, %34
  %40 = xor i64 %39, %38
  %41 = xor i64 %40, %31
  %42 = xor i64 %41, 0
  %43 = mul i64 %30, %42
  %44 = icmp eq i64 %10, %43
  %.reload23 = load i1, i1* %.reg2mem22, align 1
  %45 = xor i1 %44, true
  %46 = xor i1 %.reload23, %45
  %47 = and i1 %46, %.reload23
  %48 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 15
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 13
  %51 = load i32, i32* %50, align 4
  %52 = add i32 %49, %51
  store i32 %52, i32* %dispatcher, align 4
  store i64 %9, i64* %.reg2mem97, align 8
  store i1 %47, i1* %.reg2mem99, align 1
  %53 = load i8*, i8** %3, align 8
  %54 = load i8, i8* %53, align 1
  %55 = mul i8 %54, 2
  %56 = mul i8 %54, 2
  %57 = add i8 2, %56
  %58 = mul i8 %55, %57
  %59 = srem i8 %58, 4
  %60 = icmp eq i8 %59, 0
  %61 = mul i8 %54, %54
  %62 = mul i8 %61, %54
  %63 = sub i8 %62, -78
  %64 = add i8 %63, %54
  %65 = add i8 %64, -78
  %66 = srem i8 %65, 2
  %67 = icmp eq i8 %66, 0
  %68 = xor i1 %67, true
  %69 = xor i1 %60, %68
  %70 = and i1 %69, %60
  %71 = select i1 %70, i32 984876122, i32 984876122
  %72 = xor i32 %71, -1
  %73 = and i32 %72, 0
  %74 = and i32 %71, -1
  %75 = or i32 %73, %74
  store i32 %75, i32* %1, align 4
  %76 = call i8** @bf6338069988336422972(i32* %1)
  %77 = load i8*, i8** %76, align 8
  indirectbr i8* %77, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.2.extracted() #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876159)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.2.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.2.extracted, %7), i8** %4, align 8
  store i32 984876138, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = load i8*, i8** %2, align 8
  %9 = load i8, i8* %8, align 1
  %10 = mul i8 %9, %9
  %11 = add i64 %1, 8413868436111812487
  %12 = add i64 6573854341191226393, %1
  %13 = add i64 %12, 1840014094920586094
  %14 = and i64 %3, 1091958987101245838
  %15 = xor i64 %3, -1
  %16 = xor i64 1091958987101245838, %15
  %17 = and i64 %16, 1091958987101245838
  %18 = or i64 %3, -5212059124737060383
  %19 = and i64 -5212059124737060383, %3
  %20 = xor i64 -5212059124737060383, %3
  %21 = or i64 %19, %20
  %22 = xor i64 %11, %14
  %23 = xor i64 %22, %17
  %24 = xor i64 %23, 2764737194360041109
  %25 = xor i64 %24, %13
  %26 = xor i64 %25, %21
  %27 = xor i64 %26, %18
  %28 = or i64 %1, -7011322649058720044
  %29 = xor i64 %1, -1
  %30 = and i64 %29, 4143393592263747470
  %31 = and i64 %1, -4143393592263747471
  %32 = or i64 %30, %31
  %33 = xor i64 -6398896306664316582, %32
  %34 = xor i64 %1, -1
  %35 = or i64 7011322649058720043, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %33, %37
  %39 = add i64 %3, 554028367832768951
  %40 = add i64 2604247151261934735, %3
  %41 = add i64 %40, -2050218783429165784
  %42 = and i64 %3, -7564167316644471358
  %43 = or i64 7564167316644471357, %3
  %44 = sub i64 %43, 7564167316644471357
  %45 = xor i64 %39, 0
  %46 = xor i64 %45, %38
  %47 = xor i64 %46, %42
  %48 = xor i64 %47, %41
  %49 = xor i64 %48, %44
  %50 = xor i64 %49, %28
  %51 = mul i64 %27, %50
  %52 = trunc i64 %51 to i8
  %53 = sub i8 %52, %10
  %54 = sub i8 0, %9
  %55 = add i8 %53, %54
  %56 = sub i8 0, %55
  %57 = add i64 %3, -793062953309435176
  %58 = add i64 -9169283354851686066, %3
  %59 = add i64 %58, 8376220401542250890
  %60 = add i64 %1, -6031112909784191329
  %61 = sub i64 0, %1
  %62 = add i64 6031112909784191329, %61
  %63 = sub i64 0, %62
  %64 = xor i64 3406287809239727545, %57
  %65 = xor i64 %64, %59
  %66 = xor i64 %65, %63
  %67 = xor i64 %66, %60
  %68 = or i64 %1, 5149448412754005817
  %69 = xor i64 %1, -1
  %70 = and i64 5149448412754005817, %69
  %71 = add i64 %70, %1
  %72 = add i64 %1, 4432588414043086531
  %73 = add i64 798852515374513090, %1
  %74 = sub i64 %73, -3633735898668573441
  %75 = add i64 %3, -6628214832597721553
  %76 = sub i64 0, %3
  %77 = sub i64 -6628214832597721553, %76
  %78 = xor i64 %77, 7366809532622317979
  %79 = xor i64 %78, %72
  %80 = xor i64 %79, %68
  %81 = xor i64 %80, %75
  %82 = xor i64 %81, %71
  %83 = xor i64 %82, %74
  %84 = mul i64 %67, %83
  %85 = trunc i64 %84 to i8
  %86 = mul i8 %56, %85
  %87 = srem i8 %86, 2
  %88 = icmp eq i8 %87, 0
  %89 = mul i8 %9, %9
  %90 = add i8 %89, %9
  %91 = srem i8 %90, 2
  %92 = icmp eq i8 %91, 0
  %93 = xor i1 %92, true
  %94 = xor i1 %88, %93
  %95 = and i1 %94, %88
  %96 = select i1 %95, i32 984876138, i32 984876159
  %97 = xor i32 %96, -1
  %98 = and i32 %97, 21
  %99 = and i32 %96, -22
  %100 = or i32 %98, %99
  store i32 %100, i32* %0, align 4
  %101 = call i8** @bf6338069988336422972(i32* %0)
  %102 = load i8*, i8** %101, align 8
  indirectbr i8* %102, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.3.extracted(i32* %0, [65 x i32]* %lookupTable, i1 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876149)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.3.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876107)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.3.extracted, %9), i8** %6, align 8
  store i32 984876107, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = load i32, i32* %0, align 4
  %11 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %10, %12
  %14 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 20
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 18
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %15, %17
  %19 = select i1 %1, i32 %13, i32 %18
  store i32 %19, i32* %dispatcher, align 4
  %20 = load i8*, i8** %6, align 8
  %21 = load i8, i8* %20, align 1
  %22 = and i8 %21, 1
  %23 = icmp eq i8 %22, 1
  %24 = mul i8 %21, %21
  %25 = add i8 %24, %21
  %26 = srem i8 %25, 2
  %27 = icmp eq i8 %26, 0
  %28 = xor i1 %23, true
  %29 = and i1 %28, false
  %30 = and i64 %5, -944822727096263229
  %31 = xor i64 %5, -1
  %32 = or i64 944822727096263228, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = and i64 %5, -2954683753249561493
  %36 = or i64 2954683753249561492, %5
  %37 = sub i64 %36, 2954683753249561492
  %38 = or i64 %3, -4245831449020076811
  %39 = xor i64 %3, -1
  %40 = and i64 -4245831449020076811, %39
  %41 = add i64 %40, %3
  %42 = xor i64 %38, %35
  %43 = xor i64 %42, 3394474726458162131
  %44 = xor i64 %43, %34
  %45 = xor i64 %44, %30
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, %37
  %48 = add i64 %5, -4601200903358339029
  %49 = add i64 -3623840137744731768, %5
  %50 = sub i64 %49, 977360765613607261
  %51 = or i64 %3, -5045420220751207021
  %52 = and i64 -5045420220751207021, %3
  %53 = xor i64 -5045420220751207021, %3
  %54 = or i64 %52, %53
  %55 = xor i64 %54, %51
  %56 = xor i64 %55, -3858138600389045157
  %57 = xor i64 %56, %48
  %58 = xor i64 %57, %50
  %59 = mul i64 %47, %58
  %60 = trunc i64 %59 to i1
  %61 = and i1 %23, %60
  %62 = or i1 %29, %61
  %63 = xor i1 %27, true
  %64 = and i1 %63, false
  %65 = and i1 %27, true
  %66 = or i1 %64, %65
  %67 = xor i1 %62, %66
  %68 = xor i1 %23, true
  %69 = xor i1 %27, true
  %70 = or i1 %68, %69
  %71 = xor i1 %70, true
  %72 = and i1 %71, true
  %73 = or i1 %67, %72
  %74 = select i1 %73, i32 984876149, i32 984876149
  %75 = xor i32 %74, -1
  %76 = and i32 %75, 0
  %77 = and i32 %74, -1
  %78 = or i32 %76, %77
  store i32 %78, i32* %2, align 4
  %79 = call i8** @bf6338069988336422972(i32* %2)
  %80 = load i8*, i8** %79, align 8
  indirectbr i8* %80, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.4.extracted([65 x i32]* %lookupTable, i32 %0, i1 %1, i32 %2, i32* %dispatcher) #1 {
newFuncRoot:
  %3 = alloca i32, align 4
  %4 = call i64 @h6542867261474098886(i64 984876137)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.4.extracted, %loopEnd.exitStub.exitStub), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876141)
  %7 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.4.extracted, %10), i8** %7, align 8
  store i32 984876141, i32* %3, align 4
  %8 = call i8** @bf6338069988336422972(i32* %3)
  %9 = load i8*, i8** %8, align 8
  indirectbr i8* %9, [label %10]

10:                                               ; preds = %10, %newFuncRoot
  %11 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 31
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 0, %12
  %14 = add i32 %0, %13
  %15 = select i1 %1, i32 %2, i32 %14
  store i32 %15, i32* %dispatcher, align 4
  %16 = load i8*, i8** %7, align 8
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 1
  %19 = icmp eq i8 %18, 0
  %20 = mul i8 %17, %17
  %21 = add i8 %20, %17
  %22 = mul i8 %21, 3
  %23 = srem i8 %22, 2
  %24 = icmp eq i8 %23, 0
  %25 = or i1 %19, %24
  %26 = select i1 %25, i32 984876137, i32 984876137
  %27 = xor i32 %26, 0
  store i32 %27, i32* %3, align 4
  %28 = call i8** @bf6338069988336422972(i32* %3)
  %29 = load i8*, i8** %28, align 8
  indirectbr i8* %29, [label %loopEnd.exitStub.exitStub, label %10]

loopEnd.exitStub.exitStub:                        ; preds = %10
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.5.extracted(i32 %0, i32 %1, [65 x i32]* %lookupTable, i1* %.reg2mem51, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876113)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.5.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = sext i32 %1 to i64
  %6 = or i64 %5, -2593069007868509705
  %7 = xor i64 %5, -1
  %8 = and i64 -2593069007868509705, %7
  %9 = add i64 %8, %5
  %10 = sext i32 %0 to i64
  %11 = or i64 %10, 3217509111310397277
  %12 = xor i64 %10, -1
  %13 = and i64 %12, -4354466838303677589
  %14 = and i64 %10, 4354466838303677588
  %15 = or i64 %13, %14
  %16 = xor i64 -1209445172101919690, %15
  %17 = xor i64 %10, -1
  %18 = or i64 -3217509111310397278, %17
  %19 = xor i64 %18, -1
  %20 = and i64 %19, -1
  %21 = or i64 %16, %20
  %22 = sext i32 %0 to i64
  %23 = add i64 %22, 4296446445049119022
  %24 = add i64 8184509288791571067, %22
  %25 = sub i64 %24, 3888062843742452045
  %26 = xor i64 %9, -4755153713486335265
  %27 = xor i64 %26, %11
  %28 = xor i64 %27, %21
  %29 = xor i64 %28, %25
  %30 = xor i64 %29, %6
  %31 = xor i64 %30, %23
  %32 = sext i32 %0 to i64
  %33 = add i64 %32, 6037114043952674555
  %34 = xor i64 6037114043952674555, %32
  %35 = and i64 6037114043952674555, %32
  %36 = mul i64 2, %35
  %37 = add i64 %34, %36
  %38 = sext i32 %0 to i64
  %39 = and i64 %38, -8157380780044815132
  %40 = xor i64 %38, -1
  %41 = xor i64 -8157380780044815132, %40
  %42 = and i64 %41, -8157380780044815132
  %43 = sext i32 %1 to i64
  %44 = add i64 %43, 5683304242977970657
  %45 = add i64 -4733416051801279114, %43
  %46 = sub i64 %45, 8030023778930301845
  %47 = xor i64 %46, %37
  %48 = xor i64 %47, %39
  %49 = xor i64 %48, %33
  %50 = xor i64 %49, %44
  %51 = xor i64 %50, 6774292534707419653
  %52 = xor i64 %51, %42
  %53 = mul i64 %31, %52
  %54 = call i64 @h6542867261474098886(i64 %53)
  %55 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %54
  store i8* blockaddress(@render.extracted.5.extracted, %58), i8** %55, align 8
  store i32 984876123, i32* %2, align 4
  %56 = call i8** @bf6338069988336422972(i32* %2)
  %57 = load i8*, i8** %56, align 8
  indirectbr i8* %57, [label %58]

58:                                               ; preds = %58, %newFuncRoot
  %59 = sub i32 0, %0
  %60 = sub i32 0, %1
  %61 = add i32 %59, %60
  %62 = sub i32 0, %61
  %63 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 25
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %64, 650281850
  %68 = sub i32 %67, %66
  %69 = sub i32 %68, 650281850
  %.reload52 = load i1, i1* %.reg2mem51, align 1
  %70 = select i1 %.reload52, i32 %62, i32 %69
  store i32 %70, i32* %dispatcher, align 4
  %71 = load i8*, i8** %55, align 8
  %72 = load i8, i8* %71, align 1
  %73 = mul i8 %72, 2
  %74 = sext i32 %1 to i64
  %75 = and i64 %74, 494576384280719844
  %76 = or i64 -494576384280719845, %74
  %77 = sub i64 %76, -494576384280719845
  %78 = add i64 %3, -8979900397146857884
  %79 = sub i64 0, %3
  %80 = add i64 8979900397146857884, %79
  %81 = sub i64 0, %80
  %82 = xor i64 %75, %78
  %83 = xor i64 %82, 8327362134530030691
  %84 = xor i64 %83, %77
  %85 = xor i64 %84, %81
  %86 = sext i32 %0 to i64
  %87 = or i64 %86, -2378558108339905108
  %88 = xor i64 %86, -1
  %89 = and i64 -2378558108339905108, %88
  %90 = add i64 %89, %86
  %91 = or i64 %3, 6956428897113932058
  %92 = and i64 6956428897113932058, %3
  %93 = xor i64 6956428897113932058, %3
  %94 = or i64 %92, %93
  %95 = xor i64 5859409528172694166, %87
  %96 = xor i64 %95, %94
  %97 = xor i64 %96, %90
  %98 = xor i64 %97, %91
  %99 = mul i64 %85, %98
  %100 = trunc i64 %99 to i8
  %101 = mul i8 %72, %100
  %102 = add i8 2, %101
  %103 = mul i8 %73, %102
  %104 = srem i8 %103, 4
  %105 = icmp eq i8 %104, 0
  %106 = mul i8 %72, %72
  %107 = add i8 %106, %72
  %108 = srem i8 %107, 2
  %109 = icmp eq i8 %108, 0
  %110 = or i1 %105, %109
  %111 = select i1 %110, i32 984876123, i32 984876113
  %112 = xor i32 %111, 10
  store i32 %112, i32* %2, align 4
  %113 = call i8** @bf6338069988336422972(i32* %2)
  %114 = load i8*, i8** %113, align 8
  indirectbr i8* %114, [label %loopEnd.exitStub.exitStub, label %58]

loopEnd.exitStub.exitStub:                        ; preds = %58
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.6.extracted(i32 %0, i32 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = sext i32 %1 to i64
  %4 = or i64 %3, -4776975289640998611
  %5 = and i64 -4776975289640998611, %3
  %6 = xor i64 -4776975289640998611, %3
  %7 = or i64 %5, %6
  %8 = sext i32 %0 to i64
  %9 = add i64 %8, 9216215118333316407
  %10 = sub i64 0, %8
  %11 = sub i64 9216215118333316407, %10
  %12 = sext i32 %0 to i64
  %13 = add i64 %12, 1363082560791158562
  %14 = xor i64 1363082560791158562, %12
  %15 = and i64 1363082560791158562, %12
  %16 = mul i64 2, %15
  %17 = add i64 %14, %16
  %18 = xor i64 %4, %7
  %19 = xor i64 %18, %9
  %20 = xor i64 %19, 1750904867757119273
  %21 = xor i64 %20, %17
  %22 = xor i64 %21, %13
  %23 = xor i64 %22, %11
  %24 = sext i32 %0 to i64
  %25 = or i64 %24, -4931659784436916898
  %26 = xor i64 %24, -1
  %27 = and i64 -4931659784436916898, %26
  %28 = add i64 %27, %24
  %29 = sext i32 %1 to i64
  %30 = or i64 %29, -1419815903927326076
  %31 = and i64 -1419815903927326076, %29
  %32 = xor i64 -1419815903927326076, %29
  %33 = or i64 %31, %32
  %34 = sext i32 %1 to i64
  %35 = add i64 %34, 7424110110808409877
  %36 = and i64 7424110110808409877, %34
  %37 = or i64 7424110110808409877, %34
  %38 = add i64 %36, %37
  %39 = xor i64 %28, %25
  %40 = xor i64 %39, %33
  %41 = xor i64 %40, -5202316938386033731
  %42 = xor i64 %41, %30
  %43 = xor i64 %42, %38
  %44 = xor i64 %43, %35
  %45 = mul i64 %23, %44
  %46 = call i64 @h6542867261474098886(i64 %45)
  %47 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %46
  store i8* blockaddress(@render.extracted.6.extracted, %loopEnd.exitStub.exitStub), i8** %47, align 8
  %48 = call i64 @h6542867261474098886(i64 984876131)
  %49 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %48
  store i8* blockaddress(@render.extracted.6.extracted, %52), i8** %49, align 8
  store i32 984876131, i32* %2, align 4
  %50 = call i8** @bf6338069988336422972(i32* %2)
  %51 = load i8*, i8** %50, align 8
  indirectbr i8* %51, [label %52]

52:                                               ; preds = %52, %newFuncRoot
  %53 = srem i32 %0, %1
  store i32 %53, i32* %dispatcher, align 4
  %54 = load i8*, i8** %49, align 8
  %55 = load i8, i8* %54, align 1
  %56 = and i64 %46, -481240706879576284
  %57 = or i64 481240706879576283, %46
  %58 = sub i64 %57, 481240706879576283
  %59 = sext i32 %1 to i64
  %60 = or i64 %59, -2788366993503214346
  %61 = xor i64 %59, -1
  %62 = and i64 -2788366993503214346, %61
  %63 = add i64 %62, %59
  %64 = sext i32 %0 to i64
  %65 = or i64 %64, 5176192244107104045
  %66 = and i64 5176192244107104045, %64
  %67 = xor i64 5176192244107104045, %64
  %68 = or i64 %66, %67
  %69 = xor i64 %60, %58
  %70 = xor i64 %69, %68
  %71 = xor i64 %70, %56
  %72 = xor i64 %71, 9150293762401260773
  %73 = xor i64 %72, %65
  %74 = xor i64 %73, %63
  %75 = sext i32 %0 to i64
  %76 = add i64 %75, 7815573493848314257
  %77 = and i64 7815573493848314257, %75
  %78 = or i64 7815573493848314257, %75
  %79 = add i64 %77, %78
  %80 = and i64 %46, -3267298578771598316
  %81 = xor i64 %46, -1
  %82 = xor i64 -3267298578771598316, %81
  %83 = and i64 %82, -3267298578771598316
  %84 = sext i32 %1 to i64
  %85 = add i64 %84, 5292452854770350677
  %86 = add i64 -7047066854322337018, %84
  %87 = sub i64 %86, 6107224364616863921
  %88 = xor i64 %83, %79
  %89 = xor i64 %88, -4910087072713848595
  %90 = xor i64 %89, %85
  %91 = xor i64 %90, %76
  %92 = xor i64 %91, %80
  %93 = xor i64 %92, %87
  %94 = mul i64 %74, %93
  %95 = trunc i64 %94 to i8
  %96 = and i8 %55, %95
  %97 = add i64 %48, -8195863130590066554
  %98 = xor i64 -8195863130590066554, %48
  %99 = and i64 -8195863130590066554, %48
  %100 = mul i64 2, %99
  %101 = add i64 %98, %100
  %102 = sext i32 %0 to i64
  %103 = and i64 %102, -5862141432074453899
  %104 = xor i64 %102, -1
  %105 = or i64 5862141432074453898, %104
  %106 = xor i64 %105, -1
  %107 = and i64 %106, -1
  %108 = sext i32 %0 to i64
  %109 = and i64 %108, -7848960239294715751
  %110 = xor i64 %108, -1
  %111 = or i64 7848960239294715750, %110
  %112 = xor i64 %111, -1
  %113 = and i64 %112, -1
  %114 = xor i64 %109, %103
  %115 = xor i64 %114, %107
  %116 = xor i64 %115, %101
  %117 = xor i64 %116, %97
  %118 = xor i64 %117, %113
  %119 = xor i64 %118, 3744274605297009029
  %120 = or i64 %46, -3045416725182030169
  %121 = and i64 -3045416725182030169, %46
  %122 = xor i64 -3045416725182030169, %46
  %123 = or i64 %121, %122
  %124 = sext i32 %0 to i64
  %125 = or i64 %124, 4106023290345479602
  %126 = xor i64 %124, -1
  %127 = and i64 %126, -9205221683438231271
  %128 = and i64 %124, 9205221683438231270
  %129 = or i64 %127, %128
  %130 = xor i64 -5135231897546965845, %129
  %131 = xor i64 %124, -1
  %132 = or i64 -4106023290345479603, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = or i64 %130, %134
  %136 = or i64 %48, 6890555313627898485
  %137 = and i64 6890555313627898485, %48
  %138 = xor i64 6890555313627898485, %48
  %139 = or i64 %137, %138
  %140 = xor i64 %136, %139
  %141 = xor i64 %140, 0
  %142 = xor i64 %141, %135
  %143 = xor i64 %142, %120
  %144 = xor i64 %143, %123
  %145 = xor i64 %144, %125
  %146 = mul i64 %119, %145
  %147 = trunc i64 %146 to i8
  %148 = icmp eq i8 %96, %147
  %149 = mul i8 %55, %55
  %150 = add i8 %149, %55
  %151 = mul i8 %150, 3
  %152 = sext i32 %0 to i64
  %153 = add i64 %152, 3531844252073360835
  %154 = sub i64 0, %152
  %155 = sub i64 3531844252073360835, %154
  %156 = sext i32 %0 to i64
  %157 = or i64 %156, 3467770965716789147
  %158 = xor i64 %156, -1
  %159 = and i64 %158, 5855898109963896777
  %160 = and i64 %156, -5855898109963896778
  %161 = or i64 %159, %160
  %162 = xor i64 7015388997961769042, %161
  %163 = xor i64 %156, -1
  %164 = or i64 -3467770965716789148, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = or i64 %162, %166
  %168 = sext i32 %0 to i64
  %169 = add i64 %168, -3364387129125638956
  %170 = sub i64 0, %168
  %171 = sub i64 -3364387129125638956, %170
  %172 = xor i64 %169, %153
  %173 = xor i64 %172, %155
  %174 = xor i64 %173, %171
  %175 = xor i64 %174, %157
  %176 = xor i64 %175, 8916542374704243131
  %177 = xor i64 %176, %167
  %178 = sext i32 %0 to i64
  %179 = add i64 %178, -2015753959096144417
  %180 = xor i64 -2015753959096144417, %178
  %181 = and i64 -2015753959096144417, %178
  %182 = mul i64 2, %181
  %183 = add i64 %180, %182
  %184 = sext i32 %1 to i64
  %185 = add i64 %184, 8336614477814647376
  %186 = sub i64 0, %184
  %187 = sub i64 8336614477814647376, %186
  %188 = sext i32 %1 to i64
  %189 = add i64 %188, 8390795324667837846
  %190 = sub i64 0, %188
  %191 = add i64 -8390795324667837846, %190
  %192 = sub i64 0, %191
  %193 = xor i64 %189, -7484866049878296858
  %194 = xor i64 %193, %179
  %195 = xor i64 %194, %192
  %196 = xor i64 %195, %185
  %197 = xor i64 %196, %183
  %198 = xor i64 %197, %187
  %199 = mul i64 %177, %198
  %200 = trunc i64 %199 to i8
  %201 = srem i8 %151, %200
  %202 = or i64 %48, 8720175139772511947
  %203 = xor i64 %48, -1
  %204 = and i64 %203, 3470263300201513253
  %205 = and i64 %48, -3470263300201513254
  %206 = or i64 %204, %205
  %207 = xor i64 5272750905991837678, %206
  %208 = xor i64 %48, -1
  %209 = or i64 -8720175139772511948, %208
  %210 = xor i64 %209, -1
  %211 = and i64 %210, -1
  %212 = or i64 %207, %211
  %213 = add i64 %46, 2562778172410208319
  %214 = and i64 2562778172410208319, %46
  %215 = or i64 2562778172410208319, %46
  %216 = add i64 %214, %215
  %217 = sext i32 %0 to i64
  %218 = or i64 %217, -2895181572352534492
  %219 = and i64 -2895181572352534492, %217
  %220 = xor i64 -2895181572352534492, %217
  %221 = or i64 %219, %220
  %222 = xor i64 %221, %216
  %223 = xor i64 %222, -8007835399172256561
  %224 = xor i64 %223, %212
  %225 = xor i64 %224, %213
  %226 = xor i64 %225, %218
  %227 = xor i64 %226, %202
  %228 = add i64 %48, 6157296801302598463
  %229 = and i64 6157296801302598463, %48
  %230 = or i64 6157296801302598463, %48
  %231 = add i64 %229, %230
  %232 = and i64 %48, -6952829269110562045
  %233 = xor i64 %48, -1
  %234 = or i64 6952829269110562044, %233
  %235 = xor i64 %234, -1
  %236 = and i64 %235, -1
  %237 = xor i64 %228, %231
  %238 = xor i64 %237, %232
  %239 = xor i64 %238, %236
  %240 = xor i64 %239, 0
  %241 = mul i64 %227, %240
  %242 = trunc i64 %241 to i8
  %243 = icmp eq i8 %201, %242
  %244 = or i1 %148, %243
  %245 = sext i32 %0 to i64
  %246 = or i64 %245, 3067086211402865620
  %247 = xor i64 %245, -1
  %248 = and i64 3067086211402865620, %247
  %249 = add i64 %248, %245
  %250 = sext i32 %0 to i64
  %251 = or i64 %250, 6811193546757334875
  %252 = and i64 6811193546757334875, %250
  %253 = xor i64 6811193546757334875, %250
  %254 = or i64 %252, %253
  %255 = or i64 %48, 7715873877967861978
  %256 = xor i64 %48, -1
  %257 = and i64 %256, -6971926570525125439
  %258 = and i64 %48, 6971926570525125438
  %259 = or i64 %257, %258
  %260 = xor i64 -852596705495651301, %259
  %261 = xor i64 %48, -1
  %262 = or i64 -7715873877967861979, %261
  %263 = xor i64 %262, -1
  %264 = and i64 %263, -1
  %265 = or i64 %260, %264
  %266 = xor i64 %254, %255
  %267 = xor i64 %266, %249
  %268 = xor i64 %267, %246
  %269 = xor i64 %268, %265
  %270 = xor i64 %269, %251
  %271 = xor i64 %270, 1574374401857319961
  %272 = add i64 %46, -228982997629717889
  %273 = sub i64 0, %46
  %274 = add i64 228982997629717889, %273
  %275 = sub i64 0, %274
  %276 = and i64 %48, 7606984985812950558
  %277 = xor i64 %48, -1
  %278 = xor i64 7606984985812950558, %277
  %279 = and i64 %278, 7606984985812950558
  %280 = xor i64 -3044282450900374565, %275
  %281 = xor i64 %280, %276
  %282 = xor i64 %281, %279
  %283 = xor i64 %282, %272
  %284 = mul i64 %271, %283
  %285 = trunc i64 %284 to i32
  %286 = select i1 %244, i32 %285, i32 984876101
  %287 = xor i32 %286, 38
  store i32 %287, i32* %2, align 4
  %288 = call i8** @bf6338069988336422972(i32* %2)
  %289 = load i8*, i8** %288, align 8
  indirectbr i8* %289, [label %loopEnd.exitStub.exitStub, label %52]

loopEnd.exitStub.exitStub:                        ; preds = %52
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.7.extracted(i32 %0, i32 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876100)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.7.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876099)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.7.extracted, %9), i8** %6, align 8
  store i32 984876099, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = srem i32 %0, %1
  store i32 %10, i32* %dispatcher, align 4
  %11 = load i8*, i8** %4, align 8
  %12 = load i8, i8* %11, align 1
  %13 = xor i8 %12, -2
  %14 = and i8 %13, %12
  %15 = icmp eq i8 %14, 0
  %16 = mul i8 %12, %12
  %17 = add i8 %16, %12
  %18 = mul i8 %17, 3
  %19 = srem i8 %18, 2
  %20 = icmp eq i8 %19, 0
  %21 = or i1 %15, %20
  %22 = select i1 %21, i32 984876099, i32 984876100
  %23 = xor i32 %22, -1
  %24 = and i32 %23, 2139205535
  %25 = and i32 %22, -2139205536
  %26 = or i32 %24, %25
  %27 = xor i32 %26, 2139205528
  store i32 %27, i32* %2, align 4
  %28 = call i8** @bf6338069988336422972(i32* %2)
  %29 = load i8*, i8** %28, align 8
  indirectbr i8* %29, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.8.extracted(i32* %.ph.reg2mem) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876115)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.8.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876129)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.8.extracted, %7), i8** %4, align 8
  store i32 984876129, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  store i32 0, i32* %.ph.reg2mem, align 4
  %8 = load i8*, i8** %4, align 8
  %9 = load i8, i8* %8, align 1
  %10 = and i64 %3, 2301845139100562280
  %11 = xor i64 %3, -1
  %12 = or i64 -2301845139100562281, %11
  %13 = xor i64 %12, -1
  %14 = and i64 %13, -1
  %15 = add i64 %3, 3862660872645841265
  %16 = add i64 5109118043809839424, %3
  %17 = sub i64 %16, 1246457171163998159
  %18 = xor i64 %17, 2060231913387232823
  %19 = xor i64 %18, %15
  %20 = xor i64 %19, %10
  %21 = xor i64 %20, %14
  %22 = and i64 %3, 4030924956984033561
  %23 = or i64 -4030924956984033562, %3
  %24 = sub i64 %23, -4030924956984033562
  %25 = add i64 %3, -2352757991851905828
  %26 = xor i64 -2352757991851905828, %3
  %27 = and i64 -2352757991851905828, %3
  %28 = mul i64 2, %27
  %29 = add i64 %26, %28
  %30 = xor i64 %24, %29
  %31 = xor i64 %30, %22
  %32 = xor i64 %31, 7744431068274036494
  %33 = xor i64 %32, %25
  %34 = mul i64 %21, %33
  %35 = trunc i64 %34 to i8
  %36 = mul i8 %9, %35
  %37 = mul i8 %9, 2
  %38 = add i8 -62, %37
  %39 = sub i8 %38, -64
  %40 = mul i8 %36, %39
  %41 = srem i8 %40, 4
  %42 = icmp eq i8 %41, 0
  %43 = mul i8 %9, %9
  %44 = add i8 %43, 11
  %45 = add i8 %44, %9
  %46 = sub i8 %45, 11
  %47 = srem i8 %46, 2
  %48 = icmp eq i8 %47, 0
  %49 = and i1 %42, %48
  %50 = select i1 %49, i32 984876115, i32 984876115
  %51 = xor i32 %50, -1
  %52 = and i64 %1, 4341291028504010191
  %53 = xor i64 %1, -1
  %54 = xor i64 4341291028504010191, %53
  %55 = and i64 %54, 4341291028504010191
  %56 = add i64 %1, 6977353515984961940
  %57 = sub i64 0, %1
  %58 = sub i64 6977353515984961940, %57
  %59 = xor i64 %52, %56
  %60 = xor i64 %59, -5444216611428516971
  %61 = xor i64 %60, %58
  %62 = xor i64 %61, %55
  %63 = or i64 %1, -1267862630074089969
  %64 = xor i64 %1, -1
  %65 = and i64 %64, 804799946542728995
  %66 = and i64 %1, -804799946542728996
  %67 = or i64 %65, %66
  %68 = xor i64 -1923990393324685012, %67
  %69 = xor i64 %1, -1
  %70 = or i64 1267862630074089968, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = or i64 %68, %72
  %74 = or i64 %1, 671039595834586414
  %75 = xor i64 %1, -1
  %76 = and i64 %75, 6185370076173602031
  %77 = and i64 %1, -6185370076173602032
  %78 = or i64 %76, %77
  %79 = xor i64 6667257800375777729, %78
  %80 = xor i64 %1, -1
  %81 = or i64 -671039595834586415, %80
  %82 = xor i64 %81, -1
  %83 = and i64 %82, -1
  %84 = or i64 %79, %83
  %85 = xor i64 1222448346275233091, %73
  %86 = xor i64 %85, %63
  %87 = xor i64 %86, %84
  %88 = xor i64 %87, %74
  %89 = mul i64 %62, %88
  %90 = trunc i64 %89 to i32
  %91 = and i32 %51, %90
  %92 = and i32 %50, 1612179200
  %93 = or i32 %91, %92
  %94 = xor i32 %93, -1612179201
  store i32 %94, i32* %0, align 4
  %95 = call i8** @bf6338069988336422972(i32* %0)
  %96 = load i8*, i8** %95, align 8
  indirectbr i8* %96, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.9.extracted(i32* %0, i32 %1, i1 %2, i32 %3, i32* %dispatcher) #1 {
newFuncRoot:
  %4 = alloca i32, align 4
  %5 = sext i32 %1 to i64
  %6 = and i64 %5, -1355110922351523531
  %7 = xor i64 %5, -1
  %8 = or i64 1355110922351523530, %7
  %9 = xor i64 %8, -1
  %10 = and i64 %9, -1
  %11 = sext i32 %3 to i64
  %12 = or i64 %11, 8343888242304259896
  %13 = xor i64 %11, -1
  %14 = and i64 8343888242304259896, %13
  %15 = add i64 %14, %11
  %16 = sext i32 %1 to i64
  %17 = and i64 %16, 6926626154151573754
  %18 = or i64 -6926626154151573755, %16
  %19 = sub i64 %18, -6926626154151573755
  %20 = xor i64 %10, 7461444917150295597
  %21 = xor i64 %20, %6
  %22 = xor i64 %21, %17
  %23 = xor i64 %22, %12
  %24 = xor i64 %23, %19
  %25 = xor i64 %24, %15
  %26 = sext i32 %1 to i64
  %27 = and i64 %26, -1736083241656239743
  %28 = xor i64 %26, -1
  %29 = xor i64 -1736083241656239743, %28
  %30 = and i64 %29, -1736083241656239743
  %31 = sext i32 %3 to i64
  %32 = add i64 %31, -6580805008869591445
  %33 = add i64 4875386105353014302, %31
  %34 = sub i64 %33, -6990552959486945869
  %35 = xor i64 -3953530283957879488, %27
  %36 = xor i64 %35, %30
  %37 = xor i64 %36, %32
  %38 = xor i64 %37, %34
  %39 = mul i64 %25, %38
  %40 = call i64 @h6542867261474098886(i64 %39)
  %41 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %40
  store i8* blockaddress(@render.extracted.9.extracted, %loopEnd.exitStub.exitStub), i8** %41, align 8
  %42 = call i64 @h6542867261474098886(i64 984876138)
  %43 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %42
  store i8* blockaddress(@render.extracted.9.extracted, %46), i8** %43, align 8
  store i32 984876138, i32* %4, align 4
  %44 = call i8** @bf6338069988336422972(i32* %4)
  %45 = load i8*, i8** %44, align 8
  indirectbr i8* %45, [label %46]

46:                                               ; preds = %46, %newFuncRoot
  %47 = load i32, i32* %0, align 4
  %48 = srem i32 %1, %47
  %49 = select i1 %2, i32 %3, i32 %48
  store i32 %49, i32* %dispatcher, align 4
  %50 = load i8*, i8** %43, align 8
  %51 = load i8, i8* %50, align 1
  %52 = mul i8 %51, 2
  %53 = sext i32 %3 to i64
  %54 = or i64 %53, -8538900183167875384
  %55 = xor i64 %53, -1
  %56 = and i64 %55, -1277946102964765462
  %57 = and i64 %53, 1277946102964765461
  %58 = or i64 %56, %57
  %59 = xor i64 7438936459839699490, %58
  %60 = xor i64 %53, -1
  %61 = or i64 8538900183167875383, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = or i64 %59, %63
  %65 = or i64 %40, 8460833254748576162
  %66 = xor i64 %40, -1
  %67 = and i64 %66, -2252184628318569776
  %68 = and i64 %40, 2252184628318569775
  %69 = or i64 %67, %68
  %70 = xor i64 -7650409569069292686, %69
  %71 = xor i64 %40, -1
  %72 = or i64 -8460833254748576163, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = or i64 %70, %74
  %76 = xor i64 %65, %64
  %77 = xor i64 %76, 1642490781214798075
  %78 = xor i64 %77, %75
  %79 = xor i64 %78, %54
  %80 = and i64 %42, 2190790716869545327
  %81 = or i64 -2190790716869545328, %42
  %82 = sub i64 %81, -2190790716869545328
  %83 = and i64 %40, -4662063516768649604
  %84 = or i64 4662063516768649603, %40
  %85 = sub i64 %84, 4662063516768649603
  %86 = xor i64 %80, %83
  %87 = xor i64 %86, 236628289869722726
  %88 = xor i64 %87, %82
  %89 = xor i64 %88, %85
  %90 = mul i64 %79, %89
  %91 = trunc i64 %90 to i8
  %92 = mul i8 %51, %91
  %93 = and i8 2, %92
  %94 = or i8 2, %92
  %95 = add i8 %93, %94
  %96 = mul i8 %52, %95
  %97 = srem i8 %96, 4
  %98 = icmp eq i8 %97, 0
  %99 = mul i8 %51, %51
  %100 = mul i8 %99, %51
  %101 = add i8 %100, %51
  %102 = srem i8 %101, 2
  %103 = icmp eq i8 %102, 0
  %104 = and i1 %98, %103
  %105 = select i1 %104, i32 984876138, i32 984876096
  %106 = xor i32 %105, 42
  store i32 %106, i32* %4, align 4
  %107 = call i8** @bf6338069988336422972(i32* %4)
  %108 = load i8*, i8** %107, align 8
  indirectbr i8* %108, [label %loopEnd.exitStub.exitStub, label %46]

loopEnd.exitStub.exitStub:                        ; preds = %46
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.10.extracted(i1 %.reload104, i32 %0, i32 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876098)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.10.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876146)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.10.extracted, %9), i8** %6, align 8
  store i32 984876146, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = select i1 %.reload104, i32 %0, i32 %1
  store i32 %10, i32* %dispatcher, align 4
  %11 = load i8*, i8** %4, align 8
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 1
  %14 = icmp eq i8 %13, 0
  %15 = mul i8 %12, %12
  %16 = xor i8 %15, %12
  %17 = and i8 %15, %12
  %18 = and i64 %3, -7724455110948809039
  %19 = xor i64 %3, -1
  %20 = xor i64 -7724455110948809039, %19
  %21 = and i64 %20, -7724455110948809039
  %22 = or i64 %3, 3841038778886899884
  %23 = xor i64 %3, -1
  %24 = and i64 3841038778886899884, %23
  %25 = add i64 %24, %3
  %26 = and i64 %5, 3068978134368626984
  %27 = xor i64 %5, -1
  %28 = or i64 -3068978134368626985, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = xor i64 -8806464262922921143, %25
  %32 = xor i64 %31, %30
  %33 = xor i64 %32, %22
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, %21
  %36 = xor i64 %35, %18
  %37 = sext i32 %0 to i64
  %38 = add i64 %37, -1879545613036449111
  %39 = add i64 6675695733996203841, %37
  %40 = add i64 %39, -8555241347032652952
  %41 = add i64 %3, 8361678706145306195
  %42 = sub i64 0, %3
  %43 = sub i64 8361678706145306195, %42
  %44 = add i64 %5, -4207602193529381524
  %45 = sub i64 0, %5
  %46 = add i64 4207602193529381524, %45
  %47 = sub i64 0, %46
  %48 = xor i64 -7159686204376838670, %41
  %49 = xor i64 %48, %44
  %50 = xor i64 %49, %38
  %51 = xor i64 %50, %40
  %52 = xor i64 %51, %43
  %53 = xor i64 %52, %47
  %54 = mul i64 %36, %53
  %55 = trunc i64 %54 to i8
  %56 = mul i8 %55, %17
  %57 = add i8 %16, %56
  %58 = sext i32 %0 to i64
  %59 = or i64 %58, 2930989829744495402
  %60 = and i64 2930989829744495402, %58
  %61 = xor i64 2930989829744495402, %58
  %62 = or i64 %60, %61
  %63 = and i64 %3, 7440745281494990459
  %64 = xor i64 %3, -1
  %65 = or i64 -7440745281494990460, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = and i64 %5, 7191304630787584256
  %69 = xor i64 %5, -1
  %70 = xor i64 7191304630787584256, %69
  %71 = and i64 %70, 7191304630787584256
  %72 = xor i64 -2120034586203315013, %63
  %73 = xor i64 %72, %68
  %74 = xor i64 %73, %62
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, %71
  %77 = xor i64 %76, %59
  %78 = and i64 %5, 7857355833806699703
  %79 = or i64 -7857355833806699704, %5
  %80 = sub i64 %79, -7857355833806699704
  %81 = or i64 %3, -8349391299969689055
  %82 = and i64 -8349391299969689055, %3
  %83 = xor i64 -8349391299969689055, %3
  %84 = or i64 %82, %83
  %85 = sext i32 %0 to i64
  %86 = and i64 %85, -2465240025991875537
  %87 = or i64 2465240025991875536, %85
  %88 = sub i64 %87, 2465240025991875536
  %89 = xor i64 %78, %86
  %90 = xor i64 %89, %88
  %91 = xor i64 %90, %81
  %92 = xor i64 %91, -8157213136605376123
  %93 = xor i64 %92, %80
  %94 = xor i64 %93, %84
  %95 = mul i64 %77, %94
  %96 = trunc i64 %95 to i8
  %97 = mul i8 %96, %57
  %98 = add i8 23, %97
  %99 = mul i8 -105, %98
  %100 = add i8 111, %99
  %101 = mul i8 %100, 3
  %102 = srem i8 %101, 2
  %103 = icmp eq i8 %102, 0
  %104 = and i1 %14, %103
  %105 = xor i1 %14, %103
  %106 = or i1 %104, %105
  %107 = select i1 %106, i32 984876146, i32 984876098
  %108 = xor i32 %107, 48
  store i32 %108, i32* %2, align 4
  %109 = call i8** @bf6338069988336422972(i32* %2)
  %110 = load i8*, i8** %109, align 8
  indirectbr i8* %110, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.11.extracted(i32* %0, i32 %1, i1 %2, i32 %3, i32* %dispatcher) #1 {
newFuncRoot:
  %4 = alloca i32, align 4
  %5 = call i64 @h6542867261474098886(i64 984876143)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.11.extracted, %loopEnd.exitStub.exitStub), i8** %6, align 8
  %7 = sext i32 %1 to i64
  %8 = add i64 %7, -1705003226743651158
  %9 = and i64 -1705003226743651158, %7
  %10 = or i64 -1705003226743651158, %7
  %11 = add i64 %9, %10
  %12 = sext i32 %1 to i64
  %13 = and i64 %12, 5353506418810289740
  %14 = xor i64 %12, -1
  %15 = xor i64 5353506418810289740, %14
  %16 = and i64 %15, 5353506418810289740
  %17 = sext i32 %3 to i64
  %18 = add i64 %17, 381276171958473047
  %19 = sub i64 0, %17
  %20 = sub i64 381276171958473047, %19
  %21 = xor i64 -6920746251942851335, %8
  %22 = xor i64 %21, %16
  %23 = xor i64 %22, %18
  %24 = xor i64 %23, %11
  %25 = xor i64 %24, %20
  %26 = xor i64 %25, %13
  %27 = sext i32 %1 to i64
  %28 = add i64 %27, 7918608059983358226
  %29 = sub i64 0, %27
  %30 = add i64 -7918608059983358226, %29
  %31 = sub i64 0, %30
  %32 = sext i32 %1 to i64
  %33 = and i64 %32, -1327501089682587214
  %34 = or i64 1327501089682587213, %32
  %35 = sub i64 %34, 1327501089682587213
  %36 = sext i32 %1 to i64
  %37 = or i64 %36, 9084022388622543142
  %38 = xor i64 %36, -1
  %39 = and i64 %38, -6885841354101009476
  %40 = and i64 %36, 6885841354101009475
  %41 = or i64 %39, %40
  %42 = xor i64 -2422798066016347494, %41
  %43 = xor i64 %36, -1
  %44 = or i64 -9084022388622543143, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = xor i64 %33, %35
  %49 = xor i64 %48, %47
  %50 = xor i64 %49, -7359493565252840205
  %51 = xor i64 %50, %31
  %52 = xor i64 %51, %28
  %53 = xor i64 %52, %37
  %54 = mul i64 %26, %53
  %55 = call i64 @h6542867261474098886(i64 %54)
  %56 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %55
  store i8* blockaddress(@render.extracted.11.extracted, %89), i8** %56, align 8
  %57 = sext i32 %1 to i64
  %58 = add i64 %57, -4554395930786595261
  %59 = sub i64 0, %57
  %60 = add i64 4554395930786595261, %59
  %61 = sub i64 0, %60
  %62 = sext i32 %1 to i64
  %63 = add i64 %62, 5367189713485268367
  %64 = and i64 5367189713485268367, %62
  %65 = or i64 5367189713485268367, %62
  %66 = add i64 %64, %65
  %67 = xor i64 %66, %63
  %68 = xor i64 %67, -5550647765460346751
  %69 = xor i64 %68, %58
  %70 = xor i64 %69, %61
  %71 = sext i32 %3 to i64
  %72 = and i64 %71, -78493589322200034
  %73 = or i64 78493589322200033, %71
  %74 = sub i64 %73, 78493589322200033
  %75 = sext i32 %3 to i64
  %76 = add i64 %75, -6810771297034156847
  %77 = xor i64 -6810771297034156847, %75
  %78 = and i64 -6810771297034156847, %75
  %79 = mul i64 2, %78
  %80 = add i64 %77, %79
  %81 = xor i64 4500220617308606171, %72
  %82 = xor i64 %81, %80
  %83 = xor i64 %82, %74
  %84 = xor i64 %83, %76
  %85 = mul i64 %70, %84
  %86 = trunc i64 %85 to i32
  store i32 %86, i32* %4, align 4
  %87 = call i8** @bf6338069988336422972(i32* %4)
  %88 = load i8*, i8** %87, align 8
  indirectbr i8* %88, [label %89]

89:                                               ; preds = %89, %newFuncRoot
  %90 = load i32, i32* %0, align 4
  %91 = srem i32 %1, %90
  %92 = select i1 %2, i32 %3, i32 %91
  store i32 %92, i32* %dispatcher, align 4
  %93 = load i8*, i8** %6, align 8
  %94 = load i8, i8* %93, align 1
  %95 = mul i8 %94, 2
  %96 = mul i8 %94, 2
  %97 = add i8 2, %96
  %98 = mul i8 %95, %97
  %99 = srem i8 %98, 4
  %100 = icmp eq i8 %99, 0
  %101 = mul i8 %94, %94
  %102 = mul i8 %101, %94
  %103 = add i8 %102, %94
  %104 = srem i8 %103, 2
  %105 = icmp eq i8 %104, 0
  %106 = and i1 %100, %105
  %107 = select i1 %106, i32 984876143, i32 984876143
  %108 = xor i32 %107, 0
  store i32 %108, i32* %4, align 4
  %109 = call i8** @bf6338069988336422972(i32* %4)
  %110 = load i8*, i8** %109, align 8
  indirectbr i8* %110, [label %loopEnd.exitStub.exitStub, label %89]

loopEnd.exitStub.exitStub:                        ; preds = %89
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.12.extracted(i32* %0, [65 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876123)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.12.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876122)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.12.extracted, %8), i8** %5, align 8
  store i32 984876122, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds [65 x i32], [65 x i32]* %lookupTable, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = and i64 %2, -2559109121520335315
  %13 = xor i64 %2, -1
  %14 = xor i64 -2559109121520335315, %13
  %15 = and i64 %14, -2559109121520335315
  %16 = add i64 %2, 6495735534125268403
  %17 = sub i64 0, %2
  %18 = sub i64 6495735534125268403, %17
  %19 = xor i64 %18, %16
  %20 = xor i64 %19, %15
  %21 = xor i64 %20, %12
  %22 = xor i64 %21, 5685874828607175533
  %23 = or i64 %2, 890854696295952562
  %24 = xor i64 %2, -1
  %25 = and i64 %24, 9207091575807666365
  %26 = and i64 %2, -9207091575807666366
  %27 = or i64 %25, %26
  %28 = xor i64 8330210848244275215, %27
  %29 = xor i64 %2, -1
  %30 = or i64 -890854696295952563, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = or i64 %28, %32
  %34 = or i64 %4, 1349483904979664478
  %35 = and i64 1349483904979664478, %4
  %36 = xor i64 1349483904979664478, %4
  %37 = or i64 %35, %36
  %38 = add i64 %4, -5743784958770968241
  %39 = sub i64 0, %4
  %40 = add i64 5743784958770968241, %39
  %41 = sub i64 0, %40
  %42 = xor i64 3200140015834852069, %34
  %43 = xor i64 %42, %38
  %44 = xor i64 %43, %41
  %45 = xor i64 %44, %37
  %46 = xor i64 %45, %23
  %47 = xor i64 %46, %33
  %48 = mul i64 %22, %47
  %49 = trunc i64 %48 to i32
  %50 = add i32 %9, %49
  %51 = sub i32 %50, %11
  %52 = sub i32 %51, 623397505
  store i32 %52, i32* %dispatcher, align 4
  %53 = load i8*, i8** %5, align 8
  %54 = load i8, i8* %53, align 1
  %55 = mul i8 %54, 2
  %56 = mul i8 %54, 2
  %57 = add i8 2, %56
  %58 = mul i8 %55, %57
  %59 = and i64 %4, 2348705060904705552
  %60 = xor i64 %4, -1
  %61 = or i64 -2348705060904705553, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = and i64 %2, -4362377191524239094
  %65 = or i64 4362377191524239093, %2
  %66 = sub i64 %65, 4362377191524239093
  %67 = or i64 %4, -8383870998892035930
  %68 = xor i64 %4, -1
  %69 = and i64 -8383870998892035930, %68
  %70 = add i64 %69, %4
  %71 = xor i64 %59, %67
  %72 = xor i64 %71, %63
  %73 = xor i64 %72, 3004688166319933409
  %74 = xor i64 %73, %70
  %75 = xor i64 %74, %66
  %76 = xor i64 %75, %64
  %77 = add i64 %2, 6323520709485456863
  %78 = xor i64 6323520709485456863, %2
  %79 = and i64 6323520709485456863, %2
  %80 = mul i64 2, %79
  %81 = add i64 %78, %80
  %82 = or i64 %2, -4136585781284337510
  %83 = and i64 -4136585781284337510, %2
  %84 = xor i64 -4136585781284337510, %2
  %85 = or i64 %83, %84
  %86 = add i64 %4, -6179912187314338759
  %87 = sub i64 0, %4
  %88 = add i64 6179912187314338759, %87
  %89 = sub i64 0, %88
  %90 = xor i64 %86, 8456569463204147332
  %91 = xor i64 %90, %85
  %92 = xor i64 %91, %77
  %93 = xor i64 %92, %81
  %94 = xor i64 %93, %89
  %95 = xor i64 %94, %82
  %96 = mul i64 %76, %95
  %97 = trunc i64 %96 to i8
  %98 = srem i8 %58, %97
  %99 = icmp eq i8 %98, 0
  %100 = mul i8 %54, %54
  %101 = add i8 %100, %54
  %102 = srem i8 %101, 2
  %103 = icmp eq i8 %102, 0
  %104 = or i1 %99, %103
  %105 = select i1 %104, i32 984876122, i32 984876123
  %106 = or i64 %4, -7172674553053223887
  %107 = xor i64 %4, -1
  %108 = and i64 -7172674553053223887, %107
  %109 = add i64 %108, %4
  %110 = or i64 %2, 5094480995575153685
  %111 = and i64 5094480995575153685, %2
  %112 = xor i64 5094480995575153685, %2
  %113 = or i64 %111, %112
  %114 = or i64 %2, -3610081066711479500
  %115 = xor i64 %2, -1
  %116 = and i64 %115, 5072936769016681463
  %117 = and i64 %2, -5072936769016681464
  %118 = or i64 %116, %117
  %119 = xor i64 -8394468393804277565, %118
  %120 = xor i64 %2, -1
  %121 = or i64 3610081066711479499, %120
  %122 = xor i64 %121, -1
  %123 = and i64 %122, -1
  %124 = or i64 %119, %123
  %125 = xor i64 6142708780883008841, %114
  %126 = xor i64 %125, %113
  %127 = xor i64 %126, %106
  %128 = xor i64 %127, %124
  %129 = xor i64 %128, %110
  %130 = xor i64 %129, %109
  %131 = or i64 %4, -2310261046663659264
  %132 = and i64 -2310261046663659264, %4
  %133 = xor i64 -2310261046663659264, %4
  %134 = or i64 %132, %133
  %135 = or i64 %2, -3083070451196948237
  %136 = xor i64 %2, -1
  %137 = and i64 %136, 216974057635762858
  %138 = and i64 %2, -216974057635762859
  %139 = or i64 %137, %138
  %140 = xor i64 -3011673385928375719, %139
  %141 = xor i64 %2, -1
  %142 = or i64 3083070451196948236, %141
  %143 = xor i64 %142, -1
  %144 = and i64 %143, -1
  %145 = or i64 %140, %144
  %146 = xor i64 %135, %145
  %147 = xor i64 %146, %131
  %148 = xor i64 %147, -1379485473761338617
  %149 = xor i64 %148, %134
  %150 = mul i64 %130, %149
  %151 = trunc i64 %150 to i32
  %152 = xor i32 %105, %151
  %153 = add i64 %2, -7012065565012132986
  %154 = xor i64 -7012065565012132986, %2
  %155 = and i64 -7012065565012132986, %2
  %156 = mul i64 2, %155
  %157 = add i64 %154, %156
  %158 = or i64 %2, -5779568274309081601
  %159 = and i64 -5779568274309081601, %2
  %160 = xor i64 -5779568274309081601, %2
  %161 = or i64 %159, %160
  %162 = or i64 %4, 3289354134456145270
  %163 = xor i64 %4, -1
  %164 = and i64 3289354134456145270, %163
  %165 = add i64 %164, %4
  %166 = xor i64 %165, %153
  %167 = xor i64 %166, %157
  %168 = xor i64 %167, -689295333395372705
  %169 = xor i64 %168, %158
  %170 = xor i64 %169, %161
  %171 = xor i64 %170, %162
  %172 = and i64 %4, -278491220527654944
  %173 = xor i64 %4, -1
  %174 = xor i64 -278491220527654944, %173
  %175 = and i64 %174, -278491220527654944
  %176 = add i64 %4, -6985939640508047940
  %177 = xor i64 -6985939640508047940, %4
  %178 = and i64 -6985939640508047940, %4
  %179 = mul i64 2, %178
  %180 = add i64 %177, %179
  %181 = or i64 %4, -4986769648438150224
  %182 = xor i64 %4, -1
  %183 = and i64 -4986769648438150224, %182
  %184 = add i64 %183, %4
  %185 = xor i64 %176, -1275040639629996920
  %186 = xor i64 %185, %172
  %187 = xor i64 %186, %181
  %188 = xor i64 %187, %180
  %189 = xor i64 %188, %184
  %190 = xor i64 %189, %175
  %191 = mul i64 %171, %190
  %192 = trunc i64 %191 to i32
  %193 = and i32 %152, %192
  %194 = and i32 %105, -941854329
  %195 = or i32 %193, %194
  %196 = xor i32 %195, 941854329
  store i32 %196, i32* %1, align 4
  %197 = call i8** @bf6338069988336422972(i32* %1)
  %198 = load i8*, i8** %197, align 8
  indirectbr i8* %198, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.13.extracted(i32 %0, i32 %1, i1 %2, i32 %3, i32* %dispatcher, i32 %4, i32* %.ph.reg2mem) #1 {
newFuncRoot:
  %5 = alloca i32, align 4
  %6 = call i64 @h6542867261474098886(i64 984876107)
  %7 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.13.extracted, %loopEnd.exitStub.exitStub), i8** %7, align 8
  %8 = call i64 @h6542867261474098886(i64 984876154)
  %9 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.13.extracted, %12), i8** %9, align 8
  store i32 984876154, i32* %5, align 4
  %10 = call i8** @bf6338069988336422972(i32* %5)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = add i32 %0, 1278926335
  %14 = sub i32 %13, %1
  %15 = sub i32 %14, 1278926335
  %16 = select i1 %2, i32 %3, i32 %15
  store i32 %16, i32* %dispatcher, align 4
  store i32 %4, i32* %.ph.reg2mem, align 4
  %17 = load i8*, i8** %7, align 8
  %18 = load i8, i8* %17, align 1
  %19 = mul i8 %18, 2
  %20 = mul i8 %18, 2
  %21 = add i8 -56, %20
  %22 = add i8 %21, 58
  %23 = mul i8 %19, %22
  %24 = srem i8 %23, 4
  %25 = icmp eq i8 %24, 0
  %26 = mul i8 %18, %18
  %27 = add i8 %26, %18
  %28 = srem i8 %27, 2
  %29 = icmp eq i8 %28, 0
  %30 = xor i1 %25, true
  %31 = xor i1 %29, true
  %32 = or i1 %30, %31
  %33 = xor i1 %32, true
  %34 = and i1 %33, true
  %35 = select i1 %34, i32 984876154, i32 984876107
  %36 = xor i32 %35, 49
  store i32 %36, i32* %5, align 4
  %37 = call i8** @bf6338069988336422972(i32* %5)
  %38 = load i8*, i8** %37, align 8
  indirectbr i8* %38, [label %loopEnd.exitStub.exitStub, label %12]

loopEnd.exitStub.exitStub:                        ; preds = %12
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.EntryBasicBlockSplit(i1* %.reg2mem, i1* %.reg2mem2, [15 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem22) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7073427795398676039, i32 0, i64 %1
  store i8* blockaddress(@clear.EntryBasicBlockSplit, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7073427795398676039, i32 0, i64 %3
  store i8* blockaddress(@clear.EntryBasicBlockSplit, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7073427795398676039, i32 0, i64 %5
  store i8* blockaddress(@clear.EntryBasicBlockSplit, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5603075018834282146, i32 0, i64 %8
  store i8* bitcast (void (i1, i1, [15 x i32]*, i32*, i32*)* @clear.EntryBasicBlockSplit.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf15416862713012807793(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %EntryBasicBlockSplit]

EntryBasicBlockSplit:                             ; preds = %EntryBasicBlockSplit, %newFuncRoot
  %.reload = load i1, i1* %.reg2mem, align 1
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %12 = load i8*, i8** %4, align 8
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 1
  %15 = icmp eq i8 %14, 1
  %16 = mul i8 %13, %13
  %17 = xor i8 %16, %13
  %18 = and i8 %16, %13
  %19 = mul i8 2, %18
  %20 = add i8 %17, %19
  %21 = srem i8 %20, 2
  %22 = icmp eq i8 %21, 0
  %23 = xor i1 %22, true
  %24 = and i1 %15, %23
  %25 = add i1 %24, %22
  %26 = select i1 %25, i32 984876138, i32 984876136
  %27 = xor i32 %26, 2
  store i32 %27, i32* %0, align 4
  %28 = call i8** @bf15416862713012807793(i32* %0)
  %29 = load i8*, i8** %28, align 8
  indirectbr i8* %29, [label %codeRepl, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %EntryBasicBlockSplit
  store i64 4070807658626890127, i64* %7, align 8
  %30 = call i8** @lk11019626905570507809(i64* %7)
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast i8* %31 to void (i1, i1, [15 x i32]*, i32*, i32*)*
  call void %32(i1 %.reload, i1 %.reload3, [15 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem22)
  %33 = load i8*, i8** %6, align 8
  %34 = load i8, i8* %33, align 1
  %35 = mul i8 %34, 2
  %36 = mul i8 %34, 2
  %37 = add i8 2, %36
  %38 = mul i8 %35, %37
  %39 = add i64 %5, 8466334664268045435
  %40 = sub i64 0, %5
  %41 = add i64 -8466334664268045435, %40
  %42 = sub i64 0, %41
  %43 = sext i32 %27 to i64
  %44 = and i64 %43, -272148229816527482
  %45 = xor i64 %43, -1
  %46 = or i64 272148229816527481, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = xor i64 %39, -8146473051909238697
  %50 = xor i64 %49, %44
  %51 = xor i64 %50, %42
  %52 = xor i64 %51, %48
  %53 = sext i8 %14 to i64
  %54 = and i64 %53, 1866111777729538810
  %55 = or i64 -1866111777729538811, %53
  %56 = sub i64 %55, -1866111777729538811
  %57 = sext i8 %19 to i64
  %58 = add i64 %57, 1314410672469637281
  %59 = add i64 361989908530864010, %57
  %60 = add i64 %59, 952420763938773271
  %61 = xor i64 %58, %56
  %62 = xor i64 %61, %60
  %63 = xor i64 %62, 8373046578081328540
  %64 = xor i64 %63, %54
  %65 = mul i64 %52, %64
  %66 = trunc i64 %65 to i8
  %67 = srem i8 %38, %66
  %68 = icmp eq i8 %67, 0
  %69 = mul i8 %34, %34
  %70 = sext i8 %20 to i64
  %71 = or i64 %70, -497089390436533162
  %72 = xor i64 %70, -1
  %73 = and i64 %72, -3503850445864925626
  %74 = and i64 %70, 3503850445864925625
  %75 = or i64 %73, %74
  %76 = xor i64 3910858681965263376, %75
  %77 = xor i64 %70, -1
  %78 = or i64 497089390436533161, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = or i64 %76, %80
  %82 = sext i8 %17 to i64
  %83 = and i64 %82, -2824517445209966477
  %84 = xor i64 %82, -1
  %85 = or i64 2824517445209966476, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = xor i64 %83, %71
  %89 = xor i64 %88, -4257087739568369669
  %90 = xor i64 %89, %87
  %91 = xor i64 %90, %81
  %92 = add i64 %3, -1318935117741614578
  %93 = add i64 214930880581353939, %3
  %94 = sub i64 %93, 1533865998322968517
  %95 = sext i8 %13 to i64
  %96 = or i64 %95, -646558985941496838
  %97 = and i64 -646558985941496838, %95
  %98 = xor i64 -646558985941496838, %95
  %99 = or i64 %97, %98
  %100 = sext i8 %21 to i64
  %101 = or i64 %100, -8590594670639438481
  %102 = xor i64 %100, -1
  %103 = and i64 %102, 5120996168322351167
  %104 = and i64 %100, -5120996168322351168
  %105 = or i64 %103, %104
  %106 = xor i64 -3469604274893118128, %105
  %107 = xor i64 %100, -1
  %108 = or i64 8590594670639438480, %107
  %109 = xor i64 %108, -1
  %110 = and i64 %109, -1
  %111 = or i64 %106, %110
  %112 = xor i64 %92, %94
  %113 = xor i64 %112, %96
  %114 = xor i64 %113, %99
  %115 = xor i64 %114, %111
  %116 = xor i64 %115, 0
  %117 = xor i64 %116, %101
  %118 = mul i64 %91, %117
  %119 = trunc i64 %118 to i8
  %120 = sub i8 %119, %34
  %121 = sub i8 %69, %120
  %122 = srem i8 %121, 2
  %123 = icmp eq i8 %122, 0
  %124 = or i1 %68, %123
  %125 = sext i8 %16 to i64
  %126 = or i64 %125, 489571162421408886
  %127 = and i64 489571162421408886, %125
  %128 = xor i64 489571162421408886, %125
  %129 = or i64 %127, %128
  %130 = and i64 %1, 6272696468741581026
  %131 = xor i64 %1, -1
  %132 = or i64 -6272696468741581027, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = xor i64 4166866851550689845, %130
  %136 = xor i64 %135, %134
  %137 = xor i64 %136, %126
  %138 = xor i64 %137, %129
  %139 = sext i8 %20 to i64
  %140 = and i64 %139, -5339916258274789995
  %141 = xor i64 %139, -1
  %142 = xor i64 -5339916258274789995, %141
  %143 = and i64 %142, -5339916258274789995
  %144 = sext i8 %17 to i64
  %145 = or i64 %144, 4090467742760846927
  %146 = xor i64 %144, -1
  %147 = and i64 %146, 1353958409038287010
  %148 = and i64 %144, -1353958409038287011
  %149 = or i64 %147, %148
  %150 = xor i64 3030495125870810861, %149
  %151 = xor i64 %144, -1
  %152 = or i64 -4090467742760846928, %151
  %153 = xor i64 %152, -1
  %154 = and i64 %153, -1
  %155 = or i64 %150, %154
  %156 = xor i64 %155, %145
  %157 = xor i64 %156, -8471342013353897982
  %158 = xor i64 %157, %140
  %159 = xor i64 %158, %143
  %160 = mul i64 %138, %159
  %161 = trunc i64 %160 to i32
  %162 = select i1 %124, i32 984876136, i32 %161
  %163 = xor i32 %162, 2
  store i32 %163, i32* %0, align 4
  %164 = call i8** @bf15416862713012807793(i32* %0)
  %165 = load i8*, i8** %164, align 8
  indirectbr i8* %165, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted(i1* %.reg2mem4, i1* %.reg2mem7, [15 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem20) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18070328068862507537, i32 0, i64 %1
  store i8* blockaddress(@clear.extracted, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18070328068862507537, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18070328068862507537, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13246253495866921194, i32 0, i64 %8
  store i8* bitcast (void (i32*, [15 x i32]*, i32*, i1, i1*)* @clear.extracted.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf1662976488351824164(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload6 = load i1, i1* %.reg2mem4, align 1
  %.reload9 = load i1, i1* %.reg2mem7, align 1
  %13 = select i1 %.reload6, i1 true, i1 %.reload9
  %14 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 10
  %15 = load i8*, i8** %4, align 8
  %16 = load i8, i8* %15, align 1
  %17 = mul i8 %16, 2
  %18 = mul i8 %16, 2
  %19 = and i64 %8, 935416308958635382
  %20 = xor i64 %8, -1
  %21 = xor i64 935416308958635382, %20
  %22 = and i64 %21, 935416308958635382
  %23 = and i64 %3, 1619104318361181928
  %24 = xor i64 %3, -1
  %25 = or i64 -1619104318361181929, %24
  %26 = xor i64 %25, -1
  %27 = and i64 %26, -1
  %28 = or i64 %5, -2878275385456706154
  %29 = xor i64 %5, -1
  %30 = and i64 %29, -3075350068128516036
  %31 = and i64 %5, 3075350068128516035
  %32 = or i64 %30, %31
  %33 = xor i64 962757263253292458, %32
  %34 = xor i64 %5, -1
  %35 = or i64 2878275385456706153, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %33, %37
  %39 = xor i64 %27, %23
  %40 = xor i64 %39, %38
  %41 = xor i64 %40, %19
  %42 = xor i64 %41, -4956473182570917079
  %43 = xor i64 %42, %22
  %44 = xor i64 %43, %28
  %45 = and i64 %1, 2119367030196278044
  %46 = or i64 -2119367030196278045, %1
  %47 = sub i64 %46, -2119367030196278045
  %48 = add i64 %8, -5416097595901928699
  %49 = add i64 -1142601295377926131, %8
  %50 = sub i64 %49, 4273496300524002568
  %51 = xor i64 %50, -1079592950165147086
  %52 = xor i64 %51, %45
  %53 = xor i64 %52, %48
  %54 = xor i64 %53, %47
  %55 = mul i64 %44, %54
  %56 = trunc i64 %55 to i8
  %57 = add i8 %56, %18
  %58 = mul i8 %17, %57
  %59 = srem i8 %58, 4
  %60 = icmp eq i8 %59, 0
  %61 = mul i8 %16, %16
  %62 = xor i8 %61, %16
  %63 = and i8 %61, %16
  %64 = mul i8 2, %63
  %65 = add i8 %62, %64
  %66 = and i64 %1, 688214086763790826
  %67 = xor i64 %1, -1
  %68 = xor i64 688214086763790826, %67
  %69 = and i64 %68, 688214086763790826
  %70 = or i64 %8, -2786775116733191978
  %71 = xor i64 %8, -1
  %72 = and i64 -2786775116733191978, %71
  %73 = add i64 %72, %8
  %74 = and i64 %5, 222300893250159929
  %75 = xor i64 %5, -1
  %76 = or i64 -222300893250159930, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = xor i64 %70, -1060861314638271253
  %80 = xor i64 %79, %69
  %81 = xor i64 %80, %73
  %82 = xor i64 %81, %74
  %83 = xor i64 %82, %78
  %84 = xor i64 %83, %66
  %85 = or i64 %5, 6024255589974551810
  %86 = xor i64 %5, -1
  %87 = and i64 %86, 7186243428567045159
  %88 = and i64 %5, -7186243428567045160
  %89 = or i64 %87, %88
  %90 = xor i64 3468016734007556389, %89
  %91 = xor i64 %5, -1
  %92 = or i64 -6024255589974551811, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = or i64 %90, %94
  %96 = add i64 %3, 5451438448846527043
  %97 = xor i64 5451438448846527043, %3
  %98 = and i64 5451438448846527043, %3
  %99 = mul i64 2, %98
  %100 = add i64 %97, %99
  %101 = xor i64 %95, 2912884203448253109
  %102 = xor i64 %101, %100
  %103 = xor i64 %102, %96
  %104 = xor i64 %103, %85
  %105 = mul i64 %84, %104
  %106 = trunc i64 %105 to i8
  %107 = mul i8 %106, %65
  %108 = add i8 23, %107
  %109 = mul i8 -105, %108
  %110 = add i8 111, %109
  %111 = srem i8 %110, 2
  %112 = icmp eq i8 %111, 0
  %113 = or i1 %60, %112
  %114 = select i1 %113, i32 984876138, i32 984876138
  %115 = xor i32 %114, 0
  store i32 %115, i32* %0, align 4
  %116 = call i8** @bf1662976488351824164(i32* %0)
  %117 = load i8*, i8** %116, align 8
  indirectbr i8* %117, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  %118 = add i64 %3, -2111147621477462761
  %119 = and i64 -2111147621477462761, %3
  %120 = or i64 -2111147621477462761, %3
  %121 = add i64 %119, %120
  %122 = sext i8 %16 to i64
  %123 = add i64 %122, -6452864893998114093
  %124 = add i64 2279512546261997630, %122
  %125 = add i64 %124, -8732377440260111723
  %126 = xor i64 %121, %118
  %127 = xor i64 %126, %123
  %128 = xor i64 %127, %125
  %129 = xor i64 %128, -2629703677892768081
  %130 = sext i8 %59 to i64
  %131 = or i64 %130, -4402292006655472898
  %132 = xor i64 %130, -1
  %133 = and i64 %132, -3898581352517951061
  %134 = and i64 %130, 3898581352517951060
  %135 = or i64 %133, %134
  %136 = xor i64 793370571524467541, %135
  %137 = xor i64 %130, -1
  %138 = or i64 4402292006655472897, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = or i64 %136, %140
  %142 = sext i32 %114 to i64
  %143 = add i64 %142, -641311146385136430
  %144 = add i64 4408323096359199918, %142
  %145 = add i64 %144, -5049634242744336348
  %146 = xor i64 %141, %143
  %147 = xor i64 %146, %145
  %148 = xor i64 %147, %131
  %149 = xor i64 %148, 8994066096711858977
  %150 = mul i64 %129, %149
  store i64 %150, i64* %7, align 8
  %151 = call i8** @lk6906225544584497095(i64* %7)
  %152 = load i8*, i8** %151, align 8
  %153 = bitcast i8* %152 to void (i32*, [15 x i32]*, i32*, i1, i1*)*
  call void %153(i32* %14, [15 x i32]* %lookupTable, i32* %dispatcher, i1 %13, i1* %.reg2mem20)
  %154 = load i8*, i8** %4, align 8
  %155 = load i8, i8* %154, align 1
  %156 = xor i8 %155, -1
  %157 = or i8 %156, 1
  %158 = xor i8 %155, -1
  %159 = sub i8 %157, %158
  %160 = icmp eq i8 %159, 0
  %161 = mul i8 %155, %155
  %162 = add i8 %161, %155
  %163 = mul i8 %162, 3
  %164 = srem i8 %163, 2
  %165 = sext i8 %57 to i64
  %166 = add i64 %165, -3816760606340250104
  %167 = sub i64 0, %165
  %168 = add i64 3816760606340250104, %167
  %169 = sub i64 0, %168
  %170 = sext i8 %18 to i64
  %171 = add i64 %170, 2132599029068354248
  %172 = sub i64 0, %170
  %173 = add i64 -2132599029068354248, %172
  %174 = sub i64 0, %173
  %175 = xor i64 %174, %169
  %176 = xor i64 %175, %166
  %177 = xor i64 %176, 6632956166563595371
  %178 = xor i64 %177, %171
  %179 = sext i8 %110 to i64
  %180 = and i64 %179, -3201432532968599353
  %181 = xor i64 %179, -1
  %182 = xor i64 -3201432532968599353, %181
  %183 = and i64 %182, -3201432532968599353
  %184 = sext i8 %58 to i64
  %185 = or i64 %184, -4837489958448693094
  %186 = xor i64 %184, -1
  %187 = and i64 -4837489958448693094, %186
  %188 = add i64 %187, %184
  %189 = sext i8 %59 to i64
  %190 = and i64 %189, -2195511096789249220
  %191 = xor i64 %189, -1
  %192 = xor i64 -2195511096789249220, %191
  %193 = and i64 %192, -2195511096789249220
  %194 = xor i64 %188, %185
  %195 = xor i64 %194, %190
  %196 = xor i64 %195, %193
  %197 = xor i64 %196, %183
  %198 = xor i64 %197, %180
  %199 = xor i64 %198, 0
  %200 = mul i64 %178, %199
  %201 = trunc i64 %200 to i8
  %202 = icmp eq i8 %164, %201
  %203 = or i1 %160, %202
  %204 = select i1 %203, i32 984876137, i32 984876139
  %205 = xor i32 %204, 2
  store i32 %205, i32* %0, align 4
  %206 = call i8** @bf1662976488351824164(i32* %0)
  %207 = load i8*, i8** %206, align 8
  indirectbr i8* %207, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.14([15 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem15, i1* %.reg2mem20) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable607629558949487478, i32 0, i64 %1
  store i8* blockaddress(@clear.extracted.14, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable607629558949487478, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.14, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable607629558949487478, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.14, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10519794407393913923, i32 0, i64 %8
  store i8* bitcast (void (i32*, i32, i32*, i1*, i1*)* @clear.extracted.14.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf16763515590375349614(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 7
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 6
  %16 = load i8*, i8** %2, align 8
  %17 = load i8, i8* %16, align 1
  %18 = mul i8 %17, 2
  %19 = mul i8 %17, 2
  %20 = sub i8 0, %19
  %21 = or i64 %5, -5600247486130780559
  %22 = and i64 -5600247486130780559, %5
  %23 = xor i64 -5600247486130780559, %5
  %24 = or i64 %22, %23
  %25 = and i64 %1, 4414533918259595898
  %26 = xor i64 %1, -1
  %27 = xor i64 4414533918259595898, %26
  %28 = and i64 %27, 4414533918259595898
  %29 = xor i64 %21, %28
  %30 = xor i64 %29, -6801125109353322159
  %31 = xor i64 %30, %24
  %32 = xor i64 %31, %25
  %33 = and i64 %3, 3953902123913383178
  %34 = xor i64 %3, -1
  %35 = or i64 -3953902123913383179, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %1, -7889454270611198245
  %39 = and i64 -7889454270611198245, %1
  %40 = xor i64 -7889454270611198245, %1
  %41 = or i64 %39, %40
  %42 = xor i64 %33, %41
  %43 = xor i64 %42, 1863280301018382178
  %44 = xor i64 %43, %38
  %45 = xor i64 %44, %37
  %46 = mul i64 %32, %45
  %47 = trunc i64 %46 to i8
  %48 = sub i8 %47, %20
  %49 = mul i8 %18, %48
  %50 = srem i8 %49, 4
  %51 = icmp eq i8 %50, 0
  %52 = mul i8 %17, %17
  %53 = mul i8 %52, %17
  %54 = add i8 %53, %17
  %55 = srem i8 %54, 2
  %56 = icmp eq i8 %55, 0
  %57 = and i1 %51, %56
  %58 = select i1 %57, i32 984876139, i32 984876139
  %59 = xor i32 %58, 1392312997
  %60 = or i64 %8, -5388207978133111961
  %61 = xor i64 %8, -1
  %62 = and i64 -5388207978133111961, %61
  %63 = add i64 %62, %8
  %64 = and i64 %3, 2301947144732643479
  %65 = or i64 -2301947144732643480, %3
  %66 = sub i64 %65, -2301947144732643480
  %67 = and i64 %3, 7660281051956833898
  %68 = or i64 -7660281051956833899, %3
  %69 = sub i64 %68, -7660281051956833899
  %70 = xor i64 %60, %67
  %71 = xor i64 %70, %64
  %72 = xor i64 %71, %69
  %73 = xor i64 %72, %66
  %74 = xor i64 %73, %63
  %75 = xor i64 %74, 6021371192998275881
  %76 = or i64 %3, 5923605690560165655
  %77 = xor i64 %3, -1
  %78 = and i64 5923605690560165655, %77
  %79 = add i64 %78, %3
  %80 = add i64 %3, 2920755485526200206
  %81 = sub i64 0, %3
  %82 = add i64 -2920755485526200206, %81
  %83 = sub i64 0, %82
  %84 = xor i64 %79, -1100338299311388899
  %85 = xor i64 %84, %83
  %86 = xor i64 %85, %76
  %87 = xor i64 %86, %80
  %88 = mul i64 %75, %87
  %89 = trunc i64 %88 to i32
  %90 = xor i32 %59, %89
  store i32 %90, i32* %0, align 4
  %91 = call i8** @bf16763515590375349614(i32* %0)
  %92 = load i8*, i8** %91, align 8
  indirectbr i8* %92, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %93 = call i8** @lk15254634105568956878(i64* %7)
  %94 = load i8*, i8** %93, align 8
  %95 = bitcast i8* %94 to void (i32*, i32, i32*, i1*, i1*)*
  call void %95(i32* %15, i32 %14, i32* %dispatcher, i1* %.reg2mem15, i1* %.reg2mem20)
  %96 = load i8*, i8** %4, align 8
  %97 = load i8, i8* %96, align 1
  %98 = mul i8 %97, 2
  %99 = mul i8 %97, 2
  %100 = sext i32 %14 to i64
  %101 = add i64 %100, -4775585316296443029
  %102 = xor i64 -4775585316296443029, %100
  %103 = and i64 -4775585316296443029, %100
  %104 = mul i64 2, %103
  %105 = add i64 %102, %104
  %106 = and i64 %8, 7671866889115481226
  %107 = xor i64 %8, -1
  %108 = xor i64 7671866889115481226, %107
  %109 = and i64 %108, 7671866889115481226
  %110 = sext i32 %58 to i64
  %111 = add i64 %110, -5570867318215864399
  %112 = add i64 3753071873180661017, %110
  %113 = sub i64 %112, -9122804882313026200
  %114 = xor i64 %101, %111
  %115 = xor i64 %114, %113
  %116 = xor i64 %115, %105
  %117 = xor i64 %116, %106
  %118 = xor i64 %117, %109
  %119 = xor i64 %118, 5643933363288878547
  %120 = sext i32 %90 to i64
  %121 = and i64 %120, 8677762721773255122
  %122 = xor i64 %120, -1
  %123 = xor i64 8677762721773255122, %122
  %124 = and i64 %123, 8677762721773255122
  %125 = sext i32 %59 to i64
  %126 = and i64 %125, -5418836774258102881
  %127 = or i64 5418836774258102880, %125
  %128 = sub i64 %127, 5418836774258102880
  %129 = sext i8 %49 to i64
  %130 = add i64 %129, -86078527402882893
  %131 = sub i64 0, %129
  %132 = add i64 86078527402882893, %131
  %133 = sub i64 0, %132
  %134 = xor i64 %121, %126
  %135 = xor i64 %134, %133
  %136 = xor i64 %135, -8309567302562126666
  %137 = xor i64 %136, %124
  %138 = xor i64 %137, %130
  %139 = xor i64 %138, %128
  %140 = mul i64 %119, %139
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, %99
  %143 = or i8 2, %99
  %144 = add i8 %142, %143
  %145 = mul i8 %98, %144
  %146 = srem i8 %145, 4
  %147 = icmp eq i8 %146, 0
  %148 = mul i8 %97, %97
  %149 = mul i8 %148, %97
  %150 = add i8 %149, %97
  %151 = srem i8 %150, 2
  %152 = icmp eq i8 %151, 0
  %153 = xor i1 %147, true
  %154 = xor i1 %152, true
  %155 = or i1 %153, %154
  %156 = xor i1 %155, true
  %157 = and i1 %156, true
  %158 = select i1 %157, i32 984876139, i32 984876138
  %159 = sext i8 %55 to i64
  %160 = and i64 %159, -8748128874913795972
  %161 = xor i64 %159, -1
  %162 = or i64 8748128874913795971, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = sext i8 %18 to i64
  %166 = or i64 %165, -8150595388806990922
  %167 = xor i64 %165, -1
  %168 = and i64 %167, -3306764549381960226
  %169 = and i64 %165, 3306764549381960225
  %170 = or i64 %168, %169
  %171 = xor i64 6701153406972804712, %170
  %172 = xor i64 %165, -1
  %173 = or i64 8150595388806990921, %172
  %174 = xor i64 %173, -1
  %175 = and i64 %174, -1
  %176 = or i64 %171, %175
  %177 = xor i64 %166, %160
  %178 = xor i64 %177, %176
  %179 = xor i64 %178, %164
  %180 = xor i64 %179, -8423026032264731617
  %181 = sext i8 %20 to i64
  %182 = and i64 %181, 2179500611169627766
  %183 = xor i64 %181, -1
  %184 = xor i64 2179500611169627766, %183
  %185 = and i64 %184, 2179500611169627766
  %186 = sext i8 %19 to i64
  %187 = add i64 %186, -2591782936165957984
  %188 = sub i64 0, %186
  %189 = sub i64 -2591782936165957984, %188
  %190 = sext i8 %17 to i64
  %191 = and i64 %190, 2289839158585745366
  %192 = xor i64 %190, -1
  %193 = xor i64 2289839158585745366, %192
  %194 = and i64 %193, 2289839158585745366
  %195 = xor i64 %182, %189
  %196 = xor i64 %195, %194
  %197 = xor i64 %196, 3015938819433715679
  %198 = xor i64 %197, %185
  %199 = xor i64 %198, %191
  %200 = xor i64 %199, %187
  %201 = mul i64 %180, %200
  %202 = trunc i64 %201 to i32
  %203 = xor i32 %158, %202
  store i32 %203, i32* %0, align 4
  %204 = call i8** @bf16763515590375349614(i32* %0)
  %205 = load i8*, i8** %204, align 8
  indirectbr i8* %205, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.15(i1* %.reg2mem20, [15 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem22) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10639372946606728569, i32 0, i64 %1
  store i8* blockaddress(@clear.extracted.15, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10639372946606728569, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.15, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10639372946606728569, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.15, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable18139037964304201484, i32 0, i64 %8
  store i8* bitcast (void ()* @clear.extracted.15.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf10111600441450393745(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload21 = load i1, i1* %.reg2mem20, align 1
  %13 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 8
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 0, %16
  %18 = sub i32 %14, %17
  %19 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 11
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  %22 = load i32, i32* %21, align 4
  %23 = srem i32 %20, %22
  %24 = select i1 %.reload21, i32 %18, i32 %23
  store i32 %24, i32* %dispatcher, align 4
  %25 = or i64 %1, -1770920460232610437
  %26 = and i64 -1770920460232610437, %1
  %27 = xor i64 -1770920460232610437, %1
  %28 = or i64 %26, %27
  %29 = add i64 %8, 8203877301372398499
  %30 = add i64 8752362592142884225, %8
  %31 = add i64 %30, -548485290770485726
  %32 = add i64 %1, 3329451906238617095
  %33 = sub i64 0, %1
  %34 = add i64 -3329451906238617095, %33
  %35 = sub i64 0, %34
  %36 = xor i64 %25, %32
  %37 = xor i64 %36, %28
  %38 = xor i64 %37, %35
  %39 = xor i64 %38, %31
  %40 = xor i64 %39, %29
  %41 = xor i64 %40, 8802423386681877261
  %42 = add i64 %1, 4816294124081257096
  %43 = sub i64 0, %1
  %44 = add i64 -4816294124081257096, %43
  %45 = sub i64 0, %44
  %46 = and i64 %3, -3273691107869862198
  %47 = xor i64 %3, -1
  %48 = xor i64 -3273691107869862198, %47
  %49 = and i64 %48, -3273691107869862198
  %50 = xor i64 %46, %42
  %51 = xor i64 %50, -337563959429707894
  %52 = xor i64 %51, %49
  %53 = xor i64 %52, %45
  %54 = mul i64 %41, %53
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %.reg2mem22, align 4
  %56 = load i8*, i8** %2, align 8
  %57 = load i8, i8* %56, align 1
  %58 = and i8 %57, 1
  %59 = icmp eq i8 %58, 0
  %60 = mul i8 %57, %57
  %61 = add i8 %60, %57
  %62 = mul i8 %61, 3
  %63 = srem i8 %62, 2
  %64 = icmp eq i8 %63, 0
  %65 = add i64 %8, 7155736021975816848
  %66 = and i64 7155736021975816848, %8
  %67 = or i64 7155736021975816848, %8
  %68 = add i64 %66, %67
  %69 = or i64 %3, -6245220502791218792
  %70 = xor i64 %3, -1
  %71 = and i64 %70, 3566371939733031560
  %72 = and i64 %3, -3566371939733031561
  %73 = or i64 %71, %72
  %74 = xor i64 -7481946379463306480, %73
  %75 = xor i64 %3, -1
  %76 = or i64 6245220502791218791, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = or i64 %74, %78
  %80 = add i64 %3, -2920107088304526964
  %81 = xor i64 -2920107088304526964, %3
  %82 = and i64 -2920107088304526964, %3
  %83 = mul i64 2, %82
  %84 = add i64 %81, %83
  %85 = xor i64 %65, %69
  %86 = xor i64 %85, %80
  %87 = xor i64 %86, %79
  %88 = xor i64 %87, %68
  %89 = xor i64 %88, 1092816162672142431
  %90 = xor i64 %89, %84
  %91 = add i64 %3, -2534844763612525537
  %92 = add i64 4873824637714254200, %3
  %93 = sub i64 %92, 7408669401326779737
  %94 = add i64 %3, 7617383614335784861
  %95 = xor i64 7617383614335784861, %3
  %96 = and i64 7617383614335784861, %3
  %97 = mul i64 2, %96
  %98 = add i64 %95, %97
  %99 = xor i64 6052109335078859679, %91
  %100 = xor i64 %99, %93
  %101 = xor i64 %100, %98
  %102 = xor i64 %101, %94
  %103 = mul i64 %90, %102
  %104 = trunc i64 %103 to i1
  %105 = xor i1 %59, %104
  %106 = and i64 %1, -7355856064945549501
  %107 = xor i64 %1, -1
  %108 = or i64 7355856064945549500, %107
  %109 = xor i64 %108, -1
  %110 = and i64 %109, -1
  %111 = and i64 %5, -8383842922402409557
  %112 = xor i64 %5, -1
  %113 = xor i64 -8383842922402409557, %112
  %114 = and i64 %113, -8383842922402409557
  %115 = or i64 %8, 8673287518691795042
  %116 = xor i64 %8, -1
  %117 = and i64 %116, -7972804491575817556
  %118 = and i64 %8, 7972804491575817555
  %119 = or i64 %117, %118
  %120 = xor i64 -1655251508238210354, %119
  %121 = xor i64 %8, -1
  %122 = or i64 -8673287518691795043, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = or i64 %120, %124
  %126 = xor i64 %114, -4076140975233871771
  %127 = xor i64 %126, %125
  %128 = xor i64 %127, %110
  %129 = xor i64 %128, %115
  %130 = xor i64 %129, %111
  %131 = xor i64 %130, %106
  %132 = add i64 %1, -6926266721051550242
  %133 = sub i64 0, %1
  %134 = add i64 6926266721051550242, %133
  %135 = sub i64 0, %134
  %136 = add i64 %8, 1343408948446615867
  %137 = add i64 -8093393012098947497, %8
  %138 = sub i64 %137, 9009942113163988252
  %139 = xor i64 0, %136
  %140 = xor i64 %139, %135
  %141 = xor i64 %140, %138
  %142 = xor i64 %141, %132
  %143 = mul i64 %131, %142
  %144 = trunc i64 %143 to i1
  %145 = and i1 %105, %144
  %146 = and i1 %59, true
  %147 = or i1 %145, %146
  %148 = xor i1 %64, true
  %149 = and i1 %148, false
  %150 = and i1 %64, true
  %151 = or i1 %149, %150
  %152 = xor i1 %147, %151
  %153 = xor i1 %59, true
  %154 = xor i1 %64, true
  %155 = or i1 %153, %154
  %156 = xor i1 %155, true
  %157 = and i1 %156, true
  %158 = or i1 %152, %157
  %159 = select i1 %158, i32 984876136, i32 984876138
  %160 = xor i32 %159, 2
  store i32 %160, i32* %0, align 4
  %161 = call i8** @bf10111600441450393745(i32* %0)
  %162 = load i8*, i8** %161, align 8
  indirectbr i8* %162, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %163 = call i8** @lk14415857824142216237(i64* %7)
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast i8* %164 to void ()*
  call void %165()
  %166 = load i8*, i8** %6, align 8
  %167 = load i8, i8* %166, align 1
  %168 = add i64 %8, 1169094703586424087
  %169 = add i64 -4652482457734501171, %8
  %170 = add i64 %169, 5821577161320925258
  %171 = sext i32 %16 to i64
  %172 = or i64 %171, -1476451555108925787
  %173 = xor i64 %171, -1
  %174 = and i64 -1476451555108925787, %173
  %175 = add i64 %174, %171
  %176 = xor i64 %172, %175
  %177 = xor i64 %176, %168
  %178 = xor i64 %177, -5648283382084815349
  %179 = xor i64 %178, %170
  %180 = sext i8 %60 to i64
  %181 = add i64 %180, -8720527963060296271
  %182 = xor i64 -8720527963060296271, %180
  %183 = and i64 -8720527963060296271, %180
  %184 = mul i64 2, %183
  %185 = add i64 %182, %184
  %186 = add i64 %5, -3491264388151193897
  %187 = add i64 7729137292295645602, %5
  %188 = sub i64 %187, -7226342393262712117
  %189 = xor i64 5392317245042369955, %186
  %190 = xor i64 %189, %185
  %191 = xor i64 %190, %188
  %192 = xor i64 %191, %181
  %193 = mul i64 %179, %192
  %194 = trunc i64 %193 to i8
  %195 = and i8 %167, %194
  %196 = sext i32 %24 to i64
  %197 = or i64 %196, 1548566525134050838
  %198 = xor i64 %196, -1
  %199 = and i64 %198, 1726476436280547869
  %200 = and i64 %196, -1726476436280547870
  %201 = or i64 %199, %200
  %202 = xor i64 182448729510939659, %201
  %203 = xor i64 %196, -1
  %204 = or i64 -1548566525134050839, %203
  %205 = xor i64 %204, -1
  %206 = and i64 %205, -1
  %207 = or i64 %202, %206
  %208 = sext i8 %61 to i64
  %209 = or i64 %208, 1339024673500305791
  %210 = and i64 1339024673500305791, %208
  %211 = xor i64 1339024673500305791, %208
  %212 = or i64 %210, %211
  %213 = and i64 %3, -6366765856751359783
  %214 = or i64 6366765856751359782, %3
  %215 = sub i64 %214, 6366765856751359782
  %216 = xor i64 %207, %209
  %217 = xor i64 %216, %212
  %218 = xor i64 %217, %215
  %219 = xor i64 %218, %213
  %220 = xor i64 %219, -5930696588921502827
  %221 = xor i64 %220, %197
  %222 = sext i32 %17 to i64
  %223 = or i64 %222, 641668257906092106
  %224 = xor i64 %222, -1
  %225 = and i64 641668257906092106, %224
  %226 = add i64 %225, %222
  %227 = sext i32 %16 to i64
  %228 = and i64 %227, -9010488299421206312
  %229 = or i64 9010488299421206311, %227
  %230 = sub i64 %229, 9010488299421206311
  %231 = sext i32 %20 to i64
  %232 = and i64 %231, 1000594597117559915
  %233 = or i64 -1000594597117559916, %231
  %234 = sub i64 %233, -1000594597117559916
  %235 = xor i64 %226, -2108905554979672131
  %236 = xor i64 %235, %223
  %237 = xor i64 %236, %234
  %238 = xor i64 %237, %228
  %239 = xor i64 %238, %230
  %240 = xor i64 %239, %232
  %241 = mul i64 %221, %240
  %242 = trunc i64 %241 to i8
  %243 = icmp eq i8 %195, %242
  %244 = mul i8 %167, %167
  %245 = add i8 %244, %167
  %246 = srem i8 %245, 2
  %247 = icmp eq i8 %246, 0
  %248 = or i1 %243, %247
  %249 = select i1 %248, i32 984876138, i32 984876136
  %250 = xor i32 %249, 2
  store i32 %250, i32* %0, align 4
  %251 = call i8** @bf10111600441450393745(i32* %0)
  %252 = load i8*, i8** %251, align 8
  indirectbr i8* %252, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.BogusBasicBlock([15 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17442865676092226486, i32 0, i64 %1
  store i8* blockaddress(@clear.BogusBasicBlock, %codeRepl.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17442865676092226486, i32 0, i64 %3
  store i8* blockaddress(@clear.BogusBasicBlock, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17442865676092226486, i32 0, i64 %5
  store i8* blockaddress(@clear.BogusBasicBlock, %BogusBasicBlock), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7927533323930379990, i32 0, i64 %8
  store i8* bitcast (void (i32*, [15 x i32]*, i32*)* @clear.BogusBasicBlock.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf12854391879425916569(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %BogusBasicBlock]

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %newFuncRoot
  %12 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %12, align 4
  %13 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 2
  %14 = load i8*, i8** %6, align 8
  %15 = load i8, i8* %14, align 1
  %16 = and i8 %15, 1
  %17 = icmp eq i8 %16, 1
  %18 = mul i8 %15, %15
  %19 = add i8 %18, -99
  %20 = add i8 %19, %15
  %21 = sub i8 %20, -99
  %22 = srem i8 %21, 2
  %23 = icmp eq i8 %22, 0
  %24 = and i1 %17, %23
  %25 = xor i1 %17, %23
  %26 = or i1 %24, %25
  %27 = select i1 %26, i32 984876136, i32 984876139
  %28 = and i64 %1, -3887726156779029153
  %29 = xor i64 %1, -1
  %30 = or i64 3887726156779029152, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = and i64 %1, -386399353262464284
  %34 = xor i64 %1, -1
  %35 = or i64 386399353262464283, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = xor i64 %32, 2110283034749028543
  %39 = xor i64 %38, %28
  %40 = xor i64 %39, %33
  %41 = xor i64 %40, %37
  %42 = and i64 %5, 7417523929341145474
  %43 = xor i64 %5, -1
  %44 = or i64 -7417523929341145475, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = and i64 %1, -2689627786513451372
  %48 = or i64 2689627786513451371, %1
  %49 = sub i64 %48, 2689627786513451371
  %50 = and i64 %5, 3377451567723675014
  %51 = or i64 -3377451567723675015, %5
  %52 = sub i64 %51, -3377451567723675015
  %53 = xor i64 %52, %49
  %54 = xor i64 %53, 2624648813898913985
  %55 = xor i64 %54, %47
  %56 = xor i64 %55, %50
  %57 = xor i64 %56, %46
  %58 = xor i64 %57, %42
  %59 = mul i64 %41, %58
  %60 = trunc i64 %59 to i32
  %61 = xor i32 %27, %60
  %62 = and i32 %61, 3
  %63 = and i32 %27, -4
  %64 = or i32 %62, %63
  store i32 %64, i32* %0, align 4
  %65 = call i8** @bf12854391879425916569(i32* %0)
  %66 = load i8*, i8** %65, align 8
  indirectbr i8* %66, [label %codeRepl, label %BogusBasicBlock]

codeRepl:                                         ; preds = %codeRepl, %BogusBasicBlock
  store i64 4070807658626890127, i64* %7, align 8
  %67 = call i8** @lk17728768479695395648(i64* %7)
  %68 = load i8*, i8** %67, align 8
  %69 = bitcast i8* %68 to void (i32*, [15 x i32]*, i32*)*
  call void %69(i32* %13, [15 x i32]* %lookupTable, i32* %dispatcher)
  %70 = load i8*, i8** %6, align 8
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %22 to i64
  %73 = or i64 %72, -7354268899515489630
  %74 = and i64 -7354268899515489630, %72
  %75 = xor i64 -7354268899515489630, %72
  %76 = or i64 %74, %75
  %77 = sext i8 %21 to i64
  %78 = or i64 %77, 9221576832538234703
  %79 = and i64 9221576832538234703, %77
  %80 = xor i64 9221576832538234703, %77
  %81 = or i64 %79, %80
  %82 = sext i32 %63 to i64
  %83 = or i64 %82, -5015290661638845476
  %84 = and i64 -5015290661638845476, %82
  %85 = xor i64 -5015290661638845476, %82
  %86 = or i64 %84, %85
  %87 = xor i64 %81, -5684162881357484091
  %88 = xor i64 %87, %78
  %89 = xor i64 %88, %73
  %90 = xor i64 %89, %83
  %91 = xor i64 %90, %86
  %92 = xor i64 %91, %76
  %93 = sext i32 %64 to i64
  %94 = or i64 %93, -6398034932372540799
  %95 = xor i64 %93, -1
  %96 = and i64 -6398034932372540799, %95
  %97 = add i64 %96, %93
  %98 = sext i32 %62 to i64
  %99 = add i64 %98, -8825901022422575214
  %100 = and i64 -8825901022422575214, %98
  %101 = or i64 -8825901022422575214, %98
  %102 = add i64 %100, %101
  %103 = sext i32 %64 to i64
  %104 = add i64 %103, -3450030551883758172
  %105 = sub i64 0, %103
  %106 = sub i64 -3450030551883758172, %105
  %107 = xor i64 %104, %102
  %108 = xor i64 %107, %99
  %109 = xor i64 %108, %106
  %110 = xor i64 %109, %94
  %111 = xor i64 %110, %97
  %112 = xor i64 %111, 3077190823908699674
  %113 = mul i64 %92, %112
  %114 = trunc i64 %113 to i8
  %115 = mul i8 %71, %114
  %116 = mul i8 %71, 2
  %117 = add i8 2, %116
  %118 = mul i8 %115, %117
  %119 = sext i32 %61 to i64
  %120 = or i64 %119, -3695164674208656439
  %121 = xor i64 %119, -1
  %122 = and i64 -3695164674208656439, %121
  %123 = add i64 %122, %119
  %124 = sext i32 %61 to i64
  %125 = or i64 %124, -8452542333557511522
  %126 = xor i64 %124, -1
  %127 = and i64 -8452542333557511522, %126
  %128 = add i64 %127, %124
  %129 = xor i64 %125, -4645816939315049901
  %130 = xor i64 %129, %120
  %131 = xor i64 %130, %128
  %132 = xor i64 %131, %123
  %133 = sext i8 %22 to i64
  %134 = or i64 %133, -7933435139247046758
  %135 = and i64 -7933435139247046758, %133
  %136 = xor i64 -7933435139247046758, %133
  %137 = or i64 %135, %136
  %138 = sext i8 %22 to i64
  %139 = or i64 %138, -5694839954657320373
  %140 = xor i64 %138, -1
  %141 = and i64 %140, -9167217504336304453
  %142 = and i64 %138, 9167217504336304452
  %143 = or i64 %141, %142
  %144 = xor i64 3472377585180624112, %143
  %145 = xor i64 %138, -1
  %146 = or i64 5694839954657320372, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = or i64 %144, %148
  %150 = xor i64 4541777874766669676, %137
  %151 = xor i64 %150, %139
  %152 = xor i64 %151, %149
  %153 = xor i64 %152, %134
  %154 = mul i64 %132, %153
  %155 = trunc i64 %154 to i8
  %156 = srem i8 %118, %155
  %157 = icmp eq i8 %156, 0
  %158 = mul i8 %71, %71
  %159 = add i8 %158, %71
  %160 = srem i8 %159, 2
  %161 = icmp eq i8 %160, 0
  %162 = and i1 %157, %161
  %163 = select i1 %162, i32 984876137, i32 984876136
  %164 = xor i32 %163, -1
  %165 = sext i8 %18 to i64
  %166 = or i64 %165, 466939344035906770
  %167 = xor i64 %165, -1
  %168 = and i64 466939344035906770, %167
  %169 = add i64 %168, %165
  %170 = sext i8 %20 to i64
  %171 = and i64 %170, 3278826785883948099
  %172 = xor i64 %170, -1
  %173 = xor i64 3278826785883948099, %172
  %174 = and i64 %173, 3278826785883948099
  %175 = and i64 %1, -6520207558768012065
  %176 = xor i64 %1, -1
  %177 = xor i64 -6520207558768012065, %176
  %178 = and i64 %177, -6520207558768012065
  %179 = xor i64 %166, %169
  %180 = xor i64 %179, %175
  %181 = xor i64 %180, %178
  %182 = xor i64 %181, %171
  %183 = xor i64 %182, %174
  %184 = xor i64 %183, 6499667318548989321
  %185 = sext i32 %64 to i64
  %186 = or i64 %185, 2755101281903592662
  %187 = xor i64 %185, -1
  %188 = and i64 %187, -4114653227270514542
  %189 = and i64 %185, 4114653227270514541
  %190 = or i64 %188, %189
  %191 = xor i64 -2244544461214966716, %190
  %192 = xor i64 %185, -1
  %193 = or i64 -2755101281903592663, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = or i64 %191, %195
  %197 = and i64 %5, -1675205895986462014
  %198 = xor i64 %5, -1
  %199 = or i64 1675205895986462013, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = xor i64 %201, %196
  %203 = xor i64 %202, %186
  %204 = xor i64 %203, %197
  %205 = xor i64 %204, 3872243732003076088
  %206 = mul i64 %184, %205
  %207 = trunc i64 %206 to i32
  %208 = and i32 %164, %207
  %209 = and i32 %163, -844123065
  %210 = or i32 %208, %209
  %211 = xor i32 %210, 844123065
  store i32 %211, i32* %0, align 4
  %212 = call i8** @bf12854391879425916569(i32* %0)
  %213 = load i8*, i8** %212, align 8
  indirectbr i8* %213, [label %codeRepl.exitStub, label %codeRepl]

codeRepl.exitStub:                                ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.EntryBasicBlockSplit.extracted(i1 %.reload, i1 %.reload3, [15 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem22) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@clear.EntryBasicBlockSplit.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876122)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@clear.EntryBasicBlockSplit.extracted, %7), i8** %4, align 8
  store i32 984876122, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = select i1 %.reload, i1 true, i1 %.reload3
  %9 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 9
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 0, %12
  %14 = add i32 %10, %13
  %15 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  %18 = load i32, i32* %17, align 4
  %19 = srem i32 %16, %18
  %20 = select i1 %8, i32 %14, i32 %19
  store i32 %20, i32* %dispatcher, align 4
  store i32 2, i32* %.reg2mem22, align 4
  %21 = load i8*, i8** %2, align 8
  %22 = load i8, i8* %21, align 1
  %23 = mul i8 %22, 2
  %24 = mul i8 %22, 2
  %25 = add i8 2, %24
  %26 = mul i8 %23, %25
  %27 = srem i8 %26, 4
  %28 = icmp eq i8 %27, 0
  %29 = mul i8 %22, %22
  %30 = add i8 %29, %22
  %31 = srem i8 %30, 2
  %32 = icmp eq i8 %31, 0
  %33 = xor i1 %32, true
  %34 = xor i1 %28, %33
  %35 = and i1 %34, %28
  %36 = select i1 %35, i32 984876136, i32 984876136
  %37 = xor i32 %36, 0
  store i32 %37, i32* %0, align 4
  %38 = call i8** @bf6338069988336422972(i32* %0)
  %39 = load i8*, i8** %38, align 8
  indirectbr i8* %39, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.extracted(i32* %0, [15 x i32]* %lookupTable, i32* %dispatcher, i1 %1, i1* %.reg2mem20) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876155)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876149)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.extracted, %9), i8** %6, align 8
  store i32 984876149, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = load i32, i32* %0, align 4
  %11 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  %12 = load i32, i32* %11, align 4
  %13 = srem i32 %10, %12
  store i32 %13, i32* %dispatcher, align 4
  store i1 %1, i1* %.reg2mem20, align 1
  %14 = load i8*, i8** %6, align 8
  %15 = load i8, i8* %14, align 1
  %16 = and i8 %15, 1
  %17 = icmp eq i8 %16, 0
  %18 = mul i8 %15, %15
  %19 = add i8 %18, %15
  %20 = mul i8 %19, 3
  %21 = srem i8 %20, 2
  %22 = icmp eq i8 %21, 0
  %23 = or i1 %17, %22
  %24 = select i1 %23, i32 984876149, i32 984876155
  %25 = xor i32 %24, 439253761
  %26 = xor i32 %25, 439253775
  store i32 %26, i32* %2, align 4
  %27 = call i8** @bf6338069988336422972(i32* %2)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.14.extracted(i32* %0, i32 %1, i32* %dispatcher, i1* %.reg2mem15, i1* %.reg2mem20) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876133)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.14.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876126)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.14.extracted, %9), i8** %6, align 8
  store i32 984876126, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = load i32, i32* %0, align 4
  %11 = add i32 %1, %10
  store i32 %11, i32* %dispatcher, align 4
  %.reload16 = load i1, i1* %.reg2mem15, align 1
  store i1 %.reload16, i1* %.reg2mem20, align 1
  %12 = load i8*, i8** %4, align 8
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 1
  %15 = icmp eq i8 %14, 0
  %16 = mul i8 %13, %13
  %17 = or i64 %5, 6387383724770584584
  %18 = xor i64 %5, -1
  %19 = and i64 %18, 7208160707811295259
  %20 = and i64 %5, -7208160707811295260
  %21 = or i64 %19, %20
  %22 = xor i64 4371882939593173011, %21
  %23 = xor i64 %5, -1
  %24 = or i64 -6387383724770584585, %23
  %25 = xor i64 %24, -1
  %26 = and i64 %25, -1
  %27 = or i64 %22, %26
  %28 = or i64 %5, 2118139428655403261
  %29 = xor i64 %5, -1
  %30 = and i64 %29, 1499988516674688259
  %31 = and i64 %5, -1499988516674688260
  %32 = or i64 %30, %31
  %33 = xor i64 699222382137460222, %32
  %34 = xor i64 %5, -1
  %35 = or i64 -2118139428655403262, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %33, %37
  %39 = sext i32 %1 to i64
  %40 = add i64 %39, -2146764452859234894
  %41 = add i64 -6495198775744188760, %39
  %42 = add i64 %41, 4348434322884953866
  %43 = xor i64 %42, %17
  %44 = xor i64 %43, %27
  %45 = xor i64 %44, %28
  %46 = xor i64 %45, %40
  %47 = xor i64 %46, -6185837361104378133
  %48 = xor i64 %47, %38
  %49 = and i64 %5, 2135571427746224543
  %50 = xor i64 %5, -1
  %51 = or i64 -2135571427746224544, %50
  %52 = xor i64 %51, -1
  %53 = and i64 %52, -1
  %54 = add i64 %5, 8578052905051343704
  %55 = add i64 4653247458185586782, %5
  %56 = add i64 %55, 3924805446865756922
  %57 = xor i64 0, %56
  %58 = xor i64 %57, %54
  %59 = xor i64 %58, %49
  %60 = xor i64 %59, %53
  %61 = mul i64 %48, %60
  %62 = trunc i64 %61 to i8
  %63 = sub i8 %62, %16
  %64 = sub i8 0, %13
  %65 = add i8 %63, %64
  %66 = sub i8 0, %65
  %67 = mul i8 %66, 3
  %68 = srem i8 %67, 2
  %69 = icmp eq i8 %68, 0
  %70 = or i1 %15, %69
  %71 = select i1 %70, i32 984876133, i32 984876133
  %72 = and i64 %5, -7120311905164180786
  %73 = xor i64 %5, -1
  %74 = xor i64 -7120311905164180786, %73
  %75 = and i64 %74, -7120311905164180786
  %76 = add i64 %5, -945912986186538539
  %77 = xor i64 -945912986186538539, %5
  %78 = and i64 -945912986186538539, %5
  %79 = mul i64 2, %78
  %80 = add i64 %77, %79
  %81 = xor i64 %76, %80
  %82 = xor i64 %81, %75
  %83 = xor i64 %82, -6987574939953992259
  %84 = xor i64 %83, %72
  %85 = or i64 %5, -1034383192149553602
  %86 = xor i64 %5, -1
  %87 = and i64 -1034383192149553602, %86
  %88 = add i64 %87, %5
  %89 = sext i32 %1 to i64
  %90 = and i64 %89, -7686068258029043359
  %91 = xor i64 %89, -1
  %92 = xor i64 -7686068258029043359, %91
  %93 = and i64 %92, -7686068258029043359
  %94 = sext i32 %1 to i64
  %95 = add i64 %94, 7112226629884619474
  %96 = and i64 7112226629884619474, %94
  %97 = or i64 7112226629884619474, %94
  %98 = add i64 %96, %97
  %99 = xor i64 %98, %90
  %100 = xor i64 %99, %93
  %101 = xor i64 %100, %95
  %102 = xor i64 %101, %88
  %103 = xor i64 %102, 0
  %104 = xor i64 %103, %85
  %105 = mul i64 %84, %104
  %106 = trunc i64 %105 to i32
  %107 = xor i32 %71, %106
  store i32 %107, i32* %2, align 4
  %108 = call i8** @bf6338069988336422972(i32* %2)
  %109 = load i8*, i8** %108, align 8
  indirectbr i8* %109, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.15.extracted() #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876106)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@clear.extracted.15.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876129)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.15.extracted, %7), i8** %4, align 8
  store i32 984876129, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = load i8*, i8** %2, align 8
  %9 = load i8, i8* %8, align 1
  %10 = mul i8 %9, 2
  %11 = mul i8 %9, 2
  %12 = xor i8 2, %11
  %13 = and i8 2, %11
  %14 = mul i8 2, %13
  %15 = add i8 %12, %14
  %16 = mul i8 %10, %15
  %17 = srem i8 %16, 4
  %18 = icmp eq i8 %17, 0
  %19 = mul i8 %9, %9
  %20 = xor i8 %19, %9
  %21 = and i8 %19, %9
  %22 = and i64 %3, -3079624430318875377
  %23 = xor i64 %3, -1
  %24 = or i64 3079624430318875376, %23
  %25 = xor i64 %24, -1
  %26 = and i64 %25, -1
  %27 = and i64 %1, -3617332453002392756
  %28 = xor i64 %1, -1
  %29 = or i64 3617332453002392755, %28
  %30 = xor i64 %29, -1
  %31 = and i64 %30, -1
  %32 = xor i64 %27, 7024613517785549941
  %33 = xor i64 %32, %26
  %34 = xor i64 %33, %31
  %35 = xor i64 %34, %22
  %36 = add i64 %1, 7020493404927056471
  %37 = add i64 6335629660048219006, %1
  %38 = add i64 %37, 684863744878837465
  %39 = add i64 %1, 999346619081594834
  %40 = xor i64 999346619081594834, %1
  %41 = and i64 999346619081594834, %1
  %42 = mul i64 2, %41
  %43 = add i64 %40, %42
  %44 = xor i64 -7607969230192556102, %38
  %45 = xor i64 %44, %36
  %46 = xor i64 %45, %43
  %47 = xor i64 %46, %39
  %48 = mul i64 %35, %47
  %49 = trunc i64 %48 to i8
  %50 = mul i8 %49, %21
  %51 = add i8 %20, %50
  %52 = srem i8 %51, 2
  %53 = icmp eq i8 %52, 0
  %54 = xor i1 %18, true
  %55 = and i1 %54, true
  %56 = and i1 %18, false
  %57 = or i1 %55, %56
  %58 = xor i1 %53, true
  %59 = add i64 %3, -6190009088816776435
  %60 = add i64 6568137960100505367, %3
  %61 = sub i64 %60, -5688597024792269814
  %62 = and i64 %3, 5309058301181910270
  %63 = or i64 -5309058301181910271, %3
  %64 = sub i64 %63, -5309058301181910271
  %65 = xor i64 %62, %61
  %66 = xor i64 %65, -8751498755345520445
  %67 = xor i64 %66, %59
  %68 = xor i64 %67, %64
  %69 = and i64 %1, 6345653264137364769
  %70 = or i64 -6345653264137364770, %1
  %71 = sub i64 %70, -6345653264137364770
  %72 = or i64 %3, 7188911878288081548
  %73 = and i64 7188911878288081548, %3
  %74 = xor i64 7188911878288081548, %3
  %75 = or i64 %73, %74
  %76 = and i64 %3, 8780333608539120084
  %77 = xor i64 %3, -1
  %78 = or i64 -8780333608539120085, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = xor i64 %76, 257623089109043179
  %82 = xor i64 %81, %80
  %83 = xor i64 %82, %75
  %84 = xor i64 %83, %69
  %85 = xor i64 %84, %72
  %86 = xor i64 %85, %71
  %87 = mul i64 %68, %86
  %88 = trunc i64 %87 to i1
  %89 = and i1 %58, %88
  %90 = and i1 %53, false
  %91 = or i1 %89, %90
  %92 = xor i1 %57, %91
  %93 = xor i1 %18, true
  %94 = xor i1 %53, true
  %95 = or i1 %93, %94
  %96 = xor i1 %95, true
  %97 = and i1 %96, true
  %98 = or i1 %92, %97
  %99 = add i64 %1, -6303137768887993186
  %100 = sub i64 0, %1
  %101 = add i64 6303137768887993186, %100
  %102 = sub i64 0, %101
  %103 = or i64 %1, -3787265629510170610
  %104 = and i64 -3787265629510170610, %1
  %105 = xor i64 -3787265629510170610, %1
  %106 = or i64 %104, %105
  %107 = xor i64 %106, %103
  %108 = xor i64 %107, %102
  %109 = xor i64 %108, %99
  %110 = xor i64 %109, -1527059683554822465
  %111 = or i64 %1, -8745403390871058214
  %112 = xor i64 %1, -1
  %113 = and i64 %112, -2095458873693543277
  %114 = and i64 %1, 2095458873693543276
  %115 = or i64 %113, %114
  %116 = xor i64 7226441985466051657, %115
  %117 = xor i64 %1, -1
  %118 = or i64 8745403390871058213, %117
  %119 = xor i64 %118, -1
  %120 = and i64 %119, -1
  %121 = or i64 %116, %120
  %122 = and i64 %1, 2651793947069095760
  %123 = xor i64 %1, -1
  %124 = or i64 -2651793947069095761, %123
  %125 = xor i64 %124, -1
  %126 = and i64 %125, -1
  %127 = and i64 %1, 5938713742490943513
  %128 = xor i64 %1, -1
  %129 = xor i64 5938713742490943513, %128
  %130 = and i64 %129, 5938713742490943513
  %131 = xor i64 %111, %122
  %132 = xor i64 %131, %126
  %133 = xor i64 %132, -1430419042433365962
  %134 = xor i64 %133, %130
  %135 = xor i64 %134, %127
  %136 = xor i64 %135, %121
  %137 = mul i64 %110, %136
  %138 = trunc i64 %137 to i32
  %139 = select i1 %98, i32 984876129, i32 %138
  %140 = xor i32 %139, 43
  store i32 %140, i32* %0, align 4
  %141 = call i8** @bf6338069988336422972(i32* %0)
  %142 = load i8*, i8** %141, align 8
  indirectbr i8* %142, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.BogusBasicBlock.extracted(i32* %0, [15 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876113)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@clear.BogusBasicBlock.extracted, %codeRepl.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876158)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@clear.BogusBasicBlock.extracted, %8), i8** %5, align 8
  store i32 984876158, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  store i32 1, i32* %0, align 4
  %9 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %9, align 4
  %10 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %10, align 4
  %11 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %11, align 4
  %12 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %12, align 4
  %13 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %13, align 4
  %14 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %14, align 4
  %15 = getelementptr inbounds [15 x i32], [15 x i32]* %lookupTable, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %dispatcher, align 4
  %17 = load i8*, i8** %3, align 8
  %18 = load i8, i8* %17, align 1
  %19 = mul i8 %18, 2
  %20 = mul i8 %18, 2
  %21 = add i8 2, %20
  %22 = mul i8 %19, %21
  %23 = srem i8 %22, 4
  %24 = add i64 %4, 1193933879164241334
  %25 = xor i64 1193933879164241334, %4
  %26 = and i64 1193933879164241334, %4
  %27 = mul i64 2, %26
  %28 = add i64 %25, %27
  %29 = and i64 %2, 971765195425808020
  %30 = xor i64 %2, -1
  %31 = or i64 -971765195425808021, %30
  %32 = xor i64 %31, -1
  %33 = and i64 %32, -1
  %34 = and i64 %4, 2308880288419602699
  %35 = xor i64 %4, -1
  %36 = or i64 -2308880288419602700, %35
  %37 = xor i64 %36, -1
  %38 = and i64 %37, -1
  %39 = xor i64 %34, %24
  %40 = xor i64 %39, 1431804648947897917
  %41 = xor i64 %40, %33
  %42 = xor i64 %41, %38
  %43 = xor i64 %42, %29
  %44 = xor i64 %43, %28
  %45 = add i64 %4, 1057774368563961706
  %46 = sub i64 0, %4
  %47 = add i64 -1057774368563961706, %46
  %48 = sub i64 0, %47
  %49 = and i64 %2, -1895865484444083603
  %50 = xor i64 %2, -1
  %51 = or i64 1895865484444083602, %50
  %52 = xor i64 %51, -1
  %53 = and i64 %52, -1
  %54 = xor i64 %48, %53
  %55 = xor i64 %54, %45
  %56 = xor i64 %55, 0
  %57 = xor i64 %56, %49
  %58 = mul i64 %44, %57
  %59 = trunc i64 %58 to i8
  %60 = icmp eq i8 %23, %59
  %61 = mul i8 %18, %18
  %62 = add i8 %61, %18
  %63 = srem i8 %62, 2
  %64 = icmp eq i8 %63, 0
  %65 = and i1 %60, %64
  %66 = xor i1 %60, %64
  %67 = or i1 %65, %66
  %68 = and i64 %4, 6815031981727878872
  %69 = xor i64 %4, -1
  %70 = or i64 -6815031981727878873, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = or i64 %4, 340101226268554870
  %74 = and i64 340101226268554870, %4
  %75 = xor i64 340101226268554870, %4
  %76 = or i64 %74, %75
  %77 = and i64 %2, 6433459832996934620
  %78 = xor i64 %2, -1
  %79 = xor i64 6433459832996934620, %78
  %80 = and i64 %79, 6433459832996934620
  %81 = xor i64 %80, %68
  %82 = xor i64 %81, %76
  %83 = xor i64 %82, %77
  %84 = xor i64 %83, %72
  %85 = xor i64 %84, %73
  %86 = xor i64 %85, -2493589838327511459
  %87 = and i64 %4, -552258965892730043
  %88 = xor i64 %4, -1
  %89 = or i64 552258965892730042, %88
  %90 = xor i64 %89, -1
  %91 = and i64 %90, -1
  %92 = or i64 %4, 6369284388636566060
  %93 = xor i64 %4, -1
  %94 = and i64 %93, 2693760740312598639
  %95 = and i64 %4, -2693760740312598640
  %96 = or i64 %94, %95
  %97 = xor i64 9008913912357612099, %96
  %98 = xor i64 %4, -1
  %99 = or i64 -6369284388636566061, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = or i64 %97, %101
  %103 = add i64 %4, -5840528967597428948
  %104 = add i64 4101695285422283867, %4
  %105 = add i64 %104, 8504519820689838801
  %106 = xor i64 %103, %87
  %107 = xor i64 %106, -5435767067421888891
  %108 = xor i64 %107, %91
  %109 = xor i64 %108, %102
  %110 = xor i64 %109, %92
  %111 = xor i64 %110, %105
  %112 = mul i64 %86, %111
  %113 = trunc i64 %112 to i32
  %114 = select i1 %67, i32 %113, i32 984876113
  %115 = xor i32 %114, 0
  store i32 %115, i32* %1, align 4
  %116 = call i8** @bf6338069988336422972(i32* %1)
  %117 = load i8*, i8** %116, align 8
  indirectbr i8* %117, [label %codeRepl.exitStub.exitStub, label %8]

codeRepl.exitStub.exitStub:                       ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted(i32* %.reg2mem42, i32* %.reg2mem61, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4767101006511538369, i32 0, i64 %1
  store i8* blockaddress(@main.extracted, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4767101006511538369, i32 0, i64 %3
  store i8* blockaddress(@main.extracted, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4767101006511538369, i32 0, i64 %5
  store i8* blockaddress(@main.extracted, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2001930920301229235, i32 0, i64 %8
  store i8* bitcast (void (i1, i32, i32, i32*)* @main.extracted.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf16412650203074185332(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload47 = load i32, i32* %.reg2mem42, align 4
  %13 = srem i32 %.reload47, 2
  store i32 %13, i32* %.reg2mem61, align 4
  %.reload63 = load i32, i32* %.reg2mem61, align 4
  %14 = icmp eq i32 %.reload63, 0
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %18 = load i32, i32* %17, align 4
  %19 = srem i32 %16, %18
  %20 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = sub i32 %21, %23
  %25 = load i8*, i8** %2, align 8
  %26 = load i8, i8* %25, align 1
  %27 = mul i8 %26, 2
  %28 = mul i8 %26, 2
  %29 = xor i8 2, %28
  %30 = and i8 2, %28
  %31 = mul i8 2, %30
  %32 = add i8 %29, %31
  %33 = mul i8 %27, %32
  %34 = add i64 %1, -8496753153036886842
  %35 = xor i64 -8496753153036886842, %1
  %36 = and i64 -8496753153036886842, %1
  %37 = mul i64 2, %36
  %38 = add i64 %35, %37
  %39 = add i64 %5, 7457289710752616834
  %40 = sub i64 0, %5
  %41 = add i64 -7457289710752616834, %40
  %42 = sub i64 0, %41
  %43 = xor i64 %42, 4763037018153428939
  %44 = xor i64 %43, %34
  %45 = xor i64 %44, %39
  %46 = xor i64 %45, %38
  %47 = or i64 %3, 738190090179241737
  %48 = xor i64 %3, -1
  %49 = and i64 %48, 1907407117927153664
  %50 = and i64 %3, -1907407117927153665
  %51 = or i64 %49, %50
  %52 = xor i64 1172883495492609801, %51
  %53 = xor i64 %3, -1
  %54 = or i64 -738190090179241738, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = add i64 %8, -338782347700317928
  %59 = sub i64 0, %8
  %60 = sub i64 -338782347700317928, %59
  %61 = xor i64 %58, %47
  %62 = xor i64 %61, 5520821608242812812
  %63 = xor i64 %62, %57
  %64 = xor i64 %63, %60
  %65 = mul i64 %46, %64
  %66 = trunc i64 %65 to i8
  %67 = srem i8 %33, %66
  %68 = icmp eq i8 %67, 0
  %69 = mul i8 %26, %26
  %70 = mul i8 %69, %26
  %71 = add i8 %70, %26
  %72 = srem i8 %71, 2
  %73 = icmp eq i8 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %68, %74
  %76 = and i1 %75, %68
  %77 = and i64 %1, -4317794186354601151
  %78 = or i64 4317794186354601150, %1
  %79 = sub i64 %78, 4317794186354601150
  %80 = or i64 %5, -1646092154249028838
  %81 = xor i64 %5, -1
  %82 = and i64 %81, -6116633878495575872
  %83 = and i64 %5, 6116633878495575871
  %84 = or i64 %82, %83
  %85 = xor i64 4772335718821993434, %84
  %86 = xor i64 %5, -1
  %87 = or i64 1646092154249028837, %86
  %88 = xor i64 %87, -1
  %89 = and i64 %88, -1
  %90 = or i64 %85, %89
  %91 = xor i64 %90, %80
  %92 = xor i64 %91, 2531974703730841989
  %93 = xor i64 %92, %79
  %94 = xor i64 %93, %77
  %95 = and i64 %3, -3450601147638071313
  %96 = xor i64 %3, -1
  %97 = xor i64 -3450601147638071313, %96
  %98 = and i64 %97, -3450601147638071313
  %99 = or i64 %8, 6963275853765627575
  %100 = xor i64 %8, -1
  %101 = and i64 %100, 4706790361552763000
  %102 = and i64 %8, -4706790361552763001
  %103 = or i64 %101, %102
  %104 = xor i64 2446411840986871503, %103
  %105 = xor i64 %8, -1
  %106 = or i64 -6963275853765627576, %105
  %107 = xor i64 %106, -1
  %108 = and i64 %107, -1
  %109 = or i64 %104, %108
  %110 = xor i64 %109, %98
  %111 = xor i64 %110, %99
  %112 = xor i64 %111, -5112588187411984081
  %113 = xor i64 %112, %95
  %114 = mul i64 %94, %113
  %115 = trunc i64 %114 to i32
  %116 = select i1 %76, i32 %115, i32 984876138
  %117 = xor i32 %116, 1
  store i32 %117, i32* %0, align 4
  %118 = call i8** @bf16412650203074185332(i32* %0)
  %119 = load i8*, i8** %118, align 8
  indirectbr i8* %119, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %120 = call i8** @lk6590627545456677261(i64* %7)
  %121 = load i8*, i8** %120, align 8
  %122 = bitcast i8* %121 to void (i1, i32, i32, i32*)*
  call void %122(i1 %14, i32 %19, i32 %24, i32* %dispatcher)
  %123 = load i8*, i8** %6, align 8
  %124 = load i8, i8* %123, align 1
  %125 = mul i8 %124, 2
  %126 = sext i32 %116 to i64
  %127 = or i64 %126, -4162537768160359009
  %128 = xor i64 %126, -1
  %129 = and i64 -4162537768160359009, %128
  %130 = add i64 %129, %126
  %131 = sext i8 %29 to i64
  %132 = add i64 %131, -1299574341769977444
  %133 = and i64 -1299574341769977444, %131
  %134 = or i64 -1299574341769977444, %131
  %135 = add i64 %133, %134
  %136 = sext i32 %24 to i64
  %137 = or i64 %136, 7711306241519309476
  %138 = xor i64 %136, -1
  %139 = and i64 %138, 4053509173147286472
  %140 = and i64 %136, -4053509173147286473
  %141 = or i64 %139, %140
  %142 = xor i64 6000172625655621996, %141
  %143 = xor i64 %136, -1
  %144 = or i64 -7711306241519309477, %143
  %145 = xor i64 %144, -1
  %146 = and i64 %145, -1
  %147 = or i64 %142, %146
  %148 = xor i64 1399420680583873527, %130
  %149 = xor i64 %148, %132
  %150 = xor i64 %149, %135
  %151 = xor i64 %150, %137
  %152 = xor i64 %151, %147
  %153 = xor i64 %152, %127
  %154 = sext i32 %19 to i64
  %155 = add i64 %154, 8778835437498122994
  %156 = and i64 8778835437498122994, %154
  %157 = or i64 8778835437498122994, %154
  %158 = add i64 %156, %157
  %159 = sext i8 %29 to i64
  %160 = and i64 %159, -5073187084834517608
  %161 = xor i64 %159, -1
  %162 = or i64 5073187084834517607, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = sext i32 %117 to i64
  %166 = or i64 %165, 1262513487811295648
  %167 = and i64 1262513487811295648, %165
  %168 = xor i64 1262513487811295648, %165
  %169 = or i64 %167, %168
  %170 = xor i64 %158, %160
  %171 = xor i64 %170, %155
  %172 = xor i64 %171, %166
  %173 = xor i64 %172, %169
  %174 = xor i64 %173, 552491025939061646
  %175 = xor i64 %174, %164
  %176 = mul i64 %153, %175
  %177 = trunc i64 %176 to i8
  %178 = mul i8 %124, %177
  %179 = add i8 31, %178
  %180 = add i8 %179, -29
  %181 = mul i8 %125, %180
  %182 = srem i8 %181, 4
  %183 = add i64 %8, -3094267913680252027
  %184 = add i64 -7316092667325774019, %8
  %185 = add i64 %184, 4221824753645521992
  %186 = sext i8 %30 to i64
  %187 = add i64 %186, 226989308902361191
  %188 = add i64 883475834644356302, %186
  %189 = sub i64 %188, 656486525741995111
  %190 = or i64 %8, -3229194142180504060
  %191 = xor i64 %8, -1
  %192 = and i64 %191, 6034150098294892419
  %193 = and i64 %8, -6034150098294892420
  %194 = or i64 %192, %193
  %195 = xor i64 -9182273932100736633, %194
  %196 = xor i64 %8, -1
  %197 = or i64 3229194142180504059, %196
  %198 = xor i64 %197, -1
  %199 = and i64 %198, -1
  %200 = or i64 %195, %199
  %201 = xor i64 -4870583036581504245, %190
  %202 = xor i64 %201, %189
  %203 = xor i64 %202, %200
  %204 = xor i64 %203, %187
  %205 = xor i64 %204, %185
  %206 = xor i64 %205, %183
  %207 = sext i32 %19 to i64
  %208 = and i64 %207, -9141135692598734042
  %209 = or i64 9141135692598734041, %207
  %210 = sub i64 %209, 9141135692598734041
  %211 = sext i8 %26 to i64
  %212 = or i64 %211, 9034955362384380841
  %213 = xor i64 %211, -1
  %214 = and i64 9034955362384380841, %213
  %215 = add i64 %214, %211
  %216 = xor i64 %210, %208
  %217 = xor i64 %216, %212
  %218 = xor i64 %217, 0
  %219 = xor i64 %218, %215
  %220 = mul i64 %206, %219
  %221 = trunc i64 %220 to i8
  %222 = icmp eq i8 %182, %221
  %223 = mul i8 %124, %124
  %224 = mul i8 %223, %124
  %225 = add i8 %224, %124
  %226 = srem i8 %225, 2
  %227 = or i64 %5, -2529295686499470012
  %228 = xor i64 %5, -1
  %229 = and i64 -2529295686499470012, %228
  %230 = add i64 %229, %5
  %231 = sext i8 %33 to i64
  %232 = add i64 %231, -2352760318755471010
  %233 = add i64 3208639454027765211, %231
  %234 = sub i64 %233, 5561399772783236221
  %235 = xor i64 %232, %227
  %236 = xor i64 %235, %230
  %237 = xor i64 %236, 6759980041611022355
  %238 = xor i64 %237, %234
  %239 = sext i8 %69 to i64
  %240 = and i64 %239, 8826593262554732632
  %241 = xor i64 %239, -1
  %242 = or i64 -8826593262554732633, %241
  %243 = xor i64 %242, -1
  %244 = and i64 %243, -1
  %245 = sext i32 %18 to i64
  %246 = and i64 %245, 6084824724856758423
  %247 = xor i64 %245, -1
  %248 = xor i64 6084824724856758423, %247
  %249 = and i64 %248, 6084824724856758423
  %250 = sext i8 %31 to i64
  %251 = add i64 %250, 3753019424002627867
  %252 = xor i64 3753019424002627867, %250
  %253 = and i64 3753019424002627867, %250
  %254 = mul i64 2, %253
  %255 = add i64 %252, %254
  %256 = xor i64 %251, %240
  %257 = xor i64 %256, %255
  %258 = xor i64 %257, %246
  %259 = xor i64 %258, 0
  %260 = xor i64 %259, %244
  %261 = xor i64 %260, %249
  %262 = mul i64 %238, %261
  %263 = trunc i64 %262 to i8
  %264 = icmp eq i8 %226, %263
  %265 = xor i1 %222, true
  %266 = or i1 %265, %264
  %267 = xor i1 %222, true
  %268 = sub i1 %266, %267
  %269 = select i1 %268, i32 984876136, i32 984876139
  %270 = xor i32 %269, -1
  %271 = and i32 %270, 3
  %272 = and i32 %269, -4
  %273 = or i32 %271, %272
  store i32 %273, i32* %0, align 4
  %274 = call i8** @bf16412650203074185332(i32* %0)
  %275 = load i8*, i8** %274, align 8
  indirectbr i8* %275, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.16([51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4295862735387337237, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.16, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4295862735387337237, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.16, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4295862735387337237, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.16, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7635078272535982493, i32 0, i64 %8
  store i8* bitcast (void ()* @main.extracted.16.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf2542622646541168406(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = or i64 %3, 3323494777154035889
  %14 = xor i64 %3, -1
  %15 = and i64 3323494777154035889, %14
  %16 = add i64 %15, %3
  %17 = add i64 %8, -1456530268462629582
  %18 = add i64 -8519006089175008976, %8
  %19 = add i64 %18, 7062475820712379394
  %20 = add i64 %3, -4135497355043621057
  %21 = add i64 872754222915964112, %3
  %22 = sub i64 %21, 5008251577959585169
  %23 = xor i64 %16, %13
  %24 = xor i64 %23, %17
  %25 = xor i64 %24, %22
  %26 = xor i64 %25, %20
  %27 = xor i64 %26, %19
  %28 = xor i64 %27, 3261115865261308387
  %29 = and i64 %1, -8995988282585407133
  %30 = or i64 8995988282585407132, %1
  %31 = sub i64 %30, 8995988282585407132
  %32 = or i64 %5, 550480982640925872
  %33 = xor i64 %5, -1
  %34 = and i64 %33, -3867556746646673837
  %35 = and i64 %5, 3867556746646673836
  %36 = or i64 %34, %35
  %37 = xor i64 -3607350140909765917, %36
  %38 = xor i64 %5, -1
  %39 = or i64 -550480982640925873, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = or i64 %37, %41
  %43 = xor i64 %32, 8619197660292813150
  %44 = xor i64 %43, %29
  %45 = xor i64 %44, %42
  %46 = xor i64 %45, %31
  %47 = mul i64 %28, %46
  %48 = sub i64 -561415295501773670, %47
  %49 = sub i64 67, 87
  %50 = mul i64 111, 120
  %51 = sdiv i64 25, 30
  %52 = mul i64 37, 48
  %53 = mul i64 2, 41
  %54 = and i64 %3, -7307246332076198607
  %55 = or i64 7307246332076198606, %3
  %56 = sub i64 %55, 7307246332076198606
  %57 = or i64 %5, 4958952536661960600
  %58 = xor i64 %5, -1
  %59 = and i64 4958952536661960600, %58
  %60 = add i64 %59, %5
  %61 = or i64 %5, 561820261289719175
  %62 = and i64 561820261289719175, %5
  %63 = xor i64 561820261289719175, %5
  %64 = or i64 %62, %63
  %65 = xor i64 %54, %64
  %66 = xor i64 %65, %60
  %67 = xor i64 %66, %61
  %68 = xor i64 %67, 8250547875537096711
  %69 = xor i64 %68, %57
  %70 = xor i64 %69, %56
  %71 = and i64 %8, -8243971965116844606
  %72 = xor i64 %8, -1
  %73 = xor i64 -8243971965116844606, %72
  %74 = and i64 %73, -8243971965116844606
  %75 = and i64 %3, -8759487828290299488
  %76 = or i64 8759487828290299487, %3
  %77 = sub i64 %76, 8759487828290299487
  %78 = xor i64 %75, %71
  %79 = xor i64 %78, %74
  %80 = xor i64 %79, %77
  %81 = xor i64 %80, -2781476751474276639
  %82 = mul i64 %70, %81
  %83 = add i64 %3, 5691147984474073555
  %84 = sub i64 0, %3
  %85 = add i64 -5691147984474073555, %84
  %86 = sub i64 0, %85
  %87 = add i64 %1, -409285946511030557
  %88 = sub i64 0, %1
  %89 = add i64 409285946511030557, %88
  %90 = sub i64 0, %89
  %91 = xor i64 %86, %90
  %92 = xor i64 %91, %87
  %93 = xor i64 %92, %83
  %94 = xor i64 %93, -1169702070841309109
  %95 = add i64 %8, -506296970534984264
  %96 = sub i64 0, %8
  %97 = add i64 506296970534984264, %96
  %98 = sub i64 0, %97
  %99 = and i64 %5, -7512072837807383690
  %100 = or i64 7512072837807383689, %5
  %101 = sub i64 %100, 7512072837807383689
  %102 = and i64 %8, -8814295516969097563
  %103 = or i64 8814295516969097562, %8
  %104 = sub i64 %103, 8814295516969097562
  %105 = xor i64 %98, %102
  %106 = xor i64 %105, %95
  %107 = xor i64 %106, %101
  %108 = xor i64 %107, %104
  %109 = xor i64 %108, -5091079830927959108
  %110 = xor i64 %109, %99
  %111 = mul i64 %94, %110
  %112 = mul i64 %82, %111
  %113 = mul i64 105, 13
  %114 = add i64 106, 121
  %115 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 7
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 5
  %118 = load i32, i32* %117, align 4
  %119 = add i32 %116, %118
  store i32 %119, i32* %dispatcher, align 4
  %120 = load i8*, i8** %6, align 8
  %121 = load i8, i8* %120, align 1
  %122 = and i8 %121, 1
  %123 = icmp eq i8 %122, 0
  %124 = mul i8 %121, %121
  %125 = add i8 %124, %121
  %126 = mul i8 %125, 3
  %127 = srem i8 %126, 2
  %128 = icmp eq i8 %127, 0
  %129 = or i1 %123, %128
  %130 = select i1 %129, i32 984876139, i32 984876136
  %131 = xor i32 %130, -1
  %132 = and i64 %5, -6563526172954619654
  %133 = xor i64 %5, -1
  %134 = xor i64 -6563526172954619654, %133
  %135 = and i64 %134, -6563526172954619654
  %136 = and i64 %5, -6830197188471042341
  %137 = xor i64 %5, -1
  %138 = xor i64 -6830197188471042341, %137
  %139 = and i64 %138, -6830197188471042341
  %140 = xor i64 %136, %132
  %141 = xor i64 %140, %139
  %142 = xor i64 %141, 3077218620842903993
  %143 = xor i64 %142, %135
  %144 = or i64 %5, -6605126951705325313
  %145 = xor i64 %5, -1
  %146 = and i64 %145, 7248154683238607878
  %147 = and i64 %5, -7248154683238607879
  %148 = or i64 %146, %147
  %149 = xor i64 -4556659583137104647, %148
  %150 = xor i64 %5, -1
  %151 = or i64 6605126951705325312, %150
  %152 = xor i64 %151, -1
  %153 = and i64 %152, -1
  %154 = or i64 %149, %153
  %155 = or i64 %3, -4203385700922276343
  %156 = xor i64 %3, -1
  %157 = and i64 %156, -5974527941703988297
  %158 = and i64 %3, 5974527941703988296
  %159 = or i64 %157, %158
  %160 = xor i64 7547087964363607486, %159
  %161 = xor i64 %3, -1
  %162 = or i64 4203385700922276342, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = or i64 %160, %164
  %166 = or i64 %3, 8006101010915433592
  %167 = and i64 8006101010915433592, %3
  %168 = xor i64 8006101010915433592, %3
  %169 = or i64 %167, %168
  %170 = xor i64 %155, %169
  %171 = xor i64 %170, -2406864943923559013
  %172 = xor i64 %171, %144
  %173 = xor i64 %172, %166
  %174 = xor i64 %173, %165
  %175 = xor i64 %174, %154
  %176 = mul i64 %143, %175
  %177 = trunc i64 %176 to i32
  %178 = and i32 %131, %177
  %179 = or i64 %5, 4627701294609619043
  %180 = xor i64 %5, -1
  %181 = and i64 4627701294609619043, %180
  %182 = add i64 %181, %5
  %183 = and i64 %3, -2030097536807825527
  %184 = or i64 2030097536807825526, %3
  %185 = sub i64 %184, 2030097536807825526
  %186 = xor i64 %183, 8385398614017128895
  %187 = xor i64 %186, %182
  %188 = xor i64 %187, %185
  %189 = xor i64 %188, %179
  %190 = or i64 %5, 6016503547837486083
  %191 = xor i64 %5, -1
  %192 = and i64 %191, 5017717542714888278
  %193 = and i64 %5, -5017717542714888279
  %194 = or i64 %192, %193
  %195 = xor i64 1647307685441258581, %194
  %196 = xor i64 %5, -1
  %197 = or i64 -6016503547837486084, %196
  %198 = xor i64 %197, -1
  %199 = and i64 %198, -1
  %200 = or i64 %195, %199
  %201 = and i64 %3, 2294886766274661627
  %202 = or i64 -2294886766274661628, %3
  %203 = sub i64 %202, -2294886766274661628
  %204 = or i64 %8, 7291796236057366320
  %205 = xor i64 %8, -1
  %206 = and i64 7291796236057366320, %205
  %207 = add i64 %206, %8
  %208 = xor i64 %204, %207
  %209 = xor i64 %208, %190
  %210 = xor i64 %209, %203
  %211 = xor i64 %210, %200
  %212 = xor i64 %211, -8962687224819144956
  %213 = xor i64 %212, %201
  %214 = mul i64 %189, %213
  %215 = trunc i64 %214 to i32
  %216 = and i32 %130, %215
  %217 = or i32 %178, %216
  store i32 %217, i32* %0, align 4
  %218 = call i8** @bf2542622646541168406(i32* %0)
  %219 = load i8*, i8** %218, align 8
  indirectbr i8* %219, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %220 = call i8** @lk6996706366312423136(i64* %7)
  %221 = load i8*, i8** %220, align 8
  %222 = bitcast i8* %221 to void ()*
  call void %222()
  %223 = load i8*, i8** %2, align 8
  %224 = load i8, i8* %223, align 1
  %225 = and i8 %224, 1
  %226 = icmp eq i8 %225, 0
  %227 = mul i8 %224, %224
  %228 = add i8 %227, %224
  %229 = mul i8 %228, 3
  %230 = srem i8 %229, 2
  %231 = icmp eq i8 %230, 0
  %232 = or i1 %226, %231
  %233 = select i1 %232, i32 984876138, i32 984876138
  %234 = xor i32 %233, 0
  store i32 %234, i32* %0, align 4
  %235 = call i8** @bf2542622646541168406(i32* %0)
  %236 = load i8*, i8** %235, align 8
  indirectbr i8* %236, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.17([51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5256400659331720855, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.17, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5256400659331720855, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.17, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5256400659331720855, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.17, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11568173901483765685, i32 0, i64 %8
  store i8* bitcast (void (i32*, i32, i32*)* @main.extracted.17.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf1061434821978349071(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 21
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 20
  %16 = load i8*, i8** %4, align 8
  %17 = load i8, i8* %16, align 1
  %18 = mul i8 %17, %17
  %19 = sub i8 %18, 96
  %20 = add i8 %19, %17
  %21 = add i8 %20, 96
  %22 = mul i8 %21, 3
  %23 = or i64 %8, 8584490602938014152
  %24 = and i64 8584490602938014152, %8
  %25 = xor i64 8584490602938014152, %8
  %26 = or i64 %24, %25
  %27 = add i64 %3, -1460579523428633216
  %28 = sub i64 0, %3
  %29 = sub i64 -1460579523428633216, %28
  %30 = xor i64 %29, %23
  %31 = xor i64 %30, 5545099322440303795
  %32 = xor i64 %31, %26
  %33 = xor i64 %32, %27
  %34 = add i64 %5, 3721653959982684515
  %35 = add i64 -6009822568974236377, %5
  %36 = sub i64 %35, 8715267544752630724
  %37 = add i64 %1, -880375185027693725
  %38 = sub i64 0, %1
  %39 = add i64 880375185027693725, %38
  %40 = sub i64 0, %39
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, %34
  %43 = xor i64 %42, %37
  %44 = xor i64 %43, 1699852124449412342
  %45 = mul i64 %33, %44
  %46 = trunc i64 %45 to i8
  %47 = srem i8 %22, %46
  %48 = icmp eq i8 %47, 0
  %49 = mul i8 %17, %17
  %50 = add i8 %49, %17
  %51 = add i64 %8, -1896259754222187689
  %52 = sub i64 0, %8
  %53 = add i64 1896259754222187689, %52
  %54 = sub i64 0, %53
  %55 = and i64 %5, -7348220622939084715
  %56 = xor i64 %5, -1
  %57 = xor i64 -7348220622939084715, %56
  %58 = and i64 %57, -7348220622939084715
  %59 = or i64 %3, 1544541030163820792
  %60 = xor i64 %3, -1
  %61 = and i64 %60, -7563281165538762747
  %62 = and i64 %3, 7563281165538762746
  %63 = or i64 %61, %62
  %64 = xor i64 -9050374636213710595, %63
  %65 = xor i64 %3, -1
  %66 = or i64 -1544541030163820793, %65
  %67 = xor i64 %66, -1
  %68 = and i64 %67, -1
  %69 = or i64 %64, %68
  %70 = xor i64 %59, %58
  %71 = xor i64 %70, %51
  %72 = xor i64 %71, %69
  %73 = xor i64 %72, %55
  %74 = xor i64 %73, 4355074678424055823
  %75 = xor i64 %74, %54
  %76 = add i64 %3, 2088167774027395084
  %77 = sub i64 0, %3
  %78 = sub i64 2088167774027395084, %77
  %79 = and i64 %5, -5258210200520614312
  %80 = xor i64 %5, -1
  %81 = or i64 5258210200520614311, %80
  %82 = xor i64 %81, -1
  %83 = and i64 %82, -1
  %84 = xor i64 %78, %76
  %85 = xor i64 %84, %83
  %86 = xor i64 %85, %79
  %87 = xor i64 %86, 7906720144666820062
  %88 = mul i64 %75, %87
  %89 = trunc i64 %88 to i8
  %90 = srem i8 %50, %89
  %91 = and i64 %1, -222237524658610899
  %92 = or i64 222237524658610898, %1
  %93 = sub i64 %92, 222237524658610898
  %94 = add i64 %8, 6391351093258411975
  %95 = and i64 6391351093258411975, %8
  %96 = or i64 6391351093258411975, %8
  %97 = add i64 %95, %96
  %98 = add i64 %5, -3558436043110295322
  %99 = sub i64 0, %5
  %100 = sub i64 -3558436043110295322, %99
  %101 = xor i64 %98, %94
  %102 = xor i64 %101, %97
  %103 = xor i64 %102, %91
  %104 = xor i64 %103, %100
  %105 = xor i64 %104, 722096125207374773
  %106 = xor i64 %105, %93
  %107 = or i64 %8, 3709582925699147454
  %108 = and i64 3709582925699147454, %8
  %109 = xor i64 3709582925699147454, %8
  %110 = or i64 %108, %109
  %111 = and i64 %1, 5638051546661039550
  %112 = or i64 -5638051546661039551, %1
  %113 = sub i64 %112, -5638051546661039551
  %114 = or i64 %3, -1664944952727582511
  %115 = and i64 -1664944952727582511, %3
  %116 = xor i64 -1664944952727582511, %3
  %117 = or i64 %115, %116
  %118 = xor i64 %110, %111
  %119 = xor i64 %118, 0
  %120 = xor i64 %119, %114
  %121 = xor i64 %120, %113
  %122 = xor i64 %121, %107
  %123 = xor i64 %122, %117
  %124 = mul i64 %106, %123
  %125 = trunc i64 %124 to i8
  %126 = icmp eq i8 %90, %125
  %127 = and i1 %48, %126
  %128 = select i1 %127, i32 984876136, i32 984876138
  %129 = xor i32 %128, -1
  %130 = and i32 %129, 2
  %131 = and i32 %128, -3
  %132 = or i32 %130, %131
  store i32 %132, i32* %0, align 4
  %133 = call i8** @bf1061434821978349071(i32* %0)
  %134 = load i8*, i8** %133, align 8
  indirectbr i8* %134, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %135 = call i8** @lk14541245032599740191(i64* %7)
  %136 = load i8*, i8** %135, align 8
  %137 = bitcast i8* %136 to void (i32*, i32, i32*)*
  call void %137(i32* %15, i32 %14, i32* %dispatcher)
  %138 = load i8*, i8** %2, align 8
  %139 = load i8, i8* %138, align 1
  %140 = mul i8 %139, 2
  %141 = mul i8 %139, 2
  %142 = sub i8 0, %141
  %143 = sub i8 2, %142
  %144 = mul i8 %140, %143
  %145 = srem i8 %144, 4
  %146 = icmp eq i8 %145, 0
  %147 = mul i8 %139, %139
  %148 = sub i8 0, %147
  %149 = sub i8 0, %139
  %150 = add i8 %148, %149
  %151 = sub i8 0, %150
  %152 = srem i8 %151, 2
  %153 = icmp eq i8 %152, 0
  %154 = xor i1 %153, true
  %155 = and i1 %146, %154
  %156 = add i1 %155, %153
  %157 = sext i32 %132 to i64
  %158 = or i64 %157, -3837742654651172695
  %159 = xor i64 %157, -1
  %160 = and i64 -3837742654651172695, %159
  %161 = add i64 %160, %157
  %162 = sext i32 %131 to i64
  %163 = or i64 %162, 4054824648735900262
  %164 = xor i64 %162, -1
  %165 = and i64 4054824648735900262, %164
  %166 = add i64 %165, %162
  %167 = add i64 %8, 5206821195543220581
  %168 = sub i64 0, %8
  %169 = sub i64 5206821195543220581, %168
  %170 = xor i64 9079059737279940027, %169
  %171 = xor i64 %170, %166
  %172 = xor i64 %171, %167
  %173 = xor i64 %172, %161
  %174 = xor i64 %173, %163
  %175 = xor i64 %174, %158
  %176 = add i64 %8, -4534945832229752475
  %177 = sub i64 0, %8
  %178 = add i64 4534945832229752475, %177
  %179 = sub i64 0, %178
  %180 = sext i8 %50 to i64
  %181 = or i64 %180, -2800670023405374180
  %182 = xor i64 %180, -1
  %183 = and i64 -2800670023405374180, %182
  %184 = add i64 %183, %180
  %185 = sext i32 %129 to i64
  %186 = or i64 %185, -3165755564786341715
  %187 = xor i64 %185, -1
  %188 = and i64 %187, -9147435204722721328
  %189 = and i64 %185, 9147435204722721327
  %190 = or i64 %188, %189
  %191 = xor i64 6133113465187390845, %190
  %192 = xor i64 %185, -1
  %193 = or i64 3165755564786341714, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = or i64 %191, %195
  %197 = xor i64 %179, %196
  %198 = xor i64 %197, %181
  %199 = xor i64 %198, %176
  %200 = xor i64 %199, %184
  %201 = xor i64 %200, %186
  %202 = xor i64 %201, -5655498784158905813
  %203 = mul i64 %175, %202
  %204 = trunc i64 %203 to i32
  %205 = select i1 %156, i32 984876137, i32 %204
  %206 = sext i32 %128 to i64
  %207 = or i64 %206, 2797018361721628105
  %208 = xor i64 %206, -1
  %209 = and i64 2797018361721628105, %208
  %210 = add i64 %209, %206
  %211 = sext i8 %20 to i64
  %212 = add i64 %211, 3320707300852561493
  %213 = sub i64 0, %211
  %214 = sub i64 3320707300852561493, %213
  %215 = xor i64 -6368604896109479705, %210
  %216 = xor i64 %215, %207
  %217 = xor i64 %216, %214
  %218 = xor i64 %217, %212
  %219 = sext i8 %22 to i64
  %220 = or i64 %219, 1735200022177145128
  %221 = xor i64 %219, -1
  %222 = and i64 1735200022177145128, %221
  %223 = add i64 %222, %219
  %224 = sext i32 %128 to i64
  %225 = or i64 %224, -175405643889753227
  %226 = xor i64 %224, -1
  %227 = and i64 %226, 8807528864419962947
  %228 = and i64 %224, -8807528864419962948
  %229 = or i64 %227, %228
  %230 = xor i64 -8670988761546742986, %229
  %231 = xor i64 %224, -1
  %232 = or i64 175405643889753226, %231
  %233 = xor i64 %232, -1
  %234 = and i64 %233, -1
  %235 = or i64 %230, %234
  %236 = sext i8 %17 to i64
  %237 = add i64 %236, 5707024382619983267
  %238 = sub i64 0, %236
  %239 = add i64 -5707024382619983267, %238
  %240 = sub i64 0, %239
  %241 = xor i64 %223, %235
  %242 = xor i64 %241, %220
  %243 = xor i64 %242, 3726198047621981481
  %244 = xor i64 %243, %237
  %245 = xor i64 %244, %225
  %246 = xor i64 %245, %240
  %247 = mul i64 %218, %246
  %248 = trunc i64 %247 to i32
  %249 = xor i32 %205, %248
  %250 = and i32 %249, -1991414821
  %251 = and i32 %205, 1991414820
  %252 = or i32 %250, %251
  %253 = xor i32 %252, -1991414821
  store i32 %253, i32* %0, align 4
  %254 = call i8** @bf1061434821978349071(i32* %0)
  %255 = load i8*, i8** %254, align 8
  indirectbr i8* %255, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.18(i32* %.reg2mem67, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable1542317342180117104, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.18, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable1542317342180117104, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.18, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable1542317342180117104, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.18, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11073436793896439777, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i1, i32, i32*)* @main.extracted.18.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf14701068836225390076(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = sdiv i32 35, 35
  %14 = add i32 8, 107
  %15 = add i32 27, 43
  %16 = sdiv i32 16, 55
  %.reload68 = load i32, i32* %.reg2mem67, align 4
  %17 = add i64 %5, -2166356111190232488
  %18 = sub i64 0, %5
  %19 = add i64 2166356111190232488, %18
  %20 = sub i64 0, %19
  %21 = add i64 %3, 983091724066596148
  %22 = sub i64 0, %3
  %23 = add i64 -983091724066596148, %22
  %24 = sub i64 0, %23
  %25 = xor i64 %21, %20
  %26 = xor i64 %25, %17
  %27 = xor i64 %26, %24
  %28 = xor i64 %27, -269075020481925169
  %29 = add i64 %3, -3616429468789642764
  %30 = sub i64 0, %3
  %31 = sub i64 -3616429468789642764, %30
  %32 = and i64 %3, -2197538364562778424
  %33 = xor i64 %3, -1
  %34 = or i64 2197538364562778423, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, -1
  %37 = add i64 %1, -5409740961877451864
  %38 = sub i64 0, %1
  %39 = add i64 5409740961877451864, %38
  %40 = sub i64 0, %39
  %41 = xor i64 %36, 2495455213213216350
  %42 = xor i64 %41, %37
  %43 = xor i64 %42, %29
  %44 = xor i64 %43, %32
  %45 = xor i64 %44, %31
  %46 = xor i64 %45, %40
  %47 = mul i64 %28, %46
  %48 = trunc i64 %47 to i32
  %49 = srem i32 %.reload68, %48
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 10
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 8
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 0, %54
  %56 = sub i32 %52, %55
  %57 = load i8*, i8** %6, align 8
  %58 = load i8, i8* %57, align 1
  %59 = and i8 %58, 1
  %60 = or i64 %8, -6778948566418969292
  %61 = xor i64 %8, -1
  %62 = and i64 -6778948566418969292, %61
  %63 = add i64 %62, %8
  %64 = and i64 %3, 7480350056508356469
  %65 = xor i64 %3, -1
  %66 = xor i64 7480350056508356469, %65
  %67 = and i64 %66, 7480350056508356469
  %68 = xor i64 %67, -2723976097736403439
  %69 = xor i64 %68, %60
  %70 = xor i64 %69, %64
  %71 = xor i64 %70, %63
  %72 = and i64 %3, 3670081136716735720
  %73 = xor i64 %3, -1
  %74 = or i64 -3670081136716735721, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = and i64 %3, -1110149085649861917
  %78 = xor i64 %3, -1
  %79 = xor i64 -1110149085649861917, %78
  %80 = and i64 %79, -1110149085649861917
  %81 = xor i64 %72, %77
  %82 = xor i64 %81, %80
  %83 = xor i64 %82, %76
  %84 = xor i64 %83, -6194324847383192847
  %85 = mul i64 %71, %84
  %86 = trunc i64 %85 to i8
  %87 = icmp eq i8 %59, %86
  %88 = mul i8 %58, %58
  %89 = or i64 %3, 4978027479216002719
  %90 = and i64 4978027479216002719, %3
  %91 = xor i64 4978027479216002719, %3
  %92 = or i64 %90, %91
  %93 = add i64 %8, -228668233847701842
  %94 = sub i64 0, %8
  %95 = add i64 228668233847701842, %94
  %96 = sub i64 0, %95
  %97 = xor i64 %96, %92
  %98 = xor i64 %97, -3020994994481332565
  %99 = xor i64 %98, %89
  %100 = xor i64 %99, %93
  %101 = add i64 %1, -479739882125017637
  %102 = sub i64 0, %1
  %103 = sub i64 -479739882125017637, %102
  %104 = add i64 %3, -8069991289402190555
  %105 = sub i64 0, %3
  %106 = add i64 8069991289402190555, %105
  %107 = sub i64 0, %106
  %108 = or i64 %5, -2992761492849913901
  %109 = xor i64 %5, -1
  %110 = and i64 %109, -7623146729857756993
  %111 = and i64 %5, 7623146729857756992
  %112 = or i64 %110, %111
  %113 = xor i64 4630464815504252780, %112
  %114 = xor i64 %5, -1
  %115 = or i64 2992761492849913900, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = or i64 %113, %117
  %119 = xor i64 %118, %104
  %120 = xor i64 %119, %108
  %121 = xor i64 %120, %103
  %122 = xor i64 %121, %107
  %123 = xor i64 %122, 0
  %124 = xor i64 %123, %101
  %125 = mul i64 %100, %124
  %126 = trunc i64 %125 to i8
  %127 = sub i8 %126, %58
  %128 = sub i8 %88, %127
  %129 = srem i8 %128, 2
  %130 = icmp eq i8 %129, 0
  %131 = or i1 %87, %130
  %132 = select i1 %131, i32 984876136, i32 984876139
  %133 = xor i32 %132, 3
  store i32 %133, i32* %0, align 4
  %134 = call i8** @bf14701068836225390076(i32* %0)
  %135 = load i8*, i8** %134, align 8
  indirectbr i8* %135, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  %136 = sext i8 %128 to i64
  %137 = add i64 %136, -8323768932941822012
  %138 = add i64 2270613991574969469, %136
  %139 = add i64 %138, 7852361149192760135
  %140 = or i64 %3, -554441485238235653
  %141 = and i64 -554441485238235653, %3
  %142 = xor i64 -554441485238235653, %3
  %143 = or i64 %141, %142
  %144 = xor i64 %140, %139
  %145 = xor i64 %144, %137
  %146 = xor i64 %145, -1586676602867113773
  %147 = xor i64 %146, %143
  %148 = sext i32 %.reload68 to i64
  %149 = and i64 %148, -1310100731285274432
  %150 = or i64 1310100731285274431, %148
  %151 = sub i64 %150, 1310100731285274431
  %152 = sext i32 %133 to i64
  %153 = add i64 %152, -1761776032690267631
  %154 = sub i64 0, %152
  %155 = add i64 1761776032690267631, %154
  %156 = sub i64 0, %155
  %157 = xor i64 %151, %156
  %158 = xor i64 %157, -5714006090827518251
  %159 = xor i64 %158, %153
  %160 = xor i64 %159, %149
  %161 = mul i64 %147, %160
  store i64 %161, i64* %7, align 8
  %162 = call i8** @lk7953750587911823265(i64* %7)
  %163 = load i8*, i8** %162, align 8
  %164 = bitcast i8* %163 to void ([51 x i32]*, i1, i32, i32*)*
  call void %164([51 x i32]* %lookupTable, i1 %50, i32 %56, i32* %dispatcher)
  %165 = load i8*, i8** %2, align 8
  %166 = load i8, i8* %165, align 1
  %167 = mul i8 %166, 2
  %168 = mul i8 %166, 2
  %169 = sext i8 %129 to i64
  %170 = or i64 %169, -5425802171709120532
  %171 = and i64 -5425802171709120532, %169
  %172 = xor i64 -5425802171709120532, %169
  %173 = or i64 %171, %172
  %174 = sext i32 %14 to i64
  %175 = and i64 %174, -721329524925943029
  %176 = or i64 721329524925943028, %174
  %177 = sub i64 %176, 721329524925943028
  %178 = sext i8 %127 to i64
  %179 = and i64 %178, 8883205678774132390
  %180 = xor i64 %178, -1
  %181 = or i64 -8883205678774132391, %180
  %182 = xor i64 %181, -1
  %183 = and i64 %182, -1
  %184 = xor i64 %177, %170
  %185 = xor i64 %184, %183
  %186 = xor i64 %185, %173
  %187 = xor i64 %186, 5804610180603427343
  %188 = xor i64 %187, %179
  %189 = xor i64 %188, %175
  %190 = sext i32 %132 to i64
  %191 = add i64 %190, 5384593768161084842
  %192 = sub i64 0, %190
  %193 = sub i64 5384593768161084842, %192
  %194 = sext i8 %129 to i64
  %195 = and i64 %194, 3551711618471548764
  %196 = xor i64 %194, -1
  %197 = or i64 -3551711618471548765, %196
  %198 = xor i64 %197, -1
  %199 = and i64 %198, -1
  %200 = xor i64 %199, %195
  %201 = xor i64 %200, -8346115749666625058
  %202 = xor i64 %201, %191
  %203 = xor i64 %202, %193
  %204 = mul i64 %189, %203
  %205 = trunc i64 %204 to i8
  %206 = xor i8 %205, %168
  %207 = and i8 2, %168
  %208 = sext i32 %54 to i64
  %209 = add i64 %208, -8423143026714040531
  %210 = sub i64 0, %208
  %211 = add i64 8423143026714040531, %210
  %212 = sub i64 0, %211
  %213 = sext i8 %127 to i64
  %214 = or i64 %213, -4630156869536403529
  %215 = xor i64 %213, -1
  %216 = and i64 %215, 7765547433344343586
  %217 = and i64 %213, -7765547433344343587
  %218 = or i64 %216, %217
  %219 = xor i64 -3136012887557066347, %218
  %220 = xor i64 %213, -1
  %221 = or i64 4630156869536403528, %220
  %222 = xor i64 %221, -1
  %223 = and i64 %222, -1
  %224 = or i64 %219, %223
  %225 = sext i32 %16 to i64
  %226 = add i64 %225, 5185339630770622475
  %227 = add i64 -8679920275465627214, %225
  %228 = add i64 %227, -4581484167473301927
  %229 = xor i64 3018897814471891861, %212
  %230 = xor i64 %229, %228
  %231 = xor i64 %230, %209
  %232 = xor i64 %231, %214
  %233 = xor i64 %232, %224
  %234 = xor i64 %233, %226
  %235 = sext i32 %14 to i64
  %236 = add i64 %235, 3174662545030909416
  %237 = xor i64 3174662545030909416, %235
  %238 = and i64 3174662545030909416, %235
  %239 = mul i64 2, %238
  %240 = add i64 %237, %239
  %241 = sext i8 %88 to i64
  %242 = add i64 %241, -6579601839079006952
  %243 = xor i64 -6579601839079006952, %241
  %244 = and i64 -6579601839079006952, %241
  %245 = mul i64 2, %244
  %246 = add i64 %243, %245
  %247 = xor i64 %236, %240
  %248 = xor i64 %247, %246
  %249 = xor i64 %248, %242
  %250 = xor i64 %249, 2779282470859911034
  %251 = mul i64 %234, %250
  %252 = trunc i64 %251 to i8
  %253 = mul i8 %252, %207
  %254 = add i8 %206, %253
  %255 = mul i8 %167, %254
  %256 = srem i8 %255, 4
  %257 = icmp eq i8 %256, 0
  %258 = mul i8 %166, %166
  %259 = add i8 %258, %166
  %260 = sext i32 %52 to i64
  %261 = add i64 %260, 5177299751040131490
  %262 = and i64 5177299751040131490, %260
  %263 = or i64 5177299751040131490, %260
  %264 = add i64 %262, %263
  %265 = sext i8 %129 to i64
  %266 = and i64 %265, -5324192450391850118
  %267 = xor i64 %265, -1
  %268 = or i64 5324192450391850117, %267
  %269 = xor i64 %268, -1
  %270 = and i64 %269, -1
  %271 = sext i32 %15 to i64
  %272 = and i64 %271, 1120978384160178165
  %273 = xor i64 %271, -1
  %274 = or i64 -1120978384160178166, %273
  %275 = xor i64 %274, -1
  %276 = and i64 %275, -1
  %277 = xor i64 %276, %264
  %278 = xor i64 %277, 4251272080836908393
  %279 = xor i64 %278, %272
  %280 = xor i64 %279, %266
  %281 = xor i64 %280, %270
  %282 = xor i64 %281, %261
  %283 = sext i32 %52 to i64
  %284 = and i64 %283, -4655430239683668020
  %285 = xor i64 %283, -1
  %286 = xor i64 -4655430239683668020, %285
  %287 = and i64 %286, -4655430239683668020
  %288 = sext i8 %88 to i64
  %289 = or i64 %288, 9210407590778355080
  %290 = xor i64 %288, -1
  %291 = and i64 9210407590778355080, %290
  %292 = add i64 %291, %288
  %293 = xor i64 -5758386757534476878, %284
  %294 = xor i64 %293, %292
  %295 = xor i64 %294, %287
  %296 = xor i64 %295, %289
  %297 = mul i64 %282, %296
  %298 = trunc i64 %297 to i8
  %299 = srem i8 %259, %298
  %300 = icmp eq i8 %299, 0
  %301 = or i1 %257, %300
  %302 = select i1 %301, i32 984876139, i32 984876136
  %303 = xor i32 %302, 3
  store i32 %303, i32* %0, align 4
  %304 = call i8** @bf14701068836225390076(i32* %0)
  %305 = load i8*, i8** %304, align 8
  indirectbr i8* %305, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.19([51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable110712339244340611, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.19, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable110712339244340611, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.19, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable110712339244340611, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.19, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11542178627540477363, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i32, i32*)* @main.extracted.19.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf13929252136177070272(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = sub i32 29, 29
  %14 = sub i32 25, 19
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 36
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %6, align 8
  %18 = load i8, i8* %17, align 1
  %19 = mul i8 %18, 2
  %20 = mul i8 %18, 2
  %21 = add i64 %8, -4495661449455803074
  %22 = and i64 -4495661449455803074, %8
  %23 = or i64 -4495661449455803074, %8
  %24 = add i64 %22, %23
  %25 = and i64 %5, -882203893718620022
  %26 = xor i64 %5, -1
  %27 = xor i64 -882203893718620022, %26
  %28 = and i64 %27, -882203893718620022
  %29 = xor i64 %21, %25
  %30 = xor i64 %29, %24
  %31 = xor i64 %30, 3335978660816898759
  %32 = xor i64 %31, %28
  %33 = or i64 %3, 2321234352707229322
  %34 = and i64 2321234352707229322, %3
  %35 = xor i64 2321234352707229322, %3
  %36 = or i64 %34, %35
  %37 = or i64 %1, 631519845545493245
  %38 = and i64 631519845545493245, %1
  %39 = xor i64 631519845545493245, %1
  %40 = or i64 %38, %39
  %41 = and i64 %5, 8174944620617440284
  %42 = xor i64 %5, -1
  %43 = or i64 -8174944620617440285, %42
  %44 = xor i64 %43, -1
  %45 = and i64 %44, -1
  %46 = xor i64 %37, %36
  %47 = xor i64 %46, %45
  %48 = xor i64 %47, %41
  %49 = xor i64 %48, 3074772311546703342
  %50 = xor i64 %49, %33
  %51 = xor i64 %50, %40
  %52 = mul i64 %32, %51
  %53 = trunc i64 %52 to i8
  %54 = add i8 %53, %20
  %55 = mul i8 %19, %54
  %56 = srem i8 %55, 4
  %57 = or i64 %5, -6837947499562687912
  %58 = xor i64 %5, -1
  %59 = and i64 -6837947499562687912, %58
  %60 = add i64 %59, %5
  %61 = and i64 %5, 7966552655068351354
  %62 = or i64 -7966552655068351355, %5
  %63 = sub i64 %62, -7966552655068351355
  %64 = xor i64 %63, %61
  %65 = xor i64 %64, %57
  %66 = xor i64 %65, 1473597245603963509
  %67 = xor i64 %66, %60
  %68 = add i64 %8, 6908270398459443958
  %69 = sub i64 0, %8
  %70 = sub i64 6908270398459443958, %69
  %71 = or i64 %1, 3725061165066648288
  %72 = xor i64 %1, -1
  %73 = and i64 3725061165066648288, %72
  %74 = add i64 %73, %1
  %75 = or i64 %8, -2499022019552905084
  %76 = and i64 -2499022019552905084, %8
  %77 = xor i64 -2499022019552905084, %8
  %78 = or i64 %76, %77
  %79 = xor i64 %78, %75
  %80 = xor i64 %79, 0
  %81 = xor i64 %80, %71
  %82 = xor i64 %81, %70
  %83 = xor i64 %82, %74
  %84 = xor i64 %83, %68
  %85 = mul i64 %67, %84
  %86 = trunc i64 %85 to i8
  %87 = icmp eq i8 %56, %86
  %88 = mul i8 %18, %18
  %89 = mul i8 %88, %18
  %90 = and i8 %89, %18
  %91 = or i8 %89, %18
  %92 = add i8 %90, %91
  %93 = srem i8 %92, 2
  %94 = icmp eq i8 %93, 0
  %95 = xor i1 %94, true
  %96 = xor i1 %87, %95
  %97 = and i1 %96, %87
  %98 = select i1 %97, i32 984876136, i32 984876136
  %99 = xor i32 %98, -1
  %100 = and i32 %99, 0
  %101 = and i32 %98, -1
  %102 = or i32 %100, %101
  store i32 %102, i32* %0, align 4
  %103 = call i8** @bf13929252136177070272(i32* %0)
  %104 = load i8*, i8** %103, align 8
  indirectbr i8* %104, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %105 = call i8** @lk6494449342842820069(i64* %7)
  %106 = load i8*, i8** %105, align 8
  %107 = bitcast i8* %106 to void ([51 x i32]*, i32, i32*)*
  call void %107([51 x i32]* %lookupTable, i32 %16, i32* %dispatcher)
  %108 = load i8*, i8** %2, align 8
  %109 = load i8, i8* %108, align 1
  %110 = and i8 %109, 1
  %111 = icmp eq i8 %110, 0
  %112 = mul i8 %109, %109
  %113 = add i8 %112, %109
  %114 = mul i8 %113, 3
  %115 = srem i8 %114, 2
  %116 = icmp eq i8 %115, 0
  %117 = or i1 %111, %116
  %118 = select i1 %117, i32 984876136, i32 984876138
  %119 = sext i8 %20 to i64
  %120 = or i64 %119, 1854442559138500842
  %121 = xor i64 %119, -1
  %122 = and i64 %121, -6016400088958392948
  %123 = and i64 %119, 6016400088958392947
  %124 = or i64 %122, %123
  %125 = xor i64 -5387081064221985434, %124
  %126 = xor i64 %119, -1
  %127 = or i64 -1854442559138500843, %126
  %128 = xor i64 %127, -1
  %129 = and i64 %128, -1
  %130 = or i64 %125, %129
  %131 = add i64 %3, 4029772553611421960
  %132 = and i64 4029772553611421960, %3
  %133 = or i64 4029772553611421960, %3
  %134 = add i64 %132, %133
  %135 = or i64 %1, 5313224342808890113
  %136 = and i64 5313224342808890113, %1
  %137 = xor i64 5313224342808890113, %1
  %138 = or i64 %136, %137
  %139 = xor i64 %120, %138
  %140 = xor i64 %139, %135
  %141 = xor i64 %140, -2280769358119312051
  %142 = xor i64 %141, %134
  %143 = xor i64 %142, %130
  %144 = xor i64 %143, %131
  %145 = sext i8 %19 to i64
  %146 = and i64 %145, 8082201133196828995
  %147 = xor i64 %145, -1
  %148 = xor i64 8082201133196828995, %147
  %149 = and i64 %148, 8082201133196828995
  %150 = sext i8 %90 to i64
  %151 = and i64 %150, 9123049334588251121
  %152 = or i64 -9123049334588251122, %150
  %153 = sub i64 %152, -9123049334588251122
  %154 = xor i64 5316771809811113083, %153
  %155 = xor i64 %154, %149
  %156 = xor i64 %155, %146
  %157 = xor i64 %156, %151
  %158 = mul i64 %144, %157
  %159 = trunc i64 %158 to i32
  %160 = xor i32 %118, %159
  %161 = and i32 %160, 2
  %162 = and i32 %118, -3
  %163 = or i32 %161, %162
  store i32 %163, i32* %0, align 4
  %164 = call i8** @bf13929252136177070272(i32* %0)
  %165 = load i8*, i8** %164, align 8
  indirectbr i8* %165, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.20(i32* %.reg2mem70, i32* %.reg2mem72, i32* %.reg2mem96, i32* %.reg2mem100, i1* %.reg2mem74, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7151764222053429975, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.20, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7151764222053429975, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.20, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7151764222053429975, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.20, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7942542406399699170, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i1*, i32, i32*)* @main.extracted.20.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf11856947853498104389(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = add i64 96, 107
  %14 = add i32 29, -29
  store i32 %14, i32* %.reg2mem70, align 4
  %15 = or i64 %5, 3611903568740568779
  %16 = xor i64 %5, -1
  %17 = and i64 %16, 1100222764632592498
  %18 = and i64 %5, -1100222764632592499
  %19 = or i64 %17, %18
  %20 = xor i64 4423882761413467833, %19
  %21 = xor i64 %5, -1
  %22 = or i64 -3611903568740568780, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = or i64 %20, %24
  %26 = or i64 %3, 3840085201125315543
  %27 = and i64 3840085201125315543, %3
  %28 = xor i64 3840085201125315543, %3
  %29 = or i64 %27, %28
  %30 = xor i64 %25, -4506873619559011053
  %31 = xor i64 %30, %15
  %32 = xor i64 %31, %29
  %33 = xor i64 %32, %26
  %34 = and i64 %1, -6282546875498851046
  %35 = or i64 6282546875498851045, %1
  %36 = sub i64 %35, 6282546875498851045
  %37 = add i64 %8, -7970413483109425893
  %38 = and i64 -7970413483109425893, %8
  %39 = or i64 -7970413483109425893, %8
  %40 = add i64 %38, %39
  %41 = xor i64 %34, %37
  %42 = xor i64 %41, %40
  %43 = xor i64 %42, -2430630816840445263
  %44 = xor i64 %43, %36
  %45 = mul i64 %33, %44
  %46 = sdiv i64 54, %45
  %47 = sub i32 2104371469, 2104371463
  store i32 %47, i32* %.reg2mem72, align 4
  %.reload99 = load i32, i32* %.reg2mem96, align 4
  %48 = srem i32 %.reload99, 2
  %49 = icmp eq i32 %48, 0
  %.reload104 = load i32, i32* %.reg2mem100, align 4
  %50 = mul i32 %.reload104, 2
  %.reload105 = load i32, i32* %.reg2mem100, align 4
  %51 = mul i32 %.reload105, 2
  %52 = add i32 2, %51
  %53 = mul i32 %50, %52
  %54 = srem i32 %53, 4
  %55 = icmp eq i32 %54, 0
  %.reload106 = load i32, i32* %.reg2mem100, align 4
  %56 = mul i32 %.reload106, %.reload106
  %.reload107 = load i32, i32* %.reg2mem100, align 4
  %57 = mul i32 %56, %.reload107
  %.reload108 = load i32, i32* %.reg2mem100, align 4
  %58 = add i32 %57, -1848378515
  %59 = add i32 %58, %.reload108
  %60 = sub i32 %59, -1848378515
  %61 = srem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = and i1 %55, %62
  store i1 %63, i1* %.reg2mem74, align 1
  %64 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %67 = load i32, i32* %66, align 4
  %68 = srem i32 %65, %67
  %69 = load i8*, i8** %2, align 8
  %70 = load i8, i8* %69, align 1
  %71 = mul i8 %70, %70
  %72 = add i8 %71, %70
  %73 = mul i8 %72, 3
  %74 = srem i8 %73, 2
  %75 = icmp eq i8 %74, 0
  %76 = mul i8 %70, %70
  %77 = sub i8 0, %70
  %78 = sub i8 %76, %77
  %79 = srem i8 %78, 2
  %80 = icmp eq i8 %79, 0
  %81 = and i1 %75, %80
  %82 = add i64 %5, 6473367336418217199
  %83 = add i64 6101673303424210001, %5
  %84 = add i64 %83, 371694032994007198
  %85 = and i64 %1, 1104569382975820799
  %86 = xor i64 %1, -1
  %87 = or i64 -1104569382975820800, %86
  %88 = xor i64 %87, -1
  %89 = and i64 %88, -1
  %90 = or i64 %1, 7283018635800656874
  %91 = and i64 7283018635800656874, %1
  %92 = xor i64 7283018635800656874, %1
  %93 = or i64 %91, %92
  %94 = xor i64 7242170665819143599, %84
  %95 = xor i64 %94, %90
  %96 = xor i64 %95, %93
  %97 = xor i64 %96, %89
  %98 = xor i64 %97, %82
  %99 = xor i64 %98, %85
  %100 = add i64 %1, -4690248314038049409
  %101 = add i64 -1006487016035426034, %1
  %102 = add i64 %101, -3683761298002623375
  %103 = add i64 %8, 2819427963197871414
  %104 = xor i64 2819427963197871414, %8
  %105 = and i64 2819427963197871414, %8
  %106 = mul i64 2, %105
  %107 = add i64 %104, %106
  %108 = xor i64 %103, %102
  %109 = xor i64 %108, %100
  %110 = xor i64 %109, -7724915365952720891
  %111 = xor i64 %110, %107
  %112 = mul i64 %99, %111
  %113 = trunc i64 %112 to i32
  %114 = select i1 %81, i32 984876139, i32 %113
  %115 = xor i32 %114, -1
  %116 = and i32 %115, 1963926388
  %117 = and i32 %114, -1963926389
  %118 = or i32 %116, %117
  %119 = xor i32 %118, 1963926388
  store i32 %119, i32* %0, align 4
  %120 = call i8** @bf11856947853498104389(i32* %0)
  %121 = load i8*, i8** %120, align 8
  indirectbr i8* %121, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %122 = call i8** @lk1932705876204994384(i64* %7)
  %123 = load i8*, i8** %122, align 8
  %124 = bitcast i8* %123 to void ([51 x i32]*, i1*, i32, i32*)*
  call void %124([51 x i32]* %lookupTable, i1* %.reg2mem74, i32 %68, i32* %dispatcher)
  %125 = load i8*, i8** %2, align 8
  %126 = load i8, i8* %125, align 1
  %127 = and i8 %126, 1
  %128 = icmp eq i8 %127, 1
  %129 = mul i8 %126, %126
  %130 = add i8 %129, %126
  %131 = srem i8 %130, 2
  %132 = icmp eq i8 %131, 0
  %133 = xor i1 %128, true
  %134 = sext i32 %.reload106 to i64
  %135 = or i64 %134, -4802370253222037221
  %136 = and i64 -4802370253222037221, %134
  %137 = xor i64 -4802370253222037221, %134
  %138 = or i64 %136, %137
  %139 = sext i32 %47 to i64
  %140 = and i64 %139, 3560944958014355791
  %141 = or i64 -3560944958014355792, %139
  %142 = sub i64 %141, -3560944958014355792
  %143 = add i64 %5, 4859894392233645194
  %144 = sub i64 0, %5
  %145 = sub i64 4859894392233645194, %144
  %146 = xor i64 %143, %142
  %147 = xor i64 %146, %138
  %148 = xor i64 %147, %145
  %149 = xor i64 %148, %135
  %150 = xor i64 %149, %140
  %151 = xor i64 %150, -5373292606766247947
  %152 = sext i32 %50 to i64
  %153 = add i64 %152, 6794764499892695772
  %154 = add i64 6159030447353682695, %152
  %155 = sub i64 %154, -635734052539013077
  %156 = sext i32 %.reload108 to i64
  %157 = add i64 %156, -1193055253939145576
  %158 = add i64 -1019773090629970837, %156
  %159 = add i64 %158, -173282163309174739
  %160 = sext i32 %50 to i64
  %161 = and i64 %160, -8258268106953633349
  %162 = or i64 8258268106953633348, %160
  %163 = sub i64 %162, 8258268106953633348
  %164 = xor i64 %159, %161
  %165 = xor i64 %164, %163
  %166 = xor i64 %165, %153
  %167 = xor i64 %166, %155
  %168 = xor i64 %167, 3387004998780314717
  %169 = xor i64 %168, %157
  %170 = mul i64 %151, %169
  %171 = trunc i64 %170 to i1
  %172 = and i1 %133, %171
  %173 = sext i8 %78 to i64
  %174 = or i64 %173, -1054978871780448761
  %175 = xor i64 %173, -1
  %176 = and i64 -1054978871780448761, %175
  %177 = add i64 %176, %173
  %178 = sext i32 %.reload99 to i64
  %179 = or i64 %178, 2604987937794779941
  %180 = and i64 2604987937794779941, %178
  %181 = xor i64 2604987937794779941, %178
  %182 = or i64 %180, %181
  %183 = xor i64 %179, -3633517412621843255
  %184 = xor i64 %183, %174
  %185 = xor i64 %184, %177
  %186 = xor i64 %185, %182
  %187 = sext i32 %115 to i64
  %188 = add i64 %187, -5085816072475561753
  %189 = sub i64 0, %187
  %190 = add i64 5085816072475561753, %189
  %191 = sub i64 0, %190
  %192 = sext i32 %116 to i64
  %193 = or i64 %192, 8699251448402461039
  %194 = and i64 8699251448402461039, %192
  %195 = xor i64 8699251448402461039, %192
  %196 = or i64 %194, %195
  %197 = xor i64 %188, %193
  %198 = xor i64 %197, 0
  %199 = xor i64 %198, %191
  %200 = xor i64 %199, %196
  %201 = mul i64 %186, %200
  %202 = trunc i64 %201 to i1
  %203 = and i1 %128, %202
  %204 = or i1 %172, %203
  %205 = sext i32 %53 to i64
  %206 = and i64 %205, 2031260222179815349
  %207 = xor i64 %205, -1
  %208 = xor i64 2031260222179815349, %207
  %209 = and i64 %208, 2031260222179815349
  %210 = sext i8 %71 to i64
  %211 = or i64 %210, -8672049789448529750
  %212 = and i64 -8672049789448529750, %210
  %213 = xor i64 -8672049789448529750, %210
  %214 = or i64 %212, %213
  %215 = xor i64 %214, %211
  %216 = xor i64 %215, %206
  %217 = xor i64 %216, -6891169884320043621
  %218 = xor i64 %217, %209
  %219 = sext i8 %79 to i64
  %220 = or i64 %219, 3849429387434792204
  %221 = xor i64 %219, -1
  %222 = and i64 3849429387434792204, %221
  %223 = add i64 %222, %219
  %224 = sext i8 %76 to i64
  %225 = add i64 %224, -1995174865510857309
  %226 = add i64 4937106069621189643, %224
  %227 = add i64 %226, -6932280935132046952
  %228 = sext i32 %.reload106 to i64
  %229 = add i64 %228, -7359158971400240699
  %230 = and i64 -7359158971400240699, %228
  %231 = or i64 -7359158971400240699, %228
  %232 = add i64 %230, %231
  %233 = xor i64 %225, %223
  %234 = xor i64 %233, -7510034381856788333
  %235 = xor i64 %234, %220
  %236 = xor i64 %235, %229
  %237 = xor i64 %236, %227
  %238 = xor i64 %237, %232
  %239 = mul i64 %218, %238
  %240 = trunc i64 %239 to i1
  %241 = xor i1 %132, %240
  %242 = and i1 %241, true
  %243 = and i1 %132, false
  %244 = or i1 %242, %243
  %245 = xor i1 %204, %244
  %246 = xor i1 %128, true
  %247 = xor i1 %132, true
  %248 = or i1 %246, %247
  %249 = xor i1 %248, true
  %250 = and i1 %249, true
  %251 = or i1 %245, %250
  %252 = select i1 %251, i32 984876136, i32 984876138
  %253 = xor i32 %252, -755369998
  %254 = xor i32 %253, -755370000
  store i32 %254, i32* %0, align 4
  %255 = call i8** @bf11856947853498104389(i32* %0)
  %256 = load i8*, i8** %255, align 8
  indirectbr i8* %256, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.21(i32* %.reg2mem123, i32* %.reg2mem77, i32* %.reg2mem34, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12568258043102494611, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.21, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12568258043102494611, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.21, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12568258043102494611, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.21, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2124429793559527863, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i32, i1, i32*)* @main.extracted.21.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf8839532275006299043(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload124 = load i32, i32* %.reg2mem123, align 4
  store i32 %.reload124, i32* %.reg2mem77, align 4
  %.reload39 = load i32, i32* %.reg2mem34, align 4
  %13 = srem i32 %.reload39, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %6, align 8
  %18 = load i8, i8* %17, align 1
  %19 = and i8 %18, 1
  %20 = icmp eq i8 %19, 1
  %21 = mul i8 %18, %18
  %22 = xor i8 %21, %18
  %23 = and i8 %21, %18
  %24 = mul i8 2, %23
  %25 = add i8 %22, %24
  %26 = srem i8 %25, 2
  %27 = icmp eq i8 %26, 0
  %28 = xor i1 %27, true
  %29 = and i1 %20, %28
  %30 = add i1 %29, %27
  %31 = select i1 %30, i32 984876136, i32 984876138
  %32 = xor i32 %31, -1
  %33 = add i64 %3, 416474860005061830
  %34 = sub i64 0, %3
  %35 = sub i64 416474860005061830, %34
  %36 = or i64 %5, 2695777497423912139
  %37 = xor i64 %5, -1
  %38 = and i64 %37, 5321120529887971375
  %39 = and i64 %5, -5321120529887971376
  %40 = or i64 %38, %39
  %41 = xor i64 7832104673043764452, %40
  %42 = xor i64 %5, -1
  %43 = or i64 -2695777497423912140, %42
  %44 = xor i64 %43, -1
  %45 = and i64 %44, -1
  %46 = or i64 %41, %45
  %47 = add i64 %8, 7727541567809545708
  %48 = add i64 -5677477021717063602, %8
  %49 = add i64 %48, -5041725484182942306
  %50 = xor i64 %47, %46
  %51 = xor i64 %50, -954945152954912005
  %52 = xor i64 %51, %33
  %53 = xor i64 %52, %49
  %54 = xor i64 %53, %36
  %55 = xor i64 %54, %35
  %56 = or i64 %8, 3754902220634584671
  %57 = xor i64 %8, -1
  %58 = and i64 %57, -460508848293649933
  %59 = and i64 %8, 460508848293649932
  %60 = or i64 %58, %59
  %61 = xor i64 -3636685249582753876, %60
  %62 = xor i64 %8, -1
  %63 = or i64 -3754902220634584672, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = or i64 %61, %65
  %67 = add i64 %1, 6614844857929554220
  %68 = sub i64 0, %1
  %69 = add i64 -6614844857929554220, %68
  %70 = sub i64 0, %69
  %71 = xor i64 %56, -4013132061257568298
  %72 = xor i64 %71, %67
  %73 = xor i64 %72, %70
  %74 = xor i64 %73, %66
  %75 = mul i64 %55, %74
  %76 = trunc i64 %75 to i32
  %77 = and i32 %32, %76
  %78 = and i32 %31, 1345260845
  %79 = or i32 %77, %78
  %80 = xor i32 %79, -1345260848
  store i32 %80, i32* %0, align 4
  %81 = call i8** @bf8839532275006299043(i32* %0)
  %82 = load i8*, i8** %81, align 8
  indirectbr i8* %82, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %83 = call i8** @lk4227238758197037501(i64* %7)
  %84 = load i8*, i8** %83, align 8
  %85 = bitcast i8* %84 to void ([51 x i32]*, i32, i1, i32*)*
  call void %85([51 x i32]* %lookupTable, i32 %16, i1 %14, i32* %dispatcher)
  %86 = load i8*, i8** %4, align 8
  %87 = load i8, i8* %86, align 1
  %88 = mul i8 %87, 2
  %89 = mul i8 %87, 2
  %90 = sext i32 %31 to i64
  %91 = add i64 %90, 7180249339817893701
  %92 = sub i64 0, %90
  %93 = add i64 -7180249339817893701, %92
  %94 = sub i64 0, %93
  %95 = or i64 %5, 9089012977252288547
  %96 = xor i64 %5, -1
  %97 = and i64 %96, -2238623973862067235
  %98 = and i64 %5, 2238623973862067234
  %99 = or i64 %97, %98
  %100 = xor i64 -7004110625218561026, %99
  %101 = xor i64 %5, -1
  %102 = or i64 -9089012977252288548, %101
  %103 = xor i64 %102, -1
  %104 = and i64 %103, -1
  %105 = or i64 %100, %104
  %106 = sext i8 %22 to i64
  %107 = add i64 %106, 3910277029449757183
  %108 = add i64 567005996324939759, %106
  %109 = sub i64 %108, -3343271033124817424
  %110 = xor i64 %91, %107
  %111 = xor i64 %110, 3201094709068378689
  %112 = xor i64 %111, %95
  %113 = xor i64 %112, %94
  %114 = xor i64 %113, %105
  %115 = xor i64 %114, %109
  %116 = sext i8 %21 to i64
  %117 = or i64 %116, -4160863895546654337
  %118 = and i64 -4160863895546654337, %116
  %119 = xor i64 -4160863895546654337, %116
  %120 = or i64 %118, %119
  %121 = sext i8 %18 to i64
  %122 = add i64 %121, 3493045939617716050
  %123 = xor i64 3493045939617716050, %121
  %124 = and i64 3493045939617716050, %121
  %125 = mul i64 2, %124
  %126 = add i64 %123, %125
  %127 = xor i64 %117, %126
  %128 = xor i64 %127, %122
  %129 = xor i64 %128, %120
  %130 = xor i64 %129, 4025567116376914818
  %131 = mul i64 %115, %130
  %132 = trunc i64 %131 to i8
  %133 = xor i8 %132, %89
  %134 = and i8 2, %89
  %135 = mul i8 2, %134
  %136 = add i8 %133, %135
  %137 = mul i8 %88, %136
  %138 = srem i8 %137, 4
  %139 = icmp eq i8 %138, 0
  %140 = mul i8 %87, %87
  %141 = add i8 %140, %87
  %142 = srem i8 %141, 2
  %143 = icmp eq i8 %142, 0
  %144 = or i1 %139, %143
  %145 = select i1 %144, i32 984876138, i32 984876136
  %146 = sext i32 %.reload39 to i64
  %147 = or i64 %146, 5285184364382664946
  %148 = xor i64 %146, -1
  %149 = and i64 5285184364382664946, %148
  %150 = add i64 %149, %146
  %151 = sext i32 %78 to i64
  %152 = add i64 %151, -1939835290251675119
  %153 = add i64 -5262191871097918787, %151
  %154 = sub i64 %153, -3322356580846243668
  %155 = sext i32 %80 to i64
  %156 = add i64 %155, -8711406588721296140
  %157 = sub i64 0, %155
  %158 = sub i64 -8711406588721296140, %157
  %159 = xor i64 1240343008095568501, %154
  %160 = xor i64 %159, %156
  %161 = xor i64 %160, %147
  %162 = xor i64 %161, %158
  %163 = xor i64 %162, %150
  %164 = xor i64 %163, %152
  %165 = sext i32 %.reload39 to i64
  %166 = add i64 %165, 4365954159064927549
  %167 = sub i64 0, %165
  %168 = add i64 -4365954159064927549, %167
  %169 = sub i64 0, %168
  %170 = sext i8 %19 to i64
  %171 = or i64 %170, -4037776621833279739
  %172 = xor i64 %170, -1
  %173 = and i64 %172, -2868249868374593762
  %174 = and i64 %170, 2868249868374593761
  %175 = or i64 %173, %174
  %176 = xor i64 2289801679106246683, %175
  %177 = xor i64 %170, -1
  %178 = or i64 4037776621833279738, %177
  %179 = xor i64 %178, -1
  %180 = and i64 %179, -1
  %181 = or i64 %176, %180
  %182 = sext i32 %79 to i64
  %183 = add i64 %182, -1240736947456144310
  %184 = sub i64 0, %182
  %185 = add i64 1240736947456144310, %184
  %186 = sub i64 0, %185
  %187 = xor i64 %171, %166
  %188 = xor i64 %187, 3224443882001824698
  %189 = xor i64 %188, %186
  %190 = xor i64 %189, %181
  %191 = xor i64 %190, %169
  %192 = xor i64 %191, %183
  %193 = mul i64 %164, %192
  %194 = trunc i64 %193 to i32
  %195 = xor i32 %145, %194
  store i32 %195, i32* %0, align 4
  %196 = call i8** @bf8839532275006299043(i32* %0)
  %197 = load i8*, i8** %196, align 8
  indirectbr i8* %197, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.22(i8** %.reg2mem12, i8** %.reg2mem8, i8** %.reg2mem4, i8** %.reg2mem, i32* %.reg2mem34, i32* %.reg2mem77, i1* %.reg2mem83, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10214129599215908645, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.22, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10214129599215908645, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.22, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10214129599215908645, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.22, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12197573581419751257, i32 0, i64 %8
  store i8* bitcast (void (i32*, i32, i1*, [51 x i32]*, i32*)* @main.extracted.22.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf4375101210048835390(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = sdiv i64 121, 62
  %.reload17 = load i8*, i8** %.reg2mem12, align 8
  call void @llvm.lifetime.end.p0i8(i64 1760, i8* nonnull %.reload17) #12
  %14 = add i64 30, 13
  %.reload10 = load i8*, i8** %.reg2mem8, align 8
  call void @llvm.lifetime.end.p0i8(i64 7040, i8* nonnull %.reload10) #12
  %15 = add i64 9, -7
  %.reload6 = load i8*, i8** %.reg2mem4, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %.reload6) #12
  %16 = add i64 %8, -4853652140594351315
  %17 = xor i64 -4853652140594351315, %8
  %18 = and i64 -4853652140594351315, %8
  %19 = mul i64 2, %18
  %20 = add i64 %17, %19
  %21 = add i64 %1, 8022007587240229935
  %22 = add i64 -1549151713871632522, %1
  %23 = add i64 %22, -8875584772597689159
  %24 = xor i64 %21, %16
  %25 = xor i64 %24, %23
  %26 = xor i64 %25, 878456526273086051
  %27 = xor i64 %26, %20
  %28 = or i64 %3, -9034113262281066632
  %29 = xor i64 %3, -1
  %30 = and i64 -9034113262281066632, %29
  %31 = add i64 %30, %3
  %32 = add i64 %5, 1519534852642975615
  %33 = sub i64 0, %5
  %34 = add i64 -1519534852642975615, %33
  %35 = sub i64 0, %34
  %36 = add i64 %3, -1534045585316083993
  %37 = add i64 9163595166349863178, %3
  %38 = sub i64 %37, -7749103322043604445
  %39 = xor i64 %38, 2162200736409612201
  %40 = xor i64 %39, %31
  %41 = xor i64 %40, %28
  %42 = xor i64 %41, %35
  %43 = xor i64 %42, %32
  %44 = xor i64 %43, %36
  %45 = mul i64 %27, %44
  %46 = sdiv i64 27, %45
  %.reload2 = load i8*, i8** %.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %.reload2) #12
  %47 = mul i64 123, 11
  %48 = sub i64 7, 60
  %.reload38 = load i32, i32* %.reg2mem34, align 4
  %49 = srem i32 %.reload38, 2
  %50 = icmp eq i32 %49, 0
  %.reload82 = load i32, i32* %.reg2mem77, align 4
  %51 = mul i32 %.reload82, %.reload82
  %52 = load i8*, i8** %2, align 8
  %53 = load i8, i8* %52, align 1
  %54 = and i64 %5, 7128525841599243334
  %55 = xor i64 %5, -1
  %56 = xor i64 7128525841599243334, %55
  %57 = and i64 %56, 7128525841599243334
  %58 = add i64 %3, -5705514485123026353
  %59 = xor i64 -5705514485123026353, %3
  %60 = and i64 -5705514485123026353, %3
  %61 = mul i64 2, %60
  %62 = add i64 %59, %61
  %63 = xor i64 %57, %54
  %64 = xor i64 %63, %62
  %65 = xor i64 %64, -6180895233144621905
  %66 = xor i64 %65, %58
  %67 = or i64 %3, 6467152933342556981
  %68 = xor i64 %3, -1
  %69 = and i64 %68, -5331073892305223704
  %70 = and i64 %3, 5331073892305223703
  %71 = or i64 %69, %70
  %72 = xor i64 -1172121321106338595, %71
  %73 = xor i64 %3, -1
  %74 = or i64 -6467152933342556982, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = or i64 %72, %76
  %78 = add i64 %3, 6211414201687451703
  %79 = xor i64 6211414201687451703, %3
  %80 = and i64 6211414201687451703, %3
  %81 = mul i64 2, %80
  %82 = add i64 %79, %81
  %83 = add i64 %8, 3049856033021193619
  %84 = and i64 3049856033021193619, %8
  %85 = or i64 3049856033021193619, %8
  %86 = add i64 %84, %85
  %87 = xor i64 %67, %78
  %88 = xor i64 %87, %77
  %89 = xor i64 %88, %83
  %90 = xor i64 %89, 215684072060314191
  %91 = xor i64 %90, %82
  %92 = xor i64 %91, %86
  %93 = mul i64 %66, %92
  %94 = trunc i64 %93 to i8
  %95 = and i8 %53, %94
  %96 = icmp eq i8 %95, 1
  %97 = mul i8 %53, %53
  %98 = add i8 %97, %53
  %99 = srem i8 %98, 2
  %100 = icmp eq i8 %99, 0
  %101 = or i1 %96, %100
  %102 = select i1 %101, i32 984876138, i32 984876138
  %103 = or i32 %102, 0
  %104 = and i32 %102, 0
  %105 = sub i32 %103, %104
  store i32 %105, i32* %0, align 4
  %106 = call i8** @bf4375101210048835390(i32* %0)
  %107 = load i8*, i8** %106, align 8
  indirectbr i8* %107, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %108 = call i8** @lk9085697242675703551(i64* %7)
  %109 = load i8*, i8** %108, align 8
  %110 = bitcast i8* %109 to void (i32*, i32, i1*, [51 x i32]*, i32*)*
  call void %110(i32* %.reg2mem77, i32 %51, i1* %.reg2mem83, [51 x i32]* %lookupTable, i32* %dispatcher)
  %111 = load i8*, i8** %6, align 8
  %112 = load i8, i8* %111, align 1
  %113 = mul i8 %112, %112
  %114 = add i8 %113, %112
  %115 = mul i8 %114, 3
  %116 = srem i8 %115, 2
  %117 = icmp eq i8 %116, 0
  %118 = mul i8 %112, %112
  %119 = add i8 %118, %112
  %120 = srem i8 %119, 2
  %121 = icmp eq i8 %120, 0
  %122 = xor i1 %117, true
  %123 = or i1 %122, %121
  %124 = xor i1 %117, true
  %125 = sub i1 %123, %124
  %126 = select i1 %125, i32 984876136, i32 984876136
  %127 = xor i32 %126, 0
  store i32 %127, i32* %0, align 4
  %128 = call i8** @bf4375101210048835390(i32* %0)
  %129 = load i8*, i8** %128, align 8
  indirectbr i8* %129, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.23([51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3216832321708071451, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.23, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3216832321708071451, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.23, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3216832321708071451, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.23, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6678268903096122989, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i32, i32*)* @main.extracted.23.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf7541961726349755274(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 15
  %14 = load i32, i32* %13, align 4
  %15 = load i8*, i8** %2, align 8
  %16 = load i8, i8* %15, align 1
  %17 = and i8 %16, 1
  %18 = icmp eq i8 %17, 0
  %19 = mul i8 %16, %16
  %20 = add i8 %19, %16
  %21 = mul i8 %20, 3
  %22 = srem i8 %21, 2
  %23 = icmp eq i8 %22, 0
  %24 = or i1 %18, %23
  %25 = select i1 %24, i32 984876136, i32 984876139
  %26 = xor i32 %25, 3
  store i32 %26, i32* %0, align 4
  %27 = call i8** @bf7541961726349755274(i32* %0)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %29 = call i8** @lk5239088532693830486(i64* %7)
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast i8* %30 to void ([51 x i32]*, i32, i32*)*
  call void %31([51 x i32]* %lookupTable, i32 %14, i32* %dispatcher)
  %32 = load i8*, i8** %6, align 8
  %33 = load i8, i8* %32, align 1
  %34 = xor i8 %33, -2
  %35 = and i8 %34, %33
  %36 = and i64 %8, 8205442983605702008
  %37 = or i64 -8205442983605702009, %8
  %38 = sub i64 %37, -8205442983605702009
  %39 = add i64 %8, -1665806193243848218
  %40 = xor i64 -1665806193243848218, %8
  %41 = and i64 -1665806193243848218, %8
  %42 = mul i64 2, %41
  %43 = add i64 %40, %42
  %44 = xor i64 %39, 8407091316400054799
  %45 = xor i64 %44, %38
  %46 = xor i64 %45, %36
  %47 = xor i64 %46, %43
  %48 = sext i32 %26 to i64
  %49 = add i64 %48, -479894068123920661
  %50 = sub i64 0, %48
  %51 = sub i64 -479894068123920661, %50
  %52 = sext i8 %22 to i64
  %53 = or i64 %52, -8578807942107065873
  %54 = and i64 -8578807942107065873, %52
  %55 = xor i64 -8578807942107065873, %52
  %56 = or i64 %54, %55
  %57 = xor i64 %51, 0
  %58 = xor i64 %57, %49
  %59 = xor i64 %58, %53
  %60 = xor i64 %59, %56
  %61 = mul i64 %47, %60
  %62 = trunc i64 %61 to i8
  %63 = icmp eq i8 %35, %62
  %64 = mul i8 %33, %33
  %65 = add i8 %64, %33
  %66 = mul i8 %65, 3
  %67 = srem i8 %66, 2
  %68 = icmp eq i8 %67, 0
  %69 = or i1 %63, %68
  %70 = select i1 %69, i32 984876138, i32 984876136
  %71 = xor i32 %70, 2
  store i32 %71, i32* %0, align 4
  %72 = call i8** @bf7541961726349755274(i32* %0)
  %73 = load i8*, i8** %72, align 8
  indirectbr i8* %73, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.24(i8** %.reg2mem12, i8** %.reg2mem8, i8** %.reg2mem4, i8** %.reg2mem, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4045253587417335053, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.24, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4045253587417335053, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.24, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4045253587417335053, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.24, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11614317241804279208, i32 0, i64 %8
  store i8* bitcast (void (i8*, i8**, [51 x i32]*, i32*)* @main.extracted.24.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf17124241044688097502(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload16 = load i8*, i8** %.reg2mem12, align 8
  call void @llvm.lifetime.end.p0i8(i64 1760, i8* nonnull %.reload16) #12
  %.reload9 = load i8*, i8** %.reg2mem8, align 8
  call void @llvm.lifetime.end.p0i8(i64 7040, i8* nonnull %.reload9) #12
  %.reload5 = load i8*, i8** %.reg2mem4, align 8
  %13 = load i8*, i8** %4, align 8
  %14 = load i8, i8* %13, align 1
  %15 = mul i8 %14, 2
  %16 = mul i8 %14, 2
  %17 = add i8 2, %16
  %18 = mul i8 %15, %17
  %19 = srem i8 %18, 4
  %20 = icmp eq i8 %19, 0
  %21 = mul i8 %14, %14
  %22 = add i8 %21, %14
  %23 = srem i8 %22, 2
  %24 = icmp eq i8 %23, 0
  %25 = xor i1 %20, true
  %26 = and i1 %25, false
  %27 = and i1 %20, true
  %28 = or i1 %26, %27
  %29 = xor i1 %24, true
  %30 = and i1 %29, false
  %31 = or i64 %3, 530587378018523241
  %32 = xor i64 %3, -1
  %33 = and i64 530587378018523241, %32
  %34 = add i64 %33, %3
  %35 = add i64 %5, 4629271632965981407
  %36 = and i64 4629271632965981407, %5
  %37 = or i64 4629271632965981407, %5
  %38 = add i64 %36, %37
  %39 = xor i64 %31, %35
  %40 = xor i64 %39, %38
  %41 = xor i64 %40, 8569419101246171209
  %42 = xor i64 %41, %34
  %43 = and i64 %1, -9052631301654650479
  %44 = xor i64 %1, -1
  %45 = xor i64 -9052631301654650479, %44
  %46 = and i64 %45, -9052631301654650479
  %47 = or i64 %5, -5930519482454797970
  %48 = and i64 -5930519482454797970, %5
  %49 = xor i64 -5930519482454797970, %5
  %50 = or i64 %48, %49
  %51 = xor i64 %47, -506744599222760967
  %52 = xor i64 %51, %43
  %53 = xor i64 %52, %46
  %54 = xor i64 %53, %50
  %55 = mul i64 %42, %54
  %56 = trunc i64 %55 to i1
  %57 = and i1 %24, %56
  %58 = or i1 %30, %57
  %59 = xor i1 %28, %58
  %60 = xor i1 %20, true
  %61 = xor i1 %24, true
  %62 = or i1 %60, %61
  %63 = xor i1 %62, true
  %64 = or i64 %8, -3666155114429208964
  %65 = xor i64 %8, -1
  %66 = and i64 -3666155114429208964, %65
  %67 = add i64 %66, %8
  %68 = and i64 %3, 8963019769755422393
  %69 = xor i64 %3, -1
  %70 = or i64 -8963019769755422394, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = and i64 %8, 4357293563685626240
  %74 = xor i64 %8, -1
  %75 = xor i64 4357293563685626240, %74
  %76 = and i64 %75, 4357293563685626240
  %77 = xor i64 %72, -8145552694523380403
  %78 = xor i64 %77, %68
  %79 = xor i64 %78, %76
  %80 = xor i64 %79, %64
  %81 = xor i64 %80, %73
  %82 = xor i64 %81, %67
  %83 = and i64 %1, 4731814256958436094
  %84 = xor i64 %1, -1
  %85 = or i64 -4731814256958436095, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = or i64 %5, -2303883293484549868
  %89 = xor i64 %5, -1
  %90 = and i64 %89, 8493742190347488803
  %91 = and i64 %5, -8493742190347488804
  %92 = or i64 %90, %91
  %93 = xor i64 -7649043060377225417, %92
  %94 = xor i64 %5, -1
  %95 = or i64 2303883293484549867, %94
  %96 = xor i64 %95, -1
  %97 = and i64 %96, -1
  %98 = or i64 %93, %97
  %99 = and i64 %1, 3166467940246152049
  %100 = or i64 -3166467940246152050, %1
  %101 = sub i64 %100, -3166467940246152050
  %102 = xor i64 %99, %83
  %103 = xor i64 %102, %88
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, -7271071526592691323
  %106 = xor i64 %105, %101
  %107 = xor i64 %106, %87
  %108 = mul i64 %82, %107
  %109 = trunc i64 %108 to i1
  %110 = and i1 %63, %109
  %111 = or i1 %59, %110
  %112 = select i1 %111, i32 984876139, i32 984876136
  %113 = xor i32 %112, 3
  store i32 %113, i32* %0, align 4
  %114 = call i8** @bf17124241044688097502(i32* %0)
  %115 = load i8*, i8** %114, align 8
  indirectbr i8* %115, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %116 = call i8** @lk4462616265759468068(i64* %7)
  %117 = load i8*, i8** %116, align 8
  %118 = bitcast i8* %117 to void (i8*, i8**, [51 x i32]*, i32*)*
  call void %118(i8* %.reload5, i8** %.reg2mem, [51 x i32]* %lookupTable, i32* %dispatcher)
  %119 = load i8*, i8** %6, align 8
  %120 = load i8, i8* %119, align 1
  %121 = xor i8 %120, -2
  %122 = and i8 %121, %120
  %123 = icmp eq i8 %122, 0
  %124 = mul i8 %120, %120
  %125 = add i8 %124, %120
  %126 = mul i8 %125, 3
  %127 = srem i8 %126, 2
  %128 = sext i8 %17 to i64
  %129 = or i64 %128, -3952375155184509921
  %130 = xor i64 %128, -1
  %131 = and i64 %130, -7964248478476342871
  %132 = and i64 %128, 7964248478476342870
  %133 = or i64 %131, %132
  %134 = xor i64 6367836470591174070, %133
  %135 = xor i64 %128, -1
  %136 = or i64 3952375155184509920, %135
  %137 = xor i64 %136, -1
  %138 = and i64 %137, -1
  %139 = or i64 %134, %138
  %140 = sext i8 %16 to i64
  %141 = or i64 %140, -1157716493789903016
  %142 = xor i64 %140, -1
  %143 = and i64 -1157716493789903016, %142
  %144 = add i64 %143, %140
  %145 = xor i64 %139, %144
  %146 = xor i64 %145, %141
  %147 = xor i64 %146, 7431884117910512845
  %148 = xor i64 %147, %129
  %149 = sext i8 %14 to i64
  %150 = and i64 %149, -4456796465438077876
  %151 = xor i64 %149, -1
  %152 = xor i64 -4456796465438077876, %151
  %153 = and i64 %152, -4456796465438077876
  %154 = sext i8 %16 to i64
  %155 = and i64 %154, 2731021120690169148
  %156 = xor i64 %154, -1
  %157 = xor i64 2731021120690169148, %156
  %158 = and i64 %157, 2731021120690169148
  %159 = xor i64 %150, %153
  %160 = xor i64 %159, %158
  %161 = xor i64 %160, 0
  %162 = xor i64 %161, %155
  %163 = mul i64 %148, %162
  %164 = trunc i64 %163 to i8
  %165 = icmp eq i8 %127, %164
  %166 = xor i1 %123, true
  %167 = and i1 %166, false
  %168 = and i1 %123, true
  %169 = or i1 %167, %168
  %170 = xor i1 %165, true
  %171 = and i1 %170, false
  %172 = and i1 %165, true
  %173 = or i1 %171, %172
  %174 = xor i1 %169, %173
  %175 = xor i1 %123, true
  %176 = xor i1 %165, true
  %177 = or i1 %175, %176
  %178 = xor i1 %177, true
  %179 = sext i8 %19 to i64
  %180 = or i64 %179, 1640130154831491482
  %181 = xor i64 %179, -1
  %182 = and i64 1640130154831491482, %181
  %183 = add i64 %182, %179
  %184 = and i64 %8, 4147627800427458046
  %185 = xor i64 %8, -1
  %186 = xor i64 4147627800427458046, %185
  %187 = and i64 %186, 4147627800427458046
  %188 = sext i8 %22 to i64
  %189 = and i64 %188, 572836136259891298
  %190 = xor i64 %188, -1
  %191 = or i64 -572836136259891299, %190
  %192 = xor i64 %191, -1
  %193 = and i64 %192, -1
  %194 = xor i64 %187, %180
  %195 = xor i64 %194, %184
  %196 = xor i64 %195, %193
  %197 = xor i64 %196, -2968105719907671495
  %198 = xor i64 %197, %189
  %199 = xor i64 %198, %183
  %200 = sext i8 %19 to i64
  %201 = and i64 %200, -6531548004493746617
  %202 = or i64 6531548004493746616, %200
  %203 = sub i64 %202, 6531548004493746616
  %204 = or i64 %1, 5053548630134411298
  %205 = xor i64 %1, -1
  %206 = and i64 %205, -758448573587925060
  %207 = and i64 %1, 758448573587925059
  %208 = or i64 %206, %207
  %209 = xor i64 -5523457418124523618, %208
  %210 = xor i64 %1, -1
  %211 = or i64 -5053548630134411299, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = or i64 %209, %213
  %215 = sext i8 %22 to i64
  %216 = and i64 %215, -2709529164791206685
  %217 = or i64 2709529164791206684, %215
  %218 = sub i64 %217, 2709529164791206684
  %219 = xor i64 %216, %201
  %220 = xor i64 %219, %218
  %221 = xor i64 %220, %214
  %222 = xor i64 %221, %203
  %223 = xor i64 %222, 6893740563315305481
  %224 = xor i64 %223, %204
  %225 = mul i64 %199, %224
  %226 = trunc i64 %225 to i1
  %227 = and i1 %178, %226
  %228 = or i1 %174, %227
  %229 = select i1 %228, i32 984876139, i32 984876139
  %230 = xor i32 %229, 0
  store i32 %230, i32* %0, align 4
  %231 = call i8** @bf17124241044688097502(i32* %0)
  %232 = load i8*, i8** %231, align 8
  indirectbr i8* %232, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.25(i32* %.reg2mem20, i1* %.reg2mem89, i1* %.reg2mem109, i32* %.reg2mem54, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8013969641835849439, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.25, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8013969641835849439, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.25, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8013969641835849439, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.25, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5701602599771018107, i32 0, i64 %8
  store i8* bitcast (void (i1, i1*, i32*, [51 x i32]*, i32*)* @main.extracted.25.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf6667396463122897288(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload23 = load i32, i32* %.reg2mem20, align 4
  %13 = mul i32 %.reload23, %.reload23
  %.reload22 = load i32, i32* %.reg2mem20, align 4
  %14 = mul i32 %13, %.reload22
  %.reload21 = load i32, i32* %.reg2mem20, align 4
  %15 = add i32 %14, %.reload21
  %16 = srem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %.reload90 = load i1, i1* %.reg2mem89, align 1
  %18 = and i1 %.reload90, %17
  %19 = load i8*, i8** %2, align 8
  %20 = load i8, i8* %19, align 1
  %21 = mul i8 %20, 2
  %22 = mul i8 %20, 2
  %23 = xor i8 2, %22
  %24 = and i8 2, %22
  %25 = mul i8 2, %24
  %26 = add i8 %23, %25
  %27 = mul i8 %21, %26
  %28 = srem i8 %27, 4
  %29 = icmp eq i8 %28, 0
  %30 = mul i8 %20, %20
  %31 = mul i8 %30, %20
  %32 = add i8 %31, %20
  %33 = srem i8 %32, 2
  %34 = icmp eq i8 %33, 0
  %35 = and i1 %29, %34
  %36 = add i64 %1, -2041401062985762769
  %37 = add i64 -5736260696672959772, %1
  %38 = add i64 %37, 3694859633687197003
  %39 = and i64 %3, -7343199278139511120
  %40 = or i64 7343199278139511119, %3
  %41 = sub i64 %40, 7343199278139511119
  %42 = and i64 %5, -9220916009925072301
  %43 = or i64 9220916009925072300, %5
  %44 = sub i64 %43, 9220916009925072300
  %45 = xor i64 %39, %36
  %46 = xor i64 %45, %44
  %47 = xor i64 %46, %41
  %48 = xor i64 %47, %38
  %49 = xor i64 %48, 4669160620692960899
  %50 = xor i64 %49, %42
  %51 = and i64 %5, 340443795187731321
  %52 = xor i64 %5, -1
  %53 = or i64 -340443795187731322, %52
  %54 = xor i64 %53, -1
  %55 = and i64 %54, -1
  %56 = or i64 %5, 1341981470537267946
  %57 = xor i64 %5, -1
  %58 = and i64 1341981470537267946, %57
  %59 = add i64 %58, %5
  %60 = xor i64 %56, %51
  %61 = xor i64 %60, 7005173261792054734
  %62 = xor i64 %61, %59
  %63 = xor i64 %62, %55
  %64 = mul i64 %50, %63
  %65 = trunc i64 %64 to i32
  %66 = select i1 %35, i32 %65, i32 984876139
  %67 = xor i32 %66, 1
  store i32 %67, i32* %0, align 4
  %68 = call i8** @bf6667396463122897288(i32* %0)
  %69 = load i8*, i8** %68, align 8
  indirectbr i8* %69, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %70 = call i8** @lk2361039735857797459(i64* %7)
  %71 = load i8*, i8** %70, align 8
  %72 = bitcast i8* %71 to void (i1, i1*, i32*, [51 x i32]*, i32*)*
  call void %72(i1 %18, i1* %.reg2mem109, i32* %.reg2mem54, [51 x i32]* %lookupTable, i32* %dispatcher)
  %73 = load i8*, i8** %4, align 8
  %74 = load i8, i8* %73, align 1
  %75 = xor i8 %74, -2
  %76 = and i8 %75, %74
  %77 = icmp eq i8 %76, 0
  %78 = mul i8 %74, %74
  %79 = add i8 %78, %74
  %80 = mul i8 %79, 3
  %81 = sext i32 %16 to i64
  %82 = and i64 %81, 2497953565556220506
  %83 = or i64 -2497953565556220507, %81
  %84 = sub i64 %83, -2497953565556220507
  %85 = sext i8 %25 to i64
  %86 = and i64 %85, 1930923879136111269
  %87 = xor i64 %85, -1
  %88 = xor i64 1930923879136111269, %87
  %89 = and i64 %88, 1930923879136111269
  %90 = sext i8 %22 to i64
  %91 = add i64 %90, -7494217451519894943
  %92 = add i64 8502127030985128803, %90
  %93 = add i64 %92, 2450399591204527870
  %94 = xor i64 %84, %89
  %95 = xor i64 %94, %91
  %96 = xor i64 %95, %82
  %97 = xor i64 %96, %86
  %98 = xor i64 %97, %93
  %99 = xor i64 %98, 5032730328034727849
  %100 = sext i8 %30 to i64
  %101 = and i64 %100, 6668319039994133215
  %102 = or i64 -6668319039994133216, %100
  %103 = sub i64 %102, -6668319039994133216
  %104 = sext i8 %28 to i64
  %105 = add i64 %104, -2789153288108218401
  %106 = xor i64 -2789153288108218401, %104
  %107 = and i64 -2789153288108218401, %104
  %108 = mul i64 2, %107
  %109 = add i64 %106, %108
  %110 = xor i64 %105, %109
  %111 = xor i64 %110, %101
  %112 = xor i64 %111, -8724868477144237774
  %113 = xor i64 %112, %103
  %114 = mul i64 %99, %113
  %115 = trunc i64 %114 to i8
  %116 = srem i8 %80, %115
  %117 = icmp eq i8 %116, 0
  %118 = and i1 %77, %117
  %119 = xor i1 %77, %117
  %120 = or i1 %118, %119
  %121 = sext i32 %.reload22 to i64
  %122 = add i64 %121, -4141623374351922789
  %123 = sub i64 0, %121
  %124 = sub i64 -4141623374351922789, %123
  %125 = sext i8 %23 to i64
  %126 = and i64 %125, -4505045398355473647
  %127 = xor i64 %125, -1
  %128 = or i64 4505045398355473646, %127
  %129 = xor i64 %128, -1
  %130 = and i64 %129, -1
  %131 = sext i8 %30 to i64
  %132 = and i64 %131, -6883119783816888164
  %133 = or i64 6883119783816888163, %131
  %134 = sub i64 %133, 6883119783816888163
  %135 = xor i64 -610864218500456565, %134
  %136 = xor i64 %135, %126
  %137 = xor i64 %136, %124
  %138 = xor i64 %137, %122
  %139 = xor i64 %138, %130
  %140 = xor i64 %139, %132
  %141 = sext i8 %27 to i64
  %142 = add i64 %141, -7489166373020882394
  %143 = add i64 -4720253402953805822, %141
  %144 = add i64 %143, -2768912970067076572
  %145 = and i64 %5, 425481879845421262
  %146 = xor i64 %5, -1
  %147 = xor i64 425481879845421262, %146
  %148 = and i64 %147, 425481879845421262
  %149 = xor i64 %144, %148
  %150 = xor i64 %149, 5637736897866381950
  %151 = xor i64 %150, %142
  %152 = xor i64 %151, %145
  %153 = mul i64 %140, %152
  %154 = trunc i64 %153 to i32
  %155 = select i1 %120, i32 %154, i32 984876138
  %156 = xor i32 %155, 0
  store i32 %156, i32* %0, align 4
  %157 = call i8** @bf6667396463122897288(i32* %0)
  %158 = load i8*, i8** %157, align 8
  indirectbr i8* %158, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.26([51 x i32]* %lookupTable, i1* %.reg2mem111, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9583133371259958317, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.26, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9583133371259958317, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.26, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9583133371259958317, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.26, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12279660055629207190, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i1*, i32*)* @main.extracted.26.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf861539622850162277(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = add i64 87, 28
  %14 = add i64 50, 110
  %15 = or i64 %1, 5531431385965993609
  %16 = xor i64 %1, -1
  %17 = and i64 5531431385965993609, %16
  %18 = add i64 %17, %1
  %19 = or i64 %1, -243447102139822092
  %20 = and i64 -243447102139822092, %1
  %21 = xor i64 -243447102139822092, %1
  %22 = or i64 %20, %21
  %23 = or i64 %3, 6359160564916626862
  %24 = and i64 6359160564916626862, %3
  %25 = xor i64 6359160564916626862, %3
  %26 = or i64 %24, %25
  %27 = xor i64 -4929140475125134661, %26
  %28 = xor i64 %27, %23
  %29 = xor i64 %28, %19
  %30 = xor i64 %29, %15
  %31 = xor i64 %30, %22
  %32 = xor i64 %31, %18
  %33 = or i64 %1, 678032982246465417
  %34 = xor i64 %1, -1
  %35 = and i64 678032982246465417, %34
  %36 = add i64 %35, %1
  %37 = or i64 %3, 6857765196288958073
  %38 = xor i64 %3, -1
  %39 = and i64 6857765196288958073, %38
  %40 = add i64 %39, %3
  %41 = and i64 %8, 2328213618327570820
  %42 = xor i64 %8, -1
  %43 = or i64 -2328213618327570821, %42
  %44 = xor i64 %43, -1
  %45 = and i64 %44, -1
  %46 = xor i64 %36, 5594217638363319737
  %47 = xor i64 %46, %40
  %48 = xor i64 %47, %33
  %49 = xor i64 %48, %45
  %50 = xor i64 %49, %41
  %51 = xor i64 %50, %37
  %52 = mul i64 %32, %51
  %53 = sdiv i64 23, %52
  %54 = or i64 %8, -3319880365411737517
  %55 = xor i64 %8, -1
  %56 = and i64 -3319880365411737517, %55
  %57 = add i64 %56, %8
  %58 = and i64 %1, -7500810629804675877
  %59 = or i64 7500810629804675876, %1
  %60 = sub i64 %59, 7500810629804675876
  %61 = or i64 %3, -5820769899103851780
  %62 = xor i64 %3, -1
  %63 = and i64 %62, 8626044647457887677
  %64 = and i64 %3, -8626044647457887678
  %65 = or i64 %63, %64
  %66 = xor i64 -2842433843699122367, %65
  %67 = xor i64 %3, -1
  %68 = or i64 5820769899103851779, %67
  %69 = xor i64 %68, -1
  %70 = and i64 %69, -1
  %71 = or i64 %66, %70
  %72 = xor i64 %60, %58
  %73 = xor i64 %72, %71
  %74 = xor i64 %73, 5339220953904187897
  %75 = xor i64 %74, %57
  %76 = xor i64 %75, %54
  %77 = xor i64 %76, %61
  %78 = or i64 %1, -498321659758401461
  %79 = xor i64 %1, -1
  %80 = and i64 %79, -5909392962273887759
  %81 = and i64 %1, 5909392962273887758
  %82 = or i64 %80, %81
  %83 = xor i64 6118146140212761018, %82
  %84 = xor i64 %1, -1
  %85 = or i64 498321659758401460, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = or i64 %83, %87
  %89 = add i64 %5, -6685064073097081447
  %90 = sub i64 0, %5
  %91 = add i64 6685064073097081447, %90
  %92 = sub i64 0, %91
  %93 = and i64 %3, -767329674593464369
  %94 = or i64 767329674593464368, %3
  %95 = sub i64 %94, 767329674593464368
  %96 = xor i64 %88, 0
  %97 = xor i64 %96, %89
  %98 = xor i64 %97, %92
  %99 = xor i64 %98, %95
  %100 = xor i64 %99, %93
  %101 = xor i64 %100, %78
  %102 = mul i64 %77, %101
  %103 = mul i64 66, %102
  %104 = mul i64 63, 64
  %105 = add i64 %5, 2623711825211901605
  %106 = add i64 -6410309807662545930, %5
  %107 = add i64 %106, 9034021632874447535
  %108 = add i64 %1, 2951740145925777598
  %109 = add i64 -1921157960659089688, %1
  %110 = add i64 %109, 4872898106584867286
  %111 = xor i64 %107, %105
  %112 = xor i64 %111, 4302847008936493777
  %113 = xor i64 %112, %110
  %114 = xor i64 %113, %108
  %115 = and i64 %5, 5541605551222223525
  %116 = or i64 -5541605551222223526, %5
  %117 = sub i64 %116, -5541605551222223526
  %118 = add i64 %5, 4775988398446200982
  %119 = and i64 4775988398446200982, %5
  %120 = or i64 4775988398446200982, %5
  %121 = add i64 %119, %120
  %122 = or i64 %3, -4850510266946706606
  %123 = xor i64 %3, -1
  %124 = and i64 -4850510266946706606, %123
  %125 = add i64 %124, %3
  %126 = xor i64 %121, %115
  %127 = xor i64 %126, -6412638229457945553
  %128 = xor i64 %127, %125
  %129 = xor i64 %128, %118
  %130 = xor i64 %129, %122
  %131 = xor i64 %130, %117
  %132 = mul i64 %114, %131
  %133 = mul i64 46, %132
  %134 = mul i64 1, 36
  %135 = sdiv i64 37, 74
  %136 = load i8*, i8** %2, align 8
  %137 = load i8, i8* %136, align 1
  %138 = mul i8 %137, 2
  %139 = mul i8 %137, 2
  %140 = add i8 2, %139
  %141 = mul i8 %138, %140
  %142 = srem i8 %141, 4
  %143 = icmp eq i8 %142, 0
  %144 = mul i8 %137, %137
  %145 = add i8 %144, %137
  %146 = srem i8 %145, 2
  %147 = icmp eq i8 %146, 0
  %148 = or i1 %143, %147
  %149 = select i1 %148, i32 984876136, i32 984876139
  %150 = add i64 %8, 1732764005573281438
  %151 = add i64 6313594936823018227, %8
  %152 = add i64 %151, -4580830931249736789
  %153 = and i64 %8, 8076537423434356926
  %154 = xor i64 %8, -1
  %155 = xor i64 8076537423434356926, %154
  %156 = and i64 %155, 8076537423434356926
  %157 = and i64 %1, 5882685615936124925
  %158 = or i64 -5882685615936124926, %1
  %159 = sub i64 %158, -5882685615936124926
  %160 = xor i64 %150, %159
  %161 = xor i64 %160, %153
  %162 = xor i64 %161, -710272599947820293
  %163 = xor i64 %162, %152
  %164 = xor i64 %163, %157
  %165 = xor i64 %164, %156
  %166 = add i64 %3, 2631680501123947062
  %167 = xor i64 2631680501123947062, %3
  %168 = and i64 2631680501123947062, %3
  %169 = mul i64 2, %168
  %170 = add i64 %167, %169
  %171 = or i64 %8, -3663132024334984167
  %172 = xor i64 %8, -1
  %173 = and i64 -3663132024334984167, %172
  %174 = add i64 %173, %8
  %175 = and i64 %5, -3331614731533730064
  %176 = xor i64 %5, -1
  %177 = xor i64 -3331614731533730064, %176
  %178 = and i64 %177, -3331614731533730064
  %179 = xor i64 %178, 818839059940444109
  %180 = xor i64 %179, %171
  %181 = xor i64 %180, %170
  %182 = xor i64 %181, %175
  %183 = xor i64 %182, %166
  %184 = xor i64 %183, %174
  %185 = mul i64 %165, %184
  %186 = trunc i64 %185 to i32
  %187 = xor i32 %149, %186
  %188 = and i64 %5, -4456828795533421110
  %189 = xor i64 %5, -1
  %190 = xor i64 -4456828795533421110, %189
  %191 = and i64 %190, -4456828795533421110
  %192 = or i64 %5, 5260868657112273041
  %193 = xor i64 %5, -1
  %194 = and i64 %193, 2640913701133577678
  %195 = and i64 %5, -2640913701133577679
  %196 = or i64 %194, %195
  %197 = xor i64 7900498123429952863, %196
  %198 = xor i64 %5, -1
  %199 = or i64 -5260868657112273042, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = or i64 %197, %201
  %203 = xor i64 %191, %188
  %204 = xor i64 %203, %202
  %205 = xor i64 %204, 2224971670522523847
  %206 = xor i64 %205, %192
  %207 = add i64 %5, 7016553746529518928
  %208 = sub i64 0, %5
  %209 = sub i64 7016553746529518928, %208
  %210 = and i64 %8, -5409044182002684328
  %211 = xor i64 %8, -1
  %212 = or i64 5409044182002684327, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = xor i64 %214, 3815782636647019237
  %216 = xor i64 %215, %209
  %217 = xor i64 %216, %210
  %218 = xor i64 %217, %207
  %219 = mul i64 %206, %218
  %220 = trunc i64 %219 to i32
  %221 = and i32 %187, %220
  %222 = and i32 %149, -4
  %223 = or i32 %221, %222
  store i32 %223, i32* %0, align 4
  %224 = call i8** @bf861539622850162277(i32* %0)
  %225 = load i8*, i8** %224, align 8
  indirectbr i8* %225, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %226 = call i8** @lk8862629089039270275(i64* %7)
  %227 = load i8*, i8** %226, align 8
  %228 = bitcast i8* %227 to void ([51 x i32]*, i1*, i32*)*
  call void %228([51 x i32]* %lookupTable, i1* %.reg2mem111, i32* %dispatcher)
  %229 = load i8*, i8** %4, align 8
  %230 = load i8, i8* %229, align 1
  %231 = mul i8 %230, %230
  %232 = add i8 %231, %230
  %233 = mul i8 %232, 3
  %234 = srem i8 %233, 2
  %235 = icmp eq i8 %234, 0
  %236 = mul i8 %230, %230
  %237 = add i8 %236, -1
  %238 = add i8 %237, %230
  %239 = sub i8 %238, -1
  %240 = add i64 %133, -4502994263697869232
  %241 = and i64 -4502994263697869232, %133
  %242 = or i64 -4502994263697869232, %133
  %243 = add i64 %241, %242
  %244 = sext i8 %139 to i64
  %245 = add i64 %244, -7284481168710542755
  %246 = xor i64 -7284481168710542755, %244
  %247 = and i64 -7284481168710542755, %244
  %248 = mul i64 2, %247
  %249 = add i64 %246, %248
  %250 = xor i64 %249, %240
  %251 = xor i64 %250, 8567171207053096127
  %252 = xor i64 %251, %243
  %253 = xor i64 %252, %245
  %254 = sext i8 %141 to i64
  %255 = or i64 %254, -8536356147603319138
  %256 = and i64 -8536356147603319138, %254
  %257 = xor i64 -8536356147603319138, %254
  %258 = or i64 %256, %257
  %259 = sext i8 %142 to i64
  %260 = or i64 %259, 702145992868496851
  %261 = and i64 702145992868496851, %259
  %262 = xor i64 702145992868496851, %259
  %263 = or i64 %261, %262
  %264 = or i64 %53, 1440597135139667592
  %265 = xor i64 %53, -1
  %266 = and i64 %265, -5543031065735575876
  %267 = and i64 %53, 5543031065735575875
  %268 = or i64 %266, %267
  %269 = xor i64 -6850760174398752716, %268
  %270 = xor i64 %53, -1
  %271 = or i64 -1440597135139667593, %270
  %272 = xor i64 %271, -1
  %273 = and i64 %272, -1
  %274 = or i64 %269, %273
  %275 = xor i64 %263, %274
  %276 = xor i64 %275, %255
  %277 = xor i64 %276, -5093241951399610754
  %278 = xor i64 %277, %260
  %279 = xor i64 %278, %258
  %280 = xor i64 %279, %264
  %281 = mul i64 %253, %280
  %282 = trunc i64 %281 to i8
  %283 = srem i8 %239, %282
  %284 = icmp eq i8 %283, 0
  %285 = and i1 %235, %284
  %286 = sext i8 %140 to i64
  %287 = or i64 %286, -5433269889540814636
  %288 = and i64 -5433269889540814636, %286
  %289 = xor i64 -5433269889540814636, %286
  %290 = or i64 %288, %289
  %291 = add i64 %53, 530154078151109325
  %292 = sub i64 0, %53
  %293 = add i64 -530154078151109325, %292
  %294 = sub i64 0, %293
  %295 = xor i64 %294, %287
  %296 = xor i64 %295, %291
  %297 = xor i64 %296, 6436884254758014321
  %298 = xor i64 %297, %290
  %299 = or i64 %135, 4388409128586046500
  %300 = xor i64 %135, -1
  %301 = and i64 %300, 9073245087860833493
  %302 = and i64 %135, -9073245087860833494
  %303 = or i64 %301, %302
  %304 = xor i64 4687234080049418481, %303
  %305 = xor i64 %135, -1
  %306 = or i64 -4388409128586046501, %305
  %307 = xor i64 %306, -1
  %308 = and i64 %307, -1
  %309 = or i64 %304, %308
  %310 = sext i32 %149 to i64
  %311 = or i64 %310, 7728524157867611970
  %312 = xor i64 %310, -1
  %313 = and i64 7728524157867611970, %312
  %314 = add i64 %313, %310
  %315 = xor i64 870397858674854521, %314
  %316 = xor i64 %315, %299
  %317 = xor i64 %316, %311
  %318 = xor i64 %317, %309
  %319 = mul i64 %298, %318
  %320 = trunc i64 %319 to i32
  %321 = select i1 %285, i32 984876137, i32 %320
  %322 = xor i32 %321, 0
  store i32 %322, i32* %0, align 4
  %323 = call i8** @bf861539622850162277(i32* %0)
  %324 = load i8*, i8** %323, align 8
  indirectbr i8* %324, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.27(i32* %.reg2mem100, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15945169503269941469, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.27, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15945169503269941469, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.27, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15945169503269941469, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.27, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5394018512801838177, i32 0, i64 %8
  store i8* bitcast (void (i32, i32*)* @main.extracted.27.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf7835958905179672536(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload102 = load i32, i32* %.reg2mem100, align 4
  %13 = srem i32 %.reload102, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 40
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %18 = load i32, i32* %17, align 4
  %19 = srem i32 %16, %18
  %20 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 26
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 24
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %21, %23
  %25 = select i1 %14, i32 %19, i32 %24
  %26 = load i8*, i8** %4, align 8
  %27 = load i8, i8* %26, align 1
  %28 = mul i8 %27, 2
  %29 = mul i8 %27, 2
  %30 = add i8 2, %29
  %31 = mul i8 %28, %30
  %32 = srem i8 %31, 4
  %33 = icmp eq i8 %32, 0
  %34 = mul i8 %27, %27
  %35 = mul i8 %34, %27
  %36 = sub i8 0, %27
  %37 = sub i8 %35, %36
  %38 = srem i8 %37, 2
  %39 = icmp eq i8 %38, 0
  %40 = and i1 %33, %39
  %41 = and i64 %3, -7654039889719892444
  %42 = or i64 7654039889719892443, %3
  %43 = sub i64 %42, 7654039889719892443
  %44 = or i64 %3, -4157782580101831486
  %45 = xor i64 %3, -1
  %46 = and i64 -4157782580101831486, %45
  %47 = add i64 %46, %3
  %48 = add i64 %8, 3104047901471269189
  %49 = add i64 -1462619693772215743, %8
  %50 = sub i64 %49, -4566667595243484932
  %51 = xor i64 %48, %50
  %52 = xor i64 %51, %47
  %53 = xor i64 %52, %41
  %54 = xor i64 %53, %43
  %55 = xor i64 %54, %44
  %56 = xor i64 %55, -6770832068466684463
  %57 = or i64 %1, -1449751360821573718
  %58 = xor i64 %1, -1
  %59 = and i64 %58, 4188074229153535697
  %60 = and i64 %1, -4188074229153535698
  %61 = or i64 %59, %60
  %62 = xor i64 -3315083066099281541, %61
  %63 = xor i64 %1, -1
  %64 = or i64 1449751360821573717, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = and i64 %8, -8528535979727203026
  %69 = or i64 8528535979727203025, %8
  %70 = sub i64 %69, 8528535979727203025
  %71 = and i64 %3, -6385523591811829288
  %72 = xor i64 %3, -1
  %73 = xor i64 -6385523591811829288, %72
  %74 = and i64 %73, -6385523591811829288
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, %71
  %77 = xor i64 %76, %68
  %78 = xor i64 %77, %57
  %79 = xor i64 %78, %70
  %80 = xor i64 %79, 1784192028360986600
  %81 = mul i64 %56, %80
  %82 = trunc i64 %81 to i32
  %83 = select i1 %40, i32 984876136, i32 %82
  %84 = xor i32 %83, 0
  store i32 %84, i32* %0, align 4
  %85 = call i8** @bf7835958905179672536(i32* %0)
  %86 = load i8*, i8** %85, align 8
  indirectbr i8* %86, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %87 = call i8** @lk628540616057857234(i64* %7)
  %88 = load i8*, i8** %87, align 8
  %89 = bitcast i8* %88 to void (i32, i32*)*
  call void %89(i32 %25, i32* %dispatcher)
  %90 = load i8*, i8** %4, align 8
  %91 = load i8, i8* %90, align 1
  %92 = mul i8 %91, 2
  %93 = sext i32 %21 to i64
  %94 = add i64 %93, -7452095550597929946
  %95 = add i64 1613573553903033203, %93
  %96 = add i64 %95, -9065669104500963149
  %97 = sext i8 %38 to i64
  %98 = and i64 %97, -554242996101677863
  %99 = xor i64 %97, -1
  %100 = or i64 554242996101677862, %99
  %101 = xor i64 %100, -1
  %102 = and i64 %101, -1
  %103 = sext i8 %31 to i64
  %104 = add i64 %103, 1929710601499999665
  %105 = add i64 1659846696062681690, %103
  %106 = add i64 %105, 269863905437317975
  %107 = xor i64 %94, %106
  %108 = xor i64 %107, %102
  %109 = xor i64 %108, %98
  %110 = xor i64 %109, %104
  %111 = xor i64 %110, %96
  %112 = xor i64 %111, -3547983576058154257
  %113 = sext i32 %83 to i64
  %114 = and i64 %113, -8355283457972442136
  %115 = or i64 8355283457972442135, %113
  %116 = sub i64 %115, 8355283457972442135
  %117 = sext i8 %34 to i64
  %118 = or i64 %117, 8116612626769293783
  %119 = xor i64 %117, -1
  %120 = and i64 8116612626769293783, %119
  %121 = add i64 %120, %117
  %122 = xor i64 %118, %114
  %123 = xor i64 %122, %116
  %124 = xor i64 %123, -3703585484958435298
  %125 = xor i64 %124, %121
  %126 = mul i64 %112, %125
  %127 = trunc i64 %126 to i8
  %128 = mul i8 %91, %127
  %129 = or i64 %3, 4370771660129393868
  %130 = xor i64 %3, -1
  %131 = and i64 %130, -6739370216945904301
  %132 = and i64 %3, 6739370216945904300
  %133 = or i64 %131, %132
  %134 = xor i64 -7002838122827560545, %133
  %135 = xor i64 %3, -1
  %136 = or i64 -4370771660129393869, %135
  %137 = xor i64 %136, -1
  %138 = and i64 %137, -1
  %139 = or i64 %134, %138
  %140 = sext i8 %27 to i64
  %141 = or i64 %140, 8478319475262790825
  %142 = xor i64 %140, -1
  %143 = and i64 8478319475262790825, %142
  %144 = add i64 %143, %140
  %145 = xor i64 %141, %144
  %146 = xor i64 %145, %129
  %147 = xor i64 %146, 5662678969457389547
  %148 = xor i64 %147, %139
  %149 = and i64 %5, -6330688530073159616
  %150 = xor i64 %5, -1
  %151 = or i64 6330688530073159615, %150
  %152 = xor i64 %151, -1
  %153 = and i64 %152, -1
  %154 = sext i32 %16 to i64
  %155 = add i64 %154, -7198892177519832999
  %156 = add i64 -7437922015914416526, %154
  %157 = add i64 %156, 239029838394583527
  %158 = xor i64 %155, 292017243094188422
  %159 = xor i64 %158, %149
  %160 = xor i64 %159, %157
  %161 = xor i64 %160, %153
  %162 = mul i64 %148, %161
  %163 = trunc i64 %162 to i8
  %164 = add i8 %163, %128
  %165 = mul i8 %92, %164
  %166 = srem i8 %165, 4
  %167 = icmp eq i8 %166, 0
  %168 = mul i8 %91, %91
  %169 = mul i8 %168, %91
  %170 = add i8 %169, %91
  %171 = srem i8 %170, 2
  %172 = icmp eq i8 %171, 0
  %173 = and i1 %167, %172
  %174 = sext i8 %35 to i64
  %175 = or i64 %174, -5256602395963428240
  %176 = and i64 -5256602395963428240, %174
  %177 = xor i64 -5256602395963428240, %174
  %178 = or i64 %176, %177
  %179 = sext i32 %18 to i64
  %180 = add i64 %179, 4882239923129213608
  %181 = sub i64 0, %179
  %182 = sub i64 4882239923129213608, %181
  %183 = sext i8 %38 to i64
  %184 = and i64 %183, -5205729684454204419
  %185 = or i64 5205729684454204418, %183
  %186 = sub i64 %185, 5205729684454204418
  %187 = xor i64 %184, %186
  %188 = xor i64 %187, %178
  %189 = xor i64 %188, %175
  %190 = xor i64 %189, %182
  %191 = xor i64 %190, -3521043470793199405
  %192 = xor i64 %191, %180
  %193 = sext i32 %83 to i64
  %194 = and i64 %193, -8670932819988567422
  %195 = or i64 8670932819988567421, %193
  %196 = sub i64 %195, 8670932819988567421
  %197 = sext i8 %35 to i64
  %198 = and i64 %197, -5565711175079123951
  %199 = xor i64 %197, -1
  %200 = or i64 5565711175079123950, %199
  %201 = xor i64 %200, -1
  %202 = and i64 %201, -1
  %203 = sext i32 %13 to i64
  %204 = or i64 %203, 9133068051194768840
  %205 = and i64 9133068051194768840, %203
  %206 = xor i64 9133068051194768840, %203
  %207 = or i64 %205, %206
  %208 = xor i64 %207, %204
  %209 = xor i64 %208, %194
  %210 = xor i64 %209, %196
  %211 = xor i64 %210, %198
  %212 = xor i64 %211, -3142357650515314770
  %213 = xor i64 %212, %202
  %214 = mul i64 %192, %213
  %215 = trunc i64 %214 to i32
  %216 = select i1 %173, i32 %215, i32 984876138
  %217 = xor i32 %216, 0
  store i32 %217, i32* %0, align 4
  %218 = call i8** @bf7835958905179672536(i32* %0)
  %219 = load i8*, i8** %218, align 8
  indirectbr i8* %219, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.28(i32* %.reg2mem114, [51 x i32]* %lookupTable, i1* %.reg2mem118, i32* %dispatcher, i1* %.reg2mem125) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8379073977622402907, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.28, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8379073977622402907, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.28, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8379073977622402907, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.28, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable16975137384401352206, i32 0, i64 %8
  store i8* bitcast (void ([51 x i32]*, i1*, i32, i32*, i1, i1*)* @main.extracted.28.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf12112455805171328756(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = add i64 8858466290138282127, -8858466290138282168
  %.reload117 = load i32, i32* %.reg2mem114, align 4
  %14 = icmp eq i32 %.reload117, 0
  %15 = add i64 %1, 6060085761268127861
  %16 = sub i64 0, %1
  %17 = add i64 -6060085761268127861, %16
  %18 = sub i64 0, %17
  %19 = add i64 %8, -8216882904779002943
  %20 = xor i64 -8216882904779002943, %8
  %21 = and i64 -8216882904779002943, %8
  %22 = mul i64 2, %21
  %23 = add i64 %20, %22
  %24 = xor i64 %18, -8156015250663045885
  %25 = xor i64 %24, %23
  %26 = xor i64 %25, %19
  %27 = xor i64 %26, %15
  %28 = add i64 %8, 499048062783667025
  %29 = and i64 499048062783667025, %8
  %30 = or i64 499048062783667025, %8
  %31 = add i64 %29, %30
  %32 = and i64 %1, 6569511398043307248
  %33 = xor i64 %1, -1
  %34 = or i64 -6569511398043307249, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, -1
  %37 = and i64 %1, 3959571156729437881
  %38 = xor i64 %1, -1
  %39 = xor i64 3959571156729437881, %38
  %40 = and i64 %39, 3959571156729437881
  %41 = xor i64 %40, %32
  %42 = xor i64 %41, %28
  %43 = xor i64 %42, %36
  %44 = xor i64 %43, -8027117993311522717
  %45 = xor i64 %44, %37
  %46 = xor i64 %45, %31
  %47 = mul i64 %27, %46
  %48 = sub i64 %47, 26
  %49 = mul i64 72, 124
  %50 = sdiv i64 66, 52
  %51 = sdiv i64 112, 84
  %52 = or i64 %1, -4499549335497923326
  %53 = and i64 -4499549335497923326, %1
  %54 = xor i64 -4499549335497923326, %1
  %55 = or i64 %53, %54
  %56 = and i64 %1, 8306638404089525843
  %57 = or i64 -8306638404089525844, %1
  %58 = sub i64 %57, -8306638404089525844
  %59 = add i64 %3, -9009456797180374588
  %60 = sub i64 0, %3
  %61 = add i64 9009456797180374588, %60
  %62 = sub i64 0, %61
  %63 = xor i64 %59, 7974538693527891499
  %64 = xor i64 %63, %55
  %65 = xor i64 %64, %58
  %66 = xor i64 %65, %62
  %67 = xor i64 %66, %56
  %68 = xor i64 %67, %52
  %69 = and i64 %8, 2951093559974105617
  %70 = xor i64 %8, -1
  %71 = xor i64 2951093559974105617, %70
  %72 = and i64 %71, 2951093559974105617
  %73 = or i64 %3, 3863008867151417799
  %74 = xor i64 %3, -1
  %75 = and i64 3863008867151417799, %74
  %76 = add i64 %75, %3
  %77 = xor i64 -1781693666981116904, %76
  %78 = xor i64 %77, %69
  %79 = xor i64 %78, %73
  %80 = xor i64 %79, %72
  %81 = mul i64 %68, %80
  %82 = add i64 %81, 50
  %83 = sdiv i64 37, 116
  %84 = sdiv i64 88, 106
  %85 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 41
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = sub i32 %86, 370593881
  %90 = sub i32 %89, %88
  %91 = add i32 %90, 370593881
  %92 = load i8*, i8** %6, align 8
  %93 = load i8, i8* %92, align 1
  %94 = mul i8 %93, 2
  %95 = mul i8 %93, 2
  %96 = add i8 -3, %95
  %97 = sub i8 %96, -5
  %98 = mul i8 %94, %97
  %99 = srem i8 %98, 4
  %100 = icmp eq i8 %99, 0
  %101 = mul i8 %93, %93
  %102 = add i8 %101, %93
  %103 = srem i8 %102, 2
  %104 = icmp eq i8 %103, 0
  %105 = and i1 %100, %104
  %106 = and i64 %5, 4660323990452430892
  %107 = xor i64 %5, -1
  %108 = xor i64 4660323990452430892, %107
  %109 = and i64 %108, 4660323990452430892
  %110 = and i64 %5, -7816215388733732309
  %111 = xor i64 %5, -1
  %112 = or i64 7816215388733732308, %111
  %113 = xor i64 %112, -1
  %114 = and i64 %113, -1
  %115 = xor i64 %110, -5162756784401973361
  %116 = xor i64 %115, %109
  %117 = xor i64 %116, %114
  %118 = xor i64 %117, %106
  %119 = add i64 %3, 990623067315662288
  %120 = sub i64 0, %3
  %121 = add i64 -990623067315662288, %120
  %122 = sub i64 0, %121
  %123 = add i64 %5, 7832520740159861863
  %124 = sub i64 0, %5
  %125 = sub i64 7832520740159861863, %124
  %126 = xor i64 -2455640651693277049, %119
  %127 = xor i64 %126, %125
  %128 = xor i64 %127, %122
  %129 = xor i64 %128, %123
  %130 = mul i64 %118, %129
  %131 = trunc i64 %130 to i32
  %132 = select i1 %105, i32 %131, i32 984876138
  %133 = add i64 %1, -2056553170826566044
  %134 = add i64 9071634424152412126, %1
  %135 = sub i64 %134, -7318556478730573446
  %136 = or i64 %5, 3526624952776873915
  %137 = and i64 3526624952776873915, %5
  %138 = xor i64 3526624952776873915, %5
  %139 = or i64 %137, %138
  %140 = and i64 %8, 7136535692204586313
  %141 = or i64 -7136535692204586314, %8
  %142 = sub i64 %141, -7136535692204586314
  %143 = xor i64 %140, %135
  %144 = xor i64 %143, %139
  %145 = xor i64 %144, %136
  %146 = xor i64 %145, -8419930403580432641
  %147 = xor i64 %146, %142
  %148 = xor i64 %147, %133
  %149 = or i64 %8, 3614734572136624664
  %150 = xor i64 %8, -1
  %151 = and i64 %150, -5987506326510800799
  %152 = and i64 %8, 5987506326510800798
  %153 = or i64 %151, %152
  %154 = xor i64 -7007030059912560007, %153
  %155 = xor i64 %8, -1
  %156 = or i64 -3614734572136624665, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = or i64 %5, 8771675056579055318
  %161 = and i64 8771675056579055318, %5
  %162 = xor i64 8771675056579055318, %5
  %163 = or i64 %161, %162
  %164 = xor i64 %149, %160
  %165 = xor i64 %164, %159
  %166 = xor i64 %165, %163
  %167 = xor i64 %166, 7704083528276898557
  %168 = mul i64 %148, %167
  %169 = trunc i64 %168 to i32
  %170 = xor i32 %132, %169
  store i32 %170, i32* %0, align 4
  %171 = call i8** @bf12112455805171328756(i32* %0)
  %172 = load i8*, i8** %171, align 8
  indirectbr i8* %172, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %173 = call i8** @lk6873818407714615644(i64* %7)
  %174 = load i8*, i8** %173, align 8
  %175 = bitcast i8* %174 to void ([51 x i32]*, i1*, i32, i32*, i1, i1*)*
  call void %175([51 x i32]* %lookupTable, i1* %.reg2mem118, i32 %91, i32* %dispatcher, i1 %14, i1* %.reg2mem125)
  %176 = load i8*, i8** %2, align 8
  %177 = load i8, i8* %176, align 1
  %178 = mul i8 %177, 2
  %179 = mul i8 %177, 2
  %180 = and i8 2, %179
  %181 = or i8 2, %179
  %182 = add i8 %180, %181
  %183 = mul i8 %178, %182
  %184 = srem i8 %183, 4
  %185 = icmp eq i8 %184, 0
  %186 = mul i8 %177, %177
  %187 = add i8 %186, %177
  %188 = srem i8 %187, 2
  %189 = icmp eq i8 %188, 0
  %190 = xor i1 %189, true
  %191 = and i1 %185, %190
  %192 = add i1 %191, %189
  %193 = sext i32 %88 to i64
  %194 = add i64 %193, 4231537324869221755
  %195 = sub i64 0, %193
  %196 = add i64 -4231537324869221755, %195
  %197 = sub i64 0, %196
  %198 = sext i32 %.reload117 to i64
  %199 = or i64 %198, -2754881336045761403
  %200 = and i64 -2754881336045761403, %198
  %201 = xor i64 -2754881336045761403, %198
  %202 = or i64 %200, %201
  %203 = sext i8 %94 to i64
  %204 = add i64 %203, -658412719172189193
  %205 = add i64 5236639555054977619, %203
  %206 = add i64 %205, -5895052274227166812
  %207 = xor i64 %202, %197
  %208 = xor i64 %207, -5195959535848665805
  %209 = xor i64 %208, %199
  %210 = xor i64 %209, %204
  %211 = xor i64 %210, %194
  %212 = xor i64 %211, %206
  %213 = and i64 %51, -9085669433073767962
  %214 = xor i64 %51, -1
  %215 = xor i64 -9085669433073767962, %214
  %216 = and i64 %215, -9085669433073767962
  %217 = sext i32 %90 to i64
  %218 = add i64 %217, 2034945895364119262
  %219 = and i64 2034945895364119262, %217
  %220 = or i64 2034945895364119262, %217
  %221 = add i64 %219, %220
  %222 = xor i64 %218, %213
  %223 = xor i64 %222, %221
  %224 = xor i64 %223, %216
  %225 = xor i64 %224, -7901766108716549143
  %226 = mul i64 %212, %225
  %227 = trunc i64 %226 to i32
  %228 = select i1 %192, i32 %227, i32 984876137
  %229 = xor i32 %228, 2
  store i32 %229, i32* %0, align 4
  %230 = call i8** @bf12112455805171328756(i32* %0)
  %231 = load i8*, i8** %230, align 8
  indirectbr i8* %231, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.29(i1* %.reg2mem133, i32* %.reg2mem131, i32* %.reg2mem121, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8792233532497471479, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.29, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8792233532497471479, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.29, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8792233532497471479, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.29, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9270819550216953813, i32 0, i64 %8
  store i8* bitcast (void (i32, i32*)* @main.extracted.29.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf9625773503618811097(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload134 = load i1, i1* %.reg2mem133, align 1
  %.reload132 = load i32, i32* %.reg2mem131, align 4
  store i32 %.reload132, i32* %.reg2mem121, align 4
  %13 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 29
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %16 = load i32, i32* %15, align 4
  %17 = srem i32 %14, %16
  %18 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 9
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %19, %21
  %23 = select i1 %.reload134, i32 %17, i32 %22
  %24 = load i8*, i8** %6, align 8
  %25 = load i8, i8* %24, align 1
  %26 = mul i8 %25, 2
  %27 = mul i8 %25, 2
  %28 = xor i8 2, %27
  %29 = and i8 2, %27
  %30 = mul i8 2, %29
  %31 = add i8 %28, %30
  %32 = mul i8 %26, %31
  %33 = and i64 %8, 244730775297805289
  %34 = xor i64 %8, -1
  %35 = or i64 -244730775297805290, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %1, -2280573120731701411
  %39 = and i64 -2280573120731701411, %1
  %40 = xor i64 -2280573120731701411, %1
  %41 = or i64 %39, %40
  %42 = xor i64 %37, %41
  %43 = xor i64 %42, 134820616125249101
  %44 = xor i64 %43, %33
  %45 = xor i64 %44, %38
  %46 = or i64 %8, -2114365922039384047
  %47 = xor i64 %8, -1
  %48 = and i64 -2114365922039384047, %47
  %49 = add i64 %48, %8
  %50 = add i64 %1, -8098865065971559313
  %51 = add i64 572080591654909939, %1
  %52 = add i64 %51, -8670945657626469252
  %53 = xor i64 -6373014239840646636, %52
  %54 = xor i64 %53, %46
  %55 = xor i64 %54, %49
  %56 = xor i64 %55, %50
  %57 = mul i64 %45, %56
  %58 = trunc i64 %57 to i8
  %59 = srem i8 %32, %58
  %60 = icmp eq i8 %59, 0
  %61 = mul i8 %25, %25
  %62 = add i8 %61, %25
  %63 = srem i8 %62, 2
  %64 = icmp eq i8 %63, 0
  %65 = or i1 %60, %64
  %66 = select i1 %65, i32 984876137, i32 984876139
  %67 = and i64 %8, 6828228011720335050
  %68 = xor i64 %8, -1
  %69 = or i64 -6828228011720335051, %68
  %70 = xor i64 %69, -1
  %71 = and i64 %70, -1
  %72 = add i64 %3, 7442282364797396063
  %73 = sub i64 0, %3
  %74 = sub i64 7442282364797396063, %73
  %75 = add i64 %1, -5284459732176694597
  %76 = xor i64 -5284459732176694597, %1
  %77 = and i64 -5284459732176694597, %1
  %78 = mul i64 2, %77
  %79 = add i64 %76, %78
  %80 = xor i64 %79, %72
  %81 = xor i64 %80, %67
  %82 = xor i64 %81, %75
  %83 = xor i64 %82, -668086124093929741
  %84 = xor i64 %83, %71
  %85 = xor i64 %84, %74
  %86 = and i64 %3, -6596623709835746987
  %87 = xor i64 %3, -1
  %88 = or i64 6596623709835746986, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = or i64 %8, -4630980087556941397
  %92 = xor i64 %8, -1
  %93 = and i64 %92, -4846071407360375924
  %94 = and i64 %8, 4846071407360375923
  %95 = or i64 %93, %94
  %96 = xor i64 217368631994571303, %95
  %97 = xor i64 %8, -1
  %98 = or i64 4630980087556941396, %97
  %99 = xor i64 %98, -1
  %100 = and i64 %99, -1
  %101 = or i64 %96, %100
  %102 = xor i64 %91, %101
  %103 = xor i64 %102, -2108596716211272586
  %104 = xor i64 %103, %90
  %105 = xor i64 %104, %86
  %106 = mul i64 %85, %105
  %107 = trunc i64 %106 to i32
  %108 = or i32 %66, %107
  %109 = and i32 %66, 2
  %110 = sub i32 %108, %109
  store i32 %110, i32* %0, align 4
  %111 = call i8** @bf9625773503618811097(i32* %0)
  %112 = load i8*, i8** %111, align 8
  indirectbr i8* %112, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %113 = call i8** @lk6906303440313898649(i64* %7)
  %114 = load i8*, i8** %113, align 8
  %115 = bitcast i8* %114 to void (i32, i32*)*
  call void %115(i32 %23, i32* %dispatcher)
  %116 = load i8*, i8** %2, align 8
  %117 = load i8, i8* %116, align 1
  %118 = mul i8 %117, 2
  %119 = mul i8 %117, 2
  %120 = add i8 2, %119
  %121 = mul i8 %118, %120
  %122 = srem i8 %121, 4
  %123 = icmp eq i8 %122, 0
  %124 = mul i8 %117, %117
  %125 = add i8 %124, %117
  %126 = srem i8 %125, 2
  %127 = icmp eq i8 %126, 0
  %128 = and i1 %123, %127
  %129 = select i1 %128, i32 984876139, i32 984876138
  %130 = xor i32 %129, 1
  store i32 %130, i32* %0, align 4
  %131 = call i8** @bf9625773503618811097(i32* %0)
  %132 = load i8*, i8** %131, align 8
  indirectbr i8* %132, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.extracted(i1 %0, i32 %1, i32 %2, i32* %dispatcher) #5 {
newFuncRoot:
  %3 = sext i32 %1 to i64
  %4 = and i64 %3, -7248263493953472000
  %5 = or i64 7248263493953471999, %3
  %6 = sub i64 %5, 7248263493953471999
  %7 = sext i32 %2 to i64
  %8 = and i64 %7, 3630113266266251917
  %9 = or i64 -3630113266266251918, %7
  %10 = sub i64 %9, -3630113266266251918
  %11 = xor i64 8037105583852968901, %4
  %12 = xor i64 %11, %6
  %13 = xor i64 %12, %10
  %14 = xor i64 %13, %8
  %15 = sext i32 %1 to i64
  %16 = add i64 %15, 6523591169642872498
  %17 = sub i64 0, %15
  %18 = add i64 -6523591169642872498, %17
  %19 = sub i64 0, %18
  %20 = sext i32 %2 to i64
  %21 = add i64 %20, -2901815783029938976
  %22 = sub i64 0, %20
  %23 = add i64 2901815783029938976, %22
  %24 = sub i64 0, %23
  %25 = sext i32 %2 to i64
  %26 = and i64 %25, -6147652420721522181
  %27 = xor i64 %25, -1
  %28 = xor i64 -6147652420721522181, %27
  %29 = and i64 %28, -6147652420721522181
  %30 = xor i64 %24, %26
  %31 = xor i64 %30, %21
  %32 = xor i64 %31, 1638157409412934413
  %33 = xor i64 %32, %16
  %34 = xor i64 %33, %29
  %35 = xor i64 %34, %19
  %36 = mul i64 %14, %35
  %37 = trunc i64 %36 to i32
  %38 = alloca i32, i32 %37, align 4
  %39 = call i64 @h6542867261474098886(i64 984876097)
  %40 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %39
  store i8* blockaddress(@main.extracted.extracted, %loopEnd.exitStub.exitStub), i8** %40, align 8
  %41 = call i64 @h6542867261474098886(i64 984876110)
  %42 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %41
  store i8* blockaddress(@main.extracted.extracted, %45), i8** %42, align 8
  store i32 984876110, i32* %38, align 4
  %43 = call i8** @bf6338069988336422972(i32* %38)
  %44 = load i8*, i8** %43, align 8
  indirectbr i8* %44, [label %45]

45:                                               ; preds = %45, %newFuncRoot
  %46 = select i1 %0, i32 %1, i32 %2
  store i32 %46, i32* %dispatcher, align 4
  %47 = load i8*, i8** %40, align 8
  %48 = load i8, i8* %47, align 1
  %49 = mul i8 %48, 2
  %50 = mul i8 %48, 2
  %51 = add i8 2, %50
  %52 = mul i8 %49, %51
  %53 = srem i8 %52, 4
  %54 = icmp eq i8 %53, 0
  %55 = mul i8 %48, %48
  %56 = mul i8 %55, %48
  %57 = add i8 %56, %48
  %58 = srem i8 %57, 2
  %59 = icmp eq i8 %58, 0
  %60 = and i1 %54, %59
  %61 = and i64 %39, 6438137946427691755
  %62 = xor i64 %39, -1
  %63 = or i64 -6438137946427691756, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = or i64 %41, -6832440909905490231
  %67 = xor i64 %41, -1
  %68 = and i64 %67, 6192440435843644142
  %69 = and i64 %41, -6192440435843644143
  %70 = or i64 %68, %69
  %71 = xor i64 -810158696171228121, %70
  %72 = xor i64 %41, -1
  %73 = or i64 6832440909905490230, %72
  %74 = xor i64 %73, -1
  %75 = and i64 %74, -1
  %76 = or i64 %71, %75
  %77 = xor i64 %66, %65
  %78 = xor i64 %77, -2592806206787745211
  %79 = xor i64 %78, %61
  %80 = xor i64 %79, %76
  %81 = sext i32 %2 to i64
  %82 = or i64 %81, -6460945190683182545
  %83 = xor i64 %81, -1
  %84 = and i64 -6460945190683182545, %83
  %85 = add i64 %84, %81
  %86 = and i64 %39, -7625849599844114168
  %87 = or i64 7625849599844114167, %39
  %88 = sub i64 %87, 7625849599844114167
  %89 = sext i32 %1 to i64
  %90 = add i64 %89, 8049031024236203908
  %91 = and i64 8049031024236203908, %89
  %92 = or i64 8049031024236203908, %89
  %93 = add i64 %91, %92
  %94 = xor i64 5722331706963382221, %93
  %95 = xor i64 %94, %82
  %96 = xor i64 %95, %85
  %97 = xor i64 %96, %90
  %98 = xor i64 %97, %86
  %99 = xor i64 %98, %88
  %100 = mul i64 %80, %99
  %101 = trunc i64 %100 to i32
  %102 = select i1 %60, i32 984876110, i32 %101
  %103 = or i32 %102, 15
  %104 = and i32 %102, 15
  %105 = sub i32 %103, %104
  store i32 %105, i32* %38, align 4
  %106 = call i8** @bf6338069988336422972(i32* %38)
  %107 = load i8*, i8** %106, align 8
  indirectbr i8* %107, [label %loopEnd.exitStub.exitStub, label %45]

loopEnd.exitStub.exitStub:                        ; preds = %45
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.16.extracted() #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876103)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.16.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876117)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.16.extracted, %7), i8** %4, align 8
  store i32 984876117, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = load i8*, i8** %4, align 8
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 1
  %12 = mul i8 %9, %9
  %13 = add i8 %12, %9
  %14 = srem i8 %13, 2
  %15 = icmp eq i8 %14, 0
  %16 = or i1 %11, %15
  %17 = select i1 %16, i32 984876117, i32 984876103
  %18 = xor i32 %17, 18
  store i32 %18, i32* %0, align 4
  %19 = call i8** @bf6338069988336422972(i32* %0)
  %20 = load i8*, i8** %19, align 8
  indirectbr i8* %20, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.17.extracted(i32* %0, i32 %1, i32* %dispatcher) #5 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876128)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.17.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876122)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.17.extracted, %9), i8** %6, align 8
  store i32 984876122, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = load i32, i32* %0, align 4
  %11 = add i32 %1, %10
  store i32 %11, i32* %dispatcher, align 4
  %12 = load i8*, i8** %6, align 8
  %13 = load i8, i8* %12, align 1
  %14 = mul i8 %13, 2
  %15 = sext i32 %1 to i64
  %16 = and i64 %15, -4406558165205708401
  %17 = xor i64 %15, -1
  %18 = or i64 4406558165205708400, %17
  %19 = xor i64 %18, -1
  %20 = and i64 %19, -1
  %21 = or i64 %5, -5287273928571824240
  %22 = and i64 -5287273928571824240, %5
  %23 = xor i64 -5287273928571824240, %5
  %24 = or i64 %22, %23
  %25 = and i64 %5, -8070431525951354781
  %26 = xor i64 %5, -1
  %27 = or i64 8070431525951354780, %26
  %28 = xor i64 %27, -1
  %29 = and i64 %28, -1
  %30 = xor i64 %24, %29
  %31 = xor i64 %30, %21
  %32 = xor i64 %31, %20
  %33 = xor i64 %32, -832257785329861333
  %34 = xor i64 %33, %25
  %35 = xor i64 %34, %16
  %36 = or i64 %3, -1458208852967988790
  %37 = and i64 -1458208852967988790, %3
  %38 = xor i64 -1458208852967988790, %3
  %39 = or i64 %37, %38
  %40 = sext i32 %1 to i64
  %41 = and i64 %40, -8581837315747404637
  %42 = xor i64 %40, -1
  %43 = or i64 8581837315747404636, %42
  %44 = xor i64 %43, -1
  %45 = and i64 %44, -1
  %46 = or i64 %5, 8543391163362141939
  %47 = xor i64 %5, -1
  %48 = and i64 8543391163362141939, %47
  %49 = add i64 %48, %5
  %50 = xor i64 6081666014762054406, %49
  %51 = xor i64 %50, %46
  %52 = xor i64 %51, %41
  %53 = xor i64 %52, %45
  %54 = xor i64 %53, %36
  %55 = xor i64 %54, %39
  %56 = mul i64 %35, %55
  %57 = trunc i64 %56 to i8
  %58 = mul i8 %13, %57
  %59 = add i8 2, %58
  %60 = mul i8 %14, %59
  %61 = srem i8 %60, 4
  %62 = icmp eq i8 %61, 0
  %63 = mul i8 %13, %13
  %64 = mul i8 %63, %13
  %65 = add i8 %64, %13
  %66 = srem i8 %65, 2
  %67 = icmp eq i8 %66, 0
  %68 = and i1 %62, %67
  %69 = or i64 %5, -1172687919697492128
  %70 = xor i64 %5, -1
  %71 = and i64 %70, -7629127738838411483
  %72 = and i64 %5, 7629127738838411482
  %73 = or i64 %71, %72
  %74 = xor i64 8765731326465609797, %73
  %75 = xor i64 %5, -1
  %76 = or i64 1172687919697492127, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = or i64 %74, %78
  %80 = or i64 %3, 3244420866975857494
  %81 = xor i64 %3, -1
  %82 = and i64 3244420866975857494, %81
  %83 = add i64 %82, %3
  %84 = or i64 %3, -8819928243988686466
  %85 = xor i64 %3, -1
  %86 = and i64 -8819928243988686466, %85
  %87 = add i64 %86, %3
  %88 = xor i64 2297429913439897015, %80
  %89 = xor i64 %88, %87
  %90 = xor i64 %89, %84
  %91 = xor i64 %90, %79
  %92 = xor i64 %91, %83
  %93 = xor i64 %92, %69
  %94 = or i64 %5, 7731565232307959542
  %95 = and i64 7731565232307959542, %5
  %96 = xor i64 7731565232307959542, %5
  %97 = or i64 %95, %96
  %98 = add i64 %5, -6785526368477054229
  %99 = add i64 -6819288471855011471, %5
  %100 = add i64 %99, 33762103377957242
  %101 = sext i32 %1 to i64
  %102 = and i64 %101, -7944919326878543908
  %103 = xor i64 %101, -1
  %104 = or i64 7944919326878543907, %103
  %105 = xor i64 %104, -1
  %106 = and i64 %105, -1
  %107 = xor i64 3181502492236258976, %100
  %108 = xor i64 %107, %94
  %109 = xor i64 %108, %106
  %110 = xor i64 %109, %102
  %111 = xor i64 %110, %98
  %112 = xor i64 %111, %97
  %113 = mul i64 %93, %112
  %114 = trunc i64 %113 to i32
  %115 = sext i32 %1 to i64
  %116 = add i64 %115, -327692756066757358
  %117 = xor i64 -327692756066757358, %115
  %118 = and i64 -327692756066757358, %115
  %119 = mul i64 2, %118
  %120 = add i64 %117, %119
  %121 = sext i32 %1 to i64
  %122 = add i64 %121, -4966335141487441835
  %123 = add i64 278920008490248750, %121
  %124 = sub i64 %123, 5245255149977690585
  %125 = xor i64 %122, -7526235580480267305
  %126 = xor i64 %125, %124
  %127 = xor i64 %126, %120
  %128 = xor i64 %127, %116
  %129 = add i64 %5, -1925679386893912232
  %130 = sub i64 0, %5
  %131 = sub i64 -1925679386893912232, %130
  %132 = sext i32 %1 to i64
  %133 = or i64 %132, 2294167897097657541
  %134 = and i64 2294167897097657541, %132
  %135 = xor i64 2294167897097657541, %132
  %136 = or i64 %134, %135
  %137 = xor i64 -6973016910261218656, %136
  %138 = xor i64 %137, %133
  %139 = xor i64 %138, %131
  %140 = xor i64 %139, %129
  %141 = mul i64 %128, %140
  %142 = trunc i64 %141 to i32
  %143 = select i1 %68, i32 %114, i32 %142
  %144 = xor i32 %143, 0
  store i32 %144, i32* %2, align 4
  %145 = call i8** @bf6338069988336422972(i32* %2)
  %146 = load i8*, i8** %145, align 8
  indirectbr i8* %146, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.18.extracted([51 x i32]* %lookupTable, i1 %0, i32 %1, i32* %dispatcher) #5 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876127)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.18.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876159)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.18.extracted, %9), i8** %6, align 8
  store i32 984876159, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 6
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = select i1 %0, i32 %1, i32 %14
  store i32 %15, i32* %dispatcher, align 4
  %16 = load i8*, i8** %6, align 8
  %17 = load i8, i8* %16, align 1
  %18 = add i64 %3, -1380427049951023547
  %19 = sub i64 0, %3
  %20 = add i64 1380427049951023547, %19
  %21 = sub i64 0, %20
  %22 = and i64 %3, -2356338748780822748
  %23 = xor i64 %3, -1
  %24 = or i64 2356338748780822747, %23
  %25 = xor i64 %24, -1
  %26 = and i64 %25, -1
  %27 = add i64 %5, -6822009040136784804
  %28 = and i64 -6822009040136784804, %5
  %29 = or i64 -6822009040136784804, %5
  %30 = add i64 %28, %29
  %31 = xor i64 %30, %22
  %32 = xor i64 %31, %26
  %33 = xor i64 %32, %21
  %34 = xor i64 %33, %27
  %35 = xor i64 %34, %18
  %36 = xor i64 %35, 5064961912429713993
  %37 = add i64 %3, -6967709913300048184
  %38 = xor i64 -6967709913300048184, %3
  %39 = and i64 -6967709913300048184, %3
  %40 = mul i64 2, %39
  %41 = add i64 %38, %40
  %42 = or i64 %3, -4162326115184276958
  %43 = xor i64 %3, -1
  %44 = and i64 %43, 4679192512517909615
  %45 = and i64 %3, -4679192512517909616
  %46 = or i64 %44, %45
  %47 = xor i64 -8731451909089515955, %46
  %48 = xor i64 %3, -1
  %49 = or i64 4162326115184276957, %48
  %50 = xor i64 %49, -1
  %51 = and i64 %50, -1
  %52 = or i64 %47, %51
  %53 = xor i64 %37, %52
  %54 = xor i64 %53, %42
  %55 = xor i64 %54, 1463894071581011954
  %56 = xor i64 %55, %41
  %57 = mul i64 %36, %56
  %58 = trunc i64 %57 to i8
  %59 = mul i8 %17, %58
  %60 = mul i8 %17, 2
  %61 = xor i8 2, %60
  %62 = and i8 2, %60
  %63 = mul i8 2, %62
  %64 = add i8 %61, %63
  %65 = mul i8 39, %64
  %66 = add i8 23, %65
  %67 = mul i8 -105, %66
  %68 = add i8 111, %67
  %69 = mul i8 %59, %68
  %70 = srem i8 %69, 4
  %71 = icmp eq i8 %70, 0
  %72 = mul i8 %17, %17
  %73 = add i8 %72, %17
  %74 = srem i8 %73, 2
  %75 = icmp eq i8 %74, 0
  %76 = and i1 %71, %75
  %77 = xor i1 %71, %75
  %78 = or i1 %76, %77
  %79 = select i1 %78, i32 984876159, i32 984876127
  %80 = xor i32 %79, 32
  store i32 %80, i32* %2, align 4
  %81 = call i8** @bf6338069988336422972(i32* %2)
  %82 = load i8*, i8** %81, align 8
  indirectbr i8* %82, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.19.extracted([51 x i32]* %lookupTable, i32 %0, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876107)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.19.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876155)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.19.extracted, %8), i8** %5, align 8
  store i32 984876155, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %9 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %0, -1488214492
  %12 = sub i32 %11, %10
  %13 = add i32 %12, -1488214492
  store i32 %13, i32* %dispatcher, align 4
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = and i8 %15, 1
  %17 = icmp eq i8 %16, 0
  %18 = mul i8 %15, %15
  %19 = and i8 %18, %15
  %20 = or i8 %18, %15
  %21 = add i8 %19, %20
  %22 = mul i8 %21, 3
  %23 = or i64 %2, -6239258869353408071
  %24 = xor i64 %2, -1
  %25 = and i64 %24, 810333685818069112
  %26 = and i64 %2, -810333685818069113
  %27 = or i64 %25, %26
  %28 = xor i64 -6748836266587715135, %27
  %29 = xor i64 %2, -1
  %30 = or i64 6239258869353408070, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = or i64 %28, %32
  %34 = sext i32 %0 to i64
  %35 = and i64 %34, -1355775229730336022
  %36 = xor i64 %34, -1
  %37 = or i64 1355775229730336021, %36
  %38 = xor i64 %37, -1
  %39 = and i64 %38, -1
  %40 = sext i32 %0 to i64
  %41 = and i64 %40, 8791896702017764068
  %42 = or i64 -8791896702017764069, %40
  %43 = sub i64 %42, -8791896702017764069
  %44 = xor i64 %43, %33
  %45 = xor i64 %44, %39
  %46 = xor i64 %45, %35
  %47 = xor i64 %46, 8114941601544621499
  %48 = xor i64 %47, %41
  %49 = xor i64 %48, %23
  %50 = and i64 %4, 4671346153493283258
  %51 = or i64 -4671346153493283259, %4
  %52 = sub i64 %51, -4671346153493283259
  %53 = and i64 %2, -4726002560663093355
  %54 = xor i64 %2, -1
  %55 = or i64 4726002560663093354, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = add i64 %4, -5608298523919145467
  %59 = add i64 3714345327637242388, %4
  %60 = sub i64 %59, -9124100222153163761
  %61 = xor i64 %50, %57
  %62 = xor i64 %61, %52
  %63 = xor i64 %62, %60
  %64 = xor i64 %63, -1103138919401070874
  %65 = xor i64 %64, %58
  %66 = xor i64 %65, %53
  %67 = mul i64 %49, %66
  %68 = trunc i64 %67 to i8
  %69 = srem i8 %22, %68
  %70 = icmp eq i8 %69, 0
  %71 = xor i1 %17, true
  %72 = and i1 %71, false
  %73 = and i1 %17, true
  %74 = or i1 %72, %73
  %75 = xor i1 %70, true
  %76 = and i1 %75, false
  %77 = add i64 %2, -6592950074051946762
  %78 = sub i64 0, %2
  %79 = add i64 6592950074051946762, %78
  %80 = sub i64 0, %79
  %81 = or i64 %4, 8045958302764444937
  %82 = and i64 8045958302764444937, %4
  %83 = xor i64 8045958302764444937, %4
  %84 = or i64 %82, %83
  %85 = xor i64 2567758192593674703, %84
  %86 = xor i64 %85, %81
  %87 = xor i64 %86, %80
  %88 = xor i64 %87, %77
  %89 = and i64 %2, -4065544690210295215
  %90 = xor i64 %2, -1
  %91 = or i64 4065544690210295214, %90
  %92 = xor i64 %91, -1
  %93 = and i64 %92, -1
  %94 = add i64 %4, -6743081230774552077
  %95 = sub i64 0, %4
  %96 = add i64 6743081230774552077, %95
  %97 = sub i64 0, %96
  %98 = or i64 %4, -8899988403287140953
  %99 = and i64 -8899988403287140953, %4
  %100 = xor i64 -8899988403287140953, %4
  %101 = or i64 %99, %100
  %102 = xor i64 %93, %97
  %103 = xor i64 %102, %94
  %104 = xor i64 %103, %101
  %105 = xor i64 %104, %98
  %106 = xor i64 %105, 6616231865987515695
  %107 = xor i64 %106, %89
  %108 = mul i64 %88, %107
  %109 = trunc i64 %108 to i1
  %110 = and i1 %70, %109
  %111 = or i1 %76, %110
  %112 = xor i1 %74, %111
  %113 = xor i1 %17, true
  %114 = or i64 %2, 5523759483941789883
  %115 = xor i64 %2, -1
  %116 = and i64 %115, -1158345942166014894
  %117 = and i64 %2, 1158345942166014893
  %118 = or i64 %116, %117
  %119 = xor i64 -6681952628049029911, %118
  %120 = xor i64 %2, -1
  %121 = or i64 -5523759483941789884, %120
  %122 = xor i64 %121, -1
  %123 = and i64 %122, -1
  %124 = or i64 %119, %123
  %125 = or i64 %4, -5095451420533070596
  %126 = xor i64 %4, -1
  %127 = and i64 %126, -6099747916463408343
  %128 = and i64 %4, 6099747916463408342
  %129 = or i64 %127, %128
  %130 = xor i64 1301547406774050773, %129
  %131 = xor i64 %4, -1
  %132 = or i64 5095451420533070595, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = or i64 %130, %134
  %136 = xor i64 %114, %125
  %137 = xor i64 %136, %124
  %138 = xor i64 %137, %135
  %139 = xor i64 %138, -3771846093416563489
  %140 = sext i32 %0 to i64
  %141 = and i64 %140, -3608035431825059125
  %142 = xor i64 %140, -1
  %143 = xor i64 -3608035431825059125, %142
  %144 = and i64 %143, -3608035431825059125
  %145 = add i64 %4, 4896407956304697897
  %146 = add i64 -9119292112334887084, %4
  %147 = sub i64 %146, 4431044005069966635
  %148 = sext i32 %0 to i64
  %149 = or i64 %148, -8027317273602660533
  %150 = xor i64 %148, -1
  %151 = and i64 %150, -5776251758383780556
  %152 = and i64 %148, 5776251758383780555
  %153 = or i64 %151, %152
  %154 = xor i64 4562037405246376575, %153
  %155 = xor i64 %148, -1
  %156 = or i64 8027317273602660532, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = xor i64 %159, %145
  %161 = xor i64 %160, %141
  %162 = xor i64 %161, -2452321402155122913
  %163 = xor i64 %162, %147
  %164 = xor i64 %163, %144
  %165 = xor i64 %164, %149
  %166 = mul i64 %139, %165
  %167 = trunc i64 %166 to i1
  %168 = xor i1 %70, %167
  %169 = or i1 %113, %168
  %170 = xor i1 %169, true
  %171 = and i1 %170, true
  %172 = or i1 %112, %171
  %173 = select i1 %172, i32 984876107, i32 984876107
  %174 = xor i32 %173, 0
  store i32 %174, i32* %1, align 4
  %175 = call i8** @bf6338069988336422972(i32* %1)
  %176 = load i8*, i8** %175, align 8
  indirectbr i8* %176, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.20.extracted([51 x i32]* %lookupTable, i1* %.reg2mem74, i32 %0, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = sext i32 %0 to i64
  %2 = or i64 %1, -8432881687914499823
  %3 = xor i64 %1, -1
  %4 = and i64 %3, 5116221697907559358
  %5 = and i64 %1, -5116221697907559359
  %6 = or i64 %4, %5
  %7 = xor i64 -3605102578308171089, %6
  %8 = xor i64 %1, -1
  %9 = or i64 8432881687914499822, %8
  %10 = xor i64 %9, -1
  %11 = and i64 %10, -1
  %12 = or i64 %7, %11
  %13 = sext i32 %0 to i64
  %14 = add i64 %13, 1663129517047361182
  %15 = and i64 1663129517047361182, %13
  %16 = or i64 1663129517047361182, %13
  %17 = add i64 %15, %16
  %18 = sext i32 %0 to i64
  %19 = add i64 %18, 8518106144405577328
  %20 = sub i64 0, %18
  %21 = add i64 -8518106144405577328, %20
  %22 = sub i64 0, %21
  %23 = xor i64 4568271308282946571, %22
  %24 = xor i64 %23, %19
  %25 = xor i64 %24, %14
  %26 = xor i64 %25, %12
  %27 = xor i64 %26, %2
  %28 = xor i64 %27, %17
  %29 = sext i32 %0 to i64
  %30 = and i64 %29, 9018734299223317611
  %31 = xor i64 %29, -1
  %32 = xor i64 9018734299223317611, %31
  %33 = and i64 %32, 9018734299223317611
  %34 = sext i32 %0 to i64
  %35 = add i64 %34, 4526075166116964667
  %36 = and i64 4526075166116964667, %34
  %37 = or i64 4526075166116964667, %34
  %38 = add i64 %36, %37
  %39 = sext i32 %0 to i64
  %40 = or i64 %39, 5219839889393184548
  %41 = and i64 5219839889393184548, %39
  %42 = xor i64 5219839889393184548, %39
  %43 = or i64 %41, %42
  %44 = xor i64 %30, -2138919377125505117
  %45 = xor i64 %44, %43
  %46 = xor i64 %45, %40
  %47 = xor i64 %46, %35
  %48 = xor i64 %47, %33
  %49 = xor i64 %48, %38
  %50 = mul i64 %28, %49
  %51 = trunc i64 %50 to i32
  %52 = alloca i32, i32 %51, align 4
  %53 = call i64 @h6542867261474098886(i64 984876129)
  %54 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %53
  store i8* blockaddress(@main.extracted.20.extracted, %loopEnd.exitStub.exitStub), i8** %54, align 8
  %55 = call i64 @h6542867261474098886(i64 984876148)
  %56 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %55
  store i8* blockaddress(@main.extracted.20.extracted, %101), i8** %56, align 8
  %57 = sext i32 %0 to i64
  %58 = or i64 %57, -8737071575948506920
  %59 = xor i64 %57, -1
  %60 = and i64 %59, 5214131076488633684
  %61 = and i64 %57, -5214131076488633685
  %62 = or i64 %60, %61
  %63 = xor i64 -3538704335187520116, %62
  %64 = xor i64 %57, -1
  %65 = or i64 8737071575948506919, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = or i64 %63, %67
  %69 = sext i32 %0 to i64
  %70 = and i64 %69, 2226509871622598842
  %71 = or i64 -2226509871622598843, %69
  %72 = sub i64 %71, -2226509871622598843
  %73 = xor i64 %70, -2604333765107511589
  %74 = xor i64 %73, %58
  %75 = xor i64 %74, %72
  %76 = xor i64 %75, %68
  %77 = sext i32 %0 to i64
  %78 = and i64 %77, -6870051902580205127
  %79 = or i64 6870051902580205126, %77
  %80 = sub i64 %79, 6870051902580205126
  %81 = sext i32 %0 to i64
  %82 = and i64 %81, -4316525026820616441
  %83 = or i64 4316525026820616440, %81
  %84 = sub i64 %83, 4316525026820616440
  %85 = sext i32 %0 to i64
  %86 = and i64 %85, -8343945977582662655
  %87 = xor i64 %85, -1
  %88 = or i64 8343945977582662654, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = xor i64 %78, %82
  %92 = xor i64 %91, %90
  %93 = xor i64 %92, %84
  %94 = xor i64 %93, %80
  %95 = xor i64 %94, 3391328879348094364
  %96 = xor i64 %95, %86
  %97 = mul i64 %76, %96
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %52, align 4
  %99 = call i8** @bf6338069988336422972(i32* %52)
  %100 = load i8*, i8** %99, align 8
  indirectbr i8* %100, [label %101]

101:                                              ; preds = %101, %newFuncRoot
  %102 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %105 = load i32, i32* %104, align 4
  %106 = srem i32 %103, %105
  %.reload76 = load i1, i1* %.reg2mem74, align 1
  %107 = select i1 %.reload76, i32 %0, i32 %106
  store i32 %107, i32* %dispatcher, align 4
  %108 = load i8*, i8** %54, align 8
  %109 = load i8, i8* %108, align 1
  %110 = mul i8 %109, 2
  %111 = mul i8 %109, 2
  %112 = add i8 2, %111
  %113 = mul i8 %110, %112
  %114 = srem i8 %113, 4
  %115 = icmp eq i8 %114, 0
  %116 = mul i8 %109, %109
  %117 = mul i8 %116, %109
  %118 = add i8 %117, %109
  %119 = sext i32 %0 to i64
  %120 = or i64 %119, -1522752279429337601
  %121 = xor i64 %119, -1
  %122 = and i64 %121, -4605841964723454802
  %123 = and i64 %119, 4605841964723454801
  %124 = or i64 %122, %123
  %125 = xor i64 3083518772122784081, %124
  %126 = xor i64 %119, -1
  %127 = or i64 1522752279429337600, %126
  %128 = xor i64 %127, -1
  %129 = and i64 %128, -1
  %130 = or i64 %125, %129
  %131 = sext i32 %0 to i64
  %132 = and i64 %131, -4469881232197547215
  %133 = xor i64 %131, -1
  %134 = or i64 4469881232197547214, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = xor i64 %132, %120
  %138 = xor i64 %137, %130
  %139 = xor i64 %138, %136
  %140 = xor i64 %139, 4141336004042645837
  %141 = add i64 %53, -2109959712829305813
  %142 = sub i64 0, %53
  %143 = sub i64 -2109959712829305813, %142
  %144 = or i64 %55, 1662611957288471889
  %145 = and i64 1662611957288471889, %55
  %146 = xor i64 1662611957288471889, %55
  %147 = or i64 %145, %146
  %148 = sext i32 %0 to i64
  %149 = add i64 %148, 8726150994284678631
  %150 = xor i64 8726150994284678631, %148
  %151 = and i64 8726150994284678631, %148
  %152 = mul i64 2, %151
  %153 = add i64 %150, %152
  %154 = xor i64 %141, %149
  %155 = xor i64 %154, %143
  %156 = xor i64 %155, %153
  %157 = xor i64 %156, %147
  %158 = xor i64 %157, 5099721500861497098
  %159 = xor i64 %158, %144
  %160 = mul i64 %140, %159
  %161 = trunc i64 %160 to i8
  %162 = srem i8 %118, %161
  %163 = icmp eq i8 %162, 0
  %164 = xor i1 %115, true
  %165 = or i1 %164, %163
  %166 = xor i1 %115, true
  %167 = sub i1 %165, %166
  %168 = and i64 %55, 1214803855231377442
  %169 = xor i64 %55, -1
  %170 = or i64 -1214803855231377443, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %53, -4321755155008593776
  %174 = xor i64 %53, -1
  %175 = and i64 -4321755155008593776, %174
  %176 = add i64 %175, %53
  %177 = sext i32 %0 to i64
  %178 = and i64 %177, 7126519764475862680
  %179 = xor i64 %177, -1
  %180 = or i64 -7126519764475862681, %179
  %181 = xor i64 %180, -1
  %182 = and i64 %181, -1
  %183 = xor i64 %176, %178
  %184 = xor i64 %183, %168
  %185 = xor i64 %184, %182
  %186 = xor i64 %185, %173
  %187 = xor i64 %186, %172
  %188 = xor i64 %187, 2401927260973029289
  %189 = add i64 %53, 4767242082639435949
  %190 = add i64 7785826432993562177, %53
  %191 = add i64 %190, -3018584350354126228
  %192 = or i64 %55, 685862414953256795
  %193 = and i64 685862414953256795, %55
  %194 = xor i64 685862414953256795, %55
  %195 = or i64 %193, %194
  %196 = add i64 %55, -9009829946010323638
  %197 = add i64 -4092616236609811173, %55
  %198 = add i64 %197, -4917213709400512465
  %199 = xor i64 %191, %198
  %200 = xor i64 %199, %196
  %201 = xor i64 %200, %192
  %202 = xor i64 %201, %195
  %203 = xor i64 %202, %189
  %204 = xor i64 %203, 7731005172778129913
  %205 = mul i64 %188, %204
  %206 = trunc i64 %205 to i32
  %207 = select i1 %167, i32 984876129, i32 %206
  %208 = xor i32 %207, 0
  store i32 %208, i32* %52, align 4
  %209 = call i8** @bf6338069988336422972(i32* %52)
  %210 = load i8*, i8** %209, align 8
  indirectbr i8* %210, [label %loopEnd.exitStub.exitStub, label %101]

loopEnd.exitStub.exitStub:                        ; preds = %101
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.21.extracted([51 x i32]* %lookupTable, i32 %0, i1 %1, i32* %dispatcher) #5 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876122)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.21.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876097)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.21.extracted, %9), i8** %6, align 8
  store i32 984876097, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 30
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %0, %11
  %13 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 41
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %14, %16
  %18 = select i1 %1, i32 %12, i32 %17
  store i32 %18, i32* %dispatcher, align 4
  %19 = load i8*, i8** %4, align 8
  %20 = load i8, i8* %19, align 1
  %21 = mul i8 %20, 2
  %22 = or i64 %3, -5083112395119352849
  %23 = and i64 -5083112395119352849, %3
  %24 = xor i64 -5083112395119352849, %3
  %25 = or i64 %23, %24
  %26 = sext i32 %0 to i64
  %27 = add i64 %26, 8896711862612767656
  %28 = sub i64 0, %26
  %29 = add i64 -8896711862612767656, %28
  %30 = sub i64 0, %29
  %31 = sext i32 %0 to i64
  %32 = add i64 %31, 5489156382151013872
  %33 = xor i64 5489156382151013872, %31
  %34 = and i64 5489156382151013872, %31
  %35 = mul i64 2, %34
  %36 = add i64 %33, %35
  %37 = xor i64 %22, -8922782659019687243
  %38 = xor i64 %37, %27
  %39 = xor i64 %38, %32
  %40 = xor i64 %39, %36
  %41 = xor i64 %40, %25
  %42 = xor i64 %41, %30
  %43 = or i64 %5, 1956418990563816070
  %44 = xor i64 %5, -1
  %45 = and i64 1956418990563816070, %44
  %46 = add i64 %45, %5
  %47 = and i64 %5, -6009508492137542629
  %48 = xor i64 %5, -1
  %49 = xor i64 -6009508492137542629, %48
  %50 = and i64 %49, -6009508492137542629
  %51 = xor i64 %50, %47
  %52 = xor i64 %51, 4593256226489222970
  %53 = xor i64 %52, %46
  %54 = xor i64 %53, %43
  %55 = mul i64 %42, %54
  %56 = trunc i64 %55 to i8
  %57 = mul i8 %20, %56
  %58 = sub i8 0, %57
  %59 = sub i8 2, %58
  %60 = mul i8 %21, %59
  %61 = srem i8 %60, 4
  %62 = add i64 %3, -995016004458577864
  %63 = add i64 4835894119461324157, %3
  %64 = add i64 %63, -5830910123919902021
  %65 = and i64 %3, 7661742532851211197
  %66 = xor i64 %3, -1
  %67 = xor i64 7661742532851211197, %66
  %68 = and i64 %67, 7661742532851211197
  %69 = or i64 %3, 6693181453482102430
  %70 = and i64 6693181453482102430, %3
  %71 = xor i64 6693181453482102430, %3
  %72 = or i64 %70, %71
  %73 = xor i64 %68, %62
  %74 = xor i64 %73, %64
  %75 = xor i64 %74, %69
  %76 = xor i64 %75, %72
  %77 = xor i64 %76, %65
  %78 = xor i64 %77, -6257359560281409471
  %79 = add i64 %5, 4262121403973289515
  %80 = add i64 2749693389567636124, %5
  %81 = add i64 %80, 1512428014405653391
  %82 = or i64 %5, 7079642825065423900
  %83 = and i64 7079642825065423900, %5
  %84 = xor i64 7079642825065423900, %5
  %85 = or i64 %83, %84
  %86 = xor i64 %85, %81
  %87 = xor i64 %86, %79
  %88 = xor i64 %87, 0
  %89 = xor i64 %88, %82
  %90 = mul i64 %78, %89
  %91 = trunc i64 %90 to i8
  %92 = icmp eq i8 %61, %91
  %93 = mul i8 %20, %20
  %94 = add i8 %93, %20
  %95 = and i64 %3, 2644040284374801042
  %96 = xor i64 %3, -1
  %97 = xor i64 2644040284374801042, %96
  %98 = and i64 %97, 2644040284374801042
  %99 = add i64 %5, 967908508325168082
  %100 = add i64 -1433693036432946037, %5
  %101 = sub i64 %100, -2401601544758114119
  %102 = xor i64 %99, -598790791930297765
  %103 = xor i64 %102, %101
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, %95
  %106 = sext i32 %0 to i64
  %107 = add i64 %106, -7764612032440530020
  %108 = add i64 -4649194821288633872, %106
  %109 = add i64 %108, -3115417211151896148
  %110 = or i64 %5, 4560382178570014497
  %111 = xor i64 %5, -1
  %112 = and i64 %111, 917083737588309095
  %113 = and i64 %5, -917083737588309096
  %114 = or i64 %112, %113
  %115 = xor i64 3743504632472474438, %114
  %116 = xor i64 %5, -1
  %117 = or i64 -4560382178570014498, %116
  %118 = xor i64 %117, -1
  %119 = and i64 %118, -1
  %120 = or i64 %115, %119
  %121 = sext i32 %0 to i64
  %122 = and i64 %121, -7295325342430259776
  %123 = or i64 7295325342430259775, %121
  %124 = sub i64 %123, 7295325342430259775
  %125 = xor i64 -3736667221581218906, %107
  %126 = xor i64 %125, %109
  %127 = xor i64 %126, %124
  %128 = xor i64 %127, %110
  %129 = xor i64 %128, %120
  %130 = xor i64 %129, %122
  %131 = mul i64 %105, %130
  %132 = trunc i64 %131 to i8
  %133 = srem i8 %94, %132
  %134 = icmp eq i8 %133, 0
  %135 = xor i1 %92, true
  %136 = or i1 %135, %134
  %137 = add i64 %5, -1855687370258649282
  %138 = xor i64 -1855687370258649282, %5
  %139 = and i64 -1855687370258649282, %5
  %140 = mul i64 2, %139
  %141 = add i64 %138, %140
  %142 = or i64 %3, -8525893719292847526
  %143 = xor i64 %3, -1
  %144 = and i64 -8525893719292847526, %143
  %145 = add i64 %144, %3
  %146 = xor i64 %145, %137
  %147 = xor i64 %146, %142
  %148 = xor i64 %147, %141
  %149 = xor i64 %148, 1977803111987509245
  %150 = or i64 %3, 7891663882731499707
  %151 = xor i64 %3, -1
  %152 = and i64 %151, -4798398433812827387
  %153 = and i64 %3, 4798398433812827386
  %154 = or i64 %152, %153
  %155 = xor i64 -3392203990623714370, %154
  %156 = xor i64 %3, -1
  %157 = or i64 -7891663882731499708, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = or i64 %155, %159
  %161 = sext i32 %0 to i64
  %162 = or i64 %161, 2667797884815918523
  %163 = and i64 2667797884815918523, %161
  %164 = xor i64 2667797884815918523, %161
  %165 = or i64 %163, %164
  %166 = xor i64 %150, %162
  %167 = xor i64 %166, -4774190726845719211
  %168 = xor i64 %167, %165
  %169 = xor i64 %168, %160
  %170 = mul i64 %149, %169
  %171 = trunc i64 %170 to i1
  %172 = xor i1 %92, %171
  %173 = sub i1 %136, %172
  %174 = select i1 %173, i32 984876097, i32 984876122
  %175 = xor i32 %174, -1
  %176 = and i32 %175, 27
  %177 = add i64 %3, 857246623888817611
  %178 = add i64 -7365604978952840347, %3
  %179 = sub i64 %178, -8222851602841657958
  %180 = or i64 %3, 379606997567441929
  %181 = xor i64 %3, -1
  %182 = and i64 379606997567441929, %181
  %183 = add i64 %182, %3
  %184 = xor i64 %180, %177
  %185 = xor i64 %184, %179
  %186 = xor i64 %185, %183
  %187 = xor i64 %186, 6987348917500698871
  %188 = sext i32 %0 to i64
  %189 = add i64 %188, -5663450242988870823
  %190 = add i64 2114915604947900944, %188
  %191 = sub i64 %190, 7778365847936771767
  %192 = add i64 %3, 6570065102212012838
  %193 = add i64 -7261908328783284283, %3
  %194 = add i64 %193, -4614770642714254495
  %195 = and i64 %5, -4988403470674436319
  %196 = or i64 4988403470674436318, %5
  %197 = sub i64 %196, 4988403470674436318
  %198 = xor i64 -3689533002831140292, %194
  %199 = xor i64 %198, %192
  %200 = xor i64 %199, %197
  %201 = xor i64 %200, %189
  %202 = xor i64 %201, %195
  %203 = xor i64 %202, %191
  %204 = mul i64 %187, %203
  %205 = trunc i64 %204 to i32
  %206 = and i32 %174, %205
  %207 = or i32 %176, %206
  store i32 %207, i32* %2, align 4
  %208 = call i8** @bf6338069988336422972(i32* %2)
  %209 = load i8*, i8** %208, align 8
  indirectbr i8* %209, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.22.extracted(i32* %.reg2mem77, i32 %0, i1* %.reg2mem83, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876156)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.22.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876109)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.22.extracted, %8), i8** %5, align 8
  store i32 984876109, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %.reload81 = load i32, i32* %.reg2mem77, align 4
  %9 = sub i32 %0, 16217932
  %10 = add i32 %9, %.reload81
  %11 = add i32 %10, 16217932
  %12 = mul i32 %11, 3
  %13 = srem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %.reload80 = load i32, i32* %.reg2mem77, align 4
  %15 = mul i32 %.reload80, %.reload80
  %.reload79 = load i32, i32* %.reg2mem77, align 4
  %16 = add i32 %15, 1783617179
  %17 = add i32 %16, %.reload79
  %18 = sub i32 %17, 1783617179
  %19 = and i64 %2, -5987862403248104569
  %20 = or i64 5987862403248104568, %2
  %21 = sub i64 %20, 5987862403248104568
  %22 = sext i32 %0 to i64
  %23 = and i64 %22, 5156246938150580120
  %24 = or i64 -5156246938150580121, %22
  %25 = sub i64 %24, -5156246938150580121
  %26 = and i64 %4, 5798535931715240817
  %27 = xor i64 %4, -1
  %28 = or i64 -5798535931715240818, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = xor i64 %26, %21
  %32 = xor i64 %31, %19
  %33 = xor i64 %32, 290585536351275163
  %34 = xor i64 %33, %25
  %35 = xor i64 %34, %30
  %36 = xor i64 %35, %23
  %37 = sext i32 %0 to i64
  %38 = add i64 %37, 2381039209611104751
  %39 = and i64 2381039209611104751, %37
  %40 = or i64 2381039209611104751, %37
  %41 = add i64 %39, %40
  %42 = or i64 %2, 844733262129926200
  %43 = xor i64 %2, -1
  %44 = and i64 844733262129926200, %43
  %45 = add i64 %44, %2
  %46 = add i64 %4, -4988684658043214005
  %47 = sub i64 0, %4
  %48 = sub i64 -4988684658043214005, %47
  %49 = xor i64 %42, %45
  %50 = xor i64 %49, %46
  %51 = xor i64 %50, %38
  %52 = xor i64 %51, %41
  %53 = xor i64 %52, %48
  %54 = xor i64 %53, 5774236574717197094
  %55 = mul i64 %36, %54
  %56 = trunc i64 %55 to i32
  %57 = srem i32 %18, %56
  %58 = icmp eq i32 %57, 0
  %59 = and i1 %14, %58
  store i1 %59, i1* %.reg2mem83, align 1
  %60 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 25
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %63 = load i32, i32* %62, align 4
  %64 = srem i32 %61, %63
  %65 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 24
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 50
  %68 = load i32, i32* %67, align 4
  %69 = srem i32 %66, %68
  %.reload85 = load i1, i1* %.reg2mem83, align 1
  %70 = select i1 %.reload85, i32 %64, i32 %69
  store i32 %70, i32* %dispatcher, align 4
  %71 = load i8*, i8** %5, align 8
  %72 = load i8, i8* %71, align 1
  %73 = xor i8 %72, -2
  %74 = and i8 %73, %72
  %75 = icmp eq i8 %74, 1
  %76 = mul i8 %72, %72
  %77 = or i64 %4, -5932062567736295863
  %78 = xor i64 %4, -1
  %79 = and i64 %78, -1322400506615994134
  %80 = and i64 %4, 1322400506615994133
  %81 = or i64 %79, %80
  %82 = xor i64 4614209641502791331, %81
  %83 = xor i64 %4, -1
  %84 = or i64 5932062567736295862, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = sext i32 %0 to i64
  %89 = and i64 %88, -9000162132186557672
  %90 = xor i64 %88, -1
  %91 = or i64 9000162132186557671, %90
  %92 = xor i64 %91, -1
  %93 = and i64 %92, -1
  %94 = sext i32 %0 to i64
  %95 = or i64 %94, 4349524880793099678
  %96 = and i64 4349524880793099678, %94
  %97 = xor i64 4349524880793099678, %94
  %98 = or i64 %96, %97
  %99 = xor i64 -5125294126684309933, %95
  %100 = xor i64 %99, %93
  %101 = xor i64 %100, %98
  %102 = xor i64 %101, %77
  %103 = xor i64 %102, %89
  %104 = xor i64 %103, %87
  %105 = or i64 %2, -3896176751860526089
  %106 = and i64 -3896176751860526089, %2
  %107 = xor i64 -3896176751860526089, %2
  %108 = or i64 %106, %107
  %109 = or i64 %2, -7415595849631361076
  %110 = xor i64 %2, -1
  %111 = and i64 %110, -4430851886487724853
  %112 = and i64 %2, 4430851886487724852
  %113 = or i64 %111, %112
  %114 = xor i64 6599164826291473159, %113
  %115 = xor i64 %2, -1
  %116 = or i64 7415595849631361075, %115
  %117 = xor i64 %116, -1
  %118 = and i64 %117, -1
  %119 = or i64 %114, %118
  %120 = and i64 %2, 7269226091800023825
  %121 = xor i64 %2, -1
  %122 = or i64 -7269226091800023826, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = xor i64 %105, %120
  %126 = xor i64 %125, 0
  %127 = xor i64 %126, %124
  %128 = xor i64 %127, %119
  %129 = xor i64 %128, %108
  %130 = xor i64 %129, %109
  %131 = mul i64 %104, %130
  %132 = trunc i64 %131 to i8
  %133 = sub i8 %132, %76
  %134 = sub i8 0, %72
  %135 = add i8 %133, %134
  %136 = sub i8 0, %135
  %137 = srem i8 %136, 2
  %138 = sext i32 %0 to i64
  %139 = add i64 %138, -6385656916254854
  %140 = and i64 -6385656916254854, %138
  %141 = or i64 -6385656916254854, %138
  %142 = add i64 %140, %141
  %143 = or i64 %4, -7535804957874044011
  %144 = xor i64 %4, -1
  %145 = and i64 %144, -8249189211592257404
  %146 = and i64 %4, 8249189211592257403
  %147 = or i64 %145, %146
  %148 = xor i64 1940927534074254097, %147
  %149 = xor i64 %4, -1
  %150 = or i64 7535804957874044010, %149
  %151 = xor i64 %150, -1
  %152 = and i64 %151, -1
  %153 = or i64 %148, %152
  %154 = and i64 %2, -4110244999528736098
  %155 = xor i64 %2, -1
  %156 = xor i64 -4110244999528736098, %155
  %157 = and i64 %156, -4110244999528736098
  %158 = xor i64 %139, %143
  %159 = xor i64 %158, %157
  %160 = xor i64 %159, %153
  %161 = xor i64 %160, -8223275453274656743
  %162 = xor i64 %161, %154
  %163 = xor i64 %162, %142
  %164 = add i64 %2, -3210196270550815042
  %165 = and i64 -3210196270550815042, %2
  %166 = or i64 -3210196270550815042, %2
  %167 = add i64 %165, %166
  %168 = sext i32 %0 to i64
  %169 = add i64 %168, -3987079956468164567
  %170 = add i64 -1131837494343268175, %168
  %171 = sub i64 %170, 2855242462124896392
  %172 = xor i64 %167, %171
  %173 = xor i64 %172, 0
  %174 = xor i64 %173, %164
  %175 = xor i64 %174, %169
  %176 = mul i64 %163, %175
  %177 = trunc i64 %176 to i8
  %178 = icmp eq i8 %137, %177
  %179 = xor i1 %75, true
  %180 = and i1 %179, false
  %181 = and i1 %75, true
  %182 = or i1 %180, %181
  %183 = xor i1 %178, true
  %184 = and i1 %183, false
  %185 = add i64 %2, 1753804322687158266
  %186 = and i64 1753804322687158266, %2
  %187 = or i64 1753804322687158266, %2
  %188 = add i64 %186, %187
  %189 = add i64 %4, -6448740123651515755
  %190 = xor i64 -6448740123651515755, %4
  %191 = and i64 -6448740123651515755, %4
  %192 = mul i64 2, %191
  %193 = add i64 %190, %192
  %194 = xor i64 %188, %189
  %195 = xor i64 %194, %193
  %196 = xor i64 %195, %185
  %197 = xor i64 %196, -259191029687205263
  %198 = or i64 %4, 433125121321840496
  %199 = xor i64 %4, -1
  %200 = and i64 %199, 8261449741082622686
  %201 = and i64 %4, -8261449741082622687
  %202 = or i64 %200, %201
  %203 = xor i64 8404937106985014702, %202
  %204 = xor i64 %4, -1
  %205 = or i64 -433125121321840497, %204
  %206 = xor i64 %205, -1
  %207 = and i64 %206, -1
  %208 = or i64 %203, %207
  %209 = sext i32 %0 to i64
  %210 = or i64 %209, -1738127060924026502
  %211 = xor i64 %209, -1
  %212 = and i64 %211, 1290927135765301741
  %213 = and i64 %209, -1290927135765301742
  %214 = or i64 %212, %213
  %215 = xor i64 -717578919563937641, %214
  %216 = xor i64 %209, -1
  %217 = or i64 1738127060924026501, %216
  %218 = xor i64 %217, -1
  %219 = and i64 %218, -1
  %220 = or i64 %215, %219
  %221 = xor i64 %210, %198
  %222 = xor i64 %221, %220
  %223 = xor i64 %222, %208
  %224 = xor i64 %223, 3015198294400614033
  %225 = mul i64 %197, %224
  %226 = trunc i64 %225 to i1
  %227 = and i1 %178, %226
  %228 = or i1 %184, %227
  %229 = xor i1 %182, %228
  %230 = xor i1 %75, true
  %231 = xor i1 %178, true
  %232 = or i1 %230, %231
  %233 = xor i1 %232, true
  %234 = and i1 %233, true
  %235 = or i1 %229, %234
  %236 = select i1 %235, i32 984876156, i32 984876156
  %237 = xor i32 %236, 0
  store i32 %237, i32* %1, align 4
  %238 = call i8** @bf6338069988336422972(i32* %1)
  %239 = load i8*, i8** %238, align 8
  indirectbr i8* %239, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.23.extracted([51 x i32]* %lookupTable, i32 %0, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876135)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.23.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876126)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.23.extracted, %8), i8** %5, align 8
  store i32 984876126, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %9 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 14
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %0, %10
  store i32 %11, i32* %dispatcher, align 4
  %12 = load i8*, i8** %3, align 8
  %13 = load i8, i8* %12, align 1
  %14 = mul i8 %13, 2
  %15 = mul i8 %13, 2
  %16 = add i8 2, %15
  %17 = mul i8 %14, %16
  %18 = and i64 %4, 1027971197121808466
  %19 = xor i64 %4, -1
  %20 = xor i64 1027971197121808466, %19
  %21 = and i64 %20, 1027971197121808466
  %22 = add i64 %2, -6090724965165219956
  %23 = xor i64 -6090724965165219956, %2
  %24 = and i64 -6090724965165219956, %2
  %25 = mul i64 2, %24
  %26 = add i64 %23, %25
  %27 = xor i64 %18, %21
  %28 = xor i64 %27, %26
  %29 = xor i64 %28, 6773871002912160509
  %30 = xor i64 %29, %22
  %31 = sext i32 %0 to i64
  %32 = and i64 %31, 4527154619257361462
  %33 = xor i64 %31, -1
  %34 = or i64 -4527154619257361463, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, -1
  %37 = sext i32 %0 to i64
  %38 = or i64 %37, 873895336493148180
  %39 = and i64 873895336493148180, %37
  %40 = xor i64 873895336493148180, %37
  %41 = or i64 %39, %40
  %42 = xor i64 %36, %41
  %43 = xor i64 %42, %32
  %44 = xor i64 %43, %38
  %45 = xor i64 %44, 9065283615267342676
  %46 = mul i64 %30, %45
  %47 = trunc i64 %46 to i8
  %48 = srem i8 %17, %47
  %49 = icmp eq i8 %48, 0
  %50 = mul i8 %13, %13
  %51 = add i8 %50, %13
  %52 = srem i8 %51, 2
  %53 = icmp eq i8 %52, 0
  %54 = or i1 %49, %53
  %55 = and i64 %2, -4351901572183520658
  %56 = or i64 4351901572183520657, %2
  %57 = sub i64 %56, 4351901572183520657
  %58 = add i64 %4, -2002284175075294270
  %59 = add i64 7884805544073835086, %4
  %60 = sub i64 %59, -8559654354560422260
  %61 = sext i32 %0 to i64
  %62 = add i64 %61, -6261035211651213258
  %63 = add i64 -5390346152556576774, %61
  %64 = sub i64 %63, 870689059094636484
  %65 = xor i64 -1793783694198903327, %57
  %66 = xor i64 %65, %60
  %67 = xor i64 %66, %58
  %68 = xor i64 %67, %62
  %69 = xor i64 %68, %64
  %70 = xor i64 %69, %55
  %71 = add i64 %2, -3455104716024287649
  %72 = and i64 -3455104716024287649, %2
  %73 = or i64 -3455104716024287649, %2
  %74 = add i64 %72, %73
  %75 = add i64 %4, 7865223433753163530
  %76 = add i64 -4233362710198578456, %4
  %77 = add i64 %76, -6348157929757809630
  %78 = or i64 %2, -8315445761108116137
  %79 = and i64 -8315445761108116137, %2
  %80 = xor i64 -8315445761108116137, %2
  %81 = or i64 %79, %80
  %82 = xor i64 %71, %78
  %83 = xor i64 %82, %77
  %84 = xor i64 %83, %74
  %85 = xor i64 %84, 3702124916258677790
  %86 = xor i64 %85, %75
  %87 = xor i64 %86, %81
  %88 = mul i64 %70, %87
  %89 = trunc i64 %88 to i32
  %90 = select i1 %54, i32 %89, i32 984876135
  %91 = xor i32 %90, 57
  store i32 %91, i32* %1, align 4
  %92 = call i8** @bf6338069988336422972(i32* %1)
  %93 = load i8*, i8** %92, align 8
  indirectbr i8* %93, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.24.extracted(i8* %.reload5, i8** %.reg2mem, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [3 x i8*], [3 x i8*]* @obfsblockAddrLookupTable15072500868116077034, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.24.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [3 x i8*], [3 x i8*]* @obfsblockAddrLookupTable15072500868116077034, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.24.extracted, %7), i8** %4, align 8
  store i32 984876136, i32* %0, align 4
  %5 = call i8** @bf7593563620049415213(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %.reload = load i8*, i8** %.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %.reload) #12
  %8 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 25
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %9, -1603912519
  %13 = sub i32 %12, %11
  %14 = and i64 %3, -4972748847978279145
  %15 = xor i64 %3, -1
  %16 = or i64 4972748847978279144, %15
  %17 = xor i64 %16, -1
  %18 = and i64 %17, -1
  %19 = add i64 %3, 7185775845172846850
  %20 = add i64 1409070753217728279, %3
  %21 = sub i64 %20, -5776705091955118571
  %22 = add i64 %1, 4801375937982999267
  %23 = xor i64 4801375937982999267, %1
  %24 = and i64 4801375937982999267, %1
  %25 = mul i64 2, %24
  %26 = add i64 %23, %25
  %27 = xor i64 %14, %22
  %28 = xor i64 %27, 1082796011942797849
  %29 = xor i64 %28, %21
  %30 = xor i64 %29, %26
  %31 = xor i64 %30, %18
  %32 = xor i64 %31, %19
  %33 = and i64 %3, 1821997538139806136
  %34 = xor i64 %3, -1
  %35 = xor i64 1821997538139806136, %34
  %36 = and i64 %35, 1821997538139806136
  %37 = add i64 %1, -8708017292218912057
  %38 = add i64 2476817550888471612, %1
  %39 = sub i64 %38, -7261909230602167947
  %40 = and i64 %1, -8023790886744736938
  %41 = or i64 8023790886744736937, %1
  %42 = sub i64 %41, 8023790886744736937
  %43 = xor i64 %40, %33
  %44 = xor i64 %43, %39
  %45 = xor i64 %44, %37
  %46 = xor i64 %45, %42
  %47 = xor i64 %46, 3443205326857651105
  %48 = xor i64 %47, %36
  %49 = mul i64 %32, %48
  %50 = trunc i64 %49 to i32
  %51 = sub i32 %13, %50
  store i32 %51, i32* %dispatcher, align 4
  %52 = load i8*, i8** %2, align 8
  %53 = load i8, i8* %52, align 1
  %54 = mul i8 %53, %53
  %55 = or i64 %3, -8434853809995802023
  %56 = and i64 -8434853809995802023, %3
  %57 = xor i64 -8434853809995802023, %3
  %58 = or i64 %56, %57
  %59 = or i64 %3, -225447337102517106
  %60 = xor i64 %3, -1
  %61 = and i64 %60, -1489326543206218164
  %62 = and i64 %3, 1489326543206218163
  %63 = or i64 %61, %62
  %64 = xor i64 1696684641656789698, %63
  %65 = xor i64 %3, -1
  %66 = or i64 225447337102517105, %65
  %67 = xor i64 %66, -1
  %68 = and i64 %67, -1
  %69 = or i64 %64, %68
  %70 = or i64 %1, -1911238579311941973
  %71 = xor i64 %1, -1
  %72 = and i64 -1911238579311941973, %71
  %73 = add i64 %72, %1
  %74 = xor i64 %55, %70
  %75 = xor i64 %74, %73
  %76 = xor i64 %75, %69
  %77 = xor i64 %76, 1534010402476134045
  %78 = xor i64 %77, %58
  %79 = xor i64 %78, %59
  %80 = add i64 %1, 6209940684162887747
  %81 = and i64 6209940684162887747, %1
  %82 = or i64 6209940684162887747, %1
  %83 = add i64 %81, %82
  %84 = or i64 %3, -8027353434218989610
  %85 = xor i64 %3, -1
  %86 = and i64 %85, -4975982602411636784
  %87 = and i64 %3, 4975982602411636783
  %88 = or i64 %86, %87
  %89 = xor i64 3055937241045430278, %88
  %90 = xor i64 %3, -1
  %91 = or i64 8027353434218989609, %90
  %92 = xor i64 %91, -1
  %93 = and i64 %92, -1
  %94 = or i64 %89, %93
  %95 = or i64 %1, -137730516323253693
  %96 = xor i64 %1, -1
  %97 = and i64 -137730516323253693, %96
  %98 = add i64 %97, %1
  %99 = xor i64 %80, %83
  %100 = xor i64 %99, 0
  %101 = xor i64 %100, %84
  %102 = xor i64 %101, %98
  %103 = xor i64 %102, %94
  %104 = xor i64 %103, %95
  %105 = mul i64 %79, %104
  %106 = trunc i64 %105 to i8
  %107 = sub i8 %106, %53
  %108 = sub i8 %54, %107
  %109 = mul i8 %108, 3
  %110 = srem i8 %109, 2
  %111 = icmp eq i8 %110, 0
  %112 = mul i8 %53, %53
  %113 = add i8 %112, %53
  %114 = srem i8 %113, 2
  %115 = icmp eq i8 %114, 0
  %116 = xor i1 %111, true
  %117 = and i64 %3, 7516575588308513322
  %118 = xor i64 %3, -1
  %119 = or i64 -7516575588308513323, %118
  %120 = xor i64 %119, -1
  %121 = and i64 %120, -1
  %122 = add i64 %3, 9138017501209683417
  %123 = and i64 9138017501209683417, %3
  %124 = or i64 9138017501209683417, %3
  %125 = add i64 %123, %124
  %126 = or i64 %3, -6026317011381354957
  %127 = and i64 -6026317011381354957, %3
  %128 = xor i64 -6026317011381354957, %3
  %129 = or i64 %127, %128
  %130 = xor i64 %126, %121
  %131 = xor i64 %130, %129
  %132 = xor i64 %131, %117
  %133 = xor i64 %132, %125
  %134 = xor i64 %133, %122
  %135 = xor i64 %134, 5050579801622839221
  %136 = and i64 %1, -533733416476999513
  %137 = xor i64 %1, -1
  %138 = xor i64 -533733416476999513, %137
  %139 = and i64 %138, -533733416476999513
  %140 = or i64 %3, -7465897169845805635
  %141 = xor i64 %3, -1
  %142 = and i64 %141, -5371930055447763846
  %143 = and i64 %3, 5371930055447763845
  %144 = or i64 %142, %143
  %145 = xor i64 3247337258175805895, %144
  %146 = xor i64 %3, -1
  %147 = or i64 7465897169845805634, %146
  %148 = xor i64 %147, -1
  %149 = and i64 %148, -1
  %150 = or i64 %145, %149
  %151 = xor i64 %139, %136
  %152 = xor i64 %151, -3732313979110672739
  %153 = xor i64 %152, %140
  %154 = xor i64 %153, %150
  %155 = mul i64 %135, %154
  %156 = trunc i64 %155 to i1
  %157 = xor i1 %115, %156
  %158 = or i1 %116, %157
  %159 = xor i1 %158, true
  %160 = and i1 %159, true
  %161 = select i1 %160, i32 984876136, i32 984876139
  %162 = or i32 %161, 3
  %163 = and i32 %161, 3
  %164 = sub i32 %162, %163
  store i32 %164, i32* %0, align 4
  %165 = call i8** @bf7593563620049415213(i32* %0)
  %166 = load i8*, i8** %165, align 8
  indirectbr i8* %166, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.25.extracted(i1 %0, i1* %.reg2mem109, i32* %.reg2mem54, [51 x i32]* %lookupTable, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876132)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.25.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876121)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.25.extracted, %8), i8** %5, align 8
  store i32 984876121, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  store i1 %0, i1* %.reg2mem109, align 1
  %.reload59 = load i32, i32* %.reg2mem54, align 4
  %9 = srem i32 %.reload59, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 18
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %12, %14
  %16 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 19
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 17
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %17, %19
  %21 = select i1 %10, i32 %15, i32 %20
  store i32 %21, i32* %dispatcher, align 4
  %22 = load i8*, i8** %3, align 8
  %23 = load i8, i8* %22, align 1
  %24 = and i8 %23, 1
  %25 = and i64 %4, -8042040207531863176
  %26 = xor i64 %4, -1
  %27 = or i64 8042040207531863175, %26
  %28 = xor i64 %27, -1
  %29 = and i64 %28, -1
  %30 = and i64 %4, -3114489123173561147
  %31 = xor i64 %4, -1
  %32 = or i64 3114489123173561146, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = xor i64 %25, %34
  %36 = xor i64 %35, %29
  %37 = xor i64 %36, 2676977606016064855
  %38 = xor i64 %37, %30
  %39 = or i64 %4, 8677323457382564107
  %40 = and i64 8677323457382564107, %4
  %41 = xor i64 8677323457382564107, %4
  %42 = or i64 %40, %41
  %43 = and i64 %2, -4719767489601304320
  %44 = or i64 4719767489601304319, %2
  %45 = sub i64 %44, 4719767489601304319
  %46 = xor i64 %43, %42
  %47 = xor i64 %46, 0
  %48 = xor i64 %47, %39
  %49 = xor i64 %48, %45
  %50 = mul i64 %38, %49
  %51 = trunc i64 %50 to i8
  %52 = icmp eq i8 %24, %51
  %53 = mul i8 %23, %23
  %54 = add i8 %53, %23
  %55 = mul i8 %54, 3
  %56 = srem i8 %55, 2
  %57 = icmp eq i8 %56, 0
  %58 = xor i1 %57, true
  %59 = and i1 %52, %58
  %60 = add i1 %59, %57
  %61 = select i1 %60, i32 984876121, i32 984876132
  %62 = and i64 %2, 6592067966387307568
  %63 = xor i64 %2, -1
  %64 = xor i64 6592067966387307568, %63
  %65 = and i64 %64, 6592067966387307568
  %66 = add i64 %2, -3569196801549777233
  %67 = add i64 1462179750403846396, %2
  %68 = add i64 %67, -5031376551953623629
  %69 = or i64 %2, -903202384881262784
  %70 = xor i64 %2, -1
  %71 = and i64 %70, -2680911474081812357
  %72 = and i64 %2, 2680911474081812356
  %73 = or i64 %71, %72
  %74 = xor i64 3007369912953368379, %73
  %75 = xor i64 %2, -1
  %76 = or i64 903202384881262783, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = or i64 %74, %78
  %80 = xor i64 %66, %65
  %81 = xor i64 %80, 3097663728036170335
  %82 = xor i64 %81, %68
  %83 = xor i64 %82, %69
  %84 = xor i64 %83, %62
  %85 = xor i64 %84, %79
  %86 = or i64 %4, 3798028218057033340
  %87 = and i64 3798028218057033340, %4
  %88 = xor i64 3798028218057033340, %4
  %89 = or i64 %87, %88
  %90 = or i64 %2, -316205294621243758
  %91 = xor i64 %2, -1
  %92 = and i64 %91, 8288907702192466835
  %93 = and i64 %2, -8288907702192466836
  %94 = or i64 %92, %93
  %95 = xor i64 -8605110778289279743, %94
  %96 = xor i64 %2, -1
  %97 = or i64 316205294621243757, %96
  %98 = xor i64 %97, -1
  %99 = and i64 %98, -1
  %100 = or i64 %95, %99
  %101 = add i64 %2, -4293815365539024680
  %102 = add i64 8523881533682864123, %2
  %103 = add i64 %102, 5629047174487662813
  %104 = xor i64 %89, %100
  %105 = xor i64 %104, %86
  %106 = xor i64 %105, %103
  %107 = xor i64 %106, %101
  %108 = xor i64 %107, %90
  %109 = xor i64 %108, -7666663798591737117
  %110 = mul i64 %85, %109
  %111 = trunc i64 %110 to i32
  %112 = xor i32 %61, %111
  store i32 %112, i32* %1, align 4
  %113 = call i8** @bf6338069988336422972(i32* %1)
  %114 = load i8*, i8** %113, align 8
  indirectbr i8* %114, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.26.extracted([51 x i32]* %lookupTable, i1* %.reg2mem111, i32* %dispatcher) #5 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876119)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.26.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876097)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.26.extracted, %7), i8** %4, align 8
  store i32 984876097, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = or i64 %3, -9094991591279169412
  %9 = xor i64 %3, -1
  %10 = and i64 %9, -5854504713653071606
  %11 = and i64 %3, 5854504713653071605
  %12 = or i64 %10, %11
  %13 = xor i64 3389107905158979958, %12
  %14 = xor i64 %3, -1
  %15 = or i64 9094991591279169411, %14
  %16 = xor i64 %15, -1
  %17 = and i64 %16, -1
  %18 = or i64 %13, %17
  %19 = and i64 %3, 8846909286841720743
  %20 = xor i64 %3, -1
  %21 = or i64 -8846909286841720744, %20
  %22 = xor i64 %21, -1
  %23 = and i64 %22, -1
  %24 = xor i64 %19, -6966967712901595435
  %25 = xor i64 %24, %8
  %26 = xor i64 %25, %18
  %27 = xor i64 %26, %23
  %28 = or i64 %3, 6371256244399804278
  %29 = xor i64 %3, -1
  %30 = and i64 %29, -7123877864674261387
  %31 = and i64 %3, 7123877864674261386
  %32 = or i64 %30, %31
  %33 = xor i64 -4230611646954731261, %32
  %34 = xor i64 %3, -1
  %35 = or i64 -6371256244399804279, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = or i64 %33, %37
  %39 = add i64 %3, -7214413074951575846
  %40 = add i64 -9107940950942879831, %3
  %41 = add i64 %40, 1893527875991303985
  %42 = or i64 %1, -6989854314080111106
  %43 = xor i64 %1, -1
  %44 = and i64 %43, -7962915879958536093
  %45 = and i64 %1, 7962915879958536092
  %46 = or i64 %44, %45
  %47 = xor i64 1117181584123155869, %46
  %48 = xor i64 %1, -1
  %49 = or i64 6989854314080111105, %48
  %50 = xor i64 %49, -1
  %51 = and i64 %50, -1
  %52 = or i64 %47, %51
  %53 = xor i64 %42, %41
  %54 = xor i64 %53, 4954475173558863413
  %55 = xor i64 %54, %39
  %56 = xor i64 %55, %28
  %57 = xor i64 %56, %52
  %58 = xor i64 %57, %38
  %59 = mul i64 %27, %58
  %60 = and i64 %3, -3097218356404759937
  %61 = xor i64 %3, -1
  %62 = or i64 3097218356404759936, %61
  %63 = xor i64 %62, -1
  %64 = and i64 %63, -1
  %65 = add i64 %1, -6492226908062663590
  %66 = add i64 -6047233115595332862, %1
  %67 = add i64 %66, -444993792467330728
  %68 = xor i64 -7390904277485974241, %67
  %69 = xor i64 %68, %65
  %70 = xor i64 %69, %60
  %71 = xor i64 %70, %64
  %72 = and i64 %1, -6126327922775278560
  %73 = or i64 6126327922775278559, %1
  %74 = sub i64 %73, 6126327922775278559
  %75 = and i64 %3, -2454211578151999995
  %76 = xor i64 %3, -1
  %77 = xor i64 -2454211578151999995, %76
  %78 = and i64 %77, -2454211578151999995
  %79 = xor i64 -1680297458765502817, %78
  %80 = xor i64 %79, %75
  %81 = xor i64 %80, %74
  %82 = xor i64 %81, %72
  %83 = mul i64 %71, %82
  %84 = sdiv i64 %59, %83
  %85 = sdiv i64 109, 6
  %86 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 33
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 %87, %89
  %91 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 28
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = sub i32 %92, %94
  %.reload112 = load i1, i1* %.reg2mem111, align 1
  %96 = select i1 %.reload112, i32 %90, i32 %95
  store i32 %96, i32* %dispatcher, align 4
  %97 = load i8*, i8** %4, align 8
  %98 = load i8, i8* %97, align 1
  %99 = mul i8 %98, %98
  %100 = add i8 %99, %98
  %101 = or i64 %1, -2737548147743778250
  %102 = xor i64 %1, -1
  %103 = and i64 -2737548147743778250, %102
  %104 = add i64 %103, %1
  %105 = add i64 %1, 4171906137692836300
  %106 = sub i64 0, %1
  %107 = sub i64 4171906137692836300, %106
  %108 = xor i64 %107, %104
  %109 = xor i64 %108, -2391929979178102789
  %110 = xor i64 %109, %101
  %111 = xor i64 %110, %105
  %112 = and i64 %3, 4282430647330163452
  %113 = xor i64 %3, -1
  %114 = or i64 -4282430647330163453, %113
  %115 = xor i64 %114, -1
  %116 = and i64 %115, -1
  %117 = add i64 %3, -3747176742022042134
  %118 = xor i64 -3747176742022042134, %3
  %119 = and i64 -3747176742022042134, %3
  %120 = mul i64 2, %119
  %121 = add i64 %118, %120
  %122 = xor i64 %117, %112
  %123 = xor i64 %122, %116
  %124 = xor i64 %123, 6421588244245916057
  %125 = xor i64 %124, %121
  %126 = mul i64 %111, %125
  %127 = trunc i64 %126 to i8
  %128 = mul i8 %100, %127
  %129 = srem i8 %128, 2
  %130 = icmp eq i8 %129, 0
  %131 = mul i8 %98, %98
  %132 = add i8 %131, %98
  %133 = srem i8 %132, 2
  %134 = icmp eq i8 %133, 0
  %135 = and i1 %130, %134
  %136 = and i64 %3, -6140982867137167599
  %137 = xor i64 %3, -1
  %138 = xor i64 -6140982867137167599, %137
  %139 = and i64 %138, -6140982867137167599
  %140 = or i64 %3, -1466161870571798655
  %141 = xor i64 %3, -1
  %142 = and i64 -1466161870571798655, %141
  %143 = add i64 %142, %3
  %144 = and i64 %3, 6063352297809286645
  %145 = xor i64 %3, -1
  %146 = or i64 -6063352297809286646, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = xor i64 %140, 7600423822033845657
  %150 = xor i64 %149, %136
  %151 = xor i64 %150, %139
  %152 = xor i64 %151, %143
  %153 = xor i64 %152, %144
  %154 = xor i64 %153, %148
  %155 = and i64 %1, 4478781874807611538
  %156 = or i64 -4478781874807611539, %1
  %157 = sub i64 %156, -4478781874807611539
  %158 = or i64 %1, 4795037263020174403
  %159 = and i64 4795037263020174403, %1
  %160 = xor i64 4795037263020174403, %1
  %161 = or i64 %159, %160
  %162 = and i64 %1, 5670556621012423802
  %163 = xor i64 %1, -1
  %164 = or i64 -5670556621012423803, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = xor i64 %158, %162
  %168 = xor i64 %167, %157
  %169 = xor i64 %168, 6374777044370941807
  %170 = xor i64 %169, %166
  %171 = xor i64 %170, %161
  %172 = xor i64 %171, %155
  %173 = mul i64 %154, %172
  %174 = trunc i64 %173 to i32
  %175 = select i1 %135, i32 984876119, i32 %174
  %176 = xor i32 %175, -1009250840
  %177 = xor i32 %176, -1009250840
  store i32 %177, i32* %0, align 4
  %178 = call i8** @bf6338069988336422972(i32* %0)
  %179 = load i8*, i8** %178, align 8
  indirectbr i8* %179, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.27.extracted(i32 %0, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = sext i32 %0 to i64
  %3 = add i64 %2, 7919409294717711768
  %4 = xor i64 7919409294717711768, %2
  %5 = and i64 7919409294717711768, %2
  %6 = mul i64 2, %5
  %7 = add i64 %4, %6
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, -2837475317607143564
  %10 = or i64 2837475317607143563, %8
  %11 = sub i64 %10, 2837475317607143563
  %12 = sext i32 %0 to i64
  %13 = and i64 %12, -2394687975762897552
  %14 = xor i64 %12, -1
  %15 = xor i64 -2394687975762897552, %14
  %16 = and i64 %15, -2394687975762897552
  %17 = xor i64 %7, -6423487404780284237
  %18 = xor i64 %17, %13
  %19 = xor i64 %18, %3
  %20 = xor i64 %19, %16
  %21 = xor i64 %20, %9
  %22 = xor i64 %21, %11
  %23 = sext i32 %0 to i64
  %24 = add i64 %23, -8659751781533011689
  %25 = add i64 -6716464144482830660, %23
  %26 = add i64 %25, -1943287637050181029
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, -3786544402667208383
  %29 = add i64 -2516802059009609733, %27
  %30 = add i64 %29, -1269742343657598650
  %31 = sext i32 %0 to i64
  %32 = add i64 %31, 8940863803641671598
  %33 = xor i64 8940863803641671598, %31
  %34 = and i64 8940863803641671598, %31
  %35 = mul i64 2, %34
  %36 = add i64 %33, %35
  %37 = xor i64 %24, %36
  %38 = xor i64 %37, %28
  %39 = xor i64 %38, %30
  %40 = xor i64 %39, %26
  %41 = xor i64 %40, -6391442668549428458
  %42 = xor i64 %41, %32
  %43 = mul i64 %22, %42
  %44 = call i64 @h6542867261474098886(i64 %43)
  %45 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %44
  store i8* blockaddress(@main.extracted.27.extracted, %loopEnd.exitStub.exitStub), i8** %45, align 8
  %46 = call i64 @h6542867261474098886(i64 984876119)
  %47 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %46
  store i8* blockaddress(@main.extracted.27.extracted, %50), i8** %47, align 8
  store i32 984876119, i32* %1, align 4
  %48 = call i8** @bf6338069988336422972(i32* %1)
  %49 = load i8*, i8** %48, align 8
  indirectbr i8* %49, [label %50]

50:                                               ; preds = %50, %newFuncRoot
  store i32 %0, i32* %dispatcher, align 4
  %51 = load i8*, i8** %47, align 8
  %52 = load i8, i8* %51, align 1
  %53 = and i8 %52, 1
  %54 = icmp eq i8 %53, 1
  %55 = mul i8 %52, %52
  %56 = and i8 %55, %52
  %57 = or i8 %55, %52
  %58 = add i8 %56, %57
  %59 = srem i8 %58, 2
  %60 = icmp eq i8 %59, 0
  %61 = or i1 %54, %60
  %62 = or i64 %44, 3258743159721329955
  %63 = xor i64 %44, -1
  %64 = and i64 3258743159721329955, %63
  %65 = add i64 %64, %44
  %66 = or i64 %44, 273526515474045752
  %67 = and i64 273526515474045752, %44
  %68 = xor i64 273526515474045752, %44
  %69 = or i64 %67, %68
  %70 = xor i64 -1269275915360532197, %69
  %71 = xor i64 %70, %62
  %72 = xor i64 %71, %65
  %73 = xor i64 %72, %66
  %74 = sext i32 %0 to i64
  %75 = and i64 %74, -8886723713505041816
  %76 = xor i64 %74, -1
  %77 = xor i64 -8886723713505041816, %76
  %78 = and i64 %77, -8886723713505041816
  %79 = and i64 %46, 6867523343071522842
  %80 = xor i64 %46, -1
  %81 = or i64 -6867523343071522843, %80
  %82 = xor i64 %81, -1
  %83 = and i64 %82, -1
  %84 = xor i64 %79, %75
  %85 = xor i64 %84, 4971501346709046598
  %86 = xor i64 %85, %83
  %87 = xor i64 %86, %78
  %88 = mul i64 %73, %87
  %89 = trunc i64 %88 to i32
  %90 = select i1 %61, i32 %89, i32 984876130
  %91 = xor i32 %90, -377653116
  %92 = xor i32 %91, -377653116
  store i32 %92, i32* %1, align 4
  %93 = call i8** @bf6338069988336422972(i32* %1)
  %94 = load i8*, i8** %93, align 8
  indirectbr i8* %94, [label %loopEnd.exitStub.exitStub, label %50]

loopEnd.exitStub.exitStub:                        ; preds = %50
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.28.extracted([51 x i32]* %lookupTable, i1* %.reg2mem118, i32 %0, i32* %dispatcher, i1 %1, i1* %.reg2mem125) #5 {
newFuncRoot:
  %2 = sext i32 %0 to i64
  %3 = add i64 %2, -5120148089163631923
  %4 = add i64 5842721615856969380, %2
  %5 = sub i64 %4, -7483874368688950313
  %6 = sext i32 %0 to i64
  %7 = or i64 %6, -7052299870661314970
  %8 = xor i64 %6, -1
  %9 = and i64 -7052299870661314970, %8
  %10 = add i64 %9, %6
  %11 = xor i64 %3, %10
  %12 = xor i64 %11, 2874435725908429621
  %13 = xor i64 %12, %7
  %14 = xor i64 %13, %5
  %15 = sext i32 %0 to i64
  %16 = or i64 %15, -6356654129528908616
  %17 = xor i64 %15, -1
  %18 = and i64 -6356654129528908616, %17
  %19 = add i64 %18, %15
  %20 = sext i32 %0 to i64
  %21 = add i64 %20, -8813263086880695777
  %22 = add i64 2766402917289894071, %20
  %23 = sub i64 %22, -6867078069538961768
  %24 = xor i64 %19, -6105939143801213155
  %25 = xor i64 %24, %23
  %26 = xor i64 %25, %21
  %27 = xor i64 %26, %16
  %28 = mul i64 %14, %27
  %29 = trunc i64 %28 to i32
  %30 = alloca i32, i32 %29, align 4
  %31 = call i64 @h6542867261474098886(i64 984876153)
  %32 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %31
  store i8* blockaddress(@main.extracted.28.extracted, %loopEnd.exitStub.exitStub), i8** %32, align 8
  %33 = call i64 @h6542867261474098886(i64 984876118)
  %34 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %33
  store i8* blockaddress(@main.extracted.28.extracted, %37), i8** %34, align 8
  store i32 984876118, i32* %30, align 4
  %35 = call i8** @bf6338069988336422972(i32* %30)
  %36 = load i8*, i8** %35, align 8
  indirectbr i8* %36, [label %37]

37:                                               ; preds = %37, %newFuncRoot
  %38 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 22
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds [51 x i32], [51 x i32]* %lookupTable, i32 0, i32 21
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %39, %41
  %43 = or i32 %39, %41
  %44 = add i32 %42, %43
  %.reload119 = load i1, i1* %.reg2mem118, align 1
  %45 = select i1 %.reload119, i32 %0, i32 %44
  store i32 %45, i32* %dispatcher, align 4
  store i1 %1, i1* %.reg2mem125, align 1
  %46 = load i8*, i8** %32, align 8
  %47 = load i8, i8* %46, align 1
  %48 = mul i8 %47, %47
  %49 = add i8 %48, %47
  %50 = and i64 %33, -9126060187905223992
  %51 = xor i64 %33, -1
  %52 = or i64 9126060187905223991, %51
  %53 = xor i64 %52, -1
  %54 = and i64 %53, -1
  %55 = and i64 %31, -8385218851245762968
  %56 = xor i64 %31, -1
  %57 = xor i64 -8385218851245762968, %56
  %58 = and i64 %57, -8385218851245762968
  %59 = xor i64 %50, %58
  %60 = xor i64 %59, -1428506483149672313
  %61 = xor i64 %60, %55
  %62 = xor i64 %61, %54
  %63 = sext i32 %0 to i64
  %64 = and i64 %63, 7595213069100861264
  %65 = xor i64 %63, -1
  %66 = xor i64 7595213069100861264, %65
  %67 = and i64 %66, 7595213069100861264
  %68 = and i64 %33, -4573944707356043363
  %69 = or i64 4573944707356043362, %33
  %70 = sub i64 %69, 4573944707356043362
  %71 = xor i64 %70, %68
  %72 = xor i64 %71, %64
  %73 = xor i64 %72, %67
  %74 = xor i64 %73, -189106487231447131
  %75 = mul i64 %62, %74
  %76 = trunc i64 %75 to i8
  %77 = mul i8 %49, %76
  %78 = srem i8 %77, 2
  %79 = icmp eq i8 %78, 0
  %80 = mul i8 %47, %47
  %81 = add i8 %80, %47
  %82 = srem i8 %81, 2
  %83 = icmp eq i8 %82, 0
  %84 = and i1 %79, %83
  %85 = select i1 %84, i32 984876153, i32 984876153
  %86 = or i32 %85, 0
  %87 = and i32 %85, 0
  %88 = sub i32 %86, %87
  store i32 %88, i32* %30, align 4
  %89 = call i8** @bf6338069988336422972(i32* %30)
  %90 = load i8*, i8** %89, align 8
  indirectbr i8* %90, [label %loopEnd.exitStub.exitStub, label %37]

loopEnd.exitStub.exitStub:                        ; preds = %37
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.29.extracted(i32 %0, i32* %dispatcher) #5 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876108)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.29.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876149)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.29.extracted, %8), i8** %5, align 8
  store i32 984876149, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  store i32 %0, i32* %dispatcher, align 4
  %9 = load i8*, i8** %5, align 8
  %10 = load i8, i8* %9, align 1
  %11 = mul i8 %10, 2
  %12 = mul i8 %10, 2
  %13 = add i8 2, %12
  %14 = mul i8 %11, %13
  %15 = srem i8 %14, 4
  %16 = sext i32 %0 to i64
  %17 = or i64 %16, 1742372390927376700
  %18 = xor i64 %16, -1
  %19 = and i64 1742372390927376700, %18
  %20 = add i64 %19, %16
  %21 = and i64 %2, -1475616956615962382
  %22 = xor i64 %2, -1
  %23 = or i64 1475616956615962381, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = or i64 %4, 4942778484384305943
  %27 = xor i64 %4, -1
  %28 = and i64 %27, -768040132584524460
  %29 = and i64 %4, 768040132584524459
  %30 = or i64 %28, %29
  %31 = xor i64 -5634256818748938685, %30
  %32 = xor i64 %4, -1
  %33 = or i64 -4942778484384305944, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = or i64 %31, %35
  %37 = xor i64 %20, %26
  %38 = xor i64 %37, %17
  %39 = xor i64 %38, %25
  %40 = xor i64 %39, %36
  %41 = xor i64 %40, -3764914450152165543
  %42 = xor i64 %41, %21
  %43 = and i64 %2, -2074621688453470651
  %44 = or i64 2074621688453470650, %2
  %45 = sub i64 %44, 2074621688453470650
  %46 = sext i32 %0 to i64
  %47 = add i64 %46, -4871777390538743244
  %48 = sub i64 0, %46
  %49 = add i64 4871777390538743244, %48
  %50 = sub i64 0, %49
  %51 = sext i32 %0 to i64
  %52 = add i64 %51, -5794209203876658573
  %53 = xor i64 -5794209203876658573, %51
  %54 = and i64 -5794209203876658573, %51
  %55 = mul i64 2, %54
  %56 = add i64 %53, %55
  %57 = xor i64 %47, %45
  %58 = xor i64 %57, %50
  %59 = xor i64 %58, %43
  %60 = xor i64 %59, %56
  %61 = xor i64 %60, 0
  %62 = xor i64 %61, %52
  %63 = mul i64 %42, %62
  %64 = trunc i64 %63 to i8
  %65 = icmp eq i8 %15, %64
  %66 = mul i8 %10, %10
  %67 = sub i8 %66, 84
  %68 = add i8 %67, %10
  %69 = add i8 %68, 84
  %70 = add i64 %2, -420796810676707757
  %71 = add i64 6578908606763412688, %2
  %72 = add i64 %71, -6999705417440120445
  %73 = or i64 %4, 517427530807595358
  %74 = xor i64 %4, -1
  %75 = and i64 517427530807595358, %74
  %76 = add i64 %75, %4
  %77 = xor i64 %72, -3454338803546446513
  %78 = xor i64 %77, %73
  %79 = xor i64 %78, %76
  %80 = xor i64 %79, %70
  %81 = and i64 %4, -6781459671923398415
  %82 = or i64 6781459671923398414, %4
  %83 = sub i64 %82, 6781459671923398414
  %84 = add i64 %4, -6687933011543694675
  %85 = add i64 8657366134845275252, %4
  %86 = add i64 %85, 3101444927320581689
  %87 = xor i64 -7887660724154555554, %83
  %88 = xor i64 %87, %84
  %89 = xor i64 %88, %86
  %90 = xor i64 %89, %81
  %91 = mul i64 %80, %90
  %92 = trunc i64 %91 to i8
  %93 = srem i8 %69, %92
  %94 = icmp eq i8 %93, 0
  %95 = xor i1 %94, true
  %96 = and i1 %65, %95
  %97 = add i1 %96, %94
  %98 = select i1 %97, i32 984876149, i32 984876108
  %99 = xor i32 %98, -1
  %100 = and i32 %99, 57
  %101 = and i32 %98, -58
  %102 = or i32 %100, %101
  store i32 %102, i32* %1, align 4
  %103 = call i8** @bf6338069988336422972(i32* %1)
  %104 = load i8*, i8** %103, align 8
  indirectbr i8* %104, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.EntryBasicBlockSplit(i32* %.reg2mem, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem175) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7566136434962294925, i32 0, i64 %1
  store i8* blockaddress(@main_loop.EntryBasicBlockSplit, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7566136434962294925, i32 0, i64 %3
  store i8* blockaddress(@main_loop.EntryBasicBlockSplit, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7566136434962294925, i32 0, i64 %5
  store i8* blockaddress(@main_loop.EntryBasicBlockSplit, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3104023660497480400, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, i1, i32, i32*, i32*, i32*)* @main_loop.EntryBasicBlockSplit.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf5553753146581063602(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %EntryBasicBlockSplit]

EntryBasicBlockSplit:                             ; preds = %EntryBasicBlockSplit, %newFuncRoot
  %.reload9 = load i32, i32* %.reg2mem, align 4
  %12 = icmp eq i32 %.reload9, 0
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %16 = load i32, i32* %15, align 4
  %17 = srem i32 %14, %16
  %18 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 47
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %21 = load i32, i32* %20, align 4
  %22 = load i8*, i8** %4, align 8
  %23 = load i8, i8* %22, align 1
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %26 = mul i8 %23, %23
  %27 = add i8 %26, %23
  %28 = mul i8 %27, 3
  %29 = srem i8 %28, 2
  %30 = icmp eq i8 %29, 0
  %31 = and i1 %25, %30
  %32 = xor i1 %25, %30
  %33 = or i1 %31, %32
  %34 = and i64 %3, 229149234506130616
  %35 = xor i64 %3, -1
  %36 = or i64 -229149234506130617, %35
  %37 = xor i64 %36, -1
  %38 = and i64 %37, -1
  %39 = add i64 %8, -3356355022844072314
  %40 = sub i64 0, %8
  %41 = add i64 3356355022844072314, %40
  %42 = sub i64 0, %41
  %43 = or i64 %1, 1880532992680155960
  %44 = xor i64 %1, -1
  %45 = and i64 1880532992680155960, %44
  %46 = add i64 %45, %1
  %47 = xor i64 %42, %34
  %48 = xor i64 %47, %38
  %49 = xor i64 %48, %43
  %50 = xor i64 %49, %46
  %51 = xor i64 %50, 6605955230285530615
  %52 = xor i64 %51, %39
  %53 = and i64 %3, -242436755055705156
  %54 = or i64 242436755055705155, %3
  %55 = sub i64 %54, 242436755055705155
  %56 = add i64 %5, -8080464301024065906
  %57 = sub i64 0, %5
  %58 = sub i64 -8080464301024065906, %57
  %59 = xor i64 %58, %55
  %60 = xor i64 %59, %53
  %61 = xor i64 %60, %56
  %62 = xor i64 %61, -1255881769900789601
  %63 = mul i64 %52, %62
  %64 = trunc i64 %63 to i32
  %65 = select i1 %33, i32 %64, i32 984876139
  %66 = xor i32 %65, 2
  store i32 %66, i32* %0, align 4
  %67 = call i8** @bf5553753146581063602(i32* %0)
  %68 = load i8*, i8** %67, align 8
  indirectbr i8* %68, [label %codeRepl, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %EntryBasicBlockSplit
  store i64 4070807658626890127, i64* %7, align 8
  %69 = call i8** @lk379752535366543268(i64* %7)
  %70 = load i8*, i8** %69, align 8
  %71 = bitcast i8* %70 to void (i32, i32, i1, i32, i32*, i32*, i32*)*
  call void %71(i32 %19, i32 %21, i1 %12, i32 %17, i32* %dispatcher, i32* %.reg2mem, i32* %.reg2mem175)
  %72 = load i8*, i8** %6, align 8
  %73 = load i8, i8* %72, align 1
  %74 = mul i8 %73, 2
  %75 = mul i8 %73, 2
  %76 = add i8 2, %75
  %77 = mul i8 %74, %76
  %78 = srem i8 %77, 4
  %79 = icmp eq i8 %78, 0
  %80 = mul i8 %73, %73
  %81 = mul i8 %80, %73
  %82 = sub i8 0, %73
  %83 = sub i8 %81, %82
  %84 = srem i8 %83, 2
  %85 = icmp eq i8 %84, 0
  %86 = xor i1 %85, true
  %87 = xor i1 %79, %86
  %88 = and i1 %87, %79
  %89 = select i1 %88, i32 984876137, i32 984876138
  %90 = xor i32 %89, 3
  store i32 %90, i32* %0, align 4
  %91 = call i8** @bf5553753146581063602(i32* %0)
  %92 = load i8*, i8** %91, align 8
  indirectbr i8* %92, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7146363402020245244, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7146363402020245244, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7146363402020245244, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1872332816392812891, i32 0, i64 %8
  store i8* bitcast (void ([53 x i32]*, i32, i32*)* @main_loop.extracted.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf10580636527388110965(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = add i64 113, -30
  %14 = sub i64 126, 83
  %15 = add i64 7, 8
  %16 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 9
  %17 = load i32, i32* %16, align 4
  %18 = load i8*, i8** %2, align 8
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 1
  %21 = icmp eq i8 %20, 0
  %22 = mul i8 %19, %19
  %23 = add i8 %22, %19
  %24 = mul i8 %23, 3
  %25 = srem i8 %24, 2
  %26 = icmp eq i8 %25, 0
  %27 = or i1 %21, %26
  %28 = select i1 %27, i32 984876138, i32 984876137
  %29 = add i64 %3, -5414540723085426698
  %30 = sub i64 0, %3
  %31 = add i64 5414540723085426698, %30
  %32 = sub i64 0, %31
  %33 = add i64 %1, -3568652239151637083
  %34 = sub i64 0, %1
  %35 = sub i64 -3568652239151637083, %34
  %36 = or i64 %5, 1895517786575000106
  %37 = xor i64 %5, -1
  %38 = and i64 1895517786575000106, %37
  %39 = add i64 %38, %5
  %40 = xor i64 %32, %29
  %41 = xor i64 %40, 5950343174293050999
  %42 = xor i64 %41, %35
  %43 = xor i64 %42, %39
  %44 = xor i64 %43, %36
  %45 = xor i64 %44, %33
  %46 = or i64 %3, -6817503417905046319
  %47 = and i64 -6817503417905046319, %3
  %48 = xor i64 -6817503417905046319, %3
  %49 = or i64 %47, %48
  %50 = add i64 %1, -3287916901457612842
  %51 = and i64 -3287916901457612842, %1
  %52 = or i64 -3287916901457612842, %1
  %53 = add i64 %51, %52
  %54 = xor i64 %46, %49
  %55 = xor i64 %54, %53
  %56 = xor i64 %55, 5168522849326963897
  %57 = xor i64 %56, %50
  %58 = mul i64 %45, %57
  %59 = trunc i64 %58 to i32
  %60 = xor i32 %28, %59
  %61 = and i32 %60, 3
  %62 = and i32 %28, -4
  %63 = or i32 %61, %62
  store i32 %63, i32* %0, align 4
  %64 = call i8** @bf10580636527388110965(i32* %0)
  %65 = load i8*, i8** %64, align 8
  indirectbr i8* %65, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %66 = call i8** @lk4630455211724975250(i64* %7)
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast i8* %67 to void ([53 x i32]*, i32, i32*)*
  call void %68([53 x i32]* %lookupTable, i32 %17, i32* %dispatcher)
  %69 = load i8*, i8** %4, align 8
  %70 = load i8, i8* %69, align 1
  %71 = mul i8 %70, 2
  %72 = mul i8 %70, 2
  %73 = add i8 2, %72
  %74 = mul i8 %71, %73
  %75 = srem i8 %74, 4
  %76 = icmp eq i8 %75, 0
  %77 = mul i8 %70, %70
  %78 = add i8 %77, %70
  %79 = srem i8 %78, 2
  %80 = icmp eq i8 %79, 0
  %81 = and i1 %76, %80
  %82 = select i1 %81, i32 984876138, i32 984876138
  %83 = sext i32 %63 to i64
  %84 = or i64 %83, -2448234464801931394
  %85 = and i64 -2448234464801931394, %83
  %86 = xor i64 -2448234464801931394, %83
  %87 = or i64 %85, %86
  %88 = sext i32 %17 to i64
  %89 = and i64 %88, -7283300195111606266
  %90 = xor i64 %88, -1
  %91 = or i64 7283300195111606265, %90
  %92 = xor i64 %91, -1
  %93 = and i64 %92, -1
  %94 = xor i64 %89, %84
  %95 = xor i64 %94, %87
  %96 = xor i64 %95, %93
  %97 = xor i64 %96, -8347016440573491207
  %98 = and i64 %13, 8966835470634751930
  %99 = xor i64 %13, -1
  %100 = xor i64 8966835470634751930, %99
  %101 = and i64 %100, 8966835470634751930
  %102 = add i64 %13, -8490227669442528831
  %103 = sub i64 0, %13
  %104 = sub i64 -8490227669442528831, %103
  %105 = sext i8 %22 to i64
  %106 = and i64 %105, -9190083473883082628
  %107 = xor i64 %105, -1
  %108 = or i64 9190083473883082627, %107
  %109 = xor i64 %108, -1
  %110 = and i64 %109, -1
  %111 = xor i64 %106, %110
  %112 = xor i64 %111, 0
  %113 = xor i64 %112, %102
  %114 = xor i64 %113, %101
  %115 = xor i64 %114, %104
  %116 = xor i64 %115, %98
  %117 = mul i64 %97, %116
  %118 = trunc i64 %117 to i32
  %119 = xor i32 %82, %118
  store i32 %119, i32* %0, align 4
  %120 = call i8** @bf10580636527388110965(i32* %0)
  %121 = load i8*, i8** %120, align 8
  indirectbr i8* %121, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.30([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4742261919227970024, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.30, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4742261919227970024, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.30, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4742261919227970024, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.30, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8397835548565163023, i32 0, i64 %8
  store i8* bitcast (void (i32*, i32, i32*)* @main_loop.extracted.30.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf7762184481881667074(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 30
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %16 = load i8*, i8** %2, align 8
  %17 = load i8, i8* %16, align 1
  %18 = and i64 %1, 9017453100630076807
  %19 = xor i64 %1, -1
  %20 = xor i64 9017453100630076807, %19
  %21 = and i64 %20, 9017453100630076807
  %22 = or i64 %3, -8934115225299556981
  %23 = xor i64 %3, -1
  %24 = and i64 -8934115225299556981, %23
  %25 = add i64 %24, %3
  %26 = and i64 %3, -6400951972074976710
  %27 = or i64 6400951972074976709, %3
  %28 = sub i64 %27, 6400951972074976709
  %29 = xor i64 %28, %18
  %30 = xor i64 %29, %21
  %31 = xor i64 %30, %26
  %32 = xor i64 %31, -6624011007052080283
  %33 = xor i64 %32, %22
  %34 = xor i64 %33, %25
  %35 = add i64 %5, 1080510867975170953
  %36 = sub i64 0, %5
  %37 = sub i64 1080510867975170953, %36
  %38 = and i64 %5, 4744589070680556391
  %39 = xor i64 %5, -1
  %40 = xor i64 4744589070680556391, %39
  %41 = and i64 %40, 4744589070680556391
  %42 = xor i64 6286256322939010266, %37
  %43 = xor i64 %42, %41
  %44 = xor i64 %43, %35
  %45 = xor i64 %44, %38
  %46 = mul i64 %34, %45
  %47 = trunc i64 %46 to i8
  %48 = mul i8 %17, %47
  %49 = mul i8 %17, 2
  %50 = and i64 %8, 5752223238164534238
  %51 = xor i64 %8, -1
  %52 = or i64 -5752223238164534239, %51
  %53 = xor i64 %52, -1
  %54 = and i64 %53, -1
  %55 = or i64 %5, 1593832770397787174
  %56 = xor i64 %5, -1
  %57 = and i64 %56, 5422063701993114083
  %58 = and i64 %5, -5422063701993114084
  %59 = or i64 %57, %58
  %60 = xor i64 6710755147480899013, %59
  %61 = xor i64 %5, -1
  %62 = or i64 -1593832770397787175, %61
  %63 = xor i64 %62, -1
  %64 = and i64 %63, -1
  %65 = or i64 %60, %64
  %66 = add i64 %5, 8743701086557154006
  %67 = add i64 4732486864914087900, %5
  %68 = add i64 %67, 4011214221643066106
  %69 = xor i64 %54, %68
  %70 = xor i64 %69, %50
  %71 = xor i64 %70, -2507945983392959843
  %72 = xor i64 %71, %55
  %73 = xor i64 %72, %65
  %74 = xor i64 %73, %66
  %75 = add i64 %5, 62231936402348797
  %76 = add i64 -4162015126596092837, %5
  %77 = add i64 %76, 4224247062998441634
  %78 = and i64 %3, -5372470005174658004
  %79 = or i64 5372470005174658003, %3
  %80 = sub i64 %79, 5372470005174658003
  %81 = add i64 %3, -8955182712331372645
  %82 = xor i64 -8955182712331372645, %3
  %83 = and i64 -8955182712331372645, %3
  %84 = mul i64 2, %83
  %85 = add i64 %82, %84
  %86 = xor i64 %77, %85
  %87 = xor i64 %86, %78
  %88 = xor i64 %87, %81
  %89 = xor i64 %88, %75
  %90 = xor i64 %89, %80
  %91 = xor i64 %90, 4426144352728831942
  %92 = mul i64 %74, %91
  %93 = trunc i64 %92 to i8
  %94 = add i8 %93, %49
  %95 = add i8 %94, -108
  %96 = mul i8 %48, %95
  %97 = and i64 %8, 2968438017667761735
  %98 = xor i64 %8, -1
  %99 = xor i64 2968438017667761735, %98
  %100 = and i64 %99, 2968438017667761735
  %101 = and i64 %8, -7315430569127965313
  %102 = xor i64 %8, -1
  %103 = xor i64 -7315430569127965313, %102
  %104 = and i64 %103, -7315430569127965313
  %105 = add i64 %8, -6150507247487716925
  %106 = xor i64 -6150507247487716925, %8
  %107 = and i64 -6150507247487716925, %8
  %108 = mul i64 2, %107
  %109 = add i64 %106, %108
  %110 = xor i64 %104, -2363833372464022823
  %111 = xor i64 %110, %101
  %112 = xor i64 %111, %97
  %113 = xor i64 %112, %105
  %114 = xor i64 %113, %109
  %115 = xor i64 %114, %100
  %116 = and i64 %8, 6078840490301135871
  %117 = xor i64 %8, -1
  %118 = or i64 -6078840490301135872, %117
  %119 = xor i64 %118, -1
  %120 = and i64 %119, -1
  %121 = add i64 %5, -7328170131856398850
  %122 = sub i64 0, %5
  %123 = add i64 7328170131856398850, %122
  %124 = sub i64 0, %123
  %125 = add i64 %3, -4679489012731795147
  %126 = add i64 8067820171062047527, %3
  %127 = sub i64 %126, -5699434889915708942
  %128 = xor i64 %127, %116
  %129 = xor i64 %128, %120
  %130 = xor i64 %129, -741347796198255196
  %131 = xor i64 %130, %124
  %132 = xor i64 %131, %125
  %133 = xor i64 %132, %121
  %134 = mul i64 %115, %133
  %135 = trunc i64 %134 to i8
  %136 = srem i8 %96, %135
  %137 = icmp eq i8 %136, 0
  %138 = mul i8 %17, %17
  %139 = add i8 %138, %17
  %140 = srem i8 %139, 2
  %141 = icmp eq i8 %140, 0
  %142 = add i64 %1, 7402888719361685093
  %143 = and i64 7402888719361685093, %1
  %144 = or i64 7402888719361685093, %1
  %145 = add i64 %143, %144
  %146 = or i64 %1, -3740202184482311854
  %147 = xor i64 %1, -1
  %148 = and i64 -3740202184482311854, %147
  %149 = add i64 %148, %1
  %150 = xor i64 %149, %145
  %151 = xor i64 %150, -2926023062870002247
  %152 = xor i64 %151, %142
  %153 = xor i64 %152, %146
  %154 = and i64 %5, -6024680969602668324
  %155 = xor i64 %5, -1
  %156 = or i64 6024680969602668323, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %1, 7065817711775698470
  %160 = xor i64 %1, -1
  %161 = and i64 7065817711775698470, %160
  %162 = add i64 %161, %1
  %163 = xor i64 %159, 6182463656840724617
  %164 = xor i64 %163, %154
  %165 = xor i64 %164, %158
  %166 = xor i64 %165, %162
  %167 = mul i64 %153, %166
  %168 = trunc i64 %167 to i1
  %169 = xor i1 %137, %168
  %170 = and i1 %169, true
  %171 = and i1 %137, false
  %172 = or i1 %170, %171
  %173 = xor i1 %141, true
  %174 = and i1 %173, true
  %175 = and i1 %141, false
  %176 = or i1 %174, %175
  %177 = xor i1 %172, %176
  %178 = xor i1 %137, true
  %179 = xor i1 %141, true
  %180 = or i1 %178, %179
  %181 = add i64 %1, -3204192520467616668
  %182 = and i64 -3204192520467616668, %1
  %183 = or i64 -3204192520467616668, %1
  %184 = add i64 %182, %183
  %185 = or i64 %3, 4160266519128986792
  %186 = xor i64 %3, -1
  %187 = and i64 4160266519128986792, %186
  %188 = add i64 %187, %3
  %189 = xor i64 %188, %181
  %190 = xor i64 %189, 7654492726305408363
  %191 = xor i64 %190, %185
  %192 = xor i64 %191, %184
  %193 = or i64 %1, 4807885064985802897
  %194 = and i64 4807885064985802897, %1
  %195 = xor i64 4807885064985802897, %1
  %196 = or i64 %194, %195
  %197 = and i64 %8, -6109918821984894505
  %198 = xor i64 %8, -1
  %199 = or i64 6109918821984894504, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = or i64 %3, -769539716887619372
  %203 = xor i64 %3, -1
  %204 = and i64 -769539716887619372, %203
  %205 = add i64 %204, %3
  %206 = xor i64 %201, %193
  %207 = xor i64 %206, %205
  %208 = xor i64 %207, %202
  %209 = xor i64 %208, %197
  %210 = xor i64 %209, %196
  %211 = xor i64 %210, -6685277766176784573
  %212 = mul i64 %192, %211
  %213 = trunc i64 %212 to i1
  %214 = xor i1 %180, %213
  %215 = and i1 %214, true
  %216 = or i1 %177, %215
  %217 = select i1 %216, i32 984876138, i32 984876139
  %218 = xor i32 %217, 1
  store i32 %218, i32* %0, align 4
  %219 = call i8** @bf7762184481881667074(i32* %0)
  %220 = load i8*, i8** %219, align 8
  indirectbr i8* %220, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %221 = call i8** @lk416499455634074828(i64* %7)
  %222 = load i8*, i8** %221, align 8
  %223 = bitcast i8* %222 to void (i32*, i32, i32*)*
  call void %223(i32* %15, i32 %14, i32* %dispatcher)
  %224 = load i8*, i8** %6, align 8
  %225 = load i8, i8* %224, align 1
  %226 = mul i8 %225, %225
  %227 = and i8 %226, %225
  %228 = or i8 %226, %225
  %229 = add i8 %227, %228
  %230 = mul i8 %229, 3
  %231 = srem i8 %230, 2
  %232 = sext i8 %49 to i64
  %233 = add i64 %232, 5156000805646903295
  %234 = xor i64 5156000805646903295, %232
  %235 = and i64 5156000805646903295, %232
  %236 = mul i64 2, %235
  %237 = add i64 %234, %236
  %238 = sext i8 %94 to i64
  %239 = and i64 %238, -8804520789359076411
  %240 = xor i64 %238, -1
  %241 = or i64 8804520789359076410, %240
  %242 = xor i64 %241, -1
  %243 = and i64 %242, -1
  %244 = xor i64 %237, %243
  %245 = xor i64 %244, 310477976068248795
  %246 = xor i64 %245, %233
  %247 = xor i64 %246, %239
  %248 = and i64 %5, 2203865448425393754
  %249 = xor i64 %5, -1
  %250 = or i64 -2203865448425393755, %249
  %251 = xor i64 %250, -1
  %252 = and i64 %251, -1
  %253 = sext i8 %95 to i64
  %254 = add i64 %253, 8264154152602341081
  %255 = add i64 4288969900617023775, %253
  %256 = sub i64 %255, -3975184251985317306
  %257 = sext i32 %217 to i64
  %258 = or i64 %257, -1463940162893644700
  %259 = xor i64 %257, -1
  %260 = and i64 %259, 4198247302205349815
  %261 = and i64 %257, -4198247302205349816
  %262 = or i64 %260, %261
  %263 = xor i64 -3320241991413210157, %262
  %264 = xor i64 %257, -1
  %265 = or i64 1463940162893644699, %264
  %266 = xor i64 %265, -1
  %267 = and i64 %266, -1
  %268 = or i64 %263, %267
  %269 = xor i64 %256, %268
  %270 = xor i64 %269, %258
  %271 = xor i64 %270, %248
  %272 = xor i64 %271, %252
  %273 = xor i64 %272, 0
  %274 = xor i64 %273, %254
  %275 = mul i64 %247, %274
  %276 = trunc i64 %275 to i8
  %277 = icmp eq i8 %231, %276
  %278 = mul i8 %225, %225
  %279 = add i8 %278, %225
  %280 = srem i8 %279, 2
  %281 = icmp eq i8 %280, 0
  %282 = and i1 %277, %281
  %283 = select i1 %282, i32 984876138, i32 984876138
  %284 = or i32 %283, 0
  %285 = and i32 %283, 0
  %286 = sub i32 %284, %285
  store i32 %286, i32* %0, align 4
  %287 = call i8** @bf7762184481881667074(i32* %0)
  %288 = load i8*, i8** %287, align 8
  indirectbr i8* %288, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.31(i32* %.reg2mem30, i32* %.reg2mem65, [53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18162914415852497466, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.31, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18162914415852497466, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.31, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18162914415852497466, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.31, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1228217607110177373, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, i1, i32, i32*)* @main_loop.extracted.31.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf6596980413736034409(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload31 = load i32, i32* %.reg2mem30, align 4
  %13 = srem i32 %.reload31, 2
  store i32 %13, i32* %.reg2mem65, align 4
  %.reload70 = load i32, i32* %.reg2mem65, align 4
  %14 = icmp eq i32 %.reload70, 0
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 10
  %18 = load i32, i32* %17, align 4
  %19 = sub i32 %16, %18
  %20 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 40
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 28
  %23 = load i32, i32* %22, align 4
  %24 = load i8*, i8** %2, align 8
  %25 = load i8, i8* %24, align 1
  %26 = mul i8 %25, 2
  %27 = mul i8 %25, 2
  %28 = sub i8 0, %27
  %29 = or i64 %8, -8850787808062416152
  %30 = xor i64 %8, -1
  %31 = and i64 -8850787808062416152, %30
  %32 = add i64 %31, %8
  %33 = and i64 %8, 2146706674731544621
  %34 = xor i64 %8, -1
  %35 = xor i64 2146706674731544621, %34
  %36 = and i64 %35, 2146706674731544621
  %37 = xor i64 %32, %33
  %38 = xor i64 %37, -8546062326051866349
  %39 = xor i64 %38, %29
  %40 = xor i64 %39, %36
  %41 = add i64 %1, -7817608419300460817
  %42 = sub i64 0, %1
  %43 = add i64 7817608419300460817, %42
  %44 = sub i64 0, %43
  %45 = or i64 %1, -6567035758223623231
  %46 = xor i64 %1, -1
  %47 = and i64 %46, 3712069026468429652
  %48 = and i64 %1, -3712069026468429653
  %49 = or i64 %47, %48
  %50 = xor i64 -7539350298651032427, %49
  %51 = xor i64 %1, -1
  %52 = or i64 6567035758223623230, %51
  %53 = xor i64 %52, -1
  %54 = and i64 %53, -1
  %55 = or i64 %50, %54
  %56 = add i64 %1, 2731661618259179884
  %57 = add i64 -2763643220009605768, %1
  %58 = sub i64 %57, -5495304838268785652
  %59 = xor i64 %56, %55
  %60 = xor i64 %59, %58
  %61 = xor i64 %60, 7417634749896487478
  %62 = xor i64 %61, %44
  %63 = xor i64 %62, %41
  %64 = xor i64 %63, %45
  %65 = mul i64 %40, %64
  %66 = trunc i64 %65 to i8
  %67 = sub i8 %66, %28
  %68 = mul i8 %26, %67
  %69 = srem i8 %68, 4
  %70 = or i64 %5, 4376397753084030712
  %71 = xor i64 %5, -1
  %72 = and i64 4376397753084030712, %71
  %73 = add i64 %72, %5
  %74 = or i64 %1, -4087034412391979575
  %75 = xor i64 %1, -1
  %76 = and i64 -4087034412391979575, %75
  %77 = add i64 %76, %1
  %78 = xor i64 %74, 7649968500009588091
  %79 = xor i64 %78, %70
  %80 = xor i64 %79, %77
  %81 = xor i64 %80, %73
  %82 = and i64 %5, -5016467337562856837
  %83 = xor i64 %5, -1
  %84 = or i64 5016467337562856836, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = add i64 %5, -8948245084954738391
  %88 = xor i64 -8948245084954738391, %5
  %89 = and i64 -8948245084954738391, %5
  %90 = mul i64 2, %89
  %91 = add i64 %88, %90
  %92 = or i64 %5, 7662165983596041886
  %93 = xor i64 %5, -1
  %94 = and i64 7662165983596041886, %93
  %95 = add i64 %94, %5
  %96 = xor i64 %95, 0
  %97 = xor i64 %96, %87
  %98 = xor i64 %97, %92
  %99 = xor i64 %98, %86
  %100 = xor i64 %99, %91
  %101 = xor i64 %100, %82
  %102 = mul i64 %81, %101
  %103 = trunc i64 %102 to i8
  %104 = icmp eq i8 %69, %103
  %105 = mul i8 %25, %25
  %106 = xor i8 %105, %25
  %107 = and i8 %105, %25
  %108 = mul i8 2, %107
  %109 = add i8 %106, %108
  %110 = mul i8 39, %109
  %111 = add i64 %3, 7635505301087516156
  %112 = sub i64 0, %3
  %113 = sub i64 7635505301087516156, %112
  %114 = or i64 %3, -6266137120018962132
  %115 = xor i64 %3, -1
  %116 = and i64 %115, 7231349531243120034
  %117 = and i64 %3, -7231349531243120035
  %118 = or i64 %116, %117
  %119 = xor i64 -3652173656688268146, %118
  %120 = xor i64 %3, -1
  %121 = or i64 6266137120018962131, %120
  %122 = xor i64 %121, -1
  %123 = and i64 %122, -1
  %124 = or i64 %119, %123
  %125 = add i64 %3, 9055796214179683265
  %126 = and i64 9055796214179683265, %3
  %127 = or i64 9055796214179683265, %3
  %128 = add i64 %126, %127
  %129 = xor i64 %128, 8109584337492830859
  %130 = xor i64 %129, %124
  %131 = xor i64 %130, %114
  %132 = xor i64 %131, %113
  %133 = xor i64 %132, %111
  %134 = xor i64 %133, %125
  %135 = and i64 %8, -1584176439611395633
  %136 = xor i64 %8, -1
  %137 = or i64 1584176439611395632, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = and i64 %8, -7162301081753562815
  %141 = xor i64 %8, -1
  %142 = xor i64 -7162301081753562815, %141
  %143 = and i64 %142, -7162301081753562815
  %144 = xor i64 %139, -4963341209075216859
  %145 = xor i64 %144, %135
  %146 = xor i64 %145, %143
  %147 = xor i64 %146, %140
  %148 = mul i64 %134, %147
  %149 = trunc i64 %148 to i8
  %150 = add i8 %149, %110
  %151 = mul i8 -105, %150
  %152 = or i64 %8, -6942047563984800569
  %153 = xor i64 %8, -1
  %154 = and i64 -6942047563984800569, %153
  %155 = add i64 %154, %8
  %156 = and i64 %5, -820169357744679030
  %157 = xor i64 %5, -1
  %158 = xor i64 -820169357744679030, %157
  %159 = and i64 %158, -820169357744679030
  %160 = and i64 %8, 1895971759704749327
  %161 = xor i64 %8, -1
  %162 = xor i64 1895971759704749327, %161
  %163 = and i64 %162, 1895971759704749327
  %164 = xor i64 %163, %156
  %165 = xor i64 %164, 7842682004730839209
  %166 = xor i64 %165, %152
  %167 = xor i64 %166, %160
  %168 = xor i64 %167, %155
  %169 = xor i64 %168, %159
  %170 = and i64 %3, -7715929598826829996
  %171 = xor i64 %3, -1
  %172 = xor i64 -7715929598826829996, %171
  %173 = and i64 %172, -7715929598826829996
  %174 = or i64 %5, -1174296048711552352
  %175 = xor i64 %5, -1
  %176 = and i64 %175, 8845598797421316526
  %177 = and i64 %5, -8845598797421316527
  %178 = or i64 %176, %177
  %179 = xor i64 -7676967435705206002, %178
  %180 = xor i64 %5, -1
  %181 = or i64 1174296048711552351, %180
  %182 = xor i64 %181, -1
  %183 = and i64 %182, -1
  %184 = or i64 %179, %183
  %185 = or i64 %1, 6330135169516182057
  %186 = xor i64 %1, -1
  %187 = and i64 %186, -8160470446722155304
  %188 = and i64 %1, 8160470446722155303
  %189 = or i64 %187, %188
  %190 = xor i64 -2803201353005570319, %189
  %191 = xor i64 %1, -1
  %192 = or i64 -6330135169516182058, %191
  %193 = xor i64 %192, -1
  %194 = and i64 %193, -1
  %195 = or i64 %190, %194
  %196 = xor i64 %185, %184
  %197 = xor i64 %196, %170
  %198 = xor i64 %197, 1606818503672164183
  %199 = xor i64 %198, %173
  %200 = xor i64 %199, %174
  %201 = xor i64 %200, %195
  %202 = mul i64 %169, %201
  %203 = trunc i64 %202 to i8
  %204 = add i8 %203, %151
  %205 = srem i8 %204, 2
  %206 = icmp eq i8 %205, 0
  %207 = xor i1 %206, true
  %208 = xor i1 %104, %207
  %209 = and i1 %208, %104
  %210 = select i1 %209, i32 984876139, i32 984876136
  %211 = xor i32 %210, -1
  %212 = and i32 %211, 55665396
  %213 = and i32 %210, -55665397
  %214 = or i32 %212, %213
  %215 = and i64 %5, -3194943427080629098
  %216 = xor i64 %5, -1
  %217 = xor i64 -3194943427080629098, %216
  %218 = and i64 %217, -3194943427080629098
  %219 = and i64 %5, -663938898897707067
  %220 = or i64 663938898897707066, %5
  %221 = sub i64 %220, 663938898897707066
  %222 = xor i64 %219, %221
  %223 = xor i64 %222, %218
  %224 = xor i64 %223, -8605206704579298489
  %225 = xor i64 %224, %215
  %226 = add i64 %1, 5442285078275608343
  %227 = add i64 6828151745146369299, %1
  %228 = add i64 %227, -1385866666870760956
  %229 = or i64 %3, -1921991583714322768
  %230 = xor i64 %3, -1
  %231 = and i64 %230, -3083989412961408950
  %232 = and i64 %3, 3083989412961408949
  %233 = or i64 %231, %232
  %234 = xor i64 3485998461247323898, %233
  %235 = xor i64 %3, -1
  %236 = or i64 1921991583714322767, %235
  %237 = xor i64 %236, -1
  %238 = and i64 %237, -1
  %239 = or i64 %234, %238
  %240 = xor i64 %239, 4405922680750707409
  %241 = xor i64 %240, %228
  %242 = xor i64 %241, %226
  %243 = xor i64 %242, %229
  %244 = mul i64 %225, %243
  %245 = trunc i64 %244 to i32
  %246 = xor i32 %214, %245
  store i32 %246, i32* %0, align 4
  %247 = call i8** @bf6596980413736034409(i32* %0)
  %248 = load i8*, i8** %247, align 8
  indirectbr i8* %248, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %249 = call i8** @lk18308803058659636891(i64* %7)
  %250 = load i8*, i8** %249, align 8
  %251 = bitcast i8* %250 to void (i32, i32, i1, i32, i32*)*
  call void %251(i32 %21, i32 %23, i1 %14, i32 %19, i32* %dispatcher)
  %252 = load i8*, i8** %4, align 8
  %253 = load i8, i8* %252, align 1
  %254 = mul i8 %253, 2
  %255 = mul i8 %253, 2
  %256 = add i8 2, %255
  %257 = mul i8 %254, %256
  %258 = srem i8 %257, 4
  %259 = icmp eq i8 %258, 0
  %260 = mul i8 %253, %253
  %261 = add i8 %260, %253
  %262 = srem i8 %261, 2
  %263 = icmp eq i8 %262, 0
  %264 = or i1 %259, %263
  %265 = sext i8 %26 to i64
  %266 = and i64 %265, 64529862840333531
  %267 = or i64 -64529862840333532, %265
  %268 = sub i64 %267, -64529862840333532
  %269 = sext i32 %19 to i64
  %270 = add i64 %269, -8849107763701198184
  %271 = and i64 -8849107763701198184, %269
  %272 = or i64 -8849107763701198184, %269
  %273 = add i64 %271, %272
  %274 = sext i32 %21 to i64
  %275 = or i64 %274, 7398469396079002419
  %276 = and i64 7398469396079002419, %274
  %277 = xor i64 7398469396079002419, %274
  %278 = or i64 %276, %277
  %279 = xor i64 %270, %268
  %280 = xor i64 %279, %278
  %281 = xor i64 %280, %266
  %282 = xor i64 %281, %275
  %283 = xor i64 %282, -1890213205359462191
  %284 = xor i64 %283, %273
  %285 = sext i8 %106 to i64
  %286 = or i64 %285, 6483950072610076214
  %287 = xor i64 %285, -1
  %288 = and i64 %287, -3540921196935433737
  %289 = and i64 %285, 3540921196935433736
  %290 = or i64 %288, %289
  %291 = xor i64 -7554928209313560639, %290
  %292 = xor i64 %285, -1
  %293 = or i64 -6483950072610076215, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %294, -1
  %296 = or i64 %291, %295
  %297 = sext i8 %150 to i64
  %298 = and i64 %297, 4777524730336519963
  %299 = xor i64 %297, -1
  %300 = xor i64 4777524730336519963, %299
  %301 = and i64 %300, 4777524730336519963
  %302 = xor i64 %286, -3698579758127646597
  %303 = xor i64 %302, %296
  %304 = xor i64 %303, %301
  %305 = xor i64 %304, %298
  %306 = mul i64 %284, %305
  %307 = trunc i64 %306 to i32
  %308 = select i1 %264, i32 984876137, i32 %307
  %309 = xor i32 %308, 2
  store i32 %309, i32* %0, align 4
  %310 = call i8** @bf6596980413736034409(i32* %0)
  %311 = load i8*, i8** %310, align 8
  indirectbr i8* %311, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.32([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6415106747569470537, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.32, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6415106747569470537, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.32, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6415106747569470537, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.32, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1819560383262807543, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, i32*)* @main_loop.extracted.32.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf1524551660851897346(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 18
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %6, align 8
  %18 = load i8, i8* %17, align 1
  %19 = mul i8 %18, 2
  %20 = mul i8 %18, 2
  %21 = sub i8 0, %20
  %22 = add i8 -2, %21
  %23 = sub i8 0, %22
  %24 = mul i8 %19, %23
  %25 = srem i8 %24, 4
  %26 = and i64 %8, 4115835830715554224
  %27 = xor i64 %8, -1
  %28 = xor i64 4115835830715554224, %27
  %29 = and i64 %28, 4115835830715554224
  %30 = and i64 %5, 2874374057889302993
  %31 = xor i64 %5, -1
  %32 = xor i64 2874374057889302993, %31
  %33 = and i64 %32, 2874374057889302993
  %34 = xor i64 -5624418000967969927, %33
  %35 = xor i64 %34, %29
  %36 = xor i64 %35, %26
  %37 = xor i64 %36, %30
  %38 = or i64 %1, 6180702207138361626
  %39 = and i64 6180702207138361626, %1
  %40 = xor i64 6180702207138361626, %1
  %41 = or i64 %39, %40
  %42 = and i64 %3, 4131184745516699012
  %43 = or i64 -4131184745516699013, %3
  %44 = sub i64 %43, -4131184745516699013
  %45 = xor i64 0, %38
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, %42
  %48 = xor i64 %47, %44
  %49 = mul i64 %37, %48
  %50 = trunc i64 %49 to i8
  %51 = icmp eq i8 %25, %50
  %52 = mul i8 %18, %18
  %53 = add i8 %52, %18
  %54 = srem i8 %53, 2
  %55 = icmp eq i8 %54, 0
  %56 = or i1 %51, %55
  %57 = select i1 %56, i32 984876138, i32 984876136
  %58 = xor i32 %57, 2
  store i32 %58, i32* %0, align 4
  %59 = call i8** @bf1524551660851897346(i32* %0)
  %60 = load i8*, i8** %59, align 8
  indirectbr i8* %60, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %61 = call i8** @lk2605295399637884959(i64* %7)
  %62 = load i8*, i8** %61, align 8
  %63 = bitcast i8* %62 to void (i32, i32, i32*)*
  call void %63(i32 %14, i32 %16, i32* %dispatcher)
  %64 = load i8*, i8** %6, align 8
  %65 = load i8, i8* %64, align 1
  %66 = mul i8 %65, 2
  %67 = sext i32 %57 to i64
  %68 = and i64 %67, -6837497289380826689
  %69 = xor i64 %67, -1
  %70 = or i64 6837497289380826688, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = sext i32 %16 to i64
  %74 = and i64 %73, -8178684724254028123
  %75 = xor i64 %73, -1
  %76 = xor i64 -8178684724254028123, %75
  %77 = and i64 %76, -8178684724254028123
  %78 = sext i8 %53 to i64
  %79 = and i64 %78, 5400237368426027679
  %80 = xor i64 %78, -1
  %81 = xor i64 5400237368426027679, %80
  %82 = and i64 %81, 5400237368426027679
  %83 = xor i64 %77, %72
  %84 = xor i64 %83, %74
  %85 = xor i64 %84, %68
  %86 = xor i64 %85, 5978807770993946349
  %87 = xor i64 %86, %82
  %88 = xor i64 %87, %79
  %89 = sext i8 %53 to i64
  %90 = add i64 %89, 4070780668080148860
  %91 = sub i64 0, %89
  %92 = sub i64 4070780668080148860, %91
  %93 = add i64 %3, -7932364888212900567
  %94 = and i64 -7932364888212900567, %3
  %95 = or i64 -7932364888212900567, %3
  %96 = add i64 %94, %95
  %97 = sext i8 %20 to i64
  %98 = and i64 %97, 2487156556036449496
  %99 = or i64 -2487156556036449497, %97
  %100 = sub i64 %99, -2487156556036449497
  %101 = xor i64 %92, %96
  %102 = xor i64 %101, %90
  %103 = xor i64 %102, %98
  %104 = xor i64 %103, -2549902541416415798
  %105 = xor i64 %104, %93
  %106 = xor i64 %105, %100
  %107 = mul i64 %88, %106
  %108 = trunc i64 %107 to i8
  %109 = mul i8 %65, %108
  %110 = add i8 2, %109
  %111 = mul i8 %66, %110
  %112 = srem i8 %111, 4
  %113 = icmp eq i8 %112, 0
  %114 = mul i8 %65, %65
  %115 = sub i8 0, %114
  %116 = sub i8 0, %65
  %117 = add i8 %115, %116
  %118 = sub i8 0, %117
  %119 = srem i8 %118, 2
  %120 = icmp eq i8 %119, 0
  %121 = xor i1 %120, true
  %122 = and i1 %113, %121
  %123 = add i1 %122, %120
  %124 = sext i8 %21 to i64
  %125 = or i64 %124, 502618694955054091
  %126 = and i64 502618694955054091, %124
  %127 = xor i64 502618694955054091, %124
  %128 = or i64 %126, %127
  %129 = sext i8 %21 to i64
  %130 = or i64 %129, 1247392061972840215
  %131 = xor i64 %129, -1
  %132 = and i64 %131, -6569444624903664016
  %133 = and i64 %129, 6569444624903664015
  %134 = or i64 %132, %133
  %135 = xor i64 -5360685901434523289, %134
  %136 = xor i64 %129, -1
  %137 = or i64 -1247392061972840216, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = or i64 %135, %139
  %141 = xor i64 %128, -8653838655294668095
  %142 = xor i64 %141, %140
  %143 = xor i64 %142, %125
  %144 = xor i64 %143, %130
  %145 = sext i32 %58 to i64
  %146 = and i64 %145, 5039859646708732609
  %147 = xor i64 %145, -1
  %148 = or i64 -5039859646708732610, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = sext i8 %24 to i64
  %152 = or i64 %151, -6327216851352380261
  %153 = xor i64 %151, -1
  %154 = and i64 -6327216851352380261, %153
  %155 = add i64 %154, %151
  %156 = sext i8 %23 to i64
  %157 = or i64 %156, 1313396909176709443
  %158 = xor i64 %156, -1
  %159 = and i64 %158, 5203949540997539185
  %160 = and i64 %156, -5203949540997539186
  %161 = or i64 %159, %160
  %162 = xor i64 6485811347109299250, %161
  %163 = xor i64 %156, -1
  %164 = or i64 -1313396909176709444, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = or i64 %162, %166
  %168 = xor i64 %167, %150
  %169 = xor i64 %168, %155
  %170 = xor i64 %169, %152
  %171 = xor i64 %170, 4612141780176306410
  %172 = xor i64 %171, %146
  %173 = xor i64 %172, %157
  %174 = mul i64 %144, %173
  %175 = trunc i64 %174 to i32
  %176 = select i1 %123, i32 %175, i32 984876137
  %177 = xor i32 %176, 3
  store i32 %177, i32* %0, align 4
  %178 = call i8** @bf1524551660851897346(i32* %0)
  %179 = load i8*, i8** %178, align 8
  indirectbr i8* %179, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.33([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4883168609508392360, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.33, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4883168609508392360, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.33, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4883168609508392360, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.33, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12395021631910078423, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, i32*)* @main_loop.extracted.33.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf9670062208140280490(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 19
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %6, align 8
  %18 = load i8, i8* %17, align 1
  %19 = mul i8 %18, %18
  %20 = sub i8 0, %18
  %21 = sub i8 %19, %20
  %22 = mul i8 %21, 3
  %23 = srem i8 %22, 2
  %24 = icmp eq i8 %23, 0
  %25 = mul i8 %18, %18
  %26 = add i8 %25, %18
  %27 = srem i8 %26, 2
  %28 = and i64 %5, -2957786082135812074
  %29 = xor i64 %5, -1
  %30 = xor i64 -2957786082135812074, %29
  %31 = and i64 %30, -2957786082135812074
  %32 = and i64 %5, 2225365923817032738
  %33 = xor i64 %5, -1
  %34 = xor i64 2225365923817032738, %33
  %35 = and i64 %34, 2225365923817032738
  %36 = xor i64 %32, %31
  %37 = xor i64 %36, -4710870117973908441
  %38 = xor i64 %37, %35
  %39 = xor i64 %38, %28
  %40 = or i64 %3, -3632580058692289334
  %41 = xor i64 %3, -1
  %42 = and i64 -3632580058692289334, %41
  %43 = add i64 %42, %3
  %44 = add i64 %8, -3152755396164801504
  %45 = xor i64 -3152755396164801504, %8
  %46 = and i64 -3152755396164801504, %8
  %47 = mul i64 2, %46
  %48 = add i64 %45, %47
  %49 = or i64 %8, 2917086733732644234
  %50 = and i64 2917086733732644234, %8
  %51 = xor i64 2917086733732644234, %8
  %52 = or i64 %50, %51
  %53 = xor i64 %48, %49
  %54 = xor i64 %53, %43
  %55 = xor i64 %54, 0
  %56 = xor i64 %55, %44
  %57 = xor i64 %56, %40
  %58 = xor i64 %57, %52
  %59 = mul i64 %39, %58
  %60 = trunc i64 %59 to i8
  %61 = icmp eq i8 %27, %60
  %62 = and i1 %24, %61
  %63 = select i1 %62, i32 984876139, i32 984876137
  %64 = xor i32 %63, 2
  store i32 %64, i32* %0, align 4
  %65 = call i8** @bf9670062208140280490(i32* %0)
  %66 = load i8*, i8** %65, align 8
  indirectbr i8* %66, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %67 = call i8** @lk733164823360870755(i64* %7)
  %68 = load i8*, i8** %67, align 8
  %69 = bitcast i8* %68 to void (i32, i32, i32*)*
  call void %69(i32 %14, i32 %16, i32* %dispatcher)
  %70 = load i8*, i8** %6, align 8
  %71 = load i8, i8* %70, align 1
  %72 = and i8 %71, 1
  %73 = icmp eq i8 %72, 0
  %74 = mul i8 %71, %71
  %75 = add i8 %74, %71
  %76 = sext i8 %19 to i64
  %77 = and i64 %76, -2164718437617029812
  %78 = xor i64 %76, -1
  %79 = or i64 2164718437617029811, %78
  %80 = xor i64 %79, -1
  %81 = and i64 %80, -1
  %82 = add i64 %1, -2036111002482207637
  %83 = add i64 5525013477324565738, %1
  %84 = add i64 %83, -7561124479806773375
  %85 = sext i8 %18 to i64
  %86 = and i64 %85, 2233734915196891318
  %87 = xor i64 %85, -1
  %88 = xor i64 2233734915196891318, %87
  %89 = and i64 %88, 2233734915196891318
  %90 = xor i64 %82, -1912796844651389345
  %91 = xor i64 %90, %89
  %92 = xor i64 %91, %81
  %93 = xor i64 %92, %77
  %94 = xor i64 %93, %86
  %95 = xor i64 %94, %84
  %96 = sext i8 %20 to i64
  %97 = and i64 %96, -8291725514467140152
  %98 = xor i64 %96, -1
  %99 = xor i64 -8291725514467140152, %98
  %100 = and i64 %99, -8291725514467140152
  %101 = or i64 %5, 746003684685045938
  %102 = and i64 746003684685045938, %5
  %103 = xor i64 746003684685045938, %5
  %104 = or i64 %102, %103
  %105 = add i64 %5, 8988379705694991348
  %106 = sub i64 0, %5
  %107 = add i64 -8988379705694991348, %106
  %108 = sub i64 0, %107
  %109 = xor i64 %101, -68727399147308835
  %110 = xor i64 %109, %108
  %111 = xor i64 %110, %97
  %112 = xor i64 %111, %100
  %113 = xor i64 %112, %105
  %114 = xor i64 %113, %104
  %115 = mul i64 %95, %114
  %116 = trunc i64 %115 to i8
  %117 = mul i8 %75, %116
  %118 = srem i8 %117, 2
  %119 = icmp eq i8 %118, 0
  %120 = or i1 %73, %119
  %121 = select i1 %120, i32 984876136, i32 984876139
  %122 = or i32 %121, 3
  %123 = and i32 %121, 3
  %124 = sub i32 %122, %123
  store i32 %124, i32* %0, align 4
  %125 = call i8** @bf9670062208140280490(i32* %0)
  %126 = load i8*, i8** %125, align 8
  indirectbr i8* %126, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.34([53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem10, i32* %.reg2mem147, double* %.reg2mem149) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15774460795949983293, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.34, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15774460795949983293, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.34, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15774460795949983293, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.34, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable466230988663405414, i32 0, i64 %8
  store i8* bitcast (void ()* @main_loop.extracted.34.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf3925661578790816960(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 21
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %16 = load i32, i32* %15, align 4
  %17 = srem i32 %14, %16
  store i32 %17, i32* %dispatcher, align 4
  %.reload17 = load i32, i32* %.reg2mem10, align 4
  store i32 %.reload17, i32* %.reg2mem147, align 4
  store double 0.000000e+00, double* %.reg2mem149, align 8
  %18 = load i8*, i8** %6, align 8
  %19 = load i8, i8* %18, align 1
  %20 = mul i8 %19, 2
  %21 = mul i8 %19, 2
  %22 = and i8 2, %21
  %23 = or i8 2, %21
  %24 = add i8 %22, %23
  %25 = mul i8 %20, %24
  %26 = srem i8 %25, 4
  %27 = and i64 %5, 5690899644871780713
  %28 = xor i64 %5, -1
  %29 = xor i64 5690899644871780713, %28
  %30 = and i64 %29, 5690899644871780713
  %31 = or i64 %3, -3952686290660957184
  %32 = and i64 -3952686290660957184, %3
  %33 = xor i64 -3952686290660957184, %3
  %34 = or i64 %32, %33
  %35 = or i64 %5, -5616997593161599548
  %36 = xor i64 %5, -1
  %37 = and i64 %36, 2995504592867752903
  %38 = and i64 %5, -2995504592867752904
  %39 = or i64 %37, %38
  %40 = xor i64 -7233271398380204541, %39
  %41 = xor i64 %5, -1
  %42 = or i64 5616997593161599547, %41
  %43 = xor i64 %42, -1
  %44 = and i64 %43, -1
  %45 = or i64 %40, %44
  %46 = xor i64 %27, %35
  %47 = xor i64 %46, %31
  %48 = xor i64 %47, %34
  %49 = xor i64 %48, 4117848174379462843
  %50 = xor i64 %49, %30
  %51 = xor i64 %50, %45
  %52 = or i64 %3, -1794433947708934283
  %53 = and i64 -1794433947708934283, %3
  %54 = xor i64 -1794433947708934283, %3
  %55 = or i64 %53, %54
  %56 = and i64 %8, 8948809599798438459
  %57 = xor i64 %8, -1
  %58 = or i64 -8948809599798438460, %57
  %59 = xor i64 %58, -1
  %60 = and i64 %59, -1
  %61 = xor i64 %52, 0
  %62 = xor i64 %61, %60
  %63 = xor i64 %62, %55
  %64 = xor i64 %63, %56
  %65 = mul i64 %51, %64
  %66 = trunc i64 %65 to i8
  %67 = icmp eq i8 %26, %66
  %68 = mul i8 %19, %19
  %69 = add i8 %68, %19
  %70 = srem i8 %69, 2
  %71 = icmp eq i8 %70, 0
  %72 = and i1 %67, %71
  %73 = select i1 %72, i32 984876139, i32 984876137
  %74 = xor i32 %73, 2
  store i32 %74, i32* %0, align 4
  %75 = call i8** @bf3925661578790816960(i32* %0)
  %76 = load i8*, i8** %75, align 8
  indirectbr i8* %76, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %77 = call i8** @lk263679519223026857(i64* %7)
  %78 = load i8*, i8** %77, align 8
  %79 = bitcast i8* %78 to void ()*
  call void %79()
  %80 = load i8*, i8** %2, align 8
  %81 = load i8, i8* %80, align 1
  %82 = and i8 %81, 1
  %83 = icmp eq i8 %82, 1
  %84 = mul i8 %81, %81
  %85 = add i8 %84, %81
  %86 = srem i8 %85, 2
  %87 = icmp eq i8 %86, 0
  %88 = or i1 %83, %87
  %89 = sext i8 %70 to i64
  %90 = and i64 %89, 6381057667679266349
  %91 = xor i64 %89, -1
  %92 = or i64 -6381057667679266350, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = sext i8 %23 to i64
  %96 = or i64 %95, -8553486568912522171
  %97 = and i64 -8553486568912522171, %95
  %98 = xor i64 -8553486568912522171, %95
  %99 = or i64 %97, %98
  %100 = xor i64 %94, %99
  %101 = xor i64 %100, %96
  %102 = xor i64 %101, %90
  %103 = xor i64 %102, -7710842894882877599
  %104 = sext i8 %19 to i64
  %105 = add i64 %104, -8390320742874097889
  %106 = sub i64 0, %104
  %107 = sub i64 -8390320742874097889, %106
  %108 = sext i32 %.reload17 to i64
  %109 = and i64 %108, 7092147092410462578
  %110 = or i64 -7092147092410462579, %108
  %111 = sub i64 %110, -7092147092410462579
  %112 = sext i8 %22 to i64
  %113 = add i64 %112, -3367143914808318708
  %114 = xor i64 -3367143914808318708, %112
  %115 = and i64 -3367143914808318708, %112
  %116 = mul i64 2, %115
  %117 = add i64 %114, %116
  %118 = xor i64 %105, %117
  %119 = xor i64 %118, %109
  %120 = xor i64 %119, %107
  %121 = xor i64 %120, -7203376695453489816
  %122 = xor i64 %121, %111
  %123 = xor i64 %122, %113
  %124 = mul i64 %103, %123
  %125 = trunc i64 %124 to i32
  %126 = select i1 %88, i32 %125, i32 984876136
  %127 = xor i32 %126, 0
  store i32 %127, i32* %0, align 4
  %128 = call i8** @bf3925661578790816960(i32* %0)
  %129 = load i8*, i8** %128, align 8
  indirectbr i8* %129, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.35(i32* %.reg2mem33, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem163, i1* %.reg2mem165) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3877704362992657921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.35, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3877704362992657921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.35, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3877704362992657921, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.35, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11450567809067022175, i32 0, i64 %8
  store i8* bitcast (void (i32*, [53 x i32]*, i32*, i32*, i1*)* @main_loop.extracted.35.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf14887632971262094281(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = load i8*, i8** %4, align 8
  %14 = load i8, i8* %13, align 1
  %15 = and i8 %14, 1
  %16 = and i64 %3, -8141938304042025946
  %17 = xor i64 %3, -1
  %18 = or i64 8141938304042025945, %17
  %19 = xor i64 %18, -1
  %20 = and i64 %19, -1
  %21 = or i64 %1, -770702244490772083
  %22 = and i64 -770702244490772083, %1
  %23 = xor i64 -770702244490772083, %1
  %24 = or i64 %22, %23
  %25 = xor i64 %20, 4145882318467899145
  %26 = xor i64 %25, %16
  %27 = xor i64 %26, %24
  %28 = xor i64 %27, %21
  %29 = and i64 %8, -2422826699451760930
  %30 = xor i64 %8, -1
  %31 = xor i64 -2422826699451760930, %30
  %32 = and i64 %31, -2422826699451760930
  %33 = add i64 %1, -4244146154446059311
  %34 = sub i64 0, %1
  %35 = add i64 4244146154446059311, %34
  %36 = sub i64 0, %35
  %37 = xor i64 %32, %33
  %38 = xor i64 %37, %29
  %39 = xor i64 %38, %36
  %40 = xor i64 %39, 0
  %41 = mul i64 %28, %40
  %42 = trunc i64 %41 to i8
  %43 = icmp eq i8 %15, %42
  %44 = mul i8 %14, %14
  %45 = add i8 %44, %14
  %46 = mul i8 %45, 3
  %47 = srem i8 %46, 2
  %48 = icmp eq i8 %47, 0
  %49 = or i1 %43, %48
  %50 = select i1 %49, i32 984876136, i32 984876137
  %51 = add i64 %3, 671321757264198605
  %52 = add i64 -5181394055456879186, %3
  %53 = add i64 %52, 5852715812721077791
  %54 = add i64 %8, 2564235787438614249
  %55 = xor i64 2564235787438614249, %8
  %56 = and i64 2564235787438614249, %8
  %57 = mul i64 2, %56
  %58 = add i64 %55, %57
  %59 = xor i64 -1089186177878693737, %54
  %60 = xor i64 %59, %53
  %61 = xor i64 %60, %58
  %62 = xor i64 %61, %51
  %63 = and i64 %3, 842410303542268576
  %64 = xor i64 %3, -1
  %65 = or i64 -842410303542268577, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = and i64 %1, 3034292874387369549
  %69 = xor i64 %1, -1
  %70 = or i64 -3034292874387369550, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = xor i64 %63, %68
  %74 = xor i64 %73, %67
  %75 = xor i64 %74, -8629704521360894169
  %76 = xor i64 %75, %72
  %77 = mul i64 %62, %76
  %78 = trunc i64 %77 to i32
  %79 = xor i32 %50, %78
  store i32 %79, i32* %0, align 4
  %80 = call i8** @bf14887632971262094281(i32* %0)
  %81 = load i8*, i8** %80, align 8
  indirectbr i8* %81, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %82 = call i8** @lk330495605987470769(i64* %7)
  %83 = load i8*, i8** %82, align 8
  %84 = bitcast i8* %83 to void (i32*, [53 x i32]*, i32*, i32*, i1*)*
  call void %84(i32* %.reg2mem33, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem163, i1* %.reg2mem165)
  %85 = load i8*, i8** %4, align 8
  %86 = load i8, i8* %85, align 1
  %87 = mul i8 %86, 2
  %88 = mul i8 %86, 2
  %89 = add i8 2, %88
  %90 = mul i8 %87, %89
  %91 = or i64 %1, 6277966848631430787
  %92 = xor i64 %1, -1
  %93 = and i64 6277966848631430787, %92
  %94 = add i64 %93, %1
  %95 = or i64 %3, 3602693500837865666
  %96 = xor i64 %3, -1
  %97 = and i64 3602693500837865666, %96
  %98 = add i64 %97, %3
  %99 = sext i8 %46 to i64
  %100 = add i64 %99, 8331306550883013713
  %101 = add i64 -1691951416080139426, %99
  %102 = add i64 %101, -8423486106746398477
  %103 = xor i64 %100, %91
  %104 = xor i64 %103, %102
  %105 = xor i64 %104, %95
  %106 = xor i64 %105, -2076004754996924615
  %107 = xor i64 %106, %98
  %108 = xor i64 %107, %94
  %109 = sext i8 %44 to i64
  %110 = and i64 %109, 1169907857856326717
  %111 = xor i64 %109, -1
  %112 = xor i64 1169907857856326717, %111
  %113 = and i64 %112, 1169907857856326717
  %114 = sext i8 %47 to i64
  %115 = and i64 %114, 288560581594844604
  %116 = xor i64 %114, -1
  %117 = xor i64 288560581594844604, %116
  %118 = and i64 %117, 288560581594844604
  %119 = xor i64 3759478531137813540, %110
  %120 = xor i64 %119, %113
  %121 = xor i64 %120, %115
  %122 = xor i64 %121, %118
  %123 = mul i64 %108, %122
  %124 = trunc i64 %123 to i8
  %125 = srem i8 %90, %124
  %126 = icmp eq i8 %125, 0
  %127 = mul i8 %86, %86
  %128 = add i8 %127, %86
  %129 = srem i8 %128, 2
  %130 = icmp eq i8 %129, 0
  %131 = or i1 %126, %130
  %132 = select i1 %131, i32 984876137, i32 984876136
  %133 = xor i32 %132, 1
  store i32 %133, i32* %0, align 4
  %134 = call i8** @bf14887632971262094281(i32* %0)
  %135 = load i8*, i8** %134, align 8
  indirectbr i8* %135, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.36(i32* %.reg2mem10, i32* %.reg2mem112, [53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8775210668299724181, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.36, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8775210668299724181, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.36, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8775210668299724181, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.36, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6801622834913932444, i32 0, i64 %8
  store i8* bitcast (void (i32*, i1, [53 x i32]*, i32*)* @main_loop.extracted.36.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf2316937588321097812(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload16 = load i32, i32* %.reg2mem10, align 4
  %13 = mul i32 %.reload16, 2
  %.reload15 = load i32, i32* %.reg2mem10, align 4
  %14 = mul i32 %.reload15, 2
  %15 = add i32 2, %14
  store i32 %15, i32* %.reg2mem112, align 4
  %.reload117 = load i32, i32* %.reg2mem112, align 4
  %16 = mul i32 %13, %.reload117
  %17 = srem i32 %16, 4
  %18 = icmp eq i32 %17, 0
  %19 = load i8*, i8** %6, align 8
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 1
  %22 = icmp eq i8 %21, 1
  %23 = mul i8 %20, %20
  %24 = add i8 %23, %20
  %25 = srem i8 %24, 2
  %26 = icmp eq i8 %25, 0
  %27 = or i1 %22, %26
  %28 = select i1 %27, i32 984876138, i32 984876139
  %29 = or i32 %28, 1
  %30 = and i32 %28, 1
  %31 = sub i32 %29, %30
  store i32 %31, i32* %0, align 4
  %32 = call i8** @bf2316937588321097812(i32* %0)
  %33 = load i8*, i8** %32, align 8
  indirectbr i8* %33, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %34 = call i8** @lk3651362651451987676(i64* %7)
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to void (i32*, i1, [53 x i32]*, i32*)*
  call void %36(i32* %.reg2mem10, i1 %18, [53 x i32]* %lookupTable, i32* %dispatcher)
  %37 = load i8*, i8** %4, align 8
  %38 = load i8, i8* %37, align 1
  %39 = and i8 %38, 1
  %40 = sext i32 %29 to i64
  %41 = add i64 %40, 6143013429695599097
  %42 = add i64 1319035649107018189, %40
  %43 = sub i64 %42, -4823977780588580908
  %44 = sext i8 %23 to i64
  %45 = and i64 %44, -91171366547754734
  %46 = or i64 91171366547754733, %44
  %47 = sub i64 %46, 91171366547754733
  %48 = xor i64 %41, -2120703269754129717
  %49 = xor i64 %48, %47
  %50 = xor i64 %49, %43
  %51 = xor i64 %50, %45
  %52 = add i64 %5, 9171472828884070173
  %53 = add i64 1931027090105695485, %5
  %54 = add i64 %53, 7240445738778374688
  %55 = add i64 %8, 2744883489139569385
  %56 = xor i64 2744883489139569385, %8
  %57 = and i64 2744883489139569385, %8
  %58 = mul i64 2, %57
  %59 = add i64 %56, %58
  %60 = sext i32 %15 to i64
  %61 = or i64 %60, 5246008880400738946
  %62 = and i64 5246008880400738946, %60
  %63 = xor i64 5246008880400738946, %60
  %64 = or i64 %62, %63
  %65 = xor i64 %61, 5522046771791176419
  %66 = xor i64 %65, %59
  %67 = xor i64 %66, %52
  %68 = xor i64 %67, %64
  %69 = xor i64 %68, %55
  %70 = xor i64 %69, %54
  %71 = mul i64 %51, %70
  %72 = trunc i64 %71 to i8
  %73 = icmp eq i8 %39, %72
  %74 = mul i8 %38, %38
  %75 = add i8 %74, %38
  %76 = srem i8 %75, 2
  %77 = icmp eq i8 %76, 0
  %78 = or i1 %73, %77
  %79 = sext i32 %13 to i64
  %80 = add i64 %79, -2733957149108252517
  %81 = add i64 -7899441970950223518, %79
  %82 = sub i64 %81, -5165484821841971001
  %83 = and i64 %1, 4866517578590882961
  %84 = xor i64 %1, -1
  %85 = xor i64 4866517578590882961, %84
  %86 = and i64 %85, 4866517578590882961
  %87 = sext i32 %30 to i64
  %88 = and i64 %87, 8392020348346874614
  %89 = xor i64 %87, -1
  %90 = or i64 -8392020348346874615, %89
  %91 = xor i64 %90, -1
  %92 = and i64 %91, -1
  %93 = xor i64 4754683721892784289, %82
  %94 = xor i64 %93, %80
  %95 = xor i64 %94, %86
  %96 = xor i64 %95, %83
  %97 = xor i64 %96, %92
  %98 = xor i64 %97, %88
  %99 = sext i32 %.reload15 to i64
  %100 = and i64 %99, -6097735309031399216
  %101 = or i64 6097735309031399215, %99
  %102 = sub i64 %101, 6097735309031399215
  %103 = sext i32 %29 to i64
  %104 = and i64 %103, -2154629158680414018
  %105 = xor i64 %103, -1
  %106 = or i64 2154629158680414017, %105
  %107 = xor i64 %106, -1
  %108 = and i64 %107, -1
  %109 = sext i8 %24 to i64
  %110 = and i64 %109, 3640653128241772804
  %111 = or i64 -3640653128241772805, %109
  %112 = sub i64 %111, -3640653128241772805
  %113 = xor i64 %110, 8326895221105628555
  %114 = xor i64 %113, %100
  %115 = xor i64 %114, %112
  %116 = xor i64 %115, %102
  %117 = xor i64 %116, %104
  %118 = xor i64 %117, %108
  %119 = mul i64 %98, %118
  %120 = trunc i64 %119 to i32
  %121 = select i1 %78, i32 %120, i32 984876138
  %122 = xor i32 %121, 1
  store i32 %122, i32* %0, align 4
  %123 = call i8** @bf2316937588321097812(i32* %0)
  %124 = load i8*, i8** %123, align 8
  indirectbr i8* %124, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.37(double* %.reg2mem80, i1* %.reg2mem118, i32* %.reg2mem110, i32* %.reg2mem112, i1* %.reg2mem120, [53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876139)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5729685810929087705, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.37, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5729685810929087705, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.37, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5729685810929087705, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.37, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable4787608969622056690, i32 0, i64 %8
  store i8* bitcast (void (i32*, i32*, i1*, [53 x i32]*, i32*)* @main_loop.extracted.37.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf6276024088074375969(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = sdiv i64 101, 88
  %.reload82 = load double, double* %.reg2mem80, align 8
  %14 = fcmp olt double %.reload82, 6.280000e+00
  store i1 %14, i1* %.reg2mem118, align 1
  %15 = sdiv i64 54, 113
  %16 = add i64 2, 55
  %17 = sdiv i64 91, 18
  %18 = mul i64 82, 66
  %19 = add i64 %8, -8709902482360322559
  %20 = sub i64 0, %8
  %21 = add i64 8709902482360322559, %20
  %22 = sub i64 0, %21
  %23 = add i64 %8, 8888808540032268099
  %24 = add i64 -2267767763827739657, %8
  %25 = sub i64 %24, 7290167769849543860
  %26 = xor i64 %25, %19
  %27 = xor i64 %26, %23
  %28 = xor i64 %27, 4000798622009188511
  %29 = xor i64 %28, %22
  %30 = and i64 %1, -7268043968837586889
  %31 = or i64 7268043968837586888, %1
  %32 = sub i64 %31, 7268043968837586888
  %33 = or i64 %8, 3010564746356269649
  %34 = xor i64 %8, -1
  %35 = and i64 %34, 6230314371734320581
  %36 = and i64 %8, -6230314371734320582
  %37 = or i64 %35, %36
  %38 = xor i64 9201180898376882068, %37
  %39 = xor i64 %8, -1
  %40 = or i64 -3010564746356269650, %39
  %41 = xor i64 %40, -1
  %42 = and i64 %41, -1
  %43 = or i64 %38, %42
  %44 = or i64 %3, -5861921019861379077
  %45 = and i64 -5861921019861379077, %3
  %46 = xor i64 -5861921019861379077, %3
  %47 = or i64 %45, %46
  %48 = xor i64 %32, %33
  %49 = xor i64 %48, %30
  %50 = xor i64 %49, -5967588415005140026
  %51 = xor i64 %50, %43
  %52 = xor i64 %51, %47
  %53 = xor i64 %52, %44
  %54 = mul i64 %29, %53
  %55 = add i64 %54, 5595673188077879412
  %56 = and i64 %1, 4602164506829007311
  %57 = xor i64 %1, -1
  %58 = xor i64 4602164506829007311, %57
  %59 = and i64 %58, 4602164506829007311
  %60 = and i64 %8, -865349450922675176
  %61 = xor i64 %8, -1
  %62 = or i64 865349450922675175, %61
  %63 = xor i64 %62, -1
  %64 = and i64 %63, -1
  %65 = or i64 %3, -2444458040460453718
  %66 = xor i64 %3, -1
  %67 = and i64 -2444458040460453718, %66
  %68 = add i64 %67, %3
  %69 = xor i64 %59, %68
  %70 = xor i64 %69, %56
  %71 = xor i64 %70, 3438495427746151993
  %72 = xor i64 %71, %60
  %73 = xor i64 %72, %65
  %74 = xor i64 %73, %64
  %75 = add i64 %3, 5530550703156327788
  %76 = and i64 5530550703156327788, %3
  %77 = or i64 5530550703156327788, %3
  %78 = add i64 %76, %77
  %79 = and i64 %3, 1627577206906050480
  %80 = xor i64 %3, -1
  %81 = xor i64 1627577206906050480, %80
  %82 = and i64 %81, 1627577206906050480
  %83 = xor i64 %75, %82
  %84 = xor i64 %83, %79
  %85 = xor i64 %84, %78
  %86 = xor i64 %85, 3368827669456516035
  %87 = mul i64 %74, %86
  %88 = sdiv i64 %87, 101
  %89 = add i64 78, 121
  %90 = and i64 %3, -5022557202124090529
  %91 = xor i64 %3, -1
  %92 = xor i64 -5022557202124090529, %91
  %93 = and i64 %92, -5022557202124090529
  %94 = and i64 %1, 8381645013323897799
  %95 = or i64 -8381645013323897800, %1
  %96 = sub i64 %95, -8381645013323897800
  %97 = xor i64 909793037864331099, %93
  %98 = xor i64 %97, %90
  %99 = xor i64 %98, %94
  %100 = xor i64 %99, %96
  %101 = and i64 %1, -2258528625084921693
  %102 = xor i64 %1, -1
  %103 = or i64 2258528625084921692, %102
  %104 = xor i64 %103, -1
  %105 = and i64 %104, -1
  %106 = or i64 %1, -1389963920015468119
  %107 = and i64 -1389963920015468119, %1
  %108 = xor i64 -1389963920015468119, %1
  %109 = or i64 %107, %108
  %110 = xor i64 -5092698409504098466, %109
  %111 = xor i64 %110, %106
  %112 = xor i64 %111, %105
  %113 = xor i64 %112, %101
  %114 = mul i64 %100, %113
  %115 = add i64 %114, 106
  %116 = load i8*, i8** %6, align 8
  %117 = load i8, i8* %116, align 1
  %118 = mul i8 %117, 2
  %119 = mul i8 %117, 2
  %120 = xor i8 2, %119
  %121 = and i8 2, %119
  %122 = mul i8 2, %121
  %123 = add i8 %120, %122
  %124 = add i64 %5, 2387388799578882626
  %125 = sub i64 0, %5
  %126 = sub i64 2387388799578882626, %125
  %127 = add i64 %5, -8290187279782252607
  %128 = sub i64 0, %5
  %129 = add i64 8290187279782252607, %128
  %130 = sub i64 0, %129
  %131 = xor i64 %130, %124
  %132 = xor i64 %131, %126
  %133 = xor i64 %132, 4194893023158456727
  %134 = xor i64 %133, %127
  %135 = or i64 %3, -3621561357805213726
  %136 = and i64 -3621561357805213726, %3
  %137 = xor i64 -3621561357805213726, %3
  %138 = or i64 %136, %137
  %139 = and i64 %1, 5075531414056631293
  %140 = xor i64 %1, -1
  %141 = xor i64 5075531414056631293, %140
  %142 = and i64 %141, 5075531414056631293
  %143 = xor i64 %142, %135
  %144 = xor i64 %143, %139
  %145 = xor i64 %144, %138
  %146 = xor i64 %145, 2557698879988824049
  %147 = mul i64 %134, %146
  %148 = trunc i64 %147 to i8
  %149 = mul i8 %148, %123
  %150 = add i8 23, %149
  %151 = mul i8 -105, %150
  %152 = add i8 111, %151
  %153 = mul i8 %118, %152
  %154 = srem i8 %153, 4
  %155 = icmp eq i8 %154, 0
  %156 = mul i8 %117, %117
  %157 = add i8 %156, %117
  %158 = srem i8 %157, 2
  %159 = icmp eq i8 %158, 0
  %160 = xor i1 %155, true
  %161 = and i1 %160, true
  %162 = and i1 %155, false
  %163 = or i1 %161, %162
  %164 = xor i1 %159, true
  %165 = and i1 %164, true
  %166 = and i1 %159, false
  %167 = or i1 %165, %166
  %168 = xor i1 %163, %167
  %169 = xor i1 %155, true
  %170 = xor i1 %159, true
  %171 = or i1 %169, %170
  %172 = xor i1 %171, true
  %173 = and i1 %172, true
  %174 = or i1 %168, %173
  %175 = select i1 %174, i32 984876139, i32 984876137
  %176 = xor i32 %175, -1
  %177 = and i32 %176, -1083744350
  %178 = and i32 %175, 1083744349
  %179 = or i32 %177, %178
  %180 = xor i32 %179, -1083744352
  store i32 %180, i32* %0, align 4
  %181 = call i8** @bf6276024088074375969(i32* %0)
  %182 = load i8*, i8** %181, align 8
  indirectbr i8* %182, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  %183 = sext i8 %122 to i64
  %184 = and i64 %183, -73546243933376973
  %185 = or i64 73546243933376972, %183
  %186 = sub i64 %185, 73546243933376972
  %187 = sext i8 %153 to i64
  %188 = add i64 %187, 4346356763411662485
  %189 = add i64 8032360978384414473, %187
  %190 = sub i64 %189, 3686004214972751988
  %191 = xor i64 %186, %190
  %192 = xor i64 %191, 838389700468603777
  %193 = xor i64 %192, %184
  %194 = xor i64 %193, %188
  %195 = sext i8 %158 to i64
  %196 = or i64 %195, -2922737231583991089
  %197 = xor i64 %195, -1
  %198 = and i64 %197, -4597353147367982660
  %199 = and i64 %195, 4597353147367982659
  %200 = or i64 %198, %199
  %201 = xor i64 1676098079741956979, %200
  %202 = xor i64 %195, -1
  %203 = or i64 2922737231583991088, %202
  %204 = xor i64 %203, -1
  %205 = and i64 %204, -1
  %206 = or i64 %201, %205
  %207 = and i64 %18, 832576335142341386
  %208 = or i64 -832576335142341387, %18
  %209 = sub i64 %208, -832576335142341387
  %210 = sext i8 %121 to i64
  %211 = add i64 %210, 842141049132917113
  %212 = add i64 -3687228585137648095, %210
  %213 = sub i64 %212, -4529369634270565208
  %214 = xor i64 %213, %211
  %215 = xor i64 %214, %206
  %216 = xor i64 %215, -8317198099425592049
  %217 = xor i64 %216, %209
  %218 = xor i64 %217, %207
  %219 = xor i64 %218, %196
  %220 = mul i64 %194, %219
  store i64 %220, i64* %7, align 8
  %221 = call i8** @lk10773722924660164129(i64* %7)
  %222 = load i8*, i8** %221, align 8
  %223 = bitcast i8* %222 to void (i32*, i32*, i1*, [53 x i32]*, i32*)*
  call void %223(i32* %.reg2mem110, i32* %.reg2mem112, i1* %.reg2mem120, [53 x i32]* %lookupTable, i32* %dispatcher)
  %224 = load i8*, i8** %6, align 8
  %225 = load i8, i8* %224, align 1
  %226 = and i8 %225, 1
  %227 = icmp eq i8 %226, 0
  %228 = mul i8 %225, %225
  %229 = add i8 %228, %225
  %230 = mul i8 %229, 3
  %231 = srem i8 %230, 2
  %232 = icmp eq i8 %231, 0
  %233 = xor i1 %227, true
  %234 = and i1 %233, false
  %235 = sext i32 %176 to i64
  %236 = add i64 %235, -1214669382565915676
  %237 = add i64 -7483910218692970459, %235
  %238 = add i64 %237, 6269240836127054783
  %239 = or i64 %15, -2449861757227725258
  %240 = xor i64 %15, -1
  %241 = and i64 %240, -3029249826663365113
  %242 = and i64 %15, 3029249826663365112
  %243 = or i64 %241, %242
  %244 = xor i64 861778398176970801, %243
  %245 = xor i64 %15, -1
  %246 = or i64 2449861757227725257, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = or i64 %244, %248
  %250 = add i64 %8, -7991482147343291484
  %251 = sub i64 0, %8
  %252 = sub i64 -7991482147343291484, %251
  %253 = xor i64 %239, %252
  %254 = xor i64 %253, %250
  %255 = xor i64 %254, %238
  %256 = xor i64 %255, 6447248690176843541
  %257 = xor i64 %256, %249
  %258 = xor i64 %257, %236
  %259 = sext i8 %119 to i64
  %260 = and i64 %259, -5420593782272289841
  %261 = xor i64 %259, -1
  %262 = or i64 5420593782272289840, %261
  %263 = xor i64 %262, -1
  %264 = and i64 %263, -1
  %265 = add i64 %1, -3420057330285308678
  %266 = and i64 -3420057330285308678, %1
  %267 = or i64 -3420057330285308678, %1
  %268 = add i64 %266, %267
  %269 = sext i8 %154 to i64
  %270 = add i64 %269, 6508572478895856856
  %271 = add i64 5122887473635555555, %269
  %272 = sub i64 %271, -1385685005260301301
  %273 = xor i64 %268, %272
  %274 = xor i64 %273, %265
  %275 = xor i64 %274, %270
  %276 = xor i64 %275, %264
  %277 = xor i64 %276, %260
  %278 = xor i64 %277, 6536052364204734525
  %279 = mul i64 %258, %278
  %280 = trunc i64 %279 to i1
  %281 = and i1 %227, %280
  %282 = or i1 %234, %281
  %283 = and i64 %18, -6276010247040631491
  %284 = xor i64 %18, -1
  %285 = or i64 6276010247040631490, %284
  %286 = xor i64 %285, -1
  %287 = and i64 %286, -1
  %288 = and i64 %5, 6545820346451252069
  %289 = xor i64 %5, -1
  %290 = or i64 -6545820346451252070, %289
  %291 = xor i64 %290, -1
  %292 = and i64 %291, -1
  %293 = sext i8 %151 to i64
  %294 = or i64 %293, 5729230970425374567
  %295 = xor i64 %293, -1
  %296 = and i64 %295, -640811392019710089
  %297 = and i64 %293, 640811392019710088
  %298 = or i64 %296, %297
  %299 = xor i64 -5145027938890364912, %298
  %300 = xor i64 %293, -1
  %301 = or i64 -5729230970425374568, %300
  %302 = xor i64 %301, -1
  %303 = and i64 %302, -1
  %304 = or i64 %299, %303
  %305 = xor i64 %288, -5452436916858482013
  %306 = xor i64 %305, %304
  %307 = xor i64 %306, %294
  %308 = xor i64 %307, %283
  %309 = xor i64 %308, %287
  %310 = xor i64 %309, %292
  %311 = sext i8 %153 to i64
  %312 = and i64 %311, -3758725688055842560
  %313 = or i64 3758725688055842559, %311
  %314 = sub i64 %313, 3758725688055842559
  %315 = sext i8 %123 to i64
  %316 = and i64 %315, 8356504442770959946
  %317 = xor i64 %315, -1
  %318 = or i64 -8356504442770959947, %317
  %319 = xor i64 %318, -1
  %320 = and i64 %319, -1
  %321 = sext i8 %121 to i64
  %322 = add i64 %321, -7670019296095290472
  %323 = xor i64 -7670019296095290472, %321
  %324 = and i64 -7670019296095290472, %321
  %325 = mul i64 2, %324
  %326 = add i64 %323, %325
  %327 = xor i64 -5210879245736103669, %314
  %328 = xor i64 %327, %316
  %329 = xor i64 %328, %312
  %330 = xor i64 %329, %326
  %331 = xor i64 %330, %322
  %332 = xor i64 %331, %320
  %333 = mul i64 %310, %332
  %334 = trunc i64 %333 to i1
  %335 = xor i1 %232, %334
  %336 = add i64 %55, -4402823118709584344
  %337 = sub i64 0, %55
  %338 = add i64 4402823118709584344, %337
  %339 = sub i64 0, %338
  %340 = sext i32 %180 to i64
  %341 = or i64 %340, -7941025914721324383
  %342 = xor i64 %340, -1
  %343 = and i64 -7941025914721324383, %342
  %344 = add i64 %343, %340
  %345 = and i64 %55, -242982558424510125
  %346 = or i64 242982558424510124, %55
  %347 = sub i64 %346, 242982558424510124
  %348 = xor i64 -1363298913794608231, %336
  %349 = xor i64 %348, %347
  %350 = xor i64 %349, %345
  %351 = xor i64 %350, %341
  %352 = xor i64 %351, %339
  %353 = xor i64 %352, %344
  %354 = sext i8 %150 to i64
  %355 = add i64 %354, 6960130043062767779
  %356 = and i64 6960130043062767779, %354
  %357 = or i64 6960130043062767779, %354
  %358 = add i64 %356, %357
  %359 = sext i8 %122 to i64
  %360 = or i64 %359, -7879767624475870104
  %361 = and i64 -7879767624475870104, %359
  %362 = xor i64 -7879767624475870104, %359
  %363 = or i64 %361, %362
  %364 = xor i64 %355, 0
  %365 = xor i64 %364, %363
  %366 = xor i64 %365, %360
  %367 = xor i64 %366, %358
  %368 = mul i64 %353, %367
  %369 = trunc i64 %368 to i1
  %370 = and i1 %335, %369
  %371 = sext i8 %120 to i64
  %372 = and i64 %371, -1907931525677926417
  %373 = xor i64 %371, -1
  %374 = xor i64 -1907931525677926417, %373
  %375 = and i64 %374, -1907931525677926417
  %376 = add i64 %5, -5879486789984522510
  %377 = sub i64 0, %5
  %378 = add i64 5879486789984522510, %377
  %379 = sub i64 0, %378
  %380 = xor i64 %379, %372
  %381 = xor i64 %380, 6101102923061342485
  %382 = xor i64 %381, %376
  %383 = xor i64 %382, %375
  %384 = and i64 %13, 7790647762559100982
  %385 = xor i64 %13, -1
  %386 = or i64 -7790647762559100983, %385
  %387 = xor i64 %386, -1
  %388 = and i64 %387, -1
  %389 = sext i8 %153 to i64
  %390 = or i64 %389, 7184278669889892684
  %391 = and i64 7184278669889892684, %389
  %392 = xor i64 7184278669889892684, %389
  %393 = or i64 %391, %392
  %394 = xor i64 %393, %384
  %395 = xor i64 %394, %388
  %396 = xor i64 %395, %390
  %397 = xor i64 %396, -6793228720595823043
  %398 = mul i64 %383, %397
  %399 = trunc i64 %398 to i1
  %400 = and i1 %232, %399
  %401 = or i1 %370, %400
  %402 = xor i1 %282, %401
  %403 = xor i1 %227, true
  %404 = sext i8 %149 to i64
  %405 = add i64 %404, 6070224915456782462
  %406 = xor i64 6070224915456782462, %404
  %407 = and i64 6070224915456782462, %404
  %408 = mul i64 2, %407
  %409 = add i64 %406, %408
  %410 = and i64 %13, -2545890957307535672
  %411 = or i64 2545890957307535671, %13
  %412 = sub i64 %411, 2545890957307535671
  %413 = sext i8 %117 to i64
  %414 = or i64 %413, -6287627218165360364
  %415 = xor i64 %413, -1
  %416 = and i64 %415, 468884093867852864
  %417 = and i64 %413, -468884093867852865
  %418 = or i64 %416, %417
  %419 = xor i64 -5891812484754563756, %418
  %420 = xor i64 %413, -1
  %421 = or i64 6287627218165360363, %420
  %422 = xor i64 %421, -1
  %423 = and i64 %422, -1
  %424 = or i64 %419, %423
  %425 = xor i64 %409, 6158445850524036683
  %426 = xor i64 %425, %405
  %427 = xor i64 %426, %424
  %428 = xor i64 %427, %412
  %429 = xor i64 %428, %414
  %430 = xor i64 %429, %410
  %431 = sext i8 %149 to i64
  %432 = or i64 %431, 2999797153649385483
  %433 = xor i64 %431, -1
  %434 = and i64 2999797153649385483, %433
  %435 = add i64 %434, %431
  %436 = sext i32 %178 to i64
  %437 = or i64 %436, 2060976572404482771
  %438 = xor i64 %436, -1
  %439 = and i64 2060976572404482771, %438
  %440 = add i64 %439, %436
  %441 = xor i64 %440, %435
  %442 = xor i64 %441, %432
  %443 = xor i64 %442, 1713264389919615843
  %444 = xor i64 %443, %437
  %445 = mul i64 %430, %444
  %446 = trunc i64 %445 to i1
  %447 = xor i1 %232, %446
  %448 = or i1 %403, %447
  %449 = xor i1 %448, true
  %450 = and i1 %449, true
  %451 = or i1 %402, %450
  %452 = select i1 %451, i32 984876139, i32 984876139
  %453 = xor i32 %452, 0
  store i32 %453, i32* %0, align 4
  %454 = call i8** @bf6276024088074375969(i32* %0)
  %455 = load i8*, i8** %454, align 8
  indirectbr i8* %455, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.38([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5017855980880175355, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.38, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5017855980880175355, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.38, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5017855980880175355, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.38, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10345614790745952775, i32 0, i64 %8
  store i8* bitcast (void ([53 x i32]*, i32*)* @main_loop.extracted.38.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf10859602166879710780(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = load i8*, i8** %2, align 8
  %14 = load i8, i8* %13, align 1
  %15 = mul i8 %14, %14
  %16 = and i8 %15, %14
  %17 = or i8 %15, %14
  %18 = add i8 %16, %17
  %19 = mul i8 %18, 3
  %20 = srem i8 %19, 2
  %21 = and i64 %1, -8665084820935764314
  %22 = xor i64 %1, -1
  %23 = or i64 8665084820935764313, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = and i64 %5, -6209955532757199240
  %27 = xor i64 %5, -1
  %28 = xor i64 -6209955532757199240, %27
  %29 = and i64 %28, -6209955532757199240
  %30 = xor i64 %26, %25
  %31 = xor i64 %30, -7857505613442978061
  %32 = xor i64 %31, %21
  %33 = xor i64 %32, %29
  %34 = and i64 %5, 4410794554418071128
  %35 = or i64 -4410794554418071129, %5
  %36 = sub i64 %35, -4410794554418071129
  %37 = add i64 %3, -2371066670882356082
  %38 = sub i64 0, %3
  %39 = sub i64 -2371066670882356082, %38
  %40 = or i64 %3, 1509894149011418292
  %41 = xor i64 %3, -1
  %42 = and i64 %41, 5553120591366035680
  %43 = and i64 %3, -5553120591366035681
  %44 = or i64 %42, %43
  %45 = xor i64 6477475315722728532, %44
  %46 = xor i64 %3, -1
  %47 = or i64 -1509894149011418293, %46
  %48 = xor i64 %47, -1
  %49 = and i64 %48, -1
  %50 = or i64 %45, %49
  %51 = xor i64 %39, 0
  %52 = xor i64 %51, %36
  %53 = xor i64 %52, %34
  %54 = xor i64 %53, %50
  %55 = xor i64 %54, %40
  %56 = xor i64 %55, %37
  %57 = mul i64 %33, %56
  %58 = trunc i64 %57 to i8
  %59 = icmp eq i8 %20, %58
  %60 = mul i8 %14, %14
  %61 = sub i8 0, %14
  %62 = sub i8 %60, %61
  %63 = srem i8 %62, 2
  %64 = icmp eq i8 %63, 0
  %65 = xor i1 %59, true
  %66 = and i64 %3, -1718758748768626053
  %67 = or i64 1718758748768626052, %3
  %68 = sub i64 %67, 1718758748768626052
  %69 = and i64 %5, 8227722849816639725
  %70 = xor i64 %5, -1
  %71 = xor i64 8227722849816639725, %70
  %72 = and i64 %71, 8227722849816639725
  %73 = xor i64 %69, %68
  %74 = xor i64 %73, %72
  %75 = xor i64 %74, 7241958510791895663
  %76 = xor i64 %75, %66
  %77 = or i64 %3, 6222869689678542986
  %78 = xor i64 %3, -1
  %79 = and i64 %78, -1526822790569540597
  %80 = and i64 %3, 1526822790569540596
  %81 = or i64 %79, %80
  %82 = xor i64 -4858344126926259071, %81
  %83 = xor i64 %3, -1
  %84 = or i64 -6222869689678542987, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = or i64 %1, -1862367041375515877
  %89 = xor i64 %1, -1
  %90 = and i64 %89, 5574788592616948407
  %91 = and i64 %1, -5574788592616948408
  %92 = or i64 %90, %91
  %93 = xor i64 -6090507462669006420, %92
  %94 = xor i64 %1, -1
  %95 = or i64 1862367041375515876, %94
  %96 = xor i64 %95, -1
  %97 = and i64 %96, -1
  %98 = or i64 %93, %97
  %99 = or i64 %8, -4546207928953206496
  %100 = and i64 -4546207928953206496, %8
  %101 = xor i64 -4546207928953206496, %8
  %102 = or i64 %100, %101
  %103 = xor i64 %87, %102
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, %88
  %106 = xor i64 %105, %77
  %107 = xor i64 %106, -931233590571404145
  %108 = xor i64 %107, %99
  %109 = mul i64 %76, %108
  %110 = trunc i64 %109 to i1
  %111 = xor i1 %64, %110
  %112 = or i1 %65, %111
  %113 = add i64 %5, 692245606272508864
  %114 = and i64 692245606272508864, %5
  %115 = or i64 692245606272508864, %5
  %116 = add i64 %114, %115
  %117 = and i64 %3, 3789940526759676659
  %118 = xor i64 %3, -1
  %119 = xor i64 3789940526759676659, %118
  %120 = and i64 %119, 3789940526759676659
  %121 = xor i64 %116, %120
  %122 = xor i64 %121, 5315579142337356685
  %123 = xor i64 %122, %113
  %124 = xor i64 %123, %117
  %125 = or i64 %5, 8419701166611886790
  %126 = xor i64 %5, -1
  %127 = and i64 8419701166611886790, %126
  %128 = add i64 %127, %5
  %129 = add i64 %1, 1474794645497802690
  %130 = xor i64 1474794645497802690, %1
  %131 = and i64 1474794645497802690, %1
  %132 = mul i64 2, %131
  %133 = add i64 %130, %132
  %134 = and i64 %3, 4300581249150093706
  %135 = xor i64 %3, -1
  %136 = or i64 -4300581249150093707, %135
  %137 = xor i64 %136, -1
  %138 = and i64 %137, -1
  %139 = xor i64 %129, %133
  %140 = xor i64 %139, %138
  %141 = xor i64 %140, %134
  %142 = xor i64 %141, %125
  %143 = xor i64 %142, 3077024740168406853
  %144 = xor i64 %143, %128
  %145 = mul i64 %124, %144
  %146 = trunc i64 %145 to i1
  %147 = xor i1 %112, %146
  %148 = and i1 %147, true
  %149 = and i64 %8, -2562953673315274506
  %150 = xor i64 %8, -1
  %151 = xor i64 -2562953673315274506, %150
  %152 = and i64 %151, -2562953673315274506
  %153 = add i64 %1, 3740556984230828225
  %154 = add i64 -674065611305339028, %1
  %155 = add i64 %154, 4414622595536167253
  %156 = xor i64 %149, 5942192497276574451
  %157 = xor i64 %156, %153
  %158 = xor i64 %157, %152
  %159 = xor i64 %158, %155
  %160 = and i64 %5, -4413142730469868034
  %161 = or i64 4413142730469868033, %5
  %162 = sub i64 %161, 4413142730469868033
  %163 = and i64 %8, -2221641683565280634
  %164 = xor i64 %8, -1
  %165 = xor i64 -2221641683565280634, %164
  %166 = and i64 %165, -2221641683565280634
  %167 = and i64 %5, -2038222239245799610
  %168 = xor i64 %5, -1
  %169 = or i64 2038222239245799609, %168
  %170 = xor i64 %169, -1
  %171 = and i64 %170, -1
  %172 = xor i64 %162, %163
  %173 = xor i64 %172, %171
  %174 = xor i64 %173, %167
  %175 = xor i64 %174, 6345826370106098227
  %176 = xor i64 %175, %160
  %177 = xor i64 %176, %166
  %178 = mul i64 %159, %177
  %179 = trunc i64 %178 to i32
  %180 = select i1 %148, i32 %179, i32 984876136
  %181 = or i32 %180, 1
  %182 = and i32 %180, 1
  %183 = sub i32 %181, %182
  store i32 %183, i32* %0, align 4
  %184 = call i8** @bf10859602166879710780(i32* %0)
  %185 = load i8*, i8** %184, align 8
  indirectbr i8* %185, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %186 = call i8** @lk6232502509854216282(i64* %7)
  %187 = load i8*, i8** %186, align 8
  %188 = bitcast i8* %187 to void ([53 x i32]*, i32*)*
  call void %188([53 x i32]* %lookupTable, i32* %dispatcher)
  %189 = load i8*, i8** %6, align 8
  %190 = load i8, i8* %189, align 1
  %191 = mul i8 %190, 2
  %192 = sext i8 %20 to i64
  %193 = add i64 %192, -3836861564371728227
  %194 = add i64 -2472020595766655355, %192
  %195 = add i64 %194, -1364840968605072872
  %196 = add i64 %3, 3996907439928935790
  %197 = xor i64 3996907439928935790, %3
  %198 = and i64 3996907439928935790, %3
  %199 = mul i64 2, %198
  %200 = add i64 %197, %199
  %201 = sext i8 %63 to i64
  %202 = add i64 %201, -387093172183205508
  %203 = and i64 -387093172183205508, %201
  %204 = or i64 -387093172183205508, %201
  %205 = add i64 %203, %204
  %206 = xor i64 %202, %195
  %207 = xor i64 %206, %196
  %208 = xor i64 %207, %193
  %209 = xor i64 %208, %200
  %210 = xor i64 %209, %205
  %211 = xor i64 %210, -138879637022307371
  %212 = sext i8 %16 to i64
  %213 = or i64 %212, 6657875620693738252
  %214 = and i64 6657875620693738252, %212
  %215 = xor i64 6657875620693738252, %212
  %216 = or i64 %214, %215
  %217 = or i64 %3, -226914322537963868
  %218 = xor i64 %3, -1
  %219 = and i64 -226914322537963868, %218
  %220 = add i64 %219, %3
  %221 = sext i32 %183 to i64
  %222 = add i64 %221, -3099108455888175066
  %223 = sub i64 0, %221
  %224 = add i64 3099108455888175066, %223
  %225 = sub i64 0, %224
  %226 = xor i64 6403128351387921146, %220
  %227 = xor i64 %226, %213
  %228 = xor i64 %227, %217
  %229 = xor i64 %228, %222
  %230 = xor i64 %229, %225
  %231 = xor i64 %230, %216
  %232 = mul i64 %211, %231
  %233 = trunc i64 %232 to i8
  %234 = mul i8 %190, %233
  %235 = add i8 2, %234
  %236 = mul i8 %191, %235
  %237 = sext i32 %182 to i64
  %238 = and i64 %237, 2075854505417744774
  %239 = xor i64 %237, -1
  %240 = or i64 -2075854505417744775, %239
  %241 = xor i64 %240, -1
  %242 = and i64 %241, -1
  %243 = and i64 %5, -5206462660756420325
  %244 = xor i64 %5, -1
  %245 = or i64 5206462660756420324, %244
  %246 = xor i64 %245, -1
  %247 = and i64 %246, -1
  %248 = sext i8 %63 to i64
  %249 = and i64 %248, 1307588096326688752
  %250 = or i64 -1307588096326688753, %248
  %251 = sub i64 %250, -1307588096326688753
  %252 = xor i64 %238, 5278959526827979489
  %253 = xor i64 %252, %247
  %254 = xor i64 %253, %249
  %255 = xor i64 %254, %251
  %256 = xor i64 %255, %242
  %257 = xor i64 %256, %243
  %258 = sext i8 %61 to i64
  %259 = and i64 %258, 3159421354139399871
  %260 = or i64 -3159421354139399872, %258
  %261 = sub i64 %260, -3159421354139399872
  %262 = sext i8 %20 to i64
  %263 = and i64 %262, 5384088556081732548
  %264 = xor i64 %262, -1
  %265 = xor i64 5384088556081732548, %264
  %266 = and i64 %265, 5384088556081732548
  %267 = xor i64 %259, %261
  %268 = xor i64 %267, 8254070666016801924
  %269 = xor i64 %268, %263
  %270 = xor i64 %269, %266
  %271 = mul i64 %257, %270
  %272 = trunc i64 %271 to i8
  %273 = srem i8 %236, %272
  %274 = icmp eq i8 %273, 0
  %275 = mul i8 %190, %190
  %276 = mul i8 %275, %190
  %277 = add i8 %276, %190
  %278 = srem i8 %277, 2
  %279 = sext i32 %181 to i64
  %280 = and i64 %279, 2629409296873933106
  %281 = xor i64 %279, -1
  %282 = xor i64 2629409296873933106, %281
  %283 = and i64 %282, 2629409296873933106
  %284 = and i64 %8, 8930856945847154817
  %285 = xor i64 %8, -1
  %286 = xor i64 8930856945847154817, %285
  %287 = and i64 %286, 8930856945847154817
  %288 = sext i8 %63 to i64
  %289 = or i64 %288, 6936226932604780985
  %290 = and i64 6936226932604780985, %288
  %291 = xor i64 6936226932604780985, %288
  %292 = or i64 %290, %291
  %293 = xor i64 %292, %289
  %294 = xor i64 %293, %284
  %295 = xor i64 %294, %283
  %296 = xor i64 %295, %287
  %297 = xor i64 %296, 5369515795138650455
  %298 = xor i64 %297, %280
  %299 = sext i32 %180 to i64
  %300 = or i64 %299, -5159213874372665021
  %301 = xor i64 %299, -1
  %302 = and i64 %301, 6492112466783673138
  %303 = and i64 %299, -6492112466783673139
  %304 = or i64 %302, %303
  %305 = xor i64 -2126165540492363151, %304
  %306 = xor i64 %299, -1
  %307 = or i64 5159213874372665020, %306
  %308 = xor i64 %307, -1
  %309 = and i64 %308, -1
  %310 = or i64 %305, %309
  %311 = sext i8 %63 to i64
  %312 = add i64 %311, 7199218063878734217
  %313 = add i64 2539716697946898522, %311
  %314 = sub i64 %313, -4659501365931835695
  %315 = xor i64 0, %312
  %316 = xor i64 %315, %300
  %317 = xor i64 %316, %310
  %318 = xor i64 %317, %314
  %319 = mul i64 %298, %318
  %320 = trunc i64 %319 to i8
  %321 = icmp eq i8 %278, %320
  %322 = and i1 %274, %321
  %323 = sext i8 %63 to i64
  %324 = or i64 %323, 5495040211913753555
  %325 = xor i64 %323, -1
  %326 = and i64 %325, 6111030613523424360
  %327 = and i64 %323, -6111030613523424361
  %328 = or i64 %326, %327
  %329 = xor i64 1769052646423046075, %328
  %330 = xor i64 %323, -1
  %331 = or i64 -5495040211913753556, %330
  %332 = xor i64 %331, -1
  %333 = and i64 %332, -1
  %334 = or i64 %329, %333
  %335 = sext i32 %183 to i64
  %336 = add i64 %335, -2014839923069695518
  %337 = sub i64 0, %335
  %338 = sub i64 -2014839923069695518, %337
  %339 = sext i8 %62 to i64
  %340 = add i64 %339, 7738350070982116322
  %341 = sub i64 0, %339
  %342 = add i64 -7738350070982116322, %341
  %343 = sub i64 0, %342
  %344 = xor i64 %340, %336
  %345 = xor i64 %344, %334
  %346 = xor i64 %345, %343
  %347 = xor i64 %346, %324
  %348 = xor i64 %347, -3515262753719924815
  %349 = xor i64 %348, %338
  %350 = sext i8 %15 to i64
  %351 = and i64 %350, -4159544563015065334
  %352 = xor i64 %350, -1
  %353 = xor i64 -4159544563015065334, %352
  %354 = and i64 %353, -4159544563015065334
  %355 = and i64 %8, -8854848044912095660
  %356 = xor i64 %8, -1
  %357 = xor i64 -8854848044912095660, %356
  %358 = and i64 %357, -8854848044912095660
  %359 = xor i64 %351, %354
  %360 = xor i64 %359, -2806176894927114695
  %361 = xor i64 %360, %355
  %362 = xor i64 %361, %358
  %363 = mul i64 %349, %362
  %364 = trunc i64 %363 to i32
  %365 = select i1 %322, i32 984876137, i32 %364
  %366 = sext i8 %19 to i64
  %367 = add i64 %366, -6131858039826837102
  %368 = sub i64 0, %366
  %369 = add i64 6131858039826837102, %368
  %370 = sub i64 0, %369
  %371 = or i64 %5, 7715927865554143864
  %372 = xor i64 %5, -1
  %373 = and i64 7715927865554143864, %372
  %374 = add i64 %373, %5
  %375 = sext i8 %62 to i64
  %376 = or i64 %375, -8877579601975096066
  %377 = xor i64 %375, -1
  %378 = and i64 -8877579601975096066, %377
  %379 = add i64 %378, %375
  %380 = xor i64 %379, %367
  %381 = xor i64 %380, %370
  %382 = xor i64 %381, %374
  %383 = xor i64 %382, %376
  %384 = xor i64 %383, -5549162221846325989
  %385 = xor i64 %384, %371
  %386 = sext i8 %16 to i64
  %387 = and i64 %386, 2987094154390344564
  %388 = xor i64 %386, -1
  %389 = or i64 -2987094154390344565, %388
  %390 = xor i64 %389, -1
  %391 = and i64 %390, -1
  %392 = sext i8 %60 to i64
  %393 = and i64 %392, 4742023718503469111
  %394 = xor i64 %392, -1
  %395 = or i64 -4742023718503469112, %394
  %396 = xor i64 %395, -1
  %397 = and i64 %396, -1
  %398 = xor i64 %387, %393
  %399 = xor i64 %398, %397
  %400 = xor i64 %399, %391
  %401 = xor i64 %400, 5453708530752668397
  %402 = mul i64 %385, %401
  %403 = trunc i64 %402 to i32
  %404 = xor i32 %365, %403
  %405 = and i32 %404, 1404549570
  %406 = sext i32 %182 to i64
  %407 = add i64 %406, 8928742266242692005
  %408 = sub i64 0, %406
  %409 = sub i64 8928742266242692005, %408
  %410 = sext i32 %181 to i64
  %411 = add i64 %410, 7575389830768373249
  %412 = sub i64 0, %410
  %413 = sub i64 7575389830768373249, %412
  %414 = xor i64 %413, %411
  %415 = xor i64 %414, %407
  %416 = xor i64 %415, 8699578668852457571
  %417 = xor i64 %416, %409
  %418 = sext i8 %61 to i64
  %419 = add i64 %418, 2809963748023749293
  %420 = add i64 -6314799534027338320, %418
  %421 = sub i64 %420, -9124763282051087613
  %422 = sext i8 %16 to i64
  %423 = and i64 %422, -6998817448513064677
  %424 = xor i64 %422, -1
  %425 = xor i64 -6998817448513064677, %424
  %426 = and i64 %425, -6998817448513064677
  %427 = sext i32 %181 to i64
  %428 = or i64 %427, 6009181310472213443
  %429 = and i64 6009181310472213443, %427
  %430 = xor i64 6009181310472213443, %427
  %431 = or i64 %429, %430
  %432 = xor i64 3929559324507988191, %421
  %433 = xor i64 %432, %423
  %434 = xor i64 %433, %431
  %435 = xor i64 %434, %426
  %436 = xor i64 %435, %428
  %437 = xor i64 %436, %419
  %438 = mul i64 %417, %437
  %439 = trunc i64 %438 to i32
  %440 = and i32 %365, %439
  %441 = or i32 %405, %440
  %442 = xor i32 %441, 1404549570
  store i32 %442, i32* %0, align 4
  %443 = call i8** @bf10859602166879710780(i32* %0)
  %444 = load i8*, i8** %443, align 8
  indirectbr i8* %444, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.39(double* %.reg2mem80, [53 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem167) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18196541893470973885, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.39, %codeRepl), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18196541893470973885, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.39, %loopEnd.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18196541893470973885, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.39, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8730671779138474223, i32 0, i64 %8
  store i8* bitcast (void (double, [53 x i32]*, i32*, i1*)* @main_loop.extracted.39.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf7438893577993244349(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload81 = load double, double* %.reg2mem80, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = load i8, i8* %13, align 1
  %15 = and i8 %14, 1
  %16 = icmp eq i8 %15, 0
  %17 = mul i8 %14, %14
  %18 = add i8 %17, %14
  %19 = mul i8 %18, 3
  %20 = srem i8 %19, 2
  %21 = icmp eq i8 %20, 0
  %22 = or i1 %16, %21
  %23 = select i1 %22, i32 984876137, i32 984876137
  %24 = or i64 %1, -8421779964109169344
  %25 = and i64 -8421779964109169344, %1
  %26 = xor i64 -8421779964109169344, %1
  %27 = or i64 %25, %26
  %28 = and i64 %1, -4139227294338687840
  %29 = or i64 4139227294338687839, %1
  %30 = sub i64 %29, 4139227294338687839
  %31 = and i64 %5, 6296300168485717678
  %32 = xor i64 %5, -1
  %33 = xor i64 6296300168485717678, %32
  %34 = and i64 %33, 6296300168485717678
  %35 = xor i64 %31, %30
  %36 = xor i64 %35, %34
  %37 = xor i64 %36, -3739392023133517575
  %38 = xor i64 %37, %27
  %39 = xor i64 %38, %28
  %40 = xor i64 %39, %24
  %41 = and i64 %8, -7689263738527957115
  %42 = or i64 7689263738527957114, %8
  %43 = sub i64 %42, 7689263738527957114
  %44 = add i64 %3, 991746869476488890
  %45 = add i64 -2300159424195480376, %3
  %46 = add i64 %45, 3291906293671969266
  %47 = xor i64 0, %43
  %48 = xor i64 %47, %41
  %49 = xor i64 %48, %46
  %50 = xor i64 %49, %44
  %51 = mul i64 %40, %50
  %52 = trunc i64 %51 to i32
  %53 = xor i32 %23, %52
  store i32 %53, i32* %0, align 4
  %54 = call i8** @bf7438893577993244349(i32* %0)
  %55 = load i8*, i8** %54, align 8
  indirectbr i8* %55, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %56 = call i8** @lk16264275912986551985(i64* %7)
  %57 = load i8*, i8** %56, align 8
  %58 = bitcast i8* %57 to void (double, [53 x i32]*, i32*, i1*)*
  call void %58(double %.reload81, [53 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem167)
  %59 = load i8*, i8** %6, align 8
  %60 = load i8, i8* %59, align 1
  %61 = mul i8 %60, 2
  %62 = mul i8 %60, 2
  %63 = add i8 2, %62
  %64 = mul i8 %61, %63
  %65 = srem i8 %64, 4
  %66 = and i64 %8, 4212080375186583633
  %67 = xor i64 %8, -1
  %68 = xor i64 4212080375186583633, %67
  %69 = and i64 %68, 4212080375186583633
  %70 = sext i8 %17 to i64
  %71 = add i64 %70, 7327766878570962443
  %72 = and i64 7327766878570962443, %70
  %73 = or i64 7327766878570962443, %70
  %74 = add i64 %72, %73
  %75 = sext i8 %17 to i64
  %76 = add i64 %75, -6419642097213039413
  %77 = add i64 -2902167937356438072, %75
  %78 = add i64 %77, -3517474159856601341
  %79 = xor i64 %69, %66
  %80 = xor i64 %79, -1436611013644329773
  %81 = xor i64 %80, %76
  %82 = xor i64 %81, %78
  %83 = xor i64 %82, %71
  %84 = xor i64 %83, %74
  %85 = sext i32 %53 to i64
  %86 = add i64 %85, -5697738295708104437
  %87 = add i64 -7095991385515506830, %85
  %88 = sub i64 %87, -1398253089807402393
  %89 = sext i8 %20 to i64
  %90 = and i64 %89, 2744779222308793205
  %91 = xor i64 %89, -1
  %92 = or i64 -2744779222308793206, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = xor i64 0, %86
  %96 = xor i64 %95, %94
  %97 = xor i64 %96, %90
  %98 = xor i64 %97, %88
  %99 = mul i64 %84, %98
  %100 = trunc i64 %99 to i8
  %101 = icmp eq i8 %65, %100
  %102 = mul i8 %60, %60
  %103 = add i8 %102, %60
  %104 = srem i8 %103, 2
  %105 = icmp eq i8 %104, 0
  %106 = and i1 %101, %105
  %107 = select i1 %106, i32 984876137, i32 984876139
  %108 = or i32 %107, 2
  %109 = and i32 %107, 2
  %110 = sub i32 %108, %109
  store i32 %110, i32* %0, align 4
  %111 = call i8** @bf7438893577993244349(i32* %0)
  %112 = load i8*, i8** %111, align 8
  indirectbr i8* %112, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.40(i1* %.reg2mem171, i32* %.reg2mem169, i32* %.reg2mem126, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem175) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable14803168233408389419, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.40, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable14803168233408389419, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.40, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable14803168233408389419, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.40, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2282200235023931699, i32 0, i64 %8
  store i8* bitcast (void (i32, i32, [53 x i32]*, i1, i32*, i32*, i32*)* @main_loop.extracted.40.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf9393873928285995723(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %.reload172 = load i1, i1* %.reg2mem171, align 1
  %.reload170 = load i32, i32* %.reg2mem169, align 4
  store i32 %.reload170, i32* %.reg2mem126, align 4
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 44
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %4, align 8
  %18 = load i8, i8* %17, align 1
  %19 = add i64 %1, 5629914198577820227
  %20 = add i64 -4481144335944071749, %1
  %21 = add i64 %20, -8335685539187659640
  %22 = or i64 %3, -1056089319233906443
  %23 = xor i64 %3, -1
  %24 = and i64 -1056089319233906443, %23
  %25 = add i64 %24, %3
  %26 = xor i64 %25, %21
  %27 = xor i64 %26, %22
  %28 = xor i64 %27, %19
  %29 = xor i64 %28, -2800393240307328059
  %30 = and i64 %1, 8015555159885078482
  %31 = xor i64 %1, -1
  %32 = xor i64 8015555159885078482, %31
  %33 = and i64 %32, 8015555159885078482
  %34 = and i64 %3, -901046917368911173
  %35 = xor i64 %3, -1
  %36 = xor i64 -901046917368911173, %35
  %37 = and i64 %36, -901046917368911173
  %38 = add i64 %1, 6892027031983428594
  %39 = sub i64 0, %1
  %40 = add i64 -6892027031983428594, %39
  %41 = sub i64 0, %40
  %42 = xor i64 %38, %34
  %43 = xor i64 %42, 1962049645065950746
  %44 = xor i64 %43, %30
  %45 = xor i64 %44, %33
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, %37
  %48 = mul i64 %29, %47
  %49 = trunc i64 %48 to i8
  %50 = mul i8 %18, %49
  %51 = mul i8 %18, 2
  %52 = add i8 2, %51
  %53 = mul i8 %50, %52
  %54 = srem i8 %53, 4
  %55 = icmp eq i8 %54, 0
  %56 = mul i8 %18, %18
  %57 = sub i8 0, %56
  %58 = sub i8 0, %18
  %59 = add i8 %57, %58
  %60 = sub i8 0, %59
  %61 = srem i8 %60, 2
  %62 = icmp eq i8 %61, 0
  %63 = or i1 %55, %62
  %64 = add i64 %8, -3038888747968465125
  %65 = and i64 -3038888747968465125, %8
  %66 = or i64 -3038888747968465125, %8
  %67 = add i64 %65, %66
  %68 = add i64 %5, 3315071830960864026
  %69 = add i64 1433851492608781608, %5
  %70 = add i64 %69, 1881220338352082418
  %71 = xor i64 %68, %70
  %72 = xor i64 %71, %64
  %73 = xor i64 %72, 8280462239628012617
  %74 = xor i64 %73, %67
  %75 = or i64 %8, -2804999819477771618
  %76 = xor i64 %8, -1
  %77 = and i64 %76, 1357853541097361767
  %78 = and i64 %8, -1357853541097361768
  %79 = or i64 %77, %78
  %80 = xor i64 -3761997591330206727, %79
  %81 = xor i64 %8, -1
  %82 = or i64 2804999819477771617, %81
  %83 = xor i64 %82, -1
  %84 = and i64 %83, -1
  %85 = or i64 %80, %84
  %86 = and i64 %3, 8411881535031260302
  %87 = xor i64 %3, -1
  %88 = or i64 -8411881535031260303, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = xor i64 %90, %86
  %92 = xor i64 %91, 7621243967356162344
  %93 = xor i64 %92, %85
  %94 = xor i64 %93, %75
  %95 = mul i64 %74, %94
  %96 = trunc i64 %95 to i32
  %97 = select i1 %63, i32 984876137, i32 %96
  %98 = xor i32 %97, 1
  store i32 %98, i32* %0, align 4
  %99 = call i8** @bf9393873928285995723(i32* %0)
  %100 = load i8*, i8** %99, align 8
  indirectbr i8* %100, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %101 = call i8** @lk14624544468785892217(i64* %7)
  %102 = load i8*, i8** %101, align 8
  %103 = bitcast i8* %102 to void (i32, i32, [53 x i32]*, i1, i32*, i32*, i32*)*
  call void %103(i32 %14, i32 %16, [53 x i32]* %lookupTable, i1 %.reload172, i32* %dispatcher, i32* %.reg2mem126, i32* %.reg2mem175)
  %104 = load i8*, i8** %6, align 8
  %105 = load i8, i8* %104, align 1
  %106 = mul i8 %105, %105
  %107 = sub i8 0, %106
  %108 = sub i8 0, %105
  %109 = add i8 %107, %108
  %110 = sub i8 0, %109
  %111 = mul i8 %110, 3
  %112 = srem i8 %111, 2
  %113 = sext i8 %51 to i64
  %114 = or i64 %113, 3929330975815421708
  %115 = and i64 3929330975815421708, %113
  %116 = xor i64 3929330975815421708, %113
  %117 = or i64 %115, %116
  %118 = sext i32 %.reload170 to i64
  %119 = and i64 %118, -7024590094201851890
  %120 = or i64 7024590094201851889, %118
  %121 = sub i64 %120, 7024590094201851889
  %122 = xor i64 %117, %119
  %123 = xor i64 %122, 1848222491957866183
  %124 = xor i64 %123, %121
  %125 = xor i64 %124, %114
  %126 = or i64 %5, 5194449373474819579
  %127 = xor i64 %5, -1
  %128 = and i64 %127, -7730881738098587124
  %129 = and i64 %5, 7730881738098587123
  %130 = or i64 %128, %129
  %131 = xor i64 -2549037200555390985, %130
  %132 = xor i64 %5, -1
  %133 = or i64 -5194449373474819580, %132
  %134 = xor i64 %133, -1
  %135 = and i64 %134, -1
  %136 = or i64 %131, %135
  %137 = sext i8 %52 to i64
  %138 = or i64 %137, 1242382195352894731
  %139 = xor i64 %137, -1
  %140 = and i64 1242382195352894731, %139
  %141 = add i64 %140, %137
  %142 = xor i64 %126, %141
  %143 = xor i64 %142, %138
  %144 = xor i64 %143, 0
  %145 = xor i64 %144, %136
  %146 = mul i64 %125, %145
  %147 = trunc i64 %146 to i8
  %148 = icmp eq i8 %112, %147
  %149 = mul i8 %105, %105
  %150 = add i8 %149, %105
  %151 = sext i8 %50 to i64
  %152 = and i64 %151, 7061680745584336511
  %153 = or i64 -7061680745584336512, %151
  %154 = sub i64 %153, -7061680745584336512
  %155 = sext i8 %58 to i64
  %156 = or i64 %155, 5074535153287566402
  %157 = xor i64 %155, -1
  %158 = and i64 %157, -2808325711725716058
  %159 = and i64 %155, 2808325711725716057
  %160 = or i64 %158, %159
  %161 = xor i64 -6959595857036572188, %160
  %162 = xor i64 %155, -1
  %163 = or i64 -5074535153287566403, %162
  %164 = xor i64 %163, -1
  %165 = and i64 %164, -1
  %166 = or i64 %161, %165
  %167 = sext i8 %58 to i64
  %168 = add i64 %167, -4735559076624223358
  %169 = xor i64 -4735559076624223358, %167
  %170 = and i64 -4735559076624223358, %167
  %171 = mul i64 2, %170
  %172 = add i64 %169, %171
  %173 = xor i64 %168, %172
  %174 = xor i64 %173, %152
  %175 = xor i64 %174, -6705969329042540595
  %176 = xor i64 %175, %166
  %177 = xor i64 %176, %156
  %178 = xor i64 %177, %154
  %179 = sext i32 %14 to i64
  %180 = and i64 %179, 8378534689826711274
  %181 = or i64 -8378534689826711275, %179
  %182 = sub i64 %181, -8378534689826711275
  %183 = sext i8 %50 to i64
  %184 = and i64 %183, 2228831263248956358
  %185 = xor i64 %183, -1
  %186 = or i64 -2228831263248956359, %185
  %187 = xor i64 %186, -1
  %188 = and i64 %187, -1
  %189 = and i64 %5, -7473107611005206822
  %190 = or i64 7473107611005206821, %5
  %191 = sub i64 %190, 7473107611005206821
  %192 = xor i64 -9217555900407145974, %188
  %193 = xor i64 %192, %180
  %194 = xor i64 %193, %184
  %195 = xor i64 %194, %189
  %196 = xor i64 %195, %182
  %197 = xor i64 %196, %191
  %198 = mul i64 %178, %197
  %199 = trunc i64 %198 to i8
  %200 = srem i8 %150, %199
  %201 = icmp eq i8 %200, 0
  %202 = xor i1 %148, true
  %203 = xor i1 %201, true
  %204 = or i1 %202, %203
  %205 = xor i1 %204, true
  %206 = and i1 %205, true
  %207 = select i1 %206, i32 984876139, i32 984876137
  %208 = and i64 %3, -815790121734394036
  %209 = xor i64 %3, -1
  %210 = or i64 815790121734394035, %209
  %211 = xor i64 %210, -1
  %212 = and i64 %211, -1
  %213 = sext i8 %50 to i64
  %214 = or i64 %213, 7089041984321143710
  %215 = and i64 7089041984321143710, %213
  %216 = xor i64 7089041984321143710, %213
  %217 = or i64 %215, %216
  %218 = xor i64 %217, %214
  %219 = xor i64 %218, %208
  %220 = xor i64 %219, %212
  %221 = xor i64 %220, -6640249143190184229
  %222 = sext i8 %50 to i64
  %223 = or i64 %222, 9095917849740437652
  %224 = and i64 9095917849740437652, %222
  %225 = xor i64 9095917849740437652, %222
  %226 = or i64 %224, %225
  %227 = sext i8 %50 to i64
  %228 = and i64 %227, -861395947705306654
  %229 = xor i64 %227, -1
  %230 = xor i64 -861395947705306654, %229
  %231 = and i64 %230, -861395947705306654
  %232 = sext i8 %51 to i64
  %233 = add i64 %232, 6620030865608780386
  %234 = add i64 -4889852499373972909, %232
  %235 = sub i64 %234, 6936860708726798321
  %236 = xor i64 -433255182033986906, %228
  %237 = xor i64 %236, %231
  %238 = xor i64 %237, %226
  %239 = xor i64 %238, %223
  %240 = xor i64 %239, %235
  %241 = xor i64 %240, %233
  %242 = mul i64 %221, %241
  %243 = trunc i64 %242 to i32
  %244 = xor i32 %207, %243
  store i32 %244, i32* %0, align 4
  %245 = call i8** @bf9393873928285995723(i32* %0)
  %246 = load i8*, i8** %245, align 8
  indirectbr i8* %246, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.41(float* %0, float* %1, i8* %2, i32* %.reg2mem136, i32* %.reg2mem, i32* %.reg2mem129, i1* %.reg2mem138, [53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %3 = alloca i32, align 4
  %4 = call i64 @h6542867261474098886(i64 984876136)
  %5 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12012081229678312772, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.41, %loopEnd.exitStub), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876137)
  %7 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12012081229678312772, i32 0, i64 %6
  store i8* blockaddress(@main_loop.extracted.41, %codeRepl), i8** %7, align 8
  %8 = call i64 @h6542867261474098886(i64 984876138)
  %9 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12012081229678312772, i32 0, i64 %8
  store i8* blockaddress(@main_loop.extracted.41, %17), i8** %9, align 8
  %10 = alloca i64, align 8
  %11 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %12 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable12747837976195886284, i32 0, i64 %11
  store i8* bitcast (i32 (float*, float*, i8*, i64)* @render to i8*), i8** %12, align 8
  %13 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %14 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable12747837976195886284, i32 0, i64 %13
  store i8* bitcast (void ([53 x i32]*, i32, i1*, i32*)* @main_loop.extracted.41.extracted to i8*), i8** %14, align 8
  store i32 984876138, i32* %3, align 4
  %15 = call i8** @bf15059041393394650618(i32* %3)
  %16 = load i8*, i8** %15, align 8
  indirectbr i8* %16, [label %17]

17:                                               ; preds = %17, %newFuncRoot
  %18 = add i64 79, 71
  store i64 4070807658626890126, i64* %10, align 8
  %19 = call i8** @lk783237237269819673(i64* %10)
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %20 to i32 (float*, float*, i8*, i64)*
  %22 = call i32 %21(float* %0, float* %1, i8* %2, i64 1760)
  store i32 %22, i32* %.reg2mem136, align 4
  %23 = or i64 %4, -6870643325803974260
  %24 = xor i64 %4, -1
  %25 = and i64 %24, -1414593142465554460
  %26 = and i64 %4, 1414593142465554459
  %27 = or i64 %25, %26
  %28 = xor i64 5546404235046332008, %27
  %29 = xor i64 %4, -1
  %30 = or i64 6870643325803974259, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = or i64 %28, %32
  %34 = add i64 %13, -6695676158282387177
  %35 = add i64 7081995174363277959, %13
  %36 = sub i64 %35, -4669072741063886480
  %37 = add i64 %4, -578681857005185788
  %38 = add i64 4317047807744201890, %4
  %39 = add i64 %38, -4895729664749387678
  %40 = xor i64 %39, %34
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, %37
  %43 = xor i64 %42, %23
  %44 = xor i64 %43, 6353692285558478329
  %45 = xor i64 %44, %33
  %46 = add i64 %8, -1647176886488724446
  %47 = and i64 -1647176886488724446, %8
  %48 = or i64 -1647176886488724446, %8
  %49 = add i64 %47, %48
  %50 = add i64 %8, -7485297004874000190
  %51 = sub i64 0, %8
  %52 = add i64 7485297004874000190, %51
  %53 = sub i64 0, %52
  %54 = or i64 %11, 7445753211012760244
  %55 = and i64 7445753211012760244, %11
  %56 = xor i64 7445753211012760244, %11
  %57 = or i64 %55, %56
  %58 = xor i64 %46, 4876065233459628020
  %59 = xor i64 %58, %53
  %60 = xor i64 %59, %50
  %61 = xor i64 %60, %54
  %62 = xor i64 %61, %49
  %63 = xor i64 %62, %57
  %64 = mul i64 %45, %63
  %65 = add i64 %64, 126
  %66 = sdiv i64 36, 61
  %67 = add i64 %8, -9113918731853399868
  %68 = xor i64 -9113918731853399868, %8
  %69 = and i64 -9113918731853399868, %8
  %70 = mul i64 2, %69
  %71 = add i64 %68, %70
  %72 = add i64 %8, -5370263742571527763
  %73 = sub i64 0, %8
  %74 = sub i64 -5370263742571527763, %73
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, %71
  %77 = xor i64 %76, %72
  %78 = xor i64 %77, -5764618533250173595
  %79 = add i64 %8, 1222925770541101818
  %80 = sub i64 0, %8
  %81 = add i64 -1222925770541101818, %80
  %82 = sub i64 0, %81
  %83 = and i64 %8, 2322021931169888947
  %84 = xor i64 %8, -1
  %85 = xor i64 2322021931169888947, %84
  %86 = and i64 %85, 2322021931169888947
  %87 = add i64 %6, 4793655334191574164
  %88 = xor i64 4793655334191574164, %6
  %89 = and i64 4793655334191574164, %6
  %90 = mul i64 2, %89
  %91 = add i64 %88, %90
  %92 = xor i64 %87, %79
  %93 = xor i64 %92, %86
  %94 = xor i64 %93, %83
  %95 = xor i64 %94, 3548443164091281147
  %96 = xor i64 %95, %82
  %97 = xor i64 %96, %91
  %98 = mul i64 %78, %97
  %99 = mul i64 %98, 112
  %.reload3 = load i32, i32* %.reg2mem, align 4
  %100 = and i64 %8, 384079417140359595
  %101 = xor i64 %8, -1
  %102 = xor i64 384079417140359595, %101
  %103 = and i64 %102, 384079417140359595
  %104 = or i64 %13, 4404523069889009466
  %105 = and i64 4404523069889009466, %13
  %106 = xor i64 4404523069889009466, %13
  %107 = or i64 %105, %106
  %108 = or i64 %4, -3874525040253121789
  %109 = and i64 -3874525040253121789, %4
  %110 = xor i64 -3874525040253121789, %4
  %111 = or i64 %109, %110
  %112 = xor i64 %108, %107
  %113 = xor i64 %112, -1698445445174094919
  %114 = xor i64 %113, %103
  %115 = xor i64 %114, %104
  %116 = xor i64 %115, %111
  %117 = xor i64 %116, %100
  %118 = and i64 %11, -6986857010424230529
  %119 = xor i64 %11, -1
  %120 = or i64 6986857010424230528, %119
  %121 = xor i64 %120, -1
  %122 = and i64 %121, -1
  %123 = add i64 %11, 4243412360695637533
  %124 = add i64 -5159467859689792693, %11
  %125 = sub i64 %124, 9043863853324121390
  %126 = or i64 %8, -8915320181611013615
  %127 = xor i64 %8, -1
  %128 = and i64 -8915320181611013615, %127
  %129 = add i64 %128, %8
  %130 = xor i64 %126, %129
  %131 = xor i64 %130, %118
  %132 = xor i64 %131, -2553341943448664814
  %133 = xor i64 %132, %125
  %134 = xor i64 %133, %123
  %135 = xor i64 %134, %122
  %136 = mul i64 %117, %135
  %137 = trunc i64 %136 to i32
  %138 = srem i32 %.reload3, %137
  %139 = icmp eq i32 %138, 0
  %.reload134 = load i32, i32* %.reg2mem129, align 4
  %140 = mul i32 %.reload134, 2
  %.reload133 = load i32, i32* %.reg2mem129, align 4
  %141 = mul i32 %.reload133, 2
  %142 = sub i32 0, %141
  %143 = add i32 -2, %142
  %144 = sub i32 0, %143
  %145 = mul i32 %140, %144
  %146 = srem i32 %145, 4
  %147 = icmp eq i32 %146, 0
  %.reload132 = load i32, i32* %.reg2mem129, align 4
  %148 = mul i32 %.reload132, %.reload132
  %.reload131 = load i32, i32* %.reg2mem129, align 4
  %149 = mul i32 %148, %.reload131
  %.reload130 = load i32, i32* %.reg2mem129, align 4
  %150 = add i32 %149, %.reload130
  %151 = srem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = and i1 %147, %152
  store i1 %153, i1* %.reg2mem138, align 1
  %154 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 40
  %155 = load i32, i32* %154, align 4
  %156 = load i8*, i8** %7, align 8
  %157 = load i8, i8* %156, align 1
  %158 = mul i8 %157, 2
  %159 = add i64 %8, -4873043278490006652
  %160 = add i64 8704144269478723879, %8
  %161 = sub i64 %160, -4869556525740821085
  %162 = add i64 %8, 1425634082626076736
  %163 = add i64 4177210231616896602, %8
  %164 = sub i64 %163, 2751576148990819866
  %165 = add i64 %4, 4913128799034194275
  %166 = sub i64 0, %4
  %167 = add i64 -4913128799034194275, %166
  %168 = sub i64 0, %167
  %169 = xor i64 %168, %165
  %170 = xor i64 %169, %162
  %171 = xor i64 %170, 1591310321133080465
  %172 = xor i64 %171, %159
  %173 = xor i64 %172, %161
  %174 = xor i64 %173, %164
  %175 = add i64 %6, 1755233899177360426
  %176 = add i64 -1353852606690296867, %6
  %177 = add i64 %176, 3109086505867657293
  %178 = add i64 %11, 7057349198140289276
  %179 = xor i64 7057349198140289276, %11
  %180 = and i64 7057349198140289276, %11
  %181 = mul i64 2, %180
  %182 = add i64 %179, %181
  %183 = xor i64 %178, %175
  %184 = xor i64 %183, 4326044029841548002
  %185 = xor i64 %184, %182
  %186 = xor i64 %185, %177
  %187 = mul i64 %174, %186
  %188 = trunc i64 %187 to i8
  %189 = mul i8 %157, %188
  %190 = sub i8 0, %189
  %191 = sub i8 2, %190
  %192 = mul i8 %158, %191
  %193 = srem i8 %192, 4
  %194 = icmp eq i8 %193, 0
  %195 = mul i8 %157, %157
  %196 = add i8 %195, %157
  %197 = srem i8 %196, 2
  %198 = icmp eq i8 %197, 0
  %199 = xor i1 %194, true
  %200 = and i1 %199, true
  %201 = and i64 %6, 3792509791160068151
  %202 = xor i64 %6, -1
  %203 = or i64 -3792509791160068152, %202
  %204 = xor i64 %203, -1
  %205 = and i64 %204, -1
  %206 = or i64 %8, 6692110865922381774
  %207 = xor i64 %8, -1
  %208 = and i64 %207, 7009605790033121186
  %209 = and i64 %8, -7009605790033121187
  %210 = or i64 %208, %209
  %211 = xor i64 4438359226794367084, %210
  %212 = xor i64 %8, -1
  %213 = or i64 -6692110865922381775, %212
  %214 = xor i64 %213, -1
  %215 = and i64 %214, -1
  %216 = or i64 %211, %215
  %217 = and i64 %4, 1385152909177761313
  %218 = xor i64 %4, -1
  %219 = xor i64 1385152909177761313, %218
  %220 = and i64 %219, 1385152909177761313
  %221 = xor i64 %206, %216
  %222 = xor i64 %221, %205
  %223 = xor i64 %222, -5181167436254328173
  %224 = xor i64 %223, %220
  %225 = xor i64 %224, %217
  %226 = xor i64 %225, %201
  %227 = or i64 %8, -3958149116935674533
  %228 = xor i64 %8, -1
  %229 = and i64 %228, -7523428523572239475
  %230 = and i64 %8, 7523428523572239474
  %231 = or i64 %229, %230
  %232 = xor i64 6811340149686437590, %231
  %233 = xor i64 %8, -1
  %234 = or i64 3958149116935674532, %233
  %235 = xor i64 %234, -1
  %236 = and i64 %235, -1
  %237 = or i64 %232, %236
  %238 = or i64 %13, -8964055030917587445
  %239 = xor i64 %13, -1
  %240 = and i64 %239, -4458166857453327588
  %241 = and i64 %13, 4458166857453327587
  %242 = or i64 %240, %241
  %243 = xor i64 4735587425958081815, %242
  %244 = xor i64 %13, -1
  %245 = or i64 8964055030917587444, %244
  %246 = xor i64 %245, -1
  %247 = and i64 %246, -1
  %248 = or i64 %243, %247
  %249 = xor i64 %227, %237
  %250 = xor i64 %249, %238
  %251 = xor i64 %250, %248
  %252 = xor i64 %251, 0
  %253 = mul i64 %226, %252
  %254 = trunc i64 %253 to i1
  %255 = and i1 %194, %254
  %256 = or i1 %200, %255
  %257 = xor i1 %198, true
  %258 = and i1 %257, true
  %259 = and i1 %198, false
  %260 = or i1 %258, %259
  %261 = xor i1 %256, %260
  %262 = or i64 %13, 474597089648351171
  %263 = xor i64 %13, -1
  %264 = and i64 474597089648351171, %263
  %265 = add i64 %264, %13
  %266 = add i64 %6, 4506725420378958926
  %267 = add i64 5695898658411293066, %6
  %268 = add i64 %267, -1189173238032334140
  %269 = xor i64 %262, %268
  %270 = xor i64 %269, 4534812067161710863
  %271 = xor i64 %270, %265
  %272 = xor i64 %271, %266
  %273 = and i64 %4, 5970609854684521162
  %274 = xor i64 %4, -1
  %275 = or i64 -5970609854684521163, %274
  %276 = xor i64 %275, -1
  %277 = and i64 %276, -1
  %278 = or i64 %11, -4022770028462766997
  %279 = and i64 -4022770028462766997, %11
  %280 = xor i64 -4022770028462766997, %11
  %281 = or i64 %279, %280
  %282 = add i64 %6, -1005609993441096166
  %283 = add i64 -7822120663756681958, %6
  %284 = sub i64 %283, -6816510670315585792
  %285 = xor i64 %278, 6843706895296015855
  %286 = xor i64 %285, %277
  %287 = xor i64 %286, %273
  %288 = xor i64 %287, %281
  %289 = xor i64 %288, %282
  %290 = xor i64 %289, %284
  %291 = mul i64 %272, %290
  %292 = trunc i64 %291 to i1
  %293 = xor i1 %194, %292
  %294 = xor i1 %198, true
  %295 = or i1 %293, %294
  %296 = xor i1 %295, true
  %297 = and i1 %296, true
  %298 = or i1 %261, %297
  %299 = select i1 %298, i32 984876138, i32 984876137
  %300 = xor i32 %299, -1
  %301 = and i32 %300, 3
  %302 = and i32 %299, -4
  %303 = or i32 %301, %302
  store i32 %303, i32* %3, align 4
  %304 = call i8** @bf15059041393394650618(i32* %3)
  %305 = load i8*, i8** %304, align 8
  indirectbr i8* %305, [label %codeRepl, label %17]

codeRepl:                                         ; preds = %codeRepl, %17
  %306 = sext i32 %302 to i64
  %307 = add i64 %306, -2205158123077259440
  %308 = sub i64 0, %306
  %309 = sub i64 -2205158123077259440, %308
  %310 = sext i32 %299 to i64
  %311 = and i64 %310, 8956400696750754557
  %312 = xor i64 %310, -1
  %313 = xor i64 8956400696750754557, %312
  %314 = and i64 %313, 8956400696750754557
  %315 = xor i64 %311, %307
  %316 = xor i64 %315, %314
  %317 = xor i64 %316, -2385157772364534487
  %318 = xor i64 %317, %309
  %319 = add i64 %65, 5006210033830034802
  %320 = sub i64 0, %65
  %321 = sub i64 5006210033830034802, %320
  %322 = sext i8 %158 to i64
  %323 = add i64 %322, -2461843389470933277
  %324 = sub i64 0, %322
  %325 = add i64 2461843389470933277, %324
  %326 = sub i64 0, %325
  %327 = xor i64 %319, %323
  %328 = xor i64 %327, %321
  %329 = xor i64 %328, -9042718755363401737
  %330 = xor i64 %329, %326
  %331 = mul i64 %318, %330
  store i64 %331, i64* %10, align 8
  %332 = call i8** @lk783237237269819673(i64* %10)
  %333 = load i8*, i8** %332, align 8
  %334 = bitcast i8* %333 to void ([53 x i32]*, i32, i1*, i32*)*
  call void %334([53 x i32]* %lookupTable, i32 %155, i1* %.reg2mem138, i32* %dispatcher)
  %335 = load i8*, i8** %5, align 8
  %336 = load i8, i8* %335, align 1
  %337 = mul i8 %336, 2
  %338 = mul i8 %336, 2
  %339 = add i8 2, %338
  %340 = mul i8 %337, %339
  %341 = srem i8 %340, 4
  %342 = icmp eq i8 %341, 0
  %343 = mul i8 %336, %336
  %344 = mul i8 %343, %336
  %345 = sub i8 %344, -89
  %346 = add i8 %345, %336
  %347 = add i8 %346, -89
  %348 = srem i8 %347, 2
  %349 = icmp eq i8 %348, 0
  %350 = and i1 %342, %349
  %351 = select i1 %350, i32 984876138, i32 984876136
  %352 = xor i32 %351, 2
  store i32 %352, i32* %3, align 4
  %353 = call i8** @bf15059041393394650618(i32* %3)
  %354 = load i8*, i8** %353, align 8
  indirectbr i8* %354, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.42([53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem136, i32* %.reg2mem173) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876136)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4658091490867282012, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.42, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876138)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4658091490867282012, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.42, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4658091490867282012, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.42, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14417565406211868142, i32 0, i64 %8
  store i8* bitcast (void (i32*, [53 x i32]*, i32*, i32*, i32*)* @main_loop.extracted.42.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf8956670186687295878(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 51
  %14 = load i8*, i8** %4, align 8
  %15 = load i8, i8* %14, align 1
  %16 = mul i8 %15, 2
  %17 = mul i8 %15, 2
  %18 = or i64 %5, 6461906121722155308
  %19 = and i64 6461906121722155308, %5
  %20 = xor i64 6461906121722155308, %5
  %21 = or i64 %19, %20
  %22 = and i64 %5, -315543450630422870
  %23 = xor i64 %5, -1
  %24 = xor i64 -315543450630422870, %23
  %25 = and i64 %24, -315543450630422870
  %26 = and i64 %8, 7215285602929075612
  %27 = xor i64 %8, -1
  %28 = xor i64 7215285602929075612, %27
  %29 = and i64 %28, 7215285602929075612
  %30 = xor i64 1710931267142332467, %22
  %31 = xor i64 %30, %21
  %32 = xor i64 %31, %25
  %33 = xor i64 %32, %26
  %34 = xor i64 %33, %29
  %35 = xor i64 %34, %18
  %36 = or i64 %1, 8588928593628016412
  %37 = xor i64 %1, -1
  %38 = and i64 %37, 1728755667397910453
  %39 = and i64 %1, -1728755667397910454
  %40 = or i64 %38, %39
  %41 = xor i64 6976013227991150761, %40
  %42 = xor i64 %1, -1
  %43 = or i64 -8588928593628016413, %42
  %44 = xor i64 %43, -1
  %45 = and i64 %44, -1
  %46 = or i64 %41, %45
  %47 = add i64 %5, -7531014069092675711
  %48 = sub i64 0, %5
  %49 = sub i64 -7531014069092675711, %48
  %50 = or i64 %8, 5088366877402191642
  %51 = and i64 5088366877402191642, %8
  %52 = xor i64 5088366877402191642, %8
  %53 = or i64 %51, %52
  %54 = xor i64 %47, %36
  %55 = xor i64 %54, %49
  %56 = xor i64 %55, %46
  %57 = xor i64 %56, %50
  %58 = xor i64 %57, %53
  %59 = xor i64 %58, 7492706104797009398
  %60 = mul i64 %35, %59
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, %17
  %63 = or i8 2, %17
  %64 = add i8 %62, %63
  %65 = mul i8 %16, %64
  %66 = srem i8 %65, 4
  %67 = icmp eq i8 %66, 0
  %68 = mul i8 %15, %15
  %69 = sub i8 0, %15
  %70 = sub i8 %68, %69
  %71 = add i64 %1, -8403325465828206189
  %72 = and i64 -8403325465828206189, %1
  %73 = or i64 -8403325465828206189, %1
  %74 = add i64 %72, %73
  %75 = add i64 %5, -4029684580753285942
  %76 = add i64 6820734655830919069, %5
  %77 = sub i64 %76, -7596324837125346605
  %78 = xor i64 %71, %74
  %79 = xor i64 %78, 4943490677959577237
  %80 = xor i64 %79, %75
  %81 = xor i64 %80, %77
  %82 = and i64 %1, 3094822178963439212
  %83 = xor i64 %1, -1
  %84 = or i64 -3094822178963439213, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = and i64 %8, -5911373275063757744
  %88 = xor i64 %8, -1
  %89 = xor i64 -5911373275063757744, %88
  %90 = and i64 %89, -5911373275063757744
  %91 = or i64 %5, -6573292091304554613
  %92 = and i64 -6573292091304554613, %5
  %93 = xor i64 -6573292091304554613, %5
  %94 = or i64 %92, %93
  %95 = xor i64 %90, %87
  %96 = xor i64 %95, %82
  %97 = xor i64 %96, %86
  %98 = xor i64 %97, %94
  %99 = xor i64 %98, -6758829192730764934
  %100 = xor i64 %99, %91
  %101 = mul i64 %81, %100
  %102 = trunc i64 %101 to i8
  %103 = srem i8 %70, %102
  %104 = icmp eq i8 %103, 0
  %105 = or i1 %67, %104
  %106 = select i1 %105, i32 984876139, i32 984876138
  %107 = xor i32 %106, 1
  store i32 %107, i32* %0, align 4
  %108 = call i8** @bf8956670186687295878(i32* %0)
  %109 = load i8*, i8** %108, align 8
  indirectbr i8* %109, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %110 = call i8** @lk12603504826973659978(i64* %7)
  %111 = load i8*, i8** %110, align 8
  %112 = bitcast i8* %111 to void (i32*, [53 x i32]*, i32*, i32*, i32*)*
  call void %112(i32* %13, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem136, i32* %.reg2mem173)
  %113 = load i8*, i8** %6, align 8
  %114 = load i8, i8* %113, align 1
  %115 = or i64 %1, -7744330206662481252
  %116 = and i64 -7744330206662481252, %1
  %117 = xor i64 -7744330206662481252, %1
  %118 = or i64 %116, %117
  %119 = sext i8 %69 to i64
  %120 = add i64 %119, -4424268519519099546
  %121 = and i64 -4424268519519099546, %119
  %122 = or i64 -4424268519519099546, %119
  %123 = add i64 %121, %122
  %124 = xor i64 %120, %123
  %125 = xor i64 %124, -8358886192776760769
  %126 = xor i64 %125, %115
  %127 = xor i64 %126, %118
  %128 = sext i8 %64 to i64
  %129 = add i64 %128, 1811630110653580941
  %130 = add i64 -5979679607420527013, %128
  %131 = add i64 %130, 7791309718074107954
  %132 = and i64 %3, 2529534513116148041
  %133 = or i64 -2529534513116148042, %3
  %134 = sub i64 %133, -2529534513116148042
  %135 = sext i32 %106 to i64
  %136 = and i64 %135, -4197812769969162903
  %137 = or i64 4197812769969162902, %135
  %138 = sub i64 %137, 4197812769969162902
  %139 = xor i64 %138, %129
  %140 = xor i64 %139, 4699051083454905214
  %141 = xor i64 %140, %136
  %142 = xor i64 %141, %134
  %143 = xor i64 %142, %131
  %144 = xor i64 %143, %132
  %145 = mul i64 %127, %144
  %146 = trunc i64 %145 to i8
  %147 = mul i8 %114, %146
  %148 = mul i8 %114, 2
  %149 = add i8 2, %148
  %150 = mul i8 %147, %149
  %151 = srem i8 %150, 4
  %152 = icmp eq i8 %151, 0
  %153 = mul i8 %114, %114
  %154 = add i8 %153, %114
  %155 = srem i8 %154, 2
  %156 = icmp eq i8 %155, 0
  %157 = xor i1 %152, true
  %158 = and i1 %157, false
  %159 = and i1 %152, true
  %160 = or i1 %158, %159
  %161 = xor i1 %156, true
  %162 = or i64 %5, 8857633536286737698
  %163 = and i64 8857633536286737698, %5
  %164 = xor i64 8857633536286737698, %5
  %165 = or i64 %163, %164
  %166 = sext i8 %16 to i64
  %167 = add i64 %166, 4578295850694972291
  %168 = add i64 -3487142734958972221, %166
  %169 = sub i64 %168, -8065438585653944512
  %170 = add i64 %5, 3355262338406992648
  %171 = xor i64 3355262338406992648, %5
  %172 = and i64 3355262338406992648, %5
  %173 = mul i64 2, %172
  %174 = add i64 %171, %173
  %175 = xor i64 %174, %162
  %176 = xor i64 %175, %169
  %177 = xor i64 %176, %170
  %178 = xor i64 %177, 6605707424542150431
  %179 = xor i64 %178, %165
  %180 = xor i64 %179, %167
  %181 = and i64 %1, -3242977789895327753
  %182 = or i64 3242977789895327752, %1
  %183 = sub i64 %182, 3242977789895327752
  %184 = sext i8 %17 to i64
  %185 = add i64 %184, -1643705087064871757
  %186 = sub i64 0, %184
  %187 = sub i64 -1643705087064871757, %186
  %188 = xor i64 %181, %185
  %189 = xor i64 %188, 0
  %190 = xor i64 %189, %187
  %191 = xor i64 %190, %183
  %192 = mul i64 %180, %191
  %193 = trunc i64 %192 to i1
  %194 = and i1 %161, %193
  %195 = and i1 %156, true
  %196 = or i1 %194, %195
  %197 = xor i1 %160, %196
  %198 = xor i1 %152, true
  %199 = xor i1 %156, true
  %200 = or i1 %198, %199
  %201 = xor i1 %200, true
  %202 = and i1 %201, true
  %203 = or i1 %197, %202
  %204 = select i1 %203, i32 984876138, i32 984876136
  %205 = xor i32 %204, -1
  %206 = and i32 %205, 2
  %207 = and i32 %204, -3
  %208 = or i32 %206, %207
  store i32 %208, i32* %0, align 4
  %209 = call i8** @bf8956670186687295878(i32* %0)
  %210 = load i8*, i8** %209, align 8
  indirectbr i8* %210, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.43(float* %0, float* %1, i8* %2, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem173) #1 {
newFuncRoot:
  %3 = alloca i32, align 4
  %4 = call i64 @h6542867261474098886(i64 984876136)
  %5 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12851308745052110949, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.43, %loopEnd.exitStub), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876138)
  %7 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12851308745052110949, i32 0, i64 %6
  store i8* blockaddress(@main_loop.extracted.43, %codeRepl), i8** %7, align 8
  %8 = call i64 @h6542867261474098886(i64 984876139)
  %9 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12851308745052110949, i32 0, i64 %8
  store i8* blockaddress(@main_loop.extracted.43, %17), i8** %9, align 8
  %10 = alloca i64, align 8
  %11 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %12 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable9397402919615645715, i32 0, i64 %11
  store i8* bitcast (i32 (float*, float*, i8*, i64)* @render to i8*), i8** %12, align 8
  %13 = call i64 @m4181846979565521366(i64 4070807658626890126)
  %14 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable9397402919615645715, i32 0, i64 %13
  store i8* bitcast (void (i32*, [53 x i32]*, i32*, i32, i32*)* @main_loop.extracted.43.extracted to i8*), i8** %14, align 8
  store i32 984876139, i32* %3, align 4
  %15 = call i8** @bf405698465177500870(i32* %3)
  %16 = load i8*, i8** %15, align 8
  indirectbr i8* %16, [label %17]

17:                                               ; preds = %17, %newFuncRoot
  store i64 4070807658626890127, i64* %10, align 8
  %18 = call i8** @lk9467855542099712350(i64* %10)
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i8* %19 to i32 (float*, float*, i8*, i64)*
  %21 = call i32 %20(float* %0, float* %1, i8* %2, i64 1760)
  %22 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 46
  %23 = load i8*, i8** %7, align 8
  %24 = load i8, i8* %23, align 1
  %25 = mul i8 %24, 2
  %26 = mul i8 %24, 2
  %27 = add i8 2, %26
  %28 = mul i8 %25, %27
  %29 = srem i8 %28, 4
  %30 = icmp eq i8 %29, 0
  %31 = mul i8 %24, %24
  %32 = mul i8 %31, %24
  %33 = add i8 %32, %24
  %34 = srem i8 %33, 2
  %35 = icmp eq i8 %34, 0
  %36 = and i1 %30, %35
  %37 = select i1 %36, i32 984876139, i32 984876138
  %38 = xor i32 %37, 463457245
  %39 = and i64 %6, 6328774686945723749
  %40 = xor i64 %6, -1
  %41 = xor i64 6328774686945723749, %40
  %42 = and i64 %41, 6328774686945723749
  %43 = or i64 %6, 2335347194881860248
  %44 = xor i64 %6, -1
  %45 = and i64 2335347194881860248, %44
  %46 = add i64 %45, %6
  %47 = add i64 %13, -3051704797509692763
  %48 = sub i64 0, %13
  %49 = add i64 3051704797509692763, %48
  %50 = sub i64 0, %49
  %51 = xor i64 %39, %50
  %52 = xor i64 %51, %46
  %53 = xor i64 %52, %42
  %54 = xor i64 %53, %47
  %55 = xor i64 %54, %43
  %56 = xor i64 %55, -6668607710438967857
  %57 = or i64 %8, -3359914840677585499
  %58 = xor i64 %8, -1
  %59 = and i64 %58, 5969393809614171184
  %60 = and i64 %8, -5969393809614171185
  %61 = or i64 %59, %60
  %62 = xor i64 -8968739111369277035, %61
  %63 = xor i64 %8, -1
  %64 = or i64 3359914840677585498, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = add i64 %8, 8630003451933793983
  %69 = add i64 2624339691701166044, %8
  %70 = sub i64 %69, -6005663760232627939
  %71 = or i64 %6, 9221867615047113412
  %72 = xor i64 %6, -1
  %73 = and i64 9221867615047113412, %72
  %74 = add i64 %73, %6
  %75 = xor i64 4778759336330234212, %68
  %76 = xor i64 %75, %67
  %77 = xor i64 %76, %70
  %78 = xor i64 %77, %74
  %79 = xor i64 %78, %57
  %80 = xor i64 %79, %71
  %81 = mul i64 %56, %80
  %82 = trunc i64 %81 to i32
  %83 = xor i32 %38, %82
  store i32 %83, i32* %3, align 4
  %84 = call i8** @bf405698465177500870(i32* %3)
  %85 = load i8*, i8** %84, align 8
  indirectbr i8* %85, [label %codeRepl, label %17]

codeRepl:                                         ; preds = %codeRepl, %17
  store i64 4070807658626890126, i64* %10, align 8
  %86 = call i8** @lk9467855542099712350(i64* %10)
  %87 = load i8*, i8** %86, align 8
  %88 = bitcast i8* %87 to void (i32*, [53 x i32]*, i32*, i32, i32*)*
  call void %88(i32* %22, [53 x i32]* %lookupTable, i32* %dispatcher, i32 %21, i32* %.reg2mem173)
  %89 = load i8*, i8** %5, align 8
  %90 = load i8, i8* %89, align 1
  %91 = xor i8 %90, -2
  %92 = and i8 %91, %90
  %93 = or i64 %6, 8313042342806227236
  %94 = and i64 8313042342806227236, %6
  %95 = xor i64 8313042342806227236, %6
  %96 = or i64 %94, %95
  %97 = or i64 %4, 3167368992977415302
  %98 = xor i64 %4, -1
  %99 = and i64 3167368992977415302, %98
  %100 = add i64 %99, %4
  %101 = xor i64 %93, 1180967376047237513
  %102 = xor i64 %101, %96
  %103 = xor i64 %102, %100
  %104 = xor i64 %103, %97
  %105 = add i64 %11, -4910646714000799977
  %106 = sub i64 0, %11
  %107 = sub i64 -4910646714000799977, %106
  %108 = add i64 %4, -4110384413652065514
  %109 = sub i64 0, %4
  %110 = add i64 4110384413652065514, %109
  %111 = sub i64 0, %110
  %112 = xor i64 %111, %108
  %113 = xor i64 %112, %107
  %114 = xor i64 %113, -6438769337353610055
  %115 = xor i64 %114, %105
  %116 = mul i64 %104, %115
  %117 = trunc i64 %116 to i8
  %118 = icmp eq i8 %92, %117
  %119 = mul i8 %90, %90
  %120 = add i8 %119, %90
  %121 = srem i8 %120, 2
  %122 = sext i8 %34 to i64
  %123 = add i64 %122, -1936538761988829500
  %124 = sub i64 0, %122
  %125 = sub i64 -1936538761988829500, %124
  %126 = sext i32 %21 to i64
  %127 = and i64 %126, 3949907544219446755
  %128 = or i64 -3949907544219446756, %126
  %129 = sub i64 %128, -3949907544219446756
  %130 = or i64 %13, 2768809287194287798
  %131 = xor i64 %13, -1
  %132 = and i64 %131, -3038323056793186206
  %133 = and i64 %13, 3038323056793186205
  %134 = or i64 %132, %133
  %135 = xor i64 -884539342961111340, %134
  %136 = xor i64 %13, -1
  %137 = or i64 -2768809287194287799, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = or i64 %135, %139
  %141 = xor i64 %129, %140
  %142 = xor i64 %141, 4037575304204495871
  %143 = xor i64 %142, %130
  %144 = xor i64 %143, %127
  %145 = xor i64 %144, %125
  %146 = xor i64 %145, %123
  %147 = sext i8 %34 to i64
  %148 = add i64 %147, 1087072074860621706
  %149 = xor i64 1087072074860621706, %147
  %150 = and i64 1087072074860621706, %147
  %151 = mul i64 2, %150
  %152 = add i64 %149, %151
  %153 = sext i8 %29 to i64
  %154 = and i64 %153, -8949998597625108113
  %155 = xor i64 %153, -1
  %156 = xor i64 -8949998597625108113, %155
  %157 = and i64 %156, -8949998597625108113
  %158 = sext i8 %26 to i64
  %159 = or i64 %158, -3080991662660370699
  %160 = xor i64 %158, -1
  %161 = and i64 %160, -872236858597132172
  %162 = and i64 %158, 872236858597132171
  %163 = or i64 %161, %162
  %164 = xor i64 2799883660631770753, %163
  %165 = xor i64 %158, -1
  %166 = or i64 3080991662660370698, %165
  %167 = xor i64 %166, -1
  %168 = and i64 %167, -1
  %169 = or i64 %164, %168
  %170 = xor i64 %152, 0
  %171 = xor i64 %170, %154
  %172 = xor i64 %171, %169
  %173 = xor i64 %172, %159
  %174 = xor i64 %173, %148
  %175 = xor i64 %174, %157
  %176 = mul i64 %146, %175
  %177 = trunc i64 %176 to i8
  %178 = icmp eq i8 %121, %177
  %179 = or i1 %118, %178
  %180 = select i1 %179, i32 984876136, i32 984876136
  %181 = xor i32 %180, -1
  %182 = and i32 %181, 0
  %183 = and i32 %180, -1
  %184 = or i32 %182, %183
  store i32 %184, i32* %3, align 4
  %185 = call i8** @bf405698465177500870(i32* %3)
  %186 = load i8*, i8** %185, align 8
  indirectbr i8* %186, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.44([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8483248504687110788, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.44, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876137)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8483248504687110788, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.44, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876136)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8483248504687110788, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.44, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10017737418098223963, i32 0, i64 %8
  store i8* bitcast (void ()* @main_loop.extracted.44.extracted to i8*), i8** %9, align 8
  store i32 984876136, i32* %0, align 4
  %10 = call i8** @bf16488349645348535505(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 27
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 26
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 0, %16
  %18 = sub i32 %14, %17
  store i32 %18, i32* %dispatcher, align 4
  %19 = load i8*, i8** %2, align 8
  %20 = load i8, i8* %19, align 1
  %21 = mul i8 %20, 2
  %22 = mul i8 %20, 2
  %23 = add i8 2, %22
  %24 = mul i8 %21, %23
  %25 = srem i8 %24, 4
  %26 = icmp eq i8 %25, 0
  %27 = mul i8 %20, %20
  %28 = mul i8 %27, %20
  %29 = and i8 %28, %20
  %30 = or i8 %28, %20
  %31 = add i8 %29, %30
  %32 = srem i8 %31, 2
  %33 = icmp eq i8 %32, 0
  %34 = and i1 %26, %33
  %35 = select i1 %34, i32 984876138, i32 984876137
  %36 = xor i32 %35, 3
  store i32 %36, i32* %0, align 4
  %37 = call i8** @bf16488349645348535505(i32* %0)
  %38 = load i8*, i8** %37, align 8
  indirectbr i8* %38, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %39 = call i8** @lk2847145900876727517(i64* %7)
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast i8* %40 to void ()*
  call void %41()
  %42 = load i8*, i8** %6, align 8
  %43 = load i8, i8* %42, align 1
  %44 = mul i8 %43, 2
  %45 = mul i8 %43, 2
  %46 = add i8 2, %45
  %47 = mul i8 %44, %46
  %48 = sext i32 %14 to i64
  %49 = or i64 %48, 8805440260440126566
  %50 = xor i64 %48, -1
  %51 = and i64 8805440260440126566, %50
  %52 = add i64 %51, %48
  %53 = and i64 %1, 3942881822605160084
  %54 = or i64 -3942881822605160085, %1
  %55 = sub i64 %54, -3942881822605160085
  %56 = xor i64 %52, %49
  %57 = xor i64 %56, %53
  %58 = xor i64 %57, -6435219068361111697
  %59 = xor i64 %58, %55
  %60 = sext i8 %24 to i64
  %61 = or i64 %60, 7252591743842446817
  %62 = xor i64 %60, -1
  %63 = and i64 7252591743842446817, %62
  %64 = add i64 %63, %60
  %65 = sext i32 %36 to i64
  %66 = add i64 %65, -5776750004755173333
  %67 = add i64 -3661124296852085195, %65
  %68 = sub i64 %67, 2115625707903088138
  %69 = sext i8 %20 to i64
  %70 = add i64 %69, -2974911899915171642
  %71 = add i64 7697057722033359648, %69
  %72 = add i64 %71, 7774774451761020326
  %73 = xor i64 %61, %68
  %74 = xor i64 %73, %64
  %75 = xor i64 %74, -6715128395029225924
  %76 = xor i64 %75, %70
  %77 = xor i64 %76, %72
  %78 = xor i64 %77, %66
  %79 = mul i64 %59, %78
  %80 = trunc i64 %79 to i8
  %81 = srem i8 %47, %80
  %82 = icmp eq i8 %81, 0
  %83 = mul i8 %43, %43
  %84 = add i8 %83, %43
  %85 = srem i8 %84, 2
  %86 = icmp eq i8 %85, 0
  %87 = and i1 %82, %86
  %88 = xor i1 %82, %86
  %89 = or i1 %87, %88
  %90 = sext i8 %25 to i64
  %91 = add i64 %90, 5475149597482219876
  %92 = sub i64 0, %90
  %93 = sub i64 5475149597482219876, %92
  %94 = sext i32 %14 to i64
  %95 = and i64 %94, -3989223030216601305
  %96 = xor i64 %94, -1
  %97 = xor i64 -3989223030216601305, %96
  %98 = and i64 %97, -3989223030216601305
  %99 = xor i64 %95, 1903452560420851703
  %100 = xor i64 %99, %98
  %101 = xor i64 %100, %91
  %102 = xor i64 %101, %93
  %103 = sext i8 %25 to i64
  %104 = or i64 %103, -4332251006125677010
  %105 = xor i64 %103, -1
  %106 = and i64 -4332251006125677010, %105
  %107 = add i64 %106, %103
  %108 = sext i32 %16 to i64
  %109 = or i64 %108, -1949264451802137993
  %110 = and i64 -1949264451802137993, %108
  %111 = xor i64 -1949264451802137993, %108
  %112 = or i64 %110, %111
  %113 = xor i64 %109, %104
  %114 = xor i64 %113, %112
  %115 = xor i64 %114, -2930687274122667930
  %116 = xor i64 %115, %107
  %117 = mul i64 %102, %116
  %118 = trunc i64 %117 to i32
  %119 = select i1 %89, i32 %118, i32 984876138
  %120 = xor i32 %119, 0
  store i32 %120, i32* %0, align 4
  %121 = call i8** @bf16488349645348535505(i32* %0)
  %122 = load i8*, i8** %121, align 8
  indirectbr i8* %122, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.EntryBasicBlockSplit.extracted(i32 %0, i32 %1, i1 %2, i32 %3, i32* %dispatcher, i32* %.reg2mem, i32* %.reg2mem175) #1 {
newFuncRoot:
  %4 = sext i32 %3 to i64
  %5 = or i64 %4, -1066513357193457908
  %6 = xor i64 %4, -1
  %7 = and i64 -1066513357193457908, %6
  %8 = add i64 %7, %4
  %9 = sext i32 %1 to i64
  %10 = add i64 %9, 4557454570012005635
  %11 = add i64 -7473622256517679717, %9
  %12 = add i64 %11, -6415667247179866264
  %13 = xor i64 7197653242484825857, %5
  %14 = xor i64 %13, %12
  %15 = xor i64 %14, %10
  %16 = xor i64 %15, %8
  %17 = sext i32 %0 to i64
  %18 = or i64 %17, -1059782268276722744
  %19 = and i64 -1059782268276722744, %17
  %20 = xor i64 -1059782268276722744, %17
  %21 = or i64 %19, %20
  %22 = sext i32 %3 to i64
  %23 = or i64 %22, -3829739991482785086
  %24 = xor i64 %22, -1
  %25 = and i64 -3829739991482785086, %24
  %26 = add i64 %25, %22
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, 965581792920061157
  %29 = and i64 965581792920061157, %27
  %30 = or i64 965581792920061157, %27
  %31 = add i64 %29, %30
  %32 = xor i64 %31, %18
  %33 = xor i64 %32, %28
  %34 = xor i64 %33, -495481421746282239
  %35 = xor i64 %34, %23
  %36 = xor i64 %35, %21
  %37 = xor i64 %36, %26
  %38 = mul i64 %16, %37
  %39 = trunc i64 %38 to i32
  %40 = alloca i32, i32 %39, align 4
  %41 = sext i32 %3 to i64
  %42 = add i64 %41, 2717499458046028315
  %43 = sub i64 0, %41
  %44 = sub i64 2717499458046028315, %43
  %45 = sext i32 %3 to i64
  %46 = and i64 %45, -7937736507783277081
  %47 = xor i64 %45, -1
  %48 = xor i64 -7937736507783277081, %47
  %49 = and i64 %48, -7937736507783277081
  %50 = sext i32 %1 to i64
  %51 = add i64 %50, -1275711067616026367
  %52 = sub i64 0, %50
  %53 = add i64 1275711067616026367, %52
  %54 = sub i64 0, %53
  %55 = xor i64 -5703505298422832865, %44
  %56 = xor i64 %55, %42
  %57 = xor i64 %56, %51
  %58 = xor i64 %57, %46
  %59 = xor i64 %58, %54
  %60 = xor i64 %59, %49
  %61 = sext i32 %1 to i64
  %62 = or i64 %61, -2201291417818990363
  %63 = xor i64 %61, -1
  %64 = and i64 -2201291417818990363, %63
  %65 = add i64 %64, %61
  %66 = sext i32 %1 to i64
  %67 = or i64 %66, -9070353267764765162
  %68 = xor i64 %66, -1
  %69 = and i64 -9070353267764765162, %68
  %70 = add i64 %69, %66
  %71 = xor i64 -3948078296816282745, %62
  %72 = xor i64 %71, %65
  %73 = xor i64 %72, %70
  %74 = xor i64 %73, %67
  %75 = mul i64 %60, %74
  %76 = call i64 @h6542867261474098886(i64 %75)
  %77 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %76
  store i8* blockaddress(@main_loop.EntryBasicBlockSplit.extracted, %loopEnd.exitStub.exitStub), i8** %77, align 8
  %78 = call i64 @h6542867261474098886(i64 984876118)
  %79 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %78
  store i8* blockaddress(@main_loop.EntryBasicBlockSplit.extracted, %82), i8** %79, align 8
  store i32 984876118, i32* %40, align 4
  %80 = call i8** @bf6338069988336422972(i32* %40)
  %81 = load i8*, i8** %80, align 8
  indirectbr i8* %81, [label %82]

82:                                               ; preds = %82, %newFuncRoot
  %83 = srem i32 %0, %1
  %84 = select i1 %2, i32 %3, i32 %83
  store i32 %84, i32* %dispatcher, align 4
  %.reload2 = load i32, i32* %.reg2mem, align 4
  store i32 %.reload2, i32* %.reg2mem175, align 4
  %85 = load i8*, i8** %79, align 8
  %86 = load i8, i8* %85, align 1
  %87 = mul i8 %86, %86
  %88 = add i8 %87, %86
  %89 = sext i32 %3 to i64
  %90 = add i64 %89, 2232616687617088311
  %91 = sub i64 0, %89
  %92 = sub i64 2232616687617088311, %91
  %93 = sext i32 %1 to i64
  %94 = or i64 %93, 8555297691415756888
  %95 = xor i64 %93, -1
  %96 = and i64 %95, -6190448936029800365
  %97 = and i64 %93, 6190448936029800364
  %98 = or i64 %96, %97
  %99 = xor i64 -2545203866317490165, %98
  %100 = xor i64 %93, -1
  %101 = or i64 -8555297691415756889, %100
  %102 = xor i64 %101, -1
  %103 = and i64 %102, -1
  %104 = or i64 %99, %103
  %105 = xor i64 7317403680039267189, %104
  %106 = xor i64 %105, %94
  %107 = xor i64 %106, %90
  %108 = xor i64 %107, %92
  %109 = sext i32 %1 to i64
  %110 = add i64 %109, -8135584089185491800
  %111 = sub i64 0, %109
  %112 = add i64 8135584089185491800, %111
  %113 = sub i64 0, %112
  %114 = add i64 %76, 2806790652837385972
  %115 = add i64 1571854820617494620, %76
  %116 = add i64 %115, 1234935832219891352
  %117 = sext i32 %3 to i64
  %118 = and i64 %117, 8781279469625048526
  %119 = xor i64 %117, -1
  %120 = xor i64 8781279469625048526, %119
  %121 = and i64 %120, 8781279469625048526
  %122 = xor i64 %113, %110
  %123 = xor i64 %122, %118
  %124 = xor i64 %123, %121
  %125 = xor i64 %124, %116
  %126 = xor i64 %125, %114
  %127 = xor i64 %126, -768341495784642921
  %128 = mul i64 %108, %127
  %129 = trunc i64 %128 to i8
  %130 = mul i8 %88, %129
  %131 = srem i8 %130, 2
  %132 = icmp eq i8 %131, 0
  %133 = mul i8 %86, %86
  %134 = add i8 %133, %86
  %135 = srem i8 %134, 2
  %136 = icmp eq i8 %135, 0
  %137 = and i1 %132, %136
  %138 = select i1 %137, i32 984876118, i32 984876121
  %139 = xor i32 %138, 15
  store i32 %139, i32* %40, align 4
  %140 = call i8** @bf6338069988336422972(i32* %40)
  %141 = load i8*, i8** %140, align 8
  indirectbr i8* %141, [label %loopEnd.exitStub.exitStub, label %82]

loopEnd.exitStub.exitStub:                        ; preds = %82
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.extracted([53 x i32]* %lookupTable, i32 %0, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876121)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main_loop.extracted.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876131)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.extracted, %49), i8** %5, align 8
  %6 = sext i32 %0 to i64
  %7 = add i64 %6, -4863805732255662840
  %8 = add i64 4212557945013089280, %6
  %9 = add i64 %8, -9076363677268752120
  %10 = sext i32 %0 to i64
  %11 = and i64 %10, 2115717938823588380
  %12 = or i64 -2115717938823588381, %10
  %13 = sub i64 %12, -2115717938823588381
  %14 = sext i32 %0 to i64
  %15 = and i64 %14, -480042190241906981
  %16 = xor i64 %14, -1
  %17 = xor i64 -480042190241906981, %16
  %18 = and i64 %17, -480042190241906981
  %19 = xor i64 %9, %15
  %20 = xor i64 %19, %7
  %21 = xor i64 %20, %11
  %22 = xor i64 %21, %18
  %23 = xor i64 %22, %13
  %24 = xor i64 %23, 8450560156095979189
  %25 = sext i32 %0 to i64
  %26 = and i64 %25, -2879997031224693036
  %27 = or i64 2879997031224693035, %25
  %28 = sub i64 %27, 2879997031224693035
  %29 = sext i32 %0 to i64
  %30 = or i64 %29, 3629031185251825797
  %31 = xor i64 %29, -1
  %32 = and i64 %31, 6072089476086455729
  %33 = and i64 %29, -6072089476086455730
  %34 = or i64 %32, %33
  %35 = xor i64 7356785674096911668, %34
  %36 = xor i64 %29, -1
  %37 = or i64 -3629031185251825798, %36
  %38 = xor i64 %37, -1
  %39 = and i64 %38, -1
  %40 = or i64 %35, %39
  %41 = xor i64 %40, %26
  %42 = xor i64 %41, 7638774982368619959
  %43 = xor i64 %42, %30
  %44 = xor i64 %43, %28
  %45 = mul i64 %24, %44
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %1, align 4
  %47 = call i8** @bf6338069988336422972(i32* %1)
  %48 = load i8*, i8** %47, align 8
  indirectbr i8* %48, [label %49]

49:                                               ; preds = %49, %newFuncRoot
  %50 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %51 = load i32, i32* %50, align 4
  %52 = srem i32 %0, %51
  store i32 %52, i32* %dispatcher, align 4
  %53 = load i8*, i8** %5, align 8
  %54 = load i8, i8* %53, align 1
  %55 = mul i8 %54, %54
  %56 = sext i32 %0 to i64
  %57 = or i64 %56, -7151344762687856577
  %58 = and i64 -7151344762687856577, %56
  %59 = xor i64 -7151344762687856577, %56
  %60 = or i64 %58, %59
  %61 = sext i32 %0 to i64
  %62 = and i64 %61, -7048389442450136569
  %63 = or i64 7048389442450136568, %61
  %64 = sub i64 %63, 7048389442450136568
  %65 = xor i64 %57, %64
  %66 = xor i64 %65, %62
  %67 = xor i64 %66, %60
  %68 = xor i64 %67, 464678028922813243
  %69 = add i64 %2, -7313828167407766077
  %70 = add i64 3687789270562016221, %2
  %71 = add i64 %70, 7445126635739769318
  %72 = add i64 %4, 3585558726415253704
  %73 = sub i64 0, %4
  %74 = add i64 -3585558726415253704, %73
  %75 = sub i64 0, %74
  %76 = and i64 %4, 2946656157963626179
  %77 = xor i64 %4, -1
  %78 = or i64 -2946656157963626180, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = xor i64 %71, %75
  %82 = xor i64 %81, %76
  %83 = xor i64 %82, %80
  %84 = xor i64 %83, -7481645292910762858
  %85 = xor i64 %84, %72
  %86 = xor i64 %85, %69
  %87 = mul i64 %68, %86
  %88 = trunc i64 %87 to i8
  %89 = add i8 %55, %88
  %90 = add i8 %89, %54
  %91 = sub i8 %90, -110
  %92 = mul i8 %91, 3
  %93 = srem i8 %92, 2
  %94 = icmp eq i8 %93, 0
  %95 = mul i8 %54, %54
  %96 = add i8 %95, %54
  %97 = srem i8 %96, 2
  %98 = icmp eq i8 %97, 0
  %99 = and i1 %94, %98
  %100 = select i1 %99, i32 984876131, i32 984876121
  %101 = xor i32 %100, 58
  store i32 %101, i32* %1, align 4
  %102 = call i8** @bf6338069988336422972(i32* %1)
  %103 = load i8*, i8** %102, align 8
  indirectbr i8* %103, [label %loopEnd.exitStub.exitStub, label %49]

loopEnd.exitStub.exitStub:                        ; preds = %49
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.30.extracted(i32* %0, i32 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876135)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.30.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876098)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.30.extracted, %9), i8** %6, align 8
  store i32 984876098, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = load i32, i32* %0, align 4
  %11 = srem i32 %1, %10
  store i32 %11, i32* %dispatcher, align 4
  %12 = load i8*, i8** %4, align 8
  %13 = load i8, i8* %12, align 1
  %14 = mul i8 %13, %13
  %15 = xor i8 %14, %13
  %16 = and i8 %14, %13
  %17 = mul i8 2, %16
  %18 = add i8 %15, %17
  %19 = mul i8 %18, 3
  %20 = srem i8 %19, 2
  %21 = icmp eq i8 %20, 0
  %22 = mul i8 %13, %13
  %23 = add i8 %22, %13
  %24 = srem i8 %23, 2
  %25 = icmp eq i8 %24, 0
  %26 = xor i1 %25, true
  %27 = xor i1 %21, %26
  %28 = and i1 %27, %21
  %29 = select i1 %28, i32 984876098, i32 984876135
  %30 = xor i32 %29, 37
  store i32 %30, i32* %2, align 4
  %31 = call i8** @bf6338069988336422972(i32* %2)
  %32 = load i8*, i8** %31, align 8
  indirectbr i8* %32, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.31.extracted(i32 %0, i32 %1, i1 %2, i32 %3, i32* %dispatcher) #1 {
newFuncRoot:
  %4 = alloca i32, align 4
  %5 = call i64 @h6542867261474098886(i64 984876101)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.31.extracted, %loopEnd.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h6542867261474098886(i64 984876145)
  %8 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.31.extracted, %50), i8** %8, align 8
  %9 = sext i32 %3 to i64
  %10 = add i64 %9, -1430868217689428778
  %11 = add i64 -7228266283368282739, %9
  %12 = add i64 %11, 5797398065678853961
  %13 = sext i32 %1 to i64
  %14 = add i64 %13, 5272773321990522470
  %15 = xor i64 5272773321990522470, %13
  %16 = and i64 5272773321990522470, %13
  %17 = mul i64 2, %16
  %18 = add i64 %15, %17
  %19 = sext i32 %3 to i64
  %20 = and i64 %19, -2625875931985891241
  %21 = xor i64 %19, -1
  %22 = or i64 2625875931985891240, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = xor i64 %20, %10
  %26 = xor i64 %25, %14
  %27 = xor i64 %26, %18
  %28 = xor i64 %27, -5875982686707941865
  %29 = xor i64 %28, %24
  %30 = xor i64 %29, %12
  %31 = sext i32 %3 to i64
  %32 = or i64 %31, -580119717439668359
  %33 = and i64 -580119717439668359, %31
  %34 = xor i64 -580119717439668359, %31
  %35 = or i64 %33, %34
  %36 = sext i32 %0 to i64
  %37 = and i64 %36, 5048774466090740453
  %38 = xor i64 %36, -1
  %39 = or i64 -5048774466090740454, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = xor i64 -7132901031634571593, %37
  %43 = xor i64 %42, %41
  %44 = xor i64 %43, %32
  %45 = xor i64 %44, %35
  %46 = mul i64 %30, %45
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %4, align 4
  %48 = call i8** @bf6338069988336422972(i32* %4)
  %49 = load i8*, i8** %48, align 8
  indirectbr i8* %49, [label %50]

50:                                               ; preds = %50, %newFuncRoot
  %51 = sub i32 %0, %1
  %52 = select i1 %2, i32 %3, i32 %51
  store i32 %52, i32* %dispatcher, align 4
  %53 = load i8*, i8** %6, align 8
  %54 = load i8, i8* %53, align 1
  %55 = mul i8 %54, 2
  %56 = mul i8 %54, 2
  %57 = add i8 2, %56
  %58 = mul i8 %55, %57
  %59 = srem i8 %58, 4
  %60 = icmp eq i8 %59, 0
  %61 = mul i8 %54, %54
  %62 = xor i8 %61, %54
  %63 = and i8 %61, %54
  %64 = sext i32 %1 to i64
  %65 = and i64 %64, 13529152661981944
  %66 = or i64 -13529152661981945, %64
  %67 = sub i64 %66, -13529152661981945
  %68 = add i64 %5, -2437928192686610308
  %69 = xor i64 -2437928192686610308, %5
  %70 = and i64 -2437928192686610308, %5
  %71 = mul i64 2, %70
  %72 = add i64 %69, %71
  %73 = sext i32 %0 to i64
  %74 = or i64 %73, 6083198318804892488
  %75 = xor i64 %73, -1
  %76 = and i64 6083198318804892488, %75
  %77 = add i64 %76, %73
  %78 = xor i64 %68, %67
  %79 = xor i64 %78, -5432436906897221501
  %80 = xor i64 %79, %77
  %81 = xor i64 %80, %74
  %82 = xor i64 %81, %72
  %83 = xor i64 %82, %65
  %84 = add i64 %5, -2853357001460568399
  %85 = add i64 -1447589122348394860, %5
  %86 = sub i64 %85, 1405767879112173539
  %87 = sext i32 %1 to i64
  %88 = and i64 %87, -6127132685336211540
  %89 = or i64 6127132685336211539, %87
  %90 = sub i64 %89, 6127132685336211539
  %91 = xor i64 %88, %90
  %92 = xor i64 %91, %86
  %93 = xor i64 %92, 7163543398273739862
  %94 = xor i64 %93, %84
  %95 = mul i64 %83, %94
  %96 = trunc i64 %95 to i8
  %97 = mul i8 %96, %63
  %98 = add i8 %62, %97
  %99 = srem i8 %98, 2
  %100 = icmp eq i8 %99, 0
  %101 = and i1 %60, %100
  %102 = select i1 %101, i32 984876145, i32 984876101
  %103 = xor i32 %102, 52
  store i32 %103, i32* %4, align 4
  %104 = call i8** @bf6338069988336422972(i32* %4)
  %105 = load i8*, i8** %104, align 8
  indirectbr i8* %105, [label %loopEnd.exitStub.exitStub, label %50]

loopEnd.exitStub.exitStub:                        ; preds = %50
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.32.extracted(i32 %0, i32 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876101)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.32.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.32.extracted, %9), i8** %6, align 8
  store i32 984876138, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = srem i32 %0, %1
  store i32 %10, i32* %dispatcher, align 4
  %11 = load i8*, i8** %6, align 8
  %12 = load i8, i8* %11, align 1
  %13 = mul i8 %12, 2
  %14 = mul i8 %12, 2
  %15 = add i8 2, %14
  %16 = mul i8 %13, %15
  %17 = srem i8 %16, 4
  %18 = icmp eq i8 %17, 0
  %19 = mul i8 %12, %12
  %20 = mul i8 %19, %12
  %21 = add i8 %20, %12
  %22 = srem i8 %21, 2
  %23 = icmp eq i8 %22, 0
  %24 = and i1 %18, %23
  %25 = sext i32 %0 to i64
  %26 = add i64 %25, -2866055630454377906
  %27 = sub i64 0, %25
  %28 = sub i64 -2866055630454377906, %27
  %29 = or i64 %3, -6456125492286581794
  %30 = and i64 -6456125492286581794, %3
  %31 = xor i64 -6456125492286581794, %3
  %32 = or i64 %30, %31
  %33 = xor i64 %28, -5488443025939750105
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, %29
  %36 = xor i64 %35, %32
  %37 = sext i32 %0 to i64
  %38 = and i64 %37, 5383476944336888831
  %39 = xor i64 %37, -1
  %40 = xor i64 5383476944336888831, %39
  %41 = and i64 %40, 5383476944336888831
  %42 = sext i32 %0 to i64
  %43 = and i64 %42, -4711665573927437229
  %44 = or i64 4711665573927437228, %42
  %45 = sub i64 %44, 4711665573927437228
  %46 = xor i64 %38, %45
  %47 = xor i64 %46, %41
  %48 = xor i64 %47, -5382216532883730253
  %49 = xor i64 %48, %43
  %50 = mul i64 %36, %49
  %51 = trunc i64 %50 to i32
  %52 = select i1 %24, i32 984876138, i32 %51
  %53 = add i64 %5, -6105128179563534866
  %54 = add i64 1645713420020906097, %5
  %55 = add i64 %54, -7750841599584440963
  %56 = sext i32 %0 to i64
  %57 = or i64 %56, -1938022402998245096
  %58 = xor i64 %56, -1
  %59 = and i64 -1938022402998245096, %58
  %60 = add i64 %59, %56
  %61 = sext i32 %1 to i64
  %62 = add i64 %61, 1927972467225767942
  %63 = sub i64 0, %61
  %64 = add i64 -1927972467225767942, %63
  %65 = sub i64 0, %64
  %66 = xor i64 %62, %53
  %67 = xor i64 %66, %60
  %68 = xor i64 %67, -4231190369362802081
  %69 = xor i64 %68, %65
  %70 = xor i64 %69, %57
  %71 = xor i64 %70, %55
  %72 = sext i32 %0 to i64
  %73 = and i64 %72, 6356320603883017104
  %74 = or i64 -6356320603883017105, %72
  %75 = sub i64 %74, -6356320603883017105
  %76 = sext i32 %0 to i64
  %77 = and i64 %76, 4350302840977466058
  %78 = or i64 -4350302840977466059, %76
  %79 = sub i64 %78, -4350302840977466059
  %80 = xor i64 3161062256609066033, %77
  %81 = xor i64 %80, %73
  %82 = xor i64 %81, %79
  %83 = xor i64 %82, %75
  %84 = mul i64 %71, %83
  %85 = trunc i64 %84 to i32
  %86 = xor i32 %52, %85
  store i32 %86, i32* %2, align 4
  %87 = call i8** @bf6338069988336422972(i32* %2)
  %88 = load i8*, i8** %87, align 8
  indirectbr i8* %88, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.33.extracted(i32 %0, i32 %1, i32* %dispatcher) #1 {
newFuncRoot:
  %2 = sext i32 %0 to i64
  %3 = add i64 %2, -1145182316177264338
  %4 = sub i64 0, %2
  %5 = sub i64 -1145182316177264338, %4
  %6 = sext i32 %1 to i64
  %7 = add i64 %6, -8277114661212490706
  %8 = xor i64 -8277114661212490706, %6
  %9 = and i64 -8277114661212490706, %6
  %10 = mul i64 2, %9
  %11 = add i64 %8, %10
  %12 = sext i32 %0 to i64
  %13 = or i64 %12, 4187209575067581922
  %14 = xor i64 %12, -1
  %15 = and i64 4187209575067581922, %14
  %16 = add i64 %15, %12
  %17 = xor i64 %3, 349002904259301845
  %18 = xor i64 %17, %5
  %19 = xor i64 %18, %11
  %20 = xor i64 %19, %7
  %21 = xor i64 %20, %13
  %22 = xor i64 %21, %16
  %23 = sext i32 %0 to i64
  %24 = add i64 %23, -5483036768764491279
  %25 = sub i64 0, %23
  %26 = add i64 5483036768764491279, %25
  %27 = sub i64 0, %26
  %28 = sext i32 %0 to i64
  %29 = or i64 %28, 2204954397562098207
  %30 = xor i64 %28, -1
  %31 = and i64 2204954397562098207, %30
  %32 = add i64 %31, %28
  %33 = sext i32 %0 to i64
  %34 = and i64 %33, -1743605201014498121
  %35 = xor i64 %33, -1
  %36 = xor i64 -1743605201014498121, %35
  %37 = and i64 %36, -1743605201014498121
  %38 = xor i64 %37, %34
  %39 = xor i64 %38, %24
  %40 = xor i64 %39, %32
  %41 = xor i64 %40, %29
  %42 = xor i64 %41, %27
  %43 = xor i64 %42, -3210169943580729475
  %44 = mul i64 %22, %43
  %45 = trunc i64 %44 to i32
  %46 = alloca i32, i32 %45, align 4
  %47 = call i64 @h6542867261474098886(i64 984876140)
  %48 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %47
  store i8* blockaddress(@main_loop.extracted.33.extracted, %loopEnd.exitStub.exitStub), i8** %48, align 8
  %49 = call i64 @h6542867261474098886(i64 984876110)
  %50 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %49
  store i8* blockaddress(@main_loop.extracted.33.extracted, %53), i8** %50, align 8
  store i32 984876110, i32* %46, align 4
  %51 = call i8** @bf6338069988336422972(i32* %46)
  %52 = load i8*, i8** %51, align 8
  indirectbr i8* %52, [label %53]

53:                                               ; preds = %53, %newFuncRoot
  %54 = srem i32 %0, %1
  store i32 %54, i32* %dispatcher, align 4
  %55 = load i8*, i8** %48, align 8
  %56 = load i8, i8* %55, align 1
  %57 = mul i8 %56, 2
  %58 = mul i8 %56, 2
  %59 = add i8 2, %58
  %60 = mul i8 %57, %59
  %61 = srem i8 %60, 4
  %62 = icmp eq i8 %61, 0
  %63 = mul i8 %56, %56
  %64 = sub i8 %63, -92
  %65 = add i8 %64, %56
  %66 = add i8 %65, -92
  %67 = srem i8 %66, 2
  %68 = icmp eq i8 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %62, %69
  %71 = and i1 %70, %62
  %72 = select i1 %71, i32 984876110, i32 984876140
  %73 = xor i32 %72, -1
  %74 = and i32 %73, 34
  %75 = and i32 %72, -35
  %76 = or i32 %74, %75
  store i32 %76, i32* %46, align 4
  %77 = call i8** @bf6338069988336422972(i32* %46)
  %78 = load i8*, i8** %77, align 8
  indirectbr i8* %78, [label %loopEnd.exitStub.exitStub, label %53]

loopEnd.exitStub.exitStub:                        ; preds = %53
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.34.extracted() #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876150)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.34.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876152)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.34.extracted, %7), i8** %4, align 8
  store i32 984876152, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = load i8*, i8** %2, align 8
  %9 = load i8, i8* %8, align 1
  %10 = mul i8 %9, 2
  %11 = mul i8 %9, 2
  %12 = add i8 2, %11
  %13 = mul i8 %10, %12
  %14 = srem i8 %13, 4
  %15 = icmp eq i8 %14, 0
  %16 = mul i8 %9, %9
  %17 = sub i8 0, %16
  %18 = sub i8 0, %9
  %19 = add i8 %17, %18
  %20 = sub i8 0, %19
  %21 = srem i8 %20, 2
  %22 = icmp eq i8 %21, 0
  %23 = and i1 %15, %22
  %24 = select i1 %23, i32 984876150, i32 984876150
  %25 = xor i32 %24, 0
  store i32 %25, i32* %0, align 4
  %26 = call i8** @bf6338069988336422972(i32* %0)
  %27 = load i8*, i8** %26, align 8
  indirectbr i8* %27, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.35.extracted(i32* %.reg2mem33, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem163, i1* %.reg2mem165) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876135)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.35.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876146)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.35.extracted, %7), i8** %4, align 8
  store i32 984876146, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %.reload42 = load i32, i32* %.reg2mem33, align 4
  %8 = and i64 %1, -958420113038407139
  %9 = xor i64 %1, -1
  %10 = or i64 958420113038407138, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %11, -1
  %13 = or i64 %1, -950880664985567657
  %14 = xor i64 %1, -1
  %15 = and i64 %14, 558266628973664171
  %16 = and i64 %1, -558266628973664172
  %17 = or i64 %15, %16
  %18 = xor i64 -760378707070064132, %17
  %19 = xor i64 %1, -1
  %20 = or i64 950880664985567656, %19
  %21 = xor i64 %20, -1
  %22 = and i64 %21, -1
  %23 = or i64 %18, %22
  %24 = xor i64 %13, %23
  %25 = xor i64 %24, 4700563734315022173
  %26 = xor i64 %25, %8
  %27 = xor i64 %26, %12
  %28 = and i64 %3, 2974103854291355547
  %29 = xor i64 %3, -1
  %30 = xor i64 2974103854291355547, %29
  %31 = and i64 %30, 2974103854291355547
  %32 = and i64 %3, 2842134170376223932
  %33 = xor i64 %3, -1
  %34 = xor i64 2842134170376223932, %33
  %35 = and i64 %34, 2842134170376223932
  %36 = add i64 %3, -5980619696127633780
  %37 = sub i64 0, %3
  %38 = sub i64 -5980619696127633780, %37
  %39 = xor i64 %35, %38
  %40 = xor i64 %39, %36
  %41 = xor i64 %40, %28
  %42 = xor i64 %41, %32
  %43 = xor i64 %42, 8026373666230610410
  %44 = xor i64 %43, %31
  %45 = mul i64 %27, %44
  %46 = trunc i64 %45 to i32
  %47 = mul i32 %.reload42, %46
  %.reload41 = load i32, i32* %.reg2mem33, align 4
  %48 = mul i32 %.reload41, 2
  %49 = add i32 2, %48
  %50 = mul i32 %47, %49
  %51 = srem i32 %50, 4
  %52 = or i64 %1, 4115699569804552157
  %53 = xor i64 %1, -1
  %54 = and i64 %53, 8810249594298908558
  %55 = and i64 %1, -8810249594298908559
  %56 = or i64 %54, %55
  %57 = xor i64 4853100976826652755, %56
  %58 = xor i64 %1, -1
  %59 = or i64 -4115699569804552158, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = or i64 %57, %61
  %63 = add i64 %1, 6058561638069466773
  %64 = sub i64 0, %1
  %65 = sub i64 6058561638069466773, %64
  %66 = xor i64 %52, %63
  %67 = xor i64 %66, -1815536994949841999
  %68 = xor i64 %67, %65
  %69 = xor i64 %68, %62
  %70 = add i64 %1, -4908428662224517083
  %71 = sub i64 0, %1
  %72 = add i64 4908428662224517083, %71
  %73 = sub i64 0, %72
  %74 = or i64 %1, 3346948971680049424
  %75 = xor i64 %1, -1
  %76 = and i64 %75, 5999550212916453923
  %77 = and i64 %1, -5999550212916453924
  %78 = or i64 %76, %77
  %79 = xor i64 9020832627415321395, %78
  %80 = xor i64 %1, -1
  %81 = or i64 -3346948971680049425, %80
  %82 = xor i64 %81, -1
  %83 = and i64 %82, -1
  %84 = or i64 %79, %83
  %85 = xor i64 %73, 0
  %86 = xor i64 %85, %74
  %87 = xor i64 %86, %70
  %88 = xor i64 %87, %84
  %89 = mul i64 %69, %88
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %51, %90
  %.reload40 = load i32, i32* %.reg2mem33, align 4
  %92 = mul i32 %.reload40, %.reload40
  %.reload39 = load i32, i32* %.reg2mem33, align 4
  %93 = add i32 %92, %.reload39
  %94 = srem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = xor i1 %95, true
  %97 = xor i1 %91, true
  %98 = xor i1 %96, true
  %99 = or i1 %97, %98
  %100 = xor i1 %99, true
  %101 = and i1 %100, true
  %102 = add i1 %101, %95
  %103 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 16
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 14
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %104, %106
  store i32 %107, i32* %dispatcher, align 4
  store i32 %50, i32* %.reg2mem163, align 4
  store i1 %102, i1* %.reg2mem165, align 1
  %108 = load i8*, i8** %4, align 8
  %109 = load i8, i8* %108, align 1
  %110 = mul i8 %109, 2
  %111 = add i64 %3, 8401507746856361265
  %112 = sub i64 0, %3
  %113 = add i64 -8401507746856361265, %112
  %114 = sub i64 0, %113
  %115 = add i64 %3, 3228154210003801195
  %116 = add i64 3543979899689476672, %3
  %117 = add i64 %116, -315825689685675477
  %118 = add i64 %3, -3794053459977780677
  %119 = add i64 2766568331327925514, %3
  %120 = sub i64 %119, 6560621791305706191
  %121 = xor i64 %111, %117
  %122 = xor i64 %121, %120
  %123 = xor i64 %122, -7504599901329224247
  %124 = xor i64 %123, %114
  %125 = xor i64 %124, %118
  %126 = xor i64 %125, %115
  %127 = add i64 %3, 7121432155661340187
  %128 = add i64 -4896549582018087626, %3
  %129 = sub i64 %128, 6428762336030123803
  %130 = add i64 %3, 5275399682738614033
  %131 = xor i64 5275399682738614033, %3
  %132 = and i64 5275399682738614033, %3
  %133 = mul i64 2, %132
  %134 = add i64 %131, %133
  %135 = or i64 %1, 7305565311665886048
  %136 = and i64 7305565311665886048, %1
  %137 = xor i64 7305565311665886048, %1
  %138 = or i64 %136, %137
  %139 = xor i64 %130, %127
  %140 = xor i64 %139, %129
  %141 = xor i64 %140, %134
  %142 = xor i64 %141, %135
  %143 = xor i64 %142, %138
  %144 = xor i64 %143, -3349242425881577230
  %145 = mul i64 %126, %144
  %146 = trunc i64 %145 to i8
  %147 = mul i8 %109, %146
  %148 = add i64 %3, -6856424897612716851
  %149 = add i64 1217892878976753083, %3
  %150 = sub i64 %149, 8074317776589469934
  %151 = and i64 %1, -1722067513757496650
  %152 = xor i64 %1, -1
  %153 = or i64 1722067513757496649, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = xor i64 %148, %155
  %157 = xor i64 %156, %151
  %158 = xor i64 %157, -5713648582236252533
  %159 = xor i64 %158, %150
  %160 = or i64 %3, 3055983266671438450
  %161 = xor i64 %3, -1
  %162 = and i64 %161, 3854247291687284270
  %163 = and i64 %3, -3854247291687284271
  %164 = or i64 %162, %163
  %165 = xor i64 2239417024628720732, %164
  %166 = xor i64 %3, -1
  %167 = or i64 -3055983266671438451, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = or i64 %165, %169
  %171 = or i64 %3, -1693900499499889092
  %172 = and i64 -1693900499499889092, %3
  %173 = xor i64 -1693900499499889092, %3
  %174 = or i64 %172, %173
  %175 = xor i64 -7505499515839266234, %174
  %176 = xor i64 %175, %170
  %177 = xor i64 %176, %171
  %178 = xor i64 %177, %160
  %179 = mul i64 %159, %178
  %180 = trunc i64 %179 to i8
  %181 = add i8 %180, %147
  %182 = mul i8 %110, %181
  %183 = srem i8 %182, 4
  %184 = icmp eq i8 %183, 0
  %185 = mul i8 %109, %109
  %186 = mul i8 %185, %109
  %187 = add i8 %186, %109
  %188 = srem i8 %187, 2
  %189 = icmp eq i8 %188, 0
  %190 = xor i1 %189, true
  %191 = xor i1 %184, %190
  %192 = and i1 %191, %184
  %193 = select i1 %192, i32 984876135, i32 984876135
  %194 = xor i32 %193, 0
  store i32 %194, i32* %0, align 4
  %195 = call i8** @bf6338069988336422972(i32* %0)
  %196 = load i8*, i8** %195, align 8
  indirectbr i8* %196, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.36.extracted(i32* %.reg2mem10, i1 %0, [53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876126)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main_loop.extracted.36.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876112)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.36.extracted, %8), i8** %5, align 8
  store i32 984876112, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %.reload14 = load i32, i32* %.reg2mem10, align 4
  %9 = mul i32 %.reload14, %.reload14
  %.reload13 = load i32, i32* %.reg2mem10, align 4
  %10 = mul i32 %9, %.reload13
  %.reload12 = load i32, i32* %.reg2mem10, align 4
  %11 = add i32 %10, %.reload12
  %12 = and i64 %4, -5706486646729449241
  %13 = or i64 5706486646729449240, %4
  %14 = sub i64 %13, 5706486646729449240
  %15 = add i64 %4, 7946139594223606995
  %16 = add i64 771112698298726151, %4
  %17 = sub i64 %16, -7175026895924880844
  %18 = xor i64 %12, %14
  %19 = xor i64 %18, 1725038750301757263
  %20 = xor i64 %19, %15
  %21 = xor i64 %20, %17
  %22 = and i64 %4, 5930893806334639048
  %23 = or i64 -5930893806334639049, %4
  %24 = sub i64 %23, -5930893806334639049
  %25 = add i64 %2, 2826618667149306891
  %26 = and i64 2826618667149306891, %2
  %27 = or i64 2826618667149306891, %2
  %28 = add i64 %26, %27
  %29 = xor i64 %24, %25
  %30 = xor i64 %29, %28
  %31 = xor i64 %30, 1598619699874180958
  %32 = xor i64 %31, %22
  %33 = mul i64 %21, %32
  %34 = trunc i64 %33 to i32
  %35 = srem i32 %11, %34
  %36 = icmp eq i32 %35, 0
  %37 = or i64 %4, 7950193022723595895
  %38 = xor i64 %4, -1
  %39 = and i64 %38, -5097597985172311497
  %40 = and i64 %4, 5097597985172311496
  %41 = or i64 %39, %40
  %42 = xor i64 -2948323066918982592, %41
  %43 = xor i64 %4, -1
  %44 = or i64 -7950193022723595896, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = or i64 %4, -2960378386517954515
  %49 = xor i64 %4, -1
  %50 = and i64 %49, -2135277936142842844
  %51 = and i64 %4, 2135277936142842843
  %52 = or i64 %50, %51
  %53 = xor i64 3798618667904693257, %52
  %54 = xor i64 %4, -1
  %55 = or i64 2960378386517954514, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = or i64 %53, %57
  %59 = or i64 %4, -8102551817226418327
  %60 = xor i64 %4, -1
  %61 = and i64 -8102551817226418327, %60
  %62 = add i64 %61, %4
  %63 = xor i64 %48, 8846066828338678641
  %64 = xor i64 %63, %37
  %65 = xor i64 %64, %47
  %66 = xor i64 %65, %59
  %67 = xor i64 %66, %58
  %68 = xor i64 %67, %62
  %69 = or i64 %4, 8760918234501232170
  %70 = and i64 8760918234501232170, %4
  %71 = xor i64 8760918234501232170, %4
  %72 = or i64 %70, %71
  %73 = and i64 %4, 109261232989699055
  %74 = or i64 -109261232989699056, %4
  %75 = sub i64 %74, -109261232989699056
  %76 = xor i64 %75, %73
  %77 = xor i64 %76, %72
  %78 = xor i64 %77, %69
  %79 = xor i64 %78, 3964592898551780753
  %80 = mul i64 %68, %79
  %81 = trunc i64 %80 to i1
  %82 = xor i1 %0, %81
  %83 = xor i1 %36, true
  %84 = or i1 %82, %83
  %85 = xor i1 %84, true
  %86 = and i1 %85, true
  %87 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 31
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %90 = load i32, i32* %89, align 4
  %91 = srem i32 %88, %90
  %92 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 27
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = sub i32 %93, %95
  %97 = select i1 %86, i32 %91, i32 %96
  store i32 %97, i32* %dispatcher, align 4
  %98 = load i8*, i8** %3, align 8
  %99 = load i8, i8* %98, align 1
  %100 = mul i8 %99, 2
  %101 = mul i8 %99, 2
  %102 = add i8 2, %101
  %103 = mul i8 %100, %102
  %104 = srem i8 %103, 4
  %105 = icmp eq i8 %104, 0
  %106 = mul i8 %99, %99
  %107 = add i8 %106, %99
  %108 = srem i8 %107, 2
  %109 = icmp eq i8 %108, 0
  %110 = xor i1 %105, true
  %111 = and i64 %2, -5032372749288653207
  %112 = xor i64 %2, -1
  %113 = xor i64 -5032372749288653207, %112
  %114 = and i64 %113, -5032372749288653207
  %115 = or i64 %4, -6283499210272106840
  %116 = xor i64 %4, -1
  %117 = and i64 -6283499210272106840, %116
  %118 = add i64 %117, %4
  %119 = and i64 %2, 427035407149752136
  %120 = or i64 -427035407149752137, %2
  %121 = sub i64 %120, -427035407149752137
  %122 = xor i64 %115, %119
  %123 = xor i64 %122, %121
  %124 = xor i64 %123, %114
  %125 = xor i64 %124, 335546015359865319
  %126 = xor i64 %125, %118
  %127 = xor i64 %126, %111
  %128 = add i64 %4, 3263863747285778781
  %129 = add i64 2081361545721562551, %4
  %130 = add i64 %129, 1182502201564216230
  %131 = or i64 %4, 5327391849599320893
  %132 = xor i64 %4, -1
  %133 = and i64 %132, -6671427487895654355
  %134 = and i64 %4, 6671427487895654354
  %135 = or i64 %133, %134
  %136 = xor i64 -1547858785469582576, %135
  %137 = xor i64 %4, -1
  %138 = or i64 -5327391849599320894, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = or i64 %136, %140
  %142 = xor i64 %128, 0
  %143 = xor i64 %142, %131
  %144 = xor i64 %143, %141
  %145 = xor i64 %144, %130
  %146 = mul i64 %127, %145
  %147 = trunc i64 %146 to i1
  %148 = and i1 %110, %147
  %149 = and i1 %105, true
  %150 = or i1 %148, %149
  %151 = xor i1 %109, true
  %152 = and i1 %151, false
  %153 = and i1 %109, true
  %154 = or i1 %152, %153
  %155 = xor i1 %150, %154
  %156 = xor i1 %105, true
  %157 = add i64 %4, 8298415655082368274
  %158 = xor i64 8298415655082368274, %4
  %159 = and i64 8298415655082368274, %4
  %160 = mul i64 2, %159
  %161 = add i64 %158, %160
  %162 = and i64 %2, -4612377880249526551
  %163 = xor i64 %2, -1
  %164 = xor i64 -4612377880249526551, %163
  %165 = and i64 %164, -4612377880249526551
  %166 = add i64 %4, -6998869989571242922
  %167 = and i64 -6998869989571242922, %4
  %168 = or i64 -6998869989571242922, %4
  %169 = add i64 %167, %168
  %170 = xor i64 %161, %165
  %171 = xor i64 %170, %162
  %172 = xor i64 %171, 7674833797827090707
  %173 = xor i64 %172, %157
  %174 = xor i64 %173, %166
  %175 = xor i64 %174, %169
  %176 = or i64 %4, -5440813603058468373
  %177 = xor i64 %4, -1
  %178 = and i64 -5440813603058468373, %177
  %179 = add i64 %178, %4
  %180 = add i64 %4, 6005835901766813777
  %181 = sub i64 0, %4
  %182 = add i64 -6005835901766813777, %181
  %183 = sub i64 0, %182
  %184 = or i64 %2, 748345349506811065
  %185 = xor i64 %2, -1
  %186 = and i64 748345349506811065, %185
  %187 = add i64 %186, %2
  %188 = xor i64 %176, 5933288438538721563
  %189 = xor i64 %188, %187
  %190 = xor i64 %189, %180
  %191 = xor i64 %190, %179
  %192 = xor i64 %191, %183
  %193 = xor i64 %192, %184
  %194 = mul i64 %175, %193
  %195 = trunc i64 %194 to i1
  %196 = xor i1 %109, %195
  %197 = or i1 %156, %196
  %198 = or i64 %2, -760812255351647100
  %199 = xor i64 %2, -1
  %200 = and i64 %199, -5503797694974195864
  %201 = and i64 %2, 5503797694974195863
  %202 = or i64 %200, %201
  %203 = xor i64 5111471643401868268, %202
  %204 = xor i64 %2, -1
  %205 = or i64 760812255351647099, %204
  %206 = xor i64 %205, -1
  %207 = and i64 %206, -1
  %208 = or i64 %203, %207
  %209 = or i64 %2, 2976332996849697487
  %210 = xor i64 %2, -1
  %211 = and i64 %210, 1365124111338370622
  %212 = and i64 %2, -1365124111338370623
  %213 = or i64 %211, %212
  %214 = xor i64 4305417273019266289, %213
  %215 = xor i64 %2, -1
  %216 = or i64 -2976332996849697488, %215
  %217 = xor i64 %216, -1
  %218 = and i64 %217, -1
  %219 = or i64 %214, %218
  %220 = xor i64 %208, 7166225966625486733
  %221 = xor i64 %220, %198
  %222 = xor i64 %221, %209
  %223 = xor i64 %222, %219
  %224 = and i64 %4, 2503520170003689499
  %225 = xor i64 %4, -1
  %226 = xor i64 2503520170003689499, %225
  %227 = and i64 %226, 2503520170003689499
  %228 = or i64 %4, 8941145184936082884
  %229 = and i64 8941145184936082884, %4
  %230 = xor i64 8941145184936082884, %4
  %231 = or i64 %229, %230
  %232 = xor i64 %231, %227
  %233 = xor i64 %232, %228
  %234 = xor i64 %233, -6245748104717294779
  %235 = xor i64 %234, %224
  %236 = mul i64 %223, %235
  %237 = trunc i64 %236 to i1
  %238 = xor i1 %197, %237
  %239 = and i1 %238, true
  %240 = or i1 %155, %239
  %241 = select i1 %240, i32 984876126, i32 984876126
  %242 = xor i32 %241, 0
  store i32 %242, i32* %1, align 4
  %243 = call i8** @bf6338069988336422972(i32* %1)
  %244 = load i8*, i8** %243, align 8
  indirectbr i8* %244, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.37.extracted(i32* %.reg2mem110, i32* %.reg2mem112, i1* %.reg2mem120, [53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876122)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.37.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876134)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.37.extracted, %7), i8** %4, align 8
  store i32 984876134, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %.reload111 = load i32, i32* %.reg2mem110, align 4
  %8 = srem i32 %.reload111, 2
  %9 = icmp eq i32 %8, 0
  %.reload116 = load i32, i32* %.reg2mem112, align 4
  %10 = mul i32 %.reload116, %.reload116
  %.reload115 = load i32, i32* %.reg2mem112, align 4
  %11 = sub i32 %10, 606018051
  %12 = add i32 %11, %.reload115
  %13 = add i32 %12, 606018051
  %14 = mul i32 %13, 3
  %15 = srem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %.reload114 = load i32, i32* %.reg2mem112, align 4
  %17 = mul i32 %.reload114, %.reload114
  %.reload113 = load i32, i32* %.reg2mem112, align 4
  %18 = add i64 %3, 362629243641321182
  %19 = xor i64 362629243641321182, %3
  %20 = and i64 362629243641321182, %3
  %21 = mul i64 2, %20
  %22 = add i64 %19, %21
  %23 = and i64 %1, 7402412482542673330
  %24 = xor i64 %1, -1
  %25 = or i64 -7402412482542673331, %24
  %26 = xor i64 %25, -1
  %27 = and i64 %26, -1
  %28 = xor i64 2541663169418887601, %27
  %29 = xor i64 %28, %18
  %30 = xor i64 %29, %23
  %31 = xor i64 %30, %22
  %32 = or i64 %3, 8433261119480796920
  %33 = xor i64 %3, -1
  %34 = and i64 %33, 1141861365801830605
  %35 = and i64 %3, -1141861365801830606
  %36 = or i64 %34, %35
  %37 = xor i64 8849646463951068725, %36
  %38 = xor i64 %3, -1
  %39 = or i64 -8433261119480796921, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = or i64 %37, %41
  %43 = or i64 %1, 744346111400668755
  %44 = xor i64 %1, -1
  %45 = and i64 %44, 1535617811670553713
  %46 = and i64 %1, -1535617811670553714
  %47 = or i64 %45, %46
  %48 = xor i64 2241647590252231202, %47
  %49 = xor i64 %1, -1
  %50 = or i64 -744346111400668756, %49
  %51 = xor i64 %50, -1
  %52 = and i64 %51, -1
  %53 = or i64 %48, %52
  %54 = add i64 %3, -1277122627786249295
  %55 = add i64 -2263701102621406488, %3
  %56 = add i64 %55, 986578474835157193
  %57 = xor i64 %32, %53
  %58 = xor i64 %57, %42
  %59 = xor i64 %58, -386460077561673791
  %60 = xor i64 %59, %54
  %61 = xor i64 %60, %56
  %62 = xor i64 %61, %43
  %63 = mul i64 %31, %62
  %64 = trunc i64 %63 to i32
  %65 = sub i32 %17, %64
  %66 = add i32 %65, %.reload113
  %67 = add i64 %3, -6006087110786971394
  %68 = add i64 -633608555876367773, %3
  %69 = sub i64 %68, 5372478554910603621
  %70 = add i64 %1, 7570498687410536892
  %71 = and i64 7570498687410536892, %1
  %72 = or i64 7570498687410536892, %1
  %73 = add i64 %71, %72
  %74 = xor i64 -52698043065303175, %67
  %75 = xor i64 %74, %69
  %76 = xor i64 %75, %70
  %77 = xor i64 %76, %73
  %78 = and i64 %3, 902711687967308134
  %79 = or i64 -902711687967308135, %3
  %80 = sub i64 %79, -902711687967308135
  %81 = or i64 %1, -3444117879315207889
  %82 = xor i64 %1, -1
  %83 = and i64 -3444117879315207889, %82
  %84 = add i64 %83, %1
  %85 = add i64 %3, -5939295218041512645
  %86 = sub i64 0, %3
  %87 = add i64 5939295218041512645, %86
  %88 = sub i64 0, %87
  %89 = xor i64 5108266096471029689, %78
  %90 = xor i64 %89, %88
  %91 = xor i64 %90, %80
  %92 = xor i64 %91, %81
  %93 = xor i64 %92, %85
  %94 = xor i64 %93, %84
  %95 = mul i64 %77, %94
  %96 = trunc i64 %95 to i32
  %97 = add i32 %66, %96
  %98 = srem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = and i1 %16, %99
  store i1 %100, i1* %.reg2mem120, align 1
  %101 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 34
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %104 = load i32, i32* %103, align 4
  %105 = srem i32 %102, %104
  %106 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 33
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %109 = load i32, i32* %108, align 4
  %110 = srem i32 %107, %109
  %.reload122 = load i1, i1* %.reg2mem120, align 1
  %111 = select i1 %.reload122, i32 %105, i32 %110
  store i32 %111, i32* %dispatcher, align 4
  %112 = load i8*, i8** %4, align 8
  %113 = load i8, i8* %112, align 1
  %114 = mul i8 %113, 2
  %115 = mul i8 %113, 2
  %116 = sub i8 0, %115
  %117 = add i8 -2, %116
  %118 = and i64 %1, -4236697544801839895
  %119 = xor i64 %1, -1
  %120 = or i64 4236697544801839894, %119
  %121 = xor i64 %120, -1
  %122 = and i64 %121, -1
  %123 = add i64 %1, 8208016267952931639
  %124 = add i64 7867447210401477176, %1
  %125 = sub i64 %124, -340569057551454463
  %126 = xor i64 %118, 6403915983879183593
  %127 = xor i64 %126, %123
  %128 = xor i64 %127, %122
  %129 = xor i64 %128, %125
  %130 = or i64 %1, 5306041581949159751
  %131 = xor i64 %1, -1
  %132 = and i64 %131, 4017959013281504555
  %133 = and i64 %1, -4017959013281504556
  %134 = or i64 %132, %133
  %135 = xor i64 9106402536657589356, %134
  %136 = xor i64 %1, -1
  %137 = or i64 -5306041581949159752, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = or i64 %135, %139
  %141 = or i64 %3, 3587368780186087457
  %142 = xor i64 %3, -1
  %143 = and i64 %142, 4348203857521875106
  %144 = and i64 %3, -4348203857521875107
  %145 = or i64 %143, %144
  %146 = xor i64 981512834447992963, %145
  %147 = xor i64 %3, -1
  %148 = or i64 -3587368780186087458, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = or i64 %146, %150
  %152 = and i64 %3, 4519192948368394715
  %153 = xor i64 %3, -1
  %154 = xor i64 4519192948368394715, %153
  %155 = and i64 %154, 4519192948368394715
  %156 = xor i64 %152, %155
  %157 = xor i64 %156, %141
  %158 = xor i64 %157, %130
  %159 = xor i64 %158, %140
  %160 = xor i64 %159, 0
  %161 = xor i64 %160, %151
  %162 = mul i64 %129, %161
  %163 = trunc i64 %162 to i8
  %164 = sub i8 %163, %117
  %165 = mul i8 %114, %164
  %166 = srem i8 %165, 4
  %167 = icmp eq i8 %166, 0
  %168 = mul i8 %113, %113
  %169 = xor i8 %168, %113
  %170 = and i8 %168, %113
  %171 = mul i8 2, %170
  %172 = add i8 %169, %171
  %173 = srem i8 %172, 2
  %174 = icmp eq i8 %173, 0
  %175 = or i1 %167, %174
  %176 = add i64 %1, 4504810612369448315
  %177 = and i64 4504810612369448315, %1
  %178 = or i64 4504810612369448315, %1
  %179 = add i64 %177, %178
  %180 = or i64 %1, 7315281530958273987
  %181 = xor i64 %1, -1
  %182 = and i64 7315281530958273987, %181
  %183 = add i64 %182, %1
  %184 = and i64 %1, -6618257131459382264
  %185 = or i64 6618257131459382263, %1
  %186 = sub i64 %185, 6618257131459382263
  %187 = xor i64 -8724375161277353603, %183
  %188 = xor i64 %187, %176
  %189 = xor i64 %188, %180
  %190 = xor i64 %189, %184
  %191 = xor i64 %190, %186
  %192 = xor i64 %191, %179
  %193 = or i64 %3, 4763393340333705353
  %194 = xor i64 %3, -1
  %195 = and i64 4763393340333705353, %194
  %196 = add i64 %195, %3
  %197 = and i64 %1, -5243091082995434327
  %198 = xor i64 %1, -1
  %199 = or i64 5243091082995434326, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = add i64 %1, -3274793891879398628
  %203 = add i64 1001941741485352229, %1
  %204 = add i64 %203, -4276735633364750857
  %205 = xor i64 %204, %201
  %206 = xor i64 %205, -6968632661071665950
  %207 = xor i64 %206, %197
  %208 = xor i64 %207, %202
  %209 = xor i64 %208, %196
  %210 = xor i64 %209, %193
  %211 = mul i64 %192, %210
  %212 = trunc i64 %211 to i32
  %213 = select i1 %175, i32 984876134, i32 %212
  %214 = xor i32 %213, 60
  store i32 %214, i32* %0, align 4
  %215 = call i8** @bf6338069988336422972(i32* %0)
  %216 = load i8*, i8** %215, align 8
  indirectbr i8* %216, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.38.extracted([53 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876124)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.38.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876154)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.38.extracted, %7), i8** %4, align 8
  store i32 984876154, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = and i64 %1, 1084285260456246733
  %9 = or i64 -1084285260456246734, %1
  %10 = sub i64 %9, -1084285260456246734
  %11 = add i64 %1, -5073728299040620616
  %12 = xor i64 -5073728299040620616, %1
  %13 = and i64 -5073728299040620616, %1
  %14 = mul i64 2, %13
  %15 = add i64 %12, %14
  %16 = and i64 %1, -4643675530512263518
  %17 = or i64 4643675530512263517, %1
  %18 = sub i64 %17, 4643675530512263517
  %19 = xor i64 %18, %16
  %20 = xor i64 %19, %10
  %21 = xor i64 %20, %15
  %22 = xor i64 %21, %11
  %23 = xor i64 %22, 1552293544970673519
  %24 = xor i64 %23, %8
  %25 = and i64 %1, 9072954831010298299
  %26 = xor i64 %1, -1
  %27 = or i64 -9072954831010298300, %26
  %28 = xor i64 %27, -1
  %29 = and i64 %28, -1
  %30 = and i64 %3, 1156625782339604068
  %31 = xor i64 %3, -1
  %32 = or i64 -1156625782339604069, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = and i64 %1, -4690128074693615204
  %36 = xor i64 %1, -1
  %37 = or i64 4690128074693615203, %36
  %38 = xor i64 %37, -1
  %39 = and i64 %38, -1
  %40 = xor i64 %35, %34
  %41 = xor i64 %40, %29
  %42 = xor i64 %41, %30
  %43 = xor i64 %42, %39
  %44 = xor i64 %43, %25
  %45 = xor i64 %44, 5110088347168392340
  %46 = mul i64 %24, %45
  %47 = add i64 3, %46
  %48 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 49
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 17
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %49, %51
  store i32 %52, i32* %dispatcher, align 4
  %53 = load i8*, i8** %2, align 8
  %54 = load i8, i8* %53, align 1
  %55 = mul i8 %54, 2
  %56 = and i64 %3, 6374682865825563539
  %57 = xor i64 %3, -1
  %58 = xor i64 6374682865825563539, %57
  %59 = and i64 %58, 6374682865825563539
  %60 = add i64 %1, 2732077428591815567
  %61 = xor i64 2732077428591815567, %1
  %62 = and i64 2732077428591815567, %1
  %63 = mul i64 2, %62
  %64 = add i64 %61, %63
  %65 = xor i64 %60, 5620135276157364157
  %66 = xor i64 %65, %56
  %67 = xor i64 %66, %64
  %68 = xor i64 %67, %59
  %69 = and i64 %3, -4313822551689967967
  %70 = or i64 4313822551689967966, %3
  %71 = sub i64 %70, 4313822551689967966
  %72 = and i64 %1, -4606916331171979161
  %73 = or i64 4606916331171979160, %1
  %74 = sub i64 %73, 4606916331171979160
  %75 = xor i64 %69, %71
  %76 = xor i64 %75, %72
  %77 = xor i64 %76, 7365806356682577706
  %78 = xor i64 %77, %74
  %79 = mul i64 %68, %78
  %80 = trunc i64 %79 to i8
  %81 = mul i8 %54, %80
  %82 = add i8 2, %81
  %83 = mul i8 %55, %82
  %84 = srem i8 %83, 4
  %85 = icmp eq i8 %84, 0
  %86 = mul i8 %54, %54
  %87 = add i64 %1, -3372997878383242299
  %88 = and i64 -3372997878383242299, %1
  %89 = or i64 -3372997878383242299, %1
  %90 = add i64 %88, %89
  %91 = add i64 %3, 4617956523978640431
  %92 = add i64 -5421499400577295337, %3
  %93 = sub i64 %92, 8407288149153615848
  %94 = or i64 %1, 4804290371710498142
  %95 = and i64 4804290371710498142, %1
  %96 = xor i64 4804290371710498142, %1
  %97 = or i64 %95, %96
  %98 = xor i64 %94, %87
  %99 = xor i64 %98, 4159415176139156891
  %100 = xor i64 %99, %97
  %101 = xor i64 %100, %93
  %102 = xor i64 %101, %91
  %103 = xor i64 %102, %90
  %104 = add i64 %1, -3219465831031930523
  %105 = xor i64 -3219465831031930523, %1
  %106 = and i64 -3219465831031930523, %1
  %107 = mul i64 2, %106
  %108 = add i64 %105, %107
  %109 = and i64 %1, -7437024817658317672
  %110 = xor i64 %1, -1
  %111 = xor i64 -7437024817658317672, %110
  %112 = and i64 %111, -7437024817658317672
  %113 = and i64 %1, -3579633038111181964
  %114 = or i64 3579633038111181963, %1
  %115 = sub i64 %114, 3579633038111181963
  %116 = xor i64 %113, %104
  %117 = xor i64 %116, %112
  %118 = xor i64 %117, %108
  %119 = xor i64 %118, %115
  %120 = xor i64 %119, 0
  %121 = xor i64 %120, %109
  %122 = mul i64 %103, %121
  %123 = trunc i64 %122 to i8
  %124 = sub i8 %123, %54
  %125 = sub i8 %86, %124
  %126 = and i64 %1, 4993177602791762604
  %127 = xor i64 %1, -1
  %128 = xor i64 4993177602791762604, %127
  %129 = and i64 %128, 4993177602791762604
  %130 = and i64 %3, -4592729750705279619
  %131 = xor i64 %3, -1
  %132 = or i64 4592729750705279618, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = xor i64 3003836641774894957, %126
  %136 = xor i64 %135, %134
  %137 = xor i64 %136, %129
  %138 = xor i64 %137, %130
  %139 = add i64 %1, 5060068318088778450
  %140 = add i64 -3890392060099342325, %1
  %141 = add i64 %140, 8950460378188120775
  %142 = add i64 %3, 4312919776869795608
  %143 = sub i64 0, %3
  %144 = add i64 -4312919776869795608, %143
  %145 = sub i64 0, %144
  %146 = xor i64 %141, %139
  %147 = xor i64 %146, %145
  %148 = xor i64 %147, %142
  %149 = xor i64 %148, -1718664927682050870
  %150 = mul i64 %138, %149
  %151 = trunc i64 %150 to i8
  %152 = srem i8 %125, %151
  %153 = icmp eq i8 %152, 0
  %154 = xor i1 %153, true
  %155 = xor i1 %85, %154
  %156 = and i1 %155, %85
  %157 = add i64 %1, 4580976463433919103
  %158 = add i64 -6349263735231265603, %1
  %159 = sub i64 %158, 7516503875044366910
  %160 = or i64 %1, -8006360373443557942
  %161 = xor i64 %1, -1
  %162 = and i64 %161, -2639545747762173389
  %163 = and i64 %1, 2639545747762173388
  %164 = or i64 %162, %163
  %165 = xor i64 5457732214779031545, %164
  %166 = xor i64 %1, -1
  %167 = or i64 8006360373443557941, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = or i64 %165, %169
  %171 = and i64 %3, 453800625882726505
  %172 = or i64 -453800625882726506, %3
  %173 = sub i64 %172, -453800625882726506
  %174 = xor i64 %157, -5763987626731996115
  %175 = xor i64 %174, %159
  %176 = xor i64 %175, %160
  %177 = xor i64 %176, %171
  %178 = xor i64 %177, %173
  %179 = xor i64 %178, %170
  %180 = add i64 %1, 9050596848102105065
  %181 = xor i64 9050596848102105065, %1
  %182 = and i64 9050596848102105065, %1
  %183 = mul i64 2, %182
  %184 = add i64 %181, %183
  %185 = add i64 %1, -7672624661038629210
  %186 = and i64 -7672624661038629210, %1
  %187 = or i64 -7672624661038629210, %1
  %188 = add i64 %186, %187
  %189 = or i64 %3, 5216000267142903837
  %190 = xor i64 %3, -1
  %191 = and i64 %190, 2790205044187004890
  %192 = and i64 %3, -2790205044187004891
  %193 = or i64 %191, %192
  %194 = xor i64 7987758664182253511, %193
  %195 = xor i64 %3, -1
  %196 = or i64 -5216000267142903838, %195
  %197 = xor i64 %196, -1
  %198 = and i64 %197, -1
  %199 = or i64 %194, %198
  %200 = xor i64 %189, %184
  %201 = xor i64 %200, %199
  %202 = xor i64 %201, %180
  %203 = xor i64 %202, -2464762738865786718
  %204 = xor i64 %203, %185
  %205 = xor i64 %204, %188
  %206 = mul i64 %179, %205
  %207 = trunc i64 %206 to i32
  %208 = select i1 %156, i32 %207, i32 984876124
  %209 = and i64 %3, -8489183141837449064
  %210 = xor i64 %3, -1
  %211 = or i64 8489183141837449063, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = add i64 %1, 2780717806840579890
  %215 = and i64 2780717806840579890, %1
  %216 = or i64 2780717806840579890, %1
  %217 = add i64 %215, %216
  %218 = add i64 %1, 8924034512424977557
  %219 = xor i64 8924034512424977557, %1
  %220 = and i64 8924034512424977557, %1
  %221 = mul i64 2, %220
  %222 = add i64 %219, %221
  %223 = xor i64 %217, %209
  %224 = xor i64 %223, %213
  %225 = xor i64 %224, %222
  %226 = xor i64 %225, %214
  %227 = xor i64 %226, -6865794209108122411
  %228 = xor i64 %227, %218
  %229 = and i64 %3, 6506131057641193085
  %230 = or i64 -6506131057641193086, %3
  %231 = sub i64 %230, -6506131057641193086
  %232 = add i64 %3, -3530214055213364817
  %233 = sub i64 0, %3
  %234 = sub i64 -3530214055213364817, %233
  %235 = and i64 %1, 7781210729492653289
  %236 = xor i64 %1, -1
  %237 = or i64 -7781210729492653290, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = xor i64 %239, %234
  %241 = xor i64 %240, %231
  %242 = xor i64 %241, %235
  %243 = xor i64 %242, -496024985105577330
  %244 = xor i64 %243, %232
  %245 = xor i64 %244, %229
  %246 = mul i64 %228, %245
  %247 = trunc i64 %246 to i32
  %248 = xor i32 %208, %247
  store i32 %248, i32* %0, align 4
  %249 = call i8** @bf6338069988336422972(i32* %0)
  %250 = load i8*, i8** %249, align 8
  indirectbr i8* %250, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.39.extracted(double %.reload81, [53 x i32]* %lookupTable, i32* %dispatcher, i1* %.reg2mem167) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876125)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.39.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876150)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.39.extracted, %7), i8** %4, align 8
  store i32 984876150, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = fcmp olt double %.reload81, 6.280000e+00
  %9 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 37
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %12 = load i32, i32* %11, align 4
  %13 = srem i32 %10, %12
  store i32 %13, i32* %dispatcher, align 4
  store i1 %8, i1* %.reg2mem167, align 1
  %14 = load i8*, i8** %4, align 8
  %15 = load i8, i8* %14, align 1
  %16 = mul i8 %15, %15
  %17 = and i8 %16, %15
  %18 = or i8 %16, %15
  %19 = add i8 %17, %18
  %20 = mul i8 %19, 3
  %21 = srem i8 %20, 2
  %22 = icmp eq i8 %21, 0
  %23 = mul i8 %15, %15
  %24 = add i8 %23, %15
  %25 = srem i8 %24, 2
  %26 = icmp eq i8 %25, 0
  %27 = xor i1 %22, true
  %28 = or i1 %27, %26
  %29 = and i64 %3, -6759061033497351740
  %30 = xor i64 %3, -1
  %31 = xor i64 -6759061033497351740, %30
  %32 = and i64 %31, -6759061033497351740
  %33 = and i64 %3, 7773702387501200188
  %34 = xor i64 %3, -1
  %35 = xor i64 7773702387501200188, %34
  %36 = and i64 %35, 7773702387501200188
  %37 = add i64 %1, -8318468459736260441
  %38 = add i64 5405308590107721132, %1
  %39 = add i64 %38, 4722967023865570043
  %40 = xor i64 %36, %29
  %41 = xor i64 %40, %37
  %42 = xor i64 %41, %32
  %43 = xor i64 %42, %33
  %44 = xor i64 %43, %39
  %45 = xor i64 %44, 1275874520782003561
  %46 = or i64 %1, -2538901410618300970
  %47 = xor i64 %1, -1
  %48 = and i64 -2538901410618300970, %47
  %49 = add i64 %48, %1
  %50 = add i64 %1, -6532995562447714913
  %51 = sub i64 0, %1
  %52 = add i64 6532995562447714913, %51
  %53 = sub i64 0, %52
  %54 = xor i64 %50, 1428570524111307481
  %55 = xor i64 %54, %49
  %56 = xor i64 %55, %46
  %57 = xor i64 %56, %53
  %58 = mul i64 %45, %57
  %59 = trunc i64 %58 to i1
  %60 = xor i1 %22, %59
  %61 = sub i1 %28, %60
  %62 = select i1 %61, i32 984876150, i32 984876125
  %63 = and i64 %1, 4976455183769961041
  %64 = xor i64 %1, -1
  %65 = xor i64 4976455183769961041, %64
  %66 = and i64 %65, 4976455183769961041
  %67 = add i64 %1, -3706991626198731636
  %68 = sub i64 0, %1
  %69 = sub i64 -3706991626198731636, %68
  %70 = add i64 %1, -2741268391775998748
  %71 = sub i64 0, %1
  %72 = add i64 2741268391775998748, %71
  %73 = sub i64 0, %72
  %74 = xor i64 %73, %69
  %75 = xor i64 %74, %63
  %76 = xor i64 %75, -7507006252466534065
  %77 = xor i64 %76, %66
  %78 = xor i64 %77, %70
  %79 = xor i64 %78, %67
  %80 = and i64 %1, 4722747018898444313
  %81 = xor i64 %1, -1
  %82 = xor i64 4722747018898444313, %81
  %83 = and i64 %82, 4722747018898444313
  %84 = or i64 %3, -5841094723131485002
  %85 = xor i64 %3, -1
  %86 = and i64 %85, -1585653736214059383
  %87 = and i64 %3, 1585653736214059382
  %88 = or i64 %86, %87
  %89 = xor i64 5120279518659375679, %88
  %90 = xor i64 %3, -1
  %91 = or i64 5841094723131485001, %90
  %92 = xor i64 %91, -1
  %93 = and i64 %92, -1
  %94 = or i64 %89, %93
  %95 = or i64 %3, 4210620515828505469
  %96 = xor i64 %3, -1
  %97 = and i64 4210620515828505469, %96
  %98 = add i64 %97, %3
  %99 = xor i64 %80, %95
  %100 = xor i64 %99, %94
  %101 = xor i64 %100, -71545836137672111
  %102 = xor i64 %101, %84
  %103 = xor i64 %102, %98
  %104 = xor i64 %103, %83
  %105 = mul i64 %79, %104
  %106 = trunc i64 %105 to i32
  %107 = xor i32 %62, %106
  %108 = and i32 %107, -504890083
  %109 = and i32 %62, 504890082
  %110 = or i32 %108, %109
  %111 = xor i32 %110, -504890058
  store i32 %111, i32* %0, align 4
  %112 = call i8** @bf6338069988336422972(i32* %0)
  %113 = load i8*, i8** %112, align 8
  indirectbr i8* %113, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.40.extracted(i32 %0, i32 %1, [53 x i32]* %lookupTable, i1 %.reload172, i32* %dispatcher, i32* %.reg2mem126, i32* %.reg2mem175) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876113)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.40.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876130)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.40.extracted, %9), i8** %6, align 8
  store i32 984876130, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = sub i32 %0, %1
  %11 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 37
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %12, 257395900
  %16 = sub i32 %15, %14
  %17 = sub i32 %16, 257395900
  %18 = select i1 %.reload172, i32 %10, i32 %17
  store i32 %18, i32* %dispatcher, align 4
  %.reload127 = load i32, i32* %.reg2mem126, align 4
  store i32 %.reload127, i32* %.reg2mem175, align 4
  %19 = load i8*, i8** %6, align 8
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 1
  %22 = icmp eq i8 %21, 0
  %23 = mul i8 %20, %20
  %24 = add i8 %23, %20
  %25 = mul i8 %24, 3
  %26 = srem i8 %25, 2
  %27 = icmp eq i8 %26, 0
  %28 = or i1 %22, %27
  %29 = select i1 %28, i32 984876130, i32 984876113
  %30 = or i32 %29, 51
  %31 = or i64 %3, -7433109414405369459
  %32 = xor i64 %3, -1
  %33 = and i64 -7433109414405369459, %32
  %34 = add i64 %33, %3
  %35 = add i64 %5, 2413394094449376197
  %36 = and i64 2413394094449376197, %5
  %37 = or i64 2413394094449376197, %5
  %38 = add i64 %36, %37
  %39 = xor i64 -4278304302946998895, %38
  %40 = xor i64 %39, %34
  %41 = xor i64 %40, %31
  %42 = xor i64 %41, %35
  %43 = and i64 %5, -3454273057022429155
  %44 = xor i64 %5, -1
  %45 = xor i64 -3454273057022429155, %44
  %46 = and i64 %45, -3454273057022429155
  %47 = sext i32 %1 to i64
  %48 = or i64 %47, -5495614004110590187
  %49 = and i64 -5495614004110590187, %47
  %50 = xor i64 -5495614004110590187, %47
  %51 = or i64 %49, %50
  %52 = add i64 %5, -2073257135458307789
  %53 = sub i64 0, %5
  %54 = sub i64 -2073257135458307789, %53
  %55 = xor i64 %51, %54
  %56 = xor i64 %55, -4372847765287053437
  %57 = xor i64 %56, %52
  %58 = xor i64 %57, %46
  %59 = xor i64 %58, %48
  %60 = xor i64 %59, %43
  %61 = mul i64 %42, %60
  %62 = trunc i64 %61 to i32
  %63 = and i32 %29, %62
  %64 = sub i32 %30, %63
  store i32 %64, i32* %2, align 4
  %65 = call i8** @bf6338069988336422972(i32* %2)
  %66 = load i8*, i8** %65, align 8
  indirectbr i8* %66, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.41.extracted([53 x i32]* %lookupTable, i32 %0, i1* %.reg2mem138, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876107)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main_loop.extracted.41.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876129)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.41.extracted, %8), i8** %5, align 8
  store i32 984876129, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %9 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i64 %2, -3719593651835802170
  %12 = xor i64 %2, -1
  %13 = xor i64 -3719593651835802170, %12
  %14 = and i64 %13, -3719593651835802170
  %15 = or i64 %4, -8946567275006964733
  %16 = xor i64 %4, -1
  %17 = and i64 -8946567275006964733, %16
  %18 = add i64 %17, %4
  %19 = or i64 %4, -8883468235225726357
  %20 = xor i64 %4, -1
  %21 = and i64 %20, -6874980665997895684
  %22 = and i64 %4, 6874980665997895683
  %23 = or i64 %21, %22
  %24 = xor i64 2603288626467165591, %23
  %25 = xor i64 %4, -1
  %26 = or i64 8883468235225726356, %25
  %27 = xor i64 %26, -1
  %28 = and i64 %27, -1
  %29 = or i64 %24, %28
  %30 = xor i64 %29, %15
  %31 = xor i64 %30, %11
  %32 = xor i64 %31, %19
  %33 = xor i64 %32, %14
  %34 = xor i64 %33, %18
  %35 = xor i64 %34, 7327006990553993971
  %36 = sext i32 %0 to i64
  %37 = and i64 %36, 5079052933539255622
  %38 = or i64 -5079052933539255623, %36
  %39 = sub i64 %38, -5079052933539255623
  %40 = sext i32 %0 to i64
  %41 = add i64 %40, -4904755642900613587
  %42 = sub i64 0, %40
  %43 = sub i64 -4904755642900613587, %42
  %44 = xor i64 %37, %43
  %45 = xor i64 %44, %39
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, 0
  %48 = mul i64 %35, %47
  %49 = trunc i64 %48 to i32
  %50 = sub i32 %49, %10
  %51 = add i32 %0, %50
  %52 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 39
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sub i32 %53, %55
  %.reload140 = load i1, i1* %.reg2mem138, align 1
  %57 = select i1 %.reload140, i32 %51, i32 %56
  store i32 %57, i32* %dispatcher, align 4
  %58 = load i8*, i8** %3, align 8
  %59 = load i8, i8* %58, align 1
  %60 = and i64 %4, -8535165730531238273
  %61 = or i64 8535165730531238272, %4
  %62 = sub i64 %61, 8535165730531238272
  %63 = and i64 %4, -1279505196264648073
  %64 = xor i64 %4, -1
  %65 = or i64 1279505196264648072, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = xor i64 %67, %60
  %69 = xor i64 %68, %63
  %70 = xor i64 %69, 2522063526872068163
  %71 = xor i64 %70, %62
  %72 = and i64 %4, 8837151162717144725
  %73 = xor i64 %4, -1
  %74 = xor i64 8837151162717144725, %73
  %75 = and i64 %74, 8837151162717144725
  %76 = sext i32 %0 to i64
  %77 = or i64 %76, 3372904252233201781
  %78 = xor i64 %76, -1
  %79 = and i64 %78, -5637416289363455610
  %80 = and i64 %76, 5637416289363455609
  %81 = or i64 %79, %80
  %82 = xor i64 -6985882037186057741, %81
  %83 = xor i64 %76, -1
  %84 = or i64 -3372904252233201782, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = sext i32 %0 to i64
  %89 = or i64 %88, 2731660684481813540
  %90 = xor i64 %88, -1
  %91 = and i64 %90, -5104472646223845531
  %92 = and i64 %88, 5104472646223845530
  %93 = or i64 %91, %92
  %94 = xor i64 -7151281045712569535, %93
  %95 = xor i64 %88, -1
  %96 = or i64 -2731660684481813541, %95
  %97 = xor i64 %96, -1
  %98 = and i64 %97, -1
  %99 = or i64 %94, %98
  %100 = xor i64 %99, -6732437111810548629
  %101 = xor i64 %100, %89
  %102 = xor i64 %101, %75
  %103 = xor i64 %102, %87
  %104 = xor i64 %103, %77
  %105 = xor i64 %104, %72
  %106 = mul i64 %71, %105
  %107 = trunc i64 %106 to i8
  %108 = and i8 %59, %107
  %109 = icmp eq i8 %108, 1
  %110 = mul i8 %59, %59
  %111 = and i8 %110, %59
  %112 = or i8 %110, %59
  %113 = add i8 %111, %112
  %114 = srem i8 %113, 2
  %115 = icmp eq i8 %114, 0
  %116 = or i1 %109, %115
  %117 = select i1 %116, i32 984876129, i32 984876107
  %118 = or i64 %2, -6552204145675955594
  %119 = xor i64 %2, -1
  %120 = and i64 -6552204145675955594, %119
  %121 = add i64 %120, %2
  %122 = sext i32 %0 to i64
  %123 = or i64 %122, 2889542358341768344
  %124 = xor i64 %122, -1
  %125 = and i64 2889542358341768344, %124
  %126 = add i64 %125, %122
  %127 = and i64 %4, -795700345675481715
  %128 = or i64 795700345675481714, %4
  %129 = sub i64 %128, 795700345675481714
  %130 = xor i64 %126, %129
  %131 = xor i64 %130, %127
  %132 = xor i64 %131, -3645130129514723447
  %133 = xor i64 %132, %121
  %134 = xor i64 %133, %118
  %135 = xor i64 %134, %123
  %136 = and i64 %4, 4553759230808500396
  %137 = xor i64 %4, -1
  %138 = xor i64 4553759230808500396, %137
  %139 = and i64 %138, 4553759230808500396
  %140 = or i64 %4, 8435156296462573709
  %141 = xor i64 %4, -1
  %142 = and i64 8435156296462573709, %141
  %143 = add i64 %142, %4
  %144 = xor i64 %140, %139
  %145 = xor i64 %144, -4282089111216004793
  %146 = xor i64 %145, %143
  %147 = xor i64 %146, %136
  %148 = mul i64 %135, %147
  %149 = trunc i64 %148 to i32
  %150 = xor i32 %117, %149
  %151 = or i64 %2, -1980163823342052791
  %152 = xor i64 %2, -1
  %153 = and i64 %152, -3480718809326469605
  %154 = and i64 %2, 3480718809326469604
  %155 = or i64 %153, %154
  %156 = xor i64 3113970660826489938, %155
  %157 = xor i64 %2, -1
  %158 = or i64 1980163823342052790, %157
  %159 = xor i64 %158, -1
  %160 = and i64 %159, -1
  %161 = or i64 %156, %160
  %162 = sext i32 %0 to i64
  %163 = or i64 %162, 3065789523886482210
  %164 = xor i64 %162, -1
  %165 = and i64 %164, -9181124662302861778
  %166 = and i64 %162, 9181124662302861777
  %167 = or i64 %165, %166
  %168 = xor i64 -6188569760737643252, %167
  %169 = xor i64 %162, -1
  %170 = or i64 -3065789523886482211, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %168, %172
  %174 = sext i32 %0 to i64
  %175 = add i64 %174, 7040418238590034777
  %176 = add i64 8899852541945354545, %174
  %177 = add i64 %176, -1859434303355319768
  %178 = xor i64 %163, %177
  %179 = xor i64 %178, %175
  %180 = xor i64 %179, %173
  %181 = xor i64 %180, -3350001780569228041
  %182 = xor i64 %181, %161
  %183 = xor i64 %182, %151
  %184 = or i64 %2, 4121317356919924940
  %185 = xor i64 %2, -1
  %186 = and i64 4121317356919924940, %185
  %187 = add i64 %186, %2
  %188 = sext i32 %0 to i64
  %189 = add i64 %188, 829002072158161693
  %190 = add i64 2217365070468823696, %188
  %191 = sub i64 %190, 1388362998310662003
  %192 = sext i32 %0 to i64
  %193 = add i64 %192, 5910430876696230094
  %194 = sub i64 0, %192
  %195 = sub i64 5910430876696230094, %194
  %196 = xor i64 %189, %193
  %197 = xor i64 %196, -8481225951178110810
  %198 = xor i64 %197, %195
  %199 = xor i64 %198, %184
  %200 = xor i64 %199, %187
  %201 = xor i64 %200, %191
  %202 = mul i64 %183, %201
  %203 = trunc i64 %202 to i32
  %204 = and i32 %150, %203
  %205 = add i64 %2, 7484265217405422731
  %206 = and i64 7484265217405422731, %2
  %207 = or i64 7484265217405422731, %2
  %208 = add i64 %206, %207
  %209 = sext i32 %0 to i64
  %210 = and i64 %209, 8996388910711063943
  %211 = xor i64 %209, -1
  %212 = or i64 -8996388910711063944, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = and i64 %4, -6223063123683190083
  %216 = xor i64 %4, -1
  %217 = or i64 6223063123683190082, %216
  %218 = xor i64 %217, -1
  %219 = and i64 %218, -1
  %220 = xor i64 %215, 231004575433639319
  %221 = xor i64 %220, %214
  %222 = xor i64 %221, %210
  %223 = xor i64 %222, %205
  %224 = xor i64 %223, %219
  %225 = xor i64 %224, %208
  %226 = and i64 %2, -1082104553077411192
  %227 = xor i64 %2, -1
  %228 = xor i64 -1082104553077411192, %227
  %229 = and i64 %228, -1082104553077411192
  %230 = or i64 %2, 5519605553874537082
  %231 = xor i64 %2, -1
  %232 = and i64 %231, 1431179318836090540
  %233 = and i64 %2, -1431179318836090541
  %234 = or i64 %232, %233
  %235 = xor i64 6864899804869909718, %234
  %236 = xor i64 %2, -1
  %237 = or i64 -5519605553874537083, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = or i64 %235, %239
  %241 = or i64 %4, 2636483764821486117
  %242 = xor i64 %4, -1
  %243 = and i64 2636483764821486117, %242
  %244 = add i64 %243, %4
  %245 = xor i64 %241, %240
  %246 = xor i64 %245, %229
  %247 = xor i64 %246, %230
  %248 = xor i64 %247, %244
  %249 = xor i64 %248, %226
  %250 = xor i64 %249, -8168355723343770765
  %251 = mul i64 %225, %250
  %252 = trunc i64 %251 to i32
  %253 = and i32 %117, %252
  %254 = or i32 %204, %253
  store i32 %254, i32* %1, align 4
  %255 = call i8** @bf6338069988336422972(i32* %1)
  %256 = load i8*, i8** %255, align 8
  indirectbr i8* %256, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.42.extracted(i32* %0, [53 x i32]* %lookupTable, i32* %dispatcher, i32* %.reg2mem136, i32* %.reg2mem173) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876130)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@main_loop.extracted.42.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876139)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.42.extracted, %8), i8** %5, align 8
  store i32 984876139, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 8
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %9, 608917306
  %13 = sub i32 %12, %11
  %14 = and i64 %4, 2939857786069194944
  %15 = xor i64 %4, -1
  %16 = or i64 -2939857786069194945, %15
  %17 = xor i64 %16, -1
  %18 = and i64 %17, -1
  %19 = and i64 %4, 3965283180257423828
  %20 = xor i64 %4, -1
  %21 = or i64 -3965283180257423829, %20
  %22 = xor i64 %21, -1
  %23 = and i64 %22, -1
  %24 = add i64 %2, -3771606903910564080
  %25 = sub i64 0, %2
  %26 = sub i64 -3771606903910564080, %25
  %27 = xor i64 %18, %19
  %28 = xor i64 %27, %24
  %29 = xor i64 %28, %26
  %30 = xor i64 %29, %23
  %31 = xor i64 %30, %14
  %32 = xor i64 %31, 5927327438170435641
  %33 = and i64 %2, -4382821461302552307
  %34 = xor i64 %2, -1
  %35 = or i64 4382821461302552306, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = add i64 %2, 8172168095920160987
  %39 = xor i64 8172168095920160987, %2
  %40 = and i64 8172168095920160987, %2
  %41 = mul i64 2, %40
  %42 = add i64 %39, %41
  %43 = xor i64 %42, %38
  %44 = xor i64 %43, -5377950202055549686
  %45 = xor i64 %44, %37
  %46 = xor i64 %45, %33
  %47 = mul i64 %32, %46
  %48 = trunc i64 %47 to i32
  %49 = add i32 %13, %48
  store i32 %49, i32* %dispatcher, align 4
  %.reload137 = load i32, i32* %.reg2mem136, align 4
  store i32 %.reload137, i32* %.reg2mem173, align 4
  %50 = load i8*, i8** %3, align 8
  %51 = load i8, i8* %50, align 1
  %52 = mul i8 %51, 2
  %53 = mul i8 %51, 2
  %54 = add i8 2, %53
  %55 = mul i8 %52, %54
  %56 = srem i8 %55, 4
  %57 = icmp eq i8 %56, 0
  %58 = mul i8 %51, %51
  %59 = sub i8 0, %51
  %60 = sub i8 %58, %59
  %61 = or i64 %4, -939998949381446295
  %62 = xor i64 %4, -1
  %63 = and i64 -939998949381446295, %62
  %64 = add i64 %63, %4
  %65 = and i64 %2, 594832414605502034
  %66 = xor i64 %2, -1
  %67 = or i64 -594832414605502035, %66
  %68 = xor i64 %67, -1
  %69 = and i64 %68, -1
  %70 = and i64 %2, 6359095621743424533
  %71 = xor i64 %2, -1
  %72 = xor i64 6359095621743424533, %71
  %73 = and i64 %72, 6359095621743424533
  %74 = xor i64 %64, %73
  %75 = xor i64 %74, -4748948687396088925
  %76 = xor i64 %75, %70
  %77 = xor i64 %76, %61
  %78 = xor i64 %77, %65
  %79 = xor i64 %78, %69
  %80 = and i64 %2, -4183868945980064046
  %81 = xor i64 %2, -1
  %82 = or i64 4183868945980064045, %81
  %83 = xor i64 %82, -1
  %84 = and i64 %83, -1
  %85 = or i64 %4, -1703022551675553956
  %86 = xor i64 %4, -1
  %87 = and i64 %86, 3829564654966944090
  %88 = and i64 %4, -3829564654966944091
  %89 = or i64 %87, %88
  %90 = xor i64 -2487958690761275898, %89
  %91 = xor i64 %4, -1
  %92 = or i64 1703022551675553955, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = or i64 %90, %94
  %96 = and i64 %4, -7266059883046869047
  %97 = xor i64 %4, -1
  %98 = or i64 7266059883046869046, %97
  %99 = xor i64 %98, -1
  %100 = and i64 %99, -1
  %101 = xor i64 %80, %95
  %102 = xor i64 %101, %85
  %103 = xor i64 %102, %100
  %104 = xor i64 %103, %96
  %105 = xor i64 %104, %84
  %106 = xor i64 %105, -3514945697034801130
  %107 = mul i64 %79, %106
  %108 = trunc i64 %107 to i8
  %109 = srem i8 %60, %108
  %110 = icmp eq i8 %109, 0
  %111 = and i1 %57, %110
  %112 = select i1 %111, i32 984876139, i32 984876130
  %113 = xor i32 %112, 9
  store i32 %113, i32* %1, align 4
  %114 = call i8** @bf6338069988336422972(i32* %1)
  %115 = load i8*, i8** %114, align 8
  indirectbr i8* %115, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.43.extracted(i32* %0, [53 x i32]* %lookupTable, i32* %dispatcher, i32 %1, i32* %.reg2mem173) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876102)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.43.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = sext i32 %1 to i64
  %6 = or i64 %5, -361681318975665483
  %7 = xor i64 %5, -1
  %8 = and i64 %7, 8793226764645751507
  %9 = and i64 %5, -8793226764645751508
  %10 = or i64 %8, %9
  %11 = xor i64 -9152196359109652378, %10
  %12 = xor i64 %5, -1
  %13 = or i64 361681318975665482, %12
  %14 = xor i64 %13, -1
  %15 = and i64 %14, -1
  %16 = or i64 %11, %15
  %17 = sext i32 %1 to i64
  %18 = or i64 %17, -229550866187364603
  %19 = and i64 -229550866187364603, %17
  %20 = xor i64 -229550866187364603, %17
  %21 = or i64 %19, %20
  %22 = xor i64 -5879796618031129861, %18
  %23 = xor i64 %22, %6
  %24 = xor i64 %23, %21
  %25 = xor i64 %24, %16
  %26 = sext i32 %1 to i64
  %27 = add i64 %26, -1125329367325491833
  %28 = sub i64 0, %26
  %29 = sub i64 -1125329367325491833, %28
  %30 = sext i32 %1 to i64
  %31 = or i64 %30, 699106023473406559
  %32 = xor i64 %30, -1
  %33 = and i64 699106023473406559, %32
  %34 = add i64 %33, %30
  %35 = sext i32 %1 to i64
  %36 = or i64 %35, 3399570305272141256
  %37 = xor i64 %35, -1
  %38 = and i64 3399570305272141256, %37
  %39 = add i64 %38, %35
  %40 = xor i64 %36, %29
  %41 = xor i64 %40, %39
  %42 = xor i64 %41, %27
  %43 = xor i64 %42, %34
  %44 = xor i64 %43, %31
  %45 = xor i64 %44, 5028418188786867898
  %46 = mul i64 %25, %45
  %47 = call i64 @h6542867261474098886(i64 %46)
  %48 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %47
  store i8* blockaddress(@main_loop.extracted.43.extracted, %51), i8** %48, align 8
  store i32 984876126, i32* %2, align 4
  %49 = call i8** @bf6338069988336422972(i32* %2)
  %50 = load i8*, i8** %49, align 8
  indirectbr i8* %50, [label %51]

51:                                               ; preds = %51, %newFuncRoot
  %52 = load i32, i32* %0, align 4
  %53 = getelementptr inbounds [53 x i32], [53 x i32]* %lookupTable, i32 0, i32 52
  %54 = load i32, i32* %53, align 4
  %55 = srem i32 %52, %54
  store i32 %55, i32* %dispatcher, align 4
  store i32 %1, i32* %.reg2mem173, align 4
  %56 = load i8*, i8** %4, align 8
  %57 = load i8, i8* %56, align 1
  %58 = and i64 %47, 6165261543699595714
  %59 = or i64 -6165261543699595715, %47
  %60 = sub i64 %59, -6165261543699595715
  %61 = and i64 %47, -8514131851634382062
  %62 = xor i64 %47, -1
  %63 = or i64 8514131851634382061, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = xor i64 %65, %61
  %67 = xor i64 %66, %60
  %68 = xor i64 %67, 454102071311200759
  %69 = xor i64 %68, %58
  %70 = add i64 %3, -916000567174816791
  %71 = sub i64 0, %3
  %72 = sub i64 -916000567174816791, %71
  %73 = add i64 %47, 7454781031677456950
  %74 = and i64 7454781031677456950, %47
  %75 = or i64 7454781031677456950, %47
  %76 = add i64 %74, %75
  %77 = or i64 %3, 3236916220313029542
  %78 = xor i64 %3, -1
  %79 = and i64 3236916220313029542, %78
  %80 = add i64 %79, %3
  %81 = xor i64 %70, %72
  %82 = xor i64 %81, %77
  %83 = xor i64 %82, %76
  %84 = xor i64 %83, %73
  %85 = xor i64 %84, %80
  %86 = xor i64 %85, -1497018654161092722
  %87 = mul i64 %69, %86
  %88 = trunc i64 %87 to i8
  %89 = mul i8 %57, %88
  %90 = mul i8 %57, 2
  %91 = sub i8 0, %90
  %92 = sub i8 2, %91
  %93 = mul i8 %89, %92
  %94 = add i64 %3, 4410111264652385580
  %95 = sub i64 0, %3
  %96 = sub i64 4410111264652385580, %95
  %97 = or i64 %47, 156813528190707184
  %98 = xor i64 %47, -1
  %99 = and i64 %98, -1188381544500627836
  %100 = and i64 %47, 1188381544500627835
  %101 = or i64 %99, %100
  %102 = xor i64 -1319809388191378572, %101
  %103 = xor i64 %47, -1
  %104 = or i64 -156813528190707185, %103
  %105 = xor i64 %104, -1
  %106 = and i64 %105, -1
  %107 = or i64 %102, %106
  %108 = sext i32 %1 to i64
  %109 = add i64 %108, 8973294207271786669
  %110 = sub i64 0, %108
  %111 = add i64 -8973294207271786669, %110
  %112 = sub i64 0, %111
  %113 = xor i64 %97, %109
  %114 = xor i64 %113, %112
  %115 = xor i64 %114, %107
  %116 = xor i64 %115, %96
  %117 = xor i64 %116, -3333349978224962211
  %118 = xor i64 %117, %94
  %119 = or i64 %47, 8830114139594428046
  %120 = xor i64 %47, -1
  %121 = and i64 %120, -2638945541600668715
  %122 = and i64 %47, 2638945541600668714
  %123 = or i64 %121, %122
  %124 = xor i64 -6779523807093416613, %123
  %125 = xor i64 %47, -1
  %126 = or i64 -8830114139594428047, %125
  %127 = xor i64 %126, -1
  %128 = and i64 %127, -1
  %129 = or i64 %124, %128
  %130 = add i64 %3, -5564541685962135902
  %131 = xor i64 -5564541685962135902, %3
  %132 = and i64 -5564541685962135902, %3
  %133 = mul i64 2, %132
  %134 = add i64 %131, %133
  %135 = xor i64 -7303954132489823276, %130
  %136 = xor i64 %135, %129
  %137 = xor i64 %136, %119
  %138 = xor i64 %137, %134
  %139 = mul i64 %118, %138
  %140 = trunc i64 %139 to i8
  %141 = srem i8 %93, %140
  %142 = sext i32 %1 to i64
  %143 = or i64 %142, 3680894534543240587
  %144 = xor i64 %142, -1
  %145 = and i64 %144, -9120703586531130619
  %146 = and i64 %142, 9120703586531130618
  %147 = or i64 %145, %146
  %148 = xor i64 -5586176049109127538, %147
  %149 = xor i64 %142, -1
  %150 = or i64 -3680894534543240588, %149
  %151 = xor i64 %150, -1
  %152 = and i64 %151, -1
  %153 = or i64 %148, %152
  %154 = and i64 %47, -3798160421022666389
  %155 = xor i64 %47, -1
  %156 = or i64 3798160421022666388, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = xor i64 4870696230812185391, %143
  %160 = xor i64 %159, %153
  %161 = xor i64 %160, %154
  %162 = xor i64 %161, %158
  %163 = or i64 %47, 4568616664649728562
  %164 = xor i64 %47, -1
  %165 = and i64 4568616664649728562, %164
  %166 = add i64 %165, %47
  %167 = and i64 %47, -8071912751087292213
  %168 = or i64 8071912751087292212, %47
  %169 = sub i64 %168, 8071912751087292212
  %170 = xor i64 %169, %163
  %171 = xor i64 %170, %167
  %172 = xor i64 %171, 0
  %173 = xor i64 %172, %166
  %174 = mul i64 %162, %173
  %175 = trunc i64 %174 to i8
  %176 = icmp eq i8 %141, %175
  %177 = mul i8 %57, %57
  %178 = mul i8 %177, %57
  %179 = add i8 %178, %57
  %180 = srem i8 %179, 2
  %181 = icmp eq i8 %180, 0
  %182 = and i1 %176, %181
  %183 = select i1 %182, i32 984876126, i32 984876102
  %184 = xor i32 %183, 24
  store i32 %184, i32* %2, align 4
  %185 = call i8** @bf6338069988336422972(i32* %2)
  %186 = load i8*, i8** %185, align 8
  indirectbr i8* %186, [label %loopEnd.exitStub.exitStub, label %51]

loopEnd.exitStub.exitStub:                        ; preds = %51
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.44.extracted() #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876106)
  %2 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.44.extracted, %loopEnd.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876099)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.44.extracted, %7), i8** %4, align 8
  store i32 984876099, i32* %0, align 4
  %5 = call i8** @bf6338069988336422972(i32* %0)
  %6 = load i8*, i8** %5, align 8
  indirectbr i8* %6, [label %7]

7:                                                ; preds = %7, %newFuncRoot
  %8 = load i8*, i8** %4, align 8
  %9 = load i8, i8* %8, align 1
  %10 = mul i8 %9, 2
  %11 = mul i8 %9, 2
  %12 = add i8 2, %11
  %13 = mul i8 %10, %12
  %14 = srem i8 %13, 4
  %15 = icmp eq i8 %14, 0
  %16 = mul i8 %9, %9
  %17 = xor i8 %16, %9
  %18 = and i8 %16, %9
  %19 = mul i8 2, %18
  %20 = add i8 %17, %19
  %21 = srem i8 %20, 2
  %22 = icmp eq i8 %21, 0
  %23 = or i1 %15, %22
  %24 = or i64 %3, -6635532634040358212
  %25 = and i64 -6635532634040358212, %3
  %26 = xor i64 -6635532634040358212, %3
  %27 = or i64 %25, %26
  %28 = or i64 %3, 5011746429950850902
  %29 = and i64 5011746429950850902, %3
  %30 = xor i64 5011746429950850902, %3
  %31 = or i64 %29, %30
  %32 = xor i64 -7589863051431233101, %28
  %33 = xor i64 %32, %31
  %34 = xor i64 %33, %27
  %35 = xor i64 %34, %24
  %36 = and i64 %3, 8916637219555267402
  %37 = or i64 -8916637219555267403, %3
  %38 = sub i64 %37, -8916637219555267403
  %39 = add i64 %1, 7915488241060556524
  %40 = xor i64 7915488241060556524, %1
  %41 = and i64 7915488241060556524, %1
  %42 = mul i64 2, %41
  %43 = add i64 %40, %42
  %44 = add i64 %3, 5030583076840963411
  %45 = add i64 -5522083439914988069, %3
  %46 = sub i64 %45, 7894077556953600136
  %47 = xor i64 -1371041696010689743, %46
  %48 = xor i64 %47, %44
  %49 = xor i64 %48, %36
  %50 = xor i64 %49, %38
  %51 = xor i64 %50, %39
  %52 = xor i64 %51, %43
  %53 = mul i64 %35, %52
  %54 = trunc i64 %53 to i32
  %55 = select i1 %23, i32 %54, i32 984876106
  %56 = xor i32 %55, 9
  store i32 %56, i32* %0, align 4
  %57 = call i8** @bf6338069988336422972(i32* %0)
  %58 = load i8*, i8** %57, align 8
  indirectbr i8* %58, [label %loopEnd.exitStub.exitStub, label %7]

loopEnd.exitStub.exitStub:                        ; preds = %7
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted(float %0, float* %.reg2mem4, float* %.reg2mem8, float* %.reg2mem11, [19 x i32]* %lookupTable, i32* %dispatcher, double* %.reg2mem49) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876137)
  %3 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable11119709064161687412, i32 0, i64 %2
  store i8* blockaddress(@inner_loop.extracted, %loopEnd.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876139)
  %5 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable11119709064161687412, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted, %codeRepl), i8** %5, align 8
  %6 = call i64 @h6542867261474098886(i64 984876136)
  %7 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable11119709064161687412, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted, %13), i8** %7, align 8
  %8 = alloca i64, align 8
  %9 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %10 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6864560605196664741, i32 0, i64 %9
  store i8* bitcast (void (i32*, i32, i32*, double*)* @inner_loop.extracted.extracted to i8*), i8** %10, align 8
  store i32 984876136, i32* %1, align 4
  %11 = call i8** @bf17851141059802040221(i32* %1)
  %12 = load i8*, i8** %11, align 8
  indirectbr i8* %12, [label %13]

13:                                               ; preds = %13, %newFuncRoot
  %14 = fpext float %0 to double
  %15 = call double @llvm.cos.f64(double %14)
  %16 = fptrunc double %15 to float
  store float %16, float* %.reg2mem4, align 4
  %17 = call double @llvm.sin.f64(double %14)
  %18 = fptrunc double %17 to float
  store float %18, float* %.reg2mem8, align 4
  %.reload7 = load float, float* %.reg2mem4, align 4
  %19 = fadd float %.reload7, 2.000000e+00
  store float %19, float* %.reg2mem11, align 4
  %20 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 5
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 3
  %23 = load i8*, i8** %5, align 8
  %24 = load i8, i8* %23, align 1
  %25 = mul i8 %24, 2
  %26 = mul i8 %24, 2
  %27 = xor i8 2, %26
  %28 = and i8 2, %26
  %29 = mul i8 2, %28
  %30 = add i8 %27, %29
  %31 = mul i8 39, %30
  %32 = add i8 23, %31
  %33 = mul i8 -105, %32
  %34 = add i8 111, %33
  %35 = mul i8 %25, %34
  %36 = srem i8 %35, 4
  %37 = add i64 %4, 7809639578478715452
  %38 = add i64 4752893458785207507, %4
  %39 = add i64 %38, 3056746119693507945
  %40 = and i64 %4, 8570114060885772680
  %41 = or i64 -8570114060885772681, %4
  %42 = sub i64 %41, -8570114060885772681
  %43 = and i64 %9, -1096703406859756014
  %44 = xor i64 %9, -1
  %45 = or i64 1096703406859756013, %44
  %46 = xor i64 %45, -1
  %47 = and i64 %46, -1
  %48 = xor i64 %40, %37
  %49 = xor i64 %48, %39
  %50 = xor i64 %49, %47
  %51 = xor i64 %50, %42
  %52 = xor i64 %51, 1795753552809528555
  %53 = xor i64 %52, %43
  %54 = add i64 %6, -2044157220198314439
  %55 = and i64 -2044157220198314439, %6
  %56 = or i64 -2044157220198314439, %6
  %57 = add i64 %55, %56
  %58 = or i64 %9, -1829883772802087791
  %59 = xor i64 %9, -1
  %60 = and i64 -1829883772802087791, %59
  %61 = add i64 %60, %9
  %62 = add i64 %9, 4811341210850575340
  %63 = add i64 2082772839712193426, %9
  %64 = sub i64 %63, -2728568371138381914
  %65 = xor i64 %54, %62
  %66 = xor i64 %65, %64
  %67 = xor i64 %66, %58
  %68 = xor i64 %67, 0
  %69 = xor i64 %68, %61
  %70 = xor i64 %69, %57
  %71 = mul i64 %53, %70
  %72 = trunc i64 %71 to i8
  %73 = icmp eq i8 %36, %72
  %74 = mul i8 %24, %24
  %75 = add i8 %74, %24
  %76 = srem i8 %75, 2
  %77 = icmp eq i8 %76, 0
  %78 = or i1 %73, %77
  %79 = select i1 %78, i32 984876139, i32 984876139
  %80 = xor i32 %79, -1
  %81 = and i32 %80, 0
  %82 = and i32 %79, -1
  %83 = or i32 %81, %82
  store i32 %83, i32* %1, align 4
  %84 = call i8** @bf17851141059802040221(i32* %1)
  %85 = load i8*, i8** %84, align 8
  indirectbr i8* %85, [label %codeRepl, label %13]

codeRepl:                                         ; preds = %codeRepl, %13
  %86 = or i64 %6, -2280901354538446570
  %87 = xor i64 %6, -1
  %88 = and i64 -2280901354538446570, %87
  %89 = add i64 %88, %6
  %90 = sext i8 %36 to i64
  %91 = and i64 %90, -7293578965913641320
  %92 = or i64 7293578965913641319, %90
  %93 = sub i64 %92, 7293578965913641319
  %94 = sext i8 %32 to i64
  %95 = add i64 %94, -621987938249233840
  %96 = xor i64 -621987938249233840, %94
  %97 = and i64 -621987938249233840, %94
  %98 = mul i64 2, %97
  %99 = add i64 %96, %98
  %100 = xor i64 %93, %91
  %101 = xor i64 %100, 7172568920480059529
  %102 = xor i64 %101, %95
  %103 = xor i64 %102, %86
  %104 = xor i64 %103, %99
  %105 = xor i64 %104, %89
  %106 = sext i8 %74 to i64
  %107 = add i64 %106, -1293578645984594330
  %108 = add i64 -9035738860550586386, %106
  %109 = sub i64 %108, -7742160214565992056
  %110 = add i64 %4, -6810414086736680634
  %111 = sub i64 0, %4
  %112 = sub i64 -6810414086736680634, %111
  %113 = xor i64 %110, %112
  %114 = xor i64 %113, %107
  %115 = xor i64 %114, %109
  %116 = xor i64 %115, -6612574716420521129
  %117 = mul i64 %105, %116
  store i64 %117, i64* %8, align 8
  %118 = call i8** @lk15015715335973622966(i64* %8)
  %119 = load i8*, i8** %118, align 8
  %120 = bitcast i8* %119 to void (i32*, i32, i32*, double*)*
  call void %120(i32* %22, i32 %21, i32* %dispatcher, double* %.reg2mem49)
  %121 = load i8*, i8** %3, align 8
  %122 = load i8, i8* %121, align 1
  %123 = xor i8 %122, -1
  %124 = or i8 %123, 1
  %125 = sext i8 %32 to i64
  %126 = add i64 %125, 5536428729939070129
  %127 = add i64 -7933344937922059439, %125
  %128 = add i64 %127, -4976970405848422048
  %129 = sext i8 %25 to i64
  %130 = and i64 %129, -6467050468234225564
  %131 = xor i64 %129, -1
  %132 = or i64 6467050468234225563, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = sext i32 %21 to i64
  %136 = and i64 %135, -229535024132079594
  %137 = xor i64 %135, -1
  %138 = or i64 229535024132079593, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = xor i64 %136, %126
  %142 = xor i64 %141, %130
  %143 = xor i64 %142, %128
  %144 = xor i64 %143, 7620162072623307677
  %145 = xor i64 %144, %140
  %146 = xor i64 %145, %134
  %147 = sext i32 %83 to i64
  %148 = add i64 %147, 2595312170705348111
  %149 = and i64 2595312170705348111, %147
  %150 = or i64 2595312170705348111, %147
  %151 = add i64 %149, %150
  %152 = add i64 %2, -6118419667785617272
  %153 = and i64 -6118419667785617272, %2
  %154 = or i64 -6118419667785617272, %2
  %155 = add i64 %153, %154
  %156 = sext i8 %28 to i64
  %157 = and i64 %156, 5405515239124603061
  %158 = or i64 -5405515239124603062, %156
  %159 = sub i64 %158, -5405515239124603062
  %160 = xor i64 %152, %159
  %161 = xor i64 %160, %151
  %162 = xor i64 %161, %157
  %163 = xor i64 %162, -3152136040931904949
  %164 = xor i64 %163, %155
  %165 = xor i64 %164, %148
  %166 = mul i64 %146, %165
  %167 = trunc i64 %166 to i8
  %168 = xor i8 %122, %167
  %169 = sub i8 %124, %168
  %170 = icmp eq i8 %169, 1
  %171 = mul i8 %122, %122
  %172 = add i8 %171, %122
  %173 = srem i8 %172, 2
  %174 = icmp eq i8 %173, 0
  %175 = or i1 %170, %174
  %176 = select i1 %175, i32 984876137, i32 984876137
  %177 = xor i32 %176, -1
  %178 = and i32 %177, 0
  %179 = and i32 %176, -1
  %180 = or i32 %178, %179
  store i32 %180, i32* %1, align 4
  %181 = call i8** @bf17851141059802040221(i32* %1)
  %182 = load i8*, i8** %181, align 8
  indirectbr i8* %182, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.45([19 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876138)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13306541676709936060, i32 0, i64 %1
  store i8* blockaddress(@inner_loop.extracted.45, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13306541676709936060, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted.45, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876137)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13306541676709936060, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.45, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6670628566329903666, i32 0, i64 %8
  store i8* bitcast (void (i32*, [19 x i32]*, i32*)* @inner_loop.extracted.45.extracted to i8*), i8** %9, align 8
  store i32 984876137, i32* %0, align 4
  %10 = call i8** @bf8213767146710455205(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 12
  %14 = load i8*, i8** %2, align 8
  %15 = load i8, i8* %14, align 1
  %16 = mul i8 %15, 2
  %17 = mul i8 %15, 2
  %18 = sub i8 0, %17
  %19 = add i8 -2, %18
  %20 = and i64 %1, -713264022656102861
  %21 = or i64 713264022656102860, %1
  %22 = sub i64 %21, 713264022656102860
  %23 = add i64 %3, -1303926022860718888
  %24 = xor i64 -1303926022860718888, %3
  %25 = and i64 -1303926022860718888, %3
  %26 = mul i64 2, %25
  %27 = add i64 %24, %26
  %28 = and i64 %1, 5665935579862327118
  %29 = xor i64 %1, -1
  %30 = xor i64 5665935579862327118, %29
  %31 = and i64 %30, 5665935579862327118
  %32 = xor i64 %27, %31
  %33 = xor i64 %32, %22
  %34 = xor i64 %33, %20
  %35 = xor i64 %34, %28
  %36 = xor i64 %35, 2009347447048717507
  %37 = xor i64 %36, %23
  %38 = and i64 %8, -2077889391860132455
  %39 = xor i64 %8, -1
  %40 = xor i64 -2077889391860132455, %39
  %41 = and i64 %40, -2077889391860132455
  %42 = add i64 %5, 3633303361129965153
  %43 = add i64 4448136996756310548, %5
  %44 = sub i64 %43, 814833635626345395
  %45 = xor i64 %42, %38
  %46 = xor i64 %45, 0
  %47 = xor i64 %46, %41
  %48 = xor i64 %47, %44
  %49 = mul i64 %37, %48
  %50 = trunc i64 %49 to i8
  %51 = sub i8 %50, %19
  %52 = mul i8 %16, %51
  %53 = srem i8 %52, 4
  %54 = icmp eq i8 %53, 0
  %55 = mul i8 %15, %15
  %56 = mul i8 %55, %15
  %57 = add i8 %56, %15
  %58 = srem i8 %57, 2
  %59 = icmp eq i8 %58, 0
  %60 = xor i1 %54, true
  %61 = or i1 %60, %59
  %62 = xor i1 %54, true
  %63 = sub i1 %61, %62
  %64 = and i64 %5, 2945216498688382675
  %65 = or i64 -2945216498688382676, %5
  %66 = sub i64 %65, -2945216498688382676
  %67 = or i64 %3, -8191737048297296290
  %68 = and i64 -8191737048297296290, %3
  %69 = xor i64 -8191737048297296290, %3
  %70 = or i64 %68, %69
  %71 = and i64 %1, 8971281144100993276
  %72 = xor i64 %1, -1
  %73 = or i64 -8971281144100993277, %72
  %74 = xor i64 %73, -1
  %75 = and i64 %74, -1
  %76 = xor i64 %66, %64
  %77 = xor i64 %76, %71
  %78 = xor i64 %77, %67
  %79 = xor i64 %78, %75
  %80 = xor i64 %79, -8894376665057025535
  %81 = xor i64 %80, %70
  %82 = and i64 %5, -888420360393448780
  %83 = xor i64 %5, -1
  %84 = xor i64 -888420360393448780, %83
  %85 = and i64 %84, -888420360393448780
  %86 = add i64 %3, -2618749586986561532
  %87 = add i64 5661085970946068271, %3
  %88 = add i64 %87, -8279835557932629803
  %89 = xor i64 %88, %85
  %90 = xor i64 %89, %82
  %91 = xor i64 %90, -2146367194121613717
  %92 = xor i64 %91, %86
  %93 = mul i64 %81, %92
  %94 = trunc i64 %93 to i32
  %95 = select i1 %63, i32 %94, i32 984876139
  %96 = xor i32 %95, 0
  store i32 %96, i32* %0, align 4
  %97 = call i8** @bf8213767146710455205(i32* %0)
  %98 = load i8*, i8** %97, align 8
  indirectbr i8* %98, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %99 = call i8** @lk8071742946585926715(i64* %7)
  %100 = load i8*, i8** %99, align 8
  %101 = bitcast i8* %100 to void (i32*, [19 x i32]*, i32*)*
  call void %101(i32* %13, [19 x i32]* %lookupTable, i32* %dispatcher)
  %102 = load i8*, i8** %4, align 8
  %103 = load i8, i8* %102, align 1
  %104 = xor i8 %103, -2
  %105 = and i8 %104, %103
  %106 = icmp eq i8 %105, 0
  %107 = mul i8 %103, %103
  %108 = add i8 %107, %103
  %109 = mul i8 %108, 3
  %110 = srem i8 %109, 2
  %111 = icmp eq i8 %110, 0
  %112 = or i1 %106, %111
  %113 = select i1 %112, i32 984876139, i32 984876138
  %114 = xor i32 %113, -1
  %115 = sext i8 %58 to i64
  %116 = and i64 %115, 7190957965199810337
  %117 = or i64 -7190957965199810338, %115
  %118 = sub i64 %117, -7190957965199810338
  %119 = add i64 %8, 6487053709301247930
  %120 = sub i64 0, %8
  %121 = sub i64 6487053709301247930, %120
  %122 = xor i64 %119, %116
  %123 = xor i64 %122, %118
  %124 = xor i64 %123, %121
  %125 = xor i64 %124, -366346497694589403
  %126 = sext i8 %55 to i64
  %127 = add i64 %126, -4061492021260520334
  %128 = and i64 -4061492021260520334, %126
  %129 = or i64 -4061492021260520334, %126
  %130 = add i64 %128, %129
  %131 = or i64 %8, 5816292946647470230
  %132 = and i64 5816292946647470230, %8
  %133 = xor i64 5816292946647470230, %8
  %134 = or i64 %132, %133
  %135 = and i64 %8, 1326289428461757270
  %136 = xor i64 %8, -1
  %137 = or i64 -1326289428461757271, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = xor i64 %134, %127
  %141 = xor i64 %140, %139
  %142 = xor i64 %141, %131
  %143 = xor i64 %142, %130
  %144 = xor i64 %143, -5221084481475031635
  %145 = xor i64 %144, %135
  %146 = mul i64 %125, %145
  %147 = trunc i64 %146 to i32
  %148 = and i32 %114, %147
  %149 = add i64 %5, -6779079926185609246
  %150 = and i64 -6779079926185609246, %5
  %151 = or i64 -6779079926185609246, %5
  %152 = add i64 %150, %151
  %153 = sext i8 %53 to i64
  %154 = and i64 %153, -7180544931253824207
  %155 = or i64 7180544931253824206, %153
  %156 = sub i64 %155, 7180544931253824206
  %157 = xor i64 %152, -6131948324218616305
  %158 = xor i64 %157, %154
  %159 = xor i64 %158, %156
  %160 = xor i64 %159, %149
  %161 = sext i8 %53 to i64
  %162 = and i64 %161, 7354672066148781865
  %163 = xor i64 %161, -1
  %164 = or i64 -7354672066148781866, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = sext i8 %51 to i64
  %168 = add i64 %167, -8189635880114406506
  %169 = add i64 3142304279970248752, %167
  %170 = add i64 %169, 7114803913624896358
  %171 = add i64 %1, 4322181309280180302
  %172 = xor i64 4322181309280180302, %1
  %173 = and i64 4322181309280180302, %1
  %174 = mul i64 2, %173
  %175 = add i64 %172, %174
  %176 = xor i64 %166, %170
  %177 = xor i64 %176, %171
  %178 = xor i64 %177, 2312480115470839330
  %179 = xor i64 %178, %162
  %180 = xor i64 %179, %168
  %181 = xor i64 %180, %175
  %182 = mul i64 %160, %181
  %183 = trunc i64 %182 to i32
  %184 = and i32 %113, %183
  %185 = or i32 %148, %184
  store i32 %185, i32* %0, align 4
  %186 = call i8** @bf8213767146710455205(i32* %0)
  %187 = load i8*, i8** %186, align 8
  indirectbr i8* %187, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.46([19 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9864388630873030894, i32 0, i64 %1
  store i8* blockaddress(@inner_loop.extracted.46, %loopEnd.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876136)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9864388630873030894, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted.46, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876139)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9864388630873030894, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.46, %12), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5994868871536864535, i32 0, i64 %8
  store i8* bitcast (void (i32, i32*)* @inner_loop.extracted.46.extracted to i8*), i8** %9, align 8
  store i32 984876139, i32* %0, align 4
  %10 = call i8** @bf9302465224130596104(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %12]

12:                                               ; preds = %12, %newFuncRoot
  %13 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 8
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 0, %14
  %18 = sub i32 0, %16
  %19 = add i32 %17, %18
  %20 = add i64 %1, -5558096359968343908
  %21 = sub i64 0, %1
  %22 = add i64 5558096359968343908, %21
  %23 = sub i64 0, %22
  %24 = and i64 %1, -1474875325819112045
  %25 = xor i64 %1, -1
  %26 = or i64 1474875325819112044, %25
  %27 = xor i64 %26, -1
  %28 = and i64 %27, -1
  %29 = xor i64 %24, %20
  %30 = xor i64 %29, 5854569794412009185
  %31 = xor i64 %30, %23
  %32 = xor i64 %31, %28
  %33 = and i64 %5, 7784196475795498013
  %34 = or i64 -7784196475795498014, %5
  %35 = sub i64 %34, -7784196475795498014
  %36 = add i64 %3, -2561534477530899338
  %37 = add i64 9213088465545711088, %3
  %38 = sub i64 %37, -6672121130632941190
  %39 = xor i64 0, %36
  %40 = xor i64 %39, %33
  %41 = xor i64 %40, %38
  %42 = xor i64 %41, %35
  %43 = mul i64 %32, %42
  %44 = trunc i64 %43 to i32
  %45 = sub i32 %44, %19
  %46 = load i8*, i8** %2, align 8
  %47 = load i8, i8* %46, align 1
  %48 = mul i8 %47, 2
  %49 = mul i8 %47, 2
  %50 = add i8 2, %49
  %51 = mul i8 %48, %50
  %52 = srem i8 %51, 4
  %53 = icmp eq i8 %52, 0
  %54 = mul i8 %47, %47
  %55 = and i8 %54, %47
  %56 = or i8 %54, %47
  %57 = add i8 %55, %56
  %58 = srem i8 %57, 2
  %59 = icmp eq i8 %58, 0
  %60 = and i1 %53, %59
  %61 = select i1 %60, i32 984876136, i32 984876136
  %62 = xor i32 %61, 0
  store i32 %62, i32* %0, align 4
  %63 = call i8** @bf9302465224130596104(i32* %0)
  %64 = load i8*, i8** %63, align 8
  indirectbr i8* %64, [label %codeRepl, label %12]

codeRepl:                                         ; preds = %codeRepl, %12
  store i64 4070807658626890127, i64* %7, align 8
  %65 = call i8** @lk2567203579303046852(i64* %7)
  %66 = load i8*, i8** %65, align 8
  %67 = bitcast i8* %66 to void (i32, i32*)*
  call void %67(i32 %45, i32* %dispatcher)
  %68 = load i8*, i8** %6, align 8
  %69 = load i8, i8* %68, align 1
  %70 = mul i8 %69, 2
  %71 = or i64 %1, -3512015007644590866
  %72 = and i64 -3512015007644590866, %1
  %73 = xor i64 -3512015007644590866, %1
  %74 = or i64 %72, %73
  %75 = sext i32 %16 to i64
  %76 = add i64 %75, -3017887868401501072
  %77 = and i64 -3017887868401501072, %75
  %78 = or i64 -3017887868401501072, %75
  %79 = add i64 %77, %78
  %80 = sext i32 %14 to i64
  %81 = or i64 %80, 686160583126105884
  %82 = xor i64 %80, -1
  %83 = and i64 %82, 6553342754903212914
  %84 = and i64 %80, -6553342754903212915
  %85 = or i64 %83, %84
  %86 = xor i64 6014449453803109486, %85
  %87 = xor i64 %80, -1
  %88 = or i64 -686160583126105885, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = or i64 %86, %90
  %92 = xor i64 %76, %71
  %93 = xor i64 %92, %91
  %94 = xor i64 %93, %81
  %95 = xor i64 %94, %74
  %96 = xor i64 %95, %79
  %97 = xor i64 %96, -6600402056869580941
  %98 = sext i32 %45 to i64
  %99 = add i64 %98, 1480775163438289373
  %100 = xor i64 1480775163438289373, %98
  %101 = and i64 1480775163438289373, %98
  %102 = mul i64 2, %101
  %103 = add i64 %100, %102
  %104 = add i64 %5, 7625553722266191259
  %105 = add i64 4621234950242945646, %5
  %106 = add i64 %105, 3004318772023245613
  %107 = xor i64 %106, %103
  %108 = xor i64 %107, %99
  %109 = xor i64 %108, %104
  %110 = xor i64 %109, -4795848243459155082
  %111 = mul i64 %97, %110
  %112 = trunc i64 %111 to i8
  %113 = mul i8 %69, %112
  %114 = add i8 2, %113
  %115 = mul i8 %70, %114
  %116 = srem i8 %115, 4
  %117 = icmp eq i8 %116, 0
  %118 = mul i8 %69, %69
  %119 = mul i8 %118, %69
  %120 = xor i8 %119, %69
  %121 = and i8 %119, %69
  %122 = and i64 %1, 6782781190419186013
  %123 = or i64 -6782781190419186014, %1
  %124 = sub i64 %123, -6782781190419186014
  %125 = sext i8 %51 to i64
  %126 = add i64 %125, 2058021712674316914
  %127 = sub i64 0, %125
  %128 = add i64 -2058021712674316914, %127
  %129 = sub i64 0, %128
  %130 = xor i64 %124, %122
  %131 = xor i64 %130, %126
  %132 = xor i64 %131, %129
  %133 = xor i64 %132, 8135497127042648161
  %134 = sext i8 %58 to i64
  %135 = or i64 %134, -872393252500495451
  %136 = xor i64 %134, -1
  %137 = and i64 -872393252500495451, %136
  %138 = add i64 %137, %134
  %139 = add i64 %3, 1284953988602930873
  %140 = xor i64 1284953988602930873, %3
  %141 = and i64 1284953988602930873, %3
  %142 = mul i64 2, %141
  %143 = add i64 %140, %142
  %144 = sext i8 %51 to i64
  %145 = or i64 %144, -2102561872600653356
  %146 = and i64 -2102561872600653356, %144
  %147 = xor i64 -2102561872600653356, %144
  %148 = or i64 %146, %147
  %149 = xor i64 8807247321455933250, %143
  %150 = xor i64 %149, %148
  %151 = xor i64 %150, %135
  %152 = xor i64 %151, %145
  %153 = xor i64 %152, %138
  %154 = xor i64 %153, %139
  %155 = mul i64 %133, %154
  %156 = trunc i64 %155 to i8
  %157 = mul i8 %156, %121
  %158 = add i8 %120, %157
  %159 = srem i8 %158, 2
  %160 = icmp eq i8 %159, 0
  %161 = and i1 %117, %160
  %162 = select i1 %161, i32 984876137, i32 984876137
  %163 = xor i32 %162, 0
  store i32 %163, i32* %0, align 4
  %164 = call i8** @bf9302465224130596104(i32* %0)
  %165 = load i8*, i8** %164, align 8
  indirectbr i8* %165, [label %loopEnd.exitStub, label %codeRepl]

loopEnd.exitStub:                                 ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.BogusBasicBlock([19 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %0 = alloca i32, align 4
  %1 = call i64 @h6542867261474098886(i64 984876137)
  %2 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6614939931088871305, i32 0, i64 %1
  store i8* blockaddress(@inner_loop.BogusBasicBlock, %EntryBasicBlockSplit.exitStub), i8** %2, align 8
  %3 = call i64 @h6542867261474098886(i64 984876139)
  %4 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6614939931088871305, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.BogusBasicBlock, %codeRepl), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876138)
  %6 = getelementptr [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6614939931088871305, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.BogusBasicBlock, %BogusBasicBlock), i8** %6, align 8
  %7 = alloca i64, align 8
  %8 = call i64 @m4181846979565521366(i64 4070807658626890127)
  %9 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1786965691037181812, i32 0, i64 %8
  store i8* bitcast (void (i32, i32*)* @inner_loop.BogusBasicBlock.extracted to i8*), i8** %9, align 8
  store i32 984876138, i32* %0, align 4
  %10 = call i8** @bf9847471633196389420(i32* %0)
  %11 = load i8*, i8** %10, align 8
  indirectbr i8* %11, [label %BogusBasicBlock]

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %newFuncRoot
  %12 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %12, align 4
  %13 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %13, align 4
  %14 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 4
  %15 = add i64 %3, 5467270360138033174
  %16 = sub i64 0, %3
  %17 = sub i64 5467270360138033174, %16
  %18 = or i64 %3, 3295497694762848814
  %19 = and i64 3295497694762848814, %3
  %20 = xor i64 3295497694762848814, %3
  %21 = or i64 %19, %20
  %22 = xor i64 %21, -4391812265273977333
  %23 = xor i64 %22, %17
  %24 = xor i64 %23, %15
  %25 = xor i64 %24, %18
  %26 = and i64 %3, -3258848558018718907
  %27 = xor i64 %3, -1
  %28 = or i64 3258848558018718906, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = or i64 %3, 2787209506498144844
  %32 = xor i64 %3, -1
  %33 = and i64 %32, 3769526758289996222
  %34 = and i64 %3, -3769526758289996223
  %35 = or i64 %33, %34
  %36 = xor i64 1368571855528367090, %35
  %37 = xor i64 %3, -1
  %38 = or i64 -2787209506498144845, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = or i64 %36, %40
  %42 = or i64 %1, 2486747767320989358
  %43 = xor i64 %1, -1
  %44 = and i64 2486747767320989358, %43
  %45 = add i64 %44, %1
  %46 = xor i64 %31, %26
  %47 = xor i64 %46, %30
  %48 = xor i64 %47, %41
  %49 = xor i64 %48, %42
  %50 = xor i64 %49, 6468211948497260777
  %51 = xor i64 %50, %45
  %52 = mul i64 %25, %51
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %14, align 4
  %54 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %54, align 4
  %55 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %55, align 4
  %56 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 10
  %57 = add i64 %3, -7958431650970591798
  %58 = sub i64 0, %3
  %59 = add i64 7958431650970591798, %58
  %60 = sub i64 0, %59
  %61 = and i64 %5, 7695001823366119782
  %62 = xor i64 %5, -1
  %63 = or i64 -7695001823366119783, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = xor i64 %65, -3859599977191994485
  %67 = xor i64 %66, %60
  %68 = xor i64 %67, %61
  %69 = xor i64 %68, %57
  %70 = and i64 %8, 8484126856776864260
  %71 = xor i64 %8, -1
  %72 = or i64 -8484126856776864261, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = and i64 %1, -9034914881847335630
  %76 = xor i64 %1, -1
  %77 = xor i64 -9034914881847335630, %76
  %78 = and i64 %77, -9034914881847335630
  %79 = xor i64 8489464082310194491, %74
  %80 = xor i64 %79, %75
  %81 = xor i64 %80, %70
  %82 = xor i64 %81, %78
  %83 = mul i64 %69, %82
  %84 = trunc i64 %83 to i32
  store i32 %84, i32* %56, align 4
  %85 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %85, align 4
  %86 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %86, align 4
  %87 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %87, align 4
  %88 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %88, align 4
  %89 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = load i8*, i8** %2, align 8
  %92 = load i8, i8* %91, align 1
  %93 = xor i8 %92, -2
  %94 = and i8 %93, %92
  %95 = add i64 %3, -461036843110717008
  %96 = sub i64 0, %3
  %97 = add i64 461036843110717008, %96
  %98 = sub i64 0, %97
  %99 = or i64 %5, -5898494303661700771
  %100 = xor i64 %5, -1
  %101 = and i64 -5898494303661700771, %100
  %102 = add i64 %101, %5
  %103 = or i64 %5, -6396311594615284262
  %104 = xor i64 %5, -1
  %105 = and i64 -6396311594615284262, %104
  %106 = add i64 %105, %5
  %107 = xor i64 %95, %99
  %108 = xor i64 %107, %102
  %109 = xor i64 %108, %106
  %110 = xor i64 %109, %98
  %111 = xor i64 %110, -844630529802808079
  %112 = xor i64 %111, %103
  %113 = add i64 %8, -4405431843542019506
  %114 = and i64 -4405431843542019506, %8
  %115 = or i64 -4405431843542019506, %8
  %116 = add i64 %114, %115
  %117 = and i64 %5, -3237100448617627314
  %118 = xor i64 %5, -1
  %119 = xor i64 -3237100448617627314, %118
  %120 = and i64 %119, -3237100448617627314
  %121 = add i64 %1, -359116005644096219
  %122 = sub i64 0, %1
  %123 = add i64 359116005644096219, %122
  %124 = sub i64 0, %123
  %125 = xor i64 %121, %113
  %126 = xor i64 %125, 0
  %127 = xor i64 %126, %116
  %128 = xor i64 %127, %117
  %129 = xor i64 %128, %120
  %130 = xor i64 %129, %124
  %131 = mul i64 %112, %130
  %132 = trunc i64 %131 to i8
  %133 = icmp eq i8 %94, %132
  %134 = mul i8 %92, %92
  %135 = add i8 %134, %92
  %136 = mul i8 %135, 3
  %137 = srem i8 %136, 2
  %138 = icmp eq i8 %137, 0
  %139 = or i1 %133, %138
  %140 = add i64 %1, -8329344510047230664
  %141 = xor i64 -8329344510047230664, %1
  %142 = and i64 -8329344510047230664, %1
  %143 = mul i64 2, %142
  %144 = add i64 %141, %143
  %145 = or i64 %5, 2502504054993032293
  %146 = xor i64 %5, -1
  %147 = and i64 2502504054993032293, %146
  %148 = add i64 %147, %5
  %149 = and i64 %3, -6469231147422252135
  %150 = or i64 6469231147422252134, %3
  %151 = sub i64 %150, 6469231147422252134
  %152 = xor i64 -2092500044070228729, %151
  %153 = xor i64 %152, %144
  %154 = xor i64 %153, %140
  %155 = xor i64 %154, %145
  %156 = xor i64 %155, %148
  %157 = xor i64 %156, %149
  %158 = and i64 %5, -229250069932249476
  %159 = xor i64 %5, -1
  %160 = xor i64 -229250069932249476, %159
  %161 = and i64 %160, -229250069932249476
  %162 = and i64 %5, -8987892799599348615
  %163 = xor i64 %5, -1
  %164 = or i64 8987892799599348614, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = and i64 %3, -4124759048771733378
  %168 = xor i64 %3, -1
  %169 = xor i64 -4124759048771733378, %168
  %170 = and i64 %169, -4124759048771733378
  %171 = xor i64 %161, 5909616596069521167
  %172 = xor i64 %171, %162
  %173 = xor i64 %172, %158
  %174 = xor i64 %173, %167
  %175 = xor i64 %174, %166
  %176 = xor i64 %175, %170
  %177 = mul i64 %157, %176
  %178 = trunc i64 %177 to i32
  %179 = select i1 %139, i32 %178, i32 984876139
  %180 = or i64 %1, -1692402695102387088
  %181 = xor i64 %1, -1
  %182 = and i64 %181, -7841579639895989860
  %183 = and i64 %1, 7841579639895989859
  %184 = or i64 %182, %183
  %185 = xor i64 8912197507381087724, %184
  %186 = xor i64 %1, -1
  %187 = or i64 1692402695102387087, %186
  %188 = xor i64 %187, -1
  %189 = and i64 %188, -1
  %190 = or i64 %185, %189
  %191 = or i64 %8, -2897021967308024716
  %192 = xor i64 %8, -1
  %193 = and i64 -2897021967308024716, %192
  %194 = add i64 %193, %8
  %195 = and i64 %1, -3922271656772559441
  %196 = or i64 3922271656772559440, %1
  %197 = sub i64 %196, 3922271656772559440
  %198 = xor i64 %191, %197
  %199 = xor i64 %198, %180
  %200 = xor i64 %199, 582035398439092605
  %201 = xor i64 %200, %190
  %202 = xor i64 %201, %194
  %203 = xor i64 %202, %195
  %204 = and i64 %5, 1298607490198872940
  %205 = xor i64 %5, -1
  %206 = xor i64 1298607490198872940, %205
  %207 = and i64 %206, 1298607490198872940
  %208 = or i64 %8, 7649837800467260815
  %209 = and i64 7649837800467260815, %8
  %210 = xor i64 7649837800467260815, %8
  %211 = or i64 %209, %210
  %212 = xor i64 %211, %208
  %213 = xor i64 %212, 1249565388222103466
  %214 = xor i64 %213, %204
  %215 = xor i64 %214, %207
  %216 = mul i64 %203, %215
  %217 = trunc i64 %216 to i32
  %218 = xor i32 %179, %217
  store i32 %218, i32* %0, align 4
  %219 = call i8** @bf9847471633196389420(i32* %0)
  %220 = load i8*, i8** %219, align 8
  indirectbr i8* %220, [label %codeRepl, label %BogusBasicBlock]

codeRepl:                                         ; preds = %codeRepl, %BogusBasicBlock
  %221 = sext i32 %218 to i64
  %222 = and i64 %221, 676075093936219163
  %223 = xor i64 %221, -1
  %224 = or i64 -676075093936219164, %223
  %225 = xor i64 %224, -1
  %226 = and i64 %225, -1
  %227 = or i64 %3, 1374860763726411804
  %228 = xor i64 %3, -1
  %229 = and i64 %228, 6210805115843780571
  %230 = and i64 %3, -6210805115843780572
  %231 = or i64 %229, %230
  %232 = xor i64 4982470803703785415, %231
  %233 = xor i64 %3, -1
  %234 = or i64 -1374860763726411805, %233
  %235 = xor i64 %234, -1
  %236 = and i64 %235, -1
  %237 = or i64 %232, %236
  %238 = xor i64 %237, %226
  %239 = xor i64 %238, -850230153485733249
  %240 = xor i64 %239, %222
  %241 = xor i64 %240, %227
  %242 = sext i8 %134 to i64
  %243 = or i64 %242, 1820754846799078527
  %244 = xor i64 %242, -1
  %245 = and i64 1820754846799078527, %244
  %246 = add i64 %245, %242
  %247 = sext i8 %94 to i64
  %248 = add i64 %247, 674135575587744690
  %249 = sub i64 0, %247
  %250 = sub i64 674135575587744690, %249
  %251 = sext i8 %136 to i64
  %252 = and i64 %251, 3651357149157544088
  %253 = xor i64 %251, -1
  %254 = xor i64 3651357149157544088, %253
  %255 = and i64 %254, 3651357149157544088
  %256 = xor i64 %255, %252
  %257 = xor i64 %256, -2660178053107658511
  %258 = xor i64 %257, %250
  %259 = xor i64 %258, %246
  %260 = xor i64 %259, %243
  %261 = xor i64 %260, %248
  %262 = mul i64 %241, %261
  store i64 %262, i64* %7, align 8
  %263 = call i8** @lk12700749691518738181(i64* %7)
  %264 = load i8*, i8** %263, align 8
  %265 = bitcast i8* %264 to void (i32, i32*)*
  call void %265(i32 %90, i32* %dispatcher)
  %266 = load i8*, i8** %4, align 8
  %267 = load i8, i8* %266, align 1
  %268 = mul i8 %267, 2
  %269 = mul i8 %267, 2
  %270 = sext i32 %218 to i64
  %271 = add i64 %270, -9153842492929120364
  %272 = xor i64 -9153842492929120364, %270
  %273 = and i64 -9153842492929120364, %270
  %274 = mul i64 2, %273
  %275 = add i64 %272, %274
  %276 = sext i8 %135 to i64
  %277 = and i64 %276, 8957223403131524265
  %278 = xor i64 %276, -1
  %279 = xor i64 8957223403131524265, %278
  %280 = and i64 %279, 8957223403131524265
  %281 = and i64 %8, 3753613386933262631
  %282 = xor i64 %8, -1
  %283 = xor i64 3753613386933262631, %282
  %284 = and i64 %283, 3753613386933262631
  %285 = xor i64 702921241860178255, %280
  %286 = xor i64 %285, %284
  %287 = xor i64 %286, %277
  %288 = xor i64 %287, %275
  %289 = xor i64 %288, %281
  %290 = xor i64 %289, %271
  %291 = sext i8 %94 to i64
  %292 = add i64 %291, 8724855134290484872
  %293 = and i64 8724855134290484872, %291
  %294 = or i64 8724855134290484872, %291
  %295 = add i64 %293, %294
  %296 = sext i8 %135 to i64
  %297 = add i64 %296, 9095807146261932503
  %298 = add i64 -4490696790944550374, %296
  %299 = sub i64 %298, 4860240136503068739
  %300 = sext i8 %92 to i64
  %301 = or i64 %300, -2494065936693051904
  %302 = xor i64 %300, -1
  %303 = and i64 %302, 5112712795615179279
  %304 = and i64 %300, -5112712795615179280
  %305 = or i64 %303, %304
  %306 = xor i64 -7235229555429045233, %305
  %307 = xor i64 %300, -1
  %308 = or i64 2494065936693051903, %307
  %309 = xor i64 %308, -1
  %310 = and i64 %309, -1
  %311 = or i64 %306, %310
  %312 = xor i64 6765555703620234078, %311
  %313 = xor i64 %312, %299
  %314 = xor i64 %313, %295
  %315 = xor i64 %314, %297
  %316 = xor i64 %315, %292
  %317 = xor i64 %316, %301
  %318 = mul i64 %290, %317
  %319 = trunc i64 %318 to i8
  %320 = add i8 %319, %269
  %321 = mul i8 %268, %320
  %322 = srem i8 %321, 4
  %323 = icmp eq i8 %322, 0
  %324 = mul i8 %267, %267
  %325 = mul i8 %324, %267
  %326 = add i8 %325, %267
  %327 = srem i8 %326, 2
  %328 = icmp eq i8 %327, 0
  %329 = and i1 %323, %328
  %330 = and i64 %5, -3402107157357509145
  %331 = xor i64 %5, -1
  %332 = xor i64 -3402107157357509145, %331
  %333 = and i64 %332, -3402107157357509145
  %334 = add i64 %8, 2372308463179169880
  %335 = sub i64 0, %8
  %336 = add i64 -2372308463179169880, %335
  %337 = sub i64 0, %336
  %338 = sext i8 %136 to i64
  %339 = or i64 %338, -8897600482705557700
  %340 = and i64 -8897600482705557700, %338
  %341 = xor i64 -8897600482705557700, %338
  %342 = or i64 %340, %341
  %343 = xor i64 %333, %337
  %344 = xor i64 %343, 3307554328410844317
  %345 = xor i64 %344, %339
  %346 = xor i64 %345, %330
  %347 = xor i64 %346, %334
  %348 = xor i64 %347, %342
  %349 = add i64 %8, 5062264080849644547
  %350 = sub i64 0, %8
  %351 = sub i64 5062264080849644547, %350
  %352 = sext i32 %218 to i64
  %353 = or i64 %352, -5753211157710983959
  %354 = and i64 -5753211157710983959, %352
  %355 = xor i64 -5753211157710983959, %352
  %356 = or i64 %354, %355
  %357 = xor i64 1065665848678299890, %349
  %358 = xor i64 %357, %351
  %359 = xor i64 %358, %356
  %360 = xor i64 %359, %353
  %361 = mul i64 %348, %360
  %362 = trunc i64 %361 to i32
  %363 = and i64 %3, 744524888807351484
  %364 = xor i64 %3, -1
  %365 = or i64 -744524888807351485, %364
  %366 = xor i64 %365, -1
  %367 = and i64 %366, -1
  %368 = sext i8 %136 to i64
  %369 = or i64 %368, -6236306569637080524
  %370 = and i64 -6236306569637080524, %368
  %371 = xor i64 -6236306569637080524, %368
  %372 = or i64 %370, %371
  %373 = sext i32 %218 to i64
  %374 = add i64 %373, -6060421759062834514
  %375 = add i64 -6620902749963862939, %373
  %376 = sub i64 %375, -560480990901028425
  %377 = xor i64 %367, %363
  %378 = xor i64 %377, %374
  %379 = xor i64 %378, %376
  %380 = xor i64 %379, %369
  %381 = xor i64 %380, -4129363792164193073
  %382 = xor i64 %381, %372
  %383 = sext i8 %136 to i64
  %384 = add i64 %383, -747268582868923537
  %385 = and i64 -747268582868923537, %383
  %386 = or i64 -747268582868923537, %383
  %387 = add i64 %385, %386
  %388 = or i64 %8, 5893899451700242596
  %389 = xor i64 %8, -1
  %390 = and i64 5893899451700242596, %389
  %391 = add i64 %390, %8
  %392 = xor i64 %387, %384
  %393 = xor i64 %392, 6639250428481431879
  %394 = xor i64 %393, %388
  %395 = xor i64 %394, %391
  %396 = mul i64 %382, %395
  %397 = trunc i64 %396 to i32
  %398 = select i1 %329, i32 %362, i32 %397
  %399 = xor i32 %398, 3
  store i32 %399, i32* %0, align 4
  %400 = call i8** @bf9847471633196389420(i32* %0)
  %401 = load i8*, i8** %400, align 8
  indirectbr i8* %401, [label %EntryBasicBlockSplit.exitStub, label %codeRepl]

EntryBasicBlockSplit.exitStub:                    ; preds = %codeRepl
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.extracted(i32* %0, i32 %1, i32* %dispatcher, double* %.reg2mem49) #1 {
newFuncRoot:
  %2 = alloca i32, align 4
  %3 = call i64 @h6542867261474098886(i64 984876108)
  %4 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted.extracted, %loopEnd.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h6542867261474098886(i64 984876128)
  %6 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.extracted, %9), i8** %6, align 8
  store i32 984876128, i32* %2, align 4
  %7 = call i8** @bf6338069988336422972(i32* %2)
  %8 = load i8*, i8** %7, align 8
  indirectbr i8* %8, [label %9]

9:                                                ; preds = %9, %newFuncRoot
  %10 = load i32, i32* %0, align 4
  %11 = sub i32 %1, 1748293311
  %12 = add i32 %11, %10
  %13 = add i32 %12, 1748293311
  store i32 %13, i32* %dispatcher, align 4
  store double 0.000000e+00, double* %.reg2mem49, align 8
  %14 = load i8*, i8** %4, align 8
  %15 = load i8, i8* %14, align 1
  %16 = mul i8 %15, 2
  %17 = mul i8 %15, 2
  %18 = xor i8 2, %17
  %19 = and i8 2, %17
  %20 = mul i8 2, %19
  %21 = add i8 %18, %20
  %22 = mul i8 %16, %21
  %23 = srem i8 %22, 4
  %24 = icmp eq i8 %23, 0
  %25 = mul i8 %15, %15
  %26 = add i8 %25, %15
  %27 = sext i32 %1 to i64
  %28 = or i64 %27, 7089910272004765584
  %29 = and i64 7089910272004765584, %27
  %30 = xor i64 7089910272004765584, %27
  %31 = or i64 %29, %30
  %32 = sext i32 %1 to i64
  %33 = add i64 %32, 4333261516725954987
  %34 = add i64 7860086368170523138, %32
  %35 = add i64 %34, -3526824851444568151
  %36 = sext i32 %1 to i64
  %37 = and i64 %36, -1466359775328760100
  %38 = xor i64 %36, -1
  %39 = or i64 1466359775328760099, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = xor i64 %28, %31
  %43 = xor i64 %42, %37
  %44 = xor i64 %43, %41
  %45 = xor i64 %44, -918608303762295781
  %46 = xor i64 %45, %33
  %47 = xor i64 %46, %35
  %48 = and i64 %5, 2140185711421916969
  %49 = or i64 -2140185711421916970, %5
  %50 = sub i64 %49, -2140185711421916970
  %51 = add i64 %5, -548181659781232433
  %52 = sub i64 0, %5
  %53 = sub i64 -548181659781232433, %52
  %54 = xor i64 %48, 7880934323813682214
  %55 = xor i64 %54, %51
  %56 = xor i64 %55, %50
  %57 = xor i64 %56, %53
  %58 = mul i64 %47, %57
  %59 = trunc i64 %58 to i8
  %60 = srem i8 %26, %59
  %61 = icmp eq i8 %60, 0
  %62 = or i1 %24, %61
  %63 = select i1 %62, i32 984876128, i32 984876108
  %64 = add i64 %5, -4618368761772826299
  %65 = add i64 807545744032560899, %5
  %66 = sub i64 %65, 5425914505805387198
  %67 = sext i32 %1 to i64
  %68 = and i64 %67, 2564148628641022303
  %69 = xor i64 %67, -1
  %70 = or i64 -2564148628641022304, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = xor i64 %68, %64
  %74 = xor i64 %73, %72
  %75 = xor i64 %74, %66
  %76 = xor i64 %75, 6154424635302996927
  %77 = add i64 %3, 7014258783130823900
  %78 = add i64 -1913144800077781271, %3
  %79 = sub i64 %78, -8927403583208605171
  %80 = sext i32 %1 to i64
  %81 = or i64 %80, 1415915373708918479
  %82 = xor i64 %80, -1
  %83 = and i64 %82, -763182501140237389
  %84 = and i64 %80, 763182501140237388
  %85 = or i64 %83, %84
  %86 = xor i64 -1815243081917477508, %85
  %87 = xor i64 %80, -1
  %88 = or i64 -1415915373708918480, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = or i64 %86, %90
  %92 = xor i64 %77, %81
  %93 = xor i64 %92, -3386795040151913772
  %94 = xor i64 %93, %79
  %95 = xor i64 %94, %91
  %96 = mul i64 %76, %95
  %97 = trunc i64 %96 to i32
  %98 = xor i32 %63, %97
  store i32 %98, i32* %2, align 4
  %99 = call i8** @bf6338069988336422972(i32* %2)
  %100 = load i8*, i8** %99, align 8
  indirectbr i8* %100, [label %loopEnd.exitStub.exitStub, label %9]

loopEnd.exitStub.exitStub:                        ; preds = %9
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.45.extracted(i32* %0, [19 x i32]* %lookupTable, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876134)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@inner_loop.extracted.45.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876125)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.45.extracted, %8), i8** %5, align 8
  store i32 984876125, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  %9 = load i32, i32* %0, align 4
  %10 = getelementptr inbounds [19 x i32], [19 x i32]* %lookupTable, i32 0, i32 18
  %11 = load i32, i32* %10, align 4
  %12 = srem i32 %9, %11
  store i32 %12, i32* %dispatcher, align 4
  %13 = load i8*, i8** %5, align 8
  %14 = load i8, i8* %13, align 1
  %15 = mul i8 %14, %14
  %16 = xor i8 %15, %14
  %17 = and i8 %15, %14
  %18 = or i64 %2, -3317790547679157939
  %19 = and i64 -3317790547679157939, %2
  %20 = xor i64 -3317790547679157939, %2
  %21 = or i64 %19, %20
  %22 = add i64 %4, 1534738218582687687
  %23 = xor i64 1534738218582687687, %4
  %24 = and i64 1534738218582687687, %4
  %25 = mul i64 2, %24
  %26 = add i64 %23, %25
  %27 = xor i64 1574016765965941179, %22
  %28 = xor i64 %27, %26
  %29 = xor i64 %28, %18
  %30 = xor i64 %29, %21
  %31 = and i64 %4, -517259388195927332
  %32 = xor i64 %4, -1
  %33 = or i64 517259388195927331, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = add i64 %4, -5113251636373994466
  %37 = xor i64 -5113251636373994466, %4
  %38 = and i64 -5113251636373994466, %4
  %39 = mul i64 2, %38
  %40 = add i64 %37, %39
  %41 = xor i64 %36, %35
  %42 = xor i64 %41, %40
  %43 = xor i64 %42, %31
  %44 = xor i64 %43, 289413763262596838
  %45 = mul i64 %30, %44
  %46 = trunc i64 %45 to i8
  %47 = mul i8 %46, %17
  %48 = add i8 %16, %47
  %49 = mul i8 39, %48
  %50 = add i8 23, %49
  %51 = mul i8 -105, %50
  %52 = add i8 111, %51
  %53 = or i64 %2, 8160139744892292579
  %54 = xor i64 %2, -1
  %55 = and i64 8160139744892292579, %54
  %56 = add i64 %55, %2
  %57 = and i64 %4, -6450846804739026205
  %58 = xor i64 %4, -1
  %59 = xor i64 -6450846804739026205, %58
  %60 = and i64 %59, -6450846804739026205
  %61 = or i64 %4, -1015935142816613104
  %62 = xor i64 %4, -1
  %63 = and i64 %62, 3144907298967091442
  %64 = and i64 %4, -3144907298967091443
  %65 = or i64 %63, %64
  %66 = xor i64 -2719513538365028894, %65
  %67 = xor i64 %4, -1
  %68 = or i64 1015935142816613103, %67
  %69 = xor i64 %68, -1
  %70 = and i64 %69, -1
  %71 = or i64 %66, %70
  %72 = xor i64 %57, %56
  %73 = xor i64 %72, %60
  %74 = xor i64 %73, %71
  %75 = xor i64 %74, %53
  %76 = xor i64 %75, 7171773986729204495
  %77 = xor i64 %76, %61
  %78 = and i64 %2, -6593769691744872575
  %79 = xor i64 %2, -1
  %80 = or i64 6593769691744872574, %79
  %81 = xor i64 %80, -1
  %82 = and i64 %81, -1
  %83 = add i64 %2, -7365521551961753458
  %84 = add i64 9070164634240939770, %2
  %85 = add i64 %84, 2011057887506858388
  %86 = xor i64 %83, -9152407988890248243
  %87 = xor i64 %86, %78
  %88 = xor i64 %87, %85
  %89 = xor i64 %88, %82
  %90 = mul i64 %77, %89
  %91 = trunc i64 %90 to i8
  %92 = mul i8 %52, %91
  %93 = srem i8 %92, 2
  %94 = icmp eq i8 %93, 0
  %95 = mul i8 %14, %14
  %96 = add i8 %95, %14
  %97 = srem i8 %96, 2
  %98 = icmp eq i8 %97, 0
  %99 = and i1 %94, %98
  %100 = select i1 %99, i32 984876125, i32 984876134
  %101 = xor i32 %100, 292087546
  %102 = xor i32 %101, 292087489
  store i32 %102, i32* %1, align 4
  %103 = call i8** @bf6338069988336422972(i32* %1)
  %104 = load i8*, i8** %103, align 8
  indirectbr i8* %104, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.46.extracted(i32 %0, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = call i64 @h6542867261474098886(i64 984876139)
  %3 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %2
  store i8* blockaddress(@inner_loop.extracted.46.extracted, %loopEnd.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h6542867261474098886(i64 984876135)
  %5 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.46.extracted, %8), i8** %5, align 8
  store i32 984876135, i32* %1, align 4
  %6 = call i8** @bf6338069988336422972(i32* %1)
  %7 = load i8*, i8** %6, align 8
  indirectbr i8* %7, [label %8]

8:                                                ; preds = %8, %newFuncRoot
  store i32 %0, i32* %dispatcher, align 4
  %9 = load i8*, i8** %3, align 8
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, 1
  %12 = icmp eq i8 %11, 1
  %13 = mul i8 %10, %10
  %14 = add i64 %4, 146629445421218624
  %15 = add i64 -7861144449473583415, %4
  %16 = sub i64 %15, -8007773894894802039
  %17 = and i64 %2, 1757519997109227691
  %18 = xor i64 %2, -1
  %19 = xor i64 1757519997109227691, %18
  %20 = and i64 %19, 1757519997109227691
  %21 = xor i64 %20, 1285588747378633513
  %22 = xor i64 %21, %14
  %23 = xor i64 %22, %16
  %24 = xor i64 %23, %17
  %25 = sext i32 %0 to i64
  %26 = and i64 %25, 6586033025686433815
  %27 = xor i64 %25, -1
  %28 = or i64 -6586033025686433816, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = add i64 %4, 7402740719520803744
  %32 = sub i64 0, %4
  %33 = add i64 -7402740719520803744, %32
  %34 = sub i64 0, %33
  %35 = xor i64 %31, %34
  %36 = xor i64 %35, %30
  %37 = xor i64 %36, %26
  %38 = xor i64 %37, -6545449543383018773
  %39 = mul i64 %24, %38
  %40 = trunc i64 %39 to i8
  %41 = sub i8 %13, %40
  %42 = add i8 %41, %10
  %43 = and i64 %2, -1754774241137196271
  %44 = xor i64 %2, -1
  %45 = or i64 1754774241137196270, %44
  %46 = xor i64 %45, -1
  %47 = and i64 %46, -1
  %48 = or i64 %4, -2219258473228725913
  %49 = xor i64 %4, -1
  %50 = and i64 -2219258473228725913, %49
  %51 = add i64 %50, %4
  %52 = xor i64 -4079695128418087873, %43
  %53 = xor i64 %52, %47
  %54 = xor i64 %53, %51
  %55 = xor i64 %54, %48
  %56 = add i64 %2, -1515085621941144576
  %57 = xor i64 -1515085621941144576, %2
  %58 = and i64 -1515085621941144576, %2
  %59 = mul i64 2, %58
  %60 = add i64 %57, %59
  %61 = and i64 %4, 1852278562614054374
  %62 = or i64 -1852278562614054375, %4
  %63 = sub i64 %62, -1852278562614054375
  %64 = or i64 %2, 4447893925411361144
  %65 = xor i64 %2, -1
  %66 = and i64 4447893925411361144, %65
  %67 = add i64 %66, %2
  %68 = xor i64 -6323301651328171363, %56
  %69 = xor i64 %68, %61
  %70 = xor i64 %69, %67
  %71 = xor i64 %70, %63
  %72 = xor i64 %71, %60
  %73 = xor i64 %72, %64
  %74 = mul i64 %55, %73
  %75 = trunc i64 %74 to i8
  %76 = add i8 %42, %75
  %77 = srem i8 %76, 2
  %78 = sext i32 %0 to i64
  %79 = and i64 %78, -4624967311864395057
  %80 = xor i64 %78, -1
  %81 = xor i64 -4624967311864395057, %80
  %82 = and i64 %81, -4624967311864395057
  %83 = sext i32 %0 to i64
  %84 = or i64 %83, 1727427448803589500
  %85 = xor i64 %83, -1
  %86 = and i64 1727427448803589500, %85
  %87 = add i64 %86, %83
  %88 = xor i64 %84, %79
  %89 = xor i64 %88, %82
  %90 = xor i64 %89, -7605127405880516423
  %91 = xor i64 %90, %87
  %92 = sext i32 %0 to i64
  %93 = add i64 %92, -6561490465073494019
  %94 = add i64 7749333104959337102, %92
  %95 = sub i64 %94, -4135920503676720495
  %96 = sext i32 %0 to i64
  %97 = add i64 %96, 7649884694659044801
  %98 = and i64 7649884694659044801, %96
  %99 = or i64 7649884694659044801, %96
  %100 = add i64 %98, %99
  %101 = sext i32 %0 to i64
  %102 = or i64 %101, 9036438882384503874
  %103 = xor i64 %101, -1
  %104 = and i64 9036438882384503874, %103
  %105 = add i64 %104, %101
  %106 = xor i64 %95, %105
  %107 = xor i64 %106, 0
  %108 = xor i64 %107, %100
  %109 = xor i64 %108, %97
  %110 = xor i64 %109, %93
  %111 = xor i64 %110, %102
  %112 = mul i64 %91, %111
  %113 = trunc i64 %112 to i8
  %114 = icmp eq i8 %77, %113
  %115 = and i1 %12, %114
  %116 = xor i1 %12, %114
  %117 = or i1 %115, %116
  %118 = select i1 %117, i32 984876139, i32 984876139
  %119 = xor i32 %118, -1
  %120 = or i64 %2, 2619840601827861693
  %121 = xor i64 %2, -1
  %122 = and i64 2619840601827861693, %121
  %123 = add i64 %122, %2
  %124 = add i64 %4, 781609497698317568
  %125 = xor i64 781609497698317568, %4
  %126 = and i64 781609497698317568, %4
  %127 = mul i64 2, %126
  %128 = add i64 %125, %127
  %129 = xor i64 8708797135807735045, %120
  %130 = xor i64 %129, %128
  %131 = xor i64 %130, %123
  %132 = xor i64 %131, %124
  %133 = and i64 %2, 2562500827284852371
  %134 = xor i64 %2, -1
  %135 = or i64 -2562500827284852372, %134
  %136 = xor i64 %135, -1
  %137 = and i64 %136, -1
  %138 = sext i32 %0 to i64
  %139 = add i64 %138, 1943504458720170304
  %140 = add i64 2226739134277453731, %138
  %141 = add i64 %140, -283234675557283427
  %142 = xor i64 %137, %133
  %143 = xor i64 %142, %141
  %144 = xor i64 %143, -5030693628270763431
  %145 = xor i64 %144, %139
  %146 = mul i64 %132, %145
  %147 = trunc i64 %146 to i32
  %148 = and i32 %119, %147
  %149 = and i32 %118, -503269566
  %150 = or i32 %148, %149
  %151 = xor i32 %150, 503269565
  store i32 %151, i32* %1, align 4
  %152 = call i8** @bf6338069988336422972(i32* %1)
  %153 = load i8*, i8** %152, align 8
  indirectbr i8* %153, [label %loopEnd.exitStub.exitStub, label %8]

loopEnd.exitStub.exitStub:                        ; preds = %8
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.BogusBasicBlock.extracted(i32 %0, i32* %dispatcher) #1 {
newFuncRoot:
  %1 = alloca i32, align 4
  %2 = sext i32 %0 to i64
  %3 = and i64 %2, 3171396663708516553
  %4 = or i64 -3171396663708516554, %2
  %5 = sub i64 %4, -3171396663708516554
  %6 = sext i32 %0 to i64
  %7 = and i64 %6, -707434677822428895
  %8 = xor i64 %6, -1
  %9 = xor i64 -707434677822428895, %8
  %10 = and i64 %9, -707434677822428895
  %11 = sext i32 %0 to i64
  %12 = add i64 %11, -2670845973249469299
  %13 = add i64 7474363879979727706, %11
  %14 = add i64 %13, 8301534220480354611
  %15 = xor i64 %7, 8973113318412629827
  %16 = xor i64 %15, %14
  %17 = xor i64 %16, %10
  %18 = xor i64 %17, %12
  %19 = xor i64 %18, %3
  %20 = xor i64 %19, %5
  %21 = sext i32 %0 to i64
  %22 = add i64 %21, 8182659288365378606
  %23 = and i64 8182659288365378606, %21
  %24 = or i64 8182659288365378606, %21
  %25 = add i64 %23, %24
  %26 = sext i32 %0 to i64
  %27 = add i64 %26, -847956831629909254
  %28 = add i64 -5899530944817907770, %26
  %29 = add i64 %28, 5051574113187998516
  %30 = sext i32 %0 to i64
  %31 = and i64 %30, -7293708587850298801
  %32 = xor i64 %30, -1
  %33 = xor i64 -7293708587850298801, %32
  %34 = and i64 %33, -7293708587850298801
  %35 = xor i64 %27, %29
  %36 = xor i64 %35, %25
  %37 = xor i64 %36, %22
  %38 = xor i64 %37, %34
  %39 = xor i64 %38, -8193094708105902942
  %40 = xor i64 %39, %31
  %41 = mul i64 %20, %40
  %42 = call i64 @h6542867261474098886(i64 %41)
  %43 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %42
  store i8* blockaddress(@inner_loop.BogusBasicBlock.extracted, %EntryBasicBlockSplit.exitStub.exitStub), i8** %43, align 8
  %44 = sext i32 %0 to i64
  %45 = add i64 %44, 3340344716167394351
  %46 = sub i64 0, %44
  %47 = sub i64 3340344716167394351, %46
  %48 = sext i32 %0 to i64
  %49 = add i64 %48, 985445952566522187
  %50 = add i64 -1623470815298159587, %48
  %51 = add i64 %50, 2608916767864681774
  %52 = sext i32 %0 to i64
  %53 = or i64 %52, 5242355318609479941
  %54 = and i64 5242355318609479941, %52
  %55 = xor i64 5242355318609479941, %52
  %56 = or i64 %54, %55
  %57 = xor i64 %45, %53
  %58 = xor i64 %57, -2195613417596826503
  %59 = xor i64 %58, %56
  %60 = xor i64 %59, %49
  %61 = xor i64 %60, %47
  %62 = xor i64 %61, %51
  %63 = sext i32 %0 to i64
  %64 = and i64 %63, -7931273252382144891
  %65 = or i64 7931273252382144890, %63
  %66 = sub i64 %65, 7931273252382144890
  %67 = sext i32 %0 to i64
  %68 = and i64 %67, 1312169701053843559
  %69 = xor i64 %67, -1
  %70 = or i64 -1312169701053843560, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = sext i32 %0 to i64
  %74 = or i64 %73, -328295905509918335
  %75 = xor i64 %73, -1
  %76 = and i64 -328295905509918335, %75
  %77 = add i64 %76, %73
  %78 = xor i64 %77, %66
  %79 = xor i64 %78, %74
  %80 = xor i64 %79, 8479249441296576606
  %81 = xor i64 %80, %64
  %82 = xor i64 %81, %68
  %83 = xor i64 %82, %72
  %84 = mul i64 %62, %83
  %85 = call i64 @h6542867261474098886(i64 %84)
  %86 = getelementptr [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %85
  store i8* blockaddress(@inner_loop.BogusBasicBlock.extracted, %89), i8** %86, align 8
  store i32 984876142, i32* %1, align 4
  %87 = call i8** @bf6338069988336422972(i32* %1)
  %88 = load i8*, i8** %87, align 8
  indirectbr i8* %88, [label %89]

89:                                               ; preds = %89, %newFuncRoot
  store i32 %0, i32* %dispatcher, align 4
  %90 = load i8*, i8** %43, align 8
  %91 = load i8, i8* %90, align 1
  %92 = sext i32 %0 to i64
  %93 = or i64 %92, -4178109469357921974
  %94 = xor i64 %92, -1
  %95 = and i64 %94, 2640800851988522588
  %96 = and i64 %92, -2640800851988522589
  %97 = or i64 %95, %96
  %98 = xor i64 -2116025585788874986, %97
  %99 = xor i64 %92, -1
  %100 = or i64 4178109469357921973, %99
  %101 = xor i64 %100, -1
  %102 = and i64 %101, -1
  %103 = or i64 %98, %102
  %104 = and i64 %85, -475636194444146461
  %105 = xor i64 %85, -1
  %106 = xor i64 -475636194444146461, %105
  %107 = and i64 %106, -475636194444146461
  %108 = xor i64 %107, %103
  %109 = xor i64 %108, %104
  %110 = xor i64 %109, %93
  %111 = xor i64 %110, 6265393499862817629
  %112 = and i64 %85, -2802712495934287310
  %113 = xor i64 %85, -1
  %114 = xor i64 -2802712495934287310, %113
  %115 = and i64 %114, -2802712495934287310
  %116 = and i64 %42, 3301054200395529428
  %117 = or i64 -3301054200395529429, %42
  %118 = sub i64 %117, -3301054200395529429
  %119 = or i64 %85, 7560590633528539165
  %120 = xor i64 %85, -1
  %121 = and i64 7560590633528539165, %120
  %122 = add i64 %121, %85
  %123 = xor i64 -5708755621403581974, %119
  %124 = xor i64 %123, %118
  %125 = xor i64 %124, %122
  %126 = xor i64 %125, %112
  %127 = xor i64 %126, %116
  %128 = xor i64 %127, %115
  %129 = mul i64 %111, %128
  %130 = trunc i64 %129 to i8
  %131 = mul i8 %91, %130
  %132 = mul i8 %91, 2
  %133 = or i64 %42, -3845733305864548311
  %134 = xor i64 %42, -1
  %135 = and i64 -3845733305864548311, %134
  %136 = add i64 %135, %42
  %137 = or i64 %42, -4040559764749146225
  %138 = and i64 -4040559764749146225, %42
  %139 = xor i64 -4040559764749146225, %42
  %140 = or i64 %138, %139
  %141 = or i64 %42, -5302919508858906051
  %142 = xor i64 %42, -1
  %143 = and i64 %142, 432636780409367541
  %144 = and i64 %42, -432636780409367542
  %145 = or i64 %143, %144
  %146 = xor i64 -5734993201473228344, %145
  %147 = xor i64 %42, -1
  %148 = or i64 5302919508858906050, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = or i64 %146, %150
  %152 = xor i64 %133, %141
  %153 = xor i64 %152, %140
  %154 = xor i64 %153, %136
  %155 = xor i64 %154, -3027896440553190483
  %156 = xor i64 %155, %137
  %157 = xor i64 %156, %151
  %158 = add i64 %42, -6015555120161261022
  %159 = sub i64 0, %42
  %160 = add i64 6015555120161261022, %159
  %161 = sub i64 0, %160
  %162 = and i64 %42, -4793164177816714752
  %163 = or i64 4793164177816714751, %42
  %164 = sub i64 %163, 4793164177816714751
  %165 = sext i32 %0 to i64
  %166 = and i64 %165, -2105026324089678586
  %167 = or i64 2105026324089678585, %165
  %168 = sub i64 %167, 2105026324089678585
  %169 = xor i64 %166, %162
  %170 = xor i64 %169, -8306480591213780918
  %171 = xor i64 %170, %164
  %172 = xor i64 %171, %158
  %173 = xor i64 %172, %161
  %174 = xor i64 %173, %168
  %175 = mul i64 %157, %174
  %176 = trunc i64 %175 to i8
  %177 = add i8 %176, %132
  %178 = mul i8 %131, %177
  %179 = sext i32 %0 to i64
  %180 = add i64 %179, -1753805922362517245
  %181 = xor i64 -1753805922362517245, %179
  %182 = and i64 -1753805922362517245, %179
  %183 = mul i64 2, %182
  %184 = add i64 %181, %183
  %185 = add i64 %85, -7545378991137108478
  %186 = xor i64 -7545378991137108478, %85
  %187 = and i64 -7545378991137108478, %85
  %188 = mul i64 2, %187
  %189 = add i64 %186, %188
  %190 = add i64 %85, -514683208194439694
  %191 = sub i64 0, %85
  %192 = sub i64 -514683208194439694, %191
  %193 = xor i64 %190, 7479804771046620949
  %194 = xor i64 %193, %184
  %195 = xor i64 %194, %192
  %196 = xor i64 %195, %180
  %197 = xor i64 %196, %189
  %198 = xor i64 %197, %185
  %199 = add i64 %85, -3674440210443423119
  %200 = and i64 -3674440210443423119, %85
  %201 = or i64 -3674440210443423119, %85
  %202 = add i64 %200, %201
  %203 = or i64 %85, 3845763466444647880
  %204 = xor i64 %85, -1
  %205 = and i64 3845763466444647880, %204
  %206 = add i64 %205, %85
  %207 = xor i64 -7684746935109984012, %199
  %208 = xor i64 %207, %203
  %209 = xor i64 %208, %202
  %210 = xor i64 %209, %206
  %211 = mul i64 %198, %210
  %212 = trunc i64 %211 to i8
  %213 = srem i8 %178, %212
  %214 = icmp eq i8 %213, 0
  %215 = mul i8 %91, %91
  %216 = mul i8 %215, %91
  %217 = add i8 %216, %91
  %218 = srem i8 %217, 2
  %219 = icmp eq i8 %218, 0
  %220 = and i1 %214, %219
  %221 = select i1 %220, i32 984876134, i32 984876134
  %222 = or i32 %221, 0
  %223 = and i32 %221, 0
  %224 = sub i32 %222, %223
  store i32 %224, i32* %1, align 4
  %225 = call i8** @bf6338069988336422972(i32* %1)
  %226 = load i8*, i8** %225, align 8
  indirectbr i8* %226, [label %EntryBasicBlockSplit.exitStub.exitStub, label %89]

EntryBasicBlockSplit.exitStub.exitStub:           ; preds = %89
  ret void
}

; Function Attrs: noinline
define internal i64 @m4181846979565521366(i64 %0) #11 {
  %2 = alloca i32, align 4
  %3 = and i64 %0, 3188945326959613928
  %4 = xor i64 %0, -1
  %5 = xor i64 3188945326959613928, %4
  %6 = and i64 %5, 3188945326959613928
  %7 = add i64 %0, -3566651259158520597
  %8 = xor i64 -3566651259158520597, %0
  %9 = and i64 -3566651259158520597, %0
  %10 = mul i64 2, %9
  %11 = add i64 %8, %10
  %12 = xor i64 %3, %7
  %13 = xor i64 %12, -3001120707008740905
  %14 = xor i64 %13, %11
  %15 = xor i64 %14, %6
  %16 = and i64 %0, -893961852733358897
  %17 = or i64 893961852733358896, %0
  %18 = sub i64 %17, 893961852733358896
  %19 = add i64 %0, 7884709402807516198
  %20 = sub i64 0, %0
  %21 = sub i64 7884709402807516198, %20
  %22 = add i64 %0, -7460710020384724845
  %23 = add i64 6835996563114629902, %0
  %24 = add i64 %23, 4150037490210196869
  %25 = xor i64 %21, %16
  %26 = xor i64 %25, %18
  %27 = xor i64 %26, %24
  %28 = xor i64 %27, %22
  %29 = xor i64 %28, -2796286752006488311
  %30 = xor i64 %29, %19
  %31 = mul i64 %15, %30
  %32 = xor i64 %31, %0
  ret i64 %32
}

; Function Attrs: noinline
define internal i8** @lk15143322792737984910(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable1089487772040816285, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk8153326119118101986(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [14 x i8*], [14 x i8*]* @obfsfuncAddrLookupTable158318506353328179, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk17093456354810283869(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [5 x i8*], [5 x i8*]* @obfsfuncAddrLookupTable10165329826716484505, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk1336881106680510526(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable3834657715494109575, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk9254909843318351582(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [21 x i8*], [21 x i8*]* @obfsfuncAddrLookupTable7222083486153558644, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2528754644522447028(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14936983426752459058, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk12478154414877683305(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable18293723675824487353, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15516825027481801371(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2137045860480766185, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk7062456313021011374(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable16508952818686298381, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk10020772496071677461(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable661054169283609905, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15283925730859341009(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3263059483920280765, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk13043518718726078595(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable15872309927006380141, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk10323673655277611966(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11254744462274370258, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk9507439604238316874(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13610838496713195053, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk574401168482893006(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7946610297334770699, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk17710973302758990871(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14921214450106092310, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk13131460919683370831(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2676540328822753780, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk7850175081304604761(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13930894579797800242, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk18433947796118248817(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14804151815533204912, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2210454470600176687(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1582770808220149332, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk16846511957834172191(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1008750604835695442, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk17754232458190986103(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable4439605908938760544, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6905989959671697645(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable8394725189750568945, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk11019626905570507809(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5603075018834282146, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6906225544584497095(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13246253495866921194, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15254634105568956878(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10519794407393913923, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk14415857824142216237(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable18139037964304201484, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk17728768479695395648(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7927533323930379990, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6590627545456677261(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2001930920301229235, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6996706366312423136(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7635078272535982493, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk14541245032599740191(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11568173901483765685, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk7953750587911823265(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11073436793896439777, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6494449342842820069(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11542178627540477363, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk1932705876204994384(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7942542406399699170, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk4227238758197037501(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2124429793559527863, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk9085697242675703551(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12197573581419751257, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk5239088532693830486(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6678268903096122989, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk4462616265759468068(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11614317241804279208, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2361039735857797459(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5701602599771018107, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk8862629089039270275(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12279660055629207190, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk628540616057857234(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5394018512801838177, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6873818407714615644(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable16975137384401352206, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6906303440313898649(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9270819550216953813, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk379752535366543268(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3104023660497480400, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk4630455211724975250(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1872332816392812891, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk416499455634074828(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8397835548565163023, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk18308803058659636891(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1228217607110177373, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2605295399637884959(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1819560383262807543, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk733164823360870755(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12395021631910078423, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk263679519223026857(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable466230988663405414, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk330495605987470769(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11450567809067022175, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk3651362651451987676(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6801622834913932444, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk10773722924660164129(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable4787608969622056690, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6232502509854216282(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10345614790745952775, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk16264275912986551985(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8730671779138474223, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk14624544468785892217(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2282200235023931699, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk783237237269819673(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable12747837976195886284, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk12603504826973659978(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14417565406211868142, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk9467855542099712350(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable9397402919615645715, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2847145900876727517(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10017737418098223963, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15015715335973622966(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6864560605196664741, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk8071742946585926715(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6670628566329903666, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2567203579303046852(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5994868871536864535, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk12700749691518738181(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m4181846979565521366(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1786965691037181812, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i64 @h6542867261474098886(i64 %0) #11 {
  %2 = alloca i32, align 4
  %3 = xor i64 984876138, %0
  ret i64 %3
}

; Function Attrs: noinline
define internal i8** @bf6338069988336422972(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [64 x i8*], [64 x i8*]* @obfsblockAddrLookupTable14602772856972359921, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf11363924245358311224(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable1675382302700983680, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf6047435729067610447(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [65 x i8*], [65 x i8*]* @obfsblockAddrLookupTable7023837512976842738, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16388050368864114983(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [15 x i8*], [15 x i8*]* @obfsblockAddrLookupTable10333322412831550620, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf3690775341412318723(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [51 x i8*], [51 x i8*]* @obfsblockAddrLookupTable17975729477749297177, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7763123487515004013(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [53 x i8*], [53 x i8*]* @obfsblockAddrLookupTable7806922215650597966, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17181708843024921859(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [19 x i8*], [19 x i8*]* @obfsblockAddrLookupTable5681188989244187324, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17581931123197219510(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable627280723735628316, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2569683251699683914(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12142388729970394614, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17157896522806037044(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18069468935861293036, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf3182636109140662499(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13671396500338455014, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf5922628416545449076(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10395363378856985495, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf8275677406198937660(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2059185066680446929, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16247341047232784373(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable2490446019641129485, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf12628453140567268413(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5538191963925840052, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2764126284152288184(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10542299481062128749, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf18153841645268142413(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3344898759500944034, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf13060471314557800498(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable721320004813605145, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7851453730528659025(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6411101475104065434, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf8242492124939957577(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18311079036208169777, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14057770961472521071(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9651444969545546290, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf4423765630577650784(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable869952976517638611, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf8865144524772024419(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17483817777465953375, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf15416862713012807793(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7073427795398676039, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1662976488351824164(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18070328068862507537, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16763515590375349614(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable607629558949487478, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf10111600441450393745(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10639372946606728569, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf12854391879425916569(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable17442865676092226486, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16412650203074185332(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4767101006511538369, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2542622646541168406(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4295862735387337237, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1061434821978349071(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5256400659331720855, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14701068836225390076(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable1542317342180117104, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf13929252136177070272(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable110712339244340611, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf11856947853498104389(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7151764222053429975, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf8839532275006299043(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12568258043102494611, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf4375101210048835390(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable10214129599215908645, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7541961726349755274(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3216832321708071451, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17124241044688097502(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4045253587417335053, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf6667396463122897288(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8013969641835849439, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf861539622850162277(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9583133371259958317, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7835958905179672536(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15945169503269941469, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf12112455805171328756(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8379073977622402907, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9625773503618811097(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8792233532497471479, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7593563620049415213(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [3 x i8*], [3 x i8*]* @obfsblockAddrLookupTable15072500868116077034, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf5553753146581063602(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7566136434962294925, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf10580636527388110965(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable7146363402020245244, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7762184481881667074(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4742261919227970024, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf6596980413736034409(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18162914415852497466, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1524551660851897346(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6415106747569470537, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9670062208140280490(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4883168609508392360, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf3925661578790816960(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable15774460795949983293, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14887632971262094281(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable3877704362992657921, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2316937588321097812(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8775210668299724181, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf6276024088074375969(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5729685810929087705, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf10859602166879710780(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable5017855980880175355, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7438893577993244349(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable18196541893470973885, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9393873928285995723(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable14803168233408389419, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf15059041393394650618(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12012081229678312772, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf8956670186687295878(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable4658091490867282012, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf405698465177500870(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable12851308745052110949, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16488349645348535505(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable8483248504687110788, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17851141059802040221(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable11119709064161687412, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf8213767146710455205(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable13306541676709936060, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9302465224130596104(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable9864388630873030894, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9847471633196389420(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h6542867261474098886(i64 %4)
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsblockAddrLookupTable6614939931088871305, i32 0, i64 %5
  ret i8** %6
}

define void @decode12861325073432428884(i8* %0, i32 %1, i8* %2, i32* %3, i8* %4) {
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = zext i32 %1 to i64
  br label %10

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %10, %7
  %11 = phi i64 [ 0, %7 ], [ %26, %10 ]
  %12 = phi i32 [ 0, %7 ], [ %23, %10 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = shl i32 %12, 1
  %16 = sext i8 %14 to i32
  %17 = add nsw i32 %15, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %4, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 %11
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i32, i32* %3, i64 %18
  %23 = load i32, i32* %22, align 4
  %24 = sub i64 0, %11
  %25 = add i64 %24, -1
  %26 = sub i64 0, %25
  %27 = icmp eq i64 %26, %8
  br i1 %27, label %9, label %10
}

define internal void @init2136336765189503303() {
  %outArray = alloca [26 x i8], align 1
  %1 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 0
  store i8 45, i8* %1, align 1
  %2 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 1
  store i8 46, i8* %2, align 1
  %3 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 2
  store i8 64, i8* %3, align 1
  %4 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 3
  store i8 44, i8* %4, align 1
  %5 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 4
  store i8 64, i8* %5, align 1
  %6 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 5
  store i8 45, i8* %6, align 1
  %7 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 6
  store i8 126, i8* %7, align 1
  %8 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 7
  store i8 64, i8* %8, align 1
  %9 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 8
  store i8 58, i8* %9, align 1
  %10 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 9
  store i8 59, i8* %10, align 1
  %11 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 10
  store i8 59, i8* %11, align 1
  %12 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 11
  store i8 61, i8* %12, align 1
  %13 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 12
  store i8 61, i8* %13, align 1
  %14 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 13
  store i8 46, i8* %14, align 1
  %15 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 14
  store i8 33, i8* %15, align 1
  %16 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 15
  store i8 61, i8* %16, align 1
  %17 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 16
  store i8 42, i8* %17, align 1
  %18 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 17
  store i8 42, i8* %18, align 1
  %19 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 18
  store i8 36, i8* %19, align 1
  %20 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 19
  store i8 35, i8* %20, align 1
  %21 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 20
  store i8 36, i8* %21, align 1
  %22 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 21
  store i8 58, i8* %22, align 1
  %23 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 22
  store i8 35, i8* %23, align 1
  %24 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 23
  store i8 64, i8* %24, align 1
  %25 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 24
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 25
  store i8 64, i8* %26, align 1
  %nextArray = alloca [26 x i32], align 4
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 0
  store i32 3, i32* %27, align 4
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 1
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 2
  store i32 12, i32* %29, align 4
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 3
  store i32 2, i32* %30, align 4
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 4
  store i32 12, i32* %31, align 4
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 5
  store i32 3, i32* %32, align 4
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 6
  store i32 4, i32* %33, align 4
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 7
  store i32 12, i32* %34, align 4
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 8
  store i32 5, i32* %35, align 4
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 9
  store i32 6, i32* %36, align 4
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 10
  store i32 6, i32* %37, align 4
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 11
  store i32 7, i32* %38, align 4
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 12
  store i32 7, i32* %39, align 4
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 13
  store i32 1, i32* %40, align 4
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 14
  store i32 8, i32* %41, align 4
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 15
  store i32 7, i32* %42, align 4
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 16
  store i32 9, i32* %43, align 4
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 17
  store i32 9, i32* %44, align 4
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 18
  store i32 11, i32* %45, align 4
  %46 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 19
  store i32 10, i32* %46, align 4
  %47 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 20
  store i32 11, i32* %47, align 4
  %48 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 21
  store i32 5, i32* %48, align 4
  %49 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 22
  store i32 10, i32* %49, align 4
  %50 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 23
  store i32 12, i32* %50, align 4
  %51 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 24
  store i32 0, i32* %51, align 4
  %52 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 25
  store i32 12, i32* %52, align 4
  %53 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 0
  %54 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 0
  br label %55

55:                                               ; preds = %0
  call void @decode12861325073432428884(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32* %53, i8* %54)
  %outArray1 = alloca [10 x i8], align 1
  %56 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 0
  store i8 27, i8* %56, align 1
  %57 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 1
  store i8 91, i8* %57, align 1
  %58 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 2
  store i8 50, i8* %58, align 1
  %59 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 3
  store i8 91, i8* %59, align 1
  %60 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 4
  store i8 74, i8* %60, align 1
  %61 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 5
  store i8 50, i8* %61, align 1
  %62 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 6
  store i8 50, i8* %62, align 1
  %63 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 7
  store i8 74, i8* %63, align 1
  %64 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 8
  store i8 50, i8* %64, align 1
  %65 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 9
  store i8 0, i8* %65, align 1
  %nextArray2 = alloca [10 x i32], align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 0
  store i32 1, i32* %66, align 4
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 1
  store i32 2, i32* %67, align 4
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 2
  store i32 3, i32* %68, align 4
  %69 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 3
  store i32 2, i32* %69, align 4
  %70 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 4
  store i32 4, i32* %70, align 4
  %71 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 5
  store i32 3, i32* %71, align 4
  %72 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 6
  store i32 3, i32* %72, align 4
  %73 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 7
  store i32 4, i32* %73, align 4
  %74 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 8
  store i32 3, i32* %74, align 4
  %75 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 9
  store i32 0, i32* %75, align 4
  %76 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 0
  %77 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 0
  br label %78

78:                                               ; preds = %55
  call void @decode12861325073432428884(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32* %76, i8* %77)
  %outArray3 = alloca [8 x i8], align 1
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 0
  store i8 27, i8* %79, align 1
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 1
  store i8 91, i8* %80, align 1
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 2
  store i8 91, i8* %81, align 1
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 3
  store i8 72, i8* %82, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 4
  store i8 72, i8* %83, align 1
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 5
  store i8 72, i8* %84, align 1
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 6
  store i8 27, i8* %85, align 1
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 7
  store i8 0, i8* %86, align 1
  %nextArray4 = alloca [8 x i32], align 4
  %87 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 0
  store i32 1, i32* %87, align 4
  %88 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 1
  store i32 2, i32* %88, align 4
  %89 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 2
  store i32 2, i32* %89, align 4
  %90 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 3
  store i32 3, i32* %90, align 4
  %91 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 4
  store i32 3, i32* %91, align 4
  %92 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 5
  store i32 3, i32* %92, align 4
  %93 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 6
  store i32 1, i32* %93, align 4
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 7
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 0
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 0
  br label %97

97:                                               ; preds = %78
  call void @decode12861325073432428884(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32* %95, i8* %96)
  ret void
}

attributes #0 = { mustprogress nofree noinline norecurse nosync nounwind ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #5 = { noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { nofree noinline nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #9 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #10 = { mustprogress nofree noinline norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #11 = { noinline }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"float", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C/C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !12, i64 0}
!16 = !{!12, !12, i64 0}
