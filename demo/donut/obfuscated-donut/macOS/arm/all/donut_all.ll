; ModuleID = './donut_substitution.ll'
source_filename = "donut_deobfuscated.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@Z_SIZE = local_unnamed_addr constant i64 1760, align 8
@B_SIZE = local_unnamed_addr constant i64 1760, align 8
@WAIT_TIME = local_unnamed_addr constant i64 30000, align 8
@.str = private unnamed_addr global [13 x i8] c"\01\01\01\00\00\00\00\00\01\01\00\01\00", align 1
@CHARS = local_unnamed_addr global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr global [5 x i8] c"\00\01\01\01\01", align 1
@.str.2 = private unnamed_addr global [4 x i8] c"\00\00\01\01", align 1
@obfsfuncAddrLookupTable13048473401921955443 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7987223763381538795 = private global [11 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10845888332433178394 = private global [4 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6796840101367681652 = private global [11 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1521269245271593286 = private global [10 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10964148096910173402 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5817226267099857021 = private global [6 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7248833348834779914 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7736042078782182294 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3207960230964856142 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2764332446207538526 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7838084727187403814 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable14996539064837633190 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable9558371708905704725 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable8137076287989836104 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5534904613522678169 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable15401568588136411344 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7517529135013047173 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11921367710597738247 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13175363040677724041 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1382216898532583501 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable15833730315419083368 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable17288531702685132446 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable9376634603898858042 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13215117349962675226 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13284784893890992073 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2996394070652152791 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2277199937449041614 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6119868860763007404 = private global [1 x i8*] zeroinitializer
@obfsblockAddrLookupTable11844687680650345730 = private global [148 x i8*] zeroinitializer
@obfsblockAddrLookupTable3777267913099762004 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable4282319566941700219 = private global [47 x i8*] zeroinitializer
@obfsblockAddrLookupTable11487299654571061756 = private global [14 x i8*] zeroinitializer
@obfsblockAddrLookupTable2483702251257620974 = private global [38 x i8*] zeroinitializer
@obfsblockAddrLookupTable7964094905053450214 = private global [60 x i8*] zeroinitializer
@obfsblockAddrLookupTable5628260294871820814 = private global [26 x i8*] zeroinitializer
@obfsblockAddrLookupTable7353789112286112543 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable3297044618817448063 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable5812548706565816714 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable1797664195434524460 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable5528410670712074847 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable6014869595000441341 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable16240604599681249327 = private global [8 x i8*] zeroinitializer
@obfsblockAddrLookupTable2722354598544532895 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable1766039748528219661 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable11832045528322256264 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable15530373279097603541 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable16595383678855456002 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable1106547205484329642 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable13514676529120742716 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable12783221314702167078 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable907254217448068036 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable17119708875124283161 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable3347769788510896071 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable13914066860043643614 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable2199331466227108195 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable1740696952520402321 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable4720161520762699685 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable12054779285453193996 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable11636732928335620957 = private global [149 x i8*] zeroinitializer
@llvm.compiler.used = appending global [122 x i8*] [i8* bitcast (i64 (i64)* @m1252811912226950246 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13048473401921955443 to i8*), i8* bitcast (i8** (i64*)* @lk2767572233068462473 to i8*), i8* bitcast ([11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795 to i8*), i8* bitcast (i8** (i64*)* @lk14494699875176641526 to i8*), i8* bitcast ([4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394 to i8*), i8* bitcast (i8** (i64*)* @lk16598722153887272892 to i8*), i8* bitcast ([11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652 to i8*), i8* bitcast (i8** (i64*)* @lk6948690881598386563 to i8*), i8* bitcast ([10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286 to i8*), i8* bitcast (i8** (i64*)* @lk13323888900026137679 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable10964148096910173402 to i8*), i8* bitcast (i8** (i64*)* @lk16790370311123254137 to i8*), i8* bitcast ([6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021 to i8*), i8* bitcast (i8** (i64*)* @lk3314813992465304394 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7248833348834779914 to i8*), i8* bitcast (i8** (i64*)* @lk4907322943909632039 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7736042078782182294 to i8*), i8* bitcast (i8** (i64*)* @lk2403458854773074703 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable3207960230964856142 to i8*), i8* bitcast (i8** (i64*)* @lk6662349738094152229 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2764332446207538526 to i8*), i8* bitcast (i8** (i64*)* @lk12173744047017897499 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7838084727187403814 to i8*), i8* bitcast (i8** (i64*)* @lk1658832481597702668 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable14996539064837633190 to i8*), i8* bitcast (i8** (i64*)* @lk13448550276454727271 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable9558371708905704725 to i8*), i8* bitcast (i8** (i64*)* @lk15166206071384713796 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable8137076287989836104 to i8*), i8* bitcast (i8** (i64*)* @lk8130767998500730990 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable5534904613522678169 to i8*), i8* bitcast (i8** (i64*)* @lk4007318037496837210 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable15401568588136411344 to i8*), i8* bitcast (i8** (i64*)* @lk15299938733457504333 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7517529135013047173 to i8*), i8* bitcast (i8** (i64*)* @lk14929367933546861456 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable11921367710597738247 to i8*), i8* bitcast (i8** (i64*)* @lk2816797058128718436 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable13175363040677724041 to i8*), i8* bitcast (i8** (i64*)* @lk1690363737598974996 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1382216898532583501 to i8*), i8* bitcast (i8** (i64*)* @lk5435521538028724680 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable15833730315419083368 to i8*), i8* bitcast (i8** (i64*)* @lk15850847998754508100 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable17288531702685132446 to i8*), i8* bitcast (i8** (i64*)* @lk16272290410439088112 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable9376634603898858042 to i8*), i8* bitcast (i8** (i64*)* @lk15203494314922396868 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13215117349962675226 to i8*), i8* bitcast (i8** (i64*)* @lk3833332668859376412 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13284784893890992073 to i8*), i8* bitcast (i8** (i64*)* @lk1295327301961651399 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2996394070652152791 to i8*), i8* bitcast (i8** (i64*)* @lk253955913984065474 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2277199937449041614 to i8*), i8* bitcast (i8** (i64*)* @lk7540327179399209711 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable6119868860763007404 to i8*), i8* bitcast (i8** (i64*)* @lk10004858638100200575 to i8*), i8* bitcast (i64 (i64)* @h9549842938191327224 to i8*), i8* bitcast ([148 x i8*]* @obfsblockAddrLookupTable11844687680650345730 to i8*), i8* bitcast (i8** (i32*)* @bf3325468485390379012 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable3777267913099762004 to i8*), i8* bitcast (i8** (i32*)* @bf11682538603393217460 to i8*), i8* bitcast ([47 x i8*]* @obfsblockAddrLookupTable4282319566941700219 to i8*), i8* bitcast (i8** (i32*)* @bf16940128800427173045 to i8*), i8* bitcast ([14 x i8*]* @obfsblockAddrLookupTable11487299654571061756 to i8*), i8* bitcast (i8** (i32*)* @bf17091576487413611968 to i8*), i8* bitcast ([38 x i8*]* @obfsblockAddrLookupTable2483702251257620974 to i8*), i8* bitcast (i8** (i32*)* @bf4471601488556574720 to i8*), i8* bitcast ([60 x i8*]* @obfsblockAddrLookupTable7964094905053450214 to i8*), i8* bitcast (i8** (i32*)* @bf10863455059032886292 to i8*), i8* bitcast ([26 x i8*]* @obfsblockAddrLookupTable5628260294871820814 to i8*), i8* bitcast (i8** (i32*)* @bf794918515261098114 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable7353789112286112543 to i8*), i8* bitcast (i8** (i32*)* @bf14281843279761912560 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable3297044618817448063 to i8*), i8* bitcast (i8** (i32*)* @bf17828750132393575339 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable5812548706565816714 to i8*), i8* bitcast (i8** (i32*)* @bf14483027482696508820 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable1797664195434524460 to i8*), i8* bitcast (i8** (i32*)* @bf16232848923043496 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable5528410670712074847 to i8*), i8* bitcast (i8** (i32*)* @bf18108755420242421295 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable6014869595000441341 to i8*), i8* bitcast (i8** (i32*)* @bf1964187169507630819 to i8*), i8* bitcast ([8 x i8*]* @obfsblockAddrLookupTable16240604599681249327 to i8*), i8* bitcast (i8** (i32*)* @bf4402142158456708617 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable2722354598544532895 to i8*), i8* bitcast (i8** (i32*)* @bf565668037337745205 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable1766039748528219661 to i8*), i8* bitcast (i8** (i32*)* @bf18348850871760216737 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable11832045528322256264 to i8*), i8* bitcast (i8** (i32*)* @bf12853339880816689374 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable15530373279097603541 to i8*), i8* bitcast (i8** (i32*)* @bf3611037731079723307 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable16595383678855456002 to i8*), i8* bitcast (i8** (i32*)* @bf12382766459809533200 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable1106547205484329642 to i8*), i8* bitcast (i8** (i32*)* @bf11893182969653303978 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable13514676529120742716 to i8*), i8* bitcast (i8** (i32*)* @bf3107329076723412484 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable12783221314702167078 to i8*), i8* bitcast (i8** (i32*)* @bf323596751415600656 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable907254217448068036 to i8*), i8* bitcast (i8** (i32*)* @bf2465203609024612952 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable17119708875124283161 to i8*), i8* bitcast (i8** (i32*)* @bf6197856798957033914 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable3347769788510896071 to i8*), i8* bitcast (i8** (i32*)* @bf10451871259507523800 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable13914066860043643614 to i8*), i8* bitcast (i8** (i32*)* @bf13573797562172960439 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable2199331466227108195 to i8*), i8* bitcast (i8** (i32*)* @bf2116388564844465803 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable1740696952520402321 to i8*), i8* bitcast (i8** (i32*)* @bf2270863583753450932 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable4720161520762699685 to i8*), i8* bitcast (i8** (i32*)* @bf9796620445490608376 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable12054779285453193996 to i8*), i8* bitcast (i8** (i32*)* @bf13260614022775511576 to i8*), i8* bitcast ([149 x i8*]* @obfsblockAddrLookupTable11636732928335620957 to i8*), i8* bitcast (i8** (i32*)* @bf11341968219616265120 to i8*)], section "llvm.metadata"
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @init15376288821552252010, i8* null }]

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind ssp willreturn uwtable
define i32 @update(float* %0, float* %1) local_unnamed_addr #0 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314400)
  %4 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %3
  store i8* blockaddress(@update, %loopEnd), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314406)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %5
  store i8* blockaddress(@update, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314407)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %7
  store i8* blockaddress(@update, %defaultSwitchBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314404)
  %10 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %9
  store i8* blockaddress(@update, %codeRepl), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314403)
  %12 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %11
  store i8* blockaddress(@update, %348), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314405)
  %14 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %13
  store i8* blockaddress(@update, %248), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314413)
  %16 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %15
  store i8* blockaddress(@update, %EntryBasicBlockSplit), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314401)
  %18 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %17
  store i8* blockaddress(@update, %loopStart), i8** %18, align 8
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %27, align 4
  %28 = alloca i64, align 8
  %29 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %30 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13048473401921955443, i32 0, i64 %29
  store i8** %30, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314401, i32* %2, align 4
  %31 = call i8** @bf11682538603393217460(i32* %2)
  %32 = load i8*, i8** %31, align 8
  indirectbr i8* %32, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %codeRepl
    i32 2, label %248
    i32 3, label %348
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (float*, float*)* @update..split to i8*), i8** %.reload, align 8
  %33 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = add i32 %34, %36
  store i32 %37, i32* %dispatcher, align 4
  %38 = load i8*, i8** %6, align 8
  %39 = load i8, i8* %38, align 1
  %40 = mul i8 %39, 2
  %41 = mul i8 %39, 2
  %42 = add i8 -85, %41
  %43 = add i8 %42, 87
  %44 = mul i8 %40, %43
  %45 = srem i8 %44, 4
  %46 = icmp eq i8 %45, 0
  %47 = mul i8 %39, %39
  %48 = add i8 %47, %39
  %49 = srem i8 %48, 2
  %50 = and i64 %5, -3002910724234177391
  %51 = xor i64 %5, -1
  %52 = xor i64 -3002910724234177391, %51
  %53 = and i64 %52, -3002910724234177391
  %54 = or i64 %5, 1961500836632352783
  %55 = xor i64 %5, -1
  %56 = and i64 %55, -3230516913658702954
  %57 = and i64 %5, 3230516913658702953
  %58 = or i64 %56, %57
  %59 = xor i64 -4030084611271750759, %58
  %60 = xor i64 %5, -1
  %61 = or i64 -1961500836632352784, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = or i64 %59, %63
  %65 = xor i64 759656590072245909, %53
  %66 = xor i64 %65, %54
  %67 = xor i64 %66, %64
  %68 = xor i64 %67, %50
  %69 = and i64 %13, -3111094525434759396
  %70 = xor i64 %13, -1
  %71 = xor i64 -3111094525434759396, %70
  %72 = and i64 %71, -3111094525434759396
  %73 = and i64 %17, -772947318217421721
  %74 = or i64 772947318217421720, %17
  %75 = sub i64 %74, 772947318217421720
  %76 = xor i64 0, %73
  %77 = xor i64 %76, %75
  %78 = xor i64 %77, %69
  %79 = xor i64 %78, %72
  %80 = mul i64 %68, %79
  %81 = trunc i64 %80 to i8
  %82 = icmp eq i8 %49, %81
  %83 = or i1 %46, %82
  %84 = select i1 %83, i32 388314401, i32 388314400
  %85 = add i64 %13, -3235233355273097284
  %86 = sub i64 0, %13
  %87 = sub i64 -3235233355273097284, %86
  %88 = add i64 %15, -2405994288817495264
  %89 = sub i64 0, %15
  %90 = sub i64 -2405994288817495264, %89
  %91 = xor i64 %88, %87
  %92 = xor i64 %91, %90
  %93 = xor i64 %92, -8817504153983337627
  %94 = xor i64 %93, %85
  %95 = sext i32 %dispatcher1 to i64
  %96 = and i64 %95, -2325397338372645388
  %97 = xor i64 %95, -1
  %98 = xor i64 -2325397338372645388, %97
  %99 = and i64 %98, -2325397338372645388
  %100 = and i64 %17, 8897867777317019543
  %101 = xor i64 %17, -1
  %102 = xor i64 8897867777317019543, %101
  %103 = and i64 %102, 8897867777317019543
  %104 = or i64 %15, -781431792047545358
  %105 = xor i64 %15, -1
  %106 = and i64 -781431792047545358, %105
  %107 = add i64 %106, %15
  %108 = xor i64 %99, %100
  %109 = xor i64 %108, %104
  %110 = xor i64 %109, %103
  %111 = xor i64 %110, %96
  %112 = xor i64 %111, %107
  %113 = xor i64 %112, 905037895989920147
  %114 = mul i64 %94, %113
  %115 = trunc i64 %114 to i32
  %116 = xor i32 %84, %115
  %117 = and i32 %116, 660099739
  %118 = and i32 %84, -660099740
  %119 = or i32 %117, %118
  %120 = xor i32 %119, 660099738
  store i32 %120, i32* %2, align 4
  %121 = call i8** @bf11682538603393217460(i32* %2)
  %122 = load i8*, i8** %121, align 8
  indirectbr i8* %122, [label %loopEnd, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %28, align 8
  %123 = call i8** @lk2767572233068462473(i64* %28)
  %124 = load i8*, i8** %123, align 8
  %125 = bitcast i8* %124 to i1 (float*, float*)*
  %targetBlock = call i1 %125(float* %0, float* %1)
  %126 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %129 = load i32, i32* %128, align 4
  %130 = and i32 %127, %129
  %131 = or i32 %127, %129
  %132 = add i32 %130, %131
  %133 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %136 = load i32, i32* %135, align 4
  %137 = add i32 %134, %136
  %138 = select i1 %targetBlock, i32 %132, i32 %137
  store i32 %138, i32* %dispatcher, align 4
  store i32 2, i32* %.reg2mem2, align 4
  %139 = load i8*, i8** %14, align 8
  %140 = load i8, i8* %139, align 1
  %141 = xor i8 %140, -1
  %142 = or i8 %141, 1
  %143 = xor i8 %140, -1
  %144 = sub i8 %142, %143
  %145 = or i64 %17, -5056106726226622697
  %146 = and i64 -5056106726226622697, %17
  %147 = xor i64 -5056106726226622697, %17
  %148 = or i64 %146, %147
  %149 = add i64 %15, -7928729702728453940
  %150 = xor i64 -7928729702728453940, %15
  %151 = and i64 -7928729702728453940, %15
  %152 = mul i64 2, %151
  %153 = add i64 %150, %152
  %154 = sext i32 %dispatcher1 to i64
  %155 = and i64 %154, -759665416017001611
  %156 = or i64 759665416017001610, %154
  %157 = sub i64 %156, 759665416017001610
  %158 = xor i64 %157, %145
  %159 = xor i64 %158, %153
  %160 = xor i64 %159, 1416662458331872791
  %161 = xor i64 %160, %148
  %162 = xor i64 %161, %155
  %163 = xor i64 %162, %149
  %164 = and i64 %13, 182110465341374468
  %165 = xor i64 %13, -1
  %166 = xor i64 182110465341374468, %165
  %167 = and i64 %166, 182110465341374468
  %168 = or i64 %7, -4416203312807864329
  %169 = xor i64 %7, -1
  %170 = and i64 %169, -881922945357173187
  %171 = and i64 %7, 881922945357173186
  %172 = or i64 %170, %171
  %173 = xor i64 3563677425862130122, %172
  %174 = xor i64 %7, -1
  %175 = or i64 4416203312807864328, %174
  %176 = xor i64 %175, -1
  %177 = and i64 %176, -1
  %178 = or i64 %173, %177
  %179 = add i64 %3, -3291046599065807327
  %180 = and i64 -3291046599065807327, %3
  %181 = or i64 -3291046599065807327, %3
  %182 = add i64 %180, %181
  %183 = xor i64 %182, %179
  %184 = xor i64 %183, %168
  %185 = xor i64 %184, -6218695218795751001
  %186 = xor i64 %185, %164
  %187 = xor i64 %186, %167
  %188 = xor i64 %187, %178
  %189 = mul i64 %163, %188
  %190 = trunc i64 %189 to i8
  %191 = icmp eq i8 %144, %190
  %192 = mul i8 %140, %140
  %193 = add i8 %192, %140
  %194 = srem i8 %193, 2
  %195 = icmp eq i8 %194, 0
  %196 = xor i1 %191, true
  %197 = and i1 %196, true
  %198 = and i1 %191, false
  %199 = or i1 %197, %198
  %200 = and i64 %13, 7984260880666496370
  %201 = or i64 -7984260880666496371, %13
  %202 = sub i64 %201, -7984260880666496371
  %203 = and i64 %29, 8961536101411983794
  %204 = xor i64 %29, -1
  %205 = or i64 -8961536101411983795, %204
  %206 = xor i64 %205, -1
  %207 = and i64 %206, -1
  %208 = xor i64 %203, %207
  %209 = xor i64 %208, %202
  %210 = xor i64 %209, %200
  %211 = xor i64 %210, -1637901875491160143
  %212 = and i64 %5, -4465162142031493956
  %213 = xor i64 %5, -1
  %214 = xor i64 -4465162142031493956, %213
  %215 = and i64 %214, -4465162142031493956
  %216 = or i64 %13, -8599472355994590639
  %217 = xor i64 %13, -1
  %218 = and i64 %217, 8923726753918399907
  %219 = and i64 %13, -8923726753918399908
  %220 = or i64 %218, %219
  %221 = xor i64 -900725115357882382, %220
  %222 = xor i64 %13, -1
  %223 = or i64 8599472355994590638, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = or i64 %221, %225
  %227 = xor i64 %215, %216
  %228 = xor i64 %227, %226
  %229 = xor i64 %228, -708609474161956527
  %230 = xor i64 %229, %212
  %231 = mul i64 %211, %230
  %232 = trunc i64 %231 to i1
  %233 = xor i1 %195, %232
  %234 = and i1 %233, true
  %235 = and i1 %195, false
  %236 = or i1 %234, %235
  %237 = xor i1 %199, %236
  %238 = xor i1 %191, true
  %239 = xor i1 %195, true
  %240 = or i1 %238, %239
  %241 = xor i1 %240, true
  %242 = and i1 %241, true
  %243 = or i1 %237, %242
  %244 = select i1 %243, i32 388314405, i32 388314400
  %245 = xor i32 %244, 5
  store i32 %245, i32* %2, align 4
  %246 = call i8** @bf11682538603393217460(i32* %2)
  %247 = load i8*, i8** %246, align 8
  indirectbr i8* %247, [label %loopEnd, label %codeRepl]

248:                                              ; preds = %248, %loopStart
  %249 = load float, float* %0, align 4, !tbaa !10
  %250 = fpext float %249 to double
  %251 = fadd double %250, 4.000000e-05
  %252 = fptrunc double %251 to float
  store float %252, float* %0, align 4, !tbaa !10
  %253 = load float, float* %1, align 4, !tbaa !10
  %254 = fpext float %253 to double
  %255 = fadd double %254, 2.000000e-05
  %256 = fptrunc double %255 to float
  store float %256, float* %1, align 4, !tbaa !10
  %257 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %258 = load i32, i32* %257, align 4
  %259 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  %260 = load i32, i32* %259, align 4
  %261 = sub i32 %258, %260
  store i32 %261, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem2, align 4
  %262 = load i8*, i8** %10, align 8
  %263 = load i8, i8* %262, align 1
  %264 = mul i8 %263, 2
  %265 = mul i8 %263, 2
  %266 = add i64 %9, 3820126392211077438
  %267 = and i64 3820126392211077438, %9
  %268 = or i64 3820126392211077438, %9
  %269 = add i64 %267, %268
  %270 = sext i32 %dispatcher1 to i64
  %271 = and i64 %270, 8649203179026477574
  %272 = xor i64 %270, -1
  %273 = or i64 -8649203179026477575, %272
  %274 = xor i64 %273, -1
  %275 = and i64 %274, -1
  %276 = xor i64 %271, -6107092535986274315
  %277 = xor i64 %276, %269
  %278 = xor i64 %277, %266
  %279 = xor i64 %278, %275
  %280 = and i64 %15, 6682381890529256321
  %281 = xor i64 %15, -1
  %282 = or i64 -6682381890529256322, %281
  %283 = xor i64 %282, -1
  %284 = and i64 %283, -1
  %285 = add i64 %9, 72278032227907261
  %286 = sub i64 0, %9
  %287 = sub i64 72278032227907261, %286
  %288 = and i64 %15, 9061657624389359093
  %289 = or i64 -9061657624389359094, %15
  %290 = sub i64 %289, -9061657624389359094
  %291 = xor i64 %285, %287
  %292 = xor i64 %291, %288
  %293 = xor i64 %292, %280
  %294 = xor i64 %293, -2065512954006312774
  %295 = xor i64 %294, %284
  %296 = xor i64 %295, %290
  %297 = mul i64 %279, %296
  %298 = trunc i64 %297 to i8
  %299 = add i8 %298, %265
  %300 = mul i8 %264, %299
  %301 = srem i8 %300, 4
  %302 = icmp eq i8 %301, 0
  %303 = mul i8 %263, %263
  %304 = sub i8 %303, 31
  %305 = add i8 %304, %263
  %306 = add i8 %305, 31
  %307 = add i64 %9, -8627966265876407585
  %308 = add i64 -544650690158100870, %9
  %309 = sub i64 %308, 8083315575718306715
  %310 = add i64 %11, -7685917625103525426
  %311 = add i64 -18533000987533324, %11
  %312 = add i64 %311, -7667384624115992102
  %313 = add i64 %29, 7421336305286428737
  %314 = and i64 7421336305286428737, %29
  %315 = or i64 7421336305286428737, %29
  %316 = add i64 %314, %315
  %317 = xor i64 %316, %313
  %318 = xor i64 %317, -6937290028418669855
  %319 = xor i64 %318, %312
  %320 = xor i64 %319, %310
  %321 = xor i64 %320, %309
  %322 = xor i64 %321, %307
  %323 = or i64 %15, -8273420870499107428
  %324 = xor i64 %15, -1
  %325 = and i64 -8273420870499107428, %324
  %326 = add i64 %325, %15
  %327 = and i64 %17, 1971800211996757491
  %328 = xor i64 %17, -1
  %329 = or i64 -1971800211996757492, %328
  %330 = xor i64 %329, -1
  %331 = and i64 %330, -1
  %332 = xor i64 %323, -4717454085757091262
  %333 = xor i64 %332, %327
  %334 = xor i64 %333, %326
  %335 = xor i64 %334, %331
  %336 = mul i64 %322, %335
  %337 = trunc i64 %336 to i8
  %338 = srem i8 %306, %337
  %339 = icmp eq i8 %338, 0
  %340 = and i1 %302, %339
  %341 = select i1 %340, i32 388314403, i32 388314400
  %342 = xor i32 %341, -1
  %343 = and i32 %342, 3
  %344 = and i32 %341, -4
  %345 = or i32 %343, %344
  store i32 %345, i32* %2, align 4
  %346 = call i8** @bf11682538603393217460(i32* %2)
  %347 = load i8*, i8** %346, align 8
  indirectbr i8* %347, [label %loopEnd, label %248]

348:                                              ; preds = %loopStart
  %.reload3 = load i32, i32* %.reg2mem2, align 4
  ret i32 %.reload3

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %349 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %349, align 4
  %350 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %350, align 4
  %351 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %351, align 4
  %352 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %352, align 4
  %353 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %353, align 4
  %354 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %355 = load i32, i32* %354, align 4
  store i32 %355, i32* %dispatcher, align 4
  %356 = load i8*, i8** %14, align 8
  %357 = load i8, i8* %356, align 1
  %358 = mul i8 %357, %357
  %359 = add i8 %358, %357
  %360 = mul i8 %359, 3
  %361 = srem i8 %360, 2
  %362 = icmp eq i8 %361, 0
  %363 = mul i8 %357, %357
  %364 = add i8 %363, %357
  %365 = srem i8 %364, 2
  %366 = icmp eq i8 %365, 0
  %367 = and i1 %362, %366
  %368 = select i1 %367, i32 388314403, i32 388314413
  %369 = or i64 %11, -3880522732865392398
  %370 = and i64 -3880522732865392398, %11
  %371 = xor i64 -3880522732865392398, %11
  %372 = or i64 %370, %371
  %373 = and i64 %29, -3341981661083509068
  %374 = xor i64 %29, -1
  %375 = xor i64 -3341981661083509068, %374
  %376 = and i64 %375, -3341981661083509068
  %377 = xor i64 7002542959241995633, %369
  %378 = xor i64 %377, %376
  %379 = xor i64 %378, %373
  %380 = xor i64 %379, %372
  %381 = sext i32 %dispatcher1 to i64
  %382 = and i64 %381, 7202889949397018473
  %383 = or i64 -7202889949397018474, %381
  %384 = sub i64 %383, -7202889949397018474
  %385 = and i64 %11, 6876159234306084499
  %386 = or i64 -6876159234306084500, %11
  %387 = sub i64 %386, -6876159234306084500
  %388 = or i64 %3, -8271383253529328332
  %389 = xor i64 %3, -1
  %390 = and i64 %389, 1032994360403978305
  %391 = and i64 %3, -1032994360403978306
  %392 = or i64 %390, %391
  %393 = xor i64 -8979110971807535755, %392
  %394 = xor i64 %3, -1
  %395 = or i64 8271383253529328331, %394
  %396 = xor i64 %395, -1
  %397 = and i64 %396, -1
  %398 = or i64 %393, %397
  %399 = xor i64 %382, %384
  %400 = xor i64 %399, %398
  %401 = xor i64 %400, -377828174682930706
  %402 = xor i64 %401, %388
  %403 = xor i64 %402, %387
  %404 = xor i64 %403, %385
  %405 = mul i64 %380, %404
  %406 = trunc i64 %405 to i32
  %407 = xor i32 %368, %406
  store i32 %407, i32* %2, align 4
  %408 = call i8** @bf11682538603393217460(i32* %2)
  %409 = load i8*, i8** %408, align 8
  indirectbr i8* %409, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %410 = load i8*, i8** %18, align 8
  %411 = load i8, i8* %410, align 1
  %412 = add i64 %5, 7240960808593588197
  %413 = and i64 7240960808593588197, %5
  %414 = or i64 7240960808593588197, %5
  %415 = add i64 %413, %414
  %416 = or i64 %13, 5124577261575332186
  %417 = xor i64 %13, -1
  %418 = and i64 5124577261575332186, %417
  %419 = add i64 %418, %13
  %420 = xor i64 %415, 8736324736514381719
  %421 = xor i64 %420, %416
  %422 = xor i64 %421, %412
  %423 = xor i64 %422, %419
  %424 = and i64 %11, -6174609413691371258
  %425 = or i64 6174609413691371257, %11
  %426 = sub i64 %425, 6174609413691371257
  %427 = and i64 %9, 1428718507006032601
  %428 = xor i64 %9, -1
  %429 = or i64 -1428718507006032602, %428
  %430 = xor i64 %429, -1
  %431 = and i64 %430, -1
  %432 = xor i64 %431, %424
  %433 = xor i64 %432, %426
  %434 = xor i64 %433, -1474908456311574450
  %435 = xor i64 %434, %427
  %436 = mul i64 %423, %435
  %437 = trunc i64 %436 to i8
  %438 = mul i8 %411, %437
  %439 = mul i8 %411, 2
  %440 = add i8 2, %439
  %441 = mul i8 %438, %440
  %442 = or i64 %29, 8455963706993467626
  %443 = xor i64 %29, -1
  %444 = and i64 %443, 6449960708616384419
  %445 = and i64 %29, -6449960708616384420
  %446 = or i64 %444, %445
  %447 = xor i64 3232250995719180105, %446
  %448 = xor i64 %29, -1
  %449 = or i64 -8455963706993467627, %448
  %450 = xor i64 %449, -1
  %451 = and i64 %450, -1
  %452 = or i64 %447, %451
  %453 = sext i32 %dispatcher1 to i64
  %454 = or i64 %453, -4807505132240557443
  %455 = xor i64 %453, -1
  %456 = and i64 %455, 8831527662900816556
  %457 = and i64 %453, -8831527662900816557
  %458 = or i64 %456, %457
  %459 = xor i64 -4051080139980537647, %458
  %460 = xor i64 %453, -1
  %461 = or i64 4807505132240557442, %460
  %462 = xor i64 %461, -1
  %463 = and i64 %462, -1
  %464 = or i64 %459, %463
  %465 = or i64 %3, -9023017207014955227
  %466 = xor i64 %3, -1
  %467 = and i64 %466, -4255728032034333675
  %468 = and i64 %3, 4255728032034333674
  %469 = or i64 %467, %468
  %470 = xor i64 5059600946079284016, %469
  %471 = xor i64 %3, -1
  %472 = or i64 9023017207014955226, %471
  %473 = xor i64 %472, -1
  %474 = and i64 %473, -1
  %475 = or i64 %470, %474
  %476 = xor i64 6201526394207219611, %452
  %477 = xor i64 %476, %465
  %478 = xor i64 %477, %475
  %479 = xor i64 %478, %464
  %480 = xor i64 %479, %454
  %481 = xor i64 %480, %442
  %482 = and i64 %3, 5519232276989831247
  %483 = or i64 -5519232276989831248, %3
  %484 = sub i64 %483, -5519232276989831248
  %485 = add i64 %15, -6957900454288968785
  %486 = add i64 8879549833219417474, %15
  %487 = add i64 %486, 2609293786201165357
  %488 = and i64 %13, -1896027464175819439
  %489 = xor i64 %13, -1
  %490 = or i64 1896027464175819438, %489
  %491 = xor i64 %490, -1
  %492 = and i64 %491, -1
  %493 = xor i64 %492, %488
  %494 = xor i64 %493, %485
  %495 = xor i64 %494, %482
  %496 = xor i64 %495, %484
  %497 = xor i64 %496, %487
  %498 = xor i64 %497, 6028289532744333900
  %499 = mul i64 %481, %498
  %500 = trunc i64 %499 to i8
  %501 = srem i8 %441, %500
  %502 = or i64 %3, -1660710091815265002
  %503 = and i64 -1660710091815265002, %3
  %504 = xor i64 -1660710091815265002, %3
  %505 = or i64 %503, %504
  %506 = add i64 %17, 4378410609585347526
  %507 = and i64 4378410609585347526, %17
  %508 = or i64 4378410609585347526, %17
  %509 = add i64 %507, %508
  %510 = xor i64 %506, %502
  %511 = xor i64 %510, -5322007395626445995
  %512 = xor i64 %511, %505
  %513 = xor i64 %512, %509
  %514 = and i64 %29, -8257021315116691057
  %515 = xor i64 %29, -1
  %516 = or i64 8257021315116691056, %515
  %517 = xor i64 %516, -1
  %518 = and i64 %517, -1
  %519 = sext i32 %dispatcher1 to i64
  %520 = and i64 %519, -4265790524845452968
  %521 = xor i64 %519, -1
  %522 = xor i64 -4265790524845452968, %521
  %523 = and i64 %522, -4265790524845452968
  %524 = and i64 %17, -2684665149047775398
  %525 = xor i64 %17, -1
  %526 = or i64 2684665149047775397, %525
  %527 = xor i64 %526, -1
  %528 = and i64 %527, -1
  %529 = xor i64 %514, %523
  %530 = xor i64 %529, 0
  %531 = xor i64 %530, %524
  %532 = xor i64 %531, %528
  %533 = xor i64 %532, %518
  %534 = xor i64 %533, %520
  %535 = mul i64 %513, %534
  %536 = trunc i64 %535 to i8
  %537 = icmp eq i8 %501, %536
  %538 = mul i8 %411, %411
  %539 = xor i8 %538, %411
  %540 = and i8 %538, %411
  %541 = mul i8 2, %540
  %542 = add i8 %539, %541
  %543 = mul i8 39, %542
  %544 = add i64 %11, -2520546166887090803
  %545 = xor i64 -2520546166887090803, %11
  %546 = and i64 -2520546166887090803, %11
  %547 = mul i64 2, %546
  %548 = add i64 %545, %547
  %549 = and i64 %29, 7995687303984901745
  %550 = xor i64 %29, -1
  %551 = or i64 -7995687303984901746, %550
  %552 = xor i64 %551, -1
  %553 = and i64 %552, -1
  %554 = xor i64 -9095253040884892307, %548
  %555 = xor i64 %554, %544
  %556 = xor i64 %555, %549
  %557 = xor i64 %556, %553
  %558 = or i64 %3, 5313695984527480946
  %559 = xor i64 %3, -1
  %560 = and i64 5313695984527480946, %559
  %561 = add i64 %560, %3
  %562 = and i64 %3, -2276959614285221445
  %563 = or i64 2276959614285221444, %3
  %564 = sub i64 %563, 2276959614285221444
  %565 = xor i64 %564, %558
  %566 = xor i64 %565, 6242571194399921427
  %567 = xor i64 %566, %562
  %568 = xor i64 %567, %561
  %569 = mul i64 %557, %568
  %570 = trunc i64 %569 to i8
  %571 = add i8 %570, %543
  %572 = mul i8 -105, %571
  %573 = add i8 111, %572
  %574 = srem i8 %573, 2
  %575 = or i64 %13, -6429624377904957503
  %576 = xor i64 %13, -1
  %577 = and i64 -6429624377904957503, %576
  %578 = add i64 %577, %13
  %579 = or i64 %17, -4120847097404889389
  %580 = xor i64 %17, -1
  %581 = and i64 -4120847097404889389, %580
  %582 = add i64 %581, %17
  %583 = xor i64 %578, %575
  %584 = xor i64 %583, %579
  %585 = xor i64 %584, 1653044981328999433
  %586 = xor i64 %585, %582
  %587 = add i64 %29, -293955186322379228
  %588 = add i64 -5805633005858475792, %29
  %589 = add i64 %588, 5511677819536096564
  %590 = sext i32 %dispatcher1 to i64
  %591 = or i64 %590, -7258706078011780191
  %592 = xor i64 %590, -1
  %593 = and i64 %592, -2287894716767442798
  %594 = and i64 %590, 2287894716767442797
  %595 = or i64 %593, %594
  %596 = xor i64 8898029465577650995, %595
  %597 = xor i64 %590, -1
  %598 = or i64 7258706078011780190, %597
  %599 = xor i64 %598, -1
  %600 = and i64 %599, -1
  %601 = or i64 %596, %600
  %602 = xor i64 %591, %589
  %603 = xor i64 %602, %601
  %604 = xor i64 %603, %587
  %605 = xor i64 %604, 0
  %606 = mul i64 %586, %605
  %607 = trunc i64 %606 to i8
  %608 = icmp eq i8 %574, %607
  %609 = xor i1 %608, true
  %610 = xor i1 %537, %609
  %611 = and i1 %610, %537
  %612 = select i1 %611, i32 388314401, i32 388314400
  %613 = or i32 %612, 1
  %614 = and i32 %612, 1
  %615 = sub i32 %613, %614
  store i32 %615, i32* %2, align 4
  %616 = call i8** @bf11682538603393217460(i32* %2)
  %617 = load i8*, i8** %616, align 8
  indirectbr i8* %617, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %248, %codeRepl, %EntryBasicBlockSplit
  %618 = load i8*, i8** %6, align 8
  %619 = load i8, i8* %618, align 1
  %620 = and i64 %17, 1131923650408806770
  %621 = xor i64 %17, -1
  %622 = xor i64 1131923650408806770, %621
  %623 = and i64 %622, 1131923650408806770
  %624 = add i64 %15, -8938437002088774769
  %625 = add i64 6117044103619178902, %15
  %626 = add i64 %625, 3391262968001597945
  %627 = xor i64 %624, %623
  %628 = xor i64 %627, %626
  %629 = xor i64 %628, 2376056557571410327
  %630 = xor i64 %629, %620
  %631 = and i64 %9, 3858375083479061553
  %632 = or i64 -3858375083479061554, %9
  %633 = sub i64 %632, -3858375083479061554
  %634 = and i64 %29, -8386330297972821080
  %635 = xor i64 %29, -1
  %636 = xor i64 -8386330297972821080, %635
  %637 = and i64 %636, -8386330297972821080
  %638 = or i64 %17, 1682716695317075620
  %639 = xor i64 %17, -1
  %640 = and i64 %639, 978208772940560765
  %641 = and i64 %17, -978208772940560766
  %642 = or i64 %640, %641
  %643 = xor i64 1930212838080819161, %642
  %644 = xor i64 %17, -1
  %645 = or i64 -1682716695317075621, %644
  %646 = xor i64 %645, -1
  %647 = and i64 %646, -1
  %648 = or i64 %643, %647
  %649 = xor i64 %633, %637
  %650 = xor i64 %649, %634
  %651 = xor i64 %650, %631
  %652 = xor i64 %651, -4249903497845471705
  %653 = xor i64 %652, %638
  %654 = xor i64 %653, %648
  %655 = mul i64 %630, %654
  %656 = trunc i64 %655 to i8
  %657 = and i8 %619, %656
  %658 = icmp eq i8 %657, 0
  %659 = mul i8 %619, %619
  %660 = add i8 %659, -45
  %661 = add i8 %660, %619
  %662 = sub i8 %661, -45
  %663 = mul i8 %662, 3
  %664 = srem i8 %663, 2
  %665 = icmp eq i8 %664, 0
  %666 = and i1 %658, %665
  %667 = xor i1 %658, %665
  %668 = or i1 %666, %667
  %669 = select i1 %668, i32 388314401, i32 388314401
  %670 = add i64 %3, 1589320538204168382
  %671 = and i64 1589320538204168382, %3
  %672 = or i64 1589320538204168382, %3
  %673 = add i64 %671, %672
  %674 = or i64 %29, -1266156863918274327
  %675 = and i64 -1266156863918274327, %29
  %676 = xor i64 -1266156863918274327, %29
  %677 = or i64 %675, %676
  %678 = xor i64 %677, %670
  %679 = xor i64 %678, %674
  %680 = xor i64 %679, 7652068015856476025
  %681 = xor i64 %680, %673
  %682 = add i64 %7, -1994847153311087836
  %683 = sub i64 0, %7
  %684 = add i64 1994847153311087836, %683
  %685 = sub i64 0, %684
  %686 = add i64 %15, 1460104956312481888
  %687 = xor i64 1460104956312481888, %15
  %688 = and i64 1460104956312481888, %15
  %689 = mul i64 2, %688
  %690 = add i64 %687, %689
  %691 = and i64 %3, 136641133341581298
  %692 = xor i64 %3, -1
  %693 = or i64 -136641133341581299, %692
  %694 = xor i64 %693, -1
  %695 = and i64 %694, -1
  %696 = xor i64 %691, %682
  %697 = xor i64 %696, %690
  %698 = xor i64 %697, %686
  %699 = xor i64 %698, %685
  %700 = xor i64 %699, %695
  %701 = xor i64 %700, 0
  %702 = mul i64 %681, %701
  %703 = trunc i64 %702 to i32
  %704 = xor i32 %669, %703
  store i32 %704, i32* %2, align 4
  %705 = call i8** @bf11682538603393217460(i32* %2)
  %706 = load i8*, i8** %705, align 8
  indirectbr i8* %706, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define i32 @render(float* %0, float* %1, i8* nocapture readonly %2, i64 %3) local_unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h9549842938191327224(i64 388314400)
  %6 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %5
  store i8* blockaddress(@render, %"43"), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314423)
  %8 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %7
  store i8* blockaddress(@render, %"42"), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314370)
  %10 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %9
  store i8* blockaddress(@render, %"35"), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314414)
  %12 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %11
  store i8* blockaddress(@render, %"32"), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314431)
  %14 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %13
  store i8* blockaddress(@render, %"31"), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314368)
  %16 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %15
  store i8* blockaddress(@render, %"28"), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314418)
  %18 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %17
  store i8* blockaddress(@render, %"27"), i8** %18, align 8
  %19 = call i64 @h9549842938191327224(i64 388314426)
  %20 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %19
  store i8* blockaddress(@render, %"25"), i8** %20, align 8
  %21 = call i64 @h9549842938191327224(i64 388314401)
  %22 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %21
  store i8* blockaddress(@render, %"45"), i8** %22, align 8
  %23 = call i64 @h9549842938191327224(i64 388314424)
  %24 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %23
  store i8* blockaddress(@render, %codeRepl63), i8** %24, align 8
  %25 = call i64 @h9549842938191327224(i64 388314405)
  %26 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %25
  store i8* blockaddress(@render, %"38"), i8** %26, align 8
  %27 = call i64 @h9549842938191327224(i64 388314376)
  %28 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %27
  store i8* blockaddress(@render, %"23"), i8** %28, align 8
  %29 = call i64 @h9549842938191327224(i64 388314412)
  %30 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %29
  store i8* blockaddress(@render, %"44"), i8** %30, align 8
  %31 = call i64 @h9549842938191327224(i64 388314416)
  %32 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %31
  store i8* blockaddress(@render, %codeRepl44), i8** %32, align 8
  %33 = call i64 @h9549842938191327224(i64 388314373)
  %34 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %33
  store i8* blockaddress(@render, %"21"), i8** %34, align 8
  %35 = or i64 %3, 2958765589508089502
  %36 = xor i64 %3, -1
  %37 = and i64 2958765589508089502, %36
  %38 = add i64 %37, %3
  %39 = add i64 %3, -7396130029095136470
  %40 = sub i64 0, %3
  %41 = add i64 7396130029095136470, %40
  %42 = sub i64 0, %41
  %43 = xor i64 %42, %39
  %44 = xor i64 %43, %38
  %45 = xor i64 %44, 3786353770585685693
  %46 = xor i64 %45, %35
  %47 = or i64 %3, -2683097200817670316
  %48 = xor i64 %3, -1
  %49 = and i64 %48, -8997193373309049792
  %50 = and i64 %3, 8997193373309049791
  %51 = or i64 %49, %50
  %52 = xor i64 6476234557317223188, %51
  %53 = xor i64 %3, -1
  %54 = or i64 2683097200817670315, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = or i64 %3, -6054086222384322
  %59 = and i64 -6054086222384322, %3
  %60 = xor i64 -6054086222384322, %3
  %61 = or i64 %59, %60
  %62 = or i64 %3, -94695360893157003
  %63 = and i64 -94695360893157003, %3
  %64 = xor i64 -94695360893157003, %3
  %65 = or i64 %63, %64
  %66 = xor i64 %61, %47
  %67 = xor i64 %66, -7784607123773594701
  %68 = xor i64 %67, %58
  %69 = xor i64 %68, %65
  %70 = xor i64 %69, %57
  %71 = xor i64 %70, %62
  %72 = mul i64 %46, %71
  %73 = call i64 @h9549842938191327224(i64 %72)
  %74 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %73
  store i8* blockaddress(@render, %"24"), i8** %74, align 8
  %75 = call i64 @h9549842938191327224(i64 388314411)
  %76 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %75
  store i8* blockaddress(@render, %"20"), i8** %76, align 8
  %77 = call i64 @h9549842938191327224(i64 388314430)
  %78 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %77
  store i8* blockaddress(@render, %"29"), i8** %78, align 8
  %79 = call i64 @h9549842938191327224(i64 388314420)
  %80 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %79
  store i8* blockaddress(@render, %"26"), i8** %80, align 8
  %81 = call i64 @h9549842938191327224(i64 388314404)
  %82 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %81
  store i8* blockaddress(@render, %"19"), i8** %82, align 8
  %83 = call i64 @h9549842938191327224(i64 388314408)
  %84 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %83
  store i8* blockaddress(@render, %"5"), i8** %84, align 8
  %85 = call i64 @h9549842938191327224(i64 388314413)
  %86 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %85
  store i8* blockaddress(@render, %codeRepl54), i8** %86, align 8
  %87 = call i64 @h9549842938191327224(i64 388314382)
  %88 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %87
  store i8* blockaddress(@render, %"40"), i8** %88, align 8
  %89 = call i64 @h9549842938191327224(i64 388314421)
  %90 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %89
  store i8* blockaddress(@render, %"16"), i8** %90, align 8
  %91 = call i64 @h9549842938191327224(i64 388314377)
  %92 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %91
  store i8* blockaddress(@render, %"14"), i8** %92, align 8
  %93 = or i64 %3, 8737462183970107708
  %94 = xor i64 %3, -1
  %95 = and i64 8737462183970107708, %94
  %96 = add i64 %95, %3
  %97 = and i64 %3, 3876573975630875997
  %98 = or i64 -3876573975630875998, %3
  %99 = sub i64 %98, -3876573975630875998
  %100 = xor i64 %93, 1064256754824381263
  %101 = xor i64 %100, %99
  %102 = xor i64 %101, %96
  %103 = xor i64 %102, %97
  %104 = add i64 %3, -6849395055074759935
  %105 = add i64 4610940199169900803, %3
  %106 = add i64 %105, 6986408819464890878
  %107 = or i64 %3, -7022581176243168558
  %108 = xor i64 %3, -1
  %109 = and i64 %108, -5516490622970222071
  %110 = and i64 %3, 5516490622970222070
  %111 = or i64 %109, %110
  %112 = xor i64 3313447151861264603, %111
  %113 = xor i64 %3, -1
  %114 = or i64 7022581176243168557, %113
  %115 = xor i64 %114, -1
  %116 = and i64 %115, -1
  %117 = or i64 %112, %116
  %118 = or i64 %3, -6663466939245891352
  %119 = xor i64 %3, -1
  %120 = and i64 %119, 1910125605198790861
  %121 = and i64 %3, -1910125605198790862
  %122 = or i64 %120, %121
  %123 = xor i64 -5114755462378491867, %122
  %124 = xor i64 %3, -1
  %125 = or i64 6663466939245891351, %124
  %126 = xor i64 %125, -1
  %127 = and i64 %126, -1
  %128 = or i64 %123, %127
  %129 = xor i64 -6693712389751523295, %106
  %130 = xor i64 %129, %117
  %131 = xor i64 %130, %128
  %132 = xor i64 %131, %104
  %133 = xor i64 %132, %118
  %134 = xor i64 %133, %107
  %135 = mul i64 %103, %134
  %136 = call i64 @h9549842938191327224(i64 %135)
  %137 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %136
  store i8* blockaddress(@render, %"13"), i8** %137, align 8
  %138 = call i64 @h9549842938191327224(i64 388314409)
  %139 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %138
  store i8* blockaddress(@render, %"41"), i8** %139, align 8
  %140 = call i64 @h9549842938191327224(i64 388314380)
  %141 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %140
  store i8* blockaddress(@render, %codeRepl31), i8** %141, align 8
  %142 = call i64 @h9549842938191327224(i64 388314406)
  %143 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %142
  store i8* blockaddress(@render, %codeRepl17), i8** %143, align 8
  %144 = call i64 @h9549842938191327224(i64 388314429)
  %145 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %144
  store i8* blockaddress(@render, %"10"), i8** %145, align 8
  %146 = call i64 @h9549842938191327224(i64 388314410)
  %147 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %146
  store i8* blockaddress(@render, %"37"), i8** %147, align 8
  %148 = call i64 @h9549842938191327224(i64 388314381)
  %149 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %148
  store i8* blockaddress(@render, %"33"), i8** %149, align 8
  %150 = add i64 %3, 8957281310463205225
  %151 = add i64 -5124225606041367422, %3
  %152 = add i64 %151, -4365237157204978969
  %153 = or i64 %3, -2312379060956373377
  %154 = xor i64 %3, -1
  %155 = and i64 -2312379060956373377, %154
  %156 = add i64 %155, %3
  %157 = xor i64 %156, -7333331282033067919
  %158 = xor i64 %157, %153
  %159 = xor i64 %158, %152
  %160 = xor i64 %159, %150
  %161 = or i64 %3, -2238803055902791793
  %162 = xor i64 %3, -1
  %163 = and i64 %162, 8124422508809252491
  %164 = and i64 %3, -8124422508809252492
  %165 = or i64 %163, %164
  %166 = xor i64 -8047489149871486716, %165
  %167 = xor i64 %3, -1
  %168 = or i64 2238803055902791792, %167
  %169 = xor i64 %168, -1
  %170 = and i64 %169, -1
  %171 = or i64 %166, %170
  %172 = or i64 %3, -5030276093244188726
  %173 = and i64 -5030276093244188726, %3
  %174 = xor i64 -5030276093244188726, %3
  %175 = or i64 %173, %174
  %176 = add i64 %3, -8046367610712478255
  %177 = sub i64 0, %3
  %178 = sub i64 -8046367610712478255, %177
  %179 = xor i64 %171, %178
  %180 = xor i64 %179, %172
  %181 = xor i64 %180, %161
  %182 = xor i64 %181, 6856397900550571772
  %183 = xor i64 %182, %175
  %184 = xor i64 %183, %176
  %185 = mul i64 %160, %184
  %186 = call i64 @h9549842938191327224(i64 %185)
  %187 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %186
  store i8* blockaddress(@render, %"9"), i8** %187, align 8
  %188 = add i64 %3, -7295842594933121207
  %189 = xor i64 -7295842594933121207, %3
  %190 = and i64 -7295842594933121207, %3
  %191 = mul i64 2, %190
  %192 = add i64 %189, %191
  %193 = or i64 %3, -5344092015146327832
  %194 = xor i64 %3, -1
  %195 = and i64 %194, 4446817469677606734
  %196 = and i64 %3, -4446817469677606735
  %197 = or i64 %195, %196
  %198 = xor i64 -8618838218880501850, %197
  %199 = xor i64 %3, -1
  %200 = or i64 5344092015146327831, %199
  %201 = xor i64 %200, -1
  %202 = and i64 %201, -1
  %203 = or i64 %198, %202
  %204 = xor i64 %192, %203
  %205 = xor i64 %204, 9064225347063158367
  %206 = xor i64 %205, %193
  %207 = xor i64 %206, %188
  %208 = and i64 %3, -5548081584162974738
  %209 = xor i64 %3, -1
  %210 = or i64 5548081584162974737, %209
  %211 = xor i64 %210, -1
  %212 = and i64 %211, -1
  %213 = and i64 %3, 2139222745673928995
  %214 = xor i64 %3, -1
  %215 = xor i64 2139222745673928995, %214
  %216 = and i64 %215, 2139222745673928995
  %217 = and i64 %3, -8338670665345639425
  %218 = xor i64 %3, -1
  %219 = xor i64 -8338670665345639425, %218
  %220 = and i64 %219, -8338670665345639425
  %221 = xor i64 -7690804843759834265, %212
  %222 = xor i64 %221, %216
  %223 = xor i64 %222, %208
  %224 = xor i64 %223, %213
  %225 = xor i64 %224, %217
  %226 = xor i64 %225, %220
  %227 = mul i64 %207, %226
  %228 = call i64 @h9549842938191327224(i64 %227)
  %229 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %228
  store i8* blockaddress(@render, %codeRepl56), i8** %229, align 8
  %230 = call i64 @h9549842938191327224(i64 388314419)
  %231 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %230
  store i8* blockaddress(@render, %"4"), i8** %231, align 8
  %232 = call i64 @h9549842938191327224(i64 388314374)
  %233 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %232
  store i8* blockaddress(@render, %codeRepl1), i8** %233, align 8
  %234 = call i64 @h9549842938191327224(i64 388314402)
  %235 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %234
  store i8* blockaddress(@render, %"6"), i8** %235, align 8
  %236 = call i64 @h9549842938191327224(i64 388314369)
  %237 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %236
  store i8* blockaddress(@render, %"30"), i8** %237, align 8
  %238 = add i64 %3, -2362028773445237973
  %239 = add i64 -8059948222014242238, %3
  %240 = add i64 %239, 5697919448569004265
  %241 = or i64 %3, 8041507598595796276
  %242 = xor i64 %3, -1
  %243 = and i64 8041507598595796276, %242
  %244 = add i64 %243, %3
  %245 = add i64 %3, 6655313996134674790
  %246 = sub i64 0, %3
  %247 = add i64 -6655313996134674790, %246
  %248 = sub i64 0, %247
  %249 = xor i64 %240, %238
  %250 = xor i64 %249, %245
  %251 = xor i64 %250, %248
  %252 = xor i64 %251, %244
  %253 = xor i64 %252, 3041898297421699701
  %254 = xor i64 %253, %241
  %255 = or i64 %3, 7365883547659249505
  %256 = and i64 7365883547659249505, %3
  %257 = xor i64 7365883547659249505, %3
  %258 = or i64 %256, %257
  %259 = and i64 %3, 1209844432109040291
  %260 = xor i64 %3, -1
  %261 = or i64 -1209844432109040292, %260
  %262 = xor i64 %261, -1
  %263 = and i64 %262, -1
  %264 = xor i64 %259, %255
  %265 = xor i64 %264, %258
  %266 = xor i64 %265, %263
  %267 = xor i64 %266, 5758488562926239134
  %268 = mul i64 %254, %267
  %269 = call i64 @h9549842938191327224(i64 %268)
  %270 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %269
  store i8* blockaddress(@render, %"3"), i8** %270, align 8
  %271 = call i64 @h9549842938191327224(i64 388314427)
  %272 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %271
  store i8* blockaddress(@render, %.preheader), i8** %272, align 8
  %273 = call i64 @h9549842938191327224(i64 388314375)
  %274 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %273
  store i8* blockaddress(@render, %EntryBasicBlockSplit), i8** %274, align 8
  %275 = call i64 @h9549842938191327224(i64 388314383)
  %276 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %275
  store i8* blockaddress(@render, %codeRepl), i8** %276, align 8
  %277 = and i64 %3, 1532479713796033544
  %278 = xor i64 %3, -1
  %279 = or i64 -1532479713796033545, %278
  %280 = xor i64 %279, -1
  %281 = and i64 %280, -1
  %282 = add i64 %3, 944213919205888437
  %283 = add i64 -7460494037978943558, %3
  %284 = sub i64 %283, -8404707957184831995
  %285 = and i64 %3, 4299570587262920350
  %286 = xor i64 %3, -1
  %287 = or i64 -4299570587262920351, %286
  %288 = xor i64 %287, -1
  %289 = and i64 %288, -1
  %290 = xor i64 %277, %282
  %291 = xor i64 %290, %289
  %292 = xor i64 %291, %285
  %293 = xor i64 %292, -6551765603626818261
  %294 = xor i64 %293, %284
  %295 = xor i64 %294, %281
  %296 = and i64 %3, -6467167090431644408
  %297 = or i64 6467167090431644407, %3
  %298 = sub i64 %297, 6467167090431644407
  %299 = or i64 %3, -7513264337027112626
  %300 = xor i64 %3, -1
  %301 = and i64 %300, -5411153170009024669
  %302 = and i64 %3, 5411153170009024668
  %303 = or i64 %301, %302
  %304 = xor i64 2547978803997668909, %303
  %305 = xor i64 %3, -1
  %306 = or i64 7513264337027112625, %305
  %307 = xor i64 %306, -1
  %308 = and i64 %307, -1
  %309 = or i64 %304, %308
  %310 = xor i64 1564232447011798945, %298
  %311 = xor i64 %310, %299
  %312 = xor i64 %311, %296
  %313 = xor i64 %312, %309
  %314 = mul i64 %295, %313
  %315 = call i64 @h9549842938191327224(i64 %314)
  %316 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %315
  store i8* blockaddress(@render, %codeRepl58), i8** %316, align 8
  %317 = call i64 @h9549842938191327224(i64 388314403)
  %318 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %317
  store i8* blockaddress(@render, %.loopexit), i8** %318, align 8
  %319 = call i64 @h9549842938191327224(i64 388314417)
  %320 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %319
  store i8* blockaddress(@render, %"22"), i8** %320, align 8
  %321 = call i64 @h9549842938191327224(i64 388314372)
  %322 = getelementptr [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %321
  store i8* blockaddress(@render, %BogusBasciBlock), i8** %322, align 8
  %.reg2mem238 = alloca i1, align 1
  %.reg2mem236 = alloca i1, align 1
  %.reg2mem234 = alloca i32, align 4
  %323 = or i64 %3, -3179473372665328783
  %324 = xor i64 %3, -1
  %325 = and i64 -3179473372665328783, %324
  %326 = add i64 %325, %3
  %327 = add i64 %3, -3287654693086610646
  %328 = xor i64 -3287654693086610646, %3
  %329 = and i64 -3287654693086610646, %3
  %330 = mul i64 2, %329
  %331 = add i64 %328, %330
  %332 = or i64 %3, 3239625412991086059
  %333 = xor i64 %3, -1
  %334 = and i64 3239625412991086059, %333
  %335 = add i64 %334, %3
  %336 = xor i64 5484590188803930697, %331
  %337 = xor i64 %336, %332
  %338 = xor i64 %337, %323
  %339 = xor i64 %338, %326
  %340 = xor i64 %339, %327
  %341 = xor i64 %340, %335
  %342 = add i64 %3, 8133041473704659406
  %343 = sub i64 0, %3
  %344 = add i64 -8133041473704659406, %343
  %345 = sub i64 0, %344
  %346 = or i64 %3, -6923064598909825051
  %347 = and i64 -6923064598909825051, %3
  %348 = xor i64 -6923064598909825051, %3
  %349 = or i64 %347, %348
  %350 = add i64 %3, -8500655267922852079
  %351 = xor i64 -8500655267922852079, %3
  %352 = and i64 -8500655267922852079, %3
  %353 = mul i64 2, %352
  %354 = add i64 %351, %353
  %355 = xor i64 %350, %346
  %356 = xor i64 %355, %345
  %357 = xor i64 %356, %342
  %358 = xor i64 %357, %349
  %359 = xor i64 %358, -5800123706211248135
  %360 = xor i64 %359, %354
  %361 = mul i64 %341, %360
  %362 = trunc i64 %361 to i32
  %.ph.reg2mem = alloca i32, i32 %362, align 4
  %.reg2mem232 = alloca i32, align 4
  %.reg2mem230 = alloca i1, align 1
  %.reg2mem228 = alloca i64, align 8
  %.reg2mem226 = alloca i32, align 4
  %.reg2mem224 = alloca i64, align 8
  %.reg2mem221 = alloca i1, align 1
  %.reload61.reg2mem = alloca i64, align 8
  %363 = and i64 %3, -350131490005677772
  %364 = or i64 350131490005677771, %3
  %365 = sub i64 %364, 350131490005677771
  %366 = or i64 %3, 8861750011058095983
  %367 = xor i64 %3, -1
  %368 = and i64 8861750011058095983, %367
  %369 = add i64 %368, %3
  %370 = xor i64 %363, %365
  %371 = xor i64 %370, 8267394461469367007
  %372 = xor i64 %371, %369
  %373 = xor i64 %372, %366
  %374 = add i64 %3, -5918524735905318092
  %375 = and i64 -5918524735905318092, %3
  %376 = or i64 -5918524735905318092, %3
  %377 = add i64 %375, %376
  %378 = and i64 %3, 4110828568081277049
  %379 = xor i64 %3, -1
  %380 = or i64 -4110828568081277050, %379
  %381 = xor i64 %380, -1
  %382 = and i64 %381, -1
  %383 = and i64 %3, -7507668864137028425
  %384 = xor i64 %3, -1
  %385 = or i64 7507668864137028424, %384
  %386 = xor i64 %385, -1
  %387 = and i64 %386, -1
  %388 = xor i64 1648083632230785311, %387
  %389 = xor i64 %388, %383
  %390 = xor i64 %389, %378
  %391 = xor i64 %390, %377
  %392 = xor i64 %391, %374
  %393 = xor i64 %392, %382
  %394 = mul i64 %373, %393
  %395 = trunc i64 %394 to i32
  %.reg2mem213 = alloca i32, i32 %395, align 4
  %.reg2mem210 = alloca i64, align 8
  %.reg2mem207 = alloca i1, align 1
  %396 = and i64 %3, -6503171472268641440
  %397 = or i64 6503171472268641439, %3
  %398 = sub i64 %397, 6503171472268641439
  %399 = add i64 %3, 665876993957201381
  %400 = add i64 -8633797163409855997, %3
  %401 = add i64 %400, -9147069916342494238
  %402 = or i64 %3, 1412155643073300566
  %403 = xor i64 %3, -1
  %404 = and i64 %403, 4597608847930456197
  %405 = and i64 %3, -4597608847930456198
  %406 = or i64 %404, %405
  %407 = xor i64 3194460541580275923, %406
  %408 = xor i64 %3, -1
  %409 = or i64 -1412155643073300567, %408
  %410 = xor i64 %409, -1
  %411 = and i64 %410, -1
  %412 = or i64 %407, %411
  %413 = xor i64 -9146664582767165785, %412
  %414 = xor i64 %413, %398
  %415 = xor i64 %414, %399
  %416 = xor i64 %415, %402
  %417 = xor i64 %416, %401
  %418 = xor i64 %417, %396
  %419 = and i64 %3, -8985205623595361355
  %420 = xor i64 %3, -1
  %421 = xor i64 -8985205623595361355, %420
  %422 = and i64 %421, -8985205623595361355
  %423 = and i64 %3, 1635909828648865712
  %424 = or i64 -1635909828648865713, %3
  %425 = sub i64 %424, -1635909828648865713
  %426 = xor i64 %423, %419
  %427 = xor i64 %426, -3081611458663839465
  %428 = xor i64 %427, %425
  %429 = xor i64 %428, %422
  %430 = mul i64 %418, %429
  %431 = trunc i64 %430 to i32
  %.reg2mem204 = alloca i1, i32 %431, align 1
  %432 = or i64 %3, 9175112384485433040
  %433 = and i64 9175112384485433040, %3
  %434 = xor i64 9175112384485433040, %3
  %435 = or i64 %433, %434
  %436 = add i64 %3, -5509957394463632049
  %437 = add i64 1757447907908550108, %3
  %438 = sub i64 %437, 7267405302372182157
  %439 = xor i64 %432, %436
  %440 = xor i64 %439, 7606030241213383479
  %441 = xor i64 %440, %435
  %442 = xor i64 %441, %438
  %443 = or i64 %3, -8664083401722584148
  %444 = xor i64 %3, -1
  %445 = and i64 %444, 7839016018300230651
  %446 = and i64 %3, -7839016018300230652
  %447 = or i64 %445, %446
  %448 = xor i64 -1510050003428149161, %447
  %449 = xor i64 %3, -1
  %450 = or i64 8664083401722584147, %449
  %451 = xor i64 %450, -1
  %452 = and i64 %451, -1
  %453 = or i64 %448, %452
  %454 = and i64 %3, 3526164691881602192
  %455 = xor i64 %3, -1
  %456 = xor i64 3526164691881602192, %455
  %457 = and i64 %456, 3526164691881602192
  %458 = xor i64 %443, %453
  %459 = xor i64 %458, %457
  %460 = xor i64 %459, %454
  %461 = xor i64 %460, 4455772323407995527
  %462 = mul i64 %442, %461
  %463 = trunc i64 %462 to i32
  %.reg2mem202 = alloca i1, i32 %463, align 1
  %.reg2mem197 = alloca i64, align 8
  %.reg2mem195 = alloca i32, align 4
  %.reload26.reg2mem = alloca i1, align 1
  %.reload25.reg2mem = alloca i1, align 1
  %.reload24.reg2mem = alloca i64, align 8
  %.reload23.reg2mem = alloca i32, align 4
  %.reload12.reg2mem = alloca i64, align 8
  %.reload11.reg2mem = alloca i64, align 8
  %.reload10.reg2mem = alloca i64, align 8
  %.reload9.reg2mem = alloca i64, align 8
  %.reload8.reg2mem = alloca i8, align 1
  %.reload.reg2mem = alloca i32, align 4
  %.reg2mem186 = alloca i64, align 8
  %.reg2mem183 = alloca i64, align 8
  %.reg2mem180 = alloca i64, align 8
  %.reg2mem176 = alloca i8**, align 8
  %.reg2mem173 = alloca i8**, align 8
  %.reg2mem170 = alloca i8**, align 8
  %.reg2mem166 = alloca i8**, align 8
  %.reg2mem163 = alloca i8**, align 8
  %464 = or i64 %3, 5916073869787727729
  %465 = xor i64 %3, -1
  %466 = and i64 %465, -5884812117114192248
  %467 = and i64 %3, 5884812117114192247
  %468 = or i64 %466, %467
  %469 = xor i64 -266012158195303943, %468
  %470 = xor i64 %3, -1
  %471 = or i64 -5916073869787727730, %470
  %472 = xor i64 %471, -1
  %473 = and i64 %472, -1
  %474 = or i64 %469, %473
  %475 = or i64 %3, 7860778515725044191
  %476 = xor i64 %3, -1
  %477 = and i64 7860778515725044191, %476
  %478 = add i64 %477, %3
  %479 = add i64 %3, 3421351882946031516
  %480 = and i64 3421351882946031516, %3
  %481 = or i64 3421351882946031516, %3
  %482 = add i64 %480, %481
  %483 = xor i64 %474, %482
  %484 = xor i64 %483, %479
  %485 = xor i64 %484, 7971449733614515707
  %486 = xor i64 %485, %464
  %487 = xor i64 %486, %478
  %488 = xor i64 %487, %475
  %489 = or i64 %3, -8044527447551246949
  %490 = xor i64 %3, -1
  %491 = and i64 -8044527447551246949, %490
  %492 = add i64 %491, %3
  %493 = or i64 %3, -3483317934597254941
  %494 = xor i64 %3, -1
  %495 = and i64 %494, 1194381694267300507
  %496 = and i64 %3, -1194381694267300508
  %497 = or i64 %495, %496
  %498 = xor i64 -2361136239511516552, %497
  %499 = xor i64 %3, -1
  %500 = or i64 3483317934597254940, %499
  %501 = xor i64 %500, -1
  %502 = and i64 %501, -1
  %503 = or i64 %498, %502
  %504 = xor i64 %492, %503
  %505 = xor i64 %504, %493
  %506 = xor i64 %505, %489
  %507 = xor i64 %506, 6210216775529336115
  %508 = mul i64 %488, %507
  %509 = trunc i64 %508 to i32
  %.reg2mem159 = alloca i8**, i32 %509, align 8
  %.reg2mem156 = alloca i8**, align 8
  %.reg2mem153 = alloca i8**, align 8
  %.reg2mem150 = alloca i8**, align 8
  %.reg2mem147 = alloca i8**, align 8
  %.reg2mem142 = alloca i8**, align 8
  %.reg2mem138 = alloca i8**, align 8
  %.reg2mem134 = alloca i8**, align 8
  %.reg2mem130 = alloca i8**, align 8
  %.reg2mem126 = alloca i8**, align 8
  %.reg2mem123 = alloca i8**, align 8
  %.reg2mem120 = alloca i8**, align 8
  %.reg2mem117 = alloca i8**, align 8
  %510 = add i64 %3, -8387309351648952572
  %511 = add i64 -939228520663901359, %3
  %512 = add i64 %511, -7448080830985051213
  %513 = add i64 %3, -8082959002936164798
  %514 = sub i64 0, %3
  %515 = add i64 8082959002936164798, %514
  %516 = sub i64 0, %515
  %517 = and i64 %3, -308999334905371502
  %518 = xor i64 %3, -1
  %519 = xor i64 -308999334905371502, %518
  %520 = and i64 %519, -308999334905371502
  %521 = xor i64 -7814797010317575931, %510
  %522 = xor i64 %521, %516
  %523 = xor i64 %522, %513
  %524 = xor i64 %523, %520
  %525 = xor i64 %524, %512
  %526 = xor i64 %525, %517
  %527 = and i64 %3, -1507805619786433361
  %528 = xor i64 %3, -1
  %529 = xor i64 -1507805619786433361, %528
  %530 = and i64 %529, -1507805619786433361
  %531 = add i64 %3, 3607029729136451898
  %532 = sub i64 0, %3
  %533 = sub i64 3607029729136451898, %532
  %534 = and i64 %3, 5112406089075931058
  %535 = xor i64 %3, -1
  %536 = xor i64 5112406089075931058, %535
  %537 = and i64 %536, 5112406089075931058
  %538 = xor i64 %527, %531
  %539 = xor i64 %538, %533
  %540 = xor i64 %539, %537
  %541 = xor i64 %540, 6737725312628845517
  %542 = xor i64 %541, %530
  %543 = xor i64 %542, %534
  %544 = mul i64 %526, %543
  %545 = trunc i64 %544 to i32
  %.reg2mem114 = alloca i8**, i32 %545, align 8
  %546 = or i64 %3, 5123377952327491781
  %547 = xor i64 %3, -1
  %548 = and i64 %547, -2453487289931241739
  %549 = and i64 %3, 2453487289931241738
  %550 = or i64 %548, %549
  %551 = xor i64 -7283847452892199376, %550
  %552 = xor i64 %3, -1
  %553 = or i64 -5123377952327491782, %552
  %554 = xor i64 %553, -1
  %555 = and i64 %554, -1
  %556 = or i64 %551, %555
  %557 = or i64 %3, 1042059568674315603
  %558 = xor i64 %3, -1
  %559 = and i64 1042059568674315603, %558
  %560 = add i64 %559, %3
  %561 = or i64 %3, 3836177589474677987
  %562 = xor i64 %3, -1
  %563 = and i64 %562, 3477030334866371744
  %564 = and i64 %3, -3477030334866371745
  %565 = or i64 %563, %564
  %566 = xor i64 395247610480582723, %565
  %567 = xor i64 %3, -1
  %568 = or i64 -3836177589474677988, %567
  %569 = xor i64 %568, -1
  %570 = and i64 %569, -1
  %571 = or i64 %566, %570
  %572 = xor i64 %546, %561
  %573 = xor i64 %572, %556
  %574 = xor i64 %573, %560
  %575 = xor i64 %574, %557
  %576 = xor i64 %575, %571
  %577 = xor i64 %576, 7123559353356358255
  %578 = or i64 %3, 7556571370083809493
  %579 = xor i64 %3, -1
  %580 = and i64 7556571370083809493, %579
  %581 = add i64 %580, %3
  %582 = and i64 %3, -1437876618420619313
  %583 = xor i64 %3, -1
  %584 = xor i64 -1437876618420619313, %583
  %585 = and i64 %584, -1437876618420619313
  %586 = xor i64 %578, %585
  %587 = xor i64 %586, %582
  %588 = xor i64 %587, 8225431889040116879
  %589 = xor i64 %588, %581
  %590 = mul i64 %577, %589
  %591 = trunc i64 %590 to i32
  %.reg2mem109 = alloca i8**, i32 %591, align 8
  %592 = or i64 %3, 4145418770662396143
  %593 = xor i64 %3, -1
  %594 = and i64 4145418770662396143, %593
  %595 = add i64 %594, %3
  %596 = add i64 %3, 7320158417984290823
  %597 = add i64 -7038390772122354350, %3
  %598 = sub i64 %597, 4088194883602906443
  %599 = xor i64 %596, %592
  %600 = xor i64 %599, %595
  %601 = xor i64 %600, 2463749654615972351
  %602 = xor i64 %601, %598
  %603 = or i64 %3, 4232085784419779838
  %604 = xor i64 %3, -1
  %605 = and i64 %604, -2440845264069940
  %606 = and i64 %3, 2440845264069939
  %607 = or i64 %605, %606
  %608 = xor i64 -4229944887345734094, %607
  %609 = xor i64 %3, -1
  %610 = or i64 -4232085784419779839, %609
  %611 = xor i64 %610, -1
  %612 = and i64 %611, -1
  %613 = or i64 %608, %612
  %614 = or i64 %3, -6797225203677539582
  %615 = and i64 -6797225203677539582, %3
  %616 = xor i64 -6797225203677539582, %3
  %617 = or i64 %615, %616
  %618 = and i64 %3, -2495559276384870929
  %619 = xor i64 %3, -1
  %620 = xor i64 -2495559276384870929, %619
  %621 = and i64 %620, -2495559276384870929
  %622 = xor i64 %603, %613
  %623 = xor i64 %622, %621
  %624 = xor i64 %623, %617
  %625 = xor i64 %624, -1446721418967669249
  %626 = xor i64 %625, %618
  %627 = xor i64 %626, %614
  %628 = mul i64 %602, %627
  %629 = trunc i64 %628 to i32
  %.reg2mem106 = alloca i8**, i32 %629, align 8
  %.reg2mem102 = alloca i8**, align 8
  %.reg2mem98 = alloca i8**, align 8
  %.reg2mem95 = alloca i8**, align 8
  %.reg2mem92 = alloca i8**, align 8
  %.reg2mem89 = alloca i8**, align 8
  %630 = and i64 %3, -7557114909166009378
  %631 = or i64 7557114909166009377, %3
  %632 = sub i64 %631, 7557114909166009377
  %633 = or i64 %3, -4757147624423956554
  %634 = and i64 -4757147624423956554, %3
  %635 = xor i64 -4757147624423956554, %3
  %636 = or i64 %634, %635
  %637 = and i64 %3, 1391823202396398770
  %638 = xor i64 %3, -1
  %639 = xor i64 1391823202396398770, %638
  %640 = and i64 %639, 1391823202396398770
  %641 = xor i64 %640, %630
  %642 = xor i64 %641, %636
  %643 = xor i64 %642, %632
  %644 = xor i64 %643, %637
  %645 = xor i64 %644, %633
  %646 = xor i64 %645, -5250976002865646863
  %647 = and i64 %3, 289063527909082246
  %648 = xor i64 %3, -1
  %649 = or i64 -289063527909082247, %648
  %650 = xor i64 %649, -1
  %651 = and i64 %650, -1
  %652 = or i64 %3, -93400604499188054
  %653 = xor i64 %3, -1
  %654 = and i64 %653, -3422077777471000309
  %655 = and i64 %3, 3422077777471000308
  %656 = or i64 %654, %655
  %657 = xor i64 3329983945228015521, %656
  %658 = xor i64 %3, -1
  %659 = or i64 93400604499188053, %658
  %660 = xor i64 %659, -1
  %661 = and i64 %660, -1
  %662 = or i64 %657, %661
  %663 = or i64 %3, 3688813044679737458
  %664 = xor i64 %3, -1
  %665 = and i64 3688813044679737458, %664
  %666 = add i64 %665, %3
  %667 = xor i64 %647, %663
  %668 = xor i64 %667, %666
  %669 = xor i64 %668, %662
  %670 = xor i64 %669, %651
  %671 = xor i64 %670, %652
  %672 = xor i64 %671, -5336241229564543471
  %673 = mul i64 %646, %672
  %674 = trunc i64 %673 to i32
  %.reg2mem86 = alloca i8**, i32 %674, align 8
  %.reg2mem82 = alloca i8**, align 8
  %.reg2mem71 = alloca i8**, align 8
  %.reg2mem67 = alloca i8**, align 8
  %.reg2mem64 = alloca i8**, align 8
  %.reg2mem59 = alloca i8**, align 8
  %.reg2mem56 = alloca i8**, align 8
  %.reg2mem53 = alloca i8**, align 8
  %675 = and i64 %3, -7970057304140608677
  %676 = or i64 7970057304140608676, %3
  %677 = sub i64 %676, 7970057304140608676
  %678 = or i64 %3, 5482297610696904286
  %679 = and i64 5482297610696904286, %3
  %680 = xor i64 5482297610696904286, %3
  %681 = or i64 %679, %680
  %682 = xor i64 %675, -6846054402089971251
  %683 = xor i64 %682, %681
  %684 = xor i64 %683, %678
  %685 = xor i64 %684, %677
  %686 = and i64 %3, 5075135925036319634
  %687 = or i64 -5075135925036319635, %3
  %688 = sub i64 %687, -5075135925036319635
  %689 = add i64 %3, 8168844773182868326
  %690 = add i64 3339123067100858420, %3
  %691 = sub i64 %690, -4829721706082009906
  %692 = xor i64 %691, %688
  %693 = xor i64 %692, %686
  %694 = xor i64 %693, 5651883031355572997
  %695 = xor i64 %694, %689
  %696 = mul i64 %685, %695
  %697 = trunc i64 %696 to i32
  %.reg2mem48 = alloca i8**, i32 %697, align 8
  %698 = and i64 %3, 1346197902235113221
  %699 = or i64 -1346197902235113222, %3
  %700 = sub i64 %699, -1346197902235113222
  %701 = add i64 %3, 5238793137555786442
  %702 = and i64 5238793137555786442, %3
  %703 = or i64 5238793137555786442, %3
  %704 = add i64 %702, %703
  %705 = xor i64 %701, 1412793437248041939
  %706 = xor i64 %705, %704
  %707 = xor i64 %706, %700
  %708 = xor i64 %707, %698
  %709 = or i64 %3, 6285935290650282323
  %710 = xor i64 %3, -1
  %711 = and i64 6285935290650282323, %710
  %712 = add i64 %711, %3
  %713 = add i64 %3, -7557747493971571354
  %714 = sub i64 0, %3
  %715 = add i64 7557747493971571354, %714
  %716 = sub i64 0, %715
  %717 = xor i64 -22609682999305125, %709
  %718 = xor i64 %717, %716
  %719 = xor i64 %718, %712
  %720 = xor i64 %719, %713
  %721 = mul i64 %708, %720
  %722 = trunc i64 %721 to i32
  %.reg2mem44 = alloca i8**, i32 %722, align 8
  %723 = and i64 %3, -2029288268050737475
  %724 = xor i64 %3, -1
  %725 = xor i64 -2029288268050737475, %724
  %726 = and i64 %725, -2029288268050737475
  %727 = and i64 %3, -1274851385381593570
  %728 = xor i64 %3, -1
  %729 = xor i64 -1274851385381593570, %728
  %730 = and i64 %729, -1274851385381593570
  %731 = add i64 %3, -6910167505478095619
  %732 = sub i64 0, %3
  %733 = sub i64 -6910167505478095619, %732
  %734 = xor i64 %726, %733
  %735 = xor i64 %734, %731
  %736 = xor i64 %735, %727
  %737 = xor i64 %736, %730
  %738 = xor i64 %737, 8078776204675728267
  %739 = xor i64 %738, %723
  %740 = add i64 %3, 6809858254993827242
  %741 = sub i64 0, %3
  %742 = add i64 -6809858254993827242, %741
  %743 = sub i64 0, %742
  %744 = add i64 %3, -6447119813994866231
  %745 = add i64 -2309815402302812881, %3
  %746 = add i64 %745, -4137304411692053350
  %747 = xor i64 %746, %740
  %748 = xor i64 %747, -5027883654651458525
  %749 = xor i64 %748, %744
  %750 = xor i64 %749, %743
  %751 = mul i64 %739, %750
  %752 = trunc i64 %751 to i32
  %.reg2mem36 = alloca i8**, i32 %752, align 8
  %.reg2mem33 = alloca i8**, align 8
  %753 = and i64 %3, 4300521816865465506
  %754 = or i64 -4300521816865465507, %3
  %755 = sub i64 %754, -4300521816865465507
  %756 = and i64 %3, 6182839344729552109
  %757 = xor i64 %3, -1
  %758 = or i64 -6182839344729552110, %757
  %759 = xor i64 %758, -1
  %760 = and i64 %759, -1
  %761 = or i64 %3, -6906413989391665495
  %762 = xor i64 %3, -1
  %763 = and i64 %762, 691005720301524879
  %764 = and i64 %3, -691005720301524880
  %765 = or i64 %763, %764
  %766 = xor i64 -6219032263710957274, %765
  %767 = xor i64 %3, -1
  %768 = or i64 6906413989391665494, %767
  %769 = xor i64 %768, -1
  %770 = and i64 %769, -1
  %771 = or i64 %766, %770
  %772 = xor i64 %760, %755
  %773 = xor i64 %772, %756
  %774 = xor i64 %773, %753
  %775 = xor i64 %774, %771
  %776 = xor i64 %775, 7635397950890941275
  %777 = xor i64 %776, %761
  %778 = or i64 %3, 8020895131385136456
  %779 = and i64 8020895131385136456, %3
  %780 = xor i64 8020895131385136456, %3
  %781 = or i64 %779, %780
  %782 = and i64 %3, 1014401416565243576
  %783 = xor i64 %3, -1
  %784 = xor i64 1014401416565243576, %783
  %785 = and i64 %784, 1014401416565243576
  %786 = add i64 %3, 8571152309501465931
  %787 = and i64 8571152309501465931, %3
  %788 = or i64 8571152309501465931, %3
  %789 = add i64 %787, %788
  %790 = xor i64 %785, %786
  %791 = xor i64 %790, %789
  %792 = xor i64 %791, %778
  %793 = xor i64 %792, %782
  %794 = xor i64 %793, %781
  %795 = xor i64 %794, -4124374328317502253
  %796 = mul i64 %777, %795
  %797 = trunc i64 %796 to i32
  %.reg2mem30 = alloca i8**, i32 %797, align 8
  %.reg2mem21 = alloca i8**, align 8
  %.reg2mem18 = alloca i8**, align 8
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %798 = or i64 %3, 3774360657044667884
  %799 = xor i64 %3, -1
  %800 = and i64 %799, -8635664266193582653
  %801 = and i64 %3, 8635664266193582652
  %802 = or i64 %800, %801
  %803 = xor i64 -4879988709796857809, %802
  %804 = xor i64 %3, -1
  %805 = or i64 -3774360657044667885, %804
  %806 = xor i64 %805, -1
  %807 = and i64 %806, -1
  %808 = or i64 %803, %807
  %809 = and i64 %3, 6430834944572642246
  %810 = or i64 -6430834944572642247, %3
  %811 = sub i64 %810, -6430834944572642247
  %812 = and i64 %3, -1932336079600863456
  %813 = or i64 1932336079600863455, %3
  %814 = sub i64 %813, 1932336079600863455
  %815 = xor i64 %814, %811
  %816 = xor i64 %815, 8088695471508801239
  %817 = xor i64 %816, %798
  %818 = xor i64 %817, %812
  %819 = xor i64 %818, %808
  %820 = xor i64 %819, %809
  %821 = add i64 %3, -7761427020785856888
  %822 = and i64 -7761427020785856888, %3
  %823 = or i64 -7761427020785856888, %3
  %824 = add i64 %822, %823
  %825 = and i64 %3, -3541014048785385782
  %826 = xor i64 %3, -1
  %827 = xor i64 -3541014048785385782, %826
  %828 = and i64 %827, -3541014048785385782
  %829 = xor i64 %828, %824
  %830 = xor i64 %829, %825
  %831 = xor i64 %830, %821
  %832 = xor i64 %831, 6277090915570060519
  %833 = mul i64 %820, %832
  %834 = trunc i64 %833 to i32
  %.reg2mem = alloca i8**, i32 %834, align 8
  %835 = add i64 %3, -1012914868470261456
  %836 = xor i64 -1012914868470261456, %3
  %837 = and i64 -1012914868470261456, %3
  %838 = mul i64 2, %837
  %839 = add i64 %836, %838
  %840 = add i64 %3, 9132707083637109256
  %841 = and i64 9132707083637109256, %3
  %842 = or i64 9132707083637109256, %3
  %843 = add i64 %841, %842
  %844 = xor i64 %839, %843
  %845 = xor i64 %844, %835
  %846 = xor i64 %845, %840
  %847 = xor i64 %846, -8079177767947944415
  %848 = and i64 %3, 6653887730471142682
  %849 = xor i64 %3, -1
  %850 = xor i64 6653887730471142682, %849
  %851 = and i64 %850, 6653887730471142682
  %852 = and i64 %3, -6194577464150792879
  %853 = xor i64 %3, -1
  %854 = xor i64 -6194577464150792879, %853
  %855 = and i64 %854, -6194577464150792879
  %856 = and i64 %3, -2377697473973687487
  %857 = xor i64 %3, -1
  %858 = or i64 2377697473973687486, %857
  %859 = xor i64 %858, -1
  %860 = and i64 %859, -1
  %861 = xor i64 %851, %856
  %862 = xor i64 %861, %848
  %863 = xor i64 %862, %852
  %864 = xor i64 %863, %860
  %865 = xor i64 %864, -2357883995681943954
  %866 = xor i64 %865, %855
  %867 = mul i64 %847, %866
  %868 = trunc i64 %867 to i32
  %JumpTable = alloca i8*, i32 %868, align 8
  %869 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render, %BogusBasciBlock), i8** %869, align 8
  %870 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %870, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %871 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %871, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@render, %.preheader), i8** %.reload6, align 8
  %872 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %872, i8*** %.reg2mem7, align 8
  %.reload14 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@render, %"3"), i8** %.reload14, align 8
  %873 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %873, i8*** %.reg2mem15, align 8
  %.reload17 = load i8**, i8*** %.reg2mem15, align 8
  store i8* blockaddress(@render, %"4"), i8** %.reload17, align 8
  %874 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %874, i8*** %.reg2mem18, align 8
  %.reload20 = load i8**, i8*** %.reg2mem18, align 8
  store i8* blockaddress(@render, %"5"), i8** %.reload20, align 8
  %875 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %875, i8*** %.reg2mem21, align 8
  %.reload29 = load i8**, i8*** %.reg2mem21, align 8
  store i8* blockaddress(@render, %"6"), i8** %.reload29, align 8
  %876 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %876, i8*** %.reg2mem30, align 8
  %.reload32 = load i8**, i8*** %.reg2mem30, align 8
  store i8* blockaddress(@render, %codeRepl), i8** %.reload32, align 8
  %877 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %877, i8*** %.reg2mem33, align 8
  %.reload35 = load i8**, i8*** %.reg2mem33, align 8
  store i8* blockaddress(@render, %codeRepl1), i8** %.reload35, align 8
  %878 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %878, i8*** %.reg2mem36, align 8
  %.reload43 = load i8**, i8*** %.reg2mem36, align 8
  store i8* blockaddress(@render, %"9"), i8** %.reload43, align 8
  %879 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %879, i8*** %.reg2mem44, align 8
  %.reload47 = load i8**, i8*** %.reg2mem44, align 8
  store i8* blockaddress(@render, %"10"), i8** %.reload47, align 8
  %880 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %880, i8*** %.reg2mem48, align 8
  %.reload52 = load i8**, i8*** %.reg2mem48, align 8
  store i8* blockaddress(@render, %codeRepl17), i8** %.reload52, align 8
  %881 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %881, i8*** %.reg2mem53, align 8
  %.reload55 = load i8**, i8*** %.reg2mem53, align 8
  store i8* blockaddress(@render, %codeRepl31), i8** %.reload55, align 8
  %882 = getelementptr i8*, i8** %JumpTable, i32 13
  store i8** %882, i8*** %.reg2mem56, align 8
  %.reload58 = load i8**, i8*** %.reg2mem56, align 8
  store i8* blockaddress(@render, %"13"), i8** %.reload58, align 8
  %883 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8** %883, i8*** %.reg2mem59, align 8
  %.reload63 = load i8**, i8*** %.reg2mem59, align 8
  store i8* blockaddress(@render, %"14"), i8** %.reload63, align 8
  %884 = getelementptr i8*, i8** %JumpTable, i32 15
  store i8** %884, i8*** %.reg2mem64, align 8
  %.reload66 = load i8**, i8*** %.reg2mem64, align 8
  store i8* blockaddress(@render, %codeRepl44), i8** %.reload66, align 8
  %885 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8** %885, i8*** %.reg2mem67, align 8
  %.reload70 = load i8**, i8*** %.reg2mem67, align 8
  store i8* blockaddress(@render, %"16"), i8** %.reload70, align 8
  %886 = getelementptr i8*, i8** %JumpTable, i32 17
  store i8** %886, i8*** %.reg2mem71, align 8
  %.reload81 = load i8**, i8*** %.reg2mem71, align 8
  store i8* blockaddress(@render, %codeRepl54), i8** %.reload81, align 8
  %887 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8** %887, i8*** %.reg2mem82, align 8
  %.reload85 = load i8**, i8*** %.reg2mem82, align 8
  store i8* blockaddress(@render, %codeRepl56), i8** %.reload85, align 8
  %888 = getelementptr i8*, i8** %JumpTable, i32 19
  store i8** %888, i8*** %.reg2mem86, align 8
  %.reload88 = load i8**, i8*** %.reg2mem86, align 8
  store i8* blockaddress(@render, %"19"), i8** %.reload88, align 8
  %889 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8** %889, i8*** %.reg2mem89, align 8
  %.reload91 = load i8**, i8*** %.reg2mem89, align 8
  store i8* blockaddress(@render, %"20"), i8** %.reload91, align 8
  %890 = getelementptr i8*, i8** %JumpTable, i32 21
  store i8** %890, i8*** %.reg2mem92, align 8
  %.reload94 = load i8**, i8*** %.reg2mem92, align 8
  store i8* blockaddress(@render, %"21"), i8** %.reload94, align 8
  %891 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8** %891, i8*** %.reg2mem95, align 8
  %.reload97 = load i8**, i8*** %.reg2mem95, align 8
  store i8* blockaddress(@render, %"22"), i8** %.reload97, align 8
  %892 = getelementptr i8*, i8** %JumpTable, i32 23
  store i8** %892, i8*** %.reg2mem98, align 8
  %.reload101 = load i8**, i8*** %.reg2mem98, align 8
  store i8* blockaddress(@render, %"23"), i8** %.reload101, align 8
  %893 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8** %893, i8*** %.reg2mem102, align 8
  %.reload105 = load i8**, i8*** %.reg2mem102, align 8
  store i8* blockaddress(@render, %"24"), i8** %.reload105, align 8
  %894 = getelementptr i8*, i8** %JumpTable, i32 25
  store i8** %894, i8*** %.reg2mem106, align 8
  %.reload108 = load i8**, i8*** %.reg2mem106, align 8
  store i8* blockaddress(@render, %"25"), i8** %.reload108, align 8
  %895 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8** %895, i8*** %.reg2mem109, align 8
  %.reload113 = load i8**, i8*** %.reg2mem109, align 8
  store i8* blockaddress(@render, %"26"), i8** %.reload113, align 8
  %896 = getelementptr i8*, i8** %JumpTable, i32 27
  store i8** %896, i8*** %.reg2mem114, align 8
  %.reload116 = load i8**, i8*** %.reg2mem114, align 8
  store i8* blockaddress(@render, %"27"), i8** %.reload116, align 8
  %897 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8** %897, i8*** %.reg2mem117, align 8
  %.reload119 = load i8**, i8*** %.reg2mem117, align 8
  store i8* blockaddress(@render, %"28"), i8** %.reload119, align 8
  %898 = getelementptr i8*, i8** %JumpTable, i32 29
  store i8** %898, i8*** %.reg2mem120, align 8
  %.reload122 = load i8**, i8*** %.reg2mem120, align 8
  store i8* blockaddress(@render, %"29"), i8** %.reload122, align 8
  %899 = getelementptr i8*, i8** %JumpTable, i32 30
  store i8** %899, i8*** %.reg2mem123, align 8
  %.reload125 = load i8**, i8*** %.reg2mem123, align 8
  store i8* blockaddress(@render, %"30"), i8** %.reload125, align 8
  %900 = getelementptr i8*, i8** %JumpTable, i32 31
  store i8** %900, i8*** %.reg2mem126, align 8
  %.reload129 = load i8**, i8*** %.reg2mem126, align 8
  store i8* blockaddress(@render, %"31"), i8** %.reload129, align 8
  %901 = getelementptr i8*, i8** %JumpTable, i32 32
  store i8** %901, i8*** %.reg2mem130, align 8
  %.reload133 = load i8**, i8*** %.reg2mem130, align 8
  store i8* blockaddress(@render, %"32"), i8** %.reload133, align 8
  %902 = getelementptr i8*, i8** %JumpTable, i32 33
  store i8** %902, i8*** %.reg2mem134, align 8
  %.reload137 = load i8**, i8*** %.reg2mem134, align 8
  store i8* blockaddress(@render, %"33"), i8** %.reload137, align 8
  %903 = getelementptr i8*, i8** %JumpTable, i32 34
  store i8** %903, i8*** %.reg2mem138, align 8
  %.reload141 = load i8**, i8*** %.reg2mem138, align 8
  store i8* blockaddress(@render, %.loopexit), i8** %.reload141, align 8
  %904 = getelementptr i8*, i8** %JumpTable, i32 35
  store i8** %904, i8*** %.reg2mem142, align 8
  %.reload146 = load i8**, i8*** %.reg2mem142, align 8
  store i8* blockaddress(@render, %"35"), i8** %.reload146, align 8
  %905 = getelementptr i8*, i8** %JumpTable, i32 36
  store i8** %905, i8*** %.reg2mem147, align 8
  %.reload149 = load i8**, i8*** %.reg2mem147, align 8
  store i8* blockaddress(@render, %codeRepl58), i8** %.reload149, align 8
  %906 = getelementptr i8*, i8** %JumpTable, i32 37
  store i8** %906, i8*** %.reg2mem150, align 8
  %.reload152 = load i8**, i8*** %.reg2mem150, align 8
  store i8* blockaddress(@render, %"37"), i8** %.reload152, align 8
  %907 = getelementptr i8*, i8** %JumpTable, i32 38
  store i8** %907, i8*** %.reg2mem153, align 8
  %.reload155 = load i8**, i8*** %.reg2mem153, align 8
  store i8* blockaddress(@render, %"38"), i8** %.reload155, align 8
  %908 = getelementptr i8*, i8** %JumpTable, i32 39
  store i8** %908, i8*** %.reg2mem156, align 8
  %.reload158 = load i8**, i8*** %.reg2mem156, align 8
  store i8* blockaddress(@render, %codeRepl63), i8** %.reload158, align 8
  %909 = getelementptr i8*, i8** %JumpTable, i32 40
  store i8** %909, i8*** %.reg2mem159, align 8
  %.reload162 = load i8**, i8*** %.reg2mem159, align 8
  store i8* blockaddress(@render, %"40"), i8** %.reload162, align 8
  %910 = getelementptr i8*, i8** %JumpTable, i32 41
  store i8** %910, i8*** %.reg2mem163, align 8
  %.reload165 = load i8**, i8*** %.reg2mem163, align 8
  store i8* blockaddress(@render, %"41"), i8** %.reload165, align 8
  %911 = getelementptr i8*, i8** %JumpTable, i32 42
  store i8** %911, i8*** %.reg2mem166, align 8
  %.reload169 = load i8**, i8*** %.reg2mem166, align 8
  store i8* blockaddress(@render, %"42"), i8** %.reload169, align 8
  %912 = getelementptr i8*, i8** %JumpTable, i32 43
  store i8** %912, i8*** %.reg2mem170, align 8
  %.reload172 = load i8**, i8*** %.reg2mem170, align 8
  store i8* blockaddress(@render, %"43"), i8** %.reload172, align 8
  %913 = getelementptr i8*, i8** %JumpTable, i32 44
  store i8** %913, i8*** %.reg2mem173, align 8
  %.reload175 = load i8**, i8*** %.reg2mem173, align 8
  store i8* blockaddress(@render, %"44"), i8** %.reload175, align 8
  %914 = getelementptr i8*, i8** %JumpTable, i32 45
  store i8** %914, i8*** %.reg2mem176, align 8
  %.reload179 = load i8**, i8*** %.reg2mem176, align 8
  store i8* blockaddress(@render, %"45"), i8** %.reload179, align 8
  %915 = alloca i64, align 8
  %916 = call i64 @m1252811912226950246(i64 5221456193252566399)
  %917 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %916
  store i8* bitcast (i1 (i64, i32*)* @render..split to i8*), i8** %917, align 8
  %918 = call i64 @m1252811912226950246(i64 5221456193252566385)
  %919 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %918
  store i8* bitcast (i1 (i8*, i64, i64, i8*, i64*, i64*, i64*, i64*)* @render.extracted to i8*), i8** %919, align 8
  %920 = or i64 %3, -743447603349871451
  %921 = xor i64 %3, -1
  %922 = and i64 %921, 770674894126958307
  %923 = and i64 %3, -770674894126958308
  %924 = or i64 %922, %923
  %925 = xor i64 -63258286894816698, %924
  %926 = xor i64 %3, -1
  %927 = or i64 743447603349871450, %926
  %928 = xor i64 %927, -1
  %929 = and i64 %928, -1
  %930 = or i64 %925, %929
  %931 = add i64 %3, -7486699660841888760
  %932 = add i64 2076050941089360868, %3
  %933 = sub i64 %932, -8883993471778301988
  %934 = or i64 %3, -9051140158606562917
  %935 = xor i64 %3, -1
  %936 = and i64 -9051140158606562917, %935
  %937 = add i64 %936, %3
  %938 = xor i64 %933, %920
  %939 = xor i64 %938, %934
  %940 = xor i64 %939, %931
  %941 = xor i64 %940, -8661258714854043285
  %942 = xor i64 %941, %930
  %943 = xor i64 %942, %937
  %944 = or i64 %3, 4381300559724380366
  %945 = xor i64 %3, -1
  %946 = and i64 %945, 1020789018404796796
  %947 = and i64 %3, -1020789018404796797
  %948 = or i64 %946, %947
  %949 = xor i64 3667921936823138738, %948
  %950 = xor i64 %3, -1
  %951 = or i64 -4381300559724380367, %950
  %952 = xor i64 %951, -1
  %953 = and i64 %952, -1
  %954 = or i64 %949, %953
  %955 = or i64 %3, 4851034727071598901
  %956 = xor i64 %3, -1
  %957 = and i64 %956, -4528755211526087741
  %958 = and i64 %3, 4528755211526087740
  %959 = or i64 %957, %958
  %960 = xor i64 -9046333893969046794, %959
  %961 = xor i64 %3, -1
  %962 = or i64 -4851034727071598902, %961
  %963 = xor i64 %962, -1
  %964 = and i64 %963, -1
  %965 = or i64 %960, %964
  %966 = xor i64 %954, -6309745743492103466
  %967 = xor i64 %966, %955
  %968 = xor i64 %967, %965
  %969 = xor i64 %968, %944
  %970 = mul i64 %943, %969
  %971 = call i64 @m1252811912226950246(i64 %970)
  %972 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %971
  store i8* bitcast (i1 (i8, i64, i64, i64, i32*, i64*, i1*, i1*)* @render.extracted.1 to i8*), i8** %972, align 8
  %973 = call i64 @m1252811912226950246(i64 5221456193252566389)
  %974 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %973
  store i8* bitcast (void (i64*, i64*, i64*, i64*)* @render.extracted.2 to i8*), i8** %974, align 8
  %975 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %976 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %975
  store i8* bitcast (void (i8, i64, i32*, i64*, i1*)* @render.extracted.3 to i8*), i8** %976, align 8
  %977 = and i64 %3, 7574120207020980326
  %978 = xor i64 %3, -1
  %979 = or i64 -7574120207020980327, %978
  %980 = xor i64 %979, -1
  %981 = and i64 %980, -1
  %982 = add i64 %3, 5267650337255665050
  %983 = sub i64 0, %3
  %984 = sub i64 5267650337255665050, %983
  %985 = xor i64 6707293162752799767, %981
  %986 = xor i64 %985, %982
  %987 = xor i64 %986, %984
  %988 = xor i64 %987, %977
  %989 = or i64 %3, 6284187821614839386
  %990 = and i64 6284187821614839386, %3
  %991 = xor i64 6284187821614839386, %3
  %992 = or i64 %990, %991
  %993 = and i64 %3, -7453622858451251251
  %994 = xor i64 %3, -1
  %995 = or i64 7453622858451251250, %994
  %996 = xor i64 %995, -1
  %997 = and i64 %996, -1
  %998 = xor i64 %992, %997
  %999 = xor i64 %998, %989
  %1000 = xor i64 %999, %993
  %1001 = xor i64 %1000, 3380757764061514412
  %1002 = mul i64 %988, %1001
  %1003 = call i64 @m1252811912226950246(i64 %1002)
  %1004 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %1003
  store i8* bitcast (i1 (i1)* @render..split.4 to i8*), i8** %1004, align 8
  %1005 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %1006 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %1005
  store i8* bitcast (i1 (i64)* @render.extracted.5 to i8*), i8** %1006, align 8
  %1007 = or i64 %3, 398948427437039093
  %1008 = xor i64 %3, -1
  %1009 = and i64 %1008, -5890849210325088332
  %1010 = and i64 %3, 5890849210325088331
  %1011 = or i64 %1009, %1010
  %1012 = xor i64 -6073624572044043711, %1011
  %1013 = xor i64 %3, -1
  %1014 = or i64 -398948427437039094, %1013
  %1015 = xor i64 %1014, -1
  %1016 = and i64 %1015, -1
  %1017 = or i64 %1012, %1016
  %1018 = and i64 %3, 798071190117630206
  %1019 = or i64 -798071190117630207, %3
  %1020 = sub i64 %1019, -798071190117630207
  %1021 = and i64 %3, 4852139404986664553
  %1022 = xor i64 %3, -1
  %1023 = or i64 -4852139404986664554, %1022
  %1024 = xor i64 %1023, -1
  %1025 = and i64 %1024, -1
  %1026 = xor i64 %1018, -5168249497437251369
  %1027 = xor i64 %1026, %1017
  %1028 = xor i64 %1027, %1021
  %1029 = xor i64 %1028, %1007
  %1030 = xor i64 %1029, %1025
  %1031 = xor i64 %1030, %1020
  %1032 = add i64 %3, -3802750128601009357
  %1033 = and i64 -3802750128601009357, %3
  %1034 = or i64 -3802750128601009357, %3
  %1035 = add i64 %1033, %1034
  %1036 = or i64 %3, 7624566388447752315
  %1037 = xor i64 %3, -1
  %1038 = and i64 %1037, -4956158343586636954
  %1039 = and i64 %3, 4956158343586636953
  %1040 = or i64 %1038, %1039
  %1041 = xor i64 -3244889139742397667, %1040
  %1042 = xor i64 %3, -1
  %1043 = or i64 -7624566388447752316, %1042
  %1044 = xor i64 %1043, -1
  %1045 = and i64 %1044, -1
  %1046 = or i64 %1041, %1045
  %1047 = add i64 %3, 8963742758454172470
  %1048 = xor i64 8963742758454172470, %3
  %1049 = and i64 8963742758454172470, %3
  %1050 = mul i64 2, %1049
  %1051 = add i64 %1048, %1050
  %1052 = xor i64 %1036, %1032
  %1053 = xor i64 %1052, %1035
  %1054 = xor i64 %1053, 4944554148093337778
  %1055 = xor i64 %1054, %1047
  %1056 = xor i64 %1055, %1046
  %1057 = xor i64 %1056, %1051
  %1058 = mul i64 %1031, %1057
  %1059 = call i64 @m1252811912226950246(i64 %1058)
  %1060 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %1059
  store i8* bitcast (i32 (i32)* @putchar to i8*), i8** %1060, align 8
  %1061 = call i64 @m1252811912226950246(i64 5221456193252566384)
  %1062 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %1061
  store i8* bitcast (i32 (float*, float*)* @update to i8*), i8** %1062, align 8
  %1063 = call i64 @m1252811912226950246(i64 5221456193252566396)
  %1064 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %1063
  store i8* bitcast (i1 (i64, i64*)* @render..split.6 to i8*), i8** %1064, align 8
  %1065 = call i64 @m1252811912226950246(i64 5221456193252566387)
  %1066 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %1065
  store i8* bitcast (void (i64, i1*, i64*, i64*, i64*, i64*, i64*, i64*, i64*)* @render.extracted.7 to i8*), i8** %1066, align 8
  %.loc71 = alloca i64, align 8
  %.loc70 = alloca i64, align 8
  %.loc69 = alloca i64, align 8
  %1067 = and i64 %3, -7734170136674469083
  %1068 = or i64 7734170136674469082, %3
  %1069 = sub i64 %1068, 7734170136674469082
  %1070 = and i64 %3, 3048838938958633139
  %1071 = xor i64 %3, -1
  %1072 = xor i64 3048838938958633139, %1071
  %1073 = and i64 %1072, 3048838938958633139
  %1074 = and i64 %3, -3241824787224476473
  %1075 = xor i64 %3, -1
  %1076 = xor i64 -3241824787224476473, %1075
  %1077 = and i64 %1076, -3241824787224476473
  %1078 = xor i64 %1073, 9089567005173244885
  %1079 = xor i64 %1078, %1067
  %1080 = xor i64 %1079, %1074
  %1081 = xor i64 %1080, %1069
  %1082 = xor i64 %1081, %1070
  %1083 = xor i64 %1082, %1077
  %1084 = add i64 %3, -7544427075303603741
  %1085 = and i64 -7544427075303603741, %3
  %1086 = or i64 -7544427075303603741, %3
  %1087 = add i64 %1085, %1086
  %1088 = add i64 %3, -4014470330636762265
  %1089 = add i64 -4742056746892617186, %3
  %1090 = sub i64 %1089, -727586416255854921
  %1091 = xor i64 %1088, 3813129532094397821
  %1092 = xor i64 %1091, %1084
  %1093 = xor i64 %1092, %1090
  %1094 = xor i64 %1093, %1087
  %1095 = mul i64 %1083, %1094
  %1096 = trunc i64 %1095 to i32
  %.loc68 = alloca i64, i32 %1096, align 8
  %.loc67 = alloca i64, align 8
  %.loc66 = alloca i64, align 8
  %.loc65 = alloca i64, align 8
  %.loc64 = alloca i1, align 1
  %.loc59 = alloca i64, align 8
  %.loc47 = alloca i1, align 1
  %.loc46 = alloca i64, align 8
  %.loc45 = alloca i32, align 4
  %.loc35 = alloca i64, align 8
  %.loc34 = alloca i64, align 8
  %.loc33 = alloca i64, align 8
  %.loc32 = alloca i64, align 8
  %.loc21 = alloca i1, align 1
  %1097 = or i64 %3, -3709091815439575756
  %1098 = xor i64 %3, -1
  %1099 = and i64 %1098, 5809797472640944595
  %1100 = and i64 %3, -5809797472640944596
  %1101 = or i64 %1099, %1100
  %1102 = xor i64 -7195023084245246745, %1101
  %1103 = xor i64 %3, -1
  %1104 = or i64 3709091815439575755, %1103
  %1105 = xor i64 %1104, -1
  %1106 = and i64 %1105, -1
  %1107 = or i64 %1102, %1106
  %1108 = or i64 %3, 6778370428737878801
  %1109 = xor i64 %3, -1
  %1110 = and i64 %1109, 5239427070177189873
  %1111 = and i64 %3, -5239427070177189874
  %1112 = or i64 %1110, %1111
  %1113 = xor i64 1632472216741668064, %1112
  %1114 = xor i64 %3, -1
  %1115 = or i64 -6778370428737878802, %1114
  %1116 = xor i64 %1115, -1
  %1117 = and i64 %1116, -1
  %1118 = or i64 %1113, %1117
  %1119 = and i64 %3, -7108869930016763874
  %1120 = xor i64 %3, -1
  %1121 = or i64 7108869930016763873, %1120
  %1122 = xor i64 %1121, -1
  %1123 = and i64 %1122, -1
  %1124 = xor i64 %1119, %1123
  %1125 = xor i64 %1124, 8235636553769871443
  %1126 = xor i64 %1125, %1108
  %1127 = xor i64 %1126, %1107
  %1128 = xor i64 %1127, %1097
  %1129 = xor i64 %1128, %1118
  %1130 = add i64 %3, -2024056825983703208
  %1131 = add i64 -6067303106142155590, %3
  %1132 = sub i64 %1131, -4043246280158452382
  %1133 = or i64 %3, -5477166999175863773
  %1134 = xor i64 %3, -1
  %1135 = and i64 -5477166999175863773, %1134
  %1136 = add i64 %1135, %3
  %1137 = xor i64 3659014146387188699, %1133
  %1138 = xor i64 %1137, %1132
  %1139 = xor i64 %1138, %1136
  %1140 = xor i64 %1139, %1130
  %1141 = mul i64 %1129, %1140
  %1142 = trunc i64 %1141 to i32
  %.loc20 = alloca i1, i32 %1142, align 1
  %.loc19 = alloca i64, align 8
  %.loc18 = alloca i32, align 4
  %.loc6 = alloca i64, align 8
  %.loc5 = alloca i64, align 8
  %.loc4 = alloca i64, align 8
  %.loc3 = alloca i64, align 8
  %.loc2 = alloca i8, align 1
  %1143 = or i64 %3, -9174146032664725120
  %1144 = and i64 -9174146032664725120, %3
  %1145 = xor i64 -9174146032664725120, %3
  %1146 = or i64 %1144, %1145
  %1147 = add i64 %3, -7117016296326097298
  %1148 = add i64 -4141471174102953548, %3
  %1149 = sub i64 %1148, 2975545122223143750
  %1150 = or i64 %3, 8618662434523856687
  %1151 = and i64 8618662434523856687, %3
  %1152 = xor i64 8618662434523856687, %3
  %1153 = or i64 %1151, %1152
  %1154 = xor i64 2639795751948085523, %1149
  %1155 = xor i64 %1154, %1153
  %1156 = xor i64 %1155, %1143
  %1157 = xor i64 %1156, %1146
  %1158 = xor i64 %1157, %1150
  %1159 = xor i64 %1158, %1147
  %1160 = and i64 %3, -8977753702554097910
  %1161 = or i64 8977753702554097909, %3
  %1162 = sub i64 %1161, 8977753702554097909
  %1163 = and i64 %3, 5531170825521114892
  %1164 = xor i64 %3, -1
  %1165 = or i64 -5531170825521114893, %1164
  %1166 = xor i64 %1165, -1
  %1167 = and i64 %1166, -1
  %1168 = xor i64 9157092443342817563, %1163
  %1169 = xor i64 %1168, %1162
  %1170 = xor i64 %1169, %1160
  %1171 = xor i64 %1170, %1167
  %1172 = mul i64 %1159, %1171
  %1173 = trunc i64 %1172 to i32
  %.loc = alloca i32, i32 %1173, align 4
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %1174 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %1174, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

BogusBasciBlock:                                  ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1175 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render, %"37"), i8** %1175, align 8
  %1176 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render, %"9"), i8** %1176, align 8
  %1177 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render, %"6"), i8** %1177, align 8
  %1178 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@render, %codeRepl63), i8** %1178, align 8
  %1179 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@render, %"23"), i8** %1179, align 8
  %1180 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@render, %"43"), i8** %1180, align 8
  %1181 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@render, %"20"), i8** %1181, align 8
  %1182 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8* blockaddress(@render, %"16"), i8** %1182, align 8
  %1183 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8* blockaddress(@render, %"19"), i8** %1183, align 8
  %1184 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8* blockaddress(@render, %codeRepl31), i8** %1184, align 8
  %1185 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8* blockaddress(@render, %codeRepl44), i8** %1185, align 8
  %1186 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8* blockaddress(@render, %.loopexit), i8** %1186, align 8
  %1187 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8* blockaddress(@render, %"5"), i8** %1187, align 8
  %1188 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8* blockaddress(@render, %"3"), i8** %1188, align 8
  %1189 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8* blockaddress(@render, %codeRepl54), i8** %1189, align 8
  %1190 = getelementptr i8*, i8** %JumpTable, i32 30
  store i8* blockaddress(@render, %codeRepl), i8** %1190, align 8
  %1191 = getelementptr i8*, i8** %JumpTable, i32 32
  store i8* blockaddress(@render, %EntryBasicBlockSplit), i8** %1191, align 8
  %1192 = getelementptr i8*, i8** %JumpTable, i32 34
  store i8* blockaddress(@render, %"38"), i8** %1192, align 8
  %1193 = getelementptr i8*, i8** %JumpTable, i32 36
  store i8* blockaddress(@render, %"30"), i8** %1193, align 8
  %1194 = getelementptr i8*, i8** %JumpTable, i32 38
  store i8* blockaddress(@render, %"42"), i8** %1194, align 8
  %1195 = getelementptr i8*, i8** %JumpTable, i32 40
  store i8* blockaddress(@render, %"22"), i8** %1195, align 8
  %1196 = getelementptr i8*, i8** %JumpTable, i32 42
  store i8* blockaddress(@render, %"25"), i8** %1196, align 8
  %1197 = getelementptr i8*, i8** %JumpTable, i32 44
  store i8* blockaddress(@render, %"10"), i8** %1197, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %1198 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %1198, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

EntryBasicBlockSplit:                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1199 = icmp eq i64 %3, 1760
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %.reload145 = load i8**, i8*** %.reg2mem142, align 8
  %1200 = select i1 %1199, i8** %.reload5, i8** %.reload145
  %1201 = load i8*, i8** %1200, align 8
  store i32 2, i32* %.reg2mem234, align 4
  indirectbr i8* %1201, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

.preheader:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1202 = mul i64 %3, %3
  store i64 %1202, i64* %.reg2mem180, align 8
  %.reload182 = load i64, i64* %.reg2mem180, align 8
  %1203 = add i64 %.reload182, %3
  %1204 = mul i64 %1203, 3
  store i64 %1204, i64* %.reg2mem183, align 8
  %.reload185 = load i64, i64* %.reg2mem183, align 8
  %1205 = srem i64 %.reload185, 2
  %1206 = icmp eq i64 %1205, 0
  %1207 = mul i64 %3, %3
  %1208 = add i64 %1207, %3
  %1209 = srem i64 %1208, 2
  %1210 = icmp eq i64 %1209, 0
  %1211 = and i1 %1206, %1210
  %.reload13 = load i8**, i8*** %.reg2mem7, align 8
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  %1212 = select i1 %1211, i8** %.reload16, i8** %.reload13
  %1213 = load i8*, i8** %1212, align 8
  indirectbr i8* %1213, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"3":                                              ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload42 = load i8**, i8*** %.reg2mem36, align 8
  %1214 = load i8*, i8** %.reload42, align 8
  indirectbr i8* %1214, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"4":                                              ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload28 = load i8**, i8*** %.reg2mem21, align 8
  %1215 = load i8*, i8** %.reload28, align 8
  store i64 0, i64* %.reg2mem224, align 8
  indirectbr i8* %1215, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"5":                                              ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload211 = load i64, i64* %.reg2mem210, align 8
  %1216 = add i64 %228, -699870029262885450
  %1217 = add i64 6569700657911959383, %228
  %1218 = sub i64 %1217, 7269570687174844833
  %1219 = add i64 %236, -5264823434714096428
  %1220 = add i64 -3002196405528412239, %236
  %1221 = add i64 %1220, -2262627029185684189
  %1222 = add i64 %319, -4073688240886375706
  %1223 = add i64 4244525620915203575, %319
  %1224 = sub i64 %1223, 8318213861801579281
  %1225 = xor i64 %1219, %1218
  %1226 = xor i64 %1225, %1221
  %1227 = xor i64 %1226, %1224
  %1228 = xor i64 %1227, %1222
  %1229 = xor i64 %1228, 4304812920429042861
  %1230 = xor i64 %1229, %1216
  %1231 = add i64 %269, -7857190468512706168
  %1232 = xor i64 -7857190468512706168, %269
  %1233 = and i64 -7857190468512706168, %269
  %1234 = mul i64 2, %1233
  %1235 = add i64 %1232, %1234
  %1236 = add i64 %1065, -350896774446886496
  %1237 = add i64 6501520636098099461, %1065
  %1238 = add i64 %1237, -6852417410544985957
  %1239 = add i64 %23, 3022404772455273969
  %1240 = add i64 -6446968469604031407, %23
  %1241 = add i64 %1240, -8977370831650246240
  %1242 = xor i64 %1236, %1238
  %1243 = xor i64 %1242, %1239
  %1244 = xor i64 %1243, -6867128957597416059
  %1245 = xor i64 %1244, %1235
  %1246 = xor i64 %1245, %1241
  %1247 = xor i64 %1246, %1231
  %1248 = mul i64 %1230, %1247
  %1249 = icmp eq i64 %.reload211, %1248
  %.reload27 = load i8**, i8*** %.reg2mem21, align 8
  %.reload140 = load i8**, i8*** %.reg2mem138, align 8
  %1250 = select i1 %1249, i8** %.reload140, i8** %.reload27
  %1251 = load i8*, i8** %1250, align 8
  %.reload212 = load i64, i64* %.reg2mem210, align 8
  store i64 %.reload212, i64* %.reg2mem224, align 8
  store i32 0, i32* %.ph.reg2mem, align 4
  indirectbr i8* %1251, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"6":                                              ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload225 = load i64, i64* %.reg2mem224, align 8
  store i64 %.reload225, i64* %.reg2mem186, align 8
  %.reload31 = load i8**, i8*** %.reg2mem30, align 8
  %1252 = load i8*, i8** %.reload31, align 8
  indirectbr i8* %1252, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl:                                         ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast = bitcast i32* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  store i64 5221456193252566399, i64* %915, align 8
  %1253 = call i8** @lk14494699875176641526(i64* %915)
  %1254 = load i8*, i8** %1253, align 8
  %1255 = bitcast i8* %1254 to i1 (i64, i32*)*
  %.reload189 = load i64, i64* %.reg2mem186, align 8
  %targetBlock = call i1 %1255(i64 %.reload189, i32* %.loc)
  %.reload = load i32, i32* %.loc, align 4
  store i32 %.reload, i32* %.reload.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  %.reload34 = load i8**, i8*** %.reg2mem33, align 8
  %.reload136 = load i8**, i8*** %.reg2mem134, align 8
  %1256 = select i1 %targetBlock, i8** %.reload136, i8** %.reload34
  %1257 = load i8*, i8** %1256, align 8
  store i32 10, i32* %.reg2mem232, align 4
  indirectbr i8* %1257, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl1:                                        ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %.loc2)
  %lt.cast13 = bitcast i64* %.loc3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast13)
  %lt.cast14 = bitcast i64* %.loc4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast14)
  %lt.cast15 = bitcast i64* %.loc5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast15)
  %lt.cast16 = bitcast i64* %.loc6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast16)
  %1258 = add i64 %13, 3091778568463477249
  %1259 = add i64 -1050963888725575444, %13
  %1260 = add i64 %1259, 4142742457189052693
  %1261 = or i64 %271, 2816589873190322077
  %1262 = xor i64 %271, -1
  %1263 = and i64 %1262, 4312523190983456576
  %1264 = and i64 %271, -4312523190983456577
  %1265 = or i64 %1263, %1264
  %1266 = xor i64 2076055452449982685, %1265
  %1267 = xor i64 %271, -1
  %1268 = or i64 -2816589873190322078, %1267
  %1269 = xor i64 %1268, -1
  %1270 = and i64 %1269, -1
  %1271 = or i64 %1266, %1270
  %1272 = or i64 %275, 4868570620340696033
  %1273 = and i64 4868570620340696033, %275
  %1274 = xor i64 4868570620340696033, %275
  %1275 = or i64 %1273, %1274
  %1276 = xor i64 1826515380148188339, %1271
  %1277 = xor i64 %1276, %1275
  %1278 = xor i64 %1277, %1260
  %1279 = xor i64 %1278, %1258
  %1280 = xor i64 %1279, %1272
  %1281 = xor i64 %1280, %1261
  %1282 = add i64 %23, 7555310579587065544
  %1283 = add i64 5756741341232576881, %23
  %1284 = add i64 %1283, 1798569238354488663
  %1285 = or i64 %25, -7280708360978449075
  %1286 = xor i64 %25, -1
  %1287 = and i64 %1286, 6651064970206392590
  %1288 = and i64 %25, -6651064970206392591
  %1289 = or i64 %1287, %1288
  %1290 = xor i64 -4127287323419505597, %1289
  %1291 = xor i64 %25, -1
  %1292 = or i64 7280708360978449074, %1291
  %1293 = xor i64 %1292, -1
  %1294 = and i64 %1293, -1
  %1295 = or i64 %1290, %1294
  %1296 = xor i64 %1282, %1285
  %1297 = xor i64 %1296, %1295
  %1298 = xor i64 %1297, 1468061431951980363
  %1299 = xor i64 %1298, %1284
  %1300 = mul i64 %1281, %1299
  store i64 %1300, i64* %915, align 8
  %1301 = call i8** @lk14494699875176641526(i64* %915)
  %1302 = load i8*, i8** %1301, align 8
  %1303 = bitcast i8* %1302 to i1 (i8*, i64, i64, i8*, i64*, i64*, i64*, i64*)*
  %.reload188 = load i64, i64* %.reg2mem186, align 8
  %targetBlock7 = call i1 %1303(i8* %2, i64 %.reload188, i64 %3, i8* %.loc2, i64* %.loc3, i64* %.loc4, i64* %.loc5, i64* %.loc6)
  %.reload8 = load i8, i8* %.loc2, align 1
  store i8 %.reload8, i8* %.reload8.reg2mem, align 1
  %.reload9 = load i64, i64* %.loc3, align 8
  store i64 %.reload9, i64* %.reload9.reg2mem, align 8
  %.reload10 = load i64, i64* %.loc4, align 8
  store i64 %.reload10, i64* %.reload10.reg2mem, align 8
  %.reload11 = load i64, i64* %.loc5, align 8
  store i64 %.reload11, i64* %.reload11.reg2mem, align 8
  %.reload12 = load i64, i64* %.loc6, align 8
  store i64 %.reload12, i64* %.reload12.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %.loc2)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast13)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast14)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast15)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast16)
  %.reload41 = load i8**, i8*** %.reg2mem36, align 8
  %.reload46 = load i8**, i8*** %.reg2mem44, align 8
  %1304 = select i1 %targetBlock7, i8** %.reload46, i8** %.reload41
  %1305 = load i8*, i8** %1304, align 8
  indirectbr i8* %1305, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"9":                                              ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1306 = and i64 %23, -3232446252314140404
  %1307 = xor i64 %23, -1
  %1308 = or i64 3232446252314140403, %1307
  %1309 = xor i64 %1308, -1
  %1310 = and i64 %1309, -1
  %1311 = or i64 %236, 5930591147419337838
  %1312 = xor i64 %236, -1
  %1313 = and i64 %1312, -1873964615796364059
  %1314 = and i64 %236, 1873964615796364058
  %1315 = or i64 %1313, %1314
  %1316 = xor i64 -5209567291782469493, %1315
  %1317 = xor i64 %236, -1
  %1318 = or i64 -5930591147419337839, %1317
  %1319 = xor i64 %1318, -1
  %1320 = and i64 %1319, -1
  %1321 = or i64 %1316, %1320
  %1322 = or i64 %146, -716440899007208739
  %1323 = xor i64 %146, -1
  %1324 = and i64 %1323, 836295859387202734
  %1325 = and i64 %146, -836295859387202735
  %1326 = or i64 %1324, %1325
  %1327 = xor i64 -174041234355364237, %1326
  %1328 = xor i64 %146, -1
  %1329 = or i64 716440899007208738, %1328
  %1330 = xor i64 %1329, -1
  %1331 = and i64 %1330, -1
  %1332 = or i64 %1327, %1331
  %1333 = xor i64 %1332, %1310
  %1334 = xor i64 %1333, %1311
  %1335 = xor i64 %1334, %1306
  %1336 = xor i64 %1335, %1322
  %1337 = xor i64 %1336, %1321
  %1338 = xor i64 %1337, 5582499655737713637
  %1339 = and i64 %17, -5200110119006355491
  %1340 = xor i64 %17, -1
  %1341 = xor i64 -5200110119006355491, %1340
  %1342 = and i64 %1341, -5200110119006355491
  %1343 = or i64 %918, 2184622981432331115
  %1344 = xor i64 %918, -1
  %1345 = and i64 2184622981432331115, %1344
  %1346 = add i64 %1345, %918
  %1347 = or i64 %232, 7160957873652195028
  %1348 = xor i64 %232, -1
  %1349 = and i64 7160957873652195028, %1348
  %1350 = add i64 %1349, %232
  %1351 = xor i64 %1346, %1347
  %1352 = xor i64 %1351, %1342
  %1353 = xor i64 %1352, %1343
  %1354 = xor i64 %1353, -8698749167519028872
  %1355 = xor i64 %1354, %1339
  %1356 = xor i64 %1355, %1350
  %1357 = mul i64 %1338, %1356
  %1358 = sdiv i64 113, %1357
  %1359 = and i64 %13, -5087843514753768370
  %1360 = or i64 5087843514753768369, %13
  %1361 = sub i64 %1360, 5087843514753768369
  %1362 = and i64 %916, 4504534858131003976
  %1363 = xor i64 %916, -1
  %1364 = or i64 -4504534858131003977, %1363
  %1365 = xor i64 %1364, -1
  %1366 = and i64 %1365, -1
  %1367 = add i64 %25, 8369194283229938421
  %1368 = and i64 8369194283229938421, %25
  %1369 = or i64 8369194283229938421, %25
  %1370 = add i64 %1368, %1369
  %1371 = xor i64 %1367, %1362
  %1372 = xor i64 %1371, -1222590623159366053
  %1373 = xor i64 %1372, %1359
  %1374 = xor i64 %1373, %1361
  %1375 = xor i64 %1374, %1370
  %1376 = xor i64 %1375, %1366
  %1377 = and i64 %77, 757493962461752479
  %1378 = xor i64 %77, -1
  %1379 = xor i64 757493962461752479, %1378
  %1380 = and i64 %1379, 757493962461752479
  %1381 = and i64 %319, -5933340426856141781
  %1382 = or i64 5933340426856141780, %319
  %1383 = sub i64 %1382, 5933340426856141780
  %1384 = xor i64 %1380, %1383
  %1385 = xor i64 %1384, %1381
  %1386 = xor i64 %1385, %1377
  %1387 = xor i64 %1386, 4696241200950223241
  %1388 = mul i64 %1376, %1387
  %1389 = add i64 %1388, 7726064060630881936
  %1390 = sub i64 85, 79
  %1391 = mul i64 46, 121
  %1392 = sdiv i64 126, 25
  %1393 = add i64 12, 1
  %1394 = and i64 %275, -1160253170817770673
  %1395 = or i64 1160253170817770672, %275
  %1396 = sub i64 %1395, 1160253170817770672
  %1397 = and i64 %17, 5392049549773868225
  %1398 = xor i64 %17, -1
  %1399 = or i64 -5392049549773868226, %1398
  %1400 = xor i64 %1399, -1
  %1401 = and i64 %1400, -1
  %1402 = and i64 %144, 6150399790202501803
  %1403 = or i64 -6150399790202501804, %144
  %1404 = sub i64 %1403, -6150399790202501804
  %1405 = xor i64 %1401, %1402
  %1406 = xor i64 %1405, %1396
  %1407 = xor i64 %1406, %1397
  %1408 = xor i64 %1407, %1404
  %1409 = xor i64 %1408, %1394
  %1410 = xor i64 %1409, -6665698077941066961
  %1411 = and i64 %315, 9048855914303165722
  %1412 = or i64 -9048855914303165723, %315
  %1413 = sub i64 %1412, -9048855914303165723
  %1414 = and i64 %1059, 4911647397920409192
  %1415 = or i64 -4911647397920409193, %1059
  %1416 = sub i64 %1415, -4911647397920409193
  %1417 = xor i64 579343432074965962, %1414
  %1418 = xor i64 %1417, %1416
  %1419 = xor i64 %1418, %1411
  %1420 = xor i64 %1419, %1413
  %1421 = mul i64 %1410, %1420
  %1422 = add i64 %1421, 80
  %1423 = mul i64 92, 115
  %1424 = sdiv i64 %1389, 67
  %1425 = sdiv i64 %1423, 120
  %1426 = sub i64 %1390, 2
  %1427 = add i64 %1389, 86
  %1428 = add i64 %1392, 1149925857939546485
  %1429 = sub i64 %1428, 111
  %1430 = sub i64 %1429, 1149925857939546485
  %1431 = mul i64 %1423, 62
  %1432 = add i64 %1392, 77
  %1433 = sdiv i64 %1392, 44
  %1434 = sdiv i64 %1390, 42
  %1435 = sdiv i64 %1391, 52
  %1436 = trunc i64 %1424 to i32
  %1437 = add i32 0, %1436
  %1438 = trunc i64 %1425 to i32
  %1439 = add i32 %1437, %1438
  %1440 = trunc i64 %1426 to i32
  %1441 = add i32 %1439, %1440
  %1442 = trunc i64 %1427 to i32
  %1443 = add i32 %1441, %1442
  %1444 = trunc i64 %1430 to i32
  %1445 = sub i32 0, %1444
  %1446 = sub i32 %1443, %1445
  %1447 = trunc i64 %1431 to i32
  %1448 = add i32 %1446, %1447
  %1449 = trunc i64 %1432 to i32
  %1450 = add i32 %1448, %1449
  %1451 = trunc i64 %1433 to i32
  %1452 = add i32 %1450, 821907902
  %1453 = add i32 %1452, %1451
  %1454 = sub i32 %1453, 821907902
  %1455 = trunc i64 %1434 to i32
  %1456 = add i32 %1454, %1455
  %1457 = trunc i64 %1435 to i32
  %1458 = add i32 %1456, %1457
  %1459 = xor i32 %1458, -2
  %1460 = and i32 %1459, %1458
  %1461 = icmp eq i32 %1460, 0
  %1462 = mul i32 %1458, %1458
  %1463 = add i32 %1462, %1458
  %1464 = mul i32 %1463, 3
  %1465 = srem i32 %1464, 2
  %1466 = icmp eq i32 %1465, 0
  %1467 = and i1 %1461, %1466
  %1468 = xor i1 %1461, %1466
  %1469 = or i1 %1467, %1468
  %.reload22 = load i8**, i8*** %.reg2mem21, align 8
  %.reload40 = load i8**, i8*** %.reg2mem36, align 8
  %1470 = select i1 %1469, i8** %.reload22, i8** %.reload40
  %1471 = load i8*, i8** %1470, align 8
  store i64 0, i64* %.reg2mem224, align 8
  indirectbr i8* %1471, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"10":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload12.reload = load i64, i64* %.reload12.reg2mem, align 8
  %1472 = srem i64 %.reload12.reload, 2
  %1473 = icmp eq i64 %1472, 0
  %.reload51 = load i8**, i8*** %.reg2mem48, align 8
  %.reload65 = load i8**, i8*** %.reg2mem64, align 8
  %1474 = select i1 %1473, i8** %.reload51, i8** %.reload65
  %1475 = load i8*, i8** %1474, align 8
  indirectbr i8* %1475, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl17:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast27 = bitcast i32* %.loc18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast27)
  %lt.cast28 = bitcast i64* %.loc19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast28)
  %lt.cast29 = bitcast i1* %.loc20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast29)
  %lt.cast30 = bitcast i1* %.loc21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast30)
  store i64 5221456193252566386, i64* %915, align 8
  %1476 = call i8** @lk14494699875176641526(i64* %915)
  %1477 = load i8*, i8** %1476, align 8
  %1478 = bitcast i8* %1477 to i1 (i8, i64, i64, i64, i32*, i64*, i1*, i1*)*
  %.reload184 = load i64, i64* %.reg2mem183, align 8
  %.reload8.reload192 = load i8, i8* %.reload8.reg2mem, align 1
  %.reload9.reload194 = load i64, i64* %.reload9.reg2mem, align 8
  %.reload10.reload = load i64, i64* %.reload10.reg2mem, align 8
  %targetBlock22 = call i1 %1478(i8 %.reload8.reload192, i64 %.reload9.reload194, i64 %.reload184, i64 %.reload10.reload, i32* %.loc18, i64* %.loc19, i1* %.loc20, i1* %.loc21)
  %.reload23 = load i32, i32* %.loc18, align 4
  store i32 %.reload23, i32* %.reload23.reg2mem, align 4
  %.reload24 = load i64, i64* %.loc19, align 8
  store i64 %.reload24, i64* %.reload24.reg2mem, align 8
  %.reload25 = load i1, i1* %.loc20, align 1
  store i1 %.reload25, i1* %.reload25.reg2mem, align 1
  %.reload26 = load i1, i1* %.loc21, align 1
  store i1 %.reload26, i1* %.reload26.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast27)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast28)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast29)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast30)
  %.reload54 = load i8**, i8*** %.reg2mem53, align 8
  %.reload57 = load i8**, i8*** %.reg2mem56, align 8
  %1479 = select i1 %targetBlock22, i8** %.reload54, i8** %.reload57
  %1480 = load i8*, i8** %1479, align 8
  indirectbr i8* %1480, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl31:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast40 = bitcast i64* %.loc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast40)
  %lt.cast41 = bitcast i64* %.loc33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast41)
  %lt.cast42 = bitcast i64* %.loc34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast42)
  %lt.cast43 = bitcast i64* %.loc35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast43)
  store i64 5221456193252566389, i64* %915, align 8
  %1481 = call i8** @lk14494699875176641526(i64* %915)
  %1482 = load i8*, i8** %1481, align 8
  %1483 = bitcast i8* %1482 to void (i64*, i64*, i64*, i64*)*
  call void %1483(i64* %.loc32, i64* %.loc33, i64* %.loc34, i64* %.loc35)
  %.reload36 = load i64, i64* %.loc32, align 8
  %.reload37 = load i64, i64* %.loc33, align 8
  %.reload38 = load i64, i64* %.loc34, align 8
  %.reload39 = load i64, i64* %.loc35, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast40)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast41)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast42)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast43)
  %.reload62 = load i8**, i8*** %.reg2mem59, align 8
  %1484 = load i8*, i8** %.reload62, align 8
  indirectbr i8* %1484, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"13":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1485 = sub i64 -5550094260284235958, -5550094260284236035
  %1486 = add i64 25, 127
  %1487 = and i64 %7, 1257756176641787033
  %1488 = xor i64 %7, -1
  %1489 = xor i64 1257756176641787033, %1488
  %1490 = and i64 %1489, 1257756176641787033
  %1491 = and i64 %971, 8792790737412922754
  %1492 = xor i64 %971, -1
  %1493 = or i64 -8792790737412922755, %1492
  %1494 = xor i64 %1493, -1
  %1495 = and i64 %1494, -1
  %1496 = xor i64 %1491, -4312477934390341859
  %1497 = xor i64 %1496, %1490
  %1498 = xor i64 %1497, %1495
  %1499 = xor i64 %1498, %1487
  %1500 = add i64 %1005, 982253647207909635
  %1501 = sub i64 0, %1005
  %1502 = sub i64 982253647207909635, %1501
  %1503 = and i64 %319, 7763936101336099943
  %1504 = xor i64 %319, -1
  %1505 = xor i64 7763936101336099943, %1504
  %1506 = and i64 %1505, 7763936101336099943
  %1507 = xor i64 %1506, %1500
  %1508 = xor i64 %1507, %1503
  %1509 = xor i64 %1508, 999148517628320240
  %1510 = xor i64 %1509, %1502
  %1511 = mul i64 %1499, %1510
  %1512 = add i64 27, %1511
  %1513 = mul i64 53, 9
  %.reload45 = load i8**, i8*** %.reg2mem44, align 8
  %.reload60 = load i8**, i8*** %.reg2mem59, align 8
  %.reload26.reload = load i1, i1* %.reload26.reg2mem, align 1
  %1514 = select i1 %.reload26.reload, i8** %.reload60, i8** %.reload45
  %1515 = load i8*, i8** %1514, align 8
  indirectbr i8* %1515, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"14":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload69 = load i8**, i8*** %.reg2mem67, align 8
  %1516 = load i8*, i8** %.reload69, align 8
  %.reload23.reload = load i32, i32* %.reload23.reg2mem, align 4
  %.reload24.reload = load i64, i64* %.reload24.reg2mem, align 8
  %.reload25.reload = load i1, i1* %.reload25.reg2mem, align 1
  store i32 %.reload23.reload, i32* %.reg2mem226, align 4
  store i64 %.reload24.reload, i64* %.reg2mem228, align 8
  store i1 %.reload25.reload, i1* %.reg2mem230, align 1
  indirectbr i8* %1516, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl44:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast51 = bitcast i32* %.loc45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast51)
  %lt.cast52 = bitcast i64* %.loc46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast52)
  %lt.cast53 = bitcast i1* %.loc47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast53)
  store i64 5221456193252566390, i64* %915, align 8
  %1517 = call i8** @lk14494699875176641526(i64* %915)
  %1518 = load i8*, i8** %1517, align 8
  %1519 = bitcast i8* %1518 to void (i8, i64, i32*, i64*, i1*)*
  %.reload8.reload = load i8, i8* %.reload8.reg2mem, align 1
  %.reload9.reload193 = load i64, i64* %.reload9.reg2mem, align 8
  call void %1519(i8 %.reload8.reload, i64 %.reload9.reload193, i32* %.loc45, i64* %.loc46, i1* %.loc47)
  %.reload48 = load i32, i32* %.loc45, align 4
  %.reload49 = load i64, i64* %.loc46, align 8
  %.reload50 = load i1, i1* %.loc47, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast51)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast52)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast53)
  %.reload68 = load i8**, i8*** %.reg2mem67, align 8
  %1520 = load i8*, i8** %.reload68, align 8
  store i32 %.reload48, i32* %.reg2mem226, align 4
  store i64 %.reload49, i64* %.reg2mem228, align 8
  store i1 %.reload50, i1* %.reg2mem230, align 1
  indirectbr i8* %1520, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"16":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload231 = load i1, i1* %.reg2mem230, align 1
  %.reload229 = load i64, i64* %.reg2mem228, align 8
  %.reload227 = load i32, i32* %.reg2mem226, align 4
  store i1 %.reload231, i1* %.reg2mem202, align 1
  store i64 %.reload229, i64* %.reg2mem197, align 8
  store i32 %.reload227, i32* %.reg2mem195, align 4
  %.reload80 = load i8**, i8*** %.reg2mem71, align 8
  %1521 = load i8*, i8** %.reload80, align 8
  indirectbr i8* %1521, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl54:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566388, i64* %915, align 8
  %1522 = call i8** @lk14494699875176641526(i64* %915)
  %1523 = load i8*, i8** %1522, align 8
  %1524 = bitcast i8* %1523 to i1 (i1)*
  %.reload203 = load i1, i1* %.reg2mem202, align 1
  %targetBlock55 = call i1 %1524(i1 %.reload203)
  %.reload84 = load i8**, i8*** %.reg2mem82, align 8
  %.reload107 = load i8**, i8*** %.reg2mem106, align 8
  %1525 = select i1 %targetBlock55, i8** %.reload84, i8** %.reload107
  %1526 = load i8*, i8** %1525, align 8
  indirectbr i8* %1526, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl56:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566391, i64* %915, align 8
  %1527 = call i8** @lk14494699875176641526(i64* %915)
  %1528 = load i8*, i8** %1527, align 8
  %1529 = bitcast i8* %1528 to i1 (i64)*
  %targetBlock57 = call i1 %1529(i64 %3)
  %.reload87 = load i8**, i8*** %.reg2mem86, align 8
  %.reload90 = load i8**, i8*** %.reg2mem89, align 8
  %1530 = select i1 %targetBlock57, i8** %.reload87, i8** %.reload90
  %1531 = load i8*, i8** %1530, align 8
  indirectbr i8* %1531, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"19":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload104 = load i8**, i8*** %.reg2mem102, align 8
  %1532 = load i8*, i8** %.reload104, align 8
  indirectbr i8* %1532, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"20":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1533 = mul i64 8, 51
  %1534 = sub i64 103, 108
  %1535 = or i64 %321, -6211148749308008394
  %1536 = xor i64 %321, -1
  %1537 = and i64 %1536, -231780102330564032
  %1538 = and i64 %321, 231780102330564031
  %1539 = or i64 %1537, %1538
  %1540 = xor i64 6126333823160887926, %1539
  %1541 = xor i64 %321, -1
  %1542 = or i64 6211148749308008393, %1541
  %1543 = xor i64 %1542, -1
  %1544 = and i64 %1543, -1
  %1545 = or i64 %1540, %1544
  %1546 = add i64 %146, 438430355665232771
  %1547 = add i64 -7452532241088641808, %146
  %1548 = add i64 %1547, 7890962596753874579
  %1549 = add i64 %1059, -8603833330638195286
  %1550 = sub i64 0, %1059
  %1551 = sub i64 -8603833330638195286, %1550
  %1552 = xor i64 -4715821442128482989, %1535
  %1553 = xor i64 %1552, %1545
  %1554 = xor i64 %1553, %1551
  %1555 = xor i64 %1554, %1548
  %1556 = xor i64 %1555, %1549
  %1557 = xor i64 %1556, %1546
  %1558 = or i64 %236, -6037005466469559921
  %1559 = xor i64 %236, -1
  %1560 = and i64 -6037005466469559921, %1559
  %1561 = add i64 %1560, %236
  %1562 = and i64 %230, -3378143214056615330
  %1563 = xor i64 %230, -1
  %1564 = or i64 3378143214056615329, %1563
  %1565 = xor i64 %1564, -1
  %1566 = and i64 %1565, -1
  %1567 = or i64 %15, 8952505000148587733
  %1568 = xor i64 %15, -1
  %1569 = and i64 %1568, 1595855757199265955
  %1570 = and i64 %15, -1595855757199265956
  %1571 = or i64 %1569, %1570
  %1572 = xor i64 7644914820656661622, %1571
  %1573 = xor i64 %15, -1
  %1574 = or i64 -8952505000148587734, %1573
  %1575 = xor i64 %1574, -1
  %1576 = and i64 %1575, -1
  %1577 = or i64 %1572, %1576
  %1578 = xor i64 %1558, %1562
  %1579 = xor i64 %1578, %1577
  %1580 = xor i64 %1579, -8363810139220705890
  %1581 = xor i64 %1580, %1566
  %1582 = xor i64 %1581, %1567
  %1583 = xor i64 %1582, %1561
  %1584 = mul i64 %1557, %1583
  %1585 = mul i64 %1584, 71
  %1586 = mul i64 26, 23
  %1587 = mul i64 114, 67
  %1588 = add i64 68, 42
  %1589 = sub i64 113, 33
  %.reload9.reload = load i64, i64* %.reload9.reg2mem, align 8
  %1590 = srem i64 %.reload9.reload, 2
  %1591 = or i64 %317, 8682922417366187380
  %1592 = xor i64 %317, -1
  %1593 = and i64 8682922417366187380, %1592
  %1594 = add i64 %1593, %317
  %1595 = add i64 %146, -1469753799495216149
  %1596 = add i64 3388930051584963526, %146
  %1597 = add i64 %1596, -4858683851080179675
  %1598 = and i64 %321, 2363539428631514507
  %1599 = xor i64 %321, -1
  %1600 = xor i64 2363539428631514507, %1599
  %1601 = and i64 %1600, 2363539428631514507
  %1602 = xor i64 %1598, -5317662727642585405
  %1603 = xor i64 %1602, %1594
  %1604 = xor i64 %1603, %1595
  %1605 = xor i64 %1604, %1597
  %1606 = xor i64 %1605, %1601
  %1607 = xor i64 %1606, %1591
  %1608 = or i64 %321, -7829317546683879125
  %1609 = xor i64 %321, -1
  %1610 = and i64 %1609, 7493099350742903842
  %1611 = and i64 %321, -7493099350742903843
  %1612 = or i64 %1610, %1611
  %1613 = xor i64 -818393971011019511, %1612
  %1614 = xor i64 %321, -1
  %1615 = or i64 7829317546683879124, %1614
  %1616 = xor i64 %1615, -1
  %1617 = and i64 %1616, -1
  %1618 = or i64 %1613, %1617
  %1619 = or i64 %75, 3051797221728422898
  %1620 = xor i64 %75, -1
  %1621 = and i64 %1620, -6333280560564275360
  %1622 = and i64 %75, 6333280560564275359
  %1623 = or i64 %1621, %1622
  %1624 = xor i64 -9060816364632507246, %1623
  %1625 = xor i64 %75, -1
  %1626 = or i64 -3051797221728422899, %1625
  %1627 = xor i64 %1626, -1
  %1628 = and i64 %1627, -1
  %1629 = or i64 %1624, %1628
  %1630 = or i64 %31, 650789231648164486
  %1631 = and i64 650789231648164486, %31
  %1632 = xor i64 650789231648164486, %31
  %1633 = or i64 %1631, %1632
  %1634 = xor i64 %1618, %1630
  %1635 = xor i64 %1634, %1619
  %1636 = xor i64 %1635, %1629
  %1637 = xor i64 %1636, 0
  %1638 = xor i64 %1637, %1633
  %1639 = xor i64 %1638, %1608
  %1640 = mul i64 %1607, %1639
  %1641 = icmp eq i64 %1590, %1640
  %.reload201 = load i64, i64* %.reg2mem197, align 8
  %1642 = mul i64 %.reload201, 2
  %.reload200 = load i64, i64* %.reg2mem197, align 8
  %1643 = mul i64 %.reload200, 2
  %1644 = add i64 2, %1643
  %1645 = mul i64 %1642, %1644
  %1646 = srem i64 %1645, 4
  %1647 = icmp eq i64 %1646, 0
  %.reload199 = load i64, i64* %.reg2mem197, align 8
  %1648 = mul i64 %.reload199, %.reload199
  %.reload198 = load i64, i64* %.reg2mem197, align 8
  %1649 = add i64 %1648, %.reload198
  %1650 = srem i64 %1649, 2
  %1651 = icmp eq i64 %1650, 0
  %1652 = or i1 %1647, %1651
  store i1 %1652, i1* %.reg2mem204, align 1
  %.reload93 = load i8**, i8*** %.reg2mem92, align 8
  %.reload96 = load i8**, i8*** %.reg2mem95, align 8
  %.reload206 = load i1, i1* %.reg2mem204, align 1
  %1653 = select i1 %.reload206, i8** %.reload93, i8** %.reload96
  %1654 = load i8*, i8** %1653, align 8
  indirectbr i8* %1654, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"21":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload100 = load i8**, i8*** %.reg2mem98, align 8
  %1655 = load i8*, i8** %.reload100, align 8
  indirectbr i8* %1655, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"22":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload83 = load i8**, i8*** %.reg2mem82, align 8
  %.reload99 = load i8**, i8*** %.reg2mem98, align 8
  %.reload205 = load i1, i1* %.reg2mem204, align 1
  %1656 = select i1 %.reload205, i8** %.reload99, i8** %.reload83
  %1657 = load i8*, i8** %1656, align 8
  indirectbr i8* %1657, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"23":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload103 = load i8**, i8*** %.reg2mem102, align 8
  %1658 = load i8*, i8** %.reload103, align 8
  indirectbr i8* %1658, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"24":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload112 = load i8**, i8*** %.reg2mem109, align 8
  %1659 = load i8*, i8** %.reload112, align 8
  indirectbr i8* %1659, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"25":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload111 = load i8**, i8*** %.reg2mem109, align 8
  %1660 = load i8*, i8** %.reload111, align 8
  indirectbr i8* %1660, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"26":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload181 = load i64, i64* %.reg2mem180, align 8
  %1661 = add i64 %23, -3916014518237466899
  %1662 = and i64 -3916014518237466899, %23
  %1663 = or i64 -3916014518237466899, %23
  %1664 = add i64 %1662, %1663
  %1665 = and i64 %146, 3422058940351832726
  %1666 = or i64 -3422058940351832727, %146
  %1667 = sub i64 %1666, -3422058940351832727
  %1668 = xor i64 %1667, %1665
  %1669 = xor i64 %1668, %1661
  %1670 = xor i64 %1669, %1664
  %1671 = xor i64 %1670, 4279340267761525101
  %1672 = or i64 %73, 4366045911426391346
  %1673 = and i64 4366045911426391346, %73
  %1674 = xor i64 4366045911426391346, %73
  %1675 = or i64 %1673, %1674
  %1676 = or i64 %89, 3458152215413618666
  %1677 = xor i64 %89, -1
  %1678 = and i64 %1677, -8617706450809549585
  %1679 = and i64 %89, 8617706450809549584
  %1680 = or i64 %1678, %1679
  %1681 = xor i64 -6369758132518585595, %1680
  %1682 = xor i64 %89, -1
  %1683 = or i64 -3458152215413618667, %1682
  %1684 = xor i64 %1683, -1
  %1685 = and i64 %1684, -1
  %1686 = or i64 %1681, %1685
  %1687 = add i64 %136, -8252940526548295097
  %1688 = xor i64 -8252940526548295097, %136
  %1689 = and i64 -8252940526548295097, %136
  %1690 = mul i64 2, %1689
  %1691 = add i64 %1688, %1690
  %1692 = xor i64 5828347152655818954, %1687
  %1693 = xor i64 %1692, %1686
  %1694 = xor i64 %1693, %1672
  %1695 = xor i64 %1694, %1691
  %1696 = xor i64 %1695, %1676
  %1697 = xor i64 %1696, %1675
  %1698 = mul i64 %1671, %1697
  %1699 = srem i64 %.reload181, %1698
  %1700 = icmp eq i64 %1699, 0
  %.reload115 = load i8**, i8*** %.reg2mem114, align 8
  %.reload118 = load i8**, i8*** %.reg2mem117, align 8
  %1701 = select i1 %1700, i8** %.reload115, i8** %.reload118
  %1702 = load i8*, i8** %1701, align 8
  indirectbr i8* %1702, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"27":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload132 = load i8**, i8*** %.reg2mem130, align 8
  %1703 = load i8*, i8** %.reload132, align 8
  indirectbr i8* %1703, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"28":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1704 = sdiv i64 17, 41
  %1705 = sdiv i64 50, 82
  %1706 = sdiv i64 67, 97
  %1707 = or i64 %140, 6315127082405076780
  %1708 = xor i64 %140, -1
  %1709 = and i64 6315127082405076780, %1708
  %1710 = add i64 %1709, %140
  %1711 = and i64 %1065, 144124617924645788
  %1712 = xor i64 %1065, -1
  %1713 = or i64 -144124617924645789, %1712
  %1714 = xor i64 %1713, -1
  %1715 = and i64 %1714, -1
  %1716 = and i64 %136, -7818975719582374451
  %1717 = or i64 7818975719582374450, %136
  %1718 = sub i64 %1717, 7818975719582374450
  %1719 = xor i64 %1710, %1707
  %1720 = xor i64 %1719, %1716
  %1721 = xor i64 %1720, %1715
  %1722 = xor i64 %1721, 7238374621604308643
  %1723 = xor i64 %1722, %1711
  %1724 = xor i64 %1723, %1718
  %1725 = and i64 %33, 7792671401506476172
  %1726 = xor i64 %33, -1
  %1727 = xor i64 7792671401506476172, %1726
  %1728 = and i64 %1727, 7792671401506476172
  %1729 = or i64 %85, 1671967111920521568
  %1730 = xor i64 %85, -1
  %1731 = and i64 %1730, 7250635004549509494
  %1732 = and i64 %85, -7250635004549509495
  %1733 = or i64 %1731, %1732
  %1734 = xor i64 8334873345594433558, %1733
  %1735 = xor i64 %85, -1
  %1736 = or i64 -1671967111920521569, %1735
  %1737 = xor i64 %1736, -1
  %1738 = and i64 %1737, -1
  %1739 = or i64 %1734, %1738
  %1740 = xor i64 %1725, %1729
  %1741 = xor i64 %1740, %1728
  %1742 = xor i64 %1741, %1739
  %1743 = xor i64 %1742, -628602909107597893
  %1744 = mul i64 %1724, %1743
  %1745 = sub i64 81, %1744
  %.reload11.reload = load i64, i64* %.reload11.reg2mem, align 8
  %1746 = srem i64 %.reload11.reload, 2
  %1747 = icmp eq i64 %1746, 0
  %.reload.reload191 = load i32, i32* %.reload.reg2mem, align 4
  %1748 = and i64 %91, 2001420068343071578
  %1749 = xor i64 %91, -1
  %1750 = xor i64 2001420068343071578, %1749
  %1751 = and i64 %1750, 2001420068343071578
  %1752 = and i64 %15, 2548381449942094368
  %1753 = xor i64 %15, -1
  %1754 = or i64 -2548381449942094369, %1753
  %1755 = xor i64 %1754, -1
  %1756 = and i64 %1755, -1
  %1757 = or i64 %27, 2210733635347786544
  %1758 = xor i64 %27, -1
  %1759 = and i64 %1758, 5103032621801399035
  %1760 = and i64 %27, -5103032621801399036
  %1761 = or i64 %1759, %1760
  %1762 = xor i64 6376964747238721995, %1761
  %1763 = xor i64 %27, -1
  %1764 = or i64 -2210733635347786545, %1763
  %1765 = xor i64 %1764, -1
  %1766 = and i64 %1765, -1
  %1767 = or i64 %1762, %1766
  %1768 = xor i64 %1756, %1751
  %1769 = xor i64 %1768, %1748
  %1770 = xor i64 %1769, %1767
  %1771 = xor i64 %1770, %1752
  %1772 = xor i64 %1771, %1757
  %1773 = xor i64 %1772, 277938264682063541
  %1774 = add i64 %19, -4972165080607889030
  %1775 = add i64 -1966964333635089407, %19
  %1776 = add i64 %1775, -3005200746972799623
  %1777 = add i64 %230, -1671782034963728738
  %1778 = sub i64 0, %230
  %1779 = add i64 1671782034963728738, %1778
  %1780 = sub i64 0, %1779
  %1781 = xor i64 -3076901775174184762, %1776
  %1782 = xor i64 %1781, %1774
  %1783 = xor i64 %1782, %1777
  %1784 = xor i64 %1783, %1780
  %1785 = mul i64 %1773, %1784
  %1786 = trunc i64 %1785 to i32
  %1787 = xor i32 %.reload.reload191, %1786
  %1788 = and i32 %1787, %.reload.reload191
  %1789 = add i64 %79, -6922763746515762403
  %1790 = add i64 7391342158193086291, %79
  %1791 = sub i64 %1790, -4132638169000702922
  %1792 = or i64 %1061, -1005709296095166615
  %1793 = and i64 -1005709296095166615, %1061
  %1794 = xor i64 -1005709296095166615, %1061
  %1795 = or i64 %1793, %1794
  %1796 = or i64 %77, 952095506148549542
  %1797 = xor i64 %77, -1
  %1798 = and i64 952095506148549542, %1797
  %1799 = add i64 %1798, %77
  %1800 = xor i64 %1795, -5762456043703446449
  %1801 = xor i64 %1800, %1791
  %1802 = xor i64 %1801, %1789
  %1803 = xor i64 %1802, %1796
  %1804 = xor i64 %1803, %1792
  %1805 = xor i64 %1804, %1799
  %1806 = add i64 %228, 6301178716285478284
  %1807 = add i64 8961061504196307924, %228
  %1808 = add i64 %1807, -2659882787910829640
  %1809 = or i64 %146, -7092552152690615626
  %1810 = and i64 -7092552152690615626, %146
  %1811 = xor i64 -7092552152690615626, %146
  %1812 = or i64 %1810, %1811
  %1813 = xor i64 %1809, %1812
  %1814 = xor i64 %1813, %1806
  %1815 = xor i64 %1814, 0
  %1816 = xor i64 %1815, %1808
  %1817 = mul i64 %1805, %1816
  %1818 = trunc i64 %1817 to i32
  %1819 = icmp eq i32 %1788, %1818
  %.reload.reload190 = load i32, i32* %.reload.reg2mem, align 4
  %1820 = mul i32 %.reload.reload190, %.reload.reload190
  %.reload.reload = load i32, i32* %.reload.reg2mem, align 4
  %1821 = add i32 %1820, %.reload.reload
  %1822 = mul i32 %1821, 3
  %1823 = srem i32 %1822, 2
  %1824 = icmp eq i32 %1823, 0
  %1825 = or i1 %1819, %1824
  store i1 %1825, i1* %.reg2mem207, align 1
  %.reload121 = load i8**, i8*** %.reg2mem120, align 8
  %.reload124 = load i8**, i8*** %.reg2mem123, align 8
  %.reload209 = load i1, i1* %.reg2mem207, align 1
  %1826 = select i1 %.reload209, i8** %.reload121, i8** %.reload124
  %1827 = load i8*, i8** %1826, align 8
  indirectbr i8* %1827, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"29":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1828 = sdiv i64 124, 58
  %1829 = add i64 %73, 1533966514565275834
  %1830 = add i64 -8383078430304194258, %73
  %1831 = add i64 %1830, -8529699128840081524
  %1832 = add i64 %228, 6050133263414317202
  %1833 = add i64 6248823827873820670, %228
  %1834 = sub i64 %1833, 198690564459503468
  %1835 = add i64 %273, -3233692884519748796
  %1836 = add i64 153649271933760295, %273
  %1837 = sub i64 %1836, 3387342156453509091
  %1838 = xor i64 %1831, %1832
  %1839 = xor i64 %1838, 6547410608749988889
  %1840 = xor i64 %1839, %1835
  %1841 = xor i64 %1840, %1837
  %1842 = xor i64 %1841, %1834
  %1843 = xor i64 %1842, %1829
  %1844 = add i64 %140, 6999012494276218557
  %1845 = and i64 6999012494276218557, %140
  %1846 = or i64 6999012494276218557, %140
  %1847 = add i64 %1845, %1846
  %1848 = add i64 %1063, -178695385518063928
  %1849 = sub i64 0, %1063
  %1850 = sub i64 -178695385518063928, %1849
  %1851 = and i64 %234, 4671992397625287504
  %1852 = xor i64 %234, -1
  %1853 = xor i64 4671992397625287504, %1852
  %1854 = and i64 %1853, 4671992397625287504
  %1855 = xor i64 %1844, %1850
  %1856 = xor i64 %1855, %1854
  %1857 = xor i64 %1856, %1848
  %1858 = xor i64 %1857, 0
  %1859 = xor i64 %1858, %1847
  %1860 = xor i64 %1859, %1851
  %1861 = mul i64 %1843, %1860
  %1862 = add i64 %1861, 116
  %1863 = sub i64 107, 88
  %1864 = and i64 %1065, 7591333119483559447
  %1865 = xor i64 %1065, -1
  %1866 = or i64 -7591333119483559448, %1865
  %1867 = xor i64 %1866, -1
  %1868 = and i64 %1867, -1
  %1869 = add i64 %27, -2679433301456619533
  %1870 = sub i64 0, %27
  %1871 = add i64 2679433301456619533, %1870
  %1872 = sub i64 0, %1871
  %1873 = and i64 %9, 8426437001385847402
  %1874 = or i64 -8426437001385847403, %9
  %1875 = sub i64 %1874, -8426437001385847403
  %1876 = xor i64 %1869, %1872
  %1877 = xor i64 %1876, %1864
  %1878 = xor i64 %1877, %1873
  %1879 = xor i64 %1878, -2868970962244181109
  %1880 = xor i64 %1879, %1868
  %1881 = xor i64 %1880, %1875
  %1882 = and i64 %13, 6098938264958862478
  %1883 = xor i64 %13, -1
  %1884 = or i64 -6098938264958862479, %1883
  %1885 = xor i64 %1884, -1
  %1886 = and i64 %1885, -1
  %1887 = add i64 %269, 5414207410662927484
  %1888 = sub i64 0, %269
  %1889 = sub i64 5414207410662927484, %1888
  %1890 = xor i64 %1887, %1886
  %1891 = xor i64 %1890, %1889
  %1892 = xor i64 %1891, 5843742260659727359
  %1893 = xor i64 %1892, %1882
  %1894 = mul i64 %1881, %1893
  %1895 = sdiv i64 %1894, 20
  %.reload128 = load i8**, i8*** %.reg2mem126, align 8
  %1896 = load i8*, i8** %.reload128, align 8
  indirectbr i8* %1896, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"30":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1897 = sdiv i64 124, 58
  %1898 = add i64 64, 52
  %1899 = add i64 %136, -4808391826107162916
  %1900 = add i64 -1643614425352412852, %136
  %1901 = sub i64 %1900, 3164777400754750064
  %1902 = add i64 %77, -4948107644693408734
  %1903 = sub i64 0, %77
  %1904 = sub i64 -4948107644693408734, %1903
  %1905 = add i64 %317, -2276263527239331381
  %1906 = sub i64 0, %317
  %1907 = add i64 2276263527239331381, %1906
  %1908 = sub i64 0, %1907
  %1909 = xor i64 6386052702588214779, %1905
  %1910 = xor i64 %1909, %1899
  %1911 = xor i64 %1910, %1901
  %1912 = xor i64 %1911, %1908
  %1913 = xor i64 %1912, %1902
  %1914 = xor i64 %1913, %1904
  %1915 = and i64 %23, -7052508696190131536
  %1916 = xor i64 %23, -1
  %1917 = or i64 7052508696190131535, %1916
  %1918 = xor i64 %1917, -1
  %1919 = and i64 %1918, -1
  %1920 = or i64 %27, -7199922476764409837
  %1921 = xor i64 %27, -1
  %1922 = and i64 -7199922476764409837, %1921
  %1923 = add i64 %1922, %27
  %1924 = add i64 %975, -7882331907626135940
  %1925 = and i64 -7882331907626135940, %975
  %1926 = or i64 -7882331907626135940, %975
  %1927 = add i64 %1925, %1926
  %1928 = xor i64 %1924, %1920
  %1929 = xor i64 %1928, %1927
  %1930 = xor i64 %1929, %1915
  %1931 = xor i64 %1930, 4201709756620917128
  %1932 = xor i64 %1931, %1919
  %1933 = xor i64 %1932, %1923
  %1934 = mul i64 %1914, %1933
  %1935 = sub i64 107, %1934
  %1936 = add i64 %1059, 3997630888967546073
  %1937 = and i64 3997630888967546073, %1059
  %1938 = or i64 3997630888967546073, %1059
  %1939 = add i64 %1937, %1938
  %1940 = add i64 %916, -2575261458328297577
  %1941 = xor i64 -2575261458328297577, %916
  %1942 = and i64 -2575261458328297577, %916
  %1943 = mul i64 2, %1942
  %1944 = add i64 %1941, %1943
  %1945 = add i64 %13, 724333727708115077
  %1946 = add i64 1071695672793573689, %13
  %1947 = add i64 %1946, -347361945085458612
  %1948 = xor i64 %1947, %1945
  %1949 = xor i64 %1948, %1944
  %1950 = xor i64 %1949, %1940
  %1951 = xor i64 %1950, %1939
  %1952 = xor i64 %1951, %1936
  %1953 = xor i64 %1952, 2415055198646389893
  %1954 = add i64 %973, 4666543535501027381
  %1955 = sub i64 0, %973
  %1956 = add i64 -4666543535501027381, %1955
  %1957 = sub i64 0, %1956
  %1958 = and i64 %13, 5047722979528779449
  %1959 = xor i64 %13, -1
  %1960 = or i64 -5047722979528779450, %1959
  %1961 = xor i64 %1960, -1
  %1962 = and i64 %1961, -1
  %1963 = or i64 %269, -8610691327033704026
  %1964 = and i64 -8610691327033704026, %269
  %1965 = xor i64 -8610691327033704026, %269
  %1966 = or i64 %1964, %1965
  %1967 = xor i64 -8511693868849170940, %1963
  %1968 = xor i64 %1967, %1958
  %1969 = xor i64 %1968, %1966
  %1970 = xor i64 %1969, %1954
  %1971 = xor i64 %1970, %1962
  %1972 = xor i64 %1971, %1957
  %1973 = mul i64 %1953, %1972
  %1974 = sdiv i64 117, %1973
  %.reload110 = load i8**, i8*** %.reg2mem109, align 8
  %.reload127 = load i8**, i8*** %.reg2mem126, align 8
  %.reload208 = load i1, i1* %.reg2mem207, align 1
  %1975 = select i1 %.reload208, i8** %.reload127, i8** %.reload110
  %1976 = load i8*, i8** %1975, align 8
  indirectbr i8* %1976, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"31":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload131 = load i8**, i8*** %.reg2mem130, align 8
  %1977 = load i8*, i8** %.reload131, align 8
  indirectbr i8* %1977, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"32":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload135 = load i8**, i8*** %.reg2mem134, align 8
  %1978 = load i8*, i8** %.reload135, align 8
  %.reload196 = load i32, i32* %.reg2mem195, align 4
  store i32 %.reload196, i32* %.reg2mem232, align 4
  indirectbr i8* %1978, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"33":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload233 = load i32, i32* %.reg2mem232, align 4
  store i64 5221456193252566398, i64* %915, align 8
  %1979 = call i8** @lk14494699875176641526(i64* %915)
  %1980 = load i8*, i8** %1979, align 8
  %1981 = bitcast i8* %1980 to i32 (i32)*
  %1982 = call i32 %1981(i32 %.reload233)
  store i64 5221456193252566384, i64* %915, align 8
  %1983 = call i8** @lk14494699875176641526(i64* %915)
  %1984 = load i8*, i8** %1983, align 8
  %1985 = bitcast i8* %1984 to i32 (float*, float*)*
  %1986 = call i32 %1985(float* %0, float* %1)
  %1987 = icmp eq i32 %1986, 0
  %.reload187 = load i64, i64* %.reg2mem186, align 8
  %1988 = sub i64 %.reload187, 3740713938703776319
  %1989 = add i64 %1988, 1
  %1990 = add i64 %1989, 3740713938703776319
  store i64 %1990, i64* %.reg2mem210, align 8
  %.reload19 = load i8**, i8*** %.reg2mem18, align 8
  %.reload139 = load i8**, i8*** %.reg2mem138, align 8
  %1991 = select i1 %1987, i8** %.reload19, i8** %.reload139
  %1992 = load i8*, i8** %1991, align 8
  store i32 %1986, i32* %.ph.reg2mem, align 4
  indirectbr i8* %1992, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

.loopexit:                                        ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  %.reload144 = load i8**, i8*** %.reg2mem142, align 8
  %1993 = load i8*, i8** %.reload144, align 8
  store i32 %.ph.reload, i32* %.reg2mem234, align 4
  indirectbr i8* %1993, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"35":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload235 = load i32, i32* %.reg2mem234, align 4
  store i32 %.reload235, i32* %.reg2mem213, align 4
  %.reload148 = load i8**, i8*** %.reg2mem147, align 8
  %1994 = load i8*, i8** %.reload148, align 8
  indirectbr i8* %1994, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl58:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast62 = bitcast i64* %.loc59 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast62)
  store i64 5221456193252566396, i64* %915, align 8
  %1995 = call i8** @lk14494699875176641526(i64* %915)
  %1996 = load i8*, i8** %1995, align 8
  %1997 = bitcast i8* %1996 to i1 (i64, i64*)*
  %targetBlock60 = call i1 %1997(i64 %3, i64* %.loc59)
  %.reload61 = load i64, i64* %.loc59, align 8
  store i64 %.reload61, i64* %.reload61.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast62)
  %.reload151 = load i8**, i8*** %.reg2mem150, align 8
  %.reload164 = load i8**, i8*** %.reg2mem163, align 8
  %1998 = select i1 %targetBlock60, i8** %.reload151, i8** %.reload164
  %1999 = load i8*, i8** %1998, align 8
  indirectbr i8* %1999, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"37":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %2000 = sdiv i64 66, 6
  %.reload218 = load i32, i32* %.reg2mem213, align 4
  %2001 = srem i32 %.reload218, 2
  %2002 = icmp eq i32 %2001, 0
  %.reload217 = load i32, i32* %.reg2mem213, align 4
  %2003 = and i32 %.reload217, 1
  %2004 = add i64 %319, 1661082022767755917
  %2005 = and i64 1661082022767755917, %319
  %2006 = or i64 1661082022767755917, %319
  %2007 = add i64 %2005, %2006
  %2008 = or i64 %142, -3936341704346737780
  %2009 = xor i64 %142, -1
  %2010 = and i64 -3936341704346737780, %2009
  %2011 = add i64 %2010, %142
  %2012 = xor i64 %2004, %2008
  %2013 = xor i64 %2012, %2011
  %2014 = xor i64 %2013, 8314320712010243089
  %2015 = xor i64 %2014, %2007
  %2016 = and i64 %234, 1503983263439892293
  %2017 = xor i64 %234, -1
  %2018 = xor i64 1503983263439892293, %2017
  %2019 = and i64 %2018, 1503983263439892293
  %2020 = and i64 %144, 8216310926333923362
  %2021 = or i64 -8216310926333923363, %144
  %2022 = sub i64 %2021, -8216310926333923363
  %2023 = and i64 %87, -1465248782285185894
  %2024 = xor i64 %87, -1
  %2025 = xor i64 -1465248782285185894, %2024
  %2026 = and i64 %2025, -1465248782285185894
  %2027 = xor i64 %2026, %2023
  %2028 = xor i64 %2027, -1321087259301817103
  %2029 = xor i64 %2028, %2019
  %2030 = xor i64 %2029, %2020
  %2031 = xor i64 %2030, %2016
  %2032 = xor i64 %2031, %2022
  %2033 = mul i64 %2015, %2032
  %2034 = trunc i64 %2033 to i32
  %2035 = icmp eq i32 %2003, %2034
  %.reload216 = load i32, i32* %.reg2mem213, align 4
  %2036 = mul i32 %.reload216, %.reload216
  %.reload215 = load i32, i32* %.reg2mem213, align 4
  %2037 = and i64 %146, -6222748581683575540
  %2038 = or i64 6222748581683575539, %146
  %2039 = sub i64 %2038, 6222748581683575539
  %2040 = and i64 %75, -7437558323783607080
  %2041 = xor i64 %75, -1
  %2042 = xor i64 -7437558323783607080, %2041
  %2043 = and i64 %2042, -7437558323783607080
  %2044 = and i64 %1065, -4619295936675038531
  %2045 = or i64 4619295936675038530, %1065
  %2046 = sub i64 %2045, 4619295936675038530
  %2047 = xor i64 %2040, %2037
  %2048 = xor i64 %2047, -5779355578383689547
  %2049 = xor i64 %2048, %2043
  %2050 = xor i64 %2049, %2046
  %2051 = xor i64 %2050, %2044
  %2052 = xor i64 %2051, %2039
  %2053 = add i64 %77, -7998691045462814510
  %2054 = and i64 -7998691045462814510, %77
  %2055 = or i64 -7998691045462814510, %77
  %2056 = add i64 %2054, %2055
  %2057 = or i64 %83, 2615473340210644940
  %2058 = and i64 2615473340210644940, %83
  %2059 = xor i64 2615473340210644940, %83
  %2060 = or i64 %2058, %2059
  %2061 = or i64 %3, -2980305289013228648
  %2062 = xor i64 %3, -1
  %2063 = and i64 %2062, 6350164232169113105
  %2064 = and i64 %3, -6350164232169113106
  %2065 = or i64 %2063, %2064
  %2066 = xor i64 -8177546708965470839, %2065
  %2067 = xor i64 %3, -1
  %2068 = or i64 2980305289013228647, %2067
  %2069 = xor i64 %2068, -1
  %2070 = and i64 %2069, -1
  %2071 = or i64 %2066, %2070
  %2072 = xor i64 %2061, %2053
  %2073 = xor i64 %2072, %2071
  %2074 = xor i64 %2073, %2057
  %2075 = xor i64 %2074, -3157358975808840698
  %2076 = xor i64 %2075, %2056
  %2077 = xor i64 %2076, %2060
  %2078 = mul i64 %2052, %2077
  %2079 = trunc i64 %2078 to i32
  %2080 = sub i32 %2036, %2079
  %2081 = add i32 %2080, %.reload215
  %2082 = add i32 %2081, -371187650
  %2083 = srem i32 %2082, 2
  %2084 = icmp eq i32 %2083, 0
  %2085 = or i1 %2035, %2084
  store i1 %2085, i1* %.reg2mem221, align 1
  %.reload154 = load i8**, i8*** %.reg2mem153, align 8
  %.reload157 = load i8**, i8*** %.reg2mem156, align 8
  %.reload223 = load i1, i1* %.reg2mem221, align 1
  %2086 = select i1 %.reload223, i8** %.reload157, i8** %.reload154
  %2087 = load i8*, i8** %2086, align 8
  indirectbr i8* %2087, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"38":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload61.reload220 = load i64, i64* %.reload61.reg2mem, align 8
  %2088 = and i64 %236, 3700961169245249121
  %2089 = xor i64 %236, -1
  %2090 = xor i64 3700961169245249121, %2089
  %2091 = and i64 %2090, 3700961169245249121
  %2092 = and i64 %11, 6216679302253734226
  %2093 = or i64 -6216679302253734227, %11
  %2094 = sub i64 %2093, -6216679302253734227
  %2095 = xor i64 %2094, %2091
  %2096 = xor i64 %2095, %2088
  %2097 = xor i64 %2096, %2092
  %2098 = xor i64 %2097, 5510005365388768045
  %2099 = and i64 %87, -6484192857024418853
  %2100 = xor i64 %87, -1
  %2101 = or i64 6484192857024418852, %2100
  %2102 = xor i64 %2101, -1
  %2103 = and i64 %2102, -1
  %2104 = or i64 %319, 3984120267953730396
  %2105 = and i64 3984120267953730396, %319
  %2106 = xor i64 3984120267953730396, %319
  %2107 = or i64 %2105, %2106
  %2108 = add i64 %1065, -8071549381069802787
  %2109 = sub i64 0, %1065
  %2110 = add i64 8071549381069802787, %2109
  %2111 = sub i64 0, %2110
  %2112 = xor i64 %2104, 0
  %2113 = xor i64 %2112, %2111
  %2114 = xor i64 %2113, %2099
  %2115 = xor i64 %2114, %2107
  %2116 = xor i64 %2115, %2108
  %2117 = xor i64 %2116, %2103
  %2118 = mul i64 %2098, %2117
  %2119 = icmp eq i64 %.reload61.reload220, %2118
  %2120 = add i64 83, 32
  %2121 = or i64 %1059, 7978539069184135846
  %2122 = xor i64 %1059, -1
  %2123 = and i64 7978539069184135846, %2122
  %2124 = add i64 %2123, %1059
  %2125 = add i64 %136, 5603663854079608471
  %2126 = add i64 -5139296311823056648, %136
  %2127 = add i64 %2126, -7703783907806886497
  %2128 = xor i64 %2121, %2125
  %2129 = xor i64 %2128, %2124
  %2130 = xor i64 %2129, %2127
  %2131 = xor i64 %2130, -2698344462826749817
  %2132 = add i64 %21, 1472293690435710013
  %2133 = sub i64 0, %21
  %2134 = add i64 -1472293690435710013, %2133
  %2135 = sub i64 0, %2134
  %2136 = add i64 %275, 4897891190247842419
  %2137 = xor i64 4897891190247842419, %275
  %2138 = and i64 4897891190247842419, %275
  %2139 = mul i64 2, %2138
  %2140 = add i64 %2137, %2139
  %2141 = add i64 %971, -4015666809205993425
  %2142 = add i64 3334431913951970295, %971
  %2143 = sub i64 %2142, 7350098723157963720
  %2144 = xor i64 %2135, %2143
  %2145 = xor i64 %2144, %2136
  %2146 = xor i64 %2145, %2132
  %2147 = xor i64 %2146, %2141
  %2148 = xor i64 %2147, 8978111366683265102
  %2149 = xor i64 %2148, %2140
  %2150 = mul i64 %2131, %2149
  %2151 = sub i64 %2150, 4596222566729474350
  %2152 = and i64 %228, -6086001767371464467
  %2153 = xor i64 %228, -1
  %2154 = xor i64 -6086001767371464467, %2153
  %2155 = and i64 %2154, -6086001767371464467
  %2156 = add i64 %1061, -1831344415454952140
  %2157 = add i64 -8146422994808039891, %1061
  %2158 = sub i64 %2157, -6315078579353087751
  %2159 = xor i64 %2155, %2156
  %2160 = xor i64 %2159, %2152
  %2161 = xor i64 %2160, -8197144791632311563
  %2162 = xor i64 %2161, %2158
  %2163 = add i64 %144, -1196888341285969641
  %2164 = sub i64 0, %144
  %2165 = add i64 1196888341285969641, %2164
  %2166 = sub i64 0, %2165
  %2167 = add i64 %7, 969154572295883573
  %2168 = add i64 -5230786211653560112, %7
  %2169 = add i64 %2168, 6199940783949443685
  %2170 = xor i64 %2163, %2169
  %2171 = xor i64 %2170, %2166
  %2172 = xor i64 %2171, 2982738876963478910
  %2173 = xor i64 %2172, %2167
  %2174 = mul i64 %2162, %2173
  %2175 = sub i64 %2174, -3762849089462606482
  %2176 = sub i64 17, -52
  %2177 = mul i64 91, 89
  %2178 = add i64 5736701660134609380, -5736701660134609271
  %2179 = add i64 -2111588755941060718, 2111588755941060774
  %.reload143 = load i8**, i8*** %.reg2mem142, align 8
  %.reload161 = load i8**, i8*** %.reg2mem159, align 8
  %.reload222 = load i1, i1* %.reg2mem221, align 1
  %2180 = select i1 %.reload222, i8** %.reload161, i8** %.reload143
  %2181 = load i8*, i8** %2180, align 8
  store i32 0, i32* %.reg2mem234, align 4
  store i1 %2119, i1* %.reg2mem236, align 1
  indirectbr i8* %2181, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

codeRepl63:                                       ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast80 = bitcast i1* %.loc64 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast80)
  %lt.cast81 = bitcast i64* %.loc65 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast81)
  %lt.cast82 = bitcast i64* %.loc66 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast82)
  %lt.cast83 = bitcast i64* %.loc67 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast83)
  %lt.cast84 = bitcast i64* %.loc68 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast84)
  %lt.cast85 = bitcast i64* %.loc69 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast85)
  %lt.cast86 = bitcast i64* %.loc70 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast86)
  %lt.cast87 = bitcast i64* %.loc71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast87)
  store i64 5221456193252566387, i64* %915, align 8
  %2182 = call i8** @lk14494699875176641526(i64* %915)
  %2183 = load i8*, i8** %2182, align 8
  %2184 = bitcast i8* %2183 to void (i64, i1*, i64*, i64*, i64*, i64*, i64*, i64*, i64*)*
  %.reload61.reload219 = load i64, i64* %.reload61.reg2mem, align 8
  call void %2184(i64 %.reload61.reload219, i1* %.loc64, i64* %.loc65, i64* %.loc66, i64* %.loc67, i64* %.loc68, i64* %.loc69, i64* %.loc70, i64* %.loc71)
  %.reload72 = load i1, i1* %.loc64, align 1
  %.reload73 = load i64, i64* %.loc65, align 8
  %.reload74 = load i64, i64* %.loc66, align 8
  %.reload75 = load i64, i64* %.loc67, align 8
  %.reload76 = load i64, i64* %.loc68, align 8
  %.reload77 = load i64, i64* %.loc69, align 8
  %.reload78 = load i64, i64* %.loc70, align 8
  %.reload79 = load i64, i64* %.loc71, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast80)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast81)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast82)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast83)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast84)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast85)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast86)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast87)
  %.reload160 = load i8**, i8*** %.reg2mem159, align 8
  %2185 = load i8*, i8** %.reload160, align 8
  store i1 %.reload72, i1* %.reg2mem236, align 1
  indirectbr i8* %2185, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"40":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload237 = load i1, i1* %.reg2mem236, align 1
  %.reload168 = load i8**, i8*** %.reg2mem166, align 8
  %2186 = load i8*, i8** %.reload168, align 8
  store i1 %.reload237, i1* %.reg2mem238, align 1
  indirectbr i8* %2186, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"41":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload61.reload = load i64, i64* %.reload61.reg2mem, align 8
  %2187 = icmp eq i64 %.reload61.reload, 0
  %.reload167 = load i8**, i8*** %.reg2mem166, align 8
  %2188 = load i8*, i8** %.reload167, align 8
  store i1 %2187, i1* %.reg2mem238, align 1
  indirectbr i8* %2188, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"42":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload239 = load i1, i1* %.reg2mem238, align 1
  %.reload171 = load i8**, i8*** %.reg2mem170, align 8
  %.reload174 = load i8**, i8*** %.reg2mem173, align 8
  %2189 = select i1 %.reload239, i8** %.reload171, i8** %.reload174
  %2190 = load i8*, i8** %2189, align 8
  indirectbr i8* %2190, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"43":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload178 = load i8**, i8*** %.reg2mem176, align 8
  %2191 = load i8*, i8** %.reload178, align 8
  indirectbr i8* %2191, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"44":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload177 = load i8**, i8*** %.reg2mem176, align 8
  %2192 = load i8*, i8** %.reload177, align 8
  indirectbr i8* %2192, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.preheader, label %"3", label %"4", label %"5", label %"6", label %codeRepl, label %codeRepl1, label %"9", label %"10", label %codeRepl17, label %codeRepl31, label %"13", label %"14", label %codeRepl44, label %"16", label %codeRepl54, label %codeRepl56, label %"19", label %"20", label %"21", label %"22", label %"23", label %"24", label %"25", label %"26", label %"27", label %"28", label %"29", label %"30", label %"31", label %"32", label %"33", label %.loopexit, label %"35", label %codeRepl58, label %"37", label %"38", label %codeRepl63, label %"40", label %"41", label %"42", label %"43", label %"44", label %"45"]

"45":                                             ; preds = %"44", %"43", %"42", %"41", %"40", %codeRepl63, %"38", %"37", %codeRepl58, %"35", %.loopexit, %"33", %"32", %"31", %"30", %"29", %"28", %"27", %"26", %"25", %"24", %"23", %"22", %"21", %"20", %"19", %codeRepl56, %codeRepl54, %"16", %codeRepl44, %"14", %"13", %codeRepl31, %codeRepl17, %"10", %"9", %codeRepl1, %codeRepl, %"6", %"5", %"4", %"3", %.preheader, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload214 = load i32, i32* %.reg2mem213, align 4
  ret i32 %.reload214
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree noinline nounwind ssp uwtable
define i32 @clear(i8* %0, i64 %1, float* %2, i64 %3) local_unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h9549842938191327224(i64 388314415)
  %6 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %5
  store i8* blockaddress(@clear, %"12"), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314401)
  %8 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %7
  store i8* blockaddress(@clear, %codeRepl27), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314409)
  %10 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %9
  store i8* blockaddress(@clear, %codeRepl1), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314400)
  %12 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %11
  store i8* blockaddress(@clear, %"10"), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314408)
  %14 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %13
  store i8* blockaddress(@clear, %codeRepl28), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314403)
  %16 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %15
  store i8* blockaddress(@clear, %"9"), i8** %16, align 8
  %17 = add i64 %1, -4734744385481563318
  %18 = xor i64 -4734744385481563318, %1
  %19 = and i64 -4734744385481563318, %1
  %20 = mul i64 2, %19
  %21 = add i64 %18, %20
  %22 = add i64 %1, -388427656067362693
  %23 = sub i64 0, %1
  %24 = add i64 388427656067362693, %23
  %25 = sub i64 0, %24
  %26 = xor i64 2041744072145274157, %22
  %27 = xor i64 %26, %17
  %28 = xor i64 %27, %21
  %29 = xor i64 %28, %25
  %30 = add i64 %1, 8912206714775960773
  %31 = sub i64 0, %1
  %32 = add i64 -8912206714775960773, %31
  %33 = sub i64 0, %32
  %34 = add i64 %3, -1065080067739454094
  %35 = sub i64 0, %3
  %36 = add i64 1065080067739454094, %35
  %37 = sub i64 0, %36
  %38 = or i64 %3, 7215882160933687335
  %39 = xor i64 %3, -1
  %40 = and i64 7215882160933687335, %39
  %41 = add i64 %40, %3
  %42 = xor i64 %33, %41
  %43 = xor i64 %42, %37
  %44 = xor i64 %43, %34
  %45 = xor i64 %44, %38
  %46 = xor i64 %45, %30
  %47 = xor i64 %46, 3604441039134509108
  %48 = mul i64 %29, %47
  %49 = call i64 @h9549842938191327224(i64 %48)
  %50 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %49
  store i8* blockaddress(@clear, %"3"), i8** %50, align 8
  %51 = call i64 @h9549842938191327224(i64 388314402)
  %52 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %51
  store i8* blockaddress(@clear, %"6"), i8** %52, align 8
  %53 = add i64 %3, -5884548603742064201
  %54 = sub i64 0, %3
  %55 = sub i64 -5884548603742064201, %54
  %56 = and i64 %3, -18609361447183317
  %57 = or i64 18609361447183316, %3
  %58 = sub i64 %57, 18609361447183316
  %59 = xor i64 %55, %56
  %60 = xor i64 %59, 1064054850673863325
  %61 = xor i64 %60, %58
  %62 = xor i64 %61, %53
  %63 = add i64 %1, 4990165469902854979
  %64 = xor i64 4990165469902854979, %1
  %65 = and i64 4990165469902854979, %1
  %66 = mul i64 2, %65
  %67 = add i64 %64, %66
  %68 = add i64 %3, 2872400820948032620
  %69 = sub i64 0, %3
  %70 = sub i64 2872400820948032620, %69
  %71 = and i64 %1, -4583731040605866461
  %72 = or i64 4583731040605866460, %1
  %73 = sub i64 %72, 4583731040605866460
  %74 = xor i64 %63, %71
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, %68
  %77 = xor i64 %76, %73
  %78 = xor i64 %77, -3298431544987781666
  %79 = xor i64 %78, %70
  %80 = mul i64 %62, %79
  %81 = call i64 @h9549842938191327224(i64 %80)
  %82 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %81
  store i8* blockaddress(@clear, %codeRepl), i8** %82, align 8
  %83 = call i64 @h9549842938191327224(i64 388314414)
  %84 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %83
  store i8* blockaddress(@clear, %"7"), i8** %84, align 8
  %85 = call i64 @h9549842938191327224(i64 388314413)
  %86 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %85
  store i8* blockaddress(@clear, %EntryBasicBlockSplit), i8** %86, align 8
  %87 = and i64 %3, 946399022232469126
  %88 = xor i64 %3, -1
  %89 = xor i64 946399022232469126, %88
  %90 = and i64 %89, 946399022232469126
  %91 = and i64 %1, 7364767857731686881
  %92 = or i64 -7364767857731686882, %1
  %93 = sub i64 %92, -7364767857731686882
  %94 = add i64 %3, -7594946051234510355
  %95 = add i64 7786658172573424391, %3
  %96 = sub i64 %95, -3065139849901616870
  %97 = xor i64 %94, %90
  %98 = xor i64 %97, %87
  %99 = xor i64 %98, %91
  %100 = xor i64 %99, %96
  %101 = xor i64 %100, 1249434609987800201
  %102 = xor i64 %101, %93
  %103 = and i64 %3, 3029037264123955811
  %104 = xor i64 %3, -1
  %105 = or i64 -3029037264123955812, %104
  %106 = xor i64 %105, -1
  %107 = and i64 %106, -1
  %108 = add i64 %1, 6322039251504855976
  %109 = add i64 8178587952548168117, %1
  %110 = sub i64 %109, 1856548701043312141
  %111 = xor i64 %108, %107
  %112 = xor i64 %111, %110
  %113 = xor i64 %112, -8622686385879746356
  %114 = xor i64 %113, %103
  %115 = mul i64 %102, %114
  %116 = call i64 @h9549842938191327224(i64 %115)
  %117 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %116
  store i8* blockaddress(@clear, %"4"), i8** %117, align 8
  %118 = call i64 @h9549842938191327224(i64 388314405)
  %119 = getelementptr [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %118
  store i8* blockaddress(@clear, %BogusBasciBlock), i8** %119, align 8
  %120 = add i64 %3, -1351876124571416392
  %121 = add i64 -1278231089260754700, %3
  %122 = add i64 %121, -73645035310661692
  %123 = or i64 %3, 8883479188031546750
  %124 = and i64 8883479188031546750, %3
  %125 = xor i64 8883479188031546750, %3
  %126 = or i64 %124, %125
  %127 = or i64 %3, -4860778382599752118
  %128 = xor i64 %3, -1
  %129 = and i64 %128, -7301703204061273795
  %130 = and i64 %3, 7301703204061273794
  %131 = or i64 %129, %130
  %132 = xor i64 2747240095678912375, %131
  %133 = xor i64 %3, -1
  %134 = or i64 4860778382599752117, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = or i64 %132, %136
  %138 = xor i64 %137, %122
  %139 = xor i64 %138, -2167402467436311063
  %140 = xor i64 %139, %120
  %141 = xor i64 %140, %126
  %142 = xor i64 %141, %127
  %143 = xor i64 %142, %123
  %144 = and i64 %3, 2444252365118414635
  %145 = xor i64 %3, -1
  %146 = or i64 -2444252365118414636, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = add i64 %1, 3528559493953392911
  %150 = sub i64 0, %1
  %151 = sub i64 3528559493953392911, %150
  %152 = or i64 %1, -1933769775451281430
  %153 = xor i64 %1, -1
  %154 = and i64 -1933769775451281430, %153
  %155 = add i64 %154, %1
  %156 = xor i64 %148, %151
  %157 = xor i64 %156, %149
  %158 = xor i64 %157, -1815143527061759399
  %159 = xor i64 %158, %144
  %160 = xor i64 %159, %155
  %161 = xor i64 %160, %152
  %162 = mul i64 %143, %161
  %163 = trunc i64 %162 to i32
  %.reg2mem67 = alloca i32, i32 %163, align 4
  %.reg2mem65 = alloca i1, align 1
  %.reg2mem63 = alloca i1, align 1
  %.reg2mem61 = alloca i1, align 1
  %.reg2mem59 = alloca i1, align 1
  %.reg2mem57 = alloca i1, align 1
  %.reg2mem54 = alloca i1, align 1
  %.reload.reg2mem = alloca i1, align 1
  %.loc.reg2mem = alloca i1*, align 8
  %.reg2mem45 = alloca i8**, align 8
  %.reg2mem42 = alloca i8**, align 8
  %.reg2mem39 = alloca i8**, align 8
  %.reg2mem35 = alloca i8**, align 8
  %.reg2mem32 = alloca i8**, align 8
  %.reg2mem28 = alloca i8**, align 8
  %.reg2mem25 = alloca i8**, align 8
  %.reg2mem22 = alloca i8**, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 13, align 8
  %164 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear, %BogusBasciBlock), i8** %164, align 8
  %165 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %165, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@clear, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %166 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %166, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@clear, %codeRepl), i8** %.reload6, align 8
  %167 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %167, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@clear, %"3"), i8** %.reload9, align 8
  %168 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %168, i8*** %.reg2mem10, align 8
  %.reload21 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@clear, %"4"), i8** %.reload21, align 8
  %169 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %169, i8*** %.reg2mem22, align 8
  %.reload24 = load i8**, i8*** %.reg2mem22, align 8
  store i8* blockaddress(@clear, %codeRepl1), i8** %.reload24, align 8
  %170 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %170, i8*** %.reg2mem25, align 8
  %.reload27 = load i8**, i8*** %.reg2mem25, align 8
  store i8* blockaddress(@clear, %"6"), i8** %.reload27, align 8
  %171 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %171, i8*** %.reg2mem28, align 8
  %.reload31 = load i8**, i8*** %.reg2mem28, align 8
  store i8* blockaddress(@clear, %"7"), i8** %.reload31, align 8
  %172 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %172, i8*** %.reg2mem32, align 8
  %.reload34 = load i8**, i8*** %.reg2mem32, align 8
  store i8* blockaddress(@clear, %codeRepl27), i8** %.reload34, align 8
  %173 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %173, i8*** %.reg2mem35, align 8
  %.reload38 = load i8**, i8*** %.reg2mem35, align 8
  store i8* blockaddress(@clear, %"9"), i8** %.reload38, align 8
  %174 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %174, i8*** %.reg2mem39, align 8
  %.reload41 = load i8**, i8*** %.reg2mem39, align 8
  store i8* blockaddress(@clear, %"10"), i8** %.reload41, align 8
  %175 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %175, i8*** %.reg2mem42, align 8
  %.reload44 = load i8**, i8*** %.reg2mem42, align 8
  store i8* blockaddress(@clear, %codeRepl28), i8** %.reload44, align 8
  %176 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %176, i8*** %.reg2mem45, align 8
  %.reload49 = load i8**, i8*** %.reg2mem45, align 8
  store i8* blockaddress(@clear, %"12"), i8** %.reload49, align 8
  %177 = alloca i64, align 8
  %178 = or i64 %3, -6907596136155896315
  %179 = xor i64 %3, -1
  %180 = and i64 %179, 3555419026648078408
  %181 = and i64 %3, -3555419026648078409
  %182 = or i64 %180, %181
  %183 = xor i64 -7965694364685484467, %182
  %184 = xor i64 %3, -1
  %185 = or i64 6907596136155896314, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = or i64 %183, %187
  %189 = or i64 %3, -7919653539348203421
  %190 = xor i64 %3, -1
  %191 = and i64 -7919653539348203421, %190
  %192 = add i64 %191, %3
  %193 = xor i64 %192, %188
  %194 = xor i64 %193, %178
  %195 = xor i64 %194, %189
  %196 = xor i64 %195, -4990879138580956099
  %197 = and i64 %3, -164903455672141798
  %198 = xor i64 %3, -1
  %199 = xor i64 -164903455672141798, %198
  %200 = and i64 %199, -164903455672141798
  %201 = add i64 %1, -3818469432170317865
  %202 = add i64 3423787341671108818, %1
  %203 = sub i64 %202, 7242256773841426683
  %204 = add i64 %3, 4555867918145731270
  %205 = add i64 4245585150468206913, %3
  %206 = add i64 %205, 310282767677524357
  %207 = xor i64 6377370805893121198, %206
  %208 = xor i64 %207, %204
  %209 = xor i64 %208, %200
  %210 = xor i64 %209, %197
  %211 = xor i64 %210, %201
  %212 = xor i64 %211, %203
  %213 = mul i64 %196, %212
  %214 = call i64 @m1252811912226950246(i64 %213)
  %215 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394, i32 0, i64 %214
  store i8* bitcast (i1 (i8*, i64, i1*)* @clear..split to i8*), i8** %215, align 8
  %216 = add i64 %3, 8843370390699023948
  %217 = xor i64 8843370390699023948, %3
  %218 = and i64 8843370390699023948, %3
  %219 = mul i64 2, %218
  %220 = add i64 %217, %219
  %221 = add i64 %1, -275288854773160559
  %222 = and i64 -275288854773160559, %1
  %223 = or i64 -275288854773160559, %1
  %224 = add i64 %222, %223
  %225 = xor i64 1866674347152228049, %221
  %226 = xor i64 %225, %220
  %227 = xor i64 %226, %224
  %228 = xor i64 %227, %216
  %229 = and i64 %3, 6396417042149342091
  %230 = or i64 -6396417042149342092, %3
  %231 = sub i64 %230, -6396417042149342092
  %232 = or i64 %1, -4584629362322126707
  %233 = xor i64 %1, -1
  %234 = and i64 -4584629362322126707, %233
  %235 = add i64 %234, %1
  %236 = xor i64 %229, %232
  %237 = xor i64 %236, %231
  %238 = xor i64 %237, -5616850452834352697
  %239 = xor i64 %238, %235
  %240 = mul i64 %228, %239
  %241 = call i64 @m1252811912226950246(i64 %240)
  %242 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394, i32 0, i64 %241
  store i8* bitcast (i1 (float*, i1, i1, i64*, i1*, i64*, i1*, i64*, i64*, i64*, i64*)* @clear.extracted to i8*), i8** %242, align 8
  %243 = call i64 @m1252811912226950246(i64 5221456193252566388)
  %244 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394, i32 0, i64 %243
  store i8* bitcast (void ()* @clear..split.8 to i8*), i8** %244, align 8
  %245 = call i64 @m1252811912226950246(i64 5221456193252566389)
  %246 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394, i32 0, i64 %245
  store i8* bitcast (void (i8*, float*)* @clear.extracted.9 to i8*), i8** %246, align 8
  %.loc9 = alloca i64, align 8
  %.loc8 = alloca i64, align 8
  %.loc7 = alloca i64, align 8
  %247 = add i64 %3, -5711655640890209897
  %248 = add i64 8334188721691871993, %3
  %249 = add i64 %248, 4400899711127469726
  %250 = or i64 %3, -5957930659336876061
  %251 = xor i64 %3, -1
  %252 = and i64 -5957930659336876061, %251
  %253 = add i64 %252, %3
  %254 = or i64 %1, -5596305942016707910
  %255 = xor i64 %1, -1
  %256 = and i64 -5596305942016707910, %255
  %257 = add i64 %256, %1
  %258 = xor i64 %253, -8996236162498347501
  %259 = xor i64 %258, %249
  %260 = xor i64 %259, %250
  %261 = xor i64 %260, %257
  %262 = xor i64 %261, %254
  %263 = xor i64 %262, %247
  %264 = and i64 %3, -1932136422171407223
  %265 = xor i64 %3, -1
  %266 = or i64 1932136422171407222, %265
  %267 = xor i64 %266, -1
  %268 = and i64 %267, -1
  %269 = or i64 %1, -5606500805466213607
  %270 = and i64 -5606500805466213607, %1
  %271 = xor i64 -5606500805466213607, %1
  %272 = or i64 %270, %271
  %273 = xor i64 %269, %264
  %274 = xor i64 %273, -7424671890293900261
  %275 = xor i64 %274, %272
  %276 = xor i64 %275, %268
  %277 = mul i64 %263, %276
  %278 = trunc i64 %277 to i32
  %.loc6 = alloca i64, i32 %278, align 8
  %.loc5 = alloca i1, align 1
  %.loc4 = alloca i64, align 8
  %.loc3 = alloca i1, align 1
  %.loc2 = alloca i64, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %279 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %279, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

BogusBasciBlock:                                  ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %280 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear, %BogusBasciBlock), i8** %280, align 8
  %281 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@clear, %"9"), i8** %281, align 8
  %282 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@clear, %"10"), i8** %282, align 8
  %283 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@clear, %"12"), i8** %283, align 8
  %284 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@clear, %codeRepl27), i8** %284, align 8
  %285 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@clear, %codeRepl28), i8** %285, align 8
  %286 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@clear, %codeRepl), i8** %286, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %287 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %287, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

EntryBasicBlockSplit:                             ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc = alloca i1, align 1
  store i1* %.loc, i1** %.loc.reg2mem, align 8
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %288 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %288, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

codeRepl:                                         ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc.reload51 = load i1*, i1** %.loc.reg2mem, align 8
  %lt.cast = bitcast i1* %.loc.reload51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %289 = or i64 %11, -8465771813665919660
  %290 = xor i64 %11, -1
  %291 = and i64 -8465771813665919660, %290
  %292 = add i64 %291, %11
  %293 = add i64 %9, -2431425703251305100
  %294 = sub i64 0, %9
  %295 = add i64 2431425703251305100, %294
  %296 = sub i64 0, %295
  %297 = xor i64 %292, %293
  %298 = xor i64 %297, %289
  %299 = xor i64 %298, %296
  %300 = xor i64 %299, -6081704029956222035
  %301 = or i64 %116, 7922705773853345832
  %302 = xor i64 %116, -1
  %303 = and i64 7922705773853345832, %302
  %304 = add i64 %303, %116
  %305 = or i64 %11, 3981405380654517038
  %306 = and i64 3981405380654517038, %11
  %307 = xor i64 3981405380654517038, %11
  %308 = or i64 %306, %307
  %309 = and i64 %13, -7827012842067952800
  %310 = xor i64 %13, -1
  %311 = xor i64 -7827012842067952800, %310
  %312 = and i64 %311, -7827012842067952800
  %313 = xor i64 %312, 5885874688065018382
  %314 = xor i64 %313, %305
  %315 = xor i64 %314, %304
  %316 = xor i64 %315, %301
  %317 = xor i64 %316, %309
  %318 = xor i64 %317, %308
  %319 = mul i64 %300, %318
  store i64 %319, i64* %177, align 8
  %320 = alloca i8**, align 8
  %321 = or i64 %1, -6391599395052310242
  %322 = xor i64 %1, -1
  %323 = and i64 %322, 4795981173034501724
  %324 = and i64 %1, -4795981173034501725
  %325 = or i64 %323, %324
  %326 = xor i64 -1890732007770491070, %325
  %327 = xor i64 %1, -1
  %328 = or i64 6391599395052310241, %327
  %329 = xor i64 %328, -1
  %330 = and i64 %329, -1
  %331 = or i64 %326, %330
  %332 = and i64 %3, -1036221075074908810
  %333 = xor i64 %3, -1
  %334 = xor i64 -1036221075074908810, %333
  %335 = and i64 %334, -1036221075074908810
  %336 = add i64 %11, 3206608893952483655
  %337 = sub i64 0, %11
  %338 = add i64 -3206608893952483655, %337
  %339 = sub i64 0, %338
  %340 = xor i64 %339, %335
  %341 = xor i64 %340, %332
  %342 = xor i64 %341, %331
  %343 = xor i64 %342, %336
  %344 = xor i64 %343, %321
  %345 = xor i64 %344, -3800863179963445805
  %346 = add i64 %214, -8896539834251204323
  %347 = and i64 -8896539834251204323, %214
  %348 = or i64 -8896539834251204323, %214
  %349 = add i64 %347, %348
  %350 = or i64 %116, -3499019002896119113
  %351 = and i64 -3499019002896119113, %116
  %352 = xor i64 -3499019002896119113, %116
  %353 = or i64 %351, %352
  %354 = xor i64 %349, %346
  %355 = xor i64 %354, %353
  %356 = xor i64 %355, 0
  %357 = xor i64 %356, %350
  %358 = mul i64 %345, %357
  %359 = trunc i64 %358 to i1
  %360 = add i64 %7, 95597980309788327
  %361 = add i64 -1096722523834683374, %7
  %362 = add i64 %361, 1192320504144471701
  %363 = or i64 %3, -4407205532253543152
  %364 = xor i64 %3, -1
  %365 = and i64 %364, 402312165075275986
  %366 = and i64 %3, -402312165075275987
  %367 = or i64 %365, %366
  %368 = xor i64 -4088361212393982526, %367
  %369 = xor i64 %3, -1
  %370 = or i64 4407205532253543151, %369
  %371 = xor i64 %370, -1
  %372 = and i64 %371, -1
  %373 = or i64 %368, %372
  %374 = xor i64 -5049949276322074267, %373
  %375 = xor i64 %374, %362
  %376 = xor i64 %375, %360
  %377 = xor i64 %376, %363
  %378 = add i64 %49, 3736447902561059005
  %379 = and i64 3736447902561059005, %49
  %380 = or i64 3736447902561059005, %49
  %381 = add i64 %379, %380
  %382 = add i64 %1, 8346517659412497389
  %383 = and i64 8346517659412497389, %1
  %384 = or i64 8346517659412497389, %1
  %385 = add i64 %383, %384
  %386 = xor i64 0, %381
  %387 = xor i64 %386, %378
  %388 = xor i64 %387, %385
  %389 = xor i64 %388, %382
  %390 = mul i64 %377, %389
  %391 = trunc i64 %390 to i32
  %392 = or i64 %81, -4982449453794808126
  %393 = and i64 -4982449453794808126, %81
  %394 = xor i64 -4982449453794808126, %81
  %395 = or i64 %393, %394
  %396 = or i64 %51, -7107288598800245697
  %397 = xor i64 %51, -1
  %398 = and i64 %397, 1555771402093313163
  %399 = and i64 %51, -1555771402093313164
  %400 = or i64 %398, %399
  %401 = xor i64 -8589803251813556044, %400
  %402 = xor i64 %51, -1
  %403 = or i64 7107288598800245696, %402
  %404 = xor i64 %403, -1
  %405 = and i64 %404, -1
  %406 = or i64 %401, %405
  %407 = and i64 %243, -2861348605315813374
  %408 = xor i64 %243, -1
  %409 = xor i64 -2861348605315813374, %408
  %410 = and i64 %409, -2861348605315813374
  %411 = xor i64 %392, 587354584100741341
  %412 = xor i64 %411, %406
  %413 = xor i64 %412, %395
  %414 = xor i64 %413, %407
  %415 = xor i64 %414, %410
  %416 = xor i64 %415, %396
  %417 = and i64 %5, -8837267624377028453
  %418 = xor i64 %5, -1
  %419 = or i64 8837267624377028452, %418
  %420 = xor i64 %419, -1
  %421 = and i64 %420, -1
  %422 = add i64 %15, 1660521134968091758
  %423 = add i64 5581357617277537936, %15
  %424 = sub i64 %423, 3920836482309446178
  %425 = or i64 %118, 5777588107730596858
  %426 = xor i64 %118, -1
  %427 = and i64 5777588107730596858, %426
  %428 = add i64 %427, %118
  %429 = xor i64 %421, %428
  %430 = xor i64 %429, %424
  %431 = xor i64 %430, %417
  %432 = xor i64 %431, %422
  %433 = xor i64 %432, %425
  %434 = xor i64 %433, 0
  %435 = mul i64 %416, %434
  %436 = trunc i64 %435 to i1
  %437 = add i64 %85, -2991057952422358339
  %438 = sub i64 0, %85
  %439 = add i64 2991057952422358339, %438
  %440 = sub i64 0, %439
  %441 = add i64 %13, -3231555227511462959
  %442 = add i64 -5762002487155412428, %13
  %443 = add i64 %442, 2530447259643949469
  %444 = and i64 %5, 3821254835283632303
  %445 = or i64 -3821254835283632304, %5
  %446 = sub i64 %445, -3821254835283632304
  %447 = xor i64 %446, %444
  %448 = xor i64 %447, 249887129948474507
  %449 = xor i64 %448, %440
  %450 = xor i64 %449, %441
  %451 = xor i64 %450, %437
  %452 = xor i64 %451, %443
  %453 = add i64 %118, -3740474079160823368
  %454 = and i64 -3740474079160823368, %118
  %455 = or i64 -3740474079160823368, %118
  %456 = add i64 %454, %455
  %457 = or i64 %1, -4553234610924085038
  %458 = xor i64 %1, -1
  %459 = and i64 -4553234610924085038, %458
  %460 = add i64 %459, %1
  %461 = add i64 %9, 3161323197568867485
  %462 = xor i64 3161323197568867485, %9
  %463 = and i64 3161323197568867485, %9
  %464 = mul i64 2, %463
  %465 = add i64 %462, %464
  %466 = xor i64 %460, 0
  %467 = xor i64 %466, %456
  %468 = xor i64 %467, %457
  %469 = xor i64 %468, %461
  %470 = xor i64 %469, %465
  %471 = xor i64 %470, %453
  %472 = mul i64 %452, %471
  %473 = and i64 %243, 186118643419208529
  %474 = xor i64 %243, -1
  %475 = or i64 -186118643419208530, %474
  %476 = xor i64 %475, -1
  %477 = and i64 %476, -1
  %478 = add i64 %118, -380142010782624531
  %479 = sub i64 0, %118
  %480 = add i64 380142010782624531, %479
  %481 = sub i64 0, %480
  %482 = xor i64 %477, %473
  %483 = xor i64 %482, %481
  %484 = xor i64 %483, 1065677890043487951
  %485 = xor i64 %484, %478
  %486 = or i64 %116, -5392518968029088039
  %487 = xor i64 %116, -1
  %488 = and i64 -5392518968029088039, %487
  %489 = add i64 %488, %116
  %490 = or i64 %81, 2520428971951899667
  %491 = and i64 2520428971951899667, %81
  %492 = xor i64 2520428971951899667, %81
  %493 = or i64 %491, %492
  %494 = or i64 %118, -6697349722197058932
  %495 = xor i64 %118, -1
  %496 = and i64 %495, 4567911617740891599
  %497 = and i64 %118, -4567911617740891600
  %498 = or i64 %496, %497
  %499 = xor i64 -7175852122809729213, %498
  %500 = xor i64 %118, -1
  %501 = or i64 6697349722197058931, %500
  %502 = xor i64 %501, -1
  %503 = and i64 %502, -1
  %504 = or i64 %499, %503
  %505 = xor i64 %493, %486
  %506 = xor i64 %505, %504
  %507 = xor i64 %506, %489
  %508 = xor i64 %507, %494
  %509 = xor i64 %508, %490
  %510 = xor i64 %509, 0
  %511 = mul i64 %485, %510
  call void @"5784248439022692321"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* %177, i8*** %320, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 %359, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %391, i1* null, i1* null, i64 0, i64* null, i64* null, i1 %436, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 %472, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 %511, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %512 = load i8**, i8*** %320, align 8
  %513 = load i8*, i8** %512, align 8
  %514 = bitcast i8* %513 to i1 (i8*, i64, i1*)*
  %.loc.reload50 = load i1*, i1** %.loc.reg2mem, align 8
  %targetBlock = call i1 %514(i8* %0, i64 %1, i1* %.loc.reload50)
  %.loc.reload = load i1*, i1** %.loc.reg2mem, align 8
  %.reload = load i1, i1* %.loc.reload, align 1
  store i1 %.reload, i1* %.reload.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %.reload20 = load i8**, i8*** %.reg2mem10, align 8
  %515 = select i1 %targetBlock, i8** %.reload8, i8** %.reload20
  %516 = load i8*, i8** %515, align 8
  indirectbr i8* %516, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"3":                                              ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %517 = icmp eq float* %2, null
  %.reload.reload53 = load i1, i1* %.reload.reg2mem, align 1
  %518 = select i1 %.reload.reload53, i1 true, i1 %517
  %.reload37 = load i8**, i8*** %.reg2mem35, align 8
  %519 = load i8*, i8** %.reload37, align 8
  store i1 %518, i1* %.reg2mem65, align 1
  indirectbr i8* %519, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"4":                                              ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %520 = srem i64 %1, 2
  %521 = icmp eq i64 %520, 0
  %522 = xor i64 %1, -1
  %523 = or i64 %522, 1
  %524 = xor i64 %1, -1
  %525 = sub i64 %523, %524
  %526 = icmp eq i64 %525, 0
  %527 = mul i64 %1, %1
  %528 = sub i64 0, %1
  %529 = sub i64 %527, %528
  %530 = mul i64 %529, 3
  %531 = or i64 %3, 4438308996739974349
  %532 = and i64 4438308996739974349, %3
  %533 = xor i64 4438308996739974349, %3
  %534 = or i64 %532, %533
  %535 = or i64 %15, 8083268110738539811
  %536 = xor i64 %15, -1
  %537 = and i64 %536, 7376996962881425063
  %538 = and i64 %15, -7376996962881425064
  %539 = or i64 %537, %538
  %540 = xor i64 1607171685872470916, %539
  %541 = xor i64 %15, -1
  %542 = or i64 -8083268110738539812, %541
  %543 = xor i64 %542, -1
  %544 = and i64 %543, -1
  %545 = or i64 %540, %544
  %546 = and i64 %9, -8784801545456778588
  %547 = xor i64 %9, -1
  %548 = or i64 8784801545456778587, %547
  %549 = xor i64 %548, -1
  %550 = and i64 %549, -1
  %551 = xor i64 %546, %531
  %552 = xor i64 %551, %535
  %553 = xor i64 %552, %550
  %554 = xor i64 %553, %534
  %555 = xor i64 %554, %545
  %556 = xor i64 %555, -8890130318921617441
  %557 = or i64 %85, 6648659263559339774
  %558 = xor i64 %85, -1
  %559 = and i64 6648659263559339774, %558
  %560 = add i64 %559, %85
  %561 = add i64 %241, 8292701231291974424
  %562 = xor i64 8292701231291974424, %241
  %563 = and i64 8292701231291974424, %241
  %564 = mul i64 2, %563
  %565 = add i64 %562, %564
  %566 = xor i64 5713573215322413118, %565
  %567 = xor i64 %566, %560
  %568 = xor i64 %567, %561
  %569 = xor i64 %568, %557
  %570 = mul i64 %556, %569
  %571 = srem i64 %530, %570
  %572 = icmp eq i64 %571, 0
  %573 = xor i1 %526, true
  %574 = and i1 %573, true
  %575 = and i1 %526, false
  %576 = or i1 %574, %575
  %577 = xor i1 %572, true
  %578 = and i1 %577, true
  %579 = and i1 %572, false
  %580 = or i1 %578, %579
  %581 = xor i1 %576, %580
  %582 = xor i1 %526, true
  %583 = xor i1 %572, true
  %584 = or i1 %582, %583
  %585 = xor i1 %584, true
  %586 = and i1 %585, true
  %587 = or i1 %581, %586
  store i1 %587, i1* %.reg2mem54, align 1
  %.reload23 = load i8**, i8*** %.reg2mem22, align 8
  %.reload26 = load i8**, i8*** %.reg2mem25, align 8
  %.reload55 = load i1, i1* %.reg2mem54, align 1
  %588 = select i1 %.reload55, i8** %.reload26, i8** %.reload23
  %589 = load i8*, i8** %588, align 8
  indirectbr i8* %589, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

codeRepl1:                                        ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast19 = bitcast i64* %.loc2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast19)
  %lt.cast20 = bitcast i1* %.loc3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast20)
  %lt.cast21 = bitcast i64* %.loc4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast21)
  %lt.cast22 = bitcast i1* %.loc5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast22)
  %lt.cast23 = bitcast i64* %.loc6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast23)
  %lt.cast24 = bitcast i64* %.loc7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast24)
  %lt.cast25 = bitcast i64* %.loc8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  %lt.cast26 = bitcast i64* %.loc9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast26)
  store i64 5221456193252566391, i64* %177, align 8
  %590 = alloca i8**, align 8
  %591 = and i64 %85, -318220130162894665
  %592 = or i64 318220130162894664, %85
  %593 = sub i64 %592, 318220130162894664
  %594 = or i64 %243, -1147896279154496249
  %595 = xor i64 %243, -1
  %596 = and i64 %595, 3249065935054031640
  %597 = and i64 %243, -3249065935054031641
  %598 = or i64 %596, %597
  %599 = xor i64 -2520087065048701409, %598
  %600 = xor i64 %243, -1
  %601 = or i64 1147896279154496248, %600
  %602 = xor i64 %601, -1
  %603 = and i64 %602, -1
  %604 = or i64 %599, %603
  %605 = or i64 %49, -44507684311058426
  %606 = and i64 -44507684311058426, %49
  %607 = xor i64 -44507684311058426, %49
  %608 = or i64 %606, %607
  %609 = xor i64 %594, %608
  %610 = xor i64 %609, 2837636639907137049
  %611 = xor i64 %610, %605
  %612 = xor i64 %611, %604
  %613 = xor i64 %612, %591
  %614 = xor i64 %613, %593
  %615 = and i64 %1, -8725451701433730152
  %616 = xor i64 %1, -1
  %617 = or i64 8725451701433730151, %616
  %618 = xor i64 %617, -1
  %619 = and i64 %618, -1
  %620 = add i64 %81, -1935304896015631708
  %621 = sub i64 0, %81
  %622 = add i64 1935304896015631708, %621
  %623 = sub i64 0, %622
  %624 = and i64 %49, 7085199434074861556
  %625 = xor i64 %49, -1
  %626 = or i64 -7085199434074861557, %625
  %627 = xor i64 %626, -1
  %628 = and i64 %627, -1
  %629 = xor i64 %628, -99879624949199155
  %630 = xor i64 %629, %624
  %631 = xor i64 %630, %623
  %632 = xor i64 %631, %619
  %633 = xor i64 %632, %620
  %634 = xor i64 %633, %615
  %635 = mul i64 %614, %634
  %636 = trunc i64 %635 to i32
  %637 = or i64 %81, -4636236941660734184
  %638 = xor i64 %81, -1
  %639 = and i64 %638, 7029944097044424709
  %640 = and i64 %81, -7029944097044424710
  %641 = or i64 %639, %640
  %642 = xor i64 -2438795988347169507, %641
  %643 = xor i64 %81, -1
  %644 = or i64 4636236941660734183, %643
  %645 = xor i64 %644, -1
  %646 = and i64 %645, -1
  %647 = or i64 %642, %646
  %648 = or i64 %1, -1540379873591441623
  %649 = and i64 -1540379873591441623, %1
  %650 = xor i64 -1540379873591441623, %1
  %651 = or i64 %649, %650
  %652 = xor i64 -5055318537724638453, %637
  %653 = xor i64 %652, %648
  %654 = xor i64 %653, %651
  %655 = xor i64 %654, %647
  %656 = and i64 %7, -8702744729688158616
  %657 = xor i64 %7, -1
  %658 = xor i64 -8702744729688158616, %657
  %659 = and i64 %658, -8702744729688158616
  %660 = or i64 %7, -8818474126408860647
  %661 = and i64 -8818474126408860647, %7
  %662 = xor i64 -8818474126408860647, %7
  %663 = or i64 %661, %662
  %664 = xor i64 %659, %663
  %665 = xor i64 %664, %656
  %666 = xor i64 %665, %660
  %667 = xor i64 %666, 0
  %668 = mul i64 %655, %667
  %669 = trunc i64 %668 to i1
  %670 = add i64 %49, 2190063564106443067
  %671 = sub i64 0, %49
  %672 = sub i64 2190063564106443067, %671
  %673 = add i64 %214, 2359131334900835230
  %674 = xor i64 2359131334900835230, %214
  %675 = and i64 2359131334900835230, %214
  %676 = mul i64 2, %675
  %677 = add i64 %674, %676
  %678 = and i64 %241, 3180964273419411881
  %679 = or i64 -3180964273419411882, %241
  %680 = sub i64 %679, -3180964273419411882
  %681 = xor i64 %673, %672
  %682 = xor i64 %681, %678
  %683 = xor i64 %682, %677
  %684 = xor i64 %683, %670
  %685 = xor i64 %684, %680
  %686 = xor i64 %685, -5505561046935733961
  %687 = add i64 %83, 2412947163904558098
  %688 = add i64 -1055520321665389412, %83
  %689 = add i64 %688, 3468467485569947510
  %690 = or i64 %116, -1713889733885043851
  %691 = xor i64 %116, -1
  %692 = and i64 -1713889733885043851, %691
  %693 = add i64 %692, %116
  %694 = add i64 %83, 6034626869324215923
  %695 = xor i64 6034626869324215923, %83
  %696 = and i64 6034626869324215923, %83
  %697 = mul i64 2, %696
  %698 = add i64 %695, %697
  %699 = xor i64 %687, 0
  %700 = xor i64 %699, %698
  %701 = xor i64 %700, %689
  %702 = xor i64 %701, %694
  %703 = xor i64 %702, %693
  %704 = xor i64 %703, %690
  %705 = mul i64 %686, %704
  %706 = trunc i64 %705 to i32
  %707 = add i64 %15, -1823119096815658221
  %708 = xor i64 -1823119096815658221, %15
  %709 = and i64 -1823119096815658221, %15
  %710 = mul i64 2, %709
  %711 = add i64 %708, %710
  %712 = or i64 %245, -7862493068088167354
  %713 = xor i64 %245, -1
  %714 = and i64 %713, -172190072069787876
  %715 = and i64 %245, 172190072069787875
  %716 = or i64 %714, %715
  %717 = xor i64 8034019574016662362, %716
  %718 = xor i64 %245, -1
  %719 = or i64 7862493068088167353, %718
  %720 = xor i64 %719, -1
  %721 = and i64 %720, -1
  %722 = or i64 %717, %721
  %723 = add i64 %5, 2017434212742277129
  %724 = add i64 -9129650527095923680, %5
  %725 = sub i64 %724, 7299659333871350807
  %726 = xor i64 %722, %711
  %727 = xor i64 %726, %712
  %728 = xor i64 %727, -7597364927386814003
  %729 = xor i64 %728, %707
  %730 = xor i64 %729, %725
  %731 = xor i64 %730, %723
  %732 = add i64 %11, 2226410235370752059
  %733 = add i64 -7855077596406730788, %11
  %734 = sub i64 %733, 8365256241932068769
  %735 = add i64 %3, -6520771230074634940
  %736 = add i64 -5437980318475693753, %3
  %737 = sub i64 %736, 1082790911598941187
  %738 = xor i64 %735, %734
  %739 = xor i64 %738, %737
  %740 = xor i64 %739, %732
  %741 = xor i64 %740, 0
  %742 = mul i64 %731, %741
  %743 = trunc i64 %742 to i32
  %744 = or i64 %3, -4065809037812197889
  %745 = xor i64 %3, -1
  %746 = and i64 -4065809037812197889, %745
  %747 = add i64 %746, %3
  %748 = or i64 %118, -8884367206586983666
  %749 = xor i64 %118, -1
  %750 = and i64 %749, 6301154393501285094
  %751 = and i64 %118, -6301154393501285095
  %752 = or i64 %750, %751
  %753 = xor i64 -3186769999233949208, %752
  %754 = xor i64 %118, -1
  %755 = or i64 8884367206586983665, %754
  %756 = xor i64 %755, -1
  %757 = and i64 %756, -1
  %758 = or i64 %753, %757
  %759 = add i64 %118, 6060446112307313536
  %760 = and i64 6060446112307313536, %118
  %761 = or i64 6060446112307313536, %118
  %762 = add i64 %760, %761
  %763 = xor i64 %748, %744
  %764 = xor i64 %763, %759
  %765 = xor i64 %764, 7573976988081490105
  %766 = xor i64 %765, %747
  %767 = xor i64 %766, %758
  %768 = xor i64 %767, %762
  %769 = and i64 %3, -5690338219486973326
  %770 = or i64 5690338219486973325, %3
  %771 = sub i64 %770, 5690338219486973325
  %772 = or i64 %9, 5685495753746633364
  %773 = and i64 5685495753746633364, %9
  %774 = xor i64 5685495753746633364, %9
  %775 = or i64 %773, %774
  %776 = and i64 %3, 3614859078797508825
  %777 = xor i64 %3, -1
  %778 = or i64 -3614859078797508826, %777
  %779 = xor i64 %778, -1
  %780 = and i64 %779, -1
  %781 = xor i64 0, %769
  %782 = xor i64 %781, %776
  %783 = xor i64 %782, %772
  %784 = xor i64 %783, %775
  %785 = xor i64 %784, %780
  %786 = xor i64 %785, %771
  %787 = mul i64 %768, %786
  %788 = trunc i64 %787 to i32
  %789 = or i64 %11, -4254341764311028696
  %790 = xor i64 %11, -1
  %791 = and i64 %790, -2660988312516508399
  %792 = and i64 %11, 2660988312516508398
  %793 = or i64 %791, %792
  %794 = xor i64 2299034346840729913, %793
  %795 = xor i64 %11, -1
  %796 = or i64 4254341764311028695, %795
  %797 = xor i64 %796, -1
  %798 = and i64 %797, -1
  %799 = or i64 %794, %798
  %800 = and i64 %241, -14534076957066420
  %801 = xor i64 %241, -1
  %802 = xor i64 -14534076957066420, %801
  %803 = and i64 %802, -14534076957066420
  %804 = and i64 %83, 8122187698138140505
  %805 = xor i64 %83, -1
  %806 = or i64 -8122187698138140506, %805
  %807 = xor i64 %806, -1
  %808 = and i64 %807, -1
  %809 = xor i64 %800, %804
  %810 = xor i64 %809, %789
  %811 = xor i64 %810, %808
  %812 = xor i64 %811, -6716678142709989455
  %813 = xor i64 %812, %803
  %814 = xor i64 %813, %799
  %815 = or i64 %7, 6353689438118202033
  %816 = xor i64 %7, -1
  %817 = and i64 6353689438118202033, %816
  %818 = add i64 %817, %7
  %819 = add i64 %116, 7419553376653536624
  %820 = sub i64 0, %116
  %821 = sub i64 7419553376653536624, %820
  %822 = xor i64 0, %819
  %823 = xor i64 %822, %815
  %824 = xor i64 %823, %818
  %825 = xor i64 %824, %821
  %826 = mul i64 %814, %825
  %827 = trunc i64 %826 to i32
  %828 = add i64 %7, 3360695900983591234
  %829 = add i64 -5831822648598703186, %7
  %830 = add i64 %829, 9192518549582294420
  %831 = and i64 %85, 8623119002113599862
  %832 = xor i64 %85, -1
  %833 = xor i64 8623119002113599862, %832
  %834 = and i64 %833, 8623119002113599862
  %835 = and i64 %51, 7298462653055257000
  %836 = xor i64 %51, -1
  %837 = xor i64 7298462653055257000, %836
  %838 = and i64 %837, 7298462653055257000
  %839 = xor i64 %830, -1850322118684331617
  %840 = xor i64 %839, %831
  %841 = xor i64 %840, %838
  %842 = xor i64 %841, %835
  %843 = xor i64 %842, %828
  %844 = xor i64 %843, %834
  %845 = add i64 %85, -7322612651960595642
  %846 = xor i64 -7322612651960595642, %85
  %847 = and i64 -7322612651960595642, %85
  %848 = mul i64 2, %847
  %849 = add i64 %846, %848
  %850 = add i64 %3, -2435673945695965613
  %851 = and i64 -2435673945695965613, %3
  %852 = or i64 -2435673945695965613, %3
  %853 = add i64 %851, %852
  %854 = or i64 %3, 1985998408064793422
  %855 = xor i64 %3, -1
  %856 = and i64 %855, 2915283189602133169
  %857 = and i64 %3, -2915283189602133170
  %858 = or i64 %856, %857
  %859 = xor i64 3745452940120711167, %858
  %860 = xor i64 %3, -1
  %861 = or i64 -1985998408064793423, %860
  %862 = xor i64 %861, -1
  %863 = and i64 %862, -1
  %864 = or i64 %859, %863
  %865 = xor i64 %850, %845
  %866 = xor i64 %865, 0
  %867 = xor i64 %866, %854
  %868 = xor i64 %867, %849
  %869 = xor i64 %868, %864
  %870 = xor i64 %869, %853
  %871 = mul i64 %844, %870
  call void @"5784248439022692321"(i32 %636, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %669, i1 false, i1 false, i1* null, i1* null, i1* null, i64* %177, i8*** %590, i32 %706, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 %743, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %788, i1* null, i1* null, i32 %827, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 %871, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %872 = load i8**, i8*** %590, align 8
  %873 = load i8*, i8** %872, align 8
  %874 = bitcast i8* %873 to i1 (float*, i1, i1, i64*, i1*, i64*, i1*, i64*, i64*, i64*, i64*)*
  %.reload.reload52 = load i1, i1* %.reload.reg2mem, align 1
  %.reload56 = load i1, i1* %.reg2mem54, align 1
  %targetBlock10 = call i1 %874(float* %2, i1 %.reload.reload52, i1 %.reload56, i64* %.loc2, i1* %.loc3, i64* %.loc4, i1* %.loc5, i64* %.loc6, i64* %.loc7, i64* %.loc8, i64* %.loc9)
  %.reload11 = load i64, i64* %.loc2, align 8
  %.reload12 = load i1, i1* %.loc3, align 1
  %.reload13 = load i64, i64* %.loc4, align 8
  %.reload14 = load i1, i1* %.loc5, align 1
  %.reload15 = load i64, i64* %.loc6, align 8
  %.reload16 = load i64, i64* %.loc7, align 8
  %.reload17 = load i64, i64* %.loc8, align 8
  %.reload18 = load i64, i64* %.loc9, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast19)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast20)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast21)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast22)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast23)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast24)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast26)
  %.reload19 = load i8**, i8*** %.reg2mem10, align 8
  %.reload30 = load i8**, i8*** %.reg2mem28, align 8
  %875 = select i1 %targetBlock10, i8** %.reload30, i8** %.reload19
  %876 = load i8*, i8** %875, align 8
  store i1 %.reload12, i1* %.reg2mem61, align 1
  store i1 %.reload14, i1* %.reg2mem63, align 1
  indirectbr i8* %876, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"6":                                              ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %877 = add i64 -6952246401389681053, 6952246401389681039
  %878 = icmp eq float* %2, null
  %879 = mul i64 56, 22
  %.reload.reload = load i1, i1* %.reload.reg2mem, align 1
  %880 = select i1 %.reload.reload, i1 true, i1 %878
  %881 = sdiv i64 20, 17
  %882 = mul i64 120, 59
  %883 = sdiv i64 96, 29
  %884 = sub i64 0, -73
  %.reload29 = load i8**, i8*** %.reg2mem28, align 8
  %885 = load i8*, i8** %.reload29, align 8
  store i1 %878, i1* %.reg2mem61, align 1
  store i1 %880, i1* %.reg2mem63, align 1
  indirectbr i8* %885, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"7":                                              ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload64 = load i1, i1* %.reg2mem63, align 1
  %.reload62 = load i1, i1* %.reg2mem61, align 1
  store i1 %.reload64, i1* %.reg2mem59, align 1
  store i1 %.reload62, i1* %.reg2mem57, align 1
  %.reload33 = load i8**, i8*** %.reg2mem32, align 8
  %886 = load i8*, i8** %.reload33, align 8
  indirectbr i8* %886, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

codeRepl27:                                       ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566388, i64* %177, align 8
  %887 = alloca i8**, align 8
  %888 = and i64 %118, 6423202775983803492
  %889 = or i64 -6423202775983803493, %118
  %890 = sub i64 %889, -6423202775983803493
  %891 = and i64 %11, 2334702780590227375
  %892 = xor i64 %11, -1
  %893 = or i64 -2334702780590227376, %892
  %894 = xor i64 %893, -1
  %895 = and i64 %894, -1
  %896 = xor i64 %888, 7761133682174981619
  %897 = xor i64 %896, %890
  %898 = xor i64 %897, %891
  %899 = xor i64 %898, %895
  %900 = or i64 %51, 2197359128895800236
  %901 = and i64 2197359128895800236, %51
  %902 = xor i64 2197359128895800236, %51
  %903 = or i64 %901, %902
  %904 = add i64 %243, 6986569715775151121
  %905 = sub i64 0, %243
  %906 = add i64 -6986569715775151121, %905
  %907 = sub i64 0, %906
  %908 = xor i64 %903, 0
  %909 = xor i64 %908, %904
  %910 = xor i64 %909, %907
  %911 = xor i64 %910, %900
  %912 = mul i64 %899, %911
  %913 = trunc i64 %912 to i32
  %914 = and i64 %81, 6788969260372378305
  %915 = xor i64 %81, -1
  %916 = xor i64 6788969260372378305, %915
  %917 = and i64 %916, 6788969260372378305
  %918 = add i64 %1, 8132902152927576129
  %919 = and i64 8132902152927576129, %1
  %920 = or i64 8132902152927576129, %1
  %921 = add i64 %919, %920
  %922 = add i64 %13, 4061432627357005949
  %923 = sub i64 0, %13
  %924 = sub i64 4061432627357005949, %923
  %925 = xor i64 %918, %921
  %926 = xor i64 %925, %917
  %927 = xor i64 %926, %922
  %928 = xor i64 %927, %914
  %929 = xor i64 %928, %924
  %930 = xor i64 %929, 2634200180152916051
  %931 = add i64 %81, 2423615320546582861
  %932 = xor i64 2423615320546582861, %81
  %933 = and i64 2423615320546582861, %81
  %934 = mul i64 2, %933
  %935 = add i64 %932, %934
  %936 = and i64 %116, 6643658092580466394
  %937 = xor i64 %116, -1
  %938 = or i64 -6643658092580466395, %937
  %939 = xor i64 %938, -1
  %940 = and i64 %939, -1
  %941 = and i64 %11, -4140929833712081396
  %942 = xor i64 %11, -1
  %943 = or i64 4140929833712081395, %942
  %944 = xor i64 %943, -1
  %945 = and i64 %944, -1
  %946 = xor i64 0, %935
  %947 = xor i64 %946, %941
  %948 = xor i64 %947, %931
  %949 = xor i64 %948, %940
  %950 = xor i64 %949, %936
  %951 = xor i64 %950, %945
  %952 = mul i64 %930, %951
  %953 = or i64 %3, 5700737551535681789
  %954 = xor i64 %3, -1
  %955 = and i64 %954, -7393239682581259024
  %956 = and i64 %3, 7393239682581259023
  %957 = or i64 %955, %956
  %958 = xor i64 -2992367936000250867, %957
  %959 = xor i64 %3, -1
  %960 = or i64 -5700737551535681790, %959
  %961 = xor i64 %960, -1
  %962 = and i64 %961, -1
  %963 = or i64 %958, %962
  %964 = add i64 %49, 732216545314739250
  %965 = sub i64 0, %49
  %966 = add i64 -732216545314739250, %965
  %967 = sub i64 0, %966
  %968 = xor i64 %953, %967
  %969 = xor i64 %968, %964
  %970 = xor i64 %969, 3354138133277239241
  %971 = xor i64 %970, %963
  %972 = or i64 %241, -6304837230248748743
  %973 = and i64 -6304837230248748743, %241
  %974 = xor i64 -6304837230248748743, %241
  %975 = or i64 %973, %974
  %976 = or i64 %11, 3690937522120716600
  %977 = and i64 3690937522120716600, %11
  %978 = xor i64 3690937522120716600, %11
  %979 = or i64 %977, %978
  %980 = or i64 %13, 6031159375151309808
  %981 = xor i64 %13, -1
  %982 = and i64 %981, -2149818971629155417
  %983 = and i64 %13, 2149818971629155416
  %984 = or i64 %982, %983
  %985 = xor i64 -5649567312243644329, %984
  %986 = xor i64 %13, -1
  %987 = or i64 -6031159375151309809, %986
  %988 = xor i64 %987, -1
  %989 = and i64 %988, -1
  %990 = or i64 %985, %989
  %991 = xor i64 %980, %979
  %992 = xor i64 %991, %972
  %993 = xor i64 %992, %975
  %994 = xor i64 %993, 0
  %995 = xor i64 %994, %990
  %996 = xor i64 %995, %976
  %997 = mul i64 %971, %996
  %998 = trunc i64 %997 to i32
  %999 = and i64 %9, -3660754413718512901
  %1000 = xor i64 %9, -1
  %1001 = or i64 3660754413718512900, %1000
  %1002 = xor i64 %1001, -1
  %1003 = and i64 %1002, -1
  %1004 = or i64 %243, -7805861839656664833
  %1005 = xor i64 %243, -1
  %1006 = and i64 -7805861839656664833, %1005
  %1007 = add i64 %1006, %243
  %1008 = or i64 %5, 2867733146166409490
  %1009 = xor i64 %5, -1
  %1010 = and i64 2867733146166409490, %1009
  %1011 = add i64 %1010, %5
  %1012 = xor i64 %1008, %1007
  %1013 = xor i64 %1012, %1004
  %1014 = xor i64 %1013, -5440322142439430175
  %1015 = xor i64 %1014, %1011
  %1016 = xor i64 %1015, %1003
  %1017 = xor i64 %1016, %999
  %1018 = and i64 %5, 7035345176219025569
  %1019 = xor i64 %5, -1
  %1020 = xor i64 7035345176219025569, %1019
  %1021 = and i64 %1020, 7035345176219025569
  %1022 = and i64 %15, 936173605384674959
  %1023 = or i64 -936173605384674960, %15
  %1024 = sub i64 %1023, -936173605384674960
  %1025 = xor i64 %1018, %1021
  %1026 = xor i64 %1025, 0
  %1027 = xor i64 %1026, %1024
  %1028 = xor i64 %1027, %1022
  %1029 = mul i64 %1017, %1028
  %1030 = trunc i64 %1029 to i32
  %1031 = or i64 %7, -4497220993046185166
  %1032 = xor i64 %7, -1
  %1033 = and i64 -4497220993046185166, %1032
  %1034 = add i64 %1033, %7
  %1035 = add i64 %245, 4239047567534308843
  %1036 = sub i64 0, %245
  %1037 = add i64 -4239047567534308843, %1036
  %1038 = sub i64 0, %1037
  %1039 = and i64 %11, 3416288144372560546
  %1040 = xor i64 %11, -1
  %1041 = xor i64 3416288144372560546, %1040
  %1042 = and i64 %1041, 3416288144372560546
  %1043 = xor i64 %1035, %1038
  %1044 = xor i64 %1043, %1042
  %1045 = xor i64 %1044, %1039
  %1046 = xor i64 %1045, %1034
  %1047 = xor i64 %1046, %1031
  %1048 = xor i64 %1047, -6852066220074877815
  %1049 = add i64 %5, -8366347896491137187
  %1050 = and i64 -8366347896491137187, %5
  %1051 = or i64 -8366347896491137187, %5
  %1052 = add i64 %1050, %1051
  %1053 = add i64 %116, 2334403301831174723
  %1054 = xor i64 2334403301831174723, %116
  %1055 = and i64 2334403301831174723, %116
  %1056 = mul i64 2, %1055
  %1057 = add i64 %1054, %1056
  %1058 = xor i64 %1057, 0
  %1059 = xor i64 %1058, %1053
  %1060 = xor i64 %1059, %1052
  %1061 = xor i64 %1060, %1049
  %1062 = mul i64 %1048, %1061
  call void @"5784248439022692321"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* %177, i8*** %887, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 %913, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 %952, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 %998, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %1030, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 %1062, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %1063 = load i8**, i8*** %887, align 8
  %1064 = load i8*, i8** %1063, align 8
  %1065 = bitcast i8* %1064 to void ()*
  call void %1065()
  %.reload36 = load i8**, i8*** %.reg2mem35, align 8
  %1066 = load i8*, i8** %.reload36, align 8
  %.reload58 = load i1, i1* %.reg2mem57, align 1
  %.reload60 = load i1, i1* %.reg2mem59, align 1
  store i1 %.reload60, i1* %.reg2mem65, align 1
  indirectbr i8* %1066, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"9":                                              ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload66 = load i1, i1* %.reg2mem65, align 1
  %.reload40 = load i8**, i8*** %.reg2mem39, align 8
  %.reload48 = load i8**, i8*** %.reg2mem45, align 8
  %1067 = select i1 %.reload66, i8** %.reload48, i8** %.reload40
  %1068 = load i8*, i8** %1067, align 8
  store i32 2, i32* %.reg2mem67, align 4
  indirectbr i8* %1068, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"10":                                             ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1069 = and i64 %241, 254420802927775245
  %1070 = xor i64 %241, -1
  %1071 = or i64 -254420802927775246, %1070
  %1072 = xor i64 %1071, -1
  %1073 = and i64 %1072, -1
  %1074 = add i64 %11, -5456598493663807298
  %1075 = sub i64 0, %11
  %1076 = add i64 5456598493663807298, %1075
  %1077 = sub i64 0, %1076
  %1078 = xor i64 %1074, %1069
  %1079 = xor i64 %1078, %1077
  %1080 = xor i64 %1079, -2654207157295488715
  %1081 = xor i64 %1080, %1073
  %1082 = or i64 %243, -4029812349243031021
  %1083 = xor i64 %243, -1
  %1084 = and i64 %1083, 6411316167705620747
  %1085 = and i64 %243, -6411316167705620748
  %1086 = or i64 %1084, %1085
  %1087 = xor i64 -8004399496862829800, %1086
  %1088 = xor i64 %243, -1
  %1089 = or i64 4029812349243031020, %1088
  %1090 = xor i64 %1089, -1
  %1091 = and i64 %1090, -1
  %1092 = or i64 %1087, %1091
  %1093 = add i64 %9, 347694722188368006
  %1094 = add i64 7967765246550657551, %9
  %1095 = sub i64 %1094, 7620070524362289545
  %1096 = xor i64 %1092, 4593145292985640800
  %1097 = xor i64 %1096, %1095
  %1098 = xor i64 %1097, %1082
  %1099 = xor i64 %1098, %1093
  %1100 = mul i64 %1081, %1099
  %1101 = icmp ne i64 %1, %1100
  %1102 = icmp ne i64 %3, 7040
  %1103 = select i1 %1101, i1 true, i1 %1102
  %.reload43 = load i8**, i8*** %.reg2mem42, align 8
  %.reload47 = load i8**, i8*** %.reg2mem45, align 8
  %1104 = select i1 %1103, i8** %.reload47, i8** %.reload43
  %1105 = load i8*, i8** %1104, align 8
  store i32 2, i32* %.reg2mem67, align 4
  indirectbr i8* %1105, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

codeRepl28:                                       ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566389, i64* %177, align 8
  %1106 = and i64 %245, 2209588668486117480
  %1107 = xor i64 %245, -1
  %1108 = xor i64 2209588668486117480, %1107
  %1109 = and i64 %1108, 2209588668486117480
  %1110 = add i64 %3, -595582306434638510
  %1111 = add i64 8596231382232701360, %3
  %1112 = sub i64 %1111, 9191813688667339870
  %1113 = and i64 %85, -77731002161197456
  %1114 = xor i64 %85, -1
  %1115 = xor i64 -77731002161197456, %1114
  %1116 = and i64 %1115, -77731002161197456
  %1117 = xor i64 %1116, %1110
  %1118 = xor i64 %1117, %1106
  %1119 = xor i64 %1118, %1109
  %1120 = xor i64 %1119, %1112
  %1121 = xor i64 %1120, %1113
  %1122 = xor i64 %1121, 8138720295701630013
  %1123 = and i64 %81, -7089867749976842661
  %1124 = xor i64 %81, -1
  %1125 = or i64 7089867749976842660, %1124
  %1126 = xor i64 %1125, -1
  %1127 = and i64 %1126, -1
  %1128 = or i64 %116, -8901336551211126179
  %1129 = and i64 -8901336551211126179, %116
  %1130 = xor i64 -8901336551211126179, %116
  %1131 = or i64 %1129, %1130
  %1132 = or i64 %118, -5522619559049754557
  %1133 = xor i64 %118, -1
  %1134 = and i64 -5522619559049754557, %1133
  %1135 = add i64 %1134, %118
  %1136 = xor i64 %1127, %1123
  %1137 = xor i64 %1136, %1131
  %1138 = xor i64 %1137, %1132
  %1139 = xor i64 %1138, %1135
  %1140 = xor i64 %1139, %1128
  %1141 = xor i64 %1140, 2500531832363625237
  %1142 = mul i64 %1122, %1141
  %1143 = trunc i64 %1142 to i32
  %1144 = alloca i8**, i32 %1143, align 8
  %1145 = and i64 %116, -5900111391444890789
  %1146 = xor i64 %116, -1
  %1147 = xor i64 -5900111391444890789, %1146
  %1148 = and i64 %1147, -5900111391444890789
  %1149 = or i64 %3, 4573202025674672713
  %1150 = and i64 4573202025674672713, %3
  %1151 = xor i64 4573202025674672713, %3
  %1152 = or i64 %1150, %1151
  %1153 = xor i64 -7381922435857019929, %1145
  %1154 = xor i64 %1153, %1152
  %1155 = xor i64 %1154, %1149
  %1156 = xor i64 %1155, %1148
  %1157 = and i64 %15, -5603464624427125227
  %1158 = xor i64 %15, -1
  %1159 = xor i64 -5603464624427125227, %1158
  %1160 = and i64 %1159, -5603464624427125227
  %1161 = and i64 %11, 9193281778151616219
  %1162 = xor i64 %11, -1
  %1163 = or i64 -9193281778151616220, %1162
  %1164 = xor i64 %1163, -1
  %1165 = and i64 %1164, -1
  %1166 = xor i64 %1165, %1160
  %1167 = xor i64 %1166, -1784926096366913741
  %1168 = xor i64 %1167, %1161
  %1169 = xor i64 %1168, %1157
  %1170 = mul i64 %1156, %1169
  %1171 = trunc i64 %1170 to i32
  %1172 = and i64 %85, -1865413573703925800
  %1173 = or i64 1865413573703925799, %85
  %1174 = sub i64 %1173, 1865413573703925799
  %1175 = add i64 %5, -2696406210569423894
  %1176 = add i64 -4006970379101047066, %5
  %1177 = sub i64 %1176, -1310564168531623172
  %1178 = xor i64 %1177, %1174
  %1179 = xor i64 %1178, %1172
  %1180 = xor i64 %1179, 5784293903206566737
  %1181 = xor i64 %1180, %1175
  %1182 = add i64 %245, -5424507535467470795
  %1183 = sub i64 0, %245
  %1184 = add i64 5424507535467470795, %1183
  %1185 = sub i64 0, %1184
  %1186 = add i64 %51, 2242684968228339477
  %1187 = xor i64 2242684968228339477, %51
  %1188 = and i64 2242684968228339477, %51
  %1189 = mul i64 2, %1188
  %1190 = add i64 %1187, %1189
  %1191 = xor i64 %1190, %1186
  %1192 = xor i64 %1191, 0
  %1193 = xor i64 %1192, %1185
  %1194 = xor i64 %1193, %1182
  %1195 = mul i64 %1181, %1194
  %1196 = trunc i64 %1195 to i32
  %1197 = and i64 %7, 8377270821940581703
  %1198 = xor i64 %7, -1
  %1199 = xor i64 8377270821940581703, %1198
  %1200 = and i64 %1199, 8377270821940581703
  %1201 = or i64 %51, 7142122277576811522
  %1202 = xor i64 %51, -1
  %1203 = and i64 7142122277576811522, %1202
  %1204 = add i64 %1203, %51
  %1205 = or i64 %118, 1370767675003556251
  %1206 = xor i64 %118, -1
  %1207 = and i64 1370767675003556251, %1206
  %1208 = add i64 %1207, %118
  %1209 = xor i64 %1204, -4657897194958444485
  %1210 = xor i64 %1209, %1201
  %1211 = xor i64 %1210, %1200
  %1212 = xor i64 %1211, %1208
  %1213 = xor i64 %1212, %1205
  %1214 = xor i64 %1213, %1197
  %1215 = or i64 %81, 9113259336978431077
  %1216 = xor i64 %81, -1
  %1217 = and i64 %1216, 2959600972709627516
  %1218 = and i64 %81, -2959600972709627517
  %1219 = or i64 %1217, %1218
  %1220 = xor i64 6298935480895306265, %1219
  %1221 = xor i64 %81, -1
  %1222 = or i64 -9113259336978431078, %1221
  %1223 = xor i64 %1222, -1
  %1224 = and i64 %1223, -1
  %1225 = or i64 %1220, %1224
  %1226 = or i64 %118, -746271732365980739
  %1227 = xor i64 %118, -1
  %1228 = and i64 -746271732365980739, %1227
  %1229 = add i64 %1228, %118
  %1230 = xor i64 %1229, %1226
  %1231 = xor i64 %1230, 0
  %1232 = xor i64 %1231, %1215
  %1233 = xor i64 %1232, %1225
  %1234 = mul i64 %1214, %1233
  %1235 = trunc i64 %1234 to i32
  %1236 = and i64 %49, 7620128170868438949
  %1237 = xor i64 %49, -1
  %1238 = xor i64 7620128170868438949, %1237
  %1239 = and i64 %1238, 7620128170868438949
  %1240 = and i64 %9, 6537432274901690131
  %1241 = xor i64 %9, -1
  %1242 = xor i64 6537432274901690131, %1241
  %1243 = and i64 %1242, 6537432274901690131
  %1244 = or i64 %81, 1815453655205690215
  %1245 = xor i64 %81, -1
  %1246 = and i64 %1245, 5006181250921065690
  %1247 = and i64 %81, -5006181250921065691
  %1248 = or i64 %1246, %1247
  %1249 = xor i64 6649650791955486653, %1248
  %1250 = xor i64 %81, -1
  %1251 = or i64 -1815453655205690216, %1250
  %1252 = xor i64 %1251, -1
  %1253 = and i64 %1252, -1
  %1254 = or i64 %1249, %1253
  %1255 = xor i64 %1243, %1254
  %1256 = xor i64 %1255, %1236
  %1257 = xor i64 %1256, %1244
  %1258 = xor i64 %1257, %1240
  %1259 = xor i64 %1258, %1239
  %1260 = xor i64 %1259, -7306864647235574775
  %1261 = or i64 %3, -6966612327836975620
  %1262 = and i64 -6966612327836975620, %3
  %1263 = xor i64 -6966612327836975620, %3
  %1264 = or i64 %1262, %1263
  %1265 = add i64 %116, 5902331686129543836
  %1266 = and i64 5902331686129543836, %116
  %1267 = or i64 5902331686129543836, %116
  %1268 = add i64 %1266, %1267
  %1269 = xor i64 %1265, 0
  %1270 = xor i64 %1269, %1264
  %1271 = xor i64 %1270, %1261
  %1272 = xor i64 %1271, %1268
  %1273 = mul i64 %1260, %1272
  %1274 = trunc i64 %1273 to i32
  %1275 = or i64 %3, -6179037680620881313
  %1276 = xor i64 %3, -1
  %1277 = and i64 %1276, -8048566432764646624
  %1278 = and i64 %3, 8048566432764646623
  %1279 = or i64 %1277, %1278
  %1280 = xor i64 4211457804625023359, %1279
  %1281 = xor i64 %3, -1
  %1282 = or i64 6179037680620881312, %1281
  %1283 = xor i64 %1282, -1
  %1284 = and i64 %1283, -1
  %1285 = or i64 %1280, %1284
  %1286 = add i64 %15, -3392062824261004480
  %1287 = add i64 778814594678306218, %15
  %1288 = sub i64 %1287, 4170877418939310698
  %1289 = add i64 %3, 7731986152041621699
  %1290 = sub i64 0, %3
  %1291 = add i64 -7731986152041621699, %1290
  %1292 = sub i64 0, %1291
  %1293 = xor i64 %1286, %1275
  %1294 = xor i64 %1293, %1285
  %1295 = xor i64 %1294, %1292
  %1296 = xor i64 %1295, 8913365247486270397
  %1297 = xor i64 %1296, %1289
  %1298 = xor i64 %1297, %1288
  %1299 = or i64 %85, 7640684410737688897
  %1300 = and i64 7640684410737688897, %85
  %1301 = xor i64 7640684410737688897, %85
  %1302 = or i64 %1300, %1301
  %1303 = and i64 %214, 7991981877852240188
  %1304 = or i64 -7991981877852240189, %214
  %1305 = sub i64 %1304, -7991981877852240189
  %1306 = xor i64 %1305, %1302
  %1307 = xor i64 %1306, %1299
  %1308 = xor i64 %1307, 0
  %1309 = xor i64 %1308, %1303
  %1310 = mul i64 %1298, %1309
  %1311 = and i64 %81, -639790601424178727
  %1312 = xor i64 %81, -1
  %1313 = xor i64 -639790601424178727, %1312
  %1314 = and i64 %1313, -639790601424178727
  %1315 = or i64 %81, 2041635003890331483
  %1316 = and i64 2041635003890331483, %81
  %1317 = xor i64 2041635003890331483, %81
  %1318 = or i64 %1316, %1317
  %1319 = xor i64 %1318, %1314
  %1320 = xor i64 %1319, %1311
  %1321 = xor i64 %1320, %1315
  %1322 = xor i64 %1321, 9118058873831269477
  %1323 = add i64 %81, -8011371554961541296
  %1324 = xor i64 -8011371554961541296, %81
  %1325 = and i64 -8011371554961541296, %81
  %1326 = mul i64 2, %1325
  %1327 = add i64 %1324, %1326
  %1328 = or i64 %83, -1915952529478992442
  %1329 = and i64 -1915952529478992442, %83
  %1330 = xor i64 -1915952529478992442, %83
  %1331 = or i64 %1329, %1330
  %1332 = add i64 %1, -3249174076587962418
  %1333 = add i64 6483309930831931911, %1
  %1334 = add i64 %1333, 8714260066289657287
  %1335 = xor i64 %1323, %1334
  %1336 = xor i64 %1335, %1331
  %1337 = xor i64 %1336, %1328
  %1338 = xor i64 %1337, %1332
  %1339 = xor i64 %1338, %1327
  %1340 = xor i64 %1339, 0
  %1341 = mul i64 %1322, %1340
  %1342 = trunc i64 %1341 to i32
  %1343 = or i64 %243, 9142821922707544943
  %1344 = xor i64 %243, -1
  %1345 = and i64 9142821922707544943, %1344
  %1346 = add i64 %1345, %243
  %1347 = or i64 %118, 6339473122245939351
  %1348 = and i64 6339473122245939351, %118
  %1349 = xor i64 6339473122245939351, %118
  %1350 = or i64 %1348, %1349
  %1351 = xor i64 %1343, %1346
  %1352 = xor i64 %1351, %1347
  %1353 = xor i64 %1352, %1350
  %1354 = xor i64 %1353, 272235408744218853
  %1355 = and i64 %15, 6756614654195696205
  %1356 = or i64 -6756614654195696206, %15
  %1357 = sub i64 %1356, -6756614654195696206
  %1358 = or i64 %13, -4229657227884457526
  %1359 = xor i64 %13, -1
  %1360 = and i64 %1359, -1288936533912192783
  %1361 = and i64 %13, 1288936533912192782
  %1362 = or i64 %1360, %1361
  %1363 = xor i64 3121551049747032379, %1362
  %1364 = xor i64 %13, -1
  %1365 = or i64 4229657227884457525, %1364
  %1366 = xor i64 %1365, -1
  %1367 = and i64 %1366, -1
  %1368 = or i64 %1363, %1367
  %1369 = add i64 %3, -2739055164930039354
  %1370 = and i64 -2739055164930039354, %3
  %1371 = or i64 -2739055164930039354, %3
  %1372 = add i64 %1370, %1371
  %1373 = xor i64 %1357, 0
  %1374 = xor i64 %1373, %1368
  %1375 = xor i64 %1374, %1358
  %1376 = xor i64 %1375, %1369
  %1377 = xor i64 %1376, %1372
  %1378 = xor i64 %1377, %1355
  %1379 = mul i64 %1354, %1378
  %1380 = trunc i64 %1379 to i32
  call void @"5784248439022692321"(i32 %1171, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* %177, i8*** %1144, i32 %1196, i32 0, i1* null, i1* null, i32 %1235, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 %1274, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %1310, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 %1342, i32 %1380, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %1381 = load i8**, i8*** %1144, align 8
  %1382 = load i8*, i8** %1381, align 8
  %1383 = bitcast i8* %1382 to void (i8*, float*)*
  call void %1383(i8* %0, float* %2)
  %.reload46 = load i8**, i8*** %.reg2mem45, align 8
  %1384 = load i8*, i8** %.reload46, align 8
  %1385 = add i64 %241, 8006271916808869380
  %1386 = add i64 -2604577193432844411, %241
  %1387 = add i64 %1386, -7835894963467837825
  %1388 = or i64 %11, -1670275653781063490
  %1389 = xor i64 %11, -1
  %1390 = and i64 %1389, 625713064302684840
  %1391 = and i64 %11, -625713064302684841
  %1392 = or i64 %1390, %1391
  %1393 = xor i64 -2270087355162406378, %1392
  %1394 = xor i64 %11, -1
  %1395 = or i64 1670275653781063489, %1394
  %1396 = xor i64 %1395, -1
  %1397 = and i64 %1396, -1
  %1398 = or i64 %1393, %1397
  %1399 = add i64 %7, -4362441844432331726
  %1400 = xor i64 -4362441844432331726, %7
  %1401 = and i64 -4362441844432331726, %7
  %1402 = mul i64 2, %1401
  %1403 = add i64 %1400, %1402
  %1404 = xor i64 %1399, %1387
  %1405 = xor i64 %1404, %1403
  %1406 = xor i64 %1405, -4099239699536868571
  %1407 = xor i64 %1406, %1388
  %1408 = xor i64 %1407, %1398
  %1409 = xor i64 %1408, %1385
  %1410 = and i64 %243, 2695274397094474337
  %1411 = xor i64 %243, -1
  %1412 = xor i64 2695274397094474337, %1411
  %1413 = and i64 %1412, 2695274397094474337
  %1414 = and i64 %51, 2560480153300793622
  %1415 = xor i64 %51, -1
  %1416 = or i64 -2560480153300793623, %1415
  %1417 = xor i64 %1416, -1
  %1418 = and i64 %1417, -1
  %1419 = or i64 %85, -7470431514470848092
  %1420 = xor i64 %85, -1
  %1421 = and i64 -7470431514470848092, %1420
  %1422 = add i64 %1421, %85
  %1423 = xor i64 0, %1422
  %1424 = xor i64 %1423, %1410
  %1425 = xor i64 %1424, %1413
  %1426 = xor i64 %1425, %1414
  %1427 = xor i64 %1426, %1419
  %1428 = xor i64 %1427, %1418
  %1429 = mul i64 %1409, %1428
  %1430 = trunc i64 %1429 to i32
  store i32 %1430, i32* %.reg2mem67, align 4
  indirectbr i8* %1384, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %codeRepl1, label %"6", label %"7", label %codeRepl27, label %"9", label %"10", label %codeRepl28, label %"12"]

"12":                                             ; preds = %codeRepl28, %"10", %"9", %codeRepl27, %"7", %"6", %codeRepl1, %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload68 = load i32, i32* %.reg2mem67, align 4
  ret i32 %.reload68
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #4 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314409)
  %2 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %1
  store i8* blockaddress(@main, %loopEnd), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314415)
  %4 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %3
  store i8* blockaddress(@main, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314427)
  %6 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %5
  store i8* blockaddress(@main, %codeRepl35), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314420)
  %8 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %7
  store i8* blockaddress(@main, %codeRepl34), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314430)
  %10 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %9
  store i8* blockaddress(@main, %4805), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314417)
  %12 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %11
  store i8* blockaddress(@main, %4719), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314411)
  %14 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %13
  store i8* blockaddress(@main, %4586), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314416)
  %16 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %15
  store i8* blockaddress(@main, %4407), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314402)
  %18 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %17
  store i8* blockaddress(@main, %codeRepl1), i8** %18, align 8
  %19 = call i64 @h9549842938191327224(i64 388314429)
  %20 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %19
  store i8* blockaddress(@main, %codeRepl26), i8** %20, align 8
  %21 = call i64 @h9549842938191327224(i64 388314369)
  %22 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %21
  store i8* blockaddress(@main, %3261), i8** %22, align 8
  %23 = call i64 @h9549842938191327224(i64 388314368)
  %24 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %23
  store i8* blockaddress(@main, %2376), i8** %24, align 8
  %25 = call i64 @h9549842938191327224(i64 388314375)
  %26 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %25
  store i8* blockaddress(@main, %EntryBasicBlockSplit), i8** %26, align 8
  %27 = call i64 @h9549842938191327224(i64 388314407)
  %28 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %27
  store i8* blockaddress(@main, %3062), i8** %28, align 8
  %29 = call i64 @h9549842938191327224(i64 388314425)
  %30 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %29
  store i8* blockaddress(@main, %3447), i8** %30, align 8
  %31 = call i64 @h9549842938191327224(i64 388314408)
  %32 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %31
  store i8* blockaddress(@main, %603), i8** %32, align 8
  %33 = call i64 @h9549842938191327224(i64 388314405)
  %34 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %33
  store i8* blockaddress(@main, %2206), i8** %34, align 8
  %35 = call i64 @h9549842938191327224(i64 388314372)
  %36 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %35
  store i8* blockaddress(@main, %1853), i8** %36, align 8
  %37 = call i64 @h9549842938191327224(i64 388314404)
  %38 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %37
  store i8* blockaddress(@main, %1814), i8** %38, align 8
  %39 = call i64 @h9549842938191327224(i64 388314424)
  %40 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %39
  store i8* blockaddress(@main, %codeRepl19), i8** %40, align 8
  %41 = call i64 @h9549842938191327224(i64 388314428)
  %42 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %41
  store i8* blockaddress(@main, %3857), i8** %42, align 8
  %43 = call i64 @h9549842938191327224(i64 388314419)
  %44 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %43
  store i8* blockaddress(@main, %codeRepl), i8** %44, align 8
  %45 = call i64 @h9549842938191327224(i64 388314414)
  %46 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %45
  store i8* blockaddress(@main, %codeRepl32), i8** %46, align 8
  %47 = call i64 @h9549842938191327224(i64 388314403)
  %48 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %47
  store i8* blockaddress(@main, %1361), i8** %48, align 8
  %49 = call i64 @h9549842938191327224(i64 388314423)
  %50 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %49
  store i8* blockaddress(@main, %loopStart), i8** %50, align 8
  %51 = call i64 @h9549842938191327224(i64 388314426)
  %52 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %51
  store i8* blockaddress(@main, %398), i8** %52, align 8
  %53 = call i64 @h9549842938191327224(i64 388314422)
  %54 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %53
  store i8* blockaddress(@main, %1070), i8** %54, align 8
  %55 = call i64 @h9549842938191327224(i64 388314410)
  %56 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %55
  store i8* blockaddress(@main, %3373), i8** %56, align 8
  %57 = call i64 @h9549842938191327224(i64 388314418)
  %58 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %57
  store i8* blockaddress(@main, %codeRepl27), i8** %58, align 8
  %59 = call i64 @h9549842938191327224(i64 388314413)
  %60 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %59
  store i8* blockaddress(@main, %.loopexit), i8** %60, align 8
  %61 = call i64 @h9549842938191327224(i64 388314400)
  %62 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %61
  store i8* blockaddress(@main, %633), i8** %62, align 8
  %63 = call i64 @h9549842938191327224(i64 388314412)
  %64 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %63
  store i8* blockaddress(@main, %1928), i8** %64, align 8
  %65 = call i64 @h9549842938191327224(i64 388314374)
  %66 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %65
  store i8* blockaddress(@main, %defaultSwitchBasicBlock), i8** %66, align 8
  %67 = call i64 @h9549842938191327224(i64 388314401)
  %68 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %67
  store i8* blockaddress(@main, %4663), i8** %68, align 8
  %69 = call i64 @h9549842938191327224(i64 388314431)
  %70 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %69
  store i8* blockaddress(@main, %3979), i8** %70, align 8
  %71 = call i64 @h9549842938191327224(i64 388314421)
  %72 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %71
  store i8* blockaddress(@main, %.preheader), i8** %72, align 8
  %73 = call i64 @h9549842938191327224(i64 388314373)
  %74 = getelementptr [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %73
  store i8* blockaddress(@main, %codeRepl3), i8** %74, align 8
  %.reg2mem76 = alloca i32, align 4
  %.reg2mem74 = alloca i32, align 4
  %.reload38.reg2mem = alloca i32, align 4
  %.reload30.reg2mem = alloca i1, align 1
  %.reg2mem72 = alloca i32, align 4
  %.reg2mem69 = alloca i1, align 1
  %.reg2mem67 = alloca i32, align 4
  %.reg2mem65 = alloca i32, align 4
  %.reg2mem58 = alloca i32, align 4
  %.reg2mem54 = alloca i32, align 4
  %.reg2mem51 = alloca i32, align 4
  %.reload.reg2mem = alloca i1, align 1
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem44 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem36 = alloca i32, align 4
  %.reg2mem33 = alloca float*, align 8
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem15 = alloca i8*, align 8
  %.reg2mem7 = alloca i8*, align 8
  %.reg2mem4 = alloca i8*, align 8
  %.reg2mem = alloca i8*, align 8
  %lookupTable = alloca [38 x i32], align 4
  %75 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %75, align 4
  %76 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %76, align 4
  %77 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %77, align 4
  %78 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %79, align 4
  %80 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %80, align 4
  %81 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %81, align 4
  %82 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %82, align 4
  %83 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %83, align 4
  %84 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %84, align 4
  %85 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %85, align 4
  %86 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %86, align 4
  %87 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %87, align 4
  %88 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %88, align 4
  %89 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %89, align 4
  %90 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %90, align 4
  %91 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %91, align 4
  %92 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %92, align 4
  %93 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %93, align 4
  %94 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %94, align 4
  %95 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %95, align 4
  %96 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %96, align 4
  %97 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %97, align 4
  %98 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 23
  store i32 20, i32* %98, align 4
  %99 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 24
  store i32 21, i32* %99, align 4
  %100 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %100, align 4
  %101 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %101, align 4
  %102 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %102, align 4
  %103 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 28
  store i32 25, i32* %103, align 4
  %104 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 29
  store i32 26, i32* %104, align 4
  %105 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 30
  store i32 27, i32* %105, align 4
  %106 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %106, align 4
  %107 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %107, align 4
  %108 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %108, align 4
  %109 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %109, align 4
  %110 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %110, align 4
  %111 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %111, align 4
  %112 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %112, align 4
  %113 = alloca i64, align 8
  %114 = call i64 @m1252811912226950246(i64 5221456193252566385)
  %115 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %114
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %115, align 8
  %116 = call i64 @m1252811912226950246(i64 5221456193252566386)
  %117 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %116
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %117, align 8
  %118 = call i64 @m1252811912226950246(i64 5221456193252566388)
  %119 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %118
  store i8* bitcast (i1 (i32)* @main.extracted to i8*), i8** %119, align 8
  %120 = call i64 @m1252811912226950246(i64 5221456193252566398)
  %121 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %120
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.10 to i8*), i8** %121, align 8
  %122 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %123 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %122
  store i8* bitcast (void (i64*, i64*, i64*, i64*, i64*)* @main.extracted.11 to i8*), i8** %123, align 8
  %124 = call i64 @m1252811912226950246(i64 5221456193252566396)
  %125 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %124
  store i8* bitcast (void (i32*, i32*)* @main.extracted.12 to i8*), i8** %125, align 8
  %126 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %127 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %126
  store i8* bitcast (void ()* @main..split to i8*), i8** %127, align 8
  %128 = call i64 @m1252811912226950246(i64 5221456193252566389)
  %129 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %128
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.13 to i8*), i8** %129, align 8
  %130 = call i64 @m1252811912226950246(i64 5221456193252566384)
  %131 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %130
  store i8* bitcast (i1 (i32)* @main.extracted.14 to i8*), i8** %131, align 8
  %132 = call i64 @m1252811912226950246(i64 5221456193252566399)
  %133 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %132
  store i8* bitcast (void (i32)* @main.extracted.15 to i8*), i8** %133, align 8
  %134 = call i64 @m1252811912226950246(i64 5221456193252566387)
  %135 = getelementptr [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %134
  store i8* bitcast (i1 (float*, float*, i8*, float*, i32*)* @main.extracted.16 to i8*), i8** %135, align 8
  %.loc36 = alloca i32, align 4
  %.loc28 = alloca i1, align 1
  %.loc21 = alloca i32, align 4
  %.loc20 = alloca i32, align 4
  %.loc8 = alloca i64, align 8
  %.loc7 = alloca i64, align 8
  %.loc6 = alloca i64, align 8
  %.loc5 = alloca i64, align 8
  %.loc4 = alloca i64, align 8
  %.loc = alloca i1, align 1
  %136 = alloca float, align 4
  %137 = alloca float, align 4
  %138 = alloca [1760 x float], align 4
  %139 = alloca [1760 x i8], align 1
  %140 = bitcast float* %136 to i8*
  store i8* %140, i8** %.reg2mem, align 8
  %.reload3 = load i8*, i8** %.reg2mem, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %.reload3) #13
  store float 0.000000e+00, float* %136, align 4, !tbaa !10
  %141 = bitcast float* %137 to i8*
  store i8* %141, i8** %.reg2mem4, align 8
  %.reload6 = load i8*, i8** %.reg2mem4, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %.reload6) #13
  store float 0.000000e+00, float* %137, align 4, !tbaa !10
  %142 = bitcast [1760 x float]* %138 to i8*
  store i8* %142, i8** %.reg2mem7, align 8
  %.reload14 = load i8*, i8** %.reg2mem7, align 8
  call void @llvm.lifetime.start.p0i8(i64 7040, i8* nonnull %.reload14) #13
  %143 = getelementptr inbounds [1760 x i8], [1760 x i8]* %139, i64 0, i64 0
  store i8* %143, i8** %.reg2mem15, align 8
  %.reload19 = load i8*, i8** %.reg2mem15, align 8
  call void @llvm.lifetime.start.p0i8(i64 1760, i8* nonnull %.reload19) #13
  store i64 5221456193252566385, i64* %113, align 8
  %144 = alloca i8**, align 8
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %144, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %145 = load i8**, i8*** %144, align 8
  %146 = load i8*, i8** %145, align 8
  %147 = bitcast i8* %146 to i32 (i8*, ...)*
  %148 = call i32 (i8*, ...) %147(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i32 %148, i32* %.reg2mem20, align 4
  %149 = getelementptr inbounds [1760 x float], [1760 x float]* %138, i64 0, i64 0
  store float* %149, float** %.reg2mem33, align 8
  store i64 5221456193252566386, i64* %113, align 8
  %150 = alloca i8**, align 8
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %150, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %151 = load i8**, i8*** %150, align 8
  %152 = load i8*, i8** %151, align 8
  %153 = bitcast i8* %152 to i32 (float*, float*, i8*, float*)*
  %.reload18 = load i8*, i8** %.reg2mem15, align 8
  %.reload35 = load float*, float** %.reg2mem33, align 8
  %154 = call i32 %153(float* %136, float* %137, i8* %.reload18, float* %.reload35)
  store i32 %154, i32* %.reg2mem36, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314423, i32* %0, align 4
  %155 = call i8** @bf4471601488556574720(i32* %0)
  %156 = load i8*, i8** %155, align 8
  indirectbr i8* %156, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.preheader
    i32 2, label %398
    i32 3, label %603
    i32 4, label %633
    i32 5, label %codeRepl
    i32 6, label %1070
    i32 7, label %codeRepl1
    i32 8, label %1361
    i32 9, label %codeRepl3
    i32 10, label %1814
    i32 11, label %1853
    i32 12, label %1928
    i32 13, label %.loopexit
    i32 14, label %2206
    i32 15, label %2376
    i32 16, label %codeRepl19
    i32 17, label %3062
    i32 18, label %3261
    i32 19, label %3373
    i32 20, label %3447
    i32 21, label %codeRepl26
    i32 22, label %3857
    i32 23, label %3979
    i32 24, label %codeRepl27
    i32 25, label %4407
    i32 26, label %4586
    i32 27, label %4663
    i32 28, label %4719
    i32 29, label %4805
    i32 30, label %codeRepl32
    i32 31, label %codeRepl34
    i32 32, label %codeRepl35
    i32 33, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload40 = load i32, i32* %.reg2mem36, align 4
  %157 = icmp eq i32 %.reload40, 0
  %158 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 4
  %159 = load i32, i32* %158, align 4
  %160 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %161 = load i32, i32* %160, align 4
  %162 = srem i32 %159, %161
  %163 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 27
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 13
  %166 = load i32, i32* %165, align 4
  %167 = sub i32 %164, %166
  %168 = select i1 %157, i32 %162, i32 %167
  store i32 %168, i32* %dispatcher, align 4
  %.reload39 = load i32, i32* %.reg2mem36, align 4
  store i32 %.reload39, i32* %.reg2mem74, align 4
  %169 = load i8*, i8** %74, align 8
  %170 = load i8, i8* %169, align 1
  %171 = mul i8 %170, %170
  %172 = add i8 %171, %170
  %173 = mul i8 %172, 3
  %174 = srem i8 %173, 2
  %175 = icmp eq i8 %174, 0
  %176 = mul i8 %170, %170
  %177 = add i8 %176, %170
  %178 = srem i8 %177, 2
  %179 = icmp eq i8 %178, 0
  %180 = xor i1 %179, true
  %181 = xor i1 %175, %180
  %182 = and i1 %181, %175
  %183 = select i1 %182, i32 388314413, i32 388314409
  %184 = add i64 %41, 3330540470082959070
  %185 = and i64 3330540470082959070, %41
  %186 = or i64 3330540470082959070, %41
  %187 = add i64 %185, %186
  %188 = add i64 %27, 3994343096237524110
  %189 = and i64 3994343096237524110, %27
  %190 = or i64 3994343096237524110, %27
  %191 = add i64 %189, %190
  %192 = or i64 %13, -5155845893918073607
  %193 = xor i64 %13, -1
  %194 = and i64 %193, 7604834840088378390
  %195 = and i64 %13, -7604834840088378391
  %196 = or i64 %194, %195
  %197 = xor i64 -3316041826038701841, %196
  %198 = xor i64 %13, -1
  %199 = or i64 5155845893918073606, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = or i64 %197, %201
  %203 = xor i64 %188, -52906881262505227
  %204 = xor i64 %203, %192
  %205 = xor i64 %204, %184
  %206 = xor i64 %205, %202
  %207 = xor i64 %206, %187
  %208 = xor i64 %207, %191
  %209 = add i64 %120, 296000474351686202
  %210 = xor i64 296000474351686202, %120
  %211 = and i64 296000474351686202, %120
  %212 = mul i64 2, %211
  %213 = add i64 %210, %212
  %214 = or i64 %43, -7541011137335254175
  %215 = and i64 -7541011137335254175, %43
  %216 = xor i64 -7541011137335254175, %43
  %217 = or i64 %215, %216
  %218 = xor i64 %209, 5718580991076574580
  %219 = xor i64 %218, %214
  %220 = xor i64 %219, %213
  %221 = xor i64 %220, %217
  %222 = mul i64 %208, %221
  %223 = trunc i64 %222 to i32
  %224 = xor i32 %183, %223
  store i32 %224, i32* %0, align 4
  %225 = call i8** @bf4471601488556574720(i32* %0)
  %226 = load i8*, i8** %225, align 8
  indirectbr i8* %226, [label %loopEnd, label %EntryBasicBlockSplit]

.preheader:                                       ; preds = %.preheader, %loopStart
  %.reload32 = load i32, i32* %.reg2mem20, align 4
  %227 = mul i32 %.reload32, 2
  %.reload31 = load i32, i32* %.reg2mem20, align 4
  %228 = mul i32 %.reload31, 2
  %229 = xor i32 2, %228
  %230 = and i32 2, %228
  %231 = mul i32 2, %230
  %232 = add i32 %229, %231
  %233 = mul i32 %227, %232
  store i32 %233, i32* %.reg2mem41, align 4
  %.reload43 = load i32, i32* %.reg2mem41, align 4
  %234 = srem i32 %.reload43, 4
  %235 = icmp eq i32 %234, 0
  %.reload29 = load i32, i32* %.reg2mem20, align 4
  %236 = mul i32 %.reload29, %.reload29
  %.reload28 = load i32, i32* %.reg2mem20, align 4
  %237 = mul i32 %236, %.reload28
  %.reload27 = load i32, i32* %.reg2mem20, align 4
  %238 = add i32 %237, %.reload27
  store i32 %238, i32* %.reg2mem44, align 4
  %.reload46 = load i32, i32* %.reg2mem44, align 4
  %239 = add i64 %29, 5741301219222157435
  %240 = add i64 5279271760110063026, %29
  %241 = add i64 %240, 462029459112094409
  %242 = or i64 %17, -6031578436668281670
  %243 = and i64 -6031578436668281670, %17
  %244 = xor i64 -6031578436668281670, %17
  %245 = or i64 %243, %244
  %246 = or i64 %45, 6511586110854217164
  %247 = and i64 6511586110854217164, %45
  %248 = xor i64 6511586110854217164, %45
  %249 = or i64 %247, %248
  %250 = xor i64 %242, %246
  %251 = xor i64 %250, %245
  %252 = xor i64 %251, %249
  %253 = xor i64 %252, 7546101367578707585
  %254 = xor i64 %253, %239
  %255 = xor i64 %254, %241
  %256 = add i64 %130, -542238114935787916
  %257 = sub i64 0, %130
  %258 = add i64 542238114935787916, %257
  %259 = sub i64 0, %258
  %260 = sext i32 %dispatcher1 to i64
  %261 = add i64 %260, 3969346118641257773
  %262 = xor i64 3969346118641257773, %260
  %263 = and i64 3969346118641257773, %260
  %264 = mul i64 2, %263
  %265 = add i64 %262, %264
  %266 = and i64 %1, 8680461229369115312
  %267 = or i64 -8680461229369115313, %1
  %268 = sub i64 %267, -8680461229369115313
  %269 = xor i64 %268, %265
  %270 = xor i64 %269, %256
  %271 = xor i64 %270, %266
  %272 = xor i64 %271, %259
  %273 = xor i64 %272, 3297016143471440642
  %274 = xor i64 %273, %261
  %275 = mul i64 %255, %274
  %276 = trunc i64 %275 to i32
  %277 = srem i32 %.reload46, %276
  store i32 %277, i32* %.reg2mem47, align 4
  %.reload50 = load i32, i32* %.reg2mem47, align 4
  %278 = add i64 %47, 3534481245748417167
  %279 = add i64 -6947793272574871355, %47
  %280 = add i64 %279, -7964469555386263094
  %281 = add i64 %41, -6387495345641904524
  %282 = xor i64 -6387495345641904524, %41
  %283 = and i64 -6387495345641904524, %41
  %284 = mul i64 2, %283
  %285 = add i64 %282, %284
  %286 = xor i64 8932938183878069403, %278
  %287 = xor i64 %286, %280
  %288 = xor i64 %287, %281
  %289 = xor i64 %288, %285
  %290 = and i64 %53, 7738735114474388525
  %291 = xor i64 %53, -1
  %292 = xor i64 7738735114474388525, %291
  %293 = and i64 %292, 7738735114474388525
  %294 = and i64 %35, 8441985027294004377
  %295 = or i64 -8441985027294004378, %35
  %296 = sub i64 %295, -8441985027294004378
  %297 = xor i64 %296, %293
  %298 = xor i64 %297, %290
  %299 = xor i64 %298, %294
  %300 = xor i64 %299, 0
  %301 = mul i64 %289, %300
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %.reload50, %302
  %304 = and i1 %235, %303
  %305 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %308 = load i32, i32* %307, align 4
  %309 = srem i32 %306, %308
  %310 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 21
  %311 = load i32, i32* %310, align 4
  %312 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  %313 = load i32, i32* %312, align 4
  %314 = sub i32 %311, %313
  %315 = select i1 %304, i32 %309, i32 %314
  store i32 %315, i32* %dispatcher, align 4
  %316 = load i8*, i8** %18, align 8
  %317 = load i8, i8* %316, align 1
  %318 = mul i8 %317, 2
  %319 = and i64 %73, -1660545421447948082
  %320 = or i64 1660545421447948081, %73
  %321 = sub i64 %320, 1660545421447948081
  %322 = and i64 %25, -5972296601014057288
  %323 = xor i64 %25, -1
  %324 = xor i64 -5972296601014057288, %323
  %325 = and i64 %324, -5972296601014057288
  %326 = xor i64 %321, %325
  %327 = xor i64 %326, %322
  %328 = xor i64 %327, %319
  %329 = xor i64 %328, 5128456732771975039
  %330 = and i64 %126, -8229554357062968145
  %331 = xor i64 %126, -1
  %332 = xor i64 -8229554357062968145, %331
  %333 = and i64 %332, -8229554357062968145
  %334 = add i64 %7, 699986560126683004
  %335 = sub i64 0, %7
  %336 = add i64 -699986560126683004, %335
  %337 = sub i64 0, %336
  %338 = xor i64 %334, -2993544012732530434
  %339 = xor i64 %338, %333
  %340 = xor i64 %339, %330
  %341 = xor i64 %340, %337
  %342 = mul i64 %329, %341
  %343 = trunc i64 %342 to i8
  %344 = mul i8 %317, %343
  %345 = add i8 2, %344
  %346 = mul i8 %318, %345
  %347 = and i64 %122, -6493994926991733227
  %348 = or i64 6493994926991733226, %122
  %349 = sub i64 %348, 6493994926991733226
  %350 = and i64 %11, -8674579907777313653
  %351 = xor i64 %11, -1
  %352 = xor i64 -8674579907777313653, %351
  %353 = and i64 %352, -8674579907777313653
  %354 = xor i64 %353, %349
  %355 = xor i64 %354, %350
  %356 = xor i64 %355, %347
  %357 = xor i64 %356, 504180070580242733
  %358 = add i64 %134, -192487876353038223
  %359 = add i64 -635494589077475882, %134
  %360 = add i64 %359, 443006712724437659
  %361 = or i64 %37, 6069988599181418485
  %362 = xor i64 %37, -1
  %363 = and i64 %362, 2620588501137104513
  %364 = and i64 %37, -2620588501137104514
  %365 = or i64 %363, %364
  %366 = xor i64 8098278226589188468, %365
  %367 = xor i64 %37, -1
  %368 = or i64 -6069988599181418486, %367
  %369 = xor i64 %368, -1
  %370 = and i64 %369, -1
  %371 = or i64 %366, %370
  %372 = or i64 %3, -7550117533619043827
  %373 = xor i64 %3, -1
  %374 = and i64 -7550117533619043827, %373
  %375 = add i64 %374, %3
  %376 = xor i64 %361, -1769007808161269100
  %377 = xor i64 %376, %375
  %378 = xor i64 %377, %371
  %379 = xor i64 %378, %372
  %380 = xor i64 %379, %358
  %381 = xor i64 %380, %360
  %382 = mul i64 %357, %381
  %383 = trunc i64 %382 to i8
  %384 = srem i8 %346, %383
  %385 = icmp eq i8 %384, 0
  %386 = mul i8 %317, %317
  %387 = mul i8 %386, %317
  %388 = add i8 %387, %317
  %389 = srem i8 %388, 2
  %390 = icmp eq i8 %389, 0
  %391 = xor i1 %390, true
  %392 = xor i1 %385, %391
  %393 = and i1 %392, %385
  %394 = select i1 %393, i32 388314374, i32 388314409
  %395 = xor i32 %394, 47
  store i32 %395, i32* %0, align 4
  %396 = call i8** @bf4471601488556574720(i32* %0)
  %397 = load i8*, i8** %396, align 8
  indirectbr i8* %397, [label %loopEnd, label %.preheader]

398:                                              ; preds = %398, %loopStart
  %.reload45 = load i32, i32* %.reg2mem44, align 4
  %399 = or i64 %118, -4271995712333687090
  %400 = xor i64 %118, -1
  %401 = and i64 %400, -6031619820131722263
  %402 = and i64 %118, 6031619820131722262
  %403 = or i64 %401, %402
  %404 = xor i64 7565399983303429415, %403
  %405 = xor i64 %118, -1
  %406 = or i64 4271995712333687089, %405
  %407 = xor i64 %406, -1
  %408 = and i64 %407, -1
  %409 = or i64 %404, %408
  %410 = add i64 %71, 1135286290316736814
  %411 = add i64 8841999271728547750, %71
  %412 = add i64 %411, -7706712981411810936
  %413 = and i64 %41, -3606971531680795875
  %414 = xor i64 %41, -1
  %415 = xor i64 -3606971531680795875, %414
  %416 = and i64 %415, -3606971531680795875
  %417 = xor i64 %416, %413
  %418 = xor i64 %417, %412
  %419 = xor i64 %418, %410
  %420 = xor i64 %419, -6702851645934826093
  %421 = xor i64 %420, %399
  %422 = xor i64 %421, %409
  %423 = add i64 %27, -4381326190871807265
  %424 = sub i64 0, %27
  %425 = sub i64 -4381326190871807265, %424
  %426 = add i64 %67, 3624054730527398115
  %427 = and i64 3624054730527398115, %67
  %428 = or i64 3624054730527398115, %67
  %429 = add i64 %427, %428
  %430 = xor i64 %425, %426
  %431 = xor i64 %430, -2282206221241863882
  %432 = xor i64 %431, %429
  %433 = xor i64 %432, %423
  %434 = mul i64 %422, %433
  %435 = trunc i64 %434 to i32
  %436 = srem i32 %.reload45, %435
  %437 = icmp eq i32 %436, 0
  %438 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  %439 = load i32, i32* %438, align 4
  %440 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 4
  %441 = load i32, i32* %440, align 4
  %442 = add i32 %439, %441
  %443 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 7
  %444 = load i32, i32* %443, align 4
  %445 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %446 = load i32, i32* %445, align 4
  %447 = srem i32 %444, %446
  %448 = select i1 %437, i32 %442, i32 %447
  store i32 %448, i32* %dispatcher, align 4
  %449 = load i8*, i8** %22, align 8
  %450 = load i8, i8* %449, align 1
  %451 = mul i8 %450, 2
  %452 = or i64 %3, -4764612236252384673
  %453 = xor i64 %3, -1
  %454 = and i64 -4764612236252384673, %453
  %455 = add i64 %454, %3
  %456 = and i64 %118, -6571681466025424466
  %457 = xor i64 %118, -1
  %458 = or i64 6571681466025424465, %457
  %459 = xor i64 %458, -1
  %460 = and i64 %459, -1
  %461 = xor i64 %452, %460
  %462 = xor i64 %461, %456
  %463 = xor i64 %462, -2992111746107290473
  %464 = xor i64 %463, %455
  %465 = and i64 %43, -3885873217922528335
  %466 = xor i64 %43, -1
  %467 = or i64 3885873217922528334, %466
  %468 = xor i64 %467, -1
  %469 = and i64 %468, -1
  %470 = or i64 %9, -4894849046804730126
  %471 = and i64 -4894849046804730126, %9
  %472 = xor i64 -4894849046804730126, %9
  %473 = or i64 %471, %472
  %474 = xor i64 %465, %470
  %475 = xor i64 %474, -306931877861661106
  %476 = xor i64 %475, %469
  %477 = xor i64 %476, %473
  %478 = mul i64 %464, %477
  %479 = trunc i64 %478 to i8
  %480 = mul i8 %450, %479
  %481 = add i8 2, %480
  %482 = mul i8 %451, %481
  %483 = srem i8 %482, 4
  %484 = icmp eq i8 %483, 0
  %485 = mul i8 %450, %450
  %486 = mul i8 %485, %450
  %487 = add i8 %486, %450
  %488 = srem i8 %487, 2
  %489 = add i64 %13, 4510972230151279879
  %490 = sub i64 0, %13
  %491 = add i64 -4510972230151279879, %490
  %492 = sub i64 0, %491
  %493 = add i64 %5, 4939808169964543997
  %494 = sub i64 0, %5
  %495 = sub i64 4939808169964543997, %494
  %496 = xor i64 %489, %492
  %497 = xor i64 %496, %493
  %498 = xor i64 %497, -1034604624929623827
  %499 = xor i64 %498, %495
  %500 = add i64 %11, 9115566942986022516
  %501 = and i64 9115566942986022516, %11
  %502 = or i64 9115566942986022516, %11
  %503 = add i64 %501, %502
  %504 = sext i32 %154 to i64
  %505 = and i64 %504, -1036632543060150545
  %506 = xor i64 %504, -1
  %507 = or i64 1036632543060150544, %506
  %508 = xor i64 %507, -1
  %509 = and i64 %508, -1
  %510 = xor i64 0, %503
  %511 = xor i64 %510, %500
  %512 = xor i64 %511, %509
  %513 = xor i64 %512, %505
  %514 = mul i64 %499, %513
  %515 = trunc i64 %514 to i8
  %516 = icmp eq i8 %488, %515
  %517 = xor i1 %484, true
  %518 = add i64 %19, 4374770905405265970
  %519 = sub i64 0, %19
  %520 = sub i64 4374770905405265970, %519
  %521 = add i64 %15, 9067386139889831553
  %522 = and i64 9067386139889831553, %15
  %523 = or i64 9067386139889831553, %15
  %524 = add i64 %522, %523
  %525 = and i64 %59, 8173357734481367718
  %526 = or i64 -8173357734481367719, %59
  %527 = sub i64 %526, -8173357734481367719
  %528 = xor i64 %521, %527
  %529 = xor i64 %528, %524
  %530 = xor i64 %529, -7130122328361668969
  %531 = xor i64 %530, %518
  %532 = xor i64 %531, %520
  %533 = xor i64 %532, %525
  %534 = and i64 %128, -1316276046526507893
  %535 = or i64 1316276046526507892, %128
  %536 = sub i64 %535, 1316276046526507892
  %537 = or i64 %21, 3428413226515813409
  %538 = xor i64 %21, -1
  %539 = and i64 3428413226515813409, %538
  %540 = add i64 %539, %21
  %541 = and i64 %49, 5596781696036135689
  %542 = or i64 -5596781696036135690, %49
  %543 = sub i64 %542, -5596781696036135690
  %544 = xor i64 %534, %537
  %545 = xor i64 %544, %536
  %546 = xor i64 %545, %543
  %547 = xor i64 %546, %541
  %548 = xor i64 %547, %540
  %549 = xor i64 %548, -5510266233474092761
  %550 = mul i64 %533, %549
  %551 = trunc i64 %550 to i1
  %552 = xor i1 %516, %551
  %553 = or i1 %517, %552
  %554 = xor i1 %553, true
  %555 = and i1 %554, true
  %556 = and i64 %23, 8017821413387147587
  %557 = or i64 -8017821413387147588, %23
  %558 = sub i64 %557, -8017821413387147588
  %559 = add i64 %3, 8202233342647249992
  %560 = add i64 -4579225172156833115, %3
  %561 = add i64 %560, -5665285558905468509
  %562 = and i64 %114, -833119158031383954
  %563 = or i64 833119158031383953, %114
  %564 = sub i64 %563, 833119158031383953
  %565 = xor i64 %559, %564
  %566 = xor i64 %565, 8707128736125088549
  %567 = xor i64 %566, %558
  %568 = xor i64 %567, %556
  %569 = xor i64 %568, %561
  %570 = xor i64 %569, %562
  %571 = or i64 %132, 411582462925763811
  %572 = xor i64 %132, -1
  %573 = and i64 %572, 6518867797371398540
  %574 = and i64 %132, -6518867797371398541
  %575 = or i64 %573, %574
  %576 = xor i64 6899962855852236143, %575
  %577 = xor i64 %132, -1
  %578 = or i64 -411582462925763812, %577
  %579 = xor i64 %578, -1
  %580 = and i64 %579, -1
  %581 = or i64 %576, %580
  %582 = or i64 %37, -890301919779490451
  %583 = xor i64 %37, -1
  %584 = and i64 -890301919779490451, %583
  %585 = add i64 %584, %37
  %586 = add i64 %5, 4064674784367529473
  %587 = add i64 -3409164521539006430, %5
  %588 = sub i64 %587, -7473839305906535903
  %589 = xor i64 %586, %582
  %590 = xor i64 %589, %581
  %591 = xor i64 %590, %585
  %592 = xor i64 %591, -8380973430708347723
  %593 = xor i64 %592, %588
  %594 = xor i64 %593, %571
  %595 = mul i64 %570, %594
  %596 = trunc i64 %595 to i32
  %597 = select i1 %555, i32 388314405, i32 %596
  %598 = or i32 %597, 12
  %599 = and i32 %597, 12
  %600 = sub i32 %598, %599
  store i32 %600, i32* %0, align 4
  %601 = call i8** @bf4471601488556574720(i32* %0)
  %602 = load i8*, i8** %601, align 8
  indirectbr i8* %602, [label %loopEnd, label %398]

603:                                              ; preds = %603, %loopStart
  %604 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  %605 = load i32, i32* %604, align 4
  %606 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  %607 = load i32, i32* %606, align 4
  %608 = add i32 %605, %607
  store i32 %608, i32* %dispatcher, align 4
  %609 = load i8*, i8** %6, align 8
  %610 = load i8, i8* %609, align 1
  %611 = mul i8 %610, 2
  %612 = mul i8 %610, 2
  %613 = add i8 2, %612
  %614 = mul i8 %611, %613
  %615 = srem i8 %614, 4
  %616 = icmp eq i8 %615, 0
  %617 = mul i8 %610, %610
  %618 = xor i8 %617, %610
  %619 = and i8 %617, %610
  %620 = mul i8 2, %619
  %621 = add i8 %618, %620
  %622 = mul i8 39, %621
  %623 = add i8 23, %622
  %624 = mul i8 -105, %623
  %625 = add i8 111, %624
  %626 = srem i8 %625, 2
  %627 = icmp eq i8 %626, 0
  %628 = or i1 %616, %627
  %629 = select i1 %628, i32 388314412, i32 388314409
  %630 = xor i32 %629, 5
  store i32 %630, i32* %0, align 4
  %631 = call i8** @bf4471601488556574720(i32* %0)
  %632 = load i8*, i8** %631, align 8
  indirectbr i8* %632, [label %loopEnd, label %603]

633:                                              ; preds = %633, %loopStart
  %634 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  %635 = load i32, i32* %634, align 4
  %636 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  %637 = load i32, i32* %636, align 4
  %638 = add i32 %635, %637
  store i32 %638, i32* %dispatcher, align 4
  %639 = load i8*, i8** %28, align 8
  %640 = load i8, i8* %639, align 1
  %641 = xor i8 %640, -2
  %642 = and i8 %641, %640
  %643 = add i64 %23, -5315833304911938368
  %644 = sub i64 0, %23
  %645 = sub i64 -5315833304911938368, %644
  %646 = add i64 %5, 1662132086108926423
  %647 = add i64 4741859117680288781, %5
  %648 = add i64 %647, -3079727031571362358
  %649 = xor i64 %648, %643
  %650 = xor i64 %649, %645
  %651 = xor i64 %650, 8702463151278728351
  %652 = xor i64 %651, %646
  %653 = add i64 %73, 4026186928750670731
  %654 = sub i64 0, %73
  %655 = sub i64 4026186928750670731, %654
  %656 = or i64 %41, 5028457895168722079
  %657 = xor i64 %41, -1
  %658 = and i64 5028457895168722079, %657
  %659 = add i64 %658, %41
  %660 = add i64 %7, 7060183341456619684
  %661 = xor i64 7060183341456619684, %7
  %662 = and i64 7060183341456619684, %7
  %663 = mul i64 2, %662
  %664 = add i64 %661, %663
  %665 = xor i64 0, %656
  %666 = xor i64 %665, %653
  %667 = xor i64 %666, %664
  %668 = xor i64 %667, %660
  %669 = xor i64 %668, %655
  %670 = xor i64 %669, %659
  %671 = mul i64 %652, %670
  %672 = trunc i64 %671 to i8
  %673 = icmp eq i8 %642, %672
  %674 = mul i8 %640, %640
  %675 = add i8 %674, %640
  %676 = mul i8 %675, 3
  %677 = srem i8 %676, 2
  %678 = and i64 %118, -4242661019101713917
  %679 = xor i64 %118, -1
  %680 = or i64 4242661019101713916, %679
  %681 = xor i64 %680, -1
  %682 = and i64 %681, -1
  %683 = add i64 %35, 5623196042965407694
  %684 = xor i64 5623196042965407694, %35
  %685 = and i64 5623196042965407694, %35
  %686 = mul i64 2, %685
  %687 = add i64 %684, %686
  %688 = or i64 %13, -317360338693190937
  %689 = xor i64 %13, -1
  %690 = and i64 -317360338693190937, %689
  %691 = add i64 %690, %13
  %692 = xor i64 %678, %683
  %693 = xor i64 %692, %687
  %694 = xor i64 %693, -3010709214237398663
  %695 = xor i64 %694, %691
  %696 = xor i64 %695, %688
  %697 = xor i64 %696, %682
  %698 = and i64 %15, 4421626726938836692
  %699 = or i64 -4421626726938836693, %15
  %700 = sub i64 %699, -4421626726938836693
  %701 = or i64 %29, -4141891181641272123
  %702 = xor i64 %29, -1
  %703 = and i64 %702, -5219091046623960726
  %704 = and i64 %29, 5219091046623960725
  %705 = or i64 %703, %704
  %706 = xor i64 8149012503821309359, %705
  %707 = xor i64 %29, -1
  %708 = or i64 4141891181641272122, %707
  %709 = xor i64 %708, -1
  %710 = and i64 %709, -1
  %711 = or i64 %706, %710
  %712 = add i64 %29, 16844359464102588
  %713 = sub i64 0, %29
  %714 = add i64 -16844359464102588, %713
  %715 = sub i64 0, %714
  %716 = xor i64 %701, 0
  %717 = xor i64 %716, %712
  %718 = xor i64 %717, %700
  %719 = xor i64 %718, %711
  %720 = xor i64 %719, %715
  %721 = xor i64 %720, %698
  %722 = mul i64 %697, %721
  %723 = trunc i64 %722 to i8
  %724 = icmp eq i8 %677, %723
  %725 = or i1 %673, %724
  %726 = select i1 %725, i32 388314419, i32 388314409
  %727 = or i64 %63, -3432996376936284967
  %728 = xor i64 %63, -1
  %729 = and i64 -3432996376936284967, %728
  %730 = add i64 %729, %63
  %731 = add i64 %29, -4966276924515308497
  %732 = add i64 -5731023281778267663, %29
  %733 = sub i64 %732, -764746357262959166
  %734 = xor i64 %727, %730
  %735 = xor i64 %734, %733
  %736 = xor i64 %735, %731
  %737 = xor i64 %736, 8696924995357849197
  %738 = or i64 %1, -2225787847674015989
  %739 = and i64 -2225787847674015989, %1
  %740 = xor i64 -2225787847674015989, %1
  %741 = or i64 %739, %740
  %742 = add i64 %27, 4843502364974653734
  %743 = and i64 4843502364974653734, %27
  %744 = or i64 4843502364974653734, %27
  %745 = add i64 %743, %744
  %746 = sext i32 %154 to i64
  %747 = or i64 %746, -550281392311783694
  %748 = and i64 -550281392311783694, %746
  %749 = xor i64 -550281392311783694, %746
  %750 = or i64 %748, %749
  %751 = xor i64 %742, %741
  %752 = xor i64 %751, %738
  %753 = xor i64 %752, -991371411467166258
  %754 = xor i64 %753, %747
  %755 = xor i64 %754, %750
  %756 = xor i64 %755, %745
  %757 = mul i64 %737, %756
  %758 = trunc i64 %757 to i32
  %759 = xor i32 %726, %758
  %760 = xor i32 %759, -1464621908
  store i32 %760, i32* %0, align 4
  %761 = call i8** @bf4471601488556574720(i32* %0)
  %762 = load i8*, i8** %761, align 8
  indirectbr i8* %762, [label %loopEnd, label %633]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566388, i64* %113, align 8
  %763 = and i64 %39, 2104682453721385642
  %764 = xor i64 %39, -1
  %765 = xor i64 2104682453721385642, %764
  %766 = and i64 %765, 2104682453721385642
  %767 = or i64 %59, -6563072878572086265
  %768 = xor i64 %59, -1
  %769 = and i64 -6563072878572086265, %768
  %770 = add i64 %769, %59
  %771 = xor i64 %767, -8438347256510803851
  %772 = xor i64 %771, %770
  %773 = xor i64 %772, %766
  %774 = xor i64 %773, %763
  %775 = or i64 %134, 7554286231129642270
  %776 = and i64 7554286231129642270, %134
  %777 = xor i64 7554286231129642270, %134
  %778 = or i64 %776, %777
  %779 = add i64 %49, 6204111105882021122
  %780 = sub i64 0, %49
  %781 = add i64 -6204111105882021122, %780
  %782 = sub i64 0, %781
  %783 = or i64 %124, -7950369658745230838
  %784 = and i64 -7950369658745230838, %124
  %785 = xor i64 -7950369658745230838, %124
  %786 = or i64 %784, %785
  %787 = xor i64 -3425034767913369635, %775
  %788 = xor i64 %787, %782
  %789 = xor i64 %788, %783
  %790 = xor i64 %789, %779
  %791 = xor i64 %790, %786
  %792 = xor i64 %791, %778
  %793 = mul i64 %774, %792
  %794 = trunc i64 %793 to i32
  %795 = alloca i8**, i32 %794, align 8
  %796 = or i64 %13, -5040598630291316634
  %797 = xor i64 %13, -1
  %798 = and i64 %797, -4046328509308732328
  %799 = and i64 %13, 4046328509308732327
  %800 = or i64 %798, %799
  %801 = xor i64 9067082953967246398, %800
  %802 = xor i64 %13, -1
  %803 = or i64 5040598630291316633, %802
  %804 = xor i64 %803, -1
  %805 = and i64 %804, -1
  %806 = or i64 %801, %805
  %807 = or i64 %27, 1478300304133140897
  %808 = xor i64 %27, -1
  %809 = and i64 %808, 4569940149816042373
  %810 = and i64 %27, -4569940149816042374
  %811 = or i64 %809, %810
  %812 = xor i64 3163860178753917476, %811
  %813 = xor i64 %27, -1
  %814 = or i64 -1478300304133140898, %813
  %815 = xor i64 %814, -1
  %816 = and i64 %815, -1
  %817 = or i64 %812, %816
  %818 = or i64 %27, 7533970899596591150
  %819 = xor i64 %27, -1
  %820 = and i64 7533970899596591150, %819
  %821 = add i64 %820, %27
  %822 = xor i64 %807, %818
  %823 = xor i64 %822, %796
  %824 = xor i64 %823, %806
  %825 = xor i64 %824, %821
  %826 = xor i64 %825, %817
  %827 = xor i64 %826, -1703850703707477739
  %828 = and i64 %67, -979185037686806703
  %829 = or i64 979185037686806702, %67
  %830 = sub i64 %829, 979185037686806702
  %831 = or i64 %29, -4209190870258704216
  %832 = xor i64 %29, -1
  %833 = and i64 -4209190870258704216, %832
  %834 = add i64 %833, %29
  %835 = xor i64 %831, %830
  %836 = xor i64 %835, %828
  %837 = xor i64 %836, 0
  %838 = xor i64 %837, %834
  %839 = mul i64 %827, %838
  %840 = trunc i64 %839 to i1
  %841 = or i64 %47, 8110174713618440293
  %842 = xor i64 %47, -1
  %843 = and i64 8110174713618440293, %842
  %844 = add i64 %843, %47
  %845 = and i64 %128, 1363877484824893229
  %846 = xor i64 %128, -1
  %847 = or i64 -1363877484824893230, %846
  %848 = xor i64 %847, -1
  %849 = and i64 %848, -1
  %850 = xor i64 %844, %845
  %851 = xor i64 %850, -2980184312713643923
  %852 = xor i64 %851, %849
  %853 = xor i64 %852, %841
  %854 = add i64 %73, 522365665976460193
  %855 = xor i64 522365665976460193, %73
  %856 = and i64 522365665976460193, %73
  %857 = mul i64 2, %856
  %858 = add i64 %855, %857
  %859 = or i64 %130, -5866817522990787592
  %860 = xor i64 %130, -1
  %861 = and i64 %860, -5634381504910355524
  %862 = and i64 %130, 5634381504910355523
  %863 = or i64 %861, %862
  %864 = xor i64 2259196591108866116, %863
  %865 = xor i64 %130, -1
  %866 = or i64 5866817522990787591, %865
  %867 = xor i64 %866, -1
  %868 = and i64 %867, -1
  %869 = or i64 %864, %868
  %870 = add i64 %19, -8172530026413751734
  %871 = sub i64 0, %19
  %872 = sub i64 -8172530026413751734, %871
  %873 = xor i64 0, %870
  %874 = xor i64 %873, %854
  %875 = xor i64 %874, %872
  %876 = xor i64 %875, %869
  %877 = xor i64 %876, %858
  %878 = xor i64 %877, %859
  %879 = mul i64 %853, %878
  %880 = trunc i64 %879 to i1
  %881 = add i64 %53, -7075129532109544963
  %882 = and i64 -7075129532109544963, %53
  %883 = or i64 -7075129532109544963, %53
  %884 = add i64 %882, %883
  %885 = or i64 %130, -3540541727471251476
  %886 = xor i64 %130, -1
  %887 = and i64 %886, -8242812100095163351
  %888 = and i64 %130, 8242812100095163350
  %889 = or i64 %887, %888
  %890 = xor i64 4847806275820030917, %889
  %891 = xor i64 %130, -1
  %892 = or i64 3540541727471251475, %891
  %893 = xor i64 %892, -1
  %894 = and i64 %893, -1
  %895 = or i64 %890, %894
  %896 = xor i64 -8184262203946901787, %881
  %897 = xor i64 %896, %884
  %898 = xor i64 %897, %885
  %899 = xor i64 %898, %895
  %900 = or i64 %71, -195042589142171453
  %901 = xor i64 %71, -1
  %902 = and i64 -195042589142171453, %901
  %903 = add i64 %902, %71
  %904 = add i64 %17, -4677600839565381532
  %905 = add i64 8500788879009056325, %17
  %906 = sub i64 %905, -5268354355135113759
  %907 = add i64 %65, 3054257650474994105
  %908 = add i64 321696821177579787, %65
  %909 = sub i64 %908, -2732560829297414318
  %910 = xor i64 %903, %907
  %911 = xor i64 %910, %900
  %912 = xor i64 %911, 0
  %913 = xor i64 %912, %906
  %914 = xor i64 %913, %909
  %915 = xor i64 %914, %904
  %916 = mul i64 %899, %915
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 %840, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %795, i64 0, i64* null, i1 %880, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %916, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %917 = load i8**, i8*** %795, align 8
  %918 = load i8*, i8** %917, align 8
  %919 = bitcast i8* %918 to i1 (i32)*
  %.reload26 = load i32, i32* %.reg2mem20, align 4
  %targetBlock = call i1 %919(i32 %.reload26)
  %920 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 11
  %921 = load i32, i32* %920, align 4
  %922 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  %923 = load i32, i32* %922, align 4
  %924 = sub i32 %921, %923
  %925 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 7
  %926 = load i32, i32* %925, align 4
  %927 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  %928 = load i32, i32* %927, align 4
  %929 = add i32 %926, %928
  %930 = select i1 %targetBlock, i32 %924, i32 %929
  store i32 %930, i32* %dispatcher, align 4
  %931 = load i8*, i8** %4, align 8
  %932 = load i8, i8* %931, align 1
  %933 = mul i8 %932, 2
  %934 = mul i8 %932, 2
  %935 = add i8 2, %934
  %936 = mul i8 %933, %935
  %937 = add i64 %73, -3247670526100668267
  %938 = sub i64 0, %73
  %939 = sub i64 -3247670526100668267, %938
  %940 = or i64 %57, 1317660627269892270
  %941 = xor i64 %57, -1
  %942 = and i64 1317660627269892270, %941
  %943 = add i64 %942, %57
  %944 = xor i64 %939, %937
  %945 = xor i64 %944, %943
  %946 = xor i64 %945, %940
  %947 = xor i64 %946, -5641931911744624397
  %948 = and i64 %13, 5026890603833816131
  %949 = xor i64 %13, -1
  %950 = or i64 -5026890603833816132, %949
  %951 = xor i64 %950, -1
  %952 = and i64 %951, -1
  %953 = add i64 %9, -738221955074690782
  %954 = xor i64 -738221955074690782, %9
  %955 = and i64 -738221955074690782, %9
  %956 = mul i64 2, %955
  %957 = add i64 %954, %956
  %958 = xor i64 7432551681251852524, %957
  %959 = xor i64 %958, %948
  %960 = xor i64 %959, %952
  %961 = xor i64 %960, %953
  %962 = mul i64 %947, %961
  %963 = trunc i64 %962 to i8
  %964 = srem i8 %936, %963
  %965 = icmp eq i8 %964, 0
  %966 = mul i8 %932, %932
  %967 = mul i8 %966, %932
  %968 = add i8 %967, %932
  %969 = srem i8 %968, 2
  %970 = icmp eq i8 %969, 0
  %971 = xor i1 %965, true
  %972 = xor i1 %970, true
  %973 = or i1 %971, %972
  %974 = xor i1 %973, true
  %975 = add i64 %7, -2581137187944376098
  %976 = xor i64 -2581137187944376098, %7
  %977 = and i64 -2581137187944376098, %7
  %978 = mul i64 2, %977
  %979 = add i64 %976, %978
  %980 = and i64 %118, -2432010848947186886
  %981 = xor i64 %118, -1
  %982 = xor i64 -2432010848947186886, %981
  %983 = and i64 %982, -2432010848947186886
  %984 = xor i64 %979, %983
  %985 = xor i64 %984, %975
  %986 = xor i64 %985, %980
  %987 = xor i64 %986, 947717860242424527
  %988 = and i64 %59, 2850176767233464476
  %989 = xor i64 %59, -1
  %990 = xor i64 2850176767233464476, %989
  %991 = and i64 %990, 2850176767233464476
  %992 = add i64 %43, 1113308959549340887
  %993 = sub i64 0, %43
  %994 = add i64 -1113308959549340887, %993
  %995 = sub i64 0, %994
  %996 = xor i64 %991, %988
  %997 = xor i64 %996, %992
  %998 = xor i64 %997, %995
  %999 = xor i64 %998, 1610731766470722607
  %1000 = mul i64 %987, %999
  %1001 = trunc i64 %1000 to i1
  %1002 = and i1 %974, %1001
  %1003 = or i64 %59, -6951010612749768957
  %1004 = and i64 -6951010612749768957, %59
  %1005 = xor i64 -6951010612749768957, %59
  %1006 = or i64 %1004, %1005
  %1007 = add i64 %118, 5369637445973108505
  %1008 = add i64 -1776939036444768819, %118
  %1009 = sub i64 %1008, -7146576482417877324
  %1010 = xor i64 %1003, %1009
  %1011 = xor i64 %1010, %1006
  %1012 = xor i64 %1011, -5694463041144615125
  %1013 = xor i64 %1012, %1007
  %1014 = and i64 %132, 3812590325853461063
  %1015 = xor i64 %132, -1
  %1016 = xor i64 3812590325853461063, %1015
  %1017 = and i64 %1016, 3812590325853461063
  %1018 = and i64 %37, -3661154179199150912
  %1019 = or i64 3661154179199150911, %37
  %1020 = sub i64 %1019, 3661154179199150911
  %1021 = xor i64 %1020, %1018
  %1022 = xor i64 %1021, %1014
  %1023 = xor i64 %1022, -2261879840595770629
  %1024 = xor i64 %1023, %1017
  %1025 = mul i64 %1013, %1024
  %1026 = trunc i64 %1025 to i32
  %1027 = select i1 %1002, i32 388314415, i32 %1026
  %1028 = and i64 %120, -4963217437760024240
  %1029 = xor i64 %120, -1
  %1030 = or i64 4963217437760024239, %1029
  %1031 = xor i64 %1030, -1
  %1032 = and i64 %1031, -1
  %1033 = and i64 %61, -7417648021671379615
  %1034 = or i64 7417648021671379614, %61
  %1035 = sub i64 %1034, 7417648021671379614
  %1036 = and i64 %27, 3501082460628418168
  %1037 = xor i64 %27, -1
  %1038 = or i64 -3501082460628418169, %1037
  %1039 = xor i64 %1038, -1
  %1040 = and i64 %1039, -1
  %1041 = xor i64 1810308210551567613, %1033
  %1042 = xor i64 %1041, %1036
  %1043 = xor i64 %1042, %1035
  %1044 = xor i64 %1043, %1032
  %1045 = xor i64 %1044, %1028
  %1046 = xor i64 %1045, %1040
  %1047 = add i64 %11, -8706203384071960530
  %1048 = and i64 -8706203384071960530, %11
  %1049 = or i64 -8706203384071960530, %11
  %1050 = add i64 %1048, %1049
  %1051 = sext i32 %148 to i64
  %1052 = and i64 %1051, 5855374331410863447
  %1053 = xor i64 %1051, -1
  %1054 = xor i64 5855374331410863447, %1053
  %1055 = and i64 %1054, 5855374331410863447
  %1056 = add i64 %122, -4846545819591101339
  %1057 = add i64 -2114713994422296449, %122
  %1058 = add i64 %1057, -2731831825168804890
  %1059 = xor i64 %1056, %1047
  %1060 = xor i64 %1059, %1050
  %1061 = xor i64 %1060, -8180957128866975234
  %1062 = xor i64 %1061, %1058
  %1063 = xor i64 %1062, %1055
  %1064 = xor i64 %1063, %1052
  %1065 = mul i64 %1046, %1064
  %1066 = trunc i64 %1065 to i32
  %1067 = xor i32 %1027, %1066
  store i32 %1067, i32* %0, align 4
  %1068 = call i8** @bf4471601488556574720(i32* %0)
  %1069 = load i8*, i8** %1068, align 8
  indirectbr i8* %1069, [label %loopEnd, label %codeRepl]

1070:                                             ; preds = %1070, %loopStart
  %1071 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 14
  %1072 = load i32, i32* %1071, align 4
  %1073 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %1074 = load i32, i32* %1073, align 4
  %1075 = srem i32 %1072, %1074
  store i32 %1075, i32* %dispatcher, align 4
  %1076 = load i8*, i8** %30, align 8
  %1077 = load i8, i8* %1076, align 1
  %1078 = and i8 %1077, 1
  %1079 = icmp eq i8 %1078, 0
  %1080 = mul i8 %1077, %1077
  %1081 = sub i8 0, %1080
  %1082 = sub i8 0, %1077
  %1083 = add i8 %1081, %1082
  %1084 = sub i8 0, %1083
  %1085 = mul i8 %1084, 3
  %1086 = srem i8 %1085, 2
  %1087 = icmp eq i8 %1086, 0
  %1088 = or i1 %1079, %1087
  %1089 = select i1 %1088, i32 388314415, i32 388314409
  %1090 = xor i32 %1089, -1887190052
  %1091 = xor i32 %1090, -1887190054
  store i32 %1091, i32* %0, align 4
  %1092 = call i8** @bf4471601488556574720(i32* %0)
  %1093 = load i8*, i8** %1092, align 8
  indirectbr i8* %1093, [label %loopEnd, label %1070]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  %lt.cast = bitcast i1* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  store i64 5221456193252566398, i64* %113, align 8
  %1094 = alloca i8**, align 8
  %1095 = or i64 %21, 1029877264390403493
  %1096 = xor i64 %21, -1
  %1097 = and i64 1029877264390403493, %1096
  %1098 = add i64 %1097, %21
  %1099 = add i64 %51, 521534465273690579
  %1100 = add i64 7236615253028350545, %51
  %1101 = add i64 %1100, -6715080787754659966
  %1102 = xor i64 %1095, %1099
  %1103 = xor i64 %1102, %1098
  %1104 = xor i64 %1103, %1101
  %1105 = xor i64 %1104, 2719329264736061649
  %1106 = and i64 %124, 8979100555705656655
  %1107 = xor i64 %124, -1
  %1108 = or i64 -8979100555705656656, %1107
  %1109 = xor i64 %1108, -1
  %1110 = and i64 %1109, -1
  %1111 = or i64 %43, 5130584364020825591
  %1112 = xor i64 %43, -1
  %1113 = and i64 5130584364020825591, %1112
  %1114 = add i64 %1113, %43
  %1115 = xor i64 %1114, %1106
  %1116 = xor i64 %1115, %1111
  %1117 = xor i64 %1116, 0
  %1118 = xor i64 %1117, %1110
  %1119 = mul i64 %1105, %1118
  %1120 = trunc i64 %1119 to i32
  %1121 = add i64 %27, -1111637731910128190
  %1122 = add i64 2327668480962480401, %27
  %1123 = add i64 %1122, -3439306212872608591
  %1124 = sext i32 %148 to i64
  %1125 = add i64 %1124, 48494812512373012
  %1126 = sub i64 0, %1124
  %1127 = add i64 -48494812512373012, %1126
  %1128 = sub i64 0, %1127
  %1129 = add i64 %37, -6961178883238146854
  %1130 = add i64 -167940702605807905, %37
  %1131 = add i64 %1130, -6793238180632338949
  %1132 = xor i64 %1125, %1131
  %1133 = xor i64 %1132, %1128
  %1134 = xor i64 %1133, -2503834447450928737
  %1135 = xor i64 %1134, %1123
  %1136 = xor i64 %1135, %1129
  %1137 = xor i64 %1136, %1121
  %1138 = and i64 %27, 8940939631515497545
  %1139 = or i64 -8940939631515497546, %27
  %1140 = sub i64 %1139, -8940939631515497546
  %1141 = add i64 %45, -7344584275677076035
  %1142 = add i64 6343741573785968911, %45
  %1143 = add i64 %1142, 4758418224246506670
  %1144 = xor i64 %1143, %1140
  %1145 = xor i64 %1144, 0
  %1146 = xor i64 %1145, %1138
  %1147 = xor i64 %1146, %1141
  %1148 = mul i64 %1137, %1147
  %1149 = trunc i64 %1148 to i32
  %1150 = add i64 %49, 478918977305279624
  %1151 = add i64 2922498020618014274, %49
  %1152 = sub i64 %1151, 2443579043312734650
  %1153 = or i64 %37, -958940913097129460
  %1154 = xor i64 %37, -1
  %1155 = and i64 -958940913097129460, %1154
  %1156 = add i64 %1155, %37
  %1157 = and i64 %11, 5137041262544921608
  %1158 = xor i64 %11, -1
  %1159 = or i64 -5137041262544921609, %1158
  %1160 = xor i64 %1159, -1
  %1161 = and i64 %1160, -1
  %1162 = xor i64 %1150, %1161
  %1163 = xor i64 %1162, %1152
  %1164 = xor i64 %1163, %1157
  %1165 = xor i64 %1164, -7652416497464201323
  %1166 = xor i64 %1165, %1153
  %1167 = xor i64 %1166, %1156
  %1168 = add i64 %25, 5124134394164339313
  %1169 = add i64 5023395302555449663, %25
  %1170 = add i64 %1169, 100739091608889650
  %1171 = or i64 %51, 3883458887573527664
  %1172 = xor i64 %51, -1
  %1173 = and i64 %1172, 4390799547366825394
  %1174 = and i64 %51, -4390799547366825395
  %1175 = or i64 %1173, %1174
  %1176 = xor i64 651774707348636098, %1175
  %1177 = xor i64 %51, -1
  %1178 = or i64 -3883458887573527665, %1177
  %1179 = xor i64 %1178, -1
  %1180 = and i64 %1179, -1
  %1181 = or i64 %1176, %1180
  %1182 = xor i64 %1170, 0
  %1183 = xor i64 %1182, %1168
  %1184 = xor i64 %1183, %1171
  %1185 = xor i64 %1184, %1181
  %1186 = mul i64 %1167, %1185
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %1094, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 %1120, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 %1149, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 %1186, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %1187 = load i8**, i8*** %1094, align 8
  %1188 = load i8*, i8** %1187, align 8
  %1189 = bitcast i8* %1188 to i1 (i32, i32, i1*)*
  %.reload42 = load i32, i32* %.reg2mem41, align 4
  %.reload49 = load i32, i32* %.reg2mem47, align 4
  %targetBlock2 = call i1 %1189(i32 %.reload42, i32 %.reload49, i1* %.loc)
  %.reload = load i1, i1* %.loc, align 1
  store i1 %.reload, i1* %.reload.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  %1190 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 28
  %1191 = load i32, i32* %1190, align 4
  %1192 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  %1193 = load i32, i32* %1192, align 4
  %1194 = sub i32 %1191, %1193
  %1195 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 8
  %1196 = load i32, i32* %1195, align 4
  %1197 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  %1198 = load i32, i32* %1197, align 4
  %1199 = add i32 %1196, %1198
  %1200 = select i1 %targetBlock2, i32 %1194, i32 %1199
  store i32 %1200, i32* %dispatcher, align 4
  %1201 = load i8*, i8** %38, align 8
  %1202 = load i8, i8* %1201, align 1
  %1203 = mul i8 %1202, 2
  %1204 = mul i8 %1202, 2
  %1205 = add i8 2, %1204
  %1206 = mul i8 %1203, %1205
  %1207 = or i64 %55, 3619234039894412115
  %1208 = xor i64 %55, -1
  %1209 = and i64 3619234039894412115, %1208
  %1210 = add i64 %1209, %55
  %1211 = add i64 %9, -6156872850054401716
  %1212 = sub i64 0, %9
  %1213 = add i64 6156872850054401716, %1212
  %1214 = sub i64 0, %1213
  %1215 = xor i64 %1210, %1211
  %1216 = xor i64 %1215, %1214
  %1217 = xor i64 %1216, -3438775373017671347
  %1218 = xor i64 %1217, %1207
  %1219 = add i64 %9, 6783933597944552264
  %1220 = add i64 -1426814685703496830, %9
  %1221 = sub i64 %1220, -8210748283648049094
  %1222 = add i64 %51, -456386523949216091
  %1223 = and i64 -456386523949216091, %51
  %1224 = or i64 -456386523949216091, %51
  %1225 = add i64 %1223, %1224
  %1226 = xor i64 3034452357349187092, %1222
  %1227 = xor i64 %1226, %1225
  %1228 = xor i64 %1227, %1219
  %1229 = xor i64 %1228, %1221
  %1230 = mul i64 %1218, %1229
  %1231 = trunc i64 %1230 to i8
  %1232 = srem i8 %1206, %1231
  %1233 = or i64 %49, -7606527819048512254
  %1234 = and i64 -7606527819048512254, %49
  %1235 = xor i64 -7606527819048512254, %49
  %1236 = or i64 %1234, %1235
  %1237 = or i64 %1, 8068755402324089035
  %1238 = xor i64 %1, -1
  %1239 = and i64 8068755402324089035, %1238
  %1240 = add i64 %1239, %1
  %1241 = or i64 %67, -2407624475834768533
  %1242 = xor i64 %67, -1
  %1243 = and i64 -2407624475834768533, %1242
  %1244 = add i64 %1243, %67
  %1245 = xor i64 %1236, %1237
  %1246 = xor i64 %1245, 539050424922697957
  %1247 = xor i64 %1246, %1241
  %1248 = xor i64 %1247, %1244
  %1249 = xor i64 %1248, %1233
  %1250 = xor i64 %1249, %1240
  %1251 = or i64 %47, -1032218528765016636
  %1252 = xor i64 %47, -1
  %1253 = and i64 %1252, -1541778715786309688
  %1254 = and i64 %47, 1541778715786309687
  %1255 = or i64 %1253, %1254
  %1256 = xor i64 1960845787062471180, %1255
  %1257 = xor i64 %47, -1
  %1258 = or i64 1032218528765016635, %1257
  %1259 = xor i64 %1258, -1
  %1260 = and i64 %1259, -1
  %1261 = or i64 %1256, %1260
  %1262 = and i64 %45, 6814751241619092230
  %1263 = xor i64 %45, -1
  %1264 = or i64 -6814751241619092231, %1263
  %1265 = xor i64 %1264, -1
  %1266 = and i64 %1265, -1
  %1267 = xor i64 0, %1261
  %1268 = xor i64 %1267, %1262
  %1269 = xor i64 %1268, %1266
  %1270 = xor i64 %1269, %1251
  %1271 = mul i64 %1250, %1270
  %1272 = trunc i64 %1271 to i8
  %1273 = icmp eq i8 %1232, %1272
  %1274 = mul i8 %1202, %1202
  %1275 = add i8 %1274, %1202
  %1276 = srem i8 %1275, 2
  %1277 = icmp eq i8 %1276, 0
  %1278 = and i1 %1273, %1277
  %1279 = select i1 %1278, i32 388314430, i32 388314409
  %1280 = or i64 %49, -3569499450204803814
  %1281 = and i64 -3569499450204803814, %49
  %1282 = xor i64 -3569499450204803814, %49
  %1283 = or i64 %1281, %1282
  %1284 = or i64 %39, 9168540681598113588
  %1285 = xor i64 %39, -1
  %1286 = and i64 %1285, -227315093293465460
  %1287 = and i64 %39, 227315093293465459
  %1288 = or i64 %1286, %1287
  %1289 = xor i64 -8942643573653301320, %1288
  %1290 = xor i64 %39, -1
  %1291 = or i64 -9168540681598113589, %1290
  %1292 = xor i64 %1291, -1
  %1293 = and i64 %1292, -1
  %1294 = or i64 %1289, %1293
  %1295 = xor i64 %1284, %1283
  %1296 = xor i64 %1295, %1280
  %1297 = xor i64 %1296, 1866840499082786037
  %1298 = xor i64 %1297, %1294
  %1299 = and i64 %132, -5241861979456292351
  %1300 = or i64 5241861979456292350, %132
  %1301 = sub i64 %1300, 5241861979456292350
  %1302 = or i64 %47, 3171207926888459678
  %1303 = xor i64 %47, -1
  %1304 = and i64 3171207926888459678, %1303
  %1305 = add i64 %1304, %47
  %1306 = add i64 %114, 2180353346508116593
  %1307 = add i64 -7434905622074541695, %114
  %1308 = sub i64 %1307, 8831485105126893328
  %1309 = xor i64 -6613521052747274077, %1301
  %1310 = xor i64 %1309, %1299
  %1311 = xor i64 %1310, %1306
  %1312 = xor i64 %1311, %1302
  %1313 = xor i64 %1312, %1308
  %1314 = xor i64 %1313, %1305
  %1315 = mul i64 %1298, %1314
  %1316 = trunc i64 %1315 to i32
  %1317 = xor i32 %1279, %1316
  %1318 = or i64 %37, -4357473487346814024
  %1319 = xor i64 %37, -1
  %1320 = and i64 %1319, -3400179402314991466
  %1321 = and i64 %37, 3400179402314991465
  %1322 = or i64 %1320, %1321
  %1323 = xor i64 1393589387235199790, %1322
  %1324 = xor i64 %37, -1
  %1325 = or i64 4357473487346814023, %1324
  %1326 = xor i64 %1325, -1
  %1327 = and i64 %1326, -1
  %1328 = or i64 %1323, %1327
  %1329 = add i64 %49, -9094660933430491416
  %1330 = add i64 -676731753038172031, %49
  %1331 = sub i64 %1330, 8417929180392319385
  %1332 = xor i64 %1329, %1331
  %1333 = xor i64 %1332, %1328
  %1334 = xor i64 %1333, %1318
  %1335 = xor i64 %1334, 4176907060290640333
  %1336 = or i64 %67, 4189234976661294405
  %1337 = xor i64 %67, -1
  %1338 = and i64 4189234976661294405, %1337
  %1339 = add i64 %1338, %67
  %1340 = and i64 %43, 4036006382736926187
  %1341 = xor i64 %43, -1
  %1342 = or i64 -4036006382736926188, %1341
  %1343 = xor i64 %1342, -1
  %1344 = and i64 %1343, -1
  %1345 = add i64 %71, 9221023163034959881
  %1346 = add i64 4491659964938902803, %71
  %1347 = add i64 %1346, 4729363198096057078
  %1348 = xor i64 %1345, %1336
  %1349 = xor i64 %1348, %1339
  %1350 = xor i64 %1349, %1340
  %1351 = xor i64 %1350, %1347
  %1352 = xor i64 %1351, %1344
  %1353 = xor i64 %1352, 5963037777015262579
  %1354 = mul i64 %1335, %1353
  %1355 = trunc i64 %1354 to i32
  %1356 = and i32 %1317, %1355
  %1357 = and i32 %1279, -24
  %1358 = or i32 %1356, %1357
  store i32 %1358, i32* %0, align 4
  %1359 = call i8** @bf4471601488556574720(i32* %0)
  %1360 = load i8*, i8** %1359, align 8
  indirectbr i8* %1360, [label %loopEnd, label %codeRepl1]

1361:                                             ; preds = %1361, %loopStart
  %1362 = add i64 %7, 300667730634896342
  %1363 = sub i64 0, %7
  %1364 = sub i64 300667730634896342, %1363
  %1365 = add i64 %114, 3361507887372464826
  %1366 = sub i64 0, %114
  %1367 = add i64 -3361507887372464826, %1366
  %1368 = sub i64 0, %1367
  %1369 = add i64 %59, 3864183437249761421
  %1370 = sub i64 0, %59
  %1371 = sub i64 3864183437249761421, %1370
  %1372 = xor i64 %1365, %1371
  %1373 = xor i64 %1372, %1369
  %1374 = xor i64 %1373, %1362
  %1375 = xor i64 %1374, %1364
  %1376 = xor i64 %1375, -1799822613137346785
  %1377 = xor i64 %1376, %1368
  %1378 = and i64 %63, -2416524131766842866
  %1379 = xor i64 %63, -1
  %1380 = or i64 2416524131766842865, %1379
  %1381 = xor i64 %1380, -1
  %1382 = and i64 %1381, -1
  %1383 = or i64 %19, -8954152591457985466
  %1384 = xor i64 %19, -1
  %1385 = and i64 -8954152591457985466, %1384
  %1386 = add i64 %1385, %19
  %1387 = add i64 %21, 3136026540779791425
  %1388 = add i64 8091343910008485118, %21
  %1389 = sub i64 %1388, 4955317369228693693
  %1390 = xor i64 %1387, %1383
  %1391 = xor i64 %1390, %1389
  %1392 = xor i64 %1391, %1386
  %1393 = xor i64 %1392, -6218892215606468208
  %1394 = xor i64 %1393, %1378
  %1395 = xor i64 %1394, %1382
  %1396 = mul i64 %1377, %1395
  %1397 = sdiv i64 %1396, 17
  %1398 = sub i64 99, 101
  %1399 = and i64 %53, 8058529802502274651
  %1400 = xor i64 %53, -1
  %1401 = or i64 -8058529802502274652, %1400
  %1402 = xor i64 %1401, -1
  %1403 = and i64 %1402, -1
  %1404 = or i64 %19, -261215709623208220
  %1405 = xor i64 %19, -1
  %1406 = and i64 -261215709623208220, %1405
  %1407 = add i64 %1406, %19
  %1408 = xor i64 %1399, %1407
  %1409 = xor i64 %1408, %1403
  %1410 = xor i64 %1409, %1404
  %1411 = xor i64 %1410, 2943167630023655993
  %1412 = or i64 %15, 6703518885186964934
  %1413 = xor i64 %15, -1
  %1414 = and i64 6703518885186964934, %1413
  %1415 = add i64 %1414, %15
  %1416 = or i64 %124, 611752998092075964
  %1417 = xor i64 %124, -1
  %1418 = and i64 %1417, 1992742046518056614
  %1419 = and i64 %124, -1992742046518056615
  %1420 = or i64 %1418, %1419
  %1421 = xor i64 1430673848985937178, %1420
  %1422 = xor i64 %124, -1
  %1423 = or i64 -611752998092075965, %1422
  %1424 = xor i64 %1423, -1
  %1425 = and i64 %1424, -1
  %1426 = or i64 %1421, %1425
  %1427 = xor i64 -6866959357770605506, %1416
  %1428 = xor i64 %1427, %1415
  %1429 = xor i64 %1428, %1412
  %1430 = xor i64 %1429, %1426
  %1431 = mul i64 %1411, %1430
  %1432 = sub i64 %1431, 6923139772767569353
  %1433 = and i64 %3, 2348523008482095767
  %1434 = or i64 -2348523008482095768, %3
  %1435 = sub i64 %1434, -2348523008482095768
  %1436 = and i64 %45, -6601659532097954326
  %1437 = or i64 6601659532097954325, %45
  %1438 = sub i64 %1437, 6601659532097954325
  %1439 = or i64 %5, 1615386161597732851
  %1440 = xor i64 %5, -1
  %1441 = and i64 %1440, 7723562546026845862
  %1442 = and i64 %5, -7723562546026845863
  %1443 = or i64 %1441, %1442
  %1444 = xor i64 9026508951590289749, %1443
  %1445 = xor i64 %5, -1
  %1446 = or i64 -1615386161597732852, %1445
  %1447 = xor i64 %1446, -1
  %1448 = and i64 %1447, -1
  %1449 = or i64 %1444, %1448
  %1450 = xor i64 %1435, %1436
  %1451 = xor i64 %1450, %1439
  %1452 = xor i64 %1451, %1433
  %1453 = xor i64 %1452, 1433270396422300139
  %1454 = xor i64 %1453, %1449
  %1455 = xor i64 %1454, %1438
  %1456 = or i64 %134, 5603641020929506687
  %1457 = and i64 5603641020929506687, %134
  %1458 = xor i64 5603641020929506687, %134
  %1459 = or i64 %1457, %1458
  %1460 = add i64 %55, -1556892953260667660
  %1461 = add i64 2794397577634998293, %55
  %1462 = sub i64 %1461, 4351290530895665953
  %1463 = and i64 %41, 9169699261985008585
  %1464 = or i64 -9169699261985008586, %41
  %1465 = sub i64 %1464, -9169699261985008586
  %1466 = xor i64 %1456, %1465
  %1467 = xor i64 %1466, %1463
  %1468 = xor i64 %1467, %1462
  %1469 = xor i64 %1468, %1459
  %1470 = xor i64 %1469, 15884001717101028
  %1471 = xor i64 %1470, %1460
  %1472 = mul i64 %1455, %1471
  %1473 = sub i64 %1472, 92
  %1474 = mul i64 126, 33
  %1475 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 13
  %1476 = load i32, i32* %1475, align 4
  %1477 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 3
  %1478 = load i32, i32* %1477, align 4
  %1479 = sub i32 0, %1478
  %1480 = add i32 %1476, %1479
  %1481 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  %1482 = load i32, i32* %1481, align 4
  %1483 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  %1484 = load i32, i32* %1483, align 4
  %1485 = and i32 %1482, %1484
  %1486 = or i32 %1482, %1484
  %1487 = add i32 %1485, %1486
  %.reload.reload = load i1, i1* %.reload.reg2mem, align 1
  %1488 = select i1 %.reload.reload, i32 %1480, i32 %1487
  store i32 %1488, i32* %dispatcher, align 4
  %1489 = load i8*, i8** %62, align 8
  %1490 = load i8, i8* %1489, align 1
  %1491 = add i64 %120, 3366805415959934313
  %1492 = sub i64 0, %120
  %1493 = sub i64 3366805415959934313, %1492
  %1494 = or i64 %5, 4002806725775245434
  %1495 = xor i64 %5, -1
  %1496 = and i64 4002806725775245434, %1495
  %1497 = add i64 %1496, %5
  %1498 = xor i64 %1497, %1493
  %1499 = xor i64 %1498, -4829846926454321263
  %1500 = xor i64 %1499, %1491
  %1501 = xor i64 %1500, %1494
  %1502 = and i64 %63, -8742868212032053402
  %1503 = xor i64 %63, -1
  %1504 = or i64 8742868212032053401, %1503
  %1505 = xor i64 %1504, -1
  %1506 = and i64 %1505, -1
  %1507 = or i64 %134, -1432134886771015660
  %1508 = xor i64 %134, -1
  %1509 = and i64 -1432134886771015660, %1508
  %1510 = add i64 %1509, %134
  %1511 = and i64 %120, 5663352057990600201
  %1512 = or i64 -5663352057990600202, %120
  %1513 = sub i64 %1512, -5663352057990600202
  %1514 = xor i64 %1513, %1507
  %1515 = xor i64 %1514, %1506
  %1516 = xor i64 %1515, %1502
  %1517 = xor i64 %1516, %1510
  %1518 = xor i64 %1517, 1858303695568703857
  %1519 = xor i64 %1518, %1511
  %1520 = mul i64 %1501, %1519
  %1521 = trunc i64 %1520 to i8
  %1522 = and i8 %1490, %1521
  %1523 = icmp eq i8 %1522, 1
  %1524 = mul i8 %1490, %1490
  %1525 = sub i8 0, %1490
  %1526 = sub i8 %1524, %1525
  %1527 = srem i8 %1526, 2
  %1528 = icmp eq i8 %1527, 0
  %1529 = or i1 %1523, %1528
  %1530 = add i64 %73, -2539338802915005066
  %1531 = sub i64 0, %73
  %1532 = add i64 2539338802915005066, %1531
  %1533 = sub i64 0, %1532
  %1534 = and i64 %41, 4711357173017745591
  %1535 = xor i64 %41, -1
  %1536 = or i64 -4711357173017745592, %1535
  %1537 = xor i64 %1536, -1
  %1538 = and i64 %1537, -1
  %1539 = add i64 %19, 7460265197484378026
  %1540 = add i64 -6840143593772599967, %19
  %1541 = sub i64 %1540, 4146335282452573623
  %1542 = xor i64 %1539, %1541
  %1543 = xor i64 %1542, %1530
  %1544 = xor i64 %1543, %1534
  %1545 = xor i64 %1544, %1533
  %1546 = xor i64 %1545, %1538
  %1547 = xor i64 %1546, 2342395410746302315
  %1548 = and i64 %41, 6266614770178137892
  %1549 = or i64 -6266614770178137893, %41
  %1550 = sub i64 %1549, -6266614770178137893
  %1551 = add i64 %43, 4605706065834695713
  %1552 = sub i64 0, %43
  %1553 = sub i64 4605706065834695713, %1552
  %1554 = xor i64 %1551, %1548
  %1555 = xor i64 %1554, %1553
  %1556 = xor i64 %1555, 4026280737190151867
  %1557 = xor i64 %1556, %1550
  %1558 = mul i64 %1547, %1557
  %1559 = trunc i64 %1558 to i32
  %1560 = select i1 %1529, i32 388314414, i32 %1559
  %1561 = xor i32 %1560, 7
  store i32 %1561, i32* %0, align 4
  %1562 = call i8** @bf4471601488556574720(i32* %0)
  %1563 = load i8*, i8** %1562, align 8
  indirectbr i8* %1563, [label %loopEnd, label %1361]

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  %lt.cast14 = bitcast i64* %.loc4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast14)
  %lt.cast15 = bitcast i64* %.loc5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast15)
  %lt.cast16 = bitcast i64* %.loc6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast16)
  %lt.cast17 = bitcast i64* %.loc7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast17)
  %lt.cast18 = bitcast i64* %.loc8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast18)
  store i64 5221456193252566391, i64* %113, align 8
  %1564 = alloca i8**, align 8
  %1565 = or i64 %122, 3091146679179788433
  %1566 = xor i64 %122, -1
  %1567 = and i64 3091146679179788433, %1566
  %1568 = add i64 %1567, %122
  %1569 = and i64 %124, 3892345155708695223
  %1570 = xor i64 %124, -1
  %1571 = xor i64 3892345155708695223, %1570
  %1572 = and i64 %1571, 3892345155708695223
  %1573 = or i64 %134, -2967437786568961653
  %1574 = and i64 -2967437786568961653, %134
  %1575 = xor i64 -2967437786568961653, %134
  %1576 = or i64 %1574, %1575
  %1577 = xor i64 %1572, 5826580998167971359
  %1578 = xor i64 %1577, %1568
  %1579 = xor i64 %1578, %1576
  %1580 = xor i64 %1579, %1569
  %1581 = xor i64 %1580, %1573
  %1582 = xor i64 %1581, %1565
  %1583 = add i64 %35, 7373060975341722278
  %1584 = add i64 4008633888383428055, %35
  %1585 = add i64 %1584, 3364427086958294223
  %1586 = and i64 %45, -4402015355798599858
  %1587 = xor i64 %45, -1
  %1588 = xor i64 -4402015355798599858, %1587
  %1589 = and i64 %1588, -4402015355798599858
  %1590 = or i64 %49, -4559455879129363522
  %1591 = xor i64 %49, -1
  %1592 = and i64 %1591, -7874173355667404383
  %1593 = and i64 %49, 7874173355667404382
  %1594 = or i64 %1592, %1593
  %1595 = xor i64 5908966827000906271, %1594
  %1596 = xor i64 %49, -1
  %1597 = or i64 4559455879129363521, %1596
  %1598 = xor i64 %1597, -1
  %1599 = and i64 %1598, -1
  %1600 = or i64 %1595, %1599
  %1601 = xor i64 %1589, %1586
  %1602 = xor i64 %1601, %1585
  %1603 = xor i64 %1602, %1590
  %1604 = xor i64 %1603, %1583
  %1605 = xor i64 %1604, %1600
  %1606 = xor i64 %1605, 0
  %1607 = mul i64 %1582, %1606
  %1608 = trunc i64 %1607 to i1
  %1609 = and i64 %73, 182091709267532313
  %1610 = xor i64 %73, -1
  %1611 = or i64 -182091709267532314, %1610
  %1612 = xor i64 %1611, -1
  %1613 = and i64 %1612, -1
  %1614 = and i64 %45, -2219833182736315893
  %1615 = xor i64 %45, -1
  %1616 = or i64 2219833182736315892, %1615
  %1617 = xor i64 %1616, -1
  %1618 = and i64 %1617, -1
  %1619 = xor i64 %1609, %1613
  %1620 = xor i64 %1619, %1618
  %1621 = xor i64 %1620, %1614
  %1622 = xor i64 %1621, 3958809532260533059
  %1623 = or i64 %37, -5698916501194392807
  %1624 = xor i64 %37, -1
  %1625 = and i64 %1624, 1735021147773111929
  %1626 = and i64 %37, -1735021147773111930
  %1627 = or i64 %1625, %1626
  %1628 = xor i64 -6269739483772701344, %1627
  %1629 = xor i64 %37, -1
  %1630 = or i64 5698916501194392806, %1629
  %1631 = xor i64 %1630, -1
  %1632 = and i64 %1631, -1
  %1633 = or i64 %1628, %1632
  %1634 = and i64 %25, -8874596416233463315
  %1635 = or i64 8874596416233463314, %25
  %1636 = sub i64 %1635, 8874596416233463314
  %1637 = xor i64 %1634, %1623
  %1638 = xor i64 %1637, 0
  %1639 = xor i64 %1638, %1636
  %1640 = xor i64 %1639, %1633
  %1641 = mul i64 %1622, %1640
  %1642 = trunc i64 %1641 to i32
  %1643 = add i64 %11, -2833057922835098875
  %1644 = sub i64 0, %11
  %1645 = add i64 2833057922835098875, %1644
  %1646 = sub i64 0, %1645
  %1647 = and i64 %65, -4943701642169530941
  %1648 = or i64 4943701642169530940, %65
  %1649 = sub i64 %1648, 4943701642169530940
  %1650 = add i64 %128, 2797081054351688134
  %1651 = sub i64 0, %128
  %1652 = add i64 -2797081054351688134, %1651
  %1653 = sub i64 0, %1652
  %1654 = xor i64 %1653, -571743212848907329
  %1655 = xor i64 %1654, %1649
  %1656 = xor i64 %1655, %1643
  %1657 = xor i64 %1656, %1650
  %1658 = xor i64 %1657, %1647
  %1659 = xor i64 %1658, %1646
  %1660 = and i64 %122, -8181050060345028056
  %1661 = xor i64 %122, -1
  %1662 = xor i64 -8181050060345028056, %1661
  %1663 = and i64 %1662, -8181050060345028056
  %1664 = and i64 %130, 2014303309751693491
  %1665 = or i64 -2014303309751693492, %130
  %1666 = sub i64 %1665, -2014303309751693492
  %1667 = or i64 %7, -6752643419509716292
  %1668 = and i64 -6752643419509716292, %7
  %1669 = xor i64 -6752643419509716292, %7
  %1670 = or i64 %1668, %1669
  %1671 = xor i64 %1666, %1667
  %1672 = xor i64 %1671, 0
  %1673 = xor i64 %1672, %1670
  %1674 = xor i64 %1673, %1664
  %1675 = xor i64 %1674, %1660
  %1676 = xor i64 %1675, %1663
  %1677 = mul i64 %1659, %1676
  %1678 = and i64 %19, -7317498520787187154
  %1679 = xor i64 %19, -1
  %1680 = xor i64 -7317498520787187154, %1679
  %1681 = and i64 %1680, -7317498520787187154
  %1682 = and i64 %61, -4278878503128711328
  %1683 = or i64 4278878503128711327, %61
  %1684 = sub i64 %1683, 4278878503128711327
  %1685 = or i64 %13, 877023691407612053
  %1686 = and i64 877023691407612053, %13
  %1687 = xor i64 877023691407612053, %13
  %1688 = or i64 %1686, %1687
  %1689 = xor i64 %1685, %1678
  %1690 = xor i64 %1689, %1681
  %1691 = xor i64 %1690, %1684
  %1692 = xor i64 %1691, -265123209480685441
  %1693 = xor i64 %1692, %1688
  %1694 = xor i64 %1693, %1682
  %1695 = or i64 %126, -1396967333872696877
  %1696 = xor i64 %126, -1
  %1697 = and i64 -1396967333872696877, %1696
  %1698 = add i64 %1697, %126
  %1699 = or i64 %1, 6923228536232892222
  %1700 = and i64 6923228536232892222, %1
  %1701 = xor i64 6923228536232892222, %1
  %1702 = or i64 %1700, %1701
  %1703 = or i64 %45, -6690750880233583245
  %1704 = xor i64 %45, -1
  %1705 = and i64 %1704, -5408778787435946601
  %1706 = and i64 %45, 5408778787435946600
  %1707 = or i64 %1705, %1706
  %1708 = xor i64 1717426028105552100, %1707
  %1709 = xor i64 %45, -1
  %1710 = or i64 6690750880233583244, %1709
  %1711 = xor i64 %1710, -1
  %1712 = and i64 %1711, -1
  %1713 = or i64 %1708, %1712
  %1714 = xor i64 %1703, %1713
  %1715 = xor i64 %1714, 0
  %1716 = xor i64 %1715, %1699
  %1717 = xor i64 %1716, %1695
  %1718 = xor i64 %1717, %1702
  %1719 = xor i64 %1718, %1698
  %1720 = mul i64 %1694, %1719
  %1721 = trunc i64 %1720 to i32
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %1608, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 %1642, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %1564, i64 %1677, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 %1721, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %1722 = load i8**, i8*** %1564, align 8
  %1723 = load i8*, i8** %1722, align 8
  %1724 = bitcast i8* %1723 to void (i64*, i64*, i64*, i64*, i64*)*
  call void %1724(i64* %.loc4, i64* %.loc5, i64* %.loc6, i64* %.loc7, i64* %.loc8)
  %.reload9 = load i64, i64* %.loc4, align 8
  %.reload10 = load i64, i64* %.loc5, align 8
  %.reload11 = load i64, i64* %.loc6, align 8
  %.reload12 = load i64, i64* %.loc7, align 8
  %.reload13 = load i64, i64* %.loc8, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast14)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast15)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast16)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast17)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast18)
  %1725 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 9
  %1726 = load i32, i32* %1725, align 4
  %1727 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 7
  %1728 = load i32, i32* %1727, align 4
  %1729 = and i64 %11, -3403477579175191432
  %1730 = xor i64 %11, -1
  %1731 = xor i64 -3403477579175191432, %1730
  %1732 = and i64 %1731, -3403477579175191432
  %1733 = and i64 %116, 8636736003824591413
  %1734 = xor i64 %116, -1
  %1735 = or i64 -8636736003824591414, %1734
  %1736 = xor i64 %1735, -1
  %1737 = and i64 %1736, -1
  %1738 = xor i64 5100178319960223241, %1732
  %1739 = xor i64 %1738, %1729
  %1740 = xor i64 %1739, %1737
  %1741 = xor i64 %1740, %1733
  %1742 = or i64 %15, 4294853503225503249
  %1743 = xor i64 %15, -1
  %1744 = and i64 %1743, -533266292744252449
  %1745 = and i64 %15, 533266292744252448
  %1746 = or i64 %1744, %1745
  %1747 = xor i64 -4394642833872319026, %1746
  %1748 = xor i64 %15, -1
  %1749 = or i64 -4294853503225503250, %1748
  %1750 = xor i64 %1749, -1
  %1751 = and i64 %1750, -1
  %1752 = or i64 %1747, %1751
  %1753 = add i64 %19, 5569684620053970526
  %1754 = add i64 1169728258938224635, %19
  %1755 = sub i64 %1754, -4399956361115745891
  %1756 = xor i64 %1752, %1755
  %1757 = xor i64 %1756, %1753
  %1758 = xor i64 %1757, 0
  %1759 = xor i64 %1758, %1742
  %1760 = mul i64 %1741, %1759
  %1761 = trunc i64 %1760 to i32
  %1762 = sub i32 %1761, %1728
  %1763 = sub i32 %1726, %1762
  store i32 %1763, i32* %dispatcher, align 4
  %1764 = load i8*, i8** %52, align 8
  %1765 = load i8, i8* %1764, align 1
  %1766 = or i64 %71, -8378672092152069750
  %1767 = xor i64 %71, -1
  %1768 = and i64 -8378672092152069750, %1767
  %1769 = add i64 %1768, %71
  %1770 = or i64 %37, -4850163770790272466
  %1771 = and i64 -4850163770790272466, %37
  %1772 = xor i64 -4850163770790272466, %37
  %1773 = or i64 %1771, %1772
  %1774 = xor i64 %1769, %1770
  %1775 = xor i64 %1774, %1766
  %1776 = xor i64 %1775, -8429263923876288119
  %1777 = xor i64 %1776, %1773
  %1778 = add i64 %47, -6009686966488018914
  %1779 = xor i64 -6009686966488018914, %47
  %1780 = and i64 -6009686966488018914, %47
  %1781 = mul i64 2, %1780
  %1782 = add i64 %1779, %1781
  %1783 = sext i32 %dispatcher1 to i64
  %1784 = and i64 %1783, -6947592702234674869
  %1785 = or i64 6947592702234674868, %1783
  %1786 = sub i64 %1785, 6947592702234674868
  %1787 = add i64 %73, 9006624192851594850
  %1788 = add i64 -4574763918641067729, %73
  %1789 = sub i64 %1788, 4865355962216889037
  %1790 = xor i64 %1786, %1787
  %1791 = xor i64 %1790, %1782
  %1792 = xor i64 %1791, -6930892702063969934
  %1793 = xor i64 %1792, %1778
  %1794 = xor i64 %1793, %1784
  %1795 = xor i64 %1794, %1789
  %1796 = mul i64 %1777, %1795
  %1797 = trunc i64 %1796 to i8
  %1798 = mul i8 %1765, %1797
  %1799 = mul i8 %1765, 2
  %1800 = add i8 2, %1799
  %1801 = mul i8 %1798, %1800
  %1802 = srem i8 %1801, 4
  %1803 = icmp eq i8 %1802, 0
  %1804 = mul i8 %1765, %1765
  %1805 = mul i8 %1804, %1765
  %1806 = add i8 %1805, %1765
  %1807 = srem i8 %1806, 2
  %1808 = icmp eq i8 %1807, 0
  %1809 = and i1 %1803, %1808
  %1810 = select i1 %1809, i32 388314416, i32 388314409
  %1811 = xor i32 %1810, 25
  store i32 %1811, i32* %0, align 4
  %1812 = call i8** @bf4471601488556574720(i32* %0)
  %1813 = load i8*, i8** %1812, align 8
  indirectbr i8* %1813, [label %loopEnd, label %codeRepl3]

1814:                                             ; preds = %1814, %loopStart
  %1815 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 11
  %1816 = load i32, i32* %1815, align 4
  %1817 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %1818 = load i32, i32* %1817, align 4
  %1819 = sub i32 0, %1818
  %1820 = add i32 %1816, %1819
  store i32 %1820, i32* %dispatcher, align 4
  %1821 = load i8*, i8** %40, align 8
  %1822 = load i8, i8* %1821, align 1
  %1823 = xor i8 %1822, -1
  %1824 = or i8 %1823, 1
  %1825 = xor i8 %1822, -1
  %1826 = sub i8 %1824, %1825
  %1827 = icmp eq i8 %1826, 0
  %1828 = mul i8 %1822, %1822
  %1829 = add i8 %1828, %1822
  %1830 = mul i8 %1829, 3
  %1831 = srem i8 %1830, 2
  %1832 = icmp eq i8 %1831, 0
  %1833 = xor i1 %1827, true
  %1834 = and i1 %1833, true
  %1835 = and i1 %1827, false
  %1836 = or i1 %1834, %1835
  %1837 = xor i1 %1832, true
  %1838 = and i1 %1837, true
  %1839 = and i1 %1832, false
  %1840 = or i1 %1838, %1839
  %1841 = xor i1 %1836, %1840
  %1842 = xor i1 %1827, true
  %1843 = xor i1 %1832, true
  %1844 = or i1 %1842, %1843
  %1845 = xor i1 %1844, true
  %1846 = and i1 %1845, true
  %1847 = or i1 %1841, %1846
  %1848 = select i1 %1847, i32 388314409, i32 388314409
  %1849 = xor i32 %1848, 61287664
  %1850 = xor i32 %1849, 61287664
  store i32 %1850, i32* %0, align 4
  %1851 = call i8** @bf4471601488556574720(i32* %0)
  %1852 = load i8*, i8** %1851, align 8
  indirectbr i8* %1852, [label %loopEnd, label %1814]

1853:                                             ; preds = %1853, %loopStart
  %1854 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 34
  %1855 = load i32, i32* %1854, align 4
  %1856 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %1857 = load i32, i32* %1856, align 4
  %1858 = srem i32 %1855, %1857
  store i32 %1858, i32* %dispatcher, align 4
  %1859 = load i8*, i8** %8, align 8
  %1860 = load i8, i8* %1859, align 1
  %1861 = and i64 %9, 6140748954990233454
  %1862 = or i64 -6140748954990233455, %9
  %1863 = sub i64 %1862, -6140748954990233455
  %1864 = and i64 %25, -8628768644115080075
  %1865 = or i64 8628768644115080074, %25
  %1866 = sub i64 %1865, 8628768644115080074
  %1867 = xor i64 %1864, 6501540636661813509
  %1868 = xor i64 %1867, %1861
  %1869 = xor i64 %1868, %1863
  %1870 = xor i64 %1869, %1866
  %1871 = and i64 %35, -5430745382149919970
  %1872 = xor i64 %35, -1
  %1873 = or i64 5430745382149919969, %1872
  %1874 = xor i64 %1873, -1
  %1875 = and i64 %1874, -1
  %1876 = or i64 %5, 6391460800282742562
  %1877 = xor i64 %5, -1
  %1878 = and i64 6391460800282742562, %1877
  %1879 = add i64 %1878, %5
  %1880 = xor i64 %1876, -8323969540341815398
  %1881 = xor i64 %1880, %1879
  %1882 = xor i64 %1881, %1875
  %1883 = xor i64 %1882, %1871
  %1884 = mul i64 %1870, %1883
  %1885 = trunc i64 %1884 to i8
  %1886 = mul i8 %1860, %1885
  %1887 = mul i8 %1860, 2
  %1888 = add i8 2, %1887
  %1889 = mul i8 %1886, %1888
  %1890 = srem i8 %1889, 4
  %1891 = icmp eq i8 %1890, 0
  %1892 = mul i8 %1860, %1860
  %1893 = add i8 %1892, %1860
  %1894 = srem i8 %1893, 2
  %1895 = icmp eq i8 %1894, 0
  %1896 = or i1 %1891, %1895
  %1897 = or i64 %55, 7556960834505457791
  %1898 = xor i64 %55, -1
  %1899 = and i64 7556960834505457791, %1898
  %1900 = add i64 %1899, %55
  %1901 = add i64 %67, -6460162697923882290
  %1902 = add i64 -1479744693518224789, %67
  %1903 = sub i64 %1902, 4980418004405657501
  %1904 = xor i64 %1900, %1897
  %1905 = xor i64 %1904, 6657680067739272009
  %1906 = xor i64 %1905, %1901
  %1907 = xor i64 %1906, %1903
  %1908 = add i64 %61, 7489462540796077165
  %1909 = and i64 7489462540796077165, %61
  %1910 = or i64 7489462540796077165, %61
  %1911 = add i64 %1909, %1910
  %1912 = or i64 %45, -2741148382325999446
  %1913 = xor i64 %45, -1
  %1914 = and i64 -2741148382325999446, %1913
  %1915 = add i64 %1914, %45
  %1916 = xor i64 %1912, 8289184305815192289
  %1917 = xor i64 %1916, %1915
  %1918 = xor i64 %1917, %1911
  %1919 = xor i64 %1918, %1908
  %1920 = mul i64 %1907, %1919
  %1921 = trunc i64 %1920 to i32
  %1922 = select i1 %1896, i32 388314405, i32 %1921
  %1923 = or i32 %1922, 12
  %1924 = and i32 %1922, 12
  %1925 = sub i32 %1923, %1924
  store i32 %1925, i32* %0, align 4
  %1926 = call i8** @bf4471601488556574720(i32* %0)
  %1927 = load i8*, i8** %1926, align 8
  indirectbr i8* %1927, [label %loopEnd, label %1853]

1928:                                             ; preds = %1928, %loopStart
  %1929 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 33
  %1930 = load i32, i32* %1929, align 4
  %1931 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %1932 = load i32, i32* %1931, align 4
  %1933 = srem i32 %1930, %1932
  store i32 %1933, i32* %dispatcher, align 4
  %1934 = load i8*, i8** %2, align 8
  %1935 = load i8, i8* %1934, align 1
  %1936 = mul i8 %1935, 2
  %1937 = mul i8 %1935, 2
  %1938 = add i8 2, %1937
  %1939 = mul i8 %1936, %1938
  %1940 = srem i8 %1939, 4
  %1941 = or i64 %126, 7646488340075379996
  %1942 = and i64 7646488340075379996, %126
  %1943 = xor i64 7646488340075379996, %126
  %1944 = or i64 %1942, %1943
  %1945 = or i64 %59, 183251297849519926
  %1946 = xor i64 %59, -1
  %1947 = and i64 183251297849519926, %1946
  %1948 = add i64 %1947, %59
  %1949 = add i64 %43, 1625158405157232489
  %1950 = add i64 5446301901314656522, %43
  %1951 = sub i64 %1950, 3821143496157424033
  %1952 = xor i64 %1944, %1949
  %1953 = xor i64 %1952, %1945
  %1954 = xor i64 %1953, %1941
  %1955 = xor i64 %1954, -5853009452387214429
  %1956 = xor i64 %1955, %1948
  %1957 = xor i64 %1956, %1951
  %1958 = add i64 %15, 897112808708372464
  %1959 = add i64 5247771040222345343, %15
  %1960 = add i64 %1959, -4350658231513972879
  %1961 = add i64 %1, 3586256252989730031
  %1962 = add i64 -423477278730216255, %1
  %1963 = add i64 %1962, 4009733531719946286
  %1964 = xor i64 %1963, %1958
  %1965 = xor i64 %1964, %1960
  %1966 = xor i64 %1965, %1961
  %1967 = xor i64 %1966, 0
  %1968 = mul i64 %1957, %1967
  %1969 = trunc i64 %1968 to i8
  %1970 = icmp eq i8 %1940, %1969
  %1971 = mul i8 %1935, %1935
  %1972 = mul i8 %1971, %1935
  %1973 = add i8 %1972, %1935
  %1974 = srem i8 %1973, 2
  %1975 = or i64 %7, -6735235327880805730
  %1976 = xor i64 %7, -1
  %1977 = and i64 -6735235327880805730, %1976
  %1978 = add i64 %1977, %7
  %1979 = and i64 %35, -6647291977451872129
  %1980 = or i64 6647291977451872128, %35
  %1981 = sub i64 %1980, 6647291977451872128
  %1982 = xor i64 %1979, %1975
  %1983 = xor i64 %1982, -1514713674943990313
  %1984 = xor i64 %1983, %1981
  %1985 = xor i64 %1984, %1978
  %1986 = sext i32 %dispatcher1 to i64
  %1987 = or i64 %1986, 5414792923772886286
  %1988 = and i64 5414792923772886286, %1986
  %1989 = xor i64 5414792923772886286, %1986
  %1990 = or i64 %1988, %1989
  %1991 = and i64 %39, 854490833229249772
  %1992 = xor i64 %39, -1
  %1993 = or i64 -854490833229249773, %1992
  %1994 = xor i64 %1993, -1
  %1995 = and i64 %1994, -1
  %1996 = and i64 %15, 5386648812142728955
  %1997 = xor i64 %15, -1
  %1998 = or i64 -5386648812142728956, %1997
  %1999 = xor i64 %1998, -1
  %2000 = and i64 %1999, -1
  %2001 = xor i64 %1991, %2000
  %2002 = xor i64 %2001, %1995
  %2003 = xor i64 %2002, %1990
  %2004 = xor i64 %2003, %1996
  %2005 = xor i64 %2004, %1987
  %2006 = xor i64 %2005, 0
  %2007 = mul i64 %1985, %2006
  %2008 = trunc i64 %2007 to i8
  %2009 = icmp eq i8 %1974, %2008
  %2010 = xor i1 %2009, true
  %2011 = xor i1 %1970, %2010
  %2012 = and i1 %2011, %1970
  %2013 = select i1 %2012, i32 388314374, i32 388314409
  %2014 = or i32 %2013, 47
  %2015 = and i32 %2013, 47
  %2016 = sub i32 %2014, %2015
  store i32 %2016, i32* %0, align 4
  %2017 = call i8** @bf4471601488556574720(i32* %0)
  %2018 = load i8*, i8** %2017, align 8
  indirectbr i8* %2018, [label %loopEnd, label %1928]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %2019 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 11
  %2020 = load i32, i32* %2019, align 4
  %2021 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 9
  %2022 = load i32, i32* %2021, align 4
  %2023 = add i32 %2020, %2022
  store i32 %2023, i32* %dispatcher, align 4
  %.reload38.reload = load i32, i32* %.reload38.reg2mem, align 4
  store i32 %.reload38.reload, i32* %.reg2mem74, align 4
  %2024 = load i8*, i8** %14, align 8
  %2025 = load i8, i8* %2024, align 1
  %2026 = mul i8 %2025, 2
  %2027 = mul i8 %2025, 2
  %2028 = add i8 32, %2027
  %2029 = add i8 %2028, -30
  %2030 = mul i8 %2026, %2029
  %2031 = srem i8 %2030, 4
  %2032 = or i64 %67, -4816000171198522740
  %2033 = and i64 -4816000171198522740, %67
  %2034 = xor i64 -4816000171198522740, %67
  %2035 = or i64 %2033, %2034
  %2036 = or i64 %37, -1866325954136964878
  %2037 = xor i64 %37, -1
  %2038 = and i64 -1866325954136964878, %2037
  %2039 = add i64 %2038, %37
  %2040 = and i64 %59, -5268776441548103187
  %2041 = xor i64 %59, -1
  %2042 = or i64 5268776441548103186, %2041
  %2043 = xor i64 %2042, -1
  %2044 = and i64 %2043, -1
  %2045 = xor i64 %2044, %2039
  %2046 = xor i64 %2045, %2036
  %2047 = xor i64 %2046, %2040
  %2048 = xor i64 %2047, %2032
  %2049 = xor i64 %2048, 4039258057213719059
  %2050 = xor i64 %2049, %2035
  %2051 = add i64 %57, -1074157643018795841
  %2052 = and i64 -1074157643018795841, %57
  %2053 = or i64 -1074157643018795841, %57
  %2054 = add i64 %2052, %2053
  %2055 = or i64 %120, 6655061261457494423
  %2056 = and i64 6655061261457494423, %120
  %2057 = xor i64 6655061261457494423, %120
  %2058 = or i64 %2056, %2057
  %2059 = or i64 %73, -4666039225570427973
  %2060 = and i64 -4666039225570427973, %73
  %2061 = xor i64 -4666039225570427973, %73
  %2062 = or i64 %2060, %2061
  %2063 = xor i64 %2055, %2054
  %2064 = xor i64 %2063, %2051
  %2065 = xor i64 %2064, %2059
  %2066 = xor i64 %2065, %2058
  %2067 = xor i64 %2066, %2062
  %2068 = xor i64 %2067, 0
  %2069 = mul i64 %2050, %2068
  %2070 = trunc i64 %2069 to i8
  %2071 = icmp eq i8 %2031, %2070
  %2072 = mul i8 %2025, %2025
  %2073 = mul i8 %2072, %2025
  %2074 = sub i8 0, %2073
  %2075 = add i64 %45, -4076077391625798465
  %2076 = add i64 -4908839210965283420, %45
  %2077 = sub i64 %2076, -832761819339484955
  %2078 = add i64 %1, -449841966083001860
  %2079 = and i64 -449841966083001860, %1
  %2080 = or i64 -449841966083001860, %1
  %2081 = add i64 %2079, %2080
  %2082 = and i64 %43, -7643858281526246184
  %2083 = xor i64 %43, -1
  %2084 = xor i64 -7643858281526246184, %2083
  %2085 = and i64 %2084, -7643858281526246184
  %2086 = xor i64 %2081, %2082
  %2087 = xor i64 %2086, %2075
  %2088 = xor i64 %2087, %2078
  %2089 = xor i64 %2088, %2077
  %2090 = xor i64 %2089, %2085
  %2091 = xor i64 %2090, 5763912484475830893
  %2092 = or i64 %33, 8735072191766179980
  %2093 = xor i64 %33, -1
  %2094 = and i64 %2093, 6487534019953758355
  %2095 = and i64 %33, -6487534019953758356
  %2096 = or i64 %2094, %2095
  %2097 = xor i64 2535927024271663135, %2096
  %2098 = xor i64 %33, -1
  %2099 = or i64 -8735072191766179981, %2098
  %2100 = xor i64 %2099, -1
  %2101 = and i64 %2100, -1
  %2102 = or i64 %2097, %2101
  %2103 = sext i32 %dispatcher1 to i64
  %2104 = add i64 %2103, -6561525441935430843
  %2105 = add i64 -6116649053236456036, %2103
  %2106 = add i64 %2105, -444876388698974807
  %2107 = xor i64 0, %2106
  %2108 = xor i64 %2107, %2104
  %2109 = xor i64 %2108, %2102
  %2110 = xor i64 %2109, %2092
  %2111 = mul i64 %2091, %2110
  %2112 = trunc i64 %2111 to i8
  %2113 = sub i8 %2112, %2025
  %2114 = add i8 %2074, %2113
  %2115 = and i64 %55, -8442470427581637694
  %2116 = xor i64 %55, -1
  %2117 = or i64 8442470427581637693, %2116
  %2118 = xor i64 %2117, -1
  %2119 = and i64 %2118, -1
  %2120 = and i64 %45, 4814412805511793656
  %2121 = xor i64 %45, -1
  %2122 = xor i64 4814412805511793656, %2121
  %2123 = and i64 %2122, 4814412805511793656
  %2124 = xor i64 %2123, %2120
  %2125 = xor i64 %2124, %2115
  %2126 = xor i64 %2125, %2119
  %2127 = xor i64 %2126, -1919662796547940705
  %2128 = sext i32 %dispatcher1 to i64
  %2129 = and i64 %2128, -2867602808059620606
  %2130 = xor i64 %2128, -1
  %2131 = or i64 2867602808059620605, %2130
  %2132 = xor i64 %2131, -1
  %2133 = and i64 %2132, -1
  %2134 = add i64 %25, -496009963591123163
  %2135 = add i64 -6001068261894729680, %25
  %2136 = sub i64 %2135, -5505058298303606517
  %2137 = or i64 %126, 7484067459456576478
  %2138 = xor i64 %126, -1
  %2139 = and i64 %2138, -5870937364399712749
  %2140 = and i64 %126, 5870937364399712748
  %2141 = or i64 %2139, %2140
  %2142 = xor i64 -3937691845339169331, %2141
  %2143 = xor i64 %126, -1
  %2144 = or i64 -7484067459456576479, %2143
  %2145 = xor i64 %2144, -1
  %2146 = and i64 %2145, -1
  %2147 = or i64 %2142, %2146
  %2148 = xor i64 %2129, %2147
  %2149 = xor i64 %2148, %2136
  %2150 = xor i64 %2149, %2137
  %2151 = xor i64 %2150, %2134
  %2152 = xor i64 %2151, %2133
  %2153 = xor i64 %2152, 0
  %2154 = mul i64 %2127, %2153
  %2155 = trunc i64 %2154 to i8
  %2156 = sub i8 %2155, %2114
  %2157 = add i64 %55, -7584858673945622073
  %2158 = add i64 4209079828589062087, %55
  %2159 = add i64 %2158, 6652805571174867456
  %2160 = and i64 %49, 200142264239160815
  %2161 = xor i64 %49, -1
  %2162 = xor i64 200142264239160815, %2161
  %2163 = and i64 %2162, 200142264239160815
  %2164 = and i64 %9, -5127374511581548548
  %2165 = or i64 5127374511581548547, %9
  %2166 = sub i64 %2165, 5127374511581548547
  %2167 = xor i64 %2164, %2157
  %2168 = xor i64 %2167, %2163
  %2169 = xor i64 %2168, -1836656390413702857
  %2170 = xor i64 %2169, %2160
  %2171 = xor i64 %2170, %2166
  %2172 = xor i64 %2171, %2159
  %2173 = and i64 %73, -3994211422783723159
  %2174 = xor i64 %73, -1
  %2175 = xor i64 -3994211422783723159, %2174
  %2176 = and i64 %2175, -3994211422783723159
  %2177 = and i64 %57, -3908277911261741904
  %2178 = xor i64 %57, -1
  %2179 = or i64 3908277911261741903, %2178
  %2180 = xor i64 %2179, -1
  %2181 = and i64 %2180, -1
  %2182 = add i64 %41, -131050498537956848
  %2183 = xor i64 -131050498537956848, %41
  %2184 = and i64 -131050498537956848, %41
  %2185 = mul i64 2, %2184
  %2186 = add i64 %2183, %2185
  %2187 = xor i64 %2186, %2176
  %2188 = xor i64 %2187, %2182
  %2189 = xor i64 %2188, %2177
  %2190 = xor i64 %2189, -2802302471267763954
  %2191 = xor i64 %2190, %2181
  %2192 = xor i64 %2191, %2173
  %2193 = mul i64 %2172, %2192
  %2194 = trunc i64 %2193 to i8
  %2195 = srem i8 %2156, %2194
  %2196 = icmp eq i8 %2195, 0
  %2197 = xor i1 %2196, true
  %2198 = xor i1 %2071, %2197
  %2199 = and i1 %2198, %2071
  %2200 = select i1 %2199, i32 388314419, i32 388314409
  %2201 = or i32 %2200, 26
  %2202 = and i32 %2200, 26
  %2203 = sub i32 %2201, %2202
  store i32 %2203, i32* %0, align 4
  %2204 = call i8** @bf4471601488556574720(i32* %0)
  %2205 = load i8*, i8** %2204, align 8
  indirectbr i8* %2205, [label %loopEnd, label %.loopexit]

2206:                                             ; preds = %2206, %loopStart
  %.reload75 = load i32, i32* %.reg2mem74, align 4
  store i32 %.reload75, i32* %.reg2mem51, align 4
  %.reload17 = load i8*, i8** %.reg2mem15, align 8
  call void @llvm.lifetime.end.p0i8(i64 1760, i8* nonnull %.reload17) #13
  %.reload8 = load i8*, i8** %.reg2mem7, align 8
  call void @llvm.lifetime.end.p0i8(i64 7040, i8* nonnull %.reload8) #13
  %.reload5 = load i8*, i8** %.reg2mem4, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %.reload5) #13
  %.reload25 = load i32, i32* %.reg2mem20, align 4
  %2207 = xor i32 %.reload25, -1
  %2208 = or i32 %2207, 1
  %2209 = xor i32 %.reload25, -1
  %2210 = sub i32 %2208, %2209
  %2211 = icmp eq i32 %2210, 1
  %.reload24 = load i32, i32* %.reg2mem20, align 4
  %2212 = mul i32 %.reload24, %.reload24
  %.reload21 = load i32, i32* %.reg2mem20, align 4
  %2213 = add i32 %2212, %.reload21
  store i32 %2213, i32* %.reg2mem54, align 4
  %.reload57 = load i32, i32* %.reg2mem54, align 4
  %2214 = srem i32 %.reload57, 2
  store i32 %2214, i32* %.reg2mem58, align 4
  %.reload64 = load i32, i32* %.reg2mem58, align 4
  %2215 = icmp eq i32 %.reload64, 0
  %2216 = xor i1 %2215, true
  %2217 = and i1 %2211, %2216
  %2218 = add i1 %2217, %2215
  %2219 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %2220 = load i32, i32* %2219, align 4
  %2221 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %2222 = load i32, i32* %2221, align 4
  %2223 = sub i32 %2220, %2222
  %2224 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %2225 = load i32, i32* %2224, align 4
  %2226 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 14
  %2227 = load i32, i32* %2226, align 4
  %2228 = xor i32 %2225, %2227
  %2229 = and i32 %2225, %2227
  %2230 = mul i32 2, %2229
  %2231 = add i32 %2228, %2230
  %2232 = select i1 %2218, i32 %2223, i32 %2231
  store i32 %2232, i32* %dispatcher, align 4
  %2233 = load i8*, i8** %20, align 8
  %2234 = load i8, i8* %2233, align 1
  %2235 = mul i8 %2234, 2
  %2236 = mul i8 %2234, 2
  %2237 = add i64 %73, -1483299378359497463
  %2238 = sub i64 0, %73
  %2239 = sub i64 -1483299378359497463, %2238
  %2240 = and i64 %5, -2619921159613952780
  %2241 = xor i64 %5, -1
  %2242 = or i64 2619921159613952779, %2241
  %2243 = xor i64 %2242, -1
  %2244 = and i64 %2243, -1
  %2245 = add i64 %31, -4399540339147196608
  %2246 = xor i64 -4399540339147196608, %31
  %2247 = and i64 -4399540339147196608, %31
  %2248 = mul i64 2, %2247
  %2249 = add i64 %2246, %2248
  %2250 = xor i64 %2239, %2245
  %2251 = xor i64 %2250, %2244
  %2252 = xor i64 %2251, %2249
  %2253 = xor i64 %2252, %2240
  %2254 = xor i64 %2253, %2237
  %2255 = xor i64 %2254, 6532812562376118197
  %2256 = and i64 %29, 7118051496980753322
  %2257 = xor i64 %29, -1
  %2258 = xor i64 7118051496980753322, %2257
  %2259 = and i64 %2258, 7118051496980753322
  %2260 = or i64 %59, -7551286591645389429
  %2261 = xor i64 %59, -1
  %2262 = and i64 %2261, 8522180780003863345
  %2263 = and i64 %59, -8522180780003863346
  %2264 = or i64 %2262, %2263
  %2265 = xor i64 -2202068223551813958, %2264
  %2266 = xor i64 %59, -1
  %2267 = or i64 7551286591645389428, %2266
  %2268 = xor i64 %2267, -1
  %2269 = and i64 %2268, -1
  %2270 = or i64 %2265, %2269
  %2271 = add i64 %39, -3200039138423184841
  %2272 = xor i64 -3200039138423184841, %39
  %2273 = and i64 -3200039138423184841, %39
  %2274 = mul i64 2, %2273
  %2275 = add i64 %2272, %2274
  %2276 = xor i64 %2260, 2850476010273403753
  %2277 = xor i64 %2276, %2259
  %2278 = xor i64 %2277, %2270
  %2279 = xor i64 %2278, %2271
  %2280 = xor i64 %2279, %2256
  %2281 = xor i64 %2280, %2275
  %2282 = mul i64 %2255, %2281
  %2283 = trunc i64 %2282 to i8
  %2284 = add i8 %2283, %2236
  %2285 = add i8 %2284, -59
  %2286 = mul i8 %2235, %2285
  %2287 = srem i8 %2286, 4
  %2288 = and i64 %120, 2128137363235137883
  %2289 = xor i64 %120, -1
  %2290 = or i64 -2128137363235137884, %2289
  %2291 = xor i64 %2290, -1
  %2292 = and i64 %2291, -1
  %2293 = add i64 %11, 5036145595863079552
  %2294 = add i64 8506235946069791437, %11
  %2295 = add i64 %2294, -3470090350206711885
  %2296 = add i64 %134, -6268426474996935455
  %2297 = add i64 2358366445319515975, %134
  %2298 = sub i64 %2297, 8626792920316451430
  %2299 = xor i64 %2295, %2292
  %2300 = xor i64 %2299, %2288
  %2301 = xor i64 %2300, %2298
  %2302 = xor i64 %2301, %2293
  %2303 = xor i64 %2302, %2296
  %2304 = xor i64 %2303, 7862096864868476385
  %2305 = and i64 %71, 5105969241425586713
  %2306 = xor i64 %71, -1
  %2307 = or i64 -5105969241425586714, %2306
  %2308 = xor i64 %2307, -1
  %2309 = and i64 %2308, -1
  %2310 = and i64 %67, 3149244440732090254
  %2311 = xor i64 %67, -1
  %2312 = or i64 -3149244440732090255, %2311
  %2313 = xor i64 %2312, -1
  %2314 = and i64 %2313, -1
  %2315 = xor i64 0, %2309
  %2316 = xor i64 %2315, %2314
  %2317 = xor i64 %2316, %2310
  %2318 = xor i64 %2317, %2305
  %2319 = mul i64 %2304, %2318
  %2320 = trunc i64 %2319 to i8
  %2321 = icmp eq i8 %2287, %2320
  %2322 = mul i8 %2234, %2234
  %2323 = sub i8 %2322, 92
  %2324 = add i8 %2323, %2234
  %2325 = add i8 %2324, 92
  %2326 = srem i8 %2325, 2
  %2327 = icmp eq i8 %2326, 0
  %2328 = xor i1 %2321, true
  %2329 = xor i1 %2327, true
  %2330 = or i1 %2328, %2329
  %2331 = xor i1 %2330, true
  %2332 = and i1 %2331, true
  %2333 = select i1 %2332, i32 388314419, i32 388314409
  %2334 = add i64 %63, -7153784047737026949
  %2335 = sub i64 0, %63
  %2336 = add i64 7153784047737026949, %2335
  %2337 = sub i64 0, %2336
  %2338 = or i64 %27, 6283986302915418118
  %2339 = xor i64 %27, -1
  %2340 = and i64 %2339, 4834703108682353241
  %2341 = and i64 %27, -4834703108682353242
  %2342 = or i64 %2340, %2341
  %2343 = xor i64 1453929181733491295, %2342
  %2344 = xor i64 %27, -1
  %2345 = or i64 -6283986302915418119, %2344
  %2346 = xor i64 %2345, -1
  %2347 = and i64 %2346, -1
  %2348 = or i64 %2343, %2347
  %2349 = xor i64 %2334, %2337
  %2350 = xor i64 %2349, %2348
  %2351 = xor i64 %2350, %2338
  %2352 = xor i64 %2351, 1808686079296055123
  %2353 = or i64 %5, -4586558302180035987
  %2354 = xor i64 %5, -1
  %2355 = and i64 -4586558302180035987, %2354
  %2356 = add i64 %2355, %5
  %2357 = and i64 %114, -9133730707348886766
  %2358 = xor i64 %114, -1
  %2359 = xor i64 -9133730707348886766, %2358
  %2360 = and i64 %2359, -9133730707348886766
  %2361 = or i64 %128, 5018453097499891377
  %2362 = xor i64 %128, -1
  %2363 = and i64 5018453097499891377, %2362
  %2364 = add i64 %2363, %128
  %2365 = xor i64 %2353, %2357
  %2366 = xor i64 %2365, %2361
  %2367 = xor i64 %2366, %2360
  %2368 = xor i64 %2367, %2364
  %2369 = xor i64 %2368, 1894098905533603390
  %2370 = xor i64 %2369, %2356
  %2371 = mul i64 %2352, %2370
  %2372 = trunc i64 %2371 to i32
  %2373 = xor i32 %2333, %2372
  store i32 %2373, i32* %0, align 4
  %2374 = call i8** @bf4471601488556574720(i32* %0)
  %2375 = load i8*, i8** %2374, align 8
  indirectbr i8* %2375, [label %loopEnd, label %2206]

2376:                                             ; preds = %2376, %loopStart
  %2377 = and i64 %134, 3153542389525962079
  %2378 = xor i64 %134, -1
  %2379 = xor i64 3153542389525962079, %2378
  %2380 = and i64 %2379, 3153542389525962079
  %2381 = or i64 %61, 4818762367289913884
  %2382 = xor i64 %61, -1
  %2383 = and i64 4818762367289913884, %2382
  %2384 = add i64 %2383, %61
  %2385 = and i64 %5, 2867483301565996097
  %2386 = xor i64 %5, -1
  %2387 = or i64 -2867483301565996098, %2386
  %2388 = xor i64 %2387, -1
  %2389 = and i64 %2388, -1
  %2390 = xor i64 %2385, %2381
  %2391 = xor i64 %2390, %2389
  %2392 = xor i64 %2391, %2377
  %2393 = xor i64 %2392, %2380
  %2394 = xor i64 %2393, %2384
  %2395 = xor i64 %2394, -3075337873018015635
  %2396 = sext i32 %148 to i64
  %2397 = add i64 %2396, 1562947618394367744
  %2398 = and i64 1562947618394367744, %2396
  %2399 = or i64 1562947618394367744, %2396
  %2400 = add i64 %2398, %2399
  %2401 = and i64 %19, 6576192376529728397
  %2402 = xor i64 %19, -1
  %2403 = xor i64 6576192376529728397, %2402
  %2404 = and i64 %2403, 6576192376529728397
  %2405 = xor i64 3547033757361035621, %2401
  %2406 = xor i64 %2405, %2404
  %2407 = xor i64 %2406, %2397
  %2408 = xor i64 %2407, %2400
  %2409 = mul i64 %2395, %2408
  %2410 = trunc i64 %2409 to i32
  %2411 = sdiv i32 %2410, 55
  %2412 = add i32 62, 39
  store i32 %2412, i32* %.reg2mem65, align 4
  %2413 = mul i32 38, 82
  %2414 = sdiv i32 18, 21
  %2415 = add i64 %124, 8769466288310726841
  %2416 = and i64 8769466288310726841, %124
  %2417 = or i64 8769466288310726841, %124
  %2418 = add i64 %2416, %2417
  %2419 = add i64 %15, -1094385069812329038
  %2420 = sub i64 0, %15
  %2421 = add i64 1094385069812329038, %2420
  %2422 = sub i64 0, %2421
  %2423 = xor i64 %2422, %2418
  %2424 = xor i64 %2423, %2419
  %2425 = xor i64 %2424, 2428893736831007435
  %2426 = xor i64 %2425, %2415
  %2427 = or i64 %67, 8705685094383163056
  %2428 = and i64 8705685094383163056, %67
  %2429 = xor i64 8705685094383163056, %67
  %2430 = or i64 %2428, %2429
  %2431 = sext i32 %dispatcher1 to i64
  %2432 = add i64 %2431, -5454464610097241182
  %2433 = add i64 -3759137906842958605, %2431
  %2434 = sub i64 %2433, 1695326703254282577
  %2435 = or i64 %5, -4651256933531489819
  %2436 = xor i64 %5, -1
  %2437 = and i64 -4651256933531489819, %2436
  %2438 = add i64 %2437, %5
  %2439 = xor i64 -5917930491497505401, %2430
  %2440 = xor i64 %2439, %2434
  %2441 = xor i64 %2440, %2432
  %2442 = xor i64 %2441, %2427
  %2443 = xor i64 %2442, %2435
  %2444 = xor i64 %2443, %2438
  %2445 = mul i64 %2426, %2444
  %2446 = trunc i64 %2445 to i32
  %2447 = sub i32 111, %2446
  %2448 = add i32 31, 27
  %2449 = mul i32 1, 57
  %.reload56 = load i32, i32* %.reg2mem54, align 4
  %2450 = srem i32 %.reload56, 2
  %2451 = icmp eq i32 %2450, 0
  %2452 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 21
  %2453 = load i32, i32* %2452, align 4
  %2454 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 5
  %2455 = load i32, i32* %2454, align 4
  %2456 = sub i32 %2453, %2455
  %2457 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 12
  %2458 = load i32, i32* %2457, align 4
  %2459 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 11
  %2460 = load i32, i32* %2459, align 4
  %2461 = sub i32 0, %2460
  %2462 = sub i32 %2458, %2461
  %2463 = select i1 %2451, i32 %2456, i32 %2462
  store i32 %2463, i32* %dispatcher, align 4
  %2464 = load i8*, i8** %52, align 8
  %2465 = load i8, i8* %2464, align 1
  %2466 = mul i8 %2465, %2465
  %2467 = add i8 %2466, -40
  %2468 = add i8 %2467, %2465
  %2469 = sub i8 %2468, -40
  %2470 = and i64 %9, -147409989791293418
  %2471 = xor i64 %9, -1
  %2472 = or i64 147409989791293417, %2471
  %2473 = xor i64 %2472, -1
  %2474 = and i64 %2473, -1
  %2475 = and i64 %118, 623962099804775862
  %2476 = xor i64 %118, -1
  %2477 = xor i64 623962099804775862, %2476
  %2478 = and i64 %2477, 623962099804775862
  %2479 = add i64 %61, 1735156991139966272
  %2480 = sub i64 0, %61
  %2481 = add i64 -1735156991139966272, %2480
  %2482 = sub i64 0, %2481
  %2483 = xor i64 %2475, 8879857685218381883
  %2484 = xor i64 %2483, %2474
  %2485 = xor i64 %2484, %2470
  %2486 = xor i64 %2485, %2479
  %2487 = xor i64 %2486, %2478
  %2488 = xor i64 %2487, %2482
  %2489 = and i64 %9, -6605745854384847041
  %2490 = or i64 6605745854384847040, %9
  %2491 = sub i64 %2490, 6605745854384847040
  %2492 = and i64 %35, 1393263378416710621
  %2493 = or i64 -1393263378416710622, %35
  %2494 = sub i64 %2493, -1393263378416710622
  %2495 = and i64 %3, -2576821117241549721
  %2496 = or i64 2576821117241549720, %3
  %2497 = sub i64 %2496, 2576821117241549720
  %2498 = xor i64 %2495, 7906030076657048281
  %2499 = xor i64 %2498, %2492
  %2500 = xor i64 %2499, %2491
  %2501 = xor i64 %2500, %2497
  %2502 = xor i64 %2501, %2494
  %2503 = xor i64 %2502, %2489
  %2504 = mul i64 %2488, %2503
  %2505 = trunc i64 %2504 to i8
  %2506 = mul i8 %2469, %2505
  %2507 = srem i8 %2506, 2
  %2508 = add i64 %39, 8459367628436336271
  %2509 = add i64 -9049584438180621007, %39
  %2510 = add i64 %2509, -937792007092594338
  %2511 = add i64 %17, 3768358556474496036
  %2512 = add i64 -8016130035110053647, %17
  %2513 = sub i64 %2512, 6662255482125001933
  %2514 = add i64 %128, 197972190706131451
  %2515 = sub i64 0, %128
  %2516 = add i64 -197972190706131451, %2515
  %2517 = sub i64 0, %2516
  %2518 = xor i64 %2517, -2379939586738735935
  %2519 = xor i64 %2518, %2508
  %2520 = xor i64 %2519, %2511
  %2521 = xor i64 %2520, %2514
  %2522 = xor i64 %2521, %2513
  %2523 = xor i64 %2522, %2510
  %2524 = or i64 %57, -5265905840981150524
  %2525 = xor i64 %57, -1
  %2526 = and i64 %2525, -3364046420238560018
  %2527 = and i64 %57, 3364046420238560017
  %2528 = or i64 %2526, %2527
  %2529 = xor i64 7474637358166990890, %2528
  %2530 = xor i64 %57, -1
  %2531 = or i64 5265905840981150523, %2530
  %2532 = xor i64 %2531, -1
  %2533 = and i64 %2532, -1
  %2534 = or i64 %2529, %2533
  %2535 = add i64 %122, -4374859708287571091
  %2536 = xor i64 -4374859708287571091, %122
  %2537 = and i64 -4374859708287571091, %122
  %2538 = mul i64 2, %2537
  %2539 = add i64 %2536, %2538
  %2540 = xor i64 0, %2534
  %2541 = xor i64 %2540, %2539
  %2542 = xor i64 %2541, %2524
  %2543 = xor i64 %2542, %2535
  %2544 = mul i64 %2523, %2543
  %2545 = trunc i64 %2544 to i8
  %2546 = icmp eq i8 %2507, %2545
  %2547 = mul i8 %2465, %2465
  %2548 = add i8 %2547, 109
  %2549 = add i8 %2548, %2465
  %2550 = sub i8 %2549, 109
  %2551 = srem i8 %2550, 2
  %2552 = icmp eq i8 %2551, 0
  %2553 = or i64 %43, -5075713997740129441
  %2554 = xor i64 %43, -1
  %2555 = and i64 %2554, -3199499883958241099
  %2556 = and i64 %43, 3199499883958241098
  %2557 = or i64 %2555, %2556
  %2558 = xor i64 7644410444991118314, %2557
  %2559 = xor i64 %43, -1
  %2560 = or i64 5075713997740129440, %2559
  %2561 = xor i64 %2560, -1
  %2562 = and i64 %2561, -1
  %2563 = or i64 %2558, %2562
  %2564 = add i64 %130, -8915205614894445119
  %2565 = xor i64 -8915205614894445119, %130
  %2566 = and i64 -8915205614894445119, %130
  %2567 = mul i64 2, %2566
  %2568 = add i64 %2565, %2567
  %2569 = sext i32 %148 to i64
  %2570 = and i64 %2569, 1109342534420610556
  %2571 = xor i64 %2569, -1
  %2572 = or i64 -1109342534420610557, %2571
  %2573 = xor i64 %2572, -1
  %2574 = and i64 %2573, -1
  %2575 = xor i64 -4689918546448122337, %2553
  %2576 = xor i64 %2575, %2563
  %2577 = xor i64 %2576, %2570
  %2578 = xor i64 %2577, %2568
  %2579 = xor i64 %2578, %2574
  %2580 = xor i64 %2579, %2564
  %2581 = and i64 %57, 875217481290660524
  %2582 = xor i64 %57, -1
  %2583 = or i64 -875217481290660525, %2582
  %2584 = xor i64 %2583, -1
  %2585 = and i64 %2584, -1
  %2586 = add i64 %134, 8057600145393115293
  %2587 = add i64 -7353377724879313521, %134
  %2588 = sub i64 %2587, 3035766203437122802
  %2589 = xor i64 %2586, %2588
  %2590 = xor i64 %2589, %2581
  %2591 = xor i64 %2590, %2585
  %2592 = xor i64 %2591, 8415818885473926623
  %2593 = mul i64 %2580, %2592
  %2594 = trunc i64 %2593 to i1
  %2595 = xor i1 %2546, %2594
  %2596 = xor i1 %2552, true
  %2597 = or i1 %2595, %2596
  %2598 = xor i1 %2597, true
  %2599 = add i64 %37, 429837391671663570
  %2600 = add i64 -1805642899781390733, %37
  %2601 = add i64 %2600, 2235480291453054303
  %2602 = add i64 %7, 6185745498013856919
  %2603 = add i64 7860245386252898567, %7
  %2604 = sub i64 %2603, 1674499888239041648
  %2605 = xor i64 %2601, %2599
  %2606 = xor i64 %2605, %2602
  %2607 = xor i64 %2606, %2604
  %2608 = xor i64 %2607, -5184549803742244159
  %2609 = add i64 %9, -4664519495555274955
  %2610 = add i64 1076410749752164329, %9
  %2611 = add i64 %2610, -5740930245307439284
  %2612 = or i64 %114, -3273182073919172483
  %2613 = xor i64 %114, -1
  %2614 = and i64 -3273182073919172483, %2613
  %2615 = add i64 %2614, %114
  %2616 = add i64 %132, 2423793653703556914
  %2617 = sub i64 0, %132
  %2618 = sub i64 2423793653703556914, %2617
  %2619 = xor i64 %2618, %2611
  %2620 = xor i64 %2619, -2000973066622714559
  %2621 = xor i64 %2620, %2609
  %2622 = xor i64 %2621, %2616
  %2623 = xor i64 %2622, %2615
  %2624 = xor i64 %2623, %2612
  %2625 = mul i64 %2608, %2624
  %2626 = trunc i64 %2625 to i1
  %2627 = and i1 %2598, %2626
  %2628 = select i1 %2627, i32 388314409, i32 388314409
  %2629 = and i64 %130, -5071895757414984515
  %2630 = xor i64 %130, -1
  %2631 = or i64 5071895757414984514, %2630
  %2632 = xor i64 %2631, -1
  %2633 = and i64 %2632, -1
  %2634 = and i64 %47, 3775021140044600323
  %2635 = or i64 -3775021140044600324, %47
  %2636 = sub i64 %2635, -3775021140044600324
  %2637 = or i64 %132, -2996309198394123430
  %2638 = xor i64 %132, -1
  %2639 = and i64 %2638, -2265105986949588697
  %2640 = and i64 %132, 2265105986949588696
  %2641 = or i64 %2639, %2640
  %2642 = xor i64 3961552162503901821, %2641
  %2643 = xor i64 %132, -1
  %2644 = or i64 2996309198394123429, %2643
  %2645 = xor i64 %2644, -1
  %2646 = and i64 %2645, -1
  %2647 = or i64 %2642, %2646
  %2648 = xor i64 %2636, %2634
  %2649 = xor i64 %2648, %2629
  %2650 = xor i64 %2649, %2637
  %2651 = xor i64 %2650, 4274907828306102809
  %2652 = xor i64 %2651, %2647
  %2653 = xor i64 %2652, %2633
  %2654 = add i64 %59, -7581130510455305345
  %2655 = add i64 6127858387764169662, %59
  %2656 = add i64 %2655, 4737755175490076609
  %2657 = or i64 %122, -2811237788632516500
  %2658 = xor i64 %122, -1
  %2659 = and i64 %2658, 5084472934499352721
  %2660 = and i64 %122, -5084472934499352722
  %2661 = or i64 %2659, %2660
  %2662 = xor i64 -7029038121898772227, %2661
  %2663 = xor i64 %122, -1
  %2664 = or i64 2811237788632516499, %2663
  %2665 = xor i64 %2664, -1
  %2666 = and i64 %2665, -1
  %2667 = or i64 %2662, %2666
  %2668 = and i64 %7, -7281818294197810726
  %2669 = xor i64 %7, -1
  %2670 = or i64 7281818294197810725, %2669
  %2671 = xor i64 %2670, -1
  %2672 = and i64 %2671, -1
  %2673 = xor i64 %2668, %2672
  %2674 = xor i64 %2673, -3769246007040995881
  %2675 = xor i64 %2674, %2667
  %2676 = xor i64 %2675, %2656
  %2677 = xor i64 %2676, %2657
  %2678 = xor i64 %2677, %2654
  %2679 = mul i64 %2653, %2678
  %2680 = trunc i64 %2679 to i32
  %2681 = xor i32 %2628, %2680
  %2682 = and i32 %2681, 0
  %2683 = and i32 %2628, -1
  %2684 = or i32 %2682, %2683
  store i32 %2684, i32* %0, align 4
  %2685 = call i8** @bf4471601488556574720(i32* %0)
  %2686 = load i8*, i8** %2685, align 8
  indirectbr i8* %2686, [label %loopEnd, label %2376]

codeRepl19:                                       ; preds = %codeRepl19, %loopStart
  %lt.cast24 = bitcast i32* %.loc20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast24)
  %lt.cast25 = bitcast i32* %.loc21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  store i64 5221456193252566396, i64* %113, align 8
  %2687 = alloca i8**, align 8
  %2688 = sext i32 %dispatcher1 to i64
  %2689 = or i64 %2688, -107084503747680121
  %2690 = xor i64 %2688, -1
  %2691 = and i64 -107084503747680121, %2690
  %2692 = add i64 %2691, %2688
  %2693 = add i64 %59, 2477397535255824297
  %2694 = and i64 2477397535255824297, %59
  %2695 = or i64 2477397535255824297, %59
  %2696 = add i64 %2694, %2695
  %2697 = and i64 %17, -1668366089910126595
  %2698 = xor i64 %17, -1
  %2699 = xor i64 -1668366089910126595, %2698
  %2700 = and i64 %2699, -1668366089910126595
  %2701 = xor i64 %2693, -8761474652269765341
  %2702 = xor i64 %2701, %2700
  %2703 = xor i64 %2702, %2692
  %2704 = xor i64 %2703, %2689
  %2705 = xor i64 %2704, %2696
  %2706 = xor i64 %2705, %2697
  %2707 = or i64 %3, -5011983449713197700
  %2708 = xor i64 %3, -1
  %2709 = and i64 -5011983449713197700, %2708
  %2710 = add i64 %2709, %3
  %2711 = and i64 %61, -1171624320140622421
  %2712 = xor i64 %61, -1
  %2713 = or i64 1171624320140622420, %2712
  %2714 = xor i64 %2713, -1
  %2715 = and i64 %2714, -1
  %2716 = or i64 %43, -1894015703564765786
  %2717 = xor i64 %43, -1
  %2718 = and i64 -1894015703564765786, %2717
  %2719 = add i64 %2718, %43
  %2720 = xor i64 %2711, %2719
  %2721 = xor i64 %2720, %2715
  %2722 = xor i64 %2721, 0
  %2723 = xor i64 %2722, %2710
  %2724 = xor i64 %2723, %2707
  %2725 = xor i64 %2724, %2716
  %2726 = mul i64 %2706, %2725
  %2727 = trunc i64 %2726 to i1
  %2728 = and i64 %132, 8150878553921229035
  %2729 = xor i64 %132, -1
  %2730 = xor i64 8150878553921229035, %2729
  %2731 = and i64 %2730, 8150878553921229035
  %2732 = or i64 %43, 5237942682434034584
  %2733 = and i64 5237942682434034584, %43
  %2734 = xor i64 5237942682434034584, %43
  %2735 = or i64 %2733, %2734
  %2736 = add i64 %69, -4210993982946905740
  %2737 = add i64 -4743299015272436302, %69
  %2738 = add i64 %2737, 532305032325530562
  %2739 = xor i64 %2735, %2732
  %2740 = xor i64 %2739, %2731
  %2741 = xor i64 %2740, %2736
  %2742 = xor i64 %2741, %2738
  %2743 = xor i64 %2742, %2728
  %2744 = xor i64 %2743, -1448310245841868193
  %2745 = or i64 %128, 4453191623715336644
  %2746 = xor i64 %128, -1
  %2747 = and i64 %2746, -4364737513347140964
  %2748 = and i64 %128, 4364737513347140963
  %2749 = or i64 %2747, %2748
  %2750 = xor i64 -98590547143097512, %2749
  %2751 = xor i64 %128, -1
  %2752 = or i64 -4453191623715336645, %2751
  %2753 = xor i64 %2752, -1
  %2754 = and i64 %2753, -1
  %2755 = or i64 %2750, %2754
  %2756 = add i64 %25, -5050678355444024186
  %2757 = sub i64 0, %25
  %2758 = sub i64 -5050678355444024186, %2757
  %2759 = xor i64 0, %2756
  %2760 = xor i64 %2759, %2755
  %2761 = xor i64 %2760, %2745
  %2762 = xor i64 %2761, %2758
  %2763 = mul i64 %2744, %2762
  %2764 = trunc i64 %2763 to i32
  %2765 = and i64 %51, 4717226316870720229
  %2766 = xor i64 %51, -1
  %2767 = or i64 -4717226316870720230, %2766
  %2768 = xor i64 %2767, -1
  %2769 = and i64 %2768, -1
  %2770 = and i64 %69, 7496526472292671205
  %2771 = xor i64 %69, -1
  %2772 = xor i64 7496526472292671205, %2771
  %2773 = and i64 %2772, 7496526472292671205
  %2774 = xor i64 -8146561431700318253, %2769
  %2775 = xor i64 %2774, %2765
  %2776 = xor i64 %2775, %2773
  %2777 = xor i64 %2776, %2770
  %2778 = or i64 %27, 7002143664945716276
  %2779 = xor i64 %27, -1
  %2780 = and i64 %2779, -4906159364425002040
  %2781 = and i64 %27, 4906159364425002039
  %2782 = or i64 %2780, %2781
  %2783 = xor i64 -2682651565861728260, %2782
  %2784 = xor i64 %27, -1
  %2785 = or i64 -7002143664945716277, %2784
  %2786 = xor i64 %2785, -1
  %2787 = and i64 %2786, -1
  %2788 = or i64 %2783, %2787
  %2789 = and i64 %65, -4299732108901181760
  %2790 = xor i64 %65, -1
  %2791 = xor i64 -4299732108901181760, %2790
  %2792 = and i64 %2791, -4299732108901181760
  %2793 = xor i64 %2789, %2788
  %2794 = xor i64 %2793, 0
  %2795 = xor i64 %2794, %2778
  %2796 = xor i64 %2795, %2792
  %2797 = mul i64 %2777, %2796
  %2798 = trunc i64 %2797 to i32
  %2799 = sext i32 %148 to i64
  %2800 = add i64 %2799, 6037375306673324634
  %2801 = sub i64 0, %2799
  %2802 = add i64 -6037375306673324634, %2801
  %2803 = sub i64 0, %2802
  %2804 = and i64 %35, 4614446753813448534
  %2805 = xor i64 %35, -1
  %2806 = or i64 -4614446753813448535, %2805
  %2807 = xor i64 %2806, -1
  %2808 = and i64 %2807, -1
  %2809 = and i64 %13, 6042460460766502975
  %2810 = xor i64 %13, -1
  %2811 = xor i64 6042460460766502975, %2810
  %2812 = and i64 %2811, 6042460460766502975
  %2813 = xor i64 %2808, %2800
  %2814 = xor i64 %2813, %2804
  %2815 = xor i64 %2814, %2803
  %2816 = xor i64 %2815, 6950375525645499835
  %2817 = xor i64 %2816, %2809
  %2818 = xor i64 %2817, %2812
  %2819 = or i64 %39, 886719399242461702
  %2820 = xor i64 %39, -1
  %2821 = and i64 %2820, -5773135023080743745
  %2822 = and i64 %39, 5773135023080743744
  %2823 = or i64 %2821, %2822
  %2824 = xor i64 -6651826747703775559, %2823
  %2825 = xor i64 %39, -1
  %2826 = or i64 -886719399242461703, %2825
  %2827 = xor i64 %2826, -1
  %2828 = and i64 %2827, -1
  %2829 = or i64 %2824, %2828
  %2830 = and i64 %65, 659632261630530613
  %2831 = xor i64 %65, -1
  %2832 = or i64 -659632261630530614, %2831
  %2833 = xor i64 %2832, -1
  %2834 = and i64 %2833, -1
  %2835 = xor i64 %2830, %2829
  %2836 = xor i64 %2835, %2834
  %2837 = xor i64 %2836, 0
  %2838 = xor i64 %2837, %2819
  %2839 = mul i64 %2818, %2838
  %2840 = trunc i64 %2839 to i8
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 %2727, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %2687, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 %2764, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %2798, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 %2840, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %2841 = load i8**, i8*** %2687, align 8
  %2842 = load i8*, i8** %2841, align 8
  %2843 = bitcast i8* %2842 to void (i32*, i32*)*
  call void %2843(i32* %.loc20, i32* %.loc21)
  %.reload22 = load i32, i32* %.loc20, align 4
  %.reload23 = load i32, i32* %.loc21, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast24)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  %2844 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %2845 = load i32, i32* %2844, align 4
  %2846 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 13
  %2847 = load i32, i32* %2846, align 4
  %2848 = add i32 %2845, %2847
  store i32 %2848, i32* %dispatcher, align 4
  %2849 = load i8*, i8** %52, align 8
  %2850 = load i8, i8* %2849, align 1
  %2851 = xor i8 %2850, -2
  %2852 = and i8 %2851, %2850
  %2853 = or i64 %120, -7654797644583886923
  %2854 = and i64 -7654797644583886923, %120
  %2855 = xor i64 -7654797644583886923, %120
  %2856 = or i64 %2854, %2855
  %2857 = or i64 %120, 6699300247427787850
  %2858 = xor i64 %120, -1
  %2859 = and i64 %2858, -8756582862592200214
  %2860 = and i64 %120, 8756582862592200213
  %2861 = or i64 %2859, %2860
  %2862 = xor i64 -2701336984043545184, %2861
  %2863 = xor i64 %120, -1
  %2864 = or i64 -6699300247427787851, %2863
  %2865 = xor i64 %2864, -1
  %2866 = and i64 %2865, -1
  %2867 = or i64 %2862, %2866
  %2868 = xor i64 %2856, -4562872548117924971
  %2869 = xor i64 %2868, %2857
  %2870 = xor i64 %2869, %2853
  %2871 = xor i64 %2870, %2867
  %2872 = and i64 %7, 3063544905837282535
  %2873 = xor i64 %7, -1
  %2874 = xor i64 3063544905837282535, %2873
  %2875 = and i64 %2874, 3063544905837282535
  %2876 = add i64 %3, 73343915079488675
  %2877 = xor i64 73343915079488675, %3
  %2878 = and i64 73343915079488675, %3
  %2879 = mul i64 2, %2878
  %2880 = add i64 %2877, %2879
  %2881 = sext i32 %148 to i64
  %2882 = or i64 %2881, 5877130360297009545
  %2883 = xor i64 %2881, -1
  %2884 = and i64 %2883, 8998573626224777402
  %2885 = and i64 %2881, -8998573626224777403
  %2886 = or i64 %2884, %2885
  %2887 = xor i64 3273723192207288627, %2886
  %2888 = xor i64 %2881, -1
  %2889 = or i64 -5877130360297009546, %2888
  %2890 = xor i64 %2889, -1
  %2891 = and i64 %2890, -1
  %2892 = or i64 %2887, %2891
  %2893 = xor i64 %2882, %2880
  %2894 = xor i64 %2893, %2876
  %2895 = xor i64 %2894, 0
  %2896 = xor i64 %2895, %2875
  %2897 = xor i64 %2896, %2872
  %2898 = xor i64 %2897, %2892
  %2899 = mul i64 %2871, %2898
  %2900 = trunc i64 %2899 to i8
  %2901 = icmp eq i8 %2852, %2900
  %2902 = mul i8 %2850, %2850
  %2903 = add i8 %2902, %2850
  %2904 = mul i8 %2903, 3
  %2905 = srem i8 %2904, 2
  %2906 = icmp eq i8 %2905, 0
  %2907 = xor i1 %2901, true
  %2908 = and i1 %2907, false
  %2909 = and i1 %2901, true
  %2910 = or i1 %2908, %2909
  %2911 = xor i1 %2906, true
  %2912 = and i1 %2911, false
  %2913 = add i64 %45, -8363127404587857323
  %2914 = add i64 -1702302921763597125, %45
  %2915 = add i64 %2914, -6660824482824260198
  %2916 = add i64 %61, -4527754561110456095
  %2917 = and i64 -4527754561110456095, %61
  %2918 = or i64 -4527754561110456095, %61
  %2919 = add i64 %2917, %2918
  %2920 = add i64 %7, 8215216471337205084
  %2921 = sub i64 0, %7
  %2922 = add i64 -8215216471337205084, %2921
  %2923 = sub i64 0, %2922
  %2924 = xor i64 %2916, %2920
  %2925 = xor i64 %2924, -6602655190383589421
  %2926 = xor i64 %2925, %2923
  %2927 = xor i64 %2926, %2915
  %2928 = xor i64 %2927, %2919
  %2929 = xor i64 %2928, %2913
  %2930 = and i64 %132, -9140345085023407983
  %2931 = or i64 9140345085023407982, %132
  %2932 = sub i64 %2931, 9140345085023407982
  %2933 = and i64 %67, -8888722383367249546
  %2934 = xor i64 %67, -1
  %2935 = xor i64 -8888722383367249546, %2934
  %2936 = and i64 %2935, -8888722383367249546
  %2937 = xor i64 -307075895916042149, %2930
  %2938 = xor i64 %2937, %2936
  %2939 = xor i64 %2938, %2932
  %2940 = xor i64 %2939, %2933
  %2941 = mul i64 %2929, %2940
  %2942 = trunc i64 %2941 to i1
  %2943 = and i1 %2906, %2942
  %2944 = or i1 %2912, %2943
  %2945 = xor i1 %2910, %2944
  %2946 = or i64 %132, 8309012429721581756
  %2947 = and i64 8309012429721581756, %132
  %2948 = xor i64 8309012429721581756, %132
  %2949 = or i64 %2947, %2948
  %2950 = sext i32 %154 to i64
  %2951 = or i64 %2950, 1229288751330313231
  %2952 = and i64 1229288751330313231, %2950
  %2953 = xor i64 1229288751330313231, %2950
  %2954 = or i64 %2952, %2953
  %2955 = xor i64 %2954, %2946
  %2956 = xor i64 %2955, %2949
  %2957 = xor i64 %2956, %2951
  %2958 = xor i64 %2957, -3813648283674258163
  %2959 = add i64 %45, 1941721740936075318
  %2960 = add i64 4199648389948848951, %45
  %2961 = add i64 %2960, -2257926649012773633
  %2962 = or i64 %11, 5622879271031429661
  %2963 = xor i64 %11, -1
  %2964 = and i64 %2963, -3426627988420513407
  %2965 = and i64 %11, 3426627988420513406
  %2966 = or i64 %2964, %2965
  %2967 = xor i64 -7027215104089986148, %2966
  %2968 = xor i64 %11, -1
  %2969 = or i64 -5622879271031429662, %2968
  %2970 = xor i64 %2969, -1
  %2971 = and i64 %2970, -1
  %2972 = or i64 %2967, %2971
  %2973 = and i64 %33, -4589278217000999155
  %2974 = or i64 4589278217000999154, %33
  %2975 = sub i64 %2974, 4589278217000999154
  %2976 = xor i64 %2972, %2962
  %2977 = xor i64 %2976, %2961
  %2978 = xor i64 %2977, %2973
  %2979 = xor i64 %2978, %2975
  %2980 = xor i64 %2979, %2959
  %2981 = xor i64 %2980, -7028601610485464635
  %2982 = mul i64 %2958, %2981
  %2983 = trunc i64 %2982 to i1
  %2984 = xor i1 %2901, %2983
  %2985 = and i64 %5, 4815655323216552907
  %2986 = or i64 -4815655323216552908, %5
  %2987 = sub i64 %2986, -4815655323216552908
  %2988 = or i64 %55, 1146067568585369522
  %2989 = xor i64 %55, -1
  %2990 = and i64 1146067568585369522, %2989
  %2991 = add i64 %2990, %55
  %2992 = and i64 %19, 7003773205559431303
  %2993 = or i64 -7003773205559431304, %19
  %2994 = sub i64 %2993, -7003773205559431304
  %2995 = xor i64 %2992, %2988
  %2996 = xor i64 %2995, %2991
  %2997 = xor i64 %2996, %2987
  %2998 = xor i64 %2997, 1497199163201351879
  %2999 = xor i64 %2998, %2994
  %3000 = xor i64 %2999, %2985
  %3001 = sext i32 %154 to i64
  %3002 = or i64 %3001, 3391500041225362864
  %3003 = and i64 3391500041225362864, %3001
  %3004 = xor i64 3391500041225362864, %3001
  %3005 = or i64 %3003, %3004
  %3006 = sext i32 %154 to i64
  %3007 = add i64 %3006, -4808725521221133690
  %3008 = sub i64 0, %3006
  %3009 = add i64 4808725521221133690, %3008
  %3010 = sub i64 0, %3009
  %3011 = xor i64 %3007, %3002
  %3012 = xor i64 %3011, %3005
  %3013 = xor i64 %3012, %3010
  %3014 = xor i64 %3013, -5632971701936795401
  %3015 = mul i64 %3000, %3014
  %3016 = trunc i64 %3015 to i1
  %3017 = xor i1 %2906, %3016
  %3018 = or i1 %2984, %3017
  %3019 = and i64 %43, -1785393540467623308
  %3020 = or i64 1785393540467623307, %43
  %3021 = sub i64 %3020, 1785393540467623307
  %3022 = and i64 %45, -4334904724794229565
  %3023 = xor i64 %45, -1
  %3024 = or i64 4334904724794229564, %3023
  %3025 = xor i64 %3024, -1
  %3026 = and i64 %3025, -1
  %3027 = add i64 %31, 5846608896521270051
  %3028 = and i64 5846608896521270051, %31
  %3029 = or i64 5846608896521270051, %31
  %3030 = add i64 %3028, %3029
  %3031 = xor i64 %3030, %3022
  %3032 = xor i64 %3031, %3027
  %3033 = xor i64 %3032, %3026
  %3034 = xor i64 %3033, %3019
  %3035 = xor i64 %3034, %3021
  %3036 = xor i64 %3035, 555405254839950429
  %3037 = or i64 %130, 5038363700591906401
  %3038 = and i64 5038363700591906401, %130
  %3039 = xor i64 5038363700591906401, %130
  %3040 = or i64 %3038, %3039
  %3041 = or i64 %21, -5408038478256713692
  %3042 = xor i64 %21, -1
  %3043 = and i64 -5408038478256713692, %3042
  %3044 = add i64 %3043, %21
  %3045 = xor i64 %3037, %3040
  %3046 = xor i64 %3045, 3806978819398162421
  %3047 = xor i64 %3046, %3041
  %3048 = xor i64 %3047, %3044
  %3049 = mul i64 %3036, %3048
  %3050 = trunc i64 %3049 to i1
  %3051 = xor i1 %3018, %3050
  %3052 = and i1 %3051, true
  %3053 = or i1 %2945, %3052
  %3054 = select i1 %3053, i32 388314374, i32 388314409
  %3055 = xor i32 %3054, -1
  %3056 = and i32 %3055, -994605932
  %3057 = and i32 %3054, 994605931
  %3058 = or i32 %3056, %3057
  %3059 = xor i32 %3058, -994605893
  store i32 %3059, i32* %0, align 4
  %3060 = call i8** @bf4471601488556574720(i32* %0)
  %3061 = load i8*, i8** %3060, align 8
  indirectbr i8* %3061, [label %loopEnd, label %codeRepl19]

3062:                                             ; preds = %3062, %loopStart
  %3063 = sdiv i64 82, 33
  %3064 = mul i32 56, 4
  store i32 %3064, i32* %.reg2mem67, align 4
  %3065 = and i64 %37, 6112010270687165407
  %3066 = xor i64 %37, -1
  %3067 = or i64 -6112010270687165408, %3066
  %3068 = xor i64 %3067, -1
  %3069 = and i64 %3068, -1
  %3070 = add i64 %25, 7531101051150627796
  %3071 = and i64 7531101051150627796, %25
  %3072 = or i64 7531101051150627796, %25
  %3073 = add i64 %3071, %3072
  %3074 = and i64 %69, 2421162269848895274
  %3075 = xor i64 %69, -1
  %3076 = xor i64 2421162269848895274, %3075
  %3077 = and i64 %3076, 2421162269848895274
  %3078 = xor i64 3257849425783951599, %3070
  %3079 = xor i64 %3078, %3077
  %3080 = xor i64 %3079, %3065
  %3081 = xor i64 %3080, %3073
  %3082 = xor i64 %3081, %3074
  %3083 = xor i64 %3082, %3069
  %3084 = add i64 %61, 2302975115155012105
  %3085 = sub i64 0, %61
  %3086 = add i64 -2302975115155012105, %3085
  %3087 = sub i64 0, %3086
  %3088 = add i64 %128, 6174192460412182535
  %3089 = add i64 -7132467759904677627, %128
  %3090 = add i64 %3089, -5140083853392691454
  %3091 = add i64 %114, -8630102535761349293
  %3092 = sub i64 0, %114
  %3093 = sub i64 -8630102535761349293, %3092
  %3094 = xor i64 %3087, %3088
  %3095 = xor i64 %3094, %3091
  %3096 = xor i64 %3095, %3090
  %3097 = xor i64 %3096, %3093
  %3098 = xor i64 %3097, 4540975317809116696
  %3099 = xor i64 %3098, %3084
  %3100 = mul i64 %3083, %3099
  %3101 = mul i64 45, %3100
  %.reload66 = load i32, i32* %.reg2mem65, align 4
  %3102 = srem i32 %.reload66, 2
  %3103 = icmp eq i32 %3102, 0
  %.reload63 = load i32, i32* %.reg2mem58, align 4
  %3104 = mul i32 %.reload63, %.reload63
  %.reload62 = load i32, i32* %.reg2mem58, align 4
  %3105 = sub i32 %3104, -2111600198
  %3106 = add i32 %3105, %.reload62
  %3107 = add i32 %3106, -2111600198
  %3108 = mul i32 %3107, 3
  %3109 = srem i32 %3108, 2
  %3110 = icmp eq i32 %3109, 0
  %.reload61 = load i32, i32* %.reg2mem58, align 4
  %3111 = mul i32 %.reload61, %.reload61
  %.reload60 = load i32, i32* %.reg2mem58, align 4
  %3112 = add i32 %3111, %.reload60
  %3113 = srem i32 %3112, 2
  %3114 = icmp eq i32 %3113, 0
  %3115 = or i64 %29, 6184364470486646958
  %3116 = xor i64 %29, -1
  %3117 = and i64 %3116, -8862496246735377046
  %3118 = and i64 %29, 8862496246735377045
  %3119 = or i64 %3117, %3118
  %3120 = xor i64 -3399848118492222012, %3119
  %3121 = xor i64 %29, -1
  %3122 = or i64 -6184364470486646959, %3121
  %3123 = xor i64 %3122, -1
  %3124 = and i64 %3123, -1
  %3125 = or i64 %3120, %3124
  %3126 = add i64 %57, 3845395448228889192
  %3127 = add i64 -4316395733560045410, %57
  %3128 = sub i64 %3127, -8161791181788934602
  %3129 = xor i64 %3128, %3125
  %3130 = xor i64 %3129, -2521901173021395507
  %3131 = xor i64 %3130, %3126
  %3132 = xor i64 %3131, %3115
  %3133 = add i64 %124, 4302399368785535589
  %3134 = sub i64 0, %124
  %3135 = add i64 -4302399368785535589, %3134
  %3136 = sub i64 0, %3135
  %3137 = and i64 %43, 6724555017857483776
  %3138 = xor i64 %43, -1
  %3139 = or i64 -6724555017857483777, %3138
  %3140 = xor i64 %3139, -1
  %3141 = and i64 %3140, -1
  %3142 = xor i64 -5264868244240154875, %3133
  %3143 = xor i64 %3142, %3141
  %3144 = xor i64 %3143, %3137
  %3145 = xor i64 %3144, %3136
  %3146 = mul i64 %3132, %3145
  %3147 = trunc i64 %3146 to i1
  %3148 = xor i1 %3110, %3147
  %3149 = xor i1 %3114, true
  %3150 = or i1 %3148, %3149
  %3151 = xor i1 %3150, true
  %3152 = and i1 %3151, true
  store i1 %3152, i1* %.reg2mem69, align 1
  %3153 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 13
  %3154 = load i32, i32* %3153, align 4
  %3155 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 11
  %3156 = load i32, i32* %3155, align 4
  %3157 = add i32 %3154, %3156
  %3158 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  %3159 = load i32, i32* %3158, align 4
  %3160 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %3161 = load i32, i32* %3160, align 4
  %3162 = sub i32 %3159, 1345406073
  %3163 = sub i32 %3162, %3161
  %3164 = add i32 %3163, 1345406073
  %.reload71 = load i1, i1* %.reg2mem69, align 1
  %3165 = select i1 %.reload71, i32 %3157, i32 %3164
  store i32 %3165, i32* %dispatcher, align 4
  %3166 = load i8*, i8** %46, align 8
  %3167 = load i8, i8* %3166, align 1
  %3168 = mul i8 %3167, 2
  %3169 = mul i8 %3167, 2
  %3170 = and i64 %118, 2026411161772965925
  %3171 = or i64 -2026411161772965926, %118
  %3172 = sub i64 %3171, -2026411161772965926
  %3173 = and i64 %65, -2427293740879149097
  %3174 = or i64 2427293740879149096, %65
  %3175 = sub i64 %3174, 2427293740879149096
  %3176 = add i64 %19, 5588866809626964187
  %3177 = add i64 7629927650457512889, %19
  %3178 = sub i64 %3177, 2041060840830548702
  %3179 = xor i64 %3178, %3176
  %3180 = xor i64 %3179, %3172
  %3181 = xor i64 %3180, %3170
  %3182 = xor i64 %3181, -372684159578068723
  %3183 = xor i64 %3182, %3173
  %3184 = xor i64 %3183, %3175
  %3185 = and i64 %25, -5419323268996049843
  %3186 = xor i64 %25, -1
  %3187 = or i64 5419323268996049842, %3186
  %3188 = xor i64 %3187, -1
  %3189 = and i64 %3188, -1
  %3190 = and i64 %43, 947706985409154678
  %3191 = xor i64 %43, -1
  %3192 = or i64 -947706985409154679, %3191
  %3193 = xor i64 %3192, -1
  %3194 = and i64 %3193, -1
  %3195 = add i64 %126, -3376851761816494938
  %3196 = xor i64 -3376851761816494938, %126
  %3197 = and i64 -3376851761816494938, %126
  %3198 = mul i64 2, %3197
  %3199 = add i64 %3196, %3198
  %3200 = xor i64 %3195, %3190
  %3201 = xor i64 %3200, %3185
  %3202 = xor i64 %3201, %3194
  %3203 = xor i64 %3202, %3199
  %3204 = xor i64 %3203, %3189
  %3205 = xor i64 %3204, 7913916544648584074
  %3206 = mul i64 %3184, %3205
  %3207 = trunc i64 %3206 to i8
  %3208 = add i8 %3207, %3169
  %3209 = mul i8 %3168, %3208
  %3210 = srem i8 %3209, 4
  %3211 = icmp eq i8 %3210, 0
  %3212 = mul i8 %3167, %3167
  %3213 = add i8 %3212, %3167
  %3214 = srem i8 %3213, 2
  %3215 = or i64 %120, -69180348515870274
  %3216 = xor i64 %120, -1
  %3217 = and i64 -69180348515870274, %3216
  %3218 = add i64 %3217, %120
  %3219 = add i64 %122, -277806976642253536
  %3220 = xor i64 -277806976642253536, %122
  %3221 = and i64 -277806976642253536, %122
  %3222 = mul i64 2, %3221
  %3223 = add i64 %3220, %3222
  %3224 = add i64 %134, 5161614091375695716
  %3225 = and i64 5161614091375695716, %134
  %3226 = or i64 5161614091375695716, %134
  %3227 = add i64 %3225, %3226
  %3228 = xor i64 %3218, %3223
  %3229 = xor i64 %3228, 6632730550554513057
  %3230 = xor i64 %3229, %3215
  %3231 = xor i64 %3230, %3224
  %3232 = xor i64 %3231, %3227
  %3233 = xor i64 %3232, %3219
  %3234 = or i64 %53, -1915592006859106948
  %3235 = xor i64 %53, -1
  %3236 = and i64 %3235, 2138771522086403333
  %3237 = and i64 %53, -2138771522086403334
  %3238 = or i64 %3236, %3237
  %3239 = xor i64 -521289019536201607, %3238
  %3240 = xor i64 %53, -1
  %3241 = or i64 1915592006859106947, %3240
  %3242 = xor i64 %3241, -1
  %3243 = and i64 %3242, -1
  %3244 = or i64 %3239, %3243
  %3245 = or i64 %59, -4831502625617564544
  %3246 = xor i64 %59, -1
  %3247 = and i64 -4831502625617564544, %3246
  %3248 = add i64 %3247, %59
  %3249 = xor i64 %3248, %3245
  %3250 = xor i64 %3249, %3244
  %3251 = xor i64 %3250, 0
  %3252 = xor i64 %3251, %3234
  %3253 = mul i64 %3233, %3252
  %3254 = trunc i64 %3253 to i8
  %3255 = icmp eq i8 %3214, %3254
  %3256 = and i1 %3211, %3255
  %3257 = select i1 %3256, i32 388314404, i32 388314409
  %3258 = xor i32 %3257, 13
  store i32 %3258, i32* %0, align 4
  %3259 = call i8** @bf4471601488556574720(i32* %0)
  %3260 = load i8*, i8** %3259, align 8
  indirectbr i8* %3260, [label %loopEnd, label %3062]

3261:                                             ; preds = %3261, %loopStart
  %3262 = sdiv i32 118, 71
  %3263 = sdiv i64 65, 35
  %3264 = add i64 26, 136
  %3265 = mul i64 120, 52
  %3266 = and i64 %51, 5543900493020447192
  %3267 = xor i64 %51, -1
  %3268 = xor i64 5543900493020447192, %3267
  %3269 = and i64 %3268, 5543900493020447192
  %3270 = sext i32 %dispatcher1 to i64
  %3271 = and i64 %3270, 6747242844254869165
  %3272 = or i64 -6747242844254869166, %3270
  %3273 = sub i64 %3272, -6747242844254869166
  %3274 = xor i64 %3266, %3273
  %3275 = xor i64 %3274, %3271
  %3276 = xor i64 %3275, 2454686315715911955
  %3277 = xor i64 %3276, %3269
  %3278 = add i64 %29, -7310889271388001750
  %3279 = xor i64 -7310889271388001750, %29
  %3280 = and i64 -7310889271388001750, %29
  %3281 = mul i64 2, %3280
  %3282 = add i64 %3279, %3281
  %3283 = add i64 %53, -5256122745127854068
  %3284 = sub i64 0, %53
  %3285 = sub i64 -5256122745127854068, %3284
  %3286 = xor i64 %3278, %3283
  %3287 = xor i64 %3286, %3282
  %3288 = xor i64 %3287, %3285
  %3289 = xor i64 %3288, 8342749794276988593
  %3290 = mul i64 %3277, %3289
  %3291 = add i64 %43, 5527845203140436367
  %3292 = add i64 5490641093657024846, %43
  %3293 = add i64 %3292, 37204109483411521
  %3294 = add i64 %122, -8636919720607361304
  %3295 = xor i64 -8636919720607361304, %122
  %3296 = and i64 -8636919720607361304, %122
  %3297 = mul i64 2, %3296
  %3298 = add i64 %3295, %3297
  %3299 = xor i64 %3298, %3293
  %3300 = xor i64 %3299, %3294
  %3301 = xor i64 %3300, -8932978340783947111
  %3302 = xor i64 %3301, %3291
  %3303 = add i64 %51, 3971095908708207184
  %3304 = sub i64 0, %51
  %3305 = add i64 -3971095908708207184, %3304
  %3306 = sub i64 0, %3305
  %3307 = and i64 %49, -8270705362087453751
  %3308 = xor i64 %49, -1
  %3309 = or i64 8270705362087453750, %3308
  %3310 = xor i64 %3309, -1
  %3311 = and i64 %3310, -1
  %3312 = xor i64 %3303, %3307
  %3313 = xor i64 %3312, %3306
  %3314 = xor i64 %3313, %3311
  %3315 = xor i64 %3314, 7786018509408639632
  %3316 = mul i64 %3302, %3315
  %3317 = add i64 %3290, %3316
  %3318 = sdiv i64 37, 40
  %3319 = sub i64 42, 111
  %3320 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 26
  %3321 = load i32, i32* %3320, align 4
  %3322 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  %3323 = load i32, i32* %3322, align 4
  %3324 = sub i32 0, %3323
  %3325 = add i32 %3321, %3324
  store i32 %3325, i32* %dispatcher, align 4
  store i32 %3262, i32* %.reg2mem76, align 4
  %3326 = load i8*, i8** %66, align 8
  %3327 = load i8, i8* %3326, align 1
  %3328 = xor i8 %3327, -2
  %3329 = and i8 %3328, %3327
  %3330 = icmp eq i8 %3329, 0
  %3331 = mul i8 %3327, %3327
  %3332 = add i8 %3331, %3327
  %3333 = mul i8 %3332, 3
  %3334 = srem i8 %3333, 2
  %3335 = icmp eq i8 %3334, 0
  %3336 = or i1 %3330, %3335
  %3337 = select i1 %3336, i32 388314420, i32 388314409
  %3338 = or i64 %63, -5328912728744186999
  %3339 = and i64 -5328912728744186999, %63
  %3340 = xor i64 -5328912728744186999, %63
  %3341 = or i64 %3339, %3340
  %3342 = or i64 %41, 7695381171854042129
  %3343 = and i64 7695381171854042129, %41
  %3344 = xor i64 7695381171854042129, %41
  %3345 = or i64 %3343, %3344
  %3346 = and i64 %9, 6943435747399161405
  %3347 = xor i64 %9, -1
  %3348 = or i64 -6943435747399161406, %3347
  %3349 = xor i64 %3348, -1
  %3350 = and i64 %3349, -1
  %3351 = xor i64 %3338, 7326011771581291027
  %3352 = xor i64 %3351, %3346
  %3353 = xor i64 %3352, %3341
  %3354 = xor i64 %3353, %3342
  %3355 = xor i64 %3354, %3345
  %3356 = xor i64 %3355, %3350
  %3357 = add i64 %11, -9100677777707568304
  %3358 = add i64 -6884657159112446987, %11
  %3359 = add i64 %3358, -2216020618595121317
  %3360 = or i64 %118, -1021994474443860701
  %3361 = xor i64 %118, -1
  %3362 = and i64 -1021994474443860701, %3361
  %3363 = add i64 %3362, %118
  %3364 = xor i64 %3363, 969450434783675151
  %3365 = xor i64 %3364, %3360
  %3366 = xor i64 %3365, %3359
  %3367 = xor i64 %3366, %3357
  %3368 = mul i64 %3356, %3367
  %3369 = trunc i64 %3368 to i32
  %3370 = xor i32 %3337, %3369
  store i32 %3370, i32* %0, align 4
  %3371 = call i8** @bf4471601488556574720(i32* %0)
  %3372 = load i8*, i8** %3371, align 8
  indirectbr i8* %3372, [label %loopEnd, label %3261]

3373:                                             ; preds = %3373, %loopStart
  %3374 = sdiv i32 118, 71
  %3375 = sdiv i64 65, 35
  %3376 = add i64 119, 43
  %3377 = mul i64 120, 52
  %3378 = add i64 9, 42
  %3379 = sdiv i64 37, 40
  %3380 = sub i64 42, 111
  %3381 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 14
  %3382 = load i32, i32* %3381, align 4
  %3383 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 12
  %3384 = load i32, i32* %3383, align 4
  %3385 = add i32 %3382, %3384
  %3386 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %3387 = load i32, i32* %3386, align 4
  %3388 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %3389 = load i32, i32* %3388, align 4
  %3390 = sub i32 %3387, %3389
  %.reload70 = load i1, i1* %.reg2mem69, align 1
  %3391 = select i1 %.reload70, i32 %3385, i32 %3390
  store i32 %3391, i32* %dispatcher, align 4
  store i32 %3374, i32* %.reg2mem76, align 4
  %3392 = load i8*, i8** %26, align 8
  %3393 = load i8, i8* %3392, align 1
  %3394 = and i8 %3393, 1
  %3395 = icmp eq i8 %3394, 1
  %3396 = mul i8 %3393, %3393
  %3397 = xor i8 %3396, %3393
  %3398 = and i8 %3396, %3393
  %3399 = mul i8 2, %3398
  %3400 = add i8 %3397, %3399
  %3401 = mul i8 39, %3400
  %3402 = add i8 23, %3401
  %3403 = mul i8 -105, %3402
  %3404 = add i8 111, %3403
  %3405 = srem i8 %3404, 2
  %3406 = icmp eq i8 %3405, 0
  %3407 = or i1 %3395, %3406
  %3408 = select i1 %3407, i32 388314415, i32 388314409
  %3409 = xor i32 %3408, -1
  %3410 = and i64 %73, -2056202791713836168
  %3411 = or i64 2056202791713836167, %73
  %3412 = sub i64 %3411, 2056202791713836167
  %3413 = and i64 %35, -1096905679411401479
  %3414 = xor i64 %35, -1
  %3415 = or i64 1096905679411401478, %3414
  %3416 = xor i64 %3415, -1
  %3417 = and i64 %3416, -1
  %3418 = xor i64 -355141777879482327, %3413
  %3419 = xor i64 %3418, %3417
  %3420 = xor i64 %3419, %3412
  %3421 = xor i64 %3420, %3410
  %3422 = and i64 %124, -6231703454341447152
  %3423 = or i64 6231703454341447151, %124
  %3424 = sub i64 %3423, 6231703454341447151
  %3425 = and i64 %11, -4247458089704025849
  %3426 = xor i64 %11, -1
  %3427 = xor i64 -4247458089704025849, %3426
  %3428 = and i64 %3427, -4247458089704025849
  %3429 = and i64 %49, 7349964476820111891
  %3430 = xor i64 %49, -1
  %3431 = or i64 -7349964476820111892, %3430
  %3432 = xor i64 %3431, -1
  %3433 = and i64 %3432, -1
  %3434 = xor i64 -1812700162825967466, %3424
  %3435 = xor i64 %3434, %3425
  %3436 = xor i64 %3435, %3429
  %3437 = xor i64 %3436, %3433
  %3438 = xor i64 %3437, %3422
  %3439 = xor i64 %3438, %3428
  %3440 = mul i64 %3421, %3439
  %3441 = trunc i64 %3440 to i32
  %3442 = and i32 %3409, %3441
  %3443 = and i32 %3408, -7
  %3444 = or i32 %3442, %3443
  store i32 %3444, i32* %0, align 4
  %3445 = call i8** @bf4471601488556574720(i32* %0)
  %3446 = load i8*, i8** %3445, align 8
  indirectbr i8* %3446, [label %loopEnd, label %3373]

3447:                                             ; preds = %3447, %loopStart
  %.reload77 = load i32, i32* %.reg2mem76, align 4
  store i32 %.reload77, i32* %.reg2mem72, align 4
  %3448 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 24
  %3449 = load i32, i32* %3448, align 4
  %3450 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %3451 = load i32, i32* %3450, align 4
  %3452 = srem i32 %3449, %3451
  store i32 %3452, i32* %dispatcher, align 4
  %3453 = load i8*, i8** %40, align 8
  %3454 = load i8, i8* %3453, align 1
  %3455 = mul i8 %3454, 2
  %3456 = mul i8 %3454, 2
  %3457 = add i8 2, %3456
  %3458 = mul i8 %3455, %3457
  %3459 = srem i8 %3458, 4
  %3460 = and i64 %53, 104440806092039691
  %3461 = xor i64 %53, -1
  %3462 = or i64 -104440806092039692, %3461
  %3463 = xor i64 %3462, -1
  %3464 = and i64 %3463, -1
  %3465 = or i64 %61, 5165375842141546749
  %3466 = xor i64 %61, -1
  %3467 = and i64 5165375842141546749, %3466
  %3468 = add i64 %3467, %61
  %3469 = xor i64 %3468, %3460
  %3470 = xor i64 %3469, -2848100114337324015
  %3471 = xor i64 %3470, %3465
  %3472 = xor i64 %3471, %3464
  %3473 = and i64 %19, -4358613682165762094
  %3474 = xor i64 %19, -1
  %3475 = or i64 4358613682165762093, %3474
  %3476 = xor i64 %3475, -1
  %3477 = and i64 %3476, -1
  %3478 = sext i32 %154 to i64
  %3479 = or i64 %3478, -6648660495424494871
  %3480 = xor i64 %3478, -1
  %3481 = and i64 -6648660495424494871, %3480
  %3482 = add i64 %3481, %3478
  %3483 = or i64 %65, 8881952800260216095
  %3484 = xor i64 %65, -1
  %3485 = and i64 %3484, -4755222437577396202
  %3486 = and i64 %65, 4755222437577396201
  %3487 = or i64 %3485, %3486
  %3488 = xor i64 -4233094064654736119, %3487
  %3489 = xor i64 %65, -1
  %3490 = or i64 -8881952800260216096, %3489
  %3491 = xor i64 %3490, -1
  %3492 = and i64 %3491, -1
  %3493 = or i64 %3488, %3492
  %3494 = xor i64 %3477, %3482
  %3495 = xor i64 %3494, %3483
  %3496 = xor i64 %3495, %3473
  %3497 = xor i64 %3496, 0
  %3498 = xor i64 %3497, %3479
  %3499 = xor i64 %3498, %3493
  %3500 = mul i64 %3472, %3499
  %3501 = trunc i64 %3500 to i8
  %3502 = icmp eq i8 %3459, %3501
  %3503 = mul i8 %3454, %3454
  %3504 = sub i8 0, %3503
  %3505 = sub i8 0, %3454
  %3506 = add i8 %3504, %3505
  %3507 = and i64 %47, 5984997949803537277
  %3508 = xor i64 %47, -1
  %3509 = or i64 -5984997949803537278, %3508
  %3510 = xor i64 %3509, -1
  %3511 = and i64 %3510, -1
  %3512 = or i64 %45, -8244338285205549745
  %3513 = xor i64 %45, -1
  %3514 = and i64 -8244338285205549745, %3513
  %3515 = add i64 %3514, %45
  %3516 = xor i64 %3512, %3507
  %3517 = xor i64 %3516, %3511
  %3518 = xor i64 %3517, 186977318235251741
  %3519 = xor i64 %3518, %3515
  %3520 = or i64 %45, 9162196367316839662
  %3521 = xor i64 %45, -1
  %3522 = and i64 9162196367316839662, %3521
  %3523 = add i64 %3522, %45
  %3524 = and i64 %118, -254521125514292184
  %3525 = or i64 254521125514292183, %118
  %3526 = sub i64 %3525, 254521125514292183
  %3527 = or i64 %63, 8314020165742759308
  %3528 = and i64 8314020165742759308, %63
  %3529 = xor i64 8314020165742759308, %63
  %3530 = or i64 %3528, %3529
  %3531 = xor i64 %3523, %3524
  %3532 = xor i64 %3531, %3520
  %3533 = xor i64 %3532, %3526
  %3534 = xor i64 %3533, %3530
  %3535 = xor i64 %3534, %3527
  %3536 = xor i64 %3535, 0
  %3537 = mul i64 %3519, %3536
  %3538 = trunc i64 %3537 to i8
  %3539 = sub i8 %3538, %3506
  %3540 = and i64 %27, -3107806116043431237
  %3541 = xor i64 %27, -1
  %3542 = xor i64 -3107806116043431237, %3541
  %3543 = and i64 %3542, -3107806116043431237
  %3544 = or i64 %25, -4796224325013917017
  %3545 = xor i64 %25, -1
  %3546 = and i64 %3545, -8270582675563304135
  %3547 = and i64 %25, 8270582675563304134
  %3548 = or i64 %3546, %3547
  %3549 = xor i64 3479206097367701918, %3548
  %3550 = xor i64 %25, -1
  %3551 = or i64 4796224325013917016, %3550
  %3552 = xor i64 %3551, -1
  %3553 = and i64 %3552, -1
  %3554 = or i64 %3549, %3553
  %3555 = xor i64 %3543, 3660193308641813091
  %3556 = xor i64 %3555, %3554
  %3557 = xor i64 %3556, %3540
  %3558 = xor i64 %3557, %3544
  %3559 = or i64 %55, 3714301450007762768
  %3560 = xor i64 %55, -1
  %3561 = and i64 3714301450007762768, %3560
  %3562 = add i64 %3561, %55
  %3563 = add i64 %31, -6767126724891305951
  %3564 = sub i64 0, %31
  %3565 = sub i64 -6767126724891305951, %3564
  %3566 = add i64 %116, -1449641780689313349
  %3567 = sub i64 0, %116
  %3568 = sub i64 -1449641780689313349, %3567
  %3569 = xor i64 %3563, %3566
  %3570 = xor i64 %3569, 6171373560663924374
  %3571 = xor i64 %3570, %3568
  %3572 = xor i64 %3571, %3562
  %3573 = xor i64 %3572, %3565
  %3574 = xor i64 %3573, %3559
  %3575 = mul i64 %3558, %3574
  %3576 = trunc i64 %3575 to i8
  %3577 = srem i8 %3539, %3576
  %3578 = icmp eq i8 %3577, 0
  %3579 = or i1 %3502, %3578
  %3580 = select i1 %3579, i32 388314418, i32 388314409
  %3581 = xor i32 %3580, 27
  store i32 %3581, i32* %0, align 4
  %3582 = call i8** @bf4471601488556574720(i32* %0)
  %3583 = load i8*, i8** %3582, align 8
  indirectbr i8* %3583, [label %loopEnd, label %3447]

codeRepl26:                                       ; preds = %codeRepl26, %loopStart
  store i64 5221456193252566390, i64* %113, align 8
  %3584 = alloca i8**, align 8
  %3585 = add i64 %57, -6338865294535064500
  %3586 = add i64 7852696255256894108, %57
  %3587 = add i64 %3586, 4255182523917593008
  %3588 = add i64 %59, 2058797318864252208
  %3589 = add i64 -1190593539659838765, %59
  %3590 = sub i64 %3589, -3249390858524090973
  %3591 = or i64 %15, -3557924311678067719
  %3592 = and i64 -3557924311678067719, %15
  %3593 = xor i64 -3557924311678067719, %15
  %3594 = or i64 %3592, %3593
  %3595 = xor i64 %3587, %3588
  %3596 = xor i64 %3595, %3585
  %3597 = xor i64 %3596, %3591
  %3598 = xor i64 %3597, %3590
  %3599 = xor i64 %3598, %3594
  %3600 = xor i64 %3599, 3128878267196654091
  %3601 = or i64 %17, 1128444827806698486
  %3602 = and i64 1128444827806698486, %17
  %3603 = xor i64 1128444827806698486, %17
  %3604 = or i64 %3602, %3603
  %3605 = or i64 %29, 6500259599291866120
  %3606 = xor i64 %29, -1
  %3607 = and i64 6500259599291866120, %3606
  %3608 = add i64 %3607, %29
  %3609 = xor i64 %3601, %3604
  %3610 = xor i64 %3609, 0
  %3611 = xor i64 %3610, %3605
  %3612 = xor i64 %3611, %3608
  %3613 = mul i64 %3600, %3612
  %3614 = trunc i64 %3613 to i32
  %3615 = and i64 %11, -7753644378244455019
  %3616 = xor i64 %11, -1
  %3617 = xor i64 -7753644378244455019, %3616
  %3618 = and i64 %3617, -7753644378244455019
  %3619 = add i64 %55, 7967397514786245370
  %3620 = sub i64 0, %55
  %3621 = sub i64 7967397514786245370, %3620
  %3622 = sext i32 %dispatcher1 to i64
  %3623 = or i64 %3622, 9187502071576620271
  %3624 = xor i64 %3622, -1
  %3625 = and i64 9187502071576620271, %3624
  %3626 = add i64 %3625, %3622
  %3627 = xor i64 %3623, -1307786146891068951
  %3628 = xor i64 %3627, %3615
  %3629 = xor i64 %3628, %3621
  %3630 = xor i64 %3629, %3618
  %3631 = xor i64 %3630, %3626
  %3632 = xor i64 %3631, %3619
  %3633 = add i64 %39, 1498013754057921473
  %3634 = sub i64 0, %39
  %3635 = sub i64 1498013754057921473, %3634
  %3636 = add i64 %63, 7811084104608610167
  %3637 = add i64 -8622989119429515902, %63
  %3638 = sub i64 %3637, 2012670849671425547
  %3639 = and i64 %67, -3388518964319351784
  %3640 = xor i64 %67, -1
  %3641 = or i64 3388518964319351783, %3640
  %3642 = xor i64 %3641, -1
  %3643 = and i64 %3642, -1
  %3644 = xor i64 %3635, %3636
  %3645 = xor i64 %3644, 0
  %3646 = xor i64 %3645, %3633
  %3647 = xor i64 %3646, %3638
  %3648 = xor i64 %3647, %3643
  %3649 = xor i64 %3648, %3639
  %3650 = mul i64 %3632, %3649
  %3651 = trunc i64 %3650 to i32
  %3652 = and i64 %31, 7258539589205472872
  %3653 = xor i64 %31, -1
  %3654 = or i64 -7258539589205472873, %3653
  %3655 = xor i64 %3654, -1
  %3656 = and i64 %3655, -1
  %3657 = or i64 %120, 5390629029237256528
  %3658 = xor i64 %120, -1
  %3659 = and i64 %3658, 2756766504701882767
  %3660 = and i64 %120, -2756766504701882768
  %3661 = or i64 %3659, %3660
  %3662 = xor i64 7822009339302576351, %3661
  %3663 = xor i64 %120, -1
  %3664 = or i64 -5390629029237256529, %3663
  %3665 = xor i64 %3664, -1
  %3666 = and i64 %3665, -1
  %3667 = or i64 %3662, %3666
  %3668 = or i64 %25, -1432463917997353931
  %3669 = xor i64 %25, -1
  %3670 = and i64 -1432463917997353931, %3669
  %3671 = add i64 %3670, %25
  %3672 = xor i64 %3652, %3667
  %3673 = xor i64 %3672, -6172847060455721697
  %3674 = xor i64 %3673, %3668
  %3675 = xor i64 %3674, %3671
  %3676 = xor i64 %3675, %3656
  %3677 = xor i64 %3676, %3657
  %3678 = add i64 %128, -5791238933300503720
  %3679 = sub i64 0, %128
  %3680 = add i64 5791238933300503720, %3679
  %3681 = sub i64 0, %3680
  %3682 = add i64 %41, -8859006170185440637
  %3683 = add i64 1686666414659352600, %41
  %3684 = add i64 %3683, 7901071488864758379
  %3685 = add i64 %118, -8378085540949000425
  %3686 = sub i64 0, %118
  %3687 = sub i64 -8378085540949000425, %3686
  %3688 = xor i64 0, %3682
  %3689 = xor i64 %3688, %3681
  %3690 = xor i64 %3689, %3684
  %3691 = xor i64 %3690, %3685
  %3692 = xor i64 %3691, %3687
  %3693 = xor i64 %3692, %3678
  %3694 = mul i64 %3677, %3693
  %3695 = trunc i64 %3694 to i32
  %3696 = or i64 %5, 3465673110963879701
  %3697 = xor i64 %5, -1
  %3698 = and i64 3465673110963879701, %3697
  %3699 = add i64 %3698, %5
  %3700 = add i64 %39, 7053852061803154774
  %3701 = xor i64 7053852061803154774, %39
  %3702 = and i64 7053852061803154774, %39
  %3703 = mul i64 2, %3702
  %3704 = add i64 %3701, %3703
  %3705 = and i64 %55, -6639645899822934545
  %3706 = xor i64 %55, -1
  %3707 = xor i64 -6639645899822934545, %3706
  %3708 = and i64 %3707, -6639645899822934545
  %3709 = xor i64 %3699, %3708
  %3710 = xor i64 %3709, %3704
  %3711 = xor i64 %3710, %3696
  %3712 = xor i64 %3711, %3705
  %3713 = xor i64 %3712, %3700
  %3714 = xor i64 %3713, 8620110782170719195
  %3715 = add i64 %53, 5251388313208584498
  %3716 = and i64 5251388313208584498, %53
  %3717 = or i64 5251388313208584498, %53
  %3718 = add i64 %3716, %3717
  %3719 = and i64 %47, 1096796748787521247
  %3720 = xor i64 %47, -1
  %3721 = xor i64 1096796748787521247, %3720
  %3722 = and i64 %3721, 1096796748787521247
  %3723 = add i64 %45, -6311085041269335806
  %3724 = add i64 -2734292290577319474, %45
  %3725 = add i64 %3724, -3576792750692016332
  %3726 = xor i64 %3723, %3719
  %3727 = xor i64 %3726, 0
  %3728 = xor i64 %3727, %3725
  %3729 = xor i64 %3728, %3718
  %3730 = xor i64 %3729, %3722
  %3731 = xor i64 %3730, %3715
  %3732 = mul i64 %3714, %3731
  %3733 = trunc i64 %3732 to i1
  %3734 = and i64 %73, -610587869394964527
  %3735 = or i64 610587869394964526, %73
  %3736 = sub i64 %3735, 610587869394964526
  %3737 = sext i32 %154 to i64
  %3738 = or i64 %3737, 3260143791927245007
  %3739 = xor i64 %3737, -1
  %3740 = and i64 3260143791927245007, %3739
  %3741 = add i64 %3740, %3737
  %3742 = or i64 %55, 99781852563090866
  %3743 = xor i64 %55, -1
  %3744 = and i64 %3743, -6269028427327240892
  %3745 = and i64 %55, 6269028427327240891
  %3746 = or i64 %3744, %3745
  %3747 = xor i64 -6224659900428441354, %3746
  %3748 = xor i64 %55, -1
  %3749 = or i64 -99781852563090867, %3748
  %3750 = xor i64 %3749, -1
  %3751 = and i64 %3750, -1
  %3752 = or i64 %3747, %3751
  %3753 = xor i64 %3741, 4211210063784596973
  %3754 = xor i64 %3753, %3752
  %3755 = xor i64 %3754, %3736
  %3756 = xor i64 %3755, %3738
  %3757 = xor i64 %3756, %3734
  %3758 = xor i64 %3757, %3742
  %3759 = and i64 %33, -7379789130492229280
  %3760 = xor i64 %33, -1
  %3761 = or i64 7379789130492229279, %3760
  %3762 = xor i64 %3761, -1
  %3763 = and i64 %3762, -1
  %3764 = or i64 %73, 1274709839523763725
  %3765 = and i64 1274709839523763725, %73
  %3766 = xor i64 1274709839523763725, %73
  %3767 = or i64 %3765, %3766
  %3768 = and i64 %25, -4155719228319931042
  %3769 = xor i64 %25, -1
  %3770 = or i64 4155719228319931041, %3769
  %3771 = xor i64 %3770, -1
  %3772 = and i64 %3771, -1
  %3773 = xor i64 %3767, %3772
  %3774 = xor i64 %3773, %3764
  %3775 = xor i64 %3774, 0
  %3776 = xor i64 %3775, %3763
  %3777 = xor i64 %3776, %3768
  %3778 = xor i64 %3777, %3759
  %3779 = mul i64 %3758, %3778
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %3584, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 %3614, i1* null, i1* null, i32 %3651, i32 %3695, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 %3733, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 %3779, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %3780 = load i8**, i8*** %3584, align 8
  %3781 = load i8*, i8** %3780, align 8
  %3782 = bitcast i8* %3781 to void ()*
  call void %3782()
  %3783 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %3784 = load i32, i32* %3783, align 4
  %3785 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 13
  %3786 = load i32, i32* %3785, align 4
  %3787 = or i64 %13, 4916444476444439230
  %3788 = and i64 4916444476444439230, %13
  %3789 = xor i64 4916444476444439230, %13
  %3790 = or i64 %3788, %3789
  %3791 = and i64 %116, -5364596136992608264
  %3792 = or i64 5364596136992608263, %116
  %3793 = sub i64 %3792, 5364596136992608263
  %3794 = xor i64 -7204166215541546677, %3790
  %3795 = xor i64 %3794, %3787
  %3796 = xor i64 %3795, %3793
  %3797 = xor i64 %3796, %3791
  %3798 = add i64 %9, 8192939391575922543
  %3799 = add i64 5116607610046144173, %9
  %3800 = add i64 %3799, 3076331781529778370
  %3801 = or i64 %130, -1507458061855609740
  %3802 = and i64 -1507458061855609740, %130
  %3803 = xor i64 -1507458061855609740, %130
  %3804 = or i64 %3802, %3803
  %3805 = xor i64 %3798, %3801
  %3806 = xor i64 %3805, 4889047303914417122
  %3807 = xor i64 %3806, %3804
  %3808 = xor i64 %3807, %3800
  %3809 = mul i64 %3797, %3808
  %3810 = trunc i64 %3809 to i32
  %3811 = sub i32 %3784, %3810
  %3812 = add i32 %3811, %3786
  %3813 = add i32 %3812, -383337162
  store i32 %3813, i32* %dispatcher, align 4
  %.reload68 = load i32, i32* %.reg2mem67, align 4
  %.reload73 = load i32, i32* %.reg2mem72, align 4
  %3814 = load i8*, i8** %42, align 8
  %3815 = load i8, i8* %3814, align 1
  %3816 = xor i8 %3815, -2
  %3817 = and i8 %3816, %3815
  %3818 = icmp eq i8 %3817, 0
  %3819 = mul i8 %3815, %3815
  %3820 = add i8 %3819, %3815
  %3821 = mul i8 %3820, 3
  %3822 = srem i8 %3821, 2
  %3823 = icmp eq i8 %3822, 0
  %3824 = or i1 %3818, %3823
  %3825 = add i64 %35, 5330174355306953286
  %3826 = sub i64 0, %35
  %3827 = add i64 -5330174355306953286, %3826
  %3828 = sub i64 0, %3827
  %3829 = and i64 %65, 107455650159584646
  %3830 = or i64 -107455650159584647, %65
  %3831 = sub i64 %3830, -107455650159584647
  %3832 = xor i64 %3831, -4989612931634766179
  %3833 = xor i64 %3832, %3825
  %3834 = xor i64 %3833, %3829
  %3835 = xor i64 %3834, %3828
  %3836 = or i64 %27, 1736763385897847679
  %3837 = xor i64 %27, -1
  %3838 = and i64 1736763385897847679, %3837
  %3839 = add i64 %3838, %27
  %3840 = and i64 %45, 8979284734894287294
  %3841 = xor i64 %45, -1
  %3842 = or i64 -8979284734894287295, %3841
  %3843 = xor i64 %3842, -1
  %3844 = and i64 %3843, -1
  %3845 = xor i64 %3839, %3836
  %3846 = xor i64 %3845, %3840
  %3847 = xor i64 %3846, %3844
  %3848 = xor i64 %3847, 3058076715088414572
  %3849 = mul i64 %3835, %3848
  %3850 = trunc i64 %3849 to i32
  %3851 = select i1 %3824, i32 %3850, i32 388314409
  %3852 = or i32 %3851, 21
  %3853 = and i32 %3851, 21
  %3854 = sub i32 %3852, %3853
  store i32 %3854, i32* %0, align 4
  %3855 = call i8** @bf4471601488556574720(i32* %0)
  %3856 = load i8*, i8** %3855, align 8
  indirectbr i8* %3856, [label %loopEnd, label %codeRepl26]

3857:                                             ; preds = %3857, %loopStart
  %3858 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 26
  %3859 = load i32, i32* %3858, align 4
  %3860 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %3861 = load i32, i32* %3860, align 4
  %3862 = srem i32 %3859, %3861
  store i32 %3862, i32* %dispatcher, align 4
  %3863 = load i8*, i8** %54, align 8
  %3864 = load i8, i8* %3863, align 1
  %3865 = and i8 %3864, 1
  %3866 = icmp eq i8 %3865, 1
  %3867 = mul i8 %3864, %3864
  %3868 = add i8 %3867, %3864
  %3869 = srem i8 %3868, 2
  %3870 = icmp eq i8 %3869, 0
  %3871 = xor i1 %3866, true
  %3872 = and i1 %3871, false
  %3873 = and i1 %3866, true
  %3874 = or i1 %3872, %3873
  %3875 = add i64 %120, -912497684656649583
  %3876 = add i64 -9110422693825755026, %120
  %3877 = add i64 %3876, 8197925009169105443
  %3878 = add i64 %126, 2452126802392401796
  %3879 = add i64 -1067239803417109094, %126
  %3880 = sub i64 %3879, -3519366605809510890
  %3881 = xor i64 -4416617910261688293, %3880
  %3882 = xor i64 %3881, %3875
  %3883 = xor i64 %3882, %3878
  %3884 = xor i64 %3883, %3877
  %3885 = and i64 %65, -7169721176976042225
  %3886 = xor i64 %65, -1
  %3887 = or i64 7169721176976042224, %3886
  %3888 = xor i64 %3887, -1
  %3889 = and i64 %3888, -1
  %3890 = sext i32 %148 to i64
  %3891 = or i64 %3890, 5280945437644379243
  %3892 = xor i64 %3890, -1
  %3893 = and i64 5280945437644379243, %3892
  %3894 = add i64 %3893, %3890
  %3895 = xor i64 %3889, %3891
  %3896 = xor i64 %3895, %3885
  %3897 = xor i64 %3896, %3894
  %3898 = xor i64 %3897, -72251376074309101
  %3899 = mul i64 %3884, %3898
  %3900 = trunc i64 %3899 to i1
  %3901 = xor i1 %3870, %3900
  %3902 = and i1 %3901, false
  %3903 = and i1 %3870, true
  %3904 = or i1 %3902, %3903
  %3905 = xor i1 %3874, %3904
  %3906 = xor i1 %3866, true
  %3907 = xor i1 %3870, true
  %3908 = or i1 %3906, %3907
  %3909 = add i64 %73, 7476275471711436285
  %3910 = sub i64 0, %73
  %3911 = add i64 -7476275471711436285, %3910
  %3912 = sub i64 0, %3911
  %3913 = add i64 %134, 8194561523155311996
  %3914 = sub i64 0, %134
  %3915 = sub i64 8194561523155311996, %3914
  %3916 = and i64 %63, -4524220760577935310
  %3917 = xor i64 %63, -1
  %3918 = xor i64 -4524220760577935310, %3917
  %3919 = and i64 %3918, -4524220760577935310
  %3920 = xor i64 %3913, -9054510083709307337
  %3921 = xor i64 %3920, %3912
  %3922 = xor i64 %3921, %3909
  %3923 = xor i64 %3922, %3919
  %3924 = xor i64 %3923, %3916
  %3925 = xor i64 %3924, %3915
  %3926 = and i64 %69, 5330406635720786592
  %3927 = or i64 -5330406635720786593, %69
  %3928 = sub i64 %3927, -5330406635720786593
  %3929 = and i64 %21, -7410463385977210771
  %3930 = or i64 7410463385977210770, %21
  %3931 = sub i64 %3930, 7410463385977210770
  %3932 = xor i64 %3926, %3929
  %3933 = xor i64 %3932, 3678745731302629255
  %3934 = xor i64 %3933, %3928
  %3935 = xor i64 %3934, %3931
  %3936 = mul i64 %3925, %3935
  %3937 = trunc i64 %3936 to i1
  %3938 = xor i1 %3908, %3937
  %3939 = and i1 %3938, true
  %3940 = or i1 %3905, %3939
  %3941 = and i64 %73, -2533336581567144306
  %3942 = xor i64 %73, -1
  %3943 = xor i64 -2533336581567144306, %3942
  %3944 = and i64 %3943, -2533336581567144306
  %3945 = and i64 %73, -598329217108219608
  %3946 = or i64 598329217108219607, %73
  %3947 = sub i64 %3946, 598329217108219607
  %3948 = and i64 %9, -3170129064036629759
  %3949 = or i64 3170129064036629758, %9
  %3950 = sub i64 %3949, 3170129064036629758
  %3951 = xor i64 %3945, %3941
  %3952 = xor i64 %3951, %3944
  %3953 = xor i64 %3952, %3947
  %3954 = xor i64 %3953, 81046020803519565
  %3955 = xor i64 %3954, %3948
  %3956 = xor i64 %3955, %3950
  %3957 = add i64 %11, 4763962624981544729
  %3958 = add i64 -8771845818677697531, %11
  %3959 = sub i64 %3958, 4910935630050309356
  %3960 = add i64 %37, -8235267076541259121
  %3961 = add i64 -6073194119829190352, %37
  %3962 = sub i64 %3961, 2162072956712068769
  %3963 = or i64 %63, 7562007375609424094
  %3964 = xor i64 %63, -1
  %3965 = and i64 7562007375609424094, %3964
  %3966 = add i64 %3965, %63
  %3967 = xor i64 %3966, %3957
  %3968 = xor i64 %3967, %3962
  %3969 = xor i64 %3968, -2806554298775200937
  %3970 = xor i64 %3969, %3960
  %3971 = xor i64 %3970, %3959
  %3972 = xor i64 %3971, %3963
  %3973 = mul i64 %3956, %3972
  %3974 = trunc i64 %3973 to i32
  %3975 = select i1 %3940, i32 %3974, i32 388314409
  %3976 = xor i32 %3975, 2
  store i32 %3976, i32* %0, align 4
  %3977 = call i8** @bf4471601488556574720(i32* %0)
  %3978 = load i8*, i8** %3977, align 8
  indirectbr i8* %3978, [label %loopEnd, label %3857]

3979:                                             ; preds = %3979, %loopStart
  %.reload2 = load i8*, i8** %.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %.reload2) #13
  %.reload55 = load i32, i32* %.reg2mem54, align 4
  %3980 = or i64 %49, -3401103588851418768
  %3981 = and i64 -3401103588851418768, %49
  %3982 = xor i64 -3401103588851418768, %49
  %3983 = or i64 %3981, %3982
  %3984 = add i64 %128, 1729343979249997394
  %3985 = xor i64 1729343979249997394, %128
  %3986 = and i64 1729343979249997394, %128
  %3987 = mul i64 2, %3986
  %3988 = add i64 %3985, %3987
  %3989 = xor i64 %3980, %3983
  %3990 = xor i64 %3989, 4085138434661457425
  %3991 = xor i64 %3990, %3988
  %3992 = xor i64 %3991, %3984
  %3993 = and i64 %13, 2188973353787497504
  %3994 = or i64 -2188973353787497505, %13
  %3995 = sub i64 %3994, -2188973353787497505
  %3996 = add i64 %21, 5041748600721911562
  %3997 = xor i64 5041748600721911562, %21
  %3998 = and i64 5041748600721911562, %21
  %3999 = mul i64 2, %3998
  %4000 = add i64 %3997, %3999
  %4001 = add i64 %13, -8547290218301725811
  %4002 = and i64 -8547290218301725811, %13
  %4003 = or i64 -8547290218301725811, %13
  %4004 = add i64 %4002, %4003
  %4005 = xor i64 %4004, %3993
  %4006 = xor i64 %4005, 7088771425263691234
  %4007 = xor i64 %4006, %3995
  %4008 = xor i64 %4007, %3996
  %4009 = xor i64 %4008, %4001
  %4010 = xor i64 %4009, %4000
  %4011 = mul i64 %3992, %4010
  %4012 = trunc i64 %4011 to i32
  %4013 = srem i32 %.reload55, %4012
  %4014 = icmp eq i32 %4013, 0
  %4015 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 24
  %4016 = load i32, i32* %4015, align 4
  %4017 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %4018 = load i32, i32* %4017, align 4
  %4019 = sub i32 %4016, %4018
  %4020 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 28
  %4021 = load i32, i32* %4020, align 4
  %4022 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %4023 = load i32, i32* %4022, align 4
  %4024 = sub i32 %4021, 1115588402
  %4025 = sub i32 %4024, %4023
  %4026 = add i32 %4025, 1115588402
  %4027 = select i1 %4014, i32 %4019, i32 %4026
  store i32 %4027, i32* %dispatcher, align 4
  %4028 = load i8*, i8** %60, align 8
  %4029 = load i8, i8* %4028, align 1
  %4030 = and i8 %4029, 1
  %4031 = icmp eq i8 %4030, 0
  %4032 = mul i8 %4029, %4029
  %4033 = add i8 %4032, %4029
  %4034 = mul i8 %4033, 3
  %4035 = srem i8 %4034, 2
  %4036 = icmp eq i8 %4035, 0
  %4037 = xor i1 %4031, true
  %4038 = and i1 %4037, false
  %4039 = and i1 %4031, true
  %4040 = or i1 %4038, %4039
  %4041 = xor i1 %4036, true
  %4042 = and i1 %4041, false
  %4043 = and i1 %4036, true
  %4044 = or i1 %4042, %4043
  %4045 = xor i1 %4040, %4044
  %4046 = xor i1 %4031, true
  %4047 = xor i1 %4036, true
  %4048 = or i1 %4046, %4047
  %4049 = add i64 %43, -5283760308022850049
  %4050 = sub i64 0, %43
  %4051 = sub i64 -5283760308022850049, %4050
  %4052 = and i64 %65, 8994551179757638818
  %4053 = xor i64 %65, -1
  %4054 = xor i64 8994551179757638818, %4053
  %4055 = and i64 %4054, 8994551179757638818
  %4056 = xor i64 %4052, -4840127012901775311
  %4057 = xor i64 %4056, %4049
  %4058 = xor i64 %4057, %4055
  %4059 = xor i64 %4058, %4051
  %4060 = sext i32 %148 to i64
  %4061 = or i64 %4060, 6043411794432717883
  %4062 = xor i64 %4060, -1
  %4063 = and i64 %4062, 2648458087256003071
  %4064 = and i64 %4060, -2648458087256003072
  %4065 = or i64 %4063, %4064
  %4066 = xor i64 8583779082787284420, %4065
  %4067 = xor i64 %4060, -1
  %4068 = or i64 -6043411794432717884, %4067
  %4069 = xor i64 %4068, -1
  %4070 = and i64 %4069, -1
  %4071 = or i64 %4066, %4070
  %4072 = and i64 %134, -2160768377177664633
  %4073 = xor i64 %134, -1
  %4074 = or i64 2160768377177664632, %4073
  %4075 = xor i64 %4074, -1
  %4076 = and i64 %4075, -1
  %4077 = and i64 %29, 3508472664815799176
  %4078 = or i64 -3508472664815799177, %29
  %4079 = sub i64 %4078, -3508472664815799177
  %4080 = xor i64 %4076, 8616277753676218577
  %4081 = xor i64 %4080, %4079
  %4082 = xor i64 %4081, %4071
  %4083 = xor i64 %4082, %4061
  %4084 = xor i64 %4083, %4077
  %4085 = xor i64 %4084, %4072
  %4086 = mul i64 %4059, %4085
  %4087 = trunc i64 %4086 to i1
  %4088 = xor i1 %4048, %4087
  %4089 = and i1 %4088, true
  %4090 = or i1 %4045, %4089
  %4091 = select i1 %4090, i32 388314404, i32 388314409
  %4092 = xor i32 %4091, -1
  %4093 = and i32 %4092, 13
  %4094 = or i64 %3, -4700990245598317030
  %4095 = xor i64 %3, -1
  %4096 = and i64 %4095, -2595569759908360857
  %4097 = and i64 %3, 2595569759908360856
  %4098 = or i64 %4096, %4097
  %4099 = xor i64 7293603001554680701, %4098
  %4100 = xor i64 %3, -1
  %4101 = or i64 4700990245598317029, %4100
  %4102 = xor i64 %4101, -1
  %4103 = and i64 %4102, -1
  %4104 = or i64 %4099, %4103
  %4105 = or i64 %53, 4596082890869607454
  %4106 = and i64 4596082890869607454, %53
  %4107 = xor i64 4596082890869607454, %53
  %4108 = or i64 %4106, %4107
  %4109 = xor i64 -1552003758875647223, %4105
  %4110 = xor i64 %4109, %4104
  %4111 = xor i64 %4110, %4094
  %4112 = xor i64 %4111, %4108
  %4113 = add i64 %1, 1781871217478578286
  %4114 = sub i64 0, %1
  %4115 = add i64 -1781871217478578286, %4114
  %4116 = sub i64 0, %4115
  %4117 = or i64 %41, 4672941876196748079
  %4118 = and i64 4672941876196748079, %41
  %4119 = xor i64 4672941876196748079, %41
  %4120 = or i64 %4118, %4119
  %4121 = or i64 %9, 404339762710570235
  %4122 = xor i64 %9, -1
  %4123 = and i64 404339762710570235, %4122
  %4124 = add i64 %4123, %9
  %4125 = xor i64 -2008213185817705758, %4124
  %4126 = xor i64 %4125, %4116
  %4127 = xor i64 %4126, %4117
  %4128 = xor i64 %4127, %4113
  %4129 = xor i64 %4128, %4120
  %4130 = xor i64 %4129, %4121
  %4131 = mul i64 %4112, %4130
  %4132 = trunc i64 %4131 to i32
  %4133 = and i32 %4091, %4132
  %4134 = or i32 %4093, %4133
  store i32 %4134, i32* %0, align 4
  %4135 = call i8** @bf4471601488556574720(i32* %0)
  %4136 = load i8*, i8** %4135, align 8
  indirectbr i8* %4136, [label %loopEnd, label %3979]

codeRepl27:                                       ; preds = %codeRepl27, %loopStart
  %lt.cast31 = bitcast i1* %.loc28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast31)
  %4137 = and i64 %31, 2708233470388390936
  %4138 = or i64 -2708233470388390937, %31
  %4139 = sub i64 %4138, -2708233470388390937
  %4140 = or i64 %61, 5649292732880423205
  %4141 = xor i64 %61, -1
  %4142 = and i64 %4141, -5290809490668913536
  %4143 = and i64 %61, 5290809490668913535
  %4144 = or i64 %4142, %4143
  %4145 = xor i64 -507476276187925083, %4144
  %4146 = xor i64 %61, -1
  %4147 = or i64 -5649292732880423206, %4146
  %4148 = xor i64 %4147, -1
  %4149 = and i64 %4148, -1
  %4150 = or i64 %4145, %4149
  %4151 = xor i64 -8037043704590575317, %4139
  %4152 = xor i64 %4151, %4140
  %4153 = xor i64 %4152, %4137
  %4154 = xor i64 %4153, %4150
  %4155 = add i64 %55, 2323523288756785081
  %4156 = sub i64 0, %55
  %4157 = sub i64 2323523288756785081, %4156
  %4158 = and i64 %71, -5920221635052829213
  %4159 = xor i64 %71, -1
  %4160 = xor i64 -5920221635052829213, %4159
  %4161 = and i64 %4160, -5920221635052829213
  %4162 = or i64 %114, 4585432850833259095
  %4163 = and i64 4585432850833259095, %114
  %4164 = xor i64 4585432850833259095, %114
  %4165 = or i64 %4163, %4164
  %4166 = xor i64 %4157, %4162
  %4167 = xor i64 %4166, %4161
  %4168 = xor i64 %4167, %4165
  %4169 = xor i64 %4168, %4155
  %4170 = xor i64 %4169, -2978635610090411041
  %4171 = xor i64 %4170, %4158
  %4172 = mul i64 %4154, %4171
  store i64 %4172, i64* %113, align 8
  %4173 = alloca i8**, align 8
  %4174 = and i64 %53, 4161820880617994616
  %4175 = or i64 -4161820880617994617, %53
  %4176 = sub i64 %4175, -4161820880617994617
  %4177 = or i64 %51, 720303254856343622
  %4178 = xor i64 %51, -1
  %4179 = and i64 720303254856343622, %4178
  %4180 = add i64 %4179, %51
  %4181 = xor i64 1357192190686281143, %4180
  %4182 = xor i64 %4181, %4176
  %4183 = xor i64 %4182, %4177
  %4184 = xor i64 %4183, %4174
  %4185 = or i64 %23, 8400185743604367263
  %4186 = and i64 8400185743604367263, %23
  %4187 = xor i64 8400185743604367263, %23
  %4188 = or i64 %4186, %4187
  %4189 = and i64 %45, 2450827007789376663
  %4190 = xor i64 %45, -1
  %4191 = xor i64 2450827007789376663, %4190
  %4192 = and i64 %4191, 2450827007789376663
  %4193 = xor i64 %4188, %4189
  %4194 = xor i64 %4193, 0
  %4195 = xor i64 %4194, %4185
  %4196 = xor i64 %4195, %4192
  %4197 = mul i64 %4184, %4196
  %4198 = trunc i64 %4197 to i1
  %4199 = add i64 %43, 6503817271734471584
  %4200 = and i64 6503817271734471584, %43
  %4201 = or i64 6503817271734471584, %43
  %4202 = add i64 %4200, %4201
  %4203 = or i64 %71, 1007306529023556226
  %4204 = xor i64 %71, -1
  %4205 = and i64 1007306529023556226, %4204
  %4206 = add i64 %4205, %71
  %4207 = or i64 %31, -7594093928499919020
  %4208 = xor i64 %31, -1
  %4209 = and i64 -7594093928499919020, %4208
  %4210 = add i64 %4209, %31
  %4211 = xor i64 %4206, %4202
  %4212 = xor i64 %4211, %4210
  %4213 = xor i64 %4212, %4203
  %4214 = xor i64 %4213, %4207
  %4215 = xor i64 %4214, %4199
  %4216 = xor i64 %4215, 2277514196337054495
  %4217 = or i64 %7, 4714720280745476626
  %4218 = and i64 4714720280745476626, %7
  %4219 = xor i64 4714720280745476626, %7
  %4220 = or i64 %4218, %4219
  %4221 = and i64 %118, 730556120183643765
  %4222 = xor i64 %118, -1
  %4223 = or i64 -730556120183643766, %4222
  %4224 = xor i64 %4223, -1
  %4225 = and i64 %4224, -1
  %4226 = xor i64 %4221, 0
  %4227 = xor i64 %4226, %4225
  %4228 = xor i64 %4227, %4220
  %4229 = xor i64 %4228, %4217
  %4230 = mul i64 %4216, %4229
  %4231 = trunc i64 %4230 to i32
  %4232 = add i64 %118, 9015468637034979228
  %4233 = sub i64 0, %118
  %4234 = add i64 -9015468637034979228, %4233
  %4235 = sub i64 0, %4234
  %4236 = and i64 %15, -2888622503190122186
  %4237 = xor i64 %15, -1
  %4238 = or i64 2888622503190122185, %4237
  %4239 = xor i64 %4238, -1
  %4240 = and i64 %4239, -1
  %4241 = and i64 %53, 9076118213210339727
  %4242 = xor i64 %53, -1
  %4243 = or i64 -9076118213210339728, %4242
  %4244 = xor i64 %4243, -1
  %4245 = and i64 %4244, -1
  %4246 = xor i64 %4235, %4236
  %4247 = xor i64 %4246, %4232
  %4248 = xor i64 %4247, %4245
  %4249 = xor i64 %4248, %4240
  %4250 = xor i64 %4249, %4241
  %4251 = xor i64 %4250, -3656228930238258687
  %4252 = add i64 %61, 3459268222785455358
  %4253 = sub i64 0, %61
  %4254 = sub i64 3459268222785455358, %4253
  %4255 = or i64 %63, -8170177124077772557
  %4256 = xor i64 %63, -1
  %4257 = and i64 %4256, 4135814341786562227
  %4258 = and i64 %63, -4135814341786562228
  %4259 = or i64 %4257, %4258
  %4260 = xor i64 -5190136842410455488, %4259
  %4261 = xor i64 %63, -1
  %4262 = or i64 8170177124077772556, %4261
  %4263 = xor i64 %4262, -1
  %4264 = and i64 %4263, -1
  %4265 = or i64 %4260, %4264
  %4266 = xor i64 0, %4265
  %4267 = xor i64 %4266, %4252
  %4268 = xor i64 %4267, %4255
  %4269 = xor i64 %4268, %4254
  %4270 = mul i64 %4251, %4269
  %4271 = trunc i64 %4270 to i32
  %4272 = and i64 %27, -413923541776870306
  %4273 = xor i64 %27, -1
  %4274 = or i64 413923541776870305, %4273
  %4275 = xor i64 %4274, -1
  %4276 = and i64 %4275, -1
  %4277 = and i64 %118, 1654019763346495876
  %4278 = xor i64 %118, -1
  %4279 = xor i64 1654019763346495876, %4278
  %4280 = and i64 %4279, 1654019763346495876
  %4281 = xor i64 %4277, %4280
  %4282 = xor i64 %4281, %4276
  %4283 = xor i64 %4282, -2243962289114237715
  %4284 = xor i64 %4283, %4272
  %4285 = and i64 %69, 2449093176037209980
  %4286 = xor i64 %69, -1
  %4287 = or i64 -2449093176037209981, %4286
  %4288 = xor i64 %4287, -1
  %4289 = and i64 %4288, -1
  %4290 = add i64 %21, 5626784585672588038
  %4291 = and i64 5626784585672588038, %21
  %4292 = or i64 5626784585672588038, %21
  %4293 = add i64 %4291, %4292
  %4294 = and i64 %15, 7343594198363881350
  %4295 = xor i64 %15, -1
  %4296 = xor i64 7343594198363881350, %4295
  %4297 = and i64 %4296, 7343594198363881350
  %4298 = xor i64 %4293, %4289
  %4299 = xor i64 %4298, %4294
  %4300 = xor i64 %4299, %4285
  %4301 = xor i64 %4300, 0
  %4302 = xor i64 %4301, %4290
  %4303 = xor i64 %4302, %4297
  %4304 = mul i64 %4284, %4303
  %4305 = trunc i64 %4304 to i32
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %4198, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %4173, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 %4231, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 %4271, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 %4305, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %4306 = load i8**, i8*** %4173, align 8
  %4307 = load i8*, i8** %4306, align 8
  %4308 = bitcast i8* %4307 to i1 (i32, i32, i1*)*
  %.reload53 = load i32, i32* %.reg2mem51, align 4
  %.reload59 = load i32, i32* %.reg2mem58, align 4
  %targetBlock29 = call i1 %4308(i32 %.reload53, i32 %.reload59, i1* %.loc28)
  %.reload30 = load i1, i1* %.loc28, align 1
  store i1 %.reload30, i1* %.reload30.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast31)
  %4309 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 17
  %4310 = load i32, i32* %4309, align 4
  %4311 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %4312 = load i32, i32* %4311, align 4
  %4313 = xor i32 %4310, %4312
  %4314 = and i32 %4310, %4312
  %4315 = mul i32 2, %4314
  %4316 = add i32 %4313, %4315
  %4317 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 16
  %4318 = load i32, i32* %4317, align 4
  %4319 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 15
  %4320 = load i32, i32* %4319, align 4
  %4321 = add i32 %4318, %4320
  %4322 = select i1 %targetBlock29, i32 %4316, i32 %4321
  store i32 %4322, i32* %dispatcher, align 4
  %4323 = load i8*, i8** %36, align 8
  %4324 = load i8, i8* %4323, align 1
  %4325 = mul i8 %4324, 2
  %4326 = mul i8 %4324, 2
  %4327 = add i8 2, %4326
  %4328 = mul i8 %4325, %4327
  %4329 = srem i8 %4328, 4
  %4330 = icmp eq i8 %4329, 0
  %4331 = mul i8 %4324, %4324
  %4332 = sub i8 0, %4331
  %4333 = sub i8 0, %4324
  %4334 = add i8 %4332, %4333
  %4335 = or i64 %51, 3650620902962371941
  %4336 = xor i64 %51, -1
  %4337 = and i64 3650620902962371941, %4336
  %4338 = add i64 %4337, %51
  %4339 = add i64 %63, 3095913040803742897
  %4340 = add i64 1838270064570067911, %63
  %4341 = sub i64 %4340, -1257642976233674986
  %4342 = xor i64 -866827866337889527, %4341
  %4343 = xor i64 %4342, %4335
  %4344 = xor i64 %4343, %4339
  %4345 = xor i64 %4344, %4338
  %4346 = or i64 %1, -2056421696594045321
  %4347 = xor i64 %1, -1
  %4348 = and i64 -2056421696594045321, %4347
  %4349 = add i64 %4348, %1
  %4350 = add i64 %23, -6541220328785087544
  %4351 = sub i64 0, %23
  %4352 = add i64 6541220328785087544, %4351
  %4353 = sub i64 0, %4352
  %4354 = xor i64 %4349, 0
  %4355 = xor i64 %4354, %4346
  %4356 = xor i64 %4355, %4353
  %4357 = xor i64 %4356, %4350
  %4358 = mul i64 %4345, %4357
  %4359 = trunc i64 %4358 to i8
  %4360 = sub i8 %4359, %4334
  %4361 = srem i8 %4360, 2
  %4362 = icmp eq i8 %4361, 0
  %4363 = and i1 %4330, %4362
  %4364 = or i64 %35, -8248282989451816292
  %4365 = xor i64 %35, -1
  %4366 = and i64 %4365, 3605573243289756080
  %4367 = and i64 %35, -3605573243289756081
  %4368 = or i64 %4366, %4367
  %4369 = xor i64 -4647249101419465940, %4368
  %4370 = xor i64 %35, -1
  %4371 = or i64 8248282989451816291, %4370
  %4372 = xor i64 %4371, -1
  %4373 = and i64 %4372, -1
  %4374 = or i64 %4369, %4373
  %4375 = or i64 %65, -3520031306517105175
  %4376 = xor i64 %65, -1
  %4377 = and i64 %4376, 9220360200826036304
  %4378 = and i64 %65, -9220360200826036305
  %4379 = or i64 %4377, %4378
  %4380 = xor i64 -5705186695596894791, %4379
  %4381 = xor i64 %65, -1
  %4382 = or i64 3520031306517105174, %4381
  %4383 = xor i64 %4382, -1
  %4384 = and i64 %4383, -1
  %4385 = or i64 %4380, %4384
  %4386 = xor i64 %4375, %4374
  %4387 = xor i64 %4386, 6723930350499682857
  %4388 = xor i64 %4387, %4385
  %4389 = xor i64 %4388, %4364
  %4390 = add i64 %9, -9157857319087845160
  %4391 = add i64 871715206507118508, %9
  %4392 = sub i64 %4391, -8417171548114587948
  %4393 = or i64 %35, -2230317191480267340
  %4394 = xor i64 %35, -1
  %4395 = and i64 -2230317191480267340, %4394
  %4396 = add i64 %4395, %35
  %4397 = xor i64 -7086818042231954687, %4396
  %4398 = xor i64 %4397, %4390
  %4399 = xor i64 %4398, %4392
  %4400 = xor i64 %4399, %4393
  %4401 = mul i64 %4389, %4400
  %4402 = trunc i64 %4401 to i32
  %4403 = select i1 %4363, i32 388314430, i32 %4402
  %4404 = xor i32 %4403, 23
  store i32 %4404, i32* %0, align 4
  %4405 = call i8** @bf4471601488556574720(i32* %0)
  %4406 = load i8*, i8** %4405, align 8
  indirectbr i8* %4406, [label %loopEnd, label %codeRepl27]

4407:                                             ; preds = %4407, %loopStart
  %4408 = add i64 23, 6
  %4409 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 30
  %4410 = load i32, i32* %4409, align 4
  %4411 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %4412 = load i32, i32* %4411, align 4
  %4413 = srem i32 %4410, %4412
  %4414 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 23
  %4415 = load i32, i32* %4414, align 4
  %4416 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %4417 = load i32, i32* %4416, align 4
  %4418 = sub i32 %4415, %4417
  %.reload30.reload = load i1, i1* %.reload30.reg2mem, align 1
  %4419 = select i1 %.reload30.reload, i32 %4413, i32 %4418
  store i32 %4419, i32* %dispatcher, align 4
  %4420 = load i8*, i8** %32, align 8
  %4421 = load i8, i8* %4420, align 1
  %4422 = mul i8 %4421, 2
  %4423 = and i64 %49, -3363289036647581727
  %4424 = or i64 3363289036647581726, %49
  %4425 = sub i64 %4424, 3363289036647581726
  %4426 = or i64 %7, -3686210730110385552
  %4427 = and i64 -3686210730110385552, %7
  %4428 = xor i64 -3686210730110385552, %7
  %4429 = or i64 %4427, %4428
  %4430 = sext i32 %154 to i64
  %4431 = add i64 %4430, -3740928931447388555
  %4432 = sub i64 0, %4430
  %4433 = add i64 3740928931447388555, %4432
  %4434 = sub i64 0, %4433
  %4435 = xor i64 %4431, %4429
  %4436 = xor i64 %4435, 5690139041778838691
  %4437 = xor i64 %4436, %4426
  %4438 = xor i64 %4437, %4425
  %4439 = xor i64 %4438, %4434
  %4440 = xor i64 %4439, %4423
  %4441 = or i64 %122, 3625342354821433491
  %4442 = xor i64 %122, -1
  %4443 = and i64 3625342354821433491, %4442
  %4444 = add i64 %4443, %122
  %4445 = and i64 %73, -2983237008890085672
  %4446 = xor i64 %73, -1
  %4447 = or i64 2983237008890085671, %4446
  %4448 = xor i64 %4447, -1
  %4449 = and i64 %4448, -1
  %4450 = and i64 %114, -8356224444387386217
  %4451 = xor i64 %114, -1
  %4452 = or i64 8356224444387386216, %4451
  %4453 = xor i64 %4452, -1
  %4454 = and i64 %4453, -1
  %4455 = xor i64 %4445, %4449
  %4456 = xor i64 %4455, %4444
  %4457 = xor i64 %4456, -7969525593181139434
  %4458 = xor i64 %4457, %4454
  %4459 = xor i64 %4458, %4441
  %4460 = xor i64 %4459, %4450
  %4461 = mul i64 %4440, %4460
  %4462 = trunc i64 %4461 to i8
  %4463 = mul i8 %4421, %4462
  %4464 = or i64 %49, 6659898418482900634
  %4465 = and i64 6659898418482900634, %49
  %4466 = xor i64 6659898418482900634, %49
  %4467 = or i64 %4465, %4466
  %4468 = add i64 %59, -5219393056032016091
  %4469 = add i64 6101961235085234898, %59
  %4470 = add i64 %4469, 7125389782592300627
  %4471 = and i64 %57, -7399896918069478253
  %4472 = xor i64 %57, -1
  %4473 = or i64 7399896918069478252, %4472
  %4474 = xor i64 %4473, -1
  %4475 = and i64 %4474, -1
  %4476 = xor i64 %4475, %4464
  %4477 = xor i64 %4476, -8513052341600416015
  %4478 = xor i64 %4477, %4471
  %4479 = xor i64 %4478, %4468
  %4480 = xor i64 %4479, %4467
  %4481 = xor i64 %4480, %4470
  %4482 = add i64 %31, 4823888740742589881
  %4483 = add i64 4873419229309974719, %31
  %4484 = add i64 %4483, -49530488567384838
  %4485 = add i64 %120, 3612418664139818616
  %4486 = xor i64 3612418664139818616, %120
  %4487 = and i64 3612418664139818616, %120
  %4488 = mul i64 2, %4487
  %4489 = add i64 %4486, %4488
  %4490 = or i64 %37, -205491767009963758
  %4491 = xor i64 %37, -1
  %4492 = and i64 -205491767009963758, %4491
  %4493 = add i64 %4492, %37
  %4494 = xor i64 %4490, %4489
  %4495 = xor i64 %4494, %4482
  %4496 = xor i64 %4495, %4493
  %4497 = xor i64 %4496, %4484
  %4498 = xor i64 %4497, 0
  %4499 = xor i64 %4498, %4485
  %4500 = mul i64 %4481, %4499
  %4501 = trunc i64 %4500 to i8
  %4502 = sub i8 %4501, %4463
  %4503 = add i64 %118, -2462619007686139833
  %4504 = add i64 -1912782812066376421, %118
  %4505 = sub i64 %4504, 549836195619763412
  %4506 = or i64 %118, 6414287457575710491
  %4507 = xor i64 %118, -1
  %4508 = and i64 6414287457575710491, %4507
  %4509 = add i64 %4508, %118
  %4510 = or i64 %31, -6072076495507351294
  %4511 = and i64 -6072076495507351294, %31
  %4512 = xor i64 -6072076495507351294, %31
  %4513 = or i64 %4511, %4512
  %4514 = xor i64 %4505, %4510
  %4515 = xor i64 %4514, %4506
  %4516 = xor i64 %4515, %4503
  %4517 = xor i64 %4516, -7270849883560080731
  %4518 = xor i64 %4517, %4509
  %4519 = xor i64 %4518, %4513
  %4520 = or i64 %128, -8075217821431295920
  %4521 = xor i64 %128, -1
  %4522 = and i64 -8075217821431295920, %4521
  %4523 = add i64 %4522, %128
  %4524 = and i64 %21, 22680721916123685
  %4525 = xor i64 %21, -1
  %4526 = xor i64 22680721916123685, %4525
  %4527 = and i64 %4526, 22680721916123685
  %4528 = xor i64 -7374199261440273754, %4524
  %4529 = xor i64 %4528, %4523
  %4530 = xor i64 %4529, %4527
  %4531 = xor i64 %4530, %4520
  %4532 = mul i64 %4519, %4531
  %4533 = trunc i64 %4532 to i8
  %4534 = add i8 %4533, %4502
  %4535 = sub i8 0, %4534
  %4536 = mul i8 %4422, %4535
  %4537 = add i64 %5, -2595015072459983653
  %4538 = add i64 5508885204863260954, %5
  %4539 = add i64 %4538, -8103900277323244607
  %4540 = or i64 %67, 7552994794133907983
  %4541 = and i64 7552994794133907983, %67
  %4542 = xor i64 7552994794133907983, %67
  %4543 = or i64 %4541, %4542
  %4544 = or i64 %59, 8709204372510990635
  %4545 = xor i64 %59, -1
  %4546 = and i64 8709204372510990635, %4545
  %4547 = add i64 %4546, %59
  %4548 = xor i64 %4544, %4540
  %4549 = xor i64 %4548, %4537
  %4550 = xor i64 %4549, %4547
  %4551 = xor i64 %4550, 5563258111071766013
  %4552 = xor i64 %4551, %4539
  %4553 = xor i64 %4552, %4543
  %4554 = and i64 %13, -7223810778001634820
  %4555 = or i64 7223810778001634819, %13
  %4556 = sub i64 %4555, 7223810778001634819
  %4557 = and i64 %124, -1567920681673811036
  %4558 = or i64 1567920681673811035, %124
  %4559 = sub i64 %4558, 1567920681673811035
  %4560 = xor i64 3731267814344818004, %4556
  %4561 = xor i64 %4560, %4554
  %4562 = xor i64 %4561, %4559
  %4563 = xor i64 %4562, %4557
  %4564 = mul i64 %4553, %4563
  %4565 = trunc i64 %4564 to i8
  %4566 = srem i8 %4536, %4565
  %4567 = icmp eq i8 %4566, 0
  %4568 = mul i8 %4421, %4421
  %4569 = xor i8 %4568, %4421
  %4570 = and i8 %4568, %4421
  %4571 = mul i8 2, %4570
  %4572 = add i8 %4569, %4571
  %4573 = mul i8 39, %4572
  %4574 = add i8 23, %4573
  %4575 = mul i8 -105, %4574
  %4576 = add i8 111, %4575
  %4577 = srem i8 %4576, 2
  %4578 = icmp eq i8 %4577, 0
  %4579 = and i1 %4567, %4578
  %4580 = select i1 %4579, i32 388314421, i32 388314409
  %4581 = or i32 %4580, 28
  %4582 = and i32 %4580, 28
  %4583 = sub i32 %4581, %4582
  store i32 %4583, i32* %0, align 4
  %4584 = call i8** @bf4471601488556574720(i32* %0)
  %4585 = load i8*, i8** %4584, align 8
  indirectbr i8* %4585, [label %loopEnd, label %4407]

4586:                                             ; preds = %4586, %loopStart
  %4587 = sub i64 0, -29
  %4588 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 17
  %4589 = load i32, i32* %4588, align 4
  %4590 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 16
  %4591 = load i32, i32* %4590, align 4
  %4592 = sub i32 %4589, -608225597
  %4593 = add i32 %4592, %4591
  %4594 = add i32 %4593, -608225597
  store i32 %4594, i32* %dispatcher, align 4
  %4595 = load i8*, i8** %14, align 8
  %4596 = load i8, i8* %4595, align 1
  %4597 = mul i8 %4596, 2
  %4598 = mul i8 %4596, 2
  %4599 = add i8 2, %4598
  %4600 = mul i8 %4597, %4599
  %4601 = srem i8 %4600, 4
  %4602 = or i64 %1, -8062336858502533241
  %4603 = xor i64 %1, -1
  %4604 = and i64 %4603, -7283209764453981456
  %4605 = and i64 %1, 7283209764453981455
  %4606 = or i64 %4604, %4605
  %4607 = xor i64 788134441493630327, %4606
  %4608 = xor i64 %1, -1
  %4609 = or i64 8062336858502533240, %4608
  %4610 = xor i64 %4609, -1
  %4611 = and i64 %4610, -1
  %4612 = or i64 %4607, %4611
  %4613 = add i64 %134, -2847258461723586348
  %4614 = sub i64 0, %134
  %4615 = sub i64 -2847258461723586348, %4614
  %4616 = or i64 %118, -6766016073525175708
  %4617 = xor i64 %118, -1
  %4618 = and i64 %4617, -8043793123800747584
  %4619 = and i64 %118, 8043793123800747583
  %4620 = or i64 %4618, %4619
  %4621 = xor i64 3622298173295471524, %4620
  %4622 = xor i64 %118, -1
  %4623 = or i64 6766016073525175707, %4622
  %4624 = xor i64 %4623, -1
  %4625 = and i64 %4624, -1
  %4626 = or i64 %4621, %4625
  %4627 = xor i64 %4616, %4612
  %4628 = xor i64 %4627, -6813207536124270975
  %4629 = xor i64 %4628, %4626
  %4630 = xor i64 %4629, %4602
  %4631 = xor i64 %4630, %4613
  %4632 = xor i64 %4631, %4615
  %4633 = or i64 %132, -3093230573031072931
  %4634 = xor i64 %132, -1
  %4635 = and i64 -3093230573031072931, %4634
  %4636 = add i64 %4635, %132
  %4637 = and i64 %49, 1465011504333156876
  %4638 = or i64 -1465011504333156877, %49
  %4639 = sub i64 %4638, -1465011504333156877
  %4640 = or i64 %49, 1271604205330154344
  %4641 = xor i64 %49, -1
  %4642 = and i64 1271604205330154344, %4641
  %4643 = add i64 %4642, %49
  %4644 = xor i64 %4639, %4636
  %4645 = xor i64 %4644, 0
  %4646 = xor i64 %4645, %4643
  %4647 = xor i64 %4646, %4637
  %4648 = xor i64 %4647, %4640
  %4649 = xor i64 %4648, %4633
  %4650 = mul i64 %4632, %4649
  %4651 = trunc i64 %4650 to i8
  %4652 = icmp eq i8 %4601, %4651
  %4653 = mul i8 %4596, %4596
  %4654 = add i8 %4653, %4596
  %4655 = srem i8 %4654, 2
  %4656 = icmp eq i8 %4655, 0
  %4657 = or i1 %4652, %4656
  %4658 = select i1 %4657, i32 388314405, i32 388314409
  %4659 = xor i32 %4658, 710053331
  %4660 = xor i32 %4659, 710053343
  store i32 %4660, i32* %0, align 4
  %4661 = call i8** @bf4471601488556574720(i32* %0)
  %4662 = load i8*, i8** %4661, align 8
  indirectbr i8* %4662, [label %loopEnd, label %4586]

4663:                                             ; preds = %4663, %loopStart
  %4664 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 18
  %4665 = load i32, i32* %4664, align 4
  %4666 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 17
  %4667 = load i32, i32* %4666, align 4
  %4668 = xor i32 %4665, %4667
  %4669 = and i32 %4665, %4667
  %4670 = mul i32 2, %4669
  %4671 = add i32 %4668, %4670
  store i32 %4671, i32* %dispatcher, align 4
  %4672 = load i8*, i8** %14, align 8
  %4673 = load i8, i8* %4672, align 1
  %4674 = and i64 %15, -2091869666584240155
  %4675 = xor i64 %15, -1
  %4676 = or i64 2091869666584240154, %4675
  %4677 = xor i64 %4676, -1
  %4678 = and i64 %4677, -1
  %4679 = and i64 %47, 5898854057559536584
  %4680 = or i64 -5898854057559536585, %47
  %4681 = sub i64 %4680, -5898854057559536585
  %4682 = xor i64 682875632112239111, %4678
  %4683 = xor i64 %4682, %4674
  %4684 = xor i64 %4683, %4679
  %4685 = xor i64 %4684, %4681
  %4686 = and i64 %114, -5359781531118618943
  %4687 = xor i64 %114, -1
  %4688 = xor i64 -5359781531118618943, %4687
  %4689 = and i64 %4688, -5359781531118618943
  %4690 = add i64 %31, -950898747256041461
  %4691 = add i64 -2233286552119970118, %31
  %4692 = add i64 %4691, 1282387804863928657
  %4693 = xor i64 %4690, -3585917283103959186
  %4694 = xor i64 %4693, %4689
  %4695 = xor i64 %4694, %4692
  %4696 = xor i64 %4695, %4686
  %4697 = mul i64 %4685, %4696
  %4698 = trunc i64 %4697 to i8
  %4699 = mul i8 %4673, %4698
  %4700 = mul i8 %4673, 2
  %4701 = add i8 2, %4700
  %4702 = mul i8 %4699, %4701
  %4703 = srem i8 %4702, 4
  %4704 = icmp eq i8 %4703, 0
  %4705 = mul i8 %4673, %4673
  %4706 = and i8 %4705, %4673
  %4707 = or i8 %4705, %4673
  %4708 = add i8 %4706, %4707
  %4709 = srem i8 %4708, 2
  %4710 = icmp eq i8 %4709, 0
  %4711 = xor i1 %4704, true
  %4712 = or i1 %4711, %4710
  %4713 = xor i1 %4704, true
  %4714 = sub i1 %4712, %4713
  %4715 = select i1 %4714, i32 388314428, i32 388314409
  %4716 = xor i32 %4715, 21
  store i32 %4716, i32* %0, align 4
  %4717 = call i8** @bf4471601488556574720(i32* %0)
  %4718 = load i8*, i8** %4717, align 8
  indirectbr i8* %4718, [label %loopEnd, label %4663]

4719:                                             ; preds = %4719, %loopStart
  %4720 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 18
  %4721 = load i32, i32* %4720, align 4
  %4722 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 17
  %4723 = load i32, i32* %4722, align 4
  %4724 = sub i32 %4721, 1655448514
  %4725 = add i32 %4724, %4723
  %4726 = add i32 %4725, 1655448514
  store i32 %4726, i32* %dispatcher, align 4
  %4727 = load i8*, i8** %16, align 8
  %4728 = load i8, i8* %4727, align 1
  %4729 = mul i8 %4728, 2
  %4730 = mul i8 %4728, 2
  %4731 = and i8 2, %4730
  %4732 = or i8 2, %4730
  %4733 = add i8 %4731, %4732
  %4734 = mul i8 %4729, %4733
  %4735 = srem i8 %4734, 4
  %4736 = icmp eq i8 %4735, 0
  %4737 = mul i8 %4728, %4728
  %4738 = xor i8 %4737, %4728
  %4739 = and i8 %4737, %4728
  %4740 = mul i8 2, %4739
  %4741 = add i8 %4738, %4740
  %4742 = mul i8 39, %4741
  %4743 = add i8 23, %4742
  %4744 = mul i8 -105, %4743
  %4745 = add i8 111, %4744
  %4746 = srem i8 %4745, 2
  %4747 = icmp eq i8 %4746, 0
  %4748 = or i1 %4736, %4747
  %4749 = or i64 %25, 3861013796296297481
  %4750 = xor i64 %25, -1
  %4751 = and i64 3861013796296297481, %4750
  %4752 = add i64 %4751, %25
  %4753 = or i64 %29, 5840099268012015145
  %4754 = xor i64 %29, -1
  %4755 = and i64 %4754, -8001003152406376983
  %4756 = and i64 %29, 8001003152406376982
  %4757 = or i64 %4755, %4756
  %4758 = xor i64 -4469108696192486464, %4757
  %4759 = xor i64 %29, -1
  %4760 = or i64 -5840099268012015146, %4759
  %4761 = xor i64 %4760, -1
  %4762 = and i64 %4761, -1
  %4763 = or i64 %4758, %4762
  %4764 = or i64 %5, -8105726491936127578
  %4765 = xor i64 %5, -1
  %4766 = and i64 %4765, -458223126139036405
  %4767 = and i64 %5, 458223126139036404
  %4768 = or i64 %4766, %4767
  %4769 = xor i64 8513699734298400941, %4768
  %4770 = xor i64 %5, -1
  %4771 = or i64 8105726491936127577, %4770
  %4772 = xor i64 %4771, -1
  %4773 = and i64 %4772, -1
  %4774 = or i64 %4769, %4773
  %4775 = xor i64 %4749, %4752
  %4776 = xor i64 %4775, %4774
  %4777 = xor i64 %4776, %4763
  %4778 = xor i64 %4777, %4764
  %4779 = xor i64 %4778, -2800618415178492239
  %4780 = xor i64 %4779, %4753
  %4781 = add i64 %128, -5808665289531665182
  %4782 = and i64 -5808665289531665182, %128
  %4783 = or i64 -5808665289531665182, %128
  %4784 = add i64 %4782, %4783
  %4785 = add i64 %27, 2380636305415650353
  %4786 = and i64 2380636305415650353, %27
  %4787 = or i64 2380636305415650353, %27
  %4788 = add i64 %4786, %4787
  %4789 = add i64 %29, -3241037505646371304
  %4790 = sub i64 0, %29
  %4791 = add i64 3241037505646371304, %4790
  %4792 = sub i64 0, %4791
  %4793 = xor i64 6745543288954016761, %4792
  %4794 = xor i64 %4793, %4788
  %4795 = xor i64 %4794, %4784
  %4796 = xor i64 %4795, %4785
  %4797 = xor i64 %4796, %4781
  %4798 = xor i64 %4797, %4789
  %4799 = mul i64 %4780, %4798
  %4800 = trunc i64 %4799 to i32
  %4801 = select i1 %4748, i32 388314423, i32 %4800
  %4802 = xor i32 %4801, 30
  store i32 %4802, i32* %0, align 4
  %4803 = call i8** @bf4471601488556574720(i32* %0)
  %4804 = load i8*, i8** %4803, align 8
  indirectbr i8* %4804, [label %loopEnd, label %4719]

4805:                                             ; preds = %loopStart
  %.reload52 = load i32, i32* %.reg2mem51, align 4
  ret i32 %.reload52

codeRepl32:                                       ; preds = %codeRepl32, %loopStart
  store i64 5221456193252566384, i64* %113, align 8
  %4806 = alloca i8**, align 8
  %4807 = and i64 %73, -2358034811261439384
  %4808 = xor i64 %73, -1
  %4809 = xor i64 -2358034811261439384, %4808
  %4810 = and i64 %4809, -2358034811261439384
  %4811 = add i64 %116, -4440776703252635170
  %4812 = sub i64 0, %116
  %4813 = sub i64 -4440776703252635170, %4812
  %4814 = xor i64 1211450177106552223, %4807
  %4815 = xor i64 %4814, %4811
  %4816 = xor i64 %4815, %4813
  %4817 = xor i64 %4816, %4810
  %4818 = or i64 %43, -7641614098373325528
  %4819 = and i64 -7641614098373325528, %43
  %4820 = xor i64 -7641614098373325528, %43
  %4821 = or i64 %4819, %4820
  %4822 = and i64 %71, 8544534742573653452
  %4823 = xor i64 %71, -1
  %4824 = xor i64 8544534742573653452, %4823
  %4825 = and i64 %4824, 8544534742573653452
  %4826 = and i64 %51, 7882711799690569934
  %4827 = xor i64 %51, -1
  %4828 = xor i64 7882711799690569934, %4827
  %4829 = and i64 %4828, 7882711799690569934
  %4830 = xor i64 0, %4818
  %4831 = xor i64 %4830, %4825
  %4832 = xor i64 %4831, %4821
  %4833 = xor i64 %4832, %4826
  %4834 = xor i64 %4833, %4829
  %4835 = xor i64 %4834, %4822
  %4836 = mul i64 %4817, %4835
  %4837 = trunc i64 %4836 to i32
  %4838 = add i64 %65, 8170408396658466008
  %4839 = xor i64 8170408396658466008, %65
  %4840 = and i64 8170408396658466008, %65
  %4841 = mul i64 2, %4840
  %4842 = add i64 %4839, %4841
  %4843 = or i64 %33, -7007317848610824717
  %4844 = and i64 -7007317848610824717, %33
  %4845 = xor i64 -7007317848610824717, %33
  %4846 = or i64 %4844, %4845
  %4847 = add i64 %61, 5488295079891442412
  %4848 = xor i64 5488295079891442412, %61
  %4849 = and i64 5488295079891442412, %61
  %4850 = mul i64 2, %4849
  %4851 = add i64 %4848, %4850
  %4852 = xor i64 -4577970726138904525, %4842
  %4853 = xor i64 %4852, %4847
  %4854 = xor i64 %4853, %4838
  %4855 = xor i64 %4854, %4846
  %4856 = xor i64 %4855, %4851
  %4857 = xor i64 %4856, %4843
  %4858 = or i64 %21, -5149765285603119268
  %4859 = xor i64 %21, -1
  %4860 = and i64 %4859, 3290774331450525703
  %4861 = and i64 %21, -3290774331450525704
  %4862 = or i64 %4860, %4861
  %4863 = xor i64 -7700181125357246629, %4862
  %4864 = xor i64 %21, -1
  %4865 = or i64 5149765285603119267, %4864
  %4866 = xor i64 %4865, -1
  %4867 = and i64 %4866, -1
  %4868 = or i64 %4863, %4867
  %4869 = and i64 %29, 3656291603571149637
  %4870 = or i64 -3656291603571149638, %29
  %4871 = sub i64 %4870, -3656291603571149638
  %4872 = add i64 %69, -7162379030913743756
  %4873 = add i64 -4445055163706528711, %69
  %4874 = add i64 %4873, -2717323867207215045
  %4875 = xor i64 %4858, %4872
  %4876 = xor i64 %4875, %4871
  %4877 = xor i64 %4876, %4869
  %4878 = xor i64 %4877, %4874
  %4879 = xor i64 %4878, %4868
  %4880 = xor i64 %4879, 0
  %4881 = mul i64 %4857, %4880
  %4882 = trunc i64 %4881 to i32
  %4883 = add i64 %63, 1289286999575091067
  %4884 = sub i64 0, %63
  %4885 = sub i64 1289286999575091067, %4884
  %4886 = add i64 %73, 1584957700858528514
  %4887 = add i64 737510242979461535, %73
  %4888 = sub i64 %4887, -847447457879066979
  %4889 = or i64 %1, 8935731588591307836
  %4890 = xor i64 %1, -1
  %4891 = and i64 8935731588591307836, %4890
  %4892 = add i64 %4891, %1
  %4893 = xor i64 %4885, %4888
  %4894 = xor i64 %4893, %4889
  %4895 = xor i64 %4894, %4892
  %4896 = xor i64 %4895, %4886
  %4897 = xor i64 %4896, %4883
  %4898 = xor i64 %4897, -159934907303578519
  %4899 = and i64 %55, -689472059798199194
  %4900 = xor i64 %55, -1
  %4901 = or i64 689472059798199193, %4900
  %4902 = xor i64 %4901, -1
  %4903 = and i64 %4902, -1
  %4904 = or i64 %130, -9018874366599908413
  %4905 = and i64 -9018874366599908413, %130
  %4906 = xor i64 -9018874366599908413, %130
  %4907 = or i64 %4905, %4906
  %4908 = xor i64 %4899, %4907
  %4909 = xor i64 %4908, %4904
  %4910 = xor i64 %4909, %4903
  %4911 = xor i64 %4910, 0
  %4912 = mul i64 %4898, %4911
  %4913 = trunc i64 %4912 to i32
  %4914 = and i64 %124, 440587764512527464
  %4915 = or i64 -440587764512527465, %124
  %4916 = sub i64 %4915, -440587764512527465
  %4917 = and i64 %17, -1510581173717192315
  %4918 = or i64 1510581173717192314, %17
  %4919 = sub i64 %4918, 1510581173717192314
  %4920 = sext i32 %148 to i64
  %4921 = and i64 %4920, -8280034077675604062
  %4922 = xor i64 %4920, -1
  %4923 = or i64 8280034077675604061, %4922
  %4924 = xor i64 %4923, -1
  %4925 = and i64 %4924, -1
  %4926 = xor i64 %4919, %4914
  %4927 = xor i64 %4926, %4917
  %4928 = xor i64 %4927, %4916
  %4929 = xor i64 %4928, -2826634763637090827
  %4930 = xor i64 %4929, %4921
  %4931 = xor i64 %4930, %4925
  %4932 = and i64 %13, -1218932021655708921
  %4933 = xor i64 %13, -1
  %4934 = or i64 1218932021655708920, %4933
  %4935 = xor i64 %4934, -1
  %4936 = and i64 %4935, -1
  %4937 = sext i32 %dispatcher1 to i64
  %4938 = or i64 %4937, 2507780765128673601
  %4939 = and i64 2507780765128673601, %4937
  %4940 = xor i64 2507780765128673601, %4937
  %4941 = or i64 %4939, %4940
  %4942 = xor i64 %4938, %4932
  %4943 = xor i64 %4942, 0
  %4944 = xor i64 %4943, %4941
  %4945 = xor i64 %4944, %4936
  %4946 = mul i64 %4931, %4945
  %4947 = trunc i64 %4946 to i32
  %4948 = or i64 %43, -9120014361313762941
  %4949 = and i64 -9120014361313762941, %43
  %4950 = xor i64 -9120014361313762941, %43
  %4951 = or i64 %4949, %4950
  %4952 = add i64 %128, -1956137382808123295
  %4953 = add i64 7930110896820954018, %128
  %4954 = add i64 %4953, 8560495794080474303
  %4955 = xor i64 %4954, %4948
  %4956 = xor i64 %4955, %4952
  %4957 = xor i64 %4956, -871142007341201407
  %4958 = xor i64 %4957, %4951
  %4959 = and i64 %49, -8885277366001421993
  %4960 = xor i64 %49, -1
  %4961 = xor i64 -8885277366001421993, %4960
  %4962 = and i64 %4961, -8885277366001421993
  %4963 = or i64 %134, 1422113792598391390
  %4964 = xor i64 %134, -1
  %4965 = and i64 1422113792598391390, %4964
  %4966 = add i64 %4965, %134
  %4967 = or i64 %120, 3740071996413698964
  %4968 = xor i64 %120, -1
  %4969 = and i64 3740071996413698964, %4968
  %4970 = add i64 %4969, %120
  %4971 = xor i64 %4966, %4963
  %4972 = xor i64 %4971, %4967
  %4973 = xor i64 %4972, %4970
  %4974 = xor i64 %4973, 0
  %4975 = xor i64 %4974, %4959
  %4976 = xor i64 %4975, %4962
  %4977 = mul i64 %4958, %4976
  %4978 = trunc i64 %4977 to i1
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 %4837, i1* null, i32 %4882, i1* null, i64* null, i8*** null, i64* %113, i8*** %4806, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 %4913, i32 %4947, i1* null, i1* null, i64 0, i64* null, i64* null, i1 %4978, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %4979 = load i8**, i8*** %4806, align 8
  %4980 = load i8*, i8** %4979, align 8
  %4981 = bitcast i8* %4980 to i1 (i32)*
  %.reload37 = load i32, i32* %.reg2mem36, align 4
  %targetBlock33 = call i1 %4981(i32 %.reload37)
  %4982 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 35
  %4983 = load i32, i32* %4982, align 4
  %4984 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 3
  %4985 = load i32, i32* %4984, align 4
  %4986 = sub i32 %4983, %4985
  %4987 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  %4988 = load i32, i32* %4987, align 4
  %4989 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 18
  %4990 = load i32, i32* %4989, align 4
  %4991 = add i32 %4988, %4990
  %4992 = select i1 %targetBlock33, i32 %4986, i32 %4991
  store i32 %4992, i32* %dispatcher, align 4
  %4993 = load i8*, i8** %16, align 8
  %4994 = load i8, i8* %4993, align 1
  %4995 = mul i8 %4994, 2
  %4996 = mul i8 %4994, 2
  %4997 = add i8 2, %4996
  %4998 = mul i8 %4995, %4997
  %4999 = add i64 %37, -6706522785106978476
  %5000 = sub i64 0, %37
  %5001 = add i64 6706522785106978476, %5000
  %5002 = sub i64 0, %5001
  %5003 = and i64 %3, 3448571291950715134
  %5004 = or i64 -3448571291950715135, %3
  %5005 = sub i64 %5004, -3448571291950715135
  %5006 = xor i64 %5002, %4999
  %5007 = xor i64 %5006, 5190425084819578189
  %5008 = xor i64 %5007, %5005
  %5009 = xor i64 %5008, %5003
  %5010 = add i64 %35, 3585408985928425818
  %5011 = and i64 3585408985928425818, %35
  %5012 = or i64 3585408985928425818, %35
  %5013 = add i64 %5011, %5012
  %5014 = and i64 %114, -3963401635803996663
  %5015 = xor i64 %114, -1
  %5016 = or i64 3963401635803996662, %5015
  %5017 = xor i64 %5016, -1
  %5018 = and i64 %5017, -1
  %5019 = or i64 %116, -7054793698462078077
  %5020 = xor i64 %116, -1
  %5021 = and i64 -7054793698462078077, %5020
  %5022 = add i64 %5021, %116
  %5023 = xor i64 -5854088010748424684, %5014
  %5024 = xor i64 %5023, %5018
  %5025 = xor i64 %5024, %5010
  %5026 = xor i64 %5025, %5022
  %5027 = xor i64 %5026, %5019
  %5028 = xor i64 %5027, %5013
  %5029 = mul i64 %5009, %5028
  %5030 = trunc i64 %5029 to i8
  %5031 = srem i8 %4998, %5030
  %5032 = icmp eq i8 %5031, 0
  %5033 = mul i8 %4994, %4994
  %5034 = add i8 %5033, %4994
  %5035 = srem i8 %5034, 2
  %5036 = icmp eq i8 %5035, 0
  %5037 = or i1 %5032, %5036
  %5038 = or i64 %61, -1219286356956332969
  %5039 = and i64 -1219286356956332969, %61
  %5040 = xor i64 -1219286356956332969, %61
  %5041 = or i64 %5039, %5040
  %5042 = add i64 %114, 190660426387995820
  %5043 = sub i64 0, %114
  %5044 = add i64 -190660426387995820, %5043
  %5045 = sub i64 0, %5044
  %5046 = xor i64 4242851934318837497, %5041
  %5047 = xor i64 %5046, %5045
  %5048 = xor i64 %5047, %5042
  %5049 = xor i64 %5048, %5038
  %5050 = and i64 %3, 821493570835670388
  %5051 = xor i64 %3, -1
  %5052 = or i64 -821493570835670389, %5051
  %5053 = xor i64 %5052, -1
  %5054 = and i64 %5053, -1
  %5055 = and i64 %114, -2361230734979751843
  %5056 = xor i64 %114, -1
  %5057 = or i64 2361230734979751842, %5056
  %5058 = xor i64 %5057, -1
  %5059 = and i64 %5058, -1
  %5060 = or i64 %59, -8786638430863495565
  %5061 = and i64 -8786638430863495565, %59
  %5062 = xor i64 -8786638430863495565, %59
  %5063 = or i64 %5061, %5062
  %5064 = xor i64 1221585680172380155, %5060
  %5065 = xor i64 %5064, %5054
  %5066 = xor i64 %5065, %5055
  %5067 = xor i64 %5066, %5059
  %5068 = xor i64 %5067, %5050
  %5069 = xor i64 %5068, %5063
  %5070 = mul i64 %5049, %5069
  %5071 = trunc i64 %5070 to i32
  %5072 = select i1 %5037, i32 %5071, i32 388314409
  %5073 = xor i32 %5072, 10
  store i32 %5073, i32* %0, align 4
  %5074 = call i8** @bf4471601488556574720(i32* %0)
  %5075 = load i8*, i8** %5074, align 8
  indirectbr i8* %5075, [label %loopEnd, label %codeRepl32]

codeRepl34:                                       ; preds = %codeRepl34, %loopStart
  store i64 5221456193252566399, i64* %113, align 8
  %5076 = alloca i8**, align 8
  %5077 = and i64 %124, -4932574291748168423
  %5078 = xor i64 %124, -1
  %5079 = xor i64 -4932574291748168423, %5078
  %5080 = and i64 %5079, -4932574291748168423
  %5081 = add i64 %49, 616836523446425244
  %5082 = add i64 991503387780959798, %49
  %5083 = add i64 %5082, -374666864334534554
  %5084 = xor i64 %5083, 3946667935031752771
  %5085 = xor i64 %5084, %5080
  %5086 = xor i64 %5085, %5081
  %5087 = xor i64 %5086, %5077
  %5088 = and i64 %57, 7595802864931400135
  %5089 = or i64 -7595802864931400136, %57
  %5090 = sub i64 %5089, -7595802864931400136
  %5091 = and i64 %41, 4499979304681180232
  %5092 = or i64 -4499979304681180233, %41
  %5093 = sub i64 %5092, -4499979304681180233
  %5094 = xor i64 %5091, 8093250060749158339
  %5095 = xor i64 %5094, %5090
  %5096 = xor i64 %5095, %5088
  %5097 = xor i64 %5096, %5093
  %5098 = mul i64 %5087, %5097
  %5099 = trunc i64 %5098 to i32
  %5100 = and i64 %11, 8207415590487261095
  %5101 = or i64 -8207415590487261096, %11
  %5102 = sub i64 %5101, -8207415590487261096
  %5103 = add i64 %49, -8519556065316100961
  %5104 = and i64 -8519556065316100961, %49
  %5105 = or i64 -8519556065316100961, %49
  %5106 = add i64 %5104, %5105
  %5107 = or i64 %126, -4610530969871861649
  %5108 = and i64 -4610530969871861649, %126
  %5109 = xor i64 -4610530969871861649, %126
  %5110 = or i64 %5108, %5109
  %5111 = xor i64 %5103, %5102
  %5112 = xor i64 %5111, %5100
  %5113 = xor i64 %5112, %5110
  %5114 = xor i64 %5113, %5107
  %5115 = xor i64 %5114, %5106
  %5116 = xor i64 %5115, -1099942760160758921
  %5117 = and i64 %45, -8178485163744769514
  %5118 = xor i64 %45, -1
  %5119 = xor i64 -8178485163744769514, %5118
  %5120 = and i64 %5119, -8178485163744769514
  %5121 = add i64 %49, 2714942213310352592
  %5122 = sub i64 0, %49
  %5123 = add i64 -2714942213310352592, %5122
  %5124 = sub i64 0, %5123
  %5125 = or i64 %3, 1956493318177979649
  %5126 = xor i64 %3, -1
  %5127 = and i64 1956493318177979649, %5126
  %5128 = add i64 %5127, %3
  %5129 = xor i64 %5121, 0
  %5130 = xor i64 %5129, %5124
  %5131 = xor i64 %5130, %5128
  %5132 = xor i64 %5131, %5125
  %5133 = xor i64 %5132, %5117
  %5134 = xor i64 %5133, %5120
  %5135 = mul i64 %5116, %5134
  %5136 = trunc i64 %5135 to i1
  %5137 = and i64 %17, -2881672020448895002
  %5138 = or i64 2881672020448895001, %17
  %5139 = sub i64 %5138, 2881672020448895001
  %5140 = or i64 %53, 4138648356454121365
  %5141 = and i64 4138648356454121365, %53
  %5142 = xor i64 4138648356454121365, %53
  %5143 = or i64 %5141, %5142
  %5144 = xor i64 %5143, %5139
  %5145 = xor i64 %5144, %5137
  %5146 = xor i64 %5145, -9177562142728430465
  %5147 = xor i64 %5146, %5140
  %5148 = sext i32 %154 to i64
  %5149 = or i64 %5148, -7022749846194138404
  %5150 = xor i64 %5148, -1
  %5151 = and i64 %5150, -1897653288633790952
  %5152 = and i64 %5148, 1897653288633790951
  %5153 = or i64 %5151, %5152
  %5154 = xor i64 8872091654464134340, %5153
  %5155 = xor i64 %5148, -1
  %5156 = or i64 7022749846194138403, %5155
  %5157 = xor i64 %5156, -1
  %5158 = and i64 %5157, -1
  %5159 = or i64 %5154, %5158
  %5160 = or i64 %15, 8836317265621515493
  %5161 = xor i64 %15, -1
  %5162 = and i64 %5161, -6612491124664444709
  %5163 = and i64 %15, 6612491124664444708
  %5164 = or i64 %5162, %5163
  %5165 = xor i64 -2406239522414746562, %5164
  %5166 = xor i64 %15, -1
  %5167 = or i64 -8836317265621515494, %5166
  %5168 = xor i64 %5167, -1
  %5169 = and i64 %5168, -1
  %5170 = or i64 %5165, %5169
  %5171 = add i64 %120, 7561023655863348898
  %5172 = xor i64 7561023655863348898, %120
  %5173 = and i64 7561023655863348898, %120
  %5174 = mul i64 2, %5173
  %5175 = add i64 %5172, %5174
  %5176 = xor i64 %5170, 0
  %5177 = xor i64 %5176, %5175
  %5178 = xor i64 %5177, %5171
  %5179 = xor i64 %5178, %5149
  %5180 = xor i64 %5179, %5160
  %5181 = xor i64 %5180, %5159
  %5182 = mul i64 %5147, %5181
  %5183 = trunc i64 %5182 to i32
  %5184 = sext i32 %148 to i64
  %5185 = and i64 %5184, 1482712601998793616
  %5186 = or i64 -1482712601998793617, %5184
  %5187 = sub i64 %5186, -1482712601998793617
  %5188 = or i64 %37, 6845028390113797342
  %5189 = xor i64 %37, -1
  %5190 = and i64 %5189, -907340820662749326
  %5191 = and i64 %37, 907340820662749325
  %5192 = or i64 %5190, %5191
  %5193 = xor i64 -5938533386277809236, %5192
  %5194 = xor i64 %37, -1
  %5195 = or i64 -6845028390113797343, %5194
  %5196 = xor i64 %5195, -1
  %5197 = and i64 %5196, -1
  %5198 = or i64 %5193, %5197
  %5199 = xor i64 %5187, %5185
  %5200 = xor i64 %5199, %5188
  %5201 = xor i64 %5200, -3968365469890000061
  %5202 = xor i64 %5201, %5198
  %5203 = add i64 %39, 6838051654988117770
  %5204 = sub i64 0, %39
  %5205 = sub i64 6838051654988117770, %5204
  %5206 = add i64 %67, -3574186898796484
  %5207 = xor i64 -3574186898796484, %67
  %5208 = and i64 -3574186898796484, %67
  %5209 = mul i64 2, %5208
  %5210 = add i64 %5207, %5209
  %5211 = xor i64 0, %5203
  %5212 = xor i64 %5211, %5205
  %5213 = xor i64 %5212, %5206
  %5214 = xor i64 %5213, %5210
  %5215 = mul i64 %5202, %5214
  %5216 = trunc i64 %5215 to i32
  %5217 = and i64 %134, 4878453952403778765
  %5218 = xor i64 %134, -1
  %5219 = or i64 -4878453952403778766, %5218
  %5220 = xor i64 %5219, -1
  %5221 = and i64 %5220, -1
  %5222 = add i64 %11, -3776655783798774522
  %5223 = and i64 -3776655783798774522, %11
  %5224 = or i64 -3776655783798774522, %11
  %5225 = add i64 %5223, %5224
  %5226 = or i64 %7, -7548513810035203199
  %5227 = xor i64 %7, -1
  %5228 = and i64 -7548513810035203199, %5227
  %5229 = add i64 %5228, %7
  %5230 = xor i64 %5217, %5229
  %5231 = xor i64 %5230, %5226
  %5232 = xor i64 %5231, %5222
  %5233 = xor i64 %5232, %5225
  %5234 = xor i64 %5233, 5872912389152934461
  %5235 = xor i64 %5234, %5221
  %5236 = and i64 %27, 8829442268088712042
  %5237 = or i64 -8829442268088712043, %27
  %5238 = sub i64 %5237, -8829442268088712043
  %5239 = add i64 %35, -2513942839227053275
  %5240 = sub i64 0, %35
  %5241 = add i64 2513942839227053275, %5240
  %5242 = sub i64 0, %5241
  %5243 = xor i64 %5239, %5238
  %5244 = xor i64 %5243, %5236
  %5245 = xor i64 %5244, 0
  %5246 = xor i64 %5245, %5242
  %5247 = mul i64 %5235, %5246
  %5248 = add i64 %114, -7773986316964398998
  %5249 = sub i64 0, %114
  %5250 = sub i64 -7773986316964398998, %5249
  %5251 = and i64 %19, -2653319637463233648
  %5252 = xor i64 %19, -1
  %5253 = or i64 2653319637463233647, %5252
  %5254 = xor i64 %5253, -1
  %5255 = and i64 %5254, -1
  %5256 = and i64 %55, 330807441404588149
  %5257 = or i64 -330807441404588150, %55
  %5258 = sub i64 %5257, -330807441404588150
  %5259 = xor i64 %5251, %5250
  %5260 = xor i64 %5259, %5248
  %5261 = xor i64 %5260, %5256
  %5262 = xor i64 %5261, %5258
  %5263 = xor i64 %5262, %5255
  %5264 = xor i64 %5263, -5992359893864110793
  %5265 = or i64 %55, 2337195613663899748
  %5266 = and i64 2337195613663899748, %55
  %5267 = xor i64 2337195613663899748, %55
  %5268 = or i64 %5266, %5267
  %5269 = or i64 %25, -1558624133657357759
  %5270 = xor i64 %25, -1
  %5271 = and i64 %5270, 5532897975725771538
  %5272 = and i64 %25, -5532897975725771539
  %5273 = or i64 %5271, %5272
  %5274 = xor i64 -6442844572205950637, %5273
  %5275 = xor i64 %25, -1
  %5276 = or i64 1558624133657357758, %5275
  %5277 = xor i64 %5276, -1
  %5278 = and i64 %5277, -1
  %5279 = or i64 %5274, %5278
  %5280 = sext i32 %dispatcher1 to i64
  %5281 = or i64 %5280, 7821593585171164782
  %5282 = xor i64 %5280, -1
  %5283 = and i64 7821593585171164782, %5282
  %5284 = add i64 %5283, %5280
  %5285 = xor i64 %5268, %5281
  %5286 = xor i64 %5285, %5279
  %5287 = xor i64 %5286, %5269
  %5288 = xor i64 %5287, 0
  %5289 = xor i64 %5288, %5284
  %5290 = xor i64 %5289, %5265
  %5291 = mul i64 %5264, %5290
  %5292 = trunc i64 %5291 to i1
  %5293 = or i64 %1, -7162797602975990315
  %5294 = xor i64 %1, -1
  %5295 = and i64 -7162797602975990315, %5294
  %5296 = add i64 %5295, %1
  %5297 = or i64 %57, -2299205519464398967
  %5298 = xor i64 %57, -1
  %5299 = and i64 -2299205519464398967, %5298
  %5300 = add i64 %5299, %57
  %5301 = or i64 %29, 3044820355778918941
  %5302 = and i64 3044820355778918941, %29
  %5303 = xor i64 3044820355778918941, %29
  %5304 = or i64 %5302, %5303
  %5305 = xor i64 %5297, %5293
  %5306 = xor i64 %5305, 8671073977444500597
  %5307 = xor i64 %5306, %5304
  %5308 = xor i64 %5307, %5300
  %5309 = xor i64 %5308, %5296
  %5310 = xor i64 %5309, %5301
  %5311 = or i64 %11, -2833198665656186398
  %5312 = xor i64 %11, -1
  %5313 = and i64 -2833198665656186398, %5312
  %5314 = add i64 %5313, %11
  %5315 = or i64 %59, -7276865198133501959
  %5316 = xor i64 %59, -1
  %5317 = and i64 %5316, 5074091617052306214
  %5318 = and i64 %59, -5074091617052306215
  %5319 = or i64 %5317, %5318
  %5320 = xor i64 -2492273069605178145, %5319
  %5321 = xor i64 %59, -1
  %5322 = or i64 7276865198133501958, %5321
  %5323 = xor i64 %5322, -1
  %5324 = and i64 %5323, -1
  %5325 = or i64 %5320, %5324
  %5326 = xor i64 %5325, %5315
  %5327 = xor i64 %5326, %5314
  %5328 = xor i64 %5327, %5311
  %5329 = xor i64 %5328, 0
  %5330 = mul i64 %5310, %5329
  %5331 = or i64 %15, 1135634061834870691
  %5332 = xor i64 %15, -1
  %5333 = and i64 1135634061834870691, %5332
  %5334 = add i64 %5333, %15
  %5335 = or i64 %23, 7695026261145256738
  %5336 = and i64 7695026261145256738, %23
  %5337 = xor i64 7695026261145256738, %23
  %5338 = or i64 %5336, %5337
  %5339 = xor i64 %5335, %5331
  %5340 = xor i64 %5339, -4093786987556353139
  %5341 = xor i64 %5340, %5334
  %5342 = xor i64 %5341, %5338
  %5343 = add i64 %7, 8674893370440847040
  %5344 = xor i64 8674893370440847040, %7
  %5345 = and i64 8674893370440847040, %7
  %5346 = mul i64 2, %5345
  %5347 = add i64 %5344, %5346
  %5348 = and i64 %120, 6431424185419595940
  %5349 = xor i64 %120, -1
  %5350 = or i64 -6431424185419595941, %5349
  %5351 = xor i64 %5350, -1
  %5352 = and i64 %5351, -1
  %5353 = add i64 %35, -538920742145282089
  %5354 = sub i64 0, %35
  %5355 = add i64 538920742145282089, %5354
  %5356 = sub i64 0, %5355
  %5357 = xor i64 %5343, %5356
  %5358 = xor i64 %5357, 0
  %5359 = xor i64 %5358, %5353
  %5360 = xor i64 %5359, %5347
  %5361 = xor i64 %5360, %5348
  %5362 = xor i64 %5361, %5352
  %5363 = mul i64 %5342, %5362
  call void @"5784248439022692321"(i32 %5099, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %5136, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* %113, i8*** %5076, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 %5183, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %5216, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %5247, i64* null, i64* null, i1 %5292, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 %5330, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 %5363, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %5364 = load i8**, i8*** %5076, align 8
  %5365 = load i8*, i8** %5364, align 8
  %5366 = bitcast i8* %5365 to void (i32)*
  %.reload48 = load i32, i32* %.reg2mem47, align 4
  call void %5366(i32 %.reload48)
  %5367 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  %5368 = load i32, i32* %5367, align 4
  %5369 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 17
  %5370 = load i32, i32* %5369, align 4
  %5371 = add i32 %5368, %5370
  store i32 %5371, i32* %dispatcher, align 4
  %5372 = load i8*, i8** %36, align 8
  %5373 = load i8, i8* %5372, align 1
  %5374 = and i8 %5373, 1
  %5375 = and i64 %120, 2752790541816499643
  %5376 = xor i64 %120, -1
  %5377 = or i64 -2752790541816499644, %5376
  %5378 = xor i64 %5377, -1
  %5379 = and i64 %5378, -1
  %5380 = or i64 %130, -8781372882625605085
  %5381 = xor i64 %130, -1
  %5382 = and i64 %5381, -2134278832779467767
  %5383 = and i64 %130, 2134278832779467766
  %5384 = or i64 %5382, %5383
  %5385 = xor i64 7224846196350727722, %5384
  %5386 = xor i64 %130, -1
  %5387 = or i64 8781372882625605084, %5386
  %5388 = xor i64 %5387, -1
  %5389 = and i64 %5388, -1
  %5390 = or i64 %5385, %5389
  %5391 = xor i64 %5379, %5390
  %5392 = xor i64 %5391, 8531506397078137133
  %5393 = xor i64 %5392, %5375
  %5394 = xor i64 %5393, %5380
  %5395 = add i64 %49, 3852750562401226327
  %5396 = add i64 8149268805723841096, %49
  %5397 = add i64 %5396, -4296518243322614769
  %5398 = and i64 %122, 4174001461759782336
  %5399 = or i64 -4174001461759782337, %122
  %5400 = sub i64 %5399, -4174001461759782337
  %5401 = xor i64 %5395, 0
  %5402 = xor i64 %5401, %5400
  %5403 = xor i64 %5402, %5398
  %5404 = xor i64 %5403, %5397
  %5405 = mul i64 %5394, %5404
  %5406 = trunc i64 %5405 to i8
  %5407 = icmp eq i8 %5374, %5406
  %5408 = mul i8 %5373, %5373
  %5409 = add i64 %5, 4833916856269502143
  %5410 = and i64 4833916856269502143, %5
  %5411 = or i64 4833916856269502143, %5
  %5412 = add i64 %5410, %5411
  %5413 = and i64 %118, 5390219215205870044
  %5414 = xor i64 %118, -1
  %5415 = or i64 -5390219215205870045, %5414
  %5416 = xor i64 %5415, -1
  %5417 = and i64 %5416, -1
  %5418 = or i64 %39, 550541636633362925
  %5419 = and i64 550541636633362925, %39
  %5420 = xor i64 550541636633362925, %39
  %5421 = or i64 %5419, %5420
  %5422 = xor i64 %5418, %5421
  %5423 = xor i64 %5422, %5412
  %5424 = xor i64 %5423, %5409
  %5425 = xor i64 %5424, 790909959348816197
  %5426 = xor i64 %5425, %5413
  %5427 = xor i64 %5426, %5417
  %5428 = and i64 %59, -7694140143513071622
  %5429 = xor i64 %59, -1
  %5430 = xor i64 -7694140143513071622, %5429
  %5431 = and i64 %5430, -7694140143513071622
  %5432 = add i64 %19, -595440927420803343
  %5433 = add i64 6537191872658671866, %19
  %5434 = add i64 %5433, -7132632800079475209
  %5435 = or i64 %118, 5052129666677832688
  %5436 = and i64 5052129666677832688, %118
  %5437 = xor i64 5052129666677832688, %118
  %5438 = or i64 %5436, %5437
  %5439 = xor i64 %5432, %5431
  %5440 = xor i64 %5439, %5434
  %5441 = xor i64 %5440, %5438
  %5442 = xor i64 %5441, %5428
  %5443 = xor i64 %5442, %5435
  %5444 = xor i64 %5443, -892428404823226897
  %5445 = mul i64 %5427, %5444
  %5446 = trunc i64 %5445 to i8
  %5447 = add i8 %5408, %5446
  %5448 = add i8 %5447, %5373
  %5449 = sub i8 %5448, 107
  %5450 = or i64 %67, 6195551102744711190
  %5451 = xor i64 %67, -1
  %5452 = and i64 %5451, -4551299546708027598
  %5453 = and i64 %67, 4551299546708027597
  %5454 = or i64 %5452, %5453
  %5455 = xor i64 -7697340288864188636, %5454
  %5456 = xor i64 %67, -1
  %5457 = or i64 -6195551102744711191, %5456
  %5458 = xor i64 %5457, -1
  %5459 = and i64 %5458, -1
  %5460 = or i64 %5455, %5459
  %5461 = or i64 %114, 6787348180765651801
  %5462 = and i64 6787348180765651801, %114
  %5463 = xor i64 6787348180765651801, %114
  %5464 = or i64 %5462, %5463
  %5465 = or i64 %43, 2830793148916583449
  %5466 = xor i64 %43, -1
  %5467 = and i64 2830793148916583449, %5466
  %5468 = add i64 %5467, %43
  %5469 = xor i64 %5468, %5461
  %5470 = xor i64 %5469, 57379390288832991
  %5471 = xor i64 %5470, %5450
  %5472 = xor i64 %5471, %5464
  %5473 = xor i64 %5472, %5465
  %5474 = xor i64 %5473, %5460
  %5475 = or i64 %37, -3967776045565356904
  %5476 = and i64 -3967776045565356904, %37
  %5477 = xor i64 -3967776045565356904, %37
  %5478 = or i64 %5476, %5477
  %5479 = or i64 %5, 7800311509252579256
  %5480 = xor i64 %5, -1
  %5481 = and i64 %5480, -656390045316820912
  %5482 = and i64 %5, 656390045316820911
  %5483 = or i64 %5481, %5482
  %5484 = xor i64 -7303627732029681688, %5483
  %5485 = xor i64 %5, -1
  %5486 = or i64 -7800311509252579257, %5485
  %5487 = xor i64 %5486, -1
  %5488 = and i64 %5487, -1
  %5489 = or i64 %5484, %5488
  %5490 = xor i64 %5478, %5475
  %5491 = xor i64 %5490, %5489
  %5492 = xor i64 %5491, 5055651065896400477
  %5493 = xor i64 %5492, %5479
  %5494 = mul i64 %5474, %5493
  %5495 = trunc i64 %5494 to i8
  %5496 = mul i8 %5449, %5495
  %5497 = srem i8 %5496, 2
  %5498 = icmp eq i8 %5497, 0
  %5499 = xor i1 %5498, true
  %5500 = and i1 %5407, %5499
  %5501 = add i1 %5500, %5498
  %5502 = select i1 %5501, i32 388314407, i32 388314409
  %5503 = xor i32 %5502, 14
  store i32 %5503, i32* %0, align 4
  %5504 = call i8** @bf4471601488556574720(i32* %0)
  %5505 = load i8*, i8** %5504, align 8
  indirectbr i8* %5505, [label %loopEnd, label %codeRepl34]

codeRepl35:                                       ; preds = %codeRepl35, %loopStart
  %lt.cast39 = bitcast i32* %.loc36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast39)
  store i64 5221456193252566387, i64* %113, align 8
  %5506 = and i64 %63, -7647186899641235922
  %5507 = xor i64 %63, -1
  %5508 = xor i64 -7647186899641235922, %5507
  %5509 = and i64 %5508, -7647186899641235922
  %5510 = and i64 %27, 1778259062573805683
  %5511 = xor i64 %27, -1
  %5512 = or i64 -1778259062573805684, %5511
  %5513 = xor i64 %5512, -1
  %5514 = and i64 %5513, -1
  %5515 = add i64 %31, -4827927782560868909
  %5516 = xor i64 -4827927782560868909, %31
  %5517 = and i64 -4827927782560868909, %31
  %5518 = mul i64 2, %5517
  %5519 = add i64 %5516, %5518
  %5520 = xor i64 6474866030678216413, %5519
  %5521 = xor i64 %5520, %5514
  %5522 = xor i64 %5521, %5509
  %5523 = xor i64 %5522, %5515
  %5524 = xor i64 %5523, %5506
  %5525 = xor i64 %5524, %5510
  %5526 = or i64 %9, 335287660462391222
  %5527 = xor i64 %9, -1
  %5528 = and i64 335287660462391222, %5527
  %5529 = add i64 %5528, %9
  %5530 = or i64 %9, 4488327655965124923
  %5531 = xor i64 %9, -1
  %5532 = and i64 %5531, 8514200839480676107
  %5533 = and i64 %9, -8514200839480676108
  %5534 = or i64 %5532, %5533
  %5535 = xor i64 5215514391306888752, %5534
  %5536 = xor i64 %9, -1
  %5537 = or i64 -4488327655965124924, %5536
  %5538 = xor i64 %5537, -1
  %5539 = and i64 %5538, -1
  %5540 = or i64 %5535, %5539
  %5541 = xor i64 %5530, %5540
  %5542 = xor i64 %5541, %5529
  %5543 = xor i64 %5542, 1151760886267689333
  %5544 = xor i64 %5543, %5526
  %5545 = mul i64 %5525, %5544
  %5546 = trunc i64 %5545 to i32
  %5547 = alloca i8**, i32 %5546, align 8
  %5548 = or i64 %114, 5183442796753730441
  %5549 = and i64 5183442796753730441, %114
  %5550 = xor i64 5183442796753730441, %114
  %5551 = or i64 %5549, %5550
  %5552 = add i64 %27, 4484663678039257718
  %5553 = add i64 8187645029494719964, %27
  %5554 = add i64 %5553, -3702981351455462246
  %5555 = xor i64 %5551, %5552
  %5556 = xor i64 %5555, %5548
  %5557 = xor i64 %5556, 2413857313021271993
  %5558 = xor i64 %5557, %5554
  %5559 = and i64 %51, 4993242734831557157
  %5560 = or i64 -4993242734831557158, %51
  %5561 = sub i64 %5560, -4993242734831557158
  %5562 = and i64 %130, 1349359822911418543
  %5563 = xor i64 %130, -1
  %5564 = or i64 -1349359822911418544, %5563
  %5565 = xor i64 %5564, -1
  %5566 = and i64 %5565, -1
  %5567 = xor i64 %5561, %5562
  %5568 = xor i64 %5567, %5559
  %5569 = xor i64 %5568, 0
  %5570 = xor i64 %5569, %5566
  %5571 = mul i64 %5558, %5570
  %5572 = trunc i64 %5571 to i32
  %5573 = and i64 %57, -1479093127198152804
  %5574 = xor i64 %57, -1
  %5575 = xor i64 -1479093127198152804, %5574
  %5576 = and i64 %5575, -1479093127198152804
  %5577 = and i64 %65, 7857668864179308519
  %5578 = xor i64 %65, -1
  %5579 = or i64 -7857668864179308520, %5578
  %5580 = xor i64 %5579, -1
  %5581 = and i64 %5580, -1
  %5582 = xor i64 %5576, %5581
  %5583 = xor i64 %5582, %5573
  %5584 = xor i64 %5583, -1032282941631016803
  %5585 = xor i64 %5584, %5577
  %5586 = and i64 %3, -6404793747543832724
  %5587 = or i64 6404793747543832723, %3
  %5588 = sub i64 %5587, 6404793747543832723
  %5589 = add i64 %1, 7052392928498606277
  %5590 = sub i64 0, %1
  %5591 = add i64 -7052392928498606277, %5590
  %5592 = sub i64 0, %5591
  %5593 = add i64 %3, -5819463401188250704
  %5594 = add i64 3982012480545642134, %3
  %5595 = add i64 %5594, 8645268191975658778
  %5596 = xor i64 0, %5589
  %5597 = xor i64 %5596, %5592
  %5598 = xor i64 %5597, %5586
  %5599 = xor i64 %5598, %5593
  %5600 = xor i64 %5599, %5588
  %5601 = xor i64 %5600, %5595
  %5602 = mul i64 %5585, %5601
  %5603 = and i64 %130, -1974971981277065631
  %5604 = xor i64 %130, -1
  %5605 = xor i64 -1974971981277065631, %5604
  %5606 = and i64 %5605, -1974971981277065631
  %5607 = or i64 %9, -2610409546833307463
  %5608 = and i64 -2610409546833307463, %9
  %5609 = xor i64 -2610409546833307463, %9
  %5610 = or i64 %5608, %5609
  %5611 = xor i64 %5606, %5610
  %5612 = xor i64 %5611, %5603
  %5613 = xor i64 %5612, %5607
  %5614 = xor i64 %5613, -2363714969922141359
  %5615 = and i64 %55, -1685656421287305703
  %5616 = xor i64 %55, -1
  %5617 = xor i64 -1685656421287305703, %5616
  %5618 = and i64 %5617, -1685656421287305703
  %5619 = or i64 %7, 7604711927017979432
  %5620 = xor i64 %7, -1
  %5621 = and i64 7604711927017979432, %5620
  %5622 = add i64 %5621, %7
  %5623 = and i64 %128, -3496254725517214219
  %5624 = xor i64 %128, -1
  %5625 = xor i64 -3496254725517214219, %5624
  %5626 = and i64 %5625, -3496254725517214219
  %5627 = xor i64 %5626, %5619
  %5628 = xor i64 %5627, 0
  %5629 = xor i64 %5628, %5622
  %5630 = xor i64 %5629, %5615
  %5631 = xor i64 %5630, %5623
  %5632 = xor i64 %5631, %5618
  %5633 = mul i64 %5614, %5632
  %5634 = trunc i64 %5633 to i32
  %5635 = sext i32 %154 to i64
  %5636 = or i64 %5635, 4872720512624279313
  %5637 = xor i64 %5635, -1
  %5638 = and i64 4872720512624279313, %5637
  %5639 = add i64 %5638, %5635
  %5640 = and i64 %31, 3488869665482472758
  %5641 = or i64 -3488869665482472759, %31
  %5642 = sub i64 %5641, -3488869665482472759
  %5643 = xor i64 %5640, 4576619398064941385
  %5644 = xor i64 %5643, %5642
  %5645 = xor i64 %5644, %5639
  %5646 = xor i64 %5645, %5636
  %5647 = or i64 %61, 5784585124132411142
  %5648 = xor i64 %61, -1
  %5649 = and i64 %5648, 4628710423430605708
  %5650 = and i64 %61, -4628710423430605709
  %5651 = or i64 %5649, %5650
  %5652 = xor i64 1187404519614545034, %5651
  %5653 = xor i64 %61, -1
  %5654 = or i64 -5784585124132411143, %5653
  %5655 = xor i64 %5654, -1
  %5656 = and i64 %5655, -1
  %5657 = or i64 %5652, %5656
  %5658 = add i64 %15, -2112612775994962206
  %5659 = add i64 5369659839770559174, %15
  %5660 = sub i64 %5659, 7482272615765521380
  %5661 = or i64 %1, 6802567195595693451
  %5662 = and i64 6802567195595693451, %1
  %5663 = xor i64 6802567195595693451, %1
  %5664 = or i64 %5662, %5663
  %5665 = xor i64 %5661, %5657
  %5666 = xor i64 %5665, %5647
  %5667 = xor i64 %5666, %5660
  %5668 = xor i64 %5667, %5658
  %5669 = xor i64 %5668, %5664
  %5670 = xor i64 %5669, 0
  %5671 = mul i64 %5646, %5670
  call void @"5784248439022692321"(i32 9, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 %5572, i1* null, i64* null, i8*** null, i64* %113, i8*** %5547, i64 %5602, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 %5634, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 %5671, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %5672 = load i8**, i8*** %5547, align 8
  %5673 = load i8*, i8** %5672, align 8
  %5674 = bitcast i8* %5673 to i1 (float*, float*, i8*, float*, i32*)*
  %.reload16 = load i8*, i8** %.reg2mem15, align 8
  %.reload34 = load float*, float** %.reg2mem33, align 8
  %targetBlock37 = call i1 %5674(float* %136, float* %137, i8* %.reload16, float* %.reload34, i32* %.loc36)
  %.reload38 = load i32, i32* %.loc36, align 4
  store i32 %.reload38, i32* %.reload38.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast39)
  %5675 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 33
  %5676 = load i32, i32* %5675, align 4
  %5677 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 37
  %5678 = load i32, i32* %5677, align 4
  %5679 = srem i32 %5676, %5678
  %5680 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 32
  %5681 = load i32, i32* %5680, align 4
  %5682 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 19
  %5683 = load i32, i32* %5682, align 4
  %5684 = add i32 %5681, 1035071861
  %5685 = sub i32 %5684, %5683
  %5686 = sub i32 %5685, 1035071861
  %5687 = select i1 %targetBlock37, i32 %5679, i32 %5686
  store i32 %5687, i32* %dispatcher, align 4
  %5688 = load i8*, i8** %54, align 8
  %5689 = load i8, i8* %5688, align 1
  %5690 = and i8 %5689, 1
  %5691 = icmp eq i8 %5690, 1
  %5692 = mul i8 %5689, %5689
  %5693 = add i8 %5692, %5689
  %5694 = srem i8 %5693, 2
  %5695 = icmp eq i8 %5694, 0
  %5696 = or i1 %5691, %5695
  %5697 = select i1 %5696, i32 388314407, i32 388314409
  %5698 = or i32 %5697, 14
  %5699 = and i32 %5697, 14
  %5700 = sub i32 %5698, %5699
  store i32 %5700, i32* %0, align 4
  %5701 = call i8** @bf4471601488556574720(i32* %0)
  %5702 = load i8*, i8** %5701, align 8
  indirectbr i8* %5702, [label %loopEnd, label %codeRepl35]

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %5703 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %5704 = add i64 %9, 3996374836428353963
  %5705 = sub i64 0, %9
  %5706 = add i64 -3996374836428353963, %5705
  %5707 = sub i64 0, %5706
  %5708 = or i64 %116, -850918418506509566
  %5709 = xor i64 %116, -1
  %5710 = and i64 %5709, 2845954539687979390
  %5711 = and i64 %116, -2845954539687979391
  %5712 = or i64 %5710, %5711
  %5713 = xor i64 -3220580987912701316, %5712
  %5714 = xor i64 %116, -1
  %5715 = or i64 850918418506509565, %5714
  %5716 = xor i64 %5715, -1
  %5717 = and i64 %5716, -1
  %5718 = or i64 %5713, %5717
  %5719 = and i64 %35, 7382253509310755478
  %5720 = or i64 -7382253509310755479, %35
  %5721 = sub i64 %5720, -7382253509310755479
  %5722 = xor i64 %5704, 6482954892623256931
  %5723 = xor i64 %5722, %5707
  %5724 = xor i64 %5723, %5721
  %5725 = xor i64 %5724, %5708
  %5726 = xor i64 %5725, %5718
  %5727 = xor i64 %5726, %5719
  %5728 = and i64 %130, 2383906235896737595
  %5729 = or i64 -2383906235896737596, %130
  %5730 = sub i64 %5729, -2383906235896737596
  %5731 = or i64 %118, -3724259826987245082
  %5732 = and i64 -3724259826987245082, %118
  %5733 = xor i64 -3724259826987245082, %118
  %5734 = or i64 %5732, %5733
  %5735 = and i64 %47, 3506699643266666102
  %5736 = xor i64 %47, -1
  %5737 = xor i64 3506699643266666102, %5736
  %5738 = and i64 %5737, 3506699643266666102
  %5739 = xor i64 %5738, %5734
  %5740 = xor i64 %5739, %5730
  %5741 = xor i64 %5740, %5731
  %5742 = xor i64 %5741, 5907024697266156469
  %5743 = xor i64 %5742, %5735
  %5744 = xor i64 %5743, %5728
  %5745 = mul i64 %5727, %5744
  %5746 = trunc i64 %5745 to i32
  store i32 %5746, i32* %5703, align 4
  %5747 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %5747, align 4
  %5748 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %5748, align 4
  %5749 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %5749, align 4
  %5750 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %5750, align 4
  %5751 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %5751, align 4
  %5752 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %5752, align 4
  %5753 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %5753, align 4
  %5754 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %5754, align 4
  %5755 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %5755, align 4
  %5756 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %5756, align 4
  %5757 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 22
  store i32 21, i32* %5757, align 4
  %5758 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 24
  store i32 23, i32* %5758, align 4
  %5759 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 26
  store i32 25, i32* %5759, align 4
  %5760 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 28
  %5761 = and i64 %132, -8864432949851996546
  %5762 = xor i64 %132, -1
  %5763 = or i64 8864432949851996545, %5762
  %5764 = xor i64 %5763, -1
  %5765 = and i64 %5764, -1
  %5766 = add i64 %37, 1636613614234022611
  %5767 = xor i64 1636613614234022611, %37
  %5768 = and i64 1636613614234022611, %37
  %5769 = mul i64 2, %5768
  %5770 = add i64 %5767, %5769
  %5771 = xor i64 %5761, %5766
  %5772 = xor i64 %5771, 1301442241441498201
  %5773 = xor i64 %5772, %5765
  %5774 = xor i64 %5773, %5770
  %5775 = or i64 %5, 2226598214137207698
  %5776 = and i64 2226598214137207698, %5
  %5777 = xor i64 2226598214137207698, %5
  %5778 = or i64 %5776, %5777
  %5779 = and i64 %69, 54197240319788302
  %5780 = or i64 -54197240319788303, %69
  %5781 = sub i64 %5780, -54197240319788303
  %5782 = xor i64 %5775, 5208373999609342355
  %5783 = xor i64 %5782, %5779
  %5784 = xor i64 %5783, %5781
  %5785 = xor i64 %5784, %5778
  %5786 = mul i64 %5774, %5785
  %5787 = trunc i64 %5786 to i32
  store i32 %5787, i32* %5760, align 4
  %5788 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %5788, align 4
  %5789 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 32
  %5790 = or i64 %27, 4308447905973350315
  %5791 = xor i64 %27, -1
  %5792 = and i64 4308447905973350315, %5791
  %5793 = add i64 %5792, %27
  %5794 = or i64 %19, -1585936998751125151
  %5795 = xor i64 %19, -1
  %5796 = and i64 -1585936998751125151, %5795
  %5797 = add i64 %5796, %19
  %5798 = or i64 %118, -6317715482652300865
  %5799 = xor i64 %118, -1
  %5800 = and i64 %5799, 909166791810244653
  %5801 = and i64 %118, -909166791810244654
  %5802 = or i64 %5800, %5801
  %5803 = xor i64 -6571607978273125998, %5802
  %5804 = xor i64 %118, -1
  %5805 = or i64 6317715482652300864, %5804
  %5806 = xor i64 %5805, -1
  %5807 = and i64 %5806, -1
  %5808 = or i64 %5803, %5807
  %5809 = xor i64 4754002650410099061, %5797
  %5810 = xor i64 %5809, %5794
  %5811 = xor i64 %5810, %5790
  %5812 = xor i64 %5811, %5793
  %5813 = xor i64 %5812, %5798
  %5814 = xor i64 %5813, %5808
  %5815 = add i64 %13, -8016927140866399858
  %5816 = sub i64 0, %13
  %5817 = sub i64 -8016927140866399858, %5816
  %5818 = add i64 %61, 9167442990422149890
  %5819 = add i64 4354207145707818846, %61
  %5820 = add i64 %5819, 4813235844714331044
  %5821 = xor i64 -5199821247182441277, %5818
  %5822 = xor i64 %5821, %5817
  %5823 = xor i64 %5822, %5815
  %5824 = xor i64 %5823, %5820
  %5825 = mul i64 %5814, %5824
  %5826 = trunc i64 %5825 to i32
  store i32 %5826, i32* %5789, align 4
  %5827 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 34
  store i32 33, i32* %5827, align 4
  %5828 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 36
  store i32 35, i32* %5828, align 4
  %5829 = getelementptr inbounds [38 x i32], [38 x i32]* %lookupTable, i32 0, i32 0
  %5830 = load i32, i32* %5829, align 4
  store i32 %5830, i32* %dispatcher, align 4
  %5831 = load i8*, i8** %74, align 8
  %5832 = load i8, i8* %5831, align 1
  %5833 = and i8 %5832, 1
  %5834 = icmp eq i8 %5833, 1
  %5835 = mul i8 %5832, %5832
  %5836 = add i8 %5835, %5832
  %5837 = srem i8 %5836, 2
  %5838 = icmp eq i8 %5837, 0
  %5839 = or i1 %5834, %5838
  %5840 = select i1 %5839, i32 388314400, i32 388314375
  %5841 = add i64 %116, 597004156605009362
  %5842 = add i64 -1942999549523186456, %116
  %5843 = sub i64 %5842, -2540003706128195818
  %5844 = or i64 %73, 3112019012508744934
  %5845 = and i64 3112019012508744934, %73
  %5846 = xor i64 3112019012508744934, %73
  %5847 = or i64 %5845, %5846
  %5848 = or i64 %3, 9134038275411181145
  %5849 = xor i64 %3, -1
  %5850 = and i64 9134038275411181145, %5849
  %5851 = add i64 %5850, %3
  %5852 = xor i64 %5847, %5848
  %5853 = xor i64 %5852, %5841
  %5854 = xor i64 %5853, %5843
  %5855 = xor i64 %5854, 5859015939814399687
  %5856 = xor i64 %5855, %5851
  %5857 = xor i64 %5856, %5844
  %5858 = sext i32 %148 to i64
  %5859 = add i64 %5858, -1095706095239760183
  %5860 = add i64 -6252988795580677405, %5858
  %5861 = add i64 %5860, 5157282700340917222
  %5862 = and i64 %55, 3335862896927064668
  %5863 = xor i64 %55, -1
  %5864 = xor i64 3335862896927064668, %5863
  %5865 = and i64 %5864, 3335862896927064668
  %5866 = and i64 %27, 4345379365784272592
  %5867 = or i64 -4345379365784272593, %27
  %5868 = sub i64 %5867, -4345379365784272593
  %5869 = xor i64 4072501998403072929, %5865
  %5870 = xor i64 %5869, %5862
  %5871 = xor i64 %5870, %5859
  %5872 = xor i64 %5871, %5866
  %5873 = xor i64 %5872, %5861
  %5874 = xor i64 %5873, %5868
  %5875 = mul i64 %5857, %5874
  %5876 = trunc i64 %5875 to i32
  %5877 = xor i32 %5840, %5876
  store i32 %5877, i32* %0, align 4
  %5878 = call i8** @bf4471601488556574720(i32* %0)
  %5879 = load i8*, i8** %5878, align 8
  indirectbr i8* %5879, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %5880 = load i8*, i8** %52, align 8
  %5881 = load i8, i8* %5880, align 1
  %5882 = mul i8 %5881, 2
  %5883 = mul i8 %5881, 2
  %5884 = sub i8 0, %5883
  %5885 = sub i8 2, %5884
  %5886 = mul i8 %5882, %5885
  %5887 = srem i8 %5886, 4
  %5888 = icmp eq i8 %5887, 0
  %5889 = mul i8 %5881, %5881
  %5890 = mul i8 %5889, %5881
  %5891 = add i8 %5890, %5881
  %5892 = srem i8 %5891, 2
  %5893 = add i64 %45, -3380534784757294239
  %5894 = sub i64 0, %45
  %5895 = sub i64 -3380534784757294239, %5894
  %5896 = add i64 %49, 3286726975423406947
  %5897 = add i64 -247007971800448998, %49
  %5898 = add i64 %5897, 3533734947223855945
  %5899 = xor i64 %5898, %5895
  %5900 = xor i64 %5899, %5896
  %5901 = xor i64 %5900, 70656143647787747
  %5902 = xor i64 %5901, %5893
  %5903 = add i64 %73, 2580248020059967682
  %5904 = and i64 2580248020059967682, %73
  %5905 = or i64 2580248020059967682, %73
  %5906 = add i64 %5904, %5905
  %5907 = sext i32 %148 to i64
  %5908 = and i64 %5907, 5662521782224001116
  %5909 = xor i64 %5907, -1
  %5910 = xor i64 5662521782224001116, %5909
  %5911 = and i64 %5910, 5662521782224001116
  %5912 = and i64 %45, 4892420703279464360
  %5913 = xor i64 %45, -1
  %5914 = xor i64 4892420703279464360, %5913
  %5915 = and i64 %5914, 4892420703279464360
  %5916 = xor i64 %5906, %5908
  %5917 = xor i64 %5916, %5912
  %5918 = xor i64 %5917, 0
  %5919 = xor i64 %5918, %5915
  %5920 = xor i64 %5919, %5911
  %5921 = xor i64 %5920, %5903
  %5922 = mul i64 %5902, %5921
  %5923 = trunc i64 %5922 to i8
  %5924 = icmp eq i8 %5892, %5923
  %5925 = and i64 %17, -1115216131759578017
  %5926 = xor i64 %17, -1
  %5927 = or i64 1115216131759578016, %5926
  %5928 = xor i64 %5927, -1
  %5929 = and i64 %5928, -1
  %5930 = and i64 %15, -3066087770479361983
  %5931 = or i64 3066087770479361982, %15
  %5932 = sub i64 %5931, 3066087770479361982
  %5933 = xor i64 %5925, %5932
  %5934 = xor i64 %5933, %5929
  %5935 = xor i64 %5934, 2247745296848355585
  %5936 = xor i64 %5935, %5930
  %5937 = add i64 %41, -545385269128929541
  %5938 = sub i64 0, %41
  %5939 = sub i64 -545385269128929541, %5938
  %5940 = and i64 %47, -9117745190328032855
  %5941 = or i64 9117745190328032854, %47
  %5942 = sub i64 %5941, 9117745190328032854
  %5943 = and i64 %29, -2795444305026110172
  %5944 = or i64 2795444305026110171, %29
  %5945 = sub i64 %5944, 2795444305026110171
  %5946 = xor i64 -3321798303476252927, %5942
  %5947 = xor i64 %5946, %5939
  %5948 = xor i64 %5947, %5940
  %5949 = xor i64 %5948, %5943
  %5950 = xor i64 %5949, %5937
  %5951 = xor i64 %5950, %5945
  %5952 = mul i64 %5936, %5951
  %5953 = trunc i64 %5952 to i1
  %5954 = xor i1 %5924, %5953
  %5955 = xor i1 %5888, %5954
  %5956 = and i1 %5955, %5888
  %5957 = and i64 %37, -3843100739435103630
  %5958 = xor i64 %37, -1
  %5959 = xor i64 -3843100739435103630, %5958
  %5960 = and i64 %5959, -3843100739435103630
  %5961 = add i64 %27, -1214408187502771899
  %5962 = sub i64 0, %27
  %5963 = add i64 1214408187502771899, %5962
  %5964 = sub i64 0, %5963
  %5965 = add i64 %29, -1729482699397164524
  %5966 = add i64 -891774627188966463, %29
  %5967 = sub i64 %5966, 837708072208198061
  %5968 = xor i64 %5960, %5967
  %5969 = xor i64 %5968, %5957
  %5970 = xor i64 %5969, %5961
  %5971 = xor i64 %5970, -4511891098286842927
  %5972 = xor i64 %5971, %5965
  %5973 = xor i64 %5972, %5964
  %5974 = and i64 %33, -5075950372774519962
  %5975 = xor i64 %33, -1
  %5976 = or i64 5075950372774519961, %5975
  %5977 = xor i64 %5976, -1
  %5978 = and i64 %5977, -1
  %5979 = and i64 %27, 8994862202769347819
  %5980 = xor i64 %27, -1
  %5981 = or i64 -8994862202769347820, %5980
  %5982 = xor i64 %5981, -1
  %5983 = and i64 %5982, -1
  %5984 = and i64 %124, -3648955068512497425
  %5985 = xor i64 %124, -1
  %5986 = xor i64 -3648955068512497425, %5985
  %5987 = and i64 %5986, -3648955068512497425
  %5988 = xor i64 %5979, %5978
  %5989 = xor i64 %5988, -4866856823704262009
  %5990 = xor i64 %5989, %5984
  %5991 = xor i64 %5990, %5987
  %5992 = xor i64 %5991, %5983
  %5993 = xor i64 %5992, %5974
  %5994 = mul i64 %5973, %5993
  %5995 = trunc i64 %5994 to i32
  %5996 = add i64 %49, 4373441854029319077
  %5997 = xor i64 4373441854029319077, %49
  %5998 = and i64 4373441854029319077, %49
  %5999 = mul i64 2, %5998
  %6000 = add i64 %5997, %5999
  %6001 = and i64 %53, 5514478210636447616
  %6002 = xor i64 %53, -1
  %6003 = xor i64 5514478210636447616, %6002
  %6004 = and i64 %6003, 5514478210636447616
  %6005 = or i64 %65, -1506131348867515870
  %6006 = xor i64 %65, -1
  %6007 = and i64 -1506131348867515870, %6006
  %6008 = add i64 %6007, %65
  %6009 = xor i64 %6001, %6005
  %6010 = xor i64 %6009, %6000
  %6011 = xor i64 %6010, 6340845208929791097
  %6012 = xor i64 %6011, %5996
  %6013 = xor i64 %6012, %6008
  %6014 = xor i64 %6013, %6004
  %6015 = and i64 %53, -8138115113033525497
  %6016 = or i64 8138115113033525496, %53
  %6017 = sub i64 %6016, 8138115113033525496
  %6018 = and i64 %59, 3978907134315192433
  %6019 = xor i64 %59, -1
  %6020 = xor i64 3978907134315192433, %6019
  %6021 = and i64 %6020, 3978907134315192433
  %6022 = xor i64 %6017, %6015
  %6023 = xor i64 %6022, -6673288034251931087
  %6024 = xor i64 %6023, %6021
  %6025 = xor i64 %6024, %6018
  %6026 = mul i64 %6014, %6025
  %6027 = trunc i64 %6026 to i32
  %6028 = select i1 %5956, i32 %5995, i32 %6027
  %6029 = xor i32 %6028, -1
  %6030 = and i32 %6029, 30
  %6031 = and i32 %6028, -31
  %6032 = or i32 %6030, %6031
  store i32 %6032, i32* %0, align 4
  %6033 = call i8** @bf4471601488556574720(i32* %0)
  %6034 = load i8*, i8** %6033, align 8
  indirectbr i8* %6034, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl35, %codeRepl34, %codeRepl32, %4719, %4663, %4586, %4407, %codeRepl27, %3979, %3857, %codeRepl26, %3447, %3373, %3261, %3062, %codeRepl19, %2376, %2206, %.loopexit, %1928, %1853, %1814, %codeRepl3, %1361, %codeRepl1, %1070, %codeRepl, %633, %603, %398, %.preheader, %EntryBasicBlockSplit
  %6035 = load i8*, i8** %14, align 8
  %6036 = load i8, i8* %6035, align 1
  %6037 = mul i8 %6036, 2
  %6038 = mul i8 %6036, 2
  %6039 = or i64 %73, 4797545037786300443
  %6040 = xor i64 %73, -1
  %6041 = and i64 %6040, -6615144457110794161
  %6042 = and i64 %73, 6615144457110794160
  %6043 = or i64 %6041, %6042
  %6044 = xor i64 -1826767233713139628, %6043
  %6045 = xor i64 %73, -1
  %6046 = or i64 -4797545037786300444, %6045
  %6047 = xor i64 %6046, -1
  %6048 = and i64 %6047, -1
  %6049 = or i64 %6044, %6048
  %6050 = or i64 %73, 4292342980610915578
  %6051 = and i64 4292342980610915578, %73
  %6052 = xor i64 4292342980610915578, %73
  %6053 = or i64 %6051, %6052
  %6054 = xor i64 6553455532894676445, %6053
  %6055 = xor i64 %6054, %6049
  %6056 = xor i64 %6055, %6050
  %6057 = xor i64 %6056, %6039
  %6058 = or i64 %65, 5785468649322503147
  %6059 = xor i64 %65, -1
  %6060 = and i64 %6059, 5758274670129559737
  %6061 = and i64 %65, -5758274670129559738
  %6062 = or i64 %6060, %6061
  %6063 = xor i64 2279838840853455698, %6062
  %6064 = xor i64 %65, -1
  %6065 = or i64 -5785468649322503148, %6064
  %6066 = xor i64 %6065, -1
  %6067 = and i64 %6066, -1
  %6068 = or i64 %6063, %6067
  %6069 = or i64 %47, -561948631437195828
  %6070 = xor i64 %47, -1
  %6071 = and i64 %6070, -7572052263322511901
  %6072 = and i64 %47, 7572052263322511900
  %6073 = or i64 %6071, %6072
  %6074 = xor i64 7987455167510564911, %6073
  %6075 = xor i64 %47, -1
  %6076 = or i64 561948631437195827, %6075
  %6077 = xor i64 %6076, -1
  %6078 = and i64 %6077, -1
  %6079 = or i64 %6074, %6078
  %6080 = and i64 %120, -3089167461011164780
  %6081 = or i64 3089167461011164779, %120
  %6082 = sub i64 %6081, 3089167461011164779
  %6083 = xor i64 %6082, %6080
  %6084 = xor i64 %6083, %6058
  %6085 = xor i64 %6084, %6079
  %6086 = xor i64 %6085, %6068
  %6087 = xor i64 %6086, -8094518150983830294
  %6088 = xor i64 %6087, %6069
  %6089 = mul i64 %6057, %6088
  %6090 = trunc i64 %6089 to i8
  %6091 = add i8 %6090, %6038
  %6092 = mul i8 %6037, %6091
  %6093 = srem i8 %6092, 4
  %6094 = icmp eq i8 %6093, 0
  %6095 = mul i8 %6036, %6036
  %6096 = add i8 %6095, %6036
  %6097 = srem i8 %6096, 2
  %6098 = icmp eq i8 %6097, 0
  %6099 = or i1 %6094, %6098
  %6100 = select i1 %6099, i32 388314375, i32 388314423
  %6101 = or i32 %6100, 48
  %6102 = and i64 %15, 7919340262618116849
  %6103 = xor i64 %15, -1
  %6104 = or i64 -7919340262618116850, %6103
  %6105 = xor i64 %6104, -1
  %6106 = and i64 %6105, -1
  %6107 = and i64 %29, -5047541235039557844
  %6108 = xor i64 %29, -1
  %6109 = or i64 5047541235039557843, %6108
  %6110 = xor i64 %6109, -1
  %6111 = and i64 %6110, -1
  %6112 = xor i64 -8165668966779047781, %6107
  %6113 = xor i64 %6112, %6102
  %6114 = xor i64 %6113, %6106
  %6115 = xor i64 %6114, %6111
  %6116 = add i64 %59, 5528595773918262017
  %6117 = add i64 -6941910015025260956, %59
  %6118 = add i64 %6117, -5976238284766028643
  %6119 = or i64 %37, -3386329919481444216
  %6120 = xor i64 %37, -1
  %6121 = and i64 -3386329919481444216, %6120
  %6122 = add i64 %6121, %37
  %6123 = or i64 %19, 1019150859825978715
  %6124 = xor i64 %19, -1
  %6125 = and i64 %6124, 3420801433451037980
  %6126 = and i64 %19, -3420801433451037981
  %6127 = or i64 %6125, %6126
  %6128 = xor i64 2404324655697041479, %6127
  %6129 = xor i64 %19, -1
  %6130 = or i64 -1019150859825978716, %6129
  %6131 = xor i64 %6130, -1
  %6132 = and i64 %6131, -1
  %6133 = or i64 %6128, %6132
  %6134 = xor i64 %6119, -7050907034311849072
  %6135 = xor i64 %6134, %6123
  %6136 = xor i64 %6135, %6133
  %6137 = xor i64 %6136, %6122
  %6138 = xor i64 %6137, %6118
  %6139 = xor i64 %6138, %6116
  %6140 = mul i64 %6115, %6139
  %6141 = trunc i64 %6140 to i32
  %6142 = and i32 %6100, %6141
  %6143 = sub i32 %6101, %6142
  store i32 %6143, i32* %0, align 4
  %6144 = call i8** @bf4471601488556574720(i32* %0)
  %6145 = load i8*, i8** %6144, align 8
  indirectbr i8* %6145, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal fastcc i32 @main_loop(float* %0, float* %1, i8* %2, float* %3) unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h9549842938191327224(i64 388314410)
  %6 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %5
  store i8* blockaddress(@main_loop, %loopEnd), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314369)
  %8 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %7
  store i8* blockaddress(@main_loop, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314385)
  %10 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %9
  store i8* blockaddress(@main_loop, %6766), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314421)
  %12 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %11
  store i8* blockaddress(@main_loop, %6741), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314427)
  %14 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %13
  store i8* blockaddress(@main_loop, %6619), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314430)
  %16 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %15
  store i8* blockaddress(@main_loop, %6482), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314404)
  %18 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %17
  store i8* blockaddress(@main_loop, %codeRepl61), i8** %18, align 8
  %19 = call i64 @h9549842938191327224(i64 388314420)
  %20 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %19
  store i8* blockaddress(@main_loop, %6113), i8** %20, align 8
  %21 = call i64 @h9549842938191327224(i64 388314402)
  %22 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %21
  store i8* blockaddress(@main_loop, %2500), i8** %22, align 8
  %23 = call i64 @h9549842938191327224(i64 388314413)
  %24 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %23
  store i8* blockaddress(@main_loop, %5696), i8** %24, align 8
  %25 = call i64 @h9549842938191327224(i64 388314375)
  %26 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %25
  store i8* blockaddress(@main_loop, %5638), i8** %26, align 8
  %27 = call i64 @h9549842938191327224(i64 388314372)
  %28 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %27
  store i8* blockaddress(@main_loop, %5327), i8** %28, align 8
  %29 = call i64 @h9549842938191327224(i64 388314368)
  %30 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %29
  store i8* blockaddress(@main_loop, %5574), i8** %30, align 8
  %31 = call i64 @h9549842938191327224(i64 388314381)
  %32 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %31
  store i8* blockaddress(@main_loop, %5396), i8** %32, align 8
  %33 = call i64 @h9549842938191327224(i64 388314403)
  %34 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %33
  store i8* blockaddress(@main_loop, %5124), i8** %34, align 8
  %35 = call i64 @h9549842938191327224(i64 388314397)
  %36 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %35
  store i8* blockaddress(@main_loop, %4354), i8** %36, align 8
  %37 = call i64 @h9549842938191327224(i64 388314401)
  %38 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %37
  store i8* blockaddress(@main_loop, %loopStart), i8** %38, align 8
  %39 = call i64 @h9549842938191327224(i64 388314386)
  %40 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %39
  store i8* blockaddress(@main_loop, %.loopexit), i8** %40, align 8
  %41 = call i64 @h9549842938191327224(i64 388314400)
  %42 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %41
  store i8* blockaddress(@main_loop, %3847), i8** %42, align 8
  %43 = call i64 @h9549842938191327224(i64 388314419)
  %44 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %43
  store i8* blockaddress(@main_loop, %3965), i8** %44, align 8
  %45 = call i64 @h9549842938191327224(i64 388314389)
  %46 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %45
  store i8* blockaddress(@main_loop, %3385), i8** %46, align 8
  %47 = call i64 @h9549842938191327224(i64 388314415)
  %48 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %47
  store i8* blockaddress(@main_loop, %4050), i8** %48, align 8
  %49 = call i64 @h9549842938191327224(i64 388314431)
  %50 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %49
  store i8* blockaddress(@main_loop, %3257), i8** %50, align 8
  %51 = call i64 @h9549842938191327224(i64 388314371)
  %52 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %51
  store i8* blockaddress(@main_loop, %3047), i8** %52, align 8
  %53 = call i64 @h9549842938191327224(i64 388314390)
  %54 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %53
  store i8* blockaddress(@main_loop, %codeRepl53), i8** %54, align 8
  %55 = call i64 @h9549842938191327224(i64 388314417)
  %56 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %55
  store i8* blockaddress(@main_loop, %6679), i8** %56, align 8
  %57 = call i64 @h9549842938191327224(i64 388314426)
  %58 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %57
  store i8* blockaddress(@main_loop, %3282), i8** %58, align 8
  %59 = call i64 @h9549842938191327224(i64 388314411)
  %60 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %59
  store i8* blockaddress(@main_loop, %2953), i8** %60, align 8
  %61 = call i64 @h9549842938191327224(i64 388314422)
  %62 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %61
  store i8* blockaddress(@main_loop, %4937), i8** %62, align 8
  %63 = call i64 @h9549842938191327224(i64 388314405)
  %64 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %63
  store i8* blockaddress(@main_loop, %2687), i8** %64, align 8
  %65 = call i64 @h9549842938191327224(i64 388314407)
  %66 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %65
  store i8* blockaddress(@main_loop, %defaultSwitchBasicBlock), i8** %66, align 8
  %67 = call i64 @h9549842938191327224(i64 388314408)
  %68 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %67
  store i8* blockaddress(@main_loop, %5451), i8** %68, align 8
  %69 = call i64 @h9549842938191327224(i64 388314391)
  %70 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %69
  store i8* blockaddress(@main_loop, %2403), i8** %70, align 8
  %71 = call i64 @h9549842938191327224(i64 388314370)
  %72 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %71
  store i8* blockaddress(@main_loop, %codeRepl48), i8** %72, align 8
  %73 = call i64 @h9549842938191327224(i64 388314424)
  %74 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %73
  store i8* blockaddress(@main_loop, %460), i8** %74, align 8
  %75 = call i64 @h9549842938191327224(i64 388314373)
  %76 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %75
  store i8* blockaddress(@main_loop, %835), i8** %76, align 8
  %77 = call i64 @h9549842938191327224(i64 388314425)
  %78 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %77
  store i8* blockaddress(@main_loop, %1485), i8** %78, align 8
  %79 = call i64 @h9549842938191327224(i64 388314378)
  %80 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %79
  store i8* blockaddress(@main_loop, %2187), i8** %80, align 8
  %81 = call i64 @h9549842938191327224(i64 388314416)
  %82 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %81
  store i8* blockaddress(@main_loop, %codeRepl4), i8** %82, align 8
  %83 = call i64 @h9549842938191327224(i64 388314406)
  %84 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %83
  store i8* blockaddress(@main_loop, %codeRepl46), i8** %84, align 8
  %85 = call i64 @h9549842938191327224(i64 388314428)
  %86 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %85
  store i8* blockaddress(@main_loop, %5748), i8** %86, align 8
  %87 = call i64 @h9549842938191327224(i64 388314412)
  %88 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %87
  store i8* blockaddress(@main_loop, %2026), i8** %88, align 8
  %89 = call i64 @h9549842938191327224(i64 388314379)
  %90 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %89
  store i8* blockaddress(@main_loop, %1579), i8** %90, align 8
  %91 = call i64 @h9549842938191327224(i64 388314374)
  %92 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %91
  store i8* blockaddress(@main_loop, %4129), i8** %92, align 8
  %93 = call i64 @h9549842938191327224(i64 388314383)
  %94 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %93
  store i8* blockaddress(@main_loop, %.preheader), i8** %94, align 8
  %95 = call i64 @h9549842938191327224(i64 388314376)
  %96 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %95
  store i8* blockaddress(@main_loop, %1651), i8** %96, align 8
  %97 = call i64 @h9549842938191327224(i64 388314382)
  %98 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %97
  store i8* blockaddress(@main_loop, %6274), i8** %98, align 8
  %99 = call i64 @h9549842938191327224(i64 388314398)
  %100 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %99
  store i8* blockaddress(@main_loop, %3612), i8** %100, align 8
  %101 = call i64 @h9549842938191327224(i64 388314409)
  %102 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %101
  store i8* blockaddress(@main_loop, %1242), i8** %102, align 8
  %103 = call i64 @h9549842938191327224(i64 388314388)
  %104 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %103
  store i8* blockaddress(@main_loop, %4099), i8** %104, align 8
  %105 = call i64 @h9549842938191327224(i64 388314429)
  %106 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %105
  store i8* blockaddress(@main_loop, %6017), i8** %106, align 8
  %107 = call i64 @h9549842938191327224(i64 388314387)
  %108 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %107
  store i8* blockaddress(@main_loop, %3689), i8** %108, align 8
  %109 = call i64 @h9549842938191327224(i64 388314396)
  %110 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %109
  store i8* blockaddress(@main_loop, %771), i8** %110, align 8
  %111 = call i64 @h9549842938191327224(i64 388314377)
  %112 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %111
  store i8* blockaddress(@main_loop, %2858), i8** %112, align 8
  %113 = call i64 @h9549842938191327224(i64 388314423)
  %114 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %113
  store i8* blockaddress(@main_loop, %675), i8** %114, align 8
  %115 = call i64 @h9549842938191327224(i64 388314380)
  %116 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %115
  store i8* blockaddress(@main_loop, %EntryBasicBlockSplit), i8** %116, align 8
  %117 = call i64 @h9549842938191327224(i64 388314414)
  %118 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %117
  store i8* blockaddress(@main_loop, %codeRepl30), i8** %118, align 8
  %119 = call i64 @h9549842938191327224(i64 388314399)
  %120 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %119
  store i8* blockaddress(@main_loop, %codeRepl), i8** %120, align 8
  %121 = call i64 @h9549842938191327224(i64 388314384)
  %122 = getelementptr [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %121
  store i8* blockaddress(@main_loop, %484), i8** %122, align 8
  %.reg2mem166 = alloca i32, align 4
  %.reg2mem164 = alloca i1, align 1
  %.reg2mem162 = alloca i32, align 4
  %.ph.reg2mem160 = alloca i32, align 4
  %.reg2mem158 = alloca double, align 8
  %.reg2mem156 = alloca i32, align 4
  %.reg2mem154 = alloca i1, align 1
  %.reg2mem152 = alloca i1, align 1
  %.reg2mem150 = alloca i32, align 4
  %.reg2mem148 = alloca i1, align 1
  %.reg2mem146 = alloca i1, align 1
  %.reload64.reg2mem = alloca i1, align 1
  %.reg2mem143 = alloca i32, align 4
  %.reg2mem141 = alloca i1, align 1
  %.reg2mem139 = alloca i32, align 4
  %.reg2mem136 = alloca i1, align 1
  %.ph.reg2mem = alloca i32, align 4
  %.reg2mem133 = alloca i1, align 1
  %.reg2mem130 = alloca double, align 8
  %.reg2mem127 = alloca float, align 4
  %.reg2mem124 = alloca i32, align 4
  %.reg2mem119 = alloca i32, align 4
  %.reg2mem116 = alloca i32, align 4
  %.reg2mem114 = alloca double, align 8
  %.reg2mem112 = alloca i32, align 4
  %.reg2mem109 = alloca i1, align 1
  %.reload58.reg2mem = alloca i1, align 1
  %.reload57.reg2mem = alloca i32, align 4
  %.reg2mem105 = alloca i1, align 1
  %.reg2mem103 = alloca i1, align 1
  %.reload51.reg2mem = alloca i32, align 4
  %.reg2mem100 = alloca i1, align 1
  %.reg2mem95 = alloca i32, align 4
  %.reg2mem92 = alloca i1, align 1
  %.reg2mem89 = alloca i1, align 1
  %.reg2mem86 = alloca i1, align 1
  %.reg2mem82 = alloca i1, align 1
  %.reg2mem79 = alloca i32, align 4
  %.reg2mem76 = alloca i32, align 4
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem66 = alloca i32, align 4
  %.reg2mem61 = alloca i32, align 4
  %.reg2mem55 = alloca i1, align 1
  %.reg2mem50 = alloca i32, align 4
  %.reg2mem47 = alloca i1, align 1
  %.reg2mem45 = alloca i1, align 1
  %.reload2.reg2mem = alloca i32, align 4
  %.reload.reg2mem = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %lookupTable = alloca [60 x i32], align 4
  %123 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %123, align 4
  %124 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %124, align 4
  %125 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %125, align 4
  %126 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %127, align 4
  %128 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %128, align 4
  %129 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %129, align 4
  %130 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %130, align 4
  %131 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %131, align 4
  %132 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %132, align 4
  %133 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %133, align 4
  %134 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %134, align 4
  %135 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %135, align 4
  %136 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %136, align 4
  %137 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %137, align 4
  %138 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %138, align 4
  %139 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %139, align 4
  %140 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %140, align 4
  %141 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %141, align 4
  %142 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %142, align 4
  %143 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %143, align 4
  %144 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %144, align 4
  %145 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %145, align 4
  %146 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  store i32 20, i32* %146, align 4
  %147 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 24
  store i32 21, i32* %147, align 4
  %148 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %148, align 4
  %149 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %149, align 4
  %150 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %150, align 4
  %151 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  store i32 25, i32* %151, align 4
  %152 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 29
  store i32 26, i32* %152, align 4
  %153 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 30
  store i32 27, i32* %153, align 4
  %154 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %154, align 4
  %155 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %155, align 4
  %156 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %156, align 4
  %157 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %157, align 4
  %158 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %158, align 4
  %159 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %159, align 4
  %160 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %160, align 4
  %161 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 38
  store i32 35, i32* %161, align 4
  %162 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 39
  store i32 36, i32* %162, align 4
  %163 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 40
  store i32 37, i32* %163, align 4
  %164 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 41
  store i32 38, i32* %164, align 4
  %165 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 42
  store i32 39, i32* %165, align 4
  %166 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 43
  store i32 40, i32* %166, align 4
  %167 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 44
  store i32 41, i32* %167, align 4
  %168 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 45
  store i32 42, i32* %168, align 4
  %169 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 46
  store i32 43, i32* %169, align 4
  %170 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 47
  store i32 44, i32* %170, align 4
  %171 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 48
  store i32 45, i32* %171, align 4
  %172 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 49
  store i32 46, i32* %172, align 4
  %173 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 50
  store i32 47, i32* %173, align 4
  %174 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 51
  store i32 48, i32* %174, align 4
  %175 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 52
  store i32 49, i32* %175, align 4
  %176 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 53
  store i32 50, i32* %176, align 4
  %177 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 54
  store i32 51, i32* %177, align 4
  %178 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 55
  store i32 52, i32* %178, align 4
  %179 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 56
  store i32 53, i32* %179, align 4
  %180 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 57
  store i32 54, i32* %180, align 4
  %181 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 58
  store i32 55, i32* %181, align 4
  %182 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  store i32 56, i32* %182, align 4
  %183 = alloca i64, align 8
  %184 = call i64 @m1252811912226950246(i64 5221456193252566385)
  %185 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %184
  store i8* bitcast (i32 (i8*, i64, float*, i64)* @clear to i8*), i8** %185, align 8
  %186 = call i64 @m1252811912226950246(i64 5221456193252566384)
  %187 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %186
  store i8* bitcast (i1 (float*, float*, i8*, float*, i32, i32*, i32*)* @main_loop.extracted to i8*), i8** %187, align 8
  %188 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %189 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %188
  store i8* bitcast (i1 (i1, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*)* @main_loop.extracted.17 to i8*), i8** %189, align 8
  %190 = call i64 @m1252811912226950246(i64 5221456193252566387)
  %191 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %190
  store i8* bitcast (void (i32, i32, i1, i32*, i32*, i32*, i1*, i1*)* @main_loop.extracted.18 to i8*), i8** %191, align 8
  %192 = call i64 @m1252811912226950246(i64 5221456193252566398)
  %193 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %192
  store i8* bitcast (i1 (i1)* @main_loop..split to i8*), i8** %193, align 8
  %194 = call i64 @m1252811912226950246(i64 5221456193252566399)
  %195 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %194
  store i8* bitcast (i1 (i32, i32, i32*)* @main_loop.extracted.19 to i8*), i8** %195, align 8
  %196 = call i64 @m1252811912226950246(i64 5221456193252566388)
  %197 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %196
  store i8* bitcast (i1 (float, float*, float*, i8*, float*, i32, i32*, i1*)* @main_loop.extracted.20 to i8*), i8** %197, align 8
  %198 = call i64 @m1252811912226950246(i64 5221456193252566389)
  %199 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %198
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %199, align 8
  %200 = call i64 @m1252811912226950246(i64 5221456193252566386)
  %201 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %200
  store i8* bitcast (i32 (float*, float*, i8*, i64)* @render to i8*), i8** %201, align 8
  %202 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %203 = getelementptr [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %202
  store i8* bitcast (i1 (i32, i32, i1*)* @main_loop.extracted.21 to i8*), i8** %203, align 8
  %.loc62 = alloca i1, align 1
  %.loc55 = alloca i1, align 1
  %.loc54 = alloca i32, align 4
  %.loc49 = alloca i32, align 4
  %.loc35 = alloca i1, align 1
  %.loc34 = alloca i1, align 1
  %.loc33 = alloca i32, align 4
  %.loc32 = alloca i32, align 4
  %.loc31 = alloca i32, align 4
  %.loc12 = alloca i64, align 8
  %.loc11 = alloca i64, align 8
  %.loc10 = alloca i64, align 8
  %.loc9 = alloca i64, align 8
  %.loc8 = alloca i64, align 8
  %.loc7 = alloca i64, align 8
  %.loc6 = alloca i64, align 8
  %.loc5 = alloca i64, align 8
  %.loc1 = alloca i32, align 4
  %.loc = alloca i32, align 4
  store i64 5221456193252566385, i64* %183, align 8
  %204 = call i8** @lk13323888900026137679(i64* %183)
  %205 = load i8*, i8** %204, align 8
  %206 = bitcast i8* %205 to i32 (i8*, i64, float*, i64)*
  %207 = call i32 %206(i8* %2, i64 1760, float* %3, i64 7040)
  store i32 %207, i32* %.reg2mem, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314401, i32* %4, align 4
  %208 = call i8** @bf10863455059032886292(i32* %4)
  %209 = load i8*, i8** %208, align 8
  indirectbr i8* %209, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %codeRepl
    i32 2, label %460
    i32 3, label %484
    i32 4, label %codeRepl4
    i32 5, label %675
    i32 6, label %771
    i32 7, label %835
    i32 8, label %.preheader
    i32 9, label %1242
    i32 10, label %1485
    i32 11, label %1579
    i32 12, label %1651
    i32 13, label %codeRepl30
    i32 14, label %2026
    i32 15, label %codeRepl46
    i32 16, label %2187
    i32 17, label %codeRepl48
    i32 18, label %2403
    i32 19, label %2500
    i32 20, label %2687
    i32 21, label %2858
    i32 22, label %2953
    i32 23, label %3047
    i32 24, label %3257
    i32 25, label %3282
    i32 26, label %3385
    i32 27, label %codeRepl53
    i32 28, label %3612
    i32 29, label %3689
    i32 30, label %3847
    i32 31, label %3965
    i32 32, label %4050
    i32 33, label %4099
    i32 34, label %4129
    i32 35, label %4354
    i32 36, label %4937
    i32 37, label %.loopexit
    i32 38, label %5124
    i32 39, label %5327
    i32 40, label %5396
    i32 41, label %5451
    i32 42, label %5574
    i32 43, label %5638
    i32 44, label %5696
    i32 45, label %5748
    i32 46, label %6017
    i32 47, label %6113
    i32 48, label %6274
    i32 49, label %codeRepl61
    i32 50, label %6482
    i32 51, label %6619
    i32 52, label %6679
    i32 53, label %6741
    i32 54, label %6766
    i32 55, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload27 = load i32, i32* %.reg2mem, align 4
  %210 = icmp eq i32 %.reload27, 0
  %211 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 2
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = add i32 %212, 1119061529
  %216 = sub i32 %215, %214
  %217 = sub i32 %216, 1119061529
  %218 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 51
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %221 = load i32, i32* %220, align 4
  %222 = srem i32 %219, %221
  %223 = select i1 %210, i32 %217, i32 %222
  store i32 %223, i32* %dispatcher, align 4
  %.reload5 = load i32, i32* %.reg2mem, align 4
  store i32 %.reload5, i32* %.reg2mem166, align 4
  %224 = load i8*, i8** %24, align 8
  %225 = load i8, i8* %224, align 1
  %226 = mul i8 %225, %225
  %227 = sub i8 0, %225
  %228 = sub i8 %226, %227
  %229 = and i64 %105, 2146494007837889763
  %230 = xor i64 %105, -1
  %231 = or i64 -2146494007837889764, %230
  %232 = xor i64 %231, -1
  %233 = and i64 %232, -1
  %234 = add i64 %115, -6795789764630759104
  %235 = sub i64 0, %115
  %236 = sub i64 -6795789764630759104, %235
  %237 = add i64 %184, 6414249594830820420
  %238 = xor i64 6414249594830820420, %184
  %239 = and i64 6414249594830820420, %184
  %240 = mul i64 2, %239
  %241 = add i64 %238, %240
  %242 = xor i64 %237, %233
  %243 = xor i64 %242, -2212583500585720929
  %244 = xor i64 %243, %236
  %245 = xor i64 %244, %229
  %246 = xor i64 %245, %241
  %247 = xor i64 %246, %234
  %248 = add i64 %43, 2674528518327347128
  %249 = add i64 1793205555008133273, %43
  %250 = add i64 %249, 881322963319213855
  %251 = or i64 %35, 9213723950662544706
  %252 = xor i64 %35, -1
  %253 = and i64 %252, -7370908694563815798
  %254 = and i64 %35, 7370908694563815797
  %255 = or i64 %253, %254
  %256 = xor i64 -1843946396209605688, %255
  %257 = xor i64 %35, -1
  %258 = or i64 -9213723950662544707, %257
  %259 = xor i64 %258, -1
  %260 = and i64 %259, -1
  %261 = or i64 %256, %260
  %262 = xor i64 %250, %251
  %263 = xor i64 %262, %248
  %264 = xor i64 %263, %261
  %265 = xor i64 %264, -6933680600904554211
  %266 = mul i64 %247, %265
  %267 = trunc i64 %266 to i8
  %268 = mul i8 %228, %267
  %269 = and i64 %79, -5345620246181176897
  %270 = or i64 5345620246181176896, %79
  %271 = sub i64 %270, 5345620246181176896
  %272 = or i64 %37, -5934327179680865384
  %273 = xor i64 %37, -1
  %274 = and i64 -5934327179680865384, %273
  %275 = add i64 %274, %37
  %276 = xor i64 -9184133370310222717, %272
  %277 = xor i64 %276, %275
  %278 = xor i64 %277, %271
  %279 = xor i64 %278, %269
  %280 = or i64 %192, 5140115290631960675
  %281 = xor i64 %192, -1
  %282 = and i64 %281, 4147290563142833840
  %283 = and i64 %192, -4147290563142833841
  %284 = or i64 %282, %283
  %285 = xor i64 9141033273296596691, %284
  %286 = xor i64 %192, -1
  %287 = or i64 -5140115290631960676, %286
  %288 = xor i64 %287, -1
  %289 = and i64 %288, -1
  %290 = or i64 %285, %289
  %291 = add i64 %69, 720296700446391239
  %292 = sub i64 0, %69
  %293 = add i64 -720296700446391239, %292
  %294 = sub i64 0, %293
  %295 = xor i64 %290, %280
  %296 = xor i64 %295, %294
  %297 = xor i64 %296, 5471974950012855382
  %298 = xor i64 %297, %291
  %299 = mul i64 %279, %298
  %300 = trunc i64 %299 to i8
  %301 = srem i8 %268, %300
  %302 = icmp eq i8 %301, 0
  %303 = mul i8 %225, %225
  %304 = xor i8 %303, %225
  %305 = and i8 %303, %225
  %306 = mul i8 2, %305
  %307 = add i8 %304, %306
  %308 = mul i8 39, %307
  %309 = or i64 %119, -7772733839744087689
  %310 = xor i64 %119, -1
  %311 = and i64 -7772733839744087689, %310
  %312 = add i64 %311, %119
  %313 = or i64 %93, -1993967135518870455
  %314 = and i64 -1993967135518870455, %93
  %315 = xor i64 -1993967135518870455, %93
  %316 = or i64 %314, %315
  %317 = add i64 %85, -8043780493887997314
  %318 = sub i64 0, %85
  %319 = add i64 8043780493887997314, %318
  %320 = sub i64 0, %319
  %321 = xor i64 %313, %309
  %322 = xor i64 %321, %312
  %323 = xor i64 %322, %320
  %324 = xor i64 %323, 5704318273308124441
  %325 = xor i64 %324, %316
  %326 = xor i64 %325, %317
  %327 = add i64 %55, 3313676165830066670
  %328 = add i64 1351416262411986559, %55
  %329 = sub i64 %328, -1962259903418080111
  %330 = and i64 %55, -941779561688920161
  %331 = xor i64 %55, -1
  %332 = or i64 941779561688920160, %331
  %333 = xor i64 %332, -1
  %334 = and i64 %333, -1
  %335 = add i64 %57, -6276400808628312587
  %336 = and i64 -6276400808628312587, %57
  %337 = or i64 -6276400808628312587, %57
  %338 = add i64 %336, %337
  %339 = xor i64 %335, %327
  %340 = xor i64 %339, -5347468539943779153
  %341 = xor i64 %340, %338
  %342 = xor i64 %341, %334
  %343 = xor i64 %342, %329
  %344 = xor i64 %343, %330
  %345 = mul i64 %326, %344
  %346 = trunc i64 %345 to i8
  %347 = add i8 %346, %308
  %348 = mul i8 -105, %347
  %349 = add i8 111, %348
  %350 = sext i32 %dispatcher1 to i64
  %351 = and i64 %350, -457681181248706715
  %352 = or i64 457681181248706714, %350
  %353 = sub i64 %352, 457681181248706714
  %354 = and i64 %95, 5688580489712386318
  %355 = or i64 -5688580489712386319, %95
  %356 = sub i64 %355, -5688580489712386319
  %357 = add i64 %9, 384794843603564642
  %358 = xor i64 384794843603564642, %9
  %359 = and i64 384794843603564642, %9
  %360 = mul i64 2, %359
  %361 = add i64 %358, %360
  %362 = xor i64 -462134561818869915, %353
  %363 = xor i64 %362, %356
  %364 = xor i64 %363, %361
  %365 = xor i64 %364, %354
  %366 = xor i64 %365, %357
  %367 = xor i64 %366, %351
  %368 = and i64 %13, 6709606328256729233
  %369 = xor i64 %13, -1
  %370 = xor i64 6709606328256729233, %369
  %371 = and i64 %370, 6709606328256729233
  %372 = add i64 %186, -8986684756268003479
  %373 = sub i64 0, %186
  %374 = add i64 8986684756268003479, %373
  %375 = sub i64 0, %374
  %376 = xor i64 %375, %371
  %377 = xor i64 %376, %368
  %378 = xor i64 %377, %372
  %379 = xor i64 %378, 8104239119136863450
  %380 = mul i64 %367, %379
  %381 = trunc i64 %380 to i8
  %382 = srem i8 %349, %381
  %383 = icmp eq i8 %382, 0
  %384 = xor i1 %383, true
  %385 = xor i1 %302, %384
  %386 = and i1 %385, %302
  %387 = or i64 %83, 169401508067674033
  %388 = and i64 169401508067674033, %83
  %389 = xor i64 169401508067674033, %83
  %390 = or i64 %388, %389
  %391 = and i64 %196, -287287759791767651
  %392 = xor i64 %196, -1
  %393 = or i64 287287759791767650, %392
  %394 = xor i64 %393, -1
  %395 = and i64 %394, -1
  %396 = add i64 %65, 3252536264990943783
  %397 = sub i64 0, %65
  %398 = sub i64 3252536264990943783, %397
  %399 = xor i64 %387, %396
  %400 = xor i64 %399, %398
  %401 = xor i64 %400, %395
  %402 = xor i64 %401, %391
  %403 = xor i64 %402, %390
  %404 = xor i64 %403, 3203267394457009083
  %405 = or i64 %15, 8276766504853963254
  %406 = and i64 8276766504853963254, %15
  %407 = xor i64 8276766504853963254, %15
  %408 = or i64 %406, %407
  %409 = add i64 %21, 2745939351330185061
  %410 = add i64 -5417979154337393787, %21
  %411 = sub i64 %410, -8163918505667578848
  %412 = xor i64 %411, %408
  %413 = xor i64 %412, -8798828047585334306
  %414 = xor i64 %413, %409
  %415 = xor i64 %414, %405
  %416 = mul i64 %404, %415
  %417 = trunc i64 %416 to i32
  %418 = select i1 %386, i32 388314428, i32 %417
  %419 = xor i32 %418, -1413285076
  %420 = xor i32 %419, -1413285062
  store i32 %420, i32* %4, align 4
  %421 = call i8** @bf10863455059032886292(i32* %4)
  %422 = load i8*, i8** %421, align 8
  indirectbr i8* %422, [label %loopEnd, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %lt.cast = bitcast i32* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %lt.cast3 = bitcast i32* %.loc1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast3)
  store i64 5221456193252566384, i64* %183, align 8
  %423 = call i8** @lk13323888900026137679(i64* %183)
  %424 = load i8*, i8** %423, align 8
  %425 = bitcast i8* %424 to i1 (float*, float*, i8*, float*, i32, i32*, i32*)*
  %.reload26 = load i32, i32* %.reg2mem, align 4
  %targetBlock = call i1 %425(float* %0, float* %1, i8* %2, float* %3, i32 %.reload26, i32* %.loc, i32* %.loc1)
  %.reload = load i32, i32* %.loc, align 4
  store i32 %.reload, i32* %.reload.reg2mem, align 4
  %.reload2 = load i32, i32* %.loc1, align 4
  store i32 %.reload2, i32* %.reload2.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast3)
  %426 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 10
  %427 = load i32, i32* %426, align 4
  %428 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 8
  %429 = load i32, i32* %428, align 4
  %430 = sub i32 %427, %429
  %431 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 5
  %432 = load i32, i32* %431, align 4
  %433 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 4
  %434 = load i32, i32* %433, align 4
  %435 = xor i32 %432, %434
  %436 = and i32 %432, %434
  %437 = mul i32 2, %436
  %438 = add i32 %435, %437
  %439 = select i1 %targetBlock, i32 %430, i32 %438
  store i32 %439, i32* %dispatcher, align 4
  %440 = load i8*, i8** %94, align 8
  %441 = load i8, i8* %440, align 1
  %442 = mul i8 %441, 2
  %443 = mul i8 %441, 2
  %444 = add i8 2, %443
  %445 = mul i8 %442, %444
  %446 = srem i8 %445, 4
  %447 = icmp eq i8 %446, 0
  %448 = mul i8 %441, %441
  %449 = mul i8 %448, %441
  %450 = add i8 %449, -85
  %451 = add i8 %450, %441
  %452 = sub i8 %451, -85
  %453 = srem i8 %452, 2
  %454 = icmp eq i8 %453, 0
  %455 = and i1 %447, %454
  %456 = select i1 %455, i32 388314423, i32 388314410
  %457 = xor i32 %456, 29
  store i32 %457, i32* %4, align 4
  %458 = call i8** @bf10863455059032886292(i32* %4)
  %459 = load i8*, i8** %458, align 8
  indirectbr i8* %459, [label %loopEnd, label %codeRepl]

460:                                              ; preds = %460, %loopStart
  %.reload.reload40 = load i32, i32* %.reload.reg2mem, align 4
  %461 = icmp eq i32 %.reload.reload40, 0
  %462 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 7
  %463 = load i32, i32* %462, align 4
  %464 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 6
  %465 = load i32, i32* %464, align 4
  %466 = add i32 %463, %465
  store i32 %466, i32* %dispatcher, align 4
  store i1 %461, i1* %.reg2mem146, align 1
  %467 = load i8*, i8** %14, align 8
  %468 = load i8, i8* %467, align 1
  %469 = xor i8 %468, -1
  %470 = or i8 %469, -2
  %471 = xor i8 %470, -1
  %472 = and i8 %471, -1
  %473 = icmp eq i8 %472, 1
  %474 = mul i8 %468, %468
  %475 = sub i8 0, %468
  %476 = sub i8 %474, %475
  %477 = srem i8 %476, 2
  %478 = icmp eq i8 %477, 0
  %479 = or i1 %473, %478
  %480 = select i1 %479, i32 388314387, i32 388314410
  %481 = xor i32 %480, 57
  store i32 %481, i32* %4, align 4
  %482 = call i8** @bf10863455059032886292(i32* %4)
  %483 = load i8*, i8** %482, align 8
  indirectbr i8* %483, [label %loopEnd, label %460]

484:                                              ; preds = %484, %loopStart
  %485 = and i64 %35, 1804142422850827845
  %486 = xor i64 %35, -1
  %487 = or i64 -1804142422850827846, %486
  %488 = xor i64 %487, -1
  %489 = and i64 %488, -1
  %490 = or i64 %11, -6786932148300968111
  %491 = and i64 -6786932148300968111, %11
  %492 = xor i64 -6786932148300968111, %11
  %493 = or i64 %491, %492
  %494 = and i64 %196, -5536224311714509404
  %495 = xor i64 %196, -1
  %496 = or i64 5536224311714509403, %495
  %497 = xor i64 %496, -1
  %498 = and i64 %497, -1
  %499 = xor i64 %490, %498
  %500 = xor i64 %499, %489
  %501 = xor i64 %500, %493
  %502 = xor i64 %501, -951315610419497357
  %503 = xor i64 %502, %494
  %504 = xor i64 %503, %485
  %505 = or i64 %79, 1318277370346228775
  %506 = and i64 1318277370346228775, %79
  %507 = xor i64 1318277370346228775, %79
  %508 = or i64 %506, %507
  %509 = or i64 %43, 3531282595083687838
  %510 = xor i64 %43, -1
  %511 = and i64 3531282595083687838, %510
  %512 = add i64 %511, %43
  %513 = or i64 %7, 2499200171609496969
  %514 = xor i64 %7, -1
  %515 = and i64 2499200171609496969, %514
  %516 = add i64 %515, %7
  %517 = xor i64 %508, %513
  %518 = xor i64 %517, %509
  %519 = xor i64 %518, %516
  %520 = xor i64 %519, %505
  %521 = xor i64 %520, -1767855634320599133
  %522 = xor i64 %521, %512
  %523 = mul i64 %504, %522
  %524 = mul i64 %523, 78
  %.reload.reload39 = load i32, i32* %.reload.reg2mem, align 4
  %525 = icmp eq i32 %.reload.reload39, 0
  store i1 %525, i1* %.reg2mem45, align 1
  %526 = sub i64 60, 18
  %.reload2.reload44 = load i32, i32* %.reload2.reg2mem, align 4
  %527 = srem i32 %.reload2.reload44, 2
  %528 = icmp eq i32 %527, 0
  %.reload2.reload43 = load i32, i32* %.reload2.reg2mem, align 4
  %529 = and i32 %.reload2.reload43, 1
  %530 = icmp eq i32 %529, 1
  %.reload2.reload42 = load i32, i32* %.reload2.reg2mem, align 4
  %531 = mul i32 %.reload2.reload42, %.reload2.reload42
  %.reload2.reload41 = load i32, i32* %.reload2.reg2mem, align 4
  %532 = add i32 %531, %.reload2.reload41
  %533 = srem i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = and i1 %530, %534
  %536 = xor i1 %530, %534
  %537 = or i1 %535, %536
  store i1 %537, i1* %.reg2mem47, align 1
  %538 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 6
  %539 = load i32, i32* %538, align 4
  %540 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 5
  %541 = load i32, i32* %540, align 4
  %542 = add i32 %539, %541
  %543 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 7
  %544 = load i32, i32* %543, align 4
  %545 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %546 = load i32, i32* %545, align 4
  %547 = srem i32 %544, %546
  %.reload48 = load i1, i1* %.reg2mem47, align 1
  %548 = select i1 %.reload48, i32 %542, i32 %547
  store i32 %548, i32* %dispatcher, align 4
  %549 = load i8*, i8** %120, align 8
  %550 = load i8, i8* %549, align 1
  %551 = mul i8 %550, 2
  %552 = mul i8 %550, 2
  %553 = add i8 2, %552
  %554 = mul i8 %551, %553
  %555 = or i64 %21, 4188063081504533117
  %556 = and i64 4188063081504533117, %21
  %557 = xor i64 4188063081504533117, %21
  %558 = or i64 %556, %557
  %559 = or i64 %77, -8637141900850406492
  %560 = xor i64 %77, -1
  %561 = and i64 -8637141900850406492, %560
  %562 = add i64 %561, %77
  %563 = xor i64 -3013950467867819247, %558
  %564 = xor i64 %563, %555
  %565 = xor i64 %564, %559
  %566 = xor i64 %565, %562
  %567 = and i64 %186, -6581649157283325683
  %568 = xor i64 %186, -1
  %569 = xor i64 -6581649157283325683, %568
  %570 = and i64 %569, -6581649157283325683
  %571 = and i64 %198, -3687336840471834548
  %572 = xor i64 %198, -1
  %573 = or i64 3687336840471834547, %572
  %574 = xor i64 %573, -1
  %575 = and i64 %574, -1
  %576 = xor i64 %567, 2840346655556777924
  %577 = xor i64 %576, %575
  %578 = xor i64 %577, %570
  %579 = xor i64 %578, %571
  %580 = mul i64 %566, %579
  %581 = trunc i64 %580 to i8
  %582 = srem i8 %554, %581
  %583 = icmp eq i8 %582, 0
  %584 = mul i8 %550, %550
  %585 = add i8 %584, %550
  %586 = srem i8 %585, 2
  %587 = icmp eq i8 %586, 0
  %588 = or i1 %583, %587
  %589 = select i1 %588, i32 388314386, i32 388314410
  %590 = xor i32 %589, 56
  store i32 %590, i32* %4, align 4
  %591 = call i8** @bf10863455059032886292(i32* %4)
  %592 = load i8*, i8** %591, align 8
  indirectbr i8* %592, [label %loopEnd, label %484]

codeRepl4:                                        ; preds = %codeRepl4, %loopStart
  %lt.cast22 = bitcast i64* %.loc5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast22)
  %lt.cast23 = bitcast i64* %.loc6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast23)
  %lt.cast24 = bitcast i64* %.loc7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast24)
  %lt.cast25 = bitcast i64* %.loc8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  %lt.cast26 = bitcast i64* %.loc9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast26)
  %lt.cast27 = bitcast i64* %.loc10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast27)
  %lt.cast28 = bitcast i64* %.loc11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast28)
  %lt.cast29 = bitcast i64* %.loc12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast29)
  store i64 5221456193252566390, i64* %183, align 8
  %593 = call i8** @lk13323888900026137679(i64* %183)
  %594 = load i8*, i8** %593, align 8
  %595 = bitcast i8* %594 to i1 (i1, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*)*
  %.reload49 = load i1, i1* %.reg2mem47, align 1
  %targetBlock13 = call i1 %595(i1 %.reload49, i64* %.loc5, i64* %.loc6, i64* %.loc7, i64* %.loc8, i64* %.loc9, i64* %.loc10, i64* %.loc11, i64* %.loc12)
  %.reload14 = load i64, i64* %.loc5, align 8
  %.reload15 = load i64, i64* %.loc6, align 8
  %.reload16 = load i64, i64* %.loc7, align 8
  %.reload17 = load i64, i64* %.loc8, align 8
  %.reload18 = load i64, i64* %.loc9, align 8
  %.reload19 = load i64, i64* %.loc10, align 8
  %.reload20 = load i64, i64* %.loc11, align 8
  %.reload21 = load i64, i64* %.loc12, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast22)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast23)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast24)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast26)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast27)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast28)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast29)
  %596 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 7
  %597 = load i32, i32* %596, align 4
  %598 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 5
  %599 = load i32, i32* %598, align 4
  %600 = add i32 %597, %599
  %601 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 4
  %602 = load i32, i32* %601, align 4
  %603 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %604 = load i32, i32* %603, align 4
  %605 = srem i32 %602, %604
  %606 = select i1 %targetBlock13, i32 %600, i32 %605
  store i32 %606, i32* %dispatcher, align 4
  %607 = load i8*, i8** %52, align 8
  %608 = load i8, i8* %607, align 1
  %609 = xor i8 %608, -2
  %610 = and i8 %609, %608
  %611 = icmp eq i8 %610, 1
  %612 = mul i8 %608, %608
  %613 = xor i8 %612, %608
  %614 = and i8 %612, %608
  %615 = mul i8 2, %614
  %616 = add i8 %613, %615
  %617 = mul i8 39, %616
  %618 = add i8 23, %617
  %619 = mul i8 -105, %618
  %620 = add i8 111, %619
  %621 = srem i8 %620, 2
  %622 = icmp eq i8 %621, 0
  %623 = xor i1 %622, true
  %624 = and i1 %611, %623
  %625 = add i1 %624, %622
  %626 = or i64 %85, -4135393546275744366
  %627 = xor i64 %85, -1
  %628 = and i64 -4135393546275744366, %627
  %629 = add i64 %628, %85
  %630 = add i64 %43, -6575680062139082741
  %631 = sub i64 0, %43
  %632 = add i64 6575680062139082741, %631
  %633 = sub i64 0, %632
  %634 = or i64 %87, -1928217025935251253
  %635 = xor i64 %87, -1
  %636 = and i64 %635, -4268768749066430152
  %637 = and i64 %87, 4268768749066430151
  %638 = or i64 %636, %637
  %639 = xor i64 2449907225504756211, %638
  %640 = xor i64 %87, -1
  %641 = or i64 1928217025935251252, %640
  %642 = xor i64 %641, -1
  %643 = and i64 %642, -1
  %644 = or i64 %639, %643
  %645 = xor i64 %644, -8154336073367222939
  %646 = xor i64 %645, %630
  %647 = xor i64 %646, %633
  %648 = xor i64 %647, %634
  %649 = xor i64 %648, %629
  %650 = xor i64 %649, %626
  %651 = or i64 %107, -4654574642780622053
  %652 = and i64 -4654574642780622053, %107
  %653 = xor i64 -4654574642780622053, %107
  %654 = or i64 %652, %653
  %655 = and i64 %41, -1825021761996545440
  %656 = or i64 1825021761996545439, %41
  %657 = sub i64 %656, 1825021761996545439
  %658 = and i64 %15, -1606116222070947738
  %659 = xor i64 %15, -1
  %660 = or i64 1606116222070947737, %659
  %661 = xor i64 %660, -1
  %662 = and i64 %661, -1
  %663 = xor i64 %654, %651
  %664 = xor i64 %663, %655
  %665 = xor i64 %664, 3734478655966790935
  %666 = xor i64 %665, %658
  %667 = xor i64 %666, %662
  %668 = xor i64 %667, %657
  %669 = mul i64 %650, %668
  %670 = trunc i64 %669 to i32
  %671 = select i1 %625, i32 %670, i32 388314410
  %672 = xor i32 %671, 57
  store i32 %672, i32* %4, align 4
  %673 = call i8** @bf10863455059032886292(i32* %4)
  %674 = load i8*, i8** %673, align 8
  indirectbr i8* %674, [label %loopEnd, label %codeRepl4]

675:                                              ; preds = %675, %loopStart
  %676 = add i64 74, 85
  %677 = add i64 111, 34
  %678 = sub i64 5385641996549433306, 5385641996549433278
  %679 = sub i64 87, 40
  %680 = sdiv i64 113, 33
  %681 = add i64 8842023090492382078, -8842023090492381916
  %682 = add i64 116, 70
  %683 = mul i64 97, 61
  %684 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 9
  %685 = load i32, i32* %684, align 4
  %686 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %687 = load i32, i32* %686, align 4
  %688 = srem i32 %685, %687
  store i32 %688, i32* %dispatcher, align 4
  %689 = load i8*, i8** %70, align 8
  %690 = load i8, i8* %689, align 1
  %691 = and i8 %690, 1
  %692 = icmp eq i8 %691, 0
  %693 = mul i8 %690, %690
  %694 = add i8 %693, %690
  %695 = and i64 %29, 6627171710876391748
  %696 = or i64 -6627171710876391749, %29
  %697 = sub i64 %696, -6627171710876391749
  %698 = or i64 %25, -5115532637316871066
  %699 = and i64 -5115532637316871066, %25
  %700 = xor i64 -5115532637316871066, %25
  %701 = or i64 %699, %700
  %702 = xor i64 %698, %695
  %703 = xor i64 %702, 2632564967142929145
  %704 = xor i64 %703, %701
  %705 = xor i64 %704, %697
  %706 = or i64 %47, -6698942233241980403
  %707 = xor i64 %47, -1
  %708 = and i64 %707, 2249586231103271253
  %709 = and i64 %47, -2249586231103271254
  %710 = or i64 %708, %709
  %711 = xor i64 -4886210663569243304, %710
  %712 = xor i64 %47, -1
  %713 = or i64 6698942233241980402, %712
  %714 = xor i64 %713, -1
  %715 = and i64 %714, -1
  %716 = or i64 %711, %715
  %717 = and i64 %37, 3000642109673731238
  %718 = xor i64 %37, -1
  %719 = xor i64 3000642109673731238, %718
  %720 = and i64 %719, 3000642109673731238
  %721 = or i64 %41, -4459387172756090729
  %722 = xor i64 %41, -1
  %723 = and i64 -4459387172756090729, %722
  %724 = add i64 %723, %41
  %725 = xor i64 -4819345994982830629, %721
  %726 = xor i64 %725, %716
  %727 = xor i64 %726, %720
  %728 = xor i64 %727, %724
  %729 = xor i64 %728, %717
  %730 = xor i64 %729, %706
  %731 = mul i64 %705, %730
  %732 = trunc i64 %731 to i8
  %733 = mul i8 %694, %732
  %734 = srem i8 %733, 2
  %735 = icmp eq i8 %734, 0
  %736 = or i1 %692, %735
  %737 = and i64 %87, 3331326022921047984
  %738 = or i64 -3331326022921047985, %87
  %739 = sub i64 %738, -3331326022921047985
  %740 = and i64 %113, 7931867317751126607
  %741 = xor i64 %113, -1
  %742 = xor i64 7931867317751126607, %741
  %743 = and i64 %742, 7931867317751126607
  %744 = xor i64 %739, %740
  %745 = xor i64 %744, %743
  %746 = xor i64 %745, -6069748988574641447
  %747 = xor i64 %746, %737
  %748 = and i64 %119, 9203627498422630784
  %749 = or i64 -9203627498422630785, %119
  %750 = sub i64 %749, -9203627498422630785
  %751 = add i64 %186, -967847881897981052
  %752 = add i64 4924360919348330809, %186
  %753 = add i64 %752, -5892208801246311861
  %754 = add i64 %81, -4512687112040654074
  %755 = xor i64 -4512687112040654074, %81
  %756 = and i64 -4512687112040654074, %81
  %757 = mul i64 2, %756
  %758 = add i64 %755, %757
  %759 = xor i64 %748, 7151998245545789439
  %760 = xor i64 %759, %751
  %761 = xor i64 %760, %750
  %762 = xor i64 %761, %758
  %763 = xor i64 %762, %753
  %764 = xor i64 %763, %754
  %765 = mul i64 %747, %764
  %766 = trunc i64 %765 to i32
  %767 = select i1 %736, i32 %766, i32 388314410
  %768 = xor i32 %767, 13
  store i32 %768, i32* %4, align 4
  %769 = call i8** @bf10863455059032886292(i32* %4)
  %770 = load i8*, i8** %769, align 8
  indirectbr i8* %770, [label %loopEnd, label %675]

771:                                              ; preds = %771, %loopStart
  %772 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 7
  %773 = load i32, i32* %772, align 4
  %774 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 6
  %775 = load i32, i32* %774, align 4
  %776 = add i32 %773, %775
  store i32 %776, i32* %dispatcher, align 4
  %.reload46 = load i1, i1* %.reg2mem45, align 1
  store i1 %.reload46, i1* %.reg2mem146, align 1
  %777 = load i8*, i8** %80, align 8
  %778 = load i8, i8* %777, align 1
  %779 = mul i8 %778, %778
  %780 = add i8 %779, %778
  %781 = mul i8 %780, 3
  %782 = srem i8 %781, 2
  %783 = icmp eq i8 %782, 0
  %784 = mul i8 %778, %778
  %785 = add i8 %784, %778
  %786 = srem i8 %785, 2
  %787 = or i64 %35, -5250475263578734718
  %788 = xor i64 %35, -1
  %789 = and i64 -5250475263578734718, %788
  %790 = add i64 %789, %35
  %791 = and i64 %105, -7532500944817774763
  %792 = or i64 7532500944817774762, %105
  %793 = sub i64 %792, 7532500944817774762
  %794 = and i64 %89, -6986278315034515120
  %795 = xor i64 %89, -1
  %796 = or i64 6986278315034515119, %795
  %797 = xor i64 %796, -1
  %798 = and i64 %797, -1
  %799 = xor i64 %794, %790
  %800 = xor i64 %799, %793
  %801 = xor i64 %800, %787
  %802 = xor i64 %801, 2910154858896029441
  %803 = xor i64 %802, %798
  %804 = xor i64 %803, %791
  %805 = or i64 %75, -262102876664109566
  %806 = xor i64 %75, -1
  %807 = and i64 %806, 7983962475207267780
  %808 = and i64 %75, -7983962475207267781
  %809 = or i64 %807, %808
  %810 = xor i64 -7885687221660617786, %809
  %811 = xor i64 %75, -1
  %812 = or i64 262102876664109565, %811
  %813 = xor i64 %812, -1
  %814 = and i64 %813, -1
  %815 = or i64 %810, %814
  %816 = add i64 %119, 6081624275395240344
  %817 = sub i64 0, %119
  %818 = sub i64 6081624275395240344, %817
  %819 = xor i64 %818, %805
  %820 = xor i64 %819, %816
  %821 = xor i64 %820, 0
  %822 = xor i64 %821, %815
  %823 = mul i64 %804, %822
  %824 = trunc i64 %823 to i8
  %825 = icmp eq i8 %786, %824
  %826 = xor i1 %783, true
  %827 = xor i1 %825, true
  %828 = or i1 %826, %827
  %829 = xor i1 %828, true
  %830 = and i1 %829, true
  %831 = select i1 %830, i32 388314380, i32 388314410
  %832 = xor i32 %831, 38
  store i32 %832, i32* %4, align 4
  %833 = call i8** @bf10863455059032886292(i32* %4)
  %834 = load i8*, i8** %833, align 8
  indirectbr i8* %834, [label %loopEnd, label %771]

835:                                              ; preds = %835, %loopStart
  %.reload147 = load i1, i1* %.reg2mem146, align 1
  %836 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 35
  %837 = load i32, i32* %836, align 4
  %838 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 27
  %839 = load i32, i32* %838, align 4
  %840 = sub i32 %837, %839
  %841 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  %842 = load i32, i32* %841, align 4
  %843 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 24
  %844 = load i32, i32* %843, align 4
  %845 = add i32 %842, %844
  %846 = select i1 %.reload147, i32 %840, i32 %845
  store i32 %846, i32* %dispatcher, align 4
  %.reload.reload = load i32, i32* %.reload.reg2mem, align 4
  store i32 %.reload.reload, i32* %.reg2mem162, align 4
  %847 = add i64 %79, 1451450579119975321
  %848 = and i64 1451450579119975321, %79
  %849 = or i64 1451450579119975321, %79
  %850 = add i64 %848, %849
  %851 = or i64 %107, -7572220920368315636
  %852 = and i64 -7572220920368315636, %107
  %853 = xor i64 -7572220920368315636, %107
  %854 = or i64 %852, %853
  %855 = xor i64 %847, %851
  %856 = xor i64 %855, %854
  %857 = xor i64 %856, -1478603527699858979
  %858 = xor i64 %857, %850
  %859 = add i64 %77, -9015456913886979202
  %860 = add i64 3638337991797069676, %77
  %861 = sub i64 %860, -5792949168025502738
  %862 = or i64 %192, -4807527178642553897
  %863 = xor i64 %192, -1
  %864 = and i64 %863, -5195816213996575346
  %865 = and i64 %192, 5195816213996575345
  %866 = or i64 %864, %865
  %867 = xor i64 769265811536569945, %866
  %868 = xor i64 %192, -1
  %869 = or i64 4807527178642553896, %868
  %870 = xor i64 %869, -1
  %871 = and i64 %870, -1
  %872 = or i64 %867, %871
  %873 = xor i64 %872, %859
  %874 = xor i64 %873, %862
  %875 = xor i64 %874, 4614633010292631157
  %876 = xor i64 %875, %861
  %877 = mul i64 %858, %876
  %878 = trunc i64 %877 to i1
  store i1 %878, i1* %.reg2mem164, align 1
  %879 = load i8*, i8** %62, align 8
  %880 = load i8, i8* %879, align 1
  %881 = mul i8 %880, 2
  %882 = mul i8 %880, 2
  %883 = add i8 2, %882
  %884 = mul i8 %881, %883
  %885 = add i64 %91, -7201339212022590741
  %886 = add i64 -9222431452412314623, %91
  %887 = add i64 %886, 2021092240389723882
  %888 = add i64 %83, 6397351818260483464
  %889 = sub i64 0, %83
  %890 = sub i64 6397351818260483464, %889
  %891 = add i64 %117, -3535819265518244311
  %892 = xor i64 -3535819265518244311, %117
  %893 = and i64 -3535819265518244311, %117
  %894 = mul i64 2, %893
  %895 = add i64 %892, %894
  %896 = xor i64 %885, %890
  %897 = xor i64 %896, %891
  %898 = xor i64 %897, 8440387975608083579
  %899 = xor i64 %898, %888
  %900 = xor i64 %899, %895
  %901 = xor i64 %900, %887
  %902 = and i64 %17, -1176867189796829476
  %903 = xor i64 %17, -1
  %904 = or i64 1176867189796829475, %903
  %905 = xor i64 %904, -1
  %906 = and i64 %905, -1
  %907 = and i64 %75, -713180242057791755
  %908 = xor i64 %75, -1
  %909 = or i64 713180242057791754, %908
  %910 = xor i64 %909, -1
  %911 = and i64 %910, -1
  %912 = xor i64 %911, 5107625560676526796
  %913 = xor i64 %912, %907
  %914 = xor i64 %913, %906
  %915 = xor i64 %914, %902
  %916 = mul i64 %901, %915
  %917 = trunc i64 %916 to i8
  %918 = srem i8 %884, %917
  %919 = and i64 %9, -385240590452508513
  %920 = xor i64 %9, -1
  %921 = xor i64 -385240590452508513, %920
  %922 = and i64 %921, -385240590452508513
  %923 = add i64 %29, -4925052120047523610
  %924 = and i64 -4925052120047523610, %29
  %925 = or i64 -4925052120047523610, %29
  %926 = add i64 %924, %925
  %927 = add i64 %95, -898440051185950697
  %928 = and i64 -898440051185950697, %95
  %929 = or i64 -898440051185950697, %95
  %930 = add i64 %928, %929
  %931 = xor i64 %926, %923
  %932 = xor i64 %931, %930
  %933 = xor i64 %932, %922
  %934 = xor i64 %933, %919
  %935 = xor i64 %934, %927
  %936 = xor i64 %935, 716744219733136853
  %937 = and i64 %97, -7855679964883601427
  %938 = xor i64 %97, -1
  %939 = xor i64 -7855679964883601427, %938
  %940 = and i64 %939, -7855679964883601427
  %941 = and i64 %188, 41781378010964684
  %942 = or i64 -41781378010964685, %188
  %943 = sub i64 %942, -41781378010964685
  %944 = add i64 %117, -3049375812405916558
  %945 = sub i64 0, %117
  %946 = sub i64 -3049375812405916558, %945
  %947 = xor i64 %943, %946
  %948 = xor i64 %947, 0
  %949 = xor i64 %948, %937
  %950 = xor i64 %949, %941
  %951 = xor i64 %950, %940
  %952 = xor i64 %951, %944
  %953 = mul i64 %936, %952
  %954 = trunc i64 %953 to i8
  %955 = icmp eq i8 %918, %954
  %956 = mul i8 %880, %880
  %957 = mul i8 %956, %880
  %958 = add i8 %957, %880
  %959 = srem i8 %958, 2
  %960 = and i64 %202, 3491637679358592738
  %961 = xor i64 %202, -1
  %962 = or i64 -3491637679358592739, %961
  %963 = xor i64 %962, -1
  %964 = and i64 %963, -1
  %965 = or i64 %79, -7548752684210892478
  %966 = and i64 -7548752684210892478, %79
  %967 = xor i64 -7548752684210892478, %79
  %968 = or i64 %966, %967
  %969 = xor i64 %968, %965
  %970 = xor i64 %969, -2744076954236138293
  %971 = xor i64 %970, %960
  %972 = xor i64 %971, %964
  %973 = add i64 %23, -6557319544500746471
  %974 = sub i64 0, %23
  %975 = add i64 6557319544500746471, %974
  %976 = sub i64 0, %975
  %977 = or i64 %196, -4578343557976427689
  %978 = and i64 -4578343557976427689, %196
  %979 = xor i64 -4578343557976427689, %196
  %980 = or i64 %978, %979
  %981 = xor i64 %980, %976
  %982 = xor i64 %981, %973
  %983 = xor i64 %982, %977
  %984 = xor i64 %983, 0
  %985 = mul i64 %972, %984
  %986 = trunc i64 %985 to i8
  %987 = icmp eq i8 %959, %986
  %988 = and i1 %955, %987
  %989 = or i64 %83, 173518525914906295
  %990 = xor i64 %83, -1
  %991 = and i64 173518525914906295, %990
  %992 = add i64 %991, %83
  %993 = add i64 %51, 6328575931556013378
  %994 = and i64 6328575931556013378, %51
  %995 = or i64 6328575931556013378, %51
  %996 = add i64 %994, %995
  %997 = xor i64 %992, %989
  %998 = xor i64 %997, %996
  %999 = xor i64 %998, %993
  %1000 = xor i64 %999, 7134160335640761615
  %1001 = sext i32 %207 to i64
  %1002 = add i64 %1001, -5220025447381155846
  %1003 = sub i64 0, %1001
  %1004 = add i64 5220025447381155846, %1003
  %1005 = sub i64 0, %1004
  %1006 = and i64 %202, 423367776770134945
  %1007 = xor i64 %202, -1
  %1008 = or i64 -423367776770134946, %1007
  %1009 = xor i64 %1008, -1
  %1010 = and i64 %1009, -1
  %1011 = xor i64 %1010, %1006
  %1012 = xor i64 %1011, -91794140847075580
  %1013 = xor i64 %1012, %1005
  %1014 = xor i64 %1013, %1002
  %1015 = mul i64 %1000, %1014
  %1016 = trunc i64 %1015 to i32
  %1017 = select i1 %988, i32 %1016, i32 388314410
  %1018 = and i64 %19, -3937786618643476833
  %1019 = xor i64 %19, -1
  %1020 = xor i64 -3937786618643476833, %1019
  %1021 = and i64 %1020, -3937786618643476833
  %1022 = and i64 %121, -3017719001911222432
  %1023 = xor i64 %121, -1
  %1024 = or i64 3017719001911222431, %1023
  %1025 = xor i64 %1024, -1
  %1026 = and i64 %1025, -1
  %1027 = sext i32 %207 to i64
  %1028 = add i64 %1027, 6071474660300994203
  %1029 = add i64 8199303317704471612, %1027
  %1030 = sub i64 %1029, 2127828657403477409
  %1031 = xor i64 -855516817404800739, %1030
  %1032 = xor i64 %1031, %1018
  %1033 = xor i64 %1032, %1021
  %1034 = xor i64 %1033, %1028
  %1035 = xor i64 %1034, %1022
  %1036 = xor i64 %1035, %1026
  %1037 = and i64 %101, -3727365837856667617
  %1038 = xor i64 %101, -1
  %1039 = or i64 3727365837856667616, %1038
  %1040 = xor i64 %1039, -1
  %1041 = and i64 %1040, -1
  %1042 = add i64 %23, -635141836918413093
  %1043 = sub i64 0, %23
  %1044 = sub i64 -635141836918413093, %1043
  %1045 = xor i64 %1042, %1037
  %1046 = xor i64 %1045, %1044
  %1047 = xor i64 %1046, %1041
  %1048 = xor i64 %1047, 4707439563690896014
  %1049 = mul i64 %1036, %1048
  %1050 = trunc i64 %1049 to i32
  %1051 = or i32 %1017, %1050
  %1052 = and i32 %1017, 22
  %1053 = sub i32 %1051, %1052
  store i32 %1053, i32* %4, align 4
  %1054 = call i8** @bf10863455059032886292(i32* %4)
  %1055 = load i8*, i8** %1054, align 8
  indirectbr i8* %1055, [label %loopEnd, label %835]

.preheader:                                       ; preds = %.preheader, %loopStart
  %.reload.reload38 = load i32, i32* %.reload.reg2mem, align 4
  %1056 = xor i32 %.reload.reload38, -1
  %1057 = or i32 %1056, -2
  %1058 = xor i32 %1057, -1
  %1059 = and i32 %1058, -1
  store i32 %1059, i32* %.reg2mem50, align 4
  %.reload54 = load i32, i32* %.reg2mem50, align 4
  %1060 = icmp eq i32 %.reload54, 0
  store i1 %1060, i1* %.reg2mem55, align 1
  %.reload.reload37 = load i32, i32* %.reload.reg2mem, align 4
  %1061 = mul i32 %.reload.reload37, %.reload.reload37
  store i32 %1061, i32* %.reg2mem61, align 4
  %.reload.reload36 = load i32, i32* %.reload.reg2mem, align 4
  %1062 = srem i32 %.reload.reload36, 2
  store i32 %1062, i32* %.reg2mem66, align 4
  %.reload72 = load i32, i32* %.reg2mem66, align 4
  %1063 = icmp eq i32 %.reload72, 0
  %1064 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 12
  %1065 = load i32, i32* %1064, align 4
  %1066 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %1067 = load i32, i32* %1066, align 4
  %1068 = srem i32 %1065, %1067
  %1069 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 16
  %1070 = load i32, i32* %1069, align 4
  %1071 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %1072 = load i32, i32* %1071, align 4
  %1073 = srem i32 %1070, %1072
  %1074 = select i1 %1063, i32 %1068, i32 %1073
  store i32 %1074, i32* %dispatcher, align 4
  %1075 = load i8*, i8** %118, align 8
  %1076 = load i8, i8* %1075, align 1
  %1077 = add i64 %27, -6936596148899785608
  %1078 = sub i64 0, %27
  %1079 = add i64 6936596148899785608, %1078
  %1080 = sub i64 0, %1079
  %1081 = and i64 %93, 7031334381909534318
  %1082 = xor i64 %93, -1
  %1083 = or i64 -7031334381909534319, %1082
  %1084 = xor i64 %1083, -1
  %1085 = and i64 %1084, -1
  %1086 = xor i64 %1080, %1077
  %1087 = xor i64 %1086, %1081
  %1088 = xor i64 %1087, %1085
  %1089 = xor i64 %1088, 4868322692152425173
  %1090 = and i64 %9, -3456424709006667667
  %1091 = xor i64 %9, -1
  %1092 = or i64 3456424709006667666, %1091
  %1093 = xor i64 %1092, -1
  %1094 = and i64 %1093, -1
  %1095 = sext i32 %207 to i64
  %1096 = and i64 %1095, -6841131741087526460
  %1097 = or i64 6841131741087526459, %1095
  %1098 = sub i64 %1097, 6841131741087526459
  %1099 = and i64 %55, -5996851813537247761
  %1100 = xor i64 %55, -1
  %1101 = xor i64 -5996851813537247761, %1100
  %1102 = and i64 %1101, -5996851813537247761
  %1103 = xor i64 2432247966708756093, %1096
  %1104 = xor i64 %1103, %1099
  %1105 = xor i64 %1104, %1098
  %1106 = xor i64 %1105, %1094
  %1107 = xor i64 %1106, %1102
  %1108 = xor i64 %1107, %1090
  %1109 = mul i64 %1089, %1108
  %1110 = trunc i64 %1109 to i8
  %1111 = and i8 %1076, %1110
  %1112 = add i64 %23, -1240767191963181307
  %1113 = add i64 -3981634142232003478, %23
  %1114 = sub i64 %1113, -2740866950268822171
  %1115 = add i64 %17, 3582335111611883226
  %1116 = add i64 -6479026819868975379, %17
  %1117 = add i64 %1116, -8385382142228693011
  %1118 = xor i64 %1114, %1117
  %1119 = xor i64 %1118, -6017222451342040453
  %1120 = xor i64 %1119, %1115
  %1121 = xor i64 %1120, %1112
  %1122 = or i64 %95, 3046127652320049647
  %1123 = xor i64 %95, -1
  %1124 = and i64 %1123, -1688157709237485283
  %1125 = and i64 %95, 1688157709237485282
  %1126 = or i64 %1124, %1125
  %1127 = xor i64 -4407773392106161934, %1126
  %1128 = xor i64 %95, -1
  %1129 = or i64 -3046127652320049648, %1128
  %1130 = xor i64 %1129, -1
  %1131 = and i64 %1130, -1
  %1132 = or i64 %1127, %1131
  %1133 = or i64 %186, 3568951345614946622
  %1134 = and i64 3568951345614946622, %186
  %1135 = xor i64 3568951345614946622, %186
  %1136 = or i64 %1134, %1135
  %1137 = or i64 %47, -3733500824898489575
  %1138 = xor i64 %47, -1
  %1139 = and i64 -3733500824898489575, %1138
  %1140 = add i64 %1139, %47
  %1141 = xor i64 %1136, %1133
  %1142 = xor i64 %1141, %1122
  %1143 = xor i64 %1142, 7565117976773389491
  %1144 = xor i64 %1143, %1140
  %1145 = xor i64 %1144, %1132
  %1146 = xor i64 %1145, %1137
  %1147 = mul i64 %1121, %1146
  %1148 = trunc i64 %1147 to i8
  %1149 = icmp eq i8 %1111, %1148
  %1150 = mul i8 %1076, %1076
  %1151 = sub i8 %1150, 116
  %1152 = add i8 %1151, %1076
  %1153 = add i8 %1152, 116
  %1154 = srem i8 %1153, 2
  %1155 = icmp eq i8 %1154, 0
  %1156 = and i64 %111, 21595495994876716
  %1157 = or i64 -21595495994876717, %111
  %1158 = sub i64 %1157, -21595495994876717
  %1159 = add i64 %43, -5954992597407732376
  %1160 = sub i64 0, %43
  %1161 = add i64 5954992597407732376, %1160
  %1162 = sub i64 0, %1161
  %1163 = xor i64 %1162, %1156
  %1164 = xor i64 %1163, -8129496162080907527
  %1165 = xor i64 %1164, %1158
  %1166 = xor i64 %1165, %1159
  %1167 = or i64 %11, -5970192957402157284
  %1168 = and i64 -5970192957402157284, %11
  %1169 = xor i64 -5970192957402157284, %11
  %1170 = or i64 %1168, %1169
  %1171 = and i64 %198, 4735126599329507580
  %1172 = xor i64 %198, -1
  %1173 = xor i64 4735126599329507580, %1172
  %1174 = and i64 %1173, 4735126599329507580
  %1175 = xor i64 %1167, %1174
  %1176 = xor i64 %1175, %1170
  %1177 = xor i64 %1176, 5892355640364909385
  %1178 = xor i64 %1177, %1171
  %1179 = mul i64 %1166, %1178
  %1180 = trunc i64 %1179 to i1
  %1181 = xor i1 %1149, %1180
  %1182 = and i1 %1181, true
  %1183 = or i64 %71, -6417058723630116234
  %1184 = xor i64 %71, -1
  %1185 = and i64 %1184, -4695796518700786394
  %1186 = and i64 %71, 4695796518700786393
  %1187 = or i64 %1185, %1186
  %1188 = xor i64 1740406944413667152, %1187
  %1189 = xor i64 %71, -1
  %1190 = or i64 6417058723630116233, %1189
  %1191 = xor i64 %1190, -1
  %1192 = and i64 %1191, -1
  %1193 = or i64 %1188, %1192
  %1194 = or i64 %39, -8979622964194567182
  %1195 = and i64 -8979622964194567182, %39
  %1196 = xor i64 -8979622964194567182, %39
  %1197 = or i64 %1195, %1196
  %1198 = xor i64 %1183, %1193
  %1199 = xor i64 %1198, %1194
  %1200 = xor i64 %1199, 9129467017239320397
  %1201 = xor i64 %1200, %1197
  %1202 = or i64 %81, -2889388970799805688
  %1203 = xor i64 %81, -1
  %1204 = and i64 -2889388970799805688, %1203
  %1205 = add i64 %1204, %81
  %1206 = and i64 %9, 71302572838749739
  %1207 = or i64 -71302572838749740, %9
  %1208 = sub i64 %1207, -71302572838749740
  %1209 = add i64 %188, -4338038414816086846
  %1210 = and i64 -4338038414816086846, %188
  %1211 = or i64 -4338038414816086846, %188
  %1212 = add i64 %1210, %1211
  %1213 = xor i64 %1206, %1209
  %1214 = xor i64 %1213, %1202
  %1215 = xor i64 %1214, %1208
  %1216 = xor i64 %1215, %1205
  %1217 = xor i64 %1216, %1212
  %1218 = xor i64 %1217, 0
  %1219 = mul i64 %1201, %1218
  %1220 = trunc i64 %1219 to i1
  %1221 = and i1 %1149, %1220
  %1222 = or i1 %1182, %1221
  %1223 = xor i1 %1155, true
  %1224 = and i1 %1223, true
  %1225 = and i1 %1155, false
  %1226 = or i1 %1224, %1225
  %1227 = xor i1 %1222, %1226
  %1228 = xor i1 %1149, true
  %1229 = xor i1 %1155, true
  %1230 = or i1 %1228, %1229
  %1231 = xor i1 %1230, true
  %1232 = and i1 %1231, true
  %1233 = or i1 %1227, %1232
  %1234 = select i1 %1233, i32 388314402, i32 388314410
  %1235 = xor i32 %1234, -1
  %1236 = and i32 %1235, -195827466
  %1237 = and i32 %1234, 195827465
  %1238 = or i32 %1236, %1237
  %1239 = xor i32 %1238, -195827458
  store i32 %1239, i32* %4, align 4
  %1240 = call i8** @bf10863455059032886292(i32* %4)
  %1241 = load i8*, i8** %1240, align 8
  indirectbr i8* %1241, [label %loopEnd, label %.preheader]

1242:                                             ; preds = %1242, %loopStart
  %1243 = mul i64 69, 29
  %.reload.reload35 = load i32, i32* %.reload.reg2mem, align 4
  %.reload65 = load i32, i32* %.reg2mem61, align 4
  %1244 = add i32 %.reload65, -1867439475
  %1245 = add i32 %1244, %.reload.reload35
  %1246 = sub i32 %1245, -1867439475
  store i32 %1246, i32* %.reg2mem73, align 4
  %1247 = add i64 -2981287424533945479, 2981287424533945437
  %.reload75 = load i32, i32* %.reg2mem73, align 4
  %1248 = add i64 %45, 6125126313696783623
  %1249 = and i64 6125126313696783623, %45
  %1250 = or i64 6125126313696783623, %45
  %1251 = add i64 %1249, %1250
  %1252 = add i64 %196, 222240518437319713
  %1253 = and i64 222240518437319713, %196
  %1254 = or i64 222240518437319713, %196
  %1255 = add i64 %1253, %1254
  %1256 = or i64 %31, 3419418844892301486
  %1257 = xor i64 %31, -1
  %1258 = and i64 %1257, 8110573503109712984
  %1259 = and i64 %31, -8110573503109712985
  %1260 = or i64 %1258, %1259
  %1261 = xor i64 6916047932690646262, %1260
  %1262 = xor i64 %31, -1
  %1263 = or i64 -3419418844892301487, %1262
  %1264 = xor i64 %1263, -1
  %1265 = and i64 %1264, -1
  %1266 = or i64 %1261, %1265
  %1267 = xor i64 %1255, %1266
  %1268 = xor i64 %1267, %1251
  %1269 = xor i64 %1268, 1163961889543230939
  %1270 = xor i64 %1269, %1248
  %1271 = xor i64 %1270, %1256
  %1272 = xor i64 %1271, %1252
  %1273 = and i64 %107, 7130519183058108117
  %1274 = xor i64 %107, -1
  %1275 = or i64 -7130519183058108118, %1274
  %1276 = xor i64 %1275, -1
  %1277 = and i64 %1276, -1
  %1278 = or i64 %67, 5535326239470079401
  %1279 = xor i64 %67, -1
  %1280 = and i64 %1279, -8466445566136117827
  %1281 = and i64 %67, 8466445566136117826
  %1282 = or i64 %1280, %1281
  %1283 = xor i64 -4156741649277003756, %1282
  %1284 = xor i64 %67, -1
  %1285 = or i64 -5535326239470079402, %1284
  %1286 = xor i64 %1285, -1
  %1287 = and i64 %1286, -1
  %1288 = or i64 %1283, %1287
  %1289 = and i64 %17, 7218162760450477816
  %1290 = or i64 -7218162760450477817, %17
  %1291 = sub i64 %1290, -7218162760450477817
  %1292 = xor i64 8150177664598317817, %1291
  %1293 = xor i64 %1292, %1278
  %1294 = xor i64 %1293, %1277
  %1295 = xor i64 %1294, %1289
  %1296 = xor i64 %1295, %1273
  %1297 = xor i64 %1296, %1288
  %1298 = mul i64 %1272, %1297
  %1299 = trunc i64 %1298 to i32
  %1300 = mul i32 %.reload75, %1299
  store i32 %1300, i32* %.reg2mem76, align 4
  %1301 = add i64 83, 81
  %.reload78 = load i32, i32* %.reg2mem76, align 4
  %1302 = srem i32 %.reload78, 2
  store i32 %1302, i32* %.reg2mem79, align 4
  %1303 = sub i64 87, 42
  %.reload81 = load i32, i32* %.reg2mem79, align 4
  %1304 = icmp eq i32 %.reload81, 0
  store i1 %1304, i1* %.reg2mem82, align 1
  %1305 = sdiv i64 19, 34
  %.reload60 = load i1, i1* %.reg2mem55, align 1
  %.reload85 = load i1, i1* %.reg2mem82, align 1
  %1306 = and i1 %.reload60, %.reload85
  store i1 %1306, i1* %.reg2mem86, align 1
  %1307 = add i64 88, -123
  %.reload59 = load i1, i1* %.reg2mem55, align 1
  %.reload84 = load i1, i1* %.reg2mem82, align 1
  %1308 = or i1 %.reload59, %.reload84
  %1309 = and i1 %.reload59, %.reload84
  %1310 = sub i1 %1308, %1309
  store i1 %1310, i1* %.reg2mem89, align 1
  %.reload.reload34 = load i32, i32* %.reload.reg2mem, align 4
  %1311 = srem i32 %.reload.reload34, 2
  %1312 = icmp eq i32 %1311, 0
  %.reload71 = load i32, i32* %.reg2mem66, align 4
  %1313 = and i64 %19, 555436573372121618
  %1314 = or i64 -555436573372121619, %19
  %1315 = sub i64 %1314, -555436573372121619
  %1316 = and i64 %117, 8585087180565714646
  %1317 = or i64 -8585087180565714647, %117
  %1318 = sub i64 %1317, -8585087180565714647
  %1319 = xor i64 %1318, %1313
  %1320 = xor i64 %1319, %1316
  %1321 = xor i64 %1320, -5765645547423804035
  %1322 = xor i64 %1321, %1315
  %1323 = or i64 %73, -7127358755193633129
  %1324 = xor i64 %73, -1
  %1325 = and i64 -7127358755193633129, %1324
  %1326 = add i64 %1325, %73
  %1327 = and i64 %61, 929596134876772804
  %1328 = xor i64 %61, -1
  %1329 = or i64 -929596134876772805, %1328
  %1330 = xor i64 %1329, -1
  %1331 = and i64 %1330, -1
  %1332 = xor i64 %1331, 1652820640491247530
  %1333 = xor i64 %1332, %1326
  %1334 = xor i64 %1333, %1323
  %1335 = xor i64 %1334, %1327
  %1336 = mul i64 %1322, %1335
  %1337 = trunc i64 %1336 to i32
  %1338 = mul i32 %.reload71, %1337
  %.reload70 = load i32, i32* %.reg2mem66, align 4
  %1339 = mul i32 %.reload70, 2
  %1340 = xor i32 2, %1339
  %1341 = and i32 2, %1339
  %1342 = and i64 %198, -8358280622149568325
  %1343 = xor i64 %198, -1
  %1344 = or i64 8358280622149568324, %1343
  %1345 = xor i64 %1344, -1
  %1346 = and i64 %1345, -1
  %1347 = and i64 %31, 2366721689801874308
  %1348 = xor i64 %31, -1
  %1349 = xor i64 2366721689801874308, %1348
  %1350 = and i64 %1349, 2366721689801874308
  %1351 = xor i64 %1346, %1350
  %1352 = xor i64 %1351, -1010685199124529115
  %1353 = xor i64 %1352, %1347
  %1354 = xor i64 %1353, %1342
  %1355 = and i64 %15, 7058283386349106335
  %1356 = xor i64 %15, -1
  %1357 = xor i64 7058283386349106335, %1356
  %1358 = and i64 %1357, 7058283386349106335
  %1359 = or i64 %103, -6160848263478418532
  %1360 = xor i64 %103, -1
  %1361 = and i64 -6160848263478418532, %1360
  %1362 = add i64 %1361, %103
  %1363 = xor i64 8487557398338746202, %1355
  %1364 = xor i64 %1363, %1358
  %1365 = xor i64 %1364, %1362
  %1366 = xor i64 %1365, %1359
  %1367 = mul i64 %1354, %1366
  %1368 = trunc i64 %1367 to i32
  %1369 = mul i32 %1368, %1341
  %1370 = add i32 %1340, %1369
  %1371 = mul i32 %1338, %1370
  %1372 = srem i32 %1371, 4
  %1373 = icmp eq i32 %1372, 0
  %.reload69 = load i32, i32* %.reg2mem66, align 4
  %1374 = mul i32 %.reload69, %.reload69
  %.reload68 = load i32, i32* %.reg2mem66, align 4
  %1375 = mul i32 %1374, %.reload68
  %.reload67 = load i32, i32* %.reg2mem66, align 4
  %1376 = xor i32 %1375, %.reload67
  %1377 = and i32 %1375, %.reload67
  %1378 = mul i32 2, %1377
  %1379 = add i32 %1376, %1378
  %1380 = srem i32 %1379, 2
  %1381 = icmp eq i32 %1380, 0
  %1382 = and i1 %1373, %1381
  store i1 %1382, i1* %.reg2mem92, align 1
  %1383 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  %1384 = load i32, i32* %1383, align 4
  %1385 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 12
  %1386 = load i32, i32* %1385, align 4
  %1387 = sub i32 %1384, %1386
  %1388 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 9
  %1389 = load i32, i32* %1388, align 4
  %1390 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 7
  %1391 = load i32, i32* %1390, align 4
  %1392 = add i32 %1389, %1391
  %.reload94 = load i1, i1* %.reg2mem92, align 1
  %1393 = select i1 %.reload94, i32 %1387, i32 %1392
  store i32 %1393, i32* %dispatcher, align 4
  %1394 = load i8*, i8** %92, align 8
  %1395 = load i8, i8* %1394, align 1
  %1396 = mul i8 %1395, %1395
  %1397 = and i64 %103, -2051046460128012668
  %1398 = xor i64 %103, -1
  %1399 = xor i64 -2051046460128012668, %1398
  %1400 = and i64 %1399, -2051046460128012668
  %1401 = and i64 %111, 4095421382940866392
  %1402 = xor i64 %111, -1
  %1403 = or i64 -4095421382940866393, %1402
  %1404 = xor i64 %1403, -1
  %1405 = and i64 %1404, -1
  %1406 = xor i64 %1405, -1971151123463893929
  %1407 = xor i64 %1406, %1400
  %1408 = xor i64 %1407, %1397
  %1409 = xor i64 %1408, %1401
  %1410 = or i64 %59, 6019659772060918498
  %1411 = xor i64 %59, -1
  %1412 = and i64 %1411, -5826242998053964654
  %1413 = and i64 %59, 5826242998053964653
  %1414 = or i64 %1412, %1413
  %1415 = xor i64 -238929958867265936, %1414
  %1416 = xor i64 %59, -1
  %1417 = or i64 -6019659772060918499, %1416
  %1418 = xor i64 %1417, -1
  %1419 = and i64 %1418, -1
  %1420 = or i64 %1415, %1419
  %1421 = and i64 %59, -5202542955022902115
  %1422 = or i64 5202542955022902114, %59
  %1423 = sub i64 %1422, 5202542955022902114
  %1424 = xor i64 %1410, %1423
  %1425 = xor i64 %1424, 0
  %1426 = xor i64 %1425, %1420
  %1427 = xor i64 %1426, %1421
  %1428 = mul i64 %1409, %1427
  %1429 = trunc i64 %1428 to i8
  %1430 = sub i8 %1429, %1395
  %1431 = sub i8 %1396, %1430
  %1432 = mul i8 %1431, 3
  %1433 = srem i8 %1432, 2
  %1434 = icmp eq i8 %1433, 0
  %1435 = mul i8 %1395, %1395
  %1436 = add i8 %1435, %1395
  %1437 = add i64 %95, 4252214470706836079
  %1438 = sub i64 0, %95
  %1439 = sub i64 4252214470706836079, %1438
  %1440 = and i64 %39, -126402350278815557
  %1441 = xor i64 %39, -1
  %1442 = or i64 126402350278815556, %1441
  %1443 = xor i64 %1442, -1
  %1444 = and i64 %1443, -1
  %1445 = and i64 %39, -3827327031219092745
  %1446 = xor i64 %39, -1
  %1447 = xor i64 -3827327031219092745, %1446
  %1448 = and i64 %1447, -3827327031219092745
  %1449 = xor i64 %1437, %1440
  %1450 = xor i64 %1449, %1439
  %1451 = xor i64 %1450, %1448
  %1452 = xor i64 %1451, %1445
  %1453 = xor i64 %1452, -7438050760302169229
  %1454 = xor i64 %1453, %1444
  %1455 = or i64 %107, 8853655885745891652
  %1456 = xor i64 %107, -1
  %1457 = and i64 %1456, -4699077121834089751
  %1458 = and i64 %107, 4699077121834089750
  %1459 = or i64 %1457, %1458
  %1460 = xor i64 -4316973610162705491, %1459
  %1461 = xor i64 %107, -1
  %1462 = or i64 -8853655885745891653, %1461
  %1463 = xor i64 %1462, -1
  %1464 = and i64 %1463, -1
  %1465 = or i64 %1460, %1464
  %1466 = or i64 %109, -5665659666686707645
  %1467 = and i64 -5665659666686707645, %109
  %1468 = xor i64 -5665659666686707645, %109
  %1469 = or i64 %1467, %1468
  %1470 = xor i64 %1466, -6950413928028974218
  %1471 = xor i64 %1470, %1469
  %1472 = xor i64 %1471, %1465
  %1473 = xor i64 %1472, %1455
  %1474 = mul i64 %1454, %1473
  %1475 = trunc i64 %1474 to i8
  %1476 = srem i8 %1436, %1475
  %1477 = icmp eq i8 %1476, 0
  %1478 = and i1 %1434, %1477
  %1479 = select i1 %1478, i32 388314399, i32 388314410
  %1480 = or i32 %1479, 53
  %1481 = and i32 %1479, 53
  %1482 = sub i32 %1480, %1481
  store i32 %1482, i32* %4, align 4
  %1483 = call i8** @bf10863455059032886292(i32* %4)
  %1484 = load i8*, i8** %1483, align 8
  indirectbr i8* %1484, [label %loopEnd, label %1242]

1485:                                             ; preds = %1485, %loopStart
  %.reload88 = load i1, i1* %.reg2mem86, align 1
  %.reload91 = load i1, i1* %.reg2mem89, align 1
  %1486 = or i1 %.reload88, %.reload91
  %1487 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 15
  %1488 = load i32, i32* %1487, align 4
  %1489 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %1490 = load i32, i32* %1489, align 4
  %1491 = srem i32 %1488, %1490
  %1492 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 11
  %1493 = load i32, i32* %1492, align 4
  %1494 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %1495 = load i32, i32* %1494, align 4
  %1496 = srem i32 %1493, %1495
  %.reload93 = load i1, i1* %.reg2mem92, align 1
  %1497 = select i1 %.reload93, i32 %1491, i32 %1496
  store i32 %1497, i32* %dispatcher, align 4
  store i1 %1486, i1* %.reg2mem148, align 1
  %1498 = load i8*, i8** %22, align 8
  %1499 = load i8, i8* %1498, align 1
  %1500 = and i8 %1499, 1
  %1501 = icmp eq i8 %1500, 0
  %1502 = mul i8 %1499, %1499
  %1503 = add i8 %1502, %1499
  %1504 = mul i8 %1503, 3
  %1505 = srem i8 %1504, 2
  %1506 = icmp eq i8 %1505, 0
  %1507 = or i1 %1501, %1506
  %1508 = and i64 %53, -5373202292088056684
  %1509 = xor i64 %53, -1
  %1510 = or i64 5373202292088056683, %1509
  %1511 = xor i64 %1510, -1
  %1512 = and i64 %1511, -1
  %1513 = and i64 %105, -7308520708643959537
  %1514 = or i64 7308520708643959536, %105
  %1515 = sub i64 %1514, 7308520708643959536
  %1516 = xor i64 %1515, 1557840004431227199
  %1517 = xor i64 %1516, %1512
  %1518 = xor i64 %1517, %1513
  %1519 = xor i64 %1518, %1508
  %1520 = add i64 %61, -2639501909896333305
  %1521 = sub i64 0, %61
  %1522 = sub i64 -2639501909896333305, %1521
  %1523 = or i64 %87, -7578024581612450662
  %1524 = xor i64 %87, -1
  %1525 = and i64 %1524, 7979419806624653627
  %1526 = and i64 %87, -7979419806624653628
  %1527 = or i64 %1525, %1526
  %1528 = xor i64 -546647758550078047, %1527
  %1529 = xor i64 %87, -1
  %1530 = or i64 7578024581612450661, %1529
  %1531 = xor i64 %1530, -1
  %1532 = and i64 %1531, -1
  %1533 = or i64 %1528, %1532
  %1534 = xor i64 %1533, -1024804595276175786
  %1535 = xor i64 %1534, %1520
  %1536 = xor i64 %1535, %1522
  %1537 = xor i64 %1536, %1523
  %1538 = mul i64 %1519, %1537
  %1539 = trunc i64 %1538 to i32
  %1540 = select i1 %1507, i32 388314425, i32 %1539
  %1541 = xor i32 %1540, -1
  %1542 = and i32 %1541, 19
  %1543 = or i64 %29, 5112540863255345292
  %1544 = and i64 5112540863255345292, %29
  %1545 = xor i64 5112540863255345292, %29
  %1546 = or i64 %1544, %1545
  %1547 = sext i32 %207 to i64
  %1548 = and i64 %1547, 2849713390430476485
  %1549 = xor i64 %1547, -1
  %1550 = xor i64 2849713390430476485, %1549
  %1551 = and i64 %1550, 2849713390430476485
  %1552 = or i64 %89, 6826890791140539771
  %1553 = and i64 6826890791140539771, %89
  %1554 = xor i64 6826890791140539771, %89
  %1555 = or i64 %1553, %1554
  %1556 = xor i64 %1552, %1551
  %1557 = xor i64 %1556, %1555
  %1558 = xor i64 %1557, %1543
  %1559 = xor i64 %1558, %1548
  %1560 = xor i64 %1559, 4266463628087992481
  %1561 = xor i64 %1560, %1546
  %1562 = or i64 %71, -3220362805768256084
  %1563 = xor i64 %71, -1
  %1564 = and i64 -3220362805768256084, %1563
  %1565 = add i64 %1564, %71
  %1566 = add i64 %81, -2940343038251031445
  %1567 = add i64 -5431991826906436808, %81
  %1568 = add i64 %1567, 2491648788655405363
  %1569 = xor i64 %1565, -7252407061753316244
  %1570 = xor i64 %1569, %1568
  %1571 = xor i64 %1570, %1566
  %1572 = xor i64 %1571, %1562
  %1573 = mul i64 %1561, %1572
  %1574 = trunc i64 %1573 to i32
  %1575 = and i32 %1540, %1574
  %1576 = or i32 %1542, %1575
  store i32 %1576, i32* %4, align 4
  %1577 = call i8** @bf10863455059032886292(i32* %4)
  %1578 = load i8*, i8** %1577, align 8
  indirectbr i8* %1578, [label %loopEnd, label %1485]

1579:                                             ; preds = %1579, %loopStart
  %.reload87 = load i1, i1* %.reg2mem86, align 1
  %.reload90 = load i1, i1* %.reg2mem89, align 1
  %1580 = or i1 %.reload87, %.reload90
  %1581 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 15
  %1582 = load i32, i32* %1581, align 4
  %1583 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %1584 = load i32, i32* %1583, align 4
  %1585 = srem i32 %1582, %1584
  store i32 %1585, i32* %dispatcher, align 4
  store i1 %1580, i1* %.reg2mem148, align 1
  %1586 = load i8*, i8** %108, align 8
  %1587 = load i8, i8* %1586, align 1
  %1588 = mul i8 %1587, 2
  %1589 = mul i8 %1587, 2
  %1590 = xor i8 2, %1589
  %1591 = and i8 2, %1589
  %1592 = mul i8 2, %1591
  %1593 = add i8 %1590, %1592
  %1594 = mul i8 %1588, %1593
  %1595 = or i64 %73, 2774450048635938248
  %1596 = and i64 2774450048635938248, %73
  %1597 = xor i64 2774450048635938248, %73
  %1598 = or i64 %1596, %1597
  %1599 = or i64 %85, 595564744661386898
  %1600 = xor i64 %85, -1
  %1601 = and i64 %1600, 8649121938499207690
  %1602 = and i64 %85, -8649121938499207691
  %1603 = or i64 %1601, %1602
  %1604 = xor i64 8089595680437388440, %1603
  %1605 = xor i64 %85, -1
  %1606 = or i64 -595564744661386899, %1605
  %1607 = xor i64 %1606, -1
  %1608 = and i64 %1607, -1
  %1609 = or i64 %1604, %1608
  %1610 = add i64 %29, 5800434363861982851
  %1611 = xor i64 5800434363861982851, %29
  %1612 = and i64 5800434363861982851, %29
  %1613 = mul i64 2, %1612
  %1614 = add i64 %1611, %1613
  %1615 = xor i64 %1610, %1599
  %1616 = xor i64 %1615, -5763001888402871885
  %1617 = xor i64 %1616, %1609
  %1618 = xor i64 %1617, %1598
  %1619 = xor i64 %1618, %1595
  %1620 = xor i64 %1619, %1614
  %1621 = add i64 %117, 8634422166187576359
  %1622 = add i64 -8199673796766960817, %117
  %1623 = sub i64 %1622, 1612648110755014440
  %1624 = add i64 %194, 8378921032374787553
  %1625 = sub i64 0, %194
  %1626 = sub i64 8378921032374787553, %1625
  %1627 = and i64 %19, 3652365676778891050
  %1628 = or i64 -3652365676778891051, %19
  %1629 = sub i64 %1628, -3652365676778891051
  %1630 = xor i64 %1624, %1627
  %1631 = xor i64 %1630, %1629
  %1632 = xor i64 %1631, %1621
  %1633 = xor i64 %1632, %1623
  %1634 = xor i64 %1633, 6301694719321028076
  %1635 = xor i64 %1634, %1626
  %1636 = mul i64 %1620, %1635
  %1637 = trunc i64 %1636 to i8
  %1638 = srem i8 %1594, %1637
  %1639 = icmp eq i8 %1638, 0
  %1640 = mul i8 %1587, %1587
  %1641 = add i8 %1640, %1587
  %1642 = srem i8 %1641, 2
  %1643 = icmp eq i8 %1642, 0
  %1644 = or i1 %1639, %1643
  %1645 = select i1 %1644, i32 388314368, i32 388314410
  %1646 = or i32 %1645, 42
  %1647 = and i32 %1645, 42
  %1648 = sub i32 %1646, %1647
  store i32 %1648, i32* %4, align 4
  %1649 = call i8** @bf10863455059032886292(i32* %4)
  %1650 = load i8*, i8** %1649, align 8
  indirectbr i8* %1650, [label %loopEnd, label %1579]

1651:                                             ; preds = %1651, %loopStart
  %.reload149 = load i1, i1* %.reg2mem148, align 1
  %1652 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 31
  %1653 = load i32, i32* %1652, align 4
  %1654 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %1655 = load i32, i32* %1654, align 4
  %1656 = add i64 %59, -6073339599934907525
  %1657 = sub i64 0, %59
  %1658 = sub i64 -6073339599934907525, %1657
  %1659 = or i64 %19, 6488640225737242607
  %1660 = and i64 6488640225737242607, %19
  %1661 = xor i64 6488640225737242607, %19
  %1662 = or i64 %1660, %1661
  %1663 = xor i64 %1662, %1656
  %1664 = xor i64 %1663, %1659
  %1665 = xor i64 %1664, %1658
  %1666 = xor i64 %1665, -6359136436900554869
  %1667 = or i64 %202, 7679823461603126469
  %1668 = xor i64 %202, -1
  %1669 = and i64 7679823461603126469, %1668
  %1670 = add i64 %1669, %202
  %1671 = and i64 %190, 440222005556909884
  %1672 = xor i64 %190, -1
  %1673 = or i64 -440222005556909885, %1672
  %1674 = xor i64 %1673, -1
  %1675 = and i64 %1674, -1
  %1676 = and i64 %81, -2173134944819528577
  %1677 = xor i64 %81, -1
  %1678 = or i64 2173134944819528576, %1677
  %1679 = xor i64 %1678, -1
  %1680 = and i64 %1679, -1
  %1681 = xor i64 %1671, 2975563415253969475
  %1682 = xor i64 %1681, %1680
  %1683 = xor i64 %1682, %1675
  %1684 = xor i64 %1683, %1676
  %1685 = xor i64 %1684, %1670
  %1686 = xor i64 %1685, %1667
  %1687 = mul i64 %1666, %1686
  %1688 = trunc i64 %1687 to i32
  %1689 = sub i32 %1653, %1688
  %1690 = sub i32 %1689, %1655
  %1691 = and i64 %103, -5508914040304158971
  %1692 = or i64 5508914040304158970, %103
  %1693 = sub i64 %1692, 5508914040304158970
  %1694 = or i64 %19, -742023924783534043
  %1695 = xor i64 %19, -1
  %1696 = and i64 -742023924783534043, %1695
  %1697 = add i64 %1696, %19
  %1698 = xor i64 4265853734189758131, %1693
  %1699 = xor i64 %1698, %1691
  %1700 = xor i64 %1699, %1694
  %1701 = xor i64 %1700, %1697
  %1702 = or i64 %7, 4002439082595482807
  %1703 = and i64 4002439082595482807, %7
  %1704 = xor i64 4002439082595482807, %7
  %1705 = or i64 %1703, %1704
  %1706 = or i64 %83, -7428431238735630627
  %1707 = xor i64 %83, -1
  %1708 = and i64 %1707, 667013824387703462
  %1709 = and i64 %83, -667013824387703463
  %1710 = or i64 %1708, %1709
  %1711 = xor i64 -7950721759008256901, %1710
  %1712 = xor i64 %83, -1
  %1713 = or i64 7428431238735630626, %1712
  %1714 = xor i64 %1713, -1
  %1715 = and i64 %1714, -1
  %1716 = or i64 %1711, %1715
  %1717 = xor i64 %1705, -4318876088713296997
  %1718 = xor i64 %1717, %1716
  %1719 = xor i64 %1718, %1706
  %1720 = xor i64 %1719, %1702
  %1721 = mul i64 %1701, %1720
  %1722 = trunc i64 %1721 to i32
  %1723 = add i32 %1690, %1722
  store i32 %1723, i32* %dispatcher, align 4
  %.reload74 = load i32, i32* %.reg2mem73, align 4
  %.reload77 = load i32, i32* %.reg2mem76, align 4
  %.reload80 = load i32, i32* %.reg2mem79, align 4
  %.reload83 = load i1, i1* %.reg2mem82, align 1
  store i32 %.reload74, i32* %.reg2mem150, align 4
  store i1 %.reload149, i1* %.reg2mem152, align 1
  %1724 = load i8*, i8** %70, align 8
  %1725 = load i8, i8* %1724, align 1
  %1726 = sext i32 %207 to i64
  %1727 = add i64 %1726, -8928108237866685936
  %1728 = and i64 -8928108237866685936, %1726
  %1729 = or i64 -8928108237866685936, %1726
  %1730 = add i64 %1728, %1729
  %1731 = add i64 %11, 8081445853157565327
  %1732 = add i64 6613211156776061807, %11
  %1733 = sub i64 %1732, -1468234696381503520
  %1734 = xor i64 -5946873782270321477, %1727
  %1735 = xor i64 %1734, %1731
  %1736 = xor i64 %1735, %1730
  %1737 = xor i64 %1736, %1733
  %1738 = and i64 %63, 1522251060878368430
  %1739 = xor i64 %63, -1
  %1740 = or i64 -1522251060878368431, %1739
  %1741 = xor i64 %1740, -1
  %1742 = and i64 %1741, -1
  %1743 = and i64 %73, -8388899617494632263
  %1744 = xor i64 %73, -1
  %1745 = or i64 8388899617494632262, %1744
  %1746 = xor i64 %1745, -1
  %1747 = and i64 %1746, -1
  %1748 = xor i64 7693508665852858598, %1742
  %1749 = xor i64 %1748, %1743
  %1750 = xor i64 %1749, %1747
  %1751 = xor i64 %1750, %1738
  %1752 = mul i64 %1737, %1751
  %1753 = trunc i64 %1752 to i8
  %1754 = mul i8 %1725, %1753
  %1755 = and i64 %35, -2381694889476719057
  %1756 = or i64 2381694889476719056, %35
  %1757 = sub i64 %1756, 2381694889476719056
  %1758 = add i64 %192, 4978434087240268911
  %1759 = add i64 180528884895281267, %192
  %1760 = add i64 %1759, 4797905202344987644
  %1761 = xor i64 -1848121040835184013, %1758
  %1762 = xor i64 %1761, %1757
  %1763 = xor i64 %1762, %1760
  %1764 = xor i64 %1763, %1755
  %1765 = or i64 %65, 9005600394177513630
  %1766 = xor i64 %65, -1
  %1767 = and i64 %1766, -1030265485065971073
  %1768 = and i64 %65, 1030265485065971072
  %1769 = or i64 %1767, %1768
  %1770 = xor i64 -8265913842155023647, %1769
  %1771 = xor i64 %65, -1
  %1772 = or i64 -9005600394177513631, %1771
  %1773 = xor i64 %1772, -1
  %1774 = and i64 %1773, -1
  %1775 = or i64 %1770, %1774
  %1776 = add i64 %81, -6647263326697230498
  %1777 = and i64 -6647263326697230498, %81
  %1778 = or i64 -6647263326697230498, %81
  %1779 = add i64 %1777, %1778
  %1780 = xor i64 %1776, %1779
  %1781 = xor i64 %1780, %1775
  %1782 = xor i64 %1781, 7162496181603693942
  %1783 = xor i64 %1782, %1765
  %1784 = mul i64 %1764, %1783
  %1785 = trunc i64 %1784 to i8
  %1786 = mul i8 %1725, %1785
  %1787 = add i8 2, %1786
  %1788 = mul i8 %1754, %1787
  %1789 = add i64 %41, 2235604982230303739
  %1790 = xor i64 2235604982230303739, %41
  %1791 = and i64 2235604982230303739, %41
  %1792 = mul i64 2, %1791
  %1793 = add i64 %1790, %1792
  %1794 = sext i32 %dispatcher1 to i64
  %1795 = and i64 %1794, -7552223009207194124
  %1796 = or i64 7552223009207194123, %1794
  %1797 = sub i64 %1796, 7552223009207194123
  %1798 = add i64 %184, 5957236164924799998
  %1799 = xor i64 5957236164924799998, %184
  %1800 = and i64 5957236164924799998, %184
  %1801 = mul i64 2, %1800
  %1802 = add i64 %1799, %1801
  %1803 = xor i64 -1312163253591904767, %1802
  %1804 = xor i64 %1803, %1797
  %1805 = xor i64 %1804, %1795
  %1806 = xor i64 %1805, %1798
  %1807 = xor i64 %1806, %1789
  %1808 = xor i64 %1807, %1793
  %1809 = or i64 %101, -4256744337447296682
  %1810 = xor i64 %101, -1
  %1811 = and i64 %1810, -833837606673759657
  %1812 = and i64 %101, 833837606673759656
  %1813 = or i64 %1811, %1812
  %1814 = xor i64 3494965424659178241, %1813
  %1815 = xor i64 %101, -1
  %1816 = or i64 4256744337447296681, %1815
  %1817 = xor i64 %1816, -1
  %1818 = and i64 %1817, -1
  %1819 = or i64 %1814, %1818
  %1820 = add i64 %51, 8725304901771465824
  %1821 = and i64 8725304901771465824, %51
  %1822 = or i64 8725304901771465824, %51
  %1823 = add i64 %1821, %1822
  %1824 = and i64 %121, -5042584052417665083
  %1825 = xor i64 %121, -1
  %1826 = or i64 5042584052417665082, %1825
  %1827 = xor i64 %1826, -1
  %1828 = and i64 %1827, -1
  %1829 = xor i64 %1823, %1824
  %1830 = xor i64 %1829, %1820
  %1831 = xor i64 %1830, %1828
  %1832 = xor i64 %1831, %1819
  %1833 = xor i64 %1832, %1809
  %1834 = xor i64 %1833, -2640358599926593532
  %1835 = mul i64 %1808, %1834
  %1836 = trunc i64 %1835 to i8
  %1837 = srem i8 %1788, %1836
  %1838 = add i64 %117, 1579202167741944549
  %1839 = add i64 4254768407280018955, %117
  %1840 = sub i64 %1839, 2675566239538074406
  %1841 = or i64 %59, -5223727404750102627
  %1842 = xor i64 %59, -1
  %1843 = and i64 -5223727404750102627, %1842
  %1844 = add i64 %1843, %59
  %1845 = xor i64 %1838, 7838798778341106535
  %1846 = xor i64 %1845, %1840
  %1847 = xor i64 %1846, %1841
  %1848 = xor i64 %1847, %1844
  %1849 = or i64 %99, 6335477270055047155
  %1850 = xor i64 %99, -1
  %1851 = and i64 %1850, 4770315596527333312
  %1852 = and i64 %99, -4770315596527333313
  %1853 = or i64 %1851, %1852
  %1854 = xor i64 1576176033457315891, %1853
  %1855 = xor i64 %99, -1
  %1856 = or i64 -6335477270055047156, %1855
  %1857 = xor i64 %1856, -1
  %1858 = and i64 %1857, -1
  %1859 = or i64 %1854, %1858
  %1860 = and i64 %71, 2392522673443350532
  %1861 = xor i64 %71, -1
  %1862 = xor i64 2392522673443350532, %1861
  %1863 = and i64 %1862, 2392522673443350532
  %1864 = and i64 %11, 8486560154045605171
  %1865 = or i64 -8486560154045605172, %11
  %1866 = sub i64 %1865, -8486560154045605172
  %1867 = xor i64 %1859, %1866
  %1868 = xor i64 %1867, %1864
  %1869 = xor i64 %1868, %1849
  %1870 = xor i64 %1869, %1860
  %1871 = xor i64 %1870, %1863
  %1872 = xor i64 %1871, 0
  %1873 = mul i64 %1848, %1872
  %1874 = trunc i64 %1873 to i8
  %1875 = icmp eq i8 %1837, %1874
  %1876 = mul i8 %1725, %1725
  %1877 = mul i8 %1876, %1725
  %1878 = sub i8 %1877, 49
  %1879 = add i8 %1878, %1725
  %1880 = add i8 %1879, 49
  %1881 = srem i8 %1880, 2
  %1882 = icmp eq i8 %1881, 0
  %1883 = and i1 %1875, %1882
  %1884 = select i1 %1883, i32 388314375, i32 388314410
  %1885 = xor i32 %1884, 45
  store i32 %1885, i32* %4, align 4
  %1886 = call i8** @bf10863455059032886292(i32* %4)
  %1887 = load i8*, i8** %1886, align 8
  indirectbr i8* %1887, [label %loopEnd, label %1651]

codeRepl30:                                       ; preds = %codeRepl30, %loopStart
  %lt.cast41 = bitcast i32* %.loc31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast41)
  %lt.cast42 = bitcast i32* %.loc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast42)
  %lt.cast43 = bitcast i32* %.loc33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast43)
  %lt.cast44 = bitcast i1* %.loc34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast44)
  %lt.cast45 = bitcast i1* %.loc35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast45)
  store i64 5221456193252566387, i64* %183, align 8
  %1888 = call i8** @lk13323888900026137679(i64* %183)
  %1889 = load i8*, i8** %1888, align 8
  %1890 = bitcast i8* %1889 to void (i32, i32, i1, i32*, i32*, i32*, i1*, i1*)*
  %.reload.reload33 = load i32, i32* %.reload.reg2mem, align 4
  %.reload56 = load i1, i1* %.reg2mem55, align 1
  %.reload63 = load i32, i32* %.reg2mem61, align 4
  call void %1890(i32 %.reload63, i32 %.reload.reload33, i1 %.reload56, i32* %.loc31, i32* %.loc32, i32* %.loc33, i1* %.loc34, i1* %.loc35)
  %.reload36 = load i32, i32* %.loc31, align 4
  %.reload37 = load i32, i32* %.loc32, align 4
  %.reload38 = load i32, i32* %.loc33, align 4
  %.reload39 = load i1, i1* %.loc34, align 1
  %.reload40 = load i1, i1* %.loc35, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast41)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast42)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast43)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast44)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast45)
  %1891 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %1892 = load i32, i32* %1891, align 4
  %1893 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %1894 = load i32, i32* %1893, align 4
  %1895 = srem i32 %1892, %1894
  store i32 %1895, i32* %dispatcher, align 4
  store i32 %.reload36, i32* %.reg2mem150, align 4
  store i1 %.reload40, i1* %.reg2mem152, align 1
  %1896 = load i8*, i8** %46, align 8
  %1897 = load i8, i8* %1896, align 1
  %1898 = and i8 %1897, 1
  %1899 = or i64 %184, 4755677975128228475
  %1900 = and i64 4755677975128228475, %184
  %1901 = xor i64 4755677975128228475, %184
  %1902 = or i64 %1900, %1901
  %1903 = add i64 %33, -8620536898612975955
  %1904 = sub i64 0, %33
  %1905 = add i64 8620536898612975955, %1904
  %1906 = sub i64 0, %1905
  %1907 = xor i64 %1899, -8512953728046971487
  %1908 = xor i64 %1907, %1903
  %1909 = xor i64 %1908, %1902
  %1910 = xor i64 %1909, %1906
  %1911 = and i64 %49, 3630363344588524155
  %1912 = or i64 -3630363344588524156, %49
  %1913 = sub i64 %1912, -3630363344588524156
  %1914 = or i64 %15, 1539684021706820467
  %1915 = xor i64 %15, -1
  %1916 = and i64 1539684021706820467, %1915
  %1917 = add i64 %1916, %15
  %1918 = xor i64 0, %1914
  %1919 = xor i64 %1918, %1917
  %1920 = xor i64 %1919, %1913
  %1921 = xor i64 %1920, %1911
  %1922 = mul i64 %1910, %1921
  %1923 = trunc i64 %1922 to i8
  %1924 = icmp eq i8 %1898, %1923
  %1925 = mul i8 %1897, %1897
  %1926 = add i8 %1925, %1897
  %1927 = and i64 %85, -2007383361300880653
  %1928 = or i64 2007383361300880652, %85
  %1929 = sub i64 %1928, 2007383361300880652
  %1930 = or i64 %57, 9067147591197816273
  %1931 = xor i64 %57, -1
  %1932 = and i64 %1931, 2454643851862825407
  %1933 = and i64 %57, -2454643851862825408
  %1934 = or i64 %1932, %1933
  %1935 = xor i64 6900745129662033006, %1934
  %1936 = xor i64 %57, -1
  %1937 = or i64 -9067147591197816274, %1936
  %1938 = xor i64 %1937, -1
  %1939 = and i64 %1938, -1
  %1940 = or i64 %1935, %1939
  %1941 = or i64 %17, 9063151000275799791
  %1942 = xor i64 %17, -1
  %1943 = and i64 %1942, 5559344112847050847
  %1944 = and i64 %17, -5559344112847050848
  %1945 = or i64 %1943, %1944
  %1946 = xor i64 3521821320910345904, %1945
  %1947 = xor i64 %17, -1
  %1948 = or i64 -9063151000275799792, %1947
  %1949 = xor i64 %1948, -1
  %1950 = and i64 %1949, -1
  %1951 = or i64 %1946, %1950
  %1952 = xor i64 %1941, %1929
  %1953 = xor i64 %1952, 5171851265217741559
  %1954 = xor i64 %1953, %1951
  %1955 = xor i64 %1954, %1927
  %1956 = xor i64 %1955, %1930
  %1957 = xor i64 %1956, %1940
  %1958 = or i64 %23, -4254655444196864236
  %1959 = xor i64 %23, -1
  %1960 = and i64 -4254655444196864236, %1959
  %1961 = add i64 %1960, %23
  %1962 = add i64 %194, -4482924008579725563
  %1963 = add i64 5409502045791585357, %194
  %1964 = sub i64 %1963, -8554318019338240696
  %1965 = or i64 %89, 7244518462067904712
  %1966 = xor i64 %89, -1
  %1967 = and i64 %1966, 8154852027127140500
  %1968 = and i64 %89, -8154852027127140501
  %1969 = or i64 %1967, %1968
  %1970 = xor i64 1558924548829118556, %1969
  %1971 = xor i64 %89, -1
  %1972 = or i64 -7244518462067904713, %1971
  %1973 = xor i64 %1972, -1
  %1974 = and i64 %1973, -1
  %1975 = or i64 %1970, %1974
  %1976 = xor i64 %1958, %1964
  %1977 = xor i64 %1976, %1962
  %1978 = xor i64 %1977, %1965
  %1979 = xor i64 %1978, -4474624723828843435
  %1980 = xor i64 %1979, %1961
  %1981 = xor i64 %1980, %1975
  %1982 = mul i64 %1957, %1981
  %1983 = trunc i64 %1982 to i8
  %1984 = mul i8 %1926, %1983
  %1985 = or i64 %188, 152425441949409325
  %1986 = xor i64 %188, -1
  %1987 = and i64 %1986, -5818484648355625666
  %1988 = and i64 %188, 5818484648355625665
  %1989 = or i64 %1987, %1988
  %1990 = xor i64 -5954584251745475309, %1989
  %1991 = xor i64 %188, -1
  %1992 = or i64 -152425441949409326, %1991
  %1993 = xor i64 %1992, -1
  %1994 = and i64 %1993, -1
  %1995 = or i64 %1990, %1994
  %1996 = and i64 %69, -5706108109710592135
  %1997 = or i64 5706108109710592134, %69
  %1998 = sub i64 %1997, 5706108109710592134
  %1999 = xor i64 %1985, %1998
  %2000 = xor i64 %1999, %1995
  %2001 = xor i64 %2000, 5607076018435673327
  %2002 = xor i64 %2001, %1996
  %2003 = add i64 %41, -1035650699600602466
  %2004 = xor i64 -1035650699600602466, %41
  %2005 = and i64 -1035650699600602466, %41
  %2006 = mul i64 2, %2005
  %2007 = add i64 %2004, %2006
  %2008 = and i64 %75, 4701716273151833487
  %2009 = xor i64 %75, -1
  %2010 = or i64 -4701716273151833488, %2009
  %2011 = xor i64 %2010, -1
  %2012 = and i64 %2011, -1
  %2013 = xor i64 %2012, %2003
  %2014 = xor i64 %2013, %2008
  %2015 = xor i64 %2014, %2007
  %2016 = xor i64 %2015, 6447355820593169438
  %2017 = mul i64 %2002, %2016
  %2018 = trunc i64 %2017 to i8
  %2019 = srem i8 %1984, %2018
  %2020 = icmp eq i8 %2019, 0
  %2021 = or i1 %1924, %2020
  %2022 = select i1 %2021, i32 388314383, i32 388314410
  %2023 = xor i32 %2022, 37
  store i32 %2023, i32* %4, align 4
  %2024 = call i8** @bf10863455059032886292(i32* %4)
  %2025 = load i8*, i8** %2024, align 8
  indirectbr i8* %2025, [label %loopEnd, label %codeRepl30]

2026:                                             ; preds = %2026, %loopStart
  %.reload153 = load i1, i1* %.reg2mem152, align 1
  %.reload151 = load i32, i32* %.reg2mem150, align 4
  store i1 %.reload153, i1* %.reg2mem100, align 1
  store i32 %.reload151, i32* %.reg2mem95, align 4
  %2027 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 15
  %2028 = load i32, i32* %2027, align 4
  %2029 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %2030 = load i32, i32* %2029, align 4
  %2031 = sub i32 %2028, %2030
  store i32 %2031, i32* %dispatcher, align 4
  %2032 = load i8*, i8** %104, align 8
  %2033 = load i8, i8* %2032, align 1
  %2034 = and i8 %2033, 1
  %2035 = icmp eq i8 %2034, 1
  %2036 = mul i8 %2033, %2033
  %2037 = add i8 %2036, -70
  %2038 = add i8 %2037, %2033
  %2039 = sub i8 %2038, -70
  %2040 = srem i8 %2039, 2
  %2041 = icmp eq i8 %2040, 0
  %2042 = or i1 %2035, %2041
  %2043 = select i1 %2042, i32 388314389, i32 388314410
  %2044 = add i64 %81, 4135744000112637265
  %2045 = sub i64 0, %81
  %2046 = add i64 -4135744000112637265, %2045
  %2047 = sub i64 0, %2046
  %2048 = add i64 %91, -5161545924453513576
  %2049 = xor i64 -5161545924453513576, %91
  %2050 = and i64 -5161545924453513576, %91
  %2051 = mul i64 2, %2050
  %2052 = add i64 %2049, %2051
  %2053 = xor i64 %2048, %2047
  %2054 = xor i64 %2053, -878708513857770975
  %2055 = xor i64 %2054, %2044
  %2056 = xor i64 %2055, %2052
  %2057 = or i64 %79, -4200291150630934193
  %2058 = and i64 -4200291150630934193, %79
  %2059 = xor i64 -4200291150630934193, %79
  %2060 = or i64 %2058, %2059
  %2061 = and i64 %69, -1277903233221180676
  %2062 = xor i64 %69, -1
  %2063 = xor i64 -1277903233221180676, %2062
  %2064 = and i64 %2063, -1277903233221180676
  %2065 = or i64 %13, -6145991937666243559
  %2066 = xor i64 %13, -1
  %2067 = and i64 -6145991937666243559, %2066
  %2068 = add i64 %2067, %13
  %2069 = xor i64 %2065, %2068
  %2070 = xor i64 %2069, %2061
  %2071 = xor i64 %2070, %2060
  %2072 = xor i64 %2071, %2057
  %2073 = xor i64 %2072, %2064
  %2074 = xor i64 %2073, 1625062655816752735
  %2075 = mul i64 %2056, %2074
  %2076 = trunc i64 %2075 to i32
  %2077 = or i32 %2043, %2076
  %2078 = and i32 %2043, 63
  %2079 = sub i32 %2077, %2078
  store i32 %2079, i32* %4, align 4
  %2080 = call i8** @bf10863455059032886292(i32* %4)
  %2081 = load i8*, i8** %2080, align 8
  indirectbr i8* %2081, [label %loopEnd, label %2026]

codeRepl46:                                       ; preds = %codeRepl46, %loopStart
  store i64 5221456193252566398, i64* %183, align 8
  %2082 = call i8** @lk13323888900026137679(i64* %183)
  %2083 = load i8*, i8** %2082, align 8
  %2084 = bitcast i8* %2083 to i1 (i1)*
  %.reload101 = load i1, i1* %.reg2mem100, align 1
  %targetBlock47 = call i1 %2084(i1 %.reload101)
  %2085 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 20
  %2086 = load i32, i32* %2085, align 4
  %2087 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %2088 = load i32, i32* %2087, align 4
  %2089 = srem i32 %2086, %2088
  %2090 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 19
  %2091 = load i32, i32* %2090, align 4
  %2092 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %2093 = load i32, i32* %2092, align 4
  %2094 = srem i32 %2091, %2093
  %2095 = select i1 %targetBlock47, i32 %2089, i32 %2094
  store i32 %2095, i32* %dispatcher, align 4
  %2096 = load i8*, i8** %120, align 8
  %2097 = load i8, i8* %2096, align 1
  %2098 = mul i8 %2097, %2097
  %2099 = add i8 %2098, %2097
  %2100 = mul i8 %2099, 3
  %2101 = srem i8 %2100, 2
  %2102 = and i64 %77, -1376923599768643976
  %2103 = xor i64 %77, -1
  %2104 = or i64 1376923599768643975, %2103
  %2105 = xor i64 %2104, -1
  %2106 = and i64 %2105, -1
  %2107 = or i64 %33, 3011741473142293117
  %2108 = xor i64 %33, -1
  %2109 = and i64 3011741473142293117, %2108
  %2110 = add i64 %2109, %33
  %2111 = or i64 %39, -8623435869383315399
  %2112 = xor i64 %39, -1
  %2113 = and i64 -8623435869383315399, %2112
  %2114 = add i64 %2113, %39
  %2115 = xor i64 %2110, %2111
  %2116 = xor i64 %2115, 3344727165171883975
  %2117 = xor i64 %2116, %2106
  %2118 = xor i64 %2117, %2114
  %2119 = xor i64 %2118, %2102
  %2120 = xor i64 %2119, %2107
  %2121 = add i64 %59, 2108824485126831137
  %2122 = sub i64 0, %59
  %2123 = sub i64 2108824485126831137, %2122
  %2124 = add i64 %15, 744830207387901940
  %2125 = xor i64 744830207387901940, %15
  %2126 = and i64 744830207387901940, %15
  %2127 = mul i64 2, %2126
  %2128 = add i64 %2125, %2127
  %2129 = add i64 %95, 4656235802704668191
  %2130 = xor i64 4656235802704668191, %95
  %2131 = and i64 4656235802704668191, %95
  %2132 = mul i64 2, %2131
  %2133 = add i64 %2130, %2132
  %2134 = xor i64 %2121, %2129
  %2135 = xor i64 %2134, 0
  %2136 = xor i64 %2135, %2123
  %2137 = xor i64 %2136, %2128
  %2138 = xor i64 %2137, %2133
  %2139 = xor i64 %2138, %2124
  %2140 = mul i64 %2120, %2139
  %2141 = trunc i64 %2140 to i8
  %2142 = icmp eq i8 %2101, %2141
  %2143 = mul i8 %2097, %2097
  %2144 = add i8 %2143, %2097
  %2145 = srem i8 %2144, 2
  %2146 = icmp eq i8 %2145, 0
  %2147 = xor i1 %2142, true
  %2148 = xor i1 %2146, true
  %2149 = or i1 %2147, %2148
  %2150 = xor i1 %2149, true
  %2151 = and i1 %2150, true
  %2152 = select i1 %2151, i32 388314405, i32 388314410
  %2153 = add i64 %41, -406402370152720393
  %2154 = and i64 -406402370152720393, %41
  %2155 = or i64 -406402370152720393, %41
  %2156 = add i64 %2154, %2155
  %2157 = add i64 %75, 2878200694304526373
  %2158 = add i64 4307082608457570859, %75
  %2159 = add i64 %2158, -1428881914153044486
  %2160 = xor i64 %2156, %2153
  %2161 = xor i64 %2160, 7608444285224129585
  %2162 = xor i64 %2161, %2159
  %2163 = xor i64 %2162, %2157
  %2164 = add i64 %117, -5360792488438819613
  %2165 = add i64 3311214298149605551, %117
  %2166 = sub i64 %2165, 8672006786588425164
  %2167 = or i64 %75, 7724811176412216686
  %2168 = xor i64 %75, -1
  %2169 = and i64 %2168, 1236964938721069233
  %2170 = and i64 %75, -1236964938721069234
  %2171 = or i64 %2169, %2170
  %2172 = xor i64 8799646474457675231, %2171
  %2173 = xor i64 %75, -1
  %2174 = or i64 -7724811176412216687, %2173
  %2175 = xor i64 %2174, -1
  %2176 = and i64 %2175, -1
  %2177 = or i64 %2172, %2176
  %2178 = xor i64 %2164, %2167
  %2179 = xor i64 %2178, %2177
  %2180 = xor i64 %2179, 134125991384320063
  %2181 = xor i64 %2180, %2166
  %2182 = mul i64 %2163, %2181
  %2183 = trunc i64 %2182 to i32
  %2184 = xor i32 %2152, %2183
  store i32 %2184, i32* %4, align 4
  %2185 = call i8** @bf10863455059032886292(i32* %4)
  %2186 = load i8*, i8** %2185, align 8
  indirectbr i8* %2186, [label %loopEnd, label %codeRepl46]

2187:                                             ; preds = %2187, %loopStart
  %2188 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 38
  %2189 = load i32, i32* %2188, align 4
  %2190 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %2191 = load i32, i32* %2190, align 4
  %2192 = srem i32 %2189, %2191
  store i32 %2192, i32* %dispatcher, align 4
  %2193 = load i8*, i8** %44, align 8
  %2194 = load i8, i8* %2193, align 1
  %2195 = mul i8 %2194, %2194
  %2196 = add i8 %2195, %2194
  %2197 = add i64 %19, -2883521252298892736
  %2198 = add i64 -3711851650795079933, %19
  %2199 = add i64 %2198, 828330398496187197
  %2200 = add i64 %5, -679643967936201286
  %2201 = add i64 -8757426967902537070, %5
  %2202 = sub i64 %2201, -8077782999966335784
  %2203 = xor i64 %2199, %2197
  %2204 = xor i64 %2203, 6700530114534237327
  %2205 = xor i64 %2204, %2202
  %2206 = xor i64 %2205, %2200
  %2207 = and i64 %115, -5757518367356664136
  %2208 = or i64 5757518367356664135, %115
  %2209 = sub i64 %2208, 5757518367356664135
  %2210 = or i64 %17, 8029035907196258143
  %2211 = xor i64 %17, -1
  %2212 = and i64 8029035907196258143, %2211
  %2213 = add i64 %2212, %17
  %2214 = add i64 %188, 1244907133366203621
  %2215 = sub i64 0, %188
  %2216 = add i64 -1244907133366203621, %2215
  %2217 = sub i64 0, %2216
  %2218 = xor i64 %2209, %2217
  %2219 = xor i64 %2218, %2207
  %2220 = xor i64 %2219, %2213
  %2221 = xor i64 %2220, %2210
  %2222 = xor i64 %2221, %2214
  %2223 = xor i64 %2222, 7531122532612648781
  %2224 = mul i64 %2206, %2223
  %2225 = trunc i64 %2224 to i8
  %2226 = mul i8 %2196, %2225
  %2227 = srem i8 %2226, 2
  %2228 = icmp eq i8 %2227, 0
  %2229 = mul i8 %2194, %2194
  %2230 = add i8 %2229, %2194
  %2231 = and i64 %87, 4061439709233915949
  %2232 = xor i64 %87, -1
  %2233 = xor i64 4061439709233915949, %2232
  %2234 = and i64 %2233, 4061439709233915949
  %2235 = add i64 %43, 1641540978706269894
  %2236 = add i64 -3726710823971998755, %43
  %2237 = sub i64 %2236, -5368251802678268649
  %2238 = xor i64 -3717586518031692039, %2234
  %2239 = xor i64 %2238, %2235
  %2240 = xor i64 %2239, %2231
  %2241 = xor i64 %2240, %2237
  %2242 = add i64 %5, 2181515971356006849
  %2243 = and i64 2181515971356006849, %5
  %2244 = or i64 2181515971356006849, %5
  %2245 = add i64 %2243, %2244
  %2246 = or i64 %200, -6281607073720237003
  %2247 = and i64 -6281607073720237003, %200
  %2248 = xor i64 -6281607073720237003, %200
  %2249 = or i64 %2247, %2248
  %2250 = xor i64 -676621039582468462, %2246
  %2251 = xor i64 %2250, %2242
  %2252 = xor i64 %2251, %2249
  %2253 = xor i64 %2252, %2245
  %2254 = mul i64 %2241, %2253
  %2255 = trunc i64 %2254 to i8
  %2256 = srem i8 %2230, %2255
  %2257 = icmp eq i8 %2256, 0
  %2258 = and i1 %2228, %2257
  %2259 = add i64 %184, -3059377527536940309
  %2260 = sub i64 0, %184
  %2261 = sub i64 -3059377527536940309, %2260
  %2262 = sext i32 %207 to i64
  %2263 = or i64 %2262, -2874832269697103502
  %2264 = xor i64 %2262, -1
  %2265 = and i64 -2874832269697103502, %2264
  %2266 = add i64 %2265, %2262
  %2267 = add i64 %75, 3504206266528800891
  %2268 = xor i64 3504206266528800891, %75
  %2269 = and i64 3504206266528800891, %75
  %2270 = mul i64 2, %2269
  %2271 = add i64 %2268, %2270
  %2272 = xor i64 %2259, %2266
  %2273 = xor i64 %2272, 806860617172566783
  %2274 = xor i64 %2273, %2261
  %2275 = xor i64 %2274, %2271
  %2276 = xor i64 %2275, %2263
  %2277 = xor i64 %2276, %2267
  %2278 = and i64 %186, -652201169019884905
  %2279 = xor i64 %186, -1
  %2280 = xor i64 -652201169019884905, %2279
  %2281 = and i64 %2280, -652201169019884905
  %2282 = add i64 %19, 1529960010861143861
  %2283 = add i64 1152675389179115280, %19
  %2284 = add i64 %2283, 377284621682028581
  %2285 = add i64 %89, 8963194840631159415
  %2286 = add i64 -4225364997440336775, %89
  %2287 = sub i64 %2286, 5258184235638055426
  %2288 = xor i64 %2285, %2284
  %2289 = xor i64 %2288, %2281
  %2290 = xor i64 %2289, %2287
  %2291 = xor i64 %2290, %2282
  %2292 = xor i64 %2291, %2278
  %2293 = xor i64 %2292, -4785339111228715818
  %2294 = mul i64 %2277, %2293
  %2295 = trunc i64 %2294 to i32
  %2296 = select i1 %2258, i32 388314421, i32 %2295
  %2297 = xor i32 %2296, -1
  %2298 = and i64 %67, 6396928634657294583
  %2299 = or i64 -6396928634657294584, %67
  %2300 = sub i64 %2299, -6396928634657294584
  %2301 = add i64 %67, 2165175449353352462
  %2302 = add i64 -764153163338169308, %67
  %2303 = sub i64 %2302, -2929328612691521770
  %2304 = add i64 %29, -296388583910985017
  %2305 = sub i64 0, %29
  %2306 = add i64 296388583910985017, %2305
  %2307 = sub i64 0, %2306
  %2308 = xor i64 %2300, %2303
  %2309 = xor i64 %2308, 613738268666833775
  %2310 = xor i64 %2309, %2304
  %2311 = xor i64 %2310, %2301
  %2312 = xor i64 %2311, %2307
  %2313 = xor i64 %2312, %2298
  %2314 = add i64 %81, -6585065188932753080
  %2315 = add i64 4075596319938381407, %81
  %2316 = add i64 %2315, 7786082564838417129
  %2317 = add i64 %89, 6639934950262772261
  %2318 = add i64 5474596595056735131, %89
  %2319 = add i64 %2318, 1165338355206037130
  %2320 = add i64 %63, -234125648481502918
  %2321 = add i64 4480194585418709257, %63
  %2322 = sub i64 %2321, 4714320233900212175
  %2323 = xor i64 %2319, %2316
  %2324 = xor i64 %2323, %2320
  %2325 = xor i64 %2324, %2314
  %2326 = xor i64 %2325, 6302433735424597585
  %2327 = xor i64 %2326, %2322
  %2328 = xor i64 %2327, %2317
  %2329 = mul i64 %2313, %2328
  %2330 = trunc i64 %2329 to i32
  %2331 = and i32 %2297, %2330
  %2332 = and i32 %2296, -32
  %2333 = or i32 %2331, %2332
  store i32 %2333, i32* %4, align 4
  %2334 = call i8** @bf10863455059032886292(i32* %4)
  %2335 = load i8*, i8** %2334, align 8
  indirectbr i8* %2335, [label %loopEnd, label %2187]

codeRepl48:                                       ; preds = %codeRepl48, %loopStart
  %lt.cast52 = bitcast i32* %.loc49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast52)
  store i64 5221456193252566399, i64* %183, align 8
  %2336 = call i8** @lk13323888900026137679(i64* %183)
  %2337 = load i8*, i8** %2336, align 8
  %2338 = bitcast i8* %2337 to i1 (i32, i32, i32*)*
  %.reload53 = load i32, i32* %.reg2mem50, align 4
  %.reload62 = load i32, i32* %.reg2mem61, align 4
  %targetBlock50 = call i1 %2338(i32 %.reload53, i32 %.reload62, i32* %.loc49)
  %.reload51 = load i32, i32* %.loc49, align 4
  store i32 %.reload51, i32* %.reload51.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast52)
  %2339 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 53
  %2340 = load i32, i32* %2339, align 4
  %2341 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 35
  %2342 = load i32, i32* %2341, align 4
  %2343 = sub i32 %2340, %2342
  %2344 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 19
  %2345 = load i32, i32* %2344, align 4
  %2346 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %2347 = load i32, i32* %2346, align 4
  %2348 = sub i32 %2345, %2347
  %2349 = select i1 %targetBlock50, i32 %2343, i32 %2348
  store i32 %2349, i32* %dispatcher, align 4
  %2350 = load i8*, i8** %74, align 8
  %2351 = load i8, i8* %2350, align 1
  %2352 = xor i8 %2351, -1
  %2353 = or i8 %2352, 1
  %2354 = or i64 %119, 1971853175806821244
  %2355 = xor i64 %119, -1
  %2356 = and i64 %2355, 6530877763374711511
  %2357 = and i64 %119, -6530877763374711512
  %2358 = or i64 %2356, %2357
  %2359 = xor i64 4755582117407326635, %2358
  %2360 = xor i64 %119, -1
  %2361 = or i64 -1971853175806821245, %2360
  %2362 = xor i64 %2361, -1
  %2363 = and i64 %2362, -1
  %2364 = or i64 %2359, %2363
  %2365 = or i64 %71, 7241826485014033964
  %2366 = xor i64 %71, -1
  %2367 = and i64 7241826485014033964, %2366
  %2368 = add i64 %2367, %71
  %2369 = or i64 %27, -9136737128770631308
  %2370 = xor i64 %27, -1
  %2371 = and i64 -9136737128770631308, %2370
  %2372 = add i64 %2371, %27
  %2373 = xor i64 8617213346425433755, %2354
  %2374 = xor i64 %2373, %2364
  %2375 = xor i64 %2374, %2368
  %2376 = xor i64 %2375, %2369
  %2377 = xor i64 %2376, %2372
  %2378 = xor i64 %2377, %2365
  %2379 = and i64 %53, -377390101783219343
  %2380 = or i64 377390101783219342, %53
  %2381 = sub i64 %2380, 377390101783219342
  %2382 = add i64 %61, -8506904678069640975
  %2383 = sub i64 0, %61
  %2384 = sub i64 -8506904678069640975, %2383
  %2385 = xor i64 %2379, %2382
  %2386 = xor i64 %2385, %2384
  %2387 = xor i64 %2386, %2381
  %2388 = xor i64 %2387, 7742869093600840557
  %2389 = mul i64 %2378, %2388
  %2390 = trunc i64 %2389 to i8
  %2391 = xor i8 %2351, %2390
  %2392 = sub i8 %2353, %2391
  %2393 = icmp eq i8 %2392, 1
  %2394 = mul i8 %2351, %2351
  %2395 = add i8 %2394, %2351
  %2396 = srem i8 %2395, 2
  %2397 = icmp eq i8 %2396, 0
  %2398 = or i1 %2393, %2397
  %2399 = select i1 %2398, i32 388314425, i32 388314410
  %2400 = xor i32 %2399, 19
  store i32 %2400, i32* %4, align 4
  %2401 = call i8** @bf10863455059032886292(i32* %4)
  %2402 = load i8*, i8** %2401, align 8
  indirectbr i8* %2402, [label %loopEnd, label %codeRepl48]

2403:                                             ; preds = %2403, %loopStart
  %.reload51.reload102 = load i32, i32* %.reload51.reg2mem, align 4
  %2404 = icmp eq i32 %.reload51.reload102, 0
  %2405 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 15
  %2406 = load i32, i32* %2405, align 4
  %2407 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 14
  %2408 = load i32, i32* %2407, align 4
  %2409 = sub i32 0, %2406
  %2410 = sub i32 0, %2408
  %2411 = add i32 %2409, %2410
  %2412 = or i64 %63, -2469719988204473463
  %2413 = and i64 -2469719988204473463, %63
  %2414 = xor i64 -2469719988204473463, %63
  %2415 = or i64 %2413, %2414
  %2416 = and i64 %77, 3323863700411647310
  %2417 = xor i64 %77, -1
  %2418 = or i64 -3323863700411647311, %2417
  %2419 = xor i64 %2418, -1
  %2420 = and i64 %2419, -1
  %2421 = and i64 %73, 5055565263476562816
  %2422 = xor i64 %73, -1
  %2423 = xor i64 5055565263476562816, %2422
  %2424 = and i64 %2423, 5055565263476562816
  %2425 = xor i64 %2412, %2424
  %2426 = xor i64 %2425, %2416
  %2427 = xor i64 %2426, %2420
  %2428 = xor i64 %2427, %2421
  %2429 = xor i64 %2428, %2415
  %2430 = xor i64 %2429, 4402698878588098591
  %2431 = add i64 %45, -3946155963875712264
  %2432 = xor i64 -3946155963875712264, %45
  %2433 = and i64 -3946155963875712264, %45
  %2434 = mul i64 2, %2433
  %2435 = add i64 %2432, %2434
  %2436 = and i64 %19, 4681526708870964739
  %2437 = or i64 -4681526708870964740, %19
  %2438 = sub i64 %2437, -4681526708870964740
  %2439 = xor i64 %2435, %2431
  %2440 = xor i64 %2439, %2436
  %2441 = xor i64 %2440, %2438
  %2442 = xor i64 %2441, 0
  %2443 = mul i64 %2430, %2442
  %2444 = trunc i64 %2443 to i32
  %2445 = sub i32 %2444, %2411
  store i32 %2445, i32* %dispatcher, align 4
  store i1 %2404, i1* %.reg2mem154, align 1
  %2446 = load i8*, i8** %48, align 8
  %2447 = load i8, i8* %2446, align 1
  %2448 = mul i8 %2447, 2
  %2449 = mul i8 %2447, 2
  %2450 = sub i8 0, %2449
  %2451 = sub i8 2, %2450
  %2452 = mul i8 %2448, %2451
  %2453 = srem i8 %2452, 4
  %2454 = icmp eq i8 %2453, 0
  %2455 = mul i8 %2447, %2447
  %2456 = sub i8 0, %2455
  %2457 = sub i8 0, %2447
  %2458 = add i8 %2456, %2457
  %2459 = sub i8 0, %2458
  %2460 = srem i8 %2459, 2
  %2461 = icmp eq i8 %2460, 0
  %2462 = or i1 %2454, %2461
  %2463 = or i64 %67, -4278645641499572601
  %2464 = xor i64 %67, -1
  %2465 = and i64 -4278645641499572601, %2464
  %2466 = add i64 %2465, %67
  %2467 = or i64 %77, -4583836280680760482
  %2468 = and i64 -4583836280680760482, %77
  %2469 = xor i64 -4583836280680760482, %77
  %2470 = or i64 %2468, %2469
  %2471 = add i64 %45, -1900308809870815633
  %2472 = sub i64 0, %45
  %2473 = add i64 1900308809870815633, %2472
  %2474 = sub i64 0, %2473
  %2475 = xor i64 %2467, %2463
  %2476 = xor i64 %2475, %2471
  %2477 = xor i64 %2476, %2474
  %2478 = xor i64 %2477, %2466
  %2479 = xor i64 %2478, %2470
  %2480 = xor i64 %2479, 523007868391387291
  %2481 = or i64 %7, -4105650582301629301
  %2482 = xor i64 %7, -1
  %2483 = and i64 -4105650582301629301, %2482
  %2484 = add i64 %2483, %7
  %2485 = add i64 %65, -342261476969369966
  %2486 = xor i64 -342261476969369966, %65
  %2487 = and i64 -342261476969369966, %65
  %2488 = mul i64 2, %2487
  %2489 = add i64 %2486, %2488
  %2490 = xor i64 %2489, %2484
  %2491 = xor i64 %2490, %2481
  %2492 = xor i64 %2491, %2485
  %2493 = xor i64 %2492, -8341858565210353444
  %2494 = mul i64 %2480, %2493
  %2495 = trunc i64 %2494 to i32
  %2496 = select i1 %2462, i32 %2495, i32 388314410
  %2497 = xor i32 %2496, 30
  store i32 %2497, i32* %4, align 4
  %2498 = call i8** @bf10863455059032886292(i32* %4)
  %2499 = load i8*, i8** %2498, align 8
  indirectbr i8* %2499, [label %loopEnd, label %2403]

2500:                                             ; preds = %2500, %loopStart
  %2501 = mul i64 118, 69
  %.reload51.reload = load i32, i32* %.reload51.reg2mem, align 4
  %2502 = icmp eq i32 %.reload51.reload, 0
  store i1 %2502, i1* %.reg2mem103, align 1
  %2503 = sdiv i64 61, 39
  %2504 = add i64 80, 82
  %2505 = sub i64 4, 79
  %2506 = add i64 65, 48
  %.reload52 = load i32, i32* %.reg2mem50, align 4
  %2507 = srem i32 %.reload52, 2
  %2508 = add i64 %184, 4115066045502846453
  %2509 = add i64 6658559700096361551, %184
  %2510 = add i64 %2509, -2543493654593515098
  %2511 = or i64 %69, 7129969155717548771
  %2512 = xor i64 %69, -1
  %2513 = and i64 7129969155717548771, %2512
  %2514 = add i64 %2513, %69
  %2515 = and i64 %89, 4094641280779806766
  %2516 = or i64 -4094641280779806767, %89
  %2517 = sub i64 %2516, -4094641280779806767
  %2518 = xor i64 %2517, 5932638415552344391
  %2519 = xor i64 %2518, %2514
  %2520 = xor i64 %2519, %2508
  %2521 = xor i64 %2520, %2515
  %2522 = xor i64 %2521, %2510
  %2523 = xor i64 %2522, %2511
  %2524 = and i64 %105, -6168259335875690645
  %2525 = xor i64 %105, -1
  %2526 = xor i64 -6168259335875690645, %2525
  %2527 = and i64 %2526, -6168259335875690645
  %2528 = add i64 %194, -5422526761448680190
  %2529 = and i64 -5422526761448680190, %194
  %2530 = or i64 -5422526761448680190, %194
  %2531 = add i64 %2529, %2530
  %2532 = xor i64 0, %2531
  %2533 = xor i64 %2532, %2528
  %2534 = xor i64 %2533, %2524
  %2535 = xor i64 %2534, %2527
  %2536 = mul i64 %2523, %2535
  %2537 = trunc i64 %2536 to i32
  %2538 = icmp eq i32 %2507, %2537
  %.reload.reload32 = load i32, i32* %.reload.reg2mem, align 4
  %2539 = xor i32 %.reload.reload32, -2
  %2540 = and i32 %2539, %.reload.reload32
  %2541 = icmp eq i32 %2540, 1
  %.reload.reload31 = load i32, i32* %.reload.reg2mem, align 4
  %2542 = mul i32 %.reload.reload31, %.reload.reload31
  %.reload.reload30 = load i32, i32* %.reload.reg2mem, align 4
  %2543 = add i32 %2542, %.reload.reload30
  %2544 = srem i32 %2543, 2
  %2545 = icmp eq i32 %2544, 0
  %2546 = or i1 %2541, %2545
  store i1 %2546, i1* %.reg2mem105, align 1
  %2547 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 14
  %2548 = load i32, i32* %2547, align 4
  %2549 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 13
  %2550 = load i32, i32* %2549, align 4
  %2551 = and i32 %2548, %2550
  %2552 = or i32 %2548, %2550
  %2553 = add i32 %2551, %2552
  %2554 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  %2555 = load i32, i32* %2554, align 4
  %2556 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %2557 = load i32, i32* %2556, align 4
  %2558 = srem i32 %2555, %2557
  %.reload107 = load i1, i1* %.reg2mem105, align 1
  %2559 = select i1 %.reload107, i32 %2553, i32 %2558
  store i32 %2559, i32* %dispatcher, align 4
  %2560 = load i8*, i8** %100, align 8
  %2561 = load i8, i8* %2560, align 1
  %2562 = and i8 %2561, 1
  %2563 = or i64 %23, -2538194286317836375
  %2564 = xor i64 %23, -1
  %2565 = and i64 -2538194286317836375, %2564
  %2566 = add i64 %2565, %23
  %2567 = add i64 %65, 1949243292055183080
  %2568 = sub i64 0, %65
  %2569 = sub i64 1949243292055183080, %2568
  %2570 = xor i64 %2569, %2563
  %2571 = xor i64 %2570, -3725449824761650471
  %2572 = xor i64 %2571, %2566
  %2573 = xor i64 %2572, %2567
  %2574 = add i64 %200, 5061868167112558087
  %2575 = sub i64 0, %200
  %2576 = sub i64 5061868167112558087, %2575
  %2577 = or i64 %71, 4488922140303935966
  %2578 = xor i64 %71, -1
  %2579 = and i64 4488922140303935966, %2578
  %2580 = add i64 %2579, %71
  %2581 = xor i64 0, %2580
  %2582 = xor i64 %2581, %2576
  %2583 = xor i64 %2582, %2577
  %2584 = xor i64 %2583, %2574
  %2585 = mul i64 %2573, %2584
  %2586 = trunc i64 %2585 to i8
  %2587 = icmp eq i8 %2562, %2586
  %2588 = mul i8 %2561, %2561
  %2589 = xor i8 %2588, %2561
  %2590 = and i8 %2588, %2561
  %2591 = mul i8 2, %2590
  %2592 = add i8 %2589, %2591
  %2593 = mul i8 39, %2592
  %2594 = add i8 23, %2593
  %2595 = or i64 %57, 1703294656691978636
  %2596 = and i64 1703294656691978636, %57
  %2597 = xor i64 1703294656691978636, %57
  %2598 = or i64 %2596, %2597
  %2599 = and i64 %95, -6740729016600348763
  %2600 = xor i64 %95, -1
  %2601 = xor i64 -6740729016600348763, %2600
  %2602 = and i64 %2601, -6740729016600348763
  %2603 = add i64 %23, -7091036564702346485
  %2604 = xor i64 -7091036564702346485, %23
  %2605 = and i64 -7091036564702346485, %23
  %2606 = mul i64 2, %2605
  %2607 = add i64 %2604, %2606
  %2608 = xor i64 %2595, %2603
  %2609 = xor i64 %2608, %2598
  %2610 = xor i64 %2609, -8180780635490685891
  %2611 = xor i64 %2610, %2599
  %2612 = xor i64 %2611, %2607
  %2613 = xor i64 %2612, %2602
  %2614 = and i64 %25, -1144799295607671043
  %2615 = xor i64 %25, -1
  %2616 = or i64 1144799295607671042, %2615
  %2617 = xor i64 %2616, -1
  %2618 = and i64 %2617, -1
  %2619 = or i64 %31, -8795580962757596867
  %2620 = xor i64 %31, -1
  %2621 = and i64 %2620, -3833365510140024695
  %2622 = and i64 %31, 3833365510140024694
  %2623 = or i64 %2621, %2622
  %2624 = xor i64 5702392584358035892, %2623
  %2625 = xor i64 %31, -1
  %2626 = or i64 8795580962757596866, %2625
  %2627 = xor i64 %2626, -1
  %2628 = and i64 %2627, -1
  %2629 = or i64 %2624, %2628
  %2630 = xor i64 %2618, %2619
  %2631 = xor i64 %2630, %2629
  %2632 = xor i64 %2631, %2614
  %2633 = xor i64 %2632, 9118360569450498403
  %2634 = mul i64 %2613, %2633
  %2635 = trunc i64 %2634 to i8
  %2636 = mul i8 %2635, %2594
  %2637 = add i8 111, %2636
  %2638 = mul i8 %2637, 3
  %2639 = srem i8 %2638, 2
  %2640 = icmp eq i8 %2639, 0
  %2641 = or i1 %2587, %2640
  %2642 = or i64 %119, -428260886287079953
  %2643 = xor i64 %119, -1
  %2644 = and i64 %2643, 1984550056321266519
  %2645 = and i64 %119, -1984550056321266520
  %2646 = or i64 %2644, %2645
  %2647 = xor i64 -2196618362507192648, %2646
  %2648 = xor i64 %119, -1
  %2649 = or i64 428260886287079952, %2648
  %2650 = xor i64 %2649, -1
  %2651 = and i64 %2650, -1
  %2652 = or i64 %2647, %2651
  %2653 = sext i32 %207 to i64
  %2654 = and i64 %2653, 8412767139669825261
  %2655 = xor i64 %2653, -1
  %2656 = or i64 -8412767139669825262, %2655
  %2657 = xor i64 %2656, -1
  %2658 = and i64 %2657, -1
  %2659 = xor i64 -1493199038678894195, %2658
  %2660 = xor i64 %2659, %2654
  %2661 = xor i64 %2660, %2652
  %2662 = xor i64 %2661, %2642
  %2663 = add i64 %51, -3146114725498998555
  %2664 = sub i64 0, %51
  %2665 = add i64 3146114725498998555, %2664
  %2666 = sub i64 0, %2665
  %2667 = or i64 %51, 5617878571139199758
  %2668 = xor i64 %51, -1
  %2669 = and i64 5617878571139199758, %2668
  %2670 = add i64 %2669, %51
  %2671 = or i64 %47, 8735069594625138877
  %2672 = and i64 8735069594625138877, %47
  %2673 = xor i64 8735069594625138877, %47
  %2674 = or i64 %2672, %2673
  %2675 = xor i64 -610822882479186350, %2666
  %2676 = xor i64 %2675, %2674
  %2677 = xor i64 %2676, %2663
  %2678 = xor i64 %2677, %2671
  %2679 = xor i64 %2678, %2667
  %2680 = xor i64 %2679, %2670
  %2681 = mul i64 %2662, %2680
  %2682 = trunc i64 %2681 to i32
  %2683 = select i1 %2641, i32 388314383, i32 %2682
  %2684 = xor i32 %2683, 37
  store i32 %2684, i32* %4, align 4
  %2685 = call i8** @bf10863455059032886292(i32* %4)
  %2686 = load i8*, i8** %2685, align 8
  indirectbr i8* %2686, [label %loopEnd, label %2500]

2687:                                             ; preds = %2687, %loopStart
  %2688 = sdiv i64 64, 109
  %2689 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 22
  %2690 = load i32, i32* %2689, align 4
  %2691 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %2692 = load i32, i32* %2691, align 4
  %2693 = sub i32 %2690, -1179553450
  %2694 = sub i32 %2693, %2692
  %2695 = add i32 %2694, -1179553450
  %2696 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 20
  %2697 = load i32, i32* %2696, align 4
  %2698 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %2699 = load i32, i32* %2698, align 4
  %2700 = srem i32 %2697, %2699
  %.reload106 = load i1, i1* %.reg2mem105, align 1
  %2701 = select i1 %.reload106, i32 %2695, i32 %2700
  store i32 %2701, i32* %dispatcher, align 4
  %2702 = load i8*, i8** %92, align 8
  %2703 = load i8, i8* %2702, align 1
  %2704 = and i64 %15, -947133645068942739
  %2705 = xor i64 %15, -1
  %2706 = or i64 947133645068942738, %2705
  %2707 = xor i64 %2706, -1
  %2708 = and i64 %2707, -1
  %2709 = or i64 %196, 3124887126012422652
  %2710 = and i64 3124887126012422652, %196
  %2711 = xor i64 3124887126012422652, %196
  %2712 = or i64 %2710, %2711
  %2713 = and i64 %198, 475817029120710187
  %2714 = xor i64 %198, -1
  %2715 = xor i64 475817029120710187, %2714
  %2716 = and i64 %2715, 475817029120710187
  %2717 = xor i64 -5359021973230056349, %2712
  %2718 = xor i64 %2717, %2713
  %2719 = xor i64 %2718, %2716
  %2720 = xor i64 %2719, %2709
  %2721 = xor i64 %2720, %2708
  %2722 = xor i64 %2721, %2704
  %2723 = or i64 %63, -4018357871212226334
  %2724 = and i64 -4018357871212226334, %63
  %2725 = xor i64 -4018357871212226334, %63
  %2726 = or i64 %2724, %2725
  %2727 = add i64 %9, -2855473735891274470
  %2728 = xor i64 -2855473735891274470, %9
  %2729 = and i64 -2855473735891274470, %9
  %2730 = mul i64 2, %2729
  %2731 = add i64 %2728, %2730
  %2732 = xor i64 %2723, %2727
  %2733 = xor i64 %2732, %2731
  %2734 = xor i64 %2733, %2726
  %2735 = xor i64 %2734, -4347507028470682986
  %2736 = mul i64 %2722, %2735
  %2737 = trunc i64 %2736 to i8
  %2738 = mul i8 %2703, %2737
  %2739 = add i64 %7, -7088385458033215098
  %2740 = xor i64 -7088385458033215098, %7
  %2741 = and i64 -7088385458033215098, %7
  %2742 = mul i64 2, %2741
  %2743 = add i64 %2740, %2742
  %2744 = or i64 %63, -1909390516807090886
  %2745 = and i64 -1909390516807090886, %63
  %2746 = xor i64 -1909390516807090886, %63
  %2747 = or i64 %2745, %2746
  %2748 = xor i64 %2747, %2739
  %2749 = xor i64 %2748, %2743
  %2750 = xor i64 %2749, -5915229382122124631
  %2751 = xor i64 %2750, %2744
  %2752 = or i64 %63, -5409270852425971973
  %2753 = xor i64 %63, -1
  %2754 = and i64 %2753, -4222047501751893850
  %2755 = and i64 %63, 4222047501751893849
  %2756 = or i64 %2754, %2755
  %2757 = xor i64 8180277429173372509, %2756
  %2758 = xor i64 %63, -1
  %2759 = or i64 5409270852425971972, %2758
  %2760 = xor i64 %2759, -1
  %2761 = and i64 %2760, -1
  %2762 = or i64 %2757, %2761
  %2763 = and i64 %115, 946475168093748345
  %2764 = xor i64 %115, -1
  %2765 = xor i64 946475168093748345, %2764
  %2766 = and i64 %2765, 946475168093748345
  %2767 = and i64 %31, -1188445451573025629
  %2768 = xor i64 %31, -1
  %2769 = xor i64 -1188445451573025629, %2768
  %2770 = and i64 %2769, -1188445451573025629
  %2771 = xor i64 %2766, %2752
  %2772 = xor i64 %2771, %2770
  %2773 = xor i64 %2772, %2763
  %2774 = xor i64 %2773, %2762
  %2775 = xor i64 %2774, 4222208369790546738
  %2776 = xor i64 %2775, %2767
  %2777 = mul i64 %2751, %2776
  %2778 = trunc i64 %2777 to i8
  %2779 = mul i8 %2703, %2778
  %2780 = add i64 %77, 5122864306788366486
  %2781 = add i64 7011386400864222016, %77
  %2782 = sub i64 %2781, 1888522094075855530
  %2783 = and i64 %99, 3940826633087398699
  %2784 = xor i64 %99, -1
  %2785 = or i64 -3940826633087398700, %2784
  %2786 = xor i64 %2785, -1
  %2787 = and i64 %2786, -1
  %2788 = xor i64 %2780, %2782
  %2789 = xor i64 %2788, -8220361396708494795
  %2790 = xor i64 %2789, %2787
  %2791 = xor i64 %2790, %2783
  %2792 = or i64 %63, 4668642853140414413
  %2793 = xor i64 %63, -1
  %2794 = and i64 4668642853140414413, %2793
  %2795 = add i64 %2794, %63
  %2796 = sext i32 %207 to i64
  %2797 = and i64 %2796, -6147277701929157298
  %2798 = xor i64 %2796, -1
  %2799 = xor i64 -6147277701929157298, %2798
  %2800 = and i64 %2799, -6147277701929157298
  %2801 = xor i64 -8052100205089120198, %2797
  %2802 = xor i64 %2801, %2795
  %2803 = xor i64 %2802, %2792
  %2804 = xor i64 %2803, %2800
  %2805 = mul i64 %2791, %2804
  %2806 = trunc i64 %2805 to i8
  %2807 = add i8 %2806, %2779
  %2808 = mul i8 %2738, %2807
  %2809 = srem i8 %2808, 4
  %2810 = icmp eq i8 %2809, 0
  %2811 = mul i8 %2703, %2703
  %2812 = mul i8 %2811, %2703
  %2813 = add i8 %2812, %2703
  %2814 = and i64 %63, 7740403452079028315
  %2815 = xor i64 %63, -1
  %2816 = or i64 -7740403452079028316, %2815
  %2817 = xor i64 %2816, -1
  %2818 = and i64 %2817, -1
  %2819 = and i64 %188, -777734868340440762
  %2820 = xor i64 %188, -1
  %2821 = xor i64 -777734868340440762, %2820
  %2822 = and i64 %2821, -777734868340440762
  %2823 = or i64 %31, 4166755875950244830
  %2824 = and i64 4166755875950244830, %31
  %2825 = xor i64 4166755875950244830, %31
  %2826 = or i64 %2824, %2825
  %2827 = xor i64 %2826, %2822
  %2828 = xor i64 %2827, %2819
  %2829 = xor i64 %2828, %2818
  %2830 = xor i64 %2829, %2823
  %2831 = xor i64 %2830, -3378389631941229739
  %2832 = xor i64 %2831, %2814
  %2833 = and i64 %73, 6485435221584220722
  %2834 = xor i64 %73, -1
  %2835 = xor i64 6485435221584220722, %2834
  %2836 = and i64 %2835, 6485435221584220722
  %2837 = add i64 %47, -7278567410657700617
  %2838 = xor i64 -7278567410657700617, %47
  %2839 = and i64 -7278567410657700617, %47
  %2840 = mul i64 2, %2839
  %2841 = add i64 %2838, %2840
  %2842 = xor i64 %2836, 8100668408646616058
  %2843 = xor i64 %2842, %2833
  %2844 = xor i64 %2843, %2841
  %2845 = xor i64 %2844, %2837
  %2846 = mul i64 %2832, %2845
  %2847 = trunc i64 %2846 to i8
  %2848 = srem i8 %2813, %2847
  %2849 = icmp eq i8 %2848, 0
  %2850 = and i1 %2810, %2849
  %2851 = select i1 %2850, i32 388314398, i32 388314410
  %2852 = xor i32 %2851, -1
  %2853 = and i32 %2852, 52
  %2854 = and i32 %2851, -53
  %2855 = or i32 %2853, %2854
  store i32 %2855, i32* %4, align 4
  %2856 = call i8** @bf10863455059032886292(i32* %4)
  %2857 = load i8*, i8** %2856, align 8
  indirectbr i8* %2857, [label %loopEnd, label %2687]

2858:                                             ; preds = %2858, %loopStart
  %2859 = sdiv i64 64, 109
  %2860 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 22
  %2861 = load i32, i32* %2860, align 4
  %2862 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %2863 = load i32, i32* %2862, align 4
  %2864 = sub i32 %2861, %2863
  store i32 %2864, i32* %dispatcher, align 4
  %2865 = load i8*, i8** %122, align 8
  %2866 = load i8, i8* %2865, align 1
  %2867 = mul i8 %2866, 2
  %2868 = mul i8 %2866, 2
  %2869 = add i8 2, %2868
  %2870 = mul i8 %2867, %2869
  %2871 = srem i8 %2870, 4
  %2872 = icmp eq i8 %2871, 0
  %2873 = mul i8 %2866, %2866
  %2874 = xor i8 %2873, %2866
  %2875 = and i8 %2873, %2866
  %2876 = or i64 %33, -411768004437711193
  %2877 = and i64 -411768004437711193, %33
  %2878 = xor i64 -411768004437711193, %33
  %2879 = or i64 %2877, %2878
  %2880 = and i64 %13, 5544157732542516826
  %2881 = or i64 -5544157732542516827, %13
  %2882 = sub i64 %2881, -5544157732542516827
  %2883 = add i64 %97, 7980466043241679828
  %2884 = add i64 -5009387342376463835, %97
  %2885 = add i64 %2884, -5456890688091407953
  %2886 = xor i64 %2879, -6087116200070915803
  %2887 = xor i64 %2886, %2883
  %2888 = xor i64 %2887, %2876
  %2889 = xor i64 %2888, %2885
  %2890 = xor i64 %2889, %2880
  %2891 = xor i64 %2890, %2882
  %2892 = or i64 %51, 5360153563129464478
  %2893 = and i64 5360153563129464478, %51
  %2894 = xor i64 5360153563129464478, %51
  %2895 = or i64 %2893, %2894
  %2896 = add i64 %87, -2050226400920443684
  %2897 = sub i64 0, %87
  %2898 = sub i64 -2050226400920443684, %2897
  %2899 = and i64 %37, -8939730732964930132
  %2900 = xor i64 %37, -1
  %2901 = xor i64 -8939730732964930132, %2900
  %2902 = and i64 %2901, -8939730732964930132
  %2903 = xor i64 %2895, %2898
  %2904 = xor i64 %2903, %2896
  %2905 = xor i64 %2904, %2899
  %2906 = xor i64 %2905, %2902
  %2907 = xor i64 %2906, -563370475291527846
  %2908 = xor i64 %2907, %2892
  %2909 = mul i64 %2891, %2908
  %2910 = trunc i64 %2909 to i8
  %2911 = mul i8 %2910, %2875
  %2912 = add i8 %2874, %2911
  %2913 = srem i8 %2912, 2
  %2914 = icmp eq i8 %2913, 0
  %2915 = or i1 %2872, %2914
  %2916 = select i1 %2915, i32 388314426, i32 388314410
  %2917 = xor i32 %2916, -1990016359
  %2918 = and i64 %41, 570534101558479837
  %2919 = xor i64 %41, -1
  %2920 = or i64 -570534101558479838, %2919
  %2921 = xor i64 %2920, -1
  %2922 = and i64 %2921, -1
  %2923 = and i64 %43, 5694563590718155500
  %2924 = xor i64 %43, -1
  %2925 = xor i64 5694563590718155500, %2924
  %2926 = and i64 %2925, 5694563590718155500
  %2927 = and i64 %29, 438825859506897031
  %2928 = or i64 -438825859506897032, %29
  %2929 = sub i64 %2928, -438825859506897032
  %2930 = xor i64 %2929, %2927
  %2931 = xor i64 %2930, %2922
  %2932 = xor i64 %2931, %2926
  %2933 = xor i64 %2932, 4391395071065007385
  %2934 = xor i64 %2933, %2918
  %2935 = xor i64 %2934, %2923
  %2936 = add i64 %75, 1677401406625551332
  %2937 = and i64 1677401406625551332, %75
  %2938 = or i64 1677401406625551332, %75
  %2939 = add i64 %2937, %2938
  %2940 = or i64 %190, -2566119679885810898
  %2941 = xor i64 %190, -1
  %2942 = and i64 -2566119679885810898, %2941
  %2943 = add i64 %2942, %190
  %2944 = xor i64 %2940, 7560710873309791985
  %2945 = xor i64 %2944, %2943
  %2946 = xor i64 %2945, %2936
  %2947 = xor i64 %2946, %2939
  %2948 = mul i64 %2935, %2947
  %2949 = trunc i64 %2948 to i32
  %2950 = xor i32 %2917, %2949
  store i32 %2950, i32* %4, align 4
  %2951 = call i8** @bf10863455059032886292(i32* %4)
  %2952 = load i8*, i8** %2951, align 8
  indirectbr i8* %2952, [label %loopEnd, label %2858]

2953:                                             ; preds = %2953, %loopStart
  %2954 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %2955 = load i32, i32* %2954, align 4
  %2956 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 5
  %2957 = load i32, i32* %2956, align 4
  %2958 = sub i32 %2955, -1947043466
  %2959 = sub i32 %2958, %2957
  %2960 = add i32 %2959, -1947043466
  store i32 %2960, i32* %dispatcher, align 4
  %.reload104 = load i1, i1* %.reg2mem103, align 1
  store i1 %.reload104, i1* %.reg2mem154, align 1
  %2961 = load i8*, i8** %92, align 8
  %2962 = load i8, i8* %2961, align 1
  %2963 = mul i8 %2962, 2
  %2964 = mul i8 %2962, 2
  %2965 = add i8 2, %2964
  %2966 = mul i8 %2963, %2965
  %2967 = srem i8 %2966, 4
  %2968 = icmp eq i8 %2967, 0
  %2969 = mul i8 %2962, %2962
  %2970 = sub i8 %2969, 125
  %2971 = add i8 %2970, %2962
  %2972 = add i8 %2971, 125
  %2973 = srem i8 %2972, 2
  %2974 = icmp eq i8 %2973, 0
  %2975 = and i1 %2968, %2974
  %2976 = select i1 %2975, i32 388314405, i32 388314410
  %2977 = xor i32 %2976, -1
  %2978 = add i64 %186, -7629044962521870624
  %2979 = add i64 7480816303588424903, %186
  %2980 = sub i64 %2979, -3336882807599256089
  %2981 = or i64 %11, 7075094441956238585
  %2982 = xor i64 %11, -1
  %2983 = and i64 %2982, -5878658358122122297
  %2984 = and i64 %11, 5878658358122122296
  %2985 = or i64 %2983, %2984
  %2986 = xor i64 -3727564636214814914, %2985
  %2987 = xor i64 %11, -1
  %2988 = or i64 -7075094441956238586, %2987
  %2989 = xor i64 %2988, -1
  %2990 = and i64 %2989, -1
  %2991 = or i64 %2986, %2990
  %2992 = or i64 %43, 4469505184480499552
  %2993 = xor i64 %43, -1
  %2994 = and i64 4469505184480499552, %2993
  %2995 = add i64 %2994, %43
  %2996 = xor i64 %2978, %2995
  %2997 = xor i64 %2996, %2992
  %2998 = xor i64 %2997, %2980
  %2999 = xor i64 %2998, 9038999908085858171
  %3000 = xor i64 %2999, %2981
  %3001 = xor i64 %3000, %2991
  %3002 = or i64 %57, -1097828442090112203
  %3003 = xor i64 %57, -1
  %3004 = and i64 -1097828442090112203, %3003
  %3005 = add i64 %3004, %57
  %3006 = or i64 %55, -3283454327139994102
  %3007 = and i64 -3283454327139994102, %55
  %3008 = xor i64 -3283454327139994102, %55
  %3009 = or i64 %3007, %3008
  %3010 = xor i64 %3009, -2144161590560459907
  %3011 = xor i64 %3010, %3005
  %3012 = xor i64 %3011, %3002
  %3013 = xor i64 %3012, %3006
  %3014 = mul i64 %3001, %3013
  %3015 = trunc i64 %3014 to i32
  %3016 = and i32 %2977, %3015
  %3017 = and i64 %71, -6440447288451187728
  %3018 = xor i64 %71, -1
  %3019 = xor i64 -6440447288451187728, %3018
  %3020 = and i64 %3019, -6440447288451187728
  %3021 = and i64 %198, -5521709447626877943
  %3022 = xor i64 %198, -1
  %3023 = xor i64 -5521709447626877943, %3022
  %3024 = and i64 %3023, -5521709447626877943
  %3025 = xor i64 %3024, %3021
  %3026 = xor i64 %3025, -2177154114241390653
  %3027 = xor i64 %3026, %3017
  %3028 = xor i64 %3027, %3020
  %3029 = and i64 %196, 7750455430480487529
  %3030 = or i64 -7750455430480487530, %196
  %3031 = sub i64 %3030, -7750455430480487530
  %3032 = and i64 %37, -7977521546162758056
  %3033 = xor i64 %37, -1
  %3034 = or i64 7977521546162758055, %3033
  %3035 = xor i64 %3034, -1
  %3036 = and i64 %3035, -1
  %3037 = xor i64 %3036, %3032
  %3038 = xor i64 %3037, -6300823801925537456
  %3039 = xor i64 %3038, %3031
  %3040 = xor i64 %3039, %3029
  %3041 = mul i64 %3028, %3040
  %3042 = trunc i64 %3041 to i32
  %3043 = and i32 %2976, %3042
  %3044 = or i32 %3016, %3043
  store i32 %3044, i32* %4, align 4
  %3045 = call i8** @bf10863455059032886292(i32* %4)
  %3046 = load i8*, i8** %3045, align 8
  indirectbr i8* %3046, [label %loopEnd, label %2953]

3047:                                             ; preds = %3047, %loopStart
  %.reload155 = load i1, i1* %.reg2mem154, align 1
  %3048 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 16
  %3049 = load i32, i32* %3048, align 4
  %3050 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 14
  %3051 = load i32, i32* %3050, align 4
  %3052 = sub i32 0, %3051
  %3053 = sub i32 %3049, %3052
  %3054 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %3055 = load i32, i32* %3054, align 4
  %3056 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %3057 = load i32, i32* %3056, align 4
  %3058 = srem i32 %3055, %3057
  %3059 = select i1 %.reload155, i32 %3053, i32 %3058
  store i32 %3059, i32* %dispatcher, align 4
  %3060 = load i8*, i8** %22, align 8
  %3061 = load i8, i8* %3060, align 1
  %3062 = mul i8 %3061, %3061
  %3063 = add i8 %3062, %3061
  %3064 = sext i32 %dispatcher1 to i64
  %3065 = add i64 %3064, 8629137168541058670
  %3066 = add i64 2333665619365648914, %3064
  %3067 = sub i64 %3066, -6295471549175409756
  %3068 = sext i32 %207 to i64
  %3069 = add i64 %3068, -8594984923899383222
  %3070 = and i64 -8594984923899383222, %3068
  %3071 = or i64 -8594984923899383222, %3068
  %3072 = add i64 %3070, %3071
  %3073 = xor i64 %3065, -7555250686767764063
  %3074 = xor i64 %3073, %3069
  %3075 = xor i64 %3074, %3072
  %3076 = xor i64 %3075, %3067
  %3077 = add i64 %184, 5934114566396644856
  %3078 = add i64 -1268485310862903837, %184
  %3079 = add i64 %3078, 7202599877259548693
  %3080 = add i64 %43, -7774461349192566874
  %3081 = add i64 5291866935597578679, %43
  %3082 = sub i64 %3081, -5380415788919406063
  %3083 = add i64 %67, 1157165924191494541
  %3084 = and i64 1157165924191494541, %67
  %3085 = or i64 1157165924191494541, %67
  %3086 = add i64 %3084, %3085
  %3087 = xor i64 %3079, %3077
  %3088 = xor i64 %3087, %3083
  %3089 = xor i64 %3088, %3080
  %3090 = xor i64 %3089, %3082
  %3091 = xor i64 %3090, -5497882102518373597
  %3092 = xor i64 %3091, %3086
  %3093 = mul i64 %3076, %3092
  %3094 = trunc i64 %3093 to i8
  %3095 = mul i8 %3063, %3094
  %3096 = add i64 %192, -1994379339542091978
  %3097 = and i64 -1994379339542091978, %192
  %3098 = or i64 -1994379339542091978, %192
  %3099 = add i64 %3097, %3098
  %3100 = or i64 %63, 7057155682556438259
  %3101 = xor i64 %63, -1
  %3102 = and i64 %3101, 3870132701976617222
  %3103 = and i64 %63, -3870132701976617223
  %3104 = or i64 %3102, %3103
  %3105 = xor i64 6072387782487541749, %3104
  %3106 = xor i64 %63, -1
  %3107 = or i64 -7057155682556438260, %3106
  %3108 = xor i64 %3107, -1
  %3109 = and i64 %3108, -1
  %3110 = or i64 %3105, %3109
  %3111 = xor i64 %3110, %3100
  %3112 = xor i64 %3111, %3096
  %3113 = xor i64 %3112, %3099
  %3114 = xor i64 %3113, 8116190632728102765
  %3115 = add i64 %5, -6623327135547113984
  %3116 = xor i64 -6623327135547113984, %5
  %3117 = and i64 -6623327135547113984, %5
  %3118 = mul i64 2, %3117
  %3119 = add i64 %3116, %3118
  %3120 = and i64 %198, 6335501342508417638
  %3121 = xor i64 %198, -1
  %3122 = xor i64 6335501342508417638, %3121
  %3123 = and i64 %3122, 6335501342508417638
  %3124 = xor i64 %3120, %3123
  %3125 = xor i64 %3124, %3115
  %3126 = xor i64 %3125, 3726539715504452810
  %3127 = xor i64 %3126, %3119
  %3128 = mul i64 %3114, %3127
  %3129 = trunc i64 %3128 to i8
  %3130 = srem i8 %3095, %3129
  %3131 = icmp eq i8 %3130, 0
  %3132 = mul i8 %3061, %3061
  %3133 = add i8 %3132, %3061
  %3134 = srem i8 %3133, 2
  %3135 = and i64 %51, -141967863542730493
  %3136 = xor i64 %51, -1
  %3137 = xor i64 -141967863542730493, %3136
  %3138 = and i64 %3137, -141967863542730493
  %3139 = add i64 %93, 5595274288267863321
  %3140 = add i64 5053580170241199357, %93
  %3141 = sub i64 %3140, -541694118026663964
  %3142 = xor i64 %3141, %3138
  %3143 = xor i64 %3142, %3135
  %3144 = xor i64 %3143, %3139
  %3145 = xor i64 %3144, -992668259031135639
  %3146 = or i64 %65, 2915209006363323191
  %3147 = xor i64 %65, -1
  %3148 = and i64 2915209006363323191, %3147
  %3149 = add i64 %3148, %65
  %3150 = add i64 %103, -2856637890805627819
  %3151 = and i64 -2856637890805627819, %103
  %3152 = or i64 -2856637890805627819, %103
  %3153 = add i64 %3151, %3152
  %3154 = and i64 %29, -345526630516730604
  %3155 = xor i64 %29, -1
  %3156 = xor i64 -345526630516730604, %3155
  %3157 = and i64 %3156, -345526630516730604
  %3158 = xor i64 %3150, %3153
  %3159 = xor i64 %3158, %3154
  %3160 = xor i64 %3159, %3149
  %3161 = xor i64 %3160, %3146
  %3162 = xor i64 %3161, 0
  %3163 = xor i64 %3162, %3157
  %3164 = mul i64 %3145, %3163
  %3165 = trunc i64 %3164 to i8
  %3166 = icmp eq i8 %3134, %3165
  %3167 = xor i1 %3131, true
  %3168 = sext i32 %207 to i64
  %3169 = add i64 %3168, 1496870300953361050
  %3170 = sub i64 0, %3168
  %3171 = add i64 -1496870300953361050, %3170
  %3172 = sub i64 0, %3171
  %3173 = add i64 %77, -808197506148835760
  %3174 = and i64 -808197506148835760, %77
  %3175 = or i64 -808197506148835760, %77
  %3176 = add i64 %3174, %3175
  %3177 = and i64 %73, 2238721234801080677
  %3178 = xor i64 %73, -1
  %3179 = xor i64 2238721234801080677, %3178
  %3180 = and i64 %3179, 2238721234801080677
  %3181 = xor i64 %3177, %3169
  %3182 = xor i64 %3181, %3172
  %3183 = xor i64 %3182, -5068350943574739515
  %3184 = xor i64 %3183, %3176
  %3185 = xor i64 %3184, %3180
  %3186 = xor i64 %3185, %3173
  %3187 = or i64 %190, 2474660778006666251
  %3188 = xor i64 %190, -1
  %3189 = and i64 2474660778006666251, %3188
  %3190 = add i64 %3189, %190
  %3191 = or i64 %27, -2902182032877126223
  %3192 = and i64 -2902182032877126223, %27
  %3193 = xor i64 -2902182032877126223, %27
  %3194 = or i64 %3192, %3193
  %3195 = xor i64 %3190, %3191
  %3196 = xor i64 %3195, %3194
  %3197 = xor i64 %3196, 259059493570838797
  %3198 = xor i64 %3197, %3187
  %3199 = mul i64 %3186, %3198
  %3200 = trunc i64 %3199 to i1
  %3201 = xor i1 %3166, %3200
  %3202 = or i1 %3167, %3201
  %3203 = xor i1 %3202, true
  %3204 = and i1 %3203, true
  %3205 = select i1 %3204, i32 388314372, i32 388314410
  %3206 = or i64 %61, -7573808535707218007
  %3207 = xor i64 %61, -1
  %3208 = and i64 -7573808535707218007, %3207
  %3209 = add i64 %3208, %61
  %3210 = or i64 %7, -7245180613150196503
  %3211 = xor i64 %7, -1
  %3212 = and i64 %3211, 2200855211943306426
  %3213 = and i64 %7, -2200855211943306427
  %3214 = or i64 %3212, %3213
  %3215 = xor i64 -8793013591217268653, %3214
  %3216 = xor i64 %7, -1
  %3217 = or i64 7245180613150196502, %3216
  %3218 = xor i64 %3217, -1
  %3219 = and i64 %3218, -1
  %3220 = or i64 %3215, %3219
  %3221 = and i64 %15, 1747396818690980034
  %3222 = xor i64 %15, -1
  %3223 = or i64 -1747396818690980035, %3222
  %3224 = xor i64 %3223, -1
  %3225 = and i64 %3224, -1
  %3226 = xor i64 %3209, %3206
  %3227 = xor i64 %3226, %3210
  %3228 = xor i64 %3227, %3220
  %3229 = xor i64 %3228, -1044862683935514755
  %3230 = xor i64 %3229, %3221
  %3231 = xor i64 %3230, %3225
  %3232 = add i64 %105, -3744991103515473295
  %3233 = add i64 6922474090580653750, %105
  %3234 = sub i64 %3233, -7779278879613424571
  %3235 = or i64 %35, -7676296897957722063
  %3236 = xor i64 %35, -1
  %3237 = and i64 -7676296897957722063, %3236
  %3238 = add i64 %3237, %35
  %3239 = and i64 %186, 5756300402790498649
  %3240 = xor i64 %186, -1
  %3241 = xor i64 5756300402790498649, %3240
  %3242 = and i64 %3241, 5756300402790498649
  %3243 = xor i64 %3238, %3235
  %3244 = xor i64 %3243, 256082377770774059
  %3245 = xor i64 %3244, %3242
  %3246 = xor i64 %3245, %3234
  %3247 = xor i64 %3246, %3239
  %3248 = xor i64 %3247, %3232
  %3249 = mul i64 %3231, %3248
  %3250 = trunc i64 %3249 to i32
  %3251 = xor i32 %3205, %3250
  %3252 = and i32 %3251, 46
  %3253 = and i32 %3205, -47
  %3254 = or i32 %3252, %3253
  store i32 %3254, i32* %4, align 4
  %3255 = call i8** @bf10863455059032886292(i32* %4)
  %3256 = load i8*, i8** %3255, align 8
  indirectbr i8* %3256, [label %loopEnd, label %3047]

3257:                                             ; preds = %3257, %loopStart
  %3258 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %3259 = load i32, i32* %3258, align 4
  %3260 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 15
  %3261 = load i32, i32* %3260, align 4
  %3262 = add i32 %3259, %3261
  store i32 %3262, i32* %dispatcher, align 4
  %3263 = load i8*, i8** %40, align 8
  %3264 = load i8, i8* %3263, align 1
  %3265 = mul i8 %3264, 2
  %3266 = mul i8 %3264, 2
  %3267 = add i8 39, %3266
  %3268 = sub i8 %3267, 37
  %3269 = mul i8 %3265, %3268
  %3270 = srem i8 %3269, 4
  %3271 = icmp eq i8 %3270, 0
  %3272 = mul i8 %3264, %3264
  %3273 = mul i8 %3272, %3264
  %3274 = add i8 %3273, %3264
  %3275 = srem i8 %3274, 2
  %3276 = icmp eq i8 %3275, 0
  %3277 = and i1 %3271, %3276
  %3278 = select i1 %3277, i32 388314417, i32 388314410
  %3279 = xor i32 %3278, 27
  store i32 %3279, i32* %4, align 4
  %3280 = call i8** @bf10863455059032886292(i32* %4)
  %3281 = load i8*, i8** %3280, align 8
  indirectbr i8* %3281, [label %loopEnd, label %3257]

3282:                                             ; preds = %3282, %loopStart
  %3283 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  %3284 = load i32, i32* %3283, align 4
  %3285 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %3286 = load i32, i32* %3285, align 4
  %3287 = add i32 %3284, 1595224162
  %3288 = sub i32 %3287, %3286
  %3289 = sub i32 %3288, 1595224162
  store i32 %3289, i32* %dispatcher, align 4
  %3290 = load i8*, i8** %80, align 8
  %3291 = load i8, i8* %3290, align 1
  %3292 = mul i8 %3291, 2
  %3293 = mul i8 %3291, 2
  %3294 = sub i8 0, %3293
  %3295 = sub i8 2, %3294
  %3296 = mul i8 %3292, %3295
  %3297 = srem i8 %3296, 4
  %3298 = add i64 %29, 5723308743691784415
  %3299 = xor i64 5723308743691784415, %29
  %3300 = and i64 5723308743691784415, %29
  %3301 = mul i64 2, %3300
  %3302 = add i64 %3299, %3301
  %3303 = and i64 %190, -7084539881583874336
  %3304 = or i64 7084539881583874335, %190
  %3305 = sub i64 %3304, 7084539881583874335
  %3306 = and i64 %65, 2136530966028553233
  %3307 = xor i64 %65, -1
  %3308 = xor i64 2136530966028553233, %3307
  %3309 = and i64 %3308, 2136530966028553233
  %3310 = xor i64 %3303, %3306
  %3311 = xor i64 %3310, %3298
  %3312 = xor i64 %3311, %3302
  %3313 = xor i64 %3312, %3305
  %3314 = xor i64 %3313, %3309
  %3315 = xor i64 %3314, -6482955257041940903
  %3316 = add i64 %61, -6692669501085092373
  %3317 = sub i64 0, %61
  %3318 = sub i64 -6692669501085092373, %3317
  %3319 = add i64 %99, 4859508695014248389
  %3320 = add i64 3845157803710596967, %99
  %3321 = add i64 %3320, 1014350891303651422
  %3322 = add i64 %61, 6858905266389639579
  %3323 = xor i64 6858905266389639579, %61
  %3324 = and i64 6858905266389639579, %61
  %3325 = mul i64 2, %3324
  %3326 = add i64 %3323, %3325
  %3327 = xor i64 %3326, %3318
  %3328 = xor i64 %3327, %3316
  %3329 = xor i64 %3328, %3319
  %3330 = xor i64 %3329, 0
  %3331 = xor i64 %3330, %3322
  %3332 = xor i64 %3331, %3321
  %3333 = mul i64 %3315, %3332
  %3334 = trunc i64 %3333 to i8
  %3335 = icmp eq i8 %3297, %3334
  %3336 = mul i8 %3291, %3291
  %3337 = add i8 %3336, %3291
  %3338 = srem i8 %3337, 2
  %3339 = icmp eq i8 %3338, 0
  %3340 = xor i1 %3335, true
  %3341 = or i1 %3340, %3339
  %3342 = xor i1 %3335, true
  %3343 = sub i1 %3341, %3342
  %3344 = and i64 %111, 3487762205246172972
  %3345 = or i64 -3487762205246172973, %111
  %3346 = sub i64 %3345, -3487762205246172973
  %3347 = add i64 %43, 3105181530630169797
  %3348 = and i64 3105181530630169797, %43
  %3349 = or i64 3105181530630169797, %43
  %3350 = add i64 %3348, %3349
  %3351 = and i64 %15, 6277143938814587334
  %3352 = or i64 -6277143938814587335, %15
  %3353 = sub i64 %3352, -6277143938814587335
  %3354 = xor i64 %3346, %3350
  %3355 = xor i64 %3354, %3353
  %3356 = xor i64 %3355, %3344
  %3357 = xor i64 %3356, %3347
  %3358 = xor i64 %3357, -1151694267845245927
  %3359 = xor i64 %3358, %3351
  %3360 = sext i32 %207 to i64
  %3361 = add i64 %3360, -6213599209267747547
  %3362 = xor i64 -6213599209267747547, %3360
  %3363 = and i64 -6213599209267747547, %3360
  %3364 = mul i64 2, %3363
  %3365 = add i64 %3362, %3364
  %3366 = and i64 %15, -4750880013560067212
  %3367 = or i64 4750880013560067211, %15
  %3368 = sub i64 %3367, 4750880013560067211
  %3369 = or i64 %79, 1880170836335311710
  %3370 = and i64 1880170836335311710, %79
  %3371 = xor i64 1880170836335311710, %79
  %3372 = or i64 %3370, %3371
  %3373 = xor i64 %3365, %3366
  %3374 = xor i64 %3373, %3368
  %3375 = xor i64 %3374, %3372
  %3376 = xor i64 %3375, %3361
  %3377 = xor i64 %3376, -5532605052210547782
  %3378 = xor i64 %3377, %3369
  %3379 = mul i64 %3359, %3378
  %3380 = trunc i64 %3379 to i32
  %3381 = select i1 %3343, i32 388314390, i32 %3380
  %3382 = xor i32 %3381, 60
  store i32 %3382, i32* %4, align 4
  %3383 = call i8** @bf10863455059032886292(i32* %4)
  %3384 = load i8*, i8** %3383, align 8
  indirectbr i8* %3384, [label %loopEnd, label %3282]

3385:                                             ; preds = %3385, %loopStart
  %3386 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 51
  %3387 = load i32, i32* %3386, align 4
  %3388 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %3389 = load i32, i32* %3388, align 4
  %3390 = sub i32 0, %3389
  %3391 = add i32 %3387, %3390
  store i32 %3391, i32* %dispatcher, align 4
  %.reload.reload29 = load i32, i32* %.reload.reg2mem, align 4
  store i32 %.reload.reload29, i32* %.reg2mem156, align 4
  store double 0.000000e+00, double* %.reg2mem158, align 8
  %3392 = load i8*, i8** %32, align 8
  %3393 = load i8, i8* %3392, align 1
  %3394 = mul i8 %3393, 2
  %3395 = mul i8 %3393, 2
  %3396 = add i8 2, %3395
  %3397 = mul i8 %3394, %3396
  %3398 = srem i8 %3397, 4
  %3399 = sext i32 %dispatcher1 to i64
  %3400 = and i64 %3399, -2021129943784274515
  %3401 = xor i64 %3399, -1
  %3402 = xor i64 -2021129943784274515, %3401
  %3403 = and i64 %3402, -2021129943784274515
  %3404 = add i64 %63, -8910182975694057250
  %3405 = add i64 -4002214714966172760, %63
  %3406 = sub i64 %3405, 4907968260727884490
  %3407 = xor i64 %3406, %3400
  %3408 = xor i64 %3407, %3403
  %3409 = xor i64 %3408, %3404
  %3410 = xor i64 %3409, -9192888605165953625
  %3411 = add i64 %105, -4913830272086326155
  %3412 = sub i64 0, %105
  %3413 = sub i64 -4913830272086326155, %3412
  %3414 = or i64 %63, 3364697170206935146
  %3415 = and i64 3364697170206935146, %63
  %3416 = xor i64 3364697170206935146, %63
  %3417 = or i64 %3415, %3416
  %3418 = and i64 %9, 8054264070685558832
  %3419 = xor i64 %9, -1
  %3420 = xor i64 8054264070685558832, %3419
  %3421 = and i64 %3420, 8054264070685558832
  %3422 = xor i64 0, %3417
  %3423 = xor i64 %3422, %3418
  %3424 = xor i64 %3423, %3411
  %3425 = xor i64 %3424, %3421
  %3426 = xor i64 %3425, %3413
  %3427 = xor i64 %3426, %3414
  %3428 = mul i64 %3410, %3427
  %3429 = trunc i64 %3428 to i8
  %3430 = icmp eq i8 %3398, %3429
  %3431 = mul i8 %3393, %3393
  %3432 = add i8 %3431, %3393
  %3433 = srem i8 %3432, 2
  %3434 = icmp eq i8 %3433, 0
  %3435 = or i1 %3430, %3434
  %3436 = and i64 %9, 2668512017690470339
  %3437 = xor i64 %9, -1
  %3438 = or i64 -2668512017690470340, %3437
  %3439 = xor i64 %3438, -1
  %3440 = and i64 %3439, -1
  %3441 = or i64 %73, 2768161924478746875
  %3442 = xor i64 %73, -1
  %3443 = and i64 2768161924478746875, %3442
  %3444 = add i64 %3443, %73
  %3445 = xor i64 %3436, %3441
  %3446 = xor i64 %3445, %3444
  %3447 = xor i64 %3446, %3440
  %3448 = xor i64 %3447, 6983388534172753013
  %3449 = and i64 %21, 4809169919825739763
  %3450 = or i64 -4809169919825739764, %21
  %3451 = sub i64 %3450, -4809169919825739764
  %3452 = and i64 %97, 5594304048150128095
  %3453 = xor i64 %97, -1
  %3454 = or i64 -5594304048150128096, %3453
  %3455 = xor i64 %3454, -1
  %3456 = and i64 %3455, -1
  %3457 = or i64 %15, -6490943653124708043
  %3458 = and i64 -6490943653124708043, %15
  %3459 = xor i64 -6490943653124708043, %15
  %3460 = or i64 %3458, %3459
  %3461 = xor i64 %3452, %3456
  %3462 = xor i64 %3461, %3451
  %3463 = xor i64 %3462, -2028070476393835290
  %3464 = xor i64 %3463, %3460
  %3465 = xor i64 %3464, %3457
  %3466 = xor i64 %3465, %3449
  %3467 = mul i64 %3448, %3466
  %3468 = trunc i64 %3467 to i32
  %3469 = or i64 %23, 6091043004476526339
  %3470 = xor i64 %23, -1
  %3471 = and i64 6091043004476526339, %3470
  %3472 = add i64 %3471, %23
  %3473 = or i64 %99, 5023170029815443022
  %3474 = and i64 5023170029815443022, %99
  %3475 = xor i64 5023170029815443022, %99
  %3476 = or i64 %3474, %3475
  %3477 = xor i64 %3473, %3472
  %3478 = xor i64 %3477, %3469
  %3479 = xor i64 %3478, -1343130638380909039
  %3480 = xor i64 %3479, %3476
  %3481 = add i64 %45, -8150987020734184972
  %3482 = add i64 2796870843352298181, %45
  %3483 = sub i64 %3482, -7498886209623068463
  %3484 = add i64 %65, 1036791720026891952
  %3485 = add i64 -3759060576079838253, %65
  %3486 = sub i64 %3485, -4795852296106730205
  %3487 = and i64 %83, 8360388542765301541
  %3488 = xor i64 %83, -1
  %3489 = xor i64 8360388542765301541, %3488
  %3490 = and i64 %3489, 8360388542765301541
  %3491 = xor i64 317146776366399626, %3486
  %3492 = xor i64 %3491, %3483
  %3493 = xor i64 %3492, %3487
  %3494 = xor i64 %3493, %3490
  %3495 = xor i64 %3494, %3484
  %3496 = xor i64 %3495, %3481
  %3497 = mul i64 %3480, %3496
  %3498 = trunc i64 %3497 to i32
  %3499 = select i1 %3435, i32 %3468, i32 %3498
  %3500 = xor i32 %3499, 52
  store i32 %3500, i32* %4, align 4
  %3501 = call i8** @bf10863455059032886292(i32* %4)
  %3502 = load i8*, i8** %3501, align 8
  indirectbr i8* %3502, [label %loopEnd, label %3385]

codeRepl53:                                       ; preds = %codeRepl53, %loopStart
  %lt.cast59 = bitcast i32* %.loc54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast59)
  %lt.cast60 = bitcast i1* %.loc55 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast60)
  store i64 5221456193252566388, i64* %183, align 8
  %3503 = call i8** @lk13323888900026137679(i64* %183)
  %3504 = load i8*, i8** %3503, align 8
  %3505 = bitcast i8* %3504 to i1 (float, float*, float*, i8*, float*, i32, i32*, i1*)*
  %.reload2.reload = load i32, i32* %.reload2.reg2mem, align 4
  %.reload129 = load float, float* %.reg2mem127, align 4
  %targetBlock56 = call i1 %3505(float %.reload129, float* %0, float* %1, i8* %2, float* %3, i32 %.reload2.reload, i32* %.loc54, i1* %.loc55)
  %.reload57 = load i32, i32* %.loc54, align 4
  store i32 %.reload57, i32* %.reload57.reg2mem, align 4
  %.reload58 = load i1, i1* %.loc55, align 1
  store i1 %.reload58, i1* %.reload58.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast59)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast60)
  %3506 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %3507 = load i32, i32* %3506, align 4
  %3508 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %3509 = load i32, i32* %3508, align 4
  %3510 = sub i32 %3507, %3509
  %3511 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 18
  %3512 = load i32, i32* %3511, align 4
  %3513 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %3514 = load i32, i32* %3513, align 4
  %3515 = xor i32 %3512, %3514
  %3516 = and i32 %3512, %3514
  %3517 = mul i32 2, %3516
  %3518 = add i32 %3515, %3517
  %3519 = select i1 %targetBlock56, i32 %3510, i32 %3518
  store i32 %3519, i32* %dispatcher, align 4
  %3520 = load i8*, i8** %16, align 8
  %3521 = load i8, i8* %3520, align 1
  %3522 = mul i8 %3521, 2
  %3523 = mul i8 %3521, 2
  %3524 = or i64 %31, -4036243372614354366
  %3525 = xor i64 %31, -1
  %3526 = and i64 -4036243372614354366, %3525
  %3527 = add i64 %3526, %31
  %3528 = add i64 %37, 7132196333988561543
  %3529 = add i64 3273978716432505789, %37
  %3530 = sub i64 %3529, -3858217617556055754
  %3531 = xor i64 %3527, %3528
  %3532 = xor i64 %3531, %3524
  %3533 = xor i64 %3532, %3530
  %3534 = xor i64 %3533, 440384251606248407
  %3535 = and i64 %41, -6400306383878633305
  %3536 = xor i64 %41, -1
  %3537 = or i64 6400306383878633304, %3536
  %3538 = xor i64 %3537, -1
  %3539 = and i64 %3538, -1
  %3540 = add i64 %95, -4396796465408010507
  %3541 = xor i64 -4396796465408010507, %95
  %3542 = and i64 -4396796465408010507, %95
  %3543 = mul i64 2, %3542
  %3544 = add i64 %3541, %3543
  %3545 = or i64 %83, -9182458441372321244
  %3546 = xor i64 %83, -1
  %3547 = and i64 %3546, 6680250955524369442
  %3548 = and i64 %83, -6680250955524369443
  %3549 = or i64 %3547, %3548
  %3550 = xor i64 -2583836470480906746, %3549
  %3551 = xor i64 %83, -1
  %3552 = or i64 9182458441372321243, %3551
  %3553 = xor i64 %3552, -1
  %3554 = and i64 %3553, -1
  %3555 = or i64 %3550, %3554
  %3556 = xor i64 %3544, %3545
  %3557 = xor i64 %3556, %3539
  %3558 = xor i64 %3557, %3540
  %3559 = xor i64 %3558, %3555
  %3560 = xor i64 %3559, %3535
  %3561 = xor i64 %3560, 5141734574998745038
  %3562 = mul i64 %3534, %3561
  %3563 = trunc i64 %3562 to i8
  %3564 = add i8 %3563, %3523
  %3565 = mul i8 %3522, %3564
  %3566 = srem i8 %3565, 4
  %3567 = icmp eq i8 %3566, 0
  %3568 = mul i8 %3521, %3521
  %3569 = mul i8 %3568, %3521
  %3570 = add i8 %3569, %3521
  %3571 = srem i8 %3570, 2
  %3572 = or i64 %29, 6661113961543900397
  %3573 = xor i64 %29, -1
  %3574 = and i64 6661113961543900397, %3573
  %3575 = add i64 %3574, %29
  %3576 = or i64 %105, 8947025511952160084
  %3577 = and i64 8947025511952160084, %105
  %3578 = xor i64 8947025511952160084, %105
  %3579 = or i64 %3577, %3578
  %3580 = or i64 %19, 7155900537467780252
  %3581 = and i64 7155900537467780252, %19
  %3582 = xor i64 7155900537467780252, %19
  %3583 = or i64 %3581, %3582
  %3584 = xor i64 -9132385558826175703, %3575
  %3585 = xor i64 %3584, %3583
  %3586 = xor i64 %3585, %3576
  %3587 = xor i64 %3586, %3572
  %3588 = xor i64 %3587, %3580
  %3589 = xor i64 %3588, %3579
  %3590 = or i64 %95, -7688466772171807972
  %3591 = xor i64 %95, -1
  %3592 = and i64 -7688466772171807972, %3591
  %3593 = add i64 %3592, %95
  %3594 = add i64 %196, 584190122209139539
  %3595 = sub i64 0, %196
  %3596 = sub i64 584190122209139539, %3595
  %3597 = xor i64 %3594, 0
  %3598 = xor i64 %3597, %3593
  %3599 = xor i64 %3598, %3596
  %3600 = xor i64 %3599, %3590
  %3601 = mul i64 %3589, %3600
  %3602 = trunc i64 %3601 to i8
  %3603 = icmp eq i8 %3571, %3602
  %3604 = and i1 %3567, %3603
  %3605 = select i1 %3604, i32 388314419, i32 388314410
  %3606 = xor i32 %3605, -1
  %3607 = and i32 %3606, 25
  %3608 = and i32 %3605, -26
  %3609 = or i32 %3607, %3608
  store i32 %3609, i32* %4, align 4
  %3610 = call i8** @bf10863455059032886292(i32* %4)
  %3611 = load i8*, i8** %3610, align 8
  indirectbr i8* %3611, [label %loopEnd, label %codeRepl53]

3612:                                             ; preds = %3612, %loopStart
  %3613 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 36
  %3614 = load i32, i32* %3613, align 4
  %3615 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %3616 = load i32, i32* %3615, align 4
  %3617 = srem i32 %3614, %3616
  store i32 %3617, i32* %dispatcher, align 4
  %3618 = load i8*, i8** %48, align 8
  %3619 = load i8, i8* %3618, align 1
  %3620 = mul i8 %3619, 2
  %3621 = mul i8 %3619, 2
  %3622 = add i8 2, %3621
  %3623 = mul i8 %3620, %3622
  %3624 = srem i8 %3623, 4
  %3625 = icmp eq i8 %3624, 0
  %3626 = mul i8 %3619, %3619
  %3627 = mul i8 %3626, %3619
  %3628 = add i8 %3627, %3619
  %3629 = srem i8 %3628, 2
  %3630 = add i64 %69, 1456125292791492851
  %3631 = sub i64 0, %69
  %3632 = sub i64 1456125292791492851, %3631
  %3633 = and i64 %39, 1295319713026963506
  %3634 = xor i64 %39, -1
  %3635 = or i64 -1295319713026963507, %3634
  %3636 = xor i64 %3635, -1
  %3637 = and i64 %3636, -1
  %3638 = or i64 %103, 1378167423298111775
  %3639 = xor i64 %103, -1
  %3640 = and i64 %3639, -695830341690225391
  %3641 = and i64 %103, 695830341690225390
  %3642 = or i64 %3640, %3641
  %3643 = xor i64 -1911828595443071986, %3642
  %3644 = xor i64 %103, -1
  %3645 = or i64 -1378167423298111776, %3644
  %3646 = xor i64 %3645, -1
  %3647 = and i64 %3646, -1
  %3648 = or i64 %3643, %3647
  %3649 = xor i64 %3637, %3630
  %3650 = xor i64 %3649, %3648
  %3651 = xor i64 %3650, %3638
  %3652 = xor i64 %3651, -7995187961235437065
  %3653 = xor i64 %3652, %3633
  %3654 = xor i64 %3653, %3632
  %3655 = and i64 %73, -1851524649196287912
  %3656 = xor i64 %73, -1
  %3657 = or i64 1851524649196287911, %3656
  %3658 = xor i64 %3657, -1
  %3659 = and i64 %3658, -1
  %3660 = or i64 %15, 3343559697909313779
  %3661 = and i64 3343559697909313779, %15
  %3662 = xor i64 3343559697909313779, %15
  %3663 = or i64 %3661, %3662
  %3664 = or i64 %196, 3561310706526965076
  %3665 = xor i64 %196, -1
  %3666 = and i64 %3665, -2068185726420497325
  %3667 = and i64 %196, 2068185726420497324
  %3668 = or i64 %3666, %3667
  %3669 = xor i64 -3305636413873487609, %3668
  %3670 = xor i64 %196, -1
  %3671 = or i64 -3561310706526965077, %3670
  %3672 = xor i64 %3671, -1
  %3673 = and i64 %3672, -1
  %3674 = or i64 %3669, %3673
  %3675 = xor i64 %3655, %3660
  %3676 = xor i64 %3675, %3674
  %3677 = xor i64 %3676, %3664
  %3678 = xor i64 %3677, %3659
  %3679 = xor i64 %3678, 0
  %3680 = xor i64 %3679, %3663
  %3681 = mul i64 %3654, %3680
  %3682 = trunc i64 %3681 to i8
  %3683 = icmp eq i8 %3629, %3682
  %3684 = and i1 %3625, %3683
  %3685 = select i1 %3684, i32 388314402, i32 388314410
  %3686 = xor i32 %3685, 8
  store i32 %3686, i32* %4, align 4
  %3687 = call i8** @bf10863455059032886292(i32* %4)
  %3688 = load i8*, i8** %3687, align 8
  indirectbr i8* %3688, [label %loopEnd, label %3612]

3689:                                             ; preds = %3689, %loopStart
  %3690 = mul i64 45, 97
  %3691 = and i64 %75, -162224248535528469
  %3692 = or i64 162224248535528468, %75
  %3693 = sub i64 %3692, 162224248535528468
  %3694 = add i64 %61, 7755598707949035528
  %3695 = sub i64 0, %61
  %3696 = sub i64 7755598707949035528, %3695
  %3697 = xor i64 %3696, %3691
  %3698 = xor i64 %3697, %3693
  %3699 = xor i64 %3698, -6839877565416632117
  %3700 = xor i64 %3699, %3694
  %3701 = and i64 %23, -6527121125469918650
  %3702 = xor i64 %23, -1
  %3703 = or i64 6527121125469918649, %3702
  %3704 = xor i64 %3703, -1
  %3705 = and i64 %3704, -1
  %3706 = add i64 %202, 3827022165558839656
  %3707 = add i64 8473876815801829638, %202
  %3708 = add i64 %3707, -4646854650242989982
  %3709 = xor i64 %3705, %3708
  %3710 = xor i64 %3709, %3701
  %3711 = xor i64 %3710, -7011711706876114873
  %3712 = xor i64 %3711, %3706
  %3713 = mul i64 %3700, %3712
  %3714 = sdiv i64 3, %3713
  %3715 = sub i64 93, 35
  %3716 = sdiv i64 125, 29
  %3717 = add i64 120, 50
  %.reload126 = load i32, i32* %.reg2mem124, align 4
  %3718 = srem i32 %.reload126, 2
  %3719 = icmp eq i32 %3718, 0
  %.reload25 = load i32, i32* %.reg2mem, align 4
  %3720 = mul i32 %.reload25, 2
  %.reload24 = load i32, i32* %.reg2mem, align 4
  %3721 = mul i32 %.reload24, 2
  %3722 = add i32 2, %3721
  %3723 = mul i32 %3720, %3722
  %3724 = srem i32 %3723, 4
  %3725 = icmp eq i32 %3724, 0
  %.reload23 = load i32, i32* %.reg2mem, align 4
  %3726 = mul i32 %.reload23, %.reload23
  %.reload22 = load i32, i32* %.reg2mem, align 4
  %3727 = add i32 %3726, %.reload22
  %3728 = srem i32 %3727, 2
  %3729 = icmp eq i32 %3728, 0
  %3730 = or i1 %3725, %3729
  store i1 %3730, i1* %.reg2mem109, align 1
  %3731 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 19
  %3732 = load i32, i32* %3731, align 4
  %3733 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 18
  %3734 = load i32, i32* %3733, align 4
  %3735 = add i32 %3732, %3734
  %3736 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 30
  %3737 = load i32, i32* %3736, align 4
  %3738 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %3739 = load i32, i32* %3738, align 4
  %3740 = sub i32 %3737, %3739
  %.reload111 = load i1, i1* %.reg2mem109, align 1
  %3741 = select i1 %.reload111, i32 %3735, i32 %3740
  store i32 %3741, i32* %dispatcher, align 4
  %3742 = load i8*, i8** %76, align 8
  %3743 = load i8, i8* %3742, align 1
  %3744 = mul i8 %3743, 2
  %3745 = mul i8 %3743, 2
  %3746 = add i8 2, %3745
  %3747 = mul i8 %3744, %3746
  %3748 = or i64 %63, 4181008745210055741
  %3749 = and i64 4181008745210055741, %63
  %3750 = xor i64 4181008745210055741, %63
  %3751 = or i64 %3749, %3750
  %3752 = and i64 %21, -5599362394506979968
  %3753 = xor i64 %21, -1
  %3754 = xor i64 -5599362394506979968, %3753
  %3755 = and i64 %3754, -5599362394506979968
  %3756 = and i64 %77, -1508821612843058548
  %3757 = xor i64 %77, -1
  %3758 = xor i64 -1508821612843058548, %3757
  %3759 = and i64 %3758, -1508821612843058548
  %3760 = xor i64 %3752, -7751138838408343073
  %3761 = xor i64 %3760, %3759
  %3762 = xor i64 %3761, %3748
  %3763 = xor i64 %3762, %3755
  %3764 = xor i64 %3763, %3756
  %3765 = xor i64 %3764, %3751
  %3766 = add i64 %7, -112156246576293866
  %3767 = and i64 -112156246576293866, %7
  %3768 = or i64 -112156246576293866, %7
  %3769 = add i64 %3767, %3768
  %3770 = or i64 %61, 895808362788273235
  %3771 = xor i64 %61, -1
  %3772 = and i64 %3771, -6404105903627656232
  %3773 = and i64 %61, 6404105903627656231
  %3774 = or i64 %3772, %3773
  %3775 = xor i64 -6102791556297973877, %3774
  %3776 = xor i64 %61, -1
  %3777 = or i64 -895808362788273236, %3776
  %3778 = xor i64 %3777, -1
  %3779 = and i64 %3778, -1
  %3780 = or i64 %3775, %3779
  %3781 = and i64 %190, -5337962100368933960
  %3782 = xor i64 %190, -1
  %3783 = or i64 5337962100368933959, %3782
  %3784 = xor i64 %3783, -1
  %3785 = and i64 %3784, -1
  %3786 = xor i64 7311558045713344636, %3770
  %3787 = xor i64 %3786, %3780
  %3788 = xor i64 %3787, %3785
  %3789 = xor i64 %3788, %3781
  %3790 = xor i64 %3789, %3769
  %3791 = xor i64 %3790, %3766
  %3792 = mul i64 %3765, %3791
  %3793 = trunc i64 %3792 to i8
  %3794 = srem i8 %3747, %3793
  %3795 = icmp eq i8 %3794, 0
  %3796 = mul i8 %3743, %3743
  %3797 = xor i8 %3796, %3743
  %3798 = and i8 %3796, %3743
  %3799 = mul i8 2, %3798
  %3800 = add i8 %3797, %3799
  %3801 = or i64 %55, 2318981851940053695
  %3802 = xor i64 %55, -1
  %3803 = and i64 %3802, -8753896396690308347
  %3804 = and i64 %55, 8753896396690308346
  %3805 = or i64 %3803, %3804
  %3806 = xor i64 -6436413326745067078, %3805
  %3807 = xor i64 %55, -1
  %3808 = or i64 -2318981851940053696, %3807
  %3809 = xor i64 %3808, -1
  %3810 = and i64 %3809, -1
  %3811 = or i64 %3806, %3810
  %3812 = or i64 %49, 5099401772076721014
  %3813 = xor i64 %49, -1
  %3814 = and i64 5099401772076721014, %3813
  %3815 = add i64 %3814, %49
  %3816 = add i64 %196, 880787571356297464
  %3817 = sub i64 0, %196
  %3818 = sub i64 880787571356297464, %3817
  %3819 = xor i64 %3816, %3801
  %3820 = xor i64 %3819, %3811
  %3821 = xor i64 %3820, %3818
  %3822 = xor i64 %3821, %3815
  %3823 = xor i64 %3822, 6394033412529635831
  %3824 = xor i64 %3823, %3812
  %3825 = add i64 %53, 390671388777313801
  %3826 = sub i64 0, %53
  %3827 = add i64 -390671388777313801, %3826
  %3828 = sub i64 0, %3827
  %3829 = and i64 %99, 5883322270934320449
  %3830 = xor i64 %99, -1
  %3831 = or i64 -5883322270934320450, %3830
  %3832 = xor i64 %3831, -1
  %3833 = and i64 %3832, -1
  %3834 = xor i64 -6395755176272552050, %3828
  %3835 = xor i64 %3834, %3833
  %3836 = xor i64 %3835, %3829
  %3837 = xor i64 %3836, %3825
  %3838 = mul i64 %3824, %3837
  %3839 = trunc i64 %3838 to i8
  %3840 = srem i8 %3800, %3839
  %3841 = icmp eq i8 %3840, 0
  %3842 = or i1 %3795, %3841
  %3843 = select i1 %3842, i32 388314428, i32 388314410
  %3844 = xor i32 %3843, 22
  store i32 %3844, i32* %4, align 4
  %3845 = call i8** @bf10863455059032886292(i32* %4)
  %3846 = load i8*, i8** %3845, align 8
  indirectbr i8* %3846, [label %loopEnd, label %3689]

3847:                                             ; preds = %3847, %loopStart
  %3848 = sdiv i64 82, 106
  %3849 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 20
  %3850 = load i32, i32* %3849, align 4
  %3851 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 18
  %3852 = load i32, i32* %3851, align 4
  %3853 = add i32 %3850, %3852
  %3854 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %3855 = load i32, i32* %3854, align 4
  %3856 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 16
  %3857 = load i32, i32* %3856, align 4
  %3858 = add i32 %3855, %3857
  %.reload110 = load i1, i1* %.reg2mem109, align 1
  %3859 = select i1 %.reload110, i32 %3853, i32 %3858
  store i32 %3859, i32* %dispatcher, align 4
  %3860 = load i8*, i8** %14, align 8
  %3861 = load i8, i8* %3860, align 1
  %3862 = mul i8 %3861, 2
  %3863 = mul i8 %3861, 2
  %3864 = and i64 %119, -5633674288856570978
  %3865 = xor i64 %119, -1
  %3866 = or i64 5633674288856570977, %3865
  %3867 = xor i64 %3866, -1
  %3868 = and i64 %3867, -1
  %3869 = or i64 %117, -4943939233721319647
  %3870 = and i64 -4943939233721319647, %117
  %3871 = xor i64 -4943939233721319647, %117
  %3872 = or i64 %3870, %3871
  %3873 = or i64 %63, 1670409681058260670
  %3874 = xor i64 %63, -1
  %3875 = and i64 1670409681058260670, %3874
  %3876 = add i64 %3875, %63
  %3877 = xor i64 -6698716915293755447, %3872
  %3878 = xor i64 %3877, %3868
  %3879 = xor i64 %3878, %3873
  %3880 = xor i64 %3879, %3864
  %3881 = xor i64 %3880, %3869
  %3882 = xor i64 %3881, %3876
  %3883 = and i64 %29, 8095458496073255671
  %3884 = or i64 -8095458496073255672, %29
  %3885 = sub i64 %3884, -8095458496073255672
  %3886 = add i64 %109, 4851485307974844480
  %3887 = sub i64 0, %109
  %3888 = sub i64 4851485307974844480, %3887
  %3889 = add i64 %202, 153995611673321986
  %3890 = xor i64 153995611673321986, %202
  %3891 = and i64 153995611673321986, %202
  %3892 = mul i64 2, %3891
  %3893 = add i64 %3890, %3892
  %3894 = xor i64 7848008129690322162, %3889
  %3895 = xor i64 %3894, %3885
  %3896 = xor i64 %3895, %3893
  %3897 = xor i64 %3896, %3886
  %3898 = xor i64 %3897, %3888
  %3899 = xor i64 %3898, %3883
  %3900 = mul i64 %3882, %3899
  %3901 = trunc i64 %3900 to i8
  %3902 = add i8 %3901, %3863
  %3903 = mul i8 %3862, %3902
  %3904 = srem i8 %3903, 4
  %3905 = icmp eq i8 %3904, 0
  %3906 = mul i8 %3861, %3861
  %3907 = sub i8 0, %3861
  %3908 = sub i8 %3906, %3907
  %3909 = srem i8 %3908, 2
  %3910 = icmp eq i8 %3909, 0
  %3911 = or i1 %3905, %3910
  %3912 = and i64 %29, 3409706600217363477
  %3913 = xor i64 %29, -1
  %3914 = xor i64 3409706600217363477, %3913
  %3915 = and i64 %3914, 3409706600217363477
  %3916 = or i64 %11, -2134756573438693371
  %3917 = xor i64 %11, -1
  %3918 = and i64 -2134756573438693371, %3917
  %3919 = add i64 %3918, %11
  %3920 = add i64 %43, 7822620792912927596
  %3921 = sub i64 0, %43
  %3922 = add i64 -7822620792912927596, %3921
  %3923 = sub i64 0, %3922
  %3924 = xor i64 %3919, %3923
  %3925 = xor i64 %3924, %3916
  %3926 = xor i64 %3925, %3920
  %3927 = xor i64 %3926, %3915
  %3928 = xor i64 %3927, %3912
  %3929 = xor i64 %3928, 9045320835766318729
  %3930 = add i64 %194, -9048382744420580515
  %3931 = and i64 -9048382744420580515, %194
  %3932 = or i64 -9048382744420580515, %194
  %3933 = add i64 %3931, %3932
  %3934 = or i64 %89, -196361359019098116
  %3935 = xor i64 %89, -1
  %3936 = and i64 %3935, -4129563199817410164
  %3937 = and i64 %89, 4129563199817410163
  %3938 = or i64 %3936, %3937
  %3939 = xor i64 4320845694959494768, %3938
  %3940 = xor i64 %89, -1
  %3941 = or i64 196361359019098115, %3940
  %3942 = xor i64 %3941, -1
  %3943 = and i64 %3942, -1
  %3944 = or i64 %3939, %3943
  %3945 = and i64 %119, 2655595141939509655
  %3946 = xor i64 %119, -1
  %3947 = xor i64 2655595141939509655, %3946
  %3948 = and i64 %3947, 2655595141939509655
  %3949 = xor i64 %3930, 933444805616795994
  %3950 = xor i64 %3949, %3933
  %3951 = xor i64 %3950, %3944
  %3952 = xor i64 %3951, %3945
  %3953 = xor i64 %3952, %3934
  %3954 = xor i64 %3953, %3948
  %3955 = mul i64 %3929, %3954
  %3956 = trunc i64 %3955 to i32
  %3957 = select i1 %3911, i32 388314380, i32 %3956
  %3958 = xor i32 %3957, -1
  %3959 = and i32 %3958, -1368249374
  %3960 = and i32 %3957, 1368249373
  %3961 = or i32 %3959, %3960
  %3962 = xor i32 %3961, -1368249404
  store i32 %3962, i32* %4, align 4
  %3963 = call i8** @bf10863455059032886292(i32* %4)
  %3964 = load i8*, i8** %3963, align 8
  indirectbr i8* %3964, [label %loopEnd, label %3847]

3965:                                             ; preds = %3965, %loopStart
  %3966 = sdiv i64 82, 106
  %3967 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 35
  %3968 = load i32, i32* %3967, align 4
  %3969 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %3970 = load i32, i32* %3969, align 4
  %3971 = srem i32 %3968, %3970
  store i32 %3971, i32* %dispatcher, align 4
  %3972 = load i8*, i8** %64, align 8
  %3973 = load i8, i8* %3972, align 1
  %3974 = mul i8 %3973, %3973
  %3975 = add i8 %3974, %3973
  %3976 = mul i8 %3975, 3
  %3977 = add i64 %71, -4722337676363071695
  %3978 = sub i64 0, %71
  %3979 = add i64 4722337676363071695, %3978
  %3980 = sub i64 0, %3979
  %3981 = and i64 %51, -85166999355853951
  %3982 = xor i64 %51, -1
  %3983 = or i64 85166999355853950, %3982
  %3984 = xor i64 %3983, -1
  %3985 = and i64 %3984, -1
  %3986 = add i64 %194, -5007654625330096854
  %3987 = and i64 -5007654625330096854, %194
  %3988 = or i64 -5007654625330096854, %194
  %3989 = add i64 %3987, %3988
  %3990 = xor i64 %3980, %3985
  %3991 = xor i64 %3990, 2845230323541066073
  %3992 = xor i64 %3991, %3977
  %3993 = xor i64 %3992, %3981
  %3994 = xor i64 %3993, %3986
  %3995 = xor i64 %3994, %3989
  %3996 = or i64 %115, 8591548866457398323
  %3997 = xor i64 %115, -1
  %3998 = and i64 8591548866457398323, %3997
  %3999 = add i64 %3998, %115
  %4000 = and i64 %105, -8481542901466272024
  %4001 = or i64 8481542901466272023, %105
  %4002 = sub i64 %4001, 8481542901466272023
  %4003 = xor i64 %3996, %4000
  %4004 = xor i64 %4003, 6341732620625833426
  %4005 = xor i64 %4004, %3999
  %4006 = xor i64 %4005, %4002
  %4007 = mul i64 %3995, %4006
  %4008 = trunc i64 %4007 to i8
  %4009 = srem i8 %3976, %4008
  %4010 = icmp eq i8 %4009, 0
  %4011 = mul i8 %3973, %3973
  %4012 = add i8 %4011, %3973
  %4013 = srem i8 %4012, 2
  %4014 = icmp eq i8 %4013, 0
  %4015 = xor i1 %4010, true
  %4016 = or i1 %4015, %4014
  %4017 = xor i1 %4010, true
  %4018 = sub i1 %4016, %4017
  %4019 = or i64 %190, 2682481356092550173
  %4020 = and i64 2682481356092550173, %190
  %4021 = xor i64 2682481356092550173, %190
  %4022 = or i64 %4020, %4021
  %4023 = or i64 %27, 6531944803457058091
  %4024 = xor i64 %27, -1
  %4025 = and i64 6531944803457058091, %4024
  %4026 = add i64 %4025, %27
  %4027 = xor i64 %4023, %4019
  %4028 = xor i64 %4027, %4022
  %4029 = xor i64 %4028, %4026
  %4030 = xor i64 %4029, 3354799561313478237
  %4031 = and i64 %186, -7029692494694958380
  %4032 = xor i64 %186, -1
  %4033 = or i64 7029692494694958379, %4032
  %4034 = xor i64 %4033, -1
  %4035 = and i64 %4034, -1
  %4036 = add i64 %61, -5921336427943089755
  %4037 = sub i64 0, %61
  %4038 = add i64 5921336427943089755, %4037
  %4039 = sub i64 0, %4038
  %4040 = xor i64 -5318149986453492551, %4039
  %4041 = xor i64 %4040, %4036
  %4042 = xor i64 %4041, %4035
  %4043 = xor i64 %4042, %4031
  %4044 = mul i64 %4030, %4043
  %4045 = trunc i64 %4044 to i32
  %4046 = select i1 %4018, i32 %4045, i32 388314410
  %4047 = xor i32 %4046, 31
  store i32 %4047, i32* %4, align 4
  %4048 = call i8** @bf10863455059032886292(i32* %4)
  %4049 = load i8*, i8** %4048, align 8
  indirectbr i8* %4049, [label %loopEnd, label %3965]

4050:                                             ; preds = %4050, %loopStart
  %4051 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 47
  %4052 = load i32, i32* %4051, align 4
  %4053 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 14
  %4054 = load i32, i32* %4053, align 4
  %4055 = sub i32 %4052, %4054
  store i32 %4055, i32* %dispatcher, align 4
  %4056 = load i8*, i8** %82, align 8
  %4057 = load i8, i8* %4056, align 1
  %4058 = mul i8 %4057, 2
  %4059 = mul i8 %4057, 2
  %4060 = add i8 2, %4059
  %4061 = mul i8 %4058, %4060
  %4062 = srem i8 %4061, 4
  %4063 = icmp eq i8 %4062, 0
  %4064 = mul i8 %4057, %4057
  %4065 = add i8 %4064, %4057
  %4066 = srem i8 %4065, 2
  %4067 = icmp eq i8 %4066, 0
  %4068 = and i1 %4063, %4067
  %4069 = select i1 %4068, i32 388314370, i32 388314410
  %4070 = add i64 %53, 7444861854310766224
  %4071 = sub i64 0, %53
  %4072 = sub i64 7444861854310766224, %4071
  %4073 = and i64 %196, 6098780507286333178
  %4074 = xor i64 %196, -1
  %4075 = or i64 -6098780507286333179, %4074
  %4076 = xor i64 %4075, -1
  %4077 = and i64 %4076, -1
  %4078 = xor i64 %4077, %4072
  %4079 = xor i64 %4078, 9072921415068024597
  %4080 = xor i64 %4079, %4070
  %4081 = xor i64 %4080, %4073
  %4082 = add i64 %83, -8862124422904889734
  %4083 = add i64 -7546422296001183411, %83
  %4084 = sub i64 %4083, 1315702126903706323
  %4085 = and i64 %29, -3111713936236957681
  %4086 = xor i64 %29, -1
  %4087 = or i64 3111713936236957680, %4086
  %4088 = xor i64 %4087, -1
  %4089 = and i64 %4088, -1
  %4090 = xor i64 -609271975629174392, %4082
  %4091 = xor i64 %4090, %4084
  %4092 = xor i64 %4091, %4089
  %4093 = xor i64 %4092, %4085
  %4094 = mul i64 %4081, %4093
  %4095 = trunc i64 %4094 to i32
  %4096 = xor i32 %4069, %4095
  store i32 %4096, i32* %4, align 4
  %4097 = call i8** @bf10863455059032886292(i32* %4)
  %4098 = load i8*, i8** %4097, align 8
  indirectbr i8* %4098, [label %loopEnd, label %4050]

4099:                                             ; preds = %4099, %loopStart
  %4100 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 37
  %4101 = load i32, i32* %4100, align 4
  %4102 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %4103 = load i32, i32* %4102, align 4
  %4104 = srem i32 %4101, %4103
  %4105 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 37
  %4106 = load i32, i32* %4105, align 4
  %4107 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %4108 = load i32, i32* %4107, align 4
  %4109 = sub i32 %4106, %4108
  %.reload58.reload = load i1, i1* %.reload58.reg2mem, align 1
  %4110 = select i1 %.reload58.reload, i32 %4104, i32 %4109
  store i32 %4110, i32* %dispatcher, align 4
  %.reload57.reload = load i32, i32* %.reload57.reg2mem, align 4
  %.reload57.reload108 = load i32, i32* %.reload57.reg2mem, align 4
  %.reload132 = load double, double* %.reg2mem130, align 8
  store i32 %.reload57.reload108, i32* %.reg2mem156, align 4
  store double %.reload132, double* %.reg2mem158, align 8
  store i32 %.reload57.reload, i32* %.ph.reg2mem160, align 4
  %4111 = load i8*, i8** %32, align 8
  %4112 = load i8, i8* %4111, align 1
  %4113 = mul i8 %4112, 2
  %4114 = mul i8 %4112, 2
  %4115 = add i8 15, %4114
  %4116 = sub i8 %4115, 13
  %4117 = mul i8 %4113, %4116
  %4118 = srem i8 %4117, 4
  %4119 = icmp eq i8 %4118, 0
  %4120 = mul i8 %4112, %4112
  %4121 = add i8 %4120, %4112
  %4122 = srem i8 %4121, 2
  %4123 = icmp eq i8 %4122, 0
  %4124 = or i1 %4119, %4123
  %4125 = select i1 %4124, i32 388314400, i32 388314410
  %4126 = xor i32 %4125, 10
  store i32 %4126, i32* %4, align 4
  %4127 = call i8** @bf10863455059032886292(i32* %4)
  %4128 = load i8*, i8** %4127, align 8
  indirectbr i8* %4128, [label %loopEnd, label %4099]

4129:                                             ; preds = %4129, %loopStart
  %.reload159 = load double, double* %.reg2mem158, align 8
  %.reload157 = load i32, i32* %.reg2mem156, align 4
  store double %.reload159, double* %.reg2mem114, align 8
  store i32 %.reload157, i32* %.reg2mem112, align 4
  %.reload13 = load i32, i32* %.reg2mem, align 4
  %4130 = mul i32 %.reload13, 2
  %.reload12 = load i32, i32* %.reg2mem, align 4
  %4131 = mul i32 %.reload12, 2
  store i32 %4131, i32* %.reg2mem116, align 4
  %.reload118 = load i32, i32* %.reg2mem116, align 4
  %4132 = add i32 2, %.reload118
  store i32 %4132, i32* %.reg2mem119, align 4
  %.reload123 = load i32, i32* %.reg2mem119, align 4
  %4133 = mul i32 %4130, %.reload123
  %4134 = srem i32 %4133, 4
  %4135 = and i64 %25, -2956325269421659604
  %4136 = xor i64 %25, -1
  %4137 = xor i64 -2956325269421659604, %4136
  %4138 = and i64 %4137, -2956325269421659604
  %4139 = add i64 %29, -5011951868003104534
  %4140 = add i64 -5187516662912781346, %29
  %4141 = sub i64 %4140, -175564794909676812
  %4142 = xor i64 %4141, %4138
  %4143 = xor i64 %4142, %4135
  %4144 = xor i64 %4143, 8559333146962037053
  %4145 = xor i64 %4144, %4139
  %4146 = or i64 %31, -7067727935910139845
  %4147 = and i64 -7067727935910139845, %31
  %4148 = xor i64 -7067727935910139845, %31
  %4149 = or i64 %4147, %4148
  %4150 = and i64 %9, 8731274300560147115
  %4151 = xor i64 %9, -1
  %4152 = xor i64 8731274300560147115, %4151
  %4153 = and i64 %4152, 8731274300560147115
  %4154 = xor i64 %4150, %4146
  %4155 = xor i64 %4154, %4153
  %4156 = xor i64 %4155, %4149
  %4157 = xor i64 %4156, 0
  %4158 = mul i64 %4145, %4157
  %4159 = trunc i64 %4158 to i32
  %4160 = icmp eq i32 %4134, %4159
  %.reload11 = load i32, i32* %.reg2mem, align 4
  %4161 = mul i32 %.reload11, %.reload11
  store i32 %4161, i32* %.reg2mem124, align 4
  %.reload10 = load i32, i32* %.reg2mem, align 4
  %.reload125 = load i32, i32* %.reg2mem124, align 4
  %4162 = add i32 %.reload125, %.reload10
  %4163 = srem i32 %4162, 2
  %4164 = icmp eq i32 %4163, 0
  %4165 = and i1 %4160, %4164
  %4166 = xor i1 %4160, %4164
  %4167 = or i1 %4165, %4166
  %4168 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 39
  %4169 = load i32, i32* %4168, align 4
  %4170 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %4171 = load i32, i32* %4170, align 4
  %4172 = srem i32 %4169, %4171
  %4173 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 21
  %4174 = load i32, i32* %4173, align 4
  %4175 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 20
  %4176 = load i32, i32* %4175, align 4
  %4177 = and i32 %4174, %4176
  %4178 = or i32 %4174, %4176
  %4179 = add i32 %4177, %4178
  %4180 = select i1 %4167, i32 %4172, i32 %4179
  store i32 %4180, i32* %dispatcher, align 4
  %4181 = load i8*, i8** %50, align 8
  %4182 = load i8, i8* %4181, align 1
  %4183 = and i8 %4182, 1
  %4184 = add i64 %79, 5645452542573206955
  %4185 = xor i64 5645452542573206955, %79
  %4186 = and i64 5645452542573206955, %79
  %4187 = mul i64 2, %4186
  %4188 = add i64 %4185, %4187
  %4189 = and i64 %99, 6141717866410289521
  %4190 = or i64 -6141717866410289522, %99
  %4191 = sub i64 %4190, -6141717866410289522
  %4192 = xor i64 %4191, %4189
  %4193 = xor i64 %4192, %4184
  %4194 = xor i64 %4193, -6777145533472611677
  %4195 = xor i64 %4194, %4188
  %4196 = or i64 %71, 3251708651433251845
  %4197 = xor i64 %71, -1
  %4198 = and i64 3251708651433251845, %4197
  %4199 = add i64 %4198, %71
  %4200 = add i64 %95, -2119866699743774879
  %4201 = and i64 -2119866699743774879, %95
  %4202 = or i64 -2119866699743774879, %95
  %4203 = add i64 %4201, %4202
  %4204 = add i64 %184, -1400953597181953932
  %4205 = and i64 -1400953597181953932, %184
  %4206 = or i64 -1400953597181953932, %184
  %4207 = add i64 %4205, %4206
  %4208 = xor i64 -3542723560887852789, %4203
  %4209 = xor i64 %4208, %4207
  %4210 = xor i64 %4209, %4199
  %4211 = xor i64 %4210, %4196
  %4212 = xor i64 %4211, %4200
  %4213 = xor i64 %4212, %4204
  %4214 = mul i64 %4195, %4213
  %4215 = trunc i64 %4214 to i8
  %4216 = icmp eq i8 %4183, %4215
  %4217 = mul i8 %4182, %4182
  %4218 = add i8 %4217, 42
  %4219 = add i8 %4218, %4182
  %4220 = sub i8 %4219, 42
  %4221 = srem i8 %4220, 2
  %4222 = add i64 %103, 7571526966803740527
  %4223 = and i64 7571526966803740527, %103
  %4224 = or i64 7571526966803740527, %103
  %4225 = add i64 %4223, %4224
  %4226 = add i64 %29, 4596241237080031351
  %4227 = add i64 -8101016822933674842, %29
  %4228 = add i64 %4227, -5749486013695845423
  %4229 = xor i64 %4225, -1423162358353146711
  %4230 = xor i64 %4229, %4226
  %4231 = xor i64 %4230, %4228
  %4232 = xor i64 %4231, %4222
  %4233 = or i64 %200, -484963675817715679
  %4234 = xor i64 %200, -1
  %4235 = and i64 %4234, 875553096746225644
  %4236 = and i64 %200, -875553096746225645
  %4237 = or i64 %4235, %4236
  %4238 = xor i64 -764619094222202931, %4237
  %4239 = xor i64 %200, -1
  %4240 = or i64 484963675817715678, %4239
  %4241 = xor i64 %4240, -1
  %4242 = and i64 %4241, -1
  %4243 = or i64 %4238, %4242
  %4244 = or i64 %59, -8439206414033364654
  %4245 = xor i64 %59, -1
  %4246 = and i64 -8439206414033364654, %4245
  %4247 = add i64 %4246, %59
  %4248 = add i64 %85, -6854085191927170743
  %4249 = xor i64 -6854085191927170743, %85
  %4250 = and i64 -6854085191927170743, %85
  %4251 = mul i64 2, %4250
  %4252 = add i64 %4249, %4251
  %4253 = xor i64 %4233, %4252
  %4254 = xor i64 %4253, %4244
  %4255 = xor i64 %4254, %4248
  %4256 = xor i64 %4255, %4247
  %4257 = xor i64 %4256, %4243
  %4258 = xor i64 %4257, 0
  %4259 = mul i64 %4232, %4258
  %4260 = trunc i64 %4259 to i8
  %4261 = icmp eq i8 %4221, %4260
  %4262 = or i1 %4216, %4261
  %4263 = add i64 %109, 3864212209878163493
  %4264 = and i64 3864212209878163493, %109
  %4265 = or i64 3864212209878163493, %109
  %4266 = add i64 %4264, %4265
  %4267 = or i64 %87, 6024871160784595629
  %4268 = xor i64 %87, -1
  %4269 = and i64 6024871160784595629, %4268
  %4270 = add i64 %4269, %87
  %4271 = add i64 %33, -1013851782957041253
  %4272 = sub i64 0, %33
  %4273 = add i64 1013851782957041253, %4272
  %4274 = sub i64 0, %4273
  %4275 = xor i64 8293415441526860757, %4270
  %4276 = xor i64 %4275, %4274
  %4277 = xor i64 %4276, %4267
  %4278 = xor i64 %4277, %4263
  %4279 = xor i64 %4278, %4266
  %4280 = xor i64 %4279, %4271
  %4281 = add i64 %19, 5299128502423589489
  %4282 = xor i64 5299128502423589489, %19
  %4283 = and i64 5299128502423589489, %19
  %4284 = mul i64 2, %4283
  %4285 = add i64 %4282, %4284
  %4286 = and i64 %25, -6964434223427615976
  %4287 = xor i64 %25, -1
  %4288 = or i64 6964434223427615975, %4287
  %4289 = xor i64 %4288, -1
  %4290 = and i64 %4289, -1
  %4291 = xor i64 %4281, 613984603774560130
  %4292 = xor i64 %4291, %4286
  %4293 = xor i64 %4292, %4290
  %4294 = xor i64 %4293, %4285
  %4295 = mul i64 %4280, %4294
  %4296 = trunc i64 %4295 to i32
  %4297 = or i64 %11, 436291471968718127
  %4298 = and i64 436291471968718127, %11
  %4299 = xor i64 436291471968718127, %11
  %4300 = or i64 %4298, %4299
  %4301 = add i64 %9, -9065849507976430951
  %4302 = xor i64 -9065849507976430951, %9
  %4303 = and i64 -9065849507976430951, %9
  %4304 = mul i64 2, %4303
  %4305 = add i64 %4302, %4304
  %4306 = add i64 %97, 6131728458202334134
  %4307 = add i64 6170422170341321115, %97
  %4308 = add i64 %4307, -38693712138986981
  %4309 = xor i64 %4305, %4301
  %4310 = xor i64 %4309, -7511247310353779169
  %4311 = xor i64 %4310, %4308
  %4312 = xor i64 %4311, %4300
  %4313 = xor i64 %4312, %4297
  %4314 = xor i64 %4313, %4306
  %4315 = or i64 %51, -8282185210674754348
  %4316 = xor i64 %51, -1
  %4317 = and i64 %4316, 7046389674496434579
  %4318 = and i64 %51, -7046389674496434580
  %4319 = or i64 %4317, %4318
  %4320 = xor i64 -1385408299877536441, %4319
  %4321 = xor i64 %51, -1
  %4322 = or i64 8282185210674754347, %4321
  %4323 = xor i64 %4322, -1
  %4324 = and i64 %4323, -1
  %4325 = or i64 %4320, %4324
  %4326 = or i64 %53, 8243336143175400571
  %4327 = xor i64 %53, -1
  %4328 = and i64 %4327, -4885307648568565519
  %4329 = and i64 %53, 4885307648568565518
  %4330 = or i64 %4328, %4329
  %4331 = xor i64 -3578725494385156982, %4330
  %4332 = xor i64 %53, -1
  %4333 = or i64 -8243336143175400572, %4332
  %4334 = xor i64 %4333, -1
  %4335 = and i64 %4334, -1
  %4336 = or i64 %4331, %4335
  %4337 = and i64 %91, 4630196673514093468
  %4338 = xor i64 %91, -1
  %4339 = or i64 -4630196673514093469, %4338
  %4340 = xor i64 %4339, -1
  %4341 = and i64 %4340, -1
  %4342 = xor i64 %4337, %4341
  %4343 = xor i64 %4342, %4326
  %4344 = xor i64 %4343, %4325
  %4345 = xor i64 %4344, %4336
  %4346 = xor i64 %4345, %4315
  %4347 = xor i64 %4346, -5007184754934898282
  %4348 = mul i64 %4314, %4347
  %4349 = trunc i64 %4348 to i32
  %4350 = select i1 %4262, i32 %4296, i32 %4349
  %4351 = xor i32 %4350, 0
  store i32 %4351, i32* %4, align 4
  %4352 = call i8** @bf10863455059032886292(i32* %4)
  %4353 = load i8*, i8** %4352, align 8
  indirectbr i8* %4353, [label %loopEnd, label %4129]

4354:                                             ; preds = %4354, %loopStart
  %4355 = add i32 56, 11
  %4356 = sdiv i32 65, 19
  %4357 = mul i32 13, 32
  %4358 = sub i32 18, 87
  %4359 = or i64 %107, 3155407824976974211
  %4360 = and i64 3155407824976974211, %107
  %4361 = xor i64 3155407824976974211, %107
  %4362 = or i64 %4360, %4361
  %4363 = or i64 %119, 8781669707490049838
  %4364 = xor i64 %119, -1
  %4365 = and i64 8781669707490049838, %4364
  %4366 = add i64 %4365, %119
  %4367 = xor i64 %4359, %4363
  %4368 = xor i64 %4367, %4366
  %4369 = xor i64 %4368, 5243155260226960347
  %4370 = xor i64 %4369, %4362
  %4371 = or i64 %23, -5978878417354369579
  %4372 = xor i64 %23, -1
  %4373 = and i64 %4372, -6803262421917271768
  %4374 = and i64 %23, 6803262421917271767
  %4375 = or i64 %4373, %4374
  %4376 = xor i64 906126355573026045, %4375
  %4377 = xor i64 %23, -1
  %4378 = or i64 5978878417354369578, %4377
  %4379 = xor i64 %4378, -1
  %4380 = and i64 %4379, -1
  %4381 = or i64 %4376, %4380
  %4382 = or i64 %51, 1870846062739691875
  %4383 = xor i64 %51, -1
  %4384 = and i64 1870846062739691875, %4383
  %4385 = add i64 %4384, %51
  %4386 = xor i64 %4371, %4381
  %4387 = xor i64 %4386, %4385
  %4388 = xor i64 %4387, %4382
  %4389 = xor i64 %4388, -8526117353765983227
  %4390 = mul i64 %4370, %4389
  %4391 = trunc i64 %4390 to i32
  %4392 = sub i32 345771873, %4391
  %4393 = or i64 %198, 1000565314805229069
  %4394 = xor i64 %198, -1
  %4395 = and i64 1000565314805229069, %4394
  %4396 = add i64 %4395, %198
  %4397 = or i64 %5, -849400159121783207
  %4398 = and i64 -849400159121783207, %5
  %4399 = xor i64 -849400159121783207, %5
  %4400 = or i64 %4398, %4399
  %4401 = xor i64 %4397, %4400
  %4402 = xor i64 %4401, %4393
  %4403 = xor i64 %4402, %4396
  %4404 = xor i64 %4403, -4468687697889761879
  %4405 = add i64 %105, -7603442745187616258
  %4406 = and i64 -7603442745187616258, %105
  %4407 = or i64 -7603442745187616258, %105
  %4408 = add i64 %4406, %4407
  %4409 = add i64 %23, 8615149051385702845
  %4410 = add i64 2905943069037753322, %23
  %4411 = sub i64 %4410, -5709205982347949523
  %4412 = xor i64 %4409, %4408
  %4413 = xor i64 %4412, -3763421259333654976
  %4414 = xor i64 %4413, %4411
  %4415 = xor i64 %4414, %4405
  %4416 = mul i64 %4404, %4415
  %4417 = trunc i64 %4416 to i32
  %4418 = or i64 %113, -4486464899720184820
  %4419 = xor i64 %113, -1
  %4420 = and i64 -4486464899720184820, %4419
  %4421 = add i64 %4420, %113
  %4422 = or i64 %109, -4791258359579916038
  %4423 = and i64 -4791258359579916038, %109
  %4424 = xor i64 -4791258359579916038, %109
  %4425 = or i64 %4423, %4424
  %4426 = xor i64 -5377935443223173999, %4421
  %4427 = xor i64 %4426, %4418
  %4428 = xor i64 %4427, %4425
  %4429 = xor i64 %4428, %4422
  %4430 = and i64 %184, -3879789964786639458
  %4431 = or i64 3879789964786639457, %184
  %4432 = sub i64 %4431, 3879789964786639457
  %4433 = and i64 %113, -2952850360413617820
  %4434 = or i64 2952850360413617819, %113
  %4435 = sub i64 %4434, 2952850360413617819
  %4436 = and i64 %87, 3098030358531050236
  %4437 = xor i64 %87, -1
  %4438 = or i64 -3098030358531050237, %4437
  %4439 = xor i64 %4438, -1
  %4440 = and i64 %4439, -1
  %4441 = xor i64 %4440, %4430
  %4442 = xor i64 %4441, %4435
  %4443 = xor i64 %4442, %4432
  %4444 = xor i64 %4443, 5017409900276438306
  %4445 = xor i64 %4444, %4433
  %4446 = xor i64 %4445, %4436
  %4447 = mul i64 %4429, %4446
  %4448 = trunc i64 %4447 to i32
  %4449 = mul i32 %4417, %4448
  %4450 = sub i32 10, 57
  %4451 = sub i32 50, 31
  %4452 = mul i32 %4450, 114
  %4453 = sub i32 %4449, -106
  %4454 = mul i32 %4356, 42
  %4455 = or i64 %91, 4608016089484223875
  %4456 = xor i64 %91, -1
  %4457 = and i64 4608016089484223875, %4456
  %4458 = add i64 %4457, %91
  %4459 = or i64 %111, 4121262998605181323
  %4460 = xor i64 %111, -1
  %4461 = and i64 4121262998605181323, %4460
  %4462 = add i64 %4461, %111
  %4463 = add i64 %61, -1854340415476084649
  %4464 = add i64 267242148155093520, %61
  %4465 = sub i64 %4464, 2121582563631178169
  %4466 = xor i64 %4455, %4458
  %4467 = xor i64 %4466, %4463
  %4468 = xor i64 %4467, -8387292978429110709
  %4469 = xor i64 %4468, %4465
  %4470 = xor i64 %4469, %4462
  %4471 = xor i64 %4470, %4459
  %4472 = add i64 %115, 2406018869482841982
  %4473 = sub i64 0, %115
  %4474 = add i64 -2406018869482841982, %4473
  %4475 = sub i64 0, %4474
  %4476 = and i64 %89, -4224036440306712040
  %4477 = or i64 4224036440306712039, %89
  %4478 = sub i64 %4477, 4224036440306712039
  %4479 = or i64 %39, 2419440903595949509
  %4480 = xor i64 %39, -1
  %4481 = and i64 %4480, -3114554645186310489
  %4482 = and i64 %39, 3114554645186310488
  %4483 = or i64 %4481, %4482
  %4484 = xor i64 -768578815877024926, %4483
  %4485 = xor i64 %39, -1
  %4486 = or i64 -2419440903595949510, %4485
  %4487 = xor i64 %4486, -1
  %4488 = and i64 %4487, -1
  %4489 = or i64 %4484, %4488
  %4490 = xor i64 %4478, 3209420073537069112
  %4491 = xor i64 %4490, %4476
  %4492 = xor i64 %4491, %4475
  %4493 = xor i64 %4492, %4479
  %4494 = xor i64 %4493, %4489
  %4495 = xor i64 %4494, %4472
  %4496 = mul i64 %4471, %4495
  %4497 = trunc i64 %4496 to i32
  %4498 = sub i32 %4356, %4497
  %4499 = and i64 %29, 6355141642357543492
  %4500 = xor i64 %29, -1
  %4501 = xor i64 6355141642357543492, %4500
  %4502 = and i64 %4501, 6355141642357543492
  %4503 = and i64 %91, -3399401181070826070
  %4504 = xor i64 %91, -1
  %4505 = or i64 3399401181070826069, %4504
  %4506 = xor i64 %4505, -1
  %4507 = and i64 %4506, -1
  %4508 = and i64 %41, -3653283820540244810
  %4509 = xor i64 %41, -1
  %4510 = xor i64 -3653283820540244810, %4509
  %4511 = and i64 %4510, -3653283820540244810
  %4512 = xor i64 %4503, %4499
  %4513 = xor i64 %4512, %4508
  %4514 = xor i64 %4513, %4507
  %4515 = xor i64 %4514, 4461038914148158255
  %4516 = xor i64 %4515, %4502
  %4517 = xor i64 %4516, %4511
  %4518 = and i64 %55, 5492025025182894673
  %4519 = xor i64 %55, -1
  %4520 = xor i64 5492025025182894673, %4519
  %4521 = and i64 %4520, 5492025025182894673
  %4522 = or i64 %184, 3224875136324895907
  %4523 = xor i64 %184, -1
  %4524 = and i64 %4523, -6274834550606204466
  %4525 = and i64 %184, 6274834550606204465
  %4526 = or i64 %4524, %4525
  %4527 = xor i64 -8923247275121674899, %4526
  %4528 = xor i64 %184, -1
  %4529 = or i64 -3224875136324895908, %4528
  %4530 = xor i64 %4529, -1
  %4531 = and i64 %4530, -1
  %4532 = or i64 %4527, %4531
  %4533 = xor i64 %4521, %4522
  %4534 = xor i64 %4533, %4518
  %4535 = xor i64 %4534, %4532
  %4536 = xor i64 %4535, -6505452254950742041
  %4537 = mul i64 %4517, %4536
  %4538 = trunc i64 %4537 to i32
  %4539 = mul i32 %4451, %4538
  %4540 = sub i32 %4450, -1709321466
  %4541 = sub i32 %4540, 74
  %4542 = add i32 %4541, -1709321466
  %4543 = add i32 %4357, 78
  %4544 = sdiv i32 %4355, 84
  %4545 = add i32 %4356, 74
  %4546 = add i32 0, %4452
  %4547 = add i32 %4546, %4453
  %4548 = add i32 %4547, %4454
  %4549 = or i64 %33, 1165219876487097336
  %4550 = xor i64 %33, -1
  %4551 = and i64 %4550, -666575515589900061
  %4552 = and i64 %33, 666575515589900060
  %4553 = or i64 %4551, %4552
  %4554 = xor i64 -1831724436324719845, %4553
  %4555 = xor i64 %33, -1
  %4556 = or i64 -1165219876487097337, %4555
  %4557 = xor i64 %4556, -1
  %4558 = and i64 %4557, -1
  %4559 = or i64 %4554, %4558
  %4560 = and i64 %111, -7889407999738565153
  %4561 = xor i64 %111, -1
  %4562 = xor i64 -7889407999738565153, %4561
  %4563 = and i64 %4562, -7889407999738565153
  %4564 = and i64 %35, -5909553700961044833
  %4565 = or i64 5909553700961044832, %35
  %4566 = sub i64 %4565, 5909553700961044832
  %4567 = xor i64 %4560, %4564
  %4568 = xor i64 %4567, %4559
  %4569 = xor i64 %4568, -3800663963223817129
  %4570 = xor i64 %4569, %4549
  %4571 = xor i64 %4570, %4566
  %4572 = xor i64 %4571, %4563
  %4573 = or i64 %89, -7132480572719365392
  %4574 = xor i64 %89, -1
  %4575 = and i64 -7132480572719365392, %4574
  %4576 = add i64 %4575, %89
  %4577 = and i64 %63, -3433816905739580614
  %4578 = or i64 3433816905739580613, %63
  %4579 = sub i64 %4578, 3433816905739580613
  %4580 = xor i64 %4576, %4579
  %4581 = xor i64 %4580, 0
  %4582 = xor i64 %4581, %4573
  %4583 = xor i64 %4582, %4577
  %4584 = mul i64 %4572, %4583
  %4585 = trunc i64 %4584 to i32
  %4586 = sub i32 %4585, %4548
  %4587 = sub i32 0, %4498
  %4588 = add i32 %4586, %4587
  %4589 = sub i32 0, %4588
  %4590 = sub i32 0, %4539
  %4591 = sub i32 %4589, %4590
  %4592 = add i32 %4591, %4542
  %4593 = add i32 %4592, %4543
  %4594 = xor i32 %4593, %4544
  %4595 = and i32 %4593, %4544
  %4596 = mul i32 2, %4595
  %4597 = add i32 %4594, %4596
  %4598 = add i32 %4597, %4545
  %4599 = xor i32 %4598, -2
  %4600 = and i32 %4599, %4598
  %4601 = icmp eq i32 %4600, 0
  %4602 = mul i32 %4598, %4598
  %4603 = sub i32 %4602, -1822906966
  %4604 = add i32 %4603, %4598
  %4605 = add i64 %190, 240748314708176477
  %4606 = add i64 3825871412321577668, %190
  %4607 = add i64 %4606, -3585123097613401191
  %4608 = or i64 %119, 1918711702445664660
  %4609 = xor i64 %119, -1
  %4610 = and i64 %4609, 541800169304707575
  %4611 = and i64 %119, -541800169304707576
  %4612 = or i64 %4610, %4611
  %4613 = xor i64 2099942150544291939, %4612
  %4614 = xor i64 %119, -1
  %4615 = or i64 -1918711702445664661, %4614
  %4616 = xor i64 %4615, -1
  %4617 = and i64 %4616, -1
  %4618 = or i64 %4613, %4617
  %4619 = xor i64 %4608, -8728396647774462613
  %4620 = xor i64 %4619, %4605
  %4621 = xor i64 %4620, %4618
  %4622 = xor i64 %4621, %4607
  %4623 = and i64 %109, -8731163996285694482
  %4624 = xor i64 %109, -1
  %4625 = xor i64 -8731163996285694482, %4624
  %4626 = and i64 %4625, -8731163996285694482
  %4627 = or i64 %53, 2719401258802341359
  %4628 = xor i64 %53, -1
  %4629 = and i64 2719401258802341359, %4628
  %4630 = add i64 %4629, %53
  %4631 = or i64 %19, 5240819893428747204
  %4632 = xor i64 %19, -1
  %4633 = and i64 5240819893428747204, %4632
  %4634 = add i64 %4633, %19
  %4635 = xor i64 %4634, -4248078056727658114
  %4636 = xor i64 %4635, %4626
  %4637 = xor i64 %4636, %4627
  %4638 = xor i64 %4637, %4623
  %4639 = xor i64 %4638, %4630
  %4640 = xor i64 %4639, %4631
  %4641 = mul i64 %4622, %4640
  %4642 = trunc i64 %4641 to i32
  %4643 = add i32 %4604, %4642
  %4644 = mul i32 %4643, 3
  %4645 = add i64 %75, -8586331880082574494
  %4646 = sub i64 0, %75
  %4647 = sub i64 -8586331880082574494, %4646
  %4648 = and i64 %95, -7082295920079861932
  %4649 = xor i64 %95, -1
  %4650 = or i64 7082295920079861931, %4649
  %4651 = xor i64 %4650, -1
  %4652 = and i64 %4651, -1
  %4653 = or i64 %81, -8477701514648256356
  %4654 = xor i64 %81, -1
  %4655 = and i64 %4654, 3031170016767550944
  %4656 = and i64 %81, -3031170016767550945
  %4657 = or i64 %4655, %4656
  %4658 = xor i64 -6896763162945182340, %4657
  %4659 = xor i64 %81, -1
  %4660 = or i64 8477701514648256355, %4659
  %4661 = xor i64 %4660, -1
  %4662 = and i64 %4661, -1
  %4663 = or i64 %4658, %4662
  %4664 = xor i64 %4648, %4647
  %4665 = xor i64 %4664, %4652
  %4666 = xor i64 %4665, -2950644300135411235
  %4667 = xor i64 %4666, %4663
  %4668 = xor i64 %4667, %4645
  %4669 = xor i64 %4668, %4653
  %4670 = and i64 %196, 2174556074451011518
  %4671 = xor i64 %196, -1
  %4672 = or i64 -2174556074451011519, %4671
  %4673 = xor i64 %4672, -1
  %4674 = and i64 %4673, -1
  %4675 = or i64 %21, 4117970047582553462
  %4676 = xor i64 %21, -1
  %4677 = and i64 %4676, -5756644098319144625
  %4678 = and i64 %21, 5756644098319144624
  %4679 = or i64 %4677, %4678
  %4680 = xor i64 -8558601525867451335, %4679
  %4681 = xor i64 %21, -1
  %4682 = or i64 -4117970047582553463, %4681
  %4683 = xor i64 %4682, -1
  %4684 = and i64 %4683, -1
  %4685 = or i64 %4680, %4684
  %4686 = add i64 %25, 7546436052563314341
  %4687 = xor i64 7546436052563314341, %25
  %4688 = and i64 7546436052563314341, %25
  %4689 = mul i64 2, %4688
  %4690 = add i64 %4687, %4689
  %4691 = xor i64 7453700097575099626, %4674
  %4692 = xor i64 %4691, %4675
  %4693 = xor i64 %4692, %4686
  %4694 = xor i64 %4693, %4670
  %4695 = xor i64 %4694, %4685
  %4696 = xor i64 %4695, %4690
  %4697 = mul i64 %4669, %4696
  %4698 = trunc i64 %4697 to i32
  %4699 = srem i32 %4644, %4698
  %4700 = icmp eq i32 %4699, 0
  %4701 = or i64 %117, 6791286189019265958
  %4702 = xor i64 %117, -1
  %4703 = and i64 6791286189019265958, %4702
  %4704 = add i64 %4703, %117
  %4705 = and i64 %71, 2990023587423988578
  %4706 = xor i64 %71, -1
  %4707 = or i64 -2990023587423988579, %4706
  %4708 = xor i64 %4707, -1
  %4709 = and i64 %4708, -1
  %4710 = or i64 %19, 7481798382647764417
  %4711 = and i64 7481798382647764417, %19
  %4712 = xor i64 7481798382647764417, %19
  %4713 = or i64 %4711, %4712
  %4714 = xor i64 %4701, %4709
  %4715 = xor i64 %4714, -7073236091734194705
  %4716 = xor i64 %4715, %4713
  %4717 = xor i64 %4716, %4705
  %4718 = xor i64 %4717, %4704
  %4719 = xor i64 %4718, %4710
  %4720 = or i64 %27, -9049291969269956024
  %4721 = xor i64 %27, -1
  %4722 = and i64 -9049291969269956024, %4721
  %4723 = add i64 %4722, %27
  %4724 = and i64 %39, -1207518668015422063
  %4725 = xor i64 %39, -1
  %4726 = xor i64 -1207518668015422063, %4725
  %4727 = and i64 %4726, -1207518668015422063
  %4728 = or i64 %53, -7717863309991500641
  %4729 = xor i64 %53, -1
  %4730 = and i64 %4729, -8801138134185902737
  %4731 = and i64 %53, 8801138134185902736
  %4732 = or i64 %4730, %4731
  %4733 = xor i64 1240943228788398576, %4732
  %4734 = xor i64 %53, -1
  %4735 = or i64 7717863309991500640, %4734
  %4736 = xor i64 %4735, -1
  %4737 = and i64 %4736, -1
  %4738 = or i64 %4733, %4737
  %4739 = xor i64 %4738, %4724
  %4740 = xor i64 %4739, %4727
  %4741 = xor i64 %4740, %4723
  %4742 = xor i64 %4741, %4728
  %4743 = xor i64 %4742, 6407138224499837199
  %4744 = xor i64 %4743, %4720
  %4745 = mul i64 %4719, %4744
  %4746 = trunc i64 %4745 to i1
  %4747 = xor i1 %4700, %4746
  %4748 = and i1 %4601, %4747
  %4749 = add i1 %4748, %4700
  %.reload99 = load i32, i32* %.reg2mem95, align 4
  %4750 = mul i32 %.reload99, %.reload99
  %.reload98 = load i32, i32* %.reg2mem95, align 4
  %4751 = add i32 %4750, %.reload98
  %4752 = mul i32 %4751, 3
  %4753 = srem i32 %4752, 2
  %4754 = add i64 %184, -3052447640668753969
  %4755 = and i64 -3052447640668753969, %184
  %4756 = or i64 -3052447640668753969, %184
  %4757 = add i64 %4755, %4756
  %4758 = or i64 %7, 8003008544941495659
  %4759 = xor i64 %7, -1
  %4760 = and i64 %4759, 7812613577041670152
  %4761 = and i64 %7, -7812613577041670153
  %4762 = or i64 %4760, %4761
  %4763 = xor i64 250969548123088227, %4762
  %4764 = xor i64 %7, -1
  %4765 = or i64 -8003008544941495660, %4764
  %4766 = xor i64 %4765, -1
  %4767 = and i64 %4766, -1
  %4768 = or i64 %4763, %4767
  %4769 = or i64 %69, 337562201013433078
  %4770 = and i64 337562201013433078, %69
  %4771 = xor i64 337562201013433078, %69
  %4772 = or i64 %4770, %4771
  %4773 = xor i64 %4757, %4758
  %4774 = xor i64 %4773, %4769
  %4775 = xor i64 %4774, %4754
  %4776 = xor i64 %4775, -2249537689007628801
  %4777 = xor i64 %4776, %4772
  %4778 = xor i64 %4777, %4768
  %4779 = and i64 %190, -1380856526817275213
  %4780 = xor i64 %190, -1
  %4781 = or i64 1380856526817275212, %4780
  %4782 = xor i64 %4781, -1
  %4783 = and i64 %4782, -1
  %4784 = add i64 %43, -5845427024644621228
  %4785 = add i64 -8446052705496901294, %43
  %4786 = add i64 %4785, 2600625680852280066
  %4787 = sext i32 %207 to i64
  %4788 = and i64 %4787, 5936294379684842817
  %4789 = xor i64 %4787, -1
  %4790 = xor i64 5936294379684842817, %4789
  %4791 = and i64 %4790, 5936294379684842817
  %4792 = xor i64 %4788, %4779
  %4793 = xor i64 %4792, %4783
  %4794 = xor i64 %4793, %4786
  %4795 = xor i64 %4794, %4791
  %4796 = xor i64 %4795, 0
  %4797 = xor i64 %4796, %4784
  %4798 = mul i64 %4778, %4797
  %4799 = trunc i64 %4798 to i32
  %4800 = icmp eq i32 %4753, %4799
  %.reload97 = load i32, i32* %.reg2mem95, align 4
  %4801 = mul i32 %.reload97, %.reload97
  %.reload96 = load i32, i32* %.reg2mem95, align 4
  %4802 = add i32 %4801, %.reload96
  %4803 = srem i32 %4802, 2
  %4804 = icmp eq i32 %4803, 0
  %4805 = xor i1 %4800, true
  %4806 = or i1 %4805, %4804
  %4807 = xor i1 %4800, true
  %4808 = sub i1 %4806, %4807
  %4809 = add i64 %51, -2334431107096206689
  %4810 = add i64 -6855935660437664146, %51
  %4811 = sub i64 %4810, -4521504553341457457
  %4812 = and i64 %200, 3990730799038902361
  %4813 = xor i64 %200, -1
  %4814 = xor i64 3990730799038902361, %4813
  %4815 = and i64 %4814, 3990730799038902361
  %4816 = or i64 %39, 4061269799239406251
  %4817 = and i64 4061269799239406251, %39
  %4818 = xor i64 4061269799239406251, %39
  %4819 = or i64 %4817, %4818
  %4820 = xor i64 %4811, %4812
  %4821 = xor i64 %4820, -3071386388091079797
  %4822 = xor i64 %4821, %4815
  %4823 = xor i64 %4822, %4819
  %4824 = xor i64 %4823, %4809
  %4825 = xor i64 %4824, %4816
  %4826 = or i64 %9, 1097412167109065632
  %4827 = and i64 1097412167109065632, %9
  %4828 = xor i64 1097412167109065632, %9
  %4829 = or i64 %4827, %4828
  %4830 = and i64 %73, 7331543951977416958
  %4831 = xor i64 %73, -1
  %4832 = xor i64 7331543951977416958, %4831
  %4833 = and i64 %4832, 7331543951977416958
  %4834 = and i64 %5, -6473468725345763146
  %4835 = xor i64 %5, -1
  %4836 = or i64 6473468725345763145, %4835
  %4837 = xor i64 %4836, -1
  %4838 = and i64 %4837, -1
  %4839 = xor i64 -4714984339915727837, %4833
  %4840 = xor i64 %4839, %4834
  %4841 = xor i64 %4840, %4838
  %4842 = xor i64 %4841, %4829
  %4843 = xor i64 %4842, %4830
  %4844 = xor i64 %4843, %4826
  %4845 = mul i64 %4825, %4844
  %4846 = trunc i64 %4845 to i1
  %4847 = xor i1 %4749, %4846
  %4848 = and i1 %4847, true
  %4849 = and i1 %4749, false
  %4850 = or i1 %4848, %4849
  %4851 = xor i1 %4850, false
  %4852 = xor i1 %4808, false
  %4853 = xor i1 %4852, true
  %4854 = or i1 %4851, %4853
  %4855 = xor i1 %4854, true
  %4856 = xor i1 %4855, false
  %4857 = xor i1 %4856, true
  %4858 = or i1 %4857, false
  %4859 = xor i1 %4858, true
  %4860 = and i1 %4859, true
  %4861 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 34
  %4862 = load i32, i32* %4861, align 4
  %4863 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %4864 = load i32, i32* %4863, align 4
  %4865 = sub i32 %4862, %4864
  %4866 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 35
  %4867 = load i32, i32* %4866, align 4
  %4868 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %4869 = load i32, i32* %4868, align 4
  %4870 = sub i32 %4867, %4869
  %4871 = select i1 %4860, i32 %4865, i32 %4870
  store i32 %4871, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem156, align 4
  store double 0.000000e+00, double* %.reg2mem158, align 8
  %4872 = load i8*, i8** %88, align 8
  %4873 = load i8, i8* %4872, align 1
  %4874 = mul i8 %4873, 2
  %4875 = mul i8 %4873, 2
  %4876 = add i8 2, %4875
  %4877 = mul i8 %4874, %4876
  %4878 = srem i8 %4877, 4
  %4879 = icmp eq i8 %4878, 0
  %4880 = mul i8 %4873, %4873
  %4881 = mul i8 %4880, %4873
  %4882 = sub i8 0, %4881
  %4883 = sub i8 0, %4873
  %4884 = add i8 %4882, %4883
  %4885 = and i64 %69, -3546377143924383660
  %4886 = xor i64 %69, -1
  %4887 = xor i64 -3546377143924383660, %4886
  %4888 = and i64 %4887, -3546377143924383660
  %4889 = or i64 %59, -1622374153839549745
  %4890 = xor i64 %59, -1
  %4891 = and i64 -1622374153839549745, %4890
  %4892 = add i64 %4891, %59
  %4893 = or i64 %53, 2182963466266878414
  %4894 = xor i64 %53, -1
  %4895 = and i64 %4894, -8788436114740485439
  %4896 = and i64 %53, 8788436114740485438
  %4897 = or i64 %4895, %4896
  %4898 = xor i64 -7475339458413083889, %4897
  %4899 = xor i64 %53, -1
  %4900 = or i64 -2182963466266878415, %4899
  %4901 = xor i64 %4900, -1
  %4902 = and i64 %4901, -1
  %4903 = or i64 %4898, %4902
  %4904 = xor i64 404861416671566873, %4892
  %4905 = xor i64 %4904, %4885
  %4906 = xor i64 %4905, %4903
  %4907 = xor i64 %4906, %4889
  %4908 = xor i64 %4907, %4893
  %4909 = xor i64 %4908, %4888
  %4910 = or i64 %111, -6771097109238096163
  %4911 = and i64 -6771097109238096163, %111
  %4912 = xor i64 -6771097109238096163, %111
  %4913 = or i64 %4911, %4912
  %4914 = add i64 %91, -1173389780868759948
  %4915 = sub i64 0, %91
  %4916 = add i64 1173389780868759948, %4915
  %4917 = sub i64 0, %4916
  %4918 = and i64 %19, 6245073954683948571
  %4919 = or i64 -6245073954683948572, %19
  %4920 = sub i64 %4919, -6245073954683948572
  %4921 = xor i64 %4914, %4920
  %4922 = xor i64 %4921, %4910
  %4923 = xor i64 %4922, %4917
  %4924 = xor i64 %4923, 0
  %4925 = xor i64 %4924, %4918
  %4926 = xor i64 %4925, %4913
  %4927 = mul i64 %4909, %4926
  %4928 = trunc i64 %4927 to i8
  %4929 = sub i8 %4928, %4884
  %4930 = srem i8 %4929, 2
  %4931 = icmp eq i8 %4930, 0
  %4932 = and i1 %4879, %4931
  %4933 = select i1 %4932, i32 388314377, i32 388314410
  %4934 = xor i32 %4933, 35
  store i32 %4934, i32* %4, align 4
  %4935 = call i8** @bf10863455059032886292(i32* %4)
  %4936 = load i8*, i8** %4935, align 8
  indirectbr i8* %4936, [label %loopEnd, label %4354]

4937:                                             ; preds = %4937, %loopStart
  %.reload115 = load double, double* %.reg2mem114, align 8
  %4938 = fadd double %.reload115, 7.000000e-02
  %4939 = fptrunc double %4938 to float
  store float %4939, float* %.reg2mem127, align 4
  %.reload128 = load float, float* %.reg2mem127, align 4
  %4940 = fpext float %.reload128 to double
  store double %4940, double* %.reg2mem130, align 8
  %.reload131 = load double, double* %.reg2mem130, align 8
  %4941 = fcmp olt double %.reload131, 6.280000e+00
  store i1 %4941, i1* %.reg2mem133, align 1
  %4942 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 17
  %4943 = load i32, i32* %4942, align 4
  %4944 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 16
  %4945 = load i32, i32* %4944, align 4
  %4946 = add i32 %4943, %4945
  %4947 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 22
  %4948 = load i32, i32* %4947, align 4
  %4949 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 21
  %4950 = load i32, i32* %4949, align 4
  %4951 = add i32 %4948, %4950
  %.reload134 = load i1, i1* %.reg2mem133, align 1
  %4952 = select i1 %.reload134, i32 %4946, i32 %4951
  store i32 %4952, i32* %dispatcher, align 4
  %.reload113 = load i32, i32* %.reg2mem112, align 4
  store i32 %.reload113, i32* %.ph.reg2mem160, align 4
  %4953 = load i8*, i8** %108, align 8
  %4954 = load i8, i8* %4953, align 1
  %4955 = mul i8 %4954, 2
  %4956 = mul i8 %4954, 2
  %4957 = and i8 2, %4956
  %4958 = or i8 2, %4956
  %4959 = add i8 %4957, %4958
  %4960 = mul i8 %4955, %4959
  %4961 = add i64 %103, -7182423042504837790
  %4962 = add i64 5915299958929307439, %103
  %4963 = add i64 %4962, 5349021072275406387
  %4964 = or i64 %85, -6083464321449517113
  %4965 = xor i64 %85, -1
  %4966 = and i64 %4965, -8594534691096918412
  %4967 = and i64 %85, 8594534691096918411
  %4968 = or i64 %4966, %4967
  %4969 = xor i64 2533597314847119795, %4968
  %4970 = xor i64 %85, -1
  %4971 = or i64 6083464321449517112, %4970
  %4972 = xor i64 %4971, -1
  %4973 = and i64 %4972, -1
  %4974 = or i64 %4969, %4973
  %4975 = and i64 %198, -6593660994283212686
  %4976 = xor i64 %198, -1
  %4977 = or i64 6593660994283212685, %4976
  %4978 = xor i64 %4977, -1
  %4979 = and i64 %4978, -1
  %4980 = xor i64 %4975, %4974
  %4981 = xor i64 %4980, 3648553808633130013
  %4982 = xor i64 %4981, %4961
  %4983 = xor i64 %4982, %4963
  %4984 = xor i64 %4983, %4979
  %4985 = xor i64 %4984, %4964
  %4986 = and i64 %196, 5726893222689785960
  %4987 = xor i64 %196, -1
  %4988 = xor i64 5726893222689785960, %4987
  %4989 = and i64 %4988, 5726893222689785960
  %4990 = or i64 %37, 8588463838742412594
  %4991 = xor i64 %37, -1
  %4992 = and i64 %4991, 1928349370312072208
  %4993 = and i64 %37, -1928349370312072209
  %4994 = or i64 %4992, %4993
  %4995 = xor i64 7922541833749258530, %4994
  %4996 = xor i64 %37, -1
  %4997 = or i64 -8588463838742412595, %4996
  %4998 = xor i64 %4997, -1
  %4999 = and i64 %4998, -1
  %5000 = or i64 %4995, %4999
  %5001 = add i64 %47, 713674410793273561
  %5002 = and i64 713674410793273561, %47
  %5003 = or i64 713674410793273561, %47
  %5004 = add i64 %5002, %5003
  %5005 = xor i64 %4986, %4990
  %5006 = xor i64 %5005, %5001
  %5007 = xor i64 %5006, %5004
  %5008 = xor i64 %5007, %5000
  %5009 = xor i64 %5008, -6370600816376489772
  %5010 = xor i64 %5009, %4989
  %5011 = mul i64 %4985, %5010
  %5012 = trunc i64 %5011 to i8
  %5013 = srem i8 %4960, %5012
  %5014 = icmp eq i8 %5013, 0
  %5015 = mul i8 %4954, %4954
  %5016 = and i8 %5015, %4954
  %5017 = or i8 %5015, %4954
  %5018 = add i8 %5016, %5017
  %5019 = srem i8 %5018, 2
  %5020 = icmp eq i8 %5019, 0
  %5021 = or i1 %5014, %5020
  %5022 = select i1 %5021, i32 388314376, i32 388314410
  %5023 = or i32 %5022, 34
  %5024 = and i32 %5022, 34
  %5025 = sub i32 %5023, %5024
  store i32 %5025, i32* %4, align 4
  %5026 = call i8** @bf10863455059032886292(i32* %4)
  %5027 = load i8*, i8** %5026, align 8
  indirectbr i8* %5027, [label %loopEnd, label %4937]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %.ph.reload161 = load i32, i32* %.ph.reg2mem160, align 4
  store i32 %.ph.reload161, i32* %.ph.reg2mem, align 4
  %.reload.reload28 = load i32, i32* %.reload.reg2mem, align 4
  %5028 = srem i32 %.reload.reload28, 2
  %5029 = icmp eq i32 %5028, 0
  %5030 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 38
  %5031 = load i32, i32* %5030, align 4
  %5032 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %5033 = load i32, i32* %5032, align 4
  %5034 = sub i32 %5031, 464072998
  %5035 = sub i32 %5034, %5033
  %5036 = and i64 %55, -7468489531304872708
  %5037 = or i64 7468489531304872707, %55
  %5038 = sub i64 %5037, 7468489531304872707
  %5039 = and i64 %196, -3108293680134077447
  %5040 = or i64 3108293680134077446, %196
  %5041 = sub i64 %5040, 3108293680134077446
  %5042 = xor i64 %5036, 3409657658523845233
  %5043 = xor i64 %5042, %5041
  %5044 = xor i64 %5043, %5039
  %5045 = xor i64 %5044, %5038
  %5046 = and i64 %19, -8793024254291969751
  %5047 = xor i64 %19, -1
  %5048 = xor i64 -8793024254291969751, %5047
  %5049 = and i64 %5048, -8793024254291969751
  %5050 = add i64 %57, 1995315444611714323
  %5051 = and i64 1995315444611714323, %57
  %5052 = or i64 1995315444611714323, %57
  %5053 = add i64 %5051, %5052
  %5054 = add i64 %21, 3032340829772259462
  %5055 = sub i64 0, %21
  %5056 = sub i64 3032340829772259462, %5055
  %5057 = xor i64 %5046, %5053
  %5058 = xor i64 %5057, %5050
  %5059 = xor i64 %5058, %5054
  %5060 = xor i64 %5059, 5155694119969983110
  %5061 = xor i64 %5060, %5056
  %5062 = xor i64 %5061, %5049
  %5063 = mul i64 %5045, %5062
  %5064 = trunc i64 %5063 to i32
  %5065 = add i32 %5035, %5064
  %5066 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 25
  %5067 = load i32, i32* %5066, align 4
  %5068 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  %5069 = load i32, i32* %5068, align 4
  %5070 = add i32 %5067, %5069
  %5071 = select i1 %5029, i32 %5065, i32 %5070
  store i32 %5071, i32* %dispatcher, align 4
  %5072 = load i8*, i8** %70, align 8
  %5073 = load i8, i8* %5072, align 1
  %5074 = mul i8 %5073, 2
  %5075 = mul i8 %5073, 2
  %5076 = add i8 2, %5075
  %5077 = mul i8 %5074, %5076
  %5078 = srem i8 %5077, 4
  %5079 = and i64 %83, -4770159014204622065
  %5080 = or i64 4770159014204622064, %83
  %5081 = sub i64 %5080, 4770159014204622064
  %5082 = add i64 %21, 1564586822606502694
  %5083 = add i64 -7250995093800024853, %21
  %5084 = add i64 %5083, 8815581916406527547
  %5085 = add i64 %7, 297078791035926361
  %5086 = add i64 1868498667910792170, %7
  %5087 = add i64 %5086, -1571419876874865809
  %5088 = xor i64 %5081, %5079
  %5089 = xor i64 %5088, %5085
  %5090 = xor i64 %5089, -1149292387735025859
  %5091 = xor i64 %5090, %5084
  %5092 = xor i64 %5091, %5082
  %5093 = xor i64 %5092, %5087
  %5094 = or i64 %9, 1821731946127691246
  %5095 = xor i64 %9, -1
  %5096 = and i64 1821731946127691246, %5095
  %5097 = add i64 %5096, %9
  %5098 = and i64 %53, 4093164620688345979
  %5099 = or i64 -4093164620688345980, %53
  %5100 = sub i64 %5099, -4093164620688345980
  %5101 = and i64 %35, 4672078711254034898
  %5102 = or i64 -4672078711254034899, %35
  %5103 = sub i64 %5102, -4672078711254034899
  %5104 = xor i64 %5100, %5103
  %5105 = xor i64 %5104, 0
  %5106 = xor i64 %5105, %5097
  %5107 = xor i64 %5106, %5098
  %5108 = xor i64 %5107, %5094
  %5109 = xor i64 %5108, %5101
  %5110 = mul i64 %5093, %5109
  %5111 = trunc i64 %5110 to i8
  %5112 = icmp eq i8 %5078, %5111
  %5113 = mul i8 %5073, %5073
  %5114 = add i8 %5113, %5073
  %5115 = srem i8 %5114, 2
  %5116 = icmp eq i8 %5115, 0
  %5117 = xor i1 %5116, true
  %5118 = xor i1 %5112, %5117
  %5119 = and i1 %5118, %5112
  %5120 = select i1 %5119, i32 388314411, i32 388314410
  %5121 = xor i32 %5120, 1
  store i32 %5121, i32* %4, align 4
  %5122 = call i8** @bf10863455059032886292(i32* %4)
  %5123 = load i8*, i8** %5122, align 8
  indirectbr i8* %5123, [label %loopEnd, label %.loopexit]

5124:                                             ; preds = %5124, %loopStart
  %5125 = mul i64 91, 28
  %5126 = and i64 %91, 6273899133293388599
  %5127 = or i64 -6273899133293388600, %91
  %5128 = sub i64 %5127, -6273899133293388600
  %5129 = or i64 %119, 2631498772866191544
  %5130 = xor i64 %119, -1
  %5131 = and i64 2631498772866191544, %5130
  %5132 = add i64 %5131, %119
  %5133 = or i64 %23, 1436777301799034816
  %5134 = and i64 1436777301799034816, %23
  %5135 = xor i64 1436777301799034816, %23
  %5136 = or i64 %5134, %5135
  %5137 = xor i64 %5129, %5136
  %5138 = xor i64 %5137, %5133
  %5139 = xor i64 %5138, %5132
  %5140 = xor i64 %5139, 3998608043630379141
  %5141 = xor i64 %5140, %5128
  %5142 = xor i64 %5141, %5126
  %5143 = or i64 %93, -5733878616587572540
  %5144 = and i64 -5733878616587572540, %93
  %5145 = xor i64 -5733878616587572540, %93
  %5146 = or i64 %5144, %5145
  %5147 = or i64 %188, 2208818173718505414
  %5148 = xor i64 %188, -1
  %5149 = and i64 2208818173718505414, %5148
  %5150 = add i64 %5149, %188
  %5151 = or i64 %19, 6004397228831386936
  %5152 = xor i64 %19, -1
  %5153 = and i64 %5152, -5495327731325769548
  %5154 = and i64 %19, 5495327731325769547
  %5155 = or i64 %5153, %5154
  %5156 = xor i64 -2238486941069949556, %5155
  %5157 = xor i64 %19, -1
  %5158 = or i64 -6004397228831386937, %5157
  %5159 = xor i64 %5158, -1
  %5160 = and i64 %5159, -1
  %5161 = or i64 %5156, %5160
  %5162 = xor i64 %5150, %5151
  %5163 = xor i64 %5162, -8068162536563656627
  %5164 = xor i64 %5163, %5161
  %5165 = xor i64 %5164, %5146
  %5166 = xor i64 %5165, %5147
  %5167 = xor i64 %5166, %5143
  %5168 = mul i64 %5142, %5167
  %5169 = add i64 50, %5168
  %5170 = sdiv i64 38, 57
  %5171 = add i64 %79, 3613567474202447042
  %5172 = add i64 7352295956473383055, %79
  %5173 = add i64 %5172, -3738728482270936013
  %5174 = and i64 %61, 1155367217273936012
  %5175 = xor i64 %61, -1
  %5176 = xor i64 1155367217273936012, %5175
  %5177 = and i64 %5176, 1155367217273936012
  %5178 = xor i64 %5171, -3056834207349341639
  %5179 = xor i64 %5178, %5174
  %5180 = xor i64 %5179, %5177
  %5181 = xor i64 %5180, %5173
  %5182 = or i64 %37, -7025531101906327415
  %5183 = xor i64 %37, -1
  %5184 = and i64 %5183, -4843701965685203682
  %5185 = and i64 %37, 4843701965685203681
  %5186 = or i64 %5184, %5185
  %5187 = xor i64 2470217893587121559, %5186
  %5188 = xor i64 %37, -1
  %5189 = or i64 7025531101906327414, %5188
  %5190 = xor i64 %5189, -1
  %5191 = and i64 %5190, -1
  %5192 = or i64 %5187, %5191
  %5193 = add i64 %103, -4032078924664986558
  %5194 = sub i64 0, %103
  %5195 = sub i64 -4032078924664986558, %5194
  %5196 = or i64 %83, -3685124213936173527
  %5197 = xor i64 %83, -1
  %5198 = and i64 -3685124213936173527, %5197
  %5199 = add i64 %5198, %83
  %5200 = xor i64 %5195, -3022117596953462550
  %5201 = xor i64 %5200, %5182
  %5202 = xor i64 %5201, %5193
  %5203 = xor i64 %5202, %5199
  %5204 = xor i64 %5203, %5196
  %5205 = xor i64 %5204, %5192
  %5206 = mul i64 %5181, %5205
  %5207 = sub i64 24, %5206
  %5208 = sub i64 63, 17
  %5209 = add i64 -7313955150066747856, 7313955150066747868
  %5210 = sdiv i64 40, 74
  %.reload117 = load i32, i32* %.reg2mem116, align 4
  %5211 = srem i32 %.reload117, 2
  %5212 = icmp eq i32 %5211, 0
  %.reload122 = load i32, i32* %.reg2mem119, align 4
  %5213 = add i64 %200, -7758678168267606910
  %5214 = sub i64 0, %200
  %5215 = add i64 7758678168267606910, %5214
  %5216 = sub i64 0, %5215
  %5217 = and i64 %55, 4997203120279071207
  %5218 = xor i64 %55, -1
  %5219 = xor i64 4997203120279071207, %5218
  %5220 = and i64 %5219, 4997203120279071207
  %5221 = or i64 %103, 1888001166610169057
  %5222 = xor i64 %103, -1
  %5223 = and i64 %5222, -5044787105079586990
  %5224 = and i64 %103, 5044787105079586989
  %5225 = or i64 %5223, %5224
  %5226 = xor i64 -6643135086519585869, %5225
  %5227 = xor i64 %103, -1
  %5228 = or i64 -1888001166610169058, %5227
  %5229 = xor i64 %5228, -1
  %5230 = and i64 %5229, -1
  %5231 = or i64 %5226, %5230
  %5232 = xor i64 %5220, %5221
  %5233 = xor i64 %5232, %5217
  %5234 = xor i64 %5233, %5216
  %5235 = xor i64 %5234, -4729167853298790965
  %5236 = xor i64 %5235, %5231
  %5237 = xor i64 %5236, %5213
  %5238 = or i64 %29, 8419946777289691714
  %5239 = xor i64 %29, -1
  %5240 = and i64 8419946777289691714, %5239
  %5241 = add i64 %5240, %29
  %5242 = or i64 %99, 4649115547513295816
  %5243 = xor i64 %99, -1
  %5244 = and i64 %5243, -4690581893936286545
  %5245 = and i64 %99, 4690581893936286544
  %5246 = or i64 %5244, %5245
  %5247 = xor i64 -116164039678433433, %5246
  %5248 = xor i64 %99, -1
  %5249 = or i64 -4649115547513295817, %5248
  %5250 = xor i64 %5249, -1
  %5251 = and i64 %5250, -1
  %5252 = or i64 %5247, %5251
  %5253 = xor i64 %5238, %5242
  %5254 = xor i64 %5253, %5241
  %5255 = xor i64 %5254, 2768442890979307491
  %5256 = xor i64 %5255, %5252
  %5257 = mul i64 %5237, %5256
  %5258 = trunc i64 %5257 to i32
  %5259 = and i32 %.reload122, %5258
  %5260 = icmp eq i32 %5259, 0
  %.reload121 = load i32, i32* %.reg2mem119, align 4
  %5261 = mul i32 %.reload121, %.reload121
  %.reload120 = load i32, i32* %.reg2mem119, align 4
  %5262 = add i32 %5261, %.reload120
  %5263 = mul i32 %5262, 3
  %5264 = srem i32 %5263, 2
  %5265 = icmp eq i32 %5264, 0
  %5266 = or i1 %5260, %5265
  store i1 %5266, i1* %.reg2mem136, align 1
  %5267 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 40
  %5268 = load i32, i32* %5267, align 4
  %5269 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %5270 = load i32, i32* %5269, align 4
  %5271 = sub i32 %5268, %5270
  %5272 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  %5273 = load i32, i32* %5272, align 4
  %5274 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 22
  %5275 = load i32, i32* %5274, align 4
  %5276 = add i32 %5273, %5275
  %.reload138 = load i1, i1* %.reg2mem136, align 1
  %5277 = select i1 %.reload138, i32 %5271, i32 %5276
  store i32 %5277, i32* %dispatcher, align 4
  %5278 = load i8*, i8** %68, align 8
  %5279 = load i8, i8* %5278, align 1
  %5280 = mul i8 %5279, %5279
  %5281 = add i8 %5280, %5279
  %5282 = mul i8 %5281, 3
  %5283 = srem i8 %5282, 2
  %5284 = icmp eq i8 %5283, 0
  %5285 = mul i8 %5279, %5279
  %5286 = add i8 %5285, %5279
  %5287 = srem i8 %5286, 2
  %5288 = icmp eq i8 %5287, 0
  %5289 = and i1 %5284, %5288
  %5290 = or i64 %200, -4426087483807996271
  %5291 = and i64 -4426087483807996271, %200
  %5292 = xor i64 -4426087483807996271, %200
  %5293 = or i64 %5291, %5292
  %5294 = and i64 %61, 9159907310204242686
  %5295 = xor i64 %61, -1
  %5296 = xor i64 9159907310204242686, %5295
  %5297 = and i64 %5296, 9159907310204242686
  %5298 = xor i64 %5290, %5293
  %5299 = xor i64 %5298, %5294
  %5300 = xor i64 %5299, %5297
  %5301 = xor i64 %5300, -5837878833559461643
  %5302 = and i64 %81, -5072649538791273081
  %5303 = xor i64 %81, -1
  %5304 = or i64 5072649538791273080, %5303
  %5305 = xor i64 %5304, -1
  %5306 = and i64 %5305, -1
  %5307 = or i64 %99, -691796111555061364
  %5308 = xor i64 %99, -1
  %5309 = and i64 -691796111555061364, %5308
  %5310 = add i64 %5309, %99
  %5311 = or i64 %7, 6348639850600361098
  %5312 = and i64 6348639850600361098, %7
  %5313 = xor i64 6348639850600361098, %7
  %5314 = or i64 %5312, %5313
  %5315 = xor i64 %5314, %5302
  %5316 = xor i64 %5315, %5311
  %5317 = xor i64 %5316, %5306
  %5318 = xor i64 %5317, %5307
  %5319 = xor i64 %5318, -1950907205209350590
  %5320 = xor i64 %5319, %5310
  %5321 = mul i64 %5301, %5320
  %5322 = trunc i64 %5321 to i32
  %5323 = select i1 %5289, i32 388314421, i32 %5322
  %5324 = xor i32 %5323, 31
  store i32 %5324, i32* %4, align 4
  %5325 = call i8** @bf10863455059032886292(i32* %4)
  %5326 = load i8*, i8** %5325, align 8
  indirectbr i8* %5326, [label %loopEnd, label %5124]

5327:                                             ; preds = %5327, %loopStart
  %5328 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 24
  %5329 = load i32, i32* %5328, align 4
  %5330 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  %5331 = load i32, i32* %5330, align 4
  %5332 = sub i32 0, %5329
  %5333 = sub i32 0, %5331
  %5334 = add i32 %5332, %5333
  %5335 = sub i32 0, %5334
  %5336 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 40
  %5337 = load i32, i32* %5336, align 4
  %5338 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %5339 = load i32, i32* %5338, align 4
  %5340 = srem i32 %5337, %5339
  %.reload137 = load i1, i1* %.reg2mem136, align 1
  %5341 = select i1 %.reload137, i32 %5335, i32 %5340
  store i32 %5341, i32* %dispatcher, align 4
  store i32 0, i32* %.ph.reg2mem160, align 4
  %5342 = load i8*, i8** %98, align 8
  %5343 = load i8, i8* %5342, align 1
  %5344 = mul i8 %5343, %5343
  %5345 = add i8 %5344, %5343
  %5346 = mul i8 %5345, 3
  %5347 = add i64 %41, 4587469140038955844
  %5348 = add i64 3907820825137541546, %41
  %5349 = add i64 %5348, 679648314901414298
  %5350 = or i64 %39, 6355930714805951881
  %5351 = xor i64 %39, -1
  %5352 = and i64 %5351, -7829218253071761232
  %5353 = and i64 %39, 7829218253071761231
  %5354 = or i64 %5352, %5353
  %5355 = xor i64 -3788149380190069447, %5354
  %5356 = xor i64 %39, -1
  %5357 = or i64 -6355930714805951882, %5356
  %5358 = xor i64 %5357, -1
  %5359 = and i64 %5358, -1
  %5360 = or i64 %5355, %5359
  %5361 = add i64 %192, -7574550677306608834
  %5362 = add i64 -3067987763860981611, %192
  %5363 = add i64 %5362, -4506562913445627223
  %5364 = xor i64 8185579407959069091, %5347
  %5365 = xor i64 %5364, %5361
  %5366 = xor i64 %5365, %5360
  %5367 = xor i64 %5366, %5363
  %5368 = xor i64 %5367, %5349
  %5369 = xor i64 %5368, %5350
  %5370 = or i64 %43, 8959241601372302402
  %5371 = and i64 8959241601372302402, %43
  %5372 = xor i64 8959241601372302402, %43
  %5373 = or i64 %5371, %5372
  %5374 = or i64 %43, -24969687995010239
  %5375 = and i64 -24969687995010239, %43
  %5376 = xor i64 -24969687995010239, %43
  %5377 = or i64 %5375, %5376
  %5378 = xor i64 %5377, %5370
  %5379 = xor i64 %5378, 6003357640630555670
  %5380 = xor i64 %5379, %5373
  %5381 = xor i64 %5380, %5374
  %5382 = mul i64 %5369, %5381
  %5383 = trunc i64 %5382 to i8
  %5384 = srem i8 %5346, %5383
  %5385 = icmp eq i8 %5384, 0
  %5386 = mul i8 %5343, %5343
  %5387 = add i8 %5386, %5343
  %5388 = srem i8 %5387, 2
  %5389 = icmp eq i8 %5388, 0
  %5390 = and i1 %5385, %5389
  %5391 = select i1 %5390, i32 388314369, i32 388314410
  %5392 = xor i32 %5391, 340329872
  %5393 = xor i32 %5392, 340329915
  store i32 %5393, i32* %4, align 4
  %5394 = call i8** @bf10863455059032886292(i32* %4)
  %5395 = load i8*, i8** %5394, align 8
  indirectbr i8* %5395, [label %loopEnd, label %5327]

5396:                                             ; preds = %5396, %loopStart
  %5397 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 24
  %5398 = load i32, i32* %5397, align 4
  %5399 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 23
  %5400 = load i32, i32* %5399, align 4
  %5401 = xor i32 %5398, %5400
  %5402 = and i32 %5398, %5400
  %5403 = add i64 %67, 5025746940379520005
  %5404 = add i64 -3660034699245977240, %67
  %5405 = add i64 %5404, 8685781639625497245
  %5406 = add i64 %71, -5673995863959262350
  %5407 = add i64 3570622916079009862, %71
  %5408 = sub i64 %5407, -9202125293671279404
  %5409 = xor i64 %5408, 7844937175461449171
  %5410 = xor i64 %5409, %5405
  %5411 = xor i64 %5410, %5406
  %5412 = xor i64 %5411, %5403
  %5413 = and i64 %117, 4874763391227416773
  %5414 = or i64 -4874763391227416774, %117
  %5415 = sub i64 %5414, -4874763391227416774
  %5416 = and i64 %184, 3069393938537816409
  %5417 = xor i64 %184, -1
  %5418 = or i64 -3069393938537816410, %5417
  %5419 = xor i64 %5418, -1
  %5420 = and i64 %5419, -1
  %5421 = xor i64 5404898453793809590, %5416
  %5422 = xor i64 %5421, %5420
  %5423 = xor i64 %5422, %5415
  %5424 = xor i64 %5423, %5413
  %5425 = mul i64 %5412, %5424
  %5426 = trunc i64 %5425 to i32
  %5427 = mul i32 %5426, %5402
  %5428 = add i32 %5401, %5427
  store i32 %5428, i32* %dispatcher, align 4
  %5429 = load i8*, i8** %94, align 8
  %5430 = load i8, i8* %5429, align 1
  %5431 = mul i8 %5430, 2
  %5432 = mul i8 %5430, 2
  %5433 = sub i8 0, %5432
  %5434 = sub i8 2, %5433
  %5435 = mul i8 %5431, %5434
  %5436 = srem i8 %5435, 4
  %5437 = icmp eq i8 %5436, 0
  %5438 = mul i8 %5430, %5430
  %5439 = add i8 %5438, %5430
  %5440 = srem i8 %5439, 2
  %5441 = icmp eq i8 %5440, 0
  %5442 = xor i1 %5437, true
  %5443 = xor i1 %5441, true
  %5444 = or i1 %5442, %5443
  %5445 = xor i1 %5444, true
  %5446 = and i1 %5445, true
  %5447 = select i1 %5446, i32 388314412, i32 388314410
  %5448 = xor i32 %5447, 6
  store i32 %5448, i32* %4, align 4
  %5449 = call i8** @bf10863455059032886292(i32* %4)
  %5450 = load i8*, i8** %5449, align 8
  indirectbr i8* %5450, [label %loopEnd, label %5396]

5451:                                             ; preds = %5451, %loopStart
  %5452 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 46
  %5453 = load i32, i32* %5452, align 4
  %5454 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %5455 = load i32, i32* %5454, align 4
  %5456 = srem i32 %5453, %5455
  store i32 %5456, i32* %dispatcher, align 4
  %5457 = load i8*, i8** %60, align 8
  %5458 = load i8, i8* %5457, align 1
  %5459 = mul i8 %5458, 2
  %5460 = mul i8 %5458, 2
  %5461 = add i8 2, %5460
  %5462 = mul i8 %5459, %5461
  %5463 = or i64 %63, -9067866945712859411
  %5464 = xor i64 %63, -1
  %5465 = and i64 -9067866945712859411, %5464
  %5466 = add i64 %5465, %63
  %5467 = and i64 %45, -3264216478105960462
  %5468 = xor i64 %45, -1
  %5469 = xor i64 -3264216478105960462, %5468
  %5470 = and i64 %5469, -3264216478105960462
  %5471 = xor i64 %5470, -1819064515469875597
  %5472 = xor i64 %5471, %5463
  %5473 = xor i64 %5472, %5466
  %5474 = xor i64 %5473, %5467
  %5475 = add i64 %75, -2335364209365495766
  %5476 = add i64 -2792287523087307026, %75
  %5477 = add i64 %5476, 456923313721811260
  %5478 = and i64 %87, -6475260796099883383
  %5479 = xor i64 %87, -1
  %5480 = xor i64 -6475260796099883383, %5479
  %5481 = and i64 %5480, -6475260796099883383
  %5482 = xor i64 %5481, %5478
  %5483 = xor i64 %5482, %5475
  %5484 = xor i64 %5483, %5477
  %5485 = xor i64 %5484, 2618283250135513836
  %5486 = mul i64 %5474, %5485
  %5487 = trunc i64 %5486 to i8
  %5488 = srem i8 %5462, %5487
  %5489 = sext i32 %dispatcher1 to i64
  %5490 = and i64 %5489, -9119195160944900289
  %5491 = or i64 9119195160944900288, %5489
  %5492 = sub i64 %5491, 9119195160944900288
  %5493 = add i64 %89, 3403519379389772369
  %5494 = sub i64 0, %89
  %5495 = add i64 -3403519379389772369, %5494
  %5496 = sub i64 0, %5495
  %5497 = and i64 %35, 6903280447558965096
  %5498 = xor i64 %35, -1
  %5499 = xor i64 6903280447558965096, %5498
  %5500 = and i64 %5499, 6903280447558965096
  %5501 = xor i64 %5493, %5497
  %5502 = xor i64 %5501, -2705857010285351835
  %5503 = xor i64 %5502, %5492
  %5504 = xor i64 %5503, %5500
  %5505 = xor i64 %5504, %5496
  %5506 = xor i64 %5505, %5490
  %5507 = and i64 %198, 3036746000034819483
  %5508 = xor i64 %198, -1
  %5509 = xor i64 3036746000034819483, %5508
  %5510 = and i64 %5509, 3036746000034819483
  %5511 = add i64 %79, -8102057645710635075
  %5512 = sub i64 0, %79
  %5513 = add i64 8102057645710635075, %5512
  %5514 = sub i64 0, %5513
  %5515 = or i64 %196, 4061388592001877949
  %5516 = xor i64 %196, -1
  %5517 = and i64 4061388592001877949, %5516
  %5518 = add i64 %5517, %196
  %5519 = xor i64 %5514, %5518
  %5520 = xor i64 %5519, %5515
  %5521 = xor i64 %5520, %5510
  %5522 = xor i64 %5521, %5507
  %5523 = xor i64 %5522, 0
  %5524 = xor i64 %5523, %5511
  %5525 = mul i64 %5506, %5524
  %5526 = trunc i64 %5525 to i8
  %5527 = icmp eq i8 %5488, %5526
  %5528 = mul i8 %5458, %5458
  %5529 = sub i8 0, %5458
  %5530 = sub i8 %5528, %5529
  %5531 = srem i8 %5530, 2
  %5532 = icmp eq i8 %5531, 0
  %5533 = and i1 %5527, %5532
  %5534 = or i64 %29, 4629658168023384924
  %5535 = and i64 4629658168023384924, %29
  %5536 = xor i64 4629658168023384924, %29
  %5537 = or i64 %5535, %5536
  %5538 = add i64 %192, 2421637323350871625
  %5539 = sub i64 0, %192
  %5540 = add i64 -2421637323350871625, %5539
  %5541 = sub i64 0, %5540
  %5542 = and i64 %41, -1455067852301845817
  %5543 = xor i64 %41, -1
  %5544 = xor i64 -1455067852301845817, %5543
  %5545 = and i64 %5544, -1455067852301845817
  %5546 = xor i64 %5542, %5537
  %5547 = xor i64 %5546, -5723103064910007619
  %5548 = xor i64 %5547, %5541
  %5549 = xor i64 %5548, %5538
  %5550 = xor i64 %5549, %5545
  %5551 = xor i64 %5550, %5534
  %5552 = and i64 %37, 5479900993983622445
  %5553 = or i64 -5479900993983622446, %37
  %5554 = sub i64 %5553, -5479900993983622446
  %5555 = add i64 %61, -1439832233248805946
  %5556 = add i64 6714391156556261468, %61
  %5557 = add i64 %5556, -8154223389805067414
  %5558 = or i64 %49, 5549750326146636329
  %5559 = and i64 5549750326146636329, %49
  %5560 = xor i64 5549750326146636329, %49
  %5561 = or i64 %5559, %5560
  %5562 = xor i64 %5557, %5554
  %5563 = xor i64 %5562, %5555
  %5564 = xor i64 %5563, %5552
  %5565 = xor i64 %5564, %5558
  %5566 = xor i64 %5565, %5561
  %5567 = xor i64 %5566, 6672097508111016306
  %5568 = mul i64 %5551, %5567
  %5569 = trunc i64 %5568 to i32
  %5570 = select i1 %5533, i32 388314416, i32 %5569
  %5571 = xor i32 %5570, 26
  store i32 %5571, i32* %4, align 4
  %5572 = call i8** @bf10863455059032886292(i32* %4)
  %5573 = load i8*, i8** %5572, align 8
  indirectbr i8* %5573, [label %loopEnd, label %5451]

5574:                                             ; preds = %5574, %loopStart
  %5575 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 46
  %5576 = load i32, i32* %5575, align 4
  %5577 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %5578 = load i32, i32* %5577, align 4
  %5579 = srem i32 %5576, %5578
  store i32 %5579, i32* %dispatcher, align 4
  %5580 = load i8*, i8** %88, align 8
  %5581 = load i8, i8* %5580, align 1
  %5582 = mul i8 %5581, 2
  %5583 = mul i8 %5581, 2
  %5584 = add i8 2, %5583
  %5585 = mul i8 %5582, %5584
  %5586 = srem i8 %5585, 4
  %5587 = icmp eq i8 %5586, 0
  %5588 = mul i8 %5581, %5581
  %5589 = mul i8 %5588, %5581
  %5590 = add i8 %5589, %5581
  %5591 = srem i8 %5590, 2
  %5592 = icmp eq i8 %5591, 0
  %5593 = and i1 %5587, %5592
  %5594 = select i1 %5593, i32 388314391, i32 388314410
  %5595 = xor i32 %5594, -1
  %5596 = and i32 %5595, 61
  %5597 = or i64 %200, -7991114385576133208
  %5598 = and i64 -7991114385576133208, %200
  %5599 = xor i64 -7991114385576133208, %200
  %5600 = or i64 %5598, %5599
  %5601 = and i64 %111, 477905883729130898
  %5602 = or i64 -477905883729130899, %111
  %5603 = sub i64 %5602, -477905883729130899
  %5604 = xor i64 %5597, %5600
  %5605 = xor i64 %5604, -3157518175520142001
  %5606 = xor i64 %5605, %5603
  %5607 = xor i64 %5606, %5601
  %5608 = or i64 %49, 6245278234625019661
  %5609 = and i64 6245278234625019661, %49
  %5610 = xor i64 6245278234625019661, %49
  %5611 = or i64 %5609, %5610
  %5612 = and i64 %186, -3387624172825524141
  %5613 = or i64 3387624172825524140, %186
  %5614 = sub i64 %5613, 3387624172825524140
  %5615 = or i64 %111, -6176900005695094942
  %5616 = xor i64 %111, -1
  %5617 = and i64 %5616, 9123410493610061197
  %5618 = and i64 %111, -9123410493610061198
  %5619 = or i64 %5617, %5618
  %5620 = xor i64 -3108640796725898513, %5619
  %5621 = xor i64 %111, -1
  %5622 = or i64 6176900005695094941, %5621
  %5623 = xor i64 %5622, -1
  %5624 = and i64 %5623, -1
  %5625 = or i64 %5620, %5624
  %5626 = xor i64 %5625, %5608
  %5627 = xor i64 %5626, %5611
  %5628 = xor i64 %5627, %5614
  %5629 = xor i64 %5628, %5615
  %5630 = xor i64 %5629, %5612
  %5631 = xor i64 %5630, 3979004362809862046
  %5632 = mul i64 %5607, %5631
  %5633 = trunc i64 %5632 to i32
  %5634 = and i32 %5594, %5633
  %5635 = or i32 %5596, %5634
  store i32 %5635, i32* %4, align 4
  %5636 = call i8** @bf10863455059032886292(i32* %4)
  %5637 = load i8*, i8** %5636, align 8
  indirectbr i8* %5637, [label %loopEnd, label %5574]

5638:                                             ; preds = %5638, %loopStart
  %5639 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 44
  %5640 = load i32, i32* %5639, align 4
  %5641 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %5642 = load i32, i32* %5641, align 4
  %5643 = sub i32 %5640, %5642
  store i32 %5643, i32* %dispatcher, align 4
  %.reload135 = load i1, i1* %.reg2mem133, align 1
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  store i32 %.ph.reload, i32* %.reg2mem162, align 4
  store i1 %.reload135, i1* %.reg2mem164, align 1
  %5644 = load i8*, i8** %96, align 8
  %5645 = load i8, i8* %5644, align 1
  %5646 = and i8 %5645, 1
  %5647 = icmp eq i8 %5646, 1
  %5648 = mul i8 %5645, %5645
  %5649 = add i8 %5648, %5645
  %5650 = srem i8 %5649, 2
  %5651 = icmp eq i8 %5650, 0
  %5652 = xor i1 %5651, true
  %5653 = and i1 %5647, %5652
  %5654 = add i1 %5653, %5651
  %5655 = select i1 %5654, i32 388314426, i32 388314410
  %5656 = xor i32 %5655, -1486520232
  %5657 = and i64 %49, -259614940586279590
  %5658 = xor i64 %49, -1
  %5659 = xor i64 -259614940586279590, %5658
  %5660 = and i64 %5659, -259614940586279590
  %5661 = and i64 %29, -3326181919408760022
  %5662 = xor i64 %29, -1
  %5663 = xor i64 -3326181919408760022, %5662
  %5664 = and i64 %5663, -3326181919408760022
  %5665 = add i64 %45, -7604779632768224651
  %5666 = add i64 -5077883542076699538, %45
  %5667 = add i64 %5666, -2526896090691525113
  %5668 = xor i64 %5657, -736174480460621493
  %5669 = xor i64 %5668, %5660
  %5670 = xor i64 %5669, %5661
  %5671 = xor i64 %5670, %5667
  %5672 = xor i64 %5671, %5665
  %5673 = xor i64 %5672, %5664
  %5674 = add i64 %21, 4727333075769614977
  %5675 = add i64 -7338745423316206702, %21
  %5676 = add i64 %5675, -6380665574623729937
  %5677 = or i64 %65, 7515515742585233789
  %5678 = xor i64 %65, -1
  %5679 = and i64 7515515742585233789, %5678
  %5680 = add i64 %5679, %65
  %5681 = or i64 %53, 4817891988989343257
  %5682 = xor i64 %53, -1
  %5683 = and i64 4817891988989343257, %5682
  %5684 = add i64 %5683, %53
  %5685 = xor i64 %5681, %5676
  %5686 = xor i64 %5685, -4522054535517447208
  %5687 = xor i64 %5686, %5677
  %5688 = xor i64 %5687, %5684
  %5689 = xor i64 %5688, %5674
  %5690 = xor i64 %5689, %5680
  %5691 = mul i64 %5673, %5690
  %5692 = trunc i64 %5691 to i32
  %5693 = xor i32 %5656, %5692
  store i32 %5693, i32* %4, align 4
  %5694 = call i8** @bf10863455059032886292(i32* %4)
  %5695 = load i8*, i8** %5694, align 8
  indirectbr i8* %5695, [label %loopEnd, label %5638]

5696:                                             ; preds = %5696, %loopStart
  %.reload165 = load i1, i1* %.reg2mem164, align 1
  %.reload163 = load i32, i32* %.reg2mem162, align 4
  store i1 %.reload165, i1* %.reg2mem141, align 1
  store i32 %.reload163, i32* %.reg2mem139, align 4
  %.reload9 = load i32, i32* %.reg2mem, align 4
  %5697 = mul i32 %.reload9, 2
  %.reload8 = load i32, i32* %.reg2mem, align 4
  %5698 = mul i32 %.reload8, 2
  %5699 = add i32 2, %5698
  %5700 = mul i32 %5697, %5699
  %5701 = srem i32 %5700, 4
  %5702 = icmp eq i32 %5701, 0
  %.reload7 = load i32, i32* %.reg2mem, align 4
  %5703 = mul i32 %.reload7, %.reload7
  %.reload6 = load i32, i32* %.reg2mem, align 4
  %5704 = sub i32 0, %.reload6
  %5705 = sub i32 %5703, %5704
  %5706 = srem i32 %5705, 2
  %5707 = icmp eq i32 %5706, 0
  %5708 = and i1 %5702, %5707
  %5709 = xor i1 %5702, true
  %5710 = and i1 %5709, %5707
  %5711 = xor i1 %5707, true
  %5712 = and i1 %5702, %5711
  %5713 = or i1 %5710, %5712
  %5714 = or i1 %5708, %5713
  %5715 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  %5716 = load i32, i32* %5715, align 4
  %5717 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 25
  %5718 = load i32, i32* %5717, align 4
  %5719 = add i32 %5716, %5718
  %5720 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 27
  %5721 = load i32, i32* %5720, align 4
  %5722 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 25
  %5723 = load i32, i32* %5722, align 4
  %5724 = add i32 %5721, %5723
  %5725 = select i1 %5714, i32 %5719, i32 %5724
  store i32 %5725, i32* %dispatcher, align 4
  %5726 = load i8*, i8** %106, align 8
  %5727 = load i8, i8* %5726, align 1
  %5728 = mul i8 %5727, %5727
  %5729 = add i8 %5728, %5727
  %5730 = mul i8 %5729, 3
  %5731 = srem i8 %5730, 2
  %5732 = icmp eq i8 %5731, 0
  %5733 = mul i8 %5727, %5727
  %5734 = add i8 %5733, %5727
  %5735 = srem i8 %5734, 2
  %5736 = icmp eq i8 %5735, 0
  %5737 = xor i1 %5732, true
  %5738 = or i1 %5737, %5736
  %5739 = xor i1 %5732, true
  %5740 = sub i1 %5738, %5739
  %5741 = select i1 %5740, i32 388314386, i32 388314410
  %5742 = xor i32 %5741, -1
  %5743 = and i32 %5742, 56
  %5744 = and i32 %5741, -57
  %5745 = or i32 %5743, %5744
  store i32 %5745, i32* %4, align 4
  %5746 = call i8** @bf10863455059032886292(i32* %4)
  %5747 = load i8*, i8** %5746, align 8
  indirectbr i8* %5747, [label %loopEnd, label %5696]

5748:                                             ; preds = %5748, %loopStart
  %5749 = mul i32 43, 110
  %5750 = add i64 %85, 1009990741508744118
  %5751 = xor i64 1009990741508744118, %85
  %5752 = and i64 1009990741508744118, %85
  %5753 = mul i64 2, %5752
  %5754 = add i64 %5751, %5753
  %5755 = or i64 %83, -3442109667073528249
  %5756 = and i64 -3442109667073528249, %83
  %5757 = xor i64 -3442109667073528249, %83
  %5758 = or i64 %5756, %5757
  %5759 = add i64 %35, -4874279064176024374
  %5760 = sub i64 0, %35
  %5761 = sub i64 -4874279064176024374, %5760
  %5762 = xor i64 %5755, 2036543855502558843
  %5763 = xor i64 %5762, %5758
  %5764 = xor i64 %5763, %5759
  %5765 = xor i64 %5764, %5754
  %5766 = xor i64 %5765, %5761
  %5767 = xor i64 %5766, %5750
  %5768 = add i64 %93, 8586597031750961801
  %5769 = xor i64 8586597031750961801, %93
  %5770 = and i64 8586597031750961801, %93
  %5771 = mul i64 2, %5770
  %5772 = add i64 %5769, %5771
  %5773 = or i64 %69, 1982319869500148947
  %5774 = xor i64 %69, -1
  %5775 = and i64 %5774, -9142146641335745127
  %5776 = and i64 %69, 9142146641335745126
  %5777 = or i64 %5775, %5776
  %5778 = xor i64 -7304258628001314486, %5777
  %5779 = xor i64 %69, -1
  %5780 = or i64 -1982319869500148948, %5779
  %5781 = xor i64 %5780, -1
  %5782 = and i64 %5781, -1
  %5783 = or i64 %5778, %5782
  %5784 = or i64 %27, -1173671722326491915
  %5785 = xor i64 %27, -1
  %5786 = and i64 -1173671722326491915, %5785
  %5787 = add i64 %5786, %27
  %5788 = xor i64 %5784, 8558665577088095603
  %5789 = xor i64 %5788, %5787
  %5790 = xor i64 %5789, %5773
  %5791 = xor i64 %5790, %5783
  %5792 = xor i64 %5791, %5768
  %5793 = xor i64 %5792, %5772
  %5794 = mul i64 %5767, %5793
  %5795 = trunc i64 %5794 to i32
  %5796 = sdiv i32 52, %5795
  %5797 = or i64 %65, 7798753740018661144
  %5798 = xor i64 %65, -1
  %5799 = and i64 %5798, 4194194690962235511
  %5800 = and i64 %65, -4194194690962235512
  %5801 = or i64 %5799, %5800
  %5802 = xor i64 6201026698338473839, %5801
  %5803 = xor i64 %65, -1
  %5804 = or i64 -7798753740018661145, %5803
  %5805 = xor i64 %5804, -1
  %5806 = and i64 %5805, -1
  %5807 = or i64 %5802, %5806
  %5808 = or i64 %37, -6485127283030330059
  %5809 = and i64 -6485127283030330059, %37
  %5810 = xor i64 -6485127283030330059, %37
  %5811 = or i64 %5809, %5810
  %5812 = and i64 %37, 3265463721028545619
  %5813 = xor i64 %37, -1
  %5814 = or i64 -3265463721028545620, %5813
  %5815 = xor i64 %5814, -1
  %5816 = and i64 %5815, -1
  %5817 = xor i64 %5808, %5811
  %5818 = xor i64 %5817, %5797
  %5819 = xor i64 %5818, %5816
  %5820 = xor i64 %5819, %5812
  %5821 = xor i64 %5820, %5807
  %5822 = xor i64 %5821, -8828512177542110663
  %5823 = add i64 %186, 751832554509052437
  %5824 = add i64 -6208153837381494229, %186
  %5825 = add i64 %5824, 6959986391890546666
  %5826 = or i64 %21, 3538547949377939505
  %5827 = xor i64 %21, -1
  %5828 = and i64 %5827, 9059624186704808466
  %5829 = and i64 %21, -9059624186704808467
  %5830 = or i64 %5828, %5829
  %5831 = xor i64 5521750341043364387, %5830
  %5832 = xor i64 %21, -1
  %5833 = or i64 -3538547949377939506, %5832
  %5834 = xor i64 %5833, -1
  %5835 = and i64 %5834, -1
  %5836 = or i64 %5831, %5835
  %5837 = add i64 %109, 566999362625919238
  %5838 = xor i64 566999362625919238, %109
  %5839 = and i64 566999362625919238, %109
  %5840 = mul i64 2, %5839
  %5841 = add i64 %5838, %5840
  %5842 = xor i64 4534575861205362814, %5825
  %5843 = xor i64 %5842, %5837
  %5844 = xor i64 %5843, %5826
  %5845 = xor i64 %5844, %5841
  %5846 = xor i64 %5845, %5823
  %5847 = xor i64 %5846, %5836
  %5848 = mul i64 %5822, %5847
  %5849 = trunc i64 %5848 to i32
  %5850 = sdiv i32 %5849, 50
  %5851 = mul i32 120, 25
  %5852 = mul i32 64, 92
  %5853 = add i32 2, 110
  %5854 = add i64 %33, -5381794232166189607
  %5855 = sub i64 0, %33
  %5856 = add i64 5381794232166189607, %5855
  %5857 = sub i64 0, %5856
  %5858 = or i64 %25, 9183059917502886168
  %5859 = and i64 9183059917502886168, %25
  %5860 = xor i64 9183059917502886168, %25
  %5861 = or i64 %5859, %5860
  %5862 = add i64 %69, -6701125694666548170
  %5863 = xor i64 -6701125694666548170, %69
  %5864 = and i64 -6701125694666548170, %69
  %5865 = mul i64 2, %5864
  %5866 = add i64 %5863, %5865
  %5867 = xor i64 %5857, %5862
  %5868 = xor i64 %5867, %5854
  %5869 = xor i64 %5868, %5866
  %5870 = xor i64 %5869, %5861
  %5871 = xor i64 %5870, 7151143096977415025
  %5872 = xor i64 %5871, %5858
  %5873 = add i64 %23, -7569121457138659420
  %5874 = sub i64 0, %23
  %5875 = sub i64 -7569121457138659420, %5874
  %5876 = or i64 %75, 7326107430701008210
  %5877 = xor i64 %75, -1
  %5878 = and i64 %5877, 2430036559733794469
  %5879 = and i64 %75, -2430036559733794470
  %5880 = or i64 %5878, %5879
  %5881 = xor i64 4905183625960334327, %5880
  %5882 = xor i64 %75, -1
  %5883 = or i64 -7326107430701008211, %5882
  %5884 = xor i64 %5883, -1
  %5885 = and i64 %5884, -1
  %5886 = or i64 %5881, %5885
  %5887 = add i64 %25, -6363378024471932877
  %5888 = and i64 -6363378024471932877, %25
  %5889 = or i64 -6363378024471932877, %25
  %5890 = add i64 %5888, %5889
  %5891 = xor i64 %5886, %5873
  %5892 = xor i64 %5891, %5890
  %5893 = xor i64 %5892, %5876
  %5894 = xor i64 %5893, 539397110982780663
  %5895 = xor i64 %5894, %5875
  %5896 = xor i64 %5895, %5887
  %5897 = mul i64 %5872, %5896
  %5898 = trunc i64 %5897 to i32
  %5899 = mul i32 %5898, 17
  %5900 = and i64 %19, 6438933054477153178
  %5901 = or i64 -6438933054477153179, %19
  %5902 = sub i64 %5901, -6438933054477153179
  %5903 = add i64 %77, -3993867239602046330
  %5904 = sub i64 0, %77
  %5905 = add i64 3993867239602046330, %5904
  %5906 = sub i64 0, %5905
  %5907 = xor i64 %5906, %5902
  %5908 = xor i64 %5907, 4201910780087582583
  %5909 = xor i64 %5908, %5903
  %5910 = xor i64 %5909, %5900
  %5911 = add i64 %115, -8647977238419289519
  %5912 = add i64 -2638915626885278648, %115
  %5913 = add i64 %5912, -6009061611534010871
  %5914 = and i64 %9, 4496354814493641262
  %5915 = or i64 -4496354814493641263, %9
  %5916 = sub i64 %5915, -4496354814493641263
  %5917 = and i64 %35, -5617443570671469286
  %5918 = or i64 5617443570671469285, %35
  %5919 = sub i64 %5918, 5617443570671469285
  %5920 = xor i64 %5911, %5919
  %5921 = xor i64 %5920, %5914
  %5922 = xor i64 %5921, %5916
  %5923 = xor i64 %5922, %5913
  %5924 = xor i64 %5923, 1916872481543755731
  %5925 = xor i64 %5924, %5917
  %5926 = mul i64 %5910, %5925
  %5927 = trunc i64 %5926 to i32
  %5928 = add i64 %63, -8284628649563083818
  %5929 = sub i64 0, %63
  %5930 = sub i64 -8284628649563083818, %5929
  %5931 = and i64 %89, 162261648089361512
  %5932 = xor i64 %89, -1
  %5933 = or i64 -162261648089361513, %5932
  %5934 = xor i64 %5933, -1
  %5935 = and i64 %5934, -1
  %5936 = and i64 %35, 6905718564729610341
  %5937 = xor i64 %35, -1
  %5938 = or i64 -6905718564729610342, %5937
  %5939 = xor i64 %5938, -1
  %5940 = and i64 %5939, -1
  %5941 = xor i64 %5931, %5936
  %5942 = xor i64 %5941, %5928
  %5943 = xor i64 %5942, %5930
  %5944 = xor i64 %5943, %5935
  %5945 = xor i64 %5944, -5440836888534710983
  %5946 = xor i64 %5945, %5940
  %5947 = or i64 %83, 7072352253877248340
  %5948 = and i64 7072352253877248340, %83
  %5949 = xor i64 7072352253877248340, %83
  %5950 = or i64 %5948, %5949
  %5951 = add i64 %105, 4586713626440147235
  %5952 = and i64 4586713626440147235, %105
  %5953 = or i64 4586713626440147235, %105
  %5954 = add i64 %5952, %5953
  %5955 = xor i64 %5947, %5954
  %5956 = xor i64 %5955, 314024070357063124
  %5957 = xor i64 %5956, %5951
  %5958 = xor i64 %5957, %5950
  %5959 = mul i64 %5946, %5958
  %5960 = trunc i64 %5959 to i32
  %5961 = sub i32 %5927, %5960
  %5962 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 27
  %5963 = load i32, i32* %5962, align 4
  %5964 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 25
  %5965 = load i32, i32* %5964, align 4
  %5966 = add i32 %5963, %5965
  store i32 %5966, i32* %dispatcher, align 4
  %5967 = load i8*, i8** %40, align 8
  %5968 = load i8, i8* %5967, align 1
  %5969 = mul i8 %5968, 2
  %5970 = mul i8 %5968, 2
  %5971 = and i64 %27, -2599678113344346304
  %5972 = xor i64 %27, -1
  %5973 = or i64 2599678113344346303, %5972
  %5974 = xor i64 %5973, -1
  %5975 = and i64 %5974, -1
  %5976 = or i64 %15, 506703435337145505
  %5977 = xor i64 %15, -1
  %5978 = and i64 506703435337145505, %5977
  %5979 = add i64 %5978, %15
  %5980 = xor i64 %5976, %5979
  %5981 = xor i64 %5980, 2429889237329425861
  %5982 = xor i64 %5981, %5975
  %5983 = xor i64 %5982, %5971
  %5984 = and i64 %87, 1696688024661943088
  %5985 = or i64 -1696688024661943089, %87
  %5986 = sub i64 %5985, -1696688024661943089
  %5987 = or i64 %63, 7330252522880038700
  %5988 = and i64 7330252522880038700, %63
  %5989 = xor i64 7330252522880038700, %63
  %5990 = or i64 %5988, %5989
  %5991 = or i64 %23, 7477966418734815308
  %5992 = xor i64 %23, -1
  %5993 = and i64 7477966418734815308, %5992
  %5994 = add i64 %5993, %23
  %5995 = xor i64 %5991, %5987
  %5996 = xor i64 %5995, %5994
  %5997 = xor i64 %5996, %5990
  %5998 = xor i64 %5997, 7513815965519970842
  %5999 = xor i64 %5998, %5984
  %6000 = xor i64 %5999, %5986
  %6001 = mul i64 %5983, %6000
  %6002 = trunc i64 %6001 to i8
  %6003 = add i8 %6002, %5970
  %6004 = mul i8 %5969, %6003
  %6005 = srem i8 %6004, 4
  %6006 = icmp eq i8 %6005, 0
  %6007 = mul i8 %5968, %5968
  %6008 = mul i8 %6007, %5968
  %6009 = add i8 %6008, %5968
  %6010 = srem i8 %6009, 2
  %6011 = icmp eq i8 %6010, 0
  %6012 = and i1 %6006, %6011
  %6013 = select i1 %6012, i32 388314429, i32 388314410
  %6014 = xor i32 %6013, 23
  store i32 %6014, i32* %4, align 4
  %6015 = call i8** @bf10863455059032886292(i32* %4)
  %6016 = load i8*, i8** %6015, align 8
  indirectbr i8* %6016, [label %loopEnd, label %5748]

6017:                                             ; preds = %6017, %loopStart
  %6018 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 48
  %6019 = load i32, i32* %6018, align 4
  %6020 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %6021 = load i32, i32* %6020, align 4
  %6022 = add i32 %6019, 113188021
  %6023 = sub i32 %6022, %6021
  %6024 = sub i32 %6023, 113188021
  %6025 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 47
  %6026 = load i32, i32* %6025, align 4
  %6027 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %6028 = load i32, i32* %6027, align 4
  %6029 = add i64 %194, -4890805398826222335
  %6030 = add i64 -9128992822071003748, %194
  %6031 = add i64 %6030, 4238187423244781413
  %6032 = add i64 %27, -8725660241655927413
  %6033 = sub i64 0, %27
  %6034 = sub i64 -8725660241655927413, %6033
  %6035 = xor i64 4176914313773435505, %6032
  %6036 = xor i64 %6035, %6034
  %6037 = xor i64 %6036, %6031
  %6038 = xor i64 %6037, %6029
  %6039 = or i64 %190, 1335949249147663983
  %6040 = xor i64 %190, -1
  %6041 = and i64 1335949249147663983, %6040
  %6042 = add i64 %6041, %190
  %6043 = add i64 %11, 5467247191343194907
  %6044 = sub i64 0, %11
  %6045 = sub i64 5467247191343194907, %6044
  %6046 = add i64 %15, -1189431997942521837
  %6047 = add i64 6992675968362659117, %15
  %6048 = add i64 %6047, -8182107966305180954
  %6049 = xor i64 %6046, %6043
  %6050 = xor i64 %6049, %6048
  %6051 = xor i64 %6050, 8719365521071016022
  %6052 = xor i64 %6051, %6039
  %6053 = xor i64 %6052, %6042
  %6054 = xor i64 %6053, %6045
  %6055 = mul i64 %6038, %6054
  %6056 = trunc i64 %6055 to i32
  %6057 = sub i32 %6026, %6056
  %6058 = sub i32 %6057, %6028
  %6059 = add i32 %6058, -1258321418
  %.reload142 = load i1, i1* %.reg2mem141, align 1
  %6060 = select i1 %.reload142, i32 %6024, i32 %6059
  store i32 %6060, i32* %dispatcher, align 4
  %.reload140 = load i32, i32* %.reg2mem139, align 4
  store i32 %.reload140, i32* %.reg2mem166, align 4
  %6061 = load i8*, i8** %24, align 8
  %6062 = load i8, i8* %6061, align 1
  %6063 = mul i8 %6062, 2
  %6064 = mul i8 %6062, 2
  %6065 = and i64 %45, -1639282571367201096
  %6066 = or i64 1639282571367201095, %45
  %6067 = sub i64 %6066, 1639282571367201095
  %6068 = or i64 %37, -1907234200784020572
  %6069 = xor i64 %37, -1
  %6070 = and i64 %6069, 7682568465029255337
  %6071 = and i64 %37, -7682568465029255338
  %6072 = or i64 %6070, %6071
  %6073 = xor i64 -8136364288070317299, %6072
  %6074 = xor i64 %37, -1
  %6075 = or i64 1907234200784020571, %6074
  %6076 = xor i64 %6075, -1
  %6077 = and i64 %6076, -1
  %6078 = or i64 %6073, %6077
  %6079 = xor i64 %6067, %6065
  %6080 = xor i64 %6079, 8736609270997427017
  %6081 = xor i64 %6080, %6078
  %6082 = xor i64 %6081, %6068
  %6083 = and i64 %71, -7629189284665351811
  %6084 = xor i64 %71, -1
  %6085 = xor i64 -7629189284665351811, %6084
  %6086 = and i64 %6085, -7629189284665351811
  %6087 = and i64 %43, 9188647726508527264
  %6088 = or i64 -9188647726508527265, %43
  %6089 = sub i64 %6088, -9188647726508527265
  %6090 = xor i64 %6087, -4063223884737577486
  %6091 = xor i64 %6090, %6089
  %6092 = xor i64 %6091, %6086
  %6093 = xor i64 %6092, %6083
  %6094 = mul i64 %6082, %6093
  %6095 = trunc i64 %6094 to i8
  %6096 = add i8 %6095, %6064
  %6097 = mul i8 %6063, %6096
  %6098 = srem i8 %6097, 4
  %6099 = icmp eq i8 %6098, 0
  %6100 = mul i8 %6062, %6062
  %6101 = mul i8 %6100, %6062
  %6102 = sub i8 %6101, 44
  %6103 = add i8 %6102, %6062
  %6104 = add i8 %6103, 44
  %6105 = srem i8 %6104, 2
  %6106 = icmp eq i8 %6105, 0
  %6107 = and i1 %6099, %6106
  %6108 = select i1 %6107, i32 388314370, i32 388314410
  %6109 = xor i32 %6108, -506848664
  %6110 = xor i32 %6109, -506848704
  store i32 %6110, i32* %4, align 4
  %6111 = call i8** @bf10863455059032886292(i32* %4)
  %6112 = load i8*, i8** %6111, align 8
  indirectbr i8* %6112, [label %loopEnd, label %6017]

6113:                                             ; preds = %6113, %loopStart
  store i64 5221456193252566389, i64* %183, align 8
  %6114 = call i8** @lk13323888900026137679(i64* %183)
  %6115 = load i8*, i8** %6114, align 8
  %6116 = bitcast i8* %6115 to i32 (i8*, ...)*
  %6117 = call i32 (i8*, ...) %6116(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  store i64 5221456193252566386, i64* %183, align 8
  %6118 = call i8** @lk13323888900026137679(i64* %183)
  %6119 = load i8*, i8** %6118, align 8
  %6120 = bitcast i8* %6119 to i32 (float*, float*, i8*, i64)*
  %6121 = and i64 %109, -8018510426323852188
  %6122 = or i64 8018510426323852187, %109
  %6123 = sub i64 %6122, 8018510426323852187
  %6124 = add i64 %21, -8225781779285752103
  %6125 = xor i64 -8225781779285752103, %21
  %6126 = and i64 -8225781779285752103, %21
  %6127 = mul i64 2, %6126
  %6128 = add i64 %6125, %6127
  %6129 = or i64 %188, 6524383159780273330
  %6130 = xor i64 %188, -1
  %6131 = and i64 %6130, 6130568946816952797
  %6132 = and i64 %188, -6130568946816952798
  %6133 = or i64 %6131, %6132
  %6134 = xor i64 1125728466028643695, %6133
  %6135 = xor i64 %188, -1
  %6136 = or i64 -6524383159780273331, %6135
  %6137 = xor i64 %6136, -1
  %6138 = and i64 %6137, -1
  %6139 = or i64 %6134, %6138
  %6140 = xor i64 %6139, %6121
  %6141 = xor i64 %6140, %6128
  %6142 = xor i64 %6141, 5618731212909908313
  %6143 = xor i64 %6142, %6124
  %6144 = xor i64 %6143, %6129
  %6145 = xor i64 %6144, %6123
  %6146 = add i64 %59, 8543818299826998578
  %6147 = xor i64 8543818299826998578, %59
  %6148 = and i64 8543818299826998578, %59
  %6149 = mul i64 2, %6148
  %6150 = add i64 %6147, %6149
  %6151 = add i64 %89, 5559674275355954631
  %6152 = xor i64 5559674275355954631, %89
  %6153 = and i64 5559674275355954631, %89
  %6154 = mul i64 2, %6153
  %6155 = add i64 %6152, %6154
  %6156 = add i64 %57, 310603861105514828
  %6157 = xor i64 310603861105514828, %57
  %6158 = and i64 310603861105514828, %57
  %6159 = mul i64 2, %6158
  %6160 = add i64 %6157, %6159
  %6161 = xor i64 3419850139316748768, %6155
  %6162 = xor i64 %6161, %6160
  %6163 = xor i64 %6162, %6151
  %6164 = xor i64 %6163, %6156
  %6165 = xor i64 %6164, %6150
  %6166 = xor i64 %6165, %6146
  %6167 = mul i64 %6145, %6166
  %6168 = call i32 %6120(float* %0, float* %1, i8* %2, i64 %6167)
  %6169 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %6170 = load i32, i32* %6169, align 4
  %6171 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  %6172 = load i32, i32* %6171, align 4
  %6173 = xor i32 %6170, %6172
  %6174 = and i32 %6170, %6172
  %6175 = mul i32 2, %6174
  %6176 = add i32 %6173, %6175
  store i32 %6176, i32* %dispatcher, align 4
  store i32 %6168, i32* %.reg2mem166, align 4
  %6177 = load i8*, i8** %62, align 8
  %6178 = load i8, i8* %6177, align 1
  %6179 = and i64 %83, 5933429024891343142
  %6180 = xor i64 %83, -1
  %6181 = or i64 -5933429024891343143, %6180
  %6182 = xor i64 %6181, -1
  %6183 = and i64 %6182, -1
  %6184 = add i64 %25, -2514765799940201031
  %6185 = add i64 7458673670986318640, %25
  %6186 = sub i64 %6185, -8473304602783031945
  %6187 = add i64 %202, -3869476482677114408
  %6188 = add i64 2704401550504110620, %202
  %6189 = add i64 %6188, -6573878033181225028
  %6190 = xor i64 %6186, %6187
  %6191 = xor i64 %6190, %6179
  %6192 = xor i64 %6191, %6189
  %6193 = xor i64 %6192, 1299192677363668987
  %6194 = xor i64 %6193, %6183
  %6195 = xor i64 %6194, %6184
  %6196 = add i64 %190, -951826558438891900
  %6197 = and i64 -951826558438891900, %190
  %6198 = or i64 -951826558438891900, %190
  %6199 = add i64 %6197, %6198
  %6200 = and i64 %65, 6381970723399937891
  %6201 = xor i64 %65, -1
  %6202 = or i64 -6381970723399937892, %6201
  %6203 = xor i64 %6202, -1
  %6204 = and i64 %6203, -1
  %6205 = add i64 %55, -4324178097783398852
  %6206 = and i64 -4324178097783398852, %55
  %6207 = or i64 -4324178097783398852, %55
  %6208 = add i64 %6206, %6207
  %6209 = xor i64 %6196, %6200
  %6210 = xor i64 %6209, %6205
  %6211 = xor i64 %6210, %6199
  %6212 = xor i64 %6211, -4179035325117942170
  %6213 = xor i64 %6212, %6208
  %6214 = xor i64 %6213, %6204
  %6215 = mul i64 %6195, %6214
  %6216 = trunc i64 %6215 to i8
  %6217 = mul i8 %6178, %6216
  %6218 = mul i8 %6178, 2
  %6219 = or i64 %67, -2526769762053536205
  %6220 = xor i64 %67, -1
  %6221 = and i64 -2526769762053536205, %6220
  %6222 = add i64 %6221, %67
  %6223 = and i64 %35, -9128203128042624257
  %6224 = or i64 9128203128042624256, %35
  %6225 = sub i64 %6224, 9128203128042624256
  %6226 = and i64 %69, 4483970645669104794
  %6227 = xor i64 %69, -1
  %6228 = or i64 -4483970645669104795, %6227
  %6229 = xor i64 %6228, -1
  %6230 = and i64 %6229, -1
  %6231 = xor i64 2748995783138740183, %6219
  %6232 = xor i64 %6231, %6225
  %6233 = xor i64 %6232, %6226
  %6234 = xor i64 %6233, %6223
  %6235 = xor i64 %6234, %6230
  %6236 = xor i64 %6235, %6222
  %6237 = add i64 %190, 6956715212173966567
  %6238 = xor i64 6956715212173966567, %190
  %6239 = and i64 6956715212173966567, %190
  %6240 = mul i64 2, %6239
  %6241 = add i64 %6238, %6240
  %6242 = add i64 %192, 500916468219907865
  %6243 = add i64 7033862505425710269, %192
  %6244 = sub i64 %6243, 6532946037205802404
  %6245 = xor i64 %6242, %6241
  %6246 = xor i64 %6245, %6237
  %6247 = xor i64 %6246, %6244
  %6248 = xor i64 %6247, -7024221675039639602
  %6249 = mul i64 %6236, %6248
  %6250 = trunc i64 %6249 to i8
  %6251 = xor i8 %6250, %6218
  %6252 = and i8 2, %6218
  %6253 = mul i8 2, %6252
  %6254 = add i8 %6251, %6253
  %6255 = mul i8 39, %6254
  %6256 = add i8 23, %6255
  %6257 = mul i8 -105, %6256
  %6258 = add i8 111, %6257
  %6259 = mul i8 %6217, %6258
  %6260 = srem i8 %6259, 4
  %6261 = icmp eq i8 %6260, 0
  %6262 = mul i8 %6178, %6178
  %6263 = sub i8 0, %6262
  %6264 = sub i8 0, %6178
  %6265 = add i8 %6263, %6264
  %6266 = sub i8 0, %6265
  %6267 = srem i8 %6266, 2
  %6268 = icmp eq i8 %6267, 0
  %6269 = and i1 %6261, %6268
  %6270 = select i1 %6269, i32 388314422, i32 388314410
  %6271 = xor i32 %6270, 28
  store i32 %6271, i32* %4, align 4
  %6272 = call i8** @bf10863455059032886292(i32* %4)
  %6273 = load i8*, i8** %6272, align 8
  indirectbr i8* %6273, [label %loopEnd, label %6113]

6274:                                             ; preds = %6274, %loopStart
  %.reload167 = load i32, i32* %.reg2mem166, align 4
  store i32 %.reload167, i32* %.reg2mem143, align 4
  %.reload4 = load i32, i32* %.reg2mem, align 4
  %6275 = srem i32 %.reload4, 2
  %6276 = icmp eq i32 %6275, 0
  %6277 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %6278 = load i32, i32* %6277, align 4
  %6279 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 27
  %6280 = load i32, i32* %6279, align 4
  %6281 = add i32 %6278, %6280
  %6282 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 56
  %6283 = load i32, i32* %6282, align 4
  %6284 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %6285 = load i32, i32* %6284, align 4
  %6286 = srem i32 %6283, %6285
  %6287 = select i1 %6276, i32 %6281, i32 %6286
  store i32 %6287, i32* %dispatcher, align 4
  %6288 = load i8*, i8** %120, align 8
  %6289 = load i8, i8* %6288, align 1
  %6290 = mul i8 %6289, 2
  %6291 = mul i8 %6289, 2
  %6292 = or i64 %35, -378820056236531734
  %6293 = xor i64 %35, -1
  %6294 = and i64 %6293, -6967132834957068587
  %6295 = and i64 %35, 6967132834957068586
  %6296 = or i64 %6294, %6295
  %6297 = xor i64 7345912724642474303, %6296
  %6298 = xor i64 %35, -1
  %6299 = or i64 378820056236531733, %6298
  %6300 = xor i64 %6299, -1
  %6301 = and i64 %6300, -1
  %6302 = or i64 %6297, %6301
  %6303 = add i64 %65, 1581202486312540145
  %6304 = and i64 1581202486312540145, %65
  %6305 = or i64 1581202486312540145, %65
  %6306 = add i64 %6304, %6305
  %6307 = xor i64 %6306, %6303
  %6308 = xor i64 %6307, %6292
  %6309 = xor i64 %6308, 2041434406480877811
  %6310 = xor i64 %6309, %6302
  %6311 = and i64 %87, 8925171510535671514
  %6312 = xor i64 %87, -1
  %6313 = xor i64 8925171510535671514, %6312
  %6314 = and i64 %6313, 8925171510535671514
  %6315 = add i64 %121, -3107878945198201895
  %6316 = add i64 -484829018304533520, %121
  %6317 = add i64 %6316, -2623049926893668375
  %6318 = add i64 %39, 2448198431458425250
  %6319 = sub i64 0, %39
  %6320 = sub i64 2448198431458425250, %6319
  %6321 = xor i64 %6317, %6315
  %6322 = xor i64 %6321, %6320
  %6323 = xor i64 %6322, %6318
  %6324 = xor i64 %6323, 0
  %6325 = xor i64 %6324, %6314
  %6326 = xor i64 %6325, %6311
  %6327 = mul i64 %6310, %6326
  %6328 = trunc i64 %6327 to i8
  %6329 = sub i8 %6328, %6291
  %6330 = sub i8 2, %6329
  %6331 = mul i8 %6290, %6330
  %6332 = srem i8 %6331, 4
  %6333 = icmp eq i8 %6332, 0
  %6334 = mul i8 %6289, %6289
  %6335 = add i8 %6334, 121
  %6336 = add i8 %6335, %6289
  %6337 = sub i8 %6336, 121
  %6338 = srem i8 %6337, 2
  %6339 = icmp eq i8 %6338, 0
  %6340 = xor i1 %6333, true
  %6341 = and i1 %6340, true
  %6342 = and i1 %6333, false
  %6343 = or i1 %6341, %6342
  %6344 = xor i1 %6339, true
  %6345 = and i1 %6344, true
  %6346 = and i1 %6339, false
  %6347 = or i1 %6345, %6346
  %6348 = xor i1 %6343, %6347
  %6349 = xor i1 %6333, true
  %6350 = and i64 %192, 6996726518762882942
  %6351 = or i64 -6996726518762882943, %192
  %6352 = sub i64 %6351, -6996726518762882943
  %6353 = add i64 %101, 8495083456146045840
  %6354 = xor i64 8495083456146045840, %101
  %6355 = and i64 8495083456146045840, %101
  %6356 = mul i64 2, %6355
  %6357 = add i64 %6354, %6356
  %6358 = xor i64 %6350, %6352
  %6359 = xor i64 %6358, %6353
  %6360 = xor i64 %6359, %6357
  %6361 = xor i64 %6360, -2860069114778484423
  %6362 = add i64 %67, 410937458792504125
  %6363 = xor i64 410937458792504125, %67
  %6364 = and i64 410937458792504125, %67
  %6365 = mul i64 2, %6364
  %6366 = add i64 %6363, %6365
  %6367 = and i64 %27, 632153189090914424
  %6368 = or i64 -632153189090914425, %27
  %6369 = sub i64 %6368, -632153189090914425
  %6370 = xor i64 %6367, %6362
  %6371 = xor i64 %6370, %6369
  %6372 = xor i64 %6371, -8085143956554212087
  %6373 = xor i64 %6372, %6366
  %6374 = mul i64 %6361, %6373
  %6375 = trunc i64 %6374 to i1
  %6376 = xor i1 %6339, %6375
  %6377 = or i1 %6349, %6376
  %6378 = xor i1 %6377, true
  %6379 = and i1 %6378, true
  %6380 = or i1 %6348, %6379
  %6381 = select i1 %6380, i32 388314385, i32 388314410
  %6382 = xor i32 %6381, 59
  store i32 %6382, i32* %4, align 4
  %6383 = call i8** @bf10863455059032886292(i32* %4)
  %6384 = load i8*, i8** %6383, align 8
  indirectbr i8* %6384, [label %loopEnd, label %6274]

codeRepl61:                                       ; preds = %codeRepl61, %loopStart
  %lt.cast65 = bitcast i1* %.loc62 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast65)
  store i64 5221456193252566391, i64* %183, align 8
  %6385 = call i8** @lk13323888900026137679(i64* %183)
  %6386 = load i8*, i8** %6385, align 8
  %6387 = bitcast i8* %6386 to i1 (i32, i32, i1*)*
  %.reload3 = load i32, i32* %.reg2mem, align 4
  %.reload145 = load i32, i32* %.reg2mem143, align 4
  %targetBlock63 = call i1 %6387(i32 %.reload145, i32 %.reload3, i1* %.loc62)
  %.reload64 = load i1, i1* %.loc62, align 1
  store i1 %.reload64, i1* %.reload64.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast65)
  %6388 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 51
  %6389 = load i32, i32* %6388, align 4
  %6390 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %6391 = load i32, i32* %6390, align 4
  %6392 = and i64 %39, 193674976744123662
  %6393 = xor i64 %39, -1
  %6394 = or i64 -193674976744123663, %6393
  %6395 = xor i64 %6394, -1
  %6396 = and i64 %6395, -1
  %6397 = or i64 %33, 7229168125673049441
  %6398 = and i64 7229168125673049441, %33
  %6399 = xor i64 7229168125673049441, %33
  %6400 = or i64 %6398, %6399
  %6401 = xor i64 %6400, %6396
  %6402 = xor i64 %6401, 1145185392743026211
  %6403 = xor i64 %6402, %6397
  %6404 = xor i64 %6403, %6392
  %6405 = or i64 %11, -279082572568075967
  %6406 = xor i64 %11, -1
  %6407 = and i64 %6406, -7304161713725977696
  %6408 = and i64 %11, 7304161713725977695
  %6409 = or i64 %6407, %6408
  %6410 = xor i64 7386493268961864417, %6409
  %6411 = xor i64 %11, -1
  %6412 = or i64 279082572568075966, %6411
  %6413 = xor i64 %6412, -1
  %6414 = and i64 %6413, -1
  %6415 = or i64 %6410, %6414
  %6416 = or i64 %65, 8746037627908548615
  %6417 = and i64 8746037627908548615, %65
  %6418 = xor i64 8746037627908548615, %65
  %6419 = or i64 %6417, %6418
  %6420 = xor i64 %6405, %6415
  %6421 = xor i64 %6420, 0
  %6422 = xor i64 %6421, %6416
  %6423 = xor i64 %6422, %6419
  %6424 = mul i64 %6404, %6423
  %6425 = trunc i64 %6424 to i32
  %6426 = sub i32 %6425, %6391
  %6427 = add i32 %6389, %6426
  %6428 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 53
  %6429 = load i32, i32* %6428, align 4
  %6430 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %6431 = load i32, i32* %6430, align 4
  %6432 = srem i32 %6429, %6431
  %6433 = select i1 %targetBlock63, i32 %6427, i32 %6432
  store i32 %6433, i32* %dispatcher, align 4
  %6434 = load i8*, i8** %66, align 8
  %6435 = load i8, i8* %6434, align 1
  %6436 = mul i8 %6435, %6435
  %6437 = add i8 %6436, %6435
  %6438 = mul i8 %6437, 3
  %6439 = srem i8 %6438, 2
  %6440 = icmp eq i8 %6439, 0
  %6441 = mul i8 %6435, %6435
  %6442 = add i64 %37, 5907144598768127714
  %6443 = add i64 -8973486453520102706, %37
  %6444 = add i64 %6443, -3566113021421321196
  %6445 = add i64 %33, -6698816686415167513
  %6446 = sub i64 0, %33
  %6447 = sub i64 -6698816686415167513, %6446
  %6448 = xor i64 %6444, %6442
  %6449 = xor i64 %6448, %6447
  %6450 = xor i64 %6449, %6445
  %6451 = xor i64 %6450, 2157756441811799479
  %6452 = add i64 %103, 5320126328052041334
  %6453 = add i64 5596833192032107021, %103
  %6454 = add i64 %6453, -276706863980065687
  %6455 = and i64 %202, -2380094438584146410
  %6456 = or i64 2380094438584146409, %202
  %6457 = sub i64 %6456, 2380094438584146409
  %6458 = or i64 %31, -932057455593522104
  %6459 = and i64 -932057455593522104, %31
  %6460 = xor i64 -932057455593522104, %31
  %6461 = or i64 %6459, %6460
  %6462 = xor i64 %6457, %6461
  %6463 = xor i64 %6462, 0
  %6464 = xor i64 %6463, %6458
  %6465 = xor i64 %6464, %6454
  %6466 = xor i64 %6465, %6452
  %6467 = xor i64 %6466, %6455
  %6468 = mul i64 %6451, %6467
  %6469 = trunc i64 %6468 to i8
  %6470 = sub i8 %6469, %6441
  %6471 = sub i8 0, %6435
  %6472 = add i8 %6470, %6471
  %6473 = sub i8 0, %6472
  %6474 = srem i8 %6473, 2
  %6475 = icmp eq i8 %6474, 0
  %6476 = and i1 %6440, %6475
  %6477 = select i1 %6476, i32 388314409, i32 388314410
  %6478 = xor i32 %6477, -447638837
  %6479 = xor i32 %6478, -447638840
  store i32 %6479, i32* %4, align 4
  %6480 = call i8** @bf10863455059032886292(i32* %4)
  %6481 = load i8*, i8** %6480, align 8
  indirectbr i8* %6481, [label %loopEnd, label %codeRepl61]

6482:                                             ; preds = %6482, %loopStart
  %6483 = or i64 %87, -7778506333283826261
  %6484 = xor i64 %87, -1
  %6485 = and i64 %6484, -6407666402710815256
  %6486 = and i64 %87, 6407666402710815255
  %6487 = or i64 %6485, %6486
  %6488 = xor i64 3683474904441337923, %6487
  %6489 = xor i64 %87, -1
  %6490 = or i64 7778506333283826260, %6489
  %6491 = xor i64 %6490, -1
  %6492 = and i64 %6491, -1
  %6493 = or i64 %6488, %6492
  %6494 = add i64 %111, -41301235816412456
  %6495 = sub i64 0, %111
  %6496 = add i64 41301235816412456, %6495
  %6497 = sub i64 0, %6496
  %6498 = or i64 %111, 5765474837793528545
  %6499 = xor i64 %111, -1
  %6500 = and i64 5765474837793528545, %6499
  %6501 = add i64 %6500, %111
  %6502 = xor i64 -8957687006619431305, %6497
  %6503 = xor i64 %6502, %6483
  %6504 = xor i64 %6503, %6494
  %6505 = xor i64 %6504, %6498
  %6506 = xor i64 %6505, %6493
  %6507 = xor i64 %6506, %6501
  %6508 = or i64 %51, 1232332827665388886
  %6509 = xor i64 %51, -1
  %6510 = and i64 1232332827665388886, %6509
  %6511 = add i64 %6510, %51
  %6512 = and i64 %17, 5157447902036545090
  %6513 = or i64 -5157447902036545091, %17
  %6514 = sub i64 %6513, -5157447902036545091
  %6515 = and i64 %113, -6044174005334869530
  %6516 = xor i64 %113, -1
  %6517 = or i64 6044174005334869529, %6516
  %6518 = xor i64 %6517, -1
  %6519 = and i64 %6518, -1
  %6520 = xor i64 %6519, %6514
  %6521 = xor i64 %6520, 6326997774343128947
  %6522 = xor i64 %6521, %6512
  %6523 = xor i64 %6522, %6511
  %6524 = xor i64 %6523, %6515
  %6525 = xor i64 %6524, %6508
  %6526 = mul i64 %6507, %6525
  %6527 = mul i64 119, %6526
  %6528 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 55
  %6529 = load i32, i32* %6528, align 4
  %6530 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %6531 = load i32, i32* %6530, align 4
  %6532 = srem i32 %6529, %6531
  %6533 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %6534 = load i32, i32* %6533, align 4
  %6535 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  %6536 = load i32, i32* %6535, align 4
  %6537 = sub i32 0, %6536
  %6538 = sub i32 %6534, %6537
  %.reload64.reload = load i1, i1* %.reload64.reg2mem, align 1
  %6539 = select i1 %.reload64.reload, i32 %6532, i32 %6538
  store i32 %6539, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem166, align 4
  %6540 = load i8*, i8** %88, align 8
  %6541 = load i8, i8* %6540, align 1
  %6542 = mul i8 %6541, 2
  %6543 = or i64 %121, 8753199168041205538
  %6544 = xor i64 %121, -1
  %6545 = and i64 8753199168041205538, %6544
  %6546 = add i64 %6545, %121
  %6547 = and i64 %49, 7315492755463526118
  %6548 = or i64 -7315492755463526119, %49
  %6549 = sub i64 %6548, -7315492755463526119
  %6550 = xor i64 3712828595383852199, %6543
  %6551 = xor i64 %6550, %6546
  %6552 = xor i64 %6551, %6547
  %6553 = xor i64 %6552, %6549
  %6554 = add i64 %39, 4448156656940913450
  %6555 = sub i64 0, %39
  %6556 = add i64 -4448156656940913450, %6555
  %6557 = sub i64 0, %6556
  %6558 = or i64 %85, 1085337010022547837
  %6559 = and i64 1085337010022547837, %85
  %6560 = xor i64 1085337010022547837, %85
  %6561 = or i64 %6559, %6560
  %6562 = xor i64 %6557, %6561
  %6563 = xor i64 %6562, -8448417116740708818
  %6564 = xor i64 %6563, %6554
  %6565 = xor i64 %6564, %6558
  %6566 = mul i64 %6553, %6565
  %6567 = trunc i64 %6566 to i8
  %6568 = mul i8 %6541, %6567
  %6569 = add i8 2, %6568
  %6570 = mul i8 %6542, %6569
  %6571 = srem i8 %6570, 4
  %6572 = icmp eq i8 %6571, 0
  %6573 = mul i8 %6541, %6541
  %6574 = xor i8 %6573, %6541
  %6575 = and i8 %6573, %6541
  %6576 = mul i8 2, %6575
  %6577 = add i8 %6574, %6576
  %6578 = srem i8 %6577, 2
  %6579 = icmp eq i8 %6578, 0
  %6580 = xor i1 %6579, true
  %6581 = and i1 %6572, %6580
  %6582 = add i1 %6581, %6579
  %6583 = select i1 %6582, i32 388314389, i32 388314410
  %6584 = or i64 %27, 4236532219314381935
  %6585 = and i64 4236532219314381935, %27
  %6586 = xor i64 4236532219314381935, %27
  %6587 = or i64 %6585, %6586
  %6588 = add i64 %73, -3833333943904040296
  %6589 = add i64 3479161949618572606, %73
  %6590 = sub i64 %6589, 7312495893522612902
  %6591 = xor i64 1888929911617905833, %6590
  %6592 = xor i64 %6591, %6584
  %6593 = xor i64 %6592, %6587
  %6594 = xor i64 %6593, %6588
  %6595 = or i64 %83, -3007977317728528266
  %6596 = xor i64 %83, -1
  %6597 = and i64 %6596, -6520557962157283453
  %6598 = and i64 %83, 6520557962157283452
  %6599 = or i64 %6597, %6598
  %6600 = xor i64 8341747904072843253, %6599
  %6601 = xor i64 %83, -1
  %6602 = or i64 3007977317728528265, %6601
  %6603 = xor i64 %6602, -1
  %6604 = and i64 %6603, -1
  %6605 = or i64 %6600, %6604
  %6606 = or i64 %27, 22534910324319367
  %6607 = and i64 22534910324319367, %27
  %6608 = xor i64 22534910324319367, %27
  %6609 = or i64 %6607, %6608
  %6610 = xor i64 %6595, %6609
  %6611 = xor i64 %6610, %6605
  %6612 = xor i64 %6611, -2680615514924685657
  %6613 = xor i64 %6612, %6606
  %6614 = mul i64 %6594, %6613
  %6615 = trunc i64 %6614 to i32
  %6616 = xor i32 %6583, %6615
  store i32 %6616, i32* %4, align 4
  %6617 = call i8** @bf10863455059032886292(i32* %4)
  %6618 = load i8*, i8** %6617, align 8
  indirectbr i8* %6618, [label %loopEnd, label %6482]

6619:                                             ; preds = %6619, %loopStart
  %6620 = and i64 %21, -7007716088275945627
  %6621 = xor i64 %21, -1
  %6622 = xor i64 -7007716088275945627, %6621
  %6623 = and i64 %6622, -7007716088275945627
  %6624 = or i64 %113, 5058503544148768684
  %6625 = and i64 5058503544148768684, %113
  %6626 = xor i64 5058503544148768684, %113
  %6627 = or i64 %6625, %6626
  %6628 = xor i64 -6516631202332907287, %6623
  %6629 = xor i64 %6628, %6627
  %6630 = xor i64 %6629, %6620
  %6631 = xor i64 %6630, %6624
  %6632 = add i64 %71, -116743240234362958
  %6633 = add i64 3376600951701928966, %71
  %6634 = sub i64 %6633, 3493344191936291924
  %6635 = add i64 %21, -5010580793968990740
  %6636 = sub i64 0, %21
  %6637 = sub i64 -5010580793968990740, %6636
  %6638 = and i64 %7, 1675929560781293427
  %6639 = or i64 -1675929560781293428, %7
  %6640 = sub i64 %6639, -1675929560781293428
  %6641 = xor i64 %6634, -6858337488684105121
  %6642 = xor i64 %6641, %6638
  %6643 = xor i64 %6642, %6635
  %6644 = xor i64 %6643, %6632
  %6645 = xor i64 %6644, %6637
  %6646 = xor i64 %6645, %6640
  %6647 = mul i64 %6631, %6646
  %6648 = mul i64 %6647, 117
  %6649 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 52
  %6650 = load i32, i32* %6649, align 4
  %6651 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %6652 = load i32, i32* %6651, align 4
  %6653 = sub i32 %6650, %6652
  store i32 %6653, i32* %dispatcher, align 4
  %6654 = load i8*, i8** %56, align 8
  %6655 = load i8, i8* %6654, align 1
  %6656 = xor i8 %6655, -1
  %6657 = or i8 %6656, -2
  %6658 = xor i8 %6657, -1
  %6659 = and i8 %6658, -1
  %6660 = icmp eq i8 %6659, 0
  %6661 = mul i8 %6655, %6655
  %6662 = xor i8 %6661, %6655
  %6663 = and i8 %6661, %6655
  %6664 = mul i8 2, %6663
  %6665 = add i8 %6662, %6664
  %6666 = mul i8 39, %6665
  %6667 = add i8 23, %6666
  %6668 = mul i8 -105, %6667
  %6669 = add i8 111, %6668
  %6670 = mul i8 %6669, 3
  %6671 = srem i8 %6670, 2
  %6672 = icmp eq i8 %6671, 0
  %6673 = or i1 %6660, %6672
  %6674 = select i1 %6673, i32 388314423, i32 388314410
  %6675 = xor i32 %6674, -1445233930
  %6676 = xor i32 %6675, -1445233941
  store i32 %6676, i32* %4, align 4
  %6677 = call i8** @bf10863455059032886292(i32* %4)
  %6678 = load i8*, i8** %6677, align 8
  indirectbr i8* %6678, [label %loopEnd, label %6619]

6679:                                             ; preds = %6679, %loopStart
  %6680 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 57
  %6681 = load i32, i32* %6680, align 4
  %6682 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 59
  %6683 = load i32, i32* %6682, align 4
  %6684 = srem i32 %6681, %6683
  store i32 %6684, i32* %dispatcher, align 4
  %6685 = load i8*, i8** %6, align 8
  %6686 = load i8, i8* %6685, align 1
  %6687 = mul i8 %6686, 2
  %6688 = mul i8 %6686, 2
  %6689 = or i64 %47, -3060907833515483393
  %6690 = xor i64 %47, -1
  %6691 = and i64 -3060907833515483393, %6690
  %6692 = add i64 %6691, %47
  %6693 = add i64 %190, -1851279422222332449
  %6694 = and i64 -1851279422222332449, %190
  %6695 = or i64 -1851279422222332449, %190
  %6696 = add i64 %6694, %6695
  %6697 = add i64 %33, 5157704555414916486
  %6698 = sub i64 0, %33
  %6699 = sub i64 5157704555414916486, %6698
  %6700 = xor i64 %6697, %6692
  %6701 = xor i64 %6700, -7596402421319102821
  %6702 = xor i64 %6701, %6696
  %6703 = xor i64 %6702, %6699
  %6704 = xor i64 %6703, %6689
  %6705 = xor i64 %6704, %6693
  %6706 = or i64 %103, 4418655752956402156
  %6707 = and i64 4418655752956402156, %103
  %6708 = xor i64 4418655752956402156, %103
  %6709 = or i64 %6707, %6708
  %6710 = add i64 %23, 1783541699393379831
  %6711 = add i64 -959623269203571050, %23
  %6712 = sub i64 %6711, -2743164968596950881
  %6713 = and i64 %87, -3958224151366273057
  %6714 = or i64 3958224151366273056, %87
  %6715 = sub i64 %6714, 3958224151366273056
  %6716 = xor i64 -1974697193757126874, %6709
  %6717 = xor i64 %6716, %6713
  %6718 = xor i64 %6717, %6715
  %6719 = xor i64 %6718, %6710
  %6720 = xor i64 %6719, %6712
  %6721 = xor i64 %6720, %6706
  %6722 = mul i64 %6705, %6721
  %6723 = trunc i64 %6722 to i8
  %6724 = add i8 %6723, %6688
  %6725 = mul i8 %6687, %6724
  %6726 = srem i8 %6725, 4
  %6727 = icmp eq i8 %6726, 0
  %6728 = mul i8 %6686, %6686
  %6729 = mul i8 %6728, %6686
  %6730 = add i8 %6729, %6686
  %6731 = srem i8 %6730, 2
  %6732 = icmp eq i8 %6731, 0
  %6733 = xor i1 %6727, true
  %6734 = or i1 %6733, %6732
  %6735 = xor i1 %6727, true
  %6736 = sub i1 %6734, %6735
  %6737 = select i1 %6736, i32 388314408, i32 388314410
  %6738 = xor i32 %6737, 2
  store i32 %6738, i32* %4, align 4
  %6739 = call i8** @bf10863455059032886292(i32* %4)
  %6740 = load i8*, i8** %6739, align 8
  indirectbr i8* %6740, [label %loopEnd, label %6679]

6741:                                             ; preds = %6741, %loopStart
  %6742 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 31
  %6743 = load i32, i32* %6742, align 4
  %6744 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 29
  %6745 = load i32, i32* %6744, align 4
  %6746 = add i32 %6743, %6745
  store i32 %6746, i32* %dispatcher, align 4
  %6747 = load i8*, i8** %114, align 8
  %6748 = load i8, i8* %6747, align 1
  %6749 = mul i8 %6748, 2
  %6750 = mul i8 %6748, 2
  %6751 = and i8 2, %6750
  %6752 = or i8 2, %6750
  %6753 = add i8 %6751, %6752
  %6754 = mul i8 %6749, %6753
  %6755 = srem i8 %6754, 4
  %6756 = icmp eq i8 %6755, 0
  %6757 = mul i8 %6748, %6748
  %6758 = add i8 %6757, %6748
  %6759 = srem i8 %6758, 2
  %6760 = icmp eq i8 %6759, 0
  %6761 = or i1 %6756, %6760
  %6762 = select i1 %6761, i32 388314380, i32 388314410
  %6763 = xor i32 %6762, 38
  store i32 %6763, i32* %4, align 4
  %6764 = call i8** @bf10863455059032886292(i32* %4)
  %6765 = load i8*, i8** %6764, align 8
  indirectbr i8* %6765, [label %loopEnd, label %6741]

6766:                                             ; preds = %loopStart
  %.reload144 = load i32, i32* %.reg2mem143, align 4
  ret i32 %.reload144

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %6767 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %6767, align 4
  %6768 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 2
  %6769 = or i64 %67, 4788745203965909886
  %6770 = xor i64 %67, -1
  %6771 = and i64 4788745203965909886, %6770
  %6772 = add i64 %6771, %67
  %6773 = and i64 %186, 1038215197468513830
  %6774 = xor i64 %186, -1
  %6775 = xor i64 1038215197468513830, %6774
  %6776 = and i64 %6775, 1038215197468513830
  %6777 = add i64 %91, 3638134223420833063
  %6778 = and i64 3638134223420833063, %91
  %6779 = or i64 3638134223420833063, %91
  %6780 = add i64 %6778, %6779
  %6781 = xor i64 %6776, 9150737295333786873
  %6782 = xor i64 %6781, %6777
  %6783 = xor i64 %6782, %6772
  %6784 = xor i64 %6783, %6769
  %6785 = xor i64 %6784, %6773
  %6786 = xor i64 %6785, %6780
  %6787 = add i64 %65, 7008798281652428830
  %6788 = sub i64 0, %65
  %6789 = sub i64 7008798281652428830, %6788
  %6790 = and i64 %119, -8063268692047667290
  %6791 = xor i64 %119, -1
  %6792 = or i64 8063268692047667289, %6791
  %6793 = xor i64 %6792, -1
  %6794 = and i64 %6793, -1
  %6795 = add i64 %91, -656459649886809008
  %6796 = sub i64 0, %91
  %6797 = sub i64 -656459649886809008, %6796
  %6798 = xor i64 %6789, %6797
  %6799 = xor i64 %6798, %6795
  %6800 = xor i64 %6799, %6790
  %6801 = xor i64 %6800, %6794
  %6802 = xor i64 %6801, -7587507875976610487
  %6803 = xor i64 %6802, %6787
  %6804 = mul i64 %6786, %6803
  %6805 = trunc i64 %6804 to i32
  store i32 %6805, i32* %6768, align 4
  %6806 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %6806, align 4
  %6807 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %6807, align 4
  %6808 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %6808, align 4
  %6809 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %6809, align 4
  %6810 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %6810, align 4
  %6811 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %6811, align 4
  %6812 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %6812, align 4
  %6813 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %6813, align 4
  %6814 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %6814, align 4
  %6815 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 22
  %6816 = or i64 %99, 322122497894374798
  %6817 = and i64 322122497894374798, %99
  %6818 = xor i64 322122497894374798, %99
  %6819 = or i64 %6817, %6818
  %6820 = or i64 %35, -8010302286345633188
  %6821 = xor i64 %35, -1
  %6822 = and i64 -8010302286345633188, %6821
  %6823 = add i64 %6822, %35
  %6824 = and i64 %41, 1292669548501714039
  %6825 = xor i64 %41, -1
  %6826 = or i64 -1292669548501714040, %6825
  %6827 = xor i64 %6826, -1
  %6828 = and i64 %6827, -1
  %6829 = xor i64 %6819, %6823
  %6830 = xor i64 %6829, %6816
  %6831 = xor i64 %6830, 6595094634897461023
  %6832 = xor i64 %6831, %6824
  %6833 = xor i64 %6832, %6828
  %6834 = xor i64 %6833, %6820
  %6835 = and i64 %109, 1107364156584287904
  %6836 = xor i64 %109, -1
  %6837 = xor i64 1107364156584287904, %6836
  %6838 = and i64 %6837, 1107364156584287904
  %6839 = and i64 %93, 5042627176726220840
  %6840 = xor i64 %93, -1
  %6841 = xor i64 5042627176726220840, %6840
  %6842 = and i64 %6841, 5042627176726220840
  %6843 = xor i64 %6839, %6838
  %6844 = xor i64 %6843, 8793305126235723
  %6845 = xor i64 %6844, %6835
  %6846 = xor i64 %6845, %6842
  %6847 = mul i64 %6834, %6846
  %6848 = trunc i64 %6847 to i32
  store i32 %6848, i32* %6815, align 4
  %6849 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 24
  store i32 23, i32* %6849, align 4
  %6850 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 26
  store i32 25, i32* %6850, align 4
  %6851 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 28
  %6852 = add i64 %27, 6183189918818118184
  %6853 = add i64 -3893904306398480622, %27
  %6854 = add i64 %6853, -8369649848492952810
  %6855 = and i64 %69, -5007602328542263435
  %6856 = xor i64 %69, -1
  %6857 = xor i64 -5007602328542263435, %6856
  %6858 = and i64 %6857, -5007602328542263435
  %6859 = xor i64 %6852, %6858
  %6860 = xor i64 %6859, %6854
  %6861 = xor i64 %6860, %6855
  %6862 = xor i64 %6861, 8077688301833168355
  %6863 = add i64 %39, 4761959303681411236
  %6864 = sub i64 0, %39
  %6865 = add i64 -4761959303681411236, %6864
  %6866 = sub i64 0, %6865
  %6867 = add i64 %23, 8073903701624686512
  %6868 = add i64 5922195826809876687, %23
  %6869 = sub i64 %6868, -2151707874814809825
  %6870 = or i64 %188, 7863902758306493736
  %6871 = xor i64 %188, -1
  %6872 = and i64 %6871, -1836480312055101209
  %6873 = and i64 %188, 1836480312055101208
  %6874 = or i64 %6872, %6873
  %6875 = xor i64 -8385224191830934065, %6874
  %6876 = xor i64 %188, -1
  %6877 = or i64 -7863902758306493737, %6876
  %6878 = xor i64 %6877, -1
  %6879 = and i64 %6878, -1
  %6880 = or i64 %6875, %6879
  %6881 = xor i64 %6867, %6880
  %6882 = xor i64 %6881, %6869
  %6883 = xor i64 %6882, -6826607627076660631
  %6884 = xor i64 %6883, %6866
  %6885 = xor i64 %6884, %6870
  %6886 = xor i64 %6885, %6863
  %6887 = mul i64 %6862, %6886
  %6888 = trunc i64 %6887 to i32
  store i32 %6888, i32* %6851, align 4
  %6889 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %6889, align 4
  %6890 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 32
  store i32 31, i32* %6890, align 4
  %6891 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 34
  %6892 = add i64 %190, -3736521347858953295
  %6893 = and i64 -3736521347858953295, %190
  %6894 = or i64 -3736521347858953295, %190
  %6895 = add i64 %6893, %6894
  %6896 = and i64 %73, -7920891021307278734
  %6897 = xor i64 %73, -1
  %6898 = xor i64 -7920891021307278734, %6897
  %6899 = and i64 %6898, -7920891021307278734
  %6900 = add i64 %39, -201530206184067644
  %6901 = add i64 2209208599119061359, %39
  %6902 = add i64 %6901, -2410738805303129003
  %6903 = xor i64 %6895, -2091629365220569405
  %6904 = xor i64 %6903, %6899
  %6905 = xor i64 %6904, %6900
  %6906 = xor i64 %6905, %6896
  %6907 = xor i64 %6906, %6892
  %6908 = xor i64 %6907, %6902
  %6909 = or i64 %31, -7424317828407544527
  %6910 = and i64 -7424317828407544527, %31
  %6911 = xor i64 -7424317828407544527, %31
  %6912 = or i64 %6910, %6911
  %6913 = add i64 %91, 5140519151745037748
  %6914 = sub i64 0, %91
  %6915 = sub i64 5140519151745037748, %6914
  %6916 = xor i64 %6909, %6913
  %6917 = xor i64 %6916, 8210058986416262987
  %6918 = xor i64 %6917, %6912
  %6919 = xor i64 %6918, %6915
  %6920 = mul i64 %6908, %6919
  %6921 = trunc i64 %6920 to i32
  store i32 %6921, i32* %6891, align 4
  %6922 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 36
  store i32 35, i32* %6922, align 4
  %6923 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 38
  store i32 37, i32* %6923, align 4
  %6924 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 40
  store i32 39, i32* %6924, align 4
  %6925 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 42
  %6926 = and i64 %31, -8710876685080311561
  %6927 = or i64 8710876685080311560, %31
  %6928 = sub i64 %6927, 8710876685080311560
  %6929 = or i64 %192, 4909679289279534085
  %6930 = and i64 4909679289279534085, %192
  %6931 = xor i64 4909679289279534085, %192
  %6932 = or i64 %6930, %6931
  %6933 = xor i64 -6094496904854036147, %6932
  %6934 = xor i64 %6933, %6926
  %6935 = xor i64 %6934, %6929
  %6936 = xor i64 %6935, %6928
  %6937 = add i64 %190, -3204187198364050641
  %6938 = add i64 3229361673231368376, %190
  %6939 = add i64 %6938, -6433548871595419017
  %6940 = and i64 %55, -2034606500962731033
  %6941 = xor i64 %55, -1
  %6942 = or i64 2034606500962731032, %6941
  %6943 = xor i64 %6942, -1
  %6944 = and i64 %6943, -1
  %6945 = xor i64 487955677581077581, %6937
  %6946 = xor i64 %6945, %6944
  %6947 = xor i64 %6946, %6940
  %6948 = xor i64 %6947, %6939
  %6949 = mul i64 %6936, %6948
  %6950 = trunc i64 %6949 to i32
  store i32 %6950, i32* %6925, align 4
  %6951 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 44
  store i32 43, i32* %6951, align 4
  %6952 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 46
  store i32 45, i32* %6952, align 4
  %6953 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 48
  store i32 47, i32* %6953, align 4
  %6954 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 50
  store i32 49, i32* %6954, align 4
  %6955 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 52
  store i32 51, i32* %6955, align 4
  %6956 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 54
  store i32 53, i32* %6956, align 4
  %6957 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 56
  store i32 55, i32* %6957, align 4
  %6958 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 58
  store i32 57, i32* %6958, align 4
  %6959 = getelementptr inbounds [60 x i32], [60 x i32]* %lookupTable, i32 0, i32 0
  %6960 = load i32, i32* %6959, align 4
  store i32 %6960, i32* %dispatcher, align 4
  %6961 = load i8*, i8** %26, align 8
  %6962 = load i8, i8* %6961, align 1
  %6963 = mul i8 %6962, 2
  %6964 = or i64 %73, 1026262299287191230
  %6965 = xor i64 %73, -1
  %6966 = and i64 %6965, 1115424797925931563
  %6967 = and i64 %73, -1115424797925931564
  %6968 = or i64 %6966, %6967
  %6969 = xor i64 91423215387804821, %6968
  %6970 = xor i64 %73, -1
  %6971 = or i64 -1026262299287191231, %6970
  %6972 = xor i64 %6971, -1
  %6973 = and i64 %6972, -1
  %6974 = or i64 %6969, %6973
  %6975 = add i64 %85, -6721253242355672079
  %6976 = add i64 4930321355257732215, %85
  %6977 = add i64 %6976, 6795169476096147322
  %6978 = and i64 %105, -8610916512933049182
  %6979 = xor i64 %105, -1
  %6980 = xor i64 -8610916512933049182, %6979
  %6981 = and i64 %6980, -8610916512933049182
  %6982 = xor i64 %6964, %6977
  %6983 = xor i64 %6982, %6978
  %6984 = xor i64 %6983, %6974
  %6985 = xor i64 %6984, %6975
  %6986 = xor i64 %6985, %6981
  %6987 = xor i64 %6986, -5422951320498441117
  %6988 = add i64 %99, -3652368548297226535
  %6989 = sub i64 0, %99
  %6990 = sub i64 -3652368548297226535, %6989
  %6991 = and i64 %53, 4489505754669433002
  %6992 = or i64 -4489505754669433003, %53
  %6993 = sub i64 %6992, -4489505754669433003
  %6994 = xor i64 %6988, %6993
  %6995 = xor i64 %6994, %6990
  %6996 = xor i64 %6995, -1418843886447273322
  %6997 = xor i64 %6996, %6991
  %6998 = mul i64 %6987, %6997
  %6999 = trunc i64 %6998 to i8
  %7000 = mul i8 %6962, %6999
  %7001 = add i8 2, %7000
  %7002 = mul i8 %6963, %7001
  %7003 = srem i8 %7002, 4
  %7004 = icmp eq i8 %7003, 0
  %7005 = mul i8 %6962, %6962
  %7006 = mul i8 %7005, %6962
  %7007 = add i8 %7006, %6962
  %7008 = add i64 %41, -6208326555429381164
  %7009 = and i64 -6208326555429381164, %41
  %7010 = or i64 -6208326555429381164, %41
  %7011 = add i64 %7009, %7010
  %7012 = and i64 %198, -5179040866550250646
  %7013 = or i64 5179040866550250645, %198
  %7014 = sub i64 %7013, 5179040866550250645
  %7015 = and i64 %59, -1264290015409004073
  %7016 = or i64 1264290015409004072, %59
  %7017 = sub i64 %7016, 1264290015409004072
  %7018 = xor i64 %7012, %7017
  %7019 = xor i64 %7018, -1352949131648097877
  %7020 = xor i64 %7019, %7015
  %7021 = xor i64 %7020, %7014
  %7022 = xor i64 %7021, %7008
  %7023 = xor i64 %7022, %7011
  %7024 = and i64 %49, -1563999652058722350
  %7025 = xor i64 %49, -1
  %7026 = xor i64 -1563999652058722350, %7025
  %7027 = and i64 %7026, -1563999652058722350
  %7028 = add i64 %115, 8862283462658419197
  %7029 = sub i64 0, %115
  %7030 = add i64 -8862283462658419197, %7029
  %7031 = sub i64 0, %7030
  %7032 = add i64 %87, 6673603839690098758
  %7033 = add i64 -8725745857364667075, %87
  %7034 = add i64 %7033, -3047394376654785783
  %7035 = xor i64 -8773775311480184314, %7034
  %7036 = xor i64 %7035, %7032
  %7037 = xor i64 %7036, %7024
  %7038 = xor i64 %7037, %7027
  %7039 = xor i64 %7038, %7028
  %7040 = xor i64 %7039, %7031
  %7041 = mul i64 %7023, %7040
  %7042 = trunc i64 %7041 to i8
  %7043 = srem i8 %7007, %7042
  %7044 = icmp eq i8 %7043, 0
  %7045 = or i64 %192, 5740323787378080169
  %7046 = and i64 5740323787378080169, %192
  %7047 = xor i64 5740323787378080169, %192
  %7048 = or i64 %7046, %7047
  %7049 = and i64 %192, 1308102283624831021
  %7050 = xor i64 %192, -1
  %7051 = xor i64 1308102283624831021, %7050
  %7052 = and i64 %7051, 1308102283624831021
  %7053 = xor i64 %7052, -5270802084392880927
  %7054 = xor i64 %7053, %7049
  %7055 = xor i64 %7054, %7048
  %7056 = xor i64 %7055, %7045
  %7057 = or i64 %97, 1701980374400754681
  %7058 = and i64 1701980374400754681, %97
  %7059 = xor i64 1701980374400754681, %97
  %7060 = or i64 %7058, %7059
  %7061 = and i64 %194, 1252752639282395823
  %7062 = xor i64 %194, -1
  %7063 = or i64 -1252752639282395824, %7062
  %7064 = xor i64 %7063, -1
  %7065 = and i64 %7064, -1
  %7066 = add i64 %49, -8889717313198097720
  %7067 = add i64 -3520687843025135258, %49
  %7068 = add i64 %7067, -5369029470172962462
  %7069 = xor i64 %7060, -7556978786967711967
  %7070 = xor i64 %7069, %7057
  %7071 = xor i64 %7070, %7068
  %7072 = xor i64 %7071, %7066
  %7073 = xor i64 %7072, %7061
  %7074 = xor i64 %7073, %7065
  %7075 = mul i64 %7056, %7074
  %7076 = trunc i64 %7075 to i1
  %7077 = xor i1 %7044, %7076
  %7078 = xor i1 %7004, %7077
  %7079 = and i1 %7078, %7004
  %7080 = select i1 %7079, i32 388314397, i32 388314380
  %7081 = xor i32 %7080, -1
  %7082 = and i32 %7081, 490981076
  %7083 = and i32 %7080, -490981077
  %7084 = or i32 %7082, %7083
  %7085 = xor i32 %7084, 490981061
  store i32 %7085, i32* %4, align 4
  %7086 = call i8** @bf10863455059032886292(i32* %4)
  %7087 = load i8*, i8** %7086, align 8
  indirectbr i8* %7087, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %7088 = load i8*, i8** %122, align 8
  %7089 = load i8, i8* %7088, align 1
  %7090 = xor i8 %7089, -2
  %7091 = and i8 %7090, %7089
  %7092 = icmp eq i8 %7091, 1
  %7093 = mul i8 %7089, %7089
  %7094 = add i8 %7093, %7089
  %7095 = srem i8 %7094, 2
  %7096 = icmp eq i8 %7095, 0
  %7097 = or i1 %7092, %7096
  %7098 = and i64 %61, -7144387295999834120
  %7099 = xor i64 %61, -1
  %7100 = or i64 7144387295999834119, %7099
  %7101 = xor i64 %7100, -1
  %7102 = and i64 %7101, -1
  %7103 = and i64 %91, -4078669764430178867
  %7104 = xor i64 %91, -1
  %7105 = xor i64 -4078669764430178867, %7104
  %7106 = and i64 %7105, -4078669764430178867
  %7107 = or i64 %15, -5396576704500613233
  %7108 = and i64 -5396576704500613233, %15
  %7109 = xor i64 -5396576704500613233, %15
  %7110 = or i64 %7108, %7109
  %7111 = xor i64 %7106, 2721031870561739059
  %7112 = xor i64 %7111, %7110
  %7113 = xor i64 %7112, %7103
  %7114 = xor i64 %7113, %7107
  %7115 = xor i64 %7114, %7102
  %7116 = xor i64 %7115, %7098
  %7117 = and i64 %101, -5866761937966864071
  %7118 = xor i64 %101, -1
  %7119 = xor i64 -5866761937966864071, %7118
  %7120 = and i64 %7119, -5866761937966864071
  %7121 = add i64 %13, 2977823385172030983
  %7122 = xor i64 2977823385172030983, %13
  %7123 = and i64 2977823385172030983, %13
  %7124 = mul i64 2, %7123
  %7125 = add i64 %7122, %7124
  %7126 = xor i64 %7117, -1205391484392079129
  %7127 = xor i64 %7126, %7125
  %7128 = xor i64 %7127, %7121
  %7129 = xor i64 %7128, %7120
  %7130 = mul i64 %7116, %7129
  %7131 = trunc i64 %7130 to i32
  %7132 = select i1 %7097, i32 %7131, i32 388314410
  %7133 = or i32 %7132, 47
  %7134 = or i64 %200, 3714653515867077531
  %7135 = xor i64 %200, -1
  %7136 = and i64 %7135, -9219512472759093279
  %7137 = and i64 %200, 9219512472759093278
  %7138 = or i64 %7136, %7137
  %7139 = xor i64 -5512212490957583238, %7138
  %7140 = xor i64 %200, -1
  %7141 = or i64 -3714653515867077532, %7140
  %7142 = xor i64 %7141, -1
  %7143 = and i64 %7142, -1
  %7144 = or i64 %7139, %7143
  %7145 = and i64 %27, -921762110303240483
  %7146 = xor i64 %27, -1
  %7147 = or i64 921762110303240482, %7146
  %7148 = xor i64 %7147, -1
  %7149 = and i64 %7148, -1
  %7150 = xor i64 %7134, -3677432267511212603
  %7151 = xor i64 %7150, %7149
  %7152 = xor i64 %7151, %7145
  %7153 = xor i64 %7152, %7144
  %7154 = add i64 %67, -2545960815658093360
  %7155 = sub i64 0, %67
  %7156 = add i64 2545960815658093360, %7155
  %7157 = sub i64 0, %7156
  %7158 = and i64 %79, -5021512598826560016
  %7159 = xor i64 %79, -1
  %7160 = xor i64 -5021512598826560016, %7159
  %7161 = and i64 %7160, -5021512598826560016
  %7162 = xor i64 %7158, %7161
  %7163 = xor i64 %7162, %7154
  %7164 = xor i64 %7163, %7157
  %7165 = xor i64 %7164, -5231970982851456669
  %7166 = mul i64 %7153, %7165
  %7167 = trunc i64 %7166 to i32
  %7168 = and i32 %7132, %7167
  %7169 = sub i32 %7133, %7168
  store i32 %7169, i32* %4, align 4
  %7170 = call i8** @bf10863455059032886292(i32* %4)
  %7171 = load i8*, i8** %7170, align 8
  indirectbr i8* %7171, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %6741, %6679, %6619, %6482, %codeRepl61, %6274, %6113, %6017, %5748, %5696, %5638, %5574, %5451, %5396, %5327, %5124, %.loopexit, %4937, %4354, %4129, %4099, %4050, %3965, %3847, %3689, %3612, %codeRepl53, %3385, %3282, %3257, %3047, %2953, %2858, %2687, %2500, %2403, %codeRepl48, %2187, %codeRepl46, %2026, %codeRepl30, %1651, %1579, %1485, %1242, %.preheader, %835, %771, %675, %codeRepl4, %484, %460, %codeRepl, %EntryBasicBlockSplit
  %7172 = load i8*, i8** %58, align 8
  %7173 = load i8, i8* %7172, align 1
  %7174 = mul i8 %7173, 2
  %7175 = mul i8 %7173, 2
  %7176 = add i8 2, %7175
  %7177 = mul i8 %7174, %7176
  %7178 = srem i8 %7177, 4
  %7179 = icmp eq i8 %7178, 0
  %7180 = mul i8 %7173, %7173
  %7181 = add i8 %7180, %7173
  %7182 = srem i8 %7181, 2
  %7183 = or i64 %101, -84977004783967426
  %7184 = xor i64 %101, -1
  %7185 = and i64 %7184, 7974032408578835157
  %7186 = and i64 %101, -7974032408578835158
  %7187 = or i64 %7185, %7186
  %7188 = xor i64 -8035708269277404693, %7187
  %7189 = xor i64 %101, -1
  %7190 = or i64 84977004783967425, %7189
  %7191 = xor i64 %7190, -1
  %7192 = and i64 %7191, -1
  %7193 = or i64 %7188, %7192
  %7194 = or i64 %81, -7876372110012749834
  %7195 = xor i64 %81, -1
  %7196 = and i64 %7195, -3694161975092441780
  %7197 = and i64 %81, 3694161975092441779
  %7198 = or i64 %7196, %7197
  %7199 = xor i64 6776283609544878778, %7198
  %7200 = xor i64 %81, -1
  %7201 = or i64 7876372110012749833, %7200
  %7202 = xor i64 %7201, -1
  %7203 = and i64 %7202, -1
  %7204 = or i64 %7199, %7203
  %7205 = and i64 %194, 5488935533595713394
  %7206 = xor i64 %194, -1
  %7207 = xor i64 5488935533595713394, %7206
  %7208 = and i64 %7207, 5488935533595713394
  %7209 = xor i64 %7194, -4235444608178639987
  %7210 = xor i64 %7209, %7208
  %7211 = xor i64 %7210, %7183
  %7212 = xor i64 %7211, %7205
  %7213 = xor i64 %7212, %7204
  %7214 = xor i64 %7213, %7193
  %7215 = add i64 %9, 6098451930550436314
  %7216 = xor i64 6098451930550436314, %9
  %7217 = and i64 6098451930550436314, %9
  %7218 = mul i64 2, %7217
  %7219 = add i64 %7216, %7218
  %7220 = or i64 %27, -6129855331234406367
  %7221 = xor i64 %27, -1
  %7222 = and i64 %7221, -1093286268176159325
  %7223 = and i64 %27, 1093286268176159324
  %7224 = or i64 %7222, %7223
  %7225 = xor i64 6502561123402845570, %7224
  %7226 = xor i64 %27, -1
  %7227 = or i64 6129855331234406366, %7226
  %7228 = xor i64 %7227, -1
  %7229 = and i64 %7228, -1
  %7230 = or i64 %7225, %7229
  %7231 = xor i64 %7230, %7220
  %7232 = xor i64 %7231, 0
  %7233 = xor i64 %7232, %7215
  %7234 = xor i64 %7233, %7219
  %7235 = mul i64 %7214, %7234
  %7236 = trunc i64 %7235 to i8
  %7237 = icmp eq i8 %7182, %7236
  %7238 = and i1 %7179, %7237
  %7239 = xor i1 %7179, %7237
  %7240 = or i1 %7238, %7239
  %7241 = select i1 %7240, i32 388314427, i32 388314401
  %7242 = xor i32 %7241, -1
  %7243 = and i32 %7242, 26
  %7244 = and i32 %7241, -27
  %7245 = or i32 %7243, %7244
  store i32 %7245, i32* %4, align 4
  %7246 = call i8** @bf10863455059032886292(i32* %4)
  %7247 = load i8*, i8** %7246, align 8
  indirectbr i8* %7247, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @wait() unnamed_addr #5 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %4 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10964148096910173402, i32 0, i64 %3
  store i8* bitcast (i32 (i32)* @"\01_usleep" to i8*), i8** %4, align 8
  store i64 5221456193252566390, i64* %2, align 8
  %5 = call i8** @lk16790370311123254137(i64* %2)
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8* %6 to i32 (i32)*
  %8 = call i32 %7(i32 30000)
  ret void
}

; Function Attrs: nofree noinline nosync nounwind ssp uwtable
define internal fastcc i32 @inner_loop(float %0, float* readonly %1, float* readonly %2, i8* %3, float* %4) unnamed_addr #6 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h9549842938191327224(i64 388314413)
  %7 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %6
  store i8* blockaddress(@inner_loop, %"24"), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314423)
  %9 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %8
  store i8* blockaddress(@inner_loop, %.loopexit), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314420)
  %11 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %10
  store i8* blockaddress(@inner_loop, %codeRepl86), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314401)
  %13 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %12
  store i8* blockaddress(@inner_loop, %"19"), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314409)
  %15 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %14
  store i8* blockaddress(@inner_loop, %"10"), i8** %15, align 8
  %16 = call i64 @h9549842938191327224(i64 388314422)
  %17 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %16
  store i8* blockaddress(@inner_loop, %codeRepl26), i8** %17, align 8
  %18 = call i64 @h9549842938191327224(i64 388314428)
  %19 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %18
  store i8* blockaddress(@inner_loop, %codeRepl34), i8** %19, align 8
  %20 = call i64 @h9549842938191327224(i64 388314412)
  %21 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %20
  store i8* blockaddress(@inner_loop, %"17"), i8** %21, align 8
  %22 = call i64 @h9549842938191327224(i64 388314411)
  %23 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %22
  store i8* blockaddress(@inner_loop, %"13"), i8** %23, align 8
  %24 = call i64 @h9549842938191327224(i64 388314403)
  %25 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %24
  store i8* blockaddress(@inner_loop, %"16"), i8** %25, align 8
  %26 = call i64 @h9549842938191327224(i64 388314408)
  %27 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %26
  store i8* blockaddress(@inner_loop, %"22"), i8** %27, align 8
  %28 = call i64 @h9549842938191327224(i64 388314405)
  %29 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %28
  store i8* blockaddress(@inner_loop, %"21"), i8** %29, align 8
  %30 = call i64 @h9549842938191327224(i64 388314415)
  %31 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %30
  store i8* blockaddress(@inner_loop, %"14"), i8** %31, align 8
  %32 = call i64 @h9549842938191327224(i64 388314406)
  %33 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %32
  store i8* blockaddress(@inner_loop, %codeRepl15), i8** %33, align 8
  %34 = call i64 @h9549842938191327224(i64 388314418)
  %35 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %34
  store i8* blockaddress(@inner_loop, %"9"), i8** %35, align 8
  %36 = call i64 @h9549842938191327224(i64 388314416)
  %37 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %36
  store i8* blockaddress(@inner_loop, %"8"), i8** %37, align 8
  %38 = call i64 @h9549842938191327224(i64 388314400)
  %39 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %38
  store i8* blockaddress(@inner_loop, %"2"), i8** %39, align 8
  %40 = call i64 @h9549842938191327224(i64 388314417)
  %41 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %40
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %41, align 8
  %42 = call i64 @h9549842938191327224(i64 388314429)
  %43 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %42
  store i8* blockaddress(@inner_loop, %"5"), i8** %43, align 8
  %44 = call i64 @h9549842938191327224(i64 388314414)
  %45 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %44
  store i8* blockaddress(@inner_loop, %"7"), i8** %45, align 8
  %46 = call i64 @h9549842938191327224(i64 388314402)
  %47 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %46
  store i8* blockaddress(@inner_loop, %"11"), i8** %47, align 8
  %48 = call i64 @h9549842938191327224(i64 388314419)
  %49 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %48
  store i8* blockaddress(@inner_loop, %codeRepl10), i8** %49, align 8
  %50 = call i64 @h9549842938191327224(i64 388314421)
  %51 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %50
  store i8* blockaddress(@inner_loop, %EntryBasicBlockSplit), i8** %51, align 8
  %52 = call i64 @h9549842938191327224(i64 388314407)
  %53 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %52
  store i8* blockaddress(@inner_loop, %"3"), i8** %53, align 8
  %54 = call i64 @h9549842938191327224(i64 388314404)
  %55 = getelementptr [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %54
  store i8* blockaddress(@inner_loop, %BogusBasciBlock), i8** %55, align 8
  %.reg2mem227 = alloca i32, align 4
  %.reg2mem225 = alloca i1, align 1
  %.reg2mem223 = alloca i1, align 1
  %.reg2mem221 = alloca i1, align 1
  %.reg2mem219 = alloca double, align 8
  %.reg2mem216 = alloca i1, align 1
  %.reg2mem212 = alloca i1, align 1
  %.reg2mem209 = alloca i1, align 1
  %.reg2mem206 = alloca i1, align 1
  %.reg2mem203 = alloca i1, align 1
  %.reg2mem199 = alloca i1, align 1
  %.reg2mem196 = alloca i1, align 1
  %.reg2mem193 = alloca i1, align 1
  %.reg2mem190 = alloca i1, align 1
  %.reg2mem187 = alloca i1, align 1
  %.reg2mem184 = alloca i1, align 1
  %.reg2mem181 = alloca i1, align 1
  %.reg2mem178 = alloca i1, align 1
  %.reg2mem175 = alloca i1, align 1
  %.reg2mem170 = alloca i1, align 1
  %.reg2mem167 = alloca i32, align 4
  %.reg2mem164 = alloca i32, align 4
  %.reg2mem159 = alloca i1, align 1
  %.reg2mem153 = alloca i32, align 4
  %.reg2mem151 = alloca i8*, align 8
  %.reg2mem149 = alloca i8, align 1
  %.reload22.reg2mem = alloca float*, align 8
  %.reload21.reg2mem = alloca i64, align 8
  %.reload20.reg2mem = alloca i32, align 4
  %.reload13.reg2mem = alloca i1, align 1
  %.reload6.reg2mem = alloca i1, align 1
  %.reload5.reg2mem = alloca i32, align 4
  %.reload4.reg2mem = alloca i32, align 4
  %.reload.reg2mem = alloca i32, align 4
  %.reg2mem146 = alloca i32, align 4
  %.reg2mem142 = alloca i32, align 4
  %.reg2mem139 = alloca i32, align 4
  %.reg2mem130 = alloca i32, align 4
  %.reg2mem125 = alloca float, align 4
  %.reg2mem121 = alloca double, align 8
  %.reg2mem118 = alloca float, align 4
  %.reg2mem115 = alloca float, align 4
  %.reg2mem111 = alloca float, align 4
  %.reg2mem109 = alloca i1, align 1
  %.reg2mem107 = alloca i1, align 1
  %.reg2mem103 = alloca i8**, align 8
  %.reg2mem100 = alloca i8**, align 8
  %.reg2mem95 = alloca i8**, align 8
  %.reg2mem91 = alloca i8**, align 8
  %.reg2mem88 = alloca i8**, align 8
  %.reg2mem84 = alloca i8**, align 8
  %.reg2mem81 = alloca i8**, align 8
  %.reg2mem77 = alloca i8**, align 8
  %.reg2mem74 = alloca i8**, align 8
  %.reg2mem71 = alloca i8**, align 8
  %.reg2mem52 = alloca i8**, align 8
  %.reg2mem48 = alloca i8**, align 8
  %.reg2mem44 = alloca i8**, align 8
  %.reg2mem41 = alloca i8**, align 8
  %.reg2mem37 = alloca i8**, align 8
  %.reg2mem33 = alloca i8**, align 8
  %.reg2mem28 = alloca i8**, align 8
  %.reg2mem25 = alloca i8**, align 8
  %.reg2mem20 = alloca i8**, align 8
  %.reg2mem17 = alloca i8**, align 8
  %.reg2mem13 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 25, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop, %BogusBasciBlock), i8** %56, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %57, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %58 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %58, i8*** %.reg2mem4, align 8
  %.reload8 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@inner_loop, %"2"), i8** %.reload8, align 8
  %59 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %59, i8*** %.reg2mem9, align 8
  %.reload12 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@inner_loop, %"3"), i8** %.reload12, align 8
  %60 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %60, i8*** %.reg2mem13, align 8
  %.reload16 = load i8**, i8*** %.reg2mem13, align 8
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %.reload16, align 8
  %61 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %61, i8*** %.reg2mem17, align 8
  %.reload19 = load i8**, i8*** %.reg2mem17, align 8
  store i8* blockaddress(@inner_loop, %"5"), i8** %.reload19, align 8
  %62 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %62, i8*** %.reg2mem20, align 8
  %.reload24 = load i8**, i8*** %.reg2mem20, align 8
  store i8* blockaddress(@inner_loop, %codeRepl10), i8** %.reload24, align 8
  %63 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %63, i8*** %.reg2mem25, align 8
  %.reload27 = load i8**, i8*** %.reg2mem25, align 8
  store i8* blockaddress(@inner_loop, %"7"), i8** %.reload27, align 8
  %64 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %64, i8*** %.reg2mem28, align 8
  %.reload32 = load i8**, i8*** %.reg2mem28, align 8
  store i8* blockaddress(@inner_loop, %"8"), i8** %.reload32, align 8
  %65 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %65, i8*** %.reg2mem33, align 8
  %.reload36 = load i8**, i8*** %.reg2mem33, align 8
  store i8* blockaddress(@inner_loop, %"9"), i8** %.reload36, align 8
  %66 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %66, i8*** %.reg2mem37, align 8
  %.reload40 = load i8**, i8*** %.reg2mem37, align 8
  store i8* blockaddress(@inner_loop, %"10"), i8** %.reload40, align 8
  %67 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %67, i8*** %.reg2mem41, align 8
  %.reload43 = load i8**, i8*** %.reg2mem41, align 8
  store i8* blockaddress(@inner_loop, %"11"), i8** %.reload43, align 8
  %68 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %68, i8*** %.reg2mem44, align 8
  %.reload47 = load i8**, i8*** %.reg2mem44, align 8
  store i8* blockaddress(@inner_loop, %codeRepl15), i8** %.reload47, align 8
  %69 = getelementptr i8*, i8** %JumpTable, i32 13
  store i8** %69, i8*** %.reg2mem48, align 8
  %.reload51 = load i8**, i8*** %.reg2mem48, align 8
  store i8* blockaddress(@inner_loop, %"13"), i8** %.reload51, align 8
  %70 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8** %70, i8*** %.reg2mem52, align 8
  %.reload70 = load i8**, i8*** %.reg2mem52, align 8
  store i8* blockaddress(@inner_loop, %"14"), i8** %.reload70, align 8
  %71 = getelementptr i8*, i8** %JumpTable, i32 15
  store i8** %71, i8*** %.reg2mem71, align 8
  %.reload73 = load i8**, i8*** %.reg2mem71, align 8
  store i8* blockaddress(@inner_loop, %codeRepl26), i8** %.reload73, align 8
  %72 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8** %72, i8*** %.reg2mem74, align 8
  %.reload76 = load i8**, i8*** %.reg2mem74, align 8
  store i8* blockaddress(@inner_loop, %"16"), i8** %.reload76, align 8
  %73 = getelementptr i8*, i8** %JumpTable, i32 17
  store i8** %73, i8*** %.reg2mem77, align 8
  %.reload80 = load i8**, i8*** %.reg2mem77, align 8
  store i8* blockaddress(@inner_loop, %"17"), i8** %.reload80, align 8
  %74 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8** %74, i8*** %.reg2mem81, align 8
  %.reload83 = load i8**, i8*** %.reg2mem81, align 8
  store i8* blockaddress(@inner_loop, %codeRepl34), i8** %.reload83, align 8
  %75 = getelementptr i8*, i8** %JumpTable, i32 19
  store i8** %75, i8*** %.reg2mem84, align 8
  %.reload87 = load i8**, i8*** %.reg2mem84, align 8
  store i8* blockaddress(@inner_loop, %"19"), i8** %.reload87, align 8
  %76 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8** %76, i8*** %.reg2mem88, align 8
  %.reload90 = load i8**, i8*** %.reg2mem88, align 8
  store i8* blockaddress(@inner_loop, %codeRepl86), i8** %.reload90, align 8
  %77 = getelementptr i8*, i8** %JumpTable, i32 21
  store i8** %77, i8*** %.reg2mem91, align 8
  %.reload94 = load i8**, i8*** %.reg2mem91, align 8
  store i8* blockaddress(@inner_loop, %"21"), i8** %.reload94, align 8
  %78 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8** %78, i8*** %.reg2mem95, align 8
  %.reload99 = load i8**, i8*** %.reg2mem95, align 8
  store i8* blockaddress(@inner_loop, %"22"), i8** %.reload99, align 8
  %79 = getelementptr i8*, i8** %JumpTable, i32 23
  store i8** %79, i8*** %.reg2mem100, align 8
  %.reload102 = load i8**, i8*** %.reg2mem100, align 8
  store i8* blockaddress(@inner_loop, %.loopexit), i8** %.reload102, align 8
  %80 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8** %80, i8*** %.reg2mem103, align 8
  %.reload106 = load i8**, i8*** %.reg2mem103, align 8
  store i8* blockaddress(@inner_loop, %"24"), i8** %.reload106, align 8
  %81 = alloca i64, align 8
  %82 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %83 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %82
  store i8* bitcast (i1 (i32, i32, i32, i32*, i32*, i32*, i1*)* @inner_loop.extracted to i8*), i8** %83, align 8
  %84 = call i64 @m1252811912226950246(i64 5221456193252566387)
  %85 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %84
  store i8* bitcast (i1 (i32, i32, i1*)* @inner_loop.extracted.22 to i8*), i8** %85, align 8
  %86 = call i64 @m1252811912226950246(i64 5221456193252566386)
  %87 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %86
  store i8* bitcast (i1 (i32, i32, float*, float, i32*, i64*, float**)* @inner_loop.extracted.23 to i8*), i8** %87, align 8
  %88 = call i64 @m1252811912226950246(i64 5221456193252566389)
  %89 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %88
  store i8* bitcast (i1 (i1, i1, i1, i1*, i1*)* @inner_loop.extracted.24 to i8*), i8** %89, align 8
  %90 = call i64 @m1252811912226950246(i64 5221456193252566388)
  %91 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %90
  store i8* bitcast (void (i32, i1, i32*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)* @inner_loop.extracted.25 to i8*), i8** %91, align 8
  %92 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %93 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %92
  store i8* bitcast (void ()* @inner_loop.extracted.26 to i8*), i8** %93, align 8
  %.loc51 = alloca i1, align 1
  %.loc50 = alloca i1, align 1
  %.loc49 = alloca i1, align 1
  %.loc48 = alloca i1, align 1
  %.loc47 = alloca i1, align 1
  %.loc46 = alloca i1, align 1
  %.loc45 = alloca i1, align 1
  %.loc44 = alloca i1, align 1
  %.loc43 = alloca i1, align 1
  %.loc42 = alloca i1, align 1
  %.loc41 = alloca i1, align 1
  %.loc40 = alloca i1, align 1
  %.loc39 = alloca i1, align 1
  %.loc38 = alloca i1, align 1
  %.loc37 = alloca i1, align 1
  %.loc36 = alloca i1, align 1
  %.loc35 = alloca i32, align 4
  %.loc28 = alloca i1, align 1
  %.loc27 = alloca i1, align 1
  %.loc18 = alloca float*, align 8
  %.loc17 = alloca i64, align 8
  %.loc16 = alloca i32, align 4
  %.loc11 = alloca i1, align 1
  %.loc3 = alloca i1, align 1
  %.loc2 = alloca i32, align 4
  %.loc1 = alloca i32, align 4
  %.loc = alloca i32, align 4
  %94 = icmp eq float* %1, null
  %95 = icmp eq float* %2, null
  %96 = select i1 %94, i1 true, i1 %95
  %97 = icmp eq i8* %3, null
  %98 = select i1 %96, i1 true, i1 %97
  store i1 %98, i1* %.reg2mem107, align 1
  %99 = icmp eq float* %4, null
  store i1 %99, i1* %.reg2mem109, align 1
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %100 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %100, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

BogusBasciBlock:                                  ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %101 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop, %codeRepl34), i8** %101, align 8
  %102 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop, %"8"), i8** %102, align 8
  %103 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop, %"7"), i8** %103, align 8
  %104 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@inner_loop, %BogusBasciBlock), i8** %104, align 8
  %105 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@inner_loop, %"5"), i8** %105, align 8
  %106 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@inner_loop, %"14"), i8** %106, align 8
  %107 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@inner_loop, %"11"), i8** %107, align 8
  %108 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %108, align 8
  %109 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8* blockaddress(@inner_loop, %"24"), i8** %109, align 8
  %110 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8* blockaddress(@inner_loop, %"9"), i8** %110, align 8
  %111 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8* blockaddress(@inner_loop, %"10"), i8** %111, align 8
  %112 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8* blockaddress(@inner_loop, %codeRepl15), i8** %112, align 8
  %113 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8* blockaddress(@inner_loop, %"16"), i8** %113, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %114 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %114, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

EntryBasicBlockSplit:                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload108 = load i1, i1* %.reg2mem107, align 1
  %.reload110 = load i1, i1* %.reg2mem109, align 1
  %115 = or i64 %50, 7442455168691339892
  %116 = xor i64 %50, -1
  %117 = and i64 %116, 3550929091458536086
  %118 = and i64 %50, -3550929091458536087
  %119 = or i64 %117, %118
  %120 = xor i64 6201323348092424418, %119
  %121 = xor i64 %50, -1
  %122 = or i64 -7442455168691339893, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = or i64 %120, %124
  %126 = and i64 %18, -912453477636239802
  %127 = xor i64 %18, -1
  %128 = xor i64 -912453477636239802, %127
  %129 = and i64 %128, -912453477636239802
  %130 = and i64 %18, -3634418614648328059
  %131 = or i64 3634418614648328058, %18
  %132 = sub i64 %131, 3634418614648328058
  %133 = xor i64 %115, %129
  %134 = xor i64 %133, %125
  %135 = xor i64 %134, %130
  %136 = xor i64 %135, %132
  %137 = xor i64 %136, 8856245060554842413
  %138 = xor i64 %137, %126
  %139 = or i64 %20, 8720563460938307655
  %140 = xor i64 %20, -1
  %141 = and i64 %140, 8048098842091996617
  %142 = and i64 %20, -8048098842091996618
  %143 = or i64 %141, %142
  %144 = xor i64 1636281119397305742, %143
  %145 = xor i64 %20, -1
  %146 = or i64 -8720563460938307656, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = or i64 %144, %148
  %150 = or i64 %26, -6061011064846775062
  %151 = xor i64 %26, -1
  %152 = and i64 %151, -8427398352380976226
  %153 = and i64 %26, 8427398352380976225
  %154 = or i64 %152, %153
  %155 = xor i64 2371474326576050036, %154
  %156 = xor i64 %26, -1
  %157 = or i64 6061011064846775061, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = or i64 %155, %159
  %161 = add i64 %22, -9103819725170403721
  %162 = add i64 279801091621627282, %22
  %163 = add i64 %162, 9063123256917520613
  %164 = xor i64 %150, %161
  %165 = xor i64 %164, 5709139504248657573
  %166 = xor i64 %165, %160
  %167 = xor i64 %166, %163
  %168 = xor i64 %167, %149
  %169 = xor i64 %168, %139
  %170 = mul i64 %138, %169
  %171 = trunc i64 %170 to i1
  %172 = select i1 %.reload108, i1 %171, i1 %.reload110
  %.reload7 = load i8**, i8*** %.reg2mem4, align 8
  %.reload105 = load i8**, i8*** %.reg2mem103, align 8
  %173 = select i1 %172, i8** %.reload105, i8** %.reload7
  %174 = load i8*, i8** %173, align 8
  store i32 2, i32* %.reg2mem227, align 4
  indirectbr i8* %174, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"2":                                              ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %175 = fpext float %0 to double
  %176 = call double @llvm.cos.f64(double %175)
  %177 = fptrunc double %176 to float
  store float %177, float* %.reg2mem111, align 4
  %178 = call double @llvm.sin.f64(double %175)
  %179 = fptrunc double %178 to float
  store float %179, float* %.reg2mem115, align 4
  %.reload114 = load float, float* %.reg2mem111, align 4
  %180 = fadd float %.reload114, 2.000000e+00
  store float %180, float* %.reg2mem118, align 4
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  %181 = load i8*, i8** %.reload11, align 8
  store double 0.000000e+00, double* %.reg2mem219, align 8
  indirectbr i8* %181, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"3":                                              ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload220 = load double, double* %.reg2mem219, align 8
  store double %.reload220, double* %.reg2mem121, align 8
  %.reload124 = load double, double* %.reg2mem121, align 8
  %182 = call double @llvm.sin.f64(double %.reload124)
  %183 = fptrunc double %182 to float
  %184 = load float, float* %1, align 4, !tbaa !10
  %185 = fpext float %184 to double
  %186 = call double @llvm.sin.f64(double %185)
  %187 = fptrunc double %186 to float
  %188 = call double @llvm.cos.f64(double %185)
  %189 = fptrunc double %188 to float
  %.reload120 = load float, float* %.reg2mem118, align 4
  %190 = fmul float %.reload120, %183
  %191 = fmul float %190, %187
  %.reload117 = load float, float* %.reg2mem115, align 4
  %192 = fmul float %.reload117, %189
  %193 = fadd float %191, %192
  %194 = fadd float %193, 5.000000e+00
  %195 = fdiv float 1.000000e+00, %194
  store float %195, float* %.reg2mem125, align 4
  %.reload123 = load double, double* %.reg2mem121, align 8
  %196 = call double @llvm.cos.f64(double %.reload123)
  %197 = fptrunc double %196 to float
  %198 = load float, float* %2, align 4, !tbaa !10
  %199 = fpext float %198 to double
  %200 = call double @llvm.cos.f64(double %199)
  %201 = fptrunc double %200 to float
  %202 = call double @llvm.sin.f64(double %199)
  %203 = fptrunc double %202 to float
  %204 = fmul float %190, %189
  %.reload116 = load float, float* %.reg2mem115, align 4
  %205 = fmul float %.reload116, %187
  %206 = fsub float %204, %205
  %.reload129 = load float, float* %.reg2mem125, align 4
  %207 = fmul float %.reload129, 3.000000e+01
  %.reload119 = load float, float* %.reg2mem118, align 4
  %208 = fmul float %.reload119, %197
  %209 = fmul float %208, %201
  %210 = fmul float %206, %203
  %211 = fsub float %209, %210
  %212 = fmul float %211, %207
  %213 = fadd float %212, 4.000000e+01
  %214 = fptosi float %213 to i32
  store i32 %214, i32* %.reg2mem130, align 4
  %.reload128 = load float, float* %.reg2mem125, align 4
  %215 = fmul float %.reload128, 1.500000e+01
  %216 = fmul float %208, %203
  %217 = fmul float %206, %201
  %218 = fadd float %216, %217
  %219 = fmul float %218, %215
  %220 = fadd float %219, 1.200000e+01
  %221 = fptosi float %220 to i32
  store i32 %221, i32* %.reg2mem139, align 4
  %.reload113 = load float, float* %.reg2mem111, align 4
  %222 = fmul float %.reload113, %183
  %223 = fmul float %222, %189
  %224 = fsub float %205, %223
  %225 = fmul float %224, %201
  %226 = fmul float %222, %187
  %227 = fsub float %225, %226
  %228 = fsub float %227, %192
  %.reload112 = load float, float* %.reg2mem111, align 4
  %229 = fmul float %.reload112, %197
  %230 = fmul float %229, %203
  %231 = fsub float %228, %230
  %232 = fmul float %231, 8.000000e+00
  %233 = fptosi float %232 to i32
  store i32 %233, i32* %.reg2mem142, align 4
  %.reload141 = load i32, i32* %.reg2mem139, align 4
  %234 = add i32 %.reload141, -1
  store i32 %234, i32* %.reg2mem146, align 4
  %.reload148 = load i32, i32* %.reg2mem146, align 4
  %235 = icmp ult i32 %.reload148, 21
  %.reload138 = load i32, i32* %.reg2mem130, align 4
  %236 = icmp sgt i32 %.reload138, 0
  %237 = select i1 %235, i1 %236, i1 false
  %.reload137 = load i32, i32* %.reg2mem130, align 4
  %238 = icmp slt i32 %.reload137, 80
  %239 = select i1 %237, i1 %238, i1 false
  %.reload15 = load i8**, i8*** %.reg2mem13, align 8
  %.reload98 = load i8**, i8*** %.reg2mem95, align 8
  %240 = select i1 %239, i8** %.reload15, i8** %.reload98
  %241 = load i8*, i8** %240, align 8
  indirectbr i8* %241, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

codeRepl:                                         ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast = bitcast i32* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %lt.cast7 = bitcast i32* %.loc1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast7)
  %lt.cast8 = bitcast i32* %.loc2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast8)
  %lt.cast9 = bitcast i1* %.loc3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast9)
  store i64 5221456193252566390, i64* %81, align 8
  %242 = call i8** @lk3314813992465304394(i64* %81)
  %243 = load i8*, i8** %242, align 8
  %244 = bitcast i8* %243 to i1 (i32, i32, i32, i32*, i32*, i32*, i1*)*
  %.reload136 = load i32, i32* %.reg2mem130, align 4
  %.reload140 = load i32, i32* %.reg2mem139, align 4
  %.reload145 = load i32, i32* %.reg2mem142, align 4
  %targetBlock = call i1 %244(i32 %.reload140, i32 %.reload145, i32 %.reload136, i32* %.loc, i32* %.loc1, i32* %.loc2, i1* %.loc3)
  %.reload = load i32, i32* %.loc, align 4
  store i32 %.reload, i32* %.reload.reg2mem, align 4
  %.reload4 = load i32, i32* %.loc1, align 4
  store i32 %.reload4, i32* %.reload4.reg2mem, align 4
  %.reload5 = load i32, i32* %.loc2, align 4
  store i32 %.reload5, i32* %.reload5.reg2mem, align 4
  %.reload6 = load i1, i1* %.loc3, align 1
  store i1 %.reload6, i1* %.reload6.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast7)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast8)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast9)
  %.reload18 = load i8**, i8*** %.reg2mem17, align 8
  %.reload23 = load i8**, i8*** %.reg2mem20, align 8
  %245 = select i1 %targetBlock, i8** %.reload18, i8** %.reload23
  %246 = load i8*, i8** %245, align 8
  indirectbr i8* %246, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"5":                                              ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload39 = load i8**, i8*** %.reg2mem37, align 8
  %247 = load i8*, i8** %.reload39, align 8
  indirectbr i8* %247, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

codeRepl10:                                       ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast14 = bitcast i1* %.loc11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast14)
  store i64 5221456193252566387, i64* %81, align 8
  %248 = call i8** @lk3314813992465304394(i64* %81)
  %249 = load i8*, i8** %248, align 8
  %250 = bitcast i8* %249 to i1 (i32, i32, i1*)*
  %.reload147 = load i32, i32* %.reg2mem146, align 4
  %.reload4.reload = load i32, i32* %.reload4.reg2mem, align 4
  %targetBlock12 = call i1 %250(i32 %.reload147, i32 %.reload4.reload, i1* %.loc11)
  %.reload13 = load i1, i1* %.loc11, align 1
  store i1 %.reload13, i1* %.reload13.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast14)
  %.reload26 = load i8**, i8*** %.reg2mem25, align 8
  %.reload29 = load i8**, i8*** %.reg2mem28, align 8
  %251 = select i1 %targetBlock12, i8** %.reload29, i8** %.reload26
  %252 = load i8*, i8** %251, align 8
  indirectbr i8* %252, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"7":                                              ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %253 = sdiv i64 120, 40
  %254 = add i64 89, 126
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  %.reload35 = load i8**, i8*** %.reg2mem33, align 8
  %.reload13.reload = load i1, i1* %.reload13.reg2mem, align 1
  %255 = select i1 %.reload13.reload, i8** %.reload35, i8** %.reload14
  %256 = load i8*, i8** %255, align 8
  indirectbr i8* %256, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"8":                                              ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %257 = sdiv i64 120, 40
  %258 = add i64 437015090587227635, -437015090587227420
  %.reload34 = load i8**, i8*** %.reg2mem33, align 8
  %259 = load i8*, i8** %.reload34, align 8
  indirectbr i8* %259, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"9":                                              ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload38 = load i8**, i8*** %.reg2mem37, align 8
  %260 = load i8*, i8** %.reload38, align 8
  indirectbr i8* %260, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"10":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload42 = load i8**, i8*** %.reg2mem41, align 8
  %.reload46 = load i8**, i8*** %.reg2mem44, align 8
  %.reload6.reload = load i1, i1* %.reload6.reg2mem, align 1
  %261 = select i1 %.reload6.reload, i8** %.reload42, i8** %.reload46
  %262 = load i8*, i8** %261, align 8
  indirectbr i8* %262, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"11":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %263 = sub i32 63, -3
  %264 = sub i32 39, -88
  %265 = add i32 29, 11
  %266 = sdiv i32 82, 107
  %267 = and i64 %24, -6362510501253466372
  %268 = xor i64 %24, -1
  %269 = xor i64 -6362510501253466372, %268
  %270 = and i64 %269, -6362510501253466372
  %271 = add i64 %52, -6203137245313590404
  %272 = sub i64 0, %52
  %273 = add i64 6203137245313590404, %272
  %274 = sub i64 0, %273
  %275 = xor i64 %274, -3076469061683239317
  %276 = xor i64 %275, %267
  %277 = xor i64 %276, %271
  %278 = xor i64 %277, %270
  %279 = or i64 %86, -8885670505797613817
  %280 = xor i64 %86, -1
  %281 = and i64 -8885670505797613817, %280
  %282 = add i64 %281, %86
  %283 = add i64 %28, 8407663418005860410
  %284 = and i64 8407663418005860410, %28
  %285 = or i64 8407663418005860410, %28
  %286 = add i64 %284, %285
  %287 = xor i64 %286, %283
  %288 = xor i64 %287, %282
  %289 = xor i64 %288, 591583943183457970
  %290 = xor i64 %289, %279
  %291 = mul i64 %278, %290
  %292 = trunc i64 %291 to i32
  %293 = sub i32 %292, 7
  %294 = sub i32 90, 125
  %295 = and i64 %40, 5725211730742129921
  %296 = xor i64 %40, -1
  %297 = xor i64 5725211730742129921, %296
  %298 = and i64 %297, 5725211730742129921
  %299 = add i64 %32, 7752856578039415223
  %300 = add i64 -3370268670968866018, %32
  %301 = sub i64 %300, 7323618824701270375
  %302 = add i64 %32, -3538246988273832157
  %303 = xor i64 -3538246988273832157, %32
  %304 = and i64 -3538246988273832157, %32
  %305 = mul i64 2, %304
  %306 = add i64 %303, %305
  %307 = xor i64 2335253656397774701, %295
  %308 = xor i64 %307, %298
  %309 = xor i64 %308, %306
  %310 = xor i64 %309, %302
  %311 = xor i64 %310, %299
  %312 = xor i64 %311, %301
  %313 = or i64 %34, 8084489613305320729
  %314 = xor i64 %34, -1
  %315 = and i64 %314, -202062366786252966
  %316 = and i64 %34, 202062366786252965
  %317 = or i64 %315, %316
  %318 = xor i64 -8285566540571665853, %317
  %319 = xor i64 %34, -1
  %320 = or i64 -8084489613305320730, %319
  %321 = xor i64 %320, -1
  %322 = and i64 %321, -1
  %323 = or i64 %318, %322
  %324 = and i64 %28, 5792102499274476214
  %325 = or i64 -5792102499274476215, %28
  %326 = sub i64 %325, -5792102499274476215
  %327 = xor i64 %324, %323
  %328 = xor i64 %327, %313
  %329 = xor i64 %328, %326
  %330 = xor i64 %329, -6430148946827816264
  %331 = mul i64 %312, %330
  %332 = trunc i64 %331 to i32
  %333 = sdiv i32 %332, 106
  %334 = sub i32 41, 16
  %335 = and i64 %30, 9166376527812490658
  %336 = xor i64 %30, -1
  %337 = or i64 -9166376527812490659, %336
  %338 = xor i64 %337, -1
  %339 = and i64 %338, -1
  %340 = or i64 %16, 5978722318124342836
  %341 = and i64 5978722318124342836, %16
  %342 = xor i64 5978722318124342836, %16
  %343 = or i64 %341, %342
  %344 = and i64 %24, 6236825635774584746
  %345 = or i64 -6236825635774584747, %24
  %346 = sub i64 %345, -6236825635774584747
  %347 = xor i64 %340, %343
  %348 = xor i64 %347, -1220465006920774637
  %349 = xor i64 %348, %339
  %350 = xor i64 %349, %346
  %351 = xor i64 %350, %344
  %352 = xor i64 %351, %335
  %353 = and i64 %44, -461003956779038684
  %354 = xor i64 %44, -1
  %355 = xor i64 -461003956779038684, %354
  %356 = and i64 %355, -461003956779038684
  %357 = add i64 %18, 404471933457145488
  %358 = add i64 7269694266145720814, %18
  %359 = add i64 %358, -6865222332688575326
  %360 = xor i64 %357, %356
  %361 = xor i64 %360, %353
  %362 = xor i64 %361, %359
  %363 = xor i64 %362, 778029500644749210
  %364 = mul i64 %352, %363
  %365 = trunc i64 %364 to i32
  %366 = sdiv i32 125, %365
  %.reload45 = load i8**, i8*** %.reg2mem44, align 8
  %367 = load i8*, i8** %.reload45, align 8
  indirectbr i8* %367, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

codeRepl15:                                       ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast23 = bitcast i32* %.loc16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast23)
  %lt.cast24 = bitcast i64* %.loc17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast24)
  %lt.cast25 = bitcast float** %.loc18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  store i64 5221456193252566386, i64* %81, align 8
  %368 = call i8** @lk3314813992465304394(i64* %81)
  %369 = load i8*, i8** %368, align 8
  %370 = bitcast i8* %369 to i1 (i32, i32, float*, float, i32*, i64*, float**)*
  %.reload127 = load float, float* %.reg2mem125, align 4
  %.reload135 = load i32, i32* %.reg2mem130, align 4
  %.reload.reload = load i32, i32* %.reload.reg2mem, align 4
  %targetBlock19 = call i1 %370(i32 %.reload.reload, i32 %.reload135, float* %4, float %.reload127, i32* %.loc16, i64* %.loc17, float** %.loc18)
  %.reload20 = load i32, i32* %.loc16, align 4
  store i32 %.reload20, i32* %.reload20.reg2mem, align 4
  %.reload21 = load i64, i64* %.loc17, align 8
  store i64 %.reload21, i64* %.reload21.reg2mem, align 8
  %.reload22 = load float*, float** %.loc18, align 8
  store float* %.reload22, float** %.reload22.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast23)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast24)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  %.reload50 = load i8**, i8*** %.reg2mem48, align 8
  %.reload97 = load i8**, i8*** %.reg2mem95, align 8
  %371 = select i1 %targetBlock19, i8** %.reload50, i8** %.reload97
  %372 = load i8*, i8** %371, align 8
  indirectbr i8* %372, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"13":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload126 = load float, float* %.reg2mem125, align 4
  %.reload22.reload = load float*, float** %.reload22.reg2mem, align 8
  store float %.reload126, float* %.reload22.reload, align 4, !tbaa !10
  %373 = load i8*, i8** @CHARS, align 8, !tbaa !14
  %.reload144 = load i32, i32* %.reg2mem142, align 4
  %374 = icmp sgt i32 %.reload144, 0
  %.reload143 = load i32, i32* %.reg2mem142, align 4
  %375 = select i1 %374, i32 %.reload143, i32 0
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %373, i64 %376
  %378 = load i8, i8* %377, align 1, !tbaa !16
  store i8 %378, i8* %.reg2mem149, align 1
  %.reload21.reload = load i64, i64* %.reload21.reg2mem, align 8
  %379 = getelementptr inbounds i8, i8* %3, i64 %.reload21.reload
  store i8* %379, i8** %.reg2mem151, align 8
  %.reload134 = load i32, i32* %.reg2mem130, align 4
  %380 = mul i32 %.reload134, 2
  %.reload133 = load i32, i32* %.reg2mem130, align 4
  %381 = mul i32 %.reload133, 2
  %382 = and i64 %86, 49708472157368407
  %383 = xor i64 %86, -1
  %384 = xor i64 49708472157368407, %383
  %385 = and i64 %384, 49708472157368407
  %386 = or i64 %42, -3408699898750527728
  %387 = xor i64 %42, -1
  %388 = and i64 -3408699898750527728, %387
  %389 = add i64 %388, %42
  %390 = or i64 %46, 3230198791107237938
  %391 = xor i64 %46, -1
  %392 = and i64 3230198791107237938, %391
  %393 = add i64 %392, %46
  %394 = xor i64 %386, %382
  %395 = xor i64 %394, %393
  %396 = xor i64 %395, 4929534247068304837
  %397 = xor i64 %396, %389
  %398 = xor i64 %397, %385
  %399 = xor i64 %398, %390
  %400 = add i64 %32, 7983378938503494090
  %401 = add i64 1010991440842379144, %32
  %402 = add i64 %401, 6972387497661114946
  %403 = or i64 %36, -7256077512043971519
  %404 = and i64 -7256077512043971519, %36
  %405 = xor i64 -7256077512043971519, %36
  %406 = or i64 %404, %405
  %407 = or i64 %84, -6661030427477653974
  %408 = and i64 -6661030427477653974, %84
  %409 = xor i64 -6661030427477653974, %84
  %410 = or i64 %408, %409
  %411 = xor i64 %400, %403
  %412 = xor i64 %411, %407
  %413 = xor i64 %412, %406
  %414 = xor i64 %413, %410
  %415 = xor i64 %414, %402
  %416 = xor i64 %415, 7354333190786408986
  %417 = mul i64 %399, %416
  %418 = trunc i64 %417 to i32
  %419 = add i32 %418, %381
  %420 = mul i32 %380, %419
  %421 = add i64 %38, -5465898171836297632
  %422 = sub i64 0, %38
  %423 = add i64 5465898171836297632, %422
  %424 = sub i64 0, %423
  %425 = or i64 %50, 489712252944548934
  %426 = and i64 489712252944548934, %50
  %427 = xor i64 489712252944548934, %50
  %428 = or i64 %426, %427
  %429 = add i64 %6, -8680482619300167280
  %430 = add i64 -3565269858792885215, %6
  %431 = add i64 %430, -5115212760507282065
  %432 = xor i64 %429, %428
  %433 = xor i64 %432, %425
  %434 = xor i64 %433, %421
  %435 = xor i64 %434, %431
  %436 = xor i64 %435, %424
  %437 = xor i64 %436, -282962983551051981
  %438 = and i64 %90, -5280563334184657656
  %439 = xor i64 %90, -1
  %440 = xor i64 -5280563334184657656, %439
  %441 = and i64 %440, -5280563334184657656
  %442 = or i64 %22, -8218060815011442730
  %443 = xor i64 %22, -1
  %444 = and i64 %443, 705710050910267392
  %445 = and i64 %22, -705710050910267393
  %446 = or i64 %444, %445
  %447 = xor i64 -8919173763774126122, %446
  %448 = xor i64 %22, -1
  %449 = or i64 8218060815011442729, %448
  %450 = xor i64 %449, -1
  %451 = and i64 %450, -1
  %452 = or i64 %447, %451
  %453 = and i64 %46, 5395206152031675560
  %454 = or i64 -5395206152031675561, %46
  %455 = sub i64 %454, -5395206152031675561
  %456 = xor i64 -2578177211185762324, %441
  %457 = xor i64 %456, %438
  %458 = xor i64 %457, %455
  %459 = xor i64 %458, %452
  %460 = xor i64 %459, %442
  %461 = xor i64 %460, %453
  %462 = mul i64 %437, %461
  %463 = trunc i64 %462 to i32
  %464 = srem i32 %420, %463
  store i32 %464, i32* %.reg2mem153, align 4
  %.reload158 = load i32, i32* %.reg2mem153, align 4
  %465 = icmp eq i32 %.reload158, 0
  store i1 %465, i1* %.reg2mem159, align 1
  %.reload132 = load i32, i32* %.reg2mem130, align 4
  %466 = mul i32 %.reload132, %.reload132
  %.reload131 = load i32, i32* %.reg2mem130, align 4
  %467 = add i64 %22, -4791298538892731148
  %468 = add i64 4067488421375824659, %22
  %469 = sub i64 %468, 8858786960268555807
  %470 = or i64 %82, 822209772682896338
  %471 = xor i64 %82, -1
  %472 = and i64 %471, -7254858825580360365
  %473 = and i64 %82, 7254858825580360364
  %474 = or i64 %472, %473
  %475 = xor i64 -8054543654557929855, %474
  %476 = xor i64 %82, -1
  %477 = or i64 -822209772682896339, %476
  %478 = xor i64 %477, -1
  %479 = and i64 %478, -1
  %480 = or i64 %475, %479
  %481 = or i64 %28, -9073839987936402249
  %482 = and i64 -9073839987936402249, %28
  %483 = xor i64 -9073839987936402249, %28
  %484 = or i64 %482, %483
  %485 = xor i64 %469, %481
  %486 = xor i64 %485, %480
  %487 = xor i64 %486, %484
  %488 = xor i64 %487, %470
  %489 = xor i64 %488, %467
  %490 = xor i64 %489, 9039310132325148291
  %491 = or i64 %14, -4922597212979871189
  %492 = xor i64 %14, -1
  %493 = and i64 %492, 8916495312284599853
  %494 = and i64 %14, -8916495312284599854
  %495 = or i64 %493, %494
  %496 = xor i64 -4606431638012230650, %495
  %497 = xor i64 %14, -1
  %498 = or i64 4922597212979871188, %497
  %499 = xor i64 %498, -1
  %500 = and i64 %499, -1
  %501 = or i64 %496, %500
  %502 = or i64 %46, 7382283073968211157
  %503 = xor i64 %46, -1
  %504 = and i64 7382283073968211157, %503
  %505 = add i64 %504, %46
  %506 = xor i64 %501, %505
  %507 = xor i64 %506, %491
  %508 = xor i64 %507, %502
  %509 = xor i64 %508, 6501775371460808284
  %510 = mul i64 %490, %509
  %511 = trunc i64 %510 to i32
  %512 = add i32 %466, %511
  %513 = add i32 %512, %.reload131
  %514 = sub i32 %513, 2094661908
  store i32 %514, i32* %.reg2mem164, align 4
  %.reload20.reload = load i32, i32* %.reload20.reg2mem, align 4
  %515 = or i64 %28, 4753829493186509135
  %516 = xor i64 %28, -1
  %517 = and i64 4753829493186509135, %516
  %518 = add i64 %517, %28
  %519 = or i64 %42, -3099607082110540371
  %520 = xor i64 %42, -1
  %521 = and i64 -3099607082110540371, %520
  %522 = add i64 %521, %42
  %523 = xor i64 %515, %519
  %524 = xor i64 %523, %522
  %525 = xor i64 %524, -3637775483433860901
  %526 = xor i64 %525, %518
  %527 = or i64 %54, -4611691820344733157
  %528 = and i64 -4611691820344733157, %54
  %529 = xor i64 -4611691820344733157, %54
  %530 = or i64 %528, %529
  %531 = and i64 %24, -1447544097764212972
  %532 = xor i64 %24, -1
  %533 = or i64 1447544097764212971, %532
  %534 = xor i64 %533, -1
  %535 = and i64 %534, -1
  %536 = xor i64 %535, %530
  %537 = xor i64 %536, %531
  %538 = xor i64 %537, %527
  %539 = xor i64 %538, -8697671443537561946
  %540 = mul i64 %526, %539
  %541 = trunc i64 %540 to i32
  %542 = srem i32 %.reload20.reload, %541
  %543 = or i64 %26, -6301392259798983440
  %544 = xor i64 %26, -1
  %545 = and i64 %544, 8301306604432453255
  %546 = and i64 %26, -8301306604432453256
  %547 = or i64 %545, %546
  %548 = xor i64 -2614093843434966409, %547
  %549 = xor i64 %26, -1
  %550 = or i64 6301392259798983439, %549
  %551 = xor i64 %550, -1
  %552 = and i64 %551, -1
  %553 = or i64 %548, %552
  %554 = or i64 %28, -5656815338243390505
  %555 = and i64 -5656815338243390505, %28
  %556 = xor i64 -5656815338243390505, %28
  %557 = or i64 %555, %556
  %558 = and i64 %84, -3357406624744919908
  %559 = xor i64 %84, -1
  %560 = xor i64 -3357406624744919908, %559
  %561 = and i64 %560, -3357406624744919908
  %562 = xor i64 %553, %557
  %563 = xor i64 %562, %543
  %564 = xor i64 %563, %558
  %565 = xor i64 %564, -6554688308875843307
  %566 = xor i64 %565, %561
  %567 = xor i64 %566, %554
  %568 = or i64 %38, 1851587484058906003
  %569 = xor i64 %38, -1
  %570 = and i64 1851587484058906003, %569
  %571 = add i64 %570, %38
  %572 = and i64 %38, 6697329929618956322
  %573 = or i64 -6697329929618956323, %38
  %574 = sub i64 %573, -6697329929618956323
  %575 = add i64 %90, -6471900719836591212
  %576 = and i64 -6471900719836591212, %90
  %577 = or i64 -6471900719836591212, %90
  %578 = add i64 %576, %577
  %579 = xor i64 %574, %571
  %580 = xor i64 %579, %568
  %581 = xor i64 %580, 0
  %582 = xor i64 %581, %572
  %583 = xor i64 %582, %575
  %584 = xor i64 %583, %578
  %585 = mul i64 %567, %584
  %586 = trunc i64 %585 to i32
  %587 = icmp eq i32 %542, %586
  %.reload69 = load i8**, i8*** %.reg2mem52, align 8
  %.reload82 = load i8**, i8*** %.reg2mem81, align 8
  %588 = select i1 %587, i8** %.reload69, i8** %.reload82
  %589 = load i8*, i8** %588, align 8
  indirectbr i8* %589, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"14":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %590 = add i64 40, 110
  %.reload166 = load i32, i32* %.reg2mem164, align 4
  %591 = srem i32 %.reload166, 2
  store i32 %591, i32* %.reg2mem167, align 4
  %592 = add i64 %32, -1207096890483406282
  %593 = xor i64 -1207096890483406282, %32
  %594 = and i64 -1207096890483406282, %32
  %595 = mul i64 2, %594
  %596 = add i64 %593, %595
  %597 = and i64 %20, 8355930368549627937
  %598 = xor i64 %20, -1
  %599 = or i64 -8355930368549627938, %598
  %600 = xor i64 %599, -1
  %601 = and i64 %600, -1
  %602 = xor i64 5959451587724544363, %601
  %603 = xor i64 %602, %592
  %604 = xor i64 %603, %597
  %605 = xor i64 %604, %596
  %606 = and i64 %90, 1040246806229737954
  %607 = xor i64 %90, -1
  %608 = xor i64 1040246806229737954, %607
  %609 = and i64 %608, 1040246806229737954
  %610 = or i64 %6, 1081859570163262563
  %611 = xor i64 %6, -1
  %612 = and i64 1081859570163262563, %611
  %613 = add i64 %612, %6
  %614 = or i64 %46, 3162011893606188
  %615 = and i64 3162011893606188, %46
  %616 = xor i64 3162011893606188, %46
  %617 = or i64 %615, %616
  %618 = xor i64 823959893706500192, %606
  %619 = xor i64 %618, %614
  %620 = xor i64 %619, %613
  %621 = xor i64 %620, %610
  %622 = xor i64 %621, %609
  %623 = xor i64 %622, %617
  %624 = mul i64 %605, %623
  %625 = sdiv i64 36, %624
  %.reload169 = load i32, i32* %.reg2mem167, align 4
  %626 = icmp eq i32 %.reload169, 0
  store i1 %626, i1* %.reg2mem170, align 1
  %627 = mul i64 32, 92
  %.reload163 = load i1, i1* %.reg2mem159, align 1
  %628 = xor i1 %.reload163, true
  %629 = and i1 %628, true
  %630 = and i1 %.reload163, false
  %631 = or i1 %629, %630
  store i1 %631, i1* %.reg2mem175, align 1
  %632 = add i64 %32, 7652219027650612671
  %633 = and i64 7652219027650612671, %32
  %634 = or i64 7652219027650612671, %32
  %635 = add i64 %633, %634
  %636 = or i64 %26, -358199326086943590
  %637 = xor i64 %26, -1
  %638 = and i64 %637, -1364838123915456646
  %639 = and i64 %26, 1364838123915456645
  %640 = or i64 %638, %639
  %641 = xor i64 1587647964524209120, %640
  %642 = xor i64 %26, -1
  %643 = or i64 358199326086943589, %642
  %644 = xor i64 %643, -1
  %645 = and i64 %644, -1
  %646 = or i64 %641, %645
  %647 = add i64 %44, 8760764412121241383
  %648 = add i64 5424745648503838154, %44
  %649 = add i64 %648, 3336018763617403229
  %650 = xor i64 %646, 1191256875337381655
  %651 = xor i64 %650, %635
  %652 = xor i64 %651, %649
  %653 = xor i64 %652, %632
  %654 = xor i64 %653, %647
  %655 = xor i64 %654, %636
  %656 = add i64 %32, -8875609911299349900
  %657 = add i64 1341044344063067813, %32
  %658 = sub i64 %657, -8230089818347133903
  %659 = or i64 %44, 4913041917298271245
  %660 = xor i64 %44, -1
  %661 = and i64 %660, 7459521253480199075
  %662 = and i64 %44, -7459521253480199076
  %663 = or i64 %661, %662
  %664 = xor i64 2570194849684985774, %663
  %665 = xor i64 %44, -1
  %666 = or i64 -4913041917298271246, %665
  %667 = xor i64 %666, -1
  %668 = and i64 %667, -1
  %669 = or i64 %664, %668
  %670 = xor i64 %656, %669
  %671 = xor i64 %670, %659
  %672 = xor i64 %671, -8967007709092423654
  %673 = xor i64 %672, %658
  %674 = mul i64 %655, %673
  %675 = sub i64 %674, 12
  %.reload177 = load i1, i1* %.reg2mem175, align 1
  %676 = xor i1 %.reload177, true
  %677 = or i1 %676, false
  %678 = xor i1 %677, true
  %679 = or i64 %48, 5858481432533900477
  %680 = xor i64 %48, -1
  %681 = and i64 5858481432533900477, %680
  %682 = add i64 %681, %48
  %683 = and i64 %54, -3029371425184978808
  %684 = or i64 3029371425184978807, %54
  %685 = sub i64 %684, 3029371425184978807
  %686 = xor i64 2627695872936180733, %679
  %687 = xor i64 %686, %682
  %688 = xor i64 %687, %685
  %689 = xor i64 %688, %683
  %690 = add i64 %40, -2088880739218724842
  %691 = xor i64 -2088880739218724842, %40
  %692 = and i64 -2088880739218724842, %40
  %693 = mul i64 2, %692
  %694 = add i64 %691, %693
  %695 = and i64 %82, -776640409637821038
  %696 = or i64 776640409637821037, %82
  %697 = sub i64 %696, 776640409637821037
  %698 = xor i64 %695, %694
  %699 = xor i64 %698, %697
  %700 = xor i64 %699, %690
  %701 = xor i64 %700, 8077956243776813397
  %702 = mul i64 %689, %701
  %703 = trunc i64 %702 to i1
  %704 = and i1 %678, %703
  store i1 %704, i1* %.reg2mem178, align 1
  %705 = and i64 %18, 1789685885423413793
  %706 = or i64 -1789685885423413794, %18
  %707 = sub i64 %706, -1789685885423413794
  %708 = and i64 %86, 7244364661552974145
  %709 = or i64 -7244364661552974146, %86
  %710 = sub i64 %709, -7244364661552974146
  %711 = or i64 %48, 6774113451629678648
  %712 = xor i64 %48, -1
  %713 = and i64 6774113451629678648, %712
  %714 = add i64 %713, %48
  %715 = xor i64 %705, %711
  %716 = xor i64 %715, 1044132324896710357
  %717 = xor i64 %716, %714
  %718 = xor i64 %717, %710
  %719 = xor i64 %718, %708
  %720 = xor i64 %719, %707
  %721 = and i64 %50, -7330350402434064809
  %722 = xor i64 %50, -1
  %723 = xor i64 -7330350402434064809, %722
  %724 = and i64 %723, -7330350402434064809
  %725 = add i64 %42, 5124329495712985014
  %726 = sub i64 0, %42
  %727 = sub i64 5124329495712985014, %726
  %728 = add i64 %30, 4656816046080840279
  %729 = sub i64 0, %30
  %730 = add i64 -4656816046080840279, %729
  %731 = sub i64 0, %730
  %732 = xor i64 %727, %731
  %733 = xor i64 %732, %725
  %734 = xor i64 %733, -155040305972599928
  %735 = xor i64 %734, %724
  %736 = xor i64 %735, %721
  %737 = xor i64 %736, %728
  %738 = mul i64 %720, %737
  %739 = mul i64 %738, 82
  %.reload162 = load i1, i1* %.reg2mem159, align 1
  %740 = and i1 %.reload162, false
  store i1 %740, i1* %.reg2mem181, align 1
  %741 = and i64 %20, -6141256631827407151
  %742 = xor i64 %20, -1
  %743 = or i64 6141256631827407150, %742
  %744 = xor i64 %743, -1
  %745 = and i64 %744, -1
  %746 = and i64 %38, -529893827043302839
  %747 = or i64 529893827043302838, %38
  %748 = sub i64 %747, 529893827043302838
  %749 = and i64 %8, -5192219377762887496
  %750 = xor i64 %8, -1
  %751 = or i64 5192219377762887495, %750
  %752 = xor i64 %751, -1
  %753 = and i64 %752, -1
  %754 = xor i64 -6506382311922023613, %749
  %755 = xor i64 %754, %753
  %756 = xor i64 %755, %741
  %757 = xor i64 %756, %746
  %758 = xor i64 %757, %745
  %759 = xor i64 %758, %748
  %760 = or i64 %44, 840903996833154341
  %761 = xor i64 %44, -1
  %762 = and i64 %761, -2172380492812258445
  %763 = and i64 %44, 2172380492812258444
  %764 = or i64 %762, %763
  %765 = xor i64 -1553360575829002666, %764
  %766 = xor i64 %44, -1
  %767 = or i64 -840903996833154342, %766
  %768 = xor i64 %767, -1
  %769 = and i64 %768, -1
  %770 = or i64 %765, %769
  %771 = and i64 %36, -1191981569332301018
  %772 = xor i64 %36, -1
  %773 = or i64 1191981569332301017, %772
  %774 = xor i64 %773, -1
  %775 = and i64 %774, -1
  %776 = xor i64 1863056393308101922, %770
  %777 = xor i64 %776, %775
  %778 = xor i64 %777, %760
  %779 = xor i64 %778, %771
  %780 = mul i64 %759, %779
  %781 = sub i64 5694441397486831143, %780
  %.reload180 = load i1, i1* %.reg2mem178, align 1
  %.reload183 = load i1, i1* %.reg2mem181, align 1
  %782 = xor i1 %.reload180, true
  %783 = and i1 %782, false
  %784 = or i64 %36, -2782081288933421109
  %785 = xor i64 %36, -1
  %786 = and i64 %785, -4243046507894780551
  %787 = and i64 %36, 4243046507894780550
  %788 = or i64 %786, %787
  %789 = xor i64 2051851838803968690, %788
  %790 = xor i64 %36, -1
  %791 = or i64 2782081288933421108, %790
  %792 = xor i64 %791, -1
  %793 = and i64 %792, -1
  %794 = or i64 %789, %793
  %795 = or i64 %86, -1831383803439867622
  %796 = and i64 -1831383803439867622, %86
  %797 = xor i64 -1831383803439867622, %86
  %798 = or i64 %796, %797
  %799 = or i64 %46, 675549578962444297
  %800 = and i64 675549578962444297, %46
  %801 = xor i64 675549578962444297, %46
  %802 = or i64 %800, %801
  %803 = xor i64 %795, %794
  %804 = xor i64 %803, %784
  %805 = xor i64 %804, -2965943925201087135
  %806 = xor i64 %805, %798
  %807 = xor i64 %806, %802
  %808 = xor i64 %807, %799
  %809 = add i64 %6, -6547565908488526213
  %810 = sub i64 0, %6
  %811 = add i64 6547565908488526213, %810
  %812 = sub i64 0, %811
  %813 = and i64 %26, -9139774945541609333
  %814 = or i64 9139774945541609332, %26
  %815 = sub i64 %814, 9139774945541609332
  %816 = xor i64 -7470115472162812255, %815
  %817 = xor i64 %816, %813
  %818 = xor i64 %817, %809
  %819 = xor i64 %818, %812
  %820 = mul i64 %808, %819
  %821 = trunc i64 %820 to i1
  %822 = and i1 %.reload180, %821
  %823 = or i1 %783, %822
  %824 = add i64 %48, -12161379233246659
  %825 = add i64 5048213582663527091, %48
  %826 = add i64 %825, -5060374961896773750
  %827 = add i64 %30, 3045754138201367804
  %828 = sub i64 0, %30
  %829 = add i64 -3045754138201367804, %828
  %830 = sub i64 0, %829
  %831 = xor i64 %826, 7495451592534363357
  %832 = xor i64 %831, %827
  %833 = xor i64 %832, %824
  %834 = xor i64 %833, %830
  %835 = and i64 %24, -1918257794550221593
  %836 = xor i64 %24, -1
  %837 = or i64 1918257794550221592, %836
  %838 = xor i64 %837, -1
  %839 = and i64 %838, -1
  %840 = add i64 %24, 863443257708631651
  %841 = and i64 863443257708631651, %24
  %842 = or i64 863443257708631651, %24
  %843 = add i64 %841, %842
  %844 = or i64 %34, 5056502192747600446
  %845 = xor i64 %34, -1
  %846 = and i64 %845, 5855080868669001632
  %847 = and i64 %34, -5855080868669001633
  %848 = or i64 %846, %847
  %849 = xor i64 1688041665002460574, %848
  %850 = xor i64 %34, -1
  %851 = or i64 -5056502192747600447, %850
  %852 = xor i64 %851, -1
  %853 = and i64 %852, -1
  %854 = or i64 %849, %853
  %855 = xor i64 8706439730810301301, %835
  %856 = xor i64 %855, %840
  %857 = xor i64 %856, %844
  %858 = xor i64 %857, %854
  %859 = xor i64 %858, %843
  %860 = xor i64 %859, %839
  %861 = mul i64 %834, %860
  %862 = trunc i64 %861 to i1
  %863 = xor i1 %.reload183, %862
  %864 = and i1 %863, false
  %865 = and i1 %.reload183, true
  %866 = or i1 %864, %865
  %867 = xor i1 %823, %866
  %868 = xor i1 %.reload180, true
  %869 = xor i1 %.reload183, true
  %870 = or i1 %868, %869
  %871 = xor i1 %870, true
  %872 = or i64 %44, 7347006852297255245
  %873 = xor i64 %44, -1
  %874 = and i64 7347006852297255245, %873
  %875 = add i64 %874, %44
  %876 = and i64 %12, -5220423819945368176
  %877 = xor i64 %12, -1
  %878 = xor i64 -5220423819945368176, %877
  %879 = and i64 %878, -5220423819945368176
  %880 = xor i64 %876, %879
  %881 = xor i64 %880, %875
  %882 = xor i64 %881, 1914874208042712001
  %883 = xor i64 %882, %872
  %884 = and i64 %48, -5147743935712604993
  %885 = or i64 5147743935712604992, %48
  %886 = sub i64 %885, 5147743935712604992
  %887 = and i64 %54, -1607113757168274824
  %888 = xor i64 %54, -1
  %889 = xor i64 -1607113757168274824, %888
  %890 = and i64 %889, -1607113757168274824
  %891 = or i64 %24, 841807680283276163
  %892 = xor i64 %24, -1
  %893 = and i64 841807680283276163, %892
  %894 = add i64 %893, %24
  %895 = xor i64 %884, %887
  %896 = xor i64 %895, %886
  %897 = xor i64 %896, %894
  %898 = xor i64 %897, %890
  %899 = xor i64 %898, %891
  %900 = xor i64 %899, -4022407963243932607
  %901 = mul i64 %883, %900
  %902 = trunc i64 %901 to i1
  %903 = and i1 %871, %902
  %904 = or i1 %867, %903
  store i1 %904, i1* %.reg2mem184, align 1
  %905 = mul i64 52, 106
  %.reload174 = load i1, i1* %.reg2mem170, align 1
  %906 = xor i1 %.reload174, true
  store i1 %906, i1* %.reg2mem187, align 1
  %.reload189 = load i1, i1* %.reg2mem187, align 1
  %907 = and i1 %.reload189, true
  store i1 %907, i1* %.reg2mem190, align 1
  %.reload173 = load i1, i1* %.reg2mem170, align 1
  %908 = and i1 %.reload173, false
  store i1 %908, i1* %.reg2mem193, align 1
  %.reload192 = load i1, i1* %.reg2mem190, align 1
  %.reload195 = load i1, i1* %.reg2mem193, align 1
  %909 = xor i1 %.reload192, true
  %910 = and i1 %909, false
  %911 = and i1 %.reload192, true
  %912 = or i1 %910, %911
  %913 = xor i1 %.reload195, true
  %914 = and i1 %913, false
  %915 = and i1 %.reload195, true
  %916 = or i1 %914, %915
  %917 = xor i1 %912, %916
  %918 = xor i1 %.reload192, true
  %919 = xor i1 %.reload195, true
  %920 = or i1 %918, %919
  %921 = xor i1 %920, true
  %922 = and i1 %921, true
  %923 = or i1 %917, %922
  store i1 %923, i1* %.reg2mem196, align 1
  %.reload186 = load i1, i1* %.reg2mem184, align 1
  %.reload198 = load i1, i1* %.reg2mem196, align 1
  %924 = xor i1 %.reload186, %.reload198
  store i1 %924, i1* %.reg2mem199, align 1
  %.reload161 = load i1, i1* %.reg2mem159, align 1
  %925 = xor i1 %.reload161, true
  store i1 %925, i1* %.reg2mem203, align 1
  %.reload172 = load i1, i1* %.reg2mem170, align 1
  %926 = xor i1 %.reload172, true
  %927 = and i1 %926, false
  %928 = and i1 %.reload172, true
  %929 = or i1 %927, %928
  %930 = xor i1 %929, true
  store i1 %930, i1* %.reg2mem206, align 1
  %.reload205 = load i1, i1* %.reg2mem203, align 1
  %.reload208 = load i1, i1* %.reg2mem206, align 1
  %931 = add i64 %38, -3434616710895616426
  %932 = and i64 -3434616710895616426, %38
  %933 = or i64 -3434616710895616426, %38
  %934 = add i64 %932, %933
  %935 = and i64 %10, 8862330101851809488
  %936 = xor i64 %10, -1
  %937 = xor i64 8862330101851809488, %936
  %938 = and i64 %937, 8862330101851809488
  %939 = xor i64 2585697139897478785, %934
  %940 = xor i64 %939, %938
  %941 = xor i64 %940, %935
  %942 = xor i64 %941, %931
  %943 = and i64 %30, -2201926530912532205
  %944 = or i64 2201926530912532204, %30
  %945 = sub i64 %944, 2201926530912532204
  %946 = and i64 %38, 3550984937243905123
  %947 = or i64 -3550984937243905124, %38
  %948 = sub i64 %947, -3550984937243905124
  %949 = xor i64 %946, 9219532117459669377
  %950 = xor i64 %949, %943
  %951 = xor i64 %950, %948
  %952 = xor i64 %951, %945
  %953 = mul i64 %942, %952
  %954 = trunc i64 %953 to i1
  %955 = xor i1 %.reload208, %954
  %956 = and i1 %.reload205, %955
  %957 = add i1 %956, %.reload208
  store i1 %957, i1* %.reg2mem209, align 1
  %.reload211 = load i1, i1* %.reg2mem209, align 1
  %958 = and i64 %12, 3139841590377820263
  %959 = xor i64 %12, -1
  %960 = xor i64 3139841590377820263, %959
  %961 = and i64 %960, 3139841590377820263
  %962 = add i64 %88, 6410955651024608061
  %963 = and i64 6410955651024608061, %88
  %964 = or i64 6410955651024608061, %88
  %965 = add i64 %963, %964
  %966 = or i64 %12, 768701471285155670
  %967 = and i64 768701471285155670, %12
  %968 = xor i64 768701471285155670, %12
  %969 = or i64 %967, %968
  %970 = xor i64 %969, %961
  %971 = xor i64 %970, %958
  %972 = xor i64 %971, %966
  %973 = xor i64 %972, %962
  %974 = xor i64 %973, %965
  %975 = xor i64 %974, 5411320341120319531
  %976 = and i64 %82, -8862134943995690146
  %977 = xor i64 %82, -1
  %978 = xor i64 -8862134943995690146, %977
  %979 = and i64 %978, -8862134943995690146
  %980 = or i64 %8, -2154647657752760888
  %981 = and i64 -2154647657752760888, %8
  %982 = xor i64 -2154647657752760888, %8
  %983 = or i64 %981, %982
  %984 = add i64 %32, -3736058722143221649
  %985 = xor i64 -3736058722143221649, %32
  %986 = and i64 -3736058722143221649, %32
  %987 = mul i64 2, %986
  %988 = add i64 %985, %987
  %989 = xor i64 %988, %976
  %990 = xor i64 %989, %980
  %991 = xor i64 %990, -2746344808254914941
  %992 = xor i64 %991, %979
  %993 = xor i64 %992, %983
  %994 = xor i64 %993, %984
  %995 = mul i64 %975, %994
  %996 = trunc i64 %995 to i1
  %997 = xor i1 %.reload211, %996
  store i1 %997, i1* %.reg2mem212, align 1
  %.reload5.reload = load i32, i32* %.reload5.reg2mem, align 4
  %998 = srem i32 %.reload5.reload, 2
  %999 = icmp eq i32 %998, 0
  %.reload157 = load i32, i32* %.reg2mem153, align 4
  %1000 = mul i32 %.reload157, 2
  %.reload156 = load i32, i32* %.reg2mem153, align 4
  %1001 = mul i32 %.reload156, 2
  %1002 = add i32 2, %1001
  %1003 = mul i32 %1000, %1002
  %1004 = srem i32 %1003, 4
  %1005 = icmp eq i32 %1004, 0
  %.reload155 = load i32, i32* %.reg2mem153, align 4
  %1006 = mul i32 %.reload155, %.reload155
  %.reload154 = load i32, i32* %.reg2mem153, align 4
  %1007 = add i32 %1006, %.reload154
  %1008 = srem i32 %1007, 2
  %1009 = icmp eq i32 %1008, 0
  %1010 = and i1 %1005, %1009
  store i1 %1010, i1* %.reg2mem216, align 1
  %.reload72 = load i8**, i8*** %.reg2mem71, align 8
  %.reload75 = load i8**, i8*** %.reg2mem74, align 8
  %.reload217 = load i1, i1* %.reg2mem216, align 1
  %1011 = select i1 %.reload217, i8** %.reload75, i8** %.reload72
  %1012 = load i8*, i8** %1011, align 8
  indirectbr i8* %1012, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

codeRepl26:                                       ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast32 = bitcast i1* %.loc27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast32)
  %lt.cast33 = bitcast i1* %.loc28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast33)
  store i64 5221456193252566389, i64* %81, align 8
  %1013 = call i8** @lk3314813992465304394(i64* %81)
  %1014 = load i8*, i8** %1013, align 8
  %1015 = bitcast i8* %1014 to i1 (i1, i1, i1, i1*, i1*)*
  %.reload202 = load i1, i1* %.reg2mem199, align 1
  %.reload215 = load i1, i1* %.reg2mem212, align 1
  %.reload218 = load i1, i1* %.reg2mem216, align 1
  %targetBlock29 = call i1 %1015(i1 %.reload215, i1 %.reload202, i1 %.reload218, i1* %.loc27, i1* %.loc28)
  %.reload30 = load i1, i1* %.loc27, align 1
  %.reload31 = load i1, i1* %.loc28, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast32)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast33)
  %.reload49 = load i8**, i8*** %.reg2mem48, align 8
  %.reload79 = load i8**, i8*** %.reg2mem77, align 8
  %1016 = select i1 %targetBlock29, i8** %.reload79, i8** %.reload49
  %1017 = load i8*, i8** %1016, align 8
  store i1 %.reload30, i1* %.reg2mem221, align 1
  store i1 %.reload31, i1* %.reg2mem223, align 1
  indirectbr i8* %1017, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"16":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload214 = load i1, i1* %.reg2mem212, align 1
  %1018 = and i1 %.reload214, true
  %.reload201 = load i1, i1* %.reg2mem199, align 1
  %1019 = and i1 %.reload201, %1018
  %1020 = xor i1 %.reload201, %1018
  %1021 = or i1 %1019, %1020
  %.reload78 = load i8**, i8*** %.reg2mem77, align 8
  %1022 = load i8*, i8** %.reload78, align 8
  store i1 %1018, i1* %.reg2mem221, align 1
  store i1 %1021, i1* %.reg2mem223, align 1
  indirectbr i8* %1022, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"17":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload224 = load i1, i1* %.reg2mem223, align 1
  %.reload222 = load i1, i1* %.reg2mem221, align 1
  %.reload86 = load i8**, i8*** %.reg2mem84, align 8
  %1023 = load i8*, i8** %.reload86, align 8
  %.reload168 = load i32, i32* %.reg2mem167, align 4
  %.reload171 = load i1, i1* %.reg2mem170, align 1
  %.reload176 = load i1, i1* %.reg2mem175, align 1
  %.reload179 = load i1, i1* %.reg2mem178, align 1
  %.reload182 = load i1, i1* %.reg2mem181, align 1
  %.reload185 = load i1, i1* %.reg2mem184, align 1
  %.reload188 = load i1, i1* %.reg2mem187, align 1
  %.reload191 = load i1, i1* %.reg2mem190, align 1
  %.reload194 = load i1, i1* %.reg2mem193, align 1
  %.reload197 = load i1, i1* %.reg2mem196, align 1
  %.reload200 = load i1, i1* %.reg2mem199, align 1
  %.reload204 = load i1, i1* %.reg2mem203, align 1
  %.reload207 = load i1, i1* %.reg2mem206, align 1
  %.reload210 = load i1, i1* %.reg2mem209, align 1
  %.reload213 = load i1, i1* %.reg2mem212, align 1
  store i1 %.reload224, i1* %.reg2mem225, align 1
  indirectbr i8* %1023, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

codeRepl34:                                       ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast69 = bitcast i32* %.loc35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast69)
  %lt.cast70 = bitcast i1* %.loc36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast70)
  %lt.cast71 = bitcast i1* %.loc37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast71)
  %lt.cast72 = bitcast i1* %.loc38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast72)
  %lt.cast73 = bitcast i1* %.loc39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast73)
  %lt.cast74 = bitcast i1* %.loc40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast74)
  %lt.cast75 = bitcast i1* %.loc41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast75)
  %lt.cast76 = bitcast i1* %.loc42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast76)
  %lt.cast77 = bitcast i1* %.loc43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast77)
  %lt.cast78 = bitcast i1* %.loc44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast78)
  %lt.cast79 = bitcast i1* %.loc45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast79)
  %lt.cast80 = bitcast i1* %.loc46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast80)
  %lt.cast81 = bitcast i1* %.loc47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast81)
  %lt.cast82 = bitcast i1* %.loc48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast82)
  %lt.cast83 = bitcast i1* %.loc49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast83)
  %lt.cast84 = bitcast i1* %.loc50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast84)
  %lt.cast85 = bitcast i1* %.loc51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast85)
  store i64 5221456193252566388, i64* %81, align 8
  %1024 = call i8** @lk3314813992465304394(i64* %81)
  %1025 = load i8*, i8** %1024, align 8
  %1026 = bitcast i8* %1025 to void (i32, i1, i32*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.reload160 = load i1, i1* %.reg2mem159, align 1
  %.reload165 = load i32, i32* %.reg2mem164, align 4
  call void %1026(i32 %.reload165, i1 %.reload160, i32* %.loc35, i1* %.loc36, i1* %.loc37, i1* %.loc38, i1* %.loc39, i1* %.loc40, i1* %.loc41, i1* %.loc42, i1* %.loc43, i1* %.loc44, i1* %.loc45, i1* %.loc46, i1* %.loc47, i1* %.loc48, i1* %.loc49, i1* %.loc50, i1* %.loc51)
  %.reload52 = load i32, i32* %.loc35, align 4
  %.reload53 = load i1, i1* %.loc36, align 1
  %.reload54 = load i1, i1* %.loc37, align 1
  %.reload55 = load i1, i1* %.loc38, align 1
  %.reload56 = load i1, i1* %.loc39, align 1
  %.reload57 = load i1, i1* %.loc40, align 1
  %.reload58 = load i1, i1* %.loc41, align 1
  %.reload59 = load i1, i1* %.loc42, align 1
  %.reload60 = load i1, i1* %.loc43, align 1
  %.reload61 = load i1, i1* %.loc44, align 1
  %.reload62 = load i1, i1* %.loc45, align 1
  %.reload63 = load i1, i1* %.loc46, align 1
  %.reload64 = load i1, i1* %.loc47, align 1
  %.reload65 = load i1, i1* %.loc48, align 1
  %.reload66 = load i1, i1* %.loc49, align 1
  %.reload67 = load i1, i1* %.loc50, align 1
  %.reload68 = load i1, i1* %.loc51, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast69)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast70)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast71)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast72)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast73)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast74)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast75)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast76)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast77)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast78)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast79)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast80)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast81)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast82)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast83)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast84)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast85)
  %.reload85 = load i8**, i8*** %.reg2mem84, align 8
  %1027 = load i8*, i8** %.reload85, align 8
  store i1 %.reload68, i1* %.reg2mem225, align 1
  indirectbr i8* %1027, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"19":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload226 = load i1, i1* %.reg2mem225, align 1
  %.reload89 = load i8**, i8*** %.reg2mem88, align 8
  %.reload93 = load i8**, i8*** %.reg2mem91, align 8
  %1028 = select i1 %.reload226, i8** %.reload89, i8** %.reload93
  %1029 = load i8*, i8** %1028, align 8
  indirectbr i8* %1029, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

codeRepl86:                                       ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566391, i64* %81, align 8
  %1030 = call i8** @lk3314813992465304394(i64* %81)
  %1031 = load i8*, i8** %1030, align 8
  %1032 = bitcast i8* %1031 to void ()*
  call void %1032()
  %.reload92 = load i8**, i8*** %.reg2mem91, align 8
  %1033 = load i8*, i8** %.reload92, align 8
  indirectbr i8* %1033, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"21":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload150 = load i8, i8* %.reg2mem149, align 1
  %.reload152 = load i8*, i8** %.reg2mem151, align 8
  store i8 %.reload150, i8* %.reload152, align 1, !tbaa !16
  %.reload96 = load i8**, i8*** %.reg2mem95, align 8
  %1034 = load i8*, i8** %.reload96, align 8
  indirectbr i8* %1034, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"22":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload122 = load double, double* %.reg2mem121, align 8
  %1035 = fadd double %.reload122, 2.000000e-02
  %1036 = fptrunc double %1035 to float
  %1037 = fpext float %1036 to double
  %1038 = fcmp olt double %1037, 6.280000e+00
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload101 = load i8**, i8*** %.reg2mem100, align 8
  %1039 = select i1 %1038, i8** %.reload10, i8** %.reload101
  %1040 = load i8*, i8** %1039, align 8
  store double %1037, double* %.reg2mem219, align 8
  indirectbr i8* %1040, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

.loopexit:                                        ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload104 = load i8**, i8*** %.reg2mem103, align 8
  %1041 = load i8*, i8** %.reload104, align 8
  store i32 0, i32* %.reg2mem227, align 4
  indirectbr i8* %1041, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %codeRepl10, label %"7", label %"8", label %"9", label %"10", label %"11", label %codeRepl15, label %"13", label %"14", label %codeRepl26, label %"16", label %"17", label %codeRepl34, label %"19", label %codeRepl86, label %"21", label %"22", label %.loopexit, label %"24"]

"24":                                             ; preds = %.loopexit, %"22", %"21", %codeRepl86, %"19", %codeRepl34, %"17", %"16", %codeRepl26, %"14", %"13", %codeRepl15, %"11", %"10", %"9", %"8", %"7", %codeRepl10, %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload228 = load i32, i32* %.reg2mem227, align 4
  ret i32 %.reload228
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double) #7

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double) #7

declare i32 @"\01_usleep"(i32) local_unnamed_addr #8

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: mustprogress nofree noinline norecurse nounwind ssp uwtable
define internal i1 @update..split(float* %0, float* %1) #10 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314419)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@update..split, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314412)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@update..split, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314548)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@update..split, %.exitStub), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314387)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@update..split, %loopEnd), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314404)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@update..split, %loopStart), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314402)
  %14 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %13
  store i8* blockaddress(@update..split, %.split), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314400)
  %16 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %15
  store i8* blockaddress(@update..split, %.exitStub1), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314533)
  %18 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %17
  store i8* blockaddress(@update..split, %EntryBasicBlockSplit), i8** %18, align 8
  %lookupTable = alloca [9 x i32], align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %27, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314404, i32* %2, align 4
  %28 = call i8** @bf3325468485390379012(i32* %2)
  %29 = load i8*, i8** %28, align 8
  indirectbr i8* %29, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %30 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = sub i32 %31, -946826085
  %35 = add i32 %34, %33
  %36 = add i32 %35, -946826085
  store i32 %36, i32* %dispatcher, align 4
  %37 = load i8*, i8** %18, align 8
  %38 = load i8, i8* %37, align 1
  %39 = sext i32 %dispatcher1 to i64
  %40 = and i64 %39, -5860536203946531296
  %41 = xor i64 %39, -1
  %42 = xor i64 -5860536203946531296, %41
  %43 = and i64 %42, -5860536203946531296
  %44 = and i64 %15, 6328743844162030333
  %45 = xor i64 %15, -1
  %46 = xor i64 6328743844162030333, %45
  %47 = and i64 %46, 6328743844162030333
  %48 = xor i64 %44, %40
  %49 = xor i64 %48, %43
  %50 = xor i64 %49, 7629925195683322677
  %51 = xor i64 %50, %47
  %52 = or i64 %13, 156507861744956404
  %53 = xor i64 %13, -1
  %54 = and i64 %53, 3462752546097296230
  %55 = and i64 %13, -3462752546097296231
  %56 = or i64 %54, %55
  %57 = xor i64 3612498273386381458, %56
  %58 = xor i64 %13, -1
  %59 = or i64 -156507861744956405, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = or i64 %57, %61
  %63 = and i64 %3, 3316967686987623944
  %64 = xor i64 %3, -1
  %65 = xor i64 3316967686987623944, %64
  %66 = and i64 %65, 3316967686987623944
  %67 = xor i64 %66, 7527661988183007005
  %68 = xor i64 %67, %62
  %69 = xor i64 %68, %52
  %70 = xor i64 %69, %63
  %71 = mul i64 %51, %70
  %72 = trunc i64 %71 to i8
  %73 = and i8 %38, %72
  %74 = icmp eq i8 %73, 0
  %75 = mul i8 %38, %38
  %76 = add i8 %75, %38
  %77 = sext i32 %dispatcher1 to i64
  %78 = add i64 %77, 3395238656340152402
  %79 = add i64 3732758218406182855, %77
  %80 = add i64 %79, -337519562066030453
  %81 = sext i32 %dispatcher1 to i64
  %82 = add i64 %81, 3826221423930125390
  %83 = sub i64 0, %81
  %84 = sub i64 3826221423930125390, %83
  %85 = xor i64 %80, %84
  %86 = xor i64 %85, %82
  %87 = xor i64 %86, -7386271153285446611
  %88 = xor i64 %87, %78
  %89 = or i64 %15, -2022589750366954365
  %90 = and i64 -2022589750366954365, %15
  %91 = xor i64 -2022589750366954365, %15
  %92 = or i64 %90, %91
  %93 = or i64 %15, -7300767750190961150
  %94 = and i64 -7300767750190961150, %15
  %95 = xor i64 -7300767750190961150, %15
  %96 = or i64 %94, %95
  %97 = add i64 %11, -4181655100128157977
  %98 = add i64 8494129501060786379, %11
  %99 = sub i64 %98, -5770959472520607260
  %100 = xor i64 %99, %96
  %101 = xor i64 %100, %89
  %102 = xor i64 %101, %92
  %103 = xor i64 %102, %97
  %104 = xor i64 %103, -2754403713113750801
  %105 = xor i64 %104, %93
  %106 = mul i64 %88, %105
  %107 = trunc i64 %106 to i8
  %108 = mul i8 %76, %107
  %109 = srem i8 %108, 2
  %110 = icmp eq i8 %109, 0
  %111 = or i1 %74, %110
  %112 = select i1 %111, i32 388314412, i32 388314387
  %113 = xor i32 %112, 63
  store i32 %113, i32* %2, align 4
  %114 = call i8** @bf3325468485390379012(i32* %2)
  %115 = load i8*, i8** %114, align 8
  indirectbr i8* %115, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %116 = icmp eq float* %0, null
  %117 = icmp eq float* %1, null
  %118 = select i1 %116, i1 true, i1 %117
  %119 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %122 = load i32, i32* %121, align 4
  %123 = srem i32 %120, %122
  %124 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %127 = load i32, i32* %126, align 4
  %128 = sub i32 0, %127
  %129 = add i32 %125, %128
  %130 = select i1 %118, i32 %123, i32 %129
  store i32 %130, i32* %dispatcher, align 4
  %131 = load i8*, i8** %8, align 8
  %132 = load i8, i8* %131, align 1
  %133 = mul i8 %132, 2
  %134 = and i64 %15, -194160459948223218
  %135 = or i64 194160459948223217, %15
  %136 = sub i64 %135, 194160459948223217
  %137 = or i64 %17, -4094039769220621106
  %138 = xor i64 %17, -1
  %139 = and i64 %138, 1547904186470607737
  %140 = and i64 %17, -1547904186470607738
  %141 = or i64 %139, %140
  %142 = xor i64 -3290919470647478345, %141
  %143 = xor i64 %17, -1
  %144 = or i64 4094039769220621105, %143
  %145 = xor i64 %144, -1
  %146 = and i64 %145, -1
  %147 = or i64 %142, %146
  %148 = xor i64 %136, -1620444339391933105
  %149 = xor i64 %148, %147
  %150 = xor i64 %149, %134
  %151 = xor i64 %150, %137
  %152 = add i64 %3, 3505664432165330689
  %153 = add i64 6477302831414267265, %3
  %154 = sub i64 %153, 2971638399248936576
  %155 = and i64 %11, 7962323542525131648
  %156 = xor i64 %11, -1
  %157 = xor i64 7962323542525131648, %156
  %158 = and i64 %157, 7962323542525131648
  %159 = add i64 %3, -3586067256947888557
  %160 = and i64 -3586067256947888557, %3
  %161 = or i64 -3586067256947888557, %3
  %162 = add i64 %160, %161
  %163 = xor i64 %162, 2769512837698241374
  %164 = xor i64 %163, %155
  %165 = xor i64 %164, %154
  %166 = xor i64 %165, %152
  %167 = xor i64 %166, %159
  %168 = xor i64 %167, %158
  %169 = mul i64 %151, %168
  %170 = trunc i64 %169 to i8
  %171 = mul i8 %132, %170
  %172 = add i8 2, %171
  %173 = mul i8 %133, %172
  %174 = srem i8 %173, 4
  %175 = icmp eq i8 %174, 0
  %176 = mul i8 %132, %132
  %177 = add i8 %176, %132
  %178 = and i64 %17, -4920503168927473103
  %179 = xor i64 %17, -1
  %180 = or i64 4920503168927473102, %179
  %181 = xor i64 %180, -1
  %182 = and i64 %181, -1
  %183 = sext i32 %dispatcher1 to i64
  %184 = or i64 %183, -436818063057421867
  %185 = and i64 -436818063057421867, %183
  %186 = xor i64 -436818063057421867, %183
  %187 = or i64 %185, %186
  %188 = xor i64 -7799911285152260497, %187
  %189 = xor i64 %188, %184
  %190 = xor i64 %189, %178
  %191 = xor i64 %190, %182
  %192 = or i64 %17, -6207177820529244527
  %193 = xor i64 %17, -1
  %194 = and i64 %193, -7421023359917525160
  %195 = and i64 %17, 7421023359917525159
  %196 = or i64 %194, %195
  %197 = xor i64 3519728285977588169, %196
  %198 = xor i64 %17, -1
  %199 = or i64 6207177820529244526, %198
  %200 = xor i64 %199, -1
  %201 = and i64 %200, -1
  %202 = or i64 %197, %201
  %203 = or i64 %9, 108888793462398315
  %204 = xor i64 %9, -1
  %205 = and i64 %204, -804229375713059030
  %206 = and i64 %9, 804229375713059029
  %207 = or i64 %205, %206
  %208 = xor i64 -768967220655521215, %207
  %209 = xor i64 %9, -1
  %210 = or i64 -108888793462398316, %209
  %211 = xor i64 %210, -1
  %212 = and i64 %211, -1
  %213 = or i64 %208, %212
  %214 = and i64 %11, 6612557312481108374
  %215 = xor i64 %11, -1
  %216 = xor i64 6612557312481108374, %215
  %217 = and i64 %216, 6612557312481108374
  %218 = xor i64 460930232915951902, %213
  %219 = xor i64 %218, %202
  %220 = xor i64 %219, %192
  %221 = xor i64 %220, %214
  %222 = xor i64 %221, %203
  %223 = xor i64 %222, %217
  %224 = mul i64 %191, %223
  %225 = trunc i64 %224 to i8
  %226 = srem i8 %177, %225
  %227 = icmp eq i8 %226, 0
  %228 = or i1 %175, %227
  %229 = select i1 %228, i32 388314548, i32 388314387
  %230 = xor i32 %229, -1
  %231 = and i32 %230, 1338339951
  %232 = and i32 %229, -1338339952
  %233 = or i32 %231, %232
  %234 = xor i32 %233, 1338340040
  store i32 %234, i32* %2, align 4
  %235 = call i8** @bf3325468485390379012(i32* %2)
  %236 = load i8*, i8** %235, align 8
  indirectbr i8* %236, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %237 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %237, align 4
  %238 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %238, align 4
  %239 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %240 = add i64 %11, 2892014200697629264
  %241 = add i64 6876554338657236827, %11
  %242 = add i64 %241, -3984540137959607563
  %243 = and i64 %17, 1994088937909482393
  %244 = or i64 -1994088937909482394, %17
  %245 = sub i64 %244, -1994088937909482394
  %246 = sext i32 %dispatcher1 to i64
  %247 = or i64 %246, 542294739152003970
  %248 = and i64 542294739152003970, %246
  %249 = xor i64 542294739152003970, %246
  %250 = or i64 %248, %249
  %251 = xor i64 %247, %240
  %252 = xor i64 %251, 448625002109651461
  %253 = xor i64 %252, %245
  %254 = xor i64 %253, %242
  %255 = xor i64 %254, %250
  %256 = xor i64 %255, %243
  %257 = or i64 %7, 3838138176081307137
  %258 = xor i64 %7, -1
  %259 = and i64 %258, -8315289455984955453
  %260 = and i64 %7, 8315289455984955452
  %261 = or i64 %259, %260
  %262 = xor i64 -5054756089363035710, %261
  %263 = xor i64 %7, -1
  %264 = or i64 -3838138176081307138, %263
  %265 = xor i64 %264, -1
  %266 = and i64 %265, -1
  %267 = or i64 %262, %266
  %268 = add i64 %5, 7588518907497548637
  %269 = and i64 7588518907497548637, %5
  %270 = or i64 7588518907497548637, %5
  %271 = add i64 %269, %270
  %272 = xor i64 %271, %257
  %273 = xor i64 %272, %267
  %274 = xor i64 %273, 4782375991041022055
  %275 = xor i64 %274, %268
  %276 = mul i64 %256, %275
  %277 = trunc i64 %276 to i32
  store i32 %277, i32* %239, align 4
  %278 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %278, align 4
  %279 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %279, align 4
  %280 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %281 = load i32, i32* %280, align 4
  store i32 %281, i32* %dispatcher, align 4
  %282 = load i8*, i8** %6, align 8
  %283 = load i8, i8* %282, align 1
  %284 = mul i8 %283, 2
  %285 = and i64 %17, -3462462825178210831
  %286 = xor i64 %17, -1
  %287 = xor i64 -3462462825178210831, %286
  %288 = and i64 %287, -3462462825178210831
  %289 = and i64 %3, -2552121571879038372
  %290 = xor i64 %3, -1
  %291 = or i64 2552121571879038371, %290
  %292 = xor i64 %291, -1
  %293 = and i64 %292, -1
  %294 = xor i64 -7378967720115325393, %289
  %295 = xor i64 %294, %293
  %296 = xor i64 %295, %288
  %297 = xor i64 %296, %285
  %298 = or i64 %7, 8964986964030727225
  %299 = xor i64 %7, -1
  %300 = and i64 %299, 5964092082965654235
  %301 = and i64 %7, -5964092082965654236
  %302 = or i64 %300, %301
  %303 = xor i64 3363834893194497762, %302
  %304 = xor i64 %7, -1
  %305 = or i64 -8964986964030727226, %304
  %306 = xor i64 %305, -1
  %307 = and i64 %306, -1
  %308 = or i64 %303, %307
  %309 = add i64 %5, 7485691854420884653
  %310 = add i64 -5405884624758754309, %5
  %311 = sub i64 %310, 5555167594529912654
  %312 = xor i64 1904506198005031326, %298
  %313 = xor i64 %312, %308
  %314 = xor i64 %313, %309
  %315 = xor i64 %314, %311
  %316 = mul i64 %297, %315
  %317 = trunc i64 %316 to i8
  %318 = mul i8 %283, %317
  %319 = add i8 2, %318
  %320 = mul i8 %284, %319
  %321 = srem i8 %320, 4
  %322 = icmp eq i8 %321, 0
  %323 = mul i8 %283, %283
  %324 = add i8 %323, %283
  %325 = srem i8 %324, 2
  %326 = icmp eq i8 %325, 0
  %327 = or i1 %322, %326
  %328 = select i1 %327, i32 388314400, i32 388314533
  %329 = xor i32 %328, 133
  store i32 %329, i32* %2, align 4
  %330 = call i8** @bf3325468485390379012(i32* %2)
  %331 = load i8*, i8** %330, align 8
  indirectbr i8* %331, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %332 = load i8*, i8** %14, align 8
  %333 = load i8, i8* %332, align 1
  %334 = and i8 %333, 1
  %335 = icmp eq i8 %334, 1
  %336 = mul i8 %333, %333
  %337 = add i8 %336, %333
  %338 = srem i8 %337, 2
  %339 = icmp eq i8 %338, 0
  %340 = or i1 %335, %339
  %341 = sext i32 %dispatcher1 to i64
  %342 = add i64 %341, 1901756452879367462
  %343 = add i64 -3802624570563184237, %341
  %344 = sub i64 %343, -5704381023442551699
  %345 = add i64 %3, -3671850764710642221
  %346 = sub i64 0, %3
  %347 = add i64 3671850764710642221, %346
  %348 = sub i64 0, %347
  %349 = add i64 %13, 4812821531724175803
  %350 = xor i64 4812821531724175803, %13
  %351 = and i64 4812821531724175803, %13
  %352 = mul i64 2, %351
  %353 = add i64 %350, %352
  %354 = xor i64 2647410455306247465, %349
  %355 = xor i64 %354, %348
  %356 = xor i64 %355, %344
  %357 = xor i64 %356, %353
  %358 = xor i64 %357, %345
  %359 = xor i64 %358, %342
  %360 = add i64 %3, -6606364251380158091
  %361 = add i64 8820313623481151404, %3
  %362 = add i64 %361, 3020066198848242121
  %363 = and i64 %13, 3066156182985483379
  %364 = xor i64 %13, -1
  %365 = xor i64 3066156182985483379, %364
  %366 = and i64 %365, 3066156182985483379
  %367 = xor i64 %362, 6570525955267398619
  %368 = xor i64 %367, %366
  %369 = xor i64 %368, %360
  %370 = xor i64 %369, %363
  %371 = mul i64 %359, %370
  %372 = trunc i64 %371 to i32
  %373 = add i64 %3, -609843820171245420
  %374 = add i64 -286900879983598005, %3
  %375 = sub i64 %374, 322942940187647415
  %376 = or i64 %17, -1970779475168095328
  %377 = xor i64 %17, -1
  %378 = and i64 -1970779475168095328, %377
  %379 = add i64 %378, %17
  %380 = or i64 %13, 548414641328451003
  %381 = and i64 548414641328451003, %13
  %382 = xor i64 548414641328451003, %13
  %383 = or i64 %381, %382
  %384 = xor i64 %375, %376
  %385 = xor i64 %384, %379
  %386 = xor i64 %385, 6248507815416353929
  %387 = xor i64 %386, %373
  %388 = xor i64 %387, %383
  %389 = xor i64 %388, %380
  %390 = add i64 %5, 4321766741313287404
  %391 = sub i64 0, %5
  %392 = add i64 -4321766741313287404, %391
  %393 = sub i64 0, %392
  %394 = sext i32 %dispatcher1 to i64
  %395 = add i64 %394, -8981256465177670943
  %396 = xor i64 -8981256465177670943, %394
  %397 = and i64 -8981256465177670943, %394
  %398 = mul i64 2, %397
  %399 = add i64 %396, %398
  %400 = and i64 %9, 467031989908994173
  %401 = or i64 -467031989908994174, %9
  %402 = sub i64 %401, -467031989908994174
  %403 = xor i64 %400, %399
  %404 = xor i64 %403, %393
  %405 = xor i64 %404, %402
  %406 = xor i64 %405, -7991178224277451333
  %407 = xor i64 %406, %390
  %408 = xor i64 %407, %395
  %409 = mul i64 %389, %408
  %410 = trunc i64 %409 to i32
  %411 = select i1 %340, i32 %372, i32 %410
  %412 = xor i32 %411, -677921173
  %413 = xor i32 %412, -677921173
  store i32 %413, i32* %2, align 4
  %414 = call i8** @bf3325468485390379012(i32* %2)
  %415 = load i8*, i8** %414, align 8
  indirectbr i8* %415, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %416 = load i8*, i8** %4, align 8
  %417 = load i8, i8* %416, align 1
  %418 = and i8 %417, 1
  %419 = icmp eq i8 %418, 1
  %420 = mul i8 %417, %417
  %421 = add i8 %420, %417
  %422 = srem i8 %421, 2
  %423 = icmp eq i8 %422, 0
  %424 = or i1 %419, %423
  %425 = select i1 %424, i32 388314404, i32 388314404
  %426 = xor i32 %425, 0
  store i32 %426, i32* %2, align 4
  %427 = call i8** @bf3325468485390379012(i32* %2)
  %428 = load i8*, i8** %427, align 8
  indirectbr i8* %428, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render..split(i64 %0, i32* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314458)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@render..split, %.exitStub), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314450)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@render..split, %.split), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314494)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@render..split, %EntryBasicBlockSplit), i8** %7, align 8
  %8 = and i64 %0, 7995990521426190036
  %9 = xor i64 %0, -1
  %10 = or i64 -7995990521426190037, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %11, -1
  %13 = add i64 %0, -6854329230455875006
  %14 = add i64 -1585918458995001256, %0
  %15 = add i64 %14, -5268410771460873750
  %16 = and i64 %0, -1815823071199392427
  %17 = or i64 1815823071199392426, %0
  %18 = sub i64 %17, 1815823071199392426
  %19 = xor i64 %12, %13
  %20 = xor i64 %19, %15
  %21 = xor i64 %20, 788441106411288829
  %22 = xor i64 %21, %18
  %23 = xor i64 %22, %8
  %24 = xor i64 %23, %16
  %25 = and i64 %0, -7148771810186429198
  %26 = or i64 7148771810186429197, %0
  %27 = sub i64 %26, 7148771810186429197
  %28 = add i64 %0, 4604308084056434962
  %29 = add i64 -6855173832881705443, %0
  %30 = add i64 %29, -6987262156771411211
  %31 = xor i64 %28, %25
  %32 = xor i64 %31, 3009194514200580255
  %33 = xor i64 %32, %27
  %34 = xor i64 %33, %30
  %35 = mul i64 %24, %34
  %36 = call i64 @h9549842938191327224(i64 %35)
  %37 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %36
  store i8* blockaddress(@render..split, %.exitStub1), i8** %37, align 8
  %38 = call i64 @h9549842938191327224(i64 388314460)
  %39 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %38
  store i8* blockaddress(@render..split, %BogusBasciBlock), i8** %39, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %40 = add i64 %0, 382238848550592841
  %41 = sub i64 0, %0
  %42 = add i64 -382238848550592841, %41
  %43 = sub i64 0, %42
  %44 = add i64 %0, -5337411041886838262
  %45 = add i64 7414544332442851959, %0
  %46 = sub i64 %45, -5694788699379861395
  %47 = and i64 %0, -7253394360814055909
  %48 = xor i64 %0, -1
  %49 = xor i64 -7253394360814055909, %48
  %50 = and i64 %49, -7253394360814055909
  %51 = xor i64 %50, %47
  %52 = xor i64 %51, %40
  %53 = xor i64 %52, %43
  %54 = xor i64 %53, %44
  %55 = xor i64 %54, 3844864346933696641
  %56 = xor i64 %55, %46
  %57 = or i64 %0, -61276975551837265
  %58 = xor i64 %0, -1
  %59 = and i64 %58, -3567709861467342542
  %60 = and i64 %0, 3567709861467342541
  %61 = or i64 %59, %60
  %62 = xor i64 3556363912268362397, %61
  %63 = xor i64 %0, -1
  %64 = or i64 61276975551837264, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = and i64 %0, 7579001149985301289
  %69 = or i64 -7579001149985301290, %0
  %70 = sub i64 %69, -7579001149985301290
  %71 = and i64 %0, -8777277660202640906
  %72 = xor i64 %0, -1
  %73 = or i64 8777277660202640905, %72
  %74 = xor i64 %73, -1
  %75 = and i64 %74, -1
  %76 = xor i64 %67, %57
  %77 = xor i64 %76, %70
  %78 = xor i64 %77, %75
  %79 = xor i64 %78, -2638163854190958719
  %80 = xor i64 %79, %68
  %81 = xor i64 %80, %71
  %82 = mul i64 %56, %81
  %83 = trunc i64 %82 to i32
  %.reg2mem = alloca i8**, i32 %83, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %84 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split, %BogusBasciBlock), i8** %84, align 8
  %85 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %85, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render..split, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %86 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %86, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render..split, %.split), i8** %.reload5, align 8
  %87 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %87, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render..split, %.exitStub), i8** %.reload8, align 8
  %88 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %88, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render..split, %.exitStub1), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %89 = load i8*, i8** %.reload, align 8
  indirectbr i8* %89, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %90 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split, %.exitStub), i8** %90, align 8
  %91 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render..split, %BogusBasciBlock), i8** %91, align 8
  %92 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render..split, %EntryBasicBlockSplit), i8** %92, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %93 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %93, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %94 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %94, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

.split:                                           ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %95 = trunc i64 %0 to i32
  store i32 %95, i32* %.out, align 4
  %96 = urem i32 %95, 80
  %97 = icmp eq i32 %96, 0
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %98 = select i1 %97, i8** %.reload7, i8** %.reload10
  %99 = load i8*, i8** %98, align 8
  indirectbr i8* %99, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted(i8* %0, i64 %1, i64 %2, i8* %.out, i64* %.out1, i64* %.out2, i64* %.out3, i64* %.out4) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314401)
  %5 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %4
  store i8* blockaddress(@render.extracted, %.exitStub), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314404)
  %7 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %6
  store i8* blockaddress(@render.extracted, %codeRepl), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314403)
  %9 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %8
  store i8* blockaddress(@render.extracted, %BogusBasciBlock), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314406)
  %11 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %10
  store i8* blockaddress(@render.extracted, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314407)
  %13 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %12
  store i8* blockaddress(@render.extracted, %.exitStub5), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314405)
  %15 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %14
  store i8* blockaddress(@render.extracted, %"2"), i8** %15, align 8
  %.reg2mem17 = alloca i64, align 8
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted, %BogusBasciBlock), i8** %16, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %17, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %18 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %18, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted, %"2"), i8** %.reload5, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %19, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted, %codeRepl), i8** %.reload8, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %20, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted, %.exitStub), i8** %.reload11, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %21, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@render.extracted, %.exitStub5), i8** %.reload14, align 8
  %22 = alloca i64, align 8
  %23 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %24 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7248833348834779914, i32 0, i64 %23
  store i8** %24, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %25 = load i8*, i8** %.reload, align 8
  indirectbr i8* %25, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub5]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %26 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted, %BogusBasciBlock), i8** %26, align 8
  %27 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted, %.exitStub5), i8** %27, align 8
  %28 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted, %codeRepl), i8** %28, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %29 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %29, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub5]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i64, i64*, i64, i64*, i64*, i64*)* @render.extracted.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %30 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %30, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub5]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %31 = getelementptr inbounds i8, i8* %0, i64 %1
  %32 = load i8, i8* %31, align 1, !tbaa !16
  store i8 %32, i8* %.out, align 1
  %33 = mul i64 %2, 2
  store i64 %33, i64* %.reg2mem17, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %34 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %34, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub5]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %22, align 8
  %35 = alloca i8**, align 8
  %36 = or i64 %4, 7151948429542441663
  %37 = and i64 7151948429542441663, %4
  %38 = xor i64 7151948429542441663, %4
  %39 = or i64 %37, %38
  %40 = add i64 %2, 2152397651973320875
  %41 = sub i64 0, %2
  %42 = add i64 -2152397651973320875, %41
  %43 = sub i64 0, %42
  %44 = add i64 %6, 2753919434624308759
  %45 = add i64 -5601984518450735287, %6
  %46 = add i64 %45, 8355903953075044046
  %47 = xor i64 %46, %44
  %48 = xor i64 %47, %39
  %49 = xor i64 %48, %40
  %50 = xor i64 %49, %43
  %51 = xor i64 %50, %36
  %52 = xor i64 %51, -7292630217957838791
  %53 = add i64 %2, -5823942093847939695
  %54 = xor i64 -5823942093847939695, %2
  %55 = and i64 -5823942093847939695, %2
  %56 = mul i64 2, %55
  %57 = add i64 %54, %56
  %58 = and i64 %4, 5367954771087607538
  %59 = xor i64 %4, -1
  %60 = or i64 -5367954771087607539, %59
  %61 = xor i64 %60, -1
  %62 = and i64 %61, -1
  %63 = xor i64 %57, 0
  %64 = xor i64 %63, %53
  %65 = xor i64 %64, %62
  %66 = xor i64 %65, %58
  %67 = mul i64 %52, %66
  %68 = trunc i64 %67 to i1
  %69 = add i64 %1, 2549479893643830795
  %70 = add i64 4919042706713405262, %1
  %71 = add i64 %70, -2369562813069574467
  %72 = and i64 %14, 248578013499080678
  %73 = xor i64 %14, -1
  %74 = or i64 -248578013499080679, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = or i64 %12, -2717334233007610845
  %78 = xor i64 %12, -1
  %79 = and i64 %78, -3416511073201917759
  %80 = and i64 %12, 3416511073201917758
  %81 = or i64 %79, %80
  %82 = xor i64 782513278399993058, %81
  %83 = xor i64 %12, -1
  %84 = or i64 2717334233007610844, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = xor i64 8506468542834121863, %71
  %89 = xor i64 %88, %72
  %90 = xor i64 %89, %77
  %91 = xor i64 %90, %69
  %92 = xor i64 %91, %87
  %93 = xor i64 %92, %76
  %94 = or i64 %4, 8505432164526791685
  %95 = xor i64 %4, -1
  %96 = and i64 %95, -1611482906529406345
  %97 = and i64 %4, 1611482906529406344
  %98 = or i64 %96, %97
  %99 = xor i64 -6941311838726488462, %98
  %100 = xor i64 %4, -1
  %101 = or i64 -8505432164526791686, %100
  %102 = xor i64 %101, -1
  %103 = and i64 %102, -1
  %104 = or i64 %99, %103
  %105 = or i64 %23, 1074504842723832146
  %106 = xor i64 %23, -1
  %107 = and i64 %106, -3894866771385430435
  %108 = and i64 %23, 3894866771385430434
  %109 = or i64 %107, %108
  %110 = xor i64 -4099455193951437041, %109
  %111 = xor i64 %23, -1
  %112 = or i64 -1074504842723832147, %111
  %113 = xor i64 %112, -1
  %114 = and i64 %113, -1
  %115 = or i64 %110, %114
  %116 = and i64 %2, -6429887472596881391
  %117 = xor i64 %2, -1
  %118 = xor i64 -6429887472596881391, %117
  %119 = and i64 %118, -6429887472596881391
  %120 = xor i64 %104, 0
  %121 = xor i64 %120, %116
  %122 = xor i64 %121, %119
  %123 = xor i64 %122, %115
  %124 = xor i64 %123, %94
  %125 = xor i64 %124, %105
  %126 = mul i64 %93, %125
  %127 = trunc i64 %126 to i1
  %128 = add i64 %14, 7051027852487362901
  %129 = sub i64 0, %14
  %130 = sub i64 7051027852487362901, %129
  %131 = or i64 %6, -5329083435289407904
  %132 = xor i64 %6, -1
  %133 = and i64 %132, 349020472685001179
  %134 = and i64 %6, -349020472685001180
  %135 = or i64 %133, %134
  %136 = xor i64 -5558371453229697093, %135
  %137 = xor i64 %6, -1
  %138 = or i64 5329083435289407903, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = or i64 %136, %140
  %142 = add i64 %23, -347342382555491795
  %143 = xor i64 -347342382555491795, %23
  %144 = and i64 -347342382555491795, %23
  %145 = mul i64 2, %144
  %146 = add i64 %143, %145
  %147 = xor i64 %142, %128
  %148 = xor i64 %147, 6231161585983716597
  %149 = xor i64 %148, %130
  %150 = xor i64 %149, %141
  %151 = xor i64 %150, %146
  %152 = xor i64 %151, %131
  %153 = and i64 %6, 8273804973351347745
  %154 = xor i64 %6, -1
  %155 = xor i64 8273804973351347745, %154
  %156 = and i64 %155, 8273804973351347745
  %157 = or i64 %4, 6948955298112354637
  %158 = xor i64 %4, -1
  %159 = and i64 6948955298112354637, %158
  %160 = add i64 %159, %4
  %161 = xor i64 %160, %156
  %162 = xor i64 %161, %157
  %163 = xor i64 %162, 0
  %164 = xor i64 %163, %153
  %165 = mul i64 %152, %164
  %166 = trunc i64 %165 to i8
  call void @"5784248439022692321"(i32 3, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* %22, i8*** %35, i1 %68, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 %127, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 %166, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %167 = load i8**, i8*** %35, align 8
  %168 = load i8*, i8** %167, align 8
  %169 = bitcast i8* %168 to i1 (i64, i64*, i64, i64*, i64*, i64*)*
  %.reload18 = load i64, i64* %.reg2mem17, align 8
  %targetBlock = call i1 %169(i64 %.reload18, i64* %.out1, i64 %2, i64* %.out2, i64* %.out3, i64* %.out4)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %170 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %171 = load i8*, i8** %170, align 8
  indirectbr i8* %171, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub5]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub5:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.1(i8 %.reload8, i64 %.reload9, i64 %0, i64 %.reload10, i32* %.out, i64* %.out1, i1* %.out2, i1* %.out3) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314400)
  %3 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.1, %BogusBasicBlock), i8** %3, align 8
  %4 = or i64 %0, -8173629576361753199
  %5 = xor i64 %0, -1
  %6 = and i64 -8173629576361753199, %5
  %7 = add i64 %6, %0
  %8 = and i64 %.reload10, -6847121153410660010
  %9 = xor i64 %.reload10, -1
  %10 = or i64 6847121153410660009, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %11, -1
  %13 = sext i8 %.reload8 to i64
  %14 = add i64 %13, -7888021919484300766
  %15 = add i64 4114689195917867747, %13
  %16 = sub i64 %15, -6444032958307383103
  %17 = xor i64 %14, %4
  %18 = xor i64 %17, %12
  %19 = xor i64 %18, -809662033048908427
  %20 = xor i64 %19, %16
  %21 = xor i64 %20, %8
  %22 = xor i64 %21, %7
  %23 = sext i8 %.reload8 to i64
  %24 = and i64 %23, 600002875579452751
  %25 = xor i64 %23, -1
  %26 = or i64 -600002875579452752, %25
  %27 = xor i64 %26, -1
  %28 = and i64 %27, -1
  %29 = and i64 %.reload10, 7605489464062592320
  %30 = xor i64 %.reload10, -1
  %31 = or i64 -7605489464062592321, %30
  %32 = xor i64 %31, -1
  %33 = and i64 %32, -1
  %34 = xor i64 %29, %24
  %35 = xor i64 %34, %33
  %36 = xor i64 %35, -6622863983385278444
  %37 = xor i64 %36, %28
  %38 = mul i64 %22, %37
  %39 = call i64 @h9549842938191327224(i64 %38)
  %40 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %39
  store i8* blockaddress(@render.extracted.1, %.exitStub), i8** %40, align 8
  %41 = and i64 %.reload10, -5737179938637567376
  %42 = or i64 5737179938637567375, %.reload10
  %43 = sub i64 %42, 5737179938637567375
  %44 = add i64 %.reload10, 6018483980214877205
  %45 = add i64 3859183440920725103, %.reload10
  %46 = sub i64 %45, -2159300539294152102
  %47 = xor i64 %41, %43
  %48 = xor i64 %47, %44
  %49 = xor i64 %48, -2604443798154728599
  %50 = xor i64 %49, %46
  %51 = sext i8 %.reload8 to i64
  %52 = add i64 %51, 3785829336190013634
  %53 = sub i64 0, %51
  %54 = sub i64 3785829336190013634, %53
  %55 = sext i8 %.reload8 to i64
  %56 = or i64 %55, -3474059315603283374
  %57 = and i64 -3474059315603283374, %55
  %58 = xor i64 -3474059315603283374, %55
  %59 = or i64 %57, %58
  %60 = sext i8 %.reload8 to i64
  %61 = or i64 %60, -3063514065334915445
  %62 = xor i64 %60, -1
  %63 = and i64 -3063514065334915445, %62
  %64 = add i64 %63, %60
  %65 = xor i64 %54, %64
  %66 = xor i64 %65, %59
  %67 = xor i64 %66, %52
  %68 = xor i64 %67, 7854928638247048997
  %69 = xor i64 %68, %56
  %70 = xor i64 %69, %61
  %71 = mul i64 %50, %70
  %72 = call i64 @h9549842938191327224(i64 %71)
  %73 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %72
  store i8* blockaddress(@render.extracted.1, %defaultSwitchBasicBlock), i8** %73, align 8
  %74 = call i64 @h9549842938191327224(i64 388314412)
  %75 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %74
  store i8* blockaddress(@render.extracted.1, %.exitStub4), i8** %75, align 8
  %76 = call i64 @h9549842938191327224(i64 388314403)
  %77 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %76
  store i8* blockaddress(@render.extracted.1, %codeRepl), i8** %77, align 8
  %78 = call i64 @h9549842938191327224(i64 388314406)
  %79 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %78
  store i8* blockaddress(@render.extracted.1, %297), i8** %79, align 8
  %80 = call i64 @h9549842938191327224(i64 388314407)
  %81 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %80
  store i8* blockaddress(@render.extracted.1, %EntryBasicBlockSplit), i8** %81, align 8
  %82 = call i64 @h9549842938191327224(i64 388314401)
  %83 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %82
  store i8* blockaddress(@render.extracted.1, %loopEnd), i8** %83, align 8
  %84 = call i64 @h9549842938191327224(i64 388314402)
  %85 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %84
  store i8* blockaddress(@render.extracted.1, %loopStart), i8** %85, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %86 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %86, align 4
  %87 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %87, align 4
  %88 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %88, align 4
  %89 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %89, align 4
  %90 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %91 = and i64 %0, -4445492196230571824
  %92 = or i64 4445492196230571823, %0
  %93 = sub i64 %92, 4445492196230571823
  %94 = and i64 %.reload9, -6934478441037158574
  %95 = or i64 6934478441037158573, %.reload9
  %96 = sub i64 %95, 6934478441037158573
  %97 = xor i64 %91, %94
  %98 = xor i64 %97, %93
  %99 = xor i64 %98, 1855659215553472571
  %100 = xor i64 %99, %96
  %101 = add i64 %0, 896623347664014250
  %102 = add i64 -191361006952337749, %0
  %103 = sub i64 %102, -1087984354616351999
  %104 = and i64 %0, -3090548851969904854
  %105 = xor i64 %0, -1
  %106 = xor i64 -3090548851969904854, %105
  %107 = and i64 %106, -3090548851969904854
  %108 = add i64 %.reload10, 389431799285899418
  %109 = sub i64 0, %.reload10
  %110 = sub i64 389431799285899418, %109
  %111 = xor i64 -6442405172005179149, %107
  %112 = xor i64 %111, %108
  %113 = xor i64 %112, %101
  %114 = xor i64 %113, %104
  %115 = xor i64 %114, %103
  %116 = xor i64 %115, %110
  %117 = mul i64 %100, %116
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %90, align 4
  %119 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %119, align 4
  %120 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %120, align 4
  %121 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %121, align 4
  %122 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %122, align 4
  %123 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %123, align 4
  %124 = alloca i64, align 8
  %125 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %126 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7736042078782182294, i32 0, i64 %125
  store i8** %126, i8*** %.reg2mem, align 8
  %127 = and i64 %0, 821994735966372276
  %128 = or i64 -821994735966372277, %0
  %129 = sub i64 %128, -821994735966372277
  %130 = or i64 %.reload9, -8976948991989012248
  %131 = xor i64 %.reload9, -1
  %132 = and i64 -8976948991989012248, %131
  %133 = add i64 %132, %.reload9
  %134 = sext i8 %.reload8 to i64
  %135 = or i64 %134, 7156566239278091649
  %136 = xor i64 %134, -1
  %137 = and i64 7156566239278091649, %136
  %138 = add i64 %137, %134
  %139 = xor i64 %138, %133
  %140 = xor i64 %139, -5370160448581223625
  %141 = xor i64 %140, %129
  %142 = xor i64 %141, %135
  %143 = xor i64 %142, %130
  %144 = xor i64 %143, %127
  %145 = or i64 %0, -2142287912384091562
  %146 = and i64 -2142287912384091562, %0
  %147 = xor i64 -2142287912384091562, %0
  %148 = or i64 %146, %147
  %149 = add i64 %.reload9, 4310525114711080616
  %150 = add i64 -6702820571780776582, %.reload9
  %151 = add i64 %150, -7433398387217694418
  %152 = or i64 %0, -5041145851172116295
  %153 = xor i64 %0, -1
  %154 = and i64 -5041145851172116295, %153
  %155 = add i64 %154, %0
  %156 = xor i64 %152, %148
  %157 = xor i64 %156, %155
  %158 = xor i64 %157, %149
  %159 = xor i64 %158, 9124892154795518599
  %160 = xor i64 %159, %145
  %161 = xor i64 %160, %151
  %162 = mul i64 %144, %161
  %163 = trunc i64 %162 to i32
  %dispatcher = alloca i32, i32 %163, align 4
  store i32 0, i32* %dispatcher, align 4
  %164 = or i64 %.reload10, -6546585202600822269
  %165 = xor i64 %.reload10, -1
  %166 = and i64 %165, -5107105106002552355
  %167 = and i64 %.reload10, 5107105106002552354
  %168 = or i64 %166, %167
  %169 = xor i64 2033992639698985950, %168
  %170 = xor i64 %.reload10, -1
  %171 = or i64 6546585202600822268, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = or i64 %169, %173
  %175 = add i64 %0, 4668147377736475821
  %176 = add i64 2310987649263638934, %0
  %177 = add i64 %176, 2357159728472836887
  %178 = add i64 %0, -5785943499404193369
  %179 = and i64 -5785943499404193369, %0
  %180 = or i64 -5785943499404193369, %0
  %181 = add i64 %179, %180
  %182 = xor i64 %178, %164
  %183 = xor i64 %182, %177
  %184 = xor i64 %183, %181
  %185 = xor i64 %184, %174
  %186 = xor i64 %185, -8648747879320983511
  %187 = xor i64 %186, %175
  %188 = and i64 %.reload10, 4121968197605533815
  %189 = xor i64 %.reload10, -1
  %190 = xor i64 4121968197605533815, %189
  %191 = and i64 %190, 4121968197605533815
  %192 = add i64 %.reload9, -6251684199288060174
  %193 = and i64 -6251684199288060174, %.reload9
  %194 = or i64 -6251684199288060174, %.reload9
  %195 = add i64 %193, %194
  %196 = sext i8 %.reload8 to i64
  %197 = add i64 %196, -7229320504023841062
  %198 = sub i64 0, %196
  %199 = add i64 7229320504023841062, %198
  %200 = sub i64 0, %199
  %201 = xor i64 %200, %197
  %202 = xor i64 %201, %191
  %203 = xor i64 %202, %188
  %204 = xor i64 %203, %195
  %205 = xor i64 %204, %192
  %206 = xor i64 %205, 3250767621199435858
  %207 = mul i64 %187, %206
  %208 = trunc i64 %207 to i32
  store i32 %208, i32* %1, align 4
  %209 = call i8** @bf17828750132393575339(i32* %1)
  %210 = load i8*, i8** %209, align 8
  indirectbr i8* %210, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %297
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub4
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i8, i32*, i64, i64*, i1*, i64, i64, i1*)* @render.extracted.1.extracted to i8*), i8** %.reload, align 8
  %211 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %214 = load i32, i32* %213, align 4
  %215 = sub i32 %212, -1353884284
  %216 = add i32 %215, %214
  %217 = add i32 %216, -1353884284
  store i32 %217, i32* %dispatcher, align 4
  %218 = load i8*, i8** %40, align 8
  %219 = load i8, i8* %218, align 1
  %220 = mul i8 %219, 2
  %221 = mul i8 %219, 2
  %222 = add i8 2, %221
  %223 = mul i8 %220, %222
  %224 = or i64 %76, 3969408161183469988
  %225 = xor i64 %76, -1
  %226 = and i64 %225, 1908479729444303076
  %227 = and i64 %76, -1908479729444303077
  %228 = or i64 %226, %227
  %229 = xor i64 3272537492882923840, %228
  %230 = xor i64 %76, -1
  %231 = or i64 -3969408161183469989, %230
  %232 = xor i64 %231, -1
  %233 = and i64 %232, -1
  %234 = or i64 %229, %233
  %235 = add i64 %78, 3098603958247976635
  %236 = sub i64 0, %78
  %237 = sub i64 3098603958247976635, %236
  %238 = xor i64 %234, -6768946492650371789
  %239 = xor i64 %238, %235
  %240 = xor i64 %239, %237
  %241 = xor i64 %240, %224
  %242 = add i64 %80, 3313364926996617006
  %243 = xor i64 3313364926996617006, %80
  %244 = and i64 3313364926996617006, %80
  %245 = mul i64 2, %244
  %246 = add i64 %243, %245
  %247 = and i64 %82, -1613023339918573397
  %248 = xor i64 %82, -1
  %249 = xor i64 -1613023339918573397, %248
  %250 = and i64 %249, -1613023339918573397
  %251 = xor i64 %247, %250
  %252 = xor i64 %251, 4927183255584307180
  %253 = xor i64 %252, %242
  %254 = xor i64 %253, %246
  %255 = mul i64 %241, %254
  %256 = trunc i64 %255 to i8
  %257 = srem i8 %223, %256
  %258 = icmp eq i8 %257, 0
  %259 = mul i8 %219, %219
  %260 = mul i8 %259, %219
  %261 = sub i8 0, %219
  %262 = sub i8 %260, %261
  %263 = srem i8 %262, 2
  %264 = icmp eq i8 %263, 0
  %265 = and i1 %258, %264
  %266 = and i64 %125, 4846478416994423502
  %267 = xor i64 %125, -1
  %268 = or i64 -4846478416994423503, %267
  %269 = xor i64 %268, -1
  %270 = and i64 %269, -1
  %271 = and i64 %72, 1091320981935276728
  %272 = xor i64 %72, -1
  %273 = xor i64 1091320981935276728, %272
  %274 = and i64 %273, 1091320981935276728
  %275 = xor i64 %270, %266
  %276 = xor i64 %275, %271
  %277 = xor i64 %276, %274
  %278 = xor i64 %277, -3348640119181240467
  %279 = add i64 %76, 1935886075159101854
  %280 = xor i64 1935886075159101854, %76
  %281 = and i64 1935886075159101854, %76
  %282 = mul i64 2, %281
  %283 = add i64 %280, %282
  %284 = add i64 %74, -5161375583089466577
  %285 = sub i64 0, %74
  %286 = sub i64 -5161375583089466577, %285
  %287 = xor i64 %279, %283
  %288 = xor i64 %287, 4783726799119925253
  %289 = xor i64 %288, %284
  %290 = xor i64 %289, %286
  %291 = mul i64 %278, %290
  %292 = trunc i64 %291 to i32
  %293 = select i1 %265, i32 388314413, i32 %292
  %294 = xor i32 %293, 12
  store i32 %294, i32* %1, align 4
  %295 = call i8** @bf17828750132393575339(i32* %1)
  %296 = load i8*, i8** %295, align 8
  indirectbr i8* %296, [label %loopEnd, label %EntryBasicBlockSplit]

297:                                              ; preds = %297, %loopStart
  %298 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %301 = load i32, i32* %300, align 4
  %302 = xor i32 %299, %301
  %303 = and i32 %299, %301
  %304 = mul i32 2, %303
  %305 = add i32 %302, %304
  store i32 %305, i32* %dispatcher, align 4
  %306 = load i8*, i8** %77, align 8
  %307 = load i8, i8* %306, align 1
  %308 = mul i8 %307, 2
  %309 = mul i8 %307, 2
  %310 = add i8 2, %309
  %311 = mul i8 %308, %310
  %312 = srem i8 %311, 4
  %313 = icmp eq i8 %312, 0
  %314 = mul i8 %307, %307
  %315 = add i8 %314, %307
  %316 = srem i8 %315, 2
  %317 = icmp eq i8 %316, 0
  %318 = and i1 %313, %317
  %319 = add i64 %.reload10, -1159590549099298924
  %320 = sub i64 0, %.reload10
  %321 = add i64 1159590549099298924, %320
  %322 = sub i64 0, %321
  %323 = sext i8 %.reload8 to i64
  %324 = and i64 %323, -2607418070314639514
  %325 = or i64 2607418070314639513, %323
  %326 = sub i64 %325, 2607418070314639513
  %327 = xor i64 %319, %324
  %328 = xor i64 %327, %322
  %329 = xor i64 %328, %326
  %330 = xor i64 %329, -668696503886451297
  %331 = sext i32 %dispatcher1 to i64
  %332 = and i64 %331, -4496803159988510071
  %333 = or i64 4496803159988510070, %331
  %334 = sub i64 %333, 4496803159988510070
  %335 = and i64 %39, -4278762435173021205
  %336 = xor i64 %39, -1
  %337 = xor i64 -4278762435173021205, %336
  %338 = and i64 %337, -4278762435173021205
  %339 = or i64 %72, 4063858226526639563
  %340 = xor i64 %72, -1
  %341 = and i64 4063858226526639563, %340
  %342 = add i64 %341, %72
  %343 = xor i64 %332, %342
  %344 = xor i64 %343, %334
  %345 = xor i64 %344, %335
  %346 = xor i64 %345, %338
  %347 = xor i64 %346, %339
  %348 = xor i64 %347, 8700175647268988223
  %349 = mul i64 %330, %348
  %350 = trunc i64 %349 to i32
  %351 = select i1 %318, i32 388314400, i32 %350
  %352 = xor i32 %351, 1
  store i32 %352, i32* %1, align 4
  %353 = call i8** @bf17828750132393575339(i32* %1)
  %354 = load i8*, i8** %353, align 8
  indirectbr i8* %354, [label %loopEnd, label %297]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %355 = add i64 %2, 8796384268865614847
  %356 = add i64 8056884048947705913, %2
  %357 = sub i64 %356, -739500219917908934
  %358 = add i64 %.reload10, -2123404049251128237
  %359 = and i64 -2123404049251128237, %.reload10
  %360 = or i64 -2123404049251128237, %.reload10
  %361 = add i64 %359, %360
  %362 = xor i64 %358, %357
  %363 = xor i64 %362, %361
  %364 = xor i64 %363, -1449691648888798267
  %365 = xor i64 %364, %355
  %366 = add i64 %82, -109293900702441311
  %367 = sub i64 0, %82
  %368 = sub i64 -109293900702441311, %367
  %369 = add i64 %78, -7893943255476303426
  %370 = add i64 -8564099147406659442, %78
  %371 = sub i64 %370, -670155891930356016
  %372 = and i64 %80, -7141828713094595869
  %373 = xor i64 %80, -1
  %374 = or i64 7141828713094595868, %373
  %375 = xor i64 %374, -1
  %376 = and i64 %375, -1
  %377 = xor i64 %368, %369
  %378 = xor i64 %377, %372
  %379 = xor i64 %378, %371
  %380 = xor i64 %379, -6003094262415210242
  %381 = xor i64 %380, %376
  %382 = xor i64 %381, %366
  %383 = mul i64 %365, %382
  store i64 %383, i64* %124, align 8
  %384 = call i8** @lk2403458854773074703(i64* %124)
  %385 = load i8*, i8** %384, align 8
  %386 = bitcast i8* %385 to i1 (i8, i32*, i64, i64*, i1*, i64, i64, i1*)*
  %targetBlock = call i1 %386(i8 %.reload8, i32* %.out, i64 %.reload9, i64* %.out1, i1* %.out2, i64 %0, i64 %.reload10, i1* %.out3)
  %387 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %388 = load i32, i32* %387, align 4
  %389 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %390 = load i32, i32* %389, align 4
  %391 = srem i32 %388, %390
  %392 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %393 = load i32, i32* %392, align 4
  %394 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %395 = load i32, i32* %394, align 4
  %396 = srem i32 %393, %395
  %397 = select i1 %targetBlock, i32 %391, i32 %396
  store i32 %397, i32* %dispatcher, align 4
  %398 = load i8*, i8** %85, align 8
  %399 = load i8, i8* %398, align 1
  %400 = mul i8 %399, 2
  %401 = mul i8 %399, 2
  %402 = add i8 2, %401
  %403 = mul i8 %400, %402
  %404 = srem i8 %403, 4
  %405 = icmp eq i8 %404, 0
  %406 = mul i8 %399, %399
  %407 = add i8 %406, %399
  %408 = srem i8 %407, 2
  %409 = icmp eq i8 %408, 0
  %410 = and i1 %405, %409
  %411 = select i1 %410, i32 388314403, i32 388314401
  %412 = xor i32 %411, -1
  %413 = and i32 %412, 1496174281
  %414 = and i32 %411, -1496174282
  %415 = or i32 %413, %414
  %416 = add i64 %.reload10, 523418533803670590
  %417 = and i64 523418533803670590, %.reload10
  %418 = or i64 523418533803670590, %.reload10
  %419 = add i64 %417, %418
  %420 = sext i32 %dispatcher1 to i64
  %421 = and i64 %420, -718266561752166802
  %422 = xor i64 %420, -1
  %423 = or i64 718266561752166801, %422
  %424 = xor i64 %423, -1
  %425 = and i64 %424, -1
  %426 = add i64 %.reload9, -8002172657848354140
  %427 = add i64 9206610651189194876, %.reload9
  %428 = add i64 %427, 1237960764672002600
  %429 = xor i64 %416, -8270605261861459589
  %430 = xor i64 %429, %426
  %431 = xor i64 %430, %428
  %432 = xor i64 %431, %421
  %433 = xor i64 %432, %425
  %434 = xor i64 %433, %419
  %435 = add i64 %82, -4380389753795151673
  %436 = sub i64 0, %82
  %437 = add i64 4380389753795151673, %436
  %438 = sub i64 0, %437
  %439 = or i64 %74, 8718907760968672414
  %440 = xor i64 %74, -1
  %441 = and i64 %440, 1296313327072891281
  %442 = and i64 %74, -1296313327072891282
  %443 = or i64 %441, %442
  %444 = xor i64 7566793339474277647, %443
  %445 = xor i64 %74, -1
  %446 = or i64 -8718907760968672415, %445
  %447 = xor i64 %446, -1
  %448 = and i64 %447, -1
  %449 = or i64 %444, %448
  %450 = xor i64 %435, %438
  %451 = xor i64 %450, %449
  %452 = xor i64 %451, %439
  %453 = xor i64 %452, 5968067260989040369
  %454 = mul i64 %434, %453
  %455 = trunc i64 %454 to i32
  %456 = xor i32 %415, %455
  store i32 %456, i32* %1, align 4
  %457 = call i8** @bf17828750132393575339(i32* %1)
  %458 = load i8*, i8** %457, align 8
  indirectbr i8* %458, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub4:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %459 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %459, align 4
  %460 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  %461 = sext i32 %dispatcher1 to i64
  %462 = add i64 %461, 3662713764420028169
  %463 = and i64 3662713764420028169, %461
  %464 = or i64 3662713764420028169, %461
  %465 = add i64 %463, %464
  %466 = sext i32 %dispatcher1 to i64
  %467 = and i64 %466, -7816522456956871750
  %468 = xor i64 %466, -1
  %469 = or i64 7816522456956871749, %468
  %470 = xor i64 %469, -1
  %471 = and i64 %470, -1
  %472 = or i64 %74, -5110355777314544861
  %473 = and i64 -5110355777314544861, %74
  %474 = xor i64 -5110355777314544861, %74
  %475 = or i64 %473, %474
  %476 = xor i64 %472, %465
  %477 = xor i64 %476, %462
  %478 = xor i64 %477, %475
  %479 = xor i64 %478, %467
  %480 = xor i64 %479, 3371087579760267813
  %481 = xor i64 %480, %471
  %482 = or i64 %80, 9066006306064912240
  %483 = xor i64 %80, -1
  %484 = and i64 %483, -3548881897174867807
  %485 = and i64 %80, 3548881897174867806
  %486 = or i64 %484, %485
  %487 = xor i64 -5517127228621541423, %486
  %488 = xor i64 %80, -1
  %489 = or i64 -9066006306064912241, %488
  %490 = xor i64 %489, -1
  %491 = and i64 %490, -1
  %492 = or i64 %487, %491
  %493 = and i64 %39, 8879223884977975987
  %494 = or i64 -8879223884977975988, %39
  %495 = sub i64 %494, -8879223884977975988
  %496 = xor i64 -702156822678062675, %482
  %497 = xor i64 %496, %492
  %498 = xor i64 %497, %493
  %499 = xor i64 %498, %495
  %500 = mul i64 %481, %499
  %501 = trunc i64 %500 to i32
  store i32 %501, i32* %460, align 4
  %502 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %503 = and i64 %72, 8439424824086974585
  %504 = xor i64 %72, -1
  %505 = or i64 -8439424824086974586, %504
  %506 = xor i64 %505, -1
  %507 = and i64 %506, -1
  %508 = or i64 %74, -2223573267322902824
  %509 = xor i64 %74, -1
  %510 = and i64 %509, -9098335517894695816
  %511 = and i64 %74, 9098335517894695815
  %512 = or i64 %510, %511
  %513 = xor i64 6960453866122429088, %512
  %514 = xor i64 %74, -1
  %515 = or i64 2223573267322902823, %514
  %516 = xor i64 %515, -1
  %517 = and i64 %516, -1
  %518 = or i64 %513, %517
  %519 = and i64 %.reload9, 4934807717590566479
  %520 = or i64 -4934807717590566480, %.reload9
  %521 = sub i64 %520, -4934807717590566480
  %522 = xor i64 %507, %508
  %523 = xor i64 %522, %503
  %524 = xor i64 %523, %521
  %525 = xor i64 %524, %519
  %526 = xor i64 %525, %518
  %527 = xor i64 %526, -1866135289714833683
  %528 = and i64 %72, 5661336716179483295
  %529 = xor i64 %72, -1
  %530 = or i64 -5661336716179483296, %529
  %531 = xor i64 %530, -1
  %532 = and i64 %531, -1
  %533 = add i64 %0, 7513547795808114768
  %534 = and i64 7513547795808114768, %0
  %535 = or i64 7513547795808114768, %0
  %536 = add i64 %534, %535
  %537 = and i64 %76, -2549738495378180584
  %538 = xor i64 %76, -1
  %539 = xor i64 -2549738495378180584, %538
  %540 = and i64 %539, -2549738495378180584
  %541 = xor i64 %537, %540
  %542 = xor i64 %541, 4009764186616616111
  %543 = xor i64 %542, %528
  %544 = xor i64 %543, %532
  %545 = xor i64 %544, %533
  %546 = xor i64 %545, %536
  %547 = mul i64 %527, %546
  %548 = trunc i64 %547 to i32
  store i32 %548, i32* %502, align 4
  %549 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %549, align 4
  %550 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %550, align 4
  %551 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %552 = load i32, i32* %551, align 4
  store i32 %552, i32* %dispatcher, align 4
  %553 = load i8*, i8** %85, align 8
  %554 = load i8, i8* %553, align 1
  %555 = mul i8 %554, %554
  %556 = add i8 %555, %554
  %557 = mul i8 %556, 3
  %558 = srem i8 %557, 2
  %559 = icmp eq i8 %558, 0
  %560 = mul i8 %554, %554
  %561 = sub i8 0, %560
  %562 = sub i8 0, %554
  %563 = add i8 %561, %562
  %564 = sub i8 0, %563
  %565 = srem i8 %564, 2
  %566 = or i64 %.reload10, 4340514145704024551
  %567 = and i64 4340514145704024551, %.reload10
  %568 = xor i64 4340514145704024551, %.reload10
  %569 = or i64 %567, %568
  %570 = sext i32 %dispatcher1 to i64
  %571 = add i64 %570, 8166689503658315421
  %572 = sub i64 0, %570
  %573 = sub i64 8166689503658315421, %572
  %574 = xor i64 %573, %569
  %575 = xor i64 %574, %571
  %576 = xor i64 %575, %566
  %577 = xor i64 %576, 2001991948648501349
  %578 = and i64 %2, 5319164069494031707
  %579 = xor i64 %2, -1
  %580 = xor i64 5319164069494031707, %579
  %581 = and i64 %580, 5319164069494031707
  %582 = add i64 %80, 3146910374224950630
  %583 = add i64 -8273274909099368917, %80
  %584 = add i64 %583, -7026558790385232069
  %585 = xor i64 %582, %584
  %586 = xor i64 %585, 0
  %587 = xor i64 %586, %581
  %588 = xor i64 %587, %578
  %589 = mul i64 %577, %588
  %590 = trunc i64 %589 to i8
  %591 = icmp eq i8 %565, %590
  %592 = and i1 %559, %591
  %593 = or i64 %39, 16512016505458976
  %594 = xor i64 %39, -1
  %595 = and i64 16512016505458976, %594
  %596 = add i64 %595, %39
  %597 = add i64 %.reload9, 4410222392660652346
  %598 = add i64 4304658484517585453, %.reload9
  %599 = add i64 %598, 105563908143066893
  %600 = or i64 %0, 3619728852176294196
  %601 = xor i64 %0, -1
  %602 = and i64 %601, -2646353375054847843
  %603 = and i64 %0, 2646353375054847842
  %604 = or i64 %602, %603
  %605 = xor i64 -1621964820557303383, %604
  %606 = xor i64 %0, -1
  %607 = or i64 -3619728852176294197, %606
  %608 = xor i64 %607, -1
  %609 = and i64 %608, -1
  %610 = or i64 %605, %609
  %611 = xor i64 %593, %596
  %612 = xor i64 %611, %600
  %613 = xor i64 %612, %610
  %614 = xor i64 %613, %597
  %615 = xor i64 %614, 3637116186272005291
  %616 = xor i64 %615, %599
  %617 = and i64 %84, -6746305810064489880
  %618 = xor i64 %84, -1
  %619 = or i64 6746305810064489879, %618
  %620 = xor i64 %619, -1
  %621 = and i64 %620, -1
  %622 = or i64 %.reload9, 9035436426850018709
  %623 = and i64 9035436426850018709, %.reload9
  %624 = xor i64 9035436426850018709, %.reload9
  %625 = or i64 %623, %624
  %626 = or i64 %82, -5352898424904345517
  %627 = and i64 -5352898424904345517, %82
  %628 = xor i64 -5352898424904345517, %82
  %629 = or i64 %627, %628
  %630 = xor i64 %617, %625
  %631 = xor i64 %630, %629
  %632 = xor i64 %631, %622
  %633 = xor i64 %632, %626
  %634 = xor i64 %633, %621
  %635 = xor i64 %634, 654592242460078453
  %636 = mul i64 %616, %635
  %637 = trunc i64 %636 to i32
  %638 = select i1 %592, i32 388314412, i32 %637
  %639 = xor i32 %638, 11
  store i32 %639, i32* %1, align 4
  %640 = call i8** @bf17828750132393575339(i32* %1)
  %641 = load i8*, i8** %640, align 8
  indirectbr i8* %641, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %642 = load i8*, i8** %75, align 8
  %643 = load i8, i8* %642, align 1
  %644 = add i64 %76, -3534472042912120229
  %645 = sub i64 0, %76
  %646 = sub i64 -3534472042912120229, %645
  %647 = sext i32 %dispatcher1 to i64
  %648 = and i64 %647, 5850436992650457954
  %649 = xor i64 %647, -1
  %650 = xor i64 5850436992650457954, %649
  %651 = and i64 %650, 5850436992650457954
  %652 = xor i64 %644, 7153059231645530107
  %653 = xor i64 %652, %648
  %654 = xor i64 %653, %646
  %655 = xor i64 %654, %651
  %656 = or i64 %2, 8867064428403439528
  %657 = xor i64 %2, -1
  %658 = and i64 %657, 4721764588404728428
  %659 = and i64 %2, -4721764588404728429
  %660 = or i64 %658, %659
  %661 = xor i64 4217964091741623748, %660
  %662 = xor i64 %2, -1
  %663 = or i64 -8867064428403439529, %662
  %664 = xor i64 %663, -1
  %665 = and i64 %664, -1
  %666 = or i64 %661, %665
  %667 = or i64 %74, 7315057682550279006
  %668 = xor i64 %74, -1
  %669 = and i64 %668, 4249878520301120754
  %670 = and i64 %74, -4249878520301120755
  %671 = or i64 %669, %670
  %672 = xor i64 6881174550818236332, %671
  %673 = xor i64 %74, -1
  %674 = or i64 -7315057682550279007, %673
  %675 = xor i64 %674, -1
  %676 = and i64 %675, -1
  %677 = or i64 %672, %676
  %678 = or i64 %74, -4216795679435698342
  %679 = xor i64 %74, -1
  %680 = and i64 %679, -4844943777930665741
  %681 = and i64 %74, 4844943777930665740
  %682 = or i64 %680, %681
  %683 = xor i64 8771221959588540329, %682
  %684 = xor i64 %74, -1
  %685 = or i64 4216795679435698341, %684
  %686 = xor i64 %685, -1
  %687 = and i64 %686, -1
  %688 = or i64 %683, %687
  %689 = xor i64 %678, %666
  %690 = xor i64 %689, %677
  %691 = xor i64 %690, %667
  %692 = xor i64 %691, %688
  %693 = xor i64 %692, -8958365495630169293
  %694 = xor i64 %693, %656
  %695 = mul i64 %655, %694
  %696 = trunc i64 %695 to i8
  %697 = and i8 %643, %696
  %698 = sext i8 %.reload8 to i64
  %699 = and i64 %698, 6128565815983565954
  %700 = xor i64 %698, -1
  %701 = xor i64 6128565815983565954, %700
  %702 = and i64 %701, 6128565815983565954
  %703 = or i64 %0, 4785554312660350704
  %704 = xor i64 %0, -1
  %705 = and i64 %704, -1535621570375331390
  %706 = and i64 %0, 1535621570375331389
  %707 = or i64 %705, %706
  %708 = xor i64 -6279754990694389966, %707
  %709 = xor i64 %0, -1
  %710 = or i64 -4785554312660350705, %709
  %711 = xor i64 %710, -1
  %712 = and i64 %711, -1
  %713 = or i64 %708, %712
  %714 = xor i64 635482025220514969, %703
  %715 = xor i64 %714, %702
  %716 = xor i64 %715, %699
  %717 = xor i64 %716, %713
  %718 = and i64 %2, 8008984756174310681
  %719 = or i64 -8008984756174310682, %2
  %720 = sub i64 %719, -8008984756174310682
  %721 = and i64 %84, 5977729651244028663
  %722 = xor i64 %84, -1
  %723 = or i64 -5977729651244028664, %722
  %724 = xor i64 %723, -1
  %725 = and i64 %724, -1
  %726 = or i64 %74, -7661491628978542439
  %727 = xor i64 %74, -1
  %728 = and i64 %727, 3304762072235850311
  %729 = and i64 %74, -3304762072235850312
  %730 = or i64 %728, %729
  %731 = xor i64 -5156561732434930978, %730
  %732 = xor i64 %74, -1
  %733 = or i64 7661491628978542438, %732
  %734 = xor i64 %733, -1
  %735 = and i64 %734, -1
  %736 = or i64 %731, %735
  %737 = xor i64 %720, %721
  %738 = xor i64 %737, %718
  %739 = xor i64 %738, %725
  %740 = xor i64 %739, %726
  %741 = xor i64 %740, %736
  %742 = xor i64 %741, -5183096526981042263
  %743 = mul i64 %717, %742
  %744 = trunc i64 %743 to i8
  %745 = icmp eq i8 %697, %744
  %746 = mul i8 %643, %643
  %747 = add i8 %746, %643
  %748 = srem i8 %747, 2
  %749 = icmp eq i8 %748, 0
  %750 = xor i1 %749, true
  %751 = and i1 %745, %750
  %752 = add i1 %751, %749
  %753 = select i1 %752, i32 388314403, i32 388314401
  %754 = xor i32 %753, 2
  store i32 %754, i32* %1, align 4
  %755 = call i8** @bf17828750132393575339(i32* %1)
  %756 = load i8*, i8** %755, align 8
  indirectbr i8* %756, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %297, %EntryBasicBlockSplit
  %757 = load i8*, i8** %75, align 8
  %758 = load i8, i8* %757, align 1
  %759 = mul i8 %758, %758
  %760 = sub i8 0, %758
  %761 = sub i8 %759, %760
  %762 = or i64 %82, -1497377766360876945
  %763 = and i64 -1497377766360876945, %82
  %764 = xor i64 -1497377766360876945, %82
  %765 = or i64 %763, %764
  %766 = and i64 %39, 1232492793741331665
  %767 = xor i64 %39, -1
  %768 = xor i64 1232492793741331665, %767
  %769 = and i64 %768, 1232492793741331665
  %770 = sext i32 %dispatcher1 to i64
  %771 = and i64 %770, 1679589443946672674
  %772 = xor i64 %770, -1
  %773 = xor i64 1679589443946672674, %772
  %774 = and i64 %773, 1679589443946672674
  %775 = xor i64 %774, %771
  %776 = xor i64 %775, %766
  %777 = xor i64 %776, %765
  %778 = xor i64 %777, %762
  %779 = xor i64 %778, -6416276210265737839
  %780 = xor i64 %779, %769
  %781 = or i64 %39, 5350807886357906379
  %782 = xor i64 %39, -1
  %783 = and i64 %782, 6201816031529712074
  %784 = and i64 %39, -6201816031529712075
  %785 = or i64 %783, %784
  %786 = xor i64 2040312867971824129, %785
  %787 = xor i64 %39, -1
  %788 = or i64 -5350807886357906380, %787
  %789 = xor i64 %788, -1
  %790 = and i64 %789, -1
  %791 = or i64 %786, %790
  %792 = add i64 %84, 5199261002097444998
  %793 = and i64 5199261002097444998, %84
  %794 = or i64 5199261002097444998, %84
  %795 = add i64 %793, %794
  %796 = and i64 %84, -6033583394620600099
  %797 = or i64 6033583394620600098, %84
  %798 = sub i64 %797, 6033583394620600098
  %799 = xor i64 %792, %791
  %800 = xor i64 %799, -3836567483061009837
  %801 = xor i64 %800, %781
  %802 = xor i64 %801, %795
  %803 = xor i64 %802, %796
  %804 = xor i64 %803, %798
  %805 = mul i64 %780, %804
  %806 = trunc i64 %805 to i8
  %807 = mul i8 %761, %806
  %808 = srem i8 %807, 2
  %809 = or i64 %0, 3339868890593123265
  %810 = xor i64 %0, -1
  %811 = and i64 %810, -2130072776233845390
  %812 = and i64 %0, 2130072776233845389
  %813 = or i64 %811, %812
  %814 = xor i64 -3735191529586186573, %813
  %815 = xor i64 %0, -1
  %816 = or i64 -3339868890593123266, %815
  %817 = xor i64 %816, -1
  %818 = and i64 %817, -1
  %819 = or i64 %814, %818
  %820 = or i64 %84, -8156512842102056669
  %821 = xor i64 %84, -1
  %822 = and i64 %821, -6092718600909886729
  %823 = and i64 %84, 6092718600909886728
  %824 = or i64 %822, %823
  %825 = xor i64 2719169769126343636, %824
  %826 = xor i64 %84, -1
  %827 = or i64 8156512842102056668, %826
  %828 = xor i64 %827, -1
  %829 = and i64 %828, -1
  %830 = or i64 %825, %829
  %831 = sext i32 %dispatcher1 to i64
  %832 = or i64 %831, -2327881362525087229
  %833 = xor i64 %831, -1
  %834 = and i64 -2327881362525087229, %833
  %835 = add i64 %834, %831
  %836 = xor i64 %832, -6267040835093563065
  %837 = xor i64 %836, %830
  %838 = xor i64 %837, %809
  %839 = xor i64 %838, %835
  %840 = xor i64 %839, %819
  %841 = xor i64 %840, %820
  %842 = add i64 %.reload10, -2986966133567145191
  %843 = sub i64 0, %.reload10
  %844 = sub i64 -2986966133567145191, %843
  %845 = and i64 %80, -4877489730086144621
  %846 = xor i64 %80, -1
  %847 = xor i64 -4877489730086144621, %846
  %848 = and i64 %847, -4877489730086144621
  %849 = sext i8 %.reload8 to i64
  %850 = and i64 %849, -2408648169861163273
  %851 = or i64 2408648169861163272, %849
  %852 = sub i64 %851, 2408648169861163272
  %853 = xor i64 %852, %842
  %854 = xor i64 %853, 0
  %855 = xor i64 %854, %845
  %856 = xor i64 %855, %844
  %857 = xor i64 %856, %850
  %858 = xor i64 %857, %848
  %859 = mul i64 %841, %858
  %860 = trunc i64 %859 to i8
  %861 = icmp eq i8 %808, %860
  %862 = mul i8 %758, %758
  %863 = add i8 %862, %758
  %864 = srem i8 %863, 2
  %865 = icmp eq i8 %864, 0
  %866 = and i1 %861, %865
  %867 = select i1 %866, i32 388314406, i32 388314402
  %868 = xor i32 %867, 4
  store i32 %868, i32* %1, align 4
  %869 = call i8** @bf17828750132393575339(i32* %1)
  %870 = load i8*, i8** %869, align 8
  indirectbr i8* %870, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.2(i64* %.out, i64* %.out1, i64* %.out2, i64* %.out3) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314404)
  %2 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5812548706565816714, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.2, %.exitStub), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314405)
  %4 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5812548706565816714, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.2, %codeRepl), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314401)
  %6 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5812548706565816714, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.2, %"2"), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314407)
  %8 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5812548706565816714, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.2, %EntryBasicBlockSplit), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314400)
  %10 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5812548706565816714, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.2, %BogusBasciBlock), i8** %10, align 8
  %.reg2mem14 = alloca i64, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.2, %BogusBasciBlock), i8** %11, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %12, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.2, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %13, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.2, %"2"), i8** %.reload5, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %14, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.2, %codeRepl), i8** %.reload8, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %15, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.2, %.exitStub), i8** %.reload11, align 8
  %16 = alloca i64, align 8
  %17 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %18 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3207960230964856142, i32 0, i64 %17
  store i8** %18, i8*** %.reg2mem12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %19 = load i8*, i8** %.reload, align 8
  indirectbr i8* %19, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %20 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.2, %codeRepl), i8** %20, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.2, %EntryBasicBlockSplit), i8** %21, align 8
  %22 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.2, %.exitStub), i8** %22, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %23 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %23, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  store i8* bitcast (void (i64, i64*, i64*, i64*)* @render.extracted.2.extracted to i8*), i8** %.reload13, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %24 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %24, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %25 = add i64 3398654757776900270, -3398654757776900193
  store i64 %25, i64* %.out, align 8
  %26 = or i64 %17, -3893414216262812818
  %27 = xor i64 %17, -1
  %28 = and i64 %27, 798579355290893341
  %29 = and i64 %17, -798579355290893342
  %30 = or i64 %28, %29
  %31 = xor i64 -4403728962063169677, %30
  %32 = xor i64 %17, -1
  %33 = or i64 3893414216262812817, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = or i64 %31, %35
  %37 = or i64 %7, -8769450418790290777
  %38 = xor i64 %7, -1
  %39 = and i64 %38, 7380152972707275339
  %40 = and i64 %7, -7380152972707275340
  %41 = or i64 %39, %40
  %42 = xor i64 -2294806900042626836, %41
  %43 = xor i64 %7, -1
  %44 = or i64 8769450418790290776, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = xor i64 %36, %47
  %49 = xor i64 %48, %37
  %50 = xor i64 %49, %26
  %51 = xor i64 %50, -7128245629018216095
  %52 = or i64 %17, -8465571381355564913
  %53 = and i64 -8465571381355564913, %17
  %54 = xor i64 -8465571381355564913, %17
  %55 = or i64 %53, %54
  %56 = and i64 %7, -3866701848433546217
  %57 = or i64 3866701848433546216, %7
  %58 = sub i64 %57, 3866701848433546216
  %59 = add i64 %3, -1739122809945514783
  %60 = xor i64 -1739122809945514783, %3
  %61 = and i64 -1739122809945514783, %3
  %62 = mul i64 2, %61
  %63 = add i64 %60, %62
  %64 = xor i64 %63, %55
  %65 = xor i64 %64, %58
  %66 = xor i64 %65, %56
  %67 = xor i64 %66, 7781417568321689983
  %68 = xor i64 %67, %52
  %69 = xor i64 %68, %59
  %70 = mul i64 %51, %69
  %71 = add i64 121, %70
  store i64 %71, i64* %.reg2mem14, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %72 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %72, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %16, align 8
  %73 = call i8** @lk6662349738094152229(i64* %16)
  %74 = load i8*, i8** %73, align 8
  %75 = bitcast i8* %74 to void (i64, i64*, i64*, i64*)*
  %.reload15 = load i64, i64* %.reg2mem14, align 8
  call void %75(i64 %.reload15, i64* %.out1, i64* %.out2, i64* %.out3)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %76 = load i8*, i8** %.reload10, align 8
  indirectbr i8* %76, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.3(i8 %.reload8, i64 %.reload9, i32* %.out, i64* %.out1, i1* %.out2) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314404)
  %2 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.3, %loopStart), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314401)
  %4 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.3, %309), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314405)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.3, %.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314413)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.3, %loopEnd), i8** %8, align 8
  %9 = sext i8 %.reload8 to i64
  %10 = and i64 %9, 100000004749465195
  %11 = or i64 -100000004749465196, %9
  %12 = sub i64 %11, -100000004749465196
  %13 = sext i8 %.reload8 to i64
  %14 = or i64 %13, 2915000017005018124
  %15 = xor i64 %13, -1
  %16 = and i64 %15, -6350033330158987482
  %17 = and i64 %13, 6350033330158987481
  %18 = or i64 %16, %17
  %19 = xor i64 -8100833033354155222, %18
  %20 = xor i64 %13, -1
  %21 = or i64 -2915000017005018125, %20
  %22 = xor i64 %21, -1
  %23 = and i64 %22, -1
  %24 = or i64 %19, %23
  %25 = xor i64 %12, 5093861121591771789
  %26 = xor i64 %25, %24
  %27 = xor i64 %26, %10
  %28 = xor i64 %27, %14
  %29 = and i64 %.reload9, -6834681179083246140
  %30 = xor i64 %.reload9, -1
  %31 = xor i64 -6834681179083246140, %30
  %32 = and i64 %31, -6834681179083246140
  %33 = and i64 %.reload9, -9116135243408251580
  %34 = xor i64 %.reload9, -1
  %35 = xor i64 -9116135243408251580, %34
  %36 = and i64 %35, -9116135243408251580
  %37 = add i64 %.reload9, 1424696594156644921
  %38 = sub i64 0, %.reload9
  %39 = add i64 -1424696594156644921, %38
  %40 = sub i64 0, %39
  %41 = xor i64 %37, %36
  %42 = xor i64 %41, %33
  %43 = xor i64 %42, %40
  %44 = xor i64 %43, %32
  %45 = xor i64 %44, -5894946459136310397
  %46 = xor i64 %45, %29
  %47 = mul i64 %28, %46
  %48 = call i64 @h9549842938191327224(i64 %47)
  %49 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %48
  store i8* blockaddress(@render.extracted.3, %BogusBasicBlock), i8** %49, align 8
  %50 = call i64 @h9549842938191327224(i64 388314400)
  %51 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %50
  store i8* blockaddress(@render.extracted.3, %EntryBasicBlockSplit), i8** %51, align 8
  %52 = call i64 @h9549842938191327224(i64 388314403)
  %53 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %52
  store i8* blockaddress(@render.extracted.3, %defaultSwitchBasicBlock), i8** %53, align 8
  %54 = call i64 @h9549842938191327224(i64 388314402)
  %55 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %54
  store i8* blockaddress(@render.extracted.3, %codeRepl), i8** %55, align 8
  %56 = sext i8 %.reload8 to i64
  %57 = and i64 %56, 882336258515260876
  %58 = xor i64 %56, -1
  %59 = or i64 -882336258515260877, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = sext i8 %.reload8 to i64
  %63 = and i64 %62, 7562231435597510934
  %64 = or i64 -7562231435597510935, %62
  %65 = sub i64 %64, -7562231435597510935
  %66 = xor i64 %61, %57
  %67 = xor i64 %66, %63
  %68 = xor i64 %67, %65
  %69 = xor i64 %68, 4946975474978279649
  %70 = add i64 %.reload9, 2635377934905528493
  %71 = sub i64 0, %.reload9
  %72 = sub i64 2635377934905528493, %71
  %73 = sext i8 %.reload8 to i64
  %74 = add i64 %73, -2604617979577837513
  %75 = add i64 -929136653701846006, %73
  %76 = sub i64 %75, 1675481325875991507
  %77 = xor i64 %70, %74
  %78 = xor i64 %77, %76
  %79 = xor i64 %78, %72
  %80 = xor i64 %79, -2753757959660309727
  %81 = mul i64 %69, %80
  %82 = trunc i64 %81 to i32
  %.reg2mem2 = alloca i64, i32 %82, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %83 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %83, align 4
  %84 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %84, align 4
  %85 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %85, align 4
  %86 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %86, align 4
  %87 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %88 = sext i8 %.reload8 to i64
  %89 = add i64 %88, 4036959682906722622
  %90 = sub i64 0, %88
  %91 = sub i64 4036959682906722622, %90
  %92 = sext i8 %.reload8 to i64
  %93 = or i64 %92, -5521719806015827777
  %94 = and i64 -5521719806015827777, %92
  %95 = xor i64 -5521719806015827777, %92
  %96 = or i64 %94, %95
  %97 = sext i8 %.reload8 to i64
  %98 = or i64 %97, -5288155632894730261
  %99 = and i64 -5288155632894730261, %97
  %100 = xor i64 -5288155632894730261, %97
  %101 = or i64 %99, %100
  %102 = xor i64 %93, %96
  %103 = xor i64 %102, %98
  %104 = xor i64 %103, %101
  %105 = xor i64 %104, 6379685849912081823
  %106 = xor i64 %105, %89
  %107 = xor i64 %106, %91
  %108 = or i64 %.reload9, -249427625373611536
  %109 = xor i64 %.reload9, -1
  %110 = and i64 %109, 5197701773520514878
  %111 = and i64 %.reload9, -5197701773520514879
  %112 = or i64 %110, %111
  %113 = xor i64 -5429044425379256626, %112
  %114 = xor i64 %.reload9, -1
  %115 = or i64 249427625373611535, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = or i64 %113, %117
  %119 = or i64 %.reload9, 8380916711116527215
  %120 = and i64 8380916711116527215, %.reload9
  %121 = xor i64 8380916711116527215, %.reload9
  %122 = or i64 %120, %121
  %123 = sext i8 %.reload8 to i64
  %124 = add i64 %123, 2621943939436339943
  %125 = sub i64 0, %123
  %126 = sub i64 2621943939436339943, %125
  %127 = xor i64 %119, %108
  %128 = xor i64 %127, -8449667697807499681
  %129 = xor i64 %128, %126
  %130 = xor i64 %129, %124
  %131 = xor i64 %130, %118
  %132 = xor i64 %131, %122
  %133 = mul i64 %107, %132
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %87, align 4
  %135 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %136 = sext i8 %.reload8 to i64
  %137 = or i64 %136, -8666793398120171041
  %138 = xor i64 %136, -1
  %139 = and i64 -8666793398120171041, %138
  %140 = add i64 %139, %136
  %141 = and i64 %.reload9, 1965387286368443429
  %142 = xor i64 %.reload9, -1
  %143 = xor i64 1965387286368443429, %142
  %144 = and i64 %143, 1965387286368443429
  %145 = xor i64 %144, %140
  %146 = xor i64 %145, %137
  %147 = xor i64 %146, 582006902204032737
  %148 = xor i64 %147, %141
  %149 = or i64 %.reload9, -8935863787557057
  %150 = xor i64 %.reload9, -1
  %151 = and i64 -8935863787557057, %150
  %152 = add i64 %151, %.reload9
  %153 = sext i8 %.reload8 to i64
  %154 = and i64 %153, 8052095284080662120
  %155 = xor i64 %153, -1
  %156 = xor i64 8052095284080662120, %155
  %157 = and i64 %156, 8052095284080662120
  %158 = sext i8 %.reload8 to i64
  %159 = add i64 %158, -6404611701040712519
  %160 = sub i64 0, %158
  %161 = sub i64 -6404611701040712519, %160
  %162 = xor i64 %161, %157
  %163 = xor i64 %162, %152
  %164 = xor i64 %163, -4711501851722073534
  %165 = xor i64 %164, %159
  %166 = xor i64 %165, %154
  %167 = xor i64 %166, %149
  %168 = mul i64 %148, %167
  %169 = trunc i64 %168 to i32
  store i32 %169, i32* %135, align 4
  %170 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %170, align 4
  %171 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %171, align 4
  %172 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %172, align 4
  %173 = sext i8 %.reload8 to i64
  %174 = or i64 %173, -2161324462856972722
  %175 = xor i64 %173, -1
  %176 = and i64 -2161324462856972722, %175
  %177 = add i64 %176, %173
  %178 = sext i8 %.reload8 to i64
  %179 = or i64 %178, 7270953592275617392
  %180 = and i64 7270953592275617392, %178
  %181 = xor i64 7270953592275617392, %178
  %182 = or i64 %180, %181
  %183 = xor i64 4986847200150438665, %182
  %184 = xor i64 %183, %177
  %185 = xor i64 %184, %179
  %186 = xor i64 %185, %174
  %187 = sext i8 %.reload8 to i64
  %188 = or i64 %187, 1769125173949800196
  %189 = xor i64 %187, -1
  %190 = and i64 %189, 5423693229410908294
  %191 = and i64 %187, -5423693229410908295
  %192 = or i64 %190, %191
  %193 = xor i64 6037609359838603138, %192
  %194 = xor i64 %187, -1
  %195 = or i64 -1769125173949800197, %194
  %196 = xor i64 %195, -1
  %197 = and i64 %196, -1
  %198 = or i64 %193, %197
  %199 = sext i8 %.reload8 to i64
  %200 = add i64 %199, 1385098481809885744
  %201 = add i64 -3165513175893943369, %199
  %202 = add i64 %201, 4550611657703829113
  %203 = and i64 %.reload9, -6128401360340907576
  %204 = or i64 6128401360340907575, %.reload9
  %205 = sub i64 %204, 6128401360340907575
  %206 = xor i64 %198, %205
  %207 = xor i64 %206, %202
  %208 = xor i64 %207, %203
  %209 = xor i64 %208, -4299105318290310343
  %210 = xor i64 %209, %200
  %211 = xor i64 %210, %188
  %212 = mul i64 %186, %211
  %213 = trunc i64 %212 to i32
  %214 = alloca i64, i32 %213, align 8
  %215 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %216 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2764332446207538526, i32 0, i64 %215
  store i8** %216, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314404, i32* %0, align 4
  %217 = call i8** @bf16232848923043496(i32* %0)
  %218 = load i8*, i8** %217, align 8
  indirectbr i8* %218, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %309
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (void (i64, i1*)* @render.extracted.3.extracted to i8*), i8** %.reload, align 8
  %219 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %222 = load i32, i32* %221, align 4
  %223 = srem i32 %220, %222
  store i32 %223, i32* %dispatcher, align 4
  %224 = load i8*, i8** %49, align 8
  %225 = load i8, i8* %224, align 1
  %226 = mul i8 %225, 2
  %227 = mul i8 %225, 2
  %228 = and i8 2, %227
  %229 = or i8 2, %227
  %230 = add i8 %228, %229
  %231 = mul i8 %226, %230
  %232 = srem i8 %231, 4
  %233 = icmp eq i8 %232, 0
  %234 = mul i8 %225, %225
  %235 = add i8 %234, %225
  %236 = srem i8 %235, 2
  %237 = icmp eq i8 %236, 0
  %238 = and i1 %233, %237
  %239 = select i1 %238, i32 388314402, i32 388314413
  %240 = add i64 %1, -2314397815267532395
  %241 = add i64 -2050377036879806573, %1
  %242 = add i64 %241, -264020778387725822
  %243 = sext i8 %.reload8 to i64
  %244 = or i64 %243, 8810584395032216988
  %245 = xor i64 %243, -1
  %246 = and i64 8810584395032216988, %245
  %247 = add i64 %246, %243
  %248 = and i64 %5, 8696084670803043554
  %249 = xor i64 %5, -1
  %250 = or i64 -8696084670803043555, %249
  %251 = xor i64 %250, -1
  %252 = and i64 %251, -1
  %253 = xor i64 %244, %247
  %254 = xor i64 %253, %248
  %255 = xor i64 %254, %242
  %256 = xor i64 %255, 2674909976026345205
  %257 = xor i64 %256, %240
  %258 = xor i64 %257, %252
  %259 = and i64 %215, 4717057085196185946
  %260 = xor i64 %215, -1
  %261 = xor i64 4717057085196185946, %260
  %262 = and i64 %261, 4717057085196185946
  %263 = or i64 %50, 7481284168704042186
  %264 = and i64 7481284168704042186, %50
  %265 = xor i64 7481284168704042186, %50
  %266 = or i64 %264, %265
  %267 = xor i64 %262, %259
  %268 = xor i64 %267, %263
  %269 = xor i64 %268, %266
  %270 = xor i64 %269, -3804744371587814611
  %271 = mul i64 %258, %270
  %272 = trunc i64 %271 to i32
  %273 = xor i32 %239, %272
  %274 = add i64 %50, -1028084997334914119
  %275 = and i64 -1028084997334914119, %50
  %276 = or i64 -1028084997334914119, %50
  %277 = add i64 %275, %276
  %278 = add i64 %54, 4744364067739165414
  %279 = sub i64 0, %54
  %280 = sub i64 4744364067739165414, %279
  %281 = xor i64 %277, %280
  %282 = xor i64 %281, %278
  %283 = xor i64 %282, %274
  %284 = xor i64 %283, 6625328713573926851
  %285 = or i64 %215, -5232698176521930295
  %286 = xor i64 %215, -1
  %287 = and i64 %286, 8974380534943676351
  %288 = and i64 %215, -8974380534943676352
  %289 = or i64 %287, %288
  %290 = xor i64 -3752941908454011274, %289
  %291 = xor i64 %215, -1
  %292 = or i64 5232698176521930294, %291
  %293 = xor i64 %292, -1
  %294 = and i64 %293, -1
  %295 = or i64 %290, %294
  %296 = or i64 %5, -9173604084650401819
  %297 = xor i64 %5, -1
  %298 = and i64 -9173604084650401819, %297
  %299 = add i64 %298, %5
  %300 = xor i64 %296, %285
  %301 = xor i64 %300, 3957623103590192010
  %302 = xor i64 %301, %299
  %303 = xor i64 %302, %295
  %304 = mul i64 %284, %303
  %305 = trunc i64 %304 to i32
  %306 = xor i32 %273, %305
  store i32 %306, i32* %0, align 4
  %307 = call i8** @bf16232848923043496(i32* %0)
  %308 = load i8*, i8** %307, align 8
  indirectbr i8* %308, [label %loopEnd, label %EntryBasicBlockSplit]

309:                                              ; preds = %309, %loopStart
  %310 = sext i8 %.reload8 to i32
  store i32 %310, i32* %.out, align 4
  %311 = srem i64 %.reload9, 2
  store i64 %311, i64* %.reg2mem2, align 8
  %.reload4 = load i64, i64* %.reg2mem2, align 8
  store i64 %.reload4, i64* %.out1, align 8
  %312 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %313 = load i32, i32* %312, align 4
  %314 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %315 = load i32, i32* %314, align 4
  %316 = add i32 %313, %315
  store i32 %316, i32* %dispatcher, align 4
  %317 = load i8*, i8** %8, align 8
  %318 = load i8, i8* %317, align 1
  %319 = and i8 %318, 1
  %320 = icmp eq i8 %319, 0
  %321 = mul i8 %318, %318
  %322 = add i8 %321, %318
  %323 = mul i8 %322, 3
  %324 = and i64 %48, -8687400741283716416
  %325 = xor i64 %48, -1
  %326 = or i64 8687400741283716415, %325
  %327 = xor i64 %326, -1
  %328 = and i64 %327, -1
  %329 = sext i32 %dispatcher1 to i64
  %330 = add i64 %329, 4958400503513756742
  %331 = and i64 4958400503513756742, %329
  %332 = or i64 4958400503513756742, %329
  %333 = add i64 %331, %332
  %334 = and i64 %3, 5846445044712829957
  %335 = xor i64 %3, -1
  %336 = or i64 -5846445044712829958, %335
  %337 = xor i64 %336, -1
  %338 = and i64 %337, -1
  %339 = xor i64 941083285556239107, %338
  %340 = xor i64 %339, %324
  %341 = xor i64 %340, %330
  %342 = xor i64 %341, %334
  %343 = xor i64 %342, %328
  %344 = xor i64 %343, %333
  %345 = or i64 %52, 4351756571166490656
  %346 = xor i64 %52, -1
  %347 = and i64 %346, 4222926399939410645
  %348 = and i64 %52, -4222926399939410646
  %349 = or i64 %347, %348
  %350 = xor i64 503931075598760693, %349
  %351 = xor i64 %52, -1
  %352 = or i64 -4351756571166490657, %351
  %353 = xor i64 %352, -1
  %354 = and i64 %353, -1
  %355 = or i64 %350, %354
  %356 = add i64 %52, 8249223871443094220
  %357 = add i64 975980617607318237, %52
  %358 = sub i64 %357, -7273243253835775983
  %359 = xor i64 -8159442053412597930, %358
  %360 = xor i64 %359, %356
  %361 = xor i64 %360, %345
  %362 = xor i64 %361, %355
  %363 = mul i64 %344, %362
  %364 = trunc i64 %363 to i8
  %365 = srem i8 %323, %364
  %366 = or i64 %5, -2515771154520164447
  %367 = xor i64 %5, -1
  %368 = and i64 %367, -9043536088557097493
  %369 = and i64 %5, 9043536088557097492
  %370 = or i64 %368, %369
  %371 = xor i64 6874965426447997514, %370
  %372 = xor i64 %5, -1
  %373 = or i64 2515771154520164446, %372
  %374 = xor i64 %373, -1
  %375 = and i64 %374, -1
  %376 = or i64 %371, %375
  %377 = and i64 %.reload9, 6212425120119603050
  %378 = xor i64 %.reload9, -1
  %379 = or i64 -6212425120119603051, %378
  %380 = xor i64 %379, -1
  %381 = and i64 %380, -1
  %382 = xor i64 %381, %366
  %383 = xor i64 %382, %376
  %384 = xor i64 %383, -8632547760118024129
  %385 = xor i64 %384, %377
  %386 = add i64 %3, -7356337733771259491
  %387 = and i64 -7356337733771259491, %3
  %388 = or i64 -7356337733771259491, %3
  %389 = add i64 %387, %388
  %390 = and i64 %52, -2007694378990642506
  %391 = xor i64 %52, -1
  %392 = xor i64 -2007694378990642506, %391
  %393 = and i64 %392, -2007694378990642506
  %394 = or i64 %.reload9, -6032580207261989585
  %395 = xor i64 %.reload9, -1
  %396 = and i64 -6032580207261989585, %395
  %397 = add i64 %396, %.reload9
  %398 = xor i64 %393, %394
  %399 = xor i64 %398, %390
  %400 = xor i64 %399, %389
  %401 = xor i64 %400, %397
  %402 = xor i64 %401, %386
  %403 = xor i64 %402, 0
  %404 = mul i64 %385, %403
  %405 = trunc i64 %404 to i8
  %406 = icmp eq i8 %365, %405
  %407 = or i1 %320, %406
  %408 = select i1 %407, i32 388314402, i32 388314413
  %409 = or i32 %408, 15
  %410 = and i32 %408, 15
  %411 = sub i32 %409, %410
  store i32 %411, i32* %0, align 4
  %412 = call i8** @bf16232848923043496(i32* %0)
  %413 = load i8*, i8** %412, align 8
  indirectbr i8* %413, [label %loopEnd, label %309]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %414 = sext i8 %.reload8 to i64
  %415 = or i64 %414, -7683618968751319737
  %416 = xor i64 %414, -1
  %417 = and i64 %416, -967893755754168594
  %418 = and i64 %414, 967893755754168593
  %419 = or i64 %417, %418
  %420 = xor i64 7480220046911597481, %419
  %421 = xor i64 %414, -1
  %422 = or i64 7683618968751319736, %421
  %423 = xor i64 %422, -1
  %424 = and i64 %423, -1
  %425 = or i64 %420, %424
  %426 = sext i32 %dispatcher1 to i64
  %427 = add i64 %426, -1334132602238566977
  %428 = and i64 -1334132602238566977, %426
  %429 = or i64 -1334132602238566977, %426
  %430 = add i64 %428, %429
  %431 = add i64 %.reload9, -2033800083849080766
  %432 = and i64 -2033800083849080766, %.reload9
  %433 = or i64 -2033800083849080766, %.reload9
  %434 = add i64 %432, %433
  %435 = xor i64 %427, %434
  %436 = xor i64 %435, %430
  %437 = xor i64 %436, %425
  %438 = xor i64 %437, %415
  %439 = xor i64 %438, %431
  %440 = xor i64 %439, -8830254387788817163
  %441 = add i64 %54, 522872316590324835
  %442 = add i64 3360525716185435322, %54
  %443 = sub i64 %442, 2837653399595110487
  %444 = and i64 %.reload9, 522052501719600410
  %445 = xor i64 %.reload9, -1
  %446 = xor i64 522052501719600410, %445
  %447 = and i64 %446, 522052501719600410
  %448 = xor i64 -8055289264292051490, %443
  %449 = xor i64 %448, %447
  %450 = xor i64 %449, %441
  %451 = xor i64 %450, %444
  %452 = mul i64 %440, %451
  store i64 %452, i64* %214, align 8
  %453 = call i8** @lk12173744047017897499(i64* %214)
  %454 = load i8*, i8** %453, align 8
  %455 = bitcast i8* %454 to void (i64, i1*)*
  %.reload3 = load i64, i64* %.reg2mem2, align 8
  call void %455(i64 %.reload3, i1* %.out2)
  %456 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %457 = load i32, i32* %456, align 4
  %458 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %459 = load i32, i32* %458, align 4
  %460 = or i64 %7, -6724655875188767319
  %461 = xor i64 %7, -1
  %462 = and i64 -6724655875188767319, %461
  %463 = add i64 %462, %7
  %464 = sext i8 %.reload8 to i64
  %465 = add i64 %464, -7309706822284153298
  %466 = add i64 4042785472953448117, %464
  %467 = sub i64 %466, -7094251778471950201
  %468 = xor i64 %467, -7683019721717340067
  %469 = xor i64 %468, %460
  %470 = xor i64 %469, %465
  %471 = xor i64 %470, %463
  %472 = or i64 %48, 430689099068928635
  %473 = and i64 430689099068928635, %48
  %474 = xor i64 430689099068928635, %48
  %475 = or i64 %473, %474
  %476 = add i64 %215, -5309655961890402050
  %477 = xor i64 -5309655961890402050, %215
  %478 = and i64 -5309655961890402050, %215
  %479 = mul i64 2, %478
  %480 = add i64 %477, %479
  %481 = xor i64 %476, %472
  %482 = xor i64 %481, %480
  %483 = xor i64 %482, 6391117523461082959
  %484 = xor i64 %483, %475
  %485 = mul i64 %471, %484
  %486 = trunc i64 %485 to i32
  %487 = add i32 %457, %486
  %488 = sub i32 %487, %459
  %489 = or i64 %48, -5371005969857147026
  %490 = xor i64 %48, -1
  %491 = and i64 %490, 4081633612991062194
  %492 = and i64 %48, -4081633612991062195
  %493 = or i64 %491, %492
  %494 = xor i64 -8227308356830105636, %493
  %495 = xor i64 %48, -1
  %496 = or i64 5371005969857147025, %495
  %497 = xor i64 %496, -1
  %498 = and i64 %497, -1
  %499 = or i64 %494, %498
  %500 = add i64 %52, -1899267693451544074
  %501 = add i64 -2409907447051402625, %52
  %502 = add i64 %501, 510639753599858551
  %503 = or i64 %1, -7557663989993140106
  %504 = and i64 -7557663989993140106, %1
  %505 = xor i64 -7557663989993140106, %1
  %506 = or i64 %504, %505
  %507 = xor i64 %489, %506
  %508 = xor i64 %507, %499
  %509 = xor i64 %508, %500
  %510 = xor i64 %509, 3274667674947258243
  %511 = xor i64 %510, %502
  %512 = xor i64 %511, %503
  %513 = or i64 %3, -3338009751880935739
  %514 = xor i64 %3, -1
  %515 = and i64 %514, 2823908072902612287
  %516 = and i64 %3, -2823908072902612288
  %517 = or i64 %515, %516
  %518 = xor i64 -676234016022658054, %517
  %519 = xor i64 %3, -1
  %520 = or i64 3338009751880935738, %519
  %521 = xor i64 %520, -1
  %522 = and i64 %521, -1
  %523 = or i64 %518, %522
  %524 = add i64 %7, 159235529477104485
  %525 = add i64 -7429068460153627448, %7
  %526 = add i64 %525, 7588303989630731933
  %527 = sext i8 %.reload8 to i64
  %528 = or i64 %527, 3217479995877811903
  %529 = xor i64 %527, -1
  %530 = and i64 %529, -2575450954587492918
  %531 = and i64 %527, 2575450954587492917
  %532 = or i64 %530, %531
  %533 = xor i64 -1088498906806367371, %532
  %534 = xor i64 %527, -1
  %535 = or i64 -3217479995877811904, %534
  %536 = xor i64 %535, -1
  %537 = and i64 %536, -1
  %538 = or i64 %533, %537
  %539 = xor i64 %513, -470342000714745839
  %540 = xor i64 %539, %526
  %541 = xor i64 %540, %524
  %542 = xor i64 %541, %523
  %543 = xor i64 %542, %528
  %544 = xor i64 %543, %538
  %545 = mul i64 %512, %544
  %546 = trunc i64 %545 to i32
  %547 = sub i32 %488, %546
  store i32 %547, i32* %dispatcher, align 4
  %548 = load i8*, i8** %4, align 8
  %549 = load i8, i8* %548, align 1
  %550 = and i8 %549, 1
  %551 = icmp eq i8 %550, 0
  %552 = mul i8 %549, %549
  %553 = sub i8 %552, -90
  %554 = add i8 %553, %549
  %555 = add i8 %554, -90
  %556 = mul i8 %555, 3
  %557 = srem i8 %556, 2
  %558 = icmp eq i8 %557, 0
  %559 = xor i1 %558, true
  %560 = and i1 %551, %559
  %561 = add i1 %560, %558
  %562 = select i1 %561, i32 388314401, i32 388314413
  %563 = xor i32 %562, 12
  store i32 %563, i32* %0, align 4
  %564 = call i8** @bf16232848923043496(i32* %0)
  %565 = load i8*, i8** %564, align 8
  indirectbr i8* %565, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %566 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %566, align 4
  %567 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %567, align 4
  %568 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %568, align 4
  %569 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %569, align 4
  %570 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %570, align 4
  %571 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %572 = load i32, i32* %571, align 4
  store i32 %572, i32* %dispatcher, align 4
  %573 = load i8*, i8** %8, align 8
  %574 = load i8, i8* %573, align 1
  %575 = mul i8 %574, 2
  %576 = mul i8 %574, 2
  %577 = add i8 2, %576
  %578 = mul i8 %575, %577
  %579 = srem i8 %578, 4
  %580 = icmp eq i8 %579, 0
  %581 = mul i8 %574, %574
  %582 = or i64 %54, 8079705056074794597
  %583 = and i64 8079705056074794597, %54
  %584 = xor i64 8079705056074794597, %54
  %585 = or i64 %583, %584
  %586 = or i64 %3, -5073456347827839607
  %587 = xor i64 %3, -1
  %588 = and i64 %587, -3277202009724506286
  %589 = and i64 %3, 3277202009724506285
  %590 = or i64 %588, %589
  %591 = xor i64 7715365959185855195, %590
  %592 = xor i64 %3, -1
  %593 = or i64 5073456347827839606, %592
  %594 = xor i64 %593, -1
  %595 = and i64 %594, -1
  %596 = or i64 %591, %595
  %597 = xor i64 %582, %585
  %598 = xor i64 %597, %586
  %599 = xor i64 %598, %596
  %600 = xor i64 %599, -4937205217690023869
  %601 = or i64 %48, 7601591292357522058
  %602 = xor i64 %48, -1
  %603 = and i64 %602, 5106898648485843092
  %604 = and i64 %48, -5106898648485843093
  %605 = or i64 %603, %604
  %606 = xor i64 3432057659887968798, %605
  %607 = xor i64 %48, -1
  %608 = or i64 -7601591292357522059, %607
  %609 = xor i64 %608, -1
  %610 = and i64 %609, -1
  %611 = or i64 %606, %610
  %612 = and i64 %48, -1662946787980997843
  %613 = xor i64 %48, -1
  %614 = xor i64 -1662946787980997843, %613
  %615 = and i64 %614, -1662946787980997843
  %616 = xor i64 %615, 0
  %617 = xor i64 %616, %612
  %618 = xor i64 %617, %601
  %619 = xor i64 %618, %611
  %620 = mul i64 %600, %619
  %621 = trunc i64 %620 to i8
  %622 = sub i8 %621, %581
  %623 = sub i8 0, %574
  %624 = add i8 %622, %623
  %625 = sub i8 0, %624
  %626 = srem i8 %625, 2
  %627 = icmp eq i8 %626, 0
  %628 = or i1 %580, %627
  %629 = select i1 %628, i32 388314407, i32 388314400
  %630 = xor i32 %629, 7
  store i32 %630, i32* %0, align 4
  %631 = call i8** @bf16232848923043496(i32* %0)
  %632 = load i8*, i8** %631, align 8
  indirectbr i8* %632, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %633 = load i8*, i8** %2, align 8
  %634 = load i8, i8* %633, align 1
  %635 = mul i8 %634, 2
  %636 = sext i32 %dispatcher1 to i64
  %637 = add i64 %636, 3283709176018741579
  %638 = and i64 3283709176018741579, %636
  %639 = or i64 3283709176018741579, %636
  %640 = add i64 %638, %639
  %641 = and i64 %1, -303329085137261574
  %642 = xor i64 %1, -1
  %643 = xor i64 -303329085137261574, %642
  %644 = and i64 %643, -303329085137261574
  %645 = xor i64 %637, -4319917643721853593
  %646 = xor i64 %645, %644
  %647 = xor i64 %646, %640
  %648 = xor i64 %647, %641
  %649 = sext i8 %.reload8 to i64
  %650 = add i64 %649, -2550231598125342372
  %651 = add i64 6000058735488175263, %649
  %652 = sub i64 %651, 8550290333613517635
  %653 = and i64 %.reload9, -7888685755247341518
  %654 = xor i64 %.reload9, -1
  %655 = or i64 7888685755247341517, %654
  %656 = xor i64 %655, -1
  %657 = and i64 %656, -1
  %658 = xor i64 %652, %657
  %659 = xor i64 %658, %650
  %660 = xor i64 %659, 6772009625351498926
  %661 = xor i64 %660, %653
  %662 = mul i64 %648, %661
  %663 = trunc i64 %662 to i8
  %664 = mul i8 %634, %663
  %665 = add i8 2, %664
  %666 = mul i8 %635, %665
  %667 = srem i8 %666, 4
  %668 = icmp eq i8 %667, 0
  %669 = mul i8 %634, %634
  %670 = mul i8 %669, %634
  %671 = add i8 %670, %634
  %672 = srem i8 %671, 2
  %673 = icmp eq i8 %672, 0
  %674 = or i64 %1, 3686623681889832912
  %675 = and i64 3686623681889832912, %1
  %676 = xor i64 3686623681889832912, %1
  %677 = or i64 %675, %676
  %678 = add i64 %52, -9060516529834193958
  %679 = sub i64 0, %52
  %680 = sub i64 -9060516529834193958, %679
  %681 = or i64 %54, 3180291968495313613
  %682 = xor i64 %54, -1
  %683 = and i64 3180291968495313613, %682
  %684 = add i64 %683, %54
  %685 = xor i64 %681, %674
  %686 = xor i64 %685, %678
  %687 = xor i64 %686, %684
  %688 = xor i64 %687, 9199933394296609595
  %689 = xor i64 %688, %677
  %690 = xor i64 %689, %680
  %691 = or i64 %48, -5610958561415084337
  %692 = and i64 -5610958561415084337, %48
  %693 = xor i64 -5610958561415084337, %48
  %694 = or i64 %692, %693
  %695 = add i64 %215, 7592358875970197397
  %696 = and i64 7592358875970197397, %215
  %697 = or i64 7592358875970197397, %215
  %698 = add i64 %696, %697
  %699 = and i64 %3, 8047478072139148194
  %700 = or i64 -8047478072139148195, %3
  %701 = sub i64 %700, -8047478072139148195
  %702 = xor i64 %699, %695
  %703 = xor i64 %702, -2045858547239975437
  %704 = xor i64 %703, %701
  %705 = xor i64 %704, %698
  %706 = xor i64 %705, %694
  %707 = xor i64 %706, %691
  %708 = mul i64 %690, %707
  %709 = trunc i64 %708 to i1
  %710 = xor i1 %668, %709
  %711 = xor i1 %673, true
  %712 = or i1 %710, %711
  %713 = xor i1 %712, true
  %714 = and i64 %5, 455634635608124491
  %715 = xor i64 %5, -1
  %716 = or i64 -455634635608124492, %715
  %717 = xor i64 %716, -1
  %718 = and i64 %717, -1
  %719 = and i64 %7, -3711215458902744559
  %720 = or i64 3711215458902744558, %7
  %721 = sub i64 %720, 3711215458902744558
  %722 = xor i64 %718, %714
  %723 = xor i64 %722, %719
  %724 = xor i64 %723, -6352269586145325885
  %725 = xor i64 %724, %721
  %726 = or i64 %3, 5250198431903184035
  %727 = xor i64 %3, -1
  %728 = and i64 %727, 5679811608899329638
  %729 = and i64 %3, -5679811608899329639
  %730 = or i64 %728, %729
  %731 = xor i64 436511856693308101, %730
  %732 = xor i64 %3, -1
  %733 = or i64 -5250198431903184036, %732
  %734 = xor i64 %733, -1
  %735 = and i64 %734, -1
  %736 = or i64 %731, %735
  %737 = and i64 %54, 5009832357150537820
  %738 = or i64 -5009832357150537821, %54
  %739 = sub i64 %738, -5009832357150537821
  %740 = and i64 %48, -7128374872589560075
  %741 = xor i64 %48, -1
  %742 = or i64 7128374872589560074, %741
  %743 = xor i64 %742, -1
  %744 = and i64 %743, -1
  %745 = xor i64 %744, %737
  %746 = xor i64 %745, %736
  %747 = xor i64 %746, %726
  %748 = xor i64 %747, 2834961349789991915
  %749 = xor i64 %748, %740
  %750 = xor i64 %749, %739
  %751 = mul i64 %725, %750
  %752 = trunc i64 %751 to i1
  %753 = and i1 %713, %752
  %754 = select i1 %753, i32 388314400, i32 388314413
  %755 = xor i32 %754, 13
  store i32 %755, i32* %0, align 4
  %756 = call i8** @bf16232848923043496(i32* %0)
  %757 = load i8*, i8** %756, align 8
  indirectbr i8* %757, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %309, %EntryBasicBlockSplit
  %758 = load i8*, i8** %6, align 8
  %759 = load i8, i8* %758, align 1
  %760 = mul i8 %759, %759
  %761 = add i8 %760, 18
  %762 = add i8 %761, %759
  %763 = sub i8 %762, 18
  %764 = mul i8 %763, 3
  %765 = srem i8 %764, 2
  %766 = add i64 %7, 521190114656966410
  %767 = sub i64 0, %7
  %768 = sub i64 521190114656966410, %767
  %769 = and i64 %50, 6891758874058093732
  %770 = or i64 -6891758874058093733, %50
  %771 = sub i64 %770, -6891758874058093733
  %772 = xor i64 %768, -6549784154829451291
  %773 = xor i64 %772, %771
  %774 = xor i64 %773, %769
  %775 = xor i64 %774, %766
  %776 = or i64 %5, 4532482271620465077
  %777 = xor i64 %5, -1
  %778 = and i64 4532482271620465077, %777
  %779 = add i64 %778, %5
  %780 = or i64 %.reload9, -1298522389496671059
  %781 = and i64 -1298522389496671059, %.reload9
  %782 = xor i64 -1298522389496671059, %.reload9
  %783 = or i64 %781, %782
  %784 = xor i64 0, %779
  %785 = xor i64 %784, %776
  %786 = xor i64 %785, %783
  %787 = xor i64 %786, %780
  %788 = mul i64 %775, %787
  %789 = trunc i64 %788 to i8
  %790 = icmp eq i8 %765, %789
  %791 = mul i8 %759, %759
  %792 = add i8 %791, %759
  %793 = srem i8 %792, 2
  %794 = icmp eq i8 %793, 0
  %795 = and i1 %790, %794
  %796 = and i64 %50, 1589232494804593071
  %797 = xor i64 %50, -1
  %798 = xor i64 1589232494804593071, %797
  %799 = and i64 %798, 1589232494804593071
  %800 = add i64 %52, 296050361234631022
  %801 = and i64 296050361234631022, %52
  %802 = or i64 296050361234631022, %52
  %803 = add i64 %801, %802
  %804 = xor i64 %796, -7208162077773092297
  %805 = xor i64 %804, %800
  %806 = xor i64 %805, %803
  %807 = xor i64 %806, %799
  %808 = sext i32 %dispatcher1 to i64
  %809 = or i64 %808, 8594498061761209415
  %810 = xor i64 %808, -1
  %811 = and i64 8594498061761209415, %810
  %812 = add i64 %811, %808
  %813 = or i64 %.reload9, -1691112364030489312
  %814 = and i64 -1691112364030489312, %.reload9
  %815 = xor i64 -1691112364030489312, %.reload9
  %816 = or i64 %814, %815
  %817 = sext i8 %.reload8 to i64
  %818 = and i64 %817, 5100165829849066484
  %819 = xor i64 %817, -1
  %820 = xor i64 5100165829849066484, %819
  %821 = and i64 %820, 5100165829849066484
  %822 = xor i64 %813, %818
  %823 = xor i64 %822, %809
  %824 = xor i64 %823, 837182007589321454
  %825 = xor i64 %824, %816
  %826 = xor i64 %825, %821
  %827 = xor i64 %826, %812
  %828 = mul i64 %807, %827
  %829 = trunc i64 %828 to i32
  %830 = select i1 %795, i32 %829, i32 388314404
  %831 = add i64 %7, -4130915278676930165
  %832 = add i64 -7742339052689249451, %7
  %833 = add i64 %832, 3611423774012319286
  %834 = and i64 %48, -2083647684695206800
  %835 = xor i64 %48, -1
  %836 = or i64 2083647684695206799, %835
  %837 = xor i64 %836, -1
  %838 = and i64 %837, -1
  %839 = add i64 %.reload9, 4609466776022948476
  %840 = sub i64 0, %.reload9
  %841 = sub i64 4609466776022948476, %840
  %842 = xor i64 %831, 7948747975796009931
  %843 = xor i64 %842, %838
  %844 = xor i64 %843, %834
  %845 = xor i64 %844, %833
  %846 = xor i64 %845, %839
  %847 = xor i64 %846, %841
  %848 = and i64 %5, 3485484744782850149
  %849 = xor i64 %5, -1
  %850 = or i64 -3485484744782850150, %849
  %851 = xor i64 %850, -1
  %852 = and i64 %851, -1
  %853 = and i64 %52, 616657664948661813
  %854 = or i64 -616657664948661814, %52
  %855 = sub i64 %854, -616657664948661814
  %856 = xor i64 923050507481303890, %855
  %857 = xor i64 %856, %852
  %858 = xor i64 %857, %848
  %859 = xor i64 %858, %853
  %860 = mul i64 %847, %859
  %861 = trunc i64 %860 to i32
  %862 = xor i32 %830, %861
  store i32 %862, i32* %0, align 4
  %863 = call i8** @bf16232848923043496(i32* %0)
  %864 = load i8*, i8** %863, align 8
  indirectbr i8* %864, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render..split.4(i1 %0) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314436)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@render..split.4, %.exitStub1), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314380)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@render..split.4, %.split), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314392)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@render..split.4, %.exitStub), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314471)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@render..split.4, %EntryBasicBlockSplit), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314537)
  %11 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %10
  store i8* blockaddress(@render..split.4, %BogusBasciBlock), i8** %11, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split.4, %BogusBasciBlock), i8** %12, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %13, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render..split.4, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %14, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render..split.4, %.split), i8** %.reload5, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %15, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render..split.4, %.exitStub), i8** %.reload8, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %16, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render..split.4, %.exitStub1), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %17 = load i8*, i8** %.reload, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %18 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split.4, %.split), i8** %18, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render..split.4, %.exitStub), i8** %19, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render..split.4, %.exitStub1), i8** %20, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %21 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %21, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %22 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %22, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

.split:                                           ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %23 = select i1 %0, i8** %.reload7, i8** %.reload10
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.5(i64 %0) #1 {
entry:
  %1 = add i64 %0, 6236726494600652189
  %2 = add i64 1196221477990575264, %0
  %3 = sub i64 %2, -5040505016610076925
  %4 = or i64 %0, -3969365386039077852
  %5 = xor i64 %0, -1
  %6 = and i64 -3969365386039077852, %5
  %7 = add i64 %6, %0
  %8 = add i64 %0, -2202502714994318594
  %9 = xor i64 -2202502714994318594, %0
  %10 = and i64 -2202502714994318594, %0
  %11 = mul i64 2, %10
  %12 = add i64 %9, %11
  %13 = xor i64 %8, %1
  %14 = xor i64 %13, 5347270765545475081
  %15 = xor i64 %14, %3
  %16 = xor i64 %15, %7
  %17 = xor i64 %16, %12
  %18 = xor i64 %17, %4
  %19 = add i64 %0, -6288959657376497722
  %20 = sub i64 0, %0
  %21 = add i64 6288959657376497722, %20
  %22 = sub i64 0, %21
  %23 = and i64 %0, -2327797725381367320
  %24 = xor i64 %0, -1
  %25 = or i64 2327797725381367319, %24
  %26 = xor i64 %25, -1
  %27 = and i64 %26, -1
  %28 = add i64 %0, -408738084508068112
  %29 = add i64 -4307759452046686429, %0
  %30 = add i64 %29, 3899021367538618317
  %31 = xor i64 %22, 4521449874790810169
  %32 = xor i64 %31, %19
  %33 = xor i64 %32, %30
  %34 = xor i64 %33, %23
  %35 = xor i64 %34, %27
  %36 = xor i64 %35, %28
  %37 = mul i64 %18, %36
  %38 = trunc i64 %37 to i32
  %39 = alloca i32, i32 %38, align 4
  %40 = and i64 %0, 1455554115766978071
  %41 = xor i64 %0, -1
  %42 = xor i64 1455554115766978071, %41
  %43 = and i64 %42, 1455554115766978071
  %44 = and i64 %0, -4086817201588972052
  %45 = xor i64 %0, -1
  %46 = or i64 4086817201588972051, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = xor i64 %43, %44
  %50 = xor i64 %49, %48
  %51 = xor i64 %50, -4261939716955741129
  %52 = xor i64 %51, %40
  %53 = and i64 %0, 4991440930385701202
  %54 = or i64 -4991440930385701203, %0
  %55 = sub i64 %54, -4991440930385701203
  %56 = or i64 %0, 6227461868380558151
  %57 = xor i64 %0, -1
  %58 = and i64 %57, 2816792635749354180
  %59 = and i64 %0, -2816792635749354181
  %60 = or i64 %58, %59
  %61 = xor i64 8177167384111208835, %60
  %62 = xor i64 %0, -1
  %63 = or i64 -6227461868380558152, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = or i64 %61, %65
  %67 = or i64 %0, 9127720987052342285
  %68 = xor i64 %0, -1
  %69 = and i64 %68, -8272361479613307186
  %70 = and i64 %0, 8272361479613307185
  %71 = or i64 %69, %70
  %72 = xor i64 -892127308001322301, %71
  %73 = xor i64 %0, -1
  %74 = or i64 -9127720987052342286, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = or i64 %72, %76
  %78 = xor i64 %53, %56
  %79 = xor i64 %78, %66
  %80 = xor i64 %79, %77
  %81 = xor i64 %80, 1783684107251947022
  %82 = xor i64 %81, %55
  %83 = xor i64 %82, %67
  %84 = mul i64 %52, %83
  %85 = call i64 @h9549842938191327224(i64 %84)
  %86 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %85
  store i8* blockaddress(@render.extracted.5, %loopEnd), i8** %86, align 8
  %87 = call i64 @h9549842938191327224(i64 388314368)
  %88 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %87
  store i8* blockaddress(@render.extracted.5, %defaultSwitchBasicBlock), i8** %88, align 8
  %89 = call i64 @h9549842938191327224(i64 388314533)
  %90 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %89
  store i8* blockaddress(@render.extracted.5, %BogusBasicBlock), i8** %90, align 8
  %91 = call i64 @h9549842938191327224(i64 388314369)
  %92 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %91
  store i8* blockaddress(@render.extracted.5, %.exitStub1), i8** %92, align 8
  %93 = call i64 @h9549842938191327224(i64 388314429)
  %94 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %93
  store i8* blockaddress(@render.extracted.5, %loopStart), i8** %94, align 8
  %95 = call i64 @h9549842938191327224(i64 388314394)
  %96 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %95
  store i8* blockaddress(@render.extracted.5, %332), i8** %96, align 8
  %97 = or i64 %0, -3027398670054889072
  %98 = xor i64 %0, -1
  %99 = and i64 -3027398670054889072, %98
  %100 = add i64 %99, %0
  %101 = add i64 %0, -8130911484014497875
  %102 = add i64 2721620085702121691, %0
  %103 = sub i64 %102, -7594212503992932050
  %104 = add i64 %0, -4139443428299943641
  %105 = sub i64 0, %0
  %106 = sub i64 -4139443428299943641, %105
  %107 = xor i64 %97, %100
  %108 = xor i64 %107, %103
  %109 = xor i64 %108, %101
  %110 = xor i64 %109, 1823128220463530547
  %111 = xor i64 %110, %106
  %112 = xor i64 %111, %104
  %113 = or i64 %0, -1964645216817991239
  %114 = and i64 -1964645216817991239, %0
  %115 = xor i64 -1964645216817991239, %0
  %116 = or i64 %114, %115
  %117 = add i64 %0, 7565449352144889518
  %118 = sub i64 0, %0
  %119 = sub i64 7565449352144889518, %118
  %120 = and i64 %0, -7447888636094997674
  %121 = xor i64 %0, -1
  %122 = xor i64 -7447888636094997674, %121
  %123 = and i64 %122, -7447888636094997674
  %124 = xor i64 %120, %116
  %125 = xor i64 %124, %117
  %126 = xor i64 %125, %119
  %127 = xor i64 %126, %123
  %128 = xor i64 %127, %113
  %129 = xor i64 %128, -1179132365773405951
  %130 = mul i64 %112, %129
  %131 = call i64 @h9549842938191327224(i64 %130)
  %132 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %131
  store i8* blockaddress(@render.extracted.5, %EntryBasicBlockSplit), i8** %132, align 8
  %133 = call i64 @h9549842938191327224(i64 388314542)
  %134 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %133
  store i8* blockaddress(@render.extracted.5, %.exitStub), i8** %134, align 8
  %lookupTable = alloca [9 x i32], align 4
  %135 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %135, align 4
  %136 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %136, align 4
  %137 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %138 = add i64 %0, 7595847404937816323
  %139 = and i64 7595847404937816323, %0
  %140 = or i64 7595847404937816323, %0
  %141 = add i64 %139, %140
  %142 = and i64 %0, -3732588426590655050
  %143 = xor i64 %0, -1
  %144 = xor i64 -3732588426590655050, %143
  %145 = and i64 %144, -3732588426590655050
  %146 = xor i64 %145, %141
  %147 = xor i64 %146, %142
  %148 = xor i64 %147, -8129446831045375397
  %149 = xor i64 %148, %138
  %150 = and i64 %0, -5885364872573938120
  %151 = xor i64 %0, -1
  %152 = or i64 5885364872573938119, %151
  %153 = xor i64 %152, -1
  %154 = and i64 %153, -1
  %155 = or i64 %0, 7207165134371341451
  %156 = and i64 7207165134371341451, %0
  %157 = xor i64 7207165134371341451, %0
  %158 = or i64 %156, %157
  %159 = add i64 %0, -5122707078948856724
  %160 = sub i64 0, %0
  %161 = sub i64 -5122707078948856724, %160
  %162 = xor i64 %161, %150
  %163 = xor i64 %162, %154
  %164 = xor i64 %163, %155
  %165 = xor i64 %164, %159
  %166 = xor i64 %165, %158
  %167 = xor i64 %166, -2681327289301505491
  %168 = mul i64 %149, %167
  %169 = trunc i64 %168 to i32
  store i32 %169, i32* %137, align 4
  %170 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %170, align 4
  %171 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %171, align 4
  %172 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %173 = add i64 %0, 1582971881293840472
  %174 = sub i64 0, %0
  %175 = sub i64 1582971881293840472, %174
  %176 = and i64 %0, -7440099196909401120
  %177 = xor i64 %0, -1
  %178 = xor i64 -7440099196909401120, %177
  %179 = and i64 %178, -7440099196909401120
  %180 = or i64 %0, 3431608853057147021
  %181 = xor i64 %0, -1
  %182 = and i64 3431608853057147021, %181
  %183 = add i64 %182, %0
  %184 = xor i64 %179, -8333453726608533637
  %185 = xor i64 %184, %183
  %186 = xor i64 %185, %175
  %187 = xor i64 %186, %180
  %188 = xor i64 %187, %173
  %189 = xor i64 %188, %176
  %190 = add i64 %0, -2884652231564384909
  %191 = xor i64 -2884652231564384909, %0
  %192 = and i64 -2884652231564384909, %0
  %193 = mul i64 2, %192
  %194 = add i64 %191, %193
  %195 = add i64 %0, 3304909144495363444
  %196 = and i64 3304909144495363444, %0
  %197 = or i64 3304909144495363444, %0
  %198 = add i64 %196, %197
  %199 = xor i64 %195, %194
  %200 = xor i64 %199, %190
  %201 = xor i64 %200, %198
  %202 = xor i64 %201, -4306340635970576538
  %203 = mul i64 %189, %202
  %204 = trunc i64 %203 to i32
  store i32 %204, i32* %172, align 4
  %205 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %205, align 4
  %206 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %206, align 4
  %207 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %207, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314429, i32* %39, align 4
  %208 = call i8** @bf3325468485390379012(i32* %39)
  %209 = load i8*, i8** %208, align 8
  indirectbr i8* %209, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %332
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %210 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %213 = load i32, i32* %212, align 4
  %214 = srem i32 %211, %213
  store i32 %214, i32* %dispatcher, align 4
  %215 = load i8*, i8** %96, align 8
  %216 = load i8, i8* %215, align 1
  %217 = or i64 %89, -5552023199257857859
  %218 = and i64 -5552023199257857859, %89
  %219 = xor i64 -5552023199257857859, %89
  %220 = or i64 %218, %219
  %221 = or i64 %89, -1900563028634870705
  %222 = xor i64 %89, -1
  %223 = and i64 -1900563028634870705, %222
  %224 = add i64 %223, %89
  %225 = xor i64 %224, %221
  %226 = xor i64 %225, %217
  %227 = xor i64 %226, -5859045410438220581
  %228 = xor i64 %227, %220
  %229 = sext i32 %dispatcher1 to i64
  %230 = and i64 %229, -3833143543873222675
  %231 = or i64 3833143543873222674, %229
  %232 = sub i64 %231, 3833143543873222674
  %233 = add i64 %93, -7716631029669198715
  %234 = xor i64 -7716631029669198715, %93
  %235 = and i64 -7716631029669198715, %93
  %236 = mul i64 2, %235
  %237 = add i64 %234, %236
  %238 = xor i64 %233, %237
  %239 = xor i64 %238, %232
  %240 = xor i64 %239, 6535902636116332198
  %241 = xor i64 %240, %230
  %242 = mul i64 %228, %241
  %243 = trunc i64 %242 to i8
  %244 = mul i8 %216, %243
  %245 = mul i8 %216, 2
  %246 = add i8 2, %245
  %247 = mul i8 %244, %246
  %248 = and i64 %91, 1628368187985392203
  %249 = or i64 -1628368187985392204, %91
  %250 = sub i64 %249, -1628368187985392204
  %251 = add i64 %93, 5726652791610989072
  %252 = add i64 -4141965506041368966, %93
  %253 = sub i64 %252, 8578125776057193578
  %254 = or i64 %131, -1671319756328288056
  %255 = xor i64 %131, -1
  %256 = and i64 -1671319756328288056, %255
  %257 = add i64 %256, %131
  %258 = xor i64 %248, 4253353088157266653
  %259 = xor i64 %258, %253
  %260 = xor i64 %259, %257
  %261 = xor i64 %260, %251
  %262 = xor i64 %261, %254
  %263 = xor i64 %262, %250
  %264 = and i64 %131, -594760142076460148
  %265 = xor i64 %131, -1
  %266 = or i64 594760142076460147, %265
  %267 = xor i64 %266, -1
  %268 = and i64 %267, -1
  %269 = add i64 %91, 4500730429767445343
  %270 = sub i64 0, %91
  %271 = add i64 -4500730429767445343, %270
  %272 = sub i64 0, %271
  %273 = add i64 %133, 7823170815775827949
  %274 = xor i64 7823170815775827949, %133
  %275 = and i64 7823170815775827949, %133
  %276 = mul i64 2, %275
  %277 = add i64 %274, %276
  %278 = xor i64 -4947098600502798892, %273
  %279 = xor i64 %278, %277
  %280 = xor i64 %279, %272
  %281 = xor i64 %280, %264
  %282 = xor i64 %281, %269
  %283 = xor i64 %282, %268
  %284 = mul i64 %263, %283
  %285 = trunc i64 %284 to i8
  %286 = srem i8 %247, %285
  %287 = icmp eq i8 %286, 0
  %288 = mul i8 %216, %216
  %289 = sub i8 0, %288
  %290 = sub i8 0, %216
  %291 = add i8 %289, %290
  %292 = sub i8 0, %291
  %293 = srem i8 %292, 2
  %294 = icmp eq i8 %293, 0
  %295 = and i1 %287, %294
  %296 = add i64 %91, -3654561878216909294
  %297 = sub i64 0, %91
  %298 = add i64 3654561878216909294, %297
  %299 = sub i64 0, %298
  %300 = and i64 %133, -1360002594405948133
  %301 = xor i64 %133, -1
  %302 = xor i64 -1360002594405948133, %301
  %303 = and i64 %302, -1360002594405948133
  %304 = and i64 %133, -7786435868328068964
  %305 = or i64 7786435868328068963, %133
  %306 = sub i64 %305, 7786435868328068963
  %307 = xor i64 %303, %300
  %308 = xor i64 %307, %304
  %309 = xor i64 %308, %296
  %310 = xor i64 %309, %299
  %311 = xor i64 %310, -6493754247430999631
  %312 = xor i64 %311, %306
  %313 = sext i32 %dispatcher1 to i64
  %314 = add i64 %313, -5476837366589974234
  %315 = xor i64 -5476837366589974234, %313
  %316 = and i64 -5476837366589974234, %313
  %317 = mul i64 2, %316
  %318 = add i64 %315, %317
  %319 = and i64 %133, 3910430121759965556
  %320 = or i64 -3910430121759965557, %133
  %321 = sub i64 %320, -3910430121759965557
  %322 = xor i64 %321, %314
  %323 = xor i64 %322, %319
  %324 = xor i64 %323, %318
  %325 = xor i64 %324, -5664975034301910195
  %326 = mul i64 %312, %325
  %327 = trunc i64 %326 to i32
  %328 = select i1 %295, i32 %327, i32 388314370
  %329 = xor i32 %328, 63
  store i32 %329, i32* %39, align 4
  %330 = call i8** @bf3325468485390379012(i32* %39)
  %331 = load i8*, i8** %330, align 8
  indirectbr i8* %331, [label %loopEnd, label %EntryBasicBlockSplit]

332:                                              ; preds = %332, %loopStart
  %333 = srem i64 %0, 2
  %334 = icmp eq i64 %333, 0
  %335 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %336 = load i32, i32* %335, align 4
  %337 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %338 = load i32, i32* %337, align 4
  %339 = add i32 %336, %338
  %340 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %341 = load i32, i32* %340, align 4
  %342 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %343 = load i32, i32* %342, align 4
  %344 = srem i32 %341, %343
  %345 = select i1 %334, i32 %339, i32 %344
  store i32 %345, i32* %dispatcher, align 4
  %346 = load i8*, i8** %90, align 8
  %347 = load i8, i8* %346, align 1
  %348 = and i8 %347, 1
  %349 = and i64 %87, 5932049000351256711
  %350 = xor i64 %87, -1
  %351 = xor i64 5932049000351256711, %350
  %352 = and i64 %351, 5932049000351256711
  %353 = sext i32 %dispatcher1 to i64
  %354 = add i64 %353, -3972087203790119136
  %355 = sub i64 0, %353
  %356 = sub i64 -3972087203790119136, %355
  %357 = xor i64 %354, 6541073144294278423
  %358 = xor i64 %357, %356
  %359 = xor i64 %358, %352
  %360 = xor i64 %359, %349
  %361 = or i64 %89, 6606035495620821581
  %362 = and i64 6606035495620821581, %89
  %363 = xor i64 6606035495620821581, %89
  %364 = or i64 %362, %363
  %365 = or i64 %87, -7607378892800999559
  %366 = and i64 -7607378892800999559, %87
  %367 = xor i64 -7607378892800999559, %87
  %368 = or i64 %366, %367
  %369 = add i64 %87, -2045725662690821835
  %370 = and i64 -2045725662690821835, %87
  %371 = or i64 -2045725662690821835, %87
  %372 = add i64 %370, %371
  %373 = xor i64 %361, %372
  %374 = xor i64 %373, %364
  %375 = xor i64 %374, %369
  %376 = xor i64 %375, %368
  %377 = xor i64 %376, 0
  %378 = xor i64 %377, %365
  %379 = mul i64 %360, %378
  %380 = trunc i64 %379 to i8
  %381 = icmp eq i8 %348, %380
  %382 = mul i8 %347, %347
  %383 = add i8 %382, %347
  %384 = sext i32 %dispatcher1 to i64
  %385 = add i64 %384, -3278604871733233879
  %386 = and i64 -3278604871733233879, %384
  %387 = or i64 -3278604871733233879, %384
  %388 = add i64 %386, %387
  %389 = and i64 %0, -2623099954251477313
  %390 = xor i64 %0, -1
  %391 = or i64 2623099954251477312, %390
  %392 = xor i64 %391, -1
  %393 = and i64 %392, -1
  %394 = sext i32 %dispatcher1 to i64
  %395 = add i64 %394, -4544561697546089381
  %396 = add i64 5023389675749765820, %394
  %397 = sub i64 %396, -8878792700413696415
  %398 = xor i64 %393, %385
  %399 = xor i64 %398, %388
  %400 = xor i64 %399, %397
  %401 = xor i64 %400, 1300665556138822131
  %402 = xor i64 %401, %395
  %403 = xor i64 %402, %389
  %404 = add i64 %89, -6627212229110490658
  %405 = sub i64 0, %89
  %406 = sub i64 -6627212229110490658, %405
  %407 = sext i32 %dispatcher1 to i64
  %408 = add i64 %407, 2654279094670184591
  %409 = xor i64 2654279094670184591, %407
  %410 = and i64 2654279094670184591, %407
  %411 = mul i64 2, %410
  %412 = add i64 %409, %411
  %413 = xor i64 %412, 6756647782692332977
  %414 = xor i64 %413, %408
  %415 = xor i64 %414, %406
  %416 = xor i64 %415, %404
  %417 = mul i64 %403, %416
  %418 = trunc i64 %417 to i8
  %419 = mul i8 %383, %418
  %420 = srem i8 %419, 2
  %421 = or i64 %93, 5180761143256274158
  %422 = xor i64 %93, -1
  %423 = and i64 5180761143256274158, %422
  %424 = add i64 %423, %93
  %425 = and i64 %89, -4508603757942718646
  %426 = xor i64 %89, -1
  %427 = or i64 4508603757942718645, %426
  %428 = xor i64 %427, -1
  %429 = and i64 %428, -1
  %430 = sext i32 %dispatcher1 to i64
  %431 = or i64 %430, 6551824864576553767
  %432 = xor i64 %430, -1
  %433 = and i64 %432, -7189094284404135157
  %434 = and i64 %430, 7189094284404135156
  %435 = or i64 %433, %434
  %436 = xor i64 -4118551934503966676, %435
  %437 = xor i64 %430, -1
  %438 = or i64 -6551824864576553768, %437
  %439 = xor i64 %438, -1
  %440 = and i64 %439, -1
  %441 = or i64 %436, %440
  %442 = xor i64 %421, %424
  %443 = xor i64 %442, %425
  %444 = xor i64 %443, %441
  %445 = xor i64 %444, %429
  %446 = xor i64 %445, %431
  %447 = xor i64 %446, -1084624419787292375
  %448 = add i64 %85, 2268651013860971205
  %449 = add i64 424117485122211804, %85
  %450 = add i64 %449, 1844533528738759401
  %451 = and i64 %93, -7381906101861401946
  %452 = xor i64 %93, -1
  %453 = xor i64 -7381906101861401946, %452
  %454 = and i64 %453, -7381906101861401946
  %455 = add i64 %93, 173314870187157940
  %456 = sub i64 0, %93
  %457 = sub i64 173314870187157940, %456
  %458 = xor i64 %451, %454
  %459 = xor i64 %458, %455
  %460 = xor i64 %459, %450
  %461 = xor i64 %460, %448
  %462 = xor i64 %461, 0
  %463 = xor i64 %462, %457
  %464 = mul i64 %447, %463
  %465 = trunc i64 %464 to i8
  %466 = icmp eq i8 %420, %465
  %467 = or i1 %381, %466
  %468 = or i64 %93, -6115070466050070197
  %469 = xor i64 %93, -1
  %470 = and i64 %469, 8577889937602379639
  %471 = and i64 %93, -8577889937602379640
  %472 = or i64 %470, %471
  %473 = xor i64 -2582763000306493892, %472
  %474 = xor i64 %93, -1
  %475 = or i64 6115070466050070196, %474
  %476 = xor i64 %475, -1
  %477 = and i64 %476, -1
  %478 = or i64 %473, %477
  %479 = or i64 %91, 5434068499146588976
  %480 = xor i64 %91, -1
  %481 = and i64 5434068499146588976, %480
  %482 = add i64 %481, %91
  %483 = xor i64 %468, %478
  %484 = xor i64 %483, %479
  %485 = xor i64 %484, %482
  %486 = xor i64 %485, -7513907820806263589
  %487 = add i64 %95, -7128902939314492324
  %488 = sub i64 0, %95
  %489 = sub i64 -7128902939314492324, %488
  %490 = add i64 %131, -3066888026725637763
  %491 = add i64 97131508455802501, %131
  %492 = sub i64 %491, 3164019535181440264
  %493 = and i64 %87, -5918999794825017303
  %494 = or i64 5918999794825017302, %87
  %495 = sub i64 %494, 5918999794825017302
  %496 = xor i64 %495, %487
  %497 = xor i64 %496, %493
  %498 = xor i64 %497, %490
  %499 = xor i64 %498, %489
  %500 = xor i64 %499, 517128487571754406
  %501 = xor i64 %500, %492
  %502 = mul i64 %486, %501
  %503 = trunc i64 %502 to i32
  %504 = select i1 %467, i32 388314419, i32 %503
  %505 = xor i32 %504, -1
  %506 = and i32 %505, 1124259562
  %507 = and i32 %504, -1124259563
  %508 = or i32 %506, %507
  %509 = xor i32 %508, 1124259547
  store i32 %509, i32* %39, align 4
  %510 = call i8** @bf3325468485390379012(i32* %39)
  %511 = load i8*, i8** %510, align 8
  indirectbr i8* %511, [label %loopEnd, label %332]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  %512 = or i64 %87, 2016525003796456138
  %513 = xor i64 %87, -1
  %514 = and i64 %513, 4075598671703579445
  %515 = and i64 %87, -4075598671703579446
  %516 = or i64 %514, %515
  %517 = xor i64 2554470800049125887, %516
  %518 = xor i64 %87, -1
  %519 = or i64 -2016525003796456139, %518
  %520 = xor i64 %519, -1
  %521 = and i64 %520, -1
  %522 = or i64 %517, %521
  %523 = and i64 %0, -1348588147181660484
  %524 = or i64 1348588147181660483, %0
  %525 = sub i64 %524, 1348588147181660483
  %526 = or i64 %93, -8238228424733288526
  %527 = and i64 -8238228424733288526, %93
  %528 = xor i64 -8238228424733288526, %93
  %529 = or i64 %527, %528
  %530 = xor i64 %512, %523
  %531 = xor i64 %530, %529
  %532 = xor i64 %531, %522
  %533 = xor i64 %532, %526
  %534 = xor i64 %533, 4207371030580688435
  %535 = xor i64 %534, %525
  %536 = and i64 %0, -8424053471624670464
  %537 = or i64 8424053471624670463, %0
  %538 = sub i64 %537, 8424053471624670463
  %539 = and i64 %89, -5699301659753738206
  %540 = xor i64 %89, -1
  %541 = xor i64 -5699301659753738206, %540
  %542 = and i64 %541, -5699301659753738206
  %543 = add i64 %85, -143266884566708360
  %544 = sub i64 0, %85
  %545 = add i64 143266884566708360, %544
  %546 = sub i64 0, %545
  %547 = xor i64 %539, %546
  %548 = xor i64 %547, 0
  %549 = xor i64 %548, %542
  %550 = xor i64 %549, %543
  %551 = xor i64 %550, %538
  %552 = xor i64 %551, %536
  %553 = mul i64 %535, %552
  %554 = trunc i64 %553 to i1
  ret i1 %554

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %555 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %555, align 4
  %556 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %556, align 4
  %557 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %557, align 4
  %558 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %558, align 4
  %559 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %559, align 4
  %560 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %561 = load i32, i32* %560, align 4
  store i32 %561, i32* %dispatcher, align 4
  %562 = load i8*, i8** %86, align 8
  %563 = load i8, i8* %562, align 1
  %564 = xor i8 %563, -1
  %565 = or i8 %564, -2
  %566 = xor i8 %565, -1
  %567 = and i8 %566, -1
  %568 = icmp eq i8 %567, 1
  %569 = mul i8 %563, %563
  %570 = sub i8 0, %563
  %571 = sub i8 %569, %570
  %572 = srem i8 %571, 2
  %573 = icmp eq i8 %572, 0
  %574 = or i1 %568, %573
  %575 = sext i32 %dispatcher1 to i64
  %576 = or i64 %575, 1894347556141529302
  %577 = xor i64 %575, -1
  %578 = and i64 %577, 3302218116024307957
  %579 = and i64 %575, -3302218116024307958
  %580 = or i64 %578, %579
  %581 = xor i64 4006452085075535907, %580
  %582 = xor i64 %575, -1
  %583 = or i64 -1894347556141529303, %582
  %584 = xor i64 %583, -1
  %585 = and i64 %584, -1
  %586 = or i64 %581, %585
  %587 = sext i32 %dispatcher1 to i64
  %588 = or i64 %587, 1398699932309221135
  %589 = xor i64 %587, -1
  %590 = and i64 %589, -7905647731382527811
  %591 = and i64 %587, 7905647731382527810
  %592 = or i64 %590, %591
  %593 = xor i64 -9142217720485038158, %592
  %594 = xor i64 %587, -1
  %595 = or i64 -1398699932309221136, %594
  %596 = xor i64 %595, -1
  %597 = and i64 %596, -1
  %598 = or i64 %593, %597
  %599 = add i64 %0, 1274698589040128213
  %600 = add i64 3554124416599542973, %0
  %601 = sub i64 %600, 2279425827559414760
  %602 = xor i64 -3905796347674411795, %601
  %603 = xor i64 %602, %576
  %604 = xor i64 %603, %588
  %605 = xor i64 %604, %598
  %606 = xor i64 %605, %599
  %607 = xor i64 %606, %586
  %608 = add i64 %131, -204689907436627720
  %609 = xor i64 -204689907436627720, %131
  %610 = and i64 -204689907436627720, %131
  %611 = mul i64 2, %610
  %612 = add i64 %609, %611
  %613 = sext i32 %dispatcher1 to i64
  %614 = and i64 %613, 8509983332154346793
  %615 = xor i64 %613, -1
  %616 = or i64 -8509983332154346794, %615
  %617 = xor i64 %616, -1
  %618 = and i64 %617, -1
  %619 = xor i64 %618, %614
  %620 = xor i64 %619, %612
  %621 = xor i64 %620, -386035315456008303
  %622 = xor i64 %621, %608
  %623 = mul i64 %607, %622
  %624 = trunc i64 %623 to i32
  %625 = select i1 %574, i32 %624, i32 388314419
  %626 = xor i32 %625, 1816803020
  %627 = xor i32 %626, 1816803010
  store i32 %627, i32* %39, align 4
  %628 = call i8** @bf3325468485390379012(i32* %39)
  %629 = load i8*, i8** %628, align 8
  indirectbr i8* %629, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %630 = load i8*, i8** %134, align 8
  %631 = load i8, i8* %630, align 1
  %632 = and i8 %631, 1
  %633 = add i64 %133, 3911729819234084335
  %634 = xor i64 3911729819234084335, %133
  %635 = and i64 3911729819234084335, %133
  %636 = mul i64 2, %635
  %637 = add i64 %634, %636
  %638 = or i64 %95, 8527782151310484453
  %639 = xor i64 %95, -1
  %640 = and i64 %639, -3167922213377332663
  %641 = and i64 %95, 3167922213377332662
  %642 = or i64 %640, %641
  %643 = xor i64 -6750470161962890836, %642
  %644 = xor i64 %95, -1
  %645 = or i64 -8527782151310484454, %644
  %646 = xor i64 %645, -1
  %647 = and i64 %646, -1
  %648 = or i64 %643, %647
  %649 = add i64 %89, 6503606592941479970
  %650 = and i64 6503606592941479970, %89
  %651 = or i64 6503606592941479970, %89
  %652 = add i64 %650, %651
  %653 = xor i64 %637, %638
  %654 = xor i64 %653, -3389844235779106007
  %655 = xor i64 %654, %652
  %656 = xor i64 %655, %633
  %657 = xor i64 %656, %649
  %658 = xor i64 %657, %648
  %659 = or i64 %91, -7060745904500274908
  %660 = and i64 -7060745904500274908, %91
  %661 = xor i64 -7060745904500274908, %91
  %662 = or i64 %660, %661
  %663 = and i64 %91, -368848977346540407
  %664 = xor i64 %91, -1
  %665 = or i64 368848977346540406, %664
  %666 = xor i64 %665, -1
  %667 = and i64 %666, -1
  %668 = xor i64 0, %667
  %669 = xor i64 %668, %663
  %670 = xor i64 %669, %662
  %671 = xor i64 %670, %659
  %672 = mul i64 %658, %671
  %673 = trunc i64 %672 to i8
  %674 = icmp eq i8 %632, %673
  %675 = mul i8 %631, %631
  %676 = add i8 %675, -7
  %677 = add i8 %676, %631
  %678 = sub i8 %677, -7
  %679 = mul i8 %678, 3
  %680 = srem i8 %679, 2
  %681 = icmp eq i8 %680, 0
  %682 = or i1 %674, %681
  %683 = sext i32 %dispatcher1 to i64
  %684 = add i64 %683, 1787882552733557042
  %685 = add i64 -4615800152386606548, %683
  %686 = sub i64 %685, -6403682705120163590
  %687 = or i64 %131, 7551416430313904155
  %688 = and i64 7551416430313904155, %131
  %689 = xor i64 7551416430313904155, %131
  %690 = or i64 %688, %689
  %691 = add i64 %89, 5522386778262987848
  %692 = sub i64 0, %89
  %693 = add i64 -5522386778262987848, %692
  %694 = sub i64 0, %693
  %695 = xor i64 %686, -5078076057083246879
  %696 = xor i64 %695, %690
  %697 = xor i64 %696, %687
  %698 = xor i64 %697, %684
  %699 = xor i64 %698, %691
  %700 = xor i64 %699, %694
  %701 = or i64 %85, -8831638210234959838
  %702 = xor i64 %85, -1
  %703 = and i64 %702, 7767597507786932609
  %704 = and i64 %85, -7767597507786932610
  %705 = or i64 %703, %704
  %706 = xor i64 -1250950587106444893, %705
  %707 = xor i64 %85, -1
  %708 = or i64 8831638210234959837, %707
  %709 = xor i64 %708, -1
  %710 = and i64 %709, -1
  %711 = or i64 %706, %710
  %712 = add i64 %85, 2519925487700405237
  %713 = sub i64 0, %85
  %714 = sub i64 2519925487700405237, %713
  %715 = xor i64 4370084030900517701, %701
  %716 = xor i64 %715, %711
  %717 = xor i64 %716, %712
  %718 = xor i64 %717, %714
  %719 = mul i64 %700, %718
  %720 = trunc i64 %719 to i32
  %721 = select i1 %682, i32 %720, i32 388314370
  %722 = xor i32 %721, -1
  %723 = and i32 %722, 167
  %724 = and i32 %721, -168
  %725 = or i32 %723, %724
  store i32 %725, i32* %39, align 4
  %726 = call i8** @bf3325468485390379012(i32* %39)
  %727 = load i8*, i8** %726, align 8
  indirectbr i8* %727, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %332, %EntryBasicBlockSplit
  %728 = load i8*, i8** %132, align 8
  %729 = load i8, i8* %728, align 1
  %730 = mul i8 %729, 2
  %731 = mul i8 %729, 2
  %732 = or i64 %89, -8406165143267479931
  %733 = and i64 -8406165143267479931, %89
  %734 = xor i64 -8406165143267479931, %89
  %735 = or i64 %733, %734
  %736 = or i64 %95, 6901073697286227197
  %737 = xor i64 %95, -1
  %738 = and i64 %737, 4431715546595612298
  %739 = and i64 %95, -4431715546595612299
  %740 = or i64 %738, %739
  %741 = xor i64 7081088227978891895, %740
  %742 = xor i64 %95, -1
  %743 = or i64 -6901073697286227198, %742
  %744 = xor i64 %743, -1
  %745 = and i64 %744, -1
  %746 = or i64 %741, %745
  %747 = xor i64 -3612206260800855483, %746
  %748 = xor i64 %747, %736
  %749 = xor i64 %748, %732
  %750 = xor i64 %749, %735
  %751 = or i64 %87, 4650467616771867504
  %752 = xor i64 %87, -1
  %753 = and i64 4650467616771867504, %752
  %754 = add i64 %753, %87
  %755 = or i64 %87, 6053989416348232380
  %756 = xor i64 %87, -1
  %757 = and i64 6053989416348232380, %756
  %758 = add i64 %757, %87
  %759 = sext i32 %dispatcher1 to i64
  %760 = add i64 %759, 2808053750562289406
  %761 = add i64 -2485545582371753417, %759
  %762 = sub i64 %761, -5293599332934042823
  %763 = xor i64 %758, %755
  %764 = xor i64 %763, 3921073372114305306
  %765 = xor i64 %764, %760
  %766 = xor i64 %765, %754
  %767 = xor i64 %766, %751
  %768 = xor i64 %767, %762
  %769 = mul i64 %750, %768
  %770 = trunc i64 %769 to i8
  %771 = and i8 %770, %731
  %772 = add i64 %85, -8206557640250053151
  %773 = xor i64 -8206557640250053151, %85
  %774 = and i64 -8206557640250053151, %85
  %775 = mul i64 2, %774
  %776 = add i64 %773, %775
  %777 = and i64 %89, 2869962592202095963
  %778 = xor i64 %89, -1
  %779 = xor i64 2869962592202095963, %778
  %780 = and i64 %779, 2869962592202095963
  %781 = or i64 %133, 7149371636290229547
  %782 = xor i64 %133, -1
  %783 = and i64 %782, -6904453834482680830
  %784 = and i64 %133, 6904453834482680829
  %785 = or i64 %783, %784
  %786 = xor i64 -4388238530501514967, %785
  %787 = xor i64 %133, -1
  %788 = or i64 -7149371636290229548, %787
  %789 = xor i64 %788, -1
  %790 = and i64 %789, -1
  %791 = or i64 %786, %790
  %792 = xor i64 %791, -1347102402813800149
  %793 = xor i64 %792, %776
  %794 = xor i64 %793, %772
  %795 = xor i64 %794, %777
  %796 = xor i64 %795, %780
  %797 = xor i64 %796, %781
  %798 = or i64 %87, 5091002414447534040
  %799 = xor i64 %87, -1
  %800 = and i64 %799, -2461871788493839062
  %801 = and i64 %87, 2461871788493839061
  %802 = or i64 %800, %801
  %803 = xor i64 -7245320802360755470, %802
  %804 = xor i64 %87, -1
  %805 = or i64 -5091002414447534041, %804
  %806 = xor i64 %805, -1
  %807 = and i64 %806, -1
  %808 = or i64 %803, %807
  %809 = or i64 %0, 3766822675623135375
  %810 = xor i64 %0, -1
  %811 = and i64 3766822675623135375, %810
  %812 = add i64 %811, %0
  %813 = or i64 %89, 3602954024234784042
  %814 = xor i64 %89, -1
  %815 = and i64 3602954024234784042, %814
  %816 = add i64 %815, %89
  %817 = xor i64 %809, %798
  %818 = xor i64 %817, %808
  %819 = xor i64 %818, -3636131254167287034
  %820 = xor i64 %819, %812
  %821 = xor i64 %820, %816
  %822 = xor i64 %821, %813
  %823 = mul i64 %797, %822
  %824 = trunc i64 %823 to i8
  %825 = or i8 %824, %731
  %826 = add i8 %771, %825
  %827 = mul i8 %730, %826
  %828 = srem i8 %827, 4
  %829 = icmp eq i8 %828, 0
  %830 = mul i8 %729, %729
  %831 = mul i8 %830, %729
  %832 = sub i8 0, %729
  %833 = sub i8 %831, %832
  %834 = srem i8 %833, 2
  %835 = sext i32 %dispatcher1 to i64
  %836 = or i64 %835, 1022671871737713362
  %837 = and i64 1022671871737713362, %835
  %838 = xor i64 1022671871737713362, %835
  %839 = or i64 %837, %838
  %840 = or i64 %131, 1751981419248914929
  %841 = xor i64 %131, -1
  %842 = and i64 %841, -8718686707952131417
  %843 = and i64 %131, 8718686707952131416
  %844 = or i64 %842, %843
  %845 = xor i64 -6966706401100074154, %844
  %846 = xor i64 %131, -1
  %847 = or i64 -1751981419248914930, %846
  %848 = xor i64 %847, -1
  %849 = and i64 %848, -1
  %850 = or i64 %845, %849
  %851 = and i64 %89, 921868499112523556
  %852 = xor i64 %89, -1
  %853 = or i64 -921868499112523557, %852
  %854 = xor i64 %853, -1
  %855 = and i64 %854, -1
  %856 = xor i64 %839, %850
  %857 = xor i64 %856, %855
  %858 = xor i64 %857, %836
  %859 = xor i64 %858, %840
  %860 = xor i64 %859, %851
  %861 = xor i64 %860, 6639634121308478073
  %862 = or i64 %133, 2647431141049592294
  %863 = xor i64 %133, -1
  %864 = and i64 2647431141049592294, %863
  %865 = add i64 %864, %133
  %866 = add i64 %89, -5104928899737329683
  %867 = add i64 -4042964670117870018, %89
  %868 = add i64 %867, -1061964229619459665
  %869 = xor i64 %868, %866
  %870 = xor i64 %869, %865
  %871 = xor i64 %870, %862
  %872 = xor i64 %871, 0
  %873 = mul i64 %861, %872
  %874 = trunc i64 %873 to i8
  %875 = icmp eq i8 %834, %874
  %876 = and i1 %829, %875
  %877 = select i1 %876, i32 388314533, i32 388314429
  %878 = xor i32 %877, 152
  store i32 %878, i32* %39, align 4
  %879 = call i8** @bf3325468485390379012(i32* %39)
  %880 = load i8*, i8** %879, align 8
  indirectbr i8* %880, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render..split.6(i64 %0, i64* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314368)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@render..split.6, %.exitStub), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314423)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@render..split.6, %.split), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314441)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@render..split.6, %EntryBasicBlockSplit), i8** %7, align 8
  %8 = and i64 %0, -5334974484873067946
  %9 = xor i64 %0, -1
  %10 = or i64 5334974484873067945, %9
  %11 = xor i64 %10, -1
  %12 = and i64 %11, -1
  %13 = or i64 %0, -4007369795158532919
  %14 = xor i64 %0, -1
  %15 = and i64 %14, -3035946812446025799
  %16 = and i64 %0, 3035946812446025798
  %17 = or i64 %15, %16
  %18 = xor i64 2142816301484002160, %17
  %19 = xor i64 %0, -1
  %20 = or i64 4007369795158532918, %19
  %21 = xor i64 %20, -1
  %22 = and i64 %21, -1
  %23 = or i64 %18, %22
  %24 = add i64 %0, -4976598212709423179
  %25 = xor i64 -4976598212709423179, %0
  %26 = and i64 -4976598212709423179, %0
  %27 = mul i64 2, %26
  %28 = add i64 %25, %27
  %29 = xor i64 -4198770224058056389, %13
  %30 = xor i64 %29, %28
  %31 = xor i64 %30, %8
  %32 = xor i64 %31, %23
  %33 = xor i64 %32, %24
  %34 = xor i64 %33, %12
  %35 = add i64 %0, -8244158550852400937
  %36 = and i64 -8244158550852400937, %0
  %37 = or i64 -8244158550852400937, %0
  %38 = add i64 %36, %37
  %39 = or i64 %0, 1949651972710987893
  %40 = xor i64 %0, -1
  %41 = and i64 %40, -3607298227541078922
  %42 = and i64 %0, 3607298227541078921
  %43 = or i64 %41, %42
  %44 = xor i64 -2954709366527790077, %43
  %45 = xor i64 %0, -1
  %46 = or i64 -1949651972710987894, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = or i64 %44, %48
  %50 = xor i64 %38, %39
  %51 = xor i64 %50, %35
  %52 = xor i64 %51, %49
  %53 = xor i64 %52, 5855461524260943415
  %54 = mul i64 %34, %53
  %55 = call i64 @h9549842938191327224(i64 %54)
  %56 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %55
  store i8* blockaddress(@render..split.6, %.exitStub1), i8** %56, align 8
  %57 = call i64 @h9549842938191327224(i64 388314428)
  %58 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %57
  store i8* blockaddress(@render..split.6, %BogusBasciBlock), i8** %58, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %59 = or i64 %0, -4085960430468159145
  %60 = and i64 -4085960430468159145, %0
  %61 = xor i64 -4085960430468159145, %0
  %62 = or i64 %60, %61
  %63 = add i64 %0, 615354553305287223
  %64 = xor i64 615354553305287223, %0
  %65 = and i64 615354553305287223, %0
  %66 = mul i64 2, %65
  %67 = add i64 %64, %66
  %68 = add i64 %0, -4940411255916291272
  %69 = sub i64 0, %0
  %70 = add i64 4940411255916291272, %69
  %71 = sub i64 0, %70
  %72 = xor i64 %67, %63
  %73 = xor i64 %72, %71
  %74 = xor i64 %73, %62
  %75 = xor i64 %74, %59
  %76 = xor i64 %75, 4462323472183804679
  %77 = xor i64 %76, %68
  %78 = add i64 %0, -1568635898635432014
  %79 = add i64 9059048621070176398, %0
  %80 = add i64 %79, 7819059554003943204
  %81 = or i64 %0, -2492862101046249878
  %82 = xor i64 %0, -1
  %83 = and i64 %82, 7284541978201824734
  %84 = and i64 %0, -7284541978201824735
  %85 = or i64 %83, %84
  %86 = xor i64 -5156490224729150540, %85
  %87 = xor i64 %0, -1
  %88 = or i64 2492862101046249877, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = or i64 %86, %90
  %92 = xor i64 7563705336128125623, %78
  %93 = xor i64 %92, %81
  %94 = xor i64 %93, %91
  %95 = xor i64 %94, %80
  %96 = mul i64 %77, %95
  %97 = trunc i64 %96 to i32
  %.reg2mem3 = alloca i8**, i32 %97, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %98 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split.6, %BogusBasciBlock), i8** %98, align 8
  %99 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %99, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render..split.6, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %100 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %100, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render..split.6, %.split), i8** %.reload5, align 8
  %101 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %101, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render..split.6, %.exitStub), i8** %.reload8, align 8
  %102 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %102, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render..split.6, %.exitStub1), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %103 = load i8*, i8** %.reload, align 8
  indirectbr i8* %103, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %104 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split.6, %.exitStub1), i8** %104, align 8
  %105 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render..split.6, %.split), i8** %105, align 8
  %106 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render..split.6, %EntryBasicBlockSplit), i8** %106, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %107 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %107, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %108 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %108, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

.split:                                           ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %109 = srem i64 %0, 2
  store i64 %109, i64* %.out, align 8
  %110 = srem i64 %0, 2
  %111 = icmp eq i64 %110, 0
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %112 = select i1 %111, i8** %.reload7, i8** %.reload10
  %113 = load i8*, i8** %112, align 8
  indirectbr i8* %113, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.7(i64 %.reload61, i1* %.out, i64* %.out1, i64* %.out2, i64* %.out3, i64* %.out4, i64* %.out5, i64* %.out6, i64* %.out7) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314400)
  %2 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5528410670712074847, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.7, %.exitStub), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314407)
  %4 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5528410670712074847, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.7, %EntryBasicBlockSplit), i8** %4, align 8
  %5 = or i64 %.reload61, 6308571736817542517
  %6 = and i64 6308571736817542517, %.reload61
  %7 = xor i64 6308571736817542517, %.reload61
  %8 = or i64 %6, %7
  %9 = and i64 %.reload61, 8287816364247938584
  %10 = or i64 -8287816364247938585, %.reload61
  %11 = sub i64 %10, -8287816364247938585
  %12 = xor i64 %8, %9
  %13 = xor i64 %12, %5
  %14 = xor i64 %13, 2516740502105432565
  %15 = xor i64 %14, %11
  %16 = add i64 %.reload61, -364239122799973937
  %17 = add i64 -8092622932605977085, %.reload61
  %18 = sub i64 %17, -7728383809806003148
  %19 = or i64 %.reload61, 3818075116821122371
  %20 = xor i64 %.reload61, -1
  %21 = and i64 3818075116821122371, %20
  %22 = add i64 %21, %.reload61
  %23 = or i64 %.reload61, 7455749966026219648
  %24 = and i64 7455749966026219648, %.reload61
  %25 = xor i64 7455749966026219648, %.reload61
  %26 = or i64 %24, %25
  %27 = xor i64 %16, %19
  %28 = xor i64 %27, %22
  %29 = xor i64 %28, %26
  %30 = xor i64 %29, %23
  %31 = xor i64 %30, %18
  %32 = xor i64 %31, 5185010559987308657
  %33 = mul i64 %15, %32
  %34 = call i64 @h9549842938191327224(i64 %33)
  %35 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5528410670712074847, i32 0, i64 %34
  store i8* blockaddress(@render.extracted.7, %codeRepl), i8** %35, align 8
  %36 = call i64 @h9549842938191327224(i64 388314406)
  %37 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5528410670712074847, i32 0, i64 %36
  store i8* blockaddress(@render.extracted.7, %"2"), i8** %37, align 8
  %38 = call i64 @h9549842938191327224(i64 388314401)
  %39 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5528410670712074847, i32 0, i64 %38
  store i8* blockaddress(@render.extracted.7, %BogusBasciBlock), i8** %39, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %40 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.7, %BogusBasciBlock), i8** %40, align 8
  %41 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %41, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.7, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %42 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %42, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.7, %"2"), i8** %.reload5, align 8
  %43 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %43, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.7, %codeRepl), i8** %.reload8, align 8
  %44 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %44, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.7, %.exitStub), i8** %.reload11, align 8
  %45 = alloca i64, align 8
  %46 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %47 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7838084727187403814, i32 0, i64 %46
  store i8** %47, i8*** %.reg2mem12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %48 = load i8*, i8** %.reload, align 8
  indirectbr i8* %48, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %49 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.7, %"2"), i8** %49, align 8
  %50 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.7, %EntryBasicBlockSplit), i8** %50, align 8
  %51 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.7, %.exitStub), i8** %51, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %52 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %52, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  store i8* bitcast (void (i64*)* @render.extracted.7.extracted to i8*), i8** %.reload13, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %53 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %53, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %54 = icmp eq i64 %.reload61, 0
  store i1 %54, i1* %.out, align 1
  %55 = add i64 %38, 2130712237393200527
  %56 = xor i64 2130712237393200527, %38
  %57 = and i64 2130712237393200527, %38
  %58 = mul i64 2, %57
  %59 = add i64 %56, %58
  %60 = or i64 %34, 6671390793651993762
  %61 = xor i64 %34, -1
  %62 = and i64 %61, 2071446645855626249
  %63 = and i64 %34, -2071446645855626250
  %64 = or i64 %62, %63
  %65 = xor i64 4623731354404001963, %64
  %66 = xor i64 %34, -1
  %67 = or i64 -6671390793651993763, %66
  %68 = xor i64 %67, -1
  %69 = and i64 %68, -1
  %70 = or i64 %65, %69
  %71 = xor i64 %55, %70
  %72 = xor i64 %71, %59
  %73 = xor i64 %72, 6783829135737078239
  %74 = xor i64 %73, %60
  %75 = and i64 %34, 741043197850628756
  %76 = xor i64 %34, -1
  %77 = or i64 -741043197850628757, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = and i64 %.reload61, 1855455856414446044
  %81 = xor i64 %.reload61, -1
  %82 = xor i64 1855455856414446044, %81
  %83 = and i64 %82, 1855455856414446044
  %84 = xor i64 %79, %83
  %85 = xor i64 %84, 4997345903517320160
  %86 = xor i64 %85, %75
  %87 = xor i64 %86, %80
  %88 = mul i64 %74, %87
  %89 = add i64 83, %88
  store i64 %89, i64* %.out1, align 8
  %90 = add i64 -8956452529982808847, 8956452529982808835
  store i64 %90, i64* %.out2, align 8
  %91 = sub i64 78, 38
  store i64 %91, i64* %.out3, align 8
  %92 = add i64 37, 32
  store i64 %92, i64* %.out4, align 8
  %93 = mul i64 91, 89
  store i64 %93, i64* %.out5, align 8
  %94 = add i64 65, 44
  store i64 %94, i64* %.out6, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %95 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %95, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %45, align 8
  %96 = call i8** @lk1658832481597702668(i64* %45)
  %97 = load i8*, i8** %96, align 8
  %98 = bitcast i8* %97 to void (i64*)*
  call void %98(i64* %.out7)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %99 = load i8*, i8** %.reload10, align 8
  indirectbr i8* %99, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.extracted(i64 %0, i64* %.out1, i64 %1, i64* %.out2, i64* %.out3, i64* %.out4) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314426)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.extracted, %.exitStub5.exitStub), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314390)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.extracted, %.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314538)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.extracted, %"2"), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314413)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314440)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@render.extracted.extracted, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.extracted, %BogusBasciBlock), i8** %13, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %14, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %15, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.extracted, %"2"), i8** %.reload5, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %16, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %17, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.extracted, %.exitStub5.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %18 = load i8*, i8** %.reload, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %19 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.extracted, %.exitStub.exitStub), i8** %19, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.extracted, %.exitStub5.exitStub), i8** %20, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.extracted, %"2"), i8** %21, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %22 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %22, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %23 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %23, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 %0, i64* %.out1, align 8
  %24 = mul i64 %1, 2
  %25 = add i64 2, %24
  %26 = mul i64 %0, %25
  store i64 %26, i64* %.out2, align 8
  %27 = srem i64 %26, 4
  store i64 %27, i64* %.out3, align 8
  %28 = icmp eq i64 %27, 0
  %29 = mul i64 %1, %1
  %30 = sub i64 %29, -1505361259912162604
  %31 = add i64 %30, %1
  %32 = add i64 %31, -1505361259912162604
  %33 = srem i64 %32, 2
  store i64 %33, i64* %.out4, align 8
  %34 = add i64 %7, -5361615160066661607
  %35 = add i64 -7891753381754840329, %7
  %36 = sub i64 %35, -2530138221688178722
  %37 = or i64 %1, -4814275816570992714
  %38 = xor i64 %1, -1
  %39 = and i64 %38, 7125276355025259903
  %40 = and i64 %1, -7125276355025259904
  %41 = or i64 %39, %40
  %42 = xor i64 -2318702136645580087, %41
  %43 = xor i64 %1, -1
  %44 = or i64 4814275816570992713, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = xor i64 %36, -8366907205404085347
  %49 = xor i64 %48, %37
  %50 = xor i64 %49, %47
  %51 = xor i64 %50, %34
  %52 = add i64 %3, -1366231993190803685
  %53 = sub i64 0, %3
  %54 = sub i64 -1366231993190803685, %53
  %55 = or i64 %0, -3966484394463853946
  %56 = xor i64 %0, -1
  %57 = and i64 %56, -9153184581101402149
  %58 = and i64 %0, 9153184581101402148
  %59 = or i64 %57, %58
  %60 = xor i64 5191925152698615133, %59
  %61 = xor i64 %0, -1
  %62 = or i64 3966484394463853945, %61
  %63 = xor i64 %62, -1
  %64 = and i64 %63, -1
  %65 = or i64 %60, %64
  %66 = or i64 %11, -2066571887589885366
  %67 = and i64 -2066571887589885366, %11
  %68 = xor i64 -2066571887589885366, %11
  %69 = or i64 %67, %68
  %70 = xor i64 %65, %69
  %71 = xor i64 %70, %52
  %72 = xor i64 %71, %66
  %73 = xor i64 %72, %55
  %74 = xor i64 %73, 0
  %75 = xor i64 %74, %54
  %76 = mul i64 %51, %75
  %77 = icmp eq i64 %33, %76
  %78 = and i1 %28, %77
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %79 = select i1 %78, i8** %.reload7, i8** %.reload10
  %80 = load i8*, i8** %79, align 8
  indirectbr i8* %80, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub5.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.1.extracted(i8 %.reload8, i32* %.out, i64 %.reload9, i64* %.out1, i1* %.out2, i64 %0, i64 %.reload10, i1* %.out3) #1 {
entry:
  %1 = add i64 %.reload10, -8323081941148714449
  %2 = xor i64 -8323081941148714449, %.reload10
  %3 = and i64 -8323081941148714449, %.reload10
  %4 = mul i64 2, %3
  %5 = add i64 %2, %4
  %6 = or i64 %.reload9, -3842899340349410486
  %7 = xor i64 %.reload9, -1
  %8 = and i64 -3842899340349410486, %7
  %9 = add i64 %8, %.reload9
  %10 = add i64 %0, 2495540339008412321
  %11 = and i64 2495540339008412321, %0
  %12 = or i64 2495540339008412321, %0
  %13 = add i64 %11, %12
  %14 = xor i64 7792306060749004003, %1
  %15 = xor i64 %14, %10
  %16 = xor i64 %15, %5
  %17 = xor i64 %16, %6
  %18 = xor i64 %17, %13
  %19 = xor i64 %18, %9
  %20 = sext i8 %.reload8 to i64
  %21 = and i64 %20, 3639664214772046928
  %22 = xor i64 %20, -1
  %23 = xor i64 3639664214772046928, %22
  %24 = and i64 %23, 3639664214772046928
  %25 = and i64 %.reload9, 3071923188274623132
  %26 = xor i64 %.reload9, -1
  %27 = or i64 -3071923188274623133, %26
  %28 = xor i64 %27, -1
  %29 = and i64 %28, -1
  %30 = xor i64 %25, %29
  %31 = xor i64 %30, -1820040933571376949
  %32 = xor i64 %31, %21
  %33 = xor i64 %32, %24
  %34 = mul i64 %19, %33
  %35 = trunc i64 %34 to i32
  %36 = alloca i32, i32 %35, align 4
  %37 = call i64 @h9549842938191327224(i64 388314398)
  %38 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %37
  store i8* blockaddress(@render.extracted.1.extracted, %.exitStub.exitStub), i8** %38, align 8
  %39 = sext i8 %.reload8 to i64
  %40 = or i64 %39, -1451311962145631327
  %41 = xor i64 %39, -1
  %42 = and i64 -1451311962145631327, %41
  %43 = add i64 %42, %39
  %44 = or i64 %.reload10, -226447607494927186
  %45 = xor i64 %.reload10, -1
  %46 = and i64 -226447607494927186, %45
  %47 = add i64 %46, %.reload10
  %48 = xor i64 %47, %44
  %49 = xor i64 %48, 2665912051048254683
  %50 = xor i64 %49, %43
  %51 = xor i64 %50, %40
  %52 = or i64 %.reload9, 5790805431636566697
  %53 = xor i64 %.reload9, -1
  %54 = and i64 5790805431636566697, %53
  %55 = add i64 %54, %.reload9
  %56 = and i64 %.reload10, 8222373477512937920
  %57 = or i64 -8222373477512937921, %.reload10
  %58 = sub i64 %57, -8222373477512937921
  %59 = xor i64 %56, %55
  %60 = xor i64 %59, %52
  %61 = xor i64 %60, -5934822738525917435
  %62 = xor i64 %61, %58
  %63 = mul i64 %51, %62
  %64 = call i64 @h9549842938191327224(i64 %63)
  %65 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %64
  store i8* blockaddress(@render.extracted.1.extracted, %.exitStub4.exitStub), i8** %65, align 8
  %66 = call i64 @h9549842938191327224(i64 388314396)
  %67 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %66
  store i8* blockaddress(@render.extracted.1.extracted, %"2"), i8** %67, align 8
  %68 = call i64 @h9549842938191327224(i64 388314440)
  %69 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %68
  store i8* blockaddress(@render.extracted.1.extracted, %EntryBasicBlockSplit), i8** %69, align 8
  %70 = sext i8 %.reload8 to i64
  %71 = and i64 %70, -8076301274729724433
  %72 = xor i64 %70, -1
  %73 = or i64 8076301274729724432, %72
  %74 = xor i64 %73, -1
  %75 = and i64 %74, -1
  %76 = add i64 %0, -4490903344187862204
  %77 = sub i64 0, %0
  %78 = add i64 4490903344187862204, %77
  %79 = sub i64 0, %78
  %80 = sext i8 %.reload8 to i64
  %81 = add i64 %80, -8855087081795502293
  %82 = xor i64 -8855087081795502293, %80
  %83 = and i64 -8855087081795502293, %80
  %84 = mul i64 2, %83
  %85 = add i64 %82, %84
  %86 = xor i64 %81, %85
  %87 = xor i64 %86, %75
  %88 = xor i64 %87, %76
  %89 = xor i64 %88, 6775856818315499715
  %90 = xor i64 %89, %71
  %91 = xor i64 %90, %79
  %92 = or i64 %.reload9, -3900375720775683022
  %93 = xor i64 %.reload9, -1
  %94 = and i64 %93, 6539808037329457616
  %95 = and i64 %.reload9, -6539808037329457617
  %96 = or i64 %94, %95
  %97 = xor i64 -7846110368301636126, %96
  %98 = xor i64 %.reload9, -1
  %99 = or i64 3900375720775683021, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = or i64 %97, %101
  %103 = add i64 %.reload9, -6927266487700874921
  %104 = sub i64 0, %.reload9
  %105 = add i64 6927266487700874921, %104
  %106 = sub i64 0, %105
  %107 = xor i64 %102, %92
  %108 = xor i64 %107, 3322602664204511617
  %109 = xor i64 %108, %106
  %110 = xor i64 %109, %103
  %111 = mul i64 %91, %110
  %112 = call i64 @h9549842938191327224(i64 %111)
  %113 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %112
  store i8* blockaddress(@render.extracted.1.extracted, %BogusBasciBlock), i8** %113, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %114 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.1.extracted, %BogusBasciBlock), i8** %114, align 8
  %115 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %115, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.1.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %116 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %116, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.1.extracted, %"2"), i8** %.reload5, align 8
  %117 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %117, i8*** %.reg2mem6, align 8
  %.reload11 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.1.extracted, %.exitStub.exitStub), i8** %.reload11, align 8
  %118 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %118, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@render.extracted.1.extracted, %.exitStub4.exitStub), i8** %.reload14, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %119 = load i8*, i8** %.reload, align 8
  indirectbr i8* %119, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %120 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.1.extracted, %EntryBasicBlockSplit), i8** %120, align 8
  %121 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.1.extracted, %.exitStub4.exitStub), i8** %121, align 8
  %122 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.1.extracted, %BogusBasciBlock), i8** %122, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %123 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %123, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %124 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %124, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %125 = add i64 107, 6
  %126 = sext i8 %.reload8 to i32
  store i32 %126, i32* %.out, align 4
  %127 = sdiv i64 30, 96
  %128 = srem i64 %.reload9, 2
  store i64 %128, i64* %.out1, align 8
  %129 = add i64 -8380005603240895628, 8380005603240895817
  %130 = icmp eq i64 %128, 0
  store i1 %130, i1* %.out2, align 1
  %131 = mul i64 40, 53
  %132 = and i64 %68, -6755095987494047536
  %133 = xor i64 %68, -1
  %134 = xor i64 -6755095987494047536, %133
  %135 = and i64 %134, -6755095987494047536
  %136 = add i64 %112, -6542903973703410357
  %137 = sub i64 0, %112
  %138 = add i64 6542903973703410357, %137
  %139 = sub i64 0, %138
  %140 = xor i64 %132, %136
  %141 = xor i64 %140, %139
  %142 = xor i64 %141, %135
  %143 = xor i64 %142, 8599615050491376633
  %144 = or i64 %112, -262836275627803096
  %145 = xor i64 %112, -1
  %146 = and i64 -262836275627803096, %145
  %147 = add i64 %146, %112
  %148 = add i64 %112, -4563529785911781579
  %149 = add i64 6313292450441439566, %112
  %150 = add i64 %149, 7569921837356330471
  %151 = add i64 %.reload10, 1175427318868698424
  %152 = add i64 72722466203065656, %.reload10
  %153 = sub i64 %152, -1102704852665632768
  %154 = xor i64 %147, %153
  %155 = xor i64 %154, %148
  %156 = xor i64 %155, %151
  %157 = xor i64 %156, %144
  %158 = xor i64 %157, 5687910289054275437
  %159 = xor i64 %158, %150
  %160 = mul i64 %143, %159
  %161 = mul i64 8, %160
  %162 = and i64 %68, -1525416169319885211
  %163 = or i64 1525416169319885210, %68
  %164 = sub i64 %163, 1525416169319885210
  %165 = add i64 %112, -6637875038547567879
  %166 = sub i64 0, %112
  %167 = sub i64 -6637875038547567879, %166
  %168 = add i64 %64, 1242214301899993472
  %169 = add i64 -5139897392056517468, %64
  %170 = sub i64 %169, -6382111693956510940
  %171 = xor i64 %165, %162
  %172 = xor i64 %171, %164
  %173 = xor i64 %172, %167
  %174 = xor i64 %173, -2385132054022244515
  %175 = xor i64 %174, %170
  %176 = xor i64 %175, %168
  %177 = add i64 %68, -4562516632359772738
  %178 = xor i64 -4562516632359772738, %68
  %179 = and i64 -4562516632359772738, %68
  %180 = mul i64 2, %179
  %181 = add i64 %178, %180
  %182 = sext i8 %.reload8 to i64
  %183 = and i64 %182, 937284362606176968
  %184 = xor i64 %182, -1
  %185 = or i64 -937284362606176969, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = xor i64 %183, %177
  %189 = xor i64 %188, %181
  %190 = xor i64 %189, %187
  %191 = xor i64 %190, 2203749718747283204
  %192 = mul i64 %176, %191
  %193 = mul i64 54, %192
  %194 = sext i8 %.reload8 to i64
  %195 = add i64 %194, 256142997461464955
  %196 = add i64 -8681741552705419268, %194
  %197 = sub i64 %196, -8937884550166884223
  %198 = or i64 %64, 6849208870085669542
  %199 = and i64 6849208870085669542, %64
  %200 = xor i64 6849208870085669542, %64
  %201 = or i64 %199, %200
  %202 = xor i64 %198, 6495307122018476587
  %203 = xor i64 %202, %195
  %204 = xor i64 %203, %201
  %205 = xor i64 %204, %197
  %206 = or i64 %0, -3388064398781442208
  %207 = xor i64 %0, -1
  %208 = and i64 %207, -7757043684664920738
  %209 = and i64 %0, 7757043684664920737
  %210 = or i64 %208, %209
  %211 = xor i64 4945617317391245886, %210
  %212 = xor i64 %0, -1
  %213 = or i64 3388064398781442207, %212
  %214 = xor i64 %213, -1
  %215 = and i64 %214, -1
  %216 = or i64 %211, %215
  %217 = sext i8 %.reload8 to i64
  %218 = and i64 %217, 8390003192719862815
  %219 = xor i64 %217, -1
  %220 = xor i64 8390003192719862815, %219
  %221 = and i64 %220, 8390003192719862815
  %222 = xor i64 -6554980524720678650, %221
  %223 = xor i64 %222, %218
  %224 = xor i64 %223, %206
  %225 = xor i64 %224, %216
  %226 = mul i64 %205, %225
  %227 = srem i64 %0, %226
  %228 = icmp eq i64 %227, 0
  %229 = mul i64 %.reload10, 2
  %230 = mul i64 %.reload10, 2
  %231 = or i64 %112, 661699254525123393
  %232 = and i64 661699254525123393, %112
  %233 = xor i64 661699254525123393, %112
  %234 = or i64 %232, %233
  %235 = and i64 %66, -2446442969618533007
  %236 = or i64 2446442969618533006, %66
  %237 = sub i64 %236, 2446442969618533006
  %238 = xor i64 %237, -6201186297267673401
  %239 = xor i64 %238, %231
  %240 = xor i64 %239, %235
  %241 = xor i64 %240, %234
  %242 = sext i8 %.reload8 to i64
  %243 = add i64 %242, 384609359696786401
  %244 = add i64 -8793850172007328425, %242
  %245 = sub i64 %244, -9178459531704114826
  %246 = and i64 %112, -8820573162549903533
  %247 = or i64 8820573162549903532, %112
  %248 = sub i64 %247, 8820573162549903532
  %249 = add i64 %37, -7727345423377263935
  %250 = sub i64 0, %37
  %251 = sub i64 -7727345423377263935, %250
  %252 = xor i64 %249, %248
  %253 = xor i64 %252, %245
  %254 = xor i64 %253, -3846563558359718664
  %255 = xor i64 %254, %251
  %256 = xor i64 %255, %243
  %257 = xor i64 %256, %246
  %258 = mul i64 %241, %257
  %259 = add i64 %258, %230
  %260 = add i64 %259, -5687790743885450438
  %261 = mul i64 %229, %260
  %262 = srem i64 %261, 4
  %263 = icmp eq i64 %262, 0
  %264 = mul i64 %.reload10, %.reload10
  %265 = add i64 %264, %.reload10
  %266 = or i64 %66, 7542031228668830018
  %267 = xor i64 %66, -1
  %268 = and i64 %267, -793764257969671848
  %269 = and i64 %66, 793764257969671847
  %270 = or i64 %268, %269
  %271 = xor i64 -7182864352525578214, %270
  %272 = xor i64 %66, -1
  %273 = or i64 -7542031228668830019, %272
  %274 = xor i64 %273, -1
  %275 = and i64 %274, -1
  %276 = or i64 %271, %275
  %277 = and i64 %.reload10, 8447573058122521271
  %278 = or i64 -8447573058122521272, %.reload10
  %279 = sub i64 %278, -8447573058122521272
  %280 = xor i64 %277, %279
  %281 = xor i64 %280, 4991922033047245213
  %282 = xor i64 %281, %266
  %283 = xor i64 %282, %276
  %284 = sext i8 %.reload8 to i64
  %285 = add i64 %284, -6643961092313400047
  %286 = xor i64 -6643961092313400047, %284
  %287 = and i64 -6643961092313400047, %284
  %288 = mul i64 2, %287
  %289 = add i64 %286, %288
  %290 = or i64 %.reload10, 7997896886602381611
  %291 = and i64 7997896886602381611, %.reload10
  %292 = xor i64 7997896886602381611, %.reload10
  %293 = or i64 %291, %292
  %294 = and i64 %68, 52867977753068054
  %295 = xor i64 %68, -1
  %296 = xor i64 52867977753068054, %295
  %297 = and i64 %296, 52867977753068054
  %298 = xor i64 %297, 6107611638472374634
  %299 = xor i64 %298, %289
  %300 = xor i64 %299, %293
  %301 = xor i64 %300, %285
  %302 = xor i64 %301, %290
  %303 = xor i64 %302, %294
  %304 = mul i64 %283, %303
  %305 = srem i64 %265, %304
  %306 = icmp eq i64 %305, 0
  %307 = or i1 %263, %306
  store i1 %307, i1* %.out3, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %308 = select i1 %307, i8** %.reload7, i8** %.reload13
  %309 = load i8*, i8** %308, align 8
  indirectbr i8* %309, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub4.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.2.extracted(i64 %0, i64* %.out1, i64* %.out2, i64* %.out3) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314441)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.2.extracted, %"2"), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314434)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.2.extracted, %EntryBasicBlockSplit), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314539)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.2.extracted, %.exitStub.exitStub), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314550)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.2.extracted, %BogusBasciBlock), i8** %9, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.2.extracted, %BogusBasciBlock), i8** %10, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %11, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.2.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %12, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.2.extracted, %"2"), i8** %.reload5, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %13, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.2.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %14 = load i8*, i8** %.reload, align 8
  indirectbr i8* %14, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.2.extracted, %BogusBasciBlock), i8** %15, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.2.extracted, %.exitStub.exitStub), i8** %16, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %17 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %18 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 %0, i64* %.out1, align 8
  %19 = add i64 5981246226715698765, -5981246226715698690
  store i64 %19, i64* %.out2, align 8
  %20 = mul i64 53, 9
  store i64 %20, i64* %.out3, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %21 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %21, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.3.extracted(i64 %0, i1* %.out2) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314436)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.3.extracted, %.exitStub.exitStub), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314431)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.3.extracted, %"2"), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314455)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.3.extracted, %EntryBasicBlockSplit), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314484)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.3.extracted, %BogusBasciBlock), i8** %9, align 8
  %10 = add i64 %0, -3763724593836363694
  %11 = sub i64 0, %0
  %12 = sub i64 -3763724593836363694, %11
  %13 = and i64 %0, -2014334972856382404
  %14 = xor i64 %0, -1
  %15 = xor i64 -2014334972856382404, %14
  %16 = and i64 %15, -2014334972856382404
  %17 = and i64 %0, 2920738998238860535
  %18 = xor i64 %0, -1
  %19 = xor i64 2920738998238860535, %18
  %20 = and i64 %19, 2920738998238860535
  %21 = xor i64 %13, %12
  %22 = xor i64 %21, %16
  %23 = xor i64 %22, %10
  %24 = xor i64 %23, -319545662197476133
  %25 = xor i64 %24, %17
  %26 = xor i64 %25, %20
  %27 = and i64 %0, -2471345479042767127
  %28 = or i64 2471345479042767126, %0
  %29 = sub i64 %28, 2471345479042767126
  %30 = and i64 %0, -4816934878371491634
  %31 = xor i64 %0, -1
  %32 = xor i64 -4816934878371491634, %31
  %33 = and i64 %32, -4816934878371491634
  %34 = add i64 %0, 655295752913555356
  %35 = add i64 -681631283883006285, %0
  %36 = add i64 %35, 1336927036796561641
  %37 = xor i64 %27, %29
  %38 = xor i64 %37, %33
  %39 = xor i64 %38, %30
  %40 = xor i64 %39, 9018125435856226131
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, %34
  %43 = mul i64 %26, %42
  %44 = trunc i64 %43 to i32
  %.reg2mem6 = alloca i8**, i32 %44, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %45 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.3.extracted, %BogusBasciBlock), i8** %45, align 8
  %46 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %46, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.3.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %47 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %47, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.3.extracted, %"2"), i8** %.reload5, align 8
  %48 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %48, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.3.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %49 = load i8*, i8** %.reload, align 8
  indirectbr i8* %49, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %50 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.3.extracted, %"2"), i8** %50, align 8
  %51 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.3.extracted, %BogusBasciBlock), i8** %51, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %52 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %52, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %53 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %53, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %54 = or i64 %2, 631157425761180230
  %55 = and i64 631157425761180230, %2
  %56 = xor i64 631157425761180230, %2
  %57 = or i64 %55, %56
  %58 = or i64 %0, -5243424069830813022
  %59 = xor i64 %0, -1
  %60 = and i64 -5243424069830813022, %59
  %61 = add i64 %60, %0
  %62 = xor i64 %58, -6672639411002875521
  %63 = xor i64 %62, %61
  %64 = xor i64 %63, %57
  %65 = xor i64 %64, %54
  %66 = and i64 %8, 2496223281510125722
  %67 = or i64 -2496223281510125723, %8
  %68 = sub i64 %67, -2496223281510125723
  %69 = and i64 %4, 439651762558794540
  %70 = or i64 -439651762558794541, %4
  %71 = sub i64 %70, -439651762558794541
  %72 = xor i64 %71, %66
  %73 = xor i64 %72, 0
  %74 = xor i64 %73, %68
  %75 = xor i64 %74, %69
  %76 = mul i64 %65, %75
  %77 = icmp eq i64 %0, %76
  store i1 %77, i1* %.out2, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %78 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %78, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.7.extracted(i64* %.out7) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314391)
  %2 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.7.extracted, %.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314431)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.7.extracted, %"2"), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314397)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.7.extracted, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314380)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.7.extracted, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.7.extracted, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.7.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.7.extracted, %"2"), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.7.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.7.extracted, %"2"), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.7.extracted, %BogusBasciBlock), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %18 = add i64 %7, -8399432400187065897
  %19 = and i64 -8399432400187065897, %7
  %20 = or i64 -8399432400187065897, %7
  %21 = add i64 %19, %20
  %22 = or i64 %5, 206777028531586409
  %23 = xor i64 %5, -1
  %24 = and i64 %23, 3695711986998969671
  %25 = and i64 %5, -3695711986998969672
  %26 = or i64 %24, %25
  %27 = xor i64 3573413769867165742, %26
  %28 = xor i64 %5, -1
  %29 = or i64 -206777028531586410, %28
  %30 = xor i64 %29, -1
  %31 = and i64 %30, -1
  %32 = or i64 %27, %31
  %33 = xor i64 %21, -1275471720689590973
  %34 = xor i64 %33, %32
  %35 = xor i64 %34, %18
  %36 = xor i64 %35, %22
  %37 = and i64 %5, 8101260182640902882
  %38 = xor i64 %5, -1
  %39 = or i64 -8101260182640902883, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = and i64 %1, 6395772312654811511
  %43 = xor i64 %1, -1
  %44 = xor i64 6395772312654811511, %43
  %45 = and i64 %44, 6395772312654811511
  %46 = xor i64 %37, -4980573421559723252
  %47 = xor i64 %46, %41
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %45
  %50 = mul i64 %36, %49
  %51 = add i64 20, %50
  store i64 %51, i64* %.out7, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %52 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %52, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @clear..split(i8* %0, i64 %1, i1* %.out) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314472)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@clear..split, %loopEnd), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314440)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@clear..split, %defaultSwitchBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314395)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@clear..split, %BogusBasicBlock), i8** %8, align 8
  %9 = or i64 %1, 3343878103541445765
  %10 = and i64 3343878103541445765, %1
  %11 = xor i64 3343878103541445765, %1
  %12 = or i64 %10, %11
  %13 = or i64 %1, 5785864496615875064
  %14 = and i64 5785864496615875064, %1
  %15 = xor i64 5785864496615875064, %1
  %16 = or i64 %14, %15
  %17 = add i64 %1, -7132118383796620127
  %18 = sub i64 0, %1
  %19 = sub i64 -7132118383796620127, %18
  %20 = xor i64 %16, -7870973191427251749
  %21 = xor i64 %20, %19
  %22 = xor i64 %21, %13
  %23 = xor i64 %22, %9
  %24 = xor i64 %23, %12
  %25 = xor i64 %24, %17
  %26 = add i64 %1, -2071380651076628797
  %27 = add i64 -6935671027520540310, %1
  %28 = sub i64 %27, -4864290376443911513
  %29 = add i64 %1, -1918183504277414425
  %30 = sub i64 0, %1
  %31 = add i64 1918183504277414425, %30
  %32 = sub i64 0, %31
  %33 = xor i64 %26, %28
  %34 = xor i64 %33, %29
  %35 = xor i64 %34, -6685772168482911671
  %36 = xor i64 %35, %32
  %37 = mul i64 %25, %36
  %38 = call i64 @h9549842938191327224(i64 %37)
  %39 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %38
  store i8* blockaddress(@clear..split, %.exitStub1), i8** %39, align 8
  %40 = call i64 @h9549842938191327224(i64 388314465)
  %41 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %40
  store i8* blockaddress(@clear..split, %.split), i8** %41, align 8
  %42 = or i64 %1, -1594142987150175932
  %43 = and i64 -1594142987150175932, %1
  %44 = xor i64 -1594142987150175932, %1
  %45 = or i64 %43, %44
  %46 = add i64 %1, 2331139025601250357
  %47 = add i64 7817419258691879836, %1
  %48 = add i64 %47, -5486280233090629479
  %49 = or i64 %1, -4852116863566747787
  %50 = and i64 -4852116863566747787, %1
  %51 = xor i64 -4852116863566747787, %1
  %52 = or i64 %50, %51
  %53 = xor i64 %46, %49
  %54 = xor i64 %53, -2291192316715377747
  %55 = xor i64 %54, %52
  %56 = xor i64 %55, %45
  %57 = xor i64 %56, %48
  %58 = xor i64 %57, %42
  %59 = and i64 %1, -8961504140698827754
  %60 = xor i64 %1, -1
  %61 = or i64 8961504140698827753, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = or i64 %1, -6397855025363451582
  %65 = xor i64 %1, -1
  %66 = and i64 %65, -4720278090868210788
  %67 = and i64 %1, 4720278090868210787
  %68 = or i64 %66, %67
  %69 = xor i64 1821834509872415454, %68
  %70 = xor i64 %1, -1
  %71 = or i64 6397855025363451581, %70
  %72 = xor i64 %71, -1
  %73 = and i64 %72, -1
  %74 = or i64 %69, %73
  %75 = add i64 %1, 1283576099471570839
  %76 = sub i64 0, %1
  %77 = sub i64 1283576099471570839, %76
  %78 = xor i64 %74, 4504867954900021750
  %79 = xor i64 %78, %64
  %80 = xor i64 %79, %77
  %81 = xor i64 %80, %63
  %82 = xor i64 %81, %59
  %83 = xor i64 %82, %75
  %84 = mul i64 %58, %83
  %85 = call i64 @h9549842938191327224(i64 %84)
  %86 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %85
  store i8* blockaddress(@clear..split, %.exitStub), i8** %86, align 8
  %87 = call i64 @h9549842938191327224(i64 388314478)
  %88 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %87
  store i8* blockaddress(@clear..split, %EntryBasicBlockSplit), i8** %88, align 8
  %89 = call i64 @h9549842938191327224(i64 388314378)
  %90 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %89
  store i8* blockaddress(@clear..split, %loopStart), i8** %90, align 8
  %lookupTable = alloca [9 x i32], align 4
  %91 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %92 = or i64 %1, 4699293492449589253
  %93 = xor i64 %1, -1
  %94 = and i64 4699293492449589253, %93
  %95 = add i64 %94, %1
  %96 = add i64 %1, 8432523816484086741
  %97 = sub i64 0, %1
  %98 = add i64 -8432523816484086741, %97
  %99 = sub i64 0, %98
  %100 = and i64 %1, 1218072006500466630
  %101 = xor i64 %1, -1
  %102 = xor i64 1218072006500466630, %101
  %103 = and i64 %102, 1218072006500466630
  %104 = xor i64 %95, %96
  %105 = xor i64 %104, %103
  %106 = xor i64 %105, %92
  %107 = xor i64 %106, -252758424738047239
  %108 = xor i64 %107, %100
  %109 = xor i64 %108, %99
  %110 = add i64 %1, -2702427695099070000
  %111 = sub i64 0, %1
  %112 = sub i64 -2702427695099070000, %111
  %113 = and i64 %1, 4419716696496718976
  %114 = xor i64 %1, -1
  %115 = xor i64 4419716696496718976, %114
  %116 = and i64 %115, 4419716696496718976
  %117 = xor i64 %110, 4085802296396884517
  %118 = xor i64 %117, %113
  %119 = xor i64 %118, %112
  %120 = xor i64 %119, %116
  %121 = mul i64 %109, %120
  %122 = trunc i64 %121 to i32
  store i32 %122, i32* %91, align 4
  %123 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %123, align 4
  %124 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %124, align 4
  %125 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %125, align 4
  %126 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %126, align 4
  %127 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %127, align 4
  %128 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %128, align 4
  %129 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %129, align 4
  %130 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %131 = or i64 %1, 8792251277510145568
  %132 = and i64 8792251277510145568, %1
  %133 = xor i64 8792251277510145568, %1
  %134 = or i64 %132, %133
  %135 = and i64 %1, -8122040252246801076
  %136 = xor i64 %1, -1
  %137 = xor i64 -8122040252246801076, %136
  %138 = and i64 %137, -8122040252246801076
  %139 = or i64 %1, 8668881760966462169
  %140 = and i64 8668881760966462169, %1
  %141 = xor i64 8668881760966462169, %1
  %142 = or i64 %140, %141
  %143 = xor i64 %142, %138
  %144 = xor i64 %143, %131
  %145 = xor i64 %144, %139
  %146 = xor i64 %145, -8801819840065469805
  %147 = xor i64 %146, %135
  %148 = xor i64 %147, %134
  %149 = or i64 %1, -5367496885628085386
  %150 = xor i64 %1, -1
  %151 = and i64 %150, -785008191274197997
  %152 = and i64 %1, 785008191274197996
  %153 = or i64 %151, %152
  %154 = xor i64 4654968503072917349, %153
  %155 = xor i64 %1, -1
  %156 = or i64 5367496885628085385, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = or i64 %1, 5842169304043380368
  %161 = and i64 5842169304043380368, %1
  %162 = xor i64 5842169304043380368, %1
  %163 = or i64 %161, %162
  %164 = and i64 %1, 3534082611735615744
  %165 = xor i64 %1, -1
  %166 = or i64 -3534082611735615745, %165
  %167 = xor i64 %166, -1
  %168 = and i64 %167, -1
  %169 = xor i64 %163, %160
  %170 = xor i64 %169, %164
  %171 = xor i64 %170, %159
  %172 = xor i64 %171, %168
  %173 = xor i64 %172, 438482041387588103
  %174 = xor i64 %173, %149
  %175 = mul i64 %148, %174
  %176 = trunc i64 %175 to i32
  store i32 %176, i32* %130, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314378, i32* %2, align 4
  %177 = call i8** @bf3325468485390379012(i32* %2)
  %178 = load i8*, i8** %177, align 8
  indirectbr i8* %178, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %179 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %182 = load i32, i32* %181, align 4
  %183 = srem i32 %180, %182
  store i32 %183, i32* %dispatcher, align 4
  %184 = load i8*, i8** %90, align 8
  %185 = load i8, i8* %184, align 1
  %186 = mul i8 %185, 2
  %187 = mul i8 %185, 2
  %188 = add i8 2, %187
  %189 = mul i8 %186, %188
  %190 = srem i8 %189, 4
  %191 = icmp eq i8 %190, 0
  %192 = mul i8 %185, %185
  %193 = add i8 %192, %185
  %194 = srem i8 %193, 2
  %195 = icmp eq i8 %194, 0
  %196 = or i1 %191, %195
  %197 = select i1 %196, i32 388314465, i32 388314472
  %198 = xor i32 %197, 9
  store i32 %198, i32* %2, align 4
  %199 = call i8** @bf3325468485390379012(i32* %2)
  %200 = load i8*, i8** %199, align 8
  indirectbr i8* %200, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %201 = icmp eq i8* %0, null
  store i1 %201, i1* %.out, align 1
  %202 = srem i64 %1, 2
  %203 = icmp eq i64 %202, 0
  %204 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %205 = load i32, i32* %204, align 4
  %206 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %207 = load i32, i32* %206, align 4
  %208 = srem i32 %205, %207
  %209 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %212 = load i32, i32* %211, align 4
  %213 = add i32 %210, -1907836944
  %214 = add i32 %213, %212
  %215 = sub i32 %214, -1907836944
  %216 = select i1 %203, i32 %208, i32 %215
  store i32 %216, i32* %dispatcher, align 4
  %217 = load i8*, i8** %86, align 8
  %218 = load i8, i8* %217, align 1
  %219 = and i8 %218, 1
  %220 = icmp eq i8 %219, 1
  %221 = mul i8 %218, %218
  %222 = add i8 %221, %218
  %223 = srem i8 %222, 2
  %224 = icmp eq i8 %223, 0
  %225 = xor i1 %224, true
  %226 = and i1 %220, %225
  %227 = add i1 %226, %224
  %228 = add i64 %5, 4466845612750425488
  %229 = add i64 -8892990868782241984, %5
  %230 = add i64 %229, -5086907592176884144
  %231 = or i64 %85, 4880913163553712802
  %232 = xor i64 %85, -1
  %233 = and i64 4880913163553712802, %232
  %234 = add i64 %233, %85
  %235 = and i64 %5, -4317326162470723139
  %236 = or i64 4317326162470723138, %5
  %237 = sub i64 %236, 4317326162470723138
  %238 = xor i64 %235, %231
  %239 = xor i64 %238, %237
  %240 = xor i64 %239, %228
  %241 = xor i64 %240, 2886222383881546069
  %242 = xor i64 %241, %234
  %243 = xor i64 %242, %230
  %244 = or i64 %7, 4881186657355986805
  %245 = xor i64 %7, -1
  %246 = and i64 4881186657355986805, %245
  %247 = add i64 %246, %7
  %248 = add i64 %7, 8049781871438354075
  %249 = and i64 8049781871438354075, %7
  %250 = or i64 8049781871438354075, %7
  %251 = add i64 %249, %250
  %252 = add i64 %5, 973239193380011517
  %253 = add i64 -4052599995084003511, %5
  %254 = sub i64 %253, -5025839188464015028
  %255 = xor i64 %252, %247
  %256 = xor i64 %255, %248
  %257 = xor i64 %256, %254
  %258 = xor i64 %257, %251
  %259 = xor i64 %258, %244
  %260 = xor i64 %259, -5420066720350262307
  %261 = mul i64 %243, %260
  %262 = trunc i64 %261 to i32
  %263 = select i1 %227, i32 %262, i32 388314472
  %264 = xor i32 %263, 9
  store i32 %264, i32* %2, align 4
  %265 = call i8** @bf3325468485390379012(i32* %2)
  %266 = load i8*, i8** %265, align 8
  indirectbr i8* %266, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %267 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %267, align 4
  %268 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %269 = and i64 %38, -9194095007437138078
  %270 = or i64 9194095007437138077, %38
  %271 = sub i64 %270, 9194095007437138077
  %272 = and i64 %89, 8400280555081946640
  %273 = xor i64 %89, -1
  %274 = or i64 -8400280555081946641, %273
  %275 = xor i64 %274, -1
  %276 = and i64 %275, -1
  %277 = sext i32 %dispatcher1 to i64
  %278 = and i64 %277, -9159308694683466161
  %279 = xor i64 %277, -1
  %280 = xor i64 -9159308694683466161, %279
  %281 = and i64 %280, -9159308694683466161
  %282 = xor i64 %272, %269
  %283 = xor i64 %282, -4718824503682083397
  %284 = xor i64 %283, %278
  %285 = xor i64 %284, %271
  %286 = xor i64 %285, %276
  %287 = xor i64 %286, %281
  %288 = or i64 %3, -3908356299691536979
  %289 = and i64 -3908356299691536979, %3
  %290 = xor i64 -3908356299691536979, %3
  %291 = or i64 %289, %290
  %292 = or i64 %40, 6012170919775453301
  %293 = xor i64 %40, -1
  %294 = and i64 6012170919775453301, %293
  %295 = add i64 %294, %40
  %296 = xor i64 %292, %295
  %297 = xor i64 %296, -2500314003312760973
  %298 = xor i64 %297, %288
  %299 = xor i64 %298, %291
  %300 = mul i64 %287, %299
  %301 = trunc i64 %300 to i32
  store i32 %301, i32* %268, align 4
  %302 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %302, align 4
  %303 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %303, align 4
  %304 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %305 = sext i32 %dispatcher1 to i64
  %306 = or i64 %305, 977775629532645335
  %307 = xor i64 %305, -1
  %308 = and i64 977775629532645335, %307
  %309 = add i64 %308, %305
  %310 = or i64 %38, 8710372536993636342
  %311 = xor i64 %38, -1
  %312 = and i64 8710372536993636342, %311
  %313 = add i64 %312, %38
  %314 = xor i64 %313, %309
  %315 = xor i64 %314, %306
  %316 = xor i64 %315, -8940843965252828545
  %317 = xor i64 %316, %310
  %318 = and i64 %3, 4127343826604145384
  %319 = xor i64 %3, -1
  %320 = xor i64 4127343826604145384, %319
  %321 = and i64 %320, 4127343826604145384
  %322 = sext i32 %dispatcher1 to i64
  %323 = and i64 %322, -2498469858941640860
  %324 = xor i64 %322, -1
  %325 = or i64 2498469858941640859, %324
  %326 = xor i64 %325, -1
  %327 = and i64 %326, -1
  %328 = or i64 %5, 1441611470909087475
  %329 = and i64 1441611470909087475, %5
  %330 = xor i64 1441611470909087475, %5
  %331 = or i64 %329, %330
  %332 = xor i64 %321, %331
  %333 = xor i64 %332, %318
  %334 = xor i64 %333, %328
  %335 = xor i64 %334, %323
  %336 = xor i64 %335, %327
  %337 = xor i64 %336, 6939237539116297849
  %338 = mul i64 %317, %337
  %339 = trunc i64 %338 to i32
  store i32 %339, i32* %304, align 4
  %340 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %341 = load i32, i32* %340, align 4
  store i32 %341, i32* %dispatcher, align 4
  %342 = load i8*, i8** %90, align 8
  %343 = load i8, i8* %342, align 1
  %344 = and i8 %343, 1
  %345 = icmp eq i8 %344, 0
  %346 = mul i8 %343, %343
  %347 = add i8 %346, %343
  %348 = mul i8 %347, 3
  %349 = srem i8 %348, 2
  %350 = icmp eq i8 %349, 0
  %351 = and i1 %345, %350
  %352 = xor i1 %345, %350
  %353 = or i1 %351, %352
  %354 = select i1 %353, i32 388314378, i32 388314478
  %355 = or i64 %85, 4938102703396927643
  %356 = and i64 4938102703396927643, %85
  %357 = xor i64 4938102703396927643, %85
  %358 = or i64 %356, %357
  %359 = add i64 %38, -2009841290678099285
  %360 = add i64 -3251906218749656844, %38
  %361 = add i64 %360, 1242064928071557559
  %362 = xor i64 %361, %359
  %363 = xor i64 %362, 7649439874052944763
  %364 = xor i64 %363, %358
  %365 = xor i64 %364, %355
  %366 = or i64 %38, 716370702433397601
  %367 = xor i64 %38, -1
  %368 = and i64 716370702433397601, %367
  %369 = add i64 %368, %38
  %370 = and i64 %87, -6123000150238500333
  %371 = or i64 6123000150238500332, %87
  %372 = sub i64 %371, 6123000150238500332
  %373 = or i64 %38, 4701894511477960976
  %374 = xor i64 %38, -1
  %375 = and i64 4701894511477960976, %374
  %376 = add i64 %375, %38
  %377 = xor i64 7436483837019369964, %370
  %378 = xor i64 %377, %376
  %379 = xor i64 %378, %369
  %380 = xor i64 %379, %372
  %381 = xor i64 %380, %373
  %382 = xor i64 %381, %366
  %383 = mul i64 %365, %382
  %384 = trunc i64 %383 to i32
  %385 = xor i32 %354, %384
  store i32 %385, i32* %2, align 4
  %386 = call i8** @bf3325468485390379012(i32* %2)
  %387 = load i8*, i8** %386, align 8
  indirectbr i8* %387, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %388 = load i8*, i8** %88, align 8
  %389 = load i8, i8* %388, align 1
  %390 = mul i8 %389, %389
  %391 = add i8 %390, %389
  %392 = sext i32 %dispatcher1 to i64
  %393 = add i64 %392, -483001770228408526
  %394 = sub i64 0, %392
  %395 = sub i64 -483001770228408526, %394
  %396 = add i64 %3, 6837824154480567887
  %397 = and i64 6837824154480567887, %3
  %398 = or i64 6837824154480567887, %3
  %399 = add i64 %397, %398
  %400 = xor i64 %393, %395
  %401 = xor i64 %400, %396
  %402 = xor i64 %401, %399
  %403 = xor i64 %402, -5569474414801347145
  %404 = add i64 %40, 7335788616428029501
  %405 = and i64 7335788616428029501, %40
  %406 = or i64 7335788616428029501, %40
  %407 = add i64 %405, %406
  %408 = or i64 %85, -983827558346529907
  %409 = and i64 -983827558346529907, %85
  %410 = xor i64 -983827558346529907, %85
  %411 = or i64 %409, %410
  %412 = xor i64 %411, %408
  %413 = xor i64 %412, %404
  %414 = xor i64 %413, -1715004928905416683
  %415 = xor i64 %414, %407
  %416 = mul i64 %403, %415
  %417 = trunc i64 %416 to i8
  %418 = mul i8 %391, %417
  %419 = srem i8 %418, 2
  %420 = icmp eq i8 %419, 0
  %421 = mul i8 %389, %389
  %422 = and i8 %421, %389
  %423 = or i8 %421, %389
  %424 = add i8 %422, %423
  %425 = srem i8 %424, 2
  %426 = icmp eq i8 %425, 0
  %427 = and i1 %420, %426
  %428 = select i1 %427, i32 388314395, i32 388314472
  %429 = or i32 %428, 115
  %430 = or i64 %38, -6177201406515831772
  %431 = xor i64 %38, -1
  %432 = and i64 %431, 9126622354202173268
  %433 = and i64 %38, -9126622354202173269
  %434 = or i64 %432, %433
  %435 = xor i64 -3103425850942913680, %434
  %436 = xor i64 %38, -1
  %437 = or i64 6177201406515831771, %436
  %438 = xor i64 %437, -1
  %439 = and i64 %438, -1
  %440 = or i64 %435, %439
  %441 = add i64 %1, -3491336192362113943
  %442 = sub i64 0, %1
  %443 = sub i64 -3491336192362113943, %442
  %444 = and i64 %5, 1286588384846816917
  %445 = xor i64 %5, -1
  %446 = xor i64 1286588384846816917, %445
  %447 = and i64 %446, 1286588384846816917
  %448 = xor i64 %444, 7780585765810241855
  %449 = xor i64 %448, %430
  %450 = xor i64 %449, %440
  %451 = xor i64 %450, %447
  %452 = xor i64 %451, %441
  %453 = xor i64 %452, %443
  %454 = and i64 %89, 2169242891982881950
  %455 = xor i64 %89, -1
  %456 = xor i64 2169242891982881950, %455
  %457 = and i64 %456, 2169242891982881950
  %458 = add i64 %40, -6941201853647210667
  %459 = add i64 -1497501178496069196, %40
  %460 = add i64 %459, -5443700675151141471
  %461 = xor i64 %458, 6287639905086095309
  %462 = xor i64 %461, %457
  %463 = xor i64 %462, %454
  %464 = xor i64 %463, %460
  %465 = mul i64 %453, %464
  %466 = trunc i64 %465 to i32
  %467 = and i32 %428, %466
  %468 = sub i32 %429, %467
  store i32 %468, i32* %2, align 4
  %469 = call i8** @bf3325468485390379012(i32* %2)
  %470 = load i8*, i8** %469, align 8
  indirectbr i8* %470, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %471 = load i8*, i8** %90, align 8
  %472 = load i8, i8* %471, align 1
  %473 = or i64 %87, 6554653695356849357
  %474 = xor i64 %87, -1
  %475 = and i64 6554653695356849357, %474
  %476 = add i64 %475, %87
  %477 = or i64 %87, 989862128742029541
  %478 = xor i64 %87, -1
  %479 = and i64 989862128742029541, %478
  %480 = add i64 %479, %87
  %481 = add i64 %1, -8869381907806752925
  %482 = and i64 -8869381907806752925, %1
  %483 = or i64 -8869381907806752925, %1
  %484 = add i64 %482, %483
  %485 = xor i64 %480, %477
  %486 = xor i64 %485, -4101756413481562285
  %487 = xor i64 %486, %473
  %488 = xor i64 %487, %481
  %489 = xor i64 %488, %476
  %490 = xor i64 %489, %484
  %491 = sext i32 %dispatcher1 to i64
  %492 = or i64 %491, 2609153996945142024
  %493 = and i64 2609153996945142024, %491
  %494 = xor i64 2609153996945142024, %491
  %495 = or i64 %493, %494
  %496 = or i64 %87, 2116506828553062655
  %497 = and i64 2116506828553062655, %87
  %498 = xor i64 2116506828553062655, %87
  %499 = or i64 %497, %498
  %500 = add i64 %89, 4305840565551429507
  %501 = add i64 6434731479622205423, %89
  %502 = sub i64 %501, 2128890914070775916
  %503 = xor i64 %499, %495
  %504 = xor i64 %503, -7959930352986567461
  %505 = xor i64 %504, %496
  %506 = xor i64 %505, %500
  %507 = xor i64 %506, %492
  %508 = xor i64 %507, %502
  %509 = mul i64 %490, %508
  %510 = trunc i64 %509 to i8
  %511 = and i8 %472, %510
  %512 = icmp eq i8 %511, 1
  %513 = mul i8 %472, %472
  %514 = sub i8 %513, -54
  %515 = add i8 %514, %472
  %516 = add i64 %38, -8675942949342704786
  %517 = and i64 -8675942949342704786, %38
  %518 = or i64 -8675942949342704786, %38
  %519 = add i64 %517, %518
  %520 = sext i32 %dispatcher1 to i64
  %521 = and i64 %520, -4414200860245754184
  %522 = xor i64 %520, -1
  %523 = xor i64 -4414200860245754184, %522
  %524 = and i64 %523, -4414200860245754184
  %525 = add i64 %40, 3535355528259478084
  %526 = add i64 -406684408613332973, %40
  %527 = sub i64 %526, -3942039936872811057
  %528 = xor i64 -3974783484761760321, %527
  %529 = xor i64 %528, %516
  %530 = xor i64 %529, %521
  %531 = xor i64 %530, %519
  %532 = xor i64 %531, %524
  %533 = xor i64 %532, %525
  %534 = and i64 %85, -2974547071459954376
  %535 = xor i64 %85, -1
  %536 = or i64 2974547071459954375, %535
  %537 = xor i64 %536, -1
  %538 = and i64 %537, -1
  %539 = add i64 %38, 6518148035142597850
  %540 = add i64 1957802281545214509, %38
  %541 = sub i64 %540, -4560345753597383341
  %542 = xor i64 %541, %534
  %543 = xor i64 %542, %538
  %544 = xor i64 %543, %539
  %545 = xor i64 %544, -2016364662710934090
  %546 = mul i64 %533, %545
  %547 = trunc i64 %546 to i8
  %548 = add i8 %515, %547
  %549 = add i64 %1, 3883508933118844579
  %550 = add i64 258992692381610088, %1
  %551 = add i64 %550, 3624516240737234491
  %552 = add i64 %38, -5431298653563439487
  %553 = sub i64 0, %38
  %554 = add i64 5431298653563439487, %553
  %555 = sub i64 0, %554
  %556 = and i64 %40, -1476750320524970552
  %557 = or i64 1476750320524970551, %40
  %558 = sub i64 %557, 1476750320524970551
  %559 = xor i64 %555, -3960912608572307591
  %560 = xor i64 %559, %556
  %561 = xor i64 %560, %549
  %562 = xor i64 %561, %552
  %563 = xor i64 %562, %551
  %564 = xor i64 %563, %558
  %565 = add i64 %89, 1468241889925169085
  %566 = sub i64 0, %89
  %567 = sub i64 1468241889925169085, %566
  %568 = and i64 %38, -1172353535632339194
  %569 = xor i64 %38, -1
  %570 = xor i64 -1172353535632339194, %569
  %571 = and i64 %570, -1172353535632339194
  %572 = xor i64 %567, %571
  %573 = xor i64 %572, -4064654426359175790
  %574 = xor i64 %573, %568
  %575 = xor i64 %574, %565
  %576 = mul i64 %564, %575
  %577 = trunc i64 %576 to i8
  %578 = srem i8 %548, %577
  %579 = icmp eq i8 %578, 0
  %580 = or i1 %512, %579
  %581 = select i1 %580, i32 388314395, i32 388314378
  %582 = xor i32 %581, 17
  store i32 %582, i32* %2, align 4
  %583 = call i8** @bf3325468485390379012(i32* %2)
  %584 = load i8*, i8** %583, align 8
  indirectbr i8* %584, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @clear.extracted(float* %0, i1 %.reload, i1 %1, i64* %.out, i1* %.out1, i64* %.out2, i1* %.out3, i64* %.out4, i64* %.out5, i64* %.out6, i64* %.out7) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314401)
  %4 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314407)
  %6 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted, %defaultSwitchBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314406)
  %8 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %7
  store i8* blockaddress(@clear.extracted, %.exitStub8), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314405)
  %10 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %9
  store i8* blockaddress(@clear.extracted, %loopStart), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314403)
  %12 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %11
  store i8* blockaddress(@clear.extracted, %.exitStub), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314400)
  %14 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %13
  store i8* blockaddress(@clear.extracted, %loopEnd), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314413)
  %16 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %15
  store i8* blockaddress(@clear.extracted, %96), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314412)
  %18 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %17
  store i8* blockaddress(@clear.extracted, %EntryBasicBlockSplit), i8** %18, align 8
  %19 = call i64 @h9549842938191327224(i64 388314404)
  %20 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %19
  store i8* blockaddress(@clear.extracted, %codeRepl), i8** %20, align 8
  %.reg2mem3 = alloca i64, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %21, align 4
  %22 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %22, align 4
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %23, align 4
  %24 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %26, align 4
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %27, align 4
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %28, align 4
  %29 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %29, align 4
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %30, align 4
  %31 = alloca i64, align 8
  %32 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %33 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14996539064837633190, i32 0, i64 %32
  store i8** %33, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314405, i32* %2, align 4
  %34 = call i8** @bf1964187169507630819(i32* %2)
  %35 = load i8*, i8** %34, align 8
  indirectbr i8* %35, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %96
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub8
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i64, i64*, i64*, i1)* @clear.extracted.extracted to i8*), i8** %.reload2, align 8
  %36 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = add i32 %37, %39
  store i32 %40, i32* %dispatcher, align 4
  %41 = load i8*, i8** %14, align 8
  %42 = load i8, i8* %41, align 1
  %43 = mul i8 %42, 2
  %44 = mul i8 %42, 2
  %45 = add i64 %7, 5855906346486707858
  %46 = add i64 376450189736692982, %7
  %47 = sub i64 %46, -5479456156750014876
  %48 = add i64 %9, -1082478576409123634
  %49 = xor i64 -1082478576409123634, %9
  %50 = and i64 -1082478576409123634, %9
  %51 = mul i64 2, %50
  %52 = add i64 %49, %51
  %53 = add i64 %17, -8871522387631469139
  %54 = xor i64 -8871522387631469139, %17
  %55 = and i64 -8871522387631469139, %17
  %56 = mul i64 2, %55
  %57 = add i64 %54, %56
  %58 = xor i64 %48, %57
  %59 = xor i64 %58, %47
  %60 = xor i64 %59, %45
  %61 = xor i64 %60, %53
  %62 = xor i64 %61, 7955319205132312489
  %63 = xor i64 %62, %52
  %64 = and i64 %15, 8216208372204711405
  %65 = xor i64 %15, -1
  %66 = xor i64 8216208372204711405, %65
  %67 = and i64 %66, 8216208372204711405
  %68 = and i64 %17, 936407107551467574
  %69 = or i64 -936407107551467575, %17
  %70 = sub i64 %69, -936407107551467575
  %71 = xor i64 %67, %70
  %72 = xor i64 %71, 307440269124187853
  %73 = xor i64 %72, %68
  %74 = xor i64 %73, %64
  %75 = mul i64 %63, %74
  %76 = trunc i64 %75 to i8
  %77 = add i8 %76, %44
  %78 = add i8 %77, -83
  %79 = mul i8 %43, %78
  %80 = srem i8 %79, 4
  %81 = icmp eq i8 %80, 0
  %82 = mul i8 %42, %42
  %83 = mul i8 %82, %42
  %84 = add i8 %83, %42
  %85 = srem i8 %84, 2
  %86 = icmp eq i8 %85, 0
  %87 = and i1 %81, %86
  %88 = select i1 %87, i32 388314403, i32 388314400
  %89 = xor i32 %88, -1
  %90 = and i32 %89, -1172088828
  %91 = and i32 %88, 1172088827
  %92 = or i32 %90, %91
  %93 = xor i32 %92, -1172088825
  store i32 %93, i32* %2, align 4
  %94 = call i8** @bf1964187169507630819(i32* %2)
  %95 = load i8*, i8** %94, align 8
  indirectbr i8* %95, [label %loopEnd, label %EntryBasicBlockSplit]

96:                                               ; preds = %96, %loopStart
  %97 = sub i64 40, 54
  store i64 %97, i64* %.out, align 8
  %98 = icmp eq float* %0, null
  store i1 %98, i1* %.out1, align 1
  %99 = and i64 %9, 1221396926770755822
  %100 = xor i64 %9, -1
  %101 = xor i64 1221396926770755822, %100
  %102 = and i64 %101, 1221396926770755822
  %103 = add i64 %7, -650223555048151905
  %104 = sub i64 0, %7
  %105 = sub i64 -650223555048151905, %104
  %106 = or i64 %32, 8423091022261795608
  %107 = xor i64 %32, -1
  %108 = and i64 8423091022261795608, %107
  %109 = add i64 %108, %32
  %110 = xor i64 %105, %106
  %111 = xor i64 %110, %109
  %112 = xor i64 %111, %99
  %113 = xor i64 %112, 8376076953384616267
  %114 = xor i64 %113, %103
  %115 = xor i64 %114, %102
  %116 = or i64 %9, -8544355491030724055
  %117 = xor i64 %9, -1
  %118 = and i64 %117, 2130422805015513776
  %119 = and i64 %9, -2130422805015513777
  %120 = or i64 %118, %119
  %121 = xor i64 -7711128261427472231, %120
  %122 = xor i64 %9, -1
  %123 = or i64 8544355491030724054, %122
  %124 = xor i64 %123, -1
  %125 = and i64 %124, -1
  %126 = or i64 %121, %125
  %127 = sext i32 %dispatcher1 to i64
  %128 = add i64 %127, -590797846287409295
  %129 = and i64 -590797846287409295, %127
  %130 = or i64 -590797846287409295, %127
  %131 = add i64 %129, %130
  %132 = xor i64 -6185327953173801560, %131
  %133 = xor i64 %132, %128
  %134 = xor i64 %133, %126
  %135 = xor i64 %134, %116
  %136 = mul i64 %115, %135
  %137 = mul i64 %136, 22
  store i64 %137, i64* %.out2, align 8
  %138 = select i1 %.reload, i1 true, i1 %98
  store i1 %138, i1* %.out3, align 1
  %139 = sdiv i64 20, 17
  store i64 %139, i64* %.out4, align 8
  %140 = mul i64 120, 59
  store i64 %140, i64* %.out5, align 8
  %141 = sdiv i64 96, 29
  store i64 %141, i64* %.reg2mem3, align 8
  %142 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %143, %145
  store i32 %146, i32* %dispatcher, align 4
  %147 = load i8*, i8** %12, align 8
  %148 = load i8, i8* %147, align 1
  %149 = mul i8 %148, 2
  %150 = or i64 %11, 1594241581697536198
  %151 = xor i64 %11, -1
  %152 = and i64 %151, -8670299691923694769
  %153 = and i64 %11, 8670299691923694768
  %154 = or i64 %152, %153
  %155 = xor i64 -7947997803789644919, %154
  %156 = xor i64 %11, -1
  %157 = or i64 -1594241581697536199, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = or i64 %155, %159
  %161 = and i64 %32, 3419509628996512281
  %162 = or i64 -3419509628996512282, %32
  %163 = sub i64 %162, -3419509628996512282
  %164 = xor i64 %160, 9184357918660952093
  %165 = xor i64 %164, %161
  %166 = xor i64 %165, %150
  %167 = xor i64 %166, %163
  %168 = and i64 %19, 1602225511733699785
  %169 = xor i64 %19, -1
  %170 = xor i64 1602225511733699785, %169
  %171 = and i64 %170, 1602225511733699785
  %172 = or i64 %19, -8273370345485490075
  %173 = xor i64 %19, -1
  %174 = and i64 -8273370345485490075, %173
  %175 = add i64 %174, %19
  %176 = or i64 %7, 5932092727453102499
  %177 = xor i64 %7, -1
  %178 = and i64 5932092727453102499, %177
  %179 = add i64 %178, %7
  %180 = xor i64 %171, 1829148098128741482
  %181 = xor i64 %180, %176
  %182 = xor i64 %181, %172
  %183 = xor i64 %182, %179
  %184 = xor i64 %183, %175
  %185 = xor i64 %184, %168
  %186 = mul i64 %167, %185
  %187 = trunc i64 %186 to i8
  %188 = mul i8 %148, %187
  %189 = add i8 2, %188
  %190 = mul i8 %149, %189
  %191 = and i64 %5, 2970206357813347719
  %192 = xor i64 %5, -1
  %193 = or i64 -2970206357813347720, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = add i64 %19, -8023115653172202982
  %197 = add i64 1955262901232651727, %19
  %198 = sub i64 %197, -8468365519304696907
  %199 = xor i64 %195, %196
  %200 = xor i64 %199, %198
  %201 = xor i64 %200, %191
  %202 = xor i64 %201, -1446988590092758995
  %203 = and i64 %32, 7577900772760374599
  %204 = xor i64 %32, -1
  %205 = or i64 -7577900772760374600, %204
  %206 = xor i64 %205, -1
  %207 = and i64 %206, -1
  %208 = add i64 %15, -287217038752545829
  %209 = add i64 658853921157132083, %15
  %210 = add i64 %209, -946070959909677912
  %211 = xor i64 %210, %208
  %212 = xor i64 %211, %203
  %213 = xor i64 %212, %207
  %214 = xor i64 %213, -6641429934896972140
  %215 = mul i64 %202, %214
  %216 = trunc i64 %215 to i8
  %217 = srem i8 %190, %216
  %218 = icmp eq i8 %217, 0
  %219 = mul i8 %148, %148
  %220 = mul i8 %219, %148
  %221 = add i8 %220, %148
  %222 = srem i8 %221, 2
  %223 = icmp eq i8 %222, 0
  %224 = and i1 %218, %223
  %225 = or i64 %9, -5493248957786738800
  %226 = and i64 -5493248957786738800, %9
  %227 = xor i64 -5493248957786738800, %9
  %228 = or i64 %226, %227
  %229 = sext i32 %dispatcher1 to i64
  %230 = or i64 %229, -3985056083813655812
  %231 = xor i64 %229, -1
  %232 = and i64 -3985056083813655812, %231
  %233 = add i64 %232, %229
  %234 = sext i32 %dispatcher1 to i64
  %235 = add i64 %234, -7628174365140450997
  %236 = add i64 -995213895641530160, %234
  %237 = sub i64 %236, 6632960469498920837
  %238 = xor i64 6026643403833088191, %228
  %239 = xor i64 %238, %233
  %240 = xor i64 %239, %235
  %241 = xor i64 %240, %237
  %242 = xor i64 %241, %225
  %243 = xor i64 %242, %230
  %244 = add i64 %5, -1348233537862082729
  %245 = sub i64 0, %5
  %246 = sub i64 -1348233537862082729, %245
  %247 = add i64 %15, -1013839191513354518
  %248 = and i64 -1013839191513354518, %15
  %249 = or i64 -1013839191513354518, %15
  %250 = add i64 %248, %249
  %251 = add i64 %15, 6209705113738333833
  %252 = add i64 4768309210159783931, %15
  %253 = add i64 %252, 1441395903578549902
  %254 = xor i64 %246, %253
  %255 = xor i64 %254, %244
  %256 = xor i64 %255, %250
  %257 = xor i64 %256, %247
  %258 = xor i64 %257, %251
  %259 = xor i64 %258, -6963668928244092192
  %260 = mul i64 %243, %259
  %261 = trunc i64 %260 to i32
  %262 = select i1 %224, i32 388314400, i32 %261
  %263 = or i64 %11, -431800073575241383
  %264 = xor i64 %11, -1
  %265 = and i64 %264, -5331175341422069756
  %266 = and i64 %11, 5331175341422069755
  %267 = or i64 %265, %266
  %268 = xor i64 5476988866788872541, %267
  %269 = xor i64 %11, -1
  %270 = or i64 431800073575241382, %269
  %271 = xor i64 %270, -1
  %272 = and i64 %271, -1
  %273 = or i64 %268, %272
  %274 = and i64 %11, -504240747024473607
  %275 = or i64 504240747024473606, %11
  %276 = sub i64 %275, 504240747024473606
  %277 = xor i64 %276, %273
  %278 = xor i64 %277, %274
  %279 = xor i64 %278, 26985746930153547
  %280 = xor i64 %279, %263
  %281 = or i64 %5, 986602583161030963
  %282 = and i64 986602583161030963, %5
  %283 = xor i64 986602583161030963, %5
  %284 = or i64 %282, %283
  %285 = or i64 %9, 2611566688008871300
  %286 = and i64 2611566688008871300, %9
  %287 = xor i64 2611566688008871300, %9
  %288 = or i64 %286, %287
  %289 = add i64 %3, -6360793939515608075
  %290 = sub i64 0, %3
  %291 = sub i64 -6360793939515608075, %290
  %292 = xor i64 0, %291
  %293 = xor i64 %292, %289
  %294 = xor i64 %293, %281
  %295 = xor i64 %294, %285
  %296 = xor i64 %295, %288
  %297 = xor i64 %296, %284
  %298 = mul i64 %280, %297
  %299 = trunc i64 %298 to i32
  %300 = xor i32 %262, %299
  store i32 %300, i32* %2, align 4
  %301 = call i8** @bf1964187169507630819(i32* %2)
  %302 = load i8*, i8** %301, align 8
  indirectbr i8* %302, [label %loopEnd, label %96]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %31, align 8
  %303 = alloca i8**, align 8
  %304 = and i64 %9, -7447379103755006718
  %305 = xor i64 %9, -1
  %306 = xor i64 -7447379103755006718, %305
  %307 = and i64 %306, -7447379103755006718
  %308 = and i64 %32, -1734337787566168777
  %309 = or i64 1734337787566168776, %32
  %310 = sub i64 %309, 1734337787566168776
  %311 = xor i64 -8514363057827451017, %310
  %312 = xor i64 %311, %308
  %313 = xor i64 %312, %304
  %314 = xor i64 %313, %307
  %315 = add i64 %19, -2864376971648135124
  %316 = sub i64 0, %19
  %317 = add i64 2864376971648135124, %316
  %318 = sub i64 0, %317
  %319 = and i64 %19, -6061306738829275705
  %320 = xor i64 %19, -1
  %321 = xor i64 -6061306738829275705, %320
  %322 = and i64 %321, -6061306738829275705
  %323 = xor i64 %315, 0
  %324 = xor i64 %323, %319
  %325 = xor i64 %324, %318
  %326 = xor i64 %325, %322
  %327 = mul i64 %314, %326
  %328 = trunc i64 %327 to i32
  %329 = sext i32 %dispatcher1 to i64
  %330 = add i64 %329, 6119909475452098859
  %331 = add i64 -8895761620128159905, %329
  %332 = sub i64 %331, 3431072978129292852
  %333 = or i64 %17, 5810086444315630172
  %334 = xor i64 %17, -1
  %335 = and i64 5810086444315630172, %334
  %336 = add i64 %335, %17
  %337 = xor i64 %332, -7578477202388469099
  %338 = xor i64 %337, %330
  %339 = xor i64 %338, %336
  %340 = xor i64 %339, %333
  %341 = or i64 %15, 1026809678382038914
  %342 = xor i64 %15, -1
  %343 = and i64 %342, 1700879725595398811
  %344 = and i64 %15, -1700879725595398812
  %345 = or i64 %343, %344
  %346 = xor i64 1847963413878402329, %345
  %347 = xor i64 %15, -1
  %348 = or i64 -1026809678382038915, %347
  %349 = xor i64 %348, -1
  %350 = and i64 %349, -1
  %351 = or i64 %346, %350
  %352 = or i64 %19, 3582024615750408455
  %353 = and i64 3582024615750408455, %19
  %354 = xor i64 3582024615750408455, %19
  %355 = or i64 %353, %354
  %356 = xor i64 %352, %355
  %357 = xor i64 %356, 0
  %358 = xor i64 %357, %341
  %359 = xor i64 %358, %351
  %360 = mul i64 %340, %359
  %361 = trunc i64 %360 to i32
  %362 = sext i32 %dispatcher1 to i64
  %363 = and i64 %362, -227876773875030344
  %364 = or i64 227876773875030343, %362
  %365 = sub i64 %364, 227876773875030343
  %366 = and i64 %32, -6131624004224429691
  %367 = or i64 6131624004224429690, %32
  %368 = sub i64 %367, 6131624004224429690
  %369 = add i64 %17, 5398507876955932207
  %370 = add i64 9100637758224477899, %17
  %371 = add i64 %370, -3702129881268545692
  %372 = xor i64 %368, %369
  %373 = xor i64 %372, %363
  %374 = xor i64 %373, %366
  %375 = xor i64 %374, %371
  %376 = xor i64 %375, 7463226053177208145
  %377 = xor i64 %376, %365
  %378 = add i64 %32, -4914838995602653513
  %379 = add i64 5998805839614780692, %32
  %380 = add i64 %379, 7533099238492117411
  %381 = and i64 %7, 8652464589967486375
  %382 = xor i64 %7, -1
  %383 = xor i64 8652464589967486375, %382
  %384 = and i64 %383, 8652464589967486375
  %385 = and i64 %11, -6245876597801745428
  %386 = xor i64 %11, -1
  %387 = or i64 6245876597801745427, %386
  %388 = xor i64 %387, -1
  %389 = and i64 %388, -1
  %390 = xor i64 0, %381
  %391 = xor i64 %390, %384
  %392 = xor i64 %391, %378
  %393 = xor i64 %392, %385
  %394 = xor i64 %393, %380
  %395 = xor i64 %394, %389
  %396 = mul i64 %377, %395
  call void @"5784248439022692321"(i32 22, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 %328, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 %361, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* %31, i8*** %303, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 %396, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %397 = load i8**, i8*** %303, align 8
  %398 = load i8*, i8** %397, align 8
  %399 = bitcast i8* %398 to i1 (i64, i64*, i64*, i1)*
  %.reload4 = load i64, i64* %.reg2mem3, align 8
  %targetBlock = call i1 %399(i64 %.reload4, i64* %.out6, i64* %.out7, i1 %1)
  %400 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %401 = load i32, i32* %400, align 4
  %402 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %403 = load i32, i32* %402, align 4
  %404 = srem i32 %401, %403
  %405 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %406 = load i32, i32* %405, align 4
  %407 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %408 = load i32, i32* %407, align 4
  %409 = srem i32 %406, %408
  %410 = select i1 %targetBlock, i32 %404, i32 %409
  store i32 %410, i32* %dispatcher, align 4
  %411 = load i8*, i8** %20, align 8
  %412 = load i8, i8* %411, align 1
  %413 = and i8 %412, 1
  %414 = icmp eq i8 %413, 1
  %415 = mul i8 %412, %412
  %416 = add i8 %415, %412
  %417 = srem i8 %416, 2
  %418 = icmp eq i8 %417, 0
  %419 = and i1 %414, %418
  %420 = xor i1 %414, %418
  %421 = or i1 %419, %420
  %422 = select i1 %421, i32 388314404, i32 388314400
  %423 = or i64 %5, -6634572184578971119
  %424 = and i64 -6634572184578971119, %5
  %425 = xor i64 -6634572184578971119, %5
  %426 = or i64 %424, %425
  %427 = or i64 %3, -4944537857911888544
  %428 = and i64 -4944537857911888544, %3
  %429 = xor i64 -4944537857911888544, %3
  %430 = or i64 %428, %429
  %431 = xor i64 %423, %430
  %432 = xor i64 %431, -522043051998754253
  %433 = xor i64 %432, %426
  %434 = xor i64 %433, %427
  %435 = sext i32 %dispatcher1 to i64
  %436 = or i64 %435, -5699278803617854336
  %437 = and i64 -5699278803617854336, %435
  %438 = xor i64 -5699278803617854336, %435
  %439 = or i64 %437, %438
  %440 = add i64 %3, 5922344215824817375
  %441 = sub i64 0, %3
  %442 = add i64 -5922344215824817375, %441
  %443 = sub i64 0, %442
  %444 = add i64 %17, 1148789127702955537
  %445 = and i64 1148789127702955537, %17
  %446 = or i64 1148789127702955537, %17
  %447 = add i64 %445, %446
  %448 = xor i64 -5248852384298105876, %436
  %449 = xor i64 %448, %447
  %450 = xor i64 %449, %443
  %451 = xor i64 %450, %440
  %452 = xor i64 %451, %439
  %453 = xor i64 %452, %444
  %454 = mul i64 %434, %453
  %455 = trunc i64 %454 to i32
  %456 = xor i32 %422, %455
  store i32 %456, i32* %2, align 4
  %457 = call i8** @bf1964187169507630819(i32* %2)
  %458 = load i8*, i8** %457, align 8
  indirectbr i8* %458, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub8:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %459 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %459, align 4
  %460 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %460, align 4
  %461 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %461, align 4
  %462 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %462, align 4
  %463 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  %464 = or i64 %19, -6032748867127700142
  %465 = and i64 -6032748867127700142, %19
  %466 = xor i64 -6032748867127700142, %19
  %467 = or i64 %465, %466
  %468 = or i64 %15, 4850036180770712103
  %469 = xor i64 %15, -1
  %470 = and i64 %469, -6570569782471349962
  %471 = and i64 %15, 6570569782471349961
  %472 = or i64 %470, %471
  %473 = xor i64 -1756844011894586607, %472
  %474 = xor i64 %15, -1
  %475 = or i64 -4850036180770712104, %474
  %476 = xor i64 %475, -1
  %477 = and i64 %476, -1
  %478 = or i64 %473, %477
  %479 = xor i64 -7213097620031262479, %467
  %480 = xor i64 %479, %478
  %481 = xor i64 %480, %468
  %482 = xor i64 %481, %464
  %483 = sext i32 %dispatcher1 to i64
  %484 = add i64 %483, -8600740532495965027
  %485 = add i64 144962088867847767, %483
  %486 = add i64 %485, -8745702621363812794
  %487 = and i64 %15, 5234075734382915479
  %488 = xor i64 %15, -1
  %489 = or i64 -5234075734382915480, %488
  %490 = xor i64 %489, -1
  %491 = and i64 %490, -1
  %492 = xor i64 %486, 1646703797663121527
  %493 = xor i64 %492, %491
  %494 = xor i64 %493, %487
  %495 = xor i64 %494, %484
  %496 = mul i64 %482, %495
  %497 = trunc i64 %496 to i32
  store i32 %497, i32* %463, align 4
  %498 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %499 = load i32, i32* %498, align 4
  store i32 %499, i32* %dispatcher, align 4
  %500 = load i8*, i8** %12, align 8
  %501 = load i8, i8* %500, align 1
  %502 = mul i8 %501, 2
  %503 = mul i8 %501, 2
  %504 = add i8 2, %503
  %505 = mul i8 %502, %504
  %506 = srem i8 %505, 4
  %507 = icmp eq i8 %506, 0
  %508 = mul i8 %501, %501
  %509 = add i8 %508, %501
  %510 = srem i8 %509, 2
  %511 = icmp eq i8 %510, 0
  %512 = and i1 %507, %511
  %513 = select i1 %512, i32 388314405, i32 388314412
  %514 = xor i32 %513, 9
  store i32 %514, i32* %2, align 4
  %515 = call i8** @bf1964187169507630819(i32* %2)
  %516 = load i8*, i8** %515, align 8
  indirectbr i8* %516, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %517 = load i8*, i8** %4, align 8
  %518 = load i8, i8* %517, align 1
  %519 = mul i8 %518, 2
  %520 = add i64 %9, 7010606878253501355
  %521 = sub i64 0, %9
  %522 = add i64 -7010606878253501355, %521
  %523 = sub i64 0, %522
  %524 = or i64 %19, -2676972427624892854
  %525 = and i64 -2676972427624892854, %19
  %526 = xor i64 -2676972427624892854, %19
  %527 = or i64 %525, %526
  %528 = xor i64 %524, %520
  %529 = xor i64 %528, %527
  %530 = xor i64 %529, -8225190305077329707
  %531 = xor i64 %530, %523
  %532 = and i64 %15, -7378168013155090268
  %533 = or i64 7378168013155090267, %15
  %534 = sub i64 %533, 7378168013155090267
  %535 = add i64 %5, 4949995036391352058
  %536 = and i64 4949995036391352058, %5
  %537 = or i64 4949995036391352058, %5
  %538 = add i64 %536, %537
  %539 = xor i64 5713657223554035962, %532
  %540 = xor i64 %539, %538
  %541 = xor i64 %540, %534
  %542 = xor i64 %541, %535
  %543 = mul i64 %531, %542
  %544 = trunc i64 %543 to i8
  %545 = mul i8 %518, %544
  %546 = add i8 2, %545
  %547 = mul i8 %519, %546
  %548 = and i64 %3, 4386429042510138371
  %549 = or i64 -4386429042510138372, %3
  %550 = sub i64 %549, -4386429042510138372
  %551 = add i64 %11, -6150704597412298707
  %552 = add i64 3511647051817386222, %11
  %553 = sub i64 %552, -8784392424479866687
  %554 = add i64 %19, -8028122637398190844
  %555 = sub i64 0, %19
  %556 = add i64 8028122637398190844, %555
  %557 = sub i64 0, %556
  %558 = xor i64 %554, %557
  %559 = xor i64 %558, %553
  %560 = xor i64 %559, %551
  %561 = xor i64 %560, %548
  %562 = xor i64 %561, %550
  %563 = xor i64 %562, 7839734809796215055
  %564 = and i64 %7, 6742476539851191390
  %565 = xor i64 %7, -1
  %566 = or i64 -6742476539851191391, %565
  %567 = xor i64 %566, -1
  %568 = and i64 %567, -1
  %569 = add i64 %32, 5161147377507731976
  %570 = sub i64 0, %32
  %571 = add i64 -5161147377507731976, %570
  %572 = sub i64 0, %571
  %573 = xor i64 %569, -1370632088021157956
  %574 = xor i64 %573, %564
  %575 = xor i64 %574, %568
  %576 = xor i64 %575, %572
  %577 = mul i64 %563, %576
  %578 = trunc i64 %577 to i8
  %579 = srem i8 %547, %578
  %580 = icmp eq i8 %579, 0
  %581 = mul i8 %518, %518
  %582 = sub i8 0, %518
  %583 = sub i8 %581, %582
  %584 = srem i8 %583, 2
  %585 = icmp eq i8 %584, 0
  %586 = and i1 %580, %585
  %587 = select i1 %586, i32 388314400, i32 388314400
  %588 = xor i32 %587, -1
  %589 = and i32 %588, 2010172970
  %590 = and i32 %587, -2010172971
  %591 = or i32 %589, %590
  %592 = xor i32 %591, 2010172970
  store i32 %592, i32* %2, align 4
  %593 = call i8** @bf1964187169507630819(i32* %2)
  %594 = load i8*, i8** %593, align 8
  indirectbr i8* %594, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %96, %EntryBasicBlockSplit
  %595 = load i8*, i8** %12, align 8
  %596 = load i8, i8* %595, align 1
  %597 = and i64 %19, -5699655196349664778
  %598 = or i64 5699655196349664777, %19
  %599 = sub i64 %598, 5699655196349664777
  %600 = or i64 %19, -1489878139596921276
  %601 = xor i64 %19, -1
  %602 = and i64 -1489878139596921276, %601
  %603 = add i64 %602, %19
  %604 = xor i64 %600, %599
  %605 = xor i64 %604, 8700626158330279411
  %606 = xor i64 %605, %603
  %607 = xor i64 %606, %597
  %608 = add i64 %17, -4639389119758505213
  %609 = and i64 -4639389119758505213, %17
  %610 = or i64 -4639389119758505213, %17
  %611 = add i64 %609, %610
  %612 = and i64 %3, 5156243149108429455
  %613 = xor i64 %3, -1
  %614 = xor i64 5156243149108429455, %613
  %615 = and i64 %614, 5156243149108429455
  %616 = xor i64 %612, %611
  %617 = xor i64 %616, %615
  %618 = xor i64 %617, -6288513773097429386
  %619 = xor i64 %618, %608
  %620 = mul i64 %607, %619
  %621 = trunc i64 %620 to i8
  %622 = mul i8 %596, %621
  %623 = mul i8 %596, 2
  %624 = add i8 2, %623
  %625 = mul i8 %622, %624
  %626 = srem i8 %625, 4
  %627 = icmp eq i8 %626, 0
  %628 = mul i8 %596, %596
  %629 = mul i8 %628, %596
  %630 = add i8 %629, 12
  %631 = add i8 %630, %596
  %632 = sub i8 %631, 12
  %633 = srem i8 %632, 2
  %634 = icmp eq i8 %633, 0
  %635 = and i1 %627, %634
  %636 = and i64 %15, 8298703688768446067
  %637 = xor i64 %15, -1
  %638 = or i64 -8298703688768446068, %637
  %639 = xor i64 %638, -1
  %640 = and i64 %639, -1
  %641 = and i64 %15, 6920493648675479256
  %642 = xor i64 %15, -1
  %643 = or i64 -6920493648675479257, %642
  %644 = xor i64 %643, -1
  %645 = and i64 %644, -1
  %646 = xor i64 -5413705459790208875, %645
  %647 = xor i64 %646, %636
  %648 = xor i64 %647, %641
  %649 = xor i64 %648, %640
  %650 = add i64 %3, -7294566535053476476
  %651 = sub i64 0, %3
  %652 = sub i64 -7294566535053476476, %651
  %653 = or i64 %15, -1547967747822229033
  %654 = xor i64 %15, -1
  %655 = and i64 -1547967747822229033, %654
  %656 = add i64 %655, %15
  %657 = xor i64 %656, %650
  %658 = xor i64 %657, %652
  %659 = xor i64 %658, 7126257038212288081
  %660 = xor i64 %659, %653
  %661 = mul i64 %649, %660
  %662 = trunc i64 %661 to i32
  %663 = select i1 %635, i32 %662, i32 388314405
  %664 = xor i32 %663, 0
  store i32 %664, i32* %2, align 4
  %665 = call i8** @bf1964187169507630819(i32* %2)
  %666 = load i8*, i8** %665, align 8
  indirectbr i8* %666, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear..split.8() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314413)
  %2 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %1
  store i8* blockaddress(@clear..split.8, %loopEnd), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314382)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@clear..split.8, %.split), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314488)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@clear..split.8, %defaultSwitchBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314397)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@clear..split.8, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314417)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@clear..split.8, %.exitStub), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314427)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@clear..split.8, %EntryBasicBlockSplit), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314415)
  %14 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %13
  store i8* blockaddress(@clear..split.8, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314415, i32* %0, align 4
  %23 = call i8** @bf3325468485390379012(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %26, -896073138
  %30 = sub i32 %29, %28
  %31 = sub i32 %30, -896073138
  store i32 %31, i32* %dispatcher, align 4
  %32 = load i8*, i8** %4, align 8
  %33 = load i8, i8* %32, align 1
  %34 = xor i8 %33, -1
  %35 = or i8 %34, 1
  %36 = xor i8 %33, -1
  %37 = sub i8 %35, %36
  %38 = icmp eq i8 %37, 0
  %39 = mul i8 %33, %33
  %40 = add i8 %39, %33
  %41 = mul i8 %40, 3
  %42 = srem i8 %41, 2
  %43 = icmp eq i8 %42, 0
  %44 = or i1 %38, %43
  %45 = select i1 %44, i32 388314397, i32 388314413
  %46 = xor i32 %45, 48
  store i32 %46, i32* %0, align 4
  %47 = call i8** @bf3325468485390379012(i32* %0)
  %48 = load i8*, i8** %47, align 8
  indirectbr i8* %48, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %49 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = sub i32 %50, %52
  store i32 %53, i32* %dispatcher, align 4
  %54 = load i8*, i8** %8, align 8
  %55 = load i8, i8* %54, align 1
  %56 = or i64 %9, 1547987200594615113
  %57 = xor i64 %9, -1
  %58 = and i64 %57, 8766373424129127032
  %59 = and i64 %9, -8766373424129127033
  %60 = or i64 %58, %59
  %61 = xor i64 7841862093051472177, %60
  %62 = xor i64 %9, -1
  %63 = or i64 -1547987200594615114, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = or i64 %61, %65
  %67 = or i64 %5, 2085329361293440301
  %68 = and i64 2085329361293440301, %5
  %69 = xor i64 2085329361293440301, %5
  %70 = or i64 %68, %69
  %71 = xor i64 %67, %70
  %72 = xor i64 %71, 5510126309372694121
  %73 = xor i64 %72, %66
  %74 = xor i64 %73, %56
  %75 = and i64 %11, -3031840237084347020
  %76 = or i64 3031840237084347019, %11
  %77 = sub i64 %76, 3031840237084347019
  %78 = or i64 %1, 3218405678854666047
  %79 = xor i64 %1, -1
  %80 = and i64 3218405678854666047, %79
  %81 = add i64 %80, %1
  %82 = and i64 %5, -1849271389156024032
  %83 = xor i64 %5, -1
  %84 = or i64 1849271389156024031, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = xor i64 %78, %81
  %88 = xor i64 %87, 4306869437067805618
  %89 = xor i64 %88, %77
  %90 = xor i64 %89, %82
  %91 = xor i64 %90, %75
  %92 = xor i64 %91, %86
  %93 = mul i64 %74, %92
  %94 = trunc i64 %93 to i8
  %95 = mul i8 %55, %94
  %96 = mul i8 %55, 2
  %97 = sext i32 %dispatcher1 to i64
  %98 = and i64 %97, 7823861783936341905
  %99 = xor i64 %97, -1
  %100 = or i64 -7823861783936341906, %99
  %101 = xor i64 %100, -1
  %102 = and i64 %101, -1
  %103 = or i64 %1, -2736946116514939425
  %104 = and i64 -2736946116514939425, %1
  %105 = xor i64 -2736946116514939425, %1
  %106 = or i64 %104, %105
  %107 = or i64 %3, -557637017839872339
  %108 = xor i64 %3, -1
  %109 = and i64 -557637017839872339, %108
  %110 = add i64 %109, %3
  %111 = xor i64 %106, %103
  %112 = xor i64 %111, %110
  %113 = xor i64 %112, -5335427231653401557
  %114 = xor i64 %113, %98
  %115 = xor i64 %114, %107
  %116 = xor i64 %115, %102
  %117 = and i64 %9, -4716055844278220124
  %118 = xor i64 %9, -1
  %119 = or i64 4716055844278220123, %118
  %120 = xor i64 %119, -1
  %121 = and i64 %120, -1
  %122 = or i64 %3, -4547329613501961604
  %123 = xor i64 %3, -1
  %124 = and i64 %123, -1851016723291588687
  %125 = and i64 %3, 1851016723291588686
  %126 = or i64 %124, %125
  %127 = xor i64 2786459160193818061, %126
  %128 = xor i64 %3, -1
  %129 = or i64 4547329613501961603, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = or i64 %127, %131
  %133 = or i64 %13, 1925313225356935201
  %134 = xor i64 %13, -1
  %135 = and i64 1925313225356935201, %134
  %136 = add i64 %135, %13
  %137 = xor i64 -7890711813977938682, %132
  %138 = xor i64 %137, %136
  %139 = xor i64 %138, %121
  %140 = xor i64 %139, %117
  %141 = xor i64 %140, %122
  %142 = xor i64 %141, %133
  %143 = mul i64 %116, %142
  %144 = trunc i64 %143 to i8
  %145 = add i8 %144, %96
  %146 = mul i8 %95, %145
  %147 = srem i8 %146, 4
  %148 = and i64 %13, -8537070539916113182
  %149 = xor i64 %13, -1
  %150 = xor i64 -8537070539916113182, %149
  %151 = and i64 %150, -8537070539916113182
  %152 = add i64 %3, -1094181258662685035
  %153 = add i64 4786737331599529859, %3
  %154 = add i64 %153, -5880918590262214894
  %155 = xor i64 %154, %151
  %156 = xor i64 %155, %148
  %157 = xor i64 %156, -3262946263193064733
  %158 = xor i64 %157, %152
  %159 = sext i32 %dispatcher1 to i64
  %160 = add i64 %159, 8109149495515125708
  %161 = add i64 397724146223771642, %159
  %162 = add i64 %161, 7711425349291354066
  %163 = add i64 %7, -2548138085175999129
  %164 = sub i64 0, %7
  %165 = sub i64 -2548138085175999129, %164
  %166 = or i64 %1, 1594252970787735376
  %167 = xor i64 %1, -1
  %168 = and i64 1594252970787735376, %167
  %169 = add i64 %168, %1
  %170 = xor i64 %165, %163
  %171 = xor i64 %170, %160
  %172 = xor i64 %171, 0
  %173 = xor i64 %172, %166
  %174 = xor i64 %173, %169
  %175 = xor i64 %174, %162
  %176 = mul i64 %158, %175
  %177 = trunc i64 %176 to i8
  %178 = icmp eq i8 %147, %177
  %179 = mul i8 %55, %55
  %180 = add i8 %179, %55
  %181 = srem i8 %180, 2
  %182 = icmp eq i8 %181, 0
  %183 = and i1 %178, %182
  %184 = or i64 %11, -4407650725085819542
  %185 = xor i64 %11, -1
  %186 = and i64 %185, -6064910410511832445
  %187 = and i64 %11, 6064910410511832444
  %188 = or i64 %186, %187
  %189 = xor i64 7566607136124037097, %188
  %190 = xor i64 %11, -1
  %191 = or i64 4407650725085819541, %190
  %192 = xor i64 %191, -1
  %193 = and i64 %192, -1
  %194 = or i64 %189, %193
  %195 = or i64 %13, -8825606027283402710
  %196 = and i64 -8825606027283402710, %13
  %197 = xor i64 -8825606027283402710, %13
  %198 = or i64 %196, %197
  %199 = and i64 %11, 7585860828220481072
  %200 = or i64 -7585860828220481073, %11
  %201 = sub i64 %200, -7585860828220481073
  %202 = xor i64 %198, %195
  %203 = xor i64 %202, %184
  %204 = xor i64 %203, -5131187939994601635
  %205 = xor i64 %204, %199
  %206 = xor i64 %205, %194
  %207 = xor i64 %206, %201
  %208 = sext i32 %dispatcher1 to i64
  %209 = add i64 %208, -1199024282988930532
  %210 = and i64 -1199024282988930532, %208
  %211 = or i64 -1199024282988930532, %208
  %212 = add i64 %210, %211
  %213 = add i64 %1, 7471136008061876517
  %214 = add i64 677971627724562960, %1
  %215 = sub i64 %214, -6793164380337313557
  %216 = or i64 %3, -1718888747666449362
  %217 = xor i64 %3, -1
  %218 = and i64 %217, 8914591108342360815
  %219 = and i64 %3, -8914591108342360816
  %220 = or i64 %218, %219
  %221 = xor i64 -7812695684276619583, %220
  %222 = xor i64 %3, -1
  %223 = or i64 1718888747666449361, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = or i64 %221, %225
  %227 = xor i64 %226, %213
  %228 = xor i64 %227, %212
  %229 = xor i64 %228, %209
  %230 = xor i64 %229, %216
  %231 = xor i64 %230, %215
  %232 = xor i64 %231, 1641130079414008805
  %233 = mul i64 %207, %232
  %234 = trunc i64 %233 to i32
  %235 = select i1 %183, i32 %234, i32 388314413
  %236 = xor i32 %235, -1
  %237 = and i32 %236, 28
  %238 = and i32 %235, -29
  %239 = or i32 %237, %238
  store i32 %239, i32* %0, align 4
  %240 = call i8** @bf3325468485390379012(i32* %0)
  %241 = load i8*, i8** %240, align 8
  indirectbr i8* %241, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %242 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %242, align 4
  %243 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %243, align 4
  %244 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %244, align 4
  %245 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %245, align 4
  %246 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %247 = load i32, i32* %246, align 4
  store i32 %247, i32* %dispatcher, align 4
  %248 = load i8*, i8** %10, align 8
  %249 = load i8, i8* %248, align 1
  %250 = mul i8 %249, 2
  %251 = mul i8 %249, 2
  %252 = sub i8 0, %251
  %253 = add i8 -2, %252
  %254 = sub i8 0, %253
  %255 = mul i8 %250, %254
  %256 = srem i8 %255, 4
  %257 = and i64 %7, -3378853759220666317
  %258 = xor i64 %7, -1
  %259 = xor i64 -3378853759220666317, %258
  %260 = and i64 %259, -3378853759220666317
  %261 = or i64 %9, -8950801896124312662
  %262 = xor i64 %9, -1
  %263 = and i64 -8950801896124312662, %262
  %264 = add i64 %263, %9
  %265 = add i64 %7, -7738204460517520478
  %266 = sub i64 0, %7
  %267 = add i64 7738204460517520478, %266
  %268 = sub i64 0, %267
  %269 = xor i64 %260, %261
  %270 = xor i64 %269, %264
  %271 = xor i64 %270, %265
  %272 = xor i64 %271, %257
  %273 = xor i64 %272, %268
  %274 = xor i64 %273, -5061437491197761883
  %275 = add i64 %13, -5228988581458764756
  %276 = sub i64 0, %13
  %277 = add i64 5228988581458764756, %276
  %278 = sub i64 0, %277
  %279 = add i64 %13, -3619238944484731577
  %280 = xor i64 -3619238944484731577, %13
  %281 = and i64 -3619238944484731577, %13
  %282 = mul i64 2, %281
  %283 = add i64 %280, %282
  %284 = xor i64 %283, %275
  %285 = xor i64 %284, %278
  %286 = xor i64 %285, 0
  %287 = xor i64 %286, %279
  %288 = mul i64 %274, %287
  %289 = trunc i64 %288 to i8
  %290 = icmp eq i8 %256, %289
  %291 = mul i8 %249, %249
  %292 = add i8 %291, %249
  %293 = or i64 %5, -3221141698923129634
  %294 = xor i64 %5, -1
  %295 = and i64 -3221141698923129634, %294
  %296 = add i64 %295, %5
  %297 = or i64 %3, -8349205644289987144
  %298 = and i64 -8349205644289987144, %3
  %299 = xor i64 -8349205644289987144, %3
  %300 = or i64 %298, %299
  %301 = xor i64 %293, %300
  %302 = xor i64 %301, %296
  %303 = xor i64 %302, -5938897825487546971
  %304 = xor i64 %303, %297
  %305 = or i64 %7, -561577572949515431
  %306 = and i64 -561577572949515431, %7
  %307 = xor i64 -561577572949515431, %7
  %308 = or i64 %306, %307
  %309 = and i64 %7, 2265184212420124934
  %310 = xor i64 %7, -1
  %311 = xor i64 2265184212420124934, %310
  %312 = and i64 %311, 2265184212420124934
  %313 = xor i64 %305, %309
  %314 = xor i64 %313, %312
  %315 = xor i64 %314, 6949490706644112474
  %316 = xor i64 %315, %308
  %317 = mul i64 %304, %316
  %318 = trunc i64 %317 to i8
  %319 = srem i8 %292, %318
  %320 = or i64 %7, 2630108998711284081
  %321 = xor i64 %7, -1
  %322 = and i64 2630108998711284081, %321
  %323 = add i64 %322, %7
  %324 = and i64 %9, 7397583048557750255
  %325 = xor i64 %9, -1
  %326 = or i64 -7397583048557750256, %325
  %327 = xor i64 %326, -1
  %328 = and i64 %327, -1
  %329 = xor i64 %324, %328
  %330 = xor i64 %329, 5191028418802871957
  %331 = xor i64 %330, %320
  %332 = xor i64 %331, %323
  %333 = and i64 %11, 4991344189298537463
  %334 = or i64 -4991344189298537464, %11
  %335 = sub i64 %334, -4991344189298537464
  %336 = or i64 %9, 3454044027416820572
  %337 = xor i64 %9, -1
  %338 = and i64 %337, -1744077868425474325
  %339 = and i64 %9, 1744077868425474324
  %340 = or i64 %338, %339
  %341 = xor i64 -4024827367945128521, %340
  %342 = xor i64 %9, -1
  %343 = or i64 -3454044027416820573, %342
  %344 = xor i64 %343, -1
  %345 = and i64 %344, -1
  %346 = or i64 %341, %345
  %347 = xor i64 %333, %336
  %348 = xor i64 %347, 0
  %349 = xor i64 %348, %346
  %350 = xor i64 %349, %335
  %351 = mul i64 %332, %350
  %352 = trunc i64 %351 to i8
  %353 = icmp eq i8 %319, %352
  %354 = and i1 %290, %353
  %355 = select i1 %354, i32 388314382, i32 388314427
  %356 = or i32 %355, 53
  %357 = and i32 %355, 53
  %358 = sub i32 %356, %357
  store i32 %358, i32* %0, align 4
  %359 = call i8** @bf3325468485390379012(i32* %0)
  %360 = load i8*, i8** %359, align 8
  indirectbr i8* %360, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %361 = load i8*, i8** %6, align 8
  %362 = load i8, i8* %361, align 1
  %363 = mul i8 %362, 2
  %364 = mul i8 %362, 2
  %365 = add i8 2, %364
  %366 = mul i8 %363, %365
  %367 = srem i8 %366, 4
  %368 = and i64 %5, 343445359610704902
  %369 = xor i64 %5, -1
  %370 = xor i64 343445359610704902, %369
  %371 = and i64 %370, 343445359610704902
  %372 = or i64 %7, -5928041322272823837
  %373 = xor i64 %7, -1
  %374 = and i64 -5928041322272823837, %373
  %375 = add i64 %374, %7
  %376 = xor i64 %371, %368
  %377 = xor i64 %376, %372
  %378 = xor i64 %377, -7527749602235020579
  %379 = xor i64 %378, %375
  %380 = and i64 %9, 8062119725866461133
  %381 = xor i64 %9, -1
  %382 = xor i64 8062119725866461133, %381
  %383 = and i64 %382, 8062119725866461133
  %384 = add i64 %5, -8371604013434478712
  %385 = sub i64 0, %5
  %386 = sub i64 -8371604013434478712, %385
  %387 = xor i64 %384, %380
  %388 = xor i64 %387, %386
  %389 = xor i64 %388, %383
  %390 = xor i64 %389, 0
  %391 = mul i64 %379, %390
  %392 = trunc i64 %391 to i8
  %393 = icmp eq i8 %367, %392
  %394 = mul i8 %362, %362
  %395 = mul i8 %394, %362
  %396 = add i8 %395, %362
  %397 = srem i8 %396, 2
  %398 = icmp eq i8 %397, 0
  %399 = xor i1 %393, true
  %400 = xor i1 %398, true
  %401 = or i1 %399, %400
  %402 = xor i1 %401, true
  %403 = and i1 %402, true
  %404 = select i1 %403, i32 388314397, i32 388314413
  %405 = xor i32 %404, -1
  %406 = and i32 %405, 48
  %407 = and i32 %404, -49
  %408 = or i32 %406, %407
  store i32 %408, i32* %0, align 4
  %409 = call i8** @bf3325468485390379012(i32* %0)
  %410 = load i8*, i8** %409, align 8
  indirectbr i8* %410, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %411 = load i8*, i8** %2, align 8
  %412 = load i8, i8* %411, align 1
  %413 = mul i8 %412, %412
  %414 = add i8 %413, %412
  %415 = mul i8 %414, 3
  %416 = srem i8 %415, 2
  %417 = icmp eq i8 %416, 0
  %418 = mul i8 %412, %412
  %419 = sub i8 %418, -75
  %420 = add i8 %419, %412
  %421 = add i8 %420, -75
  %422 = srem i8 %421, 2
  %423 = or i64 %5, 4041127446251774872
  %424 = xor i64 %5, -1
  %425 = and i64 %424, 306274718782075258
  %426 = and i64 %5, -306274718782075259
  %427 = or i64 %425, %426
  %428 = xor i64 4347349385233502946, %427
  %429 = xor i64 %5, -1
  %430 = or i64 -4041127446251774873, %429
  %431 = xor i64 %430, -1
  %432 = and i64 %431, -1
  %433 = or i64 %428, %432
  %434 = add i64 %13, -1890187505675518273
  %435 = xor i64 -1890187505675518273, %13
  %436 = and i64 -1890187505675518273, %13
  %437 = mul i64 2, %436
  %438 = add i64 %435, %437
  %439 = add i64 %13, -2744035100429448095
  %440 = xor i64 -2744035100429448095, %13
  %441 = and i64 -2744035100429448095, %13
  %442 = mul i64 2, %441
  %443 = add i64 %440, %442
  %444 = xor i64 %443, %433
  %445 = xor i64 %444, %439
  %446 = xor i64 %445, %438
  %447 = xor i64 %446, %423
  %448 = xor i64 %447, 6552019741620568211
  %449 = xor i64 %448, %434
  %450 = or i64 %5, 4043999407274149264
  %451 = xor i64 %5, -1
  %452 = and i64 %451, -4883247602962854004
  %453 = and i64 %5, 4883247602962854003
  %454 = or i64 %452, %453
  %455 = xor i64 -8924986409888495076, %454
  %456 = xor i64 %5, -1
  %457 = or i64 -4043999407274149265, %456
  %458 = xor i64 %457, -1
  %459 = and i64 %458, -1
  %460 = or i64 %455, %459
  %461 = or i64 %5, -977773508558998585
  %462 = and i64 -977773508558998585, %5
  %463 = xor i64 -977773508558998585, %5
  %464 = or i64 %462, %463
  %465 = sext i32 %dispatcher1 to i64
  %466 = add i64 %465, -8818905660739762054
  %467 = add i64 -1568863513612430974, %465
  %468 = sub i64 %467, 7250042147127331080
  %469 = xor i64 0, %461
  %470 = xor i64 %469, %464
  %471 = xor i64 %470, %468
  %472 = xor i64 %471, %450
  %473 = xor i64 %472, %466
  %474 = xor i64 %473, %460
  %475 = mul i64 %449, %474
  %476 = trunc i64 %475 to i8
  %477 = icmp eq i8 %422, %476
  %478 = xor i1 %417, true
  %479 = or i64 %1, -3380577423215618922
  %480 = xor i64 %1, -1
  %481 = and i64 %480, -282025328899556719
  %482 = and i64 %1, 282025328899556718
  %483 = or i64 %481, %482
  %484 = xor i64 3243662430626147847, %483
  %485 = xor i64 %1, -1
  %486 = or i64 3380577423215618921, %485
  %487 = xor i64 %486, -1
  %488 = and i64 %487, -1
  %489 = or i64 %484, %488
  %490 = sext i32 %dispatcher1 to i64
  %491 = add i64 %490, -3511396093097948208
  %492 = xor i64 -3511396093097948208, %490
  %493 = and i64 -3511396093097948208, %490
  %494 = mul i64 2, %493
  %495 = add i64 %492, %494
  %496 = xor i64 %495, 6897370148793357229
  %497 = xor i64 %496, %491
  %498 = xor i64 %497, %479
  %499 = xor i64 %498, %489
  %500 = add i64 %3, -2428650522650461261
  %501 = sub i64 0, %3
  %502 = add i64 2428650522650461261, %501
  %503 = sub i64 0, %502
  %504 = add i64 %7, -2483913136731034257
  %505 = sub i64 0, %7
  %506 = sub i64 -2483913136731034257, %505
  %507 = and i64 %1, 3913173563791707276
  %508 = xor i64 %1, -1
  %509 = or i64 -3913173563791707277, %508
  %510 = xor i64 %509, -1
  %511 = and i64 %510, -1
  %512 = xor i64 %504, %506
  %513 = xor i64 %512, 5110097443560671269
  %514 = xor i64 %513, %500
  %515 = xor i64 %514, %507
  %516 = xor i64 %515, %503
  %517 = xor i64 %516, %511
  %518 = mul i64 %499, %517
  %519 = trunc i64 %518 to i1
  %520 = xor i1 %477, %519
  %521 = or i1 %478, %520
  %522 = xor i1 %521, true
  %523 = and i1 %522, true
  %524 = or i64 %11, -6629550313648478450
  %525 = and i64 -6629550313648478450, %11
  %526 = xor i64 -6629550313648478450, %11
  %527 = or i64 %525, %526
  %528 = and i64 %7, 7800598711922761260
  %529 = xor i64 %7, -1
  %530 = xor i64 7800598711922761260, %529
  %531 = and i64 %530, 7800598711922761260
  %532 = and i64 %3, -6568482788960587119
  %533 = xor i64 %3, -1
  %534 = xor i64 -6568482788960587119, %533
  %535 = and i64 %534, -6568482788960587119
  %536 = xor i64 %527, 4558982403821048583
  %537 = xor i64 %536, %531
  %538 = xor i64 %537, %524
  %539 = xor i64 %538, %535
  %540 = xor i64 %539, %532
  %541 = xor i64 %540, %528
  %542 = and i64 %1, 1017511838773215312
  %543 = xor i64 %1, -1
  %544 = or i64 -1017511838773215313, %543
  %545 = xor i64 %544, -1
  %546 = and i64 %545, -1
  %547 = or i64 %13, -8597599894470410415
  %548 = and i64 -8597599894470410415, %13
  %549 = xor i64 -8597599894470410415, %13
  %550 = or i64 %548, %549
  %551 = or i64 %5, 4305303182856338221
  %552 = xor i64 %5, -1
  %553 = and i64 4305303182856338221, %552
  %554 = add i64 %553, %5
  %555 = xor i64 %554, %542
  %556 = xor i64 %555, %551
  %557 = xor i64 %556, %550
  %558 = xor i64 %557, %547
  %559 = xor i64 %558, %546
  %560 = xor i64 %559, -1268438645683619175
  %561 = mul i64 %541, %560
  %562 = trunc i64 %561 to i32
  %563 = select i1 %523, i32 388314415, i32 %562
  %564 = or i64 %5, -1837403842308928079
  %565 = xor i64 %5, -1
  %566 = and i64 -1837403842308928079, %565
  %567 = add i64 %566, %5
  %568 = or i64 %11, 7381756985651813792
  %569 = xor i64 %11, -1
  %570 = and i64 %569, -1625804521204700576
  %571 = and i64 %11, 1625804521204700575
  %572 = or i64 %570, %571
  %573 = xor i64 -8133853077383514176, %572
  %574 = xor i64 %11, -1
  %575 = or i64 -7381756985651813793, %574
  %576 = xor i64 %575, -1
  %577 = and i64 %576, -1
  %578 = or i64 %573, %577
  %579 = and i64 %5, -3051583179398997932
  %580 = xor i64 %5, -1
  %581 = or i64 3051583179398997931, %580
  %582 = xor i64 %581, -1
  %583 = and i64 %582, -1
  %584 = xor i64 %579, %568
  %585 = xor i64 %584, 5620711492944782393
  %586 = xor i64 %585, %578
  %587 = xor i64 %586, %567
  %588 = xor i64 %587, %564
  %589 = xor i64 %588, %583
  %590 = and i64 %1, -613208731306172852
  %591 = xor i64 %1, -1
  %592 = xor i64 -613208731306172852, %591
  %593 = and i64 %592, -613208731306172852
  %594 = or i64 %1, -3511103390442617174
  %595 = and i64 -3511103390442617174, %1
  %596 = xor i64 -3511103390442617174, %1
  %597 = or i64 %595, %596
  %598 = or i64 %1, -3550323991342685266
  %599 = and i64 -3550323991342685266, %1
  %600 = xor i64 -3550323991342685266, %1
  %601 = or i64 %599, %600
  %602 = xor i64 %601, %593
  %603 = xor i64 %602, %590
  %604 = xor i64 %603, 0
  %605 = xor i64 %604, %594
  %606 = xor i64 %605, %598
  %607 = xor i64 %606, %597
  %608 = mul i64 %589, %607
  %609 = trunc i64 %608 to i32
  %610 = or i32 %563, %609
  %611 = and i32 %563, 0
  %612 = sub i32 %610, %611
  store i32 %612, i32* %0, align 4
  %613 = call i8** @bf3325468485390379012(i32* %0)
  %614 = load i8*, i8** %613, align 8
  indirectbr i8* %614, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.9(i8* %0, float* %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314404)
  %4 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.9, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314400)
  %6 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.9, %121), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314403)
  %8 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %7
  store i8* blockaddress(@clear.extracted.9, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314407)
  %10 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %9
  store i8* blockaddress(@clear.extracted.9, %loopEnd), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314402)
  %12 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %11
  store i8* blockaddress(@clear.extracted.9, %.exitStub), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314401)
  %14 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %13
  store i8* blockaddress(@clear.extracted.9, %EntryBasicBlockSplit), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314406)
  %16 = getelementptr [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %15
  store i8* blockaddress(@clear.extracted.9, %loopStart), i8** %16, align 8
  %lookupTable = alloca [8 x i32], align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %23, align 4
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %24, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314406, i32* %2, align 4
  %25 = call i8** @bf4402142158456708617(i32* %2)
  %26 = load i8*, i8** %25, align 8
  indirectbr i8* %26, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %121
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = srem i32 %28, %30
  store i32 %31, i32* %dispatcher, align 4
  %32 = load i8*, i8** %14, align 8
  %33 = load i8, i8* %32, align 1
  %34 = mul i8 %33, 2
  %35 = mul i8 %33, 2
  %36 = add i8 2, %35
  %37 = mul i8 %34, %36
  %38 = srem i8 %37, 4
  %39 = icmp eq i8 %38, 0
  %40 = mul i8 %33, %33
  %41 = sub i8 %40, -11
  %42 = add i8 %41, %33
  %43 = add i8 %42, -11
  %44 = srem i8 %43, 2
  %45 = icmp eq i8 %44, 0
  %46 = or i1 %39, %45
  %47 = sext i32 %dispatcher1 to i64
  %48 = add i64 %47, 7030820722279489601
  %49 = and i64 7030820722279489601, %47
  %50 = or i64 7030820722279489601, %47
  %51 = add i64 %49, %50
  %52 = or i64 %7, -849048420455260604
  %53 = and i64 -849048420455260604, %7
  %54 = xor i64 -849048420455260604, %7
  %55 = or i64 %53, %54
  %56 = xor i64 %52, 5002881702425555443
  %57 = xor i64 %56, %48
  %58 = xor i64 %57, %55
  %59 = xor i64 %58, %51
  %60 = and i64 %15, -7384141964167769779
  %61 = xor i64 %15, -1
  %62 = xor i64 -7384141964167769779, %61
  %63 = and i64 %62, -7384141964167769779
  %64 = or i64 %9, 1814057073629531784
  %65 = xor i64 %9, -1
  %66 = and i64 1814057073629531784, %65
  %67 = add i64 %66, %9
  %68 = xor i64 %63, %64
  %69 = xor i64 %68, 9088738078956288450
  %70 = xor i64 %69, %67
  %71 = xor i64 %70, %60
  %72 = mul i64 %59, %71
  %73 = trunc i64 %72 to i32
  %74 = select i1 %46, i32 %73, i32 388314407
  %75 = add i64 %13, -1274984507074192729
  %76 = add i64 4272770001518170617, %13
  %77 = add i64 %76, -5547754508592363346
  %78 = or i64 %5, -1960246831867496199
  %79 = xor i64 %5, -1
  %80 = and i64 %79, -6797837519958678639
  %81 = and i64 %5, 6797837519958678638
  %82 = or i64 %80, %81
  %83 = xor i64 4999830316168878952, %82
  %84 = xor i64 %5, -1
  %85 = or i64 1960246831867496198, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = or i64 %83, %87
  %89 = and i64 %9, -7997761794596756135
  %90 = xor i64 %9, -1
  %91 = xor i64 -7997761794596756135, %90
  %92 = and i64 %91, -7997761794596756135
  %93 = xor i64 %88, %78
  %94 = xor i64 %93, %77
  %95 = xor i64 %94, %75
  %96 = xor i64 %95, %92
  %97 = xor i64 %96, 4248621488647446373
  %98 = xor i64 %97, %89
  %99 = or i64 %9, -5543525229943825654
  %100 = xor i64 %9, -1
  %101 = and i64 -5543525229943825654, %100
  %102 = add i64 %101, %9
  %103 = and i64 %7, -5987169933202527729
  %104 = or i64 5987169933202527728, %7
  %105 = sub i64 %104, 5987169933202527728
  %106 = or i64 %13, 7705009519186986000
  %107 = and i64 7705009519186986000, %13
  %108 = xor i64 7705009519186986000, %13
  %109 = or i64 %107, %108
  %110 = xor i64 %109, 8851686129845860973
  %111 = xor i64 %110, %105
  %112 = xor i64 %111, %102
  %113 = xor i64 %112, %99
  %114 = xor i64 %113, %103
  %115 = xor i64 %114, %106
  %116 = mul i64 %98, %115
  %117 = trunc i64 %116 to i32
  %118 = xor i32 %74, %117
  store i32 %118, i32* %2, align 4
  %119 = call i8** @bf4402142158456708617(i32* %2)
  %120 = load i8*, i8** %119, align 8
  indirectbr i8* %120, [label %loopEnd, label %EntryBasicBlockSplit]

121:                                              ; preds = %121, %loopStart
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1760) %0, i8 32, i64 1760, i1 false) #13
  %122 = bitcast float* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(7040) %122, i8 0, i64 7040, i1 false) #13
  %123 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = sub i32 %124, %126
  store i32 %127, i32* %dispatcher, align 4
  %128 = load i8*, i8** %10, align 8
  %129 = load i8, i8* %128, align 1
  %130 = mul i8 %129, 2
  %131 = mul i8 %129, 2
  %132 = add i8 2, %131
  %133 = mul i8 %130, %132
  %134 = srem i8 %133, 4
  %135 = icmp eq i8 %134, 0
  %136 = mul i8 %129, %129
  %137 = mul i8 %136, %129
  %138 = add i64 %7, 5508701873148716224
  %139 = and i64 5508701873148716224, %7
  %140 = or i64 5508701873148716224, %7
  %141 = add i64 %139, %140
  %142 = and i64 %3, -4300727156167338353
  %143 = xor i64 %3, -1
  %144 = xor i64 -4300727156167338353, %143
  %145 = and i64 %144, -4300727156167338353
  %146 = xor i64 %142, -2277961984440493929
  %147 = xor i64 %146, %145
  %148 = xor i64 %147, %138
  %149 = xor i64 %148, %141
  %150 = sext i32 %dispatcher1 to i64
  %151 = or i64 %150, 2675960043571342407
  %152 = xor i64 %150, -1
  %153 = and i64 2675960043571342407, %152
  %154 = add i64 %153, %150
  %155 = or i64 %3, 6927045004953053783
  %156 = xor i64 %3, -1
  %157 = and i64 %156, 746966400069281256
  %158 = and i64 %3, -746966400069281257
  %159 = or i64 %157, %158
  %160 = xor i64 7673024635504873407, %159
  %161 = xor i64 %3, -1
  %162 = or i64 -6927045004953053784, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = or i64 %160, %164
  %166 = and i64 %9, -1579176263631795495
  %167 = xor i64 %9, -1
  %168 = or i64 1579176263631795494, %167
  %169 = xor i64 %168, -1
  %170 = and i64 %169, -1
  %171 = xor i64 %151, %154
  %172 = xor i64 %171, %170
  %173 = xor i64 %172, %155
  %174 = xor i64 %173, 599500169411695311
  %175 = xor i64 %174, %165
  %176 = xor i64 %175, %166
  %177 = mul i64 %149, %176
  %178 = trunc i64 %177 to i8
  %179 = add i8 %137, %178
  %180 = add i8 %179, %129
  %181 = sub i8 %180, 25
  %182 = or i64 %3, -5334166148685416369
  %183 = and i64 -5334166148685416369, %3
  %184 = xor i64 -5334166148685416369, %3
  %185 = or i64 %183, %184
  %186 = sext i32 %dispatcher1 to i64
  %187 = and i64 %186, -8826325430366152751
  %188 = xor i64 %186, -1
  %189 = xor i64 -8826325430366152751, %188
  %190 = and i64 %189, -8826325430366152751
  %191 = and i64 %9, 6822149998838170658
  %192 = xor i64 %9, -1
  %193 = or i64 -6822149998838170659, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = xor i64 %182, %187
  %197 = xor i64 %196, %195
  %198 = xor i64 %197, 679732444979523625
  %199 = xor i64 %198, %190
  %200 = xor i64 %199, %185
  %201 = xor i64 %200, %191
  %202 = and i64 %15, 8330349402469261617
  %203 = or i64 -8330349402469261618, %15
  %204 = sub i64 %203, -8330349402469261618
  %205 = or i64 %13, -8778515145531966050
  %206 = xor i64 %13, -1
  %207 = and i64 %206, 4094947094858462097
  %208 = and i64 %13, -4094947094858462098
  %209 = or i64 %207, %208
  %210 = xor i64 -4685891699486994929, %209
  %211 = xor i64 %13, -1
  %212 = or i64 8778515145531966049, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = or i64 %210, %214
  %216 = and i64 %11, -3352231084904123518
  %217 = or i64 3352231084904123517, %11
  %218 = sub i64 %217, 3352231084904123517
  %219 = xor i64 %202, %216
  %220 = xor i64 %219, %218
  %221 = xor i64 %220, -5881649711650351054
  %222 = xor i64 %221, %215
  %223 = xor i64 %222, %204
  %224 = xor i64 %223, %205
  %225 = mul i64 %201, %224
  %226 = trunc i64 %225 to i8
  %227 = srem i8 %181, %226
  %228 = icmp eq i8 %227, 0
  %229 = and i1 %135, %228
  %230 = or i64 %13, -4329595168890097944
  %231 = and i64 -4329595168890097944, %13
  %232 = xor i64 -4329595168890097944, %13
  %233 = or i64 %231, %232
  %234 = sext i32 %dispatcher1 to i64
  %235 = add i64 %234, -1923297171630090786
  %236 = and i64 -1923297171630090786, %234
  %237 = or i64 -1923297171630090786, %234
  %238 = add i64 %236, %237
  %239 = or i64 %7, 7539711569391050760
  %240 = xor i64 %7, -1
  %241 = and i64 7539711569391050760, %240
  %242 = add i64 %241, %7
  %243 = xor i64 5215336605927926151, %230
  %244 = xor i64 %243, %235
  %245 = xor i64 %244, %233
  %246 = xor i64 %245, %242
  %247 = xor i64 %246, %238
  %248 = xor i64 %247, %239
  %249 = or i64 %13, 8117188690454344434
  %250 = xor i64 %13, -1
  %251 = and i64 %250, 8746555996612472569
  %252 = and i64 %13, -8746555996612472570
  %253 = or i64 %251, %252
  %254 = xor i64 703703165777697803, %253
  %255 = xor i64 %13, -1
  %256 = or i64 -8117188690454344435, %255
  %257 = xor i64 %256, -1
  %258 = and i64 %257, -1
  %259 = or i64 %254, %258
  %260 = and i64 %15, 1124211019205651007
  %261 = or i64 -1124211019205651008, %15
  %262 = sub i64 %261, -1124211019205651008
  %263 = xor i64 %259, %260
  %264 = xor i64 %263, %262
  %265 = xor i64 %264, %249
  %266 = xor i64 %265, 1078195018386893280
  %267 = mul i64 %248, %266
  %268 = trunc i64 %267 to i32
  %269 = select i1 %229, i32 %268, i32 388314407
  %270 = xor i32 %269, 7
  store i32 %270, i32* %2, align 4
  %271 = call i8** @bf4402142158456708617(i32* %2)
  %272 = load i8*, i8** %271, align 8
  indirectbr i8* %272, [label %loopEnd, label %121]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %273 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %273, align 4
  %274 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %274, align 4
  %275 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %275, align 4
  %276 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %276, align 4
  %277 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %278 = load i32, i32* %277, align 4
  store i32 %278, i32* %dispatcher, align 4
  %279 = load i8*, i8** %10, align 8
  %280 = load i8, i8* %279, align 1
  %281 = sext i32 %dispatcher1 to i64
  %282 = or i64 %281, -1062180675420349437
  %283 = xor i64 %281, -1
  %284 = and i64 %283, -2144804498580907982
  %285 = and i64 %281, 2144804498580907981
  %286 = or i64 %284, %285
  %287 = xor i64 1404700741337465905, %286
  %288 = xor i64 %281, -1
  %289 = or i64 1062180675420349436, %288
  %290 = xor i64 %289, -1
  %291 = and i64 %290, -1
  %292 = or i64 %287, %291
  %293 = and i64 %5, 1420829898086617547
  %294 = or i64 -1420829898086617548, %5
  %295 = sub i64 %294, -1420829898086617548
  %296 = xor i64 %292, 2100690049590261
  %297 = xor i64 %296, %293
  %298 = xor i64 %297, %282
  %299 = xor i64 %298, %295
  %300 = or i64 %11, 1513643846360222405
  %301 = xor i64 %11, -1
  %302 = and i64 %301, -6546090504082219307
  %303 = and i64 %11, 6546090504082219306
  %304 = or i64 %302, %303
  %305 = xor i64 -5753886934516706288, %304
  %306 = xor i64 %11, -1
  %307 = or i64 -1513643846360222406, %306
  %308 = xor i64 %307, -1
  %309 = and i64 %308, -1
  %310 = or i64 %305, %309
  %311 = sext i32 %dispatcher1 to i64
  %312 = and i64 %311, 9049054362842746380
  %313 = xor i64 %311, -1
  %314 = or i64 -9049054362842746381, %313
  %315 = xor i64 %314, -1
  %316 = and i64 %315, -1
  %317 = xor i64 %310, %300
  %318 = xor i64 %317, %312
  %319 = xor i64 %318, -8668066502167925597
  %320 = xor i64 %319, %316
  %321 = mul i64 %299, %320
  %322 = trunc i64 %321 to i8
  %323 = xor i8 %280, %322
  %324 = or i8 %323, -2
  %325 = xor i8 %324, -1
  %326 = and i8 %325, -1
  %327 = icmp eq i8 %326, 1
  %328 = mul i8 %280, %280
  %329 = add i8 %328, 0
  %330 = add i8 %329, %280
  %331 = sub i8 %330, 0
  %332 = srem i8 %331, 2
  %333 = add i64 %15, 7045660764547612238
  %334 = sub i64 0, %15
  %335 = add i64 -7045660764547612238, %334
  %336 = sub i64 0, %335
  %337 = add i64 %13, 4493320178721513520
  %338 = add i64 -772415491140428153, %13
  %339 = sub i64 %338, -5265735669861941673
  %340 = xor i64 %337, %333
  %341 = xor i64 %340, %336
  %342 = xor i64 %341, -1118680122488397325
  %343 = xor i64 %342, %339
  %344 = and i64 %3, 776706179557663911
  %345 = xor i64 %3, -1
  %346 = or i64 -776706179557663912, %345
  %347 = xor i64 %346, -1
  %348 = and i64 %347, -1
  %349 = add i64 %11, 4119529718648969953
  %350 = add i64 8860406102357191496, %11
  %351 = sub i64 %350, 4740876383708221543
  %352 = xor i64 0, %348
  %353 = xor i64 %352, %349
  %354 = xor i64 %353, %351
  %355 = xor i64 %354, %344
  %356 = mul i64 %343, %355
  %357 = trunc i64 %356 to i8
  %358 = icmp eq i8 %332, %357
  %359 = or i1 %327, %358
  %360 = add i64 %15, 4330206073572285875
  %361 = sub i64 0, %15
  %362 = sub i64 4330206073572285875, %361
  %363 = or i64 %7, -4804216768542094977
  %364 = and i64 -4804216768542094977, %7
  %365 = xor i64 -4804216768542094977, %7
  %366 = or i64 %364, %365
  %367 = and i64 %13, 2916798184705978282
  %368 = xor i64 %13, -1
  %369 = or i64 -2916798184705978283, %368
  %370 = xor i64 %369, -1
  %371 = and i64 %370, -1
  %372 = xor i64 %363, %367
  %373 = xor i64 %372, %371
  %374 = xor i64 %373, %360
  %375 = xor i64 %374, %366
  %376 = xor i64 %375, %362
  %377 = xor i64 %376, 8834980373387776141
  %378 = and i64 %11, -7152146318798167331
  %379 = xor i64 %11, -1
  %380 = xor i64 -7152146318798167331, %379
  %381 = and i64 %380, -7152146318798167331
  %382 = add i64 %3, -8491842777598123768
  %383 = xor i64 -8491842777598123768, %3
  %384 = and i64 -8491842777598123768, %3
  %385 = mul i64 2, %384
  %386 = add i64 %383, %385
  %387 = or i64 %13, 4538814231341101479
  %388 = and i64 4538814231341101479, %13
  %389 = xor i64 4538814231341101479, %13
  %390 = or i64 %388, %389
  %391 = xor i64 %382, %381
  %392 = xor i64 %391, %378
  %393 = xor i64 %392, %386
  %394 = xor i64 %393, %390
  %395 = xor i64 %394, -3207215127907515419
  %396 = xor i64 %395, %387
  %397 = mul i64 %377, %396
  %398 = trunc i64 %397 to i32
  %399 = select i1 %359, i32 %398, i32 388314401
  %400 = xor i32 %399, -1
  %401 = and i32 %400, 0
  %402 = and i32 %399, -1
  %403 = or i32 %401, %402
  store i32 %403, i32* %2, align 4
  %404 = call i8** @bf4402142158456708617(i32* %2)
  %405 = load i8*, i8** %404, align 8
  indirectbr i8* %405, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %406 = load i8*, i8** %4, align 8
  %407 = load i8, i8* %406, align 1
  %408 = mul i8 %407, %407
  %409 = xor i8 %408, %407
  %410 = and i8 %408, %407
  %411 = mul i8 2, %410
  %412 = add i8 %409, %411
  %413 = and i64 %3, -707276281231036257
  %414 = xor i64 %3, -1
  %415 = or i64 707276281231036256, %414
  %416 = xor i64 %415, -1
  %417 = and i64 %416, -1
  %418 = or i64 %15, 8246673571501228017
  %419 = and i64 8246673571501228017, %15
  %420 = xor i64 8246673571501228017, %15
  %421 = or i64 %419, %420
  %422 = or i64 %13, 7730580951223474045
  %423 = and i64 7730580951223474045, %13
  %424 = xor i64 7730580951223474045, %13
  %425 = or i64 %423, %424
  %426 = xor i64 %425, %422
  %427 = xor i64 %426, %417
  %428 = xor i64 %427, %421
  %429 = xor i64 %428, -3942530392363288057
  %430 = xor i64 %429, %413
  %431 = xor i64 %430, %418
  %432 = or i64 %13, -5002101901878934333
  %433 = xor i64 %13, -1
  %434 = and i64 %433, -6648899313406542802
  %435 = and i64 %13, 6648899313406542801
  %436 = or i64 %434, %435
  %437 = xor i64 1814576402840893677, %436
  %438 = xor i64 %13, -1
  %439 = or i64 5002101901878934332, %438
  %440 = xor i64 %439, -1
  %441 = and i64 %440, -1
  %442 = or i64 %437, %441
  %443 = or i64 %15, 8704735268528367737
  %444 = xor i64 %15, -1
  %445 = and i64 8704735268528367737, %444
  %446 = add i64 %445, %15
  %447 = xor i64 %442, 2919917890007546661
  %448 = xor i64 %447, %432
  %449 = xor i64 %448, %446
  %450 = xor i64 %449, %443
  %451 = mul i64 %431, %450
  %452 = trunc i64 %451 to i8
  %453 = mul i8 %412, %452
  %454 = srem i8 %453, 2
  %455 = icmp eq i8 %454, 0
  %456 = mul i8 %407, %407
  %457 = add i8 %456, %407
  %458 = srem i8 %457, 2
  %459 = icmp eq i8 %458, 0
  %460 = and i1 %455, %459
  %461 = select i1 %460, i32 388314404, i32 388314407
  %462 = xor i32 %461, 3
  store i32 %462, i32* %2, align 4
  %463 = call i8** @bf4402142158456708617(i32* %2)
  %464 = load i8*, i8** %463, align 8
  indirectbr i8* %464, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %121, %EntryBasicBlockSplit
  %465 = load i8*, i8** %8, align 8
  %466 = load i8, i8* %465, align 1
  %467 = mul i8 %466, 2
  %468 = add i64 %9, -5028980512736584861
  %469 = xor i64 -5028980512736584861, %9
  %470 = and i64 -5028980512736584861, %9
  %471 = mul i64 2, %470
  %472 = add i64 %469, %471
  %473 = add i64 %5, -8468227495027743787
  %474 = and i64 -8468227495027743787, %5
  %475 = or i64 -8468227495027743787, %5
  %476 = add i64 %474, %475
  %477 = and i64 %13, -3317892738259272612
  %478 = xor i64 %13, -1
  %479 = or i64 3317892738259272611, %478
  %480 = xor i64 %479, -1
  %481 = and i64 %480, -1
  %482 = xor i64 %476, %477
  %483 = xor i64 %482, %481
  %484 = xor i64 %483, %473
  %485 = xor i64 %484, %468
  %486 = xor i64 %485, %472
  %487 = xor i64 %486, -6641515562127474945
  %488 = sext i32 %dispatcher1 to i64
  %489 = or i64 %488, -392016601269270363
  %490 = xor i64 %488, -1
  %491 = and i64 -392016601269270363, %490
  %492 = add i64 %491, %488
  %493 = and i64 %7, -9066382307460772931
  %494 = xor i64 %7, -1
  %495 = or i64 9066382307460772930, %494
  %496 = xor i64 %495, -1
  %497 = and i64 %496, -1
  %498 = and i64 %9, -8361273278499681688
  %499 = xor i64 %9, -1
  %500 = xor i64 -8361273278499681688, %499
  %501 = and i64 %500, -8361273278499681688
  %502 = xor i64 %501, %493
  %503 = xor i64 %502, %489
  %504 = xor i64 %503, 2709236818962448894
  %505 = xor i64 %504, %498
  %506 = xor i64 %505, %492
  %507 = xor i64 %506, %497
  %508 = mul i64 %487, %507
  %509 = trunc i64 %508 to i8
  %510 = mul i8 %466, %509
  %511 = add i8 2, %510
  %512 = mul i8 %467, %511
  %513 = srem i8 %512, 4
  %514 = icmp eq i8 %513, 0
  %515 = mul i8 %466, %466
  %516 = add i8 %515, %466
  %517 = srem i8 %516, 2
  %518 = or i64 %9, 8321989805615905678
  %519 = and i64 8321989805615905678, %9
  %520 = xor i64 8321989805615905678, %9
  %521 = or i64 %519, %520
  %522 = or i64 %7, 7664622619769088358
  %523 = xor i64 %7, -1
  %524 = and i64 %523, 8349041431067214049
  %525 = and i64 %7, -8349041431067214050
  %526 = or i64 %524, %525
  %527 = xor i64 1838582846856718727, %526
  %528 = xor i64 %7, -1
  %529 = or i64 -7664622619769088359, %528
  %530 = xor i64 %529, -1
  %531 = and i64 %530, -1
  %532 = or i64 %527, %531
  %533 = and i64 %5, 4038814225645079752
  %534 = xor i64 %5, -1
  %535 = xor i64 4038814225645079752, %534
  %536 = and i64 %535, 4038814225645079752
  %537 = xor i64 %536, %518
  %538 = xor i64 %537, %521
  %539 = xor i64 %538, %522
  %540 = xor i64 %539, -614299785955679885
  %541 = xor i64 %540, %532
  %542 = xor i64 %541, %533
  %543 = and i64 %3, 2819728534791565927
  %544 = xor i64 %3, -1
  %545 = xor i64 2819728534791565927, %544
  %546 = and i64 %545, 2819728534791565927
  %547 = and i64 %15, -6257824538439345552
  %548 = xor i64 %15, -1
  %549 = or i64 6257824538439345551, %548
  %550 = xor i64 %549, -1
  %551 = and i64 %550, -1
  %552 = or i64 %3, 4762370854669705215
  %553 = and i64 4762370854669705215, %3
  %554 = xor i64 4762370854669705215, %3
  %555 = or i64 %553, %554
  %556 = xor i64 %547, 0
  %557 = xor i64 %556, %543
  %558 = xor i64 %557, %551
  %559 = xor i64 %558, %546
  %560 = xor i64 %559, %552
  %561 = xor i64 %560, %555
  %562 = mul i64 %542, %561
  %563 = trunc i64 %562 to i8
  %564 = icmp eq i8 %517, %563
  %565 = and i1 %514, %564
  %566 = sext i32 %dispatcher1 to i64
  %567 = add i64 %566, 9093844941009226268
  %568 = xor i64 9093844941009226268, %566
  %569 = and i64 9093844941009226268, %566
  %570 = mul i64 2, %569
  %571 = add i64 %568, %570
  %572 = sext i32 %dispatcher1 to i64
  %573 = add i64 %572, 6728849078510123395
  %574 = add i64 -4071964841587605823, %572
  %575 = add i64 %574, -7645930153611822398
  %576 = xor i64 %575, -4018910494935320951
  %577 = xor i64 %576, %567
  %578 = xor i64 %577, %571
  %579 = xor i64 %578, %573
  %580 = sext i32 %dispatcher1 to i64
  %581 = add i64 %580, -7305669853773551001
  %582 = add i64 3063850855525908147, %580
  %583 = sub i64 %582, -8077223364410092468
  %584 = or i64 %3, -6137403278105592116
  %585 = and i64 -6137403278105592116, %3
  %586 = xor i64 -6137403278105592116, %3
  %587 = or i64 %585, %586
  %588 = xor i64 -4359687256186690741, %581
  %589 = xor i64 %588, %587
  %590 = xor i64 %589, %583
  %591 = xor i64 %590, %584
  %592 = mul i64 %579, %591
  %593 = trunc i64 %592 to i32
  %594 = select i1 %565, i32 %593, i32 388314406
  %595 = xor i32 %594, -1
  %596 = and i32 %595, 5
  %597 = and i32 %594, -6
  %598 = or i32 %596, %597
  store i32 %598, i32* %2, align 4
  %599 = call i8** @bf4402142158456708617(i32* %2)
  %600 = load i8*, i8** %599, align 8
  indirectbr i8* %600, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @clear.extracted.extracted(i64 %0, i64* %.out6, i64* %.out7, i1 %1) #1 {
entry:
  %2 = and i64 %0, 5692244891912178036
  %3 = xor i64 %0, -1
  %4 = xor i64 5692244891912178036, %3
  %5 = and i64 %4, 5692244891912178036
  %6 = and i64 %0, 6976426801453298835
  %7 = or i64 -6976426801453298836, %0
  %8 = sub i64 %7, -6976426801453298836
  %9 = and i64 %0, 5011997199203443602
  %10 = xor i64 %0, -1
  %11 = or i64 -5011997199203443603, %10
  %12 = xor i64 %11, -1
  %13 = and i64 %12, -1
  %14 = xor i64 %5, -528282653850881359
  %15 = xor i64 %14, %2
  %16 = xor i64 %15, %8
  %17 = xor i64 %16, %9
  %18 = xor i64 %17, %6
  %19 = xor i64 %18, %13
  %20 = add i64 %0, 8611578999415614983
  %21 = sub i64 0, %0
  %22 = sub i64 8611578999415614983, %21
  %23 = or i64 %0, -6124630494504817726
  %24 = xor i64 %0, -1
  %25 = and i64 %24, -7891331272976055044
  %26 = and i64 %0, 7891331272976055043
  %27 = or i64 %25, %26
  %28 = xor i64 4142376006068940606, %27
  %29 = xor i64 %0, -1
  %30 = or i64 6124630494504817725, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = or i64 %28, %32
  %34 = xor i64 %23, 1635535763588863569
  %35 = xor i64 %34, %33
  %36 = xor i64 %35, %22
  %37 = xor i64 %36, %20
  %38 = mul i64 %19, %37
  %39 = trunc i64 %38 to i32
  %40 = alloca i32, i32 %39, align 4
  %41 = call i64 @h9549842938191327224(i64 388314457)
  %42 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %41
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub8.exitStub), i8** %42, align 8
  %43 = call i64 @h9549842938191327224(i64 388314400)
  %44 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %43
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub.exitStub), i8** %44, align 8
  %45 = call i64 @h9549842938191327224(i64 388314375)
  %46 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %45
  store i8* blockaddress(@clear.extracted.extracted, %EntryBasicBlockSplit), i8** %46, align 8
  %47 = call i64 @h9549842938191327224(i64 388314379)
  %48 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %47
  store i8* blockaddress(@clear.extracted.extracted, %"2"), i8** %48, align 8
  %49 = call i64 @h9549842938191327224(i64 388314380)
  %50 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %49
  store i8* blockaddress(@clear.extracted.extracted, %BogusBasciBlock), i8** %50, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %51 = and i64 %0, 1740944390302315971
  %52 = xor i64 %0, -1
  %53 = or i64 -1740944390302315972, %52
  %54 = xor i64 %53, -1
  %55 = and i64 %54, -1
  %56 = add i64 %0, 2684294262342289053
  %57 = add i64 -8255657201691256730, %0
  %58 = add i64 %57, -7506792609676005833
  %59 = xor i64 %55, %51
  %60 = xor i64 %59, %56
  %61 = xor i64 %60, 8610407249138867865
  %62 = xor i64 %61, %58
  %63 = and i64 %0, -7808203053998867970
  %64 = xor i64 %0, -1
  %65 = xor i64 -7808203053998867970, %64
  %66 = and i64 %65, -7808203053998867970
  %67 = add i64 %0, -4497476214303460519
  %68 = xor i64 -4497476214303460519, %0
  %69 = and i64 -4497476214303460519, %0
  %70 = mul i64 2, %69
  %71 = add i64 %68, %70
  %72 = add i64 %0, 7569923216042128552
  %73 = and i64 7569923216042128552, %0
  %74 = or i64 7569923216042128552, %0
  %75 = add i64 %73, %74
  %76 = xor i64 %63, %75
  %77 = xor i64 %76, %72
  %78 = xor i64 %77, %66
  %79 = xor i64 %78, -7553721588729582515
  %80 = xor i64 %79, %67
  %81 = xor i64 %80, %71
  %82 = mul i64 %62, %81
  %83 = trunc i64 %82 to i32
  %JumpTable = alloca i8*, i32 %83, align 8
  %84 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted.extracted, %BogusBasciBlock), i8** %84, align 8
  %85 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %85, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@clear.extracted.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %86 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %86, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@clear.extracted.extracted, %"2"), i8** %.reload5, align 8
  %87 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %87, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %88 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %88, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub8.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %89 = load i8*, i8** %.reload, align 8
  indirectbr i8* %89, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub8.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %90 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted.extracted, %BogusBasciBlock), i8** %90, align 8
  %91 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@clear.extracted.extracted, %"2"), i8** %91, align 8
  %92 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub8.exitStub), i8** %92, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %93 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %93, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub8.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %94 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %94, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub8.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 %0, i64* %.out6, align 8
  %95 = add i64 8, 65
  store i64 %95, i64* %.out7, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %96 = select i1 %1, i8** %.reload7, i8** %.reload10
  %97 = load i8*, i8** %96, align 8
  indirectbr i8* %97, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub8.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %98 = or i64 %41, 1304572838307200406
  %99 = and i64 1304572838307200406, %41
  %100 = xor i64 1304572838307200406, %41
  %101 = or i64 %99, %100
  %102 = and i64 %43, 2043971213632757131
  %103 = xor i64 %43, -1
  %104 = xor i64 2043971213632757131, %103
  %105 = and i64 %104, 2043971213632757131
  %106 = xor i64 2705332876453006607, %102
  %107 = xor i64 %106, %105
  %108 = xor i64 %107, %98
  %109 = xor i64 %108, %101
  %110 = add i64 %43, -2938517902872278046
  %111 = add i64 -1616316752529464127, %43
  %112 = add i64 %111, -1322201150342813919
  %113 = or i64 %41, -1844249401089109547
  %114 = xor i64 %41, -1
  %115 = and i64 -1844249401089109547, %114
  %116 = add i64 %115, %41
  %117 = and i64 %41, 6262137036562753785
  %118 = xor i64 %41, -1
  %119 = xor i64 6262137036562753785, %118
  %120 = and i64 %119, 6262137036562753785
  %121 = xor i64 1613984325289279983, %116
  %122 = xor i64 %121, %117
  %123 = xor i64 %122, %113
  %124 = xor i64 %123, %112
  %125 = xor i64 %124, %110
  %126 = xor i64 %125, %120
  %127 = mul i64 %109, %126
  %128 = trunc i64 %127 to i1
  ret i1 %128

.exitStub8.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted(i32 %0) #5 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314378)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@main.extracted, %loopEnd), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314482)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@main.extracted, %.exitStub), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314410)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@main.extracted, %271), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314530)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@main.extracted, %BogusBasicBlock), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314383)
  %11 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %10
  store i8* blockaddress(@main.extracted, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314402)
  %13 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %12
  store i8* blockaddress(@main.extracted, %defaultSwitchBasicBlock), i8** %13, align 8
  %14 = sext i32 %0 to i64
  %15 = or i64 %14, -2607946681595259222
  %16 = xor i64 %14, -1
  %17 = and i64 %16, 6244496814831264238
  %18 = and i64 %14, -6244496814831264239
  %19 = or i64 %17, %18
  %20 = xor i64 -8257808914783373500, %19
  %21 = xor i64 %14, -1
  %22 = or i64 2607946681595259221, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = or i64 %20, %24
  %26 = sext i32 %0 to i64
  %27 = add i64 %26, 9018047264208815778
  %28 = xor i64 9018047264208815778, %26
  %29 = and i64 9018047264208815778, %26
  %30 = mul i64 2, %29
  %31 = add i64 %28, %30
  %32 = xor i64 %31, %25
  %33 = xor i64 %32, -4035809446528842141
  %34 = xor i64 %33, %15
  %35 = xor i64 %34, %27
  %36 = sext i32 %0 to i64
  %37 = and i64 %36, -1949868397796493956
  %38 = xor i64 %36, -1
  %39 = xor i64 -1949868397796493956, %38
  %40 = and i64 %39, -1949868397796493956
  %41 = sext i32 %0 to i64
  %42 = and i64 %41, 5986195417671323065
  %43 = xor i64 %41, -1
  %44 = xor i64 5986195417671323065, %43
  %45 = and i64 %44, 5986195417671323065
  %46 = xor i64 %37, %40
  %47 = xor i64 %46, %45
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, 2151602914115826712
  %50 = mul i64 %35, %49
  %51 = call i64 @h9549842938191327224(i64 %50)
  %52 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %51
  store i8* blockaddress(@main.extracted, %.exitStub1), i8** %52, align 8
  %53 = call i64 @h9549842938191327224(i64 388314484)
  %54 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %53
  store i8* blockaddress(@main.extracted, %loopStart), i8** %54, align 8
  %55 = sext i32 %0 to i64
  %56 = and i64 %55, 6582290370098117851
  %57 = or i64 -6582290370098117852, %55
  %58 = sub i64 %57, -6582290370098117852
  %59 = sext i32 %0 to i64
  %60 = add i64 %59, -2780164676199505883
  %61 = sub i64 0, %59
  %62 = sub i64 -2780164676199505883, %61
  %63 = sext i32 %0 to i64
  %64 = or i64 %63, -3071115781530276717
  %65 = xor i64 %63, -1
  %66 = and i64 -3071115781530276717, %65
  %67 = add i64 %66, %63
  %68 = xor i64 %62, 3564378969525953577
  %69 = xor i64 %68, %60
  %70 = xor i64 %69, %56
  %71 = xor i64 %70, %67
  %72 = xor i64 %71, %64
  %73 = xor i64 %72, %58
  %74 = sext i32 %0 to i64
  %75 = and i64 %74, -1890901878748803580
  %76 = xor i64 %74, -1
  %77 = or i64 1890901878748803579, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = sext i32 %0 to i64
  %81 = and i64 %80, -2788791535653710350
  %82 = xor i64 %80, -1
  %83 = or i64 2788791535653710349, %82
  %84 = xor i64 %83, -1
  %85 = and i64 %84, -1
  %86 = sext i32 %0 to i64
  %87 = or i64 %86, -7593370498537595120
  %88 = xor i64 %86, -1
  %89 = and i64 -7593370498537595120, %88
  %90 = add i64 %89, %86
  %91 = xor i64 %79, %87
  %92 = xor i64 %91, %90
  %93 = xor i64 %92, -2000890945366116327
  %94 = xor i64 %93, %81
  %95 = xor i64 %94, %75
  %96 = xor i64 %95, %85
  %97 = mul i64 %73, %96
  %98 = trunc i64 %97 to i32
  %lookupTable = alloca [9 x i32], i32 %98, align 4
  %99 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %100 = sext i32 %0 to i64
  %101 = and i64 %100, 7671794391186158580
  %102 = or i64 -7671794391186158581, %100
  %103 = sub i64 %102, -7671794391186158581
  %104 = sext i32 %0 to i64
  %105 = add i64 %104, -1872678444007300678
  %106 = and i64 -1872678444007300678, %104
  %107 = or i64 -1872678444007300678, %104
  %108 = add i64 %106, %107
  %109 = sext i32 %0 to i64
  %110 = or i64 %109, -5043052470664487600
  %111 = xor i64 %109, -1
  %112 = and i64 %111, 2960875954427786613
  %113 = and i64 %109, -2960875954427786614
  %114 = or i64 %112, %113
  %115 = xor i64 -7848544340412798939, %114
  %116 = xor i64 %109, -1
  %117 = or i64 5043052470664487599, %116
  %118 = xor i64 %117, -1
  %119 = and i64 %118, -1
  %120 = or i64 %115, %119
  %121 = xor i64 %120, %108
  %122 = xor i64 %121, %105
  %123 = xor i64 %122, %101
  %124 = xor i64 %123, %110
  %125 = xor i64 %124, -5622532857965454325
  %126 = xor i64 %125, %103
  %127 = sext i32 %0 to i64
  %128 = and i64 %127, -5118753486703674730
  %129 = xor i64 %127, -1
  %130 = xor i64 -5118753486703674730, %129
  %131 = and i64 %130, -5118753486703674730
  %132 = sext i32 %0 to i64
  %133 = or i64 %132, 4486851863579267631
  %134 = and i64 4486851863579267631, %132
  %135 = xor i64 4486851863579267631, %132
  %136 = or i64 %134, %135
  %137 = sext i32 %0 to i64
  %138 = add i64 %137, 5497093238634327744
  %139 = sub i64 0, %137
  %140 = add i64 -5497093238634327744, %139
  %141 = sub i64 0, %140
  %142 = xor i64 7170376310017593623, %136
  %143 = xor i64 %142, %131
  %144 = xor i64 %143, %141
  %145 = xor i64 %144, %133
  %146 = xor i64 %145, %128
  %147 = xor i64 %146, %138
  %148 = mul i64 %126, %147
  %149 = trunc i64 %148 to i32
  store i32 %149, i32* %99, align 4
  %150 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %150, align 4
  %151 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %151, align 4
  %152 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %152, align 4
  %153 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %153, align 4
  %154 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %154, align 4
  %155 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %155, align 4
  %156 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %156, align 4
  %157 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %157, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314484, i32* %1, align 4
  %158 = call i8** @bf3325468485390379012(i32* %1)
  %159 = load i8*, i8** %158, align 8
  indirectbr i8* %159, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %271
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %160 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %161, %163
  store i32 %164, i32* %dispatcher, align 4
  %165 = load i8*, i8** %11, align 8
  %166 = load i8, i8* %165, align 1
  %167 = mul i8 %166, 2
  %168 = mul i8 %166, 2
  %169 = and i64 %2, 2754392358285355008
  %170 = xor i64 %2, -1
  %171 = or i64 -2754392358285355009, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = or i64 %4, -6785557167702344887
  %175 = xor i64 %4, -1
  %176 = and i64 %175, -7922688806758715834
  %177 = and i64 %4, 7922688806758715833
  %178 = or i64 %176, %177
  %179 = xor i64 3735787794255058191, %178
  %180 = xor i64 %4, -1
  %181 = or i64 6785557167702344886, %180
  %182 = xor i64 %181, -1
  %183 = and i64 %182, -1
  %184 = or i64 %179, %183
  %185 = add i64 %12, -7613072520385269656
  %186 = add i64 4948876305146994158, %12
  %187 = sub i64 %186, -5884795248177287802
  %188 = xor i64 %173, %187
  %189 = xor i64 %188, %174
  %190 = xor i64 %189, %185
  %191 = xor i64 %190, %184
  %192 = xor i64 %191, %169
  %193 = xor i64 %192, -7793616490655518475
  %194 = sext i32 %0 to i64
  %195 = or i64 %194, -3766994964136725339
  %196 = xor i64 %194, -1
  %197 = and i64 %196, -7537285665909830341
  %198 = and i64 %194, 7537285665909830340
  %199 = or i64 %197, %198
  %200 = xor i64 6692028636800547230, %199
  %201 = xor i64 %194, -1
  %202 = or i64 3766994964136725338, %201
  %203 = xor i64 %202, -1
  %204 = and i64 %203, -1
  %205 = or i64 %200, %204
  %206 = and i64 %4, 5532122995123601162
  %207 = xor i64 %4, -1
  %208 = xor i64 5532122995123601162, %207
  %209 = and i64 %208, 5532122995123601162
  %210 = xor i64 %206, %195
  %211 = xor i64 %210, -4346517821484796230
  %212 = xor i64 %211, %205
  %213 = xor i64 %212, %209
  %214 = mul i64 %193, %213
  %215 = trunc i64 %214 to i8
  %216 = add i8 %215, %168
  %217 = mul i8 %167, %216
  %218 = srem i8 %217, 4
  %219 = icmp eq i8 %218, 0
  %220 = mul i8 %166, %166
  %221 = xor i8 %220, %166
  %222 = and i8 %220, %166
  %223 = mul i8 2, %222
  %224 = add i8 %221, %223
  %225 = srem i8 %224, 2
  %226 = icmp eq i8 %225, 0
  %227 = and i1 %219, %226
  %228 = or i64 %4, 6362040918753445804
  %229 = xor i64 %4, -1
  %230 = and i64 %229, -7878570054091261528
  %231 = and i64 %4, 7878570054091261527
  %232 = or i64 %230, %231
  %233 = xor i64 -3827161634945581564, %232
  %234 = xor i64 %4, -1
  %235 = or i64 -6362040918753445805, %234
  %236 = xor i64 %235, -1
  %237 = and i64 %236, -1
  %238 = or i64 %233, %237
  %239 = and i64 %12, 9065243282981520258
  %240 = xor i64 %12, -1
  %241 = xor i64 9065243282981520258, %240
  %242 = and i64 %241, 9065243282981520258
  %243 = xor i64 %239, %242
  %244 = xor i64 %243, -1244291971417674927
  %245 = xor i64 %244, %228
  %246 = xor i64 %245, %238
  %247 = and i64 %53, 5778553421608713964
  %248 = xor i64 %53, -1
  %249 = xor i64 5778553421608713964, %248
  %250 = and i64 %249, 5778553421608713964
  %251 = and i64 %10, 773202487505386348
  %252 = or i64 -773202487505386349, %10
  %253 = sub i64 %252, -773202487505386349
  %254 = sext i32 %0 to i64
  %255 = and i64 %254, -4965372966956277952
  %256 = xor i64 %254, -1
  %257 = xor i64 -4965372966956277952, %256
  %258 = and i64 %257, -4965372966956277952
  %259 = xor i64 -7883133124190627532, %247
  %260 = xor i64 %259, %258
  %261 = xor i64 %260, %251
  %262 = xor i64 %261, %250
  %263 = xor i64 %262, %255
  %264 = xor i64 %263, %253
  %265 = mul i64 %246, %264
  %266 = trunc i64 %265 to i32
  %267 = select i1 %227, i32 %266, i32 388314378
  %268 = xor i32 %267, 126
  store i32 %268, i32* %1, align 4
  %269 = call i8** @bf3325468485390379012(i32* %1)
  %270 = load i8*, i8** %269, align 8
  indirectbr i8* %270, [label %loopEnd, label %EntryBasicBlockSplit]

271:                                              ; preds = %271, %loopStart
  %272 = srem i32 %0, 2
  %273 = icmp eq i32 %272, 0
  %274 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %277 = load i32, i32* %276, align 4
  %278 = add i32 %275, %277
  %279 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %282 = load i32, i32* %281, align 4
  %283 = srem i32 %280, %282
  %284 = select i1 %273, i32 %278, i32 %283
  store i32 %284, i32* %dispatcher, align 4
  %285 = load i8*, i8** %5, align 8
  %286 = load i8, i8* %285, align 1
  %287 = and i8 %286, 1
  %288 = icmp eq i8 %287, 1
  %289 = mul i8 %286, %286
  %290 = add i8 %289, %286
  %291 = or i64 %53, 2639585983088642294
  %292 = xor i64 %53, -1
  %293 = and i64 2639585983088642294, %292
  %294 = add i64 %293, %53
  %295 = or i64 %51, -7579985874944893293
  %296 = xor i64 %51, -1
  %297 = and i64 -7579985874944893293, %296
  %298 = add i64 %297, %51
  %299 = add i64 %8, -1793187381424488246
  %300 = sub i64 0, %8
  %301 = sub i64 -1793187381424488246, %300
  %302 = xor i64 %295, %299
  %303 = xor i64 %302, %301
  %304 = xor i64 %303, -4799259130318870999
  %305 = xor i64 %304, %294
  %306 = xor i64 %305, %291
  %307 = xor i64 %306, %298
  %308 = sext i32 %dispatcher1 to i64
  %309 = add i64 %308, -7340860682033536830
  %310 = xor i64 -7340860682033536830, %308
  %311 = and i64 -7340860682033536830, %308
  %312 = mul i64 2, %311
  %313 = add i64 %310, %312
  %314 = and i64 %8, 3699030715741894585
  %315 = or i64 -3699030715741894586, %8
  %316 = sub i64 %315, -3699030715741894586
  %317 = or i64 %51, 9044481137923099328
  %318 = and i64 9044481137923099328, %51
  %319 = xor i64 9044481137923099328, %51
  %320 = or i64 %318, %319
  %321 = xor i64 %317, %316
  %322 = xor i64 %321, %320
  %323 = xor i64 %322, 2006990931275263026
  %324 = xor i64 %323, %309
  %325 = xor i64 %324, %314
  %326 = xor i64 %325, %313
  %327 = mul i64 %307, %326
  %328 = trunc i64 %327 to i8
  %329 = srem i8 %290, %328
  %330 = icmp eq i8 %329, 0
  %331 = and i1 %288, %330
  %332 = xor i1 %288, %330
  %333 = or i1 %331, %332
  %334 = or i64 %4, 272091167772733319
  %335 = xor i64 %4, -1
  %336 = and i64 %335, -334520330711497417
  %337 = and i64 %4, 334520330711497416
  %338 = or i64 %336, %337
  %339 = xor i64 -532230759586010448, %338
  %340 = xor i64 %4, -1
  %341 = or i64 -272091167772733320, %340
  %342 = xor i64 %341, -1
  %343 = and i64 %342, -1
  %344 = or i64 %339, %343
  %345 = sext i32 %dispatcher1 to i64
  %346 = add i64 %345, 2963933463887662713
  %347 = and i64 2963933463887662713, %345
  %348 = or i64 2963933463887662713, %345
  %349 = add i64 %347, %348
  %350 = sext i32 %dispatcher1 to i64
  %351 = add i64 %350, 3695020733170386743
  %352 = add i64 -175256623515024528, %350
  %353 = sub i64 %352, -3870277356685411271
  %354 = xor i64 %344, %351
  %355 = xor i64 %354, %353
  %356 = xor i64 %355, %334
  %357 = xor i64 %356, %349
  %358 = xor i64 %357, %346
  %359 = xor i64 %358, -4984007710762329671
  %360 = add i64 %12, -237482948748860479
  %361 = sub i64 0, %12
  %362 = sub i64 -237482948748860479, %361
  %363 = sext i32 %dispatcher1 to i64
  %364 = add i64 %363, 8347733438368450464
  %365 = add i64 -7250023569822701295, %363
  %366 = add i64 %365, -2848987065518399857
  %367 = or i64 %2, -8346176792031673561
  %368 = xor i64 %2, -1
  %369 = and i64 %368, 2247515484616205877
  %370 = and i64 %2, -2247515484616205878
  %371 = or i64 %369, %370
  %372 = xor i64 -7846208427554839278, %371
  %373 = xor i64 %2, -1
  %374 = or i64 8346176792031673560, %373
  %375 = xor i64 %374, -1
  %376 = and i64 %375, -1
  %377 = or i64 %372, %376
  %378 = xor i64 %362, %367
  %379 = xor i64 %378, %360
  %380 = xor i64 %379, %377
  %381 = xor i64 %380, %364
  %382 = xor i64 %381, %366
  %383 = xor i64 %382, 230075232134851506
  %384 = mul i64 %359, %383
  %385 = trunc i64 %384 to i32
  %386 = select i1 %333, i32 %385, i32 388314378
  %387 = xor i32 %386, 168
  store i32 %387, i32* %1, align 4
  %388 = call i8** @bf3325468485390379012(i32* %1)
  %389 = load i8*, i8** %388, align 8
  indirectbr i8* %389, [label %loopEnd, label %271]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %390 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %390, align 4
  %391 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %391, align 4
  %392 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %392, align 4
  %393 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %393, align 4
  %394 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %394, align 4
  %395 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %396 = load i32, i32* %395, align 4
  store i32 %396, i32* %dispatcher, align 4
  %397 = load i8*, i8** %11, align 8
  %398 = load i8, i8* %397, align 1
  %399 = mul i8 %398, 2
  %400 = or i64 %10, -4068656033066415813
  %401 = and i64 -4068656033066415813, %10
  %402 = xor i64 -4068656033066415813, %10
  %403 = or i64 %401, %402
  %404 = and i64 %53, -5032162239530630476
  %405 = xor i64 %53, -1
  %406 = or i64 5032162239530630475, %405
  %407 = xor i64 %406, -1
  %408 = and i64 %407, -1
  %409 = or i64 %8, -2334124973241833472
  %410 = xor i64 %8, -1
  %411 = and i64 -2334124973241833472, %410
  %412 = add i64 %411, %8
  %413 = xor i64 %403, %409
  %414 = xor i64 %413, %404
  %415 = xor i64 %414, %412
  %416 = xor i64 %415, %400
  %417 = xor i64 %416, 607711779860069383
  %418 = xor i64 %417, %408
  %419 = or i64 %8, -6659683136513624979
  %420 = and i64 -6659683136513624979, %8
  %421 = xor i64 -6659683136513624979, %8
  %422 = or i64 %420, %421
  %423 = and i64 %12, -5235567480523375102
  %424 = xor i64 %12, -1
  %425 = xor i64 -5235567480523375102, %424
  %426 = and i64 %425, -5235567480523375102
  %427 = xor i64 %423, %419
  %428 = xor i64 %427, 3316465426200978286
  %429 = xor i64 %428, %422
  %430 = xor i64 %429, %426
  %431 = mul i64 %418, %430
  %432 = trunc i64 %431 to i8
  %433 = mul i8 %398, %432
  %434 = add i64 %51, 3981122179490447704
  %435 = and i64 3981122179490447704, %51
  %436 = or i64 3981122179490447704, %51
  %437 = add i64 %435, %436
  %438 = add i64 %6, -3690484264460904341
  %439 = xor i64 -3690484264460904341, %6
  %440 = and i64 -3690484264460904341, %6
  %441 = mul i64 2, %440
  %442 = add i64 %439, %441
  %443 = or i64 %8, -2271493426779382988
  %444 = xor i64 %8, -1
  %445 = and i64 -2271493426779382988, %444
  %446 = add i64 %445, %8
  %447 = xor i64 %442, %434
  %448 = xor i64 %447, %446
  %449 = xor i64 %448, %443
  %450 = xor i64 %449, %438
  %451 = xor i64 %450, %437
  %452 = xor i64 %451, -2545216230218822385
  %453 = add i64 %6, 3014650372637661205
  %454 = sub i64 0, %6
  %455 = add i64 -3014650372637661205, %454
  %456 = sub i64 0, %455
  %457 = or i64 %51, -5739870260711355299
  %458 = xor i64 %51, -1
  %459 = and i64 %458, -2811748968557719274
  %460 = and i64 %51, 2811748968557719273
  %461 = or i64 %459, %460
  %462 = xor i64 7542767815580933451, %461
  %463 = xor i64 %51, -1
  %464 = or i64 5739870260711355298, %463
  %465 = xor i64 %464, -1
  %466 = and i64 %465, -1
  %467 = or i64 %462, %466
  %468 = and i64 %10, -2798649853198228012
  %469 = xor i64 %10, -1
  %470 = or i64 2798649853198228011, %469
  %471 = xor i64 %470, -1
  %472 = and i64 %471, -1
  %473 = xor i64 %468, %457
  %474 = xor i64 %473, %453
  %475 = xor i64 %474, %467
  %476 = xor i64 %475, -8525242331463711778
  %477 = xor i64 %476, %456
  %478 = xor i64 %477, %472
  %479 = mul i64 %452, %478
  %480 = trunc i64 %479 to i8
  %481 = and i8 %480, %433
  %482 = or i8 2, %433
  %483 = add i8 %481, %482
  %484 = mul i8 %399, %483
  %485 = srem i8 %484, 4
  %486 = icmp eq i8 %485, 0
  %487 = mul i8 %398, %398
  %488 = xor i8 %487, %398
  %489 = and i8 %487, %398
  %490 = mul i8 2, %489
  %491 = add i8 %488, %490
  %492 = srem i8 %491, 2
  %493 = icmp eq i8 %492, 0
  %494 = or i1 %486, %493
  %495 = select i1 %494, i32 388314383, i32 388314383
  %496 = xor i32 %495, 0
  store i32 %496, i32* %1, align 4
  %497 = call i8** @bf3325468485390379012(i32* %1)
  %498 = load i8*, i8** %497, align 8
  indirectbr i8* %498, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %499 = load i8*, i8** %54, align 8
  %500 = load i8, i8* %499, align 1
  %501 = and i8 %500, 1
  %502 = icmp eq i8 %501, 1
  %503 = mul i8 %500, %500
  %504 = add i8 %503, %500
  %505 = srem i8 %504, 2
  %506 = icmp eq i8 %505, 0
  %507 = or i1 %502, %506
  %508 = select i1 %507, i32 388314383, i32 388314378
  %509 = xor i32 %508, 5
  store i32 %509, i32* %1, align 4
  %510 = call i8** @bf3325468485390379012(i32* %1)
  %511 = load i8*, i8** %510, align 8
  indirectbr i8* %511, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %271, %EntryBasicBlockSplit
  %512 = load i8*, i8** %3, align 8
  %513 = load i8, i8* %512, align 1
  %514 = mul i8 %513, 2
  %515 = mul i8 %513, 2
  %516 = sub i8 0, %515
  %517 = sext i32 %0 to i64
  %518 = add i64 %517, 2022340784127894589
  %519 = xor i64 2022340784127894589, %517
  %520 = and i64 2022340784127894589, %517
  %521 = mul i64 2, %520
  %522 = add i64 %519, %521
  %523 = sext i32 %dispatcher1 to i64
  %524 = and i64 %523, 2821777086892138918
  %525 = xor i64 %523, -1
  %526 = or i64 -2821777086892138919, %525
  %527 = xor i64 %526, -1
  %528 = and i64 %527, -1
  %529 = sext i32 %0 to i64
  %530 = or i64 %529, 7478268088805834115
  %531 = and i64 7478268088805834115, %529
  %532 = xor i64 7478268088805834115, %529
  %533 = or i64 %531, %532
  %534 = xor i64 -4822968790142682647, %518
  %535 = xor i64 %534, %528
  %536 = xor i64 %535, %530
  %537 = xor i64 %536, %522
  %538 = xor i64 %537, %524
  %539 = xor i64 %538, %533
  %540 = and i64 %6, -3078132474132955886
  %541 = or i64 3078132474132955885, %6
  %542 = sub i64 %541, 3078132474132955885
  %543 = and i64 %12, -6299276541115374808
  %544 = or i64 6299276541115374807, %12
  %545 = sub i64 %544, 6299276541115374807
  %546 = xor i64 %540, %542
  %547 = xor i64 %546, %543
  %548 = xor i64 %547, 135158750532132018
  %549 = xor i64 %548, %545
  %550 = mul i64 %539, %549
  %551 = trunc i64 %550 to i8
  %552 = sub i8 %551, %516
  %553 = mul i8 %514, %552
  %554 = srem i8 %553, 4
  %555 = sext i32 %dispatcher1 to i64
  %556 = or i64 %555, -7488384287231485027
  %557 = and i64 -7488384287231485027, %555
  %558 = xor i64 -7488384287231485027, %555
  %559 = or i64 %557, %558
  %560 = sext i32 %dispatcher1 to i64
  %561 = or i64 %560, -4209217288963346725
  %562 = xor i64 %560, -1
  %563 = and i64 -4209217288963346725, %562
  %564 = add i64 %563, %560
  %565 = add i64 %12, -3799785239105453787
  %566 = sub i64 0, %12
  %567 = sub i64 -3799785239105453787, %566
  %568 = xor i64 726454990338732787, %561
  %569 = xor i64 %568, %556
  %570 = xor i64 %569, %564
  %571 = xor i64 %570, %567
  %572 = xor i64 %571, %565
  %573 = xor i64 %572, %559
  %574 = add i64 %2, -2013138756086411392
  %575 = sub i64 0, %2
  %576 = sub i64 -2013138756086411392, %575
  %577 = sext i32 %dispatcher1 to i64
  %578 = or i64 %577, 1672386974591791915
  %579 = xor i64 %577, -1
  %580 = and i64 1672386974591791915, %579
  %581 = add i64 %580, %577
  %582 = xor i64 %578, %581
  %583 = xor i64 %582, %574
  %584 = xor i64 %583, 0
  %585 = xor i64 %584, %576
  %586 = mul i64 %573, %585
  %587 = trunc i64 %586 to i8
  %588 = icmp eq i8 %554, %587
  %589 = mul i8 %513, %513
  %590 = add i8 %589, 79
  %591 = add i8 %590, %513
  %592 = sub i8 %591, 79
  %593 = srem i8 %592, 2
  %594 = icmp eq i8 %593, 0
  %595 = and i1 %588, %594
  %596 = add i64 %10, 8262230184402989254
  %597 = add i64 8960670156599312731, %10
  %598 = add i64 %597, -698439972196323477
  %599 = sext i32 %0 to i64
  %600 = add i64 %599, 626478148251552584
  %601 = and i64 626478148251552584, %599
  %602 = or i64 626478148251552584, %599
  %603 = add i64 %601, %602
  %604 = xor i64 %603, %596
  %605 = xor i64 %604, %600
  %606 = xor i64 %605, -1207962225656735045
  %607 = xor i64 %606, %598
  %608 = or i64 %53, -3091473035522624027
  %609 = xor i64 %53, -1
  %610 = and i64 -3091473035522624027, %609
  %611 = add i64 %610, %53
  %612 = add i64 %53, -3881098540067197554
  %613 = add i64 5346745148822259162, %53
  %614 = add i64 %613, 9218900384820094900
  %615 = or i64 %6, 1659126800545652697
  %616 = xor i64 %6, -1
  %617 = and i64 %616, 5493376564413950638
  %618 = and i64 %6, -5493376564413950639
  %619 = or i64 %617, %618
  %620 = xor i64 6573570907720381815, %619
  %621 = xor i64 %6, -1
  %622 = or i64 -1659126800545652698, %621
  %623 = xor i64 %622, -1
  %624 = and i64 %623, -1
  %625 = or i64 %620, %624
  %626 = xor i64 %615, %625
  %627 = xor i64 %626, %614
  %628 = xor i64 %627, 5677674700505765758
  %629 = xor i64 %628, %611
  %630 = xor i64 %629, %608
  %631 = xor i64 %630, %612
  %632 = mul i64 %607, %631
  %633 = trunc i64 %632 to i32
  %634 = select i1 %595, i32 %633, i32 388314484
  %635 = xor i32 %634, 126
  store i32 %635, i32* %1, align 4
  %636 = call i8** @bf3325468485390379012(i32* %1)
  %637 = load i8*, i8** %636, align 8
  indirectbr i8* %637, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.10(i32 %0, i32 %1, i1* %.out) #5 {
entry:
  %2 = sext i32 %1 to i64
  %3 = and i64 %2, 7063185908264255856
  %4 = or i64 -7063185908264255857, %2
  %5 = sub i64 %4, -7063185908264255857
  %6 = sext i32 %1 to i64
  %7 = and i64 %6, -7942305266928504567
  %8 = xor i64 %6, -1
  %9 = or i64 7942305266928504566, %8
  %10 = xor i64 %9, -1
  %11 = and i64 %10, -1
  %12 = sext i32 %0 to i64
  %13 = and i64 %12, 8426859116951559124
  %14 = or i64 -8426859116951559125, %12
  %15 = sub i64 %14, -8426859116951559125
  %16 = xor i64 %15, %3
  %17 = xor i64 %16, %5
  %18 = xor i64 %17, 4540680402607594777
  %19 = xor i64 %18, %7
  %20 = xor i64 %19, %13
  %21 = xor i64 %20, %11
  %22 = sext i32 %0 to i64
  %23 = and i64 %22, 6212614770015244223
  %24 = xor i64 %22, -1
  %25 = xor i64 6212614770015244223, %24
  %26 = and i64 %25, 6212614770015244223
  %27 = sext i32 %0 to i64
  %28 = and i64 %27, -4947043234441167986
  %29 = xor i64 %27, -1
  %30 = or i64 4947043234441167985, %29
  %31 = xor i64 %30, -1
  %32 = and i64 %31, -1
  %33 = sext i32 %0 to i64
  %34 = or i64 %33, 9036810794061036494
  %35 = xor i64 %33, -1
  %36 = and i64 %35, 6005574440185481917
  %37 = and i64 %33, -6005574440185481918
  %38 = or i64 %36, %37
  %39 = xor i64 3328483018808996211, %38
  %40 = xor i64 %33, -1
  %41 = or i64 -9036810794061036495, %40
  %42 = xor i64 %41, -1
  %43 = and i64 %42, -1
  %44 = or i64 %39, %43
  %45 = xor i64 %44, %32
  %46 = xor i64 %45, %34
  %47 = xor i64 %46, %26
  %48 = xor i64 %47, %28
  %49 = xor i64 %48, %23
  %50 = xor i64 %49, 1769542181662306089
  %51 = mul i64 %21, %50
  %52 = trunc i64 %51 to i32
  %53 = alloca i32, i32 %52, align 4
  %54 = call i64 @h9549842938191327224(i64 388314406)
  %55 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %54
  store i8* blockaddress(@main.extracted.10, %loopEnd), i8** %55, align 8
  %56 = call i64 @h9549842938191327224(i64 388314407)
  %57 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %56
  store i8* blockaddress(@main.extracted.10, %defaultSwitchBasicBlock), i8** %57, align 8
  %58 = sext i32 %0 to i64
  %59 = add i64 %58, -2826514640772755538
  %60 = add i64 -328840257222734609, %58
  %61 = sub i64 %60, 2497674383550020929
  %62 = sext i32 %1 to i64
  %63 = or i64 %62, 985724949819378847
  %64 = and i64 985724949819378847, %62
  %65 = xor i64 985724949819378847, %62
  %66 = or i64 %64, %65
  %67 = xor i64 361229708842743371, %61
  %68 = xor i64 %67, %66
  %69 = xor i64 %68, %63
  %70 = xor i64 %69, %59
  %71 = sext i32 %0 to i64
  %72 = or i64 %71, -798717574997678842
  %73 = xor i64 %71, -1
  %74 = and i64 -798717574997678842, %73
  %75 = add i64 %74, %71
  %76 = sext i32 %0 to i64
  %77 = or i64 %76, 6687921204538232452
  %78 = xor i64 %76, -1
  %79 = and i64 6687921204538232452, %78
  %80 = add i64 %79, %76
  %81 = sext i32 %1 to i64
  %82 = add i64 %81, 6617896984213054502
  %83 = sub i64 0, %81
  %84 = sub i64 6617896984213054502, %83
  %85 = xor i64 %82, 5896235445437845187
  %86 = xor i64 %85, %80
  %87 = xor i64 %86, %84
  %88 = xor i64 %87, %77
  %89 = xor i64 %88, %72
  %90 = xor i64 %89, %75
  %91 = mul i64 %70, %90
  %92 = call i64 @h9549842938191327224(i64 %91)
  %93 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %92
  store i8* blockaddress(@main.extracted.10, %.exitStub1), i8** %93, align 8
  %94 = call i64 @h9549842938191327224(i64 388314400)
  %95 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %94
  store i8* blockaddress(@main.extracted.10, %.exitStub), i8** %95, align 8
  %96 = call i64 @h9549842938191327224(i64 388314403)
  %97 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %96
  store i8* blockaddress(@main.extracted.10, %codeRepl), i8** %97, align 8
  %98 = call i64 @h9549842938191327224(i64 388314412)
  %99 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %98
  store i8* blockaddress(@main.extracted.10, %BogusBasicBlock), i8** %99, align 8
  %100 = sext i32 %1 to i64
  %101 = add i64 %100, 6930114461566458796
  %102 = add i64 3262663311512282477, %100
  %103 = add i64 %102, 3667451150054176319
  %104 = sext i32 %1 to i64
  %105 = or i64 %104, 2661021291931632272
  %106 = xor i64 %104, -1
  %107 = and i64 2661021291931632272, %106
  %108 = add i64 %107, %104
  %109 = sext i32 %0 to i64
  %110 = and i64 %109, 8619365219401187647
  %111 = xor i64 %109, -1
  %112 = xor i64 8619365219401187647, %111
  %113 = and i64 %112, 8619365219401187647
  %114 = xor i64 %103, %113
  %115 = xor i64 %114, %105
  %116 = xor i64 %115, %101
  %117 = xor i64 %116, -4233944631087430457
  %118 = xor i64 %117, %108
  %119 = xor i64 %118, %110
  %120 = sext i32 %0 to i64
  %121 = and i64 %120, 8042861358770047851
  %122 = xor i64 %120, -1
  %123 = xor i64 8042861358770047851, %122
  %124 = and i64 %123, 8042861358770047851
  %125 = sext i32 %0 to i64
  %126 = and i64 %125, -3463732073358117891
  %127 = xor i64 %125, -1
  %128 = xor i64 -3463732073358117891, %127
  %129 = and i64 %128, -3463732073358117891
  %130 = sext i32 %0 to i64
  %131 = and i64 %130, -8618935610162429950
  %132 = or i64 8618935610162429949, %130
  %133 = sub i64 %132, 8618935610162429949
  %134 = xor i64 6458692953112484459, %133
  %135 = xor i64 %134, %121
  %136 = xor i64 %135, %126
  %137 = xor i64 %136, %124
  %138 = xor i64 %137, %131
  %139 = xor i64 %138, %129
  %140 = mul i64 %119, %139
  %141 = call i64 @h9549842938191327224(i64 %140)
  %142 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %141
  store i8* blockaddress(@main.extracted.10, %EntryBasicBlockSplit), i8** %142, align 8
  %143 = call i64 @h9549842938191327224(i64 388314405)
  %144 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %143
  store i8* blockaddress(@main.extracted.10, %409), i8** %144, align 8
  %145 = sext i32 %0 to i64
  %146 = and i64 %145, 7464477228125690096
  %147 = xor i64 %145, -1
  %148 = or i64 -7464477228125690097, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = sext i32 %0 to i64
  %152 = add i64 %151, 8781528759979831373
  %153 = add i64 -4329959041783588584, %151
  %154 = sub i64 %153, 5335256271946131659
  %155 = xor i64 %150, %154
  %156 = xor i64 %155, 2032547223318503887
  %157 = xor i64 %156, %152
  %158 = xor i64 %157, %146
  %159 = sext i32 %1 to i64
  %160 = add i64 %159, 8081737711213330007
  %161 = and i64 8081737711213330007, %159
  %162 = or i64 8081737711213330007, %159
  %163 = add i64 %161, %162
  %164 = sext i32 %0 to i64
  %165 = and i64 %164, 6380469206042261826
  %166 = xor i64 %164, -1
  %167 = or i64 -6380469206042261827, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = xor i64 -4555355950426952898, %169
  %171 = xor i64 %170, %160
  %172 = xor i64 %171, %165
  %173 = xor i64 %172, %163
  %174 = mul i64 %158, %173
  %175 = call i64 @h9549842938191327224(i64 %174)
  %176 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %175
  store i8* blockaddress(@main.extracted.10, %loopStart), i8** %176, align 8
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %177 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %177, align 4
  %178 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %178, align 4
  %179 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %179, align 4
  %180 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %181 = sext i32 %0 to i64
  %182 = add i64 %181, 2906651050891690819
  %183 = add i64 7777659312267527833, %181
  %184 = sub i64 %183, 4871008261375837014
  %185 = sext i32 %1 to i64
  %186 = add i64 %185, 7035055119677378848
  %187 = xor i64 7035055119677378848, %185
  %188 = and i64 7035055119677378848, %185
  %189 = mul i64 2, %188
  %190 = add i64 %187, %189
  %191 = xor i64 %182, %190
  %192 = xor i64 %191, %186
  %193 = xor i64 %192, %184
  %194 = xor i64 %193, 2842805039795938477
  %195 = sext i32 %1 to i64
  %196 = add i64 %195, 3136944274763051211
  %197 = and i64 3136944274763051211, %195
  %198 = or i64 3136944274763051211, %195
  %199 = add i64 %197, %198
  %200 = sext i32 %0 to i64
  %201 = and i64 %200, -2261149706776150052
  %202 = xor i64 %200, -1
  %203 = xor i64 -2261149706776150052, %202
  %204 = and i64 %203, -2261149706776150052
  %205 = xor i64 %204, %199
  %206 = xor i64 %205, %201
  %207 = xor i64 %206, 0
  %208 = xor i64 %207, %196
  %209 = mul i64 %194, %208
  %210 = trunc i64 %209 to i32
  store i32 %210, i32* %180, align 4
  %211 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %212 = sext i32 %0 to i64
  %213 = and i64 %212, -4358872353068252448
  %214 = xor i64 %212, -1
  %215 = xor i64 -4358872353068252448, %214
  %216 = and i64 %215, -4358872353068252448
  %217 = sext i32 %0 to i64
  %218 = or i64 %217, -8881511574514803628
  %219 = and i64 -8881511574514803628, %217
  %220 = xor i64 -8881511574514803628, %217
  %221 = or i64 %219, %220
  %222 = sext i32 %1 to i64
  %223 = add i64 %222, 7299474332390569451
  %224 = sub i64 0, %222
  %225 = add i64 -7299474332390569451, %224
  %226 = sub i64 0, %225
  %227 = xor i64 %223, %221
  %228 = xor i64 %227, 1727828678973566833
  %229 = xor i64 %228, %213
  %230 = xor i64 %229, %218
  %231 = xor i64 %230, %216
  %232 = xor i64 %231, %226
  %233 = sext i32 %1 to i64
  %234 = or i64 %233, 4635339719208139453
  %235 = and i64 4635339719208139453, %233
  %236 = xor i64 4635339719208139453, %233
  %237 = or i64 %235, %236
  %238 = sext i32 %0 to i64
  %239 = or i64 %238, -761453406057789652
  %240 = and i64 -761453406057789652, %238
  %241 = xor i64 -761453406057789652, %238
  %242 = or i64 %240, %241
  %243 = xor i64 %242, %237
  %244 = xor i64 %243, %234
  %245 = xor i64 %244, 1546520168429334929
  %246 = xor i64 %245, %239
  %247 = mul i64 %232, %246
  %248 = trunc i64 %247 to i32
  store i32 %248, i32* %211, align 4
  %249 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %249, align 4
  %250 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %250, align 4
  %251 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %252 = sext i32 %0 to i64
  %253 = or i64 %252, -7762164953238323299
  %254 = xor i64 %252, -1
  %255 = and i64 %254, -1359651193201976473
  %256 = and i64 %252, 1359651193201976472
  %257 = or i64 %255, %256
  %258 = xor i64 8747904074352731386, %257
  %259 = xor i64 %252, -1
  %260 = or i64 7762164953238323298, %259
  %261 = xor i64 %260, -1
  %262 = and i64 %261, -1
  %263 = or i64 %258, %262
  %264 = sext i32 %1 to i64
  %265 = add i64 %264, -4964559918269963791
  %266 = add i64 -7970911042374374024, %264
  %267 = sub i64 %266, -3006351124104410233
  %268 = sext i32 %1 to i64
  %269 = add i64 %268, 5685875003941024783
  %270 = add i64 -5092332291929152013, %268
  %271 = add i64 %270, -7668536777839374820
  %272 = xor i64 26964710910422955, %269
  %273 = xor i64 %272, %265
  %274 = xor i64 %273, %253
  %275 = xor i64 %274, %263
  %276 = xor i64 %275, %271
  %277 = xor i64 %276, %267
  %278 = sext i32 %1 to i64
  %279 = and i64 %278, -5785582862854506186
  %280 = or i64 5785582862854506185, %278
  %281 = sub i64 %280, 5785582862854506185
  %282 = sext i32 %0 to i64
  %283 = add i64 %282, -750211131578810785
  %284 = and i64 -750211131578810785, %282
  %285 = or i64 -750211131578810785, %282
  %286 = add i64 %284, %285
  %287 = sext i32 %0 to i64
  %288 = and i64 %287, -4295106210197394064
  %289 = xor i64 %287, -1
  %290 = or i64 4295106210197394063, %289
  %291 = xor i64 %290, -1
  %292 = and i64 %291, -1
  %293 = xor i64 %283, %281
  %294 = xor i64 %293, %292
  %295 = xor i64 %294, %279
  %296 = xor i64 %295, %286
  %297 = xor i64 %296, %288
  %298 = xor i64 %297, 2752677179244956684
  %299 = mul i64 %277, %298
  %300 = trunc i64 %299 to i32
  store i32 %300, i32* %251, align 4
  %301 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %301, align 4
  %302 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %302, align 4
  %303 = alloca i64, align 8
  %304 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %305 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9558371708905704725, i32 0, i64 %304
  store i8** %305, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  %306 = sext i32 %1 to i64
  %307 = or i64 %306, 1676207088883565293
  %308 = xor i64 %306, -1
  %309 = and i64 1676207088883565293, %308
  %310 = add i64 %309, %306
  %311 = sext i32 %0 to i64
  %312 = and i64 %311, 5501812303213209341
  %313 = xor i64 %311, -1
  %314 = xor i64 5501812303213209341, %313
  %315 = and i64 %314, 5501812303213209341
  %316 = sext i32 %0 to i64
  %317 = add i64 %316, 8507769113337558333
  %318 = and i64 8507769113337558333, %316
  %319 = or i64 8507769113337558333, %316
  %320 = add i64 %318, %319
  %321 = xor i64 %315, %312
  %322 = xor i64 %321, %317
  %323 = xor i64 %322, %310
  %324 = xor i64 %323, %320
  %325 = xor i64 %324, %307
  %326 = xor i64 %325, -4273475582908629991
  %327 = sext i32 %0 to i64
  %328 = and i64 %327, -908869085563284006
  %329 = or i64 908869085563284005, %327
  %330 = sub i64 %329, 908869085563284005
  %331 = sext i32 %1 to i64
  %332 = and i64 %331, -2712092676412351144
  %333 = or i64 2712092676412351143, %331
  %334 = sub i64 %333, 2712092676412351143
  %335 = sext i32 %0 to i64
  %336 = and i64 %335, 7981116846436004994
  %337 = xor i64 %335, -1
  %338 = xor i64 7981116846436004994, %337
  %339 = and i64 %338, 7981116846436004994
  %340 = xor i64 %334, %339
  %341 = xor i64 %340, %336
  %342 = xor i64 %341, %328
  %343 = xor i64 %342, 0
  %344 = xor i64 %343, %330
  %345 = xor i64 %344, %332
  %346 = mul i64 %326, %345
  %347 = trunc i64 %346 to i32
  store i32 %347, i32* %dispatcher, align 4
  store i32 388314402, i32* %53, align 4
  %348 = call i8** @bf565668037337745205(i32* %53)
  %349 = load i8*, i8** %348, align 8
  indirectbr i8* %349, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %409
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub1
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.10.extracted to i8*), i8** %.reload, align 8
  %350 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %351 = load i32, i32* %350, align 4
  %352 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %353 = load i32, i32* %352, align 4
  %354 = sub i32 %351, 1983394978
  %355 = add i32 %354, %353
  %356 = add i32 %355, 1983394978
  store i32 %356, i32* %dispatcher, align 4
  %357 = load i8*, i8** %57, align 8
  %358 = load i8, i8* %357, align 1
  %359 = xor i8 %358, -1
  %360 = or i8 %359, -2
  %361 = xor i8 %360, -1
  %362 = and i8 %361, -1
  %363 = sext i32 %1 to i64
  %364 = add i64 %363, -7362921463889945839
  %365 = xor i64 -7362921463889945839, %363
  %366 = and i64 -7362921463889945839, %363
  %367 = mul i64 2, %366
  %368 = add i64 %365, %367
  %369 = add i64 %175, 6768484873388034094
  %370 = sub i64 0, %175
  %371 = add i64 -6768484873388034094, %370
  %372 = sub i64 0, %371
  %373 = sext i32 %0 to i64
  %374 = and i64 %373, 5340248068279539162
  %375 = xor i64 %373, -1
  %376 = or i64 -5340248068279539163, %375
  %377 = xor i64 %376, -1
  %378 = and i64 %377, -1
  %379 = xor i64 %378, 5768064870045196157
  %380 = xor i64 %379, %369
  %381 = xor i64 %380, %372
  %382 = xor i64 %381, %368
  %383 = xor i64 %382, %364
  %384 = xor i64 %383, %374
  %385 = add i64 %96, 3357855966363211372
  %386 = add i64 -7437300155441537473, %96
  %387 = add i64 %386, -7651587951904802771
  %388 = sext i32 %1 to i64
  %389 = or i64 %388, 548464832492966365
  %390 = and i64 548464832492966365, %388
  %391 = xor i64 548464832492966365, %388
  %392 = or i64 %390, %391
  %393 = xor i64 %392, %389
  %394 = xor i64 %393, %385
  %395 = xor i64 %394, 3014528416813453781
  %396 = xor i64 %395, %387
  %397 = mul i64 %384, %396
  %398 = trunc i64 %397 to i8
  %399 = icmp eq i8 %362, %398
  %400 = mul i8 %358, %358
  %401 = add i8 %400, %358
  %402 = srem i8 %401, 2
  %403 = icmp eq i8 %402, 0
  %404 = or i1 %399, %403
  %405 = select i1 %404, i32 388314403, i32 388314406
  %406 = xor i32 %405, 5
  store i32 %406, i32* %53, align 4
  %407 = call i8** @bf565668037337745205(i32* %53)
  %408 = load i8*, i8** %407, align 8
  indirectbr i8* %408, [label %loopEnd, label %EntryBasicBlockSplit]

409:                                              ; preds = %409, %loopStart
  %410 = and i64 %98, -6911375018914923452
  %411 = xor i64 %98, -1
  %412 = xor i64 -6911375018914923452, %411
  %413 = and i64 %412, -6911375018914923452
  %414 = and i64 %141, 5995447358562307950
  %415 = xor i64 %141, -1
  %416 = or i64 -5995447358562307951, %415
  %417 = xor i64 %416, -1
  %418 = and i64 %417, -1
  %419 = sext i32 %1 to i64
  %420 = or i64 %419, 831812035705252502
  %421 = and i64 831812035705252502, %419
  %422 = xor i64 831812035705252502, %419
  %423 = or i64 %421, %422
  %424 = xor i64 %420, %418
  %425 = xor i64 %424, %410
  %426 = xor i64 %425, %423
  %427 = xor i64 %426, %414
  %428 = xor i64 %427, %413
  %429 = xor i64 %428, -5772958275173556155
  %430 = sext i32 %1 to i64
  %431 = and i64 %430, -5559949257986629672
  %432 = xor i64 %430, -1
  %433 = or i64 5559949257986629671, %432
  %434 = xor i64 %433, -1
  %435 = and i64 %434, -1
  %436 = or i64 %141, -3404671504237516243
  %437 = xor i64 %141, -1
  %438 = and i64 %437, -1721330050493190612
  %439 = and i64 %141, 1721330050493190611
  %440 = or i64 %438, %439
  %441 = xor i64 4097350139916764161, %440
  %442 = xor i64 %141, -1
  %443 = or i64 3404671504237516242, %442
  %444 = xor i64 %443, -1
  %445 = and i64 %444, -1
  %446 = or i64 %441, %445
  %447 = add i64 %143, 3777438538118563575
  %448 = xor i64 3777438538118563575, %143
  %449 = and i64 3777438538118563575, %143
  %450 = mul i64 2, %449
  %451 = add i64 %448, %450
  %452 = xor i64 %436, %431
  %453 = xor i64 %452, %451
  %454 = xor i64 %453, %435
  %455 = xor i64 %454, %447
  %456 = xor i64 %455, 5567637165763335986
  %457 = xor i64 %456, %446
  %458 = mul i64 %429, %457
  %459 = sdiv i64 %458, 105
  %460 = srem i32 %0, 2
  %461 = icmp eq i32 %460, 0
  %462 = mul i32 %1, 2
  %463 = add i64 %94, 4933463358216359881
  %464 = sub i64 0, %94
  %465 = add i64 -4933463358216359881, %464
  %466 = sub i64 0, %465
  %467 = add i64 %92, 3831895074289280777
  %468 = add i64 -4285689307653866790, %92
  %469 = sub i64 %468, -8117584381943147567
  %470 = xor i64 %466, -2415492026417671231
  %471 = xor i64 %470, %467
  %472 = xor i64 %471, %463
  %473 = xor i64 %472, %469
  %474 = and i64 %96, -2368294007444372325
  %475 = or i64 2368294007444372324, %96
  %476 = sub i64 %475, 2368294007444372324
  %477 = sext i32 %dispatcher1 to i64
  %478 = and i64 %477, -2836696193707962953
  %479 = xor i64 %477, -1
  %480 = xor i64 -2836696193707962953, %479
  %481 = and i64 %480, -2836696193707962953
  %482 = xor i64 %481, 1443080850972866690
  %483 = xor i64 %482, %476
  %484 = xor i64 %483, %478
  %485 = xor i64 %484, %474
  %486 = mul i64 %473, %485
  %487 = trunc i64 %486 to i32
  %488 = mul i32 %1, %487
  %489 = xor i32 2, %488
  %490 = sext i32 %dispatcher1 to i64
  %491 = add i64 %490, 2288145772517636859
  %492 = add i64 8104348155600076950, %490
  %493 = sub i64 %492, 5816202383082440091
  %494 = sext i32 %0 to i64
  %495 = and i64 %494, -7431852494912764190
  %496 = xor i64 %494, -1
  %497 = xor i64 -7431852494912764190, %496
  %498 = and i64 %497, -7431852494912764190
  %499 = add i64 %98, 7716023545838031625
  %500 = add i64 -3166041050824781422, %98
  %501 = sub i64 %500, 7564679477046738569
  %502 = xor i64 %498, %495
  %503 = xor i64 %502, 6302677761436675105
  %504 = xor i64 %503, %491
  %505 = xor i64 %504, %499
  %506 = xor i64 %505, %501
  %507 = xor i64 %506, %493
  %508 = sext i32 %1 to i64
  %509 = add i64 %508, 8151668950673367395
  %510 = sub i64 0, %508
  %511 = sub i64 8151668950673367395, %510
  %512 = or i64 %98, 6625362498372278411
  %513 = xor i64 %98, -1
  %514 = and i64 %513, 1428629444332767060
  %515 = and i64 %98, -1428629444332767061
  %516 = or i64 %514, %515
  %517 = xor i64 5197583879010181087, %516
  %518 = xor i64 %98, -1
  %519 = or i64 -6625362498372278412, %518
  %520 = xor i64 %519, -1
  %521 = and i64 %520, -1
  %522 = or i64 %517, %521
  %523 = xor i64 %522, %511
  %524 = xor i64 %523, %512
  %525 = xor i64 %524, %509
  %526 = xor i64 %525, -1267219613503639614
  %527 = mul i64 %507, %526
  %528 = trunc i64 %527 to i32
  %529 = and i32 %528, %488
  %530 = mul i32 2, %529
  %531 = add i32 %489, %530
  %532 = mul i32 %462, %531
  store i32 %532, i32* %.reg2mem2, align 4
  %533 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %534 = load i32, i32* %533, align 4
  %535 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %536 = load i32, i32* %535, align 4
  %537 = srem i32 %534, %536
  store i32 %537, i32* %dispatcher, align 4
  %538 = load i8*, i8** %93, align 8
  %539 = load i8, i8* %538, align 1
  %540 = and i8 %539, 1
  %541 = add i64 %96, 1973526823740221233
  %542 = xor i64 1973526823740221233, %96
  %543 = and i64 1973526823740221233, %96
  %544 = mul i64 2, %543
  %545 = add i64 %542, %544
  %546 = sext i32 %0 to i64
  %547 = add i64 %546, 4658617559636908507
  %548 = sub i64 0, %546
  %549 = sub i64 4658617559636908507, %548
  %550 = and i64 %98, 6323038846066849015
  %551 = or i64 -6323038846066849016, %98
  %552 = sub i64 %551, -6323038846066849016
  %553 = xor i64 %552, %550
  %554 = xor i64 %553, %545
  %555 = xor i64 %554, %541
  %556 = xor i64 %555, %549
  %557 = xor i64 %556, %547
  %558 = xor i64 %557, 8355634918974109841
  %559 = or i64 %56, 5239016721754072961
  %560 = and i64 5239016721754072961, %56
  %561 = xor i64 5239016721754072961, %56
  %562 = or i64 %560, %561
  %563 = sext i32 %1 to i64
  %564 = or i64 %563, -4502550646392473272
  %565 = xor i64 %563, -1
  %566 = and i64 %565, 2180541977188672657
  %567 = and i64 %563, -2180541977188672658
  %568 = or i64 %566, %567
  %569 = xor i64 -2323455626505970215, %568
  %570 = xor i64 %563, -1
  %571 = or i64 4502550646392473271, %570
  %572 = xor i64 %571, -1
  %573 = and i64 %572, -1
  %574 = or i64 %569, %573
  %575 = and i64 %56, 2128745842174032508
  %576 = or i64 -2128745842174032509, %56
  %577 = sub i64 %576, -2128745842174032509
  %578 = xor i64 %575, %564
  %579 = xor i64 %578, %562
  %580 = xor i64 %579, %574
  %581 = xor i64 %580, %559
  %582 = xor i64 %581, -2875279593247504271
  %583 = xor i64 %582, %577
  %584 = mul i64 %558, %583
  %585 = trunc i64 %584 to i8
  %586 = icmp eq i8 %540, %585
  %587 = mul i8 %539, %539
  %588 = add i8 %587, %539
  %589 = srem i8 %588, 2
  %590 = icmp eq i8 %589, 0
  %591 = xor i1 %586, true
  %592 = and i1 %591, true
  %593 = or i64 %92, 6882666373911152699
  %594 = xor i64 %92, -1
  %595 = and i64 %594, -1145678883186978967
  %596 = and i64 %92, 1145678883186978966
  %597 = or i64 %595, %596
  %598 = xor i64 -5792297925313214638, %597
  %599 = xor i64 %92, -1
  %600 = or i64 -6882666373911152700, %599
  %601 = xor i64 %600, -1
  %602 = and i64 %601, -1
  %603 = or i64 %598, %602
  %604 = and i64 %56, -4315722929293758132
  %605 = xor i64 %56, -1
  %606 = or i64 4315722929293758131, %605
  %607 = xor i64 %606, -1
  %608 = and i64 %607, -1
  %609 = xor i64 %608, %603
  %610 = xor i64 %609, -4145061283213487065
  %611 = xor i64 %610, %604
  %612 = xor i64 %611, %593
  %613 = sext i32 %1 to i64
  %614 = or i64 %613, -6256683452169126080
  %615 = and i64 -6256683452169126080, %613
  %616 = xor i64 -6256683452169126080, %613
  %617 = or i64 %615, %616
  %618 = add i64 %304, -411936426419057616
  %619 = xor i64 -411936426419057616, %304
  %620 = and i64 -411936426419057616, %304
  %621 = mul i64 2, %620
  %622 = add i64 %619, %621
  %623 = sext i32 %1 to i64
  %624 = and i64 %623, -3872212767647227135
  %625 = xor i64 %623, -1
  %626 = xor i64 -3872212767647227135, %625
  %627 = and i64 %626, -3872212767647227135
  %628 = xor i64 0, %627
  %629 = xor i64 %628, %618
  %630 = xor i64 %629, %617
  %631 = xor i64 %630, %624
  %632 = xor i64 %631, %614
  %633 = xor i64 %632, %622
  %634 = mul i64 %612, %633
  %635 = trunc i64 %634 to i1
  %636 = and i1 %586, %635
  %637 = or i1 %592, %636
  %638 = xor i1 %590, true
  %639 = or i64 %96, -1049202588505338333
  %640 = and i64 -1049202588505338333, %96
  %641 = xor i64 -1049202588505338333, %96
  %642 = or i64 %640, %641
  %643 = and i64 %92, -5115646416594822478
  %644 = xor i64 %92, -1
  %645 = xor i64 -5115646416594822478, %644
  %646 = and i64 %645, -5115646416594822478
  %647 = or i64 %94, 380079907657596425
  %648 = xor i64 %94, -1
  %649 = and i64 380079907657596425, %648
  %650 = add i64 %649, %94
  %651 = xor i64 -2628883151278444761, %647
  %652 = xor i64 %651, %646
  %653 = xor i64 %652, %650
  %654 = xor i64 %653, %639
  %655 = xor i64 %654, %642
  %656 = xor i64 %655, %643
  %657 = and i64 %141, 2568356887889827045
  %658 = or i64 -2568356887889827046, %141
  %659 = sub i64 %658, -2568356887889827046
  %660 = or i64 %304, 6744894240676393314
  %661 = xor i64 %304, -1
  %662 = and i64 %661, 5959120820518706884
  %663 = and i64 %304, -5959120820518706885
  %664 = or i64 %662, %663
  %665 = xor i64 1092581694549979046, %664
  %666 = xor i64 %304, -1
  %667 = or i64 -6744894240676393315, %666
  %668 = xor i64 %667, -1
  %669 = and i64 %668, -1
  %670 = or i64 %665, %669
  %671 = add i64 %54, -3248943687985425758
  %672 = and i64 -3248943687985425758, %54
  %673 = or i64 -3248943687985425758, %54
  %674 = add i64 %672, %673
  %675 = xor i64 %671, -3983340166735294313
  %676 = xor i64 %675, %674
  %677 = xor i64 %676, %659
  %678 = xor i64 %677, %657
  %679 = xor i64 %678, %670
  %680 = xor i64 %679, %660
  %681 = mul i64 %656, %680
  %682 = trunc i64 %681 to i1
  %683 = and i1 %638, %682
  %684 = and i1 %590, false
  %685 = or i1 %683, %684
  %686 = xor i1 %637, %685
  %687 = xor i1 %586, true
  %688 = xor i1 %590, true
  %689 = or i1 %687, %688
  %690 = xor i1 %689, true
  %691 = and i1 %690, true
  %692 = or i1 %686, %691
  %693 = select i1 %692, i32 388314413, i32 388314406
  %694 = xor i32 %693, -1
  %695 = and i32 %694, 11
  %696 = and i32 %693, -12
  %697 = or i32 %695, %696
  store i32 %697, i32* %53, align 4
  %698 = call i8** @bf565668037337745205(i32* %53)
  %699 = load i8*, i8** %698, align 8
  indirectbr i8* %699, [label %loopEnd, label %409]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %303, align 8
  %700 = alloca i8**, align 8
  %701 = or i64 %98, 9040089524640168981
  %702 = and i64 9040089524640168981, %98
  %703 = xor i64 9040089524640168981, %98
  %704 = or i64 %702, %703
  %705 = sext i32 %dispatcher1 to i64
  %706 = and i64 %705, 5415563790202459151
  %707 = or i64 -5415563790202459152, %705
  %708 = sub i64 %707, -5415563790202459152
  %709 = or i64 %92, -7676375001586358864
  %710 = xor i64 %92, -1
  %711 = and i64 -7676375001586358864, %710
  %712 = add i64 %711, %92
  %713 = xor i64 %709, %706
  %714 = xor i64 %713, %701
  %715 = xor i64 %714, %708
  %716 = xor i64 %715, %712
  %717 = xor i64 %716, %704
  %718 = xor i64 %717, -5514351425410970895
  %719 = or i64 %96, 3179261694722405054
  %720 = xor i64 %96, -1
  %721 = and i64 %720, -8194465112394837764
  %722 = and i64 %96, 8194465112394837763
  %723 = or i64 %721, %722
  %724 = xor i64 -6748528800080813502, %723
  %725 = xor i64 %96, -1
  %726 = or i64 -3179261694722405055, %725
  %727 = xor i64 %726, -1
  %728 = and i64 %727, -1
  %729 = or i64 %724, %728
  %730 = add i64 %175, 2467698672472783961
  %731 = sub i64 0, %175
  %732 = add i64 -2467698672472783961, %731
  %733 = sub i64 0, %732
  %734 = xor i64 %733, %719
  %735 = xor i64 %734, 0
  %736 = xor i64 %735, %729
  %737 = xor i64 %736, %730
  %738 = mul i64 %718, %737
  %739 = trunc i64 %738 to i1
  %740 = add i64 %143, 4887388312729627745
  %741 = sub i64 0, %143
  %742 = add i64 -4887388312729627745, %741
  %743 = sub i64 0, %742
  %744 = add i64 %96, -6343686853834246876
  %745 = add i64 8697791864217941018, %96
  %746 = sub i64 %745, -3405265355657363722
  %747 = xor i64 %746, %744
  %748 = xor i64 %747, %740
  %749 = xor i64 %748, -9163726664260742571
  %750 = xor i64 %749, %743
  %751 = or i64 %98, 8981480351927155446
  %752 = xor i64 %98, -1
  %753 = and i64 %752, 7379902806686537257
  %754 = and i64 %98, -7379902806686537258
  %755 = or i64 %753, %754
  %756 = xor i64 1931497009109347551, %755
  %757 = xor i64 %98, -1
  %758 = or i64 -8981480351927155447, %757
  %759 = xor i64 %758, -1
  %760 = and i64 %759, -1
  %761 = or i64 %756, %760
  %762 = and i64 %96, 2290494268224131454
  %763 = xor i64 %96, -1
  %764 = xor i64 2290494268224131454, %763
  %765 = and i64 %764, 2290494268224131454
  %766 = xor i64 %762, 0
  %767 = xor i64 %766, %751
  %768 = xor i64 %767, %765
  %769 = xor i64 %768, %761
  %770 = mul i64 %750, %769
  %771 = trunc i64 %770 to i32
  %772 = or i64 %96, 8877869584324334639
  %773 = and i64 8877869584324334639, %96
  %774 = xor i64 8877869584324334639, %96
  %775 = or i64 %773, %774
  %776 = or i64 %175, -1283461784121607251
  %777 = xor i64 %175, -1
  %778 = and i64 -1283461784121607251, %777
  %779 = add i64 %778, %175
  %780 = or i64 %56, 543366266940989310
  %781 = xor i64 %56, -1
  %782 = and i64 543366266940989310, %781
  %783 = add i64 %782, %56
  %784 = xor i64 %772, 4727189622878735891
  %785 = xor i64 %784, %783
  %786 = xor i64 %785, %779
  %787 = xor i64 %786, %780
  %788 = xor i64 %787, %776
  %789 = xor i64 %788, %775
  %790 = and i64 %54, -1043266276238791619
  %791 = xor i64 %54, -1
  %792 = or i64 1043266276238791618, %791
  %793 = xor i64 %792, -1
  %794 = and i64 %793, -1
  %795 = sext i32 %dispatcher1 to i64
  %796 = or i64 %795, 4485207042115229190
  %797 = and i64 4485207042115229190, %795
  %798 = xor i64 4485207042115229190, %795
  %799 = or i64 %797, %798
  %800 = add i64 %98, -7601705960880640411
  %801 = xor i64 -7601705960880640411, %98
  %802 = and i64 -7601705960880640411, %98
  %803 = mul i64 2, %802
  %804 = add i64 %801, %803
  %805 = xor i64 %804, %794
  %806 = xor i64 %805, %799
  %807 = xor i64 %806, 0
  %808 = xor i64 %807, %796
  %809 = xor i64 %808, %790
  %810 = xor i64 %809, %800
  %811 = mul i64 %789, %810
  %812 = trunc i64 %811 to i32
  %813 = sext i32 %0 to i64
  %814 = or i64 %813, 5721182034150151316
  %815 = xor i64 %813, -1
  %816 = and i64 5721182034150151316, %815
  %817 = add i64 %816, %813
  %818 = and i64 %96, -3798998569600119144
  %819 = or i64 3798998569600119143, %96
  %820 = sub i64 %819, 3798998569600119143
  %821 = xor i64 %820, %817
  %822 = xor i64 %821, %818
  %823 = xor i64 %822, %814
  %824 = xor i64 %823, 1337548367056016911
  %825 = and i64 %175, -5744186692479345336
  %826 = xor i64 %175, -1
  %827 = or i64 5744186692479345335, %826
  %828 = xor i64 %827, -1
  %829 = and i64 %828, -1
  %830 = add i64 %141, 6562524692045067585
  %831 = add i64 -7687315209647551854, %141
  %832 = sub i64 %831, 4196904172016932177
  %833 = add i64 %141, -3422525570785217294
  %834 = add i64 -1550288029219067590, %141
  %835 = add i64 %834, -1872237541566149704
  %836 = xor i64 %833, %829
  %837 = xor i64 %836, 0
  %838 = xor i64 %837, %830
  %839 = xor i64 %838, %832
  %840 = xor i64 %839, %835
  %841 = xor i64 %840, %825
  %842 = mul i64 %824, %841
  %843 = trunc i64 %842 to i32
  %844 = sext i32 %1 to i64
  %845 = or i64 %844, 2868865304946496222
  %846 = and i64 2868865304946496222, %844
  %847 = xor i64 2868865304946496222, %844
  %848 = or i64 %846, %847
  %849 = and i64 %304, 3448199625353065129
  %850 = xor i64 %304, -1
  %851 = xor i64 3448199625353065129, %850
  %852 = and i64 %851, 3448199625353065129
  %853 = add i64 %56, -4981356869591983681
  %854 = sub i64 0, %56
  %855 = sub i64 -4981356869591983681, %854
  %856 = xor i64 %849, %855
  %857 = xor i64 %856, %853
  %858 = xor i64 %857, %848
  %859 = xor i64 %858, %852
  %860 = xor i64 %859, 2721013793611842243
  %861 = xor i64 %860, %845
  %862 = add i64 %98, 5960006025598978787
  %863 = xor i64 5960006025598978787, %98
  %864 = and i64 5960006025598978787, %98
  %865 = mul i64 2, %864
  %866 = add i64 %863, %865
  %867 = or i64 %92, 4514738235158362244
  %868 = xor i64 %92, -1
  %869 = and i64 %868, 1324268817127490598
  %870 = and i64 %92, -1324268817127490599
  %871 = or i64 %869, %870
  %872 = xor i64 3226598201888750754, %871
  %873 = xor i64 %92, -1
  %874 = or i64 -4514738235158362245, %873
  %875 = xor i64 %874, -1
  %876 = and i64 %875, -1
  %877 = or i64 %872, %876
  %878 = sext i32 %dispatcher1 to i64
  %879 = or i64 %878, 3876023335089511475
  %880 = and i64 3876023335089511475, %878
  %881 = xor i64 3876023335089511475, %878
  %882 = or i64 %880, %881
  %883 = xor i64 %877, %882
  %884 = xor i64 %883, %862
  %885 = xor i64 %884, %867
  %886 = xor i64 %885, %866
  %887 = xor i64 %886, 0
  %888 = xor i64 %887, %879
  %889 = mul i64 %861, %888
  %890 = trunc i64 %889 to i32
  %891 = and i64 %175, -478363736341709812
  %892 = xor i64 %175, -1
  %893 = xor i64 -478363736341709812, %892
  %894 = and i64 %893, -478363736341709812
  %895 = and i64 %54, -1800629869483972310
  %896 = xor i64 %54, -1
  %897 = or i64 1800629869483972309, %896
  %898 = xor i64 %897, -1
  %899 = and i64 %898, -1
  %900 = xor i64 %894, %895
  %901 = xor i64 %900, %891
  %902 = xor i64 %901, 2877303823461998035
  %903 = xor i64 %902, %899
  %904 = sext i32 %1 to i64
  %905 = and i64 %904, -7523547916241065316
  %906 = xor i64 %904, -1
  %907 = xor i64 -7523547916241065316, %906
  %908 = and i64 %907, -7523547916241065316
  %909 = add i64 %143, 4412888693476728769
  %910 = add i64 -4179428102269647883, %143
  %911 = sub i64 %910, -8592316795746376652
  %912 = or i64 %56, 8288390496228185177
  %913 = xor i64 %56, -1
  %914 = and i64 %913, 7366871563364799771
  %915 = and i64 %56, -7366871563364799772
  %916 = or i64 %914, %915
  %917 = xor i64 1529576365847642434, %916
  %918 = xor i64 %56, -1
  %919 = or i64 -8288390496228185178, %918
  %920 = xor i64 %919, -1
  %921 = and i64 %920, -1
  %922 = or i64 %917, %921
  %923 = xor i64 %905, %922
  %924 = xor i64 %923, 0
  %925 = xor i64 %924, %912
  %926 = xor i64 %925, %909
  %927 = xor i64 %926, %908
  %928 = xor i64 %927, %911
  %929 = mul i64 %903, %928
  %930 = or i64 %143, 1779385715232850480
  %931 = xor i64 %143, -1
  %932 = and i64 %931, 801839236881290335
  %933 = and i64 %143, -801839236881290336
  %934 = or i64 %932, %933
  %935 = xor i64 1409927299999749743, %934
  %936 = xor i64 %143, -1
  %937 = or i64 -1779385715232850481, %936
  %938 = xor i64 %937, -1
  %939 = and i64 %938, -1
  %940 = or i64 %935, %939
  %941 = and i64 %54, -427298877791276539
  %942 = or i64 427298877791276538, %54
  %943 = sub i64 %942, 427298877791276538
  %944 = add i64 %143, 4996471459029008350
  %945 = add i64 -4799606490471608930, %143
  %946 = add i64 %945, -8650666124208934336
  %947 = xor i64 %941, -820423810509342331
  %948 = xor i64 %947, %946
  %949 = xor i64 %948, %944
  %950 = xor i64 %949, %930
  %951 = xor i64 %950, %940
  %952 = xor i64 %951, %943
  %953 = sext i32 %1 to i64
  %954 = or i64 %953, 6557637913290235017
  %955 = xor i64 %953, -1
  %956 = and i64 %955, 4948262717933265618
  %957 = and i64 %953, -4948262717933265619
  %958 = or i64 %956, %957
  %959 = xor i64 2281823394526985819, %958
  %960 = xor i64 %953, -1
  %961 = or i64 -6557637913290235018, %960
  %962 = xor i64 %961, -1
  %963 = and i64 %962, -1
  %964 = or i64 %959, %963
  %965 = add i64 %143, 3210664763355915740
  %966 = and i64 3210664763355915740, %143
  %967 = or i64 3210664763355915740, %143
  %968 = add i64 %966, %967
  %969 = xor i64 0, %954
  %970 = xor i64 %969, %964
  %971 = xor i64 %970, %968
  %972 = xor i64 %971, %965
  %973 = mul i64 %952, %972
  %974 = trunc i64 %973 to i32
  call void @"5784248439022692321"(i32 2, i64* null, i8*** null, i64* null, i8*** null, i64* %303, i8*** %700, i64* null, i8*** null, i1 %739, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 %771, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 %812, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 %843, i1* null, i1* null, i32 0, i32 %890, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %929, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 %974, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %975 = load i8**, i8*** %700, align 8
  %976 = load i8*, i8** %975, align 8
  %977 = bitcast i8* %976 to i1 (i32, i32, i1*)*
  %.reload3 = load i32, i32* %.reg2mem2, align 4
  %targetBlock = call i1 %977(i32 %.reload3, i32 %1, i1* %.out)
  %978 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %979 = load i32, i32* %978, align 4
  %980 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %981 = load i32, i32* %980, align 4
  %982 = sub i32 %979, %981
  %983 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %984 = load i32, i32* %983, align 4
  %985 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %986 = load i32, i32* %985, align 4
  %987 = srem i32 %984, %986
  %988 = select i1 %targetBlock, i32 %982, i32 %987
  store i32 %988, i32* %dispatcher, align 4
  %989 = load i8*, i8** %144, align 8
  %990 = load i8, i8* %989, align 1
  %991 = mul i8 %990, 2
  %992 = mul i8 %990, 2
  %993 = add i8 97, %992
  %994 = sub i8 %993, 95
  %995 = mul i8 %991, %994
  %996 = srem i8 %995, 4
  %997 = or i64 %98, 2967957748012663499
  %998 = xor i64 %98, -1
  %999 = and i64 2967957748012663499, %998
  %1000 = add i64 %999, %98
  %1001 = sext i32 %0 to i64
  %1002 = and i64 %1001, 7743899237605541440
  %1003 = xor i64 %1001, -1
  %1004 = or i64 -7743899237605541441, %1003
  %1005 = xor i64 %1004, -1
  %1006 = and i64 %1005, -1
  %1007 = or i64 %54, -3573166136293408410
  %1008 = xor i64 %54, -1
  %1009 = and i64 %1008, -2634861522283266707
  %1010 = and i64 %54, 2634861522283266706
  %1011 = or i64 %1009, %1010
  %1012 = xor i64 1515046978997926923, %1011
  %1013 = xor i64 %54, -1
  %1014 = or i64 3573166136293408409, %1013
  %1015 = xor i64 %1014, -1
  %1016 = and i64 %1015, -1
  %1017 = or i64 %1012, %1016
  %1018 = xor i64 %1000, -6276914291735527411
  %1019 = xor i64 %1018, %997
  %1020 = xor i64 %1019, %1017
  %1021 = xor i64 %1020, %1006
  %1022 = xor i64 %1021, %1002
  %1023 = xor i64 %1022, %1007
  %1024 = sext i32 %0 to i64
  %1025 = or i64 %1024, 4901561215542595272
  %1026 = xor i64 %1024, -1
  %1027 = and i64 4901561215542595272, %1026
  %1028 = add i64 %1027, %1024
  %1029 = sext i32 %dispatcher1 to i64
  %1030 = and i64 %1029, 7082135570539866069
  %1031 = xor i64 %1029, -1
  %1032 = or i64 -7082135570539866070, %1031
  %1033 = xor i64 %1032, -1
  %1034 = and i64 %1033, -1
  %1035 = xor i64 %1028, %1034
  %1036 = xor i64 %1035, %1025
  %1037 = xor i64 %1036, 0
  %1038 = xor i64 %1037, %1030
  %1039 = mul i64 %1023, %1038
  %1040 = trunc i64 %1039 to i8
  %1041 = icmp eq i8 %996, %1040
  %1042 = mul i8 %990, %990
  %1043 = mul i8 %1042, %990
  %1044 = add i8 %1043, %990
  %1045 = srem i8 %1044, 2
  %1046 = icmp eq i8 %1045, 0
  %1047 = and i1 %1041, %1046
  %1048 = add i64 %143, 4445409591687240739
  %1049 = add i64 -3268802205760850130, %143
  %1050 = sub i64 %1049, -7714211797448090869
  %1051 = sext i32 %1 to i64
  %1052 = and i64 %1051, 6583643896675468100
  %1053 = or i64 -6583643896675468101, %1051
  %1054 = sub i64 %1053, -6583643896675468101
  %1055 = xor i64 %1048, %1052
  %1056 = xor i64 %1055, -9149325914087413083
  %1057 = xor i64 %1056, %1050
  %1058 = xor i64 %1057, %1054
  %1059 = add i64 %141, -1761348652600287464
  %1060 = add i64 4221840099681809988, %141
  %1061 = sub i64 %1060, 5983188752282097452
  %1062 = and i64 %54, 2936629721266067245
  %1063 = xor i64 %54, -1
  %1064 = or i64 -2936629721266067246, %1063
  %1065 = xor i64 %1064, -1
  %1066 = and i64 %1065, -1
  %1067 = xor i64 -4182195661751299846, %1062
  %1068 = xor i64 %1067, %1059
  %1069 = xor i64 %1068, %1061
  %1070 = xor i64 %1069, %1066
  %1071 = mul i64 %1058, %1070
  %1072 = trunc i64 %1071 to i32
  %1073 = select i1 %1047, i32 %1072, i32 388314406
  %1074 = xor i32 %1073, 4
  store i32 %1074, i32* %53, align 4
  %1075 = call i8** @bf565668037337745205(i32* %53)
  %1076 = load i8*, i8** %1075, align 8
  indirectbr i8* %1076, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %1077 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %1077, align 4
  %1078 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %1078, align 4
  %1079 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %1079, align 4
  %1080 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %1080, align 4
  %1081 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %1081, align 4
  %1082 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %1083 = load i32, i32* %1082, align 4
  store i32 %1083, i32* %dispatcher, align 4
  %1084 = load i8*, i8** %99, align 8
  %1085 = load i8, i8* %1084, align 1
  %1086 = and i8 %1085, 1
  %1087 = icmp eq i8 %1086, 1
  %1088 = mul i8 %1085, %1085
  %1089 = add i8 %1088, %1085
  %1090 = srem i8 %1089, 2
  %1091 = or i64 %92, -3440449807279082299
  %1092 = xor i64 %92, -1
  %1093 = and i64 -3440449807279082299, %1092
  %1094 = add i64 %1093, %92
  %1095 = add i64 %92, -6258923237544841135
  %1096 = xor i64 -6258923237544841135, %92
  %1097 = and i64 -6258923237544841135, %92
  %1098 = mul i64 2, %1097
  %1099 = add i64 %1096, %1098
  %1100 = sext i32 %0 to i64
  %1101 = add i64 %1100, -3232676071555497003
  %1102 = sub i64 0, %1100
  %1103 = add i64 3232676071555497003, %1102
  %1104 = sub i64 0, %1103
  %1105 = xor i64 %1104, %1095
  %1106 = xor i64 %1105, %1099
  %1107 = xor i64 %1106, %1091
  %1108 = xor i64 %1107, %1094
  %1109 = xor i64 %1108, 877163415709393329
  %1110 = xor i64 %1109, %1101
  %1111 = and i64 %54, -2561544648552419013
  %1112 = or i64 2561544648552419012, %54
  %1113 = sub i64 %1112, 2561544648552419012
  %1114 = sext i32 %0 to i64
  %1115 = add i64 %1114, -3463715166652297534
  %1116 = xor i64 -3463715166652297534, %1114
  %1117 = and i64 -3463715166652297534, %1114
  %1118 = mul i64 2, %1117
  %1119 = add i64 %1116, %1118
  %1120 = xor i64 %1111, %1119
  %1121 = xor i64 %1120, %1115
  %1122 = xor i64 %1121, 0
  %1123 = xor i64 %1122, %1113
  %1124 = mul i64 %1110, %1123
  %1125 = trunc i64 %1124 to i8
  %1126 = icmp eq i8 %1090, %1125
  %1127 = or i1 %1087, %1126
  %1128 = select i1 %1127, i32 388314407, i32 388314413
  %1129 = xor i32 %1128, 10
  store i32 %1129, i32* %53, align 4
  %1130 = call i8** @bf565668037337745205(i32* %53)
  %1131 = load i8*, i8** %1130, align 8
  indirectbr i8* %1131, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1132 = load i8*, i8** %97, align 8
  %1133 = load i8, i8* %1132, align 1
  %1134 = mul i8 %1133, %1133
  %1135 = add i8 %1134, %1133
  %1136 = mul i8 %1135, 3
  %1137 = srem i8 %1136, 2
  %1138 = icmp eq i8 %1137, 0
  %1139 = mul i8 %1133, %1133
  %1140 = add i8 %1139, %1133
  %1141 = srem i8 %1140, 2
  %1142 = icmp eq i8 %1141, 0
  %1143 = and i1 %1138, %1142
  %1144 = sext i32 %0 to i64
  %1145 = and i64 %1144, 4872940861500441657
  %1146 = or i64 -4872940861500441658, %1144
  %1147 = sub i64 %1146, -4872940861500441658
  %1148 = and i64 %56, 87539388818977006
  %1149 = xor i64 %56, -1
  %1150 = xor i64 87539388818977006, %1149
  %1151 = and i64 %1150, 87539388818977006
  %1152 = sext i32 %dispatcher1 to i64
  %1153 = or i64 %1152, -2455597488206673939
  %1154 = xor i64 %1152, -1
  %1155 = and i64 -2455597488206673939, %1154
  %1156 = add i64 %1155, %1152
  %1157 = xor i64 %1153, %1147
  %1158 = xor i64 %1157, 6869140791402027437
  %1159 = xor i64 %1158, %1151
  %1160 = xor i64 %1159, %1145
  %1161 = xor i64 %1160, %1156
  %1162 = xor i64 %1161, %1148
  %1163 = or i64 %143, 7254055896150732326
  %1164 = and i64 7254055896150732326, %143
  %1165 = xor i64 7254055896150732326, %143
  %1166 = or i64 %1164, %1165
  %1167 = or i64 %56, 7863725352034016533
  %1168 = xor i64 %56, -1
  %1169 = and i64 7863725352034016533, %1168
  %1170 = add i64 %1169, %56
  %1171 = sext i32 %1 to i64
  %1172 = add i64 %1171, 807217539605020103
  %1173 = xor i64 807217539605020103, %1171
  %1174 = and i64 807217539605020103, %1171
  %1175 = mul i64 2, %1174
  %1176 = add i64 %1173, %1175
  %1177 = xor i64 %1166, %1170
  %1178 = xor i64 %1177, %1163
  %1179 = xor i64 %1178, -747757557111416194
  %1180 = xor i64 %1179, %1176
  %1181 = xor i64 %1180, %1172
  %1182 = xor i64 %1181, %1167
  %1183 = mul i64 %1162, %1182
  %1184 = trunc i64 %1183 to i32
  %1185 = select i1 %1143, i32 388314403, i32 %1184
  %1186 = xor i32 %1185, 5
  store i32 %1186, i32* %53, align 4
  %1187 = call i8** @bf565668037337745205(i32* %53)
  %1188 = load i8*, i8** %1187, align 8
  indirectbr i8* %1188, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %409, %EntryBasicBlockSplit
  %1189 = load i8*, i8** %176, align 8
  %1190 = load i8, i8* %1189, align 1
  %1191 = mul i8 %1190, 2
  %1192 = mul i8 %1190, 2
  %1193 = add i8 2, %1192
  %1194 = mul i8 %1191, %1193
  %1195 = srem i8 %1194, 4
  %1196 = icmp eq i8 %1195, 0
  %1197 = mul i8 %1190, %1190
  %1198 = add i8 %1197, %1190
  %1199 = sext i32 %0 to i64
  %1200 = add i64 %1199, -8471383389491559055
  %1201 = and i64 -8471383389491559055, %1199
  %1202 = or i64 -8471383389491559055, %1199
  %1203 = add i64 %1201, %1202
  %1204 = add i64 %54, -5806111496544805396
  %1205 = and i64 -5806111496544805396, %54
  %1206 = or i64 -5806111496544805396, %54
  %1207 = add i64 %1205, %1206
  %1208 = add i64 %143, 3569604115320183536
  %1209 = sub i64 0, %143
  %1210 = sub i64 3569604115320183536, %1209
  %1211 = xor i64 4758585054640473667, %1200
  %1212 = xor i64 %1211, %1207
  %1213 = xor i64 %1212, %1203
  %1214 = xor i64 %1213, %1208
  %1215 = xor i64 %1214, %1210
  %1216 = xor i64 %1215, %1204
  %1217 = or i64 %56, -5830779953627444384
  %1218 = xor i64 %56, -1
  %1219 = and i64 -5830779953627444384, %1218
  %1220 = add i64 %1219, %56
  %1221 = or i64 %141, -8570866812118506648
  %1222 = xor i64 %141, -1
  %1223 = and i64 %1222, 126760202975830976
  %1224 = and i64 %141, -126760202975830977
  %1225 = or i64 %1223, %1224
  %1226 = xor i64 -8589352190937005912, %1225
  %1227 = xor i64 %141, -1
  %1228 = or i64 8570866812118506647, %1227
  %1229 = xor i64 %1228, -1
  %1230 = and i64 %1229, -1
  %1231 = or i64 %1226, %1230
  %1232 = xor i64 %1217, %1220
  %1233 = xor i64 %1232, %1221
  %1234 = xor i64 %1233, %1231
  %1235 = xor i64 %1234, 4201191221294525654
  %1236 = mul i64 %1216, %1235
  %1237 = trunc i64 %1236 to i8
  %1238 = srem i8 %1198, %1237
  %1239 = icmp eq i8 %1238, 0
  %1240 = xor i1 %1196, true
  %1241 = xor i1 %1239, true
  %1242 = or i1 %1240, %1241
  %1243 = xor i1 %1242, true
  %1244 = and i1 %1243, true
  %1245 = select i1 %1244, i32 388314406, i32 388314402
  %1246 = xor i32 %1245, 4
  store i32 %1246, i32* %53, align 4
  %1247 = call i8** @bf565668037337745205(i32* %53)
  %1248 = load i8*, i8** %1247, align 8
  indirectbr i8* %1248, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.11(i64* %.out, i64* %.out1, i64* %.out2, i64* %.out3, i64* %.out4) #5 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314400)
  %2 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.11, %loopEnd), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314413)
  %4 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.11, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314402)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.11, %.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314401)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.11, %codeRepl), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314403)
  %10 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %9
  store i8* blockaddress(@main.extracted.11, %defaultSwitchBasicBlock), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314407)
  %12 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %11
  store i8* blockaddress(@main.extracted.11, %loopStart), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314406)
  %14 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %13
  store i8* blockaddress(@main.extracted.11, %EntryBasicBlockSplit), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314404)
  %16 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %15
  store i8* blockaddress(@main.extracted.11, %136), i8** %16, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %17 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %17, align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %25, align 4
  %26 = alloca i64, align 8
  %27 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %28 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8137076287989836104, i32 0, i64 %27
  store i8** %28, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314407, i32* %0, align 4
  %29 = call i8** @bf18348850871760216737(i32* %0)
  %30 = load i8*, i8** %29, align 8
  indirectbr i8* %30, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %136
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (void ()* @main.extracted.11.extracted to i8*), i8** %.reload, align 8
  %31 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = xor i32 %32, %34
  %36 = and i32 %32, %34
  %37 = mul i32 2, %36
  %38 = add i32 %35, %37
  store i32 %38, i32* %dispatcher, align 4
  %39 = load i8*, i8** %14, align 8
  %40 = load i8, i8* %39, align 1
  %41 = mul i8 %40, 2
  %42 = sext i32 %dispatcher1 to i64
  %43 = or i64 %42, -8788566937115194279
  %44 = xor i64 %42, -1
  %45 = and i64 %44, -8860879478678336337
  %46 = and i64 %42, 8860879478678336336
  %47 = or i64 %45, %46
  %48 = xor i64 220511320231231734, %47
  %49 = xor i64 %42, -1
  %50 = or i64 8788566937115194278, %49
  %51 = xor i64 %50, -1
  %52 = and i64 %51, -1
  %53 = or i64 %48, %52
  %54 = or i64 %27, -5971753702894773945
  %55 = xor i64 %27, -1
  %56 = and i64 -5971753702894773945, %55
  %57 = add i64 %56, %27
  %58 = or i64 %5, 7680737619530432071
  %59 = xor i64 %5, -1
  %60 = and i64 %59, 6612799687261892113
  %61 = and i64 %5, -6612799687261892114
  %62 = or i64 %60, %61
  %63 = xor i64 3553925511029198934, %62
  %64 = xor i64 %5, -1
  %65 = or i64 -7680737619530432072, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = or i64 %63, %67
  %69 = xor i64 %68, %43
  %70 = xor i64 %69, %53
  %71 = xor i64 %70, %54
  %72 = xor i64 %71, %58
  %73 = xor i64 %72, -2515517950595063745
  %74 = xor i64 %73, %57
  %75 = and i64 %15, -1672571828145556889
  %76 = xor i64 %15, -1
  %77 = or i64 1672571828145556888, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = and i64 %13, -3734950981775485197
  %81 = or i64 3734950981775485196, %13
  %82 = sub i64 %81, 3734950981775485196
  %83 = add i64 %11, -3346655649861200400
  %84 = add i64 -5010671907063768583, %11
  %85 = sub i64 %84, -1664016257202568183
  %86 = xor i64 %75, %79
  %87 = xor i64 %86, %82
  %88 = xor i64 %87, %85
  %89 = xor i64 %88, 7202923192326070142
  %90 = xor i64 %89, %83
  %91 = xor i64 %90, %80
  %92 = mul i64 %74, %91
  %93 = trunc i64 %92 to i8
  %94 = mul i8 %40, %93
  %95 = or i64 %13, -5651272720943808746
  %96 = and i64 -5651272720943808746, %13
  %97 = xor i64 -5651272720943808746, %13
  %98 = or i64 %96, %97
  %99 = add i64 %3, -6652961009017087160
  %100 = sub i64 0, %3
  %101 = sub i64 -6652961009017087160, %100
  %102 = xor i64 %99, %101
  %103 = xor i64 %102, %98
  %104 = xor i64 %103, %95
  %105 = xor i64 %104, 6046250875084229819
  %106 = add i64 %7, 1387123914715543912
  %107 = add i64 6713506973728910834, %7
  %108 = add i64 %107, -5326383059013366922
  %109 = and i64 %27, -6661992263424013321
  %110 = xor i64 %27, -1
  %111 = or i64 6661992263424013320, %110
  %112 = xor i64 %111, -1
  %113 = and i64 %112, -1
  %114 = xor i64 %108, %109
  %115 = xor i64 %114, %106
  %116 = xor i64 %115, %113
  %117 = xor i64 %116, 6135046790008337901
  %118 = mul i64 %105, %117
  %119 = trunc i64 %118 to i8
  %120 = add i8 %119, %94
  %121 = sub i8 %120, 29
  %122 = mul i8 %41, %121
  %123 = srem i8 %122, 4
  %124 = icmp eq i8 %123, 0
  %125 = mul i8 %40, %40
  %126 = add i8 %125, %40
  %127 = srem i8 %126, 2
  %128 = icmp eq i8 %127, 0
  %129 = and i1 %124, %128
  %130 = select i1 %129, i32 388314404, i32 388314400
  %131 = or i32 %130, 4
  %132 = and i32 %130, 4
  %133 = sub i32 %131, %132
  store i32 %133, i32* %0, align 4
  %134 = call i8** @bf18348850871760216737(i32* %0)
  %135 = load i8*, i8** %134, align 8
  indirectbr i8* %135, [label %loopEnd, label %EntryBasicBlockSplit]

136:                                              ; preds = %136, %loopStart
  %137 = and i64 %7, 9097472561346845486
  %138 = xor i64 %7, -1
  %139 = or i64 -9097472561346845487, %138
  %140 = xor i64 %139, -1
  %141 = and i64 %140, -1
  %142 = sext i32 %dispatcher1 to i64
  %143 = and i64 %142, -3341967010200036613
  %144 = or i64 3341967010200036612, %142
  %145 = sub i64 %144, 3341967010200036612
  %146 = sext i32 %dispatcher1 to i64
  %147 = add i64 %146, -5665671275476635881
  %148 = sub i64 0, %146
  %149 = add i64 5665671275476635881, %148
  %150 = sub i64 0, %149
  %151 = xor i64 -7047481647374333583, %147
  %152 = xor i64 %151, %137
  %153 = xor i64 %152, %143
  %154 = xor i64 %153, %141
  %155 = xor i64 %154, %150
  %156 = xor i64 %155, %145
  %157 = or i64 %9, 7456654450182913784
  %158 = xor i64 %9, -1
  %159 = and i64 7456654450182913784, %158
  %160 = add i64 %159, %9
  %161 = and i64 %7, -7883733378182861615
  %162 = xor i64 %7, -1
  %163 = or i64 7883733378182861614, %162
  %164 = xor i64 %163, -1
  %165 = and i64 %164, -1
  %166 = xor i64 %161, %160
  %167 = xor i64 %166, %165
  %168 = xor i64 %167, 6716216344764895088
  %169 = xor i64 %168, %157
  %170 = mul i64 %156, %169
  %171 = sdiv i64 %170, 17
  store i64 %171, i64* %.out, align 8
  %172 = sub i64 430884496634196720, 430884496634196722
  store i64 %172, i64* %.out1, align 8
  %173 = sub i64 56, 51
  store i64 %173, i64* %.out2, align 8
  %174 = sub i64 76, 92
  store i64 %174, i64* %.out3, align 8
  %175 = mul i64 126, 33
  store i64 %175, i64* %.out4, align 8
  %176 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %179 = load i32, i32* %178, align 4
  %180 = srem i32 %177, %179
  store i32 %180, i32* %dispatcher, align 4
  %181 = load i8*, i8** %8, align 8
  %182 = load i8, i8* %181, align 1
  %183 = mul i8 %182, 2
  %184 = or i64 %27, 7045752467512240991
  %185 = xor i64 %27, -1
  %186 = and i64 %185, -159116606662926520
  %187 = and i64 %27, 159116606662926519
  %188 = or i64 %186, %187
  %189 = xor i64 -7202031234663599081, %188
  %190 = xor i64 %27, -1
  %191 = or i64 -7045752467512240992, %190
  %192 = xor i64 %191, -1
  %193 = and i64 %192, -1
  %194 = or i64 %189, %193
  %195 = or i64 %9, -5042116205642063576
  %196 = and i64 -5042116205642063576, %9
  %197 = xor i64 -5042116205642063576, %9
  %198 = or i64 %196, %197
  %199 = or i64 %11, 7507069995812473019
  %200 = xor i64 %11, -1
  %201 = and i64 %200, -4790386035337134499
  %202 = and i64 %11, 4790386035337134498
  %203 = or i64 %201, %202
  %204 = xor i64 -3050246280877328666, %203
  %205 = xor i64 %11, -1
  %206 = or i64 -7507069995812473020, %205
  %207 = xor i64 %206, -1
  %208 = and i64 %207, -1
  %209 = or i64 %204, %208
  %210 = xor i64 %209, %198
  %211 = xor i64 %210, %184
  %212 = xor i64 %211, %195
  %213 = xor i64 %212, %194
  %214 = xor i64 %213, %199
  %215 = xor i64 %214, 5550494577221679857
  %216 = or i64 %9, 5170711186025933543
  %217 = xor i64 %9, -1
  %218 = and i64 5170711186025933543, %217
  %219 = add i64 %218, %9
  %220 = sext i32 %dispatcher1 to i64
  %221 = or i64 %220, 1975869682314158173
  %222 = xor i64 %220, -1
  %223 = and i64 %222, -8500485415073751914
  %224 = and i64 %220, 8500485415073751913
  %225 = or i64 %223, %224
  %226 = xor i64 -7970378977096270645, %225
  %227 = xor i64 %220, -1
  %228 = or i64 -1975869682314158174, %227
  %229 = xor i64 %228, -1
  %230 = and i64 %229, -1
  %231 = or i64 %226, %230
  %232 = xor i64 %231, %221
  %233 = xor i64 %232, %219
  %234 = xor i64 %233, %216
  %235 = xor i64 %234, -2119077551877657566
  %236 = mul i64 %215, %235
  %237 = trunc i64 %236 to i8
  %238 = mul i8 %182, %237
  %239 = or i64 %9, 5764376645758045483
  %240 = xor i64 %9, -1
  %241 = and i64 %240, 7555786943397067597
  %242 = and i64 %9, -7555786943397067598
  %243 = or i64 %241, %242
  %244 = xor i64 2820557619020707430, %243
  %245 = xor i64 %9, -1
  %246 = or i64 -5764376645758045484, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = or i64 %244, %248
  %250 = and i64 %15, -7053520255391533098
  %251 = xor i64 %15, -1
  %252 = xor i64 -7053520255391533098, %251
  %253 = and i64 %252, -7053520255391533098
  %254 = sext i32 %dispatcher1 to i64
  %255 = or i64 %254, -7375409985092414012
  %256 = xor i64 %254, -1
  %257 = and i64 %256, -8068204146091607737
  %258 = and i64 %254, 8068204146091607736
  %259 = or i64 %257, %258
  %260 = xor i64 694324698641771651, %259
  %261 = xor i64 %254, -1
  %262 = or i64 7375409985092414011, %261
  %263 = xor i64 %262, -1
  %264 = and i64 %263, -1
  %265 = or i64 %260, %264
  %266 = xor i64 %253, %239
  %267 = xor i64 %266, -1930482808620860453
  %268 = xor i64 %267, %250
  %269 = xor i64 %268, %265
  %270 = xor i64 %269, %255
  %271 = xor i64 %270, %249
  %272 = or i64 %15, -8785551397870837402
  %273 = xor i64 %15, -1
  %274 = and i64 -8785551397870837402, %273
  %275 = add i64 %274, %15
  %276 = add i64 %11, -7694135501686637573
  %277 = sub i64 0, %11
  %278 = sub i64 -7694135501686637573, %277
  %279 = xor i64 %278, %275
  %280 = xor i64 %279, %276
  %281 = xor i64 %280, 6414334248576323750
  %282 = xor i64 %281, %272
  %283 = mul i64 %271, %282
  %284 = trunc i64 %283 to i8
  %285 = add i8 %284, %238
  %286 = mul i8 %183, %285
  %287 = srem i8 %286, 4
  %288 = icmp eq i8 %287, 0
  %289 = mul i8 %182, %182
  %290 = mul i8 %289, %182
  %291 = sub i8 %290, 36
  %292 = add i8 %291, %182
  %293 = add i8 %292, 36
  %294 = srem i8 %293, 2
  %295 = icmp eq i8 %294, 0
  %296 = xor i1 %288, true
  %297 = add i64 %13, 3123973278202323983
  %298 = and i64 3123973278202323983, %13
  %299 = or i64 3123973278202323983, %13
  %300 = add i64 %298, %299
  %301 = or i64 %15, 8946657294020358765
  %302 = xor i64 %15, -1
  %303 = and i64 %302, -3877075793397121039
  %304 = and i64 %15, 3877075793397121038
  %305 = or i64 %303, %304
  %306 = xor i64 -5325166312753607268, %305
  %307 = xor i64 %15, -1
  %308 = or i64 -8946657294020358766, %307
  %309 = xor i64 %308, -1
  %310 = and i64 %309, -1
  %311 = or i64 %306, %310
  %312 = and i64 %13, 8824939952274063318
  %313 = xor i64 %13, -1
  %314 = or i64 -8824939952274063319, %313
  %315 = xor i64 %314, -1
  %316 = and i64 %315, -1
  %317 = xor i64 %311, %312
  %318 = xor i64 %317, %316
  %319 = xor i64 %318, %300
  %320 = xor i64 %319, %301
  %321 = xor i64 %320, -8840835827366324977
  %322 = xor i64 %321, %297
  %323 = add i64 %9, 7908979563718638676
  %324 = add i64 -783991927420407377, %9
  %325 = add i64 %324, 8692971491139046053
  %326 = add i64 %15, 8375434398546272299
  %327 = add i64 -5680714388174995838, %15
  %328 = add i64 %327, -4390595286988283479
  %329 = or i64 %7, -8205421873644419945
  %330 = xor i64 %7, -1
  %331 = and i64 -8205421873644419945, %330
  %332 = add i64 %331, %7
  %333 = xor i64 6094561633612052975, %328
  %334 = xor i64 %333, %326
  %335 = xor i64 %334, %323
  %336 = xor i64 %335, %325
  %337 = xor i64 %336, %332
  %338 = xor i64 %337, %329
  %339 = mul i64 %322, %338
  %340 = trunc i64 %339 to i1
  %341 = xor i1 %295, %340
  %342 = or i1 %296, %341
  %343 = xor i1 %342, true
  %344 = and i1 %343, true
  %345 = select i1 %344, i32 388314402, i32 388314400
  %346 = xor i32 %345, 2
  store i32 %346, i32* %0, align 4
  %347 = call i8** @bf18348850871760216737(i32* %0)
  %348 = load i8*, i8** %347, align 8
  indirectbr i8* %348, [label %loopEnd, label %136]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %26, align 8
  %349 = call i8** @lk8130767998500730990(i64* %26)
  %350 = load i8*, i8** %349, align 8
  %351 = bitcast i8* %350 to void ()*
  call void %351()
  %352 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %353 = load i32, i32* %352, align 4
  %354 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %355 = load i32, i32* %354, align 4
  %356 = add i32 %353, -927795529
  %357 = add i32 %356, %355
  %358 = and i64 %11, -4385513791621482289
  %359 = xor i64 %11, -1
  %360 = or i64 4385513791621482288, %359
  %361 = xor i64 %360, -1
  %362 = and i64 %361, -1
  %363 = sext i32 %dispatcher1 to i64
  %364 = or i64 %363, -5243438028986779722
  %365 = xor i64 %363, -1
  %366 = and i64 %365, 1163226455786979595
  %367 = and i64 %363, -1163226455786979596
  %368 = or i64 %366, %367
  %369 = xor i64 -6404386226535467331, %368
  %370 = xor i64 %363, -1
  %371 = or i64 5243438028986779721, %370
  %372 = xor i64 %371, -1
  %373 = and i64 %372, -1
  %374 = or i64 %369, %373
  %375 = add i64 %1, -4396538383296922999
  %376 = sub i64 0, %1
  %377 = add i64 4396538383296922999, %376
  %378 = sub i64 0, %377
  %379 = xor i64 %378, %362
  %380 = xor i64 %379, %358
  %381 = xor i64 %380, %364
  %382 = xor i64 %381, 1213243053861972527
  %383 = xor i64 %382, %375
  %384 = xor i64 %383, %374
  %385 = or i64 %15, 6994733169575046126
  %386 = and i64 6994733169575046126, %15
  %387 = xor i64 6994733169575046126, %15
  %388 = or i64 %386, %387
  %389 = or i64 %3, -6608936156020655577
  %390 = xor i64 %3, -1
  %391 = and i64 -6608936156020655577, %390
  %392 = add i64 %391, %3
  %393 = sext i32 %dispatcher1 to i64
  %394 = and i64 %393, 2282924229981911738
  %395 = xor i64 %393, -1
  %396 = or i64 -2282924229981911739, %395
  %397 = xor i64 %396, -1
  %398 = and i64 %397, -1
  %399 = xor i64 %389, %392
  %400 = xor i64 %399, %385
  %401 = xor i64 %400, %388
  %402 = xor i64 %401, 2047969351393034745
  %403 = xor i64 %402, %398
  %404 = xor i64 %403, %394
  %405 = mul i64 %384, %404
  %406 = trunc i64 %405 to i32
  %407 = sub i32 %357, %406
  store i32 %407, i32* %dispatcher, align 4
  %408 = load i8*, i8** %8, align 8
  %409 = load i8, i8* %408, align 1
  %410 = xor i8 %409, -2
  %411 = and i8 %410, %409
  %412 = or i64 %15, 6339856657509170320
  %413 = xor i64 %15, -1
  %414 = and i64 6339856657509170320, %413
  %415 = add i64 %414, %15
  %416 = or i64 %11, -2838450564223869660
  %417 = xor i64 %11, -1
  %418 = and i64 %417, 2301608112442552063
  %419 = and i64 %11, -2301608112442552064
  %420 = or i64 %418, %419
  %421 = xor i64 -4077103317285178405, %420
  %422 = xor i64 %11, -1
  %423 = or i64 2838450564223869659, %422
  %424 = xor i64 %423, -1
  %425 = and i64 %424, -1
  %426 = or i64 %421, %425
  %427 = add i64 %9, 7327027234279026241
  %428 = and i64 7327027234279026241, %9
  %429 = or i64 7327027234279026241, %9
  %430 = add i64 %428, %429
  %431 = xor i64 %430, %426
  %432 = xor i64 %431, -499840507081047837
  %433 = xor i64 %432, %412
  %434 = xor i64 %433, %427
  %435 = xor i64 %434, %415
  %436 = xor i64 %435, %416
  %437 = add i64 %7, -7772470507503648126
  %438 = xor i64 -7772470507503648126, %7
  %439 = and i64 -7772470507503648126, %7
  %440 = mul i64 2, %439
  %441 = add i64 %438, %440
  %442 = or i64 %9, 5583047423577252412
  %443 = xor i64 %9, -1
  %444 = and i64 5583047423577252412, %443
  %445 = add i64 %444, %9
  %446 = or i64 %7, -1977268672925193053
  %447 = and i64 -1977268672925193053, %7
  %448 = xor i64 -1977268672925193053, %7
  %449 = or i64 %447, %448
  %450 = xor i64 %437, %445
  %451 = xor i64 %450, %446
  %452 = xor i64 %451, %441
  %453 = xor i64 %452, %449
  %454 = xor i64 %453, 0
  %455 = xor i64 %454, %442
  %456 = mul i64 %436, %455
  %457 = trunc i64 %456 to i8
  %458 = icmp eq i8 %411, %457
  %459 = mul i8 %409, %409
  %460 = add i8 %459, %409
  %461 = mul i8 %460, 3
  %462 = srem i8 %461, 2
  %463 = or i64 %15, 4758701113068367039
  %464 = xor i64 %15, -1
  %465 = and i64 4758701113068367039, %464
  %466 = add i64 %465, %15
  %467 = add i64 %13, -2758821171970658492
  %468 = add i64 -8531207917961977310, %13
  %469 = sub i64 %468, -5772386745991318818
  %470 = and i64 %1, -4541153525936825342
  %471 = xor i64 %1, -1
  %472 = or i64 4541153525936825341, %471
  %473 = xor i64 %472, -1
  %474 = and i64 %473, -1
  %475 = xor i64 %467, %463
  %476 = xor i64 %475, %474
  %477 = xor i64 %476, %470
  %478 = xor i64 %477, %466
  %479 = xor i64 %478, %469
  %480 = xor i64 %479, -1104463546772804771
  %481 = and i64 %11, 5228054111876231320
  %482 = xor i64 %11, -1
  %483 = or i64 -5228054111876231321, %482
  %484 = xor i64 %483, -1
  %485 = and i64 %484, -1
  %486 = or i64 %5, 7611275078599739449
  %487 = xor i64 %5, -1
  %488 = and i64 7611275078599739449, %487
  %489 = add i64 %488, %5
  %490 = sext i32 %dispatcher1 to i64
  %491 = or i64 %490, 8660737001248770825
  %492 = xor i64 %490, -1
  %493 = and i64 %492, -6934049126029017429
  %494 = and i64 %490, 6934049126029017428
  %495 = or i64 %493, %494
  %496 = xor i64 -1732670465091209822, %495
  %497 = xor i64 %490, -1
  %498 = or i64 -8660737001248770826, %497
  %499 = xor i64 %498, -1
  %500 = and i64 %499, -1
  %501 = or i64 %496, %500
  %502 = xor i64 %501, %489
  %503 = xor i64 %502, %486
  %504 = xor i64 %503, %491
  %505 = xor i64 %504, %481
  %506 = xor i64 %505, %485
  %507 = xor i64 %506, 0
  %508 = mul i64 %480, %507
  %509 = trunc i64 %508 to i8
  %510 = icmp eq i8 %462, %509
  %511 = or i1 %458, %510
  %512 = select i1 %511, i32 388314400, i32 388314400
  %513 = and i64 %11, -6812672606993075199
  %514 = or i64 6812672606993075198, %11
  %515 = sub i64 %514, 6812672606993075198
  %516 = or i64 %15, -1104422833404683243
  %517 = xor i64 %15, -1
  %518 = and i64 %517, -1076737304048553096
  %519 = and i64 %15, 1076737304048553095
  %520 = or i64 %518, %519
  %521 = xor i64 117907678391660397, %520
  %522 = xor i64 %15, -1
  %523 = or i64 1104422833404683242, %522
  %524 = xor i64 %523, -1
  %525 = and i64 %524, -1
  %526 = or i64 %521, %525
  %527 = or i64 %15, -9079025748925639801
  %528 = xor i64 %15, -1
  %529 = and i64 -9079025748925639801, %528
  %530 = add i64 %529, %15
  %531 = xor i64 4375253126916186129, %513
  %532 = xor i64 %531, %530
  %533 = xor i64 %532, %526
  %534 = xor i64 %533, %516
  %535 = xor i64 %534, %527
  %536 = xor i64 %535, %515
  %537 = add i64 %5, -1532816628113518119
  %538 = add i64 -7873683839224243286, %5
  %539 = add i64 %538, 6340867211110725167
  %540 = add i64 %7, 3987783100890274662
  %541 = sub i64 0, %7
  %542 = sub i64 3987783100890274662, %541
  %543 = add i64 %13, -7681729829269014005
  %544 = add i64 7795461858987738944, %13
  %545 = sub i64 %544, -2969552385452798667
  %546 = xor i64 %540, 0
  %547 = xor i64 %546, %543
  %548 = xor i64 %547, %542
  %549 = xor i64 %548, %537
  %550 = xor i64 %549, %539
  %551 = xor i64 %550, %545
  %552 = mul i64 %536, %551
  %553 = trunc i64 %552 to i32
  %554 = xor i32 %512, %553
  store i32 %554, i32* %0, align 4
  %555 = call i8** @bf18348850871760216737(i32* %0)
  %556 = load i8*, i8** %555, align 8
  indirectbr i8* %556, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %557 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %557, align 4
  %558 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %558, align 4
  %559 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %559, align 4
  %560 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %560, align 4
  %561 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %561, align 4
  %562 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %563 = load i32, i32* %562, align 4
  store i32 %563, i32* %dispatcher, align 4
  %564 = load i8*, i8** %10, align 8
  %565 = load i8, i8* %564, align 1
  %566 = and i64 %9, 7621670402703152790
  %567 = xor i64 %9, -1
  %568 = or i64 -7621670402703152791, %567
  %569 = xor i64 %568, -1
  %570 = and i64 %569, -1
  %571 = add i64 %5, -5251856299156978433
  %572 = xor i64 -5251856299156978433, %5
  %573 = and i64 -5251856299156978433, %5
  %574 = mul i64 2, %573
  %575 = add i64 %572, %574
  %576 = xor i64 2185338790600425959, %570
  %577 = xor i64 %576, %575
  %578 = xor i64 %577, %566
  %579 = xor i64 %578, %571
  %580 = or i64 %1, -841447664379931988
  %581 = and i64 -841447664379931988, %1
  %582 = xor i64 -841447664379931988, %1
  %583 = or i64 %581, %582
  %584 = add i64 %5, 7956586849025752055
  %585 = xor i64 7956586849025752055, %5
  %586 = and i64 7956586849025752055, %5
  %587 = mul i64 2, %586
  %588 = add i64 %585, %587
  %589 = and i64 %27, -1026473095549036200
  %590 = xor i64 %27, -1
  %591 = xor i64 -1026473095549036200, %590
  %592 = and i64 %591, -1026473095549036200
  %593 = xor i64 %580, %592
  %594 = xor i64 %593, 7758288395491181486
  %595 = xor i64 %594, %588
  %596 = xor i64 %595, %583
  %597 = xor i64 %596, %584
  %598 = xor i64 %597, %589
  %599 = mul i64 %579, %598
  %600 = trunc i64 %599 to i8
  %601 = mul i8 %565, %600
  %602 = and i64 %5, -5770573960863471976
  %603 = xor i64 %5, -1
  %604 = or i64 5770573960863471975, %603
  %605 = xor i64 %604, -1
  %606 = and i64 %605, -1
  %607 = and i64 %3, -1124179325037470861
  %608 = xor i64 %3, -1
  %609 = or i64 1124179325037470860, %608
  %610 = xor i64 %609, -1
  %611 = and i64 %610, -1
  %612 = xor i64 %611, %607
  %613 = xor i64 %612, %606
  %614 = xor i64 %613, %602
  %615 = xor i64 %614, 3101570398991300721
  %616 = add i64 %1, 8440518620407603126
  %617 = sub i64 0, %1
  %618 = sub i64 8440518620407603126, %617
  %619 = sext i32 %dispatcher1 to i64
  %620 = and i64 %619, 8034966556706651640
  %621 = or i64 -8034966556706651641, %619
  %622 = sub i64 %621, -8034966556706651641
  %623 = and i64 %27, 8981788690183718753
  %624 = xor i64 %27, -1
  %625 = xor i64 8981788690183718753, %624
  %626 = and i64 %625, 8981788690183718753
  %627 = xor i64 %620, %618
  %628 = xor i64 %627, %616
  %629 = xor i64 %628, %626
  %630 = xor i64 %629, 696205971962007842
  %631 = xor i64 %630, %622
  %632 = xor i64 %631, %623
  %633 = mul i64 %615, %632
  %634 = trunc i64 %633 to i8
  %635 = mul i8 %565, %634
  %636 = add i8 2, %635
  %637 = mul i8 %601, %636
  %638 = srem i8 %637, 4
  %639 = and i64 %15, -160830808496231208
  %640 = xor i64 %15, -1
  %641 = or i64 160830808496231207, %640
  %642 = xor i64 %641, -1
  %643 = and i64 %642, -1
  %644 = or i64 %1, -1412671663758897488
  %645 = xor i64 %1, -1
  %646 = and i64 %645, 7429842769061074673
  %647 = and i64 %1, -7429842769061074674
  %648 = or i64 %646, %647
  %649 = xor i64 -8396622609033734079, %648
  %650 = xor i64 %1, -1
  %651 = or i64 1412671663758897487, %650
  %652 = xor i64 %651, -1
  %653 = and i64 %652, -1
  %654 = or i64 %649, %653
  %655 = xor i64 %639, %644
  %656 = xor i64 %655, -106350419096555425
  %657 = xor i64 %656, %643
  %658 = xor i64 %657, %654
  %659 = and i64 %1, 2956272381878899307
  %660 = xor i64 %1, -1
  %661 = or i64 -2956272381878899308, %660
  %662 = xor i64 %661, -1
  %663 = and i64 %662, -1
  %664 = add i64 %13, 5068599017854639899
  %665 = sub i64 0, %13
  %666 = add i64 -5068599017854639899, %665
  %667 = sub i64 0, %666
  %668 = or i64 %7, 4160376806907703548
  %669 = xor i64 %7, -1
  %670 = and i64 %669, 6397681594703350308
  %671 = and i64 %7, -6397681594703350309
  %672 = or i64 %670, %671
  %673 = xor i64 7022661212917267160, %672
  %674 = xor i64 %7, -1
  %675 = or i64 -4160376806907703549, %674
  %676 = xor i64 %675, -1
  %677 = and i64 %676, -1
  %678 = or i64 %673, %677
  %679 = xor i64 %664, %668
  %680 = xor i64 %679, %678
  %681 = xor i64 %680, 0
  %682 = xor i64 %681, %659
  %683 = xor i64 %682, %667
  %684 = xor i64 %683, %663
  %685 = mul i64 %658, %684
  %686 = trunc i64 %685 to i8
  %687 = icmp eq i8 %638, %686
  %688 = mul i8 %565, %565
  %689 = add i8 %688, %565
  %690 = add i64 %27, 4824039202908861675
  %691 = sub i64 0, %27
  %692 = add i64 -4824039202908861675, %691
  %693 = sub i64 0, %692
  %694 = or i64 %15, -3659322825844361074
  %695 = xor i64 %15, -1
  %696 = and i64 %695, -3082349287270635414
  %697 = and i64 %15, 3082349287270635413
  %698 = or i64 %696, %697
  %699 = xor i64 1733378845943222500, %698
  %700 = xor i64 %15, -1
  %701 = or i64 3659322825844361073, %700
  %702 = xor i64 %701, -1
  %703 = and i64 %702, -1
  %704 = or i64 %699, %703
  %705 = and i64 %27, -6957237385952717064
  %706 = xor i64 %27, -1
  %707 = xor i64 -6957237385952717064, %706
  %708 = and i64 %707, -6957237385952717064
  %709 = xor i64 %704, %694
  %710 = xor i64 %709, 4388846288001998175
  %711 = xor i64 %710, %693
  %712 = xor i64 %711, %705
  %713 = xor i64 %712, %690
  %714 = xor i64 %713, %708
  %715 = and i64 %9, 1484906102973387279
  %716 = or i64 -1484906102973387280, %9
  %717 = sub i64 %716, -1484906102973387280
  %718 = and i64 %1, -6634729426034317992
  %719 = xor i64 %1, -1
  %720 = xor i64 -6634729426034317992, %719
  %721 = and i64 %720, -6634729426034317992
  %722 = xor i64 %715, 8882915390494211390
  %723 = xor i64 %722, %721
  %724 = xor i64 %723, %718
  %725 = xor i64 %724, %717
  %726 = mul i64 %714, %725
  %727 = trunc i64 %726 to i8
  %728 = srem i8 %689, %727
  %729 = icmp eq i8 %728, 0
  %730 = and i1 %687, %729
  %731 = sext i32 %dispatcher1 to i64
  %732 = and i64 %731, 1139926312528045306
  %733 = xor i64 %731, -1
  %734 = or i64 -1139926312528045307, %733
  %735 = xor i64 %734, -1
  %736 = and i64 %735, -1
  %737 = or i64 %27, -7085225280321584628
  %738 = and i64 -7085225280321584628, %27
  %739 = xor i64 -7085225280321584628, %27
  %740 = or i64 %738, %739
  %741 = xor i64 %732, %740
  %742 = xor i64 %741, %736
  %743 = xor i64 %742, %737
  %744 = xor i64 %743, 5778757893285732315
  %745 = or i64 %15, 6978026228617551874
  %746 = xor i64 %15, -1
  %747 = and i64 %746, 3706652216645254934
  %748 = and i64 %15, -3706652216645254935
  %749 = or i64 %747, %748
  %750 = xor i64 6027577097773801236, %749
  %751 = xor i64 %15, -1
  %752 = or i64 -6978026228617551875, %751
  %753 = xor i64 %752, -1
  %754 = and i64 %753, -1
  %755 = or i64 %750, %754
  %756 = add i64 %27, -8732008921416922935
  %757 = sub i64 0, %27
  %758 = add i64 8732008921416922935, %757
  %759 = sub i64 0, %758
  %760 = and i64 %15, 812824339707687545
  %761 = xor i64 %15, -1
  %762 = or i64 -812824339707687546, %761
  %763 = xor i64 %762, -1
  %764 = and i64 %763, -1
  %765 = xor i64 %760, %759
  %766 = xor i64 %765, 877191955866112850
  %767 = xor i64 %766, %745
  %768 = xor i64 %767, %756
  %769 = xor i64 %768, %755
  %770 = xor i64 %769, %764
  %771 = mul i64 %744, %770
  %772 = trunc i64 %771 to i32
  %773 = select i1 %730, i32 388314413, i32 %772
  %774 = xor i32 %773, 11
  store i32 %774, i32* %0, align 4
  %775 = call i8** @bf18348850871760216737(i32* %0)
  %776 = load i8*, i8** %775, align 8
  indirectbr i8* %776, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %777 = load i8*, i8** %16, align 8
  %778 = load i8, i8* %777, align 1
  %779 = mul i8 %778, 2
  %780 = mul i8 %778, 2
  %781 = add i8 2, %780
  %782 = mul i8 %779, %781
  %783 = srem i8 %782, 4
  %784 = icmp eq i8 %783, 0
  %785 = mul i8 %778, %778
  %786 = add i8 %785, %778
  %787 = srem i8 %786, 2
  %788 = icmp eq i8 %787, 0
  %789 = xor i1 %784, true
  %790 = or i1 %789, %788
  %791 = xor i1 %784, true
  %792 = sub i1 %790, %791
  %793 = and i64 %7, 1042847688577825442
  %794 = xor i64 %7, -1
  %795 = or i64 -1042847688577825443, %794
  %796 = xor i64 %795, -1
  %797 = and i64 %796, -1
  %798 = or i64 %15, 3647811645821686831
  %799 = and i64 3647811645821686831, %15
  %800 = xor i64 3647811645821686831, %15
  %801 = or i64 %799, %800
  %802 = xor i64 %801, %797
  %803 = xor i64 %802, %798
  %804 = xor i64 %803, -709775950875658733
  %805 = xor i64 %804, %793
  %806 = or i64 %11, 4184754217554331580
  %807 = xor i64 %11, -1
  %808 = and i64 4184754217554331580, %807
  %809 = add i64 %808, %11
  %810 = add i64 %15, -5322045037995710106
  %811 = and i64 -5322045037995710106, %15
  %812 = or i64 -5322045037995710106, %15
  %813 = add i64 %811, %812
  %814 = or i64 %5, 6131724437911784303
  %815 = and i64 6131724437911784303, %5
  %816 = xor i64 6131724437911784303, %5
  %817 = or i64 %815, %816
  %818 = xor i64 %817, %814
  %819 = xor i64 %818, %809
  %820 = xor i64 %819, %813
  %821 = xor i64 %820, %810
  %822 = xor i64 %821, -6576797594261317024
  %823 = xor i64 %822, %806
  %824 = mul i64 %805, %823
  %825 = trunc i64 %824 to i32
  %826 = select i1 %792, i32 388314401, i32 %825
  %827 = xor i32 %826, 1
  store i32 %827, i32* %0, align 4
  %828 = call i8** @bf18348850871760216737(i32* %0)
  %829 = load i8*, i8** %828, align 8
  indirectbr i8* %829, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %136, %EntryBasicBlockSplit
  %830 = load i8*, i8** %6, align 8
  %831 = load i8, i8* %830, align 1
  %832 = add i64 %7, 7614717271958944200
  %833 = sub i64 0, %7
  %834 = sub i64 7614717271958944200, %833
  %835 = and i64 %27, 2593038022951496500
  %836 = xor i64 %27, -1
  %837 = xor i64 2593038022951496500, %836
  %838 = and i64 %837, 2593038022951496500
  %839 = sext i32 %dispatcher1 to i64
  %840 = or i64 %839, -2111707433803233418
  %841 = xor i64 %839, -1
  %842 = and i64 %841, -5178821054415836584
  %843 = and i64 %839, 5178821054415836583
  %844 = or i64 %842, %843
  %845 = xor i64 6525879646265912622, %844
  %846 = xor i64 %839, -1
  %847 = or i64 2111707433803233417, %846
  %848 = xor i64 %847, -1
  %849 = and i64 %848, -1
  %850 = or i64 %845, %849
  %851 = xor i64 %834, -8908546797606498199
  %852 = xor i64 %851, %838
  %853 = xor i64 %852, %840
  %854 = xor i64 %853, %835
  %855 = xor i64 %854, %850
  %856 = xor i64 %855, %832
  %857 = add i64 %11, -8438091678933368263
  %858 = and i64 -8438091678933368263, %11
  %859 = or i64 -8438091678933368263, %11
  %860 = add i64 %858, %859
  %861 = or i64 %7, -280726614344206270
  %862 = xor i64 %7, -1
  %863 = and i64 -280726614344206270, %862
  %864 = add i64 %863, %7
  %865 = add i64 %13, 2153672501595205870
  %866 = sub i64 0, %13
  %867 = add i64 -2153672501595205870, %866
  %868 = sub i64 0, %867
  %869 = xor i64 %868, %864
  %870 = xor i64 %869, %860
  %871 = xor i64 %870, 7727986350194819033
  %872 = xor i64 %871, %861
  %873 = xor i64 %872, %865
  %874 = xor i64 %873, %857
  %875 = mul i64 %856, %874
  %876 = trunc i64 %875 to i8
  %877 = and i8 %831, %876
  %878 = icmp eq i8 %877, 1
  %879 = mul i8 %831, %831
  %880 = add i8 %879, %831
  %881 = srem i8 %880, 2
  %882 = icmp eq i8 %881, 0
  %883 = xor i1 %882, true
  %884 = and i1 %878, %883
  %885 = add i1 %884, %882
  %886 = select i1 %885, i32 388314413, i32 388314407
  %887 = and i64 %13, -5929113181071884748
  %888 = or i64 5929113181071884747, %13
  %889 = sub i64 %888, 5929113181071884747
  %890 = add i64 %13, 180084716415115289
  %891 = sub i64 0, %13
  %892 = sub i64 180084716415115289, %891
  %893 = add i64 %9, 8358885244849716513
  %894 = sub i64 0, %9
  %895 = add i64 -8358885244849716513, %894
  %896 = sub i64 0, %895
  %897 = xor i64 %889, %890
  %898 = xor i64 %897, %892
  %899 = xor i64 %898, %887
  %900 = xor i64 %899, %896
  %901 = xor i64 %900, 462949377261018059
  %902 = xor i64 %901, %893
  %903 = and i64 %15, -7777826062119774689
  %904 = or i64 7777826062119774688, %15
  %905 = sub i64 %904, 7777826062119774688
  %906 = or i64 %7, -3420656364373726290
  %907 = and i64 -3420656364373726290, %7
  %908 = xor i64 -3420656364373726290, %7
  %909 = or i64 %907, %908
  %910 = xor i64 %906, %905
  %911 = xor i64 %910, %903
  %912 = xor i64 %911, %909
  %913 = xor i64 %912, 2487370184776273437
  %914 = mul i64 %902, %913
  %915 = trunc i64 %914 to i32
  %916 = xor i32 %886, %915
  %917 = or i64 %27, -8642236322732836182
  %918 = and i64 -8642236322732836182, %27
  %919 = xor i64 -8642236322732836182, %27
  %920 = or i64 %918, %919
  %921 = add i64 %1, -4456393285029803430
  %922 = and i64 -4456393285029803430, %1
  %923 = or i64 -4456393285029803430, %1
  %924 = add i64 %922, %923
  %925 = xor i64 %917, -6692732184779595001
  %926 = xor i64 %925, %920
  %927 = xor i64 %926, %921
  %928 = xor i64 %927, %924
  %929 = add i64 %11, -8301928912458847055
  %930 = sub i64 0, %11
  %931 = sub i64 -8301928912458847055, %930
  %932 = or i64 %5, -7510981409408234061
  %933 = xor i64 %5, -1
  %934 = and i64 -7510981409408234061, %933
  %935 = add i64 %934, %5
  %936 = xor i64 %935, -2113780808919895427
  %937 = xor i64 %936, %929
  %938 = xor i64 %937, %932
  %939 = xor i64 %938, %931
  %940 = mul i64 %928, %939
  %941 = trunc i64 %940 to i32
  %942 = and i32 %916, %941
  %943 = and i32 %886, 1788331924
  %944 = or i32 %942, %943
  %945 = add i64 %7, -5339303873130756081
  %946 = and i64 -5339303873130756081, %7
  %947 = or i64 -5339303873130756081, %7
  %948 = add i64 %946, %947
  %949 = or i64 %11, 1249047881800513247
  %950 = xor i64 %11, -1
  %951 = and i64 %950, -7590215172009871029
  %952 = and i64 %11, 7590215172009871028
  %953 = or i64 %951, %952
  %954 = xor i64 -8647014732030652524, %953
  %955 = xor i64 %11, -1
  %956 = or i64 -1249047881800513248, %955
  %957 = xor i64 %956, -1
  %958 = and i64 %957, -1
  %959 = or i64 %954, %958
  %960 = xor i64 %959, %945
  %961 = xor i64 %960, %948
  %962 = xor i64 %961, -5011866268416250991
  %963 = xor i64 %962, %949
  %964 = and i64 %13, -7190327334542283254
  %965 = xor i64 %13, -1
  %966 = or i64 7190327334542283253, %965
  %967 = xor i64 %966, -1
  %968 = and i64 %967, -1
  %969 = or i64 %15, 3342212035337297420
  %970 = xor i64 %15, -1
  %971 = and i64 3342212035337297420, %970
  %972 = add i64 %971, %15
  %973 = or i64 %1, -4289917160308280772
  %974 = and i64 -4289917160308280772, %1
  %975 = xor i64 -4289917160308280772, %1
  %976 = or i64 %974, %975
  %977 = xor i64 %969, %968
  %978 = xor i64 %977, %976
  %979 = xor i64 %978, %973
  %980 = xor i64 %979, %972
  %981 = xor i64 %980, 2462431873214150609
  %982 = xor i64 %981, %964
  %983 = mul i64 %963, %982
  %984 = trunc i64 %983 to i32
  %985 = xor i32 %944, %984
  store i32 %985, i32* %0, align 4
  %986 = call i8** @bf18348850871760216737(i32* %0)
  %987 = load i8*, i8** %986, align 8
  indirectbr i8* %987, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.12(i32* %.out, i32* %.out1) #5 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314474)
  %2 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.12, %.exitStub), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314377)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.12, %"2"), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314400)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.12, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314387)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.12, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.12, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.12, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.12, %"2"), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.12, %.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.12, %"2"), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.12, %.exitStub), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %18 = or i64 %1, 2671196395874079874
  %19 = xor i64 %1, -1
  %20 = and i64 2671196395874079874, %19
  %21 = add i64 %20, %1
  %22 = or i64 %3, -3649458386180590827
  %23 = xor i64 %3, -1
  %24 = and i64 -3649458386180590827, %23
  %25 = add i64 %24, %3
  %26 = xor i64 %22, %25
  %27 = xor i64 %26, 1386926174927061361
  %28 = xor i64 %27, %18
  %29 = xor i64 %28, %21
  %30 = add i64 %3, 1705065525613607136
  %31 = sub i64 0, %3
  %32 = add i64 -1705065525613607136, %31
  %33 = sub i64 0, %32
  %34 = and i64 %3, 255790876970505178
  %35 = xor i64 %3, -1
  %36 = xor i64 255790876970505178, %35
  %37 = and i64 %36, 255790876970505178
  %38 = xor i64 %30, 1648213591612620356
  %39 = xor i64 %38, %33
  %40 = xor i64 %39, %37
  %41 = xor i64 %40, %34
  %42 = mul i64 %29, %41
  %43 = trunc i64 %42 to i32
  %44 = mul i32 56, %43
  store i32 %44, i32* %.out, align 4
  %45 = sdiv i32 118, 71
  store i32 %45, i32* %.out1, align 4
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %46 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %46, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

.exitStub:                                        ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main..split() #5 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314448)
  %2 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %1
  store i8* blockaddress(@main..split, %.exitStub), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314403)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@main..split, %.split), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314491)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@main..split, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314460)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@main..split, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main..split, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main..split, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main..split, %.split), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main..split, %.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

BogusBasciBlock:                                  ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main..split, %.exitStub), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main..split, %.split), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

.split:                                           ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %18 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

.exitStub:                                        ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.13(i32 %0, i32 %1, i1* %.out) #5 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314401)
  %4 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.13, %.exitStub1), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314405)
  %6 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.13, %codeRepl), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314407)
  %8 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.13, %.exitStub), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314403)
  %10 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %9
  store i8* blockaddress(@main.extracted.13, %"2"), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314400)
  %12 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %11
  store i8* blockaddress(@main.extracted.13, %EntryBasicBlockSplit), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314404)
  %14 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %13
  store i8* blockaddress(@main.extracted.13, %BogusBasciBlock), i8** %14, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %15 = sext i32 %0 to i64
  %16 = add i64 %15, -830031015117424482
  %17 = xor i64 -830031015117424482, %15
  %18 = and i64 -830031015117424482, %15
  %19 = mul i64 2, %18
  %20 = add i64 %17, %19
  %21 = sext i32 %1 to i64
  %22 = add i64 %21, 1827266690669512785
  %23 = and i64 1827266690669512785, %21
  %24 = or i64 1827266690669512785, %21
  %25 = add i64 %23, %24
  %26 = xor i64 %22, %25
  %27 = xor i64 %26, %16
  %28 = xor i64 %27, %20
  %29 = xor i64 %28, 7595723676864031187
  %30 = sext i32 %1 to i64
  %31 = and i64 %30, 5440701703311722055
  %32 = xor i64 %30, -1
  %33 = or i64 -5440701703311722056, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = sext i32 %1 to i64
  %37 = or i64 %36, -1062863716145427963
  %38 = and i64 -1062863716145427963, %36
  %39 = xor i64 -1062863716145427963, %36
  %40 = or i64 %38, %39
  %41 = xor i64 %37, %35
  %42 = xor i64 %41, %40
  %43 = xor i64 %42, -8243245337904802213
  %44 = xor i64 %43, %31
  %45 = mul i64 %29, %44
  %46 = trunc i64 %45 to i32
  %.reg2mem9 = alloca i8**, i32 %46, align 8
  %.reg2mem6 = alloca i8**, align 8
  %47 = sext i32 %0 to i64
  %48 = add i64 %47, -6604470377285318544
  %49 = sub i64 0, %47
  %50 = sub i64 -6604470377285318544, %49
  %51 = sext i32 %0 to i64
  %52 = and i64 %51, 3394546570625334589
  %53 = or i64 -3394546570625334590, %51
  %54 = sub i64 %53, -3394546570625334590
  %55 = sext i32 %1 to i64
  %56 = and i64 %55, -6421062904820153616
  %57 = or i64 6421062904820153615, %55
  %58 = sub i64 %57, 6421062904820153615
  %59 = xor i64 %58, %54
  %60 = xor i64 %59, %56
  %61 = xor i64 %60, %52
  %62 = xor i64 %61, -8937875445532119271
  %63 = xor i64 %62, %50
  %64 = xor i64 %63, %48
  %65 = sext i32 %0 to i64
  %66 = and i64 %65, -1870882750937051704
  %67 = xor i64 %65, -1
  %68 = or i64 1870882750937051703, %67
  %69 = xor i64 %68, -1
  %70 = and i64 %69, -1
  %71 = sext i32 %1 to i64
  %72 = or i64 %71, 6508828812270829985
  %73 = xor i64 %71, -1
  %74 = and i64 %73, -934095341835957132
  %75 = and i64 %71, 934095341835957131
  %76 = or i64 %74, %75
  %77 = xor i64 -6242714290495795755, %76
  %78 = xor i64 %71, -1
  %79 = or i64 -6508828812270829986, %78
  %80 = xor i64 %79, -1
  %81 = and i64 %80, -1
  %82 = or i64 %77, %81
  %83 = xor i64 -769510510942175959, %82
  %84 = xor i64 %83, %66
  %85 = xor i64 %84, %70
  %86 = xor i64 %85, %72
  %87 = mul i64 %64, %86
  %88 = trunc i64 %87 to i32
  %.reg2mem3 = alloca i8**, i32 %88, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %89 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.13, %BogusBasciBlock), i8** %89, align 8
  %90 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %90, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.13, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %91 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %91, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.13, %"2"), i8** %.reload5, align 8
  %92 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %92, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.13, %codeRepl), i8** %.reload8, align 8
  %93 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %93, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.13, %.exitStub), i8** %.reload11, align 8
  %94 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %94, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@main.extracted.13, %.exitStub1), i8** %.reload14, align 8
  %95 = alloca i64, align 8
  %96 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %97 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5534904613522678169, i32 0, i64 %96
  store i8** %97, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %98 = load i8*, i8** %.reload, align 8
  indirectbr i8* %98, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %99 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.13, %BogusBasciBlock), i8** %99, align 8
  %100 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.13, %EntryBasicBlockSplit), i8** %100, align 8
  %101 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.13, %codeRepl), i8** %101, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %102 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %102, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.13.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %103 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %103, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %104 = sub i64 43, 72
  %105 = sub i64 47, -21
  %106 = or i64 %13, -5369909256983079378
  %107 = and i64 -5369909256983079378, %13
  %108 = xor i64 -5369909256983079378, %13
  %109 = or i64 %107, %108
  %110 = or i64 %13, 6064013523503775363
  %111 = and i64 6064013523503775363, %13
  %112 = xor i64 6064013523503775363, %13
  %113 = or i64 %111, %112
  %114 = xor i64 %109, %106
  %115 = xor i64 %114, %113
  %116 = xor i64 %115, 3688743902616146735
  %117 = xor i64 %116, %110
  %118 = and i64 %3, -7951538298932091613
  %119 = xor i64 %3, -1
  %120 = or i64 7951538298932091612, %119
  %121 = xor i64 %120, -1
  %122 = and i64 %121, -1
  %123 = add i64 %11, -1758608172481005634
  %124 = add i64 4234938961242076884, %11
  %125 = sub i64 %124, 5993547133723082518
  %126 = xor i64 -4438018674309124297, %122
  %127 = xor i64 %126, %123
  %128 = xor i64 %127, %118
  %129 = xor i64 %128, %125
  %130 = mul i64 %117, %129
  %131 = mul i64 %130, 121
  %132 = sdiv i64 2, 37
  %133 = or i64 %3, 443437557780674512
  %134 = xor i64 %3, -1
  %135 = and i64 443437557780674512, %134
  %136 = add i64 %135, %3
  %137 = sext i32 %1 to i64
  %138 = add i64 %137, 645050618259214558
  %139 = sub i64 0, %137
  %140 = add i64 -645050618259214558, %139
  %141 = sub i64 0, %140
  %142 = xor i64 %138, %133
  %143 = xor i64 %142, 6976093382011263915
  %144 = xor i64 %143, %136
  %145 = xor i64 %144, %141
  %146 = and i64 %13, 4793375817243632552
  %147 = xor i64 %13, -1
  %148 = or i64 -4793375817243632553, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = and i64 %11, 5636684612152172904
  %152 = xor i64 %11, -1
  %153 = xor i64 5636684612152172904, %152
  %154 = and i64 %153, 5636684612152172904
  %155 = or i64 %5, 322540243546576903
  %156 = and i64 322540243546576903, %5
  %157 = xor i64 322540243546576903, %5
  %158 = or i64 %156, %157
  %159 = xor i64 %150, %155
  %160 = xor i64 %159, %154
  %161 = xor i64 %160, %158
  %162 = xor i64 %161, %146
  %163 = xor i64 %162, -2860936785030193551
  %164 = xor i64 %163, %151
  %165 = mul i64 %145, %164
  %166 = mul i64 %165, 35
  %167 = add i64 28, 106
  %168 = add i64 34, 16
  %169 = srem i32 %0, 2
  %170 = add i64 %96, -9021095003406220678
  %171 = add i64 3814403339154962676, %96
  %172 = add i64 %171, 5611245731148368262
  %173 = add i64 %96, 53638822336649365
  %174 = sub i64 0, %96
  %175 = sub i64 53638822336649365, %174
  %176 = xor i64 -6415017364006722373, %173
  %177 = xor i64 %176, %170
  %178 = xor i64 %177, %175
  %179 = xor i64 %178, %172
  %180 = or i64 %96, 8869448284432867989
  %181 = xor i64 %96, -1
  %182 = and i64 %181, -8386638063834741570
  %183 = and i64 %96, 8386638063834741569
  %184 = or i64 %182, %183
  %185 = xor i64 -1114023921057929685, %184
  %186 = xor i64 %96, -1
  %187 = or i64 -8869448284432867990, %186
  %188 = xor i64 %187, -1
  %189 = and i64 %188, -1
  %190 = or i64 %185, %189
  %191 = sext i32 %1 to i64
  %192 = or i64 %191, 8845272240164668931
  %193 = and i64 8845272240164668931, %191
  %194 = xor i64 8845272240164668931, %191
  %195 = or i64 %193, %194
  %196 = and i64 %5, -7535946077152150234
  %197 = xor i64 %5, -1
  %198 = xor i64 -7535946077152150234, %197
  %199 = and i64 %198, -7535946077152150234
  %200 = xor i64 %195, %196
  %201 = xor i64 %200, %180
  %202 = xor i64 %201, 0
  %203 = xor i64 %202, %192
  %204 = xor i64 %203, %190
  %205 = xor i64 %204, %199
  %206 = mul i64 %179, %205
  %207 = trunc i64 %206 to i32
  %208 = icmp eq i32 %169, %207
  %209 = and i64 %3, -4268323498245379912
  %210 = xor i64 %3, -1
  %211 = xor i64 -4268323498245379912, %210
  %212 = and i64 %211, -4268323498245379912
  %213 = and i64 %5, -7668133903650005229
  %214 = or i64 7668133903650005228, %5
  %215 = sub i64 %214, 7668133903650005228
  %216 = xor i64 %215, %213
  %217 = xor i64 %216, -9103095220090110699
  %218 = xor i64 %217, %209
  %219 = xor i64 %218, %212
  %220 = or i64 %3, -7145104719957317559
  %221 = xor i64 %3, -1
  %222 = and i64 -7145104719957317559, %221
  %223 = add i64 %222, %3
  %224 = sext i32 %0 to i64
  %225 = and i64 %224, 8038952003944580900
  %226 = xor i64 %224, -1
  %227 = or i64 -8038952003944580901, %226
  %228 = xor i64 %227, -1
  %229 = and i64 %228, -1
  %230 = sext i32 %0 to i64
  %231 = or i64 %230, 3373657993046083429
  %232 = xor i64 %230, -1
  %233 = and i64 3373657993046083429, %232
  %234 = add i64 %233, %230
  %235 = xor i64 %220, %225
  %236 = xor i64 %235, %223
  %237 = xor i64 %236, %234
  %238 = xor i64 %237, %231
  %239 = xor i64 %238, 6680959589103096954
  %240 = xor i64 %239, %229
  %241 = mul i64 %219, %240
  %242 = trunc i64 %241 to i32
  %243 = mul i32 %1, %242
  %244 = mul i32 %1, 2
  %245 = add i32 1685132844, %244
  %246 = add i32 %245, -1685132842
  %247 = mul i32 %243, %246
  store i32 %247, i32* %.reg2mem17, align 4
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %248 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %248, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %95, align 8
  %249 = alloca i8**, align 8
  %250 = and i64 %7, -8818584070674998919
  %251 = xor i64 %7, -1
  %252 = xor i64 -8818584070674998919, %251
  %253 = and i64 %252, -8818584070674998919
  %254 = or i64 %3, 2032420485798620426
  %255 = and i64 2032420485798620426, %3
  %256 = xor i64 2032420485798620426, %3
  %257 = or i64 %255, %256
  %258 = sext i32 %1 to i64
  %259 = or i64 %258, -2210431849517180338
  %260 = xor i64 %258, -1
  %261 = and i64 -2210431849517180338, %260
  %262 = add i64 %261, %258
  %263 = xor i64 -6588815768858944489, %257
  %264 = xor i64 %263, %259
  %265 = xor i64 %264, %253
  %266 = xor i64 %265, %262
  %267 = xor i64 %266, %250
  %268 = xor i64 %267, %254
  %269 = or i64 %11, -2155132998682779883
  %270 = xor i64 %11, -1
  %271 = and i64 -2155132998682779883, %270
  %272 = add i64 %271, %11
  %273 = or i64 %3, 8178015773325434404
  %274 = xor i64 %3, -1
  %275 = and i64 %274, -3921794625733130296
  %276 = and i64 %3, 3921794625733130295
  %277 = or i64 %275, %276
  %278 = xor i64 -5121478341337114132, %277
  %279 = xor i64 %3, -1
  %280 = or i64 -8178015773325434405, %279
  %281 = xor i64 %280, -1
  %282 = and i64 %281, -1
  %283 = or i64 %278, %282
  %284 = sext i32 %1 to i64
  %285 = or i64 %284, -2847631404772525749
  %286 = and i64 -2847631404772525749, %284
  %287 = xor i64 -2847631404772525749, %284
  %288 = or i64 %286, %287
  %289 = xor i64 %272, 0
  %290 = xor i64 %289, %273
  %291 = xor i64 %290, %285
  %292 = xor i64 %291, %269
  %293 = xor i64 %292, %288
  %294 = xor i64 %293, %283
  %295 = mul i64 %268, %294
  %296 = trunc i64 %295 to i32
  %297 = add i64 %9, 7420924011467886826
  %298 = add i64 -4897090832697294894, %9
  %299 = add i64 %298, -6128729229544369896
  %300 = add i64 %96, 6905474114487075882
  %301 = sub i64 0, %96
  %302 = sub i64 6905474114487075882, %301
  %303 = xor i64 %299, %300
  %304 = xor i64 %303, %302
  %305 = xor i64 %304, %297
  %306 = xor i64 %305, -7952292771619937461
  %307 = add i64 %7, -2594122387581703665
  %308 = add i64 4756017130920719003, %7
  %309 = sub i64 %308, 7350139518502422668
  %310 = add i64 %7, 7740933516025935002
  %311 = and i64 7740933516025935002, %7
  %312 = or i64 7740933516025935002, %7
  %313 = add i64 %311, %312
  %314 = add i64 %5, 2890471752754488669
  %315 = sub i64 0, %5
  %316 = add i64 -2890471752754488669, %315
  %317 = sub i64 0, %316
  %318 = xor i64 %313, %317
  %319 = xor i64 %318, 0
  %320 = xor i64 %319, %314
  %321 = xor i64 %320, %310
  %322 = xor i64 %321, %307
  %323 = xor i64 %322, %309
  %324 = mul i64 %306, %323
  %325 = or i64 %7, -2846497128222880272
  %326 = and i64 -2846497128222880272, %7
  %327 = xor i64 -2846497128222880272, %7
  %328 = or i64 %326, %327
  %329 = and i64 %13, -3180210021935743875
  %330 = xor i64 %13, -1
  %331 = xor i64 -3180210021935743875, %330
  %332 = and i64 %331, -3180210021935743875
  %333 = xor i64 %328, %329
  %334 = xor i64 %333, %332
  %335 = xor i64 %334, %325
  %336 = xor i64 %335, 4405973529383114693
  %337 = sext i32 %0 to i64
  %338 = and i64 %337, -7263461394738068340
  %339 = or i64 7263461394738068339, %337
  %340 = sub i64 %339, 7263461394738068339
  %341 = or i64 %13, 5316086383533357493
  %342 = xor i64 %13, -1
  %343 = and i64 5316086383533357493, %342
  %344 = add i64 %343, %13
  %345 = xor i64 %340, %338
  %346 = xor i64 %345, %344
  %347 = xor i64 %346, 0
  %348 = xor i64 %347, %341
  %349 = mul i64 %336, %348
  %350 = trunc i64 %349 to i32
  %351 = add i64 %11, -2645280285175980112
  %352 = add i64 2230930845008403462, %11
  %353 = sub i64 %352, 4876211130184383574
  %354 = and i64 %7, -5502285537459740532
  %355 = or i64 5502285537459740531, %7
  %356 = sub i64 %355, 5502285537459740531
  %357 = and i64 %11, 1080250584134505741
  %358 = or i64 -1080250584134505742, %11
  %359 = sub i64 %358, -1080250584134505742
  %360 = xor i64 %356, %351
  %361 = xor i64 %360, %353
  %362 = xor i64 %361, %359
  %363 = xor i64 %362, %357
  %364 = xor i64 %363, %354
  %365 = xor i64 %364, -6028593077874943605
  %366 = and i64 %13, 2662474862097450366
  %367 = or i64 -2662474862097450367, %13
  %368 = sub i64 %367, -2662474862097450367
  %369 = add i64 %5, -4072621114168053058
  %370 = sub i64 0, %5
  %371 = add i64 4072621114168053058, %370
  %372 = sub i64 0, %371
  %373 = xor i64 %366, 0
  %374 = xor i64 %373, %372
  %375 = xor i64 %374, %369
  %376 = xor i64 %375, %368
  %377 = mul i64 %365, %376
  %378 = trunc i64 %377 to i32
  call void @"5784248439022692321"(i32 1, i64* null, i8*** null, i64* %95, i8*** %249, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 %296, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 %324, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 %350, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 %378, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %379 = load i8**, i8*** %249, align 8
  %380 = load i8*, i8** %379, align 8
  %381 = bitcast i8* %380 to i1 (i32, i32, i1*)*
  %.reload18 = load i32, i32* %.reg2mem17, align 4
  %targetBlock = call i1 %381(i32 %.reload18, i32 %1, i1* %.out)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %382 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %383 = load i8*, i8** %382, align 8
  indirectbr i8* %383, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.14(i32 %0) #5 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314401)
  %3 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.14, %loopEnd), i8** %3, align 8
  %4 = sext i32 %0 to i64
  %5 = add i64 %4, -948338891968057033
  %6 = add i64 7257114310752906615, %4
  %7 = add i64 %6, -8205453202720963648
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, 3030366990559103650
  %10 = xor i64 %8, -1
  %11 = xor i64 3030366990559103650, %10
  %12 = and i64 %11, 3030366990559103650
  %13 = xor i64 %12, %7
  %14 = xor i64 %13, -3421572308935783295
  %15 = xor i64 %14, %9
  %16 = xor i64 %15, %5
  %17 = sext i32 %0 to i64
  %18 = and i64 %17, 2096843668095160946
  %19 = xor i64 %17, -1
  %20 = xor i64 2096843668095160946, %19
  %21 = and i64 %20, 2096843668095160946
  %22 = sext i32 %0 to i64
  %23 = and i64 %22, -9090133029410312742
  %24 = xor i64 %22, -1
  %25 = xor i64 -9090133029410312742, %24
  %26 = and i64 %25, -9090133029410312742
  %27 = sext i32 %0 to i64
  %28 = and i64 %27, 2938589308526726647
  %29 = xor i64 %27, -1
  %30 = xor i64 2938589308526726647, %29
  %31 = and i64 %30, 2938589308526726647
  %32 = xor i64 %23, %18
  %33 = xor i64 %32, -1502005521865575644
  %34 = xor i64 %33, %31
  %35 = xor i64 %34, %21
  %36 = xor i64 %35, %28
  %37 = xor i64 %36, %26
  %38 = mul i64 %16, %37
  %39 = call i64 @h9549842938191327224(i64 %38)
  %40 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %39
  store i8* blockaddress(@main.extracted.14, %.exitStub), i8** %40, align 8
  %41 = call i64 @h9549842938191327224(i64 388314400)
  %42 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %41
  store i8* blockaddress(@main.extracted.14, %codeRepl), i8** %42, align 8
  %43 = sext i32 %0 to i64
  %44 = add i64 %43, 2116478076547172056
  %45 = sub i64 0, %43
  %46 = add i64 -2116478076547172056, %45
  %47 = sub i64 0, %46
  %48 = sext i32 %0 to i64
  %49 = or i64 %48, -8914088373736278211
  %50 = and i64 -8914088373736278211, %48
  %51 = xor i64 -8914088373736278211, %48
  %52 = or i64 %50, %51
  %53 = xor i64 -7010322165655699377, %44
  %54 = xor i64 %53, %47
  %55 = xor i64 %54, %52
  %56 = xor i64 %55, %49
  %57 = sext i32 %0 to i64
  %58 = or i64 %57, 8865509558997679533
  %59 = xor i64 %57, -1
  %60 = and i64 %59, -3727417584174495587
  %61 = and i64 %57, 3727417584174495586
  %62 = or i64 %60, %61
  %63 = xor i64 -5238512596916701904, %62
  %64 = xor i64 %57, -1
  %65 = or i64 -8865509558997679534, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = or i64 %63, %67
  %69 = sext i32 %0 to i64
  %70 = and i64 %69, -8873568495506992493
  %71 = xor i64 %69, -1
  %72 = xor i64 -8873568495506992493, %71
  %73 = and i64 %72, -8873568495506992493
  %74 = xor i64 %58, %73
  %75 = xor i64 %74, %68
  %76 = xor i64 %75, -4372632690049285557
  %77 = xor i64 %76, %70
  %78 = mul i64 %56, %77
  %79 = call i64 @h9549842938191327224(i64 %78)
  %80 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %79
  store i8* blockaddress(@main.extracted.14, %BogusBasicBlock), i8** %80, align 8
  %81 = call i64 @h9549842938191327224(i64 388314407)
  %82 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %81
  store i8* blockaddress(@main.extracted.14, %.exitStub1), i8** %82, align 8
  %83 = call i64 @h9549842938191327224(i64 388314413)
  %84 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %83
  store i8* blockaddress(@main.extracted.14, %EntryBasicBlockSplit), i8** %84, align 8
  %85 = call i64 @h9549842938191327224(i64 388314412)
  %86 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %85
  store i8* blockaddress(@main.extracted.14, %defaultSwitchBasicBlock), i8** %86, align 8
  %87 = call i64 @h9549842938191327224(i64 388314406)
  %88 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %87
  store i8* blockaddress(@main.extracted.14, %283), i8** %88, align 8
  %89 = call i64 @h9549842938191327224(i64 388314403)
  %90 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %89
  store i8* blockaddress(@main.extracted.14, %loopStart), i8** %90, align 8
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem2 = alloca i1, align 1
  %91 = sext i32 %0 to i64
  %92 = and i64 %91, -4690607846533299444
  %93 = or i64 4690607846533299443, %91
  %94 = sub i64 %93, 4690607846533299443
  %95 = sext i32 %0 to i64
  %96 = add i64 %95, 6168469575624373166
  %97 = xor i64 6168469575624373166, %95
  %98 = and i64 6168469575624373166, %95
  %99 = mul i64 2, %98
  %100 = add i64 %97, %99
  %101 = sext i32 %0 to i64
  %102 = and i64 %101, -7183755040749789031
  %103 = or i64 7183755040749789030, %101
  %104 = sub i64 %103, 7183755040749789030
  %105 = xor i64 %92, %96
  %106 = xor i64 %105, %104
  %107 = xor i64 %106, %100
  %108 = xor i64 %107, %102
  %109 = xor i64 %108, 8738047861581618797
  %110 = xor i64 %109, %94
  %111 = sext i32 %0 to i64
  %112 = add i64 %111, -422121149525523296
  %113 = add i64 6052251389847209322, %111
  %114 = add i64 %113, -6474372539372732618
  %115 = sext i32 %0 to i64
  %116 = and i64 %115, -5110749248942722025
  %117 = or i64 5110749248942722024, %115
  %118 = sub i64 %117, 5110749248942722024
  %119 = xor i64 %116, %112
  %120 = xor i64 %119, %118
  %121 = xor i64 %120, %114
  %122 = xor i64 %121, -8029399812001391771
  %123 = mul i64 %110, %122
  %124 = trunc i64 %123 to i32
  %.reg2mem = alloca i8**, i32 %124, align 8
  %125 = sext i32 %0 to i64
  %126 = and i64 %125, -2286017706797237709
  %127 = or i64 2286017706797237708, %125
  %128 = sub i64 %127, 2286017706797237708
  %129 = sext i32 %0 to i64
  %130 = add i64 %129, 7643422208416813498
  %131 = sub i64 0, %129
  %132 = add i64 -7643422208416813498, %131
  %133 = sub i64 0, %132
  %134 = xor i64 6779243774890905507, %130
  %135 = xor i64 %134, %133
  %136 = xor i64 %135, %128
  %137 = xor i64 %136, %126
  %138 = sext i32 %0 to i64
  %139 = or i64 %138, 8752625259504220519
  %140 = and i64 8752625259504220519, %138
  %141 = xor i64 8752625259504220519, %138
  %142 = or i64 %140, %141
  %143 = sext i32 %0 to i64
  %144 = add i64 %143, -7865439021708825193
  %145 = and i64 -7865439021708825193, %143
  %146 = or i64 -7865439021708825193, %143
  %147 = add i64 %145, %146
  %148 = sext i32 %0 to i64
  %149 = or i64 %148, -7843469427489302752
  %150 = xor i64 %148, -1
  %151 = and i64 %150, -3406504623186721197
  %152 = and i64 %148, 3406504623186721196
  %153 = or i64 %151, %152
  %154 = xor i64 4872837670778687859, %153
  %155 = xor i64 %148, -1
  %156 = or i64 7843469427489302751, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = xor i64 -7810374541133865973, %159
  %161 = xor i64 %160, %147
  %162 = xor i64 %161, %139
  %163 = xor i64 %162, %144
  %164 = xor i64 %163, %142
  %165 = xor i64 %164, %149
  %166 = mul i64 %137, %165
  %167 = trunc i64 %166 to i32
  %lookupTable = alloca [10 x i32], i32 %167, align 4
  %168 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %168, align 4
  %169 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %169, align 4
  %170 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %170, align 4
  %171 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %171, align 4
  %172 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %172, align 4
  %173 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %173, align 4
  %174 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %174, align 4
  %175 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %175, align 4
  %176 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %176, align 4
  %177 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %177, align 4
  %178 = alloca i64, align 8
  %179 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %180 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable15401568588136411344, i32 0, i64 %179
  store i8** %180, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314403, i32* %1, align 4
  %181 = call i8** @bf3611037731079723307(i32* %1)
  %182 = load i8*, i8** %181, align 8
  indirectbr i8* %182, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %283
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub1
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i32, i1)* @main.extracted.14.extracted to i8*), i8** %.reload, align 8
  %183 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %186 = load i32, i32* %185, align 4
  %187 = add i32 %184, %186
  store i32 %187, i32* %dispatcher, align 4
  %188 = load i8*, i8** %3, align 8
  %189 = load i8, i8* %188, align 1
  %190 = and i8 %189, 1
  %191 = sext i32 %dispatcher1 to i64
  %192 = add i64 %191, -8969963090959958476
  %193 = add i64 -1329052762202367344, %191
  %194 = sub i64 %193, 7640910328757591132
  %195 = or i64 %41, -3354497419700208967
  %196 = xor i64 %41, -1
  %197 = and i64 %196, -4962586182126771068
  %198 = and i64 %41, 4962586182126771067
  %199 = or i64 %197, %198
  %200 = xor i64 7661525079575993917, %199
  %201 = xor i64 %41, -1
  %202 = or i64 3354497419700208966, %201
  %203 = xor i64 %202, -1
  %204 = and i64 %203, -1
  %205 = or i64 %200, %204
  %206 = and i64 %81, -6360684561090370780
  %207 = xor i64 %81, -1
  %208 = xor i64 -6360684561090370780, %207
  %209 = and i64 %208, -6360684561090370780
  %210 = xor i64 4042025075611638057, %192
  %211 = xor i64 %210, %205
  %212 = xor i64 %211, %195
  %213 = xor i64 %212, %206
  %214 = xor i64 %213, %194
  %215 = xor i64 %214, %209
  %216 = and i64 %83, 4831987940276446653
  %217 = or i64 -4831987940276446654, %83
  %218 = sub i64 %217, -4831987940276446654
  %219 = or i64 %41, -3607373621105010319
  %220 = and i64 -3607373621105010319, %41
  %221 = xor i64 -3607373621105010319, %41
  %222 = or i64 %220, %221
  %223 = and i64 %83, -3323721324471050201
  %224 = or i64 3323721324471050200, %83
  %225 = sub i64 %224, 3323721324471050200
  %226 = xor i64 %216, 5853759251068883737
  %227 = xor i64 %226, %219
  %228 = xor i64 %227, %222
  %229 = xor i64 %228, %223
  %230 = xor i64 %229, %225
  %231 = xor i64 %230, %218
  %232 = mul i64 %215, %231
  %233 = trunc i64 %232 to i8
  %234 = icmp eq i8 %190, %233
  %235 = mul i8 %189, %189
  %236 = add i8 %235, %189
  %237 = srem i8 %236, 2
  %238 = and i64 %179, 2389172837587161492
  %239 = xor i64 %179, -1
  %240 = xor i64 2389172837587161492, %239
  %241 = and i64 %240, 2389172837587161492
  %242 = add i64 %39, -5450894457385854827
  %243 = and i64 -5450894457385854827, %39
  %244 = or i64 -5450894457385854827, %39
  %245 = add i64 %243, %244
  %246 = and i64 %179, 4950882484150507285
  %247 = or i64 -4950882484150507286, %179
  %248 = sub i64 %247, -4950882484150507286
  %249 = xor i64 %238, %242
  %250 = xor i64 %249, 7089863677189672955
  %251 = xor i64 %250, %246
  %252 = xor i64 %251, %245
  %253 = xor i64 %252, %241
  %254 = xor i64 %253, %248
  %255 = or i64 %79, 1830574539885915853
  %256 = xor i64 %79, -1
  %257 = and i64 %256, 7299431434564255145
  %258 = and i64 %79, -7299431434564255146
  %259 = or i64 %257, %258
  %260 = xor i64 8947328576034935652, %259
  %261 = xor i64 %79, -1
  %262 = or i64 -1830574539885915854, %261
  %263 = xor i64 %262, -1
  %264 = and i64 %263, -1
  %265 = or i64 %260, %264
  %266 = and i64 %2, 9213323727439430841
  %267 = xor i64 %2, -1
  %268 = or i64 -9213323727439430842, %267
  %269 = xor i64 %268, -1
  %270 = and i64 %269, -1
  %271 = xor i64 %266, %255
  %272 = xor i64 %271, %270
  %273 = xor i64 %272, 0
  %274 = xor i64 %273, %265
  %275 = mul i64 %254, %274
  %276 = trunc i64 %275 to i8
  %277 = icmp eq i8 %237, %276
  %278 = or i1 %234, %277
  %279 = select i1 %278, i32 388314400, i32 388314401
  %280 = xor i32 %279, 1
  store i32 %280, i32* %1, align 4
  %281 = call i8** @bf3611037731079723307(i32* %1)
  %282 = load i8*, i8** %281, align 8
  indirectbr i8* %282, [label %loopEnd, label %EntryBasicBlockSplit]

283:                                              ; preds = %283, %loopStart
  %284 = mul i32 %0, %0
  %285 = add i32 %284, %0
  %286 = mul i32 %285, 3
  %287 = srem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  store i1 %288, i1* %.reg2mem2, align 1
  %289 = mul i32 %0, %0
  store i32 %289, i32* %.reg2mem4, align 4
  %290 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %291 = load i32, i32* %290, align 4
  %292 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %293 = load i32, i32* %292, align 4
  %294 = add i32 %291, %293
  store i32 %294, i32* %dispatcher, align 4
  %295 = load i8*, i8** %84, align 8
  %296 = load i8, i8* %295, align 1
  %297 = mul i8 %296, 2
  %298 = and i64 %79, -8401394250508057228
  %299 = xor i64 %79, -1
  %300 = or i64 8401394250508057227, %299
  %301 = xor i64 %300, -1
  %302 = and i64 %301, -1
  %303 = and i64 %41, 837953334960482962
  %304 = xor i64 %41, -1
  %305 = or i64 -837953334960482963, %304
  %306 = xor i64 %305, -1
  %307 = and i64 %306, -1
  %308 = xor i64 %302, %298
  %309 = xor i64 %308, %303
  %310 = xor i64 %309, %307
  %311 = xor i64 %310, 7416399400628975661
  %312 = and i64 %81, -3855832693214251486
  %313 = xor i64 %81, -1
  %314 = or i64 3855832693214251485, %313
  %315 = xor i64 %314, -1
  %316 = and i64 %315, -1
  %317 = or i64 %87, -6640598370065732864
  %318 = xor i64 %87, -1
  %319 = and i64 -6640598370065732864, %318
  %320 = add i64 %319, %87
  %321 = and i64 %89, -2945752918092976413
  %322 = xor i64 %89, -1
  %323 = xor i64 -2945752918092976413, %322
  %324 = and i64 %323, -2945752918092976413
  %325 = xor i64 %312, %320
  %326 = xor i64 %325, %317
  %327 = xor i64 %326, %316
  %328 = xor i64 %327, %324
  %329 = xor i64 %328, %321
  %330 = xor i64 %329, -7874700339113873590
  %331 = mul i64 %311, %330
  %332 = trunc i64 %331 to i8
  %333 = mul i8 %296, %332
  %334 = add i8 2, %333
  %335 = mul i8 %297, %334
  %336 = srem i8 %335, 4
  %337 = icmp eq i8 %336, 0
  %338 = mul i8 %296, %296
  %339 = sext i32 %dispatcher1 to i64
  %340 = and i64 %339, -7697442842854508474
  %341 = xor i64 %339, -1
  %342 = or i64 7697442842854508473, %341
  %343 = xor i64 %342, -1
  %344 = and i64 %343, -1
  %345 = sext i32 %dispatcher1 to i64
  %346 = and i64 %345, 6355645504004237615
  %347 = or i64 -6355645504004237616, %345
  %348 = sub i64 %347, -6355645504004237616
  %349 = or i64 %87, -4246446093782309749
  %350 = and i64 -4246446093782309749, %87
  %351 = xor i64 -4246446093782309749, %87
  %352 = or i64 %350, %351
  %353 = xor i64 %349, %340
  %354 = xor i64 %353, %348
  %355 = xor i64 %354, 896976238921935505
  %356 = xor i64 %355, %346
  %357 = xor i64 %356, %344
  %358 = xor i64 %357, %352
  %359 = add i64 %89, 6044759963802210928
  %360 = sub i64 0, %89
  %361 = sub i64 6044759963802210928, %360
  %362 = or i64 %179, 837997719974669585
  %363 = xor i64 %179, -1
  %364 = and i64 837997719974669585, %363
  %365 = add i64 %364, %179
  %366 = xor i64 0, %359
  %367 = xor i64 %366, %365
  %368 = xor i64 %367, %361
  %369 = xor i64 %368, %362
  %370 = mul i64 %358, %369
  %371 = trunc i64 %370 to i8
  %372 = sub i8 %371, %296
  %373 = sub i8 %338, %372
  %374 = srem i8 %373, 2
  %375 = icmp eq i8 %374, 0
  %376 = or i1 %337, %375
  %377 = add i64 %79, 6962881741142418713
  %378 = and i64 6962881741142418713, %79
  %379 = or i64 6962881741142418713, %79
  %380 = add i64 %378, %379
  %381 = or i64 %2, -757422084363252197
  %382 = and i64 -757422084363252197, %2
  %383 = xor i64 -757422084363252197, %2
  %384 = or i64 %382, %383
  %385 = and i64 %179, 664482472141128936
  %386 = xor i64 %179, -1
  %387 = xor i64 664482472141128936, %386
  %388 = and i64 %387, 664482472141128936
  %389 = xor i64 %381, %380
  %390 = xor i64 %389, 5003236243555985779
  %391 = xor i64 %390, %377
  %392 = xor i64 %391, %385
  %393 = xor i64 %392, %388
  %394 = xor i64 %393, %384
  %395 = add i64 %81, -822939404820065229
  %396 = add i64 -6755361296522405926, %81
  %397 = sub i64 %396, -5932421891702340697
  %398 = and i64 %2, -5902092632684831458
  %399 = or i64 5902092632684831457, %2
  %400 = sub i64 %399, 5902092632684831457
  %401 = xor i64 -5590593360177414836, %400
  %402 = xor i64 %401, %398
  %403 = xor i64 %402, %395
  %404 = xor i64 %403, %397
  %405 = mul i64 %394, %404
  %406 = trunc i64 %405 to i32
  %407 = select i1 %376, i32 %406, i32 388314401
  %408 = add i64 %39, -9165780140299860854
  %409 = add i64 -2973989629420210194, %39
  %410 = sub i64 %409, 6191790510879650660
  %411 = add i64 %41, 1693097678815358811
  %412 = add i64 2589756267731697946, %41
  %413 = add i64 %412, -896658588916339135
  %414 = and i64 %39, 688398176846257564
  %415 = or i64 -688398176846257565, %39
  %416 = sub i64 %415, -688398176846257565
  %417 = xor i64 %414, %411
  %418 = xor i64 %417, 4023946840210057817
  %419 = xor i64 %418, %416
  %420 = xor i64 %419, %413
  %421 = xor i64 %420, %410
  %422 = xor i64 %421, %408
  %423 = add i64 %83, 8419526647661830816
  %424 = and i64 8419526647661830816, %83
  %425 = or i64 8419526647661830816, %83
  %426 = add i64 %424, %425
  %427 = sext i32 %dispatcher1 to i64
  %428 = add i64 %427, -294903834461467938
  %429 = sub i64 0, %427
  %430 = add i64 294903834461467938, %429
  %431 = sub i64 0, %430
  %432 = xor i64 %428, %423
  %433 = xor i64 %432, %431
  %434 = xor i64 %433, %426
  %435 = xor i64 %434, 2642439862351245
  %436 = mul i64 %422, %435
  %437 = trunc i64 %436 to i32
  %438 = xor i32 %407, %437
  store i32 %438, i32* %1, align 4
  %439 = call i8** @bf3611037731079723307(i32* %1)
  %440 = load i8*, i8** %439, align 8
  indirectbr i8* %440, [label %loopEnd, label %283]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %178, align 8
  %441 = call i8** @lk15299938733457504333(i64* %178)
  %442 = load i8*, i8** %441, align 8
  %443 = bitcast i8* %442 to i1 (i32, i32, i1)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %.reload5 = load i32, i32* %.reg2mem4, align 4
  %targetBlock = call i1 %443(i32 %.reload5, i32 %0, i1 %.reload3)
  %444 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %445 = load i32, i32* %444, align 4
  %446 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %447 = load i32, i32* %446, align 4
  %448 = sub i32 %445, %447
  %449 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %450 = load i32, i32* %449, align 4
  %451 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %452 = load i32, i32* %451, align 4
  %453 = add i32 %450, %452
  %454 = select i1 %targetBlock, i32 %448, i32 %453
  store i32 %454, i32* %dispatcher, align 4
  %455 = load i8*, i8** %40, align 8
  %456 = load i8, i8* %455, align 1
  %457 = mul i8 %456, 2
  %458 = mul i8 %456, 2
  %459 = add i8 -22, %458
  %460 = add i8 %459, 24
  %461 = mul i8 %457, %460
  %462 = srem i8 %461, 4
  %463 = icmp eq i8 %462, 0
  %464 = mul i8 %456, %456
  %465 = mul i8 %464, %456
  %466 = sub i8 0, %456
  %467 = sub i8 %465, %466
  %468 = srem i8 %467, 2
  %469 = icmp eq i8 %468, 0
  %470 = and i1 %463, %469
  %471 = select i1 %470, i32 388314405, i32 388314401
  %472 = xor i32 %471, 4
  store i32 %472, i32* %1, align 4
  %473 = call i8** @bf3611037731079723307(i32* %1)
  %474 = load i8*, i8** %473, align 8
  indirectbr i8* %474, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %475 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %475, align 4
  %476 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %476, align 4
  %477 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %477, align 4
  %478 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %478, align 4
  %479 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %479, align 4
  %480 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %481 = load i32, i32* %480, align 4
  store i32 %481, i32* %dispatcher, align 4
  %482 = load i8*, i8** %42, align 8
  %483 = load i8, i8* %482, align 1
  %484 = mul i8 %483, 2
  %485 = mul i8 %483, 2
  %486 = and i64 %85, -1186288965597926763
  %487 = xor i64 %85, -1
  %488 = or i64 1186288965597926762, %487
  %489 = xor i64 %488, -1
  %490 = and i64 %489, -1
  %491 = add i64 %81, 1508376458761702973
  %492 = sub i64 0, %81
  %493 = add i64 -1508376458761702973, %492
  %494 = sub i64 0, %493
  %495 = xor i64 %491, %494
  %496 = xor i64 %495, %486
  %497 = xor i64 %496, %490
  %498 = xor i64 %497, -212406389992809659
  %499 = add i64 %87, -4029301403441130367
  %500 = add i64 -8138436160177308656, %87
  %501 = sub i64 %500, -4109134756736178289
  %502 = or i64 %41, 5288619226775175790
  %503 = xor i64 %41, -1
  %504 = and i64 5288619226775175790, %503
  %505 = add i64 %504, %41
  %506 = and i64 %85, -6089883605675764103
  %507 = xor i64 %85, -1
  %508 = xor i64 -6089883605675764103, %507
  %509 = and i64 %508, -6089883605675764103
  %510 = xor i64 %499, %505
  %511 = xor i64 %510, %502
  %512 = xor i64 %511, -4385759942986072294
  %513 = xor i64 %512, %501
  %514 = xor i64 %513, %506
  %515 = xor i64 %514, %509
  %516 = mul i64 %498, %515
  %517 = trunc i64 %516 to i8
  %518 = add i8 %517, %485
  %519 = mul i8 %484, %518
  %520 = srem i8 %519, 4
  %521 = icmp eq i8 %520, 0
  %522 = mul i8 %483, %483
  %523 = mul i8 %522, %483
  %524 = add i8 %523, %483
  %525 = and i64 %39, -4482778161569837375
  %526 = or i64 4482778161569837374, %39
  %527 = sub i64 %526, 4482778161569837374
  %528 = add i64 %41, -3826403544752290743
  %529 = sub i64 0, %41
  %530 = add i64 3826403544752290743, %529
  %531 = sub i64 0, %530
  %532 = sext i32 %dispatcher1 to i64
  %533 = add i64 %532, 1798352373788529567
  %534 = add i64 -6594793950406328197, %532
  %535 = sub i64 %534, -8393146324194857764
  %536 = xor i64 %528, %525
  %537 = xor i64 %536, %527
  %538 = xor i64 %537, %533
  %539 = xor i64 %538, %531
  %540 = xor i64 %539, %535
  %541 = xor i64 %540, 1510079325941736803
  %542 = and i64 %39, -8271347168687675212
  %543 = or i64 8271347168687675211, %39
  %544 = sub i64 %543, 8271347168687675211
  %545 = add i64 %81, -7016655642458256059
  %546 = sub i64 0, %81
  %547 = sub i64 -7016655642458256059, %546
  %548 = or i64 %83, 3528931646921063243
  %549 = xor i64 %83, -1
  %550 = and i64 %549, 5850428927699341038
  %551 = and i64 %83, -5850428927699341039
  %552 = or i64 %550, %551
  %553 = xor i64 7046355223608915365, %552
  %554 = xor i64 %83, -1
  %555 = or i64 -3528931646921063244, %554
  %556 = xor i64 %555, -1
  %557 = and i64 %556, -1
  %558 = or i64 %553, %557
  %559 = xor i64 %547, %542
  %560 = xor i64 %559, 9152866627452078230
  %561 = xor i64 %560, %548
  %562 = xor i64 %561, %544
  %563 = xor i64 %562, %558
  %564 = xor i64 %563, %545
  %565 = mul i64 %541, %564
  %566 = trunc i64 %565 to i8
  %567 = srem i8 %524, %566
  %568 = sext i32 %0 to i64
  %569 = add i64 %568, -4192136672794557405
  %570 = and i64 -4192136672794557405, %568
  %571 = or i64 -4192136672794557405, %568
  %572 = add i64 %570, %571
  %573 = sext i32 %dispatcher1 to i64
  %574 = or i64 %573, 8198521461766302185
  %575 = xor i64 %573, -1
  %576 = and i64 8198521461766302185, %575
  %577 = add i64 %576, %573
  %578 = and i64 %87, 3997597769972956092
  %579 = xor i64 %87, -1
  %580 = or i64 -3997597769972956093, %579
  %581 = xor i64 %580, -1
  %582 = and i64 %581, -1
  %583 = xor i64 -2842377640836423413, %582
  %584 = xor i64 %583, %569
  %585 = xor i64 %584, %578
  %586 = xor i64 %585, %572
  %587 = xor i64 %586, %574
  %588 = xor i64 %587, %577
  %589 = add i64 %179, -4961620104972526699
  %590 = sub i64 0, %179
  %591 = sub i64 -4961620104972526699, %590
  %592 = or i64 %81, -165107695907088802
  %593 = and i64 -165107695907088802, %81
  %594 = xor i64 -165107695907088802, %81
  %595 = or i64 %593, %594
  %596 = xor i64 0, %592
  %597 = xor i64 %596, %591
  %598 = xor i64 %597, %595
  %599 = xor i64 %598, %589
  %600 = mul i64 %588, %599
  %601 = trunc i64 %600 to i8
  %602 = icmp eq i8 %567, %601
  %603 = and i1 %521, %602
  %604 = select i1 %603, i32 388314405, i32 388314413
  %605 = or i32 %604, 8
  %606 = and i32 %604, 8
  %607 = sub i32 %605, %606
  store i32 %607, i32* %1, align 4
  %608 = call i8** @bf3611037731079723307(i32* %1)
  %609 = load i8*, i8** %608, align 8
  indirectbr i8* %609, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %610 = load i8*, i8** %84, align 8
  %611 = load i8, i8* %610, align 1
  %612 = mul i8 %611, %611
  %613 = add i8 %612, 14
  %614 = add i8 %613, %611
  %615 = or i64 %81, 5872659841619424253
  %616 = xor i64 %81, -1
  %617 = and i64 5872659841619424253, %616
  %618 = add i64 %617, %81
  %619 = and i64 %85, -942828185052202509
  %620 = xor i64 %85, -1
  %621 = xor i64 -942828185052202509, %620
  %622 = and i64 %621, -942828185052202509
  %623 = xor i64 %619, %615
  %624 = xor i64 %623, 6381601894426909427
  %625 = xor i64 %624, %622
  %626 = xor i64 %625, %618
  %627 = sext i32 %dispatcher1 to i64
  %628 = or i64 %627, 563437270327807890
  %629 = xor i64 %627, -1
  %630 = and i64 %629, 4504966208087469990
  %631 = and i64 %627, -4504966208087469991
  %632 = or i64 %630, %631
  %633 = xor i64 4131315794483863604, %632
  %634 = xor i64 %627, -1
  %635 = or i64 -563437270327807891, %634
  %636 = xor i64 %635, -1
  %637 = and i64 %636, -1
  %638 = or i64 %633, %637
  %639 = and i64 %83, 1221370215454469175
  %640 = or i64 -1221370215454469176, %83
  %641 = sub i64 %640, -1221370215454469176
  %642 = xor i64 %628, %641
  %643 = xor i64 %642, 9216936739207825210
  %644 = xor i64 %643, %638
  %645 = xor i64 %644, %639
  %646 = mul i64 %626, %645
  %647 = trunc i64 %646 to i8
  %648 = sub i8 %614, %647
  %649 = mul i8 %648, 3
  %650 = sext i32 %dispatcher1 to i64
  %651 = add i64 %650, -6313715147701630312
  %652 = xor i64 -6313715147701630312, %650
  %653 = and i64 -6313715147701630312, %650
  %654 = mul i64 2, %653
  %655 = add i64 %652, %654
  %656 = or i64 %79, 8170640877784699913
  %657 = xor i64 %79, -1
  %658 = and i64 %657, -3963573822969195615
  %659 = and i64 %79, 3963573822969195614
  %660 = or i64 %658, %659
  %661 = xor i64 -5071761210017921112, %660
  %662 = xor i64 %79, -1
  %663 = or i64 -8170640877784699914, %662
  %664 = xor i64 %663, -1
  %665 = and i64 %664, -1
  %666 = or i64 %661, %665
  %667 = and i64 %2, 3319974472918220998
  %668 = xor i64 %2, -1
  %669 = or i64 -3319974472918220999, %668
  %670 = xor i64 %669, -1
  %671 = and i64 %670, -1
  %672 = xor i64 %671, %655
  %673 = xor i64 %672, %667
  %674 = xor i64 %673, 4838871330171631437
  %675 = xor i64 %674, %656
  %676 = xor i64 %675, %651
  %677 = xor i64 %676, %666
  %678 = add i64 %81, -3886720736118936894
  %679 = add i64 5094791784826830934, %81
  %680 = add i64 %679, -8981512520945767828
  %681 = or i64 %85, 1632373408441311781
  %682 = and i64 1632373408441311781, %85
  %683 = xor i64 1632373408441311781, %85
  %684 = or i64 %682, %683
  %685 = or i64 %179, -4699040907281402005
  %686 = xor i64 %179, -1
  %687 = and i64 %686, -2583016953201584606
  %688 = and i64 %179, 2583016953201584605
  %689 = or i64 %687, %688
  %690 = xor i64 7128882603984019785, %689
  %691 = xor i64 %179, -1
  %692 = or i64 4699040907281402004, %691
  %693 = xor i64 %692, -1
  %694 = and i64 %693, -1
  %695 = or i64 %690, %694
  %696 = xor i64 %681, %678
  %697 = xor i64 %696, %695
  %698 = xor i64 %697, %685
  %699 = xor i64 %698, %680
  %700 = xor i64 %699, 4474596489788699402
  %701 = xor i64 %700, %684
  %702 = mul i64 %677, %701
  %703 = trunc i64 %702 to i8
  %704 = srem i8 %649, %703
  %705 = icmp eq i8 %704, 0
  %706 = mul i8 %611, %611
  %707 = add i8 %706, %611
  %708 = srem i8 %707, 2
  %709 = icmp eq i8 %708, 0
  %710 = xor i1 %709, true
  %711 = xor i1 %705, %710
  %712 = and i1 %711, %705
  %713 = select i1 %712, i32 388314404, i32 388314401
  %714 = xor i32 %713, 5
  store i32 %714, i32* %1, align 4
  %715 = call i8** @bf3611037731079723307(i32* %1)
  %716 = load i8*, i8** %715, align 8
  indirectbr i8* %716, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %283, %EntryBasicBlockSplit
  %717 = load i8*, i8** %84, align 8
  %718 = load i8, i8* %717, align 1
  %719 = xor i8 %718, -1
  %720 = or i64 %2, -3963562504327245274
  %721 = and i64 -3963562504327245274, %2
  %722 = xor i64 -3963562504327245274, %2
  %723 = or i64 %721, %722
  %724 = and i64 %81, -4892673407968105901
  %725 = xor i64 %81, -1
  %726 = or i64 4892673407968105900, %725
  %727 = xor i64 %726, -1
  %728 = and i64 %727, -1
  %729 = xor i64 %723, %720
  %730 = xor i64 %729, %724
  %731 = xor i64 %730, %728
  %732 = xor i64 %731, -3474433464391608049
  %733 = sext i32 %dispatcher1 to i64
  %734 = add i64 %733, 6629312033801163485
  %735 = sub i64 0, %733
  %736 = sub i64 6629312033801163485, %735
  %737 = add i64 %89, -1711472769380773328
  %738 = sub i64 0, %89
  %739 = add i64 1711472769380773328, %738
  %740 = sub i64 0, %739
  %741 = sext i32 %0 to i64
  %742 = add i64 %741, -4181872429353475886
  %743 = add i64 5159421175284823537, %741
  %744 = add i64 %743, 9105450469071252193
  %745 = xor i64 %734, %742
  %746 = xor i64 %745, %736
  %747 = xor i64 %746, -2352634118763547153
  %748 = xor i64 %747, %737
  %749 = xor i64 %748, %740
  %750 = xor i64 %749, %744
  %751 = mul i64 %732, %750
  %752 = trunc i64 %751 to i8
  %753 = or i8 %719, %752
  %754 = xor i8 %718, -1
  %755 = sub i8 %753, %754
  %756 = icmp eq i8 %755, 1
  %757 = mul i8 %718, %718
  %758 = sub i8 %757, 40
  %759 = add i8 %758, %718
  %760 = add i8 %759, 40
  %761 = srem i8 %760, 2
  %762 = icmp eq i8 %761, 0
  %763 = or i1 %756, %762
  %764 = select i1 %763, i32 388314406, i32 388314403
  %765 = xor i32 %764, -1
  %766 = and i32 %765, 5
  %767 = and i32 %764, -6
  %768 = or i32 %766, %767
  store i32 %768, i32* %1, align 4
  %769 = call i8** @bf3611037731079723307(i32* %1)
  %770 = load i8*, i8** %769, align 8
  indirectbr i8* %770, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.15(i32 %0) #5 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314404)
  %3 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable16595383678855456002, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.15, %codeRepl), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314406)
  %5 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable16595383678855456002, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.15, %codeRepl32.exitStub), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314401)
  %7 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable16595383678855456002, i32 0, i64 %6
  store i8* blockaddress(@main.extracted.15, %"2"), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314405)
  %9 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable16595383678855456002, i32 0, i64 %8
  store i8* blockaddress(@main.extracted.15, %EntryBasicBlockSplit), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314407)
  %11 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable16595383678855456002, i32 0, i64 %10
  store i8* blockaddress(@main.extracted.15, %BogusBasciBlock), i8** %11, align 8
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %12 = sext i32 %0 to i64
  %13 = and i64 %12, 5672252779424322358
  %14 = xor i64 %12, -1
  %15 = or i64 -5672252779424322359, %14
  %16 = xor i64 %15, -1
  %17 = and i64 %16, -1
  %18 = sext i32 %0 to i64
  %19 = and i64 %18, -5250230892789105731
  %20 = or i64 5250230892789105730, %18
  %21 = sub i64 %20, 5250230892789105730
  %22 = xor i64 -2492248838095775131, %21
  %23 = xor i64 %22, %19
  %24 = xor i64 %23, %13
  %25 = xor i64 %24, %17
  %26 = sext i32 %0 to i64
  %27 = add i64 %26, 7129418175180970205
  %28 = and i64 7129418175180970205, %26
  %29 = or i64 7129418175180970205, %26
  %30 = add i64 %28, %29
  %31 = sext i32 %0 to i64
  %32 = and i64 %31, 5136254520746016364
  %33 = or i64 -5136254520746016365, %31
  %34 = sub i64 %33, -5136254520746016365
  %35 = sext i32 %0 to i64
  %36 = and i64 %35, 1138733103993393786
  %37 = xor i64 %35, -1
  %38 = xor i64 1138733103993393786, %37
  %39 = and i64 %38, 1138733103993393786
  %40 = xor i64 %32, %27
  %41 = xor i64 %40, %30
  %42 = xor i64 %41, %39
  %43 = xor i64 %42, %34
  %44 = xor i64 %43, %36
  %45 = xor i64 %44, -5668329690291878035
  %46 = mul i64 %25, %45
  %47 = trunc i64 %46 to i32
  %.reg2mem15 = alloca i32, i32 %47, align 4
  %.reg2mem13 = alloca i8**, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %48 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15, %BogusBasciBlock), i8** %48, align 8
  %49 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %49, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.15, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %50 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %50, i8*** %.reg2mem3, align 8
  %.reload6 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.15, %"2"), i8** %.reload6, align 8
  %51 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %51, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@main.extracted.15, %codeRepl), i8** %.reload9, align 8
  %52 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %52, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@main.extracted.15, %codeRepl32.exitStub), i8** %.reload12, align 8
  %53 = alloca i64, align 8
  %54 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %55 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7517529135013047173, i32 0, i64 %54
  store i8** %55, i8*** %.reg2mem13, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %56 = load i8*, i8** %.reload, align 8
  indirectbr i8* %56, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %codeRepl32.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %57 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15, %"2"), i8** %57, align 8
  %58 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.15, %EntryBasicBlockSplit), i8** %58, align 8
  %59 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.15, %codeRepl32.exitStub), i8** %59, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %60 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %60, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %codeRepl32.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  store i8* bitcast (i1 (i32, i32, i32, i32, i32)* @main.extracted.15.extracted to i8*), i8** %.reload14, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  %61 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %61, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %codeRepl32.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %62 = mul i32 60, 119
  store i32 %62, i32* %.reg2mem15, align 4
  %63 = sub i32 1473561311, 1473561226
  %64 = mul i32 52, 71
  %65 = and i64 %10, 212671364519285856
  %66 = or i64 -212671364519285857, %10
  %67 = sub i64 %66, -212671364519285857
  %68 = add i64 %6, -8153605158738869285
  %69 = xor i64 -8153605158738869285, %6
  %70 = and i64 -8153605158738869285, %6
  %71 = mul i64 2, %70
  %72 = add i64 %69, %71
  %73 = or i64 %2, -7273836749903939846
  %74 = and i64 -7273836749903939846, %2
  %75 = xor i64 -7273836749903939846, %2
  %76 = or i64 %74, %75
  %77 = xor i64 %68, %65
  %78 = xor i64 %77, %72
  %79 = xor i64 %78, %73
  %80 = xor i64 %79, %67
  %81 = xor i64 %80, %76
  %82 = xor i64 %81, 6512635764404537241
  %83 = and i64 %8, 2529899841513298614
  %84 = or i64 -2529899841513298615, %8
  %85 = sub i64 %84, -2529899841513298615
  %86 = and i64 %2, 2504979386187249510
  %87 = xor i64 %2, -1
  %88 = or i64 -2504979386187249511, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = add i64 %10, 4036888415165901282
  %92 = add i64 5130337258165607082, %10
  %93 = sub i64 %92, 1093448842999705800
  %94 = xor i64 -4594959397322821394, %90
  %95 = xor i64 %94, %91
  %96 = xor i64 %95, %86
  %97 = xor i64 %96, %85
  %98 = xor i64 %97, %83
  %99 = xor i64 %98, %93
  %100 = mul i64 %82, %99
  %101 = trunc i64 %100 to i32
  %102 = sdiv i32 119, %101
  %103 = mul i32 2, 9
  store i32 %103, i32* %.reg2mem17, align 4
  %104 = sext i32 %0 to i64
  %105 = or i64 %104, -7338601002712725024
  %106 = xor i64 %104, -1
  %107 = and i64 -7338601002712725024, %106
  %108 = add i64 %107, %104
  %109 = add i64 %6, -1708167855950410592
  %110 = and i64 -1708167855950410592, %6
  %111 = or i64 -1708167855950410592, %6
  %112 = add i64 %110, %111
  %113 = and i64 %4, -1891686143513489746
  %114 = or i64 1891686143513489745, %4
  %115 = sub i64 %114, 1891686143513489745
  %116 = xor i64 %113, 6382879034239780259
  %117 = xor i64 %116, %109
  %118 = xor i64 %117, %115
  %119 = xor i64 %118, %112
  %120 = xor i64 %119, %108
  %121 = xor i64 %120, %105
  %122 = and i64 %6, -2383619335746888716
  %123 = xor i64 %6, -1
  %124 = or i64 2383619335746888715, %123
  %125 = xor i64 %124, -1
  %126 = and i64 %125, -1
  %127 = and i64 %6, -3416903575394293864
  %128 = xor i64 %6, -1
  %129 = xor i64 -3416903575394293864, %128
  %130 = and i64 %129, -3416903575394293864
  %131 = and i64 %10, 6139618515194445393
  %132 = xor i64 %10, -1
  %133 = xor i64 6139618515194445393, %132
  %134 = and i64 %133, 6139618515194445393
  %135 = xor i64 %122, -2623707647139469038
  %136 = xor i64 %135, %134
  %137 = xor i64 %136, %130
  %138 = xor i64 %137, %126
  %139 = xor i64 %138, %131
  %140 = xor i64 %139, %127
  %141 = mul i64 %121, %140
  %142 = trunc i64 %141 to i32
  %143 = add i32 118, %142
  store i32 %143, i32* %.reg2mem19, align 4
  %144 = sub i32 63, 116
  store i32 %144, i32* %.reg2mem21, align 4
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %145 = load i8*, i8** %.reload8, align 8
  indirectbr i8* %145, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %codeRepl32.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %146 = or i64 %10, 8424541488193535800
  %147 = xor i64 %10, -1
  %148 = and i64 8424541488193535800, %147
  %149 = add i64 %148, %10
  %150 = or i64 %10, 6507723403189485885
  %151 = and i64 6507723403189485885, %10
  %152 = xor i64 6507723403189485885, %10
  %153 = or i64 %151, %152
  %154 = xor i64 %150, 1507824712905187611
  %155 = xor i64 %154, %149
  %156 = xor i64 %155, %153
  %157 = xor i64 %156, %146
  %158 = add i64 %8, 1390236854129878774
  %159 = add i64 -2446109038575213927, %8
  %160 = sub i64 %159, -3836345892705092701
  %161 = and i64 %8, -777749303162174925
  %162 = or i64 777749303162174924, %8
  %163 = sub i64 %162, 777749303162174924
  %164 = add i64 %54, 2622446522882370807
  %165 = add i64 -4453185836481986282, %54
  %166 = add i64 %165, 7075632359364357089
  %167 = xor i64 -1503517204387226174, %166
  %168 = xor i64 %167, %158
  %169 = xor i64 %168, %164
  %170 = xor i64 %169, %160
  %171 = xor i64 %170, %161
  %172 = xor i64 %171, %163
  %173 = mul i64 %157, %172
  store i64 %173, i64* %53, align 8
  %174 = call i8** @lk14929367933546861456(i64* %53)
  %175 = load i8*, i8** %174, align 8
  %176 = bitcast i8* %175 to i1 (i32, i32, i32, i32, i32)*
  %.reload16 = load i32, i32* %.reg2mem15, align 4
  %.reload18 = load i32, i32* %.reg2mem17, align 4
  %.reload20 = load i32, i32* %.reg2mem19, align 4
  %.reload22 = load i32, i32* %.reg2mem21, align 4
  %targetBlock = call i1 %176(i32 %.reload22, i32 %.reload16, i32 %.reload18, i32 %.reload20, i32 %0)
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %177 = select i1 %targetBlock, i8** %.reload11, i8** %.reload4
  %178 = load i8*, i8** %177, align 8
  indirectbr i8* %178, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %codeRepl32.exitStub]

codeRepl32.exitStub:                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.16(float* %0, float* %1, i8* %2, float* %3, i32* %.out) #5 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h9549842938191327224(i64 388314400)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.16, %loopEnd), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314402)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.16, %defaultSwitchBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314407)
  %10 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %9
  store i8* blockaddress(@main.extracted.16, %BogusBasicBlock), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314406)
  %12 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %11
  store i8* blockaddress(@main.extracted.16, %codeRepl32.exitStub), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314405)
  %14 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %13
  store i8* blockaddress(@main.extracted.16, %.loopexit.exitStub), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314404)
  %16 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %15
  store i8* blockaddress(@main.extracted.16, %EntryBasicBlockSplit), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314403)
  %18 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %17
  store i8* blockaddress(@main.extracted.16, %126), i8** %18, align 8
  %19 = call i64 @h9549842938191327224(i64 388314413)
  %20 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %19
  store i8* blockaddress(@main.extracted.16, %loopStart), i8** %20, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %27, align 4
  %28 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %28, align 4
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %29, align 4
  %30 = alloca i64, align 8
  %31 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %32 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable11921367710597738247, i32 0, i64 %31
  store i8* bitcast (void ()* @wait to i8*), i8** %32, align 8
  %33 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %34 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable11921367710597738247, i32 0, i64 %33
  store i8** %34, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314413, i32* %4, align 4
  %35 = call i8** @bf11893182969653303978(i32* %4)
  %36 = load i8*, i8** %35, align 8
  indirectbr i8* %36, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %126
    i32 2, label %codeRepl32.exitStub
    i32 3, label %.loopexit.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %.reload, align 8
  %37 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %40 = load i32, i32* %39, align 4
  %41 = srem i32 %38, %40
  store i32 %41, i32* %dispatcher, align 4
  %42 = load i8*, i8** %20, align 8
  %43 = load i8, i8* %42, align 1
  %44 = mul i8 %43, 2
  %45 = mul i8 %43, 2
  %46 = add i8 2, %45
  %47 = mul i8 %44, %46
  %48 = srem i8 %47, 4
  %49 = icmp eq i8 %48, 0
  %50 = mul i8 %43, %43
  %51 = add i8 %50, %43
  %52 = srem i8 %51, 2
  %53 = add i64 %33, -6495485146984244636
  %54 = sub i64 0, %33
  %55 = sub i64 -6495485146984244636, %54
  %56 = add i64 %15, 4356000807717209758
  %57 = and i64 4356000807717209758, %15
  %58 = or i64 4356000807717209758, %15
  %59 = add i64 %57, %58
  %60 = xor i64 %59, %53
  %61 = xor i64 %60, %56
  %62 = xor i64 %61, -2400856746425013729
  %63 = xor i64 %62, %55
  %64 = sext i32 %dispatcher1 to i64
  %65 = add i64 %64, 6240760174633576168
  %66 = sub i64 0, %64
  %67 = add i64 -6240760174633576168, %66
  %68 = sub i64 0, %67
  %69 = add i64 %33, 7770957789465542659
  %70 = sub i64 0, %33
  %71 = sub i64 7770957789465542659, %70
  %72 = and i64 %15, -714424502175285331
  %73 = xor i64 %15, -1
  %74 = or i64 714424502175285330, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = xor i64 %68, 0
  %78 = xor i64 %77, %69
  %79 = xor i64 %78, %76
  %80 = xor i64 %79, %72
  %81 = xor i64 %80, %65
  %82 = xor i64 %81, %71
  %83 = mul i64 %63, %82
  %84 = trunc i64 %83 to i8
  %85 = icmp eq i8 %52, %84
  %86 = and i1 %49, %85
  %87 = select i1 %86, i32 388314402, i32 388314400
  %88 = xor i32 %87, -1
  %89 = and i32 %88, -889659751
  %90 = add i64 %19, -8123350349575362840
  %91 = sub i64 0, %19
  %92 = sub i64 -8123350349575362840, %91
  %93 = sext i32 %dispatcher1 to i64
  %94 = and i64 %93, -3442867376463546300
  %95 = or i64 3442867376463546299, %93
  %96 = sub i64 %95, 3442867376463546299
  %97 = and i64 %19, -8239414780148590474
  %98 = or i64 8239414780148590473, %19
  %99 = sub i64 %98, 8239414780148590473
  %100 = xor i64 %90, %94
  %101 = xor i64 %100, %97
  %102 = xor i64 %101, %99
  %103 = xor i64 %102, %92
  %104 = xor i64 %103, %96
  %105 = xor i64 %104, -5934929133683382445
  %106 = sext i32 %dispatcher1 to i64
  %107 = or i64 %106, -1524113193823507390
  %108 = and i64 -1524113193823507390, %106
  %109 = xor i64 -1524113193823507390, %106
  %110 = or i64 %108, %109
  %111 = and i64 %5, -6333841399297792519
  %112 = xor i64 %5, -1
  %113 = xor i64 -6333841399297792519, %112
  %114 = and i64 %113, -6333841399297792519
  %115 = xor i64 -1059915553751315902, %107
  %116 = xor i64 %115, %110
  %117 = xor i64 %116, %111
  %118 = xor i64 %117, %114
  %119 = mul i64 %105, %118
  %120 = trunc i64 %119 to i32
  %121 = and i32 %87, %120
  %122 = or i32 %89, %121
  %123 = xor i32 %122, -889659749
  store i32 %123, i32* %4, align 4
  %124 = call i8** @bf11893182969653303978(i32* %4)
  %125 = load i8*, i8** %124, align 8
  indirectbr i8* %125, [label %loopEnd, label %EntryBasicBlockSplit]

126:                                              ; preds = %126, %loopStart
  store i64 5221456193252566391, i64* %30, align 8
  %127 = call i8** @lk2816797058128718436(i64* %30)
  %128 = load i8*, i8** %127, align 8
  %129 = bitcast i8* %128 to void ()*
  call void %129()
  store i64 5221456193252566390, i64* %30, align 8
  %130 = call i8** @lk2816797058128718436(i64* %30)
  %131 = load i8*, i8** %130, align 8
  %132 = bitcast i8* %131 to i32 (float*, float*, i8*, float*)*
  %133 = call i32 %132(float* %0, float* %1, i8* %2, float* %3)
  store i32 %133, i32* %.out, align 4
  %134 = icmp eq i32 %133, 0
  %135 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %136, %138
  %140 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %143 = load i32, i32* %142, align 4
  %144 = add i32 %141, %143
  %145 = select i1 %134, i32 %139, i32 %144
  store i32 %145, i32* %dispatcher, align 4
  %146 = load i8*, i8** %6, align 8
  %147 = load i8, i8* %146, align 1
  %148 = mul i8 %147, 2
  %149 = add i64 %17, 6380093955406629676
  %150 = sub i64 0, %17
  %151 = add i64 -6380093955406629676, %150
  %152 = sub i64 0, %151
  %153 = and i64 %19, -7111464260558530765
  %154 = xor i64 %19, -1
  %155 = xor i64 -7111464260558530765, %154
  %156 = and i64 %155, -7111464260558530765
  %157 = add i64 %17, -474697636338533105
  %158 = sub i64 0, %17
  %159 = sub i64 -474697636338533105, %158
  %160 = xor i64 %157, %159
  %161 = xor i64 %160, %153
  %162 = xor i64 %161, 2982489368324706999
  %163 = xor i64 %162, %149
  %164 = xor i64 %163, %156
  %165 = xor i64 %164, %152
  %166 = add i64 %7, 5038588745877789878
  %167 = add i64 -1156294061586515386, %7
  %168 = add i64 %167, 6194882807464305264
  %169 = and i64 %33, -6728483507146729382
  %170 = xor i64 %33, -1
  %171 = or i64 6728483507146729381, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = and i64 %11, 4356309278828327307
  %175 = xor i64 %11, -1
  %176 = or i64 -4356309278828327308, %175
  %177 = xor i64 %176, -1
  %178 = and i64 %177, -1
  %179 = xor i64 %166, %168
  %180 = xor i64 %179, %169
  %181 = xor i64 %180, %174
  %182 = xor i64 %181, 8879315275886351886
  %183 = xor i64 %182, %178
  %184 = xor i64 %183, %173
  %185 = mul i64 %165, %184
  %186 = trunc i64 %185 to i8
  %187 = mul i8 %147, %186
  %188 = add i8 2, %187
  %189 = mul i8 %148, %188
  %190 = srem i8 %189, 4
  %191 = icmp eq i8 %190, 0
  %192 = mul i8 %147, %147
  %193 = add i8 %192, %147
  %194 = srem i8 %193, 2
  %195 = or i64 %31, 95655540442122837
  %196 = and i64 95655540442122837, %31
  %197 = xor i64 95655540442122837, %31
  %198 = or i64 %196, %197
  %199 = and i64 %11, -4296761183407807950
  %200 = xor i64 %11, -1
  %201 = xor i64 -4296761183407807950, %200
  %202 = and i64 %201, -4296761183407807950
  %203 = xor i64 7311953247750165275, %195
  %204 = xor i64 %203, %202
  %205 = xor i64 %204, %198
  %206 = xor i64 %205, %199
  %207 = and i64 %15, 9076597215083601858
  %208 = or i64 -9076597215083601859, %15
  %209 = sub i64 %208, -9076597215083601859
  %210 = and i64 %19, 4328952681904345551
  %211 = xor i64 %19, -1
  %212 = or i64 -4328952681904345552, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = and i64 %9, -7627286407403178036
  %216 = or i64 7627286407403178035, %9
  %217 = sub i64 %216, 7627286407403178035
  %218 = xor i64 %217, %209
  %219 = xor i64 %218, 0
  %220 = xor i64 %219, %214
  %221 = xor i64 %220, %215
  %222 = xor i64 %221, %207
  %223 = xor i64 %222, %210
  %224 = mul i64 %206, %223
  %225 = trunc i64 %224 to i8
  %226 = icmp eq i8 %194, %225
  %227 = and i1 %191, %226
  %228 = select i1 %227, i32 388314400, i32 388314400
  %229 = and i64 %15, 2196700780434192613
  %230 = xor i64 %15, -1
  %231 = or i64 -2196700780434192614, %230
  %232 = xor i64 %231, -1
  %233 = and i64 %232, -1
  %234 = or i64 %11, 1990740705456004751
  %235 = and i64 1990740705456004751, %11
  %236 = xor i64 1990740705456004751, %11
  %237 = or i64 %235, %236
  %238 = sext i32 %dispatcher1 to i64
  %239 = or i64 %238, 7204933811845996834
  %240 = xor i64 %238, -1
  %241 = and i64 %240, -6004736062054442443
  %242 = and i64 %238, 6004736062054442442
  %243 = or i64 %241, %242
  %244 = xor i64 -3506063866221266153, %243
  %245 = xor i64 %238, -1
  %246 = or i64 -7204933811845996835, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = or i64 %244, %248
  %250 = xor i64 %237, %229
  %251 = xor i64 %250, %233
  %252 = xor i64 %251, -6242806634790092473
  %253 = xor i64 %252, %249
  %254 = xor i64 %253, %234
  %255 = xor i64 %254, %239
  %256 = and i64 %33, 7724527994391057912
  %257 = or i64 -7724527994391057913, %33
  %258 = sub i64 %257, -7724527994391057913
  %259 = and i64 %9, 8256014186453958506
  %260 = xor i64 %9, -1
  %261 = xor i64 8256014186453958506, %260
  %262 = and i64 %261, 8256014186453958506
  %263 = xor i64 %262, 0
  %264 = xor i64 %263, %258
  %265 = xor i64 %264, %256
  %266 = xor i64 %265, %259
  %267 = mul i64 %255, %266
  %268 = trunc i64 %267 to i32
  %269 = or i32 %228, %268
  %270 = and i32 %228, 0
  %271 = sub i32 %269, %270
  store i32 %271, i32* %4, align 4
  %272 = call i8** @bf11893182969653303978(i32* %4)
  %273 = load i8*, i8** %272, align 8
  indirectbr i8* %273, [label %loopEnd, label %126]

codeRepl32.exitStub:                              ; preds = %loopStart
  ret i1 true

.loopexit.exitStub:                               ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %274 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %274, align 4
  %275 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %276 = and i64 %17, -6698790456179734587
  %277 = xor i64 %17, -1
  %278 = or i64 6698790456179734586, %277
  %279 = xor i64 %278, -1
  %280 = and i64 %279, -1
  %281 = or i64 %5, 7414222761045946575
  %282 = xor i64 %5, -1
  %283 = and i64 7414222761045946575, %282
  %284 = add i64 %283, %5
  %285 = or i64 %11, 4005528517430882417
  %286 = xor i64 %11, -1
  %287 = and i64 4005528517430882417, %286
  %288 = add i64 %287, %11
  %289 = xor i64 %280, %284
  %290 = xor i64 %289, %285
  %291 = xor i64 %290, %281
  %292 = xor i64 %291, %288
  %293 = xor i64 %292, %276
  %294 = xor i64 %293, -3283196211290936639
  %295 = add i64 %9, 966462951754625377
  %296 = add i64 6435944186268844168, %9
  %297 = add i64 %296, -5469481234514218791
  %298 = or i64 %17, -4431316584267272690
  %299 = xor i64 %17, -1
  %300 = and i64 -4431316584267272690, %299
  %301 = add i64 %300, %17
  %302 = xor i64 %301, 4557122530076206401
  %303 = xor i64 %302, %297
  %304 = xor i64 %303, %295
  %305 = xor i64 %304, %298
  %306 = mul i64 %294, %305
  %307 = trunc i64 %306 to i32
  store i32 %307, i32* %275, align 4
  %308 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %308, align 4
  %309 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %309, align 4
  %310 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %310, align 4
  %311 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %312 = load i32, i32* %311, align 4
  store i32 %312, i32* %dispatcher, align 4
  %313 = load i8*, i8** %18, align 8
  %314 = load i8, i8* %313, align 1
  %315 = mul i8 %314, 2
  %316 = mul i8 %314, 2
  %317 = add i8 2, %316
  %318 = mul i8 %315, %317
  %319 = srem i8 %318, 4
  %320 = icmp eq i8 %319, 0
  %321 = mul i8 %314, %314
  %322 = mul i8 %321, %314
  %323 = xor i8 %322, %314
  %324 = and i8 %322, %314
  %325 = or i64 %7, -5055367804926844851
  %326 = xor i64 %7, -1
  %327 = and i64 -5055367804926844851, %326
  %328 = add i64 %327, %7
  %329 = or i64 %15, 2865385625737384368
  %330 = xor i64 %15, -1
  %331 = and i64 %330, 4210237473965206325
  %332 = and i64 %15, -4210237473965206326
  %333 = or i64 %331, %332
  %334 = xor i64 2138683876089641605, %333
  %335 = xor i64 %15, -1
  %336 = or i64 -2865385625737384369, %335
  %337 = xor i64 %336, -1
  %338 = and i64 %337, -1
  %339 = or i64 %334, %338
  %340 = xor i64 %325, %328
  %341 = xor i64 %340, 4975097253962097067
  %342 = xor i64 %341, %339
  %343 = xor i64 %342, %329
  %344 = sext i32 %dispatcher1 to i64
  %345 = or i64 %344, -399022244042715131
  %346 = xor i64 %344, -1
  %347 = and i64 -399022244042715131, %346
  %348 = add i64 %347, %344
  %349 = add i64 %19, -685740912987838658
  %350 = and i64 -685740912987838658, %19
  %351 = or i64 -685740912987838658, %19
  %352 = add i64 %350, %351
  %353 = add i64 %9, -1359735473402498346
  %354 = add i64 -5771925244123945869, %9
  %355 = sub i64 %354, -4412189770721447523
  %356 = xor i64 1895466363117281798, %352
  %357 = xor i64 %356, %355
  %358 = xor i64 %357, %353
  %359 = xor i64 %358, %345
  %360 = xor i64 %359, %349
  %361 = xor i64 %360, %348
  %362 = mul i64 %343, %361
  %363 = trunc i64 %362 to i8
  %364 = mul i8 %363, %324
  %365 = add i8 %323, %364
  %366 = srem i8 %365, 2
  %367 = icmp eq i8 %366, 0
  %368 = and i1 %320, %367
  %369 = select i1 %368, i32 388314406, i32 388314404
  %370 = xor i32 %369, -803325062
  %371 = xor i32 %370, -803325064
  store i32 %371, i32* %4, align 4
  %372 = call i8** @bf11893182969653303978(i32* %4)
  %373 = load i8*, i8** %372, align 8
  indirectbr i8* %373, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %374 = load i8*, i8** %12, align 8
  %375 = load i8, i8* %374, align 1
  %376 = xor i8 %375, -2
  %377 = and i8 %376, %375
  %378 = icmp eq i8 %377, 1
  %379 = mul i8 %375, %375
  %380 = and i64 %5, -6017694969418860740
  %381 = or i64 6017694969418860739, %5
  %382 = sub i64 %381, 6017694969418860739
  %383 = and i64 %17, -1781828860953465445
  %384 = xor i64 %17, -1
  %385 = or i64 1781828860953465444, %384
  %386 = xor i64 %385, -1
  %387 = and i64 %386, -1
  %388 = add i64 %17, -7067525682912605005
  %389 = xor i64 -7067525682912605005, %17
  %390 = and i64 -7067525682912605005, %17
  %391 = mul i64 2, %390
  %392 = add i64 %389, %391
  %393 = xor i64 6331262525465500931, %388
  %394 = xor i64 %393, %380
  %395 = xor i64 %394, %387
  %396 = xor i64 %395, %383
  %397 = xor i64 %396, %392
  %398 = xor i64 %397, %382
  %399 = or i64 %9, -271492215668534110
  %400 = xor i64 %9, -1
  %401 = and i64 -271492215668534110, %400
  %402 = add i64 %401, %9
  %403 = or i64 %13, -6936032943529564978
  %404 = xor i64 %13, -1
  %405 = and i64 %404, -1472108058699260161
  %406 = and i64 %13, 1472108058699260160
  %407 = or i64 %405, %406
  %408 = xor i64 8371144201009560113, %407
  %409 = xor i64 %13, -1
  %410 = or i64 6936032943529564977, %409
  %411 = xor i64 %410, -1
  %412 = and i64 %411, -1
  %413 = or i64 %408, %412
  %414 = xor i64 %399, 1584416011781048906
  %415 = xor i64 %414, %413
  %416 = xor i64 %415, %402
  %417 = xor i64 %416, %403
  %418 = mul i64 %398, %417
  %419 = trunc i64 %418 to i8
  %420 = add i8 %379, %419
  %421 = add i8 %420, %375
  %422 = sub i8 %421, -34
  %423 = srem i8 %422, 2
  %424 = icmp eq i8 %423, 0
  %425 = xor i1 %424, true
  %426 = and i1 %378, %425
  %427 = add i1 %426, %424
  %428 = select i1 %427, i32 388314402, i32 388314400
  %429 = xor i32 %428, 2
  store i32 %429, i32* %4, align 4
  %430 = call i8** @bf11893182969653303978(i32* %4)
  %431 = load i8*, i8** %430, align 8
  indirectbr i8* %431, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %126, %EntryBasicBlockSplit
  %432 = load i8*, i8** %10, align 8
  %433 = load i8, i8* %432, align 1
  %434 = mul i8 %433, %433
  %435 = and i8 %434, %433
  %436 = or i8 %434, %433
  %437 = add i8 %435, %436
  %438 = mul i8 %437, 3
  %439 = srem i8 %438, 2
  %440 = add i64 %17, 9119438476282665865
  %441 = add i64 -2068415904659970188, %17
  %442 = sub i64 %441, 7258889692766915563
  %443 = or i64 %31, -3705171821532114133
  %444 = xor i64 %31, -1
  %445 = and i64 -3705171821532114133, %444
  %446 = add i64 %445, %31
  %447 = or i64 %13, -3160399959788545906
  %448 = and i64 -3160399959788545906, %13
  %449 = xor i64 -3160399959788545906, %13
  %450 = or i64 %448, %449
  %451 = xor i64 %442, %447
  %452 = xor i64 %451, %440
  %453 = xor i64 %452, %443
  %454 = xor i64 %453, %446
  %455 = xor i64 %454, 732985896182591239
  %456 = xor i64 %455, %450
  %457 = add i64 %13, 301914682352508994
  %458 = sub i64 0, %13
  %459 = sub i64 301914682352508994, %458
  %460 = add i64 %13, -6243417232656447941
  %461 = add i64 5934753888316452574, %13
  %462 = add i64 %461, 6268572952736651101
  %463 = xor i64 %459, %462
  %464 = xor i64 %463, %460
  %465 = xor i64 %464, %457
  %466 = xor i64 %465, 0
  %467 = mul i64 %456, %466
  %468 = trunc i64 %467 to i8
  %469 = icmp eq i8 %439, %468
  %470 = mul i8 %433, %433
  %471 = add i8 %470, %433
  %472 = srem i8 %471, 2
  %473 = icmp eq i8 %472, 0
  %474 = and i1 %469, %473
  %475 = and i64 %17, 1263572870493138206
  %476 = xor i64 %17, -1
  %477 = or i64 -1263572870493138207, %476
  %478 = xor i64 %477, -1
  %479 = and i64 %478, -1
  %480 = or i64 %13, 5349179262303324710
  %481 = xor i64 %13, -1
  %482 = and i64 5349179262303324710, %481
  %483 = add i64 %482, %13
  %484 = or i64 %9, -1562718590421683278
  %485 = and i64 -1562718590421683278, %9
  %486 = xor i64 -1562718590421683278, %9
  %487 = or i64 %485, %486
  %488 = xor i64 %480, %475
  %489 = xor i64 %488, %483
  %490 = xor i64 %489, %479
  %491 = xor i64 %490, %487
  %492 = xor i64 %491, %484
  %493 = xor i64 %492, 3885256345268726839
  %494 = sext i32 %dispatcher1 to i64
  %495 = and i64 %494, 7075896344341826974
  %496 = xor i64 %494, -1
  %497 = or i64 -7075896344341826975, %496
  %498 = xor i64 %497, -1
  %499 = and i64 %498, -1
  %500 = add i64 %13, -2047159481645944163
  %501 = add i64 6561358885417793749, %13
  %502 = sub i64 %501, 8608518367063737912
  %503 = xor i64 %495, -2042841841374648687
  %504 = xor i64 %503, %499
  %505 = xor i64 %504, %500
  %506 = xor i64 %505, %502
  %507 = mul i64 %493, %506
  %508 = trunc i64 %507 to i32
  %509 = select i1 %474, i32 %508, i32 388314413
  %510 = xor i32 %509, -1
  %511 = and i32 %510, 1562031494
  %512 = and i32 %509, -1562031495
  %513 = or i32 %511, %512
  %514 = xor i32 %513, 1562031500
  store i32 %514, i32* %4, align 4
  %515 = call i8** @bf11893182969653303978(i32* %4)
  %516 = load i8*, i8** %515, align 8
  indirectbr i8* %516, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.10.extracted(i32 %0, i32 %1, i1* %.out) #5 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314442)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.10.extracted, %.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314467)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.10.extracted, %.exitStub1.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314380)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.10.extracted, %"2"), i8** %8, align 8
  %9 = sext i32 %0 to i64
  %10 = and i64 %9, -6347639677284880331
  %11 = or i64 6347639677284880330, %9
  %12 = sub i64 %11, 6347639677284880330
  %13 = sext i32 %0 to i64
  %14 = or i64 %13, 8616610766582037350
  %15 = xor i64 %13, -1
  %16 = and i64 %15, 4274463978757405621
  %17 = and i64 %13, -4274463978757405622
  %18 = or i64 %16, %17
  %19 = xor i64 5532016290365178067, %18
  %20 = xor i64 %13, -1
  %21 = or i64 -8616610766582037351, %20
  %22 = xor i64 %21, -1
  %23 = and i64 %22, -1
  %24 = or i64 %19, %23
  %25 = sext i32 %0 to i64
  %26 = or i64 %25, 1614282639846080000
  %27 = and i64 1614282639846080000, %25
  %28 = xor i64 1614282639846080000, %25
  %29 = or i64 %27, %28
  %30 = xor i64 1504370292158736045, %29
  %31 = xor i64 %30, %24
  %32 = xor i64 %31, %14
  %33 = xor i64 %32, %12
  %34 = xor i64 %33, %26
  %35 = xor i64 %34, %10
  %36 = sext i32 %0 to i64
  %37 = or i64 %36, 2391620498302938683
  %38 = xor i64 %36, -1
  %39 = and i64 %38, 8628967106560172622
  %40 = and i64 %36, -8628967106560172623
  %41 = or i64 %39, %40
  %42 = xor i64 6264649977447779445, %41
  %43 = xor i64 %36, -1
  %44 = or i64 -2391620498302938684, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = sext i32 %1 to i64
  %49 = add i64 %48, 365953047225511669
  %50 = and i64 365953047225511669, %48
  %51 = or i64 365953047225511669, %48
  %52 = add i64 %50, %51
  %53 = xor i64 %49, %52
  %54 = xor i64 %53, -4161799419868173011
  %55 = xor i64 %54, %37
  %56 = xor i64 %55, %47
  %57 = mul i64 %35, %56
  %58 = call i64 @h9549842938191327224(i64 %57)
  %59 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %58
  store i8* blockaddress(@main.extracted.10.extracted, %EntryBasicBlockSplit), i8** %59, align 8
  %60 = call i64 @h9549842938191327224(i64 388314405)
  %61 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %60
  store i8* blockaddress(@main.extracted.10.extracted, %BogusBasciBlock), i8** %61, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %62 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.10.extracted, %BogusBasciBlock), i8** %62, align 8
  %63 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %63, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.10.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %64 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %64, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.10.extracted, %"2"), i8** %.reload5, align 8
  %65 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %65, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.10.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %66 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %66, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.10.extracted, %.exitStub1.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %67 = load i8*, i8** %.reload, align 8
  indirectbr i8* %67, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %68 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.10.extracted, %BogusBasciBlock), i8** %68, align 8
  %69 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.10.extracted, %.exitStub1.exitStub), i8** %69, align 8
  %70 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.10.extracted, %"2"), i8** %70, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %71 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %71, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %72 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %72, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %73 = srem i32 %0, 4
  %74 = and i64 %58, -3015201375409821567
  %75 = xor i64 %58, -1
  %76 = or i64 3015201375409821566, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = sext i32 %0 to i64
  %80 = and i64 %79, 8629979288182895901
  %81 = xor i64 %79, -1
  %82 = xor i64 8629979288182895901, %81
  %83 = and i64 %82, 8629979288182895901
  %84 = add i64 %7, -4313207838481511426
  %85 = add i64 7829850804815827469, %7
  %86 = sub i64 %85, -6303685430412212721
  %87 = xor i64 %84, %83
  %88 = xor i64 %87, %74
  %89 = xor i64 %88, %78
  %90 = xor i64 %89, %80
  %91 = xor i64 %90, 3563917864910812987
  %92 = xor i64 %91, %86
  %93 = add i64 %7, 7652676563016255413
  %94 = add i64 -6078546391505906595, %7
  %95 = add i64 %94, -4715521119187389608
  %96 = add i64 %3, -8350738287493381589
  %97 = sub i64 0, %3
  %98 = sub i64 -8350738287493381589, %97
  %99 = and i64 %5, 4921561875156978485
  %100 = xor i64 %5, -1
  %101 = xor i64 4921561875156978485, %100
  %102 = and i64 %101, 4921561875156978485
  %103 = xor i64 %96, 0
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, %93
  %106 = xor i64 %105, %102
  %107 = xor i64 %106, %95
  %108 = xor i64 %107, %99
  %109 = mul i64 %92, %108
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %73, %110
  %112 = mul i32 %1, %1
  %113 = add i32 %112, %1
  %114 = srem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = or i1 %111, %115
  store i1 %116, i1* %.out, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %117 = select i1 %116, i8** %.reload7, i8** %.reload10
  %118 = load i8*, i8** %117, align 8
  indirectbr i8* %118, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %119 = sext i32 %0 to i64
  %120 = add i64 %119, 2062003359584481269
  %121 = add i64 255802159234841953, %119
  %122 = sub i64 %121, -1806201200349639316
  %123 = or i64 %60, -6769113260173852008
  %124 = and i64 -6769113260173852008, %60
  %125 = xor i64 -6769113260173852008, %60
  %126 = or i64 %124, %125
  %127 = sext i32 %1 to i64
  %128 = and i64 %127, 9011403405813772516
  %129 = xor i64 %127, -1
  %130 = or i64 -9011403405813772517, %129
  %131 = xor i64 %130, -1
  %132 = and i64 %131, -1
  %133 = xor i64 %123, %122
  %134 = xor i64 %133, %128
  %135 = xor i64 %134, %126
  %136 = xor i64 %135, %120
  %137 = xor i64 %136, %132
  %138 = xor i64 %137, -427678150694545629
  %139 = or i64 %60, 7679824772755461158
  %140 = xor i64 %60, -1
  %141 = and i64 7679824772755461158, %140
  %142 = add i64 %141, %60
  %143 = add i64 %7, -5012049829845973863
  %144 = add i64 3215687383803242027, %7
  %145 = sub i64 %144, 8227737213649215890
  %146 = sext i32 %0 to i64
  %147 = or i64 %146, -2509910943929640178
  %148 = and i64 -2509910943929640178, %146
  %149 = xor i64 -2509910943929640178, %146
  %150 = or i64 %148, %149
  %151 = xor i64 %150, %143
  %152 = xor i64 %151, %142
  %153 = xor i64 %152, %139
  %154 = xor i64 %153, %147
  %155 = xor i64 %154, %145
  %156 = xor i64 %155, 2454457690569838731
  %157 = mul i64 %138, %156
  %158 = trunc i64 %157 to i1
  ret i1 %158

.exitStub1.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.11.extracted() #5 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314450)
  %2 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %1
  store i8* blockaddress(@main.extracted.11.extracted, %.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314484)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.11.extracted, %"2"), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314421)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.11.extracted, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314399)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.11.extracted, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.11.extracted, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.11.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.11.extracted, %"2"), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.11.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.11.extracted, %.exitStub.exitStub), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.11.extracted, %EntryBasicBlockSplit), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %18 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.13.extracted(i32 %0, i32 %1, i1* %.out) #5 {
entry:
  %2 = alloca i32, align 4
  %3 = sext i32 %1 to i64
  %4 = or i64 %3, 7678131477932400409
  %5 = and i64 7678131477932400409, %3
  %6 = xor i64 7678131477932400409, %3
  %7 = or i64 %5, %6
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, -4263944546528426636
  %10 = or i64 4263944546528426635, %8
  %11 = sub i64 %10, 4263944546528426635
  %12 = sext i32 %0 to i64
  %13 = add i64 %12, -1025032960325591258
  %14 = and i64 -1025032960325591258, %12
  %15 = or i64 -1025032960325591258, %12
  %16 = add i64 %14, %15
  %17 = xor i64 %9, 3119223361198675747
  %18 = xor i64 %17, %7
  %19 = xor i64 %18, %16
  %20 = xor i64 %19, %4
  %21 = xor i64 %20, %11
  %22 = xor i64 %21, %13
  %23 = sext i32 %1 to i64
  %24 = and i64 %23, 8842633899891353739
  %25 = or i64 -8842633899891353740, %23
  %26 = sub i64 %25, -8842633899891353740
  %27 = sext i32 %1 to i64
  %28 = or i64 %27, -8563337900823832568
  %29 = xor i64 %27, -1
  %30 = and i64 -8563337900823832568, %29
  %31 = add i64 %30, %27
  %32 = sext i32 %1 to i64
  %33 = and i64 %32, -7297252412707213084
  %34 = xor i64 %32, -1
  %35 = or i64 7297252412707213083, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, -1
  %38 = xor i64 %24, %33
  %39 = xor i64 %38, %26
  %40 = xor i64 %39, %31
  %41 = xor i64 %40, %28
  %42 = xor i64 %41, %37
  %43 = xor i64 %42, 268070279852245412
  %44 = mul i64 %22, %43
  %45 = call i64 @h9549842938191327224(i64 %44)
  %46 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %45
  store i8* blockaddress(@main.extracted.13.extracted, %.exitStub1.exitStub), i8** %46, align 8
  %47 = sext i32 %0 to i64
  %48 = and i64 %47, 2381519801043036231
  %49 = xor i64 %47, -1
  %50 = or i64 -2381519801043036232, %49
  %51 = xor i64 %50, -1
  %52 = and i64 %51, -1
  %53 = sext i32 %0 to i64
  %54 = add i64 %53, -2068663325417172715
  %55 = xor i64 -2068663325417172715, %53
  %56 = and i64 -2068663325417172715, %53
  %57 = mul i64 2, %56
  %58 = add i64 %55, %57
  %59 = xor i64 -314956702720677097, %54
  %60 = xor i64 %59, %48
  %61 = xor i64 %60, %52
  %62 = xor i64 %61, %58
  %63 = sext i32 %1 to i64
  %64 = and i64 %63, -6014438935239003214
  %65 = or i64 6014438935239003213, %63
  %66 = sub i64 %65, 6014438935239003213
  %67 = sext i32 %1 to i64
  %68 = and i64 %67, 1545185896257991086
  %69 = xor i64 %67, -1
  %70 = or i64 -1545185896257991087, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = xor i64 %66, %72
  %74 = xor i64 %73, 2774877974659205417
  %75 = xor i64 %74, %64
  %76 = xor i64 %75, %68
  %77 = mul i64 %62, %76
  %78 = call i64 @h9549842938191327224(i64 %77)
  %79 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %78
  store i8* blockaddress(@main.extracted.13.extracted, %.exitStub.exitStub), i8** %79, align 8
  %80 = call i64 @h9549842938191327224(i64 388314426)
  %81 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %80
  store i8* blockaddress(@main.extracted.13.extracted, %"2"), i8** %81, align 8
  %82 = call i64 @h9549842938191327224(i64 388314468)
  %83 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %82
  store i8* blockaddress(@main.extracted.13.extracted, %EntryBasicBlockSplit), i8** %83, align 8
  %84 = call i64 @h9549842938191327224(i64 388314530)
  %85 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %84
  store i8* blockaddress(@main.extracted.13.extracted, %BogusBasciBlock), i8** %85, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %86 = sext i32 %0 to i64
  %87 = add i64 %86, -8424404411126281630
  %88 = sub i64 0, %86
  %89 = sub i64 -8424404411126281630, %88
  %90 = sext i32 %0 to i64
  %91 = and i64 %90, 1618757648714745419
  %92 = xor i64 %90, -1
  %93 = xor i64 1618757648714745419, %92
  %94 = and i64 %93, 1618757648714745419
  %95 = xor i64 %94, %91
  %96 = xor i64 %95, %89
  %97 = xor i64 %96, %87
  %98 = xor i64 %97, 3476855787916404605
  %99 = sext i32 %0 to i64
  %100 = or i64 %99, -6784739865341112548
  %101 = and i64 -6784739865341112548, %99
  %102 = xor i64 -6784739865341112548, %99
  %103 = or i64 %101, %102
  %104 = sext i32 %0 to i64
  %105 = or i64 %104, -2686777471223318614
  %106 = and i64 -2686777471223318614, %104
  %107 = xor i64 -2686777471223318614, %104
  %108 = or i64 %106, %107
  %109 = xor i64 %108, %105
  %110 = xor i64 %109, 6798778182695012821
  %111 = xor i64 %110, %100
  %112 = xor i64 %111, %103
  %113 = mul i64 %98, %112
  %114 = trunc i64 %113 to i32
  %.reg2mem3 = alloca i8**, i32 %114, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %115 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.13.extracted, %BogusBasciBlock), i8** %115, align 8
  %116 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %116, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.13.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %117 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %117, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.13.extracted, %"2"), i8** %.reload5, align 8
  %118 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %118, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.13.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %119 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %119, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.13.extracted, %.exitStub1.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %120 = load i8*, i8** %.reload, align 8
  indirectbr i8* %120, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %121 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.13.extracted, %"2"), i8** %121, align 8
  %122 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.13.extracted, %BogusBasciBlock), i8** %122, align 8
  %123 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.13.extracted, %EntryBasicBlockSplit), i8** %123, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %124 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %124, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %125 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %125, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %126 = srem i32 %0, 4
  %127 = icmp eq i32 %126, 0
  %128 = mul i32 %1, %1
  %129 = mul i32 %128, %1
  %130 = and i32 %129, %1
  %131 = or i32 %129, %1
  %132 = add i32 %130, %131
  %133 = srem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = xor i1 %127, true
  %136 = or i1 %135, %134
  %137 = xor i1 %127, true
  %138 = sub i1 %136, %137
  store i1 %138, i1* %.out, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %139 = select i1 %138, i8** %.reload7, i8** %.reload10
  %140 = load i8*, i8** %139, align 8
  indirectbr i8* %140, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.14.extracted(i32 %0, i32 %1, i1 %2) #5 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314402)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.14.extracted, %defaultSwitchBasicBlock), i8** %5, align 8
  %6 = sext i32 %1 to i64
  %7 = and i64 %6, -4728717585544767594
  %8 = xor i64 %6, -1
  %9 = or i64 4728717585544767593, %8
  %10 = xor i64 %9, -1
  %11 = and i64 %10, -1
  %12 = sext i32 %1 to i64
  %13 = and i64 %12, 9092501434016366897
  %14 = or i64 -9092501434016366898, %12
  %15 = sub i64 %14, -9092501434016366898
  %16 = sext i32 %0 to i64
  %17 = or i64 %16, -8935697460489698546
  %18 = xor i64 %16, -1
  %19 = and i64 -8935697460489698546, %18
  %20 = add i64 %19, %16
  %21 = xor i64 %11, %7
  %22 = xor i64 %21, %20
  %23 = xor i64 %22, %13
  %24 = xor i64 %23, -5553365124554141301
  %25 = xor i64 %24, %17
  %26 = xor i64 %25, %15
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, 1621817691366403032
  %29 = sub i64 0, %27
  %30 = add i64 -1621817691366403032, %29
  %31 = sub i64 0, %30
  %32 = sext i32 %1 to i64
  %33 = and i64 %32, -4028070133170414841
  %34 = xor i64 %32, -1
  %35 = xor i64 -4028070133170414841, %34
  %36 = and i64 %35, -4028070133170414841
  %37 = xor i64 %28, %33
  %38 = xor i64 %37, %36
  %39 = xor i64 %38, -5068053469352577067
  %40 = xor i64 %39, %31
  %41 = mul i64 %26, %40
  %42 = call i64 @h9549842938191327224(i64 %41)
  %43 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %42
  store i8* blockaddress(@main.extracted.14.extracted, %BogusBasicBlock), i8** %43, align 8
  %44 = call i64 @h9549842938191327224(i64 388314390)
  %45 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %44
  store i8* blockaddress(@main.extracted.14.extracted, %loopEnd), i8** %45, align 8
  %46 = call i64 @h9549842938191327224(i64 388314408)
  %47 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %46
  store i8* blockaddress(@main.extracted.14.extracted, %391), i8** %47, align 8
  %48 = call i64 @h9549842938191327224(i64 388314442)
  %49 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %48
  store i8* blockaddress(@main.extracted.14.extracted, %.exitStub1.exitStub), i8** %49, align 8
  %50 = call i64 @h9549842938191327224(i64 388314383)
  %51 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %50
  store i8* blockaddress(@main.extracted.14.extracted, %.exitStub.exitStub), i8** %51, align 8
  %52 = call i64 @h9549842938191327224(i64 388314410)
  %53 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %52
  store i8* blockaddress(@main.extracted.14.extracted, %EntryBasicBlockSplit), i8** %53, align 8
  %54 = call i64 @h9549842938191327224(i64 388314438)
  %55 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %54
  store i8* blockaddress(@main.extracted.14.extracted, %loopStart), i8** %55, align 8
  %lookupTable = alloca [9 x i32], align 4
  %56 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %56, align 4
  %57 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %57, align 4
  %58 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %58, align 4
  %59 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %60, align 4
  %61 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %61, align 4
  %62 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %62, align 4
  %63 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %63, align 4
  %64 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %64, align 4
  %dispatcher = alloca i32, align 4
  %65 = sext i32 %1 to i64
  %66 = or i64 %65, 9095857044090006376
  %67 = and i64 9095857044090006376, %65
  %68 = xor i64 9095857044090006376, %65
  %69 = or i64 %67, %68
  %70 = sext i32 %1 to i64
  %71 = or i64 %70, 2489662130358536768
  %72 = xor i64 %70, -1
  %73 = and i64 %72, -5921237037839878265
  %74 = and i64 %70, 5921237037839878264
  %75 = or i64 %73, %74
  %76 = xor i64 -8115903462297190969, %75
  %77 = xor i64 %70, -1
  %78 = or i64 -2489662130358536769, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = or i64 %76, %80
  %82 = sext i32 %1 to i64
  %83 = and i64 %82, 2856736761682735705
  %84 = xor i64 %82, -1
  %85 = or i64 -2856736761682735706, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %86, -1
  %88 = xor i64 2001100690661190585, %71
  %89 = xor i64 %88, %66
  %90 = xor i64 %89, %81
  %91 = xor i64 %90, %87
  %92 = xor i64 %91, %69
  %93 = xor i64 %92, %83
  %94 = sext i32 %1 to i64
  %95 = add i64 %94, 1563411144161665669
  %96 = sub i64 0, %94
  %97 = add i64 -1563411144161665669, %96
  %98 = sub i64 0, %97
  %99 = sext i32 %0 to i64
  %100 = add i64 %99, -4041211428745881652
  %101 = sub i64 0, %99
  %102 = sub i64 -4041211428745881652, %101
  %103 = sext i32 %1 to i64
  %104 = and i64 %103, -9018064692907678614
  %105 = xor i64 %103, -1
  %106 = or i64 9018064692907678613, %105
  %107 = xor i64 %106, -1
  %108 = and i64 %107, -1
  %109 = xor i64 %108, %104
  %110 = xor i64 %109, %95
  %111 = xor i64 %110, %100
  %112 = xor i64 %111, %98
  %113 = xor i64 %112, 0
  %114 = xor i64 %113, %102
  %115 = mul i64 %93, %114
  %116 = trunc i64 %115 to i32
  store i32 %116, i32* %dispatcher, align 4
  store i32 388314438, i32* %3, align 4
  %117 = call i8** @bf3325468485390379012(i32* %3)
  %118 = load i8*, i8** %117, align 8
  indirectbr i8* %118, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %391
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub1.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %119 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %122 = load i32, i32* %121, align 4
  %123 = srem i32 %120, %122
  store i32 %123, i32* %dispatcher, align 4
  %124 = load i8*, i8** %45, align 8
  %125 = load i8, i8* %124, align 1
  %126 = mul i8 %125, 2
  %127 = mul i8 %125, 2
  %128 = xor i8 2, %127
  %129 = add i64 %50, 700987918328905382
  %130 = xor i64 700987918328905382, %50
  %131 = and i64 700987918328905382, %50
  %132 = mul i64 2, %131
  %133 = add i64 %130, %132
  %134 = sext i32 %dispatcher1 to i64
  %135 = or i64 %134, 6591143113449450941
  %136 = xor i64 %134, -1
  %137 = and i64 %136, 333027049498944272
  %138 = and i64 %134, -333027049498944273
  %139 = or i64 %137, %138
  %140 = xor i64 6910588823492726445, %139
  %141 = xor i64 %134, -1
  %142 = or i64 -6591143113449450942, %141
  %143 = xor i64 %142, -1
  %144 = and i64 %143, -1
  %145 = or i64 %140, %144
  %146 = xor i64 %145, %133
  %147 = xor i64 %146, %135
  %148 = xor i64 %147, 1629635487311755441
  %149 = xor i64 %148, %129
  %150 = sext i32 %1 to i64
  %151 = add i64 %150, -7204793140032726767
  %152 = add i64 -2708098660855237778, %150
  %153 = add i64 %152, -4496694479177488989
  %154 = add i64 %4, 5032219885171012786
  %155 = add i64 3364708931619098281, %4
  %156 = sub i64 %155, -1667510953551914505
  %157 = or i64 %50, -3734793744207407170
  %158 = xor i64 %50, -1
  %159 = and i64 -3734793744207407170, %158
  %160 = add i64 %159, %50
  %161 = xor i64 -5310330033835237214, %157
  %162 = xor i64 %161, %151
  %163 = xor i64 %162, %160
  %164 = xor i64 %163, %153
  %165 = xor i64 %164, %154
  %166 = xor i64 %165, %156
  %167 = mul i64 %149, %166
  %168 = trunc i64 %167 to i8
  %169 = and i8 %168, %127
  %170 = mul i8 2, %169
  %171 = add i8 %128, %170
  %172 = add i64 %52, 6936875866952426544
  %173 = sub i64 0, %52
  %174 = sub i64 6936875866952426544, %173
  %175 = and i64 %54, -3500794240103970522
  %176 = or i64 3500794240103970521, %54
  %177 = sub i64 %176, 3500794240103970521
  %178 = xor i64 %177, %174
  %179 = xor i64 %178, 8994909367127735813
  %180 = xor i64 %179, %172
  %181 = xor i64 %180, %175
  %182 = sext i32 %1 to i64
  %183 = and i64 %182, -5724327872197438145
  %184 = xor i64 %182, -1
  %185 = xor i64 -5724327872197438145, %184
  %186 = and i64 %185, -5724327872197438145
  %187 = add i64 %4, 2998308017494376434
  %188 = sub i64 0, %4
  %189 = add i64 -2998308017494376434, %188
  %190 = sub i64 0, %189
  %191 = xor i64 -3661125047563636421, %187
  %192 = xor i64 %191, %190
  %193 = xor i64 %192, %186
  %194 = xor i64 %193, %183
  %195 = mul i64 %181, %194
  %196 = trunc i64 %195 to i8
  %197 = mul i8 %196, %171
  %198 = add i8 23, %197
  %199 = add i64 %52, 127666724899145652
  %200 = and i64 127666724899145652, %52
  %201 = or i64 127666724899145652, %52
  %202 = add i64 %200, %201
  %203 = and i64 %44, 503661340953615197
  %204 = xor i64 %44, -1
  %205 = xor i64 503661340953615197, %204
  %206 = and i64 %205, 503661340953615197
  %207 = and i64 %46, -922549027254298737
  %208 = xor i64 %46, -1
  %209 = or i64 922549027254298736, %208
  %210 = xor i64 %209, -1
  %211 = and i64 %210, -1
  %212 = xor i64 %203, %206
  %213 = xor i64 %212, %207
  %214 = xor i64 %213, %199
  %215 = xor i64 %214, %211
  %216 = xor i64 %215, %202
  %217 = xor i64 %216, 6531463076222211981
  %218 = and i64 %42, 4530283760566763098
  %219 = or i64 -4530283760566763099, %42
  %220 = sub i64 %219, -4530283760566763099
  %221 = and i64 %54, 3671122334191576923
  %222 = xor i64 %54, -1
  %223 = or i64 -3671122334191576924, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = xor i64 %225, %218
  %227 = xor i64 %226, %220
  %228 = xor i64 %227, %221
  %229 = xor i64 %228, -6115748637546320461
  %230 = mul i64 %217, %229
  %231 = trunc i64 %230 to i8
  %232 = mul i8 %231, %198
  %233 = or i64 %50, 7956028773089767255
  %234 = xor i64 %50, -1
  %235 = and i64 7956028773089767255, %234
  %236 = add i64 %235, %50
  %237 = add i64 %52, -4294695237702667028
  %238 = and i64 -4294695237702667028, %52
  %239 = or i64 -4294695237702667028, %52
  %240 = add i64 %238, %239
  %241 = xor i64 -782492300719967915, %233
  %242 = xor i64 %241, %236
  %243 = xor i64 %242, %237
  %244 = xor i64 %243, %240
  %245 = sext i32 %dispatcher1 to i64
  %246 = or i64 %245, 5856926963338847908
  %247 = and i64 5856926963338847908, %245
  %248 = xor i64 5856926963338847908, %245
  %249 = or i64 %247, %248
  %250 = add i64 %42, 2965374936994181199
  %251 = sub i64 0, %42
  %252 = add i64 -2965374936994181199, %251
  %253 = sub i64 0, %252
  %254 = add i64 %44, -3120958162387302136
  %255 = add i64 9103634442814984348, %44
  %256 = add i64 %255, 6222151468507265132
  %257 = xor i64 %249, %246
  %258 = xor i64 %257, %256
  %259 = xor i64 %258, %254
  %260 = xor i64 %259, %250
  %261 = xor i64 %260, %253
  %262 = xor i64 %261, 3148588336208083635
  %263 = mul i64 %244, %262
  %264 = trunc i64 %263 to i8
  %265 = add i8 %264, %232
  %266 = mul i8 %126, %265
  %267 = srem i8 %266, 4
  %268 = icmp eq i8 %267, 0
  %269 = mul i8 %125, %125
  %270 = add i8 %269, %125
  %271 = add i64 %50, 1829782859948622501
  %272 = add i64 6346655440692735498, %50
  %273 = add i64 %272, -4516872580744112997
  %274 = sext i32 %1 to i64
  %275 = and i64 %274, 3347367907126799838
  %276 = xor i64 %274, -1
  %277 = xor i64 3347367907126799838, %276
  %278 = and i64 %277, 3347367907126799838
  %279 = xor i64 %278, %271
  %280 = xor i64 %279, %275
  %281 = xor i64 %280, %273
  %282 = xor i64 %281, -1056637131430095259
  %283 = and i64 %4, 6376549984028747578
  %284 = xor i64 %4, -1
  %285 = xor i64 6376549984028747578, %284
  %286 = and i64 %285, 6376549984028747578
  %287 = or i64 %50, -2597824351720597899
  %288 = xor i64 %50, -1
  %289 = and i64 -2597824351720597899, %288
  %290 = add i64 %289, %50
  %291 = sext i32 %1 to i64
  %292 = and i64 %291, -5445646123544952700
  %293 = or i64 5445646123544952699, %291
  %294 = sub i64 %293, 5445646123544952699
  %295 = xor i64 %287, %292
  %296 = xor i64 %295, -7557341100563933478
  %297 = xor i64 %296, %286
  %298 = xor i64 %297, %283
  %299 = xor i64 %298, %290
  %300 = xor i64 %299, %294
  %301 = mul i64 %282, %300
  %302 = trunc i64 %301 to i8
  %303 = srem i8 %270, %302
  %304 = icmp eq i8 %303, 0
  %305 = xor i1 %268, true
  %306 = and i1 %305, true
  %307 = and i1 %268, false
  %308 = or i1 %306, %307
  %309 = or i64 %52, -32417575700145069
  %310 = and i64 -32417575700145069, %52
  %311 = xor i64 -32417575700145069, %52
  %312 = or i64 %310, %311
  %313 = and i64 %4, 2641217419052282373
  %314 = xor i64 %4, -1
  %315 = or i64 -2641217419052282374, %314
  %316 = xor i64 %315, -1
  %317 = and i64 %316, -1
  %318 = xor i64 %313, %312
  %319 = xor i64 %318, -6753318003515143149
  %320 = xor i64 %319, %317
  %321 = xor i64 %320, %309
  %322 = sext i32 %1 to i64
  %323 = or i64 %322, 5375685258892047049
  %324 = and i64 5375685258892047049, %322
  %325 = xor i64 5375685258892047049, %322
  %326 = or i64 %324, %325
  %327 = sext i32 %1 to i64
  %328 = add i64 %327, -7027166808606436367
  %329 = sub i64 0, %327
  %330 = sub i64 -7027166808606436367, %329
  %331 = sext i32 %0 to i64
  %332 = and i64 %331, 710827013104212179
  %333 = xor i64 %331, -1
  %334 = xor i64 710827013104212179, %333
  %335 = and i64 %334, 710827013104212179
  %336 = xor i64 %332, %330
  %337 = xor i64 %336, %323
  %338 = xor i64 %337, -2110204316603326949
  %339 = xor i64 %338, %326
  %340 = xor i64 %339, %328
  %341 = xor i64 %340, %335
  %342 = mul i64 %321, %341
  %343 = trunc i64 %342 to i1
  %344 = xor i1 %304, %343
  %345 = and i1 %344, true
  %346 = and i1 %304, false
  %347 = or i1 %345, %346
  %348 = xor i1 %308, %347
  %349 = xor i1 %268, true
  %350 = xor i1 %304, true
  %351 = or i1 %349, %350
  %352 = xor i1 %351, true
  %353 = and i64 %48, 904092408052686140
  %354 = xor i64 %48, -1
  %355 = or i64 -904092408052686141, %354
  %356 = xor i64 %355, -1
  %357 = and i64 %356, -1
  %358 = and i64 %46, 4849016409058416451
  %359 = xor i64 %46, -1
  %360 = xor i64 4849016409058416451, %359
  %361 = and i64 %360, 4849016409058416451
  %362 = xor i64 %353, %358
  %363 = xor i64 %362, %361
  %364 = xor i64 %363, %357
  %365 = xor i64 %364, -6512828253921300005
  %366 = add i64 %44, 5620376279713204514
  %367 = add i64 5350639199588378025, %44
  %368 = sub i64 %367, -269737080124826489
  %369 = or i64 %50, 8824766277282754031
  %370 = xor i64 %50, -1
  %371 = and i64 8824766277282754031, %370
  %372 = add i64 %371, %50
  %373 = and i64 %42, -515884760193127586
  %374 = xor i64 %42, -1
  %375 = xor i64 -515884760193127586, %374
  %376 = and i64 %375, -515884760193127586
  %377 = xor i64 %369, %372
  %378 = xor i64 %377, %368
  %379 = xor i64 %378, %373
  %380 = xor i64 %379, %366
  %381 = xor i64 %380, -4705397815458274733
  %382 = xor i64 %381, %376
  %383 = mul i64 %365, %382
  %384 = trunc i64 %383 to i1
  %385 = and i1 %352, %384
  %386 = or i1 %348, %385
  %387 = select i1 %386, i32 388314383, i32 388314390
  %388 = xor i32 %387, 25
  store i32 %388, i32* %3, align 4
  %389 = call i8** @bf3325468485390379012(i32* %3)
  %390 = load i8*, i8** %389, align 8
  indirectbr i8* %390, [label %loopEnd, label %EntryBasicBlockSplit]

391:                                              ; preds = %391, %loopStart
  %392 = sub i32 0, %0
  %393 = sub i32 0, %1
  %394 = add i32 %392, %393
  %395 = sub i32 0, %394
  %396 = srem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = and i1 %2, %397
  %399 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  %400 = load i32, i32* %399, align 4
  %401 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %402 = load i32, i32* %401, align 4
  %403 = sub i32 %400, %402
  %404 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %407 = load i32, i32* %406, align 4
  %408 = add i32 %405, %407
  %409 = select i1 %398, i32 %403, i32 %408
  store i32 %409, i32* %dispatcher, align 4
  %410 = load i8*, i8** %51, align 8
  %411 = load i8, i8* %410, align 1
  %412 = mul i8 %411, 2
  %413 = add i64 %44, 4528166166132862736
  %414 = and i64 4528166166132862736, %44
  %415 = or i64 4528166166132862736, %44
  %416 = add i64 %414, %415
  %417 = sext i32 %dispatcher1 to i64
  %418 = and i64 %417, 6729007307684948655
  %419 = xor i64 %417, -1
  %420 = xor i64 6729007307684948655, %419
  %421 = and i64 %420, 6729007307684948655
  %422 = xor i64 %413, -851985950062471599
  %423 = xor i64 %422, %416
  %424 = xor i64 %423, %418
  %425 = xor i64 %424, %421
  %426 = sext i32 %0 to i64
  %427 = or i64 %426, 5010448496996987354
  %428 = xor i64 %426, -1
  %429 = and i64 %428, -4427613676138764584
  %430 = and i64 %426, 4427613676138764583
  %431 = or i64 %429, %430
  %432 = xor i64 -8717486129647757566, %431
  %433 = xor i64 %426, -1
  %434 = or i64 -5010448496996987355, %433
  %435 = xor i64 %434, -1
  %436 = and i64 %435, -1
  %437 = or i64 %432, %436
  %438 = add i64 %42, -834250168806842621
  %439 = xor i64 -834250168806842621, %42
  %440 = and i64 -834250168806842621, %42
  %441 = mul i64 2, %440
  %442 = add i64 %439, %441
  %443 = add i64 %54, -5800930931417314868
  %444 = add i64 7636053094194106459, %54
  %445 = add i64 %444, 5009760048098130289
  %446 = xor i64 %438, %445
  %447 = xor i64 %446, %442
  %448 = xor i64 %447, %443
  %449 = xor i64 %448, %437
  %450 = xor i64 %449, %427
  %451 = xor i64 %450, -4449282681034513054
  %452 = mul i64 %425, %451
  %453 = trunc i64 %452 to i8
  %454 = mul i8 %411, %453
  %455 = add i8 2, %454
  %456 = mul i8 %412, %455
  %457 = srem i8 %456, 4
  %458 = icmp eq i8 %457, 0
  %459 = mul i8 %411, %411
  %460 = add i8 %459, %411
  %461 = srem i8 %460, 2
  %462 = icmp eq i8 %461, 0
  %463 = and i1 %458, %462
  %464 = or i64 %46, 8529489953254453384
  %465 = and i64 8529489953254453384, %46
  %466 = xor i64 8529489953254453384, %46
  %467 = or i64 %465, %466
  %468 = and i64 %50, 4698272754621231326
  %469 = xor i64 %50, -1
  %470 = or i64 -4698272754621231327, %469
  %471 = xor i64 %470, -1
  %472 = and i64 %471, -1
  %473 = sext i32 %1 to i64
  %474 = or i64 %473, 3943232899131155275
  %475 = and i64 3943232899131155275, %473
  %476 = xor i64 3943232899131155275, %473
  %477 = or i64 %475, %476
  %478 = xor i64 -8804275755687064533, %467
  %479 = xor i64 %478, %474
  %480 = xor i64 %479, %477
  %481 = xor i64 %480, %468
  %482 = xor i64 %481, %472
  %483 = xor i64 %482, %464
  %484 = add i64 %46, -2521547030834809328
  %485 = xor i64 -2521547030834809328, %46
  %486 = and i64 -2521547030834809328, %46
  %487 = mul i64 2, %486
  %488 = add i64 %485, %487
  %489 = or i64 %42, -1012921479034335290
  %490 = and i64 -1012921479034335290, %42
  %491 = xor i64 -1012921479034335290, %42
  %492 = or i64 %490, %491
  %493 = xor i64 %489, %492
  %494 = xor i64 %493, %484
  %495 = xor i64 %494, %488
  %496 = xor i64 %495, -7498370255071103422
  %497 = mul i64 %483, %496
  %498 = trunc i64 %497 to i32
  %499 = select i1 %463, i32 388314383, i32 %498
  %500 = sext i32 %0 to i64
  %501 = and i64 %500, -1499616620003230760
  %502 = xor i64 %500, -1
  %503 = xor i64 -1499616620003230760, %502
  %504 = and i64 %503, -1499616620003230760
  %505 = add i64 %54, 4559673616821372490
  %506 = sub i64 0, %54
  %507 = add i64 -4559673616821372490, %506
  %508 = sub i64 0, %507
  %509 = and i64 %52, 3915953684667816373
  %510 = or i64 -3915953684667816374, %52
  %511 = sub i64 %510, -3915953684667816374
  %512 = xor i64 %501, %504
  %513 = xor i64 %512, %505
  %514 = xor i64 %513, %509
  %515 = xor i64 %514, %511
  %516 = xor i64 %515, %508
  %517 = xor i64 %516, 3852827679179616653
  %518 = or i64 %42, -1446259165273886553
  %519 = xor i64 %42, -1
  %520 = and i64 -1446259165273886553, %519
  %521 = add i64 %520, %42
  %522 = or i64 %50, -8392201282694364082
  %523 = and i64 -8392201282694364082, %50
  %524 = xor i64 -8392201282694364082, %50
  %525 = or i64 %523, %524
  %526 = and i64 %54, -2076645630276949389
  %527 = or i64 2076645630276949388, %54
  %528 = sub i64 %527, 2076645630276949388
  %529 = xor i64 %528, %521
  %530 = xor i64 %529, %522
  %531 = xor i64 %530, %526
  %532 = xor i64 %531, -4280961162611406572
  %533 = xor i64 %532, %525
  %534 = xor i64 %533, %518
  %535 = mul i64 %517, %534
  %536 = trunc i64 %535 to i32
  %537 = xor i32 %499, %536
  %538 = xor i32 %537, -1204775907
  store i32 %538, i32* %3, align 4
  %539 = call i8** @bf3325468485390379012(i32* %3)
  %540 = load i8*, i8** %539, align 8
  indirectbr i8* %540, [label %loopEnd, label %391]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub1.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %541 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %542 = or i64 %42, 4744553109999493504
  %543 = and i64 4744553109999493504, %42
  %544 = xor i64 4744553109999493504, %42
  %545 = or i64 %543, %544
  %546 = add i64 %42, 8346602384943799424
  %547 = sub i64 0, %42
  %548 = add i64 -8346602384943799424, %547
  %549 = sub i64 0, %548
  %550 = sext i32 %1 to i64
  %551 = and i64 %550, 350754042639798727
  %552 = xor i64 %550, -1
  %553 = or i64 -350754042639798728, %552
  %554 = xor i64 %553, -1
  %555 = and i64 %554, -1
  %556 = xor i64 -8407977890993586311, %549
  %557 = xor i64 %556, %542
  %558 = xor i64 %557, %545
  %559 = xor i64 %558, %555
  %560 = xor i64 %559, %551
  %561 = xor i64 %560, %546
  %562 = or i64 %54, -9080704254027176718
  %563 = xor i64 %54, -1
  %564 = and i64 -9080704254027176718, %563
  %565 = add i64 %564, %54
  %566 = add i64 %52, -7165997425785353786
  %567 = add i64 2351497719143312675, %52
  %568 = add i64 %567, 8929248928780885155
  %569 = xor i64 %562, %565
  %570 = xor i64 %569, %568
  %571 = xor i64 %570, 7112686341378934071
  %572 = xor i64 %571, %566
  %573 = mul i64 %561, %572
  %574 = trunc i64 %573 to i32
  store i32 %574, i32* %541, align 4
  %575 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %576 = or i64 %46, 7621817343810910765
  %577 = xor i64 %46, -1
  %578 = and i64 7621817343810910765, %577
  %579 = add i64 %578, %46
  %580 = sext i32 %1 to i64
  %581 = add i64 %580, 6052213399635661958
  %582 = sub i64 0, %580
  %583 = sub i64 6052213399635661958, %582
  %584 = or i64 %42, -5119530553755751610
  %585 = xor i64 %42, -1
  %586 = and i64 %585, -7154686797093249446
  %587 = and i64 %42, 7154686797093249445
  %588 = or i64 %586, %587
  %589 = xor i64 2613974915509220636, %588
  %590 = xor i64 %42, -1
  %591 = or i64 5119530553755751609, %590
  %592 = xor i64 %591, -1
  %593 = and i64 %592, -1
  %594 = or i64 %589, %593
  %595 = xor i64 %581, %576
  %596 = xor i64 %595, %583
  %597 = xor i64 %596, %579
  %598 = xor i64 %597, %594
  %599 = xor i64 %598, %584
  %600 = xor i64 %599, -2532596864807360027
  %601 = and i64 %54, 2899836815805561550
  %602 = xor i64 %54, -1
  %603 = or i64 -2899836815805561551, %602
  %604 = xor i64 %603, -1
  %605 = and i64 %604, -1
  %606 = or i64 %54, -3011950786484774128
  %607 = xor i64 %54, -1
  %608 = and i64 -3011950786484774128, %607
  %609 = add i64 %608, %54
  %610 = xor i64 %606, %609
  %611 = xor i64 %610, %601
  %612 = xor i64 %611, -5254824120846816275
  %613 = xor i64 %612, %605
  %614 = mul i64 %600, %613
  %615 = trunc i64 %614 to i32
  store i32 %615, i32* %575, align 4
  %616 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %616, align 4
  %617 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %617, align 4
  %618 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %618, align 4
  %619 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %620 = load i32, i32* %619, align 4
  store i32 %620, i32* %dispatcher, align 4
  %621 = load i8*, i8** %5, align 8
  %622 = load i8, i8* %621, align 1
  %623 = or i64 %52, 3905660390287368201
  %624 = and i64 3905660390287368201, %52
  %625 = xor i64 3905660390287368201, %52
  %626 = or i64 %624, %625
  %627 = sext i32 %1 to i64
  %628 = add i64 %627, -3221751330641898343
  %629 = and i64 -3221751330641898343, %627
  %630 = or i64 -3221751330641898343, %627
  %631 = add i64 %629, %630
  %632 = add i64 %48, -1638659253322159472
  %633 = xor i64 -1638659253322159472, %48
  %634 = and i64 -1638659253322159472, %48
  %635 = mul i64 2, %634
  %636 = add i64 %633, %635
  %637 = xor i64 %628, %632
  %638 = xor i64 %637, 1468704431217178415
  %639 = xor i64 %638, %631
  %640 = xor i64 %639, %636
  %641 = xor i64 %640, %623
  %642 = xor i64 %641, %626
  %643 = or i64 %50, 4591663738230411706
  %644 = and i64 4591663738230411706, %50
  %645 = xor i64 4591663738230411706, %50
  %646 = or i64 %644, %645
  %647 = sext i32 %0 to i64
  %648 = and i64 %647, 4851632316253504607
  %649 = xor i64 %647, -1
  %650 = or i64 -4851632316253504608, %649
  %651 = xor i64 %650, -1
  %652 = and i64 %651, -1
  %653 = xor i64 %643, %652
  %654 = xor i64 %653, -9159021663270379618
  %655 = xor i64 %654, %646
  %656 = xor i64 %655, %648
  %657 = mul i64 %642, %656
  %658 = trunc i64 %657 to i8
  %659 = mul i8 %622, %658
  %660 = mul i8 %622, 2
  %661 = add i8 2, %660
  %662 = mul i8 %659, %661
  %663 = srem i8 %662, 4
  %664 = icmp eq i8 %663, 0
  %665 = mul i8 %622, %622
  %666 = add i8 %665, %622
  %667 = srem i8 %666, 2
  %668 = icmp eq i8 %667, 0
  %669 = and i1 %664, %668
  %670 = select i1 %669, i32 388314383, i32 388314410
  %671 = xor i32 %670, 37
  store i32 %671, i32* %3, align 4
  %672 = call i8** @bf3325468485390379012(i32* %3)
  %673 = load i8*, i8** %672, align 8
  indirectbr i8* %673, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %674 = load i8*, i8** %47, align 8
  %675 = load i8, i8* %674, align 1
  %676 = xor i8 %675, -2
  %677 = and i8 %676, %675
  %678 = icmp eq i8 %677, 1
  %679 = mul i8 %675, %675
  %680 = and i8 %679, %675
  %681 = or i8 %679, %675
  %682 = add i8 %680, %681
  %683 = srem i8 %682, 2
  %684 = icmp eq i8 %683, 0
  %685 = or i1 %678, %684
  %686 = select i1 %685, i32 388314390, i32 388314390
  %687 = xor i32 %686, 0
  store i32 %687, i32* %3, align 4
  %688 = call i8** @bf3325468485390379012(i32* %3)
  %689 = load i8*, i8** %688, align 8
  indirectbr i8* %689, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %391, %EntryBasicBlockSplit
  %690 = load i8*, i8** %47, align 8
  %691 = load i8, i8* %690, align 1
  %692 = xor i8 %691, -1
  %693 = or i8 %692, -2
  %694 = xor i8 %693, -1
  %695 = and i8 %694, -1
  %696 = icmp eq i8 %695, 0
  %697 = mul i8 %691, %691
  %698 = add i8 %697, %691
  %699 = mul i8 %698, 3
  %700 = srem i8 %699, 2
  %701 = icmp eq i8 %700, 0
  %702 = and i1 %696, %701
  %703 = xor i1 %696, %701
  %704 = or i1 %702, %703
  %705 = or i64 %42, -752992449496282826
  %706 = xor i64 %42, -1
  %707 = and i64 %706, -5075592333887982360
  %708 = and i64 %42, 5075592333887982359
  %709 = or i64 %707, %708
  %710 = xor i64 5477233609143238110, %709
  %711 = xor i64 %42, -1
  %712 = or i64 752992449496282825, %711
  %713 = xor i64 %712, -1
  %714 = and i64 %713, -1
  %715 = or i64 %710, %714
  %716 = sext i32 %0 to i64
  %717 = add i64 %716, 2420739311767382910
  %718 = sub i64 0, %716
  %719 = add i64 -2420739311767382910, %718
  %720 = sub i64 0, %719
  %721 = xor i64 -608345801604756903, %715
  %722 = xor i64 %721, %720
  %723 = xor i64 %722, %705
  %724 = xor i64 %723, %717
  %725 = and i64 %52, -5370557820341832955
  %726 = xor i64 %52, -1
  %727 = xor i64 -5370557820341832955, %726
  %728 = and i64 %727, -5370557820341832955
  %729 = and i64 %46, 8034620324007353372
  %730 = xor i64 %46, -1
  %731 = xor i64 8034620324007353372, %730
  %732 = and i64 %731, 8034620324007353372
  %733 = sext i32 %1 to i64
  %734 = and i64 %733, -2982210227881786594
  %735 = xor i64 %733, -1
  %736 = or i64 2982210227881786593, %735
  %737 = xor i64 %736, -1
  %738 = and i64 %737, -1
  %739 = xor i64 %729, %738
  %740 = xor i64 %739, -3355748329689907801
  %741 = xor i64 %740, %734
  %742 = xor i64 %741, %725
  %743 = xor i64 %742, %728
  %744 = xor i64 %743, %732
  %745 = mul i64 %724, %744
  %746 = trunc i64 %745 to i32
  %747 = select i1 %704, i32 %746, i32 388314438
  %748 = xor i32 %747, 73
  store i32 %748, i32* %3, align 4
  %749 = call i8** @bf3325468485390379012(i32* %3)
  %750 = load i8*, i8** %749, align 8
  indirectbr i8* %750, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.15.extracted(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) #5 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h9549842938191327224(i64 388314430)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@main.extracted.15.extracted, %codeRepl32.exitStub.exitStub), i8** %7, align 8
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, -2344189901634530714
  %10 = xor i64 %8, -1
  %11 = xor i64 -2344189901634530714, %10
  %12 = and i64 %11, -2344189901634530714
  %13 = sext i32 %4 to i64
  %14 = and i64 %13, -2531735170214729710
  %15 = or i64 2531735170214729709, %13
  %16 = sub i64 %15, 2531735170214729709
  %17 = sext i32 %4 to i64
  %18 = and i64 %17, -2594300635623082406
  %19 = xor i64 %17, -1
  %20 = xor i64 -2594300635623082406, %19
  %21 = and i64 %20, -2594300635623082406
  %22 = xor i64 %21, %12
  %23 = xor i64 %22, %9
  %24 = xor i64 %23, %18
  %25 = xor i64 %24, %16
  %26 = xor i64 %25, %14
  %27 = xor i64 %26, 6076007570444923681
  %28 = sext i32 %4 to i64
  %29 = and i64 %28, 4908557090873660435
  %30 = xor i64 %28, -1
  %31 = or i64 -4908557090873660436, %30
  %32 = xor i64 %31, -1
  %33 = and i64 %32, -1
  %34 = sext i32 %2 to i64
  %35 = and i64 %34, -3816301114563581919
  %36 = or i64 3816301114563581918, %34
  %37 = sub i64 %36, 3816301114563581918
  %38 = sext i32 %3 to i64
  %39 = add i64 %38, 4317982400369775334
  %40 = xor i64 4317982400369775334, %38
  %41 = and i64 4317982400369775334, %38
  %42 = mul i64 2, %41
  %43 = add i64 %40, %42
  %44 = xor i64 %43, 2721942357137340093
  %45 = xor i64 %44, %39
  %46 = xor i64 %45, %29
  %47 = xor i64 %46, %37
  %48 = xor i64 %47, %33
  %49 = xor i64 %48, %35
  %50 = mul i64 %27, %49
  %51 = call i64 @h9549842938191327224(i64 %50)
  %52 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %51
  store i8* blockaddress(@main.extracted.15.extracted, %EntryBasicBlockSplit), i8** %52, align 8
  %53 = call i64 @h9549842938191327224(i64 388314397)
  %54 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %53
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub), i8** %54, align 8
  %55 = call i64 @h9549842938191327224(i64 388314398)
  %56 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %55
  store i8* blockaddress(@main.extracted.15.extracted, %"2"), i8** %56, align 8
  %57 = sext i32 %2 to i64
  %58 = or i64 %57, -6272420500829104381
  %59 = xor i64 %57, -1
  %60 = and i64 -6272420500829104381, %59
  %61 = add i64 %60, %57
  %62 = sext i32 %1 to i64
  %63 = add i64 %62, -2398170856124232806
  %64 = sub i64 0, %62
  %65 = add i64 2398170856124232806, %64
  %66 = sub i64 0, %65
  %67 = sext i32 %3 to i64
  %68 = or i64 %67, 643482273897655170
  %69 = xor i64 %67, -1
  %70 = and i64 643482273897655170, %69
  %71 = add i64 %70, %67
  %72 = xor i64 %61, %71
  %73 = xor i64 %72, %68
  %74 = xor i64 %73, %66
  %75 = xor i64 %74, %58
  %76 = xor i64 %75, -8227856186839476397
  %77 = xor i64 %76, %63
  %78 = sext i32 %2 to i64
  %79 = or i64 %78, 2246328744549231285
  %80 = and i64 2246328744549231285, %78
  %81 = xor i64 2246328744549231285, %78
  %82 = or i64 %80, %81
  %83 = sext i32 %4 to i64
  %84 = add i64 %83, -6239066058089257126
  %85 = xor i64 -6239066058089257126, %83
  %86 = and i64 -6239066058089257126, %83
  %87 = mul i64 2, %86
  %88 = add i64 %85, %87
  %89 = sext i32 %2 to i64
  %90 = and i64 %89, 440086414371093412
  %91 = xor i64 %89, -1
  %92 = or i64 -440086414371093413, %91
  %93 = xor i64 %92, -1
  %94 = and i64 %93, -1
  %95 = xor i64 352313341798550076, %84
  %96 = xor i64 %95, %90
  %97 = xor i64 %96, %79
  %98 = xor i64 %97, %94
  %99 = xor i64 %98, %88
  %100 = xor i64 %99, %82
  %101 = mul i64 %77, %100
  %102 = call i64 @h9549842938191327224(i64 %101)
  %103 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %102
  store i8* blockaddress(@main.extracted.15.extracted, %BogusBasciBlock), i8** %103, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %104 = sext i32 %0 to i64
  %105 = add i64 %104, 2140510357371140280
  %106 = sub i64 0, %104
  %107 = sub i64 2140510357371140280, %106
  %108 = sext i32 %4 to i64
  %109 = and i64 %108, -2235172189899353798
  %110 = xor i64 %108, -1
  %111 = or i64 2235172189899353797, %110
  %112 = xor i64 %111, -1
  %113 = and i64 %112, -1
  %114 = sext i32 %2 to i64
  %115 = or i64 %114, -8835326567037851581
  %116 = xor i64 %114, -1
  %117 = and i64 %116, 4286911373603069425
  %118 = and i64 %114, -4286911373603069426
  %119 = or i64 %117, %118
  %120 = xor i64 -4747719371272325710, %119
  %121 = xor i64 %114, -1
  %122 = or i64 8835326567037851580, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = or i64 %120, %124
  %126 = xor i64 %107, %109
  %127 = xor i64 %126, %113
  %128 = xor i64 %127, %125
  %129 = xor i64 %128, 2681197482487522577
  %130 = xor i64 %129, %115
  %131 = xor i64 %130, %105
  %132 = sext i32 %3 to i64
  %133 = add i64 %132, 2735207750913921064
  %134 = add i64 7750677719414575329, %132
  %135 = sub i64 %134, 5015469968500654265
  %136 = sext i32 %1 to i64
  %137 = add i64 %136, 9001893574396454766
  %138 = xor i64 9001893574396454766, %136
  %139 = and i64 9001893574396454766, %136
  %140 = mul i64 2, %139
  %141 = add i64 %138, %140
  %142 = xor i64 -1046837505988989967, %137
  %143 = xor i64 %142, %133
  %144 = xor i64 %143, %141
  %145 = xor i64 %144, %135
  %146 = mul i64 %131, %145
  %147 = trunc i64 %146 to i32
  %.reg2mem3 = alloca i8**, i32 %147, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %148 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15.extracted, %BogusBasciBlock), i8** %148, align 8
  %149 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %149, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %150 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %150, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %"2"), i8** %.reload5, align 8
  %151 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %151, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %codeRepl32.exitStub.exitStub), i8** %.reload8, align 8
  %152 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %152, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %153 = load i8*, i8** %.reload, align 8
  indirectbr i8* %153, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl32.exitStub.exitStub, label %.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %154 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15.extracted, %BogusBasciBlock), i8** %154, align 8
  %155 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.15.extracted, %EntryBasicBlockSplit), i8** %155, align 8
  %156 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub), i8** %156, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %157 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %157, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl32.exitStub.exitStub, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %158 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %158, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl32.exitStub.exitStub, label %.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %159 = sdiv i32 95, 112
  %160 = sdiv i32 %0, 78
  %161 = sext i32 %0 to i64
  %162 = and i64 %161, 6909082677050521189
  %163 = xor i64 %161, -1
  %164 = xor i64 6909082677050521189, %163
  %165 = and i64 %164, 6909082677050521189
  %166 = sext i32 %2 to i64
  %167 = or i64 %166, -3397486395308915813
  %168 = xor i64 %166, -1
  %169 = and i64 -3397486395308915813, %168
  %170 = add i64 %169, %166
  %171 = xor i64 -8421907678825957779, %165
  %172 = xor i64 %171, %167
  %173 = xor i64 %172, %170
  %174 = xor i64 %173, %162
  %175 = or i64 %55, -484388384528912497
  %176 = xor i64 %55, -1
  %177 = and i64 %176, -5657233002107114270
  %178 = and i64 %55, 5657233002107114269
  %179 = or i64 %177, %178
  %180 = xor i64 5204582109332489069, %179
  %181 = xor i64 %55, -1
  %182 = or i64 484388384528912496, %181
  %183 = xor i64 %182, -1
  %184 = and i64 %183, -1
  %185 = or i64 %180, %184
  %186 = sext i32 %0 to i64
  %187 = or i64 %186, 6677364431742282367
  %188 = and i64 6677364431742282367, %186
  %189 = xor i64 6677364431742282367, %186
  %190 = or i64 %188, %189
  %191 = xor i64 %185, %187
  %192 = xor i64 %191, %175
  %193 = xor i64 %192, %190
  %194 = xor i64 %193, 8138700256894396858
  %195 = mul i64 %174, %194
  %196 = trunc i64 %195 to i32
  %197 = sdiv i32 %1, %196
  %198 = mul i32 %159, 106
  %199 = mul i32 %2, 46
  %200 = mul i32 %3, 70
  %201 = add i32 %0, -724381646
  %202 = sub i32 %201, 126
  %203 = sub i32 %202, -724381646
  %204 = add i32 0, %160
  %205 = xor i32 %204, %197
  %206 = and i32 %204, %197
  %207 = mul i32 2, %206
  %208 = add i32 %205, %207
  %209 = add i32 %208, %198
  %210 = add i32 %209, %199
  %211 = xor i32 %210, %200
  %212 = and i32 %210, %200
  %213 = mul i32 2, %212
  %214 = add i32 %211, %213
  %215 = add i32 %214, %203
  %216 = and i32 %215, 1
  %217 = icmp eq i32 %216, 0
  %218 = mul i32 %215, %215
  %219 = add i32 %218, %215
  %220 = mul i32 %219, 3
  %221 = srem i32 %220, 2
  %222 = sext i32 %2 to i64
  %223 = add i64 %222, 1938575907705330872
  %224 = add i64 -8040155759727896160, %222
  %225 = add i64 %224, -8468012406276324584
  %226 = or i64 %53, 7010931180222321112
  %227 = xor i64 %53, -1
  %228 = and i64 %227, 6073781881644460438
  %229 = and i64 %53, -6073781881644460439
  %230 = or i64 %228, %229
  %231 = xor i64 3819541438778292302, %230
  %232 = xor i64 %53, -1
  %233 = or i64 -7010931180222321113, %232
  %234 = xor i64 %233, -1
  %235 = and i64 %234, -1
  %236 = or i64 %231, %235
  %237 = xor i64 %226, %225
  %238 = xor i64 %237, %223
  %239 = xor i64 %238, -3052128446907377181
  %240 = xor i64 %239, %236
  %241 = and i64 %102, 776761289165784114
  %242 = or i64 -776761289165784115, %102
  %243 = sub i64 %242, -776761289165784115
  %244 = or i64 %6, 597827507629514451
  %245 = xor i64 %6, -1
  %246 = and i64 %245, 3932671079393973748
  %247 = and i64 %6, -3932671079393973749
  %248 = or i64 %246, %247
  %249 = xor i64 4528456775636880167, %248
  %250 = xor i64 %6, -1
  %251 = or i64 -597827507629514452, %250
  %252 = xor i64 %251, -1
  %253 = and i64 %252, -1
  %254 = or i64 %249, %253
  %255 = xor i64 %244, 0
  %256 = xor i64 %255, %243
  %257 = xor i64 %256, %254
  %258 = xor i64 %257, %241
  %259 = mul i64 %240, %258
  %260 = trunc i64 %259 to i32
  %261 = icmp eq i32 %221, %260
  %262 = or i1 %217, %261
  %263 = and i32 %4, 1
  %264 = icmp eq i32 %263, 1
  %265 = mul i32 %4, %4
  %266 = add i32 %265, %4
  %267 = srem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = xor i1 %268, true
  %270 = xor i1 %269, false
  %271 = xor i1 %270, true
  %272 = xor i1 %264, %271
  %273 = and i1 %272, %264
  %274 = add i1 %273, %268
  %275 = or i1 %262, true
  %276 = and i1 %262, true
  %277 = sub i1 %275, %276
  %278 = or i1 %277, %274
  %279 = xor i1 %262, true
  %280 = sub i1 false, %279
  %281 = add i1 %278, %280
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %282 = select i1 %281, i8** %.reload7, i8** %.reload10
  %283 = load i8*, i8** %282, align 8
  indirectbr i8* %283, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl32.exitStub.exitStub, label %.exitStub]

codeRepl32.exitStub.exitStub:                     ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %284 = sext i32 %3 to i64
  %285 = add i64 %284, 5439505415860639938
  %286 = add i64 4641893662390670149, %284
  %287 = sub i64 %286, -797611753469969789
  %288 = sext i32 %3 to i64
  %289 = or i64 %288, -7396350813236996012
  %290 = xor i64 %288, -1
  %291 = and i64 -7396350813236996012, %290
  %292 = add i64 %291, %288
  %293 = sext i32 %1 to i64
  %294 = add i64 %293, 8051407585212264793
  %295 = sub i64 0, %293
  %296 = sub i64 8051407585212264793, %295
  %297 = xor i64 %292, %296
  %298 = xor i64 %297, -5464450979903825283
  %299 = xor i64 %298, %294
  %300 = xor i64 %299, %285
  %301 = xor i64 %300, %289
  %302 = xor i64 %301, %287
  %303 = and i64 %51, -8873840041404692951
  %304 = or i64 8873840041404692950, %51
  %305 = sub i64 %304, 8873840041404692950
  %306 = sext i32 %2 to i64
  %307 = add i64 %306, 4467954041152778728
  %308 = sub i64 0, %306
  %309 = add i64 -4467954041152778728, %308
  %310 = sub i64 0, %309
  %311 = sext i32 %3 to i64
  %312 = add i64 %311, -5692374568818922338
  %313 = sub i64 0, %311
  %314 = sub i64 -5692374568818922338, %313
  %315 = xor i64 %310, %303
  %316 = xor i64 %315, %314
  %317 = xor i64 %316, %305
  %318 = xor i64 %317, 435874195842379477
  %319 = xor i64 %318, %307
  %320 = xor i64 %319, %312
  %321 = mul i64 %302, %320
  %322 = trunc i64 %321 to i1
  ret i1 %322

.exitStub:                                        ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted(float* %0, float* %1, i8* %2, float* %3, i32 %4, i32* %.out, i32* %.out1) #1 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h9549842938191327224(i64 388314400)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %6
  store i8* blockaddress(@main_loop.extracted, %defaultSwitchBasicBlock), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314401)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %8
  store i8* blockaddress(@main_loop.extracted, %BogusBasicBlock), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314405)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %10
  store i8* blockaddress(@main_loop.extracted, %.exitStub2), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314403)
  %13 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %12
  store i8* blockaddress(@main_loop.extracted, %loopEnd), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314412)
  %15 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %14
  store i8* blockaddress(@main_loop.extracted, %240), i8** %15, align 8
  %16 = call i64 @h9549842938191327224(i64 388314407)
  %17 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %16
  store i8* blockaddress(@main_loop.extracted, %.exitStub), i8** %17, align 8
  %18 = sext i32 %4 to i64
  %19 = add i64 %18, 1389235560081377522
  %20 = and i64 1389235560081377522, %18
  %21 = or i64 1389235560081377522, %18
  %22 = add i64 %20, %21
  %23 = sext i32 %4 to i64
  %24 = and i64 %23, 6447665504498002133
  %25 = or i64 -6447665504498002134, %23
  %26 = sub i64 %25, -6447665504498002134
  %27 = sext i32 %4 to i64
  %28 = add i64 %27, 4313786656378263123
  %29 = and i64 4313786656378263123, %27
  %30 = or i64 4313786656378263123, %27
  %31 = add i64 %29, %30
  %32 = xor i64 %19, %31
  %33 = xor i64 %32, %26
  %34 = xor i64 %33, %28
  %35 = xor i64 %34, %22
  %36 = xor i64 %35, 6235895943632197757
  %37 = xor i64 %36, %24
  %38 = sext i32 %4 to i64
  %39 = and i64 %38, -8909394098831112417
  %40 = xor i64 %38, -1
  %41 = xor i64 -8909394098831112417, %40
  %42 = and i64 %41, -8909394098831112417
  %43 = sext i32 %4 to i64
  %44 = add i64 %43, 2122112199271394273
  %45 = add i64 -9024552342925165338, %43
  %46 = sub i64 %45, 7300079531512992005
  %47 = xor i64 %39, %46
  %48 = xor i64 %47, 4599906363178333940
  %49 = xor i64 %48, %42
  %50 = xor i64 %49, %44
  %51 = mul i64 %37, %50
  %52 = call i64 @h9549842938191327224(i64 %51)
  %53 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %52
  store i8* blockaddress(@main_loop.extracted, %codeRepl), i8** %53, align 8
  %54 = call i64 @h9549842938191327224(i64 388314413)
  %55 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %54
  store i8* blockaddress(@main_loop.extracted, %EntryBasicBlockSplit), i8** %55, align 8
  %56 = call i64 @h9549842938191327224(i64 388314406)
  %57 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %56
  store i8* blockaddress(@main_loop.extracted, %loopStart), i8** %57, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %58, align 4
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %59, align 4
  %60 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %60, align 4
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %62, align 4
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %63, align 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %64, align 4
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %65, align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %66, align 4
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %67, align 4
  %68 = alloca i64, align 8
  %69 = sext i32 %4 to i64
  %70 = or i64 %69, -4748336087051345567
  %71 = and i64 -4748336087051345567, %69
  %72 = xor i64 -4748336087051345567, %69
  %73 = or i64 %71, %72
  %74 = sext i32 %4 to i64
  %75 = add i64 %74, -2944011580724163764
  %76 = sub i64 0, %74
  %77 = add i64 2944011580724163764, %76
  %78 = sub i64 0, %77
  %79 = sext i32 %4 to i64
  %80 = and i64 %79, 2374125982348957586
  %81 = or i64 -2374125982348957587, %79
  %82 = sub i64 %81, -2374125982348957587
  %83 = xor i64 %82, %78
  %84 = xor i64 %83, %73
  %85 = xor i64 %84, %70
  %86 = xor i64 %85, -1118939653643188271
  %87 = xor i64 %86, %75
  %88 = xor i64 %87, %80
  %89 = sext i32 %4 to i64
  %90 = add i64 %89, 5133188567207952444
  %91 = sub i64 0, %89
  %92 = sub i64 5133188567207952444, %91
  %93 = sext i32 %4 to i64
  %94 = or i64 %93, 8890282945384080635
  %95 = xor i64 %93, -1
  %96 = and i64 8890282945384080635, %95
  %97 = add i64 %96, %93
  %98 = sext i32 %4 to i64
  %99 = or i64 %98, 5667559690045165256
  %100 = xor i64 %98, -1
  %101 = and i64 5667559690045165256, %100
  %102 = add i64 %101, %98
  %103 = xor i64 %90, %94
  %104 = xor i64 %103, %97
  %105 = xor i64 %104, %92
  %106 = xor i64 %105, 2331856843558240662
  %107 = xor i64 %106, %102
  %108 = xor i64 %107, %99
  %109 = mul i64 %88, %108
  %110 = call i64 @m1252811912226950246(i64 %109)
  %111 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable13175363040677724041, i32 0, i64 %110
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %111, align 8
  %112 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %113 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable13175363040677724041, i32 0, i64 %112
  store i8** %113, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314406, i32* %5, align 4
  %114 = call i8** @bf3107329076723412484(i32* %5)
  %115 = load i8*, i8** %114, align 8
  indirectbr i8* %115, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %240
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub2
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i32*)* @main_loop.extracted.extracted to i8*), i8** %.reload, align 8
  %116 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %117, %119
  store i32 %120, i32* %dispatcher, align 4
  %121 = load i8*, i8** %9, align 8
  %122 = load i8, i8* %121, align 1
  %123 = or i64 %12, 3676783925689434839
  %124 = and i64 3676783925689434839, %12
  %125 = xor i64 3676783925689434839, %12
  %126 = or i64 %124, %125
  %127 = and i64 %16, 2431838006787717370
  %128 = xor i64 %16, -1
  %129 = xor i64 2431838006787717370, %128
  %130 = and i64 %129, 2431838006787717370
  %131 = xor i64 2943444062286600099, %123
  %132 = xor i64 %131, %130
  %133 = xor i64 %132, %127
  %134 = xor i64 %133, %126
  %135 = sext i32 %4 to i64
  %136 = add i64 %135, 7008708449174397195
  %137 = xor i64 7008708449174397195, %135
  %138 = and i64 7008708449174397195, %135
  %139 = mul i64 2, %138
  %140 = add i64 %137, %139
  %141 = add i64 %12, -5460493525361602942
  %142 = sub i64 0, %12
  %143 = add i64 5460493525361602942, %142
  %144 = sub i64 0, %143
  %145 = xor i64 %144, %140
  %146 = xor i64 %145, %136
  %147 = xor i64 %146, %141
  %148 = xor i64 %147, 9166156434425456662
  %149 = mul i64 %134, %148
  %150 = trunc i64 %149 to i8
  %151 = mul i8 %122, %150
  %152 = mul i8 %122, 2
  %153 = add i64 %56, 5993636737517700520
  %154 = add i64 -4065630167735574678, %56
  %155 = add i64 %154, -8387477168456276418
  %156 = add i64 %54, -387319637095025190
  %157 = sub i64 0, %54
  %158 = sub i64 -387319637095025190, %157
  %159 = xor i64 %153, %158
  %160 = xor i64 %159, -1151543790412849629
  %161 = xor i64 %160, %156
  %162 = xor i64 %161, %155
  %163 = or i64 %52, -4912443001824542972
  %164 = xor i64 %52, -1
  %165 = and i64 -4912443001824542972, %164
  %166 = add i64 %165, %52
  %167 = add i64 %10, -7532717597518354322
  %168 = add i64 -63895301220736720, %10
  %169 = add i64 %168, -7468822296297617602
  %170 = add i64 %56, 6277465923400181401
  %171 = add i64 2322069520819684943, %56
  %172 = sub i64 %171, -3955396402580496458
  %173 = xor i64 %170, %166
  %174 = xor i64 %173, -1960718088992980202
  %175 = xor i64 %174, %169
  %176 = xor i64 %175, %163
  %177 = xor i64 %176, %167
  %178 = xor i64 %177, %172
  %179 = mul i64 %162, %178
  %180 = trunc i64 %179 to i8
  %181 = add i8 %180, %152
  %182 = mul i8 %151, %181
  %183 = srem i8 %182, 4
  %184 = icmp eq i8 %183, 0
  %185 = mul i8 %122, %122
  %186 = add i8 %185, %122
  %187 = srem i8 %186, 2
  %188 = and i64 %10, 8296519178820826192
  %189 = xor i64 %10, -1
  %190 = or i64 -8296519178820826193, %189
  %191 = xor i64 %190, -1
  %192 = and i64 %191, -1
  %193 = sext i32 %dispatcher1 to i64
  %194 = or i64 %193, -6703910393536362886
  %195 = and i64 -6703910393536362886, %193
  %196 = xor i64 -6703910393536362886, %193
  %197 = or i64 %195, %196
  %198 = or i64 %14, -3153271773231704327
  %199 = xor i64 %14, -1
  %200 = and i64 %199, 5309852659913265103
  %201 = and i64 %14, -5309852659913265104
  %202 = or i64 %200, %201
  %203 = xor i64 -7093953519794185930, %202
  %204 = xor i64 %14, -1
  %205 = or i64 3153271773231704326, %204
  %206 = xor i64 %205, -1
  %207 = and i64 %206, -1
  %208 = or i64 %203, %207
  %209 = xor i64 -786870295828472971, %197
  %210 = xor i64 %209, %188
  %211 = xor i64 %210, %198
  %212 = xor i64 %211, %192
  %213 = xor i64 %212, %194
  %214 = xor i64 %213, %208
  %215 = add i64 %112, 441751118187866693
  %216 = and i64 441751118187866693, %112
  %217 = or i64 441751118187866693, %112
  %218 = add i64 %216, %217
  %219 = and i64 %52, -3778041752170645956
  %220 = or i64 3778041752170645955, %52
  %221 = sub i64 %220, 3778041752170645955
  %222 = add i64 %6, -1458721099346901806
  %223 = sub i64 0, %6
  %224 = sub i64 -1458721099346901806, %223
  %225 = xor i64 %221, %224
  %226 = xor i64 %225, %219
  %227 = xor i64 %226, %222
  %228 = xor i64 %227, %215
  %229 = xor i64 %228, 0
  %230 = xor i64 %229, %218
  %231 = mul i64 %214, %230
  %232 = trunc i64 %231 to i8
  %233 = icmp eq i8 %187, %232
  %234 = or i1 %184, %233
  %235 = select i1 %234, i32 388314403, i32 388314403
  %236 = xor i32 %235, 1942530080
  %237 = xor i32 %236, 1942530080
  store i32 %237, i32* %5, align 4
  %238 = call i8** @bf3107329076723412484(i32* %5)
  %239 = load i8*, i8** %238, align 8
  indirectbr i8* %239, [label %loopEnd, label %EntryBasicBlockSplit]

240:                                              ; preds = %240, %loopStart
  store i64 5221456193252566390, i64* %68, align 8
  %241 = alloca i8**, align 8
  %242 = add i64 %12, -64986680565316422
  %243 = sub i64 0, %12
  %244 = add i64 64986680565316422, %243
  %245 = sub i64 0, %244
  %246 = or i64 %112, -1478663302503885099
  %247 = xor i64 %112, -1
  %248 = and i64 %247, -6810931499656502724
  %249 = and i64 %112, 6810931499656502723
  %250 = or i64 %248, %249
  %251 = xor i64 5332277818152531177, %250
  %252 = xor i64 %112, -1
  %253 = or i64 1478663302503885098, %252
  %254 = xor i64 %253, -1
  %255 = and i64 %254, -1
  %256 = or i64 %251, %255
  %257 = xor i64 %256, -2027095892996787299
  %258 = xor i64 %257, %242
  %259 = xor i64 %258, %246
  %260 = xor i64 %259, %245
  %261 = and i64 %112, 5498039089793952651
  %262 = or i64 -5498039089793952652, %112
  %263 = sub i64 %262, -5498039089793952652
  %264 = and i64 %52, 4827145914144697548
  %265 = xor i64 %52, -1
  %266 = or i64 -4827145914144697549, %265
  %267 = xor i64 %266, -1
  %268 = and i64 %267, -1
  %269 = xor i64 -3118621283258203912, %261
  %270 = xor i64 %269, %263
  %271 = xor i64 %270, %268
  %272 = xor i64 %271, %264
  %273 = mul i64 %260, %272
  %274 = trunc i64 %273 to i32
  %275 = and i64 %12, -6582020835138905351
  %276 = or i64 6582020835138905350, %12
  %277 = sub i64 %276, 6582020835138905350
  %278 = add i64 %16, -8195122150390362168
  %279 = and i64 -8195122150390362168, %16
  %280 = or i64 -8195122150390362168, %16
  %281 = add i64 %279, %280
  %282 = xor i64 %281, %277
  %283 = xor i64 %282, %278
  %284 = xor i64 %283, %275
  %285 = xor i64 %284, 184544082196613411
  %286 = and i64 %8, 3017501554478383152
  %287 = or i64 -3017501554478383153, %8
  %288 = sub i64 %287, -3017501554478383153
  %289 = or i64 %110, -7623046019936517333
  %290 = xor i64 %110, -1
  %291 = and i64 -7623046019936517333, %290
  %292 = add i64 %291, %110
  %293 = and i64 %52, 8077440593563371250
  %294 = or i64 -8077440593563371251, %52
  %295 = sub i64 %294, -8077440593563371251
  %296 = xor i64 %293, %289
  %297 = xor i64 %296, %288
  %298 = xor i64 %297, %292
  %299 = xor i64 %298, %286
  %300 = xor i64 %299, %295
  %301 = xor i64 %300, 0
  %302 = mul i64 %285, %301
  %303 = trunc i64 %302 to i1
  %304 = sext i32 %dispatcher1 to i64
  %305 = and i64 %304, -2456190592287760170
  %306 = xor i64 %304, -1
  %307 = or i64 2456190592287760169, %306
  %308 = xor i64 %307, -1
  %309 = and i64 %308, -1
  %310 = add i64 %16, -2350147450882448028
  %311 = sub i64 0, %16
  %312 = add i64 2350147450882448028, %311
  %313 = sub i64 0, %312
  %314 = and i64 %12, -3630073822526456455
  %315 = xor i64 %12, -1
  %316 = xor i64 -3630073822526456455, %315
  %317 = and i64 %316, -3630073822526456455
  %318 = xor i64 -7282889839654831679, %309
  %319 = xor i64 %318, %313
  %320 = xor i64 %319, %317
  %321 = xor i64 %320, %314
  %322 = xor i64 %321, %305
  %323 = xor i64 %322, %310
  %324 = add i64 %112, 3449873837833998482
  %325 = xor i64 3449873837833998482, %112
  %326 = and i64 3449873837833998482, %112
  %327 = mul i64 2, %326
  %328 = add i64 %325, %327
  %329 = sext i32 %4 to i64
  %330 = or i64 %329, -1831496747397441067
  %331 = and i64 -1831496747397441067, %329
  %332 = xor i64 -1831496747397441067, %329
  %333 = or i64 %331, %332
  %334 = add i64 %112, -9070623532282664806
  %335 = sub i64 0, %112
  %336 = add i64 9070623532282664806, %335
  %337 = sub i64 0, %336
  %338 = xor i64 0, %334
  %339 = xor i64 %338, %337
  %340 = xor i64 %339, %333
  %341 = xor i64 %340, %328
  %342 = xor i64 %341, %324
  %343 = xor i64 %342, %330
  %344 = mul i64 %323, %343
  %345 = trunc i64 %344 to i32
  call void @"5784248439022692321"(i32 %274, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 %303, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %345, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* %68, i8*** %241, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %346 = load i8**, i8*** %241, align 8
  %347 = load i8*, i8** %346, align 8
  %348 = bitcast i8* %347 to i32 (float, float*, float*, i8*, float*)*
  %349 = call i32 %348(float 0.000000e+00, float* %0, float* %1, i8* %2, float* %3)
  store i32 %349, i32* %.out, align 4
  %350 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %351 = load i32, i32* %350, align 4
  %352 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %353 = load i32, i32* %352, align 4
  %354 = add i32 %351, %353
  store i32 %354, i32* %dispatcher, align 4
  %355 = load i8*, i8** %53, align 8
  %356 = load i8, i8* %355, align 1
  %357 = and i8 %356, 1
  %358 = icmp eq i8 %357, 0
  %359 = mul i8 %356, %356
  %360 = add i8 %359, %356
  %361 = mul i8 %360, 3
  %362 = srem i8 %361, 2
  %363 = sext i32 %4 to i64
  %364 = add i64 %363, 6679210355922219647
  %365 = add i64 7339603680964410656, %363
  %366 = sub i64 %365, 660393325042191009
  %367 = add i64 %6, 8893792729883869453
  %368 = sub i64 0, %6
  %369 = sub i64 8893792729883869453, %368
  %370 = and i64 %112, 4324805847071302324
  %371 = xor i64 %112, -1
  %372 = or i64 -4324805847071302325, %371
  %373 = xor i64 %372, -1
  %374 = and i64 %373, -1
  %375 = xor i64 %367, 5313507945921869707
  %376 = xor i64 %375, %369
  %377 = xor i64 %376, %370
  %378 = xor i64 %377, %364
  %379 = xor i64 %378, %374
  %380 = xor i64 %379, %366
  %381 = add i64 %52, 7187374460979485871
  %382 = add i64 3372026669790448779, %52
  %383 = sub i64 %382, -3815347791189037092
  %384 = add i64 %10, 5571372749904191998
  %385 = add i64 4204660602834300598, %10
  %386 = add i64 %385, 1366712147069891400
  %387 = add i64 %8, -4418969572242604033
  %388 = and i64 -4418969572242604033, %8
  %389 = or i64 -4418969572242604033, %8
  %390 = add i64 %388, %389
  %391 = xor i64 0, %390
  %392 = xor i64 %391, %387
  %393 = xor i64 %392, %381
  %394 = xor i64 %393, %386
  %395 = xor i64 %394, %383
  %396 = xor i64 %395, %384
  %397 = mul i64 %380, %396
  %398 = trunc i64 %397 to i8
  %399 = icmp eq i8 %362, %398
  %400 = add i64 %8, -6773678245457763083
  %401 = sub i64 0, %8
  %402 = sub i64 -6773678245457763083, %401
  %403 = or i64 %110, 6098861021735280125
  %404 = xor i64 %110, -1
  %405 = and i64 6098861021735280125, %404
  %406 = add i64 %405, %110
  %407 = xor i64 %402, %403
  %408 = xor i64 %407, %400
  %409 = xor i64 %408, -241272804415418697
  %410 = xor i64 %409, %406
  %411 = and i64 %56, -7631113277194061771
  %412 = xor i64 %56, -1
  %413 = xor i64 -7631113277194061771, %412
  %414 = and i64 %413, -7631113277194061771
  %415 = or i64 %110, -762715443021567407
  %416 = xor i64 %110, -1
  %417 = and i64 %416, 8424835327778015846
  %418 = and i64 %110, -8424835327778015847
  %419 = or i64 %417, %418
  %420 = xor i64 -9114919231624814537, %419
  %421 = xor i64 %110, -1
  %422 = or i64 762715443021567406, %421
  %423 = xor i64 %422, -1
  %424 = and i64 %423, -1
  %425 = or i64 %420, %424
  %426 = xor i64 -2243902837327335673, %414
  %427 = xor i64 %426, %411
  %428 = xor i64 %427, %415
  %429 = xor i64 %428, %425
  %430 = mul i64 %410, %429
  %431 = trunc i64 %430 to i1
  %432 = xor i1 %358, %431
  %433 = and i1 %432, true
  %434 = add i64 %10, 5813654062403278167
  %435 = add i64 -480495811961908985, %10
  %436 = sub i64 %435, -6294149874365187152
  %437 = add i64 %6, -8519807163241221781
  %438 = xor i64 -8519807163241221781, %6
  %439 = and i64 -8519807163241221781, %6
  %440 = mul i64 2, %439
  %441 = add i64 %438, %440
  %442 = xor i64 %437, -4005037817740569825
  %443 = xor i64 %442, %436
  %444 = xor i64 %443, %441
  %445 = xor i64 %444, %434
  %446 = sext i32 %4 to i64
  %447 = and i64 %446, 2060282462807446533
  %448 = or i64 -2060282462807446534, %446
  %449 = sub i64 %448, -2060282462807446534
  %450 = or i64 %112, -6080788204074306231
  %451 = and i64 -6080788204074306231, %112
  %452 = xor i64 -6080788204074306231, %112
  %453 = or i64 %451, %452
  %454 = sext i32 %dispatcher1 to i64
  %455 = and i64 %454, 8199798703136202984
  %456 = xor i64 %454, -1
  %457 = xor i64 8199798703136202984, %456
  %458 = and i64 %457, 8199798703136202984
  %459 = xor i64 %450, %447
  %460 = xor i64 %459, %458
  %461 = xor i64 %460, %449
  %462 = xor i64 %461, %453
  %463 = xor i64 %462, 0
  %464 = xor i64 %463, %455
  %465 = mul i64 %445, %464
  %466 = trunc i64 %465 to i1
  %467 = and i1 %358, %466
  %468 = or i1 %433, %467
  %469 = xor i1 %399, true
  %470 = and i1 %469, true
  %471 = and i1 %399, false
  %472 = or i1 %470, %471
  %473 = xor i1 %468, %472
  %474 = or i64 %54, -3478983513309099311
  %475 = xor i64 %54, -1
  %476 = and i64 -3478983513309099311, %475
  %477 = add i64 %476, %54
  %478 = sext i32 %dispatcher1 to i64
  %479 = add i64 %478, 7834700370213724843
  %480 = xor i64 7834700370213724843, %478
  %481 = and i64 7834700370213724843, %478
  %482 = mul i64 2, %481
  %483 = add i64 %480, %482
  %484 = add i64 %10, 6600284456837057106
  %485 = sub i64 0, %10
  %486 = sub i64 6600284456837057106, %485
  %487 = xor i64 %484, %483
  %488 = xor i64 %487, %477
  %489 = xor i64 %488, %479
  %490 = xor i64 %489, 3436224598770677051
  %491 = xor i64 %490, %474
  %492 = xor i64 %491, %486
  %493 = add i64 %56, -8575053944946880512
  %494 = sub i64 0, %56
  %495 = add i64 8575053944946880512, %494
  %496 = sub i64 0, %495
  %497 = and i64 %54, 4630464117946537291
  %498 = xor i64 %54, -1
  %499 = or i64 -4630464117946537292, %498
  %500 = xor i64 %499, -1
  %501 = and i64 %500, -1
  %502 = xor i64 %493, %497
  %503 = xor i64 %502, %501
  %504 = xor i64 %503, 2816281273781951475
  %505 = xor i64 %504, %496
  %506 = mul i64 %492, %505
  %507 = trunc i64 %506 to i1
  %508 = xor i1 %358, %507
  %509 = xor i1 %399, true
  %510 = or i1 %508, %509
  %511 = xor i1 %510, true
  %512 = and i1 %511, true
  %513 = or i1 %473, %512
  %514 = and i64 %6, -6592300508519593009
  %515 = xor i64 %6, -1
  %516 = xor i64 -6592300508519593009, %515
  %517 = and i64 %516, -6592300508519593009
  %518 = or i64 %6, -5530436496196220811
  %519 = xor i64 %6, -1
  %520 = and i64 -5530436496196220811, %519
  %521 = add i64 %520, %6
  %522 = xor i64 %517, %518
  %523 = xor i64 %522, %521
  %524 = xor i64 %523, %514
  %525 = xor i64 %524, -6686937618636852259
  %526 = and i64 %52, -6515185374645341527
  %527 = or i64 6515185374645341526, %52
  %528 = sub i64 %527, 6515185374645341526
  %529 = add i64 %52, -1259166026960246684
  %530 = add i64 8460710087239985013, %52
  %531 = sub i64 %530, -8726867959509319919
  %532 = xor i64 %531, %526
  %533 = xor i64 %532, %528
  %534 = xor i64 %533, %529
  %535 = xor i64 %534, 2183009909480160511
  %536 = mul i64 %525, %535
  %537 = trunc i64 %536 to i32
  %538 = select i1 %513, i32 388314401, i32 %537
  %539 = xor i32 %538, -1
  %540 = and i32 %539, 2
  %541 = and i32 %538, -3
  %542 = or i32 %540, %541
  store i32 %542, i32* %5, align 4
  %543 = call i8** @bf3107329076723412484(i32* %5)
  %544 = load i8*, i8** %543, align 8
  indirectbr i8* %544, [label %loopEnd, label %240]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566391, i64* %68, align 8
  %545 = alloca i8**, align 8
  %546 = or i64 %110, 207559411032284461
  %547 = and i64 207559411032284461, %110
  %548 = xor i64 207559411032284461, %110
  %549 = or i64 %547, %548
  %550 = add i64 %12, 2615403530573096743
  %551 = add i64 -2331159138381357135, %12
  %552 = add i64 %551, 4946562668954453878
  %553 = and i64 %56, -7237300276717554647
  %554 = xor i64 %56, -1
  %555 = xor i64 -7237300276717554647, %554
  %556 = and i64 %555, -7237300276717554647
  %557 = xor i64 %552, %553
  %558 = xor i64 %557, 33272211816426293
  %559 = xor i64 %558, %546
  %560 = xor i64 %559, %556
  %561 = xor i64 %560, %550
  %562 = xor i64 %561, %549
  %563 = or i64 %14, -6153226143369558415
  %564 = xor i64 %14, -1
  %565 = and i64 -6153226143369558415, %564
  %566 = add i64 %565, %14
  %567 = and i64 %112, -7960849172642648177
  %568 = xor i64 %112, -1
  %569 = or i64 7960849172642648176, %568
  %570 = xor i64 %569, -1
  %571 = and i64 %570, -1
  %572 = or i64 %56, 5260556116887842593
  %573 = xor i64 %56, -1
  %574 = and i64 %573, -8976653446833754957
  %575 = and i64 %56, 8976653446833754956
  %576 = or i64 %574, %575
  %577 = xor i64 -3860224063298632814, %576
  %578 = xor i64 %56, -1
  %579 = or i64 -5260556116887842594, %578
  %580 = xor i64 %579, -1
  %581 = and i64 %580, -1
  %582 = or i64 %577, %581
  %583 = xor i64 %582, %571
  %584 = xor i64 %583, %567
  %585 = xor i64 %584, %563
  %586 = xor i64 %585, 0
  %587 = xor i64 %586, %572
  %588 = xor i64 %587, %566
  %589 = mul i64 %562, %588
  %590 = trunc i64 %589 to i32
  %591 = and i64 %54, 1512558174617945829
  %592 = or i64 -1512558174617945830, %54
  %593 = sub i64 %592, -1512558174617945830
  %594 = or i64 %16, -6358189278935992285
  %595 = xor i64 %16, -1
  %596 = and i64 %595, -3637494784143159142
  %597 = and i64 %16, 3637494784143159141
  %598 = or i64 %596, %597
  %599 = xor i64 7657853629908199609, %598
  %600 = xor i64 %16, -1
  %601 = or i64 6358189278935992284, %600
  %602 = xor i64 %601, -1
  %603 = and i64 %602, -1
  %604 = or i64 %599, %603
  %605 = or i64 %16, -1610188505181739191
  %606 = xor i64 %16, -1
  %607 = and i64 %606, -7500899147233985821
  %608 = and i64 %16, 7500899147233985820
  %609 = or i64 %607, %608
  %610 = xor i64 9097277717626215850, %609
  %611 = xor i64 %16, -1
  %612 = or i64 1610188505181739190, %611
  %613 = xor i64 %612, -1
  %614 = and i64 %613, -1
  %615 = or i64 %610, %614
  %616 = xor i64 %593, %605
  %617 = xor i64 %616, %615
  %618 = xor i64 %617, %604
  %619 = xor i64 %618, %591
  %620 = xor i64 %619, 1634503833769071977
  %621 = xor i64 %620, %594
  %622 = or i64 %112, 3936606573171774985
  %623 = xor i64 %112, -1
  %624 = and i64 %623, 3366840383585606726
  %625 = and i64 %112, -3366840383585606727
  %626 = or i64 %624, %625
  %627 = xor i64 1736359412648397391, %626
  %628 = xor i64 %112, -1
  %629 = or i64 -3936606573171774986, %628
  %630 = xor i64 %629, -1
  %631 = and i64 %630, -1
  %632 = or i64 %627, %631
  %633 = and i64 %12, -4842699877074341155
  %634 = or i64 4842699877074341154, %12
  %635 = sub i64 %634, 4842699877074341154
  %636 = and i64 %110, -5381960497251178204
  %637 = xor i64 %110, -1
  %638 = xor i64 -5381960497251178204, %637
  %639 = and i64 %638, -5381960497251178204
  %640 = xor i64 0, %622
  %641 = xor i64 %640, %636
  %642 = xor i64 %641, %639
  %643 = xor i64 %642, %632
  %644 = xor i64 %643, %635
  %645 = xor i64 %644, %633
  %646 = mul i64 %621, %645
  %647 = trunc i64 %646 to i32
  %648 = or i64 %112, -7937975961643325088
  %649 = and i64 -7937975961643325088, %112
  %650 = xor i64 -7937975961643325088, %112
  %651 = or i64 %649, %650
  %652 = add i64 %52, 4225937984957792504
  %653 = add i64 3414516759858804851, %52
  %654 = add i64 %653, 811421225098987653
  %655 = and i64 %6, 7041710625065946043
  %656 = xor i64 %6, -1
  %657 = xor i64 7041710625065946043, %656
  %658 = and i64 %657, 7041710625065946043
  %659 = xor i64 %652, %651
  %660 = xor i64 %659, %655
  %661 = xor i64 %660, %658
  %662 = xor i64 %661, 1432062018240098195
  %663 = xor i64 %662, %648
  %664 = xor i64 %663, %654
  %665 = and i64 %12, 6344021948977630882
  %666 = xor i64 %12, -1
  %667 = or i64 -6344021948977630883, %666
  %668 = xor i64 %667, -1
  %669 = and i64 %668, -1
  %670 = and i64 %10, 6602609595464065086
  %671 = xor i64 %10, -1
  %672 = xor i64 6602609595464065086, %671
  %673 = and i64 %672, 6602609595464065086
  %674 = xor i64 0, %673
  %675 = xor i64 %674, %665
  %676 = xor i64 %675, %670
  %677 = xor i64 %676, %669
  %678 = mul i64 %664, %677
  %679 = trunc i64 %678 to i32
  %680 = sext i32 %4 to i64
  %681 = or i64 %680, 368000371105409375
  %682 = and i64 368000371105409375, %680
  %683 = xor i64 368000371105409375, %680
  %684 = or i64 %682, %683
  %685 = or i64 %12, -6409339907727540109
  %686 = and i64 -6409339907727540109, %12
  %687 = xor i64 -6409339907727540109, %12
  %688 = or i64 %686, %687
  %689 = xor i64 -4321629750454542021, %685
  %690 = xor i64 %689, %688
  %691 = xor i64 %690, %681
  %692 = xor i64 %691, %684
  %693 = and i64 %14, 9012699473257177212
  %694 = xor i64 %14, -1
  %695 = xor i64 9012699473257177212, %694
  %696 = and i64 %695, 9012699473257177212
  %697 = and i64 %12, -1421141642598640838
  %698 = or i64 1421141642598640837, %12
  %699 = sub i64 %698, 1421141642598640837
  %700 = xor i64 %699, 0
  %701 = xor i64 %700, %696
  %702 = xor i64 %701, %697
  %703 = xor i64 %702, %693
  %704 = mul i64 %692, %703
  %705 = trunc i64 %704 to i32
  call void @"5784248439022692321"(i32 24, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 %590, i1* null, i32 %647, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 %679, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 %705, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* %68, i8*** %545, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %706 = load i8**, i8*** %545, align 8
  %707 = load i8*, i8** %706, align 8
  %708 = bitcast i8* %707 to i1 (i32, i32*)*
  %targetBlock = call i1 %708(i32 %4, i32* %.out1)
  %709 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %710 = load i32, i32* %709, align 4
  %711 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %712 = load i32, i32* %711, align 4
  %713 = srem i32 %710, %712
  %714 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %715 = load i32, i32* %714, align 4
  %716 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %717 = load i32, i32* %716, align 4
  %718 = add i32 %715, %717
  %719 = select i1 %targetBlock, i32 %713, i32 %718
  store i32 %719, i32* %dispatcher, align 4
  %720 = load i8*, i8** %55, align 8
  %721 = load i8, i8* %720, align 1
  %722 = mul i8 %721, 2
  %723 = mul i8 %721, 2
  %724 = sub i8 0, %723
  %725 = add i64 %8, -8125950431775881585
  %726 = add i64 3382736057687850676, %8
  %727 = sub i64 %726, -6938057584245819355
  %728 = and i64 %6, 8892802048109877262
  %729 = xor i64 %6, -1
  %730 = or i64 -8892802048109877263, %729
  %731 = xor i64 %730, -1
  %732 = and i64 %731, -1
  %733 = or i64 %110, 6525674712235960084
  %734 = xor i64 %110, -1
  %735 = and i64 %734, 6834438008452686140
  %736 = and i64 %110, -6834438008452686141
  %737 = or i64 %735, %736
  %738 = xor i64 312744791116006952, %737
  %739 = xor i64 %110, -1
  %740 = or i64 -6525674712235960085, %739
  %741 = xor i64 %740, -1
  %742 = and i64 %741, -1
  %743 = or i64 %738, %742
  %744 = xor i64 -6568966836590620291, %728
  %745 = xor i64 %744, %733
  %746 = xor i64 %745, %732
  %747 = xor i64 %746, %725
  %748 = xor i64 %747, %727
  %749 = xor i64 %748, %743
  %750 = and i64 %16, 8345535554945541206
  %751 = xor i64 %16, -1
  %752 = xor i64 8345535554945541206, %751
  %753 = and i64 %752, 8345535554945541206
  %754 = add i64 %14, 3373795022000238044
  %755 = add i64 -8620750404301552450, %14
  %756 = add i64 %755, -6452198647407761122
  %757 = or i64 %12, -5780020381667027278
  %758 = and i64 -5780020381667027278, %12
  %759 = xor i64 -5780020381667027278, %12
  %760 = or i64 %758, %759
  %761 = xor i64 %750, %757
  %762 = xor i64 %761, -8151950963882860630
  %763 = xor i64 %762, %754
  %764 = xor i64 %763, %756
  %765 = xor i64 %764, %760
  %766 = xor i64 %765, %753
  %767 = mul i64 %749, %766
  %768 = trunc i64 %767 to i8
  %769 = sub i8 %768, %724
  %770 = mul i8 %722, %769
  %771 = srem i8 %770, 4
  %772 = icmp eq i8 %771, 0
  %773 = mul i8 %721, %721
  %774 = sub i8 %773, 15
  %775 = add i8 %774, %721
  %776 = add i8 %775, 15
  %777 = or i64 %6, 8846890206310288341
  %778 = xor i64 %6, -1
  %779 = and i64 %778, -2956825036009289790
  %780 = and i64 %6, 2956825036009289789
  %781 = or i64 %779, %780
  %782 = xor i64 -6038965847858443241, %781
  %783 = xor i64 %6, -1
  %784 = or i64 -8846890206310288342, %783
  %785 = xor i64 %784, -1
  %786 = and i64 %785, -1
  %787 = or i64 %782, %786
  %788 = sext i32 %4 to i64
  %789 = and i64 %788, -921902948861853041
  %790 = or i64 921902948861853040, %788
  %791 = sub i64 %790, 921902948861853040
  %792 = or i64 %8, -2019790164433412032
  %793 = xor i64 %8, -1
  %794 = and i64 -2019790164433412032, %793
  %795 = add i64 %794, %8
  %796 = xor i64 3754293181332445051, %777
  %797 = xor i64 %796, %789
  %798 = xor i64 %797, %787
  %799 = xor i64 %798, %791
  %800 = xor i64 %799, %792
  %801 = xor i64 %800, %795
  %802 = add i64 %52, -3887192664509606819
  %803 = and i64 -3887192664509606819, %52
  %804 = or i64 -3887192664509606819, %52
  %805 = add i64 %803, %804
  %806 = and i64 %10, 6959142029515058038
  %807 = xor i64 %10, -1
  %808 = or i64 -6959142029515058039, %807
  %809 = xor i64 %808, -1
  %810 = and i64 %809, -1
  %811 = xor i64 %806, %810
  %812 = xor i64 %811, -3937136293091680410
  %813 = xor i64 %812, %805
  %814 = xor i64 %813, %802
  %815 = mul i64 %801, %814
  %816 = trunc i64 %815 to i8
  %817 = srem i8 %776, %816
  %818 = icmp eq i8 %817, 0
  %819 = and i1 %772, %818
  %820 = or i64 %14, 3583144356902822524
  %821 = xor i64 %14, -1
  %822 = and i64 3583144356902822524, %821
  %823 = add i64 %822, %14
  %824 = and i64 %8, 7432309610547543346
  %825 = or i64 -7432309610547543347, %8
  %826 = sub i64 %825, -7432309610547543347
  %827 = or i64 %112, -5047295307032425022
  %828 = and i64 -5047295307032425022, %112
  %829 = xor i64 -5047295307032425022, %112
  %830 = or i64 %828, %829
  %831 = xor i64 %824, %830
  %832 = xor i64 %831, %826
  %833 = xor i64 %832, %827
  %834 = xor i64 %833, 5073387609936960669
  %835 = xor i64 %834, %823
  %836 = xor i64 %835, %820
  %837 = sext i32 %4 to i64
  %838 = and i64 %837, -6351571823256751882
  %839 = xor i64 %837, -1
  %840 = or i64 6351571823256751881, %839
  %841 = xor i64 %840, -1
  %842 = and i64 %841, -1
  %843 = add i64 %6, -3551731476306349115
  %844 = and i64 -3551731476306349115, %6
  %845 = or i64 -3551731476306349115, %6
  %846 = add i64 %844, %845
  %847 = or i64 %6, 488625203901162610
  %848 = xor i64 %6, -1
  %849 = and i64 %848, -1063115009361219255
  %850 = and i64 %6, 1063115009361219254
  %851 = or i64 %849, %850
  %852 = xor i64 -578434922520799941, %851
  %853 = xor i64 %6, -1
  %854 = or i64 -488625203901162611, %853
  %855 = xor i64 %854, -1
  %856 = and i64 %855, -1
  %857 = or i64 %852, %856
  %858 = xor i64 %847, %843
  %859 = xor i64 %858, %857
  %860 = xor i64 %859, -5112358678692991535
  %861 = xor i64 %860, %846
  %862 = xor i64 %861, %838
  %863 = xor i64 %862, %842
  %864 = mul i64 %836, %863
  %865 = trunc i64 %864 to i32
  %866 = select i1 %819, i32 %865, i32 388314403
  %867 = and i64 %14, -4877502122385951429
  %868 = xor i64 %14, -1
  %869 = or i64 4877502122385951428, %868
  %870 = xor i64 %869, -1
  %871 = and i64 %870, -1
  %872 = and i64 %16, 3815481080418149338
  %873 = or i64 -3815481080418149339, %16
  %874 = sub i64 %873, -3815481080418149339
  %875 = xor i64 %871, 4942269088752848933
  %876 = xor i64 %875, %874
  %877 = xor i64 %876, %867
  %878 = xor i64 %877, %872
  %879 = sext i32 %dispatcher1 to i64
  %880 = add i64 %879, 563933588820877743
  %881 = xor i64 563933588820877743, %879
  %882 = and i64 563933588820877743, %879
  %883 = mul i64 2, %882
  %884 = add i64 %881, %883
  %885 = add i64 %14, 7974754994095868136
  %886 = sub i64 0, %14
  %887 = sub i64 7974754994095868136, %886
  %888 = and i64 %10, -3881449944763644037
  %889 = or i64 3881449944763644036, %10
  %890 = sub i64 %889, 3881449944763644036
  %891 = xor i64 %887, %880
  %892 = xor i64 %891, %890
  %893 = xor i64 %892, -1439791683753401482
  %894 = xor i64 %893, %885
  %895 = xor i64 %894, %884
  %896 = xor i64 %895, %888
  %897 = mul i64 %878, %896
  %898 = trunc i64 %897 to i32
  %899 = xor i32 %866, %898
  store i32 %899, i32* %5, align 4
  %900 = call i8** @bf3107329076723412484(i32* %5)
  %901 = load i8*, i8** %900, align 8
  indirectbr i8* %901, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub2:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %902 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %902, align 4
  %903 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %903, align 4
  %904 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %905 = sext i32 %dispatcher1 to i64
  %906 = and i64 %905, 6239324038619830291
  %907 = or i64 -6239324038619830292, %905
  %908 = sub i64 %907, -6239324038619830292
  %909 = add i64 %8, -1323040025195534221
  %910 = and i64 -1323040025195534221, %8
  %911 = or i64 -1323040025195534221, %8
  %912 = add i64 %910, %911
  %913 = xor i64 %912, -2883541327644429389
  %914 = xor i64 %913, %909
  %915 = xor i64 %914, %908
  %916 = xor i64 %915, %906
  %917 = and i64 %8, -2812551638656406711
  %918 = xor i64 %8, -1
  %919 = xor i64 -2812551638656406711, %918
  %920 = and i64 %919, -2812551638656406711
  %921 = or i64 %10, 689670275926861938
  %922 = xor i64 %10, -1
  %923 = and i64 %922, 7644389321440337033
  %924 = and i64 %10, -7644389321440337034
  %925 = or i64 %923, %924
  %926 = xor i64 7170963023177823483, %925
  %927 = xor i64 %10, -1
  %928 = or i64 -689670275926861939, %927
  %929 = xor i64 %928, -1
  %930 = and i64 %929, -1
  %931 = or i64 %926, %930
  %932 = or i64 %14, -2348369299109534586
  %933 = and i64 -2348369299109534586, %14
  %934 = xor i64 -2348369299109534586, %14
  %935 = or i64 %933, %934
  %936 = xor i64 %921, %931
  %937 = xor i64 %936, -1668730094860346767
  %938 = xor i64 %937, %920
  %939 = xor i64 %938, %932
  %940 = xor i64 %939, %935
  %941 = xor i64 %940, %917
  %942 = mul i64 %916, %941
  %943 = trunc i64 %942 to i32
  store i32 %943, i32* %904, align 4
  %944 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %945 = or i64 %52, -3717034151678158487
  %946 = and i64 -3717034151678158487, %52
  %947 = xor i64 -3717034151678158487, %52
  %948 = or i64 %946, %947
  %949 = and i64 %8, 8397656714159080255
  %950 = xor i64 %8, -1
  %951 = xor i64 8397656714159080255, %950
  %952 = and i64 %951, 8397656714159080255
  %953 = sext i32 %4 to i64
  %954 = and i64 %953, 1065645419415870116
  %955 = or i64 -1065645419415870117, %953
  %956 = sub i64 %955, -1065645419415870117
  %957 = xor i64 %945, %952
  %958 = xor i64 %957, %956
  %959 = xor i64 %958, %948
  %960 = xor i64 %959, %954
  %961 = xor i64 %960, %949
  %962 = xor i64 %961, -8563245867247520059
  %963 = add i64 %56, -7532168407093446946
  %964 = sub i64 0, %56
  %965 = add i64 7532168407093446946, %964
  %966 = sub i64 0, %965
  %967 = or i64 %6, -6550426687364753778
  %968 = xor i64 %6, -1
  %969 = and i64 -6550426687364753778, %968
  %970 = add i64 %969, %6
  %971 = xor i64 %963, %967
  %972 = xor i64 %971, %970
  %973 = xor i64 %972, %966
  %974 = xor i64 %973, -1172149511131350975
  %975 = mul i64 %962, %974
  %976 = trunc i64 %975 to i32
  store i32 %976, i32* %944, align 4
  %977 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %977, align 4
  %978 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %979 = load i32, i32* %978, align 4
  store i32 %979, i32* %dispatcher, align 4
  %980 = load i8*, i8** %15, align 8
  %981 = load i8, i8* %980, align 1
  %982 = xor i8 %981, -2
  %983 = and i8 %982, %981
  %984 = icmp eq i8 %983, 0
  %985 = mul i8 %981, %981
  %986 = add i8 %985, 50
  %987 = add i8 %986, %981
  %988 = add i64 %8, -3921501541796810401
  %989 = add i64 1969119164049451827, %8
  %990 = sub i64 %989, 5890620705846262228
  %991 = add i64 %52, 821286987591721938
  %992 = xor i64 821286987591721938, %52
  %993 = and i64 821286987591721938, %52
  %994 = mul i64 2, %993
  %995 = add i64 %992, %994
  %996 = add i64 %16, -4361411893191925472
  %997 = sub i64 0, %16
  %998 = add i64 4361411893191925472, %997
  %999 = sub i64 0, %998
  %1000 = xor i64 %988, %996
  %1001 = xor i64 %1000, %999
  %1002 = xor i64 %1001, %991
  %1003 = xor i64 %1002, %990
  %1004 = xor i64 %1003, 361177752410928545
  %1005 = xor i64 %1004, %995
  %1006 = and i64 %54, 151401573800272828
  %1007 = or i64 -151401573800272829, %54
  %1008 = sub i64 %1007, -151401573800272829
  %1009 = add i64 %52, 5090532577551827971
  %1010 = and i64 5090532577551827971, %52
  %1011 = or i64 5090532577551827971, %52
  %1012 = add i64 %1010, %1011
  %1013 = xor i64 -4307388919915573518, %1006
  %1014 = xor i64 %1013, %1009
  %1015 = xor i64 %1014, %1008
  %1016 = xor i64 %1015, %1012
  %1017 = mul i64 %1005, %1016
  %1018 = trunc i64 %1017 to i8
  %1019 = sub i8 %987, %1018
  %1020 = mul i8 %1019, 3
  %1021 = and i64 %8, 1011277513000078987
  %1022 = xor i64 %8, -1
  %1023 = or i64 -1011277513000078988, %1022
  %1024 = xor i64 %1023, -1
  %1025 = and i64 %1024, -1
  %1026 = or i64 %52, -5281040063274122298
  %1027 = xor i64 %52, -1
  %1028 = and i64 -5281040063274122298, %1027
  %1029 = add i64 %1028, %52
  %1030 = sext i32 %4 to i64
  %1031 = and i64 %1030, -8076043606523780171
  %1032 = xor i64 %1030, -1
  %1033 = xor i64 -8076043606523780171, %1032
  %1034 = and i64 %1033, -8076043606523780171
  %1035 = xor i64 %1021, %1034
  %1036 = xor i64 %1035, %1031
  %1037 = xor i64 %1036, -2649053034042181371
  %1038 = xor i64 %1037, %1026
  %1039 = xor i64 %1038, %1029
  %1040 = xor i64 %1039, %1025
  %1041 = or i64 %56, -7213606244899231171
  %1042 = xor i64 %56, -1
  %1043 = and i64 %1042, 2773155496556713778
  %1044 = and i64 %56, -2773155496556713779
  %1045 = or i64 %1043, %1044
  %1046 = xor i64 -4785033450374382321, %1045
  %1047 = xor i64 %56, -1
  %1048 = or i64 7213606244899231170, %1047
  %1049 = xor i64 %1048, -1
  %1050 = and i64 %1049, -1
  %1051 = or i64 %1046, %1050
  %1052 = add i64 %12, 8976596868125230707
  %1053 = xor i64 8976596868125230707, %12
  %1054 = and i64 8976596868125230707, %12
  %1055 = mul i64 2, %1054
  %1056 = add i64 %1053, %1055
  %1057 = and i64 %14, 3465730565479900081
  %1058 = xor i64 %14, -1
  %1059 = or i64 -3465730565479900082, %1058
  %1060 = xor i64 %1059, -1
  %1061 = and i64 %1060, -1
  %1062 = xor i64 %1052, %1041
  %1063 = xor i64 %1062, %1057
  %1064 = xor i64 %1063, -2912823356672419942
  %1065 = xor i64 %1064, %1061
  %1066 = xor i64 %1065, %1051
  %1067 = xor i64 %1066, %1056
  %1068 = mul i64 %1040, %1067
  %1069 = trunc i64 %1068 to i8
  %1070 = srem i8 %1020, %1069
  %1071 = add i64 %54, 527601347225596525
  %1072 = xor i64 527601347225596525, %54
  %1073 = and i64 527601347225596525, %54
  %1074 = mul i64 2, %1073
  %1075 = add i64 %1072, %1074
  %1076 = and i64 %14, -2368855055833503500
  %1077 = xor i64 %14, -1
  %1078 = xor i64 -2368855055833503500, %1077
  %1079 = and i64 %1078, -2368855055833503500
  %1080 = xor i64 %1075, %1071
  %1081 = xor i64 %1080, %1079
  %1082 = xor i64 %1081, %1076
  %1083 = xor i64 %1082, 3582318517093021223
  %1084 = or i64 %14, 584594981767724255
  %1085 = xor i64 %14, -1
  %1086 = and i64 %1085, -1577902473356317664
  %1087 = and i64 %14, 1577902473356317663
  %1088 = or i64 %1086, %1087
  %1089 = xor i64 -2159814643510456065, %1088
  %1090 = xor i64 %14, -1
  %1091 = or i64 -584594981767724256, %1090
  %1092 = xor i64 %1091, -1
  %1093 = and i64 %1092, -1
  %1094 = or i64 %1089, %1093
  %1095 = or i64 %6, -9025610986246351227
  %1096 = xor i64 %6, -1
  %1097 = and i64 -9025610986246351227, %1096
  %1098 = add i64 %1097, %6
  %1099 = and i64 %14, 3455907589340035979
  %1100 = or i64 -3455907589340035980, %14
  %1101 = sub i64 %1100, -3455907589340035980
  %1102 = xor i64 %1098, %1101
  %1103 = xor i64 %1102, 0
  %1104 = xor i64 %1103, %1084
  %1105 = xor i64 %1104, %1099
  %1106 = xor i64 %1105, %1095
  %1107 = xor i64 %1106, %1094
  %1108 = mul i64 %1083, %1107
  %1109 = trunc i64 %1108 to i8
  %1110 = icmp eq i8 %1070, %1109
  %1111 = and i1 %984, %1110
  %1112 = xor i1 %984, %1110
  %1113 = or i1 %1111, %1112
  %1114 = select i1 %1113, i32 388314403, i32 388314413
  %1115 = xor i32 %1114, -1
  %1116 = and i32 %1115, 14
  %1117 = and i32 %1114, -15
  %1118 = or i32 %1116, %1117
  store i32 %1118, i32* %5, align 4
  %1119 = call i8** @bf3107329076723412484(i32* %5)
  %1120 = load i8*, i8** %1119, align 8
  indirectbr i8* %1120, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1121 = load i8*, i8** %11, align 8
  %1122 = load i8, i8* %1121, align 1
  %1123 = mul i8 %1122, %1122
  %1124 = sub i8 0, %1122
  %1125 = sub i8 %1123, %1124
  %1126 = mul i8 %1125, 3
  %1127 = srem i8 %1126, 2
  %1128 = icmp eq i8 %1127, 0
  %1129 = mul i8 %1122, %1122
  %1130 = sub i8 0, %1122
  %1131 = sub i8 %1129, %1130
  %1132 = srem i8 %1131, 2
  %1133 = or i64 %8, 2236757864396901826
  %1134 = and i64 2236757864396901826, %8
  %1135 = xor i64 2236757864396901826, %8
  %1136 = or i64 %1134, %1135
  %1137 = or i64 %14, -2170117728268821953
  %1138 = xor i64 %14, -1
  %1139 = and i64 %1138, -7919946808523236350
  %1140 = and i64 %14, 7919946808523236349
  %1141 = or i64 %1139, %1140
  %1142 = xor i64 8355447495290619453, %1141
  %1143 = xor i64 %14, -1
  %1144 = or i64 2170117728268821952, %1143
  %1145 = xor i64 %1144, -1
  %1146 = and i64 %1145, -1
  %1147 = or i64 %1142, %1146
  %1148 = xor i64 %1136, -7490550400523524465
  %1149 = xor i64 %1148, %1133
  %1150 = xor i64 %1149, %1147
  %1151 = xor i64 %1150, %1137
  %1152 = and i64 %10, 7656827839072753035
  %1153 = xor i64 %10, -1
  %1154 = or i64 -7656827839072753036, %1153
  %1155 = xor i64 %1154, -1
  %1156 = and i64 %1155, -1
  %1157 = or i64 %56, -531882727675732076
  %1158 = xor i64 %56, -1
  %1159 = and i64 -531882727675732076, %1158
  %1160 = add i64 %1159, %56
  %1161 = xor i64 %1160, %1157
  %1162 = xor i64 %1161, 0
  %1163 = xor i64 %1162, %1152
  %1164 = xor i64 %1163, %1156
  %1165 = mul i64 %1151, %1164
  %1166 = trunc i64 %1165 to i8
  %1167 = icmp eq i8 %1132, %1166
  %1168 = and i1 %1128, %1167
  %1169 = select i1 %1168, i32 388314407, i32 388314403
  %1170 = xor i32 %1169, 4
  store i32 %1170, i32* %5, align 4
  %1171 = call i8** @bf3107329076723412484(i32* %5)
  %1172 = load i8*, i8** %1171, align 8
  indirectbr i8* %1172, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %240, %EntryBasicBlockSplit
  %1173 = load i8*, i8** %15, align 8
  %1174 = load i8, i8* %1173, align 1
  %1175 = add i64 %54, 44045921548068382
  %1176 = and i64 44045921548068382, %54
  %1177 = or i64 44045921548068382, %54
  %1178 = add i64 %1176, %1177
  %1179 = and i64 %52, 5059492799604305860
  %1180 = xor i64 %52, -1
  %1181 = or i64 -5059492799604305861, %1180
  %1182 = xor i64 %1181, -1
  %1183 = and i64 %1182, -1
  %1184 = xor i64 %1175, 1932905173281874971
  %1185 = xor i64 %1184, %1179
  %1186 = xor i64 %1185, %1183
  %1187 = xor i64 %1186, %1178
  %1188 = or i64 %110, -1416635415408041891
  %1189 = xor i64 %110, -1
  %1190 = and i64 -1416635415408041891, %1189
  %1191 = add i64 %1190, %110
  %1192 = and i64 %8, -5390526921786407429
  %1193 = xor i64 %8, -1
  %1194 = xor i64 -5390526921786407429, %1193
  %1195 = and i64 %1194, -5390526921786407429
  %1196 = sext i32 %4 to i64
  %1197 = or i64 %1196, 9092626111463499518
  %1198 = xor i64 %1196, -1
  %1199 = and i64 %1198, 8392365575103094090
  %1200 = and i64 %1196, -8392365575103094091
  %1201 = or i64 %1199, %1200
  %1202 = xor i64 745578012980132788, %1201
  %1203 = xor i64 %1196, -1
  %1204 = or i64 -9092626111463499519, %1203
  %1205 = xor i64 %1204, -1
  %1206 = and i64 %1205, -1
  %1207 = or i64 %1202, %1206
  %1208 = xor i64 %1195, %1207
  %1209 = xor i64 %1208, %1192
  %1210 = xor i64 %1209, %1197
  %1211 = xor i64 %1210, 4140493032613352979
  %1212 = xor i64 %1211, %1188
  %1213 = xor i64 %1212, %1191
  %1214 = mul i64 %1187, %1213
  %1215 = trunc i64 %1214 to i8
  %1216 = and i8 %1174, %1215
  %1217 = sext i32 %dispatcher1 to i64
  %1218 = add i64 %1217, -7162528799076837436
  %1219 = add i64 -2076219319959373778, %1217
  %1220 = add i64 %1219, -5086309479117463658
  %1221 = add i64 %52, -8056415103710000145
  %1222 = sub i64 0, %52
  %1223 = sub i64 -8056415103710000145, %1222
  %1224 = and i64 %54, -1936320465206270164
  %1225 = or i64 1936320465206270163, %54
  %1226 = sub i64 %1225, 1936320465206270163
  %1227 = xor i64 %1221, %1224
  %1228 = xor i64 %1227, 7518018926349829477
  %1229 = xor i64 %1228, %1218
  %1230 = xor i64 %1229, %1220
  %1231 = xor i64 %1230, %1226
  %1232 = xor i64 %1231, %1223
  %1233 = add i64 %16, 7672953470823635498
  %1234 = add i64 6422363338342511980, %16
  %1235 = sub i64 %1234, -1250590132481123518
  %1236 = sext i32 %4 to i64
  %1237 = and i64 %1236, -5987695070495687343
  %1238 = xor i64 %1236, -1
  %1239 = or i64 5987695070495687342, %1238
  %1240 = xor i64 %1239, -1
  %1241 = and i64 %1240, -1
  %1242 = xor i64 0, %1235
  %1243 = xor i64 %1242, %1233
  %1244 = xor i64 %1243, %1241
  %1245 = xor i64 %1244, %1237
  %1246 = mul i64 %1232, %1245
  %1247 = trunc i64 %1246 to i8
  %1248 = icmp eq i8 %1216, %1247
  %1249 = mul i8 %1174, %1174
  %1250 = add i8 %1249, %1174
  %1251 = mul i8 %1250, 3
  %1252 = srem i8 %1251, 2
  %1253 = icmp eq i8 %1252, 0
  %1254 = or i1 %1248, %1253
  %1255 = select i1 %1254, i32 388314401, i32 388314406
  %1256 = xor i32 %1255, 7
  store i32 %1256, i32* %5, align 4
  %1257 = call i8** @bf3107329076723412484(i32* %5)
  %1258 = load i8*, i8** %1257, align 8
  indirectbr i8* %1258, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.17(i1 %0, i64* %.out, i64* %.out1, i64* %.out2, i64* %.out3, i64* %.out4, i64* %.out5, i64* %.out6, i64* %.out7) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314406)
  %3 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %2
  store i8* blockaddress(@main_loop.extracted.17, %defaultSwitchBasicBlock), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314407)
  %5 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.17, %BogusBasicBlock), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314401)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %6
  store i8* blockaddress(@main_loop.extracted.17, %codeRepl.exitStub), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314402)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %8
  store i8* blockaddress(@main_loop.extracted.17, %loopEnd), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314405)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %10
  store i8* blockaddress(@main_loop.extracted.17, %loopStart), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314400)
  %13 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %12
  store i8* blockaddress(@main_loop.extracted.17, %EntryBasicBlockSplit), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314404)
  %15 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %14
  store i8* blockaddress(@main_loop.extracted.17, %58), i8** %15, align 8
  %16 = call i64 @h9549842938191327224(i64 388314413)
  %17 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %16
  store i8* blockaddress(@main_loop.extracted.17, %.exitStub), i8** %17, align 8
  %18 = call i64 @h9549842938191327224(i64 388314412)
  %19 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %18
  store i8* blockaddress(@main_loop.extracted.17, %codeRepl), i8** %19, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %20 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %20, align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %21, align 4
  %22 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %22, align 4
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %24, align 4
  %25 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %25, align 4
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %26, align 4
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %27, align 4
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %28, align 4
  %29 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %29, align 4
  %30 = alloca i64, align 8
  %31 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %32 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1382216898532583501, i32 0, i64 %31
  store i8** %32, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314405, i32* %1, align 4
  %33 = call i8** @bf323596751415600656(i32* %1)
  %34 = load i8*, i8** %33, align 8
  indirectbr i8* %34, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %58
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %codeRepl.exitStub
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i64, i64*, i1)* @main_loop.extracted.17.extracted to i8*), i8** %.reload, align 8
  %35 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %38 = load i32, i32* %37, align 4
  %39 = srem i32 %36, %38
  store i32 %39, i32* %dispatcher, align 4
  %40 = load i8*, i8** %3, align 8
  %41 = load i8, i8* %40, align 1
  %42 = mul i8 %41, 2
  %43 = mul i8 %41, 2
  %44 = add i8 2, %43
  %45 = mul i8 %42, %44
  %46 = srem i8 %45, 4
  %47 = icmp eq i8 %46, 0
  %48 = mul i8 %41, %41
  %49 = mul i8 %48, %41
  %50 = add i8 %49, %41
  %51 = srem i8 %50, 2
  %52 = icmp eq i8 %51, 0
  %53 = and i1 %47, %52
  %54 = select i1 %53, i32 388314405, i32 388314402
  %55 = xor i32 %54, 7
  store i32 %55, i32* %1, align 4
  %56 = call i8** @bf323596751415600656(i32* %1)
  %57 = load i8*, i8** %56, align 8
  indirectbr i8* %57, [label %loopEnd, label %EntryBasicBlockSplit]

58:                                               ; preds = %58, %loopStart
  %59 = add i64 74, 85
  store i64 %59, i64* %.out, align 8
  %60 = add i64 111, 34
  store i64 %60, i64* %.out1, align 8
  %61 = add i64 1603193734910729460, -1603193734910729432
  store i64 %61, i64* %.out2, align 8
  %62 = sub i64 87, 40
  store i64 %62, i64* %.out3, align 8
  %63 = sdiv i64 113, 33
  store i64 %63, i64* %.out4, align 8
  %64 = add i64 120, 42
  store i64 %64, i64* %.out5, align 8
  %65 = and i64 %8, 3362976977096958579
  %66 = xor i64 %8, -1
  %67 = or i64 -3362976977096958580, %66
  %68 = xor i64 %67, -1
  %69 = and i64 %68, -1
  %70 = or i64 %8, 1554144227489618526
  %71 = and i64 1554144227489618526, %8
  %72 = xor i64 1554144227489618526, %8
  %73 = or i64 %71, %72
  %74 = and i64 %10, -6317254472195444047
  %75 = or i64 6317254472195444046, %10
  %76 = sub i64 %75, 6317254472195444046
  %77 = xor i64 1382882183879054755, %73
  %78 = xor i64 %77, %76
  %79 = xor i64 %78, %65
  %80 = xor i64 %79, %70
  %81 = xor i64 %80, %69
  %82 = xor i64 %81, %74
  %83 = and i64 %2, 8662183803384520665
  %84 = or i64 -8662183803384520666, %2
  %85 = sub i64 %84, -8662183803384520666
  %86 = sext i32 %dispatcher1 to i64
  %87 = add i64 %86, 1052711929791781961
  %88 = add i64 2342953929616673534, %86
  %89 = add i64 %88, -1290241999824891573
  %90 = add i64 %6, -1623361484742567424
  %91 = xor i64 -1623361484742567424, %6
  %92 = and i64 -1623361484742567424, %6
  %93 = mul i64 2, %92
  %94 = add i64 %91, %93
  %95 = xor i64 %90, %85
  %96 = xor i64 %95, %94
  %97 = xor i64 %96, %87
  %98 = xor i64 %97, %89
  %99 = xor i64 %98, %83
  %100 = xor i64 %99, 3986123672064727788
  %101 = mul i64 %82, %100
  %102 = add i64 %101, 118
  store i64 %102, i64* %.out6, align 8
  %103 = mul i64 97, 61
  store i64 %103, i64* %.reg2mem2, align 8
  %104 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %107 = load i32, i32* %106, align 4
  %108 = sub i32 0, %107
  %109 = sub i32 %105, %108
  store i32 %109, i32* %dispatcher, align 4
  %110 = load i8*, i8** %7, align 8
  %111 = load i8, i8* %110, align 1
  %112 = mul i8 %111, 2
  %113 = add i64 %16, 1939103336386633407
  %114 = add i64 4018451669257691447, %16
  %115 = add i64 %114, -2079348332871058040
  %116 = add i64 %2, -640935129737667340
  %117 = xor i64 -640935129737667340, %2
  %118 = and i64 -640935129737667340, %2
  %119 = mul i64 2, %118
  %120 = add i64 %117, %119
  %121 = add i64 %8, -4605581671219451383
  %122 = sub i64 0, %8
  %123 = sub i64 -4605581671219451383, %122
  %124 = xor i64 %113, %115
  %125 = xor i64 %124, %123
  %126 = xor i64 %125, %116
  %127 = xor i64 %126, -626133950097188761
  %128 = xor i64 %127, %121
  %129 = xor i64 %128, %120
  %130 = add i64 %10, -192262900966082798
  %131 = add i64 -8696957625797493799, %10
  %132 = sub i64 %131, -8504694724831411001
  %133 = and i64 %12, -689037620110130945
  %134 = xor i64 %12, -1
  %135 = xor i64 -689037620110130945, %134
  %136 = and i64 %135, -689037620110130945
  %137 = add i64 %10, -5300316137597640255
  %138 = add i64 8445529157572380882, %10
  %139 = add i64 %138, 4700898778539530479
  %140 = xor i64 %139, %136
  %141 = xor i64 %140, %132
  %142 = xor i64 %141, %130
  %143 = xor i64 %142, %133
  %144 = xor i64 %143, -6997194987218598226
  %145 = xor i64 %144, %137
  %146 = mul i64 %129, %145
  %147 = trunc i64 %146 to i8
  %148 = mul i8 %111, %147
  %149 = add i8 2, %148
  %150 = mul i8 %112, %149
  %151 = srem i8 %150, 4
  %152 = icmp eq i8 %151, 0
  %153 = mul i8 %111, %111
  %154 = add i8 %153, %111
  %155 = srem i8 %154, 2
  %156 = icmp eq i8 %155, 0
  %157 = add i64 %6, 4288961654820735078
  %158 = xor i64 4288961654820735078, %6
  %159 = and i64 4288961654820735078, %6
  %160 = mul i64 2, %159
  %161 = add i64 %158, %160
  %162 = and i64 %4, 1596803817326284850
  %163 = xor i64 %4, -1
  %164 = or i64 -1596803817326284851, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = xor i64 %161, %162
  %168 = xor i64 %167, %166
  %169 = xor i64 %168, -6861779253393966015
  %170 = xor i64 %169, %157
  %171 = and i64 %31, -5099739010260158734
  %172 = xor i64 %31, -1
  %173 = xor i64 -5099739010260158734, %172
  %174 = and i64 %173, -5099739010260158734
  %175 = and i64 %12, 7960919015962655877
  %176 = xor i64 %12, -1
  %177 = or i64 -7960919015962655878, %176
  %178 = xor i64 %177, -1
  %179 = and i64 %178, -1
  %180 = xor i64 -5851525017244052543, %175
  %181 = xor i64 %180, %179
  %182 = xor i64 %181, %171
  %183 = xor i64 %182, %174
  %184 = mul i64 %170, %183
  %185 = trunc i64 %184 to i1
  %186 = xor i1 %156, %185
  %187 = and i1 %152, %186
  %188 = add i1 %187, %156
  %189 = or i64 %12, -3386784549459751219
  %190 = xor i64 %12, -1
  %191 = and i64 %190, -8891910085289865588
  %192 = and i64 %12, 8891910085289865587
  %193 = or i64 %191, %192
  %194 = xor i64 6081600603295711297, %193
  %195 = xor i64 %12, -1
  %196 = or i64 3386784549459751218, %195
  %197 = xor i64 %196, -1
  %198 = and i64 %197, -1
  %199 = or i64 %194, %198
  %200 = and i64 %8, 4893719237393161078
  %201 = xor i64 %8, -1
  %202 = xor i64 4893719237393161078, %201
  %203 = and i64 %202, 4893719237393161078
  %204 = or i64 %12, -8582035120470348685
  %205 = xor i64 %12, -1
  %206 = and i64 %205, 9015259055911403147
  %207 = and i64 %12, -9015259055911403148
  %208 = or i64 %206, %207
  %209 = xor i64 -722019737729969416, %208
  %210 = xor i64 %12, -1
  %211 = or i64 8582035120470348684, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = or i64 %209, %213
  %215 = xor i64 %204, %189
  %216 = xor i64 %215, %203
  %217 = xor i64 %216, %200
  %218 = xor i64 %217, -4889285329040503419
  %219 = xor i64 %218, %199
  %220 = xor i64 %219, %214
  %221 = sext i32 %dispatcher1 to i64
  %222 = and i64 %221, 7455108943280784379
  %223 = xor i64 %221, -1
  %224 = xor i64 7455108943280784379, %223
  %225 = and i64 %224, 7455108943280784379
  %226 = or i64 %6, -6537503357536184709
  %227 = xor i64 %6, -1
  %228 = and i64 -6537503357536184709, %227
  %229 = add i64 %228, %6
  %230 = and i64 %14, -4351583419264427530
  %231 = xor i64 %14, -1
  %232 = or i64 4351583419264427529, %231
  %233 = xor i64 %232, -1
  %234 = and i64 %233, -1
  %235 = xor i64 %226, %225
  %236 = xor i64 %235, %229
  %237 = xor i64 %236, %230
  %238 = xor i64 %237, -6855243700143921196
  %239 = xor i64 %238, %234
  %240 = xor i64 %239, %222
  %241 = mul i64 %220, %240
  %242 = trunc i64 %241 to i32
  %243 = select i1 %188, i32 %242, i32 388314402
  %244 = or i32 %243, 6
  %245 = and i32 %243, 6
  %246 = sub i32 %244, %245
  store i32 %246, i32* %1, align 4
  %247 = call i8** @bf323596751415600656(i32* %1)
  %248 = load i8*, i8** %247, align 8
  indirectbr i8* %248, [label %loopEnd, label %58]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %30, align 8
  %249 = call i8** @lk5435521538028724680(i64* %30)
  %250 = load i8*, i8** %249, align 8
  %251 = bitcast i8* %250 to i1 (i64, i64*, i1)*
  %.reload3 = load i64, i64* %.reg2mem2, align 8
  %targetBlock = call i1 %251(i64 %.reload3, i64* %.out7, i1 %0)
  %252 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  %255 = load i32, i32* %254, align 4
  %256 = sub i32 %253, %255
  %257 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %258 = load i32, i32* %257, align 4
  %259 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %260 = load i32, i32* %259, align 4
  %261 = srem i32 %258, %260
  %262 = select i1 %targetBlock, i32 %256, i32 %261
  store i32 %262, i32* %dispatcher, align 4
  %263 = load i8*, i8** %3, align 8
  %264 = load i8, i8* %263, align 1
  %265 = or i64 %12, 6710877659955949205
  %266 = xor i64 %12, -1
  %267 = and i64 6710877659955949205, %266
  %268 = add i64 %267, %12
  %269 = and i64 %6, 4211962186470004348
  %270 = xor i64 %6, -1
  %271 = xor i64 4211962186470004348, %270
  %272 = and i64 %271, 4211962186470004348
  %273 = xor i64 %265, %269
  %274 = xor i64 %273, %268
  %275 = xor i64 %274, %272
  %276 = xor i64 %275, 1191623695410327143
  %277 = or i64 %2, -7353268910935139672
  %278 = and i64 -7353268910935139672, %2
  %279 = xor i64 -7353268910935139672, %2
  %280 = or i64 %278, %279
  %281 = or i64 %2, 6000021204850908759
  %282 = xor i64 %2, -1
  %283 = and i64 6000021204850908759, %282
  %284 = add i64 %283, %2
  %285 = add i64 %12, 4517979257520539917
  %286 = sub i64 0, %12
  %287 = add i64 -4517979257520539917, %286
  %288 = sub i64 0, %287
  %289 = xor i64 %288, %281
  %290 = xor i64 %289, %285
  %291 = xor i64 %290, %277
  %292 = xor i64 %291, %280
  %293 = xor i64 %292, %284
  %294 = xor i64 %293, -1484812571521279314
  %295 = mul i64 %276, %294
  %296 = trunc i64 %295 to i8
  %297 = mul i8 %264, %296
  %298 = mul i8 %264, 2
  %299 = add i8 65, %298
  %300 = add i8 %299, -63
  %301 = mul i8 %297, %300
  %302 = srem i8 %301, 4
  %303 = icmp eq i8 %302, 0
  %304 = mul i8 %264, %264
  %305 = mul i8 %304, %264
  %306 = and i8 %305, %264
  %307 = or i8 %305, %264
  %308 = add i8 %306, %307
  %309 = srem i8 %308, 2
  %310 = icmp eq i8 %309, 0
  %311 = and i1 %303, %310
  %312 = select i1 %311, i32 388314402, i32 388314402
  %313 = xor i32 %312, -1
  %314 = and i32 %313, 0
  %315 = or i64 %14, 3233643094237348134
  %316 = and i64 3233643094237348134, %14
  %317 = xor i64 3233643094237348134, %14
  %318 = or i64 %316, %317
  %319 = add i64 %10, 5573352677790409468
  %320 = sub i64 0, %10
  %321 = sub i64 5573352677790409468, %320
  %322 = xor i64 -7467652688575845553, %318
  %323 = xor i64 %322, %321
  %324 = xor i64 %323, %315
  %325 = xor i64 %324, %319
  %326 = add i64 %2, 4491074993278939115
  %327 = and i64 4491074993278939115, %2
  %328 = or i64 4491074993278939115, %2
  %329 = add i64 %327, %328
  %330 = and i64 %6, 2969440370890385947
  %331 = xor i64 %6, -1
  %332 = or i64 -2969440370890385948, %331
  %333 = xor i64 %332, -1
  %334 = and i64 %333, -1
  %335 = xor i64 %334, %330
  %336 = xor i64 %335, %329
  %337 = xor i64 %336, %326
  %338 = xor i64 %337, 856678876101211217
  %339 = mul i64 %325, %338
  %340 = trunc i64 %339 to i32
  %341 = and i32 %312, %340
  %342 = or i32 %314, %341
  store i32 %342, i32* %1, align 4
  %343 = call i8** @bf323596751415600656(i32* %1)
  %344 = load i8*, i8** %343, align 8
  indirectbr i8* %344, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

codeRepl.exitStub:                                ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %345 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %345, align 4
  %346 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %346, align 4
  %347 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %347, align 4
  %348 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %349 = and i64 %12, -6407720493520885050
  %350 = or i64 6407720493520885049, %12
  %351 = sub i64 %350, 6407720493520885049
  %352 = and i64 %10, 4392981796242006982
  %353 = xor i64 %10, -1
  %354 = or i64 -4392981796242006983, %353
  %355 = xor i64 %354, -1
  %356 = and i64 %355, -1
  %357 = add i64 %8, -1699343677372581206
  %358 = sub i64 0, %8
  %359 = add i64 1699343677372581206, %358
  %360 = sub i64 0, %359
  %361 = xor i64 %352, %349
  %362 = xor i64 %361, %357
  %363 = xor i64 %362, %351
  %364 = xor i64 %363, 2033919870011588633
  %365 = xor i64 %364, %356
  %366 = xor i64 %365, %360
  %367 = add i64 %8, -1886750338131869283
  %368 = sub i64 0, %8
  %369 = add i64 1886750338131869283, %368
  %370 = sub i64 0, %369
  %371 = and i64 %6, -5300492797610376822
  %372 = xor i64 %6, -1
  %373 = or i64 5300492797610376821, %372
  %374 = xor i64 %373, -1
  %375 = and i64 %374, -1
  %376 = or i64 %2, 2198482107492161590
  %377 = xor i64 %2, -1
  %378 = and i64 2198482107492161590, %377
  %379 = add i64 %378, %2
  %380 = xor i64 %370, %375
  %381 = xor i64 %380, %371
  %382 = xor i64 %381, %376
  %383 = xor i64 %382, %367
  %384 = xor i64 %383, %379
  %385 = xor i64 %384, 3127133348044573901
  %386 = mul i64 %366, %385
  %387 = trunc i64 %386 to i32
  store i32 %387, i32* %348, align 4
  %388 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %388, align 4
  %389 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %390 = load i32, i32* %389, align 4
  store i32 %390, i32* %dispatcher, align 4
  %391 = load i8*, i8** %19, align 8
  %392 = load i8, i8* %391, align 1
  %393 = and i8 %392, 1
  %394 = icmp eq i8 %393, 1
  %395 = mul i8 %392, %392
  %396 = add i8 %395, %392
  %397 = srem i8 %396, 2
  %398 = icmp eq i8 %397, 0
  %399 = or i1 %394, %398
  %400 = add i64 %31, 7963255326220303637
  %401 = and i64 7963255326220303637, %31
  %402 = or i64 7963255326220303637, %31
  %403 = add i64 %401, %402
  %404 = add i64 %12, -6034637466992608266
  %405 = add i64 -4421274272072145008, %12
  %406 = sub i64 %405, 1613363194920463258
  %407 = sext i32 %dispatcher1 to i64
  %408 = or i64 %407, -8512578715625078030
  %409 = and i64 -8512578715625078030, %407
  %410 = xor i64 -8512578715625078030, %407
  %411 = or i64 %409, %410
  %412 = xor i64 %406, 7394935444148906499
  %413 = xor i64 %412, %404
  %414 = xor i64 %413, %400
  %415 = xor i64 %414, %408
  %416 = xor i64 %415, %403
  %417 = xor i64 %416, %411
  %418 = or i64 %4, -6485040260571253598
  %419 = and i64 -6485040260571253598, %4
  %420 = xor i64 -6485040260571253598, %4
  %421 = or i64 %419, %420
  %422 = or i64 %8, -8102554569467989967
  %423 = xor i64 %8, -1
  %424 = and i64 %423, -8410083624624978404
  %425 = and i64 %8, 8410083624624978403
  %426 = or i64 %424, %425
  %427 = xor i64 343557853459674669, %426
  %428 = xor i64 %8, -1
  %429 = or i64 8102554569467989966, %428
  %430 = xor i64 %429, -1
  %431 = and i64 %430, -1
  %432 = or i64 %427, %431
  %433 = xor i64 %421, %432
  %434 = xor i64 %433, %418
  %435 = xor i64 %434, %422
  %436 = xor i64 %435, 775216720461328653
  %437 = mul i64 %417, %436
  %438 = trunc i64 %437 to i32
  %439 = select i1 %399, i32 %438, i32 388314400
  %440 = xor i32 %439, 7
  store i32 %440, i32* %1, align 4
  %441 = call i8** @bf323596751415600656(i32* %1)
  %442 = load i8*, i8** %441, align 8
  indirectbr i8* %442, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %443 = load i8*, i8** %9, align 8
  %444 = load i8, i8* %443, align 1
  %445 = mul i8 %444, 2
  %446 = mul i8 %444, 2
  %447 = add i8 2, %446
  %448 = mul i8 %445, %447
  %449 = srem i8 %448, 4
  %450 = icmp eq i8 %449, 0
  %451 = mul i8 %444, %444
  %452 = sub i8 0, %451
  %453 = sub i8 0, %444
  %454 = add i8 %452, %453
  %455 = or i64 %2, -2790566372006836834
  %456 = xor i64 %2, -1
  %457 = and i64 -2790566372006836834, %456
  %458 = add i64 %457, %2
  %459 = and i64 %12, -5700385674712754651
  %460 = xor i64 %12, -1
  %461 = or i64 5700385674712754650, %460
  %462 = xor i64 %461, -1
  %463 = and i64 %462, -1
  %464 = xor i64 %459, %455
  %465 = xor i64 %464, %463
  %466 = xor i64 %465, %458
  %467 = xor i64 %466, 5621958700399037945
  %468 = and i64 %6, -7852691499018076502
  %469 = xor i64 %6, -1
  %470 = xor i64 -7852691499018076502, %469
  %471 = and i64 %470, -7852691499018076502
  %472 = add i64 %12, -121229179812879944
  %473 = xor i64 -121229179812879944, %12
  %474 = and i64 -121229179812879944, %12
  %475 = mul i64 2, %474
  %476 = add i64 %473, %475
  %477 = add i64 %6, 5294538071982233449
  %478 = add i64 7925833804788385836, %6
  %479 = add i64 %478, -2631295732806152387
  %480 = xor i64 %471, %476
  %481 = xor i64 %480, %477
  %482 = xor i64 %481, 0
  %483 = xor i64 %482, %468
  %484 = xor i64 %483, %479
  %485 = xor i64 %484, %472
  %486 = mul i64 %467, %485
  %487 = trunc i64 %486 to i8
  %488 = sub i8 %487, %454
  %489 = srem i8 %488, 2
  %490 = icmp eq i8 %489, 0
  %491 = and i1 %450, %490
  %492 = select i1 %491, i32 388314407, i32 388314402
  %493 = xor i32 %492, -1
  %494 = and i32 %493, 5
  %495 = and i32 %492, -6
  %496 = or i32 %494, %495
  store i32 %496, i32* %1, align 4
  %497 = call i8** @bf323596751415600656(i32* %1)
  %498 = load i8*, i8** %497, align 8
  indirectbr i8* %498, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %58, %EntryBasicBlockSplit
  %499 = load i8*, i8** %15, align 8
  %500 = load i8, i8* %499, align 1
  %501 = mul i8 %500, 2
  %502 = mul i8 %500, 2
  %503 = add i64 %10, -4645541289571782221
  %504 = sub i64 0, %10
  %505 = add i64 4645541289571782221, %504
  %506 = sub i64 0, %505
  %507 = sext i32 %dispatcher1 to i64
  %508 = and i64 %507, 1376493789155495746
  %509 = xor i64 %507, -1
  %510 = or i64 -1376493789155495747, %509
  %511 = xor i64 %510, -1
  %512 = and i64 %511, -1
  %513 = xor i64 %506, -810113442300282829
  %514 = xor i64 %513, %512
  %515 = xor i64 %514, %508
  %516 = xor i64 %515, %503
  %517 = or i64 %12, -8988974413858453168
  %518 = xor i64 %12, -1
  %519 = and i64 %518, -7824292791495849599
  %520 = and i64 %12, 7824292791495849598
  %521 = or i64 %519, %520
  %522 = xor i64 1164805354154475729, %521
  %523 = xor i64 %12, -1
  %524 = or i64 8988974413858453167, %523
  %525 = xor i64 %524, -1
  %526 = and i64 %525, -1
  %527 = or i64 %522, %526
  %528 = and i64 %18, 8567962716899773249
  %529 = xor i64 %18, -1
  %530 = xor i64 8567962716899773249, %529
  %531 = and i64 %530, 8567962716899773249
  %532 = sext i32 %dispatcher1 to i64
  %533 = add i64 %532, 7301292906247971232
  %534 = and i64 7301292906247971232, %532
  %535 = or i64 7301292906247971232, %532
  %536 = add i64 %534, %535
  %537 = xor i64 %531, %517
  %538 = xor i64 %537, -3599799200667990538
  %539 = xor i64 %538, %533
  %540 = xor i64 %539, %527
  %541 = xor i64 %540, %528
  %542 = xor i64 %541, %536
  %543 = mul i64 %516, %542
  %544 = trunc i64 %543 to i8
  %545 = add i8 %544, %502
  %546 = mul i8 %501, %545
  %547 = srem i8 %546, 4
  %548 = icmp eq i8 %547, 0
  %549 = mul i8 %500, %500
  %550 = mul i8 %549, %500
  %551 = sub i8 0, %550
  %552 = sub i8 0, %500
  %553 = add i8 %551, %552
  %554 = or i64 %16, -1041025823558447311
  %555 = and i64 -1041025823558447311, %16
  %556 = xor i64 -1041025823558447311, %16
  %557 = or i64 %555, %556
  %558 = sext i32 %dispatcher1 to i64
  %559 = or i64 %558, 9073125441381486047
  %560 = xor i64 %558, -1
  %561 = and i64 %560, 8164914120622097581
  %562 = and i64 %558, -8164914120622097582
  %563 = or i64 %561, %562
  %564 = xor i64 911325429923187058, %563
  %565 = xor i64 %558, -1
  %566 = or i64 -9073125441381486048, %565
  %567 = xor i64 %566, -1
  %568 = and i64 %567, -1
  %569 = or i64 %564, %568
  %570 = add i64 %31, 8748665942934213280
  %571 = sub i64 0, %31
  %572 = sub i64 8748665942934213280, %571
  %573 = xor i64 %557, %554
  %574 = xor i64 %573, %559
  %575 = xor i64 %574, -110532000669587789
  %576 = xor i64 %575, %570
  %577 = xor i64 %576, %572
  %578 = xor i64 %577, %569
  %579 = add i64 %4, 3101763982027333245
  %580 = and i64 3101763982027333245, %4
  %581 = or i64 3101763982027333245, %4
  %582 = add i64 %580, %581
  %583 = or i64 %8, 6483265206831504762
  %584 = and i64 6483265206831504762, %8
  %585 = xor i64 6483265206831504762, %8
  %586 = or i64 %584, %585
  %587 = and i64 %18, -7900908384882996167
  %588 = or i64 7900908384882996166, %18
  %589 = sub i64 %588, 7900908384882996166
  %590 = xor i64 %579, %586
  %591 = xor i64 %590, %587
  %592 = xor i64 %591, %583
  %593 = xor i64 %592, 0
  %594 = xor i64 %593, %582
  %595 = xor i64 %594, %589
  %596 = mul i64 %578, %595
  %597 = trunc i64 %596 to i8
  %598 = sub i8 %597, %553
  %599 = srem i8 %598, 2
  %600 = icmp eq i8 %599, 0
  %601 = and i1 %548, %600
  %602 = or i64 %10, 3460187741017664936
  %603 = and i64 3460187741017664936, %10
  %604 = xor i64 3460187741017664936, %10
  %605 = or i64 %603, %604
  %606 = add i64 %4, -4384010963693838522
  %607 = add i64 5085319359918548689, %4
  %608 = add i64 %607, 8977413750097164405
  %609 = and i64 %31, -663843713290784315
  %610 = xor i64 %31, -1
  %611 = or i64 663843713290784314, %610
  %612 = xor i64 %611, -1
  %613 = and i64 %612, -1
  %614 = xor i64 %602, %605
  %615 = xor i64 %614, %609
  %616 = xor i64 %615, %608
  %617 = xor i64 %616, 715013866879627881
  %618 = xor i64 %617, %606
  %619 = xor i64 %618, %613
  %620 = and i64 %16, -9183603589465659331
  %621 = or i64 9183603589465659330, %16
  %622 = sub i64 %621, 9183603589465659330
  %623 = and i64 %14, 5073410958758609628
  %624 = xor i64 %14, -1
  %625 = or i64 -5073410958758609629, %624
  %626 = xor i64 %625, -1
  %627 = and i64 %626, -1
  %628 = add i64 %10, 2623888335775992056
  %629 = xor i64 2623888335775992056, %10
  %630 = and i64 2623888335775992056, %10
  %631 = mul i64 2, %630
  %632 = add i64 %629, %631
  %633 = xor i64 %627, %622
  %634 = xor i64 %633, %623
  %635 = xor i64 %634, %632
  %636 = xor i64 %635, -3817285404401558179
  %637 = xor i64 %636, %620
  %638 = xor i64 %637, %628
  %639 = mul i64 %619, %638
  %640 = trunc i64 %639 to i32
  %641 = select i1 %601, i32 388314406, i32 %640
  %642 = xor i32 %641, 3
  store i32 %642, i32* %1, align 4
  %643 = call i8** @bf323596751415600656(i32* %1)
  %644 = load i8*, i8** %643, align 8
  indirectbr i8* %644, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.18(i32 %0, i32 %.reload, i1 %1, i32* %.out, i32* %.out1, i32* %.out2, i1* %.out3, i1* %.out4) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314400)
  %4 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable907254217448068036, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.18, %.exitStub), i8** %4, align 8
  %5 = sext i32 %0 to i64
  %6 = add i64 %5, -2974840327710497569
  %7 = sub i64 0, %5
  %8 = add i64 2974840327710497569, %7
  %9 = sub i64 0, %8
  %10 = sext i32 %.reload to i64
  %11 = add i64 %10, -7306030074682377373
  %12 = add i64 401241399413603569, %10
  %13 = sub i64 %12, 7707271474095980942
  %14 = sext i32 %.reload to i64
  %15 = and i64 %14, -4973570058903902848
  %16 = xor i64 %14, -1
  %17 = xor i64 -4973570058903902848, %16
  %18 = and i64 %17, -4973570058903902848
  %19 = xor i64 3934001522423956913, %13
  %20 = xor i64 %19, %18
  %21 = xor i64 %20, %15
  %22 = xor i64 %21, %11
  %23 = xor i64 %22, %6
  %24 = xor i64 %23, %9
  %25 = sext i32 %.reload to i64
  %26 = and i64 %25, 5118330027228303453
  %27 = xor i64 %25, -1
  %28 = or i64 -5118330027228303454, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = sext i32 %.reload to i64
  %32 = and i64 %31, -8778566437892287520
  %33 = xor i64 %31, -1
  %34 = xor i64 -8778566437892287520, %33
  %35 = and i64 %34, -8778566437892287520
  %36 = sext i32 %0 to i64
  %37 = add i64 %36, -5379807200069015849
  %38 = sub i64 0, %36
  %39 = add i64 5379807200069015849, %38
  %40 = sub i64 0, %39
  %41 = xor i64 %37, %26
  %42 = xor i64 %41, %35
  %43 = xor i64 %42, %40
  %44 = xor i64 %43, %30
  %45 = xor i64 %44, -4419312151945954204
  %46 = xor i64 %45, %32
  %47 = mul i64 %24, %46
  %48 = call i64 @h9549842938191327224(i64 %47)
  %49 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable907254217448068036, i32 0, i64 %48
  store i8* blockaddress(@main_loop.extracted.18, %codeRepl), i8** %49, align 8
  %50 = call i64 @h9549842938191327224(i64 388314406)
  %51 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable907254217448068036, i32 0, i64 %50
  store i8* blockaddress(@main_loop.extracted.18, %"2"), i8** %51, align 8
  %52 = call i64 @h9549842938191327224(i64 388314405)
  %53 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable907254217448068036, i32 0, i64 %52
  store i8* blockaddress(@main_loop.extracted.18, %EntryBasicBlockSplit), i8** %53, align 8
  %54 = call i64 @h9549842938191327224(i64 388314407)
  %55 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable907254217448068036, i32 0, i64 %54
  store i8* blockaddress(@main_loop.extracted.18, %BogusBasciBlock), i8** %55, align 8
  %.reg2mem15 = alloca i32, align 4
  %56 = sext i32 %0 to i64
  %57 = add i64 %56, 3253269059333444260
  %58 = xor i64 3253269059333444260, %56
  %59 = and i64 3253269059333444260, %56
  %60 = mul i64 2, %59
  %61 = add i64 %58, %60
  %62 = sext i32 %.reload to i64
  %63 = and i64 %62, 182248811598469924
  %64 = xor i64 %62, -1
  %65 = or i64 -182248811598469925, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = sext i32 %0 to i64
  %69 = add i64 %68, 4107660114875274717
  %70 = add i64 8197118413315727900, %68
  %71 = sub i64 %70, 4089458298440453183
  %72 = xor i64 %63, %61
  %73 = xor i64 %72, %71
  %74 = xor i64 %73, %67
  %75 = xor i64 %74, %69
  %76 = xor i64 %75, %57
  %77 = xor i64 %76, -5641748183867977199
  %78 = sext i32 %.reload to i64
  %79 = add i64 %78, 6546324285113081450
  %80 = and i64 6546324285113081450, %78
  %81 = or i64 6546324285113081450, %78
  %82 = add i64 %80, %81
  %83 = sext i32 %.reload to i64
  %84 = or i64 %83, 2995732394239082939
  %85 = and i64 2995732394239082939, %83
  %86 = xor i64 2995732394239082939, %83
  %87 = or i64 %85, %86
  %88 = sext i32 %.reload to i64
  %89 = and i64 %88, -7294893013142632639
  %90 = xor i64 %88, -1
  %91 = xor i64 -7294893013142632639, %90
  %92 = and i64 %91, -7294893013142632639
  %93 = xor i64 %82, 4163955805351649009
  %94 = xor i64 %93, %92
  %95 = xor i64 %94, %89
  %96 = xor i64 %95, %79
  %97 = xor i64 %96, %84
  %98 = xor i64 %97, %87
  %99 = mul i64 %77, %98
  %100 = trunc i64 %99 to i32
  %.reg2mem13 = alloca i8**, i32 %100, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %101 = sext i32 %.reload to i64
  %102 = and i64 %101, -1815743300148831687
  %103 = xor i64 %101, -1
  %104 = xor i64 -1815743300148831687, %103
  %105 = and i64 %104, -1815743300148831687
  %106 = sext i32 %0 to i64
  %107 = and i64 %106, 4155221936372657691
  %108 = xor i64 %106, -1
  %109 = xor i64 4155221936372657691, %108
  %110 = and i64 %109, 4155221936372657691
  %111 = sext i32 %.reload to i64
  %112 = add i64 %111, -8959123239943284952
  %113 = add i64 -7122683203802028112, %111
  %114 = add i64 %113, -1836440036141256840
  %115 = xor i64 %105, %112
  %116 = xor i64 %115, %110
  %117 = xor i64 %116, %102
  %118 = xor i64 %117, -4704946523253824341
  %119 = xor i64 %118, %107
  %120 = xor i64 %119, %114
  %121 = sext i32 %.reload to i64
  %122 = and i64 %121, -2076450157055911097
  %123 = xor i64 %121, -1
  %124 = xor i64 -2076450157055911097, %123
  %125 = and i64 %124, -2076450157055911097
  %126 = sext i32 %.reload to i64
  %127 = add i64 %126, -1755763925263940559
  %128 = sub i64 0, %126
  %129 = sub i64 -1755763925263940559, %128
  %130 = sext i32 %.reload to i64
  %131 = or i64 %130, -3404431203997568918
  %132 = xor i64 %130, -1
  %133 = and i64 %132, -5922763675439013298
  %134 = and i64 %130, 5922763675439013297
  %135 = or i64 %133, %134
  %136 = xor i64 9011450010778653220, %135
  %137 = xor i64 %130, -1
  %138 = or i64 3404431203997568917, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = or i64 %136, %140
  %142 = xor i64 %122, %141
  %143 = xor i64 %142, %125
  %144 = xor i64 %143, %131
  %145 = xor i64 %144, %129
  %146 = xor i64 %145, 4462430971946579459
  %147 = xor i64 %146, %127
  %148 = mul i64 %120, %147
  %149 = trunc i64 %148 to i32
  %.reg2mem4 = alloca i8**, i32 %149, align 8
  %150 = sext i32 %0 to i64
  %151 = and i64 %150, -207233049354357631
  %152 = xor i64 %150, -1
  %153 = xor i64 -207233049354357631, %152
  %154 = and i64 %153, -207233049354357631
  %155 = sext i32 %0 to i64
  %156 = add i64 %155, -3221974360335961060
  %157 = add i64 -615524958939347069, %155
  %158 = add i64 %157, -2606449401396613991
  %159 = sext i32 %0 to i64
  %160 = add i64 %159, -2696945982312817476
  %161 = sub i64 0, %159
  %162 = add i64 2696945982312817476, %161
  %163 = sub i64 0, %162
  %164 = xor i64 %154, %158
  %165 = xor i64 %164, %160
  %166 = xor i64 %165, %156
  %167 = xor i64 %166, %151
  %168 = xor i64 %167, %163
  %169 = xor i64 %168, -2353832876295480033
  %170 = sext i32 %.reload to i64
  %171 = or i64 %170, -6045517982826720044
  %172 = and i64 -6045517982826720044, %170
  %173 = xor i64 -6045517982826720044, %170
  %174 = or i64 %172, %173
  %175 = sext i32 %0 to i64
  %176 = add i64 %175, 965904512523970862
  %177 = and i64 965904512523970862, %175
  %178 = or i64 965904512523970862, %175
  %179 = add i64 %177, %178
  %180 = xor i64 %174, %171
  %181 = xor i64 %180, %176
  %182 = xor i64 %181, 4423525931750891231
  %183 = xor i64 %182, %179
  %184 = mul i64 %169, %183
  %185 = trunc i64 %184 to i32
  %.reg2mem = alloca i8**, i32 %185, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %186 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18, %BogusBasciBlock), i8** %186, align 8
  %187 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %187, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.18, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %188 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %188, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@main_loop.extracted.18, %"2"), i8** %.reload6, align 8
  %189 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %189, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@main_loop.extracted.18, %codeRepl), i8** %.reload9, align 8
  %190 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %190, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@main_loop.extracted.18, %.exitStub), i8** %.reload12, align 8
  %191 = alloca i64, align 8
  %192 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %193 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable15833730315419083368, i32 0, i64 %192
  store i8** %193, i8*** %.reg2mem13, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %194 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %194, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %195 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18, %"2"), i8** %195, align 8
  %196 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.18, %.exitStub), i8** %196, align 8
  %197 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.18, %BogusBasciBlock), i8** %197, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %198 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %198, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  store i8* bitcast (void (i32, i32*, i32*, i32*, i1*, i1, i1*)* @main_loop.extracted.18.extracted to i8*), i8** %.reload14, align 8
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %199 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %199, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %200 = add i32 %0, %.reload
  store i32 %200, i32* %.reg2mem15, align 4
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %201 = load i8*, i8** %.reload8, align 8
  indirectbr i8* %201, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %191, align 8
  %202 = call i8** @lk15850847998754508100(i64* %191)
  %203 = load i8*, i8** %202, align 8
  %204 = bitcast i8* %203 to void (i32, i32*, i32*, i32*, i1*, i1, i1*)*
  %.reload16 = load i32, i32* %.reg2mem15, align 4
  call void %204(i32 %.reload16, i32* %.out, i32* %.out1, i32* %.out2, i1* %.out3, i1 %1, i1* %.out4)
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %205 = load i8*, i8** %.reload11, align 8
  indirectbr i8* %205, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop..split(i1 %0) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314535)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@main_loop..split, %loopEnd), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314464)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@main_loop..split, %BogusBasicBlock), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314380)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@main_loop..split, %.exitStub1), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314435)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@main_loop..split, %.exitStub), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314550)
  %11 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %10
  store i8* blockaddress(@main_loop..split, %.split), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314441)
  %13 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %12
  store i8* blockaddress(@main_loop..split, %defaultSwitchBasicBlock), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314439)
  %15 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %14
  store i8* blockaddress(@main_loop..split, %EntryBasicBlockSplit), i8** %15, align 8
  %16 = call i64 @h9549842938191327224(i64 388314368)
  %17 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %16
  store i8* blockaddress(@main_loop..split, %loopStart), i8** %17, align 8
  %lookupTable = alloca [9 x i32], align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %26, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314368, i32* %1, align 4
  %27 = call i8** @bf3325468485390379012(i32* %1)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 %30, %32
  store i32 %33, i32* %dispatcher, align 4
  %34 = load i8*, i8** %15, align 8
  %35 = load i8, i8* %34, align 1
  %36 = mul i8 %35, %35
  %37 = sub i8 0, %36
  %38 = sub i8 0, %35
  %39 = add i8 %37, %38
  %40 = sub i8 0, %39
  %41 = mul i8 %40, 3
  %42 = and i64 %16, -4698424822760030348
  %43 = or i64 4698424822760030347, %16
  %44 = sub i64 %43, 4698424822760030347
  %45 = and i64 %4, 5999335922790682338
  %46 = xor i64 %4, -1
  %47 = xor i64 5999335922790682338, %46
  %48 = and i64 %47, 5999335922790682338
  %49 = add i64 %12, -4905589681270355550
  %50 = sub i64 0, %12
  %51 = sub i64 -4905589681270355550, %50
  %52 = xor i64 7554576001920665859, %45
  %53 = xor i64 %52, %42
  %54 = xor i64 %53, %44
  %55 = xor i64 %54, %48
  %56 = xor i64 %55, %51
  %57 = xor i64 %56, %49
  %58 = and i64 %4, -4355599904560030940
  %59 = xor i64 %4, -1
  %60 = or i64 4355599904560030939, %59
  %61 = xor i64 %60, -1
  %62 = and i64 %61, -1
  %63 = and i64 %12, -6799610009365234035
  %64 = or i64 6799610009365234034, %12
  %65 = sub i64 %64, 6799610009365234034
  %66 = add i64 %8, -8081093956087448822
  %67 = sub i64 0, %8
  %68 = sub i64 -8081093956087448822, %67
  %69 = xor i64 %66, %58
  %70 = xor i64 %69, %68
  %71 = xor i64 %70, %62
  %72 = xor i64 %71, %63
  %73 = xor i64 %72, -3036385166696950954
  %74 = xor i64 %73, %65
  %75 = mul i64 %57, %74
  %76 = trunc i64 %75 to i8
  %77 = srem i8 %41, %76
  %78 = icmp eq i8 %77, 0
  %79 = mul i8 %35, %35
  %80 = xor i8 %79, %35
  %81 = and i8 %79, %35
  %82 = mul i8 2, %81
  %83 = add i8 %80, %82
  %84 = srem i8 %83, 2
  %85 = icmp eq i8 %84, 0
  %86 = xor i1 %85, true
  %87 = xor i1 %78, %86
  %88 = and i1 %87, %78
  %89 = select i1 %88, i32 388314441, i32 388314535
  %90 = xor i32 %89, 238
  store i32 %90, i32* %1, align 4
  %91 = call i8** @bf3325468485390379012(i32* %1)
  %92 = load i8*, i8** %91, align 8
  indirectbr i8* %92, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %93 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %96 = load i32, i32* %95, align 4
  %97 = sub i32 0, %96
  %98 = sub i32 %94, %97
  %99 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %102 = load i32, i32* %101, align 4
  %103 = srem i32 %100, %102
  %104 = select i1 %0, i32 %98, i32 %103
  store i32 %104, i32* %dispatcher, align 4
  %105 = load i8*, i8** %15, align 8
  %106 = load i8, i8* %105, align 1
  %107 = and i64 %8, -4005706734507985857
  %108 = or i64 4005706734507985856, %8
  %109 = sub i64 %108, 4005706734507985856
  %110 = and i64 %6, -9160429014678770873
  %111 = or i64 9160429014678770872, %6
  %112 = sub i64 %111, 9160429014678770872
  %113 = xor i64 %107, 2258209160272783555
  %114 = xor i64 %113, %112
  %115 = xor i64 %114, %110
  %116 = xor i64 %115, %109
  %117 = add i64 %14, -4048412226209354509
  %118 = sub i64 0, %14
  %119 = sub i64 -4048412226209354509, %118
  %120 = sext i32 %dispatcher1 to i64
  %121 = or i64 %120, -8252084707751310905
  %122 = xor i64 %120, -1
  %123 = and i64 %122, 3597523014141100033
  %124 = and i64 %120, -3597523014141100034
  %125 = or i64 %123, %124
  %126 = xor i64 -4857610825195550266, %125
  %127 = xor i64 %120, -1
  %128 = or i64 8252084707751310904, %127
  %129 = xor i64 %128, -1
  %130 = and i64 %129, -1
  %131 = or i64 %126, %130
  %132 = add i64 %8, -642371481705584019
  %133 = add i64 511177440353942589, %8
  %134 = sub i64 %133, 1153548922059526608
  %135 = xor i64 -1131353013991094293, %119
  %136 = xor i64 %135, %132
  %137 = xor i64 %136, %117
  %138 = xor i64 %137, %134
  %139 = xor i64 %138, %121
  %140 = xor i64 %139, %131
  %141 = mul i64 %116, %140
  %142 = trunc i64 %141 to i8
  %143 = and i8 %106, %142
  %144 = icmp eq i8 %143, 0
  %145 = mul i8 %106, %106
  %146 = xor i8 %145, %106
  %147 = and i8 %145, %106
  %148 = mul i8 2, %147
  %149 = add i8 %146, %148
  %150 = mul i8 %149, 3
  %151 = srem i8 %150, 2
  %152 = icmp eq i8 %151, 0
  %153 = or i1 %144, %152
  %154 = sext i32 %dispatcher1 to i64
  %155 = and i64 %154, -774699699177813373
  %156 = or i64 774699699177813372, %154
  %157 = sub i64 %156, 774699699177813372
  %158 = and i64 %16, -3395408802393687214
  %159 = xor i64 %16, -1
  %160 = or i64 3395408802393687213, %159
  %161 = xor i64 %160, -1
  %162 = and i64 %161, -1
  %163 = or i64 %10, 5677732574469154653
  %164 = xor i64 %10, -1
  %165 = and i64 5677732574469154653, %164
  %166 = add i64 %165, %10
  %167 = xor i64 %163, -6972721362900560919
  %168 = xor i64 %167, %155
  %169 = xor i64 %168, %166
  %170 = xor i64 %169, %158
  %171 = xor i64 %170, %162
  %172 = xor i64 %171, %157
  %173 = add i64 %4, 2207762413890820211
  %174 = sub i64 0, %4
  %175 = add i64 -2207762413890820211, %174
  %176 = sub i64 0, %175
  %177 = and i64 %16, 5958621867575234340
  %178 = xor i64 %16, -1
  %179 = xor i64 5958621867575234340, %178
  %180 = and i64 %179, 5958621867575234340
  %181 = and i64 %14, -9067523137299495599
  %182 = or i64 9067523137299495598, %14
  %183 = sub i64 %182, 9067523137299495598
  %184 = xor i64 %173, %177
  %185 = xor i64 %184, %181
  %186 = xor i64 %185, %180
  %187 = xor i64 %186, %176
  %188 = xor i64 %187, -466556938274827505
  %189 = xor i64 %188, %183
  %190 = mul i64 %172, %189
  %191 = trunc i64 %190 to i32
  %192 = select i1 %153, i32 388314368, i32 %191
  %193 = xor i32 %192, 167
  store i32 %193, i32* %1, align 4
  %194 = call i8** @bf3325468485390379012(i32* %1)
  %195 = load i8*, i8** %194, align 8
  indirectbr i8* %195, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %196 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %196, align 4
  %197 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %197, align 4
  %198 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %198, align 4
  %199 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %199, align 4
  %200 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %200, align 4
  %201 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %dispatcher, align 4
  %203 = load i8*, i8** %11, align 8
  %204 = load i8, i8* %203, align 1
  %205 = mul i8 %204, %204
  %206 = add i8 %205, %204
  %207 = mul i8 %206, 3
  %208 = srem i8 %207, 2
  %209 = icmp eq i8 %208, 0
  %210 = mul i8 %204, %204
  %211 = add i8 %210, %204
  %212 = srem i8 %211, 2
  %213 = icmp eq i8 %212, 0
  %214 = and i1 %209, %213
  %215 = select i1 %214, i32 388314380, i32 388314439
  %216 = xor i32 %215, 75
  store i32 %216, i32* %1, align 4
  %217 = call i8** @bf3325468485390379012(i32* %1)
  %218 = load i8*, i8** %217, align 8
  indirectbr i8* %218, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %219 = load i8*, i8** %9, align 8
  %220 = load i8, i8* %219, align 1
  %221 = xor i8 %220, -1
  %222 = or i8 %221, 1
  %223 = xor i8 %220, -1
  %224 = sub i8 %222, %223
  %225 = icmp eq i8 %224, 0
  %226 = mul i8 %220, %220
  %227 = sub i8 0, %220
  %228 = sub i8 %226, %227
  %229 = mul i8 %228, 3
  %230 = srem i8 %229, 2
  %231 = icmp eq i8 %230, 0
  %232 = or i1 %225, %231
  %233 = select i1 %232, i32 388314435, i32 388314535
  %234 = sext i32 %dispatcher1 to i64
  %235 = and i64 %234, 5352776019427449037
  %236 = xor i64 %234, -1
  %237 = or i64 -5352776019427449038, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = add i64 %4, -8363738137884808513
  %241 = add i64 -1458731006996603675, %4
  %242 = add i64 %241, -6905007130888204838
  %243 = add i64 %14, 6228805746344295051
  %244 = and i64 6228805746344295051, %14
  %245 = or i64 6228805746344295051, %14
  %246 = add i64 %244, %245
  %247 = xor i64 %246, -5770440632329822615
  %248 = xor i64 %247, %235
  %249 = xor i64 %248, %240
  %250 = xor i64 %249, %243
  %251 = xor i64 %250, %239
  %252 = xor i64 %251, %242
  %253 = or i64 %14, 3975540788365537203
  %254 = xor i64 %14, -1
  %255 = and i64 3975540788365537203, %254
  %256 = add i64 %255, %14
  %257 = add i64 %16, 666151605951395183
  %258 = add i64 4341146348788245622, %16
  %259 = add i64 %258, -3674994742836850439
  %260 = xor i64 %253, %259
  %261 = xor i64 %260, %256
  %262 = xor i64 %261, -4602005767797283516
  %263 = xor i64 %262, %257
  %264 = mul i64 %252, %263
  %265 = trunc i64 %264 to i32
  %266 = xor i32 %233, %265
  store i32 %266, i32* %1, align 4
  %267 = call i8** @bf3325468485390379012(i32* %1)
  %268 = load i8*, i8** %267, align 8
  indirectbr i8* %268, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %269 = load i8*, i8** %5, align 8
  %270 = load i8, i8* %269, align 1
  %271 = sext i32 %dispatcher1 to i64
  %272 = and i64 %271, -5084874219887569652
  %273 = xor i64 %271, -1
  %274 = or i64 5084874219887569651, %273
  %275 = xor i64 %274, -1
  %276 = and i64 %275, -1
  %277 = add i64 %12, 7273640352294581870
  %278 = and i64 7273640352294581870, %12
  %279 = or i64 7273640352294581870, %12
  %280 = add i64 %278, %279
  %281 = xor i64 -2006254888713596991, %277
  %282 = xor i64 %281, %272
  %283 = xor i64 %282, %276
  %284 = xor i64 %283, %280
  %285 = add i64 %14, 7443836556649711715
  %286 = sub i64 0, %14
  %287 = add i64 -7443836556649711715, %286
  %288 = sub i64 0, %287
  %289 = add i64 %4, 8247929185364617571
  %290 = add i64 7496257818932048800, %4
  %291 = add i64 %290, 751671366432568771
  %292 = or i64 %16, -8165363247634837536
  %293 = xor i64 %16, -1
  %294 = and i64 %293, 1415684825818957381
  %295 = and i64 %16, -1415684825818957382
  %296 = or i64 %294, %295
  %297 = xor i64 -7130525619860043355, %296
  %298 = xor i64 %16, -1
  %299 = or i64 8165363247634837535, %298
  %300 = xor i64 %299, -1
  %301 = and i64 %300, -1
  %302 = or i64 %297, %301
  %303 = xor i64 %291, %302
  %304 = xor i64 %303, %285
  %305 = xor i64 %304, 403691536191881346
  %306 = xor i64 %305, %288
  %307 = xor i64 %306, %289
  %308 = xor i64 %307, %292
  %309 = mul i64 %284, %308
  %310 = trunc i64 %309 to i8
  %311 = mul i8 %270, %310
  %312 = mul i8 %270, 2
  %313 = sub i8 0, %312
  %314 = add i8 -2, %313
  %315 = sub i8 0, %314
  %316 = mul i8 %311, %315
  %317 = srem i8 %316, 4
  %318 = icmp eq i8 %317, 0
  %319 = mul i8 %270, %270
  %320 = add i8 %319, %270
  %321 = srem i8 %320, 2
  %322 = icmp eq i8 %321, 0
  %323 = or i1 %318, %322
  %324 = select i1 %323, i32 388314535, i32 388314368
  %325 = xor i32 %324, 167
  store i32 %325, i32* %1, align 4
  %326 = call i8** @bf3325468485390379012(i32* %1)
  %327 = load i8*, i8** %326, align 8
  indirectbr i8* %327, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.19(i32 %0, i32 %1, i32* %.out) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314379)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.19, %loopEnd), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314538)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.19, %defaultSwitchBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314530)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.19, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314382)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.19, %97), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314489)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.19, %.exitStub1), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314380)
  %14 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %13
  store i8* blockaddress(@main_loop.extracted.19, %loopStart), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314448)
  %16 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %15
  store i8* blockaddress(@main_loop.extracted.19, %.exitStub), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314474)
  %18 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %17
  store i8* blockaddress(@main_loop.extracted.19, %EntryBasicBlockSplit), i8** %18, align 8
  %lookupTable = alloca [9 x i32], align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %24 = sext i32 %0 to i64
  %25 = or i64 %24, -5493032184048705889
  %26 = xor i64 %24, -1
  %27 = and i64 -5493032184048705889, %26
  %28 = add i64 %27, %24
  %29 = sext i32 %1 to i64
  %30 = and i64 %29, -5110497878840807565
  %31 = xor i64 %29, -1
  %32 = or i64 5110497878840807564, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = sext i32 %1 to i64
  %36 = and i64 %35, -2727010511214937399
  %37 = or i64 2727010511214937398, %35
  %38 = sub i64 %37, 2727010511214937398
  %39 = xor i64 %36, %28
  %40 = xor i64 %39, %30
  %41 = xor i64 %40, %34
  %42 = xor i64 %41, -4658068845289467721
  %43 = xor i64 %42, %38
  %44 = xor i64 %43, %25
  %45 = sext i32 %1 to i64
  %46 = or i64 %45, 7617566547647463961
  %47 = xor i64 %45, -1
  %48 = and i64 7617566547647463961, %47
  %49 = add i64 %48, %45
  %50 = sext i32 %0 to i64
  %51 = and i64 %50, 5949599055605754785
  %52 = xor i64 %50, -1
  %53 = or i64 -5949599055605754786, %52
  %54 = xor i64 %53, -1
  %55 = and i64 %54, -1
  %56 = sext i32 %1 to i64
  %57 = or i64 %56, -3281354409561765397
  %58 = and i64 -3281354409561765397, %56
  %59 = xor i64 -3281354409561765397, %56
  %60 = or i64 %58, %59
  %61 = xor i64 %51, %60
  %62 = xor i64 %61, 2011958885789125895
  %63 = xor i64 %62, %46
  %64 = xor i64 %63, %55
  %65 = xor i64 %64, %49
  %66 = xor i64 %65, %57
  %67 = mul i64 %44, %66
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* %23, align 4
  %69 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %69, align 4
  %70 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %70, align 4
  %71 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %71, align 4
  %72 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %72, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314380, i32* %2, align 4
  %73 = call i8** @bf3325468485390379012(i32* %2)
  %74 = load i8*, i8** %73, align 8
  indirectbr i8* %74, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %97
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %75 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = sub i32 0, %78
  %80 = sub i32 %76, %79
  store i32 %80, i32* %dispatcher, align 4
  %81 = load i8*, i8** %6, align 8
  %82 = load i8, i8* %81, align 1
  %83 = and i8 %82, 1
  %84 = icmp eq i8 %83, 0
  %85 = mul i8 %82, %82
  %86 = add i8 %85, %82
  %87 = mul i8 %86, 3
  %88 = srem i8 %87, 2
  %89 = icmp eq i8 %88, 0
  %90 = and i1 %84, %89
  %91 = xor i1 %84, %89
  %92 = or i1 %90, %91
  %93 = select i1 %92, i32 388314380, i32 388314379
  %94 = xor i32 %93, 7
  store i32 %94, i32* %2, align 4
  %95 = call i8** @bf3325468485390379012(i32* %2)
  %96 = load i8*, i8** %95, align 8
  indirectbr i8* %96, [label %loopEnd, label %EntryBasicBlockSplit]

97:                                               ; preds = %97, %loopStart
  %98 = or i64 %9, -7957271698079426115
  %99 = xor i64 %9, -1
  %100 = and i64 -7957271698079426115, %99
  %101 = add i64 %100, %9
  %102 = add i64 %5, 790098341406148358
  %103 = add i64 5941870275026412453, %5
  %104 = sub i64 %103, 5151771933620264095
  %105 = add i64 %3, -1154304123514303647
  %106 = sub i64 0, %3
  %107 = sub i64 -1154304123514303647, %106
  %108 = xor i64 %102, %104
  %109 = xor i64 %108, %101
  %110 = xor i64 %109, %107
  %111 = xor i64 %110, %105
  %112 = xor i64 %111, %98
  %113 = xor i64 %112, -1332239846024578631
  %114 = add i64 %17, 2345311698413172287
  %115 = sub i64 0, %17
  %116 = sub i64 2345311698413172287, %115
  %117 = or i64 %13, -3540532749968160392
  %118 = and i64 -3540532749968160392, %13
  %119 = xor i64 -3540532749968160392, %13
  %120 = or i64 %118, %119
  %121 = and i64 %11, 490669313758658631
  %122 = or i64 -490669313758658632, %11
  %123 = sub i64 %122, -490669313758658632
  %124 = xor i64 %117, %121
  %125 = xor i64 %124, %116
  %126 = xor i64 %125, %114
  %127 = xor i64 %126, %120
  %128 = xor i64 %127, %123
  %129 = xor i64 %128, 6504665110565189906
  %130 = mul i64 %113, %129
  %131 = trunc i64 %130 to i32
  %132 = srem i32 %0, %131
  store i32 %132, i32* %.out, align 4
  %133 = srem i32 %1, 2
  %134 = and i64 %17, 2908915530615823278
  %135 = xor i64 %17, -1
  %136 = xor i64 2908915530615823278, %135
  %137 = and i64 %136, 2908915530615823278
  %138 = sext i32 %1 to i64
  %139 = and i64 %138, 302178997549573974
  %140 = xor i64 %138, -1
  %141 = xor i64 302178997549573974, %140
  %142 = and i64 %141, 302178997549573974
  %143 = sext i32 %1 to i64
  %144 = and i64 %143, -5792467875025491200
  %145 = xor i64 %143, -1
  %146 = or i64 5792467875025491199, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = xor i64 %139, %137
  %150 = xor i64 %149, %142
  %151 = xor i64 %150, %148
  %152 = xor i64 %151, %144
  %153 = xor i64 %152, %134
  %154 = xor i64 %153, 4027101784915343717
  %155 = sext i32 %dispatcher1 to i64
  %156 = or i64 %155, 8045396442890335531
  %157 = xor i64 %155, -1
  %158 = and i64 8045396442890335531, %157
  %159 = add i64 %158, %155
  %160 = and i64 %15, -4379683849594661914
  %161 = or i64 4379683849594661913, %15
  %162 = sub i64 %161, 4379683849594661913
  %163 = or i64 %17, -4739074749005724643
  %164 = xor i64 %17, -1
  %165 = and i64 %164, -8917271555875221576
  %166 = and i64 %17, 8917271555875221575
  %167 = or i64 %165, %166
  %168 = xor i64 4180484340878232485, %167
  %169 = xor i64 %17, -1
  %170 = or i64 4739074749005724642, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %168, %172
  %174 = xor i64 %159, %156
  %175 = xor i64 %174, %163
  %176 = xor i64 %175, 0
  %177 = xor i64 %176, %173
  %178 = xor i64 %177, %162
  %179 = xor i64 %178, %160
  %180 = mul i64 %154, %179
  %181 = trunc i64 %180 to i32
  %182 = icmp eq i32 %133, %181
  %183 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %186 = load i32, i32* %185, align 4
  %187 = sub i32 0, %186
  %188 = sub i32 %184, %187
  %189 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %190 = load i32, i32* %189, align 4
  %191 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %192 = load i32, i32* %191, align 4
  %193 = sub i32 %190, %192
  %194 = select i1 %182, i32 %188, i32 %193
  store i32 %194, i32* %dispatcher, align 4
  %195 = load i8*, i8** %12, align 8
  %196 = load i8, i8* %195, align 1
  %197 = mul i8 %196, 2
  %198 = sext i32 %1 to i64
  %199 = add i64 %198, -231662870398351635
  %200 = sub i64 0, %198
  %201 = add i64 231662870398351635, %200
  %202 = sub i64 0, %201
  %203 = sext i32 %dispatcher1 to i64
  %204 = add i64 %203, -692475374659003767
  %205 = sub i64 0, %203
  %206 = add i64 692475374659003767, %205
  %207 = sub i64 0, %206
  %208 = xor i64 %207, %202
  %209 = xor i64 %208, 2582309195212940463
  %210 = xor i64 %209, %204
  %211 = xor i64 %210, %199
  %212 = add i64 %9, 8871090455368918236
  %213 = add i64 -4948152127419262659, %9
  %214 = add i64 %213, -4627501490921370721
  %215 = add i64 %9, -8868095547137170336
  %216 = and i64 -8868095547137170336, %9
  %217 = or i64 -8868095547137170336, %9
  %218 = add i64 %216, %217
  %219 = add i64 %17, 8027927489710683609
  %220 = and i64 8027927489710683609, %17
  %221 = or i64 8027927489710683609, %17
  %222 = add i64 %220, %221
  %223 = xor i64 3160014296835089566, %218
  %224 = xor i64 %223, %215
  %225 = xor i64 %224, %212
  %226 = xor i64 %225, %222
  %227 = xor i64 %226, %219
  %228 = xor i64 %227, %214
  %229 = mul i64 %211, %228
  %230 = trunc i64 %229 to i8
  %231 = mul i8 %196, %230
  %232 = sext i32 %0 to i64
  %233 = or i64 %232, 1319203801156644484
  %234 = xor i64 %232, -1
  %235 = and i64 %234, -7861847071911259341
  %236 = and i64 %232, 7861847071911259340
  %237 = or i64 %235, %236
  %238 = xor i64 -9174998594065678921, %237
  %239 = xor i64 %232, -1
  %240 = or i64 -1319203801156644485, %239
  %241 = xor i64 %240, -1
  %242 = and i64 %241, -1
  %243 = or i64 %238, %242
  %244 = and i64 %11, -1300683987281185633
  %245 = xor i64 %11, -1
  %246 = xor i64 -1300683987281185633, %245
  %247 = and i64 %246, -1300683987281185633
  %248 = and i64 %13, -4056661369236845021
  %249 = or i64 4056661369236845020, %13
  %250 = sub i64 %249, 4056661369236845020
  %251 = xor i64 %248, %233
  %252 = xor i64 %251, %247
  %253 = xor i64 %252, 4162789813524489133
  %254 = xor i64 %253, %250
  %255 = xor i64 %254, %244
  %256 = xor i64 %255, %243
  %257 = add i64 %9, 6377928277191013713
  %258 = sub i64 0, %9
  %259 = add i64 -6377928277191013713, %258
  %260 = sub i64 0, %259
  %261 = and i64 %11, -4888906276832074816
  %262 = xor i64 %11, -1
  %263 = xor i64 -4888906276832074816, %262
  %264 = and i64 %263, -4888906276832074816
  %265 = xor i64 %264, %261
  %266 = xor i64 %265, %260
  %267 = xor i64 %266, 152293315525668938
  %268 = xor i64 %267, %257
  %269 = mul i64 %256, %268
  %270 = trunc i64 %269 to i8
  %271 = add i8 %270, %231
  %272 = mul i8 %197, %271
  %273 = srem i8 %272, 4
  %274 = icmp eq i8 %273, 0
  %275 = mul i8 %196, %196
  %276 = add i8 %275, %196
  %277 = and i64 %11, -3461795714293656879
  %278 = or i64 3461795714293656878, %11
  %279 = sub i64 %278, 3461795714293656878
  %280 = or i64 %13, -7321299113848008099
  %281 = xor i64 %13, -1
  %282 = and i64 -7321299113848008099, %281
  %283 = add i64 %282, %13
  %284 = xor i64 %277, %280
  %285 = xor i64 %284, %283
  %286 = xor i64 %285, 7816667607194426349
  %287 = xor i64 %286, %279
  %288 = or i64 %11, 1392886499424272370
  %289 = and i64 1392886499424272370, %11
  %290 = xor i64 1392886499424272370, %11
  %291 = or i64 %289, %290
  %292 = or i64 %15, 6618972319519446672
  %293 = xor i64 %15, -1
  %294 = and i64 %293, -8975364945377506078
  %295 = and i64 %15, 8975364945377506077
  %296 = or i64 %294, %295
  %297 = xor i64 -2834372322597643662, %296
  %298 = xor i64 %15, -1
  %299 = or i64 -6618972319519446673, %298
  %300 = xor i64 %299, -1
  %301 = and i64 %300, -1
  %302 = or i64 %297, %301
  %303 = xor i64 %292, %291
  %304 = xor i64 %303, %302
  %305 = xor i64 %304, %288
  %306 = xor i64 %305, -4899805345643465782
  %307 = mul i64 %287, %306
  %308 = trunc i64 %307 to i8
  %309 = srem i8 %276, %308
  %310 = icmp eq i8 %309, 0
  %311 = and i1 %274, %310
  %312 = select i1 %311, i32 388314382, i32 388314379
  %313 = xor i32 %312, -1
  %314 = and i32 %313, 5
  %315 = and i32 %312, -6
  %316 = or i32 %314, %315
  store i32 %316, i32* %2, align 4
  %317 = call i8** @bf3325468485390379012(i32* %2)
  %318 = load i8*, i8** %317, align 8
  indirectbr i8* %318, [label %loopEnd, label %97]

.exitStub:                                        ; preds = %loopStart
  %319 = and i64 %9, -3731900627798177393
  %320 = xor i64 %9, -1
  %321 = or i64 3731900627798177392, %320
  %322 = xor i64 %321, -1
  %323 = and i64 %322, -1
  %324 = add i64 %7, 6008337004586979952
  %325 = and i64 6008337004586979952, %7
  %326 = or i64 6008337004586979952, %7
  %327 = add i64 %325, %326
  %328 = xor i64 %319, %323
  %329 = xor i64 %328, 1977742121546848639
  %330 = xor i64 %329, %327
  %331 = xor i64 %330, %324
  %332 = add i64 %7, -4177065133590984040
  %333 = xor i64 -4177065133590984040, %7
  %334 = and i64 -4177065133590984040, %7
  %335 = mul i64 2, %334
  %336 = add i64 %333, %335
  %337 = add i64 %11, 8276982621291399399
  %338 = add i64 -2876951590981444567, %11
  %339 = sub i64 %338, 7292809861436707650
  %340 = xor i64 %336, %337
  %341 = xor i64 %340, %339
  %342 = xor i64 %341, %332
  %343 = xor i64 %342, 8456693749655086719
  %344 = mul i64 %331, %343
  %345 = trunc i64 %344 to i1
  ret i1 %345

.exitStub1:                                       ; preds = %loopStart
  %346 = or i64 %5, -9119657964349090216
  %347 = xor i64 %5, -1
  %348 = and i64 %347, 1650978016427751230
  %349 = and i64 %5, -1650978016427751231
  %350 = or i64 %348, %349
  %351 = xor i64 -7522976598097747610, %350
  %352 = xor i64 %5, -1
  %353 = or i64 9119657964349090215, %352
  %354 = xor i64 %353, -1
  %355 = and i64 %354, -1
  %356 = or i64 %351, %355
  %357 = add i64 %3, -567632146487304220
  %358 = add i64 542418006730360950, %3
  %359 = sub i64 %358, 1110050153217665170
  %360 = xor i64 -2445838653114815317, %346
  %361 = xor i64 %360, %356
  %362 = xor i64 %361, %357
  %363 = xor i64 %362, %359
  %364 = add i64 %17, 1158594059650186233
  %365 = sub i64 0, %17
  %366 = add i64 -1158594059650186233, %365
  %367 = sub i64 0, %366
  %368 = or i64 %17, -5097406579295779742
  %369 = xor i64 %17, -1
  %370 = and i64 %369, -3532447049558775180
  %371 = and i64 %17, 3532447049558775179
  %372 = or i64 %370, %371
  %373 = xor i64 8626756853801037334, %372
  %374 = xor i64 %17, -1
  %375 = or i64 5097406579295779741, %374
  %376 = xor i64 %375, -1
  %377 = and i64 %376, -1
  %378 = or i64 %373, %377
  %379 = xor i64 %367, %368
  %380 = xor i64 %379, %378
  %381 = xor i64 %380, %364
  %382 = xor i64 %381, 0
  %383 = mul i64 %363, %382
  %384 = trunc i64 %383 to i1
  ret i1 %384

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %385 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %385, align 4
  %386 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %386, align 4
  %387 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %388 = and i64 %15, -1569309393290785615
  %389 = or i64 1569309393290785614, %15
  %390 = sub i64 %389, 1569309393290785614
  %391 = and i64 %15, 2394062598445827825
  %392 = or i64 -2394062598445827826, %15
  %393 = sub i64 %392, -2394062598445827826
  %394 = and i64 %7, 2281513077519650947
  %395 = or i64 -2281513077519650948, %7
  %396 = sub i64 %395, -2281513077519650948
  %397 = xor i64 %388, %390
  %398 = xor i64 %397, %391
  %399 = xor i64 %398, %393
  %400 = xor i64 %399, -2238888305263472351
  %401 = xor i64 %400, %394
  %402 = xor i64 %401, %396
  %403 = add i64 %5, -7115087660265919087
  %404 = xor i64 -7115087660265919087, %5
  %405 = and i64 -7115087660265919087, %5
  %406 = mul i64 2, %405
  %407 = add i64 %404, %406
  %408 = and i64 %13, 5417713263934103776
  %409 = xor i64 %13, -1
  %410 = or i64 -5417713263934103777, %409
  %411 = xor i64 %410, -1
  %412 = and i64 %411, -1
  %413 = xor i64 %412, %403
  %414 = xor i64 %413, -1535260680150673245
  %415 = xor i64 %414, %408
  %416 = xor i64 %415, %407
  %417 = mul i64 %402, %416
  %418 = trunc i64 %417 to i32
  store i32 %418, i32* %387, align 4
  %419 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %419, align 4
  %420 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %420, align 4
  %421 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %422 = load i32, i32* %421, align 4
  store i32 %422, i32* %dispatcher, align 4
  %423 = load i8*, i8** %6, align 8
  %424 = load i8, i8* %423, align 1
  %425 = and i8 %424, 1
  %426 = and i64 %9, 4849929799120395434
  %427 = or i64 -4849929799120395435, %9
  %428 = sub i64 %427, -4849929799120395435
  %429 = and i64 %17, -3653270741455686643
  %430 = xor i64 %17, -1
  %431 = xor i64 -3653270741455686643, %430
  %432 = and i64 %431, -3653270741455686643
  %433 = or i64 %9, 1860638116751322402
  %434 = xor i64 %9, -1
  %435 = and i64 %434, 6490820265345563922
  %436 = and i64 %9, -6490820265345563923
  %437 = or i64 %435, %436
  %438 = xor i64 4883685568956305456, %437
  %439 = xor i64 %9, -1
  %440 = or i64 -1860638116751322403, %439
  %441 = xor i64 %440, -1
  %442 = and i64 %441, -1
  %443 = or i64 %438, %442
  %444 = xor i64 %432, %429
  %445 = xor i64 %444, %443
  %446 = xor i64 %445, %426
  %447 = xor i64 %446, %433
  %448 = xor i64 %447, 7674437208202827625
  %449 = xor i64 %448, %428
  %450 = add i64 %13, -7021397215903097427
  %451 = add i64 2287129489664468415, %13
  %452 = sub i64 %451, -9138217368141985774
  %453 = sext i32 %0 to i64
  %454 = and i64 %453, -3237801359328230051
  %455 = xor i64 %453, -1
  %456 = xor i64 -3237801359328230051, %455
  %457 = and i64 %456, -3237801359328230051
  %458 = add i64 %11, 8176742433307758708
  %459 = and i64 8176742433307758708, %11
  %460 = or i64 8176742433307758708, %11
  %461 = add i64 %459, %460
  %462 = xor i64 %457, 0
  %463 = xor i64 %462, %461
  %464 = xor i64 %463, %452
  %465 = xor i64 %464, %450
  %466 = xor i64 %465, %454
  %467 = xor i64 %466, %458
  %468 = mul i64 %449, %467
  %469 = trunc i64 %468 to i8
  %470 = icmp eq i8 %425, %469
  %471 = mul i8 %424, %424
  %472 = add i8 %471, %424
  %473 = mul i8 %472, 3
  %474 = srem i8 %473, 2
  %475 = icmp eq i8 %474, 0
  %476 = xor i1 %470, true
  %477 = and i1 %476, false
  %478 = and i1 %470, true
  %479 = or i1 %477, %478
  %480 = and i64 %9, 776684725889210936
  %481 = or i64 -776684725889210937, %9
  %482 = sub i64 %481, -776684725889210937
  %483 = or i64 %13, 5040760887069262768
  %484 = xor i64 %13, -1
  %485 = and i64 5040760887069262768, %484
  %486 = add i64 %485, %13
  %487 = xor i64 %480, -821829760454939687
  %488 = xor i64 %487, %486
  %489 = xor i64 %488, %483
  %490 = xor i64 %489, %482
  %491 = and i64 %3, -1758082698452643777
  %492 = xor i64 %3, -1
  %493 = xor i64 -1758082698452643777, %492
  %494 = and i64 %493, -1758082698452643777
  %495 = or i64 %7, -2665589052016315269
  %496 = and i64 -2665589052016315269, %7
  %497 = xor i64 -2665589052016315269, %7
  %498 = or i64 %496, %497
  %499 = and i64 %3, 2123284369894737195
  %500 = or i64 -2123284369894737196, %3
  %501 = sub i64 %500, -2123284369894737196
  %502 = xor i64 1999477173351785577, %499
  %503 = xor i64 %502, %494
  %504 = xor i64 %503, %491
  %505 = xor i64 %504, %495
  %506 = xor i64 %505, %501
  %507 = xor i64 %506, %498
  %508 = mul i64 %490, %507
  %509 = trunc i64 %508 to i1
  %510 = xor i1 %475, %509
  %511 = and i1 %510, false
  %512 = and i1 %475, true
  %513 = or i1 %511, %512
  %514 = xor i1 %479, %513
  %515 = xor i1 %470, true
  %516 = xor i1 %475, true
  %517 = or i1 %515, %516
  %518 = xor i1 %517, true
  %519 = and i1 %518, true
  %520 = or i1 %514, %519
  %521 = or i64 %9, 4977803149942610771
  %522 = xor i64 %9, -1
  %523 = and i64 4977803149942610771, %522
  %524 = add i64 %523, %9
  %525 = sext i32 %0 to i64
  %526 = or i64 %525, -1469271284994799350
  %527 = and i64 -1469271284994799350, %525
  %528 = xor i64 -1469271284994799350, %525
  %529 = or i64 %527, %528
  %530 = sext i32 %0 to i64
  %531 = and i64 %530, 5499397336616974836
  %532 = xor i64 %530, -1
  %533 = xor i64 5499397336616974836, %532
  %534 = and i64 %533, 5499397336616974836
  %535 = xor i64 %521, %534
  %536 = xor i64 %535, 1448703271975616339
  %537 = xor i64 %536, %526
  %538 = xor i64 %537, %531
  %539 = xor i64 %538, %529
  %540 = xor i64 %539, %524
  %541 = add i64 %17, -1131030070902006777
  %542 = add i64 8920123396948042015, %17
  %543 = sub i64 %542, -8395590605859502824
  %544 = sext i32 %1 to i64
  %545 = or i64 %544, 3269168229087526729
  %546 = xor i64 %544, -1
  %547 = and i64 %546, -3216172893300406786
  %548 = and i64 %544, 3216172893300406785
  %549 = or i64 %547, %548
  %550 = xor i64 -143076261871748425, %549
  %551 = xor i64 %544, -1
  %552 = or i64 -3269168229087526730, %551
  %553 = xor i64 %552, -1
  %554 = and i64 %553, -1
  %555 = or i64 %550, %554
  %556 = xor i64 %555, -2124332109748391612
  %557 = xor i64 %556, %543
  %558 = xor i64 %557, %541
  %559 = xor i64 %558, %545
  %560 = mul i64 %540, %559
  %561 = trunc i64 %560 to i32
  %562 = select i1 %520, i32 %561, i32 388314474
  %563 = xor i32 %562, 102
  store i32 %563, i32* %2, align 4
  %564 = call i8** @bf3325468485390379012(i32* %2)
  %565 = load i8*, i8** %564, align 8
  indirectbr i8* %565, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %566 = load i8*, i8** %8, align 8
  %567 = load i8, i8* %566, align 1
  %568 = add i64 %5, 5259389904188623590
  %569 = add i64 -3171740438664575217, %5
  %570 = add i64 %569, 8431130342853198807
  %571 = add i64 %5, -105263490839472969
  %572 = xor i64 -105263490839472969, %5
  %573 = and i64 -105263490839472969, %5
  %574 = mul i64 2, %573
  %575 = add i64 %572, %574
  %576 = xor i64 %568, %575
  %577 = xor i64 %576, 4539160227158990069
  %578 = xor i64 %577, %570
  %579 = xor i64 %578, %571
  %580 = and i64 %7, -140452619552281443
  %581 = xor i64 %7, -1
  %582 = or i64 140452619552281442, %581
  %583 = xor i64 %582, -1
  %584 = and i64 %583, -1
  %585 = or i64 %17, -6756631998441594826
  %586 = and i64 -6756631998441594826, %17
  %587 = xor i64 -6756631998441594826, %17
  %588 = or i64 %586, %587
  %589 = xor i64 %580, %588
  %590 = xor i64 %589, 3542419430521986746
  %591 = xor i64 %590, %585
  %592 = xor i64 %591, %584
  %593 = mul i64 %579, %592
  %594 = trunc i64 %593 to i8
  %595 = mul i8 %567, %594
  %596 = mul i8 %567, 2
  %597 = add i8 2, %596
  %598 = mul i8 %595, %597
  %599 = sext i32 %0 to i64
  %600 = add i64 %599, -7422512502979084513
  %601 = sub i64 0, %599
  %602 = add i64 7422512502979084513, %601
  %603 = sub i64 0, %602
  %604 = or i64 %5, 3478907390539315116
  %605 = xor i64 %5, -1
  %606 = and i64 %605, -7219573825023665354
  %607 = and i64 %5, 7219573825023665353
  %608 = or i64 %606, %607
  %609 = xor i64 -6086223411828085606, %608
  %610 = xor i64 %5, -1
  %611 = or i64 -3478907390539315117, %610
  %612 = xor i64 %611, -1
  %613 = and i64 %612, -1
  %614 = or i64 %609, %613
  %615 = and i64 %13, -5098044084945608216
  %616 = xor i64 %13, -1
  %617 = xor i64 -5098044084945608216, %616
  %618 = and i64 %617, -5098044084945608216
  %619 = xor i64 -1534471064021534969, %604
  %620 = xor i64 %619, %614
  %621 = xor i64 %620, %600
  %622 = xor i64 %621, %615
  %623 = xor i64 %622, %603
  %624 = xor i64 %623, %618
  %625 = sext i32 %0 to i64
  %626 = or i64 %625, -5044482394724600251
  %627 = xor i64 %625, -1
  %628 = and i64 -5044482394724600251, %627
  %629 = add i64 %628, %625
  %630 = or i64 %3, -2118430636700025661
  %631 = and i64 -2118430636700025661, %3
  %632 = xor i64 -2118430636700025661, %3
  %633 = or i64 %631, %632
  %634 = xor i64 3283089245532658396, %633
  %635 = xor i64 %634, %626
  %636 = xor i64 %635, %630
  %637 = xor i64 %636, %629
  %638 = mul i64 %624, %637
  %639 = trunc i64 %638 to i8
  %640 = srem i8 %598, %639
  %641 = icmp eq i8 %640, 0
  %642 = mul i8 %567, %567
  %643 = add i8 %642, %567
  %644 = srem i8 %643, 2
  %645 = icmp eq i8 %644, 0
  %646 = or i1 %641, %645
  %647 = select i1 %646, i32 388314474, i32 388314379
  %648 = xor i32 %647, 97
  store i32 %648, i32* %2, align 4
  %649 = call i8** @bf3325468485390379012(i32* %2)
  %650 = load i8*, i8** %649, align 8
  indirectbr i8* %650, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %97, %EntryBasicBlockSplit
  %651 = load i8*, i8** %18, align 8
  %652 = load i8, i8* %651, align 1
  %653 = and i8 %652, 1
  %654 = icmp eq i8 %653, 1
  %655 = mul i8 %652, %652
  %656 = add i8 %655, %652
  %657 = srem i8 %656, 2
  %658 = icmp eq i8 %657, 0
  %659 = or i1 %654, %658
  %660 = select i1 %659, i32 388314379, i32 388314380
  %661 = xor i32 %660, 7
  store i32 %661, i32* %2, align 4
  %662 = call i8** @bf3325468485390379012(i32* %2)
  %663 = load i8*, i8** %662, align 8
  indirectbr i8* %663, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.20(float %0, float* %1, float* %2, i8* %3, float* %4, i32 %.reload2, i32* %.out, i1* %.out1) #1 {
entry:
  %5 = sext i32 %.reload2 to i64
  %6 = and i64 %5, -6745936148025097866
  %7 = or i64 6745936148025097865, %5
  %8 = sub i64 %7, 6745936148025097865
  %9 = sext i32 %.reload2 to i64
  %10 = or i64 %9, -883683679215943737
  %11 = and i64 -883683679215943737, %9
  %12 = xor i64 -883683679215943737, %9
  %13 = or i64 %11, %12
  %14 = sext i32 %.reload2 to i64
  %15 = add i64 %14, -5167839891106950020
  %16 = add i64 8136016027346967066, %14
  %17 = add i64 %16, 5142888155255634530
  %18 = xor i64 %13, %10
  %19 = xor i64 %18, %17
  %20 = xor i64 %19, %6
  %21 = xor i64 %20, 4124092049261214437
  %22 = xor i64 %21, %8
  %23 = xor i64 %22, %15
  %24 = sext i32 %.reload2 to i64
  %25 = or i64 %24, -8590403274198483899
  %26 = xor i64 %24, -1
  %27 = and i64 %26, -3575225718201861380
  %28 = and i64 %24, 3575225718201861379
  %29 = or i64 %27, %28
  %30 = xor i64 5092162269273867961, %29
  %31 = xor i64 %24, -1
  %32 = or i64 8590403274198483898, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = or i64 %30, %34
  %36 = sext i32 %.reload2 to i64
  %37 = or i64 %36, -5219783810909094747
  %38 = and i64 -5219783810909094747, %36
  %39 = xor i64 -5219783810909094747, %36
  %40 = or i64 %38, %39
  %41 = sext i32 %.reload2 to i64
  %42 = and i64 %41, 458727910372825306
  %43 = or i64 -458727910372825307, %41
  %44 = sub i64 %43, -458727910372825307
  %45 = xor i64 %40, -112664412970552595
  %46 = xor i64 %45, %25
  %47 = xor i64 %46, %42
  %48 = xor i64 %47, %37
  %49 = xor i64 %48, %44
  %50 = xor i64 %49, %35
  %51 = mul i64 %23, %50
  %52 = trunc i64 %51 to i32
  %53 = alloca i32, i32 %52, align 4
  %54 = call i64 @h9549842938191327224(i64 388314405)
  %55 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %54
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub2), i8** %55, align 8
  %56 = call i64 @h9549842938191327224(i64 388314401)
  %57 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %56
  store i8* blockaddress(@main_loop.extracted.20, %EntryBasicBlockSplit), i8** %57, align 8
  %58 = call i64 @h9549842938191327224(i64 388314400)
  %59 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %58
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub), i8** %59, align 8
  %60 = sext i32 %.reload2 to i64
  %61 = and i64 %60, -747573818090377487
  %62 = xor i64 %60, -1
  %63 = xor i64 -747573818090377487, %62
  %64 = and i64 %63, -747573818090377487
  %65 = sext i32 %.reload2 to i64
  %66 = or i64 %65, -9220089036539090737
  %67 = xor i64 %65, -1
  %68 = and i64 -9220089036539090737, %67
  %69 = add i64 %68, %65
  %70 = sext i32 %.reload2 to i64
  %71 = add i64 %70, 217265503599975502
  %72 = xor i64 217265503599975502, %70
  %73 = and i64 217265503599975502, %70
  %74 = mul i64 2, %73
  %75 = add i64 %72, %74
  %76 = xor i64 %75, %69
  %77 = xor i64 %76, %61
  %78 = xor i64 %77, %71
  %79 = xor i64 %78, -3762234021675483927
  %80 = xor i64 %79, %64
  %81 = xor i64 %80, %66
  %82 = sext i32 %.reload2 to i64
  %83 = or i64 %82, 6452177667643434393
  %84 = and i64 6452177667643434393, %82
  %85 = xor i64 6452177667643434393, %82
  %86 = or i64 %84, %85
  %87 = sext i32 %.reload2 to i64
  %88 = or i64 %87, 1005288718224612805
  %89 = and i64 1005288718224612805, %87
  %90 = xor i64 1005288718224612805, %87
  %91 = or i64 %89, %90
  %92 = sext i32 %.reload2 to i64
  %93 = and i64 %92, 6545230785866498101
  %94 = xor i64 %92, -1
  %95 = xor i64 6545230785866498101, %94
  %96 = and i64 %95, 6545230785866498101
  %97 = xor i64 %86, %93
  %98 = xor i64 %97, -227618790681553009
  %99 = xor i64 %98, %91
  %100 = xor i64 %99, %88
  %101 = xor i64 %100, %96
  %102 = xor i64 %101, %83
  %103 = mul i64 %81, %102
  %104 = call i64 @h9549842938191327224(i64 %103)
  %105 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %104
  store i8* blockaddress(@main_loop.extracted.20, %codeRepl), i8** %105, align 8
  %106 = call i64 @h9549842938191327224(i64 388314403)
  %107 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %106
  store i8* blockaddress(@main_loop.extracted.20, %"2"), i8** %107, align 8
  %108 = call i64 @h9549842938191327224(i64 388314406)
  %109 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %108
  store i8* blockaddress(@main_loop.extracted.20, %BogusBasciBlock), i8** %109, align 8
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem16 = alloca i8**, align 8
  %.reg2mem13 = alloca i8**, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %110 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20, %BogusBasciBlock), i8** %110, align 8
  %111 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %111, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.20, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %112 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %112, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@main_loop.extracted.20, %"2"), i8** %.reload6, align 8
  %113 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %113, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@main_loop.extracted.20, %codeRepl), i8** %.reload9, align 8
  %114 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %114, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub), i8** %.reload12, align 8
  %115 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %115, i8*** %.reg2mem13, align 8
  %.reload15 = load i8**, i8*** %.reg2mem13, align 8
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub2), i8** %.reload15, align 8
  %116 = alloca i64, align 8
  %117 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %118 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable17288531702685132446, i32 0, i64 %117
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %118, align 8
  %119 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %120 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable17288531702685132446, i32 0, i64 %119
  store i8** %120, i8*** %.reg2mem16, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %121 = load i8*, i8** %.reload, align 8
  indirectbr i8* %121, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub2]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %122 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20, %codeRepl), i8** %122, align 8
  %123 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.20, %"2"), i8** %123, align 8
  %124 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.20, %EntryBasicBlockSplit), i8** %124, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %125 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %125, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub2]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload17 = load i8**, i8*** %.reg2mem16, align 8
  store i8* bitcast (i1 (i32, i1*, i32)* @main_loop.extracted.20.extracted to i8*), i8** %.reload17, align 8
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %126 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %126, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub2]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566391, i64* %116, align 8
  %127 = call i8** @lk16272290410439088112(i64* %116)
  %128 = load i8*, i8** %127, align 8
  %129 = bitcast i8* %128 to i32 (float, float*, float*, i8*, float*)*
  %130 = call i32 %129(float %0, float* %1, float* %2, i8* %3, float* %4)
  store i32 %130, i32* %.reg2mem18, align 4
  %.reload20 = load i32, i32* %.reg2mem18, align 4
  store i32 %.reload20, i32* %.out, align 4
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %131 = load i8*, i8** %.reload8, align 8
  indirectbr i8* %131, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub2]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %116, align 8
  %132 = call i8** @lk16272290410439088112(i64* %116)
  %133 = load i8*, i8** %132, align 8
  %134 = bitcast i8* %133 to i1 (i32, i1*, i32)*
  %.reload19 = load i32, i32* %.reg2mem18, align 4
  %targetBlock = call i1 %134(i32 %.reload19, i1* %.out1, i32 %.reload2)
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  %135 = select i1 %targetBlock, i8** %.reload11, i8** %.reload14
  %136 = load i8*, i8** %135, align 8
  indirectbr i8* %136, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub2]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %137 = or i64 %58, -6817946966306474129
  %138 = xor i64 %58, -1
  %139 = and i64 -6817946966306474129, %138
  %140 = add i64 %139, %58
  %141 = sext i32 %.reload2 to i64
  %142 = add i64 %141, -8310888583097480278
  %143 = sub i64 0, %141
  %144 = add i64 8310888583097480278, %143
  %145 = sub i64 0, %144
  %146 = or i64 %58, 4695679872251791260
  %147 = xor i64 %58, -1
  %148 = and i64 %147, -2774104797922918341
  %149 = and i64 %58, 2774104797922918340
  %150 = or i64 %148, %149
  %151 = xor i64 -7446137292921763929, %150
  %152 = xor i64 %58, -1
  %153 = or i64 -4695679872251791261, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = or i64 %151, %155
  %157 = xor i64 %145, %146
  %158 = xor i64 %157, %137
  %159 = xor i64 %158, 6863676222843171467
  %160 = xor i64 %159, %140
  %161 = xor i64 %160, %156
  %162 = xor i64 %161, %142
  %163 = sext i32 %.reload2 to i64
  %164 = add i64 %163, 6965121674099665669
  %165 = sub i64 0, %163
  %166 = add i64 -6965121674099665669, %165
  %167 = sub i64 0, %166
  %168 = add i64 %104, 324838607811505614
  %169 = sub i64 0, %104
  %170 = add i64 -324838607811505614, %169
  %171 = sub i64 0, %170
  %172 = or i64 %108, 2978918617546539231
  %173 = and i64 2978918617546539231, %108
  %174 = xor i64 2978918617546539231, %108
  %175 = or i64 %173, %174
  %176 = xor i64 %168, %175
  %177 = xor i64 %176, %171
  %178 = xor i64 %177, %164
  %179 = xor i64 %178, %167
  %180 = xor i64 %179, -621575425444764381
  %181 = xor i64 %180, %172
  %182 = mul i64 %162, %181
  %183 = trunc i64 %182 to i1
  ret i1 %183

.exitStub2:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.21(i32 %0, i32 %1, i1* %.out) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314403)
  %4 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.21, %loopEnd), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314400)
  %6 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.21, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314412)
  %8 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.21, %.exitStub1), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314413)
  %10 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.21, %268), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314401)
  %12 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.21, %.exitStub), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314406)
  %14 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %13
  store i8* blockaddress(@main_loop.extracted.21, %EntryBasicBlockSplit), i8** %14, align 8
  %15 = call i64 @h9549842938191327224(i64 388314405)
  %16 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %15
  store i8* blockaddress(@main_loop.extracted.21, %defaultSwitchBasicBlock), i8** %16, align 8
  %17 = call i64 @h9549842938191327224(i64 388314407)
  %18 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %17
  store i8* blockaddress(@main_loop.extracted.21, %codeRepl), i8** %18, align 8
  %19 = call i64 @h9549842938191327224(i64 388314402)
  %20 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %19
  store i8* blockaddress(@main_loop.extracted.21, %loopStart), i8** %20, align 8
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %21, align 4
  %22 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %22, align 4
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %23, align 4
  %24 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %25 = sext i32 %0 to i64
  %26 = and i64 %25, -8985243120152790755
  %27 = or i64 8985243120152790754, %25
  %28 = sub i64 %27, 8985243120152790754
  %29 = sext i32 %0 to i64
  %30 = and i64 %29, -3769815308406531260
  %31 = or i64 3769815308406531259, %29
  %32 = sub i64 %31, 3769815308406531259
  %33 = sext i32 %1 to i64
  %34 = or i64 %33, 31015074192307970
  %35 = xor i64 %33, -1
  %36 = and i64 %35, -6502533612180151323
  %37 = and i64 %33, 6502533612180151322
  %38 = or i64 %36, %37
  %39 = xor i64 -6508708433307577113, %38
  %40 = xor i64 %33, -1
  %41 = or i64 -31015074192307971, %40
  %42 = xor i64 %41, -1
  %43 = and i64 %42, -1
  %44 = or i64 %39, %43
  %45 = xor i64 %26, %34
  %46 = xor i64 %45, %32
  %47 = xor i64 %46, %30
  %48 = xor i64 %47, %28
  %49 = xor i64 %48, %44
  %50 = xor i64 %49, 4005661688077109727
  %51 = sext i32 %0 to i64
  %52 = and i64 %51, 4954611116751101587
  %53 = or i64 -4954611116751101588, %51
  %54 = sub i64 %53, -4954611116751101588
  %55 = sext i32 %1 to i64
  %56 = add i64 %55, 2855526888500114891
  %57 = and i64 2855526888500114891, %55
  %58 = or i64 2855526888500114891, %55
  %59 = add i64 %57, %58
  %60 = xor i64 %59, 0
  %61 = xor i64 %60, %56
  %62 = xor i64 %61, %52
  %63 = xor i64 %62, %54
  %64 = mul i64 %50, %63
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %24, align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %67 = sext i32 %0 to i64
  %68 = and i64 %67, -6790143933028002204
  %69 = or i64 6790143933028002203, %67
  %70 = sub i64 %69, 6790143933028002203
  %71 = sext i32 %1 to i64
  %72 = and i64 %71, 4243281675774196848
  %73 = xor i64 %71, -1
  %74 = xor i64 4243281675774196848, %73
  %75 = and i64 %74, 4243281675774196848
  %76 = sext i32 %0 to i64
  %77 = add i64 %76, -923424652291784626
  %78 = sub i64 0, %76
  %79 = sub i64 -923424652291784626, %78
  %80 = xor i64 %68, %75
  %81 = xor i64 %80, %70
  %82 = xor i64 %81, %77
  %83 = xor i64 %82, %72
  %84 = xor i64 %83, 993510188071324993
  %85 = xor i64 %84, %79
  %86 = sext i32 %1 to i64
  %87 = add i64 %86, -7101436771081767038
  %88 = and i64 -7101436771081767038, %86
  %89 = or i64 -7101436771081767038, %86
  %90 = add i64 %88, %89
  %91 = sext i32 %1 to i64
  %92 = and i64 %91, 4486740446314161307
  %93 = xor i64 %91, -1
  %94 = or i64 -4486740446314161308, %93
  %95 = xor i64 %94, -1
  %96 = and i64 %95, -1
  %97 = sext i32 %0 to i64
  %98 = or i64 %97, -8950963458936571289
  %99 = xor i64 %97, -1
  %100 = and i64 -8950963458936571289, %99
  %101 = add i64 %100, %97
  %102 = xor i64 %92, -5946749036194004287
  %103 = xor i64 %102, %98
  %104 = xor i64 %103, %90
  %105 = xor i64 %104, %96
  %106 = xor i64 %105, %101
  %107 = xor i64 %106, %87
  %108 = mul i64 %85, %107
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %66, align 4
  %110 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %110, align 4
  %111 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %111, align 4
  %112 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %113 = sext i32 %0 to i64
  %114 = and i64 %113, 2265982344395977429
  %115 = xor i64 %113, -1
  %116 = or i64 -2265982344395977430, %115
  %117 = xor i64 %116, -1
  %118 = and i64 %117, -1
  %119 = sext i32 %0 to i64
  %120 = and i64 %119, 8024026036880856592
  %121 = xor i64 %119, -1
  %122 = or i64 -8024026036880856593, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = xor i64 %124, %114
  %126 = xor i64 %125, %118
  %127 = xor i64 %126, -7263088541440782637
  %128 = xor i64 %127, %120
  %129 = sext i32 %1 to i64
  %130 = and i64 %129, -7557856039116071687
  %131 = xor i64 %129, -1
  %132 = or i64 7557856039116071686, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = sext i32 %0 to i64
  %136 = and i64 %135, 547766334427283938
  %137 = or i64 -547766334427283939, %135
  %138 = sub i64 %137, -547766334427283939
  %139 = sext i32 %1 to i64
  %140 = and i64 %139, 6261321888641735111
  %141 = xor i64 %139, -1
  %142 = xor i64 6261321888641735111, %141
  %143 = and i64 %142, 6261321888641735111
  %144 = xor i64 %140, %130
  %145 = xor i64 %144, %143
  %146 = xor i64 %145, %138
  %147 = xor i64 %146, -4142701690344381076
  %148 = xor i64 %147, %134
  %149 = xor i64 %148, %136
  %150 = mul i64 %128, %149
  %151 = trunc i64 %150 to i32
  store i32 %151, i32* %112, align 4
  %152 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %152, align 4
  %153 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %153, align 4
  %154 = sext i32 %0 to i64
  %155 = and i64 %154, -1765481714043247165
  %156 = or i64 1765481714043247164, %154
  %157 = sub i64 %156, 1765481714043247164
  %158 = sext i32 %1 to i64
  %159 = and i64 %158, 5128147208262503679
  %160 = xor i64 %158, -1
  %161 = or i64 -5128147208262503680, %160
  %162 = xor i64 %161, -1
  %163 = and i64 %162, -1
  %164 = sext i32 %1 to i64
  %165 = or i64 %164, -403422858602781984
  %166 = xor i64 %164, -1
  %167 = and i64 %166, 3252419127335620096
  %168 = and i64 %164, -3252419127335620097
  %169 = or i64 %167, %168
  %170 = xor i64 -2935175998851519264, %169
  %171 = xor i64 %164, -1
  %172 = or i64 403422858602781983, %171
  %173 = xor i64 %172, -1
  %174 = and i64 %173, -1
  %175 = or i64 %170, %174
  %176 = xor i64 %157, %165
  %177 = xor i64 %176, %163
  %178 = xor i64 %177, -3350266998579893209
  %179 = xor i64 %178, %155
  %180 = xor i64 %179, %159
  %181 = xor i64 %180, %175
  %182 = sext i32 %1 to i64
  %183 = or i64 %182, -9009261403419754360
  %184 = and i64 -9009261403419754360, %182
  %185 = xor i64 -9009261403419754360, %182
  %186 = or i64 %184, %185
  %187 = sext i32 %1 to i64
  %188 = add i64 %187, 2919245228328956286
  %189 = sub i64 0, %187
  %190 = add i64 -2919245228328956286, %189
  %191 = sub i64 0, %190
  %192 = sext i32 %1 to i64
  %193 = and i64 %192, 4811062012332150749
  %194 = xor i64 %192, -1
  %195 = or i64 -4811062012332150750, %194
  %196 = xor i64 %195, -1
  %197 = and i64 %196, -1
  %198 = xor i64 %183, -7273498594132343913
  %199 = xor i64 %198, %188
  %200 = xor i64 %199, %193
  %201 = xor i64 %200, %186
  %202 = xor i64 %201, %197
  %203 = xor i64 %202, %191
  %204 = mul i64 %181, %203
  %205 = trunc i64 %204 to i32
  %206 = alloca i64, i32 %205, align 8
  %207 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %208 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9376634603898858042, i32 0, i64 %207
  store i8** %208, i8*** %.reg2mem, align 8
  %209 = sext i32 %1 to i64
  %210 = and i64 %209, -3939579940818783514
  %211 = or i64 3939579940818783513, %209
  %212 = sub i64 %211, 3939579940818783513
  %213 = sext i32 %1 to i64
  %214 = or i64 %213, 8016474745094283855
  %215 = xor i64 %213, -1
  %216 = and i64 %215, 7689450914533187532
  %217 = and i64 %213, -7689450914533187533
  %218 = or i64 %216, %217
  %219 = xor i64 429627105390738819, %218
  %220 = xor i64 %213, -1
  %221 = or i64 -8016474745094283856, %220
  %222 = xor i64 %221, -1
  %223 = and i64 %222, -1
  %224 = or i64 %219, %223
  %225 = xor i64 %212, %214
  %226 = xor i64 %225, -4291201916451459435
  %227 = xor i64 %226, %210
  %228 = xor i64 %227, %224
  %229 = sext i32 %1 to i64
  %230 = and i64 %229, 2784020806965155263
  %231 = xor i64 %229, -1
  %232 = xor i64 2784020806965155263, %231
  %233 = and i64 %232, 2784020806965155263
  %234 = sext i32 %1 to i64
  %235 = add i64 %234, 6229619523823488767
  %236 = sub i64 0, %234
  %237 = sub i64 6229619523823488767, %236
  %238 = xor i64 %237, %233
  %239 = xor i64 %238, %230
  %240 = xor i64 %239, 6348458159662886077
  %241 = xor i64 %240, %235
  %242 = mul i64 %228, %241
  %243 = trunc i64 %242 to i32
  %dispatcher = alloca i32, i32 %243, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314402, i32* %2, align 4
  %244 = call i8** @bf10451871259507523800(i32* %2)
  %245 = load i8*, i8** %244, align 8
  indirectbr i8* %245, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %268
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub1
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i32, i1*)* @main_loop.extracted.21.extracted to i8*), i8** %.reload, align 8
  %246 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %249 = load i32, i32* %248, align 4
  %250 = srem i32 %247, %249
  store i32 %250, i32* %dispatcher, align 4
  %251 = load i8*, i8** %4, align 8
  %252 = load i8, i8* %251, align 1
  %253 = mul i8 %252, 2
  %254 = mul i8 %252, 2
  %255 = add i8 2, %254
  %256 = mul i8 %253, %255
  %257 = srem i8 %256, 4
  %258 = icmp eq i8 %257, 0
  %259 = mul i8 %252, %252
  %260 = add i8 %259, %252
  %261 = srem i8 %260, 2
  %262 = icmp eq i8 %261, 0
  %263 = or i1 %258, %262
  %264 = select i1 %263, i32 388314400, i32 388314403
  %265 = xor i32 %264, 3
  store i32 %265, i32* %2, align 4
  %266 = call i8** @bf10451871259507523800(i32* %2)
  %267 = load i8*, i8** %266, align 8
  indirectbr i8* %267, [label %loopEnd, label %EntryBasicBlockSplit]

268:                                              ; preds = %268, %loopStart
  %269 = sext i32 %dispatcher1 to i64
  %270 = or i64 %269, -2640220879669718428
  %271 = and i64 -2640220879669718428, %269
  %272 = xor i64 -2640220879669718428, %269
  %273 = or i64 %271, %272
  %274 = or i64 %3, 1845386332012745048
  %275 = and i64 1845386332012745048, %3
  %276 = xor i64 1845386332012745048, %3
  %277 = or i64 %275, %276
  %278 = xor i64 %277, %274
  %279 = xor i64 %278, %270
  %280 = xor i64 %279, 6234054419480588151
  %281 = xor i64 %280, %273
  %282 = or i64 %13, 871048983460951765
  %283 = xor i64 %13, -1
  %284 = and i64 871048983460951765, %283
  %285 = add i64 %284, %13
  %286 = sext i32 %dispatcher1 to i64
  %287 = and i64 %286, -9210548199275011212
  %288 = or i64 9210548199275011211, %286
  %289 = sub i64 %288, 9210548199275011211
  %290 = and i64 %19, 8859275390198069603
  %291 = or i64 -8859275390198069604, %19
  %292 = sub i64 %291, -8859275390198069604
  %293 = xor i64 %282, %290
  %294 = xor i64 %293, %287
  %295 = xor i64 %294, %285
  %296 = xor i64 %295, %292
  %297 = xor i64 %296, -7260676405941217026
  %298 = xor i64 %297, %289
  %299 = mul i64 %281, %298
  %300 = mul i64 40, %299
  %301 = add i64 %19, 2577655395539487983
  %302 = sub i64 0, %19
  %303 = add i64 -2577655395539487983, %302
  %304 = sub i64 0, %303
  %305 = or i64 %19, 6603579933311012231
  %306 = xor i64 %19, -1
  %307 = and i64 %306, 3396573339103454098
  %308 = and i64 %19, -3396573339103454099
  %309 = or i64 %307, %308
  %310 = xor i64 8396870806398070293, %309
  %311 = xor i64 %19, -1
  %312 = or i64 -6603579933311012232, %311
  %313 = xor i64 %312, -1
  %314 = and i64 %313, -1
  %315 = or i64 %310, %314
  %316 = or i64 %207, -866890589568343706
  %317 = xor i64 %207, -1
  %318 = and i64 -866890589568343706, %317
  %319 = add i64 %318, %207
  %320 = xor i64 %315, -3957411264822272781
  %321 = xor i64 %320, %305
  %322 = xor i64 %321, %304
  %323 = xor i64 %322, %316
  %324 = xor i64 %323, %319
  %325 = xor i64 %324, %301
  %326 = and i64 %15, 6723286170804355044
  %327 = or i64 -6723286170804355045, %15
  %328 = sub i64 %327, -6723286170804355045
  %329 = or i64 %207, 4226059521589609506
  %330 = xor i64 %207, -1
  %331 = and i64 4226059521589609506, %330
  %332 = add i64 %331, %207
  %333 = xor i64 %328, %329
  %334 = xor i64 %333, %332
  %335 = xor i64 %334, -594651565307451573
  %336 = xor i64 %335, %326
  %337 = mul i64 %325, %336
  %338 = add i64 %337, 44
  %339 = mul i64 120, 107
  %340 = sdiv i64 23, 38
  %341 = sdiv i64 66, 80
  %342 = and i64 %207, 3896160144559516325
  %343 = xor i64 %207, -1
  %344 = xor i64 3896160144559516325, %343
  %345 = and i64 %344, 3896160144559516325
  %346 = and i64 %11, 1673737039896007969
  %347 = or i64 -1673737039896007970, %11
  %348 = sub i64 %347, -1673737039896007970
  %349 = or i64 %3, -6920588252161197277
  %350 = xor i64 %3, -1
  %351 = and i64 %350, 4532535438441300344
  %352 = and i64 %3, -4532535438441300345
  %353 = or i64 %351, %352
  %354 = xor i64 -6839862475604002213, %353
  %355 = xor i64 %3, -1
  %356 = or i64 6920588252161197276, %355
  %357 = xor i64 %356, -1
  %358 = and i64 %357, -1
  %359 = or i64 %354, %358
  %360 = xor i64 %348, %346
  %361 = xor i64 %360, %349
  %362 = xor i64 %361, %345
  %363 = xor i64 %362, %359
  %364 = xor i64 %363, 6667721946707628069
  %365 = xor i64 %364, %342
  %366 = add i64 %19, 6313481792421892254
  %367 = and i64 6313481792421892254, %19
  %368 = or i64 6313481792421892254, %19
  %369 = add i64 %367, %368
  %370 = or i64 %13, 4281785963412358281
  %371 = and i64 4281785963412358281, %13
  %372 = xor i64 4281785963412358281, %13
  %373 = or i64 %371, %372
  %374 = xor i64 %369, %373
  %375 = xor i64 %374, %370
  %376 = xor i64 %375, -7122066566484989342
  %377 = xor i64 %376, %366
  %378 = mul i64 %365, %377
  %379 = sdiv i64 83, %378
  %380 = srem i32 %0, 2
  store i32 %380, i32* %.reg2mem2, align 4
  %381 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %382 = load i32, i32* %381, align 4
  %383 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %384 = load i32, i32* %383, align 4
  %385 = sub i32 %382, %384
  store i32 %385, i32* %dispatcher, align 4
  %386 = load i8*, i8** %14, align 8
  %387 = load i8, i8* %386, align 1
  %388 = mul i8 %387, %387
  %389 = sub i8 0, %388
  %390 = sub i8 0, %387
  %391 = add i8 %389, %390
  %392 = sub i8 0, %391
  %393 = or i64 %19, 626358269507057312
  %394 = and i64 626358269507057312, %19
  %395 = xor i64 626358269507057312, %19
  %396 = or i64 %394, %395
  %397 = and i64 %15, 3496338667341399285
  %398 = xor i64 %15, -1
  %399 = or i64 -3496338667341399286, %398
  %400 = xor i64 %399, -1
  %401 = and i64 %400, -1
  %402 = xor i64 %397, %396
  %403 = xor i64 %402, %401
  %404 = xor i64 %403, -8194416978863201521
  %405 = xor i64 %404, %393
  %406 = and i64 %5, -3689763745047902927
  %407 = xor i64 %5, -1
  %408 = xor i64 -3689763745047902927, %407
  %409 = and i64 %408, -3689763745047902927
  %410 = sext i32 %dispatcher1 to i64
  %411 = or i64 %410, -3453514855832424231
  %412 = xor i64 %410, -1
  %413 = and i64 -3453514855832424231, %412
  %414 = add i64 %413, %410
  %415 = xor i64 %414, -6463470633515220019
  %416 = xor i64 %415, %406
  %417 = xor i64 %416, %411
  %418 = xor i64 %417, %409
  %419 = mul i64 %405, %418
  %420 = trunc i64 %419 to i8
  %421 = mul i8 %392, %420
  %422 = srem i8 %421, 2
  %423 = add i64 %9, -335505812900932652
  %424 = xor i64 -335505812900932652, %9
  %425 = and i64 -335505812900932652, %9
  %426 = mul i64 2, %425
  %427 = add i64 %424, %426
  %428 = or i64 %9, 5826867668932773171
  %429 = xor i64 %9, -1
  %430 = and i64 5826867668932773171, %429
  %431 = add i64 %430, %9
  %432 = sext i32 %1 to i64
  %433 = or i64 %432, 8162172010022955830
  %434 = and i64 8162172010022955830, %432
  %435 = xor i64 8162172010022955830, %432
  %436 = or i64 %434, %435
  %437 = xor i64 %428, %436
  %438 = xor i64 %437, %427
  %439 = xor i64 %438, %423
  %440 = xor i64 %439, %433
  %441 = xor i64 %440, %431
  %442 = xor i64 %441, 5329015000644740567
  %443 = add i64 %3, 185412024627678992
  %444 = add i64 -1448923073016517707, %3
  %445 = add i64 %444, 1634335097644196699
  %446 = add i64 %19, 7565162766761937971
  %447 = sub i64 0, %19
  %448 = sub i64 7565162766761937971, %447
  %449 = xor i64 %443, %445
  %450 = xor i64 %449, %446
  %451 = xor i64 %450, 0
  %452 = xor i64 %451, %448
  %453 = mul i64 %442, %452
  %454 = trunc i64 %453 to i8
  %455 = icmp eq i8 %422, %454
  %456 = mul i8 %387, %387
  %457 = add i8 %456, %387
  %458 = srem i8 %457, 2
  %459 = icmp eq i8 %458, 0
  %460 = and i1 %455, %459
  %461 = select i1 %460, i32 388314403, i32 388314403
  %462 = xor i32 %461, -1
  %463 = and i32 %462, 0
  %464 = and i32 %461, -1
  %465 = or i32 %463, %464
  store i32 %465, i32* %2, align 4
  %466 = call i8** @bf10451871259507523800(i32* %2)
  %467 = load i8*, i8** %466, align 8
  indirectbr i8* %467, [label %loopEnd, label %268]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 5221456193252566390, i64* %206, align 8
  %468 = and i64 %7, -3754027523017725771
  %469 = or i64 3754027523017725770, %7
  %470 = sub i64 %469, 3754027523017725770
  %471 = sext i32 %1 to i64
  %472 = and i64 %471, -1907026372848768786
  %473 = xor i64 %471, -1
  %474 = or i64 1907026372848768785, %473
  %475 = xor i64 %474, -1
  %476 = and i64 %475, -1
  %477 = xor i64 %470, %468
  %478 = xor i64 %477, %472
  %479 = xor i64 %478, 1594184546203563915
  %480 = xor i64 %479, %476
  %481 = or i64 %3, -4062158274330606826
  %482 = and i64 -4062158274330606826, %3
  %483 = xor i64 -4062158274330606826, %3
  %484 = or i64 %482, %483
  %485 = sext i32 %0 to i64
  %486 = or i64 %485, -663702748381717702
  %487 = xor i64 %485, -1
  %488 = and i64 %487, -4407141341665113601
  %489 = and i64 %485, 4407141341665113600
  %490 = or i64 %488, %489
  %491 = xor i64 3755084621287330501, %490
  %492 = xor i64 %485, -1
  %493 = or i64 663702748381717701, %492
  %494 = xor i64 %493, -1
  %495 = and i64 %494, -1
  %496 = or i64 %491, %495
  %497 = sext i32 %1 to i64
  %498 = or i64 %497, -7601459872033788723
  %499 = xor i64 %497, -1
  %500 = and i64 %499, 4975632496556089729
  %501 = and i64 %497, -4975632496556089730
  %502 = or i64 %500, %501
  %503 = xor i64 -3202393717405676212, %502
  %504 = xor i64 %497, -1
  %505 = or i64 7601459872033788722, %504
  %506 = xor i64 %505, -1
  %507 = and i64 %506, -1
  %508 = or i64 %503, %507
  %509 = xor i64 %484, %481
  %510 = xor i64 %509, %508
  %511 = xor i64 %510, -1722378979104851933
  %512 = xor i64 %511, %498
  %513 = xor i64 %512, %496
  %514 = xor i64 %513, %486
  %515 = mul i64 %480, %514
  %516 = trunc i64 %515 to i32
  %517 = alloca i8**, i32 %516, align 8
  %518 = or i64 %11, -4017047463336829262
  %519 = and i64 -4017047463336829262, %11
  %520 = xor i64 -4017047463336829262, %11
  %521 = or i64 %519, %520
  %522 = or i64 %17, -3926377136974485925
  %523 = xor i64 %17, -1
  %524 = and i64 -3926377136974485925, %523
  %525 = add i64 %524, %17
  %526 = xor i64 %525, %521
  %527 = xor i64 %526, %522
  %528 = xor i64 %527, %518
  %529 = xor i64 %528, 4379262764060180691
  %530 = add i64 %19, 1166544549342076290
  %531 = sub i64 0, %19
  %532 = add i64 -1166544549342076290, %531
  %533 = sub i64 0, %532
  %534 = or i64 %15, -436419590208176196
  %535 = xor i64 %15, -1
  %536 = and i64 %535, 1476040398996158975
  %537 = and i64 %15, -1476040398996158976
  %538 = or i64 %536, %537
  %539 = xor i64 -1330122793918659005, %538
  %540 = xor i64 %15, -1
  %541 = or i64 436419590208176195, %540
  %542 = xor i64 %541, -1
  %543 = and i64 %542, -1
  %544 = or i64 %539, %543
  %545 = and i64 %9, 4759853018768562504
  %546 = xor i64 %9, -1
  %547 = or i64 -4759853018768562505, %546
  %548 = xor i64 %547, -1
  %549 = and i64 %548, -1
  %550 = xor i64 %545, %549
  %551 = xor i64 %550, %534
  %552 = xor i64 %551, 0
  %553 = xor i64 %552, %544
  %554 = xor i64 %553, %533
  %555 = xor i64 %554, %530
  %556 = mul i64 %529, %555
  %557 = trunc i64 %556 to i1
  %558 = or i64 %11, 145474063634800443
  %559 = xor i64 %11, -1
  %560 = and i64 145474063634800443, %559
  %561 = add i64 %560, %11
  %562 = add i64 %3, 1428263172147336432
  %563 = add i64 -257083544027261843, %3
  %564 = sub i64 %563, -1685346716174598275
  %565 = sext i32 %0 to i64
  %566 = or i64 %565, -1873730012159401637
  %567 = xor i64 %565, -1
  %568 = and i64 %567, 5873545247193384167
  %569 = and i64 %565, -5873545247193384168
  %570 = or i64 %568, %569
  %571 = xor i64 -5441427849839548996, %570
  %572 = xor i64 %565, -1
  %573 = or i64 1873730012159401636, %572
  %574 = xor i64 %573, -1
  %575 = and i64 %574, -1
  %576 = or i64 %571, %575
  %577 = xor i64 -7222616448261042301, %558
  %578 = xor i64 %577, %562
  %579 = xor i64 %578, %561
  %580 = xor i64 %579, %576
  %581 = xor i64 %580, %564
  %582 = xor i64 %581, %566
  %583 = sext i32 %0 to i64
  %584 = add i64 %583, 6902647323708173317
  %585 = add i64 -5784196169877642795, %583
  %586 = add i64 %585, -5759900580123735504
  %587 = and i64 %15, 8354595439451103344
  %588 = or i64 -8354595439451103345, %15
  %589 = sub i64 %588, -8354595439451103345
  %590 = xor i64 %589, %586
  %591 = xor i64 %590, %584
  %592 = xor i64 %591, 0
  %593 = xor i64 %592, %587
  %594 = mul i64 %582, %593
  %595 = trunc i64 %594 to i1
  %596 = or i64 %7, 2957006265257465713
  %597 = xor i64 %7, -1
  %598 = and i64 %597, -5181361004820763114
  %599 = and i64 %7, 5181361004820763113
  %600 = or i64 %598, %599
  %601 = xor i64 -7993469229680658073, %600
  %602 = xor i64 %7, -1
  %603 = or i64 -2957006265257465714, %602
  %604 = xor i64 %603, -1
  %605 = and i64 %604, -1
  %606 = or i64 %601, %605
  %607 = or i64 %19, 1898132158599901058
  %608 = xor i64 %19, -1
  %609 = and i64 %608, -6241133576071692094
  %610 = and i64 %19, 6241133576071692093
  %611 = or i64 %609, %610
  %612 = xor i64 -5533640604192575680, %611
  %613 = xor i64 %19, -1
  %614 = or i64 -1898132158599901059, %613
  %615 = xor i64 %614, -1
  %616 = and i64 %615, -1
  %617 = or i64 %612, %616
  %618 = xor i64 %617, %596
  %619 = xor i64 %618, %607
  %620 = xor i64 %619, %606
  %621 = xor i64 %620, -115252517277422915
  %622 = and i64 %17, 4589980288625968457
  %623 = xor i64 %17, -1
  %624 = or i64 -4589980288625968458, %623
  %625 = xor i64 %624, -1
  %626 = and i64 %625, -1
  %627 = sext i32 %dispatcher1 to i64
  %628 = or i64 %627, -989651215356809248
  %629 = xor i64 %627, -1
  %630 = and i64 %629, -1816286194728869539
  %631 = and i64 %627, 1816286194728869538
  %632 = or i64 %630, %631
  %633 = xor i64 1481486514321018557, %632
  %634 = xor i64 %627, -1
  %635 = or i64 989651215356809247, %634
  %636 = xor i64 %635, -1
  %637 = and i64 %636, -1
  %638 = or i64 %633, %637
  %639 = xor i64 %628, %622
  %640 = xor i64 %639, 0
  %641 = xor i64 %640, %638
  %642 = xor i64 %641, %626
  %643 = mul i64 %621, %642
  %644 = trunc i64 %643 to i32
  %645 = sext i32 %1 to i64
  %646 = and i64 %645, 4237523753028609963
  %647 = or i64 -4237523753028609964, %645
  %648 = sub i64 %647, -4237523753028609964
  %649 = add i64 %13, -6618720710966298594
  %650 = and i64 -6618720710966298594, %13
  %651 = or i64 -6618720710966298594, %13
  %652 = add i64 %650, %651
  %653 = xor i64 %649, %652
  %654 = xor i64 %653, %646
  %655 = xor i64 %654, %648
  %656 = xor i64 %655, 8920177360782122215
  %657 = or i64 %13, -5989946313047434678
  %658 = xor i64 %13, -1
  %659 = and i64 -5989946313047434678, %658
  %660 = add i64 %659, %13
  %661 = and i64 %15, -2158376092630238603
  %662 = or i64 2158376092630238602, %15
  %663 = sub i64 %662, 2158376092630238602
  %664 = xor i64 %660, %661
  %665 = xor i64 %664, 0
  %666 = xor i64 %665, %663
  %667 = xor i64 %666, %657
  %668 = mul i64 %656, %667
  %669 = trunc i64 %668 to i32
  %670 = add i64 %13, 1056658381469082091
  %671 = add i64 -8254789013734507775, %13
  %672 = sub i64 %671, 9135296678505961750
  %673 = and i64 %13, 5347309941668269916
  %674 = xor i64 %13, -1
  %675 = or i64 -5347309941668269917, %674
  %676 = xor i64 %675, -1
  %677 = and i64 %676, -1
  %678 = xor i64 %670, %673
  %679 = xor i64 %678, %677
  %680 = xor i64 %679, %672
  %681 = xor i64 %680, 2728224558549012927
  %682 = and i64 %207, -6788120652958861480
  %683 = xor i64 %207, -1
  %684 = or i64 6788120652958861479, %683
  %685 = xor i64 %684, -1
  %686 = and i64 %685, -1
  %687 = sext i32 %1 to i64
  %688 = or i64 %687, -5639440803830941648
  %689 = and i64 -5639440803830941648, %687
  %690 = xor i64 -5639440803830941648, %687
  %691 = or i64 %689, %690
  %692 = xor i64 %686, %682
  %693 = xor i64 %692, 0
  %694 = xor i64 %693, %691
  %695 = xor i64 %694, %688
  %696 = mul i64 %681, %695
  %697 = trunc i64 %696 to i32
  %698 = sext i32 %dispatcher1 to i64
  %699 = and i64 %698, 6437863171330081929
  %700 = xor i64 %698, -1
  %701 = or i64 -6437863171330081930, %700
  %702 = xor i64 %701, -1
  %703 = and i64 %702, -1
  %704 = and i64 %7, -1692732530385027208
  %705 = or i64 1692732530385027207, %7
  %706 = sub i64 %705, 1692732530385027207
  %707 = xor i64 %703, %704
  %708 = xor i64 %707, %706
  %709 = xor i64 %708, -4937880106913283323
  %710 = xor i64 %709, %699
  %711 = sext i32 %0 to i64
  %712 = and i64 %711, 1853951398066835829
  %713 = or i64 -1853951398066835830, %711
  %714 = sub i64 %713, -1853951398066835830
  %715 = sext i32 %1 to i64
  %716 = and i64 %715, 890297177936251598
  %717 = or i64 -890297177936251599, %715
  %718 = sub i64 %717, -890297177936251599
  %719 = xor i64 %716, %712
  %720 = xor i64 %719, %714
  %721 = xor i64 %720, 0
  %722 = xor i64 %721, %718
  %723 = mul i64 %710, %722
  %724 = trunc i64 %723 to i32
  %725 = and i64 %9, -7644089598335823359
  %726 = xor i64 %9, -1
  %727 = xor i64 -7644089598335823359, %726
  %728 = and i64 %727, -7644089598335823359
  %729 = add i64 %17, -4788488519308196748
  %730 = xor i64 -4788488519308196748, %17
  %731 = and i64 -4788488519308196748, %17
  %732 = mul i64 2, %731
  %733 = add i64 %730, %732
  %734 = and i64 %9, -2182874528808126147
  %735 = or i64 2182874528808126146, %9
  %736 = sub i64 %735, 2182874528808126146
  %737 = xor i64 %725, %729
  %738 = xor i64 %737, %733
  %739 = xor i64 %738, %736
  %740 = xor i64 %739, -4493289931762248387
  %741 = xor i64 %740, %734
  %742 = xor i64 %741, %728
  %743 = or i64 %17, -5957356135828535270
  %744 = and i64 -5957356135828535270, %17
  %745 = xor i64 -5957356135828535270, %17
  %746 = or i64 %744, %745
  %747 = add i64 %5, -8466289295765284998
  %748 = add i64 -6501439029665246862, %5
  %749 = sub i64 %748, 1964850266100038136
  %750 = or i64 %207, 727957441730174170
  %751 = and i64 727957441730174170, %207
  %752 = xor i64 727957441730174170, %207
  %753 = or i64 %751, %752
  %754 = xor i64 %749, %753
  %755 = xor i64 %754, %750
  %756 = xor i64 %755, %743
  %757 = xor i64 %756, %746
  %758 = xor i64 %757, %747
  %759 = xor i64 %758, 0
  %760 = mul i64 %742, %759
  %761 = and i64 %13, -2050508899346050333
  %762 = xor i64 %13, -1
  %763 = or i64 2050508899346050332, %762
  %764 = xor i64 %763, -1
  %765 = and i64 %764, -1
  %766 = add i64 %9, 7113634933080041008
  %767 = sub i64 0, %9
  %768 = add i64 -7113634933080041008, %767
  %769 = sub i64 0, %768
  %770 = xor i64 %761, %769
  %771 = xor i64 %770, %765
  %772 = xor i64 %771, 3444619008522331301
  %773 = xor i64 %772, %766
  %774 = add i64 %17, 5982443598084481037
  %775 = xor i64 5982443598084481037, %17
  %776 = and i64 5982443598084481037, %17
  %777 = mul i64 2, %776
  %778 = add i64 %775, %777
  %779 = or i64 %9, 3639301107311122601
  %780 = xor i64 %9, -1
  %781 = and i64 %780, 1983561263071000808
  %782 = and i64 %9, -1983561263071000809
  %783 = or i64 %781, %782
  %784 = xor i64 2956159498783645761, %783
  %785 = xor i64 %9, -1
  %786 = or i64 -3639301107311122602, %785
  %787 = xor i64 %786, -1
  %788 = and i64 %787, -1
  %789 = or i64 %784, %788
  %790 = xor i64 0, %779
  %791 = xor i64 %790, %774
  %792 = xor i64 %791, %778
  %793 = xor i64 %792, %789
  %794 = mul i64 %773, %793
  %795 = sext i32 %0 to i64
  %796 = and i64 %795, -3232909076327228546
  %797 = or i64 3232909076327228545, %795
  %798 = sub i64 %797, 3232909076327228545
  %799 = sext i32 %1 to i64
  %800 = and i64 %799, -6446211670056235991
  %801 = xor i64 %799, -1
  %802 = xor i64 -6446211670056235991, %801
  %803 = and i64 %802, -6446211670056235991
  %804 = xor i64 1896551258951373613, %798
  %805 = xor i64 %804, %803
  %806 = xor i64 %805, %796
  %807 = xor i64 %806, %800
  %808 = sext i32 %1 to i64
  %809 = or i64 %808, -3239495791938085344
  %810 = xor i64 %808, -1
  %811 = and i64 %810, 4932098351921592183
  %812 = and i64 %808, -4932098351921592184
  %813 = or i64 %811, %812
  %814 = xor i64 -7532082444280059561, %813
  %815 = xor i64 %808, -1
  %816 = or i64 3239495791938085343, %815
  %817 = xor i64 %816, -1
  %818 = and i64 %817, -1
  %819 = or i64 %814, %818
  %820 = sext i32 %1 to i64
  %821 = add i64 %820, 5839079866668564200
  %822 = sub i64 0, %820
  %823 = add i64 -5839079866668564200, %822
  %824 = sub i64 0, %823
  %825 = xor i64 %819, %824
  %826 = xor i64 %825, %809
  %827 = xor i64 %826, %821
  %828 = xor i64 %827, 0
  %829 = mul i64 %807, %828
  %830 = trunc i64 %829 to i8
  %831 = or i64 %19, -1384079078785111701
  %832 = xor i64 %19, -1
  %833 = and i64 %832, -4586581954875856504
  %834 = and i64 %19, 4586581954875856503
  %835 = or i64 %833, %834
  %836 = xor i64 3212178597743608035, %835
  %837 = xor i64 %19, -1
  %838 = or i64 1384079078785111700, %837
  %839 = xor i64 %838, -1
  %840 = and i64 %839, -1
  %841 = or i64 %836, %840
  %842 = and i64 %9, 7329881325060480185
  %843 = xor i64 %9, -1
  %844 = xor i64 7329881325060480185, %843
  %845 = and i64 %844, 7329881325060480185
  %846 = xor i64 %831, %842
  %847 = xor i64 %846, %841
  %848 = xor i64 %847, %845
  %849 = xor i64 %848, 2852065561423226471
  %850 = and i64 %13, 2646626974714417922
  %851 = xor i64 %13, -1
  %852 = or i64 -2646626974714417923, %851
  %853 = xor i64 %852, -1
  %854 = and i64 %853, -1
  %855 = add i64 %9, -3734791585259892393
  %856 = add i64 -4158232001367329742, %9
  %857 = add i64 %856, 423440416107437349
  %858 = xor i64 %850, %857
  %859 = xor i64 %858, %855
  %860 = xor i64 %859, 0
  %861 = xor i64 %860, %854
  %862 = mul i64 %849, %861
  call void @"5784248439022692321"(i32 29, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %557, i1 %595, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 %644, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %669, i1* null, i1* null, i32 %697, i32 %724, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 %760, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 %794, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* %206, i8*** %517, i8 %830, i64 0, i64 %862, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %863 = load i8**, i8*** %517, align 8
  %864 = load i8*, i8** %863, align 8
  %865 = bitcast i8* %864 to i1 (i32, i32, i1*)*
  %.reload3 = load i32, i32* %.reg2mem2, align 4
  %targetBlock = call i1 %865(i32 %.reload3, i32 %1, i1* %.out)
  %866 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %867 = load i32, i32* %866, align 4
  %868 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %869 = load i32, i32* %868, align 4
  %870 = add i32 %867, %869
  %871 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %872 = load i32, i32* %871, align 4
  %873 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %874 = load i32, i32* %873, align 4
  %875 = add i32 %872, %874
  %876 = select i1 %targetBlock, i32 %870, i32 %875
  store i32 %876, i32* %dispatcher, align 4
  %877 = load i8*, i8** %16, align 8
  %878 = load i8, i8* %877, align 1
  %879 = mul i8 %878, 2
  %880 = mul i8 %878, 2
  %881 = add i8 2, %880
  %882 = mul i8 %879, %881
  %883 = srem i8 %882, 4
  %884 = or i64 %9, -7494310928722839950
  %885 = xor i64 %9, -1
  %886 = and i64 -7494310928722839950, %885
  %887 = add i64 %886, %9
  %888 = sext i32 %1 to i64
  %889 = add i64 %888, -5840351124704602792
  %890 = xor i64 -5840351124704602792, %888
  %891 = and i64 -5840351124704602792, %888
  %892 = mul i64 2, %891
  %893 = add i64 %890, %892
  %894 = and i64 %7, -1984457231746680673
  %895 = xor i64 %7, -1
  %896 = or i64 1984457231746680672, %895
  %897 = xor i64 %896, -1
  %898 = and i64 %897, -1
  %899 = xor i64 %887, %884
  %900 = xor i64 %899, %894
  %901 = xor i64 %900, %893
  %902 = xor i64 %901, %898
  %903 = xor i64 %902, 9192235046998797503
  %904 = xor i64 %903, %889
  %905 = add i64 %207, 4940367399222709437
  %906 = sub i64 0, %207
  %907 = add i64 -4940367399222709437, %906
  %908 = sub i64 0, %907
  %909 = sext i32 %1 to i64
  %910 = add i64 %909, -8879178810797390973
  %911 = sub i64 0, %909
  %912 = add i64 8879178810797390973, %911
  %913 = sub i64 0, %912
  %914 = xor i64 %908, %913
  %915 = xor i64 %914, %910
  %916 = xor i64 %915, %905
  %917 = xor i64 %916, 0
  %918 = mul i64 %904, %917
  %919 = trunc i64 %918 to i8
  %920 = icmp eq i8 %883, %919
  %921 = mul i8 %878, %878
  %922 = mul i8 %921, %878
  %923 = add i8 %922, %878
  %924 = sext i32 %1 to i64
  %925 = add i64 %924, -5343777609284691191
  %926 = xor i64 -5343777609284691191, %924
  %927 = and i64 -5343777609284691191, %924
  %928 = mul i64 2, %927
  %929 = add i64 %926, %928
  %930 = add i64 %7, -5398018213626442267
  %931 = add i64 -2318724944262779032, %7
  %932 = sub i64 %931, 3079293269363663235
  %933 = add i64 %19, 3694271149818247004
  %934 = add i64 2796686490362897880, %19
  %935 = add i64 %934, 897584659455349124
  %936 = xor i64 5418085432145864061, %933
  %937 = xor i64 %936, %929
  %938 = xor i64 %937, %935
  %939 = xor i64 %938, %932
  %940 = xor i64 %939, %925
  %941 = xor i64 %940, %930
  %942 = sext i32 %1 to i64
  %943 = or i64 %942, -3743672100952044437
  %944 = xor i64 %942, -1
  %945 = and i64 -3743672100952044437, %944
  %946 = add i64 %945, %942
  %947 = add i64 %11, -1084907601572182239
  %948 = add i64 3671953159311371396, %11
  %949 = sub i64 %948, 4756860760883553635
  %950 = add i64 %9, -6038740811392449531
  %951 = add i64 -7895401393138752982, %9
  %952 = sub i64 %951, -1856660581746303451
  %953 = xor i64 %949, %952
  %954 = xor i64 %953, %947
  %955 = xor i64 %954, %946
  %956 = xor i64 %955, %943
  %957 = xor i64 %956, 656864600778799018
  %958 = xor i64 %957, %950
  %959 = mul i64 %941, %958
  %960 = trunc i64 %959 to i8
  %961 = srem i8 %923, %960
  %962 = icmp eq i8 %961, 0
  %963 = xor i1 %962, true
  %964 = xor i1 %920, %963
  %965 = and i1 %964, %920
  %966 = select i1 %965, i32 388314403, i32 388314403
  %967 = xor i32 %966, 0
  store i32 %967, i32* %2, align 4
  %968 = call i8** @bf10451871259507523800(i32* %2)
  %969 = load i8*, i8** %968, align 8
  indirectbr i8* %969, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  %970 = sext i32 %1 to i64
  %971 = and i64 %970, 7325401678289640370
  %972 = xor i64 %970, -1
  %973 = xor i64 7325401678289640370, %972
  %974 = and i64 %973, 7325401678289640370
  %975 = add i64 %13, 8523634942715702897
  %976 = sub i64 0, %13
  %977 = sub i64 8523634942715702897, %976
  %978 = and i64 %11, 2053722330863251089
  %979 = xor i64 %11, -1
  %980 = or i64 -2053722330863251090, %979
  %981 = xor i64 %980, -1
  %982 = and i64 %981, -1
  %983 = xor i64 %974, %977
  %984 = xor i64 %983, %978
  %985 = xor i64 %984, %982
  %986 = xor i64 %985, %975
  %987 = xor i64 %986, %971
  %988 = xor i64 %987, 5254965397744796739
  %989 = add i64 %11, -5821562638156203510
  %990 = add i64 2554587871813638624, %11
  %991 = sub i64 %990, 8376150509969842134
  %992 = or i64 %5, -7057390630542432017
  %993 = xor i64 %5, -1
  %994 = and i64 -7057390630542432017, %993
  %995 = add i64 %994, %5
  %996 = add i64 %15, -6390951091468240905
  %997 = and i64 -6390951091468240905, %15
  %998 = or i64 -6390951091468240905, %15
  %999 = add i64 %997, %998
  %1000 = xor i64 %991, %992
  %1001 = xor i64 %1000, %995
  %1002 = xor i64 %1001, %996
  %1003 = xor i64 %1002, 0
  %1004 = xor i64 %1003, %999
  %1005 = xor i64 %1004, %989
  %1006 = mul i64 %988, %1005
  %1007 = trunc i64 %1006 to i1
  ret i1 %1007

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %1008 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %1008, align 4
  %1009 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %1009, align 4
  %1010 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %1010, align 4
  %1011 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %1011, align 4
  %1012 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %1012, align 4
  %1013 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %1014 = load i32, i32* %1013, align 4
  store i32 %1014, i32* %dispatcher, align 4
  %1015 = load i8*, i8** %10, align 8
  %1016 = load i8, i8* %1015, align 1
  %1017 = mul i8 %1016, 2
  %1018 = mul i8 %1016, 2
  %1019 = add i8 2, %1018
  %1020 = mul i8 %1017, %1019
  %1021 = srem i8 %1020, 4
  %1022 = icmp eq i8 %1021, 0
  %1023 = mul i8 %1016, %1016
  %1024 = add i8 %1023, %1016
  %1025 = srem i8 %1024, 2
  %1026 = icmp eq i8 %1025, 0
  %1027 = or i1 %1022, %1026
  %1028 = select i1 %1027, i32 388314406, i32 388314406
  %1029 = xor i32 %1028, 0
  store i32 %1029, i32* %2, align 4
  %1030 = call i8** @bf10451871259507523800(i32* %2)
  %1031 = load i8*, i8** %1030, align 8
  indirectbr i8* %1031, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1032 = load i8*, i8** %8, align 8
  %1033 = load i8, i8* %1032, align 1
  %1034 = xor i8 %1033, -1
  %1035 = or i8 %1034, 1
  %1036 = xor i8 %1033, -1
  %1037 = sub i8 %1035, %1036
  %1038 = and i64 %19, 3502137480075690326
  %1039 = xor i64 %19, -1
  %1040 = or i64 -3502137480075690327, %1039
  %1041 = xor i64 %1040, -1
  %1042 = and i64 %1041, -1
  %1043 = sext i32 %1 to i64
  %1044 = or i64 %1043, -6421907381545185372
  %1045 = and i64 -6421907381545185372, %1043
  %1046 = xor i64 -6421907381545185372, %1043
  %1047 = or i64 %1045, %1046
  %1048 = and i64 %7, 580948417406534592
  %1049 = xor i64 %7, -1
  %1050 = or i64 -580948417406534593, %1049
  %1051 = xor i64 %1050, -1
  %1052 = and i64 %1051, -1
  %1053 = xor i64 %1052, %1048
  %1054 = xor i64 %1053, %1042
  %1055 = xor i64 %1054, %1044
  %1056 = xor i64 %1055, %1047
  %1057 = xor i64 %1056, 8638381819836027345
  %1058 = xor i64 %1057, %1038
  %1059 = and i64 %7, 1934898047034225368
  %1060 = or i64 -1934898047034225369, %7
  %1061 = sub i64 %1060, -1934898047034225369
  %1062 = sext i32 %0 to i64
  %1063 = or i64 %1062, 5953848295551937717
  %1064 = xor i64 %1062, -1
  %1065 = and i64 5953848295551937717, %1064
  %1066 = add i64 %1065, %1062
  %1067 = xor i64 %1066, %1059
  %1068 = xor i64 %1067, 0
  %1069 = xor i64 %1068, %1061
  %1070 = xor i64 %1069, %1063
  %1071 = mul i64 %1058, %1070
  %1072 = trunc i64 %1071 to i8
  %1073 = icmp eq i8 %1037, %1072
  %1074 = mul i8 %1033, %1033
  %1075 = xor i8 %1074, %1033
  %1076 = and i8 %1074, %1033
  %1077 = and i64 %207, 7113750534398256533
  %1078 = xor i64 %207, -1
  %1079 = xor i64 7113750534398256533, %1078
  %1080 = and i64 %1079, 7113750534398256533
  %1081 = add i64 %5, 8343896225017989237
  %1082 = sub i64 0, %5
  %1083 = sub i64 8343896225017989237, %1082
  %1084 = xor i64 %1081, %1077
  %1085 = xor i64 %1084, %1080
  %1086 = xor i64 %1085, 350073781471275823
  %1087 = xor i64 %1086, %1083
  %1088 = and i64 %19, -7344876906462097715
  %1089 = xor i64 %19, -1
  %1090 = xor i64 -7344876906462097715, %1089
  %1091 = and i64 %1090, -7344876906462097715
  %1092 = or i64 %17, 8258365038704977938
  %1093 = and i64 8258365038704977938, %17
  %1094 = xor i64 8258365038704977938, %17
  %1095 = or i64 %1093, %1094
  %1096 = xor i64 6679905655737448350, %1091
  %1097 = xor i64 %1096, %1095
  %1098 = xor i64 %1097, %1092
  %1099 = xor i64 %1098, %1088
  %1100 = mul i64 %1087, %1099
  %1101 = trunc i64 %1100 to i8
  %1102 = mul i8 %1101, %1076
  %1103 = add i8 %1075, %1102
  %1104 = mul i8 39, %1103
  %1105 = add i8 23, %1104
  %1106 = add i64 %13, 6804111336892438415
  %1107 = sub i64 0, %13
  %1108 = sub i64 6804111336892438415, %1107
  %1109 = add i64 %3, 120259509063040264
  %1110 = add i64 -3818408987163469160, %3
  %1111 = sub i64 %1110, -3938668496226509424
  %1112 = xor i64 %1111, -9057659517346639025
  %1113 = xor i64 %1112, %1108
  %1114 = xor i64 %1113, %1106
  %1115 = xor i64 %1114, %1109
  %1116 = add i64 %11, 5728498942007930132
  %1117 = xor i64 5728498942007930132, %11
  %1118 = and i64 5728498942007930132, %11
  %1119 = mul i64 2, %1118
  %1120 = add i64 %1117, %1119
  %1121 = add i64 %17, 4981298245628787687
  %1122 = and i64 4981298245628787687, %17
  %1123 = or i64 4981298245628787687, %17
  %1124 = add i64 %1122, %1123
  %1125 = add i64 %11, 1400884161455438121
  %1126 = add i64 1056442019617440049, %11
  %1127 = sub i64 %1126, -344442141837998072
  %1128 = xor i64 %1124, %1120
  %1129 = xor i64 %1128, %1127
  %1130 = xor i64 %1129, %1116
  %1131 = xor i64 %1130, %1121
  %1132 = xor i64 %1131, %1125
  %1133 = xor i64 %1132, -2493324405376414663
  %1134 = mul i64 %1115, %1133
  %1135 = trunc i64 %1134 to i8
  %1136 = mul i8 %1135, %1105
  %1137 = add i8 111, %1136
  %1138 = mul i8 %1137, 3
  %1139 = srem i8 %1138, 2
  %1140 = icmp eq i8 %1139, 0
  %1141 = or i1 %1073, %1140
  %1142 = select i1 %1141, i32 388314407, i32 388314403
  %1143 = xor i32 %1142, -1775222905
  %1144 = xor i32 %1143, -1775222909
  store i32 %1144, i32* %2, align 4
  %1145 = call i8** @bf10451871259507523800(i32* %2)
  %1146 = load i8*, i8** %1145, align 8
  indirectbr i8* %1146, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %268, %EntryBasicBlockSplit
  %1147 = load i8*, i8** %18, align 8
  %1148 = load i8, i8* %1147, align 1
  %1149 = and i8 %1148, 1
  %1150 = icmp eq i8 %1149, 1
  %1151 = mul i8 %1148, %1148
  %1152 = sub i8 %1151, -9
  %1153 = add i8 %1152, %1148
  %1154 = add i8 %1153, -9
  %1155 = srem i8 %1154, 2
  %1156 = icmp eq i8 %1155, 0
  %1157 = xor i1 %1150, true
  %1158 = and i1 %1157, true
  %1159 = and i1 %1150, false
  %1160 = or i1 %1158, %1159
  %1161 = xor i1 %1156, true
  %1162 = and i1 %1161, true
  %1163 = and i1 %1156, false
  %1164 = or i1 %1162, %1163
  %1165 = xor i1 %1160, %1164
  %1166 = xor i1 %1150, true
  %1167 = xor i1 %1156, true
  %1168 = or i1 %1166, %1167
  %1169 = xor i1 %1168, true
  %1170 = add i64 %3, -2135465095327826211
  %1171 = add i64 -2034005169231707327, %3
  %1172 = sub i64 %1171, 101459926096118884
  %1173 = add i64 %9, 9061028327955049230
  %1174 = sub i64 0, %9
  %1175 = add i64 -9061028327955049230, %1174
  %1176 = sub i64 0, %1175
  %1177 = xor i64 %1173, %1170
  %1178 = xor i64 %1177, 2182631057263299487
  %1179 = xor i64 %1178, %1176
  %1180 = xor i64 %1179, %1172
  %1181 = and i64 %15, 2038928115713020563
  %1182 = xor i64 %15, -1
  %1183 = xor i64 2038928115713020563, %1182
  %1184 = and i64 %1183, 2038928115713020563
  %1185 = sext i32 %dispatcher1 to i64
  %1186 = and i64 %1185, -3458630379105268000
  %1187 = xor i64 %1185, -1
  %1188 = xor i64 -3458630379105268000, %1187
  %1189 = and i64 %1188, -3458630379105268000
  %1190 = xor i64 %1184, 3623797116599291999
  %1191 = xor i64 %1190, %1181
  %1192 = xor i64 %1191, %1189
  %1193 = xor i64 %1192, %1186
  %1194 = mul i64 %1180, %1193
  %1195 = trunc i64 %1194 to i1
  %1196 = and i1 %1169, %1195
  %1197 = or i1 %1165, %1196
  %1198 = select i1 %1197, i32 388314400, i32 388314402
  %1199 = xor i32 %1198, 2
  store i32 %1199, i32* %2, align 4
  %1200 = call i8** @bf10451871259507523800(i32* %2)
  %1201 = load i8*, i8** %1200, align 8
  indirectbr i8* %1201, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.extracted(i32 %0, i32* %.out1) #1 {
entry:
  %1 = sext i32 %0 to i64
  %2 = add i64 %1, 5196046449119620268
  %3 = sub i64 0, %1
  %4 = sub i64 5196046449119620268, %3
  %5 = sext i32 %0 to i64
  %6 = or i64 %5, -5312438147057464363
  %7 = xor i64 %5, -1
  %8 = and i64 -5312438147057464363, %7
  %9 = add i64 %8, %5
  %10 = xor i64 %2, %4
  %11 = xor i64 %10, 8767674769404538809
  %12 = xor i64 %11, %9
  %13 = xor i64 %12, %6
  %14 = sext i32 %0 to i64
  %15 = or i64 %14, -5429910600116634657
  %16 = and i64 -5429910600116634657, %14
  %17 = xor i64 -5429910600116634657, %14
  %18 = or i64 %16, %17
  %19 = sext i32 %0 to i64
  %20 = and i64 %19, 1924095464368903490
  %21 = xor i64 %19, -1
  %22 = xor i64 1924095464368903490, %21
  %23 = and i64 %22, 1924095464368903490
  %24 = xor i64 %18, %23
  %25 = xor i64 %24, %20
  %26 = xor i64 %25, %15
  %27 = xor i64 %26, -7190948100668250487
  %28 = mul i64 %13, %27
  %29 = trunc i64 %28 to i32
  %30 = alloca i32, i32 %29, align 4
  %31 = call i64 @h9549842938191327224(i64 388314487)
  %32 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %31
  store i8* blockaddress(@main_loop.extracted.extracted, %loopEnd), i8** %32, align 8
  %33 = call i64 @h9549842938191327224(i64 388314459)
  %34 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %33
  store i8* blockaddress(@main_loop.extracted.extracted, %BogusBasicBlock), i8** %34, align 8
  %35 = call i64 @h9549842938191327224(i64 388314462)
  %36 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %35
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub.exitStub), i8** %36, align 8
  %37 = call i64 @h9549842938191327224(i64 388314475)
  %38 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %37
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub2.exitStub), i8** %38, align 8
  %39 = sext i32 %0 to i64
  %40 = and i64 %39, -7180778569731445495
  %41 = xor i64 %39, -1
  %42 = xor i64 -7180778569731445495, %41
  %43 = and i64 %42, -7180778569731445495
  %44 = sext i32 %0 to i64
  %45 = add i64 %44, -7725840697977610363
  %46 = sub i64 0, %44
  %47 = add i64 7725840697977610363, %46
  %48 = sub i64 0, %47
  %49 = sext i32 %0 to i64
  %50 = and i64 %49, 4451009981956428950
  %51 = xor i64 %49, -1
  %52 = or i64 -4451009981956428951, %51
  %53 = xor i64 %52, -1
  %54 = and i64 %53, -1
  %55 = xor i64 %54, %43
  %56 = xor i64 %55, %40
  %57 = xor i64 %56, %45
  %58 = xor i64 %57, %48
  %59 = xor i64 %58, %50
  %60 = xor i64 %59, 3391849206400792799
  %61 = sext i32 %0 to i64
  %62 = or i64 %61, 3886038457796462012
  %63 = and i64 3886038457796462012, %61
  %64 = xor i64 3886038457796462012, %61
  %65 = or i64 %63, %64
  %66 = sext i32 %0 to i64
  %67 = or i64 %66, -1583329094736246855
  %68 = xor i64 %66, -1
  %69 = and i64 %68, -1099275250046092582
  %70 = and i64 %66, 1099275250046092581
  %71 = or i64 %69, %70
  %72 = xor i64 1925416831718997347, %71
  %73 = xor i64 %66, -1
  %74 = or i64 1583329094736246854, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = or i64 %72, %76
  %78 = xor i64 %77, -3126149739209989743
  %79 = xor i64 %78, %67
  %80 = xor i64 %79, %65
  %81 = xor i64 %80, %62
  %82 = mul i64 %60, %81
  %83 = call i64 @h9549842938191327224(i64 %82)
  %84 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %83
  store i8* blockaddress(@main_loop.extracted.extracted, %defaultSwitchBasicBlock), i8** %84, align 8
  %85 = call i64 @h9549842938191327224(i64 388314429)
  %86 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %85
  store i8* blockaddress(@main_loop.extracted.extracted, %394), i8** %86, align 8
  %87 = call i64 @h9549842938191327224(i64 388314452)
  %88 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %87
  store i8* blockaddress(@main_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %88, align 8
  %89 = call i64 @h9549842938191327224(i64 388314393)
  %90 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %89
  store i8* blockaddress(@main_loop.extracted.extracted, %loopStart), i8** %90, align 8
  %lookupTable = alloca [9 x i32], align 4
  %91 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %91, align 4
  %92 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %92, align 4
  %93 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %93, align 4
  %94 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %95 = sext i32 %0 to i64
  %96 = and i64 %95, -920665479835740920
  %97 = xor i64 %95, -1
  %98 = or i64 920665479835740919, %97
  %99 = xor i64 %98, -1
  %100 = and i64 %99, -1
  %101 = sext i32 %0 to i64
  %102 = or i64 %101, -2055900865317002861
  %103 = xor i64 %101, -1
  %104 = and i64 -2055900865317002861, %103
  %105 = add i64 %104, %101
  %106 = xor i64 %102, %100
  %107 = xor i64 %106, %105
  %108 = xor i64 %107, %96
  %109 = xor i64 %108, 645857807964365599
  %110 = sext i32 %0 to i64
  %111 = add i64 %110, 1788112296327686740
  %112 = and i64 1788112296327686740, %110
  %113 = or i64 1788112296327686740, %110
  %114 = add i64 %112, %113
  %115 = sext i32 %0 to i64
  %116 = add i64 %115, 3928743463560746390
  %117 = and i64 3928743463560746390, %115
  %118 = or i64 3928743463560746390, %115
  %119 = add i64 %117, %118
  %120 = sext i32 %0 to i64
  %121 = or i64 %120, 3539804296003966808
  %122 = xor i64 %120, -1
  %123 = and i64 %122, 7981559784039892852
  %124 = and i64 %120, -7981559784039892853
  %125 = or i64 %123, %124
  %126 = xor i64 6907355337893482540, %125
  %127 = xor i64 %120, -1
  %128 = or i64 -3539804296003966809, %127
  %129 = xor i64 %128, -1
  %130 = and i64 %129, -1
  %131 = or i64 %126, %130
  %132 = xor i64 %119, %131
  %133 = xor i64 %132, %121
  %134 = xor i64 %133, 0
  %135 = xor i64 %134, %111
  %136 = xor i64 %135, %114
  %137 = xor i64 %136, %116
  %138 = mul i64 %109, %137
  %139 = trunc i64 %138 to i32
  store i32 %139, i32* %94, align 4
  %140 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %141 = sext i32 %0 to i64
  %142 = and i64 %141, -4117268149117520511
  %143 = xor i64 %141, -1
  %144 = or i64 4117268149117520510, %143
  %145 = xor i64 %144, -1
  %146 = and i64 %145, -1
  %147 = sext i32 %0 to i64
  %148 = add i64 %147, -30494486290122757
  %149 = sub i64 0, %147
  %150 = sub i64 -30494486290122757, %149
  %151 = xor i64 %148, 1077463670637603469
  %152 = xor i64 %151, %146
  %153 = xor i64 %152, %142
  %154 = xor i64 %153, %150
  %155 = sext i32 %0 to i64
  %156 = or i64 %155, 2317450282946151013
  %157 = xor i64 %155, -1
  %158 = and i64 %157, 113324184834673516
  %159 = and i64 %155, -113324184834673517
  %160 = or i64 %158, %159
  %161 = xor i64 2430720591660730633, %160
  %162 = xor i64 %155, -1
  %163 = or i64 -2317450282946151014, %162
  %164 = xor i64 %163, -1
  %165 = and i64 %164, -1
  %166 = or i64 %161, %165
  %167 = sext i32 %0 to i64
  %168 = and i64 %167, 1779483937417052718
  %169 = xor i64 %167, -1
  %170 = or i64 -1779483937417052719, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = sext i32 %0 to i64
  %174 = add i64 %173, 7585867123542715436
  %175 = sub i64 0, %173
  %176 = add i64 -7585867123542715436, %175
  %177 = sub i64 0, %176
  %178 = xor i64 -1510726153049298875, %156
  %179 = xor i64 %178, %174
  %180 = xor i64 %179, %168
  %181 = xor i64 %180, %166
  %182 = xor i64 %181, %177
  %183 = xor i64 %182, %172
  %184 = mul i64 %154, %183
  %185 = trunc i64 %184 to i32
  store i32 %185, i32* %140, align 4
  %186 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %186, align 4
  %187 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %187, align 4
  %188 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %188, align 4
  %189 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %190 = sext i32 %0 to i64
  %191 = or i64 %190, -2386981653605005546
  %192 = xor i64 %190, -1
  %193 = and i64 -2386981653605005546, %192
  %194 = add i64 %193, %190
  %195 = sext i32 %0 to i64
  %196 = add i64 %195, 6643006610919804457
  %197 = add i64 1992249167174281755, %195
  %198 = sub i64 %197, -4650757443745522702
  %199 = xor i64 %198, %196
  %200 = xor i64 %199, %194
  %201 = xor i64 %200, %191
  %202 = xor i64 %201, -4873263801951378729
  %203 = sext i32 %0 to i64
  %204 = or i64 %203, 6431215327370191016
  %205 = xor i64 %203, -1
  %206 = and i64 6431215327370191016, %205
  %207 = add i64 %206, %203
  %208 = sext i32 %0 to i64
  %209 = and i64 %208, -5883629178645300290
  %210 = or i64 5883629178645300289, %208
  %211 = sub i64 %210, 5883629178645300289
  %212 = sext i32 %0 to i64
  %213 = or i64 %212, -5754987459127542059
  %214 = and i64 -5754987459127542059, %212
  %215 = xor i64 -5754987459127542059, %212
  %216 = or i64 %214, %215
  %217 = xor i64 %209, %207
  %218 = xor i64 %217, 7797368994427745411
  %219 = xor i64 %218, %211
  %220 = xor i64 %219, %204
  %221 = xor i64 %220, %216
  %222 = xor i64 %221, %213
  %223 = mul i64 %202, %222
  %224 = trunc i64 %223 to i32
  store i32 %224, i32* %189, align 4
  %225 = sext i32 %0 to i64
  %226 = and i64 %225, -7518105071088579607
  %227 = xor i64 %225, -1
  %228 = or i64 7518105071088579606, %227
  %229 = xor i64 %228, -1
  %230 = and i64 %229, -1
  %231 = sext i32 %0 to i64
  %232 = or i64 %231, -2489698103512231837
  %233 = xor i64 %231, -1
  %234 = and i64 %233, -8382246712284330270
  %235 = and i64 %231, 8382246712284330269
  %236 = or i64 %234, %235
  %237 = xor i64 6259607394669287041, %236
  %238 = xor i64 %231, -1
  %239 = or i64 2489698103512231836, %238
  %240 = xor i64 %239, -1
  %241 = and i64 %240, -1
  %242 = or i64 %237, %241
  %243 = xor i64 %230, %242
  %244 = xor i64 %243, %226
  %245 = xor i64 %244, 6271683051428226701
  %246 = xor i64 %245, %232
  %247 = sext i32 %0 to i64
  %248 = add i64 %247, 7771477536785476015
  %249 = xor i64 7771477536785476015, %247
  %250 = and i64 7771477536785476015, %247
  %251 = mul i64 2, %250
  %252 = add i64 %249, %251
  %253 = sext i32 %0 to i64
  %254 = add i64 %253, 7814978977164562666
  %255 = xor i64 7814978977164562666, %253
  %256 = and i64 7814978977164562666, %253
  %257 = mul i64 2, %256
  %258 = add i64 %255, %257
  %259 = sext i32 %0 to i64
  %260 = or i64 %259, -5051661114044187696
  %261 = xor i64 %259, -1
  %262 = and i64 %261, -3133102826547386149
  %263 = and i64 %259, 3133102826547386148
  %264 = or i64 %262, %263
  %265 = xor i64 7881333909657686795, %264
  %266 = xor i64 %259, -1
  %267 = or i64 5051661114044187695, %266
  %268 = xor i64 %267, -1
  %269 = and i64 %268, -1
  %270 = or i64 %265, %269
  %271 = xor i64 %258, %254
  %272 = xor i64 %271, %260
  %273 = xor i64 %272, %248
  %274 = xor i64 %273, 2394826090655222853
  %275 = xor i64 %274, %252
  %276 = xor i64 %275, %270
  %277 = mul i64 %246, %276
  %278 = trunc i64 %277 to i32
  %dispatcher = alloca i32, i32 %278, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314393, i32* %30, align 4
  %279 = call i8** @bf3325468485390379012(i32* %30)
  %280 = load i8*, i8** %279, align 8
  indirectbr i8* %280, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %394
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub2.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %281 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %284 = load i32, i32* %283, align 4
  %285 = and i32 %282, %284
  %286 = or i32 %282, %284
  %287 = add i32 %285, %286
  store i32 %287, i32* %dispatcher, align 4
  %288 = load i8*, i8** %36, align 8
  %289 = load i8, i8* %288, align 1
  %290 = mul i8 %289, %289
  %291 = add i8 %290, %289
  %292 = sext i32 %dispatcher1 to i64
  %293 = or i64 %292, 1997344136908225595
  %294 = xor i64 %292, -1
  %295 = and i64 1997344136908225595, %294
  %296 = add i64 %295, %292
  %297 = sext i32 %0 to i64
  %298 = and i64 %297, -3003787552768610719
  %299 = or i64 3003787552768610718, %297
  %300 = sub i64 %299, 3003787552768610718
  %301 = xor i64 %298, %296
  %302 = xor i64 %301, %293
  %303 = xor i64 %302, -7464000949134870801
  %304 = xor i64 %303, %300
  %305 = or i64 %35, 286232781925546794
  %306 = xor i64 %35, -1
  %307 = and i64 %306, 7943176435963408255
  %308 = and i64 %35, -7943176435963408256
  %309 = or i64 %307, %308
  %310 = xor i64 7909222342870717525, %309
  %311 = xor i64 %35, -1
  %312 = or i64 -286232781925546795, %311
  %313 = xor i64 %312, -1
  %314 = and i64 %313, -1
  %315 = or i64 %310, %314
  %316 = or i64 %85, -5391208382155407322
  %317 = xor i64 %85, -1
  %318 = and i64 %317, -5013193421600323586
  %319 = and i64 %85, 5013193421600323585
  %320 = or i64 %318, %319
  %321 = xor i64 1099753171044321240, %320
  %322 = xor i64 %85, -1
  %323 = or i64 5391208382155407321, %322
  %324 = xor i64 %323, -1
  %325 = and i64 %324, -1
  %326 = or i64 %321, %325
  %327 = xor i64 %305, %326
  %328 = xor i64 %327, %315
  %329 = xor i64 %328, %316
  %330 = xor i64 %329, 7403663829267523629
  %331 = mul i64 %304, %330
  %332 = trunc i64 %331 to i8
  %333 = mul i8 %291, %332
  %334 = srem i8 %333, 2
  %335 = icmp eq i8 %334, 0
  %336 = mul i8 %289, %289
  %337 = add i8 %336, %289
  %338 = srem i8 %337, 2
  %339 = icmp eq i8 %338, 0
  %340 = and i1 %335, %339
  %341 = select i1 %340, i32 388314459, i32 388314487
  %342 = sext i32 %dispatcher1 to i64
  %343 = or i64 %342, -3766442586444927780
  %344 = and i64 -3766442586444927780, %342
  %345 = xor i64 -3766442586444927780, %342
  %346 = or i64 %344, %345
  %347 = add i64 %85, 347910587481468263
  %348 = add i64 1330139940623184567, %85
  %349 = add i64 %348, -982229353141716304
  %350 = or i64 %35, -4904543365292470440
  %351 = and i64 -4904543365292470440, %35
  %352 = xor i64 -4904543365292470440, %35
  %353 = or i64 %351, %352
  %354 = xor i64 -5212887703947125331, %349
  %355 = xor i64 %354, %343
  %356 = xor i64 %355, %346
  %357 = xor i64 %356, %350
  %358 = xor i64 %357, %347
  %359 = xor i64 %358, %353
  %360 = sext i32 %dispatcher1 to i64
  %361 = add i64 %360, -6350514618835621717
  %362 = and i64 -6350514618835621717, %360
  %363 = or i64 -6350514618835621717, %360
  %364 = add i64 %362, %363
  %365 = or i64 %83, -4398142907831217294
  %366 = xor i64 %83, -1
  %367 = and i64 %366, -4167604923719413452
  %368 = and i64 %83, 4167604923719413451
  %369 = or i64 %367, %368
  %370 = xor i64 351027011362751046, %369
  %371 = xor i64 %83, -1
  %372 = or i64 4398142907831217293, %371
  %373 = xor i64 %372, -1
  %374 = and i64 %373, -1
  %375 = or i64 %370, %374
  %376 = and i64 %83, 922032359396035486
  %377 = xor i64 %83, -1
  %378 = or i64 -922032359396035487, %377
  %379 = xor i64 %378, -1
  %380 = and i64 %379, -1
  %381 = xor i64 %380, -3870003413664633252
  %382 = xor i64 %381, %364
  %383 = xor i64 %382, %375
  %384 = xor i64 %383, %365
  %385 = xor i64 %384, %361
  %386 = xor i64 %385, %376
  %387 = mul i64 %359, %386
  %388 = trunc i64 %387 to i32
  %389 = or i32 %341, %388
  %390 = and i32 %341, 44
  %391 = sub i32 %389, %390
  store i32 %391, i32* %30, align 4
  %392 = call i8** @bf3325468485390379012(i32* %30)
  %393 = load i8*, i8** %392, align 8
  indirectbr i8* %393, [label %loopEnd, label %EntryBasicBlockSplit]

394:                                              ; preds = %394, %loopStart
  %395 = srem i32 %0, 2
  store i32 %395, i32* %.out1, align 4
  %396 = icmp eq i32 %395, 0
  %397 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %398 = load i32, i32* %397, align 4
  %399 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %400 = load i32, i32* %399, align 4
  %401 = sub i32 0, %400
  %402 = add i32 %398, %401
  %403 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %404 = load i32, i32* %403, align 4
  %405 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %406 = load i32, i32* %405, align 4
  %407 = add i32 %404, %406
  %408 = select i1 %396, i32 %402, i32 %407
  store i32 %408, i32* %dispatcher, align 4
  %409 = load i8*, i8** %34, align 8
  %410 = load i8, i8* %409, align 1
  %411 = mul i8 %410, %410
  %412 = xor i8 %411, %410
  %413 = and i8 %411, %410
  %414 = mul i8 2, %413
  %415 = add i8 %412, %414
  %416 = mul i8 %415, 3
  %417 = srem i8 %416, 2
  %418 = icmp eq i8 %417, 0
  %419 = mul i8 %410, %410
  %420 = add i8 %419, %410
  %421 = srem i8 %420, 2
  %422 = icmp eq i8 %421, 0
  %423 = xor i1 %422, true
  %424 = xor i1 %418, %423
  %425 = and i1 %424, %418
  %426 = sext i32 %dispatcher1 to i64
  %427 = or i64 %426, -7208483574564722021
  %428 = xor i64 %426, -1
  %429 = and i64 %428, 6587784747075743422
  %430 = and i64 %426, -6587784747075743423
  %431 = or i64 %429, %430
  %432 = xor i64 -4568108852977122267, %431
  %433 = xor i64 %426, -1
  %434 = or i64 7208483574564722020, %433
  %435 = xor i64 %434, -1
  %436 = and i64 %435, -1
  %437 = or i64 %432, %436
  %438 = or i64 %33, -8599618042579392623
  %439 = xor i64 %33, -1
  %440 = and i64 -8599618042579392623, %439
  %441 = add i64 %440, %33
  %442 = or i64 %89, -8989390532172877875
  %443 = and i64 -8989390532172877875, %89
  %444 = xor i64 -8989390532172877875, %89
  %445 = or i64 %443, %444
  %446 = xor i64 %437, %442
  %447 = xor i64 %446, %441
  %448 = xor i64 %447, %438
  %449 = xor i64 %448, %427
  %450 = xor i64 %449, %445
  %451 = xor i64 %450, -8293009563632820571
  %452 = and i64 %35, 2251315990703626147
  %453 = xor i64 %35, -1
  %454 = xor i64 2251315990703626147, %453
  %455 = and i64 %454, 2251315990703626147
  %456 = add i64 %85, -6990665482129266964
  %457 = add i64 8371860709891077272, %85
  %458 = add i64 %457, 3084217881689207380
  %459 = xor i64 -9191431129674312764, %452
  %460 = xor i64 %459, %456
  %461 = xor i64 %460, %458
  %462 = xor i64 %461, %455
  %463 = mul i64 %451, %462
  %464 = trunc i64 %463 to i32
  %465 = select i1 %425, i32 %464, i32 388314487
  %466 = xor i32 %465, -1
  %467 = and i32 %466, 2087625875
  %468 = and i32 %465, -2087625876
  %469 = or i32 %467, %468
  %470 = xor i32 %469, 2087625904
  store i32 %470, i32* %30, align 4
  %471 = call i8** @bf3325468485390379012(i32* %30)
  %472 = load i8*, i8** %471, align 8
  indirectbr i8* %472, [label %loopEnd, label %394]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub2.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %473 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %473, align 4
  %474 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %474, align 4
  %475 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %475, align 4
  %476 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %476, align 4
  %477 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %477, align 4
  %478 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %479 = load i32, i32* %478, align 4
  store i32 %479, i32* %dispatcher, align 4
  %480 = load i8*, i8** %34, align 8
  %481 = load i8, i8* %480, align 1
  %482 = and i8 %481, 1
  %483 = icmp eq i8 %482, 1
  %484 = mul i8 %481, %481
  %485 = add i8 %484, %481
  %486 = srem i8 %485, 2
  %487 = icmp eq i8 %486, 0
  %488 = or i1 %483, %487
  %489 = select i1 %488, i32 388314452, i32 388314452
  %490 = or i32 %489, 0
  %491 = or i64 %87, 2090829675307592891
  %492 = xor i64 %87, -1
  %493 = and i64 %492, -5311304994808648211
  %494 = and i64 %87, 5311304994808648210
  %495 = or i64 %493, %494
  %496 = xor i64 -6102823087338569386, %495
  %497 = xor i64 %87, -1
  %498 = or i64 -2090829675307592892, %497
  %499 = xor i64 %498, -1
  %500 = and i64 %499, -1
  %501 = or i64 %496, %500
  %502 = or i64 %37, -1954324359258403299
  %503 = xor i64 %37, -1
  %504 = and i64 -1954324359258403299, %503
  %505 = add i64 %504, %37
  %506 = xor i64 %501, %502
  %507 = xor i64 %506, 4026733382006927845
  %508 = xor i64 %507, %505
  %509 = xor i64 %508, %491
  %510 = add i64 %31, -9000014338818519974
  %511 = sub i64 0, %31
  %512 = add i64 9000014338818519974, %511
  %513 = sub i64 0, %512
  %514 = sext i32 %0 to i64
  %515 = and i64 %514, -158941359979523638
  %516 = xor i64 %514, -1
  %517 = or i64 158941359979523637, %516
  %518 = xor i64 %517, -1
  %519 = and i64 %518, -1
  %520 = add i64 %89, -2785174124373167614
  %521 = add i64 7862169647686254792, %89
  %522 = sub i64 %521, -7799400301650129210
  %523 = xor i64 %520, %515
  %524 = xor i64 %523, %522
  %525 = xor i64 %524, %510
  %526 = xor i64 %525, %519
  %527 = xor i64 %526, 0
  %528 = xor i64 %527, %513
  %529 = mul i64 %509, %528
  %530 = trunc i64 %529 to i32
  %531 = and i32 %489, %530
  %532 = sub i32 %490, %531
  store i32 %532, i32* %30, align 4
  %533 = call i8** @bf3325468485390379012(i32* %30)
  %534 = load i8*, i8** %533, align 8
  indirectbr i8* %534, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %535 = load i8*, i8** %34, align 8
  %536 = load i8, i8* %535, align 1
  %537 = mul i8 %536, 2
  %538 = mul i8 %536, 2
  %539 = add i8 2, %538
  %540 = mul i8 %537, %539
  %541 = srem i8 %540, 4
  %542 = or i64 %87, -7836443794679111801
  %543 = and i64 -7836443794679111801, %87
  %544 = xor i64 -7836443794679111801, %87
  %545 = or i64 %543, %544
  %546 = add i64 %37, -7841808664285574027
  %547 = sub i64 0, %37
  %548 = add i64 7841808664285574027, %547
  %549 = sub i64 0, %548
  %550 = xor i64 %542, -7458798163294346605
  %551 = xor i64 %550, %546
  %552 = xor i64 %551, %545
  %553 = xor i64 %552, %549
  %554 = add i64 %37, -5485107464657862643
  %555 = add i64 7032930357693639551, %37
  %556 = add i64 %555, 5928706251358049422
  %557 = or i64 %83, -4226617822433337791
  %558 = and i64 -4226617822433337791, %83
  %559 = xor i64 -4226617822433337791, %83
  %560 = or i64 %558, %559
  %561 = add i64 %37, 6222671729496585125
  %562 = and i64 6222671729496585125, %37
  %563 = or i64 6222671729496585125, %37
  %564 = add i64 %562, %563
  %565 = xor i64 %556, %554
  %566 = xor i64 %565, %561
  %567 = xor i64 %566, %557
  %568 = xor i64 %567, %564
  %569 = xor i64 %568, 0
  %570 = xor i64 %569, %560
  %571 = mul i64 %553, %570
  %572 = trunc i64 %571 to i8
  %573 = icmp eq i8 %541, %572
  %574 = mul i8 %536, %536
  %575 = sub i8 %574, 124
  %576 = add i8 %575, %536
  %577 = add i8 %576, 124
  %578 = and i64 %89, 7152088783876183011
  %579 = xor i64 %89, -1
  %580 = xor i64 7152088783876183011, %579
  %581 = and i64 %580, 7152088783876183011
  %582 = sext i32 %dispatcher1 to i64
  %583 = and i64 %582, 9038754707770695857
  %584 = xor i64 %582, -1
  %585 = xor i64 9038754707770695857, %584
  %586 = and i64 %585, 9038754707770695857
  %587 = add i64 %83, 1184728921049913477
  %588 = sub i64 0, %83
  %589 = sub i64 1184728921049913477, %588
  %590 = xor i64 %581, %578
  %591 = xor i64 %590, %587
  %592 = xor i64 %591, -5814210305704155669
  %593 = xor i64 %592, %583
  %594 = xor i64 %593, %589
  %595 = xor i64 %594, %586
  %596 = or i64 %87, 9004864735443728758
  %597 = xor i64 %87, -1
  %598 = and i64 %597, 3416591167355430599
  %599 = and i64 %87, -3416591167355430600
  %600 = or i64 %598, %599
  %601 = xor i64 6025147062946209713, %600
  %602 = xor i64 %87, -1
  %603 = or i64 -9004864735443728759, %602
  %604 = xor i64 %603, -1
  %605 = and i64 %604, -1
  %606 = or i64 %601, %605
  %607 = and i64 %37, 1011372885131229367
  %608 = xor i64 %37, -1
  %609 = xor i64 1011372885131229367, %608
  %610 = and i64 %609, 1011372885131229367
  %611 = xor i64 %606, %607
  %612 = xor i64 %611, %610
  %613 = xor i64 %612, 6826590497004500358
  %614 = xor i64 %613, %596
  %615 = mul i64 %595, %614
  %616 = trunc i64 %615 to i8
  %617 = srem i8 %577, %616
  %618 = sext i32 %0 to i64
  %619 = add i64 %618, -3218644672911675442
  %620 = add i64 -3554542058414163701, %618
  %621 = add i64 %620, 335897385502488259
  %622 = sext i32 %0 to i64
  %623 = and i64 %622, -8754962268260672229
  %624 = xor i64 %622, -1
  %625 = or i64 8754962268260672228, %624
  %626 = xor i64 %625, -1
  %627 = and i64 %626, -1
  %628 = or i64 %35, 1382341701837937633
  %629 = and i64 1382341701837937633, %35
  %630 = xor i64 1382341701837937633, %35
  %631 = or i64 %629, %630
  %632 = xor i64 %621, %623
  %633 = xor i64 %632, -140467891229718251
  %634 = xor i64 %633, %627
  %635 = xor i64 %634, %619
  %636 = xor i64 %635, %628
  %637 = xor i64 %636, %631
  %638 = and i64 %37, -2028808473969502786
  %639 = or i64 2028808473969502785, %37
  %640 = sub i64 %639, 2028808473969502785
  %641 = and i64 %31, 1088594543218414907
  %642 = xor i64 %31, -1
  %643 = or i64 -1088594543218414908, %642
  %644 = xor i64 %643, -1
  %645 = and i64 %644, -1
  %646 = add i64 %87, 3406169141623560229
  %647 = sub i64 0, %87
  %648 = add i64 -3406169141623560229, %647
  %649 = sub i64 0, %648
  %650 = xor i64 %645, %646
  %651 = xor i64 %650, 0
  %652 = xor i64 %651, %638
  %653 = xor i64 %652, %641
  %654 = xor i64 %653, %649
  %655 = xor i64 %654, %640
  %656 = mul i64 %637, %655
  %657 = trunc i64 %656 to i8
  %658 = icmp eq i8 %617, %657
  %659 = and i1 %573, %658
  %660 = select i1 %659, i32 388314452, i32 388314487
  %661 = xor i32 %660, 35
  store i32 %661, i32* %30, align 4
  %662 = call i8** @bf3325468485390379012(i32* %30)
  %663 = load i8*, i8** %662, align 8
  indirectbr i8* %663, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %394, %EntryBasicBlockSplit
  %664 = load i8*, i8** %86, align 8
  %665 = load i8, i8* %664, align 1
  %666 = and i8 %665, 1
  %667 = sext i32 %0 to i64
  %668 = or i64 %667, 5787010851632626012
  %669 = xor i64 %667, -1
  %670 = and i64 5787010851632626012, %669
  %671 = add i64 %670, %667
  %672 = sext i32 %0 to i64
  %673 = and i64 %672, 3638686277745404584
  %674 = or i64 -3638686277745404585, %672
  %675 = sub i64 %674, -3638686277745404585
  %676 = and i64 %37, -2120648882157584262
  %677 = xor i64 %37, -1
  %678 = or i64 2120648882157584261, %677
  %679 = xor i64 %678, -1
  %680 = and i64 %679, -1
  %681 = xor i64 %671, %675
  %682 = xor i64 %681, %680
  %683 = xor i64 %682, %668
  %684 = xor i64 %683, %673
  %685 = xor i64 %684, %676
  %686 = xor i64 %685, -62366055850207513
  %687 = or i64 %87, 828662130346748082
  %688 = and i64 828662130346748082, %87
  %689 = xor i64 828662130346748082, %87
  %690 = or i64 %688, %689
  %691 = and i64 %89, 6381160704526811797
  %692 = or i64 -6381160704526811798, %89
  %693 = sub i64 %692, -6381160704526811798
  %694 = xor i64 %690, %693
  %695 = xor i64 %694, 0
  %696 = xor i64 %695, %687
  %697 = xor i64 %696, %691
  %698 = mul i64 %686, %697
  %699 = trunc i64 %698 to i8
  %700 = icmp eq i8 %666, %699
  %701 = mul i8 %665, %665
  %702 = add i8 %701, %665
  %703 = add i64 %31, -3492644568335053210
  %704 = xor i64 -3492644568335053210, %31
  %705 = and i64 -3492644568335053210, %31
  %706 = mul i64 2, %705
  %707 = add i64 %704, %706
  %708 = or i64 %83, -8430387006049655166
  %709 = xor i64 %83, -1
  %710 = and i64 %709, 6375658146285407887
  %711 = and i64 %83, -6375658146285407888
  %712 = or i64 %710, %711
  %713 = xor i64 -3207727442928228339, %712
  %714 = xor i64 %83, -1
  %715 = or i64 8430387006049655165, %714
  %716 = xor i64 %715, -1
  %717 = and i64 %716, -1
  %718 = or i64 %713, %717
  %719 = xor i64 %718, %707
  %720 = xor i64 %719, %708
  %721 = xor i64 %720, %703
  %722 = xor i64 %721, -1964984219346030609
  %723 = and i64 %83, -6097353774866561126
  %724 = xor i64 %83, -1
  %725 = or i64 6097353774866561125, %724
  %726 = xor i64 %725, -1
  %727 = and i64 %726, -1
  %728 = add i64 %89, 8450512658762607111
  %729 = and i64 8450512658762607111, %89
  %730 = or i64 8450512658762607111, %89
  %731 = add i64 %729, %730
  %732 = and i64 %83, -5747796109855736494
  %733 = xor i64 %83, -1
  %734 = or i64 5747796109855736493, %733
  %735 = xor i64 %734, -1
  %736 = and i64 %735, -1
  %737 = xor i64 %727, %728
  %738 = xor i64 %737, %731
  %739 = xor i64 %738, %723
  %740 = xor i64 %739, %732
  %741 = xor i64 %740, 876726627038010669
  %742 = xor i64 %741, %736
  %743 = mul i64 %722, %742
  %744 = trunc i64 %743 to i8
  %745 = mul i8 %702, %744
  %746 = and i64 %83, -9078533390928916151
  %747 = or i64 9078533390928916150, %83
  %748 = sub i64 %747, 9078533390928916150
  %749 = or i64 %31, 3304593400608750025
  %750 = xor i64 %31, -1
  %751 = and i64 3304593400608750025, %750
  %752 = add i64 %751, %31
  %753 = xor i64 %749, %748
  %754 = xor i64 %753, %752
  %755 = xor i64 %754, -8754373783594110529
  %756 = xor i64 %755, %746
  %757 = add i64 %85, -321174597643815383
  %758 = and i64 -321174597643815383, %85
  %759 = or i64 -321174597643815383, %85
  %760 = add i64 %758, %759
  %761 = or i64 %87, -1953769812463531958
  %762 = and i64 -1953769812463531958, %87
  %763 = xor i64 -1953769812463531958, %87
  %764 = or i64 %762, %763
  %765 = sext i32 %0 to i64
  %766 = or i64 %765, 8178755119444009263
  %767 = xor i64 %765, -1
  %768 = and i64 8178755119444009263, %767
  %769 = add i64 %768, %765
  %770 = xor i64 %769, 1789910024687910014
  %771 = xor i64 %770, %760
  %772 = xor i64 %771, %757
  %773 = xor i64 %772, %761
  %774 = xor i64 %773, %764
  %775 = xor i64 %774, %766
  %776 = mul i64 %756, %775
  %777 = trunc i64 %776 to i8
  %778 = srem i8 %745, %777
  %779 = icmp eq i8 %778, 0
  %780 = or i1 %700, %779
  %781 = select i1 %780, i32 388314462, i32 388314393
  %782 = xor i32 %781, 71
  store i32 %782, i32* %30, align 4
  %783 = call i8** @bf3325468485390379012(i32* %30)
  %784 = load i8*, i8** %783, align 8
  indirectbr i8* %784, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.17.extracted(i64 %0, i64* %.out7, i1 %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314368)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.17.extracted, %.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314396)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.17.extracted, %"2"), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314452)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.17.extracted, %codeRepl.exitStub.exitStub), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314448)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.17.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314420)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.17.extracted, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem9 = alloca i8**, align 8
  %13 = or i64 %0, 3467849655201138152
  %14 = xor i64 %0, -1
  %15 = and i64 %14, -2074399123664512619
  %16 = and i64 %0, 2074399123664512618
  %17 = or i64 %15, %16
  %18 = xor i64 -3236392549738226563, %17
  %19 = xor i64 %0, -1
  %20 = or i64 -3467849655201138153, %19
  %21 = xor i64 %20, -1
  %22 = and i64 %21, -1
  %23 = or i64 %18, %22
  %24 = add i64 %0, 1901057455644323684
  %25 = and i64 1901057455644323684, %0
  %26 = or i64 1901057455644323684, %0
  %27 = add i64 %25, %26
  %28 = xor i64 %24, %23
  %29 = xor i64 %28, %27
  %30 = xor i64 %29, 7074665914311288961
  %31 = xor i64 %30, %13
  %32 = or i64 %0, 4221784665533161505
  %33 = xor i64 %0, -1
  %34 = and i64 4221784665533161505, %33
  %35 = add i64 %34, %0
  %36 = or i64 %0, -7911053646885697381
  %37 = and i64 -7911053646885697381, %0
  %38 = xor i64 -7911053646885697381, %0
  %39 = or i64 %37, %38
  %40 = add i64 %0, -7114760725452822669
  %41 = xor i64 -7114760725452822669, %0
  %42 = and i64 -7114760725452822669, %0
  %43 = mul i64 2, %42
  %44 = add i64 %41, %43
  %45 = xor i64 %39, %36
  %46 = xor i64 %45, %40
  %47 = xor i64 %46, %32
  %48 = xor i64 %47, %35
  %49 = xor i64 %48, -696925953687709823
  %50 = xor i64 %49, %44
  %51 = mul i64 %31, %50
  %52 = trunc i64 %51 to i32
  %.reg2mem6 = alloca i8**, i32 %52, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %53 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.17.extracted, %BogusBasciBlock), i8** %53, align 8
  %54 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %54, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.17.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %55 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %55, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.17.extracted, %"2"), i8** %.reload5, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %56, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.17.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %57, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted.17.extracted, %codeRepl.exitStub.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %58 = load i8*, i8** %.reload, align 8
  indirectbr i8* %58, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %codeRepl.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %59 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.17.extracted, %codeRepl.exitStub.exitStub), i8** %59, align 8
  %60 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.17.extracted, %EntryBasicBlockSplit), i8** %60, align 8
  %61 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.17.extracted, %BogusBasciBlock), i8** %61, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %62 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %62, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %codeRepl.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %63 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %63, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %codeRepl.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 %0, i64* %.out7, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %64 = select i1 %1, i8** %.reload7, i8** %.reload10
  %65 = load i8*, i8** %64, align 8
  indirectbr i8* %65, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %codeRepl.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

codeRepl.exitStub.exitStub:                       ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.18.extracted(i32 %0, i32* %.out, i32* %.out1, i32* %.out2, i1* %.out3, i1 %1, i1* %.out4) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = sext i32 %0 to i64
  %4 = add i64 %3, 6392831946189601506
  %5 = and i64 6392831946189601506, %3
  %6 = or i64 6392831946189601506, %3
  %7 = add i64 %5, %6
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, 3259465938052826594
  %10 = or i64 -3259465938052826595, %8
  %11 = sub i64 %10, -3259465938052826595
  %12 = xor i64 %4, %7
  %13 = xor i64 %12, %9
  %14 = xor i64 %13, %11
  %15 = xor i64 %14, -2620145834749974805
  %16 = sext i32 %0 to i64
  %17 = or i64 %16, 8088841186911377621
  %18 = xor i64 %16, -1
  %19 = and i64 8088841186911377621, %18
  %20 = add i64 %19, %16
  %21 = sext i32 %0 to i64
  %22 = and i64 %21, -3578547759219358997
  %23 = xor i64 %21, -1
  %24 = xor i64 -3578547759219358997, %23
  %25 = and i64 %24, -3578547759219358997
  %26 = sext i32 %0 to i64
  %27 = or i64 %26, -2733163346455848709
  %28 = xor i64 %26, -1
  %29 = and i64 %28, -3749933810710986604
  %30 = and i64 %26, 3749933810710986603
  %31 = or i64 %29, %30
  %32 = xor i64 1289249383933139055, %31
  %33 = xor i64 %26, -1
  %34 = or i64 2733163346455848708, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, -1
  %37 = or i64 %32, %36
  %38 = xor i64 %22, %37
  %39 = xor i64 %38, %27
  %40 = xor i64 %39, %20
  %41 = xor i64 %40, 3465712550225491253
  %42 = xor i64 %41, %25
  %43 = xor i64 %42, %17
  %44 = mul i64 %15, %43
  %45 = call i64 @h9549842938191327224(i64 %44)
  %46 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %45
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.exitStub.exitStub), i8** %46, align 8
  %47 = sext i32 %0 to i64
  %48 = or i64 %47, -3428726063446305194
  %49 = xor i64 %47, -1
  %50 = and i64 -3428726063446305194, %49
  %51 = add i64 %50, %47
  %52 = sext i32 %0 to i64
  %53 = and i64 %52, 7995486441315277746
  %54 = or i64 -7995486441315277747, %52
  %55 = sub i64 %54, -7995486441315277747
  %56 = sext i32 %0 to i64
  %57 = or i64 %56, -4429676993831862088
  %58 = and i64 -4429676993831862088, %56
  %59 = xor i64 -4429676993831862088, %56
  %60 = or i64 %58, %59
  %61 = xor i64 -5824554975426647085, %55
  %62 = xor i64 %61, %51
  %63 = xor i64 %62, %60
  %64 = xor i64 %63, %48
  %65 = xor i64 %64, %53
  %66 = xor i64 %65, %57
  %67 = sext i32 %0 to i64
  %68 = add i64 %67, 6049662982907261868
  %69 = sub i64 0, %67
  %70 = sub i64 6049662982907261868, %69
  %71 = sext i32 %0 to i64
  %72 = and i64 %71, -312044798308739137
  %73 = xor i64 %71, -1
  %74 = xor i64 -312044798308739137, %73
  %75 = and i64 %74, -312044798308739137
  %76 = sext i32 %0 to i64
  %77 = and i64 %76, -7122837983436293032
  %78 = xor i64 %76, -1
  %79 = or i64 7122837983436293031, %78
  %80 = xor i64 %79, -1
  %81 = and i64 %80, -1
  %82 = xor i64 -4190564867728612178, %72
  %83 = xor i64 %82, %75
  %84 = xor i64 %83, %68
  %85 = xor i64 %84, %77
  %86 = xor i64 %85, %70
  %87 = xor i64 %86, %81
  %88 = mul i64 %66, %87
  %89 = call i64 @h9549842938191327224(i64 %88)
  %90 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %89
  store i8* blockaddress(@main_loop.extracted.18.extracted, %"2"), i8** %90, align 8
  %91 = call i64 @h9549842938191327224(i64 388314431)
  %92 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %91
  store i8* blockaddress(@main_loop.extracted.18.extracted, %EntryBasicBlockSplit), i8** %92, align 8
  %93 = call i64 @h9549842938191327224(i64 388314536)
  %94 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %93
  store i8* blockaddress(@main_loop.extracted.18.extracted, %BogusBasciBlock), i8** %94, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %95 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18.extracted, %BogusBasciBlock), i8** %95, align 8
  %96 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %96, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %97 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %97, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %"2"), i8** %.reload5, align 8
  %98 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %98, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %99 = load i8*, i8** %.reload, align 8
  indirectbr i8* %99, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %100 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.exitStub.exitStub), i8** %100, align 8
  %101 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.18.extracted, %EntryBasicBlockSplit), i8** %101, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %102 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %102, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %103 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %103, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i32 %0, i32* %.out, align 4
  %104 = add i64 %91, 5707987253389529901
  %105 = sub i64 0, %91
  %106 = add i64 -5707987253389529901, %105
  %107 = sub i64 0, %106
  %108 = sext i32 %0 to i64
  %109 = or i64 %108, 4528100422896737869
  %110 = and i64 4528100422896737869, %108
  %111 = xor i64 4528100422896737869, %108
  %112 = or i64 %110, %111
  %113 = xor i64 %112, %104
  %114 = xor i64 %113, %109
  %115 = xor i64 %114, %107
  %116 = xor i64 %115, -2231803681035322635
  %117 = or i64 %91, 7960361066184970623
  %118 = and i64 7960361066184970623, %91
  %119 = xor i64 7960361066184970623, %91
  %120 = or i64 %118, %119
  %121 = add i64 %45, 2046901167315245198
  %122 = xor i64 2046901167315245198, %45
  %123 = and i64 2046901167315245198, %45
  %124 = mul i64 2, %123
  %125 = add i64 %122, %124
  %126 = xor i64 -3087525527164738537, %117
  %127 = xor i64 %126, %125
  %128 = xor i64 %127, %121
  %129 = xor i64 %128, %120
  %130 = mul i64 %116, %129
  %131 = trunc i64 %130 to i32
  %132 = mul i32 %0, %131
  store i32 %132, i32* %.out1, align 4
  %133 = srem i32 %132, 2
  store i32 %133, i32* %.out2, align 4
  %134 = icmp eq i32 %133, 0
  store i1 %134, i1* %.out3, align 1
  %135 = or i1 %1, %134
  store i1 %135, i1* %.out4, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %136 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %136, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.20.extracted(i32 %0, i1* %.out1, i32 %.reload2) #1 {
entry:
  %1 = sext i32 %.reload2 to i64
  %2 = or i64 %1, -4880461412450045216
  %3 = and i64 -4880461412450045216, %1
  %4 = xor i64 -4880461412450045216, %1
  %5 = or i64 %3, %4
  %6 = sext i32 %.reload2 to i64
  %7 = add i64 %6, -6539437072773039559
  %8 = and i64 -6539437072773039559, %6
  %9 = or i64 -6539437072773039559, %6
  %10 = add i64 %8, %9
  %11 = sext i32 %.reload2 to i64
  %12 = or i64 %11, -5995119621613450429
  %13 = xor i64 %11, -1
  %14 = and i64 %13, 6705707476036476060
  %15 = and i64 %11, -6705707476036476061
  %16 = or i64 %14, %15
  %17 = xor i64 -1026122402832820257, %16
  %18 = xor i64 %11, -1
  %19 = or i64 5995119621613450428, %18
  %20 = xor i64 %19, -1
  %21 = and i64 %20, -1
  %22 = or i64 %17, %21
  %23 = xor i64 %7, %5
  %24 = xor i64 %23, 7653203859615399613
  %25 = xor i64 %24, %12
  %26 = xor i64 %25, %22
  %27 = xor i64 %26, %2
  %28 = xor i64 %27, %10
  %29 = sext i32 %0 to i64
  %30 = and i64 %29, -208707776922832084
  %31 = xor i64 %29, -1
  %32 = or i64 208707776922832083, %31
  %33 = xor i64 %32, -1
  %34 = and i64 %33, -1
  %35 = sext i32 %.reload2 to i64
  %36 = and i64 %35, 5420127233601518830
  %37 = xor i64 %35, -1
  %38 = or i64 -5420127233601518831, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = xor i64 %40, -5451363082972877675
  %42 = xor i64 %41, %30
  %43 = xor i64 %42, %34
  %44 = xor i64 %43, %36
  %45 = mul i64 %28, %44
  %46 = trunc i64 %45 to i32
  %47 = alloca i32, i32 %46, align 4
  %48 = call i64 @h9549842938191327224(i64 388314461)
  %49 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %48
  store i8* blockaddress(@main_loop.extracted.20.extracted, %"2"), i8** %49, align 8
  %50 = call i64 @h9549842938191327224(i64 388314539)
  %51 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %50
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub.exitStub), i8** %51, align 8
  %52 = call i64 @h9549842938191327224(i64 388314536)
  %53 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %52
  store i8* blockaddress(@main_loop.extracted.20.extracted, %EntryBasicBlockSplit), i8** %53, align 8
  %54 = call i64 @h9549842938191327224(i64 388314455)
  %55 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %54
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub2.exitStub), i8** %55, align 8
  %56 = sext i32 %.reload2 to i64
  %57 = or i64 %56, 7113152991976799788
  %58 = xor i64 %56, -1
  %59 = and i64 %58, 283099570538418076
  %60 = and i64 %56, -283099570538418077
  %61 = or i64 %59, %60
  %62 = xor i64 7015266242915905968, %61
  %63 = xor i64 %56, -1
  %64 = or i64 -7113152991976799789, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = sext i32 %0 to i64
  %69 = or i64 %68, 3824515180632689669
  %70 = xor i64 %68, -1
  %71 = and i64 %70, -5130279621747790339
  %72 = and i64 %68, 5130279621747790338
  %73 = or i64 %71, %72
  %74 = xor i64 -8223857046143933960, %73
  %75 = xor i64 %68, -1
  %76 = or i64 -3824515180632689670, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = or i64 %74, %78
  %80 = sext i32 %0 to i64
  %81 = add i64 %80, 4874113002859040329
  %82 = add i64 -5980387045310998662, %80
  %83 = add i64 %82, -7592244025539512625
  %84 = xor i64 %79, %67
  %85 = xor i64 %84, -5495203691420773689
  %86 = xor i64 %85, %81
  %87 = xor i64 %86, %83
  %88 = xor i64 %87, %69
  %89 = xor i64 %88, %57
  %90 = sext i32 %.reload2 to i64
  %91 = or i64 %90, 7531942130663021350
  %92 = xor i64 %90, -1
  %93 = and i64 %92, 2920798983090194846
  %94 = and i64 %90, -2920798983090194847
  %95 = or i64 %93, %94
  %96 = xor i64 4615651153871246008, %95
  %97 = xor i64 %90, -1
  %98 = or i64 -7531942130663021351, %97
  %99 = xor i64 %98, -1
  %100 = and i64 %99, -1
  %101 = or i64 %96, %100
  %102 = sext i32 %.reload2 to i64
  %103 = or i64 %102, -4571390061536251032
  %104 = xor i64 %102, -1
  %105 = and i64 -4571390061536251032, %104
  %106 = add i64 %105, %102
  %107 = sext i32 %.reload2 to i64
  %108 = or i64 %107, 8387847134850112924
  %109 = xor i64 %107, -1
  %110 = and i64 %109, -2201731714045598045
  %111 = and i64 %107, 2201731714045598044
  %112 = or i64 %110, %111
  %113 = xor i64 -7703831382532981953, %112
  %114 = xor i64 %107, -1
  %115 = or i64 -8387847134850112925, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = or i64 %113, %117
  %119 = xor i64 1454809147976025028, %91
  %120 = xor i64 %119, %106
  %121 = xor i64 %120, %101
  %122 = xor i64 %121, %108
  %123 = xor i64 %122, %103
  %124 = xor i64 %123, %118
  %125 = mul i64 %89, %124
  %126 = call i64 @h9549842938191327224(i64 %125)
  %127 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %126
  store i8* blockaddress(@main_loop.extracted.20.extracted, %BogusBasciBlock), i8** %127, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %128 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20.extracted, %BogusBasciBlock), i8** %128, align 8
  %129 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %129, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %130 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %130, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %"2"), i8** %.reload6, align 8
  %131 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %131, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub.exitStub), i8** %.reload9, align 8
  %132 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %132, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub2.exitStub), i8** %.reload12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %133 = load i8*, i8** %.reload, align 8
  indirectbr i8* %133, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %134 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20.extracted, %"2"), i8** %134, align 8
  %135 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub.exitStub), i8** %135, align 8
  %136 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.20.extracted, %EntryBasicBlockSplit), i8** %136, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %137 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %137, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %138 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %138, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %139 = icmp eq i32 %0, 0
  store i1 %139, i1* %.out1, align 1
  %140 = sext i32 %.reload2 to i64
  %141 = or i64 %140, 7034157354461499115
  %142 = and i64 7034157354461499115, %140
  %143 = xor i64 7034157354461499115, %140
  %144 = or i64 %142, %143
  %145 = sext i32 %0 to i64
  %146 = or i64 %145, -482924060106062756
  %147 = and i64 -482924060106062756, %145
  %148 = xor i64 -482924060106062756, %145
  %149 = or i64 %147, %148
  %150 = xor i64 %149, %144
  %151 = xor i64 %150, -4165599654963716439
  %152 = xor i64 %151, %146
  %153 = xor i64 %152, %141
  %154 = sext i32 %.reload2 to i64
  %155 = or i64 %154, -8261490709596145058
  %156 = xor i64 %154, -1
  %157 = and i64 %156, 9112478448709599343
  %158 = and i64 %154, -9112478448709599344
  %159 = or i64 %157, %158
  %160 = xor i64 -923432369834558927, %159
  %161 = xor i64 %154, -1
  %162 = or i64 8261490709596145057, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = or i64 %160, %164
  %166 = and i64 %50, -6879777635018377758
  %167 = xor i64 %50, -1
  %168 = xor i64 -6879777635018377758, %167
  %169 = and i64 %168, -6879777635018377758
  %170 = xor i64 %165, %169
  %171 = xor i64 %170, %166
  %172 = xor i64 %171, %155
  %173 = xor i64 %172, -8211066093036942542
  %174 = mul i64 %153, %173
  %175 = trunc i64 %174 to i32
  %176 = srem i32 %.reload2, %175
  %177 = icmp eq i32 %176, 0
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %178 = select i1 %177, i8** %.reload8, i8** %.reload11
  %179 = load i8*, i8** %178, align 8
  indirectbr i8* %179, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub2.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.21.extracted(i32 %0, i32 %1, i1* %.out) #1 {
entry:
  %2 = sext i32 %1 to i64
  %3 = and i64 %2, 7120830393527357738
  %4 = xor i64 %2, -1
  %5 = xor i64 7120830393527357738, %4
  %6 = and i64 %5, 7120830393527357738
  %7 = sext i32 %0 to i64
  %8 = add i64 %7, -2128213054985238288
  %9 = xor i64 -2128213054985238288, %7
  %10 = and i64 -2128213054985238288, %7
  %11 = mul i64 2, %10
  %12 = add i64 %9, %11
  %13 = sext i32 %1 to i64
  %14 = or i64 %13, 7863091430146442996
  %15 = xor i64 %13, -1
  %16 = and i64 7863091430146442996, %15
  %17 = add i64 %16, %13
  %18 = xor i64 %8, %14
  %19 = xor i64 %18, %3
  %20 = xor i64 %19, %17
  %21 = xor i64 %20, %12
  %22 = xor i64 %21, %6
  %23 = xor i64 %22, 8451611441237468661
  %24 = sext i32 %0 to i64
  %25 = and i64 %24, 5945268946547198083
  %26 = xor i64 %24, -1
  %27 = or i64 -5945268946547198084, %26
  %28 = xor i64 %27, -1
  %29 = and i64 %28, -1
  %30 = sext i32 %0 to i64
  %31 = and i64 %30, -2161127095008757691
  %32 = xor i64 %30, -1
  %33 = or i64 2161127095008757690, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = sext i32 %0 to i64
  %37 = add i64 %36, -2026489993798419186
  %38 = xor i64 -2026489993798419186, %36
  %39 = and i64 -2026489993798419186, %36
  %40 = mul i64 2, %39
  %41 = add i64 %38, %40
  %42 = xor i64 -3560831066827940259, %41
  %43 = xor i64 %42, %25
  %44 = xor i64 %43, %35
  %45 = xor i64 %44, %31
  %46 = xor i64 %45, %37
  %47 = xor i64 %46, %29
  %48 = mul i64 %23, %47
  %49 = trunc i64 %48 to i32
  %50 = alloca i32, i32 %49, align 4
  %51 = call i64 @h9549842938191327224(i64 388314483)
  %52 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %51
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub1.exitStub), i8** %52, align 8
  %53 = call i64 @h9549842938191327224(i64 388314449)
  %54 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %53
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub.exitStub), i8** %54, align 8
  %55 = call i64 @h9549842938191327224(i64 388314479)
  %56 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %55
  store i8* blockaddress(@main_loop.extracted.21.extracted, %EntryBasicBlockSplit), i8** %56, align 8
  %57 = call i64 @h9549842938191327224(i64 388314411)
  %58 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %57
  store i8* blockaddress(@main_loop.extracted.21.extracted, %"2"), i8** %58, align 8
  %59 = call i64 @h9549842938191327224(i64 388314462)
  %60 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %59
  store i8* blockaddress(@main_loop.extracted.21.extracted, %BogusBasciBlock), i8** %60, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %61 = sext i32 %0 to i64
  %62 = and i64 %61, 924982754994593668
  %63 = xor i64 %61, -1
  %64 = xor i64 924982754994593668, %63
  %65 = and i64 %64, 924982754994593668
  %66 = sext i32 %1 to i64
  %67 = and i64 %66, 6675812605082756037
  %68 = xor i64 %66, -1
  %69 = or i64 -6675812605082756038, %68
  %70 = xor i64 %69, -1
  %71 = and i64 %70, -1
  %72 = sext i32 %0 to i64
  %73 = or i64 %72, -4989050464331770152
  %74 = xor i64 %72, -1
  %75 = and i64 %74, -1561506235254804909
  %76 = and i64 %72, 1561506235254804908
  %77 = or i64 %75, %76
  %78 = xor i64 5807179870334466187, %77
  %79 = xor i64 %72, -1
  %80 = or i64 4989050464331770151, %79
  %81 = xor i64 %80, -1
  %82 = and i64 %81, -1
  %83 = or i64 %78, %82
  %84 = xor i64 %65, %67
  %85 = xor i64 %84, 6360764610390384761
  %86 = xor i64 %85, %83
  %87 = xor i64 %86, %62
  %88 = xor i64 %87, %71
  %89 = xor i64 %88, %73
  %90 = sext i32 %0 to i64
  %91 = or i64 %90, 6834443163732917927
  %92 = xor i64 %90, -1
  %93 = and i64 %92, -3634179569592784059
  %94 = and i64 %90, 3634179569592784058
  %95 = or i64 %93, %94
  %96 = xor i64 -7833979427677202974, %95
  %97 = xor i64 %90, -1
  %98 = or i64 -6834443163732917928, %97
  %99 = xor i64 %98, -1
  %100 = and i64 %99, -1
  %101 = or i64 %96, %100
  %102 = sext i32 %0 to i64
  %103 = or i64 %102, -1998703854592031664
  %104 = xor i64 %102, -1
  %105 = and i64 %104, -3852677250764174735
  %106 = and i64 %102, 3852677250764174734
  %107 = or i64 %105, %106
  %108 = xor i64 3371972488579747361, %107
  %109 = xor i64 %102, -1
  %110 = or i64 1998703854592031663, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = or i64 %108, %112
  %114 = sext i32 %1 to i64
  %115 = and i64 %114, -5024260804905124049
  %116 = xor i64 %114, -1
  %117 = or i64 5024260804905124048, %116
  %118 = xor i64 %117, -1
  %119 = and i64 %118, -1
  %120 = xor i64 %119, %115
  %121 = xor i64 %120, 5974014648618748361
  %122 = xor i64 %121, %101
  %123 = xor i64 %122, %113
  %124 = xor i64 %123, %91
  %125 = xor i64 %124, %103
  %126 = mul i64 %89, %125
  %127 = trunc i64 %126 to i32
  %.reg2mem = alloca i8**, i32 %127, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %128 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.21.extracted, %BogusBasciBlock), i8** %128, align 8
  %129 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %129, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %130 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %130, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %"2"), i8** %.reload5, align 8
  %131 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %131, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %132 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %132, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub1.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %133 = load i8*, i8** %.reload, align 8
  indirectbr i8* %133, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %134 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.21.extracted, %BogusBasciBlock), i8** %134, align 8
  %135 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.21.extracted, %EntryBasicBlockSplit), i8** %135, align 8
  %136 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.21.extracted, %"2"), i8** %136, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %137 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %137, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %138 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %138, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %139 = icmp eq i32 %0, 0
  %140 = and i32 %1, 1
  %141 = icmp eq i32 %140, 1
  %142 = mul i32 %1, %1
  %143 = sub i32 0, %142
  %144 = sub i32 0, %1
  %145 = add i32 %143, %144
  %146 = sub i32 0, %145
  %147 = srem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = or i1 %141, %148
  store i1 %149, i1* %.out, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %150 = select i1 %149, i8** %.reload7, i8** %.reload10
  %151 = load i8*, i8** %150, align 8
  indirectbr i8* %151, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted(i32 %0, i32 %1, i32 %2, i32* %.out, i32* %.out1, i32* %.out2, i1* %.out3) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314402)
  %5 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted, %loopEnd), i8** %5, align 8
  %6 = sext i32 %2 to i64
  %7 = and i64 %6, 4905343215229580256
  %8 = or i64 -4905343215229580257, %6
  %9 = sub i64 %8, -4905343215229580257
  %10 = sext i32 %2 to i64
  %11 = add i64 %10, 9157076205905905250
  %12 = and i64 9157076205905905250, %10
  %13 = or i64 9157076205905905250, %10
  %14 = add i64 %12, %13
  %15 = xor i64 %11, 8079958831688607371
  %16 = xor i64 %15, %14
  %17 = xor i64 %16, %9
  %18 = xor i64 %17, %7
  %19 = sext i32 %1 to i64
  %20 = add i64 %19, 801341124405946808
  %21 = add i64 -2119103284293498811, %19
  %22 = add i64 %21, 2920444408699445619
  %23 = sext i32 %1 to i64
  %24 = or i64 %23, -4523458030189247505
  %25 = xor i64 %23, -1
  %26 = and i64 %25, -3164981443232284984
  %27 = and i64 %23, 3164981443232284983
  %28 = or i64 %26, %27
  %29 = xor i64 1525252177105337639, %28
  %30 = xor i64 %23, -1
  %31 = or i64 4523458030189247504, %30
  %32 = xor i64 %31, -1
  %33 = and i64 %32, -1
  %34 = or i64 %29, %33
  %35 = xor i64 %20, %22
  %36 = xor i64 %35, 116458049864295264
  %37 = xor i64 %36, %24
  %38 = xor i64 %37, %34
  %39 = mul i64 %18, %38
  %40 = call i64 @h9549842938191327224(i64 %39)
  %41 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %40
  store i8* blockaddress(@inner_loop.extracted, %defaultSwitchBasicBlock), i8** %41, align 8
  %42 = sext i32 %1 to i64
  %43 = or i64 %42, -6913762253956065025
  %44 = xor i64 %42, -1
  %45 = and i64 -6913762253956065025, %44
  %46 = add i64 %45, %42
  %47 = sext i32 %2 to i64
  %48 = or i64 %47, 3365797730936622949
  %49 = and i64 3365797730936622949, %47
  %50 = xor i64 3365797730936622949, %47
  %51 = or i64 %49, %50
  %52 = xor i64 %48, %46
  %53 = xor i64 %52, %43
  %54 = xor i64 %53, 6729755526121144719
  %55 = xor i64 %54, %51
  %56 = sext i32 %1 to i64
  %57 = and i64 %56, -1178906085565904157
  %58 = xor i64 %56, -1
  %59 = or i64 1178906085565904156, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = sext i32 %0 to i64
  %63 = add i64 %62, -1760489014880993130
  %64 = add i64 -7288767611189675848, %62
  %65 = sub i64 %64, -5528278596308682718
  %66 = sext i32 %0 to i64
  %67 = add i64 %66, 1034635185715258913
  %68 = sub i64 0, %66
  %69 = add i64 -1034635185715258913, %68
  %70 = sub i64 0, %69
  %71 = xor i64 %63, 4379581491174301997
  %72 = xor i64 %71, %67
  %73 = xor i64 %72, %70
  %74 = xor i64 %73, %57
  %75 = xor i64 %74, %65
  %76 = xor i64 %75, %61
  %77 = mul i64 %55, %76
  %78 = call i64 @h9549842938191327224(i64 %77)
  %79 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %78
  store i8* blockaddress(@inner_loop.extracted, %.exitStub4), i8** %79, align 8
  %80 = call i64 @h9549842938191327224(i64 388314405)
  %81 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %80
  store i8* blockaddress(@inner_loop.extracted, %codeRepl), i8** %81, align 8
  %82 = call i64 @h9549842938191327224(i64 388314404)
  %83 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %82
  store i8* blockaddress(@inner_loop.extracted, %BogusBasicBlock), i8** %83, align 8
  %84 = call i64 @h9549842938191327224(i64 388314413)
  %85 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %84
  store i8* blockaddress(@inner_loop.extracted, %414), i8** %85, align 8
  %86 = call i64 @h9549842938191327224(i64 388314406)
  %87 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %86
  store i8* blockaddress(@inner_loop.extracted, %.exitStub), i8** %87, align 8
  %88 = call i64 @h9549842938191327224(i64 388314401)
  %89 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %88
  store i8* blockaddress(@inner_loop.extracted, %EntryBasicBlockSplit), i8** %89, align 8
  %90 = sext i32 %0 to i64
  %91 = and i64 %90, -6935160237140714165
  %92 = or i64 6935160237140714164, %90
  %93 = sub i64 %92, 6935160237140714164
  %94 = sext i32 %2 to i64
  %95 = or i64 %94, 4141711127199182390
  %96 = and i64 4141711127199182390, %94
  %97 = xor i64 4141711127199182390, %94
  %98 = or i64 %96, %97
  %99 = xor i64 %98, %91
  %100 = xor i64 %99, %93
  %101 = xor i64 %100, 72825301818480981
  %102 = xor i64 %101, %95
  %103 = sext i32 %2 to i64
  %104 = and i64 %103, 8887872282919607197
  %105 = or i64 -8887872282919607198, %103
  %106 = sub i64 %105, -8887872282919607198
  %107 = sext i32 %0 to i64
  %108 = or i64 %107, 1821478681637904188
  %109 = and i64 1821478681637904188, %107
  %110 = xor i64 1821478681637904188, %107
  %111 = or i64 %109, %110
  %112 = xor i64 3930011126222893180, %104
  %113 = xor i64 %112, %108
  %114 = xor i64 %113, %111
  %115 = xor i64 %114, %106
  %116 = mul i64 %102, %115
  %117 = call i64 @h9549842938191327224(i64 %116)
  %118 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %117
  store i8* blockaddress(@inner_loop.extracted, %loopStart), i8** %118, align 8
  %.reg2mem2 = alloca i32, align 4
  %119 = sext i32 %0 to i64
  %120 = and i64 %119, 7169411154589291029
  %121 = or i64 -7169411154589291030, %119
  %122 = sub i64 %121, -7169411154589291030
  %123 = sext i32 %0 to i64
  %124 = and i64 %123, -420907437300561376
  %125 = xor i64 %123, -1
  %126 = or i64 420907437300561375, %125
  %127 = xor i64 %126, -1
  %128 = and i64 %127, -1
  %129 = xor i64 %124, %120
  %130 = xor i64 %129, %122
  %131 = xor i64 %130, %128
  %132 = xor i64 %131, 8074461046357190061
  %133 = sext i32 %0 to i64
  %134 = or i64 %133, -5095854102180193381
  %135 = xor i64 %133, -1
  %136 = and i64 %135, 7481334792447092209
  %137 = and i64 %133, -7481334792447092210
  %138 = or i64 %136, %137
  %139 = xor i64 -2408042707596247446, %138
  %140 = xor i64 %133, -1
  %141 = or i64 5095854102180193380, %140
  %142 = xor i64 %141, -1
  %143 = and i64 %142, -1
  %144 = or i64 %139, %143
  %145 = sext i32 %0 to i64
  %146 = add i64 %145, -158054763207377442
  %147 = and i64 -158054763207377442, %145
  %148 = or i64 -158054763207377442, %145
  %149 = add i64 %147, %148
  %150 = sext i32 %0 to i64
  %151 = and i64 %150, -4364265759806869185
  %152 = xor i64 %150, -1
  %153 = or i64 4364265759806869184, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = xor i64 %144, %151
  %157 = xor i64 %156, %134
  %158 = xor i64 %157, -6711484388418042331
  %159 = xor i64 %158, %149
  %160 = xor i64 %159, %155
  %161 = xor i64 %160, %146
  %162 = mul i64 %132, %161
  %163 = trunc i64 %162 to i32
  %.reg2mem = alloca i8**, i32 %163, align 8
  %lookupTable = alloca [10 x i32], align 4
  %164 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %164, align 4
  %165 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %165, align 4
  %166 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %166, align 4
  %167 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %167, align 4
  %168 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %169 = sext i32 %0 to i64
  %170 = or i64 %169, -1355523263273291075
  %171 = xor i64 %169, -1
  %172 = and i64 -1355523263273291075, %171
  %173 = add i64 %172, %169
  %174 = sext i32 %2 to i64
  %175 = and i64 %174, -6048419063177455838
  %176 = xor i64 %174, -1
  %177 = or i64 6048419063177455837, %176
  %178 = xor i64 %177, -1
  %179 = and i64 %178, -1
  %180 = sext i32 %1 to i64
  %181 = and i64 %180, 8448969573557789227
  %182 = xor i64 %180, -1
  %183 = or i64 -8448969573557789228, %182
  %184 = xor i64 %183, -1
  %185 = and i64 %184, -1
  %186 = xor i64 %173, %175
  %187 = xor i64 %186, %179
  %188 = xor i64 %187, %181
  %189 = xor i64 %188, %170
  %190 = xor i64 %189, 6299697757398478301
  %191 = xor i64 %190, %185
  %192 = sext i32 %1 to i64
  %193 = and i64 %192, -6704785327068612999
  %194 = xor i64 %192, -1
  %195 = xor i64 -6704785327068612999, %194
  %196 = and i64 %195, -6704785327068612999
  %197 = sext i32 %2 to i64
  %198 = or i64 %197, 8148131228665497079
  %199 = xor i64 %197, -1
  %200 = and i64 %199, 7108448701403784277
  %201 = and i64 %197, -7108448701403784278
  %202 = or i64 %200, %201
  %203 = xor i64 1420237245664567714, %202
  %204 = xor i64 %197, -1
  %205 = or i64 -8148131228665497080, %204
  %206 = xor i64 %205, -1
  %207 = and i64 %206, -1
  %208 = or i64 %203, %207
  %209 = sext i32 %1 to i64
  %210 = and i64 %209, -5411504477830031291
  %211 = xor i64 %209, -1
  %212 = or i64 5411504477830031290, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = xor i64 246301460005655157, %208
  %216 = xor i64 %215, %196
  %217 = xor i64 %216, %210
  %218 = xor i64 %217, %193
  %219 = xor i64 %218, %214
  %220 = xor i64 %219, %198
  %221 = mul i64 %191, %220
  %222 = trunc i64 %221 to i32
  store i32 %222, i32* %168, align 4
  %223 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %223, align 4
  %224 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %224, align 4
  %225 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %225, align 4
  %226 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %226, align 4
  %227 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %227, align 4
  %228 = alloca i64, align 8
  %229 = sext i32 %0 to i64
  %230 = or i64 %229, 5388381634512138985
  %231 = xor i64 %229, -1
  %232 = and i64 %231, -2836955014478072172
  %233 = and i64 %229, 2836955014478072171
  %234 = or i64 %232, %233
  %235 = xor i64 -7897487467239914371, %234
  %236 = xor i64 %229, -1
  %237 = or i64 -5388381634512138986, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = or i64 %235, %239
  %241 = sext i32 %1 to i64
  %242 = and i64 %241, -2724310477759659485
  %243 = xor i64 %241, -1
  %244 = or i64 2724310477759659484, %243
  %245 = xor i64 %244, -1
  %246 = and i64 %245, -1
  %247 = xor i64 %230, %246
  %248 = xor i64 %247, %242
  %249 = xor i64 %248, %240
  %250 = xor i64 %249, -5401311517850312215
  %251 = sext i32 %2 to i64
  %252 = and i64 %251, 7764708251724824031
  %253 = or i64 -7764708251724824032, %251
  %254 = sub i64 %253, -7764708251724824032
  %255 = sext i32 %1 to i64
  %256 = add i64 %255, 68642477632794139
  %257 = xor i64 68642477632794139, %255
  %258 = and i64 68642477632794139, %255
  %259 = mul i64 2, %258
  %260 = add i64 %257, %259
  %261 = xor i64 -4225778410393843194, %260
  %262 = xor i64 %261, %254
  %263 = xor i64 %262, %252
  %264 = xor i64 %263, %256
  %265 = mul i64 %250, %264
  %266 = call i64 @m1252811912226950246(i64 %265)
  %267 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13215117349962675226, i32 0, i64 %266
  store i8** %267, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314412, i32* %3, align 4
  %268 = call i8** @bf13573797562172960439(i32* %3)
  %269 = load i8*, i8** %268, align 8
  indirectbr i8* %269, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %414
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub4
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i32, i32*, i32*, i1*, i32)* @inner_loop.extracted.extracted to i8*), i8** %.reload, align 8
  %270 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %273 = load i32, i32* %272, align 4
  %274 = srem i32 %271, %273
  store i32 %274, i32* %dispatcher, align 4
  %275 = load i8*, i8** %5, align 8
  %276 = load i8, i8* %275, align 1
  %277 = add i64 %117, 6978195450727103812
  %278 = xor i64 6978195450727103812, %117
  %279 = and i64 6978195450727103812, %117
  %280 = mul i64 2, %279
  %281 = add i64 %278, %280
  %282 = and i64 %86, -7265704030412378523
  %283 = or i64 7265704030412378522, %86
  %284 = sub i64 %283, 7265704030412378522
  %285 = sext i32 %1 to i64
  %286 = and i64 %285, -1098911923526131733
  %287 = xor i64 %285, -1
  %288 = xor i64 -1098911923526131733, %287
  %289 = and i64 %288, -1098911923526131733
  %290 = xor i64 %281, %284
  %291 = xor i64 %290, %277
  %292 = xor i64 %291, 2297628093856512121
  %293 = xor i64 %292, %289
  %294 = xor i64 %293, %282
  %295 = xor i64 %294, %286
  %296 = and i64 %266, -2804659035325940880
  %297 = xor i64 %266, -1
  %298 = or i64 2804659035325940879, %297
  %299 = xor i64 %298, -1
  %300 = and i64 %299, -1
  %301 = and i64 %266, 3539269416669970168
  %302 = xor i64 %266, -1
  %303 = or i64 -3539269416669970169, %302
  %304 = xor i64 %303, -1
  %305 = and i64 %304, -1
  %306 = xor i64 %305, %300
  %307 = xor i64 %306, %301
  %308 = xor i64 %307, %296
  %309 = xor i64 %308, -5356448386104731849
  %310 = mul i64 %295, %309
  %311 = trunc i64 %310 to i8
  %312 = xor i8 %276, %311
  %313 = or i8 %312, 1
  %314 = xor i8 %276, -1
  %315 = sub i8 %313, %314
  %316 = icmp eq i8 %315, 1
  %317 = mul i8 %276, %276
  %318 = add i8 %317, %276
  %319 = srem i8 %318, 2
  %320 = icmp eq i8 %319, 0
  %321 = xor i1 %316, true
  %322 = sext i32 %2 to i64
  %323 = and i64 %322, 8065792560847803210
  %324 = xor i64 %322, -1
  %325 = xor i64 8065792560847803210, %324
  %326 = and i64 %325, 8065792560847803210
  %327 = sext i32 %dispatcher1 to i64
  %328 = and i64 %327, -5865602251143868651
  %329 = or i64 5865602251143868650, %327
  %330 = sub i64 %329, 5865602251143868650
  %331 = or i64 %86, -1246624428874541098
  %332 = xor i64 %86, -1
  %333 = and i64 %332, 3081410241338462961
  %334 = and i64 %86, -3081410241338462962
  %335 = or i64 %333, %334
  %336 = xor i64 -4291851391470598873, %335
  %337 = xor i64 %86, -1
  %338 = or i64 1246624428874541097, %337
  %339 = xor i64 %338, -1
  %340 = and i64 %339, -1
  %341 = or i64 %336, %340
  %342 = xor i64 %341, %323
  %343 = xor i64 %342, %330
  %344 = xor i64 %343, %331
  %345 = xor i64 %344, %326
  %346 = xor i64 %345, %328
  %347 = xor i64 %346, -1481142434990813499
  %348 = or i64 %84, 2314814779664371737
  %349 = and i64 2314814779664371737, %84
  %350 = xor i64 2314814779664371737, %84
  %351 = or i64 %349, %350
  %352 = sext i32 %dispatcher1 to i64
  %353 = and i64 %352, 2009934461323841736
  %354 = xor i64 %352, -1
  %355 = or i64 -2009934461323841737, %354
  %356 = xor i64 %355, -1
  %357 = and i64 %356, -1
  %358 = add i64 %4, 5655606808172941785
  %359 = xor i64 5655606808172941785, %4
  %360 = and i64 5655606808172941785, %4
  %361 = mul i64 2, %360
  %362 = add i64 %359, %361
  %363 = xor i64 %351, %348
  %364 = xor i64 %363, %358
  %365 = xor i64 %364, %353
  %366 = xor i64 %365, 6426845937384865805
  %367 = xor i64 %366, %362
  %368 = xor i64 %367, %357
  %369 = mul i64 %347, %368
  %370 = trunc i64 %369 to i1
  %371 = and i1 %321, %370
  %372 = and i1 %316, false
  %373 = or i1 %371, %372
  %374 = xor i1 %320, true
  %375 = and i1 %374, true
  %376 = and i1 %320, false
  %377 = or i1 %375, %376
  %378 = xor i1 %373, %377
  %379 = and i64 %78, 4939397606254881861
  %380 = xor i64 %78, -1
  %381 = xor i64 4939397606254881861, %380
  %382 = and i64 %381, 4939397606254881861
  %383 = sext i32 %0 to i64
  %384 = add i64 %383, -3147777188151931238
  %385 = add i64 8643430740514015899, %383
  %386 = sub i64 %385, -6655536145043604479
  %387 = xor i64 %379, 5216275251720583571
  %388 = xor i64 %387, %386
  %389 = xor i64 %388, %384
  %390 = xor i64 %389, %382
  %391 = add i64 %117, -5212974299058313406
  %392 = and i64 -5212974299058313406, %117
  %393 = or i64 -5212974299058313406, %117
  %394 = add i64 %392, %393
  %395 = add i64 %266, 8990046393441361443
  %396 = sub i64 0, %266
  %397 = sub i64 8990046393441361443, %396
  %398 = xor i64 %397, 7169101236849839259
  %399 = xor i64 %398, %394
  %400 = xor i64 %399, %391
  %401 = xor i64 %400, %395
  %402 = mul i64 %390, %401
  %403 = trunc i64 %402 to i1
  %404 = xor i1 %316, %403
  %405 = xor i1 %320, true
  %406 = or i1 %404, %405
  %407 = xor i1 %406, true
  %408 = and i1 %407, true
  %409 = or i1 %378, %408
  %410 = select i1 %409, i32 388314406, i32 388314402
  %411 = xor i32 %410, 4
  store i32 %411, i32* %3, align 4
  %412 = call i8** @bf13573797562172960439(i32* %3)
  %413 = load i8*, i8** %412, align 8
  indirectbr i8* %413, [label %loopEnd, label %EntryBasicBlockSplit]

414:                                              ; preds = %414, %loopStart
  %415 = mul nsw i32 %0, 80
  store i32 %415, i32* %.out, align 4
  %416 = or i64 %80, 5511375109067032945
  %417 = and i64 5511375109067032945, %80
  %418 = xor i64 5511375109067032945, %80
  %419 = or i64 %417, %418
  %420 = sext i32 %1 to i64
  %421 = and i64 %420, 7993798179163923912
  %422 = xor i64 %420, -1
  %423 = or i64 -7993798179163923913, %422
  %424 = xor i64 %423, -1
  %425 = and i64 %424, -1
  %426 = xor i64 %416, %421
  %427 = xor i64 %426, %419
  %428 = xor i64 %427, %425
  %429 = xor i64 %428, 7239472016751327097
  %430 = and i64 %40, -9071192087799775867
  %431 = xor i64 %40, -1
  %432 = xor i64 -9071192087799775867, %431
  %433 = and i64 %432, -9071192087799775867
  %434 = or i64 %40, 6495872325557116887
  %435 = xor i64 %40, -1
  %436 = and i64 %435, 6383913932919561665
  %437 = and i64 %40, -6383913932919561666
  %438 = or i64 %436, %437
  %439 = xor i64 197541079485579798, %438
  %440 = xor i64 %40, -1
  %441 = or i64 -6495872325557116888, %440
  %442 = xor i64 %441, -1
  %443 = and i64 %442, -1
  %444 = or i64 %439, %443
  %445 = xor i64 %444, %434
  %446 = xor i64 %445, %433
  %447 = xor i64 %446, -4702187475666500206
  %448 = xor i64 %447, %430
  %449 = mul i64 %429, %448
  %450 = trunc i64 %449 to i32
  %451 = mul i32 %1, %450
  store i32 %451, i32* %.reg2mem2, align 4
  %452 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  %453 = load i32, i32* %452, align 4
  %454 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %455 = load i32, i32* %454, align 4
  %456 = sub i32 0, %455
  %457 = add i32 %453, %456
  store i32 %457, i32* %dispatcher, align 4
  %458 = load i8*, i8** %5, align 8
  %459 = load i8, i8* %458, align 1
  %460 = mul i8 %459, %459
  %461 = xor i8 %460, %459
  %462 = and i8 %460, %459
  %463 = mul i8 2, %462
  %464 = add i8 %461, %463
  %465 = mul i8 %464, 3
  %466 = srem i8 %465, 2
  %467 = sext i32 %2 to i64
  %468 = and i64 %467, -4712129175976046153
  %469 = xor i64 %467, -1
  %470 = xor i64 -4712129175976046153, %469
  %471 = and i64 %470, -4712129175976046153
  %472 = or i64 %80, 3890341220448715397
  %473 = xor i64 %80, -1
  %474 = and i64 %473, 8469467327655822561
  %475 = and i64 %80, -8469467327655822562
  %476 = or i64 %474, %475
  %477 = xor i64 4644569195060921956, %476
  %478 = xor i64 %80, -1
  %479 = or i64 -3890341220448715398, %478
  %480 = xor i64 %479, -1
  %481 = and i64 %480, -1
  %482 = or i64 %477, %481
  %483 = xor i64 %482, %468
  %484 = xor i64 %483, %472
  %485 = xor i64 %484, %471
  %486 = xor i64 %485, -2861488597735722207
  %487 = or i64 %82, -8363564665879384359
  %488 = xor i64 %82, -1
  %489 = and i64 -8363564665879384359, %488
  %490 = add i64 %489, %82
  %491 = add i64 %84, -2671504706102941978
  %492 = sub i64 0, %84
  %493 = add i64 2671504706102941978, %492
  %494 = sub i64 0, %493
  %495 = xor i64 %490, 0
  %496 = xor i64 %495, %487
  %497 = xor i64 %496, %491
  %498 = xor i64 %497, %494
  %499 = mul i64 %486, %498
  %500 = trunc i64 %499 to i8
  %501 = icmp eq i8 %466, %500
  %502 = mul i8 %459, %459
  %503 = add i8 %502, %459
  %504 = srem i8 %503, 2
  %505 = icmp eq i8 %504, 0
  %506 = and i1 %501, %505
  %507 = select i1 %506, i32 388314413, i32 388314402
  %508 = xor i32 %507, 15
  store i32 %508, i32* %3, align 4
  %509 = call i8** @bf13573797562172960439(i32* %3)
  %510 = load i8*, i8** %509, align 8
  indirectbr i8* %510, [label %loopEnd, label %414]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %511 = sext i32 %dispatcher1 to i64
  %512 = and i64 %511, 2632667315367134590
  %513 = or i64 -2632667315367134591, %511
  %514 = sub i64 %513, -2632667315367134591
  %515 = sext i32 %dispatcher1 to i64
  %516 = add i64 %515, -4275566621575660151
  %517 = sub i64 0, %515
  %518 = add i64 4275566621575660151, %517
  %519 = sub i64 0, %518
  %520 = sext i32 %0 to i64
  %521 = or i64 %520, -5582844715055745266
  %522 = xor i64 %520, -1
  %523 = and i64 -5582844715055745266, %522
  %524 = add i64 %523, %520
  %525 = xor i64 %512, %519
  %526 = xor i64 %525, %516
  %527 = xor i64 %526, %521
  %528 = xor i64 %527, %524
  %529 = xor i64 %528, %514
  %530 = xor i64 %529, 3644118580094066677
  %531 = and i64 %78, -5556880576110543692
  %532 = or i64 5556880576110543691, %78
  %533 = sub i64 %532, 5556880576110543691
  %534 = add i64 %82, 5821122515556402802
  %535 = and i64 5821122515556402802, %82
  %536 = or i64 5821122515556402802, %82
  %537 = add i64 %535, %536
  %538 = add i64 %88, -8881696269109254069
  %539 = and i64 -8881696269109254069, %88
  %540 = or i64 -8881696269109254069, %88
  %541 = add i64 %539, %540
  %542 = xor i64 %538, %533
  %543 = xor i64 %542, %537
  %544 = xor i64 %543, 8815439326359835614
  %545 = xor i64 %544, %541
  %546 = xor i64 %545, %531
  %547 = xor i64 %546, %534
  %548 = mul i64 %530, %547
  store i64 %548, i64* %228, align 8
  %549 = alloca i8**, align 8
  %550 = add i64 %88, -5787786362502825160
  %551 = add i64 7934936800157984411, %88
  %552 = add i64 %551, 4724020911048742045
  %553 = sext i32 %dispatcher1 to i64
  %554 = add i64 %553, -5221571334950293753
  %555 = and i64 -5221571334950293753, %553
  %556 = or i64 -5221571334950293753, %553
  %557 = add i64 %555, %556
  %558 = sext i32 %2 to i64
  %559 = or i64 %558, -5159068763280126498
  %560 = xor i64 %558, -1
  %561 = and i64 -5159068763280126498, %560
  %562 = add i64 %561, %558
  %563 = xor i64 %554, %559
  %564 = xor i64 %563, -8437285454651461473
  %565 = xor i64 %564, %552
  %566 = xor i64 %565, %562
  %567 = xor i64 %566, %557
  %568 = xor i64 %567, %550
  %569 = sext i32 %0 to i64
  %570 = or i64 %569, 7812817531583149925
  %571 = xor i64 %569, -1
  %572 = and i64 %571, -8896136055668282395
  %573 = and i64 %569, 8896136055668282394
  %574 = or i64 %572, %573
  %575 = xor i64 -1664599845686616960, %574
  %576 = xor i64 %569, -1
  %577 = or i64 -7812817531583149926, %576
  %578 = xor i64 %577, -1
  %579 = and i64 %578, -1
  %580 = or i64 %575, %579
  %581 = or i64 %84, -4227831102226147406
  %582 = xor i64 %84, -1
  %583 = and i64 -4227831102226147406, %582
  %584 = add i64 %583, %84
  %585 = xor i64 %570, 0
  %586 = xor i64 %585, %581
  %587 = xor i64 %586, %580
  %588 = xor i64 %587, %584
  %589 = mul i64 %568, %588
  %590 = trunc i64 %589 to i1
  %591 = or i64 %40, 3730034922787217602
  %592 = and i64 3730034922787217602, %40
  %593 = xor i64 3730034922787217602, %40
  %594 = or i64 %592, %593
  %595 = and i64 %84, 5992193554206430955
  %596 = xor i64 %84, -1
  %597 = xor i64 5992193554206430955, %596
  %598 = and i64 %597, 5992193554206430955
  %599 = xor i64 %595, %591
  %600 = xor i64 %599, -6857654910495657617
  %601 = xor i64 %600, %598
  %602 = xor i64 %601, %594
  %603 = add i64 %80, -1023256971792238784
  %604 = add i64 8444093070148009208, %80
  %605 = sub i64 %604, -8979394031769303624
  %606 = sext i32 %dispatcher1 to i64
  %607 = and i64 %606, -1421016514326423390
  %608 = xor i64 %606, -1
  %609 = or i64 1421016514326423389, %608
  %610 = xor i64 %609, -1
  %611 = and i64 %610, -1
  %612 = xor i64 %607, 0
  %613 = xor i64 %612, %611
  %614 = xor i64 %613, %603
  %615 = xor i64 %614, %605
  %616 = mul i64 %602, %615
  %617 = trunc i64 %616 to i32
  %618 = sext i32 %1 to i64
  %619 = and i64 %618, -6533038708283833548
  %620 = or i64 6533038708283833547, %618
  %621 = sub i64 %620, 6533038708283833547
  %622 = and i64 %266, 2841743346632095989
  %623 = or i64 -2841743346632095990, %266
  %624 = sub i64 %623, -2841743346632095990
  %625 = xor i64 %621, %624
  %626 = xor i64 %625, %619
  %627 = xor i64 %626, -1094559672803105069
  %628 = xor i64 %627, %622
  %629 = sext i32 %0 to i64
  %630 = or i64 %629, -4585012085658100611
  %631 = xor i64 %629, -1
  %632 = and i64 -4585012085658100611, %631
  %633 = add i64 %632, %629
  %634 = sext i32 %dispatcher1 to i64
  %635 = add i64 %634, 2691459589571111014
  %636 = xor i64 2691459589571111014, %634
  %637 = and i64 2691459589571111014, %634
  %638 = mul i64 2, %637
  %639 = add i64 %636, %638
  %640 = or i64 %40, -8406277831029374556
  %641 = and i64 -8406277831029374556, %40
  %642 = xor i64 -8406277831029374556, %40
  %643 = or i64 %641, %642
  %644 = xor i64 %630, %639
  %645 = xor i64 %644, 0
  %646 = xor i64 %645, %633
  %647 = xor i64 %646, %643
  %648 = xor i64 %647, %635
  %649 = xor i64 %648, %640
  %650 = mul i64 %628, %649
  %651 = trunc i64 %650 to i32
  %652 = or i64 %4, -8989617534534779727
  %653 = xor i64 %4, -1
  %654 = and i64 -8989617534534779727, %653
  %655 = add i64 %654, %4
  %656 = and i64 %40, -2269178193882836224
  %657 = xor i64 %40, -1
  %658 = xor i64 -2269178193882836224, %657
  %659 = and i64 %658, -2269178193882836224
  %660 = sext i32 %2 to i64
  %661 = or i64 %660, -2343364935705098361
  %662 = xor i64 %660, -1
  %663 = and i64 %662, 1319347199500757999
  %664 = and i64 %660, -1319347199500758000
  %665 = or i64 %663, %664
  %666 = xor i64 -3659753830132274072, %665
  %667 = xor i64 %660, -1
  %668 = or i64 2343364935705098360, %667
  %669 = xor i64 %668, -1
  %670 = and i64 %669, -1
  %671 = or i64 %666, %670
  %672 = xor i64 -3521143651076790921, %652
  %673 = xor i64 %672, %655
  %674 = xor i64 %673, %656
  %675 = xor i64 %674, %659
  %676 = xor i64 %675, %661
  %677 = xor i64 %676, %671
  %678 = or i64 %88, -4121758667030447869
  %679 = xor i64 %88, -1
  %680 = and i64 -4121758667030447869, %679
  %681 = add i64 %680, %88
  %682 = or i64 %82, -3660114082135123865
  %683 = and i64 -3660114082135123865, %82
  %684 = xor i64 -3660114082135123865, %82
  %685 = or i64 %683, %684
  %686 = and i64 %88, 933923245249141265
  %687 = xor i64 %88, -1
  %688 = xor i64 933923245249141265, %687
  %689 = and i64 %688, 933923245249141265
  %690 = xor i64 %686, %681
  %691 = xor i64 %690, %685
  %692 = xor i64 %691, %689
  %693 = xor i64 %692, 0
  %694 = xor i64 %693, %678
  %695 = xor i64 %694, %682
  %696 = mul i64 %677, %695
  %697 = trunc i64 %696 to i32
  %698 = or i64 %82, 7726969949688189826
  %699 = xor i64 %82, -1
  %700 = and i64 %699, 7640147281669103792
  %701 = and i64 %82, -7640147281669103793
  %702 = or i64 %700, %701
  %703 = xor i64 89217963311625010, %702
  %704 = xor i64 %82, -1
  %705 = or i64 -7726969949688189827, %704
  %706 = xor i64 %705, -1
  %707 = and i64 %706, -1
  %708 = or i64 %703, %707
  %709 = sext i32 %2 to i64
  %710 = or i64 %709, 9040312830324623707
  %711 = xor i64 %709, -1
  %712 = and i64 9040312830324623707, %711
  %713 = add i64 %712, %709
  %714 = xor i64 -2393490202533771377, %713
  %715 = xor i64 %714, %710
  %716 = xor i64 %715, %698
  %717 = xor i64 %716, %708
  %718 = and i64 %84, -9051470210325519133
  %719 = xor i64 %84, -1
  %720 = xor i64 -9051470210325519133, %719
  %721 = and i64 %720, -9051470210325519133
  %722 = or i64 %40, 3782820598990089409
  %723 = xor i64 %40, -1
  %724 = and i64 %723, -4271248178810025574
  %725 = and i64 %40, 4271248178810025573
  %726 = or i64 %724, %725
  %727 = xor i64 -1097122235704203941, %726
  %728 = xor i64 %40, -1
  %729 = or i64 -3782820598990089410, %728
  %730 = xor i64 %729, -1
  %731 = and i64 %730, -1
  %732 = or i64 %727, %731
  %733 = xor i64 %721, 0
  %734 = xor i64 %733, %718
  %735 = xor i64 %734, %722
  %736 = xor i64 %735, %732
  %737 = mul i64 %717, %736
  %738 = trunc i64 %737 to i32
  %739 = or i64 %266, -574432177311385651
  %740 = and i64 -574432177311385651, %266
  %741 = xor i64 -574432177311385651, %266
  %742 = or i64 %740, %741
  %743 = sext i32 %2 to i64
  %744 = or i64 %743, 8984607254111287720
  %745 = xor i64 %743, -1
  %746 = and i64 %745, -8718360841523849559
  %747 = and i64 %743, 8718360841523849558
  %748 = or i64 %746, %747
  %749 = xor i64 -311428214545649919, %748
  %750 = xor i64 %743, -1
  %751 = or i64 -8984607254111287721, %750
  %752 = xor i64 %751, -1
  %753 = and i64 %752, -1
  %754 = or i64 %749, %753
  %755 = xor i64 %739, -5066658148475355925
  %756 = xor i64 %755, %754
  %757 = xor i64 %756, %744
  %758 = xor i64 %757, %742
  %759 = sext i32 %0 to i64
  %760 = and i64 %759, -2774872392658204307
  %761 = or i64 2774872392658204306, %759
  %762 = sub i64 %761, 2774872392658204306
  %763 = add i64 %80, -3678616774190045179
  %764 = sub i64 0, %80
  %765 = add i64 3678616774190045179, %764
  %766 = sub i64 0, %765
  %767 = or i64 %40, 9040820880724881103
  %768 = xor i64 %40, -1
  %769 = and i64 %768, 816842531328483392
  %770 = and i64 %40, -816842531328483393
  %771 = or i64 %769, %770
  %772 = xor i64 8512211508829720207, %771
  %773 = xor i64 %40, -1
  %774 = or i64 -9040820880724881104, %773
  %775 = xor i64 %774, -1
  %776 = and i64 %775, -1
  %777 = or i64 %772, %776
  %778 = xor i64 %762, %767
  %779 = xor i64 %778, %760
  %780 = xor i64 %779, %763
  %781 = xor i64 %780, 0
  %782 = xor i64 %781, %766
  %783 = xor i64 %782, %777
  %784 = mul i64 %758, %783
  call void @"5784248439022692321"(i32 15, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %590, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 %617, i32 0, i1* null, i1* null, i32 %651, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 %697, i32 %738, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* %228, i8*** %549, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 %784, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %785 = load i8**, i8*** %549, align 8
  %786 = load i8*, i8** %785, align 8
  %787 = bitcast i8* %786 to i1 (i32, i32, i32*, i32*, i1*, i32)*
  %.reload3 = load i32, i32* %.reg2mem2, align 4
  %targetBlock = call i1 %787(i32 %1, i32 %.reload3, i32* %.out1, i32* %.out2, i1* %.out3, i32 %2)
  %788 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %789 = load i32, i32* %788, align 4
  %790 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %791 = load i32, i32* %790, align 4
  %792 = srem i32 %789, %791
  %793 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %794 = load i32, i32* %793, align 4
  %795 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %796 = load i32, i32* %795, align 4
  %797 = srem i32 %794, %796
  %798 = select i1 %targetBlock, i32 %792, i32 %797
  store i32 %798, i32* %dispatcher, align 4
  %799 = load i8*, i8** %85, align 8
  %800 = load i8, i8* %799, align 1
  %801 = add i64 %80, -7910999562743902274
  %802 = sub i64 0, %80
  %803 = sub i64 -7910999562743902274, %802
  %804 = sext i32 %1 to i64
  %805 = or i64 %804, -5805827166221472650
  %806 = xor i64 %804, -1
  %807 = and i64 -5805827166221472650, %806
  %808 = add i64 %807, %804
  %809 = or i64 %266, 5614659055679856130
  %810 = xor i64 %266, -1
  %811 = and i64 5614659055679856130, %810
  %812 = add i64 %811, %266
  %813 = xor i64 %809, %803
  %814 = xor i64 %813, %805
  %815 = xor i64 %814, %812
  %816 = xor i64 %815, %808
  %817 = xor i64 %816, -4736575069848443063
  %818 = xor i64 %817, %801
  %819 = sext i32 %dispatcher1 to i64
  %820 = and i64 %819, 6400393041831428693
  %821 = xor i64 %819, -1
  %822 = or i64 -6400393041831428694, %821
  %823 = xor i64 %822, -1
  %824 = and i64 %823, -1
  %825 = or i64 %84, -4473451791676736380
  %826 = xor i64 %84, -1
  %827 = and i64 %826, 7927549261978885361
  %828 = and i64 %84, -7927549261978885362
  %829 = or i64 %827, %828
  %830 = xor i64 -5769309830415343499, %829
  %831 = xor i64 %84, -1
  %832 = or i64 4473451791676736379, %831
  %833 = xor i64 %832, -1
  %834 = and i64 %833, -1
  %835 = or i64 %830, %834
  %836 = xor i64 -8490842495911037454, %824
  %837 = xor i64 %836, %825
  %838 = xor i64 %837, %835
  %839 = xor i64 %838, %820
  %840 = mul i64 %818, %839
  %841 = trunc i64 %840 to i8
  %842 = mul i8 %800, %841
  %843 = mul i8 %800, 2
  %844 = add i8 2, %843
  %845 = mul i8 %842, %844
  %846 = srem i8 %845, 4
  %847 = icmp eq i8 %846, 0
  %848 = mul i8 %800, %800
  %849 = xor i8 %848, %800
  %850 = and i8 %848, %800
  %851 = mul i8 2, %850
  %852 = add i8 %849, %851
  %853 = srem i8 %852, 2
  %854 = icmp eq i8 %853, 0
  %855 = and i1 %847, %854
  %856 = select i1 %855, i32 388314402, i32 388314402
  %857 = xor i32 %856, 0
  store i32 %857, i32* %3, align 4
  %858 = call i8** @bf13573797562172960439(i32* %3)
  %859 = load i8*, i8** %858, align 8
  indirectbr i8* %859, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub4:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %860 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %860, align 4
  %861 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %861, align 4
  %862 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %862, align 4
  %863 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %863, align 4
  %864 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %864, align 4
  %865 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %866 = load i32, i32* %865, align 4
  store i32 %866, i32* %dispatcher, align 4
  %867 = load i8*, i8** %87, align 8
  %868 = load i8, i8* %867, align 1
  %869 = xor i8 %868, -1
  %870 = or i64 %86, 2379799093903500883
  %871 = xor i64 %86, -1
  %872 = and i64 2379799093903500883, %871
  %873 = add i64 %872, %86
  %874 = sext i32 %2 to i64
  %875 = add i64 %874, -8588128798304988899
  %876 = sub i64 0, %874
  %877 = add i64 8588128798304988899, %876
  %878 = sub i64 0, %877
  %879 = xor i64 %875, %873
  %880 = xor i64 %879, %870
  %881 = xor i64 %880, %878
  %882 = xor i64 %881, 8219348049360009205
  %883 = or i64 %78, -3622899038290557023
  %884 = xor i64 %78, -1
  %885 = and i64 %884, -3947329266158416711
  %886 = and i64 %78, 3947329266158416710
  %887 = or i64 %885, %886
  %888 = xor i64 324440005160831768, %887
  %889 = xor i64 %78, -1
  %890 = or i64 3622899038290557022, %889
  %891 = xor i64 %890, -1
  %892 = and i64 %891, -1
  %893 = or i64 %888, %892
  %894 = add i64 %82, 5453357462765726024
  %895 = and i64 5453357462765726024, %82
  %896 = or i64 5453357462765726024, %82
  %897 = add i64 %895, %896
  %898 = xor i64 -7877027723127915427, %894
  %899 = xor i64 %898, %883
  %900 = xor i64 %899, %893
  %901 = xor i64 %900, %897
  %902 = mul i64 %882, %901
  %903 = trunc i64 %902 to i8
  %904 = or i8 %869, %903
  %905 = xor i8 %868, -1
  %906 = sub i8 %904, %905
  %907 = icmp eq i8 %906, 1
  %908 = mul i8 %868, %868
  %909 = add i8 %908, %868
  %910 = srem i8 %909, 2
  %911 = icmp eq i8 %910, 0
  %912 = or i1 %907, %911
  %913 = select i1 %912, i32 388314400, i32 388314401
  %914 = or i64 %40, -7767041405694418448
  %915 = and i64 -7767041405694418448, %40
  %916 = xor i64 -7767041405694418448, %40
  %917 = or i64 %915, %916
  %918 = add i64 %266, 3083576999824862773
  %919 = and i64 3083576999824862773, %266
  %920 = or i64 3083576999824862773, %266
  %921 = add i64 %919, %920
  %922 = or i64 %80, 229967598134454672
  %923 = and i64 229967598134454672, %80
  %924 = xor i64 229967598134454672, %80
  %925 = or i64 %923, %924
  %926 = xor i64 %918, %917
  %927 = xor i64 %926, %925
  %928 = xor i64 %927, %914
  %929 = xor i64 %928, %921
  %930 = xor i64 %929, %922
  %931 = xor i64 %930, 777182205436949105
  %932 = and i64 %117, -1711826131132646301
  %933 = or i64 1711826131132646300, %117
  %934 = sub i64 %933, 1711826131132646300
  %935 = and i64 %80, 8693392550436031111
  %936 = or i64 -8693392550436031112, %80
  %937 = sub i64 %936, -8693392550436031112
  %938 = and i64 %80, -4159524802508431499
  %939 = xor i64 %80, -1
  %940 = xor i64 -4159524802508431499, %939
  %941 = and i64 %940, -4159524802508431499
  %942 = xor i64 %932, %935
  %943 = xor i64 %942, %937
  %944 = xor i64 %943, %934
  %945 = xor i64 %944, %941
  %946 = xor i64 %945, %938
  %947 = xor i64 %946, 769300206929481361
  %948 = mul i64 %931, %947
  %949 = trunc i64 %948 to i32
  %950 = xor i32 %913, %949
  store i32 %950, i32* %3, align 4
  %951 = call i8** @bf13573797562172960439(i32* %3)
  %952 = load i8*, i8** %951, align 8
  indirectbr i8* %952, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %953 = load i8*, i8** %85, align 8
  %954 = load i8, i8* %953, align 1
  %955 = mul i8 %954, %954
  %956 = add i8 %955, %954
  %957 = add i64 %84, 6633009292247819630
  %958 = add i64 8175421839221920448, %84
  %959 = add i64 %958, -1542412546974100818
  %960 = sext i32 %0 to i64
  %961 = or i64 %960, -7995673624568307560
  %962 = xor i64 %960, -1
  %963 = and i64 -7995673624568307560, %962
  %964 = add i64 %963, %960
  %965 = xor i64 -7650833584135456677, %957
  %966 = xor i64 %965, %959
  %967 = xor i64 %966, %961
  %968 = xor i64 %967, %964
  %969 = sext i32 %dispatcher1 to i64
  %970 = add i64 %969, 828636634596779941
  %971 = sub i64 0, %969
  %972 = add i64 -828636634596779941, %971
  %973 = sub i64 0, %972
  %974 = add i64 %86, -4334747176559194089
  %975 = sub i64 0, %86
  %976 = sub i64 -4334747176559194089, %975
  %977 = sext i32 %dispatcher1 to i64
  %978 = or i64 %977, 6596275524057390584
  %979 = xor i64 %977, -1
  %980 = and i64 6596275524057390584, %979
  %981 = add i64 %980, %977
  %982 = xor i64 3654730884351305593, %974
  %983 = xor i64 %982, %981
  %984 = xor i64 %983, %970
  %985 = xor i64 %984, %973
  %986 = xor i64 %985, %976
  %987 = xor i64 %986, %978
  %988 = mul i64 %968, %987
  %989 = trunc i64 %988 to i8
  %990 = mul i8 %956, %989
  %991 = srem i8 %990, 2
  %992 = icmp eq i8 %991, 0
  %993 = mul i8 %954, %954
  %994 = and i64 %86, -6593999145268628274
  %995 = or i64 6593999145268628273, %86
  %996 = sub i64 %995, 6593999145268628273
  %997 = sext i32 %2 to i64
  %998 = or i64 %997, 6009075727926279017
  %999 = xor i64 %997, -1
  %1000 = and i64 6009075727926279017, %999
  %1001 = add i64 %1000, %997
  %1002 = xor i64 %998, %996
  %1003 = xor i64 %1002, -7117091579987879137
  %1004 = xor i64 %1003, %1001
  %1005 = xor i64 %1004, %994
  %1006 = and i64 %266, -2272390261767168703
  %1007 = or i64 2272390261767168702, %266
  %1008 = sub i64 %1007, 2272390261767168702
  %1009 = add i64 %117, 5720175955991149588
  %1010 = add i64 6463851193658761303, %117
  %1011 = sub i64 %1010, 743675237667611715
  %1012 = or i64 %86, 3541783793163751981
  %1013 = xor i64 %86, -1
  %1014 = and i64 3541783793163751981, %1013
  %1015 = add i64 %1014, %86
  %1016 = xor i64 %1006, 0
  %1017 = xor i64 %1016, %1008
  %1018 = xor i64 %1017, %1015
  %1019 = xor i64 %1018, %1009
  %1020 = xor i64 %1019, %1011
  %1021 = xor i64 %1020, %1012
  %1022 = mul i64 %1005, %1021
  %1023 = trunc i64 %1022 to i8
  %1024 = sub i8 %1023, %993
  %1025 = sub i8 0, %954
  %1026 = add i8 %1024, %1025
  %1027 = sub i8 0, %1026
  %1028 = srem i8 %1027, 2
  %1029 = icmp eq i8 %1028, 0
  %1030 = and i1 %992, %1029
  %1031 = select i1 %1030, i32 388314401, i32 388314402
  %1032 = xor i32 %1031, 3
  store i32 %1032, i32* %3, align 4
  %1033 = call i8** @bf13573797562172960439(i32* %3)
  %1034 = load i8*, i8** %1033, align 8
  indirectbr i8* %1034, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %414, %EntryBasicBlockSplit
  %1035 = load i8*, i8** %83, align 8
  %1036 = load i8, i8* %1035, align 1
  %1037 = mul i8 %1036, 2
  %1038 = and i64 %4, 5641741401671343310
  %1039 = or i64 -5641741401671343311, %4
  %1040 = sub i64 %1039, -5641741401671343311
  %1041 = sext i32 %2 to i64
  %1042 = add i64 %1041, 5459136897391684569
  %1043 = add i64 155297014642342498, %1041
  %1044 = add i64 %1043, 5303839882749342071
  %1045 = or i64 %117, -4252213572481034508
  %1046 = and i64 -4252213572481034508, %117
  %1047 = xor i64 -4252213572481034508, %117
  %1048 = or i64 %1046, %1047
  %1049 = xor i64 %1045, %1044
  %1050 = xor i64 %1049, %1042
  %1051 = xor i64 %1050, %1040
  %1052 = xor i64 %1051, %1048
  %1053 = xor i64 %1052, -6789924731919715041
  %1054 = xor i64 %1053, %1038
  %1055 = add i64 %117, 6271628651678955324
  %1056 = add i64 172331069701178275, %117
  %1057 = add i64 %1056, 6099297581977777049
  %1058 = sext i32 %1 to i64
  %1059 = or i64 %1058, -3347909804585280832
  %1060 = xor i64 %1058, -1
  %1061 = and i64 %1060, -7787762512186118605
  %1062 = and i64 %1058, 7787762512186118604
  %1063 = or i64 %1061, %1062
  %1064 = xor i64 4784400074764416243, %1063
  %1065 = xor i64 %1058, -1
  %1066 = or i64 3347909804585280831, %1065
  %1067 = xor i64 %1066, -1
  %1068 = and i64 %1067, -1
  %1069 = or i64 %1064, %1068
  %1070 = or i64 %80, 3835557224702701600
  %1071 = and i64 3835557224702701600, %80
  %1072 = xor i64 3835557224702701600, %80
  %1073 = or i64 %1071, %1072
  %1074 = xor i64 %1069, %1059
  %1075 = xor i64 %1074, %1057
  %1076 = xor i64 %1075, %1055
  %1077 = xor i64 %1076, 1433444252088012222
  %1078 = xor i64 %1077, %1073
  %1079 = xor i64 %1078, %1070
  %1080 = mul i64 %1054, %1079
  %1081 = trunc i64 %1080 to i8
  %1082 = mul i8 %1036, %1081
  %1083 = add i8 2, %1082
  %1084 = mul i8 %1037, %1083
  %1085 = srem i8 %1084, 4
  %1086 = or i64 %80, 6216333011453996796
  %1087 = xor i64 %80, -1
  %1088 = and i64 6216333011453996796, %1087
  %1089 = add i64 %1088, %80
  %1090 = or i64 %84, -4620591147309692427
  %1091 = xor i64 %84, -1
  %1092 = and i64 -4620591147309692427, %1091
  %1093 = add i64 %1092, %84
  %1094 = xor i64 %1090, %1089
  %1095 = xor i64 %1094, %1086
  %1096 = xor i64 %1095, %1093
  %1097 = xor i64 %1096, 7514933849125979269
  %1098 = and i64 %80, 8613933533477226288
  %1099 = or i64 -8613933533477226289, %80
  %1100 = sub i64 %1099, -8613933533477226289
  %1101 = sext i32 %dispatcher1 to i64
  %1102 = or i64 %1101, -7004817001424546073
  %1103 = and i64 -7004817001424546073, %1101
  %1104 = xor i64 -7004817001424546073, %1101
  %1105 = or i64 %1103, %1104
  %1106 = and i64 %40, 4143254243901229462
  %1107 = xor i64 %40, -1
  %1108 = or i64 -4143254243901229463, %1107
  %1109 = xor i64 %1108, -1
  %1110 = and i64 %1109, -1
  %1111 = xor i64 %1105, %1102
  %1112 = xor i64 %1111, 0
  %1113 = xor i64 %1112, %1098
  %1114 = xor i64 %1113, %1106
  %1115 = xor i64 %1114, %1110
  %1116 = xor i64 %1115, %1100
  %1117 = mul i64 %1097, %1116
  %1118 = trunc i64 %1117 to i8
  %1119 = icmp eq i8 %1085, %1118
  %1120 = mul i8 %1036, %1036
  %1121 = mul i8 %1120, %1036
  %1122 = add i8 %1121, %1036
  %1123 = srem i8 %1122, 2
  %1124 = icmp eq i8 %1123, 0
  %1125 = and i1 %1119, %1124
  %1126 = or i64 %117, -4653697938258010681
  %1127 = and i64 -4653697938258010681, %117
  %1128 = xor i64 -4653697938258010681, %117
  %1129 = or i64 %1127, %1128
  %1130 = and i64 %40, 4859947915752282084
  %1131 = xor i64 %40, -1
  %1132 = or i64 -4859947915752282085, %1131
  %1133 = xor i64 %1132, -1
  %1134 = and i64 %1133, -1
  %1135 = or i64 %80, 7169405384682547411
  %1136 = xor i64 %80, -1
  %1137 = and i64 7169405384682547411, %1136
  %1138 = add i64 %1137, %80
  %1139 = xor i64 %1129, %1135
  %1140 = xor i64 %1139, -4806909751282677001
  %1141 = xor i64 %1140, %1126
  %1142 = xor i64 %1141, %1134
  %1143 = xor i64 %1142, %1130
  %1144 = xor i64 %1143, %1138
  %1145 = sext i32 %2 to i64
  %1146 = add i64 %1145, -8945145111000655497
  %1147 = sub i64 0, %1145
  %1148 = sub i64 -8945145111000655497, %1147
  %1149 = and i64 %117, 8091772328718443365
  %1150 = xor i64 %117, -1
  %1151 = xor i64 8091772328718443365, %1150
  %1152 = and i64 %1151, 8091772328718443365
  %1153 = or i64 %4, 8397893078063885474
  %1154 = and i64 8397893078063885474, %4
  %1155 = xor i64 8397893078063885474, %4
  %1156 = or i64 %1154, %1155
  %1157 = xor i64 %1148, %1156
  %1158 = xor i64 %1157, -8066371754272744140
  %1159 = xor i64 %1158, %1149
  %1160 = xor i64 %1159, %1152
  %1161 = xor i64 %1160, %1153
  %1162 = xor i64 %1161, %1146
  %1163 = mul i64 %1144, %1162
  %1164 = trunc i64 %1163 to i32
  %1165 = select i1 %1125, i32 388314400, i32 %1164
  %1166 = xor i32 %1165, -1378477425
  %1167 = xor i32 %1166, -1378477437
  store i32 %1167, i32* %3, align 4
  %1168 = call i8** @bf13573797562172960439(i32* %3)
  %1169 = load i8*, i8** %1168, align 8
  indirectbr i8* %1169, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.22(i32 %0, i32 %.reload4, i1* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314401)
  %3 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %2
  store i8* blockaddress(@inner_loop.extracted.22, %.exitStub), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314404)
  %5 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.22, %codeRepl), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314403)
  %7 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.22, %"2"), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314406)
  %9 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %8
  store i8* blockaddress(@inner_loop.extracted.22, %EntryBasicBlockSplit), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314407)
  %11 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %10
  store i8* blockaddress(@inner_loop.extracted.22, %.exitStub1), i8** %11, align 8
  %12 = sext i32 %0 to i64
  %13 = or i64 %12, -5352663501820384395
  %14 = xor i64 %12, -1
  %15 = and i64 -5352663501820384395, %14
  %16 = add i64 %15, %12
  %17 = sext i32 %.reload4 to i64
  %18 = add i64 %17, 6433012866842289219
  %19 = and i64 6433012866842289219, %17
  %20 = or i64 6433012866842289219, %17
  %21 = add i64 %19, %20
  %22 = xor i64 -3224734065025308479, %16
  %23 = xor i64 %22, %21
  %24 = xor i64 %23, %13
  %25 = xor i64 %24, %18
  %26 = sext i32 %.reload4 to i64
  %27 = add i64 %26, 8025683025028493990
  %28 = and i64 8025683025028493990, %26
  %29 = or i64 8025683025028493990, %26
  %30 = add i64 %28, %29
  %31 = sext i32 %.reload4 to i64
  %32 = or i64 %31, -5175985867545059040
  %33 = and i64 -5175985867545059040, %31
  %34 = xor i64 -5175985867545059040, %31
  %35 = or i64 %33, %34
  %36 = sext i32 %0 to i64
  %37 = or i64 %36, 5979599732699517892
  %38 = xor i64 %36, -1
  %39 = and i64 %38, -8323415060403504098
  %40 = and i64 %36, 8323415060403504097
  %41 = or i64 %39, %40
  %42 = xor i64 -2412095017187250214, %41
  %43 = xor i64 %36, -1
  %44 = or i64 -5979599732699517893, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %42, %46
  %48 = xor i64 %37, %30
  %49 = xor i64 %48, %27
  %50 = xor i64 %49, %47
  %51 = xor i64 %50, %32
  %52 = xor i64 %51, -4146656755406741147
  %53 = xor i64 %52, %35
  %54 = mul i64 %25, %53
  %55 = call i64 @h9549842938191327224(i64 %54)
  %56 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %55
  store i8* blockaddress(@inner_loop.extracted.22, %BogusBasciBlock), i8** %56, align 8
  %57 = sext i32 %.reload4 to i64
  %58 = and i64 %57, -8868255445250359199
  %59 = or i64 8868255445250359198, %57
  %60 = sub i64 %59, 8868255445250359198
  %61 = sext i32 %.reload4 to i64
  %62 = add i64 %61, -674040487566708619
  %63 = sub i64 0, %61
  %64 = sub i64 -674040487566708619, %63
  %65 = xor i64 %64, %58
  %66 = xor i64 %65, %60
  %67 = xor i64 %66, %62
  %68 = xor i64 %67, -7195973707148858871
  %69 = sext i32 %0 to i64
  %70 = and i64 %69, -2472069285612104221
  %71 = xor i64 %69, -1
  %72 = or i64 2472069285612104220, %71
  %73 = xor i64 %72, -1
  %74 = and i64 %73, -1
  %75 = sext i32 %0 to i64
  %76 = or i64 %75, 6370573177753164026
  %77 = xor i64 %75, -1
  %78 = and i64 6370573177753164026, %77
  %79 = add i64 %78, %75
  %80 = sext i32 %.reload4 to i64
  %81 = or i64 %80, 6487697454336649614
  %82 = xor i64 %80, -1
  %83 = and i64 %82, -2756814496293826505
  %84 = and i64 %80, 2756814496293826504
  %85 = or i64 %83, %84
  %86 = xor i64 -8956184507305461319, %85
  %87 = xor i64 %80, -1
  %88 = or i64 -6487697454336649615, %87
  %89 = xor i64 %88, -1
  %90 = and i64 %89, -1
  %91 = or i64 %86, %90
  %92 = xor i64 %79, %81
  %93 = xor i64 %92, %91
  %94 = xor i64 %93, %76
  %95 = xor i64 %94, %74
  %96 = xor i64 %95, 818908907805557817
  %97 = xor i64 %96, %70
  %98 = mul i64 %68, %97
  %99 = trunc i64 %98 to i32
  %.reg2mem16 = alloca i8**, i32 %99, align 8
  %.reg2mem13 = alloca i8**, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %100 = sext i32 %.reload4 to i64
  %101 = add i64 %100, -2179840749467211124
  %102 = and i64 -2179840749467211124, %100
  %103 = or i64 -2179840749467211124, %100
  %104 = add i64 %102, %103
  %105 = sext i32 %.reload4 to i64
  %106 = and i64 %105, 6405518942030855547
  %107 = xor i64 %105, -1
  %108 = xor i64 6405518942030855547, %107
  %109 = and i64 %108, 6405518942030855547
  %110 = sext i32 %.reload4 to i64
  %111 = add i64 %110, -55251933549535564
  %112 = xor i64 -55251933549535564, %110
  %113 = and i64 -55251933549535564, %110
  %114 = mul i64 2, %113
  %115 = add i64 %112, %114
  %116 = xor i64 %115, %101
  %117 = xor i64 %116, -1219227806207862531
  %118 = xor i64 %117, %111
  %119 = xor i64 %118, %109
  %120 = xor i64 %119, %104
  %121 = xor i64 %120, %106
  %122 = sext i32 %.reload4 to i64
  %123 = or i64 %122, 6945190249045370592
  %124 = xor i64 %122, -1
  %125 = and i64 6945190249045370592, %124
  %126 = add i64 %125, %122
  %127 = sext i32 %.reload4 to i64
  %128 = and i64 %127, 8669250535970121416
  %129 = xor i64 %127, -1
  %130 = xor i64 8669250535970121416, %129
  %131 = and i64 %130, 8669250535970121416
  %132 = sext i32 %0 to i64
  %133 = and i64 %132, -3871266994435898415
  %134 = xor i64 %132, -1
  %135 = xor i64 -3871266994435898415, %134
  %136 = and i64 %135, -3871266994435898415
  %137 = xor i64 %136, %126
  %138 = xor i64 %137, %123
  %139 = xor i64 %138, %128
  %140 = xor i64 %139, %133
  %141 = xor i64 %140, -252618069777103787
  %142 = xor i64 %141, %131
  %143 = mul i64 %121, %142
  %144 = trunc i64 %143 to i32
  %.reg2mem3 = alloca i8**, i32 %144, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %145 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.22, %BogusBasciBlock), i8** %145, align 8
  %146 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %146, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.22, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %147 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %147, i8*** %.reg2mem3, align 8
  %.reload6 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop.extracted.22, %"2"), i8** %.reload6, align 8
  %148 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %148, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@inner_loop.extracted.22, %codeRepl), i8** %.reload9, align 8
  %149 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %149, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@inner_loop.extracted.22, %.exitStub), i8** %.reload12, align 8
  %150 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %150, i8*** %.reg2mem13, align 8
  %.reload15 = load i8**, i8*** %.reg2mem13, align 8
  store i8* blockaddress(@inner_loop.extracted.22, %.exitStub1), i8** %.reload15, align 8
  %151 = alloca i64, align 8
  %152 = sext i32 %.reload4 to i64
  %153 = or i64 %152, 3725785494252985694
  %154 = xor i64 %152, -1
  %155 = and i64 3725785494252985694, %154
  %156 = add i64 %155, %152
  %157 = sext i32 %0 to i64
  %158 = or i64 %157, -7417859415073777253
  %159 = xor i64 %157, -1
  %160 = and i64 %159, 2006411383712842370
  %161 = and i64 %157, -2006411383712842371
  %162 = or i64 %160, %161
  %163 = xor i64 -9018936901117371623, %162
  %164 = xor i64 %157, -1
  %165 = or i64 7417859415073777252, %164
  %166 = xor i64 %165, -1
  %167 = and i64 %166, -1
  %168 = or i64 %163, %167
  %169 = xor i64 -6318469583319244131, %158
  %170 = xor i64 %169, %153
  %171 = xor i64 %170, %168
  %172 = xor i64 %171, %156
  %173 = sext i32 %0 to i64
  %174 = and i64 %173, 7540233106217092836
  %175 = xor i64 %173, -1
  %176 = xor i64 7540233106217092836, %175
  %177 = and i64 %176, 7540233106217092836
  %178 = sext i32 %0 to i64
  %179 = and i64 %178, -3691241250836128342
  %180 = xor i64 %178, -1
  %181 = or i64 3691241250836128341, %180
  %182 = xor i64 %181, -1
  %183 = and i64 %182, -1
  %184 = xor i64 %174, %179
  %185 = xor i64 %184, %183
  %186 = xor i64 %185, 9103175181808041582
  %187 = xor i64 %186, %177
  %188 = mul i64 %172, %187
  %189 = call i64 @m1252811912226950246(i64 %188)
  %190 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13284784893890992073, i32 0, i64 %189
  store i8** %190, i8*** %.reg2mem16, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %191 = load i8*, i8** %.reload, align 8
  indirectbr i8* %191, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %192 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.22, %codeRepl), i8** %192, align 8
  %193 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.22, %.exitStub1), i8** %193, align 8
  %194 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted.22, %"2"), i8** %194, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %195 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %195, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload17 = load i8**, i8*** %.reg2mem16, align 8
  store i8* bitcast (i1 (i32, i32, i1*)* @inner_loop.extracted.22.extracted to i8*), i8** %.reload17, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  %196 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %196, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %197 = sub i64 -2025494920138100333, -2025494920138100404
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %198 = load i8*, i8** %.reload8, align 8
  indirectbr i8* %198, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %199 = and i64 %2, 2519191862270175197
  %200 = or i64 -2519191862270175198, %2
  %201 = sub i64 %200, -2519191862270175198
  %202 = add i64 %6, 4221174002995977523
  %203 = xor i64 4221174002995977523, %6
  %204 = and i64 4221174002995977523, %6
  %205 = mul i64 2, %204
  %206 = add i64 %203, %205
  %207 = xor i64 -794162337130831931, %206
  %208 = xor i64 %207, %199
  %209 = xor i64 %208, %202
  %210 = xor i64 %209, %201
  %211 = or i64 %189, -9166455533233641866
  %212 = and i64 -9166455533233641866, %189
  %213 = xor i64 -9166455533233641866, %189
  %214 = or i64 %212, %213
  %215 = add i64 %8, -4438253526568015212
  %216 = sub i64 0, %8
  %217 = sub i64 -4438253526568015212, %216
  %218 = and i64 %55, -2973650062747384087
  %219 = xor i64 %55, -1
  %220 = or i64 2973650062747384086, %219
  %221 = xor i64 %220, -1
  %222 = and i64 %221, -1
  %223 = xor i64 -2181055628955737858, %215
  %224 = xor i64 %223, %218
  %225 = xor i64 %224, %214
  %226 = xor i64 %225, %217
  %227 = xor i64 %226, %222
  %228 = xor i64 %227, %211
  %229 = mul i64 %210, %228
  store i64 %229, i64* %151, align 8
  %230 = alloca i8**, align 8
  %231 = and i64 %8, -1498780381943570865
  %232 = xor i64 %8, -1
  %233 = or i64 1498780381943570864, %232
  %234 = xor i64 %233, -1
  %235 = and i64 %234, -1
  %236 = and i64 %2, -6028657036193282688
  %237 = xor i64 %2, -1
  %238 = xor i64 -6028657036193282688, %237
  %239 = and i64 %238, -6028657036193282688
  %240 = xor i64 5864352030596495009, %236
  %241 = xor i64 %240, %239
  %242 = xor i64 %241, %231
  %243 = xor i64 %242, %235
  %244 = add i64 %10, 6036566517333517390
  %245 = sub i64 0, %10
  %246 = sub i64 6036566517333517390, %245
  %247 = add i64 %8, 108715967917238869
  %248 = add i64 3535659356517163035, %8
  %249 = add i64 %248, -3426943388599924166
  %250 = xor i64 %244, %246
  %251 = xor i64 %250, 0
  %252 = xor i64 %251, %249
  %253 = xor i64 %252, %247
  %254 = mul i64 %243, %253
  %255 = trunc i64 %254 to i32
  call void @"5784248439022692321"(i32 8, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* %151, i8*** %230, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 %255, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %256 = load i8**, i8*** %230, align 8
  %257 = load i8*, i8** %256, align 8
  %258 = bitcast i8* %257 to i1 (i32, i32, i1*)*
  %targetBlock = call i1 %258(i32 %0, i32 %.reload4, i1* %.out)
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  %259 = select i1 %targetBlock, i8** %.reload11, i8** %.reload14
  %260 = load i8*, i8** %259, align 8
  indirectbr i8* %260, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.23(i32 %.reload, i32 %0, float* %1, float %2, i32* %.out, i64* %.out1, float** %.out2) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314405)
  %5 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.23, %.exitStub3), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314404)
  %7 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.23, %.exitStub), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314400)
  %9 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %8
  store i8* blockaddress(@inner_loop.extracted.23, %codeRepl), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314406)
  %11 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %10
  store i8* blockaddress(@inner_loop.extracted.23, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314407)
  %13 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %12
  store i8* blockaddress(@inner_loop.extracted.23, %"2"), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314401)
  %15 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %14
  store i8* blockaddress(@inner_loop.extracted.23, %BogusBasciBlock), i8** %15, align 8
  %.reg2mem16 = alloca i8**, align 8
  %.reg2mem13 = alloca i8**, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem7 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %16 = sext i32 %.reload to i64
  %17 = and i64 %16, 7074507635275938658
  %18 = or i64 -7074507635275938659, %16
  %19 = sub i64 %18, -7074507635275938659
  %20 = sext i32 %.reload to i64
  %21 = and i64 %20, -1947103816224866668
  %22 = xor i64 %20, -1
  %23 = or i64 1947103816224866667, %22
  %24 = xor i64 %23, -1
  %25 = and i64 %24, -1
  %26 = xor i64 %25, %17
  %27 = xor i64 %26, %19
  %28 = xor i64 %27, -7871875381770423981
  %29 = xor i64 %28, %21
  %30 = sext i32 %0 to i64
  %31 = and i64 %30, -243762738188037347
  %32 = xor i64 %30, -1
  %33 = or i64 243762738188037346, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = sext i32 %.reload to i64
  %37 = and i64 %36, 8874421724519574898
  %38 = or i64 -8874421724519574899, %36
  %39 = sub i64 %38, -8874421724519574899
  %40 = sext i32 %0 to i64
  %41 = add i64 %40, 8065018261511895881
  %42 = sub i64 0, %40
  %43 = sub i64 8065018261511895881, %42
  %44 = xor i64 %37, %35
  %45 = xor i64 %44, %43
  %46 = xor i64 %45, %39
  %47 = xor i64 %46, %31
  %48 = xor i64 %47, -5131948445178856741
  %49 = xor i64 %48, %41
  %50 = mul i64 %29, %49
  %51 = trunc i64 %50 to i32
  %.reg2mem = alloca i8**, i32 %51, align 8
  %52 = sext i32 %0 to i64
  %53 = add i64 %52, 8568758307061714781
  %54 = sub i64 0, %52
  %55 = sub i64 8568758307061714781, %54
  %56 = sext i32 %.reload to i64
  %57 = or i64 %56, -7674557314807637737
  %58 = xor i64 %56, -1
  %59 = and i64 -7674557314807637737, %58
  %60 = add i64 %59, %56
  %61 = sext i32 %.reload to i64
  %62 = or i64 %61, -5884886453681752907
  %63 = and i64 -5884886453681752907, %61
  %64 = xor i64 -5884886453681752907, %61
  %65 = or i64 %63, %64
  %66 = xor i64 %62, %57
  %67 = xor i64 %66, %55
  %68 = xor i64 %67, %60
  %69 = xor i64 %68, %53
  %70 = xor i64 %69, %65
  %71 = xor i64 %70, -3893762815492332131
  %72 = sext i32 %.reload to i64
  %73 = add i64 %72, -2144522103089664685
  %74 = xor i64 -2144522103089664685, %72
  %75 = and i64 -2144522103089664685, %72
  %76 = mul i64 2, %75
  %77 = add i64 %74, %76
  %78 = sext i32 %0 to i64
  %79 = add i64 %78, 7348524795600314841
  %80 = and i64 7348524795600314841, %78
  %81 = or i64 7348524795600314841, %78
  %82 = add i64 %80, %81
  %83 = sext i32 %0 to i64
  %84 = add i64 %83, 4697344801348995799
  %85 = add i64 6549747614482119331, %83
  %86 = add i64 %85, -1852402813133123532
  %87 = xor i64 %86, %79
  %88 = xor i64 %87, %73
  %89 = xor i64 %88, %84
  %90 = xor i64 %89, -3740672539085392834
  %91 = xor i64 %90, %82
  %92 = xor i64 %91, %77
  %93 = mul i64 %71, %92
  %94 = trunc i64 %93 to i32
  %JumpTable = alloca i8*, i32 %94, align 8
  %95 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.23, %BogusBasciBlock), i8** %95, align 8
  %96 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %96, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.23, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %97 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %97, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@inner_loop.extracted.23, %"2"), i8** %.reload6, align 8
  %98 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %98, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@inner_loop.extracted.23, %codeRepl), i8** %.reload9, align 8
  %99 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %99, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@inner_loop.extracted.23, %.exitStub), i8** %.reload12, align 8
  %100 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %100, i8*** %.reg2mem13, align 8
  %.reload15 = load i8**, i8*** %.reg2mem13, align 8
  store i8* blockaddress(@inner_loop.extracted.23, %.exitStub3), i8** %.reload15, align 8
  %101 = sext i32 %.reload to i64
  %102 = add i64 %101, 1516023378046493064
  %103 = sub i64 0, %101
  %104 = add i64 -1516023378046493064, %103
  %105 = sub i64 0, %104
  %106 = sext i32 %0 to i64
  %107 = or i64 %106, 2392530763605621045
  %108 = xor i64 %106, -1
  %109 = and i64 2392530763605621045, %108
  %110 = add i64 %109, %106
  %111 = sext i32 %.reload to i64
  %112 = and i64 %111, -2638909240030466687
  %113 = xor i64 %111, -1
  %114 = or i64 2638909240030466686, %113
  %115 = xor i64 %114, -1
  %116 = and i64 %115, -1
  %117 = xor i64 %116, %102
  %118 = xor i64 %117, %105
  %119 = xor i64 %118, %110
  %120 = xor i64 %119, 9027715118526737335
  %121 = xor i64 %120, %112
  %122 = xor i64 %121, %107
  %123 = sext i32 %.reload to i64
  %124 = or i64 %123, -3283776487122885091
  %125 = and i64 -3283776487122885091, %123
  %126 = xor i64 -3283776487122885091, %123
  %127 = or i64 %125, %126
  %128 = sext i32 %.reload to i64
  %129 = or i64 %128, -1601112656561541931
  %130 = and i64 -1601112656561541931, %128
  %131 = xor i64 -1601112656561541931, %128
  %132 = or i64 %130, %131
  %133 = sext i32 %.reload to i64
  %134 = or i64 %133, 3995246140285097401
  %135 = and i64 3995246140285097401, %133
  %136 = xor i64 3995246140285097401, %133
  %137 = or i64 %135, %136
  %138 = xor i64 %124, %132
  %139 = xor i64 %138, %134
  %140 = xor i64 %139, %127
  %141 = xor i64 %140, -6979336381326286329
  %142 = xor i64 %141, %137
  %143 = xor i64 %142, %129
  %144 = mul i64 %122, %143
  %145 = trunc i64 %144 to i32
  %146 = alloca i64, i32 %145, align 8
  %147 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %148 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2996394070652152791, i32 0, i64 %147
  store i8** %148, i8*** %.reg2mem16, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %149 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %149, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %150 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.23, %"2"), i8** %150, align 8
  %151 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.23, %.exitStub3), i8** %151, align 8
  %152 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted.23, %codeRepl), i8** %152, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %153 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %153, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload17 = load i8**, i8*** %.reg2mem16, align 8
  store i8* bitcast (i1 (i32, i32, i32*, i64*, float*, float**, float)* @inner_loop.extracted.23.extracted to i8*), i8** %.reload17, align 8
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %154 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %154, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %155 = load i8*, i8** %.reload8, align 8
  indirectbr i8* %155, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %146, align 8
  %156 = alloca i8**, align 8
  %157 = or i64 %14, 4890096312961179938
  %158 = xor i64 %14, -1
  %159 = and i64 %158, 4813501291592138338
  %160 = and i64 %14, -4813501291592138339
  %161 = or i64 %159, %160
  %162 = xor i64 77090453362843456, %161
  %163 = xor i64 %14, -1
  %164 = or i64 -4890096312961179939, %163
  %165 = xor i64 %164, -1
  %166 = and i64 %165, -1
  %167 = or i64 %162, %166
  %168 = and i64 %147, 6016712386360087697
  %169 = xor i64 %147, -1
  %170 = or i64 -6016712386360087698, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %8, 6694870197442325584
  %174 = xor i64 %8, -1
  %175 = and i64 6694870197442325584, %174
  %176 = add i64 %175, %8
  %177 = xor i64 %176, %157
  %178 = xor i64 %177, %173
  %179 = xor i64 %178, %167
  %180 = xor i64 %179, %172
  %181 = xor i64 %180, %168
  %182 = xor i64 %181, -9019667809823705583
  %183 = add i64 %14, -3907172199893293153
  %184 = and i64 -3907172199893293153, %14
  %185 = or i64 -3907172199893293153, %14
  %186 = add i64 %184, %185
  %187 = and i64 %14, 8513201076071181973
  %188 = or i64 -8513201076071181974, %14
  %189 = sub i64 %188, -8513201076071181974
  %190 = or i64 %147, 3192118669604287617
  %191 = xor i64 %147, -1
  %192 = and i64 3192118669604287617, %191
  %193 = add i64 %192, %147
  %194 = xor i64 %193, %186
  %195 = xor i64 %194, %189
  %196 = xor i64 %195, %183
  %197 = xor i64 %196, %187
  %198 = xor i64 %197, %190
  %199 = xor i64 %198, 0
  %200 = mul i64 %182, %199
  %201 = trunc i64 %200 to i32
  %202 = add i64 %147, 1575525281521307901
  %203 = add i64 529723639902674145, %147
  %204 = sub i64 %203, -1045801641618633756
  %205 = add i64 %6, -2591437919200012424
  %206 = sub i64 0, %6
  %207 = add i64 2591437919200012424, %206
  %208 = sub i64 0, %207
  %209 = sext i32 %.reload to i64
  %210 = add i64 %209, -3324523672544382863
  %211 = and i64 -3324523672544382863, %209
  %212 = or i64 -3324523672544382863, %209
  %213 = add i64 %211, %212
  %214 = xor i64 %213, %202
  %215 = xor i64 %214, %210
  %216 = xor i64 %215, -479774569393126769
  %217 = xor i64 %216, %204
  %218 = xor i64 %217, %205
  %219 = xor i64 %218, %208
  %220 = or i64 %14, -923482782331297069
  %221 = xor i64 %14, -1
  %222 = and i64 -923482782331297069, %221
  %223 = add i64 %222, %14
  %224 = or i64 %10, 7754555344431347541
  %225 = xor i64 %10, -1
  %226 = and i64 7754555344431347541, %225
  %227 = add i64 %226, %10
  %228 = or i64 %147, 5265251491106524583
  %229 = and i64 5265251491106524583, %147
  %230 = xor i64 5265251491106524583, %147
  %231 = or i64 %229, %230
  %232 = xor i64 0, %228
  %233 = xor i64 %232, %223
  %234 = xor i64 %233, %220
  %235 = xor i64 %234, %231
  %236 = xor i64 %235, %224
  %237 = xor i64 %236, %227
  %238 = mul i64 %219, %237
  %239 = trunc i64 %238 to i1
  %240 = and i64 %6, 5893379739670533020
  %241 = xor i64 %6, -1
  %242 = xor i64 5893379739670533020, %241
  %243 = and i64 %242, 5893379739670533020
  %244 = and i64 %12, -3532974156698596976
  %245 = xor i64 %12, -1
  %246 = xor i64 -3532974156698596976, %245
  %247 = and i64 %246, -3532974156698596976
  %248 = or i64 %14, 7413009158640756519
  %249 = and i64 7413009158640756519, %14
  %250 = xor i64 7413009158640756519, %14
  %251 = or i64 %249, %250
  %252 = xor i64 %251, %248
  %253 = xor i64 %252, 7699440795935873343
  %254 = xor i64 %253, %247
  %255 = xor i64 %254, %240
  %256 = xor i64 %255, %243
  %257 = xor i64 %256, %244
  %258 = add i64 %8, 3705477689614050676
  %259 = xor i64 3705477689614050676, %8
  %260 = and i64 3705477689614050676, %8
  %261 = mul i64 2, %260
  %262 = add i64 %259, %261
  %263 = or i64 %8, 917487901235552460
  %264 = xor i64 %8, -1
  %265 = and i64 %264, -942075868432948072
  %266 = and i64 %8, 942075868432948071
  %267 = or i64 %265, %266
  %268 = xor i64 -119766916598660012, %267
  %269 = xor i64 %8, -1
  %270 = or i64 -917487901235552461, %269
  %271 = xor i64 %270, -1
  %272 = and i64 %271, -1
  %273 = or i64 %268, %272
  %274 = xor i64 %273, %258
  %275 = xor i64 %274, 0
  %276 = xor i64 %275, %262
  %277 = xor i64 %276, %263
  %278 = mul i64 %257, %277
  %279 = trunc i64 %278 to i32
  %280 = and i64 %6, -5912772522095130124
  %281 = or i64 5912772522095130123, %6
  %282 = sub i64 %281, 5912772522095130123
  %283 = or i64 %8, 1587891773211641839
  %284 = and i64 1587891773211641839, %8
  %285 = xor i64 1587891773211641839, %8
  %286 = or i64 %284, %285
  %287 = add i64 %8, 4238583869303967798
  %288 = and i64 4238583869303967798, %8
  %289 = or i64 4238583869303967798, %8
  %290 = add i64 %288, %289
  %291 = xor i64 %290, %283
  %292 = xor i64 %291, %280
  %293 = xor i64 %292, %287
  %294 = xor i64 %293, %282
  %295 = xor i64 %294, %286
  %296 = xor i64 %295, -607102587687662945
  %297 = or i64 %4, 5024801225754943784
  %298 = xor i64 %4, -1
  %299 = and i64 5024801225754943784, %298
  %300 = add i64 %299, %4
  %301 = add i64 %6, -8559114158314410531
  %302 = sub i64 0, %6
  %303 = sub i64 -8559114158314410531, %302
  %304 = xor i64 0, %301
  %305 = xor i64 %304, %300
  %306 = xor i64 %305, %303
  %307 = xor i64 %306, %297
  %308 = mul i64 %296, %307
  %309 = trunc i64 %308 to i32
  %310 = sext i32 %0 to i64
  %311 = add i64 %310, 8198142770043994793
  %312 = sub i64 0, %310
  %313 = add i64 -8198142770043994793, %312
  %314 = sub i64 0, %313
  %315 = sext i32 %.reload to i64
  %316 = or i64 %315, -6940933573426052706
  %317 = xor i64 %315, -1
  %318 = and i64 %317, -5095069259798922300
  %319 = and i64 %315, 5095069259798922299
  %320 = or i64 %318, %319
  %321 = xor i64 2803055568900045402, %320
  %322 = xor i64 %315, -1
  %323 = or i64 6940933573426052705, %322
  %324 = xor i64 %323, -1
  %325 = and i64 %324, -1
  %326 = or i64 %321, %325
  %327 = add i64 %4, 6047424493853243539
  %328 = sub i64 0, %4
  %329 = sub i64 6047424493853243539, %328
  %330 = xor i64 %311, %329
  %331 = xor i64 %330, -9217936700351891909
  %332 = xor i64 %331, %326
  %333 = xor i64 %332, %314
  %334 = xor i64 %333, %316
  %335 = xor i64 %334, %327
  %336 = and i64 %4, -5449130039122237850
  %337 = xor i64 %4, -1
  %338 = or i64 5449130039122237849, %337
  %339 = xor i64 %338, -1
  %340 = and i64 %339, -1
  %341 = and i64 %8, -6649892247937714140
  %342 = or i64 6649892247937714139, %8
  %343 = sub i64 %342, 6649892247937714139
  %344 = xor i64 %340, %343
  %345 = xor i64 %344, 0
  %346 = xor i64 %345, %336
  %347 = xor i64 %346, %341
  %348 = mul i64 %335, %347
  %349 = trunc i64 %348 to i32
  %350 = and i64 %12, -6927014471189809890
  %351 = xor i64 %12, -1
  %352 = or i64 6927014471189809889, %351
  %353 = xor i64 %352, -1
  %354 = and i64 %353, -1
  %355 = or i64 %4, -1006993740413021758
  %356 = xor i64 %4, -1
  %357 = and i64 -1006993740413021758, %356
  %358 = add i64 %357, %4
  %359 = and i64 %12, -6878549923608279567
  %360 = or i64 6878549923608279566, %12
  %361 = sub i64 %360, 6878549923608279566
  %362 = xor i64 %350, %354
  %363 = xor i64 %362, %358
  %364 = xor i64 %363, 5976450533928359295
  %365 = xor i64 %364, %355
  %366 = xor i64 %365, %361
  %367 = xor i64 %366, %359
  %368 = and i64 %147, 7844112106384020691
  %369 = xor i64 %147, -1
  %370 = or i64 -7844112106384020692, %369
  %371 = xor i64 %370, -1
  %372 = and i64 %371, -1
  %373 = sext i32 %.reload to i64
  %374 = and i64 %373, -2980226755386449433
  %375 = xor i64 %373, -1
  %376 = or i64 2980226755386449432, %375
  %377 = xor i64 %376, -1
  %378 = and i64 %377, -1
  %379 = xor i64 0, %368
  %380 = xor i64 %379, %378
  %381 = xor i64 %380, %374
  %382 = xor i64 %381, %372
  %383 = mul i64 %367, %382
  %384 = trunc i64 %383 to i32
  %385 = or i64 %10, -5351274727276560090
  %386 = and i64 -5351274727276560090, %10
  %387 = xor i64 -5351274727276560090, %10
  %388 = or i64 %386, %387
  %389 = add i64 %14, -7295360780844088956
  %390 = sub i64 0, %14
  %391 = sub i64 -7295360780844088956, %390
  %392 = and i64 %10, -1255492213638759667
  %393 = xor i64 %10, -1
  %394 = or i64 1255492213638759666, %393
  %395 = xor i64 %394, -1
  %396 = and i64 %395, -1
  %397 = xor i64 %396, %391
  %398 = xor i64 %397, %389
  %399 = xor i64 %398, %392
  %400 = xor i64 %399, %385
  %401 = xor i64 %400, %388
  %402 = xor i64 %401, 7032251421549935739
  %403 = sext i32 %.reload to i64
  %404 = and i64 %403, -6307882874536514601
  %405 = xor i64 %403, -1
  %406 = xor i64 -6307882874536514601, %405
  %407 = and i64 %406, -6307882874536514601
  %408 = or i64 %14, -4766884116282858802
  %409 = and i64 -4766884116282858802, %14
  %410 = xor i64 -4766884116282858802, %14
  %411 = or i64 %409, %410
  %412 = xor i64 %411, %404
  %413 = xor i64 %412, 0
  %414 = xor i64 %413, %407
  %415 = xor i64 %414, %408
  %416 = mul i64 %402, %415
  %417 = sext i32 %.reload to i64
  %418 = and i64 %417, 3351186294679208626
  %419 = or i64 -3351186294679208627, %417
  %420 = sub i64 %419, -3351186294679208627
  %421 = and i64 %4, 5010441271683501235
  %422 = xor i64 %4, -1
  %423 = xor i64 5010441271683501235, %422
  %424 = and i64 %423, 5010441271683501235
  %425 = xor i64 %418, %424
  %426 = xor i64 %425, -8166667460079639255
  %427 = xor i64 %426, %421
  %428 = xor i64 %427, %420
  %429 = or i64 %14, 2456917260870238841
  %430 = xor i64 %14, -1
  %431 = and i64 2456917260870238841, %430
  %432 = add i64 %431, %14
  %433 = sext i32 %.reload to i64
  %434 = or i64 %433, -5120563086391006558
  %435 = and i64 -5120563086391006558, %433
  %436 = xor i64 -5120563086391006558, %433
  %437 = or i64 %435, %436
  %438 = or i64 %147, -3037225203091005065
  %439 = xor i64 %147, -1
  %440 = and i64 %439, -5193704492221762367
  %441 = and i64 %147, 5193704492221762366
  %442 = or i64 %440, %441
  %443 = xor i64 7076802689314641334, %442
  %444 = xor i64 %147, -1
  %445 = or i64 3037225203091005064, %444
  %446 = xor i64 %445, -1
  %447 = and i64 %446, -1
  %448 = or i64 %443, %447
  %449 = xor i64 %437, %429
  %450 = xor i64 %449, %434
  %451 = xor i64 %450, %448
  %452 = xor i64 %451, %432
  %453 = xor i64 %452, 0
  %454 = xor i64 %453, %438
  %455 = mul i64 %428, %454
  %456 = trunc i64 %455 to i1
  %457 = add i64 %14, -1079351693490762811
  %458 = xor i64 -1079351693490762811, %14
  %459 = and i64 -1079351693490762811, %14
  %460 = mul i64 2, %459
  %461 = add i64 %458, %460
  %462 = sext i32 %.reload to i64
  %463 = add i64 %462, -1143653422986738165
  %464 = add i64 7777477650580729461, %462
  %465 = sub i64 %464, 8921131073567467626
  %466 = xor i64 %457, %463
  %467 = xor i64 %466, %465
  %468 = xor i64 %467, %461
  %469 = xor i64 %468, -6801824578883021743
  %470 = sext i32 %.reload to i64
  %471 = add i64 %470, 1662687350216217395
  %472 = xor i64 1662687350216217395, %470
  %473 = and i64 1662687350216217395, %470
  %474 = mul i64 2, %473
  %475 = add i64 %472, %474
  %476 = sext i32 %0 to i64
  %477 = or i64 %476, -177250849170106050
  %478 = xor i64 %476, -1
  %479 = and i64 %478, 5886009503013073929
  %480 = and i64 %476, -5886009503013073930
  %481 = or i64 %479, %480
  %482 = xor i64 -6042413156431647433, %481
  %483 = xor i64 %476, -1
  %484 = or i64 177250849170106049, %483
  %485 = xor i64 %484, -1
  %486 = and i64 %485, -1
  %487 = or i64 %482, %486
  %488 = and i64 %10, 1602618517890308292
  %489 = xor i64 %10, -1
  %490 = or i64 -1602618517890308293, %489
  %491 = xor i64 %490, -1
  %492 = and i64 %491, -1
  %493 = xor i64 %475, %487
  %494 = xor i64 %493, %477
  %495 = xor i64 %494, %492
  %496 = xor i64 %495, 0
  %497 = xor i64 %496, %488
  %498 = xor i64 %497, %471
  %499 = mul i64 %469, %498
  %500 = trunc i64 %499 to i32
  %501 = and i64 %12, 2888615041983667739
  %502 = xor i64 %12, -1
  %503 = or i64 -2888615041983667740, %502
  %504 = xor i64 %503, -1
  %505 = and i64 %504, -1
  %506 = and i64 %10, -2440072182727820148
  %507 = xor i64 %10, -1
  %508 = xor i64 -2440072182727820148, %507
  %509 = and i64 %508, -2440072182727820148
  %510 = and i64 %4, -848532947228651
  %511 = or i64 848532947228650, %4
  %512 = sub i64 %511, 848532947228650
  %513 = xor i64 %509, %505
  %514 = xor i64 %513, %510
  %515 = xor i64 %514, %501
  %516 = xor i64 %515, 312234898966342609
  %517 = xor i64 %516, %512
  %518 = xor i64 %517, %506
  %519 = sext i32 %0 to i64
  %520 = and i64 %519, 5910368075768933374
  %521 = xor i64 %519, -1
  %522 = or i64 -5910368075768933375, %521
  %523 = xor i64 %522, -1
  %524 = and i64 %523, -1
  %525 = and i64 %14, -2616057608234318629
  %526 = xor i64 %14, -1
  %527 = or i64 2616057608234318628, %526
  %528 = xor i64 %527, -1
  %529 = and i64 %528, -1
  %530 = sext i32 %0 to i64
  %531 = or i64 %530, -5838377700485533487
  %532 = xor i64 %530, -1
  %533 = and i64 -5838377700485533487, %532
  %534 = add i64 %533, %530
  %535 = xor i64 %524, %534
  %536 = xor i64 %535, 0
  %537 = xor i64 %536, %529
  %538 = xor i64 %537, %531
  %539 = xor i64 %538, %525
  %540 = xor i64 %539, %520
  %541 = mul i64 %518, %540
  call void @"5784248439022692321"(i32 %201, i64* %146, i8*** %156, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 %239, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 %279, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 %309, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 %349, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 %384, i32 0, i1* null, i1* null, i64 %416, i64* null, i64* null, i1 %456, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 %500, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 %541, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %542 = load i8**, i8*** %156, align 8
  %543 = load i8*, i8** %542, align 8
  %544 = bitcast i8* %543 to i1 (i32, i32, i32*, i64*, float*, float**, float)*
  %targetBlock = call i1 %544(i32 %.reload, i32 %0, i32* %.out, i64* %.out1, float* %1, float** %.out2, float %2)
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  %545 = select i1 %targetBlock, i8** %.reload11, i8** %.reload14
  %546 = load i8*, i8** %545, align 8
  indirectbr i8* %546, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %547 = or i64 %147, -823586791778960104
  %548 = xor i64 %147, -1
  %549 = and i64 %548, 2743382059208829872
  %550 = and i64 %147, -2743382059208829873
  %551 = or i64 %549, %550
  %552 = xor i64 -3278484878489954648, %551
  %553 = xor i64 %147, -1
  %554 = or i64 823586791778960103, %553
  %555 = xor i64 %554, -1
  %556 = and i64 %555, -1
  %557 = or i64 %552, %556
  %558 = sext i32 %0 to i64
  %559 = and i64 %558, 3025496936933401119
  %560 = or i64 -3025496936933401120, %558
  %561 = sub i64 %560, -3025496936933401120
  %562 = or i64 %8, 554239840750368858
  %563 = and i64 554239840750368858, %8
  %564 = xor i64 554239840750368858, %8
  %565 = or i64 %563, %564
  %566 = xor i64 %561, %565
  %567 = xor i64 %566, %557
  %568 = xor i64 %567, %547
  %569 = xor i64 %568, %562
  %570 = xor i64 %569, %559
  %571 = xor i64 %570, -4881389502547013671
  %572 = sext i32 %0 to i64
  %573 = or i64 %572, -3824282426286912461
  %574 = xor i64 %572, -1
  %575 = and i64 %574, 4983269549931389362
  %576 = and i64 %572, -4983269549931389363
  %577 = or i64 %575, %576
  %578 = xor i64 -8086976029278065279, %577
  %579 = xor i64 %572, -1
  %580 = or i64 3824282426286912460, %579
  %581 = xor i64 %580, -1
  %582 = and i64 %581, -1
  %583 = or i64 %578, %582
  %584 = sext i32 %0 to i64
  %585 = add i64 %584, 6084414118118810656
  %586 = add i64 -1597038617418100851, %584
  %587 = sub i64 %586, -7681452735536911507
  %588 = xor i64 8628064669747396713, %573
  %589 = xor i64 %588, %583
  %590 = xor i64 %589, %587
  %591 = xor i64 %590, %585
  %592 = mul i64 %571, %591
  %593 = trunc i64 %592 to i1
  ret i1 %593

.exitStub3:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.24(i1 %0, i1 %1, i1 %2, i1* %.out, i1* %.out1) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314399)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.24, %.exitStub2), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314447)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.24, %loopEnd), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314493)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@inner_loop.extracted.24, %.exitStub), i8** %9, align 8
  %10 = call i64 @h9549842938191327224(i64 388314428)
  %11 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %10
  store i8* blockaddress(@inner_loop.extracted.24, %BogusBasicBlock), i8** %11, align 8
  %12 = call i64 @h9549842938191327224(i64 388314371)
  %13 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %12
  store i8* blockaddress(@inner_loop.extracted.24, %150), i8** %13, align 8
  %14 = call i64 @h9549842938191327224(i64 388314495)
  %15 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %14
  store i8* blockaddress(@inner_loop.extracted.24, %defaultSwitchBasicBlock), i8** %15, align 8
  %16 = call i64 @h9549842938191327224(i64 388314440)
  %17 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %16
  store i8* blockaddress(@inner_loop.extracted.24, %EntryBasicBlockSplit), i8** %17, align 8
  %18 = call i64 @h9549842938191327224(i64 388314419)
  %19 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %18
  store i8* blockaddress(@inner_loop.extracted.24, %loopStart), i8** %19, align 8
  %lookupTable = alloca [9 x i32], align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %27, align 4
  %28 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %28, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314419, i32* %3, align 4
  %29 = call i8** @bf3325468485390379012(i32* %3)
  %30 = load i8*, i8** %29, align 8
  indirectbr i8* %30, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %150
    i32 2, label %.exitStub
    i32 3, label %.exitStub2
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %31 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %34 = load i32, i32* %33, align 4
  %35 = sub i32 %32, %34
  store i32 %35, i32* %dispatcher, align 4
  %36 = load i8*, i8** %19, align 8
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %6, 5193443926599300867
  %39 = and i64 5193443926599300867, %6
  %40 = xor i64 5193443926599300867, %6
  %41 = or i64 %39, %40
  %42 = and i64 %12, -8479309787378788106
  %43 = xor i64 %12, -1
  %44 = or i64 8479309787378788105, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = add i64 %8, -972292345180861766
  %48 = add i64 -5370809674304748126, %8
  %49 = add i64 %48, 4398517329123886360
  %50 = xor i64 %47, %41
  %51 = xor i64 %50, %38
  %52 = xor i64 %51, %42
  %53 = xor i64 %52, 7416365359900213741
  %54 = xor i64 %53, %46
  %55 = xor i64 %54, %49
  %56 = and i64 %8, -6692946241939395015
  %57 = or i64 6692946241939395014, %8
  %58 = sub i64 %57, 6692946241939395014
  %59 = sext i32 %dispatcher1 to i64
  %60 = add i64 %59, 6238913816059413975
  %61 = and i64 6238913816059413975, %59
  %62 = or i64 6238913816059413975, %59
  %63 = add i64 %61, %62
  %64 = xor i64 %56, %63
  %65 = xor i64 %64, %58
  %66 = xor i64 %65, -1678980367463315510
  %67 = xor i64 %66, %60
  %68 = mul i64 %55, %67
  %69 = trunc i64 %68 to i8
  %70 = mul i8 %37, %69
  %71 = or i64 %10, -3363259865907990699
  %72 = xor i64 %10, -1
  %73 = and i64 -3363259865907990699, %72
  %74 = add i64 %73, %10
  %75 = add i64 %18, -2648323090153299961
  %76 = add i64 -2869906718256550714, %18
  %77 = add i64 %76, 221583628103250753
  %78 = xor i64 -4277440982832797929, %71
  %79 = xor i64 %78, %75
  %80 = xor i64 %79, %74
  %81 = xor i64 %80, %77
  %82 = or i64 %10, 4884411122607009315
  %83 = and i64 4884411122607009315, %10
  %84 = xor i64 4884411122607009315, %10
  %85 = or i64 %83, %84
  %86 = add i64 %18, -7113427278516615577
  %87 = sub i64 0, %18
  %88 = add i64 7113427278516615577, %87
  %89 = sub i64 0, %88
  %90 = and i64 %10, 5324272553107518893
  %91 = or i64 -5324272553107518894, %10
  %92 = sub i64 %91, -5324272553107518894
  %93 = xor i64 %92, %82
  %94 = xor i64 %93, %86
  %95 = xor i64 %94, %85
  %96 = xor i64 %95, %89
  %97 = xor i64 %96, 8758455736923586894
  %98 = xor i64 %97, %90
  %99 = mul i64 %81, %98
  %100 = trunc i64 %99 to i8
  %101 = mul i8 %37, %100
  %102 = add i8 2, %101
  %103 = mul i8 %70, %102
  %104 = srem i8 %103, 4
  %105 = or i64 %14, 1745212186029090731
  %106 = and i64 1745212186029090731, %14
  %107 = xor i64 1745212186029090731, %14
  %108 = or i64 %106, %107
  %109 = and i64 %14, 8853753161664121568
  %110 = xor i64 %14, -1
  %111 = xor i64 8853753161664121568, %110
  %112 = and i64 %111, 8853753161664121568
  %113 = and i64 %16, 7032220773353722559
  %114 = xor i64 %16, -1
  %115 = or i64 -7032220773353722560, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = xor i64 %108, -1584449368147928895
  %119 = xor i64 %118, %112
  %120 = xor i64 %119, %109
  %121 = xor i64 %120, %105
  %122 = xor i64 %121, %113
  %123 = xor i64 %122, %117
  %124 = and i64 %10, -4834049548365389879
  %125 = xor i64 %10, -1
  %126 = xor i64 -4834049548365389879, %125
  %127 = and i64 %126, -4834049548365389879
  %128 = and i64 %12, 2381266897262935036
  %129 = xor i64 %12, -1
  %130 = or i64 -2381266897262935037, %129
  %131 = xor i64 %130, -1
  %132 = and i64 %131, -1
  %133 = xor i64 0, %127
  %134 = xor i64 %133, %132
  %135 = xor i64 %134, %124
  %136 = xor i64 %135, %128
  %137 = mul i64 %123, %136
  %138 = trunc i64 %137 to i8
  %139 = icmp eq i8 %104, %138
  %140 = mul i8 %37, %37
  %141 = mul i8 %140, %37
  %142 = add i8 %141, %37
  %143 = srem i8 %142, 2
  %144 = icmp eq i8 %143, 0
  %145 = and i1 %139, %144
  %146 = select i1 %145, i32 388314447, i32 388314447
  %147 = xor i32 %146, 0
  store i32 %147, i32* %3, align 4
  %148 = call i8** @bf3325468485390379012(i32* %3)
  %149 = load i8*, i8** %148, align 8
  indirectbr i8* %149, [label %loopEnd, label %EntryBasicBlockSplit]

150:                                              ; preds = %150, %loopStart
  %151 = and i1 %0, true
  store i1 %151, i1* %.out, align 1
  %152 = xor i1 %1, true
  %153 = or i64 %10, 4444030872268667918
  %154 = and i64 4444030872268667918, %10
  %155 = xor i64 4444030872268667918, %10
  %156 = or i64 %154, %155
  %157 = and i64 %8, -429043453402943558
  %158 = xor i64 %8, -1
  %159 = or i64 429043453402943557, %158
  %160 = xor i64 %159, -1
  %161 = and i64 %160, -1
  %162 = xor i64 -2140552265211314329, %157
  %163 = xor i64 %162, %161
  %164 = xor i64 %163, %153
  %165 = xor i64 %164, %156
  %166 = and i64 %18, -3989722795404356870
  %167 = xor i64 %18, -1
  %168 = or i64 3989722795404356869, %167
  %169 = xor i64 %168, -1
  %170 = and i64 %169, -1
  %171 = add i64 %6, 5352106670283457834
  %172 = add i64 -8271241626325773114, %6
  %173 = add i64 %172, -4823395777100320668
  %174 = xor i64 0, %171
  %175 = xor i64 %174, %170
  %176 = xor i64 %175, %166
  %177 = xor i64 %176, %173
  %178 = mul i64 %165, %177
  %179 = trunc i64 %178 to i1
  %180 = and i1 %152, %179
  %181 = and i1 %1, true
  %182 = or i1 %180, %181
  %183 = xor i1 %151, true
  %184 = and i1 %183, false
  %185 = and i1 %151, true
  %186 = or i1 %184, %185
  %187 = xor i1 %182, %186
  %188 = add i64 %14, 4488367379648288640
  %189 = add i64 135174202127019553, %14
  %190 = add i64 %189, 4353193177521269087
  %191 = add i64 %6, -9121536308474533037
  %192 = add i64 572379480125053749, %6
  %193 = add i64 %192, 8752828285109964830
  %194 = or i64 %4, -4474157364923382426
  %195 = xor i64 %4, -1
  %196 = and i64 -4474157364923382426, %195
  %197 = add i64 %196, %4
  %198 = xor i64 -3938453099411914007, %191
  %199 = xor i64 %198, %197
  %200 = xor i64 %199, %190
  %201 = xor i64 %200, %193
  %202 = xor i64 %201, %194
  %203 = xor i64 %202, %188
  %204 = sext i32 %dispatcher1 to i64
  %205 = add i64 %204, -2009686949558478891
  %206 = xor i64 -2009686949558478891, %204
  %207 = and i64 -2009686949558478891, %204
  %208 = mul i64 2, %207
  %209 = add i64 %206, %208
  %210 = or i64 %18, 7198796690032434876
  %211 = xor i64 %18, -1
  %212 = and i64 %211, -4514596488103817745
  %213 = and i64 %18, 4514596488103817744
  %214 = or i64 %212, %213
  %215 = xor i64 -6719461787370220717, %214
  %216 = xor i64 %18, -1
  %217 = or i64 -7198796690032434877, %216
  %218 = xor i64 %217, -1
  %219 = and i64 %218, -1
  %220 = or i64 %215, %219
  %221 = xor i64 5785448729276757337, %220
  %222 = xor i64 %221, %205
  %223 = xor i64 %222, %210
  %224 = xor i64 %223, %209
  %225 = mul i64 %203, %224
  %226 = trunc i64 %225 to i1
  %227 = xor i1 %1, %226
  %228 = and i64 %4, 1660992918566563311
  %229 = xor i64 %4, -1
  %230 = xor i64 1660992918566563311, %229
  %231 = and i64 %230, 1660992918566563311
  %232 = and i64 %6, 870039680304291452
  %233 = xor i64 %6, -1
  %234 = or i64 -870039680304291453, %233
  %235 = xor i64 %234, -1
  %236 = and i64 %235, -1
  %237 = add i64 %12, -4748491066386614565
  %238 = add i64 3096927871449734843, %12
  %239 = sub i64 %238, 7845418937836349408
  %240 = xor i64 %232, %231
  %241 = xor i64 %240, -7578472490939172133
  %242 = xor i64 %241, %228
  %243 = xor i64 %242, %239
  %244 = xor i64 %243, %236
  %245 = xor i64 %244, %237
  %246 = or i64 %16, -2558196037161379805
  %247 = xor i64 %16, -1
  %248 = and i64 %247, -6882827670802406686
  %249 = and i64 %16, 6882827670802406685
  %250 = or i64 %248, %249
  %251 = xor i64 8936336766168267457, %250
  %252 = xor i64 %16, -1
  %253 = or i64 2558196037161379804, %252
  %254 = xor i64 %253, -1
  %255 = and i64 %254, -1
  %256 = or i64 %251, %255
  %257 = and i64 %6, -3828064564267904637
  %258 = or i64 3828064564267904636, %6
  %259 = sub i64 %258, 3828064564267904636
  %260 = add i64 %16, 9100706215514910883
  %261 = xor i64 9100706215514910883, %16
  %262 = and i64 9100706215514910883, %16
  %263 = mul i64 2, %262
  %264 = add i64 %261, %263
  %265 = xor i64 %260, %259
  %266 = xor i64 %265, %264
  %267 = xor i64 %266, %257
  %268 = xor i64 %267, %256
  %269 = xor i64 %268, -6186206792762314413
  %270 = xor i64 %269, %246
  %271 = mul i64 %245, %270
  %272 = trunc i64 %271 to i1
  %273 = xor i1 %151, %272
  %274 = or i1 %227, %273
  %275 = xor i1 %274, true
  %276 = and i1 %275, true
  %277 = or i1 %187, %276
  store i1 %277, i1* %.out1, align 1
  %278 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %279 = load i32, i32* %278, align 4
  %280 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %281 = load i32, i32* %280, align 4
  %282 = sub i32 0, %281
  %283 = add i32 %279, %282
  %284 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %285 = load i32, i32* %284, align 4
  %286 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %287 = load i32, i32* %286, align 4
  %288 = srem i32 %285, %287
  %289 = select i1 %2, i32 %283, i32 %288
  store i32 %289, i32* %dispatcher, align 4
  %290 = load i8*, i8** %15, align 8
  %291 = load i8, i8* %290, align 1
  %292 = xor i8 %291, -2
  %293 = and i8 %292, %291
  %294 = icmp eq i8 %293, 0
  %295 = mul i8 %291, %291
  %296 = add i8 %295, %291
  %297 = add i64 %4, -871805627490784730
  %298 = xor i64 -871805627490784730, %4
  %299 = and i64 -871805627490784730, %4
  %300 = mul i64 2, %299
  %301 = add i64 %298, %300
  %302 = or i64 %4, -4664568150018577794
  %303 = xor i64 %4, -1
  %304 = and i64 %303, -7787291029976992358
  %305 = and i64 %4, 7787291029976992357
  %306 = or i64 %304, %305
  %307 = xor i64 3218354004642242532, %306
  %308 = xor i64 %4, -1
  %309 = or i64 4664568150018577793, %308
  %310 = xor i64 %309, -1
  %311 = and i64 %310, -1
  %312 = or i64 %307, %311
  %313 = xor i64 %302, -8927725171293992189
  %314 = xor i64 %313, %301
  %315 = xor i64 %314, %297
  %316 = xor i64 %315, %312
  %317 = or i64 %18, -4123817849397268501
  %318 = xor i64 %18, -1
  %319 = and i64 %318, 8118139161071382103
  %320 = and i64 %18, -8118139161071382104
  %321 = or i64 %319, %320
  %322 = xor i64 -5301813123360341572, %321
  %323 = xor i64 %18, -1
  %324 = or i64 4123817849397268500, %323
  %325 = xor i64 %324, -1
  %326 = and i64 %325, -1
  %327 = or i64 %322, %326
  %328 = or i64 %14, -2484050719066261865
  %329 = xor i64 %14, -1
  %330 = and i64 -2484050719066261865, %329
  %331 = add i64 %330, %14
  %332 = or i64 %14, -59951387653436712
  %333 = xor i64 %14, -1
  %334 = and i64 -59951387653436712, %333
  %335 = add i64 %334, %14
  %336 = xor i64 %332, %331
  %337 = xor i64 %336, %327
  %338 = xor i64 %337, 6180279888600753921
  %339 = xor i64 %338, %335
  %340 = xor i64 %339, %317
  %341 = xor i64 %340, %328
  %342 = mul i64 %316, %341
  %343 = trunc i64 %342 to i8
  %344 = mul i8 %296, %343
  %345 = srem i8 %344, 2
  %346 = icmp eq i8 %345, 0
  %347 = or i1 %294, %346
  %348 = add i64 %12, 451842918925180568
  %349 = sub i64 0, %12
  %350 = sub i64 451842918925180568, %349
  %351 = sext i32 %dispatcher1 to i64
  %352 = or i64 %351, 4619835744306349382
  %353 = and i64 4619835744306349382, %351
  %354 = xor i64 4619835744306349382, %351
  %355 = or i64 %353, %354
  %356 = xor i64 %352, %355
  %357 = xor i64 %356, %348
  %358 = xor i64 %357, -3613399519145311069
  %359 = xor i64 %358, %350
  %360 = or i64 %8, -2082302624296809175
  %361 = xor i64 %8, -1
  %362 = and i64 -2082302624296809175, %361
  %363 = add i64 %362, %8
  %364 = sext i32 %dispatcher1 to i64
  %365 = or i64 %364, -3640524894345799829
  %366 = and i64 -3640524894345799829, %364
  %367 = xor i64 -3640524894345799829, %364
  %368 = or i64 %366, %367
  %369 = xor i64 %360, %363
  %370 = xor i64 %369, %368
  %371 = xor i64 %370, %365
  %372 = xor i64 %371, -3767548573988099227
  %373 = mul i64 %359, %372
  %374 = trunc i64 %373 to i32
  %375 = select i1 %347, i32 %374, i32 388314447
  %376 = xor i32 %375, 0
  store i32 %376, i32* %3, align 4
  %377 = call i8** @bf3325468485390379012(i32* %3)
  %378 = load i8*, i8** %377, align 8
  indirectbr i8* %378, [label %loopEnd, label %150]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub2:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %379 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %379, align 4
  %380 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %380, align 4
  %381 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %381, align 4
  %382 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %382, align 4
  %383 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %383, align 4
  %384 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %385 = load i32, i32* %384, align 4
  store i32 %385, i32* %dispatcher, align 4
  %386 = load i8*, i8** %17, align 8
  %387 = load i8, i8* %386, align 1
  %388 = or i64 %12, -6459726136547723168
  %389 = xor i64 %12, -1
  %390 = and i64 %389, 7845174318733441710
  %391 = and i64 %12, -7845174318733441711
  %392 = or i64 %390, %391
  %393 = xor i64 -3853435071707249970, %392
  %394 = xor i64 %12, -1
  %395 = or i64 6459726136547723167, %394
  %396 = xor i64 %395, -1
  %397 = and i64 %396, -1
  %398 = or i64 %393, %397
  %399 = add i64 %8, 2071266244181563230
  %400 = add i64 5407729823734671054, %8
  %401 = add i64 %400, -3336463579553107824
  %402 = xor i64 %388, -6429547811503367021
  %403 = xor i64 %402, %401
  %404 = xor i64 %403, %398
  %405 = xor i64 %404, %399
  %406 = add i64 %10, 1882745444188226736
  %407 = sub i64 0, %10
  %408 = sub i64 1882745444188226736, %407
  %409 = or i64 %16, 6747161054133287556
  %410 = and i64 6747161054133287556, %16
  %411 = xor i64 6747161054133287556, %16
  %412 = or i64 %410, %411
  %413 = add i64 %4, 1665961757042712541
  %414 = xor i64 1665961757042712541, %4
  %415 = and i64 1665961757042712541, %4
  %416 = mul i64 2, %415
  %417 = add i64 %414, %416
  %418 = xor i64 %406, %409
  %419 = xor i64 %418, %417
  %420 = xor i64 %419, %408
  %421 = xor i64 %420, %413
  %422 = xor i64 %421, 8816439500900385590
  %423 = xor i64 %422, %412
  %424 = mul i64 %405, %423
  %425 = trunc i64 %424 to i8
  %426 = mul i8 %387, %425
  %427 = mul i8 %387, 2
  %428 = add i8 2, %427
  %429 = mul i8 %426, %428
  %430 = srem i8 %429, 4
  %431 = icmp eq i8 %430, 0
  %432 = mul i8 %387, %387
  %433 = sub i8 0, %387
  %434 = sub i8 %432, %433
  %435 = srem i8 %434, 2
  %436 = icmp eq i8 %435, 0
  %437 = or i1 %431, %436
  %438 = and i64 %10, 2385726771433941275
  %439 = xor i64 %10, -1
  %440 = xor i64 2385726771433941275, %439
  %441 = and i64 %440, 2385726771433941275
  %442 = or i64 %6, 8646099952647366973
  %443 = xor i64 %6, -1
  %444 = and i64 8646099952647366973, %443
  %445 = add i64 %444, %6
  %446 = xor i64 2820002154197783145, %442
  %447 = xor i64 %446, %438
  %448 = xor i64 %447, %441
  %449 = xor i64 %448, %445
  %450 = or i64 %8, 987013475585613414
  %451 = xor i64 %8, -1
  %452 = and i64 987013475585613414, %451
  %453 = add i64 %452, %8
  %454 = add i64 %14, -1035803691716255863
  %455 = sub i64 0, %14
  %456 = add i64 1035803691716255863, %455
  %457 = sub i64 0, %456
  %458 = or i64 %18, 588731806549005222
  %459 = and i64 588731806549005222, %18
  %460 = xor i64 588731806549005222, %18
  %461 = or i64 %459, %460
  %462 = xor i64 %461, %454
  %463 = xor i64 %462, %458
  %464 = xor i64 %463, -1821046431414624453
  %465 = xor i64 %464, %450
  %466 = xor i64 %465, %453
  %467 = xor i64 %466, %457
  %468 = mul i64 %449, %467
  %469 = trunc i64 %468 to i32
  %470 = select i1 %437, i32 %469, i32 388314440
  %471 = xor i32 %470, 123
  store i32 %471, i32* %3, align 4
  %472 = call i8** @bf3325468485390379012(i32* %3)
  %473 = load i8*, i8** %472, align 8
  indirectbr i8* %473, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %474 = load i8*, i8** %9, align 8
  %475 = load i8, i8* %474, align 1
  %476 = and i8 %475, 1
  %477 = and i64 %12, -1415955064939948402
  %478 = or i64 1415955064939948401, %12
  %479 = sub i64 %478, 1415955064939948401
  %480 = add i64 %10, 9124623324120347387
  %481 = sub i64 0, %10
  %482 = sub i64 9124623324120347387, %481
  %483 = xor i64 %477, %482
  %484 = xor i64 %483, %479
  %485 = xor i64 %484, 3040682951527281925
  %486 = xor i64 %485, %480
  %487 = or i64 %14, -582798344570126397
  %488 = xor i64 %14, -1
  %489 = and i64 %488, 6578410117000369277
  %490 = and i64 %14, -6578410117000369278
  %491 = or i64 %489, %490
  %492 = xor i64 -6007152247994930242, %491
  %493 = xor i64 %14, -1
  %494 = or i64 582798344570126396, %493
  %495 = xor i64 %494, -1
  %496 = and i64 %495, -1
  %497 = or i64 %492, %496
  %498 = and i64 %12, -8505484575780588840
  %499 = xor i64 %12, -1
  %500 = or i64 8505484575780588839, %499
  %501 = xor i64 %500, -1
  %502 = and i64 %501, -1
  %503 = xor i64 0, %502
  %504 = xor i64 %503, %497
  %505 = xor i64 %504, %487
  %506 = xor i64 %505, %498
  %507 = mul i64 %486, %506
  %508 = trunc i64 %507 to i8
  %509 = icmp eq i8 %476, %508
  %510 = mul i8 %475, %475
  %511 = add i8 %510, %475
  %512 = mul i8 %511, 3
  %513 = srem i8 %512, 2
  %514 = icmp eq i8 %513, 0
  %515 = or i1 %509, %514
  %516 = select i1 %515, i32 388314447, i32 388314447
  %517 = xor i32 %516, 0
  store i32 %517, i32* %3, align 4
  %518 = call i8** @bf3325468485390379012(i32* %3)
  %519 = load i8*, i8** %518, align 8
  indirectbr i8* %519, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %150, %EntryBasicBlockSplit
  %520 = load i8*, i8** %19, align 8
  %521 = load i8, i8* %520, align 1
  %522 = mul i8 %521, 2
  %523 = mul i8 %521, 2
  %524 = sub i8 0, %523
  %525 = sub i8 2, %524
  %526 = mul i8 %522, %525
  %527 = or i64 %8, -5430706414043955359
  %528 = and i64 -5430706414043955359, %8
  %529 = xor i64 -5430706414043955359, %8
  %530 = or i64 %528, %529
  %531 = and i64 %16, 1333306055830851788
  %532 = or i64 -1333306055830851789, %16
  %533 = sub i64 %532, -1333306055830851789
  %534 = xor i64 %533, %530
  %535 = xor i64 %534, %531
  %536 = xor i64 %535, %527
  %537 = xor i64 %536, 3832224000966905987
  %538 = and i64 %12, -3285930699492812444
  %539 = xor i64 %12, -1
  %540 = xor i64 -3285930699492812444, %539
  %541 = and i64 %540, -3285930699492812444
  %542 = and i64 %10, -3260615194204728618
  %543 = or i64 3260615194204728617, %10
  %544 = sub i64 %543, 3260615194204728617
  %545 = xor i64 %541, 6823298131952400556
  %546 = xor i64 %545, %538
  %547 = xor i64 %546, %542
  %548 = xor i64 %547, %544
  %549 = mul i64 %537, %548
  %550 = trunc i64 %549 to i8
  %551 = srem i8 %526, %550
  %552 = icmp eq i8 %551, 0
  %553 = mul i8 %521, %521
  %554 = mul i8 %553, %521
  %555 = add i8 %554, %521
  %556 = srem i8 %555, 2
  %557 = icmp eq i8 %556, 0
  %558 = xor i1 %552, true
  %559 = xor i1 %557, true
  %560 = or i1 %558, %559
  %561 = xor i1 %560, true
  %562 = and i1 %561, true
  %563 = select i1 %562, i32 388314495, i32 388314419
  %564 = xor i32 %563, 76
  store i32 %564, i32* %3, align 4
  %565 = call i8** @bf3325468485390379012(i32* %3)
  %566 = load i8*, i8** %565, align 8
  indirectbr i8* %566, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.25(i32 %0, i1 %1, i32* %.out, i1* %.out1, i1* %.out2, i1* %.out3, i1* %.out4, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9, i1* %.out10, i1* %.out11, i1* %.out12, i1* %.out13, i1* %.out14, i1* %.out15, i1* %.out16) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h9549842938191327224(i64 388314405)
  %4 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable4720161520762699685, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted.25, %.exitStub), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314407)
  %6 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable4720161520762699685, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.25, %codeRepl), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314404)
  %8 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable4720161520762699685, i32 0, i64 %7
  store i8* blockaddress(@inner_loop.extracted.25, %"2"), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314406)
  %10 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable4720161520762699685, i32 0, i64 %9
  store i8* blockaddress(@inner_loop.extracted.25, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314401)
  %12 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable4720161520762699685, i32 0, i64 %11
  store i8* blockaddress(@inner_loop.extracted.25, %BogusBasciBlock), i8** %12, align 8
  %13 = sext i32 %0 to i64
  %14 = and i64 %13, 5770798113131390853
  %15 = or i64 -5770798113131390854, %13
  %16 = sub i64 %15, -5770798113131390854
  %17 = sext i32 %0 to i64
  %18 = add i64 %17, 801798067081566209
  %19 = add i64 745616573767945558, %17
  %20 = sub i64 %19, -56181493313620651
  %21 = sext i32 %0 to i64
  %22 = add i64 %21, -7063877031887364461
  %23 = add i64 4532162488496627726, %21
  %24 = sub i64 %23, -6850704553325559429
  %25 = xor i64 741659420875849995, %16
  %26 = xor i64 %25, %18
  %27 = xor i64 %26, %14
  %28 = xor i64 %27, %24
  %29 = xor i64 %28, %22
  %30 = xor i64 %29, %20
  %31 = sext i32 %0 to i64
  %32 = or i64 %31, -3682296068399072614
  %33 = xor i64 %31, -1
  %34 = and i64 %33, -2503713970981808272
  %35 = and i64 %31, 2503713970981808271
  %36 = or i64 %34, %35
  %37 = xor i64 1271385450827951594, %36
  %38 = xor i64 %31, -1
  %39 = or i64 3682296068399072613, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = or i64 %37, %41
  %43 = sext i32 %0 to i64
  %44 = add i64 %43, 344339648632691561
  %45 = add i64 4332978061994706660, %43
  %46 = add i64 %45, -3988638413362015099
  %47 = xor i64 %42, %32
  %48 = xor i64 %47, %46
  %49 = xor i64 %48, 6268810890497966755
  %50 = xor i64 %49, %44
  %51 = mul i64 %30, %50
  %52 = trunc i64 %51 to i32
  %.reg2mem20 = alloca i1, i32 %52, align 1
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem14 = alloca i1, align 1
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %53 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.25, %BogusBasciBlock), i8** %53, align 8
  %54 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %54, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.25, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %55 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %55, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop.extracted.25, %"2"), i8** %.reload5, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %56, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop.extracted.25, %codeRepl), i8** %.reload8, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %57, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@inner_loop.extracted.25, %.exitStub), i8** %.reload11, align 8
  %58 = alloca i64, align 8
  %59 = sext i32 %0 to i64
  %60 = or i64 %59, 7159648202199595529
  %61 = xor i64 %59, -1
  %62 = and i64 %61, 7140719844399578982
  %63 = and i64 %59, -7140719844399578983
  %64 = or i64 %62, %63
  %65 = xor i64 19352258388559215, %64
  %66 = xor i64 %59, -1
  %67 = or i64 -7159648202199595530, %66
  %68 = xor i64 %67, -1
  %69 = and i64 %68, -1
  %70 = or i64 %65, %69
  %71 = sext i32 %0 to i64
  %72 = and i64 %71, 1966351933320252705
  %73 = xor i64 %71, -1
  %74 = or i64 -1966351933320252706, %73
  %75 = xor i64 %74, -1
  %76 = and i64 %75, -1
  %77 = xor i64 %72, %60
  %78 = xor i64 %77, 1398280421209974469
  %79 = xor i64 %78, %76
  %80 = xor i64 %79, %70
  %81 = sext i32 %0 to i64
  %82 = and i64 %81, -1881575834319143660
  %83 = xor i64 %81, -1
  %84 = xor i64 -1881575834319143660, %83
  %85 = and i64 %84, -1881575834319143660
  %86 = sext i32 %0 to i64
  %87 = add i64 %86, 4112767348832930483
  %88 = add i64 -6913678653477504643, %86
  %89 = add i64 %88, -7420298071399116490
  %90 = sext i32 %0 to i64
  %91 = and i64 %90, 8313829867338156577
  %92 = or i64 -8313829867338156578, %90
  %93 = sub i64 %92, -8313829867338156578
  %94 = xor i64 %87, -1164592656672631042
  %95 = xor i64 %94, %89
  %96 = xor i64 %95, %91
  %97 = xor i64 %96, %82
  %98 = xor i64 %97, %85
  %99 = xor i64 %98, %93
  %100 = mul i64 %80, %99
  %101 = call i64 @m1252811912226950246(i64 %100)
  %102 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2277199937449041614, i32 0, i64 %101
  store i8** %102, i8*** %.reg2mem12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %103 = load i8*, i8** %.reload, align 8
  indirectbr i8* %103, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %104 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.25, %codeRepl), i8** %104, align 8
  %105 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.25, %"2"), i8** %105, align 8
  %106 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted.25, %.exitStub), i8** %106, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %107 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %107, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  store i8* bitcast (void (i1, i1, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1*)* @inner_loop.extracted.25.extracted to i8*), i8** %.reload13, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %108 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %108, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %109 = srem i32 %0, 2
  store i32 %109, i32* %.out, align 4
  %110 = add i64 %5, -1070107574163850476
  %111 = sub i64 0, %5
  %112 = add i64 1070107574163850476, %111
  %113 = sub i64 0, %112
  %114 = or i64 %11, -2716257416091660687
  %115 = xor i64 %11, -1
  %116 = and i64 -2716257416091660687, %115
  %117 = add i64 %116, %11
  %118 = xor i64 -4039375980011442519, %113
  %119 = xor i64 %118, %114
  %120 = xor i64 %119, %110
  %121 = xor i64 %120, %117
  %122 = sext i32 %0 to i64
  %123 = and i64 %122, 8141839828395899150
  %124 = xor i64 %122, -1
  %125 = xor i64 8141839828395899150, %124
  %126 = and i64 %125, 8141839828395899150
  %127 = and i64 %7, -7477563962668997111
  %128 = xor i64 %7, -1
  %129 = or i64 7477563962668997110, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = and i64 %3, 116269103355940102
  %133 = xor i64 %3, -1
  %134 = xor i64 116269103355940102, %133
  %135 = and i64 %134, 116269103355940102
  %136 = xor i64 %127, %131
  %137 = xor i64 %136, %126
  %138 = xor i64 %137, %123
  %139 = xor i64 %138, %135
  %140 = xor i64 %139, 0
  %141 = xor i64 %140, %132
  %142 = mul i64 %121, %141
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %109, %143
  store i1 %144, i1* %.reg2mem14, align 1
  %.reload16 = load i1, i1* %.reg2mem14, align 1
  store i1 %.reload16, i1* %.out1, align 1
  %145 = or i1 %1, true
  %146 = and i1 %1, true
  %147 = sub i1 %145, %146
  store i1 %147, i1* %.out2, align 1
  %148 = and i1 %147, true
  store i1 %148, i1* %.reg2mem17, align 1
  %.reload19 = load i1, i1* %.reg2mem17, align 1
  store i1 %.reload19, i1* %.out3, align 1
  %149 = and i1 %1, false
  store i1 %149, i1* %.reg2mem20, align 1
  %.reload22 = load i1, i1* %.reg2mem20, align 1
  store i1 %.reload22, i1* %.out4, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %150 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %150, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 5221456193252566390, i64* %58, align 8
  %151 = alloca i8**, align 8
  %152 = and i64 %7, 3444258237779380727
  %153 = xor i64 %7, -1
  %154 = xor i64 3444258237779380727, %153
  %155 = and i64 %154, 3444258237779380727
  %156 = and i64 %7, -441856767343456106
  %157 = or i64 441856767343456105, %7
  %158 = sub i64 %157, 441856767343456105
  %159 = xor i64 6667640381833019451, %152
  %160 = xor i64 %159, %158
  %161 = xor i64 %160, %156
  %162 = xor i64 %161, %155
  %163 = add i64 %7, 5339926713268534192
  %164 = xor i64 5339926713268534192, %7
  %165 = and i64 5339926713268534192, %7
  %166 = mul i64 2, %165
  %167 = add i64 %164, %166
  %168 = and i64 %101, -8741591102109744865
  %169 = xor i64 %101, -1
  %170 = or i64 8741591102109744864, %169
  %171 = xor i64 %170, -1
  %172 = and i64 %171, -1
  %173 = or i64 %101, 1233661595102237046
  %174 = and i64 1233661595102237046, %101
  %175 = xor i64 1233661595102237046, %101
  %176 = or i64 %174, %175
  %177 = xor i64 %172, %168
  %178 = xor i64 %177, %167
  %179 = xor i64 %178, 0
  %180 = xor i64 %179, %173
  %181 = xor i64 %180, %176
  %182 = xor i64 %181, %163
  %183 = mul i64 %162, %182
  %184 = trunc i64 %183 to i32
  %185 = add i64 %5, -2817854271624895371
  %186 = and i64 -2817854271624895371, %5
  %187 = or i64 -2817854271624895371, %5
  %188 = add i64 %186, %187
  %189 = or i64 %11, 4870860264942593512
  %190 = xor i64 %11, -1
  %191 = and i64 %190, -6748885473604055090
  %192 = and i64 %11, 6748885473604055089
  %193 = or i64 %191, %192
  %194 = xor i64 -2175271667134191066, %193
  %195 = xor i64 %11, -1
  %196 = or i64 -4870860264942593513, %195
  %197 = xor i64 %196, -1
  %198 = and i64 %197, -1
  %199 = or i64 %194, %198
  %200 = xor i64 5678524950467060733, %199
  %201 = xor i64 %200, %189
  %202 = xor i64 %201, %188
  %203 = xor i64 %202, %185
  %204 = add i64 %5, -8425591567915650499
  %205 = add i64 -3538439403877261365, %5
  %206 = sub i64 %205, 4887152164038389134
  %207 = add i64 %7, 6189124385825214350
  %208 = xor i64 6189124385825214350, %7
  %209 = and i64 6189124385825214350, %7
  %210 = mul i64 2, %209
  %211 = add i64 %208, %210
  %212 = xor i64 %204, %207
  %213 = xor i64 %212, %211
  %214 = xor i64 %213, 0
  %215 = xor i64 %214, %206
  %216 = mul i64 %203, %215
  %217 = trunc i64 %216 to i32
  %218 = add i64 %9, 4508048530165705778
  %219 = add i64 -5459452951699192858, %9
  %220 = add i64 %219, -8479242591844652980
  %221 = add i64 %3, 1809032049769483317
  %222 = sub i64 0, %3
  %223 = sub i64 1809032049769483317, %222
  %224 = xor i64 %218, %220
  %225 = xor i64 %224, %223
  %226 = xor i64 %225, %221
  %227 = xor i64 %226, -2327641824607466471
  %228 = or i64 %9, -5837071187706896242
  %229 = xor i64 %9, -1
  %230 = and i64 %229, 5051436491486762803
  %231 = and i64 %9, -5051436491486762804
  %232 = or i64 %230, %231
  %233 = xor i64 -1664994753435682883, %232
  %234 = xor i64 %9, -1
  %235 = or i64 5837071187706896241, %234
  %236 = xor i64 %235, -1
  %237 = and i64 %236, -1
  %238 = or i64 %233, %237
  %239 = sext i32 %0 to i64
  %240 = add i64 %239, -2143035911254931776
  %241 = sub i64 0, %239
  %242 = add i64 2143035911254931776, %241
  %243 = sub i64 0, %242
  %244 = xor i64 %238, 0
  %245 = xor i64 %244, %228
  %246 = xor i64 %245, %240
  %247 = xor i64 %246, %243
  %248 = mul i64 %227, %247
  %249 = or i64 %11, 4791649099174557561
  %250 = xor i64 %11, -1
  %251 = and i64 4791649099174557561, %250
  %252 = add i64 %251, %11
  %253 = and i64 %101, -5662258573984122942
  %254 = or i64 5662258573984122941, %101
  %255 = sub i64 %254, 5662258573984122941
  %256 = xor i64 %255, -6653213975630487715
  %257 = xor i64 %256, %253
  %258 = xor i64 %257, %249
  %259 = xor i64 %258, %252
  %260 = and i64 %7, -2209583004283053806
  %261 = xor i64 %7, -1
  %262 = xor i64 -2209583004283053806, %261
  %263 = and i64 %262, -2209583004283053806
  %264 = or i64 %5, -7932313009281902816
  %265 = xor i64 %5, -1
  %266 = and i64 %265, -5850265404272085764
  %267 = and i64 %5, 5850265404272085763
  %268 = or i64 %266, %267
  %269 = xor i64 4550163687143384028, %268
  %270 = xor i64 %5, -1
  %271 = or i64 7932313009281902815, %270
  %272 = xor i64 %271, -1
  %273 = and i64 %272, -1
  %274 = or i64 %269, %273
  %275 = sext i32 %0 to i64
  %276 = or i64 %275, -3819160778646436250
  %277 = xor i64 %275, -1
  %278 = and i64 %277, 6514494389777402497
  %279 = and i64 %275, -6514494389777402498
  %280 = or i64 %278, %279
  %281 = xor i64 -8027737115081454361, %280
  %282 = xor i64 %275, -1
  %283 = or i64 3819160778646436249, %282
  %284 = xor i64 %283, -1
  %285 = and i64 %284, -1
  %286 = or i64 %281, %285
  %287 = xor i64 %274, %263
  %288 = xor i64 %287, 0
  %289 = xor i64 %288, %260
  %290 = xor i64 %289, %286
  %291 = xor i64 %290, %276
  %292 = xor i64 %291, %264
  %293 = mul i64 %259, %292
  %294 = sext i32 %0 to i64
  %295 = or i64 %294, 4389704381330295218
  %296 = xor i64 %294, -1
  %297 = and i64 %296, -4704746249398810078
  %298 = and i64 %294, 4704746249398810077
  %299 = or i64 %297, %298
  %300 = xor i64 -9052729111988894832, %299
  %301 = xor i64 %294, -1
  %302 = or i64 -4389704381330295219, %301
  %303 = xor i64 %302, -1
  %304 = and i64 %303, -1
  %305 = or i64 %300, %304
  %306 = sext i32 %0 to i64
  %307 = add i64 %306, -7895293027142548280
  %308 = sub i64 0, %306
  %309 = sub i64 -7895293027142548280, %308
  %310 = xor i64 %309, %295
  %311 = xor i64 %310, %307
  %312 = xor i64 %311, 9175411006222745507
  %313 = xor i64 %312, %305
  %314 = or i64 %9, -6885978402001776895
  %315 = xor i64 %9, -1
  %316 = and i64 -6885978402001776895, %315
  %317 = add i64 %316, %9
  %318 = add i64 %5, 5775732294797132352
  %319 = sub i64 0, %5
  %320 = add i64 -5775732294797132352, %319
  %321 = sub i64 0, %320
  %322 = and i64 %101, 2112780620410486866
  %323 = xor i64 %101, -1
  %324 = xor i64 2112780620410486866, %323
  %325 = and i64 %324, 2112780620410486866
  %326 = xor i64 %314, %317
  %327 = xor i64 %326, %325
  %328 = xor i64 %327, %321
  %329 = xor i64 %328, %318
  %330 = xor i64 %329, %322
  %331 = xor i64 %330, 0
  %332 = mul i64 %313, %331
  call void @"5784248439022692321"(i32 12, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 %184, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* %58, i8*** %151, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 %217, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 %248, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 %293, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 %332, i32* null, i64* null, i1* null, i1* null, i1* null)
  %333 = load i8**, i8*** %151, align 8
  %334 = load i8*, i8** %333, align 8
  %335 = bitcast i8* %334 to void (i1, i1, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.reload15 = load i1, i1* %.reg2mem14, align 1
  %.reload18 = load i1, i1* %.reg2mem17, align 1
  %.reload21 = load i1, i1* %.reg2mem20, align 1
  call void %335(i1 %.reload18, i1 %.reload21, i1* %.out5, i1 %.reload15, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9, i1* %.out10, i1 %1, i1* %.out11, i1* %.out12, i1* %.out13, i1* %.out14, i1* %.out15, i1* %.out16)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %336 = load i8*, i8** %.reload10, align 8
  indirectbr i8* %336, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.26() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314404)
  %2 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable12054779285453193996, i32 0, i64 %1
  store i8* blockaddress(@inner_loop.extracted.26, %codeRepl), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314407)
  %4 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable12054779285453193996, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted.26, %"2"), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314405)
  %6 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable12054779285453193996, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.26, %.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314401)
  %8 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable12054779285453193996, i32 0, i64 %7
  store i8* blockaddress(@inner_loop.extracted.26, %EntryBasicBlockSplit), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314400)
  %10 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable12054779285453193996, i32 0, i64 %9
  store i8* blockaddress(@inner_loop.extracted.26, %BogusBasciBlock), i8** %10, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.26, %BogusBasciBlock), i8** %11, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %12, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.26, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %13, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop.extracted.26, %"2"), i8** %.reload5, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %14, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop.extracted.26, %codeRepl), i8** %.reload8, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %15, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@inner_loop.extracted.26, %.exitStub), i8** %.reload11, align 8
  %16 = alloca i64, align 8
  %17 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %18 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6119868860763007404, i32 0, i64 %17
  store i8** %18, i8*** %.reg2mem12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %19 = load i8*, i8** %.reload, align 8
  indirectbr i8* %19, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %20 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.26, %"2"), i8** %20, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.26, %BogusBasciBlock), i8** %21, align 8
  %22 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted.26, %codeRepl), i8** %22, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %23 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %23, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  store i8* bitcast (void ()* @inner_loop.extracted.26.extracted to i8*), i8** %.reload13, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %24 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %24, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %25 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %25, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %26 = or i64 %3, -9012705278711759683
  %27 = xor i64 %3, -1
  %28 = and i64 %27, -2171309458395491357
  %29 = and i64 %3, 2171309458395491356
  %30 = or i64 %28, %29
  %31 = xor i64 7147641151346765662, %30
  %32 = xor i64 %3, -1
  %33 = or i64 9012705278711759682, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = or i64 %31, %35
  %37 = and i64 %1, -3013371164221947925
  %38 = or i64 3013371164221947924, %1
  %39 = sub i64 %38, 3013371164221947924
  %40 = xor i64 %26, %39
  %41 = xor i64 %40, %36
  %42 = xor i64 %41, 390616749464590869
  %43 = xor i64 %42, %37
  %44 = and i64 %7, 7068250771977633727
  %45 = xor i64 %7, -1
  %46 = or i64 -7068250771977633728, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = add i64 %5, 9195172104234686265
  %50 = sub i64 0, %5
  %51 = sub i64 9195172104234686265, %50
  %52 = xor i64 1400974954883021598, %49
  %53 = xor i64 %52, %48
  %54 = xor i64 %53, %44
  %55 = xor i64 %54, %51
  %56 = mul i64 %43, %55
  store i64 %56, i64* %16, align 8
  %57 = call i8** @lk10004858638100200575(i64* %16)
  %58 = load i8*, i8** %57, align 8
  %59 = bitcast i8* %58 to void ()*
  call void %59()
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %60 = load i8*, i8** %.reload10, align 8
  indirectbr i8* %60, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.extracted(i32 %0, i32 %1, i32* %.out1, i32* %.out2, i1* %.out3, i32 %2) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314443)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub4.exitStub), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314375)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub.exitStub), i8** %7, align 8
  %8 = sext i32 %0 to i64
  %9 = and i64 %8, -1367553623141413984
  %10 = or i64 1367553623141413983, %8
  %11 = sub i64 %10, 1367553623141413983
  %12 = sext i32 %1 to i64
  %13 = or i64 %12, -7719930123346998925
  %14 = and i64 -7719930123346998925, %12
  %15 = xor i64 -7719930123346998925, %12
  %16 = or i64 %14, %15
  %17 = xor i64 %11, %16
  %18 = xor i64 %17, %9
  %19 = xor i64 %18, -852724954350204585
  %20 = xor i64 %19, %13
  %21 = sext i32 %2 to i64
  %22 = add i64 %21, -6146339290964805047
  %23 = sub i64 0, %21
  %24 = add i64 6146339290964805047, %23
  %25 = sub i64 0, %24
  %26 = sext i32 %2 to i64
  %27 = and i64 %26, 2230131547148064540
  %28 = xor i64 %26, -1
  %29 = or i64 -2230131547148064541, %28
  %30 = xor i64 %29, -1
  %31 = and i64 %30, -1
  %32 = xor i64 %27, -5094840053788954572
  %33 = xor i64 %32, %25
  %34 = xor i64 %33, %31
  %35 = xor i64 %34, %22
  %36 = mul i64 %20, %35
  %37 = call i64 @h9549842938191327224(i64 %36)
  %38 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %37
  store i8* blockaddress(@inner_loop.extracted.extracted, %"2"), i8** %38, align 8
  %39 = call i64 @h9549842938191327224(i64 388314381)
  %40 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %39
  store i8* blockaddress(@inner_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %40, align 8
  %41 = call i64 @h9549842938191327224(i64 388314476)
  %42 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %41
  store i8* blockaddress(@inner_loop.extracted.extracted, %BogusBasciBlock), i8** %42, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %43 = sext i32 %2 to i64
  %44 = and i64 %43, -8246453003012128017
  %45 = or i64 8246453003012128016, %43
  %46 = sub i64 %45, 8246453003012128016
  %47 = sext i32 %0 to i64
  %48 = and i64 %47, 8906334294443662315
  %49 = or i64 -8906334294443662316, %47
  %50 = sub i64 %49, -8906334294443662316
  %51 = xor i64 5800784243318293053, %46
  %52 = xor i64 %51, %48
  %53 = xor i64 %52, %50
  %54 = xor i64 %53, %44
  %55 = sext i32 %2 to i64
  %56 = or i64 %55, -899004470733755052
  %57 = and i64 -899004470733755052, %55
  %58 = xor i64 -899004470733755052, %55
  %59 = or i64 %57, %58
  %60 = sext i32 %0 to i64
  %61 = and i64 %60, -8119206982628222425
  %62 = or i64 8119206982628222424, %60
  %63 = sub i64 %62, 8119206982628222424
  %64 = sext i32 %0 to i64
  %65 = and i64 %64, -8689073769848634685
  %66 = xor i64 %64, -1
  %67 = xor i64 -8689073769848634685, %66
  %68 = and i64 %67, -8689073769848634685
  %69 = xor i64 %63, %59
  %70 = xor i64 %69, %68
  %71 = xor i64 %70, %61
  %72 = xor i64 %71, -7479069784478828183
  %73 = xor i64 %72, %56
  %74 = xor i64 %73, %65
  %75 = mul i64 %54, %74
  %76 = trunc i64 %75 to i32
  %JumpTable = alloca i8*, i32 %76, align 8
  %77 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.extracted, %BogusBasciBlock), i8** %77, align 8
  %78 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %78, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %79 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %79, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop.extracted.extracted, %"2"), i8** %.reload5, align 8
  %80 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %80, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %81 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %81, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub4.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %82 = load i8*, i8** %.reload, align 8
  indirectbr i8* %82, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %83 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %83, align 8
  %84 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.extracted, %BogusBasciBlock), i8** %84, align 8
  %85 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub.exitStub), i8** %85, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %86 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %86, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %87 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %87, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %88 = mul i32 %0, 2
  %89 = add i32 2, %88
  %90 = mul i32 %1, %89
  %91 = srem i32 %90, 4
  store i32 %91, i32* %.out1, align 4
  %92 = icmp eq i32 %91, 0
  %93 = mul i32 %0, %0
  %94 = sub i32 0, %93
  %95 = sub i32 0, %0
  %96 = add i32 %94, %95
  %97 = sub i32 0, %96
  store i32 %97, i32* %.out2, align 4
  %98 = srem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = xor i1 %92, true
  %101 = or i1 %100, %99
  %102 = xor i1 %92, true
  %103 = sub i1 %101, %102
  store i1 %103, i1* %.out3, align 1
  %104 = srem i32 %2, 2
  %105 = icmp eq i32 %104, 0
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %106 = select i1 %105, i8** %.reload7, i8** %.reload10
  %107 = load i8*, i8** %106, align 8
  indirectbr i8* %107, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub4.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub4.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.22.extracted(i32 %0, i32 %.reload4, i1* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h9549842938191327224(i64 388314455)
  %3 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %2
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %loopEnd), i8** %3, align 8
  %4 = call i64 @h9549842938191327224(i64 388314529)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %BogusBasicBlock), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314388)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %.exitStub1.exitStub), i8** %7, align 8
  %8 = call i64 @h9549842938191327224(i64 388314480)
  %9 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %8
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %loopStart), i8** %9, align 8
  %10 = sext i32 %.reload4 to i64
  %11 = and i64 %10, -5810073499899249184
  %12 = xor i64 %10, -1
  %13 = xor i64 -5810073499899249184, %12
  %14 = and i64 %13, -5810073499899249184
  %15 = sext i32 %0 to i64
  %16 = and i64 %15, 6042981182221351762
  %17 = xor i64 %15, -1
  %18 = or i64 -6042981182221351763, %17
  %19 = xor i64 %18, -1
  %20 = and i64 %19, -1
  %21 = sext i32 %.reload4 to i64
  %22 = or i64 %21, -1544131363668705971
  %23 = and i64 -1544131363668705971, %21
  %24 = xor i64 -1544131363668705971, %21
  %25 = or i64 %23, %24
  %26 = xor i64 %22, %11
  %27 = xor i64 %26, %20
  %28 = xor i64 %27, -4797445685416173125
  %29 = xor i64 %28, %14
  %30 = xor i64 %29, %25
  %31 = xor i64 %30, %16
  %32 = sext i32 %0 to i64
  %33 = add i64 %32, 3126403786108766164
  %34 = add i64 5405109989982221979, %32
  %35 = sub i64 %34, 2278706203873455815
  %36 = sext i32 %.reload4 to i64
  %37 = and i64 %36, -4035670010262216718
  %38 = xor i64 %36, -1
  %39 = xor i64 -4035670010262216718, %38
  %40 = and i64 %39, -4035670010262216718
  %41 = sext i32 %.reload4 to i64
  %42 = add i64 %41, -3367003937677555003
  %43 = xor i64 -3367003937677555003, %41
  %44 = and i64 -3367003937677555003, %41
  %45 = mul i64 2, %44
  %46 = add i64 %43, %45
  %47 = xor i64 %37, %42
  %48 = xor i64 %47, %40
  %49 = xor i64 %48, %33
  %50 = xor i64 %49, %35
  %51 = xor i64 %50, -6018549426353392422
  %52 = xor i64 %51, %46
  %53 = mul i64 %31, %52
  %54 = call i64 @h9549842938191327224(i64 %53)
  %55 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %54
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %260), i8** %55, align 8
  %56 = call i64 @h9549842938191327224(i64 388314493)
  %57 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %56
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %defaultSwitchBasicBlock), i8** %57, align 8
  %58 = call i64 @h9549842938191327224(i64 388314375)
  %59 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %58
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %EntryBasicBlockSplit), i8** %59, align 8
  %60 = sext i32 %0 to i64
  %61 = add i64 %60, 5576360380637516852
  %62 = and i64 5576360380637516852, %60
  %63 = or i64 5576360380637516852, %60
  %64 = add i64 %62, %63
  %65 = sext i32 %0 to i64
  %66 = or i64 %65, 1347862456974999816
  %67 = xor i64 %65, -1
  %68 = and i64 1347862456974999816, %67
  %69 = add i64 %68, %65
  %70 = xor i64 %61, %69
  %71 = xor i64 %70, -5755726086561290119
  %72 = xor i64 %71, %64
  %73 = xor i64 %72, %66
  %74 = sext i32 %0 to i64
  %75 = add i64 %74, -281902542062491462
  %76 = xor i64 -281902542062491462, %74
  %77 = and i64 -281902542062491462, %74
  %78 = mul i64 2, %77
  %79 = add i64 %76, %78
  %80 = sext i32 %.reload4 to i64
  %81 = add i64 %80, 1173754646525679300
  %82 = add i64 -8404451294826573910, %80
  %83 = sub i64 %82, 8868538132357298406
  %84 = xor i64 %83, -2885625417633114981
  %85 = xor i64 %84, %81
  %86 = xor i64 %85, %75
  %87 = xor i64 %86, %79
  %88 = mul i64 %73, %87
  %89 = call i64 @h9549842938191327224(i64 %88)
  %90 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %89
  store i8* blockaddress(@inner_loop.extracted.22.extracted, %.exitStub.exitStub), i8** %90, align 8
  %91 = sext i32 %0 to i64
  %92 = and i64 %91, -2507539186012989225
  %93 = xor i64 %91, -1
  %94 = or i64 2507539186012989224, %93
  %95 = xor i64 %94, -1
  %96 = and i64 %95, -1
  %97 = sext i32 %.reload4 to i64
  %98 = or i64 %97, -1472875339772757053
  %99 = xor i64 %97, -1
  %100 = and i64 -1472875339772757053, %99
  %101 = add i64 %100, %97
  %102 = sext i32 %.reload4 to i64
  %103 = and i64 %102, -4758061523963336393
  %104 = xor i64 %102, -1
  %105 = xor i64 -4758061523963336393, %104
  %106 = and i64 %105, -4758061523963336393
  %107 = xor i64 %103, %98
  %108 = xor i64 %107, -6186631962486548801
  %109 = xor i64 %108, %96
  %110 = xor i64 %109, %92
  %111 = xor i64 %110, %101
  %112 = xor i64 %111, %106
  %113 = sext i32 %.reload4 to i64
  %114 = or i64 %113, -2171362731561578869
  %115 = and i64 -2171362731561578869, %113
  %116 = xor i64 -2171362731561578869, %113
  %117 = or i64 %115, %116
  %118 = sext i32 %.reload4 to i64
  %119 = or i64 %118, 3392110804947880582
  %120 = xor i64 %118, -1
  %121 = and i64 %120, 1665607194421504384
  %122 = and i64 %118, -1665607194421504385
  %123 = or i64 %121, %122
  %124 = xor i64 4039269429500633862, %123
  %125 = xor i64 %118, -1
  %126 = or i64 -3392110804947880583, %125
  %127 = xor i64 %126, -1
  %128 = and i64 %127, -1
  %129 = or i64 %124, %128
  %130 = xor i64 %129, %114
  %131 = xor i64 %130, 5600264758283802943
  %132 = xor i64 %131, %119
  %133 = xor i64 %132, %117
  %134 = mul i64 %112, %133
  %135 = trunc i64 %134 to i32
  %lookupTable = alloca [9 x i32], i32 %135, align 4
  %136 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %136, align 4
  %137 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %137, align 4
  %138 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %138, align 4
  %139 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %139, align 4
  %140 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %140, align 4
  %141 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %141, align 4
  %142 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %142, align 4
  %143 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %143, align 4
  %144 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %144, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314480, i32* %1, align 4
  %145 = call i8** @bf3325468485390379012(i32* %1)
  %146 = load i8*, i8** %145, align 8
  indirectbr i8* %146, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %260
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub1.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %147 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %150 = load i32, i32* %149, align 4
  %151 = srem i32 %148, %150
  store i32 %151, i32* %dispatcher, align 4
  %152 = load i8*, i8** %9, align 8
  %153 = load i8, i8* %152, align 1
  %154 = mul i8 %153, %153
  %155 = xor i8 %154, %153
  %156 = and i8 %154, %153
  %157 = mul i8 2, %156
  %158 = add i8 %155, %157
  %159 = mul i8 39, %158
  %160 = add i8 23, %159
  %161 = mul i8 -105, %160
  %162 = add i8 111, %161
  %163 = mul i8 %162, 3
  %164 = srem i8 %163, 2
  %165 = icmp eq i8 %164, 0
  %166 = mul i8 %153, %153
  %167 = and i8 %166, %153
  %168 = or i8 %166, %153
  %169 = add i8 %167, %168
  %170 = srem i8 %169, 2
  %171 = icmp eq i8 %170, 0
  %172 = xor i1 %165, true
  %173 = xor i1 %171, true
  %174 = or i1 %172, %173
  %175 = sext i32 %0 to i64
  %176 = and i64 %175, 3480023830458339364
  %177 = xor i64 %175, -1
  %178 = xor i64 3480023830458339364, %177
  %179 = and i64 %178, 3480023830458339364
  %180 = and i64 %54, -1605435980688695123
  %181 = or i64 1605435980688695122, %54
  %182 = sub i64 %181, 1605435980688695122
  %183 = xor i64 %182, %176
  %184 = xor i64 %183, %179
  %185 = xor i64 %184, -5943721490502118283
  %186 = xor i64 %185, %180
  %187 = and i64 %6, 591982137686479897
  %188 = xor i64 %6, -1
  %189 = or i64 -591982137686479898, %188
  %190 = xor i64 %189, -1
  %191 = and i64 %190, -1
  %192 = sext i32 %dispatcher1 to i64
  %193 = add i64 %192, -7130945826396028949
  %194 = add i64 -5506537858706709118, %192
  %195 = add i64 %194, -1624407967689319831
  %196 = xor i64 %191, 8642313188966800349
  %197 = xor i64 %196, %193
  %198 = xor i64 %197, %187
  %199 = xor i64 %198, %195
  %200 = mul i64 %186, %199
  %201 = trunc i64 %200 to i1
  %202 = xor i1 %174, %201
  %203 = and i1 %202, true
  %204 = or i64 %56, -3974088816566697731
  %205 = xor i64 %56, -1
  %206 = and i64 %205, -3339556903933234532
  %207 = and i64 %56, 3339556903933234531
  %208 = or i64 %206, %207
  %209 = xor i64 1837101370003141217, %208
  %210 = xor i64 %56, -1
  %211 = or i64 3974088816566697730, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = or i64 %209, %213
  %215 = sext i32 %0 to i64
  %216 = or i64 %215, -637983188992757254
  %217 = and i64 -637983188992757254, %215
  %218 = xor i64 -637983188992757254, %215
  %219 = or i64 %217, %218
  %220 = and i64 %6, -2865942744783446720
  %221 = xor i64 %6, -1
  %222 = xor i64 -2865942744783446720, %221
  %223 = and i64 %222, -2865942744783446720
  %224 = xor i64 %219, %204
  %225 = xor i64 %224, %216
  %226 = xor i64 %225, %220
  %227 = xor i64 %226, %223
  %228 = xor i64 %227, %214
  %229 = xor i64 %228, 4194395304404363883
  %230 = add i64 %2, 2731138966246614139
  %231 = sub i64 0, %2
  %232 = sub i64 2731138966246614139, %231
  %233 = or i64 %58, 3886850100133402023
  %234 = xor i64 %58, -1
  %235 = and i64 %234, -6882635702727562745
  %236 = and i64 %58, 6882635702727562744
  %237 = or i64 %235, %236
  %238 = xor i64 -7670990425223315552, %237
  %239 = xor i64 %58, -1
  %240 = or i64 -3886850100133402024, %239
  %241 = xor i64 %240, -1
  %242 = and i64 %241, -1
  %243 = or i64 %238, %242
  %244 = add i64 %2, -1717743788242048818
  %245 = sub i64 0, %2
  %246 = add i64 1717743788242048818, %245
  %247 = sub i64 0, %246
  %248 = xor i64 %243, %247
  %249 = xor i64 %248, %244
  %250 = xor i64 %249, %230
  %251 = xor i64 %250, %232
  %252 = xor i64 %251, %233
  %253 = xor i64 %252, 118089457709803959
  %254 = mul i64 %229, %253
  %255 = trunc i64 %254 to i32
  %256 = select i1 %203, i32 %255, i32 388314455
  %257 = xor i32 %256, 42
  store i32 %257, i32* %1, align 4
  %258 = call i8** @bf3325468485390379012(i32* %1)
  %259 = load i8*, i8** %258, align 8
  indirectbr i8* %259, [label %loopEnd, label %EntryBasicBlockSplit]

260:                                              ; preds = %260, %loopStart
  %261 = mul i64 77, 53
  %262 = sext i32 %0 to i64
  %263 = or i64 %262, -1662734182327928749
  %264 = and i64 -1662734182327928749, %262
  %265 = xor i64 -1662734182327928749, %262
  %266 = or i64 %264, %265
  %267 = add i64 %58, 2375771007603410776
  %268 = sub i64 0, %58
  %269 = sub i64 2375771007603410776, %268
  %270 = xor i64 %263, 6326701793497196541
  %271 = xor i64 %270, %267
  %272 = xor i64 %271, %266
  %273 = xor i64 %272, %269
  %274 = and i64 %89, -1495876410334197619
  %275 = xor i64 %89, -1
  %276 = or i64 1495876410334197618, %275
  %277 = xor i64 %276, -1
  %278 = and i64 %277, -1
  %279 = and i64 %8, 6775740679107567924
  %280 = xor i64 %8, -1
  %281 = xor i64 6775740679107567924, %280
  %282 = and i64 %281, 6775740679107567924
  %283 = xor i64 %274, -5337292050398171158
  %284 = xor i64 %283, %282
  %285 = xor i64 %284, %279
  %286 = xor i64 %285, %278
  %287 = mul i64 %273, %286
  %288 = sdiv i64 25, %287
  %289 = sub i64 42, 36
  %290 = srem i32 %0, 2
  %291 = icmp eq i32 %290, 0
  %292 = mul i32 %.reload4, 2
  %293 = mul i32 %.reload4, 2
  %294 = add i32 2, %293
  %295 = mul i32 %292, %294
  %296 = add i64 %54, 3387438629097237667
  %297 = and i64 3387438629097237667, %54
  %298 = or i64 3387438629097237667, %54
  %299 = add i64 %297, %298
  %300 = add i64 %6, -142781854144164464
  %301 = sub i64 0, %6
  %302 = add i64 142781854144164464, %301
  %303 = sub i64 0, %302
  %304 = xor i64 %300, %296
  %305 = xor i64 %304, %299
  %306 = xor i64 %305, 8062180363653976509
  %307 = xor i64 %306, %303
  %308 = or i64 %4, 4264262336522895394
  %309 = xor i64 %4, -1
  %310 = and i64 %309, -3823867318561539356
  %311 = and i64 %4, 3823867318561539355
  %312 = or i64 %310, %311
  %313 = xor i64 -1025887304873428282, %312
  %314 = xor i64 %4, -1
  %315 = or i64 -4264262336522895395, %314
  %316 = xor i64 %315, -1
  %317 = and i64 %316, -1
  %318 = or i64 %313, %317
  %319 = or i64 %58, -2748026906844285172
  %320 = and i64 -2748026906844285172, %58
  %321 = xor i64 -2748026906844285172, %58
  %322 = or i64 %320, %321
  %323 = sext i32 %dispatcher1 to i64
  %324 = or i64 %323, -2996372751272964498
  %325 = and i64 -2996372751272964498, %323
  %326 = xor i64 -2996372751272964498, %323
  %327 = or i64 %325, %326
  %328 = xor i64 %319, %327
  %329 = xor i64 %328, %322
  %330 = xor i64 %329, -512584498622970284
  %331 = xor i64 %330, %318
  %332 = xor i64 %331, %308
  %333 = xor i64 %332, %324
  %334 = mul i64 %307, %333
  %335 = trunc i64 %334 to i32
  %336 = srem i32 %295, %335
  %337 = icmp eq i32 %336, 0
  %338 = mul i32 %.reload4, %.reload4
  %339 = add i32 %338, %.reload4
  %340 = or i64 %54, -1197263868318495012
  %341 = xor i64 %54, -1
  %342 = and i64 %341, 4117565873817879100
  %343 = and i64 %54, -4117565873817879101
  %344 = or i64 %342, %343
  %345 = xor i64 -3006435865408254752, %344
  %346 = xor i64 %54, -1
  %347 = or i64 1197263868318495011, %346
  %348 = xor i64 %347, -1
  %349 = and i64 %348, -1
  %350 = or i64 %345, %349
  %351 = add i64 %58, -8900304632581654825
  %352 = add i64 -1770650071935106456, %58
  %353 = add i64 %352, -7129654560646548369
  %354 = or i64 %89, 5392093571655472265
  %355 = xor i64 %89, -1
  %356 = and i64 5392093571655472265, %355
  %357 = add i64 %356, %89
  %358 = xor i64 %353, %351
  %359 = xor i64 %358, %350
  %360 = xor i64 %359, %340
  %361 = xor i64 %360, %354
  %362 = xor i64 %361, %357
  %363 = xor i64 %362, -5932300624744099567
  %364 = or i64 %56, -8720108988109407119
  %365 = and i64 -8720108988109407119, %56
  %366 = xor i64 -8720108988109407119, %56
  %367 = or i64 %365, %366
  %368 = sext i32 %0 to i64
  %369 = and i64 %368, -8607081132779443809
  %370 = xor i64 %368, -1
  %371 = xor i64 -8607081132779443809, %370
  %372 = and i64 %371, -8607081132779443809
  %373 = sext i32 %0 to i64
  %374 = and i64 %373, 4285446826730210977
  %375 = or i64 -4285446826730210978, %373
  %376 = sub i64 %375, -4285446826730210978
  %377 = xor i64 %367, %374
  %378 = xor i64 %377, %369
  %379 = xor i64 %378, %372
  %380 = xor i64 %379, %376
  %381 = xor i64 %380, 1986146678150299618
  %382 = xor i64 %381, %364
  %383 = mul i64 %363, %382
  %384 = trunc i64 %383 to i32
  %385 = srem i32 %339, %384
  %386 = icmp eq i32 %385, 0
  %387 = and i1 %337, %386
  store i1 %387, i1* %.out, align 1
  %388 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %389 = load i32, i32* %388, align 4
  %390 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %391 = load i32, i32* %390, align 4
  %392 = sub i32 %389, %391
  %393 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %394 = load i32, i32* %393, align 4
  %395 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %396 = load i32, i32* %395, align 4
  %397 = srem i32 %394, %396
  %398 = select i1 %387, i32 %392, i32 %397
  store i32 %398, i32* %dispatcher, align 4
  %399 = load i8*, i8** %9, align 8
  %400 = load i8, i8* %399, align 1
  %401 = add i64 %2, -2713306886373276581
  %402 = add i64 8399206045581531106, %2
  %403 = add i64 %402, 7334231141754743929
  %404 = sext i32 %0 to i64
  %405 = and i64 %404, -3681338584450182645
  %406 = xor i64 %404, -1
  %407 = or i64 3681338584450182644, %406
  %408 = xor i64 %407, -1
  %409 = and i64 %408, -1
  %410 = or i64 %6, 4627011582066796864
  %411 = xor i64 %6, -1
  %412 = and i64 4627011582066796864, %411
  %413 = add i64 %412, %6
  %414 = xor i64 %405, %409
  %415 = xor i64 %414, %401
  %416 = xor i64 %415, %403
  %417 = xor i64 %416, -8223564446649948241
  %418 = xor i64 %417, %410
  %419 = xor i64 %418, %413
  %420 = or i64 %58, -6254541068747588430
  %421 = and i64 -6254541068747588430, %58
  %422 = xor i64 -6254541068747588430, %58
  %423 = or i64 %421, %422
  %424 = or i64 %58, -108919201410274559
  %425 = and i64 -108919201410274559, %58
  %426 = xor i64 -108919201410274559, %58
  %427 = or i64 %425, %426
  %428 = and i64 %2, -6488825677469453290
  %429 = xor i64 %2, -1
  %430 = xor i64 -6488825677469453290, %429
  %431 = and i64 %430, -6488825677469453290
  %432 = xor i64 %431, %423
  %433 = xor i64 %432, %427
  %434 = xor i64 %433, %420
  %435 = xor i64 %434, %428
  %436 = xor i64 %435, %424
  %437 = xor i64 %436, 104267975027302046
  %438 = mul i64 %419, %437
  %439 = trunc i64 %438 to i8
  %440 = mul i8 %400, %439
  %441 = mul i8 %400, 2
  %442 = xor i8 2, %441
  %443 = and i8 2, %441
  %444 = mul i8 2, %443
  %445 = add i8 %442, %444
  %446 = mul i8 %440, %445
  %447 = srem i8 %446, 4
  %448 = icmp eq i8 %447, 0
  %449 = mul i8 %400, %400
  %450 = add i8 %449, %400
  %451 = add i64 %8, -28319913976948027
  %452 = sub i64 0, %8
  %453 = sub i64 -28319913976948027, %452
  %454 = and i64 %58, 659000507089183646
  %455 = xor i64 %58, -1
  %456 = or i64 -659000507089183647, %455
  %457 = xor i64 %456, -1
  %458 = and i64 %457, -1
  %459 = add i64 %56, 8832581898955390561
  %460 = sub i64 0, %56
  %461 = add i64 -8832581898955390561, %460
  %462 = sub i64 0, %461
  %463 = xor i64 %459, %451
  %464 = xor i64 %463, %453
  %465 = xor i64 %464, 8463271604936662119
  %466 = xor i64 %465, %458
  %467 = xor i64 %466, %462
  %468 = xor i64 %467, %454
  %469 = add i64 %2, -6750504172131073260
  %470 = add i64 -5574805576537555565, %2
  %471 = sub i64 %470, 1175698595593517695
  %472 = sext i32 %.reload4 to i64
  %473 = add i64 %472, 7358021882279998655
  %474 = sub i64 0, %472
  %475 = add i64 -7358021882279998655, %474
  %476 = sub i64 0, %475
  %477 = or i64 %58, -3764778493064924010
  %478 = xor i64 %58, -1
  %479 = and i64 %478, -8913242054804164638
  %480 = and i64 %58, 8913242054804164637
  %481 = or i64 %479, %480
  %482 = xor i64 5732269217072716660, %481
  %483 = xor i64 %58, -1
  %484 = or i64 3764778493064924009, %483
  %485 = xor i64 %484, -1
  %486 = and i64 %485, -1
  %487 = or i64 %482, %486
  %488 = xor i64 %476, %477
  %489 = xor i64 %488, %487
  %490 = xor i64 %489, %469
  %491 = xor i64 %490, 7717018711582441134
  %492 = xor i64 %491, %471
  %493 = xor i64 %492, %473
  %494 = mul i64 %468, %493
  %495 = trunc i64 %494 to i8
  %496 = srem i8 %450, %495
  %497 = icmp eq i8 %496, 0
  %498 = and i1 %448, %497
  %499 = select i1 %498, i32 388314480, i32 388314455
  %500 = xor i32 %499, 39
  store i32 %500, i32* %1, align 4
  %501 = call i8** @bf3325468485390379012(i32* %1)
  %502 = load i8*, i8** %501, align 8
  indirectbr i8* %502, [label %loopEnd, label %260]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub1.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %503 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %503, align 4
  %504 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %505 = or i64 %56, 8375269612864457340
  %506 = xor i64 %56, -1
  %507 = and i64 8375269612864457340, %506
  %508 = add i64 %507, %56
  %509 = and i64 %8, -2106356068562439533
  %510 = xor i64 %8, -1
  %511 = or i64 2106356068562439532, %510
  %512 = xor i64 %511, -1
  %513 = and i64 %512, -1
  %514 = xor i64 %505, %508
  %515 = xor i64 %514, -7126671265286118211
  %516 = xor i64 %515, %513
  %517 = xor i64 %516, %509
  %518 = add i64 %6, 601823248077960063
  %519 = add i64 -1709235222577932274, %6
  %520 = add i64 %519, 2311058470655892337
  %521 = add i64 %89, 6984344100365632889
  %522 = and i64 6984344100365632889, %89
  %523 = or i64 6984344100365632889, %89
  %524 = add i64 %522, %523
  %525 = or i64 %4, -4669484226106883359
  %526 = xor i64 %4, -1
  %527 = and i64 -4669484226106883359, %526
  %528 = add i64 %527, %4
  %529 = xor i64 %525, %528
  %530 = xor i64 %529, 5800460411355985557
  %531 = xor i64 %530, %520
  %532 = xor i64 %531, %518
  %533 = xor i64 %532, %521
  %534 = xor i64 %533, %524
  %535 = mul i64 %517, %534
  %536 = trunc i64 %535 to i32
  store i32 %536, i32* %504, align 4
  %537 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %537, align 4
  %538 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %538, align 4
  %539 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %539, align 4
  %540 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %541 = load i32, i32* %540, align 4
  store i32 %541, i32* %dispatcher, align 4
  %542 = load i8*, i8** %5, align 8
  %543 = load i8, i8* %542, align 1
  %544 = and i8 %543, 1
  %545 = icmp eq i8 %544, 0
  %546 = mul i8 %543, %543
  %547 = add i8 %546, %543
  %548 = mul i8 %547, 3
  %549 = srem i8 %548, 2
  %550 = icmp eq i8 %549, 0
  %551 = or i1 %545, %550
  %552 = select i1 %551, i32 388314529, i32 388314375
  %553 = xor i32 %552, 166
  store i32 %553, i32* %1, align 4
  %554 = call i8** @bf3325468485390379012(i32* %1)
  %555 = load i8*, i8** %554, align 8
  indirectbr i8* %555, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %556 = load i8*, i8** %55, align 8
  %557 = load i8, i8* %556, align 1
  %558 = mul i8 %557, 2
  %559 = mul i8 %557, 2
  %560 = xor i8 2, %559
  %561 = and i8 2, %559
  %562 = mul i8 2, %561
  %563 = add i8 %560, %562
  %564 = mul i8 39, %563
  %565 = add i8 23, %564
  %566 = mul i8 -105, %565
  %567 = add i8 111, %566
  %568 = mul i8 %558, %567
  %569 = srem i8 %568, 4
  %570 = icmp eq i8 %569, 0
  %571 = mul i8 %557, %557
  %572 = mul i8 %571, %557
  %573 = and i8 %572, %557
  %574 = or i8 %572, %557
  %575 = add i8 %573, %574
  %576 = srem i8 %575, 2
  %577 = icmp eq i8 %576, 0
  %578 = add i64 %4, 7351129317512393206
  %579 = sub i64 0, %4
  %580 = sub i64 7351129317512393206, %579
  %581 = add i64 %89, -7375503462437359632
  %582 = and i64 -7375503462437359632, %89
  %583 = or i64 -7375503462437359632, %89
  %584 = add i64 %582, %583
  %585 = xor i64 %581, %584
  %586 = xor i64 %585, %578
  %587 = xor i64 %586, %580
  %588 = xor i64 %587, 2903727836558167389
  %589 = and i64 %58, 5046466196003128349
  %590 = or i64 -5046466196003128350, %58
  %591 = sub i64 %590, -5046466196003128350
  %592 = add i64 %54, 6786171396692410975
  %593 = sub i64 0, %54
  %594 = sub i64 6786171396692410975, %593
  %595 = xor i64 %591, %592
  %596 = xor i64 %595, %589
  %597 = xor i64 %596, -3428345433423597835
  %598 = xor i64 %597, %594
  %599 = mul i64 %588, %598
  %600 = trunc i64 %599 to i1
  %601 = xor i1 %570, %600
  %602 = or i1 %601, %577
  %603 = xor i1 %570, true
  %604 = sub i1 %602, %603
  %605 = select i1 %604, i32 388314375, i32 388314455
  %606 = or i32 %605, 80
  %607 = and i32 %605, 80
  %608 = sub i32 %606, %607
  store i32 %608, i32* %1, align 4
  %609 = call i8** @bf3325468485390379012(i32* %1)
  %610 = load i8*, i8** %609, align 8
  indirectbr i8* %610, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %260, %EntryBasicBlockSplit
  %611 = load i8*, i8** %3, align 8
  %612 = load i8, i8* %611, align 1
  %613 = mul i8 %612, %612
  %614 = add i8 %613, %612
  %615 = mul i8 %614, 3
  %616 = srem i8 %615, 2
  %617 = icmp eq i8 %616, 0
  %618 = mul i8 %612, %612
  %619 = add i8 %618, %612
  %620 = srem i8 %619, 2
  %621 = and i64 %58, -1452098427199810525
  %622 = xor i64 %58, -1
  %623 = xor i64 -1452098427199810525, %622
  %624 = and i64 %623, -1452098427199810525
  %625 = and i64 %2, 1063498112811387683
  %626 = or i64 -1063498112811387684, %2
  %627 = sub i64 %626, -1063498112811387684
  %628 = and i64 %58, 4621426339073139347
  %629 = xor i64 %58, -1
  %630 = xor i64 4621426339073139347, %629
  %631 = and i64 %630, 4621426339073139347
  %632 = xor i64 %621, %627
  %633 = xor i64 %632, %628
  %634 = xor i64 %633, -1624393445937544511
  %635 = xor i64 %634, %624
  %636 = xor i64 %635, %625
  %637 = xor i64 %636, %631
  %638 = add i64 %6, -9210040585041928949
  %639 = sub i64 0, %6
  %640 = sub i64 -9210040585041928949, %639
  %641 = or i64 %58, -5905606025180866371
  %642 = and i64 -5905606025180866371, %58
  %643 = xor i64 -5905606025180866371, %58
  %644 = or i64 %642, %643
  %645 = or i64 %56, 5563882353052556770
  %646 = and i64 5563882353052556770, %56
  %647 = xor i64 5563882353052556770, %56
  %648 = or i64 %646, %647
  %649 = xor i64 %648, %644
  %650 = xor i64 %649, %645
  %651 = xor i64 %650, %640
  %652 = xor i64 %651, %638
  %653 = xor i64 %652, %641
  %654 = xor i64 %653, 0
  %655 = mul i64 %637, %654
  %656 = trunc i64 %655 to i8
  %657 = icmp eq i8 %620, %656
  %658 = xor i1 %617, true
  %659 = or i1 %658, %657
  %660 = xor i1 %617, true
  %661 = sub i1 %659, %660
  %662 = select i1 %661, i32 388314388, i32 388314480
  %663 = xor i32 %662, 100
  store i32 %663, i32* %1, align 4
  %664 = call i8** @bf3325468485390379012(i32* %1)
  %665 = load i8*, i8** %664, align 8
  indirectbr i8* %665, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.23.extracted(i32 %.reload, i32 %0, i32* %.out, i64* %.out1, float* %1, float** %.out2, float %2) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h9549842938191327224(i64 388314397)
  %5 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %.exitStub.exitStub), i8** %5, align 8
  %6 = call i64 @h9549842938191327224(i64 388314398)
  %7 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %"2"), i8** %7, align 8
  %8 = sext i32 %.reload to i64
  %9 = and i64 %8, 654939828441855298
  %10 = or i64 -654939828441855299, %8
  %11 = sub i64 %10, -654939828441855299
  %12 = sext i32 %.reload to i64
  %13 = and i64 %12, 453417775542789950
  %14 = or i64 -453417775542789951, %12
  %15 = sub i64 %14, -453417775542789951
  %16 = xor i64 %13, %9
  %17 = xor i64 %16, %15
  %18 = xor i64 %17, 2788148870666439485
  %19 = xor i64 %18, %11
  %20 = sext i32 %.reload to i64
  %21 = or i64 %20, -7989133104778607406
  %22 = xor i64 %20, -1
  %23 = and i64 %22, 5339385775639248959
  %24 = and i64 %20, -5339385775639248960
  %25 = or i64 %23, %24
  %26 = xor i64 -2649899069067246355, %25
  %27 = xor i64 %20, -1
  %28 = or i64 7989133104778607405, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = or i64 %26, %30
  %32 = sext i32 %0 to i64
  %33 = add i64 %32, 839626381434944994
  %34 = sub i64 0, %32
  %35 = add i64 -839626381434944994, %34
  %36 = sub i64 0, %35
  %37 = sext i32 %0 to i64
  %38 = and i64 %37, -8872789052657496425
  %39 = xor i64 %37, -1
  %40 = xor i64 -8872789052657496425, %39
  %41 = and i64 %40, -8872789052657496425
  %42 = xor i64 %38, %31
  %43 = xor i64 %42, %36
  %44 = xor i64 %43, 5866066047452837902
  %45 = xor i64 %44, %33
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, %21
  %48 = mul i64 %19, %47
  %49 = call i64 @h9549842938191327224(i64 %48)
  %50 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %49
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %.exitStub3.exitStub), i8** %50, align 8
  %51 = call i64 @h9549842938191327224(i64 388314402)
  %52 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %51
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %EntryBasicBlockSplit), i8** %52, align 8
  %53 = call i64 @h9549842938191327224(i64 388314411)
  %54 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %53
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %BogusBasciBlock), i8** %54, align 8
  %.reg2mem10 = alloca i8**, align 8
  %55 = sext i32 %0 to i64
  %56 = or i64 %55, -2955079782076676853
  %57 = xor i64 %55, -1
  %58 = and i64 -2955079782076676853, %57
  %59 = add i64 %58, %55
  %60 = sext i32 %0 to i64
  %61 = or i64 %60, 268520522051134226
  %62 = and i64 268520522051134226, %60
  %63 = xor i64 268520522051134226, %60
  %64 = or i64 %62, %63
  %65 = xor i64 %64, %56
  %66 = xor i64 %65, %59
  %67 = xor i64 %66, -1652718718676062543
  %68 = xor i64 %67, %61
  %69 = sext i32 %.reload to i64
  %70 = add i64 %69, 5362730948818892211
  %71 = and i64 5362730948818892211, %69
  %72 = or i64 5362730948818892211, %69
  %73 = add i64 %71, %72
  %74 = sext i32 %0 to i64
  %75 = add i64 %74, 8442584168506967012
  %76 = and i64 8442584168506967012, %74
  %77 = or i64 8442584168506967012, %74
  %78 = add i64 %76, %77
  %79 = xor i64 -7683860719246583215, %70
  %80 = xor i64 %79, %73
  %81 = xor i64 %80, %75
  %82 = xor i64 %81, %78
  %83 = mul i64 %68, %82
  %84 = trunc i64 %83 to i32
  %.reg2mem7 = alloca i8**, i32 %84, align 8
  %.reg2mem4 = alloca i8**, align 8
  %85 = sext i32 %0 to i64
  %86 = or i64 %85, 1699223588235227808
  %87 = xor i64 %85, -1
  %88 = and i64 %87, -8618719178984769190
  %89 = and i64 %85, 8618719178984769189
  %90 = or i64 %88, %89
  %91 = xor i64 -6921766219716654086, %90
  %92 = xor i64 %85, -1
  %93 = or i64 -1699223588235227809, %92
  %94 = xor i64 %93, -1
  %95 = and i64 %94, -1
  %96 = or i64 %91, %95
  %97 = sext i32 %0 to i64
  %98 = or i64 %97, -7900242144383758157
  %99 = xor i64 %97, -1
  %100 = and i64 %99, -8949972565645051580
  %101 = and i64 %97, 8949972565645051579
  %102 = or i64 %100, %101
  %103 = xor i64 1267759989512186359, %102
  %104 = xor i64 %97, -1
  %105 = or i64 7900242144383758156, %104
  %106 = xor i64 %105, -1
  %107 = and i64 %106, -1
  %108 = or i64 %103, %107
  %109 = xor i64 %108, %96
  %110 = xor i64 %109, %98
  %111 = xor i64 %110, -2335277646658254347
  %112 = xor i64 %111, %86
  %113 = sext i32 %.reload to i64
  %114 = and i64 %113, 4493641213055288010
  %115 = xor i64 %113, -1
  %116 = xor i64 4493641213055288010, %115
  %117 = and i64 %116, 4493641213055288010
  %118 = sext i32 %.reload to i64
  %119 = add i64 %118, 8575688849137413944
  %120 = add i64 -8477514160666202770, %118
  %121 = sub i64 %120, 1393541063905934902
  %122 = xor i64 %119, -7462857383610721699
  %123 = xor i64 %122, %114
  %124 = xor i64 %123, %121
  %125 = xor i64 %124, %117
  %126 = mul i64 %112, %125
  %127 = trunc i64 %126 to i32
  %.reg2mem = alloca i8**, i32 %127, align 8
  %128 = sext i32 %0 to i64
  %129 = add i64 %128, -7447015598291951080
  %130 = and i64 -7447015598291951080, %128
  %131 = or i64 -7447015598291951080, %128
  %132 = add i64 %130, %131
  %133 = sext i32 %0 to i64
  %134 = or i64 %133, -3819621456224993048
  %135 = and i64 -3819621456224993048, %133
  %136 = xor i64 -3819621456224993048, %133
  %137 = or i64 %135, %136
  %138 = sext i32 %.reload to i64
  %139 = or i64 %138, 5837784840800012069
  %140 = xor i64 %138, -1
  %141 = and i64 5837784840800012069, %140
  %142 = add i64 %141, %138
  %143 = xor i64 %129, 7173381705113122801
  %144 = xor i64 %143, %139
  %145 = xor i64 %144, %142
  %146 = xor i64 %145, %134
  %147 = xor i64 %146, %132
  %148 = xor i64 %147, %137
  %149 = sext i32 %.reload to i64
  %150 = add i64 %149, 249273637524277280
  %151 = and i64 249273637524277280, %149
  %152 = or i64 249273637524277280, %149
  %153 = add i64 %151, %152
  %154 = sext i32 %.reload to i64
  %155 = and i64 %154, 1092499761534329617
  %156 = xor i64 %154, -1
  %157 = or i64 -1092499761534329618, %156
  %158 = xor i64 %157, -1
  %159 = and i64 %158, -1
  %160 = sext i32 %0 to i64
  %161 = add i64 %160, -5641590811392434268
  %162 = xor i64 -5641590811392434268, %160
  %163 = and i64 -5641590811392434268, %160
  %164 = mul i64 2, %163
  %165 = add i64 %162, %164
  %166 = xor i64 %161, %150
  %167 = xor i64 %166, %155
  %168 = xor i64 %167, %165
  %169 = xor i64 %168, %159
  %170 = xor i64 %169, 6953907384808226133
  %171 = xor i64 %170, %153
  %172 = mul i64 %148, %171
  %173 = trunc i64 %172 to i32
  %JumpTable = alloca i8*, i32 %173, align 8
  %174 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %BogusBasciBlock), i8** %174, align 8
  %175 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %175, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %176 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %176, i8*** %.reg2mem4, align 8
  %.reload6 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %"2"), i8** %.reload6, align 8
  %177 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %177, i8*** %.reg2mem7, align 8
  %.reload9 = load i8**, i8*** %.reg2mem7, align 8
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %.exitStub.exitStub), i8** %.reload9, align 8
  %178 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %178, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %.exitStub3.exitStub), i8** %.reload12, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %179 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %179, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %180 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %BogusBasciBlock), i8** %180, align 8
  %181 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %.exitStub.exitStub), i8** %181, align 8
  %182 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted.23.extracted, %EntryBasicBlockSplit), i8** %182, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %183 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %183, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload5 = load i8**, i8*** %.reg2mem4, align 8
  %184 = load i8*, i8** %.reload5, align 8
  indirectbr i8* %184, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %185 = add nsw i32 %.reload, %0
  store i32 %185, i32* %.out, align 4
  %186 = sext i32 %185 to i64
  store i64 %186, i64* %.out1, align 8
  %187 = getelementptr inbounds float, float* %1, i64 %186
  store float* %187, float** %.out2, align 8
  %188 = load float, float* %187, align 4, !tbaa !10
  %189 = fcmp ogt float %2, %188
  %.reload8 = load i8**, i8*** %.reg2mem7, align 8
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %190 = select i1 %189, i8** %.reload8, i8** %.reload11
  %191 = load i8*, i8** %190, align 8
  indirectbr i8* %191, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub3.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.25.extracted(i1 %0, i1 %1, i1* %.out5, i1 %2, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9, i1* %.out10, i1 %3, i1* %.out11, i1* %.out12, i1* %.out13, i1* %.out14, i1* %.out15, i1* %.out16) #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h9549842938191327224(i64 388314397)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314456)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %"2"), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314481)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314392)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %BogusBasciBlock), i8** %13, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %14, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %15, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %"2"), i8** %.reload5, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %16, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %17 = load i8*, i8** %.reload, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %18 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %.exitStub.exitStub), i8** %18, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted.25.extracted, %BogusBasciBlock), i8** %19, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %20 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %20, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %21 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %21, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %22 = or i1 %0, %1
  store i1 %22, i1* %.out5, align 1
  %23 = or i64 %5, -6916966606864229364
  %24 = and i64 -6916966606864229364, %5
  %25 = xor i64 -6916966606864229364, %5
  %26 = or i64 %24, %25
  %27 = add i64 %11, -4112418418533685088
  %28 = add i64 4917296583767569975, %11
  %29 = sub i64 %28, 9029715002301255063
  %30 = or i64 %5, 4194043929946033097
  %31 = and i64 4194043929946033097, %5
  %32 = xor i64 4194043929946033097, %5
  %33 = or i64 %31, %32
  %34 = xor i64 %27, %29
  %35 = xor i64 %34, %26
  %36 = xor i64 %35, %23
  %37 = xor i64 %36, -1863266387957959577
  %38 = xor i64 %37, %30
  %39 = xor i64 %38, %33
  %40 = and i64 %11, -205254923691299281
  %41 = xor i64 %11, -1
  %42 = or i64 205254923691299280, %41
  %43 = xor i64 %42, -1
  %44 = and i64 %43, -1
  %45 = and i64 %11, -4714193553612808240
  %46 = xor i64 %11, -1
  %47 = or i64 4714193553612808239, %46
  %48 = xor i64 %47, -1
  %49 = and i64 %48, -1
  %50 = xor i64 %44, %40
  %51 = xor i64 %50, -5673350538622490793
  %52 = xor i64 %51, %49
  %53 = xor i64 %52, %45
  %54 = mul i64 %39, %53
  %55 = trunc i64 %54 to i1
  %56 = xor i1 %2, %55
  store i1 %56, i1* %.out6, align 1
  %57 = xor i1 %56, true
  %58 = or i1 %57, true
  %59 = xor i1 %56, true
  %60 = sub i1 %58, %59
  store i1 %60, i1* %.out7, align 1
  %61 = xor i1 %2, true
  %62 = or i1 %61, false
  %63 = xor i1 %2, true
  %64 = sub i1 %62, %63
  store i1 %64, i1* %.out8, align 1
  %65 = xor i1 %60, true
  %66 = and i1 %65, false
  %67 = and i1 %60, true
  %68 = or i1 %66, %67
  %69 = xor i1 %64, true
  %70 = and i1 %69, false
  %71 = and i1 %64, true
  %72 = or i1 %70, %71
  %73 = xor i1 %68, %72
  %74 = xor i1 %60, true
  %75 = xor i1 %64, true
  %76 = or i1 %74, %75
  %77 = xor i1 %76, true
  %78 = and i1 %77, true
  %79 = or i1 %73, %78
  store i1 %79, i1* %.out9, align 1
  %80 = and i64 %7, 4997154377477520609
  %81 = xor i64 %7, -1
  %82 = xor i64 4997154377477520609, %81
  %83 = and i64 %82, 4997154377477520609
  %84 = add i64 %9, -408819714482477439
  %85 = add i64 7598713877416592858, %9
  %86 = sub i64 %85, 8007533591899070297
  %87 = or i64 %11, -755602816272588039
  %88 = and i64 -755602816272588039, %11
  %89 = xor i64 -755602816272588039, %11
  %90 = or i64 %88, %89
  %91 = xor i64 %86, %80
  %92 = xor i64 %91, %84
  %93 = xor i64 %92, %87
  %94 = xor i64 %93, %90
  %95 = xor i64 %94, 6608807952200892645
  %96 = xor i64 %95, %83
  %97 = and i64 %11, 8980939339057237391
  %98 = xor i64 %11, -1
  %99 = or i64 -8980939339057237392, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = and i64 %7, -2985917226575868567
  %103 = or i64 2985917226575868566, %7
  %104 = sub i64 %103, 2985917226575868566
  %105 = xor i64 %97, 7983841049856818413
  %106 = xor i64 %105, %101
  %107 = xor i64 %106, %102
  %108 = xor i64 %107, %104
  %109 = mul i64 %96, %108
  %110 = trunc i64 %109 to i1
  %111 = xor i1 %22, %110
  %112 = xor i1 %79, true
  %113 = xor i1 %111, %112
  store i1 %113, i1* %.out10, align 1
  %114 = xor i1 %3, true
  store i1 %114, i1* %.out11, align 1
  %115 = and i64 %11, -2466538114899208306
  %116 = or i64 2466538114899208305, %11
  %117 = sub i64 %116, 2466538114899208305
  %118 = or i64 %5, -7660568725242952054
  %119 = and i64 -7660568725242952054, %5
  %120 = xor i64 -7660568725242952054, %5
  %121 = or i64 %119, %120
  %122 = or i64 %7, 3968000742432614461
  %123 = xor i64 %7, -1
  %124 = and i64 3968000742432614461, %123
  %125 = add i64 %124, %7
  %126 = xor i64 %121, -9038439115918038541
  %127 = xor i64 %126, %118
  %128 = xor i64 %127, %125
  %129 = xor i64 %128, %122
  %130 = xor i64 %129, %117
  %131 = xor i64 %130, %115
  %132 = add i64 %5, 1979856820516461729
  %133 = add i64 -7197172566827219873, %5
  %134 = sub i64 %133, -9177029387343681602
  %135 = add i64 %5, -6384728143625925776
  %136 = sub i64 0, %5
  %137 = add i64 6384728143625925776, %136
  %138 = sub i64 0, %137
  %139 = or i64 %11, -6565833233649778688
  %140 = and i64 -6565833233649778688, %11
  %141 = xor i64 -6565833233649778688, %11
  %142 = or i64 %140, %141
  %143 = xor i64 %135, %134
  %144 = xor i64 %143, %142
  %145 = xor i64 %144, %139
  %146 = xor i64 %145, %138
  %147 = xor i64 %146, %132
  %148 = xor i64 %147, -3476564381063506117
  %149 = mul i64 %131, %148
  %150 = trunc i64 %149 to i1
  %151 = xor i1 %2, %150
  store i1 %151, i1* %.out12, align 1
  %152 = xor i1 %151, true
  %153 = and i1 %114, %152
  %154 = add i1 %153, %151
  store i1 %154, i1* %.out13, align 1
  %155 = or i1 %154, true
  %156 = and i1 %154, true
  %157 = add i1 %155, true
  %158 = sub i1 %157, %156
  %159 = sub i1 %158, true
  store i1 %159, i1* %.out14, align 1
  %160 = xor i1 %159, true
  %161 = and i1 %160, true
  %162 = and i1 %159, false
  %163 = or i1 %161, %162
  %164 = xor i1 %163, true
  %165 = and i1 %164, true
  %166 = and i1 %163, false
  %167 = or i1 %165, %166
  %168 = xor i1 %167, true
  %169 = xor i1 %163, true
  %170 = or i1 %169, true
  %171 = xor i1 %170, true
  %172 = and i1 %171, true
  %173 = or i1 %168, %172
  %174 = or i1 %173, true
  %175 = and i1 %173, true
  %176 = sub i1 %174, %175
  %177 = xor i1 %176, true
  %178 = or i1 %177, true
  %179 = xor i1 %176, true
  %180 = sub i1 %178, %179
  store i1 %180, i1* %.out15, align 1
  %181 = or i1 %113, %180
  store i1 %181, i1* %.out16, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %182 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %182, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop.extracted.26.extracted() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h9549842938191327224(i64 388314463)
  %2 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %1
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %loopEnd), i8** %2, align 8
  %3 = call i64 @h9549842938191327224(i64 388314432)
  %4 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h9549842938191327224(i64 388314472)
  %6 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h9549842938191327224(i64 388314530)
  %8 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %7
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h9549842938191327224(i64 388314535)
  %10 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %9
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h9549842938191327224(i64 388314433)
  %12 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %11
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %103), i8** %12, align 8
  %13 = call i64 @h9549842938191327224(i64 388314532)
  %14 = getelementptr [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %13
  store i8* blockaddress(@inner_loop.extracted.26.extracted, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 388314532, i32* %0, align 4
  %23 = call i8** @bf3325468485390379012(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %103
    i32 2, label %.exitStub.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %26, 1773362269
  %30 = add i32 %29, %28
  %31 = sub i32 %30, 1773362269
  store i32 %31, i32* %dispatcher, align 4
  %32 = load i8*, i8** %12, align 8
  %33 = load i8, i8* %32, align 1
  %34 = mul i8 %33, 2
  %35 = mul i8 %33, 2
  %36 = add i8 2, %35
  %37 = mul i8 %34, %36
  %38 = srem i8 %37, 4
  %39 = icmp eq i8 %38, 0
  %40 = mul i8 %33, %33
  %41 = and i8 %40, %33
  %42 = or i8 %40, %33
  %43 = add i8 %41, %42
  %44 = srem i8 %43, 2
  %45 = icmp eq i8 %44, 0
  %46 = and i1 %39, %45
  %47 = and i64 %7, 2092739344548819488
  %48 = xor i64 %7, -1
  %49 = xor i64 2092739344548819488, %48
  %50 = and i64 %49, 2092739344548819488
  %51 = add i64 %11, 6988612144502950757
  %52 = xor i64 6988612144502950757, %11
  %53 = and i64 6988612144502950757, %11
  %54 = mul i64 2, %53
  %55 = add i64 %52, %54
  %56 = or i64 %11, 4201412823818225445
  %57 = xor i64 %11, -1
  %58 = and i64 %57, -6248570723281136827
  %59 = and i64 %11, 6248570723281136826
  %60 = or i64 %58, %59
  %61 = xor i64 -7852319809523362720, %60
  %62 = xor i64 %11, -1
  %63 = or i64 -4201412823818225446, %62
  %64 = xor i64 %63, -1
  %65 = and i64 %64, -1
  %66 = or i64 %61, %65
  %67 = xor i64 %47, -2761015993843483639
  %68 = xor i64 %67, %66
  %69 = xor i64 %68, %51
  %70 = xor i64 %69, %50
  %71 = xor i64 %70, %55
  %72 = xor i64 %71, %56
  %73 = or i64 %11, 299240805035172559
  %74 = and i64 299240805035172559, %11
  %75 = xor i64 299240805035172559, %11
  %76 = or i64 %74, %75
  %77 = or i64 %9, -1984551661512296321
  %78 = xor i64 %9, -1
  %79 = and i64 %78, -8501679071221497385
  %80 = and i64 %9, 8501679071221497384
  %81 = or i64 %79, %80
  %82 = xor i64 7959693612069796264, %81
  %83 = xor i64 %9, -1
  %84 = or i64 1984551661512296320, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = add i64 %13, -956897624910201301
  %89 = sub i64 0, %13
  %90 = sub i64 -956897624910201301, %89
  %91 = xor i64 %76, %77
  %92 = xor i64 %91, %88
  %93 = xor i64 %92, %90
  %94 = xor i64 %93, -6134289861830717401
  %95 = xor i64 %94, %73
  %96 = xor i64 %95, %87
  %97 = mul i64 %72, %96
  %98 = trunc i64 %97 to i32
  %99 = select i1 %46, i32 388314530, i32 %98
  %100 = xor i32 %99, 253
  store i32 %100, i32* %0, align 4
  %101 = call i8** @bf3325468485390379012(i32* %0)
  %102 = load i8*, i8** %101, align 8
  indirectbr i8* %102, [label %loopEnd, label %EntryBasicBlockSplit]

103:                                              ; preds = %103, %loopStart
  %104 = and i64 %11, 5515341728803924809
  %105 = xor i64 %11, -1
  %106 = xor i64 5515341728803924809, %105
  %107 = and i64 %106, 5515341728803924809
  %108 = or i64 %3, 1890445655950803291
  %109 = and i64 1890445655950803291, %3
  %110 = xor i64 1890445655950803291, %3
  %111 = or i64 %109, %110
  %112 = and i64 %7, 5818838741198185150
  %113 = xor i64 %7, -1
  %114 = xor i64 5818838741198185150, %113
  %115 = and i64 %114, 5818838741198185150
  %116 = xor i64 %107, %111
  %117 = xor i64 %116, %104
  %118 = xor i64 %117, 599657028044389627
  %119 = xor i64 %118, %115
  %120 = xor i64 %119, %112
  %121 = xor i64 %120, %108
  %122 = and i64 %1, -5317338609806229050
  %123 = or i64 5317338609806229049, %1
  %124 = sub i64 %123, 5317338609806229049
  %125 = or i64 %1, -6116330332605626521
  %126 = and i64 -6116330332605626521, %1
  %127 = xor i64 -6116330332605626521, %1
  %128 = or i64 %126, %127
  %129 = or i64 %13, 5205700633925169841
  %130 = xor i64 %13, -1
  %131 = and i64 5205700633925169841, %130
  %132 = add i64 %131, %13
  %133 = xor i64 4193815222641159201, %128
  %134 = xor i64 %133, %132
  %135 = xor i64 %134, %124
  %136 = xor i64 %135, %125
  %137 = xor i64 %136, %122
  %138 = xor i64 %137, %129
  %139 = mul i64 %121, %138
  %140 = trunc i64 %139 to i32
  %141 = and i64 %1, -8267969159946491371
  %142 = or i64 8267969159946491370, %1
  %143 = sub i64 %142, 8267969159946491370
  %144 = and i64 %9, 1284799620724367333
  %145 = xor i64 %9, -1
  %146 = or i64 -1284799620724367334, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = xor i64 %144, %148
  %150 = xor i64 %149, -8539928533607409637
  %151 = xor i64 %150, %143
  %152 = xor i64 %151, %141
  %153 = or i64 %5, 8883948471842980236
  %154 = xor i64 %5, -1
  %155 = and i64 %154, -4556878796072967270
  %156 = and i64 %5, 4556878796072967269
  %157 = or i64 %155, %156
  %158 = xor i64 -4933527433298255338, %157
  %159 = xor i64 %5, -1
  %160 = or i64 -8883948471842980237, %159
  %161 = xor i64 %160, -1
  %162 = and i64 %161, -1
  %163 = or i64 %158, %162
  %164 = or i64 %5, 7125309888189042934
  %165 = and i64 7125309888189042934, %5
  %166 = xor i64 7125309888189042934, %5
  %167 = or i64 %165, %166
  %168 = sext i32 %dispatcher1 to i64
  %169 = and i64 %168, 3854820074672973523
  %170 = or i64 -3854820074672973524, %168
  %171 = sub i64 %170, -3854820074672973524
  %172 = xor i64 %169, %163
  %173 = xor i64 %172, %171
  %174 = xor i64 %173, %167
  %175 = xor i64 %174, %164
  %176 = xor i64 %175, 7520951000767773358
  %177 = xor i64 %176, %153
  %178 = mul i64 %152, %177
  %179 = trunc i64 %178 to i32
  %180 = sub i32 %140, %179
  %181 = add i32 76, 107
  %182 = sdiv i32 104, 54
  %183 = mul i32 8, 68
  %184 = mul i32 99, 112
  %185 = sext i32 %dispatcher1 to i64
  %186 = or i64 %185, -6791917150083285467
  %187 = and i64 -6791917150083285467, %185
  %188 = xor i64 -6791917150083285467, %185
  %189 = or i64 %187, %188
  %190 = or i64 %13, -6045308874871511811
  %191 = xor i64 %13, -1
  %192 = and i64 -6045308874871511811, %191
  %193 = add i64 %192, %13
  %194 = xor i64 %186, 1683732537372400771
  %195 = xor i64 %194, %190
  %196 = xor i64 %195, %189
  %197 = xor i64 %196, %193
  %198 = or i64 %7, 7133662360847769932
  %199 = and i64 7133662360847769932, %7
  %200 = xor i64 7133662360847769932, %7
  %201 = or i64 %199, %200
  %202 = sext i32 %dispatcher1 to i64
  %203 = or i64 %202, -2142027265257342911
  %204 = xor i64 %202, -1
  %205 = and i64 %204, 6723127580351219890
  %206 = and i64 %202, -6723127580351219891
  %207 = or i64 %205, %206
  %208 = xor i64 -4681309959486099213, %207
  %209 = xor i64 %202, -1
  %210 = or i64 2142027265257342910, %209
  %211 = xor i64 %210, -1
  %212 = and i64 %211, -1
  %213 = or i64 %208, %212
  %214 = or i64 %5, 4235129155684470987
  %215 = xor i64 %5, -1
  %216 = and i64 4235129155684470987, %215
  %217 = add i64 %216, %5
  %218 = xor i64 7790299427859286188, %214
  %219 = xor i64 %218, %203
  %220 = xor i64 %219, %217
  %221 = xor i64 %220, %201
  %222 = xor i64 %221, %213
  %223 = xor i64 %222, %198
  %224 = mul i64 %197, %223
  %225 = trunc i64 %224 to i32
  %226 = sdiv i32 %225, 126
  %227 = sdiv i32 79, 27
  %228 = add i64 %11, -6091050971706560977
  %229 = xor i64 -6091050971706560977, %11
  %230 = and i64 -6091050971706560977, %11
  %231 = mul i64 2, %230
  %232 = add i64 %229, %231
  %233 = sext i32 %dispatcher1 to i64
  %234 = or i64 %233, -5600152603823670240
  %235 = xor i64 %233, -1
  %236 = and i64 %235, -7103564013386884704
  %237 = and i64 %233, 7103564013386884703
  %238 = or i64 %236, %237
  %239 = xor i64 3396647373417473408, %238
  %240 = xor i64 %233, -1
  %241 = or i64 5600152603823670239, %240
  %242 = xor i64 %241, -1
  %243 = and i64 %242, -1
  %244 = or i64 %239, %243
  %245 = and i64 %5, -5802908099819347371
  %246 = xor i64 %5, -1
  %247 = xor i64 -5802908099819347371, %246
  %248 = and i64 %247, -5802908099819347371
  %249 = xor i64 %245, %248
  %250 = xor i64 %249, %228
  %251 = xor i64 %250, %232
  %252 = xor i64 %251, 5373403107340878719
  %253 = xor i64 %252, %244
  %254 = xor i64 %253, %234
  %255 = and i64 %1, -5037318269264501966
  %256 = xor i64 %1, -1
  %257 = xor i64 -5037318269264501966, %256
  %258 = and i64 %257, -5037318269264501966
  %259 = sext i32 %dispatcher1 to i64
  %260 = and i64 %259, 2644714271249867007
  %261 = xor i64 %259, -1
  %262 = xor i64 2644714271249867007, %261
  %263 = and i64 %262, 2644714271249867007
  %264 = sext i32 %dispatcher1 to i64
  %265 = and i64 %264, 2572149208141680243
  %266 = xor i64 %264, -1
  %267 = xor i64 2572149208141680243, %266
  %268 = and i64 %267, 2572149208141680243
  %269 = xor i64 %268, %265
  %270 = xor i64 %269, %263
  %271 = xor i64 %270, %255
  %272 = xor i64 %271, -2993644344889223399
  %273 = xor i64 %272, %260
  %274 = xor i64 %273, %258
  %275 = mul i64 %254, %274
  %276 = trunc i64 %275 to i32
  %277 = add i64 %7, -524590090856952639
  %278 = add i64 -7478510573854212568, %7
  %279 = sub i64 %278, -6953920482997259929
  %280 = or i64 %3, -303819046470715624
  %281 = and i64 -303819046470715624, %3
  %282 = xor i64 -303819046470715624, %3
  %283 = or i64 %281, %282
  %284 = or i64 %1, 2668335730178979645
  %285 = xor i64 %1, -1
  %286 = and i64 2668335730178979645, %285
  %287 = add i64 %286, %1
  %288 = xor i64 %283, %284
  %289 = xor i64 %288, %279
  %290 = xor i64 %289, %287
  %291 = xor i64 %290, %277
  %292 = xor i64 %291, %280
  %293 = xor i64 %292, 7036149762520107151
  %294 = and i64 %5, 4582355275533949245
  %295 = xor i64 %5, -1
  %296 = xor i64 4582355275533949245, %295
  %297 = and i64 %296, 4582355275533949245
  %298 = sext i32 %dispatcher1 to i64
  %299 = or i64 %298, -27492823652857000
  %300 = xor i64 %298, -1
  %301 = and i64 %300, -2390628681538948448
  %302 = and i64 %298, 2390628681538948447
  %303 = or i64 %301, %302
  %304 = xor i64 2399456036861655544, %303
  %305 = xor i64 %298, -1
  %306 = or i64 27492823652856999, %305
  %307 = xor i64 %306, -1
  %308 = and i64 %307, -1
  %309 = or i64 %304, %308
  %310 = add i64 %13, 4876231849478541818
  %311 = sub i64 0, %13
  %312 = sub i64 4876231849478541818, %311
  %313 = xor i64 %310, %299
  %314 = xor i64 %313, 2629713194496863454
  %315 = xor i64 %314, %297
  %316 = xor i64 %315, %294
  %317 = xor i64 %316, %309
  %318 = xor i64 %317, %312
  %319 = mul i64 %293, %318
  %320 = trunc i64 %319 to i32
  %321 = sdiv i32 %276, %320
  %322 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %323 = load i32, i32* %322, align 4
  %324 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %325 = load i32, i32* %324, align 4
  %326 = add i32 %323, %325
  store i32 %326, i32* %dispatcher, align 4
  %327 = load i8*, i8** %6, align 8
  %328 = load i8, i8* %327, align 1
  %329 = mul i8 %328, 2
  %330 = mul i8 %328, 2
  %331 = add i8 2, %330
  %332 = mul i8 %329, %331
  %333 = srem i8 %332, 4
  %334 = icmp eq i8 %333, 0
  %335 = mul i8 %328, %328
  %336 = mul i8 %335, %328
  %337 = xor i8 %336, %328
  %338 = and i8 %336, %328
  %339 = or i64 %1, -7567833625607114417
  %340 = xor i64 %1, -1
  %341 = and i64 -7567833625607114417, %340
  %342 = add i64 %341, %1
  %343 = and i64 %5, -8615087543205891391
  %344 = xor i64 %5, -1
  %345 = or i64 8615087543205891390, %344
  %346 = xor i64 %345, -1
  %347 = and i64 %346, -1
  %348 = and i64 %3, 5563877996727378124
  %349 = or i64 -5563877996727378125, %3
  %350 = sub i64 %349, -5563877996727378125
  %351 = xor i64 1287283082738595599, %350
  %352 = xor i64 %351, %342
  %353 = xor i64 %352, %339
  %354 = xor i64 %353, %348
  %355 = xor i64 %354, %343
  %356 = xor i64 %355, %347
  %357 = add i64 %11, -1358129518129217355
  %358 = add i64 -4837879099861893339, %11
  %359 = add i64 %358, 3479749581732675984
  %360 = add i64 %11, -3424826265666954308
  %361 = sub i64 0, %11
  %362 = add i64 3424826265666954308, %361
  %363 = sub i64 0, %362
  %364 = and i64 %9, -1730133889131233958
  %365 = xor i64 %9, -1
  %366 = xor i64 -1730133889131233958, %365
  %367 = and i64 %366, -1730133889131233958
  %368 = xor i64 %367, %363
  %369 = xor i64 %368, %357
  %370 = xor i64 %369, %364
  %371 = xor i64 %370, %359
  %372 = xor i64 %371, %360
  %373 = xor i64 %372, 6091906592206368734
  %374 = mul i64 %356, %373
  %375 = trunc i64 %374 to i8
  %376 = mul i8 %375, %338
  %377 = add i8 %337, %376
  %378 = srem i8 %377, 2
  %379 = icmp eq i8 %378, 0
  %380 = and i1 %334, %379
  %381 = select i1 %380, i32 388314532, i32 388314463
  %382 = xor i32 %381, 251
  store i32 %382, i32* %0, align 4
  %383 = call i8** @bf3325468485390379012(i32* %0)
  %384 = load i8*, i8** %383, align 8
  indirectbr i8* %384, [label %loopEnd, label %103]

.exitStub.exitStub:                               ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %385 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %386 = or i64 %7, -3788091788462309960
  %387 = xor i64 %7, -1
  %388 = and i64 %387, -284321362648646594
  %389 = and i64 %7, 284321362648646593
  %390 = or i64 %388, %389
  %391 = xor i64 3990221896794014086, %390
  %392 = xor i64 %7, -1
  %393 = or i64 3788091788462309959, %392
  %394 = xor i64 %393, -1
  %395 = and i64 %394, -1
  %396 = or i64 %391, %395
  %397 = add i64 %5, -7213822490193461815
  %398 = sub i64 0, %5
  %399 = sub i64 -7213822490193461815, %398
  %400 = xor i64 %396, 2937037755668403805
  %401 = xor i64 %400, %399
  %402 = xor i64 %401, %397
  %403 = xor i64 %402, %386
  %404 = and i64 %7, -217193751369466821
  %405 = xor i64 %7, -1
  %406 = or i64 217193751369466820, %405
  %407 = xor i64 %406, -1
  %408 = and i64 %407, -1
  %409 = and i64 %13, -870075231129244539
  %410 = xor i64 %13, -1
  %411 = or i64 870075231129244538, %410
  %412 = xor i64 %411, -1
  %413 = and i64 %412, -1
  %414 = xor i64 %408, %413
  %415 = xor i64 %414, 8198027485496545803
  %416 = xor i64 %415, %404
  %417 = xor i64 %416, %409
  %418 = mul i64 %403, %417
  %419 = trunc i64 %418 to i32
  store i32 %419, i32* %385, align 4
  %420 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %420, align 4
  %421 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %421, align 4
  %422 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %422, align 4
  %423 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %424 = load i32, i32* %423, align 4
  store i32 %424, i32* %dispatcher, align 4
  %425 = load i8*, i8** %4, align 8
  %426 = load i8, i8* %425, align 1
  %427 = xor i8 %426, -2
  %428 = and i8 %427, %426
  %429 = icmp eq i8 %428, 1
  %430 = mul i8 %426, %426
  %431 = sub i8 0, %430
  %432 = sub i8 0, %426
  %433 = add i8 %431, %432
  %434 = sub i8 0, %433
  %435 = srem i8 %434, 2
  %436 = icmp eq i8 %435, 0
  %437 = xor i1 %436, true
  %438 = and i1 %429, %437
  %439 = add i1 %438, %436
  %440 = select i1 %439, i32 388314472, i32 388314535
  %441 = xor i32 %440, 207
  store i32 %441, i32* %0, align 4
  %442 = call i8** @bf3325468485390379012(i32* %0)
  %443 = load i8*, i8** %442, align 8
  indirectbr i8* %443, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %444 = load i8*, i8** %8, align 8
  %445 = load i8, i8* %444, align 1
  %446 = mul i8 %445, %445
  %447 = add i8 %446, %445
  %448 = mul i8 %447, 3
  %449 = srem i8 %448, 2
  %450 = icmp eq i8 %449, 0
  %451 = mul i8 %445, %445
  %452 = add i8 %451, %445
  %453 = srem i8 %452, 2
  %454 = icmp eq i8 %453, 0
  %455 = and i1 %450, %454
  %456 = select i1 %455, i32 388314433, i32 388314463
  %457 = xor i32 %456, 30
  store i32 %457, i32* %0, align 4
  %458 = call i8** @bf3325468485390379012(i32* %0)
  %459 = load i8*, i8** %458, align 8
  indirectbr i8* %459, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %103, %EntryBasicBlockSplit
  %460 = load i8*, i8** %2, align 8
  %461 = load i8, i8* %460, align 1
  %462 = xor i8 %461, -1
  %463 = or i8 %462, 1
  %464 = xor i8 %461, -1
  %465 = sub i8 %463, %464
  %466 = icmp eq i8 %465, 1
  %467 = mul i8 %461, %461
  %468 = add i8 %467, %461
  %469 = srem i8 %468, 2
  %470 = icmp eq i8 %469, 0
  %471 = or i1 %466, %470
  %472 = select i1 %471, i32 388314432, i32 388314532
  %473 = xor i32 %472, -1
  %474 = and i32 %473, -1419724625
  %475 = add i64 %3, -1596490277178383362
  %476 = and i64 -1596490277178383362, %3
  %477 = or i64 -1596490277178383362, %3
  %478 = add i64 %476, %477
  %479 = add i64 %5, -8027586516187976096
  %480 = xor i64 -8027586516187976096, %5
  %481 = and i64 -8027586516187976096, %5
  %482 = mul i64 2, %481
  %483 = add i64 %480, %482
  %484 = and i64 %7, -4925119062307393827
  %485 = xor i64 %7, -1
  %486 = or i64 4925119062307393826, %485
  %487 = xor i64 %486, -1
  %488 = and i64 %487, -1
  %489 = xor i64 %483, %484
  %490 = xor i64 %489, %478
  %491 = xor i64 %490, %475
  %492 = xor i64 %491, 2556818515934910595
  %493 = xor i64 %492, %479
  %494 = xor i64 %493, %488
  %495 = and i64 %3, 6624766664329444322
  %496 = xor i64 %3, -1
  %497 = xor i64 6624766664329444322, %496
  %498 = and i64 %497, 6624766664329444322
  %499 = and i64 %7, -2119071870032673789
  %500 = or i64 2119071870032673788, %7
  %501 = sub i64 %500, 2119071870032673788
  %502 = add i64 %7, -1870300964507558125
  %503 = xor i64 -1870300964507558125, %7
  %504 = and i64 -1870300964507558125, %7
  %505 = mul i64 2, %504
  %506 = add i64 %503, %505
  %507 = xor i64 %506, %502
  %508 = xor i64 %507, %498
  %509 = xor i64 %508, %499
  %510 = xor i64 %509, %501
  %511 = xor i64 %510, 4014551389062027888
  %512 = xor i64 %511, %495
  %513 = mul i64 %494, %512
  %514 = trunc i64 %513 to i32
  %515 = and i32 %472, %514
  %516 = or i32 %474, %515
  %517 = xor i32 %516, -1419724725
  store i32 %517, i32* %0, align 4
  %518 = call i8** @bf3325468485390379012(i32* %0)
  %519 = load i8*, i8** %518, align 8
  indirectbr i8* %519, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline
define internal i64 @m1252811912226950246(i64 %0) #11 {
  %2 = alloca i32, align 4
  %3 = xor i64 5221456193252566390, %0
  ret i64 %3
}

; Function Attrs: noinline
define internal i8** @lk2767572233068462473(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13048473401921955443, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk14494699875176641526(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable7987223763381538795, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk16598722153887272892(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6948690881598386563(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk13323888900026137679(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsfuncAddrLookupTable1521269245271593286, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk16790370311123254137(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10964148096910173402, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk3314813992465304394(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk4907322943909632039(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7248833348834779914, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2403458854773074703(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7736042078782182294, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk6662349738094152229(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3207960230964856142, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk12173744047017897499(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2764332446207538526, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk1658832481597702668(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7838084727187403814, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk13448550276454727271(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14996539064837633190, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15166206071384713796(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9558371708905704725, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk8130767998500730990(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8137076287989836104, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk4007318037496837210(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5534904613522678169, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15299938733457504333(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable15401568588136411344, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk14929367933546861456(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7517529135013047173, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk2816797058128718436(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable11921367710597738247, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk1690363737598974996(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable13175363040677724041, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk5435521538028724680(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1382216898532583501, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15850847998754508100(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable15833730315419083368, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk16272290410439088112(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable17288531702685132446, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk15203494314922396868(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9376634603898858042, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk3833332668859376412(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13215117349962675226, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk1295327301961651399(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13284784893890992073, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk253955913984065474(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2996394070652152791, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk7540327179399209711(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2277199937449041614, i32 0, i64 %4
  ret i8** %5
}

; Function Attrs: noinline
define internal i8** @lk10004858638100200575(i64* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = call i64 @m1252811912226950246(i64 %3)
  %5 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6119868860763007404, i32 0, i64 %4
  ret i8** %5
}

define internal void @"5784248439022692321"(i32 %0, i64* %1, i8*** %2, i64* %3, i8*** %4, i64* %5, i8*** %6, i64* %7, i8*** %8, i1 %9, i1 %10, i1 %11, i1* %12, i1* %13, i1* %14, i64* %15, i8*** %16, i32 %17, i32 %18, i1* %19, i1* %20, i32 %21, i1* %22, i32 %23, i1* %24, i64* %25, i8*** %26, i64* %27, i8*** %28, i64 %29, i64* %30, i1 %31, i1* %32, float %33, float* %34, float* %35, i8* %36, float* %37, i32 %38, i32* %39, i1* %40, i1* %41, i64* %42, i8*** %43, i32 %44, i32 %45, i32* %46, i64* %47, float* %48, float** %49, float %50, i1* %51, i32 %52, i32 %53, i32* %54, i1* %55, i64* %56, i8*** %57, i32 %58, i32 %59, i1* %60, i1* %61, i32 %62, i32 %63, i1* %64, i1* %65, i32 %66, i32 %67, i1* %68, i1* %69, i64 %70, i64* %71, i64* %72, i1 %73, i1* %74, float %75, float* %76, float* %77, i8* %78, float* %79, i32* %80, i32 %81, i32 %82, i1* %83, i1* %84, i64* %85, i8*** %86, i8* %87, i64 %88, i1* %89, i1* %90, i64* %91, i8*** %92, float* %93, float* %94, i1* %95, i64 %96, i32* %97, i1* %98, i8* %99, i64 %100, i64 %101, i8* %102, i64* %103, i64* %104, i64* %105, i64* %106, i1* %107, i64 %108, i1* %109, i64* %110, i8*** %111, i8 %112, i64 %113, i64 %114, i64 %115, i32* %116, i64* %117, i1* %118, i1* %119, i1* %120) #12 {
entry:
  %121 = alloca i32, align 4
  %122 = call i64 @h9549842938191327224(i64 388314443)
  %123 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %122
  store i8* blockaddress(@"5784248439022692321", %.exitStub4), i8** %123, align 8
  %124 = call i64 @h9549842938191327224(i64 388314494)
  %125 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %124
  store i8* blockaddress(@"5784248439022692321", %"144"), i8** %125, align 8
  %126 = or i64 %88, 7912002420811047170
  %127 = xor i64 %88, -1
  %128 = and i64 %127, -3688920297949754418
  %129 = and i64 %88, 3688920297949754417
  %130 = or i64 %128, %129
  %131 = xor i64 -6844549215649846580, %130
  %132 = xor i64 %88, -1
  %133 = or i64 -7912002420811047171, %132
  %134 = xor i64 %133, -1
  %135 = and i64 %134, -1
  %136 = or i64 %131, %135
  %137 = or i64 %114, -5098483955829368769
  %138 = xor i64 %114, -1
  %139 = and i64 %138, -8281461077784914958
  %140 = and i64 %114, 8281461077784914957
  %141 = or i64 %139, %140
  %142 = xor i64 3759622627382725581, %141
  %143 = xor i64 %114, -1
  %144 = or i64 5098483955829368768, %143
  %145 = xor i64 %144, -1
  %146 = and i64 %145, -1
  %147 = or i64 %142, %146
  %148 = sext i32 %67 to i64
  %149 = and i64 %148, 1507320999004711872
  %150 = xor i64 %148, -1
  %151 = or i64 -1507320999004711873, %150
  %152 = xor i64 %151, -1
  %153 = and i64 %152, -1
  %154 = xor i64 %149, 8534281871669652537
  %155 = xor i64 %154, %136
  %156 = xor i64 %155, %153
  %157 = xor i64 %156, %137
  %158 = xor i64 %157, %126
  %159 = xor i64 %158, %147
  %160 = sext i32 %38 to i64
  %161 = add i64 %160, 7720551556170891338
  %162 = and i64 7720551556170891338, %160
  %163 = or i64 7720551556170891338, %160
  %164 = add i64 %162, %163
  %165 = or i64 %88, -8904851642882105613
  %166 = and i64 -8904851642882105613, %88
  %167 = xor i64 -8904851642882105613, %88
  %168 = or i64 %166, %167
  %169 = xor i64 %161, -6294712365739712238
  %170 = xor i64 %169, %168
  %171 = xor i64 %170, %165
  %172 = xor i64 %171, %164
  %173 = mul i64 %159, %172
  %174 = call i64 @h9549842938191327224(i64 %173)
  %175 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %174
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot52), i8** %175, align 8
  %176 = sext i32 %38 to i64
  %177 = and i64 %176, 6786024609285492294
  %178 = or i64 -6786024609285492295, %176
  %179 = sub i64 %178, -6786024609285492295
  %180 = add i64 %101, -7617652208765563508
  %181 = and i64 -7617652208765563508, %101
  %182 = or i64 -7617652208765563508, %101
  %183 = add i64 %181, %182
  %184 = sext i32 %82 to i64
  %185 = or i64 %184, -4510541121203107149
  %186 = and i64 -4510541121203107149, %184
  %187 = xor i64 -4510541121203107149, %184
  %188 = or i64 %186, %187
  %189 = xor i64 %180, %177
  %190 = xor i64 %189, %188
  %191 = xor i64 %190, %183
  %192 = xor i64 %191, %179
  %193 = xor i64 %192, -3030042446345266717
  %194 = xor i64 %193, %185
  %195 = sext i32 %44 to i64
  %196 = add i64 %195, 566341434572342687
  %197 = and i64 566341434572342687, %195
  %198 = or i64 566341434572342687, %195
  %199 = add i64 %197, %198
  %200 = sext i32 %53 to i64
  %201 = and i64 %200, 3568285719760807517
  %202 = xor i64 %200, -1
  %203 = or i64 -3568285719760807518, %202
  %204 = xor i64 %203, -1
  %205 = and i64 %204, -1
  %206 = xor i64 %201, -8631311109188770828
  %207 = xor i64 %206, %205
  %208 = xor i64 %207, %196
  %209 = xor i64 %208, %199
  %210 = mul i64 %194, %209
  %211 = call i64 @h9549842938191327224(i64 %210)
  %212 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %211
  store i8* blockaddress(@"5784248439022692321", %"142"), i8** %212, align 8
  %213 = sext i32 %63 to i64
  %214 = or i64 %213, 2428613053739347588
  %215 = xor i64 %213, -1
  %216 = and i64 2428613053739347588, %215
  %217 = add i64 %216, %213
  %218 = or i64 %101, 1554899120265605986
  %219 = xor i64 %101, -1
  %220 = and i64 %219, -8013755915850129954
  %221 = and i64 %101, 8013755915850129953
  %222 = or i64 %220, %221
  %223 = xor i64 -8836774991158645060, %222
  %224 = xor i64 %101, -1
  %225 = or i64 -1554899120265605987, %224
  %226 = xor i64 %225, -1
  %227 = and i64 %226, -1
  %228 = or i64 %223, %227
  %229 = xor i64 %214, %217
  %230 = xor i64 %229, 2811229773298633
  %231 = xor i64 %230, %228
  %232 = xor i64 %231, %218
  %233 = sext i32 %59 to i64
  %234 = add i64 %233, 2263372682800752610
  %235 = add i64 -7681691828055966816, %233
  %236 = add i64 %235, -8501679562852832190
  %237 = sext i32 %63 to i64
  %238 = or i64 %237, -6813309046641517851
  %239 = and i64 -6813309046641517851, %237
  %240 = xor i64 -6813309046641517851, %237
  %241 = or i64 %239, %240
  %242 = xor i64 %238, %234
  %243 = xor i64 %242, %236
  %244 = xor i64 %243, 400246400121328989
  %245 = xor i64 %244, %241
  %246 = mul i64 %232, %245
  %247 = call i64 @h9549842938191327224(i64 %246)
  %248 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %247
  store i8* blockaddress(@"5784248439022692321", %.exitStub151), i8** %248, align 8
  %249 = call i64 @h9549842938191327224(i64 388314421)
  %250 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %249
  store i8* blockaddress(@"5784248439022692321", %"134"), i8** %250, align 8
  %251 = call i64 @h9549842938191327224(i64 388314395)
  %252 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %251
  store i8* blockaddress(@"5784248439022692321", %.exitStub55), i8** %252, align 8
  %253 = add i64 %113, -8925070868432384623
  %254 = xor i64 -8925070868432384623, %113
  %255 = and i64 -8925070868432384623, %113
  %256 = mul i64 2, %255
  %257 = add i64 %254, %256
  %258 = sext i32 %38 to i64
  %259 = add i64 %258, -4047945458496622814
  %260 = and i64 -4047945458496622814, %258
  %261 = or i64 -4047945458496622814, %258
  %262 = add i64 %260, %261
  %263 = sext i32 %52 to i64
  %264 = add i64 %263, 6521482117713115502
  %265 = and i64 6521482117713115502, %263
  %266 = or i64 6521482117713115502, %263
  %267 = add i64 %265, %266
  %268 = xor i64 %267, %257
  %269 = xor i64 %268, %259
  %270 = xor i64 %269, %253
  %271 = xor i64 %270, -2063453864107703925
  %272 = xor i64 %271, %262
  %273 = xor i64 %272, %264
  %274 = sext i32 %67 to i64
  %275 = add i64 %274, 5832025581415197340
  %276 = xor i64 5832025581415197340, %274
  %277 = and i64 5832025581415197340, %274
  %278 = mul i64 2, %277
  %279 = add i64 %276, %278
  %280 = sext i32 %81 to i64
  %281 = or i64 %280, 8650411508187251930
  %282 = and i64 8650411508187251930, %280
  %283 = xor i64 8650411508187251930, %280
  %284 = or i64 %282, %283
  %285 = xor i64 -4641454271674963389, %284
  %286 = xor i64 %285, %281
  %287 = xor i64 %286, %279
  %288 = xor i64 %287, %275
  %289 = mul i64 %273, %288
  %290 = call i64 @h9549842938191327224(i64 %289)
  %291 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %290
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot45), i8** %291, align 8
  %292 = call i64 @h9549842938191327224(i64 388314531)
  %293 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %292
  store i8* blockaddress(@"5784248439022692321", %.exitStub144), i8** %293, align 8
  %294 = and i64 %100, 876404428203295933
  %295 = xor i64 %100, -1
  %296 = or i64 -876404428203295934, %295
  %297 = xor i64 %296, -1
  %298 = and i64 %297, -1
  %299 = and i64 %113, 6150882885549131296
  %300 = xor i64 %113, -1
  %301 = xor i64 6150882885549131296, %300
  %302 = and i64 %301, 6150882885549131296
  %303 = sext i32 %38 to i64
  %304 = add i64 %303, 3791898321258053997
  %305 = add i64 5534567916658292501, %303
  %306 = sub i64 %305, 1742669595400238504
  %307 = xor i64 %298, %302
  %308 = xor i64 %307, -7492755714011183955
  %309 = xor i64 %308, %306
  %310 = xor i64 %309, %304
  %311 = xor i64 %310, %299
  %312 = xor i64 %311, %294
  %313 = sext i32 %45 to i64
  %314 = add i64 %313, -6937352092571498863
  %315 = sub i64 0, %313
  %316 = add i64 6937352092571498863, %315
  %317 = sub i64 0, %316
  %318 = sext i32 %58 to i64
  %319 = and i64 %318, -1111708710460975482
  %320 = xor i64 %318, -1
  %321 = xor i64 -1111708710460975482, %320
  %322 = and i64 %321, -1111708710460975482
  %323 = and i64 %70, -1540754129401424939
  %324 = xor i64 %70, -1
  %325 = or i64 1540754129401424938, %324
  %326 = xor i64 %325, -1
  %327 = and i64 %326, -1
  %328 = xor i64 %327, %317
  %329 = xor i64 %328, %322
  %330 = xor i64 %329, %319
  %331 = xor i64 %330, 6642520737853790755
  %332 = xor i64 %331, %314
  %333 = xor i64 %332, %323
  %334 = mul i64 %312, %333
  %335 = call i64 @h9549842938191327224(i64 %334)
  %336 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %335
  store i8* blockaddress(@"5784248439022692321", %.exitStub5), i8** %336, align 8
  %337 = call i64 @h9549842938191327224(i64 388314467)
  %338 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %337
  store i8* blockaddress(@"5784248439022692321", %.split42), i8** %338, align 8
  %339 = call i64 @h9549842938191327224(i64 388314458)
  %340 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %339
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot41), i8** %340, align 8
  %341 = call i64 @h9549842938191327224(i64 388314439)
  %342 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %341
  store i8* blockaddress(@"5784248439022692321", %.exitStub39), i8** %342, align 8
  %343 = call i64 @h9549842938191327224(i64 388314455)
  %344 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %343
  store i8* blockaddress(@"5784248439022692321", %.split38), i8** %344, align 8
  %345 = sext i8 %112 to i64
  %346 = or i64 %345, 7275695794941608622
  %347 = xor i64 %345, -1
  %348 = and i64 %347, -4910573185094580572
  %349 = and i64 %345, 4910573185094580571
  %350 = or i64 %348, %349
  %351 = xor i64 -2368236504088755190, %350
  %352 = xor i64 %345, -1
  %353 = or i64 -7275695794941608623, %352
  %354 = xor i64 %353, -1
  %355 = and i64 %354, -1
  %356 = or i64 %351, %355
  %357 = sext i32 %0 to i64
  %358 = or i64 %357, -612648465159944239
  %359 = xor i64 %357, -1
  %360 = and i64 %359, 4183013747932296052
  %361 = and i64 %357, -4183013747932296053
  %362 = or i64 %360, %361
  %363 = xor i64 -3642739606020918107, %362
  %364 = xor i64 %357, -1
  %365 = or i64 612648465159944238, %364
  %366 = xor i64 %365, -1
  %367 = and i64 %366, -1
  %368 = or i64 %363, %367
  %369 = xor i64 %356, -625973854499952295
  %370 = xor i64 %369, %358
  %371 = xor i64 %370, %368
  %372 = xor i64 %371, %346
  %373 = add i64 %101, 5858884692714446304
  %374 = xor i64 5858884692714446304, %101
  %375 = and i64 5858884692714446304, %101
  %376 = mul i64 2, %375
  %377 = add i64 %374, %376
  %378 = or i64 %88, -1881312718003190141
  %379 = xor i64 %88, -1
  %380 = and i64 %379, -7218932596714036505
  %381 = and i64 %88, 7218932596714036504
  %382 = or i64 %380, %381
  %383 = xor i64 9094191523551110244, %382
  %384 = xor i64 %88, -1
  %385 = or i64 1881312718003190140, %384
  %386 = xor i64 %385, -1
  %387 = and i64 %386, -1
  %388 = or i64 %383, %387
  %389 = sext i32 %62 to i64
  %390 = or i64 %389, 1077149311017403674
  %391 = and i64 1077149311017403674, %389
  %392 = xor i64 1077149311017403674, %389
  %393 = or i64 %391, %392
  %394 = xor i64 %377, %393
  %395 = xor i64 %394, %388
  %396 = xor i64 %395, %373
  %397 = xor i64 %396, %390
  %398 = xor i64 %397, %378
  %399 = xor i64 %398, 7557803966527588285
  %400 = mul i64 %372, %399
  %401 = call i64 @h9549842938191327224(i64 %400)
  %402 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %401
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot37), i8** %402, align 8
  %403 = sext i32 %59 to i64
  %404 = add i64 %403, 5770023969542840061
  %405 = sub i64 0, %403
  %406 = sub i64 5770023969542840061, %405
  %407 = add i64 %108, 6296286013532869956
  %408 = add i64 -5712719656842406385, %108
  %409 = sub i64 %408, 6437738403334275275
  %410 = xor i64 %404, %409
  %411 = xor i64 %410, %406
  %412 = xor i64 %411, %407
  %413 = xor i64 %412, -5601869425704811575
  %414 = sext i32 %81 to i64
  %415 = or i64 %414, 4273899507759659527
  %416 = and i64 4273899507759659527, %414
  %417 = xor i64 4273899507759659527, %414
  %418 = or i64 %416, %417
  %419 = sext i32 %53 to i64
  %420 = and i64 %419, 7248465031568639640
  %421 = xor i64 %419, -1
  %422 = or i64 -7248465031568639641, %421
  %423 = xor i64 %422, -1
  %424 = and i64 %423, -1
  %425 = or i64 %115, -9120739588224388901
  %426 = xor i64 %115, -1
  %427 = and i64 -9120739588224388901, %426
  %428 = add i64 %427, %115
  %429 = xor i64 %424, %418
  %430 = xor i64 %429, %425
  %431 = xor i64 %430, -7745500693344651011
  %432 = xor i64 %431, %420
  %433 = xor i64 %432, %415
  %434 = xor i64 %433, %428
  %435 = mul i64 %413, %434
  %436 = call i64 @h9549842938191327224(i64 %435)
  %437 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %436
  store i8* blockaddress(@"5784248439022692321", %"124"), i8** %437, align 8
  %438 = call i64 @h9549842938191327224(i64 388314427)
  %439 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %438
  store i8* blockaddress(@"5784248439022692321", %.exitStub48), i8** %439, align 8
  %440 = call i64 @h9549842938191327224(i64 388314405)
  %441 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %440
  store i8* blockaddress(@"5784248439022692321", %.exitStub35), i8** %441, align 8
  %442 = call i64 @h9549842938191327224(i64 388314545)
  %443 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %442
  store i8* blockaddress(@"5784248439022692321", %"139"), i8** %443, align 8
  %444 = call i64 @h9549842938191327224(i64 388314459)
  %445 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %444
  store i8* blockaddress(@"5784248439022692321", %.exitStub43), i8** %445, align 8
  %446 = sext i32 %58 to i64
  %447 = add i64 %446, 6335732807131826985
  %448 = sub i64 0, %446
  %449 = add i64 -6335732807131826985, %448
  %450 = sub i64 0, %449
  %451 = sext i32 %18 to i64
  %452 = and i64 %451, 7807620968423074244
  %453 = xor i64 %451, -1
  %454 = xor i64 7807620968423074244, %453
  %455 = and i64 %454, 7807620968423074244
  %456 = add i64 %101, 10069125064418196
  %457 = sub i64 0, %101
  %458 = add i64 -10069125064418196, %457
  %459 = sub i64 0, %458
  %460 = xor i64 5193463462436715645, %459
  %461 = xor i64 %460, %456
  %462 = xor i64 %461, %452
  %463 = xor i64 %462, %450
  %464 = xor i64 %463, %447
  %465 = xor i64 %464, %455
  %466 = and i64 %114, 929993160986469368
  %467 = xor i64 %114, -1
  %468 = or i64 -929993160986469369, %467
  %469 = xor i64 %468, -1
  %470 = and i64 %469, -1
  %471 = sext i32 %82 to i64
  %472 = add i64 %471, -1089776958378616350
  %473 = add i64 -328708707167326585, %471
  %474 = add i64 %473, -761068251211289765
  %475 = xor i64 %474, %470
  %476 = xor i64 %475, %466
  %477 = xor i64 %476, 2464511069078006385
  %478 = xor i64 %477, %472
  %479 = mul i64 %465, %478
  %480 = call i64 @h9549842938191327224(i64 %479)
  %481 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %480
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot34), i8** %481, align 8
  %482 = call i64 @h9549842938191327224(i64 388314401)
  %483 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %482
  store i8* blockaddress(@"5784248439022692321", %.exitStub133), i8** %483, align 8
  %484 = call i64 @h9549842938191327224(i64 388314431)
  %485 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %484
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot29), i8** %485, align 8
  %486 = call i64 @h9549842938191327224(i64 388314476)
  %487 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %486
  store i8* blockaddress(@"5784248439022692321", %"113"), i8** %487, align 8
  %488 = call i64 @h9549842938191327224(i64 388314529)
  %489 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %488
  store i8* blockaddress(@"5784248439022692321", %"111"), i8** %489, align 8
  %490 = call i64 @h9549842938191327224(i64 388314393)
  %491 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %490
  store i8* blockaddress(@"5784248439022692321", %"110"), i8** %491, align 8
  %492 = call i64 @h9549842938191327224(i64 388314537)
  %493 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %492
  store i8* blockaddress(@"5784248439022692321", %"115"), i8** %493, align 8
  %494 = call i64 @h9549842938191327224(i64 388314377)
  %495 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %494
  store i8* blockaddress(@"5784248439022692321", %codeRepl86), i8** %495, align 8
  %496 = call i64 @h9549842938191327224(i64 388314426)
  %497 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %496
  store i8* blockaddress(@"5784248439022692321", %"108"), i8** %497, align 8
  %498 = call i64 @h9549842938191327224(i64 388314539)
  %499 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %498
  store i8* blockaddress(@"5784248439022692321", %"106"), i8** %499, align 8
  %500 = call i64 @h9549842938191327224(i64 388314397)
  %501 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %500
  store i8* blockaddress(@"5784248439022692321", %"103"), i8** %501, align 8
  %502 = call i64 @h9549842938191327224(i64 388314422)
  %503 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %502
  store i8* blockaddress(@"5784248439022692321", %"102"), i8** %503, align 8
  %504 = sext i8 %112 to i64
  %505 = and i64 %504, 6904132068333711248
  %506 = xor i64 %504, -1
  %507 = or i64 -6904132068333711249, %506
  %508 = xor i64 %507, -1
  %509 = and i64 %508, -1
  %510 = sext i32 %45 to i64
  %511 = or i64 %510, -5411126079769611612
  %512 = xor i64 %510, -1
  %513 = and i64 %512, -7934274090013217582
  %514 = and i64 %510, 7934274090013217581
  %515 = or i64 %513, %514
  %516 = xor i64 2667286288131415670, %515
  %517 = xor i64 %510, -1
  %518 = or i64 5411126079769611611, %517
  %519 = xor i64 %518, -1
  %520 = and i64 %519, -1
  %521 = or i64 %516, %520
  %522 = xor i64 %521, %511
  %523 = xor i64 %522, %509
  %524 = xor i64 %523, %505
  %525 = xor i64 %524, 8888773740877216041
  %526 = sext i32 %45 to i64
  %527 = add i64 %526, -882268265126226215
  %528 = add i64 -8557883266458572759, %526
  %529 = sub i64 %528, -7675615001332346544
  %530 = sext i32 %45 to i64
  %531 = add i64 %530, -2379981168494836972
  %532 = and i64 -2379981168494836972, %530
  %533 = or i64 -2379981168494836972, %530
  %534 = add i64 %532, %533
  %535 = xor i64 %534, %529
  %536 = xor i64 %535, -3518740022286956981
  %537 = xor i64 %536, %527
  %538 = xor i64 %537, %531
  %539 = mul i64 %525, %538
  %540 = call i64 @h9549842938191327224(i64 %539)
  %541 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %540
  store i8* blockaddress(@"5784248439022692321", %codeRepl15), i8** %541, align 8
  %542 = call i64 @h9549842938191327224(i64 388314416)
  %543 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %542
  store i8* blockaddress(@"5784248439022692321", %"100"), i8** %543, align 8
  %544 = sext i32 %44 to i64
  %545 = or i64 %544, 501805097074627310
  %546 = xor i64 %544, -1
  %547 = and i64 %546, 6216395558019152709
  %548 = and i64 %544, -6216395558019152710
  %549 = or i64 %547, %548
  %550 = xor i64 5815228768978020779, %549
  %551 = xor i64 %544, -1
  %552 = or i64 -501805097074627311, %551
  %553 = xor i64 %552, -1
  %554 = and i64 %553, -1
  %555 = or i64 %550, %554
  %556 = sext i32 %0 to i64
  %557 = and i64 %556, 7889870927380177280
  %558 = xor i64 %556, -1
  %559 = xor i64 7889870927380177280, %558
  %560 = and i64 %559, 7889870927380177280
  %561 = xor i64 %560, %545
  %562 = xor i64 %561, %557
  %563 = xor i64 %562, 5100957920458460269
  %564 = xor i64 %563, %555
  %565 = sext i32 %0 to i64
  %566 = add i64 %565, -7086747143694964447
  %567 = sub i64 0, %565
  %568 = add i64 7086747143694964447, %567
  %569 = sub i64 0, %568
  %570 = add i64 %115, -1015914180053855462
  %571 = xor i64 -1015914180053855462, %115
  %572 = and i64 -1015914180053855462, %115
  %573 = mul i64 2, %572
  %574 = add i64 %571, %573
  %575 = sext i32 %44 to i64
  %576 = or i64 %575, -3824487316913855970
  %577 = xor i64 %575, -1
  %578 = and i64 %577, -9012018540403124307
  %579 = and i64 %575, 9012018540403124306
  %580 = or i64 %578, %579
  %581 = xor i64 5188799806639011251, %580
  %582 = xor i64 %575, -1
  %583 = or i64 3824487316913855969, %582
  %584 = xor i64 %583, -1
  %585 = and i64 %584, -1
  %586 = or i64 %581, %585
  %587 = xor i64 %586, %570
  %588 = xor i64 %587, %574
  %589 = xor i64 %588, 7205397505848649675
  %590 = xor i64 %589, %566
  %591 = xor i64 %590, %576
  %592 = xor i64 %591, %569
  %593 = mul i64 %564, %592
  %594 = call i64 @h9549842938191327224(i64 %593)
  %595 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %594
  store i8* blockaddress(@"5784248439022692321", %"99"), i8** %595, align 8
  %596 = call i64 @h9549842938191327224(i64 388314478)
  %597 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %596
  store i8* blockaddress(@"5784248439022692321", %"98"), i8** %597, align 8
  %598 = call i64 @h9549842938191327224(i64 388314456)
  %599 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %598
  store i8* blockaddress(@"5784248439022692321", %.exitStub140), i8** %599, align 8
  %600 = call i64 @h9549842938191327224(i64 388314483)
  %601 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %600
  store i8* blockaddress(@"5784248439022692321", %"97"), i8** %601, align 8
  %602 = call i64 @h9549842938191327224(i64 388314409)
  %603 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %602
  store i8* blockaddress(@"5784248439022692321", %"96"), i8** %603, align 8
  %604 = call i64 @h9549842938191327224(i64 388314442)
  %605 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %604
  store i8* blockaddress(@"5784248439022692321", %codeRepl10), i8** %605, align 8
  %606 = call i64 @h9549842938191327224(i64 388314391)
  %607 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %606
  store i8* blockaddress(@"5784248439022692321", %"119"), i8** %607, align 8
  %608 = call i64 @h9549842938191327224(i64 388314480)
  %609 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %608
  store i8* blockaddress(@"5784248439022692321", %.exitStub8.exitStub), i8** %609, align 8
  %610 = call i64 @h9549842938191327224(i64 388314489)
  %611 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %610
  store i8* blockaddress(@"5784248439022692321", %"87"), i8** %611, align 8
  %612 = call i64 @h9549842938191327224(i64 388314436)
  %613 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %612
  store i8* blockaddress(@"5784248439022692321", %NodeBlock17), i8** %613, align 8
  %614 = call i64 @h9549842938191327224(i64 388314485)
  %615 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %614
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub24), i8** %615, align 8
  %616 = call i64 @h9549842938191327224(i64 388314418)
  %617 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %616
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub21), i8** %617, align 8
  %618 = or i64 %108, -2943872531957714782
  %619 = and i64 -2943872531957714782, %108
  %620 = xor i64 -2943872531957714782, %108
  %621 = or i64 %619, %620
  %622 = sext i32 %81 to i64
  %623 = or i64 %622, 4818599899352047873
  %624 = xor i64 %622, -1
  %625 = and i64 4818599899352047873, %624
  %626 = add i64 %625, %622
  %627 = sext i32 %58 to i64
  %628 = or i64 %627, -8651832160792253285
  %629 = xor i64 %627, -1
  %630 = and i64 -8651832160792253285, %629
  %631 = add i64 %630, %627
  %632 = xor i64 %626, %628
  %633 = xor i64 %632, %621
  %634 = xor i64 %633, -3108278434621415647
  %635 = xor i64 %634, %618
  %636 = xor i64 %635, %623
  %637 = xor i64 %636, %631
  %638 = sext i32 %45 to i64
  %639 = add i64 %638, 8203900407954043929
  %640 = sub i64 0, %638
  %641 = sub i64 8203900407954043929, %640
  %642 = sext i32 %0 to i64
  %643 = or i64 %642, 1635945360718367794
  %644 = xor i64 %642, -1
  %645 = and i64 %644, 566927891578146465
  %646 = and i64 %642, -566927891578146466
  %647 = or i64 %645, %646
  %648 = xor i64 1254861946568032915, %647
  %649 = xor i64 %642, -1
  %650 = or i64 -1635945360718367795, %649
  %651 = xor i64 %650, -1
  %652 = and i64 %651, -1
  %653 = or i64 %648, %652
  %654 = xor i64 %641, %639
  %655 = xor i64 %654, %643
  %656 = xor i64 %655, -3452355601518512823
  %657 = xor i64 %656, %653
  %658 = mul i64 %637, %657
  %659 = call i64 @h9549842938191327224(i64 %658)
  %660 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %659
  store i8* blockaddress(@"5784248439022692321", %"94"), i8** %660, align 8
  %661 = call i64 @h9549842938191327224(i64 388314445)
  %662 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %661
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub20), i8** %662, align 8
  %663 = sext i32 %18 to i64
  %664 = and i64 %663, 5708623031542021722
  %665 = xor i64 %663, -1
  %666 = xor i64 5708623031542021722, %665
  %667 = and i64 %666, 5708623031542021722
  %668 = sext i32 %45 to i64
  %669 = or i64 %668, -2965276726024907013
  %670 = xor i64 %668, -1
  %671 = and i64 %670, 5377900515381020699
  %672 = and i64 %668, -5377900515381020700
  %673 = or i64 %671, %672
  %674 = xor i64 -7171106637990568224, %673
  %675 = xor i64 %668, -1
  %676 = or i64 2965276726024907012, %675
  %677 = xor i64 %676, -1
  %678 = and i64 %677, -1
  %679 = or i64 %674, %678
  %680 = xor i64 3445534197182592155, %679
  %681 = xor i64 %680, %669
  %682 = xor i64 %681, %667
  %683 = xor i64 %682, %664
  %684 = sext i32 %18 to i64
  %685 = or i64 %684, -6677042649222749691
  %686 = xor i64 %684, -1
  %687 = and i64 %686, 6281647440394017014
  %688 = and i64 %684, -6281647440394017015
  %689 = or i64 %687, %688
  %690 = xor i64 -830206017741735181, %689
  %691 = xor i64 %684, -1
  %692 = or i64 6677042649222749690, %691
  %693 = xor i64 %692, -1
  %694 = and i64 %693, -1
  %695 = or i64 %690, %694
  %696 = add i64 %108, 1408609561099523507
  %697 = sub i64 0, %108
  %698 = add i64 -1408609561099523507, %697
  %699 = sub i64 0, %698
  %700 = sext i8 %112 to i64
  %701 = and i64 %700, 3908555716963904037
  %702 = xor i64 %700, -1
  %703 = or i64 -3908555716963904038, %702
  %704 = xor i64 %703, -1
  %705 = and i64 %704, -1
  %706 = xor i64 %696, %685
  %707 = xor i64 %706, %701
  %708 = xor i64 %707, %695
  %709 = xor i64 %708, -6461472109554065921
  %710 = xor i64 %709, %699
  %711 = xor i64 %710, %705
  %712 = mul i64 %683, %711
  %713 = call i64 @h9549842938191327224(i64 %712)
  %714 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %713
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot19), i8** %714, align 8
  %715 = call i64 @h9549842938191327224(i64 388314471)
  %716 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %715
  store i8* blockaddress(@"5784248439022692321", %.exitStub116), i8** %716, align 8
  %717 = call i64 @h9549842938191327224(i64 388314550)
  %718 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %717
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot14), i8** %718, align 8
  %719 = call i64 @h9549842938191327224(i64 388314551)
  %720 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %719
  store i8* blockaddress(@"5784248439022692321", %NodeBlock19), i8** %720, align 8
  %721 = call i64 @h9549842938191327224(i64 388314404)
  %722 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %721
  store i8* blockaddress(@"5784248439022692321", %.exitStub3), i8** %722, align 8
  %723 = call i64 @h9549842938191327224(i64 388314433)
  %724 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %723
  store i8* blockaddress(@"5784248439022692321", %"66"), i8** %724, align 8
  %725 = sext i32 %63 to i64
  %726 = add i64 %725, 7713742295802465052
  %727 = xor i64 7713742295802465052, %725
  %728 = and i64 7713742295802465052, %725
  %729 = mul i64 2, %728
  %730 = add i64 %727, %729
  %731 = sext i32 %0 to i64
  %732 = add i64 %731, 8316538675667163107
  %733 = sub i64 0, %731
  %734 = sub i64 8316538675667163107, %733
  %735 = sext i32 %66 to i64
  %736 = add i64 %735, -6198030183266631997
  %737 = sub i64 0, %735
  %738 = add i64 6198030183266631997, %737
  %739 = sub i64 0, %738
  %740 = xor i64 %739, %732
  %741 = xor i64 %740, %734
  %742 = xor i64 %741, %730
  %743 = xor i64 %742, %736
  %744 = xor i64 %743, %726
  %745 = xor i64 %744, 2097149014497470631
  %746 = sext i32 %18 to i64
  %747 = and i64 %746, 3025557474614773864
  %748 = xor i64 %746, -1
  %749 = or i64 -3025557474614773865, %748
  %750 = xor i64 %749, -1
  %751 = and i64 %750, -1
  %752 = sext i32 %52 to i64
  %753 = or i64 %752, 104649602124837507
  %754 = and i64 104649602124837507, %752
  %755 = xor i64 104649602124837507, %752
  %756 = or i64 %754, %755
  %757 = add i64 %29, 3990201366045741021
  %758 = sub i64 0, %29
  %759 = add i64 -3990201366045741021, %758
  %760 = sub i64 0, %759
  %761 = xor i64 %757, %751
  %762 = xor i64 %761, %760
  %763 = xor i64 %762, %753
  %764 = xor i64 %763, %747
  %765 = xor i64 %764, %756
  %766 = xor i64 %765, -7409111637300578676
  %767 = mul i64 %745, %766
  %768 = call i64 @h9549842938191327224(i64 %767)
  %769 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %768
  store i8* blockaddress(@"5784248439022692321", %"75"), i8** %769, align 8
  %770 = call i64 @h9549842938191327224(i64 388314417)
  %771 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %770
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot12), i8** %771, align 8
  %772 = call i64 @h9549842938191327224(i64 388314457)
  %773 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %772
  store i8* blockaddress(@"5784248439022692321", %.exitStub211), i8** %773, align 8
  %774 = call i64 @h9549842938191327224(i64 388314428)
  %775 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %774
  store i8* blockaddress(@"5784248439022692321", %.exitStub10), i8** %775, align 8
  %776 = call i64 @h9549842938191327224(i64 388314462)
  %777 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %776
  store i8* blockaddress(@"5784248439022692321", %"91"), i8** %777, align 8
  %778 = sext i32 %23 to i64
  %779 = add i64 %778, 8932062587534629267
  %780 = sub i64 0, %778
  %781 = add i64 -8932062587534629267, %780
  %782 = sub i64 0, %781
  %783 = sext i32 %38 to i64
  %784 = or i64 %783, 9201424631281042853
  %785 = xor i64 %783, -1
  %786 = and i64 %785, 1429765234376465341
  %787 = and i64 %783, -1429765234376465342
  %788 = or i64 %786, %787
  %789 = xor i64 7810804248538455576, %788
  %790 = xor i64 %783, -1
  %791 = or i64 -9201424631281042854, %790
  %792 = xor i64 %791, -1
  %793 = and i64 %792, -1
  %794 = or i64 %789, %793
  %795 = sext i32 %81 to i64
  %796 = and i64 %795, -36908651698142966
  %797 = xor i64 %795, -1
  %798 = or i64 36908651698142965, %797
  %799 = xor i64 %798, -1
  %800 = and i64 %799, -1
  %801 = xor i64 -5157536742075604561, %796
  %802 = xor i64 %801, %800
  %803 = xor i64 %802, %782
  %804 = xor i64 %803, %794
  %805 = xor i64 %804, %784
  %806 = xor i64 %805, %779
  %807 = sext i32 %17 to i64
  %808 = add i64 %807, -3361759410189158972
  %809 = and i64 -3361759410189158972, %807
  %810 = or i64 -3361759410189158972, %807
  %811 = add i64 %809, %810
  %812 = sext i32 %58 to i64
  %813 = add i64 %812, 9159000927394944262
  %814 = add i64 6684668753145077845, %812
  %815 = sub i64 %814, -2474332174249866417
  %816 = xor i64 %811, %808
  %817 = xor i64 %816, %813
  %818 = xor i64 %817, %815
  %819 = xor i64 %818, -1402480648591375668
  %820 = mul i64 %806, %819
  %821 = call i64 @h9549842938191327224(i64 %820)
  %822 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %821
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot22), i8** %822, align 8
  %823 = call i64 @h9549842938191327224(i64 388314387)
  %824 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %823
  store i8* blockaddress(@"5784248439022692321", %"60"), i8** %824, align 8
  %825 = call i64 @h9549842938191327224(i64 388314450)
  %826 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %825
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub26), i8** %826, align 8
  %827 = or i64 %96, -17039810072160151
  %828 = xor i64 %96, -1
  %829 = and i64 -17039810072160151, %828
  %830 = add i64 %829, %96
  %831 = sext i32 %52 to i64
  %832 = and i64 %831, 4110485147191856097
  %833 = xor i64 %831, -1
  %834 = or i64 -4110485147191856098, %833
  %835 = xor i64 %834, -1
  %836 = and i64 %835, -1
  %837 = add i64 %114, -607683521491599735
  %838 = add i64 4476532091769697237, %114
  %839 = add i64 %838, -5084215613261296972
  %840 = xor i64 -4417272761932665531, %837
  %841 = xor i64 %840, %836
  %842 = xor i64 %841, %830
  %843 = xor i64 %842, %832
  %844 = xor i64 %843, %839
  %845 = xor i64 %844, %827
  %846 = sext i32 %38 to i64
  %847 = and i64 %846, -7740379324969117148
  %848 = or i64 7740379324969117147, %846
  %849 = sub i64 %848, 7740379324969117147
  %850 = sext i8 %112 to i64
  %851 = or i64 %850, 2085062956562609851
  %852 = xor i64 %850, -1
  %853 = and i64 %852, 4589120269835172875
  %854 = and i64 %850, -4589120269835172876
  %855 = or i64 %853, %854
  %856 = xor i64 2540158987436591792, %855
  %857 = xor i64 %850, -1
  %858 = or i64 -2085062956562609852, %857
  %859 = xor i64 %858, -1
  %860 = and i64 %859, -1
  %861 = or i64 %856, %860
  %862 = xor i64 %847, -7528960035405183602
  %863 = xor i64 %862, %851
  %864 = xor i64 %863, %849
  %865 = xor i64 %864, %861
  %866 = mul i64 %845, %865
  %867 = call i64 @h9549842938191327224(i64 %866)
  %868 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %867
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot7), i8** %868, align 8
  %869 = call i64 @h9549842938191327224(i64 388314423)
  %870 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %869
  store i8* blockaddress(@"5784248439022692321", %NodeBlock21), i8** %870, align 8
  %871 = sext i32 %81 to i64
  %872 = and i64 %871, 1564236499196187007
  %873 = or i64 -1564236499196187008, %871
  %874 = sub i64 %873, -1564236499196187008
  %875 = and i64 %113, -7137557629677385951
  %876 = xor i64 %113, -1
  %877 = xor i64 -7137557629677385951, %876
  %878 = and i64 %877, -7137557629677385951
  %879 = xor i64 %874, %872
  %880 = xor i64 %879, %875
  %881 = xor i64 %880, -3773360526726919681
  %882 = xor i64 %881, %878
  %883 = sext i32 %45 to i64
  %884 = add i64 %883, 9110659228606563315
  %885 = add i64 5321358314638187740, %883
  %886 = sub i64 %885, -3789300913968375575
  %887 = sext i32 %23 to i64
  %888 = or i64 %887, -172766685497522299
  %889 = xor i64 %887, -1
  %890 = and i64 %889, -1526869603268987490
  %891 = and i64 %887, 1526869603268987489
  %892 = or i64 %890, %891
  %893 = xor i64 1681335463180857883, %892
  %894 = xor i64 %887, -1
  %895 = or i64 172766685497522298, %894
  %896 = xor i64 %895, -1
  %897 = and i64 %896, -1
  %898 = or i64 %893, %897
  %899 = xor i64 %886, %888
  %900 = xor i64 %899, -6965581476383690569
  %901 = xor i64 %900, %898
  %902 = xor i64 %901, %884
  %903 = mul i64 %882, %902
  %904 = call i64 @h9549842938191327224(i64 %903)
  %905 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %904
  store i8* blockaddress(@"5784248439022692321", %codeRepl.exitStub.exitStub), i8** %905, align 8
  %906 = call i64 @h9549842938191327224(i64 388314444)
  %907 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %906
  store i8* blockaddress(@"5784248439022692321", %EntryBasicBlockSplit), i8** %907, align 8
  %908 = call i64 @h9549842938191327224(i64 388314493)
  %909 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %908
  store i8* blockaddress(@"5784248439022692321", %"56"), i8** %909, align 8
  %910 = call i64 @h9549842938191327224(i64 388314402)
  %911 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %910
  store i8* blockaddress(@"5784248439022692321", %"53"), i8** %911, align 8
  %912 = call i64 @h9549842938191327224(i64 388314372)
  %913 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %912
  store i8* blockaddress(@"5784248439022692321", %.exitStub2.exitStub), i8** %913, align 8
  %914 = call i64 @h9549842938191327224(i64 388314528)
  %915 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %914
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub23), i8** %915, align 8
  %916 = call i64 @h9549842938191327224(i64 388314477)
  %917 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %916
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot4), i8** %917, align 8
  %918 = call i64 @h9549842938191327224(i64 388314410)
  %919 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %918
  store i8* blockaddress(@"5784248439022692321", %"83"), i8** %919, align 8
  %920 = call i64 @h9549842938191327224(i64 388314381)
  %921 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %920
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub), i8** %921, align 8
  %922 = call i64 @h9549842938191327224(i64 388314429)
  %923 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %922
  store i8* blockaddress(@"5784248439022692321", %codeRepl34), i8** %923, align 8
  %924 = call i64 @h9549842938191327224(i64 388314463)
  %925 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %924
  store i8* blockaddress(@"5784248439022692321", %NodeBlock25), i8** %925, align 8
  %926 = call i64 @h9549842938191327224(i64 388314398)
  %927 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %926
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot17), i8** %927, align 8
  %928 = call i64 @h9549842938191327224(i64 388314449)
  %929 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %928
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub18), i8** %929, align 8
  %930 = call i64 @h9549842938191327224(i64 388314379)
  %931 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %930
  store i8* blockaddress(@"5784248439022692321", %NodeBlock11), i8** %931, align 8
  %932 = call i64 @h9549842938191327224(i64 388314376)
  %933 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %932
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub6), i8** %933, align 8
  %934 = call i64 @h9549842938191327224(i64 388314378)
  %935 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %934
  store i8* blockaddress(@"5784248439022692321", %NodeBlock29), i8** %935, align 8
  %936 = call i64 @h9549842938191327224(i64 388314454)
  %937 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %936
  store i8* blockaddress(@"5784248439022692321", %"34"), i8** %937, align 8
  %938 = call i64 @h9549842938191327224(i64 388314490)
  %939 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %938
  store i8* blockaddress(@"5784248439022692321", %codeRepl53), i8** %939, align 8
  %940 = add i64 %70, 1057543661038439184
  %941 = add i64 -3647270407657611234, %70
  %942 = sub i64 %941, -4704814068696050418
  %943 = sext i32 %81 to i64
  %944 = or i64 %943, -6887280371871756058
  %945 = and i64 -6887280371871756058, %943
  %946 = xor i64 -6887280371871756058, %943
  %947 = or i64 %945, %946
  %948 = sext i32 %21 to i64
  %949 = add i64 %948, 2496009832658909552
  %950 = and i64 2496009832658909552, %948
  %951 = or i64 2496009832658909552, %948
  %952 = add i64 %950, %951
  %953 = xor i64 %952, %940
  %954 = xor i64 %953, 8796149636103523105
  %955 = xor i64 %954, %942
  %956 = xor i64 %955, %947
  %957 = xor i64 %956, %949
  %958 = xor i64 %957, %944
  %959 = or i64 %96, 3307665072908369469
  %960 = and i64 3307665072908369469, %96
  %961 = xor i64 3307665072908369469, %96
  %962 = or i64 %960, %961
  %963 = or i64 %101, -3074122593716617739
  %964 = xor i64 %101, -1
  %965 = and i64 %964, -6862582800099566471
  %966 = and i64 %101, 6862582800099566470
  %967 = or i64 %965, %966
  %968 = xor i64 8472872356356333964, %967
  %969 = xor i64 %101, -1
  %970 = or i64 3074122593716617738, %969
  %971 = xor i64 %970, -1
  %972 = and i64 %971, -1
  %973 = or i64 %968, %972
  %974 = sext i32 %38 to i64
  %975 = or i64 %974, 8861369044995581658
  %976 = and i64 8861369044995581658, %974
  %977 = xor i64 8861369044995581658, %974
  %978 = or i64 %976, %977
  %979 = xor i64 -8423956437336686731, %978
  %980 = xor i64 %979, %975
  %981 = xor i64 %980, %962
  %982 = xor i64 %981, %959
  %983 = xor i64 %982, %963
  %984 = xor i64 %983, %973
  %985 = mul i64 %958, %984
  %986 = call i64 @h9549842938191327224(i64 %985)
  %987 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %986
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot49), i8** %987, align 8
  %988 = call i64 @h9549842938191327224(i64 388314437)
  %989 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %988
  store i8* blockaddress(@"5784248439022692321", %codeRepl), i8** %989, align 8
  %990 = call i64 @h9549842938191327224(i64 388314447)
  %991 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %990
  store i8* blockaddress(@"5784248439022692321", %NodeBlock5), i8** %991, align 8
  %992 = call i64 @h9549842938191327224(i64 388314432)
  %993 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %992
  store i8* blockaddress(@"5784248439022692321", %"45"), i8** %993, align 8
  %994 = call i64 @h9549842938191327224(i64 388314487)
  %995 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %994
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot25), i8** %995, align 8
  %996 = call i64 @h9549842938191327224(i64 388314470)
  %997 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %996
  store i8* blockaddress(@"5784248439022692321", %.exitStub2), i8** %997, align 8
  %998 = call i64 @h9549842938191327224(i64 388314532)
  %999 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %998
  store i8* blockaddress(@"5784248439022692321", %"64"), i8** %999, align 8
  %1000 = call i64 @h9549842938191327224(i64 388314474)
  %1001 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1000
  store i8* blockaddress(@"5784248439022692321", %NodeBlock35), i8** %1001, align 8
  %1002 = call i64 @h9549842938191327224(i64 388314385)
  %1003 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1002
  store i8* blockaddress(@"5784248439022692321", %"43"), i8** %1003, align 8
  %1004 = call i64 @h9549842938191327224(i64 388314412)
  %1005 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1004
  store i8* blockaddress(@"5784248439022692321", %codeRepl46), i8** %1005, align 8
  %1006 = call i64 @h9549842938191327224(i64 388314383)
  %1007 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1006
  store i8* blockaddress(@"5784248439022692321", %"79"), i8** %1007, align 8
  %1008 = call i64 @h9549842938191327224(i64 388314400)
  %1009 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1008
  store i8* blockaddress(@"5784248439022692321", %NodeBlock41), i8** %1009, align 8
  %1010 = call i64 @h9549842938191327224(i64 388314542)
  %1011 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1010
  store i8* blockaddress(@"5784248439022692321", %"38"), i8** %1011, align 8
  %1012 = call i64 @h9549842938191327224(i64 388314403)
  %1013 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1012
  store i8* blockaddress(@"5784248439022692321", %"36"), i8** %1013, align 8
  %1014 = and i64 %96, -2978031984373052242
  %1015 = xor i64 %96, -1
  %1016 = xor i64 -2978031984373052242, %1015
  %1017 = and i64 %1016, -2978031984373052242
  %1018 = sext i32 %45 to i64
  %1019 = add i64 %1018, -1170603896589564061
  %1020 = and i64 -1170603896589564061, %1018
  %1021 = or i64 -1170603896589564061, %1018
  %1022 = add i64 %1020, %1021
  %1023 = add i64 %96, 4929048266968387956
  %1024 = sub i64 0, %96
  %1025 = sub i64 4929048266968387956, %1024
  %1026 = xor i64 %1023, %1014
  %1027 = xor i64 %1026, -18406305436695141
  %1028 = xor i64 %1027, %1025
  %1029 = xor i64 %1028, %1019
  %1030 = xor i64 %1029, %1017
  %1031 = xor i64 %1030, %1022
  %1032 = sext i32 %62 to i64
  %1033 = and i64 %1032, -8869246542123474219
  %1034 = xor i64 %1032, -1
  %1035 = or i64 8869246542123474218, %1034
  %1036 = xor i64 %1035, -1
  %1037 = and i64 %1036, -1
  %1038 = sext i32 %0 to i64
  %1039 = and i64 %1038, -7466957902989792020
  %1040 = xor i64 %1038, -1
  %1041 = xor i64 -7466957902989792020, %1040
  %1042 = and i64 %1041, -7466957902989792020
  %1043 = sext i32 %17 to i64
  %1044 = and i64 %1043, -8850630168196683045
  %1045 = xor i64 %1043, -1
  %1046 = xor i64 -8850630168196683045, %1045
  %1047 = and i64 %1046, -8850630168196683045
  %1048 = xor i64 %1039, %1047
  %1049 = xor i64 %1048, %1033
  %1050 = xor i64 %1049, 5445879774949716477
  %1051 = xor i64 %1050, %1044
  %1052 = xor i64 %1051, %1042
  %1053 = xor i64 %1052, %1037
  %1054 = mul i64 %1031, %1053
  %1055 = call i64 @h9549842938191327224(i64 %1054)
  %1056 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1055
  store i8* blockaddress(@"5784248439022692321", %NodeBlock27), i8** %1056, align 8
  %1057 = call i64 @h9549842938191327224(i64 388314390)
  %1058 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1057
  store i8* blockaddress(@"5784248439022692321", %"37"), i8** %1058, align 8
  %1059 = call i64 @h9549842938191327224(i64 388314407)
  %1060 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1059
  store i8* blockaddress(@"5784248439022692321", %"92"), i8** %1060, align 8
  %1061 = sext i8 %112 to i64
  %1062 = or i64 %1061, -8979785836975062185
  %1063 = xor i64 %1061, -1
  %1064 = and i64 %1063, -1110561850795727272
  %1065 = and i64 %1061, 1110561850795727271
  %1066 = or i64 %1064, %1065
  %1067 = xor i64 8356175923522626831, %1066
  %1068 = xor i64 %1061, -1
  %1069 = or i64 8979785836975062184, %1068
  %1070 = xor i64 %1069, -1
  %1071 = and i64 %1070, -1
  %1072 = or i64 %1067, %1071
  %1073 = sext i32 %62 to i64
  %1074 = add i64 %1073, 7033359919543202829
  %1075 = sub i64 0, %1073
  %1076 = sub i64 7033359919543202829, %1075
  %1077 = sext i32 %17 to i64
  %1078 = or i64 %1077, -4589221644027717385
  %1079 = and i64 -4589221644027717385, %1077
  %1080 = xor i64 -4589221644027717385, %1077
  %1081 = or i64 %1079, %1080
  %1082 = xor i64 %1062, %1078
  %1083 = xor i64 %1082, %1076
  %1084 = xor i64 %1083, -537525192621639439
  %1085 = xor i64 %1084, %1074
  %1086 = xor i64 %1085, %1081
  %1087 = xor i64 %1086, %1072
  %1088 = sext i32 %18 to i64
  %1089 = or i64 %1088, -6126787937122409924
  %1090 = xor i64 %1088, -1
  %1091 = and i64 %1090, 7710407882586473105
  %1092 = and i64 %1088, -7710407882586473106
  %1093 = or i64 %1091, %1092
  %1094 = xor i64 -4469372057169436499, %1093
  %1095 = xor i64 %1088, -1
  %1096 = or i64 6126787937122409923, %1095
  %1097 = xor i64 %1096, -1
  %1098 = and i64 %1097, -1
  %1099 = or i64 %1094, %1098
  %1100 = sext i32 %21 to i64
  %1101 = add i64 %1100, -5432770832539156174
  %1102 = and i64 -5432770832539156174, %1100
  %1103 = or i64 -5432770832539156174, %1100
  %1104 = add i64 %1102, %1103
  %1105 = xor i64 1679895283370102135, %1101
  %1106 = xor i64 %1105, %1104
  %1107 = xor i64 %1106, %1089
  %1108 = xor i64 %1107, %1099
  %1109 = mul i64 %1087, %1108
  %1110 = call i64 @h9549842938191327224(i64 %1109)
  %1111 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1110
  store i8* blockaddress(@"5784248439022692321", %"35"), i8** %1111, align 8
  %1112 = call i64 @h9549842938191327224(i64 388314486)
  %1113 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1112
  store i8* blockaddress(@"5784248439022692321", %codeRepl26), i8** %1113, align 8
  %1114 = call i64 @h9549842938191327224(i64 388314440)
  %1115 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1114
  store i8* blockaddress(@"5784248439022692321", %.exitStub1), i8** %1115, align 8
  %1116 = call i64 @h9549842938191327224(i64 388314468)
  %1117 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1116
  store i8* blockaddress(@"5784248439022692321", %LeafBlock), i8** %1117, align 8
  %1118 = call i64 @h9549842938191327224(i64 388314530)
  %1119 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1118
  store i8* blockaddress(@"5784248439022692321", %NodeBlock), i8** %1119, align 8
  %1120 = call i64 @h9549842938191327224(i64 388314446)
  %1121 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1120
  store i8* blockaddress(@"5784248439022692321", %.exitStub3.exitStub), i8** %1121, align 8
  %1122 = sext i32 %62 to i64
  %1123 = add i64 %1122, 6167429344059122918
  %1124 = and i64 6167429344059122918, %1122
  %1125 = or i64 6167429344059122918, %1122
  %1126 = add i64 %1124, %1125
  %1127 = sext i32 %59 to i64
  %1128 = and i64 %1127, 3832738808455735589
  %1129 = or i64 -3832738808455735590, %1127
  %1130 = sub i64 %1129, -3832738808455735590
  %1131 = sext i32 %82 to i64
  %1132 = add i64 %1131, -1946739474676806155
  %1133 = add i64 2589715463918908926, %1131
  %1134 = sub i64 %1133, 4536454938595715081
  %1135 = xor i64 %1126, %1132
  %1136 = xor i64 %1135, %1128
  %1137 = xor i64 %1136, %1130
  %1138 = xor i64 %1137, %1134
  %1139 = xor i64 %1138, %1123
  %1140 = xor i64 %1139, -1251118688728519309
  %1141 = sext i32 %53 to i64
  %1142 = add i64 %1141, 4709720397639293348
  %1143 = sub i64 0, %1141
  %1144 = add i64 -4709720397639293348, %1143
  %1145 = sub i64 0, %1144
  %1146 = sext i32 %52 to i64
  %1147 = and i64 %1146, 1290669823283608921
  %1148 = or i64 -1290669823283608922, %1146
  %1149 = sub i64 %1148, -1290669823283608922
  %1150 = sext i32 %53 to i64
  %1151 = or i64 %1150, 7150697370267062136
  %1152 = xor i64 %1150, -1
  %1153 = and i64 7150697370267062136, %1152
  %1154 = add i64 %1153, %1150
  %1155 = xor i64 %1151, -5545723270904436415
  %1156 = xor i64 %1155, %1142
  %1157 = xor i64 %1156, %1149
  %1158 = xor i64 %1157, %1145
  %1159 = xor i64 %1158, %1154
  %1160 = xor i64 %1159, %1147
  %1161 = mul i64 %1140, %1160
  %1162 = call i64 @h9549842938191327224(i64 %1161)
  %1163 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1162
  store i8* blockaddress(@"5784248439022692321", %NodeBlock1), i8** %1163, align 8
  %1164 = call i64 @h9549842938191327224(i64 388314495)
  %1165 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1164
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot), i8** %1165, align 8
  %1166 = call i64 @h9549842938191327224(i64 388314451)
  %1167 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1166
  store i8* blockaddress(@"5784248439022692321", %NodeBlock7), i8** %1167, align 8
  %1168 = call i64 @h9549842938191327224(i64 388314482)
  %1169 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1168
  store i8* blockaddress(@"5784248439022692321", %NodeBlock3), i8** %1169, align 8
  %1170 = call i64 @h9549842938191327224(i64 388314491)
  %1171 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1170
  store i8* blockaddress(@"5784248439022692321", %NodeBlock15), i8** %1171, align 8
  %1172 = call i64 @h9549842938191327224(i64 388314374)
  %1173 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1172
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot1), i8** %1173, align 8
  %1174 = call i64 @h9549842938191327224(i64 388314538)
  %1175 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1174
  store i8* blockaddress(@"5784248439022692321", %codeRepl8), i8** %1175, align 8
  %1176 = call i64 @h9549842938191327224(i64 388314540)
  %1177 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1176
  store i8* blockaddress(@"5784248439022692321", %NodeBlock59), i8** %1177, align 8
  %1178 = sext i32 %82 to i64
  %1179 = or i64 %1178, 536767837883774161
  %1180 = and i64 536767837883774161, %1178
  %1181 = xor i64 536767837883774161, %1178
  %1182 = or i64 %1180, %1181
  %1183 = and i64 %70, -5514574521205254884
  %1184 = or i64 5514574521205254883, %70
  %1185 = sub i64 %1184, 5514574521205254883
  %1186 = xor i64 -2395162542543997583, %1179
  %1187 = xor i64 %1186, %1183
  %1188 = xor i64 %1187, %1185
  %1189 = xor i64 %1188, %1182
  %1190 = sext i32 %58 to i64
  %1191 = and i64 %1190, 6645355101566224830
  %1192 = or i64 -6645355101566224831, %1190
  %1193 = sub i64 %1192, -6645355101566224831
  %1194 = sext i32 %63 to i64
  %1195 = or i64 %1194, 3971516450275555912
  %1196 = and i64 3971516450275555912, %1194
  %1197 = xor i64 3971516450275555912, %1194
  %1198 = or i64 %1196, %1197
  %1199 = xor i64 -8070947034976436720, %1195
  %1200 = xor i64 %1199, %1191
  %1201 = xor i64 %1200, %1193
  %1202 = xor i64 %1201, %1198
  %1203 = mul i64 %1189, %1202
  %1204 = call i64 @h9549842938191327224(i64 %1203)
  %1205 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1204
  store i8* blockaddress(@"5784248439022692321", %.split), i8** %1205, align 8
  %1206 = sext i32 %66 to i64
  %1207 = add i64 %1206, 355010541858138321
  %1208 = and i64 355010541858138321, %1206
  %1209 = or i64 355010541858138321, %1206
  %1210 = add i64 %1208, %1209
  %1211 = and i64 %88, -4219589960554038575
  %1212 = or i64 4219589960554038574, %88
  %1213 = sub i64 %1212, 4219589960554038574
  %1214 = xor i64 -9183552561196287235, %1213
  %1215 = xor i64 %1214, %1210
  %1216 = xor i64 %1215, %1207
  %1217 = xor i64 %1216, %1211
  %1218 = sext i32 %23 to i64
  %1219 = or i64 %1218, 3308960422219918783
  %1220 = xor i64 %1218, -1
  %1221 = and i64 3308960422219918783, %1220
  %1222 = add i64 %1221, %1218
  %1223 = add i64 %29, 5213519651229807019
  %1224 = add i64 5960421284937612685, %29
  %1225 = sub i64 %1224, 746901633707805666
  %1226 = xor i64 %1219, %1222
  %1227 = xor i64 %1226, %1223
  %1228 = xor i64 %1227, %1225
  %1229 = xor i64 %1228, -896492015225054810
  %1230 = mul i64 %1217, %1229
  %1231 = call i64 @h9549842938191327224(i64 %1230)
  %1232 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1231
  store i8* blockaddress(@"5784248439022692321", %NodeBlock23), i8** %1232, align 8
  %1233 = call i64 @h9549842938191327224(i64 388314481)
  %1234 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1233
  store i8* blockaddress(@"5784248439022692321", %NodeBlock55), i8** %1234, align 8
  %1235 = call i64 @h9549842938191327224(i64 388314411)
  %1236 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1235
  store i8* blockaddress(@"5784248439022692321", %.exitStub15), i8** %1236, align 8
  %1237 = call i64 @h9549842938191327224(i64 388314488)
  %1238 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1237
  store i8* blockaddress(@"5784248439022692321", %NodeBlock53), i8** %1238, align 8
  %1239 = call i64 @h9549842938191327224(i64 388314420)
  %1240 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1239
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot5), i8** %1240, align 8
  %1241 = call i64 @h9549842938191327224(i64 388314430)
  %1242 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1241
  store i8* blockaddress(@"5784248439022692321", %NodeBlock9), i8** %1242, align 8
  %1243 = sext i32 %45 to i64
  %1244 = and i64 %1243, -5945602727237607780
  %1245 = or i64 5945602727237607779, %1243
  %1246 = sub i64 %1245, 5945602727237607779
  %1247 = sext i32 %63 to i64
  %1248 = add i64 %1247, -6591180308125143056
  %1249 = add i64 1104394492508892333, %1247
  %1250 = sub i64 %1249, 7695574800634035389
  %1251 = or i64 %113, -1599316256486314120
  %1252 = xor i64 %113, -1
  %1253 = and i64 -1599316256486314120, %1252
  %1254 = add i64 %1253, %113
  %1255 = xor i64 %1244, %1248
  %1256 = xor i64 %1255, %1250
  %1257 = xor i64 %1256, %1246
  %1258 = xor i64 %1257, %1251
  %1259 = xor i64 %1258, %1254
  %1260 = xor i64 %1259, 8796160417571614785
  %1261 = sext i32 %62 to i64
  %1262 = add i64 %1261, 8208749151134737778
  %1263 = and i64 8208749151134737778, %1261
  %1264 = or i64 8208749151134737778, %1261
  %1265 = add i64 %1263, %1264
  %1266 = sext i32 %23 to i64
  %1267 = and i64 %1266, 4142172666221945012
  %1268 = or i64 -4142172666221945013, %1266
  %1269 = sub i64 %1268, -4142172666221945013
  %1270 = xor i64 4592701987735748629, %1262
  %1271 = xor i64 %1270, %1267
  %1272 = xor i64 %1271, %1265
  %1273 = xor i64 %1272, %1269
  %1274 = mul i64 %1260, %1273
  %1275 = call i64 @h9549842938191327224(i64 %1274)
  %1276 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1275
  store i8* blockaddress(@"5784248439022692321", %codeRepl27), i8** %1276, align 8
  %1277 = call i64 @h9549842938191327224(i64 388314380)
  %1278 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1277
  store i8* blockaddress(@"5784248439022692321", %.exitStub32), i8** %1278, align 8
  %1279 = sext i32 %59 to i64
  %1280 = or i64 %1279, 3519797681486922539
  %1281 = xor i64 %1279, -1
  %1282 = and i64 3519797681486922539, %1281
  %1283 = add i64 %1282, %1279
  %1284 = sext i32 %63 to i64
  %1285 = add i64 %1284, 5388524979138826390
  %1286 = xor i64 5388524979138826390, %1284
  %1287 = and i64 5388524979138826390, %1284
  %1288 = mul i64 2, %1287
  %1289 = add i64 %1286, %1288
  %1290 = xor i64 %1285, %1289
  %1291 = xor i64 %1290, %1280
  %1292 = xor i64 %1291, %1283
  %1293 = xor i64 %1292, 3937479508060651107
  %1294 = sext i32 %62 to i64
  %1295 = add i64 %1294, -2288910295395613429
  %1296 = xor i64 -2288910295395613429, %1294
  %1297 = and i64 -2288910295395613429, %1294
  %1298 = mul i64 2, %1297
  %1299 = add i64 %1296, %1298
  %1300 = sext i32 %52 to i64
  %1301 = add i64 %1300, 2062084162653609857
  %1302 = and i64 2062084162653609857, %1300
  %1303 = or i64 2062084162653609857, %1300
  %1304 = add i64 %1302, %1303
  %1305 = sext i8 %112 to i64
  %1306 = add i64 %1305, -5789996974759450733
  %1307 = add i64 8248194880332727138, %1305
  %1308 = sub i64 %1307, -4408552218617373745
  %1309 = xor i64 %1308, -2447104991830989790
  %1310 = xor i64 %1309, %1304
  %1311 = xor i64 %1310, %1295
  %1312 = xor i64 %1311, %1306
  %1313 = xor i64 %1312, %1299
  %1314 = xor i64 %1313, %1301
  %1315 = mul i64 %1293, %1314
  %1316 = call i64 @h9549842938191327224(i64 %1315)
  %1317 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1316
  store i8* blockaddress(@"5784248439022692321", %codeRepl30), i8** %1317, align 8
  %1318 = call i64 @h9549842938191327224(i64 388314466)
  %1319 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1318
  store i8* blockaddress(@"5784248439022692321", %NodeBlock13), i8** %1319, align 8
  %1320 = call i64 @h9549842938191327224(i64 388314396)
  %1321 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1320
  store i8* blockaddress(@"5784248439022692321", %NodeBlock31), i8** %1321, align 8
  %1322 = call i64 @h9549842938191327224(i64 388314536)
  %1323 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1322
  store i8* blockaddress(@"5784248439022692321", %LeafBlock49), i8** %1323, align 8
  %1324 = call i64 @h9549842938191327224(i64 388314464)
  %1325 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1324
  store i8* blockaddress(@"5784248439022692321", %"50"), i8** %1325, align 8
  %1326 = call i64 @h9549842938191327224(i64 388314369)
  %1327 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1326
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub13), i8** %1327, align 8
  %1328 = call i64 @h9549842938191327224(i64 388314461)
  %1329 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1328
  store i8* blockaddress(@"5784248439022692321", %.exitStub50), i8** %1329, align 8
  %1330 = call i64 @h9549842938191327224(i64 388314424)
  %1331 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1330
  store i8* blockaddress(@"5784248439022692321", %.exitStub), i8** %1331, align 8
  %1332 = call i64 @h9549842938191327224(i64 388314368)
  %1333 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1332
  store i8* blockaddress(@"5784248439022692321", %.exitStub136), i8** %1333, align 8
  %1334 = call i64 @h9549842938191327224(i64 388314399)
  %1335 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1334
  store i8* blockaddress(@"5784248439022692321", %"54"), i8** %1335, align 8
  %1336 = call i64 @h9549842938191327224(i64 388314408)
  %1337 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1336
  store i8* blockaddress(@"5784248439022692321", %NodeBlock51), i8** %1337, align 8
  %1338 = call i64 @h9549842938191327224(i64 388314472)
  %1339 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1338
  store i8* blockaddress(@"5784248439022692321", %NodeBlock39), i8** %1339, align 8
  %1340 = call i64 @h9549842938191327224(i64 388314386)
  %1341 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1340
  store i8* blockaddress(@"5784248439022692321", %NodeBlock37), i8** %1341, align 8
  %1342 = call i64 @h9549842938191327224(i64 388314534)
  %1343 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1342
  store i8* blockaddress(@"5784248439022692321", %NodeBlock43), i8** %1343, align 8
  %1344 = call i64 @h9549842938191327224(i64 388314548)
  %1345 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1344
  store i8* blockaddress(@"5784248439022692321", %NodeBlock33), i8** %1345, align 8
  %1346 = call i64 @h9549842938191327224(i64 388314541)
  %1347 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1346
  store i8* blockaddress(@"5784248439022692321", %"70"), i8** %1347, align 8
  %1348 = call i64 @h9549842938191327224(i64 388314448)
  %1349 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1348
  store i8* blockaddress(@"5784248439022692321", %BogusBasciBlock), i8** %1349, align 8
  %1350 = call i64 @h9549842938191327224(i64 388314492)
  %1351 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1350
  store i8* blockaddress(@"5784248439022692321", %NodeBlock47), i8** %1351, align 8
  %1352 = call i64 @h9549842938191327224(i64 388314435)
  %1353 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1352
  store i8* blockaddress(@"5784248439022692321", %"90"), i8** %1353, align 8
  %1354 = call i64 @h9549842938191327224(i64 388314392)
  %1355 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1354
  store i8* blockaddress(@"5784248439022692321", %.loopexit), i8** %1355, align 8
  %1356 = call i64 @h9549842938191327224(i64 388314543)
  %1357 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1356
  store i8* blockaddress(@"5784248439022692321", %NodeBlock57), i8** %1357, align 8
  %1358 = add i64 %108, 3555420294858869574
  %1359 = xor i64 3555420294858869574, %108
  %1360 = and i64 3555420294858869574, %108
  %1361 = mul i64 2, %1360
  %1362 = add i64 %1359, %1361
  %1363 = add i64 %113, -6570240920634030565
  %1364 = add i64 -5890676763022343357, %113
  %1365 = add i64 %1364, -679564157611687208
  %1366 = or i64 %96, 8311859376309934789
  %1367 = xor i64 %96, -1
  %1368 = and i64 %1367, 7533493626149924860
  %1369 = and i64 %96, -7533493626149924861
  %1370 = or i64 %1368, %1369
  %1371 = xor i64 2005773751058298169, %1370
  %1372 = xor i64 %96, -1
  %1373 = or i64 -8311859376309934790, %1372
  %1374 = xor i64 %1373, -1
  %1375 = and i64 %1374, -1
  %1376 = or i64 %1371, %1375
  %1377 = xor i64 %1358, %1365
  %1378 = xor i64 %1377, %1376
  %1379 = xor i64 %1378, %1363
  %1380 = xor i64 %1379, %1362
  %1381 = xor i64 %1380, 4421836551353559591
  %1382 = xor i64 %1381, %1366
  %1383 = sext i32 %17 to i64
  %1384 = or i64 %1383, -8511181872115000676
  %1385 = xor i64 %1383, -1
  %1386 = and i64 %1385, 936782151695765094
  %1387 = and i64 %1383, -936782151695765095
  %1388 = or i64 %1386, %1387
  %1389 = xor i64 -8871480722861861638, %1388
  %1390 = xor i64 %1383, -1
  %1391 = or i64 8511181872115000675, %1390
  %1392 = xor i64 %1391, -1
  %1393 = and i64 %1392, -1
  %1394 = or i64 %1389, %1393
  %1395 = sext i32 %21 to i64
  %1396 = add i64 %1395, 7243213293996145003
  %1397 = xor i64 7243213293996145003, %1395
  %1398 = and i64 7243213293996145003, %1395
  %1399 = mul i64 2, %1398
  %1400 = add i64 %1397, %1399
  %1401 = xor i64 %1394, 6050286121491203106
  %1402 = xor i64 %1401, %1400
  %1403 = xor i64 %1402, %1384
  %1404 = xor i64 %1403, %1396
  %1405 = mul i64 %1382, %1404
  %1406 = call i64 @h9549842938191327224(i64 %1405)
  %1407 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1406
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub), i8** %1407, align 8
  %1408 = call i64 @h9549842938191327224(i64 388314394)
  %1409 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1408
  store i8* blockaddress(@"5784248439022692321", %"105"), i8** %1409, align 8
  %1410 = call i64 @h9549842938191327224(i64 388314388)
  %1411 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1410
  store i8* blockaddress(@"5784248439022692321", %"40"), i8** %1411, align 8
  %1412 = call i64 @h9549842938191327224(i64 388314434)
  %1413 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1412
  store i8* blockaddress(@"5784248439022692321", %"73"), i8** %1413, align 8
  %1414 = call i64 @h9549842938191327224(i64 388314425)
  %1415 = getelementptr [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %1414
  store i8* blockaddress(@"5784248439022692321", %NodeBlock45), i8** %1415, align 8
  %.reg2mem730 = alloca i32, align 4
  %.reg2mem728 = alloca i1, align 1
  %.reg2mem726 = alloca i1, align 1
  %1416 = sext i32 %38 to i64
  %1417 = add i64 %1416, 7367652599125443532
  %1418 = and i64 7367652599125443532, %1416
  %1419 = or i64 7367652599125443532, %1416
  %1420 = add i64 %1418, %1419
  %1421 = sext i32 %58 to i64
  %1422 = or i64 %1421, -484454264556443425
  %1423 = xor i64 %1421, -1
  %1424 = and i64 %1423, -6233629403624755826
  %1425 = and i64 %1421, 6233629403624755825
  %1426 = or i64 %1424, %1425
  %1427 = xor i64 5781333828181460305, %1426
  %1428 = xor i64 %1421, -1
  %1429 = or i64 484454264556443424, %1428
  %1430 = xor i64 %1429, -1
  %1431 = and i64 %1430, -1
  %1432 = or i64 %1427, %1431
  %1433 = xor i64 %1420, %1417
  %1434 = xor i64 %1433, 3654085074604796209
  %1435 = xor i64 %1434, %1422
  %1436 = xor i64 %1435, %1432
  %1437 = or i64 %113, 4438607473563285651
  %1438 = and i64 4438607473563285651, %113
  %1439 = xor i64 4438607473563285651, %113
  %1440 = or i64 %1438, %1439
  %1441 = sext i32 %52 to i64
  %1442 = and i64 %1441, 7694868146531410790
  %1443 = or i64 -7694868146531410791, %1441
  %1444 = sub i64 %1443, -7694868146531410791
  %1445 = and i64 %114, -99135054070980713
  %1446 = xor i64 %114, -1
  %1447 = or i64 99135054070980712, %1446
  %1448 = xor i64 %1447, -1
  %1449 = and i64 %1448, -1
  %1450 = xor i64 %1440, %1437
  %1451 = xor i64 %1450, %1444
  %1452 = xor i64 %1451, 3801072768716148689
  %1453 = xor i64 %1452, %1449
  %1454 = xor i64 %1453, %1445
  %1455 = xor i64 %1454, %1442
  %1456 = mul i64 %1436, %1455
  %1457 = trunc i64 %1456 to i32
  %.reg2mem724 = alloca i1, i32 %1457, align 1
  %.reg2mem722 = alloca double, align 8
  %.reg2mem719 = alloca i64*, align 8
  %.reg2mem717 = alloca i64, align 8
  %.reg2mem714 = alloca i64*, align 8
  %.reg2mem712 = alloca i32, align 4
  %.reg2mem709 = alloca i64*, align 8
  %.reg2mem706 = alloca i1, align 1
  %.reg2mem702 = alloca i1, align 1
  %1458 = or i64 %100, -3888917410719997477
  %1459 = and i64 -3888917410719997477, %100
  %1460 = xor i64 -3888917410719997477, %100
  %1461 = or i64 %1459, %1460
  %1462 = sext i32 %21 to i64
  %1463 = and i64 %1462, -8743106781390577811
  %1464 = xor i64 %1462, -1
  %1465 = xor i64 -8743106781390577811, %1464
  %1466 = and i64 %1465, -8743106781390577811
  %1467 = xor i64 6769767038073862677, %1463
  %1468 = xor i64 %1467, %1461
  %1469 = xor i64 %1468, %1458
  %1470 = xor i64 %1469, %1466
  %1471 = sext i32 %58 to i64
  %1472 = add i64 %1471, 3438379928875284617
  %1473 = sub i64 0, %1471
  %1474 = add i64 -3438379928875284617, %1473
  %1475 = sub i64 0, %1474
  %1476 = sext i32 %67 to i64
  %1477 = or i64 %1476, 6240854932643111868
  %1478 = and i64 6240854932643111868, %1476
  %1479 = xor i64 6240854932643111868, %1476
  %1480 = or i64 %1478, %1479
  %1481 = xor i64 %1472, %1475
  %1482 = xor i64 %1481, %1480
  %1483 = xor i64 %1482, 2293795229809280317
  %1484 = xor i64 %1483, %1477
  %1485 = mul i64 %1470, %1484
  %1486 = trunc i64 %1485 to i32
  %.reg2mem699 = alloca i1, i32 %1486, align 1
  %.reg2mem696 = alloca i1, align 1
  %.reg2mem693 = alloca i1, align 1
  %.reg2mem689 = alloca i1, align 1
  %.reg2mem686 = alloca i1, align 1
  %.reg2mem683 = alloca i1, align 1
  %.reg2mem680 = alloca i1, align 1
  %.reg2mem677 = alloca i1, align 1
  %.reg2mem674 = alloca i1, align 1
  %1487 = sext i32 %38 to i64
  %1488 = add i64 %1487, -6748330420937727258
  %1489 = add i64 356472891096482337, %1487
  %1490 = add i64 %1489, -7104803312034209595
  %1491 = sext i32 %58 to i64
  %1492 = add i64 %1491, -6201245802017361772
  %1493 = sub i64 0, %1491
  %1494 = sub i64 -6201245802017361772, %1493
  %1495 = xor i64 %1488, %1492
  %1496 = xor i64 %1495, %1490
  %1497 = xor i64 %1496, %1494
  %1498 = xor i64 %1497, 4410049843468512129
  %1499 = sext i32 %18 to i64
  %1500 = add i64 %1499, 162530457096004447
  %1501 = sub i64 0, %1499
  %1502 = add i64 -162530457096004447, %1501
  %1503 = sub i64 0, %1502
  %1504 = sext i32 %0 to i64
  %1505 = or i64 %1504, -3553984841661420145
  %1506 = xor i64 %1504, -1
  %1507 = and i64 -3553984841661420145, %1506
  %1508 = add i64 %1507, %1504
  %1509 = xor i64 -3313184077387983743, %1508
  %1510 = xor i64 %1509, %1503
  %1511 = xor i64 %1510, %1500
  %1512 = xor i64 %1511, %1505
  %1513 = mul i64 %1498, %1512
  %1514 = trunc i64 %1513 to i32
  %.reg2mem671 = alloca i1, i32 %1514, align 1
  %.reg2mem668 = alloca i1, align 1
  %.reg2mem665 = alloca i1, align 1
  %.reg2mem660 = alloca i1, align 1
  %.reg2mem657 = alloca i32, align 4
  %.reg2mem654 = alloca i32, align 4
  %.reg2mem649 = alloca i1, align 1
  %.reg2mem643 = alloca i32, align 4
  %.reg2mem641 = alloca i8*, align 8
  %.reg2mem639 = alloca i8, align 1
  %.reload22.reg2mem = alloca float*, align 8
  %.reload21.reg2mem = alloca i64, align 8
  %.reload20.reg2mem = alloca i32, align 4
  %.reload13.reg2mem = alloca i1, align 1
  %.reload6.reg2mem = alloca i1, align 1
  %.reload5.reg2mem = alloca i32, align 4
  %1515 = add i64 %70, -5457003602904333750
  %1516 = sub i64 0, %70
  %1517 = sub i64 -5457003602904333750, %1516
  %1518 = sext i32 %53 to i64
  %1519 = and i64 %1518, -5534080065190307813
  %1520 = xor i64 %1518, -1
  %1521 = or i64 5534080065190307812, %1520
  %1522 = xor i64 %1521, -1
  %1523 = and i64 %1522, -1
  %1524 = sext i32 %59 to i64
  %1525 = add i64 %1524, 7075272604256304653
  %1526 = sub i64 0, %1524
  %1527 = add i64 -7075272604256304653, %1526
  %1528 = sub i64 0, %1527
  %1529 = xor i64 %1515, %1517
  %1530 = xor i64 %1529, %1523
  %1531 = xor i64 %1530, %1528
  %1532 = xor i64 %1531, %1525
  %1533 = xor i64 %1532, %1519
  %1534 = xor i64 %1533, -6289366728450161455
  %1535 = sext i32 %18 to i64
  %1536 = and i64 %1535, 6402119170664868969
  %1537 = xor i64 %1535, -1
  %1538 = xor i64 6402119170664868969, %1537
  %1539 = and i64 %1538, 6402119170664868969
  %1540 = sext i32 %67 to i64
  %1541 = or i64 %1540, -2513854145957489423
  %1542 = and i64 -2513854145957489423, %1540
  %1543 = xor i64 -2513854145957489423, %1540
  %1544 = or i64 %1542, %1543
  %1545 = xor i64 %1539, %1544
  %1546 = xor i64 %1545, %1541
  %1547 = xor i64 %1546, -5541338893378808783
  %1548 = xor i64 %1547, %1536
  %1549 = mul i64 %1534, %1548
  %1550 = trunc i64 %1549 to i32
  %.reload4.reg2mem = alloca i32, i32 %1550, align 4
  %.reload.reg2mem = alloca i32, align 4
  %.reg2mem636 = alloca i32, align 4
  %1551 = sext i32 %21 to i64
  %1552 = add i64 %1551, 5698514234971875400
  %1553 = sub i64 0, %1551
  %1554 = add i64 -5698514234971875400, %1553
  %1555 = sub i64 0, %1554
  %1556 = sext i32 %82 to i64
  %1557 = and i64 %1556, -765520070989105404
  %1558 = xor i64 %1556, -1
  %1559 = or i64 765520070989105403, %1558
  %1560 = xor i64 %1559, -1
  %1561 = and i64 %1560, -1
  %1562 = sext i32 %0 to i64
  %1563 = or i64 %1562, -8760142299892304344
  %1564 = and i64 -8760142299892304344, %1562
  %1565 = xor i64 -8760142299892304344, %1562
  %1566 = or i64 %1564, %1565
  %1567 = xor i64 %1555, %1552
  %1568 = xor i64 %1567, %1563
  %1569 = xor i64 %1568, %1557
  %1570 = xor i64 %1569, 2710367801247830659
  %1571 = xor i64 %1570, %1566
  %1572 = xor i64 %1571, %1561
  %1573 = and i64 %115, -8747141975449357258
  %1574 = xor i64 %115, -1
  %1575 = or i64 8747141975449357257, %1574
  %1576 = xor i64 %1575, -1
  %1577 = and i64 %1576, -1
  %1578 = sext i32 %45 to i64
  %1579 = and i64 %1578, 5337732234856294023
  %1580 = xor i64 %1578, -1
  %1581 = or i64 -5337732234856294024, %1580
  %1582 = xor i64 %1581, -1
  %1583 = and i64 %1582, -1
  %1584 = sext i32 %52 to i64
  %1585 = or i64 %1584, 1497000727549024522
  %1586 = xor i64 %1584, -1
  %1587 = and i64 %1586, 6621823907795151263
  %1588 = and i64 %1584, -6621823907795151264
  %1589 = or i64 %1587, %1588
  %1590 = xor i64 5702432307015463061, %1589
  %1591 = xor i64 %1584, -1
  %1592 = or i64 -1497000727549024523, %1591
  %1593 = xor i64 %1592, -1
  %1594 = and i64 %1593, -1
  %1595 = or i64 %1590, %1594
  %1596 = xor i64 -844899837990810581, %1585
  %1597 = xor i64 %1596, %1583
  %1598 = xor i64 %1597, %1577
  %1599 = xor i64 %1598, %1579
  %1600 = xor i64 %1599, %1595
  %1601 = xor i64 %1600, %1573
  %1602 = mul i64 %1572, %1601
  %1603 = trunc i64 %1602 to i32
  %.reg2mem632 = alloca i32, i32 %1603, align 4
  %.reg2mem629 = alloca i32, align 4
  %.reg2mem620 = alloca i32, align 4
  %.reg2mem615 = alloca float, align 4
  %.reg2mem611 = alloca double, align 8
  %1604 = or i64 %70, -8495468762239259370
  %1605 = xor i64 %70, -1
  %1606 = and i64 %1605, 8577922587600418600
  %1607 = and i64 %70, -8577922587600418601
  %1608 = or i64 %1606, %1607
  %1609 = xor i64 -211406335941158338, %1608
  %1610 = xor i64 %70, -1
  %1611 = or i64 8495468762239259369, %1610
  %1612 = xor i64 %1611, -1
  %1613 = and i64 %1612, -1
  %1614 = or i64 %1609, %1613
  %1615 = sext i32 %81 to i64
  %1616 = add i64 %1615, 3828654038768111382
  %1617 = add i64 1136409172295485959, %1615
  %1618 = add i64 %1617, 2692244866472625423
  %1619 = xor i64 %1604, %1616
  %1620 = xor i64 %1619, %1618
  %1621 = xor i64 %1620, %1614
  %1622 = xor i64 %1621, 8128553501005350439
  %1623 = or i64 %29, 3375302981716427813
  %1624 = xor i64 %29, -1
  %1625 = and i64 %1624, 6164005186986949382
  %1626 = and i64 %29, -6164005186986949383
  %1627 = or i64 %1625, %1626
  %1628 = xor i64 8889417520180887331, %1627
  %1629 = xor i64 %29, -1
  %1630 = or i64 -3375302981716427814, %1629
  %1631 = xor i64 %1630, -1
  %1632 = and i64 %1631, -1
  %1633 = or i64 %1628, %1632
  %1634 = sext i32 %44 to i64
  %1635 = and i64 %1634, -5927278262336213870
  %1636 = or i64 5927278262336213869, %1634
  %1637 = sub i64 %1636, 5927278262336213869
  %1638 = xor i64 %1633, %1637
  %1639 = xor i64 %1638, 7689375997251848599
  %1640 = xor i64 %1639, %1623
  %1641 = xor i64 %1640, %1635
  %1642 = mul i64 %1622, %1641
  %1643 = trunc i64 %1642 to i32
  %.reg2mem608 = alloca float, i32 %1643, align 4
  %.reg2mem605 = alloca float, align 4
  %.reg2mem601 = alloca float, align 4
  %.loc.reg2mem = alloca i32*, align 8
  %.loc1.reg2mem = alloca i32*, align 8
  %1644 = or i64 %88, 5686793682246422706
  %1645 = xor i64 %88, -1
  %1646 = and i64 5686793682246422706, %1645
  %1647 = add i64 %1646, %88
  %1648 = sext i32 %45 to i64
  %1649 = add i64 %1648, 2672184768556302540
  %1650 = sub i64 0, %1648
  %1651 = add i64 -2672184768556302540, %1650
  %1652 = sub i64 0, %1651
  %1653 = xor i64 %1644, 5427244587882340221
  %1654 = xor i64 %1653, %1649
  %1655 = xor i64 %1654, %1652
  %1656 = xor i64 %1655, %1647
  %1657 = sext i32 %58 to i64
  %1658 = and i64 %1657, 7149887585987437514
  %1659 = xor i64 %1657, -1
  %1660 = xor i64 7149887585987437514, %1659
  %1661 = and i64 %1660, 7149887585987437514
  %1662 = sext i32 %45 to i64
  %1663 = and i64 %1662, 4421776304279486081
  %1664 = xor i64 %1662, -1
  %1665 = xor i64 4421776304279486081, %1664
  %1666 = and i64 %1665, 4421776304279486081
  %1667 = xor i64 %1663, %1666
  %1668 = xor i64 %1667, %1658
  %1669 = xor i64 %1668, -4163667554554392107
  %1670 = xor i64 %1669, %1661
  %1671 = mul i64 %1656, %1670
  %1672 = trunc i64 %1671 to i32
  %.loc2.reg2mem = alloca i32*, i32 %1672, align 8
  %.loc3.reg2mem = alloca i1*, align 8
  %.loc11.reg2mem = alloca i1*, align 8
  %.loc16.reg2mem = alloca i32*, align 8
  %1673 = sext i32 %82 to i64
  %1674 = or i64 %1673, -6809691876901494580
  %1675 = and i64 -6809691876901494580, %1673
  %1676 = xor i64 -6809691876901494580, %1673
  %1677 = or i64 %1675, %1676
  %1678 = or i64 %115, -6671328813247079337
  %1679 = xor i64 %115, -1
  %1680 = and i64 %1679, 7391044269504311840
  %1681 = and i64 %115, -7391044269504311841
  %1682 = or i64 %1680, %1681
  %1683 = xor i64 -4181330222749454729, %1682
  %1684 = xor i64 %115, -1
  %1685 = or i64 6671328813247079336, %1684
  %1686 = xor i64 %1685, -1
  %1687 = and i64 %1686, -1
  %1688 = or i64 %1683, %1687
  %1689 = sext i32 %81 to i64
  %1690 = and i64 %1689, -4510567750114927904
  %1691 = xor i64 %1689, -1
  %1692 = or i64 4510567750114927903, %1691
  %1693 = xor i64 %1692, -1
  %1694 = and i64 %1693, -1
  %1695 = xor i64 -1144545132929568897, %1688
  %1696 = xor i64 %1695, %1674
  %1697 = xor i64 %1696, %1690
  %1698 = xor i64 %1697, %1677
  %1699 = xor i64 %1698, %1678
  %1700 = xor i64 %1699, %1694
  %1701 = add i64 %114, -260339376121433958
  %1702 = add i64 6051192879000149043, %114
  %1703 = add i64 %1702, -6311532255121583001
  %1704 = add i64 %100, -3088100989701041319
  %1705 = xor i64 -3088100989701041319, %100
  %1706 = and i64 -3088100989701041319, %100
  %1707 = mul i64 2, %1706
  %1708 = add i64 %1705, %1707
  %1709 = xor i64 %1704, %1701
  %1710 = xor i64 %1709, %1708
  %1711 = xor i64 %1710, %1703
  %1712 = xor i64 %1711, -4922819358058934145
  %1713 = mul i64 %1700, %1712
  %1714 = trunc i64 %1713 to i32
  %.loc17.reg2mem = alloca i64*, i32 %1714, align 8
  %.loc18.reg2mem = alloca float**, align 8
  %.loc27.reg2mem = alloca i1*, align 8
  %.loc28.reg2mem = alloca i1*, align 8
  %.loc35.reg2mem = alloca i32*, align 8
  %.loc36.reg2mem = alloca i1*, align 8
  %.loc37.reg2mem = alloca i1*, align 8
  %.loc38.reg2mem = alloca i1*, align 8
  %.loc39.reg2mem = alloca i1*, align 8
  %.loc40.reg2mem = alloca i1*, align 8
  %.loc41.reg2mem = alloca i1*, align 8
  %.loc42.reg2mem = alloca i1*, align 8
  %.loc43.reg2mem = alloca i1*, align 8
  %.loc44.reg2mem = alloca i1*, align 8
  %.loc45.reg2mem = alloca i1*, align 8
  %.loc46.reg2mem = alloca i1*, align 8
  %.loc47.reg2mem = alloca i1*, align 8
  %.loc48.reg2mem = alloca i1*, align 8
  %.loc49.reg2mem = alloca i1*, align 8
  %.loc50.reg2mem = alloca i1*, align 8
  %.loc51.reg2mem = alloca i1*, align 8
  %1715 = sext i32 %53 to i64
  %1716 = or i64 %1715, -6442817256059829350
  %1717 = xor i64 %1715, -1
  %1718 = and i64 -6442817256059829350, %1717
  %1719 = add i64 %1718, %1715
  %1720 = sext i32 %52 to i64
  %1721 = and i64 %1720, -65213473467007149
  %1722 = xor i64 %1720, -1
  %1723 = xor i64 -65213473467007149, %1722
  %1724 = and i64 %1723, -65213473467007149
  %1725 = xor i64 %1719, %1721
  %1726 = xor i64 %1725, %1724
  %1727 = xor i64 %1726, %1716
  %1728 = xor i64 %1727, 7034925197136663707
  %1729 = sext i32 %0 to i64
  %1730 = add i64 %1729, 7920345790424944075
  %1731 = sub i64 0, %1729
  %1732 = add i64 -7920345790424944075, %1731
  %1733 = sub i64 0, %1732
  %1734 = sext i32 %66 to i64
  %1735 = and i64 %1734, 176138217970160746
  %1736 = xor i64 %1734, -1
  %1737 = or i64 -176138217970160747, %1736
  %1738 = xor i64 %1737, -1
  %1739 = and i64 %1738, -1
  %1740 = xor i64 %1730, %1733
  %1741 = xor i64 %1740, 6988262913320759699
  %1742 = xor i64 %1741, %1735
  %1743 = xor i64 %1742, %1739
  %1744 = mul i64 %1728, %1743
  %1745 = trunc i64 %1744 to i32
  %.reg2mem534 = alloca i64*, i32 %1745, align 8
  %.reg2mem531 = alloca i32, align 4
  %.reg2mem526 = alloca i64*, align 8
  %.reg2mem523 = alloca i64*, align 8
  %.reg2mem520 = alloca i8**, align 8
  %.reg2mem517 = alloca i8**, align 8
  %.reg2mem514 = alloca i8**, align 8
  %.reg2mem511 = alloca i8**, align 8
  %.reg2mem508 = alloca i8**, align 8
  %.reg2mem505 = alloca i8**, align 8
  %.reg2mem502 = alloca i8**, align 8
  %.reg2mem499 = alloca i8**, align 8
  %1746 = or i64 %100, -5503427417514763404
  %1747 = xor i64 %100, -1
  %1748 = and i64 -5503427417514763404, %1747
  %1749 = add i64 %1748, %100
  %1750 = sext i32 %45 to i64
  %1751 = and i64 %1750, -784361478676644508
  %1752 = or i64 784361478676644507, %1750
  %1753 = sub i64 %1752, 784361478676644507
  %1754 = sext i32 %63 to i64
  %1755 = and i64 %1754, 4676539469393994611
  %1756 = xor i64 %1754, -1
  %1757 = xor i64 4676539469393994611, %1756
  %1758 = and i64 %1757, 4676539469393994611
  %1759 = xor i64 %1753, %1746
  %1760 = xor i64 %1759, %1751
  %1761 = xor i64 %1760, %1749
  %1762 = xor i64 %1761, %1755
  %1763 = xor i64 %1762, %1758
  %1764 = xor i64 %1763, -2365666095116904309
  %1765 = add i64 %88, 7792988181496047909
  %1766 = sub i64 0, %88
  %1767 = add i64 -7792988181496047909, %1766
  %1768 = sub i64 0, %1767
  %1769 = sext i32 %62 to i64
  %1770 = and i64 %1769, 3982931247734519011
  %1771 = or i64 -3982931247734519012, %1769
  %1772 = sub i64 %1771, -3982931247734519012
  %1773 = xor i64 %1768, %1765
  %1774 = xor i64 %1773, %1770
  %1775 = xor i64 %1774, 83143563858054947
  %1776 = xor i64 %1775, %1772
  %1777 = mul i64 %1764, %1776
  %1778 = trunc i64 %1777 to i32
  %.reg2mem496 = alloca i8**, i32 %1778, align 8
  %.reg2mem493 = alloca i8**, align 8
  %.reg2mem490 = alloca i8**, align 8
  %.reg2mem487 = alloca i8**, align 8
  %.reg2mem484 = alloca i8**, align 8
  %.reg2mem481 = alloca i8**, align 8
  %.reg2mem478 = alloca i8**, align 8
  %.reg2mem475 = alloca i8**, align 8
  %.reg2mem472 = alloca i8**, align 8
  %.reg2mem469 = alloca i8**, align 8
  %.reg2mem466 = alloca i8**, align 8
  %.reg2mem463 = alloca i8**, align 8
  %.reg2mem460 = alloca i8**, align 8
  %1779 = sext i32 %67 to i64
  %1780 = add i64 %1779, 3266244002949869433
  %1781 = sub i64 0, %1779
  %1782 = sub i64 3266244002949869433, %1781
  %1783 = or i64 %29, -9160342872947009429
  %1784 = xor i64 %29, -1
  %1785 = and i64 %1784, 1437613880787523339
  %1786 = and i64 %29, -1437613880787523340
  %1787 = or i64 %1785, %1786
  %1788 = xor i64 -7841749339160146080, %1787
  %1789 = xor i64 %29, -1
  %1790 = or i64 9160342872947009428, %1789
  %1791 = xor i64 %1790, -1
  %1792 = and i64 %1791, -1
  %1793 = or i64 %1788, %1792
  %1794 = sext i32 %52 to i64
  %1795 = or i64 %1794, -7158290100009724602
  %1796 = and i64 -7158290100009724602, %1794
  %1797 = xor i64 -7158290100009724602, %1794
  %1798 = or i64 %1796, %1797
  %1799 = xor i64 %1783, %1795
  %1800 = xor i64 %1799, -3146743668750269071
  %1801 = xor i64 %1800, %1780
  %1802 = xor i64 %1801, %1798
  %1803 = xor i64 %1802, %1782
  %1804 = xor i64 %1803, %1793
  %1805 = sext i32 %59 to i64
  %1806 = add i64 %1805, 643834190555181571
  %1807 = xor i64 643834190555181571, %1805
  %1808 = and i64 643834190555181571, %1805
  %1809 = mul i64 2, %1808
  %1810 = add i64 %1807, %1809
  %1811 = add i64 %29, -1797344136255129102
  %1812 = add i64 3165778350110238664, %29
  %1813 = sub i64 %1812, 4963122486365367766
  %1814 = and i64 %96, -664866471163542900
  %1815 = xor i64 %96, -1
  %1816 = xor i64 -664866471163542900, %1815
  %1817 = and i64 %1816, -664866471163542900
  %1818 = xor i64 %1817, %1811
  %1819 = xor i64 %1818, %1810
  %1820 = xor i64 %1819, %1806
  %1821 = xor i64 %1820, %1814
  %1822 = xor i64 %1821, %1813
  %1823 = xor i64 %1822, -5763793330641839215
  %1824 = mul i64 %1804, %1823
  %1825 = trunc i64 %1824 to i32
  %.reg2mem457 = alloca i8**, i32 %1825, align 8
  %.reg2mem454 = alloca i8**, align 8
  %.reg2mem451 = alloca i8**, align 8
  %.reg2mem448 = alloca i8**, align 8
  %.reg2mem445 = alloca i8**, align 8
  %.reg2mem442 = alloca i8**, align 8
  %.reg2mem439 = alloca i8**, align 8
  %.reg2mem436 = alloca i8**, align 8
  %.reg2mem433 = alloca i8**, align 8
  %.reg2mem430 = alloca i8**, align 8
  %.reg2mem427 = alloca i8**, align 8
  %.reg2mem424 = alloca i8**, align 8
  %.reg2mem421 = alloca i8**, align 8
  %.reg2mem417 = alloca i8**, align 8
  %.reg2mem414 = alloca i8**, align 8
  %.reg2mem409 = alloca i8**, align 8
  %.reg2mem405 = alloca i8**, align 8
  %.reg2mem402 = alloca i8**, align 8
  %1826 = and i64 %29, 3061323366916883646
  %1827 = xor i64 %29, -1
  %1828 = or i64 -3061323366916883647, %1827
  %1829 = xor i64 %1828, -1
  %1830 = and i64 %1829, -1
  %1831 = add i64 %108, 6021156615559819640
  %1832 = and i64 6021156615559819640, %108
  %1833 = or i64 6021156615559819640, %108
  %1834 = add i64 %1832, %1833
  %1835 = sext i32 %38 to i64
  %1836 = and i64 %1835, -2575998730294345456
  %1837 = or i64 2575998730294345455, %1835
  %1838 = sub i64 %1837, 2575998730294345455
  %1839 = xor i64 %1838, %1834
  %1840 = xor i64 %1839, %1831
  %1841 = xor i64 %1840, %1826
  %1842 = xor i64 %1841, -5625402237773824719
  %1843 = xor i64 %1842, %1836
  %1844 = xor i64 %1843, %1830
  %1845 = sext i32 %52 to i64
  %1846 = and i64 %1845, -8043254347615178137
  %1847 = xor i64 %1845, -1
  %1848 = xor i64 -8043254347615178137, %1847
  %1849 = and i64 %1848, -8043254347615178137
  %1850 = sext i32 %67 to i64
  %1851 = or i64 %1850, -3873075632139306405
  %1852 = xor i64 %1850, -1
  %1853 = and i64 -3873075632139306405, %1852
  %1854 = add i64 %1853, %1850
  %1855 = and i64 %115, -7497915558121420204
  %1856 = or i64 7497915558121420203, %115
  %1857 = sub i64 %1856, 7497915558121420203
  %1858 = xor i64 %1849, %1854
  %1859 = xor i64 %1858, %1857
  %1860 = xor i64 %1859, 943232056790514641
  %1861 = xor i64 %1860, %1855
  %1862 = xor i64 %1861, %1846
  %1863 = xor i64 %1862, %1851
  %1864 = mul i64 %1844, %1863
  %1865 = trunc i64 %1864 to i32
  %.reg2mem398 = alloca i8**, i32 %1865, align 8
  %.reg2mem395 = alloca i8**, align 8
  %.reg2mem391 = alloca i8**, align 8
  %1866 = sext i32 %53 to i64
  %1867 = add i64 %1866, 5624274566669377469
  %1868 = add i64 2780833202360452448, %1866
  %1869 = add i64 %1868, 2843441364308925021
  %1870 = sext i32 %38 to i64
  %1871 = or i64 %1870, 6356417223043437631
  %1872 = xor i64 %1870, -1
  %1873 = and i64 %1872, -6517779477697602363
  %1874 = and i64 %1870, 6517779477697602362
  %1875 = or i64 %1873, %1874
  %1876 = xor i64 -163618529941321478, %1875
  %1877 = xor i64 %1870, -1
  %1878 = or i64 -6356417223043437632, %1877
  %1879 = xor i64 %1878, -1
  %1880 = and i64 %1879, -1
  %1881 = or i64 %1876, %1880
  %1882 = xor i64 8873461304597814537, %1867
  %1883 = xor i64 %1882, %1881
  %1884 = xor i64 %1883, %1869
  %1885 = xor i64 %1884, %1871
  %1886 = sext i32 %21 to i64
  %1887 = or i64 %1886, -1449938986574667721
  %1888 = xor i64 %1886, -1
  %1889 = and i64 %1888, -3424477931556817725
  %1890 = and i64 %1886, 3424477931556817724
  %1891 = or i64 %1889, %1890
  %1892 = xor i64 4294471809167660276, %1891
  %1893 = xor i64 %1886, -1
  %1894 = or i64 1449938986574667720, %1893
  %1895 = xor i64 %1894, -1
  %1896 = and i64 %1895, -1
  %1897 = or i64 %1892, %1896
  %1898 = sext i32 %59 to i64
  %1899 = add i64 %1898, -7575987632515648639
  %1900 = add i64 3719212837781974810, %1898
  %1901 = add i64 %1900, 7151543603411928167
  %1902 = sext i32 %21 to i64
  %1903 = add i64 %1902, 1232972689617516202
  %1904 = add i64 5199189978949561516, %1902
  %1905 = sub i64 %1904, 3966217289332045314
  %1906 = xor i64 %1899, %1901
  %1907 = xor i64 %1906, %1887
  %1908 = xor i64 %1907, -8005057499965259463
  %1909 = xor i64 %1908, %1903
  %1910 = xor i64 %1909, %1897
  %1911 = xor i64 %1910, %1905
  %1912 = mul i64 %1885, %1911
  %1913 = trunc i64 %1912 to i32
  %.reg2mem388 = alloca i8**, i32 %1913, align 8
  %.reg2mem385 = alloca i8**, align 8
  %.reg2mem382 = alloca i8**, align 8
  %.reg2mem378 = alloca i8**, align 8
  %.reg2mem374 = alloca i8**, align 8
  %.reg2mem371 = alloca i8**, align 8
  %.reg2mem367 = alloca i8**, align 8
  %.reg2mem363 = alloca i8**, align 8
  %.reg2mem360 = alloca i8**, align 8
  %.reg2mem357 = alloca i8**, align 8
  %.reg2mem354 = alloca i8**, align 8
  %.reg2mem351 = alloca i8**, align 8
  %1914 = sext i32 %45 to i64
  %1915 = and i64 %1914, 5800930579304206157
  %1916 = xor i64 %1914, -1
  %1917 = or i64 -5800930579304206158, %1916
  %1918 = xor i64 %1917, -1
  %1919 = and i64 %1918, -1
  %1920 = or i64 %114, -7602798118481883913
  %1921 = and i64 -7602798118481883913, %114
  %1922 = xor i64 -7602798118481883913, %114
  %1923 = or i64 %1921, %1922
  %1924 = xor i64 %1919, %1923
  %1925 = xor i64 %1924, %1915
  %1926 = xor i64 %1925, 6000909904896088907
  %1927 = xor i64 %1926, %1920
  %1928 = sext i32 %52 to i64
  %1929 = add i64 %1928, 2353087743685773969
  %1930 = and i64 2353087743685773969, %1928
  %1931 = or i64 2353087743685773969, %1928
  %1932 = add i64 %1930, %1931
  %1933 = or i64 %101, -938962662208518777
  %1934 = xor i64 %101, -1
  %1935 = and i64 -938962662208518777, %1934
  %1936 = add i64 %1935, %101
  %1937 = xor i64 %1932, %1933
  %1938 = xor i64 %1937, -5402994740854466973
  %1939 = xor i64 %1938, %1936
  %1940 = xor i64 %1939, %1929
  %1941 = mul i64 %1927, %1940
  %1942 = trunc i64 %1941 to i32
  %.reg2mem347 = alloca i8**, i32 %1942, align 8
  %.reg2mem343 = alloca i8**, align 8
  %.reg2mem340 = alloca i8**, align 8
  %.reg2mem337 = alloca i8**, align 8
  %1943 = sext i32 %0 to i64
  %1944 = add i64 %1943, 2058401263774772401
  %1945 = xor i64 2058401263774772401, %1943
  %1946 = and i64 2058401263774772401, %1943
  %1947 = mul i64 2, %1946
  %1948 = add i64 %1945, %1947
  %1949 = add i64 %101, -3704926675962402977
  %1950 = and i64 -3704926675962402977, %101
  %1951 = or i64 -3704926675962402977, %101
  %1952 = add i64 %1950, %1951
  %1953 = sext i32 %23 to i64
  %1954 = add i64 %1953, -2690098685150315743
  %1955 = xor i64 -2690098685150315743, %1953
  %1956 = and i64 -2690098685150315743, %1953
  %1957 = mul i64 2, %1956
  %1958 = add i64 %1955, %1957
  %1959 = xor i64 %1944, %1949
  %1960 = xor i64 %1959, -2065156635147533497
  %1961 = xor i64 %1960, %1958
  %1962 = xor i64 %1961, %1948
  %1963 = xor i64 %1962, %1952
  %1964 = xor i64 %1963, %1954
  %1965 = and i64 %115, 6460320721223149942
  %1966 = or i64 -6460320721223149943, %115
  %1967 = sub i64 %1966, -6460320721223149943
  %1968 = add i64 %96, -7590431608777762547
  %1969 = sub i64 0, %96
  %1970 = sub i64 -7590431608777762547, %1969
  %1971 = xor i64 %1967, %1970
  %1972 = xor i64 %1971, 8457827087830562423
  %1973 = xor i64 %1972, %1965
  %1974 = xor i64 %1973, %1968
  %1975 = mul i64 %1964, %1974
  %1976 = trunc i64 %1975 to i32
  %.reg2mem334 = alloca i8**, i32 %1976, align 8
  %.reg2mem331 = alloca i8**, align 8
  %1977 = sext i32 %52 to i64
  %1978 = or i64 %1977, 4981099702405659689
  %1979 = xor i64 %1977, -1
  %1980 = and i64 4981099702405659689, %1979
  %1981 = add i64 %1980, %1977
  %1982 = sext i32 %63 to i64
  %1983 = or i64 %1982, 954446728299589063
  %1984 = and i64 954446728299589063, %1982
  %1985 = xor i64 954446728299589063, %1982
  %1986 = or i64 %1984, %1985
  %1987 = and i64 %108, -2287172423665294115
  %1988 = xor i64 %108, -1
  %1989 = xor i64 -2287172423665294115, %1988
  %1990 = and i64 %1989, -2287172423665294115
  %1991 = xor i64 %1990, -5659344911689401613
  %1992 = xor i64 %1991, %1983
  %1993 = xor i64 %1992, %1987
  %1994 = xor i64 %1993, %1981
  %1995 = xor i64 %1994, %1986
  %1996 = xor i64 %1995, %1978
  %1997 = sext i32 %62 to i64
  %1998 = or i64 %1997, 2841215256639124221
  %1999 = xor i64 %1997, -1
  %2000 = and i64 %1999, -2540043885201503623
  %2001 = and i64 %1997, 2540043885201503622
  %2002 = or i64 %2000, %2001
  %2003 = xor i64 -301189547775199100, %2002
  %2004 = xor i64 %1997, -1
  %2005 = or i64 -2841215256639124222, %2004
  %2006 = xor i64 %2005, -1
  %2007 = and i64 %2006, -1
  %2008 = or i64 %2003, %2007
  %2009 = sext i32 %45 to i64
  %2010 = or i64 %2009, -6080694752686855770
  %2011 = xor i64 %2009, -1
  %2012 = and i64 -6080694752686855770, %2011
  %2013 = add i64 %2012, %2009
  %2014 = xor i64 %2010, %2013
  %2015 = xor i64 %2014, %1998
  %2016 = xor i64 %2015, 5886939204377112123
  %2017 = xor i64 %2016, %2008
  %2018 = mul i64 %1996, %2017
  %2019 = trunc i64 %2018 to i32
  %.reg2mem328 = alloca i8**, i32 %2019, align 8
  %.reg2mem325 = alloca i8**, align 8
  %2020 = sext i32 %18 to i64
  %2021 = add i64 %2020, 6138384827869544915
  %2022 = add i64 -5506604218042088320, %2020
  %2023 = add i64 %2022, -6801755027797918381
  %2024 = and i64 %108, -8764135690256004891
  %2025 = xor i64 %108, -1
  %2026 = or i64 8764135690256004890, %2025
  %2027 = xor i64 %2026, -1
  %2028 = and i64 %2027, -1
  %2029 = sext i32 %82 to i64
  %2030 = and i64 %2029, -8401086522203990756
  %2031 = xor i64 %2029, -1
  %2032 = xor i64 -8401086522203990756, %2031
  %2033 = and i64 %2032, -8401086522203990756
  %2034 = xor i64 6460293813238969823, %2033
  %2035 = xor i64 %2034, %2028
  %2036 = xor i64 %2035, %2023
  %2037 = xor i64 %2036, %2024
  %2038 = xor i64 %2037, %2030
  %2039 = xor i64 %2038, %2021
  %2040 = sext i32 %81 to i64
  %2041 = and i64 %2040, -3869978445745815691
  %2042 = or i64 3869978445745815690, %2040
  %2043 = sub i64 %2042, 3869978445745815690
  %2044 = or i64 %114, 4987267280142515092
  %2045 = xor i64 %114, -1
  %2046 = and i64 4987267280142515092, %2045
  %2047 = add i64 %2046, %114
  %2048 = xor i64 %2043, %2041
  %2049 = xor i64 %2048, -6347001231028861409
  %2050 = xor i64 %2049, %2047
  %2051 = xor i64 %2050, %2044
  %2052 = mul i64 %2039, %2051
  %2053 = trunc i64 %2052 to i32
  %.reg2mem322 = alloca i8**, i32 %2053, align 8
  %.reg2mem319 = alloca i8**, align 8
  %.reg2mem316 = alloca i8**, align 8
  %2054 = sext i32 %23 to i64
  %2055 = and i64 %2054, -3250904020444400778
  %2056 = xor i64 %2054, -1
  %2057 = xor i64 -3250904020444400778, %2056
  %2058 = and i64 %2057, -3250904020444400778
  %2059 = sext i32 %81 to i64
  %2060 = and i64 %2059, -256518473986516080
  %2061 = or i64 256518473986516079, %2059
  %2062 = sub i64 %2061, 256518473986516079
  %2063 = xor i64 -8983590411672611819, %2062
  %2064 = xor i64 %2063, %2060
  %2065 = xor i64 %2064, %2055
  %2066 = xor i64 %2065, %2058
  %2067 = add i64 %101, 8953210707959621664
  %2068 = sub i64 0, %101
  %2069 = sub i64 8953210707959621664, %2068
  %2070 = sext i32 %52 to i64
  %2071 = add i64 %2070, 2614024842054558975
  %2072 = and i64 2614024842054558975, %2070
  %2073 = or i64 2614024842054558975, %2070
  %2074 = add i64 %2072, %2073
  %2075 = xor i64 %2074, %2067
  %2076 = xor i64 %2075, 7379301011813505853
  %2077 = xor i64 %2076, %2069
  %2078 = xor i64 %2077, %2071
  %2079 = mul i64 %2066, %2078
  %2080 = trunc i64 %2079 to i32
  %.reg2mem313 = alloca i8**, i32 %2080, align 8
  %.reg2mem310 = alloca i8**, align 8
  %.reg2mem307 = alloca i8**, align 8
  %.reg2mem304 = alloca i8**, align 8
  %.reg2mem301 = alloca i8**, align 8
  %.reg2mem298 = alloca i8**, align 8
  %2081 = add i64 %114, 4764819975497683099
  %2082 = xor i64 4764819975497683099, %114
  %2083 = and i64 4764819975497683099, %114
  %2084 = mul i64 2, %2083
  %2085 = add i64 %2082, %2084
  %2086 = sext i32 %17 to i64
  %2087 = add i64 %2086, 802278908623611693
  %2088 = sub i64 0, %2086
  %2089 = sub i64 802278908623611693, %2088
  %2090 = xor i64 %2085, %2087
  %2091 = xor i64 %2090, %2081
  %2092 = xor i64 %2091, 6647487756446449281
  %2093 = xor i64 %2092, %2089
  %2094 = add i64 %100, 2479276428241792824
  %2095 = sub i64 0, %100
  %2096 = add i64 -2479276428241792824, %2095
  %2097 = sub i64 0, %2096
  %2098 = sext i32 %45 to i64
  %2099 = and i64 %2098, 4809814892556834261
  %2100 = xor i64 %2098, -1
  %2101 = xor i64 4809814892556834261, %2100
  %2102 = and i64 %2101, 4809814892556834261
  %2103 = xor i64 %2094, %2102
  %2104 = xor i64 %2103, 1698409179986952577
  %2105 = xor i64 %2104, %2097
  %2106 = xor i64 %2105, %2099
  %2107 = mul i64 %2093, %2106
  %2108 = trunc i64 %2107 to i32
  %.reg2mem295 = alloca i8**, i32 %2108, align 8
  %2109 = and i64 %101, 6526718788196153122
  %2110 = or i64 -6526718788196153123, %101
  %2111 = sub i64 %2110, -6526718788196153123
  %2112 = sext i32 %17 to i64
  %2113 = and i64 %2112, -6805648760147513429
  %2114 = xor i64 %2112, -1
  %2115 = or i64 6805648760147513428, %2114
  %2116 = xor i64 %2115, -1
  %2117 = and i64 %2116, -1
  %2118 = xor i64 %2117, -5193398861962521273
  %2119 = xor i64 %2118, %2109
  %2120 = xor i64 %2119, %2111
  %2121 = xor i64 %2120, %2113
  %2122 = add i64 %113, -678839273074109015
  %2123 = add i64 -3153461013021542833, %113
  %2124 = add i64 %2123, 2474621739947433818
  %2125 = or i64 %101, -2381004474824552869
  %2126 = xor i64 %101, -1
  %2127 = and i64 %2126, -7778124205771012924
  %2128 = and i64 %101, 7778124205771012923
  %2129 = or i64 %2127, %2128
  %2130 = xor i64 5402758475397810847, %2129
  %2131 = xor i64 %101, -1
  %2132 = or i64 2381004474824552868, %2131
  %2133 = xor i64 %2132, -1
  %2134 = and i64 %2133, -1
  %2135 = or i64 %2130, %2134
  %2136 = sext i32 %38 to i64
  %2137 = add i64 %2136, 3081522341679453186
  %2138 = sub i64 0, %2136
  %2139 = sub i64 3081522341679453186, %2138
  %2140 = xor i64 %2122, %2124
  %2141 = xor i64 %2140, %2137
  %2142 = xor i64 %2141, -1151771560100182921
  %2143 = xor i64 %2142, %2139
  %2144 = xor i64 %2143, %2135
  %2145 = xor i64 %2144, %2125
  %2146 = mul i64 %2121, %2145
  %2147 = trunc i64 %2146 to i32
  %.reg2mem292 = alloca i8**, i32 %2147, align 8
  %.reg2mem289 = alloca i8**, align 8
  %2148 = and i64 %113, -7464282539079713061
  %2149 = xor i64 %113, -1
  %2150 = or i64 7464282539079713060, %2149
  %2151 = xor i64 %2150, -1
  %2152 = and i64 %2151, -1
  %2153 = sext i32 %82 to i64
  %2154 = and i64 %2153, -1742780819387722690
  %2155 = xor i64 %2153, -1
  %2156 = xor i64 -1742780819387722690, %2155
  %2157 = and i64 %2156, -1742780819387722690
  %2158 = xor i64 %2152, %2157
  %2159 = xor i64 %2158, %2154
  %2160 = xor i64 %2159, %2148
  %2161 = xor i64 %2160, -8669029068085508873
  %2162 = and i64 %101, 8129611984595147752
  %2163 = xor i64 %101, -1
  %2164 = xor i64 8129611984595147752, %2163
  %2165 = and i64 %2164, 8129611984595147752
  %2166 = and i64 %101, 6489358181583045075
  %2167 = or i64 -6489358181583045076, %101
  %2168 = sub i64 %2167, -6489358181583045076
  %2169 = sext i32 %17 to i64
  %2170 = or i64 %2169, 2693490888463986346
  %2171 = xor i64 %2169, -1
  %2172 = and i64 2693490888463986346, %2171
  %2173 = add i64 %2172, %2169
  %2174 = xor i64 %2166, %2173
  %2175 = xor i64 %2174, %2168
  %2176 = xor i64 %2175, %2162
  %2177 = xor i64 %2176, %2165
  %2178 = xor i64 %2177, -4646641331879691065
  %2179 = xor i64 %2178, %2170
  %2180 = mul i64 %2161, %2179
  %2181 = trunc i64 %2180 to i32
  %.reg2mem286 = alloca i8**, i32 %2181, align 8
  %2182 = sext i8 %112 to i64
  %2183 = or i64 %2182, 6504036945455139786
  %2184 = xor i64 %2182, -1
  %2185 = and i64 %2184, 2201892569974892598
  %2186 = and i64 %2182, -2201892569974892599
  %2187 = or i64 %2185, %2186
  %2188 = xor i64 4957419220778492924, %2187
  %2189 = xor i64 %2182, -1
  %2190 = or i64 -6504036945455139787, %2189
  %2191 = xor i64 %2190, -1
  %2192 = and i64 %2191, -1
  %2193 = or i64 %2188, %2192
  %2194 = sext i32 %62 to i64
  %2195 = and i64 %2194, -2266104064461706084
  %2196 = xor i64 %2194, -1
  %2197 = or i64 2266104064461706083, %2196
  %2198 = xor i64 %2197, -1
  %2199 = and i64 %2198, -1
  %2200 = sext i32 %67 to i64
  %2201 = add i64 %2200, -2793151643343138237
  %2202 = sub i64 0, %2200
  %2203 = sub i64 -2793151643343138237, %2202
  %2204 = xor i64 %2199, -2861078745298611669
  %2205 = xor i64 %2204, %2195
  %2206 = xor i64 %2205, %2183
  %2207 = xor i64 %2206, %2203
  %2208 = xor i64 %2207, %2193
  %2209 = xor i64 %2208, %2201
  %2210 = sext i32 %45 to i64
  %2211 = and i64 %2210, -1065949680887706332
  %2212 = or i64 1065949680887706331, %2210
  %2213 = sub i64 %2212, 1065949680887706331
  %2214 = or i64 %96, -7378023235765686214
  %2215 = xor i64 %96, -1
  %2216 = and i64 %2215, 2351615292195964224
  %2217 = and i64 %96, -2351615292195964225
  %2218 = or i64 %2216, %2217
  %2219 = xor i64 -5099935894816934534, %2218
  %2220 = xor i64 %96, -1
  %2221 = or i64 7378023235765686213, %2220
  %2222 = xor i64 %2221, -1
  %2223 = and i64 %2222, -1
  %2224 = or i64 %2219, %2223
  %2225 = xor i64 %2213, %2211
  %2226 = xor i64 %2225, -3578329204008297341
  %2227 = xor i64 %2226, %2224
  %2228 = xor i64 %2227, %2214
  %2229 = mul i64 %2209, %2228
  %2230 = trunc i64 %2229 to i32
  %.reg2mem283 = alloca i8**, i32 %2230, align 8
  %2231 = sext i32 %67 to i64
  %2232 = add i64 %2231, -7652881542121775719
  %2233 = sub i64 0, %2231
  %2234 = sub i64 -7652881542121775719, %2233
  %2235 = sext i32 %58 to i64
  %2236 = or i64 %2235, -4143841371801630090
  %2237 = xor i64 %2235, -1
  %2238 = and i64 %2237, 8743326286171309676
  %2239 = and i64 %2235, -8743326286171309677
  %2240 = or i64 %2238, %2239
  %2241 = xor i64 -4672318772518728678, %2240
  %2242 = xor i64 %2235, -1
  %2243 = or i64 4143841371801630089, %2242
  %2244 = xor i64 %2243, -1
  %2245 = and i64 %2244, -1
  %2246 = or i64 %2241, %2245
  %2247 = sext i32 %82 to i64
  %2248 = and i64 %2247, 5343596357906647930
  %2249 = xor i64 %2247, -1
  %2250 = or i64 -5343596357906647931, %2249
  %2251 = xor i64 %2250, -1
  %2252 = and i64 %2251, -1
  %2253 = xor i64 %2236, -4484869259738184467
  %2254 = xor i64 %2253, %2246
  %2255 = xor i64 %2254, %2252
  %2256 = xor i64 %2255, %2248
  %2257 = xor i64 %2256, %2232
  %2258 = xor i64 %2257, %2234
  %2259 = sext i32 %58 to i64
  %2260 = or i64 %2259, 2348022417344412000
  %2261 = xor i64 %2259, -1
  %2262 = and i64 %2261, -6693898023117112827
  %2263 = and i64 %2259, 6693898023117112826
  %2264 = or i64 %2262, %2263
  %2265 = xor i64 -8966764972208192667, %2264
  %2266 = xor i64 %2259, -1
  %2267 = or i64 -2348022417344412001, %2266
  %2268 = xor i64 %2267, -1
  %2269 = and i64 %2268, -1
  %2270 = or i64 %2265, %2269
  %2271 = sext i8 %112 to i64
  %2272 = or i64 %2271, -4303100442162800153
  %2273 = xor i64 %2271, -1
  %2274 = and i64 -4303100442162800153, %2273
  %2275 = add i64 %2274, %2271
  %2276 = sext i32 %52 to i64
  %2277 = or i64 %2276, 6358417138724002462
  %2278 = and i64 6358417138724002462, %2276
  %2279 = xor i64 6358417138724002462, %2276
  %2280 = or i64 %2278, %2279
  %2281 = xor i64 %2270, 3911537867016796389
  %2282 = xor i64 %2281, %2275
  %2283 = xor i64 %2282, %2280
  %2284 = xor i64 %2283, %2272
  %2285 = xor i64 %2284, %2260
  %2286 = xor i64 %2285, %2277
  %2287 = mul i64 %2258, %2286
  %2288 = trunc i64 %2287 to i32
  %.reg2mem280 = alloca i8**, i32 %2288, align 8
  %.reg2mem277 = alloca i8**, align 8
  %.reg2mem274 = alloca i8**, align 8
  %.reg2mem271 = alloca i8**, align 8
  %.reg2mem268 = alloca i8**, align 8
  %.reg2mem265 = alloca i8**, align 8
  %2289 = sext i32 %0 to i64
  %2290 = add i64 %2289, 6364284942949737000
  %2291 = add i64 -114203341845949109, %2289
  %2292 = sub i64 %2291, -6478488284795686109
  %2293 = sext i32 %17 to i64
  %2294 = or i64 %2293, -5694670164654939806
  %2295 = xor i64 %2293, -1
  %2296 = and i64 %2295, 8263749620329318814
  %2297 = and i64 %2293, -8263749620329318815
  %2298 = or i64 %2296, %2297
  %2299 = xor i64 -4443139857224193796, %2298
  %2300 = xor i64 %2293, -1
  %2301 = or i64 5694670164654939805, %2300
  %2302 = xor i64 %2301, -1
  %2303 = and i64 %2302, -1
  %2304 = or i64 %2299, %2303
  %2305 = sext i32 %62 to i64
  %2306 = or i64 %2305, 6793404690673633781
  %2307 = xor i64 %2305, -1
  %2308 = and i64 %2307, -1822612555697368899
  %2309 = and i64 %2305, 1822612555697368898
  %2310 = or i64 %2308, %2309
  %2311 = xor i64 -5119534929139541688, %2310
  %2312 = xor i64 %2305, -1
  %2313 = or i64 -6793404690673633782, %2312
  %2314 = xor i64 %2313, -1
  %2315 = and i64 %2314, -1
  %2316 = or i64 %2311, %2315
  %2317 = xor i64 %2304, %2316
  %2318 = xor i64 %2317, %2292
  %2319 = xor i64 %2318, %2306
  %2320 = xor i64 %2319, %2294
  %2321 = xor i64 %2320, %2290
  %2322 = xor i64 %2321, -5339712253349047213
  %2323 = sext i32 %58 to i64
  %2324 = and i64 %2323, -5642481626006435126
  %2325 = xor i64 %2323, -1
  %2326 = xor i64 -5642481626006435126, %2325
  %2327 = and i64 %2326, -5642481626006435126
  %2328 = and i64 %70, 6666048068546587545
  %2329 = or i64 -6666048068546587546, %70
  %2330 = sub i64 %2329, -6666048068546587546
  %2331 = sext i32 %17 to i64
  %2332 = or i64 %2331, 3300310912084452790
  %2333 = xor i64 %2331, -1
  %2334 = and i64 %2333, 4075400831518636273
  %2335 = and i64 %2331, -4075400831518636274
  %2336 = or i64 %2334, %2335
  %2337 = xor i64 1532266482335767879, %2336
  %2338 = xor i64 %2331, -1
  %2339 = or i64 -3300310912084452791, %2338
  %2340 = xor i64 %2339, -1
  %2341 = and i64 %2340, -1
  %2342 = or i64 %2337, %2341
  %2343 = xor i64 %2330, %2327
  %2344 = xor i64 %2343, %2324
  %2345 = xor i64 %2344, %2342
  %2346 = xor i64 %2345, %2328
  %2347 = xor i64 %2346, %2332
  %2348 = xor i64 %2347, 3968775322316902363
  %2349 = mul i64 %2322, %2348
  %2350 = trunc i64 %2349 to i32
  %.reg2mem262 = alloca i8**, i32 %2350, align 8
  %.reg2mem259 = alloca i8**, align 8
  %.reg2mem256 = alloca i8**, align 8
  %.reg2mem253 = alloca i8**, align 8
  %.reg2mem250 = alloca i8**, align 8
  %.reg2mem247 = alloca i8**, align 8
  %.reg2mem244 = alloca i8**, align 8
  %2351 = sext i32 %67 to i64
  %2352 = and i64 %2351, -163137171585598384
  %2353 = or i64 163137171585598383, %2351
  %2354 = sub i64 %2353, 163137171585598383
  %2355 = sext i32 %62 to i64
  %2356 = add i64 %2355, -1769814316120282234
  %2357 = and i64 -1769814316120282234, %2355
  %2358 = or i64 -1769814316120282234, %2355
  %2359 = add i64 %2357, %2358
  %2360 = sext i32 %82 to i64
  %2361 = add i64 %2360, 3029761738051471965
  %2362 = sub i64 0, %2360
  %2363 = sub i64 3029761738051471965, %2362
  %2364 = xor i64 %2361, %2363
  %2365 = xor i64 %2364, %2352
  %2366 = xor i64 %2365, %2356
  %2367 = xor i64 %2366, %2359
  %2368 = xor i64 %2367, %2354
  %2369 = xor i64 %2368, 6048569277624127503
  %2370 = sext i32 %18 to i64
  %2371 = and i64 %2370, -6704103462072344946
  %2372 = or i64 6704103462072344945, %2370
  %2373 = sub i64 %2372, 6704103462072344945
  %2374 = sext i32 %18 to i64
  %2375 = or i64 %2374, 4470492638141131359
  %2376 = xor i64 %2374, -1
  %2377 = and i64 4470492638141131359, %2376
  %2378 = add i64 %2377, %2374
  %2379 = add i64 %29, 2911367738195519711
  %2380 = sub i64 0, %29
  %2381 = add i64 -2911367738195519711, %2380
  %2382 = sub i64 0, %2381
  %2383 = xor i64 %2382, %2373
  %2384 = xor i64 %2383, 1655378883707166447
  %2385 = xor i64 %2384, %2371
  %2386 = xor i64 %2385, %2378
  %2387 = xor i64 %2386, %2375
  %2388 = xor i64 %2387, %2379
  %2389 = mul i64 %2369, %2388
  %2390 = trunc i64 %2389 to i32
  %.reg2mem241 = alloca i8**, i32 %2390, align 8
  %.reg2mem238 = alloca i8**, align 8
  %.reg2mem235 = alloca i8**, align 8
  %.reg2mem232 = alloca i8**, align 8
  %.reg2mem229 = alloca i8**, align 8
  %.reg2mem226 = alloca i8**, align 8
  %.reg2mem223 = alloca i8**, align 8
  %.reg2mem220 = alloca i8**, align 8
  %.reg2mem217 = alloca i8**, align 8
  %2391 = sext i32 %52 to i64
  %2392 = add i64 %2391, 4863813578211204389
  %2393 = add i64 -7132376630597188427, %2391
  %2394 = add i64 %2393, -6450553864901158800
  %2395 = sext i32 %44 to i64
  %2396 = and i64 %2395, 2469522059222368816
  %2397 = xor i64 %2395, -1
  %2398 = xor i64 2469522059222368816, %2397
  %2399 = and i64 %2398, 2469522059222368816
  %2400 = xor i64 %2399, %2392
  %2401 = xor i64 %2400, -6201622921722681903
  %2402 = xor i64 %2401, %2396
  %2403 = xor i64 %2402, %2394
  %2404 = or i64 %88, -7676822459894705290
  %2405 = xor i64 %88, -1
  %2406 = and i64 -7676822459894705290, %2405
  %2407 = add i64 %2406, %88
  %2408 = add i64 %115, 2105525629953331018
  %2409 = sub i64 0, %115
  %2410 = sub i64 2105525629953331018, %2409
  %2411 = xor i64 %2404, -78496900263062735
  %2412 = xor i64 %2411, %2408
  %2413 = xor i64 %2412, %2407
  %2414 = xor i64 %2413, %2410
  %2415 = mul i64 %2403, %2414
  %2416 = trunc i64 %2415 to i32
  %.reg2mem214 = alloca i8**, i32 %2416, align 8
  %.reg2mem211 = alloca i8**, align 8
  %2417 = sext i32 %21 to i64
  %2418 = add i64 %2417, -4152947242042039418
  %2419 = sub i64 0, %2417
  %2420 = add i64 4152947242042039418, %2419
  %2421 = sub i64 0, %2420
  %2422 = and i64 %108, -3226862829546081514
  %2423 = xor i64 %108, -1
  %2424 = xor i64 -3226862829546081514, %2423
  %2425 = and i64 %2424, -3226862829546081514
  %2426 = xor i64 %2422, %2421
  %2427 = xor i64 %2426, %2418
  %2428 = xor i64 %2427, %2425
  %2429 = xor i64 %2428, 3430945249725906479
  %2430 = or i64 %101, -7343377409791311117
  %2431 = xor i64 %101, -1
  %2432 = and i64 %2431, -1009437450323522914
  %2433 = and i64 %101, 1009437450323522913
  %2434 = or i64 %2432, %2433
  %2435 = xor i64 7776261746418731117, %2434
  %2436 = xor i64 %101, -1
  %2437 = or i64 7343377409791311116, %2436
  %2438 = xor i64 %2437, -1
  %2439 = and i64 %2438, -1
  %2440 = or i64 %2435, %2439
  %2441 = sext i32 %53 to i64
  %2442 = or i64 %2441, -7794998178720758570
  %2443 = xor i64 %2441, -1
  %2444 = and i64 %2443, -2934410399686315244
  %2445 = and i64 %2441, 2934410399686315243
  %2446 = or i64 %2444, %2445
  %2447 = xor i64 4941710193625167810, %2446
  %2448 = xor i64 %2441, -1
  %2449 = or i64 7794998178720758569, %2448
  %2450 = xor i64 %2449, -1
  %2451 = and i64 %2450, -1
  %2452 = or i64 %2447, %2451
  %2453 = xor i64 %2452, %2442
  %2454 = xor i64 %2453, %2430
  %2455 = xor i64 %2454, %2440
  %2456 = xor i64 %2455, 1395027655123142863
  %2457 = mul i64 %2429, %2456
  %2458 = trunc i64 %2457 to i32
  %.reg2mem208 = alloca i8**, i32 %2458, align 8
  %.reg2mem205 = alloca i8**, align 8
  %.reg2mem202 = alloca i8**, align 8
  %.reg2mem199 = alloca i8**, align 8
  %.reg2mem196 = alloca i8**, align 8
  %.reg2mem193 = alloca i8**, align 8
  %.reg2mem190 = alloca i8**, align 8
  %.reg2mem187 = alloca i8**, align 8
  %.reg2mem184 = alloca i8**, align 8
  %.reg2mem181 = alloca i8**, align 8
  %.reg2mem178 = alloca i8**, align 8
  %.reg2mem175 = alloca i8**, align 8
  %.reg2mem172 = alloca i8**, align 8
  %.reg2mem168 = alloca i8**, align 8
  %.reg2mem165 = alloca i8**, align 8
  %.reg2mem162 = alloca i8**, align 8
  %.reg2mem159 = alloca i8**, align 8
  %.reg2mem156 = alloca i8**, align 8
  %.reg2mem153 = alloca i8**, align 8
  %2459 = sext i32 %58 to i64
  %2460 = add i64 %2459, 2852842653120739648
  %2461 = and i64 2852842653120739648, %2459
  %2462 = or i64 2852842653120739648, %2459
  %2463 = add i64 %2461, %2462
  %2464 = or i64 %88, 7246687019337642325
  %2465 = and i64 7246687019337642325, %88
  %2466 = xor i64 7246687019337642325, %88
  %2467 = or i64 %2465, %2466
  %2468 = sext i32 %82 to i64
  %2469 = add i64 %2468, 6324351345617142993
  %2470 = xor i64 6324351345617142993, %2468
  %2471 = and i64 6324351345617142993, %2468
  %2472 = mul i64 2, %2471
  %2473 = add i64 %2470, %2472
  %2474 = xor i64 %2464, %2467
  %2475 = xor i64 %2474, %2460
  %2476 = xor i64 %2475, %2473
  %2477 = xor i64 %2476, %2469
  %2478 = xor i64 %2477, %2463
  %2479 = xor i64 %2478, 7849850491846073797
  %2480 = and i64 %100, -2088504689801088877
  %2481 = or i64 2088504689801088876, %100
  %2482 = sub i64 %2481, 2088504689801088876
  %2483 = sext i32 %18 to i64
  %2484 = and i64 %2483, -6135304835619863614
  %2485 = xor i64 %2483, -1
  %2486 = xor i64 -6135304835619863614, %2485
  %2487 = and i64 %2486, -6135304835619863614
  %2488 = xor i64 %2480, %2484
  %2489 = xor i64 %2488, 5941269147790891277
  %2490 = xor i64 %2489, %2487
  %2491 = xor i64 %2490, %2482
  %2492 = mul i64 %2479, %2491
  %2493 = trunc i64 %2492 to i32
  %.reg2mem150 = alloca i8**, i32 %2493, align 8
  %.reg2mem147 = alloca i8**, align 8
  %.reg2mem144 = alloca i8**, align 8
  %.reg2mem141 = alloca i8**, align 8
  %.reg2mem138 = alloca i8**, align 8
  %2494 = sext i32 %66 to i64
  %2495 = and i64 %2494, -8339561706358922887
  %2496 = or i64 8339561706358922886, %2494
  %2497 = sub i64 %2496, 8339561706358922886
  %2498 = or i64 %70, -8455272930189769461
  %2499 = and i64 -8455272930189769461, %70
  %2500 = xor i64 -8455272930189769461, %70
  %2501 = or i64 %2499, %2500
  %2502 = sext i32 %67 to i64
  %2503 = or i64 %2502, -2219533233020604232
  %2504 = xor i64 %2502, -1
  %2505 = and i64 %2504, -2493930649122312742
  %2506 = and i64 %2502, 2493930649122312741
  %2507 = or i64 %2505, %2506
  %2508 = xor i64 4346366170396040546, %2507
  %2509 = xor i64 %2502, -1
  %2510 = or i64 2219533233020604231, %2509
  %2511 = xor i64 %2510, -1
  %2512 = and i64 %2511, -1
  %2513 = or i64 %2508, %2512
  %2514 = xor i64 %2513, %2495
  %2515 = xor i64 %2514, %2497
  %2516 = xor i64 %2515, %2501
  %2517 = xor i64 %2516, %2498
  %2518 = xor i64 %2517, -2571277865255158249
  %2519 = xor i64 %2518, %2503
  %2520 = sext i32 %58 to i64
  %2521 = add i64 %2520, -2206092422174787084
  %2522 = sub i64 0, %2520
  %2523 = add i64 2206092422174787084, %2522
  %2524 = sub i64 0, %2523
  %2525 = add i64 %96, -866514490076734858
  %2526 = sub i64 0, %96
  %2527 = sub i64 -866514490076734858, %2526
  %2528 = xor i64 %2527, 1207585759215147431
  %2529 = xor i64 %2528, %2521
  %2530 = xor i64 %2529, %2525
  %2531 = xor i64 %2530, %2524
  %2532 = mul i64 %2519, %2531
  %2533 = trunc i64 %2532 to i32
  %.reg2mem135 = alloca i8**, i32 %2533, align 8
  %2534 = sext i32 %58 to i64
  %2535 = or i64 %2534, 8678271131506424613
  %2536 = xor i64 %2534, -1
  %2537 = and i64 %2536, -1171245265190073782
  %2538 = and i64 %2534, 1171245265190073781
  %2539 = or i64 %2537, %2538
  %2540 = xor i64 -7507061605812965009, %2539
  %2541 = xor i64 %2534, -1
  %2542 = or i64 -8678271131506424614, %2541
  %2543 = xor i64 %2542, -1
  %2544 = and i64 %2543, -1
  %2545 = or i64 %2540, %2544
  %2546 = sext i32 %21 to i64
  %2547 = and i64 %2546, 1843541316903185880
  %2548 = xor i64 %2546, -1
  %2549 = or i64 -1843541316903185881, %2548
  %2550 = xor i64 %2549, -1
  %2551 = and i64 %2550, -1
  %2552 = sext i32 %67 to i64
  %2553 = and i64 %2552, -7851796723236857785
  %2554 = or i64 7851796723236857784, %2552
  %2555 = sub i64 %2554, 7851796723236857784
  %2556 = xor i64 %2553, %2551
  %2557 = xor i64 %2556, %2535
  %2558 = xor i64 %2557, 7576982804044836905
  %2559 = xor i64 %2558, %2545
  %2560 = xor i64 %2559, %2555
  %2561 = xor i64 %2560, %2547
  %2562 = sext i32 %63 to i64
  %2563 = add i64 %2562, -4371279617939925506
  %2564 = and i64 -4371279617939925506, %2562
  %2565 = or i64 -4371279617939925506, %2562
  %2566 = add i64 %2564, %2565
  %2567 = sext i32 %21 to i64
  %2568 = and i64 %2567, 7615968286718326483
  %2569 = or i64 -7615968286718326484, %2567
  %2570 = sub i64 %2569, -7615968286718326484
  %2571 = xor i64 %2570, %2568
  %2572 = xor i64 %2571, %2563
  %2573 = xor i64 %2572, 4396551102145801241
  %2574 = xor i64 %2573, %2566
  %2575 = mul i64 %2561, %2574
  %2576 = trunc i64 %2575 to i32
  %.reg2mem132 = alloca i8**, i32 %2576, align 8
  %2577 = or i64 %88, 8803131321945793023
  %2578 = and i64 8803131321945793023, %88
  %2579 = xor i64 8803131321945793023, %88
  %2580 = or i64 %2578, %2579
  %2581 = sext i32 %81 to i64
  %2582 = add i64 %2581, -7818175728504654096
  %2583 = sub i64 0, %2581
  %2584 = add i64 7818175728504654096, %2583
  %2585 = sub i64 0, %2584
  %2586 = sext i32 %53 to i64
  %2587 = and i64 %2586, 6836355937457458266
  %2588 = or i64 -6836355937457458267, %2586
  %2589 = sub i64 %2588, -6836355937457458267
  %2590 = xor i64 %2587, %2589
  %2591 = xor i64 %2590, %2580
  %2592 = xor i64 %2591, %2577
  %2593 = xor i64 %2592, %2585
  %2594 = xor i64 %2593, -5741984481537271951
  %2595 = xor i64 %2594, %2582
  %2596 = and i64 %88, 4787413428105028689
  %2597 = or i64 -4787413428105028690, %88
  %2598 = sub i64 %2597, -4787413428105028690
  %2599 = sext i32 %21 to i64
  %2600 = or i64 %2599, -7879219751496756737
  %2601 = and i64 -7879219751496756737, %2599
  %2602 = xor i64 -7879219751496756737, %2599
  %2603 = or i64 %2601, %2602
  %2604 = and i64 %114, -8060536824918847883
  %2605 = xor i64 %114, -1
  %2606 = or i64 8060536824918847882, %2605
  %2607 = xor i64 %2606, -1
  %2608 = and i64 %2607, -1
  %2609 = xor i64 %2603, -4191409518455191151
  %2610 = xor i64 %2609, %2596
  %2611 = xor i64 %2610, %2608
  %2612 = xor i64 %2611, %2600
  %2613 = xor i64 %2612, %2598
  %2614 = xor i64 %2613, %2604
  %2615 = mul i64 %2595, %2614
  %2616 = trunc i64 %2615 to i32
  %.reg2mem129 = alloca i8**, i32 %2616, align 8
  %.reg2mem126 = alloca i8**, align 8
  %.reg2mem123 = alloca i8**, align 8
  %.reg2mem120 = alloca i8**, align 8
  %.reg2mem117 = alloca i8**, align 8
  %.reg2mem114 = alloca i8**, align 8
  %.reg2mem111 = alloca i8**, align 8
  %2617 = and i64 %100, -1547867465526014444
  %2618 = or i64 1547867465526014443, %100
  %2619 = sub i64 %2618, 1547867465526014443
  %2620 = add i64 %100, -5641276585787473470
  %2621 = add i64 86115308129197112, %100
  %2622 = sub i64 %2621, 5727391893916670582
  %2623 = xor i64 %2622, %2619
  %2624 = xor i64 %2623, %2620
  %2625 = xor i64 %2624, %2617
  %2626 = xor i64 %2625, 4159772560184052565
  %2627 = sext i32 %67 to i64
  %2628 = or i64 %2627, -2003017017984525181
  %2629 = and i64 -2003017017984525181, %2627
  %2630 = xor i64 -2003017017984525181, %2627
  %2631 = or i64 %2629, %2630
  %2632 = sext i32 %17 to i64
  %2633 = or i64 %2632, -8696686867101073762
  %2634 = xor i64 %2632, -1
  %2635 = and i64 %2634, 736952012075413542
  %2636 = and i64 %2632, -736952012075413543
  %2637 = or i64 %2635, %2636
  %2638 = xor i64 -8253685604166857032, %2637
  %2639 = xor i64 %2632, -1
  %2640 = or i64 8696686867101073761, %2639
  %2641 = xor i64 %2640, -1
  %2642 = and i64 %2641, -1
  %2643 = or i64 %2638, %2642
  %2644 = xor i64 %2643, %2628
  %2645 = xor i64 %2644, 4830935581242661373
  %2646 = xor i64 %2645, %2633
  %2647 = xor i64 %2646, %2631
  %2648 = mul i64 %2626, %2647
  %2649 = trunc i64 %2648 to i32
  %.reg2mem108 = alloca i8**, i32 %2649, align 8
  %2650 = sext i32 %58 to i64
  %2651 = and i64 %2650, -4547750892581966128
  %2652 = xor i64 %2650, -1
  %2653 = xor i64 -4547750892581966128, %2652
  %2654 = and i64 %2653, -4547750892581966128
  %2655 = sext i32 %66 to i64
  %2656 = or i64 %2655, 1264594389900147889
  %2657 = xor i64 %2655, -1
  %2658 = and i64 %2657, -1673522443505254833
  %2659 = and i64 %2655, 1673522443505254832
  %2660 = or i64 %2658, %2659
  %2661 = xor i64 -483352108124699906, %2660
  %2662 = xor i64 %2655, -1
  %2663 = or i64 -1264594389900147890, %2662
  %2664 = xor i64 %2663, -1
  %2665 = and i64 %2664, -1
  %2666 = or i64 %2661, %2665
  %2667 = xor i64 %2656, %2651
  %2668 = xor i64 %2667, %2654
  %2669 = xor i64 %2668, -8308537212463589391
  %2670 = xor i64 %2669, %2666
  %2671 = sext i32 %18 to i64
  %2672 = and i64 %2671, -2549747307177104645
  %2673 = xor i64 %2671, -1
  %2674 = xor i64 -2549747307177104645, %2673
  %2675 = and i64 %2674, -2549747307177104645
  %2676 = sext i32 %58 to i64
  %2677 = or i64 %2676, 1758154717917438734
  %2678 = and i64 1758154717917438734, %2676
  %2679 = xor i64 1758154717917438734, %2676
  %2680 = or i64 %2678, %2679
  %2681 = xor i64 %2675, %2680
  %2682 = xor i64 %2681, %2677
  %2683 = xor i64 %2682, -9186509252976461551
  %2684 = xor i64 %2683, %2672
  %2685 = mul i64 %2670, %2684
  %2686 = trunc i64 %2685 to i32
  %.reg2mem105 = alloca i8**, i32 %2686, align 8
  %.reg2mem102 = alloca i8**, align 8
  %.reg2mem99 = alloca i8**, align 8
  %.reg2mem96 = alloca i8**, align 8
  %.reg2mem93 = alloca i8**, align 8
  %.reg2mem90 = alloca i8**, align 8
  %.reg2mem87 = alloca i8**, align 8
  %.reg2mem84 = alloca i8**, align 8
  %.reg2mem81 = alloca i8**, align 8
  %2687 = sext i32 %59 to i64
  %2688 = add i64 %2687, 1002954516382197429
  %2689 = sub i64 0, %2687
  %2690 = sub i64 1002954516382197429, %2689
  %2691 = sext i32 %66 to i64
  %2692 = and i64 %2691, -4893749223422842144
  %2693 = xor i64 %2691, -1
  %2694 = xor i64 -4893749223422842144, %2693
  %2695 = and i64 %2694, -4893749223422842144
  %2696 = xor i64 %2690, %2688
  %2697 = xor i64 %2696, %2695
  %2698 = xor i64 %2697, 6647808226607777439
  %2699 = xor i64 %2698, %2692
  %2700 = sext i32 %52 to i64
  %2701 = or i64 %2700, 669274425004996549
  %2702 = and i64 669274425004996549, %2700
  %2703 = xor i64 669274425004996549, %2700
  %2704 = or i64 %2702, %2703
  %2705 = sext i32 %58 to i64
  %2706 = or i64 %2705, 2136174641732992141
  %2707 = xor i64 %2705, -1
  %2708 = and i64 2136174641732992141, %2707
  %2709 = add i64 %2708, %2705
  %2710 = sext i32 %38 to i64
  %2711 = or i64 %2710, -2407596147076249837
  %2712 = xor i64 %2710, -1
  %2713 = and i64 %2712, 9095811027910504024
  %2714 = and i64 %2710, -9095811027910504025
  %2715 = or i64 %2713, %2714
  %2716 = xor i64 -6869027373866260149, %2715
  %2717 = xor i64 %2710, -1
  %2718 = or i64 2407596147076249836, %2717
  %2719 = xor i64 %2718, -1
  %2720 = and i64 %2719, -1
  %2721 = or i64 %2716, %2720
  %2722 = xor i64 %2711, %2721
  %2723 = xor i64 %2722, 4773910965362971999
  %2724 = xor i64 %2723, %2701
  %2725 = xor i64 %2724, %2709
  %2726 = xor i64 %2725, %2706
  %2727 = xor i64 %2726, %2704
  %2728 = mul i64 %2699, %2727
  %2729 = trunc i64 %2728 to i32
  %.reg2mem78 = alloca i8**, i32 %2729, align 8
  %.reg2mem75 = alloca i8**, align 8
  %2730 = and i64 %108, -5955742239740801165
  %2731 = xor i64 %108, -1
  %2732 = xor i64 -5955742239740801165, %2731
  %2733 = and i64 %2732, -5955742239740801165
  %2734 = sext i32 %0 to i64
  %2735 = and i64 %2734, 306841012115857596
  %2736 = xor i64 %2734, -1
  %2737 = or i64 -306841012115857597, %2736
  %2738 = xor i64 %2737, -1
  %2739 = and i64 %2738, -1
  %2740 = xor i64 %2730, %2739
  %2741 = xor i64 %2740, %2733
  %2742 = xor i64 %2741, %2735
  %2743 = xor i64 %2742, 8137109644827421923
  %2744 = add i64 %115, -5241631585574982397
  %2745 = and i64 -5241631585574982397, %115
  %2746 = or i64 -5241631585574982397, %115
  %2747 = add i64 %2745, %2746
  %2748 = sext i32 %59 to i64
  %2749 = and i64 %2748, 439563548872738371
  %2750 = xor i64 %2748, -1
  %2751 = xor i64 439563548872738371, %2750
  %2752 = and i64 %2751, 439563548872738371
  %2753 = xor i64 %2752, %2744
  %2754 = xor i64 %2753, %2747
  %2755 = xor i64 %2754, -6516131222498002741
  %2756 = xor i64 %2755, %2749
  %2757 = mul i64 %2743, %2756
  %2758 = trunc i64 %2757 to i32
  %.reg2mem72 = alloca i8**, i32 %2758, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 148, align 8
  %2759 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@"5784248439022692321", %BogusBasciBlock), i8** %2759, align 8
  %2760 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %2760, i8*** %.reg2mem, align 8
  %.reload71 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@"5784248439022692321", %EntryBasicBlockSplit), i8** %.reload71, align 8
  %2761 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %2761, i8*** %.reg2mem72, align 8
  %.reload74 = load i8**, i8*** %.reg2mem72, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock59), i8** %.reload74, align 8
  %2762 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %2762, i8*** %.reg2mem75, align 8
  %.reload77 = load i8**, i8*** %.reg2mem75, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock57), i8** %.reload77, align 8
  %2763 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %2763, i8*** %.reg2mem78, align 8
  %.reload80 = load i8**, i8*** %.reg2mem78, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock55), i8** %.reload80, align 8
  %2764 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %2764, i8*** %.reg2mem81, align 8
  %.reload83 = load i8**, i8*** %.reg2mem81, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock53), i8** %.reload83, align 8
  %2765 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %2765, i8*** %.reg2mem84, align 8
  %.reload86 = load i8**, i8*** %.reg2mem84, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock51), i8** %.reload86, align 8
  %2766 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %2766, i8*** %.reg2mem87, align 8
  %.reload89 = load i8**, i8*** %.reg2mem87, align 8
  store i8* blockaddress(@"5784248439022692321", %LeafBlock49), i8** %.reload89, align 8
  %2767 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %2767, i8*** %.reg2mem90, align 8
  %.reload92 = load i8**, i8*** %.reg2mem90, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock47), i8** %.reload92, align 8
  %2768 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %2768, i8*** %.reg2mem93, align 8
  %.reload95 = load i8**, i8*** %.reg2mem93, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock45), i8** %.reload95, align 8
  %2769 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %2769, i8*** %.reg2mem96, align 8
  %.reload98 = load i8**, i8*** %.reg2mem96, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock43), i8** %.reload98, align 8
  %2770 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %2770, i8*** %.reg2mem99, align 8
  %.reload101 = load i8**, i8*** %.reg2mem99, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock41), i8** %.reload101, align 8
  %2771 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %2771, i8*** %.reg2mem102, align 8
  %.reload104 = load i8**, i8*** %.reg2mem102, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock39), i8** %.reload104, align 8
  %2772 = getelementptr i8*, i8** %JumpTable, i32 13
  store i8** %2772, i8*** %.reg2mem105, align 8
  %.reload107 = load i8**, i8*** %.reg2mem105, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock37), i8** %.reload107, align 8
  %2773 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8** %2773, i8*** %.reg2mem108, align 8
  %.reload110 = load i8**, i8*** %.reg2mem108, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock35), i8** %.reload110, align 8
  %2774 = getelementptr i8*, i8** %JumpTable, i32 15
  store i8** %2774, i8*** %.reg2mem111, align 8
  %.reload113 = load i8**, i8*** %.reg2mem111, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock33), i8** %.reload113, align 8
  %2775 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8** %2775, i8*** %.reg2mem114, align 8
  %.reload116 = load i8**, i8*** %.reg2mem114, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock31), i8** %.reload116, align 8
  %2776 = getelementptr i8*, i8** %JumpTable, i32 17
  store i8** %2776, i8*** %.reg2mem117, align 8
  %.reload119 = load i8**, i8*** %.reg2mem117, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock29), i8** %.reload119, align 8
  %2777 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8** %2777, i8*** %.reg2mem120, align 8
  %.reload122 = load i8**, i8*** %.reg2mem120, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock27), i8** %.reload122, align 8
  %2778 = getelementptr i8*, i8** %JumpTable, i32 19
  store i8** %2778, i8*** %.reg2mem123, align 8
  %.reload125 = load i8**, i8*** %.reg2mem123, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock25), i8** %.reload125, align 8
  %2779 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8** %2779, i8*** %.reg2mem126, align 8
  %.reload128 = load i8**, i8*** %.reg2mem126, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock23), i8** %.reload128, align 8
  %2780 = getelementptr i8*, i8** %JumpTable, i32 21
  store i8** %2780, i8*** %.reg2mem129, align 8
  %.reload131 = load i8**, i8*** %.reg2mem129, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock21), i8** %.reload131, align 8
  %2781 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8** %2781, i8*** %.reg2mem132, align 8
  %.reload134 = load i8**, i8*** %.reg2mem132, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock19), i8** %.reload134, align 8
  %2782 = getelementptr i8*, i8** %JumpTable, i32 23
  store i8** %2782, i8*** %.reg2mem135, align 8
  %.reload137 = load i8**, i8*** %.reg2mem135, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock17), i8** %.reload137, align 8
  %2783 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8** %2783, i8*** %.reg2mem138, align 8
  %.reload140 = load i8**, i8*** %.reg2mem138, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock15), i8** %.reload140, align 8
  %2784 = getelementptr i8*, i8** %JumpTable, i32 25
  store i8** %2784, i8*** %.reg2mem141, align 8
  %.reload143 = load i8**, i8*** %.reg2mem141, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock13), i8** %.reload143, align 8
  %2785 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8** %2785, i8*** %.reg2mem144, align 8
  %.reload146 = load i8**, i8*** %.reg2mem144, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock11), i8** %.reload146, align 8
  %2786 = getelementptr i8*, i8** %JumpTable, i32 27
  store i8** %2786, i8*** %.reg2mem147, align 8
  %.reload149 = load i8**, i8*** %.reg2mem147, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock9), i8** %.reload149, align 8
  %2787 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8** %2787, i8*** %.reg2mem150, align 8
  %.reload152 = load i8**, i8*** %.reg2mem150, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock7), i8** %.reload152, align 8
  %2788 = getelementptr i8*, i8** %JumpTable, i32 29
  store i8** %2788, i8*** %.reg2mem153, align 8
  %.reload155 = load i8**, i8*** %.reg2mem153, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock5), i8** %.reload155, align 8
  %2789 = getelementptr i8*, i8** %JumpTable, i32 30
  store i8** %2789, i8*** %.reg2mem156, align 8
  %.reload158 = load i8**, i8*** %.reg2mem156, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock3), i8** %.reload158, align 8
  %2790 = getelementptr i8*, i8** %JumpTable, i32 31
  store i8** %2790, i8*** %.reg2mem159, align 8
  %.reload161 = load i8**, i8*** %.reg2mem159, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock1), i8** %.reload161, align 8
  %2791 = getelementptr i8*, i8** %JumpTable, i32 32
  store i8** %2791, i8*** %.reg2mem162, align 8
  %.reload164 = load i8**, i8*** %.reg2mem162, align 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock), i8** %.reload164, align 8
  %2792 = getelementptr i8*, i8** %JumpTable, i32 33
  store i8** %2792, i8*** %.reg2mem165, align 8
  %.reload167 = load i8**, i8*** %.reg2mem165, align 8
  store i8* blockaddress(@"5784248439022692321", %LeafBlock), i8** %.reload167, align 8
  %2793 = getelementptr i8*, i8** %JumpTable, i32 34
  store i8** %2793, i8*** %.reg2mem168, align 8
  %.reload171 = load i8**, i8*** %.reg2mem168, align 8
  store i8* blockaddress(@"5784248439022692321", %"34"), i8** %.reload171, align 8
  %2794 = getelementptr i8*, i8** %JumpTable, i32 35
  store i8** %2794, i8*** %.reg2mem172, align 8
  %.reload174 = load i8**, i8*** %.reg2mem172, align 8
  store i8* blockaddress(@"5784248439022692321", %"35"), i8** %.reload174, align 8
  %2795 = getelementptr i8*, i8** %JumpTable, i32 36
  store i8** %2795, i8*** %.reg2mem175, align 8
  %.reload177 = load i8**, i8*** %.reg2mem175, align 8
  store i8* blockaddress(@"5784248439022692321", %"36"), i8** %.reload177, align 8
  %2796 = getelementptr i8*, i8** %JumpTable, i32 37
  store i8** %2796, i8*** %.reg2mem178, align 8
  %.reload180 = load i8**, i8*** %.reg2mem178, align 8
  store i8* blockaddress(@"5784248439022692321", %"37"), i8** %.reload180, align 8
  %2797 = getelementptr i8*, i8** %JumpTable, i32 38
  store i8** %2797, i8*** %.reg2mem181, align 8
  %.reload183 = load i8**, i8*** %.reg2mem181, align 8
  store i8* blockaddress(@"5784248439022692321", %"38"), i8** %.reload183, align 8
  %2798 = getelementptr i8*, i8** %JumpTable, i32 39
  store i8** %2798, i8*** %.reg2mem184, align 8
  %.reload186 = load i8**, i8*** %.reg2mem184, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot), i8** %.reload186, align 8
  %2799 = getelementptr i8*, i8** %JumpTable, i32 40
  store i8** %2799, i8*** %.reg2mem187, align 8
  %.reload189 = load i8**, i8*** %.reg2mem187, align 8
  store i8* blockaddress(@"5784248439022692321", %"40"), i8** %.reload189, align 8
  %2800 = getelementptr i8*, i8** %JumpTable, i32 41
  store i8** %2800, i8*** %.reg2mem190, align 8
  %.reload192 = load i8**, i8*** %.reg2mem190, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub), i8** %.reload192, align 8
  %2801 = getelementptr i8*, i8** %JumpTable, i32 42
  store i8** %2801, i8*** %.reg2mem193, align 8
  %.reload195 = load i8**, i8*** %.reg2mem193, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub2), i8** %.reload195, align 8
  %2802 = getelementptr i8*, i8** %JumpTable, i32 43
  store i8** %2802, i8*** %.reg2mem196, align 8
  %.reload198 = load i8**, i8*** %.reg2mem196, align 8
  store i8* blockaddress(@"5784248439022692321", %"43"), i8** %.reload198, align 8
  %2803 = getelementptr i8*, i8** %JumpTable, i32 44
  store i8** %2803, i8*** %.reg2mem199, align 8
  %.reload201 = load i8**, i8*** %.reg2mem199, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot1), i8** %.reload201, align 8
  %2804 = getelementptr i8*, i8** %JumpTable, i32 45
  store i8** %2804, i8*** %.reg2mem202, align 8
  %.reload204 = load i8**, i8*** %.reg2mem202, align 8
  store i8* blockaddress(@"5784248439022692321", %"45"), i8** %.reload204, align 8
  %2805 = getelementptr i8*, i8** %JumpTable, i32 46
  store i8** %2805, i8*** %.reg2mem205, align 8
  %.reload207 = load i8**, i8*** %.reg2mem205, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl), i8** %.reload207, align 8
  %2806 = getelementptr i8*, i8** %JumpTable, i32 47
  store i8** %2806, i8*** %.reg2mem208, align 8
  %.reload210 = load i8**, i8*** %.reg2mem208, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub3), i8** %.reload210, align 8
  %2807 = getelementptr i8*, i8** %JumpTable, i32 48
  store i8** %2807, i8*** %.reg2mem211, align 8
  %.reload213 = load i8**, i8*** %.reg2mem211, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub1), i8** %.reload213, align 8
  %2808 = getelementptr i8*, i8** %JumpTable, i32 49
  store i8** %2808, i8*** %.reg2mem214, align 8
  %.reload216 = load i8**, i8*** %.reg2mem214, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot4), i8** %.reload216, align 8
  %2809 = getelementptr i8*, i8** %JumpTable, i32 50
  store i8** %2809, i8*** %.reg2mem217, align 8
  %.reload219 = load i8**, i8*** %.reg2mem217, align 8
  store i8* blockaddress(@"5784248439022692321", %"50"), i8** %.reload219, align 8
  %2810 = getelementptr i8*, i8** %JumpTable, i32 51
  store i8** %2810, i8*** %.reg2mem220, align 8
  %.reload222 = load i8**, i8*** %.reg2mem220, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub), i8** %.reload222, align 8
  %2811 = getelementptr i8*, i8** %JumpTable, i32 52
  store i8** %2811, i8*** %.reg2mem223, align 8
  %.reload225 = load i8**, i8*** %.reg2mem223, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub2.exitStub), i8** %.reload225, align 8
  %2812 = getelementptr i8*, i8** %JumpTable, i32 53
  store i8** %2812, i8*** %.reg2mem226, align 8
  %.reload228 = load i8**, i8*** %.reg2mem226, align 8
  store i8* blockaddress(@"5784248439022692321", %"53"), i8** %.reload228, align 8
  %2813 = getelementptr i8*, i8** %JumpTable, i32 54
  store i8** %2813, i8*** %.reg2mem229, align 8
  %.reload231 = load i8**, i8*** %.reg2mem229, align 8
  store i8* blockaddress(@"5784248439022692321", %"54"), i8** %.reload231, align 8
  %2814 = getelementptr i8*, i8** %JumpTable, i32 55
  store i8** %2814, i8*** %.reg2mem232, align 8
  %.reload234 = load i8**, i8*** %.reg2mem232, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot5), i8** %.reload234, align 8
  %2815 = getelementptr i8*, i8** %JumpTable, i32 56
  store i8** %2815, i8*** %.reg2mem235, align 8
  %.reload237 = load i8**, i8*** %.reg2mem235, align 8
  store i8* blockaddress(@"5784248439022692321", %"56"), i8** %.reload237, align 8
  %2816 = getelementptr i8*, i8** %JumpTable, i32 57
  store i8** %2816, i8*** %.reg2mem238, align 8
  %.reload240 = load i8**, i8*** %.reg2mem238, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub6), i8** %.reload240, align 8
  %2817 = getelementptr i8*, i8** %JumpTable, i32 58
  store i8** %2817, i8*** %.reg2mem241, align 8
  %.reload243 = load i8**, i8*** %.reg2mem241, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl.exitStub.exitStub), i8** %.reload243, align 8
  %2818 = getelementptr i8*, i8** %JumpTable, i32 59
  store i8** %2818, i8*** %.reg2mem244, align 8
  %.reload246 = load i8**, i8*** %.reg2mem244, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot7), i8** %.reload246, align 8
  %2819 = getelementptr i8*, i8** %JumpTable, i32 60
  store i8** %2819, i8*** %.reg2mem247, align 8
  %.reload249 = load i8**, i8*** %.reg2mem247, align 8
  store i8* blockaddress(@"5784248439022692321", %"60"), i8** %.reload249, align 8
  %2820 = getelementptr i8*, i8** %JumpTable, i32 61
  store i8** %2820, i8*** %.reg2mem250, align 8
  %.reload252 = load i8**, i8*** %.reg2mem250, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl8), i8** %.reload252, align 8
  %2821 = getelementptr i8*, i8** %JumpTable, i32 62
  store i8** %2821, i8*** %.reg2mem253, align 8
  %.reload255 = load i8**, i8*** %.reg2mem253, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub10), i8** %.reload255, align 8
  %2822 = getelementptr i8*, i8** %JumpTable, i32 63
  store i8** %2822, i8*** %.reg2mem256, align 8
  %.reload258 = load i8**, i8*** %.reg2mem256, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub211), i8** %.reload258, align 8
  %2823 = getelementptr i8*, i8** %JumpTable, i32 64
  store i8** %2823, i8*** %.reg2mem259, align 8
  %.reload261 = load i8**, i8*** %.reg2mem259, align 8
  store i8* blockaddress(@"5784248439022692321", %"64"), i8** %.reload261, align 8
  %2824 = getelementptr i8*, i8** %JumpTable, i32 65
  store i8** %2824, i8*** %.reg2mem262, align 8
  %.reload264 = load i8**, i8*** %.reg2mem262, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot12), i8** %.reload264, align 8
  %2825 = getelementptr i8*, i8** %JumpTable, i32 66
  store i8** %2825, i8*** %.reg2mem265, align 8
  %.reload267 = load i8**, i8*** %.reg2mem265, align 8
  store i8* blockaddress(@"5784248439022692321", %"66"), i8** %.reload267, align 8
  %2826 = getelementptr i8*, i8** %JumpTable, i32 67
  store i8** %2826, i8*** %.reg2mem268, align 8
  %.reload270 = load i8**, i8*** %.reg2mem268, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub13), i8** %.reload270, align 8
  %2827 = getelementptr i8*, i8** %JumpTable, i32 68
  store i8** %2827, i8*** %.reg2mem271, align 8
  %.reload273 = load i8**, i8*** %.reg2mem271, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub3.exitStub), i8** %.reload273, align 8
  %2828 = getelementptr i8*, i8** %JumpTable, i32 69
  store i8** %2828, i8*** %.reg2mem274, align 8
  %.reload276 = load i8**, i8*** %.reg2mem274, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot14), i8** %.reload276, align 8
  %2829 = getelementptr i8*, i8** %JumpTable, i32 70
  store i8** %2829, i8*** %.reg2mem277, align 8
  %.reload279 = load i8**, i8*** %.reg2mem277, align 8
  store i8* blockaddress(@"5784248439022692321", %"70"), i8** %.reload279, align 8
  %2830 = getelementptr i8*, i8** %JumpTable, i32 71
  store i8** %2830, i8*** %.reg2mem280, align 8
  %.reload282 = load i8**, i8*** %.reg2mem280, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub15), i8** %.reload282, align 8
  %2831 = getelementptr i8*, i8** %JumpTable, i32 72
  store i8** %2831, i8*** %.reg2mem283, align 8
  %.reload285 = load i8**, i8*** %.reg2mem283, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub116), i8** %.reload285, align 8
  %2832 = getelementptr i8*, i8** %JumpTable, i32 73
  store i8** %2832, i8*** %.reg2mem286, align 8
  %.reload288 = load i8**, i8*** %.reg2mem286, align 8
  store i8* blockaddress(@"5784248439022692321", %"73"), i8** %.reload288, align 8
  %2833 = getelementptr i8*, i8** %JumpTable, i32 74
  store i8** %2833, i8*** %.reg2mem289, align 8
  %.reload291 = load i8**, i8*** %.reg2mem289, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot17), i8** %.reload291, align 8
  %2834 = getelementptr i8*, i8** %JumpTable, i32 75
  store i8** %2834, i8*** %.reg2mem292, align 8
  %.reload294 = load i8**, i8*** %.reg2mem292, align 8
  store i8* blockaddress(@"5784248439022692321", %"75"), i8** %.reload294, align 8
  %2835 = getelementptr i8*, i8** %JumpTable, i32 76
  store i8** %2835, i8*** %.reg2mem295, align 8
  %.reload297 = load i8**, i8*** %.reg2mem295, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub18), i8** %.reload297, align 8
  %2836 = getelementptr i8*, i8** %JumpTable, i32 77
  store i8** %2836, i8*** %.reg2mem298, align 8
  %.reload300 = load i8**, i8*** %.reg2mem298, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub), i8** %.reload300, align 8
  %2837 = getelementptr i8*, i8** %JumpTable, i32 78
  store i8** %2837, i8*** %.reg2mem301, align 8
  %.reload303 = load i8**, i8*** %.reg2mem301, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot19), i8** %.reload303, align 8
  %2838 = getelementptr i8*, i8** %JumpTable, i32 79
  store i8** %2838, i8*** %.reg2mem304, align 8
  %.reload306 = load i8**, i8*** %.reg2mem304, align 8
  store i8* blockaddress(@"5784248439022692321", %"79"), i8** %.reload306, align 8
  %2839 = getelementptr i8*, i8** %JumpTable, i32 80
  store i8** %2839, i8*** %.reg2mem307, align 8
  %.reload309 = load i8**, i8*** %.reg2mem307, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub20), i8** %.reload309, align 8
  %2840 = getelementptr i8*, i8** %JumpTable, i32 81
  store i8** %2840, i8*** %.reg2mem310, align 8
  %.reload312 = load i8**, i8*** %.reg2mem310, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub21), i8** %.reload312, align 8
  %2841 = getelementptr i8*, i8** %JumpTable, i32 82
  store i8** %2841, i8*** %.reg2mem313, align 8
  %.reload315 = load i8**, i8*** %.reg2mem313, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot22), i8** %.reload315, align 8
  %2842 = getelementptr i8*, i8** %JumpTable, i32 83
  store i8** %2842, i8*** %.reg2mem316, align 8
  %.reload318 = load i8**, i8*** %.reg2mem316, align 8
  store i8* blockaddress(@"5784248439022692321", %"83"), i8** %.reload318, align 8
  %2843 = getelementptr i8*, i8** %JumpTable, i32 84
  store i8** %2843, i8*** %.reg2mem319, align 8
  %.reload321 = load i8**, i8*** %.reg2mem319, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub23), i8** %.reload321, align 8
  %2844 = getelementptr i8*, i8** %JumpTable, i32 85
  store i8** %2844, i8*** %.reg2mem322, align 8
  %.reload324 = load i8**, i8*** %.reg2mem322, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub24), i8** %.reload324, align 8
  %2845 = getelementptr i8*, i8** %JumpTable, i32 86
  store i8** %2845, i8*** %.reg2mem325, align 8
  %.reload327 = load i8**, i8*** %.reg2mem325, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot25), i8** %.reload327, align 8
  %2846 = getelementptr i8*, i8** %JumpTable, i32 87
  store i8** %2846, i8*** %.reg2mem328, align 8
  %.reload330 = load i8**, i8*** %.reg2mem328, align 8
  store i8* blockaddress(@"5784248439022692321", %"87"), i8** %.reload330, align 8
  %2847 = getelementptr i8*, i8** %JumpTable, i32 88
  store i8** %2847, i8*** %.reg2mem331, align 8
  %.reload333 = load i8**, i8*** %.reg2mem331, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub26), i8** %.reload333, align 8
  %2848 = getelementptr i8*, i8** %JumpTable, i32 89
  store i8** %2848, i8*** %.reg2mem334, align 8
  %.reload336 = load i8**, i8*** %.reg2mem334, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub8.exitStub), i8** %.reload336, align 8
  %2849 = getelementptr i8*, i8** %JumpTable, i32 90
  store i8** %2849, i8*** %.reg2mem337, align 8
  %.reload339 = load i8**, i8*** %.reg2mem337, align 8
  store i8* blockaddress(@"5784248439022692321", %"90"), i8** %.reload339, align 8
  %2850 = getelementptr i8*, i8** %JumpTable, i32 91
  store i8** %2850, i8*** %.reg2mem340, align 8
  %.reload342 = load i8**, i8*** %.reg2mem340, align 8
  store i8* blockaddress(@"5784248439022692321", %"91"), i8** %.reload342, align 8
  %2851 = getelementptr i8*, i8** %JumpTable, i32 92
  store i8** %2851, i8*** %.reg2mem343, align 8
  %.reload346 = load i8**, i8*** %.reg2mem343, align 8
  store i8* blockaddress(@"5784248439022692321", %"92"), i8** %.reload346, align 8
  %2852 = getelementptr i8*, i8** %JumpTable, i32 93
  store i8** %2852, i8*** %.reg2mem347, align 8
  %.reload350 = load i8**, i8*** %.reg2mem347, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl27), i8** %.reload350, align 8
  %2853 = getelementptr i8*, i8** %JumpTable, i32 94
  store i8** %2853, i8*** %.reg2mem351, align 8
  %.reload353 = load i8**, i8*** %.reg2mem351, align 8
  store i8* blockaddress(@"5784248439022692321", %"94"), i8** %.reload353, align 8
  %2854 = getelementptr i8*, i8** %JumpTable, i32 95
  store i8** %2854, i8*** %.reg2mem354, align 8
  %.reload356 = load i8**, i8*** %.reg2mem354, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl10), i8** %.reload356, align 8
  %2855 = getelementptr i8*, i8** %JumpTable, i32 96
  store i8** %2855, i8*** %.reg2mem357, align 8
  %.reload359 = load i8**, i8*** %.reg2mem357, align 8
  store i8* blockaddress(@"5784248439022692321", %"96"), i8** %.reload359, align 8
  %2856 = getelementptr i8*, i8** %JumpTable, i32 97
  store i8** %2856, i8*** %.reg2mem360, align 8
  %.reload362 = load i8**, i8*** %.reg2mem360, align 8
  store i8* blockaddress(@"5784248439022692321", %"97"), i8** %.reload362, align 8
  %2857 = getelementptr i8*, i8** %JumpTable, i32 98
  store i8** %2857, i8*** %.reg2mem363, align 8
  %.reload366 = load i8**, i8*** %.reg2mem363, align 8
  store i8* blockaddress(@"5784248439022692321", %"98"), i8** %.reload366, align 8
  %2858 = getelementptr i8*, i8** %JumpTable, i32 99
  store i8** %2858, i8*** %.reg2mem367, align 8
  %.reload370 = load i8**, i8*** %.reg2mem367, align 8
  store i8* blockaddress(@"5784248439022692321", %"99"), i8** %.reload370, align 8
  %2859 = getelementptr i8*, i8** %JumpTable, i32 100
  store i8** %2859, i8*** %.reg2mem371, align 8
  %.reload373 = load i8**, i8*** %.reg2mem371, align 8
  store i8* blockaddress(@"5784248439022692321", %"100"), i8** %.reload373, align 8
  %2860 = getelementptr i8*, i8** %JumpTable, i32 101
  store i8** %2860, i8*** %.reg2mem374, align 8
  %.reload377 = load i8**, i8*** %.reg2mem374, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl15), i8** %.reload377, align 8
  %2861 = getelementptr i8*, i8** %JumpTable, i32 102
  store i8** %2861, i8*** %.reg2mem378, align 8
  %.reload381 = load i8**, i8*** %.reg2mem378, align 8
  store i8* blockaddress(@"5784248439022692321", %"102"), i8** %.reload381, align 8
  %2862 = getelementptr i8*, i8** %JumpTable, i32 103
  store i8** %2862, i8*** %.reg2mem382, align 8
  %.reload384 = load i8**, i8*** %.reg2mem382, align 8
  store i8* blockaddress(@"5784248439022692321", %"103"), i8** %.reload384, align 8
  %2863 = getelementptr i8*, i8** %JumpTable, i32 104
  store i8** %2863, i8*** %.reg2mem385, align 8
  %.reload387 = load i8**, i8*** %.reg2mem385, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl26), i8** %.reload387, align 8
  %2864 = getelementptr i8*, i8** %JumpTable, i32 105
  store i8** %2864, i8*** %.reg2mem388, align 8
  %.reload390 = load i8**, i8*** %.reg2mem388, align 8
  store i8* blockaddress(@"5784248439022692321", %"105"), i8** %.reload390, align 8
  %2865 = getelementptr i8*, i8** %JumpTable, i32 106
  store i8** %2865, i8*** %.reg2mem391, align 8
  %.reload394 = load i8**, i8*** %.reg2mem391, align 8
  store i8* blockaddress(@"5784248439022692321", %"106"), i8** %.reload394, align 8
  %2866 = getelementptr i8*, i8** %JumpTable, i32 107
  store i8** %2866, i8*** %.reg2mem395, align 8
  %.reload397 = load i8**, i8*** %.reg2mem395, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl34), i8** %.reload397, align 8
  %2867 = getelementptr i8*, i8** %JumpTable, i32 108
  store i8** %2867, i8*** %.reg2mem398, align 8
  %.reload401 = load i8**, i8*** %.reg2mem398, align 8
  store i8* blockaddress(@"5784248439022692321", %"108"), i8** %.reload401, align 8
  %2868 = getelementptr i8*, i8** %JumpTable, i32 109
  store i8** %2868, i8*** %.reg2mem402, align 8
  %.reload404 = load i8**, i8*** %.reg2mem402, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl86), i8** %.reload404, align 8
  %2869 = getelementptr i8*, i8** %JumpTable, i32 110
  store i8** %2869, i8*** %.reg2mem405, align 8
  %.reload408 = load i8**, i8*** %.reg2mem405, align 8
  store i8* blockaddress(@"5784248439022692321", %"110"), i8** %.reload408, align 8
  %2870 = getelementptr i8*, i8** %JumpTable, i32 111
  store i8** %2870, i8*** %.reg2mem409, align 8
  %.reload413 = load i8**, i8*** %.reg2mem409, align 8
  store i8* blockaddress(@"5784248439022692321", %"111"), i8** %.reload413, align 8
  %2871 = getelementptr i8*, i8** %JumpTable, i32 112
  store i8** %2871, i8*** %.reg2mem414, align 8
  %.reload416 = load i8**, i8*** %.reg2mem414, align 8
  store i8* blockaddress(@"5784248439022692321", %.loopexit), i8** %.reload416, align 8
  %2872 = getelementptr i8*, i8** %JumpTable, i32 113
  store i8** %2872, i8*** %.reg2mem417, align 8
  %.reload420 = load i8**, i8*** %.reg2mem417, align 8
  store i8* blockaddress(@"5784248439022692321", %"113"), i8** %.reload420, align 8
  %2873 = getelementptr i8*, i8** %JumpTable, i32 114
  store i8** %2873, i8*** %.reg2mem421, align 8
  %.reload423 = load i8**, i8*** %.reg2mem421, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot29), i8** %.reload423, align 8
  %2874 = getelementptr i8*, i8** %JumpTable, i32 115
  store i8** %2874, i8*** %.reg2mem424, align 8
  %.reload426 = load i8**, i8*** %.reg2mem424, align 8
  store i8* blockaddress(@"5784248439022692321", %"115"), i8** %.reload426, align 8
  %2875 = getelementptr i8*, i8** %JumpTable, i32 116
  store i8** %2875, i8*** %.reg2mem427, align 8
  %.reload429 = load i8**, i8*** %.reg2mem427, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl30), i8** %.reload429, align 8
  %2876 = getelementptr i8*, i8** %JumpTable, i32 117
  store i8** %2876, i8*** %.reg2mem430, align 8
  %.reload432 = load i8**, i8*** %.reg2mem430, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub32), i8** %.reload432, align 8
  %2877 = getelementptr i8*, i8** %JumpTable, i32 118
  store i8** %2877, i8*** %.reg2mem433, align 8
  %.reload435 = load i8**, i8*** %.reg2mem433, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub133), i8** %.reload435, align 8
  %2878 = getelementptr i8*, i8** %JumpTable, i32 119
  store i8** %2878, i8*** %.reg2mem436, align 8
  %.reload438 = load i8**, i8*** %.reg2mem436, align 8
  store i8* blockaddress(@"5784248439022692321", %"119"), i8** %.reload438, align 8
  %2879 = getelementptr i8*, i8** %JumpTable, i32 120
  store i8** %2879, i8*** %.reg2mem439, align 8
  %.reload441 = load i8**, i8*** %.reg2mem439, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot34), i8** %.reload441, align 8
  %2880 = getelementptr i8*, i8** %JumpTable, i32 121
  store i8** %2880, i8*** %.reg2mem442, align 8
  %.reload444 = load i8**, i8*** %.reg2mem442, align 8
  store i8* blockaddress(@"5784248439022692321", %.split), i8** %.reload444, align 8
  %2881 = getelementptr i8*, i8** %JumpTable, i32 122
  store i8** %2881, i8*** %.reg2mem445, align 8
  %.reload447 = load i8**, i8*** %.reg2mem445, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub35), i8** %.reload447, align 8
  %2882 = getelementptr i8*, i8** %JumpTable, i32 123
  store i8** %2882, i8*** %.reg2mem448, align 8
  %.reload450 = load i8**, i8*** %.reg2mem448, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub136), i8** %.reload450, align 8
  %2883 = getelementptr i8*, i8** %JumpTable, i32 124
  store i8** %2883, i8*** %.reg2mem451, align 8
  %.reload453 = load i8**, i8*** %.reg2mem451, align 8
  store i8* blockaddress(@"5784248439022692321", %"124"), i8** %.reload453, align 8
  %2884 = getelementptr i8*, i8** %JumpTable, i32 125
  store i8** %2884, i8*** %.reg2mem454, align 8
  %.reload456 = load i8**, i8*** %.reg2mem454, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot37), i8** %.reload456, align 8
  %2885 = getelementptr i8*, i8** %JumpTable, i32 126
  store i8** %2885, i8*** %.reg2mem457, align 8
  %.reload459 = load i8**, i8*** %.reg2mem457, align 8
  store i8* blockaddress(@"5784248439022692321", %.split38), i8** %.reload459, align 8
  %2886 = getelementptr i8*, i8** %JumpTable, i32 127
  store i8** %2886, i8*** %.reg2mem460, align 8
  %.reload462 = load i8**, i8*** %.reg2mem460, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub39), i8** %.reload462, align 8
  %2887 = getelementptr i8*, i8** %JumpTable, i32 128
  store i8** %2887, i8*** %.reg2mem463, align 8
  %.reload465 = load i8**, i8*** %.reg2mem463, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub140), i8** %.reload465, align 8
  %2888 = getelementptr i8*, i8** %JumpTable, i32 129
  store i8** %2888, i8*** %.reg2mem466, align 8
  %.reload468 = load i8**, i8*** %.reg2mem466, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot41), i8** %.reload468, align 8
  %2889 = getelementptr i8*, i8** %JumpTable, i32 130
  store i8** %2889, i8*** %.reg2mem469, align 8
  %.reload471 = load i8**, i8*** %.reg2mem469, align 8
  store i8* blockaddress(@"5784248439022692321", %.split42), i8** %.reload471, align 8
  %2890 = getelementptr i8*, i8** %JumpTable, i32 131
  store i8** %2890, i8*** %.reg2mem472, align 8
  %.reload474 = load i8**, i8*** %.reg2mem472, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub43), i8** %.reload474, align 8
  %2891 = getelementptr i8*, i8** %JumpTable, i32 132
  store i8** %2891, i8*** %.reg2mem475, align 8
  %.reload477 = load i8**, i8*** %.reg2mem475, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub144), i8** %.reload477, align 8
  %2892 = getelementptr i8*, i8** %JumpTable, i32 133
  store i8** %2892, i8*** %.reg2mem478, align 8
  %.reload480 = load i8**, i8*** %.reg2mem478, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot45), i8** %.reload480, align 8
  %2893 = getelementptr i8*, i8** %JumpTable, i32 134
  store i8** %2893, i8*** %.reg2mem481, align 8
  %.reload483 = load i8**, i8*** %.reg2mem481, align 8
  store i8* blockaddress(@"5784248439022692321", %"134"), i8** %.reload483, align 8
  %2894 = getelementptr i8*, i8** %JumpTable, i32 135
  store i8** %2894, i8*** %.reg2mem484, align 8
  %.reload486 = load i8**, i8*** %.reg2mem484, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl46), i8** %.reload486, align 8
  %2895 = getelementptr i8*, i8** %JumpTable, i32 136
  store i8** %2895, i8*** %.reg2mem487, align 8
  %.reload489 = load i8**, i8*** %.reg2mem487, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub48), i8** %.reload489, align 8
  %2896 = getelementptr i8*, i8** %JumpTable, i32 137
  store i8** %2896, i8*** %.reg2mem490, align 8
  %.reload492 = load i8**, i8*** %.reg2mem490, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub5), i8** %.reload492, align 8
  %2897 = getelementptr i8*, i8** %JumpTable, i32 138
  store i8** %2897, i8*** %.reg2mem493, align 8
  %.reload495 = load i8**, i8*** %.reg2mem493, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot49), i8** %.reload495, align 8
  %2898 = getelementptr i8*, i8** %JumpTable, i32 139
  store i8** %2898, i8*** %.reg2mem496, align 8
  %.reload498 = load i8**, i8*** %.reg2mem496, align 8
  store i8* blockaddress(@"5784248439022692321", %"139"), i8** %.reload498, align 8
  %2899 = getelementptr i8*, i8** %JumpTable, i32 140
  store i8** %2899, i8*** %.reg2mem499, align 8
  %.reload501 = load i8**, i8*** %.reg2mem499, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub50), i8** %.reload501, align 8
  %2900 = getelementptr i8*, i8** %JumpTable, i32 141
  store i8** %2900, i8*** %.reg2mem502, align 8
  %.reload504 = load i8**, i8*** %.reg2mem502, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub151), i8** %.reload504, align 8
  %2901 = getelementptr i8*, i8** %JumpTable, i32 142
  store i8** %2901, i8*** %.reg2mem505, align 8
  %.reload507 = load i8**, i8*** %.reg2mem505, align 8
  store i8* blockaddress(@"5784248439022692321", %"142"), i8** %.reload507, align 8
  %2902 = getelementptr i8*, i8** %JumpTable, i32 143
  store i8** %2902, i8*** %.reg2mem508, align 8
  %.reload510 = load i8**, i8*** %.reg2mem508, align 8
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot52), i8** %.reload510, align 8
  %2903 = getelementptr i8*, i8** %JumpTable, i32 144
  store i8** %2903, i8*** %.reg2mem511, align 8
  %.reload513 = load i8**, i8*** %.reg2mem511, align 8
  store i8* blockaddress(@"5784248439022692321", %"144"), i8** %.reload513, align 8
  %2904 = getelementptr i8*, i8** %JumpTable, i32 145
  store i8** %2904, i8*** %.reg2mem514, align 8
  %.reload516 = load i8**, i8*** %.reg2mem514, align 8
  store i8* blockaddress(@"5784248439022692321", %codeRepl53), i8** %.reload516, align 8
  %2905 = getelementptr i8*, i8** %JumpTable, i32 146
  store i8** %2905, i8*** %.reg2mem517, align 8
  %.reload519 = load i8**, i8*** %.reg2mem517, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub55), i8** %.reload519, align 8
  %2906 = getelementptr i8*, i8** %JumpTable, i32 147
  store i8** %2906, i8*** %.reg2mem520, align 8
  %.reload522 = load i8**, i8*** %.reg2mem520, align 8
  store i8* blockaddress(@"5784248439022692321", %.exitStub4), i8** %.reload522, align 8
  %.reload69 = load i8**, i8*** %.reg2mem, align 8
  %2907 = load i8*, i8** %.reload69, align 8
  indirectbr i8* %2907, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

BogusBasciBlock:                                  ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %2908 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub26), i8** %2908, align 8
  %2909 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@"5784248439022692321", %"99"), i8** %2909, align 8
  %2910 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@"5784248439022692321", %"98"), i8** %2910, align 8
  %2911 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@"5784248439022692321", %"43"), i8** %2911, align 8
  %2912 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@"5784248439022692321", %NodeBlock47), i8** %2912, align 8
  %2913 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot29), i8** %2913, align 8
  %2914 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot45), i8** %2914, align 8
  %2915 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8* blockaddress(@"5784248439022692321", %codeRepl27), i8** %2915, align 8
  %2916 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8* blockaddress(@"5784248439022692321", %NodeBlock31), i8** %2916, align 8
  %2917 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8* blockaddress(@"5784248439022692321", %NodeBlock57), i8** %2917, align 8
  %2918 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8* blockaddress(@"5784248439022692321", %"73"), i8** %2918, align 8
  %2919 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8* blockaddress(@"5784248439022692321", %"83"), i8** %2919, align 8
  %2920 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8* blockaddress(@"5784248439022692321", %"102"), i8** %2920, align 8
  %2921 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8* blockaddress(@"5784248439022692321", %"90"), i8** %2921, align 8
  %2922 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8* blockaddress(@"5784248439022692321", %NodeBlock39), i8** %2922, align 8
  %2923 = getelementptr i8*, i8** %JumpTable, i32 30
  store i8* blockaddress(@"5784248439022692321", %"142"), i8** %2923, align 8
  %2924 = getelementptr i8*, i8** %JumpTable, i32 32
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot4), i8** %2924, align 8
  %2925 = getelementptr i8*, i8** %JumpTable, i32 34
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub20), i8** %2925, align 8
  %2926 = getelementptr i8*, i8** %JumpTable, i32 36
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot7), i8** %2926, align 8
  %2927 = getelementptr i8*, i8** %JumpTable, i32 38
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub), i8** %2927, align 8
  %2928 = getelementptr i8*, i8** %JumpTable, i32 40
  store i8* blockaddress(@"5784248439022692321", %codeRepl86), i8** %2928, align 8
  %2929 = getelementptr i8*, i8** %JumpTable, i32 42
  store i8* blockaddress(@"5784248439022692321", %"144"), i8** %2929, align 8
  %2930 = getelementptr i8*, i8** %JumpTable, i32 44
  store i8* blockaddress(@"5784248439022692321", %NodeBlock9), i8** %2930, align 8
  %2931 = getelementptr i8*, i8** %JumpTable, i32 46
  store i8* blockaddress(@"5784248439022692321", %NodeBlock11), i8** %2931, align 8
  %2932 = getelementptr i8*, i8** %JumpTable, i32 48
  store i8* blockaddress(@"5784248439022692321", %NodeBlock43), i8** %2932, align 8
  %2933 = getelementptr i8*, i8** %JumpTable, i32 50
  store i8* blockaddress(@"5784248439022692321", %NodeBlock17), i8** %2933, align 8
  %2934 = getelementptr i8*, i8** %JumpTable, i32 52
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot14), i8** %2934, align 8
  %2935 = getelementptr i8*, i8** %JumpTable, i32 54
  store i8* blockaddress(@"5784248439022692321", %.exitStub15), i8** %2935, align 8
  %2936 = getelementptr i8*, i8** %JumpTable, i32 56
  store i8* blockaddress(@"5784248439022692321", %.exitStub32), i8** %2936, align 8
  %2937 = getelementptr i8*, i8** %JumpTable, i32 58
  store i8* blockaddress(@"5784248439022692321", %NodeBlock15), i8** %2937, align 8
  %2938 = getelementptr i8*, i8** %JumpTable, i32 60
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub18), i8** %2938, align 8
  %2939 = getelementptr i8*, i8** %JumpTable, i32 62
  store i8* blockaddress(@"5784248439022692321", %NodeBlock37), i8** %2939, align 8
  %2940 = getelementptr i8*, i8** %JumpTable, i32 64
  store i8* blockaddress(@"5784248439022692321", %"105"), i8** %2940, align 8
  %2941 = getelementptr i8*, i8** %JumpTable, i32 66
  store i8* blockaddress(@"5784248439022692321", %.exitStub8.exitStub), i8** %2941, align 8
  %2942 = getelementptr i8*, i8** %JumpTable, i32 68
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot34), i8** %2942, align 8
  %2943 = getelementptr i8*, i8** %JumpTable, i32 70
  store i8* blockaddress(@"5784248439022692321", %NodeBlock7), i8** %2943, align 8
  %2944 = getelementptr i8*, i8** %JumpTable, i32 72
  store i8* blockaddress(@"5784248439022692321", %.exitStub35), i8** %2944, align 8
  %2945 = getelementptr i8*, i8** %JumpTable, i32 74
  store i8* blockaddress(@"5784248439022692321", %NodeBlock21), i8** %2945, align 8
  %2946 = getelementptr i8*, i8** %JumpTable, i32 76
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub6), i8** %2946, align 8
  %2947 = getelementptr i8*, i8** %JumpTable, i32 78
  store i8* blockaddress(@"5784248439022692321", %"50"), i8** %2947, align 8
  %2948 = getelementptr i8*, i8** %JumpTable, i32 80
  store i8* blockaddress(@"5784248439022692321", %"97"), i8** %2948, align 8
  %2949 = getelementptr i8*, i8** %JumpTable, i32 82
  store i8* blockaddress(@"5784248439022692321", %NodeBlock13), i8** %2949, align 8
  %2950 = getelementptr i8*, i8** %JumpTable, i32 84
  store i8* blockaddress(@"5784248439022692321", %codeRepl.exitStub.exitStub), i8** %2950, align 8
  %2951 = getelementptr i8*, i8** %JumpTable, i32 86
  store i8* blockaddress(@"5784248439022692321", %.exitStub50), i8** %2951, align 8
  %2952 = getelementptr i8*, i8** %JumpTable, i32 88
  store i8* blockaddress(@"5784248439022692321", %NodeBlock55), i8** %2952, align 8
  %2953 = getelementptr i8*, i8** %JumpTable, i32 90
  store i8* blockaddress(@"5784248439022692321", %"134"), i8** %2953, align 8
  %2954 = getelementptr i8*, i8** %JumpTable, i32 92
  store i8* blockaddress(@"5784248439022692321", %"64"), i8** %2954, align 8
  %2955 = getelementptr i8*, i8** %JumpTable, i32 94
  store i8* blockaddress(@"5784248439022692321", %NodeBlock19), i8** %2955, align 8
  %2956 = getelementptr i8*, i8** %JumpTable, i32 96
  store i8* blockaddress(@"5784248439022692321", %codeRepl46), i8** %2956, align 8
  %2957 = getelementptr i8*, i8** %JumpTable, i32 98
  store i8* blockaddress(@"5784248439022692321", %BogusBasciBlock), i8** %2957, align 8
  %2958 = getelementptr i8*, i8** %JumpTable, i32 100
  store i8* blockaddress(@"5784248439022692321", %"66"), i8** %2958, align 8
  %2959 = getelementptr i8*, i8** %JumpTable, i32 102
  store i8* blockaddress(@"5784248439022692321", %"96"), i8** %2959, align 8
  %2960 = getelementptr i8*, i8** %JumpTable, i32 104
  store i8* blockaddress(@"5784248439022692321", %NodeBlock33), i8** %2960, align 8
  %2961 = getelementptr i8*, i8** %JumpTable, i32 106
  store i8* blockaddress(@"5784248439022692321", %codeRepl53), i8** %2961, align 8
  %2962 = getelementptr i8*, i8** %JumpTable, i32 108
  store i8* blockaddress(@"5784248439022692321", %"94"), i8** %2962, align 8
  %2963 = getelementptr i8*, i8** %JumpTable, i32 110
  store i8* blockaddress(@"5784248439022692321", %.exitStub1.exitStub21), i8** %2963, align 8
  %2964 = getelementptr i8*, i8** %JumpTable, i32 112
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot22), i8** %2964, align 8
  %2965 = getelementptr i8*, i8** %JumpTable, i32 114
  store i8* blockaddress(@"5784248439022692321", %"92"), i8** %2965, align 8
  %2966 = getelementptr i8*, i8** %JumpTable, i32 116
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot49), i8** %2966, align 8
  %2967 = getelementptr i8*, i8** %JumpTable, i32 118
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot), i8** %2967, align 8
  %2968 = getelementptr i8*, i8** %JumpTable, i32 120
  store i8* blockaddress(@"5784248439022692321", %codeRepl15), i8** %2968, align 8
  %2969 = getelementptr i8*, i8** %JumpTable, i32 122
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot41), i8** %2969, align 8
  %2970 = getelementptr i8*, i8** %JumpTable, i32 124
  store i8* blockaddress(@"5784248439022692321", %NodeBlock23), i8** %2970, align 8
  %2971 = getelementptr i8*, i8** %JumpTable, i32 126
  store i8* blockaddress(@"5784248439022692321", %"111"), i8** %2971, align 8
  %2972 = getelementptr i8*, i8** %JumpTable, i32 128
  store i8* blockaddress(@"5784248439022692321", %"56"), i8** %2972, align 8
  %2973 = getelementptr i8*, i8** %JumpTable, i32 130
  store i8* blockaddress(@"5784248439022692321", %newFuncRoot12), i8** %2973, align 8
  %2974 = getelementptr i8*, i8** %JumpTable, i32 132
  store i8* blockaddress(@"5784248439022692321", %"119"), i8** %2974, align 8
  %2975 = getelementptr i8*, i8** %JumpTable, i32 134
  store i8* blockaddress(@"5784248439022692321", %.exitStub133), i8** %2975, align 8
  %2976 = getelementptr i8*, i8** %JumpTable, i32 136
  store i8* blockaddress(@"5784248439022692321", %NodeBlock5), i8** %2976, align 8
  %2977 = getelementptr i8*, i8** %JumpTable, i32 138
  store i8* blockaddress(@"5784248439022692321", %LeafBlock), i8** %2977, align 8
  %2978 = getelementptr i8*, i8** %JumpTable, i32 140
  store i8* blockaddress(@"5784248439022692321", %"110"), i8** %2978, align 8
  %2979 = getelementptr i8*, i8** %JumpTable, i32 142
  store i8* blockaddress(@"5784248439022692321", %NodeBlock25), i8** %2979, align 8
  %2980 = getelementptr i8*, i8** %JumpTable, i32 144
  store i8* blockaddress(@"5784248439022692321", %NodeBlock29), i8** %2980, align 8
  %2981 = getelementptr i8*, i8** %JumpTable, i32 146
  store i8* blockaddress(@"5784248439022692321", %.exitStub.exitStub13), i8** %2981, align 8
  %.reload70 = load i8**, i8*** %.reg2mem, align 8
  %2982 = load i8*, i8** %.reload70, align 8
  indirectbr i8* %2982, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

EntryBasicBlockSplit:                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload73 = load i8**, i8*** %.reg2mem72, align 8
  %2983 = load i8*, i8** %.reload73, align 8
  indirectbr i8* %2983, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock59:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot60 = icmp slt i32 %0, 15
  %.reload76 = load i8**, i8*** %.reg2mem75, align 8
  %.reload124 = load i8**, i8*** %.reg2mem123, align 8
  %2984 = select i1 %Pivot60, i8** %.reload124, i8** %.reload76
  %2985 = load i8*, i8** %2984, align 8
  indirectbr i8* %2985, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock57:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot58 = icmp slt i32 %0, 23
  %.reload79 = load i8**, i8*** %.reg2mem78, align 8
  %.reload103 = load i8**, i8*** %.reg2mem102, align 8
  %2986 = select i1 %Pivot58, i8** %.reload103, i8** %.reload79
  %2987 = load i8*, i8** %2986, align 8
  indirectbr i8* %2987, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock55:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %2988 = and i64 %920, -4785516691169305941
  %2989 = xor i64 %920, -1
  %2990 = xor i64 -4785516691169305941, %2989
  %2991 = and i64 %2990, -4785516691169305941
  %2992 = add i64 %930, -115437877273954768
  %2993 = and i64 -115437877273954768, %930
  %2994 = or i64 -115437877273954768, %930
  %2995 = add i64 %2993, %2994
  %2996 = xor i64 433681527825809173, %2992
  %2997 = xor i64 %2996, %2991
  %2998 = xor i64 %2997, %2988
  %2999 = xor i64 %2998, %2995
  %3000 = and i64 %610, 6270172684930706057
  %3001 = or i64 -6270172684930706058, %610
  %3002 = sub i64 %3001, -6270172684930706058
  %3003 = and i64 %770, -7529485229376587262
  %3004 = or i64 7529485229376587261, %770
  %3005 = sub i64 %3004, 7529485229376587261
  %3006 = add i64 %341, -2228888356483516707
  %3007 = xor i64 -2228888356483516707, %341
  %3008 = and i64 -2228888356483516707, %341
  %3009 = mul i64 2, %3008
  %3010 = add i64 %3007, %3009
  %3011 = xor i64 %3005, %3002
  %3012 = xor i64 %3011, %3006
  %3013 = xor i64 %3012, %3003
  %3014 = xor i64 %3013, %3010
  %3015 = xor i64 %3014, %3000
  %3016 = xor i64 %3015, 1928407968709480047
  %3017 = mul i64 %2999, %3016
  %3018 = trunc i64 %3017 to i32
  %Pivot56 = icmp slt i32 %0, %3018
  %.reload82 = load i8**, i8*** %.reg2mem81, align 8
  %.reload94 = load i8**, i8*** %.reg2mem93, align 8
  %3019 = select i1 %Pivot56, i8** %.reload94, i8** %.reload82
  %3020 = load i8*, i8** %3019, align 8
  indirectbr i8* %3020, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock53:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot54 = icmp slt i32 %0, 29
  %.reload85 = load i8**, i8*** %.reg2mem84, align 8
  %.reload91 = load i8**, i8*** %.reg2mem90, align 8
  %3021 = select i1 %Pivot54, i8** %.reload91, i8** %.reload85
  %3022 = load i8*, i8** %3021, align 8
  indirectbr i8* %3022, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock51:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot52 = icmp slt i32 %0, 30
  %.reload88 = load i8**, i8*** %.reg2mem87, align 8
  %.reload506 = load i8**, i8*** %.reg2mem505, align 8
  %3023 = select i1 %Pivot52, i8** %.reload506, i8** %.reload88
  %3024 = load i8*, i8** %3023, align 8
  indirectbr i8* %3024, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

LeafBlock49:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %SwitchLeaf50 = icmp eq i32 %0, 30
  %.reload170 = load i8**, i8*** %.reg2mem168, align 8
  %.reload509 = load i8**, i8*** %.reg2mem508, align 8
  %3025 = select i1 %SwitchLeaf50, i8** %.reload509, i8** %.reload170
  %3026 = load i8*, i8** %3025, align 8
  indirectbr i8* %3026, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock47:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot48 = icmp slt i32 %0, 28
  %.reload479 = load i8**, i8*** %.reg2mem478, align 8
  %.reload494 = load i8**, i8*** %.reg2mem493, align 8
  %3027 = select i1 %Pivot48, i8** %.reload479, i8** %.reload494
  %3028 = load i8*, i8** %3027, align 8
  indirectbr i8* %3028, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock45:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot46 = icmp slt i32 %0, 25
  %.reload97 = load i8**, i8*** %.reg2mem96, align 8
  %.reload100 = load i8**, i8*** %.reg2mem99, align 8
  %3029 = select i1 %Pivot46, i8** %.reload100, i8** %.reload97
  %3030 = load i8*, i8** %3029, align 8
  indirectbr i8* %3030, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock43:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot44 = icmp slt i32 %0, 26
  %.reload455 = load i8**, i8*** %.reg2mem454, align 8
  %.reload467 = load i8**, i8*** %.reg2mem466, align 8
  %3031 = select i1 %Pivot44, i8** %.reload455, i8** %.reload467
  %3032 = load i8*, i8** %3031, align 8
  indirectbr i8* %3032, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock41:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot42 = icmp slt i32 %0, 24
  %.reload440 = load i8**, i8*** %.reg2mem439, align 8
  %.reload452 = load i8**, i8*** %.reg2mem451, align 8
  %3033 = select i1 %Pivot42, i8** %.reload440, i8** %.reload452
  %3034 = load i8*, i8** %3033, align 8
  indirectbr i8* %3034, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock39:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot40 = icmp slt i32 %0, 19
  %.reload106 = load i8**, i8*** %.reg2mem105, align 8
  %.reload115 = load i8**, i8*** %.reg2mem114, align 8
  %3035 = select i1 %Pivot40, i8** %.reload115, i8** %.reload106
  %3036 = load i8*, i8** %3035, align 8
  indirectbr i8* %3036, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock37:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot38 = icmp slt i32 %0, 21
  %.reload109 = load i8**, i8*** %.reg2mem108, align 8
  %.reload112 = load i8**, i8*** %.reg2mem111, align 8
  %3037 = select i1 %Pivot38, i8** %.reload112, i8** %.reload109
  %3038 = load i8*, i8** %3037, align 8
  indirectbr i8* %3038, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock35:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3039 = or i64 %936, 3738927051860111307
  %3040 = xor i64 %936, -1
  %3041 = and i64 3738927051860111307, %3040
  %3042 = add i64 %3041, %936
  %3043 = or i64 %823, -683413310665770968
  %3044 = xor i64 %823, -1
  %3045 = and i64 -683413310665770968, %3044
  %3046 = add i64 %3045, %823
  %3047 = add i64 %1408, 674511066033611868
  %3048 = add i64 4703985231800243408, %1408
  %3049 = add i64 %3048, -4029474165766631540
  %3050 = xor i64 %3047, %3046
  %3051 = xor i64 %3050, 3957139033123851009
  %3052 = xor i64 %3051, %3042
  %3053 = xor i64 %3052, %3043
  %3054 = xor i64 %3053, %3049
  %3055 = xor i64 %3054, %3039
  %3056 = add i64 %986, -895005300542104458
  %3057 = sub i64 0, %986
  %3058 = sub i64 -895005300542104458, %3057
  %3059 = or i64 %442, -5743420959489637686
  %3060 = and i64 -5743420959489637686, %442
  %3061 = xor i64 -5743420959489637686, %442
  %3062 = or i64 %3060, %3061
  %3063 = xor i64 %3059, %3056
  %3064 = xor i64 %3063, %3062
  %3065 = xor i64 %3064, -687069164456571370
  %3066 = xor i64 %3065, %3058
  %3067 = mul i64 %3055, %3066
  %3068 = trunc i64 %3067 to i32
  %Pivot36 = icmp slt i32 %0, %3068
  %.reload422 = load i8**, i8*** %.reg2mem421, align 8
  %.reload437 = load i8**, i8*** %.reg2mem436, align 8
  %3069 = select i1 %Pivot36, i8** %.reload422, i8** %.reload437
  %3070 = load i8*, i8** %3069, align 8
  indirectbr i8* %3070, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock33:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot34 = icmp slt i32 %0, 20
  %.reload326 = load i8**, i8*** %.reg2mem325, align 8
  %.reload338 = load i8**, i8*** %.reg2mem337, align 8
  %3071 = select i1 %Pivot34, i8** %.reload326, i8** %.reload338
  %3072 = load i8*, i8** %3071, align 8
  indirectbr i8* %3072, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock31:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot32 = icmp slt i32 %0, 17
  %.reload118 = load i8**, i8*** %.reg2mem117, align 8
  %.reload121 = load i8**, i8*** %.reg2mem120, align 8
  %3073 = select i1 %Pivot32, i8** %.reload121, i8** %.reload118
  %3074 = load i8*, i8** %3073, align 8
  indirectbr i8* %3074, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock29:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot30 = icmp slt i32 %0, 18
  %.reload302 = load i8**, i8*** %.reg2mem301, align 8
  %.reload314 = load i8**, i8*** %.reg2mem313, align 8
  %3075 = select i1 %Pivot30, i8** %.reload302, i8** %.reload314
  %3076 = load i8*, i8** %3075, align 8
  indirectbr i8* %3076, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock27:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot28 = icmp slt i32 %0, 16
  %.reload287 = load i8**, i8*** %.reg2mem286, align 8
  %.reload290 = load i8**, i8*** %.reg2mem289, align 8
  %3077 = select i1 %Pivot28, i8** %.reload287, i8** %.reload290
  %3078 = load i8*, i8** %3077, align 8
  indirectbr i8* %3078, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock25:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot26 = icmp slt i32 %0, 7
  %.reload127 = load i8**, i8*** %.reg2mem126, align 8
  %.reload148 = load i8**, i8*** %.reg2mem147, align 8
  %3079 = select i1 %Pivot26, i8** %.reload148, i8** %.reload127
  %3080 = load i8*, i8** %3079, align 8
  indirectbr i8* %3080, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock23:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot24 = icmp slt i32 %0, 11
  %.reload130 = load i8**, i8*** %.reg2mem129, align 8
  %.reload139 = load i8**, i8*** %.reg2mem138, align 8
  %3081 = select i1 %Pivot24, i8** %.reload139, i8** %.reload130
  %3082 = load i8*, i8** %3081, align 8
  indirectbr i8* %3082, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock21:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot22 = icmp slt i32 %0, 13
  %.reload133 = load i8**, i8*** %.reg2mem132, align 8
  %.reload136 = load i8**, i8*** %.reg2mem135, align 8
  %3083 = select i1 %Pivot22, i8** %.reload136, i8** %.reload133
  %3084 = load i8*, i8** %3083, align 8
  indirectbr i8* %3084, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock19:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot20 = icmp slt i32 %0, 14
  %.reload263 = load i8**, i8*** %.reg2mem262, align 8
  %.reload275 = load i8**, i8*** %.reg2mem274, align 8
  %3085 = select i1 %Pivot20, i8** %.reload263, i8** %.reload275
  %3086 = load i8*, i8** %3085, align 8
  indirectbr i8* %3086, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock17:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot18 = icmp slt i32 %0, 12
  %.reload245 = load i8**, i8*** %.reg2mem244, align 8
  %.reload260 = load i8**, i8*** %.reg2mem259, align 8
  %3087 = select i1 %Pivot18, i8** %.reload245, i8** %.reload260
  %3088 = load i8*, i8** %3087, align 8
  indirectbr i8* %3088, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock15:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot16 = icmp slt i32 %0, 9
  %.reload142 = load i8**, i8*** %.reg2mem141, align 8
  %.reload145 = load i8**, i8*** %.reg2mem144, align 8
  %3089 = select i1 %Pivot16, i8** %.reload145, i8** %.reload142
  %3090 = load i8*, i8** %3089, align 8
  indirectbr i8* %3090, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock13:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot14 = icmp slt i32 %0, 10
  %.reload230 = load i8**, i8*** %.reg2mem229, align 8
  %.reload233 = load i8**, i8*** %.reg2mem232, align 8
  %3091 = select i1 %Pivot14, i8** %.reload230, i8** %.reload233
  %3092 = load i8*, i8** %3091, align 8
  indirectbr i8* %3092, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock11:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot12 = icmp slt i32 %0, 8
  %.reload215 = load i8**, i8*** %.reg2mem214, align 8
  %.reload227 = load i8**, i8*** %.reg2mem226, align 8
  %3093 = select i1 %Pivot12, i8** %.reload215, i8** %.reload227
  %3094 = load i8*, i8** %3093, align 8
  indirectbr i8* %3094, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock9:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3095 = add i64 %988, -1859007878897013987
  %3096 = and i64 -1859007878897013987, %988
  %3097 = or i64 -1859007878897013987, %988
  %3098 = add i64 %3096, %3097
  %3099 = and i64 %988, 7667879029539370363
  %3100 = xor i64 %988, -1
  %3101 = or i64 -7667879029539370364, %3100
  %3102 = xor i64 %3101, -1
  %3103 = and i64 %3102, -1
  %3104 = xor i64 %3098, %3095
  %3105 = xor i64 %3104, %3103
  %3106 = xor i64 %3105, 4448217193156610905
  %3107 = xor i64 %3106, %3099
  %3108 = or i64 %922, -949494840599679121
  %3109 = xor i64 %922, -1
  %3110 = and i64 -949494840599679121, %3109
  %3111 = add i64 %3110, %922
  %3112 = sext i32 %17 to i64
  %3113 = and i64 %3112, -4502209337097780121
  %3114 = or i64 4502209337097780120, %3112
  %3115 = sub i64 %3114, 4502209337097780120
  %3116 = xor i64 %3113, 9191464868087932603
  %3117 = xor i64 %3116, %3115
  %3118 = xor i64 %3117, %3111
  %3119 = xor i64 %3118, %3108
  %3120 = mul i64 %3107, %3119
  %3121 = trunc i64 %3120 to i32
  %Pivot10 = icmp slt i32 %0, %3121
  %.reload151 = load i8**, i8*** %.reg2mem150, align 8
  %.reload160 = load i8**, i8*** %.reg2mem159, align 8
  %3122 = select i1 %Pivot10, i8** %.reload160, i8** %.reload151
  %3123 = load i8*, i8** %3122, align 8
  indirectbr i8* %3123, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock7:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot8 = icmp slt i32 %0, 5
  %.reload154 = load i8**, i8*** %.reg2mem153, align 8
  %.reload157 = load i8**, i8*** %.reg2mem156, align 8
  %3124 = select i1 %Pivot8, i8** %.reload157, i8** %.reload154
  %3125 = load i8*, i8** %3124, align 8
  indirectbr i8* %3125, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock5:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot6 = icmp slt i32 %0, 6
  %.reload197 = load i8**, i8*** %.reg2mem196, align 8
  %.reload200 = load i8**, i8*** %.reg2mem199, align 8
  %3126 = select i1 %Pivot6, i8** %.reload197, i8** %.reload200
  %3127 = load i8*, i8** %3126, align 8
  indirectbr i8* %3127, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock3:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot4 = icmp slt i32 %0, 4
  %.reload182 = load i8**, i8*** %.reg2mem181, align 8
  %.reload185 = load i8**, i8*** %.reg2mem184, align 8
  %3128 = select i1 %Pivot4, i8** %.reload182, i8** %.reload185
  %3129 = load i8*, i8** %3128, align 8
  indirectbr i8* %3129, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock1:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot2 = icmp slt i32 %0, 1
  %.reload163 = load i8**, i8*** %.reg2mem162, align 8
  %.reload166 = load i8**, i8*** %.reg2mem165, align 8
  %3130 = select i1 %Pivot2, i8** %.reload166, i8** %.reload163
  %3131 = load i8*, i8** %3130, align 8
  indirectbr i8* %3131, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

NodeBlock:                                        ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot = icmp slt i32 %0, 2
  %.reload176 = load i8**, i8*** %.reg2mem175, align 8
  %.reload179 = load i8**, i8*** %.reg2mem178, align 8
  %3132 = select i1 %Pivot, i8** %.reload176, i8** %.reload179
  %3133 = load i8*, i8** %3132, align 8
  indirectbr i8* %3133, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

LeafBlock:                                        ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %SwitchLeaf = icmp eq i32 %0, 0
  %.reload169 = load i8**, i8*** %.reg2mem168, align 8
  %.reload173 = load i8**, i8*** %.reg2mem172, align 8
  %3134 = select i1 %SwitchLeaf, i8** %.reload173, i8** %.reload169
  %3135 = load i8*, i8** %3134, align 8
  indirectbr i8* %3135, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"34":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void

"35":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3136 = load i64, i64* %1, align 8
  %3137 = call i64 @m1252811912226950246(i64 %3136)
  %3138 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2996394070652152791, i32 0, i64 %3137
  store i8** %3138, i8*** %2, align 8
  ret void

"36":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3139 = load i64, i64* %3, align 8
  %3140 = call i64 @m1252811912226950246(i64 %3139)
  %3141 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5534904613522678169, i32 0, i64 %3140
  store i8** %3141, i8*** %4, align 8
  ret void

"37":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3142 = load i64, i64* %5, align 8
  %3143 = call i64 @m1252811912226950246(i64 %3142)
  %3144 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9558371708905704725, i32 0, i64 %3143
  store i8** %3144, i8*** %6, align 8
  ret void

"38":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3145 = load i64, i64* %7, align 8
  %3146 = call i64 @m1252811912226950246(i64 %3145)
  %3147 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7248833348834779914, i32 0, i64 %3146
  store i8** %3147, i8*** %8, align 8
  ret void

newFuncRoot:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload188 = load i8**, i8*** %.reg2mem187, align 8
  %3148 = load i8*, i8** %.reload188, align 8
  indirectbr i8* %3148, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"40":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3149 = and i1 %9, true
  store i1 %3149, i1* %12, align 1
  %3150 = xor i1 %3149, true
  %3151 = and i1 %10, %3150
  %3152 = add i1 %3151, %3149
  store i1 %3152, i1* %13, align 1
  %.reload191 = load i8**, i8*** %.reg2mem190, align 8
  %.reload194 = load i8**, i8*** %.reg2mem193, align 8
  %3153 = select i1 %11, i8** %.reload191, i8** %.reload194
  %3154 = load i8*, i8** %3153, align 8
  indirectbr i8* %3154, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub:                                        ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %14, align 1
  ret void

.exitStub2:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %14, align 1
  ret void

"43":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3155 = load i64, i64* %15, align 8
  %3156 = call i64 @m1252811912226950246(i64 %3155)
  %3157 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable10845888332433178394, i32 0, i64 %3156
  store i8** %3157, i8*** %16, align 8
  ret void

newFuncRoot1:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3158 = alloca i64, align 8
  store i64* %3158, i64** %.reg2mem523, align 8
  %3159 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %3160 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13284784893890992073, i32 0, i64 %3159
  store i8* bitcast (i1 (i32, i32, i1*)* @inner_loop.extracted.22.extracted to i8*), i8** %3160, align 8
  %.reload203 = load i8**, i8*** %.reg2mem202, align 8
  %3161 = load i8*, i8** %.reload203, align 8
  indirectbr i8* %3161, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"45":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3162 = add i64 -1417741132882397512, 1417741132882397583
  %.reload206 = load i8**, i8*** %.reg2mem205, align 8
  %3163 = load i8*, i8** %.reload206, align 8
  indirectbr i8* %3163, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl:                                         ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload525 = load i64*, i64** %.reg2mem523, align 8
  store i64 5221456193252566390, i64* %.reload525, align 8
  %3164 = alloca i8**, align 8
  %.reload524 = load i64*, i64** %.reg2mem523, align 8
  %3165 = or i64 %604, -4037909187500445821
  %3166 = xor i64 %604, -1
  %3167 = and i64 -4037909187500445821, %3166
  %3168 = add i64 %3167, %604
  %3169 = or i64 %1354, -5309618528026666892
  %3170 = xor i64 %1354, -1
  %3171 = and i64 -5309618528026666892, %3170
  %3172 = add i64 %3171, %1354
  %3173 = or i64 %492, -3911140369404134580
  %3174 = and i64 -3911140369404134580, %492
  %3175 = xor i64 -3911140369404134580, %492
  %3176 = or i64 %3174, %3175
  %3177 = xor i64 %3176, -7987989663248810857
  %3178 = xor i64 %3177, %3168
  %3179 = xor i64 %3178, %3165
  %3180 = xor i64 %3179, %3169
  %3181 = xor i64 %3180, %3173
  %3182 = xor i64 %3181, %3172
  %3183 = or i64 %251, -7263820341619675946
  %3184 = xor i64 %251, -1
  %3185 = and i64 %3184, 8511605380781622161
  %3186 = and i64 %251, -8511605380781622162
  %3187 = or i64 %3185, %3186
  %3188 = xor i64 -1355880230680891577, %3187
  %3189 = xor i64 %251, -1
  %3190 = or i64 7263820341619675945, %3189
  %3191 = xor i64 %3190, -1
  %3192 = and i64 %3191, -1
  %3193 = or i64 %3188, %3192
  %3194 = or i64 %484, -9204760869965399027
  %3195 = xor i64 %484, -1
  %3196 = and i64 -9204760869965399027, %3195
  %3197 = add i64 %3196, %484
  %3198 = and i64 %1408, -7255260220415063336
  %3199 = or i64 7255260220415063335, %1408
  %3200 = sub i64 %3199, 7255260220415063335
  %3201 = xor i64 %3197, %3200
  %3202 = xor i64 %3201, 0
  %3203 = xor i64 %3202, %3194
  %3204 = xor i64 %3203, %3193
  %3205 = xor i64 %3204, %3183
  %3206 = xor i64 %3205, %3198
  %3207 = mul i64 %3182, %3206
  %3208 = trunc i64 %3207 to i32
  %3209 = or i64 %174, 376041207120986209
  %3210 = xor i64 %174, -1
  %3211 = and i64 376041207120986209, %3210
  %3212 = add i64 %3211, %174
  %3213 = or i64 %1008, 877325307058043564
  %3214 = xor i64 %1008, -1
  %3215 = and i64 877325307058043564, %3214
  %3216 = add i64 %3215, %1008
  %3217 = xor i64 %3213, %3209
  %3218 = xor i64 %3217, %3212
  %3219 = xor i64 %3218, -3256980943282201039
  %3220 = xor i64 %3219, %3216
  %3221 = add i64 %498, 1861847239765126552
  %3222 = add i64 8541718121236647403, %498
  %3223 = sub i64 %3222, 6679870881471520851
  %3224 = add i64 %1275, -6644557220713657387
  %3225 = add i64 2366745172505565020, %1275
  %3226 = sub i64 %3225, 9011302393219222407
  %3227 = sext i32 %66 to i64
  %3228 = and i64 %3227, -663252115857311956
  %3229 = xor i64 %3227, -1
  %3230 = xor i64 -663252115857311956, %3229
  %3231 = and i64 %3230, -663252115857311956
  %3232 = xor i64 %3224, %3231
  %3233 = xor i64 %3232, %3228
  %3234 = xor i64 %3233, %3223
  %3235 = xor i64 %3234, %3226
  %3236 = xor i64 %3235, 0
  %3237 = xor i64 %3236, %3221
  %3238 = mul i64 %3220, %3237
  %3239 = or i64 %488, 8341750380970889529
  %3240 = and i64 8341750380970889529, %488
  %3241 = xor i64 8341750380970889529, %488
  %3242 = or i64 %3240, %3241
  %3243 = or i64 %723, -7545364129368759690
  %3244 = xor i64 %723, -1
  %3245 = and i64 %3244, -4549705948790466308
  %3246 = and i64 %723, 4549705948790466307
  %3247 = or i64 %3245, %3246
  %3248 = xor i64 6311031570431801994, %3247
  %3249 = xor i64 %723, -1
  %3250 = or i64 7545364129368759689, %3249
  %3251 = xor i64 %3250, -1
  %3252 = and i64 %3251, -1
  %3253 = or i64 %3248, %3252
  %3254 = and i64 %292, -8923280352297102012
  %3255 = xor i64 %292, -1
  %3256 = or i64 8923280352297102011, %3255
  %3257 = xor i64 %3256, -1
  %3258 = and i64 %3257, -1
  %3259 = xor i64 %3253, %3243
  %3260 = xor i64 %3259, %3239
  %3261 = xor i64 %3260, %3258
  %3262 = xor i64 %3261, %3242
  %3263 = xor i64 %3262, %3254
  %3264 = xor i64 %3263, -937703344029349385
  %3265 = add i64 %1318, 6718064648012358166
  %3266 = xor i64 6718064648012358166, %1318
  %3267 = and i64 6718064648012358166, %1318
  %3268 = mul i64 2, %3267
  %3269 = add i64 %3266, %3268
  %3270 = and i64 %774, 982084709148919510
  %3271 = xor i64 %774, -1
  %3272 = xor i64 982084709148919510, %3271
  %3273 = and i64 %3272, 982084709148919510
  %3274 = and i64 %1328, 8582896649352096740
  %3275 = xor i64 %1328, -1
  %3276 = xor i64 8582896649352096740, %3275
  %3277 = and i64 %3276, 8582896649352096740
  %3278 = xor i64 %3277, %3270
  %3279 = xor i64 %3278, %3273
  %3280 = xor i64 %3279, %3269
  %3281 = xor i64 %3280, %3274
  %3282 = xor i64 %3281, 0
  %3283 = xor i64 %3282, %3265
  %3284 = mul i64 %3264, %3283
  call void @"5784248439022692321"(i32 8, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i1* null, i32 0, i1* null, i64* %.reload524, i8*** %3164, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 %3208, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 %3238, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 %3284, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %3285 = load i8**, i8*** %3164, align 8
  %3286 = load i8*, i8** %3285, align 8
  %3287 = bitcast i8* %3286 to i1 (i32, i32, i1*)*
  %targetBlock = call i1 %3287(i32 %17, i32 %18, i1* %19)
  %.reload209 = load i8**, i8*** %.reg2mem208, align 8
  %.reload212 = load i8**, i8*** %.reg2mem211, align 8
  %3288 = select i1 %targetBlock, i8** %.reload209, i8** %.reload212
  %3289 = load i8*, i8** %3288, align 8
  indirectbr i8* %3289, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub3:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %20, align 1
  ret void

.exitStub1:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %20, align 1
  ret void

newFuncRoot4:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload218 = load i8**, i8*** %.reg2mem217, align 8
  %3290 = load i8*, i8** %.reload218, align 8
  indirectbr i8* %3290, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"50":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3291 = icmp eq i32 %21, 0
  store i1 %3291, i1* %22, align 1
  %3292 = srem i32 %23, 2
  %3293 = icmp eq i32 %3292, 0
  %.reload221 = load i8**, i8*** %.reg2mem220, align 8
  %.reload224 = load i8**, i8*** %.reg2mem223, align 8
  %3294 = select i1 %3293, i8** %.reload221, i8** %.reload224
  %3295 = load i8*, i8** %3294, align 8
  indirectbr i8* %3295, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub:                               ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %24, align 1
  ret void

.exitStub2.exitStub:                              ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %24, align 1
  ret void

"53":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3296 = load i64, i64* %25, align 8
  %3297 = call i64 @m1252811912226950246(i64 %3296)
  %3298 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13284784893890992073, i32 0, i64 %3297
  store i8** %3298, i8*** %26, align 8
  ret void

"54":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3299 = load i64, i64* %27, align 8
  %3300 = call i64 @m1252811912226950246(i64 %3299)
  %3301 = getelementptr inbounds [11 x i8*], [11 x i8*]* @obfsfuncAddrLookupTable6796840101367681652, i32 0, i64 %3300
  store i8** %3301, i8*** %28, align 8
  ret void

newFuncRoot5:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload236 = load i8**, i8*** %.reg2mem235, align 8
  %3302 = load i8*, i8** %.reload236, align 8
  indirectbr i8* %3302, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"56":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 %29, i64* %30, align 8
  %.reload239 = load i8**, i8*** %.reg2mem238, align 8
  %.reload242 = load i8**, i8*** %.reg2mem241, align 8
  %3303 = select i1 %31, i8** %.reload239, i8** %.reload242
  %3304 = load i8*, i8** %3303, align 8
  indirectbr i8* %3304, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub6:                              ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %32, align 1
  ret void

codeRepl.exitStub.exitStub:                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %32, align 1
  ret void

newFuncRoot7:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3305 = alloca i64, align 8
  store i64* %3305, i64** %.reg2mem526, align 8
  %3306 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %3307 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable17288531702685132446, i32 0, i64 %3306
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %3307, align 8
  %3308 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %3309 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable17288531702685132446, i32 0, i64 %3308
  store i8* bitcast (i1 (i32, i1*, i32)* @main_loop.extracted.20.extracted to i8*), i8** %3309, align 8
  %.reload248 = load i8**, i8*** %.reg2mem247, align 8
  %3310 = load i8*, i8** %.reload248, align 8
  indirectbr i8* %3310, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"60":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload530 = load i64*, i64** %.reg2mem526, align 8
  store i64 5221456193252566391, i64* %.reload530, align 8
  %.reload529 = load i64*, i64** %.reg2mem526, align 8
  %3311 = call i8** @lk16272290410439088112(i64* %.reload529)
  %3312 = load i8*, i8** %3311, align 8
  %3313 = bitcast i8* %3312 to i32 (float, float*, float*, i8*, float*)*
  %3314 = call i32 %3313(float %33, float* %34, float* %35, i8* %36, float* %37)
  store i32 %3314, i32* %.reg2mem531, align 4
  %.reload533 = load i32, i32* %.reg2mem531, align 4
  store i32 %.reload533, i32* %39, align 4
  %.reload251 = load i8**, i8*** %.reg2mem250, align 8
  %3315 = load i8*, i8** %.reload251, align 8
  indirectbr i8* %3315, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl8:                                        ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload528 = load i64*, i64** %.reg2mem526, align 8
  store i64 5221456193252566390, i64* %.reload528, align 8
  %.reload527 = load i64*, i64** %.reg2mem526, align 8
  %3316 = call i8** @lk16272290410439088112(i64* %.reload527)
  %3317 = load i8*, i8** %3316, align 8
  %3318 = bitcast i8* %3317 to i1 (i32, i1*, i32)*
  %.reload532 = load i32, i32* %.reg2mem531, align 4
  %targetBlock9 = call i1 %3318(i32 %.reload532, i1* %40, i32 %38)
  %.reload254 = load i8**, i8*** %.reg2mem253, align 8
  %.reload257 = load i8**, i8*** %.reg2mem256, align 8
  %3319 = select i1 %targetBlock9, i8** %.reload254, i8** %.reload257
  %3320 = load i8*, i8** %3319, align 8
  indirectbr i8* %3320, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub10:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3321 = or i64 %1000, -75967290085005454
  %3322 = and i64 -75967290085005454, %1000
  %3323 = xor i64 -75967290085005454, %1000
  %3324 = or i64 %3322, %3323
  %3325 = or i64 %614, -5075626229818469416
  %3326 = xor i64 %614, -1
  %3327 = and i64 %3326, -8714795783449930315
  %3328 = and i64 %614, 8714795783449930314
  %3329 = or i64 %3327, %3328
  %3330 = xor i64 4503902807407380077, %3329
  %3331 = xor i64 %614, -1
  %3332 = or i64 5075626229818469415, %3331
  %3333 = xor i64 %3332, -1
  %3334 = and i64 %3333, -1
  %3335 = or i64 %3330, %3334
  %3336 = xor i64 %3321, %3335
  %3337 = xor i64 %3336, %3324
  %3338 = xor i64 %3337, %3325
  %3339 = xor i64 %3338, -5786649614025871655
  %3340 = or i64 %440, -4118673921361146619
  %3341 = and i64 -4118673921361146619, %440
  %3342 = xor i64 -4118673921361146619, %440
  %3343 = or i64 %3341, %3342
  %3344 = add i64 %1338, 4702697975389581160
  %3345 = sub i64 0, %1338
  %3346 = sub i64 4702697975389581160, %3345
  %3347 = xor i64 %3346, -5575127889581346455
  %3348 = xor i64 %3347, %3344
  %3349 = xor i64 %3348, %3340
  %3350 = xor i64 %3349, %3343
  %3351 = mul i64 %3339, %3350
  %3352 = trunc i64 %3351 to i1
  store i1 %3352, i1* %41, align 1
  ret void

.exitStub211:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %41, align 1
  ret void

"64":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3353 = load i64, i64* %42, align 8
  %3354 = call i64 @m1252811912226950246(i64 %3353)
  %3355 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2277199937449041614, i32 0, i64 %3354
  store i8** %3355, i8*** %43, align 8
  ret void

newFuncRoot12:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload266 = load i8**, i8*** %.reg2mem265, align 8
  %3356 = load i8*, i8** %.reload266, align 8
  indirectbr i8* %3356, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"66":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3357 = add i32 %44, 721457263
  %3358 = add i32 %3357, %45
  %3359 = sub i32 %3358, 721457263
  store i32 %3359, i32* %46, align 4
  %3360 = sext i32 %3359 to i64
  store i64 %3360, i64* %47, align 8
  %3361 = getelementptr inbounds float, float* %48, i64 %3360
  store float* %3361, float** %49, align 8
  %3362 = load float, float* %3361, align 4, !tbaa !10
  %3363 = fcmp ogt float %50, %3362
  %.reload269 = load i8**, i8*** %.reg2mem268, align 8
  %.reload272 = load i8**, i8*** %.reg2mem271, align 8
  %3364 = select i1 %3363, i8** %.reload269, i8** %.reload272
  %3365 = load i8*, i8** %3364, align 8
  indirectbr i8* %3365, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub13:                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %51, align 1
  ret void

.exitStub3.exitStub:                              ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %51, align 1
  ret void

newFuncRoot14:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload278 = load i8**, i8*** %.reg2mem277, align 8
  %3366 = load i8*, i8** %.reload278, align 8
  indirectbr i8* %3366, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"70":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3367 = srem i32 %52, 2
  store i32 %3367, i32* %54, align 4
  %3368 = srem i32 %53, 2
  %3369 = icmp eq i32 %3368, 0
  %.reload281 = load i8**, i8*** %.reg2mem280, align 8
  %.reload284 = load i8**, i8*** %.reg2mem283, align 8
  %3370 = select i1 %3369, i8** %.reload281, i8** %.reload284
  %3371 = load i8*, i8** %3370, align 8
  indirectbr i8* %3371, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub15:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %55, align 1
  ret void

.exitStub116:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %55, align 1
  ret void

"73":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3372 = load i64, i64* %56, align 8
  %3373 = call i64 @m1252811912226950246(i64 %3372)
  %3374 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13215117349962675226, i32 0, i64 %3373
  store i8** %3374, i8*** %57, align 8
  ret void

newFuncRoot17:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload293 = load i8**, i8*** %.reg2mem292, align 8
  %3375 = load i8*, i8** %.reload293, align 8
  indirectbr i8* %3375, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"75":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3376 = icmp eq i32 %58, 0
  %3377 = add i64 %480, -867365503519668719
  %3378 = xor i64 -867365503519668719, %480
  %3379 = and i64 -867365503519668719, %480
  %3380 = mul i64 2, %3379
  %3381 = add i64 %3378, %3380
  %3382 = or i64 %1204, 6106379153997207373
  %3383 = xor i64 %1204, -1
  %3384 = and i64 %3383, 3216745736104906407
  %3385 = and i64 %1204, -3216745736104906408
  %3386 = or i64 %3384, %3385
  %3387 = xor i64 8654258534320675306, %3386
  %3388 = xor i64 %1204, -1
  %3389 = or i64 -6106379153997207374, %3388
  %3390 = xor i64 %3389, -1
  %3391 = and i64 %3390, -1
  %3392 = or i64 %3387, %3391
  %3393 = xor i64 6730225164538376933, %3377
  %3394 = xor i64 %3393, %3381
  %3395 = xor i64 %3394, %3392
  %3396 = xor i64 %3395, %3382
  %3397 = or i64 %211, 8063615435029912133
  %3398 = and i64 8063615435029912133, %211
  %3399 = xor i64 8063615435029912133, %211
  %3400 = or i64 %3398, %3399
  %3401 = or i64 %924, -1932122192641346836
  %3402 = xor i64 %924, -1
  %3403 = and i64 %3402, -4080294812050753444
  %3404 = and i64 %924, 4080294812050753443
  %3405 = or i64 %3403, %3404
  %3406 = xor i64 2481580593417996976, %3405
  %3407 = xor i64 %924, -1
  %3408 = or i64 1932122192641346835, %3407
  %3409 = xor i64 %3408, -1
  %3410 = and i64 %3409, -1
  %3411 = or i64 %3406, %3410
  %3412 = or i64 %1412, 2168312469026616433
  %3413 = xor i64 %1412, -1
  %3414 = and i64 2168312469026616433, %3413
  %3415 = add i64 %3414, %1412
  %3416 = xor i64 %3415, %3412
  %3417 = xor i64 %3416, %3401
  %3418 = xor i64 %3417, %3397
  %3419 = xor i64 %3418, %3411
  %3420 = xor i64 %3419, -1060745164145362195
  %3421 = xor i64 %3420, %3400
  %3422 = mul i64 %3396, %3421
  %3423 = trunc i64 %3422 to i32
  %3424 = and i32 %59, %3423
  %3425 = or i64 %821, -6247368905955551375
  %3426 = xor i64 %821, -1
  %3427 = and i64 -6247368905955551375, %3426
  %3428 = add i64 %3427, %821
  %3429 = add i64 %719, 8712120304505878044
  %3430 = sub i64 0, %719
  %3431 = add i64 -8712120304505878044, %3430
  %3432 = sub i64 0, %3431
  %3433 = xor i64 8219382059700674091, %3432
  %3434 = xor i64 %3433, %3425
  %3435 = xor i64 %3434, %3429
  %3436 = xor i64 %3435, %3428
  %3437 = add i64 %290, 7826516849320703329
  %3438 = and i64 7826516849320703329, %290
  %3439 = or i64 7826516849320703329, %290
  %3440 = add i64 %3438, %3439
  %3441 = or i64 %492, -5652197205371042636
  %3442 = xor i64 %492, -1
  %3443 = and i64 -5652197205371042636, %3442
  %3444 = add i64 %3443, %492
  %3445 = and i64 %442, -8137217625321723
  %3446 = or i64 8137217625321722, %442
  %3447 = sub i64 %3446, 8137217625321722
  %3448 = xor i64 %3444, %3447
  %3449 = xor i64 %3448, %3440
  %3450 = xor i64 %3449, %3445
  %3451 = xor i64 %3450, %3441
  %3452 = xor i64 %3451, %3437
  %3453 = xor i64 %3452, 1838443221282353283
  %3454 = mul i64 %3436, %3453
  %3455 = trunc i64 %3454 to i32
  %3456 = icmp eq i32 %3424, %3455
  %3457 = mul i32 %59, %59
  %3458 = sub i32 0, %3457
  %3459 = sub i32 0, %59
  %3460 = add i32 %3458, %3459
  %3461 = sub i32 0, %3460
  %3462 = srem i32 %3461, 2
  %3463 = icmp eq i32 %3462, 0
  %3464 = xor i1 %3463, true
  %3465 = and i1 %3456, %3464
  %3466 = add i1 %3465, %3463
  store i1 %3466, i1* %60, align 1
  %.reload296 = load i8**, i8*** %.reg2mem295, align 8
  %.reload299 = load i8**, i8*** %.reg2mem298, align 8
  %3467 = select i1 %3466, i8** %.reload296, i8** %.reload299
  %3468 = load i8*, i8** %3467, align 8
  indirectbr i8* %3468, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub18:                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %61, align 1
  ret void

.exitStub1.exitStub:                              ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %61, align 1
  ret void

newFuncRoot19:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload305 = load i8**, i8*** %.reg2mem304, align 8
  %3469 = load i8*, i8** %.reload305, align 8
  indirectbr i8* %3469, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"79":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3470 = srem i32 %62, 4
  %3471 = add i64 %723, 4093322223263901659
  %3472 = sub i64 0, %723
  %3473 = sub i64 4093322223263901659, %3472
  %3474 = add i64 %1330, -1096868991416860759
  %3475 = add i64 -1763390923986044641, %1330
  %3476 = add i64 %3475, 666521932569183882
  %3477 = and i64 %122, -3972549766588795246
  %3478 = xor i64 %122, -1
  %3479 = or i64 3972549766588795245, %3478
  %3480 = xor i64 %3479, -1
  %3481 = and i64 %3480, -1
  %3482 = xor i64 %3476, %3474
  %3483 = xor i64 %3482, %3477
  %3484 = xor i64 %3483, %3481
  %3485 = xor i64 %3484, -4893982749878806179
  %3486 = xor i64 %3485, %3473
  %3487 = xor i64 %3486, %3471
  %3488 = or i64 %341, 4397610817669651463
  %3489 = xor i64 %341, -1
  %3490 = and i64 %3489, 2834223309294887589
  %3491 = and i64 %341, -2834223309294887590
  %3492 = or i64 %3490, %3491
  %3493 = xor i64 1896680271499640482, %3492
  %3494 = xor i64 %341, -1
  %3495 = or i64 -4397610817669651464, %3494
  %3496 = xor i64 %3495, -1
  %3497 = and i64 %3496, -1
  %3498 = or i64 %3493, %3497
  %3499 = or i64 %1231, -7466453684838594646
  %3500 = xor i64 %1231, -1
  %3501 = and i64 %3500, 8158259127261326157
  %3502 = and i64 %1231, -8158259127261326158
  %3503 = or i64 %3501, %3502
  %3504 = xor i64 -1633075358876701465, %3503
  %3505 = xor i64 %1231, -1
  %3506 = or i64 7466453684838594645, %3505
  %3507 = xor i64 %3506, -1
  %3508 = and i64 %3507, -1
  %3509 = or i64 %3504, %3508
  %3510 = add i64 %1412, -6089442045644314433
  %3511 = xor i64 -6089442045644314433, %1412
  %3512 = and i64 -6089442045644314433, %1412
  %3513 = mul i64 2, %3512
  %3514 = add i64 %3511, %3513
  %3515 = xor i64 %3498, %3509
  %3516 = xor i64 %3515, %3488
  %3517 = xor i64 %3516, %3499
  %3518 = xor i64 %3517, 0
  %3519 = xor i64 %3518, %3514
  %3520 = xor i64 %3519, %3510
  %3521 = mul i64 %3487, %3520
  %3522 = trunc i64 %3521 to i32
  %3523 = icmp eq i32 %3470, %3522
  %3524 = mul i32 %63, %63
  %3525 = sub i32 0, %3524
  %3526 = sub i32 0, %63
  %3527 = add i32 %3525, %3526
  %3528 = sub i32 0, %3527
  %3529 = srem i32 %3528, 2
  %3530 = icmp eq i32 %3529, 0
  %3531 = xor i1 %3523, true
  %3532 = and i1 %3531, true
  %3533 = and i1 %3523, false
  %3534 = or i1 %3532, %3533
  %3535 = xor i1 %3530, true
  %3536 = and i1 %3535, true
  %3537 = and i1 %3530, false
  %3538 = or i1 %3536, %3537
  %3539 = xor i1 %3534, %3538
  %3540 = xor i1 %3523, true
  %3541 = xor i1 %3530, true
  %3542 = or i1 %3540, %3541
  %3543 = add i64 %486, -1287818128193599505
  %3544 = and i64 -1287818128193599505, %486
  %3545 = or i64 -1287818128193599505, %486
  %3546 = add i64 %3544, %3545
  %3547 = add i64 %916, 4215859531826635474
  %3548 = add i64 -6634120687248321490, %916
  %3549 = sub i64 %3548, 7596763854634594652
  %3550 = xor i64 %3546, %3543
  %3551 = xor i64 %3550, -2764796312417347061
  %3552 = xor i64 %3551, %3547
  %3553 = xor i64 %3552, %3549
  %3554 = sext i32 %81 to i64
  %3555 = or i64 %3554, 3275789827595824058
  %3556 = and i64 3275789827595824058, %3554
  %3557 = xor i64 3275789827595824058, %3554
  %3558 = or i64 %3556, %3557
  %3559 = sext i32 %52 to i64
  %3560 = or i64 %3559, -1192645538909774097
  %3561 = and i64 -1192645538909774097, %3559
  %3562 = xor i64 -1192645538909774097, %3559
  %3563 = or i64 %3561, %3562
  %3564 = xor i64 %3558, -1348386677987450461
  %3565 = xor i64 %3564, %3563
  %3566 = xor i64 %3565, %3560
  %3567 = xor i64 %3566, %3555
  %3568 = mul i64 %3553, %3567
  %3569 = trunc i64 %3568 to i1
  %3570 = xor i1 %3542, %3569
  %3571 = and i1 %3570, true
  %3572 = or i1 %3539, %3571
  store i1 %3572, i1* %64, align 1
  %.reload308 = load i8**, i8*** %.reg2mem307, align 8
  %.reload311 = load i8**, i8*** %.reg2mem310, align 8
  %3573 = select i1 %3572, i8** %.reload308, i8** %.reload311
  %3574 = load i8*, i8** %3573, align 8
  indirectbr i8* %3574, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub20:                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %65, align 1
  ret void

.exitStub1.exitStub21:                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %65, align 1
  ret void

newFuncRoot22:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload317 = load i8**, i8*** %.reg2mem316, align 8
  %3575 = load i8*, i8** %.reload317, align 8
  indirectbr i8* %3575, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"83":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3576 = srem i32 %66, 4
  %3577 = icmp eq i32 %3576, 0
  %3578 = mul i32 %67, %67
  %3579 = mul i32 %3578, %67
  %3580 = add i32 %3579, %67
  %3581 = srem i32 %3580, 2
  %3582 = icmp eq i32 %3581, 0
  %3583 = and i1 %3577, %3582
  store i1 %3583, i1* %68, align 1
  %.reload320 = load i8**, i8*** %.reg2mem319, align 8
  %.reload323 = load i8**, i8*** %.reg2mem322, align 8
  %3584 = select i1 %3583, i8** %.reload320, i8** %.reload323
  %3585 = load i8*, i8** %3584, align 8
  indirectbr i8* %3585, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub23:                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %69, align 1
  ret void

.exitStub1.exitStub24:                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %69, align 1
  ret void

newFuncRoot25:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload329 = load i8**, i8*** %.reg2mem328, align 8
  %3586 = load i8*, i8** %.reload329, align 8
  indirectbr i8* %3586, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"87":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 %70, i64* %71, align 8
  %3587 = add i64 8, 65
  store i64 %3587, i64* %72, align 8
  %.reload332 = load i8**, i8*** %.reg2mem331, align 8
  %.reload335 = load i8**, i8*** %.reg2mem334, align 8
  %3588 = select i1 %73, i8** %.reload332, i8** %.reload335
  %3589 = load i8*, i8** %3588, align 8
  indirectbr i8* %3589, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub.exitStub26:                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %74, align 1
  ret void

.exitStub8.exitStub:                              ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %74, align 1
  ret void

"90":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3590 = alloca i64, align 8
  store i64* %3590, i64** %.reg2mem534, align 8
  %3591 = add i64 %251, -3765062010532152337
  %3592 = sub i64 0, %251
  %3593 = add i64 3765062010532152337, %3592
  %3594 = sub i64 0, %3593
  %3595 = add i64 %492, -690817300566673647
  %3596 = sub i64 0, %492
  %3597 = add i64 690817300566673647, %3596
  %3598 = sub i64 0, %3597
  %3599 = or i64 %1352, 9086497500275088998
  %3600 = xor i64 %1352, -1
  %3601 = and i64 9086497500275088998, %3600
  %3602 = add i64 %3601, %1352
  %3603 = xor i64 %3599, %3602
  %3604 = xor i64 %3603, %3598
  %3605 = xor i64 %3604, -8030119063317846127
  %3606 = xor i64 %3605, %3595
  %3607 = xor i64 %3606, %3591
  %3608 = xor i64 %3607, %3594
  %3609 = and i64 %774, -7494653558199775510
  %3610 = xor i64 %774, -1
  %3611 = or i64 7494653558199775509, %3610
  %3612 = xor i64 %3611, -1
  %3613 = and i64 %3612, -1
  %3614 = or i64 %1350, 5266023318574112978
  %3615 = xor i64 %1350, -1
  %3616 = and i64 5266023318574112978, %3615
  %3617 = add i64 %3616, %1350
  %3618 = sext i32 %52 to i64
  %3619 = and i64 %3618, 4482576548397361079
  %3620 = or i64 -4482576548397361080, %3618
  %3621 = sub i64 %3620, -4482576548397361080
  %3622 = xor i64 %3614, %3621
  %3623 = xor i64 %3622, %3617
  %3624 = xor i64 %3623, 3909245909250330390
  %3625 = xor i64 %3624, %3609
  %3626 = xor i64 %3625, %3613
  %3627 = xor i64 %3626, %3619
  %3628 = mul i64 %3608, %3627
  %3629 = call i64 @m1252811912226950246(i64 %3628)
  %3630 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %3629
  store i8* bitcast (i1 (i32, i32, i32, i32*, i32*, i32*, i1*)* @inner_loop.extracted to i8*), i8** %3630, align 8
  %3631 = call i64 @m1252811912226950246(i64 5221456193252566387)
  %3632 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %3631
  store i8* bitcast (i1 (i32, i32, i1*)* @inner_loop.extracted.22 to i8*), i8** %3632, align 8
  %3633 = call i64 @m1252811912226950246(i64 5221456193252566386)
  %3634 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %3633
  store i8* bitcast (i1 (i32, i32, float*, float, i32*, i64*, float**)* @inner_loop.extracted.23 to i8*), i8** %3634, align 8
  %3635 = and i64 %484, -7912174624289602382
  %3636 = or i64 7912174624289602381, %484
  %3637 = sub i64 %3636, 7912174624289602381
  %3638 = or i64 %96, 676098751831391725
  %3639 = and i64 676098751831391725, %96
  %3640 = xor i64 676098751831391725, %96
  %3641 = or i64 %3639, %3640
  %3642 = or i64 %916, 4316157811754411351
  %3643 = xor i64 %916, -1
  %3644 = and i64 %3643, -6109102817719487048
  %3645 = and i64 %916, 6109102817719487047
  %3646 = or i64 %3644, %3645
  %3647 = xor i64 -8007952145429311249, %3646
  %3648 = xor i64 %916, -1
  %3649 = or i64 -4316157811754411352, %3648
  %3650 = xor i64 %3649, -1
  %3651 = and i64 %3650, -1
  %3652 = or i64 %3647, %3651
  %3653 = xor i64 %3652, %3637
  %3654 = xor i64 %3653, 2508445801748818761
  %3655 = xor i64 %3654, %3642
  %3656 = xor i64 %3655, %3635
  %3657 = xor i64 %3656, %3638
  %3658 = xor i64 %3657, %3641
  %3659 = or i64 %1348, -7977886564257838080
  %3660 = and i64 -7977886564257838080, %1348
  %3661 = xor i64 -7977886564257838080, %1348
  %3662 = or i64 %3660, %3661
  %3663 = or i64 %659, 710827587766846360
  %3664 = xor i64 %659, -1
  %3665 = and i64 %3664, 5333369900504431146
  %3666 = and i64 %659, -5333369900504431147
  %3667 = or i64 %3665, %3666
  %3668 = xor i64 4890542259326925234, %3667
  %3669 = xor i64 %659, -1
  %3670 = or i64 -710827587766846361, %3669
  %3671 = xor i64 %3670, -1
  %3672 = and i64 %3671, -1
  %3673 = or i64 %3668, %3672
  %3674 = and i64 %498, -1181429448002831720
  %3675 = xor i64 %498, -1
  %3676 = xor i64 -1181429448002831720, %3675
  %3677 = and i64 %3676, -1181429448002831720
  %3678 = xor i64 %3662, 193304582509616333
  %3679 = xor i64 %3678, %3659
  %3680 = xor i64 %3679, %3677
  %3681 = xor i64 %3680, %3674
  %3682 = xor i64 %3681, %3673
  %3683 = xor i64 %3682, %3663
  %3684 = mul i64 %3658, %3683
  %3685 = call i64 @m1252811912226950246(i64 %3684)
  %3686 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %3685
  store i8* bitcast (i1 (i1, i1, i1, i1*, i1*)* @inner_loop.extracted.24 to i8*), i8** %3686, align 8
  %3687 = call i64 @m1252811912226950246(i64 5221456193252566388)
  %3688 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %3687
  store i8* bitcast (void (i32, i1, i32*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)* @inner_loop.extracted.25 to i8*), i8** %3688, align 8
  %3689 = call i64 @m1252811912226950246(i64 5221456193252566391)
  %3690 = getelementptr [6 x i8*], [6 x i8*]* @obfsfuncAddrLookupTable5817226267099857021, i32 0, i64 %3689
  store i8* bitcast (void ()* @inner_loop.extracted.26 to i8*), i8** %3690, align 8
  %.loc51 = alloca i1, align 1
  store i1* %.loc51, i1** %.loc51.reg2mem, align 8
  %.loc50 = alloca i1, align 1
  store i1* %.loc50, i1** %.loc50.reg2mem, align 8
  %.loc49 = alloca i1, align 1
  store i1* %.loc49, i1** %.loc49.reg2mem, align 8
  %3691 = and i64 %247, -317774273629708787
  %3692 = xor i64 %247, -1
  %3693 = or i64 317774273629708786, %3692
  %3694 = xor i64 %3693, -1
  %3695 = and i64 %3694, -1
  %3696 = add i64 %1172, -1951632784053881578
  %3697 = add i64 -5641157336431257347, %1172
  %3698 = add i64 %3697, 3689524552377375769
  %3699 = xor i64 %3696, 4148386671971716125
  %3700 = xor i64 %3699, %3695
  %3701 = xor i64 %3700, %3698
  %3702 = xor i64 %3701, %3691
  %3703 = or i64 %339, 7630193377245965414
  %3704 = xor i64 %339, -1
  %3705 = and i64 %3704, 3887208615505451994
  %3706 = and i64 %339, -3887208615505451995
  %3707 = or i64 %3705, %3706
  %3708 = xor i64 6634303425704294332, %3707
  %3709 = xor i64 %339, -1
  %3710 = or i64 -7630193377245965415, %3709
  %3711 = xor i64 %3710, -1
  %3712 = and i64 %3711, -1
  %3713 = or i64 %3708, %3712
  %3714 = add i64 %920, 6436643132181911698
  %3715 = sub i64 0, %920
  %3716 = sub i64 6436643132181911698, %3715
  %3717 = add i64 %1344, 918555084706102838
  %3718 = add i64 -5421995483505138012, %1344
  %3719 = sub i64 %3718, -6340550568211240850
  %3720 = xor i64 %3716, %3714
  %3721 = xor i64 %3720, %3703
  %3722 = xor i64 %3721, %3719
  %3723 = xor i64 %3722, %3713
  %3724 = xor i64 %3723, 3683397190659495477
  %3725 = xor i64 %3724, %3717
  %3726 = mul i64 %3702, %3725
  %3727 = trunc i64 %3726 to i32
  %.loc48 = alloca i1, i32 %3727, align 1
  store i1* %.loc48, i1** %.loc48.reg2mem, align 8
  %.loc47 = alloca i1, align 1
  store i1* %.loc47, i1** %.loc47.reg2mem, align 8
  %.loc46 = alloca i1, align 1
  store i1* %.loc46, i1** %.loc46.reg2mem, align 8
  %3728 = or i64 %602, 2153177029007152534
  %3729 = xor i64 %602, -1
  %3730 = and i64 2153177029007152534, %3729
  %3731 = add i64 %3730, %602
  %3732 = and i64 %928, 3407874661817252772
  %3733 = xor i64 %928, -1
  %3734 = xor i64 3407874661817252772, %3733
  %3735 = and i64 %3734, 3407874661817252772
  %3736 = and i64 %211, -2469070801977607502
  %3737 = xor i64 %211, -1
  %3738 = or i64 2469070801977607501, %3737
  %3739 = xor i64 %3738, -1
  %3740 = and i64 %3739, -1
  %3741 = xor i64 %3731, %3736
  %3742 = xor i64 %3741, -1950965148784414333
  %3743 = xor i64 %3742, %3735
  %3744 = xor i64 %3743, %3740
  %3745 = xor i64 %3744, %3728
  %3746 = xor i64 %3745, %3732
  %3747 = add i64 %661, 114330998029870380
  %3748 = sub i64 0, %661
  %3749 = add i64 -114330998029870380, %3748
  %3750 = sub i64 0, %3749
  %3751 = or i64 %1320, 1933747593506165840
  %3752 = and i64 1933747593506165840, %1320
  %3753 = xor i64 1933747593506165840, %1320
  %3754 = or i64 %3752, %3753
  %3755 = xor i64 7974950628391118123, %3751
  %3756 = xor i64 %3755, %3750
  %3757 = xor i64 %3756, %3754
  %3758 = xor i64 %3757, %3747
  %3759 = mul i64 %3746, %3758
  %3760 = trunc i64 %3759 to i32
  %.loc45 = alloca i1, i32 %3760, align 1
  store i1* %.loc45, i1** %.loc45.reg2mem, align 8
  %.loc44 = alloca i1, align 1
  store i1* %.loc44, i1** %.loc44.reg2mem, align 8
  %.loc43 = alloca i1, align 1
  store i1* %.loc43, i1** %.loc43.reg2mem, align 8
  %3761 = and i64 %1237, -1475710800154069450
  %3762 = xor i64 %1237, -1
  %3763 = or i64 1475710800154069449, %3762
  %3764 = xor i64 %3763, -1
  %3765 = and i64 %3764, -1
  %3766 = or i64 %612, -2309834420287165696
  %3767 = xor i64 %612, -1
  %3768 = and i64 -2309834420287165696, %3767
  %3769 = add i64 %3768, %612
  %3770 = xor i64 %3769, -1361645837853373877
  %3771 = xor i64 %3770, %3765
  %3772 = xor i64 %3771, %3761
  %3773 = xor i64 %3772, %3766
  %3774 = and i64 %101, -5690743101299392144
  %3775 = xor i64 %101, -1
  %3776 = xor i64 -5690743101299392144, %3775
  %3777 = and i64 %3776, -5690743101299392144
  %3778 = or i64 %108, 3195415305457776098
  %3779 = and i64 3195415305457776098, %108
  %3780 = xor i64 3195415305457776098, %108
  %3781 = or i64 %3779, %3780
  %3782 = xor i64 %3781, %3778
  %3783 = xor i64 %3782, 1700096256091795299
  %3784 = xor i64 %3783, %3774
  %3785 = xor i64 %3784, %3777
  %3786 = mul i64 %3773, %3785
  %3787 = trunc i64 %3786 to i32
  %.loc42 = alloca i1, i32 %3787, align 1
  store i1* %.loc42, i1** %.loc42.reg2mem, align 8
  %.loc41 = alloca i1, align 1
  store i1* %.loc41, i1** %.loc41.reg2mem, align 8
  %.loc40 = alloca i1, align 1
  store i1* %.loc40, i1** %.loc40.reg2mem, align 8
  %3788 = sext i32 %18 to i64
  %3789 = and i64 %3788, -4374098215638575623
  %3790 = xor i64 %3788, -1
  %3791 = or i64 4374098215638575622, %3790
  %3792 = xor i64 %3791, -1
  %3793 = and i64 %3792, -1
  %3794 = add i64 %1330, -4840359999786020983
  %3795 = add i64 -8935190281115533402, %1330
  %3796 = add i64 %3795, 4094830281329512419
  %3797 = xor i64 %3789, %3793
  %3798 = xor i64 %3797, -345730691859345075
  %3799 = xor i64 %3798, %3794
  %3800 = xor i64 %3799, %3796
  %3801 = and i64 %930, -5214129916743908018
  %3802 = xor i64 %930, -1
  %3803 = or i64 5214129916743908017, %3802
  %3804 = xor i64 %3803, -1
  %3805 = and i64 %3804, -1
  %3806 = add i64 %100, -6398405218289900796
  %3807 = sub i64 0, %100
  %3808 = add i64 6398405218289900796, %3807
  %3809 = sub i64 0, %3808
  %3810 = add i64 %1172, 1301812379713345962
  %3811 = add i64 -3069620861812900975, %1172
  %3812 = add i64 %3811, 4371433241526246937
  %3813 = xor i64 %3809, %3812
  %3814 = xor i64 %3813, %3805
  %3815 = xor i64 %3814, -8306707936488747131
  %3816 = xor i64 %3815, %3810
  %3817 = xor i64 %3816, %3806
  %3818 = xor i64 %3817, %3801
  %3819 = mul i64 %3800, %3818
  %3820 = trunc i64 %3819 to i32
  %.loc39 = alloca i1, i32 %3820, align 1
  store i1* %.loc39, i1** %.loc39.reg2mem, align 8
  %.loc38 = alloca i1, align 1
  store i1* %.loc38, i1** %.loc38.reg2mem, align 8
  %.loc37 = alloca i1, align 1
  store i1* %.loc37, i1** %.loc37.reg2mem, align 8
  %3821 = and i64 %113, 8937460896204880251
  %3822 = or i64 -8937460896204880252, %113
  %3823 = sub i64 %3822, -8937460896204880252
  %3824 = or i64 %1406, 7664180470857801039
  %3825 = xor i64 %1406, -1
  %3826 = and i64 7664180470857801039, %3825
  %3827 = add i64 %3826, %1406
  %3828 = xor i64 %3821, 3116052835782714651
  %3829 = xor i64 %3828, %3827
  %3830 = xor i64 %3829, %3824
  %3831 = xor i64 %3830, %3823
  %3832 = add i64 %715, 1354381139594481426
  %3833 = and i64 1354381139594481426, %715
  %3834 = or i64 1354381139594481426, %715
  %3835 = add i64 %3833, %3834
  %3836 = sext i32 %81 to i64
  %3837 = add i64 %3836, 779837360794004254
  %3838 = add i64 3122102956271040585, %3836
  %3839 = add i64 %3838, -2342265595477036331
  %3840 = or i64 %542, 5754374360153836691
  %3841 = and i64 5754374360153836691, %542
  %3842 = xor i64 5754374360153836691, %542
  %3843 = or i64 %3841, %3842
  %3844 = xor i64 %3840, %3843
  %3845 = xor i64 %3844, %3832
  %3846 = xor i64 %3845, %3835
  %3847 = xor i64 %3846, 4741549811278245139
  %3848 = xor i64 %3847, %3839
  %3849 = xor i64 %3848, %3837
  %3850 = mul i64 %3831, %3849
  %3851 = trunc i64 %3850 to i32
  %.loc36 = alloca i1, i32 %3851, align 1
  store i1* %.loc36, i1** %.loc36.reg2mem, align 8
  %.loc35 = alloca i32, align 4
  store i32* %.loc35, i32** %.loc35.reg2mem, align 8
  %.loc28 = alloca i1, align 1
  store i1* %.loc28, i1** %.loc28.reg2mem, align 8
  %.loc27 = alloca i1, align 1
  store i1* %.loc27, i1** %.loc27.reg2mem, align 8
  %.loc18 = alloca float*, align 8
  store float** %.loc18, float*** %.loc18.reg2mem, align 8
  %.loc17 = alloca i64, align 8
  store i64* %.loc17, i64** %.loc17.reg2mem, align 8
  %.loc16 = alloca i32, align 4
  store i32* %.loc16, i32** %.loc16.reg2mem, align 8
  %.loc11 = alloca i1, align 1
  store i1* %.loc11, i1** %.loc11.reg2mem, align 8
  %.loc3 = alloca i1, align 1
  store i1* %.loc3, i1** %.loc3.reg2mem, align 8
  %.loc2 = alloca i32, align 4
  store i32* %.loc2, i32** %.loc2.reg2mem, align 8
  %.loc1 = alloca i32, align 4
  store i32* %.loc1, i32** %.loc1.reg2mem, align 8
  %.loc = alloca i32, align 4
  store i32* %.loc, i32** %.loc.reg2mem, align 8
  %3852 = icmp eq float* %76, null
  %3853 = icmp eq float* %77, null
  %3854 = select i1 %3852, i1 true, i1 %3853
  %3855 = icmp eq i8* %78, null
  %3856 = select i1 %3854, i1 true, i1 %3855
  %3857 = icmp eq float* %79, null
  %3858 = select i1 %3856, i1 true, i1 %3857
  %.reload341 = load i8**, i8*** %.reg2mem340, align 8
  %.reload419 = load i8**, i8*** %.reg2mem417, align 8
  %3859 = select i1 %3858, i8** %.reload419, i8** %.reload341
  %3860 = load i8*, i8** %3859, align 8
  store i32 2, i32* %.reg2mem730, align 4
  indirectbr i8* %3860, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"91":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3861 = fpext float %75 to double
  %3862 = call double @llvm.cos.f64(double %3861)
  %3863 = fptrunc double %3862 to float
  store float %3863, float* %.reg2mem601, align 4
  %3864 = call double @llvm.sin.f64(double %3861)
  %3865 = fptrunc double %3864 to float
  store float %3865, float* %.reg2mem605, align 4
  %.reload604 = load float, float* %.reg2mem601, align 4
  %3866 = fadd float %.reload604, 2.000000e+00
  store float %3866, float* %.reg2mem608, align 4
  %.reload345 = load i8**, i8*** %.reg2mem343, align 8
  %3867 = load i8*, i8** %.reload345, align 8
  store double 0.000000e+00, double* %.reg2mem722, align 8
  indirectbr i8* %3867, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"92":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload723 = load double, double* %.reg2mem722, align 8
  store double %.reload723, double* %.reg2mem611, align 8
  %.reload614 = load double, double* %.reg2mem611, align 8
  %3868 = call double @llvm.sin.f64(double %.reload614)
  %3869 = fptrunc double %3868 to float
  %3870 = load float, float* %76, align 4, !tbaa !10
  %3871 = fpext float %3870 to double
  %3872 = call double @llvm.sin.f64(double %3871)
  %3873 = fptrunc double %3872 to float
  %3874 = call double @llvm.cos.f64(double %3871)
  %3875 = fptrunc double %3874 to float
  %.reload610 = load float, float* %.reg2mem608, align 4
  %3876 = fmul float %.reload610, %3869
  %3877 = fmul float %3876, %3873
  %.reload607 = load float, float* %.reg2mem605, align 4
  %3878 = fmul float %.reload607, %3875
  %3879 = fadd float %3877, %3878
  %3880 = fadd float %3879, 5.000000e+00
  %3881 = fdiv float 1.000000e+00, %3880
  store float %3881, float* %.reg2mem615, align 4
  %.reload613 = load double, double* %.reg2mem611, align 8
  %3882 = call double @llvm.cos.f64(double %.reload613)
  %3883 = fptrunc double %3882 to float
  %3884 = load float, float* %77, align 4, !tbaa !10
  %3885 = fpext float %3884 to double
  %3886 = call double @llvm.cos.f64(double %3885)
  %3887 = fptrunc double %3886 to float
  %3888 = call double @llvm.sin.f64(double %3885)
  %3889 = fptrunc double %3888 to float
  %3890 = fmul float %3876, %3875
  %.reload606 = load float, float* %.reg2mem605, align 4
  %3891 = fmul float %.reload606, %3873
  %3892 = fsub float %3890, %3891
  %.reload619 = load float, float* %.reg2mem615, align 4
  %3893 = fmul float %.reload619, 3.000000e+01
  %.reload609 = load float, float* %.reg2mem608, align 4
  %3894 = fmul float %.reload609, %3883
  %3895 = fmul float %3894, %3887
  %3896 = fmul float %3892, %3889
  %3897 = fsub float %3895, %3896
  %3898 = fmul float %3897, %3893
  %3899 = fadd float %3898, 4.000000e+01
  %3900 = fptosi float %3899 to i32
  store i32 %3900, i32* %.reg2mem620, align 4
  %.reload618 = load float, float* %.reg2mem615, align 4
  %3901 = fmul float %.reload618, 1.500000e+01
  %3902 = fmul float %3894, %3889
  %3903 = fmul float %3892, %3887
  %3904 = fadd float %3902, %3903
  %3905 = fmul float %3904, %3901
  %3906 = fadd float %3905, 1.200000e+01
  %3907 = fptosi float %3906 to i32
  store i32 %3907, i32* %.reg2mem629, align 4
  %.reload603 = load float, float* %.reg2mem601, align 4
  %3908 = fmul float %.reload603, %3869
  %3909 = fmul float %3908, %3875
  %3910 = fsub float %3891, %3909
  %3911 = fmul float %3910, %3887
  %3912 = fmul float %3908, %3873
  %3913 = fsub float %3911, %3912
  %3914 = fsub float %3913, %3878
  %.reload602 = load float, float* %.reg2mem601, align 4
  %3915 = fmul float %.reload602, %3883
  %3916 = fmul float %3915, %3889
  %3917 = fsub float %3914, %3916
  %3918 = fmul float %3917, 8.000000e+00
  %3919 = fptosi float %3918 to i32
  store i32 %3919, i32* %.reg2mem632, align 4
  %.reload631 = load i32, i32* %.reg2mem629, align 4
  %3920 = add i32 %.reload631, -1
  store i32 %3920, i32* %.reg2mem636, align 4
  %.reload638 = load i32, i32* %.reg2mem636, align 4
  %3921 = icmp ult i32 %.reload638, 21
  %.reload628 = load i32, i32* %.reg2mem620, align 4
  %3922 = icmp sgt i32 %.reload628, 0
  %3923 = select i1 %3921, i1 %3922, i1 false
  %.reload627 = load i32, i32* %.reg2mem620, align 4
  %3924 = icmp slt i32 %.reload627, 80
  %3925 = select i1 %3923, i1 %3924, i1 false
  %.reload349 = load i8**, i8*** %.reg2mem347, align 8
  %.reload412 = load i8**, i8*** %.reg2mem409, align 8
  %3926 = select i1 %3925, i8** %.reload349, i8** %.reload412
  %3927 = load i8*, i8** %3926, align 8
  indirectbr i8* %3927, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl27:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc.reload600 = load i32*, i32** %.loc.reg2mem, align 8
  %lt.cast = bitcast i32* %.loc.reload600 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %.loc1.reload598 = load i32*, i32** %.loc1.reg2mem, align 8
  %lt.cast7 = bitcast i32* %.loc1.reload598 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast7)
  %.loc2.reload596 = load i32*, i32** %.loc2.reg2mem, align 8
  %lt.cast8 = bitcast i32* %.loc2.reload596 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast8)
  %.loc3.reload594 = load i1*, i1** %.loc3.reg2mem, align 8
  %lt.cast9 = bitcast i1* %.loc3.reload594 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast9)
  %.reload546 = load i64*, i64** %.reg2mem534, align 8
  store i64 5221456193252566390, i64* %.reload546, align 8
  %.reload545 = load i64*, i64** %.reg2mem534, align 8
  %3928 = call i8** @lk3314813992465304394(i64* %.reload545)
  %3929 = load i8*, i8** %3928, align 8
  %3930 = bitcast i8* %3929 to i1 (i32, i32, i32, i32*, i32*, i32*, i1*)*
  %.loc3.reload593 = load i1*, i1** %.loc3.reg2mem, align 8
  %.loc2.reload595 = load i32*, i32** %.loc2.reg2mem, align 8
  %.loc1.reload597 = load i32*, i32** %.loc1.reg2mem, align 8
  %.loc.reload599 = load i32*, i32** %.loc.reg2mem, align 8
  %.reload626 = load i32, i32* %.reg2mem620, align 4
  %.reload630 = load i32, i32* %.reg2mem629, align 4
  %.reload635 = load i32, i32* %.reg2mem632, align 4
  %targetBlock28 = call i1 %3930(i32 %.reload630, i32 %.reload635, i32 %.reload626, i32* %.loc.reload599, i32* %.loc1.reload597, i32* %.loc2.reload595, i1* %.loc3.reload593)
  %.loc.reload = load i32*, i32** %.loc.reg2mem, align 8
  %.reload = load i32, i32* %.loc.reload, align 4
  store i32 %.reload, i32* %.reload.reg2mem, align 4
  %.loc1.reload = load i32*, i32** %.loc1.reg2mem, align 8
  %.reload4 = load i32, i32* %.loc1.reload, align 4
  store i32 %.reload4, i32* %.reload4.reg2mem, align 4
  %.loc2.reload = load i32*, i32** %.loc2.reg2mem, align 8
  %.reload5 = load i32, i32* %.loc2.reload, align 4
  store i32 %.reload5, i32* %.reload5.reg2mem, align 4
  %.loc3.reload = load i1*, i1** %.loc3.reg2mem, align 8
  %.reload6 = load i1, i1* %.loc3.reload, align 1
  store i1 %.reload6, i1* %.reload6.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast7)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast8)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast9)
  %.reload352 = load i8**, i8*** %.reg2mem351, align 8
  %.reload355 = load i8**, i8*** %.reg2mem354, align 8
  %3931 = select i1 %targetBlock28, i8** %.reload352, i8** %.reload355
  %3932 = load i8*, i8** %3931, align 8
  indirectbr i8* %3932, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"94":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload369 = load i8**, i8*** %.reg2mem367, align 8
  %3933 = load i8*, i8** %.reload369, align 8
  indirectbr i8* %3933, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl10:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc11.reload592 = load i1*, i1** %.loc11.reg2mem, align 8
  %lt.cast14 = bitcast i1* %.loc11.reload592 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast14)
  %.reload544 = load i64*, i64** %.reg2mem534, align 8
  store i64 5221456193252566387, i64* %.reload544, align 8
  %.reload543 = load i64*, i64** %.reg2mem534, align 8
  %3934 = call i8** @lk3314813992465304394(i64* %.reload543)
  %3935 = load i8*, i8** %3934, align 8
  %3936 = bitcast i8* %3935 to i1 (i32, i32, i1*)*
  %.loc11.reload591 = load i1*, i1** %.loc11.reg2mem, align 8
  %.reload637 = load i32, i32* %.reg2mem636, align 4
  %.reload4.reload = load i32, i32* %.reload4.reg2mem, align 4
  %targetBlock12 = call i1 %3936(i32 %.reload637, i32 %.reload4.reload, i1* %.loc11.reload591)
  %.loc11.reload = load i1*, i1** %.loc11.reg2mem, align 8
  %.reload13 = load i1, i1* %.loc11.reload, align 1
  store i1 %.reload13, i1* %.reload13.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast14)
  %.reload358 = load i8**, i8*** %.reg2mem357, align 8
  %.reload361 = load i8**, i8*** %.reg2mem360, align 8
  %3937 = select i1 %targetBlock12, i8** %.reload361, i8** %.reload358
  %3938 = load i8*, i8** %3937, align 8
  indirectbr i8* %3938, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"96":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3939 = sdiv i64 120, 40
  %3940 = sub i64 0, -215
  %.reload348 = load i8**, i8*** %.reg2mem347, align 8
  %.reload365 = load i8**, i8*** %.reg2mem363, align 8
  %.reload13.reload = load i1, i1* %.reload13.reg2mem, align 1
  %3941 = select i1 %.reload13.reload, i8** %.reload365, i8** %.reload348
  %3942 = load i8*, i8** %3941, align 8
  indirectbr i8* %3942, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"97":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3943 = sdiv i64 120, 40
  %3944 = sub i64 4533975968567504253, 4533975968567504038
  %.reload364 = load i8**, i8*** %.reg2mem363, align 8
  %3945 = load i8*, i8** %.reload364, align 8
  indirectbr i8* %3945, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"98":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload368 = load i8**, i8*** %.reg2mem367, align 8
  %3946 = load i8*, i8** %.reload368, align 8
  indirectbr i8* %3946, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"99":                                             ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload372 = load i8**, i8*** %.reg2mem371, align 8
  %.reload376 = load i8**, i8*** %.reg2mem374, align 8
  %.reload6.reload = load i1, i1* %.reload6.reg2mem, align 1
  %3947 = select i1 %.reload6.reload, i8** %.reload372, i8** %.reload376
  %3948 = load i8*, i8** %3947, align 8
  indirectbr i8* %3948, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"100":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3949 = or i64 %721, 611732229939854876
  %3950 = xor i64 %721, -1
  %3951 = and i64 611732229939854876, %3950
  %3952 = add i64 %3951, %721
  %3953 = and i64 %938, -4273040898490507786
  %3954 = or i64 4273040898490507785, %938
  %3955 = sub i64 %3954, 4273040898490507785
  %3956 = xor i64 %3949, -9036551419836034951
  %3957 = xor i64 %3956, %3952
  %3958 = xor i64 %3957, %3955
  %3959 = xor i64 %3958, %3953
  %3960 = or i64 %1328, 5365802385855763274
  %3961 = and i64 5365802385855763274, %1328
  %3962 = xor i64 5365802385855763274, %1328
  %3963 = or i64 %3961, %3962
  %3964 = add i64 %442, -1037444911383100823
  %3965 = add i64 -8119948922799723208, %442
  %3966 = sub i64 %3965, -7082504011416622385
  %3967 = xor i64 %3966, %3960
  %3968 = xor i64 %3967, %3964
  %3969 = xor i64 %3968, 4718123109044197495
  %3970 = xor i64 %3969, %3963
  %3971 = mul i64 %3959, %3970
  %3972 = trunc i64 %3971 to i32
  %3973 = add i32 %3972, 3
  %3974 = add i32 39, 88
  %3975 = add i32 29, 11
  %3976 = sdiv i32 82, 107
  %3977 = sub i32 102, 7
  %3978 = add i32 90, -125
  %3979 = sdiv i32 88, 106
  %3980 = sub i32 41, 16
  %3981 = sdiv i32 125, 110
  %.reload375 = load i8**, i8*** %.reg2mem374, align 8
  %3982 = load i8*, i8** %.reload375, align 8
  indirectbr i8* %3982, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl15:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc16.reload590 = load i32*, i32** %.loc16.reg2mem, align 8
  %lt.cast23 = bitcast i32* %.loc16.reload590 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast23)
  %.loc17.reload588 = load i64*, i64** %.loc17.reg2mem, align 8
  %lt.cast24 = bitcast i64* %.loc17.reload588 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast24)
  %.loc18.reload586 = load float**, float*** %.loc18.reg2mem, align 8
  %lt.cast25 = bitcast float** %.loc18.reload586 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  %.reload542 = load i64*, i64** %.reg2mem534, align 8
  store i64 5221456193252566386, i64* %.reload542, align 8
  %.reload541 = load i64*, i64** %.reg2mem534, align 8
  %3983 = call i8** @lk3314813992465304394(i64* %.reload541)
  %3984 = load i8*, i8** %3983, align 8
  %3985 = bitcast i8* %3984 to i1 (i32, i32, float*, float, i32*, i64*, float**)*
  %.loc18.reload585 = load float**, float*** %.loc18.reg2mem, align 8
  %.loc17.reload587 = load i64*, i64** %.loc17.reg2mem, align 8
  %.loc16.reload589 = load i32*, i32** %.loc16.reg2mem, align 8
  %.reload617 = load float, float* %.reg2mem615, align 4
  %.reload625 = load i32, i32* %.reg2mem620, align 4
  %.reload.reload = load i32, i32* %.reload.reg2mem, align 4
  %targetBlock19 = call i1 %3985(i32 %.reload.reload, i32 %.reload625, float* %79, float %.reload617, i32* %.loc16.reload589, i64* %.loc17.reload587, float** %.loc18.reload585)
  %.loc16.reload = load i32*, i32** %.loc16.reg2mem, align 8
  %.reload20 = load i32, i32* %.loc16.reload, align 4
  store i32 %.reload20, i32* %.reload20.reg2mem, align 4
  %.loc17.reload = load i64*, i64** %.loc17.reg2mem, align 8
  %.reload21 = load i64, i64* %.loc17.reload, align 8
  store i64 %.reload21, i64* %.reload21.reg2mem, align 8
  %.loc18.reload = load float**, float*** %.loc18.reg2mem, align 8
  %.reload22 = load float*, float** %.loc18.reload, align 8
  store float* %.reload22, float** %.reload22.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast23)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast24)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  %.reload380 = load i8**, i8*** %.reg2mem378, align 8
  %.reload411 = load i8**, i8*** %.reg2mem409, align 8
  %3986 = select i1 %targetBlock19, i8** %.reload380, i8** %.reload411
  %3987 = load i8*, i8** %3986, align 8
  indirectbr i8* %3987, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"102":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload616 = load float, float* %.reg2mem615, align 4
  %.reload22.reload = load float*, float** %.reload22.reg2mem, align 8
  store float %.reload616, float* %.reload22.reload, align 4, !tbaa !10
  %3988 = load i8*, i8** @CHARS, align 8, !tbaa !14
  %.reload634 = load i32, i32* %.reg2mem632, align 4
  %3989 = or i64 %502, 9220405764270153999
  %3990 = and i64 9220405764270153999, %502
  %3991 = xor i64 9220405764270153999, %502
  %3992 = or i64 %3990, %3991
  %3993 = add i64 %721, 8751025901995833778
  %3994 = sub i64 0, %721
  %3995 = add i64 -8751025901995833778, %3994
  %3996 = sub i64 0, %3995
  %3997 = or i64 %821, 6938436478541280011
  %3998 = xor i64 %821, -1
  %3999 = and i64 %3998, 8239398568056358665
  %4000 = and i64 %821, -8239398568056358666
  %4001 = or i64 %3999, %4000
  %4002 = xor i64 1302242195927741442, %4001
  %4003 = xor i64 %821, -1
  %4004 = or i64 -6938436478541280012, %4003
  %4005 = xor i64 %4004, -1
  %4006 = and i64 %4005, -1
  %4007 = or i64 %4002, %4006
  %4008 = xor i64 -8902110297732844789, %3992
  %4009 = xor i64 %4008, %3993
  %4010 = xor i64 %4009, %3996
  %4011 = xor i64 %4010, %3997
  %4012 = xor i64 %4011, %4007
  %4013 = xor i64 %4012, %3989
  %4014 = add i64 %1346, 8451913266433433323
  %4015 = sub i64 0, %1346
  %4016 = add i64 -8451913266433433323, %4015
  %4017 = sub i64 0, %4016
  %4018 = or i64 %174, 1257362251261324473
  %4019 = and i64 1257362251261324473, %174
  %4020 = xor i64 1257362251261324473, %174
  %4021 = or i64 %4019, %4020
  %4022 = or i64 %341, 6102718808445877738
  %4023 = xor i64 %341, -1
  %4024 = and i64 %4023, 53393688944213349
  %4025 = and i64 %341, -53393688944213350
  %4026 = or i64 %4024, %4025
  %4027 = xor i64 6056364216641028239, %4026
  %4028 = xor i64 %341, -1
  %4029 = or i64 -6102718808445877739, %4028
  %4030 = xor i64 %4029, -1
  %4031 = and i64 %4030, -1
  %4032 = or i64 %4027, %4031
  %4033 = xor i64 %4017, %4014
  %4034 = xor i64 %4033, %4022
  %4035 = xor i64 %4034, %4032
  %4036 = xor i64 %4035, 0
  %4037 = xor i64 %4036, %4021
  %4038 = xor i64 %4037, %4018
  %4039 = mul i64 %4013, %4038
  %4040 = trunc i64 %4039 to i32
  %4041 = icmp sgt i32 %.reload634, %4040
  %.reload633 = load i32, i32* %.reg2mem632, align 4
  %4042 = select i1 %4041, i32 %.reload633, i32 0
  %4043 = zext i32 %4042 to i64
  %4044 = getelementptr inbounds i8, i8* %3988, i64 %4043
  %4045 = load i8, i8* %4044, align 1, !tbaa !16
  store i8 %4045, i8* %.reg2mem639, align 1
  %.reload21.reload = load i64, i64* %.reload21.reg2mem, align 8
  %4046 = getelementptr inbounds i8, i8* %78, i64 %.reload21.reload
  store i8* %4046, i8** %.reg2mem641, align 8
  %.reload624 = load i32, i32* %.reg2mem620, align 4
  %4047 = mul i32 %.reload624, 2
  %.reload623 = load i32, i32* %.reg2mem620, align 4
  %4048 = and i64 %115, 6782719020627305869
  %4049 = xor i64 %115, -1
  %4050 = or i64 -6782719020627305870, %4049
  %4051 = xor i64 %4050, -1
  %4052 = and i64 %4051, -1
  %4053 = add i64 %1332, 5192527448826444979
  %4054 = sub i64 0, %1332
  %4055 = add i64 -5192527448826444979, %4054
  %4056 = sub i64 0, %4055
  %4057 = sext i32 %44 to i64
  %4058 = add i64 %4057, 1452905402177823534
  %4059 = sub i64 0, %4057
  %4060 = sub i64 1452905402177823534, %4059
  %4061 = xor i64 1648856798056372227, %4060
  %4062 = xor i64 %4061, %4053
  %4063 = xor i64 %4062, %4056
  %4064 = xor i64 %4063, %4048
  %4065 = xor i64 %4064, %4052
  %4066 = xor i64 %4065, %4058
  %4067 = add i64 %600, -4814084434545771303
  %4068 = xor i64 -4814084434545771303, %600
  %4069 = and i64 -4814084434545771303, %600
  %4070 = mul i64 2, %4069
  %4071 = add i64 %4068, %4070
  %4072 = or i64 %496, -6260034694155777244
  %4073 = xor i64 %496, -1
  %4074 = and i64 -6260034694155777244, %4073
  %4075 = add i64 %4074, %496
  %4076 = and i64 %721, 8701213554685579726
  %4077 = xor i64 %721, -1
  %4078 = xor i64 8701213554685579726, %4077
  %4079 = and i64 %4078, 8701213554685579726
  %4080 = xor i64 %4072, 3241643399882220886
  %4081 = xor i64 %4080, %4076
  %4082 = xor i64 %4081, %4075
  %4083 = xor i64 %4082, %4079
  %4084 = xor i64 %4083, %4067
  %4085 = xor i64 %4084, %4071
  %4086 = mul i64 %4066, %4085
  %4087 = trunc i64 %4086 to i32
  %4088 = mul i32 %.reload623, %4087
  %4089 = add i32 2, %4088
  %4090 = mul i32 %4047, %4089
  %4091 = srem i32 %4090, 4
  store i32 %4091, i32* %.reg2mem643, align 4
  %.reload648 = load i32, i32* %.reg2mem643, align 4
  %4092 = icmp eq i32 %.reload648, 0
  store i1 %4092, i1* %.reg2mem649, align 1
  %.reload622 = load i32, i32* %.reg2mem620, align 4
  %4093 = mul i32 %.reload622, %.reload622
  %.reload621 = load i32, i32* %.reg2mem620, align 4
  %4094 = add i32 %4093, %.reload621
  store i32 %4094, i32* %.reg2mem654, align 4
  %.reload20.reload = load i32, i32* %.reload20.reg2mem, align 4
  %4095 = srem i32 %.reload20.reload, 2
  %4096 = or i64 %440, 8209564722995518354
  %4097 = and i64 8209564722995518354, %440
  %4098 = xor i64 8209564722995518354, %440
  %4099 = or i64 %4097, %4098
  %4100 = add i64 %442, 6685612364363513392
  %4101 = and i64 6685612364363513392, %442
  %4102 = or i64 6685612364363513392, %442
  %4103 = add i64 %4101, %4102
  %4104 = xor i64 %4099, %4103
  %4105 = xor i64 %4104, %4096
  %4106 = xor i64 %4105, %4100
  %4107 = xor i64 %4106, 7208019521029410921
  %4108 = and i64 %174, -5118085543413755376
  %4109 = xor i64 %174, -1
  %4110 = xor i64 -5118085543413755376, %4109
  %4111 = and i64 %4110, -5118085543413755376
  %4112 = and i64 %598, -4923614094912147636
  %4113 = xor i64 %598, -1
  %4114 = or i64 4923614094912147635, %4113
  %4115 = xor i64 %4114, -1
  %4116 = and i64 %4115, -1
  %4117 = xor i64 0, %4112
  %4118 = xor i64 %4117, %4111
  %4119 = xor i64 %4118, %4116
  %4120 = xor i64 %4119, %4108
  %4121 = mul i64 %4107, %4120
  %4122 = trunc i64 %4121 to i32
  %4123 = icmp eq i32 %4095, %4122
  %.reload383 = load i8**, i8*** %.reg2mem382, align 8
  %.reload396 = load i8**, i8*** %.reg2mem395, align 8
  %4124 = select i1 %4123, i8** %.reload383, i8** %.reload396
  %4125 = load i8*, i8** %4124, align 8
  indirectbr i8* %4125, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"103":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4126 = and i64 %928, 8952168607918079255
  %4127 = or i64 -8952168607918079256, %928
  %4128 = sub i64 %4127, -8952168607918079256
  %4129 = or i64 %343, 6316310690773632211
  %4130 = and i64 6316310690773632211, %343
  %4131 = xor i64 6316310690773632211, %343
  %4132 = or i64 %4130, %4131
  %4133 = add i64 %608, -2373701076324566957
  %4134 = sub i64 0, %608
  %4135 = add i64 2373701076324566957, %4134
  %4136 = sub i64 0, %4135
  %4137 = xor i64 %4132, %4126
  %4138 = xor i64 %4137, %4136
  %4139 = xor i64 %4138, %4129
  %4140 = xor i64 %4139, %4133
  %4141 = xor i64 %4140, %4128
  %4142 = xor i64 %4141, -3842191550462045339
  %4143 = and i64 %1239, 5810404760094239142
  %4144 = xor i64 %1239, -1
  %4145 = xor i64 5810404760094239142, %4144
  %4146 = and i64 %4145, 5810404760094239142
  %4147 = or i64 %1241, 5326159142073187657
  %4148 = xor i64 %1241, -1
  %4149 = and i64 %4148, 4407147207261513572
  %4150 = and i64 %1241, -4407147207261513573
  %4151 = or i64 %4149, %4150
  %4152 = xor i64 8413573535478700589, %4151
  %4153 = xor i64 %1241, -1
  %4154 = or i64 -5326159142073187658, %4153
  %4155 = xor i64 %4154, -1
  %4156 = and i64 %4155, -1
  %4157 = or i64 %4152, %4156
  %4158 = xor i64 %4146, %4157
  %4159 = xor i64 %4158, 5533283594342931132
  %4160 = xor i64 %4159, %4143
  %4161 = xor i64 %4160, %4147
  %4162 = mul i64 %4142, %4161
  %4163 = sub i64 %4162, -106
  %.reload656 = load i32, i32* %.reg2mem654, align 4
  %4164 = add i64 %918, -1835840228594396988
  %4165 = add i64 -6321518460250875763, %918
  %4166 = sub i64 %4165, -4485678231656478775
  %4167 = and i64 %108, -8956053617290731460
  %4168 = xor i64 %108, -1
  %4169 = or i64 8956053617290731459, %4168
  %4170 = xor i64 %4169, -1
  %4171 = and i64 %4170, -1
  %4172 = and i64 %494, 7581982581214751024
  %4173 = xor i64 %494, -1
  %4174 = xor i64 7581982581214751024, %4173
  %4175 = and i64 %4174, 7581982581214751024
  %4176 = xor i64 %4167, -2883824143390758835
  %4177 = xor i64 %4176, %4171
  %4178 = xor i64 %4177, %4175
  %4179 = xor i64 %4178, %4172
  %4180 = xor i64 %4179, %4164
  %4181 = xor i64 %4180, %4166
  %4182 = sext i32 %66 to i64
  %4183 = and i64 %4182, -2935221195823724497
  %4184 = xor i64 %4182, -1
  %4185 = or i64 2935221195823724496, %4184
  %4186 = xor i64 %4185, -1
  %4187 = and i64 %4186, -1
  %4188 = and i64 %1342, -5696275744060641878
  %4189 = xor i64 %1342, -1
  %4190 = or i64 5696275744060641877, %4189
  %4191 = xor i64 %4190, -1
  %4192 = and i64 %4191, -1
  %4193 = xor i64 %4188, -7242869406813413110
  %4194 = xor i64 %4193, %4183
  %4195 = xor i64 %4194, %4192
  %4196 = xor i64 %4195, %4187
  %4197 = mul i64 %4181, %4196
  %4198 = trunc i64 %4197 to i32
  %4199 = srem i32 %.reload656, %4198
  store i32 %4199, i32* %.reg2mem657, align 4
  %4200 = sdiv i64 36, 32
  %.reload659 = load i32, i32* %.reg2mem657, align 4
  %4201 = icmp eq i32 %.reload659, 0
  store i1 %4201, i1* %.reg2mem660, align 1
  %4202 = mul i64 32, 92
  %.reload653 = load i1, i1* %.reg2mem649, align 1
  %4203 = xor i1 %.reload653, true
  %4204 = and i1 %4203, true
  %4205 = and i1 %.reload653, false
  %4206 = or i1 %4204, %4205
  store i1 %4206, i1* %.reg2mem665, align 1
  %4207 = sub i64 86, 12
  %.reload667 = load i1, i1* %.reg2mem665, align 1
  %4208 = xor i1 %.reload667, false
  %4209 = and i1 %4208, %.reload667
  store i1 %4209, i1* %.reg2mem668, align 1
  %4210 = or i64 %1112, 939942390536765445
  %4211 = xor i64 %1112, -1
  %4212 = and i64 939942390536765445, %4211
  %4213 = add i64 %4212, %1112
  %4214 = add i64 %1332, 1518016002317579565
  %4215 = and i64 1518016002317579565, %1332
  %4216 = or i64 1518016002317579565, %1332
  %4217 = add i64 %4215, %4216
  %4218 = xor i64 %4213, %4217
  %4219 = xor i64 %4218, %4214
  %4220 = xor i64 %4219, -5394406664207716953
  %4221 = xor i64 %4220, %4210
  %4222 = add i64 %1235, -1677057574915763468
  %4223 = sub i64 0, %1235
  %4224 = sub i64 -1677057574915763468, %4223
  %4225 = and i64 %442, -2518265248961116396
  %4226 = or i64 2518265248961116395, %442
  %4227 = sub i64 %4226, 2518265248961116395
  %4228 = and i64 %1328, 6250296768890274103
  %4229 = or i64 -6250296768890274104, %1328
  %4230 = sub i64 %4229, -6250296768890274104
  %4231 = xor i64 %4228, %4224
  %4232 = xor i64 %4231, 3245238074257609624
  %4233 = xor i64 %4232, %4227
  %4234 = xor i64 %4233, %4230
  %4235 = xor i64 %4234, %4222
  %4236 = xor i64 %4235, %4225
  %4237 = mul i64 %4221, %4236
  %4238 = mul i64 %4237, 82
  %.reload652 = load i1, i1* %.reg2mem649, align 1
  %4239 = and i1 %.reload652, false
  store i1 %4239, i1* %.reg2mem671, align 1
  %4240 = sext i32 %23 to i64
  %4241 = or i64 %4240, -3566126682178624791
  %4242 = and i64 -3566126682178624791, %4240
  %4243 = xor i64 -3566126682178624791, %4240
  %4244 = or i64 %4242, %4243
  %4245 = or i64 %1237, 5834203736983675238
  %4246 = xor i64 %1237, -1
  %4247 = and i64 %4246, -2261008080332337287
  %4248 = and i64 %1237, 2261008080332337286
  %4249 = or i64 %4247, %4248
  %4250 = xor i64 -5735325045565428193, %4249
  %4251 = xor i64 %1237, -1
  %4252 = or i64 -5834203736983675239, %4251
  %4253 = xor i64 %4252, -1
  %4254 = and i64 %4253, -1
  %4255 = or i64 %4250, %4254
  %4256 = xor i64 -7533936980374686613, %4255
  %4257 = xor i64 %4256, %4241
  %4258 = xor i64 %4257, %4244
  %4259 = xor i64 %4258, %4245
  %4260 = add i64 %1114, 6303748581967063436
  %4261 = add i64 7520991695004590092, %1114
  %4262 = sub i64 %4261, 1217243113037526656
  %4263 = add i64 %661, -3193291673904121751
  %4264 = add i64 5094487275912860257, %661
  %4265 = add i64 %4264, -8287778949816982008
  %4266 = sext i32 %62 to i64
  %4267 = and i64 %4266, -3977870422717087143
  %4268 = xor i64 %4266, -1
  %4269 = or i64 3977870422717087142, %4268
  %4270 = xor i64 %4269, -1
  %4271 = and i64 %4270, -1
  %4272 = xor i64 %4265, %4262
  %4273 = xor i64 %4272, 5605845152569234031
  %4274 = xor i64 %4273, %4271
  %4275 = xor i64 %4274, %4263
  %4276 = xor i64 %4275, %4267
  %4277 = xor i64 %4276, %4260
  %4278 = mul i64 %4259, %4277
  %4279 = add i64 %4278, -36
  %.reload670 = load i1, i1* %.reg2mem668, align 1
  %.reload673 = load i1, i1* %.reg2mem671, align 1
  %4280 = or i1 %.reload670, %.reload673
  store i1 %4280, i1* %.reg2mem674, align 1
  %4281 = and i64 %770, 7009182050284674925
  %4282 = xor i64 %770, -1
  %4283 = or i64 -7009182050284674926, %4282
  %4284 = xor i64 %4283, -1
  %4285 = and i64 %4284, -1
  %4286 = or i64 %1350, -3351680504929185994
  %4287 = xor i64 %1350, -1
  %4288 = and i64 -3351680504929185994, %4287
  %4289 = add i64 %4288, %1350
  %4290 = and i64 %918, -1076973015767137875
  %4291 = or i64 1076973015767137874, %918
  %4292 = sub i64 %4291, 1076973015767137874
  %4293 = xor i64 %4289, %4286
  %4294 = xor i64 %4293, %4285
  %4295 = xor i64 %4294, %4290
  %4296 = xor i64 %4295, %4281
  %4297 = xor i64 %4296, %4292
  %4298 = xor i64 %4297, -2165731616784026645
  %4299 = add i64 %1176, -5720868280232878220
  %4300 = sub i64 0, %1176
  %4301 = sub i64 -5720868280232878220, %4300
  %4302 = and i64 %723, -8995616120087827390
  %4303 = or i64 8995616120087827389, %723
  %4304 = sub i64 %4303, 8995616120087827389
  %4305 = and i64 %114, 3529917501975520788
  %4306 = xor i64 %114, -1
  %4307 = xor i64 3529917501975520788, %4306
  %4308 = and i64 %4307, 3529917501975520788
  %4309 = xor i64 %4308, %4301
  %4310 = xor i64 %4309, -2200149813603215460
  %4311 = xor i64 %4310, %4304
  %4312 = xor i64 %4311, %4305
  %4313 = xor i64 %4312, %4302
  %4314 = xor i64 %4313, %4299
  %4315 = mul i64 %4298, %4314
  %4316 = mul i64 %4315, 106
  %.reload664 = load i1, i1* %.reg2mem660, align 1
  %4317 = xor i1 %.reload664, true
  store i1 %4317, i1* %.reg2mem677, align 1
  %.reload679 = load i1, i1* %.reg2mem677, align 1
  %4318 = and i1 %.reload679, true
  store i1 %4318, i1* %.reg2mem680, align 1
  %.reload663 = load i1, i1* %.reg2mem660, align 1
  %4319 = xor i1 %.reload663, true
  %4320 = and i1 %4319, %.reload663
  store i1 %4320, i1* %.reg2mem683, align 1
  %.reload682 = load i1, i1* %.reg2mem680, align 1
  %.reload685 = load i1, i1* %.reg2mem683, align 1
  %4321 = or i1 %.reload682, %.reload685
  store i1 %4321, i1* %.reg2mem686, align 1
  %.reload676 = load i1, i1* %.reg2mem674, align 1
  %.reload688 = load i1, i1* %.reg2mem686, align 1
  %4322 = xor i1 %.reload676, %.reload688
  store i1 %4322, i1* %.reg2mem689, align 1
  %.reload651 = load i1, i1* %.reg2mem649, align 1
  %4323 = xor i1 %.reload651, true
  %4324 = and i1 %4323, true
  %4325 = and i1 %.reload651, false
  %4326 = or i1 %4324, %4325
  %4327 = xor i1 %4326, false
  store i1 %4327, i1* %.reg2mem693, align 1
  %.reload662 = load i1, i1* %.reg2mem660, align 1
  %4328 = xor i1 %.reload662, true
  store i1 %4328, i1* %.reg2mem696, align 1
  %.reload695 = load i1, i1* %.reg2mem693, align 1
  %.reload698 = load i1, i1* %.reg2mem696, align 1
  %4329 = or i1 %.reload695, %.reload698
  store i1 %4329, i1* %.reg2mem699, align 1
  %.reload701 = load i1, i1* %.reg2mem699, align 1
  %4330 = xor i1 %.reload701, true
  store i1 %4330, i1* %.reg2mem702, align 1
  %.reload5.reload = load i32, i32* %.reload5.reg2mem, align 4
  %4331 = srem i32 %.reload5.reload, 2
  %4332 = icmp eq i32 %4331, 0
  %.reload647 = load i32, i32* %.reg2mem643, align 4
  %4333 = mul i32 %.reload647, 2
  %.reload646 = load i32, i32* %.reg2mem643, align 4
  %4334 = add i64 %1336, 231106527350380300
  %4335 = sub i64 0, %1336
  %4336 = sub i64 231106527350380300, %4335
  %4337 = or i64 %1324, -8177033921361888887
  %4338 = xor i64 %1324, -1
  %4339 = and i64 -8177033921361888887, %4338
  %4340 = add i64 %4339, %1324
  %4341 = xor i64 %4334, %4337
  %4342 = xor i64 %4341, %4340
  %4343 = xor i64 %4342, %4336
  %4344 = xor i64 %4343, -3396663500694371167
  %4345 = add i64 %1055, -2127867765937846557
  %4346 = add i64 -2871368125241770093, %1055
  %4347 = sub i64 %4346, -743500359303923536
  %4348 = sext i32 %58 to i64
  %4349 = and i64 %4348, 7566547813361937204
  %4350 = xor i64 %4348, -1
  %4351 = xor i64 7566547813361937204, %4350
  %4352 = and i64 %4351, 7566547813361937204
  %4353 = xor i64 %4347, %4352
  %4354 = xor i64 %4353, %4345
  %4355 = xor i64 %4354, -3264351254445932862
  %4356 = xor i64 %4355, %4349
  %4357 = mul i64 %4344, %4356
  %4358 = trunc i64 %4357 to i32
  %4359 = mul i32 %.reload646, %4358
  %4360 = add i32 2, %4359
  %4361 = mul i32 %4333, %4360
  %4362 = srem i32 %4361, 4
  %4363 = icmp eq i32 %4362, 0
  %.reload645 = load i32, i32* %.reg2mem643, align 4
  %4364 = mul i32 %.reload645, %.reload645
  %.reload644 = load i32, i32* %.reg2mem643, align 4
  %4365 = sub i32 0, %.reload644
  %4366 = sub i32 %4364, %4365
  %4367 = srem i32 %4366, 2
  %4368 = icmp eq i32 %4367, 0
  %4369 = and i1 %4363, %4368
  store i1 %4369, i1* %.reg2mem706, align 1
  %.reload386 = load i8**, i8*** %.reg2mem385, align 8
  %.reload389 = load i8**, i8*** %.reg2mem388, align 8
  %.reload707 = load i1, i1* %.reg2mem706, align 1
  %4370 = select i1 %.reload707, i8** %.reload389, i8** %.reload386
  %4371 = load i8*, i8** %4370, align 8
  indirectbr i8* %4371, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl26:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc27.reload584 = load i1*, i1** %.loc27.reg2mem, align 8
  %lt.cast32 = bitcast i1* %.loc27.reload584 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast32)
  %.loc28.reload582 = load i1*, i1** %.loc28.reg2mem, align 8
  %lt.cast33 = bitcast i1* %.loc28.reload582 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast33)
  %.reload540 = load i64*, i64** %.reg2mem534, align 8
  store i64 5221456193252566389, i64* %.reload540, align 8
  %.reload539 = load i64*, i64** %.reg2mem534, align 8
  %4372 = call i8** @lk3314813992465304394(i64* %.reload539)
  %4373 = load i8*, i8** %4372, align 8
  %4374 = bitcast i8* %4373 to i1 (i1, i1, i1, i1*, i1*)*
  %.loc28.reload581 = load i1*, i1** %.loc28.reg2mem, align 8
  %.loc27.reload583 = load i1*, i1** %.loc27.reg2mem, align 8
  %.reload692 = load i1, i1* %.reg2mem689, align 1
  %.reload705 = load i1, i1* %.reg2mem702, align 1
  %.reload708 = load i1, i1* %.reg2mem706, align 1
  %targetBlock29 = call i1 %4374(i1 %.reload705, i1 %.reload692, i1 %.reload708, i1* %.loc27.reload583, i1* %.loc28.reload581)
  %.loc27.reload = load i1*, i1** %.loc27.reg2mem, align 8
  %.reload30 = load i1, i1* %.loc27.reload, align 1
  %.loc28.reload = load i1*, i1** %.loc28.reg2mem, align 8
  %.reload31 = load i1, i1* %.loc28.reload, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast32)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast33)
  %.reload379 = load i8**, i8*** %.reg2mem378, align 8
  %.reload393 = load i8**, i8*** %.reg2mem391, align 8
  %4375 = select i1 %targetBlock29, i8** %.reload393, i8** %.reload379
  %4376 = load i8*, i8** %4375, align 8
  store i1 %.reload30, i1* %.reg2mem724, align 1
  store i1 %.reload31, i1* %.reg2mem726, align 1
  indirectbr i8* %4376, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"105":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload704 = load i1, i1* %.reg2mem702, align 1
  %4377 = and i1 %.reload704, true
  %.reload691 = load i1, i1* %.reg2mem689, align 1
  %4378 = and i1 %.reload691, %4377
  %4379 = xor i1 %.reload691, %4377
  %4380 = or i1 %4378, %4379
  %.reload392 = load i8**, i8*** %.reg2mem391, align 8
  %4381 = load i8*, i8** %.reload392, align 8
  store i1 %4377, i1* %.reg2mem724, align 1
  store i1 %4380, i1* %.reg2mem726, align 1
  indirectbr i8* %4381, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"106":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload727 = load i1, i1* %.reg2mem726, align 1
  %.reload725 = load i1, i1* %.reg2mem724, align 1
  %.reload400 = load i8**, i8*** %.reg2mem398, align 8
  %4382 = load i8*, i8** %.reload400, align 8
  %.reload658 = load i32, i32* %.reg2mem657, align 4
  %.reload661 = load i1, i1* %.reg2mem660, align 1
  %.reload666 = load i1, i1* %.reg2mem665, align 1
  %.reload669 = load i1, i1* %.reg2mem668, align 1
  %.reload672 = load i1, i1* %.reg2mem671, align 1
  %.reload675 = load i1, i1* %.reg2mem674, align 1
  %.reload678 = load i1, i1* %.reg2mem677, align 1
  %.reload681 = load i1, i1* %.reg2mem680, align 1
  %.reload684 = load i1, i1* %.reg2mem683, align 1
  %.reload687 = load i1, i1* %.reg2mem686, align 1
  %.reload690 = load i1, i1* %.reg2mem689, align 1
  %.reload694 = load i1, i1* %.reg2mem693, align 1
  %.reload697 = load i1, i1* %.reg2mem696, align 1
  %.reload700 = load i1, i1* %.reg2mem699, align 1
  %.reload703 = load i1, i1* %.reg2mem702, align 1
  store i1 %.reload727, i1* %.reg2mem728, align 1
  indirectbr i8* %4382, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl34:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc35.reload580 = load i32*, i32** %.loc35.reg2mem, align 8
  %lt.cast69 = bitcast i32* %.loc35.reload580 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast69)
  %.loc36.reload578 = load i1*, i1** %.loc36.reg2mem, align 8
  %lt.cast70 = bitcast i1* %.loc36.reload578 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast70)
  %.loc37.reload576 = load i1*, i1** %.loc37.reg2mem, align 8
  %lt.cast71 = bitcast i1* %.loc37.reload576 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast71)
  %.loc38.reload574 = load i1*, i1** %.loc38.reg2mem, align 8
  %lt.cast72 = bitcast i1* %.loc38.reload574 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast72)
  %.loc39.reload572 = load i1*, i1** %.loc39.reg2mem, align 8
  %lt.cast73 = bitcast i1* %.loc39.reload572 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast73)
  %.loc40.reload570 = load i1*, i1** %.loc40.reg2mem, align 8
  %lt.cast74 = bitcast i1* %.loc40.reload570 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast74)
  %.loc41.reload568 = load i1*, i1** %.loc41.reg2mem, align 8
  %lt.cast75 = bitcast i1* %.loc41.reload568 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast75)
  %.loc42.reload566 = load i1*, i1** %.loc42.reg2mem, align 8
  %lt.cast76 = bitcast i1* %.loc42.reload566 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast76)
  %.loc43.reload564 = load i1*, i1** %.loc43.reg2mem, align 8
  %lt.cast77 = bitcast i1* %.loc43.reload564 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast77)
  %.loc44.reload562 = load i1*, i1** %.loc44.reg2mem, align 8
  %lt.cast78 = bitcast i1* %.loc44.reload562 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast78)
  %.loc45.reload560 = load i1*, i1** %.loc45.reg2mem, align 8
  %lt.cast79 = bitcast i1* %.loc45.reload560 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast79)
  %.loc46.reload558 = load i1*, i1** %.loc46.reg2mem, align 8
  %lt.cast80 = bitcast i1* %.loc46.reload558 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast80)
  %.loc47.reload556 = load i1*, i1** %.loc47.reg2mem, align 8
  %lt.cast81 = bitcast i1* %.loc47.reload556 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast81)
  %.loc48.reload554 = load i1*, i1** %.loc48.reg2mem, align 8
  %lt.cast82 = bitcast i1* %.loc48.reload554 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast82)
  %.loc49.reload552 = load i1*, i1** %.loc49.reg2mem, align 8
  %lt.cast83 = bitcast i1* %.loc49.reload552 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast83)
  %.loc50.reload550 = load i1*, i1** %.loc50.reg2mem, align 8
  %lt.cast84 = bitcast i1* %.loc50.reload550 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast84)
  %.loc51.reload548 = load i1*, i1** %.loc51.reg2mem, align 8
  %lt.cast85 = bitcast i1* %.loc51.reload548 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast85)
  %.reload538 = load i64*, i64** %.reg2mem534, align 8
  store i64 5221456193252566388, i64* %.reload538, align 8
  %.reload537 = load i64*, i64** %.reg2mem534, align 8
  %4383 = call i8** @lk3314813992465304394(i64* %.reload537)
  %4384 = load i8*, i8** %4383, align 8
  %4385 = bitcast i8* %4384 to void (i32, i1, i32*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.loc51.reload547 = load i1*, i1** %.loc51.reg2mem, align 8
  %.loc50.reload549 = load i1*, i1** %.loc50.reg2mem, align 8
  %.loc49.reload551 = load i1*, i1** %.loc49.reg2mem, align 8
  %.loc48.reload553 = load i1*, i1** %.loc48.reg2mem, align 8
  %.loc47.reload555 = load i1*, i1** %.loc47.reg2mem, align 8
  %.loc46.reload557 = load i1*, i1** %.loc46.reg2mem, align 8
  %.loc45.reload559 = load i1*, i1** %.loc45.reg2mem, align 8
  %.loc44.reload561 = load i1*, i1** %.loc44.reg2mem, align 8
  %.loc43.reload563 = load i1*, i1** %.loc43.reg2mem, align 8
  %.loc42.reload565 = load i1*, i1** %.loc42.reg2mem, align 8
  %.loc41.reload567 = load i1*, i1** %.loc41.reg2mem, align 8
  %.loc40.reload569 = load i1*, i1** %.loc40.reg2mem, align 8
  %.loc39.reload571 = load i1*, i1** %.loc39.reg2mem, align 8
  %.loc38.reload573 = load i1*, i1** %.loc38.reg2mem, align 8
  %.loc37.reload575 = load i1*, i1** %.loc37.reg2mem, align 8
  %.loc36.reload577 = load i1*, i1** %.loc36.reg2mem, align 8
  %.loc35.reload579 = load i32*, i32** %.loc35.reg2mem, align 8
  %.reload650 = load i1, i1* %.reg2mem649, align 1
  %.reload655 = load i32, i32* %.reg2mem654, align 4
  call void %4385(i32 %.reload655, i1 %.reload650, i32* %.loc35.reload579, i1* %.loc36.reload577, i1* %.loc37.reload575, i1* %.loc38.reload573, i1* %.loc39.reload571, i1* %.loc40.reload569, i1* %.loc41.reload567, i1* %.loc42.reload565, i1* %.loc43.reload563, i1* %.loc44.reload561, i1* %.loc45.reload559, i1* %.loc46.reload557, i1* %.loc47.reload555, i1* %.loc48.reload553, i1* %.loc49.reload551, i1* %.loc50.reload549, i1* %.loc51.reload547)
  %.loc35.reload = load i32*, i32** %.loc35.reg2mem, align 8
  %.reload52 = load i32, i32* %.loc35.reload, align 4
  %.loc36.reload = load i1*, i1** %.loc36.reg2mem, align 8
  %.reload53 = load i1, i1* %.loc36.reload, align 1
  %.loc37.reload = load i1*, i1** %.loc37.reg2mem, align 8
  %.reload54 = load i1, i1* %.loc37.reload, align 1
  %.loc38.reload = load i1*, i1** %.loc38.reg2mem, align 8
  %.reload55 = load i1, i1* %.loc38.reload, align 1
  %.loc39.reload = load i1*, i1** %.loc39.reg2mem, align 8
  %.reload56 = load i1, i1* %.loc39.reload, align 1
  %.loc40.reload = load i1*, i1** %.loc40.reg2mem, align 8
  %.reload57 = load i1, i1* %.loc40.reload, align 1
  %.loc41.reload = load i1*, i1** %.loc41.reg2mem, align 8
  %.reload58 = load i1, i1* %.loc41.reload, align 1
  %.loc42.reload = load i1*, i1** %.loc42.reg2mem, align 8
  %.reload59 = load i1, i1* %.loc42.reload, align 1
  %.loc43.reload = load i1*, i1** %.loc43.reg2mem, align 8
  %.reload60 = load i1, i1* %.loc43.reload, align 1
  %.loc44.reload = load i1*, i1** %.loc44.reg2mem, align 8
  %.reload61 = load i1, i1* %.loc44.reload, align 1
  %.loc45.reload = load i1*, i1** %.loc45.reg2mem, align 8
  %.reload62 = load i1, i1* %.loc45.reload, align 1
  %.loc46.reload = load i1*, i1** %.loc46.reg2mem, align 8
  %.reload63 = load i1, i1* %.loc46.reload, align 1
  %.loc47.reload = load i1*, i1** %.loc47.reg2mem, align 8
  %.reload64 = load i1, i1* %.loc47.reload, align 1
  %.loc48.reload = load i1*, i1** %.loc48.reg2mem, align 8
  %.reload65 = load i1, i1* %.loc48.reload, align 1
  %.loc49.reload = load i1*, i1** %.loc49.reg2mem, align 8
  %.reload66 = load i1, i1* %.loc49.reload, align 1
  %.loc50.reload = load i1*, i1** %.loc50.reg2mem, align 8
  %.reload67 = load i1, i1* %.loc50.reload, align 1
  %.loc51.reload = load i1*, i1** %.loc51.reg2mem, align 8
  %.reload68 = load i1, i1* %.loc51.reload, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast69)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast70)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast71)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast72)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast73)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast74)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast75)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast76)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast77)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast78)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast79)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast80)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast81)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast82)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast83)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast84)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast85)
  %.reload399 = load i8**, i8*** %.reg2mem398, align 8
  %4386 = load i8*, i8** %.reload399, align 8
  store i1 %.reload68, i1* %.reg2mem728, align 1
  indirectbr i8* %4386, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"108":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload729 = load i1, i1* %.reg2mem728, align 1
  %.reload403 = load i8**, i8*** %.reg2mem402, align 8
  %.reload407 = load i8**, i8*** %.reg2mem405, align 8
  %4387 = select i1 %.reload729, i8** %.reload403, i8** %.reload407
  %4388 = load i8*, i8** %4387, align 8
  indirectbr i8* %4388, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl86:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload536 = load i64*, i64** %.reg2mem534, align 8
  store i64 5221456193252566391, i64* %.reload536, align 8
  %.reload535 = load i64*, i64** %.reg2mem534, align 8
  %4389 = call i8** @lk3314813992465304394(i64* %.reload535)
  %4390 = load i8*, i8** %4389, align 8
  %4391 = bitcast i8* %4390 to void ()*
  call void %4391()
  %.reload406 = load i8**, i8*** %.reg2mem405, align 8
  %4392 = load i8*, i8** %.reload406, align 8
  indirectbr i8* %4392, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"110":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload640 = load i8, i8* %.reg2mem639, align 1
  %.reload642 = load i8*, i8** %.reg2mem641, align 8
  store i8 %.reload640, i8* %.reload642, align 1, !tbaa !16
  %.reload410 = load i8**, i8*** %.reg2mem409, align 8
  %4393 = load i8*, i8** %.reload410, align 8
  indirectbr i8* %4393, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"111":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload612 = load double, double* %.reg2mem611, align 8
  %4394 = fadd double %.reload612, 2.000000e-02
  %4395 = fptrunc double %4394 to float
  %4396 = fpext float %4395 to double
  %4397 = fcmp olt double %4396, 6.280000e+00
  %.reload344 = load i8**, i8*** %.reg2mem343, align 8
  %.reload415 = load i8**, i8*** %.reg2mem414, align 8
  %4398 = select i1 %4397, i8** %.reload344, i8** %.reload415
  %4399 = load i8*, i8** %4398, align 8
  store double %4396, double* %.reg2mem722, align 8
  indirectbr i8* %4399, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.loopexit:                                        ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload418 = load i8**, i8*** %.reg2mem417, align 8
  %4400 = load i8*, i8** %.reload418, align 8
  store i32 0, i32* %.reg2mem730, align 4
  indirectbr i8* %4400, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"113":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload731 = load i32, i32* %.reg2mem730, align 4
  store i32 %.reload731, i32* %80, align 4
  ret void

newFuncRoot29:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4401 = alloca i64, align 8
  store i64* %4401, i64** %.reg2mem709, align 8
  %4402 = add i64 %920, 8925935436220803300
  %4403 = and i64 8925935436220803300, %920
  %4404 = or i64 8925935436220803300, %920
  %4405 = add i64 %4403, %4404
  %4406 = sext i32 %53 to i64
  %4407 = and i64 %4406, -3879075243868598239
  %4408 = or i64 3879075243868598238, %4406
  %4409 = sub i64 %4408, 3879075243868598238
  %4410 = xor i64 %4409, %4402
  %4411 = xor i64 %4410, -8182796470625480961
  %4412 = xor i64 %4411, %4407
  %4413 = xor i64 %4412, %4405
  %4414 = and i64 %988, -3142779377570325582
  %4415 = xor i64 %988, -1
  %4416 = or i64 3142779377570325581, %4415
  %4417 = xor i64 %4416, -1
  %4418 = and i64 %4417, -1
  %4419 = add i64 %442, -2132826988194351600
  %4420 = and i64 -2132826988194351600, %442
  %4421 = or i64 -2132826988194351600, %442
  %4422 = add i64 %4420, %4421
  %4423 = xor i64 %4418, %4414
  %4424 = xor i64 %4423, %4422
  %4425 = xor i64 %4424, %4419
  %4426 = xor i64 %4425, -3346726765180653430
  %4427 = mul i64 %4413, %4426
  %4428 = call i64 @m1252811912226950246(i64 %4427)
  %4429 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5534904613522678169, i32 0, i64 %4428
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.13.extracted to i8*), i8** %4429, align 8
  %.reload425 = load i8**, i8*** %.reg2mem424, align 8
  %4430 = load i8*, i8** %.reload425, align 8
  indirectbr i8* %4430, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"115":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4431 = sub i64 43, 72
  %4432 = add i64 47, 21
  %4433 = mul i64 25, 121
  %4434 = sext i32 %18 to i64
  %4435 = and i64 %4434, 6418067789756667829
  %4436 = or i64 -6418067789756667830, %4434
  %4437 = sub i64 %4436, -6418067789756667830
  %4438 = add i64 %721, 5058329496846654667
  %4439 = xor i64 5058329496846654667, %721
  %4440 = and i64 5058329496846654667, %721
  %4441 = mul i64 2, %4440
  %4442 = add i64 %4439, %4441
  %4443 = add i64 %482, -6996754078928124288
  %4444 = and i64 -6996754078928124288, %482
  %4445 = or i64 -6996754078928124288, %482
  %4446 = add i64 %4444, %4445
  %4447 = xor i64 %4435, %4437
  %4448 = xor i64 %4447, %4442
  %4449 = xor i64 %4448, %4443
  %4450 = xor i64 %4449, %4438
  %4451 = xor i64 %4450, %4446
  %4452 = xor i64 %4451, -3345741480355422849
  %4453 = add i64 %770, 747806014803350648
  %4454 = sub i64 0, %770
  %4455 = sub i64 747806014803350648, %4454
  %4456 = add i64 %612, 196696689618612469
  %4457 = add i64 -1020873064791451821, %612
  %4458 = sub i64 %4457, -1217569754410064290
  %4459 = xor i64 %4456, %4453
  %4460 = xor i64 %4459, %4458
  %4461 = xor i64 %4460, -4970812562574377893
  %4462 = xor i64 %4461, %4455
  %4463 = mul i64 %4452, %4462
  %4464 = sdiv i64 2, %4463
  %4465 = mul i64 123, 35
  %4466 = add i64 118, 16
  %4467 = add i64 42, 8
  %4468 = srem i32 %81, 2
  %4469 = icmp eq i32 %4468, 0
  %4470 = mul i32 %82, 2
  %4471 = mul i32 %82, 2
  %4472 = add i32 2, %4471
  %4473 = mul i32 %4470, %4472
  store i32 %4473, i32* %.reg2mem712, align 4
  %.reload428 = load i8**, i8*** %.reg2mem427, align 8
  %4474 = load i8*, i8** %.reload428, align 8
  indirectbr i8* %4474, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl30:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload711 = load i64*, i64** %.reg2mem709, align 8
  %4475 = and i64 %994, -4579800177669728256
  %4476 = or i64 4579800177669728255, %994
  %4477 = sub i64 %4476, 4579800177669728255
  %4478 = add i64 %1320, -3604590770716712261
  %4479 = and i64 -3604590770716712261, %1320
  %4480 = or i64 -3604590770716712261, %1320
  %4481 = add i64 %4479, %4480
  %4482 = xor i64 -4330591216873745315, %4478
  %4483 = xor i64 %4482, %4477
  %4484 = xor i64 %4483, %4481
  %4485 = xor i64 %4484, %4475
  %4486 = add i64 %341, -7135934714307324569
  %4487 = add i64 3373643003882522587, %341
  %4488 = add i64 %4487, 7937166355519704460
  %4489 = add i64 %1348, -3386615447692386247
  %4490 = add i64 388043846108257000, %1348
  %4491 = sub i64 %4490, 3774659293800643247
  %4492 = xor i64 %4491, %4488
  %4493 = xor i64 %4492, -6940763059883990034
  %4494 = xor i64 %4493, %4486
  %4495 = xor i64 %4494, %4489
  %4496 = mul i64 %4485, %4495
  store i64 %4496, i64* %.reload711, align 8
  %4497 = alloca i8**, align 8
  %.reload710 = load i64*, i64** %.reg2mem709, align 8
  %4498 = and i64 %926, -1793106841803390909
  %4499 = xor i64 %926, -1
  %4500 = or i64 1793106841803390908, %4499
  %4501 = xor i64 %4500, -1
  %4502 = and i64 %4501, -1
  %4503 = sext i32 %67 to i64
  %4504 = or i64 %4503, -3788374333033952378
  %4505 = and i64 -3788374333033952378, %4503
  %4506 = xor i64 -3788374333033952378, %4503
  %4507 = or i64 %4505, %4506
  %4508 = xor i64 %4498, -8522353977695367379
  %4509 = xor i64 %4508, %4504
  %4510 = xor i64 %4509, %4502
  %4511 = xor i64 %4510, %4507
  %4512 = or i64 %908, 6944333199210875223
  %4513 = and i64 6944333199210875223, %908
  %4514 = xor i64 6944333199210875223, %908
  %4515 = or i64 %4513, %4514
  %4516 = add i64 %1168, 4457393973043929680
  %4517 = add i64 7234529973598958864, %1168
  %4518 = sub i64 %4517, 2777136000555029184
  %4519 = xor i64 %4515, %4512
  %4520 = xor i64 %4519, %4518
  %4521 = xor i64 %4520, %4516
  %4522 = xor i64 %4521, 0
  %4523 = mul i64 %4511, %4522
  %4524 = trunc i64 %4523 to i32
  %4525 = and i64 %776, 6876012459362048368
  %4526 = xor i64 %776, -1
  %4527 = or i64 -6876012459362048369, %4526
  %4528 = xor i64 %4527, -1
  %4529 = and i64 %4528, -1
  %4530 = add i64 %442, -3517800880055405116
  %4531 = sub i64 0, %442
  %4532 = sub i64 -3517800880055405116, %4531
  %4533 = xor i64 %4529, -6671109799385061533
  %4534 = xor i64 %4533, %4530
  %4535 = xor i64 %4534, %4525
  %4536 = xor i64 %4535, %4532
  %4537 = or i64 %1162, -8771518121511669800
  %4538 = xor i64 %1162, -1
  %4539 = and i64 -8771518121511669800, %4538
  %4540 = add i64 %4539, %1162
  %4541 = or i64 %1110, -2766321383744709454
  %4542 = and i64 -2766321383744709454, %1110
  %4543 = xor i64 -2766321383744709454, %1110
  %4544 = or i64 %4542, %4543
  %4545 = add i64 %906, 868361805799669873
  %4546 = add i64 5028321373856138159, %906
  %4547 = add i64 %4546, -4159959568056468286
  %4548 = xor i64 %4541, %4545
  %4549 = xor i64 %4548, 0
  %4550 = xor i64 %4549, %4540
  %4551 = xor i64 %4550, %4544
  %4552 = xor i64 %4551, %4547
  %4553 = xor i64 %4552, %4537
  %4554 = mul i64 %4536, %4553
  %4555 = trunc i64 %4554 to i32
  %4556 = or i64 %918, 2223234651064485837
  %4557 = and i64 2223234651064485837, %918
  %4558 = xor i64 2223234651064485837, %918
  %4559 = or i64 %4557, %4558
  %4560 = sext i32 %81 to i64
  %4561 = and i64 %4560, 4527840164411732746
  %4562 = xor i64 %4560, -1
  %4563 = xor i64 4527840164411732746, %4562
  %4564 = and i64 %4563, 4527840164411732746
  %4565 = sext i32 %17 to i64
  %4566 = or i64 %4565, -2837258609410622608
  %4567 = xor i64 %4565, -1
  %4568 = and i64 -2837258609410622608, %4567
  %4569 = add i64 %4568, %4565
  %4570 = xor i64 %4559, %4569
  %4571 = xor i64 %4570, 3755497633249442831
  %4572 = xor i64 %4571, %4564
  %4573 = xor i64 %4572, %4566
  %4574 = xor i64 %4573, %4556
  %4575 = xor i64 %4574, %4561
  %4576 = or i64 %612, 8237543592448595817
  %4577 = and i64 8237543592448595817, %612
  %4578 = xor i64 8237543592448595817, %612
  %4579 = or i64 %4577, %4578
  %4580 = or i64 %292, -6314993747551815939
  %4581 = xor i64 %292, -1
  %4582 = and i64 %4581, -7203156274649978268
  %4583 = and i64 %292, 7203156274649978267
  %4584 = or i64 %4582, %4583
  %4585 = xor i64 3771093080355167385, %4584
  %4586 = xor i64 %292, -1
  %4587 = or i64 6314993747551815938, %4586
  %4588 = xor i64 %4587, -1
  %4589 = and i64 %4588, -1
  %4590 = or i64 %4585, %4589
  %4591 = sext i32 %18 to i64
  %4592 = and i64 %4591, -9163232476498457188
  %4593 = xor i64 %4591, -1
  %4594 = xor i64 -9163232476498457188, %4593
  %4595 = and i64 %4594, -9163232476498457188
  %4596 = xor i64 %4592, %4576
  %4597 = xor i64 %4596, %4590
  %4598 = xor i64 %4597, %4580
  %4599 = xor i64 %4598, 0
  %4600 = xor i64 %4599, %4579
  %4601 = xor i64 %4600, %4595
  %4602 = mul i64 %4575, %4601
  %4603 = trunc i64 %4602 to i32
  %4604 = sext i32 %0 to i64
  %4605 = and i64 %4604, 4512854635234576365
  %4606 = or i64 -4512854635234576366, %4604
  %4607 = sub i64 %4606, -4512854635234576366
  %4608 = or i64 %337, 142478532217217771
  %4609 = xor i64 %337, -1
  %4610 = and i64 %4609, -6483130015799918096
  %4611 = and i64 %337, 6483130015799918095
  %4612 = or i64 %4610, %4611
  %4613 = xor i64 -6341801779054779621, %4612
  %4614 = xor i64 %337, -1
  %4615 = or i64 -142478532217217772, %4614
  %4616 = xor i64 %4615, -1
  %4617 = and i64 %4616, -1
  %4618 = or i64 %4613, %4617
  %4619 = or i64 %659, 3076419797229404441
  %4620 = and i64 3076419797229404441, %659
  %4621 = xor i64 3076419797229404441, %659
  %4622 = or i64 %4620, %4621
  %4623 = xor i64 %4618, %4605
  %4624 = xor i64 %4623, %4622
  %4625 = xor i64 %4624, %4608
  %4626 = xor i64 %4625, %4619
  %4627 = xor i64 %4626, %4607
  %4628 = xor i64 %4627, -5991115865997392367
  %4629 = sext i32 %66 to i64
  %4630 = or i64 %4629, -6067438460795261998
  %4631 = and i64 -6067438460795261998, %4629
  %4632 = xor i64 -6067438460795261998, %4629
  %4633 = or i64 %4631, %4632
  %4634 = add i64 %1174, 7286863937038512952
  %4635 = and i64 7286863937038512952, %1174
  %4636 = or i64 7286863937038512952, %1174
  %4637 = add i64 %4635, %4636
  %4638 = sext i32 %66 to i64
  %4639 = and i64 %4638, 1044951828567529774
  %4640 = xor i64 %4638, -1
  %4641 = or i64 -1044951828567529775, %4640
  %4642 = xor i64 %4641, -1
  %4643 = and i64 %4642, -1
  %4644 = xor i64 %4637, %4639
  %4645 = xor i64 %4644, %4633
  %4646 = xor i64 %4645, %4630
  %4647 = xor i64 %4646, 0
  %4648 = xor i64 %4647, %4643
  %4649 = xor i64 %4648, %4634
  %4650 = mul i64 %4628, %4649
  %4651 = trunc i64 %4650 to i32
  %4652 = and i64 %938, -2313626791917683031
  %4653 = xor i64 %938, -1
  %4654 = or i64 2313626791917683030, %4653
  %4655 = xor i64 %4654, -1
  %4656 = and i64 %4655, -1
  %4657 = and i64 %444, 4496994387490012136
  %4658 = xor i64 %444, -1
  %4659 = xor i64 4496994387490012136, %4658
  %4660 = and i64 %4659, 4496994387490012136
  %4661 = sext i32 %23 to i64
  %4662 = add i64 %4661, -5099833393569757381
  %4663 = sub i64 0, %4661
  %4664 = add i64 5099833393569757381, %4663
  %4665 = sub i64 0, %4664
  %4666 = xor i64 %4657, %4662
  %4667 = xor i64 %4666, 2430727143532055757
  %4668 = xor i64 %4667, %4656
  %4669 = xor i64 %4668, %4665
  %4670 = xor i64 %4669, %4660
  %4671 = xor i64 %4670, %4652
  %4672 = and i64 %659, 4559301508928360917
  %4673 = xor i64 %659, -1
  %4674 = xor i64 4559301508928360917, %4673
  %4675 = and i64 %4674, 4559301508928360917
  %4676 = or i64 %614, 2054812433872512749
  %4677 = xor i64 %614, -1
  %4678 = and i64 %4677, 8455323803322525762
  %4679 = and i64 %614, -8455323803322525763
  %4680 = or i64 %4678, %4679
  %4681 = xor i64 7625563075054620335, %4680
  %4682 = xor i64 %614, -1
  %4683 = or i64 -2054812433872512750, %4682
  %4684 = xor i64 %4683, -1
  %4685 = and i64 %4684, -1
  %4686 = or i64 %4681, %4685
  %4687 = xor i64 %4686, %4676
  %4688 = xor i64 %4687, %4672
  %4689 = xor i64 %4688, 0
  %4690 = xor i64 %4689, %4675
  %4691 = mul i64 %4671, %4690
  %4692 = trunc i64 %4691 to i32
  %4693 = or i64 %776, -7995900127518495671
  %4694 = xor i64 %776, -1
  %4695 = and i64 -7995900127518495671, %4694
  %4696 = add i64 %4695, %776
  %4697 = and i64 %108, 2106579405846998669
  %4698 = xor i64 %108, -1
  %4699 = xor i64 2106579405846998669, %4698
  %4700 = and i64 %4699, 2106579405846998669
  %4701 = xor i64 %4697, %4700
  %4702 = xor i64 %4701, -7993608613428249435
  %4703 = xor i64 %4702, %4696
  %4704 = xor i64 %4703, %4693
  %4705 = or i64 %610, 3324134214558008526
  %4706 = and i64 3324134214558008526, %610
  %4707 = xor i64 3324134214558008526, %610
  %4708 = or i64 %4706, %4707
  %4709 = or i64 %124, 4587865831913721507
  %4710 = xor i64 %124, -1
  %4711 = and i64 %4710, -7547240228776930583
  %4712 = and i64 %124, 7547240228776930582
  %4713 = or i64 %4711, %4712
  %4714 = xor i64 -6275327010035721142, %4713
  %4715 = xor i64 %124, -1
  %4716 = or i64 -4587865831913721508, %4715
  %4717 = xor i64 %4716, -1
  %4718 = and i64 %4717, -1
  %4719 = or i64 %4714, %4718
  %4720 = xor i64 %4705, %4709
  %4721 = xor i64 %4720, 0
  %4722 = xor i64 %4721, %4719
  %4723 = xor i64 %4722, %4708
  %4724 = mul i64 %4704, %4723
  call void @"5784248439022692321"(i32 1, i64* null, i8*** null, i64* %.reload710, i8*** %4497, i64* null, i8*** null, i64* null, i8*** null, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 %4524, i1* null, i32 %4555, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 %4603, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 %4651, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 %4692, i32 0, i1* null, i1* null, i64 %4724, i64* null, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 0, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %4725 = load i8**, i8*** %4497, align 8
  %4726 = load i8*, i8** %4725, align 8
  %4727 = bitcast i8* %4726 to i1 (i32, i32, i1*)*
  %.reload713 = load i32, i32* %.reg2mem712, align 4
  %targetBlock31 = call i1 %4727(i32 %.reload713, i32 %82, i1* %83)
  %.reload431 = load i8**, i8*** %.reg2mem430, align 8
  %.reload434 = load i8**, i8*** %.reg2mem433, align 8
  %4728 = select i1 %targetBlock31, i8** %.reload431, i8** %.reload434
  %4729 = load i8*, i8** %4728, align 8
  indirectbr i8* %4729, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub32:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %84, align 1
  ret void

.exitStub133:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %84, align 1
  ret void

"119":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4730 = load i64, i64* %85, align 8
  %4731 = call i64 @m1252811912226950246(i64 %4730)
  %4732 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14996539064837633190, i32 0, i64 %4731
  store i8** %4732, i8*** %86, align 8
  ret void

newFuncRoot34:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload443 = load i8**, i8*** %.reg2mem442, align 8
  %4733 = load i8*, i8** %.reload443, align 8
  indirectbr i8* %4733, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.split:                                           ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4734 = icmp eq i8* %87, null
  store i1 %4734, i1* %89, align 1
  %4735 = srem i64 %88, 2
  %4736 = icmp eq i64 %4735, 0
  %.reload446 = load i8**, i8*** %.reg2mem445, align 8
  %.reload449 = load i8**, i8*** %.reg2mem448, align 8
  %4737 = select i1 %4736, i8** %.reload446, i8** %.reload449
  %4738 = load i8*, i8** %4737, align 8
  indirectbr i8* %4738, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub35:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %90, align 1
  ret void

.exitStub136:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %90, align 1
  ret void

"124":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4739 = load i64, i64* %91, align 8
  %4740 = call i64 @m1252811912226950246(i64 %4739)
  %4741 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable13175363040677724041, i32 0, i64 %4740
  store i8** %4741, i8*** %92, align 8
  ret void

newFuncRoot37:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload458 = load i8**, i8*** %.reg2mem457, align 8
  %4742 = load i8*, i8** %.reload458, align 8
  indirectbr i8* %4742, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.split38:                                         ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4743 = icmp eq float* %93, null
  %4744 = icmp eq float* %94, null
  %4745 = select i1 %4743, i1 true, i1 %4744
  %.reload461 = load i8**, i8*** %.reg2mem460, align 8
  %.reload464 = load i8**, i8*** %.reg2mem463, align 8
  %4746 = select i1 %4745, i8** %.reload461, i8** %.reload464
  %4747 = load i8*, i8** %4746, align 8
  indirectbr i8* %4747, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub39:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %95, align 1
  ret void

.exitStub140:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %95, align 1
  ret void

newFuncRoot41:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload470 = load i8**, i8*** %.reg2mem469, align 8
  %4748 = load i8*, i8** %.reload470, align 8
  indirectbr i8* %4748, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.split42:                                         ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4749 = trunc i64 %96 to i32
  store i32 %4749, i32* %97, align 4
  %4750 = urem i32 %4749, 80
  %4751 = icmp eq i32 %4750, 0
  %.reload473 = load i8**, i8*** %.reg2mem472, align 8
  %.reload476 = load i8**, i8*** %.reg2mem475, align 8
  %4752 = select i1 %4751, i8** %.reload473, i8** %.reload476
  %4753 = load i8*, i8** %4752, align 8
  indirectbr i8* %4753, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub43:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4754 = sext i32 %63 to i64
  %4755 = add i64 %4754, -4794674745183144376
  %4756 = xor i64 -4794674745183144376, %4754
  %4757 = and i64 -4794674745183144376, %4754
  %4758 = mul i64 2, %4757
  %4759 = add i64 %4756, %4758
  %4760 = or i64 %401, -7818491332171930475
  %4761 = and i64 -7818491332171930475, %401
  %4762 = xor i64 -7818491332171930475, %401
  %4763 = or i64 %4761, %4762
  %4764 = xor i64 -4561681628497017369, %4760
  %4765 = xor i64 %4764, %4755
  %4766 = xor i64 %4765, %4763
  %4767 = xor i64 %4766, %4759
  %4768 = or i64 %1237, 5001638541964740196
  %4769 = xor i64 %1237, -1
  %4770 = and i64 5001638541964740196, %4769
  %4771 = add i64 %4770, %1237
  %4772 = or i64 %249, -2098372709138865924
  %4773 = xor i64 %249, -1
  %4774 = and i64 %4773, 8699446632700123753
  %4775 = and i64 %249, -8699446632700123754
  %4776 = or i64 %4774, %4775
  %4777 = xor i64 -7324064941837092203, %4776
  %4778 = xor i64 %249, -1
  %4779 = or i64 2098372709138865923, %4778
  %4780 = xor i64 %4779, -1
  %4781 = and i64 %4780, -1
  %4782 = or i64 %4777, %4781
  %4783 = or i64 %916, 3071744359932858173
  %4784 = xor i64 %916, -1
  %4785 = and i64 3071744359932858173, %4784
  %4786 = add i64 %4785, %916
  %4787 = xor i64 %4768, %4783
  %4788 = xor i64 %4787, 4018849383394754007
  %4789 = xor i64 %4788, %4786
  %4790 = xor i64 %4789, %4771
  %4791 = xor i64 %4790, %4782
  %4792 = xor i64 %4791, %4772
  %4793 = mul i64 %4767, %4792
  %4794 = trunc i64 %4793 to i1
  store i1 %4794, i1* %98, align 1
  ret void

.exitStub144:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %98, align 1
  ret void

newFuncRoot45:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4795 = alloca i64, align 8
  store i64* %4795, i64** %.reg2mem714, align 8
  %4796 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %4797 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7248833348834779914, i32 0, i64 %4796
  store i8* bitcast (i1 (i64, i64*, i64, i64*, i64*, i64*)* @render.extracted.extracted to i8*), i8** %4797, align 8
  %.reload482 = load i8**, i8*** %.reg2mem481, align 8
  %4798 = load i8*, i8** %.reload482, align 8
  indirectbr i8* %4798, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"134":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4799 = getelementptr inbounds i8, i8* %99, i64 %100
  %4800 = load i8, i8* %4799, align 1, !tbaa !16
  store i8 %4800, i8* %102, align 1
  %4801 = mul i64 %101, 2
  store i64 %4801, i64* %.reg2mem717, align 8
  %.reload485 = load i8**, i8*** %.reg2mem484, align 8
  %4802 = load i8*, i8** %.reload485, align 8
  indirectbr i8* %4802, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl46:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload716 = load i64*, i64** %.reg2mem714, align 8
  %4803 = and i64 %930, -587657457359645080
  %4804 = xor i64 %930, -1
  %4805 = xor i64 -587657457359645080, %4804
  %4806 = and i64 %4805, -587657457359645080
  %4807 = or i64 %906, 3205727043357441542
  %4808 = xor i64 %906, -1
  %4809 = and i64 3205727043357441542, %4808
  %4810 = add i64 %4809, %906
  %4811 = xor i64 -6085742321668454703, %4803
  %4812 = xor i64 %4811, %4810
  %4813 = xor i64 %4812, %4806
  %4814 = xor i64 %4813, %4807
  %4815 = and i64 %335, 491564049803068915
  %4816 = or i64 -491564049803068916, %335
  %4817 = sub i64 %4816, -491564049803068916
  %4818 = add i64 %1348, -1659664334995666197
  %4819 = sub i64 0, %1348
  %4820 = sub i64 -1659664334995666197, %4819
  %4821 = xor i64 %4817, %4815
  %4822 = xor i64 %4821, 1507606895008839574
  %4823 = xor i64 %4822, %4820
  %4824 = xor i64 %4823, %4818
  %4825 = mul i64 %4814, %4824
  store i64 %4825, i64* %.reload716, align 8
  %4826 = alloca i8**, align 8
  %.reload715 = load i64*, i64** %.reg2mem714, align 8
  %4827 = add i64 %100, -1947813818316834702
  %4828 = add i64 -1589763592581524206, %100
  %4829 = add i64 %4828, -358050225735310496
  %4830 = or i64 %869, 1119471217486999888
  %4831 = xor i64 %869, -1
  %4832 = and i64 %4831, -2527226261977592818
  %4833 = and i64 %869, 2527226261977592817
  %4834 = or i64 %4832, %4833
  %4835 = xor i64 -3214351605056946850, %4834
  %4836 = xor i64 %869, -1
  %4837 = or i64 -1119471217486999889, %4836
  %4838 = xor i64 %4837, -1
  %4839 = and i64 %4838, -1
  %4840 = or i64 %4835, %4839
  %4841 = add i64 %1410, -8280827194869275912
  %4842 = add i64 -7874474243514199116, %1410
  %4843 = add i64 %4842, -406352951355076796
  %4844 = xor i64 %4840, %4841
  %4845 = xor i64 %4844, %4827
  %4846 = xor i64 %4845, %4843
  %4847 = xor i64 %4846, %4830
  %4848 = xor i64 %4847, %4829
  %4849 = xor i64 %4848, 2305291003020935219
  %4850 = or i64 %247, -2055045800866847599
  %4851 = xor i64 %247, -1
  %4852 = and i64 -2055045800866847599, %4851
  %4853 = add i64 %4852, %247
  %4854 = or i64 %401, -5069849874094504555
  %4855 = xor i64 %401, -1
  %4856 = and i64 %4855, -1318556926177116549
  %4857 = and i64 %401, 1318556926177116548
  %4858 = or i64 %4856, %4857
  %4859 = xor i64 6059537295359163374, %4858
  %4860 = xor i64 %401, -1
  %4861 = or i64 5069849874094504554, %4860
  %4862 = xor i64 %4861, -1
  %4863 = and i64 %4862, -1
  %4864 = or i64 %4859, %4863
  %4865 = xor i64 %4854, %4850
  %4866 = xor i64 %4865, -4427957181074214671
  %4867 = xor i64 %4866, %4853
  %4868 = xor i64 %4867, %4864
  %4869 = mul i64 %4849, %4868
  %4870 = trunc i64 %4869 to i32
  %4871 = and i64 %988, 1654951332305633908
  %4872 = xor i64 %988, -1
  %4873 = xor i64 1654951332305633908, %4872
  %4874 = and i64 %4873, 1654951332305633908
  %4875 = and i64 %343, 4019387308434675215
  %4876 = xor i64 %343, -1
  %4877 = xor i64 4019387308434675215, %4876
  %4878 = and i64 %4877, 4019387308434675215
  %4879 = and i64 %488, -8387795968426522428
  %4880 = or i64 8387795968426522427, %488
  %4881 = sub i64 %4880, 8387795968426522427
  %4882 = xor i64 %4878, %4879
  %4883 = xor i64 %4882, %4881
  %4884 = xor i64 %4883, %4875
  %4885 = xor i64 %4884, %4871
  %4886 = xor i64 %4885, -8982120167880456611
  %4887 = xor i64 %4886, %4874
  %4888 = add i64 %492, -5549211312296775219
  %4889 = xor i64 -5549211312296775219, %492
  %4890 = and i64 -5549211312296775219, %492
  %4891 = mul i64 2, %4890
  %4892 = add i64 %4889, %4891
  %4893 = or i64 %920, 5478304958043328895
  %4894 = xor i64 %920, -1
  %4895 = and i64 %4894, 6526056025278962764
  %4896 = and i64 %920, -6526056025278962765
  %4897 = or i64 %4895, %4896
  %4898 = xor i64 1628029504312298803, %4897
  %4899 = xor i64 %920, -1
  %4900 = or i64 -5478304958043328896, %4899
  %4901 = xor i64 %4900, -1
  %4902 = and i64 %4901, -1
  %4903 = or i64 %4898, %4902
  %4904 = and i64 %825, -2880888095882035147
  %4905 = or i64 2880888095882035146, %825
  %4906 = sub i64 %4905, 2880888095882035146
  %4907 = xor i64 %4904, %4893
  %4908 = xor i64 %4907, %4906
  %4909 = xor i64 %4908, %4903
  %4910 = xor i64 %4909, 0
  %4911 = xor i64 %4910, %4892
  %4912 = xor i64 %4911, %4888
  %4913 = mul i64 %4887, %4912
  %4914 = trunc i64 %4913 to i32
  %4915 = add i64 %401, 3025855050112509070
  %4916 = xor i64 3025855050112509070, %401
  %4917 = and i64 3025855050112509070, %401
  %4918 = mul i64 2, %4917
  %4919 = add i64 %4916, %4918
  %4920 = or i64 %608, -7482985616451836000
  %4921 = xor i64 %608, -1
  %4922 = and i64 -7482985616451836000, %4921
  %4923 = add i64 %4922, %608
  %4924 = add i64 %440, 4100476317871822924
  %4925 = sub i64 0, %440
  %4926 = sub i64 4100476317871822924, %4925
  %4927 = xor i64 %4920, 2125494788929006879
  %4928 = xor i64 %4927, %4923
  %4929 = xor i64 %4928, %4915
  %4930 = xor i64 %4929, %4919
  %4931 = xor i64 %4930, %4926
  %4932 = xor i64 %4931, %4924
  %4933 = sext i32 %52 to i64
  %4934 = or i64 %4933, 7435496807281687202
  %4935 = and i64 7435496807281687202, %4933
  %4936 = xor i64 7435496807281687202, %4933
  %4937 = or i64 %4935, %4936
  %4938 = add i64 %101, 7073218005188798081
  %4939 = sub i64 0, %101
  %4940 = add i64 -7073218005188798081, %4939
  %4941 = sub i64 0, %4940
  %4942 = xor i64 %4941, %4938
  %4943 = xor i64 %4942, %4934
  %4944 = xor i64 %4943, %4937
  %4945 = xor i64 %4944, 0
  %4946 = mul i64 %4932, %4945
  %4947 = trunc i64 %4946 to i32
  %4948 = sext i8 %112 to i64
  %4949 = or i64 %4948, -3702046357804207395
  %4950 = xor i64 %4948, -1
  %4951 = and i64 %4950, 7797722563038876998
  %4952 = and i64 %4948, -7797722563038876999
  %4953 = or i64 %4951, %4952
  %4954 = xor i64 -6870061835870656613, %4953
  %4955 = xor i64 %4948, -1
  %4956 = or i64 3702046357804207394, %4955
  %4957 = xor i64 %4956, -1
  %4958 = and i64 %4957, -1
  %4959 = or i64 %4954, %4958
  %4960 = or i64 %1330, -5001706223490980556
  %4961 = xor i64 %1330, -1
  %4962 = and i64 %4961, 7844522831961405809
  %4963 = and i64 %1330, -7844522831961405810
  %4964 = or i64 %4962, %4963
  %4965 = xor i64 -3005298136488502203, %4964
  %4966 = xor i64 %1330, -1
  %4967 = or i64 5001706223490980555, %4966
  %4968 = xor i64 %4967, -1
  %4969 = and i64 %4968, -1
  %4970 = or i64 %4965, %4969
  %4971 = or i64 %990, 1421707334849822195
  %4972 = and i64 1421707334849822195, %990
  %4973 = xor i64 1421707334849822195, %990
  %4974 = or i64 %4972, %4973
  %4975 = xor i64 %4960, 500498332039157035
  %4976 = xor i64 %4975, %4971
  %4977 = xor i64 %4976, %4974
  %4978 = xor i64 %4977, %4970
  %4979 = xor i64 %4978, %4959
  %4980 = xor i64 %4979, %4949
  %4981 = and i64 %600, 1156074285787250465
  %4982 = or i64 -1156074285787250466, %600
  %4983 = sub i64 %4982, -1156074285787250466
  %4984 = add i64 %337, 7182709694037142379
  %4985 = add i64 -807999298298024807, %337
  %4986 = add i64 %4985, 7990708992335167186
  %4987 = add i64 %1176, 6783291467842252412
  %4988 = add i64 5211636200247276576, %1176
  %4989 = sub i64 %4988, -1571655267594975836
  %4990 = xor i64 %4984, %4989
  %4991 = xor i64 %4990, %4987
  %4992 = xor i64 %4991, %4983
  %4993 = xor i64 %4992, 0
  %4994 = xor i64 %4993, %4986
  %4995 = xor i64 %4994, %4981
  %4996 = mul i64 %4980, %4995
  %4997 = and i64 %401, 3652478599602882077
  %4998 = xor i64 %401, -1
  %4999 = or i64 -3652478599602882078, %4998
  %5000 = xor i64 %4999, -1
  %5001 = and i64 %5000, -1
  %5002 = or i64 %1322, -2355759414286607665
  %5003 = xor i64 %1322, -1
  %5004 = and i64 %5003, -4821550957008132747
  %5005 = and i64 %1322, 4821550957008132746
  %5006 = or i64 %5004, %5005
  %5007 = xor i64 7086627009723367354, %5006
  %5008 = xor i64 %1322, -1
  %5009 = or i64 2355759414286607664, %5008
  %5010 = xor i64 %5009, -1
  %5011 = and i64 %5010, -1
  %5012 = or i64 %5007, %5011
  %5013 = xor i64 %5001, %5002
  %5014 = xor i64 %5013, 1347295828238223635
  %5015 = xor i64 %5014, %5012
  %5016 = xor i64 %5015, %4997
  %5017 = add i64 %598, 5898506508185930866
  %5018 = add i64 7508189933005018748, %598
  %5019 = sub i64 %5018, 1609683424819087882
  %5020 = and i64 %1002, 7205938319846779966
  %5021 = xor i64 %1002, -1
  %5022 = or i64 -7205938319846779967, %5021
  %5023 = xor i64 %5022, -1
  %5024 = and i64 %5023, -1
  %5025 = or i64 %1324, 3702919775307201329
  %5026 = and i64 3702919775307201329, %1324
  %5027 = xor i64 3702919775307201329, %1324
  %5028 = or i64 %5026, %5027
  %5029 = xor i64 %5025, %5019
  %5030 = xor i64 %5029, %5024
  %5031 = xor i64 %5030, 0
  %5032 = xor i64 %5031, %5028
  %5033 = xor i64 %5032, %5017
  %5034 = xor i64 %5033, %5020
  %5035 = mul i64 %5016, %5034
  %5036 = trunc i64 %5035 to i1
  %5037 = add i64 %934, -3030058697048572895
  %5038 = xor i64 -3030058697048572895, %934
  %5039 = and i64 -3030058697048572895, %934
  %5040 = mul i64 2, %5039
  %5041 = add i64 %5038, %5040
  %5042 = add i64 %1346, 3175454115850640658
  %5043 = add i64 -3696220752169779630, %1346
  %5044 = add i64 %5043, 6871674868020420288
  %5045 = or i64 %502, 58487857187411628
  %5046 = xor i64 %502, -1
  %5047 = and i64 %5046, -4021628805352870602
  %5048 = and i64 %502, 4021628805352870601
  %5049 = or i64 %5047, %5048
  %5050 = xor i64 -3963300103759660134, %5049
  %5051 = xor i64 %502, -1
  %5052 = or i64 -58487857187411629, %5051
  %5053 = xor i64 %5052, -1
  %5054 = and i64 %5053, -1
  %5055 = or i64 %5050, %5054
  %5056 = xor i64 %5042, 2364813648139230397
  %5057 = xor i64 %5056, %5044
  %5058 = xor i64 %5057, %5037
  %5059 = xor i64 %5058, %5041
  %5060 = xor i64 %5059, %5045
  %5061 = xor i64 %5060, %5055
  %5062 = sext i32 %21 to i64
  %5063 = and i64 %5062, 3077342699791935932
  %5064 = xor i64 %5062, -1
  %5065 = xor i64 3077342699791935932, %5064
  %5066 = and i64 %5065, 3077342699791935932
  %5067 = add i64 %776, -5472087815923062136
  %5068 = sub i64 0, %776
  %5069 = add i64 5472087815923062136, %5068
  %5070 = sub i64 0, %5069
  %5071 = add i64 %337, 2794317488857281618
  %5072 = add i64 1652051110964949918, %337
  %5073 = sub i64 %5072, -1142266377892331700
  %5074 = xor i64 %5067, %5070
  %5075 = xor i64 %5074, 0
  %5076 = xor i64 %5075, %5073
  %5077 = xor i64 %5076, %5063
  %5078 = xor i64 %5077, %5066
  %5079 = xor i64 %5078, %5071
  %5080 = mul i64 %5061, %5079
  call void @"5784248439022692321"(i32 %4870, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* %.reload715, i8*** %4826, i1 false, i1 false, i1 false, i1* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i1* null, i1* null, i32 %4914, i1* null, i32 0, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i1 false, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32 0, i32* null, i1* null, i1* null, i64* null, i8*** null, i32 0, i32 0, i32* null, i64* null, float* null, float** null, float 0.000000e+00, i1* null, i32 0, i32 0, i32* null, i1* null, i64* null, i8*** null, i32 0, i32 %4947, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %4996, i64* null, i64* null, i1 %5036, i1* null, float 0.000000e+00, float* null, float* null, i8* null, float* null, i32* null, i32 0, i32 0, i1* null, i1* null, i64* null, i8*** null, i8* null, i64 %5080, i1* null, i1* null, i64* null, i8*** null, float* null, float* null, i1* null, i64 0, i32* null, i1* null, i8* null, i64 0, i64 0, i8* null, i64* null, i64* null, i64* null, i64* null, i1* null, i64 0, i1* null, i64* null, i8*** null, i8 0, i64 0, i64 0, i64 0, i32* null, i64* null, i1* null, i1* null, i1* null)
  %5081 = load i8**, i8*** %4826, align 8
  %5082 = load i8*, i8** %5081, align 8
  %5083 = bitcast i8* %5082 to i1 (i64, i64*, i64, i64*, i64*, i64*)*
  %.reload718 = load i64, i64* %.reg2mem717, align 8
  %targetBlock47 = call i1 %5083(i64 %.reload718, i64* %103, i64 %101, i64* %104, i64* %105, i64* %106)
  %.reload488 = load i8**, i8*** %.reg2mem487, align 8
  %.reload491 = load i8**, i8*** %.reg2mem490, align 8
  %5084 = select i1 %targetBlock47, i8** %.reload488, i8** %.reload491
  %5085 = load i8*, i8** %5084, align 8
  indirectbr i8* %5085, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub48:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %107, align 1
  ret void

.exitStub5:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5086 = sext i32 %81 to i64
  %5087 = or i64 %5086, -1676867164675346098
  %5088 = xor i64 %5086, -1
  %5089 = and i64 -1676867164675346098, %5088
  %5090 = add i64 %5089, %5086
  %5091 = and i64 %1120, 411544286889619238
  %5092 = xor i64 %1120, -1
  %5093 = xor i64 411544286889619238, %5092
  %5094 = and i64 %5093, 411544286889619238
  %5095 = xor i64 %5087, %5091
  %5096 = xor i64 %5095, 1314063596957814503
  %5097 = xor i64 %5096, %5094
  %5098 = xor i64 %5097, %5090
  %5099 = and i64 %610, 5036679620951500027
  %5100 = xor i64 %610, -1
  %5101 = or i64 -5036679620951500028, %5100
  %5102 = xor i64 %5101, -1
  %5103 = and i64 %5102, -1
  %5104 = or i64 %249, 942921063954010920
  %5105 = xor i64 %249, -1
  %5106 = and i64 %5105, 4581054077713257728
  %5107 = and i64 %249, -4581054077713257729
  %5108 = or i64 %5106, %5107
  %5109 = xor i64 3640810515430786600, %5108
  %5110 = xor i64 %249, -1
  %5111 = or i64 -942921063954010921, %5110
  %5112 = xor i64 %5111, -1
  %5113 = and i64 %5112, -1
  %5114 = or i64 %5109, %5113
  %5115 = add i64 %124, 138415444518695104
  %5116 = sub i64 0, %124
  %5117 = add i64 -138415444518695104, %5116
  %5118 = sub i64 0, %5117
  %5119 = xor i64 %5104, %5103
  %5120 = xor i64 %5119, %5099
  %5121 = xor i64 %5120, %5118
  %5122 = xor i64 %5121, %5114
  %5123 = xor i64 %5122, 0
  %5124 = xor i64 %5123, %5115
  %5125 = mul i64 %5098, %5124
  %5126 = trunc i64 %5125 to i1
  store i1 %5126, i1* %107, align 1
  ret void

newFuncRoot49:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload497 = load i8**, i8*** %.reg2mem496, align 8
  %5127 = load i8*, i8** %.reload497, align 8
  indirectbr i8* %5127, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"139":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5128 = srem i64 %108, 2
  %5129 = icmp eq i64 %5128, 0
  %.reload500 = load i8**, i8*** %.reg2mem499, align 8
  %.reload503 = load i8**, i8*** %.reg2mem502, align 8
  %5130 = select i1 %5129, i8** %.reload500, i8** %.reload503
  %5131 = load i8*, i8** %5130, align 8
  indirectbr i8* %5131, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub50:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5132 = or i64 %96, 7117786479396951947
  %5133 = xor i64 %96, -1
  %5134 = and i64 7117786479396951947, %5133
  %5135 = add i64 %5134, %96
  %5136 = add i64 %1006, 2510594725523034245
  %5137 = add i64 24978493715183053, %1006
  %5138 = add i64 %5137, 2485616231807851192
  %5139 = xor i64 %5136, %5138
  %5140 = xor i64 %5139, %5135
  %5141 = xor i64 %5140, %5132
  %5142 = xor i64 %5141, -5562130217929282703
  %5143 = or i64 %211, -7172405857375533834
  %5144 = xor i64 %211, -1
  %5145 = and i64 -7172405857375533834, %5144
  %5146 = add i64 %5145, %211
  %5147 = and i64 %990, 2128185200054223955
  %5148 = xor i64 %990, -1
  %5149 = or i64 -2128185200054223956, %5148
  %5150 = xor i64 %5149, -1
  %5151 = and i64 %5150, -1
  %5152 = xor i64 %5146, %5147
  %5153 = xor i64 %5152, %5143
  %5154 = xor i64 %5153, %5151
  %5155 = xor i64 %5154, -2362849423263435375
  %5156 = mul i64 %5142, %5155
  %5157 = trunc i64 %5156 to i1
  store i1 %5157, i1* %109, align 1
  ret void

.exitStub151:                                     ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %109, align 1
  ret void

"142":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5158 = load i64, i64* %110, align 8
  %5159 = call i64 @m1252811912226950246(i64 %5158)
  %5160 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9376634603898858042, i32 0, i64 %5159
  store i8** %5160, i8*** %111, align 8
  ret void

newFuncRoot52:                                    ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5161 = alloca i64, align 8
  store i64* %5161, i64** %.reg2mem719, align 8
  %5162 = call i64 @m1252811912226950246(i64 5221456193252566390)
  %5163 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7736042078782182294, i32 0, i64 %5162
  store i8* bitcast (i1 (i8, i32*, i64, i64*, i1*, i64, i64, i1*)* @render.extracted.1.extracted to i8*), i8** %5163, align 8
  %.reload512 = load i8**, i8*** %.reg2mem511, align 8
  %5164 = load i8*, i8** %.reload512, align 8
  indirectbr i8* %5164, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

"144":                                            ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload515 = load i8**, i8*** %.reg2mem514, align 8
  %5165 = load i8*, i8** %.reload515, align 8
  indirectbr i8* %5165, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

codeRepl53:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload721 = load i64*, i64** %.reg2mem719, align 8
  store i64 5221456193252566390, i64* %.reload721, align 8
  %.reload720 = load i64*, i64** %.reg2mem719, align 8
  %5166 = call i8** @lk2403458854773074703(i64* %.reload720)
  %5167 = load i8*, i8** %5166, align 8
  %5168 = bitcast i8* %5167 to i1 (i8, i32*, i64, i64*, i1*, i64, i64, i1*)*
  %targetBlock54 = call i1 %5168(i8 %112, i32* %116, i64 %113, i64* %117, i1* %118, i64 %114, i64 %115, i1* %119)
  %.reload518 = load i8**, i8*** %.reg2mem517, align 8
  %.reload521 = load i8**, i8*** %.reg2mem520, align 8
  %5169 = select i1 %targetBlock54, i8** %.reload518, i8** %.reload521
  %5170 = load i8*, i8** %5169, align 8
  indirectbr i8* %5170, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock59, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %LeafBlock49, label %NodeBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"34", label %"35", label %"36", label %"37", label %"38", label %newFuncRoot, label %"40", label %.exitStub, label %.exitStub2, label %"43", label %newFuncRoot1, label %"45", label %codeRepl, label %.exitStub3, label %.exitStub1, label %newFuncRoot4, label %"50", label %.exitStub.exitStub, label %.exitStub2.exitStub, label %"53", label %"54", label %newFuncRoot5, label %"56", label %.exitStub.exitStub6, label %codeRepl.exitStub.exitStub, label %newFuncRoot7, label %"60", label %codeRepl8, label %.exitStub10, label %.exitStub211, label %"64", label %newFuncRoot12, label %"66", label %.exitStub.exitStub13, label %.exitStub3.exitStub, label %newFuncRoot14, label %"70", label %.exitStub15, label %.exitStub116, label %"73", label %newFuncRoot17, label %"75", label %.exitStub.exitStub18, label %.exitStub1.exitStub, label %newFuncRoot19, label %"79", label %.exitStub.exitStub20, label %.exitStub1.exitStub21, label %newFuncRoot22, label %"83", label %.exitStub.exitStub23, label %.exitStub1.exitStub24, label %newFuncRoot25, label %"87", label %.exitStub.exitStub26, label %.exitStub8.exitStub, label %"90", label %"91", label %"92", label %codeRepl27, label %"94", label %codeRepl10, label %"96", label %"97", label %"98", label %"99", label %"100", label %codeRepl15, label %"102", label %"103", label %codeRepl26, label %"105", label %"106", label %codeRepl34, label %"108", label %codeRepl86, label %"110", label %"111", label %.loopexit, label %"113", label %newFuncRoot29, label %"115", label %codeRepl30, label %.exitStub32, label %.exitStub133, label %"119", label %newFuncRoot34, label %.split, label %.exitStub35, label %.exitStub136, label %"124", label %newFuncRoot37, label %.split38, label %.exitStub39, label %.exitStub140, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %"134", label %codeRepl46, label %.exitStub48, label %.exitStub5, label %newFuncRoot49, label %"139", label %.exitStub50, label %.exitStub151, label %"142", label %newFuncRoot52, label %"144", label %codeRepl53, label %.exitStub55, label %.exitStub4]

.exitStub55:                                      ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %120, align 1
  ret void

.exitStub4:                                       ; preds = %codeRepl53, %"144", %newFuncRoot52, %"139", %newFuncRoot49, %codeRepl46, %"134", %newFuncRoot45, %.split42, %newFuncRoot41, %.split38, %newFuncRoot37, %.split, %newFuncRoot34, %codeRepl30, %"115", %newFuncRoot29, %.loopexit, %"111", %"110", %codeRepl86, %"108", %codeRepl34, %"106", %"105", %codeRepl26, %"103", %"102", %codeRepl15, %"100", %"99", %"98", %"97", %"96", %codeRepl10, %"94", %codeRepl27, %"92", %"91", %"90", %"87", %newFuncRoot25, %"83", %newFuncRoot22, %"79", %newFuncRoot19, %"75", %newFuncRoot17, %"70", %newFuncRoot14, %"66", %newFuncRoot12, %codeRepl8, %"60", %newFuncRoot7, %"56", %newFuncRoot5, %"50", %newFuncRoot4, %codeRepl, %"45", %newFuncRoot1, %"40", %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %NodeBlock47, %LeafBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %NodeBlock59, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %120, align 1
  ret void
}

; Function Attrs: noinline
define internal i64 @h9549842938191327224(i64 %0) #11 {
  %2 = alloca i32, align 4
  %3 = xor i64 388314405, %0
  ret i64 %3
}

; Function Attrs: noinline
define internal i8** @bf3325468485390379012(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [148 x i8*], [148 x i8*]* @obfsblockAddrLookupTable11844687680650345730, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf11682538603393217460(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable3777267913099762004, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16940128800427173045(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [47 x i8*], [47 x i8*]* @obfsblockAddrLookupTable4282319566941700219, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17091576487413611968(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [14 x i8*], [14 x i8*]* @obfsblockAddrLookupTable11487299654571061756, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf4471601488556574720(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [38 x i8*], [38 x i8*]* @obfsblockAddrLookupTable2483702251257620974, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf10863455059032886292(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [60 x i8*], [60 x i8*]* @obfsblockAddrLookupTable7964094905053450214, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf794918515261098114(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [26 x i8*], [26 x i8*]* @obfsblockAddrLookupTable5628260294871820814, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14281843279761912560(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7353789112286112543, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17828750132393575339(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3297044618817448063, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14483027482696508820(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5812548706565816714, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16232848923043496(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1797664195434524460, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf18108755420242421295(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable5528410670712074847, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1964187169507630819(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable6014869595000441341, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf4402142158456708617(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [8 x i8*], [8 x i8*]* @obfsblockAddrLookupTable16240604599681249327, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf565668037337745205(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable2722354598544532895, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf18348850871760216737(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1766039748528219661, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf12853339880816689374(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11832045528322256264, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf3611037731079723307(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15530373279097603541, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf12382766459809533200(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable16595383678855456002, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf11893182969653303978(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1106547205484329642, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf3107329076723412484(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13514676529120742716, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf323596751415600656(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable12783221314702167078, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2465203609024612952(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable907254217448068036, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf6197856798957033914(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable17119708875124283161, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf10451871259507523800(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3347769788510896071, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf13573797562172960439(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable13914066860043643614, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2116388564844465803(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2199331466227108195, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2270863583753450932(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable1740696952520402321, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9796620445490608376(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable4720161520762699685, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf13260614022775511576(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable12054779285453193996, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf11341968219616265120(i32* %0) #11 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h9549842938191327224(i64 %4)
  %6 = getelementptr inbounds [149 x i8*], [149 x i8*]* @obfsblockAddrLookupTable11636732928335620957, i32 0, i64 %5
  ret i8** %6
}

define void @decode15841550746384648116(i8* %0, i32 %1, i8* %2, i32* %3, i8* %4) {
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = zext i32 %1 to i64
  br label %10

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %10, %7
  %11 = phi i64 [ 0, %7 ], [ %27, %10 ]
  %12 = phi i32 [ 0, %7 ], [ %26, %10 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = shl i32 %12, 1
  %16 = sext i8 %14 to i32
  %17 = xor i32 %15, %16
  %18 = and i32 %15, %16
  %19 = mul i32 2, %18
  %20 = add i32 %17, %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %4, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %2, i64 %11
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds i32, i32* %3, i64 %21
  %26 = load i32, i32* %25, align 4
  %27 = add nuw nsw i64 %11, 1
  %28 = icmp eq i64 %27, %8
  br i1 %28, label %9, label %10
}

define internal void @init15376288821552252010() {
  %outArray = alloca [26 x i8], align 1
  %1 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 0
  store i8 45, i8* %1, align 1
  %2 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 1
  store i8 46, i8* %2, align 1
  %3 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 2
  store i8 61, i8* %3, align 1
  %4 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 3
  store i8 44, i8* %4, align 1
  %5 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 4
  store i8 46, i8* %5, align 1
  %6 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 5
  store i8 45, i8* %6, align 1
  %7 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 6
  store i8 126, i8* %7, align 1
  %8 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 7
  store i8 36, i8* %8, align 1
  %9 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 8
  store i8 58, i8* %9, align 1
  %10 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 9
  store i8 58, i8* %10, align 1
  %11 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 10
  store i8 59, i8* %11, align 1
  %12 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 11
  store i8 35, i8* %12, align 1
  %13 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 12
  store i8 61, i8* %13, align 1
  %14 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 13
  store i8 61, i8* %14, align 1
  %15 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 14
  store i8 33, i8* %15, align 1
  %16 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 15
  store i8 45, i8* %16, align 1
  %17 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 16
  store i8 33, i8* %17, align 1
  %18 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 17
  store i8 42, i8* %18, align 1
  %19 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 18
  store i8 126, i8* %19, align 1
  %20 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 19
  store i8 35, i8* %20, align 1
  %21 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 20
  store i8 36, i8* %21, align 1
  %22 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 21
  store i8 42, i8* %22, align 1
  %23 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 22
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 23
  store i8 64, i8* %24, align 1
  %25 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 24
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 25
  store i8 46, i8* %26, align 1
  %nextArray = alloca [26 x i32], align 4
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 0
  store i32 3, i32* %27, align 4
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 1
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 2
  store i32 7, i32* %29, align 4
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 3
  store i32 2, i32* %30, align 4
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 4
  store i32 1, i32* %31, align 4
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 5
  store i32 3, i32* %32, align 4
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 6
  store i32 4, i32* %33, align 4
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 7
  store i32 11, i32* %34, align 4
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 8
  store i32 5, i32* %35, align 4
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 9
  store i32 5, i32* %36, align 4
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 10
  store i32 6, i32* %37, align 4
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 11
  store i32 10, i32* %38, align 4
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 12
  store i32 7, i32* %39, align 4
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 13
  store i32 7, i32* %40, align 4
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 14
  store i32 8, i32* %41, align 4
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 15
  store i32 3, i32* %42, align 4
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 16
  store i32 8, i32* %43, align 4
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 17
  store i32 9, i32* %44, align 4
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 18
  store i32 4, i32* %45, align 4
  %46 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 19
  store i32 10, i32* %46, align 4
  %47 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 20
  store i32 11, i32* %47, align 4
  %48 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 21
  store i32 9, i32* %48, align 4
  %49 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 22
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 23
  store i32 12, i32* %50, align 4
  %51 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 24
  store i32 0, i32* %51, align 4
  %52 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 25
  store i32 1, i32* %52, align 4
  %53 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 0
  %54 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 0
  br label %55

55:                                               ; preds = %0
  call void @decode15841550746384648116(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32* %53, i8* %54)
  %outArray1 = alloca [10 x i8], align 1
  %56 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 0
  store i8 27, i8* %56, align 1
  %57 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 1
  store i8 91, i8* %57, align 1
  %58 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 2
  store i8 74, i8* %58, align 1
  %59 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 3
  store i8 91, i8* %59, align 1
  %60 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 4
  store i8 27, i8* %60, align 1
  %61 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 5
  store i8 50, i8* %61, align 1
  %62 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 6
  store i8 0, i8* %62, align 1
  %63 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 7
  store i8 74, i8* %63, align 1
  %64 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 8
  store i8 27, i8* %64, align 1
  %65 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 9
  store i8 0, i8* %65, align 1
  %nextArray2 = alloca [10 x i32], align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 0
  store i32 1, i32* %66, align 4
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 1
  store i32 2, i32* %67, align 4
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 2
  store i32 4, i32* %68, align 4
  %69 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 3
  store i32 2, i32* %69, align 4
  %70 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 4
  store i32 1, i32* %70, align 4
  %71 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 5
  store i32 3, i32* %71, align 4
  %72 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 6
  store i32 0, i32* %72, align 4
  %73 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 7
  store i32 4, i32* %73, align 4
  %74 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 8
  store i32 1, i32* %74, align 4
  %75 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 9
  store i32 0, i32* %75, align 4
  %76 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 0
  %77 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 0
  br label %78

78:                                               ; preds = %55
  call void @decode15841550746384648116(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32* %76, i8* %77)
  %outArray3 = alloca [8 x i8], align 1
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 0
  store i8 27, i8* %79, align 1
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 1
  store i8 91, i8* %80, align 1
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 2
  store i8 91, i8* %81, align 1
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 3
  store i8 72, i8* %82, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 4
  store i8 91, i8* %83, align 1
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 5
  store i8 72, i8* %84, align 1
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 6
  store i8 72, i8* %85, align 1
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 7
  store i8 0, i8* %86, align 1
  %nextArray4 = alloca [8 x i32], align 4
  %87 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 0
  store i32 1, i32* %87, align 4
  %88 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 1
  store i32 2, i32* %88, align 4
  %89 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 2
  store i32 2, i32* %89, align 4
  %90 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 3
  store i32 3, i32* %90, align 4
  %91 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 4
  store i32 2, i32* %91, align 4
  %92 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 5
  store i32 3, i32* %92, align 4
  %93 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 6
  store i32 3, i32* %93, align 4
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 7
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray4, i32 0, i32 0
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray3, i32 0, i32 0
  br label %97

97:                                               ; preds = %78
  call void @decode15841550746384648116(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32* %95, i8* %96)
  ret void
}

attributes #0 = { mustprogress nofree noinline norecurse nosync nounwind ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #5 = { noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { nofree noinline nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #9 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #10 = { mustprogress nofree noinline norecurse nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #11 = { noinline }
attributes #12 = { "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #13 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"float", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C/C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !12, i64 0}
!16 = !{!12, !12, i64 0}
