; ModuleID = './donut_substitution.ll'
source_filename = "donut_deobfuscated.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx12.0.0"

@Z_SIZE = local_unnamed_addr constant i64 1760, align 8
@B_SIZE = local_unnamed_addr constant i64 1760, align 8
@WAIT_TIME = local_unnamed_addr constant i64 30000, align 8
@.str = private unnamed_addr global [13 x i8] c"\01\01\01\00\00\00\00\00\01\01\00\01\00", align 1
@CHARS = local_unnamed_addr global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr global [5 x i8] c"\00\01\01\01\01", align 1
@.str.2 = private unnamed_addr global [34 x i8] c"\00\00\01\01\01\01\01\00\00\01\00\01\00\00\00\01\01\00\00\00\01\01\00\00\00\01\01\01\01\01\00\01\00\01", align 1
@.str.3 = private unnamed_addr global [4 x i8] c"\01\00\01\00", align 1
@obfsfuncAddrLookupTable15196418527574027084 = private global [15 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2339431414740645237 = private global [3 x i8*] zeroinitializer
@obfsfuncAddrLookupTable16569491712965296280 = private global [12 x i8*] zeroinitializer
@obfsfuncAddrLookupTable4249693396081903176 = private global [15 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10704982355254502734 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable4065199750022294924 = private global [4 x i8*] zeroinitializer
@obfsfuncAddrLookupTable1252163288438473641 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2052736990690125031 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11790647338376632081 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable8012535776871168785 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable2936378647060095639 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable13584920069806577051 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable7736138858792283958 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable5267233781939814659 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable11422090804462279601 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3231250603839710514 = private global [2 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3399976269554154823 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable9221784372211060696 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable714670702284029050 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3092705622466298772 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable6692509614401912191 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12181580443857829625 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable10990634260413618745 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12646564381111741682 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable12852019627141998670 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable3945980122852926304 = private global [1 x i8*] zeroinitializer
@obfsfuncAddrLookupTable14640128482458840838 = private global [1 x i8*] zeroinitializer
@obfsblockAddrLookupTable2225311471228186675 = private global [186 x i8*] zeroinitializer
@obfsblockAddrLookupTable13466774680077859934 = private global [58 x i8*] zeroinitializer
@obfsblockAddrLookupTable953024091002816246 = private global [11 x i8*] zeroinitializer
@obfsblockAddrLookupTable2165107726949451542 = private global [31 x i8*] zeroinitializer
@obfsblockAddrLookupTable273925028288190708 = private global [70 x i8*] zeroinitializer
@obfsblockAddrLookupTable11830966694973052798 = private global [20 x i8*] zeroinitializer
@obfsblockAddrLookupTable5457382995501966596 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable7658909545711664131 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable1469608314208994637 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable17752622897403080987 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable17778203017081165068 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable3781506102938076433 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable17853995518347047771 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable11620099575389990025 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable11253129521938400687 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable5293587490885567911 = private global [5 x i8*] zeroinitializer
@obfsblockAddrLookupTable7411847914865700813 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable3305384392047029551 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable10123721182278519796 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable14017839906869768822 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable10753054479158655154 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable2406509766364924601 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable2201829288081703202 = private global [6 x i8*] zeroinitializer
@obfsblockAddrLookupTable11059552133823327315 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable1046456830538597625 = private global [9 x i8*] zeroinitializer
@obfsblockAddrLookupTable7758783010819204808 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable15002271783724796336 = private global [10 x i8*] zeroinitializer
@obfsblockAddrLookupTable18440005676144863832 = private global [7 x i8*] zeroinitializer
@obfsblockAddrLookupTable17445040427728598547 = private global [187 x i8*] zeroinitializer
@llvm.compiler.used = appending global [114 x i8*] [i8* bitcast (i64 (i64)* @m12654978418463392530 to i8*), i8* bitcast ([15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084 to i8*), i8* bitcast (i8** (i64*)* @lk4104490460174343886 to i8*), i8* bitcast ([3 x i8*]* @obfsfuncAddrLookupTable2339431414740645237 to i8*), i8* bitcast (i8** (i64*)* @lk1150942098745952095 to i8*), i8* bitcast ([12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280 to i8*), i8* bitcast (i8** (i64*)* @lk15438226847016391286 to i8*), i8* bitcast ([15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176 to i8*), i8* bitcast (i8** (i64*)* @lk14802275186744156584 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable10704982355254502734 to i8*), i8* bitcast (i8** (i64*)* @lk16981593920911698396 to i8*), i8* bitcast ([4 x i8*]* @obfsfuncAddrLookupTable4065199750022294924 to i8*), i8* bitcast (i8** (i64*)* @lk1507460811145017318 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable1252163288438473641 to i8*), i8* bitcast (i8** (i64*)* @lk4155444237337359759 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2052736990690125031 to i8*), i8* bitcast (i8** (i64*)* @lk16694588968120012916 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11790647338376632081 to i8*), i8* bitcast (i8** (i64*)* @lk17476166181081627056 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable8012535776871168785 to i8*), i8* bitcast (i8** (i64*)* @lk6108643113584584359 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable2936378647060095639 to i8*), i8* bitcast (i8** (i64*)* @lk11760273921675393270 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable13584920069806577051 to i8*), i8* bitcast (i8** (i64*)* @lk14136176891458644934 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable7736138858792283958 to i8*), i8* bitcast (i8** (i64*)* @lk7634065167745351151 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable5267233781939814659 to i8*), i8* bitcast (i8** (i64*)* @lk10336912531144989429 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable11422090804462279601 to i8*), i8* bitcast (i8** (i64*)* @lk5170062957344361398 to i8*), i8* bitcast ([2 x i8*]* @obfsfuncAddrLookupTable3231250603839710514 to i8*), i8* bitcast (i8** (i64*)* @lk16527391568973528520 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable3399976269554154823 to i8*), i8* bitcast (i8** (i64*)* @lk17440691223701217449 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable9221784372211060696 to i8*), i8* bitcast (i8** (i64*)* @lk274587686926290325 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable714670702284029050 to i8*), i8* bitcast (i8** (i64*)* @lk10042805741926783964 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable3092705622466298772 to i8*), i8* bitcast (i8** (i64*)* @lk5630561103844911684 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable6692509614401912191 to i8*), i8* bitcast (i8** (i64*)* @lk12171961596319746782 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable12181580443857829625 to i8*), i8* bitcast (i8** (i64*)* @lk15309315699111240189 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable10990634260413618745 to i8*), i8* bitcast (i8** (i64*)* @lk531628682323968284 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable12646564381111741682 to i8*), i8* bitcast (i8** (i64*)* @lk5923456252723256686 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable12852019627141998670 to i8*), i8* bitcast (i8** (i64*)* @lk11342274254818950462 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable3945980122852926304 to i8*), i8* bitcast (i8** (i64*)* @lk10900153557675762282 to i8*), i8* bitcast ([1 x i8*]* @obfsfuncAddrLookupTable14640128482458840838 to i8*), i8* bitcast (i8** (i64*)* @lk2798420644471863674 to i8*), i8* bitcast (i64 (i64)* @h11804894491772278134 to i8*), i8* bitcast ([186 x i8*]* @obfsblockAddrLookupTable2225311471228186675 to i8*), i8* bitcast (i8** (i32*)* @bf777061424148142830 to i8*), i8* bitcast ([58 x i8*]* @obfsblockAddrLookupTable13466774680077859934 to i8*), i8* bitcast (i8** (i32*)* @bf4367541783002168146 to i8*), i8* bitcast ([11 x i8*]* @obfsblockAddrLookupTable953024091002816246 to i8*), i8* bitcast (i8** (i32*)* @bf2563105590911343727 to i8*), i8* bitcast ([31 x i8*]* @obfsblockAddrLookupTable2165107726949451542 to i8*), i8* bitcast (i8** (i32*)* @bf13549976795470178447 to i8*), i8* bitcast ([70 x i8*]* @obfsblockAddrLookupTable273925028288190708 to i8*), i8* bitcast (i8** (i32*)* @bf14862898971591998804 to i8*), i8* bitcast ([20 x i8*]* @obfsblockAddrLookupTable11830966694973052798 to i8*), i8* bitcast (i8** (i32*)* @bf9697573497052965038 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable5457382995501966596 to i8*), i8* bitcast (i8** (i32*)* @bf6100004335245622257 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable7658909545711664131 to i8*), i8* bitcast (i8** (i32*)* @bf1506284653360689564 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable1469608314208994637 to i8*), i8* bitcast (i8** (i32*)* @bf14033556120813692093 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable17752622897403080987 to i8*), i8* bitcast (i8** (i32*)* @bf1197571377139792254 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable17778203017081165068 to i8*), i8* bitcast (i8** (i32*)* @bf10630721613528520237 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable3781506102938076433 to i8*), i8* bitcast (i8** (i32*)* @bf2869133644047347425 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable17853995518347047771 to i8*), i8* bitcast (i8** (i32*)* @bf11348756035212192102 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable11620099575389990025 to i8*), i8* bitcast (i8** (i32*)* @bf16235262942820273051 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable11253129521938400687 to i8*), i8* bitcast (i8** (i32*)* @bf1440224179025403013 to i8*), i8* bitcast ([5 x i8*]* @obfsblockAddrLookupTable5293587490885567911 to i8*), i8* bitcast (i8** (i32*)* @bf7020390530810900365 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable7411847914865700813 to i8*), i8* bitcast (i8** (i32*)* @bf2055233266049386021 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable3305384392047029551 to i8*), i8* bitcast (i8** (i32*)* @bf476793788477283144 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable10123721182278519796 to i8*), i8* bitcast (i8** (i32*)* @bf17374749499201147747 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable14017839906869768822 to i8*), i8* bitcast (i8** (i32*)* @bf14665384891532801934 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable10753054479158655154 to i8*), i8* bitcast (i8** (i32*)* @bf9506738072890574186 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable2406509766364924601 to i8*), i8* bitcast (i8** (i32*)* @bf12745111092262559403 to i8*), i8* bitcast ([6 x i8*]* @obfsblockAddrLookupTable2201829288081703202 to i8*), i8* bitcast (i8** (i32*)* @bf9526239474610670753 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable11059552133823327315 to i8*), i8* bitcast (i8** (i32*)* @bf17974093100361806345 to i8*), i8* bitcast ([9 x i8*]* @obfsblockAddrLookupTable1046456830538597625 to i8*), i8* bitcast (i8** (i32*)* @bf698711486529780441 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable7758783010819204808 to i8*), i8* bitcast (i8** (i32*)* @bf16895520698852116127 to i8*), i8* bitcast ([10 x i8*]* @obfsblockAddrLookupTable15002271783724796336 to i8*), i8* bitcast (i8** (i32*)* @bf15658819879636911971 to i8*), i8* bitcast ([7 x i8*]* @obfsblockAddrLookupTable18440005676144863832 to i8*), i8* bitcast (i8** (i32*)* @bf16635592617302135078 to i8*), i8* bitcast ([187 x i8*]* @obfsblockAddrLookupTable17445040427728598547 to i8*), i8* bitcast (i8** (i32*)* @bf5362083045698301334 to i8*)], section "llvm.metadata"
@llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @init10752436045149418001, i8* null }]

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind ssp willreturn uwtable
define i32 @update(float* %0, float* %1) local_unnamed_addr #0 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012126)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@update, %loopEnd), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012110)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@update, %defaultSwitchBasicBlock), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012204)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@update, %loopStart), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012207)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@update, %131), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012194)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@update, %BogusBasicBlock), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012174)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@update, %59), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012275)
  %16 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %15
  store i8* blockaddress(@update, %EntryBasicBlockSplit), i8** %16, align 8
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i1, align 1
  %lookupTable = alloca [8 x i32], align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %23, align 4
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %24, align 4
  %25 = icmp eq float* %0, null
  store i1 %25, i1* %.reg2mem, align 1
  %26 = icmp eq float* %1, null
  store i1 %26, i1* %.reg2mem2, align 1
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012204, i32* %2, align 4
  %27 = call i8** @bf777061424148142830(i32* %2)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %59
    i32 2, label %131
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i1, i1* %.reg2mem, align 1
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %29 = select i1 %.reload, i1 true, i1 %.reload3
  %30 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %31, %33
  %35 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = sub i32 %36, %38
  %40 = select i1 %29, i32 %34, i32 %39
  store i32 %40, i32* %dispatcher, align 4
  store i32 2, i32* %.reg2mem4, align 4
  %41 = load i8*, i8** %4, align 8
  %42 = load i8, i8* %41, align 1
  %43 = mul i8 %42, 2
  %44 = mul i8 %42, 2
  %45 = add i8 2, %44
  %46 = mul i8 %43, %45
  %47 = srem i8 %46, 4
  %48 = icmp eq i8 %47, 0
  %49 = mul i8 %42, %42
  %50 = mul i8 %49, %42
  %51 = add i8 %50, %42
  %52 = srem i8 %51, 2
  %53 = icmp eq i8 %52, 0
  %54 = and i1 %48, %53
  %55 = select i1 %54, i32 595012110, i32 595012126
  %56 = xor i32 %55, 16
  store i32 %56, i32* %2, align 4
  %57 = call i8** @bf777061424148142830(i32* %2)
  %58 = load i8*, i8** %57, align 8
  indirectbr i8* %58, [label %loopEnd, label %EntryBasicBlockSplit]

59:                                               ; preds = %59, %loopStart
  %60 = load float, float* %0, align 4, !tbaa !10
  %61 = fpext float %60 to double
  %62 = fadd double %61, 4.000000e-05
  %63 = fptrunc double %62 to float
  store float %63, float* %0, align 4, !tbaa !10
  %64 = load float, float* %1, align 4, !tbaa !10
  %65 = fpext float %64 to double
  %66 = fadd double %65, 2.000000e-05
  %67 = fptrunc double %66 to float
  store float %67, float* %1, align 4, !tbaa !10
  %68 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %71 = load i32, i32* %70, align 4
  %72 = srem i32 %69, %71
  store i32 %72, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem4, align 4
  %73 = load i8*, i8** %10, align 8
  %74 = load i8, i8* %73, align 1
  %75 = mul i8 %74, 2
  %76 = mul i8 %74, 2
  %77 = add i8 2, %76
  %78 = mul i8 %75, %77
  %79 = srem i8 %78, 4
  %80 = icmp eq i8 %79, 0
  %81 = mul i8 %74, %74
  %82 = add i8 %81, %74
  %83 = srem i8 %82, 2
  %84 = icmp eq i8 %83, 0
  %85 = add i64 %13, 2232133334390408118
  %86 = add i64 3180794674188248100, %13
  %87 = sub i64 %86, 948661339797839982
  %88 = or i64 %5, 6039907205194780603
  %89 = and i64 6039907205194780603, %5
  %90 = xor i64 6039907205194780603, %5
  %91 = or i64 %89, %90
  %92 = and i64 %9, 5140813661040090405
  %93 = xor i64 %9, -1
  %94 = or i64 -5140813661040090406, %93
  %95 = xor i64 %94, -1
  %96 = and i64 %95, -1
  %97 = xor i64 %85, %92
  %98 = xor i64 %97, -6119586471122236653
  %99 = xor i64 %98, %87
  %100 = xor i64 %99, %88
  %101 = xor i64 %100, %96
  %102 = xor i64 %101, %91
  %103 = or i64 %15, -6983793384630461875
  %104 = xor i64 %15, -1
  %105 = and i64 %104, 7402563453301696895
  %106 = and i64 %15, -7402563453301696896
  %107 = or i64 %105, %106
  %108 = xor i64 -454963795740658894, %107
  %109 = xor i64 %15, -1
  %110 = or i64 6983793384630461874, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = or i64 %108, %112
  %114 = and i64 %15, -4709087064893710775
  %115 = xor i64 %15, -1
  %116 = xor i64 -4709087064893710775, %115
  %117 = and i64 %116, -4709087064893710775
  %118 = xor i64 %114, %113
  %119 = xor i64 %118, 6742649679933241115
  %120 = xor i64 %119, %103
  %121 = xor i64 %120, %117
  %122 = mul i64 %102, %121
  %123 = trunc i64 %122 to i1
  %124 = xor i1 %84, %123
  %125 = xor i1 %80, %124
  %126 = and i1 %125, %80
  %127 = select i1 %126, i32 595012126, i32 595012126
  %128 = xor i32 %127, 0
  store i32 %128, i32* %2, align 4
  %129 = call i8** @bf777061424148142830(i32* %2)
  %130 = load i8*, i8** %129, align 8
  indirectbr i8* %130, [label %loopEnd, label %59]

131:                                              ; preds = %loopStart
  %.reload5 = load i32, i32* %.reg2mem4, align 4
  ret i32 %.reload5

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %132 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %132, align 4
  %133 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %133, align 4
  %134 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %134, align 4
  %135 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  %136 = add i64 %11, 5163096988358079804
  %137 = add i64 -7106035427087009434, %11
  %138 = sub i64 %137, 6177611658264462378
  %139 = and i64 %13, -8990970083981257620
  %140 = xor i64 %13, -1
  %141 = or i64 8990970083981257619, %140
  %142 = xor i64 %141, -1
  %143 = and i64 %142, -1
  %144 = and i64 %13, -3672449307866608216
  %145 = xor i64 %13, -1
  %146 = or i64 3672449307866608215, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = xor i64 %148, %138
  %150 = xor i64 %149, 8985053329361784209
  %151 = xor i64 %150, %136
  %152 = xor i64 %151, %139
  %153 = xor i64 %152, %143
  %154 = xor i64 %153, %144
  %155 = sext i32 %dispatcher1 to i64
  %156 = and i64 %155, 2176913422037314738
  %157 = xor i64 %155, -1
  %158 = xor i64 2176913422037314738, %157
  %159 = and i64 %158, 2176913422037314738
  %160 = add i64 %11, -5737791160190568632
  %161 = add i64 -7724063935508157983, %11
  %162 = add i64 %161, 1986272775317589351
  %163 = sext i32 %dispatcher1 to i64
  %164 = or i64 %163, -2005167414945517336
  %165 = and i64 -2005167414945517336, %163
  %166 = xor i64 -2005167414945517336, %163
  %167 = or i64 %165, %166
  %168 = xor i64 %159, %162
  %169 = xor i64 %168, 5251825941157372213
  %170 = xor i64 %169, %167
  %171 = xor i64 %170, %156
  %172 = xor i64 %171, %164
  %173 = xor i64 %172, %160
  %174 = mul i64 %154, %173
  %175 = trunc i64 %174 to i32
  store i32 %175, i32* %135, align 4
  %176 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %177 = load i32, i32* %176, align 4
  store i32 %177, i32* %dispatcher, align 4
  %178 = load i8*, i8** %6, align 8
  %179 = load i8, i8* %178, align 1
  %180 = mul i8 %179, 2
  %181 = mul i8 %179, 2
  %182 = add i8 24, %181
  %183 = add i8 %182, -22
  %184 = mul i8 %180, %183
  %185 = srem i8 %184, 4
  %186 = icmp eq i8 %185, 0
  %187 = mul i8 %179, %179
  %188 = add i8 %187, %179
  %189 = srem i8 %188, 2
  %190 = icmp eq i8 %189, 0
  %191 = and i64 %15, -833109561659982708
  %192 = xor i64 %15, -1
  %193 = xor i64 -833109561659982708, %192
  %194 = and i64 %193, -833109561659982708
  %195 = and i64 %11, -5791267979760371298
  %196 = xor i64 %11, -1
  %197 = or i64 5791267979760371297, %196
  %198 = xor i64 %197, -1
  %199 = and i64 %198, -1
  %200 = xor i64 %194, %195
  %201 = xor i64 %200, -5735342897483972613
  %202 = xor i64 %201, %199
  %203 = xor i64 %202, %191
  %204 = and i64 %9, -695804364968077040
  %205 = xor i64 %9, -1
  %206 = xor i64 -695804364968077040, %205
  %207 = and i64 %206, -695804364968077040
  %208 = or i64 %11, 6227880665003110571
  %209 = xor i64 %11, -1
  %210 = and i64 6227880665003110571, %209
  %211 = add i64 %210, %11
  %212 = xor i64 %208, %211
  %213 = xor i64 %212, %207
  %214 = xor i64 %213, %204
  %215 = xor i64 %214, 8495485938296075059
  %216 = mul i64 %203, %215
  %217 = trunc i64 %216 to i1
  %218 = xor i1 %190, %217
  %219 = xor i1 %186, %218
  %220 = and i1 %219, %186
  %221 = select i1 %220, i32 595012204, i32 595012275
  %222 = and i64 %15, -5605628236103172700
  %223 = or i64 5605628236103172699, %15
  %224 = sub i64 %223, 5605628236103172699
  %225 = sext i32 %dispatcher1 to i64
  %226 = or i64 %225, 459789149093644539
  %227 = xor i64 %225, -1
  %228 = and i64 %227, -6476080345568579784
  %229 = and i64 %225, 6476080345568579783
  %230 = or i64 %228, %229
  %231 = xor i64 -6899188111521044541, %230
  %232 = xor i64 %225, -1
  %233 = or i64 -459789149093644540, %232
  %234 = xor i64 %233, -1
  %235 = and i64 %234, -1
  %236 = or i64 %231, %235
  %237 = xor i64 -1690047474554516703, %224
  %238 = xor i64 %237, %226
  %239 = xor i64 %238, %222
  %240 = xor i64 %239, %236
  %241 = or i64 %5, -4560507073635445356
  %242 = xor i64 %5, -1
  %243 = and i64 %242, -8719458309550197204
  %244 = and i64 %5, 8719458309550197203
  %245 = or i64 %243, %244
  %246 = xor i64 5065300706595120056, %245
  %247 = xor i64 %5, -1
  %248 = or i64 4560507073635445355, %247
  %249 = xor i64 %248, -1
  %250 = and i64 %249, -1
  %251 = or i64 %246, %250
  %252 = and i64 %15, -5177737133695966022
  %253 = or i64 5177737133695966021, %15
  %254 = sub i64 %253, 5177737133695966021
  %255 = xor i64 %241, %251
  %256 = xor i64 %255, %252
  %257 = xor i64 %256, 6578708099949622011
  %258 = xor i64 %257, %254
  %259 = mul i64 %240, %258
  %260 = trunc i64 %259 to i32
  %261 = xor i32 %221, %260
  %262 = xor i32 %261, 1626463108
  store i32 %262, i32* %2, align 4
  %263 = call i8** @bf777061424148142830(i32* %2)
  %264 = load i8*, i8** %263, align 8
  indirectbr i8* %264, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %265 = load i8*, i8** %6, align 8
  %266 = load i8, i8* %265, align 1
  %267 = mul i8 %266, 2
  %268 = mul i8 %266, 2
  %269 = sub i8 0, %268
  %270 = sub i8 2, %269
  %271 = mul i8 %267, %270
  %272 = srem i8 %271, 4
  %273 = icmp eq i8 %272, 0
  %274 = mul i8 %266, %266
  %275 = add i8 %274, %266
  %276 = srem i8 %275, 2
  %277 = icmp eq i8 %276, 0
  %278 = or i1 %273, %277
  %279 = select i1 %278, i32 595012126, i32 595012126
  %280 = xor i32 %279, 0
  store i32 %280, i32* %2, align 4
  %281 = call i8** @bf777061424148142830(i32* %2)
  %282 = load i8*, i8** %281, align 8
  indirectbr i8* %282, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %59, %EntryBasicBlockSplit
  %283 = load i8*, i8** %14, align 8
  %284 = load i8, i8* %283, align 1
  %285 = and i8 %284, 1
  %286 = icmp eq i8 %285, 0
  %287 = mul i8 %284, %284
  %288 = add i8 %287, %284
  %289 = and i64 %9, 3705169607604120182
  %290 = or i64 -3705169607604120183, %9
  %291 = sub i64 %290, -3705169607604120183
  %292 = and i64 %11, 7473095517091581089
  %293 = xor i64 %11, -1
  %294 = or i64 -7473095517091581090, %293
  %295 = xor i64 %294, -1
  %296 = and i64 %295, -1
  %297 = add i64 %11, 1795328791809151563
  %298 = add i64 -4130945193517194805, %11
  %299 = add i64 %298, 5926273985326346368
  %300 = xor i64 %299, %291
  %301 = xor i64 %300, %297
  %302 = xor i64 %301, %292
  %303 = xor i64 %302, %296
  %304 = xor i64 %303, %289
  %305 = xor i64 %304, 6031678582869699411
  %306 = and i64 %15, -1400190281435603653
  %307 = xor i64 %15, -1
  %308 = or i64 1400190281435603652, %307
  %309 = xor i64 %308, -1
  %310 = and i64 %309, -1
  %311 = sext i32 %dispatcher1 to i64
  %312 = add i64 %311, 73531112313715923
  %313 = xor i64 73531112313715923, %311
  %314 = and i64 73531112313715923, %311
  %315 = mul i64 2, %314
  %316 = add i64 %313, %315
  %317 = xor i64 %312, %310
  %318 = xor i64 %317, 565668470265442961
  %319 = xor i64 %318, %316
  %320 = xor i64 %319, %306
  %321 = mul i64 %305, %320
  %322 = trunc i64 %321 to i8
  %323 = mul i8 %288, %322
  %324 = srem i8 %323, 2
  %325 = icmp eq i8 %324, 0
  %326 = or i1 %286, %325
  %327 = select i1 %326, i32 595012207, i32 595012204
  %328 = xor i32 %327, 3
  store i32 %328, i32* %2, align 4
  %329 = call i8** @bf777061424148142830(i32* %2)
  %330 = load i8*, i8** %329, align 8
  indirectbr i8* %330, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define i32 @render(float* %0, float* %1, i8* nocapture readonly %2, i64 %3) local_unnamed_addr #1 {
entry:
  %4 = or i64 %3, 5291852411597148252
  %5 = xor i64 %3, -1
  %6 = and i64 %5, 4193997601562650971
  %7 = and i64 %3, -4193997601562650972
  %8 = or i64 %6, %7
  %9 = xor i64 8305901198044674311, %8
  %10 = xor i64 %3, -1
  %11 = or i64 -5291852411597148253, %10
  %12 = xor i64 %11, -1
  %13 = and i64 %12, -1
  %14 = or i64 %9, %13
  %15 = or i64 %3, -2014956221277375126
  %16 = and i64 -2014956221277375126, %3
  %17 = xor i64 -2014956221277375126, %3
  %18 = or i64 %16, %17
  %19 = xor i64 %14, %15
  %20 = xor i64 %19, %18
  %21 = xor i64 %20, 6583526422269773357
  %22 = xor i64 %21, %4
  %23 = and i64 %3, 997132030477681120
  %24 = or i64 -997132030477681121, %3
  %25 = sub i64 %24, -997132030477681121
  %26 = add i64 %3, 6297167929750267587
  %27 = add i64 -6002497050968790324, %3
  %28 = add i64 %27, -6147079092990493705
  %29 = xor i64 %28, %26
  %30 = xor i64 %29, %23
  %31 = xor i64 %30, %25
  %32 = xor i64 %31, 3372334116827068837
  %33 = mul i64 %22, %32
  %34 = trunc i64 %33 to i32
  %35 = alloca i32, i32 %34, align 4
  %36 = call i64 @h11804894491772278134(i64 595012113)
  %37 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %36
  store i8* blockaddress(@render, %loopEnd), i8** %37, align 8
  %38 = call i64 @h11804894491772278134(i64 595012150)
  %39 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %38
  store i8* blockaddress(@render, %defaultSwitchBasicBlock), i8** %39, align 8
  %40 = call i64 @h11804894491772278134(i64 595012114)
  %41 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %40
  store i8* blockaddress(@render, %12411), i8** %41, align 8
  %42 = call i64 @h11804894491772278134(i64 595012124)
  %43 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %42
  store i8* blockaddress(@render, %BogusBasicBlock), i8** %43, align 8
  %44 = call i64 @h11804894491772278134(i64 595012149)
  %45 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %44
  store i8* blockaddress(@render, %12225), i8** %45, align 8
  %46 = call i64 @h11804894491772278134(i64 595012107)
  %47 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %46
  store i8* blockaddress(@render, %.loopexit), i8** %47, align 8
  %48 = call i64 @h11804894491772278134(i64 595012112)
  %49 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %48
  store i8* blockaddress(@render, %12130), i8** %49, align 8
  %50 = call i64 @h11804894491772278134(i64 595012142)
  %51 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %50
  store i8* blockaddress(@render, %12009), i8** %51, align 8
  %52 = call i64 @h11804894491772278134(i64 595012110)
  %53 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %52
  store i8* blockaddress(@render, %11636), i8** %53, align 8
  %54 = call i64 @h11804894491772278134(i64 595012152)
  %55 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %54
  store i8* blockaddress(@render, %codeRepl230), i8** %55, align 8
  %56 = call i64 @h11804894491772278134(i64 595012097)
  %57 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %56
  store i8* blockaddress(@render, %codeRepl228), i8** %57, align 8
  %58 = call i64 @h11804894491772278134(i64 595012144)
  %59 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %58
  store i8* blockaddress(@render, %10696), i8** %59, align 8
  %60 = add i64 %3, -7366490829376832982
  %61 = add i64 -5520783030017894737, %3
  %62 = sub i64 %61, 1845707799358938245
  %63 = or i64 %3, 1333883898371469382
  %64 = and i64 1333883898371469382, %3
  %65 = xor i64 1333883898371469382, %3
  %66 = or i64 %64, %65
  %67 = xor i64 %63, %60
  %68 = xor i64 %67, %66
  %69 = xor i64 %68, 9112052763454965273
  %70 = xor i64 %69, %62
  %71 = or i64 %3, -1119876211672725675
  %72 = xor i64 %3, -1
  %73 = and i64 -1119876211672725675, %72
  %74 = add i64 %73, %3
  %75 = and i64 %3, -6307400839635344719
  %76 = xor i64 %3, -1
  %77 = or i64 6307400839635344718, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = and i64 %3, 8030181734464012592
  %81 = or i64 -8030181734464012593, %3
  %82 = sub i64 %81, -8030181734464012593
  %83 = xor i64 %71, %79
  %84 = xor i64 %83, %75
  %85 = xor i64 %84, %74
  %86 = xor i64 %85, %80
  %87 = xor i64 %86, -44534504401169714
  %88 = xor i64 %87, %82
  %89 = mul i64 %70, %88
  %90 = call i64 @h11804894491772278134(i64 %89)
  %91 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %90
  store i8* blockaddress(@render, %10622), i8** %91, align 8
  %92 = call i64 @h11804894491772278134(i64 595012130)
  %93 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %92
  store i8* blockaddress(@render, %8926), i8** %93, align 8
  %94 = call i64 @h11804894491772278134(i64 595012125)
  %95 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %94
  store i8* blockaddress(@render, %10267), i8** %95, align 8
  %96 = call i64 @h11804894491772278134(i64 595012117)
  %97 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %96
  store i8* blockaddress(@render, %9386), i8** %97, align 8
  %98 = call i64 @h11804894491772278134(i64 595012115)
  %99 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %98
  store i8* blockaddress(@render, %codeRepl202), i8** %99, align 8
  %100 = call i64 @h11804894491772278134(i64 595012139)
  %101 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %100
  store i8* blockaddress(@render, %codeRepl191), i8** %101, align 8
  %102 = call i64 @h11804894491772278134(i64 595012121)
  %103 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %102
  store i8* blockaddress(@render, %9563), i8** %103, align 8
  %104 = call i64 @h11804894491772278134(i64 595012096)
  %105 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %104
  store i8* blockaddress(@render, %9365), i8** %105, align 8
  %106 = call i64 @h11804894491772278134(i64 595012127)
  %107 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %106
  store i8* blockaddress(@render, %codeRepl185), i8** %107, align 8
  %108 = call i64 @h11804894491772278134(i64 595012147)
  %109 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %108
  store i8* blockaddress(@render, %8673), i8** %109, align 8
  %110 = call i64 @h11804894491772278134(i64 595012143)
  %111 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %110
  store i8* blockaddress(@render, %11870), i8** %111, align 8
  %112 = call i64 @h11804894491772278134(i64 595012116)
  %113 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %112
  store i8* blockaddress(@render, %6850), i8** %113, align 8
  %114 = call i64 @h11804894491772278134(i64 595012136)
  %115 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %114
  store i8* blockaddress(@render, %11055), i8** %115, align 8
  %116 = call i64 @h11804894491772278134(i64 595012102)
  %117 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %116
  store i8* blockaddress(@render, %codeRepl), i8** %117, align 8
  %118 = call i64 @h11804894491772278134(i64 595012137)
  %119 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %118
  store i8* blockaddress(@render, %10491), i8** %119, align 8
  %120 = call i64 @h11804894491772278134(i64 595012132)
  %121 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %120
  store i8* blockaddress(@render, %codeRepl106), i8** %121, align 8
  %122 = and i64 %3, 7966107453493964609
  %123 = xor i64 %3, -1
  %124 = xor i64 7966107453493964609, %123
  %125 = and i64 %124, 7966107453493964609
  %126 = or i64 %3, 2166423861040554918
  %127 = and i64 2166423861040554918, %3
  %128 = xor i64 2166423861040554918, %3
  %129 = or i64 %127, %128
  %130 = and i64 %3, -8691724044388925127
  %131 = xor i64 %3, -1
  %132 = or i64 8691724044388925126, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = xor i64 %126, %134
  %136 = xor i64 %135, %130
  %137 = xor i64 %136, 4552487946355757007
  %138 = xor i64 %137, %129
  %139 = xor i64 %138, %122
  %140 = xor i64 %139, %125
  %141 = or i64 %3, -4124832485036117111
  %142 = and i64 -4124832485036117111, %3
  %143 = xor i64 -4124832485036117111, %3
  %144 = or i64 %142, %143
  %145 = or i64 %3, -4475671602843554902
  %146 = xor i64 %3, -1
  %147 = and i64 %146, 5581920590314238281
  %148 = and i64 %3, -5581920590314238282
  %149 = or i64 %147, %148
  %150 = xor i64 -8316513193506989341, %149
  %151 = xor i64 %3, -1
  %152 = or i64 4475671602843554901, %151
  %153 = xor i64 %152, -1
  %154 = and i64 %153, -1
  %155 = or i64 %150, %154
  %156 = or i64 %3, 4197039208070300424
  %157 = and i64 4197039208070300424, %3
  %158 = xor i64 4197039208070300424, %3
  %159 = or i64 %157, %158
  %160 = xor i64 %156, %141
  %161 = xor i64 %160, %155
  %162 = xor i64 %161, %159
  %163 = xor i64 %162, 2418212599955452687
  %164 = xor i64 %163, %144
  %165 = xor i64 %164, %145
  %166 = mul i64 %140, %165
  %167 = call i64 @h11804894491772278134(i64 %166)
  %168 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %167
  store i8* blockaddress(@render, %7875), i8** %168, align 8
  %169 = call i64 @h11804894491772278134(i64 595012120)
  %170 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %169
  store i8* blockaddress(@render, %EntryBasicBlockSplit), i8** %170, align 8
  %171 = call i64 @h11804894491772278134(i64 595012106)
  %172 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %171
  store i8* blockaddress(@render, %codeRepl26), i8** %172, align 8
  %173 = call i64 @h11804894491772278134(i64 595012128)
  %174 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %173
  store i8* blockaddress(@render, %codeRepl209), i8** %174, align 8
  %175 = call i64 @h11804894491772278134(i64 595012108)
  %176 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %175
  store i8* blockaddress(@render, %codeRepl217), i8** %176, align 8
  %177 = call i64 @h11804894491772278134(i64 595012148)
  %178 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %177
  store i8* blockaddress(@render, %9981), i8** %178, align 8
  %179 = call i64 @h11804894491772278134(i64 595012131)
  %180 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %179
  store i8* blockaddress(@render, %7350), i8** %180, align 8
  %181 = call i64 @h11804894491772278134(i64 595012100)
  %182 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %181
  store i8* blockaddress(@render, %8123), i8** %182, align 8
  %183 = or i64 %3, -1214020765920738024
  %184 = xor i64 %3, -1
  %185 = and i64 -1214020765920738024, %184
  %186 = add i64 %185, %3
  %187 = or i64 %3, -5436534723584084220
  %188 = xor i64 %3, -1
  %189 = and i64 -5436534723584084220, %188
  %190 = add i64 %189, %3
  %191 = xor i64 7835443251253053123, %183
  %192 = xor i64 %191, %190
  %193 = xor i64 %192, %186
  %194 = xor i64 %193, %187
  %195 = and i64 %3, -442767706452818658
  %196 = or i64 442767706452818657, %3
  %197 = sub i64 %196, 442767706452818657
  %198 = add i64 %3, -4793614296887416654
  %199 = sub i64 0, %3
  %200 = add i64 4793614296887416654, %199
  %201 = sub i64 0, %200
  %202 = and i64 %3, -7165413576023611068
  %203 = or i64 7165413576023611067, %3
  %204 = sub i64 %203, 7165413576023611067
  %205 = xor i64 %198, %204
  %206 = xor i64 %205, %197
  %207 = xor i64 %206, %195
  %208 = xor i64 %207, -4757906730563658815
  %209 = xor i64 %208, %201
  %210 = xor i64 %209, %202
  %211 = mul i64 %194, %210
  %212 = call i64 @h11804894491772278134(i64 %211)
  %213 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %212
  store i8* blockaddress(@render, %codeRepl186), i8** %213, align 8
  %214 = add i64 %3, -7329139362873216062
  %215 = add i64 -3838635269662936717, %3
  %216 = add i64 %215, -3490504093210279345
  %217 = or i64 %3, 393957304488954864
  %218 = xor i64 %3, -1
  %219 = and i64 %218, 2184316917784439030
  %220 = and i64 %3, -2184316917784439031
  %221 = or i64 %219, %220
  %222 = xor i64 1956777467248567046, %221
  %223 = xor i64 %3, -1
  %224 = or i64 -393957304488954865, %223
  %225 = xor i64 %224, -1
  %226 = and i64 %225, -1
  %227 = or i64 %222, %226
  %228 = xor i64 %227, %217
  %229 = xor i64 %228, -8550543929869688279
  %230 = xor i64 %229, %216
  %231 = xor i64 %230, %214
  %232 = or i64 %3, 5705637691647040060
  %233 = xor i64 %3, -1
  %234 = and i64 5705637691647040060, %233
  %235 = add i64 %234, %3
  %236 = and i64 %3, 2080291696418082742
  %237 = xor i64 %3, -1
  %238 = or i64 -2080291696418082743, %237
  %239 = xor i64 %238, -1
  %240 = and i64 %239, -1
  %241 = and i64 %3, -851905617117744575
  %242 = or i64 851905617117744574, %3
  %243 = sub i64 %242, 851905617117744574
  %244 = xor i64 -5449163204110462801, %243
  %245 = xor i64 %244, %240
  %246 = xor i64 %245, %235
  %247 = xor i64 %246, %232
  %248 = xor i64 %247, %236
  %249 = xor i64 %248, %241
  %250 = mul i64 %231, %249
  %251 = call i64 @h11804894491772278134(i64 %250)
  %252 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %251
  store i8* blockaddress(@render, %7102), i8** %252, align 8
  %253 = call i64 @h11804894491772278134(i64 595012146)
  %254 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %253
  store i8* blockaddress(@render, %7819), i8** %254, align 8
  %255 = add i64 %3, 8407764145663074731
  %256 = add i64 -8459827617416606206, %3
  %257 = add i64 %256, -1579152310629870679
  %258 = and i64 %3, -5804167193123751050
  %259 = or i64 5804167193123751049, %3
  %260 = sub i64 %259, 5804167193123751049
  %261 = xor i64 %257, %255
  %262 = xor i64 %261, %260
  %263 = xor i64 %262, %258
  %264 = xor i64 %263, -6854406294251155781
  %265 = add i64 %3, 8550340226624321748
  %266 = sub i64 0, %3
  %267 = sub i64 8550340226624321748, %266
  %268 = add i64 %3, 5709251646789821061
  %269 = sub i64 0, %3
  %270 = sub i64 5709251646789821061, %269
  %271 = xor i64 %270, %268
  %272 = xor i64 %271, %265
  %273 = xor i64 %272, %267
  %274 = xor i64 %273, -2141239852113012221
  %275 = mul i64 %264, %274
  %276 = call i64 @h11804894491772278134(i64 %275)
  %277 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %276
  store i8* blockaddress(@render, %7762), i8** %277, align 8
  %278 = call i64 @h11804894491772278134(i64 595012133)
  %279 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %278
  store i8* blockaddress(@render, %codeRepl1), i8** %279, align 8
  %280 = call i64 @h11804894491772278134(i64 595012123)
  %281 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %280
  store i8* blockaddress(@render, %9920), i8** %281, align 8
  %282 = or i64 %3, 1894707794679197373
  %283 = and i64 1894707794679197373, %3
  %284 = xor i64 1894707794679197373, %3
  %285 = or i64 %283, %284
  %286 = or i64 %3, -6138370084074018910
  %287 = xor i64 %3, -1
  %288 = and i64 %287, -6856592159479389555
  %289 = and i64 %3, 6856592159479389554
  %290 = or i64 %288, %289
  %291 = xor i64 722930185537750319, %290
  %292 = xor i64 %3, -1
  %293 = or i64 6138370084074018909, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %294, -1
  %296 = or i64 %291, %295
  %297 = xor i64 7738480049555236805, %285
  %298 = xor i64 %297, %282
  %299 = xor i64 %298, %296
  %300 = xor i64 %299, %286
  %301 = or i64 %3, -4049383950803539386
  %302 = xor i64 %3, -1
  %303 = and i64 -4049383950803539386, %302
  %304 = add i64 %303, %3
  %305 = or i64 %3, -8288849126529055428
  %306 = xor i64 %3, -1
  %307 = and i64 -8288849126529055428, %306
  %308 = add i64 %307, %3
  %309 = or i64 %3, 6107199167728989324
  %310 = and i64 6107199167728989324, %3
  %311 = xor i64 6107199167728989324, %3
  %312 = or i64 %310, %311
  %313 = xor i64 %308, %312
  %314 = xor i64 %313, -8803529534460269109
  %315 = xor i64 %314, %304
  %316 = xor i64 %315, %305
  %317 = xor i64 %316, %301
  %318 = xor i64 %317, %309
  %319 = mul i64 %300, %318
  %320 = call i64 @h11804894491772278134(i64 %319)
  %321 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %320
  store i8* blockaddress(@render, %6391), i8** %321, align 8
  %322 = call i64 @h11804894491772278134(i64 595012111)
  %323 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %322
  store i8* blockaddress(@render, %7610), i8** %323, align 8
  %324 = call i64 @h11804894491772278134(i64 595012098)
  %325 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %324
  store i8* blockaddress(@render, %codeRepl3), i8** %325, align 8
  %326 = call i64 @h11804894491772278134(i64 595012109)
  %327 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %326
  store i8* blockaddress(@render, %6024), i8** %327, align 8
  %328 = call i64 @h11804894491772278134(i64 595012140)
  %329 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %328
  store i8* blockaddress(@render, %loopStart), i8** %329, align 8
  %330 = call i64 @h11804894491772278134(i64 595012105)
  %331 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %330
  store i8* blockaddress(@render, %6291), i8** %331, align 8
  %332 = call i64 @h11804894491772278134(i64 595012101)
  %333 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %332
  store i8* blockaddress(@render, %6500), i8** %333, align 8
  %334 = call i64 @h11804894491772278134(i64 595012122)
  %335 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %334
  store i8* blockaddress(@render, %10799), i8** %335, align 8
  %336 = call i64 @h11804894491772278134(i64 595012141)
  %337 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %336
  store i8* blockaddress(@render, %5636), i8** %337, align 8
  %338 = call i64 @h11804894491772278134(i64 595012119)
  %339 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %338
  store i8* blockaddress(@render, %7403), i8** %339, align 8
  %340 = and i64 %3, 8304827304368674071
  %341 = xor i64 %3, -1
  %342 = xor i64 8304827304368674071, %341
  %343 = and i64 %342, 8304827304368674071
  %344 = add i64 %3, 8646670026105269335
  %345 = xor i64 8646670026105269335, %3
  %346 = and i64 8646670026105269335, %3
  %347 = mul i64 2, %346
  %348 = add i64 %345, %347
  %349 = or i64 %3, 4086106743984983051
  %350 = and i64 4086106743984983051, %3
  %351 = xor i64 4086106743984983051, %3
  %352 = or i64 %350, %351
  %353 = xor i64 %348, %352
  %354 = xor i64 %353, %343
  %355 = xor i64 %354, %349
  %356 = xor i64 %355, %344
  %357 = xor i64 %356, 1872285110878948299
  %358 = xor i64 %357, %340
  %359 = add i64 %3, 804016228619902437
  %360 = xor i64 804016228619902437, %3
  %361 = and i64 804016228619902437, %3
  %362 = mul i64 2, %361
  %363 = add i64 %360, %362
  %364 = or i64 %3, 5889269008381555147
  %365 = xor i64 %3, -1
  %366 = and i64 %365, -5222524944762273170
  %367 = and i64 %3, 5222524944762273169
  %368 = or i64 %366, %367
  %369 = xor i64 -1855694366323461211, %368
  %370 = xor i64 %3, -1
  %371 = or i64 -5889269008381555148, %370
  %372 = xor i64 %371, -1
  %373 = and i64 %372, -1
  %374 = or i64 %369, %373
  %375 = add i64 %3, 8175192083547402289
  %376 = add i64 3414598637829299622, %3
  %377 = sub i64 %376, -4760593445718102667
  %378 = xor i64 %374, %363
  %379 = xor i64 %378, %377
  %380 = xor i64 %379, %359
  %381 = xor i64 %380, -2023428388610341454
  %382 = xor i64 %381, %364
  %383 = xor i64 %382, %375
  %384 = mul i64 %358, %383
  %385 = call i64 @h11804894491772278134(i64 %384)
  %386 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %385
  store i8* blockaddress(@render, %6736), i8** %386, align 8
  %387 = call i64 @h11804894491772278134(i64 595012118)
  %388 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %387
  store i8* blockaddress(@render, %5739), i8** %388, align 8
  %389 = call i64 @h11804894491772278134(i64 595012138)
  %390 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %389
  store i8* blockaddress(@render, %11701), i8** %390, align 8
  %391 = call i64 @h11804894491772278134(i64 595012104)
  %392 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %391
  store i8* blockaddress(@render, %10087), i8** %392, align 8
  %393 = call i64 @h11804894491772278134(i64 595012135)
  %394 = getelementptr [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %393
  store i8* blockaddress(@render, %.preheader), i8** %394, align 8
  %.reg2mem216 = alloca i32, align 4
  %395 = add i64 %3, 8904457320283927526
  %396 = add i64 6671003706491807278, %3
  %397 = add i64 %396, 2233453613792120248
  %398 = or i64 %3, -6809243675298330094
  %399 = and i64 -6809243675298330094, %3
  %400 = xor i64 -6809243675298330094, %3
  %401 = or i64 %399, %400
  %402 = or i64 %3, -4993317545132161817
  %403 = xor i64 %3, -1
  %404 = and i64 %403, 5472812585871068132
  %405 = and i64 %3, -5472812585871068133
  %406 = or i64 %404, %405
  %407 = xor i64 -1060744870566703357, %406
  %408 = xor i64 %3, -1
  %409 = or i64 4993317545132161816, %408
  %410 = xor i64 %409, -1
  %411 = and i64 %410, -1
  %412 = or i64 %407, %411
  %413 = xor i64 %397, %401
  %414 = xor i64 %413, -3835470751851377605
  %415 = xor i64 %414, %395
  %416 = xor i64 %415, %402
  %417 = xor i64 %416, %398
  %418 = xor i64 %417, %412
  %419 = and i64 %3, -5737860371393705906
  %420 = or i64 5737860371393705905, %3
  %421 = sub i64 %420, 5737860371393705905
  %422 = and i64 %3, -6217893786414734906
  %423 = or i64 6217893786414734905, %3
  %424 = sub i64 %423, 6217893786414734905
  %425 = and i64 %3, -8040596195175260236
  %426 = xor i64 %3, -1
  %427 = xor i64 -8040596195175260236, %426
  %428 = and i64 %427, -8040596195175260236
  %429 = xor i64 %421, %419
  %430 = xor i64 %429, -5514314783010099981
  %431 = xor i64 %430, %422
  %432 = xor i64 %431, %425
  %433 = xor i64 %432, %428
  %434 = xor i64 %433, %424
  %435 = mul i64 %418, %434
  %436 = trunc i64 %435 to i32
  %.ph.reg2mem = alloca i32, i32 %436, align 4
  %.reg2mem212 = alloca i32, align 4
  %.reg2mem210 = alloca i64, align 8
  %.reg2mem208 = alloca i1, align 1
  %437 = or i64 %3, 6852345822838142904
  %438 = xor i64 %3, -1
  %439 = and i64 6852345822838142904, %438
  %440 = add i64 %439, %3
  %441 = add i64 %3, -5068232959710712920
  %442 = sub i64 0, %3
  %443 = sub i64 -5068232959710712920, %442
  %444 = xor i64 5977403879533797607, %441
  %445 = xor i64 %444, %443
  %446 = xor i64 %445, %440
  %447 = xor i64 %446, %437
  %448 = and i64 %3, 1318111152743973582
  %449 = xor i64 %3, -1
  %450 = xor i64 1318111152743973582, %449
  %451 = and i64 %450, 1318111152743973582
  %452 = and i64 %3, 1841818025490195586
  %453 = or i64 -1841818025490195587, %3
  %454 = sub i64 %453, -1841818025490195587
  %455 = or i64 %3, 7654456774805203170
  %456 = and i64 7654456774805203170, %3
  %457 = xor i64 7654456774805203170, %3
  %458 = or i64 %456, %457
  %459 = xor i64 %452, %451
  %460 = xor i64 %459, %455
  %461 = xor i64 %460, %458
  %462 = xor i64 %461, %448
  %463 = xor i64 %462, %454
  %464 = xor i64 %463, 1797565318754448087
  %465 = mul i64 %447, %464
  %466 = trunc i64 %465 to i32
  %.reg2mem204 = alloca i1, i32 %466, align 1
  %.reg2mem202 = alloca i1, align 1
  %.reg2mem200 = alloca i1, align 1
  %.reg2mem195 = alloca i1, align 1
  %.reg2mem193 = alloca i1, align 1
  %.reg2mem191 = alloca i1, align 1
  %.reg2mem188 = alloca i1, align 1
  %.reg2mem186 = alloca i1, align 1
  %467 = and i64 %3, 439039502701680707
  %468 = xor i64 %3, -1
  %469 = xor i64 439039502701680707, %468
  %470 = and i64 %469, 439039502701680707
  %471 = and i64 %3, 4088153593948510799
  %472 = xor i64 %3, -1
  %473 = or i64 -4088153593948510800, %472
  %474 = xor i64 %473, -1
  %475 = and i64 %474, -1
  %476 = xor i64 %475, %470
  %477 = xor i64 %476, %471
  %478 = xor i64 %477, 8954516812051936607
  %479 = xor i64 %478, %467
  %480 = and i64 %3, 3394925245970070811
  %481 = xor i64 %3, -1
  %482 = or i64 -3394925245970070812, %481
  %483 = xor i64 %482, -1
  %484 = and i64 %483, -1
  %485 = or i64 %3, 8736569281371683061
  %486 = and i64 8736569281371683061, %3
  %487 = xor i64 8736569281371683061, %3
  %488 = or i64 %486, %487
  %489 = and i64 %3, -4719051054356709388
  %490 = xor i64 %3, -1
  %491 = xor i64 -4719051054356709388, %490
  %492 = and i64 %491, -4719051054356709388
  %493 = xor i64 %485, %484
  %494 = xor i64 %493, %489
  %495 = xor i64 %494, %492
  %496 = xor i64 %495, -6273305453670226273
  %497 = xor i64 %496, %488
  %498 = xor i64 %497, %480
  %499 = mul i64 %479, %498
  %500 = trunc i64 %499 to i32
  %.reg2mem184 = alloca i1, i32 %500, align 1
  %.reg2mem182 = alloca i1, align 1
  %.reg2mem180 = alloca i64, align 8
  %.reg2mem178 = alloca i64, align 8
  %.reg2mem176 = alloca i1, align 1
  %.reg2mem174 = alloca i1, align 1
  %.reg2mem172 = alloca i64, align 8
  %.reg2mem170 = alloca i64, align 8
  %.reg2mem168 = alloca i64, align 8
  %501 = and i64 %3, 7442124633125669290
  %502 = xor i64 %3, -1
  %503 = xor i64 7442124633125669290, %502
  %504 = and i64 %503, 7442124633125669290
  %505 = or i64 %3, 8204837912308920296
  %506 = xor i64 %3, -1
  %507 = and i64 8204837912308920296, %506
  %508 = add i64 %507, %3
  %509 = xor i64 %504, -5074199233875239717
  %510 = xor i64 %509, %508
  %511 = xor i64 %510, %505
  %512 = xor i64 %511, %501
  %513 = add i64 %3, 2934362322699110837
  %514 = add i64 -5342802186823651564, %3
  %515 = sub i64 %514, -8277164509522762401
  %516 = add i64 %3, -5670094366208382698
  %517 = add i64 -4617494485020612300, %3
  %518 = sub i64 %517, 1052599881187770398
  %519 = xor i64 %513, %518
  %520 = xor i64 %519, -825835654135939245
  %521 = xor i64 %520, %515
  %522 = xor i64 %521, %516
  %523 = mul i64 %512, %522
  %524 = trunc i64 %523 to i32
  %.reg2mem166 = alloca i1, i32 %524, align 1
  %.reg2mem164 = alloca i64, align 8
  %.reg2mem162 = alloca i64, align 8
  %.reg2mem160 = alloca i64, align 8
  %.reg2mem132 = alloca i64, align 8
  %525 = add i64 %3, 1333708803783758852
  %526 = and i64 1333708803783758852, %3
  %527 = or i64 1333708803783758852, %3
  %528 = add i64 %526, %527
  %529 = add i64 %3, 6659578694191124873
  %530 = xor i64 6659578694191124873, %3
  %531 = and i64 6659578694191124873, %3
  %532 = mul i64 2, %531
  %533 = add i64 %530, %532
  %534 = add i64 %3, -5846890493195087951
  %535 = sub i64 0, %3
  %536 = add i64 5846890493195087951, %535
  %537 = sub i64 0, %536
  %538 = xor i64 -6396289300292256437, %533
  %539 = xor i64 %538, %529
  %540 = xor i64 %539, %528
  %541 = xor i64 %540, %525
  %542 = xor i64 %541, %534
  %543 = xor i64 %542, %537
  %544 = or i64 %3, -8949702351029322965
  %545 = and i64 -8949702351029322965, %3
  %546 = xor i64 -8949702351029322965, %3
  %547 = or i64 %545, %546
  %548 = add i64 %3, 1343561048101272040
  %549 = and i64 1343561048101272040, %3
  %550 = or i64 1343561048101272040, %3
  %551 = add i64 %549, %550
  %552 = xor i64 %547, %544
  %553 = xor i64 %552, -7638365568283777949
  %554 = xor i64 %553, %551
  %555 = xor i64 %554, %548
  %556 = mul i64 %543, %555
  %557 = trunc i64 %556 to i32
  %.reg2mem130 = alloca i1, i32 %557, align 1
  %.reg2mem125 = alloca i64, align 8
  %558 = add i64 %3, -8026929691499743636
  %559 = xor i64 -8026929691499743636, %3
  %560 = and i64 -8026929691499743636, %3
  %561 = mul i64 2, %560
  %562 = add i64 %559, %561
  %563 = or i64 %3, 8721662745553987343
  %564 = xor i64 %3, -1
  %565 = and i64 %564, 6747343887328571466
  %566 = and i64 %3, -6747343887328571467
  %567 = or i64 %565, %566
  %568 = xor i64 2642191909633627973, %567
  %569 = xor i64 %3, -1
  %570 = or i64 -8721662745553987344, %569
  %571 = xor i64 %570, -1
  %572 = and i64 %571, -1
  %573 = or i64 %568, %572
  %574 = xor i64 %573, %563
  %575 = xor i64 %574, -8187581635273347809
  %576 = xor i64 %575, %558
  %577 = xor i64 %576, %562
  %578 = and i64 %3, 2870773378671143200
  %579 = xor i64 %3, -1
  %580 = xor i64 2870773378671143200, %579
  %581 = and i64 %580, 2870773378671143200
  %582 = or i64 %3, 7021114389501144252
  %583 = and i64 7021114389501144252, %3
  %584 = xor i64 7021114389501144252, %3
  %585 = or i64 %583, %584
  %586 = xor i64 %581, %582
  %587 = xor i64 %586, 4152543914369879775
  %588 = xor i64 %587, %585
  %589 = xor i64 %588, %578
  %590 = mul i64 %577, %589
  %591 = trunc i64 %590 to i32
  %.reload233.reg2mem = alloca i1, i32 %591, align 1
  %.reload224.reg2mem = alloca i64, align 8
  %.reload223.reg2mem = alloca i64, align 8
  %.reload222.reg2mem = alloca i32, align 4
  %.reg2mem122 = alloca i32, align 4
  %.reg2mem118 = alloca i32, align 4
  %.reg2mem114 = alloca i64, align 8
  %.reload214.reg2mem = alloca i1, align 1
  %592 = or i64 %3, -3445648058461516129
  %593 = xor i64 %3, -1
  %594 = and i64 -3445648058461516129, %593
  %595 = add i64 %594, %3
  %596 = or i64 %3, -7557885139757739713
  %597 = xor i64 %3, -1
  %598 = and i64 %597, 401716567751876645
  %599 = and i64 %3, -401716567751876646
  %600 = or i64 %598, %599
  %601 = xor i64 -7885855083215965926, %600
  %602 = xor i64 %3, -1
  %603 = or i64 7557885139757739712, %602
  %604 = xor i64 %603, -1
  %605 = and i64 %604, -1
  %606 = or i64 %601, %605
  %607 = and i64 %3, -2524762627095116816
  %608 = xor i64 %3, -1
  %609 = or i64 2524762627095116815, %608
  %610 = xor i64 %609, -1
  %611 = and i64 %610, -1
  %612 = xor i64 7736903650478923735, %607
  %613 = xor i64 %612, %606
  %614 = xor i64 %613, %611
  %615 = xor i64 %614, %596
  %616 = xor i64 %615, %595
  %617 = xor i64 %616, %592
  %618 = or i64 %3, -5833565816889811908
  %619 = xor i64 %3, -1
  %620 = and i64 -5833565816889811908, %619
  %621 = add i64 %620, %3
  %622 = add i64 %3, 6288055724360183894
  %623 = add i64 3814686128330212672, %3
  %624 = add i64 %623, 2473369596029971222
  %625 = or i64 %3, 8960067709693246420
  %626 = xor i64 %3, -1
  %627 = and i64 %626, 2195143831369792224
  %628 = and i64 %3, -2195143831369792225
  %629 = or i64 %627, %628
  %630 = xor i64 7074655506347393332, %629
  %631 = xor i64 %3, -1
  %632 = or i64 -8960067709693246421, %631
  %633 = xor i64 %632, -1
  %634 = and i64 %633, -1
  %635 = or i64 %630, %634
  %636 = xor i64 %621, %618
  %637 = xor i64 %636, %625
  %638 = xor i64 %637, %624
  %639 = xor i64 %638, %635
  %640 = xor i64 %639, -9108732143400762393
  %641 = xor i64 %640, %622
  %642 = mul i64 %617, %641
  %643 = trunc i64 %642 to i32
  %.reload213.reg2mem = alloca i1, i32 %643, align 1
  %.reload198.reg2mem = alloca i1, align 1
  %.reload197.reg2mem = alloca i64, align 8
  %.reload196.reg2mem = alloca i64, align 8
  %.reload189.reg2mem = alloca i64, align 8
  %644 = and i64 %3, -7605249389189352327
  %645 = xor i64 %3, -1
  %646 = xor i64 -7605249389189352327, %645
  %647 = and i64 %646, -7605249389189352327
  %648 = or i64 %3, 6342387517057519337
  %649 = and i64 6342387517057519337, %3
  %650 = xor i64 6342387517057519337, %3
  %651 = or i64 %649, %650
  %652 = or i64 %3, -5233859800866329437
  %653 = xor i64 %3, -1
  %654 = and i64 %653, 1723976748470321298
  %655 = and i64 %3, -1723976748470321299
  %656 = or i64 %654, %655
  %657 = xor i64 -6867616103641568207, %656
  %658 = xor i64 %3, -1
  %659 = or i64 5233859800866329436, %658
  %660 = xor i64 %659, -1
  %661 = and i64 %660, -1
  %662 = or i64 %657, %661
  %663 = xor i64 %648, %647
  %664 = xor i64 %663, %652
  %665 = xor i64 %664, %644
  %666 = xor i64 %665, %651
  %667 = xor i64 %666, %662
  %668 = xor i64 %667, -1745994588971582509
  %669 = and i64 %3, 505708733646159503
  %670 = or i64 -505708733646159504, %3
  %671 = sub i64 %670, -505708733646159504
  %672 = or i64 %3, 4108053146432180898
  %673 = and i64 4108053146432180898, %3
  %674 = xor i64 4108053146432180898, %3
  %675 = or i64 %673, %674
  %676 = and i64 %3, 4952550101764977475
  %677 = xor i64 %3, -1
  %678 = xor i64 4952550101764977475, %677
  %679 = and i64 %678, 4952550101764977475
  %680 = xor i64 %672, -7162034615412534181
  %681 = xor i64 %680, %671
  %682 = xor i64 %681, %675
  %683 = xor i64 %682, %676
  %684 = xor i64 %683, %669
  %685 = xor i64 %684, %679
  %686 = mul i64 %668, %685
  %687 = trunc i64 %686 to i32
  %.reg2mem112 = alloca i1, i32 %687, align 1
  %.reg2mem110 = alloca i1, align 1
  %688 = and i64 %3, -3971203259365615187
  %689 = xor i64 %3, -1
  %690 = xor i64 -3971203259365615187, %689
  %691 = and i64 %690, -3971203259365615187
  %692 = and i64 %3, 6164524377261073629
  %693 = xor i64 %3, -1
  %694 = xor i64 6164524377261073629, %693
  %695 = and i64 %694, 6164524377261073629
  %696 = xor i64 7843157295748022197, %691
  %697 = xor i64 %696, %695
  %698 = xor i64 %697, %692
  %699 = xor i64 %698, %688
  %700 = or i64 %3, 5443817071445015958
  %701 = and i64 5443817071445015958, %3
  %702 = xor i64 5443817071445015958, %3
  %703 = or i64 %701, %702
  %704 = add i64 %3, 4760112488735404638
  %705 = sub i64 0, %3
  %706 = add i64 -4760112488735404638, %705
  %707 = sub i64 0, %706
  %708 = xor i64 %700, 1746044132266423965
  %709 = xor i64 %708, %707
  %710 = xor i64 %709, %704
  %711 = xor i64 %710, %703
  %712 = mul i64 %699, %711
  %713 = trunc i64 %712 to i32
  %.reg2mem108 = alloca i1, i32 %713, align 1
  %.reg2mem106 = alloca i1, align 1
  %714 = add i64 %3, 8022645518226432840
  %715 = add i64 3881571229446280411, %3
  %716 = add i64 %715, 4141074288780152429
  %717 = and i64 %3, -2109416552304641658
  %718 = xor i64 %3, -1
  %719 = xor i64 -2109416552304641658, %718
  %720 = and i64 %719, -2109416552304641658
  %721 = xor i64 %714, 3846580259437615853
  %722 = xor i64 %721, %717
  %723 = xor i64 %722, %720
  %724 = xor i64 %723, %716
  %725 = add i64 %3, 4418495181369213848
  %726 = xor i64 4418495181369213848, %3
  %727 = and i64 4418495181369213848, %3
  %728 = mul i64 2, %727
  %729 = add i64 %726, %728
  %730 = add i64 %3, -2806084283945741640
  %731 = and i64 -2806084283945741640, %3
  %732 = or i64 -2806084283945741640, %3
  %733 = add i64 %731, %732
  %734 = or i64 %3, 628353976530970756
  %735 = and i64 628353976530970756, %3
  %736 = xor i64 628353976530970756, %3
  %737 = or i64 %735, %736
  %738 = xor i64 2570921326054298341, %729
  %739 = xor i64 %738, %733
  %740 = xor i64 %739, %725
  %741 = xor i64 %740, %737
  %742 = xor i64 %741, %730
  %743 = xor i64 %742, %734
  %744 = mul i64 %724, %743
  %745 = trunc i64 %744 to i32
  %.reg2mem104 = alloca i1, i32 %745, align 1
  %.reg2mem102 = alloca i1, align 1
  %746 = add i64 %3, -2051453492826393017
  %747 = xor i64 -2051453492826393017, %3
  %748 = and i64 -2051453492826393017, %3
  %749 = mul i64 2, %748
  %750 = add i64 %747, %749
  %751 = or i64 %3, -2636003664599584536
  %752 = and i64 -2636003664599584536, %3
  %753 = xor i64 -2636003664599584536, %3
  %754 = or i64 %752, %753
  %755 = and i64 %3, 5235875877381066785
  %756 = or i64 -5235875877381066786, %3
  %757 = sub i64 %756, -5235875877381066786
  %758 = xor i64 %754, 5312188836411979395
  %759 = xor i64 %758, %751
  %760 = xor i64 %759, %750
  %761 = xor i64 %760, %755
  %762 = xor i64 %761, %746
  %763 = xor i64 %762, %757
  %764 = or i64 %3, -2629847645493179215
  %765 = xor i64 %3, -1
  %766 = and i64 %765, 6700785558488767683
  %767 = and i64 %3, -6700785558488767684
  %768 = or i64 %766, %767
  %769 = xor i64 -8683749831397535630, %768
  %770 = xor i64 %3, -1
  %771 = or i64 2629847645493179214, %770
  %772 = xor i64 %771, -1
  %773 = and i64 %772, -1
  %774 = or i64 %769, %773
  %775 = or i64 %3, -5831603864472203817
  %776 = xor i64 %3, -1
  %777 = and i64 %776, 1643873289006249803
  %778 = and i64 %3, -1643873289006249804
  %779 = or i64 %777, %778
  %780 = xor i64 -5061538946221163876, %779
  %781 = xor i64 %3, -1
  %782 = or i64 5831603864472203816, %781
  %783 = xor i64 %782, -1
  %784 = and i64 %783, -1
  %785 = or i64 %780, %784
  %786 = and i64 %3, -5792368680278503347
  %787 = or i64 5792368680278503346, %3
  %788 = sub i64 %787, 5792368680278503346
  %789 = xor i64 %788, %774
  %790 = xor i64 %789, %786
  %791 = xor i64 %790, %764
  %792 = xor i64 %791, %775
  %793 = xor i64 %792, %785
  %794 = xor i64 %793, -7166094912876656597
  %795 = mul i64 %763, %794
  %796 = trunc i64 %795 to i32
  %.reg2mem100 = alloca i1, i32 %796, align 1
  %797 = and i64 %3, 7279220007550814181
  %798 = or i64 -7279220007550814182, %3
  %799 = sub i64 %798, -7279220007550814182
  %800 = or i64 %3, 5097333989254553502
  %801 = and i64 5097333989254553502, %3
  %802 = xor i64 5097333989254553502, %3
  %803 = or i64 %801, %802
  %804 = xor i64 %803, %797
  %805 = xor i64 %804, %800
  %806 = xor i64 %805, -8312506133329863955
  %807 = xor i64 %806, %799
  %808 = add i64 %3, -328865011000161647
  %809 = and i64 -328865011000161647, %3
  %810 = or i64 -328865011000161647, %3
  %811 = add i64 %809, %810
  %812 = or i64 %3, -8383584683330154860
  %813 = and i64 -8383584683330154860, %3
  %814 = xor i64 -8383584683330154860, %3
  %815 = or i64 %813, %814
  %816 = xor i64 7538425683596956389, %808
  %817 = xor i64 %816, %812
  %818 = xor i64 %817, %811
  %819 = xor i64 %818, %815
  %820 = mul i64 %807, %819
  %821 = trunc i64 %820 to i32
  %.reg2mem98 = alloca i1, i32 %821, align 1
  %.reload18.reg2mem = alloca i1, align 1
  %822 = add i64 %3, -2610105163876878848
  %823 = add i64 4866060719794971800, %3
  %824 = sub i64 %823, 7476165883671850648
  %825 = and i64 %3, -13860618692875881
  %826 = xor i64 %3, -1
  %827 = or i64 13860618692875880, %826
  %828 = xor i64 %827, -1
  %829 = and i64 %828, -1
  %830 = xor i64 %825, %822
  %831 = xor i64 %830, -8606799854592453789
  %832 = xor i64 %831, %829
  %833 = xor i64 %832, %824
  %834 = or i64 %3, -1630348017070028232
  %835 = xor i64 %3, -1
  %836 = and i64 -1630348017070028232, %835
  %837 = add i64 %836, %3
  %838 = and i64 %3, -6255720054302708312
  %839 = xor i64 %3, -1
  %840 = xor i64 -6255720054302708312, %839
  %841 = and i64 %840, -6255720054302708312
  %842 = xor i64 %834, %838
  %843 = xor i64 %842, 8827406275566372427
  %844 = xor i64 %843, %837
  %845 = xor i64 %844, %841
  %846 = mul i64 %833, %845
  %847 = trunc i64 %846 to i32
  %.reload17.reg2mem = alloca i1, i32 %847, align 1
  %.reload16.reg2mem = alloca i1, align 1
  %.reload15.reg2mem = alloca i1, align 1
  %.reload14.reg2mem = alloca i1, align 1
  %848 = and i64 %3, 6228219340929184924
  %849 = xor i64 %3, -1
  %850 = or i64 -6228219340929184925, %849
  %851 = xor i64 %850, -1
  %852 = and i64 %851, -1
  %853 = or i64 %3, -3093615949562591154
  %854 = xor i64 %3, -1
  %855 = and i64 %854, 6090622207820715224
  %856 = and i64 %3, -6090622207820715225
  %857 = or i64 %855, %856
  %858 = xor i64 -9108679711880078186, %857
  %859 = xor i64 %3, -1
  %860 = or i64 3093615949562591153, %859
  %861 = xor i64 %860, -1
  %862 = and i64 %861, -1
  %863 = or i64 %858, %862
  %864 = xor i64 %863, %853
  %865 = xor i64 %864, %852
  %866 = xor i64 %865, 6464718879906004813
  %867 = xor i64 %866, %848
  %868 = add i64 %3, -892796257929954115
  %869 = sub i64 0, %3
  %870 = sub i64 -892796257929954115, %869
  %871 = add i64 %3, 3669669276558268159
  %872 = and i64 3669669276558268159, %3
  %873 = or i64 3669669276558268159, %3
  %874 = add i64 %872, %873
  %875 = xor i64 %870, %868
  %876 = xor i64 %875, -6135704826821586555
  %877 = xor i64 %876, %874
  %878 = xor i64 %877, %871
  %879 = mul i64 %867, %878
  %880 = trunc i64 %879 to i32
  %.reload13.reg2mem = alloca i1, i32 %880, align 1
  %.reload12.reg2mem = alloca i1, align 1
  %.reg2mem87 = alloca i64, align 8
  %.reg2mem84 = alloca i1, align 1
  %.reg2mem81 = alloca i1, align 1
  %.reg2mem48 = alloca i1, align 1
  %.reg2mem45 = alloca i64, align 8
  %.reg2mem39 = alloca i1, align 1
  %.reg2mem37 = alloca i1, align 1
  %.reg2mem35 = alloca i64, align 8
  %.reg2mem30 = alloca i64, align 8
  %.reg2mem27 = alloca i1, align 1
  %.reg2mem21 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem = alloca i1, align 1
  %.reload.reg2mem = alloca i64, align 8
  %.loc.reg2mem = alloca i64*, align 8
  %lookupTable = alloca [58 x i32], align 4
  %881 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %881, align 4
  %882 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %882, align 4
  %883 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %883, align 4
  %884 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %884, align 4
  %885 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %885, align 4
  %886 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %886, align 4
  %887 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %887, align 4
  %888 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %888, align 4
  %889 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %889, align 4
  %890 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 9
  %891 = add i64 %3, -4048403487309689522
  %892 = xor i64 -4048403487309689522, %3
  %893 = and i64 -4048403487309689522, %3
  %894 = mul i64 2, %893
  %895 = add i64 %892, %894
  %896 = and i64 %3, -9121793888259614202
  %897 = or i64 9121793888259614201, %3
  %898 = sub i64 %897, 9121793888259614201
  %899 = add i64 %3, 4798208905032432617
  %900 = and i64 4798208905032432617, %3
  %901 = or i64 4798208905032432617, %3
  %902 = add i64 %900, %901
  %903 = xor i64 %898, %902
  %904 = xor i64 %903, %895
  %905 = xor i64 %904, %899
  %906 = xor i64 %905, -6824656072377918747
  %907 = xor i64 %906, %891
  %908 = xor i64 %907, %896
  %909 = and i64 %3, 4083698138007805593
  %910 = or i64 -4083698138007805594, %3
  %911 = sub i64 %910, -4083698138007805594
  %912 = or i64 %3, -4988735299707063495
  %913 = xor i64 %3, -1
  %914 = and i64 -4988735299707063495, %913
  %915 = add i64 %914, %3
  %916 = xor i64 %912, %911
  %917 = xor i64 %916, %915
  %918 = xor i64 %917, %909
  %919 = xor i64 %918, -4022903665270623858
  %920 = mul i64 %908, %919
  %921 = trunc i64 %920 to i32
  store i32 %921, i32* %890, align 4
  %922 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %922, align 4
  %923 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %923, align 4
  %924 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %924, align 4
  %925 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %925, align 4
  %926 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %926, align 4
  %927 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %927, align 4
  %928 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %928, align 4
  %929 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %929, align 4
  %930 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %930, align 4
  %931 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %931, align 4
  %932 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %932, align 4
  %933 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %933, align 4
  %934 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %934, align 4
  %935 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %936 = add i64 %3, 8178781998994566154
  %937 = xor i64 8178781998994566154, %3
  %938 = and i64 8178781998994566154, %3
  %939 = mul i64 2, %938
  %940 = add i64 %937, %939
  %941 = or i64 %3, 3052793452082432739
  %942 = xor i64 %3, -1
  %943 = and i64 3052793452082432739, %942
  %944 = add i64 %943, %3
  %945 = xor i64 %944, %940
  %946 = xor i64 %945, %936
  %947 = xor i64 %946, 1330077912037811671
  %948 = xor i64 %947, %941
  %949 = add i64 %3, 570664006437018667
  %950 = sub i64 0, %3
  %951 = sub i64 570664006437018667, %950
  %952 = or i64 %3, -2461001782154381197
  %953 = xor i64 %3, -1
  %954 = and i64 %953, 829950379842835984
  %955 = and i64 %3, -829950379842835985
  %956 = or i64 %954, %955
  %957 = xor i64 -3000434663124750749, %956
  %958 = xor i64 %3, -1
  %959 = or i64 2461001782154381196, %958
  %960 = xor i64 %959, -1
  %961 = and i64 %960, -1
  %962 = or i64 %957, %961
  %963 = xor i64 %962, %952
  %964 = xor i64 %963, %949
  %965 = xor i64 %964, %951
  %966 = xor i64 %965, -738038197935188468
  %967 = mul i64 %948, %966
  %968 = trunc i64 %967 to i32
  store i32 %968, i32* %935, align 4
  %969 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  store i32 21, i32* %969, align 4
  %970 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %970, align 4
  %971 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %971, align 4
  %972 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %972, align 4
  %973 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %974 = or i64 %3, 3094396067669293665
  %975 = xor i64 %3, -1
  %976 = and i64 3094396067669293665, %975
  %977 = add i64 %976, %3
  %978 = and i64 %3, 7902761162255678803
  %979 = or i64 -7902761162255678804, %3
  %980 = sub i64 %979, -7902761162255678804
  %981 = and i64 %3, -4221713302376144168
  %982 = or i64 4221713302376144167, %3
  %983 = sub i64 %982, 4221713302376144167
  %984 = xor i64 %977, %978
  %985 = xor i64 %984, 8258712531692790149
  %986 = xor i64 %985, %981
  %987 = xor i64 %986, %983
  %988 = xor i64 %987, %974
  %989 = xor i64 %988, %980
  %990 = and i64 %3, -791977930594583109
  %991 = xor i64 %3, -1
  %992 = xor i64 -791977930594583109, %991
  %993 = and i64 %992, -791977930594583109
  %994 = or i64 %3, 5562799621860487569
  %995 = and i64 5562799621860487569, %3
  %996 = xor i64 5562799621860487569, %3
  %997 = or i64 %995, %996
  %998 = xor i64 %993, -806653332689019259
  %999 = xor i64 %998, %997
  %1000 = xor i64 %999, %994
  %1001 = xor i64 %1000, %990
  %1002 = mul i64 %989, %1001
  %1003 = trunc i64 %1002 to i32
  store i32 %1003, i32* %973, align 4
  %1004 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 29
  %1005 = or i64 %3, -7353873144427866248
  %1006 = and i64 -7353873144427866248, %3
  %1007 = xor i64 -7353873144427866248, %3
  %1008 = or i64 %1006, %1007
  %1009 = and i64 %3, 8598503264891453675
  %1010 = xor i64 %3, -1
  %1011 = or i64 -8598503264891453676, %1010
  %1012 = xor i64 %1011, -1
  %1013 = and i64 %1012, -1
  %1014 = xor i64 %1013, %1009
  %1015 = xor i64 %1014, -6694704852499470781
  %1016 = xor i64 %1015, %1005
  %1017 = xor i64 %1016, %1008
  %1018 = and i64 %3, -3300758799057670048
  %1019 = xor i64 %3, -1
  %1020 = or i64 3300758799057670047, %1019
  %1021 = xor i64 %1020, -1
  %1022 = and i64 %1021, -1
  %1023 = add i64 %3, 1272644471737211087
  %1024 = xor i64 1272644471737211087, %3
  %1025 = and i64 1272644471737211087, %3
  %1026 = mul i64 2, %1025
  %1027 = add i64 %1024, %1026
  %1028 = xor i64 %1022, %1018
  %1029 = xor i64 %1028, %1027
  %1030 = xor i64 %1029, 4793931908925179614
  %1031 = xor i64 %1030, %1023
  %1032 = mul i64 %1017, %1031
  %1033 = trunc i64 %1032 to i32
  store i32 %1033, i32* %1004, align 4
  %1034 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 30
  %1035 = add i64 %3, 2451992106218514535
  %1036 = xor i64 2451992106218514535, %3
  %1037 = and i64 2451992106218514535, %3
  %1038 = mul i64 2, %1037
  %1039 = add i64 %1036, %1038
  %1040 = add i64 %3, -6587272638277728401
  %1041 = add i64 -389415343844073672, %3
  %1042 = add i64 %1041, -6197857294433654729
  %1043 = add i64 %3, 617525195830285463
  %1044 = add i64 -4612052311224222863, %3
  %1045 = sub i64 %1044, -5229577507054508326
  %1046 = xor i64 -6332031666287609053, %1039
  %1047 = xor i64 %1046, %1042
  %1048 = xor i64 %1047, %1043
  %1049 = xor i64 %1048, %1045
  %1050 = xor i64 %1049, %1040
  %1051 = xor i64 %1050, %1035
  %1052 = add i64 %3, 4459144636872725288
  %1053 = sub i64 0, %3
  %1054 = add i64 -4459144636872725288, %1053
  %1055 = sub i64 0, %1054
  %1056 = add i64 %3, -3463627119813314171
  %1057 = add i64 -8733913278930390019, %3
  %1058 = sub i64 %1057, -5270286159117075848
  %1059 = xor i64 %1052, %1055
  %1060 = xor i64 %1059, -6330905633632464215
  %1061 = xor i64 %1060, %1056
  %1062 = xor i64 %1061, %1058
  %1063 = mul i64 %1051, %1062
  %1064 = trunc i64 %1063 to i32
  store i32 %1064, i32* %1034, align 4
  %1065 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %1065, align 4
  %1066 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %1066, align 4
  %1067 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %1067, align 4
  %1068 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %1068, align 4
  %1069 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %1069, align 4
  %1070 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %1070, align 4
  %1071 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %1071, align 4
  %1072 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 38
  store i32 35, i32* %1072, align 4
  %1073 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 39
  store i32 36, i32* %1073, align 4
  %1074 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 40
  store i32 37, i32* %1074, align 4
  %1075 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 41
  store i32 38, i32* %1075, align 4
  %1076 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 42
  %1077 = add i64 %3, -8519760558257582977
  %1078 = xor i64 -8519760558257582977, %3
  %1079 = and i64 -8519760558257582977, %3
  %1080 = mul i64 2, %1079
  %1081 = add i64 %1078, %1080
  %1082 = add i64 %3, -8461931306820985544
  %1083 = and i64 -8461931306820985544, %3
  %1084 = or i64 -8461931306820985544, %3
  %1085 = add i64 %1083, %1084
  %1086 = xor i64 -5559451439012233883, %1077
  %1087 = xor i64 %1086, %1081
  %1088 = xor i64 %1087, %1085
  %1089 = xor i64 %1088, %1082
  %1090 = and i64 %3, 8036221585596097731
  %1091 = or i64 -8036221585596097732, %3
  %1092 = sub i64 %1091, -8036221585596097732
  %1093 = and i64 %3, 8187791467884587062
  %1094 = or i64 -8187791467884587063, %3
  %1095 = sub i64 %1094, -8187791467884587063
  %1096 = xor i64 %1095, %1092
  %1097 = xor i64 %1096, %1093
  %1098 = xor i64 %1097, %1090
  %1099 = xor i64 %1098, -6251323359611566949
  %1100 = mul i64 %1089, %1099
  %1101 = trunc i64 %1100 to i32
  store i32 %1101, i32* %1076, align 4
  %1102 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 43
  store i32 40, i32* %1102, align 4
  %1103 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 44
  store i32 41, i32* %1103, align 4
  %1104 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 45
  store i32 42, i32* %1104, align 4
  %1105 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 46
  %1106 = and i64 %3, 285852502115606486
  %1107 = xor i64 %3, -1
  %1108 = xor i64 285852502115606486, %1107
  %1109 = and i64 %1108, 285852502115606486
  %1110 = or i64 %3, 1725142557128592690
  %1111 = xor i64 %3, -1
  %1112 = and i64 %1111, -7416277417215248441
  %1113 = and i64 %3, 7416277417215248440
  %1114 = or i64 %1112, %1113
  %1115 = xor i64 -8150135470262764811, %1114
  %1116 = xor i64 %3, -1
  %1117 = or i64 -1725142557128592691, %1116
  %1118 = xor i64 %1117, -1
  %1119 = and i64 %1118, -1
  %1120 = or i64 %1115, %1119
  %1121 = xor i64 %1120, -9193570560344318191
  %1122 = xor i64 %1121, %1109
  %1123 = xor i64 %1122, %1110
  %1124 = xor i64 %1123, %1106
  %1125 = add i64 %3, -7716820210478019472
  %1126 = sub i64 0, %3
  %1127 = add i64 7716820210478019472, %1126
  %1128 = sub i64 0, %1127
  %1129 = or i64 %3, -1906714555313574494
  %1130 = and i64 -1906714555313574494, %3
  %1131 = xor i64 -1906714555313574494, %3
  %1132 = or i64 %1130, %1131
  %1133 = or i64 %3, 3043180414682490672
  %1134 = and i64 3043180414682490672, %3
  %1135 = xor i64 3043180414682490672, %3
  %1136 = or i64 %1134, %1135
  %1137 = xor i64 %1132, %1129
  %1138 = xor i64 %1137, %1136
  %1139 = xor i64 %1138, %1133
  %1140 = xor i64 %1139, %1125
  %1141 = xor i64 %1140, %1128
  %1142 = xor i64 %1141, 6377151494877471611
  %1143 = mul i64 %1124, %1142
  %1144 = trunc i64 %1143 to i32
  store i32 %1144, i32* %1105, align 4
  %1145 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 47
  %1146 = add i64 %3, -5271043023619263465
  %1147 = sub i64 0, %3
  %1148 = add i64 5271043023619263465, %1147
  %1149 = sub i64 0, %1148
  %1150 = add i64 %3, -5484807205423296315
  %1151 = sub i64 0, %3
  %1152 = add i64 5484807205423296315, %1151
  %1153 = sub i64 0, %1152
  %1154 = and i64 %3, 4427515684754408933
  %1155 = xor i64 %3, -1
  %1156 = or i64 -4427515684754408934, %1155
  %1157 = xor i64 %1156, -1
  %1158 = and i64 %1157, -1
  %1159 = xor i64 %1158, %1154
  %1160 = xor i64 %1159, -4679611139054885533
  %1161 = xor i64 %1160, %1153
  %1162 = xor i64 %1161, %1149
  %1163 = xor i64 %1162, %1146
  %1164 = xor i64 %1163, %1150
  %1165 = or i64 %3, 3354462800509841393
  %1166 = xor i64 %3, -1
  %1167 = and i64 %1166, 4883061557303280231
  %1168 = and i64 %3, -4883061557303280232
  %1169 = or i64 %1167, %1168
  %1170 = xor i64 7874944967805447574, %1169
  %1171 = xor i64 %3, -1
  %1172 = or i64 -3354462800509841394, %1171
  %1173 = xor i64 %1172, -1
  %1174 = and i64 %1173, -1
  %1175 = or i64 %1170, %1174
  %1176 = and i64 %3, -910644934506958927
  %1177 = xor i64 %3, -1
  %1178 = xor i64 -910644934506958927, %1177
  %1179 = and i64 %1178, -910644934506958927
  %1180 = xor i64 %1165, %1179
  %1181 = xor i64 %1180, %1175
  %1182 = xor i64 %1181, 1036194977064860900
  %1183 = xor i64 %1182, %1176
  %1184 = mul i64 %1164, %1183
  %1185 = trunc i64 %1184 to i32
  store i32 %1185, i32* %1145, align 4
  %1186 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 48
  store i32 45, i32* %1186, align 4
  %1187 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 49
  %1188 = or i64 %3, 2742969246026528867
  %1189 = xor i64 %3, -1
  %1190 = and i64 2742969246026528867, %1189
  %1191 = add i64 %1190, %3
  %1192 = add i64 %3, -8654800329782463950
  %1193 = sub i64 0, %3
  %1194 = add i64 8654800329782463950, %1193
  %1195 = sub i64 0, %1194
  %1196 = and i64 %3, 4366916493843688649
  %1197 = xor i64 %3, -1
  %1198 = xor i64 4366916493843688649, %1197
  %1199 = and i64 %1198, 4366916493843688649
  %1200 = xor i64 %1191, %1192
  %1201 = xor i64 %1200, -2441920718052828515
  %1202 = xor i64 %1201, %1188
  %1203 = xor i64 %1202, %1199
  %1204 = xor i64 %1203, %1195
  %1205 = xor i64 %1204, %1196
  %1206 = and i64 %3, 5560040938131704896
  %1207 = or i64 -5560040938131704897, %3
  %1208 = sub i64 %1207, -5560040938131704897
  %1209 = and i64 %3, 481955694583264966
  %1210 = or i64 -481955694583264967, %3
  %1211 = sub i64 %1210, -481955694583264967
  %1212 = xor i64 -4645116948962395514, %1211
  %1213 = xor i64 %1212, %1209
  %1214 = xor i64 %1213, %1208
  %1215 = xor i64 %1214, %1206
  %1216 = mul i64 %1205, %1215
  %1217 = trunc i64 %1216 to i32
  store i32 %1217, i32* %1187, align 4
  %1218 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 50
  store i32 47, i32* %1218, align 4
  %1219 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 51
  store i32 48, i32* %1219, align 4
  %1220 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 52
  store i32 49, i32* %1220, align 4
  %1221 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 53
  store i32 50, i32* %1221, align 4
  %1222 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 54
  store i32 51, i32* %1222, align 4
  %1223 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 55
  %1224 = or i64 %3, 2031256944387473995
  %1225 = xor i64 %3, -1
  %1226 = and i64 2031256944387473995, %1225
  %1227 = add i64 %1226, %3
  %1228 = and i64 %3, 826898191566586227
  %1229 = xor i64 %3, -1
  %1230 = xor i64 826898191566586227, %1229
  %1231 = and i64 %1230, 826898191566586227
  %1232 = xor i64 5099529528174371161, %1227
  %1233 = xor i64 %1232, %1228
  %1234 = xor i64 %1233, %1224
  %1235 = xor i64 %1234, %1231
  %1236 = and i64 %3, 6397825609641895375
  %1237 = or i64 -6397825609641895376, %3
  %1238 = sub i64 %1237, -6397825609641895376
  %1239 = and i64 %3, 3351839684653904164
  %1240 = or i64 -3351839684653904165, %3
  %1241 = sub i64 %1240, -3351839684653904165
  %1242 = and i64 %3, 5795449055464075421
  %1243 = xor i64 %3, -1
  %1244 = xor i64 5795449055464075421, %1243
  %1245 = and i64 %1244, 5795449055464075421
  %1246 = xor i64 %1239, %1245
  %1247 = xor i64 %1246, 4271387469021554516
  %1248 = xor i64 %1247, %1236
  %1249 = xor i64 %1248, %1241
  %1250 = xor i64 %1249, %1242
  %1251 = xor i64 %1250, %1238
  %1252 = mul i64 %1235, %1251
  %1253 = trunc i64 %1252 to i32
  store i32 %1253, i32* %1223, align 4
  %1254 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 56
  store i32 53, i32* %1254, align 4
  %1255 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  store i32 54, i32* %1255, align 4
  %1256 = alloca i64, align 8
  %1257 = alloca i64, align 8
  %1258 = add i64 %3, 46606296581421779
  %1259 = add i64 -2833201093246738399, %3
  %1260 = add i64 %1259, 2879807389828160178
  %1261 = add i64 %3, -4915848802534969915
  %1262 = sub i64 0, %3
  %1263 = sub i64 -4915848802534969915, %1262
  %1264 = and i64 %3, -4626643287921382524
  %1265 = xor i64 %3, -1
  %1266 = or i64 4626643287921382523, %1265
  %1267 = xor i64 %1266, -1
  %1268 = and i64 %1267, -1
  %1269 = xor i64 %1264, %1263
  %1270 = xor i64 %1269, %1268
  %1271 = xor i64 %1270, %1261
  %1272 = xor i64 %1271, %1260
  %1273 = xor i64 %1272, -2234574677725017865
  %1274 = xor i64 %1273, %1258
  %1275 = add i64 %3, -6530704761909121177
  %1276 = sub i64 0, %3
  %1277 = add i64 6530704761909121177, %1276
  %1278 = sub i64 0, %1277
  %1279 = or i64 %3, -269712008921558437
  %1280 = xor i64 %3, -1
  %1281 = and i64 -269712008921558437, %1280
  %1282 = add i64 %1281, %3
  %1283 = or i64 %3, 8642990879076499139
  %1284 = xor i64 %3, -1
  %1285 = and i64 8642990879076499139, %1284
  %1286 = add i64 %1285, %3
  %1287 = xor i64 %1279, %1278
  %1288 = xor i64 %1287, %1286
  %1289 = xor i64 %1288, %1275
  %1290 = xor i64 %1289, %1283
  %1291 = xor i64 %1290, %1282
  %1292 = xor i64 %1291, 0
  %1293 = mul i64 %1274, %1292
  %1294 = trunc i64 %1293 to i1
  %1295 = or i64 %3, -2030259361846620778
  %1296 = xor i64 %3, -1
  %1297 = and i64 -2030259361846620778, %1296
  %1298 = add i64 %1297, %3
  %1299 = or i64 %3, 4972758380220015492
  %1300 = xor i64 %3, -1
  %1301 = and i64 4972758380220015492, %1300
  %1302 = add i64 %1301, %3
  %1303 = or i64 %3, -2359498872113268560
  %1304 = xor i64 %3, -1
  %1305 = and i64 %1304, -1195248866688802086
  %1306 = and i64 %3, 1195248866688802085
  %1307 = or i64 %1305, %1306
  %1308 = xor i64 3470304145734605418, %1307
  %1309 = xor i64 %3, -1
  %1310 = or i64 2359498872113268559, %1309
  %1311 = xor i64 %1310, -1
  %1312 = and i64 %1311, -1
  %1313 = or i64 %1308, %1312
  %1314 = xor i64 %1303, %1298
  %1315 = xor i64 %1314, -4231788213757733513
  %1316 = xor i64 %1315, %1313
  %1317 = xor i64 %1316, %1299
  %1318 = xor i64 %1317, %1302
  %1319 = xor i64 %1318, %1295
  %1320 = and i64 %3, 8489797439000051370
  %1321 = xor i64 %3, -1
  %1322 = or i64 -8489797439000051371, %1321
  %1323 = xor i64 %1322, -1
  %1324 = and i64 %1323, -1
  %1325 = and i64 %3, 2316706160388085502
  %1326 = xor i64 %3, -1
  %1327 = xor i64 2316706160388085502, %1326
  %1328 = and i64 %1327, 2316706160388085502
  %1329 = xor i64 %1325, %1320
  %1330 = xor i64 %1329, %1328
  %1331 = xor i64 %1330, 0
  %1332 = xor i64 %1331, %1324
  %1333 = mul i64 %1319, %1332
  %1334 = and i64 %3, -3955325918503979369
  %1335 = or i64 3955325918503979368, %3
  %1336 = sub i64 %1335, 3955325918503979368
  %1337 = or i64 %3, 2947576392365468213
  %1338 = xor i64 %3, -1
  %1339 = and i64 %1338, 541588074827590551
  %1340 = and i64 %3, -541588074827590552
  %1341 = or i64 %1339, %1340
  %1342 = xor i64 3414852633598017954, %1341
  %1343 = xor i64 %3, -1
  %1344 = or i64 -2947576392365468214, %1343
  %1345 = xor i64 %1344, -1
  %1346 = and i64 %1345, -1
  %1347 = or i64 %1342, %1346
  %1348 = and i64 %3, -7637656706909035132
  %1349 = or i64 7637656706909035131, %3
  %1350 = sub i64 %1349, 7637656706909035131
  %1351 = xor i64 6382321819007262189, %1334
  %1352 = xor i64 %1351, %1350
  %1353 = xor i64 %1352, %1337
  %1354 = xor i64 %1353, %1347
  %1355 = xor i64 %1354, %1348
  %1356 = xor i64 %1355, %1336
  %1357 = or i64 %3, -7916582127423511696
  %1358 = xor i64 %3, -1
  %1359 = and i64 -7916582127423511696, %1358
  %1360 = add i64 %1359, %3
  %1361 = or i64 %3, -8540257281234892016
  %1362 = xor i64 %3, -1
  %1363 = and i64 %1362, 8696603715098256845
  %1364 = and i64 %3, -8696603715098256846
  %1365 = or i64 %1363, %1364
  %1366 = xor i64 -1023897935382106403, %1365
  %1367 = xor i64 %3, -1
  %1368 = or i64 8540257281234892015, %1367
  %1369 = xor i64 %1368, -1
  %1370 = and i64 %1369, -1
  %1371 = or i64 %1366, %1370
  %1372 = or i64 %3, 3293059105748467022
  %1373 = xor i64 %3, -1
  %1374 = and i64 3293059105748467022, %1373
  %1375 = add i64 %1374, %3
  %1376 = xor i64 %1357, %1360
  %1377 = xor i64 %1376, 0
  %1378 = xor i64 %1377, %1361
  %1379 = xor i64 %1378, %1371
  %1380 = xor i64 %1379, %1375
  %1381 = xor i64 %1380, %1372
  %1382 = mul i64 %1356, %1381
  %1383 = add i64 %3, -7400935173780212131
  %1384 = and i64 -7400935173780212131, %3
  %1385 = or i64 -7400935173780212131, %3
  %1386 = add i64 %1384, %1385
  %1387 = or i64 %3, 3501406886483717470
  %1388 = xor i64 %3, -1
  %1389 = and i64 %1388, 1779741846162632479
  %1390 = and i64 %3, -1779741846162632480
  %1391 = or i64 %1389, %1390
  %1392 = xor i64 2892884106471539265, %1391
  %1393 = xor i64 %3, -1
  %1394 = or i64 -3501406886483717471, %1393
  %1395 = xor i64 %1394, -1
  %1396 = and i64 %1395, -1
  %1397 = or i64 %1392, %1396
  %1398 = or i64 %3, -4828352333046358091
  %1399 = and i64 -4828352333046358091, %3
  %1400 = xor i64 -4828352333046358091, %3
  %1401 = or i64 %1399, %1400
  %1402 = xor i64 %1387, %1397
  %1403 = xor i64 %1402, 7378639828335798421
  %1404 = xor i64 %1403, %1383
  %1405 = xor i64 %1404, %1398
  %1406 = xor i64 %1405, %1386
  %1407 = xor i64 %1406, %1401
  %1408 = add i64 %3, 5049854842026067820
  %1409 = and i64 5049854842026067820, %3
  %1410 = or i64 5049854842026067820, %3
  %1411 = add i64 %1409, %1410
  %1412 = or i64 %3, 5554118195628494853
  %1413 = xor i64 %3, -1
  %1414 = and i64 5554118195628494853, %1413
  %1415 = add i64 %1414, %3
  %1416 = or i64 %3, -3946007222671569980
  %1417 = and i64 -3946007222671569980, %3
  %1418 = xor i64 -3946007222671569980, %3
  %1419 = or i64 %1417, %1418
  %1420 = xor i64 %1416, %1408
  %1421 = xor i64 %1420, %1412
  %1422 = xor i64 %1421, %1411
  %1423 = xor i64 %1422, %1419
  %1424 = xor i64 %1423, %1415
  %1425 = xor i64 %1424, 0
  %1426 = mul i64 %1407, %1425
  %1427 = trunc i64 %1426 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537075, i64* %1257, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %1294, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %1333, i64 %1382, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %1427, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1428 = load i64, i64* %1257, align 8
  %1429 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %1428
  store i8* bitcast (i1 (i64, i64*)* @render..split to i8*), i8** %1429, align 8
  %1430 = alloca i64, align 8
  %1431 = and i64 %3, -5671118202658629859
  %1432 = xor i64 %3, -1
  %1433 = xor i64 -5671118202658629859, %1432
  %1434 = and i64 %1433, -5671118202658629859
  %1435 = or i64 %3, -2695056432676526473
  %1436 = xor i64 %3, -1
  %1437 = and i64 %1436, -5588283503299287046
  %1438 = and i64 %3, 5588283503299287045
  %1439 = or i64 %1437, %1438
  %1440 = xor i64 7560226246312100237, %1439
  %1441 = xor i64 %3, -1
  %1442 = or i64 2695056432676526472, %1441
  %1443 = xor i64 %1442, -1
  %1444 = and i64 %1443, -1
  %1445 = or i64 %1440, %1444
  %1446 = and i64 %3, 5071103921393875985
  %1447 = xor i64 %3, -1
  %1448 = or i64 -5071103921393875986, %1447
  %1449 = xor i64 %1448, -1
  %1450 = and i64 %1449, -1
  %1451 = xor i64 %1435, %1445
  %1452 = xor i64 %1451, %1431
  %1453 = xor i64 %1452, %1450
  %1454 = xor i64 %1453, %1446
  %1455 = xor i64 %1454, 3183879807276208311
  %1456 = xor i64 %1455, %1434
  %1457 = add i64 %3, -4407462268039801051
  %1458 = add i64 8256944923108403388, %3
  %1459 = sub i64 %1458, -5782336882561347177
  %1460 = add i64 %3, -4557837165357871726
  %1461 = and i64 -4557837165357871726, %3
  %1462 = or i64 -4557837165357871726, %3
  %1463 = add i64 %1461, %1462
  %1464 = or i64 %3, -338289127760853304
  %1465 = xor i64 %3, -1
  %1466 = and i64 -338289127760853304, %1465
  %1467 = add i64 %1466, %3
  %1468 = xor i64 %1467, %1457
  %1469 = xor i64 %1468, %1463
  %1470 = xor i64 %1469, %1464
  %1471 = xor i64 %1470, %1460
  %1472 = xor i64 %1471, %1459
  %1473 = xor i64 %1472, 0
  %1474 = mul i64 %1456, %1473
  %1475 = trunc i64 %1474 to i1
  %1476 = add i64 %3, 8040112503569390430
  %1477 = sub i64 0, %3
  %1478 = add i64 -8040112503569390430, %1477
  %1479 = sub i64 0, %1478
  %1480 = or i64 %3, -5003647579946390300
  %1481 = xor i64 %3, -1
  %1482 = and i64 %1481, -8936734267734611767
  %1483 = and i64 %3, 8936734267734611766
  %1484 = or i64 %1482, %1483
  %1485 = xor i64 4140266564552442925, %1484
  %1486 = xor i64 %3, -1
  %1487 = or i64 5003647579946390299, %1486
  %1488 = xor i64 %1487, -1
  %1489 = and i64 %1488, -1
  %1490 = or i64 %1485, %1489
  %1491 = and i64 %3, 4476106619515525862
  %1492 = or i64 -4476106619515525863, %3
  %1493 = sub i64 %1492, -4476106619515525863
  %1494 = xor i64 %1479, %1490
  %1495 = xor i64 %1494, %1480
  %1496 = xor i64 %1495, %1491
  %1497 = xor i64 %1496, %1476
  %1498 = xor i64 %1497, %1493
  %1499 = xor i64 %1498, 6970287355165662237
  %1500 = or i64 %3, -4338284909971690763
  %1501 = xor i64 %3, -1
  %1502 = and i64 %1501, -650977158564161595
  %1503 = and i64 %3, 650977158564161594
  %1504 = or i64 %1502, %1503
  %1505 = xor i64 3835962307734732080, %1504
  %1506 = xor i64 %3, -1
  %1507 = or i64 4338284909971690762, %1506
  %1508 = xor i64 %1507, -1
  %1509 = and i64 %1508, -1
  %1510 = or i64 %1505, %1509
  %1511 = and i64 %3, 6709567139466775820
  %1512 = xor i64 %3, -1
  %1513 = or i64 -6709567139466775821, %1512
  %1514 = xor i64 %1513, -1
  %1515 = and i64 %1514, -1
  %1516 = xor i64 %1515, %1511
  %1517 = xor i64 %1516, %1500
  %1518 = xor i64 %1517, %1510
  %1519 = xor i64 %1518, 0
  %1520 = mul i64 %1499, %1519
  %1521 = trunc i64 %1520 to i32
  %1522 = add i64 %3, 4445460904165103941
  %1523 = add i64 430107076648375493, %3
  %1524 = add i64 %1523, 4015353827516728448
  %1525 = or i64 %3, -2774457244947597096
  %1526 = xor i64 %3, -1
  %1527 = and i64 -2774457244947597096, %1526
  %1528 = add i64 %1527, %3
  %1529 = or i64 %3, -7917267507268967287
  %1530 = and i64 -7917267507268967287, %3
  %1531 = xor i64 -7917267507268967287, %3
  %1532 = or i64 %1530, %1531
  %1533 = xor i64 %1532, %1524
  %1534 = xor i64 %1533, %1522
  %1535 = xor i64 %1534, %1528
  %1536 = xor i64 %1535, %1529
  %1537 = xor i64 %1536, %1525
  %1538 = xor i64 %1537, -4612385245244202075
  %1539 = or i64 %3, 9054929769335012401
  %1540 = xor i64 %3, -1
  %1541 = and i64 %1540, -4844492570060673649
  %1542 = and i64 %3, 4844492570060673648
  %1543 = or i64 %1541, %1542
  %1544 = xor i64 -4508818962564181570, %1543
  %1545 = xor i64 %3, -1
  %1546 = or i64 -9054929769335012402, %1545
  %1547 = xor i64 %1546, -1
  %1548 = and i64 %1547, -1
  %1549 = or i64 %1544, %1548
  %1550 = or i64 %3, 9085870957495868143
  %1551 = xor i64 %3, -1
  %1552 = and i64 9085870957495868143, %1551
  %1553 = add i64 %1552, %3
  %1554 = xor i64 %1539, %1553
  %1555 = xor i64 %1554, %1549
  %1556 = xor i64 %1555, %1550
  %1557 = xor i64 %1556, 0
  %1558 = mul i64 %1538, %1557
  %1559 = trunc i64 %1558 to i1
  %1560 = or i64 %3, 2573420963671641666
  %1561 = and i64 2573420963671641666, %3
  %1562 = xor i64 2573420963671641666, %3
  %1563 = or i64 %1561, %1562
  %1564 = add i64 %3, -296250098461715660
  %1565 = and i64 -296250098461715660, %3
  %1566 = or i64 -296250098461715660, %3
  %1567 = add i64 %1565, %1566
  %1568 = add i64 %3, -4653263976718362741
  %1569 = add i64 5128642478333141910, %3
  %1570 = sub i64 %1569, -8664837618658046965
  %1571 = xor i64 %1564, %1570
  %1572 = xor i64 %1571, -8385751113061616119
  %1573 = xor i64 %1572, %1568
  %1574 = xor i64 %1573, %1563
  %1575 = xor i64 %1574, %1560
  %1576 = xor i64 %1575, %1567
  %1577 = add i64 %3, 7375053096953079832
  %1578 = add i64 7555141520490581596, %3
  %1579 = add i64 %1578, -180088423537501764
  %1580 = or i64 %3, 4376635546117587658
  %1581 = xor i64 %3, -1
  %1582 = and i64 %1581, -1308465502997355085
  %1583 = and i64 %3, 1308465502997355084
  %1584 = or i64 %1582, %1583
  %1585 = xor i64 -3356435880736544903, %1584
  %1586 = xor i64 %3, -1
  %1587 = or i64 -4376635546117587659, %1586
  %1588 = xor i64 %1587, -1
  %1589 = and i64 %1588, -1
  %1590 = or i64 %1585, %1589
  %1591 = xor i64 %1577, %1590
  %1592 = xor i64 %1591, %1580
  %1593 = xor i64 %1592, %1579
  %1594 = xor i64 %1593, 0
  %1595 = mul i64 %1576, %1594
  %1596 = or i64 %3, -3841037698458067020
  %1597 = and i64 -3841037698458067020, %3
  %1598 = xor i64 -3841037698458067020, %3
  %1599 = or i64 %1597, %1598
  %1600 = and i64 %3, 5887625773070293944
  %1601 = xor i64 %3, -1
  %1602 = or i64 -5887625773070293945, %1601
  %1603 = xor i64 %1602, -1
  %1604 = and i64 %1603, -1
  %1605 = or i64 %3, 4509479408711817231
  %1606 = xor i64 %3, -1
  %1607 = and i64 4509479408711817231, %1606
  %1608 = add i64 %1607, %3
  %1609 = xor i64 %1608, %1604
  %1610 = xor i64 %1609, 6100822949872670541
  %1611 = xor i64 %1610, %1605
  %1612 = xor i64 %1611, %1600
  %1613 = xor i64 %1612, %1596
  %1614 = xor i64 %1613, %1599
  %1615 = or i64 %3, 6455561043011048689
  %1616 = xor i64 %3, -1
  %1617 = and i64 %1616, -1636204030276771630
  %1618 = and i64 %3, 1636204030276771629
  %1619 = or i64 %1617, %1618
  %1620 = xor i64 -5702177756632288221, %1619
  %1621 = xor i64 %3, -1
  %1622 = or i64 -6455561043011048690, %1621
  %1623 = xor i64 %1622, -1
  %1624 = and i64 %1623, -1
  %1625 = or i64 %1620, %1624
  %1626 = add i64 %3, -1774058295713962413
  %1627 = xor i64 -1774058295713962413, %3
  %1628 = and i64 -1774058295713962413, %3
  %1629 = mul i64 2, %1628
  %1630 = add i64 %1627, %1629
  %1631 = xor i64 0, %1626
  %1632 = xor i64 %1631, %1615
  %1633 = xor i64 %1632, %1630
  %1634 = xor i64 %1633, %1625
  %1635 = mul i64 %1614, %1634
  %1636 = trunc i64 %1635 to i32
  %1637 = add i64 %3, -6296346592400623417
  %1638 = sub i64 0, %3
  %1639 = add i64 6296346592400623417, %1638
  %1640 = sub i64 0, %1639
  %1641 = and i64 %3, 7919046073957021421
  %1642 = xor i64 %3, -1
  %1643 = or i64 -7919046073957021422, %1642
  %1644 = xor i64 %1643, -1
  %1645 = and i64 %1644, -1
  %1646 = xor i64 %1645, %1641
  %1647 = xor i64 %1646, %1640
  %1648 = xor i64 %1647, -4136417647562534939
  %1649 = xor i64 %1648, %1637
  %1650 = or i64 %3, 2006170475021129344
  %1651 = xor i64 %3, -1
  %1652 = and i64 2006170475021129344, %1651
  %1653 = add i64 %1652, %3
  %1654 = and i64 %3, -6133041375849683515
  %1655 = or i64 6133041375849683514, %3
  %1656 = sub i64 %1655, 6133041375849683514
  %1657 = xor i64 0, %1656
  %1658 = xor i64 %1657, %1654
  %1659 = xor i64 %1658, %1653
  %1660 = xor i64 %1659, %1650
  %1661 = mul i64 %1649, %1660
  %1662 = trunc i64 %1661 to i1
  %1663 = or i64 %3, -6117880306199557229
  %1664 = xor i64 %3, -1
  %1665 = and i64 -6117880306199557229, %1664
  %1666 = add i64 %1665, %3
  %1667 = add i64 %3, -3660693813511066434
  %1668 = xor i64 -3660693813511066434, %3
  %1669 = and i64 -3660693813511066434, %3
  %1670 = mul i64 2, %1669
  %1671 = add i64 %1668, %1670
  %1672 = xor i64 %1663, %1671
  %1673 = xor i64 %1672, %1667
  %1674 = xor i64 %1673, %1666
  %1675 = xor i64 %1674, 4071733615266931563
  %1676 = and i64 %3, 4852840706947092399
  %1677 = xor i64 %3, -1
  %1678 = xor i64 4852840706947092399, %1677
  %1679 = and i64 %1678, 4852840706947092399
  %1680 = and i64 %3, 2974966417570756967
  %1681 = xor i64 %3, -1
  %1682 = or i64 -2974966417570756968, %1681
  %1683 = xor i64 %1682, -1
  %1684 = and i64 %1683, -1
  %1685 = add i64 %3, 4589713856752622688
  %1686 = xor i64 4589713856752622688, %3
  %1687 = and i64 4589713856752622688, %3
  %1688 = mul i64 2, %1687
  %1689 = add i64 %1686, %1688
  %1690 = xor i64 0, %1689
  %1691 = xor i64 %1690, %1679
  %1692 = xor i64 %1691, %1684
  %1693 = xor i64 %1692, %1676
  %1694 = xor i64 %1693, %1680
  %1695 = xor i64 %1694, %1685
  %1696 = mul i64 %1675, %1695
  %1697 = trunc i64 %1696 to i1
  %1698 = and i64 %3, 215275699218829599
  %1699 = xor i64 %3, -1
  %1700 = or i64 -215275699218829600, %1699
  %1701 = xor i64 %1700, -1
  %1702 = and i64 %1701, -1
  %1703 = and i64 %3, 1813884718061348148
  %1704 = xor i64 %3, -1
  %1705 = or i64 -1813884718061348149, %1704
  %1706 = xor i64 %1705, -1
  %1707 = and i64 %1706, -1
  %1708 = xor i64 %1707, %1698
  %1709 = xor i64 %1708, %1703
  %1710 = xor i64 %1709, 1404653429027564843
  %1711 = xor i64 %1710, %1702
  %1712 = add i64 %3, -6541873209698237188
  %1713 = add i64 -2584095354019223350, %3
  %1714 = add i64 %1713, -3957777855679013838
  %1715 = add i64 %3, 6483482391000265565
  %1716 = add i64 -29497543452039162, %3
  %1717 = add i64 %1716, 6512979934452304727
  %1718 = add i64 %3, -5523128703428507033
  %1719 = xor i64 -5523128703428507033, %3
  %1720 = and i64 -5523128703428507033, %3
  %1721 = mul i64 2, %1720
  %1722 = add i64 %1719, %1721
  %1723 = xor i64 %1715, %1718
  %1724 = xor i64 %1723, %1712
  %1725 = xor i64 %1724, %1714
  %1726 = xor i64 %1725, %1717
  %1727 = xor i64 %1726, 0
  %1728 = xor i64 %1727, %1722
  %1729 = mul i64 %1711, %1728
  %1730 = trunc i64 %1729 to i1
  %1731 = and i64 %3, -154524273500987670
  %1732 = or i64 154524273500987669, %3
  %1733 = sub i64 %1732, 154524273500987669
  %1734 = add i64 %3, 4711032111125592113
  %1735 = add i64 -7233622292057270294, %3
  %1736 = sub i64 %1735, 6502089670526689209
  %1737 = xor i64 %1734, %1736
  %1738 = xor i64 %1737, %1731
  %1739 = xor i64 %1738, -4545406146513573359
  %1740 = xor i64 %1739, %1733
  %1741 = add i64 %3, -8659436200411678728
  %1742 = add i64 6665738120337640405, %3
  %1743 = sub i64 %1742, -3121569752960232483
  %1744 = or i64 %3, -2558757543710267144
  %1745 = and i64 -2558757543710267144, %3
  %1746 = xor i64 -2558757543710267144, %3
  %1747 = or i64 %1745, %1746
  %1748 = and i64 %3, 6978944073587958824
  %1749 = xor i64 %3, -1
  %1750 = or i64 -6978944073587958825, %1749
  %1751 = xor i64 %1750, -1
  %1752 = and i64 %1751, -1
  %1753 = xor i64 %1743, %1741
  %1754 = xor i64 %1753, %1748
  %1755 = xor i64 %1754, 0
  %1756 = xor i64 %1755, %1747
  %1757 = xor i64 %1756, %1752
  %1758 = xor i64 %1757, %1744
  %1759 = mul i64 %1740, %1758
  %1760 = trunc i64 %1759 to i1
  %1761 = and i64 %3, 2732492933152128912
  %1762 = xor i64 %3, -1
  %1763 = or i64 -2732492933152128913, %1762
  %1764 = xor i64 %1763, -1
  %1765 = and i64 %1764, -1
  %1766 = or i64 %3, -6056347500231096217
  %1767 = and i64 -6056347500231096217, %3
  %1768 = xor i64 -6056347500231096217, %3
  %1769 = or i64 %1767, %1768
  %1770 = xor i64 %1761, -8819275055404536981
  %1771 = xor i64 %1770, %1769
  %1772 = xor i64 %1771, %1765
  %1773 = xor i64 %1772, %1766
  %1774 = add i64 %3, -7026214991592177486
  %1775 = sub i64 0, %3
  %1776 = add i64 7026214991592177486, %1775
  %1777 = sub i64 0, %1776
  %1778 = or i64 %3, -2188919849600914992
  %1779 = and i64 -2188919849600914992, %3
  %1780 = xor i64 -2188919849600914992, %3
  %1781 = or i64 %1779, %1780
  %1782 = add i64 %3, 7728663079277610511
  %1783 = sub i64 0, %3
  %1784 = add i64 -7728663079277610511, %1783
  %1785 = sub i64 0, %1784
  %1786 = xor i64 %1785, %1777
  %1787 = xor i64 %1786, %1774
  %1788 = xor i64 %1787, %1778
  %1789 = xor i64 %1788, 0
  %1790 = xor i64 %1789, %1781
  %1791 = xor i64 %1790, %1782
  %1792 = mul i64 %1773, %1791
  %1793 = trunc i64 %1792 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537084, i64* %1430, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %1475, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %1521, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %1559, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 %1595, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 %1636, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %1662, i1 %1697, i1 %1730, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %1760, i1* null, i1* null, i1* null, i32 %1793, i32 0, i1* null, i1* null)
  %1794 = load i64, i64* %1430, align 8
  %1795 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %1794
  store i8* bitcast (i1 (i1)* @render..split.1 to i8*), i8** %1795, align 8
  %1796 = alloca i64, align 8
  %1797 = and i64 %3, 4857849699079525626
  %1798 = or i64 -4857849699079525627, %3
  %1799 = sub i64 %1798, -4857849699079525627
  %1800 = or i64 %3, -5268692415252945259
  %1801 = xor i64 %3, -1
  %1802 = and i64 -5268692415252945259, %1801
  %1803 = add i64 %1802, %3
  %1804 = add i64 %3, 181783040856534142
  %1805 = sub i64 0, %3
  %1806 = add i64 -181783040856534142, %1805
  %1807 = sub i64 0, %1806
  %1808 = xor i64 %1797, %1799
  %1809 = xor i64 %1808, %1800
  %1810 = xor i64 %1809, %1803
  %1811 = xor i64 %1810, %1807
  %1812 = xor i64 %1811, -7834958919345348301
  %1813 = xor i64 %1812, %1804
  %1814 = add i64 %3, 5151152186747160613
  %1815 = add i64 -1334640491550830710, %3
  %1816 = sub i64 %1815, -6485792678297991323
  %1817 = add i64 %3, 8551187504224158176
  %1818 = xor i64 8551187504224158176, %3
  %1819 = and i64 8551187504224158176, %3
  %1820 = mul i64 2, %1819
  %1821 = add i64 %1818, %1820
  %1822 = or i64 %3, 8752033771303155248
  %1823 = and i64 8752033771303155248, %3
  %1824 = xor i64 8752033771303155248, %3
  %1825 = or i64 %1823, %1824
  %1826 = xor i64 %1816, %1817
  %1827 = xor i64 %1826, 0
  %1828 = xor i64 %1827, %1822
  %1829 = xor i64 %1828, %1814
  %1830 = xor i64 %1829, %1825
  %1831 = xor i64 %1830, %1821
  %1832 = mul i64 %1813, %1831
  %1833 = trunc i64 %1832 to i1
  %1834 = or i64 %3, 1676065753006861996
  %1835 = xor i64 %3, -1
  %1836 = and i64 1676065753006861996, %1835
  %1837 = add i64 %1836, %3
  %1838 = add i64 %3, 8046136844789801602
  %1839 = add i64 -2221126996126279611, %3
  %1840 = sub i64 %1839, 8179480232793470403
  %1841 = xor i64 %1834, %1837
  %1842 = xor i64 %1841, %1838
  %1843 = xor i64 %1842, 5113441726595996741
  %1844 = xor i64 %1843, %1840
  %1845 = or i64 %3, 636031613320479030
  %1846 = xor i64 %3, -1
  %1847 = and i64 %1846, -7899529186440386170
  %1848 = and i64 %3, 7899529186440386169
  %1849 = or i64 %1847, %1848
  %1850 = xor i64 -7310292795560744784, %1849
  %1851 = xor i64 %3, -1
  %1852 = or i64 -636031613320479031, %1851
  %1853 = xor i64 %1852, -1
  %1854 = and i64 %1853, -1
  %1855 = or i64 %1850, %1854
  %1856 = or i64 %3, 6821598229108650609
  %1857 = xor i64 %3, -1
  %1858 = and i64 %1857, 8591817501184992247
  %1859 = and i64 %3, -8591817501184992248
  %1860 = or i64 %1858, %1859
  %1861 = xor i64 2996981778929537414, %1860
  %1862 = xor i64 %3, -1
  %1863 = or i64 -6821598229108650610, %1862
  %1864 = xor i64 %1863, -1
  %1865 = and i64 %1864, -1
  %1866 = or i64 %1861, %1865
  %1867 = and i64 %3, -2373912814763616470
  %1868 = xor i64 %3, -1
  %1869 = or i64 2373912814763616469, %1868
  %1870 = xor i64 %1869, -1
  %1871 = and i64 %1870, -1
  %1872 = xor i64 %1866, %1845
  %1873 = xor i64 %1872, 0
  %1874 = xor i64 %1873, %1856
  %1875 = xor i64 %1874, %1871
  %1876 = xor i64 %1875, %1867
  %1877 = xor i64 %1876, %1855
  %1878 = mul i64 %1844, %1877
  %1879 = trunc i64 %1878 to i1
  %1880 = add i64 %3, 9028759209376155714
  %1881 = sub i64 0, %3
  %1882 = sub i64 9028759209376155714, %1881
  %1883 = add i64 %3, 9188983199814893120
  %1884 = sub i64 0, %3
  %1885 = sub i64 9188983199814893120, %1884
  %1886 = xor i64 %1880, %1882
  %1887 = xor i64 %1886, -7658769440079185737
  %1888 = xor i64 %1887, %1885
  %1889 = xor i64 %1888, %1883
  %1890 = or i64 %3, 2543361181334992447
  %1891 = xor i64 %3, -1
  %1892 = and i64 %1891, -4511786409830428965
  %1893 = and i64 %3, 4511786409830428964
  %1894 = or i64 %1892, %1893
  %1895 = xor i64 -2150117327056520988, %1894
  %1896 = xor i64 %3, -1
  %1897 = or i64 -2543361181334992448, %1896
  %1898 = xor i64 %1897, -1
  %1899 = and i64 %1898, -1
  %1900 = or i64 %1895, %1899
  %1901 = or i64 %3, 5093082821769405943
  %1902 = xor i64 %3, -1
  %1903 = and i64 %1902, 4341898055752759838
  %1904 = and i64 %3, -4341898055752759839
  %1905 = or i64 %1903, %1904
  %1906 = xor i64 8858517316308017129, %1905
  %1907 = xor i64 %3, -1
  %1908 = or i64 -5093082821769405944, %1907
  %1909 = xor i64 %1908, -1
  %1910 = and i64 %1909, -1
  %1911 = or i64 %1906, %1910
  %1912 = or i64 %3, -8722752377810771297
  %1913 = xor i64 %3, -1
  %1914 = and i64 -8722752377810771297, %1913
  %1915 = add i64 %1914, %3
  %1916 = xor i64 %1890, %1912
  %1917 = xor i64 %1916, %1911
  %1918 = xor i64 %1917, 0
  %1919 = xor i64 %1918, %1915
  %1920 = xor i64 %1919, %1900
  %1921 = xor i64 %1920, %1901
  %1922 = mul i64 %1889, %1921
  %1923 = and i64 %3, -4579116953819248317
  %1924 = xor i64 %3, -1
  %1925 = xor i64 -4579116953819248317, %1924
  %1926 = and i64 %1925, -4579116953819248317
  %1927 = and i64 %3, 6783478582633540034
  %1928 = xor i64 %3, -1
  %1929 = xor i64 6783478582633540034, %1928
  %1930 = and i64 %1929, 6783478582633540034
  %1931 = and i64 %3, 1435230174121972257
  %1932 = xor i64 %3, -1
  %1933 = or i64 -1435230174121972258, %1932
  %1934 = xor i64 %1933, -1
  %1935 = and i64 %1934, -1
  %1936 = xor i64 %1931, %1926
  %1937 = xor i64 %1936, 7570341948014665085
  %1938 = xor i64 %1937, %1935
  %1939 = xor i64 %1938, %1923
  %1940 = xor i64 %1939, %1927
  %1941 = xor i64 %1940, %1930
  %1942 = add i64 %3, 3220116986552607838
  %1943 = xor i64 3220116986552607838, %3
  %1944 = and i64 3220116986552607838, %3
  %1945 = mul i64 2, %1944
  %1946 = add i64 %1943, %1945
  %1947 = add i64 %3, -459065035190752203
  %1948 = xor i64 -459065035190752203, %3
  %1949 = and i64 -459065035190752203, %3
  %1950 = mul i64 2, %1949
  %1951 = add i64 %1948, %1950
  %1952 = or i64 %3, -6327247968735200902
  %1953 = and i64 -6327247968735200902, %3
  %1954 = xor i64 -6327247968735200902, %3
  %1955 = or i64 %1953, %1954
  %1956 = xor i64 %1955, %1946
  %1957 = xor i64 %1956, %1947
  %1958 = xor i64 %1957, 0
  %1959 = xor i64 %1958, %1952
  %1960 = xor i64 %1959, %1951
  %1961 = xor i64 %1960, %1942
  %1962 = mul i64 %1941, %1961
  %1963 = trunc i64 %1962 to i32
  %1964 = add i64 %3, 458231224836757476
  %1965 = sub i64 0, %3
  %1966 = sub i64 458231224836757476, %1965
  %1967 = and i64 %3, 3885322691619622244
  %1968 = or i64 -3885322691619622245, %3
  %1969 = sub i64 %1968, -3885322691619622245
  %1970 = xor i64 %1969, %1964
  %1971 = xor i64 %1970, -3363428193567392231
  %1972 = xor i64 %1971, %1966
  %1973 = xor i64 %1972, %1967
  %1974 = and i64 %3, -8054305057715310300
  %1975 = xor i64 %3, -1
  %1976 = or i64 8054305057715310299, %1975
  %1977 = xor i64 %1976, -1
  %1978 = and i64 %1977, -1
  %1979 = add i64 %3, -7092869474598479150
  %1980 = and i64 -7092869474598479150, %3
  %1981 = or i64 -7092869474598479150, %3
  %1982 = add i64 %1980, %1981
  %1983 = or i64 %3, -617243387135965455
  %1984 = and i64 -617243387135965455, %3
  %1985 = xor i64 -617243387135965455, %3
  %1986 = or i64 %1984, %1985
  %1987 = xor i64 %1982, %1983
  %1988 = xor i64 %1987, %1974
  %1989 = xor i64 %1988, %1986
  %1990 = xor i64 %1989, %1979
  %1991 = xor i64 %1990, %1978
  %1992 = xor i64 %1991, 0
  %1993 = mul i64 %1973, %1992
  %1994 = trunc i64 %1993 to i1
  %1995 = add i64 %3, 6196632196091238395
  %1996 = add i64 -9108712396727368922, %3
  %1997 = sub i64 %1996, 3141399480890944299
  %1998 = add i64 %3, -2907865831135962815
  %1999 = xor i64 -2907865831135962815, %3
  %2000 = and i64 -2907865831135962815, %3
  %2001 = mul i64 2, %2000
  %2002 = add i64 %1999, %2001
  %2003 = xor i64 -2928034496650120457, %2002
  %2004 = xor i64 %2003, %1998
  %2005 = xor i64 %2004, %1997
  %2006 = xor i64 %2005, %1995
  %2007 = and i64 %3, -6335720879013985161
  %2008 = or i64 6335720879013985160, %3
  %2009 = sub i64 %2008, 6335720879013985160
  %2010 = or i64 %3, 2899065820702166515
  %2011 = and i64 2899065820702166515, %3
  %2012 = xor i64 2899065820702166515, %3
  %2013 = or i64 %2011, %2012
  %2014 = xor i64 0, %2007
  %2015 = xor i64 %2014, %2010
  %2016 = xor i64 %2015, %2009
  %2017 = xor i64 %2016, %2013
  %2018 = mul i64 %2006, %2017
  %2019 = trunc i64 %2018 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537080, i64* %1796, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %1833, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %1879, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %1922, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %1963, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %1994, i1 %2019, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %2020 = load i64, i64* %1796, align 8
  %2021 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %2020
  store i8* bitcast (i1 (i1, i1, i1, i32, i32, i1*, i1*, i1*, i1*, i1*, i1*, i1*)* @render.extracted to i8*), i8** %2021, align 8
  %2022 = alloca i64, align 8
  %2023 = or i64 %3, 2783842956592402983
  %2024 = xor i64 %3, -1
  %2025 = and i64 2783842956592402983, %2024
  %2026 = add i64 %2025, %3
  %2027 = add i64 %3, 4801596115037919145
  %2028 = and i64 4801596115037919145, %3
  %2029 = or i64 4801596115037919145, %3
  %2030 = add i64 %2028, %2029
  %2031 = xor i64 %2023, %2030
  %2032 = xor i64 %2031, -4370687493398311567
  %2033 = xor i64 %2032, %2027
  %2034 = xor i64 %2033, %2026
  %2035 = and i64 %3, -8493158700133277313
  %2036 = xor i64 %3, -1
  %2037 = or i64 8493158700133277312, %2036
  %2038 = xor i64 %2037, -1
  %2039 = and i64 %2038, -1
  %2040 = and i64 %3, -7786493183562728979
  %2041 = xor i64 %3, -1
  %2042 = xor i64 -7786493183562728979, %2041
  %2043 = and i64 %2042, -7786493183562728979
  %2044 = xor i64 %2040, 0
  %2045 = xor i64 %2044, %2039
  %2046 = xor i64 %2045, %2035
  %2047 = xor i64 %2046, %2043
  %2048 = mul i64 %2034, %2047
  %2049 = trunc i64 %2048 to i1
  %2050 = and i64 %3, -2007732337574561546
  %2051 = or i64 2007732337574561545, %3
  %2052 = sub i64 %2051, 2007732337574561545
  %2053 = and i64 %3, 3239977884814169127
  %2054 = xor i64 %3, -1
  %2055 = or i64 -3239977884814169128, %2054
  %2056 = xor i64 %2055, -1
  %2057 = and i64 %2056, -1
  %2058 = xor i64 %2053, %2052
  %2059 = xor i64 %2058, -8892323328301358755
  %2060 = xor i64 %2059, %2050
  %2061 = xor i64 %2060, %2057
  %2062 = add i64 %3, -8209557641692472423
  %2063 = add i64 -4381998596910477096, %3
  %2064 = sub i64 %2063, 3827559044781995327
  %2065 = add i64 %3, 1647059089252064262
  %2066 = add i64 8917035642550016714, %3
  %2067 = add i64 %2066, -7269976553297952452
  %2068 = and i64 %3, -3385778852605967012
  %2069 = or i64 3385778852605967011, %3
  %2070 = sub i64 %2069, 3385778852605967011
  %2071 = xor i64 %2068, %2065
  %2072 = xor i64 %2071, %2067
  %2073 = xor i64 %2072, %2062
  %2074 = xor i64 %2073, 0
  %2075 = xor i64 %2074, %2064
  %2076 = xor i64 %2075, %2070
  %2077 = mul i64 %2061, %2076
  %2078 = trunc i64 %2077 to i32
  %2079 = and i64 %3, -4375618000168753114
  %2080 = xor i64 %3, -1
  %2081 = or i64 4375618000168753113, %2080
  %2082 = xor i64 %2081, -1
  %2083 = and i64 %2082, -1
  %2084 = or i64 %3, -8727425140775390542
  %2085 = and i64 -8727425140775390542, %3
  %2086 = xor i64 -8727425140775390542, %3
  %2087 = or i64 %2085, %2086
  %2088 = add i64 %3, -8818028482385693774
  %2089 = add i64 5512102906227858685, %3
  %2090 = add i64 %2089, 4116612685095999157
  %2091 = xor i64 %2087, %2079
  %2092 = xor i64 %2091, %2088
  %2093 = xor i64 %2092, %2083
  %2094 = xor i64 %2093, %2090
  %2095 = xor i64 %2094, %2084
  %2096 = xor i64 %2095, -5971422358646330057
  %2097 = add i64 %3, 4395728504398297742
  %2098 = add i64 556890420835859094, %3
  %2099 = sub i64 %2098, -3838838083562438648
  %2100 = and i64 %3, -2316227872688785658
  %2101 = xor i64 %3, -1
  %2102 = xor i64 -2316227872688785658, %2101
  %2103 = and i64 %2102, -2316227872688785658
  %2104 = xor i64 0, %2100
  %2105 = xor i64 %2104, %2097
  %2106 = xor i64 %2105, %2103
  %2107 = xor i64 %2106, %2099
  %2108 = mul i64 %2096, %2107
  %2109 = trunc i64 %2108 to i32
  %2110 = add i64 %3, 3608335048144209039
  %2111 = sub i64 0, %3
  %2112 = add i64 -3608335048144209039, %2111
  %2113 = sub i64 0, %2112
  %2114 = or i64 %3, 917223754973209682
  %2115 = xor i64 %3, -1
  %2116 = and i64 917223754973209682, %2115
  %2117 = add i64 %2116, %3
  %2118 = xor i64 %2114, %2113
  %2119 = xor i64 %2118, %2110
  %2120 = xor i64 %2119, %2117
  %2121 = xor i64 %2120, 9119026536818297583
  %2122 = and i64 %3, 6038580000443650793
  %2123 = xor i64 %3, -1
  %2124 = or i64 -6038580000443650794, %2123
  %2125 = xor i64 %2124, -1
  %2126 = and i64 %2125, -1
  %2127 = add i64 %3, -8016511263984189727
  %2128 = xor i64 -8016511263984189727, %3
  %2129 = and i64 -8016511263984189727, %3
  %2130 = mul i64 2, %2129
  %2131 = add i64 %2128, %2130
  %2132 = add i64 %3, 4555397671845949478
  %2133 = add i64 -5698549421187119355, %3
  %2134 = sub i64 %2133, 8192796980676482783
  %2135 = xor i64 %2122, %2134
  %2136 = xor i64 %2135, 0
  %2137 = xor i64 %2136, %2131
  %2138 = xor i64 %2137, %2132
  %2139 = xor i64 %2138, %2126
  %2140 = xor i64 %2139, %2127
  %2141 = mul i64 %2121, %2140
  %2142 = and i64 %3, -8501249174835194141
  %2143 = xor i64 %3, -1
  %2144 = xor i64 -8501249174835194141, %2143
  %2145 = and i64 %2144, -8501249174835194141
  %2146 = and i64 %3, 491885932619383401
  %2147 = or i64 -491885932619383402, %3
  %2148 = sub i64 %2147, -491885932619383402
  %2149 = add i64 %3, -3830248380439971626
  %2150 = add i64 -8942344868301885206, %3
  %2151 = add i64 %2150, 5112096487861913580
  %2152 = xor i64 %2151, %2146
  %2153 = xor i64 %2152, %2148
  %2154 = xor i64 %2153, %2145
  %2155 = xor i64 %2154, 6234136797909031081
  %2156 = xor i64 %2155, %2149
  %2157 = xor i64 %2156, %2142
  %2158 = add i64 %3, -1282999322437622272
  %2159 = xor i64 -1282999322437622272, %3
  %2160 = and i64 -1282999322437622272, %3
  %2161 = mul i64 2, %2160
  %2162 = add i64 %2159, %2161
  %2163 = and i64 %3, -665635437580784867
  %2164 = or i64 665635437580784866, %3
  %2165 = sub i64 %2164, 665635437580784866
  %2166 = or i64 %3, -2016592687987101845
  %2167 = and i64 -2016592687987101845, %3
  %2168 = xor i64 -2016592687987101845, %3
  %2169 = or i64 %2167, %2168
  %2170 = xor i64 %2165, %2166
  %2171 = xor i64 %2170, 0
  %2172 = xor i64 %2171, %2158
  %2173 = xor i64 %2172, %2162
  %2174 = xor i64 %2173, %2163
  %2175 = xor i64 %2174, %2169
  %2176 = mul i64 %2157, %2175
  %2177 = add i64 %3, 7152627934235879224
  %2178 = xor i64 7152627934235879224, %3
  %2179 = and i64 7152627934235879224, %3
  %2180 = mul i64 2, %2179
  %2181 = add i64 %2178, %2180
  %2182 = or i64 %3, -8284780790645748545
  %2183 = xor i64 %3, -1
  %2184 = and i64 %2183, 8902600812236545306
  %2185 = and i64 %3, -8902600812236545307
  %2186 = or i64 %2184, %2185
  %2187 = xor i64 -681469031737060955, %2186
  %2188 = xor i64 %3, -1
  %2189 = or i64 8284780790645748544, %2188
  %2190 = xor i64 %2189, -1
  %2191 = and i64 %2190, -1
  %2192 = or i64 %2187, %2191
  %2193 = add i64 %3, -6615996192607390656
  %2194 = sub i64 0, %3
  %2195 = add i64 6615996192607390656, %2194
  %2196 = sub i64 0, %2195
  %2197 = xor i64 %2196, %2182
  %2198 = xor i64 %2197, -8858879289412884865
  %2199 = xor i64 %2198, %2192
  %2200 = xor i64 %2199, %2193
  %2201 = xor i64 %2200, %2181
  %2202 = xor i64 %2201, %2177
  %2203 = or i64 %3, 4890109033881949044
  %2204 = xor i64 %3, -1
  %2205 = and i64 %2204, 4975358005316443092
  %2206 = and i64 %3, -4975358005316443093
  %2207 = or i64 %2205, %2206
  %2208 = xor i64 491224408342268064, %2207
  %2209 = xor i64 %3, -1
  %2210 = or i64 -4890109033881949045, %2209
  %2211 = xor i64 %2210, -1
  %2212 = and i64 %2211, -1
  %2213 = or i64 %2208, %2212
  %2214 = add i64 %3, -5660085936318946017
  %2215 = sub i64 0, %3
  %2216 = add i64 5660085936318946017, %2215
  %2217 = sub i64 0, %2216
  %2218 = or i64 %3, -4786951517301066727
  %2219 = xor i64 %3, -1
  %2220 = and i64 -4786951517301066727, %2219
  %2221 = add i64 %2220, %3
  %2222 = xor i64 %2221, %2213
  %2223 = xor i64 %2222, 0
  %2224 = xor i64 %2223, %2214
  %2225 = xor i64 %2224, %2218
  %2226 = xor i64 %2225, %2217
  %2227 = xor i64 %2226, %2203
  %2228 = mul i64 %2202, %2227
  %2229 = trunc i64 %2228 to i32
  %2230 = and i64 %3, 5943037314360120976
  %2231 = xor i64 %3, -1
  %2232 = or i64 -5943037314360120977, %2231
  %2233 = xor i64 %2232, -1
  %2234 = and i64 %2233, -1
  %2235 = add i64 %3, 4508837525381180776
  %2236 = add i64 -4611196332892683085, %3
  %2237 = sub i64 %2236, -9120033858273863861
  %2238 = xor i64 %2234, -3689927114043150055
  %2239 = xor i64 %2238, %2235
  %2240 = xor i64 %2239, %2237
  %2241 = xor i64 %2240, %2230
  %2242 = add i64 %3, 186378446578665920
  %2243 = sub i64 0, %3
  %2244 = sub i64 186378446578665920, %2243
  %2245 = add i64 %3, -7689214190293095522
  %2246 = and i64 -7689214190293095522, %3
  %2247 = or i64 -7689214190293095522, %3
  %2248 = add i64 %2246, %2247
  %2249 = add i64 %3, -2822580475419892430
  %2250 = sub i64 0, %3
  %2251 = sub i64 -2822580475419892430, %2250
  %2252 = xor i64 %2251, %2248
  %2253 = xor i64 %2252, %2242
  %2254 = xor i64 %2253, %2245
  %2255 = xor i64 %2254, %2249
  %2256 = xor i64 %2255, %2244
  %2257 = xor i64 %2256, 0
  %2258 = mul i64 %2241, %2257
  %2259 = and i64 %3, 3589548968110162279
  %2260 = xor i64 %3, -1
  %2261 = or i64 -3589548968110162280, %2260
  %2262 = xor i64 %2261, -1
  %2263 = and i64 %2262, -1
  %2264 = or i64 %3, 471521255285929709
  %2265 = xor i64 %3, -1
  %2266 = and i64 471521255285929709, %2265
  %2267 = add i64 %2266, %3
  %2268 = and i64 %3, 4599754120441629039
  %2269 = xor i64 %3, -1
  %2270 = xor i64 4599754120441629039, %2269
  %2271 = and i64 %2270, 4599754120441629039
  %2272 = xor i64 %2263, %2267
  %2273 = xor i64 %2272, %2259
  %2274 = xor i64 %2273, %2271
  %2275 = xor i64 %2274, %2268
  %2276 = xor i64 %2275, %2264
  %2277 = xor i64 %2276, 2090398413630801967
  %2278 = and i64 %3, 8737591548568267524
  %2279 = or i64 -8737591548568267525, %3
  %2280 = sub i64 %2279, -8737591548568267525
  %2281 = add i64 %3, -5018560039946806547
  %2282 = and i64 -5018560039946806547, %3
  %2283 = or i64 -5018560039946806547, %3
  %2284 = add i64 %2282, %2283
  %2285 = add i64 %3, -9084927962346675632
  %2286 = sub i64 0, %3
  %2287 = sub i64 -9084927962346675632, %2286
  %2288 = xor i64 %2287, %2278
  %2289 = xor i64 %2288, %2284
  %2290 = xor i64 %2289, 0
  %2291 = xor i64 %2290, %2281
  %2292 = xor i64 %2291, %2285
  %2293 = xor i64 %2292, %2280
  %2294 = mul i64 %2277, %2293
  %2295 = add i64 %3, 3770844522626866276
  %2296 = sub i64 0, %3
  %2297 = add i64 -3770844522626866276, %2296
  %2298 = sub i64 0, %2297
  %2299 = or i64 %3, 3497372876247330546
  %2300 = xor i64 %3, -1
  %2301 = and i64 %2300, 7600806794144489694
  %2302 = and i64 %3, -7600806794144489695
  %2303 = or i64 %2301, %2302
  %2304 = xor i64 6481339141074538028, %2303
  %2305 = xor i64 %3, -1
  %2306 = or i64 -3497372876247330547, %2305
  %2307 = xor i64 %2306, -1
  %2308 = and i64 %2307, -1
  %2309 = or i64 %2304, %2308
  %2310 = and i64 %3, 5350087995358122998
  %2311 = xor i64 %3, -1
  %2312 = or i64 -5350087995358122999, %2311
  %2313 = xor i64 %2312, -1
  %2314 = and i64 %2313, -1
  %2315 = xor i64 %2310, %2309
  %2316 = xor i64 %2315, -1185426684551228797
  %2317 = xor i64 %2316, %2299
  %2318 = xor i64 %2317, %2314
  %2319 = xor i64 %2318, %2298
  %2320 = xor i64 %2319, %2295
  %2321 = or i64 %3, 5278986117112495151
  %2322 = xor i64 %3, -1
  %2323 = and i64 %2322, -3646508071262460426
  %2324 = and i64 %3, 3646508071262460425
  %2325 = or i64 %2323, %2324
  %2326 = xor i64 -8923959774257931815, %2325
  %2327 = xor i64 %3, -1
  %2328 = or i64 -5278986117112495152, %2327
  %2329 = xor i64 %2328, -1
  %2330 = and i64 %2329, -1
  %2331 = or i64 %2326, %2330
  %2332 = or i64 %3, -7311202539583032566
  %2333 = and i64 -7311202539583032566, %3
  %2334 = xor i64 -7311202539583032566, %3
  %2335 = or i64 %2333, %2334
  %2336 = xor i64 %2331, %2321
  %2337 = xor i64 %2336, %2335
  %2338 = xor i64 %2337, 0
  %2339 = xor i64 %2338, %2332
  %2340 = mul i64 %2320, %2339
  %2341 = trunc i64 %2340 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537072, i64* %2022, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %2049, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %2078, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %2109, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %2141, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %2176, i32 %2229, i1* null, i1* null, i64 %2258, i64 %2294, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %2341, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %2342 = load i64, i64* %2022, align 8
  %2343 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %2342
  store i8* bitcast (i1 (i1, i1, i1, i1, i1, i1, i1, i1, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)* @render.extracted.2 to i8*), i8** %2343, align 8
  %2344 = alloca i64, align 8
  %2345 = add i64 %3, -5222526076898082981
  %2346 = sub i64 0, %3
  %2347 = add i64 5222526076898082981, %2346
  %2348 = sub i64 0, %2347
  %2349 = add i64 %3, -4355177501693756693
  %2350 = and i64 -4355177501693756693, %3
  %2351 = or i64 -4355177501693756693, %3
  %2352 = add i64 %2350, %2351
  %2353 = xor i64 %2348, %2345
  %2354 = xor i64 %2353, -2905724550732271921
  %2355 = xor i64 %2354, %2352
  %2356 = xor i64 %2355, %2349
  %2357 = and i64 %3, -6949692275908220490
  %2358 = or i64 6949692275908220489, %3
  %2359 = sub i64 %2358, 6949692275908220489
  %2360 = add i64 %3, -6812073388778345576
  %2361 = add i64 9046971116837076986, %3
  %2362 = add i64 %2361, 2587699568094129054
  %2363 = xor i64 %2360, %2362
  %2364 = xor i64 %2363, %2359
  %2365 = xor i64 %2364, %2357
  %2366 = xor i64 %2365, 5016354474633066731
  %2367 = mul i64 %2356, %2366
  %2368 = trunc i64 %2367 to i32
  %2369 = add i64 %3, 5209550501710918184
  %2370 = xor i64 5209550501710918184, %3
  %2371 = and i64 5209550501710918184, %3
  %2372 = mul i64 2, %2371
  %2373 = add i64 %2370, %2372
  %2374 = and i64 %3, 504174580706818101
  %2375 = xor i64 %3, -1
  %2376 = or i64 -504174580706818102, %2375
  %2377 = xor i64 %2376, -1
  %2378 = and i64 %2377, -1
  %2379 = or i64 %3, -7897893884093690757
  %2380 = xor i64 %3, -1
  %2381 = and i64 %2380, 2555021621739439830
  %2382 = and i64 %3, -2555021621739439831
  %2383 = or i64 %2381, %2382
  %2384 = xor i64 -5687964983596070227, %2383
  %2385 = xor i64 %3, -1
  %2386 = or i64 7897893884093690756, %2385
  %2387 = xor i64 %2386, -1
  %2388 = and i64 %2387, -1
  %2389 = or i64 %2384, %2388
  %2390 = xor i64 %2373, 8936919481641332115
  %2391 = xor i64 %2390, %2389
  %2392 = xor i64 %2391, %2369
  %2393 = xor i64 %2392, %2374
  %2394 = xor i64 %2393, %2378
  %2395 = xor i64 %2394, %2379
  %2396 = and i64 %3, 5727238635591155848
  %2397 = xor i64 %3, -1
  %2398 = xor i64 5727238635591155848, %2397
  %2399 = and i64 %2398, 5727238635591155848
  %2400 = add i64 %3, -5487173505816856161
  %2401 = xor i64 -5487173505816856161, %3
  %2402 = and i64 -5487173505816856161, %3
  %2403 = mul i64 2, %2402
  %2404 = add i64 %2401, %2403
  %2405 = xor i64 0, %2396
  %2406 = xor i64 %2405, %2400
  %2407 = xor i64 %2406, %2404
  %2408 = xor i64 %2407, %2399
  %2409 = mul i64 %2395, %2408
  %2410 = trunc i64 %2409 to i1
  %2411 = and i64 %3, -817708851011146813
  %2412 = xor i64 %3, -1
  %2413 = xor i64 -817708851011146813, %2412
  %2414 = and i64 %2413, -817708851011146813
  %2415 = or i64 %3, -2535041783699118682
  %2416 = xor i64 %3, -1
  %2417 = and i64 %2416, -3206469625362542773
  %2418 = and i64 %3, 3206469625362542772
  %2419 = or i64 %2417, %2418
  %2420 = xor i64 1103923076916636397, %2419
  %2421 = xor i64 %3, -1
  %2422 = or i64 2535041783699118681, %2421
  %2423 = xor i64 %2422, -1
  %2424 = and i64 %2423, -1
  %2425 = or i64 %2420, %2424
  %2426 = add i64 %3, 5947585026168019506
  %2427 = and i64 5947585026168019506, %3
  %2428 = or i64 5947585026168019506, %3
  %2429 = add i64 %2427, %2428
  %2430 = xor i64 %2425, %2426
  %2431 = xor i64 %2430, %2411
  %2432 = xor i64 %2431, %2415
  %2433 = xor i64 %2432, %2414
  %2434 = xor i64 %2433, -3297321246447692015
  %2435 = xor i64 %2434, %2429
  %2436 = and i64 %3, 3857296453326884150
  %2437 = xor i64 %3, -1
  %2438 = or i64 -3857296453326884151, %2437
  %2439 = xor i64 %2438, -1
  %2440 = and i64 %2439, -1
  %2441 = or i64 %3, -604340394409212593
  %2442 = and i64 -604340394409212593, %3
  %2443 = xor i64 -604340394409212593, %3
  %2444 = or i64 %2442, %2443
  %2445 = xor i64 %2444, %2440
  %2446 = xor i64 %2445, 0
  %2447 = xor i64 %2446, %2436
  %2448 = xor i64 %2447, %2441
  %2449 = mul i64 %2435, %2448
  %2450 = trunc i64 %2449 to i32
  %2451 = add i64 %3, 4844382459101813835
  %2452 = sub i64 0, %3
  %2453 = sub i64 4844382459101813835, %2452
  %2454 = or i64 %3, 460520889179823552
  %2455 = xor i64 %3, -1
  %2456 = and i64 %2455, -3487518321997491173
  %2457 = and i64 %3, 3487518321997491172
  %2458 = or i64 %2456, %2457
  %2459 = xor i64 -3891741337869252133, %2458
  %2460 = xor i64 %3, -1
  %2461 = or i64 -460520889179823553, %2460
  %2462 = xor i64 %2461, -1
  %2463 = and i64 %2462, -1
  %2464 = or i64 %2459, %2463
  %2465 = or i64 %3, 6132625521150633289
  %2466 = xor i64 %3, -1
  %2467 = and i64 6132625521150633289, %2466
  %2468 = add i64 %2467, %3
  %2469 = xor i64 %2468, %2453
  %2470 = xor i64 %2469, %2465
  %2471 = xor i64 %2470, -3832711622586799759
  %2472 = xor i64 %2471, %2451
  %2473 = xor i64 %2472, %2454
  %2474 = xor i64 %2473, %2464
  %2475 = and i64 %3, 7652376922614138699
  %2476 = xor i64 %3, -1
  %2477 = xor i64 7652376922614138699, %2476
  %2478 = and i64 %2477, 7652376922614138699
  %2479 = and i64 %3, 510919676424946953
  %2480 = or i64 -510919676424946954, %3
  %2481 = sub i64 %2480, -510919676424946954
  %2482 = add i64 %3, -9140522933473347732
  %2483 = add i64 -7377607924781124597, %3
  %2484 = sub i64 %2483, 1762915008692223135
  %2485 = xor i64 %2475, %2478
  %2486 = xor i64 %2485, %2484
  %2487 = xor i64 %2486, %2479
  %2488 = xor i64 %2487, 0
  %2489 = xor i64 %2488, %2481
  %2490 = xor i64 %2489, %2482
  %2491 = mul i64 %2474, %2490
  %2492 = add i64 %3, 5662005930315922050
  %2493 = add i64 -6019875117799762134, %3
  %2494 = add i64 %2493, -6764863025593867432
  %2495 = or i64 %3, 6703879272920716421
  %2496 = and i64 6703879272920716421, %3
  %2497 = xor i64 6703879272920716421, %3
  %2498 = or i64 %2496, %2497
  %2499 = or i64 %3, -748962196007739710
  %2500 = and i64 -748962196007739710, %3
  %2501 = xor i64 -748962196007739710, %3
  %2502 = or i64 %2500, %2501
  %2503 = xor i64 %2494, %2502
  %2504 = xor i64 %2503, -3280316943781591533
  %2505 = xor i64 %2504, %2498
  %2506 = xor i64 %2505, %2492
  %2507 = xor i64 %2506, %2499
  %2508 = xor i64 %2507, %2495
  %2509 = and i64 %3, -6612402189771871408
  %2510 = or i64 6612402189771871407, %3
  %2511 = sub i64 %2510, 6612402189771871407
  %2512 = or i64 %3, -5895498799514734389
  %2513 = xor i64 %3, -1
  %2514 = and i64 %2513, -6899716137315347469
  %2515 = and i64 %3, 6899716137315347468
  %2516 = or i64 %2514, %2515
  %2517 = xor i64 1013788931200082744, %2516
  %2518 = xor i64 %3, -1
  %2519 = or i64 5895498799514734388, %2518
  %2520 = xor i64 %2519, -1
  %2521 = and i64 %2520, -1
  %2522 = or i64 %2517, %2521
  %2523 = xor i64 0, %2509
  %2524 = xor i64 %2523, %2511
  %2525 = xor i64 %2524, %2512
  %2526 = xor i64 %2525, %2522
  %2527 = mul i64 %2508, %2526
  %2528 = or i64 %3, -4321443378961428391
  %2529 = and i64 -4321443378961428391, %3
  %2530 = xor i64 -4321443378961428391, %3
  %2531 = or i64 %2529, %2530
  %2532 = add i64 %3, -1716604689408383700
  %2533 = sub i64 0, %3
  %2534 = add i64 1716604689408383700, %2533
  %2535 = sub i64 0, %2534
  %2536 = add i64 %3, 1092693683803787515
  %2537 = add i64 -5907289329344166421, %3
  %2538 = sub i64 %2537, -6999983013147953936
  %2539 = xor i64 %2528, %2536
  %2540 = xor i64 %2539, %2538
  %2541 = xor i64 %2540, %2535
  %2542 = xor i64 %2541, -7864014299026573671
  %2543 = xor i64 %2542, %2532
  %2544 = xor i64 %2543, %2531
  %2545 = and i64 %3, 384728460644080658
  %2546 = or i64 -384728460644080659, %3
  %2547 = sub i64 %2546, -384728460644080659
  %2548 = and i64 %3, -3662242735244608534
  %2549 = xor i64 %3, -1
  %2550 = or i64 3662242735244608533, %2549
  %2551 = xor i64 %2550, -1
  %2552 = and i64 %2551, -1
  %2553 = xor i64 %2545, 0
  %2554 = xor i64 %2553, %2552
  %2555 = xor i64 %2554, %2548
  %2556 = xor i64 %2555, %2547
  %2557 = mul i64 %2544, %2556
  %2558 = trunc i64 %2557 to i1
  %2559 = add i64 %3, 6324505540749583847
  %2560 = add i64 -1395839520134932897, %3
  %2561 = sub i64 %2560, -7720345060884516744
  %2562 = or i64 %3, 1701726445829059790
  %2563 = and i64 1701726445829059790, %3
  %2564 = xor i64 1701726445829059790, %3
  %2565 = or i64 %2563, %2564
  %2566 = xor i64 %2559, 5272662181551623055
  %2567 = xor i64 %2566, %2562
  %2568 = xor i64 %2567, %2565
  %2569 = xor i64 %2568, %2561
  %2570 = add i64 %3, 4448873262442694225
  %2571 = add i64 3292097642329788598, %3
  %2572 = add i64 %2571, 1156775620112905627
  %2573 = add i64 %3, 7595614915006036511
  %2574 = add i64 3096175984946412117, %3
  %2575 = sub i64 %2574, -4499438930059624394
  %2576 = or i64 %3, -7198833205230073979
  %2577 = xor i64 %3, -1
  %2578 = and i64 -7198833205230073979, %2577
  %2579 = add i64 %2578, %3
  %2580 = xor i64 0, %2572
  %2581 = xor i64 %2580, %2573
  %2582 = xor i64 %2581, %2576
  %2583 = xor i64 %2582, %2575
  %2584 = xor i64 %2583, %2570
  %2585 = xor i64 %2584, %2579
  %2586 = mul i64 %2569, %2585
  %2587 = trunc i64 %2586 to i1
  %2588 = add i64 %3, -7872897990845403714
  %2589 = sub i64 0, %3
  %2590 = add i64 7872897990845403714, %2589
  %2591 = sub i64 0, %2590
  %2592 = or i64 %3, -3403564841740885661
  %2593 = and i64 -3403564841740885661, %3
  %2594 = xor i64 -3403564841740885661, %3
  %2595 = or i64 %2593, %2594
  %2596 = xor i64 %2588, %2595
  %2597 = xor i64 %2596, %2592
  %2598 = xor i64 %2597, -2233120977216263479
  %2599 = xor i64 %2598, %2591
  %2600 = add i64 %3, 6383894563645630440
  %2601 = sub i64 0, %3
  %2602 = sub i64 6383894563645630440, %2601
  %2603 = or i64 %3, 542001227751997035
  %2604 = and i64 542001227751997035, %3
  %2605 = xor i64 542001227751997035, %3
  %2606 = or i64 %2604, %2605
  %2607 = and i64 %3, 7525741944647101277
  %2608 = or i64 -7525741944647101278, %3
  %2609 = sub i64 %2608, -7525741944647101278
  %2610 = xor i64 %2602, %2600
  %2611 = xor i64 %2610, %2606
  %2612 = xor i64 %2611, %2607
  %2613 = xor i64 %2612, 0
  %2614 = xor i64 %2613, %2609
  %2615 = xor i64 %2614, %2603
  %2616 = mul i64 %2599, %2615
  %2617 = trunc i64 %2616 to i32
  %2618 = and i64 %3, 5769465264338707408
  %2619 = or i64 -5769465264338707409, %3
  %2620 = sub i64 %2619, -5769465264338707409
  %2621 = add i64 %3, 3537705516831774985
  %2622 = add i64 3508542172134963261, %3
  %2623 = add i64 %2622, 29163344696811724
  %2624 = or i64 %3, 7319619062255530252
  %2625 = and i64 7319619062255530252, %3
  %2626 = xor i64 7319619062255530252, %3
  %2627 = or i64 %2625, %2626
  %2628 = xor i64 %2618, -940104196267267857
  %2629 = xor i64 %2628, %2620
  %2630 = xor i64 %2629, %2623
  %2631 = xor i64 %2630, %2621
  %2632 = xor i64 %2631, %2627
  %2633 = xor i64 %2632, %2624
  %2634 = add i64 %3, -5221343882221339932
  %2635 = sub i64 0, %3
  %2636 = add i64 5221343882221339932, %2635
  %2637 = sub i64 0, %2636
  %2638 = add i64 %3, -4097162282374779391
  %2639 = and i64 -4097162282374779391, %3
  %2640 = or i64 -4097162282374779391, %3
  %2641 = add i64 %2639, %2640
  %2642 = xor i64 %2637, %2638
  %2643 = xor i64 %2642, %2634
  %2644 = xor i64 %2643, %2641
  %2645 = xor i64 %2644, 0
  %2646 = mul i64 %2633, %2645
  %2647 = trunc i64 %2646 to i32
  call void @"9941920946239825184"(i32 %2368, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537073, i64* %2344, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %2410, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %2450, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %2491, i64 %2527, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %2558, i1 false, i1 false, i1 %2587, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %2617, i32 %2647, i1* null, i1* null)
  %2648 = load i64, i64* %2344, align 8
  %2649 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %2648
  store i8* bitcast (void (i1, i1, i1, i1, i1, i1, i1, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)* @render.extracted.3 to i8*), i8** %2649, align 8
  %2650 = alloca i64, align 8
  %2651 = and i64 %3, 5641288241274983460
  %2652 = or i64 -5641288241274983461, %3
  %2653 = sub i64 %2652, -5641288241274983461
  %2654 = add i64 %3, -6546875358167352016
  %2655 = sub i64 0, %3
  %2656 = sub i64 -6546875358167352016, %2655
  %2657 = xor i64 %2653, %2654
  %2658 = xor i64 %2657, 1964864665023395401
  %2659 = xor i64 %2658, %2656
  %2660 = xor i64 %2659, %2651
  %2661 = or i64 %3, -1605317790838416745
  %2662 = and i64 -1605317790838416745, %3
  %2663 = xor i64 -1605317790838416745, %3
  %2664 = or i64 %2662, %2663
  %2665 = add i64 %3, -439775701872845465
  %2666 = add i64 571610330770589843, %3
  %2667 = add i64 %2666, -1011386032643435308
  %2668 = and i64 %3, -5372607564325257785
  %2669 = xor i64 %3, -1
  %2670 = or i64 5372607564325257784, %2669
  %2671 = xor i64 %2670, -1
  %2672 = and i64 %2671, -1
  %2673 = xor i64 %2664, %2668
  %2674 = xor i64 %2673, %2667
  %2675 = xor i64 %2674, %2672
  %2676 = xor i64 %2675, %2661
  %2677 = xor i64 %2676, %2665
  %2678 = xor i64 %2677, 0
  %2679 = mul i64 %2660, %2678
  %2680 = trunc i64 %2679 to i1
  %2681 = or i64 %3, 2863467797325639677
  %2682 = xor i64 %3, -1
  %2683 = and i64 %2682, -5760447482462433545
  %2684 = and i64 %3, 5760447482462433544
  %2685 = or i64 %2683, %2684
  %2686 = xor i64 -7515431069612121846, %2685
  %2687 = xor i64 %3, -1
  %2688 = or i64 -2863467797325639678, %2687
  %2689 = xor i64 %2688, -1
  %2690 = and i64 %2689, -1
  %2691 = or i64 %2686, %2690
  %2692 = or i64 %3, 9097470658336724830
  %2693 = xor i64 %3, -1
  %2694 = and i64 %2693, 6329761434977936434
  %2695 = and i64 %3, -6329761434977936435
  %2696 = or i64 %2694, %2695
  %2697 = xor i64 2996970867447083884, %2696
  %2698 = xor i64 %3, -1
  %2699 = or i64 -9097470658336724831, %2698
  %2700 = xor i64 %2699, -1
  %2701 = and i64 %2700, -1
  %2702 = or i64 %2697, %2701
  %2703 = or i64 %3, 4908612550952365761
  %2704 = xor i64 %3, -1
  %2705 = and i64 %2704, -9097907096026000967
  %2706 = and i64 %3, 9097907096026000966
  %2707 = or i64 %2705, %2706
  %2708 = xor i64 -4205420143048163464, %2707
  %2709 = xor i64 %3, -1
  %2710 = or i64 -4908612550952365762, %2709
  %2711 = xor i64 %2710, -1
  %2712 = and i64 %2711, -1
  %2713 = or i64 %2708, %2712
  %2714 = xor i64 %2692, %2691
  %2715 = xor i64 %2714, %2713
  %2716 = xor i64 %2715, %2703
  %2717 = xor i64 %2716, -3672861934396031489
  %2718 = xor i64 %2717, %2702
  %2719 = xor i64 %2718, %2681
  %2720 = add i64 %3, 8873968614135661394
  %2721 = sub i64 0, %3
  %2722 = add i64 -8873968614135661394, %2721
  %2723 = sub i64 0, %2722
  %2724 = add i64 %3, -5232986163918701386
  %2725 = xor i64 -5232986163918701386, %3
  %2726 = and i64 -5232986163918701386, %3
  %2727 = mul i64 2, %2726
  %2728 = add i64 %2725, %2727
  %2729 = or i64 %3, -3769206065981689154
  %2730 = xor i64 %3, -1
  %2731 = and i64 %2730, 3988876129448282042
  %2732 = and i64 %3, -3988876129448282043
  %2733 = or i64 %2731, %2732
  %2734 = xor i64 -222291868272741116, %2733
  %2735 = xor i64 %3, -1
  %2736 = or i64 3769206065981689153, %2735
  %2737 = xor i64 %2736, -1
  %2738 = and i64 %2737, -1
  %2739 = or i64 %2734, %2738
  %2740 = xor i64 %2724, 0
  %2741 = xor i64 %2740, %2720
  %2742 = xor i64 %2741, %2723
  %2743 = xor i64 %2742, %2739
  %2744 = xor i64 %2743, %2728
  %2745 = xor i64 %2744, %2729
  %2746 = mul i64 %2719, %2745
  %2747 = add i64 %3, -5963252655404224298
  %2748 = and i64 -5963252655404224298, %3
  %2749 = or i64 -5963252655404224298, %3
  %2750 = add i64 %2748, %2749
  %2751 = and i64 %3, -4888299727679594608
  %2752 = xor i64 %3, -1
  %2753 = or i64 4888299727679594607, %2752
  %2754 = xor i64 %2753, -1
  %2755 = and i64 %2754, -1
  %2756 = or i64 %3, -7141532033271587425
  %2757 = xor i64 %3, -1
  %2758 = and i64 %2757, 5137563413266115294
  %2759 = and i64 %3, -5137563413266115295
  %2760 = or i64 %2758, %2759
  %2761 = xor i64 -2618732406076393663, %2760
  %2762 = xor i64 %3, -1
  %2763 = or i64 7141532033271587424, %2762
  %2764 = xor i64 %2763, -1
  %2765 = and i64 %2764, -1
  %2766 = or i64 %2761, %2765
  %2767 = xor i64 %2747, -1610603315179207531
  %2768 = xor i64 %2767, %2756
  %2769 = xor i64 %2768, %2750
  %2770 = xor i64 %2769, %2751
  %2771 = xor i64 %2770, %2755
  %2772 = xor i64 %2771, %2766
  %2773 = or i64 %3, -4722537956520396802
  %2774 = and i64 -4722537956520396802, %3
  %2775 = xor i64 -4722537956520396802, %3
  %2776 = or i64 %2774, %2775
  %2777 = add i64 %3, -8926110718959463015
  %2778 = xor i64 -8926110718959463015, %3
  %2779 = and i64 -8926110718959463015, %3
  %2780 = mul i64 2, %2779
  %2781 = add i64 %2778, %2780
  %2782 = and i64 %3, -2470629887764733813
  %2783 = xor i64 %3, -1
  %2784 = or i64 2470629887764733812, %2783
  %2785 = xor i64 %2784, -1
  %2786 = and i64 %2785, -1
  %2787 = xor i64 %2786, %2776
  %2788 = xor i64 %2787, %2773
  %2789 = xor i64 %2788, 0
  %2790 = xor i64 %2789, %2782
  %2791 = xor i64 %2790, %2777
  %2792 = xor i64 %2791, %2781
  %2793 = mul i64 %2772, %2792
  %2794 = or i64 %3, -7357235022075315097
  %2795 = xor i64 %3, -1
  %2796 = and i64 %2795, -9030876506434958234
  %2797 = and i64 %3, 9030876506434958233
  %2798 = or i64 %2796, %2797
  %2799 = xor i64 1967571730518323201, %2798
  %2800 = xor i64 %3, -1
  %2801 = or i64 7357235022075315096, %2800
  %2802 = xor i64 %2801, -1
  %2803 = and i64 %2802, -1
  %2804 = or i64 %2799, %2803
  %2805 = add i64 %3, 6150768947722310298
  %2806 = add i64 9165467311964034303, %3
  %2807 = sub i64 %2806, 3014698364241724005
  %2808 = xor i64 %2804, %2807
  %2809 = xor i64 %2808, %2794
  %2810 = xor i64 %2809, %2805
  %2811 = xor i64 %2810, -7648979749853281453
  %2812 = or i64 %3, 5725644484479780350
  %2813 = and i64 5725644484479780350, %3
  %2814 = xor i64 5725644484479780350, %3
  %2815 = or i64 %2813, %2814
  %2816 = and i64 %3, 2138800340323728670
  %2817 = xor i64 %3, -1
  %2818 = xor i64 2138800340323728670, %2817
  %2819 = and i64 %2818, 2138800340323728670
  %2820 = xor i64 %2815, %2812
  %2821 = xor i64 %2820, %2816
  %2822 = xor i64 %2821, 0
  %2823 = xor i64 %2822, %2819
  %2824 = mul i64 %2811, %2823
  %2825 = trunc i64 %2824 to i1
  %2826 = and i64 %3, -2802995664521767900
  %2827 = xor i64 %3, -1
  %2828 = xor i64 -2802995664521767900, %2827
  %2829 = and i64 %2828, -2802995664521767900
  %2830 = or i64 %3, -2429421097994765808
  %2831 = xor i64 %3, -1
  %2832 = and i64 -2429421097994765808, %2831
  %2833 = add i64 %2832, %3
  %2834 = and i64 %3, 5636340432556415767
  %2835 = xor i64 %3, -1
  %2836 = xor i64 5636340432556415767, %2835
  %2837 = and i64 %2836, 5636340432556415767
  %2838 = xor i64 %2826, %2834
  %2839 = xor i64 %2838, %2837
  %2840 = xor i64 %2839, %2830
  %2841 = xor i64 %2840, %2829
  %2842 = xor i64 %2841, 6141447204229631533
  %2843 = xor i64 %2842, %2833
  %2844 = add i64 %3, -4261113487655179883
  %2845 = and i64 -4261113487655179883, %3
  %2846 = or i64 -4261113487655179883, %3
  %2847 = add i64 %2845, %2846
  %2848 = and i64 %3, -3640322290303909757
  %2849 = xor i64 %3, -1
  %2850 = or i64 3640322290303909756, %2849
  %2851 = xor i64 %2850, -1
  %2852 = and i64 %2851, -1
  %2853 = add i64 %3, -6126559041247216918
  %2854 = sub i64 0, %3
  %2855 = add i64 6126559041247216918, %2854
  %2856 = sub i64 0, %2855
  %2857 = xor i64 %2848, %2852
  %2858 = xor i64 %2857, %2847
  %2859 = xor i64 %2858, %2844
  %2860 = xor i64 %2859, %2853
  %2861 = xor i64 %2860, %2856
  %2862 = xor i64 %2861, 0
  %2863 = mul i64 %2843, %2862
  %2864 = trunc i64 %2863 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537078, i64* %2650, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %2680, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %2746, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %2793, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %2825, i1 %2864, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %2865 = load i64, i64* %2650, align 8
  %2866 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %2865
  store i8* bitcast (void ()* @render..split.4 to i8*), i8** %2866, align 8
  %2867 = alloca i64, align 8
  %2868 = or i64 %3, -5692496054583411277
  %2869 = xor i64 %3, -1
  %2870 = and i64 %2869, 1152294284915946357
  %2871 = and i64 %3, -1152294284915946358
  %2872 = or i64 %2870, %2871
  %2873 = xor i64 -4684318160640373050, %2872
  %2874 = xor i64 %3, -1
  %2875 = or i64 5692496054583411276, %2874
  %2876 = xor i64 %2875, -1
  %2877 = and i64 %2876, -1
  %2878 = or i64 %2873, %2877
  %2879 = or i64 %3, 3135534087840858533
  %2880 = xor i64 %3, -1
  %2881 = and i64 %2880, -7000565635431557419
  %2882 = and i64 %3, 7000565635431557418
  %2883 = or i64 %2881, %2882
  %2884 = xor i64 -5378607443504162960, %2883
  %2885 = xor i64 %3, -1
  %2886 = or i64 -3135534087840858534, %2885
  %2887 = xor i64 %2886, -1
  %2888 = and i64 %2887, -1
  %2889 = or i64 %2884, %2888
  %2890 = xor i64 %2878, %2889
  %2891 = xor i64 %2890, %2879
  %2892 = xor i64 %2891, %2868
  %2893 = xor i64 %2892, 4123884599878290485
  %2894 = add i64 %3, -3804813385832593311
  %2895 = add i64 -1568336156270543570, %3
  %2896 = sub i64 %2895, 2236477229562049741
  %2897 = add i64 %3, -5508603071226222421
  %2898 = xor i64 -5508603071226222421, %3
  %2899 = and i64 -5508603071226222421, %3
  %2900 = mul i64 2, %2899
  %2901 = add i64 %2898, %2900
  %2902 = xor i64 %2894, %2901
  %2903 = xor i64 %2902, 0
  %2904 = xor i64 %2903, %2897
  %2905 = xor i64 %2904, %2896
  %2906 = mul i64 %2893, %2905
  %2907 = trunc i64 %2906 to i1
  %2908 = add i64 %3, -9143780861211810122
  %2909 = sub i64 0, %3
  %2910 = sub i64 -9143780861211810122, %2909
  %2911 = and i64 %3, 3578370671338992259
  %2912 = or i64 -3578370671338992260, %3
  %2913 = sub i64 %2912, -3578370671338992260
  %2914 = xor i64 %2910, %2913
  %2915 = xor i64 %2914, %2908
  %2916 = xor i64 %2915, %2911
  %2917 = xor i64 %2916, 3917404529771885599
  %2918 = or i64 %3, -7782787075449138294
  %2919 = and i64 -7782787075449138294, %3
  %2920 = xor i64 -7782787075449138294, %3
  %2921 = or i64 %2919, %2920
  %2922 = and i64 %3, -2310681020857289054
  %2923 = xor i64 %3, -1
  %2924 = or i64 2310681020857289053, %2923
  %2925 = xor i64 %2924, -1
  %2926 = and i64 %2925, -1
  %2927 = and i64 %3, 1836535354834781113
  %2928 = xor i64 %3, -1
  %2929 = xor i64 1836535354834781113, %2928
  %2930 = and i64 %2929, 1836535354834781113
  %2931 = xor i64 %2930, %2927
  %2932 = xor i64 %2931, %2926
  %2933 = xor i64 %2932, %2921
  %2934 = xor i64 %2933, %2922
  %2935 = xor i64 %2934, 0
  %2936 = xor i64 %2935, %2918
  %2937 = mul i64 %2917, %2936
  %2938 = trunc i64 %2937 to i32
  %2939 = and i64 %3, -4135437312231231166
  %2940 = xor i64 %3, -1
  %2941 = xor i64 -4135437312231231166, %2940
  %2942 = and i64 %2941, -4135437312231231166
  %2943 = add i64 %3, -3392746004859847938
  %2944 = add i64 -8479117396748532330, %3
  %2945 = add i64 %2944, 5086371391888684392
  %2946 = or i64 %3, -5624889598619370264
  %2947 = xor i64 %3, -1
  %2948 = and i64 %2947, -5793064958544620702
  %2949 = and i64 %3, 5793064958544620701
  %2950 = or i64 %2948, %2949
  %2951 = xor i64 2191712236537376650, %2950
  %2952 = xor i64 %3, -1
  %2953 = or i64 5624889598619370263, %2952
  %2954 = xor i64 %2953, -1
  %2955 = and i64 %2954, -1
  %2956 = or i64 %2951, %2955
  %2957 = xor i64 %2946, %2942
  %2958 = xor i64 %2957, %2939
  %2959 = xor i64 %2958, %2956
  %2960 = xor i64 %2959, %2943
  %2961 = xor i64 %2960, %2945
  %2962 = xor i64 %2961, -3274568236048652855
  %2963 = or i64 %3, -1256438045449412911
  %2964 = xor i64 %3, -1
  %2965 = and i64 %2964, 7173459242627840166
  %2966 = and i64 %3, -7173459242627840167
  %2967 = or i64 %2965, %2966
  %2968 = xor i64 -8278456771117275529, %2967
  %2969 = xor i64 %3, -1
  %2970 = or i64 1256438045449412910, %2969
  %2971 = xor i64 %2970, -1
  %2972 = and i64 %2971, -1
  %2973 = or i64 %2968, %2972
  %2974 = or i64 %3, -1132462053264315900
  %2975 = and i64 -1132462053264315900, %3
  %2976 = xor i64 -1132462053264315900, %3
  %2977 = or i64 %2975, %2976
  %2978 = xor i64 0, %2973
  %2979 = xor i64 %2978, %2977
  %2980 = xor i64 %2979, %2963
  %2981 = xor i64 %2980, %2974
  %2982 = mul i64 %2962, %2981
  %2983 = and i64 %3, -2316745789920702146
  %2984 = or i64 2316745789920702145, %3
  %2985 = sub i64 %2984, 2316745789920702145
  %2986 = and i64 %3, -1096879358573077297
  %2987 = or i64 1096879358573077296, %3
  %2988 = sub i64 %2987, 1096879358573077296
  %2989 = xor i64 %2985, %2983
  %2990 = xor i64 %2989, %2988
  %2991 = xor i64 %2990, 593997175858535881
  %2992 = xor i64 %2991, %2986
  %2993 = add i64 %3, 6846775916456276116
  %2994 = add i64 2561004267365119543, %3
  %2995 = sub i64 %2994, -4285771649091156573
  %2996 = and i64 %3, 3290937122349352162
  %2997 = xor i64 %3, -1
  %2998 = xor i64 3290937122349352162, %2997
  %2999 = and i64 %2998, 3290937122349352162
  %3000 = xor i64 0, %2996
  %3001 = xor i64 %3000, %2993
  %3002 = xor i64 %3001, %2999
  %3003 = xor i64 %3002, %2995
  %3004 = mul i64 %2992, %3003
  %3005 = trunc i64 %3004 to i1
  %3006 = or i64 %3, -8692343131282526451
  %3007 = xor i64 %3, -1
  %3008 = and i64 %3007, 310513990041537526
  %3009 = and i64 %3, -310513990041537527
  %3010 = or i64 %3008, %3009
  %3011 = xor i64 -9002206175807265541, %3010
  %3012 = xor i64 %3, -1
  %3013 = or i64 8692343131282526450, %3012
  %3014 = xor i64 %3013, -1
  %3015 = and i64 %3014, -1
  %3016 = or i64 %3011, %3015
  %3017 = or i64 %3, -8274658095555283104
  %3018 = xor i64 %3, -1
  %3019 = and i64 -8274658095555283104, %3018
  %3020 = add i64 %3019, %3
  %3021 = xor i64 %3006, %3016
  %3022 = xor i64 %3021, %3020
  %3023 = xor i64 %3022, -5520087408570828499
  %3024 = xor i64 %3023, %3017
  %3025 = or i64 %3, 8204750395494497967
  %3026 = and i64 8204750395494497967, %3
  %3027 = xor i64 8204750395494497967, %3
  %3028 = or i64 %3026, %3027
  %3029 = add i64 %3, -8093801827751191499
  %3030 = add i64 -5199290008480652532, %3
  %3031 = add i64 %3030, -2894511819270538967
  %3032 = and i64 %3, -8610093767223248703
  %3033 = or i64 8610093767223248702, %3
  %3034 = sub i64 %3033, 8610093767223248702
  %3035 = xor i64 %3032, %3028
  %3036 = xor i64 %3035, %3025
  %3037 = xor i64 %3036, %3029
  %3038 = xor i64 %3037, 0
  %3039 = xor i64 %3038, %3031
  %3040 = xor i64 %3039, %3034
  %3041 = mul i64 %3024, %3040
  %3042 = trunc i64 %3041 to i32
  %3043 = or i64 %3, -6440873852925512020
  %3044 = and i64 -6440873852925512020, %3
  %3045 = xor i64 -6440873852925512020, %3
  %3046 = or i64 %3044, %3045
  %3047 = or i64 %3, 1395955169985378993
  %3048 = xor i64 %3, -1
  %3049 = and i64 %3048, 7378489735437287074
  %3050 = and i64 %3, -7378489735437287075
  %3051 = or i64 %3049, %3050
  %3052 = xor i64 8447280135031473171, %3051
  %3053 = xor i64 %3, -1
  %3054 = or i64 -1395955169985378994, %3053
  %3055 = xor i64 %3054, -1
  %3056 = and i64 %3055, -1
  %3057 = or i64 %3052, %3056
  %3058 = and i64 %3, -3475214155961328394
  %3059 = or i64 3475214155961328393, %3
  %3060 = sub i64 %3059, 3475214155961328393
  %3061 = xor i64 %3047, %3058
  %3062 = xor i64 %3061, %3043
  %3063 = xor i64 %3062, -424153790445806027
  %3064 = xor i64 %3063, %3046
  %3065 = xor i64 %3064, %3057
  %3066 = xor i64 %3065, %3060
  %3067 = add i64 %3, -2256157954894755589
  %3068 = xor i64 -2256157954894755589, %3
  %3069 = and i64 -2256157954894755589, %3
  %3070 = mul i64 2, %3069
  %3071 = add i64 %3068, %3070
  %3072 = or i64 %3, 483450371420369877
  %3073 = xor i64 %3, -1
  %3074 = and i64 %3073, -1200066857426780878
  %3075 = and i64 %3, 1200066857426780877
  %3076 = or i64 %3074, %3075
  %3077 = xor i64 -1590599699972108569, %3076
  %3078 = xor i64 %3, -1
  %3079 = or i64 -483450371420369878, %3078
  %3080 = xor i64 %3079, -1
  %3081 = and i64 %3080, -1
  %3082 = or i64 %3077, %3081
  %3083 = xor i64 %3067, %3071
  %3084 = xor i64 %3083, 0
  %3085 = xor i64 %3084, %3082
  %3086 = xor i64 %3085, %3072
  %3087 = mul i64 %3066, %3086
  %3088 = trunc i64 %3087 to i1
  %3089 = add i64 %3, 7636255083633410872
  %3090 = and i64 7636255083633410872, %3
  %3091 = or i64 7636255083633410872, %3
  %3092 = add i64 %3090, %3091
  %3093 = or i64 %3, -3889172262095150139
  %3094 = xor i64 %3, -1
  %3095 = and i64 %3094, 6772224116336547652
  %3096 = and i64 %3, -6772224116336547653
  %3097 = or i64 %3095, %3096
  %3098 = xor i64 -7494790649240685439, %3097
  %3099 = xor i64 %3, -1
  %3100 = or i64 3889172262095150138, %3099
  %3101 = xor i64 %3100, -1
  %3102 = and i64 %3101, -1
  %3103 = or i64 %3098, %3102
  %3104 = xor i64 %3089, -3614469487918670775
  %3105 = xor i64 %3104, %3103
  %3106 = xor i64 %3105, %3093
  %3107 = xor i64 %3106, %3092
  %3108 = and i64 %3, -3833925841781053491
  %3109 = xor i64 %3, -1
  %3110 = xor i64 -3833925841781053491, %3109
  %3111 = and i64 %3110, -3833925841781053491
  %3112 = or i64 %3, -8746110467834131927
  %3113 = xor i64 %3, -1
  %3114 = and i64 -8746110467834131927, %3113
  %3115 = add i64 %3114, %3
  %3116 = xor i64 %3108, %3111
  %3117 = xor i64 %3116, 0
  %3118 = xor i64 %3117, %3115
  %3119 = xor i64 %3118, %3112
  %3120 = mul i64 %3107, %3119
  %3121 = trunc i64 %3120 to i1
  %3122 = or i64 %3, -552952363811147411
  %3123 = and i64 -552952363811147411, %3
  %3124 = xor i64 -552952363811147411, %3
  %3125 = or i64 %3123, %3124
  %3126 = and i64 %3, -3627719668500086005
  %3127 = or i64 3627719668500086004, %3
  %3128 = sub i64 %3127, 3627719668500086004
  %3129 = xor i64 %3125, 2748540504366436497
  %3130 = xor i64 %3129, %3128
  %3131 = xor i64 %3130, %3122
  %3132 = xor i64 %3131, %3126
  %3133 = add i64 %3, 5411991000184437539
  %3134 = sub i64 0, %3
  %3135 = sub i64 5411991000184437539, %3134
  %3136 = or i64 %3, -4824475962870460382
  %3137 = xor i64 %3, -1
  %3138 = and i64 %3137, -7135856645065358511
  %3139 = and i64 %3, 7135856645065358510
  %3140 = or i64 %3138, %3139
  %3141 = xor i64 2446682322846012275, %3140
  %3142 = xor i64 %3, -1
  %3143 = or i64 4824475962870460381, %3142
  %3144 = xor i64 %3143, -1
  %3145 = and i64 %3144, -1
  %3146 = or i64 %3141, %3145
  %3147 = xor i64 %3136, %3135
  %3148 = xor i64 %3147, %3133
  %3149 = xor i64 %3148, 0
  %3150 = xor i64 %3149, %3146
  %3151 = mul i64 %3132, %3150
  %3152 = trunc i64 %3151 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537082, i64* %2867, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %2907, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %2938, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %2982, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %3005, i1* null, i64* null, i8*** null, i64 0, i32 %3042, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %3088, i1 false, i1 false, i1 false, i1 %3121, i1 false, i1 %3152, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %3153 = load i64, i64* %2867, align 8
  %3154 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %3153
  store i8* bitcast (i1 (i64, i64*)* @render.extracted.5 to i8*), i8** %3154, align 8
  %3155 = alloca i64, align 8
  %3156 = add i64 %3, -2257744847658420319
  %3157 = add i64 2624501986053302906, %3
  %3158 = sub i64 %3157, 4882246833711723225
  %3159 = add i64 %3, -8739667683309202195
  %3160 = sub i64 0, %3
  %3161 = sub i64 -8739667683309202195, %3160
  %3162 = xor i64 %3156, %3158
  %3163 = xor i64 %3162, 7848707334154052301
  %3164 = xor i64 %3163, %3161
  %3165 = xor i64 %3164, %3159
  %3166 = and i64 %3, 2203377508310536853
  %3167 = xor i64 %3, -1
  %3168 = or i64 -2203377508310536854, %3167
  %3169 = xor i64 %3168, -1
  %3170 = and i64 %3169, -1
  %3171 = or i64 %3, -1082582530758757015
  %3172 = xor i64 %3, -1
  %3173 = and i64 -1082582530758757015, %3172
  %3174 = add i64 %3173, %3
  %3175 = add i64 %3, 7507997315236801130
  %3176 = and i64 7507997315236801130, %3
  %3177 = or i64 7507997315236801130, %3
  %3178 = add i64 %3176, %3177
  %3179 = xor i64 %3178, %3174
  %3180 = xor i64 %3179, %3170
  %3181 = xor i64 %3180, %3175
  %3182 = xor i64 %3181, %3166
  %3183 = xor i64 %3182, %3171
  %3184 = xor i64 %3183, -961301984491580938
  %3185 = mul i64 %3165, %3184
  %3186 = and i64 %3, -2117144841398582431
  %3187 = xor i64 %3, -1
  %3188 = xor i64 -2117144841398582431, %3187
  %3189 = and i64 %3188, -2117144841398582431
  %3190 = or i64 %3, -6625912036281718532
  %3191 = and i64 -6625912036281718532, %3
  %3192 = xor i64 -6625912036281718532, %3
  %3193 = or i64 %3191, %3192
  %3194 = xor i64 %3190, -8362575479717847397
  %3195 = xor i64 %3194, %3186
  %3196 = xor i64 %3195, %3193
  %3197 = xor i64 %3196, %3189
  %3198 = add i64 %3, 1860413366760507128
  %3199 = add i64 -3889253329560768655, %3
  %3200 = add i64 %3199, 5749666696321275783
  %3201 = and i64 %3, 8256377268780266663
  %3202 = xor i64 %3, -1
  %3203 = xor i64 8256377268780266663, %3202
  %3204 = and i64 %3203, 8256377268780266663
  %3205 = xor i64 %3201, 0
  %3206 = xor i64 %3205, %3200
  %3207 = xor i64 %3206, %3198
  %3208 = xor i64 %3207, %3204
  %3209 = mul i64 %3197, %3208
  %3210 = trunc i64 %3209 to i1
  %3211 = add i64 %3, 2635500389367817467
  %3212 = sub i64 0, %3
  %3213 = add i64 -2635500389367817467, %3212
  %3214 = sub i64 0, %3213
  %3215 = add i64 %3, -3631090935436360644
  %3216 = sub i64 0, %3
  %3217 = sub i64 -3631090935436360644, %3216
  %3218 = xor i64 %3211, %3214
  %3219 = xor i64 %3218, %3217
  %3220 = xor i64 %3219, -4256971401019287225
  %3221 = xor i64 %3220, %3215
  %3222 = add i64 %3, -9131993997966597809
  %3223 = sub i64 0, %3
  %3224 = add i64 9131993997966597809, %3223
  %3225 = sub i64 0, %3224
  %3226 = and i64 %3, -5700244931142625763
  %3227 = xor i64 %3, -1
  %3228 = xor i64 -5700244931142625763, %3227
  %3229 = and i64 %3228, -5700244931142625763
  %3230 = or i64 %3, 2255945950232293504
  %3231 = xor i64 %3, -1
  %3232 = and i64 2255945950232293504, %3231
  %3233 = add i64 %3232, %3
  %3234 = xor i64 0, %3226
  %3235 = xor i64 %3234, %3233
  %3236 = xor i64 %3235, %3230
  %3237 = xor i64 %3236, %3225
  %3238 = xor i64 %3237, %3229
  %3239 = xor i64 %3238, %3222
  %3240 = mul i64 %3221, %3239
  %3241 = add i64 %3, -8839066443587872037
  %3242 = and i64 -8839066443587872037, %3
  %3243 = or i64 -8839066443587872037, %3
  %3244 = add i64 %3242, %3243
  %3245 = and i64 %3, 7361690002635648107
  %3246 = or i64 -7361690002635648108, %3
  %3247 = sub i64 %3246, -7361690002635648108
  %3248 = or i64 %3, -6876998993516343998
  %3249 = and i64 -6876998993516343998, %3
  %3250 = xor i64 -6876998993516343998, %3
  %3251 = or i64 %3249, %3250
  %3252 = xor i64 %3247, %3248
  %3253 = xor i64 %3252, %3244
  %3254 = xor i64 %3253, %3245
  %3255 = xor i64 %3254, %3241
  %3256 = xor i64 %3255, -408371047695187293
  %3257 = xor i64 %3256, %3251
  %3258 = and i64 %3, 1193774371346785480
  %3259 = or i64 -1193774371346785481, %3
  %3260 = sub i64 %3259, -1193774371346785481
  %3261 = or i64 %3, 8587384129734744246
  %3262 = xor i64 %3, -1
  %3263 = and i64 8587384129734744246, %3262
  %3264 = add i64 %3263, %3
  %3265 = xor i64 %3258, %3260
  %3266 = xor i64 %3265, 0
  %3267 = xor i64 %3266, %3261
  %3268 = xor i64 %3267, %3264
  %3269 = mul i64 %3257, %3268
  %3270 = trunc i64 %3269 to i32
  %3271 = add i64 %3, -3345219107410732437
  %3272 = sub i64 0, %3
  %3273 = sub i64 -3345219107410732437, %3272
  %3274 = add i64 %3, -1425980220996333065
  %3275 = xor i64 -1425980220996333065, %3
  %3276 = and i64 -1425980220996333065, %3
  %3277 = mul i64 2, %3276
  %3278 = add i64 %3275, %3277
  %3279 = xor i64 %3278, -3586378805078447709
  %3280 = xor i64 %3279, %3271
  %3281 = xor i64 %3280, %3274
  %3282 = xor i64 %3281, %3273
  %3283 = or i64 %3, 6785398404065593240
  %3284 = xor i64 %3, -1
  %3285 = and i64 6785398404065593240, %3284
  %3286 = add i64 %3285, %3
  %3287 = and i64 %3, -1848933131697413608
  %3288 = or i64 1848933131697413607, %3
  %3289 = sub i64 %3288, 1848933131697413607
  %3290 = xor i64 %3289, %3286
  %3291 = xor i64 %3290, 0
  %3292 = xor i64 %3291, %3287
  %3293 = xor i64 %3292, %3283
  %3294 = mul i64 %3282, %3293
  %3295 = or i64 %3, -4924027021104383361
  %3296 = and i64 -4924027021104383361, %3
  %3297 = xor i64 -4924027021104383361, %3
  %3298 = or i64 %3296, %3297
  %3299 = or i64 %3, 2540302180308536736
  %3300 = xor i64 %3, -1
  %3301 = and i64 2540302180308536736, %3300
  %3302 = add i64 %3301, %3
  %3303 = and i64 %3, 1486846748594137779
  %3304 = xor i64 %3, -1
  %3305 = xor i64 1486846748594137779, %3304
  %3306 = and i64 %3305, 1486846748594137779
  %3307 = xor i64 -8525784215975797057, %3299
  %3308 = xor i64 %3307, %3302
  %3309 = xor i64 %3308, %3295
  %3310 = xor i64 %3309, %3298
  %3311 = xor i64 %3310, %3303
  %3312 = xor i64 %3311, %3306
  %3313 = or i64 %3, -6850479765342578396
  %3314 = xor i64 %3, -1
  %3315 = and i64 %3314, 5079665552916452648
  %3316 = and i64 %3, -5079665552916452649
  %3317 = or i64 %3315, %3316
  %3318 = xor i64 -1832775816935732212, %3317
  %3319 = xor i64 %3, -1
  %3320 = or i64 6850479765342578395, %3319
  %3321 = xor i64 %3320, -1
  %3322 = and i64 %3321, -1
  %3323 = or i64 %3318, %3322
  %3324 = add i64 %3, 7750417335521565834
  %3325 = and i64 7750417335521565834, %3
  %3326 = or i64 7750417335521565834, %3
  %3327 = add i64 %3325, %3326
  %3328 = add i64 %3, 111176259752498761
  %3329 = add i64 4909388520454961853, %3
  %3330 = add i64 %3329, -4798212260702463092
  %3331 = xor i64 0, %3323
  %3332 = xor i64 %3331, %3330
  %3333 = xor i64 %3332, %3313
  %3334 = xor i64 %3333, %3328
  %3335 = xor i64 %3334, %3324
  %3336 = xor i64 %3335, %3327
  %3337 = mul i64 %3312, %3336
  %3338 = or i64 %3, -4785517205991548914
  %3339 = xor i64 %3, -1
  %3340 = and i64 -4785517205991548914, %3339
  %3341 = add i64 %3340, %3
  %3342 = or i64 %3, -4861194505942009093
  %3343 = xor i64 %3, -1
  %3344 = and i64 %3343, 5175379146958832458
  %3345 = and i64 %3, -5175379146958832459
  %3346 = or i64 %3344, %3345
  %3347 = xor i64 -334617999953823311, %3346
  %3348 = xor i64 %3, -1
  %3349 = or i64 4861194505942009092, %3348
  %3350 = xor i64 %3349, -1
  %3351 = and i64 %3350, -1
  %3352 = or i64 %3347, %3351
  %3353 = xor i64 %3352, %3338
  %3354 = xor i64 %3353, -3748277706251725999
  %3355 = xor i64 %3354, %3342
  %3356 = xor i64 %3355, %3341
  %3357 = add i64 %3, 3641225482226483199
  %3358 = xor i64 3641225482226483199, %3
  %3359 = and i64 3641225482226483199, %3
  %3360 = mul i64 2, %3359
  %3361 = add i64 %3358, %3360
  %3362 = or i64 %3, 517889041478716444
  %3363 = xor i64 %3, -1
  %3364 = and i64 517889041478716444, %3363
  %3365 = add i64 %3364, %3
  %3366 = or i64 %3, -2754315339125129089
  %3367 = xor i64 %3, -1
  %3368 = and i64 %3367, -3808255717545537494
  %3369 = and i64 %3, 3808255717545537493
  %3370 = or i64 %3368, %3369
  %3371 = xor i64 1360350217862418517, %3370
  %3372 = xor i64 %3, -1
  %3373 = or i64 2754315339125129088, %3372
  %3374 = xor i64 %3373, -1
  %3375 = and i64 %3374, -1
  %3376 = or i64 %3371, %3375
  %3377 = xor i64 %3361, %3365
  %3378 = xor i64 %3377, %3362
  %3379 = xor i64 %3378, %3376
  %3380 = xor i64 %3379, 0
  %3381 = xor i64 %3380, %3357
  %3382 = xor i64 %3381, %3366
  %3383 = mul i64 %3356, %3382
  %3384 = trunc i64 %3383 to i1
  %3385 = and i64 %3, 1529948806834224703
  %3386 = xor i64 %3, -1
  %3387 = or i64 -1529948806834224704, %3386
  %3388 = xor i64 %3387, -1
  %3389 = and i64 %3388, -1
  %3390 = add i64 %3, -5148187584028208555
  %3391 = xor i64 -5148187584028208555, %3
  %3392 = and i64 -5148187584028208555, %3
  %3393 = mul i64 2, %3392
  %3394 = add i64 %3391, %3393
  %3395 = or i64 %3, -7476676402004299040
  %3396 = xor i64 %3, -1
  %3397 = and i64 %3396, 6821106906204001714
  %3398 = and i64 %3, -6821106906204001715
  %3399 = or i64 %3397, %3398
  %3400 = xor i64 -4137414995468343470, %3399
  %3401 = xor i64 %3, -1
  %3402 = or i64 7476676402004299039, %3401
  %3403 = xor i64 %3402, -1
  %3404 = and i64 %3403, -1
  %3405 = or i64 %3400, %3404
  %3406 = xor i64 %3395, -4213706794991766509
  %3407 = xor i64 %3406, %3389
  %3408 = xor i64 %3407, %3405
  %3409 = xor i64 %3408, %3394
  %3410 = xor i64 %3409, %3390
  %3411 = xor i64 %3410, %3385
  %3412 = add i64 %3, -4362433222100056656
  %3413 = and i64 -4362433222100056656, %3
  %3414 = or i64 -4362433222100056656, %3
  %3415 = add i64 %3413, %3414
  %3416 = or i64 %3, 818849513691313477
  %3417 = and i64 818849513691313477, %3
  %3418 = xor i64 818849513691313477, %3
  %3419 = or i64 %3417, %3418
  %3420 = and i64 %3, -25489947943654235
  %3421 = or i64 25489947943654234, %3
  %3422 = sub i64 %3421, 25489947943654234
  %3423 = xor i64 %3420, %3415
  %3424 = xor i64 %3423, 0
  %3425 = xor i64 %3424, %3419
  %3426 = xor i64 %3425, %3416
  %3427 = xor i64 %3426, %3412
  %3428 = xor i64 %3427, %3422
  %3429 = mul i64 %3411, %3428
  %3430 = trunc i64 %3429 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3185, i64* %3155, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %3210, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %3240, i32 %3270, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %3294, i64 0, i1* null, i1* null, i1* null, i64 %3337, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %3384, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 %3430, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %3431 = load i64, i64* %3155, align 8
  %3432 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %3431
  store i8* bitcast (i1 (i64, i64, i64*, i64*, i1*)* @render.extracted.6 to i8*), i8** %3432, align 8
  %3433 = alloca i64, align 8
  %3434 = or i64 %3, -1232258584424464000
  %3435 = xor i64 %3, -1
  %3436 = and i64 -1232258584424464000, %3435
  %3437 = add i64 %3436, %3
  %3438 = add i64 %3, -8808459738000221100
  %3439 = and i64 -8808459738000221100, %3
  %3440 = or i64 -8808459738000221100, %3
  %3441 = add i64 %3439, %3440
  %3442 = or i64 %3, 3455588236143885447
  %3443 = xor i64 %3, -1
  %3444 = and i64 %3443, -6531150778868936999
  %3445 = and i64 %3, 6531150778868936998
  %3446 = or i64 %3444, %3445
  %3447 = xor i64 -8455499738867846562, %3446
  %3448 = xor i64 %3, -1
  %3449 = or i64 -3455588236143885448, %3448
  %3450 = xor i64 %3449, -1
  %3451 = and i64 %3450, -1
  %3452 = or i64 %3447, %3451
  %3453 = xor i64 %3441, -875557895510646691
  %3454 = xor i64 %3453, %3437
  %3455 = xor i64 %3454, %3442
  %3456 = xor i64 %3455, %3434
  %3457 = xor i64 %3456, %3438
  %3458 = xor i64 %3457, %3452
  %3459 = add i64 %3, -3162122918433833131
  %3460 = add i64 878250712597180885, %3
  %3461 = sub i64 %3460, 4040373631031014016
  %3462 = add i64 %3, -1408661250754355223
  %3463 = add i64 7979325209185476804, %3
  %3464 = sub i64 %3463, -9058757613769719589
  %3465 = xor i64 %3461, %3464
  %3466 = xor i64 %3465, 0
  %3467 = xor i64 %3466, %3459
  %3468 = xor i64 %3467, %3462
  %3469 = mul i64 %3458, %3468
  %3470 = trunc i64 %3469 to i1
  %3471 = add i64 %3, 4788822711953311501
  %3472 = sub i64 0, %3
  %3473 = sub i64 4788822711953311501, %3472
  %3474 = and i64 %3, -7029305092565914541
  %3475 = xor i64 %3, -1
  %3476 = xor i64 -7029305092565914541, %3475
  %3477 = and i64 %3476, -7029305092565914541
  %3478 = and i64 %3, 6886688182949605795
  %3479 = xor i64 %3, -1
  %3480 = or i64 -6886688182949605796, %3479
  %3481 = xor i64 %3480, -1
  %3482 = and i64 %3481, -1
  %3483 = xor i64 %3474, %3471
  %3484 = xor i64 %3483, %3477
  %3485 = xor i64 %3484, %3482
  %3486 = xor i64 %3485, -515430121975707595
  %3487 = xor i64 %3486, %3473
  %3488 = xor i64 %3487, %3478
  %3489 = or i64 %3, -8601689411148553644
  %3490 = xor i64 %3, -1
  %3491 = and i64 %3490, -292666413661388702
  %3492 = and i64 %3, 292666413661388701
  %3493 = or i64 %3491, %3492
  %3494 = xor i64 8309304587496907318, %3493
  %3495 = xor i64 %3, -1
  %3496 = or i64 8601689411148553643, %3495
  %3497 = xor i64 %3496, -1
  %3498 = and i64 %3497, -1
  %3499 = or i64 %3494, %3498
  %3500 = or i64 %3, 7473009904643206135
  %3501 = xor i64 %3, -1
  %3502 = and i64 %3501, 445770786471788095
  %3503 = and i64 %3, -445770786471788096
  %3504 = or i64 %3502, %3503
  %3505 = xor i64 7033150101365085640, %3504
  %3506 = xor i64 %3, -1
  %3507 = or i64 -7473009904643206136, %3506
  %3508 = xor i64 %3507, -1
  %3509 = and i64 %3508, -1
  %3510 = or i64 %3505, %3509
  %3511 = xor i64 %3510, 0
  %3512 = xor i64 %3511, %3499
  %3513 = xor i64 %3512, %3489
  %3514 = xor i64 %3513, %3500
  %3515 = mul i64 %3488, %3514
  %3516 = or i64 %3, -2346157357669743144
  %3517 = xor i64 %3, -1
  %3518 = and i64 -2346157357669743144, %3517
  %3519 = add i64 %3518, %3
  %3520 = or i64 %3, 2170541729007984796
  %3521 = xor i64 %3, -1
  %3522 = and i64 2170541729007984796, %3521
  %3523 = add i64 %3522, %3
  %3524 = xor i64 -7861148336680883109, %3519
  %3525 = xor i64 %3524, %3523
  %3526 = xor i64 %3525, %3516
  %3527 = xor i64 %3526, %3520
  %3528 = or i64 %3, 1620385206004397326
  %3529 = xor i64 %3, -1
  %3530 = and i64 1620385206004397326, %3529
  %3531 = add i64 %3530, %3
  %3532 = add i64 %3, 5940375879514024138
  %3533 = sub i64 0, %3
  %3534 = add i64 -5940375879514024138, %3533
  %3535 = sub i64 0, %3534
  %3536 = xor i64 0, %3531
  %3537 = xor i64 %3536, %3535
  %3538 = xor i64 %3537, %3528
  %3539 = xor i64 %3538, %3532
  %3540 = mul i64 %3527, %3539
  %3541 = trunc i64 %3540 to i1
  %3542 = add i64 %3, -9107115333451475733
  %3543 = add i64 1092676495919224142, %3
  %3544 = add i64 %3543, 8246952244338851741
  %3545 = add i64 %3, 946403082639754446
  %3546 = xor i64 946403082639754446, %3
  %3547 = and i64 946403082639754446, %3
  %3548 = mul i64 2, %3547
  %3549 = add i64 %3546, %3548
  %3550 = add i64 %3, 3765324755251178938
  %3551 = sub i64 0, %3
  %3552 = add i64 -3765324755251178938, %3551
  %3553 = sub i64 0, %3552
  %3554 = xor i64 %3542, %3553
  %3555 = xor i64 %3554, %3544
  %3556 = xor i64 %3555, %3550
  %3557 = xor i64 %3556, %3545
  %3558 = xor i64 %3557, -7802366955801724587
  %3559 = xor i64 %3558, %3549
  %3560 = or i64 %3, 9205165092809646443
  %3561 = xor i64 %3, -1
  %3562 = and i64 %3561, 6545015388171892048
  %3563 = and i64 %3, -6545015388171892049
  %3564 = or i64 %3562, %3563
  %3565 = xor i64 2696460118375912507, %3564
  %3566 = xor i64 %3, -1
  %3567 = or i64 -9205165092809646444, %3566
  %3568 = xor i64 %3567, -1
  %3569 = and i64 %3568, -1
  %3570 = or i64 %3565, %3569
  %3571 = and i64 %3, 246551333752690606
  %3572 = xor i64 %3, -1
  %3573 = xor i64 246551333752690606, %3572
  %3574 = and i64 %3573, 246551333752690606
  %3575 = and i64 %3, -6336921866188693335
  %3576 = xor i64 %3, -1
  %3577 = or i64 6336921866188693334, %3576
  %3578 = xor i64 %3577, -1
  %3579 = and i64 %3578, -1
  %3580 = xor i64 0, %3575
  %3581 = xor i64 %3580, %3574
  %3582 = xor i64 %3581, %3560
  %3583 = xor i64 %3582, %3570
  %3584 = xor i64 %3583, %3579
  %3585 = xor i64 %3584, %3571
  %3586 = mul i64 %3559, %3585
  %3587 = trunc i64 %3586 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %3433, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %3470, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %3515, i1 false, i1* null, i1 false, i1 false, i1 %3541, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %3587, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %3588 = load i64, i64* %3433, align 8
  %3589 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %3588
  store i8* bitcast (void (i64*, i64*)* @render.extracted.7 to i8*), i8** %3589, align 8
  %3590 = alloca i64, align 8
  %3591 = or i64 %3, -679685977531115020
  %3592 = and i64 -679685977531115020, %3
  %3593 = xor i64 -679685977531115020, %3
  %3594 = or i64 %3592, %3593
  %3595 = add i64 %3, 2313146819467812017
  %3596 = sub i64 0, %3
  %3597 = sub i64 2313146819467812017, %3596
  %3598 = xor i64 %3591, %3597
  %3599 = xor i64 %3598, 8777906119479592639
  %3600 = xor i64 %3599, %3594
  %3601 = xor i64 %3600, %3595
  %3602 = add i64 %3, 3001523228479890546
  %3603 = add i64 -133669064543896045, %3
  %3604 = add i64 %3603, 3135192293023786591
  %3605 = and i64 %3, 7090742707596251251
  %3606 = xor i64 %3, -1
  %3607 = xor i64 7090742707596251251, %3606
  %3608 = and i64 %3607, 7090742707596251251
  %3609 = or i64 %3, 1786027120570465505
  %3610 = and i64 1786027120570465505, %3
  %3611 = xor i64 1786027120570465505, %3
  %3612 = or i64 %3610, %3611
  %3613 = xor i64 0, %3602
  %3614 = xor i64 %3613, %3608
  %3615 = xor i64 %3614, %3605
  %3616 = xor i64 %3615, %3604
  %3617 = xor i64 %3616, %3609
  %3618 = xor i64 %3617, %3612
  %3619 = mul i64 %3601, %3618
  %3620 = trunc i64 %3619 to i32
  %3621 = or i64 %3, -204775509886424157
  %3622 = xor i64 %3, -1
  %3623 = and i64 -204775509886424157, %3622
  %3624 = add i64 %3623, %3
  %3625 = and i64 %3, 3212113674672997685
  %3626 = xor i64 %3, -1
  %3627 = or i64 -3212113674672997686, %3626
  %3628 = xor i64 %3627, -1
  %3629 = and i64 %3628, -1
  %3630 = or i64 %3, 3551622004475480992
  %3631 = and i64 3551622004475480992, %3
  %3632 = xor i64 3551622004475480992, %3
  %3633 = or i64 %3631, %3632
  %3634 = xor i64 %3630, 5225171561456371349
  %3635 = xor i64 %3634, %3625
  %3636 = xor i64 %3635, %3629
  %3637 = xor i64 %3636, %3621
  %3638 = xor i64 %3637, %3633
  %3639 = xor i64 %3638, %3624
  %3640 = and i64 %3, -500394379424647798
  %3641 = or i64 500394379424647797, %3
  %3642 = sub i64 %3641, 500394379424647797
  %3643 = add i64 %3, -4294625225783195436
  %3644 = and i64 -4294625225783195436, %3
  %3645 = or i64 -4294625225783195436, %3
  %3646 = add i64 %3644, %3645
  %3647 = add i64 %3, -6530944117068700233
  %3648 = add i64 4554950552738082994, %3
  %3649 = sub i64 %3648, -7360849403902768389
  %3650 = xor i64 %3640, %3646
  %3651 = xor i64 %3650, 0
  %3652 = xor i64 %3651, %3647
  %3653 = xor i64 %3652, %3642
  %3654 = xor i64 %3653, %3643
  %3655 = xor i64 %3654, %3649
  %3656 = mul i64 %3639, %3655
  %3657 = and i64 %3, 1475885791507525471
  %3658 = xor i64 %3, -1
  %3659 = or i64 -1475885791507525472, %3658
  %3660 = xor i64 %3659, -1
  %3661 = and i64 %3660, -1
  %3662 = or i64 %3, -2728217989121034606
  %3663 = xor i64 %3, -1
  %3664 = and i64 -2728217989121034606, %3663
  %3665 = add i64 %3664, %3
  %3666 = xor i64 %3665, %3657
  %3667 = xor i64 %3666, 1433387313358216475
  %3668 = xor i64 %3667, %3661
  %3669 = xor i64 %3668, %3662
  %3670 = and i64 %3, 8869470777199997129
  %3671 = or i64 -8869470777199997130, %3
  %3672 = sub i64 %3671, -8869470777199997130
  %3673 = and i64 %3, -4025787078953281477
  %3674 = xor i64 %3, -1
  %3675 = xor i64 -4025787078953281477, %3674
  %3676 = and i64 %3675, -4025787078953281477
  %3677 = and i64 %3, 819637787753792208
  %3678 = xor i64 %3, -1
  %3679 = xor i64 819637787753792208, %3678
  %3680 = and i64 %3679, 819637787753792208
  %3681 = xor i64 %3680, %3670
  %3682 = xor i64 %3681, %3672
  %3683 = xor i64 %3682, %3677
  %3684 = xor i64 %3683, 0
  %3685 = xor i64 %3684, %3673
  %3686 = xor i64 %3685, %3676
  %3687 = mul i64 %3669, %3686
  %3688 = trunc i64 %3687 to i1
  %3689 = add i64 %3, 8606445953333383636
  %3690 = and i64 8606445953333383636, %3
  %3691 = or i64 8606445953333383636, %3
  %3692 = add i64 %3690, %3691
  %3693 = and i64 %3, 1004308945093090489
  %3694 = xor i64 %3, -1
  %3695 = or i64 -1004308945093090490, %3694
  %3696 = xor i64 %3695, -1
  %3697 = and i64 %3696, -1
  %3698 = xor i64 -8040723080799578721, %3693
  %3699 = xor i64 %3698, %3692
  %3700 = xor i64 %3699, %3697
  %3701 = xor i64 %3700, %3689
  %3702 = and i64 %3, -6673691153993987339
  %3703 = or i64 6673691153993987338, %3
  %3704 = sub i64 %3703, 6673691153993987338
  %3705 = add i64 %3, 4145802730721211695
  %3706 = add i64 8122788624744717886, %3
  %3707 = sub i64 %3706, 3976985894023506191
  %3708 = xor i64 %3707, %3704
  %3709 = xor i64 %3708, 0
  %3710 = xor i64 %3709, %3705
  %3711 = xor i64 %3710, %3702
  %3712 = mul i64 %3701, %3711
  %3713 = trunc i64 %3712 to i1
  %3714 = and i64 %3, 5719258423086626479
  %3715 = xor i64 %3, -1
  %3716 = xor i64 5719258423086626479, %3715
  %3717 = and i64 %3716, 5719258423086626479
  %3718 = and i64 %3, 325673270002736717
  %3719 = xor i64 %3, -1
  %3720 = xor i64 325673270002736717, %3719
  %3721 = and i64 %3720, 325673270002736717
  %3722 = add i64 %3, -7020295535754742409
  %3723 = sub i64 0, %3
  %3724 = sub i64 -7020295535754742409, %3723
  %3725 = xor i64 %3721, %3718
  %3726 = xor i64 %3725, %3714
  %3727 = xor i64 %3726, %3717
  %3728 = xor i64 %3727, %3722
  %3729 = xor i64 %3728, %3724
  %3730 = xor i64 %3729, -3459083431811007817
  %3731 = add i64 %3, -2763576742641767497
  %3732 = sub i64 0, %3
  %3733 = sub i64 -2763576742641767497, %3732
  %3734 = and i64 %3, 8599981158645011463
  %3735 = xor i64 %3, -1
  %3736 = xor i64 8599981158645011463, %3735
  %3737 = and i64 %3736, 8599981158645011463
  %3738 = xor i64 %3734, %3731
  %3739 = xor i64 %3738, 0
  %3740 = xor i64 %3739, %3733
  %3741 = xor i64 %3740, %3737
  %3742 = mul i64 %3730, %3741
  %3743 = trunc i64 %3742 to i1
  %3744 = add i64 %3, -3599988122178543206
  %3745 = sub i64 0, %3
  %3746 = sub i64 -3599988122178543206, %3745
  %3747 = or i64 %3, -22825488797695601
  %3748 = and i64 -22825488797695601, %3
  %3749 = xor i64 -22825488797695601, %3
  %3750 = or i64 %3748, %3749
  %3751 = xor i64 %3747, %3746
  %3752 = xor i64 %3751, 2186459246057062277
  %3753 = xor i64 %3752, %3744
  %3754 = xor i64 %3753, %3750
  %3755 = or i64 %3, -6702049737765733135
  %3756 = xor i64 %3, -1
  %3757 = and i64 %3756, -7677316024038989750
  %3758 = and i64 %3, 7677316024038989749
  %3759 = or i64 %3757, %3758
  %3760 = xor i64 4001791889249721531, %3759
  %3761 = xor i64 %3, -1
  %3762 = or i64 6702049737765733134, %3761
  %3763 = xor i64 %3762, -1
  %3764 = and i64 %3763, -1
  %3765 = or i64 %3760, %3764
  %3766 = add i64 %3, -8044680785281052712
  %3767 = add i64 7812432208433103353, %3
  %3768 = sub i64 %3767, -2589631079995395551
  %3769 = xor i64 %3766, %3768
  %3770 = xor i64 %3769, %3755
  %3771 = xor i64 %3770, 0
  %3772 = xor i64 %3771, %3765
  %3773 = mul i64 %3754, %3772
  %3774 = trunc i64 %3773 to i1
  %3775 = add i64 %3, 3391599125397825720
  %3776 = add i64 -2444905214451983277, %3
  %3777 = add i64 %3776, 5836504339849808997
  %3778 = and i64 %3, -5940890818108277865
  %3779 = xor i64 %3, -1
  %3780 = xor i64 -5940890818108277865, %3779
  %3781 = and i64 %3780, -5940890818108277865
  %3782 = xor i64 %3775, %3778
  %3783 = xor i64 %3782, %3781
  %3784 = xor i64 %3783, -4257097039725768583
  %3785 = xor i64 %3784, %3777
  %3786 = or i64 %3, -7763284200149869413
  %3787 = xor i64 %3, -1
  %3788 = and i64 -7763284200149869413, %3787
  %3789 = add i64 %3788, %3
  %3790 = and i64 %3, -2972666593070152776
  %3791 = xor i64 %3, -1
  %3792 = xor i64 -2972666593070152776, %3791
  %3793 = and i64 %3792, -2972666593070152776
  %3794 = xor i64 %3793, %3790
  %3795 = xor i64 %3794, %3789
  %3796 = xor i64 %3795, 0
  %3797 = xor i64 %3796, %3786
  %3798 = mul i64 %3785, %3797
  %3799 = trunc i64 %3798 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537081, i64* %3590, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %3620, i1* null, i1* null, i64 %3656, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %3688, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 %3713, i1 false, i1 false, i1 %3743, i1 false, i1 %3774, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 %3799, i1* null, i1* null)
  %3800 = load i64, i64* %3590, align 8
  %3801 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %3800
  store i8* bitcast (i1 (i64, i64, i64, i1*, i1*)* @render.extracted.8 to i8*), i8** %3801, align 8
  %3802 = alloca i64, align 8
  %3803 = or i64 %3, 419148110290435681
  %3804 = and i64 419148110290435681, %3
  %3805 = xor i64 419148110290435681, %3
  %3806 = or i64 %3804, %3805
  %3807 = and i64 %3, -5949069969331393014
  %3808 = xor i64 %3, -1
  %3809 = xor i64 -5949069969331393014, %3808
  %3810 = and i64 %3809, -5949069969331393014
  %3811 = xor i64 3058530079581296553, %3806
  %3812 = xor i64 %3811, %3807
  %3813 = xor i64 %3812, %3810
  %3814 = xor i64 %3813, %3803
  %3815 = or i64 %3, -4917228364944993305
  %3816 = xor i64 %3, -1
  %3817 = and i64 -4917228364944993305, %3816
  %3818 = add i64 %3817, %3
  %3819 = or i64 %3, -9055471441280444194
  %3820 = xor i64 %3, -1
  %3821 = and i64 -9055471441280444194, %3820
  %3822 = add i64 %3821, %3
  %3823 = or i64 %3, 232575880368401098
  %3824 = and i64 232575880368401098, %3
  %3825 = xor i64 232575880368401098, %3
  %3826 = or i64 %3824, %3825
  %3827 = xor i64 %3822, %3818
  %3828 = xor i64 %3827, %3815
  %3829 = xor i64 %3828, %3826
  %3830 = xor i64 %3829, 0
  %3831 = xor i64 %3830, %3823
  %3832 = xor i64 %3831, %3819
  %3833 = mul i64 %3814, %3832
  %3834 = trunc i64 %3833 to i1
  %3835 = and i64 %3, -9082641905418154287
  %3836 = or i64 9082641905418154286, %3
  %3837 = sub i64 %3836, 9082641905418154286
  %3838 = and i64 %3, 4138157670942855376
  %3839 = xor i64 %3, -1
  %3840 = xor i64 4138157670942855376, %3839
  %3841 = and i64 %3840, 4138157670942855376
  %3842 = xor i64 %3837, %3841
  %3843 = xor i64 %3842, -5717800675490294957
  %3844 = xor i64 %3843, %3835
  %3845 = xor i64 %3844, %3838
  %3846 = or i64 %3, -2787679915381429351
  %3847 = xor i64 %3, -1
  %3848 = and i64 -2787679915381429351, %3847
  %3849 = add i64 %3848, %3
  %3850 = add i64 %3, 7970222012463658483
  %3851 = sub i64 0, %3
  %3852 = sub i64 7970222012463658483, %3851
  %3853 = or i64 %3, 3003281764539267210
  %3854 = xor i64 %3, -1
  %3855 = and i64 3003281764539267210, %3854
  %3856 = add i64 %3855, %3
  %3857 = xor i64 %3849, %3846
  %3858 = xor i64 %3857, 0
  %3859 = xor i64 %3858, %3852
  %3860 = xor i64 %3859, %3853
  %3861 = xor i64 %3860, %3856
  %3862 = xor i64 %3861, %3850
  %3863 = mul i64 %3845, %3862
  %3864 = trunc i64 %3863 to i1
  %3865 = add i64 %3, -6496298400511069125
  %3866 = and i64 -6496298400511069125, %3
  %3867 = or i64 -6496298400511069125, %3
  %3868 = add i64 %3866, %3867
  %3869 = add i64 %3, 3701204368666547063
  %3870 = sub i64 0, %3
  %3871 = sub i64 3701204368666547063, %3870
  %3872 = add i64 %3, -6266614248079077419
  %3873 = xor i64 -6266614248079077419, %3
  %3874 = and i64 -6266614248079077419, %3
  %3875 = mul i64 2, %3874
  %3876 = add i64 %3873, %3875
  %3877 = xor i64 %3865, -2694629691762338287
  %3878 = xor i64 %3877, %3872
  %3879 = xor i64 %3878, %3871
  %3880 = xor i64 %3879, %3876
  %3881 = xor i64 %3880, %3869
  %3882 = xor i64 %3881, %3868
  %3883 = add i64 %3, 4394484365548830779
  %3884 = xor i64 4394484365548830779, %3
  %3885 = and i64 4394484365548830779, %3
  %3886 = mul i64 2, %3885
  %3887 = add i64 %3884, %3886
  %3888 = or i64 %3, -4396153830959677941
  %3889 = and i64 -4396153830959677941, %3
  %3890 = xor i64 -4396153830959677941, %3
  %3891 = or i64 %3889, %3890
  %3892 = xor i64 %3888, %3891
  %3893 = xor i64 %3892, %3883
  %3894 = xor i64 %3893, 0
  %3895 = xor i64 %3894, %3887
  %3896 = mul i64 %3882, %3895
  %3897 = trunc i64 %3896 to i1
  %3898 = add i64 %3, 6669781325079128592
  %3899 = sub i64 0, %3
  %3900 = add i64 -6669781325079128592, %3899
  %3901 = sub i64 0, %3900
  %3902 = and i64 %3, 5640209951712178768
  %3903 = or i64 -5640209951712178769, %3
  %3904 = sub i64 %3903, -5640209951712178769
  %3905 = and i64 %3, 3516377322761501226
  %3906 = xor i64 %3, -1
  %3907 = xor i64 3516377322761501226, %3906
  %3908 = and i64 %3907, 3516377322761501226
  %3909 = xor i64 %3902, %3904
  %3910 = xor i64 %3909, %3898
  %3911 = xor i64 %3910, %3901
  %3912 = xor i64 %3911, %3905
  %3913 = xor i64 %3912, -4364489789959886135
  %3914 = xor i64 %3913, %3908
  %3915 = or i64 %3, 8716849533675993539
  %3916 = and i64 8716849533675993539, %3
  %3917 = xor i64 8716849533675993539, %3
  %3918 = or i64 %3916, %3917
  %3919 = and i64 %3, -2838666190089918849
  %3920 = xor i64 %3, -1
  %3921 = or i64 2838666190089918848, %3920
  %3922 = xor i64 %3921, -1
  %3923 = and i64 %3922, -1
  %3924 = xor i64 %3923, %3915
  %3925 = xor i64 %3924, %3919
  %3926 = xor i64 %3925, %3918
  %3927 = xor i64 %3926, 0
  %3928 = mul i64 %3914, %3927
  %3929 = trunc i64 %3928 to i1
  %3930 = add i64 %3, -386907869314858634
  %3931 = and i64 -386907869314858634, %3
  %3932 = or i64 -386907869314858634, %3
  %3933 = add i64 %3931, %3932
  %3934 = and i64 %3, -6825829240146063903
  %3935 = or i64 6825829240146063902, %3
  %3936 = sub i64 %3935, 6825829240146063902
  %3937 = or i64 %3, -742759787181217019
  %3938 = xor i64 %3, -1
  %3939 = and i64 %3938, -4456665468459053308
  %3940 = and i64 %3, 4456665468459053307
  %3941 = or i64 %3939, %3940
  %3942 = xor i64 4005830607763530753, %3941
  %3943 = xor i64 %3, -1
  %3944 = or i64 742759787181217018, %3943
  %3945 = xor i64 %3944, -1
  %3946 = and i64 %3945, -1
  %3947 = or i64 %3942, %3946
  %3948 = xor i64 %3933, %3934
  %3949 = xor i64 %3948, %3937
  %3950 = xor i64 %3949, %3930
  %3951 = xor i64 %3950, %3936
  %3952 = xor i64 %3951, %3947
  %3953 = xor i64 %3952, 6193207279971188309
  %3954 = add i64 %3, -8620063204863680086
  %3955 = sub i64 0, %3
  %3956 = sub i64 -8620063204863680086, %3955
  %3957 = or i64 %3, -385686150594835491
  %3958 = and i64 -385686150594835491, %3
  %3959 = xor i64 -385686150594835491, %3
  %3960 = or i64 %3958, %3959
  %3961 = or i64 %3, 4187906409129816176
  %3962 = xor i64 %3, -1
  %3963 = and i64 %3962, -5207943316378770796
  %3964 = and i64 %3, 5207943316378770795
  %3965 = or i64 %3963, %3964
  %3966 = xor i64 -8239399748367543580, %3965
  %3967 = xor i64 %3, -1
  %3968 = or i64 -4187906409129816177, %3967
  %3969 = xor i64 %3968, -1
  %3970 = and i64 %3969, -1
  %3971 = or i64 %3966, %3970
  %3972 = xor i64 0, %3957
  %3973 = xor i64 %3972, %3956
  %3974 = xor i64 %3973, %3961
  %3975 = xor i64 %3974, %3960
  %3976 = xor i64 %3975, %3971
  %3977 = xor i64 %3976, %3954
  %3978 = mul i64 %3953, %3977
  %3979 = trunc i64 %3978 to i1
  %3980 = and i64 %3, 8920831979217602323
  %3981 = xor i64 %3, -1
  %3982 = or i64 -8920831979217602324, %3981
  %3983 = xor i64 %3982, -1
  %3984 = and i64 %3983, -1
  %3985 = add i64 %3, 1715336025009281650
  %3986 = sub i64 0, %3
  %3987 = add i64 -1715336025009281650, %3986
  %3988 = sub i64 0, %3987
  %3989 = add i64 %3, 5004921547284442978
  %3990 = xor i64 5004921547284442978, %3
  %3991 = and i64 5004921547284442978, %3
  %3992 = mul i64 2, %3991
  %3993 = add i64 %3990, %3992
  %3994 = xor i64 -2773616276833103767, %3993
  %3995 = xor i64 %3994, %3989
  %3996 = xor i64 %3995, %3984
  %3997 = xor i64 %3996, %3980
  %3998 = xor i64 %3997, %3985
  %3999 = xor i64 %3998, %3988
  %4000 = or i64 %3, -674903886615602783
  %4001 = xor i64 %3, -1
  %4002 = and i64 -674903886615602783, %4001
  %4003 = add i64 %4002, %3
  %4004 = and i64 %3, -6015129761404020724
  %4005 = or i64 6015129761404020723, %3
  %4006 = sub i64 %4005, 6015129761404020723
  %4007 = add i64 %3, 5560138772172609217
  %4008 = and i64 5560138772172609217, %3
  %4009 = or i64 5560138772172609217, %3
  %4010 = add i64 %4008, %4009
  %4011 = xor i64 %4000, %4010
  %4012 = xor i64 %4011, %4007
  %4013 = xor i64 %4012, 0
  %4014 = xor i64 %4013, %4006
  %4015 = xor i64 %4014, %4003
  %4016 = xor i64 %4015, %4004
  %4017 = mul i64 %3999, %4016
  %4018 = trunc i64 %4017 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537079, i64* %3802, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %3834, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %3864, i1 false, i1 false, i1* null, i1 %3897, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %3929, i1 false, i1 false, i1 false, i1 false, i1 %3979, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %4018, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %4019 = load i64, i64* %3802, align 8
  %4020 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %4019
  store i8* bitcast (i1 (i8*, i64, i64, i32*, i64*, i64*)* @render.extracted.9 to i8*), i8** %4020, align 8
  %4021 = alloca i64, align 8
  %4022 = and i64 %3, 5838554726822767335
  %4023 = or i64 -5838554726822767336, %3
  %4024 = sub i64 %4023, -5838554726822767336
  %4025 = and i64 %3, 6206526210075511625
  %4026 = xor i64 %3, -1
  %4027 = xor i64 6206526210075511625, %4026
  %4028 = and i64 %4027, 6206526210075511625
  %4029 = xor i64 5596441850129758691, %4022
  %4030 = xor i64 %4029, %4024
  %4031 = xor i64 %4030, %4025
  %4032 = xor i64 %4031, %4028
  %4033 = or i64 %3, -8998663469747840859
  %4034 = and i64 -8998663469747840859, %3
  %4035 = xor i64 -8998663469747840859, %3
  %4036 = or i64 %4034, %4035
  %4037 = or i64 %3, -2607178254110696021
  %4038 = xor i64 %3, -1
  %4039 = and i64 %4038, 9148914771651898384
  %4040 = and i64 %3, -9148914771651898385
  %4041 = or i64 %4039, %4040
  %4042 = xor i64 -6546535439195868741, %4041
  %4043 = xor i64 %3, -1
  %4044 = or i64 2607178254110696020, %4043
  %4045 = xor i64 %4044, -1
  %4046 = and i64 %4045, -1
  %4047 = or i64 %4042, %4046
  %4048 = xor i64 -7141460812775014329, %4047
  %4049 = xor i64 %4048, %4036
  %4050 = xor i64 %4049, %4033
  %4051 = xor i64 %4050, %4037
  %4052 = mul i64 %4032, %4051
  %4053 = add i64 %3, 5090692683019307205
  %4054 = sub i64 0, %3
  %4055 = add i64 -5090692683019307205, %4054
  %4056 = sub i64 0, %4055
  %4057 = or i64 %3, 8824292300272089444
  %4058 = and i64 8824292300272089444, %3
  %4059 = xor i64 8824292300272089444, %3
  %4060 = or i64 %4058, %4059
  %4061 = xor i64 %4053, %4056
  %4062 = xor i64 %4061, -7863953504314830075
  %4063 = xor i64 %4062, %4060
  %4064 = xor i64 %4063, %4057
  %4065 = and i64 %3, -7521583244660906116
  %4066 = xor i64 %3, -1
  %4067 = xor i64 -7521583244660906116, %4066
  %4068 = and i64 %4067, -7521583244660906116
  %4069 = or i64 %3, 3839322816489379067
  %4070 = xor i64 %3, -1
  %4071 = and i64 3839322816489379067, %4070
  %4072 = add i64 %4071, %3
  %4073 = or i64 %3, -671641500873056200
  %4074 = xor i64 %3, -1
  %4075 = and i64 %4074, -1820987306678043065
  %4076 = and i64 %3, 1820987306678043064
  %4077 = or i64 %4075, %4076
  %4078 = xor i64 1159487978116521599, %4077
  %4079 = xor i64 %3, -1
  %4080 = or i64 671641500873056199, %4079
  %4081 = xor i64 %4080, -1
  %4082 = and i64 %4081, -1
  %4083 = or i64 %4078, %4082
  %4084 = xor i64 %4065, %4073
  %4085 = xor i64 %4084, 0
  %4086 = xor i64 %4085, %4069
  %4087 = xor i64 %4086, %4072
  %4088 = xor i64 %4087, %4083
  %4089 = xor i64 %4088, %4068
  %4090 = mul i64 %4064, %4089
  %4091 = trunc i64 %4090 to i1
  %4092 = add i64 %3, -4080214369030274644
  %4093 = add i64 -5591314869213801955, %3
  %4094 = add i64 %4093, 1511100500183527311
  %4095 = and i64 %3, 4887009896224872106
  %4096 = xor i64 %3, -1
  %4097 = xor i64 4887009896224872106, %4096
  %4098 = and i64 %4097, 4887009896224872106
  %4099 = xor i64 %4092, %4098
  %4100 = xor i64 %4099, %4094
  %4101 = xor i64 %4100, %4095
  %4102 = xor i64 %4101, 2984757309661658309
  %4103 = and i64 %3, -7089991783083902588
  %4104 = xor i64 %3, -1
  %4105 = xor i64 -7089991783083902588, %4104
  %4106 = and i64 %4105, -7089991783083902588
  %4107 = or i64 %3, -5676982762660154695
  %4108 = and i64 -5676982762660154695, %3
  %4109 = xor i64 -5676982762660154695, %3
  %4110 = or i64 %4108, %4109
  %4111 = and i64 %3, 5404920590867810632
  %4112 = xor i64 %3, -1
  %4113 = xor i64 5404920590867810632, %4112
  %4114 = and i64 %4113, 5404920590867810632
  %4115 = xor i64 %4114, 0
  %4116 = xor i64 %4115, %4106
  %4117 = xor i64 %4116, %4103
  %4118 = xor i64 %4117, %4111
  %4119 = xor i64 %4118, %4110
  %4120 = xor i64 %4119, %4107
  %4121 = mul i64 %4102, %4120
  %4122 = trunc i64 %4121 to i1
  %4123 = and i64 %3, -7058900298398952841
  %4124 = xor i64 %3, -1
  %4125 = or i64 7058900298398952840, %4124
  %4126 = xor i64 %4125, -1
  %4127 = and i64 %4126, -1
  %4128 = add i64 %3, -6966615006610967669
  %4129 = and i64 -6966615006610967669, %3
  %4130 = or i64 -6966615006610967669, %3
  %4131 = add i64 %4129, %4130
  %4132 = and i64 %3, -2403435629732959405
  %4133 = xor i64 %3, -1
  %4134 = or i64 2403435629732959404, %4133
  %4135 = xor i64 %4134, -1
  %4136 = and i64 %4135, -1
  %4137 = xor i64 %4128, -8559034011580043837
  %4138 = xor i64 %4137, %4131
  %4139 = xor i64 %4138, %4127
  %4140 = xor i64 %4139, %4123
  %4141 = xor i64 %4140, %4132
  %4142 = xor i64 %4141, %4136
  %4143 = or i64 %3, -516987496944558004
  %4144 = and i64 -516987496944558004, %3
  %4145 = xor i64 -516987496944558004, %3
  %4146 = or i64 %4144, %4145
  %4147 = and i64 %3, -6801676554732294422
  %4148 = xor i64 %3, -1
  %4149 = or i64 6801676554732294421, %4148
  %4150 = xor i64 %4149, -1
  %4151 = and i64 %4150, -1
  %4152 = and i64 %3, 8827460675221275953
  %4153 = or i64 -8827460675221275954, %3
  %4154 = sub i64 %4153, -8827460675221275954
  %4155 = xor i64 %4151, %4154
  %4156 = xor i64 %4155, %4147
  %4157 = xor i64 %4156, %4146
  %4158 = xor i64 %4157, %4152
  %4159 = xor i64 %4158, %4143
  %4160 = xor i64 %4159, 0
  %4161 = mul i64 %4142, %4160
  %4162 = trunc i64 %4161 to i1
  %4163 = or i64 %3, 6915837462259156068
  %4164 = and i64 6915837462259156068, %3
  %4165 = xor i64 6915837462259156068, %3
  %4166 = or i64 %4164, %4165
  %4167 = and i64 %3, 5134569663568639342
  %4168 = xor i64 %3, -1
  %4169 = or i64 -5134569663568639343, %4168
  %4170 = xor i64 %4169, -1
  %4171 = and i64 %4170, -1
  %4172 = xor i64 %4167, %4171
  %4173 = xor i64 %4172, %4163
  %4174 = xor i64 %4173, 8711283651812861633
  %4175 = xor i64 %4174, %4166
  %4176 = or i64 %3, 7817579174232684868
  %4177 = and i64 7817579174232684868, %3
  %4178 = xor i64 7817579174232684868, %3
  %4179 = or i64 %4177, %4178
  %4180 = add i64 %3, -920337717619853111
  %4181 = sub i64 0, %3
  %4182 = sub i64 -920337717619853111, %4181
  %4183 = or i64 %3, -5022741113290333869
  %4184 = and i64 -5022741113290333869, %3
  %4185 = xor i64 -5022741113290333869, %3
  %4186 = or i64 %4184, %4185
  %4187 = xor i64 %4180, %4179
  %4188 = xor i64 %4187, 0
  %4189 = xor i64 %4188, %4182
  %4190 = xor i64 %4189, %4186
  %4191 = xor i64 %4190, %4176
  %4192 = xor i64 %4191, %4183
  %4193 = mul i64 %4175, %4192
  %4194 = trunc i64 %4193 to i32
  %4195 = and i64 %3, -1766935648048943669
  %4196 = xor i64 %3, -1
  %4197 = or i64 1766935648048943668, %4196
  %4198 = xor i64 %4197, -1
  %4199 = and i64 %4198, -1
  %4200 = add i64 %3, 9053431068549503688
  %4201 = and i64 9053431068549503688, %3
  %4202 = or i64 9053431068549503688, %3
  %4203 = add i64 %4201, %4202
  %4204 = add i64 %3, 1578886110672148939
  %4205 = xor i64 1578886110672148939, %3
  %4206 = and i64 1578886110672148939, %3
  %4207 = mul i64 2, %4206
  %4208 = add i64 %4205, %4207
  %4209 = xor i64 -6282253582645631313, %4204
  %4210 = xor i64 %4209, %4200
  %4211 = xor i64 %4210, %4208
  %4212 = xor i64 %4211, %4195
  %4213 = xor i64 %4212, %4199
  %4214 = xor i64 %4213, %4203
  %4215 = add i64 %3, 8029608233242879000
  %4216 = and i64 8029608233242879000, %3
  %4217 = or i64 8029608233242879000, %3
  %4218 = add i64 %4216, %4217
  %4219 = add i64 %3, 265253391484185782
  %4220 = sub i64 0, %3
  %4221 = add i64 -265253391484185782, %4220
  %4222 = sub i64 0, %4221
  %4223 = xor i64 %4215, %4222
  %4224 = xor i64 %4223, %4219
  %4225 = xor i64 %4224, %4218
  %4226 = xor i64 %4225, 0
  %4227 = mul i64 %4214, %4226
  %4228 = add i64 %3, 4402389025384213845
  %4229 = sub i64 0, %3
  %4230 = add i64 -4402389025384213845, %4229
  %4231 = sub i64 0, %4230
  %4232 = or i64 %3, -6673316562817216246
  %4233 = xor i64 %3, -1
  %4234 = and i64 -6673316562817216246, %4233
  %4235 = add i64 %4234, %3
  %4236 = xor i64 %4231, %4232
  %4237 = xor i64 %4236, -3674924592482171665
  %4238 = xor i64 %4237, %4228
  %4239 = xor i64 %4238, %4235
  %4240 = add i64 %3, 8575821124214314933
  %4241 = add i64 -4286853489987369881, %3
  %4242 = add i64 %4241, -5584069459507866802
  %4243 = or i64 %3, 3586687905438697266
  %4244 = xor i64 %3, -1
  %4245 = and i64 %4244, 8498425749779418266
  %4246 = and i64 %3, -8498425749779418267
  %4247 = or i64 %4245, %4246
  %4248 = xor i64 4915116682306882472, %4247
  %4249 = xor i64 %3, -1
  %4250 = or i64 -3586687905438697267, %4249
  %4251 = xor i64 %4250, -1
  %4252 = and i64 %4251, -1
  %4253 = or i64 %4248, %4252
  %4254 = xor i64 %4242, %4243
  %4255 = xor i64 %4254, 0
  %4256 = xor i64 %4255, %4240
  %4257 = xor i64 %4256, %4253
  %4258 = mul i64 %4239, %4257
  %4259 = add i64 %3, -632156055072051477
  %4260 = and i64 -632156055072051477, %3
  %4261 = or i64 -632156055072051477, %3
  %4262 = add i64 %4260, %4261
  %4263 = add i64 %3, -655316164157318881
  %4264 = add i64 -5948652551206723313, %3
  %4265 = add i64 %4264, 5293336387049404432
  %4266 = xor i64 %4263, %4265
  %4267 = xor i64 %4266, 6570548705991400715
  %4268 = xor i64 %4267, %4259
  %4269 = xor i64 %4268, %4262
  %4270 = and i64 %3, -8496016640876780687
  %4271 = or i64 8496016640876780686, %3
  %4272 = sub i64 %4271, 8496016640876780686
  %4273 = add i64 %3, 6589928384270327536
  %4274 = xor i64 6589928384270327536, %3
  %4275 = and i64 6589928384270327536, %3
  %4276 = mul i64 2, %4275
  %4277 = add i64 %4274, %4276
  %4278 = xor i64 %4270, 0
  %4279 = xor i64 %4278, %4277
  %4280 = xor i64 %4279, %4272
  %4281 = xor i64 %4280, %4273
  %4282 = mul i64 %4269, %4281
  %4283 = or i64 %3, -8938044050521467787
  %4284 = xor i64 %3, -1
  %4285 = and i64 -8938044050521467787, %4284
  %4286 = add i64 %4285, %3
  %4287 = or i64 %3, 168782571120572398
  %4288 = and i64 168782571120572398, %3
  %4289 = xor i64 168782571120572398, %3
  %4290 = or i64 %4288, %4289
  %4291 = add i64 %3, 4123046711447870223
  %4292 = add i64 -1820199651431470611, %3
  %4293 = sub i64 %4292, -5943246362879340834
  %4294 = xor i64 %4283, 6396486638089198983
  %4295 = xor i64 %4294, %4286
  %4296 = xor i64 %4295, %4290
  %4297 = xor i64 %4296, %4287
  %4298 = xor i64 %4297, %4293
  %4299 = xor i64 %4298, %4291
  %4300 = and i64 %3, -4821017168295224251
  %4301 = or i64 4821017168295224250, %3
  %4302 = sub i64 %4301, 4821017168295224250
  %4303 = or i64 %3, 7388862691773656535
  %4304 = xor i64 %3, -1
  %4305 = and i64 %4304, 7039480410729412603
  %4306 = and i64 %3, -7039480410729412604
  %4307 = or i64 %4305, %4306
  %4308 = xor i64 521222780114885164, %4307
  %4309 = xor i64 %3, -1
  %4310 = or i64 -7388862691773656536, %4309
  %4311 = xor i64 %4310, -1
  %4312 = and i64 %4311, -1
  %4313 = or i64 %4308, %4312
  %4314 = or i64 %3, -8694707908287362310
  %4315 = xor i64 %3, -1
  %4316 = and i64 %4315, 5904989061102304025
  %4317 = and i64 %3, -5904989061102304026
  %4318 = or i64 %4316, %4317
  %4319 = xor i64 -2980101495983083037, %4318
  %4320 = xor i64 %3, -1
  %4321 = or i64 8694707908287362309, %4320
  %4322 = xor i64 %4321, -1
  %4323 = and i64 %4322, -1
  %4324 = or i64 %4319, %4323
  %4325 = xor i64 %4303, %4300
  %4326 = xor i64 %4325, %4324
  %4327 = xor i64 %4326, %4302
  %4328 = xor i64 %4327, %4314
  %4329 = xor i64 %4328, %4313
  %4330 = xor i64 %4329, 0
  %4331 = mul i64 %4299, %4330
  %4332 = trunc i64 %4331 to i1
  %4333 = or i64 %3, -8352601237322140364
  %4334 = xor i64 %3, -1
  %4335 = and i64 %4334, 201289347011000874
  %4336 = and i64 %3, -201289347011000875
  %4337 = or i64 %4335, %4336
  %4338 = xor i64 -8151929886466519266, %4337
  %4339 = xor i64 %3, -1
  %4340 = or i64 8352601237322140363, %4339
  %4341 = xor i64 %4340, -1
  %4342 = and i64 %4341, -1
  %4343 = or i64 %4338, %4342
  %4344 = and i64 %3, -3514526101504716034
  %4345 = xor i64 %3, -1
  %4346 = or i64 3514526101504716033, %4345
  %4347 = xor i64 %4346, -1
  %4348 = and i64 %4347, -1
  %4349 = xor i64 %4333, %4344
  %4350 = xor i64 %4349, %4343
  %4351 = xor i64 %4350, %4348
  %4352 = xor i64 %4351, 5793711043667740987
  %4353 = and i64 %3, -715202796645026114
  %4354 = or i64 715202796645026113, %3
  %4355 = sub i64 %4354, 715202796645026113
  %4356 = add i64 %3, 6713107021196878087
  %4357 = add i64 -3086887081883000, %3
  %4358 = sub i64 %4357, -6716193908278761087
  %4359 = xor i64 %4356, 0
  %4360 = xor i64 %4359, %4353
  %4361 = xor i64 %4360, %4355
  %4362 = xor i64 %4361, %4358
  %4363 = mul i64 %4352, %4362
  %4364 = trunc i64 %4363 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %4052, i64* %4021, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %4091, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %4122, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %4162, i1* null, i32 0, i32 %4194, i1* null, i1* null, i64 %4227, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %4258, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %4282, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %4332, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %4364, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %4365 = load i64, i64* %4021, align 8
  %4366 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %4365
  store i8* bitcast (i1 (i64)* @render.extracted.10 to i8*), i8** %4366, align 8
  %4367 = alloca i64, align 8
  %4368 = or i64 %3, -2804107504720516467
  %4369 = xor i64 %3, -1
  %4370 = and i64 %4369, 9220154448995275418
  %4371 = and i64 %3, -9220154448995275419
  %4372 = or i64 %4370, %4371
  %4373 = xor i64 -6421747645785982953, %4372
  %4374 = xor i64 %3, -1
  %4375 = or i64 2804107504720516466, %4374
  %4376 = xor i64 %4375, -1
  %4377 = and i64 %4376, -1
  %4378 = or i64 %4373, %4377
  %4379 = or i64 %3, 2171573219522149498
  %4380 = xor i64 %3, -1
  %4381 = and i64 %4380, -7379800546803735176
  %4382 = and i64 %3, 7379800546803735175
  %4383 = or i64 %4381, %4382
  %4384 = xor i64 -8667365676130117374, %4383
  %4385 = xor i64 %3, -1
  %4386 = or i64 -2171573219522149499, %4385
  %4387 = xor i64 %4386, -1
  %4388 = and i64 %4387, -1
  %4389 = or i64 %4384, %4388
  %4390 = add i64 %3, -8670225892318387914
  %4391 = sub i64 0, %3
  %4392 = sub i64 -8670225892318387914, %4391
  %4393 = xor i64 %4390, %4392
  %4394 = xor i64 %4393, -863981233867181083
  %4395 = xor i64 %4394, %4389
  %4396 = xor i64 %4395, %4379
  %4397 = xor i64 %4396, %4378
  %4398 = xor i64 %4397, %4368
  %4399 = and i64 %3, 6214948181152410297
  %4400 = xor i64 %3, -1
  %4401 = xor i64 6214948181152410297, %4400
  %4402 = and i64 %4401, 6214948181152410297
  %4403 = or i64 %3, -3653049937760734137
  %4404 = xor i64 %3, -1
  %4405 = and i64 -3653049937760734137, %4404
  %4406 = add i64 %4405, %3
  %4407 = and i64 %3, -8935459000992801840
  %4408 = or i64 8935459000992801839, %3
  %4409 = sub i64 %4408, 8935459000992801839
  %4410 = xor i64 0, %4407
  %4411 = xor i64 %4410, %4409
  %4412 = xor i64 %4411, %4399
  %4413 = xor i64 %4412, %4406
  %4414 = xor i64 %4413, %4403
  %4415 = xor i64 %4414, %4402
  %4416 = mul i64 %4398, %4415
  %4417 = trunc i64 %4416 to i32
  %4418 = and i64 %3, 1127960823783559180
  %4419 = xor i64 %3, -1
  %4420 = xor i64 1127960823783559180, %4419
  %4421 = and i64 %4420, 1127960823783559180
  %4422 = or i64 %3, -7441564095358403889
  %4423 = xor i64 %3, -1
  %4424 = and i64 %4423, 6839134682017381349
  %4425 = and i64 %3, -6839134682017381350
  %4426 = or i64 %4424, %4425
  %4427 = xor i64 -4155911906111045334, %4426
  %4428 = xor i64 %3, -1
  %4429 = or i64 7441564095358403888, %4428
  %4430 = xor i64 %4429, -1
  %4431 = and i64 %4430, -1
  %4432 = or i64 %4427, %4431
  %4433 = xor i64 -5347846859252862567, %4418
  %4434 = xor i64 %4433, %4432
  %4435 = xor i64 %4434, %4422
  %4436 = xor i64 %4435, %4421
  %4437 = or i64 %3, 4801329299103447799
  %4438 = xor i64 %3, -1
  %4439 = and i64 4801329299103447799, %4438
  %4440 = add i64 %4439, %3
  %4441 = and i64 %3, 2168480208627164136
  %4442 = xor i64 %3, -1
  %4443 = or i64 -2168480208627164137, %4442
  %4444 = xor i64 %4443, -1
  %4445 = and i64 %4444, -1
  %4446 = add i64 %3, 3344883001675433749
  %4447 = xor i64 3344883001675433749, %3
  %4448 = and i64 3344883001675433749, %3
  %4449 = mul i64 2, %4448
  %4450 = add i64 %4447, %4449
  %4451 = xor i64 %4445, 0
  %4452 = xor i64 %4451, %4450
  %4453 = xor i64 %4452, %4446
  %4454 = xor i64 %4453, %4440
  %4455 = xor i64 %4454, %4441
  %4456 = xor i64 %4455, %4437
  %4457 = mul i64 %4436, %4456
  %4458 = trunc i64 %4457 to i1
  %4459 = add i64 %3, 7102613859417881633
  %4460 = and i64 7102613859417881633, %3
  %4461 = or i64 7102613859417881633, %3
  %4462 = add i64 %4460, %4461
  %4463 = and i64 %3, 7024855224234753554
  %4464 = or i64 -7024855224234753555, %3
  %4465 = sub i64 %4464, -7024855224234753555
  %4466 = xor i64 -141597001487738399, %4462
  %4467 = xor i64 %4466, %4459
  %4468 = xor i64 %4467, %4465
  %4469 = xor i64 %4468, %4463
  %4470 = add i64 %3, 4221458797339500663
  %4471 = add i64 -1493226987296969603, %3
  %4472 = add i64 %4471, 5714685784636470266
  %4473 = and i64 %3, -3911031949948271283
  %4474 = xor i64 %3, -1
  %4475 = xor i64 -3911031949948271283, %4474
  %4476 = and i64 %4475, -3911031949948271283
  %4477 = xor i64 %4476, 0
  %4478 = xor i64 %4477, %4473
  %4479 = xor i64 %4478, %4470
  %4480 = xor i64 %4479, %4472
  %4481 = mul i64 %4469, %4480
  %4482 = or i64 %3, 622043383132262304
  %4483 = and i64 622043383132262304, %3
  %4484 = xor i64 622043383132262304, %3
  %4485 = or i64 %4483, %4484
  %4486 = and i64 %3, 2697746011422219465
  %4487 = xor i64 %3, -1
  %4488 = xor i64 2697746011422219465, %4487
  %4489 = and i64 %4488, 2697746011422219465
  %4490 = xor i64 %4489, %4486
  %4491 = xor i64 %4490, %4485
  %4492 = xor i64 %4491, %4482
  %4493 = xor i64 %4492, -4953151497368302537
  %4494 = add i64 %3, 966453374427132066
  %4495 = sub i64 0, %3
  %4496 = add i64 -966453374427132066, %4495
  %4497 = sub i64 0, %4496
  %4498 = and i64 %3, 587998724138919785
  %4499 = xor i64 %3, -1
  %4500 = or i64 -587998724138919786, %4499
  %4501 = xor i64 %4500, -1
  %4502 = and i64 %4501, -1
  %4503 = xor i64 %4494, %4498
  %4504 = xor i64 %4503, %4502
  %4505 = xor i64 %4504, %4497
  %4506 = xor i64 %4505, 0
  %4507 = mul i64 %4493, %4506
  %4508 = add i64 %3, -5778372539598594792
  %4509 = add i64 172547836843001207, %3
  %4510 = sub i64 %4509, 5950920376441595999
  %4511 = and i64 %3, -261872296113370662
  %4512 = xor i64 %3, -1
  %4513 = or i64 261872296113370661, %4512
  %4514 = xor i64 %4513, -1
  %4515 = and i64 %4514, -1
  %4516 = xor i64 %4508, 4080964773290903055
  %4517 = xor i64 %4516, %4510
  %4518 = xor i64 %4517, %4515
  %4519 = xor i64 %4518, %4511
  %4520 = or i64 %3, -877423769182630389
  %4521 = xor i64 %3, -1
  %4522 = and i64 %4521, -6503236820691167100
  %4523 = and i64 %3, 6503236820691167099
  %4524 = or i64 %4522, %4523
  %4525 = xor i64 6227668125577696911, %4524
  %4526 = xor i64 %3, -1
  %4527 = or i64 877423769182630388, %4526
  %4528 = xor i64 %4527, -1
  %4529 = and i64 %4528, -1
  %4530 = or i64 %4525, %4529
  %4531 = or i64 %3, 8063177637544929802
  %4532 = and i64 8063177637544929802, %3
  %4533 = xor i64 8063177637544929802, %3
  %4534 = or i64 %4532, %4533
  %4535 = or i64 %3, 5999923689451811998
  %4536 = and i64 5999923689451811998, %3
  %4537 = xor i64 5999923689451811998, %3
  %4538 = or i64 %4536, %4537
  %4539 = xor i64 %4520, %4531
  %4540 = xor i64 %4539, %4535
  %4541 = xor i64 %4540, %4534
  %4542 = xor i64 %4541, %4538
  %4543 = xor i64 %4542, 0
  %4544 = xor i64 %4543, %4530
  %4545 = mul i64 %4519, %4544
  %4546 = trunc i64 %4545 to i1
  %4547 = add i64 %3, -6908204349503677520
  %4548 = sub i64 0, %3
  %4549 = add i64 6908204349503677520, %4548
  %4550 = sub i64 0, %4549
  %4551 = add i64 %3, 2873638280697901467
  %4552 = sub i64 0, %3
  %4553 = sub i64 2873638280697901467, %4552
  %4554 = add i64 %3, -4684002206114738108
  %4555 = xor i64 -4684002206114738108, %3
  %4556 = and i64 -4684002206114738108, %3
  %4557 = mul i64 2, %4556
  %4558 = add i64 %4555, %4557
  %4559 = xor i64 %4550, -8401029524233367977
  %4560 = xor i64 %4559, %4558
  %4561 = xor i64 %4560, %4553
  %4562 = xor i64 %4561, %4551
  %4563 = xor i64 %4562, %4547
  %4564 = xor i64 %4563, %4554
  %4565 = add i64 %3, 3606896304381529080
  %4566 = sub i64 0, %3
  %4567 = add i64 -3606896304381529080, %4566
  %4568 = sub i64 0, %4567
  %4569 = or i64 %3, -1739658877180974234
  %4570 = xor i64 %3, -1
  %4571 = and i64 %4570, 7469432227077624740
  %4572 = and i64 %3, -7469432227077624741
  %4573 = or i64 %4571, %4572
  %4574 = xor i64 -9190795161765611326, %4573
  %4575 = xor i64 %3, -1
  %4576 = or i64 1739658877180974233, %4575
  %4577 = xor i64 %4576, -1
  %4578 = and i64 %4577, -1
  %4579 = or i64 %4574, %4578
  %4580 = xor i64 %4565, %4579
  %4581 = xor i64 %4580, %4568
  %4582 = xor i64 %4581, %4569
  %4583 = xor i64 %4582, 0
  %4584 = mul i64 %4564, %4583
  %4585 = trunc i64 %4584 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537087, i64* %4367, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %4417, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %4458, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %4481, i32 0, i1* null, i1* null, i64 0, i64 %4507, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %4546, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %4585, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %4586 = load i64, i64* %4367, align 8
  %4587 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %4586
  store i8* bitcast (i1 (i64, i32, i1*)* @render.extracted.11 to i8*), i8** %4587, align 8
  %4588 = alloca i64, align 8
  %4589 = add i64 %3, 5683084456027575341
  %4590 = add i64 -5142789117343932884, %3
  %4591 = add i64 %4590, -7620870500338043391
  %4592 = or i64 %3, -3140431084762591155
  %4593 = xor i64 %3, -1
  %4594 = and i64 -3140431084762591155, %4593
  %4595 = add i64 %4594, %3
  %4596 = add i64 %3, -3995146901768753041
  %4597 = sub i64 0, %3
  %4598 = add i64 3995146901768753041, %4597
  %4599 = sub i64 0, %4598
  %4600 = xor i64 6659264530405563795, %4599
  %4601 = xor i64 %4600, %4591
  %4602 = xor i64 %4601, %4592
  %4603 = xor i64 %4602, %4589
  %4604 = xor i64 %4603, %4596
  %4605 = xor i64 %4604, %4595
  %4606 = and i64 %3, -5779079030320262360
  %4607 = xor i64 %3, -1
  %4608 = xor i64 -5779079030320262360, %4607
  %4609 = and i64 %4608, -5779079030320262360
  %4610 = or i64 %3, 2893007611826799095
  %4611 = and i64 2893007611826799095, %3
  %4612 = xor i64 2893007611826799095, %3
  %4613 = or i64 %4611, %4612
  %4614 = add i64 %3, -3987118358489495096
  %4615 = xor i64 -3987118358489495096, %3
  %4616 = and i64 -3987118358489495096, %3
  %4617 = mul i64 2, %4616
  %4618 = add i64 %4615, %4617
  %4619 = xor i64 %4609, %4610
  %4620 = xor i64 %4619, %4606
  %4621 = xor i64 %4620, %4614
  %4622 = xor i64 %4621, %4618
  %4623 = xor i64 %4622, 0
  %4624 = xor i64 %4623, %4613
  %4625 = mul i64 %4605, %4624
  %4626 = trunc i64 %4625 to i1
  %4627 = add i64 %3, -1911071821774250542
  %4628 = xor i64 -1911071821774250542, %3
  %4629 = and i64 -1911071821774250542, %3
  %4630 = mul i64 2, %4629
  %4631 = add i64 %4628, %4630
  %4632 = and i64 %3, 7820451223568481009
  %4633 = xor i64 %3, -1
  %4634 = xor i64 7820451223568481009, %4633
  %4635 = and i64 %4634, 7820451223568481009
  %4636 = add i64 %3, -4998846752372599243
  %4637 = add i64 8197163214430397387, %3
  %4638 = sub i64 %4637, -5250734106906554986
  %4639 = xor i64 %4638, %4632
  %4640 = xor i64 %4639, %4636
  %4641 = xor i64 %4640, %4627
  %4642 = xor i64 %4641, -1138450605715540055
  %4643 = xor i64 %4642, %4631
  %4644 = xor i64 %4643, %4635
  %4645 = and i64 %3, 2729133418227346765
  %4646 = xor i64 %3, -1
  %4647 = xor i64 2729133418227346765, %4646
  %4648 = and i64 %4647, 2729133418227346765
  %4649 = or i64 %3, 4936637507244421894
  %4650 = and i64 4936637507244421894, %3
  %4651 = xor i64 4936637507244421894, %3
  %4652 = or i64 %4650, %4651
  %4653 = or i64 %3, 8557117370625704845
  %4654 = xor i64 %3, -1
  %4655 = and i64 %4654, 2964902729407583723
  %4656 = and i64 %3, -2964902729407583724
  %4657 = or i64 %4655, %4656
  %4658 = xor i64 6910087240392939110, %4657
  %4659 = xor i64 %3, -1
  %4660 = or i64 -8557117370625704846, %4659
  %4661 = xor i64 %4660, -1
  %4662 = and i64 %4661, -1
  %4663 = or i64 %4658, %4662
  %4664 = xor i64 %4663, %4652
  %4665 = xor i64 %4664, 0
  %4666 = xor i64 %4665, %4653
  %4667 = xor i64 %4666, %4648
  %4668 = xor i64 %4667, %4645
  %4669 = xor i64 %4668, %4649
  %4670 = mul i64 %4644, %4669
  %4671 = trunc i64 %4670 to i1
  %4672 = or i64 %3, -8294449939357318722
  %4673 = and i64 -8294449939357318722, %3
  %4674 = xor i64 -8294449939357318722, %3
  %4675 = or i64 %4673, %4674
  %4676 = and i64 %3, -4902230528320195245
  %4677 = or i64 4902230528320195244, %3
  %4678 = sub i64 %4677, 4902230528320195244
  %4679 = xor i64 %4676, %4678
  %4680 = xor i64 %4679, %4675
  %4681 = xor i64 %4680, %4672
  %4682 = xor i64 %4681, -4245122886572541411
  %4683 = or i64 %3, -3832455302635970147
  %4684 = xor i64 %3, -1
  %4685 = and i64 -3832455302635970147, %4684
  %4686 = add i64 %4685, %3
  %4687 = and i64 %3, -2359039709270702751
  %4688 = xor i64 %3, -1
  %4689 = xor i64 -2359039709270702751, %4688
  %4690 = and i64 %4689, -2359039709270702751
  %4691 = xor i64 %4683, %4690
  %4692 = xor i64 %4691, 0
  %4693 = xor i64 %4692, %4686
  %4694 = xor i64 %4693, %4687
  %4695 = mul i64 %4682, %4694
  %4696 = trunc i64 %4695 to i1
  %4697 = and i64 %3, 3035219014167589046
  %4698 = xor i64 %3, -1
  %4699 = xor i64 3035219014167589046, %4698
  %4700 = and i64 %4699, 3035219014167589046
  %4701 = or i64 %3, 613983726055365802
  %4702 = and i64 613983726055365802, %3
  %4703 = xor i64 613983726055365802, %3
  %4704 = or i64 %4702, %4703
  %4705 = xor i64 %4701, %4700
  %4706 = xor i64 %4705, -9027961827379039097
  %4707 = xor i64 %4706, %4697
  %4708 = xor i64 %4707, %4704
  %4709 = and i64 %3, 2144672225645906463
  %4710 = or i64 -2144672225645906464, %3
  %4711 = sub i64 %4710, -2144672225645906464
  %4712 = and i64 %3, -2826323962287083343
  %4713 = or i64 2826323962287083342, %3
  %4714 = sub i64 %4713, 2826323962287083342
  %4715 = xor i64 %4712, %4709
  %4716 = xor i64 %4715, %4714
  %4717 = xor i64 %4716, 0
  %4718 = xor i64 %4717, %4711
  %4719 = mul i64 %4708, %4718
  %4720 = trunc i64 %4719 to i32
  %4721 = and i64 %3, 5906801363246195308
  %4722 = or i64 -5906801363246195309, %3
  %4723 = sub i64 %4722, -5906801363246195309
  %4724 = and i64 %3, -1709384220097175278
  %4725 = xor i64 %3, -1
  %4726 = or i64 1709384220097175277, %4725
  %4727 = xor i64 %4726, -1
  %4728 = and i64 %4727, -1
  %4729 = or i64 %3, 3665116604724343722
  %4730 = xor i64 %3, -1
  %4731 = and i64 3665116604724343722, %4730
  %4732 = add i64 %4731, %3
  %4733 = xor i64 %4723, 2778173147590706591
  %4734 = xor i64 %4733, %4732
  %4735 = xor i64 %4734, %4728
  %4736 = xor i64 %4735, %4724
  %4737 = xor i64 %4736, %4721
  %4738 = xor i64 %4737, %4729
  %4739 = add i64 %3, 1493192883882794302
  %4740 = and i64 1493192883882794302, %3
  %4741 = or i64 1493192883882794302, %3
  %4742 = add i64 %4740, %4741
  %4743 = and i64 %3, 4378013807367040559
  %4744 = xor i64 %3, -1
  %4745 = xor i64 4378013807367040559, %4744
  %4746 = and i64 %4745, 4378013807367040559
  %4747 = or i64 %3, -2846714087810088681
  %4748 = and i64 -2846714087810088681, %3
  %4749 = xor i64 -2846714087810088681, %3
  %4750 = or i64 %4748, %4749
  %4751 = xor i64 %4750, %4743
  %4752 = xor i64 %4751, %4747
  %4753 = xor i64 %4752, 0
  %4754 = xor i64 %4753, %4739
  %4755 = xor i64 %4754, %4742
  %4756 = xor i64 %4755, %4746
  %4757 = mul i64 %4738, %4756
  %4758 = trunc i64 %4757 to i1
  %4759 = and i64 %3, 2470798636520388078
  %4760 = xor i64 %3, -1
  %4761 = xor i64 2470798636520388078, %4760
  %4762 = and i64 %4761, 2470798636520388078
  %4763 = and i64 %3, -22912721367130442
  %4764 = or i64 22912721367130441, %3
  %4765 = sub i64 %4764, 22912721367130441
  %4766 = xor i64 5786853442466718601, %4763
  %4767 = xor i64 %4766, %4762
  %4768 = xor i64 %4767, %4765
  %4769 = xor i64 %4768, %4759
  %4770 = and i64 %3, 1089088517114668966
  %4771 = xor i64 %3, -1
  %4772 = xor i64 1089088517114668966, %4771
  %4773 = and i64 %4772, 1089088517114668966
  %4774 = and i64 %3, 2520171746394915490
  %4775 = xor i64 %3, -1
  %4776 = or i64 -2520171746394915491, %4775
  %4777 = xor i64 %4776, -1
  %4778 = and i64 %4777, -1
  %4779 = and i64 %3, -2754395374191922500
  %4780 = or i64 2754395374191922499, %3
  %4781 = sub i64 %4780, 2754395374191922499
  %4782 = xor i64 %4773, %4781
  %4783 = xor i64 %4782, %4774
  %4784 = xor i64 %4783, %4778
  %4785 = xor i64 %4784, 0
  %4786 = xor i64 %4785, %4779
  %4787 = xor i64 %4786, %4770
  %4788 = mul i64 %4769, %4787
  %4789 = trunc i64 %4788 to i1
  %4790 = and i64 %3, -1894893926363612519
  %4791 = xor i64 %3, -1
  %4792 = xor i64 -1894893926363612519, %4791
  %4793 = and i64 %4792, -1894893926363612519
  %4794 = add i64 %3, -6083299960170902507
  %4795 = sub i64 0, %3
  %4796 = add i64 6083299960170902507, %4795
  %4797 = sub i64 0, %4796
  %4798 = and i64 %3, 5555397033552612668
  %4799 = or i64 -5555397033552612669, %3
  %4800 = sub i64 %4799, -5555397033552612669
  %4801 = xor i64 %4793, %4790
  %4802 = xor i64 %4801, 5512663364904556935
  %4803 = xor i64 %4802, %4797
  %4804 = xor i64 %4803, %4798
  %4805 = xor i64 %4804, %4800
  %4806 = xor i64 %4805, %4794
  %4807 = add i64 %3, -2672126395643749607
  %4808 = add i64 -7059680846649014437, %3
  %4809 = sub i64 %4808, -4387554451005264830
  %4810 = and i64 %3, 118574247321559835
  %4811 = xor i64 %3, -1
  %4812 = xor i64 118574247321559835, %4811
  %4813 = and i64 %4812, 118574247321559835
  %4814 = or i64 %3, 627895646179220448
  %4815 = and i64 627895646179220448, %3
  %4816 = xor i64 627895646179220448, %3
  %4817 = or i64 %4815, %4816
  %4818 = xor i64 %4807, %4813
  %4819 = xor i64 %4818, %4810
  %4820 = xor i64 %4819, %4814
  %4821 = xor i64 %4820, %4817
  %4822 = xor i64 %4821, 0
  %4823 = xor i64 %4822, %4809
  %4824 = mul i64 %4806, %4823
  %4825 = trunc i64 %4824 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537076, i64* %4588, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %4626, i1* null, i1* null, i1* null, i1* null, i1 %4671, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %4696, i1* null, i32 %4720, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %4758, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %4789, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %4825, i32 0, i1* null, i1* null)
  %4826 = load i64, i64* %4588, align 8
  %4827 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %4826
  store i8* bitcast (i32 (i32)* @putchar to i8*), i8** %4827, align 8
  %4828 = alloca i64, align 8
  %4829 = and i64 %3, 3978785935942641403
  %4830 = xor i64 %3, -1
  %4831 = or i64 -3978785935942641404, %4830
  %4832 = xor i64 %4831, -1
  %4833 = and i64 %4832, -1
  %4834 = add i64 %3, 2425984180208170080
  %4835 = sub i64 0, %3
  %4836 = sub i64 2425984180208170080, %4835
  %4837 = add i64 %3, -205490921352257822
  %4838 = add i64 7677124749208257267, %3
  %4839 = add i64 %4838, -7882615670560515089
  %4840 = xor i64 %4829, %4834
  %4841 = xor i64 %4840, %4837
  %4842 = xor i64 %4841, %4836
  %4843 = xor i64 %4842, -2802749708650636551
  %4844 = xor i64 %4843, %4833
  %4845 = xor i64 %4844, %4839
  %4846 = and i64 %3, 5442631002403348662
  %4847 = or i64 -5442631002403348663, %3
  %4848 = sub i64 %4847, -5442631002403348663
  %4849 = add i64 %3, -4768163169436977127
  %4850 = sub i64 0, %3
  %4851 = add i64 4768163169436977127, %4850
  %4852 = sub i64 0, %4851
  %4853 = xor i64 %4848, %4846
  %4854 = xor i64 %4853, %4849
  %4855 = xor i64 %4854, %4852
  %4856 = xor i64 %4855, 0
  %4857 = mul i64 %4845, %4856
  %4858 = trunc i64 %4857 to i1
  %4859 = and i64 %3, -3369394928374574021
  %4860 = xor i64 %3, -1
  %4861 = xor i64 -3369394928374574021, %4860
  %4862 = and i64 %4861, -3369394928374574021
  %4863 = add i64 %3, -4751074702721338991
  %4864 = and i64 -4751074702721338991, %3
  %4865 = or i64 -4751074702721338991, %3
  %4866 = add i64 %4864, %4865
  %4867 = xor i64 %4859, %4862
  %4868 = xor i64 %4867, %4866
  %4869 = xor i64 %4868, 5919169295931838465
  %4870 = xor i64 %4869, %4863
  %4871 = add i64 %3, -3301043674008805811
  %4872 = add i64 6861310213834808088, %3
  %4873 = sub i64 %4872, -8284390185865937717
  %4874 = or i64 %3, -4082700553567072536
  %4875 = xor i64 %3, -1
  %4876 = and i64 %4875, -5613956421598323738
  %4877 = and i64 %3, 5613956421598323737
  %4878 = or i64 %4876, %4877
  %4879 = xor i64 8448872862307308814, %4878
  %4880 = xor i64 %3, -1
  %4881 = or i64 4082700553567072535, %4880
  %4882 = xor i64 %4881, -1
  %4883 = and i64 %4882, -1
  %4884 = or i64 %4879, %4883
  %4885 = add i64 %3, -1363683104159684245
  %4886 = add i64 5941713889886754432, %3
  %4887 = sub i64 %4886, 7305396994046438677
  %4888 = xor i64 %4873, %4887
  %4889 = xor i64 %4888, %4874
  %4890 = xor i64 %4889, %4871
  %4891 = xor i64 %4890, %4884
  %4892 = xor i64 %4891, %4885
  %4893 = xor i64 %4892, 0
  %4894 = mul i64 %4870, %4893
  %4895 = add i64 %3, -994370254987166636
  %4896 = and i64 -994370254987166636, %3
  %4897 = or i64 -994370254987166636, %3
  %4898 = add i64 %4896, %4897
  %4899 = or i64 %3, 2627649331027380501
  %4900 = xor i64 %3, -1
  %4901 = and i64 2627649331027380501, %4900
  %4902 = add i64 %4901, %3
  %4903 = xor i64 %4898, %4895
  %4904 = xor i64 %4903, %4899
  %4905 = xor i64 %4904, -2068292689495308787
  %4906 = xor i64 %4905, %4902
  %4907 = add i64 %3, -7040686874424055466
  %4908 = xor i64 -7040686874424055466, %3
  %4909 = and i64 -7040686874424055466, %3
  %4910 = mul i64 2, %4909
  %4911 = add i64 %4908, %4910
  %4912 = and i64 %3, -5163306323190206985
  %4913 = xor i64 %3, -1
  %4914 = xor i64 -5163306323190206985, %4913
  %4915 = and i64 %4914, -5163306323190206985
  %4916 = or i64 %3, 3493211576083059121
  %4917 = and i64 3493211576083059121, %3
  %4918 = xor i64 3493211576083059121, %3
  %4919 = or i64 %4917, %4918
  %4920 = xor i64 %4912, %4919
  %4921 = xor i64 %4920, %4915
  %4922 = xor i64 %4921, %4916
  %4923 = xor i64 %4922, 0
  %4924 = xor i64 %4923, %4911
  %4925 = xor i64 %4924, %4907
  %4926 = mul i64 %4906, %4925
  %4927 = trunc i64 %4926 to i1
  %4928 = and i64 %3, 347135950381538074
  %4929 = xor i64 %3, -1
  %4930 = xor i64 347135950381538074, %4929
  %4931 = and i64 %4930, 347135950381538074
  %4932 = and i64 %3, 4558735081989018344
  %4933 = xor i64 %3, -1
  %4934 = or i64 -4558735081989018345, %4933
  %4935 = xor i64 %4934, -1
  %4936 = and i64 %4935, -1
  %4937 = xor i64 %4928, %4936
  %4938 = xor i64 %4937, %4931
  %4939 = xor i64 %4938, 4335135422665138053
  %4940 = xor i64 %4939, %4932
  %4941 = or i64 %3, 6515893416684002666
  %4942 = xor i64 %3, -1
  %4943 = and i64 6515893416684002666, %4942
  %4944 = add i64 %4943, %3
  %4945 = add i64 %3, -7775590811622931333
  %4946 = sub i64 0, %3
  %4947 = add i64 7775590811622931333, %4946
  %4948 = sub i64 0, %4947
  %4949 = xor i64 %4945, %4948
  %4950 = xor i64 %4949, 0
  %4951 = xor i64 %4950, %4941
  %4952 = xor i64 %4951, %4944
  %4953 = mul i64 %4940, %4952
  %4954 = add i64 %3, -4177528090338467523
  %4955 = add i64 5050310234493003012, %3
  %4956 = sub i64 %4955, -9218905748878081081
  %4957 = and i64 %3, 7540167176343058074
  %4958 = xor i64 %3, -1
  %4959 = xor i64 7540167176343058074, %4958
  %4960 = and i64 %4959, 7540167176343058074
  %4961 = or i64 %3, -1989766465415175588
  %4962 = and i64 -1989766465415175588, %3
  %4963 = xor i64 -1989766465415175588, %3
  %4964 = or i64 %4962, %4963
  %4965 = xor i64 %4961, %4954
  %4966 = xor i64 %4965, %4964
  %4967 = xor i64 %4966, 9116579370372589415
  %4968 = xor i64 %4967, %4956
  %4969 = xor i64 %4968, %4957
  %4970 = xor i64 %4969, %4960
  %4971 = add i64 %3, -4233696611014544034
  %4972 = add i64 9178450322600769779, %3
  %4973 = add i64 %4972, 5034597140094237803
  %4974 = and i64 %3, -5849219681077612575
  %4975 = xor i64 %3, -1
  %4976 = xor i64 -5849219681077612575, %4975
  %4977 = and i64 %4976, -5849219681077612575
  %4978 = xor i64 %4977, %4974
  %4979 = xor i64 %4978, %4973
  %4980 = xor i64 %4979, 0
  %4981 = xor i64 %4980, %4971
  %4982 = mul i64 %4970, %4981
  %4983 = or i64 %3, 26825470809507467
  %4984 = xor i64 %3, -1
  %4985 = and i64 26825470809507467, %4984
  %4986 = add i64 %4985, %3
  %4987 = and i64 %3, -5689692362759602356
  %4988 = xor i64 %3, -1
  %4989 = or i64 5689692362759602355, %4988
  %4990 = xor i64 %4989, -1
  %4991 = and i64 %4990, -1
  %4992 = xor i64 %4991, 5018699131038018845
  %4993 = xor i64 %4992, %4987
  %4994 = xor i64 %4993, %4983
  %4995 = xor i64 %4994, %4986
  %4996 = add i64 %3, 452140148793460121
  %4997 = sub i64 0, %3
  %4998 = sub i64 452140148793460121, %4997
  %4999 = and i64 %3, 3516872804265542021
  %5000 = xor i64 %3, -1
  %5001 = or i64 -3516872804265542022, %5000
  %5002 = xor i64 %5001, -1
  %5003 = and i64 %5002, -1
  %5004 = or i64 %3, -5808223202518001143
  %5005 = xor i64 %3, -1
  %5006 = and i64 -5808223202518001143, %5005
  %5007 = add i64 %5006, %3
  %5008 = xor i64 %4999, %5004
  %5009 = xor i64 %5008, %4998
  %5010 = xor i64 %5009, 0
  %5011 = xor i64 %5010, %5003
  %5012 = xor i64 %5011, %5007
  %5013 = xor i64 %5012, %4996
  %5014 = mul i64 %4995, %5013
  %5015 = and i64 %3, -898974426452164134
  %5016 = or i64 898974426452164133, %3
  %5017 = sub i64 %5016, 898974426452164133
  %5018 = or i64 %3, 8889526227251525709
  %5019 = and i64 8889526227251525709, %3
  %5020 = xor i64 8889526227251525709, %3
  %5021 = or i64 %5019, %5020
  %5022 = xor i64 %5021, -8176031048754144009
  %5023 = xor i64 %5022, %5015
  %5024 = xor i64 %5023, %5017
  %5025 = xor i64 %5024, %5018
  %5026 = add i64 %3, -6713713261107176754
  %5027 = add i64 1534141210650696188, %3
  %5028 = sub i64 %5027, 8247854471757872942
  %5029 = add i64 %3, -1412859946143169679
  %5030 = sub i64 0, %3
  %5031 = sub i64 -1412859946143169679, %5030
  %5032 = xor i64 %5029, %5028
  %5033 = xor i64 %5032, %5031
  %5034 = xor i64 %5033, %5026
  %5035 = xor i64 %5034, 0
  %5036 = mul i64 %5025, %5035
  %5037 = trunc i64 %5036 to i1
  %5038 = and i64 %3, 597327165365362758
  %5039 = xor i64 %3, -1
  %5040 = or i64 -597327165365362759, %5039
  %5041 = xor i64 %5040, -1
  %5042 = and i64 %5041, -1
  %5043 = or i64 %3, 6014424240481245604
  %5044 = xor i64 %3, -1
  %5045 = and i64 %5044, 3166405139418854254
  %5046 = and i64 %3, -3166405139418854255
  %5047 = or i64 %5045, %5046
  %5048 = xor i64 8684860145364773578, %5047
  %5049 = xor i64 %3, -1
  %5050 = or i64 -6014424240481245605, %5049
  %5051 = xor i64 %5050, -1
  %5052 = and i64 %5051, -1
  %5053 = or i64 %5048, %5052
  %5054 = or i64 %3, -3876750119034707208
  %5055 = xor i64 %3, -1
  %5056 = and i64 %5055, -5158972654678240295
  %5057 = and i64 %3, 5158972654678240294
  %5058 = or i64 %5056, %5057
  %5059 = xor i64 8238387714689904929, %5058
  %5060 = xor i64 %3, -1
  %5061 = or i64 3876750119034707207, %5060
  %5062 = xor i64 %5061, -1
  %5063 = and i64 %5062, -1
  %5064 = or i64 %5059, %5063
  %5065 = xor i64 %5042, %5064
  %5066 = xor i64 %5065, %5054
  %5067 = xor i64 %5066, %5038
  %5068 = xor i64 %5067, 8188821725853678749
  %5069 = xor i64 %5068, %5043
  %5070 = xor i64 %5069, %5053
  %5071 = and i64 %3, -7364175943487753471
  %5072 = xor i64 %3, -1
  %5073 = or i64 7364175943487753470, %5072
  %5074 = xor i64 %5073, -1
  %5075 = and i64 %5074, -1
  %5076 = and i64 %3, -1256913017638203642
  %5077 = xor i64 %3, -1
  %5078 = xor i64 -1256913017638203642, %5077
  %5079 = and i64 %5078, -1256913017638203642
  %5080 = xor i64 %5076, %5071
  %5081 = xor i64 %5080, 0
  %5082 = xor i64 %5081, %5079
  %5083 = xor i64 %5082, %5075
  %5084 = mul i64 %5070, %5083
  %5085 = trunc i64 %5084 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537083, i64* %4828, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %4858, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %4894, i1 false, i1* null, i1 false, i1 %4927, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %4953, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %4982, i32 0, i1* null, i1* null, i64 0, i64 %5014, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %5037, i1* null, i1 %5085, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5086 = load i64, i64* %4828, align 8
  %5087 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %5086
  store i8* bitcast (i32 (float*, float*)* @update to i8*), i8** %5087, align 8
  %.loc231 = alloca i1, align 1
  %.loc220 = alloca i64, align 8
  %.loc219 = alloca i64, align 8
  %.loc218 = alloca i32, align 4
  %.loc211 = alloca i1, align 1
  %.loc210 = alloca i1, align 1
  %.loc204 = alloca i64, align 8
  %.loc203 = alloca i64, align 8
  %.loc194 = alloca i1, align 1
  %.loc193 = alloca i64, align 8
  %.loc192 = alloca i64, align 8
  %5088 = add i64 %3, 7296522337135263323
  %5089 = add i64 -1935602109081083703, %3
  %5090 = sub i64 %5089, 9214619627493204590
  %5091 = add i64 %3, -1166832664451936897
  %5092 = and i64 -1166832664451936897, %3
  %5093 = or i64 -1166832664451936897, %3
  %5094 = add i64 %5092, %5093
  %5095 = add i64 %3, -3288457432214723108
  %5096 = sub i64 0, %3
  %5097 = sub i64 -3288457432214723108, %5096
  %5098 = xor i64 2368043489249801929, %5091
  %5099 = xor i64 %5098, %5088
  %5100 = xor i64 %5099, %5097
  %5101 = xor i64 %5100, %5095
  %5102 = xor i64 %5101, %5094
  %5103 = xor i64 %5102, %5090
  %5104 = and i64 %3, 1297489259339086058
  %5105 = xor i64 %3, -1
  %5106 = or i64 -1297489259339086059, %5105
  %5107 = xor i64 %5106, -1
  %5108 = and i64 %5107, -1
  %5109 = add i64 %3, 7255830920056332277
  %5110 = add i64 7599614405270668464, %3
  %5111 = add i64 %5110, -343783485214336187
  %5112 = and i64 %3, 7662307803119906537
  %5113 = or i64 -7662307803119906538, %3
  %5114 = sub i64 %5113, -7662307803119906538
  %5115 = xor i64 %5104, %5114
  %5116 = xor i64 %5115, %5111
  %5117 = xor i64 %5116, %5109
  %5118 = xor i64 %5117, %5112
  %5119 = xor i64 %5118, -1789983403589057671
  %5120 = xor i64 %5119, %5108
  %5121 = mul i64 %5103, %5120
  %5122 = trunc i64 %5121 to i32
  %.loc187 = alloca i64, i32 %5122, align 8
  %.loc132 = alloca i1, align 1
  %.loc131 = alloca i1, align 1
  %.loc130 = alloca i1, align 1
  %.loc129 = alloca i1, align 1
  %.loc128 = alloca i1, align 1
  %.loc127 = alloca i1, align 1
  %.loc126 = alloca i1, align 1
  %5123 = add i64 %3, 3134286681270509087
  %5124 = add i64 3182469759006042789, %3
  %5125 = sub i64 %5124, 48183077735533702
  %5126 = add i64 %3, -4662662505953399404
  %5127 = add i64 1084733926403992289, %3
  %5128 = sub i64 %5127, 5747396432357391693
  %5129 = and i64 %3, 3167389734548628043
  %5130 = xor i64 %3, -1
  %5131 = xor i64 3167389734548628043, %5130
  %5132 = and i64 %5131, 3167389734548628043
  %5133 = xor i64 %5126, %5125
  %5134 = xor i64 %5133, %5123
  %5135 = xor i64 %5134, %5132
  %5136 = xor i64 %5135, 1053246793140107699
  %5137 = xor i64 %5136, %5129
  %5138 = xor i64 %5137, %5128
  %5139 = and i64 %3, -9106146480481854123
  %5140 = xor i64 %3, -1
  %5141 = xor i64 -9106146480481854123, %5140
  %5142 = and i64 %5141, -9106146480481854123
  %5143 = and i64 %3, 4735288439582469660
  %5144 = or i64 -4735288439582469661, %3
  %5145 = sub i64 %5144, -4735288439582469661
  %5146 = xor i64 %5139, %5143
  %5147 = xor i64 %5146, -7025820677934686853
  %5148 = xor i64 %5147, %5145
  %5149 = xor i64 %5148, %5142
  %5150 = mul i64 %5138, %5149
  %5151 = trunc i64 %5150 to i32
  %.loc125 = alloca i1, i32 %5151, align 1
  %.loc124 = alloca i1, align 1
  %.loc123 = alloca i1, align 1
  %.loc122 = alloca i1, align 1
  %5152 = and i64 %3, -1926258900553262109
  %5153 = or i64 1926258900553262108, %3
  %5154 = sub i64 %5153, 1926258900553262108
  %5155 = and i64 %3, 2387474133656176876
  %5156 = xor i64 %3, -1
  %5157 = or i64 -2387474133656176877, %5156
  %5158 = xor i64 %5157, -1
  %5159 = and i64 %5158, -1
  %5160 = xor i64 %5154, -4971464126000273803
  %5161 = xor i64 %5160, %5159
  %5162 = xor i64 %5161, %5152
  %5163 = xor i64 %5162, %5155
  %5164 = add i64 %3, -8555799935050957059
  %5165 = xor i64 -8555799935050957059, %3
  %5166 = and i64 -8555799935050957059, %3
  %5167 = mul i64 2, %5166
  %5168 = add i64 %5165, %5167
  %5169 = and i64 %3, 6420439131308366371
  %5170 = xor i64 %3, -1
  %5171 = xor i64 6420439131308366371, %5170
  %5172 = and i64 %5171, 6420439131308366371
  %5173 = add i64 %3, -1828569450072074019
  %5174 = add i64 -3209131660220010094, %3
  %5175 = add i64 %5174, 1380562210147936075
  %5176 = xor i64 %5164, 20279168831207901
  %5177 = xor i64 %5176, %5175
  %5178 = xor i64 %5177, %5173
  %5179 = xor i64 %5178, %5172
  %5180 = xor i64 %5179, %5169
  %5181 = xor i64 %5180, %5168
  %5182 = mul i64 %5163, %5181
  %5183 = trunc i64 %5182 to i32
  %.loc121 = alloca i1, i32 %5183, align 1
  %.loc120 = alloca i1, align 1
  %.loc119 = alloca i1, align 1
  %.loc118 = alloca i1, align 1
  %.loc117 = alloca i1, align 1
  %5184 = add i64 %3, -4910906247464612962
  %5185 = sub i64 0, %3
  %5186 = sub i64 -4910906247464612962, %5185
  %5187 = add i64 %3, 7673855809269209214
  %5188 = add i64 -189453002806627790, %3
  %5189 = add i64 %5188, 7863308812075837004
  %5190 = xor i64 %5184, -9128035131575733605
  %5191 = xor i64 %5190, %5187
  %5192 = xor i64 %5191, %5186
  %5193 = xor i64 %5192, %5189
  %5194 = and i64 %3, -6584747309196376394
  %5195 = or i64 6584747309196376393, %3
  %5196 = sub i64 %5195, 6584747309196376393
  %5197 = and i64 %3, 6422743399729379992
  %5198 = xor i64 %3, -1
  %5199 = or i64 -6422743399729379993, %5198
  %5200 = xor i64 %5199, -1
  %5201 = and i64 %5200, -1
  %5202 = add i64 %3, -516447118941195880
  %5203 = add i64 -1141831507863918720, %3
  %5204 = add i64 %5203, 625384388922722840
  %5205 = xor i64 %5201, %5202
  %5206 = xor i64 %5205, %5197
  %5207 = xor i64 %5206, %5194
  %5208 = xor i64 %5207, %5196
  %5209 = xor i64 %5208, %5204
  %5210 = xor i64 %5209, -1784975744504093805
  %5211 = mul i64 %5193, %5210
  %5212 = trunc i64 %5211 to i32
  %.loc116 = alloca i1, i32 %5212, align 1
  %.loc115 = alloca i1, align 1
  %.loc114 = alloca i1, align 1
  %.loc113 = alloca i1, align 1
  %.loc112 = alloca i1, align 1
  %.loc111 = alloca i1, align 1
  %.loc110 = alloca i1, align 1
  %5213 = or i64 %3, -3829959646071631420
  %5214 = and i64 -3829959646071631420, %3
  %5215 = xor i64 -3829959646071631420, %3
  %5216 = or i64 %5214, %5215
  %5217 = and i64 %3, -1438927585293436901
  %5218 = or i64 1438927585293436900, %3
  %5219 = sub i64 %5218, 1438927585293436900
  %5220 = xor i64 %5219, %5217
  %5221 = xor i64 %5220, %5216
  %5222 = xor i64 %5221, -512227657108762029
  %5223 = xor i64 %5222, %5213
  %5224 = or i64 %3, 7464294973554432503
  %5225 = xor i64 %3, -1
  %5226 = and i64 %5225, -2075493641841767116
  %5227 = and i64 %3, 2075493641841767115
  %5228 = or i64 %5226, %5227
  %5229 = xor i64 -8888736513060072253, %5228
  %5230 = xor i64 %3, -1
  %5231 = or i64 -7464294973554432504, %5230
  %5232 = xor i64 %5231, -1
  %5233 = and i64 %5232, -1
  %5234 = or i64 %5229, %5233
  %5235 = add i64 %3, 8259960064308711121
  %5236 = sub i64 0, %3
  %5237 = add i64 -8259960064308711121, %5236
  %5238 = sub i64 0, %5237
  %5239 = add i64 %3, -8314213526050451109
  %5240 = sub i64 0, %3
  %5241 = sub i64 -8314213526050451109, %5240
  %5242 = xor i64 %5241, %5224
  %5243 = xor i64 %5242, %5235
  %5244 = xor i64 %5243, %5238
  %5245 = xor i64 %5244, %5234
  %5246 = xor i64 %5245, %5239
  %5247 = xor i64 %5246, 9207228192852623835
  %5248 = mul i64 %5223, %5247
  %5249 = trunc i64 %5248 to i32
  %.loc109 = alloca i64, i32 %5249, align 8
  %5250 = or i64 %3, 6999372980178652335
  %5251 = and i64 6999372980178652335, %3
  %5252 = xor i64 6999372980178652335, %3
  %5253 = or i64 %5251, %5252
  %5254 = or i64 %3, -9188060476839430949
  %5255 = xor i64 %3, -1
  %5256 = and i64 -9188060476839430949, %5255
  %5257 = add i64 %5256, %3
  %5258 = xor i64 %5253, %5250
  %5259 = xor i64 %5258, %5254
  %5260 = xor i64 %5259, %5257
  %5261 = xor i64 %5260, 6154383675787760779
  %5262 = or i64 %3, 4131936504697641555
  %5263 = xor i64 %3, -1
  %5264 = and i64 %5263, 6346794808802857556
  %5265 = and i64 %3, -6346794808802857557
  %5266 = or i64 %5264, %5265
  %5267 = xor i64 7008672062961354759, %5266
  %5268 = xor i64 %3, -1
  %5269 = or i64 -4131936504697641556, %5268
  %5270 = xor i64 %5269, -1
  %5271 = and i64 %5270, -1
  %5272 = or i64 %5267, %5271
  %5273 = and i64 %3, 4267322470485180301
  %5274 = xor i64 %3, -1
  %5275 = or i64 -4267322470485180302, %5274
  %5276 = xor i64 %5275, -1
  %5277 = and i64 %5276, -1
  %5278 = xor i64 %5273, %5262
  %5279 = xor i64 %5278, -2969363497287159005
  %5280 = xor i64 %5279, %5272
  %5281 = xor i64 %5280, %5277
  %5282 = mul i64 %5261, %5281
  %5283 = trunc i64 %5282 to i32
  %.loc108 = alloca i1, i32 %5283, align 1
  %.loc107 = alloca i64, align 8
  %.loc52 = alloca i1, align 1
  %.loc51 = alloca i1, align 1
  %5284 = add i64 %3, -1764567088949743766
  %5285 = sub i64 0, %3
  %5286 = sub i64 -1764567088949743766, %5285
  %5287 = add i64 %3, -2310446083159037973
  %5288 = add i64 -265864803023156238, %3
  %5289 = sub i64 %5288, 2044581280135881735
  %5290 = add i64 %3, 8497336969575924660
  %5291 = sub i64 0, %3
  %5292 = sub i64 8497336969575924660, %5291
  %5293 = xor i64 %5284, %5287
  %5294 = xor i64 %5293, %5290
  %5295 = xor i64 %5294, %5286
  %5296 = xor i64 %5295, %5292
  %5297 = xor i64 %5296, %5289
  %5298 = xor i64 %5297, 8733960804212802099
  %5299 = or i64 %3, 7328828340746016893
  %5300 = and i64 7328828340746016893, %3
  %5301 = xor i64 7328828340746016893, %3
  %5302 = or i64 %5300, %5301
  %5303 = add i64 %3, -5764194935896660898
  %5304 = sub i64 0, %3
  %5305 = sub i64 -5764194935896660898, %5304
  %5306 = xor i64 -5814222926409840389, %5305
  %5307 = xor i64 %5306, %5303
  %5308 = xor i64 %5307, %5299
  %5309 = xor i64 %5308, %5302
  %5310 = mul i64 %5298, %5309
  %5311 = trunc i64 %5310 to i32
  %.loc50 = alloca i1, i32 %5311, align 1
  %.loc49 = alloca i1, align 1
  %.loc48 = alloca i1, align 1
  %.loc47 = alloca i1, align 1
  %.loc46 = alloca i1, align 1
  %.loc45 = alloca i1, align 1
  %.loc44 = alloca i1, align 1
  %.loc43 = alloca i1, align 1
  %.loc42 = alloca i1, align 1
  %.loc41 = alloca i1, align 1
  %.loc40 = alloca i1, align 1
  %.loc39 = alloca i1, align 1
  %5312 = and i64 %3, -8926002408791492738
  %5313 = or i64 8926002408791492737, %3
  %5314 = sub i64 %5313, 8926002408791492737
  %5315 = add i64 %3, -7425696988167865067
  %5316 = sub i64 0, %3
  %5317 = add i64 7425696988167865067, %5316
  %5318 = sub i64 0, %5317
  %5319 = xor i64 %5312, %5318
  %5320 = xor i64 %5319, %5315
  %5321 = xor i64 %5320, %5314
  %5322 = xor i64 %5321, -2614911710225461875
  %5323 = or i64 %3, 2316836465019144045
  %5324 = and i64 2316836465019144045, %3
  %5325 = xor i64 2316836465019144045, %3
  %5326 = or i64 %5324, %5325
  %5327 = or i64 %3, -7041980420011234163
  %5328 = xor i64 %3, -1
  %5329 = and i64 %5328, 1387273854449533102
  %5330 = and i64 %3, -1387273854449533103
  %5331 = or i64 %5329, %5330
  %5332 = xor i64 -8285134411312157661, %5331
  %5333 = xor i64 %3, -1
  %5334 = or i64 7041980420011234162, %5333
  %5335 = xor i64 %5334, -1
  %5336 = and i64 %5335, -1
  %5337 = or i64 %5332, %5336
  %5338 = xor i64 %5327, %5323
  %5339 = xor i64 %5338, %5326
  %5340 = xor i64 %5339, 4112157860101389637
  %5341 = xor i64 %5340, %5337
  %5342 = mul i64 %5322, %5341
  %5343 = trunc i64 %5342 to i32
  %.loc38 = alloca i1, i32 %5343, align 1
  %5344 = add i64 %3, -4851610667641062575
  %5345 = add i64 370245931855190056, %3
  %5346 = add i64 %5345, -5221856599496252631
  %5347 = add i64 %3, -8301183833406849245
  %5348 = sub i64 0, %3
  %5349 = sub i64 -8301183833406849245, %5348
  %5350 = and i64 %3, -7423916151276505986
  %5351 = xor i64 %3, -1
  %5352 = or i64 7423916151276505985, %5351
  %5353 = xor i64 %5352, -1
  %5354 = and i64 %5353, -1
  %5355 = xor i64 %5346, %5354
  %5356 = xor i64 %5355, %5350
  %5357 = xor i64 %5356, %5349
  %5358 = xor i64 %5357, 3904602674175999135
  %5359 = xor i64 %5358, %5344
  %5360 = xor i64 %5359, %5347
  %5361 = and i64 %3, -6258719076786010581
  %5362 = xor i64 %3, -1
  %5363 = xor i64 -6258719076786010581, %5362
  %5364 = and i64 %5363, -6258719076786010581
  %5365 = add i64 %3, -4559389826375216722
  %5366 = add i64 6794839307266333664, %3
  %5367 = add i64 %5366, 7092514940068001230
  %5368 = xor i64 %5367, %5361
  %5369 = xor i64 %5368, %5364
  %5370 = xor i64 %5369, %5365
  %5371 = xor i64 %5370, -4498463953750778017
  %5372 = mul i64 %5360, %5371
  %5373 = trunc i64 %5372 to i32
  %.loc37 = alloca i1, i32 %5373, align 1
  %.loc36 = alloca i1, align 1
  %5374 = add i64 %3, -3303804700693555739
  %5375 = sub i64 0, %3
  %5376 = add i64 3303804700693555739, %5375
  %5377 = sub i64 0, %5376
  %5378 = and i64 %3, -4311791395519422881
  %5379 = or i64 4311791395519422880, %3
  %5380 = sub i64 %5379, 4311791395519422880
  %5381 = and i64 %3, -3968445488516986971
  %5382 = xor i64 %3, -1
  %5383 = xor i64 -3968445488516986971, %5382
  %5384 = and i64 %5383, -3968445488516986971
  %5385 = xor i64 %5381, %5380
  %5386 = xor i64 %5385, %5378
  %5387 = xor i64 %5386, %5374
  %5388 = xor i64 %5387, %5384
  %5389 = xor i64 %5388, 8612331127831561379
  %5390 = xor i64 %5389, %5377
  %5391 = or i64 %3, -777075417327123385
  %5392 = xor i64 %3, -1
  %5393 = and i64 %5392, 8663749902002672280
  %5394 = and i64 %3, -8663749902002672281
  %5395 = or i64 %5393, %5394
  %5396 = xor i64 -8283082181317323041, %5395
  %5397 = xor i64 %3, -1
  %5398 = or i64 777075417327123384, %5397
  %5399 = xor i64 %5398, -1
  %5400 = and i64 %5399, -1
  %5401 = or i64 %5396, %5400
  %5402 = add i64 %3, 4639381529939833528
  %5403 = sub i64 0, %3
  %5404 = add i64 -4639381529939833528, %5403
  %5405 = sub i64 0, %5404
  %5406 = and i64 %3, -4583899197383386867
  %5407 = or i64 4583899197383386866, %3
  %5408 = sub i64 %5407, 4583899197383386866
  %5409 = xor i64 %5406, %5401
  %5410 = xor i64 %5409, %5402
  %5411 = xor i64 %5410, %5391
  %5412 = xor i64 %5411, %5405
  %5413 = xor i64 %5412, %5408
  %5414 = xor i64 %5413, 6435586041458216715
  %5415 = mul i64 %5390, %5414
  %5416 = trunc i64 %5415 to i32
  %.loc35 = alloca i1, i32 %5416, align 1
  %.loc34 = alloca i1, align 1
  %5417 = and i64 %3, -609778131091829701
  %5418 = xor i64 %3, -1
  %5419 = xor i64 -609778131091829701, %5418
  %5420 = and i64 %5419, -609778131091829701
  %5421 = add i64 %3, -6351636143192440502
  %5422 = sub i64 0, %3
  %5423 = add i64 6351636143192440502, %5422
  %5424 = sub i64 0, %5423
  %5425 = xor i64 %5421, %5417
  %5426 = xor i64 %5425, -5426768359669652497
  %5427 = xor i64 %5426, %5424
  %5428 = xor i64 %5427, %5420
  %5429 = or i64 %3, -1103174013672591730
  %5430 = and i64 -1103174013672591730, %3
  %5431 = xor i64 -1103174013672591730, %3
  %5432 = or i64 %5430, %5431
  %5433 = add i64 %3, -664962118379577383
  %5434 = add i64 -2804743883863470752, %3
  %5435 = add i64 %5434, 2139781765483893369
  %5436 = add i64 %3, 4349705622828857364
  %5437 = sub i64 0, %3
  %5438 = add i64 -4349705622828857364, %5437
  %5439 = sub i64 0, %5438
  %5440 = xor i64 -7325979369024263409, %5433
  %5441 = xor i64 %5440, %5436
  %5442 = xor i64 %5441, %5432
  %5443 = xor i64 %5442, %5439
  %5444 = xor i64 %5443, %5435
  %5445 = xor i64 %5444, %5429
  %5446 = mul i64 %5428, %5445
  %5447 = trunc i64 %5446 to i32
  %.loc33 = alloca i1, i32 %5447, align 1
  %.loc32 = alloca i1, align 1
  %.loc31 = alloca i1, align 1
  %.loc30 = alloca i1, align 1
  %.loc29 = alloca i64, align 8
  %.loc28 = alloca i1, align 1
  %.loc27 = alloca i64, align 8
  %.loc10 = alloca i1, align 1
  %.loc9 = alloca i1, align 1
  %.loc8 = alloca i1, align 1
  %.loc7 = alloca i1, align 1
  %.loc6 = alloca i1, align 1
  %.loc5 = alloca i1, align 1
  %.loc4 = alloca i1, align 1
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012140, i32* %35, align 4
  %5448 = call i8** @bf4367541783002168146(i32* %35)
  %5449 = load i8*, i8** %5448, align 8
  indirectbr i8* %5449, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %codeRepl
    i32 2, label %5636
    i32 3, label %5739
    i32 4, label %6024
    i32 5, label %6291
    i32 6, label %6391
    i32 7, label %6500
    i32 8, label %.preheader
    i32 9, label %6736
    i32 10, label %6850
    i32 11, label %7102
    i32 12, label %7350
    i32 13, label %7403
    i32 14, label %7610
    i32 15, label %codeRepl1
    i32 16, label %7762
    i32 17, label %7819
    i32 18, label %7875
    i32 19, label %8123
    i32 20, label %codeRepl3
    i32 21, label %codeRepl26
    i32 22, label %codeRepl106
    i32 23, label %8673
    i32 24, label %codeRepl185
    i32 25, label %8926
    i32 26, label %codeRepl186
    i32 27, label %codeRepl191
    i32 28, label %9365
    i32 29, label %9386
    i32 30, label %9563
    i32 31, label %codeRepl202
    i32 32, label %9920
    i32 33, label %9981
    i32 34, label %10087
    i32 35, label %codeRepl209
    i32 36, label %10267
    i32 37, label %10491
    i32 38, label %10622
    i32 39, label %10696
    i32 40, label %10799
    i32 41, label %codeRepl217
    i32 42, label %11055
    i32 43, label %codeRepl228
    i32 44, label %codeRepl230
    i32 45, label %11636
    i32 46, label %11701
    i32 47, label %11870
    i32 48, label %12009
    i32 49, label %12130
    i32 50, label %12225
    i32 51, label %.loopexit
    i32 52, label %12411
    i32 53, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.loc = alloca i64, align 8
  store i64* %.loc, i64** %.loc.reg2mem, align 8
  %5450 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 4
  %5451 = load i32, i32* %5450, align 4
  %5452 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 3
  %5453 = load i32, i32* %5452, align 4
  %5454 = xor i32 %5451, %5453
  %5455 = and i32 %5451, %5453
  %5456 = mul i32 2, %5455
  %5457 = add i32 %5454, %5456
  store i32 %5457, i32* %dispatcher, align 4
  %5458 = load i8*, i8** %113, align 8
  %5459 = load i8, i8* %5458, align 1
  %5460 = mul i8 %5459, 2
  %5461 = mul i8 %5459, 2
  %5462 = add i8 2, %5461
  %5463 = mul i8 %5460, %5462
  %5464 = srem i8 %5463, 4
  %5465 = or i64 %90, 3175331068656928181
  %5466 = xor i64 %90, -1
  %5467 = and i64 %5466, 5722203387849543813
  %5468 = and i64 %90, -5722203387849543814
  %5469 = or i64 %5467, %5468
  %5470 = xor i64 7167570484895274288, %5469
  %5471 = xor i64 %90, -1
  %5472 = or i64 -3175331068656928182, %5471
  %5473 = xor i64 %5472, -1
  %5474 = and i64 %5473, -1
  %5475 = or i64 %5470, %5474
  %5476 = and i64 %4586, -557522166515407702
  %5477 = xor i64 %4586, -1
  %5478 = xor i64 -557522166515407702, %5477
  %5479 = and i64 %5478, -557522166515407702
  %5480 = xor i64 %5475, %5476
  %5481 = xor i64 %5480, %5479
  %5482 = xor i64 %5481, -7931547444756642379
  %5483 = xor i64 %5482, %5465
  %5484 = and i64 %251, -2523049227878945072
  %5485 = xor i64 %251, -1
  %5486 = or i64 2523049227878945071, %5485
  %5487 = xor i64 %5486, -1
  %5488 = and i64 %5487, -1
  %5489 = add i64 %175, 8620136110419917372
  %5490 = xor i64 8620136110419917372, %175
  %5491 = and i64 8620136110419917372, %175
  %5492 = mul i64 2, %5491
  %5493 = add i64 %5490, %5492
  %5494 = or i64 %116, -1131076097561812582
  %5495 = and i64 -1131076097561812582, %116
  %5496 = xor i64 -1131076097561812582, %116
  %5497 = or i64 %5495, %5496
  %5498 = xor i64 %5488, %5493
  %5499 = xor i64 %5498, %5484
  %5500 = xor i64 %5499, %5497
  %5501 = xor i64 %5500, %5494
  %5502 = xor i64 %5501, 0
  %5503 = xor i64 %5502, %5489
  %5504 = mul i64 %5483, %5503
  %5505 = trunc i64 %5504 to i8
  %5506 = icmp eq i8 %5464, %5505
  %5507 = mul i8 %5459, %5459
  %5508 = mul i8 %5507, %5459
  %5509 = or i64 %326, 5651304450070213916
  %5510 = xor i64 %326, -1
  %5511 = and i64 %5510, -3835469391014723104
  %5512 = and i64 %326, 3835469391014723103
  %5513 = or i64 %5511, %5512
  %5514 = xor i64 -8887612399915633412, %5513
  %5515 = xor i64 %326, -1
  %5516 = or i64 -5651304450070213917, %5515
  %5517 = xor i64 %5516, -1
  %5518 = and i64 %5517, -1
  %5519 = or i64 %5514, %5518
  %5520 = and i64 %50, 1464563049125768414
  %5521 = xor i64 %50, -1
  %5522 = xor i64 1464563049125768414, %5521
  %5523 = and i64 %5522, 1464563049125768414
  %5524 = and i64 %46, 2233860210243595180
  %5525 = xor i64 %46, -1
  %5526 = xor i64 2233860210243595180, %5525
  %5527 = and i64 %5526, 2233860210243595180
  %5528 = xor i64 %5524, %5527
  %5529 = xor i64 %5528, -6519236098882604607
  %5530 = xor i64 %5529, %5520
  %5531 = xor i64 %5530, %5523
  %5532 = xor i64 %5531, %5519
  %5533 = xor i64 %5532, %5509
  %5534 = and i64 %389, 3520806756632561412
  %5535 = or i64 -3520806756632561413, %389
  %5536 = sub i64 %5535, -3520806756632561413
  %5537 = and i64 %328, -8852564407438594132
  %5538 = xor i64 %328, -1
  %5539 = or i64 8852564407438594131, %5538
  %5540 = xor i64 %5539, -1
  %5541 = and i64 %5540, -1
  %5542 = xor i64 0, %5536
  %5543 = xor i64 %5542, %5534
  %5544 = xor i64 %5543, %5541
  %5545 = xor i64 %5544, %5537
  %5546 = mul i64 %5533, %5545
  %5547 = trunc i64 %5546 to i8
  %5548 = sub i8 %5547, %5508
  %5549 = sub i8 0, %5459
  %5550 = add i8 %5548, %5549
  %5551 = sub i8 0, %5550
  %5552 = srem i8 %5551, 2
  %5553 = icmp eq i8 %5552, 0
  %5554 = and i1 %5506, %5553
  %5555 = select i1 %5554, i32 595012113, i32 595012113
  %5556 = xor i32 %5555, 0
  store i32 %5556, i32* %35, align 4
  %5557 = call i8** @bf4367541783002168146(i32* %35)
  %5558 = load i8*, i8** %5557, align 8
  indirectbr i8* %5558, [label %loopEnd, label %EntryBasicBlockSplit]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %.loc.reload3 = load i64*, i64** %.loc.reg2mem, align 8
  %lt.cast = bitcast i64* %.loc.reload3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  store i64 1996855465712537075, i64* %1256, align 8
  %5559 = call i8** @lk4104490460174343886(i64* %1256)
  %5560 = load i8*, i8** %5559, align 8
  %5561 = bitcast i8* %5560 to i1 (i64, i64*)*
  %.loc.reload2 = load i64*, i64** %.loc.reg2mem, align 8
  %targetBlock = call i1 %5561(i64 %3, i64* %.loc.reload2)
  %.loc.reload = load i64*, i64** %.loc.reg2mem, align 8
  %.reload = load i64, i64* %.loc.reload, align 8
  store i64 %.reload, i64* %.reload.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  %5562 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 30
  %5563 = load i32, i32* %5562, align 4
  %5564 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %5565 = load i32, i32* %5564, align 4
  %5566 = add i32 %5563, 1723755118
  %5567 = sub i32 %5566, %5565
  %5568 = sub i32 %5567, 1723755118
  %5569 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 38
  %5570 = load i32, i32* %5569, align 4
  %5571 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 32
  %5572 = load i32, i32* %5571, align 4
  %5573 = sub i32 %5570, 804558821
  %5574 = sub i32 %5573, %5572
  %5575 = add i32 %5574, 804558821
  %5576 = select i1 %targetBlock, i32 %5568, i32 %5575
  store i32 %5576, i32* %dispatcher, align 4
  %5577 = load i8*, i8** %37, align 8
  %5578 = load i8, i8* %5577, align 1
  %5579 = mul i8 %5578, 2
  %5580 = mul i8 %5578, 2
  %5581 = add i8 30, %5580
  %5582 = add i8 %5581, -28
  %5583 = mul i8 %5579, %5582
  %5584 = srem i8 %5583, 4
  %5585 = icmp eq i8 %5584, 0
  %5586 = mul i8 %5578, %5578
  %5587 = mul i8 %5586, %5578
  %5588 = add i8 %5587, %5578
  %5589 = srem i8 %5588, 2
  %5590 = icmp eq i8 %5589, 0
  %5591 = and i1 %5585, %5590
  %5592 = and i64 %3, -6437415179074505045
  %5593 = xor i64 %3, -1
  %5594 = xor i64 -6437415179074505045, %5593
  %5595 = and i64 %5594, -6437415179074505045
  %5596 = add i64 %4365, -7293885123488360342
  %5597 = sub i64 0, %4365
  %5598 = add i64 7293885123488360342, %5597
  %5599 = sub i64 0, %5598
  %5600 = or i64 %120, 9214788362833094256
  %5601 = and i64 9214788362833094256, %120
  %5602 = xor i64 9214788362833094256, %120
  %5603 = or i64 %5601, %5602
  %5604 = xor i64 %5596, %5595
  %5605 = xor i64 %5604, 4978208634634042725
  %5606 = xor i64 %5605, %5603
  %5607 = xor i64 %5606, %5592
  %5608 = xor i64 %5607, %5600
  %5609 = xor i64 %5608, %5599
  %5610 = or i64 %3588, 3436164287209998665
  %5611 = xor i64 %3588, -1
  %5612 = and i64 3436164287209998665, %5611
  %5613 = add i64 %5612, %3588
  %5614 = add i64 %179, -3338641438019348846
  %5615 = sub i64 0, %179
  %5616 = sub i64 -3338641438019348846, %5615
  %5617 = add i64 %3153, 2200181268353849523
  %5618 = sub i64 0, %3153
  %5619 = sub i64 2200181268353849523, %5618
  %5620 = xor i64 %5614, %5619
  %5621 = xor i64 %5620, %5613
  %5622 = xor i64 %5621, %5617
  %5623 = xor i64 %5622, %5616
  %5624 = xor i64 %5623, %5610
  %5625 = xor i64 %5624, -6606214994074823363
  %5626 = mul i64 %5609, %5625
  %5627 = trunc i64 %5626 to i32
  %5628 = select i1 %5591, i32 595012111, i32 %5627
  %5629 = xor i32 %5628, -1
  %5630 = and i32 %5629, -1251851662
  %5631 = and i32 %5628, 1251851661
  %5632 = or i32 %5630, %5631
  %5633 = xor i32 %5632, -1251851668
  store i32 %5633, i32* %35, align 4
  %5634 = call i8** @bf4367541783002168146(i32* %35)
  %5635 = load i8*, i8** %5634, align 8
  indirectbr i8* %5635, [label %loopEnd, label %codeRepl]

5636:                                             ; preds = %5636, %loopStart
  %5637 = add i64 62, 72
  %5638 = icmp eq i64 %3, 1760
  store i1 %5638, i1* %.reg2mem, align 1
  %5639 = add i64 2124994146471819345, -2124994146471819261
  %.reload.reload = load i64, i64* %.reload.reg2mem, align 8
  %5640 = srem i64 %.reload.reload, 2
  %5641 = icmp eq i64 %5640, 0
  %5642 = and i64 %3, 1
  %5643 = icmp eq i64 %5642, 0
  %5644 = mul i64 %3, %3
  %5645 = add i64 %5644, %3
  %5646 = mul i64 %5645, 3
  %5647 = srem i64 %5646, 2
  %5648 = or i64 %334, 1273234481813450442
  %5649 = xor i64 %334, -1
  %5650 = and i64 1273234481813450442, %5649
  %5651 = add i64 %5650, %334
  %5652 = or i64 %278, 9013593862705014069
  %5653 = and i64 9013593862705014069, %278
  %5654 = xor i64 9013593862705014069, %278
  %5655 = or i64 %5653, %5654
  %5656 = add i64 %52, 3949034115320300715
  %5657 = add i64 -832606070467090109, %52
  %5658 = sub i64 %5657, -4781640185787390824
  %5659 = xor i64 5670723714203065991, %5656
  %5660 = xor i64 %5659, %5651
  %5661 = xor i64 %5660, %5655
  %5662 = xor i64 %5661, %5652
  %5663 = xor i64 %5662, %5658
  %5664 = xor i64 %5663, %5648
  %5665 = and i64 %389, -1697680348293701718
  %5666 = or i64 1697680348293701717, %389
  %5667 = sub i64 %5666, 1697680348293701717
  %5668 = or i64 %4019, 3425966124535602196
  %5669 = and i64 3425966124535602196, %4019
  %5670 = xor i64 3425966124535602196, %4019
  %5671 = or i64 %5669, %5670
  %5672 = and i64 %40, 7457703330842834345
  %5673 = or i64 -7457703330842834346, %40
  %5674 = sub i64 %5673, -7457703330842834346
  %5675 = xor i64 0, %5674
  %5676 = xor i64 %5675, %5672
  %5677 = xor i64 %5676, %5667
  %5678 = xor i64 %5677, %5671
  %5679 = xor i64 %5678, %5668
  %5680 = xor i64 %5679, %5665
  %5681 = mul i64 %5664, %5680
  %5682 = icmp eq i64 %5647, %5681
  %5683 = or i1 %5643, %5682
  store i1 %5683, i1* %.reg2mem5, align 1
  %5684 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 52
  %5685 = load i32, i32* %5684, align 4
  %5686 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 49
  %5687 = load i32, i32* %5686, align 4
  %5688 = sub i32 %5685, %5687
  %5689 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 7
  %5690 = load i32, i32* %5689, align 4
  %5691 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %5692 = load i32, i32* %5691, align 4
  %5693 = srem i32 %5690, %5692
  %.reload7 = load i1, i1* %.reg2mem5, align 1
  %5694 = select i1 %.reload7, i32 %5688, i32 %5693
  store i32 %5694, i32* %dispatcher, align 4
  %5695 = load i8*, i8** %388, align 8
  %5696 = load i8, i8* %5695, align 1
  %5697 = mul i8 %5696, 2
  %5698 = mul i8 %5696, 2
  %5699 = add i8 -93, %5698
  %5700 = sub i8 %5699, -95
  %5701 = mul i8 %5697, %5700
  %5702 = srem i8 %5701, 4
  %5703 = icmp eq i8 %5702, 0
  %5704 = mul i8 %5696, %5696
  %5705 = add i8 %5704, %5696
  %5706 = srem i8 %5705, 2
  %5707 = add i64 %338, 3840669427694963142
  %5708 = add i64 -7191895786257745226, %338
  %5709 = add i64 %5708, -7414178859756843248
  %5710 = and i64 %326, -555536249977001057
  %5711 = xor i64 %326, -1
  %5712 = or i64 555536249977001056, %5711
  %5713 = xor i64 %5712, -1
  %5714 = and i64 %5713, -1
  %5715 = xor i64 2238627071149491115, %5707
  %5716 = xor i64 %5715, %5710
  %5717 = xor i64 %5716, %5714
  %5718 = xor i64 %5717, %5709
  %5719 = or i64 %5086, -9074926619269425657
  %5720 = xor i64 %5086, -1
  %5721 = and i64 -9074926619269425657, %5720
  %5722 = add i64 %5721, %5086
  %5723 = and i64 %112, -9084582036463406441
  %5724 = xor i64 %112, -1
  %5725 = xor i64 -9084582036463406441, %5724
  %5726 = and i64 %5725, -9084582036463406441
  %5727 = xor i64 0, %5719
  %5728 = xor i64 %5727, %5726
  %5729 = xor i64 %5728, %5723
  %5730 = xor i64 %5729, %5722
  %5731 = mul i64 %5718, %5730
  %5732 = trunc i64 %5731 to i8
  %5733 = icmp eq i8 %5706, %5732
  %5734 = and i1 %5703, %5733
  %5735 = select i1 %5734, i32 595012114, i32 595012113
  %5736 = xor i32 %5735, 3
  store i32 %5736, i32* %35, align 4
  %5737 = call i8** @bf4367541783002168146(i32* %35)
  %5738 = load i8*, i8** %5737, align 8
  indirectbr i8* %5738, [label %loopEnd, label %5636]

5739:                                             ; preds = %5739, %loopStart
  %5740 = sub i64 1206140380049995802, 1206140380049995615
  %5741 = or i64 %326, -6486558084792126848
  %5742 = and i64 -6486558084792126848, %326
  %5743 = xor i64 -6486558084792126848, %326
  %5744 = or i64 %5742, %5743
  %5745 = add i64 %173, -3784881672215413270
  %5746 = sub i64 0, %173
  %5747 = add i64 3784881672215413270, %5746
  %5748 = sub i64 0, %5747
  %5749 = and i64 %181, -240439047132140642
  %5750 = xor i64 %181, -1
  %5751 = xor i64 -240439047132140642, %5750
  %5752 = and i64 %5751, -240439047132140642
  %5753 = xor i64 2805080325773409471, %5744
  %5754 = xor i64 %5753, %5752
  %5755 = xor i64 %5754, %5748
  %5756 = xor i64 %5755, %5741
  %5757 = xor i64 %5756, %5745
  %5758 = xor i64 %5757, %5749
  %5759 = and i64 %324, -2013310376549132011
  %5760 = xor i64 %324, -1
  %5761 = xor i64 -2013310376549132011, %5760
  %5762 = and i64 %5761, -2013310376549132011
  %5763 = and i64 %391, -1799401007194983945
  %5764 = xor i64 %391, -1
  %5765 = or i64 1799401007194983944, %5764
  %5766 = xor i64 %5765, -1
  %5767 = and i64 %5766, -1
  %5768 = add i64 %280, -8432567387944499886
  %5769 = and i64 -8432567387944499886, %280
  %5770 = or i64 -8432567387944499886, %280
  %5771 = add i64 %5769, %5770
  %5772 = xor i64 %5767, %5768
  %5773 = xor i64 %5772, %5759
  %5774 = xor i64 %5773, %5763
  %5775 = xor i64 %5774, %5771
  %5776 = xor i64 %5775, -2217264527181072893
  %5777 = xor i64 %5776, %5762
  %5778 = mul i64 %5758, %5777
  %5779 = mul i64 69, %5778
  %5780 = add i64 %175, 7252292943899730940
  %5781 = xor i64 7252292943899730940, %175
  %5782 = and i64 7252292943899730940, %175
  %5783 = mul i64 2, %5782
  %5784 = add i64 %5781, %5783
  %5785 = add i64 %4586, -502128433881418789
  %5786 = sub i64 0, %4586
  %5787 = sub i64 -502128433881418789, %5786
  %5788 = add i64 %4019, 8245684579682105925
  %5789 = and i64 8245684579682105925, %4019
  %5790 = or i64 8245684579682105925, %4019
  %5791 = add i64 %5789, %5790
  %5792 = xor i64 2292960453524512289, %5780
  %5793 = xor i64 %5792, %5785
  %5794 = xor i64 %5793, %5784
  %5795 = xor i64 %5794, %5791
  %5796 = xor i64 %5795, %5787
  %5797 = xor i64 %5796, %5788
  %5798 = add i64 %175, -638414591771279021
  %5799 = add i64 -3988031424561423554, %175
  %5800 = add i64 %5799, 3349616832790144533
  %5801 = add i64 %385, -3656095121880772416
  %5802 = and i64 -3656095121880772416, %385
  %5803 = or i64 -3656095121880772416, %385
  %5804 = add i64 %5802, %5803
  %5805 = xor i64 %5800, -7612780736424075418
  %5806 = xor i64 %5805, %5798
  %5807 = xor i64 %5806, %5801
  %5808 = xor i64 %5807, %5804
  %5809 = mul i64 %5797, %5808
  %5810 = mul i64 %5809, 59
  %5811 = add i64 104, 39
  %5812 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 6
  %5813 = load i32, i32* %5812, align 4
  %5814 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 5
  %5815 = load i32, i32* %5814, align 4
  %5816 = add i32 %5813, %5815
  store i32 %5816, i32* %dispatcher, align 4
  %5817 = load i8*, i8** %95, align 8
  %5818 = load i8, i8* %5817, align 1
  %5819 = mul i8 %5818, %5818
  %5820 = add i8 %5819, %5818
  %5821 = add i64 %2648, -3225064326021097117
  %5822 = sub i64 0, %2648
  %5823 = sub i64 -3225064326021097117, %5822
  %5824 = or i64 %96, 2893702503032381118
  %5825 = xor i64 %96, -1
  %5826 = and i64 2893702503032381118, %5825
  %5827 = add i64 %5826, %96
  %5828 = and i64 %46, 1968640024534558485
  %5829 = or i64 -1968640024534558486, %46
  %5830 = sub i64 %5829, -1968640024534558486
  %5831 = xor i64 %5823, %5827
  %5832 = xor i64 %5831, %5828
  %5833 = xor i64 %5832, %5830
  %5834 = xor i64 %5833, %5824
  %5835 = xor i64 %5834, -6089298584513742921
  %5836 = xor i64 %5835, %5821
  %5837 = add i64 %90, -2603581043211150841
  %5838 = sub i64 0, %90
  %5839 = sub i64 -2603581043211150841, %5838
  %5840 = and i64 %2648, 2896672695279800042
  %5841 = or i64 -2896672695279800043, %2648
  %5842 = sub i64 %5841, -2896672695279800043
  %5843 = and i64 %177, -3113715360434293519
  %5844 = or i64 3113715360434293518, %177
  %5845 = sub i64 %5844, 3113715360434293518
  %5846 = xor i64 %5845, %5843
  %5847 = xor i64 %5846, %5842
  %5848 = xor i64 %5847, %5839
  %5849 = xor i64 %5848, %5837
  %5850 = xor i64 %5849, %5840
  %5851 = xor i64 %5850, 9038147774404215317
  %5852 = mul i64 %5836, %5851
  %5853 = trunc i64 %5852 to i8
  %5854 = mul i8 %5820, %5853
  %5855 = add i64 %330, -2727714193772952662
  %5856 = sub i64 0, %330
  %5857 = add i64 2727714193772952662, %5856
  %5858 = sub i64 0, %5857
  %5859 = sext i32 %dispatcher1 to i64
  %5860 = add i64 %5859, -3841953496724057929
  %5861 = add i64 -6191330622617453757, %5859
  %5862 = add i64 %5861, 2349377125893395828
  %5863 = or i64 %94, 6502226208263055521
  %5864 = xor i64 %94, -1
  %5865 = and i64 %5864, 1163639992299151217
  %5866 = and i64 %94, -1163639992299151218
  %5867 = or i64 %5865, %5866
  %5868 = xor i64 5339747576301025232, %5867
  %5869 = xor i64 %94, -1
  %5870 = or i64 -6502226208263055522, %5869
  %5871 = xor i64 %5870, -1
  %5872 = and i64 %5871, -1
  %5873 = or i64 %5868, %5872
  %5874 = xor i64 %5858, %5873
  %5875 = xor i64 %5874, 1520584607143791565
  %5876 = xor i64 %5875, %5860
  %5877 = xor i64 %5876, %5863
  %5878 = xor i64 %5877, %5855
  %5879 = xor i64 %5878, %5862
  %5880 = or i64 %338, -8146196383685676772
  %5881 = xor i64 %338, -1
  %5882 = and i64 -8146196383685676772, %5881
  %5883 = add i64 %5882, %338
  %5884 = and i64 %169, 2172691931860736900
  %5885 = or i64 -2172691931860736901, %169
  %5886 = sub i64 %5885, -2172691931860736901
  %5887 = xor i64 %5886, %5880
  %5888 = xor i64 %5887, %5884
  %5889 = xor i64 %5888, %5883
  %5890 = xor i64 %5889, -5871754750212918774
  %5891 = mul i64 %5879, %5890
  %5892 = trunc i64 %5891 to i8
  %5893 = srem i8 %5854, %5892
  %5894 = add i64 %393, 7476494337730174775
  %5895 = xor i64 7476494337730174775, %393
  %5896 = and i64 7476494337730174775, %393
  %5897 = mul i64 2, %5896
  %5898 = add i64 %5895, %5897
  %5899 = or i64 %38, -5132055068485305463
  %5900 = and i64 -5132055068485305463, %38
  %5901 = xor i64 -5132055068485305463, %38
  %5902 = or i64 %5900, %5901
  %5903 = and i64 %92, 7047816745301121605
  %5904 = xor i64 %92, -1
  %5905 = or i64 -7047816745301121606, %5904
  %5906 = xor i64 %5905, -1
  %5907 = and i64 %5906, -1
  %5908 = xor i64 %5898, %5899
  %5909 = xor i64 %5908, %5907
  %5910 = xor i64 %5909, %5902
  %5911 = xor i64 %5910, 8412352639494034767
  %5912 = xor i64 %5911, %5903
  %5913 = xor i64 %5912, %5894
  %5914 = and i64 %48, -8003233080866410610
  %5915 = xor i64 %48, -1
  %5916 = xor i64 -8003233080866410610, %5915
  %5917 = and i64 %5916, -8003233080866410610
  %5918 = add i64 %280, 7844546492383119005
  %5919 = sub i64 0, %280
  %5920 = add i64 -7844546492383119005, %5919
  %5921 = sub i64 0, %5920
  %5922 = xor i64 %5917, %5914
  %5923 = xor i64 %5922, %5921
  %5924 = xor i64 %5923, %5918
  %5925 = xor i64 %5924, 0
  %5926 = mul i64 %5913, %5925
  %5927 = trunc i64 %5926 to i8
  %5928 = icmp eq i8 %5893, %5927
  %5929 = mul i8 %5818, %5818
  %5930 = add i8 %5929, %5818
  %5931 = srem i8 %5930, 2
  %5932 = icmp eq i8 %5931, 0
  %5933 = xor i1 %5928, true
  %5934 = add i64 %5086, 6671243876358148406
  %5935 = sub i64 0, %5086
  %5936 = add i64 -6671243876358148406, %5935
  %5937 = sub i64 0, %5936
  %5938 = add i64 %330, -5708534033313940424
  %5939 = sub i64 0, %330
  %5940 = add i64 5708534033313940424, %5939
  %5941 = sub i64 0, %5940
  %5942 = or i64 %177, -8036329094268283298
  %5943 = xor i64 %177, -1
  %5944 = and i64 %5943, -2855895003883712498
  %5945 = and i64 %177, 2855895003883712497
  %5946 = or i64 %5944, %5945
  %5947 = xor i64 5198539235848767056, %5946
  %5948 = xor i64 %177, -1
  %5949 = or i64 8036329094268283297, %5948
  %5950 = xor i64 %5949, -1
  %5951 = and i64 %5950, -1
  %5952 = or i64 %5947, %5951
  %5953 = xor i64 %5937, %5952
  %5954 = xor i64 %5953, %5938
  %5955 = xor i64 %5954, %5942
  %5956 = xor i64 %5955, %5934
  %5957 = xor i64 %5956, 3084296030424570773
  %5958 = xor i64 %5957, %5941
  %5959 = and i64 %177, 1974807617847394701
  %5960 = xor i64 %177, -1
  %5961 = or i64 -1974807617847394702, %5960
  %5962 = xor i64 %5961, -1
  %5963 = and i64 %5962, -1
  %5964 = and i64 %48, 4588322249660516501
  %5965 = xor i64 %48, -1
  %5966 = xor i64 4588322249660516501, %5965
  %5967 = and i64 %5966, 4588322249660516501
  %5968 = xor i64 %5964, %5959
  %5969 = xor i64 %5968, 164538108030605245
  %5970 = xor i64 %5969, %5967
  %5971 = xor i64 %5970, %5963
  %5972 = mul i64 %5958, %5971
  %5973 = trunc i64 %5972 to i1
  %5974 = xor i1 %5932, %5973
  %5975 = or i1 %5933, %5974
  %5976 = xor i1 %5975, true
  %5977 = and i1 %5976, true
  %5978 = add i64 %167, 165181028473481376
  %5979 = sub i64 0, %167
  %5980 = sub i64 165181028473481376, %5979
  %5981 = and i64 %118, -3264301259551130884
  %5982 = or i64 3264301259551130883, %118
  %5983 = sub i64 %5982, 3264301259551130883
  %5984 = or i64 %52, 3099030058066165524
  %5985 = xor i64 %52, -1
  %5986 = and i64 %5985, 54159180438796980
  %5987 = and i64 %52, -54159180438796981
  %5988 = or i64 %5986, %5987
  %5989 = xor i64 3152975039115806112, %5988
  %5990 = xor i64 %52, -1
  %5991 = or i64 -3099030058066165525, %5990
  %5992 = xor i64 %5991, -1
  %5993 = and i64 %5992, -1
  %5994 = or i64 %5989, %5993
  %5995 = xor i64 %5980, %5981
  %5996 = xor i64 %5995, -5308973972699728911
  %5997 = xor i64 %5996, %5983
  %5998 = xor i64 %5997, %5978
  %5999 = xor i64 %5998, %5984
  %6000 = xor i64 %5999, %5994
  %6001 = add i64 %167, 367372947326530366
  %6002 = add i64 6601816840265208760, %167
  %6003 = sub i64 %6002, 6234443892938678394
  %6004 = or i64 %58, 4254214188561780434
  %6005 = xor i64 %58, -1
  %6006 = and i64 4254214188561780434, %6005
  %6007 = add i64 %6006, %58
  %6008 = or i64 %2865, 4756018490648042349
  %6009 = and i64 4756018490648042349, %2865
  %6010 = xor i64 4756018490648042349, %2865
  %6011 = or i64 %6009, %6010
  %6012 = xor i64 %6008, -3135070872559778851
  %6013 = xor i64 %6012, %6003
  %6014 = xor i64 %6013, %6007
  %6015 = xor i64 %6014, %6004
  %6016 = xor i64 %6015, %6011
  %6017 = xor i64 %6016, %6001
  %6018 = mul i64 %6000, %6017
  %6019 = trunc i64 %6018 to i32
  %6020 = select i1 %5977, i32 %6019, i32 595012113
  %6021 = xor i32 %6020, 28
  store i32 %6021, i32* %35, align 4
  %6022 = call i8** @bf4367541783002168146(i32* %35)
  %6023 = load i8*, i8** %6022, align 8
  indirectbr i8* %6023, [label %loopEnd, label %5739]

6024:                                             ; preds = %6024, %loopStart
  %6025 = and i64 %328, 4628099423848409173
  %6026 = or i64 -4628099423848409174, %328
  %6027 = sub i64 %6026, -4628099423848409174
  %6028 = or i64 %2342, 2215475998201314933
  %6029 = and i64 2215475998201314933, %2342
  %6030 = xor i64 2215475998201314933, %2342
  %6031 = or i64 %6029, %6030
  %6032 = xor i64 %6028, %6025
  %6033 = xor i64 %6032, -4507862168112520801
  %6034 = xor i64 %6033, %6031
  %6035 = xor i64 %6034, %6027
  %6036 = add i64 %94, -2060446490852305482
  %6037 = and i64 -2060446490852305482, %94
  %6038 = or i64 -2060446490852305482, %94
  %6039 = add i64 %6037, %6038
  %6040 = and i64 %92, 4509163320235197190
  %6041 = xor i64 %92, -1
  %6042 = xor i64 4509163320235197190, %6041
  %6043 = and i64 %6042, 4509163320235197190
  %6044 = xor i64 %6036, 2833470575303891710
  %6045 = xor i64 %6044, %6043
  %6046 = xor i64 %6045, %6039
  %6047 = xor i64 %6046, %6040
  %6048 = mul i64 %6035, %6047
  %6049 = add i64 -5424954162786009351, %6048
  %6050 = mul i64 69, 61
  %6051 = mul i64 38, 59
  %6052 = add i64 %102, 8546666774847839954
  %6053 = and i64 8546666774847839954, %102
  %6054 = or i64 8546666774847839954, %102
  %6055 = add i64 %6053, %6054
  %6056 = add i64 %276, 4357250386131882973
  %6057 = add i64 -8518970156635575430, %276
  %6058 = sub i64 %6057, 5570523530942093213
  %6059 = xor i64 %6052, %6058
  %6060 = xor i64 %6059, %6056
  %6061 = xor i64 %6060, %6055
  %6062 = xor i64 %6061, 2384124911814744929
  %6063 = or i64 %94, -1824302386164901690
  %6064 = and i64 -1824302386164901690, %94
  %6065 = xor i64 -1824302386164901690, %94
  %6066 = or i64 %6064, %6065
  %6067 = add i64 %336, 159842054322310835
  %6068 = xor i64 159842054322310835, %336
  %6069 = and i64 159842054322310835, %336
  %6070 = mul i64 2, %6069
  %6071 = add i64 %6068, %6070
  %6072 = add i64 %106, 6196348294434779621
  %6073 = sub i64 0, %106
  %6074 = sub i64 6196348294434779621, %6073
  %6075 = xor i64 %6063, %6072
  %6076 = xor i64 %6075, %6066
  %6077 = xor i64 %6076, -2146815908178816889
  %6078 = xor i64 %6077, %6071
  %6079 = xor i64 %6078, %6067
  %6080 = xor i64 %6079, %6074
  %6081 = mul i64 %6062, %6080
  %6082 = add i64 104, %6081
  %6083 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 6
  %6084 = load i32, i32* %6083, align 4
  %6085 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 5
  %6086 = load i32, i32* %6085, align 4
  %6087 = add i32 %6084, %6086
  %6088 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 5
  %6089 = load i32, i32* %6088, align 4
  %6090 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %6091 = load i32, i32* %6090, align 4
  %6092 = srem i32 %6089, %6091
  %.reload6 = load i1, i1* %.reg2mem5, align 1
  %6093 = select i1 %.reload6, i32 %6087, i32 %6092
  store i32 %6093, i32* %dispatcher, align 4
  %6094 = load i8*, i8** %47, align 8
  %6095 = load i8, i8* %6094, align 1
  %6096 = mul i8 %6095, 2
  %6097 = mul i8 %6095, 2
  %6098 = add i8 2, %6097
  %6099 = mul i8 %6096, %6098
  %6100 = add i64 %40, 3807597454375258543
  %6101 = add i64 -6070591527898304374, %40
  %6102 = sub i64 %6101, 8568555091435988699
  %6103 = add i64 %3153, -1128330178693974038
  %6104 = and i64 -1128330178693974038, %3153
  %6105 = or i64 -1128330178693974038, %3153
  %6106 = add i64 %6104, %6105
  %6107 = and i64 %322, 3826599976808649855
  %6108 = xor i64 %322, -1
  %6109 = xor i64 3826599976808649855, %6108
  %6110 = and i64 %6109, 3826599976808649855
  %6111 = xor i64 %6103, -2792064420783975715
  %6112 = xor i64 %6111, %6100
  %6113 = xor i64 %6112, %6106
  %6114 = xor i64 %6113, %6107
  %6115 = xor i64 %6114, %6102
  %6116 = xor i64 %6115, %6110
  %6117 = and i64 %276, 3028215862817825307
  %6118 = xor i64 %276, -1
  %6119 = xor i64 3028215862817825307, %6118
  %6120 = and i64 %6119, 3028215862817825307
  %6121 = and i64 %3153, 3523577698054008634
  %6122 = xor i64 %3153, -1
  %6123 = or i64 -3523577698054008635, %6122
  %6124 = xor i64 %6123, -1
  %6125 = and i64 %6124, -1
  %6126 = xor i64 %6120, %6121
  %6127 = xor i64 %6126, %6125
  %6128 = xor i64 %6127, -8362081716626958892
  %6129 = xor i64 %6128, %6117
  %6130 = mul i64 %6116, %6129
  %6131 = trunc i64 %6130 to i8
  %6132 = srem i8 %6099, %6131
  %6133 = and i64 %1428, 8392670431600729912
  %6134 = xor i64 %1428, -1
  %6135 = or i64 -8392670431600729913, %6134
  %6136 = xor i64 %6135, -1
  %6137 = and i64 %6136, -1
  %6138 = and i64 %330, 7069061987307636458
  %6139 = xor i64 %330, -1
  %6140 = xor i64 7069061987307636458, %6139
  %6141 = and i64 %6140, 7069061987307636458
  %6142 = xor i64 -2370402273754755031, %6138
  %6143 = xor i64 %6142, %6141
  %6144 = xor i64 %6143, %6133
  %6145 = xor i64 %6144, %6137
  %6146 = or i64 %389, -1559361124897440671
  %6147 = and i64 -1559361124897440671, %389
  %6148 = xor i64 -1559361124897440671, %389
  %6149 = or i64 %6147, %6148
  %6150 = add i64 %175, -6353449180802682562
  %6151 = sub i64 0, %175
  %6152 = add i64 6353449180802682562, %6151
  %6153 = sub i64 0, %6152
  %6154 = or i64 %387, 7627220749311911176
  %6155 = xor i64 %387, -1
  %6156 = and i64 %6155, 6850922176277931237
  %6157 = and i64 %387, -6850922176277931238
  %6158 = or i64 %6156, %6157
  %6159 = xor i64 3947978707995312621, %6158
  %6160 = xor i64 %387, -1
  %6161 = or i64 -7627220749311911177, %6160
  %6162 = xor i64 %6161, -1
  %6163 = and i64 %6162, -1
  %6164 = or i64 %6159, %6163
  %6165 = xor i64 %6153, %6146
  %6166 = xor i64 %6165, %6154
  %6167 = xor i64 %6166, 0
  %6168 = xor i64 %6167, %6164
  %6169 = xor i64 %6168, %6150
  %6170 = xor i64 %6169, %6149
  %6171 = mul i64 %6145, %6170
  %6172 = trunc i64 %6171 to i8
  %6173 = icmp eq i8 %6132, %6172
  %6174 = mul i8 %6095, %6095
  %6175 = add i8 %6174, %6095
  %6176 = srem i8 %6175, 2
  %6177 = icmp eq i8 %6176, 0
  %6178 = xor i1 %6173, true
  %6179 = and i1 %6178, true
  %6180 = and i1 %6173, false
  %6181 = or i1 %6179, %6180
  %6182 = xor i1 %6177, true
  %6183 = and i1 %6182, true
  %6184 = and i1 %6177, false
  %6185 = or i1 %6183, %6184
  %6186 = xor i1 %6181, %6185
  %6187 = xor i1 %6173, true
  %6188 = xor i1 %6177, true
  %6189 = or i1 %6187, %6188
  %6190 = xor i1 %6189, true
  %6191 = or i64 %5086, -3989442555019417703
  %6192 = and i64 -3989442555019417703, %5086
  %6193 = xor i64 -3989442555019417703, %5086
  %6194 = or i64 %6192, %6193
  %6195 = and i64 %54, -1763270086169694090
  %6196 = xor i64 %54, -1
  %6197 = xor i64 -1763270086169694090, %6196
  %6198 = and i64 %6197, -1763270086169694090
  %6199 = add i64 %114, 7614488309480759680
  %6200 = add i64 6387986852101014510, %114
  %6201 = sub i64 %6200, -1226501457379745170
  %6202 = xor i64 %6191, %6199
  %6203 = xor i64 %6202, -5446172589457587697
  %6204 = xor i64 %6203, %6201
  %6205 = xor i64 %6204, %6198
  %6206 = xor i64 %6205, %6194
  %6207 = xor i64 %6206, %6195
  %6208 = and i64 %1794, 8526322893374919662
  %6209 = xor i64 %1794, -1
  %6210 = or i64 -8526322893374919663, %6209
  %6211 = xor i64 %6210, -1
  %6212 = and i64 %6211, -1
  %6213 = and i64 %94, 9063817323936648601
  %6214 = xor i64 %94, -1
  %6215 = xor i64 9063817323936648601, %6214
  %6216 = and i64 %6215, 9063817323936648601
  %6217 = add i64 %3431, -5428155522918990351
  %6218 = sub i64 0, %3431
  %6219 = add i64 5428155522918990351, %6218
  %6220 = sub i64 0, %6219
  %6221 = xor i64 %6216, %6217
  %6222 = xor i64 %6221, %6208
  %6223 = xor i64 %6222, %6212
  %6224 = xor i64 %6223, -8070151692553589521
  %6225 = xor i64 %6224, %6220
  %6226 = xor i64 %6225, %6213
  %6227 = mul i64 %6207, %6226
  %6228 = trunc i64 %6227 to i1
  %6229 = and i1 %6190, %6228
  %6230 = or i1 %6186, %6229
  %6231 = or i64 %336, -8392875934615851414
  %6232 = and i64 -8392875934615851414, %336
  %6233 = xor i64 -8392875934615851414, %336
  %6234 = or i64 %6232, %6233
  %6235 = and i64 %108, 4562539256435599238
  %6236 = xor i64 %108, -1
  %6237 = xor i64 4562539256435599238, %6236
  %6238 = and i64 %6237, 4562539256435599238
  %6239 = xor i64 -5024425427964662275, %6231
  %6240 = xor i64 %6239, %6234
  %6241 = xor i64 %6240, %6235
  %6242 = xor i64 %6241, %6238
  %6243 = and i64 %4365, 7235242460195497334
  %6244 = xor i64 %4365, -1
  %6245 = or i64 -7235242460195497335, %6244
  %6246 = xor i64 %6245, -1
  %6247 = and i64 %6246, -1
  %6248 = or i64 %5086, -217370789107397154
  %6249 = and i64 -217370789107397154, %5086
  %6250 = xor i64 -217370789107397154, %5086
  %6251 = or i64 %6249, %6250
  %6252 = xor i64 2222527826845094050, %6247
  %6253 = xor i64 %6252, %6251
  %6254 = xor i64 %6253, %6243
  %6255 = xor i64 %6254, %6248
  %6256 = mul i64 %6242, %6255
  %6257 = trunc i64 %6256 to i32
  %6258 = select i1 %6230, i32 %6257, i32 595012113
  %6259 = xor i32 %6258, -1
  %6260 = add i64 %251, -6420262081616302917
  %6261 = sub i64 0, %251
  %6262 = add i64 6420262081616302917, %6261
  %6263 = sub i64 0, %6262
  %6264 = and i64 %1428, 2744835100634384667
  %6265 = xor i64 %1428, -1
  %6266 = xor i64 2744835100634384667, %6265
  %6267 = and i64 %6266, 2744835100634384667
  %6268 = xor i64 %6263, %6267
  %6269 = xor i64 %6268, %6264
  %6270 = xor i64 %6269, -2968764712404091067
  %6271 = xor i64 %6270, %6260
  %6272 = or i64 %94, 640868526978418893
  %6273 = xor i64 %94, -1
  %6274 = and i64 640868526978418893, %6273
  %6275 = add i64 %6274, %94
  %6276 = add i64 %114, 4971349424210861438
  %6277 = sub i64 0, %114
  %6278 = sub i64 4971349424210861438, %6277
  %6279 = xor i64 %6276, %6275
  %6280 = xor i64 %6279, %6272
  %6281 = xor i64 %6280, %6278
  %6282 = xor i64 %6281, -3756129870000742239
  %6283 = mul i64 %6271, %6282
  %6284 = trunc i64 %6283 to i32
  %6285 = and i32 %6259, %6284
  %6286 = and i32 %6258, 1337742746
  %6287 = or i32 %6285, %6286
  %6288 = xor i32 %6287, -1337742738
  store i32 %6288, i32* %35, align 4
  %6289 = call i8** @bf4367541783002168146(i32* %35)
  %6290 = load i8*, i8** %6289, align 8
  indirectbr i8* %6290, [label %loopEnd, label %6024]

6291:                                             ; preds = %6291, %loopStart
  %6292 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 7
  %6293 = load i32, i32* %6292, align 4
  %6294 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %6295 = load i32, i32* %6294, align 4
  %6296 = sub i32 %6293, %6295
  store i32 %6296, i32* %dispatcher, align 4
  %.reload4 = load i1, i1* %.reg2mem, align 1
  store i1 %.reload4, i1* %.reg2mem130, align 1
  %6297 = load i8*, i8** %41, align 8
  %6298 = load i8, i8* %6297, align 1
  %6299 = mul i8 %6298, 2
  %6300 = mul i8 %6298, 2
  %6301 = xor i8 2, %6300
  %6302 = and i8 2, %6300
  %6303 = add i64 %104, 5851041210391127800
  %6304 = and i64 5851041210391127800, %104
  %6305 = or i64 5851041210391127800, %104
  %6306 = add i64 %6304, %6305
  %6307 = or i64 %4365, 2523149793714455462
  %6308 = xor i64 %4365, -1
  %6309 = and i64 2523149793714455462, %6308
  %6310 = add i64 %6309, %4365
  %6311 = add i64 %4019, 3538875291676919129
  %6312 = add i64 -9005535534758144491, %4019
  %6313 = sub i64 %6312, 5902333247274487996
  %6314 = xor i64 %6307, %6303
  %6315 = xor i64 %6314, %6313
  %6316 = xor i64 %6315, -7795747110338961711
  %6317 = xor i64 %6316, %6306
  %6318 = xor i64 %6317, %6310
  %6319 = xor i64 %6318, %6311
  %6320 = add i64 %167, 3575108698990882678
  %6321 = xor i64 3575108698990882678, %167
  %6322 = and i64 3575108698990882678, %167
  %6323 = mul i64 2, %6322
  %6324 = add i64 %6321, %6323
  %6325 = add i64 %385, 8064935797777419907
  %6326 = sub i64 0, %385
  %6327 = add i64 -8064935797777419907, %6326
  %6328 = sub i64 0, %6327
  %6329 = xor i64 %6324, -5300466038850816926
  %6330 = xor i64 %6329, %6320
  %6331 = xor i64 %6330, %6325
  %6332 = xor i64 %6331, %6328
  %6333 = mul i64 %6319, %6332
  %6334 = trunc i64 %6333 to i8
  %6335 = mul i8 %6334, %6302
  %6336 = add i8 %6301, %6335
  %6337 = mul i8 %6299, %6336
  %6338 = srem i8 %6337, 4
  %6339 = icmp eq i8 %6338, 0
  %6340 = mul i8 %6298, %6298
  %6341 = mul i8 %6340, %6298
  %6342 = xor i8 %6341, %6298
  %6343 = and i8 %6341, %6298
  %6344 = mul i8 2, %6343
  %6345 = add i8 %6342, %6344
  %6346 = and i64 %251, -6958484435684356665
  %6347 = xor i64 %251, -1
  %6348 = xor i64 -6958484435684356665, %6347
  %6349 = and i64 %6348, -6958484435684356665
  %6350 = or i64 %4826, -6882663341674939072
  %6351 = xor i64 %4826, -1
  %6352 = and i64 -6882663341674939072, %6351
  %6353 = add i64 %6352, %4826
  %6354 = and i64 %326, -2664052673586324765
  %6355 = or i64 2664052673586324764, %326
  %6356 = sub i64 %6355, 2664052673586324764
  %6357 = xor i64 %6349, %6356
  %6358 = xor i64 %6357, -440855446447464275
  %6359 = xor i64 %6358, %6353
  %6360 = xor i64 %6359, %6346
  %6361 = xor i64 %6360, %6354
  %6362 = xor i64 %6361, %6350
  %6363 = add i64 %118, 4113740023890711681
  %6364 = sub i64 0, %118
  %6365 = add i64 -4113740023890711681, %6364
  %6366 = sub i64 0, %6365
  %6367 = add i64 %92, -3956419758396861732
  %6368 = xor i64 -3956419758396861732, %92
  %6369 = and i64 -3956419758396861732, %92
  %6370 = mul i64 2, %6369
  %6371 = add i64 %6368, %6370
  %6372 = xor i64 %6363, %6366
  %6373 = xor i64 %6372, %6371
  %6374 = xor i64 %6373, -1727841219428746589
  %6375 = xor i64 %6374, %6367
  %6376 = mul i64 %6362, %6375
  %6377 = trunc i64 %6376 to i8
  %6378 = mul i8 %6377, %6345
  %6379 = add i8 23, %6378
  %6380 = mul i8 -105, %6379
  %6381 = add i8 111, %6380
  %6382 = srem i8 %6381, 2
  %6383 = icmp eq i8 %6382, 0
  %6384 = and i1 %6339, %6383
  %6385 = select i1 %6384, i32 595012152, i32 595012113
  %6386 = or i32 %6385, 41
  %6387 = and i32 %6385, 41
  %6388 = sub i32 %6386, %6387
  store i32 %6388, i32* %35, align 4
  %6389 = call i8** @bf4367541783002168146(i32* %35)
  %6390 = load i8*, i8** %6389, align 8
  indirectbr i8* %6390, [label %loopEnd, label %6291]

6391:                                             ; preds = %6391, %loopStart
  %6392 = and i64 %1428, -5663378320241279396
  %6393 = or i64 5663378320241279395, %1428
  %6394 = sub i64 %6393, 5663378320241279395
  %6395 = or i64 %320, 8538071366904459969
  %6396 = xor i64 %320, -1
  %6397 = and i64 8538071366904459969, %6396
  %6398 = add i64 %6397, %320
  %6399 = add i64 %4365, 8141692273578101527
  %6400 = sub i64 0, %4365
  %6401 = add i64 -8141692273578101527, %6400
  %6402 = sub i64 0, %6401
  %6403 = xor i64 %6402, -8865190332027488235
  %6404 = xor i64 %6403, %6395
  %6405 = xor i64 %6404, %6394
  %6406 = xor i64 %6405, %6392
  %6407 = xor i64 %6406, %6398
  %6408 = xor i64 %6407, %6399
  %6409 = and i64 %112, 3413190718374536751
  %6410 = or i64 -3413190718374536752, %112
  %6411 = sub i64 %6410, -3413190718374536752
  %6412 = or i64 %46, 6684710084208700630
  %6413 = xor i64 %46, -1
  %6414 = and i64 %6413, 6495404639100548134
  %6415 = and i64 %46, -6495404639100548135
  %6416 = or i64 %6414, %6415
  %6417 = xor i64 495550429149010160, %6416
  %6418 = xor i64 %46, -1
  %6419 = or i64 -6684710084208700631, %6418
  %6420 = xor i64 %6419, -1
  %6421 = and i64 %6420, -1
  %6422 = or i64 %6417, %6421
  %6423 = xor i64 %6409, 8772044891353498464
  %6424 = xor i64 %6423, %6412
  %6425 = xor i64 %6424, %6411
  %6426 = xor i64 %6425, %6422
  %6427 = mul i64 %6408, %6426
  %6428 = icmp eq i64 %3, %6427
  %6429 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 10
  %6430 = load i32, i32* %6429, align 4
  %6431 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %6432 = load i32, i32* %6431, align 4
  %6433 = srem i32 %6430, %6432
  store i32 %6433, i32* %dispatcher, align 4
  store i1 %6428, i1* %.reg2mem130, align 1
  %6434 = load i8*, i8** %182, align 8
  %6435 = load i8, i8* %6434, align 1
  %6436 = mul i8 %6435, 2
  %6437 = mul i8 %6435, 2
  %6438 = add i8 2, %6437
  %6439 = mul i8 %6436, %6438
  %6440 = srem i8 %6439, 4
  %6441 = icmp eq i8 %6440, 0
  %6442 = mul i8 %6435, %6435
  %6443 = mul i8 %6442, %6435
  %6444 = add i8 %6443, %6435
  %6445 = srem i8 %6444, 2
  %6446 = icmp eq i8 %6445, 0
  %6447 = xor i1 %6446, true
  %6448 = xor i1 %6441, %6447
  %6449 = and i1 %6448, %6441
  %6450 = or i64 %334, -8181606736555723304
  %6451 = xor i64 %334, -1
  %6452 = and i64 %6451, -7228637653848258455
  %6453 = and i64 %334, 7228637653848258454
  %6454 = or i64 %6452, %6453
  %6455 = xor i64 1575028825517702577, %6454
  %6456 = xor i64 %334, -1
  %6457 = or i64 8181606736555723303, %6456
  %6458 = xor i64 %6457, -1
  %6459 = and i64 %6458, -1
  %6460 = or i64 %6455, %6459
  %6461 = and i64 %96, -5977964466684268483
  %6462 = or i64 5977964466684268482, %96
  %6463 = sub i64 %6462, 5977964466684268482
  %6464 = or i64 %54, 3790588292326574332
  %6465 = and i64 3790588292326574332, %54
  %6466 = xor i64 3790588292326574332, %54
  %6467 = or i64 %6465, %6466
  %6468 = xor i64 %6467, %6450
  %6469 = xor i64 %6468, 3849260361437802645
  %6470 = xor i64 %6469, %6461
  %6471 = xor i64 %6470, %6464
  %6472 = xor i64 %6471, %6460
  %6473 = xor i64 %6472, %6463
  %6474 = and i64 %332, 1578241473289679784
  %6475 = xor i64 %332, -1
  %6476 = xor i64 1578241473289679784, %6475
  %6477 = and i64 %6476, 1578241473289679784
  %6478 = and i64 %167, -173697878942391089
  %6479 = xor i64 %167, -1
  %6480 = or i64 173697878942391088, %6479
  %6481 = xor i64 %6480, -1
  %6482 = and i64 %6481, -1
  %6483 = sext i32 %dispatcher1 to i64
  %6484 = and i64 %6483, 320481979219792870
  %6485 = xor i64 %6483, -1
  %6486 = xor i64 320481979219792870, %6485
  %6487 = and i64 %6486, 320481979219792870
  %6488 = xor i64 %6487, %6478
  %6489 = xor i64 %6488, 5026679081337424013
  %6490 = xor i64 %6489, %6474
  %6491 = xor i64 %6490, %6484
  %6492 = xor i64 %6491, %6477
  %6493 = xor i64 %6492, %6482
  %6494 = mul i64 %6473, %6493
  %6495 = trunc i64 %6494 to i32
  %6496 = select i1 %6449, i32 595012125, i32 %6495
  %6497 = xor i32 %6496, 12
  store i32 %6497, i32* %35, align 4
  %6498 = call i8** @bf4367541783002168146(i32* %35)
  %6499 = load i8*, i8** %6498, align 8
  indirectbr i8* %6499, [label %loopEnd, label %6391]

6500:                                             ; preds = %6500, %loopStart
  %.reload131 = load i1, i1* %.reg2mem130, align 1
  %6501 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 36
  %6502 = load i32, i32* %6501, align 4
  %6503 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %6504 = load i32, i32* %6503, align 4
  %6505 = sub i32 %6502, %6504
  %6506 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 52
  %6507 = load i32, i32* %6506, align 4
  %6508 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %6509 = load i32, i32* %6508, align 4
  %6510 = sub i32 %6507, %6509
  %6511 = select i1 %.reload131, i32 %6505, i32 %6510
  store i32 %6511, i32* %dispatcher, align 4
  %6512 = or i64 %387, 6267248973927383799
  %6513 = xor i64 %387, -1
  %6514 = and i64 %6513, 5399519680683733653
  %6515 = and i64 %387, -5399519680683733654
  %6516 = or i64 %6514, %6515
  %6517 = xor i64 2024173651497971810, %6516
  %6518 = xor i64 %387, -1
  %6519 = or i64 -6267248973927383800, %6518
  %6520 = xor i64 %6519, -1
  %6521 = and i64 %6520, -1
  %6522 = or i64 %6517, %6521
  %6523 = and i64 %110, 7077169925959060099
  %6524 = or i64 -7077169925959060100, %110
  %6525 = sub i64 %6524, -7077169925959060100
  %6526 = add i64 %280, 4996192980629802962
  %6527 = xor i64 4996192980629802962, %280
  %6528 = and i64 4996192980629802962, %280
  %6529 = mul i64 2, %6528
  %6530 = add i64 %6527, %6529
  %6531 = xor i64 %6512, 9015103385376856469
  %6532 = xor i64 %6531, %6522
  %6533 = xor i64 %6532, %6530
  %6534 = xor i64 %6533, %6526
  %6535 = xor i64 %6534, %6523
  %6536 = xor i64 %6535, %6525
  %6537 = add i64 %3800, -2158271597447889245
  %6538 = xor i64 -2158271597447889245, %3800
  %6539 = and i64 -2158271597447889245, %3800
  %6540 = mul i64 2, %6539
  %6541 = add i64 %6538, %6540
  %6542 = or i64 %48, -6124086183454774911
  %6543 = xor i64 %48, -1
  %6544 = and i64 -6124086183454774911, %6543
  %6545 = add i64 %6544, %48
  %6546 = xor i64 %6542, 7061652740628861818
  %6547 = xor i64 %6546, %6537
  %6548 = xor i64 %6547, %6541
  %6549 = xor i64 %6548, %6545
  %6550 = mul i64 %6536, %6549
  %6551 = trunc i64 %6550 to i32
  store i32 %6551, i32* %.reg2mem216, align 4
  %6552 = load i8*, i8** %176, align 8
  %6553 = load i8, i8* %6552, align 1
  %6554 = mul i8 %6553, %6553
  %6555 = add i8 %6554, %6553
  %6556 = mul i8 %6555, 3
  %6557 = srem i8 %6556, 2
  %6558 = icmp eq i8 %6557, 0
  %6559 = mul i8 %6553, %6553
  %6560 = add i8 %6559, %6553
  %6561 = srem i8 %6560, 2
  %6562 = icmp eq i8 %6561, 0
  %6563 = xor i1 %6558, true
  %6564 = add i64 %90, -8763867701104779192
  %6565 = add i64 2204366314599193538, %90
  %6566 = sub i64 %6565, -7478510058005578886
  %6567 = and i64 %393, 3548293749818566249
  %6568 = or i64 -3548293749818566250, %393
  %6569 = sub i64 %6568, -3548293749818566250
  %6570 = xor i64 8964047907716570509, %6567
  %6571 = xor i64 %6570, %6569
  %6572 = xor i64 %6571, %6564
  %6573 = xor i64 %6572, %6566
  %6574 = add i64 %2865, 8989859401821164875
  %6575 = and i64 8989859401821164875, %2865
  %6576 = or i64 8989859401821164875, %2865
  %6577 = add i64 %6575, %6576
  %6578 = and i64 %167, -3361307214883115488
  %6579 = or i64 3361307214883115487, %167
  %6580 = sub i64 %6579, 3361307214883115487
  %6581 = add i64 %326, -1926988053313325283
  %6582 = add i64 -1837629948241005681, %326
  %6583 = sub i64 %6582, 89358105072319602
  %6584 = xor i64 %6574, -7820854618149884603
  %6585 = xor i64 %6584, %6581
  %6586 = xor i64 %6585, %6583
  %6587 = xor i64 %6586, %6577
  %6588 = xor i64 %6587, %6580
  %6589 = xor i64 %6588, %6578
  %6590 = mul i64 %6573, %6589
  %6591 = trunc i64 %6590 to i1
  %6592 = xor i1 %6562, %6591
  %6593 = or i1 %6563, %6592
  %6594 = add i64 %92, 1807246356760094520
  %6595 = sub i64 0, %92
  %6596 = sub i64 1807246356760094520, %6595
  %6597 = or i64 %324, -7100956146869185785
  %6598 = xor i64 %324, -1
  %6599 = and i64 %6598, -6843874204763642620
  %6600 = and i64 %324, 6843874204763642619
  %6601 = or i64 %6599, %6600
  %6602 = xor i64 4355537923058628099, %6601
  %6603 = xor i64 %324, -1
  %6604 = or i64 7100956146869185784, %6603
  %6605 = xor i64 %6604, -1
  %6606 = and i64 %6605, -1
  %6607 = or i64 %6602, %6606
  %6608 = add i64 %171, -7217159788312094433
  %6609 = sub i64 0, %171
  %6610 = sub i64 -7217159788312094433, %6609
  %6611 = xor i64 %6610, %6608
  %6612 = xor i64 %6611, %6594
  %6613 = xor i64 %6612, 714042101116925945
  %6614 = xor i64 %6613, %6596
  %6615 = xor i64 %6614, %6597
  %6616 = xor i64 %6615, %6607
  %6617 = and i64 %4826, 807550769890685844
  %6618 = or i64 -807550769890685845, %4826
  %6619 = sub i64 %6618, -807550769890685845
  %6620 = or i64 %1794, 131972244544274956
  %6621 = xor i64 %1794, -1
  %6622 = and i64 131972244544274956, %6621
  %6623 = add i64 %6622, %1794
  %6624 = add i64 %3588, -1484989675534076889
  %6625 = xor i64 -1484989675534076889, %3588
  %6626 = and i64 -1484989675534076889, %3588
  %6627 = mul i64 2, %6626
  %6628 = add i64 %6625, %6627
  %6629 = xor i64 %6620, -9064655465042699703
  %6630 = xor i64 %6629, %6624
  %6631 = xor i64 %6630, %6617
  %6632 = xor i64 %6631, %6623
  %6633 = xor i64 %6632, %6628
  %6634 = xor i64 %6633, %6619
  %6635 = mul i64 %6616, %6634
  %6636 = trunc i64 %6635 to i1
  %6637 = xor i1 %6593, %6636
  %6638 = and i1 %6637, true
  %6639 = or i64 %104, -5835743306184336115
  %6640 = and i64 -5835743306184336115, %104
  %6641 = xor i64 -5835743306184336115, %104
  %6642 = or i64 %6640, %6641
  %6643 = or i64 %36, 6367590879173039109
  %6644 = xor i64 %36, -1
  %6645 = and i64 6367590879173039109, %6644
  %6646 = add i64 %6645, %36
  %6647 = or i64 %179, -9149806366827008350
  %6648 = xor i64 %179, -1
  %6649 = and i64 -9149806366827008350, %6648
  %6650 = add i64 %6649, %179
  %6651 = xor i64 %6643, %6647
  %6652 = xor i64 %6651, 6273192331516293495
  %6653 = xor i64 %6652, %6646
  %6654 = xor i64 %6653, %6650
  %6655 = xor i64 %6654, %6639
  %6656 = xor i64 %6655, %6642
  %6657 = and i64 %58, -2770459223661920736
  %6658 = or i64 2770459223661920735, %58
  %6659 = sub i64 %6658, 2770459223661920735
  %6660 = or i64 %320, 9037899296777668308
  %6661 = xor i64 %320, -1
  %6662 = and i64 %6661, -8474327984586945198
  %6663 = and i64 %320, 8474327984586945197
  %6664 = or i64 %6662, %6663
  %6665 = xor i64 -646211440542971002, %6664
  %6666 = xor i64 %320, -1
  %6667 = or i64 -9037899296777668309, %6666
  %6668 = xor i64 %6667, -1
  %6669 = and i64 %6668, -1
  %6670 = or i64 %6665, %6669
  %6671 = xor i64 %6670, %6659
  %6672 = xor i64 %6671, %6660
  %6673 = xor i64 %6672, %6657
  %6674 = xor i64 %6673, -2298800520712510793
  %6675 = mul i64 %6656, %6674
  %6676 = trunc i64 %6675 to i32
  %6677 = select i1 %6638, i32 595012141, i32 %6676
  %6678 = xor i32 %6677, 60
  store i32 %6678, i32* %35, align 4
  %6679 = call i8** @bf4367541783002168146(i32* %35)
  %6680 = load i8*, i8** %6679, align 8
  indirectbr i8* %6680, [label %loopEnd, label %6500]

.preheader:                                       ; preds = %.preheader, %loopStart
  %6681 = mul i64 %3, 2
  store i64 %6681, i64* %.reg2mem8, align 8
  %6682 = srem i64 %3, 2
  store i64 %6682, i64* %.reg2mem21, align 8
  %.reload26 = load i64, i64* %.reg2mem21, align 8
  %6683 = icmp eq i64 %.reload26, 0
  %6684 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 25
  %6685 = load i32, i32* %6684, align 4
  %6686 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 16
  %6687 = load i32, i32* %6686, align 4
  %6688 = sub i32 %6685, %6687
  %6689 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 16
  %6690 = load i32, i32* %6689, align 4
  %6691 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %6692 = load i32, i32* %6691, align 4
  %6693 = srem i32 %6690, %6692
  %6694 = select i1 %6683, i32 %6688, i32 %6693
  store i32 %6694, i32* %dispatcher, align 4
  %6695 = load i8*, i8** %180, align 8
  %6696 = load i8, i8* %6695, align 1
  %6697 = and i8 %6696, 1
  %6698 = icmp eq i8 %6697, 1
  %6699 = mul i8 %6696, %6696
  %6700 = sub i8 0, %6699
  %6701 = sub i8 0, %6696
  %6702 = add i8 %6700, %6701
  %6703 = sub i8 0, %6702
  %6704 = srem i8 %6703, 2
  %6705 = icmp eq i8 %6704, 0
  %6706 = or i1 %6698, %6705
  %6707 = select i1 %6706, i32 595012102, i32 595012113
  %6708 = add i64 %387, 8213133511086788971
  %6709 = add i64 -9144953715638083426, %387
  %6710 = sub i64 %6709, 1088656846984679219
  %6711 = and i64 %2342, -3374451118077770146
  %6712 = xor i64 %2342, -1
  %6713 = xor i64 -3374451118077770146, %6712
  %6714 = and i64 %6713, -3374451118077770146
  %6715 = xor i64 %6710, -9018638850455326063
  %6716 = xor i64 %6715, %6708
  %6717 = xor i64 %6716, %6711
  %6718 = xor i64 %6717, %6714
  %6719 = and i64 %2342, -7069375216583488034
  %6720 = or i64 7069375216583488033, %2342
  %6721 = sub i64 %6720, 7069375216583488033
  %6722 = and i64 %116, -7568468825234740544
  %6723 = xor i64 %116, -1
  %6724 = or i64 7568468825234740543, %6723
  %6725 = xor i64 %6724, -1
  %6726 = and i64 %6725, -1
  %6727 = xor i64 -3606035293871272921, %6722
  %6728 = xor i64 %6727, %6726
  %6729 = xor i64 %6728, %6719
  %6730 = xor i64 %6729, %6721
  %6731 = mul i64 %6718, %6730
  %6732 = trunc i64 %6731 to i32
  %6733 = xor i32 %6707, %6732
  store i32 %6733, i32* %35, align 4
  %6734 = call i8** @bf4367541783002168146(i32* %35)
  %6735 = load i8*, i8** %6734, align 8
  indirectbr i8* %6735, [label %loopEnd, label %.preheader]

6736:                                             ; preds = %6736, %loopStart
  %.reload20 = load i64, i64* %.reg2mem8, align 8
  %6737 = srem i64 %.reload20, 2
  %6738 = icmp eq i64 %6737, 0
  %.reload25 = load i64, i64* %.reg2mem21, align 8
  %6739 = mul i64 %.reload25, 2
  %.reload24 = load i64, i64* %.reg2mem21, align 8
  %6740 = mul i64 %.reload24, 2
  %6741 = add i64 2, %6740
  %6742 = mul i64 %6739, %6741
  %6743 = srem i64 %6742, 4
  %6744 = icmp eq i64 %6743, 0
  %.reload23 = load i64, i64* %.reg2mem21, align 8
  %6745 = mul i64 %.reload23, %.reload23
  %.reload22 = load i64, i64* %.reg2mem21, align 8
  %6746 = add i64 %6745, %.reload22
  %6747 = and i64 %2342, 7659148200606438076
  %6748 = or i64 -7659148200606438077, %2342
  %6749 = sub i64 %6748, -7659148200606438077
  %6750 = and i64 %46, -8960297903515463336
  %6751 = xor i64 %46, -1
  %6752 = xor i64 -8960297903515463336, %6751
  %6753 = and i64 %6752, -8960297903515463336
  %6754 = and i64 %4365, -8422312365222103537
  %6755 = xor i64 %4365, -1
  %6756 = or i64 8422312365222103536, %6755
  %6757 = xor i64 %6756, -1
  %6758 = and i64 %6757, -1
  %6759 = xor i64 %6750, %6754
  %6760 = xor i64 %6759, %6747
  %6761 = xor i64 %6760, %6749
  %6762 = xor i64 %6761, -8949963485158695931
  %6763 = xor i64 %6762, %6758
  %6764 = xor i64 %6763, %6753
  %6765 = add i64 %385, -3562951562013699586
  %6766 = xor i64 -3562951562013699586, %385
  %6767 = and i64 -3562951562013699586, %385
  %6768 = mul i64 2, %6767
  %6769 = add i64 %6766, %6768
  %6770 = add i64 %58, 2992183526554231302
  %6771 = sub i64 0, %58
  %6772 = add i64 -2992183526554231302, %6771
  %6773 = sub i64 0, %6772
  %6774 = and i64 %175, -5264016849156528140
  %6775 = or i64 5264016849156528139, %175
  %6776 = sub i64 %6775, 5264016849156528139
  %6777 = xor i64 2223555897242984858, %6774
  %6778 = xor i64 %6777, %6769
  %6779 = xor i64 %6778, %6773
  %6780 = xor i64 %6779, %6776
  %6781 = xor i64 %6780, %6765
  %6782 = xor i64 %6781, %6770
  %6783 = mul i64 %6764, %6782
  %6784 = srem i64 %6746, %6783
  %6785 = icmp eq i64 %6784, 0
  %6786 = and i1 %6744, %6785
  store i1 %6786, i1* %.reg2mem27, align 1
  %6787 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 36
  %6788 = load i32, i32* %6787, align 4
  %6789 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 26
  %6790 = load i32, i32* %6789, align 4
  %6791 = sub i32 %6788, %6790
  %6792 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 9
  %6793 = load i32, i32* %6792, align 4
  %6794 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 8
  %6795 = load i32, i32* %6794, align 4
  %6796 = add i32 %6793, %6795
  %.reload29 = load i1, i1* %.reg2mem27, align 1
  %6797 = select i1 %.reload29, i32 %6791, i32 %6796
  store i32 %6797, i32* %dispatcher, align 4
  %6798 = load i8*, i8** %119, align 8
  %6799 = load i8, i8* %6798, align 1
  %6800 = mul i8 %6799, 2
  %6801 = mul i8 %6799, 2
  %6802 = add i8 2, %6801
  %6803 = mul i8 %6800, %6802
  %6804 = srem i8 %6803, 4
  %6805 = icmp eq i8 %6804, 0
  %6806 = mul i8 %6799, %6799
  %6807 = sub i8 0, %6806
  %6808 = sub i8 0, %6799
  %6809 = add i8 %6807, %6808
  %6810 = sub i8 0, %6809
  %6811 = srem i8 %6810, 2
  %6812 = icmp eq i8 %6811, 0
  %6813 = xor i1 %6812, true
  %6814 = and i1 %6805, %6813
  %6815 = add i1 %6814, %6812
  %6816 = select i1 %6815, i32 595012121, i32 595012113
  %6817 = and i64 %36, -7845277246891476591
  %6818 = or i64 7845277246891476590, %36
  %6819 = sub i64 %6818, 7845277246891476590
  %6820 = and i64 %324, 2134606675336848952
  %6821 = or i64 -2134606675336848953, %324
  %6822 = sub i64 %6821, -2134606675336848953
  %6823 = xor i64 %6820, %6817
  %6824 = xor i64 %6823, 6120245947451898683
  %6825 = xor i64 %6824, %6822
  %6826 = xor i64 %6825, %6819
  %6827 = and i64 %167, -4616655862380002425
  %6828 = xor i64 %167, -1
  %6829 = xor i64 -4616655862380002425, %6828
  %6830 = and i64 %6829, -4616655862380002425
  %6831 = and i64 %48, 4171460790891361502
  %6832 = xor i64 %48, -1
  %6833 = xor i64 4171460790891361502, %6832
  %6834 = and i64 %6833, 4171460790891361502
  %6835 = or i64 %44, -8378476414506536300
  %6836 = xor i64 %44, -1
  %6837 = and i64 -8378476414506536300, %6836
  %6838 = add i64 %6837, %44
  %6839 = xor i64 -5976914875567231080, %6835
  %6840 = xor i64 %6839, %6827
  %6841 = xor i64 %6840, %6830
  %6842 = xor i64 %6841, %6838
  %6843 = xor i64 %6842, %6834
  %6844 = xor i64 %6843, %6831
  %6845 = mul i64 %6826, %6844
  %6846 = trunc i64 %6845 to i32
  %6847 = xor i32 %6816, %6846
  store i32 %6847, i32* %35, align 4
  %6848 = call i8** @bf4367541783002168146(i32* %35)
  %6849 = load i8*, i8** %6848, align 8
  indirectbr i8* %6849, [label %loopEnd, label %6736]

6850:                                             ; preds = %6850, %loopStart
  %6851 = mul i64 24, 68
  %6852 = mul i64 %3, 2
  %6853 = mul i64 42, 120
  %6854 = add i64 2, %6852
  %6855 = mul i64 116, 100
  %.reload19 = load i64, i64* %.reg2mem8, align 8
  %6856 = mul i64 %.reload19, %6854
  %6857 = sub i64 60, 119
  %6858 = srem i64 %6856, 4
  %6859 = sub i64 8434042722784520131, 8434042722784520135
  %6860 = icmp eq i64 %6858, 0
  %6861 = and i64 %94, 7886118918226426858
  %6862 = xor i64 %94, -1
  %6863 = xor i64 7886118918226426858, %6862
  %6864 = and i64 %6863, 7886118918226426858
  %6865 = add i64 %334, 7921582332051081073
  %6866 = sub i64 0, %334
  %6867 = sub i64 7921582332051081073, %6866
  %6868 = xor i64 %6861, %6864
  %6869 = xor i64 %6868, 3157617226992139653
  %6870 = xor i64 %6869, %6865
  %6871 = xor i64 %6870, %6867
  %6872 = or i64 %40, 844514782613188619
  %6873 = xor i64 %40, -1
  %6874 = and i64 844514782613188619, %6873
  %6875 = add i64 %6874, %40
  %6876 = and i64 %328, -7829321507749266149
  %6877 = xor i64 %328, -1
  %6878 = or i64 7829321507749266148, %6877
  %6879 = xor i64 %6878, -1
  %6880 = and i64 %6879, -1
  %6881 = xor i64 %6880, %6872
  %6882 = xor i64 %6881, 2117262895125052898
  %6883 = xor i64 %6882, %6875
  %6884 = xor i64 %6883, %6876
  %6885 = mul i64 %6871, %6884
  %6886 = sub i64 %6885, 16
  %6887 = mul i64 %3, %3
  %6888 = and i64 %6887, %3
  %6889 = or i64 %6887, %3
  %6890 = add i64 %6888, %6889
  %6891 = srem i64 %6890, 2
  %6892 = icmp eq i64 %6891, 0
  %6893 = or i1 %6860, %6892
  %6894 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %6895 = load i32, i32* %6894, align 4
  %6896 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %6897 = load i32, i32* %6896, align 4
  %6898 = srem i32 %6895, %6897
  store i32 %6898, i32* %dispatcher, align 4
  store i64 %6852, i64* %.reg2mem132, align 8
  store i64 %6854, i64* %.reg2mem160, align 8
  store i64 %6856, i64* %.reg2mem162, align 8
  store i64 %6858, i64* %.reg2mem164, align 8
  store i1 %6860, i1* %.reg2mem166, align 1
  store i64 %6887, i64* %.reg2mem168, align 8
  store i64 %6890, i64* %.reg2mem170, align 8
  store i64 %6891, i64* %.reg2mem172, align 8
  store i1 %6892, i1* %.reg2mem174, align 1
  store i1 %6893, i1* %.reg2mem176, align 1
  %6899 = load i8*, i8** %335, align 8
  %6900 = load i8, i8* %6899, align 1
  %6901 = mul i8 %6900, 2
  %6902 = mul i8 %6900, 2
  %6903 = add i8 -87, %6902
  %6904 = sub i8 %6903, -89
  %6905 = mul i8 %6901, %6904
  %6906 = or i64 %96, 7821634590977597861
  %6907 = xor i64 %96, -1
  %6908 = and i64 %6907, 7907665135221484312
  %6909 = and i64 %96, -7907665135221484313
  %6910 = or i64 %6908, %6909
  %6911 = xor i64 86039752792246973, %6910
  %6912 = xor i64 %96, -1
  %6913 = or i64 -7821634590977597862, %6912
  %6914 = xor i64 %6913, -1
  %6915 = and i64 %6914, -1
  %6916 = or i64 %6911, %6915
  %6917 = add i64 %98, -5418456533362782841
  %6918 = sub i64 0, %98
  %6919 = add i64 5418456533362782841, %6918
  %6920 = sub i64 0, %6919
  %6921 = or i64 %167, -7498398030977277156
  %6922 = and i64 -7498398030977277156, %167
  %6923 = xor i64 -7498398030977277156, %167
  %6924 = or i64 %6922, %6923
  %6925 = xor i64 %6917, %6916
  %6926 = xor i64 %6925, %6920
  %6927 = xor i64 %6926, -1485433931057201675
  %6928 = xor i64 %6927, %6924
  %6929 = xor i64 %6928, %6921
  %6930 = xor i64 %6929, %6906
  %6931 = and i64 %4586, -2333060267418745852
  %6932 = xor i64 %4586, -1
  %6933 = xor i64 -2333060267418745852, %6932
  %6934 = and i64 %6933, -2333060267418745852
  %6935 = or i64 %179, 8703852974035123827
  %6936 = and i64 8703852974035123827, %179
  %6937 = xor i64 8703852974035123827, %179
  %6938 = or i64 %6936, %6937
  %6939 = xor i64 %6938, %6931
  %6940 = xor i64 %6939, 6927174653786724724
  %6941 = xor i64 %6940, %6935
  %6942 = xor i64 %6941, %6934
  %6943 = mul i64 %6930, %6942
  %6944 = trunc i64 %6943 to i8
  %6945 = srem i8 %6905, %6944
  %6946 = and i64 %4019, 6078896183392172401
  %6947 = xor i64 %4019, -1
  %6948 = xor i64 6078896183392172401, %6947
  %6949 = and i64 %6948, 6078896183392172401
  %6950 = and i64 %4586, 6951533375087505102
  %6951 = xor i64 %4586, -1
  %6952 = xor i64 6951533375087505102, %6951
  %6953 = and i64 %6952, 6951533375087505102
  %6954 = xor i64 %6946, 5613191492375058669
  %6955 = xor i64 %6954, %6953
  %6956 = xor i64 %6955, %6950
  %6957 = xor i64 %6956, %6949
  %6958 = and i64 %387, -8581326489973156276
  %6959 = xor i64 %387, -1
  %6960 = or i64 8581326489973156275, %6959
  %6961 = xor i64 %6960, -1
  %6962 = and i64 %6961, -1
  %6963 = and i64 %4365, -6673584066730858257
  %6964 = xor i64 %4365, -1
  %6965 = or i64 6673584066730858256, %6964
  %6966 = xor i64 %6965, -1
  %6967 = and i64 %6966, -1
  %6968 = and i64 %175, 7438428418569348690
  %6969 = xor i64 %175, -1
  %6970 = or i64 -7438428418569348691, %6969
  %6971 = xor i64 %6970, -1
  %6972 = and i64 %6971, -1
  %6973 = xor i64 %6972, 0
  %6974 = xor i64 %6973, %6958
  %6975 = xor i64 %6974, %6963
  %6976 = xor i64 %6975, %6962
  %6977 = xor i64 %6976, %6967
  %6978 = xor i64 %6977, %6968
  %6979 = mul i64 %6957, %6978
  %6980 = trunc i64 %6979 to i8
  %6981 = icmp eq i8 %6945, %6980
  %6982 = mul i8 %6900, %6900
  %6983 = add i8 %6982, %6900
  %6984 = srem i8 %6983, 2
  %6985 = icmp eq i8 %6984, 0
  %6986 = xor i1 %6981, true
  %6987 = and i1 %6986, false
  %6988 = and i1 %6981, true
  %6989 = or i1 %6987, %6988
  %6990 = xor i1 %6985, true
  %6991 = and i1 %6990, false
  %6992 = or i64 %393, 6319686458258060517
  %6993 = xor i64 %393, -1
  %6994 = and i64 %6993, 6370083986709131302
  %6995 = and i64 %393, -6370083986709131303
  %6996 = or i64 %6994, %6995
  %6997 = xor i64 1140286995107595459, %6996
  %6998 = xor i64 %393, -1
  %6999 = or i64 -6319686458258060518, %6998
  %7000 = xor i64 %6999, -1
  %7001 = and i64 %7000, -1
  %7002 = or i64 %6997, %7001
  %7003 = add i64 %3, 6259426122622923349
  %7004 = sub i64 0, %3
  %7005 = add i64 -6259426122622923349, %7004
  %7006 = sub i64 0, %7005
  %7007 = or i64 %1428, 8545942600481262124
  %7008 = xor i64 %1428, -1
  %7009 = and i64 %7008, 9086999345316404539
  %7010 = and i64 %1428, -9086999345316404540
  %7011 = or i64 %7009, %7010
  %7012 = xor i64 613272703311992599, %7011
  %7013 = xor i64 %1428, -1
  %7014 = or i64 -8545942600481262125, %7013
  %7015 = xor i64 %7014, -1
  %7016 = and i64 %7015, -1
  %7017 = or i64 %7012, %7016
  %7018 = xor i64 %7007, %7017
  %7019 = xor i64 %7018, 3623852103492591455
  %7020 = xor i64 %7019, %7002
  %7021 = xor i64 %7020, %7006
  %7022 = xor i64 %7021, %7003
  %7023 = xor i64 %7022, %6992
  %7024 = or i64 %278, -8939655816372236758
  %7025 = xor i64 %278, -1
  %7026 = and i64 %7025, -4939312060956270191
  %7027 = and i64 %278, 4939312060956270190
  %7028 = or i64 %7026, %7027
  %7029 = xor i64 4079135085885321147, %7028
  %7030 = xor i64 %278, -1
  %7031 = or i64 8939655816372236757, %7030
  %7032 = xor i64 %7031, -1
  %7033 = and i64 %7032, -1
  %7034 = or i64 %7029, %7033
  %7035 = or i64 %54, 3814759649622229982
  %7036 = and i64 3814759649622229982, %54
  %7037 = xor i64 3814759649622229982, %54
  %7038 = or i64 %7036, %7037
  %7039 = add i64 %118, 5089420803412440154
  %7040 = add i64 -5771772667436868900, %118
  %7041 = add i64 %7040, -7585550602860242562
  %7042 = xor i64 %7038, 8122407299175922847
  %7043 = xor i64 %7042, %7024
  %7044 = xor i64 %7043, %7041
  %7045 = xor i64 %7044, %7034
  %7046 = xor i64 %7045, %7039
  %7047 = xor i64 %7046, %7035
  %7048 = mul i64 %7023, %7047
  %7049 = trunc i64 %7048 to i1
  %7050 = and i1 %6985, %7049
  %7051 = or i1 %6991, %7050
  %7052 = xor i1 %6989, %7051
  %7053 = xor i1 %6981, true
  %7054 = xor i1 %6985, true
  %7055 = or i1 %7053, %7054
  %7056 = xor i1 %7055, true
  %7057 = and i1 %7056, true
  %7058 = or i1 %7052, %7057
  %7059 = select i1 %7058, i32 595012115, i32 595012113
  %7060 = and i64 %110, 989204880025784429
  %7061 = xor i64 %110, -1
  %7062 = or i64 -989204880025784430, %7061
  %7063 = xor i64 %7062, -1
  %7064 = and i64 %7063, -1
  %7065 = or i64 %5086, -4638641308095615554
  %7066 = xor i64 %5086, -1
  %7067 = and i64 %7066, -8258198703761650537
  %7068 = and i64 %5086, 8258198703761650536
  %7069 = or i64 %7067, %7068
  %7070 = xor i64 3658260208225083689, %7069
  %7071 = xor i64 %5086, -1
  %7072 = or i64 4638641308095615553, %7071
  %7073 = xor i64 %7072, -1
  %7074 = and i64 %7073, -1
  %7075 = or i64 %7070, %7074
  %7076 = add i64 %387, 3533522122144672088
  %7077 = sub i64 0, %387
  %7078 = add i64 -3533522122144672088, %7077
  %7079 = sub i64 0, %7078
  %7080 = xor i64 %7060, %7076
  %7081 = xor i64 %7080, 4535536783381698255
  %7082 = xor i64 %7081, %7075
  %7083 = xor i64 %7082, %7064
  %7084 = xor i64 %7083, %7065
  %7085 = xor i64 %7084, %7079
  %7086 = add i64 %1428, 2361563758229713010
  %7087 = add i64 -3143528596793117826, %1428
  %7088 = add i64 %7087, 5505092355022830836
  %7089 = or i64 %50, 3735811394782043429
  %7090 = and i64 3735811394782043429, %50
  %7091 = xor i64 3735811394782043429, %50
  %7092 = or i64 %7090, %7091
  %7093 = xor i64 6533671378377793630, %7089
  %7094 = xor i64 %7093, %7086
  %7095 = xor i64 %7094, %7088
  %7096 = xor i64 %7095, %7092
  %7097 = mul i64 %7085, %7096
  %7098 = trunc i64 %7097 to i32
  %7099 = xor i32 %7059, %7098
  store i32 %7099, i32* %35, align 4
  %7100 = call i8** @bf4367541783002168146(i32* %35)
  %7101 = load i8*, i8** %7100, align 8
  indirectbr i8* %7101, [label %loopEnd, label %6850]

7102:                                             ; preds = %7102, %loopStart
  %7103 = mul i64 24, 68
  %7104 = mul i64 %3, 2
  %7105 = mul i64 42, 120
  %7106 = add i64 %52, 2494470976991559956
  %7107 = sub i64 0, %52
  %7108 = sub i64 2494470976991559956, %7107
  %7109 = add i64 %106, -6860928273178248489
  %7110 = sub i64 0, %106
  %7111 = add i64 6860928273178248489, %7110
  %7112 = sub i64 0, %7111
  %7113 = or i64 %3153, 1049813175536925603
  %7114 = xor i64 %3153, -1
  %7115 = and i64 %7114, 4466126690019890997
  %7116 = and i64 %3153, -4466126690019890998
  %7117 = or i64 %7115, %7116
  %7118 = xor i64 3705179408368266390, %7117
  %7119 = xor i64 %3153, -1
  %7120 = or i64 -1049813175536925604, %7119
  %7121 = xor i64 %7120, -1
  %7122 = and i64 %7121, -1
  %7123 = or i64 %7118, %7122
  %7124 = xor i64 %7108, %7109
  %7125 = xor i64 %7124, %7123
  %7126 = xor i64 %7125, %7112
  %7127 = xor i64 %7126, %7113
  %7128 = xor i64 %7127, %7106
  %7129 = xor i64 %7128, -8764152107916632671
  %7130 = sext i32 %dispatcher1 to i64
  %7131 = and i64 %7130, -2579875506722556408
  %7132 = or i64 2579875506722556407, %7130
  %7133 = sub i64 %7132, 2579875506722556407
  %7134 = and i64 %106, 5944713122177508407
  %7135 = or i64 -5944713122177508408, %106
  %7136 = sub i64 %7135, -5944713122177508408
  %7137 = xor i64 %7133, %7136
  %7138 = xor i64 %7137, -2087585262008824638
  %7139 = xor i64 %7138, %7131
  %7140 = xor i64 %7139, %7134
  %7141 = mul i64 %7129, %7140
  %7142 = add i64 %7141, %7104
  %7143 = mul i64 116, 100
  %.reload11 = load i64, i64* %.reg2mem8, align 8
  %7144 = mul i64 %.reload11, %7142
  %7145 = add i64 -2223431658026610401, 2223431658026610342
  %7146 = srem i64 %7144, 4
  %7147 = sub i64 -5724725415355357218, -5724725415355357214
  %7148 = icmp eq i64 %7146, 0
  %7149 = add i64 8550964192390593783, -8550964192390593693
  %7150 = mul i64 %3, %3
  %7151 = sub i64 0, %3
  %7152 = sub i64 %7150, %7151
  %7153 = srem i64 %7152, 2
  %7154 = icmp eq i64 %7153, 0
  %7155 = or i64 %171, -128350187008457465
  %7156 = and i64 -128350187008457465, %171
  %7157 = xor i64 -128350187008457465, %171
  %7158 = or i64 %7156, %7157
  %7159 = add i64 %326, -194157555766450421
  %7160 = add i64 -5546416621636566532, %326
  %7161 = sub i64 %7160, -5352259065870116111
  %7162 = xor i64 %7161, %7155
  %7163 = xor i64 %7162, %7159
  %7164 = xor i64 %7163, %7158
  %7165 = xor i64 %7164, 8683513810646819967
  %7166 = and i64 %2342, -3641072206596421183
  %7167 = xor i64 %2342, -1
  %7168 = or i64 3641072206596421182, %7167
  %7169 = xor i64 %7168, -1
  %7170 = and i64 %7169, -1
  %7171 = or i64 %3153, 2563827011285342218
  %7172 = xor i64 %3153, -1
  %7173 = and i64 %7172, 8858768274292336154
  %7174 = and i64 %3153, -8858768274292336155
  %7175 = or i64 %7173, %7174
  %7176 = xor i64 6441310587393097232, %7175
  %7177 = xor i64 %3153, -1
  %7178 = or i64 -2563827011285342219, %7177
  %7179 = xor i64 %7178, -1
  %7180 = and i64 %7179, -1
  %7181 = or i64 %7176, %7180
  %7182 = or i64 %251, 862190134381613914
  %7183 = xor i64 %251, -1
  %7184 = and i64 %7183, 1710531432766531762
  %7185 = and i64 %251, -1710531432766531763
  %7186 = or i64 %7184, %7185
  %7187 = xor i64 2038470495537069032, %7186
  %7188 = xor i64 %251, -1
  %7189 = or i64 -862190134381613915, %7188
  %7190 = xor i64 %7189, -1
  %7191 = and i64 %7190, -1
  %7192 = or i64 %7187, %7191
  %7193 = xor i64 %7182, %7192
  %7194 = xor i64 %7193, %7181
  %7195 = xor i64 %7194, 343238076289407871
  %7196 = xor i64 %7195, %7166
  %7197 = xor i64 %7196, %7171
  %7198 = xor i64 %7197, %7170
  %7199 = mul i64 %7165, %7198
  %7200 = trunc i64 %7199 to i1
  %7201 = xor i1 %7148, %7200
  %7202 = and i1 %7201, true
  %7203 = and i1 %7148, false
  %7204 = or i1 %7202, %7203
  %7205 = xor i1 %7154, true
  %7206 = and i1 %7205, true
  %7207 = xor i1 %7154, true
  %7208 = or i1 %7207, false
  %7209 = or i64 %90, -6998468599183314273
  %7210 = xor i64 %90, -1
  %7211 = and i64 -6998468599183314273, %7210
  %7212 = add i64 %7211, %90
  %7213 = add i64 %112, -9082736189366855179
  %7214 = sub i64 0, %112
  %7215 = sub i64 -9082736189366855179, %7214
  %7216 = xor i64 715060203099409813, %7209
  %7217 = xor i64 %7216, %7212
  %7218 = xor i64 %7217, %7213
  %7219 = xor i64 %7218, %7215
  %7220 = add i64 %42, 3336770390362025411
  %7221 = add i64 5405307055410342919, %42
  %7222 = add i64 %7221, -2068536665048317508
  %7223 = and i64 %116, 7616448724082867308
  %7224 = xor i64 %116, -1
  %7225 = xor i64 7616448724082867308, %7224
  %7226 = and i64 %7225, 7616448724082867308
  %7227 = xor i64 %7220, %7222
  %7228 = xor i64 %7227, %7226
  %7229 = xor i64 %7228, 7160491521204131261
  %7230 = xor i64 %7229, %7223
  %7231 = mul i64 %7219, %7230
  %7232 = trunc i64 %7231 to i1
  %7233 = xor i1 %7154, %7232
  %7234 = sub i1 %7208, %7233
  %7235 = or i1 %7206, %7234
  %7236 = or i1 %7204, %7235
  %7237 = and i1 %7204, %7235
  %7238 = sub i1 %7236, %7237
  %7239 = xor i1 %7148, true
  %7240 = xor i1 %7154, true
  %7241 = xor i1 %7240, true
  %7242 = and i1 %7239, %7241
  %7243 = add i1 %7242, %7240
  %7244 = xor i1 %7243, true
  %7245 = or i64 %46, 4217412253549305862
  %7246 = xor i64 %46, -1
  %7247 = and i64 4217412253549305862, %7246
  %7248 = add i64 %7247, %46
  %7249 = or i64 %94, -1999878297795120346
  %7250 = and i64 -1999878297795120346, %94
  %7251 = xor i64 -1999878297795120346, %94
  %7252 = or i64 %7250, %7251
  %7253 = add i64 %181, -1574362596128155984
  %7254 = xor i64 -1574362596128155984, %181
  %7255 = and i64 -1574362596128155984, %181
  %7256 = mul i64 2, %7255
  %7257 = add i64 %7254, %7256
  %7258 = xor i64 %7248, %7257
  %7259 = xor i64 %7258, %7252
  %7260 = xor i64 %7259, %7249
  %7261 = xor i64 %7260, 8289966907282382845
  %7262 = xor i64 %7261, %7253
  %7263 = xor i64 %7262, %7245
  %7264 = add i64 %253, -2879698463736158540
  %7265 = sub i64 0, %253
  %7266 = sub i64 -2879698463736158540, %7265
  %7267 = or i64 %36, 1832950829246076529
  %7268 = xor i64 %36, -1
  %7269 = and i64 %7268, 1938232908707667733
  %7270 = and i64 %36, -1938232908707667734
  %7271 = or i64 %7269, %7270
  %7272 = xor i64 255033504281545060, %7271
  %7273 = xor i64 %36, -1
  %7274 = or i64 -1832950829246076530, %7273
  %7275 = xor i64 %7274, -1
  %7276 = and i64 %7275, -1
  %7277 = or i64 %7272, %7276
  %7278 = add i64 %2020, -7379597559237926781
  %7279 = add i64 -9066510914197806133, %2020
  %7280 = add i64 %7279, 1686913354959879352
  %7281 = xor i64 -2608054573689408171, %7278
  %7282 = xor i64 %7281, %7266
  %7283 = xor i64 %7282, %7264
  %7284 = xor i64 %7283, %7267
  %7285 = xor i64 %7284, %7277
  %7286 = xor i64 %7285, %7280
  %7287 = mul i64 %7263, %7286
  %7288 = trunc i64 %7287 to i1
  %7289 = and i1 %7244, %7288
  %7290 = or i1 %7238, %7289
  %7291 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %7292 = load i32, i32* %7291, align 4
  %7293 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %7294 = load i32, i32* %7293, align 4
  %7295 = srem i32 %7292, %7294
  %7296 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 8
  %7297 = load i32, i32* %7296, align 4
  %7298 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %7299 = load i32, i32* %7298, align 4
  %7300 = sub i32 %7297, %7299
  %.reload28 = load i1, i1* %.reg2mem27, align 1
  %7301 = select i1 %.reload28, i32 %7295, i32 %7300
  store i32 %7301, i32* %dispatcher, align 4
  store i64 %7104, i64* %.reg2mem132, align 8
  store i64 %7142, i64* %.reg2mem160, align 8
  store i64 %7144, i64* %.reg2mem162, align 8
  store i64 %7146, i64* %.reg2mem164, align 8
  store i1 %7148, i1* %.reg2mem166, align 1
  store i64 %7150, i64* %.reg2mem168, align 8
  store i64 %7152, i64* %.reg2mem170, align 8
  store i64 %7153, i64* %.reg2mem172, align 8
  store i1 %7154, i1* %.reg2mem174, align 1
  store i1 %7290, i1* %.reg2mem176, align 1
  %7302 = load i8*, i8** %55, align 8
  %7303 = load i8, i8* %7302, align 1
  %7304 = mul i8 %7303, %7303
  %7305 = sub i8 %7304, 30
  %7306 = add i8 %7305, %7303
  %7307 = add i8 %7306, 30
  %7308 = mul i8 %7307, 3
  %7309 = srem i8 %7308, 2
  %7310 = icmp eq i8 %7309, 0
  %7311 = mul i8 %7303, %7303
  %7312 = add i8 %7311, %7303
  %7313 = srem i8 %7312, 2
  %7314 = icmp eq i8 %7313, 0
  %7315 = add i64 %98, 474921674394322975
  %7316 = and i64 474921674394322975, %98
  %7317 = or i64 474921674394322975, %98
  %7318 = add i64 %7316, %7317
  %7319 = and i64 %278, 6622412765001204686
  %7320 = or i64 -6622412765001204687, %278
  %7321 = sub i64 %7320, -6622412765001204687
  %7322 = xor i64 %7319, %7315
  %7323 = xor i64 %7322, %7318
  %7324 = xor i64 %7323, %7321
  %7325 = xor i64 %7324, 8817687764770757731
  %7326 = add i64 %251, 5708570004683906748
  %7327 = and i64 5708570004683906748, %251
  %7328 = or i64 5708570004683906748, %251
  %7329 = add i64 %7327, %7328
  %7330 = and i64 %173, 5255127697293789980
  %7331 = xor i64 %173, -1
  %7332 = or i64 -5255127697293789981, %7331
  %7333 = xor i64 %7332, -1
  %7334 = and i64 %7333, -1
  %7335 = xor i64 %7330, %7334
  %7336 = xor i64 %7335, -3643938672790518453
  %7337 = xor i64 %7336, %7329
  %7338 = xor i64 %7337, %7326
  %7339 = mul i64 %7325, %7338
  %7340 = trunc i64 %7339 to i1
  %7341 = xor i1 %7310, %7340
  %7342 = xor i1 %7314, true
  %7343 = or i1 %7341, %7342
  %7344 = xor i1 %7343, true
  %7345 = and i1 %7344, true
  %7346 = select i1 %7345, i32 595012144, i32 595012113
  %7347 = xor i32 %7346, 33
  store i32 %7347, i32* %35, align 4
  %7348 = call i8** @bf4367541783002168146(i32* %35)
  %7349 = load i8*, i8** %7348, align 8
  indirectbr i8* %7349, [label %loopEnd, label %7102]

7350:                                             ; preds = %7350, %loopStart
  %.reload177 = load i1, i1* %.reg2mem176, align 1
  %.reload175 = load i1, i1* %.reg2mem174, align 1
  %.reload173 = load i64, i64* %.reg2mem172, align 8
  %.reload171 = load i64, i64* %.reg2mem170, align 8
  %.reload169 = load i64, i64* %.reg2mem168, align 8
  %.reload167 = load i1, i1* %.reg2mem166, align 1
  %.reload165 = load i64, i64* %.reg2mem164, align 8
  %.reload163 = load i64, i64* %.reg2mem162, align 8
  %.reload161 = load i64, i64* %.reg2mem160, align 8
  %.reload159 = load i64, i64* %.reg2mem132, align 8
  %7351 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 11
  %7352 = load i32, i32* %7351, align 4
  %7353 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 9
  %7354 = load i32, i32* %7353, align 4
  %7355 = add i32 %7352, %7354
  store i32 %7355, i32* %dispatcher, align 4
  store i64 %.reload161, i64* %.reg2mem178, align 8
  store i64 %.reload169, i64* %.reg2mem180, align 8
  store i1 %.reload177, i1* %.reg2mem182, align 1
  %7356 = load i8*, i8** %55, align 8
  %7357 = load i8, i8* %7356, align 1
  %7358 = and i8 %7357, 1
  %7359 = add i64 %3, -1548422080444727562
  %7360 = and i64 -1548422080444727562, %3
  %7361 = or i64 -1548422080444727562, %3
  %7362 = add i64 %7360, %7361
  %7363 = and i64 %96, 1890763220938218818
  %7364 = xor i64 %96, -1
  %7365 = or i64 -1890763220938218819, %7364
  %7366 = xor i64 %7365, -1
  %7367 = and i64 %7366, -1
  %7368 = xor i64 %7363, %7359
  %7369 = xor i64 %7368, %7362
  %7370 = xor i64 %7369, 5128369883083157493
  %7371 = xor i64 %7370, %7367
  %7372 = and i64 %5086, -1795600740206480210
  %7373 = xor i64 %5086, -1
  %7374 = xor i64 -1795600740206480210, %7373
  %7375 = and i64 %7374, -1795600740206480210
  %7376 = add i64 %179, 1180459922645909915
  %7377 = add i64 788875219256922999, %179
  %7378 = sub i64 %7377, -391584703388986916
  %7379 = and i64 %50, 249722042884242955
  %7380 = or i64 -249722042884242956, %50
  %7381 = sub i64 %7380, -249722042884242956
  %7382 = xor i64 8707341946668205149, %7376
  %7383 = xor i64 %7382, %7381
  %7384 = xor i64 %7383, %7375
  %7385 = xor i64 %7384, %7378
  %7386 = xor i64 %7385, %7372
  %7387 = xor i64 %7386, %7379
  %7388 = mul i64 %7371, %7387
  %7389 = trunc i64 %7388 to i8
  %7390 = icmp eq i8 %7358, %7389
  %7391 = mul i8 %7357, %7357
  %7392 = sub i8 0, %7391
  %7393 = sub i8 0, %7357
  %7394 = add i8 %7392, %7393
  %7395 = sub i8 0, %7394
  %7396 = srem i8 %7395, 2
  %7397 = icmp eq i8 %7396, 0
  %7398 = or i1 %7390, %7397
  %7399 = select i1 %7398, i32 595012101, i32 595012113
  %7400 = xor i32 %7399, 20
  store i32 %7400, i32* %35, align 4
  %7401 = call i8** @bf4367541783002168146(i32* %35)
  %7402 = load i8*, i8** %7401, align 8
  indirectbr i8* %7402, [label %loopEnd, label %7350]

7403:                                             ; preds = %7403, %loopStart
  %7404 = mul i64 %3, 2
  %7405 = xor i64 %7404, -1
  %7406 = or i64 %330, 4299904538952643461
  %7407 = and i64 4299904538952643461, %330
  %7408 = xor i64 4299904538952643461, %330
  %7409 = or i64 %7407, %7408
  %7410 = add i64 %280, -8629714596484004804
  %7411 = sub i64 0, %280
  %7412 = sub i64 -8629714596484004804, %7411
  %7413 = and i64 %324, -2053985246678561577
  %7414 = xor i64 %324, -1
  %7415 = xor i64 -2053985246678561577, %7414
  %7416 = and i64 %7415, -2053985246678561577
  %7417 = xor i64 %7406, %7416
  %7418 = xor i64 %7417, 8852690620406534969
  %7419 = xor i64 %7418, %7413
  %7420 = xor i64 %7419, %7410
  %7421 = xor i64 %7420, %7409
  %7422 = xor i64 %7421, %7412
  %7423 = or i64 %3431, 7741596835649780943
  %7424 = xor i64 %3431, -1
  %7425 = and i64 7741596835649780943, %7424
  %7426 = add i64 %7425, %3431
  %7427 = and i64 %1428, 5030049381780739985
  %7428 = xor i64 %1428, -1
  %7429 = or i64 -5030049381780739986, %7428
  %7430 = xor i64 %7429, -1
  %7431 = and i64 %7430, -1
  %7432 = xor i64 %7427, %7426
  %7433 = xor i64 %7432, %7431
  %7434 = xor i64 %7433, -652962677389339118
  %7435 = xor i64 %7434, %7423
  %7436 = mul i64 %7422, %7435
  %7437 = xor i64 %7436, %7405
  %7438 = and i64 %7437, 2
  %7439 = xor i64 %7404, -1
  %7440 = and i64 2, %7439
  %7441 = add i64 %7440, %7404
  %7442 = and i64 %7438, %7441
  %7443 = or i64 %7438, %7441
  %7444 = add i64 %7442, %7443
  %.reload10 = load i64, i64* %.reg2mem8, align 8
  %7445 = mul i64 %.reload10, %7444
  %7446 = srem i64 %7445, 4
  %7447 = icmp eq i64 %7446, 0
  %7448 = mul i64 %3, %3
  %7449 = add i64 %7448, %3
  %7450 = srem i64 %7449, 2
  %7451 = or i64 %251, -2383338010102424011
  %7452 = xor i64 %251, -1
  %7453 = and i64 %7452, 8027587409833520995
  %7454 = and i64 %251, -8027587409833520996
  %7455 = or i64 %7453, %7454
  %7456 = xor i64 -5653400157238136490, %7455
  %7457 = xor i64 %251, -1
  %7458 = or i64 2383338010102424010, %7457
  %7459 = xor i64 %7458, -1
  %7460 = and i64 %7459, -1
  %7461 = or i64 %7456, %7460
  %7462 = add i64 %2865, -7818093243803095800
  %7463 = sub i64 0, %2865
  %7464 = add i64 7818093243803095800, %7463
  %7465 = sub i64 0, %7464
  %7466 = xor i64 %7461, %7462
  %7467 = xor i64 %7466, -7213806724556327913
  %7468 = xor i64 %7467, %7465
  %7469 = xor i64 %7468, %7451
  %7470 = and i64 %4586, 3862824296462032337
  %7471 = xor i64 %4586, -1
  %7472 = or i64 -3862824296462032338, %7471
  %7473 = xor i64 %7472, -1
  %7474 = and i64 %7473, -1
  %7475 = add i64 %326, -2153283336531811631
  %7476 = add i64 -4934405499077091425, %326
  %7477 = add i64 %7476, 2781122162545279794
  %7478 = xor i64 %7474, %7477
  %7479 = xor i64 %7478, %7475
  %7480 = xor i64 %7479, %7470
  %7481 = xor i64 %7480, 0
  %7482 = mul i64 %7469, %7481
  %7483 = icmp eq i64 %7450, %7482
  %7484 = or i1 %7447, %7483
  %7485 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 11
  %7486 = load i32, i32* %7485, align 4
  %7487 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 9
  %7488 = load i32, i32* %7487, align 4
  %7489 = or i64 %179, -8728516397651841006
  %7490 = and i64 -8728516397651841006, %179
  %7491 = xor i64 -8728516397651841006, %179
  %7492 = or i64 %7490, %7491
  %7493 = and i64 %92, -1669356099356951467
  %7494 = xor i64 %92, -1
  %7495 = xor i64 -1669356099356951467, %7494
  %7496 = and i64 %7495, -1669356099356951467
  %7497 = xor i64 %7489, %7493
  %7498 = xor i64 %7497, 8397948619147288725
  %7499 = xor i64 %7498, %7492
  %7500 = xor i64 %7499, %7496
  %7501 = add i64 %40, -4702614323295803433
  %7502 = add i64 5012162465595390561, %40
  %7503 = sub i64 %7502, -8731967284818357622
  %7504 = add i64 %112, 928982272821686253
  %7505 = and i64 928982272821686253, %112
  %7506 = or i64 928982272821686253, %112
  %7507 = add i64 %7505, %7506
  %7508 = or i64 %251, -6632148298520321856
  %7509 = xor i64 %251, -1
  %7510 = and i64 -6632148298520321856, %7509
  %7511 = add i64 %7510, %251
  %7512 = xor i64 %7507, %7508
  %7513 = xor i64 %7512, %7501
  %7514 = xor i64 %7513, %7504
  %7515 = xor i64 %7514, -775797692450983775
  %7516 = xor i64 %7515, %7503
  %7517 = xor i64 %7516, %7511
  %7518 = mul i64 %7500, %7517
  %7519 = trunc i64 %7518 to i32
  %7520 = sub i32 %7486, %7519
  %7521 = add i32 %7520, %7488
  %7522 = add i32 %7521, 1628827061
  store i32 %7522, i32* %dispatcher, align 4
  store i64 %7444, i64* %.reg2mem178, align 8
  store i64 %7448, i64* %.reg2mem180, align 8
  store i1 %7484, i1* %.reg2mem182, align 1
  %7523 = load i8*, i8** %57, align 8
  %7524 = load i8, i8* %7523, align 1
  %7525 = mul i8 %7524, 2
  %7526 = mul i8 %7524, 2
  %7527 = add i8 2, %7526
  %7528 = mul i8 %7525, %7527
  %7529 = srem i8 %7528, 4
  %7530 = icmp eq i8 %7529, 0
  %7531 = mul i8 %7524, %7524
  %7532 = add i8 %7531, %7524
  %7533 = srem i8 %7532, 2
  %7534 = or i64 %2865, -7268161298081735960
  %7535 = and i64 -7268161298081735960, %2865
  %7536 = xor i64 -7268161298081735960, %2865
  %7537 = or i64 %7535, %7536
  %7538 = and i64 %114, -964515818618847909
  %7539 = xor i64 %114, -1
  %7540 = xor i64 -964515818618847909, %7539
  %7541 = and i64 %7540, -964515818618847909
  %7542 = and i64 %120, 5227752150814983645
  %7543 = or i64 -5227752150814983646, %120
  %7544 = sub i64 %7543, -5227752150814983646
  %7545 = xor i64 %7534, %7541
  %7546 = xor i64 %7545, -2697841353564742823
  %7547 = xor i64 %7546, %7544
  %7548 = xor i64 %7547, %7542
  %7549 = xor i64 %7548, %7538
  %7550 = xor i64 %7549, %7537
  %7551 = and i64 %212, -1816067656287822399
  %7552 = or i64 1816067656287822398, %212
  %7553 = sub i64 %7552, 1816067656287822398
  %7554 = add i64 %330, 4119357240179723940
  %7555 = and i64 4119357240179723940, %330
  %7556 = or i64 4119357240179723940, %330
  %7557 = add i64 %7555, %7556
  %7558 = xor i64 0, %7553
  %7559 = xor i64 %7558, %7557
  %7560 = xor i64 %7559, %7551
  %7561 = xor i64 %7560, %7554
  %7562 = mul i64 %7550, %7561
  %7563 = trunc i64 %7562 to i8
  %7564 = icmp eq i8 %7533, %7563
  %7565 = or i1 %7530, %7564
  %7566 = select i1 %7565, i32 595012107, i32 595012113
  %7567 = or i64 %3153, -3722498121480718597
  %7568 = xor i64 %3153, -1
  %7569 = and i64 -3722498121480718597, %7568
  %7570 = add i64 %7569, %3153
  %7571 = add i64 %280, -5826699436592961294
  %7572 = sub i64 0, %280
  %7573 = add i64 5826699436592961294, %7572
  %7574 = sub i64 0, %7573
  %7575 = or i64 %4019, 8599403926893127790
  %7576 = xor i64 %4019, -1
  %7577 = and i64 %7576, 7891023752200443834
  %7578 = and i64 %4019, -7891023752200443835
  %7579 = or i64 %7577, %7578
  %7580 = xor i64 1933649544407662548, %7579
  %7581 = xor i64 %4019, -1
  %7582 = or i64 -8599403926893127791, %7581
  %7583 = xor i64 %7582, -1
  %7584 = and i64 %7583, -1
  %7585 = or i64 %7580, %7584
  %7586 = xor i64 %7585, %7575
  %7587 = xor i64 %7586, %7571
  %7588 = xor i64 %7587, -6424306276677058495
  %7589 = xor i64 %7588, %7570
  %7590 = xor i64 %7589, %7567
  %7591 = xor i64 %7590, %7574
  %7592 = and i64 %4019, 6102745294240024037
  %7593 = xor i64 %4019, -1
  %7594 = or i64 -6102745294240024038, %7593
  %7595 = xor i64 %7594, -1
  %7596 = and i64 %7595, -1
  %7597 = and i64 %322, -2316155600515861811
  %7598 = xor i64 %322, -1
  %7599 = xor i64 -2316155600515861811, %7598
  %7600 = and i64 %7599, -2316155600515861811
  %7601 = xor i64 %7596, -8339982585497806438
  %7602 = xor i64 %7601, %7597
  %7603 = xor i64 %7602, %7600
  %7604 = xor i64 %7603, %7592
  %7605 = mul i64 %7591, %7604
  %7606 = trunc i64 %7605 to i32
  %7607 = xor i32 %7566, %7606
  store i32 %7607, i32* %35, align 4
  %7608 = call i8** @bf4367541783002168146(i32* %35)
  %7609 = load i8*, i8** %7608, align 8
  indirectbr i8* %7609, [label %loopEnd, label %7403]

7610:                                             ; preds = %7610, %loopStart
  %.reload183 = load i1, i1* %.reg2mem182, align 1
  %.reload181 = load i64, i64* %.reg2mem180, align 8
  %.reload179 = load i64, i64* %.reg2mem178, align 8
  store i1 %.reload183, i1* %.reg2mem37, align 1
  store i64 %.reload181, i64* %.reg2mem35, align 8
  store i64 %.reload179, i64* %.reg2mem30, align 8
  %7611 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 18
  %7612 = load i32, i32* %7611, align 4
  %7613 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %7614 = load i32, i32* %7613, align 4
  %7615 = srem i32 %7612, %7614
  store i32 %7615, i32* %dispatcher, align 4
  %7616 = load i8*, i8** %121, align 8
  %7617 = load i8, i8* %7616, align 1
  %7618 = mul i8 %7617, %7617
  %7619 = sub i8 %7618, 64
  %7620 = add i8 %7619, %7617
  %7621 = add i8 %7620, 64
  %7622 = mul i8 %7621, 3
  %7623 = srem i8 %7622, 2
  %7624 = icmp eq i8 %7623, 0
  %7625 = mul i8 %7617, %7617
  %7626 = add i8 %7625, %7617
  %7627 = srem i8 %7626, 2
  %7628 = icmp eq i8 %7627, 0
  %7629 = and i1 %7624, %7628
  %7630 = and i64 %167, -4409143711632194909
  %7631 = xor i64 %167, -1
  %7632 = xor i64 -4409143711632194909, %7631
  %7633 = and i64 %7632, -4409143711632194909
  %7634 = add i64 %4019, 2518731680534096622
  %7635 = and i64 2518731680534096622, %4019
  %7636 = or i64 2518731680534096622, %4019
  %7637 = add i64 %7635, %7636
  %7638 = xor i64 %7637, %7630
  %7639 = xor i64 %7638, %7633
  %7640 = xor i64 %7639, %7634
  %7641 = xor i64 %7640, 1531326387592793859
  %7642 = and i64 %4365, 1290018496108974141
  %7643 = or i64 -1290018496108974142, %4365
  %7644 = sub i64 %7643, -1290018496108974142
  %7645 = or i64 %108, 2747100357314454556
  %7646 = xor i64 %108, -1
  %7647 = and i64 2747100357314454556, %7646
  %7648 = add i64 %7647, %108
  %7649 = xor i64 %7648, %7642
  %7650 = xor i64 %7649, %7645
  %7651 = xor i64 %7650, 1386913695321204151
  %7652 = xor i64 %7651, %7644
  %7653 = mul i64 %7641, %7652
  %7654 = trunc i64 %7653 to i32
  %7655 = select i1 %7629, i32 %7654, i32 595012113
  %7656 = xor i32 %7655, 52
  store i32 %7656, i32* %35, align 4
  %7657 = call i8** @bf4367541783002168146(i32* %35)
  %7658 = load i8*, i8** %7657, align 8
  indirectbr i8* %7658, [label %loopEnd, label %7610]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 1996855465712537084, i64* %1256, align 8
  %7659 = call i8** @lk4104490460174343886(i64* %1256)
  %7660 = load i8*, i8** %7659, align 8
  %7661 = bitcast i8* %7660 to i1 (i1)*
  %.reload38 = load i1, i1* %.reg2mem37, align 1
  %targetBlock2 = call i1 %7661(i1 %.reload38)
  %7662 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 12
  %7663 = load i32, i32* %7662, align 4
  %7664 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 11
  %7665 = load i32, i32* %7664, align 4
  %7666 = add i32 %7663, %7665
  %7667 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 40
  %7668 = load i32, i32* %7667, align 4
  %7669 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %7670 = load i32, i32* %7669, align 4
  %7671 = sub i32 %7668, %7670
  %7672 = select i1 %targetBlock2, i32 %7666, i32 %7671
  store i32 %7672, i32* %dispatcher, align 4
  %7673 = load i8*, i8** %394, align 8
  %7674 = load i8, i8* %7673, align 1
  %7675 = mul i8 %7674, %7674
  %7676 = add i64 %4586, 5172984635439150066
  %7677 = xor i64 5172984635439150066, %4586
  %7678 = and i64 5172984635439150066, %4586
  %7679 = mul i64 2, %7678
  %7680 = add i64 %7677, %7679
  %7681 = or i64 %48, -977713776016562582
  %7682 = xor i64 %48, -1
  %7683 = and i64 %7682, 5173458206358715922
  %7684 = and i64 %48, -5173458206358715923
  %7685 = or i64 %7683, %7684
  %7686 = xor i64 -5357693301395695496, %7685
  %7687 = xor i64 %48, -1
  %7688 = or i64 977713776016562581, %7687
  %7689 = xor i64 %7688, -1
  %7690 = and i64 %7689, -1
  %7691 = or i64 %7686, %7690
  %7692 = add i64 %322, 5483174194544525283
  %7693 = add i64 -4206805649903381467, %322
  %7694 = sub i64 %7693, 8756764229261644866
  %7695 = xor i64 %7676, %7694
  %7696 = xor i64 %7695, %7681
  %7697 = xor i64 %7696, %7692
  %7698 = xor i64 %7697, -6701045827454807223
  %7699 = xor i64 %7698, %7680
  %7700 = xor i64 %7699, %7691
  %7701 = add i64 %5086, 5262031734353039075
  %7702 = sub i64 0, %5086
  %7703 = add i64 -5262031734353039075, %7702
  %7704 = sub i64 0, %7703
  %7705 = and i64 %4826, 7777812254068452999
  %7706 = xor i64 %4826, -1
  %7707 = or i64 -7777812254068453000, %7706
  %7708 = xor i64 %7707, -1
  %7709 = and i64 %7708, -1
  %7710 = xor i64 %7701, 3877513827986204879
  %7711 = xor i64 %7710, %7705
  %7712 = xor i64 %7711, %7709
  %7713 = xor i64 %7712, %7704
  %7714 = mul i64 %7700, %7713
  %7715 = trunc i64 %7714 to i8
  %7716 = sub i8 %7675, %7715
  %7717 = add i8 %7716, %7674
  %7718 = add i64 %104, -7454178251571065323
  %7719 = add i64 2295989472818155296, %104
  %7720 = add i64 %7719, 8696576349320330997
  %7721 = and i64 %4365, -5284875437204849331
  %7722 = xor i64 %4365, -1
  %7723 = xor i64 -5284875437204849331, %7722
  %7724 = and i64 %7723, -5284875437204849331
  %7725 = xor i64 6915002577890571361, %7718
  %7726 = xor i64 %7725, %7724
  %7727 = xor i64 %7726, %7721
  %7728 = xor i64 %7727, %7720
  %7729 = and i64 %3431, 7845946797291897723
  %7730 = or i64 -7845946797291897724, %3431
  %7731 = sub i64 %7730, -7845946797291897724
  %7732 = add i64 %324, 9132907161734110006
  %7733 = add i64 7080886691736101482, %324
  %7734 = add i64 %7733, 2052020469998008524
  %7735 = or i64 %385, 751935749700393422
  %7736 = xor i64 %385, -1
  %7737 = and i64 751935749700393422, %7736
  %7738 = add i64 %7737, %385
  %7739 = xor i64 %7735, %7732
  %7740 = xor i64 %7739, %7734
  %7741 = xor i64 %7740, %7729
  %7742 = xor i64 %7741, %7731
  %7743 = xor i64 %7742, %7738
  %7744 = xor i64 %7743, -7571206307124359833
  %7745 = mul i64 %7728, %7744
  %7746 = trunc i64 %7745 to i8
  %7747 = add i8 %7717, %7746
  %7748 = mul i8 %7747, 3
  %7749 = srem i8 %7748, 2
  %7750 = icmp eq i8 %7749, 0
  %7751 = mul i8 %7674, %7674
  %7752 = and i8 %7751, %7674
  %7753 = or i8 %7751, %7674
  %7754 = add i8 %7752, %7753
  %7755 = srem i8 %7754, 2
  %7756 = icmp eq i8 %7755, 0
  %7757 = and i1 %7750, %7756
  %7758 = select i1 %7757, i32 595012120, i32 595012113
  %7759 = xor i32 %7758, 9
  store i32 %7759, i32* %35, align 4
  %7760 = call i8** @bf4367541783002168146(i32* %35)
  %7761 = load i8*, i8** %7760, align 8
  indirectbr i8* %7761, [label %loopEnd, label %codeRepl1]

7762:                                             ; preds = %7762, %loopStart
  %7763 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 25
  %7764 = load i32, i32* %7763, align 4
  %7765 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %7766 = load i32, i32* %7765, align 4
  %7767 = sub i32 0, %7764
  %7768 = sub i32 0, %7766
  %7769 = add i32 %7767, %7768
  %7770 = sub i32 0, %7769
  store i32 %7770, i32* %dispatcher, align 4
  %7771 = load i8*, i8** %325, align 8
  %7772 = load i8, i8* %7771, align 1
  %7773 = or i64 %1794, -7502365948805449603
  %7774 = and i64 -7502365948805449603, %1794
  %7775 = xor i64 -7502365948805449603, %1794
  %7776 = or i64 %7774, %7775
  %7777 = and i64 %2342, 6146694670332257320
  %7778 = xor i64 %2342, -1
  %7779 = xor i64 6146694670332257320, %7778
  %7780 = and i64 %7779, 6146694670332257320
  %7781 = add i64 %3, 5271958158428263083
  %7782 = sub i64 0, %3
  %7783 = add i64 -5271958158428263083, %7782
  %7784 = sub i64 0, %7783
  %7785 = xor i64 8390276709123620911, %7784
  %7786 = xor i64 %7785, %7773
  %7787 = xor i64 %7786, %7781
  %7788 = xor i64 %7787, %7780
  %7789 = xor i64 %7788, %7777
  %7790 = xor i64 %7789, %7776
  %7791 = add i64 %171, 4635308800511938188
  %7792 = xor i64 4635308800511938188, %171
  %7793 = and i64 4635308800511938188, %171
  %7794 = mul i64 2, %7793
  %7795 = add i64 %7792, %7794
  %7796 = add i64 %3431, -7463411155482961544
  %7797 = add i64 -906857389354163804, %3431
  %7798 = add i64 %7797, -6556553766128797740
  %7799 = xor i64 -838182912949647311, %7798
  %7800 = xor i64 %7799, %7795
  %7801 = xor i64 %7800, %7791
  %7802 = xor i64 %7801, %7796
  %7803 = mul i64 %7790, %7802
  %7804 = trunc i64 %7803 to i8
  %7805 = xor i8 %7772, %7804
  %7806 = or i8 %7805, 1
  %7807 = xor i8 %7772, -1
  %7808 = sub i8 %7806, %7807
  %7809 = icmp eq i8 %7808, 1
  %7810 = mul i8 %7772, %7772
  %7811 = add i8 %7810, %7772
  %7812 = srem i8 %7811, 2
  %7813 = icmp eq i8 %7812, 0
  %7814 = or i1 %7809, %7813
  %7815 = select i1 %7814, i32 595012129, i32 595012113
  %7816 = xor i32 %7815, 48
  store i32 %7816, i32* %35, align 4
  %7817 = call i8** @bf4367541783002168146(i32* %35)
  %7818 = load i8*, i8** %7817, align 8
  indirectbr i8* %7818, [label %loopEnd, label %7762]

7819:                                             ; preds = %7819, %loopStart
  %7820 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 55
  %7821 = load i32, i32* %7820, align 4
  %7822 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %7823 = load i32, i32* %7822, align 4
  %7824 = sub i32 %7821, %7823
  store i32 %7824, i32* %dispatcher, align 4
  store i64 0, i64* %.reg2mem210, align 8
  %7825 = load i8*, i8** %47, align 8
  %7826 = load i8, i8* %7825, align 1
  %7827 = xor i8 %7826, -1
  %7828 = or i8 %7827, -2
  %7829 = xor i8 %7828, -1
  %7830 = and i8 %7829, -1
  %7831 = icmp eq i8 %7830, 0
  %7832 = mul i8 %7826, %7826
  %7833 = xor i8 %7832, %7826
  %7834 = and i8 %7832, %7826
  %7835 = mul i8 2, %7834
  %7836 = add i8 %7833, %7835
  %7837 = mul i8 %7836, 3
  %7838 = srem i8 %7837, 2
  %7839 = icmp eq i8 %7838, 0
  %7840 = or i1 %7831, %7839
  %7841 = and i64 %4019, 2698495966040976964
  %7842 = xor i64 %4019, -1
  %7843 = xor i64 2698495966040976964, %7842
  %7844 = and i64 %7843, 2698495966040976964
  %7845 = or i64 %94, -5696342039711395407
  %7846 = xor i64 %94, -1
  %7847 = and i64 -5696342039711395407, %7846
  %7848 = add i64 %7847, %94
  %7849 = xor i64 %7844, %7848
  %7850 = xor i64 %7849, %7845
  %7851 = xor i64 %7850, %7841
  %7852 = xor i64 %7851, -4603024281712851037
  %7853 = add i64 %56, -3077977149866314883
  %7854 = sub i64 0, %56
  %7855 = sub i64 -3077977149866314883, %7854
  %7856 = add i64 %90, 1262219896533473327
  %7857 = and i64 1262219896533473327, %90
  %7858 = or i64 1262219896533473327, %90
  %7859 = add i64 %7857, %7858
  %7860 = add i64 %251, -4337104772267026543
  %7861 = add i64 4467743464802303464, %251
  %7862 = sub i64 %7861, 8804848237069330007
  %7863 = xor i64 %7862, %7853
  %7864 = xor i64 %7863, %7856
  %7865 = xor i64 %7864, -5268735715530280261
  %7866 = xor i64 %7865, %7855
  %7867 = xor i64 %7866, %7860
  %7868 = xor i64 %7867, %7859
  %7869 = mul i64 %7852, %7868
  %7870 = trunc i64 %7869 to i32
  %7871 = select i1 %7840, i32 595012143, i32 %7870
  %7872 = xor i32 %7871, 62
  store i32 %7872, i32* %35, align 4
  %7873 = call i8** @bf4367541783002168146(i32* %35)
  %7874 = load i8*, i8** %7873, align 8
  indirectbr i8* %7874, [label %loopEnd, label %7819]

7875:                                             ; preds = %7875, %loopStart
  %.reload34 = load i64, i64* %.reg2mem30, align 8
  %7876 = and i64 %.reload34, 1
  %7877 = icmp eq i64 %7876, 0
  store i1 %7877, i1* %.reg2mem39, align 1
  %.reload33 = load i64, i64* %.reg2mem30, align 8
  %7878 = mul i64 %.reload33, %.reload33
  store i64 %7878, i64* %.reg2mem45, align 8
  %.reload32 = load i64, i64* %.reg2mem30, align 8
  %.reload47 = load i64, i64* %.reg2mem45, align 8
  %7879 = add i64 %.reload47, %.reload32
  %7880 = mul i64 %7879, 3
  %7881 = srem i64 %7880, 2
  %7882 = icmp eq i64 %7881, 0
  store i1 %7882, i1* %.reg2mem48, align 1
  %.reload44 = load i1, i1* %.reg2mem39, align 1
  %7883 = or i1 %.reload44, true
  %7884 = or i64 %96, 2011680609524058060
  %7885 = xor i64 %96, -1
  %7886 = and i64 2011680609524058060, %7885
  %7887 = add i64 %7886, %96
  %7888 = or i64 %42, -6519325990857811873
  %7889 = and i64 -6519325990857811873, %42
  %7890 = xor i64 -6519325990857811873, %42
  %7891 = or i64 %7889, %7890
  %7892 = add i64 %338, -5539111289762225924
  %7893 = sub i64 0, %338
  %7894 = add i64 5539111289762225924, %7893
  %7895 = sub i64 0, %7894
  %7896 = xor i64 %7888, %7887
  %7897 = xor i64 %7896, 4619299571770887039
  %7898 = xor i64 %7897, %7895
  %7899 = xor i64 %7898, %7884
  %7900 = xor i64 %7899, %7892
  %7901 = xor i64 %7900, %7891
  %7902 = add i64 %98, 5702675471728570279
  %7903 = add i64 5489004462318377589, %98
  %7904 = add i64 %7903, 213671009410192690
  %7905 = or i64 %2648, -6737301986439728069
  %7906 = xor i64 %2648, -1
  %7907 = and i64 %7906, 7365074231549555633
  %7908 = and i64 %2648, -7365074231549555634
  %7909 = or i64 %7907, %7908
  %7910 = xor i64 -4272310244499191926, %7909
  %7911 = xor i64 %2648, -1
  %7912 = or i64 6737301986439728068, %7911
  %7913 = xor i64 %7912, -1
  %7914 = and i64 %7913, -1
  %7915 = or i64 %7910, %7914
  %7916 = xor i64 %7904, %7905
  %7917 = xor i64 %7916, -8089585814400977793
  %7918 = xor i64 %7917, %7915
  %7919 = xor i64 %7918, %7902
  %7920 = mul i64 %7901, %7919
  %7921 = trunc i64 %7920 to i1
  %7922 = and i1 %.reload44, %7921
  %7923 = sub i1 %7883, %7922
  %7924 = xor i1 %7923, true
  %7925 = or i1 %7924, false
  %7926 = xor i1 %7923, true
  %7927 = sub i1 %7925, %7926
  store i1 %7927, i1* %.reg2mem81, align 1
  %.reload43 = load i1, i1* %.reg2mem39, align 1
  %7928 = and i1 %.reload43, true
  store i1 %7928, i1* %.reg2mem84, align 1
  %.reload126 = load i64, i64* %.reg2mem125, align 8
  %7929 = srem i64 %.reload126, 2
  store i64 %7929, i64* %.reg2mem87, align 8
  %.reload89 = load i64, i64* %.reg2mem87, align 8
  %7930 = icmp eq i64 %.reload89, 0
  %7931 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 54
  %7932 = load i32, i32* %7931, align 4
  %7933 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 35
  %7934 = load i32, i32* %7933, align 4
  %7935 = add i32 %7932, -675060684
  %7936 = sub i32 %7935, %7934
  %7937 = sub i32 %7936, -675060684
  %7938 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %7939 = load i32, i32* %7938, align 4
  %7940 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %7941 = load i32, i32* %7940, align 4
  %7942 = srem i32 %7939, %7941
  %7943 = select i1 %7930, i32 %7937, i32 %7942
  store i32 %7943, i32* %dispatcher, align 4
  %7944 = load i8*, i8** %49, align 8
  %7945 = load i8, i8* %7944, align 1
  %7946 = xor i8 %7945, -1
  %7947 = or i64 %173, 3465222184766604577
  %7948 = xor i64 %173, -1
  %7949 = and i64 3465222184766604577, %7948
  %7950 = add i64 %7949, %173
  %7951 = add i64 %177, -2137361745816573800
  %7952 = add i64 -2710522977386722371, %177
  %7953 = sub i64 %7952, -573161231570148571
  %7954 = or i64 %332, -8694330161404544096
  %7955 = xor i64 %332, -1
  %7956 = and i64 -8694330161404544096, %7955
  %7957 = add i64 %7956, %332
  %7958 = xor i64 %7951, -6291533176624575
  %7959 = xor i64 %7958, %7950
  %7960 = xor i64 %7959, %7947
  %7961 = xor i64 %7960, %7953
  %7962 = xor i64 %7961, %7954
  %7963 = xor i64 %7962, %7957
  %7964 = or i64 %38, 6743710060936029090
  %7965 = and i64 6743710060936029090, %38
  %7966 = xor i64 6743710060936029090, %38
  %7967 = or i64 %7965, %7966
  %7968 = or i64 %3431, 5147375978524240621
  %7969 = xor i64 %3431, -1
  %7970 = and i64 5147375978524240621, %7969
  %7971 = add i64 %7970, %3431
  %7972 = add i64 %3588, -4587805711423628303
  %7973 = add i64 6826429373391493753, %3588
  %7974 = sub i64 %7973, -7032508988894429560
  %7975 = xor i64 %7964, %7968
  %7976 = xor i64 %7975, %7972
  %7977 = xor i64 %7976, %7967
  %7978 = xor i64 %7977, 6519035959274632574
  %7979 = xor i64 %7978, %7974
  %7980 = xor i64 %7979, %7971
  %7981 = mul i64 %7963, %7980
  %7982 = trunc i64 %7981 to i8
  %7983 = or i8 %7946, %7982
  %7984 = xor i8 %7983, -1
  %7985 = and i8 %7984, -1
  %7986 = icmp eq i8 %7985, 1
  %7987 = mul i8 %7945, %7945
  %7988 = add i8 %7987, %7945
  %7989 = srem i8 %7988, 2
  %7990 = icmp eq i8 %7989, 0
  %7991 = and i64 %1428, -5516347363834655907
  %7992 = xor i64 %1428, -1
  %7993 = or i64 5516347363834655906, %7992
  %7994 = xor i64 %7993, -1
  %7995 = and i64 %7994, -1
  %7996 = or i64 %100, 8940216391262629728
  %7997 = xor i64 %100, -1
  %7998 = and i64 %7997, -8628073025887968859
  %7999 = and i64 %100, 8628073025887968858
  %8000 = or i64 %7998, %7999
  %8001 = xor i64 -841915590464237883, %8000
  %8002 = xor i64 %100, -1
  %8003 = or i64 -8940216391262629729, %8002
  %8004 = xor i64 %8003, -1
  %8005 = and i64 %8004, -1
  %8006 = or i64 %8001, %8005
  %8007 = xor i64 %8006, %7991
  %8008 = xor i64 %8007, %7995
  %8009 = xor i64 %8008, %7996
  %8010 = xor i64 %8009, 5032563628915118301
  %8011 = or i64 %253, 9107955977004077989
  %8012 = xor i64 %253, -1
  %8013 = and i64 9107955977004077989, %8012
  %8014 = add i64 %8013, %253
  %8015 = or i64 %393, -4896808216758065162
  %8016 = xor i64 %393, -1
  %8017 = and i64 %8016, -2935321190497482105
  %8018 = and i64 %393, 2935321190497482104
  %8019 = or i64 %8017, %8018
  %8020 = xor i64 7730620294050835825, %8019
  %8021 = xor i64 %393, -1
  %8022 = or i64 4896808216758065161, %8021
  %8023 = xor i64 %8022, -1
  %8024 = and i64 %8023, -1
  %8025 = or i64 %8020, %8024
  %8026 = xor i64 %8025, %8014
  %8027 = xor i64 %8026, %8015
  %8028 = xor i64 %8027, -8294642799498229899
  %8029 = xor i64 %8028, %8011
  %8030 = mul i64 %8010, %8029
  %8031 = trunc i64 %8030 to i1
  %8032 = xor i1 %7986, %8031
  %8033 = and i1 %8032, true
  %8034 = and i64 %46, 4888085546939240308
  %8035 = xor i64 %46, -1
  %8036 = or i64 -4888085546939240309, %8035
  %8037 = xor i64 %8036, -1
  %8038 = and i64 %8037, -1
  %8039 = and i64 %106, -3355207137259635346
  %8040 = xor i64 %106, -1
  %8041 = or i64 3355207137259635345, %8040
  %8042 = xor i64 %8041, -1
  %8043 = and i64 %8042, -1
  %8044 = xor i64 %8034, -1538634588479990169
  %8045 = xor i64 %8044, %8038
  %8046 = xor i64 %8045, %8043
  %8047 = xor i64 %8046, %8039
  %8048 = or i64 %100, 6799857512491002607
  %8049 = xor i64 %100, -1
  %8050 = and i64 6799857512491002607, %8049
  %8051 = add i64 %8050, %100
  %8052 = or i64 %52, -5877970547005831671
  %8053 = xor i64 %52, -1
  %8054 = and i64 -5877970547005831671, %8053
  %8055 = add i64 %8054, %52
  %8056 = and i64 %94, 6796452710524645087
  %8057 = xor i64 %94, -1
  %8058 = xor i64 6796452710524645087, %8057
  %8059 = and i64 %8058, 6796452710524645087
  %8060 = xor i64 %8048, %8055
  %8061 = xor i64 %8060, %8056
  %8062 = xor i64 %8061, %8051
  %8063 = xor i64 %8062, %8059
  %8064 = xor i64 %8063, 0
  %8065 = xor i64 %8064, %8052
  %8066 = mul i64 %8047, %8065
  %8067 = trunc i64 %8066 to i1
  %8068 = and i1 %7986, %8067
  %8069 = or i1 %8033, %8068
  %8070 = xor i1 %7990, true
  %8071 = and i1 %8070, true
  %8072 = and i64 %387, 4932844828377797522
  %8073 = or i64 -4932844828377797523, %387
  %8074 = sub i64 %8073, -4932844828377797523
  %8075 = or i64 %54, -7421618885397251590
  %8076 = xor i64 %54, -1
  %8077 = and i64 -7421618885397251590, %8076
  %8078 = add i64 %8077, %54
  %8079 = xor i64 -6436367536976393735, %8078
  %8080 = xor i64 %8079, %8075
  %8081 = xor i64 %8080, %8072
  %8082 = xor i64 %8081, %8074
  %8083 = and i64 %36, 1717713691197922694
  %8084 = xor i64 %36, -1
  %8085 = or i64 -1717713691197922695, %8084
  %8086 = xor i64 %8085, -1
  %8087 = and i64 %8086, -1
  %8088 = add i64 %54, -4053353373450679791
  %8089 = sub i64 0, %54
  %8090 = sub i64 -4053353373450679791, %8089
  %8091 = or i64 %336, 5369589004056491202
  %8092 = xor i64 %336, -1
  %8093 = and i64 %8092, -5265432340522881324
  %8094 = and i64 %336, 5265432340522881323
  %8095 = or i64 %8093, %8094
  %8096 = xor i64 -258409898744292842, %8095
  %8097 = xor i64 %336, -1
  %8098 = or i64 -5369589004056491203, %8097
  %8099 = xor i64 %8098, -1
  %8100 = and i64 %8099, -1
  %8101 = or i64 %8096, %8100
  %8102 = xor i64 %8091, %8101
  %8103 = xor i64 %8102, 0
  %8104 = xor i64 %8103, %8090
  %8105 = xor i64 %8104, %8083
  %8106 = xor i64 %8105, %8088
  %8107 = xor i64 %8106, %8087
  %8108 = mul i64 %8082, %8107
  %8109 = trunc i64 %8108 to i1
  %8110 = and i1 %7990, %8109
  %8111 = or i1 %8071, %8110
  %8112 = xor i1 %8069, %8111
  %8113 = xor i1 %7986, true
  %8114 = xor i1 %7990, true
  %8115 = or i1 %8113, %8114
  %8116 = xor i1 %8115, true
  %8117 = and i1 %8116, true
  %8118 = or i1 %8112, %8117
  %8119 = select i1 %8118, i32 595012124, i32 595012113
  %8120 = xor i32 %8119, 13
  store i32 %8120, i32* %35, align 4
  %8121 = call i8** @bf4367541783002168146(i32* %35)
  %8122 = load i8*, i8** %8121, align 8
  indirectbr i8* %8122, [label %loopEnd, label %7875]

8123:                                             ; preds = %8123, %loopStart
  %.reload83 = load i1, i1* %.reg2mem81, align 1
  %.reload86 = load i1, i1* %.reg2mem84, align 1
  %8124 = and i1 %.reload83, %.reload86
  %8125 = xor i1 %.reload83, %.reload86
  %8126 = or i1 %8124, %8125
  %.reload80 = load i1, i1* %.reg2mem48, align 1
  %8127 = xor i1 %.reload80, true
  %8128 = xor i1 %8127, true
  %8129 = and i64 %2648, -4154485549878329100
  %8130 = xor i64 %2648, -1
  %8131 = xor i64 -4154485549878329100, %8130
  %8132 = and i64 %8131, -4154485549878329100
  %8133 = add i64 %322, -5021395214837075872
  %8134 = add i64 1169525559520508336, %322
  %8135 = add i64 %8134, -6190920774357584208
  %8136 = or i64 %38, -1258460608081277065
  %8137 = xor i64 %38, -1
  %8138 = and i64 %8137, -6003443409539397009
  %8139 = and i64 %38, 6003443409539397008
  %8140 = or i64 %8138, %8139
  %8141 = xor i64 4766621192440300824, %8140
  %8142 = xor i64 %38, -1
  %8143 = or i64 1258460608081277064, %8142
  %8144 = xor i64 %8143, -1
  %8145 = and i64 %8144, -1
  %8146 = or i64 %8141, %8145
  %8147 = xor i64 %8133, %8135
  %8148 = xor i64 %8147, %8129
  %8149 = xor i64 %8148, %8132
  %8150 = xor i64 %8149, 1264176523452310599
  %8151 = xor i64 %8150, %8136
  %8152 = xor i64 %8151, %8146
  %8153 = and i64 %120, -1848426519030047488
  %8154 = xor i64 %120, -1
  %8155 = xor i64 -1848426519030047488, %8154
  %8156 = and i64 %8155, -1848426519030047488
  %8157 = or i64 %40, 3462012013592020055
  %8158 = xor i64 %40, -1
  %8159 = and i64 3462012013592020055, %8158
  %8160 = add i64 %8159, %40
  %8161 = xor i64 %8156, %8153
  %8162 = xor i64 %8161, %8160
  %8163 = xor i64 %8162, 0
  %8164 = xor i64 %8163, %8157
  %8165 = mul i64 %8152, %8164
  %8166 = trunc i64 %8165 to i1
  %8167 = or i1 %8128, %8166
  %8168 = xor i1 %8127, true
  %8169 = sub i1 %8167, %8168
  %.reload53 = load i1, i1* %.reg2mem48, align 1
  %8170 = and i1 %.reload53, true
  %8171 = or i1 %8169, %8170
  %8172 = xor i1 %8126, true
  %8173 = or i64 %2342, -2950217752233388371
  %8174 = xor i64 %2342, -1
  %8175 = and i64 -2950217752233388371, %8174
  %8176 = add i64 %8175, %2342
  %8177 = or i64 %2342, 6354901189436880892
  %8178 = and i64 6354901189436880892, %2342
  %8179 = xor i64 6354901189436880892, %2342
  %8180 = or i64 %8178, %8179
  %8181 = xor i64 -8162410549683084467, %8180
  %8182 = xor i64 %8181, %8177
  %8183 = xor i64 %8182, %8176
  %8184 = xor i64 %8183, %8173
  %8185 = add i64 %391, -6575598103158118599
  %8186 = add i64 8967612904518015695, %391
  %8187 = add i64 %8186, 2903533066033417322
  %8188 = and i64 %100, 4884998624464066215
  %8189 = or i64 -4884998624464066216, %100
  %8190 = sub i64 %8189, -4884998624464066216
  %8191 = xor i64 %8187, %8185
  %8192 = xor i64 %8191, %8188
  %8193 = xor i64 %8192, %8190
  %8194 = xor i64 %8193, 7494093387169582469
  %8195 = mul i64 %8184, %8194
  %8196 = trunc i64 %8195 to i1
  %8197 = and i1 %8172, %8196
  %8198 = and i1 %8126, false
  %8199 = or i1 %8197, %8198
  %8200 = xor i1 %8171, true
  %8201 = and i1 %8200, true
  %8202 = or i64 %44, 1660070852391861634
  %8203 = and i64 1660070852391861634, %44
  %8204 = xor i64 1660070852391861634, %44
  %8205 = or i64 %8203, %8204
  %8206 = add i64 %212, -7857684714205019180
  %8207 = xor i64 -7857684714205019180, %212
  %8208 = and i64 -7857684714205019180, %212
  %8209 = mul i64 2, %8208
  %8210 = add i64 %8207, %8209
  %8211 = add i64 %389, -6758327440830693731
  %8212 = and i64 -6758327440830693731, %389
  %8213 = or i64 -6758327440830693731, %389
  %8214 = add i64 %8212, %8213
  %8215 = xor i64 %8206, %8202
  %8216 = xor i64 %8215, %8211
  %8217 = xor i64 %8216, %8205
  %8218 = xor i64 %8217, %8214
  %8219 = xor i64 %8218, -5876248689830023605
  %8220 = xor i64 %8219, %8210
  %8221 = and i64 %36, 6648825230095326780
  %8222 = xor i64 %36, -1
  %8223 = or i64 -6648825230095326781, %8222
  %8224 = xor i64 %8223, -1
  %8225 = and i64 %8224, -1
  %8226 = or i64 %393, 8135208390632551577
  %8227 = and i64 8135208390632551577, %393
  %8228 = xor i64 8135208390632551577, %393
  %8229 = or i64 %8227, %8228
  %8230 = add i64 %334, 6914450737224343629
  %8231 = and i64 6914450737224343629, %334
  %8232 = or i64 6914450737224343629, %334
  %8233 = add i64 %8231, %8232
  %8234 = xor i64 %8233, %8221
  %8235 = xor i64 %8234, %8226
  %8236 = xor i64 %8235, %8229
  %8237 = xor i64 %8236, %8230
  %8238 = xor i64 %8237, 0
  %8239 = xor i64 %8238, %8225
  %8240 = mul i64 %8220, %8239
  %8241 = trunc i64 %8240 to i1
  %8242 = and i1 %8171, %8241
  %8243 = or i1 %8201, %8242
  %8244 = xor i1 %8199, %8243
  %.reload42 = load i1, i1* %.reg2mem39, align 1
  %8245 = and i64 %169, 8096564248349926720
  %8246 = or i64 -8096564248349926721, %169
  %8247 = sub i64 %8246, -8096564248349926721
  %8248 = and i64 %118, -3407257828920716196
  %8249 = xor i64 %118, -1
  %8250 = xor i64 -3407257828920716196, %8249
  %8251 = and i64 %8250, -3407257828920716196
  %8252 = or i64 %175, 6470151355055315691
  %8253 = and i64 6470151355055315691, %175
  %8254 = xor i64 6470151355055315691, %175
  %8255 = or i64 %8253, %8254
  %8256 = xor i64 %8255, %8245
  %8257 = xor i64 %8256, %8248
  %8258 = xor i64 %8257, %8247
  %8259 = xor i64 %8258, %8252
  %8260 = xor i64 %8259, 7048549103494035549
  %8261 = xor i64 %8260, %8251
  %8262 = add i64 %3588, -1136224179465167522
  %8263 = add i64 -300779300070645122, %3588
  %8264 = add i64 %8263, -835444879394522400
  %8265 = add i64 %42, -7792417395328664379
  %8266 = and i64 -7792417395328664379, %42
  %8267 = or i64 -7792417395328664379, %42
  %8268 = add i64 %8266, %8267
  %8269 = or i64 %58, -6700882673948252620
  %8270 = xor i64 %58, -1
  %8271 = and i64 %8270, 8257753230147408119
  %8272 = and i64 %58, -8257753230147408120
  %8273 = or i64 %8271, %8272
  %8274 = xor i64 -3343711091820857661, %8273
  %8275 = xor i64 %58, -1
  %8276 = or i64 6700882673948252619, %8275
  %8277 = xor i64 %8276, -1
  %8278 = and i64 %8277, -1
  %8279 = or i64 %8274, %8278
  %8280 = xor i64 %8268, %8269
  %8281 = xor i64 %8280, %8279
  %8282 = xor i64 %8281, %8262
  %8283 = xor i64 %8282, 6614943236717976565
  %8284 = xor i64 %8283, %8264
  %8285 = xor i64 %8284, %8265
  %8286 = mul i64 %8261, %8285
  %8287 = trunc i64 %8286 to i1
  %8288 = or i1 %.reload42, %8287
  %8289 = and i1 %.reload42, true
  %8290 = sub i1 %8288, %8289
  %.reload52 = load i1, i1* %.reg2mem48, align 1
  %8291 = or i64 %106, -3160590178755189614
  %8292 = and i64 -3160590178755189614, %106
  %8293 = xor i64 -3160590178755189614, %106
  %8294 = or i64 %8292, %8293
  %8295 = and i64 %326, 3282184008503545504
  %8296 = or i64 -3282184008503545505, %326
  %8297 = sub i64 %8296, -3282184008503545505
  %8298 = xor i64 %8295, %8297
  %8299 = xor i64 %8298, %8294
  %8300 = xor i64 %8299, %8291
  %8301 = xor i64 %8300, 154606430031387109
  %8302 = or i64 %171, -944054680974264486
  %8303 = xor i64 %171, -1
  %8304 = and i64 %8303, -7911880695439359476
  %8305 = and i64 %171, 7911880695439359475
  %8306 = or i64 %8304, %8305
  %8307 = xor i64 6977572437721019734, %8306
  %8308 = xor i64 %171, -1
  %8309 = or i64 944054680974264485, %8308
  %8310 = xor i64 %8309, -1
  %8311 = and i64 %8310, -1
  %8312 = or i64 %8307, %8311
  %8313 = and i64 %40, 2173291973190529664
  %8314 = xor i64 %40, -1
  %8315 = or i64 -2173291973190529665, %8314
  %8316 = xor i64 %8315, -1
  %8317 = and i64 %8316, -1
  %8318 = xor i64 %8317, %8302
  %8319 = xor i64 %8318, %8313
  %8320 = xor i64 %8319, %8312
  %8321 = xor i64 %8320, 5210632870010321901
  %8322 = mul i64 %8301, %8321
  %8323 = trunc i64 %8322 to i1
  %8324 = xor i1 %.reload52, %8323
  %8325 = xor i1 %8324, true
  %8326 = and i1 %8290, %8325
  %8327 = add i1 %8326, %8324
  %8328 = xor i1 %8327, true
  %8329 = add i64 %1428, -5716629846903473305
  %8330 = add i64 2402694796541380447, %1428
  %8331 = add i64 %8330, -8119324643444853752
  %8332 = and i64 %387, 5909821298001454141
  %8333 = xor i64 %387, -1
  %8334 = xor i64 5909821298001454141, %8333
  %8335 = and i64 %8334, 5909821298001454141
  %8336 = xor i64 %8331, %8329
  %8337 = xor i64 %8336, %8335
  %8338 = xor i64 %8337, %8332
  %8339 = xor i64 %8338, -7207997817226792689
  %8340 = and i64 %253, 7727779622782060791
  %8341 = xor i64 %253, -1
  %8342 = xor i64 7727779622782060791, %8341
  %8343 = and i64 %8342, 7727779622782060791
  %8344 = add i64 %52, -6978154059374232596
  %8345 = sub i64 0, %52
  %8346 = sub i64 -6978154059374232596, %8345
  %8347 = and i64 %36, 6828492277524597374
  %8348 = or i64 -6828492277524597375, %36
  %8349 = sub i64 %8348, -6828492277524597375
  %8350 = xor i64 %8349, %8344
  %8351 = xor i64 %8350, %8346
  %8352 = xor i64 %8351, %8340
  %8353 = xor i64 %8352, %8343
  %8354 = xor i64 %8353, %8347
  %8355 = xor i64 %8354, 3166590144973430255
  %8356 = mul i64 %8339, %8355
  %8357 = trunc i64 %8356 to i1
  %8358 = and i1 %8328, %8357
  %8359 = xor i1 %8358, true
  %8360 = and i1 %8244, %8359
  %8361 = add i1 %8360, %8358
  %8362 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 16
  %8363 = load i32, i32* %8362, align 4
  %8364 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %8365 = load i32, i32* %8364, align 4
  %8366 = add i32 %8363, %8365
  store i32 %8366, i32* %dispatcher, align 4
  store i1 %8361, i1* %.reg2mem204, align 1
  %8367 = load i8*, i8** %394, align 8
  %8368 = load i8, i8* %8367, align 1
  %8369 = mul i8 %8368, 2
  %8370 = mul i8 %8368, 2
  %8371 = sub i8 0, %8370
  %8372 = sub i8 2, %8371
  %8373 = mul i8 %8369, %8372
  %8374 = srem i8 %8373, 4
  %8375 = icmp eq i8 %8374, 0
  %8376 = mul i8 %8368, %8368
  %8377 = add i8 %8376, %8368
  %8378 = srem i8 %8377, 2
  %8379 = icmp eq i8 %8378, 0
  %8380 = or i1 %8375, %8379
  %8381 = or i64 %336, 6879498948231863929
  %8382 = xor i64 %336, -1
  %8383 = and i64 %8382, -5912198737139375708
  %8384 = and i64 %336, 5912198737139375707
  %8385 = or i64 %8383, %8384
  %8386 = xor i64 -969605107462963235, %8385
  %8387 = xor i64 %336, -1
  %8388 = or i64 -6879498948231863930, %8387
  %8389 = xor i64 %8388, -1
  %8390 = and i64 %8389, -1
  %8391 = or i64 %8386, %8390
  %8392 = or i64 %50, -1037830441790584153
  %8393 = and i64 -1037830441790584153, %50
  %8394 = xor i64 -1037830441790584153, %50
  %8395 = or i64 %8393, %8394
  %8396 = add i64 %4826, -2725630029285139954
  %8397 = xor i64 -2725630029285139954, %4826
  %8398 = and i64 -2725630029285139954, %4826
  %8399 = mul i64 2, %8398
  %8400 = add i64 %8397, %8399
  %8401 = xor i64 3610173357069817907, %8400
  %8402 = xor i64 %8401, %8392
  %8403 = xor i64 %8402, %8395
  %8404 = xor i64 %8403, %8396
  %8405 = xor i64 %8404, %8381
  %8406 = xor i64 %8405, %8391
  %8407 = add i64 %44, -2498103695085178825
  %8408 = sub i64 0, %44
  %8409 = add i64 2498103695085178825, %8408
  %8410 = sub i64 0, %8409
  %8411 = or i64 %56, 9036623311329774646
  %8412 = xor i64 %56, -1
  %8413 = and i64 %8412, -7074851034447012857
  %8414 = and i64 %56, 7074851034447012856
  %8415 = or i64 %8413, %8414
  %8416 = xor i64 -2253597025903292367, %8415
  %8417 = xor i64 %56, -1
  %8418 = or i64 -9036623311329774647, %8417
  %8419 = xor i64 %8418, -1
  %8420 = and i64 %8419, -1
  %8421 = or i64 %8416, %8420
  %8422 = or i64 %3431, 8206187615861441152
  %8423 = and i64 8206187615861441152, %3431
  %8424 = xor i64 8206187615861441152, %3431
  %8425 = or i64 %8423, %8424
  %8426 = xor i64 2162534162754257067, %8411
  %8427 = xor i64 %8426, %8407
  %8428 = xor i64 %8427, %8425
  %8429 = xor i64 %8428, %8421
  %8430 = xor i64 %8429, %8422
  %8431 = xor i64 %8430, %8410
  %8432 = mul i64 %8406, %8431
  %8433 = trunc i64 %8432 to i32
  %8434 = select i1 %8380, i32 595012125, i32 %8433
  %8435 = xor i32 %8434, 12
  store i32 %8435, i32* %35, align 4
  %8436 = call i8** @bf4367541783002168146(i32* %35)
  %8437 = load i8*, i8** %8436, align 8
  indirectbr i8* %8437, [label %loopEnd, label %8123]

codeRepl3:                                        ; preds = %codeRepl3, %loopStart
  %lt.cast19 = bitcast i1* %.loc4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast19)
  %lt.cast20 = bitcast i1* %.loc5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast20)
  %lt.cast21 = bitcast i1* %.loc6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast21)
  %lt.cast22 = bitcast i1* %.loc7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast22)
  %lt.cast23 = bitcast i1* %.loc8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast23)
  %lt.cast24 = bitcast i1* %.loc9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast24)
  %lt.cast25 = bitcast i1* %.loc10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  store i64 1996855465712537080, i64* %1256, align 8
  %8438 = call i8** @lk4104490460174343886(i64* %1256)
  %8439 = load i8*, i8** %8438, align 8
  %8440 = bitcast i8* %8439 to i1 (i1, i1, i1, i32, i32, i1*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.reload51 = load i1, i1* %.reg2mem48, align 1
  %.reload82 = load i1, i1* %.reg2mem81, align 1
  %.reload85 = load i1, i1* %.reg2mem84, align 1
  %.reload121 = load i32, i32* %.reg2mem118, align 4
  %.reload124 = load i32, i32* %.reg2mem122, align 4
  %targetBlock11 = call i1 %8440(i1 %.reload82, i1 %.reload85, i1 %.reload51, i32 %.reload121, i32 %.reload124, i1* %.loc4, i1* %.loc5, i1* %.loc6, i1* %.loc7, i1* %.loc8, i1* %.loc9, i1* %.loc10)
  %.reload12 = load i1, i1* %.loc4, align 1
  store i1 %.reload12, i1* %.reload12.reg2mem, align 1
  %.reload13 = load i1, i1* %.loc5, align 1
  store i1 %.reload13, i1* %.reload13.reg2mem, align 1
  %.reload14 = load i1, i1* %.loc6, align 1
  store i1 %.reload14, i1* %.reload14.reg2mem, align 1
  %.reload15 = load i1, i1* %.loc7, align 1
  store i1 %.reload15, i1* %.reload15.reg2mem, align 1
  %.reload16 = load i1, i1* %.loc8, align 1
  store i1 %.reload16, i1* %.reload16.reg2mem, align 1
  %.reload17 = load i1, i1* %.loc9, align 1
  store i1 %.reload17, i1* %.reload17.reg2mem, align 1
  %.reload18 = load i1, i1* %.loc10, align 1
  store i1 %.reload18, i1* %.reload18.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast19)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast20)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast21)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast22)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast23)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast24)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  %8441 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 22
  %8442 = load i32, i32* %8441, align 4
  %8443 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %8444 = load i32, i32* %8443, align 4
  %8445 = sub i32 %8442, %8444
  %8446 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %8447 = load i32, i32* %8446, align 4
  %8448 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %8449 = load i32, i32* %8448, align 4
  %8450 = srem i32 %8447, %8449
  %8451 = select i1 %targetBlock11, i32 %8445, i32 %8450
  store i32 %8451, i32* %dispatcher, align 4
  %8452 = load i8*, i8** %49, align 8
  %8453 = load i8, i8* %8452, align 1
  %8454 = mul i8 %8453, 2
  %8455 = mul i8 %8453, 2
  %8456 = add i8 2, %8455
  %8457 = mul i8 %8454, %8456
  %8458 = srem i8 %8457, 4
  %8459 = icmp eq i8 %8458, 0
  %8460 = mul i8 %8453, %8453
  %8461 = add i8 %8460, %8453
  %8462 = srem i8 %8461, 2
  %8463 = icmp eq i8 %8462, 0
  %8464 = xor i1 %8459, true
  %8465 = and i1 %8464, false
  %8466 = and i1 %8459, true
  %8467 = or i1 %8465, %8466
  %8468 = add i64 %110, 8950566773170441665
  %8469 = add i64 79256265992508352, %110
  %8470 = sub i64 %8469, -8871310507177933313
  %8471 = or i64 %276, 4690397847551913432
  %8472 = xor i64 %276, -1
  %8473 = and i64 %8472, -3562689538579743831
  %8474 = and i64 %276, 3562689538579743830
  %8475 = or i64 %8473, %8474
  %8476 = xor i64 -8099324531130067343, %8475
  %8477 = xor i64 %276, -1
  %8478 = or i64 -4690397847551913433, %8477
  %8479 = xor i64 %8478, -1
  %8480 = and i64 %8479, -1
  %8481 = or i64 %8476, %8480
  %8482 = or i64 %36, 4769147444156183402
  %8483 = xor i64 %36, -1
  %8484 = and i64 %8483, -5815378593836444491
  %8485 = and i64 %36, 5815378593836444490
  %8486 = or i64 %8484, %8485
  %8487 = xor i64 -1340676652827154465, %8486
  %8488 = xor i64 %36, -1
  %8489 = or i64 -4769147444156183403, %8488
  %8490 = xor i64 %8489, -1
  %8491 = and i64 %8490, -1
  %8492 = or i64 %8487, %8491
  %8493 = xor i64 %8492, -2923597343228036189
  %8494 = xor i64 %8493, %8468
  %8495 = xor i64 %8494, %8470
  %8496 = xor i64 %8495, %8471
  %8497 = xor i64 %8496, %8481
  %8498 = xor i64 %8497, %8482
  %8499 = or i64 %334, 6031104260092619690
  %8500 = xor i64 %334, -1
  %8501 = and i64 %8500, 6188497583265072683
  %8502 = and i64 %334, -6188497583265072684
  %8503 = or i64 %8501, %8502
  %8504 = xor i64 455774633875647873, %8503
  %8505 = xor i64 %334, -1
  %8506 = or i64 -6031104260092619691, %8505
  %8507 = xor i64 %8506, -1
  %8508 = and i64 %8507, -1
  %8509 = or i64 %8504, %8508
  %8510 = or i64 %278, 6962066440964346352
  %8511 = xor i64 %278, -1
  %8512 = and i64 6962066440964346352, %8511
  %8513 = add i64 %8512, %278
  %8514 = xor i64 %8509, %8499
  %8515 = xor i64 %8514, -8104562161657573365
  %8516 = xor i64 %8515, %8510
  %8517 = xor i64 %8516, %8513
  %8518 = mul i64 %8498, %8517
  %8519 = trunc i64 %8518 to i1
  %8520 = xor i1 %8463, %8519
  %8521 = and i1 %8520, false
  %8522 = and i1 %8463, true
  %8523 = or i1 %8521, %8522
  %8524 = xor i1 %8467, %8523
  %8525 = xor i1 %8459, true
  %8526 = xor i1 %8463, true
  %8527 = or i1 %8525, %8526
  %8528 = xor i1 %8527, true
  %8529 = and i1 %8528, true
  %8530 = or i1 %8524, %8529
  %8531 = select i1 %8530, i32 595012130, i32 595012113
  %8532 = xor i32 %8531, -1349527141
  %8533 = xor i32 %8532, -1349527128
  store i32 %8533, i32* %35, align 4
  %8534 = call i8** @bf4367541783002168146(i32* %35)
  %8535 = load i8*, i8** %8534, align 8
  indirectbr i8* %8535, [label %loopEnd, label %codeRepl3]

codeRepl26:                                       ; preds = %codeRepl26, %loopStart
  %lt.cast80 = bitcast i64* %.loc27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast80)
  %lt.cast81 = bitcast i1* %.loc28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast81)
  %lt.cast82 = bitcast i64* %.loc29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast82)
  %lt.cast83 = bitcast i1* %.loc30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast83)
  %lt.cast84 = bitcast i1* %.loc31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast84)
  %lt.cast85 = bitcast i1* %.loc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast85)
  %lt.cast86 = bitcast i1* %.loc33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast86)
  %lt.cast87 = bitcast i1* %.loc34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast87)
  %lt.cast88 = bitcast i1* %.loc35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast88)
  %lt.cast89 = bitcast i1* %.loc36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast89)
  %lt.cast90 = bitcast i1* %.loc37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast90)
  %lt.cast91 = bitcast i1* %.loc38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast91)
  %lt.cast92 = bitcast i1* %.loc39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast92)
  %lt.cast93 = bitcast i1* %.loc40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast93)
  %lt.cast94 = bitcast i1* %.loc41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast94)
  %lt.cast95 = bitcast i1* %.loc42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast95)
  %lt.cast96 = bitcast i1* %.loc43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast96)
  %lt.cast97 = bitcast i1* %.loc44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast97)
  %lt.cast98 = bitcast i1* %.loc45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast98)
  %lt.cast99 = bitcast i1* %.loc46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast99)
  %lt.cast100 = bitcast i1* %.loc47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast100)
  %lt.cast101 = bitcast i1* %.loc48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast101)
  %lt.cast102 = bitcast i1* %.loc49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast102)
  %lt.cast103 = bitcast i1* %.loc50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast103)
  %lt.cast104 = bitcast i1* %.loc51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast104)
  %lt.cast105 = bitcast i1* %.loc52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast105)
  store i64 1996855465712537072, i64* %1256, align 8
  %8536 = call i8** @lk4104490460174343886(i64* %1256)
  %8537 = load i8*, i8** %8536, align 8
  %8538 = bitcast i8* %8537 to i1 (i1, i1, i1, i1, i1, i1, i1, i1, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.reload41 = load i1, i1* %.reg2mem39, align 1
  %.reload50 = load i1, i1* %.reg2mem48, align 1
  %.reload12.reload91 = load i1, i1* %.reload12.reg2mem, align 1
  %.reload14.reload93 = load i1, i1* %.reload14.reg2mem, align 1
  %.reload15.reload95 = load i1, i1* %.reload15.reg2mem, align 1
  %.reload16.reload96 = load i1, i1* %.reload16.reg2mem, align 1
  %.reload17.reload97 = load i1, i1* %.reload17.reg2mem, align 1
  %.reload18.reload = load i1, i1* %.reload18.reg2mem, align 1
  %targetBlock53 = call i1 %8538(i1 %.reload16.reload96, i1 %.reload17.reload97, i1 %.reload15.reload95, i1 %.reload14.reload93, i1 %.reload12.reload91, i1 %.reload41, i1 %.reload50, i1 %.reload18.reload, i64* %.loc27, i1* %.loc28, i64* %.loc29, i1* %.loc30, i1* %.loc31, i1* %.loc32, i1* %.loc33, i1* %.loc34, i1* %.loc35, i1* %.loc36, i1* %.loc37, i1* %.loc38, i1* %.loc39, i1* %.loc40, i1* %.loc41, i1* %.loc42, i1* %.loc43, i1* %.loc44, i1* %.loc45, i1* %.loc46, i1* %.loc47, i1* %.loc48, i1* %.loc49, i1* %.loc50, i1* %.loc51, i1* %.loc52)
  %.reload54 = load i64, i64* %.loc27, align 8
  %.reload55 = load i1, i1* %.loc28, align 1
  %.reload56 = load i64, i64* %.loc29, align 8
  %.reload57 = load i1, i1* %.loc30, align 1
  %.reload58 = load i1, i1* %.loc31, align 1
  %.reload59 = load i1, i1* %.loc32, align 1
  %.reload60 = load i1, i1* %.loc33, align 1
  %.reload61 = load i1, i1* %.loc34, align 1
  %.reload62 = load i1, i1* %.loc35, align 1
  %.reload63 = load i1, i1* %.loc36, align 1
  %.reload64 = load i1, i1* %.loc37, align 1
  %.reload65 = load i1, i1* %.loc38, align 1
  %.reload66 = load i1, i1* %.loc39, align 1
  %.reload67 = load i1, i1* %.loc40, align 1
  %.reload68 = load i1, i1* %.loc41, align 1
  %.reload69 = load i1, i1* %.loc42, align 1
  %.reload70 = load i1, i1* %.loc43, align 1
  %.reload71 = load i1, i1* %.loc44, align 1
  %.reload72 = load i1, i1* %.loc45, align 1
  %.reload73 = load i1, i1* %.loc46, align 1
  %.reload74 = load i1, i1* %.loc47, align 1
  %.reload75 = load i1, i1* %.loc48, align 1
  %.reload76 = load i1, i1* %.loc49, align 1
  %.reload77 = load i1, i1* %.loc50, align 1
  %.reload78 = load i1, i1* %.loc51, align 1
  %.reload79 = load i1, i1* %.loc52, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast80)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast81)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast82)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast83)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast84)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast85)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast86)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast87)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast88)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast89)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast90)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast91)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast92)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast93)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast94)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast95)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast96)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast97)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast98)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast99)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast100)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast101)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast102)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast103)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast104)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast105)
  %8539 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 26
  %8540 = load i32, i32* %8539, align 4
  %8541 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %8542 = load i32, i32* %8541, align 4
  %8543 = srem i32 %8540, %8542
  %8544 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 21
  %8545 = load i32, i32* %8544, align 4
  %8546 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %8547 = load i32, i32* %8546, align 4
  %8548 = srem i32 %8545, %8547
  %8549 = select i1 %targetBlock53, i32 %8543, i32 %8548
  store i32 %8549, i32* %dispatcher, align 4
  store i1 %.reload67, i1* %.reg2mem184, align 1
  store i1 %.reload70, i1* %.reg2mem186, align 1
  store i1 %.reload71, i1* %.reg2mem188, align 1
  store i1 %.reload72, i1* %.reg2mem191, align 1
  store i1 %.reload73, i1* %.reg2mem193, align 1
  store i1 %.reload76, i1* %.reg2mem195, align 1
  store i1 %.reload78, i1* %.reg2mem200, align 1
  store i1 %.reload79, i1* %.reg2mem202, align 1
  %8550 = load i8*, i8** %213, align 8
  %8551 = load i8, i8* %8550, align 1
  %8552 = mul i8 %8551, 2
  %8553 = mul i8 %8551, 2
  %8554 = add i8 2, %8553
  %8555 = mul i8 %8552, %8554
  %8556 = srem i8 %8555, 4
  %8557 = icmp eq i8 %8556, 0
  %8558 = mul i8 %8551, %8551
  %8559 = mul i8 %8558, %8551
  %8560 = add i8 %8559, %8551
  %8561 = srem i8 %8560, 2
  %8562 = icmp eq i8 %8561, 0
  %8563 = and i1 %8557, %8562
  %8564 = select i1 %8563, i32 595012125, i32 595012113
  %8565 = xor i32 %8564, -1
  %8566 = and i32 %8565, 684208800
  %8567 = and i32 %8564, -684208801
  %8568 = or i32 %8566, %8567
  %8569 = xor i32 %8568, 684208812
  store i32 %8569, i32* %35, align 4
  %8570 = call i8** @bf4367541783002168146(i32* %35)
  %8571 = load i8*, i8** %8570, align 8
  indirectbr i8* %8571, [label %loopEnd, label %codeRepl26]

codeRepl106:                                      ; preds = %codeRepl106, %loopStart
  %lt.cast159 = bitcast i64* %.loc107 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast159)
  %lt.cast160 = bitcast i1* %.loc108 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast160)
  %lt.cast161 = bitcast i64* %.loc109 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast161)
  %lt.cast162 = bitcast i1* %.loc110 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast162)
  %lt.cast163 = bitcast i1* %.loc111 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast163)
  %lt.cast164 = bitcast i1* %.loc112 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast164)
  %lt.cast165 = bitcast i1* %.loc113 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast165)
  %lt.cast166 = bitcast i1* %.loc114 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast166)
  %lt.cast167 = bitcast i1* %.loc115 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast167)
  %lt.cast168 = bitcast i1* %.loc116 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast168)
  %lt.cast169 = bitcast i1* %.loc117 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast169)
  %lt.cast170 = bitcast i1* %.loc118 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast170)
  %lt.cast171 = bitcast i1* %.loc119 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast171)
  %lt.cast172 = bitcast i1* %.loc120 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast172)
  %lt.cast173 = bitcast i1* %.loc121 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast173)
  %lt.cast174 = bitcast i1* %.loc122 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast174)
  %lt.cast175 = bitcast i1* %.loc123 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast175)
  %lt.cast176 = bitcast i1* %.loc124 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast176)
  %lt.cast177 = bitcast i1* %.loc125 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast177)
  %lt.cast178 = bitcast i1* %.loc126 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast178)
  %lt.cast179 = bitcast i1* %.loc127 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast179)
  %lt.cast180 = bitcast i1* %.loc128 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast180)
  %lt.cast181 = bitcast i1* %.loc129 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast181)
  %lt.cast182 = bitcast i1* %.loc130 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast182)
  %lt.cast183 = bitcast i1* %.loc131 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast183)
  %lt.cast184 = bitcast i1* %.loc132 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast184)
  store i64 1996855465712537073, i64* %1256, align 8
  %8572 = call i8** @lk4104490460174343886(i64* %1256)
  %8573 = load i8*, i8** %8572, align 8
  %8574 = bitcast i8* %8573 to void (i1, i1, i1, i1, i1, i1, i1, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.reload40 = load i1, i1* %.reg2mem39, align 1
  %.reload49 = load i1, i1* %.reg2mem48, align 1
  %.reload12.reload90 = load i1, i1* %.reload12.reg2mem, align 1
  %.reload14.reload92 = load i1, i1* %.reload14.reg2mem, align 1
  %.reload15.reload94 = load i1, i1* %.reload15.reg2mem, align 1
  %.reload16.reload = load i1, i1* %.reload16.reg2mem, align 1
  %.reload17.reload = load i1, i1* %.reload17.reg2mem, align 1
  call void %8574(i1 %.reload16.reload, i1 %.reload17.reload, i1 %.reload15.reload94, i1 %.reload14.reload92, i1 %.reload12.reload90, i1 %.reload40, i1 %.reload49, i64* %.loc107, i1* %.loc108, i64* %.loc109, i1* %.loc110, i1* %.loc111, i1* %.loc112, i1* %.loc113, i1* %.loc114, i1* %.loc115, i1* %.loc116, i1* %.loc117, i1* %.loc118, i1* %.loc119, i1* %.loc120, i1* %.loc121, i1* %.loc122, i1* %.loc123, i1* %.loc124, i1* %.loc125, i1* %.loc126, i1* %.loc127, i1* %.loc128, i1* %.loc129, i1* %.loc130, i1* %.loc131, i1* %.loc132)
  %.reload133 = load i64, i64* %.loc107, align 8
  %.reload134 = load i1, i1* %.loc108, align 1
  %.reload135 = load i64, i64* %.loc109, align 8
  %.reload136 = load i1, i1* %.loc110, align 1
  %.reload137 = load i1, i1* %.loc111, align 1
  %.reload138 = load i1, i1* %.loc112, align 1
  %.reload139 = load i1, i1* %.loc113, align 1
  %.reload140 = load i1, i1* %.loc114, align 1
  %.reload141 = load i1, i1* %.loc115, align 1
  %.reload142 = load i1, i1* %.loc116, align 1
  %.reload143 = load i1, i1* %.loc117, align 1
  %.reload144 = load i1, i1* %.loc118, align 1
  %.reload145 = load i1, i1* %.loc119, align 1
  %.reload146 = load i1, i1* %.loc120, align 1
  %.reload147 = load i1, i1* %.loc121, align 1
  %.reload148 = load i1, i1* %.loc122, align 1
  %.reload149 = load i1, i1* %.loc123, align 1
  %.reload150 = load i1, i1* %.loc124, align 1
  %.reload151 = load i1, i1* %.loc125, align 1
  %.reload152 = load i1, i1* %.loc126, align 1
  %.reload153 = load i1, i1* %.loc127, align 1
  %.reload154 = load i1, i1* %.loc128, align 1
  %.reload155 = load i1, i1* %.loc129, align 1
  %.reload156 = load i1, i1* %.loc130, align 1
  %.reload157 = load i1, i1* %.loc131, align 1
  %.reload158 = load i1, i1* %.loc132, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast159)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast160)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast161)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast162)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast163)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast164)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast165)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast166)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast167)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast168)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast169)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast170)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast171)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast172)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast173)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast174)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast175)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast176)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast177)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast178)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast179)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast180)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast181)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast182)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast183)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast184)
  %8575 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %8576 = load i32, i32* %8575, align 4
  %8577 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 14
  %8578 = load i32, i32* %8577, align 4
  %8579 = add i32 %8576, %8578
  store i32 %8579, i32* %dispatcher, align 4
  store i1 %.reload146, i1* %.reg2mem184, align 1
  store i1 %.reload149, i1* %.reg2mem186, align 1
  store i1 %.reload150, i1* %.reg2mem188, align 1
  store i1 %.reload151, i1* %.reg2mem191, align 1
  store i1 %.reload152, i1* %.reg2mem193, align 1
  store i1 %.reload155, i1* %.reg2mem195, align 1
  store i1 %.reload157, i1* %.reg2mem200, align 1
  store i1 %.reload158, i1* %.reg2mem202, align 1
  %8580 = load i8*, i8** %97, align 8
  %8581 = load i8, i8* %8580, align 1
  %8582 = mul i8 %8581, %8581
  %8583 = add i8 %8582, %8581
  %8584 = mul i8 %8583, 3
  %8585 = srem i8 %8584, 2
  %8586 = icmp eq i8 %8585, 0
  %8587 = mul i8 %8581, %8581
  %8588 = add i8 %8587, 51
  %8589 = add i8 %8588, %8581
  %8590 = sub i8 %8589, 51
  %8591 = add i64 %181, 1243712904666273449
  %8592 = sub i64 0, %181
  %8593 = sub i64 1243712904666273449, %8592
  %8594 = add i64 %253, 5685256865270785742
  %8595 = add i64 6895559974811334254, %253
  %8596 = sub i64 %8595, 1210303109540548512
  %8597 = and i64 %50, 3541993080833513496
  %8598 = xor i64 %50, -1
  %8599 = xor i64 3541993080833513496, %8598
  %8600 = and i64 %8599, 3541993080833513496
  %8601 = xor i64 %8597, %8591
  %8602 = xor i64 %8601, 5227798674568405279
  %8603 = xor i64 %8602, %8593
  %8604 = xor i64 %8603, %8594
  %8605 = xor i64 %8604, %8596
  %8606 = xor i64 %8605, %8600
  %8607 = add i64 %90, 8937165314887870052
  %8608 = sub i64 0, %90
  %8609 = add i64 -8937165314887870052, %8608
  %8610 = sub i64 0, %8609
  %8611 = and i64 %3153, 1538115487561243283
  %8612 = xor i64 %3153, -1
  %8613 = xor i64 1538115487561243283, %8612
  %8614 = and i64 %8613, 1538115487561243283
  %8615 = and i64 %92, -478741716766060584
  %8616 = xor i64 %92, -1
  %8617 = xor i64 -478741716766060584, %8616
  %8618 = and i64 %8617, -478741716766060584
  %8619 = xor i64 %8610, %8607
  %8620 = xor i64 %8619, %8618
  %8621 = xor i64 %8620, %8614
  %8622 = xor i64 %8621, %8615
  %8623 = xor i64 %8622, %8611
  %8624 = xor i64 %8623, 4313101122928883134
  %8625 = mul i64 %8606, %8624
  %8626 = trunc i64 %8625 to i8
  %8627 = srem i8 %8590, %8626
  %8628 = icmp eq i8 %8627, 0
  %8629 = and i1 %8586, %8628
  %8630 = and i64 %332, -606012209748059097
  %8631 = or i64 606012209748059096, %332
  %8632 = sub i64 %8631, 606012209748059096
  %8633 = and i64 %1428, 6518057043737735864
  %8634 = or i64 -6518057043737735865, %1428
  %8635 = sub i64 %8634, -6518057043737735865
  %8636 = and i64 %332, 3906966339947648997
  %8637 = xor i64 %332, -1
  %8638 = or i64 -3906966339947648998, %8637
  %8639 = xor i64 %8638, -1
  %8640 = and i64 %8639, -1
  %8641 = xor i64 %8636, %8640
  %8642 = xor i64 %8641, %8633
  %8643 = xor i64 %8642, %8632
  %8644 = xor i64 %8643, %8635
  %8645 = xor i64 %8644, 7037179958046332967
  %8646 = xor i64 %8645, %8630
  %8647 = and i64 %56, 6903185008523602794
  %8648 = xor i64 %56, -1
  %8649 = xor i64 6903185008523602794, %8648
  %8650 = and i64 %8649, 6903185008523602794
  %8651 = add i64 %2342, 8495012564320880115
  %8652 = sub i64 0, %2342
  %8653 = sub i64 8495012564320880115, %8652
  %8654 = add i64 %3, 5527503454485210594
  %8655 = sub i64 0, %3
  %8656 = sub i64 5527503454485210594, %8655
  %8657 = xor i64 %8654, %8651
  %8658 = xor i64 %8657, %8647
  %8659 = xor i64 %8658, %8653
  %8660 = xor i64 %8659, %8650
  %8661 = xor i64 %8660, %8656
  %8662 = xor i64 %8661, -174645223656246704
  %8663 = mul i64 %8646, %8662
  %8664 = trunc i64 %8663 to i32
  %8665 = select i1 %8629, i32 %8664, i32 595012113
  %8666 = xor i32 %8665, -1
  %8667 = and i32 %8666, 1590720077
  %8668 = and i32 %8665, -1590720078
  %8669 = or i32 %8667, %8668
  %8670 = xor i32 %8669, 1590720108
  store i32 %8670, i32* %35, align 4
  %8671 = call i8** @bf4367541783002168146(i32* %35)
  %8672 = load i8*, i8** %8671, align 8
  indirectbr i8* %8672, [label %loopEnd, label %codeRepl106]

8673:                                             ; preds = %8673, %loopStart
  %.reload203 = load i1, i1* %.reg2mem202, align 1
  %.reload201 = load i1, i1* %.reg2mem200, align 1
  %.reload199 = load i1, i1* %.reg2mem195, align 1
  %.reload194 = load i1, i1* %.reg2mem193, align 1
  %.reload192 = load i1, i1* %.reg2mem191, align 1
  %.reload190 = load i1, i1* %.reg2mem188, align 1
  %.reload187 = load i1, i1* %.reg2mem186, align 1
  %.reload185 = load i1, i1* %.reg2mem184, align 1
  store i1 %.reload203, i1* %.reg2mem112, align 1
  store i1 %.reload201, i1* %.reg2mem110, align 1
  store i1 %.reload199, i1* %.reg2mem108, align 1
  store i1 %.reload194, i1* %.reg2mem106, align 1
  store i1 %.reload192, i1* %.reg2mem104, align 1
  store i1 %.reload190, i1* %.reg2mem102, align 1
  store i1 %.reload187, i1* %.reg2mem100, align 1
  store i1 %.reload185, i1* %.reg2mem98, align 1
  %8674 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %8675 = load i32, i32* %8674, align 4
  %8676 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %8677 = load i32, i32* %8676, align 4
  %8678 = sub i32 0, %8677
  %8679 = add i32 %8675, %8678
  store i32 %8679, i32* %dispatcher, align 4
  %8680 = load i8*, i8** %331, align 8
  %8681 = load i8, i8* %8680, align 1
  %8682 = mul i8 %8681, 2
  %8683 = mul i8 %8681, 2
  %8684 = xor i8 2, %8683
  %8685 = and i8 2, %8683
  %8686 = mul i8 2, %8685
  %8687 = add i8 %8684, %8686
  %8688 = mul i8 39, %8687
  %8689 = add i8 23, %8688
  %8690 = mul i8 -105, %8689
  %8691 = add i8 111, %8690
  %8692 = mul i8 %8682, %8691
  %8693 = srem i8 %8692, 4
  %8694 = icmp eq i8 %8693, 0
  %8695 = mul i8 %8681, %8681
  %8696 = mul i8 %8695, %8681
  %8697 = add i8 %8696, %8681
  %8698 = and i64 %332, 6187687813367322539
  %8699 = xor i64 %332, -1
  %8700 = or i64 -6187687813367322540, %8699
  %8701 = xor i64 %8700, -1
  %8702 = and i64 %8701, -1
  %8703 = or i64 %3800, -5442562947556720573
  %8704 = xor i64 %3800, -1
  %8705 = and i64 %8704, 6319910855130594907
  %8706 = and i64 %3800, -6319910855130594908
  %8707 = or i64 %8705, %8706
  %8708 = xor i64 -2031980338198315496, %8707
  %8709 = xor i64 %3800, -1
  %8710 = or i64 5442562947556720572, %8709
  %8711 = xor i64 %8710, -1
  %8712 = and i64 %8711, -1
  %8713 = or i64 %8708, %8712
  %8714 = xor i64 %8713, %8702
  %8715 = xor i64 %8714, 1876903687898591143
  %8716 = xor i64 %8715, %8698
  %8717 = xor i64 %8716, %8703
  %8718 = and i64 %179, 6768663587860881736
  %8719 = xor i64 %179, -1
  %8720 = xor i64 6768663587860881736, %8719
  %8721 = and i64 %8720, 6768663587860881736
  %8722 = or i64 %278, 3874153337475919344
  %8723 = and i64 3874153337475919344, %278
  %8724 = xor i64 3874153337475919344, %278
  %8725 = or i64 %8723, %8724
  %8726 = or i64 %94, -1516226378358991067
  %8727 = xor i64 %94, -1
  %8728 = and i64 -1516226378358991067, %8727
  %8729 = add i64 %8728, %94
  %8730 = xor i64 %8725, %8729
  %8731 = xor i64 %8730, %8721
  %8732 = xor i64 %8731, %8722
  %8733 = xor i64 %8732, %8718
  %8734 = xor i64 %8733, 3202858118581162030
  %8735 = xor i64 %8734, %8726
  %8736 = mul i64 %8717, %8735
  %8737 = trunc i64 %8736 to i8
  %8738 = srem i8 %8697, %8737
  %8739 = icmp eq i8 %8738, 0
  %8740 = and i1 %8694, %8739
  %8741 = select i1 %8740, i32 595012128, i32 595012113
  %8742 = add i64 %46, -6194507057785924657
  %8743 = and i64 -6194507057785924657, %46
  %8744 = or i64 -6194507057785924657, %46
  %8745 = add i64 %8743, %8744
  %8746 = add i64 %338, 2607612105528653680
  %8747 = sub i64 0, %338
  %8748 = add i64 -2607612105528653680, %8747
  %8749 = sub i64 0, %8748
  %8750 = add i64 %391, 8416591215627033622
  %8751 = add i64 -5699740101355931353, %391
  %8752 = sub i64 %8751, 4330412756726586641
  %8753 = xor i64 %8746, 6748081047629617031
  %8754 = xor i64 %8753, %8752
  %8755 = xor i64 %8754, %8749
  %8756 = xor i64 %8755, %8745
  %8757 = xor i64 %8756, %8742
  %8758 = xor i64 %8757, %8750
  %8759 = or i64 %116, 6637601999842731983
  %8760 = xor i64 %116, -1
  %8761 = and i64 6637601999842731983, %8760
  %8762 = add i64 %8761, %116
  %8763 = add i64 %90, -1896060427866851203
  %8764 = add i64 3327036745274858613, %90
  %8765 = add i64 %8764, -5223097173141709816
  %8766 = and i64 %322, 6197759841303349368
  %8767 = or i64 -6197759841303349369, %322
  %8768 = sub i64 %8767, -6197759841303349369
  %8769 = xor i64 %8765, %8768
  %8770 = xor i64 %8769, %8763
  %8771 = xor i64 %8770, %8759
  %8772 = xor i64 %8771, %8766
  %8773 = xor i64 %8772, %8762
  %8774 = xor i64 %8773, -7392554104961931129
  %8775 = mul i64 %8758, %8774
  %8776 = trunc i64 %8775 to i32
  %8777 = xor i32 %8741, %8776
  store i32 %8777, i32* %35, align 4
  %8778 = call i8** @bf4367541783002168146(i32* %35)
  %8779 = load i8*, i8** %8778, align 8
  indirectbr i8* %8779, [label %loopEnd, label %8673]

codeRepl185:                                      ; preds = %codeRepl185, %loopStart
  store i64 1996855465712537078, i64* %1256, align 8
  %8780 = call i8** @lk4104490460174343886(i64* %1256)
  %8781 = load i8*, i8** %8780, align 8
  %8782 = bitcast i8* %8781 to void ()*
  call void %8782()
  %8783 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 16
  %8784 = load i32, i32* %8783, align 4
  %8785 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %8786 = load i32, i32* %8785, align 4
  %8787 = add i32 %8784, %8786
  store i32 %8787, i32* %dispatcher, align 4
  %.reload12.reload = load i1, i1* %.reload12.reg2mem, align 1
  %.reload13.reload = load i1, i1* %.reload13.reg2mem, align 1
  %.reload14.reload = load i1, i1* %.reload14.reg2mem, align 1
  %.reload15.reload = load i1, i1* %.reload15.reg2mem, align 1
  %.reload99 = load i1, i1* %.reg2mem98, align 1
  %.reload101 = load i1, i1* %.reg2mem100, align 1
  %.reload103 = load i1, i1* %.reg2mem102, align 1
  %.reload105 = load i1, i1* %.reg2mem104, align 1
  %.reload107 = load i1, i1* %.reg2mem106, align 1
  %.reload109 = load i1, i1* %.reg2mem108, align 1
  %.reload111 = load i1, i1* %.reg2mem110, align 1
  %.reload113 = load i1, i1* %.reg2mem112, align 1
  store i1 %.reload113, i1* %.reg2mem204, align 1
  %8788 = load i8*, i8** %51, align 8
  %8789 = load i8, i8* %8788, align 1
  %8790 = mul i8 %8789, 2
  %8791 = and i64 %4586, -4118149690579729247
  %8792 = or i64 4118149690579729246, %4586
  %8793 = sub i64 %8792, 4118149690579729246
  %8794 = and i64 %173, -6471667623665704075
  %8795 = xor i64 %173, -1
  %8796 = or i64 6471667623665704074, %8795
  %8797 = xor i64 %8796, -1
  %8798 = and i64 %8797, -1
  %8799 = xor i64 %8798, %8794
  %8800 = xor i64 %8799, %8791
  %8801 = xor i64 %8800, -2398438185178128987
  %8802 = xor i64 %8801, %8793
  %8803 = or i64 %58, -4200638736988656486
  %8804 = xor i64 %58, -1
  %8805 = and i64 %8804, 6850931417358493849
  %8806 = and i64 %58, -6850931417358493850
  %8807 = or i64 %8805, %8806
  %8808 = xor i64 -7302814941957012477, %8807
  %8809 = xor i64 %58, -1
  %8810 = or i64 4200638736988656485, %8809
  %8811 = xor i64 %8810, -1
  %8812 = and i64 %8811, -1
  %8813 = or i64 %8808, %8812
  %8814 = and i64 %328, 3897936910940576802
  %8815 = xor i64 %328, -1
  %8816 = xor i64 3897936910940576802, %8815
  %8817 = and i64 %8816, 3897936910940576802
  %8818 = or i64 %110, 6550536022547725791
  %8819 = xor i64 %110, -1
  %8820 = and i64 %8819, 3525768382349731917
  %8821 = and i64 %110, -3525768382349731918
  %8822 = or i64 %8820, %8821
  %8823 = xor i64 7639836044893427090, %8822
  %8824 = xor i64 %110, -1
  %8825 = or i64 -6550536022547725792, %8824
  %8826 = xor i64 %8825, -1
  %8827 = and i64 %8826, -1
  %8828 = or i64 %8823, %8827
  %8829 = xor i64 2254779022794294362, %8828
  %8830 = xor i64 %8829, %8803
  %8831 = xor i64 %8830, %8817
  %8832 = xor i64 %8831, %8818
  %8833 = xor i64 %8832, %8813
  %8834 = xor i64 %8833, %8814
  %8835 = mul i64 %8802, %8834
  %8836 = trunc i64 %8835 to i8
  %8837 = mul i8 %8789, %8836
  %8838 = sub i8 0, %8837
  %8839 = and i64 %322, 2841241127832009970
  %8840 = or i64 -2841241127832009971, %322
  %8841 = sub i64 %8840, -2841241127832009971
  %8842 = and i64 %104, -6151256377033218153
  %8843 = xor i64 %104, -1
  %8844 = xor i64 -6151256377033218153, %8843
  %8845 = and i64 %8844, -6151256377033218153
  %8846 = add i64 %5086, -6508676282182626268
  %8847 = and i64 -6508676282182626268, %5086
  %8848 = or i64 -6508676282182626268, %5086
  %8849 = add i64 %8847, %8848
  %8850 = xor i64 %8849, %8846
  %8851 = xor i64 %8850, %8842
  %8852 = xor i64 %8851, -3344924932659766749
  %8853 = xor i64 %8852, %8845
  %8854 = xor i64 %8853, %8839
  %8855 = xor i64 %8854, %8841
  %8856 = add i64 %52, 2458739570138846444
  %8857 = sub i64 0, %52
  %8858 = add i64 -2458739570138846444, %8857
  %8859 = sub i64 0, %8858
  %8860 = add i64 %179, 203431284323234709
  %8861 = sub i64 0, %179
  %8862 = sub i64 203431284323234709, %8861
  %8863 = and i64 %338, 279992632715955289
  %8864 = xor i64 %338, -1
  %8865 = xor i64 279992632715955289, %8864
  %8866 = and i64 %8865, 279992632715955289
  %8867 = xor i64 %8862, %8859
  %8868 = xor i64 %8867, %8866
  %8869 = xor i64 %8868, %8863
  %8870 = xor i64 %8869, 7752107979204181994
  %8871 = xor i64 %8870, %8856
  %8872 = xor i64 %8871, %8860
  %8873 = mul i64 %8855, %8872
  %8874 = trunc i64 %8873 to i8
  %8875 = add i8 %8874, %8838
  %8876 = sub i8 0, %8875
  %8877 = mul i8 %8790, %8876
  %8878 = srem i8 %8877, 4
  %8879 = icmp eq i8 %8878, 0
  %8880 = mul i8 %8789, %8789
  %8881 = sub i8 %8880, 27
  %8882 = add i8 %8881, %8789
  %8883 = add i8 %8882, 27
  %8884 = srem i8 %8883, 2
  %8885 = icmp eq i8 %8884, 0
  %8886 = add i64 %389, 3099029472005128295
  %8887 = and i64 3099029472005128295, %389
  %8888 = or i64 3099029472005128295, %389
  %8889 = add i64 %8887, %8888
  %8890 = or i64 %58, -235776193461473995
  %8891 = xor i64 %58, -1
  %8892 = and i64 -235776193461473995, %8891
  %8893 = add i64 %8892, %58
  %8894 = xor i64 %8890, 6424827638787603805
  %8895 = xor i64 %8894, %8893
  %8896 = xor i64 %8895, %8889
  %8897 = xor i64 %8896, %8886
  %8898 = add i64 %169, 7179119517792342614
  %8899 = add i64 -3723671179570388366, %169
  %8900 = sub i64 %8899, 7543953376346820636
  %8901 = or i64 %338, 663992160762921788
  %8902 = xor i64 %338, -1
  %8903 = and i64 663992160762921788, %8902
  %8904 = add i64 %8903, %338
  %8905 = or i64 %104, -5006005262550951690
  %8906 = xor i64 %104, -1
  %8907 = and i64 -5006005262550951690, %8906
  %8908 = add i64 %8907, %104
  %8909 = xor i64 %8908, %8904
  %8910 = xor i64 %8909, %8905
  %8911 = xor i64 %8910, %8898
  %8912 = xor i64 %8911, %8901
  %8913 = xor i64 %8912, %8900
  %8914 = xor i64 %8913, 5371261210172997365
  %8915 = mul i64 %8897, %8914
  %8916 = trunc i64 %8915 to i1
  %8917 = xor i1 %8879, %8916
  %8918 = xor i1 %8885, true
  %8919 = or i1 %8917, %8918
  %8920 = xor i1 %8919, true
  %8921 = and i1 %8920, true
  %8922 = select i1 %8921, i32 595012146, i32 595012113
  %8923 = xor i32 %8922, 35
  store i32 %8923, i32* %35, align 4
  %8924 = call i8** @bf4367541783002168146(i32* %35)
  %8925 = load i8*, i8** %8924, align 8
  indirectbr i8* %8925, [label %loopEnd, label %codeRepl185]

8926:                                             ; preds = %8926, %loopStart
  %.reload207 = load i1, i1* %.reg2mem204, align 1
  %8927 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 49
  %8928 = load i32, i32* %8927, align 4
  %8929 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %8930 = load i32, i32* %8929, align 4
  %8931 = sub i32 %8928, %8930
  %8932 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 36
  %8933 = load i32, i32* %8932, align 4
  %8934 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %8935 = load i32, i32* %8934, align 4
  %8936 = srem i32 %8933, %8935
  %8937 = select i1 %.reload207, i32 %8931, i32 %8936
  store i32 %8937, i32* %dispatcher, align 4
  %8938 = load i8*, i8** %213, align 8
  %8939 = load i8, i8* %8938, align 1
  %8940 = mul i8 %8939, %8939
  %8941 = sub i8 0, %8940
  %8942 = sub i8 0, %8939
  %8943 = add i8 %8941, %8942
  %8944 = sub i8 0, %8943
  %8945 = mul i8 %8944, 3
  %8946 = srem i8 %8945, 2
  %8947 = and i64 %1428, 8749376049699159781
  %8948 = xor i64 %1428, -1
  %8949 = xor i64 8749376049699159781, %8948
  %8950 = and i64 %8949, 8749376049699159781
  %8951 = and i64 %2865, -3695588496335080204
  %8952 = or i64 3695588496335080203, %2865
  %8953 = sub i64 %8952, 3695588496335080203
  %8954 = add i64 %322, 4664915974694494094
  %8955 = sub i64 0, %322
  %8956 = add i64 -4664915974694494094, %8955
  %8957 = sub i64 0, %8956
  %8958 = xor i64 %8957, %8950
  %8959 = xor i64 %8958, 8432915941824632149
  %8960 = xor i64 %8959, %8951
  %8961 = xor i64 %8960, %8953
  %8962 = xor i64 %8961, %8947
  %8963 = xor i64 %8962, %8954
  %8964 = add i64 %112, -2451879664395612491
  %8965 = xor i64 -2451879664395612491, %112
  %8966 = and i64 -2451879664395612491, %112
  %8967 = mul i64 2, %8966
  %8968 = add i64 %8965, %8967
  %8969 = and i64 %2648, 5425830800932281425
  %8970 = xor i64 %2648, -1
  %8971 = xor i64 5425830800932281425, %8970
  %8972 = and i64 %8971, 5425830800932281425
  %8973 = and i64 %324, 4492981599865998886
  %8974 = xor i64 %324, -1
  %8975 = xor i64 4492981599865998886, %8974
  %8976 = and i64 %8975, 4492981599865998886
  %8977 = xor i64 %8973, %8976
  %8978 = xor i64 %8977, %8969
  %8979 = xor i64 %8978, %8964
  %8980 = xor i64 %8979, %8968
  %8981 = xor i64 %8980, 0
  %8982 = xor i64 %8981, %8972
  %8983 = mul i64 %8963, %8982
  %8984 = trunc i64 %8983 to i8
  %8985 = icmp eq i8 %8946, %8984
  %8986 = mul i8 %8939, %8939
  %8987 = add i8 %8986, %8939
  %8988 = srem i8 %8987, 2
  %8989 = icmp eq i8 %8988, 0
  %8990 = and i1 %8985, %8989
  %8991 = select i1 %8990, i32 595012148, i32 595012113
  %8992 = xor i32 %8991, 37
  store i32 %8992, i32* %35, align 4
  %8993 = call i8** @bf4367541783002168146(i32* %35)
  %8994 = load i8*, i8** %8993, align 8
  indirectbr i8* %8994, [label %loopEnd, label %8926]

codeRepl186:                                      ; preds = %codeRepl186, %loopStart
  %lt.cast190 = bitcast i64* %.loc187 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast190)
  %8995 = and i64 %2648, 2840927357345958566
  %8996 = xor i64 %2648, -1
  %8997 = or i64 -2840927357345958567, %8996
  %8998 = xor i64 %8997, -1
  %8999 = and i64 %8998, -1
  %9000 = and i64 %54, 8057764268711140532
  %9001 = xor i64 %54, -1
  %9002 = xor i64 8057764268711140532, %9001
  %9003 = and i64 %9002, 8057764268711140532
  %9004 = or i64 %96, -7217790042529310280
  %9005 = and i64 -7217790042529310280, %96
  %9006 = xor i64 -7217790042529310280, %96
  %9007 = or i64 %9005, %9006
  %9008 = xor i64 -3794860861352586253, %9000
  %9009 = xor i64 %9008, %8995
  %9010 = xor i64 %9009, %8999
  %9011 = xor i64 %9010, %9003
  %9012 = xor i64 %9011, %9004
  %9013 = xor i64 %9012, %9007
  %9014 = and i64 %48, 2523882058770687812
  %9015 = xor i64 %48, -1
  %9016 = xor i64 2523882058770687812, %9015
  %9017 = and i64 %9016, 2523882058770687812
  %9018 = and i64 %2865, -7038962957504294651
  %9019 = xor i64 %2865, -1
  %9020 = or i64 7038962957504294650, %9019
  %9021 = xor i64 %9020, -1
  %9022 = and i64 %9021, -1
  %9023 = and i64 %322, 4707164960310022091
  %9024 = xor i64 %322, -1
  %9025 = xor i64 4707164960310022091, %9024
  %9026 = and i64 %9025, 4707164960310022091
  %9027 = xor i64 %9022, %9018
  %9028 = xor i64 %9027, %9017
  %9029 = xor i64 %9028, %9014
  %9030 = xor i64 %9029, %9026
  %9031 = xor i64 %9030, 69578524826962590
  %9032 = xor i64 %9031, %9023
  %9033 = mul i64 %9013, %9032
  store i64 %9033, i64* %1256, align 8
  %9034 = call i8** @lk4104490460174343886(i64* %1256)
  %9035 = load i8*, i8** %9034, align 8
  %9036 = bitcast i8* %9035 to i1 (i64, i64*)*
  %.reload9 = load i64, i64* %.reg2mem8, align 8
  %targetBlock188 = call i1 %9036(i64 %.reload9, i64* %.loc187)
  %.reload189 = load i64, i64* %.loc187, align 8
  store i64 %.reload189, i64* %.reload189.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast190)
  %9037 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 30
  %9038 = load i32, i32* %9037, align 4
  %9039 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %9040 = load i32, i32* %9039, align 4
  %9041 = srem i32 %9038, %9040
  %9042 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 19
  %9043 = load i32, i32* %9042, align 4
  %9044 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 18
  %9045 = load i32, i32* %9044, align 4
  %9046 = sub i32 %9043, -740446137
  %9047 = add i32 %9046, %9045
  %9048 = add i32 %9047, -740446137
  %9049 = select i1 %targetBlock188, i32 %9041, i32 %9048
  store i32 %9049, i32* %dispatcher, align 4
  %9050 = load i8*, i8** %331, align 8
  %9051 = load i8, i8* %9050, align 1
  %9052 = and i8 %9051, 1
  %9053 = icmp eq i8 %9052, 0
  %9054 = mul i8 %9051, %9051
  %9055 = add i8 %9054, %9051
  %9056 = add i64 %2342, 1726734752600119711
  %9057 = xor i64 1726734752600119711, %2342
  %9058 = and i64 1726734752600119711, %2342
  %9059 = mul i64 2, %9058
  %9060 = add i64 %9057, %9059
  %9061 = add i64 %3, 4985749278856512596
  %9062 = xor i64 4985749278856512596, %3
  %9063 = and i64 4985749278856512596, %3
  %9064 = mul i64 2, %9063
  %9065 = add i64 %9062, %9064
  %9066 = add i64 %212, 780623342648991567
  %9067 = add i64 7646240928221049003, %212
  %9068 = sub i64 %9067, 6865617585572057436
  %9069 = xor i64 %9056, %9065
  %9070 = xor i64 %9069, -7805684779590805629
  %9071 = xor i64 %9070, %9060
  %9072 = xor i64 %9071, %9066
  %9073 = xor i64 %9072, %9068
  %9074 = xor i64 %9073, %9061
  %9075 = and i64 %48, -3846439440130580088
  %9076 = xor i64 %48, -1
  %9077 = or i64 3846439440130580087, %9076
  %9078 = xor i64 %9077, -1
  %9079 = and i64 %9078, -1
  %9080 = or i64 %56, 2744559082396499940
  %9081 = xor i64 %56, -1
  %9082 = and i64 %9081, 7163958016983268181
  %9083 = and i64 %56, -7163958016983268182
  %9084 = or i64 %9082, %9083
  %9085 = xor i64 5007400448807257265, %9084
  %9086 = xor i64 %56, -1
  %9087 = or i64 -2744559082396499941, %9086
  %9088 = xor i64 %9087, -1
  %9089 = and i64 %9088, -1
  %9090 = or i64 %9085, %9089
  %9091 = or i64 %393, -1231422087465347502
  %9092 = and i64 -1231422087465347502, %393
  %9093 = xor i64 -1231422087465347502, %393
  %9094 = or i64 %9092, %9093
  %9095 = xor i64 %9080, %9090
  %9096 = xor i64 %9095, %9094
  %9097 = xor i64 %9096, %9079
  %9098 = xor i64 %9097, %9091
  %9099 = xor i64 %9098, 5890159098096291201
  %9100 = xor i64 %9099, %9075
  %9101 = mul i64 %9074, %9100
  %9102 = trunc i64 %9101 to i8
  %9103 = mul i8 %9055, %9102
  %9104 = srem i8 %9103, 2
  %9105 = icmp eq i8 %9104, 0
  %9106 = xor i1 %9053, true
  %9107 = and i1 %9106, false
  %9108 = and i1 %9053, true
  %9109 = or i1 %9107, %9108
  %9110 = and i64 %36, -4733183244259738035
  %9111 = or i64 4733183244259738034, %36
  %9112 = sub i64 %9111, 4733183244259738034
  %9113 = or i64 %100, -5966067420641026405
  %9114 = and i64 -5966067420641026405, %100
  %9115 = xor i64 -5966067420641026405, %100
  %9116 = or i64 %9114, %9115
  %9117 = or i64 %336, -1488563146635917984
  %9118 = xor i64 %336, -1
  %9119 = and i64 -1488563146635917984, %9118
  %9120 = add i64 %9119, %336
  %9121 = xor i64 %9110, %9117
  %9122 = xor i64 %9121, -7426236207283427545
  %9123 = xor i64 %9122, %9116
  %9124 = xor i64 %9123, %9113
  %9125 = xor i64 %9124, %9112
  %9126 = xor i64 %9125, %9120
  %9127 = add i64 %1794, 3519018029227828396
  %9128 = xor i64 3519018029227828396, %1794
  %9129 = and i64 3519018029227828396, %1794
  %9130 = mul i64 2, %9129
  %9131 = add i64 %9128, %9130
  %9132 = add i64 %393, -359339327212275966
  %9133 = and i64 -359339327212275966, %393
  %9134 = or i64 -359339327212275966, %393
  %9135 = add i64 %9133, %9134
  %9136 = xor i64 %9132, %9135
  %9137 = xor i64 %9136, %9131
  %9138 = xor i64 %9137, %9127
  %9139 = xor i64 %9138, -6304366917280409449
  %9140 = mul i64 %9126, %9139
  %9141 = trunc i64 %9140 to i1
  %9142 = xor i1 %9105, %9141
  %9143 = sext i32 %dispatcher1 to i64
  %9144 = or i64 %9143, -5511851475219645238
  %9145 = and i64 -5511851475219645238, %9143
  %9146 = xor i64 -5511851475219645238, %9143
  %9147 = or i64 %9145, %9146
  %9148 = or i64 %1428, 1168151699209520797
  %9149 = xor i64 %1428, -1
  %9150 = and i64 1168151699209520797, %9149
  %9151 = add i64 %9150, %1428
  %9152 = or i64 %1428, -6643783230536124906
  %9153 = xor i64 %1428, -1
  %9154 = and i64 -6643783230536124906, %9153
  %9155 = add i64 %9154, %1428
  %9156 = xor i64 %9151, %9148
  %9157 = xor i64 %9156, %9155
  %9158 = xor i64 %9157, %9144
  %9159 = xor i64 %9158, -8854883657747682529
  %9160 = xor i64 %9159, %9147
  %9161 = xor i64 %9160, %9152
  %9162 = add i64 %175, -5627644160053235613
  %9163 = add i64 -5815270682647240653, %175
  %9164 = sub i64 %9163, -187626522594005040
  %9165 = add i64 %100, -2194645762766971704
  %9166 = add i64 -124344218130864008, %100
  %9167 = sub i64 %9166, 2070301544636107696
  %9168 = xor i64 %9162, %9164
  %9169 = xor i64 %9168, 0
  %9170 = xor i64 %9169, %9167
  %9171 = xor i64 %9170, %9165
  %9172 = mul i64 %9161, %9171
  %9173 = trunc i64 %9172 to i1
  %9174 = and i1 %9142, %9173
  %9175 = and i1 %9105, true
  %9176 = or i1 %9174, %9175
  %9177 = xor i1 %9109, %9176
  %9178 = and i64 %391, -7604324319041543122
  %9179 = xor i64 %391, -1
  %9180 = xor i64 -7604324319041543122, %9179
  %9181 = and i64 %9180, -7604324319041543122
  %9182 = and i64 %58, -9091874036347123119
  %9183 = xor i64 %58, -1
  %9184 = or i64 9091874036347123118, %9183
  %9185 = xor i64 %9184, -1
  %9186 = and i64 %9185, -1
  %9187 = xor i64 %9186, %9181
  %9188 = xor i64 %9187, %9182
  %9189 = xor i64 %9188, 8326412492454590375
  %9190 = xor i64 %9189, %9178
  %9191 = or i64 %175, -1595490150013496616
  %9192 = xor i64 %175, -1
  %9193 = and i64 %9192, -1403380165768685169
  %9194 = and i64 %175, 1403380165768685168
  %9195 = or i64 %9193, %9194
  %9196 = xor i64 386639990526364503, %9195
  %9197 = xor i64 %175, -1
  %9198 = or i64 1595490150013496615, %9197
  %9199 = xor i64 %9198, -1
  %9200 = and i64 %9199, -1
  %9201 = or i64 %9196, %9200
  %9202 = or i64 %328, 7399698429393626597
  %9203 = xor i64 %328, -1
  %9204 = and i64 7399698429393626597, %9203
  %9205 = add i64 %9204, %328
  %9206 = or i64 %1428, -4642460941274934514
  %9207 = xor i64 %1428, -1
  %9208 = and i64 -4642460941274934514, %9207
  %9209 = add i64 %9208, %1428
  %9210 = xor i64 %9191, %9205
  %9211 = xor i64 %9210, %9202
  %9212 = xor i64 %9211, %9201
  %9213 = xor i64 %9212, %9209
  %9214 = xor i64 %9213, -4101028738822062057
  %9215 = xor i64 %9214, %9206
  %9216 = mul i64 %9190, %9215
  %9217 = trunc i64 %9216 to i1
  %9218 = xor i1 %9053, %9217
  %9219 = xor i1 %9105, true
  %9220 = or i1 %9218, %9219
  %9221 = xor i1 %9220, true
  %9222 = and i1 %9221, true
  %9223 = or i1 %9177, %9222
  %9224 = select i1 %9223, i32 595012144, i32 595012113
  %9225 = and i64 %92, 3330805865470390240
  %9226 = or i64 -3330805865470390241, %92
  %9227 = sub i64 %9226, -3330805865470390241
  %9228 = add i64 %391, 1279653919380333171
  %9229 = xor i64 1279653919380333171, %391
  %9230 = and i64 1279653919380333171, %391
  %9231 = mul i64 2, %9230
  %9232 = add i64 %9229, %9231
  %9233 = xor i64 %9225, %9227
  %9234 = xor i64 %9233, 5342025707458572839
  %9235 = xor i64 %9234, %9228
  %9236 = xor i64 %9235, %9232
  %9237 = and i64 %118, 6316445593849854221
  %9238 = xor i64 %118, -1
  %9239 = or i64 -6316445593849854222, %9238
  %9240 = xor i64 %9239, -1
  %9241 = and i64 %9240, -1
  %9242 = add i64 %3588, 3375348450657087277
  %9243 = xor i64 3375348450657087277, %3588
  %9244 = and i64 3375348450657087277, %3588
  %9245 = mul i64 2, %9244
  %9246 = add i64 %9243, %9245
  %9247 = and i64 %322, 9053655410446961903
  %9248 = xor i64 %322, -1
  %9249 = or i64 -9053655410446961904, %9248
  %9250 = xor i64 %9249, -1
  %9251 = and i64 %9250, -1
  %9252 = xor i64 5735315237769662583, %9246
  %9253 = xor i64 %9252, %9247
  %9254 = xor i64 %9253, %9237
  %9255 = xor i64 %9254, %9241
  %9256 = xor i64 %9255, %9251
  %9257 = xor i64 %9256, %9242
  %9258 = mul i64 %9236, %9257
  %9259 = trunc i64 %9258 to i32
  %9260 = xor i32 %9224, %9259
  store i32 %9260, i32* %35, align 4
  %9261 = call i8** @bf4367541783002168146(i32* %35)
  %9262 = load i8*, i8** %9261, align 8
  indirectbr i8* %9262, [label %loopEnd, label %codeRepl186]

codeRepl191:                                      ; preds = %codeRepl191, %loopStart
  %lt.cast199 = bitcast i64* %.loc192 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast199)
  %lt.cast200 = bitcast i64* %.loc193 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast200)
  %lt.cast201 = bitcast i1* %.loc194 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast201)
  store i64 1996855465712537086, i64* %1256, align 8
  %9263 = call i8** @lk4104490460174343886(i64* %1256)
  %9264 = load i8*, i8** %9263, align 8
  %9265 = bitcast i8* %9264 to i1 (i64, i64, i64*, i64*, i1*)*
  %.reload46 = load i64, i64* %.reg2mem45, align 8
  %.reload189.reload = load i64, i64* %.reload189.reg2mem, align 8
  %targetBlock195 = call i1 %9265(i64 %.reload46, i64 %.reload189.reload, i64* %.loc192, i64* %.loc193, i1* %.loc194)
  %.reload196 = load i64, i64* %.loc192, align 8
  store i64 %.reload196, i64* %.reload196.reg2mem, align 8
  %.reload197 = load i64, i64* %.loc193, align 8
  store i64 %.reload197, i64* %.reload197.reg2mem, align 8
  %.reload198 = load i1, i1* %.loc194, align 1
  store i1 %.reload198, i1* %.reload198.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast199)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast200)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast201)
  %9266 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %9267 = load i32, i32* %9266, align 4
  %9268 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %9269 = load i32, i32* %9268, align 4
  %9270 = sub i32 %9267, 889188658
  %9271 = sub i32 %9270, %9269
  %9272 = or i64 %4826, 4995939264648644311
  %9273 = and i64 4995939264648644311, %4826
  %9274 = xor i64 4995939264648644311, %4826
  %9275 = or i64 %9273, %9274
  %9276 = add i64 %36, -3082726709642705212
  %9277 = add i64 -332769143454136462, %36
  %9278 = add i64 %9277, -2749957566188568750
  %9279 = xor i64 %9275, %9272
  %9280 = xor i64 %9279, 5114973729926306995
  %9281 = xor i64 %9280, %9276
  %9282 = xor i64 %9281, %9278
  %9283 = add i64 %120, 5402217027809640080
  %9284 = xor i64 5402217027809640080, %120
  %9285 = and i64 5402217027809640080, %120
  %9286 = mul i64 2, %9285
  %9287 = add i64 %9284, %9286
  %9288 = and i64 %330, 5590546370441038991
  %9289 = xor i64 %330, -1
  %9290 = xor i64 5590546370441038991, %9289
  %9291 = and i64 %9290, 5590546370441038991
  %9292 = sext i32 %dispatcher1 to i64
  %9293 = or i64 %9292, 3693397137531181771
  %9294 = xor i64 %9292, -1
  %9295 = and i64 3693397137531181771, %9294
  %9296 = add i64 %9295, %9292
  %9297 = xor i64 %9296, -1136962155854452986
  %9298 = xor i64 %9297, %9288
  %9299 = xor i64 %9298, %9287
  %9300 = xor i64 %9299, %9293
  %9301 = xor i64 %9300, %9291
  %9302 = xor i64 %9301, %9283
  %9303 = mul i64 %9282, %9302
  %9304 = trunc i64 %9303 to i32
  %9305 = add i32 %9271, %9304
  %9306 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 32
  %9307 = load i32, i32* %9306, align 4
  %9308 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %9309 = load i32, i32* %9308, align 4
  %9310 = srem i32 %9307, %9309
  %9311 = select i1 %targetBlock195, i32 %9305, i32 %9310
  store i32 %9311, i32* %dispatcher, align 4
  %9312 = load i8*, i8** %45, align 8
  %9313 = load i8, i8* %9312, align 1
  %9314 = mul i8 %9313, %9313
  %9315 = add i8 %9314, -84
  %9316 = add i8 %9315, %9313
  %9317 = sub i8 %9316, -84
  %9318 = mul i8 %9317, 3
  %9319 = srem i8 %9318, 2
  %9320 = icmp eq i8 %9319, 0
  %9321 = mul i8 %9313, %9313
  %9322 = xor i8 %9321, %9313
  %9323 = and i8 %9321, %9313
  %9324 = and i64 %328, 1772576331432913542
  %9325 = xor i64 %328, -1
  %9326 = xor i64 1772576331432913542, %9325
  %9327 = and i64 %9326, 1772576331432913542
  %9328 = or i64 %38, -1383215114455313100
  %9329 = xor i64 %38, -1
  %9330 = and i64 %9329, 4022865140425163342
  %9331 = and i64 %38, -4022865140425163343
  %9332 = or i64 %9330, %9331
  %9333 = xor i64 -2658878972545689734, %9332
  %9334 = xor i64 %38, -1
  %9335 = or i64 1383215114455313099, %9334
  %9336 = xor i64 %9335, -1
  %9337 = and i64 %9336, -1
  %9338 = or i64 %9333, %9337
  %9339 = xor i64 %9338, %9328
  %9340 = xor i64 %9339, %9327
  %9341 = xor i64 %9340, -7739131871034252281
  %9342 = xor i64 %9341, %9324
  %9343 = add i64 %2865, 4233820071848544074
  %9344 = sub i64 0, %2865
  %9345 = sub i64 4233820071848544074, %9344
  %9346 = or i64 %108, -8602120881087959063
  %9347 = and i64 -8602120881087959063, %108
  %9348 = xor i64 -8602120881087959063, %108
  %9349 = or i64 %9347, %9348
  %9350 = xor i64 %9346, %9343
  %9351 = xor i64 %9350, -1858437430791531666
  %9352 = xor i64 %9351, %9349
  %9353 = xor i64 %9352, %9345
  %9354 = mul i64 %9342, %9353
  %9355 = trunc i64 %9354 to i8
  %9356 = mul i8 %9355, %9323
  %9357 = add i8 %9322, %9356
  %9358 = srem i8 %9357, 2
  %9359 = icmp eq i8 %9358, 0
  %9360 = and i1 %9320, %9359
  %9361 = select i1 %9360, i32 595012141, i32 595012113
  %9362 = xor i32 %9361, 60
  store i32 %9362, i32* %35, align 4
  %9363 = call i8** @bf4367541783002168146(i32* %35)
  %9364 = load i8*, i8** %9363, align 8
  indirectbr i8* %9364, [label %loopEnd, label %codeRepl191]

9365:                                             ; preds = %9365, %loopStart
  %9366 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 19
  %9367 = load i32, i32* %9366, align 4
  %9368 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 17
  %9369 = load i32, i32* %9368, align 4
  %9370 = add i32 %9367, %9369
  store i32 %9370, i32* %dispatcher, align 4
  %9371 = load i8*, i8** %91, align 8
  %9372 = load i8, i8* %9371, align 1
  %9373 = and i8 %9372, 1
  %9374 = icmp eq i8 %9373, 1
  %9375 = mul i8 %9372, %9372
  %9376 = sub i8 %9375, -111
  %9377 = add i8 %9376, %9372
  %9378 = add i8 %9377, -111
  %9379 = srem i8 %9378, 2
  %9380 = icmp eq i8 %9379, 0
  %9381 = or i1 %9374, %9380
  %9382 = select i1 %9381, i32 595012136, i32 595012113
  %9383 = xor i32 %9382, 57
  store i32 %9383, i32* %35, align 4
  %9384 = call i8** @bf4367541783002168146(i32* %35)
  %9385 = load i8*, i8** %9384, align 8
  indirectbr i8* %9385, [label %loopEnd, label %9365]

9386:                                             ; preds = %9386, %loopStart
  %9387 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 30
  %9388 = load i32, i32* %9387, align 4
  %9389 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %9390 = load i32, i32* %9389, align 4
  %9391 = sub i32 %9388, %9390
  %9392 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 29
  %9393 = load i32, i32* %9392, align 4
  %9394 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %9395 = load i32, i32* %9394, align 4
  %9396 = srem i32 %9393, %9395
  %.reload198.reload = load i1, i1* %.reload198.reg2mem, align 1
  %9397 = select i1 %.reload198.reload, i32 %9391, i32 %9396
  store i32 %9397, i32* %dispatcher, align 4
  %9398 = load i8*, i8** %117, align 8
  %9399 = load i8, i8* %9398, align 1
  %9400 = mul i8 %9399, 2
  %9401 = mul i8 %9399, 2
  %9402 = xor i8 2, %9401
  %9403 = and i8 2, %9401
  %9404 = or i64 %3431, 3237414608770961449
  %9405 = xor i64 %3431, -1
  %9406 = and i64 3237414608770961449, %9405
  %9407 = add i64 %9406, %3431
  %9408 = or i64 %4826, -6939121636045689717
  %9409 = and i64 -6939121636045689717, %4826
  %9410 = xor i64 -6939121636045689717, %4826
  %9411 = or i64 %9409, %9410
  %9412 = add i64 %108, -280568923025998075
  %9413 = sub i64 0, %108
  %9414 = sub i64 -280568923025998075, %9413
  %9415 = xor i64 %9408, %9414
  %9416 = xor i64 %9415, %9412
  %9417 = xor i64 %9416, %9411
  %9418 = xor i64 %9417, %9407
  %9419 = xor i64 %9418, 2926690344016859323
  %9420 = xor i64 %9419, %9404
  %9421 = and i64 %38, 3313619663533521754
  %9422 = or i64 -3313619663533521755, %38
  %9423 = sub i64 %9422, -3313619663533521755
  %9424 = add i64 %280, 2106550679313884882
  %9425 = sub i64 0, %280
  %9426 = add i64 -2106550679313884882, %9425
  %9427 = sub i64 0, %9426
  %9428 = xor i64 %9423, 5117863116864088294
  %9429 = xor i64 %9428, %9424
  %9430 = xor i64 %9429, %9421
  %9431 = xor i64 %9430, %9427
  %9432 = mul i64 %9420, %9431
  %9433 = trunc i64 %9432 to i8
  %9434 = mul i8 %9433, %9403
  %9435 = add i8 %9402, %9434
  %9436 = mul i8 %9400, %9435
  %9437 = srem i8 %9436, 4
  %9438 = add i64 %108, 5194067481383250895
  %9439 = sub i64 0, %108
  %9440 = add i64 -5194067481383250895, %9439
  %9441 = sub i64 0, %9440
  %9442 = add i64 %320, 5795643730204321868
  %9443 = sub i64 0, %320
  %9444 = sub i64 5795643730204321868, %9443
  %9445 = and i64 %2648, 8620064751142588347
  %9446 = xor i64 %2648, -1
  %9447 = or i64 -8620064751142588348, %9446
  %9448 = xor i64 %9447, -1
  %9449 = and i64 %9448, -1
  %9450 = xor i64 %9449, %9442
  %9451 = xor i64 %9450, 3862345133435534211
  %9452 = xor i64 %9451, %9441
  %9453 = xor i64 %9452, %9445
  %9454 = xor i64 %9453, %9444
  %9455 = xor i64 %9454, %9438
  %9456 = add i64 %2865, 7933790473919955670
  %9457 = add i64 3455561831989679649, %2865
  %9458 = add i64 %9457, 4478228641930276021
  %9459 = add i64 %52, 9106834515548087460
  %9460 = add i64 -58415463696547399, %52
  %9461 = add i64 %9460, 9165249979244634859
  %9462 = xor i64 %9458, %9459
  %9463 = xor i64 %9462, 0
  %9464 = xor i64 %9463, %9461
  %9465 = xor i64 %9464, %9456
  %9466 = mul i64 %9455, %9465
  %9467 = trunc i64 %9466 to i8
  %9468 = icmp eq i8 %9437, %9467
  %9469 = mul i8 %9399, %9399
  %9470 = add i8 %9469, %9399
  %9471 = srem i8 %9470, 2
  %9472 = add i64 %110, 6321888150993580962
  %9473 = sub i64 0, %110
  %9474 = add i64 -6321888150993580962, %9473
  %9475 = sub i64 0, %9474
  %9476 = add i64 %393, -4801161365406524798
  %9477 = add i64 7699773999503754196, %393
  %9478 = add i64 %9477, 5945808708799272622
  %9479 = xor i64 %9472, %9475
  %9480 = xor i64 %9479, 6847533276673642863
  %9481 = xor i64 %9480, %9476
  %9482 = xor i64 %9481, %9478
  %9483 = or i64 %320, 1530836961941586231
  %9484 = xor i64 %320, -1
  %9485 = and i64 1530836961941586231, %9484
  %9486 = add i64 %9485, %320
  %9487 = or i64 %2020, 7163860742513481994
  %9488 = xor i64 %2020, -1
  %9489 = and i64 %9488, -346917049043879215
  %9490 = and i64 %2020, 346917049043879214
  %9491 = or i64 %9489, %9490
  %9492 = xor i64 -7474667325173029925, %9491
  %9493 = xor i64 %2020, -1
  %9494 = or i64 -7163860742513481995, %9493
  %9495 = xor i64 %9494, -1
  %9496 = and i64 %9495, -1
  %9497 = or i64 %9492, %9496
  %9498 = xor i64 %9487, %9483
  %9499 = xor i64 %9498, %9486
  %9500 = xor i64 %9499, 0
  %9501 = xor i64 %9500, %9497
  %9502 = mul i64 %9482, %9501
  %9503 = trunc i64 %9502 to i8
  %9504 = icmp eq i8 %9471, %9503
  %9505 = or i1 %9468, %9504
  %9506 = select i1 %9505, i32 595012111, i32 595012113
  %9507 = or i64 %328, -5492005720916796358
  %9508 = xor i64 %328, -1
  %9509 = and i64 %9508, -6534618102151150243
  %9510 = and i64 %328, 6534618102151150242
  %9511 = or i64 %9509, %9510
  %9512 = xor i64 1628093666052987239, %9511
  %9513 = xor i64 %328, -1
  %9514 = or i64 5492005720916796357, %9513
  %9515 = xor i64 %9514, -1
  %9516 = and i64 %9515, -1
  %9517 = or i64 %9512, %9516
  %9518 = add i64 %118, -3903699651651797317
  %9519 = and i64 -3903699651651797317, %118
  %9520 = or i64 -3903699651651797317, %118
  %9521 = add i64 %9519, %9520
  %9522 = or i64 %393, 5057434286926425557
  %9523 = xor i64 %393, -1
  %9524 = and i64 %9523, 1633065541063541939
  %9525 = and i64 %393, -1633065541063541940
  %9526 = or i64 %9524, %9525
  %9527 = xor i64 5802410679711787366, %9526
  %9528 = xor i64 %393, -1
  %9529 = or i64 -5057434286926425558, %9528
  %9530 = xor i64 %9529, -1
  %9531 = and i64 %9530, -1
  %9532 = or i64 %9527, %9531
  %9533 = xor i64 %9521, -4624275799650996415
  %9534 = xor i64 %9533, %9532
  %9535 = xor i64 %9534, %9517
  %9536 = xor i64 %9535, %9507
  %9537 = xor i64 %9536, %9518
  %9538 = xor i64 %9537, %9522
  %9539 = add i64 %110, -369215828331045088
  %9540 = sub i64 0, %110
  %9541 = sub i64 -369215828331045088, %9540
  %9542 = and i64 %120, 6274867709393529472
  %9543 = xor i64 %120, -1
  %9544 = xor i64 6274867709393529472, %9543
  %9545 = and i64 %9544, 6274867709393529472
  %9546 = add i64 %54, -1955182669688409116
  %9547 = sub i64 0, %54
  %9548 = sub i64 -1955182669688409116, %9547
  %9549 = xor i64 -2971697039142199489, %9539
  %9550 = xor i64 %9549, %9541
  %9551 = xor i64 %9550, %9548
  %9552 = xor i64 %9551, %9545
  %9553 = xor i64 %9552, %9546
  %9554 = xor i64 %9553, %9542
  %9555 = mul i64 %9538, %9554
  %9556 = trunc i64 %9555 to i32
  %9557 = xor i32 %9506, %9556
  %9558 = and i32 %9557, 30
  %9559 = and i32 %9506, -31
  %9560 = or i32 %9558, %9559
  store i32 %9560, i32* %35, align 4
  %9561 = call i8** @bf4367541783002168146(i32* %35)
  %9562 = load i8*, i8** %9561, align 8
  indirectbr i8* %9562, [label %loopEnd, label %9386]

9563:                                             ; preds = %9563, %loopStart
  %9564 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 56
  %9565 = load i32, i32* %9564, align 4
  %9566 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %9567 = load i32, i32* %9566, align 4
  %9568 = sub i32 %9565, %9567
  store i32 %9568, i32* %dispatcher, align 4
  %.reload196.reload = load i64, i64* %.reload196.reg2mem, align 8
  %.reload197.reload = load i64, i64* %.reload197.reg2mem, align 8
  %9569 = load i8*, i8** %386, align 8
  %9570 = load i8, i8* %9569, align 1
  %9571 = xor i8 %9570, -1
  %9572 = or i64 %56, 6116325927858046759
  %9573 = xor i64 %56, -1
  %9574 = and i64 %9573, 4225747243485703549
  %9575 = and i64 %56, -4225747243485703550
  %9576 = or i64 %9574, %9575
  %9577 = xor i64 7945845886132726362, %9576
  %9578 = xor i64 %56, -1
  %9579 = or i64 -6116325927858046760, %9578
  %9580 = xor i64 %9579, -1
  %9581 = and i64 %9580, -1
  %9582 = or i64 %9577, %9581
  %9583 = sext i32 %dispatcher1 to i64
  %9584 = or i64 %9583, -480688035858797350
  %9585 = and i64 -480688035858797350, %9583
  %9586 = xor i64 -480688035858797350, %9583
  %9587 = or i64 %9585, %9586
  %9588 = xor i64 %9572, %9584
  %9589 = xor i64 %9588, 6305720259498760661
  %9590 = xor i64 %9589, %9582
  %9591 = xor i64 %9590, %9587
  %9592 = and i64 %3431, -2924082418174194730
  %9593 = xor i64 %3431, -1
  %9594 = xor i64 -2924082418174194730, %9593
  %9595 = and i64 %9594, -2924082418174194730
  %9596 = add i64 %3431, 1954524954410097682
  %9597 = add i64 -4807587354005822738, %3431
  %9598 = sub i64 %9597, -6762112308415920420
  %9599 = add i64 %167, 2792124946912501584
  %9600 = sub i64 0, %167
  %9601 = sub i64 2792124946912501584, %9600
  %9602 = xor i64 %9598, %9592
  %9603 = xor i64 %9602, %9599
  %9604 = xor i64 %9603, 3597846282249653766
  %9605 = xor i64 %9604, %9595
  %9606 = xor i64 %9605, %9601
  %9607 = xor i64 %9606, %9596
  %9608 = mul i64 %9591, %9607
  %9609 = trunc i64 %9608 to i8
  %9610 = or i8 %9571, %9609
  %9611 = xor i8 %9610, -1
  %9612 = add i64 %40, -626533166917042253
  %9613 = and i64 -626533166917042253, %40
  %9614 = or i64 -626533166917042253, %40
  %9615 = add i64 %9613, %9614
  %9616 = or i64 %4365, 2590974924571762963
  %9617 = and i64 2590974924571762963, %4365
  %9618 = xor i64 2590974924571762963, %4365
  %9619 = or i64 %9617, %9618
  %9620 = and i64 %175, -1270037337736017423
  %9621 = xor i64 %175, -1
  %9622 = xor i64 -1270037337736017423, %9621
  %9623 = and i64 %9622, -1270037337736017423
  %9624 = xor i64 %9620, %9619
  %9625 = xor i64 %9624, -5270083815119275703
  %9626 = xor i64 %9625, %9623
  %9627 = xor i64 %9626, %9616
  %9628 = xor i64 %9627, %9615
  %9629 = xor i64 %9628, %9612
  %9630 = or i64 %338, 7676726626024230049
  %9631 = xor i64 %338, -1
  %9632 = and i64 %9631, -8766207734136118480
  %9633 = and i64 %338, 8766207734136118479
  %9634 = or i64 %9632, %9633
  %9635 = xor i64 -1382294251731292271, %9634
  %9636 = xor i64 %338, -1
  %9637 = or i64 -7676726626024230050, %9636
  %9638 = xor i64 %9637, -1
  %9639 = and i64 %9638, -1
  %9640 = or i64 %9635, %9639
  %9641 = and i64 %2020, -7188350252069344010
  %9642 = or i64 7188350252069344009, %2020
  %9643 = sub i64 %9642, 7188350252069344009
  %9644 = or i64 %167, -2778986847090086512
  %9645 = and i64 -2778986847090086512, %167
  %9646 = xor i64 -2778986847090086512, %167
  %9647 = or i64 %9645, %9646
  %9648 = xor i64 %9647, %9640
  %9649 = xor i64 %9648, %9644
  %9650 = xor i64 %9649, %9643
  %9651 = xor i64 %9650, %9630
  %9652 = xor i64 %9651, 5711652826940862471
  %9653 = xor i64 %9652, %9641
  %9654 = mul i64 %9629, %9653
  %9655 = trunc i64 %9654 to i8
  %9656 = and i8 %9611, %9655
  %9657 = icmp eq i8 %9656, 0
  %9658 = mul i8 %9570, %9570
  %9659 = add i8 %9658, %9570
  %9660 = add i64 %36, 4100111342255687090
  %9661 = add i64 -6656844272993511889, %36
  %9662 = sub i64 %9661, 7689788458460352637
  %9663 = add i64 %4365, -5009991827903271042
  %9664 = sub i64 0, %4365
  %9665 = sub i64 -5009991827903271042, %9664
  %9666 = and i64 %106, -638663657201463512
  %9667 = xor i64 %106, -1
  %9668 = xor i64 -638663657201463512, %9667
  %9669 = and i64 %9668, -638663657201463512
  %9670 = xor i64 %9662, %9666
  %9671 = xor i64 %9670, %9663
  %9672 = xor i64 %9671, %9669
  %9673 = xor i64 %9672, %9660
  %9674 = xor i64 %9673, %9665
  %9675 = xor i64 %9674, -5654686454888445237
  %9676 = add i64 %36, -4717169898478921108
  %9677 = sub i64 0, %36
  %9678 = sub i64 -4717169898478921108, %9677
  %9679 = or i64 %175, 858355645591823108
  %9680 = xor i64 %175, -1
  %9681 = and i64 858355645591823108, %9680
  %9682 = add i64 %9681, %175
  %9683 = or i64 %104, -4796100145341343769
  %9684 = xor i64 %104, -1
  %9685 = and i64 %9684, 8871450493193501234
  %9686 = and i64 %104, -8871450493193501235
  %9687 = or i64 %9685, %9686
  %9688 = xor i64 -4148539369621688875, %9687
  %9689 = xor i64 %104, -1
  %9690 = or i64 4796100145341343768, %9689
  %9691 = xor i64 %9690, -1
  %9692 = and i64 %9691, -1
  %9693 = or i64 %9688, %9692
  %9694 = xor i64 %9683, %9679
  %9695 = xor i64 %9694, 5967103930451419305
  %9696 = xor i64 %9695, %9682
  %9697 = xor i64 %9696, %9676
  %9698 = xor i64 %9697, %9678
  %9699 = xor i64 %9698, %9693
  %9700 = mul i64 %9675, %9699
  %9701 = trunc i64 %9700 to i8
  %9702 = mul i8 %9659, %9701
  %9703 = srem i8 %9702, 2
  %9704 = icmp eq i8 %9703, 0
  %9705 = or i1 %9657, %9704
  %9706 = or i64 %278, 4441665026247725646
  %9707 = xor i64 %278, -1
  %9708 = and i64 %9707, -3584333382070967619
  %9709 = and i64 %278, 3584333382070967618
  %9710 = or i64 %9708, %9709
  %9711 = xor i64 -873112247716515597, %9710
  %9712 = xor i64 %278, -1
  %9713 = or i64 -4441665026247725647, %9712
  %9714 = xor i64 %9713, -1
  %9715 = and i64 %9714, -1
  %9716 = or i64 %9711, %9715
  %9717 = or i64 %251, -569673629179955476
  %9718 = xor i64 %251, -1
  %9719 = and i64 %9718, -3240542276146487459
  %9720 = and i64 %251, 3240542276146487458
  %9721 = or i64 %9719, %9720
  %9722 = xor i64 3107302470308932017, %9721
  %9723 = xor i64 %251, -1
  %9724 = or i64 569673629179955475, %9723
  %9725 = xor i64 %9724, -1
  %9726 = and i64 %9725, -1
  %9727 = or i64 %9722, %9726
  %9728 = add i64 %90, 2796812045472842073
  %9729 = add i64 645561734909088996, %90
  %9730 = sub i64 %9729, -2151250310563753077
  %9731 = xor i64 %9717, %9716
  %9732 = xor i64 %9731, %9728
  %9733 = xor i64 %9732, 405130730591554595
  %9734 = xor i64 %9733, %9727
  %9735 = xor i64 %9734, %9730
  %9736 = xor i64 %9735, %9706
  %9737 = or i64 %102, 8115098423307395358
  %9738 = xor i64 %102, -1
  %9739 = and i64 8115098423307395358, %9738
  %9740 = add i64 %9739, %102
  %9741 = or i64 %212, 3963244189234053534
  %9742 = and i64 3963244189234053534, %212
  %9743 = xor i64 3963244189234053534, %212
  %9744 = or i64 %9742, %9743
  %9745 = or i64 %3, 1317459561780105350
  %9746 = xor i64 %3, -1
  %9747 = and i64 1317459561780105350, %9746
  %9748 = add i64 %9747, %3
  %9749 = xor i64 -2251509830314199024, %9748
  %9750 = xor i64 %9749, %9737
  %9751 = xor i64 %9750, %9744
  %9752 = xor i64 %9751, %9740
  %9753 = xor i64 %9752, %9745
  %9754 = xor i64 %9753, %9741
  %9755 = mul i64 %9736, %9754
  %9756 = trunc i64 %9755 to i32
  %9757 = select i1 %9705, i32 %9756, i32 595012113
  %9758 = xor i32 %9757, 33
  store i32 %9758, i32* %35, align 4
  %9759 = call i8** @bf4367541783002168146(i32* %35)
  %9760 = load i8*, i8** %9759, align 8
  indirectbr i8* %9760, [label %loopEnd, label %9563]

codeRepl202:                                      ; preds = %codeRepl202, %loopStart
  %lt.cast207 = bitcast i64* %.loc203 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast207)
  %lt.cast208 = bitcast i64* %.loc204 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast208)
  store i64 1996855465712537074, i64* %1256, align 8
  %9761 = call i8** @lk4104490460174343886(i64* %1256)
  %9762 = load i8*, i8** %9761, align 8
  %9763 = bitcast i8* %9762 to void (i64*, i64*)*
  call void %9763(i64* %.loc203, i64* %.loc204)
  %.reload205 = load i64, i64* %.loc203, align 8
  %.reload206 = load i64, i64* %.loc204, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast207)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast208)
  %9764 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 35
  %9765 = load i32, i32* %9764, align 4
  %9766 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %9767 = load i32, i32* %9766, align 4
  %9768 = srem i32 %9765, %9767
  store i32 %9768, i32* %dispatcher, align 4
  %9769 = load i8*, i8** %97, align 8
  %9770 = load i8, i8* %9769, align 1
  %9771 = mul i8 %9770, 2
  %9772 = add i64 %336, 2359485049027022589
  %9773 = add i64 -1459730661193333787, %336
  %9774 = add i64 %9773, 3819215710220356376
  %9775 = add i64 %120, 2851863118189056691
  %9776 = add i64 5922709088056513912, %120
  %9777 = sub i64 %9776, 3070845969867457221
  %9778 = and i64 %38, -2747938919337332083
  %9779 = xor i64 %38, -1
  %9780 = xor i64 -2747938919337332083, %9779
  %9781 = and i64 %9780, -2747938919337332083
  %9782 = xor i64 %9774, %9775
  %9783 = xor i64 %9782, %9772
  %9784 = xor i64 %9783, %9777
  %9785 = xor i64 %9784, %9781
  %9786 = xor i64 %9785, 3548969810541771965
  %9787 = xor i64 %9786, %9778
  %9788 = or i64 %167, -5240956899360924101
  %9789 = and i64 -5240956899360924101, %167
  %9790 = xor i64 -5240956899360924101, %167
  %9791 = or i64 %9789, %9790
  %9792 = and i64 %110, 3744238342286040010
  %9793 = xor i64 %110, -1
  %9794 = xor i64 3744238342286040010, %9793
  %9795 = and i64 %9794, 3744238342286040010
  %9796 = add i64 %3431, 7282310622884943578
  %9797 = and i64 7282310622884943578, %3431
  %9798 = or i64 7282310622884943578, %3431
  %9799 = add i64 %9797, %9798
  %9800 = xor i64 %9795, %9792
  %9801 = xor i64 %9800, %9791
  %9802 = xor i64 %9801, 6913593975414373674
  %9803 = xor i64 %9802, %9796
  %9804 = xor i64 %9803, %9788
  %9805 = xor i64 %9804, %9799
  %9806 = mul i64 %9787, %9805
  %9807 = trunc i64 %9806 to i8
  %9808 = mul i8 %9770, %9807
  %9809 = add i8 2, %9808
  %9810 = mul i8 %9771, %9809
  %9811 = srem i8 %9810, 4
  %9812 = icmp eq i8 %9811, 0
  %9813 = mul i8 %9770, %9770
  %9814 = mul i8 %9813, %9770
  %9815 = and i8 %9814, %9770
  %9816 = or i8 %9814, %9770
  %9817 = add i8 %9815, %9816
  %9818 = srem i8 %9817, 2
  %9819 = add i64 %169, 2956859712659815121
  %9820 = sub i64 0, %169
  %9821 = add i64 -2956859712659815121, %9820
  %9822 = sub i64 0, %9821
  %9823 = add i64 %175, -5003364186513719450
  %9824 = add i64 414834345411404112, %175
  %9825 = add i64 %9824, -5418198531925123562
  %9826 = xor i64 %9822, %9819
  %9827 = xor i64 %9826, -1280165537820748319
  %9828 = xor i64 %9827, %9823
  %9829 = xor i64 %9828, %9825
  %9830 = and i64 %251, 6194544910756441380
  %9831 = xor i64 %251, -1
  %9832 = or i64 -6194544910756441381, %9831
  %9833 = xor i64 %9832, -1
  %9834 = and i64 %9833, -1
  %9835 = and i64 %175, -891643299222615899
  %9836 = or i64 891643299222615898, %175
  %9837 = sub i64 %9836, 891643299222615898
  %9838 = and i64 %92, -7331195784059840428
  %9839 = xor i64 %92, -1
  %9840 = or i64 7331195784059840427, %9839
  %9841 = xor i64 %9840, -1
  %9842 = and i64 %9841, -1
  %9843 = xor i64 %9834, %9842
  %9844 = xor i64 %9843, 0
  %9845 = xor i64 %9844, %9838
  %9846 = xor i64 %9845, %9830
  %9847 = xor i64 %9846, %9835
  %9848 = xor i64 %9847, %9837
  %9849 = mul i64 %9829, %9848
  %9850 = trunc i64 %9849 to i8
  %9851 = icmp eq i8 %9818, %9850
  %9852 = and i1 %9812, %9851
  %9853 = select i1 %9852, i32 595012129, i32 595012113
  %9854 = xor i32 %9853, -1
  %9855 = add i64 %2342, 645377430440158880
  %9856 = and i64 645377430440158880, %2342
  %9857 = or i64 645377430440158880, %2342
  %9858 = add i64 %9856, %9857
  %9859 = and i64 %90, -2909690506092423977
  %9860 = xor i64 %90, -1
  %9861 = or i64 2909690506092423976, %9860
  %9862 = xor i64 %9861, -1
  %9863 = and i64 %9862, -1
  %9864 = add i64 %114, -4990995543013853256
  %9865 = and i64 -4990995543013853256, %114
  %9866 = or i64 -4990995543013853256, %114
  %9867 = add i64 %9865, %9866
  %9868 = xor i64 %9864, %9858
  %9869 = xor i64 %9868, %9859
  %9870 = xor i64 %9869, %9867
  %9871 = xor i64 %9870, %9855
  %9872 = xor i64 %9871, %9863
  %9873 = xor i64 %9872, 1118490319655809899
  %9874 = and i64 %1428, -8698003923815700254
  %9875 = xor i64 %1428, -1
  %9876 = xor i64 -8698003923815700254, %9875
  %9877 = and i64 %9876, -8698003923815700254
  %9878 = or i64 %181, -7044868963232216123
  %9879 = xor i64 %181, -1
  %9880 = and i64 -7044868963232216123, %9879
  %9881 = add i64 %9880, %181
  %9882 = xor i64 %9874, 449410134893968658
  %9883 = xor i64 %9882, %9877
  %9884 = xor i64 %9883, %9881
  %9885 = xor i64 %9884, %9878
  %9886 = mul i64 %9873, %9885
  %9887 = trunc i64 %9886 to i32
  %9888 = and i32 %9854, %9887
  %9889 = or i64 %387, -6379718060174420918
  %9890 = and i64 -6379718060174420918, %387
  %9891 = xor i64 -6379718060174420918, %387
  %9892 = or i64 %9890, %9891
  %9893 = add i64 %173, 2486719609929177188
  %9894 = xor i64 2486719609929177188, %173
  %9895 = and i64 2486719609929177188, %173
  %9896 = mul i64 2, %9895
  %9897 = add i64 %9894, %9896
  %9898 = xor i64 %9889, %9893
  %9899 = xor i64 %9898, %9897
  %9900 = xor i64 %9899, %9892
  %9901 = xor i64 %9900, 5222974908285675139
  %9902 = or i64 %338, -8169294478265918137
  %9903 = xor i64 %338, -1
  %9904 = and i64 -8169294478265918137, %9903
  %9905 = add i64 %9904, %338
  %9906 = add i64 %2020, 6159924733006030581
  %9907 = add i64 -8346972257529730248, %2020
  %9908 = sub i64 %9907, 3939847083173790787
  %9909 = xor i64 %9902, 6038179898679922003
  %9910 = xor i64 %9909, %9906
  %9911 = xor i64 %9910, %9905
  %9912 = xor i64 %9911, %9908
  %9913 = mul i64 %9901, %9912
  %9914 = trunc i64 %9913 to i32
  %9915 = and i32 %9853, %9914
  %9916 = or i32 %9888, %9915
  %9917 = xor i32 %9916, 88186038
  store i32 %9917, i32* %35, align 4
  %9918 = call i8** @bf4367541783002168146(i32* %35)
  %9919 = load i8*, i8** %9918, align 8
  indirectbr i8* %9919, [label %loopEnd, label %codeRepl202]

9920:                                             ; preds = %9920, %loopStart
  %9921 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 20
  %9922 = load i32, i32* %9921, align 4
  %9923 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 19
  %9924 = load i32, i32* %9923, align 4
  %9925 = add i32 %9922, %9924
  store i32 %9925, i32* %dispatcher, align 4
  %9926 = load i8*, i8** %388, align 8
  %9927 = load i8, i8* %9926, align 1
  %9928 = mul i8 %9927, 2
  %9929 = mul i8 %9927, 2
  %9930 = sub i8 0, %9929
  %9931 = add i8 -2, %9930
  %9932 = sub i8 0, %9931
  %9933 = mul i8 %9928, %9932
  %9934 = srem i8 %9933, 4
  %9935 = icmp eq i8 %9934, 0
  %9936 = mul i8 %9927, %9927
  %9937 = add i8 %9936, %9927
  %9938 = srem i8 %9937, 2
  %9939 = icmp eq i8 %9938, 0
  %9940 = xor i1 %9939, true
  %9941 = and i1 %9935, %9940
  %9942 = add i1 %9941, %9939
  %9943 = and i64 %3431, -5021129941608888450
  %9944 = xor i64 %3431, -1
  %9945 = xor i64 -5021129941608888450, %9944
  %9946 = and i64 %9945, -5021129941608888450
  %9947 = add i64 %328, -8522353886686154479
  %9948 = sub i64 0, %328
  %9949 = add i64 8522353886686154479, %9948
  %9950 = sub i64 0, %9949
  %9951 = xor i64 %9943, -2106714664465388091
  %9952 = xor i64 %9951, %9950
  %9953 = xor i64 %9952, %9947
  %9954 = xor i64 %9953, %9946
  %9955 = and i64 %3, -8217040983229838240
  %9956 = xor i64 %3, -1
  %9957 = xor i64 -8217040983229838240, %9956
  %9958 = and i64 %9957, -8217040983229838240
  %9959 = or i64 %2865, 5316976958428834772
  %9960 = and i64 5316976958428834772, %2865
  %9961 = xor i64 5316976958428834772, %2865
  %9962 = or i64 %9960, %9961
  %9963 = and i64 %389, -5482099034589788736
  %9964 = or i64 5482099034589788735, %389
  %9965 = sub i64 %9964, 5482099034589788735
  %9966 = xor i64 -3272686474395157539, %9965
  %9967 = xor i64 %9966, %9955
  %9968 = xor i64 %9967, %9958
  %9969 = xor i64 %9968, %9962
  %9970 = xor i64 %9969, %9959
  %9971 = xor i64 %9970, %9963
  %9972 = mul i64 %9954, %9971
  %9973 = trunc i64 %9972 to i32
  %9974 = select i1 %9942, i32 %9973, i32 595012113
  %9975 = xor i32 %9974, -1
  %9976 = and i32 %9975, 0
  %9977 = and i32 %9974, -1
  %9978 = or i32 %9976, %9977
  store i32 %9978, i32* %35, align 4
  %9979 = call i8** @bf4367541783002168146(i32* %35)
  %9980 = load i8*, i8** %9979, align 8
  indirectbr i8* %9980, [label %loopEnd, label %9920]

9981:                                             ; preds = %9981, %loopStart
  %.reload88 = load i64, i64* %.reg2mem87, align 8
  %9982 = srem i64 %.reload88, 2
  %9983 = icmp eq i64 %9982, 0
  %9984 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 37
  %9985 = load i32, i32* %9984, align 4
  %9986 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %9987 = load i32, i32* %9986, align 4
  %9988 = srem i32 %9985, %9987
  %9989 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 56
  %9990 = load i32, i32* %9989, align 4
  %9991 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 21
  %9992 = load i32, i32* %9991, align 4
  %9993 = sub i32 %9990, %9992
  %9994 = select i1 %9983, i32 %9988, i32 %9993
  store i32 %9994, i32* %dispatcher, align 4
  %9995 = load i8*, i8** %105, align 8
  %9996 = load i8, i8* %9995, align 1
  %9997 = mul i8 %9996, 2
  %9998 = mul i8 %9996, 2
  %9999 = xor i8 2, %9998
  %10000 = and i8 2, %9998
  %10001 = mul i8 2, %10000
  %10002 = add i8 %9999, %10001
  %10003 = mul i8 39, %10002
  %10004 = add i8 23, %10003
  %10005 = mul i8 -105, %10004
  %10006 = add i8 111, %10005
  %10007 = mul i8 %9997, %10006
  %10008 = srem i8 %10007, 4
  %10009 = icmp eq i8 %10008, 0
  %10010 = mul i8 %9996, %9996
  %10011 = add i8 %10010, %9996
  %10012 = srem i8 %10011, 2
  %10013 = icmp eq i8 %10012, 0
  %10014 = or i1 %10009, %10013
  %10015 = select i1 %10014, i32 595012148, i32 595012113
  %10016 = xor i32 %10015, -1
  %10017 = and i64 %3, 6856334040407797096
  %10018 = or i64 -6856334040407797097, %3
  %10019 = sub i64 %10018, -6856334040407797097
  %10020 = and i64 %4826, 902840404884331960
  %10021 = or i64 -902840404884331961, %4826
  %10022 = sub i64 %10021, -902840404884331961
  %10023 = xor i64 %10022, %10017
  %10024 = xor i64 %10023, 8740487250699205765
  %10025 = xor i64 %10024, %10020
  %10026 = xor i64 %10025, %10019
  %10027 = and i64 %2865, -5586653397054920112
  %10028 = xor i64 %2865, -1
  %10029 = or i64 5586653397054920111, %10028
  %10030 = xor i64 %10029, -1
  %10031 = and i64 %10030, -1
  %10032 = and i64 %42, -5043507810177621851
  %10033 = xor i64 %42, -1
  %10034 = or i64 5043507810177621850, %10033
  %10035 = xor i64 %10034, -1
  %10036 = and i64 %10035, -1
  %10037 = and i64 %54, 1099500782967325586
  %10038 = xor i64 %54, -1
  %10039 = or i64 -1099500782967325587, %10038
  %10040 = xor i64 %10039, -1
  %10041 = and i64 %10040, -1
  %10042 = xor i64 %10027, %10041
  %10043 = xor i64 %10042, %10032
  %10044 = xor i64 %10043, %10036
  %10045 = xor i64 %10044, %10031
  %10046 = xor i64 %10045, -3923575674961973237
  %10047 = xor i64 %10046, %10037
  %10048 = mul i64 %10026, %10047
  %10049 = trunc i64 %10048 to i32
  %10050 = and i32 %10016, %10049
  %10051 = and i32 %10015, -1355745720
  %10052 = or i32 %10050, %10051
  %10053 = and i64 %118, -3897257614693186047
  %10054 = or i64 3897257614693186046, %118
  %10055 = sub i64 %10054, 3897257614693186046
  %10056 = or i64 %2342, -2339267415271660582
  %10057 = and i64 -2339267415271660582, %2342
  %10058 = xor i64 -2339267415271660582, %2342
  %10059 = or i64 %10057, %10058
  %10060 = or i64 %90, 3023866344627575824
  %10061 = and i64 3023866344627575824, %90
  %10062 = xor i64 3023866344627575824, %90
  %10063 = or i64 %10061, %10062
  %10064 = xor i64 %10060, %10053
  %10065 = xor i64 %10064, %10056
  %10066 = xor i64 %10065, %10063
  %10067 = xor i64 %10066, -3461241222976865865
  %10068 = xor i64 %10067, %10059
  %10069 = xor i64 %10068, %10055
  %10070 = and i64 %332, -1926518069913777747
  %10071 = or i64 1926518069913777746, %332
  %10072 = sub i64 %10071, 1926518069913777746
  %10073 = and i64 %181, -7450635850555872497
  %10074 = xor i64 %181, -1
  %10075 = or i64 7450635850555872496, %10074
  %10076 = xor i64 %10075, -1
  %10077 = and i64 %10076, -1
  %10078 = xor i64 %10070, %10077
  %10079 = xor i64 %10078, %10072
  %10080 = xor i64 %10079, 4177247930176498430
  %10081 = xor i64 %10080, %10073
  %10082 = mul i64 %10069, %10081
  %10083 = trunc i64 %10082 to i32
  %10084 = xor i32 %10052, %10083
  store i32 %10084, i32* %35, align 4
  %10085 = call i8** @bf4367541783002168146(i32* %35)
  %10086 = load i8*, i8** %10085, align 8
  indirectbr i8* %10086, [label %loopEnd, label %9981]

10087:                                            ; preds = %10087, %loopStart
  %.reload127 = load i64, i64* %.reg2mem125, align 8
  %10088 = icmp eq i64 %.reload127, 1761
  %10089 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %10090 = load i32, i32* %10089, align 4
  %10091 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 22
  %10092 = load i32, i32* %10091, align 4
  %10093 = sub i32 %10090, 1400175078
  %10094 = add i32 %10093, %10092
  %10095 = add i32 %10094, 1400175078
  store i32 %10095, i32* %dispatcher, align 4
  store i1 %10088, i1* %.reg2mem208, align 1
  %10096 = load i8*, i8** %388, align 8
  %10097 = load i8, i8* %10096, align 1
  %10098 = mul i8 %10097, 2
  %10099 = mul i8 %10097, 2
  %10100 = add i8 2, %10099
  %10101 = mul i8 %10098, %10100
  %10102 = srem i8 %10101, 4
  %10103 = icmp eq i8 %10102, 0
  %10104 = mul i8 %10097, %10097
  %10105 = add i8 %10104, %10097
  %10106 = srem i8 %10105, 2
  %10107 = icmp eq i8 %10106, 0
  %10108 = or i1 %10103, %10107
  %10109 = select i1 %10108, i32 595012122, i32 595012113
  %10110 = xor i32 %10109, 11
  store i32 %10110, i32* %35, align 4
  %10111 = call i8** @bf4367541783002168146(i32* %35)
  %10112 = load i8*, i8** %10111, align 8
  indirectbr i8* %10112, [label %loopEnd, label %10087]

codeRepl209:                                      ; preds = %codeRepl209, %loopStart
  %lt.cast215 = bitcast i1* %.loc210 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast215)
  %lt.cast216 = bitcast i1* %.loc211 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast216)
  %10113 = or i64 %2648, -838379789891427346
  %10114 = and i64 -838379789891427346, %2648
  %10115 = xor i64 -838379789891427346, %2648
  %10116 = or i64 %10114, %10115
  %10117 = add i64 %46, 3300010306653035184
  %10118 = sub i64 0, %46
  %10119 = add i64 -3300010306653035184, %10118
  %10120 = sub i64 0, %10119
  %10121 = xor i64 %10113, %10116
  %10122 = xor i64 %10121, %10120
  %10123 = xor i64 %10122, 3897583301888222597
  %10124 = xor i64 %10123, %10117
  %10125 = add i64 %251, -2861991852403989049
  %10126 = add i64 1312642862100230181, %251
  %10127 = sub i64 %10126, 4174634714504219230
  %10128 = and i64 %324, 4968773313979915629
  %10129 = xor i64 %324, -1
  %10130 = or i64 -4968773313979915630, %10129
  %10131 = xor i64 %10130, -1
  %10132 = and i64 %10131, -1
  %10133 = and i64 %181, -5390853815394606574
  %10134 = xor i64 %181, -1
  %10135 = or i64 5390853815394606573, %10134
  %10136 = xor i64 %10135, -1
  %10137 = and i64 %10136, -1
  %10138 = xor i64 %10132, %10128
  %10139 = xor i64 %10138, %10125
  %10140 = xor i64 %10139, %10127
  %10141 = xor i64 %10140, %10137
  %10142 = xor i64 %10141, %10133
  %10143 = xor i64 %10142, 5048150255133009637
  %10144 = mul i64 %10124, %10143
  store i64 %10144, i64* %1256, align 8
  %10145 = call i8** @lk4104490460174343886(i64* %1256)
  %10146 = load i8*, i8** %10145, align 8
  %10147 = bitcast i8* %10146 to i1 (i64, i64, i64, i1*, i1*)*
  %.reload31 = load i64, i64* %.reg2mem30, align 8
  %.reload36 = load i64, i64* %.reg2mem35, align 8
  %.reload128 = load i64, i64* %.reg2mem125, align 8
  %targetBlock212 = call i1 %10147(i64 %.reload128, i64 %.reload36, i64 %.reload31, i1* %.loc210, i1* %.loc211)
  %.reload213 = load i1, i1* %.loc210, align 1
  store i1 %.reload213, i1* %.reload213.reg2mem, align 1
  %.reload214 = load i1, i1* %.loc211, align 1
  store i1 %.reload214, i1* %.reload214.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast215)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast216)
  %10148 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 22
  %10149 = load i32, i32* %10148, align 4
  %10150 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 21
  %10151 = load i32, i32* %10150, align 4
  %10152 = add i32 %10149, %10151
  %10153 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 51
  %10154 = load i32, i32* %10153, align 4
  %10155 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 15
  %10156 = load i32, i32* %10155, align 4
  %10157 = sub i32 %10154, %10156
  %10158 = select i1 %targetBlock212, i32 %10152, i32 %10157
  store i32 %10158, i32* %dispatcher, align 4
  %10159 = load i8*, i8** %321, align 8
  %10160 = load i8, i8* %10159, align 1
  %10161 = xor i8 %10160, -2
  %10162 = and i8 %10161, %10160
  %10163 = icmp eq i8 %10162, 1
  %10164 = mul i8 %10160, %10160
  %10165 = add i8 %10164, %10160
  %10166 = srem i8 %10165, 2
  %10167 = icmp eq i8 %10166, 0
  %10168 = xor i1 %10163, true
  %10169 = and i1 %10168, false
  %10170 = and i1 %10163, true
  %10171 = or i1 %10169, %10170
  %10172 = xor i1 %10167, true
  %10173 = add i64 %4365, 3445062254061370842
  %10174 = sub i64 0, %4365
  %10175 = sub i64 3445062254061370842, %10174
  %10176 = and i64 %42, -8690001799095152432
  %10177 = xor i64 %42, -1
  %10178 = xor i64 -8690001799095152432, %10177
  %10179 = and i64 %10178, -8690001799095152432
  %10180 = add i64 %54, -6693258089278787803
  %10181 = add i64 -2145491526424719954, %54
  %10182 = sub i64 %10181, 4547766562854067849
  %10183 = xor i64 -4772024184877237269, %10176
  %10184 = xor i64 %10183, %10179
  %10185 = xor i64 %10184, %10175
  %10186 = xor i64 %10185, %10182
  %10187 = xor i64 %10186, %10180
  %10188 = xor i64 %10187, %10173
  %10189 = or i64 %1794, -2920201825431984219
  %10190 = xor i64 %1794, -1
  %10191 = and i64 %10190, 7744814492002483158
  %10192 = and i64 %1794, -7744814492002483159
  %10193 = or i64 %10191, %10192
  %10194 = xor i64 -4899282705344684941, %10193
  %10195 = xor i64 %1794, -1
  %10196 = or i64 2920201825431984218, %10195
  %10197 = xor i64 %10196, -1
  %10198 = and i64 %10197, -1
  %10199 = or i64 %10194, %10198
  %10200 = or i64 %177, 6638455925441348897
  %10201 = xor i64 %177, -1
  %10202 = and i64 %10201, 275238355985836575
  %10203 = and i64 %177, -275238355985836576
  %10204 = or i64 %10202, %10203
  %10205 = xor i64 6913412105666162494, %10204
  %10206 = xor i64 %177, -1
  %10207 = or i64 -6638455925441348898, %10206
  %10208 = xor i64 %10207, -1
  %10209 = and i64 %10208, -1
  %10210 = or i64 %10205, %10209
  %10211 = xor i64 %10210, 0
  %10212 = xor i64 %10211, %10200
  %10213 = xor i64 %10212, %10199
  %10214 = xor i64 %10213, %10189
  %10215 = mul i64 %10188, %10214
  %10216 = trunc i64 %10215 to i1
  %10217 = and i1 %10172, %10216
  %10218 = and i1 %10167, true
  %10219 = or i1 %10217, %10218
  %10220 = xor i1 %10171, %10219
  %10221 = xor i1 %10163, true
  %10222 = xor i1 %10167, true
  %10223 = or i1 %10221, %10222
  %10224 = xor i1 %10223, true
  %10225 = and i1 %10224, true
  %10226 = or i1 %10220, %10225
  %10227 = and i64 %2648, -964147445560944828
  %10228 = xor i64 %2648, -1
  %10229 = xor i64 -964147445560944828, %10228
  %10230 = and i64 %10229, -964147445560944828
  %10231 = or i64 %387, -7994232005558655345
  %10232 = xor i64 %387, -1
  %10233 = and i64 -7994232005558655345, %10232
  %10234 = add i64 %10233, %387
  %10235 = add i64 %36, 8462837510448087521
  %10236 = add i64 7915934468238621914, %36
  %10237 = add i64 %10236, 546903042209465607
  %10238 = xor i64 %10235, %10231
  %10239 = xor i64 %10238, 2939210913627909419
  %10240 = xor i64 %10239, %10237
  %10241 = xor i64 %10240, %10230
  %10242 = xor i64 %10241, %10227
  %10243 = xor i64 %10242, %10234
  %10244 = add i64 %42, 5150426344089954293
  %10245 = and i64 5150426344089954293, %42
  %10246 = or i64 5150426344089954293, %42
  %10247 = add i64 %10245, %10246
  %10248 = or i64 %278, 5243268684432845269
  %10249 = xor i64 %278, -1
  %10250 = and i64 5243268684432845269, %10249
  %10251 = add i64 %10250, %278
  %10252 = and i64 %334, -6737874076712563519
  %10253 = or i64 6737874076712563518, %334
  %10254 = sub i64 %10253, 6737874076712563518
  %10255 = xor i64 %10247, 8304581267697240148
  %10256 = xor i64 %10255, %10248
  %10257 = xor i64 %10256, %10254
  %10258 = xor i64 %10257, %10244
  %10259 = xor i64 %10258, %10251
  %10260 = xor i64 %10259, %10252
  %10261 = mul i64 %10243, %10260
  %10262 = trunc i64 %10261 to i32
  %10263 = select i1 %10226, i32 %10262, i32 595012113
  %10264 = xor i32 %10263, 13
  store i32 %10264, i32* %35, align 4
  %10265 = call i8** @bf4367541783002168146(i32* %35)
  %10266 = load i8*, i8** %10265, align 8
  indirectbr i8* %10266, [label %loopEnd, label %codeRepl209]

10267:                                            ; preds = %10267, %loopStart
  %10268 = sdiv i64 106, 1
  %10269 = mul i64 32, 81
  %10270 = sdiv i64 110, 117
  %10271 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 41
  %10272 = load i32, i32* %10271, align 4
  %10273 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %10274 = load i32, i32* %10273, align 4
  %10275 = srem i32 %10272, %10274
  %10276 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 36
  %10277 = load i32, i32* %10276, align 4
  %10278 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 3
  %10279 = load i32, i32* %10278, align 4
  %10280 = add i32 %10277, -394614702
  %10281 = sub i32 %10280, %10279
  %10282 = sub i32 %10281, -394614702
  %.reload214.reload = load i1, i1* %.reload214.reg2mem, align 1
  %10283 = select i1 %.reload214.reload, i32 %10275, i32 %10282
  store i32 %10283, i32* %dispatcher, align 4
  %10284 = load i8*, i8** %95, align 8
  %10285 = load i8, i8* %10284, align 1
  %10286 = and i8 %10285, 1
  %10287 = icmp eq i8 %10286, 1
  %10288 = mul i8 %10285, %10285
  %10289 = add i8 %10288, %10285
  %10290 = srem i8 %10289, 2
  %10291 = or i64 %52, -76141112369329880
  %10292 = xor i64 %52, -1
  %10293 = and i64 %10292, 6688988072913821762
  %10294 = and i64 %52, -6688988072913821763
  %10295 = or i64 %10293, %10294
  %10296 = xor i64 -6762874773036455574, %10295
  %10297 = xor i64 %52, -1
  %10298 = or i64 76141112369329879, %10297
  %10299 = xor i64 %10298, -1
  %10300 = and i64 %10299, -1
  %10301 = or i64 %10296, %10300
  %10302 = or i64 %3, 6843033757521947963
  %10303 = xor i64 %3, -1
  %10304 = and i64 %10303, -5239919737388620360
  %10305 = and i64 %3, 5239919737388620359
  %10306 = or i64 %10304, %10305
  %10307 = xor i64 -1603485767823357821, %10306
  %10308 = xor i64 %3, -1
  %10309 = or i64 -6843033757521947964, %10308
  %10310 = xor i64 %10309, -1
  %10311 = and i64 %10310, -1
  %10312 = or i64 %10307, %10311
  %10313 = xor i64 %10302, %10291
  %10314 = xor i64 %10313, %10301
  %10315 = xor i64 %10314, -3446827507026525559
  %10316 = xor i64 %10315, %10312
  %10317 = or i64 %3, 467551048668455656
  %10318 = and i64 467551048668455656, %3
  %10319 = xor i64 467551048668455656, %3
  %10320 = or i64 %10318, %10319
  %10321 = or i64 %120, 2857677823934641226
  %10322 = xor i64 %120, -1
  %10323 = and i64 %10322, 5483839963398962759
  %10324 = and i64 %120, -5483839963398962760
  %10325 = or i64 %10323, %10324
  %10326 = xor i64 7760266977387399693, %10325
  %10327 = xor i64 %120, -1
  %10328 = or i64 -2857677823934641227, %10327
  %10329 = xor i64 %10328, -1
  %10330 = and i64 %10329, -1
  %10331 = or i64 %10326, %10330
  %10332 = xor i64 %10321, 0
  %10333 = xor i64 %10332, %10320
  %10334 = xor i64 %10333, %10331
  %10335 = xor i64 %10334, %10317
  %10336 = mul i64 %10316, %10335
  %10337 = trunc i64 %10336 to i8
  %10338 = icmp eq i8 %10290, %10337
  %10339 = xor i1 %10287, true
  %10340 = add i64 %5086, -5164768202117607589
  %10341 = and i64 -5164768202117607589, %5086
  %10342 = or i64 -5164768202117607589, %5086
  %10343 = add i64 %10341, %10342
  %10344 = or i64 %3, 3743544804916717674
  %10345 = and i64 3743544804916717674, %3
  %10346 = xor i64 3743544804916717674, %3
  %10347 = or i64 %10345, %10346
  %10348 = xor i64 7050340140094492885, %10347
  %10349 = xor i64 %10348, %10343
  %10350 = xor i64 %10349, %10340
  %10351 = xor i64 %10350, %10344
  %10352 = and i64 %1428, 5953762707042252812
  %10353 = xor i64 %1428, -1
  %10354 = or i64 -5953762707042252813, %10353
  %10355 = xor i64 %10354, -1
  %10356 = and i64 %10355, -1
  %10357 = or i64 %100, 6639250633216833269
  %10358 = and i64 6639250633216833269, %100
  %10359 = xor i64 6639250633216833269, %100
  %10360 = or i64 %10358, %10359
  %10361 = xor i64 %10357, %10352
  %10362 = xor i64 %10361, %10360
  %10363 = xor i64 %10362, 0
  %10364 = xor i64 %10363, %10356
  %10365 = mul i64 %10351, %10364
  %10366 = trunc i64 %10365 to i1
  %10367 = and i1 %10339, %10366
  %10368 = and i1 %10287, true
  %10369 = or i1 %10367, %10368
  %10370 = xor i1 %10338, true
  %10371 = and i64 %3153, 2220801921496131210
  %10372 = xor i64 %3153, -1
  %10373 = xor i64 2220801921496131210, %10372
  %10374 = and i64 %10373, 2220801921496131210
  %10375 = add i64 %36, 8630099110611489866
  %10376 = sub i64 0, %36
  %10377 = add i64 -8630099110611489866, %10376
  %10378 = sub i64 0, %10377
  %10379 = or i64 %2865, -7854233347226857342
  %10380 = xor i64 %2865, -1
  %10381 = and i64 -7854233347226857342, %10380
  %10382 = add i64 %10381, %2865
  %10383 = xor i64 %10378, %10382
  %10384 = xor i64 %10383, 3058435501260132705
  %10385 = xor i64 %10384, %10371
  %10386 = xor i64 %10385, %10375
  %10387 = xor i64 %10386, %10379
  %10388 = xor i64 %10387, %10374
  %10389 = or i64 %179, 8779822285003416190
  %10390 = xor i64 %179, -1
  %10391 = and i64 8779822285003416190, %10390
  %10392 = add i64 %10391, %179
  %10393 = and i64 %334, 8144764819820483288
  %10394 = xor i64 %334, -1
  %10395 = xor i64 8144764819820483288, %10394
  %10396 = and i64 %10395, 8144764819820483288
  %10397 = xor i64 0, %10389
  %10398 = xor i64 %10397, %10396
  %10399 = xor i64 %10398, %10393
  %10400 = xor i64 %10399, %10392
  %10401 = mul i64 %10388, %10400
  %10402 = trunc i64 %10401 to i1
  %10403 = and i1 %10370, %10402
  %10404 = add i64 %50, 4428464960068002447
  %10405 = add i64 -5563947233570127831, %50
  %10406 = add i64 %10405, -8454331880071421338
  %10407 = add i64 %58, 5425920153170923325
  %10408 = and i64 5425920153170923325, %58
  %10409 = or i64 5425920153170923325, %58
  %10410 = add i64 %10408, %10409
  %10411 = and i64 %48, 4815987437755346977
  %10412 = xor i64 %48, -1
  %10413 = or i64 -4815987437755346978, %10412
  %10414 = xor i64 %10413, -1
  %10415 = and i64 %10414, -1
  %10416 = xor i64 %10406, %10411
  %10417 = xor i64 %10416, -8846343187733475115
  %10418 = xor i64 %10417, %10407
  %10419 = xor i64 %10418, %10410
  %10420 = xor i64 %10419, %10415
  %10421 = xor i64 %10420, %10404
  %10422 = or i64 %175, -6248743003213561518
  %10423 = xor i64 %175, -1
  %10424 = and i64 -6248743003213561518, %10423
  %10425 = add i64 %10424, %175
  %10426 = and i64 %46, -2047900838012176575
  %10427 = xor i64 %46, -1
  %10428 = or i64 2047900838012176574, %10427
  %10429 = xor i64 %10428, -1
  %10430 = and i64 %10429, -1
  %10431 = add i64 %4019, 3141712667434514467
  %10432 = add i64 -8204025653698046758, %4019
  %10433 = sub i64 %10432, 7101005752576990391
  %10434 = xor i64 %10431, -6285432085789169539
  %10435 = xor i64 %10434, %10430
  %10436 = xor i64 %10435, %10422
  %10437 = xor i64 %10436, %10426
  %10438 = xor i64 %10437, %10433
  %10439 = xor i64 %10438, %10425
  %10440 = mul i64 %10421, %10439
  %10441 = trunc i64 %10440 to i1
  %10442 = and i1 %10338, %10441
  %10443 = or i1 %10403, %10442
  %10444 = xor i1 %10369, %10443
  %10445 = xor i1 %10287, true
  %10446 = xor i1 %10338, true
  %10447 = or i1 %10445, %10446
  %10448 = xor i1 %10447, true
  %10449 = and i1 %10448, true
  %10450 = or i1 %10444, %10449
  %10451 = and i64 %106, -3626836621879316156
  %10452 = xor i64 %106, -1
  %10453 = or i64 3626836621879316155, %10452
  %10454 = xor i64 %10453, -1
  %10455 = and i64 %10454, -1
  %10456 = or i64 %48, -4333568177668841226
  %10457 = xor i64 %48, -1
  %10458 = and i64 %10457, -143928564816274779
  %10459 = and i64 %48, 143928564816274778
  %10460 = or i64 %10458, %10459
  %10461 = xor i64 4457643376321542739, %10460
  %10462 = xor i64 %48, -1
  %10463 = or i64 4333568177668841225, %10462
  %10464 = xor i64 %10463, -1
  %10465 = and i64 %10464, -1
  %10466 = or i64 %10461, %10465
  %10467 = xor i64 %10466, %10455
  %10468 = xor i64 %10467, 5452109657691340165
  %10469 = xor i64 %10468, %10451
  %10470 = xor i64 %10469, %10456
  %10471 = and i64 %3431, -100534739858149528
  %10472 = xor i64 %3431, -1
  %10473 = or i64 100534739858149527, %10472
  %10474 = xor i64 %10473, -1
  %10475 = and i64 %10474, -1
  %10476 = and i64 %96, -2364133110356572374
  %10477 = xor i64 %96, -1
  %10478 = or i64 2364133110356572373, %10477
  %10479 = xor i64 %10478, -1
  %10480 = and i64 %10479, -1
  %10481 = xor i64 %10476, %10471
  %10482 = xor i64 %10481, %10475
  %10483 = xor i64 %10482, %10480
  %10484 = xor i64 %10483, -3603009219962257425
  %10485 = mul i64 %10470, %10484
  %10486 = trunc i64 %10485 to i32
  %10487 = select i1 %10450, i32 %10486, i32 595012113
  %10488 = xor i32 %10487, 58
  store i32 %10488, i32* %35, align 4
  %10489 = call i8** @bf4367541783002168146(i32* %35)
  %10490 = load i8*, i8** %10489, align 8
  indirectbr i8* %10490, [label %loopEnd, label %10267]

10491:                                            ; preds = %10491, %loopStart
  %10492 = sdiv i64 106, 1
  %10493 = mul i64 32, 81
  %10494 = sdiv i64 110, 117
  %10495 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %10496 = load i32, i32* %10495, align 4
  %10497 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 21
  %10498 = load i32, i32* %10497, align 4
  %10499 = add i32 %10496, %10498
  store i32 %10499, i32* %dispatcher, align 4
  %10500 = load i8*, i8** %392, align 8
  %10501 = load i8, i8* %10500, align 1
  %10502 = mul i8 %10501, 2
  %10503 = add i64 %391, -2413336100159087656
  %10504 = sub i64 0, %391
  %10505 = add i64 2413336100159087656, %10504
  %10506 = sub i64 0, %10505
  %10507 = and i64 %389, -457821813226524078
  %10508 = xor i64 %389, -1
  %10509 = or i64 457821813226524077, %10508
  %10510 = xor i64 %10509, -1
  %10511 = and i64 %10510, -1
  %10512 = add i64 %332, -19819869370182961
  %10513 = xor i64 -19819869370182961, %332
  %10514 = and i64 -19819869370182961, %332
  %10515 = mul i64 2, %10514
  %10516 = add i64 %10513, %10515
  %10517 = xor i64 %10516, %10506
  %10518 = xor i64 %10517, -6887943565882888967
  %10519 = xor i64 %10518, %10511
  %10520 = xor i64 %10519, %10512
  %10521 = xor i64 %10520, %10507
  %10522 = xor i64 %10521, %10503
  %10523 = add i64 %106, -4972597292119146905
  %10524 = add i64 3408875314313687182, %106
  %10525 = add i64 %10524, -8381472606432834087
  %10526 = or i64 %181, 7907291886067460133
  %10527 = xor i64 %181, -1
  %10528 = and i64 7907291886067460133, %10527
  %10529 = add i64 %10528, %181
  %10530 = xor i64 %10526, 3172516182274091666
  %10531 = xor i64 %10530, %10529
  %10532 = xor i64 %10531, %10525
  %10533 = xor i64 %10532, %10523
  %10534 = mul i64 %10522, %10533
  %10535 = trunc i64 %10534 to i8
  %10536 = mul i8 %10501, %10535
  %10537 = add i8 -98, %10536
  %10538 = or i64 %106, -1492013674040960870
  %10539 = xor i64 %106, -1
  %10540 = and i64 -1492013674040960870, %10539
  %10541 = add i64 %10540, %106
  %10542 = add i64 %4586, -8382581764021999151
  %10543 = add i64 -5594475174598214163, %4586
  %10544 = add i64 %10543, -2788106589423784988
  %10545 = xor i64 %10544, %10541
  %10546 = xor i64 %10545, %10538
  %10547 = xor i64 %10546, %10542
  %10548 = xor i64 %10547, -884660663404165235
  %10549 = and i64 %4826, 6264567573726012621
  %10550 = or i64 -6264567573726012622, %4826
  %10551 = sub i64 %10550, -6264567573726012622
  %10552 = add i64 %3588, -6155408280580763131
  %10553 = sub i64 0, %3588
  %10554 = add i64 6155408280580763131, %10553
  %10555 = sub i64 0, %10554
  %10556 = add i64 %173, -6290029262045895500
  %10557 = and i64 -6290029262045895500, %173
  %10558 = or i64 -6290029262045895500, %173
  %10559 = add i64 %10557, %10558
  %10560 = xor i64 %10556, -2656295063451629836
  %10561 = xor i64 %10560, %10555
  %10562 = xor i64 %10561, %10559
  %10563 = xor i64 %10562, %10552
  %10564 = xor i64 %10563, %10549
  %10565 = xor i64 %10564, %10551
  %10566 = mul i64 %10548, %10565
  %10567 = trunc i64 %10566 to i8
  %10568 = add i8 %10537, %10567
  %10569 = mul i8 %10502, %10568
  %10570 = srem i8 %10569, 4
  %10571 = add i64 %110, 625032098327374238
  %10572 = add i64 6973251382680596558, %110
  %10573 = add i64 %10572, -6348219284353222320
  %10574 = add i64 %278, 6641322002296766502
  %10575 = and i64 6641322002296766502, %278
  %10576 = or i64 6641322002296766502, %278
  %10577 = add i64 %10575, %10576
  %10578 = xor i64 %10574, %10573
  %10579 = xor i64 %10578, %10571
  %10580 = xor i64 %10579, %10577
  %10581 = xor i64 %10580, 5856403174197339037
  %10582 = add i64 %46, -3102233785254442211
  %10583 = xor i64 -3102233785254442211, %46
  %10584 = and i64 -3102233785254442211, %46
  %10585 = mul i64 2, %10584
  %10586 = add i64 %10583, %10585
  %10587 = or i64 %118, 3459165771131389864
  %10588 = xor i64 %118, -1
  %10589 = and i64 %10588, 8527396211044346986
  %10590 = and i64 %118, -8527396211044346987
  %10591 = or i64 %10589, %10590
  %10592 = xor i64 5068248723494366146, %10591
  %10593 = xor i64 %118, -1
  %10594 = or i64 -3459165771131389865, %10593
  %10595 = xor i64 %10594, -1
  %10596 = and i64 %10595, -1
  %10597 = or i64 %10592, %10596
  %10598 = and i64 %1428, -6792826856291178736
  %10599 = xor i64 %1428, -1
  %10600 = or i64 6792826856291178735, %10599
  %10601 = xor i64 %10600, -1
  %10602 = and i64 %10601, -1
  %10603 = xor i64 %10597, 0
  %10604 = xor i64 %10603, %10582
  %10605 = xor i64 %10604, %10586
  %10606 = xor i64 %10605, %10602
  %10607 = xor i64 %10606, %10587
  %10608 = xor i64 %10607, %10598
  %10609 = mul i64 %10581, %10608
  %10610 = trunc i64 %10609 to i8
  %10611 = icmp eq i8 %10570, %10610
  %10612 = mul i8 %10501, %10501
  %10613 = mul i8 %10612, %10501
  %10614 = add i8 %10613, %10501
  %10615 = srem i8 %10614, 2
  %10616 = icmp eq i8 %10615, 0
  %10617 = and i1 %10611, %10616
  %10618 = select i1 %10617, i32 595012142, i32 595012113
  %10619 = xor i32 %10618, 63
  store i32 %10619, i32* %35, align 4
  %10620 = call i8** @bf4367541783002168146(i32* %35)
  %10621 = load i8*, i8** %10620, align 8
  indirectbr i8* %10621, [label %loopEnd, label %10491]

10622:                                            ; preds = %10622, %loopStart
  %10623 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 42
  %10624 = load i32, i32* %10623, align 4
  %10625 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %10626 = load i32, i32* %10625, align 4
  %10627 = srem i32 %10624, %10626
  store i32 %10627, i32* %dispatcher, align 4
  %.reload213.reload = load i1, i1* %.reload213.reg2mem, align 1
  store i1 %.reload213.reload, i1* %.reg2mem208, align 1
  %10628 = load i8*, i8** %109, align 8
  %10629 = load i8, i8* %10628, align 1
  %10630 = mul i8 %10629, %10629
  %10631 = add i8 %10630, %10629
  %10632 = add i64 %4826, -907767897682245862
  %10633 = add i64 -3964157388249751826, %4826
  %10634 = add i64 %10633, 3056389490567505964
  %10635 = or i64 %48, 926889811525364539
  %10636 = xor i64 %48, -1
  %10637 = and i64 %10636, 2253206051129932520
  %10638 = and i64 %48, -2253206051129932521
  %10639 = or i64 %10637, %10638
  %10640 = xor i64 1411886902436024787, %10639
  %10641 = xor i64 %48, -1
  %10642 = or i64 -926889811525364540, %10641
  %10643 = xor i64 %10642, -1
  %10644 = and i64 %10643, -1
  %10645 = or i64 %10640, %10644
  %10646 = add i64 %46, -1597081348514676014
  %10647 = add i64 -3664007338260776363, %46
  %10648 = add i64 %10647, 2066925989746100349
  %10649 = xor i64 %10645, %10632
  %10650 = xor i64 %10649, %10648
  %10651 = xor i64 %10650, %10635
  %10652 = xor i64 %10651, %10634
  %10653 = xor i64 %10652, 8388811832780058513
  %10654 = xor i64 %10653, %10646
  %10655 = or i64 %3431, -4425905334256520419
  %10656 = xor i64 %3431, -1
  %10657 = and i64 %10656, 2193048235580809746
  %10658 = and i64 %3431, -2193048235580809747
  %10659 = or i64 %10657, %10658
  %10660 = xor i64 -2523349172393520881, %10659
  %10661 = xor i64 %3431, -1
  %10662 = or i64 4425905334256520418, %10661
  %10663 = xor i64 %10662, -1
  %10664 = and i64 %10663, -1
  %10665 = or i64 %10660, %10664
  %10666 = add i64 %3431, 8005474914432695174
  %10667 = sub i64 0, %3431
  %10668 = add i64 -8005474914432695174, %10667
  %10669 = sub i64 0, %10668
  %10670 = and i64 %114, 3207945111424817054
  %10671 = xor i64 %114, -1
  %10672 = or i64 -3207945111424817055, %10671
  %10673 = xor i64 %10672, -1
  %10674 = and i64 %10673, -1
  %10675 = xor i64 %10666, %10670
  %10676 = xor i64 %10675, %10655
  %10677 = xor i64 %10676, -7548539904906161069
  %10678 = xor i64 %10677, %10669
  %10679 = xor i64 %10678, %10674
  %10680 = xor i64 %10679, %10665
  %10681 = mul i64 %10654, %10680
  %10682 = trunc i64 %10681 to i8
  %10683 = mul i8 %10631, %10682
  %10684 = srem i8 %10683, 2
  %10685 = icmp eq i8 %10684, 0
  %10686 = mul i8 %10629, %10629
  %10687 = add i8 %10686, %10629
  %10688 = srem i8 %10687, 2
  %10689 = icmp eq i8 %10688, 0
  %10690 = and i1 %10685, %10689
  %10691 = select i1 %10690, i32 595012126, i32 595012113
  %10692 = xor i32 %10691, -1204822567
  %10693 = xor i32 %10692, -1204822570
  store i32 %10693, i32* %35, align 4
  %10694 = call i8** @bf4367541783002168146(i32* %35)
  %10695 = load i8*, i8** %10694, align 8
  indirectbr i8* %10695, [label %loopEnd, label %10622]

10696:                                            ; preds = %10696, %loopStart
  %.reload209 = load i1, i1* %.reg2mem208, align 1
  %10697 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 29
  %10698 = load i32, i32* %10697, align 4
  %10699 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %10700 = load i32, i32* %10699, align 4
  %10701 = add i32 %10698, %10700
  %10702 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %10703 = load i32, i32* %10702, align 4
  %10704 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 22
  %10705 = load i32, i32* %10704, align 4
  %10706 = and i32 %10703, %10705
  %10707 = or i32 %10703, %10705
  %10708 = add i32 %10706, %10707
  %10709 = select i1 %.reload209, i32 %10701, i32 %10708
  store i32 %10709, i32* %dispatcher, align 4
  %.reload129 = load i64, i64* %.reg2mem125, align 8
  store i64 %.reload129, i64* %.reg2mem210, align 8
  store i32 0, i32* %.ph.reg2mem, align 4
  %10710 = load i8*, i8** %252, align 8
  %10711 = load i8, i8* %10710, align 1
  %10712 = xor i8 %10711, -2
  %10713 = and i8 %10712, %10711
  %10714 = icmp eq i8 %10713, 1
  %10715 = mul i8 %10711, %10711
  %10716 = xor i8 %10715, %10711
  %10717 = and i8 %10715, %10711
  %10718 = mul i8 2, %10717
  %10719 = add i8 %10716, %10718
  %10720 = mul i8 39, %10719
  %10721 = or i64 %118, 4156355637037893104
  %10722 = xor i64 %118, -1
  %10723 = and i64 4156355637037893104, %10722
  %10724 = add i64 %10723, %118
  %10725 = and i64 %108, -4739367642419844539
  %10726 = xor i64 %108, -1
  %10727 = xor i64 -4739367642419844539, %10726
  %10728 = and i64 %10727, -4739367642419844539
  %10729 = and i64 %253, -8946538143359764774
  %10730 = xor i64 %253, -1
  %10731 = or i64 8946538143359764773, %10730
  %10732 = xor i64 %10731, -1
  %10733 = and i64 %10732, -1
  %10734 = xor i64 %10733, %10721
  %10735 = xor i64 %10734, %10728
  %10736 = xor i64 %10735, %10729
  %10737 = xor i64 %10736, %10725
  %10738 = xor i64 %10737, %10724
  %10739 = xor i64 %10738, -7094577643282227319
  %10740 = and i64 %2865, 9080026345293866120
  %10741 = or i64 -9080026345293866121, %2865
  %10742 = sub i64 %10741, -9080026345293866121
  %10743 = and i64 %2342, 8037849768769099865
  %10744 = xor i64 %2342, -1
  %10745 = or i64 -8037849768769099866, %10744
  %10746 = xor i64 %10745, -1
  %10747 = and i64 %10746, -1
  %10748 = xor i64 3897941816752773791, %10740
  %10749 = xor i64 %10748, %10747
  %10750 = xor i64 %10749, %10742
  %10751 = xor i64 %10750, %10743
  %10752 = mul i64 %10739, %10751
  %10753 = trunc i64 %10752 to i8
  %10754 = add i8 %10753, %10720
  %10755 = mul i8 -105, %10754
  %10756 = add i8 111, %10755
  %10757 = sext i32 %dispatcher1 to i64
  %10758 = and i64 %10757, 4403070291818212202
  %10759 = xor i64 %10757, -1
  %10760 = or i64 -4403070291818212203, %10759
  %10761 = xor i64 %10760, -1
  %10762 = and i64 %10761, -1
  %10763 = add i64 %4019, 5668109751335430386
  %10764 = xor i64 5668109751335430386, %4019
  %10765 = and i64 5668109751335430386, %4019
  %10766 = mul i64 2, %10765
  %10767 = add i64 %10764, %10766
  %10768 = xor i64 %10758, %10767
  %10769 = xor i64 %10768, %10763
  %10770 = xor i64 %10769, %10762
  %10771 = xor i64 %10770, -8893494308917513309
  %10772 = or i64 %4586, -8441630835816258160
  %10773 = and i64 -8441630835816258160, %4586
  %10774 = xor i64 -8441630835816258160, %4586
  %10775 = or i64 %10773, %10774
  %10776 = add i64 %326, 4082821109837173866
  %10777 = add i64 -3130905715391308990, %326
  %10778 = add i64 %10777, 7213726825228482856
  %10779 = and i64 %253, 6985907065599147418
  %10780 = xor i64 %253, -1
  %10781 = or i64 -6985907065599147419, %10780
  %10782 = xor i64 %10781, -1
  %10783 = and i64 %10782, -1
  %10784 = xor i64 %10779, -8723090007616868330
  %10785 = xor i64 %10784, %10783
  %10786 = xor i64 %10785, %10772
  %10787 = xor i64 %10786, %10776
  %10788 = xor i64 %10787, %10775
  %10789 = xor i64 %10788, %10778
  %10790 = mul i64 %10771, %10789
  %10791 = trunc i64 %10790 to i8
  %10792 = srem i8 %10756, %10791
  %10793 = icmp eq i8 %10792, 0
  %10794 = or i1 %10714, %10793
  %10795 = select i1 %10794, i32 595012113, i32 595012113
  %10796 = xor i32 %10795, 0
  store i32 %10796, i32* %35, align 4
  %10797 = call i8** @bf4367541783002168146(i32* %35)
  %10798 = load i8*, i8** %10797, align 8
  indirectbr i8* %10798, [label %loopEnd, label %10696]

10799:                                            ; preds = %10799, %loopStart
  %.reload211 = load i64, i64* %.reg2mem210, align 8
  store i64 %.reload211, i64* %.reg2mem114, align 8
  %.reload117 = load i64, i64* %.reg2mem114, align 8
  %10800 = trunc i64 %.reload117 to i32
  store i32 %10800, i32* %.reg2mem118, align 4
  %.reload120 = load i32, i32* %.reg2mem118, align 4
  %10801 = urem i32 %.reload120, 80
  store i32 %10801, i32* %.reg2mem122, align 4
  %.reload123 = load i32, i32* %.reg2mem122, align 4
  %10802 = icmp eq i32 %.reload123, 0
  %10803 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 29
  %10804 = load i32, i32* %10803, align 4
  %10805 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 27
  %10806 = load i32, i32* %10805, align 4
  %10807 = add i32 %10804, %10806
  %10808 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 44
  %10809 = load i32, i32* %10808, align 4
  %10810 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %10811 = load i32, i32* %10810, align 4
  %10812 = srem i32 %10809, %10811
  %10813 = select i1 %10802, i32 %10807, i32 %10812
  store i32 %10813, i32* %dispatcher, align 4
  store i32 10, i32* %.reg2mem212, align 4
  %10814 = load i8*, i8** %43, align 8
  %10815 = load i8, i8* %10814, align 1
  %10816 = add i64 %328, -8639299574811676486
  %10817 = sub i64 0, %328
  %10818 = sub i64 -8639299574811676486, %10817
  %10819 = or i64 %212, 7797199489133333794
  %10820 = and i64 7797199489133333794, %212
  %10821 = xor i64 7797199489133333794, %212
  %10822 = or i64 %10820, %10821
  %10823 = xor i64 %10816, %10819
  %10824 = xor i64 %10823, %10822
  %10825 = xor i64 %10824, 2364067826862186579
  %10826 = xor i64 %10825, %10818
  %10827 = and i64 %58, -8814118957285234565
  %10828 = xor i64 %58, -1
  %10829 = xor i64 -8814118957285234565, %10828
  %10830 = and i64 %10829, -8814118957285234565
  %10831 = and i64 %52, -1722162722846833396
  %10832 = xor i64 %52, -1
  %10833 = xor i64 -1722162722846833396, %10832
  %10834 = and i64 %10833, -1722162722846833396
  %10835 = and i64 %52, -5734534434742594504
  %10836 = xor i64 %52, -1
  %10837 = or i64 5734534434742594503, %10836
  %10838 = xor i64 %10837, -1
  %10839 = and i64 %10838, -1
  %10840 = xor i64 %10834, %10827
  %10841 = xor i64 %10840, %10835
  %10842 = xor i64 %10841, %10831
  %10843 = xor i64 %10842, %10839
  %10844 = xor i64 %10843, 6629752361376597942
  %10845 = xor i64 %10844, %10830
  %10846 = mul i64 %10826, %10845
  %10847 = trunc i64 %10846 to i8
  %10848 = mul i8 %10815, %10847
  %10849 = mul i8 %10815, 2
  %10850 = add i8 2, %10849
  %10851 = mul i8 %10848, %10850
  %10852 = srem i8 %10851, 4
  %10853 = icmp eq i8 %10852, 0
  %10854 = mul i8 %10815, %10815
  %10855 = mul i8 %10854, %10815
  %10856 = add i8 %10855, %10815
  %10857 = srem i8 %10856, 2
  %10858 = icmp eq i8 %10857, 0
  %10859 = and i1 %10853, %10858
  %10860 = select i1 %10859, i32 595012126, i32 595012113
  %10861 = xor i32 %10860, 15
  store i32 %10861, i32* %35, align 4
  %10862 = call i8** @bf4367541783002168146(i32* %35)
  %10863 = load i8*, i8** %10862, align 8
  indirectbr i8* %10863, [label %loopEnd, label %10799]

codeRepl217:                                      ; preds = %codeRepl217, %loopStart
  %lt.cast225 = bitcast i32* %.loc218 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast225)
  %lt.cast226 = bitcast i64* %.loc219 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast226)
  %lt.cast227 = bitcast i64* %.loc220 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast227)
  %10864 = and i64 %322, 6909290381146010835
  %10865 = xor i64 %322, -1
  %10866 = xor i64 6909290381146010835, %10865
  %10867 = and i64 %10866, 6909290381146010835
  %10868 = and i64 %116, -843481470146536786
  %10869 = xor i64 %116, -1
  %10870 = or i64 843481470146536785, %10869
  %10871 = xor i64 %10870, -1
  %10872 = and i64 %10871, -1
  %10873 = and i64 %330, 648556698479540235
  %10874 = xor i64 %330, -1
  %10875 = or i64 -648556698479540236, %10874
  %10876 = xor i64 %10875, -1
  %10877 = and i64 %10876, -1
  %10878 = xor i64 %10868, %10864
  %10879 = xor i64 %10878, %10877
  %10880 = xor i64 %10879, %10867
  %10881 = xor i64 %10880, -6013531904745765813
  %10882 = xor i64 %10881, %10873
  %10883 = xor i64 %10882, %10872
  %10884 = and i64 %387, 8806938351473780785
  %10885 = xor i64 %387, -1
  %10886 = or i64 -8806938351473780786, %10885
  %10887 = xor i64 %10886, -1
  %10888 = and i64 %10887, -1
  %10889 = or i64 %2865, -1968523684184743919
  %10890 = xor i64 %2865, -1
  %10891 = and i64 %10890, -1878820639150438419
  %10892 = and i64 %2865, 1878820639150438418
  %10893 = or i64 %10891, %10892
  %10894 = xor i64 91040348070848508, %10893
  %10895 = xor i64 %2865, -1
  %10896 = or i64 1968523684184743918, %10895
  %10897 = xor i64 %10896, -1
  %10898 = and i64 %10897, -1
  %10899 = or i64 %10894, %10898
  %10900 = xor i64 %10889, 4727260102332340613
  %10901 = xor i64 %10900, %10884
  %10902 = xor i64 %10901, %10888
  %10903 = xor i64 %10902, %10899
  %10904 = mul i64 %10883, %10903
  store i64 %10904, i64* %1256, align 8
  %10905 = call i8** @lk4104490460174343886(i64* %1256)
  %10906 = load i8*, i8** %10905, align 8
  %10907 = bitcast i8* %10906 to i1 (i8*, i64, i64, i32*, i64*, i64*)*
  %.reload116 = load i64, i64* %.reg2mem114, align 8
  %targetBlock221 = call i1 %10907(i8* %2, i64 %.reload116, i64 %3, i32* %.loc218, i64* %.loc219, i64* %.loc220)
  %.reload222 = load i32, i32* %.loc218, align 4
  store i32 %.reload222, i32* %.reload222.reg2mem, align 4
  %.reload223 = load i64, i64* %.loc219, align 8
  store i64 %.reload223, i64* %.reload223.reg2mem, align 8
  %.reload224 = load i64, i64* %.loc220, align 8
  store i64 %.reload224, i64* %.reload224.reg2mem, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast225)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast226)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast227)
  %10908 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 25
  %10909 = load i32, i32* %10908, align 4
  %10910 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %10911 = load i32, i32* %10910, align 4
  %10912 = and i64 %391, 1226019874250407194
  %10913 = or i64 -1226019874250407195, %391
  %10914 = sub i64 %10913, -1226019874250407195
  %10915 = or i64 %90, -8005853534560847338
  %10916 = xor i64 %90, -1
  %10917 = and i64 %10916, -6290534117405356567
  %10918 = and i64 %90, 6290534117405356566
  %10919 = or i64 %10917, %10918
  %10920 = xor i64 4059702783096780799, %10919
  %10921 = xor i64 %90, -1
  %10922 = or i64 8005853534560847337, %10921
  %10923 = xor i64 %10922, -1
  %10924 = and i64 %10923, -1
  %10925 = or i64 %10920, %10924
  %10926 = xor i64 %10912, %10925
  %10927 = xor i64 %10926, %10915
  %10928 = xor i64 %10927, %10914
  %10929 = xor i64 %10928, -6312177810971078667
  %10930 = or i64 %3153, -6234146901814245735
  %10931 = xor i64 %3153, -1
  %10932 = and i64 -6234146901814245735, %10931
  %10933 = add i64 %10932, %3153
  %10934 = add i64 %336, -86352681112994927
  %10935 = and i64 -86352681112994927, %336
  %10936 = or i64 -86352681112994927, %336
  %10937 = add i64 %10935, %10936
  %10938 = xor i64 %10934, %10937
  %10939 = xor i64 %10938, %10933
  %10940 = xor i64 %10939, 0
  %10941 = xor i64 %10940, %10930
  %10942 = mul i64 %10929, %10941
  %10943 = trunc i64 %10942 to i32
  %10944 = sub i32 %10943, %10911
  %10945 = sub i32 %10909, %10944
  %10946 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 25
  %10947 = load i32, i32* %10946, align 4
  %10948 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 23
  %10949 = load i32, i32* %10948, align 4
  %10950 = xor i32 %10947, %10949
  %10951 = and i32 %10947, %10949
  %10952 = mul i32 2, %10951
  %10953 = add i32 %10950, %10952
  %10954 = select i1 %targetBlock221, i32 %10945, i32 %10953
  store i32 %10954, i32* %dispatcher, align 4
  %10955 = load i8*, i8** %392, align 8
  %10956 = load i8, i8* %10955, align 1
  %10957 = mul i8 %10956, 2
  %10958 = mul i8 %10956, 2
  %10959 = add i8 2, %10958
  %10960 = mul i8 %10957, %10959
  %10961 = srem i8 %10960, 4
  %10962 = icmp eq i8 %10961, 0
  %10963 = mul i8 %10956, %10956
  %10964 = sub i8 0, %10963
  %10965 = sub i8 0, %10956
  %10966 = add i8 %10964, %10965
  %10967 = sub i8 0, %10966
  %10968 = srem i8 %10967, 2
  %10969 = icmp eq i8 %10968, 0
  %10970 = or i1 %10962, %10969
  %10971 = and i64 %179, 6605080765600977972
  %10972 = xor i64 %179, -1
  %10973 = xor i64 6605080765600977972, %10972
  %10974 = and i64 %10973, 6605080765600977972
  %10975 = add i64 %2342, -9045711824271492269
  %10976 = sub i64 0, %2342
  %10977 = sub i64 -9045711824271492269, %10976
  %10978 = add i64 %393, 4019173202270258539
  %10979 = and i64 4019173202270258539, %393
  %10980 = or i64 4019173202270258539, %393
  %10981 = add i64 %10979, %10980
  %10982 = xor i64 %10978, %10977
  %10983 = xor i64 %10982, %10981
  %10984 = xor i64 %10983, 9186440035150633907
  %10985 = xor i64 %10984, %10974
  %10986 = xor i64 %10985, %10975
  %10987 = xor i64 %10986, %10971
  %10988 = or i64 %2020, 6812045745404457141
  %10989 = xor i64 %2020, -1
  %10990 = and i64 %10989, 1387037567562744187
  %10991 = and i64 %2020, -1387037567562744188
  %10992 = or i64 %10990, %10991
  %10993 = xor i64 5599804826653831630, %10992
  %10994 = xor i64 %2020, -1
  %10995 = or i64 -6812045745404457142, %10994
  %10996 = xor i64 %10995, -1
  %10997 = and i64 %10996, -1
  %10998 = or i64 %10993, %10997
  %10999 = add i64 %1794, -2300085931798428323
  %11000 = add i64 5005686919831669394, %1794
  %11001 = sub i64 %11000, 7305772851630097717
  %11002 = xor i64 %10988, %11001
  %11003 = xor i64 %11002, -2877111279907064307
  %11004 = xor i64 %11003, %10999
  %11005 = xor i64 %11004, %10998
  %11006 = mul i64 %10987, %11005
  %11007 = trunc i64 %11006 to i32
  %11008 = select i1 %10970, i32 %11007, i32 595012113
  %11009 = xor i32 %11008, -1
  %11010 = add i64 %104, -1917852960139672788
  %11011 = sub i64 0, %104
  %11012 = add i64 1917852960139672788, %11011
  %11013 = sub i64 0, %11012
  %11014 = add i64 %42, 8412142036871275194
  %11015 = and i64 8412142036871275194, %42
  %11016 = or i64 8412142036871275194, %42
  %11017 = add i64 %11015, %11016
  %11018 = or i64 %118, 2786768892404334498
  %11019 = and i64 2786768892404334498, %118
  %11020 = xor i64 2786768892404334498, %118
  %11021 = or i64 %11019, %11020
  %11022 = xor i64 %11017, %11010
  %11023 = xor i64 %11022, %11018
  %11024 = xor i64 %11023, %11013
  %11025 = xor i64 %11024, %11021
  %11026 = xor i64 %11025, %11014
  %11027 = xor i64 %11026, 6695143780639238095
  %11028 = add i64 %2865, 7409378473561704783
  %11029 = sub i64 0, %2865
  %11030 = add i64 -7409378473561704783, %11029
  %11031 = sub i64 0, %11030
  %11032 = or i64 %387, -2601964087561494111
  %11033 = and i64 -2601964087561494111, %387
  %11034 = xor i64 -2601964087561494111, %387
  %11035 = or i64 %11033, %11034
  %11036 = and i64 %4826, 4815703677071262469
  %11037 = xor i64 %4826, -1
  %11038 = or i64 -4815703677071262470, %11037
  %11039 = xor i64 %11038, -1
  %11040 = and i64 %11039, -1
  %11041 = xor i64 %11031, %11032
  %11042 = xor i64 %11041, %11035
  %11043 = xor i64 %11042, %11028
  %11044 = xor i64 %11043, 4143561025553465773
  %11045 = xor i64 %11044, %11040
  %11046 = xor i64 %11045, %11036
  %11047 = mul i64 %11027, %11046
  %11048 = trunc i64 %11047 to i32
  %11049 = and i32 %11009, %11048
  %11050 = and i32 %11008, 1899366940
  %11051 = or i32 %11049, %11050
  %11052 = xor i32 %11051, -1899366939
  store i32 %11052, i32* %35, align 4
  %11053 = call i8** @bf4367541783002168146(i32* %35)
  %11054 = load i8*, i8** %11053, align 8
  indirectbr i8* %11054, [label %loopEnd, label %codeRepl217]

11055:                                            ; preds = %11055, %loopStart
  %11056 = sub i64 1546192836524951090, 1546192836524950907
  %11057 = sdiv i64 40, 57
  %11058 = sdiv i64 88, 64
  %11059 = or i64 %330, -3526120031670044286
  %11060 = xor i64 %330, -1
  %11061 = and i64 -3526120031670044286, %11060
  %11062 = add i64 %11061, %330
  %11063 = or i64 %98, -177116636426701009
  %11064 = and i64 -177116636426701009, %98
  %11065 = xor i64 -177116636426701009, %98
  %11066 = or i64 %11064, %11065
  %11067 = xor i64 %11059, %11066
  %11068 = xor i64 %11067, %11062
  %11069 = xor i64 %11068, 2454658825672871167
  %11070 = xor i64 %11069, %11063
  %11071 = and i64 %330, 7424896057262914226
  %11072 = xor i64 %330, -1
  %11073 = xor i64 7424896057262914226, %11072
  %11074 = and i64 %11073, 7424896057262914226
  %11075 = add i64 %171, 7638154240109783904
  %11076 = sub i64 0, %171
  %11077 = sub i64 7638154240109783904, %11076
  %11078 = xor i64 %11075, %11077
  %11079 = xor i64 %11078, %11071
  %11080 = xor i64 %11079, %11074
  %11081 = xor i64 %11080, 7231502035739074267
  %11082 = mul i64 %11070, %11081
  %11083 = sub i64 %11082, -101
  %11084 = sub i64 -4698802068525030262, -4698802068525030281
  %11085 = add i64 66, 18
  %11086 = xor i64 %11085, 41
  %11087 = and i64 %11085, 41
  %11088 = mul i64 2, %11087
  %11089 = add i64 %11086, %11088
  %11090 = sub i64 %11057, 34
  %11091 = sub i64 %11058, 93
  %11092 = add i64 %330, -8261925498270054573
  %11093 = sub i64 0, %330
  %11094 = sub i64 -8261925498270054573, %11093
  %11095 = add i64 %3153, 3479399494549388409
  %11096 = add i64 702980599976406846, %3153
  %11097 = sub i64 %11096, -2776418894572981563
  %11098 = xor i64 %11094, %11092
  %11099 = xor i64 %11098, -1035335499027655835
  %11100 = xor i64 %11099, %11095
  %11101 = xor i64 %11100, %11097
  %11102 = add i64 %3, 611330965167536927
  %11103 = sub i64 0, %3
  %11104 = sub i64 611330965167536927, %11103
  %11105 = or i64 %212, -6035518889064235155
  %11106 = and i64 -6035518889064235155, %212
  %11107 = xor i64 -6035518889064235155, %212
  %11108 = or i64 %11106, %11107
  %11109 = xor i64 %11105, %11102
  %11110 = xor i64 %11109, -7880535157610902013
  %11111 = xor i64 %11110, %11104
  %11112 = xor i64 %11111, %11108
  %11113 = mul i64 %11101, %11112
  %11114 = sdiv i64 %11084, %11113
  %11115 = mul i64 %11057, 90
  %11116 = sdiv i64 %11058, 109
  %11117 = add i64 %330, -7652005847293235345
  %11118 = add i64 5130710635943365880, %330
  %11119 = add i64 %11118, 5664027590472950391
  %11120 = or i64 %40, 7694138042035330109
  %11121 = xor i64 %40, -1
  %11122 = and i64 %11121, -2418404859020708815
  %11123 = and i64 %40, 2418404859020708814
  %11124 = or i64 %11122, %11123
  %11125 = xor i64 -5424858083255375860, %11124
  %11126 = xor i64 %40, -1
  %11127 = or i64 -7694138042035330110, %11126
  %11128 = xor i64 %11127, -1
  %11129 = and i64 %11128, -1
  %11130 = or i64 %11125, %11129
  %11131 = xor i64 %11120, %11117
  %11132 = xor i64 %11131, 2100679708603368511
  %11133 = xor i64 %11132, %11119
  %11134 = xor i64 %11133, %11130
  %11135 = or i64 %3588, 1050139267770611157
  %11136 = xor i64 %3588, -1
  %11137 = and i64 1050139267770611157, %11136
  %11138 = add i64 %11137, %3588
  %11139 = or i64 %110, -2309021199981481403
  %11140 = xor i64 %110, -1
  %11141 = and i64 -2309021199981481403, %11140
  %11142 = add i64 %11141, %110
  %11143 = and i64 %175, 737345313855986010
  %11144 = xor i64 %175, -1
  %11145 = xor i64 737345313855986010, %11144
  %11146 = and i64 %11145, 737345313855986010
  %11147 = xor i64 %11146, 1411687345872467966
  %11148 = xor i64 %11147, %11135
  %11149 = xor i64 %11148, %11138
  %11150 = xor i64 %11149, %11142
  %11151 = xor i64 %11150, %11139
  %11152 = xor i64 %11151, %11143
  %11153 = mul i64 %11134, %11152
  %11154 = sub i64 %11056, %11153
  %11155 = or i64 %167, 9167050512503589361
  %11156 = xor i64 %167, -1
  %11157 = and i64 9167050512503589361, %11156
  %11158 = add i64 %11157, %167
  %11159 = sext i32 %dispatcher1 to i64
  %11160 = or i64 %11159, 4778979701107630085
  %11161 = xor i64 %11159, -1
  %11162 = and i64 %11161, -6835507498584500666
  %11163 = and i64 %11159, 6835507498584500665
  %11164 = or i64 %11162, %11163
  %11165 = xor i64 -2057794754891434429, %11164
  %11166 = xor i64 %11159, -1
  %11167 = or i64 -4778979701107630086, %11166
  %11168 = xor i64 %11167, -1
  %11169 = and i64 %11168, -1
  %11170 = or i64 %11165, %11169
  %11171 = xor i64 %11170, 7547492752918782277
  %11172 = xor i64 %11171, %11158
  %11173 = xor i64 %11172, %11160
  %11174 = xor i64 %11173, %11155
  %11175 = add i64 %326, -4186757237927837801
  %11176 = sub i64 0, %326
  %11177 = add i64 4186757237927837801, %11176
  %11178 = sub i64 0, %11177
  %11179 = and i64 %3588, -8073290800141499524
  %11180 = xor i64 %3588, -1
  %11181 = or i64 8073290800141499523, %11180
  %11182 = xor i64 %11181, -1
  %11183 = and i64 %11182, -1
  %11184 = and i64 %2342, -7745994398325447833
  %11185 = xor i64 %2342, -1
  %11186 = xor i64 -7745994398325447833, %11185
  %11187 = and i64 %11186, -7745994398325447833
  %11188 = xor i64 %11187, %11183
  %11189 = xor i64 %11188, -4534715822894363317
  %11190 = xor i64 %11189, %11179
  %11191 = xor i64 %11190, %11184
  %11192 = xor i64 %11191, %11175
  %11193 = xor i64 %11192, %11178
  %11194 = mul i64 %11174, %11193
  %11195 = sub i64 %11058, %11194
  %11196 = add i64 %11083, 5
  %11197 = add i64 %108, 6794008272383228082
  %11198 = sub i64 0, %108
  %11199 = sub i64 6794008272383228082, %11198
  %11200 = and i64 %175, 5752266758093543909
  %11201 = or i64 -5752266758093543910, %175
  %11202 = sub i64 %11201, -5752266758093543910
  %11203 = xor i64 %11200, 4425545838974494551
  %11204 = xor i64 %11203, %11197
  %11205 = xor i64 %11204, %11199
  %11206 = xor i64 %11205, %11202
  %11207 = or i64 %4826, -450671088570577345
  %11208 = xor i64 %4826, -1
  %11209 = and i64 -450671088570577345, %11208
  %11210 = add i64 %11209, %4826
  %11211 = and i64 %106, -898749958623640786
  %11212 = or i64 898749958623640785, %106
  %11213 = sub i64 %11212, 898749958623640785
  %11214 = xor i64 7569254923626443988, %11213
  %11215 = xor i64 %11214, %11210
  %11216 = xor i64 %11215, %11211
  %11217 = xor i64 %11216, %11207
  %11218 = mul i64 %11206, %11217
  %11219 = mul i64 %11058, %11218
  %11220 = trunc i64 %11089 to i32
  %11221 = add i32 0, %11220
  %11222 = trunc i64 %11090 to i32
  %11223 = sub i32 0, %11222
  %11224 = sub i32 %11221, %11223
  %11225 = trunc i64 %11091 to i32
  %11226 = sub i32 0, %11224
  %11227 = sub i32 0, %11225
  %11228 = add i32 %11226, %11227
  %11229 = sub i32 0, %11228
  %11230 = trunc i64 %11114 to i32
  %11231 = xor i32 %11229, %11230
  %11232 = and i32 %11229, %11230
  %11233 = mul i32 2, %11232
  %11234 = add i32 %11231, %11233
  %11235 = trunc i64 %11115 to i32
  %11236 = and i32 %11234, %11235
  %11237 = or i32 %11234, %11235
  %11238 = add i32 %11236, %11237
  %11239 = trunc i64 %11116 to i32
  %11240 = and i64 %94, -2685446268826772803
  %11241 = or i64 2685446268826772802, %94
  %11242 = sub i64 %11241, 2685446268826772802
  %11243 = or i64 %102, 7482165453448592662
  %11244 = xor i64 %102, -1
  %11245 = and i64 %11244, 6528590354862515302
  %11246 = and i64 %102, -6528590354862515303
  %11247 = or i64 %11245, %11246
  %11248 = xor i64 4417973510259841392, %11247
  %11249 = xor i64 %102, -1
  %11250 = or i64 -7482165453448592663, %11249
  %11251 = xor i64 %11250, -1
  %11252 = and i64 %11251, -1
  %11253 = or i64 %11248, %11252
  %11254 = and i64 %108, 1491194349076676461
  %11255 = xor i64 %108, -1
  %11256 = xor i64 1491194349076676461, %11255
  %11257 = and i64 %11256, 1491194349076676461
  %11258 = xor i64 2120361182577796269, %11240
  %11259 = xor i64 %11258, %11254
  %11260 = xor i64 %11259, %11242
  %11261 = xor i64 %11260, %11243
  %11262 = xor i64 %11261, %11257
  %11263 = xor i64 %11262, %11253
  %11264 = add i64 %4365, -1123754935433574959
  %11265 = add i64 -4404433428077054211, %4365
  %11266 = sub i64 %11265, -3280678492643479252
  %11267 = add i64 %112, -3001625564690217889
  %11268 = sub i64 0, %112
  %11269 = add i64 3001625564690217889, %11268
  %11270 = sub i64 0, %11269
  %11271 = or i64 %4826, 1583080601267596381
  %11272 = and i64 1583080601267596381, %4826
  %11273 = xor i64 1583080601267596381, %4826
  %11274 = or i64 %11272, %11273
  %11275 = xor i64 %11270, %11266
  %11276 = xor i64 %11275, %11264
  %11277 = xor i64 %11276, %11271
  %11278 = xor i64 %11277, %11267
  %11279 = xor i64 %11278, %11274
  %11280 = xor i64 %11279, 0
  %11281 = mul i64 %11263, %11280
  %11282 = trunc i64 %11281 to i32
  %11283 = sub i32 %11282, %11238
  %11284 = sub i32 0, %11239
  %11285 = add i32 %11283, %11284
  %11286 = sub i32 0, %11285
  %11287 = trunc i64 %11154 to i32
  %11288 = add i32 %11286, %11287
  %11289 = trunc i64 %11195 to i32
  %11290 = add i32 %11288, 1194682186
  %11291 = add i32 %11290, %11289
  %11292 = sub i32 %11291, 1194682186
  %11293 = trunc i64 %11196 to i32
  %11294 = sub i32 0, %11292
  %11295 = and i64 %385, -7056747223738521875
  %11296 = xor i64 %385, -1
  %11297 = xor i64 -7056747223738521875, %11296
  %11298 = and i64 %11297, -7056747223738521875
  %11299 = and i64 %104, 4893568374841295385
  %11300 = xor i64 %104, -1
  %11301 = xor i64 4893568374841295385, %11300
  %11302 = and i64 %11301, 4893568374841295385
  %11303 = or i64 %90, 3522135136146021078
  %11304 = xor i64 %90, -1
  %11305 = and i64 %11304, 4058059161026887913
  %11306 = and i64 %90, -4058059161026887914
  %11307 = or i64 %11305, %11306
  %11308 = xor i64 626066803065412159, %11307
  %11309 = xor i64 %90, -1
  %11310 = or i64 -3522135136146021079, %11309
  %11311 = xor i64 %11310, -1
  %11312 = and i64 %11311, -1
  %11313 = or i64 %11308, %11312
  %11314 = xor i64 %11303, %11299
  %11315 = xor i64 %11314, 9019459978030509261
  %11316 = xor i64 %11315, %11302
  %11317 = xor i64 %11316, %11295
  %11318 = xor i64 %11317, %11313
  %11319 = xor i64 %11318, %11298
  %11320 = add i64 %4019, -1302928281934534221
  %11321 = sub i64 0, %4019
  %11322 = sub i64 -1302928281934534221, %11321
  %11323 = or i64 %171, 693158236752723332
  %11324 = and i64 693158236752723332, %171
  %11325 = xor i64 693158236752723332, %171
  %11326 = or i64 %11324, %11325
  %11327 = xor i64 %11326, 0
  %11328 = xor i64 %11327, %11323
  %11329 = xor i64 %11328, %11322
  %11330 = xor i64 %11329, %11320
  %11331 = mul i64 %11319, %11330
  %11332 = trunc i64 %11331 to i32
  %11333 = sub i32 %11332, %11293
  %11334 = add i32 %11294, %11333
  %11335 = sub i32 0, %11334
  %11336 = trunc i64 %11219 to i32
  %11337 = add i32 %11335, %11336
  %11338 = and i32 %11337, 1
  %11339 = icmp eq i32 %11338, 1
  %11340 = mul i32 %11337, %11337
  %11341 = add i32 %11340, %11337
  %11342 = srem i32 %11341, 2
  %11343 = icmp eq i32 %11342, 0
  %11344 = or i1 %11339, %11343
  %11345 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 43
  %11346 = load i32, i32* %11345, align 4
  %11347 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %11348 = load i32, i32* %11347, align 4
  %11349 = srem i32 %11346, %11348
  %11350 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 45
  %11351 = load i32, i32* %11350, align 4
  %11352 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %11353 = load i32, i32* %11352, align 4
  %11354 = srem i32 %11351, %11353
  %11355 = select i1 %11344, i32 %11349, i32 %11354
  store i32 %11355, i32* %dispatcher, align 4
  store i64 0, i64* %.reg2mem210, align 8
  %11356 = load i8*, i8** %47, align 8
  %11357 = load i8, i8* %11356, align 1
  %11358 = mul i8 %11357, 2
  %11359 = mul i8 %11357, 2
  %11360 = sub i8 0, %11359
  %11361 = add i8 -2, %11360
  %11362 = sub i8 0, %11361
  %11363 = mul i8 %11358, %11362
  %11364 = srem i8 %11363, 4
  %11365 = and i64 %330, 632524058270642709
  %11366 = xor i64 %330, -1
  %11367 = xor i64 632524058270642709, %11366
  %11368 = and i64 %11367, 632524058270642709
  %11369 = add i64 %40, 8857842208792085441
  %11370 = add i64 6542976949383225084, %40
  %11371 = add i64 %11370, 2314865259408860357
  %11372 = and i64 %179, -3265724275649763330
  %11373 = xor i64 %179, -1
  %11374 = or i64 3265724275649763329, %11373
  %11375 = xor i64 %11374, -1
  %11376 = and i64 %11375, -1
  %11377 = xor i64 %11372, -7735120124166954051
  %11378 = xor i64 %11377, %11365
  %11379 = xor i64 %11378, %11376
  %11380 = xor i64 %11379, %11368
  %11381 = xor i64 %11380, %11369
  %11382 = xor i64 %11381, %11371
  %11383 = and i64 %104, -1756888598739808790
  %11384 = xor i64 %104, -1
  %11385 = or i64 1756888598739808789, %11384
  %11386 = xor i64 %11385, -1
  %11387 = and i64 %11386, -1
  %11388 = and i64 %114, 2264915000416832557
  %11389 = xor i64 %114, -1
  %11390 = or i64 -2264915000416832558, %11389
  %11391 = xor i64 %11390, -1
  %11392 = and i64 %11391, -1
  %11393 = or i64 %326, -4959093078832514497
  %11394 = xor i64 %326, -1
  %11395 = and i64 -4959093078832514497, %11394
  %11396 = add i64 %11395, %326
  %11397 = xor i64 %11388, %11393
  %11398 = xor i64 %11397, %11392
  %11399 = xor i64 %11398, %11383
  %11400 = xor i64 %11399, %11396
  %11401 = xor i64 %11400, 0
  %11402 = xor i64 %11401, %11387
  %11403 = mul i64 %11382, %11402
  %11404 = trunc i64 %11403 to i8
  %11405 = icmp eq i8 %11364, %11404
  %11406 = mul i8 %11357, %11357
  %11407 = mul i8 %11406, %11357
  %11408 = add i64 %336, -4012906792102308576
  %11409 = add i64 7362742168656598394, %336
  %11410 = add i64 %11409, 7071095112950644646
  %11411 = and i64 %110, -2555618444611034627
  %11412 = xor i64 %110, -1
  %11413 = or i64 2555618444611034626, %11412
  %11414 = xor i64 %11413, -1
  %11415 = and i64 %11414, -1
  %11416 = xor i64 %11415, %11411
  %11417 = xor i64 %11416, 2631497857509890493
  %11418 = xor i64 %11417, %11410
  %11419 = xor i64 %11418, %11408
  %11420 = and i64 %387, 1227045459106952929
  %11421 = xor i64 %387, -1
  %11422 = xor i64 1227045459106952929, %11421
  %11423 = and i64 %11422, 1227045459106952929
  %11424 = and i64 %2020, -631014589349192264
  %11425 = or i64 631014589349192263, %2020
  %11426 = sub i64 %11425, 631014589349192263
  %11427 = xor i64 %11423, %11420
  %11428 = xor i64 %11427, -5858304246004924692
  %11429 = xor i64 %11428, %11426
  %11430 = xor i64 %11429, %11424
  %11431 = mul i64 %11419, %11430
  %11432 = trunc i64 %11431 to i8
  %11433 = add i8 %11407, %11432
  %11434 = add i8 %11433, %11357
  %11435 = sub i8 %11434, 60
  %11436 = srem i8 %11435, 2
  %11437 = icmp eq i8 %11436, 0
  %11438 = xor i1 %11405, true
  %11439 = or i64 %38, 1149581042196210536
  %11440 = and i64 1149581042196210536, %38
  %11441 = xor i64 1149581042196210536, %38
  %11442 = or i64 %11440, %11441
  %11443 = add i64 %177, -7695866156693664423
  %11444 = add i64 -2127301782707199728, %177
  %11445 = add i64 %11444, -5568564373986464695
  %11446 = and i64 %3800, 6432291361013540274
  %11447 = or i64 -6432291361013540275, %3800
  %11448 = sub i64 %11447, -6432291361013540275
  %11449 = xor i64 %11446, %11442
  %11450 = xor i64 %11449, %11443
  %11451 = xor i64 %11450, 2395147241137975709
  %11452 = xor i64 %11451, %11445
  %11453 = xor i64 %11452, %11448
  %11454 = xor i64 %11453, %11439
  %11455 = add i64 %4826, -836975430936783164
  %11456 = sub i64 0, %4826
  %11457 = sub i64 -836975430936783164, %11456
  %11458 = add i64 %110, 3207628435737945012
  %11459 = sub i64 0, %110
  %11460 = add i64 -3207628435737945012, %11459
  %11461 = sub i64 0, %11460
  %11462 = xor i64 %11458, %11455
  %11463 = xor i64 %11462, 6309020238079974581
  %11464 = xor i64 %11463, %11461
  %11465 = xor i64 %11464, %11457
  %11466 = mul i64 %11454, %11465
  %11467 = trunc i64 %11466 to i1
  %11468 = xor i1 %11437, %11467
  %11469 = or i1 %11438, %11468
  %11470 = xor i1 %11469, true
  %11471 = and i1 %11470, true
  %11472 = select i1 %11471, i32 595012137, i32 595012113
  %11473 = xor i32 %11472, 212998190
  %11474 = xor i32 %11473, 212998166
  store i32 %11474, i32* %35, align 4
  %11475 = call i8** @bf4367541783002168146(i32* %35)
  %11476 = load i8*, i8** %11475, align 8
  indirectbr i8* %11476, [label %loopEnd, label %11055]

codeRepl228:                                      ; preds = %codeRepl228, %loopStart
  store i64 1996855465712537077, i64* %1256, align 8
  %11477 = call i8** @lk4104490460174343886(i64* %1256)
  %11478 = load i8*, i8** %11477, align 8
  %11479 = bitcast i8* %11478 to i1 (i64)*
  %.reload224.reload = load i64, i64* %.reload224.reg2mem, align 8
  %targetBlock229 = call i1 %11479(i64 %.reload224.reload)
  %11480 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 26
  %11481 = load i32, i32* %11480, align 4
  %11482 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  %11483 = load i32, i32* %11482, align 4
  %11484 = add i32 %11481, %11483
  %11485 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 48
  %11486 = load i32, i32* %11485, align 4
  %11487 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %11488 = load i32, i32* %11487, align 4
  %11489 = add i32 %11486, -1923055790
  %11490 = sub i32 %11489, %11488
  %11491 = sub i32 %11490, -1923055790
  %11492 = select i1 %targetBlock229, i32 %11484, i32 %11491
  store i32 %11492, i32* %dispatcher, align 4
  %11493 = load i8*, i8** %99, align 8
  %11494 = load i8, i8* %11493, align 1
  %11495 = mul i8 %11494, %11494
  %11496 = add i8 %11495, %11494
  %11497 = and i64 %177, 357036608268430311
  %11498 = or i64 -357036608268430312, %177
  %11499 = sub i64 %11498, -357036608268430312
  %11500 = add i64 %280, -952215170673723686
  %11501 = xor i64 -952215170673723686, %280
  %11502 = and i64 -952215170673723686, %280
  %11503 = mul i64 2, %11502
  %11504 = add i64 %11501, %11503
  %11505 = and i64 %175, 4135558220073004866
  %11506 = or i64 -4135558220073004867, %175
  %11507 = sub i64 %11506, -4135558220073004867
  %11508 = xor i64 %11497, 8545856106994491613
  %11509 = xor i64 %11508, %11500
  %11510 = xor i64 %11509, %11505
  %11511 = xor i64 %11510, %11507
  %11512 = xor i64 %11511, %11499
  %11513 = xor i64 %11512, %11504
  %11514 = and i64 %98, -1394455078427421050
  %11515 = or i64 1394455078427421049, %98
  %11516 = sub i64 %11515, 1394455078427421049
  %11517 = and i64 %334, 5456863984996404371
  %11518 = xor i64 %334, -1
  %11519 = or i64 -5456863984996404372, %11518
  %11520 = xor i64 %11519, -1
  %11521 = and i64 %11520, -1
  %11522 = xor i64 %11521, %11517
  %11523 = xor i64 %11522, 2381936656065128031
  %11524 = xor i64 %11523, %11514
  %11525 = xor i64 %11524, %11516
  %11526 = mul i64 %11513, %11525
  %11527 = trunc i64 %11526 to i8
  %11528 = mul i8 %11496, %11527
  %11529 = srem i8 %11528, 2
  %11530 = icmp eq i8 %11529, 0
  %11531 = mul i8 %11494, %11494
  %11532 = add i8 %11531, %11494
  %11533 = srem i8 %11532, 2
  %11534 = icmp eq i8 %11533, 0
  %11535 = xor i1 %11534, true
  %11536 = xor i1 %11530, %11535
  %11537 = and i1 %11536, %11530
  %11538 = select i1 %11537, i32 595012141, i32 595012113
  %11539 = xor i32 %11538, 60
  store i32 %11539, i32* %35, align 4
  %11540 = call i8** @bf4367541783002168146(i32* %35)
  %11541 = load i8*, i8** %11540, align 8
  indirectbr i8* %11541, [label %loopEnd, label %codeRepl228]

codeRepl230:                                      ; preds = %codeRepl230, %loopStart
  %lt.cast234 = bitcast i1* %.loc231 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast234)
  store i64 1996855465712537087, i64* %1256, align 8
  %11542 = call i8** @lk4104490460174343886(i64* %1256)
  %11543 = load i8*, i8** %11542, align 8
  %11544 = bitcast i8* %11543 to i1 (i64, i32, i1*)*
  %.reload119 = load i32, i32* %.reg2mem118, align 4
  %.reload223.reload = load i64, i64* %.reload223.reg2mem, align 8
  %targetBlock232 = call i1 %11544(i64 %.reload223.reload, i32 %.reload119, i1* %.loc231)
  %.reload233 = load i1, i1* %.loc231, align 1
  store i1 %.reload233, i1* %.reload233.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast234)
  %11545 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 48
  %11546 = load i32, i32* %11545, align 4
  %11547 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %11548 = load i32, i32* %11547, align 4
  %11549 = srem i32 %11546, %11548
  %11550 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 46
  %11551 = load i32, i32* %11550, align 4
  %11552 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %11553 = load i32, i32* %11552, align 4
  %11554 = add i32 %11551, 40926607
  %11555 = sub i32 %11554, %11553
  %11556 = sub i32 %11555, 40926607
  %11557 = select i1 %targetBlock232, i32 %11549, i32 %11556
  store i32 %11557, i32* %dispatcher, align 4
  %11558 = load i8*, i8** %254, align 8
  %11559 = load i8, i8* %11558, align 1
  %11560 = mul i8 %11559, 2
  %11561 = mul i8 %11559, 2
  %11562 = sub i8 0, %11561
  %11563 = or i64 %50, -1043684368409998884
  %11564 = and i64 -1043684368409998884, %50
  %11565 = xor i64 -1043684368409998884, %50
  %11566 = or i64 %11564, %11565
  %11567 = add i64 %389, -1313768438214359257
  %11568 = sub i64 0, %389
  %11569 = add i64 1313768438214359257, %11568
  %11570 = sub i64 0, %11569
  %11571 = xor i64 %11570, %11566
  %11572 = xor i64 %11571, %11563
  %11573 = xor i64 %11572, %11567
  %11574 = xor i64 %11573, -1710567758417724931
  %11575 = or i64 %42, 4190222653154202283
  %11576 = and i64 4190222653154202283, %42
  %11577 = xor i64 4190222653154202283, %42
  %11578 = or i64 %11576, %11577
  %11579 = add i64 %322, 4248753447884982327
  %11580 = xor i64 4248753447884982327, %322
  %11581 = and i64 4248753447884982327, %322
  %11582 = mul i64 2, %11581
  %11583 = add i64 %11580, %11582
  %11584 = add i64 %4826, -8212076160559437518
  %11585 = add i64 2307318114615739637, %4826
  %11586 = sub i64 %11585, -7927349798534374461
  %11587 = xor i64 %11578, %11583
  %11588 = xor i64 %11587, %11579
  %11589 = xor i64 %11588, %11586
  %11590 = xor i64 %11589, %11584
  %11591 = xor i64 %11590, %11575
  %11592 = xor i64 %11591, -7514441111699259818
  %11593 = mul i64 %11574, %11592
  %11594 = trunc i64 %11593 to i8
  %11595 = add i8 %11594, %11562
  %11596 = sub i8 0, %11595
  %11597 = mul i8 %11560, %11596
  %11598 = srem i8 %11597, 4
  %11599 = icmp eq i8 %11598, 0
  %11600 = mul i8 %11559, %11559
  %11601 = add i8 %11600, %11559
  %11602 = add i64 %108, 6906562920354784781
  %11603 = and i64 6906562920354784781, %108
  %11604 = or i64 6906562920354784781, %108
  %11605 = add i64 %11603, %11604
  %11606 = add i64 %54, 8583619933558628505
  %11607 = add i64 -6113556490066095628, %54
  %11608 = add i64 %11607, -3749567650084827483
  %11609 = xor i64 %11608, %11602
  %11610 = xor i64 %11609, %11606
  %11611 = xor i64 %11610, -6858206458193839701
  %11612 = xor i64 %11611, %11605
  %11613 = or i64 %112, 288789117590606798
  %11614 = xor i64 %112, -1
  %11615 = and i64 288789117590606798, %11614
  %11616 = add i64 %11615, %112
  %11617 = and i64 %338, 24702268236929663
  %11618 = xor i64 %338, -1
  %11619 = xor i64 24702268236929663, %11618
  %11620 = and i64 %11619, 24702268236929663
  %11621 = xor i64 %11620, %11613
  %11622 = xor i64 %11621, %11617
  %11623 = xor i64 %11622, 5084450132054012422
  %11624 = xor i64 %11623, %11616
  %11625 = mul i64 %11612, %11624
  %11626 = trunc i64 %11625 to i8
  %11627 = srem i8 %11601, %11626
  %11628 = icmp eq i8 %11627, 0
  %11629 = and i1 %11599, %11628
  %11630 = xor i1 %11599, %11628
  %11631 = or i1 %11629, %11630
  %11632 = select i1 %11631, i32 595012126, i32 595012113
  %11633 = xor i32 %11632, 15
  store i32 %11633, i32* %35, align 4
  %11634 = call i8** @bf4367541783002168146(i32* %35)
  %11635 = load i8*, i8** %11634, align 8
  indirectbr i8* %11635, [label %loopEnd, label %codeRepl230]

11636:                                            ; preds = %11636, %loopStart
  %11637 = sub i64 7427097413499169435, 7427097413499169451
  %11638 = sdiv i64 36, 18
  %11639 = sdiv i64 10, 120
  %11640 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 27
  %11641 = load i32, i32* %11640, align 4
  %11642 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 26
  %11643 = load i32, i32* %11642, align 4
  %11644 = add i32 %11641, %11643
  store i32 %11644, i32* %dispatcher, align 4
  %11645 = load i8*, i8** %49, align 8
  %11646 = load i8, i8* %11645, align 1
  %11647 = xor i8 %11646, -1
  %11648 = or i8 %11647, 1
  %11649 = xor i8 %11646, -1
  %11650 = sub i8 %11648, %11649
  %11651 = icmp eq i8 %11650, 1
  %11652 = mul i8 %11646, %11646
  %11653 = xor i8 %11652, %11646
  %11654 = and i8 %11652, %11646
  %11655 = mul i8 2, %11654
  %11656 = add i8 %11653, %11655
  %11657 = mul i8 39, %11656
  %11658 = add i8 23, %11657
  %11659 = mul i8 -105, %11658
  %11660 = add i8 111, %11659
  %11661 = srem i8 %11660, 2
  %11662 = icmp eq i8 %11661, 0
  %11663 = xor i1 %11662, true
  %11664 = and i1 %11651, %11663
  %11665 = add i1 %11664, %11662
  %11666 = or i64 %251, 6476307122953742836
  %11667 = and i64 6476307122953742836, %251
  %11668 = xor i64 6476307122953742836, %251
  %11669 = or i64 %11667, %11668
  %11670 = add i64 %175, -1877904034187526414
  %11671 = xor i64 -1877904034187526414, %175
  %11672 = and i64 -1877904034187526414, %175
  %11673 = mul i64 2, %11672
  %11674 = add i64 %11671, %11673
  %11675 = xor i64 %11669, %11666
  %11676 = xor i64 %11675, 6458602010323262799
  %11677 = xor i64 %11676, %11670
  %11678 = xor i64 %11677, %11674
  %11679 = add i64 %173, -3937707620704513090
  %11680 = sub i64 0, %173
  %11681 = sub i64 -3937707620704513090, %11680
  %11682 = and i64 %94, -6826966589902986466
  %11683 = or i64 6826966589902986465, %94
  %11684 = sub i64 %11683, 6826966589902986465
  %11685 = add i64 %108, 5200973783074092051
  %11686 = add i64 -2815760081066762645, %108
  %11687 = add i64 %11686, 8016733864140854696
  %11688 = xor i64 %11682, %11679
  %11689 = xor i64 %11688, %11685
  %11690 = xor i64 %11689, %11681
  %11691 = xor i64 %11690, %11684
  %11692 = xor i64 %11691, %11687
  %11693 = xor i64 %11692, 1577438565240288982
  %11694 = mul i64 %11678, %11693
  %11695 = trunc i64 %11694 to i32
  %11696 = select i1 %11665, i32 %11695, i32 595012113
  %11697 = xor i32 %11696, -658154030
  %11698 = xor i32 %11697, -658154039
  store i32 %11698, i32* %35, align 4
  %11699 = call i8** @bf4367541783002168146(i32* %35)
  %11700 = load i8*, i8** %11699, align 8
  indirectbr i8* %11700, [label %loopEnd, label %11636]

11701:                                            ; preds = %11701, %loopStart
  %11702 = add i64 -4583811078071719486, 4583811078071719470
  %11703 = sdiv i64 36, 18
  %11704 = add i64 %120, 8971425196110563964
  %11705 = and i64 8971425196110563964, %120
  %11706 = or i64 8971425196110563964, %120
  %11707 = add i64 %11705, %11706
  %11708 = and i64 %4826, 3884966790243059780
  %11709 = xor i64 %4826, -1
  %11710 = xor i64 3884966790243059780, %11709
  %11711 = and i64 %11710, 3884966790243059780
  %11712 = xor i64 8772258498250933681, %11704
  %11713 = xor i64 %11712, %11708
  %11714 = xor i64 %11713, %11707
  %11715 = xor i64 %11714, %11711
  %11716 = or i64 %3, 5828300060843684475
  %11717 = xor i64 %3, -1
  %11718 = and i64 %11717, 2294986591663610699
  %11719 = and i64 %3, -2294986591663610700
  %11720 = or i64 %11718, %11719
  %11721 = xor i64 5709198887653042480, %11720
  %11722 = xor i64 %3, -1
  %11723 = or i64 -5828300060843684476, %11722
  %11724 = xor i64 %11723, -1
  %11725 = and i64 %11724, -1
  %11726 = or i64 %11721, %11725
  %11727 = add i64 %253, 8916073730016939326
  %11728 = xor i64 8916073730016939326, %253
  %11729 = and i64 8916073730016939326, %253
  %11730 = mul i64 2, %11729
  %11731 = add i64 %11728, %11730
  %11732 = xor i64 %11716, %11726
  %11733 = xor i64 %11732, 2118715859593290026
  %11734 = xor i64 %11733, %11727
  %11735 = xor i64 %11734, %11731
  %11736 = mul i64 %11715, %11735
  %11737 = sdiv i64 %11736, 120
  %11738 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 50
  %11739 = load i32, i32* %11738, align 4
  %11740 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %11741 = load i32, i32* %11740, align 4
  %11742 = srem i32 %11739, %11741
  %11743 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 46
  %11744 = load i32, i32* %11743, align 4
  %11745 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 57
  %11746 = load i32, i32* %11745, align 4
  %11747 = srem i32 %11744, %11746
  %.reload233.reload = load i1, i1* %.reload233.reg2mem, align 1
  %11748 = select i1 %.reload233.reload, i32 %11742, i32 %11747
  store i32 %11748, i32* %dispatcher, align 4
  %11749 = load i8*, i8** %91, align 8
  %11750 = load i8, i8* %11749, align 1
  %11751 = and i64 %328, 1993821233298065723
  %11752 = or i64 -1993821233298065724, %328
  %11753 = sub i64 %11752, -1993821233298065724
  %11754 = and i64 %179, 2673618360173342905
  %11755 = xor i64 %179, -1
  %11756 = xor i64 2673618360173342905, %11755
  %11757 = and i64 %11756, 2673618360173342905
  %11758 = xor i64 %11757, %11753
  %11759 = xor i64 %11758, %11751
  %11760 = xor i64 %11759, 4728844794546177189
  %11761 = xor i64 %11760, %11754
  %11762 = or i64 %336, 7853719441058257118
  %11763 = xor i64 %336, -1
  %11764 = and i64 7853719441058257118, %11763
  %11765 = add i64 %11764, %336
  %11766 = and i64 %38, -1190277285160711974
  %11767 = xor i64 %38, -1
  %11768 = or i64 1190277285160711973, %11767
  %11769 = xor i64 %11768, -1
  %11770 = and i64 %11769, -1
  %11771 = or i64 %2865, -8774276500632439889
  %11772 = xor i64 %2865, -1
  %11773 = and i64 %11772, -1810443952552933439
  %11774 = and i64 %2865, 1810443952552933438
  %11775 = or i64 %11773, %11774
  %11776 = xor i64 6979313695443317870, %11775
  %11777 = xor i64 %2865, -1
  %11778 = or i64 8774276500632439888, %11777
  %11779 = xor i64 %11778, -1
  %11780 = and i64 %11779, -1
  %11781 = or i64 %11776, %11780
  %11782 = xor i64 %11771, %11765
  %11783 = xor i64 %11782, %11781
  %11784 = xor i64 %11783, 1858980669366272813
  %11785 = xor i64 %11784, %11762
  %11786 = xor i64 %11785, %11770
  %11787 = xor i64 %11786, %11766
  %11788 = mul i64 %11761, %11787
  %11789 = trunc i64 %11788 to i8
  %11790 = and i8 %11750, %11789
  %11791 = icmp eq i8 %11790, 1
  %11792 = mul i8 %11750, %11750
  %11793 = add i8 %11792, %11750
  %11794 = srem i8 %11793, 2
  %11795 = icmp eq i8 %11794, 0
  %11796 = and i1 %11791, %11795
  %11797 = xor i1 %11791, %11795
  %11798 = or i1 %11796, %11797
  %11799 = and i64 %177, 8827603821265921608
  %11800 = xor i64 %177, -1
  %11801 = or i64 -8827603821265921609, %11800
  %11802 = xor i64 %11801, -1
  %11803 = and i64 %11802, -1
  %11804 = or i64 %58, -7845578977860895104
  %11805 = xor i64 %58, -1
  %11806 = and i64 -7845578977860895104, %11805
  %11807 = add i64 %11806, %58
  %11808 = xor i64 %11804, 2307269659852732833
  %11809 = xor i64 %11808, %11799
  %11810 = xor i64 %11809, %11803
  %11811 = xor i64 %11810, %11807
  %11812 = add i64 %96, -1449456743091261834
  %11813 = sub i64 0, %96
  %11814 = add i64 1449456743091261834, %11813
  %11815 = sub i64 0, %11814
  %11816 = add i64 %116, 7312444799050672763
  %11817 = and i64 7312444799050672763, %116
  %11818 = or i64 7312444799050672763, %116
  %11819 = add i64 %11817, %11818
  %11820 = or i64 %108, -8148142648171456830
  %11821 = xor i64 %108, -1
  %11822 = and i64 -8148142648171456830, %11821
  %11823 = add i64 %11822, %108
  %11824 = xor i64 %11820, %11815
  %11825 = xor i64 %11824, %11819
  %11826 = xor i64 %11825, %11812
  %11827 = xor i64 %11826, %11823
  %11828 = xor i64 %11827, %11816
  %11829 = xor i64 %11828, -5123571464764520815
  %11830 = mul i64 %11811, %11829
  %11831 = trunc i64 %11830 to i32
  %11832 = select i1 %11798, i32 %11831, i32 595012113
  %11833 = and i64 %181, -4532412854878095949
  %11834 = xor i64 %181, -1
  %11835 = xor i64 -4532412854878095949, %11834
  %11836 = and i64 %11835, -4532412854878095949
  %11837 = add i64 %46, -235685217417978195
  %11838 = add i64 8839288254837016911, %46
  %11839 = add i64 %11838, -9074973472254995106
  %11840 = or i64 %4826, -3588077806808257294
  %11841 = xor i64 %4826, -1
  %11842 = and i64 -3588077806808257294, %11841
  %11843 = add i64 %11842, %4826
  %11844 = xor i64 -409922623527244527, %11839
  %11845 = xor i64 %11844, %11833
  %11846 = xor i64 %11845, %11836
  %11847 = xor i64 %11846, %11837
  %11848 = xor i64 %11847, %11843
  %11849 = xor i64 %11848, %11840
  %11850 = add i64 %324, 2296832763095502365
  %11851 = add i64 4094803241789016036, %324
  %11852 = sub i64 %11851, 1797970478693513671
  %11853 = and i64 %169, -6463247398917720272
  %11854 = xor i64 %169, -1
  %11855 = or i64 6463247398917720271, %11854
  %11856 = xor i64 %11855, -1
  %11857 = and i64 %11856, -1
  %11858 = xor i64 3539611093816744975, %11853
  %11859 = xor i64 %11858, %11850
  %11860 = xor i64 %11859, %11857
  %11861 = xor i64 %11860, %11852
  %11862 = mul i64 %11849, %11861
  %11863 = trunc i64 %11862 to i32
  %11864 = xor i32 %11832, %11863
  %11865 = and i32 %11864, 32
  %11866 = and i32 %11832, -33
  %11867 = or i32 %11865, %11866
  store i32 %11867, i32* %35, align 4
  %11868 = call i8** @bf4367541783002168146(i32* %35)
  %11869 = load i8*, i8** %11868, align 8
  indirectbr i8* %11869, [label %loopEnd, label %11701]

11870:                                            ; preds = %11870, %loopStart
  %11871 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %11872 = load i32, i32* %11871, align 4
  %11873 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 27
  %11874 = load i32, i32* %11873, align 4
  %11875 = add i32 %11872, %11874
  store i32 %11875, i32* %dispatcher, align 4
  %11876 = load i8*, i8** %335, align 8
  %11877 = load i8, i8* %11876, align 1
  %11878 = mul i8 %11877, 2
  %11879 = mul i8 %11877, 2
  %11880 = add i8 2, %11879
  %11881 = mul i8 %11878, %11880
  %11882 = srem i8 %11881, 4
  %11883 = or i64 %393, -3505812308549219339
  %11884 = xor i64 %393, -1
  %11885 = and i64 -3505812308549219339, %11884
  %11886 = add i64 %11885, %393
  %11887 = or i64 %3153, 8144006835514541368
  %11888 = xor i64 %3153, -1
  %11889 = and i64 8144006835514541368, %11888
  %11890 = add i64 %11889, %3153
  %11891 = and i64 %389, -7391946779902142605
  %11892 = or i64 7391946779902142604, %389
  %11893 = sub i64 %11892, 7391946779902142604
  %11894 = xor i64 %11883, %11891
  %11895 = xor i64 %11894, %11890
  %11896 = xor i64 %11895, %11893
  %11897 = xor i64 %11896, %11886
  %11898 = xor i64 %11897, -2236410807426707795
  %11899 = xor i64 %11898, %11887
  %11900 = add i64 %104, 8619565070353086472
  %11901 = sub i64 0, %104
  %11902 = add i64 -8619565070353086472, %11901
  %11903 = sub i64 0, %11902
  %11904 = add i64 %3, -540595167862510151
  %11905 = and i64 -540595167862510151, %3
  %11906 = or i64 -540595167862510151, %3
  %11907 = add i64 %11905, %11906
  %11908 = and i64 %2648, -7664237094527863755
  %11909 = xor i64 %2648, -1
  %11910 = or i64 7664237094527863754, %11909
  %11911 = xor i64 %11910, -1
  %11912 = and i64 %11911, -1
  %11913 = xor i64 %11907, %11903
  %11914 = xor i64 %11913, %11908
  %11915 = xor i64 %11914, 0
  %11916 = xor i64 %11915, %11904
  %11917 = xor i64 %11916, %11900
  %11918 = xor i64 %11917, %11912
  %11919 = mul i64 %11899, %11918
  %11920 = trunc i64 %11919 to i8
  %11921 = icmp eq i8 %11882, %11920
  %11922 = mul i8 %11877, %11877
  %11923 = add i8 %11922, %11877
  %11924 = srem i8 %11923, 2
  %11925 = icmp eq i8 %11924, 0
  %11926 = xor i1 %11921, true
  %11927 = and i64 %42, 4934454881818450714
  %11928 = xor i64 %42, -1
  %11929 = or i64 -4934454881818450715, %11928
  %11930 = xor i64 %11929, -1
  %11931 = and i64 %11930, -1
  %11932 = and i64 %58, 1114978941451349143
  %11933 = xor i64 %58, -1
  %11934 = xor i64 1114978941451349143, %11933
  %11935 = and i64 %11934, 1114978941451349143
  %11936 = and i64 %52, 473198163338227724
  %11937 = xor i64 %52, -1
  %11938 = xor i64 473198163338227724, %11937
  %11939 = and i64 %11938, 473198163338227724
  %11940 = xor i64 -5195513578729424241, %11927
  %11941 = xor i64 %11940, %11935
  %11942 = xor i64 %11941, %11932
  %11943 = xor i64 %11942, %11939
  %11944 = xor i64 %11943, %11936
  %11945 = xor i64 %11944, %11931
  %11946 = and i64 %58, 3857490260535887711
  %11947 = xor i64 %58, -1
  %11948 = or i64 -3857490260535887712, %11947
  %11949 = xor i64 %11948, -1
  %11950 = and i64 %11949, -1
  %11951 = add i64 %3, -6400167104202269383
  %11952 = xor i64 -6400167104202269383, %3
  %11953 = and i64 -6400167104202269383, %3
  %11954 = mul i64 2, %11953
  %11955 = add i64 %11952, %11954
  %11956 = xor i64 %11950, %11946
  %11957 = xor i64 %11956, %11955
  %11958 = xor i64 %11957, 5095556607571436655
  %11959 = xor i64 %11958, %11951
  %11960 = mul i64 %11945, %11959
  %11961 = trunc i64 %11960 to i1
  %11962 = xor i1 %11925, %11961
  %11963 = or i1 %11926, %11962
  %11964 = xor i1 %11963, true
  %11965 = and i1 %11964, true
  %11966 = or i64 %50, -3717927547107909921
  %11967 = xor i64 %50, -1
  %11968 = and i64 %11967, 3082099952741888835
  %11969 = and i64 %50, -3082099952741888836
  %11970 = or i64 %11968, %11969
  %11971 = xor i64 -1827734620379812452, %11970
  %11972 = xor i64 %50, -1
  %11973 = or i64 3717927547107909920, %11972
  %11974 = xor i64 %11973, -1
  %11975 = and i64 %11974, -1
  %11976 = or i64 %11971, %11975
  %11977 = add i64 %322, -7175925978813518750
  %11978 = add i64 4703099496723927181, %322
  %11979 = add i64 %11978, 6567718598172105685
  %11980 = or i64 %326, 4717227012152344505
  %11981 = and i64 4717227012152344505, %326
  %11982 = xor i64 4717227012152344505, %326
  %11983 = or i64 %11981, %11982
  %11984 = xor i64 %11976, %11983
  %11985 = xor i64 %11984, %11977
  %11986 = xor i64 %11985, 6166116625660652865
  %11987 = xor i64 %11986, %11979
  %11988 = xor i64 %11987, %11980
  %11989 = xor i64 %11988, %11966
  %11990 = add i64 %38, 1070529120929002764
  %11991 = xor i64 1070529120929002764, %38
  %11992 = and i64 1070529120929002764, %38
  %11993 = mul i64 2, %11992
  %11994 = add i64 %11991, %11993
  %11995 = add i64 %104, 7164158199556572461
  %11996 = sub i64 0, %104
  %11997 = add i64 -7164158199556572461, %11996
  %11998 = sub i64 0, %11997
  %11999 = xor i64 -419483157949433647, %11995
  %12000 = xor i64 %11999, %11998
  %12001 = xor i64 %12000, %11990
  %12002 = xor i64 %12001, %11994
  %12003 = mul i64 %11989, %12002
  %12004 = trunc i64 %12003 to i32
  %12005 = select i1 %11965, i32 595012106, i32 %12004
  %12006 = xor i32 %12005, 27
  store i32 %12006, i32* %35, align 4
  %12007 = call i8** @bf4367541783002168146(i32* %35)
  %12008 = load i8*, i8** %12007, align 8
  indirectbr i8* %12008, [label %loopEnd, label %11870]

12009:                                            ; preds = %12009, %loopStart
  %12010 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %12011 = load i32, i32* %12010, align 4
  %12012 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 27
  %12013 = load i32, i32* %12012, align 4
  %12014 = sub i32 %12011, 126967011
  %12015 = add i32 %12014, %12013
  %12016 = or i64 %104, 1360574101833203863
  %12017 = xor i64 %104, -1
  %12018 = and i64 %12017, 6675945488390741603
  %12019 = and i64 %104, -6675945488390741604
  %12020 = or i64 %12018, %12019
  %12021 = xor i64 5639636906082541300, %12020
  %12022 = xor i64 %104, -1
  %12023 = or i64 -1360574101833203864, %12022
  %12024 = xor i64 %12023, -1
  %12025 = and i64 %12024, -1
  %12026 = or i64 %12021, %12025
  %12027 = and i64 %2865, 5620336043570551654
  %12028 = xor i64 %2865, -1
  %12029 = or i64 -5620336043570551655, %12028
  %12030 = xor i64 %12029, -1
  %12031 = and i64 %12030, -1
  %12032 = or i64 %179, 7695463127637077348
  %12033 = xor i64 %179, -1
  %12034 = and i64 %12033, -3575569407819331698
  %12035 = and i64 %179, 3575569407819331697
  %12036 = or i64 %12034, %12035
  %12037 = xor i64 -6581236385259164950, %12036
  %12038 = xor i64 %179, -1
  %12039 = or i64 -7695463127637077349, %12038
  %12040 = xor i64 %12039, -1
  %12041 = and i64 %12040, -1
  %12042 = or i64 %12037, %12041
  %12043 = xor i64 %12031, %12016
  %12044 = xor i64 %12043, %12032
  %12045 = xor i64 %12044, %12027
  %12046 = xor i64 %12045, %12026
  %12047 = xor i64 %12046, -4925240671117708469
  %12048 = xor i64 %12047, %12042
  %12049 = or i64 %3800, 5992591023675739290
  %12050 = xor i64 %3800, -1
  %12051 = and i64 5992591023675739290, %12050
  %12052 = add i64 %12051, %3800
  %12053 = add i64 %3800, 7269142403886983777
  %12054 = and i64 7269142403886983777, %3800
  %12055 = or i64 7269142403886983777, %3800
  %12056 = add i64 %12054, %12055
  %12057 = xor i64 2281341774339352009, %12052
  %12058 = xor i64 %12057, %12049
  %12059 = xor i64 %12058, %12056
  %12060 = xor i64 %12059, %12053
  %12061 = mul i64 %12048, %12060
  %12062 = trunc i64 %12061 to i32
  %12063 = add i32 %12015, %12062
  store i32 %12063, i32* %dispatcher, align 4
  %12064 = load i8*, i8** %43, align 8
  %12065 = load i8, i8* %12064, align 1
  %12066 = mul i8 %12065, %12065
  %12067 = add i8 %12066, %12065
  %12068 = mul i8 %12067, 3
  %12069 = srem i8 %12068, 2
  %12070 = icmp eq i8 %12069, 0
  %12071 = mul i8 %12065, %12065
  %12072 = add i8 %12071, %12065
  %12073 = srem i8 %12072, 2
  %12074 = icmp eq i8 %12073, 0
  %12075 = and i1 %12070, %12074
  %12076 = select i1 %12075, i32 595012137, i32 595012113
  %12077 = xor i32 %12076, -1
  %12078 = and i32 %12077, 69069242
  %12079 = or i64 %98, 5372186314644319077
  %12080 = xor i64 %98, -1
  %12081 = and i64 %12080, -2738852649646974107
  %12082 = and i64 %98, 2738852649646974106
  %12083 = or i64 %12081, %12082
  %12084 = xor i64 -7822626127122173952, %12083
  %12085 = xor i64 %98, -1
  %12086 = or i64 -5372186314644319078, %12085
  %12087 = xor i64 %12086, -1
  %12088 = and i64 %12087, -1
  %12089 = or i64 %12084, %12088
  %12090 = or i64 %328, -1460977493967208735
  %12091 = xor i64 %328, -1
  %12092 = and i64 %12091, -2512393427348369685
  %12093 = and i64 %328, 2512393427348369684
  %12094 = or i64 %12092, %12093
  %12095 = xor i64 3934949567398785034, %12094
  %12096 = xor i64 %328, -1
  %12097 = or i64 1460977493967208734, %12096
  %12098 = xor i64 %12097, -1
  %12099 = and i64 %12098, -1
  %12100 = or i64 %12095, %12099
  %12101 = xor i64 %12079, 7180184334059052137
  %12102 = xor i64 %12101, %12089
  %12103 = xor i64 %12102, %12090
  %12104 = xor i64 %12103, %12100
  %12105 = or i64 %328, -3726434228426062748
  %12106 = xor i64 %328, -1
  %12107 = and i64 %12106, -1022903489444543755
  %12108 = and i64 %328, 1022903489444543754
  %12109 = or i64 %12107, %12108
  %12110 = xor i64 4432915744931989137, %12109
  %12111 = xor i64 %328, -1
  %12112 = or i64 3726434228426062747, %12111
  %12113 = xor i64 %12112, -1
  %12114 = and i64 %12113, -1
  %12115 = or i64 %12110, %12114
  %12116 = add i64 %5086, -8103847358768954663
  %12117 = add i64 3333862229932823333, %5086
  %12118 = sub i64 %12117, -7009034485007773620
  %12119 = xor i64 1050059818899185533, %12105
  %12120 = xor i64 %12119, %12115
  %12121 = xor i64 %12120, %12116
  %12122 = xor i64 %12121, %12118
  %12123 = mul i64 %12104, %12122
  %12124 = trunc i64 %12123 to i32
  %12125 = and i32 %12076, %12124
  %12126 = or i32 %12078, %12125
  %12127 = xor i32 %12126, 69069186
  store i32 %12127, i32* %35, align 4
  %12128 = call i8** @bf4367541783002168146(i32* %35)
  %12129 = load i8*, i8** %12128, align 8
  indirectbr i8* %12129, [label %loopEnd, label %12009]

12130:                                            ; preds = %12130, %loopStart
  %12131 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 29
  %12132 = load i32, i32* %12131, align 4
  %12133 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 27
  %12134 = load i32, i32* %12133, align 4
  %12135 = add i32 %12132, -1262554370
  %12136 = add i32 %12135, %12134
  %12137 = sub i32 %12136, -1262554370
  store i32 %12137, i32* %dispatcher, align 4
  %.reload222.reload = load i32, i32* %.reload222.reg2mem, align 4
  store i32 %.reload222.reload, i32* %.reg2mem212, align 4
  %12138 = load i8*, i8** %55, align 8
  %12139 = load i8, i8* %12138, align 1
  %12140 = and i8 %12139, 1
  %12141 = icmp eq i8 %12140, 1
  %12142 = mul i8 %12139, %12139
  %12143 = add i8 %12142, %12139
  %12144 = add i64 %1794, -3984011587080253936
  %12145 = add i64 -7921151913782341221, %1794
  %12146 = sub i64 %12145, -3937140326702087285
  %12147 = and i64 %330, 62271684901156854
  %12148 = xor i64 %330, -1
  %12149 = xor i64 62271684901156854, %12148
  %12150 = and i64 %12149, 62271684901156854
  %12151 = xor i64 %12144, %12147
  %12152 = xor i64 %12151, %12150
  %12153 = xor i64 %12152, %12146
  %12154 = xor i64 %12153, 865958713317665731
  %12155 = add i64 %167, -5179059246806082348
  %12156 = add i64 -2872399234696929883, %167
  %12157 = add i64 %12156, -2306660012109152465
  %12158 = add i64 %330, -3330146007973658821
  %12159 = add i64 -2675425713887796242, %330
  %12160 = add i64 %12159, -654720294085862579
  %12161 = xor i64 %12158, %12157
  %12162 = xor i64 %12161, -2041311237329438250
  %12163 = xor i64 %12162, %12160
  %12164 = xor i64 %12163, %12155
  %12165 = mul i64 %12154, %12164
  %12166 = trunc i64 %12165 to i8
  %12167 = srem i8 %12143, %12166
  %12168 = icmp eq i8 %12167, 0
  %12169 = or i1 %12141, %12168
  %12170 = add i64 %4365, -7547651321416362905
  %12171 = xor i64 -7547651321416362905, %4365
  %12172 = and i64 -7547651321416362905, %4365
  %12173 = mul i64 2, %12172
  %12174 = add i64 %12171, %12173
  %12175 = or i64 %56, 1848235377065117208
  %12176 = xor i64 %56, -1
  %12177 = and i64 %12176, -5919539134393562246
  %12178 = and i64 %56, 5919539134393562245
  %12179 = or i64 %12177, %12178
  %12180 = xor i64 -5440398045802656414, %12179
  %12181 = xor i64 %56, -1
  %12182 = or i64 -1848235377065117209, %12181
  %12183 = xor i64 %12182, -1
  %12184 = and i64 %12183, -1
  %12185 = or i64 %12180, %12184
  %12186 = sext i32 %dispatcher1 to i64
  %12187 = or i64 %12186, 2370665418925839305
  %12188 = xor i64 %12186, -1
  %12189 = and i64 %12188, -4827226909530962510
  %12190 = and i64 %12186, 4827226909530962509
  %12191 = or i64 %12189, %12190
  %12192 = xor i64 -7069396799335442821, %12191
  %12193 = xor i64 %12186, -1
  %12194 = or i64 -2370665418925839306, %12193
  %12195 = xor i64 %12194, -1
  %12196 = and i64 %12195, -1
  %12197 = or i64 %12192, %12196
  %12198 = xor i64 2385018454278730873, %12197
  %12199 = xor i64 %12198, %12185
  %12200 = xor i64 %12199, %12187
  %12201 = xor i64 %12200, %12170
  %12202 = xor i64 %12201, %12175
  %12203 = xor i64 %12202, %12174
  %12204 = or i64 %179, -7073443631590394955
  %12205 = xor i64 %179, -1
  %12206 = and i64 -7073443631590394955, %12205
  %12207 = add i64 %12206, %179
  %12208 = and i64 %90, 3018403095623946023
  %12209 = xor i64 %90, -1
  %12210 = or i64 -3018403095623946024, %12209
  %12211 = xor i64 %12210, -1
  %12212 = and i64 %12211, -1
  %12213 = xor i64 %12207, %12204
  %12214 = xor i64 %12213, %12212
  %12215 = xor i64 %12214, 6291873963667131481
  %12216 = xor i64 %12215, %12208
  %12217 = mul i64 %12203, %12216
  %12218 = trunc i64 %12217 to i32
  %12219 = select i1 %12169, i32 595012103, i32 %12218
  %12220 = or i32 %12219, 22
  %12221 = and i32 %12219, 22
  %12222 = sub i32 %12220, %12221
  store i32 %12222, i32* %35, align 4
  %12223 = call i8** @bf4367541783002168146(i32* %35)
  %12224 = load i8*, i8** %12223, align 8
  indirectbr i8* %12224, [label %loopEnd, label %12130]

12225:                                            ; preds = %12225, %loopStart
  %.reload215 = load i32, i32* %.reg2mem212, align 4
  %12226 = add i64 %338, -3010783047692157924
  %12227 = add i64 2972609959535185248, %338
  %12228 = sub i64 %12227, 5983393007227343172
  %12229 = or i64 %175, 8037964101791059475
  %12230 = xor i64 %175, -1
  %12231 = and i64 %12230, 6359600694388205697
  %12232 = and i64 %175, -6359600694388205698
  %12233 = or i64 %12231, %12232
  %12234 = xor i64 4020943574078006930, %12233
  %12235 = xor i64 %175, -1
  %12236 = or i64 -8037964101791059476, %12235
  %12237 = xor i64 %12236, -1
  %12238 = and i64 %12237, -1
  %12239 = or i64 %12234, %12238
  %12240 = xor i64 %12226, %12229
  %12241 = xor i64 %12240, -8100245974391209453
  %12242 = xor i64 %12241, %12239
  %12243 = xor i64 %12242, %12228
  %12244 = and i64 %328, 8390385025188973357
  %12245 = xor i64 %328, -1
  %12246 = or i64 -8390385025188973358, %12245
  %12247 = xor i64 %12246, -1
  %12248 = and i64 %12247, -1
  %12249 = add i64 %3, -1338061708633947853
  %12250 = sub i64 0, %3
  %12251 = add i64 1338061708633947853, %12250
  %12252 = sub i64 0, %12251
  %12253 = add i64 %36, -4221712569191509258
  %12254 = add i64 -9049021174714977913, %36
  %12255 = add i64 %12254, 4827308605523468655
  %12256 = xor i64 %12252, -6743173627970152260
  %12257 = xor i64 %12256, %12253
  %12258 = xor i64 %12257, %12248
  %12259 = xor i64 %12258, %12244
  %12260 = xor i64 %12259, %12249
  %12261 = xor i64 %12260, %12255
  %12262 = mul i64 %12243, %12261
  store i64 %12262, i64* %1256, align 8
  %12263 = call i8** @lk4104490460174343886(i64* %1256)
  %12264 = load i8*, i8** %12263, align 8
  %12265 = bitcast i8* %12264 to i32 (i32)*
  %12266 = call i32 %12265(i32 %.reload215)
  store i64 1996855465712537083, i64* %1256, align 8
  %12267 = call i8** @lk4104490460174343886(i64* %1256)
  %12268 = load i8*, i8** %12267, align 8
  %12269 = bitcast i8* %12268 to i32 (float*, float*)*
  %12270 = call i32 %12269(float* %0, float* %1)
  %12271 = icmp eq i32 %12270, 0
  %.reload115 = load i64, i64* %.reg2mem114, align 8
  %12272 = add nuw nsw i64 %.reload115, 1
  store i64 %12272, i64* %.reg2mem125, align 8
  %12273 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 13
  %12274 = load i32, i32* %12273, align 4
  %12275 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 11
  %12276 = load i32, i32* %12275, align 4
  %12277 = xor i32 %12274, %12276
  %12278 = and i32 %12274, %12276
  %12279 = mul i32 2, %12278
  %12280 = add i32 %12277, %12279
  %12281 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 51
  %12282 = load i32, i32* %12281, align 4
  %12283 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %12284 = load i32, i32* %12283, align 4
  %12285 = sub i32 %12282, %12284
  %12286 = select i1 %12271, i32 %12280, i32 %12285
  store i32 %12286, i32* %dispatcher, align 4
  store i32 %12270, i32* %.ph.reg2mem, align 4
  %12287 = load i8*, i8** %101, align 8
  %12288 = load i8, i8* %12287, align 1
  %12289 = mul i8 %12288, %12288
  %12290 = add i8 %12289, %12288
  %12291 = mul i8 %12290, 3
  %12292 = srem i8 %12291, 2
  %12293 = icmp eq i8 %12292, 0
  %12294 = mul i8 %12288, %12288
  %12295 = sub i8 0, %12294
  %12296 = sub i8 0, %12288
  %12297 = add i8 %12295, %12296
  %12298 = sub i8 0, %12297
  %12299 = srem i8 %12298, 2
  %12300 = icmp eq i8 %12299, 0
  %12301 = and i1 %12293, %12300
  %12302 = or i64 %212, 3978320424112353786
  %12303 = xor i64 %212, -1
  %12304 = and i64 %12303, -1756568872740950967
  %12305 = and i64 %212, 1756568872740950966
  %12306 = or i64 %12304, %12305
  %12307 = xor i64 -3410706287621464653, %12306
  %12308 = xor i64 %212, -1
  %12309 = or i64 -3978320424112353787, %12308
  %12310 = xor i64 %12309, -1
  %12311 = and i64 %12310, -1
  %12312 = or i64 %12307, %12311
  %12313 = add i64 %112, 764277557754343665
  %12314 = sub i64 0, %112
  %12315 = add i64 -764277557754343665, %12314
  %12316 = sub i64 0, %12315
  %12317 = add i64 %391, -8481523653120557968
  %12318 = and i64 -8481523653120557968, %391
  %12319 = or i64 -8481523653120557968, %391
  %12320 = add i64 %12318, %12319
  %12321 = xor i64 %12317, %12316
  %12322 = xor i64 %12321, %12313
  %12323 = xor i64 %12322, -7001744646367419095
  %12324 = xor i64 %12323, %12320
  %12325 = xor i64 %12324, %12312
  %12326 = xor i64 %12325, %12302
  %12327 = and i64 %280, -8328832814991465864
  %12328 = or i64 8328832814991465863, %280
  %12329 = sub i64 %12328, 8328832814991465863
  %12330 = add i64 %46, -8116910470467081773
  %12331 = sub i64 0, %46
  %12332 = sub i64 -8116910470467081773, %12331
  %12333 = or i64 %320, -2222410562296027363
  %12334 = and i64 -2222410562296027363, %320
  %12335 = xor i64 -2222410562296027363, %320
  %12336 = or i64 %12334, %12335
  %12337 = xor i64 %12336, %12327
  %12338 = xor i64 %12337, %12329
  %12339 = xor i64 %12338, -1430915123236236631
  %12340 = xor i64 %12339, %12330
  %12341 = xor i64 %12340, %12332
  %12342 = xor i64 %12341, %12333
  %12343 = mul i64 %12326, %12342
  %12344 = trunc i64 %12343 to i32
  %12345 = select i1 %12301, i32 595012100, i32 %12344
  %12346 = xor i32 %12345, 21
  store i32 %12346, i32* %35, align 4
  %12347 = call i8** @bf4367541783002168146(i32* %35)
  %12348 = load i8*, i8** %12347, align 8
  indirectbr i8* %12348, [label %loopEnd, label %12225]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  %12349 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 30
  %12350 = load i32, i32* %12349, align 4
  %12351 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  %12352 = load i32, i32* %12351, align 4
  %12353 = add i32 %12350, %12352
  store i32 %12353, i32* %dispatcher, align 4
  store i32 %.ph.reload, i32* %.reg2mem216, align 4
  %12354 = load i8*, i8** %394, align 8
  %12355 = load i8, i8* %12354, align 1
  %12356 = mul i8 %12355, 2
  %12357 = mul i8 %12355, 2
  %12358 = or i64 %322, -4104180101879130732
  %12359 = xor i64 %322, -1
  %12360 = and i64 -4104180101879130732, %12359
  %12361 = add i64 %12360, %322
  %12362 = add i64 %4019, 1666315114930411542
  %12363 = xor i64 1666315114930411542, %4019
  %12364 = and i64 1666315114930411542, %4019
  %12365 = mul i64 2, %12364
  %12366 = add i64 %12363, %12365
  %12367 = or i64 %251, -3050992301372653279
  %12368 = xor i64 %251, -1
  %12369 = and i64 -3050992301372653279, %12368
  %12370 = add i64 %12369, %251
  %12371 = xor i64 %12367, %12366
  %12372 = xor i64 %12371, %12358
  %12373 = xor i64 %12372, %12370
  %12374 = xor i64 %12373, 9219367421698407657
  %12375 = xor i64 %12374, %12361
  %12376 = xor i64 %12375, %12362
  %12377 = or i64 %116, -976206357397375885
  %12378 = and i64 -976206357397375885, %116
  %12379 = xor i64 -976206357397375885, %116
  %12380 = or i64 %12378, %12379
  %12381 = add i64 %322, 5617690622997178654
  %12382 = add i64 3596567138100050223, %322
  %12383 = sub i64 %12382, -2021123484897128431
  %12384 = and i64 %330, 5395907576683602832
  %12385 = or i64 -5395907576683602833, %330
  %12386 = sub i64 %12385, -5395907576683602833
  %12387 = xor i64 %12384, %12381
  %12388 = xor i64 %12387, 6869777117472110258
  %12389 = xor i64 %12388, %12380
  %12390 = xor i64 %12389, %12377
  %12391 = xor i64 %12390, %12386
  %12392 = xor i64 %12391, %12383
  %12393 = mul i64 %12376, %12392
  %12394 = trunc i64 %12393 to i8
  %12395 = add i8 %12394, %12357
  %12396 = mul i8 %12356, %12395
  %12397 = srem i8 %12396, 4
  %12398 = icmp eq i8 %12397, 0
  %12399 = mul i8 %12355, %12355
  %12400 = add i8 %12399, %12355
  %12401 = srem i8 %12400, 2
  %12402 = icmp eq i8 %12401, 0
  %12403 = xor i1 %12402, true
  %12404 = xor i1 %12398, %12403
  %12405 = and i1 %12404, %12398
  %12406 = select i1 %12405, i32 595012111, i32 595012113
  %12407 = xor i32 %12406, 594561755
  %12408 = xor i32 %12407, 594561733
  store i32 %12408, i32* %35, align 4
  %12409 = call i8** @bf4367541783002168146(i32* %35)
  %12410 = load i8*, i8** %12409, align 8
  indirectbr i8* %12410, [label %loopEnd, label %.loopexit]

12411:                                            ; preds = %loopStart
  %.reload217 = load i32, i32* %.reg2mem216, align 4
  ret i32 %.reload217

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %12412 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %12412, align 4
  %12413 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %12413, align 4
  %12414 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %12414, align 4
  %12415 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %12415, align 4
  %12416 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 8
  %12417 = add i64 %3, -1711204643101504831
  %12418 = add i64 5136552379831960491, %3
  %12419 = add i64 %12418, -6847757022933465322
  %12420 = or i64 %320, -4623863877058232777
  %12421 = and i64 -4623863877058232777, %320
  %12422 = xor i64 -4623863877058232777, %320
  %12423 = or i64 %12421, %12422
  %12424 = xor i64 %12423, 4097843911136081339
  %12425 = xor i64 %12424, %12417
  %12426 = xor i64 %12425, %12419
  %12427 = xor i64 %12426, %12420
  %12428 = and i64 %90, -7779029946398686370
  %12429 = xor i64 %90, -1
  %12430 = or i64 7779029946398686369, %12429
  %12431 = xor i64 %12430, -1
  %12432 = and i64 %12431, -1
  %12433 = and i64 %389, 5480483683353142852
  %12434 = xor i64 %389, -1
  %12435 = xor i64 5480483683353142852, %12434
  %12436 = and i64 %12435, 5480483683353142852
  %12437 = and i64 %4826, -7772931329805643139
  %12438 = xor i64 %4826, -1
  %12439 = xor i64 -7772931329805643139, %12438
  %12440 = and i64 %12439, -7772931329805643139
  %12441 = xor i64 %12433, %12432
  %12442 = xor i64 %12441, %12428
  %12443 = xor i64 %12442, 5856276230116095013
  %12444 = xor i64 %12443, %12436
  %12445 = xor i64 %12444, %12440
  %12446 = xor i64 %12445, %12437
  %12447 = mul i64 %12427, %12446
  %12448 = trunc i64 %12447 to i32
  store i32 %12448, i32* %12416, align 4
  %12449 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %12449, align 4
  %12450 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %12450, align 4
  %12451 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %12451, align 4
  %12452 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 16
  %12453 = and i64 %120, -6220902486543280052
  %12454 = or i64 6220902486543280051, %120
  %12455 = sub i64 %12454, 6220902486543280051
  %12456 = add i64 %36, 4023932924220652295
  %12457 = add i64 9062163964707364118, %36
  %12458 = add i64 %12457, -5038231040486711823
  %12459 = xor i64 %12456, -2876790694187013775
  %12460 = xor i64 %12459, %12455
  %12461 = xor i64 %12460, %12453
  %12462 = xor i64 %12461, %12458
  %12463 = and i64 %90, -8575230478744567668
  %12464 = xor i64 %90, -1
  %12465 = xor i64 -8575230478744567668, %12464
  %12466 = and i64 %12465, -8575230478744567668
  %12467 = or i64 %92, -1461847513216956575
  %12468 = xor i64 %92, -1
  %12469 = and i64 %12468, -1036857389439465452
  %12470 = and i64 %92, 1036857389439465451
  %12471 = or i64 %12469, %12470
  %12472 = xor i64 1885370917263150965, %12471
  %12473 = xor i64 %92, -1
  %12474 = or i64 1461847513216956574, %12473
  %12475 = xor i64 %12474, -1
  %12476 = and i64 %12475, -1
  %12477 = or i64 %12472, %12476
  %12478 = xor i64 %12467, %12466
  %12479 = xor i64 %12478, %12463
  %12480 = xor i64 %12479, -3240101485080788609
  %12481 = xor i64 %12480, %12477
  %12482 = mul i64 %12462, %12481
  %12483 = trunc i64 %12482 to i32
  store i32 %12483, i32* %12452, align 4
  %12484 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %12484, align 4
  %12485 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %12485, align 4
  %12486 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 22
  %12487 = add i64 %2865, -1344084521984697990
  %12488 = add i64 -3605461779206218910, %2865
  %12489 = sub i64 %12488, -2261377257221520920
  %12490 = and i64 %278, -2510233282649996151
  %12491 = xor i64 %278, -1
  %12492 = or i64 2510233282649996150, %12491
  %12493 = xor i64 %12492, -1
  %12494 = and i64 %12493, -1
  %12495 = xor i64 5225918117508297571, %12490
  %12496 = xor i64 %12495, %12487
  %12497 = xor i64 %12496, %12494
  %12498 = xor i64 %12497, %12489
  %12499 = and i64 %108, -214406480167612308
  %12500 = xor i64 %108, -1
  %12501 = xor i64 -214406480167612308, %12500
  %12502 = and i64 %12501, -214406480167612308
  %12503 = or i64 %92, -6161763456689947558
  %12504 = xor i64 %92, -1
  %12505 = and i64 -6161763456689947558, %12504
  %12506 = add i64 %12505, %92
  %12507 = xor i64 %12502, %12506
  %12508 = xor i64 %12507, %12499
  %12509 = xor i64 %12508, %12503
  %12510 = xor i64 %12509, -7625532548976679897
  %12511 = mul i64 %12498, %12510
  %12512 = trunc i64 %12511 to i32
  store i32 %12512, i32* %12486, align 4
  %12513 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 24
  store i32 23, i32* %12513, align 4
  %12514 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 26
  %12515 = and i64 %336, -7635905632870568691
  %12516 = or i64 7635905632870568690, %336
  %12517 = sub i64 %12516, 7635905632870568690
  %12518 = add i64 %112, -1895516961843478534
  %12519 = and i64 -1895516961843478534, %112
  %12520 = or i64 -1895516961843478534, %112
  %12521 = add i64 %12519, %12520
  %12522 = xor i64 %12518, %12515
  %12523 = xor i64 %12522, %12517
  %12524 = xor i64 %12523, %12521
  %12525 = xor i64 %12524, 8322442175612255291
  %12526 = add i64 %280, 1149371405445096640
  %12527 = add i64 -3809908116059799661, %280
  %12528 = sub i64 %12527, -4959279521504896301
  %12529 = add i64 %114, 5323516349233339929
  %12530 = xor i64 5323516349233339929, %114
  %12531 = and i64 5323516349233339929, %114
  %12532 = mul i64 2, %12531
  %12533 = add i64 %12530, %12532
  %12534 = xor i64 -5864667006267018309, %12528
  %12535 = xor i64 %12534, %12529
  %12536 = xor i64 %12535, %12526
  %12537 = xor i64 %12536, %12533
  %12538 = mul i64 %12525, %12537
  %12539 = trunc i64 %12538 to i32
  store i32 %12539, i32* %12514, align 4
  %12540 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 28
  store i32 27, i32* %12540, align 4
  %12541 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %12541, align 4
  %12542 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 32
  %12543 = and i64 %332, 4235115630695613411
  %12544 = xor i64 %332, -1
  %12545 = xor i64 4235115630695613411, %12544
  %12546 = and i64 %12545, 4235115630695613411
  %12547 = or i64 %3431, 2307581578957553326
  %12548 = and i64 2307581578957553326, %3431
  %12549 = xor i64 2307581578957553326, %3431
  %12550 = or i64 %12548, %12549
  %12551 = xor i64 %12543, %12550
  %12552 = xor i64 %12551, %12547
  %12553 = xor i64 %12552, 8214060362418300637
  %12554 = xor i64 %12553, %12546
  %12555 = add i64 %1428, -3507650568706307019
  %12556 = sub i64 0, %1428
  %12557 = sub i64 -3507650568706307019, %12556
  %12558 = and i64 %280, -1787354415285714897
  %12559 = xor i64 %280, -1
  %12560 = or i64 1787354415285714896, %12559
  %12561 = xor i64 %12560, -1
  %12562 = and i64 %12561, -1
  %12563 = xor i64 %12555, %12562
  %12564 = xor i64 %12563, %12558
  %12565 = xor i64 %12564, 4522501684371672363
  %12566 = xor i64 %12565, %12557
  %12567 = mul i64 %12554, %12566
  %12568 = trunc i64 %12567 to i32
  store i32 %12568, i32* %12542, align 4
  %12569 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 34
  store i32 33, i32* %12569, align 4
  %12570 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 36
  store i32 35, i32* %12570, align 4
  %12571 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 38
  store i32 37, i32* %12571, align 4
  %12572 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 40
  store i32 39, i32* %12572, align 4
  %12573 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 42
  %12574 = or i64 %114, 9192770555236419309
  %12575 = xor i64 %114, -1
  %12576 = and i64 9192770555236419309, %12575
  %12577 = add i64 %12576, %114
  %12578 = and i64 %251, -7742901587159596719
  %12579 = or i64 7742901587159596718, %251
  %12580 = sub i64 %12579, 7742901587159596718
  %12581 = and i64 %387, 7241024647996328445
  %12582 = or i64 -7241024647996328446, %387
  %12583 = sub i64 %12582, -7241024647996328446
  %12584 = xor i64 %12574, %12583
  %12585 = xor i64 %12584, %12580
  %12586 = xor i64 %12585, %12578
  %12587 = xor i64 %12586, %12581
  %12588 = xor i64 %12587, -8238583752116652625
  %12589 = xor i64 %12588, %12577
  %12590 = add i64 %2020, 6632336244304292662
  %12591 = sub i64 0, %2020
  %12592 = sub i64 6632336244304292662, %12591
  %12593 = and i64 %212, 6593400893164078874
  %12594 = or i64 -6593400893164078875, %212
  %12595 = sub i64 %12594, -6593400893164078875
  %12596 = or i64 %2342, -5999795017322355380
  %12597 = and i64 -5999795017322355380, %2342
  %12598 = xor i64 -5999795017322355380, %2342
  %12599 = or i64 %12597, %12598
  %12600 = xor i64 %12599, %12592
  %12601 = xor i64 %12600, %12590
  %12602 = xor i64 %12601, %12596
  %12603 = xor i64 %12602, -233210367052581465
  %12604 = xor i64 %12603, %12593
  %12605 = xor i64 %12604, %12595
  %12606 = mul i64 %12589, %12605
  %12607 = trunc i64 %12606 to i32
  store i32 %12607, i32* %12573, align 4
  %12608 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 44
  store i32 43, i32* %12608, align 4
  %12609 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 46
  store i32 45, i32* %12609, align 4
  %12610 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 48
  store i32 47, i32* %12610, align 4
  %12611 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 50
  store i32 49, i32* %12611, align 4
  %12612 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 52
  store i32 51, i32* %12612, align 4
  %12613 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 54
  store i32 53, i32* %12613, align 4
  %12614 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 56
  store i32 55, i32* %12614, align 4
  %12615 = getelementptr inbounds [58 x i32], [58 x i32]* %lookupTable, i32 0, i32 0
  %12616 = load i32, i32* %12615, align 4
  store i32 %12616, i32* %dispatcher, align 4
  %12617 = load i8*, i8** %37, align 8
  %12618 = load i8, i8* %12617, align 1
  %12619 = mul i8 %12618, %12618
  %12620 = add i8 %12619, %12618
  %12621 = mul i8 %12620, 3
  %12622 = srem i8 %12621, 2
  %12623 = icmp eq i8 %12622, 0
  %12624 = mul i8 %12618, %12618
  %12625 = and i8 %12624, %12618
  %12626 = or i8 %12624, %12618
  %12627 = add i8 %12625, %12626
  %12628 = add i64 %1428, 1073017577971339346
  %12629 = sub i64 0, %1428
  %12630 = sub i64 1073017577971339346, %12629
  %12631 = add i64 %171, 2782951824516105484
  %12632 = sub i64 0, %171
  %12633 = add i64 -2782951824516105484, %12632
  %12634 = sub i64 0, %12633
  %12635 = or i64 %2648, -2408488135594678882
  %12636 = xor i64 %2648, -1
  %12637 = and i64 %12636, -4369600961354665015
  %12638 = and i64 %2648, 4369600961354665014
  %12639 = or i64 %12637, %12638
  %12640 = xor i64 2148036558469273175, %12639
  %12641 = xor i64 %2648, -1
  %12642 = or i64 2408488135594678881, %12641
  %12643 = xor i64 %12642, -1
  %12644 = and i64 %12643, -1
  %12645 = or i64 %12640, %12644
  %12646 = xor i64 %12630, %12635
  %12647 = xor i64 %12646, 4491087425224792863
  %12648 = xor i64 %12647, %12634
  %12649 = xor i64 %12648, %12645
  %12650 = xor i64 %12649, %12628
  %12651 = xor i64 %12650, %12631
  %12652 = and i64 %332, -7488443483523019737
  %12653 = xor i64 %332, -1
  %12654 = or i64 7488443483523019736, %12653
  %12655 = xor i64 %12654, -1
  %12656 = and i64 %12655, -1
  %12657 = add i64 %173, 3060281462197598283
  %12658 = xor i64 3060281462197598283, %173
  %12659 = and i64 3060281462197598283, %173
  %12660 = mul i64 2, %12659
  %12661 = add i64 %12658, %12660
  %12662 = or i64 %118, 5720406425438624257
  %12663 = xor i64 %118, -1
  %12664 = and i64 5720406425438624257, %12663
  %12665 = add i64 %12664, %118
  %12666 = xor i64 %12656, %12665
  %12667 = xor i64 %12666, %12657
  %12668 = xor i64 %12667, %12662
  %12669 = xor i64 %12668, 6424491533868253630
  %12670 = xor i64 %12669, %12652
  %12671 = xor i64 %12670, %12661
  %12672 = mul i64 %12651, %12671
  %12673 = trunc i64 %12672 to i8
  %12674 = srem i8 %12627, %12673
  %12675 = icmp eq i8 %12674, 0
  %12676 = and i1 %12623, %12675
  %12677 = add i64 %280, 7976728007585042037
  %12678 = sub i64 0, %280
  %12679 = sub i64 7976728007585042037, %12678
  %12680 = or i64 %391, 4057723187179310337
  %12681 = and i64 4057723187179310337, %391
  %12682 = xor i64 4057723187179310337, %391
  %12683 = or i64 %12681, %12682
  %12684 = and i64 %320, 4765789280446993895
  %12685 = or i64 -4765789280446993896, %320
  %12686 = sub i64 %12685, -4765789280446993896
  %12687 = xor i64 %12680, %12677
  %12688 = xor i64 %12687, %12679
  %12689 = xor i64 %12688, %12683
  %12690 = xor i64 %12689, 5424054598530487011
  %12691 = xor i64 %12690, %12686
  %12692 = xor i64 %12691, %12684
  %12693 = add i64 %2342, 773656304535095101
  %12694 = add i64 6250476246674543878, %2342
  %12695 = sub i64 %12694, 5476819942139448777
  %12696 = and i64 %116, 7690989368448663122
  %12697 = xor i64 %116, -1
  %12698 = or i64 -7690989368448663123, %12697
  %12699 = xor i64 %12698, -1
  %12700 = and i64 %12699, -1
  %12701 = xor i64 -2693663858622828668, %12696
  %12702 = xor i64 %12701, %12693
  %12703 = xor i64 %12702, %12700
  %12704 = xor i64 %12703, %12695
  %12705 = mul i64 %12692, %12704
  %12706 = trunc i64 %12705 to i32
  %12707 = select i1 %12676, i32 %12706, i32 595012120
  %12708 = xor i32 %12707, 20
  store i32 %12708, i32* %35, align 4
  %12709 = call i8** @bf4367541783002168146(i32* %35)
  %12710 = load i8*, i8** %12709, align 8
  indirectbr i8* %12710, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %12711 = load i8*, i8** %339, align 8
  %12712 = load i8, i8* %12711, align 1
  %12713 = and i8 %12712, 1
  %12714 = icmp eq i8 %12713, 0
  %12715 = mul i8 %12712, %12712
  %12716 = add i8 %12715, %12712
  %12717 = mul i8 %12716, 3
  %12718 = srem i8 %12717, 2
  %12719 = and i64 %391, 4119298032316158055
  %12720 = xor i64 %391, -1
  %12721 = or i64 -4119298032316158056, %12720
  %12722 = xor i64 %12721, -1
  %12723 = and i64 %12722, -1
  %12724 = add i64 %48, -1536770438370204172
  %12725 = sub i64 0, %48
  %12726 = sub i64 -1536770438370204172, %12725
  %12727 = xor i64 -3428912220799310427, %12724
  %12728 = xor i64 %12727, %12719
  %12729 = xor i64 %12728, %12723
  %12730 = xor i64 %12729, %12726
  %12731 = add i64 %4586, 9008444681253513559
  %12732 = and i64 9008444681253513559, %4586
  %12733 = or i64 9008444681253513559, %4586
  %12734 = add i64 %12732, %12733
  %12735 = add i64 %108, 2704175078672079489
  %12736 = sub i64 0, %108
  %12737 = sub i64 2704175078672079489, %12736
  %12738 = or i64 %276, -1029806005625355849
  %12739 = and i64 -1029806005625355849, %276
  %12740 = xor i64 -1029806005625355849, %276
  %12741 = or i64 %12739, %12740
  %12742 = xor i64 %12731, 0
  %12743 = xor i64 %12742, %12735
  %12744 = xor i64 %12743, %12741
  %12745 = xor i64 %12744, %12738
  %12746 = xor i64 %12745, %12737
  %12747 = xor i64 %12746, %12734
  %12748 = mul i64 %12730, %12747
  %12749 = trunc i64 %12748 to i8
  %12750 = icmp eq i8 %12718, %12749
  %12751 = xor i1 %12714, true
  %12752 = and i1 %12751, true
  %12753 = and i1 %12714, false
  %12754 = or i1 %12752, %12753
  %12755 = xor i1 %12750, true
  %12756 = and i1 %12755, true
  %12757 = and i1 %12750, false
  %12758 = or i1 %12756, %12757
  %12759 = xor i1 %12754, %12758
  %12760 = xor i1 %12714, true
  %12761 = xor i1 %12750, true
  %12762 = or i1 %12760, %12761
  %12763 = xor i1 %12762, true
  %12764 = and i1 %12763, true
  %12765 = or i1 %12759, %12764
  %12766 = select i1 %12765, i32 595012100, i32 595012113
  %12767 = xor i32 %12766, 21
  store i32 %12767, i32* %35, align 4
  %12768 = call i8** @bf4367541783002168146(i32* %35)
  %12769 = load i8*, i8** %12768, align 8
  indirectbr i8* %12769, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.loopexit, %12225, %12130, %12009, %11870, %11701, %11636, %codeRepl230, %codeRepl228, %11055, %codeRepl217, %10799, %10696, %10622, %10491, %10267, %codeRepl209, %10087, %9981, %9920, %codeRepl202, %9563, %9386, %9365, %codeRepl191, %codeRepl186, %8926, %codeRepl185, %8673, %codeRepl106, %codeRepl26, %codeRepl3, %8123, %7875, %7819, %7762, %codeRepl1, %7610, %7403, %7350, %7102, %6850, %6736, %.preheader, %6500, %6391, %6291, %6024, %5739, %5636, %codeRepl, %EntryBasicBlockSplit
  %12770 = load i8*, i8** %97, align 8
  %12771 = load i8, i8* %12770, align 1
  %12772 = mul i8 %12771, %12771
  %12773 = add i8 %12772, %12771
  %12774 = mul i8 %12773, 3
  %12775 = srem i8 %12774, 2
  %12776 = icmp eq i8 %12775, 0
  %12777 = mul i8 %12771, %12771
  %12778 = add i8 %12777, %12771
  %12779 = add i64 %330, 5643816980143888863
  %12780 = sub i64 0, %330
  %12781 = add i64 -5643816980143888863, %12780
  %12782 = sub i64 0, %12781
  %12783 = or i64 %58, -4410841078624155966
  %12784 = xor i64 %58, -1
  %12785 = and i64 %12784, 5757227219125669588
  %12786 = and i64 %58, -5757227219125669589
  %12787 = or i64 %12785, %12786
  %12788 = xor i64 -8274153961081403370, %12787
  %12789 = xor i64 %58, -1
  %12790 = or i64 4410841078624155965, %12789
  %12791 = xor i64 %12790, -1
  %12792 = and i64 %12791, -1
  %12793 = or i64 %12788, %12792
  %12794 = add i64 %96, -942110486583697122
  %12795 = add i64 1778257106123636553, %96
  %12796 = add i64 %12795, -2720367592707333675
  %12797 = xor i64 %12794, %12779
  %12798 = xor i64 %12797, %12782
  %12799 = xor i64 %12798, %12783
  %12800 = xor i64 %12799, %12796
  %12801 = xor i64 %12800, %12793
  %12802 = xor i64 %12801, 1969207940259553263
  %12803 = or i64 %52, 2410545102170362335
  %12804 = and i64 2410545102170362335, %52
  %12805 = xor i64 2410545102170362335, %52
  %12806 = or i64 %12804, %12805
  %12807 = or i64 %46, -2825265965250357850
  %12808 = xor i64 %46, -1
  %12809 = and i64 %12808, -6916652202850458660
  %12810 = and i64 %46, 6916652202850458659
  %12811 = or i64 %12809, %12810
  %12812 = xor i64 8703697647764813434, %12811
  %12813 = xor i64 %46, -1
  %12814 = or i64 2825265965250357849, %12813
  %12815 = xor i64 %12814, -1
  %12816 = and i64 %12815, -1
  %12817 = or i64 %12812, %12816
  %12818 = and i64 %251, 6150910853853867022
  %12819 = xor i64 %251, -1
  %12820 = or i64 -6150910853853867023, %12819
  %12821 = xor i64 %12820, -1
  %12822 = and i64 %12821, -1
  %12823 = xor i64 %12806, 6869179731148594718
  %12824 = xor i64 %12823, %12817
  %12825 = xor i64 %12824, %12818
  %12826 = xor i64 %12825, %12807
  %12827 = xor i64 %12826, %12822
  %12828 = xor i64 %12827, %12803
  %12829 = mul i64 %12802, %12828
  %12830 = trunc i64 %12829 to i8
  %12831 = srem i8 %12778, %12830
  %12832 = icmp eq i8 %12831, 0
  %12833 = and i1 %12776, %12832
  %12834 = or i64 %334, 3708063797065130806
  %12835 = xor i64 %334, -1
  %12836 = and i64 3708063797065130806, %12835
  %12837 = add i64 %12836, %334
  %12838 = and i64 %253, 4782665948301581970
  %12839 = or i64 -4782665948301581971, %253
  %12840 = sub i64 %12839, -4782665948301581971
  %12841 = add i64 %385, 460010983785649588
  %12842 = and i64 460010983785649588, %385
  %12843 = or i64 460010983785649588, %385
  %12844 = add i64 %12842, %12843
  %12845 = xor i64 %12841, 4256579476550281797
  %12846 = xor i64 %12845, %12837
  %12847 = xor i64 %12846, %12838
  %12848 = xor i64 %12847, %12844
  %12849 = xor i64 %12848, %12840
  %12850 = xor i64 %12849, %12834
  %12851 = add i64 %98, -2974216357946022466
  %12852 = sub i64 0, %98
  %12853 = add i64 2974216357946022466, %12852
  %12854 = sub i64 0, %12853
  %12855 = and i64 %177, 2382286595195140862
  %12856 = or i64 -2382286595195140863, %177
  %12857 = sub i64 %12856, -2382286595195140863
  %12858 = xor i64 %12855, %12857
  %12859 = xor i64 %12858, %12851
  %12860 = xor i64 %12859, -5911244244948712396
  %12861 = xor i64 %12860, %12854
  %12862 = mul i64 %12850, %12861
  %12863 = trunc i64 %12862 to i32
  %12864 = select i1 %12833, i32 %12863, i32 595012140
  %12865 = or i32 %12864, 40
  %12866 = and i32 %12864, 40
  %12867 = sub i32 %12865, %12866
  store i32 %12867, i32* %35, align 4
  %12868 = call i8** @bf4367541783002168146(i32* %35)
  %12869 = load i8*, i8** %12868, align 8
  indirectbr i8* %12869, [label %loopStart, label %loopEnd]
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree noinline nounwind ssp uwtable
define i32 @clear(i8* %0, i64 %1, float* %2, i64 %3) local_unnamed_addr #1 {
entry:
  %4 = and i64 %1, -5100112039397654680
  %5 = or i64 5100112039397654679, %1
  %6 = sub i64 %5, 5100112039397654679
  %7 = add i64 %3, 317634717507780924
  %8 = add i64 -5655102156633829016, %3
  %9 = sub i64 %8, -5972736874141609940
  %10 = xor i64 3213049947242661767, %9
  %11 = xor i64 %10, %6
  %12 = xor i64 %11, %7
  %13 = xor i64 %12, %4
  %14 = or i64 %3, 7849343334676111295
  %15 = and i64 7849343334676111295, %3
  %16 = xor i64 7849343334676111295, %3
  %17 = or i64 %15, %16
  %18 = add i64 %3, -3308052852425020913
  %19 = add i64 5129246688817677941, %3
  %20 = sub i64 %19, 8437299541242698854
  %21 = xor i64 %14, -6352809596962304457
  %22 = xor i64 %21, %20
  %23 = xor i64 %22, %17
  %24 = xor i64 %23, %18
  %25 = mul i64 %13, %24
  %26 = trunc i64 %25 to i32
  %27 = alloca i32, i32 %26, align 4
  %28 = call i64 @h11804894491772278134(i64 595012099)
  %29 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %28
  store i8* blockaddress(@clear, %"9"), i8** %29, align 8
  %30 = call i64 @h11804894491772278134(i64 595012101)
  %31 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %30
  store i8* blockaddress(@clear, %"7"), i8** %31, align 8
  %32 = call i64 @h11804894491772278134(i64 595012103)
  %33 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %32
  store i8* blockaddress(@clear, %"5"), i8** %33, align 8
  %34 = call i64 @h11804894491772278134(i64 595012097)
  %35 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %34
  store i8* blockaddress(@clear, %"4"), i8** %35, align 8
  %36 = call i64 @h11804894491772278134(i64 595012104)
  %37 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %36
  store i8* blockaddress(@clear, %"3"), i8** %37, align 8
  %38 = call i64 @h11804894491772278134(i64 595012096)
  %39 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %38
  store i8* blockaddress(@clear, %codeRepl), i8** %39, align 8
  %40 = call i64 @h11804894491772278134(i64 595012105)
  %41 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %40
  store i8* blockaddress(@clear, %codeRepl1), i8** %41, align 8
  %42 = call i64 @h11804894491772278134(i64 595012102)
  %43 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %42
  store i8* blockaddress(@clear, %EntryBasicBlockSplit), i8** %43, align 8
  %44 = call i64 @h11804894491772278134(i64 595012098)
  %45 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %44
  store i8* blockaddress(@clear, %codeRepl3), i8** %45, align 8
  %46 = call i64 @h11804894491772278134(i64 595012100)
  %47 = getelementptr [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %46
  store i8* blockaddress(@clear, %BogusBasciBlock), i8** %47, align 8
  %48 = add i64 %3, 7214774203082941124
  %49 = sub i64 0, %3
  %50 = add i64 -7214774203082941124, %49
  %51 = sub i64 0, %50
  %52 = or i64 %1, -6966451946932668948
  %53 = xor i64 %1, -1
  %54 = and i64 %53, 5566090191250800545
  %55 = and i64 %1, -5566090191250800546
  %56 = or i64 %54, %55
  %57 = xor i64 -3284099030439310771, %56
  %58 = xor i64 %1, -1
  %59 = or i64 6966451946932668947, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = or i64 %57, %61
  %63 = xor i64 %51, %62
  %64 = xor i64 %63, %52
  %65 = xor i64 %64, %48
  %66 = xor i64 %65, -4926643830679527523
  %67 = or i64 %1, -511174616585384216
  %68 = and i64 -511174616585384216, %1
  %69 = xor i64 -511174616585384216, %1
  %70 = or i64 %68, %69
  %71 = and i64 %1, 6159037424727182274
  %72 = xor i64 %1, -1
  %73 = xor i64 6159037424727182274, %72
  %74 = and i64 %73, 6159037424727182274
  %75 = xor i64 %71, %67
  %76 = xor i64 %75, -7086150990516429131
  %77 = xor i64 %76, %74
  %78 = xor i64 %77, %70
  %79 = mul i64 %66, %78
  %80 = trunc i64 %79 to i32
  %.reg2mem38 = alloca i32, i32 %80, align 4
  %.reg2mem35 = alloca i64, align 8
  %.reg2mem33 = alloca i1, align 1
  %.reg2mem31 = alloca i8**, align 8
  %.reg2mem26 = alloca i8**, align 8
  %.reg2mem22 = alloca i8**, align 8
  %.reg2mem19 = alloca i8**, align 8
  %.reg2mem16 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %81 = or i64 %3, 2090715479353892015
  %82 = xor i64 %3, -1
  %83 = and i64 2090715479353892015, %82
  %84 = add i64 %83, %3
  %85 = or i64 %3, 5388486985466981130
  %86 = and i64 5388486985466981130, %3
  %87 = xor i64 5388486985466981130, %3
  %88 = or i64 %86, %87
  %89 = add i64 %3, -5945508067366586488
  %90 = sub i64 0, %3
  %91 = sub i64 -5945508067366586488, %90
  %92 = xor i64 -7601406647417563469, %81
  %93 = xor i64 %92, %91
  %94 = xor i64 %93, %84
  %95 = xor i64 %94, %89
  %96 = xor i64 %95, %88
  %97 = xor i64 %96, %85
  %98 = or i64 %3, -8433841515315016747
  %99 = xor i64 %3, -1
  %100 = and i64 -8433841515315016747, %99
  %101 = add i64 %100, %3
  %102 = and i64 %3, 3506674873286168071
  %103 = or i64 -3506674873286168072, %3
  %104 = sub i64 %103, -3506674873286168072
  %105 = xor i64 -1660729364029863813, %101
  %106 = xor i64 %105, %104
  %107 = xor i64 %106, %102
  %108 = xor i64 %107, %98
  %109 = mul i64 %97, %108
  %110 = trunc i64 %109 to i32
  %.reg2mem6 = alloca i8**, i32 %110, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 10, align 8
  %111 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear, %BogusBasciBlock), i8** %111, align 8
  %112 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %112, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@clear, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %113 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %113, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@clear, %codeRepl), i8** %.reload5, align 8
  %114 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %114, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@clear, %"3"), i8** %.reload8, align 8
  %115 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %115, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@clear, %"4"), i8** %.reload11, align 8
  %116 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %116, i8*** %.reg2mem12, align 8
  %.reload15 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@clear, %"5"), i8** %.reload15, align 8
  %117 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %117, i8*** %.reg2mem16, align 8
  %.reload18 = load i8**, i8*** %.reg2mem16, align 8
  store i8* blockaddress(@clear, %codeRepl1), i8** %.reload18, align 8
  %118 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %118, i8*** %.reg2mem19, align 8
  %.reload21 = load i8**, i8*** %.reg2mem19, align 8
  store i8* blockaddress(@clear, %"7"), i8** %.reload21, align 8
  %119 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %119, i8*** %.reg2mem22, align 8
  %.reload25 = load i8**, i8*** %.reg2mem22, align 8
  store i8* blockaddress(@clear, %codeRepl3), i8** %.reload25, align 8
  %120 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %120, i8*** %.reg2mem26, align 8
  %.reload30 = load i8**, i8*** %.reg2mem26, align 8
  store i8* blockaddress(@clear, %"9"), i8** %.reload30, align 8
  %121 = alloca i64, align 8
  %122 = alloca i64, align 8
  %123 = or i64 %3, -8741017278705655077
  %124 = xor i64 %3, -1
  %125 = and i64 -8741017278705655077, %124
  %126 = add i64 %125, %3
  %127 = or i64 %3, -3447372373779549303
  %128 = and i64 -3447372373779549303, %3
  %129 = xor i64 -3447372373779549303, %3
  %130 = or i64 %128, %129
  %131 = and i64 %1, -5130851564924255345
  %132 = xor i64 %1, -1
  %133 = or i64 5130851564924255344, %132
  %134 = xor i64 %133, -1
  %135 = and i64 %134, -1
  %136 = xor i64 %127, %131
  %137 = xor i64 %136, %130
  %138 = xor i64 %137, %126
  %139 = xor i64 %138, %123
  %140 = xor i64 %139, %135
  %141 = xor i64 %140, 6060281983519449
  %142 = and i64 %3, 4565089162351818150
  %143 = xor i64 %3, -1
  %144 = xor i64 4565089162351818150, %143
  %145 = and i64 %144, 4565089162351818150
  %146 = add i64 %3, 8901068429303535269
  %147 = sub i64 0, %3
  %148 = add i64 -8901068429303535269, %147
  %149 = sub i64 0, %148
  %150 = xor i64 %146, 0
  %151 = xor i64 %150, %145
  %152 = xor i64 %151, %142
  %153 = xor i64 %152, %149
  %154 = mul i64 %141, %153
  %155 = trunc i64 %154 to i1
  %156 = and i64 %1, 6035998303048047171
  %157 = xor i64 %1, -1
  %158 = or i64 -6035998303048047172, %157
  %159 = xor i64 %158, -1
  %160 = and i64 %159, -1
  %161 = and i64 %1, -3389471302876087951
  %162 = xor i64 %1, -1
  %163 = xor i64 -3389471302876087951, %162
  %164 = and i64 %163, -3389471302876087951
  %165 = and i64 %1, -4303216148490688615
  %166 = xor i64 %1, -1
  %167 = or i64 4303216148490688614, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = xor i64 %161, %164
  %171 = xor i64 %170, %165
  %172 = xor i64 %171, -5306403043985149999
  %173 = xor i64 %172, %160
  %174 = xor i64 %173, %156
  %175 = xor i64 %174, %169
  %176 = and i64 %3, -6036412667472622240
  %177 = xor i64 %3, -1
  %178 = or i64 6036412667472622239, %177
  %179 = xor i64 %178, -1
  %180 = and i64 %179, -1
  %181 = add i64 %1, 4663411823489376343
  %182 = and i64 4663411823489376343, %1
  %183 = or i64 4663411823489376343, %1
  %184 = add i64 %182, %183
  %185 = or i64 %1, -4646948260304723425
  %186 = xor i64 %1, -1
  %187 = and i64 -4646948260304723425, %186
  %188 = add i64 %187, %1
  %189 = xor i64 0, %184
  %190 = xor i64 %189, %181
  %191 = xor i64 %190, %185
  %192 = xor i64 %191, %180
  %193 = xor i64 %192, %188
  %194 = xor i64 %193, %176
  %195 = mul i64 %175, %194
  %196 = trunc i64 %195 to i1
  %197 = or i64 %3, -5576839001459301828
  %198 = and i64 -5576839001459301828, %3
  %199 = xor i64 -5576839001459301828, %3
  %200 = or i64 %198, %199
  %201 = or i64 %3, 6421293161251704650
  %202 = and i64 6421293161251704650, %3
  %203 = xor i64 6421293161251704650, %3
  %204 = or i64 %202, %203
  %205 = add i64 %1, -7955650907073849981
  %206 = and i64 -7955650907073849981, %1
  %207 = or i64 -7955650907073849981, %1
  %208 = add i64 %206, %207
  %209 = xor i64 %201, 4468238616464619871
  %210 = xor i64 %209, %205
  %211 = xor i64 %210, %208
  %212 = xor i64 %211, %204
  %213 = xor i64 %212, %200
  %214 = xor i64 %213, %197
  %215 = or i64 %1, -3144295248853127153
  %216 = and i64 -3144295248853127153, %1
  %217 = xor i64 -3144295248853127153, %1
  %218 = or i64 %216, %217
  %219 = add i64 %3, -4276059823127523952
  %220 = xor i64 -4276059823127523952, %3
  %221 = and i64 -4276059823127523952, %3
  %222 = mul i64 2, %221
  %223 = add i64 %220, %222
  %224 = xor i64 %219, 0
  %225 = xor i64 %224, %223
  %226 = xor i64 %225, %218
  %227 = xor i64 %226, %215
  %228 = mul i64 %214, %227
  %229 = trunc i64 %228 to i1
  %230 = add i64 %3, -3623947485965775862
  %231 = add i64 573816029603809368, %3
  %232 = sub i64 %231, 4197763515569585230
  %233 = or i64 %3, 7131169946577162866
  %234 = xor i64 %3, -1
  %235 = and i64 %234, 6736240936073465608
  %236 = and i64 %3, -6736240936073465609
  %237 = or i64 %235, %236
  %238 = xor i64 4579296847003573626, %237
  %239 = xor i64 %3, -1
  %240 = or i64 -7131169946577162867, %239
  %241 = xor i64 %240, -1
  %242 = and i64 %241, -1
  %243 = or i64 %238, %242
  %244 = or i64 %1, -5122512216680184624
  %245 = and i64 -5122512216680184624, %1
  %246 = xor i64 -5122512216680184624, %1
  %247 = or i64 %245, %246
  %248 = xor i64 702341443515502413, %243
  %249 = xor i64 %248, %232
  %250 = xor i64 %249, %244
  %251 = xor i64 %250, %233
  %252 = xor i64 %251, %230
  %253 = xor i64 %252, %247
  %254 = and i64 %1, 4146892124210928138
  %255 = or i64 -4146892124210928139, %1
  %256 = sub i64 %255, -4146892124210928139
  %257 = add i64 %3, 6224497309864869341
  %258 = sub i64 0, %3
  %259 = add i64 -6224497309864869341, %258
  %260 = sub i64 0, %259
  %261 = xor i64 %256, 0
  %262 = xor i64 %261, %254
  %263 = xor i64 %262, %257
  %264 = xor i64 %263, %260
  %265 = mul i64 %253, %264
  %266 = trunc i64 %265 to i1
  %267 = add i64 %3, -8892898305636557980
  %268 = sub i64 0, %3
  %269 = add i64 8892898305636557980, %268
  %270 = sub i64 0, %269
  %271 = or i64 %3, -342342527576358262
  %272 = xor i64 %3, -1
  %273 = and i64 %272, 4672030266905149145
  %274 = and i64 %3, -4672030266905149146
  %275 = or i64 %273, %274
  %276 = xor i64 -4906210485498774445, %275
  %277 = xor i64 %3, -1
  %278 = or i64 342342527576358261, %277
  %279 = xor i64 %278, -1
  %280 = and i64 %279, -1
  %281 = or i64 %276, %280
  %282 = or i64 %1, 3244269849145742311
  %283 = xor i64 %1, -1
  %284 = and i64 3244269849145742311, %283
  %285 = add i64 %284, %1
  %286 = xor i64 %282, 7882714496651859533
  %287 = xor i64 %286, %270
  %288 = xor i64 %287, %281
  %289 = xor i64 %288, %285
  %290 = xor i64 %289, %271
  %291 = xor i64 %290, %267
  %292 = and i64 %3, -7919063041748036278
  %293 = xor i64 %3, -1
  %294 = or i64 7919063041748036277, %293
  %295 = xor i64 %294, -1
  %296 = and i64 %295, -1
  %297 = or i64 %3, -5709446135149372487
  %298 = xor i64 %3, -1
  %299 = and i64 %298, 4785173078525451985
  %300 = and i64 %3, -4785173078525451986
  %301 = or i64 %299, %300
  %302 = xor i64 -960496581621824152, %301
  %303 = xor i64 %3, -1
  %304 = or i64 5709446135149372486, %303
  %305 = xor i64 %304, -1
  %306 = and i64 %305, -1
  %307 = or i64 %302, %306
  %308 = xor i64 %296, 0
  %309 = xor i64 %308, %307
  %310 = xor i64 %309, %297
  %311 = xor i64 %310, %292
  %312 = mul i64 %291, %311
  %313 = trunc i64 %312 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537075, i64* %122, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %155, i1 %196, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %229, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %266, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %313, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %314 = load i64, i64* %122, align 8
  %315 = getelementptr [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable2339431414740645237, i32 0, i64 %314
  store i8* bitcast (i1 (i8*, float*)* @clear..split to i8*), i8** %315, align 8
  %316 = alloca i64, align 8
  %317 = or i64 %1, 1656927792989562308
  %318 = and i64 1656927792989562308, %1
  %319 = xor i64 1656927792989562308, %1
  %320 = or i64 %318, %319
  %321 = add i64 %3, -6392421683561558479
  %322 = add i64 -3923119285584412307, %3
  %323 = sub i64 %322, 2469302397977146172
  %324 = xor i64 %321, %323
  %325 = xor i64 %324, -2908346959226304289
  %326 = xor i64 %325, %320
  %327 = xor i64 %326, %317
  %328 = or i64 %1, -5288347719287812521
  %329 = xor i64 %1, -1
  %330 = and i64 -5288347719287812521, %329
  %331 = add i64 %330, %1
  %332 = add i64 %3, -3539352892105894912
  %333 = add i64 -5775800146792650330, %3
  %334 = sub i64 %333, -2236447254686755418
  %335 = xor i64 %331, %332
  %336 = xor i64 %335, %328
  %337 = xor i64 %336, %334
  %338 = xor i64 %337, 0
  %339 = mul i64 %327, %338
  %340 = trunc i64 %339 to i32
  %341 = or i64 %1, -6021966040422453496
  %342 = and i64 -6021966040422453496, %1
  %343 = xor i64 -6021966040422453496, %1
  %344 = or i64 %342, %343
  %345 = or i64 %1, -920850566414755400
  %346 = xor i64 %1, -1
  %347 = and i64 -920850566414755400, %346
  %348 = add i64 %347, %1
  %349 = and i64 %1, 6420662596605928860
  %350 = xor i64 %1, -1
  %351 = or i64 -6420662596605928861, %350
  %352 = xor i64 %351, -1
  %353 = and i64 %352, -1
  %354 = xor i64 %345, %341
  %355 = xor i64 %354, %344
  %356 = xor i64 %355, %349
  %357 = xor i64 %356, %353
  %358 = xor i64 %357, %348
  %359 = xor i64 %358, 1168237901278047477
  %360 = or i64 %1, -8266171335053246917
  %361 = xor i64 %1, -1
  %362 = and i64 %361, -3293087229511815397
  %363 = and i64 %1, 3293087229511815396
  %364 = or i64 %362, %363
  %365 = xor i64 6846652769713049888, %364
  %366 = xor i64 %1, -1
  %367 = or i64 8266171335053246916, %366
  %368 = xor i64 %367, -1
  %369 = and i64 %368, -1
  %370 = or i64 %365, %369
  %371 = add i64 %3, -6045744066604362737
  %372 = add i64 8304870529351930565, %3
  %373 = sub i64 %372, -4096129477753258314
  %374 = xor i64 %373, %360
  %375 = xor i64 %374, %370
  %376 = xor i64 %375, 0
  %377 = xor i64 %376, %371
  %378 = mul i64 %359, %377
  %379 = trunc i64 %378 to i1
  %380 = and i64 %3, -6463428471075864167
  %381 = xor i64 %3, -1
  %382 = xor i64 -6463428471075864167, %381
  %383 = and i64 %382, -6463428471075864167
  %384 = or i64 %1, 2795648689817224625
  %385 = xor i64 %1, -1
  %386 = and i64 %385, 2891500401587634206
  %387 = and i64 %1, -2891500401587634207
  %388 = or i64 %386, %387
  %389 = xor i64 1075392604374320559, %388
  %390 = xor i64 %1, -1
  %391 = or i64 -2795648689817224626, %390
  %392 = xor i64 %391, -1
  %393 = and i64 %392, -1
  %394 = or i64 %389, %393
  %395 = xor i64 %384, %380
  %396 = xor i64 %395, %383
  %397 = xor i64 %396, -2422804427133400683
  %398 = xor i64 %397, %394
  %399 = and i64 %3, -8302549087452153746
  %400 = xor i64 %3, -1
  %401 = xor i64 -8302549087452153746, %400
  %402 = and i64 %401, -8302549087452153746
  %403 = or i64 %3, 5244985511015953218
  %404 = and i64 5244985511015953218, %3
  %405 = xor i64 5244985511015953218, %3
  %406 = or i64 %404, %405
  %407 = xor i64 %399, %403
  %408 = xor i64 %407, 0
  %409 = xor i64 %408, %402
  %410 = xor i64 %409, %406
  %411 = mul i64 %398, %410
  %412 = trunc i64 %411 to i1
  %413 = or i64 %1, -5478376608169294932
  %414 = xor i64 %1, -1
  %415 = and i64 -5478376608169294932, %414
  %416 = add i64 %415, %1
  %417 = add i64 %3, 5121430708197565299
  %418 = sub i64 0, %3
  %419 = sub i64 5121430708197565299, %418
  %420 = and i64 %3, 8937326375388936484
  %421 = xor i64 %3, -1
  %422 = or i64 -8937326375388936485, %421
  %423 = xor i64 %422, -1
  %424 = and i64 %423, -1
  %425 = xor i64 %419, %417
  %426 = xor i64 %425, %420
  %427 = xor i64 %426, %413
  %428 = xor i64 %427, %416
  %429 = xor i64 %428, 2356889592078573505
  %430 = xor i64 %429, %424
  %431 = and i64 %3, -4737154844880596829
  %432 = xor i64 %3, -1
  %433 = xor i64 -4737154844880596829, %432
  %434 = and i64 %433, -4737154844880596829
  %435 = and i64 %3, 912623500999751584
  %436 = xor i64 %3, -1
  %437 = xor i64 912623500999751584, %436
  %438 = and i64 %437, 912623500999751584
  %439 = add i64 %3, 2663909351640457923
  %440 = sub i64 0, %3
  %441 = sub i64 2663909351640457923, %440
  %442 = xor i64 %439, %435
  %443 = xor i64 %442, %441
  %444 = xor i64 %443, 0
  %445 = xor i64 %444, %431
  %446 = xor i64 %445, %434
  %447 = xor i64 %446, %438
  %448 = mul i64 %430, %447
  %449 = trunc i64 %448 to i1
  %450 = add i64 %1, -3962427924319800841
  %451 = add i64 -2730620877702767119, %1
  %452 = sub i64 %451, 1231807046617033722
  %453 = or i64 %3, 1133290575716402863
  %454 = and i64 1133290575716402863, %3
  %455 = xor i64 1133290575716402863, %3
  %456 = or i64 %454, %455
  %457 = xor i64 -6869439713491906397, %450
  %458 = xor i64 %457, %453
  %459 = xor i64 %458, %452
  %460 = xor i64 %459, %456
  %461 = or i64 %3, -1932623303093662742
  %462 = xor i64 %3, -1
  %463 = and i64 -1932623303093662742, %462
  %464 = add i64 %463, %3
  %465 = or i64 %1, -1411633232462231100
  %466 = xor i64 %1, -1
  %467 = and i64 -1411633232462231100, %466
  %468 = add i64 %467, %1
  %469 = or i64 %3, 7211717964277371009
  %470 = and i64 7211717964277371009, %3
  %471 = xor i64 7211717964277371009, %3
  %472 = or i64 %470, %471
  %473 = xor i64 %468, %472
  %474 = xor i64 %473, %464
  %475 = xor i64 %474, %461
  %476 = xor i64 %475, %469
  %477 = xor i64 %476, 0
  %478 = xor i64 %477, %465
  %479 = mul i64 %460, %478
  %480 = trunc i64 %479 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %316, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %340, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %379, i1 %412, i1* null, i1 %449, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %480, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %481 = load i64, i64* %316, align 8
  %482 = getelementptr [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable2339431414740645237, i32 0, i64 %481
  store i8* bitcast (i1 (i64)* @clear.extracted to i8*), i8** %482, align 8
  %483 = alloca i64, align 8
  %484 = and i64 %1, 8729025533369722805
  %485 = or i64 -8729025533369722806, %1
  %486 = sub i64 %485, -8729025533369722806
  %487 = or i64 %3, 5923324464773571993
  %488 = xor i64 %3, -1
  %489 = and i64 5923324464773571993, %488
  %490 = add i64 %489, %3
  %491 = and i64 %1, 7491823442853309460
  %492 = or i64 -7491823442853309461, %1
  %493 = sub i64 %492, -7491823442853309461
  %494 = xor i64 %487, -7464186083605661205
  %495 = xor i64 %494, %486
  %496 = xor i64 %495, %493
  %497 = xor i64 %496, %484
  %498 = xor i64 %497, %491
  %499 = xor i64 %498, %490
  %500 = add i64 %1, 6370692525627173470
  %501 = xor i64 6370692525627173470, %1
  %502 = and i64 6370692525627173470, %1
  %503 = mul i64 2, %502
  %504 = add i64 %501, %503
  %505 = and i64 %1, -8865182674528160884
  %506 = xor i64 %1, -1
  %507 = xor i64 -8865182674528160884, %506
  %508 = and i64 %507, -8865182674528160884
  %509 = add i64 %3, 9208830289472509455
  %510 = and i64 9208830289472509455, %3
  %511 = or i64 9208830289472509455, %3
  %512 = add i64 %510, %511
  %513 = xor i64 %505, %512
  %514 = xor i64 %513, %504
  %515 = xor i64 %514, %500
  %516 = xor i64 %515, %509
  %517 = xor i64 %516, %508
  %518 = xor i64 %517, 0
  %519 = mul i64 %499, %518
  %520 = trunc i64 %519 to i32
  %521 = and i64 %3, 3836792430869294306
  %522 = xor i64 %3, -1
  %523 = xor i64 3836792430869294306, %522
  %524 = and i64 %523, 3836792430869294306
  %525 = add i64 %1, -3540429831659569701
  %526 = add i64 3999872332708302932, %1
  %527 = sub i64 %526, 7540302164367872633
  %528 = or i64 %3, 6584852551251982762
  %529 = xor i64 %3, -1
  %530 = and i64 %529, 1470288267326399233
  %531 = and i64 %3, -1470288267326399234
  %532 = or i64 %530, %531
  %533 = xor i64 5694128700939360939, %532
  %534 = xor i64 %3, -1
  %535 = or i64 -6584852551251982763, %534
  %536 = xor i64 %535, -1
  %537 = and i64 %536, -1
  %538 = or i64 %533, %537
  %539 = xor i64 %524, %525
  %540 = xor i64 %539, %528
  %541 = xor i64 %540, %521
  %542 = xor i64 %541, %538
  %543 = xor i64 %542, 371191615662950429
  %544 = xor i64 %543, %527
  %545 = add i64 %3, -7730297835524344582
  %546 = sub i64 0, %3
  %547 = sub i64 -7730297835524344582, %546
  %548 = or i64 %1, -6821998986706283126
  %549 = xor i64 %1, -1
  %550 = and i64 -6821998986706283126, %549
  %551 = add i64 %550, %1
  %552 = add i64 %3, -6809808584782210144
  %553 = add i64 -3368957039467642392, %3
  %554 = add i64 %553, -3440851545314567752
  %555 = xor i64 %548, %552
  %556 = xor i64 %555, %551
  %557 = xor i64 %556, %554
  %558 = xor i64 %557, %545
  %559 = xor i64 %558, %547
  %560 = xor i64 %559, 0
  %561 = mul i64 %544, %560
  %562 = add i64 %1, -6179957181983082136
  %563 = sub i64 0, %1
  %564 = sub i64 -6179957181983082136, %563
  %565 = add i64 %1, 2324033140571018781
  %566 = sub i64 0, %1
  %567 = sub i64 2324033140571018781, %566
  %568 = xor i64 %567, %564
  %569 = xor i64 %568, %565
  %570 = xor i64 %569, 1302874021019334713
  %571 = xor i64 %570, %562
  %572 = or i64 %1, 7583675742552484845
  %573 = xor i64 %1, -1
  %574 = and i64 %573, 96246733895733549
  %575 = and i64 %1, -96246733895733550
  %576 = or i64 %574, %575
  %577 = xor i64 7524194521420397248, %576
  %578 = xor i64 %1, -1
  %579 = or i64 -7583675742552484846, %578
  %580 = xor i64 %579, -1
  %581 = and i64 %580, -1
  %582 = or i64 %577, %581
  %583 = add i64 %1, 6580126570265661561
  %584 = add i64 2005103393810375168, %1
  %585 = sub i64 %584, -4575023176455286393
  %586 = xor i64 %582, %585
  %587 = xor i64 %586, %583
  %588 = xor i64 %587, %572
  %589 = xor i64 %588, 0
  %590 = mul i64 %571, %589
  %591 = trunc i64 %590 to i1
  %592 = add i64 %1, -5404919137615106603
  %593 = xor i64 -5404919137615106603, %1
  %594 = and i64 -5404919137615106603, %1
  %595 = mul i64 2, %594
  %596 = add i64 %593, %595
  %597 = add i64 %1, 312543069001378009
  %598 = xor i64 312543069001378009, %1
  %599 = and i64 312543069001378009, %1
  %600 = mul i64 2, %599
  %601 = add i64 %598, %600
  %602 = xor i64 -4770380613051858613, %596
  %603 = xor i64 %602, %597
  %604 = xor i64 %603, %592
  %605 = xor i64 %604, %601
  %606 = add i64 %1, 5278223827521869648
  %607 = add i64 -1703392885291206484, %1
  %608 = sub i64 %607, -6981616712813076132
  %609 = add i64 %3, 2171077210568591196
  %610 = sub i64 0, %3
  %611 = add i64 -2171077210568591196, %610
  %612 = sub i64 0, %611
  %613 = add i64 %3, -7305703334588958311
  %614 = add i64 2940064080778768067, %3
  %615 = add i64 %614, 8200976658341825238
  %616 = xor i64 %615, %609
  %617 = xor i64 %616, %606
  %618 = xor i64 %617, %612
  %619 = xor i64 %618, 0
  %620 = xor i64 %619, %608
  %621 = xor i64 %620, %613
  %622 = mul i64 %605, %621
  %623 = trunc i64 %622 to i1
  %624 = and i64 %3, -4684780418098025455
  %625 = xor i64 %3, -1
  %626 = or i64 4684780418098025454, %625
  %627 = xor i64 %626, -1
  %628 = and i64 %627, -1
  %629 = or i64 %3, 5441819561789688426
  %630 = xor i64 %3, -1
  %631 = and i64 5441819561789688426, %630
  %632 = add i64 %631, %3
  %633 = xor i64 %624, %628
  %634 = xor i64 %633, %629
  %635 = xor i64 %634, %632
  %636 = xor i64 %635, -182623244975776245
  %637 = or i64 %1, 267035452519218494
  %638 = xor i64 %1, -1
  %639 = and i64 %638, -6640361802749672871
  %640 = and i64 %1, 6640361802749672870
  %641 = or i64 %639, %640
  %642 = xor i64 -6887128308138410137, %641
  %643 = xor i64 %1, -1
  %644 = or i64 -267035452519218495, %643
  %645 = xor i64 %644, -1
  %646 = and i64 %645, -1
  %647 = or i64 %642, %646
  %648 = and i64 %3, 3436426332930289546
  %649 = xor i64 %3, -1
  %650 = xor i64 3436426332930289546, %649
  %651 = and i64 %650, 3436426332930289546
  %652 = add i64 %3, -6530420351030769545
  %653 = xor i64 -6530420351030769545, %3
  %654 = and i64 -6530420351030769545, %3
  %655 = mul i64 2, %654
  %656 = add i64 %653, %655
  %657 = xor i64 %647, %648
  %658 = xor i64 %657, %637
  %659 = xor i64 %658, %656
  %660 = xor i64 %659, %651
  %661 = xor i64 %660, %652
  %662 = xor i64 %661, 0
  %663 = mul i64 %636, %662
  %664 = trunc i64 %663 to i1
  %665 = add i64 %3, -5102860812898291467
  %666 = sub i64 0, %3
  %667 = sub i64 -5102860812898291467, %666
  %668 = add i64 %1, 2976412359188926768
  %669 = add i64 -7187190369052697241, %1
  %670 = add i64 %669, -8283141345467927607
  %671 = and i64 %3, -6510201466651771099
  %672 = xor i64 %3, -1
  %673 = xor i64 -6510201466651771099, %672
  %674 = and i64 %673, -6510201466651771099
  %675 = xor i64 %668, -1011054673867918125
  %676 = xor i64 %675, %671
  %677 = xor i64 %676, %674
  %678 = xor i64 %677, %670
  %679 = xor i64 %678, %665
  %680 = xor i64 %679, %667
  %681 = or i64 %3, 7328384823160140633
  %682 = xor i64 %3, -1
  %683 = and i64 7328384823160140633, %682
  %684 = add i64 %683, %3
  %685 = add i64 %1, -5818983698661190114
  %686 = and i64 -5818983698661190114, %1
  %687 = or i64 -5818983698661190114, %1
  %688 = add i64 %686, %687
  %689 = or i64 %1, -2088568256006128952
  %690 = xor i64 %1, -1
  %691 = and i64 %690, 8322007773587799786
  %692 = and i64 %1, -8322007773587799787
  %693 = or i64 %691, %692
  %694 = xor i64 -8034879377799543774, %693
  %695 = xor i64 %1, -1
  %696 = or i64 2088568256006128951, %695
  %697 = xor i64 %696, -1
  %698 = and i64 %697, -1
  %699 = or i64 %694, %698
  %700 = xor i64 %688, %685
  %701 = xor i64 %700, %681
  %702 = xor i64 %701, 0
  %703 = xor i64 %702, %684
  %704 = xor i64 %703, %689
  %705 = xor i64 %704, %699
  %706 = mul i64 %680, %705
  %707 = trunc i64 %706 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537072, i64* %483, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %520, i32 0, i1* null, i1* null, i64 %561, i1 false, i1* null, i1 false, i1 %591, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %623, i1* null, i1 false, i1 false, i1 false, i1 %664, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %707, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %708 = load i64, i64* %483, align 8
  %709 = getelementptr [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable2339431414740645237, i32 0, i64 %708
  store i8** %709, i8*** %.reg2mem31, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %710 = load i8*, i8** %.reload, align 8
  indirectbr i8* %710, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

BogusBasciBlock:                                  ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %711 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear, %codeRepl3), i8** %711, align 8
  %712 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@clear, %"7"), i8** %712, align 8
  %713 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@clear, %EntryBasicBlockSplit), i8** %713, align 8
  %714 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@clear, %"9"), i8** %714, align 8
  %715 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@clear, %codeRepl), i8** %715, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %716 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %716, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

EntryBasicBlockSplit:                             ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload32 = load i8**, i8*** %.reg2mem31, align 8
  store i8* bitcast (void (i8*, float*)* @clear.extracted.12 to i8*), i8** %.reload32, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %717 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %717, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

codeRepl:                                         ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537075, i64* %121, align 8
  %718 = alloca i8**, align 8
  %719 = and i64 %28, -5260681545675527100
  %720 = or i64 5260681545675527099, %28
  %721 = sub i64 %720, 5260681545675527099
  %722 = and i64 %38, -8002428367120032581
  %723 = xor i64 %38, -1
  %724 = or i64 8002428367120032580, %723
  %725 = xor i64 %724, -1
  %726 = and i64 %725, -1
  %727 = or i64 %28, -5334568313732936687
  %728 = xor i64 %28, -1
  %729 = and i64 %728, -5618788753730261535
  %730 = and i64 %28, 5618788753730261534
  %731 = or i64 %729, %730
  %732 = xor i64 572453049802842608, %731
  %733 = xor i64 %28, -1
  %734 = or i64 5334568313732936686, %733
  %735 = xor i64 %734, -1
  %736 = and i64 %735, -1
  %737 = or i64 %732, %736
  %738 = xor i64 6156996539723415703, %721
  %739 = xor i64 %738, %719
  %740 = xor i64 %739, %737
  %741 = xor i64 %740, %727
  %742 = xor i64 %741, %726
  %743 = xor i64 %742, %722
  %744 = or i64 %481, 6219607679482103133
  %745 = xor i64 %481, -1
  %746 = and i64 %745, 3568694503754754542
  %747 = and i64 %481, -3568694503754754543
  %748 = or i64 %746, %747
  %749 = xor i64 7482432285378243763, %748
  %750 = xor i64 %481, -1
  %751 = or i64 -6219607679482103134, %750
  %752 = xor i64 %751, -1
  %753 = and i64 %752, -1
  %754 = or i64 %749, %753
  %755 = or i64 %44, 7273982406678213223
  %756 = xor i64 %44, -1
  %757 = and i64 %756, 4333154680725927366
  %758 = and i64 %44, -4333154680725927367
  %759 = or i64 %757, %758
  %760 = xor i64 6399638490698712993, %759
  %761 = xor i64 %44, -1
  %762 = or i64 -7273982406678213224, %761
  %763 = xor i64 %762, -1
  %764 = and i64 %763, -1
  %765 = or i64 %760, %764
  %766 = and i64 %44, 8440347371694659711
  %767 = xor i64 %44, -1
  %768 = xor i64 8440347371694659711, %767
  %769 = and i64 %768, 8440347371694659711
  %770 = xor i64 %769, %766
  %771 = xor i64 %770, %755
  %772 = xor i64 %771, 0
  %773 = xor i64 %772, %754
  %774 = xor i64 %773, %744
  %775 = xor i64 %774, %765
  %776 = mul i64 %743, %775
  %777 = and i64 %1, -7777068151739436505
  %778 = xor i64 %1, -1
  %779 = xor i64 -7777068151739436505, %778
  %780 = and i64 %779, -7777068151739436505
  %781 = and i64 %34, 2681529536500906957
  %782 = or i64 -2681529536500906958, %34
  %783 = sub i64 %782, -2681529536500906958
  %784 = add i64 %46, 8954728389104587505
  %785 = add i64 -3756707356090399703, %46
  %786 = sub i64 %785, 5735308328514564408
  %787 = xor i64 %781, 2131685900712670463
  %788 = xor i64 %787, %784
  %789 = xor i64 %788, %777
  %790 = xor i64 %789, %783
  %791 = xor i64 %790, %786
  %792 = xor i64 %791, %780
  %793 = add i64 %42, -2748847356123936899
  %794 = xor i64 -2748847356123936899, %42
  %795 = and i64 -2748847356123936899, %42
  %796 = mul i64 2, %795
  %797 = add i64 %794, %796
  %798 = or i64 %46, 6198216081902032583
  %799 = xor i64 %46, -1
  %800 = and i64 6198216081902032583, %799
  %801 = add i64 %800, %46
  %802 = add i64 %1, 4990106072530027626
  %803 = add i64 7748875321644233444, %1
  %804 = add i64 %803, -2758769249114205818
  %805 = xor i64 %804, 0
  %806 = xor i64 %805, %793
  %807 = xor i64 %806, %801
  %808 = xor i64 %807, %797
  %809 = xor i64 %808, %798
  %810 = xor i64 %809, %802
  %811 = mul i64 %792, %810
  %812 = trunc i64 %811 to i1
  %813 = add i64 %42, -5189455534832756263
  %814 = sub i64 0, %42
  %815 = add i64 5189455534832756263, %814
  %816 = sub i64 0, %815
  %817 = and i64 %314, -8998354485006377016
  %818 = xor i64 %314, -1
  %819 = or i64 8998354485006377015, %818
  %820 = xor i64 %819, -1
  %821 = and i64 %820, -1
  %822 = xor i64 %821, 807261690622403003
  %823 = xor i64 %822, %817
  %824 = xor i64 %823, %813
  %825 = xor i64 %824, %816
  %826 = add i64 %40, -8965042026437393576
  %827 = xor i64 -8965042026437393576, %40
  %828 = and i64 -8965042026437393576, %40
  %829 = mul i64 2, %828
  %830 = add i64 %827, %829
  %831 = or i64 %314, 4491440374928911374
  %832 = xor i64 %314, -1
  %833 = and i64 %832, 8068725702725305641
  %834 = and i64 %314, -8068725702725305642
  %835 = or i64 %833, %834
  %836 = xor i64 5885380627808495911, %835
  %837 = xor i64 %314, -1
  %838 = or i64 -4491440374928911375, %837
  %839 = xor i64 %838, -1
  %840 = and i64 %839, -1
  %841 = or i64 %836, %840
  %842 = or i64 %44, 5055624379424281531
  %843 = xor i64 %44, -1
  %844 = and i64 5055624379424281531, %843
  %845 = add i64 %844, %44
  %846 = xor i64 %842, 0
  %847 = xor i64 %846, %826
  %848 = xor i64 %847, %845
  %849 = xor i64 %848, %841
  %850 = xor i64 %849, %831
  %851 = xor i64 %850, %830
  %852 = mul i64 %825, %851
  %853 = trunc i64 %852 to i1
  %854 = or i64 %46, 6999837686706242226
  %855 = and i64 6999837686706242226, %46
  %856 = xor i64 6999837686706242226, %46
  %857 = or i64 %855, %856
  %858 = add i64 %46, 5043286438525282697
  %859 = and i64 5043286438525282697, %46
  %860 = or i64 5043286438525282697, %46
  %861 = add i64 %859, %860
  %862 = xor i64 %857, %854
  %863 = xor i64 %862, %858
  %864 = xor i64 %863, 7277460754131369787
  %865 = xor i64 %864, %861
  %866 = or i64 %46, 3223903673338691480
  %867 = and i64 3223903673338691480, %46
  %868 = xor i64 3223903673338691480, %46
  %869 = or i64 %867, %868
  %870 = and i64 %40, -3750321532911160668
  %871 = xor i64 %40, -1
  %872 = xor i64 -3750321532911160668, %871
  %873 = and i64 %872, -3750321532911160668
  %874 = xor i64 0, %873
  %875 = xor i64 %874, %869
  %876 = xor i64 %875, %866
  %877 = xor i64 %876, %870
  %878 = mul i64 %865, %877
  %879 = add i64 %481, -563600081077387182
  %880 = xor i64 -563600081077387182, %481
  %881 = and i64 -563600081077387182, %481
  %882 = mul i64 2, %881
  %883 = add i64 %880, %882
  %884 = or i64 %1, -3504477091072848818
  %885 = and i64 -3504477091072848818, %1
  %886 = xor i64 -3504477091072848818, %1
  %887 = or i64 %885, %886
  %888 = xor i64 %879, 896109092252028931
  %889 = xor i64 %888, %887
  %890 = xor i64 %889, %883
  %891 = xor i64 %890, %884
  %892 = add i64 %30, 7481629450679404212
  %893 = xor i64 7481629450679404212, %30
  %894 = and i64 7481629450679404212, %30
  %895 = mul i64 2, %894
  %896 = add i64 %893, %895
  %897 = or i64 %34, -1824420064015803050
  %898 = xor i64 %34, -1
  %899 = and i64 -1824420064015803050, %898
  %900 = add i64 %899, %34
  %901 = xor i64 %897, %900
  %902 = xor i64 %901, %892
  %903 = xor i64 %902, 0
  %904 = xor i64 %903, %896
  %905 = mul i64 %891, %904
  %906 = add i64 %708, -4576998040086070040
  %907 = sub i64 0, %708
  %908 = sub i64 -4576998040086070040, %907
  %909 = add i64 %1, -4827975923422844327
  %910 = and i64 -4827975923422844327, %1
  %911 = or i64 -4827975923422844327, %1
  %912 = add i64 %910, %911
  %913 = or i64 %708, 2523978895339840913
  %914 = xor i64 %708, -1
  %915 = and i64 2523978895339840913, %914
  %916 = add i64 %915, %708
  %917 = xor i64 %909, %908
  %918 = xor i64 %917, 545158697117848743
  %919 = xor i64 %918, %912
  %920 = xor i64 %919, %913
  %921 = xor i64 %920, %916
  %922 = xor i64 %921, %906
  %923 = or i64 %1, -1364931178602510670
  %924 = xor i64 %1, -1
  %925 = and i64 -1364931178602510670, %924
  %926 = add i64 %925, %1
  %927 = or i64 %40, 3926750046336997685
  %928 = xor i64 %40, -1
  %929 = and i64 %928, 5334690325719857760
  %930 = and i64 %40, -5334690325719857761
  %931 = or i64 %929, %930
  %932 = xor i64 8968424749463298901, %931
  %933 = xor i64 %40, -1
  %934 = or i64 -3926750046336997686, %933
  %935 = xor i64 %934, -1
  %936 = and i64 %935, -1
  %937 = or i64 %932, %936
  %938 = and i64 %30, 1141412959228318478
  %939 = or i64 -1141412959228318479, %30
  %940 = sub i64 %939, -1141412959228318479
  %941 = xor i64 %940, %926
  %942 = xor i64 %941, %937
  %943 = xor i64 %942, %927
  %944 = xor i64 %943, 0
  %945 = xor i64 %944, %938
  %946 = xor i64 %945, %923
  %947 = mul i64 %922, %946
  %948 = and i64 %38, 6091422800312629653
  %949 = or i64 -6091422800312629654, %38
  %950 = sub i64 %949, -6091422800312629654
  %951 = and i64 %28, 3092442520286813235
  %952 = or i64 -3092442520286813236, %28
  %953 = sub i64 %952, -3092442520286813236
  %954 = xor i64 %950, %951
  %955 = xor i64 %954, 4065916845244400015
  %956 = xor i64 %955, %948
  %957 = xor i64 %956, %953
  %958 = or i64 %32, 420549221370558446
  %959 = and i64 420549221370558446, %32
  %960 = xor i64 420549221370558446, %32
  %961 = or i64 %959, %960
  %962 = add i64 %44, 5429355636447079600
  %963 = and i64 5429355636447079600, %44
  %964 = or i64 5429355636447079600, %44
  %965 = add i64 %963, %964
  %966 = and i64 %708, 4541285196397056094
  %967 = xor i64 %708, -1
  %968 = or i64 -4541285196397056095, %967
  %969 = xor i64 %968, -1
  %970 = and i64 %969, -1
  %971 = xor i64 %970, %958
  %972 = xor i64 %971, %962
  %973 = xor i64 %972, %961
  %974 = xor i64 %973, %966
  %975 = xor i64 %974, 0
  %976 = xor i64 %975, %965
  %977 = mul i64 %957, %976
  %978 = add i64 %481, 4001404373015476217
  %979 = sub i64 0, %481
  %980 = add i64 -4001404373015476217, %979
  %981 = sub i64 0, %980
  %982 = add i64 %36, -888348984435768126
  %983 = xor i64 -888348984435768126, %36
  %984 = and i64 -888348984435768126, %36
  %985 = mul i64 2, %984
  %986 = add i64 %983, %985
  %987 = xor i64 %986, %978
  %988 = xor i64 %987, 1622206928927937655
  %989 = xor i64 %988, %981
  %990 = xor i64 %989, %982
  %991 = or i64 %32, 2707911202658733506
  %992 = and i64 2707911202658733506, %32
  %993 = xor i64 2707911202658733506, %32
  %994 = or i64 %992, %993
  %995 = and i64 %1, -7151072675450579499
  %996 = xor i64 %1, -1
  %997 = or i64 7151072675450579498, %996
  %998 = xor i64 %997, -1
  %999 = and i64 %998, -1
  %1000 = or i64 %314, 4404989989229793480
  %1001 = and i64 4404989989229793480, %314
  %1002 = xor i64 4404989989229793480, %314
  %1003 = or i64 %1001, %1002
  %1004 = xor i64 %1000, %999
  %1005 = xor i64 %1004, %995
  %1006 = xor i64 %1005, %1003
  %1007 = xor i64 %1006, %991
  %1008 = xor i64 %1007, %994
  %1009 = xor i64 %1008, 0
  %1010 = mul i64 %990, %1009
  %1011 = trunc i64 %1010 to i1
  call void @"9941920946239825184"(i32 4, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* %121, i8*** %718, i64 %776, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %812, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %853, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %878, i32 0, i1* null, i1* null, i8* null, i64 0, i64 %905, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 %947, i64 %977, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %1011, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1012 = load i8**, i8*** %718, align 8
  %1013 = load i8*, i8** %1012, align 8
  %1014 = bitcast i8* %1013 to i1 (i8*, float*)*
  %targetBlock = call i1 %1014(i8* %0, float* %2)
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload29 = load i8**, i8*** %.reg2mem26, align 8
  %1015 = select i1 %targetBlock, i8** %.reload29, i8** %.reload7
  %1016 = load i8*, i8** %1015, align 8
  store i32 2, i32* %.reg2mem38, align 4
  indirectbr i8* %1016, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

"3":                                              ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1017 = icmp ne i64 %1, 1760
  store i1 %1017, i1* %.reg2mem33, align 1
  %1018 = mul i64 %1, %1
  %1019 = add i64 %1018, %1
  %1020 = mul i64 %1019, 3
  %1021 = srem i64 %1020, 2
  %1022 = icmp eq i64 %1021, 0
  %1023 = mul i64 %1, %1
  %1024 = add i64 %1023, %1
  %1025 = or i64 %46, 5477354286615563645
  %1026 = xor i64 %46, -1
  %1027 = and i64 5477354286615563645, %1026
  %1028 = add i64 %1027, %46
  %1029 = add i64 %32, 5281989959376687603
  %1030 = sub i64 0, %32
  %1031 = sub i64 5281989959376687603, %1030
  %1032 = xor i64 %1031, %1025
  %1033 = xor i64 %1032, %1028
  %1034 = xor i64 %1033, -9156200909265711143
  %1035 = xor i64 %1034, %1029
  %1036 = and i64 %44, 5030552690267518234
  %1037 = or i64 -5030552690267518235, %44
  %1038 = sub i64 %1037, -5030552690267518235
  %1039 = add i64 %314, 2655765073622026649
  %1040 = add i64 6717472915124676389, %314
  %1041 = sub i64 %1040, 4061707841502649740
  %1042 = and i64 %3, 4509074933302833122
  %1043 = xor i64 %3, -1
  %1044 = or i64 -4509074933302833123, %1043
  %1045 = xor i64 %1044, -1
  %1046 = and i64 %1045, -1
  %1047 = xor i64 %1039, %1036
  %1048 = xor i64 %1047, %1038
  %1049 = xor i64 %1048, 425275241250128082
  %1050 = xor i64 %1049, %1046
  %1051 = xor i64 %1050, %1041
  %1052 = xor i64 %1051, %1042
  %1053 = mul i64 %1035, %1052
  %1054 = srem i64 %1024, %1053
  store i64 %1054, i64* %.reg2mem35, align 8
  %.reload37 = load i64, i64* %.reg2mem35, align 8
  %1055 = icmp eq i64 %.reload37, 0
  %1056 = xor i1 %1022, true
  %1057 = or i64 %481, 4325069927352066457
  %1058 = xor i64 %481, -1
  %1059 = and i64 4325069927352066457, %1058
  %1060 = add i64 %1059, %481
  %1061 = add i64 %34, 6427098978782014242
  %1062 = add i64 8025515301908183145, %34
  %1063 = add i64 %1062, -1598416323126168903
  %1064 = xor i64 %1060, %1061
  %1065 = xor i64 %1064, %1063
  %1066 = xor i64 %1065, %1057
  %1067 = xor i64 %1066, -8703990397081258515
  %1068 = add i64 %3, 9083693605087823820
  %1069 = xor i64 9083693605087823820, %3
  %1070 = and i64 9083693605087823820, %3
  %1071 = mul i64 2, %1070
  %1072 = add i64 %1069, %1071
  %1073 = and i64 %44, 3177693397244123864
  %1074 = or i64 -3177693397244123865, %44
  %1075 = sub i64 %1074, -3177693397244123865
  %1076 = xor i64 %1072, -749365356757700635
  %1077 = xor i64 %1076, %1068
  %1078 = xor i64 %1077, %1073
  %1079 = xor i64 %1078, %1075
  %1080 = mul i64 %1067, %1079
  %1081 = trunc i64 %1080 to i1
  %1082 = xor i1 %1055, %1081
  %1083 = or i1 %1056, %1082
  %1084 = xor i1 %1083, true
  %1085 = and i1 %1084, true
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  %1086 = select i1 %1085, i8** %.reload10, i8** %.reload14
  %1087 = load i8*, i8** %1086, align 8
  indirectbr i8* %1087, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

"4":                                              ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1088 = and i64 %46, 1149271442568832466
  %1089 = or i64 -1149271442568832467, %46
  %1090 = sub i64 %1089, -1149271442568832467
  %1091 = or i64 %36, -4463778355988038857
  %1092 = xor i64 %36, -1
  %1093 = and i64 %1092, -8686912424850546600
  %1094 = and i64 %36, 8686912424850546599
  %1095 = or i64 %1093, %1094
  %1096 = xor i64 5007046283510831983, %1095
  %1097 = xor i64 %36, -1
  %1098 = or i64 4463778355988038856, %1097
  %1099 = xor i64 %1098, -1
  %1100 = and i64 %1099, -1
  %1101 = or i64 %1096, %1100
  %1102 = and i64 %1, 4868210294460435196
  %1103 = xor i64 %1, -1
  %1104 = or i64 -4868210294460435197, %1103
  %1105 = xor i64 %1104, -1
  %1106 = and i64 %1105, -1
  %1107 = xor i64 %1101, %1102
  %1108 = xor i64 %1107, %1088
  %1109 = xor i64 %1108, %1106
  %1110 = xor i64 %1109, %1090
  %1111 = xor i64 %1110, %1091
  %1112 = xor i64 %1111, -6707689058206841651
  %1113 = and i64 %34, -6822314286563186264
  %1114 = xor i64 %34, -1
  %1115 = or i64 6822314286563186263, %1114
  %1116 = xor i64 %1115, -1
  %1117 = and i64 %1116, -1
  %1118 = and i64 %34, -1442150406054190192
  %1119 = xor i64 %34, -1
  %1120 = xor i64 -1442150406054190192, %1119
  %1121 = and i64 %1120, -1442150406054190192
  %1122 = xor i64 %1113, %1117
  %1123 = xor i64 %1122, %1121
  %1124 = xor i64 %1123, %1118
  %1125 = xor i64 %1124, -6630852582959134675
  %1126 = mul i64 %1112, %1125
  %1127 = sub i64 0, %1126
  %1128 = sdiv i64 62, 70
  %1129 = add i64 18, -126
  %1130 = sub i64 65, 46
  %1131 = mul i64 24, 58
  %1132 = and i64 %36, -8342377771362228391
  %1133 = xor i64 %36, -1
  %1134 = or i64 8342377771362228390, %1133
  %1135 = xor i64 %1134, -1
  %1136 = and i64 %1135, -1
  %1137 = add i64 %40, 4380617204814736915
  %1138 = add i64 3529576481680143937, %40
  %1139 = sub i64 %1138, -851040723134592978
  %1140 = xor i64 %1139, %1137
  %1141 = xor i64 %1140, %1136
  %1142 = xor i64 %1141, -772452376294934901
  %1143 = xor i64 %1142, %1132
  %1144 = or i64 %1, 3971141359194333738
  %1145 = xor i64 %1, -1
  %1146 = and i64 3971141359194333738, %1145
  %1147 = add i64 %1146, %1
  %1148 = add i64 %708, 2004043390622191561
  %1149 = add i64 -606539531455588961, %708
  %1150 = add i64 %1149, 2610582922077780522
  %1151 = or i64 %42, 4573037617249611388
  %1152 = xor i64 %42, -1
  %1153 = and i64 4573037617249611388, %1152
  %1154 = add i64 %1153, %42
  %1155 = xor i64 -1942349086998426962, %1147
  %1156 = xor i64 %1155, %1154
  %1157 = xor i64 %1156, %1144
  %1158 = xor i64 %1157, %1148
  %1159 = xor i64 %1158, %1151
  %1160 = xor i64 %1159, %1150
  %1161 = mul i64 %1143, %1160
  %1162 = mul i64 16, %1161
  %1163 = and i64 %1, 2850034394795180015
  %1164 = xor i64 %1, -1
  %1165 = xor i64 2850034394795180015, %1164
  %1166 = and i64 %1165, 2850034394795180015
  %1167 = or i64 %36, 7507516551731195334
  %1168 = xor i64 %36, -1
  %1169 = and i64 7507516551731195334, %1168
  %1170 = add i64 %1169, %36
  %1171 = xor i64 %1167, %1170
  %1172 = xor i64 %1171, 5403212593419003939
  %1173 = xor i64 %1172, %1163
  %1174 = xor i64 %1173, %1166
  %1175 = and i64 %708, -2049513466801052110
  %1176 = xor i64 %708, -1
  %1177 = xor i64 -2049513466801052110, %1176
  %1178 = and i64 %1177, -2049513466801052110
  %1179 = add i64 %44, 6186078712962621657
  %1180 = sub i64 0, %44
  %1181 = sub i64 6186078712962621657, %1180
  %1182 = xor i64 %1179, %1181
  %1183 = xor i64 %1182, %1178
  %1184 = xor i64 %1183, -4649180222048896730
  %1185 = xor i64 %1184, %1175
  %1186 = mul i64 %1174, %1185
  %1187 = sdiv i64 24, %1186
  %1188 = sdiv i64 94, 68
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %1189 = load i8*, i8** %.reload13, align 8
  indirectbr i8* %1189, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

"5":                                              ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1190 = icmp ne i64 %3, 7040
  %.reload34 = load i1, i1* %.reg2mem33, align 1
  %1191 = select i1 %.reload34, i1 true, i1 %1190
  %.reload17 = load i8**, i8*** %.reg2mem16, align 8
  %.reload28 = load i8**, i8*** %.reg2mem26, align 8
  %1192 = select i1 %1191, i8** %.reload28, i8** %.reload17
  %1193 = load i8*, i8** %1192, align 8
  store i32 2, i32* %.reg2mem38, align 4
  indirectbr i8* %1193, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

codeRepl1:                                        ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %121, align 8
  %1194 = alloca i8**, align 8
  %1195 = add i64 %34, -7989577722208364773
  %1196 = and i64 -7989577722208364773, %34
  %1197 = or i64 -7989577722208364773, %34
  %1198 = add i64 %1196, %1197
  %1199 = add i64 %30, 2697877560742734470
  %1200 = and i64 2697877560742734470, %30
  %1201 = or i64 2697877560742734470, %30
  %1202 = add i64 %1200, %1201
  %1203 = xor i64 %1202, -2415866871351491545
  %1204 = xor i64 %1203, %1199
  %1205 = xor i64 %1204, %1198
  %1206 = xor i64 %1205, %1195
  %1207 = or i64 %3, 4038103546544353977
  %1208 = xor i64 %3, -1
  %1209 = and i64 %1208, -3983380944022263996
  %1210 = and i64 %3, 3983380944022263995
  %1211 = or i64 %1209, %1210
  %1212 = xor i64 -1102808079592106499, %1211
  %1213 = xor i64 %3, -1
  %1214 = or i64 -4038103546544353978, %1213
  %1215 = xor i64 %1214, -1
  %1216 = and i64 %1215, -1
  %1217 = or i64 %1212, %1216
  %1218 = add i64 %32, -2660812661153980859
  %1219 = add i64 -6060208353670472091, %32
  %1220 = sub i64 %1219, -3399395692516491232
  %1221 = xor i64 %1220, 0
  %1222 = xor i64 %1221, %1218
  %1223 = xor i64 %1222, %1217
  %1224 = xor i64 %1223, %1207
  %1225 = mul i64 %1206, %1224
  %1226 = trunc i64 %1225 to i1
  %1227 = add i64 %481, 3749742355977810300
  %1228 = sub i64 0, %481
  %1229 = sub i64 3749742355977810300, %1228
  %1230 = and i64 %42, -8438217594681061693
  %1231 = xor i64 %42, -1
  %1232 = or i64 8438217594681061692, %1231
  %1233 = xor i64 %1232, -1
  %1234 = and i64 %1233, -1
  %1235 = xor i64 %1229, %1227
  %1236 = xor i64 %1235, %1230
  %1237 = xor i64 %1236, 5346193939303735647
  %1238 = xor i64 %1237, %1234
  %1239 = and i64 %481, -2355269336635184825
  %1240 = xor i64 %481, -1
  %1241 = xor i64 -2355269336635184825, %1240
  %1242 = and i64 %1241, -2355269336635184825
  %1243 = or i64 %34, -1199196710675690593
  %1244 = and i64 -1199196710675690593, %34
  %1245 = xor i64 -1199196710675690593, %34
  %1246 = or i64 %1244, %1245
  %1247 = add i64 %38, 1040432698558899024
  %1248 = sub i64 0, %38
  %1249 = sub i64 1040432698558899024, %1248
  %1250 = xor i64 %1246, 0
  %1251 = xor i64 %1250, %1247
  %1252 = xor i64 %1251, %1249
  %1253 = xor i64 %1252, %1243
  %1254 = xor i64 %1253, %1239
  %1255 = xor i64 %1254, %1242
  %1256 = mul i64 %1238, %1255
  %1257 = trunc i64 %1256 to i32
  %1258 = or i64 %32, -8827768070478380711
  %1259 = xor i64 %32, -1
  %1260 = and i64 %1259, 4531084103976677400
  %1261 = and i64 %32, -4531084103976677401
  %1262 = or i64 %1260, %1261
  %1263 = xor i64 -4927831575331393215, %1262
  %1264 = xor i64 %32, -1
  %1265 = or i64 8827768070478380710, %1264
  %1266 = xor i64 %1265, -1
  %1267 = and i64 %1266, -1
  %1268 = or i64 %1263, %1267
  %1269 = add i64 %481, 6021263083199997130
  %1270 = and i64 6021263083199997130, %481
  %1271 = or i64 6021263083199997130, %481
  %1272 = add i64 %1270, %1271
  %1273 = xor i64 %1272, %1258
  %1274 = xor i64 %1273, %1269
  %1275 = xor i64 %1274, %1268
  %1276 = xor i64 %1275, -1398641573839281551
  %1277 = add i64 %1, -6505313957775451912
  %1278 = add i64 -1557652042551990812, %1
  %1279 = sub i64 %1278, 4947661915223461100
  %1280 = add i64 %42, -8519487675859734519
  %1281 = and i64 -8519487675859734519, %42
  %1282 = or i64 -8519487675859734519, %42
  %1283 = add i64 %1281, %1282
  %1284 = xor i64 0, %1283
  %1285 = xor i64 %1284, %1277
  %1286 = xor i64 %1285, %1279
  %1287 = xor i64 %1286, %1280
  %1288 = mul i64 %1276, %1287
  %1289 = add i64 %44, -2210840349355856584
  %1290 = xor i64 -2210840349355856584, %44
  %1291 = and i64 -2210840349355856584, %44
  %1292 = mul i64 2, %1291
  %1293 = add i64 %1290, %1292
  %1294 = and i64 %42, 8417872230646640297
  %1295 = xor i64 %42, -1
  %1296 = xor i64 8417872230646640297, %1295
  %1297 = and i64 %1296, 8417872230646640297
  %1298 = xor i64 %1297, %1293
  %1299 = xor i64 %1298, %1294
  %1300 = xor i64 %1299, %1289
  %1301 = xor i64 %1300, -1784076637394975573
  %1302 = and i64 %30, -968175021492691500
  %1303 = xor i64 %30, -1
  %1304 = or i64 968175021492691499, %1303
  %1305 = xor i64 %1304, -1
  %1306 = and i64 %1305, -1
  %1307 = or i64 %30, 6636917444895901574
  %1308 = and i64 6636917444895901574, %30
  %1309 = xor i64 6636917444895901574, %30
  %1310 = or i64 %1308, %1309
  %1311 = xor i64 %1310, %1307
  %1312 = xor i64 %1311, %1302
  %1313 = xor i64 %1312, %1306
  %1314 = xor i64 %1313, 0
  %1315 = mul i64 %1301, %1314
  %1316 = trunc i64 %1315 to i1
  %1317 = and i64 %38, -1962532800711734871
  %1318 = xor i64 %38, -1
  %1319 = or i64 1962532800711734870, %1318
  %1320 = xor i64 %1319, -1
  %1321 = and i64 %1320, -1
  %1322 = and i64 %3, 7452862211077807311
  %1323 = or i64 -7452862211077807312, %3
  %1324 = sub i64 %1323, -7452862211077807312
  %1325 = xor i64 %1321, -4021925425743864789
  %1326 = xor i64 %1325, %1317
  %1327 = xor i64 %1326, %1324
  %1328 = xor i64 %1327, %1322
  %1329 = or i64 %36, 4934177449210400720
  %1330 = xor i64 %36, -1
  %1331 = and i64 %1330, 6553411095381955523
  %1332 = and i64 %36, -6553411095381955524
  %1333 = or i64 %1331, %1332
  %1334 = xor i64 2201095371411004435, %1333
  %1335 = xor i64 %36, -1
  %1336 = or i64 -4934177449210400721, %1335
  %1337 = xor i64 %1336, -1
  %1338 = and i64 %1337, -1
  %1339 = or i64 %1334, %1338
  %1340 = and i64 %46, 6413418820711240921
  %1341 = or i64 -6413418820711240922, %46
  %1342 = sub i64 %1341, -6413418820711240922
  %1343 = and i64 %28, -6112460873274988827
  %1344 = or i64 6112460873274988826, %28
  %1345 = sub i64 %1344, 6112460873274988826
  %1346 = xor i64 %1342, 0
  %1347 = xor i64 %1346, %1329
  %1348 = xor i64 %1347, %1343
  %1349 = xor i64 %1348, %1340
  %1350 = xor i64 %1349, %1345
  %1351 = xor i64 %1350, %1339
  %1352 = mul i64 %1328, %1351
  %1353 = trunc i64 %1352 to i1
  call void @"9941920946239825184"(i32 4, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* %121, i8*** %1194, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %1226, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 %1257, i1* null, i1* null, i64 0, i64 %1288, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %1316, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %1353, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1354 = load i8**, i8*** %1194, align 8
  %1355 = load i8*, i8** %1354, align 8
  %1356 = bitcast i8* %1355 to i1 (i64)*
  %.reload36 = load i64, i64* %.reg2mem35, align 8
  %targetBlock2 = call i1 %1356(i64 %.reload36)
  %.reload20 = load i8**, i8*** %.reg2mem19, align 8
  %.reload24 = load i8**, i8*** %.reg2mem22, align 8
  %1357 = select i1 %targetBlock2, i8** %.reload20, i8** %.reload24
  %1358 = load i8*, i8** %1357, align 8
  indirectbr i8* %1358, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

"7":                                              ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1359 = sdiv i64 101, 96
  %1360 = sub i64 31, 48
  %1361 = add i64 13, 106
  %1362 = and i64 %3, 466219150688582912
  %1363 = xor i64 %3, -1
  %1364 = xor i64 466219150688582912, %1363
  %1365 = and i64 %1364, 466219150688582912
  %1366 = and i64 %32, -6703033204500056325
  %1367 = xor i64 %32, -1
  %1368 = or i64 6703033204500056324, %1367
  %1369 = xor i64 %1368, -1
  %1370 = and i64 %1369, -1
  %1371 = and i64 %314, -1364609116269899280
  %1372 = xor i64 %314, -1
  %1373 = or i64 1364609116269899279, %1372
  %1374 = xor i64 %1373, -1
  %1375 = and i64 %1374, -1
  %1376 = xor i64 %1371, %1370
  %1377 = xor i64 %1376, %1366
  %1378 = xor i64 %1377, %1362
  %1379 = xor i64 %1378, 2350124943219263631
  %1380 = xor i64 %1379, %1375
  %1381 = xor i64 %1380, %1365
  %1382 = add i64 %46, -1933635216868990904
  %1383 = xor i64 -1933635216868990904, %46
  %1384 = and i64 -1933635216868990904, %46
  %1385 = mul i64 2, %1384
  %1386 = add i64 %1383, %1385
  %1387 = or i64 %30, -3952017056094610539
  %1388 = xor i64 %30, -1
  %1389 = and i64 -3952017056094610539, %1388
  %1390 = add i64 %1389, %30
  %1391 = or i64 %38, 430676543367811836
  %1392 = and i64 430676543367811836, %38
  %1393 = xor i64 430676543367811836, %38
  %1394 = or i64 %1392, %1393
  %1395 = xor i64 -6354281807376968081, %1387
  %1396 = xor i64 %1395, %1394
  %1397 = xor i64 %1396, %1386
  %1398 = xor i64 %1397, %1382
  %1399 = xor i64 %1398, %1391
  %1400 = xor i64 %1399, %1390
  %1401 = mul i64 %1381, %1400
  %1402 = mul i64 %1401, 97
  %1403 = sdiv i64 11, 54
  %1404 = mul i64 32, 21
  %1405 = sdiv i64 116, 103
  %.reload23 = load i8**, i8*** %.reg2mem22, align 8
  %1406 = load i8*, i8** %.reload23, align 8
  indirectbr i8* %1406, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

codeRepl3:                                        ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %1407 = add i64 %40, -2200247180425450420
  %1408 = add i64 -1096016499823108188, %40
  %1409 = add i64 %1408, -1104230680602342232
  %1410 = add i64 %44, 7465029080791499129
  %1411 = sub i64 0, %44
  %1412 = add i64 -7465029080791499129, %1411
  %1413 = sub i64 0, %1412
  %1414 = xor i64 %1410, %1413
  %1415 = xor i64 %1414, %1407
  %1416 = xor i64 %1415, %1409
  %1417 = xor i64 %1416, -5527382837172028027
  %1418 = add i64 %481, -3951330450512567184
  %1419 = add i64 -5779614055074840890, %481
  %1420 = sub i64 %1419, -1828283604562273706
  %1421 = add i64 %708, -1658041759819741210
  %1422 = add i64 -1010345430281371230, %708
  %1423 = add i64 %1422, -647696329538369980
  %1424 = xor i64 %1418, %1421
  %1425 = xor i64 %1424, 4651412595788464432
  %1426 = xor i64 %1425, %1420
  %1427 = xor i64 %1426, %1423
  %1428 = mul i64 %1417, %1427
  store i64 %1428, i64* %121, align 8
  %1429 = alloca i8**, align 8
  %1430 = and i64 %42, 6254427125874328217
  %1431 = xor i64 %42, -1
  %1432 = or i64 -6254427125874328218, %1431
  %1433 = xor i64 %1432, -1
  %1434 = and i64 %1433, -1
  %1435 = and i64 %36, 8141104400054888668
  %1436 = xor i64 %36, -1
  %1437 = xor i64 8141104400054888668, %1436
  %1438 = and i64 %1437, 8141104400054888668
  %1439 = or i64 %36, -3459987991699213053
  %1440 = and i64 -3459987991699213053, %36
  %1441 = xor i64 -3459987991699213053, %36
  %1442 = or i64 %1440, %1441
  %1443 = xor i64 %1439, %1434
  %1444 = xor i64 %1443, %1435
  %1445 = xor i64 %1444, -3083452270100812145
  %1446 = xor i64 %1445, %1442
  %1447 = xor i64 %1446, %1438
  %1448 = xor i64 %1447, %1430
  %1449 = add i64 %44, -2700274346837766382
  %1450 = add i64 -6912902930852859062, %44
  %1451 = add i64 %1450, 4212628584015092680
  %1452 = add i64 %3, -4746053421601811573
  %1453 = add i64 4880300372252397290, %3
  %1454 = sub i64 %1453, -8820390279855342753
  %1455 = or i64 %40, 8032738848429293149
  %1456 = xor i64 %40, -1
  %1457 = and i64 %1456, 7329295557310025837
  %1458 = and i64 %40, -7329295557310025838
  %1459 = or i64 %1457, %1458
  %1460 = xor i64 778249818887401008, %1459
  %1461 = xor i64 %40, -1
  %1462 = or i64 -8032738848429293150, %1461
  %1463 = xor i64 %1462, -1
  %1464 = and i64 %1463, -1
  %1465 = or i64 %1460, %1464
  %1466 = xor i64 %1454, %1465
  %1467 = xor i64 %1466, 0
  %1468 = xor i64 %1467, %1451
  %1469 = xor i64 %1468, %1449
  %1470 = xor i64 %1469, %1452
  %1471 = xor i64 %1470, %1455
  %1472 = mul i64 %1448, %1471
  %1473 = trunc i64 %1472 to i1
  %1474 = add i64 %314, -5241161903811336568
  %1475 = add i64 -2172187591675713521, %314
  %1476 = sub i64 %1475, 3068974312135623047
  %1477 = and i64 %44, -9169843545645985877
  %1478 = xor i64 %44, -1
  %1479 = xor i64 -9169843545645985877, %1478
  %1480 = and i64 %1479, -9169843545645985877
  %1481 = add i64 %34, -1496970403301545239
  %1482 = sub i64 0, %34
  %1483 = add i64 1496970403301545239, %1482
  %1484 = sub i64 0, %1483
  %1485 = xor i64 %1477, %1480
  %1486 = xor i64 %1485, %1484
  %1487 = xor i64 %1486, 5257569817873849639
  %1488 = xor i64 %1487, %1476
  %1489 = xor i64 %1488, %1474
  %1490 = xor i64 %1489, %1481
  %1491 = add i64 %314, -136472052545454058
  %1492 = sub i64 0, %314
  %1493 = sub i64 -136472052545454058, %1492
  %1494 = add i64 %32, 1465478493345910199
  %1495 = sub i64 0, %32
  %1496 = sub i64 1465478493345910199, %1495
  %1497 = xor i64 %1494, %1493
  %1498 = xor i64 %1497, %1496
  %1499 = xor i64 %1498, 0
  %1500 = xor i64 %1499, %1491
  %1501 = mul i64 %1490, %1500
  %1502 = and i64 %708, -495593592760459816
  %1503 = xor i64 %708, -1
  %1504 = or i64 495593592760459815, %1503
  %1505 = xor i64 %1504, -1
  %1506 = and i64 %1505, -1
  %1507 = and i64 %481, 1148863242109919699
  %1508 = xor i64 %481, -1
  %1509 = or i64 -1148863242109919700, %1508
  %1510 = xor i64 %1509, -1
  %1511 = and i64 %1510, -1
  %1512 = add i64 %38, -7398166725272769561
  %1513 = and i64 -7398166725272769561, %38
  %1514 = or i64 -7398166725272769561, %38
  %1515 = add i64 %1513, %1514
  %1516 = xor i64 %1502, %1515
  %1517 = xor i64 %1516, %1507
  %1518 = xor i64 %1517, %1506
  %1519 = xor i64 %1518, %1512
  %1520 = xor i64 %1519, 7012880244609356039
  %1521 = xor i64 %1520, %1511
  %1522 = add i64 %481, -1933187968672363217
  %1523 = sub i64 0, %481
  %1524 = add i64 1933187968672363217, %1523
  %1525 = sub i64 0, %1524
  %1526 = or i64 %34, 5035923743129672726
  %1527 = and i64 5035923743129672726, %34
  %1528 = xor i64 5035923743129672726, %34
  %1529 = or i64 %1527, %1528
  %1530 = add i64 %1, 2853139542282344638
  %1531 = add i64 2036437591772671954, %1
  %1532 = sub i64 %1531, -816701950509672684
  %1533 = xor i64 %1532, %1530
  %1534 = xor i64 %1533, %1525
  %1535 = xor i64 %1534, %1529
  %1536 = xor i64 %1535, 0
  %1537 = xor i64 %1536, %1522
  %1538 = xor i64 %1537, %1526
  %1539 = mul i64 %1521, %1538
  %1540 = trunc i64 %1539 to i1
  %1541 = and i64 %42, 7082846873185700427
  %1542 = xor i64 %42, -1
  %1543 = xor i64 7082846873185700427, %1542
  %1544 = and i64 %1543, 7082846873185700427
  %1545 = and i64 %46, -4506685057687126558
  %1546 = or i64 4506685057687126557, %46
  %1547 = sub i64 %1546, 4506685057687126557
  %1548 = and i64 %28, -3671022225936592581
  %1549 = xor i64 %28, -1
  %1550 = or i64 3671022225936592580, %1549
  %1551 = xor i64 %1550, -1
  %1552 = and i64 %1551, -1
  %1553 = xor i64 %1547, %1541
  %1554 = xor i64 %1553, %1552
  %1555 = xor i64 %1554, -4780726532822612625
  %1556 = xor i64 %1555, %1545
  %1557 = xor i64 %1556, %1544
  %1558 = xor i64 %1557, %1548
  %1559 = and i64 %40, 3332114883888317223
  %1560 = xor i64 %40, -1
  %1561 = xor i64 3332114883888317223, %1560
  %1562 = and i64 %1561, 3332114883888317223
  %1563 = and i64 %28, -5308964868538984504
  %1564 = xor i64 %28, -1
  %1565 = xor i64 -5308964868538984504, %1564
  %1566 = and i64 %1565, -5308964868538984504
  %1567 = or i64 %34, -8738460953389910574
  %1568 = and i64 -8738460953389910574, %34
  %1569 = xor i64 -8738460953389910574, %34
  %1570 = or i64 %1568, %1569
  %1571 = xor i64 %1559, %1563
  %1572 = xor i64 %1571, 0
  %1573 = xor i64 %1572, %1570
  %1574 = xor i64 %1573, %1566
  %1575 = xor i64 %1574, %1567
  %1576 = xor i64 %1575, %1562
  %1577 = mul i64 %1558, %1576
  %1578 = trunc i64 %1577 to i1
  call void @"9941920946239825184"(i32 4, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* %121, i8*** %1429, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %1473, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %1501, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %1540, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %1578, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1579 = load i8**, i8*** %1429, align 8
  %1580 = load i8*, i8** %1579, align 8
  %1581 = bitcast i8* %1580 to void (i8*, float*)*
  call void %1581(i8* %0, float* %2)
  %.reload27 = load i8**, i8*** %.reg2mem26, align 8
  %1582 = load i8*, i8** %.reload27, align 8
  store i32 0, i32* %.reg2mem38, align 4
  indirectbr i8* %1582, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %codeRepl, label %"3", label %"4", label %"5", label %codeRepl1, label %"7", label %codeRepl3, label %"9"]

"9":                                              ; preds = %codeRepl3, %"7", %codeRepl1, %"5", %"4", %"3", %codeRepl, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload39 = load i32, i32* %.reg2mem38, align 4
  ret i32 %.reload39
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() local_unnamed_addr #4 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012117)
  %2 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %1
  store i8* blockaddress(@main, %codeRepl26), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012119)
  %4 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %3
  store i8* blockaddress(@main, %"27"), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012124)
  %6 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %5
  store i8* blockaddress(@main, %"25"), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012126)
  %8 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %7
  store i8* blockaddress(@main, %.ret), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012099)
  %10 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %9
  store i8* blockaddress(@main, %codeRepl21), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012116)
  %12 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %11
  store i8* blockaddress(@main, %codeRepl20), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012125)
  %14 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %13
  store i8* blockaddress(@main, %codeRepl9), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012118)
  %16 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %15
  store i8* blockaddress(@main, %"16"), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012104)
  %18 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %17
  store i8* blockaddress(@main, %"13"), i8** %18, align 8
  %19 = call i64 @h11804894491772278134(i64 595012113)
  %20 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %19
  store i8* blockaddress(@main, %"21"), i8** %20, align 8
  %21 = call i64 @h11804894491772278134(i64 595012102)
  %22 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %21
  store i8* blockaddress(@main, %"12"), i8** %22, align 8
  %23 = call i64 @h11804894491772278134(i64 595012115)
  %24 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %23
  store i8* blockaddress(@main, %"24"), i8** %24, align 8
  %25 = call i64 @h11804894491772278134(i64 595012121)
  %26 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %25
  store i8* blockaddress(@main, %"11"), i8** %26, align 8
  %27 = call i64 @h11804894491772278134(i64 595012097)
  %28 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %27
  store i8* blockaddress(@main, %"3"), i8** %28, align 8
  %29 = call i64 @h11804894491772278134(i64 595012106)
  %30 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %29
  store i8* blockaddress(@main, %codeRepl7), i8** %30, align 8
  %31 = call i64 @h11804894491772278134(i64 595012123)
  %32 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %31
  store i8* blockaddress(@main, %"18"), i8** %32, align 8
  %33 = call i64 @h11804894491772278134(i64 595012096)
  %34 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %33
  store i8* blockaddress(@main, %"14"), i8** %34, align 8
  %35 = call i64 @h11804894491772278134(i64 595012100)
  %36 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %35
  store i8* blockaddress(@main, %"9"), i8** %36, align 8
  %37 = call i64 @h11804894491772278134(i64 595012114)
  %38 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %37
  store i8* blockaddress(@main, %"8"), i8** %38, align 8
  %39 = call i64 @h11804894491772278134(i64 595012098)
  %40 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %39
  store i8* blockaddress(@main, %"20"), i8** %40, align 8
  %41 = call i64 @h11804894491772278134(i64 595012120)
  %42 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %41
  store i8* blockaddress(@main, %"26"), i8** %42, align 8
  %43 = call i64 @h11804894491772278134(i64 595012105)
  %44 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %43
  store i8* blockaddress(@main, %"7"), i8** %44, align 8
  %45 = call i64 @h11804894491772278134(i64 595012110)
  %46 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %45
  store i8* blockaddress(@main, %"6"), i8** %46, align 8
  %47 = call i64 @h11804894491772278134(i64 595012111)
  %48 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %47
  store i8* blockaddress(@main, %"15"), i8** %48, align 8
  %49 = call i64 @h11804894491772278134(i64 595012103)
  %50 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %49
  store i8* blockaddress(@main, %"5"), i8** %50, align 8
  %51 = call i64 @h11804894491772278134(i64 595012107)
  %52 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %51
  store i8* blockaddress(@main, %"2"), i8** %52, align 8
  %53 = call i64 @h11804894491772278134(i64 595012109)
  %54 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %53
  store i8* blockaddress(@main, %BogusBasciBlock), i8** %54, align 8
  %55 = call i64 @h11804894491772278134(i64 595012101)
  %56 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %55
  store i8* blockaddress(@main, %codeRepl), i8** %56, align 8
  %57 = call i64 @h11804894491772278134(i64 595012108)
  %58 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %57
  store i8* blockaddress(@main, %"23"), i8** %58, align 8
  %59 = call i64 @h11804894491772278134(i64 595012122)
  %60 = getelementptr [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %59
  store i8* blockaddress(@main, %EntryBasicBlockSplit), i8** %60, align 8
  %.reg2mem161 = alloca i32, align 4
  %.reg2mem159 = alloca i1, align 1
  %.reg2mem157 = alloca i32, align 4
  %.reload24.reg2mem = alloca i1, align 1
  %.reg2mem154 = alloca i32, align 4
  %.reg2mem151 = alloca i1, align 1
  %.reg2mem145 = alloca i32, align 4
  %.reg2mem143 = alloca i1, align 1
  %.reload4.reg2mem = alloca i1, align 1
  %.reload3.reg2mem = alloca i1, align 1
  %.reload.reg2mem = alloca i32, align 4
  %.reg2mem140 = alloca i64, align 8
  %.reg2mem137 = alloca i1, align 1
  %.reg2mem132 = alloca i32, align 4
  %.reg2mem130 = alloca i64, align 8
  %.reg2mem126 = alloca i32, align 4
  %.reg2mem124 = alloca float*, align 8
  %.reg2mem118 = alloca i32, align 4
  %.reg2mem114 = alloca i8*, align 8
  %.reg2mem111 = alloca i8*, align 8
  %.reg2mem108 = alloca i8*, align 8
  %.reg2mem105 = alloca i8*, align 8
  %.reg2mem102 = alloca i8**, align 8
  %.reg2mem99 = alloca i8**, align 8
  %.reg2mem95 = alloca i8**, align 8
  %.reg2mem92 = alloca i8**, align 8
  %.reg2mem88 = alloca i8**, align 8
  %.reg2mem85 = alloca i8**, align 8
  %.reg2mem82 = alloca i8**, align 8
  %.reg2mem79 = alloca i8**, align 8
  %.reg2mem74 = alloca i8**, align 8
  %.reg2mem70 = alloca i8**, align 8
  %.reg2mem67 = alloca i8**, align 8
  %.reg2mem63 = alloca i8**, align 8
  %.reg2mem60 = alloca i8**, align 8
  %.reg2mem57 = alloca i8**, align 8
  %.reg2mem54 = alloca i8**, align 8
  %.reg2mem51 = alloca i8**, align 8
  %.reg2mem46 = alloca i8**, align 8
  %.reg2mem43 = alloca i8**, align 8
  %.reg2mem40 = alloca i8**, align 8
  %.reg2mem37 = alloca i8**, align 8
  %.reg2mem33 = alloca i8**, align 8
  %.reg2mem30 = alloca i8**, align 8
  %.reg2mem26 = alloca i8**, align 8
  %.reg2mem22 = alloca i8**, align 8
  %.reg2mem19 = alloca i8**, align 8
  %.reg2mem14 = alloca i8**, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 30, align 8
  %61 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main, %BogusBasciBlock), i8** %61, align 8
  %62 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %62, i8*** %.reg2mem, align 8
  %.reload5 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main, %EntryBasicBlockSplit), i8** %.reload5, align 8
  %63 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %63, i8*** %.reg2mem6, align 8
  %.reload9 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main, %"2"), i8** %.reload9, align 8
  %64 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %64, i8*** %.reg2mem10, align 8
  %.reload13 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@main, %"3"), i8** %.reload13, align 8
  %65 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %65, i8*** %.reg2mem14, align 8
  %.reload18 = load i8**, i8*** %.reg2mem14, align 8
  store i8* blockaddress(@main, %codeRepl), i8** %.reload18, align 8
  %66 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %66, i8*** %.reg2mem19, align 8
  %.reload21 = load i8**, i8*** %.reg2mem19, align 8
  store i8* blockaddress(@main, %"5"), i8** %.reload21, align 8
  %67 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %67, i8*** %.reg2mem22, align 8
  %.reload25 = load i8**, i8*** %.reg2mem22, align 8
  store i8* blockaddress(@main, %"6"), i8** %.reload25, align 8
  %68 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %68, i8*** %.reg2mem26, align 8
  %.reload29 = load i8**, i8*** %.reg2mem26, align 8
  store i8* blockaddress(@main, %"7"), i8** %.reload29, align 8
  %69 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %69, i8*** %.reg2mem30, align 8
  %.reload32 = load i8**, i8*** %.reg2mem30, align 8
  store i8* blockaddress(@main, %"8"), i8** %.reload32, align 8
  %70 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %70, i8*** %.reg2mem33, align 8
  %.reload36 = load i8**, i8*** %.reg2mem33, align 8
  store i8* blockaddress(@main, %"9"), i8** %.reload36, align 8
  %71 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %71, i8*** %.reg2mem37, align 8
  %.reload39 = load i8**, i8*** %.reg2mem37, align 8
  store i8* blockaddress(@main, %codeRepl7), i8** %.reload39, align 8
  %72 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %72, i8*** %.reg2mem40, align 8
  %.reload42 = load i8**, i8*** %.reg2mem40, align 8
  store i8* blockaddress(@main, %"11"), i8** %.reload42, align 8
  %73 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %73, i8*** %.reg2mem43, align 8
  %.reload45 = load i8**, i8*** %.reg2mem43, align 8
  store i8* blockaddress(@main, %"12"), i8** %.reload45, align 8
  %74 = getelementptr i8*, i8** %JumpTable, i32 13
  store i8** %74, i8*** %.reg2mem46, align 8
  %.reload50 = load i8**, i8*** %.reg2mem46, align 8
  store i8* blockaddress(@main, %"13"), i8** %.reload50, align 8
  %75 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8** %75, i8*** %.reg2mem51, align 8
  %.reload53 = load i8**, i8*** %.reg2mem51, align 8
  store i8* blockaddress(@main, %"14"), i8** %.reload53, align 8
  %76 = getelementptr i8*, i8** %JumpTable, i32 15
  store i8** %76, i8*** %.reg2mem54, align 8
  %.reload56 = load i8**, i8*** %.reg2mem54, align 8
  store i8* blockaddress(@main, %"15"), i8** %.reload56, align 8
  %77 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8** %77, i8*** %.reg2mem57, align 8
  %.reload59 = load i8**, i8*** %.reg2mem57, align 8
  store i8* blockaddress(@main, %"16"), i8** %.reload59, align 8
  %78 = getelementptr i8*, i8** %JumpTable, i32 17
  store i8** %78, i8*** %.reg2mem60, align 8
  %.reload62 = load i8**, i8*** %.reg2mem60, align 8
  store i8* blockaddress(@main, %codeRepl9), i8** %.reload62, align 8
  %79 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8** %79, i8*** %.reg2mem63, align 8
  %.reload66 = load i8**, i8*** %.reg2mem63, align 8
  store i8* blockaddress(@main, %"18"), i8** %.reload66, align 8
  %80 = getelementptr i8*, i8** %JumpTable, i32 19
  store i8** %80, i8*** %.reg2mem67, align 8
  %.reload69 = load i8**, i8*** %.reg2mem67, align 8
  store i8* blockaddress(@main, %codeRepl20), i8** %.reload69, align 8
  %81 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8** %81, i8*** %.reg2mem70, align 8
  %.reload73 = load i8**, i8*** %.reg2mem70, align 8
  store i8* blockaddress(@main, %"20"), i8** %.reload73, align 8
  %82 = getelementptr i8*, i8** %JumpTable, i32 21
  store i8** %82, i8*** %.reg2mem74, align 8
  %.reload78 = load i8**, i8*** %.reg2mem74, align 8
  store i8* blockaddress(@main, %"21"), i8** %.reload78, align 8
  %83 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8** %83, i8*** %.reg2mem79, align 8
  %.reload81 = load i8**, i8*** %.reg2mem79, align 8
  store i8* blockaddress(@main, %codeRepl21), i8** %.reload81, align 8
  %84 = getelementptr i8*, i8** %JumpTable, i32 23
  store i8** %84, i8*** %.reg2mem82, align 8
  %.reload84 = load i8**, i8*** %.reg2mem82, align 8
  store i8* blockaddress(@main, %"23"), i8** %.reload84, align 8
  %85 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8** %85, i8*** %.reg2mem85, align 8
  %.reload87 = load i8**, i8*** %.reg2mem85, align 8
  store i8* blockaddress(@main, %"24"), i8** %.reload87, align 8
  %86 = getelementptr i8*, i8** %JumpTable, i32 25
  store i8** %86, i8*** %.reg2mem88, align 8
  %.reload91 = load i8**, i8*** %.reg2mem88, align 8
  store i8* blockaddress(@main, %"25"), i8** %.reload91, align 8
  %87 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8** %87, i8*** %.reg2mem92, align 8
  %.reload94 = load i8**, i8*** %.reg2mem92, align 8
  store i8* blockaddress(@main, %"26"), i8** %.reload94, align 8
  %88 = getelementptr i8*, i8** %JumpTable, i32 27
  store i8** %88, i8*** %.reg2mem95, align 8
  %.reload98 = load i8**, i8*** %.reg2mem95, align 8
  store i8* blockaddress(@main, %"27"), i8** %.reload98, align 8
  %89 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8** %89, i8*** %.reg2mem99, align 8
  %.reload101 = load i8**, i8*** %.reg2mem99, align 8
  store i8* blockaddress(@main, %codeRepl26), i8** %.reload101, align 8
  %90 = getelementptr i8*, i8** %JumpTable, i32 29
  store i8** %90, i8*** %.reg2mem102, align 8
  %.reload104 = load i8**, i8*** %.reg2mem102, align 8
  store i8* blockaddress(@main, %.ret), i8** %.reload104, align 8
  %91 = alloca i64, align 8
  %92 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537076, i64* %92, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %93
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %94, align 8
  %95 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537081, i64* %95, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %96
  store i8* bitcast (i64 ()* @"\01_clock" to i8*), i8** %97, align 8
  %98 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537073, i64* %98, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %99
  store i8* bitcast (i32 (float*, float*, i8*, float*)* @main_loop to i8*), i8** %100, align 8
  %101 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537078, i64* %101, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %102
  store i8* bitcast (i64 ()* @"\01_clock" to i8*), i8** %103, align 8
  %104 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537079, i64* %104, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %105
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %106, align 8
  %107 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %107, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %108
  store i8* bitcast (i1 (i32, i64, i32, i32*, i1*, i1*)* @main.extracted to i8*), i8** %109, align 8
  %110 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537075, i64* %110, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %111
  store i8* bitcast (void ()* @wait to i8*), i8** %112, align 8
  %113 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537082, i64* %113, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %114
  store i8* bitcast (i1 (i1)* @main..split to i8*), i8** %115, align 8
  %116 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537080, i64* %116, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %117
  store i8* bitcast (i1 (i1, i64*, i64*, i64*)* @main.extracted.13 to i8*), i8** %118, align 8
  %119 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537072, i64* %119, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %120
  store i8* bitcast (void ()* @main..split.14 to i8*), i8** %121, align 8
  %122 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537083, i64* %122, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %123
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.15 to i8*), i8** %124, align 8
  %125 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537077, i64* %125, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %126 = load i64, i64* %125, align 8
  %127 = getelementptr [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %126
  store i8* bitcast (void (i8*, i8*, i8*, i8*)* @main.extracted.16 to i8*), i8** %127, align 8
  %.loc22 = alloca i1, align 1
  %.loc12 = alloca i64, align 8
  %.loc11 = alloca i64, align 8
  %.loc10 = alloca i64, align 8
  %.loc2 = alloca i1, align 1
  %.loc1 = alloca i1, align 1
  %.loc = alloca i32, align 4
  %128 = alloca float, align 4
  %129 = alloca float, align 4
  %130 = alloca [1760 x float], align 4
  %131 = alloca [1760 x i8], align 1
  %132 = bitcast float* %128 to i8*
  store i8* %132, i8** %.reg2mem105, align 8
  %.reload107 = load i8*, i8** %.reg2mem105, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %.reload107) #12
  store float 0.000000e+00, float* %128, align 4, !tbaa !10
  %133 = bitcast float* %129 to i8*
  store i8* %133, i8** %.reg2mem108, align 8
  %.reload110 = load i8*, i8** %.reg2mem108, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %.reload110) #12
  store float 0.000000e+00, float* %129, align 4, !tbaa !10
  %134 = bitcast [1760 x float]* %130 to i8*
  store i8* %134, i8** %.reg2mem111, align 8
  %.reload113 = load i8*, i8** %.reg2mem111, align 8
  call void @llvm.lifetime.start.p0i8(i64 7040, i8* nonnull %.reload113) #12
  %135 = getelementptr inbounds [1760 x i8], [1760 x i8]* %131, i64 0, i64 0
  store i8* %135, i8** %.reg2mem114, align 8
  %.reload117 = load i8*, i8** %.reg2mem114, align 8
  call void @llvm.lifetime.start.p0i8(i64 1760, i8* nonnull %.reload117) #12
  store i64 1996855465712537076, i64* %91, align 8
  %136 = call i8** @lk15438226847016391286(i64* %91)
  %137 = load i8*, i8** %136, align 8
  %138 = bitcast i8* %137 to i32 (i8*, ...)*
  %139 = call i32 (i8*, ...) %138(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i32 %139, i32* %.reg2mem118, align 4
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %140 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %140, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

BogusBasciBlock:                                  ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %141 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main, %"27"), i8** %141, align 8
  %142 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main, %"12"), i8** %142, align 8
  %143 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main, %"3"), i8** %143, align 8
  %144 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@main, %"20"), i8** %144, align 8
  %145 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@main, %.ret), i8** %145, align 8
  %146 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@main, %"13"), i8** %146, align 8
  %147 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@main, %codeRepl20), i8** %147, align 8
  %148 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8* blockaddress(@main, %codeRepl26), i8** %148, align 8
  %149 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8* blockaddress(@main, %"26"), i8** %149, align 8
  %150 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8* blockaddress(@main, %"23"), i8** %150, align 8
  %151 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8* blockaddress(@main, %"7"), i8** %151, align 8
  %152 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8* blockaddress(@main, %"15"), i8** %152, align 8
  %153 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8* blockaddress(@main, %"21"), i8** %153, align 8
  %154 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8* blockaddress(@main, %codeRepl21), i8** %154, align 8
  %155 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8* blockaddress(@main, %"16"), i8** %155, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %156 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %156, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

EntryBasicBlockSplit:                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %157 = getelementptr inbounds [1760 x float], [1760 x float]* %130, i64 0, i64 0
  store float* %157, float** %.reg2mem124, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  %158 = load i8*, i8** %.reload8, align 8
  store i32 0, i32* %.reg2mem157, align 4
  indirectbr i8* %158, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"2":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload158 = load i32, i32* %.reg2mem157, align 4
  store i32 %.reload158, i32* %.reg2mem126, align 4
  store i64 1996855465712537081, i64* %91, align 8
  %159 = call i8** @lk15438226847016391286(i64* %91)
  %160 = load i8*, i8** %159, align 8
  %161 = bitcast i8* %160 to i64 ()*
  %162 = call i64 %161()
  store i64 %162, i64* %.reg2mem130, align 8
  store i64 1996855465712537073, i64* %91, align 8
  %163 = call i8** @lk15438226847016391286(i64* %91)
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast i8* %164 to i32 (float*, float*, i8*, float*)*
  %.reload116 = load i8*, i8** %.reg2mem114, align 8
  %.reload125 = load float*, float** %.reg2mem124, align 8
  %166 = call i32 %165(float* %128, float* %129, i8* %.reload116, float* %.reload125)
  store i32 %166, i32* %.reg2mem132, align 4
  %.reload136 = load i32, i32* %.reg2mem132, align 4
  %167 = add i64 %23, -8063566935180863783
  %168 = sub i64 0, %23
  %169 = sub i64 -8063566935180863783, %168
  %170 = and i64 %93, 733635134593048521
  %171 = or i64 -733635134593048522, %93
  %172 = sub i64 %171, -733635134593048522
  %173 = and i64 %111, 4564945035148246332
  %174 = xor i64 %111, -1
  %175 = xor i64 4564945035148246332, %174
  %176 = and i64 %175, 4564945035148246332
  %177 = xor i64 %172, %176
  %178 = xor i64 %177, %167
  %179 = xor i64 %178, %170
  %180 = xor i64 %179, 7301254601648503799
  %181 = xor i64 %180, %173
  %182 = xor i64 %181, %169
  %183 = and i64 %126, -5468450672610741074
  %184 = xor i64 %126, -1
  %185 = or i64 5468450672610741073, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = add i64 %21, 910435388655410725
  %189 = and i64 910435388655410725, %21
  %190 = or i64 910435388655410725, %21
  %191 = add i64 %189, %190
  %192 = add i64 %13, -5692390231085991949
  %193 = add i64 1335266279531069276, %13
  %194 = sub i64 %193, 7027656510617061225
  %195 = xor i64 %192, 0
  %196 = xor i64 %195, %191
  %197 = xor i64 %196, %187
  %198 = xor i64 %197, %183
  %199 = xor i64 %198, %188
  %200 = xor i64 %199, %194
  %201 = mul i64 %182, %200
  %202 = trunc i64 %201 to i32
  %203 = icmp eq i32 %.reload136, %202
  store i1 %203, i1* %.reg2mem137, align 1
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  %.reload77 = load i8**, i8*** %.reg2mem74, align 8
  %.reload139 = load i1, i1* %.reg2mem137, align 1
  %204 = select i1 %.reload139, i8** %.reload12, i8** %.reload77
  %205 = load i8*, i8** %204, align 8
  %.reload133 = load i32, i32* %.reg2mem132, align 4
  store i32 %.reload133, i32* %.reg2mem161, align 4
  indirectbr i8* %205, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"3":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537078, i64* %91, align 8
  %206 = call i8** @lk15438226847016391286(i64* %91)
  %207 = load i8*, i8** %206, align 8
  %208 = bitcast i8* %207 to i64 ()*
  %209 = call i64 %208()
  store i64 %209, i64* %.reg2mem140, align 8
  %.reload131 = load i64, i64* %.reg2mem130, align 8
  %.reload142 = load i64, i64* %.reg2mem140, align 8
  %210 = sub i64 %.reload142, %.reload131
  %211 = uitofp i64 %210 to double
  %212 = fdiv double %211, 1.000000e+06
  store i64 1996855465712537079, i64* %91, align 8
  %213 = call i8** @lk15438226847016391286(i64* %91)
  %214 = load i8*, i8** %213, align 8
  %215 = bitcast i8* %214 to i32 (i8*, ...)*
  %216 = call i32 (i8*, ...) %215(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), double %212)
  %.reload123 = load i32, i32* %.reg2mem118, align 4
  %217 = srem i32 %.reload123, 2
  %218 = add i64 %105, -2205047968181772796
  %219 = xor i64 -2205047968181772796, %105
  %220 = and i64 -2205047968181772796, %105
  %221 = mul i64 2, %220
  %222 = add i64 %219, %221
  %223 = or i64 %45, -6108025750917403871
  %224 = and i64 -6108025750917403871, %45
  %225 = xor i64 -6108025750917403871, %45
  %226 = or i64 %224, %225
  %227 = xor i64 %218, %226
  %228 = xor i64 %227, %222
  %229 = xor i64 %228, -8555264136589195959
  %230 = xor i64 %229, %223
  %231 = add i64 %120, 7442384619261579365
  %232 = add i64 -2819284696522928329, %120
  %233 = sub i64 %232, 8185074757925043922
  %234 = or i64 %15, 7185011792609772438
  %235 = and i64 7185011792609772438, %15
  %236 = xor i64 7185011792609772438, %15
  %237 = or i64 %235, %236
  %238 = xor i64 %231, %234
  %239 = xor i64 %238, %233
  %240 = xor i64 %239, 0
  %241 = xor i64 %240, %237
  %242 = mul i64 %230, %241
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %217, %243
  %.reload17 = load i8**, i8*** %.reg2mem14, align 8
  %.reload31 = load i8**, i8*** %.reg2mem30, align 8
  %245 = select i1 %244, i8** %.reload17, i8** %.reload31
  %246 = load i8*, i8** %245, align 8
  indirectbr i8* %246, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

codeRepl:                                         ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast = bitcast i32* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %lt.cast5 = bitcast i1* %.loc1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast5)
  %lt.cast6 = bitcast i1* %.loc2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast6)
  store i64 1996855465712537074, i64* %91, align 8
  %247 = call i8** @lk15438226847016391286(i64* %91)
  %248 = load i8*, i8** %247, align 8
  %249 = bitcast i8* %248 to i1 (i32, i64, i32, i32*, i1*, i1*)*
  %.reload122 = load i32, i32* %.reg2mem118, align 4
  %.reload135 = load i32, i32* %.reg2mem132, align 4
  %.reload141 = load i64, i64* %.reg2mem140, align 8
  %targetBlock = call i1 %249(i32 %.reload135, i64 %.reload141, i32 %.reload122, i32* %.loc, i1* %.loc1, i1* %.loc2)
  %.reload = load i32, i32* %.loc, align 4
  store i32 %.reload, i32* %.reload.reg2mem, align 4
  %.reload3 = load i1, i1* %.loc1, align 1
  store i1 %.reload3, i1* %.reload3.reg2mem, align 1
  %.reload4 = load i1, i1* %.loc2, align 1
  store i1 %.reload4, i1* %.reload4.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast5)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast6)
  %.reload20 = load i8**, i8*** %.reg2mem19, align 8
  %.reload23 = load i8**, i8*** %.reg2mem22, align 8
  %250 = select i1 %targetBlock, i8** %.reload23, i8** %.reload20
  %251 = load i8*, i8** %250, align 8
  indirectbr i8* %251, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"5":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %.reload28 = load i8**, i8*** %.reg2mem26, align 8
  %.reload4.reload = load i1, i1* %.reload4.reg2mem, align 1
  %252 = select i1 %.reload4.reload, i8** %.reload28, i8** %.reload11
  %253 = load i8*, i8** %252, align 8
  indirectbr i8* %253, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"6":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload27 = load i8**, i8*** %.reg2mem26, align 8
  %254 = load i8*, i8** %.reload27, align 8
  indirectbr i8* %254, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"7":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload35 = load i8**, i8*** %.reg2mem33, align 8
  %255 = load i8*, i8** %.reload35, align 8
  %.reload.reload = load i32, i32* %.reload.reg2mem, align 4
  %.reload3.reload = load i1, i1* %.reload3.reg2mem, align 1
  store i1 %.reload3.reload, i1* %.reg2mem159, align 1
  indirectbr i8* %255, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"8":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537075, i64* %91, align 8
  %256 = call i8** @lk15438226847016391286(i64* %91)
  %257 = load i8*, i8** %256, align 8
  %258 = bitcast i8* %257 to void ()*
  call void %258()
  %.reload134 = load i32, i32* %.reg2mem132, align 4
  %259 = and i64 %21, 4778450440589954533
  %260 = or i64 -4778450440589954534, %21
  %261 = sub i64 %260, -4778450440589954534
  %262 = and i64 %57, 21350398886570895
  %263 = xor i64 %57, -1
  %264 = xor i64 21350398886570895, %263
  %265 = and i64 %264, 21350398886570895
  %266 = and i64 %21, 250853208750297924
  %267 = xor i64 %21, -1
  %268 = or i64 -250853208750297925, %267
  %269 = xor i64 %268, -1
  %270 = and i64 %269, -1
  %271 = xor i64 %262, %266
  %272 = xor i64 %271, -1948310180733563385
  %273 = xor i64 %272, %270
  %274 = xor i64 %273, %265
  %275 = xor i64 %274, %261
  %276 = xor i64 %275, %259
  %277 = add i64 %15, -2853386230648285875
  %278 = and i64 -2853386230648285875, %15
  %279 = or i64 -2853386230648285875, %15
  %280 = add i64 %278, %279
  %281 = add i64 %27, -2766531676583391777
  %282 = sub i64 0, %27
  %283 = sub i64 -2766531676583391777, %282
  %284 = add i64 %45, 227673651101987202
  %285 = add i64 2122256558960989400, %45
  %286 = sub i64 %285, 1894582907859002198
  %287 = xor i64 %281, %283
  %288 = xor i64 %287, -1511473713281925266
  %289 = xor i64 %288, %286
  %290 = xor i64 %289, %277
  %291 = xor i64 %290, %280
  %292 = xor i64 %291, %284
  %293 = mul i64 %276, %292
  %294 = trunc i64 %293 to i32
  %295 = srem i32 %.reload134, %294
  %296 = icmp eq i32 %295, 0
  %.reload34 = load i8**, i8*** %.reg2mem33, align 8
  %297 = load i8*, i8** %.reload34, align 8
  store i1 %296, i1* %.reg2mem159, align 1
  indirectbr i8* %297, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"9":                                              ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload160 = load i1, i1* %.reg2mem159, align 1
  store i1 %.reload160, i1* %.reg2mem143, align 1
  %.reload38 = load i8**, i8*** %.reg2mem37, align 8
  %298 = load i8*, i8** %.reload38, align 8
  indirectbr i8* %298, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

codeRepl7:                                        ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537082, i64* %91, align 8
  %299 = call i8** @lk15438226847016391286(i64* %91)
  %300 = load i8*, i8** %299, align 8
  %301 = bitcast i8* %300 to i1 (i1)*
  %.reload144 = load i1, i1* %.reg2mem143, align 1
  %targetBlock8 = call i1 %301(i1 %.reload144)
  %.reload41 = load i8**, i8*** %.reg2mem40, align 8
  %.reload44 = load i8**, i8*** %.reg2mem43, align 8
  %302 = select i1 %targetBlock8, i8** %.reload41, i8** %.reload44
  %303 = load i8*, i8** %302, align 8
  indirectbr i8* %303, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"11":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload49 = load i8**, i8*** %.reg2mem46, align 8
  %304 = load i8*, i8** %.reload49, align 8
  indirectbr i8* %304, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"12":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload48 = load i8**, i8*** %.reg2mem46, align 8
  %305 = load i8*, i8** %.reload48, align 8
  indirectbr i8* %305, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"13":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload121 = load i32, i32* %.reg2mem118, align 4
  %306 = srem i32 %.reload121, 2
  store i32 %306, i32* %.reg2mem145, align 4
  %.reload150 = load i32, i32* %.reg2mem145, align 4
  %307 = icmp eq i32 %.reload150, 0
  %.reload52 = load i8**, i8*** %.reg2mem51, align 8
  %.reload55 = load i8**, i8*** %.reg2mem54, align 8
  %308 = select i1 %307, i8** %.reload52, i8** %.reload55
  %309 = load i8*, i8** %308, align 8
  indirectbr i8* %309, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"14":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload72 = load i8**, i8*** %.reg2mem70, align 8
  %310 = load i8*, i8** %.reload72, align 8
  indirectbr i8* %310, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"15":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %311 = sdiv i64 47, 88
  %312 = sdiv i64 80, 121
  %313 = sdiv i64 87, 95
  %314 = sub i64 82, 41
  %315 = sdiv i64 52, 56
  %316 = mul i64 49, 33
  %.reload129 = load i32, i32* %.reg2mem126, align 4
  %317 = srem i32 %.reload129, 2
  %318 = icmp eq i32 %317, 0
  %.reload149 = load i32, i32* %.reg2mem145, align 4
  %319 = mul i32 %.reload149, 2
  %.reload148 = load i32, i32* %.reg2mem145, align 4
  %320 = or i64 %117, -330561125488787827
  %321 = xor i64 %117, -1
  %322 = and i64 -330561125488787827, %321
  %323 = add i64 %322, %117
  %324 = or i64 %17, -2676809667110150043
  %325 = xor i64 %17, -1
  %326 = and i64 %325, -4650844412533836426
  %327 = and i64 %17, 4650844412533836425
  %328 = or i64 %326, %327
  %329 = xor i64 7327055807002842387, %328
  %330 = xor i64 %17, -1
  %331 = or i64 2676809667110150042, %330
  %332 = xor i64 %331, -1
  %333 = and i64 %332, -1
  %334 = or i64 %329, %333
  %335 = or i64 %41, 5473333695793563245
  %336 = xor i64 %41, -1
  %337 = and i64 5473333695793563245, %336
  %338 = add i64 %337, %41
  %339 = xor i64 %320, %338
  %340 = xor i64 %339, -8313475648015587753
  %341 = xor i64 %340, %324
  %342 = xor i64 %341, %335
  %343 = xor i64 %342, %334
  %344 = xor i64 %343, %323
  %345 = or i64 %27, -6861191420865791995
  %346 = and i64 -6861191420865791995, %27
  %347 = xor i64 -6861191420865791995, %27
  %348 = or i64 %346, %347
  %349 = and i64 %23, -4402238778265974654
  %350 = or i64 4402238778265974653, %23
  %351 = sub i64 %350, 4402238778265974653
  %352 = xor i64 %348, 8523490693034625742
  %353 = xor i64 %352, %351
  %354 = xor i64 %353, %345
  %355 = xor i64 %354, %349
  %356 = mul i64 %344, %355
  %357 = trunc i64 %356 to i32
  %358 = mul i32 %.reload148, %357
  %359 = and i32 2, %358
  %360 = or i32 2, %358
  %361 = add i32 %359, %360
  %362 = mul i32 %319, %361
  %363 = srem i32 %362, 4
  %364 = and i64 %105, -5108939454322128722
  %365 = xor i64 %105, -1
  %366 = or i64 5108939454322128721, %365
  %367 = xor i64 %366, -1
  %368 = and i64 %367, -1
  %369 = add i64 %59, 128833316859898842
  %370 = and i64 128833316859898842, %59
  %371 = or i64 128833316859898842, %59
  %372 = add i64 %370, %371
  %373 = xor i64 %372, %368
  %374 = xor i64 %373, %369
  %375 = xor i64 %374, %364
  %376 = xor i64 %375, -8495532352283612053
  %377 = and i64 %19, -5868437262640831246
  %378 = or i64 5868437262640831245, %19
  %379 = sub i64 %378, 5868437262640831245
  %380 = add i64 %37, -3283933984999551420
  %381 = xor i64 -3283933984999551420, %37
  %382 = and i64 -3283933984999551420, %37
  %383 = mul i64 2, %382
  %384 = add i64 %381, %383
  %385 = and i64 %96, -8016915030914433934
  %386 = or i64 8016915030914433933, %96
  %387 = sub i64 %386, 8016915030914433933
  %388 = xor i64 %380, %379
  %389 = xor i64 %388, %377
  %390 = xor i64 %389, %387
  %391 = xor i64 %390, %384
  %392 = xor i64 %391, %385
  %393 = xor i64 %392, 0
  %394 = mul i64 %376, %393
  %395 = trunc i64 %394 to i32
  %396 = icmp eq i32 %363, %395
  %.reload147 = load i32, i32* %.reg2mem145, align 4
  %397 = mul i32 %.reload147, %.reload147
  %.reload146 = load i32, i32* %.reg2mem145, align 4
  %398 = add i32 %397, %.reload146
  %399 = and i64 %35, 6076285207838788660
  %400 = xor i64 %35, -1
  %401 = xor i64 6076285207838788660, %400
  %402 = and i64 %401, 6076285207838788660
  %403 = and i64 %117, 375947802200492344
  %404 = xor i64 %117, -1
  %405 = xor i64 375947802200492344, %404
  %406 = and i64 %405, 375947802200492344
  %407 = add i64 %37, 5368208011371772267
  %408 = sub i64 0, %37
  %409 = sub i64 5368208011371772267, %408
  %410 = xor i64 %409, 3242176770098291877
  %411 = xor i64 %410, %407
  %412 = xor i64 %411, %406
  %413 = xor i64 %412, %402
  %414 = xor i64 %413, %403
  %415 = xor i64 %414, %399
  %416 = or i64 %13, 3746593216265572347
  %417 = xor i64 %13, -1
  %418 = and i64 3746593216265572347, %417
  %419 = add i64 %418, %13
  %420 = add i64 %93, -5190843194808660749
  %421 = sub i64 0, %93
  %422 = sub i64 -5190843194808660749, %421
  %423 = add i64 %35, -453936341507896728
  %424 = and i64 -453936341507896728, %35
  %425 = or i64 -453936341507896728, %35
  %426 = add i64 %424, %425
  %427 = xor i64 %423, %426
  %428 = xor i64 %427, %416
  %429 = xor i64 %428, %419
  %430 = xor i64 %429, %420
  %431 = xor i64 %430, %422
  %432 = xor i64 %431, 1040683942958319194
  %433 = mul i64 %415, %432
  %434 = trunc i64 %433 to i32
  %435 = srem i32 %398, %434
  %436 = icmp eq i32 %435, 0
  %437 = and i1 %396, %436
  %438 = xor i1 %396, %436
  %439 = or i1 %437, %438
  store i1 %439, i1* %.reg2mem151, align 1
  %.reload58 = load i8**, i8*** %.reg2mem57, align 8
  %.reload61 = load i8**, i8*** %.reg2mem60, align 8
  %.reload152 = load i1, i1* %.reg2mem151, align 1
  %440 = select i1 %.reload152, i8** %.reload58, i8** %.reload61
  %441 = load i8*, i8** %440, align 8
  indirectbr i8* %441, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"16":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %442 = mul i64 8, 123
  %443 = sub i64 37, 68
  %444 = add i64 126, 94
  %.reload65 = load i8**, i8*** %.reg2mem63, align 8
  %445 = load i8*, i8** %.reload65, align 8
  indirectbr i8* %445, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

codeRepl9:                                        ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast17 = bitcast i64* %.loc10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast17)
  %lt.cast18 = bitcast i64* %.loc11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast18)
  %lt.cast19 = bitcast i64* %.loc12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast19)
  %446 = and i64 %35, -1756871249320748947
  %447 = xor i64 %35, -1
  %448 = or i64 1756871249320748946, %447
  %449 = xor i64 %448, -1
  %450 = and i64 %449, -1
  %451 = add i64 %1, 1888524547268602548
  %452 = and i64 1888524547268602548, %1
  %453 = or i64 1888524547268602548, %1
  %454 = add i64 %452, %453
  %455 = xor i64 %450, %446
  %456 = xor i64 %455, 3018383061501291651
  %457 = xor i64 %456, %454
  %458 = xor i64 %457, %451
  %459 = add i64 %1, -4812358826850066570
  %460 = add i64 5713868224155371812, %1
  %461 = sub i64 %460, -7920517022704113234
  %462 = and i64 %123, 3880579846557075457
  %463 = xor i64 %123, -1
  %464 = or i64 -3880579846557075458, %463
  %465 = xor i64 %464, -1
  %466 = and i64 %465, -1
  %467 = add i64 %3, 103182344233147973
  %468 = add i64 -656856398135722984, %3
  %469 = sub i64 %468, -760038742368870957
  %470 = xor i64 %466, %469
  %471 = xor i64 %470, %467
  %472 = xor i64 %471, %459
  %473 = xor i64 %472, 7979900357801117864
  %474 = xor i64 %473, %462
  %475 = xor i64 %474, %461
  %476 = mul i64 %458, %475
  store i64 %476, i64* %91, align 8
  %477 = call i8** @lk15438226847016391286(i64* %91)
  %478 = load i8*, i8** %477, align 8
  %479 = bitcast i8* %478 to i1 (i1, i64*, i64*, i64*)*
  %.reload153 = load i1, i1* %.reg2mem151, align 1
  %targetBlock13 = call i1 %479(i1 %.reload153, i64* %.loc10, i64* %.loc11, i64* %.loc12)
  %.reload14 = load i64, i64* %.loc10, align 8
  %.reload15 = load i64, i64* %.loc11, align 8
  %.reload16 = load i64, i64* %.loc12, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast17)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast18)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast19)
  %.reload47 = load i8**, i8*** %.reg2mem46, align 8
  %.reload64 = load i8**, i8*** %.reg2mem63, align 8
  %480 = select i1 %targetBlock13, i8** %.reload64, i8** %.reload47
  %481 = load i8*, i8** %480, align 8
  indirectbr i8* %481, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"18":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload68 = load i8**, i8*** %.reg2mem67, align 8
  %482 = load i8*, i8** %.reload68, align 8
  indirectbr i8* %482, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

codeRepl20:                                       ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537072, i64* %91, align 8
  %483 = call i8** @lk15438226847016391286(i64* %91)
  %484 = load i8*, i8** %483, align 8
  %485 = bitcast i8* %484 to void ()*
  call void %485()
  %.reload71 = load i8**, i8*** %.reg2mem70, align 8
  %486 = load i8*, i8** %.reload71, align 8
  indirectbr i8* %486, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"20":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload76 = load i8**, i8*** %.reg2mem74, align 8
  %487 = load i8*, i8** %.reload76, align 8
  %.reload128 = load i32, i32* %.reg2mem126, align 4
  store i32 %.reload128, i32* %.reg2mem161, align 4
  indirectbr i8* %487, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"21":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload162 = load i32, i32* %.reg2mem161, align 4
  store i32 %.reload162, i32* %.reg2mem154, align 4
  %.reload120 = load i32, i32* %.reg2mem118, align 4
  %488 = and i64 %123, 2768847165957761192
  %489 = xor i64 %123, -1
  %490 = xor i64 2768847165957761192, %489
  %491 = and i64 %490, 2768847165957761192
  %492 = or i64 %1, 2255851724867939631
  %493 = xor i64 %1, -1
  %494 = and i64 %493, -8056532267897768488
  %495 = and i64 %1, 8056532267897768487
  %496 = or i64 %494, %495
  %497 = xor i64 -8106734796525299465, %496
  %498 = xor i64 %1, -1
  %499 = or i64 -2255851724867939632, %498
  %500 = xor i64 %499, -1
  %501 = and i64 %500, -1
  %502 = or i64 %497, %501
  %503 = add i64 %45, -7260829048208888753
  %504 = xor i64 -7260829048208888753, %45
  %505 = and i64 -7260829048208888753, %45
  %506 = mul i64 2, %505
  %507 = add i64 %504, %506
  %508 = xor i64 %492, %502
  %509 = xor i64 %508, 8853817599138532889
  %510 = xor i64 %509, %488
  %511 = xor i64 %510, %503
  %512 = xor i64 %511, %507
  %513 = xor i64 %512, %491
  %514 = add i64 %23, -4605134433380287493
  %515 = add i64 -3757199486336451, %23
  %516 = sub i64 %515, 4601377233893951042
  %517 = or i64 %51, -1325868828116693433
  %518 = xor i64 %51, -1
  %519 = and i64 -1325868828116693433, %518
  %520 = add i64 %519, %51
  %521 = or i64 %49, 6779205839393748059
  %522 = and i64 6779205839393748059, %49
  %523 = xor i64 6779205839393748059, %49
  %524 = or i64 %522, %523
  %525 = xor i64 -2892169758677083054, %520
  %526 = xor i64 %525, %524
  %527 = xor i64 %526, %514
  %528 = xor i64 %527, %517
  %529 = xor i64 %528, %516
  %530 = xor i64 %529, %521
  %531 = mul i64 %513, %530
  %532 = trunc i64 %531 to i32
  %533 = srem i32 %.reload120, %532
  %534 = icmp eq i32 %533, 0
  %.reload80 = load i8**, i8*** %.reg2mem79, align 8
  %.reload93 = load i8**, i8*** %.reg2mem92, align 8
  %535 = select i1 %534, i8** %.reload80, i8** %.reload93
  %536 = load i8*, i8** %535, align 8
  indirectbr i8* %536, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

codeRepl21:                                       ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast25 = bitcast i1* %.loc22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  store i64 1996855465712537083, i64* %91, align 8
  %537 = call i8** @lk15438226847016391286(i64* %91)
  %538 = load i8*, i8** %537, align 8
  %539 = bitcast i8* %538 to i1 (i32, i32, i1*)*
  %.reload119 = load i32, i32* %.reg2mem118, align 4
  %.reload127 = load i32, i32* %.reg2mem126, align 4
  %targetBlock23 = call i1 %539(i32 %.reload127, i32 %.reload119, i1* %.loc22)
  %.reload24 = load i1, i1* %.loc22, align 1
  store i1 %.reload24, i1* %.reload24.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  %.reload83 = load i8**, i8*** %.reg2mem82, align 8
  %.reload86 = load i8**, i8*** %.reg2mem85, align 8
  %540 = select i1 %targetBlock23, i8** %.reload86, i8** %.reload83
  %541 = load i8*, i8** %540, align 8
  indirectbr i8* %541, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"23":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %542 = sdiv i64 50, 98
  %543 = sub i64 0, 19
  %544 = mul i64 99, 126
  %545 = add i64 79, 64
  %546 = mul i64 55, 123
  %547 = sdiv i64 33, 19
  %.reload75 = load i8**, i8*** %.reg2mem74, align 8
  %.reload90 = load i8**, i8*** %.reg2mem88, align 8
  %.reload24.reload = load i1, i1* %.reload24.reg2mem, align 1
  %548 = select i1 %.reload24.reload, i8** %.reload90, i8** %.reload75
  %549 = load i8*, i8** %548, align 8
  store i32 0, i32* %.reg2mem161, align 4
  indirectbr i8* %549, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"24":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %550 = sdiv i64 50, 98
  %551 = sub i64 0, 19
  %552 = or i64 %7, 2152676119680921521
  %553 = and i64 2152676119680921521, %7
  %554 = xor i64 2152676119680921521, %7
  %555 = or i64 %553, %554
  %556 = or i64 %126, 2494042025748473713
  %557 = xor i64 %126, -1
  %558 = and i64 2494042025748473713, %557
  %559 = add i64 %558, %126
  %560 = add i64 %13, -9125014343284587138
  %561 = sub i64 0, %13
  %562 = sub i64 -9125014343284587138, %561
  %563 = xor i64 %555, -1290725900701435947
  %564 = xor i64 %563, %560
  %565 = xor i64 %564, %562
  %566 = xor i64 %565, %552
  %567 = xor i64 %566, %559
  %568 = xor i64 %567, %556
  %569 = or i64 %102, 1470357064354512931
  %570 = xor i64 %102, -1
  %571 = and i64 1470357064354512931, %570
  %572 = add i64 %571, %102
  %573 = add i64 %1, 667186397437117089
  %574 = sub i64 0, %1
  %575 = sub i64 667186397437117089, %574
  %576 = xor i64 %569, %573
  %577 = xor i64 %576, %572
  %578 = xor i64 %577, %575
  %579 = xor i64 %578, -3100366547686478970
  %580 = mul i64 %568, %579
  %581 = mul i64 99, %580
  %582 = add i64 44, 99
  %583 = mul i64 55, 123
  %584 = sdiv i64 33, 19
  %.reload89 = load i8**, i8*** %.reg2mem88, align 8
  %585 = load i8*, i8** %.reload89, align 8
  indirectbr i8* %585, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"25":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload97 = load i8**, i8*** %.reg2mem95, align 8
  %586 = load i8*, i8** %.reload97, align 8
  indirectbr i8* %586, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"26":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload96 = load i8**, i8*** %.reg2mem95, align 8
  %587 = load i8*, i8** %.reload96, align 8
  indirectbr i8* %587, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

"27":                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload100 = load i8**, i8*** %.reg2mem99, align 8
  %.reload138 = load i1, i1* %.reg2mem137, align 1
  %588 = select i1 %.reload138, i8** %.reload7, i8** %.reload100
  %589 = load i8*, i8** %588, align 8
  %.reload156 = load i32, i32* %.reg2mem154, align 4
  store i32 %.reload156, i32* %.reg2mem157, align 4
  indirectbr i8* %589, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

codeRepl26:                                       ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537077, i64* %91, align 8
  %590 = call i8** @lk15438226847016391286(i64* %91)
  %591 = load i8*, i8** %590, align 8
  %592 = bitcast i8* %591 to void (i8*, i8*, i8*, i8*)*
  %.reload106 = load i8*, i8** %.reg2mem105, align 8
  %.reload109 = load i8*, i8** %.reg2mem108, align 8
  %.reload112 = load i8*, i8** %.reg2mem111, align 8
  %.reload115 = load i8*, i8** %.reg2mem114, align 8
  call void %592(i8* %.reload115, i8* %.reload112, i8* %.reload109, i8* %.reload106)
  %.reload103 = load i8**, i8*** %.reg2mem102, align 8
  %593 = load i8*, i8** %.reload103, align 8
  indirectbr i8* %593, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %"8", label %"9", label %codeRepl7, label %"11", label %"12", label %"13", label %"14", label %"15", label %"16", label %codeRepl9, label %"18", label %codeRepl20, label %"20", label %"21", label %codeRepl21, label %"23", label %"24", label %"25", label %"26", label %"27", label %codeRepl26, label %.ret]

.ret:                                             ; preds = %codeRepl26, %"27", %"26", %"25", %"24", %"23", %codeRepl21, %"21", %"20", %codeRepl20, %"18", %codeRepl9, %"16", %"15", %"14", %"13", %"12", %"11", %codeRepl7, %"9", %"8", %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload155 = load i32, i32* %.reg2mem154, align 4
  ret i32 %.reload155
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

declare i64 @"\01_clock"() local_unnamed_addr #5

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal fastcc i32 @main_loop(float* %0, float* %1, i8* %2, float* %3) unnamed_addr #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h11804894491772278134(i64 595012113)
  %6 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %5
  store i8* blockaddress(@main_loop, %loopEnd), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012103)
  %8 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %7
  store i8* blockaddress(@main_loop, %defaultSwitchBasicBlock), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012116)
  %10 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %9
  store i8* blockaddress(@main_loop, %BogusBasicBlock), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012155)
  %12 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %11
  store i8* blockaddress(@main_loop, %7850), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012153)
  %14 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %13
  store i8* blockaddress(@main_loop, %7737), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012118)
  %16 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %15
  store i8* blockaddress(@main_loop, %7614), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012139)
  %18 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %17
  store i8* blockaddress(@main_loop, %7435), i8** %18, align 8
  %19 = call i64 @h11804894491772278134(i64 595012096)
  %20 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %19
  store i8* blockaddress(@main_loop, %7256), i8** %20, align 8
  %21 = call i64 @h11804894491772278134(i64 595012127)
  %22 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %21
  store i8* blockaddress(@main_loop, %codeRepl124), i8** %22, align 8
  %23 = call i64 @h11804894491772278134(i64 595012107)
  %24 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %23
  store i8* blockaddress(@main_loop, %6660), i8** %24, align 8
  %25 = call i64 @h11804894491772278134(i64 595012125)
  %26 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %25
  store i8* blockaddress(@main_loop, %codeRepl80), i8** %26, align 8
  %27 = call i64 @h11804894491772278134(i64 595012115)
  %28 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %27
  store i8* blockaddress(@main_loop, %6421), i8** %28, align 8
  %29 = call i64 @h11804894491772278134(i64 595012149)
  %30 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %29
  store i8* blockaddress(@main_loop, %5890), i8** %30, align 8
  %31 = call i64 @h11804894491772278134(i64 595012151)
  %32 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %31
  store i8* blockaddress(@main_loop, %594), i8** %32, align 8
  %33 = call i64 @h11804894491772278134(i64 595012131)
  %34 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %33
  store i8* blockaddress(@main_loop, %4985), i8** %34, align 8
  %35 = call i64 @h11804894491772278134(i64 595012161)
  %36 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %35
  store i8* blockaddress(@main_loop, %5418), i8** %36, align 8
  %37 = call i64 @h11804894491772278134(i64 595012111)
  %38 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %37
  store i8* blockaddress(@main_loop, %5097), i8** %38, align 8
  %39 = call i64 @h11804894491772278134(i64 595012145)
  %40 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %39
  store i8* blockaddress(@main_loop, %5005), i8** %40, align 8
  %41 = call i64 @h11804894491772278134(i64 595012140)
  %42 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %41
  store i8* blockaddress(@main_loop, %codeRepl19), i8** %42, align 8
  %43 = call i64 @h11804894491772278134(i64 595012137)
  %44 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %43
  store i8* blockaddress(@main_loop, %4918), i8** %44, align 8
  %45 = call i64 @h11804894491772278134(i64 595012119)
  %46 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %45
  store i8* blockaddress(@main_loop, %codeRepl90), i8** %46, align 8
  %47 = call i64 @h11804894491772278134(i64 595012156)
  %48 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %47
  store i8* blockaddress(@main_loop, %4471), i8** %48, align 8
  %49 = call i64 @h11804894491772278134(i64 595012150)
  %50 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %49
  store i8* blockaddress(@main_loop, %4012), i8** %50, align 8
  %51 = call i64 @h11804894491772278134(i64 595012146)
  %52 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %51
  store i8* blockaddress(@main_loop, %codeRepl48), i8** %52, align 8
  %53 = call i64 @h11804894491772278134(i64 595012154)
  %54 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %53
  store i8* blockaddress(@main_loop, %.loopexit), i8** %54, align 8
  %55 = call i64 @h11804894491772278134(i64 595012126)
  %56 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %55
  store i8* blockaddress(@main_loop, %codeRepl2), i8** %56, align 8
  %57 = call i64 @h11804894491772278134(i64 595012099)
  %58 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %57
  store i8* blockaddress(@main_loop, %3828), i8** %58, align 8
  %59 = call i64 @h11804894491772278134(i64 595012109)
  %60 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %59
  store i8* blockaddress(@main_loop, %2282), i8** %60, align 8
  %61 = call i64 @h11804894491772278134(i64 595012158)
  %62 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %61
  store i8* blockaddress(@main_loop, %5197), i8** %62, align 8
  %63 = call i64 @h11804894491772278134(i64 595012148)
  %64 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %63
  store i8* blockaddress(@main_loop, %3792), i8** %64, align 8
  %65 = call i64 @h11804894491772278134(i64 595012165)
  %66 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %65
  store i8* blockaddress(@main_loop, %6123), i8** %66, align 8
  %67 = call i64 @h11804894491772278134(i64 595012105)
  %68 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %67
  store i8* blockaddress(@main_loop, %3261), i8** %68, align 8
  %69 = call i64 @h11804894491772278134(i64 595012124)
  %70 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %69
  store i8* blockaddress(@main_loop, %3618), i8** %70, align 8
  %71 = call i64 @h11804894491772278134(i64 595012143)
  %72 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %71
  store i8* blockaddress(@main_loop, %3407), i8** %72, align 8
  %73 = call i64 @h11804894491772278134(i64 595012132)
  %74 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %73
  store i8* blockaddress(@main_loop, %3380), i8** %74, align 8
  %75 = call i64 @h11804894491772278134(i64 595012106)
  %76 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %75
  store i8* blockaddress(@main_loop, %6241), i8** %76, align 8
  %77 = call i64 @h11804894491772278134(i64 595012157)
  %78 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %77
  store i8* blockaddress(@main_loop, %3078), i8** %78, align 8
  %79 = call i64 @h11804894491772278134(i64 595012112)
  %80 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %79
  store i8* blockaddress(@main_loop, %2086), i8** %80, align 8
  %81 = call i64 @h11804894491772278134(i64 595012101)
  %82 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %81
  store i8* blockaddress(@main_loop, %3016), i8** %82, align 8
  %83 = call i64 @h11804894491772278134(i64 595012133)
  %84 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %83
  store i8* blockaddress(@main_loop, %2941), i8** %84, align 8
  %85 = call i64 @h11804894491772278134(i64 595012134)
  %86 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %85
  store i8* blockaddress(@main_loop, %2833), i8** %86, align 8
  %87 = call i64 @h11804894491772278134(i64 595012104)
  %88 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %87
  store i8* blockaddress(@main_loop, %codeRepl49), i8** %88, align 8
  %89 = call i64 @h11804894491772278134(i64 595012114)
  %90 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %89
  store i8* blockaddress(@main_loop, %2770), i8** %90, align 8
  %91 = call i64 @h11804894491772278134(i64 595012141)
  %92 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %91
  store i8* blockaddress(@main_loop, %7352), i8** %92, align 8
  %93 = call i64 @h11804894491772278134(i64 595012136)
  %94 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %93
  store i8* blockaddress(@main_loop, %3322), i8** %94, align 8
  %95 = call i64 @h11804894491772278134(i64 595012152)
  %96 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %95
  store i8* blockaddress(@main_loop, %codeRepl1), i8** %96, align 8
  %97 = call i64 @h11804894491772278134(i64 595012128)
  %98 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %97
  store i8* blockaddress(@main_loop, %2513), i8** %98, align 8
  %99 = call i64 @h11804894491772278134(i64 595012129)
  %100 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %99
  store i8* blockaddress(@main_loop, %1407), i8** %100, align 8
  %101 = call i64 @h11804894491772278134(i64 595012110)
  %102 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %101
  store i8* blockaddress(@main_loop, %codeRepl), i8** %102, align 8
  %103 = call i64 @h11804894491772278134(i64 595012138)
  %104 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %103
  store i8* blockaddress(@main_loop, %EntryBasicBlockSplit), i8** %104, align 8
  %105 = call i64 @h11804894491772278134(i64 595012130)
  %106 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %105
  store i8* blockaddress(@main_loop, %1772), i8** %106, align 8
  %107 = call i64 @h11804894491772278134(i64 595012100)
  %108 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %107
  store i8* blockaddress(@main_loop, %1922), i8** %108, align 8
  %109 = call i64 @h11804894491772278134(i64 595012098)
  %110 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %109
  store i8* blockaddress(@main_loop, %6932), i8** %110, align 8
  %111 = call i64 @h11804894491772278134(i64 595012162)
  %112 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %111
  store i8* blockaddress(@main_loop, %.preheader), i8** %112, align 8
  %113 = call i64 @h11804894491772278134(i64 595012123)
  %114 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %113
  store i8* blockaddress(@main_loop, %1240), i8** %114, align 8
  %115 = call i64 @h11804894491772278134(i64 595012160)
  %116 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %115
  store i8* blockaddress(@main_loop, %502), i8** %116, align 8
  %117 = call i64 @h11804894491772278134(i64 595012163)
  %118 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %117
  store i8* blockaddress(@main_loop, %1869), i8** %118, align 8
  %119 = call i64 @h11804894491772278134(i64 595012102)
  %120 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %119
  store i8* blockaddress(@main_loop, %1346), i8** %120, align 8
  %121 = call i64 @h11804894491772278134(i64 595012097)
  %122 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %121
  store i8* blockaddress(@main_loop, %1073), i8** %122, align 8
  %123 = call i64 @h11804894491772278134(i64 595012147)
  %124 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %123
  store i8* blockaddress(@main_loop, %405), i8** %124, align 8
  %125 = call i64 @h11804894491772278134(i64 595012122)
  %126 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %125
  store i8* blockaddress(@main_loop, %557), i8** %126, align 8
  %127 = call i64 @h11804894491772278134(i64 595012120)
  %128 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %127
  store i8* blockaddress(@main_loop, %4527), i8** %128, align 8
  %129 = call i64 @h11804894491772278134(i64 595012144)
  %130 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %129
  store i8* blockaddress(@main_loop, %1204), i8** %130, align 8
  %131 = call i64 @h11804894491772278134(i64 595012142)
  %132 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %131
  store i8* blockaddress(@main_loop, %7187), i8** %132, align 8
  %133 = call i64 @h11804894491772278134(i64 595012159)
  %134 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %133
  store i8* blockaddress(@main_loop, %4397), i8** %134, align 8
  %135 = call i64 @h11804894491772278134(i64 595012108)
  %136 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %135
  store i8* blockaddress(@main_loop, %763), i8** %136, align 8
  %137 = call i64 @h11804894491772278134(i64 595012135)
  %138 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %137
  store i8* blockaddress(@main_loop, %2628), i8** %138, align 8
  %139 = call i64 @h11804894491772278134(i64 595012121)
  %140 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %139
  store i8* blockaddress(@main_loop, %3432), i8** %140, align 8
  %141 = call i64 @h11804894491772278134(i64 595012117)
  %142 = getelementptr [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %141
  store i8* blockaddress(@main_loop, %loopStart), i8** %142, align 8
  %.reg2mem211 = alloca i32, align 4
  %.reg2mem209 = alloca i1, align 1
  %.reg2mem207 = alloca i32, align 4
  %.reg2mem205 = alloca i32, align 4
  %.reg2mem203 = alloca i32, align 4
  %.reg2mem201 = alloca i32, align 4
  %.reg2mem199 = alloca i1, align 1
  %.reg2mem197 = alloca i32, align 4
  %.reg2mem195 = alloca i1, align 1
  %.reg2mem193 = alloca i1, align 1
  %.reg2mem191 = alloca i1, align 1
  %.reg2mem189 = alloca i1, align 1
  %.reg2mem187 = alloca i1, align 1
  %.reg2mem185 = alloca i1, align 1
  %.reg2mem183 = alloca i32, align 4
  %.ph.reg2mem181 = alloca i32, align 4
  %.reg2mem179 = alloca i1, align 1
  %.reg2mem177 = alloca double, align 8
  %.reg2mem175 = alloca i32, align 4
  %.reg2mem173 = alloca i1, align 1
  %.reg2mem171 = alloca i32, align 4
  %.reg2mem169 = alloca i1, align 1
  %.reg2mem167 = alloca i32, align 4
  %.reg2mem165 = alloca i32, align 4
  %.reg2mem163 = alloca i32, align 4
  %.reg2mem161 = alloca i32, align 4
  %.reg2mem158 = alloca i1, align 1
  %.reg2mem152 = alloca i32, align 4
  %.reg2mem150 = alloca i1, align 1
  %.reg2mem148 = alloca i1, align 1
  %.reg2mem146 = alloca i1, align 1
  %.reg2mem144 = alloca i1, align 1
  %.reg2mem142 = alloca i1, align 1
  %.reg2mem140 = alloca i1, align 1
  %.reg2mem138 = alloca i32, align 4
  %.reg2mem135 = alloca i1, align 1
  %.reg2mem131 = alloca i32, align 4
  %.reg2mem128 = alloca i32, align 4
  %.reg2mem125 = alloca i32, align 4
  %.reg2mem121 = alloca i1, align 1
  %.ph.reg2mem = alloca i32, align 4
  %.reg2mem117 = alloca i1, align 1
  %.reg2mem114 = alloca i1, align 1
  %.reg2mem102 = alloca i1, align 1
  %.reload13.reg2mem = alloca i32, align 4
  %.reload12.reg2mem = alloca i32, align 4
  %.reload11.reg2mem = alloca i32, align 4
  %.reload10.reg2mem = alloca double, align 8
  %.reload9.reg2mem = alloca float, align 4
  %.reg2mem88 = alloca double, align 8
  %.reg2mem84 = alloca i32, align 4
  %.reg2mem81 = alloca i1, align 1
  %.reload.reg2mem = alloca i1, align 1
  %.reg2mem78 = alloca i32, align 4
  %.reg2mem75 = alloca i32, align 4
  %.reg2mem56 = alloca i32, align 4
  %.reg2mem53 = alloca i32, align 4
  %.reg2mem50 = alloca i1, align 1
  %.reg2mem48 = alloca i1, align 1
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %lookupTable = alloca [70 x i32], align 4
  %143 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %143, align 4
  %144 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %144, align 4
  %145 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %145, align 4
  %146 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %146, align 4
  %147 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %147, align 4
  %148 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %148, align 4
  %149 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %149, align 4
  %150 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %150, align 4
  %151 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %151, align 4
  %152 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %152, align 4
  %153 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 10
  store i32 7, i32* %153, align 4
  %154 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 11
  store i32 8, i32* %154, align 4
  %155 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 12
  store i32 9, i32* %155, align 4
  %156 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 13
  store i32 10, i32* %156, align 4
  %157 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 14
  store i32 11, i32* %157, align 4
  %158 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 15
  store i32 12, i32* %158, align 4
  %159 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  store i32 13, i32* %159, align 4
  %160 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 17
  store i32 14, i32* %160, align 4
  %161 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  store i32 15, i32* %161, align 4
  %162 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 19
  store i32 16, i32* %162, align 4
  %163 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 20
  store i32 17, i32* %163, align 4
  %164 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 21
  store i32 18, i32* %164, align 4
  %165 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 22
  store i32 19, i32* %165, align 4
  %166 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 23
  store i32 20, i32* %166, align 4
  %167 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 24
  store i32 21, i32* %167, align 4
  %168 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 25
  store i32 22, i32* %168, align 4
  %169 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 26
  store i32 23, i32* %169, align 4
  %170 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 27
  store i32 24, i32* %170, align 4
  %171 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 28
  store i32 25, i32* %171, align 4
  %172 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 29
  store i32 26, i32* %172, align 4
  %173 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 30
  store i32 27, i32* %173, align 4
  %174 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 31
  store i32 28, i32* %174, align 4
  %175 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 32
  store i32 29, i32* %175, align 4
  %176 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 33
  store i32 30, i32* %176, align 4
  %177 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 34
  store i32 31, i32* %177, align 4
  %178 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 35
  store i32 32, i32* %178, align 4
  %179 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  store i32 33, i32* %179, align 4
  %180 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 37
  store i32 34, i32* %180, align 4
  %181 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 38
  store i32 35, i32* %181, align 4
  %182 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 39
  store i32 36, i32* %182, align 4
  %183 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 40
  store i32 37, i32* %183, align 4
  %184 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 41
  store i32 38, i32* %184, align 4
  %185 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 42
  store i32 39, i32* %185, align 4
  %186 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 43
  store i32 40, i32* %186, align 4
  %187 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 44
  store i32 41, i32* %187, align 4
  %188 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 45
  store i32 42, i32* %188, align 4
  %189 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 46
  store i32 43, i32* %189, align 4
  %190 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 47
  store i32 44, i32* %190, align 4
  %191 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 48
  store i32 45, i32* %191, align 4
  %192 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 49
  store i32 46, i32* %192, align 4
  %193 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 50
  store i32 47, i32* %193, align 4
  %194 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 51
  store i32 48, i32* %194, align 4
  %195 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 52
  store i32 49, i32* %195, align 4
  %196 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 53
  store i32 50, i32* %196, align 4
  %197 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 54
  store i32 51, i32* %197, align 4
  %198 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 55
  store i32 52, i32* %198, align 4
  %199 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 56
  store i32 53, i32* %199, align 4
  %200 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 57
  store i32 54, i32* %200, align 4
  %201 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 58
  store i32 55, i32* %201, align 4
  %202 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 59
  store i32 56, i32* %202, align 4
  %203 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 60
  store i32 57, i32* %203, align 4
  %204 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 61
  store i32 58, i32* %204, align 4
  %205 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  store i32 59, i32* %205, align 4
  %206 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 63
  store i32 60, i32* %206, align 4
  %207 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 64
  store i32 61, i32* %207, align 4
  %208 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 65
  store i32 62, i32* %208, align 4
  %209 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 66
  store i32 63, i32* %209, align 4
  %210 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 67
  store i32 64, i32* %210, align 4
  %211 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 68
  store i32 65, i32* %211, align 4
  %212 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  store i32 66, i32* %212, align 4
  %213 = alloca i64, align 8
  %214 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537082, i64* %214, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %215 = load i64, i64* %214, align 8
  %216 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %215
  store i8* bitcast (i32 (i8*, i64, float*, i64)* @clear to i8*), i8** %216, align 8
  %217 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537076, i64* %217, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %218 = load i64, i64* %217, align 8
  %219 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %218
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %219, align 8
  %220 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537086, i64* %220, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %221
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %222, align 8
  %223 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537073, i64* %223, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %224
  store i8* bitcast (i1 (i32, i32, i1*)* @main_loop.extracted to i8*), i8** %225, align 8
  %226 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537077, i64* %226, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %227
  store i8* bitcast (void ()* @main_loop..split to i8*), i8** %228, align 8
  %229 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537075, i64* %229, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %230
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %231, align 8
  %232 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %232, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %233
  store i8* bitcast (i1 (double, i32, float*, double*, i32*, i32*, i32*)* @main_loop..split.17 to i8*), i8** %234, align 8
  %235 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537084, i64* %235, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %236 = load i64, i64* %235, align 8
  %237 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %236
  store i8* bitcast (i1 (i32, i1, i1, i32*, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*)* @main_loop.extracted.18 to i8*), i8** %237, align 8
  %238 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537080, i64* %238, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %239 = load i64, i64* %238, align 8
  %240 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %239
  store i8* bitcast (void ()* @main_loop..split.19 to i8*), i8** %240, align 8
  %241 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537081, i64* %241, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %242 = load i64, i64* %241, align 8
  %243 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %242
  store i8* bitcast (void (i32, i1, i32*, i32*, i32*, i32*, i1*, i1*, i1*, i1*, i1*, i1*)* @main_loop.extracted.20 to i8*), i8** %243, align 8
  %244 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537079, i64* %244, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %245 = load i64, i64* %244, align 8
  %246 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %245
  store i8* bitcast (void (i32*, i32*, i32*)* @main_loop.extracted.21 to i8*), i8** %246, align 8
  %247 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537083, i64* %247, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %248
  store i8* bitcast (void (i32*, i64*, i32*, i64*, i32*, i64*, i64*, i64*, i64*, i64*, i64*)* @main_loop.extracted.22 to i8*), i8** %249, align 8
  %250 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537078, i64* %250, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %251 = load i64, i64* %250, align 8
  %252 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %251
  store i8* bitcast (void ()* @main_loop..split.23 to i8*), i8** %252, align 8
  %253 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537072, i64* %253, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %254
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %255, align 8
  %256 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537087, i64* %256, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %257 = load i64, i64* %256, align 8
  %258 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %257
  store i8* bitcast (i32 (float*, float*, i8*, i64)* @render to i8*), i8** %258, align 8
  %.loc101 = alloca i64, align 8
  %.loc100 = alloca i64, align 8
  %.loc99 = alloca i64, align 8
  %.loc98 = alloca i64, align 8
  %.loc97 = alloca i64, align 8
  %.loc96 = alloca i64, align 8
  %.loc95 = alloca i32, align 4
  %.loc94 = alloca i64, align 8
  %.loc93 = alloca i32, align 4
  %.loc92 = alloca i64, align 8
  %.loc91 = alloca i32, align 4
  %.loc83 = alloca i32, align 4
  %.loc82 = alloca i32, align 4
  %.loc81 = alloca i32, align 4
  %.loc59 = alloca i1, align 1
  %.loc58 = alloca i1, align 1
  %.loc57 = alloca i1, align 1
  %.loc56 = alloca i1, align 1
  %.loc55 = alloca i1, align 1
  %.loc54 = alloca i1, align 1
  %.loc53 = alloca i32, align 4
  %.loc52 = alloca i32, align 4
  %.loc51 = alloca i32, align 4
  %.loc50 = alloca i32, align 4
  %.loc28 = alloca i1, align 1
  %.loc27 = alloca i1, align 1
  %.loc26 = alloca i1, align 1
  %.loc25 = alloca i1, align 1
  %.loc24 = alloca i1, align 1
  %.loc23 = alloca i64, align 8
  %.loc22 = alloca i1, align 1
  %.loc21 = alloca i64, align 8
  %.loc20 = alloca i32, align 4
  %.loc7 = alloca i32, align 4
  %.loc6 = alloca i32, align 4
  %.loc5 = alloca i32, align 4
  %.loc4 = alloca double, align 8
  %.loc3 = alloca float, align 4
  %.loc = alloca i1, align 1
  store i64 1996855465712537082, i64* %213, align 8
  %259 = call i8** @lk14802275186744156584(i64* %213)
  %260 = load i8*, i8** %259, align 8
  %261 = bitcast i8* %260 to i32 (i8*, i64, float*, i64)*
  %262 = call i32 %261(i8* %2, i64 1760, float* %3, i64 7040)
  store i32 %262, i32* %.reg2mem, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012117, i32* %4, align 4
  %263 = call i8** @bf14862898971591998804(i32* %4)
  %264 = load i8*, i8** %263, align 8
  indirectbr i8* %264, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %405
    i32 2, label %502
    i32 3, label %557
    i32 4, label %594
    i32 5, label %763
    i32 6, label %1073
    i32 7, label %1204
    i32 8, label %1240
    i32 9, label %1346
    i32 10, label %1407
    i32 11, label %.preheader
    i32 12, label %1772
    i32 13, label %1869
    i32 14, label %1922
    i32 15, label %codeRepl
    i32 16, label %2086
    i32 17, label %2282
    i32 18, label %2513
    i32 19, label %codeRepl1
    i32 20, label %2628
    i32 21, label %2770
    i32 22, label %2833
    i32 23, label %2941
    i32 24, label %3016
    i32 25, label %3078
    i32 26, label %3261
    i32 27, label %3322
    i32 28, label %3380
    i32 29, label %3407
    i32 30, label %3432
    i32 31, label %3618
    i32 32, label %3792
    i32 33, label %3828
    i32 34, label %codeRepl2
    i32 35, label %4012
    i32 36, label %4397
    i32 37, label %4471
    i32 38, label %4527
    i32 39, label %4918
    i32 40, label %4985
    i32 41, label %5005
    i32 42, label %5097
    i32 43, label %.loopexit
    i32 44, label %5197
    i32 45, label %5418
    i32 46, label %codeRepl19
    i32 47, label %5890
    i32 48, label %codeRepl48
    i32 49, label %codeRepl49
    i32 50, label %6123
    i32 51, label %6241
    i32 52, label %codeRepl80
    i32 53, label %6421
    i32 54, label %codeRepl90
    i32 55, label %6660
    i32 56, label %6932
    i32 57, label %codeRepl124
    i32 58, label %7187
    i32 59, label %7256
    i32 60, label %7352
    i32 61, label %7435
    i32 62, label %7614
    i32 63, label %7737
    i32 64, label %7850
    i32 65, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload14 = load i32, i32* %.reg2mem, align 4
  %265 = icmp eq i32 %.reload14, 0
  %266 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 3
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %267, %269
  %271 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 34
  %274 = load i32, i32* %273, align 4
  %275 = xor i32 %272, %274
  %276 = and i32 %272, %274
  %277 = or i64 %11, -6339493376930153451
  %278 = xor i64 %11, -1
  %279 = and i64 %278, 7270675524762489805
  %280 = and i64 %11, -7270675524762489806
  %281 = or i64 %279, %280
  %282 = xor i64 -3683037936464777256, %281
  %283 = xor i64 %11, -1
  %284 = or i64 6339493376930153450, %283
  %285 = xor i64 %284, -1
  %286 = and i64 %285, -1
  %287 = or i64 %282, %286
  %288 = add i64 %233, 6389898757450193053
  %289 = and i64 6389898757450193053, %233
  %290 = or i64 6389898757450193053, %233
  %291 = add i64 %289, %290
  %292 = xor i64 %287, 9206412228550408065
  %293 = xor i64 %292, %291
  %294 = xor i64 %293, %277
  %295 = xor i64 %294, %288
  %296 = or i64 %25, -7401596915270236192
  %297 = xor i64 %25, -1
  %298 = and i64 %297, 8896277120193579299
  %299 = and i64 %25, -8896277120193579300
  %300 = or i64 %298, %299
  %301 = xor i64 -2144326700435894589, %300
  %302 = xor i64 %25, -1
  %303 = or i64 7401596915270236191, %302
  %304 = xor i64 %303, -1
  %305 = and i64 %304, -1
  %306 = or i64 %301, %305
  %307 = add i64 %221, -6115833509169588733
  %308 = xor i64 -6115833509169588733, %221
  %309 = and i64 -6115833509169588733, %221
  %310 = mul i64 2, %309
  %311 = add i64 %308, %310
  %312 = xor i64 %307, %306
  %313 = xor i64 %312, %311
  %314 = xor i64 %313, %296
  %315 = xor i64 %314, -8446630180718243582
  %316 = mul i64 %295, %315
  %317 = trunc i64 %316 to i32
  %318 = mul i32 %317, %276
  %319 = add i32 %275, %318
  %320 = select i1 %265, i32 %270, i32 %319
  store i32 %320, i32* %dispatcher, align 4
  %.reload2 = load i32, i32* %.reg2mem, align 4
  store i32 %.reload2, i32* %.reg2mem211, align 4
  %321 = load i8*, i8** %114, align 8
  %322 = load i8, i8* %321, align 1
  %323 = mul i8 %322, 2
  %324 = mul i8 %322, 2
  %325 = add i8 2, %324
  %326 = mul i8 %323, %325
  %327 = srem i8 %326, 4
  %328 = icmp eq i8 %327, 0
  %329 = mul i8 %322, %322
  %330 = xor i8 %329, %322
  %331 = and i8 %329, %322
  %332 = mul i8 2, %331
  %333 = add i8 %330, %332
  %334 = mul i8 39, %333
  %335 = add i8 23, %334
  %336 = add i64 %245, -2762947888152815881
  %337 = add i64 6865093636653015020, %245
  %338 = add i64 %337, 8818702548903720715
  %339 = add i64 %129, -7936685210311932107
  %340 = xor i64 -7936685210311932107, %129
  %341 = and i64 -7936685210311932107, %129
  %342 = mul i64 2, %341
  %343 = add i64 %340, %342
  %344 = xor i64 %338, %339
  %345 = xor i64 %344, 5018299104137613259
  %346 = xor i64 %345, %343
  %347 = xor i64 %346, %336
  %348 = and i64 %77, -6487887570236731033
  %349 = xor i64 %77, -1
  %350 = xor i64 -6487887570236731033, %349
  %351 = and i64 %350, -6487887570236731033
  %352 = add i64 %17, 5534264541329940449
  %353 = add i64 5565730558697163792, %17
  %354 = sub i64 %353, 31466017367223343
  %355 = xor i64 %348, %351
  %356 = xor i64 %355, %352
  %357 = xor i64 %356, 495325340992413925
  %358 = xor i64 %357, %354
  %359 = mul i64 %347, %358
  %360 = trunc i64 %359 to i8
  %361 = mul i8 %360, %335
  %362 = add i8 111, %361
  %363 = srem i8 %362, 2
  %364 = icmp eq i8 %363, 0
  %365 = and i1 %328, %364
  %366 = xor i1 %328, %364
  %367 = or i1 %365, %366
  %368 = select i1 %367, i32 595012122, i32 595012113
  %369 = or i32 %368, 11
  %370 = and i64 %25, 4387640673566406574
  %371 = or i64 -4387640673566406575, %25
  %372 = sub i64 %371, -4387640673566406575
  %373 = and i64 %236, 1172270313452147142
  %374 = or i64 -1172270313452147143, %236
  %375 = sub i64 %374, -1172270313452147143
  %376 = xor i64 %375, %372
  %377 = xor i64 %376, -8201864811048049105
  %378 = xor i64 %377, %373
  %379 = xor i64 %378, %370
  %380 = or i64 %17, -3730115871282305450
  %381 = xor i64 %17, -1
  %382 = and i64 -3730115871282305450, %381
  %383 = add i64 %382, %17
  %384 = or i64 %115, 1993703261741787769
  %385 = and i64 1993703261741787769, %115
  %386 = xor i64 1993703261741787769, %115
  %387 = or i64 %385, %386
  %388 = and i64 %109, -4787749223766452380
  %389 = xor i64 %109, -1
  %390 = or i64 4787749223766452379, %389
  %391 = xor i64 %390, -1
  %392 = and i64 %391, -1
  %393 = xor i64 %388, %384
  %394 = xor i64 %393, %380
  %395 = xor i64 %394, -4767087106162235163
  %396 = xor i64 %395, %387
  %397 = xor i64 %396, %392
  %398 = xor i64 %397, %383
  %399 = mul i64 %379, %398
  %400 = trunc i64 %399 to i32
  %401 = and i32 %368, %400
  %402 = sub i32 %369, %401
  store i32 %402, i32* %4, align 4
  %403 = call i8** @bf14862898971591998804(i32* %4)
  %404 = load i8*, i8** %403, align 8
  indirectbr i8* %404, [label %loopEnd, label %EntryBasicBlockSplit]

405:                                              ; preds = %405, %loopStart
  %.reload8 = load i32, i32* %.reg2mem, align 4
  %406 = srem i32 %.reload8, 2
  store i32 %406, i32* %.reg2mem15, align 4
  %.reload17 = load i32, i32* %.reg2mem15, align 4
  %407 = add i64 %227, 3284813372739277822
  %408 = sub i64 0, %227
  %409 = add i64 -3284813372739277822, %408
  %410 = sub i64 0, %409
  %411 = and i64 %109, 2304236308952804134
  %412 = or i64 -2304236308952804135, %109
  %413 = sub i64 %412, -2304236308952804135
  %414 = xor i64 %407, %410
  %415 = xor i64 %414, %413
  %416 = xor i64 %415, -8492850511125425107
  %417 = xor i64 %416, %411
  %418 = or i64 %67, -4614393939921241103
  %419 = xor i64 %67, -1
  %420 = and i64 %419, -3117987785313781180
  %421 = and i64 %67, 3117987785313781179
  %422 = or i64 %420, %421
  %423 = xor i64 7731782851617227189, %422
  %424 = xor i64 %67, -1
  %425 = or i64 4614393939921241102, %424
  %426 = xor i64 %425, -1
  %427 = and i64 %426, -1
  %428 = or i64 %423, %427
  %429 = add i64 %233, -554134623580614754
  %430 = add i64 -7533141247462897685, %233
  %431 = sub i64 %430, -6979006623882282931
  %432 = xor i64 %431, 0
  %433 = xor i64 %432, %418
  %434 = xor i64 %433, %429
  %435 = xor i64 %434, %428
  %436 = mul i64 %417, %435
  %437 = trunc i64 %436 to i32
  %438 = icmp eq i32 %.reload17, %437
  %439 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 5
  %440 = load i32, i32* %439, align 4
  %441 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 3
  %442 = load i32, i32* %441, align 4
  %443 = add i32 %440, %442
  %444 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 5
  %445 = load i32, i32* %444, align 4
  %446 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  %447 = load i32, i32* %446, align 4
  %448 = add i32 %445, %447
  %449 = select i1 %438, i32 %443, i32 %448
  store i32 %449, i32* %dispatcher, align 4
  %450 = load i8*, i8** %98, align 8
  %451 = load i8, i8* %450, align 1
  %452 = mul i8 %451, %451
  %453 = add i8 %452, %451
  %454 = mul i8 %453, 3
  %455 = srem i8 %454, 2
  %456 = icmp eq i8 %455, 0
  %457 = mul i8 %451, %451
  %458 = add i8 %457, %451
  %459 = srem i8 %458, 2
  %460 = icmp eq i8 %459, 0
  %461 = and i1 %456, %460
  %462 = select i1 %461, i32 595012114, i32 595012113
  %463 = xor i32 %462, -1
  %464 = and i32 %463, 2208750
  %465 = and i32 %462, -2208751
  %466 = or i32 %464, %465
  %467 = add i64 %135, -1765890898878661262
  %468 = sub i64 0, %135
  %469 = sub i64 -1765890898878661262, %468
  %470 = or i64 %133, 5059314652376149701
  %471 = and i64 5059314652376149701, %133
  %472 = xor i64 5059314652376149701, %133
  %473 = or i64 %471, %472
  %474 = xor i64 %473, %469
  %475 = xor i64 %474, %467
  %476 = xor i64 %475, %470
  %477 = xor i64 %476, 1764524248981508841
  %478 = and i64 %221, 317120705280283255
  %479 = xor i64 %221, -1
  %480 = xor i64 317120705280283255, %479
  %481 = and i64 %480, 317120705280283255
  %482 = add i64 %45, -1522900558536564163
  %483 = xor i64 -1522900558536564163, %45
  %484 = and i64 -1522900558536564163, %45
  %485 = mul i64 2, %484
  %486 = add i64 %483, %485
  %487 = and i64 %129, 6575637710136143069
  %488 = xor i64 %129, -1
  %489 = xor i64 6575637710136143069, %488
  %490 = and i64 %489, 6575637710136143069
  %491 = xor i64 %478, -5680452906755125659
  %492 = xor i64 %491, %486
  %493 = xor i64 %492, %487
  %494 = xor i64 %493, %482
  %495 = xor i64 %494, %481
  %496 = xor i64 %495, %490
  %497 = mul i64 %477, %496
  %498 = trunc i64 %497 to i32
  %499 = xor i32 %466, %498
  store i32 %499, i32* %4, align 4
  %500 = call i8** @bf14862898971591998804(i32* %4)
  %501 = load i8*, i8** %500, align 8
  indirectbr i8* %501, [label %loopEnd, label %405]

502:                                              ; preds = %502, %loopStart
  store i64 1996855465712537076, i64* %213, align 8
  %503 = call i8** @lk14802275186744156584(i64* %213)
  %504 = load i8*, i8** %503, align 8
  %505 = bitcast i8* %504 to i32 (float, float*, float*, i8*, float*)*
  %506 = call i32 %505(float 0.000000e+00, float* %0, float* %1, i8* %2, float* %3)
  %507 = icmp eq i32 %506, 0
  %508 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 7
  %509 = load i32, i32* %508, align 4
  %510 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %511 = load i32, i32* %510, align 4
  %512 = srem i32 %509, %511
  store i32 %512, i32* %dispatcher, align 4
  store i32 %506, i32* %.reg2mem171, align 4
  store i1 %507, i1* %.reg2mem173, align 1
  %513 = load i8*, i8** %108, align 8
  %514 = load i8, i8* %513, align 1
  %515 = xor i8 %514, -1
  %516 = or i8 %515, 1
  %517 = xor i8 %514, -1
  %518 = sub i8 %516, %517
  %519 = icmp eq i8 %518, 1
  %520 = mul i8 %514, %514
  %521 = add i8 %520, %514
  %522 = srem i8 %521, 2
  %523 = icmp eq i8 %522, 0
  %524 = and i1 %519, %523
  %525 = xor i1 %519, %523
  %526 = or i1 %524, %525
  %527 = select i1 %526, i32 595012102, i32 595012113
  %528 = xor i32 %527, -1984157223
  %529 = add i64 %13, -4651109522174144507
  %530 = sub i64 0, %13
  %531 = sub i64 -4651109522174144507, %530
  %532 = and i64 %95, -2142745383670476341
  %533 = xor i64 %95, -1
  %534 = xor i64 -2142745383670476341, %533
  %535 = and i64 %534, -2142745383670476341
  %536 = xor i64 535503102441638253, %535
  %537 = xor i64 %536, %529
  %538 = xor i64 %537, %531
  %539 = xor i64 %538, %532
  %540 = add i64 %131, 7818608695531893238
  %541 = add i64 1655418225517780683, %131
  %542 = sub i64 %541, -6163190470014112555
  %543 = and i64 %248, 6759492241295364461
  %544 = xor i64 %248, -1
  %545 = or i64 -6759492241295364462, %544
  %546 = xor i64 %545, -1
  %547 = and i64 %546, -1
  %548 = xor i64 %547, %542
  %549 = xor i64 %548, 9097838210782768710
  %550 = xor i64 %549, %540
  %551 = xor i64 %550, %543
  %552 = mul i64 %539, %551
  %553 = trunc i64 %552 to i32
  %554 = xor i32 %528, %553
  store i32 %554, i32* %4, align 4
  %555 = call i8** @bf14862898971591998804(i32* %4)
  %556 = load i8*, i8** %555, align 8
  indirectbr i8* %556, [label %loopEnd, label %502]

557:                                              ; preds = %557, %loopStart
  store i64 1996855465712537086, i64* %213, align 8
  %558 = call i8** @lk14802275186744156584(i64* %213)
  %559 = load i8*, i8** %558, align 8
  %560 = bitcast i8* %559 to i32 (float, float*, float*, i8*, float*)*
  %561 = call i32 %560(float 0.000000e+00, float* %0, float* %1, i8* %2, float* %3)
  %562 = icmp eq i32 %561, 0
  %563 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 6
  %564 = load i32, i32* %563, align 4
  %565 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  %566 = load i32, i32* %565, align 4
  %567 = add i32 %564, %566
  store i32 %567, i32* %dispatcher, align 4
  store i32 %561, i32* %.reg2mem171, align 4
  store i1 %562, i1* %.reg2mem173, align 1
  %568 = load i8*, i8** %76, align 8
  %569 = load i8, i8* %568, align 1
  %570 = mul i8 %569, 2
  %571 = mul i8 %569, 2
  %572 = xor i8 2, %571
  %573 = and i8 2, %571
  %574 = mul i8 2, %573
  %575 = add i8 %572, %574
  %576 = mul i8 39, %575
  %577 = add i8 23, %576
  %578 = mul i8 -105, %577
  %579 = add i8 111, %578
  %580 = mul i8 %570, %579
  %581 = srem i8 %580, 4
  %582 = icmp eq i8 %581, 0
  %583 = mul i8 %569, %569
  %584 = add i8 %583, %569
  %585 = srem i8 %584, 2
  %586 = icmp eq i8 %585, 0
  %587 = xor i1 %586, true
  %588 = and i1 %582, %587
  %589 = add i1 %588, %586
  %590 = select i1 %589, i32 595012107, i32 595012113
  %591 = xor i32 %590, 26
  store i32 %591, i32* %4, align 4
  %592 = call i8** @bf14862898971591998804(i32* %4)
  %593 = load i8*, i8** %592, align 8
  indirectbr i8* %593, [label %loopEnd, label %557]

594:                                              ; preds = %594, %loopStart
  %.reload174 = load i1, i1* %.reg2mem173, align 1
  %.reload172 = load i32, i32* %.reg2mem171, align 4
  store i1 %.reload174, i1* %.reg2mem48, align 1
  store i32 %.reload172, i32* %.reg2mem18, align 4
  %.reload7 = load i32, i32* %.reg2mem, align 4
  %595 = and i64 %125, -7792571876937670843
  %596 = or i64 7792571876937670842, %125
  %597 = sub i64 %596, 7792571876937670842
  %598 = or i64 %239, -2538727199113020948
  %599 = and i64 -2538727199113020948, %239
  %600 = xor i64 -2538727199113020948, %239
  %601 = or i64 %599, %600
  %602 = and i64 %123, -6818015179718402378
  %603 = xor i64 %123, -1
  %604 = xor i64 -6818015179718402378, %603
  %605 = and i64 %604, -6818015179718402378
  %606 = xor i64 %595, %597
  %607 = xor i64 %606, %598
  %608 = xor i64 %607, -1707668103315453187
  %609 = xor i64 %608, %601
  %610 = xor i64 %609, %602
  %611 = xor i64 %610, %605
  %612 = add i64 %13, 7854346156865217006
  %613 = sub i64 0, %13
  %614 = add i64 -7854346156865217006, %613
  %615 = sub i64 0, %614
  %616 = add i64 %49, 7690040777483178217
  %617 = sub i64 0, %49
  %618 = add i64 -7690040777483178217, %617
  %619 = sub i64 0, %618
  %620 = xor i64 %619, %615
  %621 = xor i64 %620, %616
  %622 = xor i64 %621, %612
  %623 = xor i64 %622, 2968164213893088426
  %624 = mul i64 %611, %623
  %625 = trunc i64 %624 to i32
  %626 = srem i32 %.reload7, %625
  %627 = icmp eq i32 %626, 0
  %628 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 8
  %629 = load i32, i32* %628, align 4
  %630 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %631 = load i32, i32* %630, align 4
  %632 = srem i32 %629, %631
  %633 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 12
  %634 = load i32, i32* %633, align 4
  %635 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %636 = load i32, i32* %635, align 4
  %637 = srem i32 %634, %636
  %638 = select i1 %627, i32 %632, i32 %637
  store i32 %638, i32* %dispatcher, align 4
  %639 = load i8*, i8** %32, align 8
  %640 = load i8, i8* %639, align 1
  %641 = mul i8 %640, 2
  %642 = mul i8 %640, 2
  %643 = add i8 2, %642
  %644 = mul i8 %641, %643
  %645 = srem i8 %644, 4
  %646 = and i64 %127, 228611761821460735
  %647 = xor i64 %127, -1
  %648 = or i64 -228611761821460736, %647
  %649 = xor i64 %648, -1
  %650 = and i64 %649, -1
  %651 = and i64 %93, -4288408541028120747
  %652 = xor i64 %93, -1
  %653 = or i64 4288408541028120746, %652
  %654 = xor i64 %653, -1
  %655 = and i64 %654, -1
  %656 = xor i64 %646, 1129598897395102705
  %657 = xor i64 %656, %651
  %658 = xor i64 %657, %655
  %659 = xor i64 %658, %650
  %660 = or i64 %236, 2311750232157057962
  %661 = xor i64 %236, -1
  %662 = and i64 2311750232157057962, %661
  %663 = add i64 %662, %236
  %664 = add i64 %221, -2482399460946750815
  %665 = and i64 -2482399460946750815, %221
  %666 = or i64 -2482399460946750815, %221
  %667 = add i64 %665, %666
  %668 = add i64 %11, -3136510039278407861
  %669 = add i64 -8651369124914322993, %11
  %670 = sub i64 %669, -5514859085635915132
  %671 = xor i64 %663, %667
  %672 = xor i64 %671, 0
  %673 = xor i64 %672, %664
  %674 = xor i64 %673, %670
  %675 = xor i64 %674, %668
  %676 = xor i64 %675, %660
  %677 = mul i64 %659, %676
  %678 = trunc i64 %677 to i8
  %679 = icmp eq i8 %645, %678
  %680 = mul i8 %640, %640
  %681 = add i64 %245, -5543824202938165402
  %682 = add i64 8469468367472149607, %245
  %683 = add i64 %682, 4433451503299236607
  %684 = and i64 %65, -2034319707801267203
  %685 = xor i64 %65, -1
  %686 = xor i64 -2034319707801267203, %685
  %687 = and i64 %686, -2034319707801267203
  %688 = xor i64 %687, %683
  %689 = xor i64 %688, %684
  %690 = xor i64 %689, -5402799528259186107
  %691 = xor i64 %690, %681
  %692 = and i64 %25, -7811454062201220596
  %693 = xor i64 %25, -1
  %694 = or i64 7811454062201220595, %693
  %695 = xor i64 %694, -1
  %696 = and i64 %695, -1
  %697 = or i64 %89, 8016927429568395490
  %698 = and i64 8016927429568395490, %89
  %699 = xor i64 8016927429568395490, %89
  %700 = or i64 %698, %699
  %701 = and i64 %13, -360376460518251362
  %702 = xor i64 %13, -1
  %703 = xor i64 -360376460518251362, %702
  %704 = and i64 %703, -360376460518251362
  %705 = xor i64 %696, %701
  %706 = xor i64 %705, %704
  %707 = xor i64 %706, %692
  %708 = xor i64 %707, %697
  %709 = xor i64 %708, -186485790158013022
  %710 = xor i64 %709, %700
  %711 = mul i64 %691, %710
  %712 = trunc i64 %711 to i8
  %713 = add i8 %680, %712
  %714 = add i8 %713, %640
  %715 = sub i8 %714, -86
  %716 = srem i8 %715, 2
  %717 = icmp eq i8 %716, 0
  %718 = or i1 %679, %717
  %719 = or i64 %123, 619212481652904558
  %720 = xor i64 %123, -1
  %721 = and i64 619212481652904558, %720
  %722 = add i64 %721, %123
  %723 = or i64 %93, -6062998234357394991
  %724 = xor i64 %93, -1
  %725 = and i64 %724, 5245384777563888873
  %726 = and i64 %93, -5245384777563888874
  %727 = or i64 %725, %726
  %728 = xor i64 -2084957087164445384, %727
  %729 = xor i64 %93, -1
  %730 = or i64 6062998234357394990, %729
  %731 = xor i64 %730, -1
  %732 = and i64 %731, -1
  %733 = or i64 %728, %732
  %734 = xor i64 %719, %733
  %735 = xor i64 %734, %723
  %736 = xor i64 %735, %722
  %737 = xor i64 %736, -4947693849546217499
  %738 = and i64 %41, -861633626526249660
  %739 = xor i64 %41, -1
  %740 = xor i64 -861633626526249660, %739
  %741 = and i64 %740, -861633626526249660
  %742 = or i64 %221, 6540489119534597688
  %743 = and i64 6540489119534597688, %221
  %744 = xor i64 6540489119534597688, %221
  %745 = or i64 %743, %744
  %746 = and i64 %87, 4938774706939016490
  %747 = xor i64 %87, -1
  %748 = or i64 -4938774706939016491, %747
  %749 = xor i64 %748, -1
  %750 = and i64 %749, -1
  %751 = xor i64 %746, %745
  %752 = xor i64 %751, %741
  %753 = xor i64 %752, %750
  %754 = xor i64 %753, %738
  %755 = xor i64 %754, %742
  %756 = xor i64 %755, -4396644349148004675
  %757 = mul i64 %737, %756
  %758 = trunc i64 %757 to i32
  %759 = select i1 %718, i32 595012099, i32 %758
  %760 = xor i32 %759, 18
  store i32 %760, i32* %4, align 4
  %761 = call i8** @bf14862898971591998804(i32* %4)
  %762 = load i8*, i8** %761, align 8
  indirectbr i8* %762, [label %loopEnd, label %594]

763:                                              ; preds = %763, %loopStart
  %764 = sdiv i64 29, 64
  %765 = sdiv i64 103, 14
  %766 = or i64 %39, 7179373277385390885
  %767 = and i64 7179373277385390885, %39
  %768 = xor i64 7179373277385390885, %39
  %769 = or i64 %767, %768
  %770 = or i64 %5, 5303350877157504003
  %771 = xor i64 %5, -1
  %772 = and i64 %771, 1418752961623984977
  %773 = and i64 %5, -1418752961623984978
  %774 = or i64 %772, %773
  %775 = xor i64 6496765493374566226, %774
  %776 = xor i64 %5, -1
  %777 = or i64 -5303350877157504004, %776
  %778 = xor i64 %777, -1
  %779 = and i64 %778, -1
  %780 = or i64 %775, %779
  %781 = xor i64 %770, -8133937727039164297
  %782 = xor i64 %781, %769
  %783 = xor i64 %782, %766
  %784 = xor i64 %783, %780
  %785 = and i64 %53, -2937419665333749386
  %786 = xor i64 %53, -1
  %787 = xor i64 -2937419665333749386, %786
  %788 = and i64 %787, -2937419665333749386
  %789 = add i64 %107, 5925299941995443404
  %790 = sub i64 0, %107
  %791 = sub i64 5925299941995443404, %790
  %792 = xor i64 %785, %791
  %793 = xor i64 %792, 2138725527452059322
  %794 = xor i64 %793, %788
  %795 = xor i64 %794, %789
  %796 = mul i64 %784, %795
  %797 = mul i64 %796, 103
  %798 = sdiv i64 61, 60
  %799 = sdiv i64 62, 72
  %800 = add i64 110, 48
  %801 = add i64 %51, 633998800117652069
  %802 = and i64 633998800117652069, %51
  %803 = or i64 633998800117652069, %51
  %804 = add i64 %802, %803
  %805 = and i64 %95, 2829386738696131963
  %806 = xor i64 %95, -1
  %807 = or i64 -2829386738696131964, %806
  %808 = xor i64 %807, -1
  %809 = and i64 %808, -1
  %810 = add i64 %81, 4556512300207345546
  %811 = xor i64 4556512300207345546, %81
  %812 = and i64 4556512300207345546, %81
  %813 = mul i64 2, %812
  %814 = add i64 %811, %813
  %815 = xor i64 -106244263913057397, %805
  %816 = xor i64 %815, %809
  %817 = xor i64 %816, %801
  %818 = xor i64 %817, %804
  %819 = xor i64 %818, %814
  %820 = xor i64 %819, %810
  %821 = add i64 %91, 9016059571639927400
  %822 = and i64 9016059571639927400, %91
  %823 = or i64 9016059571639927400, %91
  %824 = add i64 %822, %823
  %825 = or i64 %221, 4987212478190575753
  %826 = xor i64 %221, -1
  %827 = and i64 4987212478190575753, %826
  %828 = add i64 %827, %221
  %829 = xor i64 %824, %821
  %830 = xor i64 %829, %828
  %831 = xor i64 %830, 7845776474088836384
  %832 = xor i64 %831, %825
  %833 = mul i64 %820, %832
  %834 = sub i64 %833, 18
  %.reload47 = load i32, i32* %.reg2mem18, align 4
  %835 = srem i32 %.reload47, 2
  %836 = icmp eq i32 %835, 0
  %.reload46 = load i32, i32* %.reg2mem18, align 4
  %837 = add i64 %49, 6603854382197116759
  %838 = and i64 6603854382197116759, %49
  %839 = or i64 6603854382197116759, %49
  %840 = add i64 %838, %839
  %841 = and i64 %9, 3779566507094064701
  %842 = xor i64 %9, -1
  %843 = xor i64 3779566507094064701, %842
  %844 = and i64 %843, 3779566507094064701
  %845 = or i64 %129, 350207673660585723
  %846 = xor i64 %129, -1
  %847 = and i64 350207673660585723, %846
  %848 = add i64 %847, %129
  %849 = xor i64 %841, %845
  %850 = xor i64 %849, %837
  %851 = xor i64 %850, %840
  %852 = xor i64 %851, %848
  %853 = xor i64 %852, %844
  %854 = xor i64 %853, 7148327727863391669
  %855 = or i64 %55, 1114483109680095893
  %856 = xor i64 %55, -1
  %857 = and i64 1114483109680095893, %856
  %858 = add i64 %857, %55
  %859 = add i64 %61, 979508682268301593
  %860 = xor i64 979508682268301593, %61
  %861 = and i64 979508682268301593, %61
  %862 = mul i64 2, %861
  %863 = add i64 %860, %862
  %864 = xor i64 -5220543808981155526, %859
  %865 = xor i64 %864, %858
  %866 = xor i64 %865, %863
  %867 = xor i64 %866, %855
  %868 = mul i64 %854, %867
  %869 = trunc i64 %868 to i32
  %870 = mul i32 %.reload46, %869
  %.reload45 = load i32, i32* %.reg2mem18, align 4
  %871 = or i64 %239, 8690245095282932055
  %872 = xor i64 %239, -1
  %873 = and i64 %872, 8453886770286071008
  %874 = and i64 %239, -8453886770286071009
  %875 = or i64 %873, %874
  %876 = xor i64 994115625996383671, %875
  %877 = xor i64 %239, -1
  %878 = or i64 -8690245095282932056, %877
  %879 = xor i64 %878, -1
  %880 = and i64 %879, -1
  %881 = or i64 %876, %880
  %882 = add i64 %139, -1903055550064198255
  %883 = and i64 -1903055550064198255, %139
  %884 = or i64 -1903055550064198255, %139
  %885 = add i64 %883, %884
  %886 = and i64 %139, 8439332962909054302
  %887 = xor i64 %139, -1
  %888 = xor i64 8439332962909054302, %887
  %889 = and i64 %888, 8439332962909054302
  %890 = xor i64 %871, %882
  %891 = xor i64 %890, -2728917990872928405
  %892 = xor i64 %891, %885
  %893 = xor i64 %892, %881
  %894 = xor i64 %893, %889
  %895 = xor i64 %894, %886
  %896 = or i64 %19, 6584897101432249270
  %897 = and i64 6584897101432249270, %19
  %898 = xor i64 6584897101432249270, %19
  %899 = or i64 %897, %898
  %900 = add i64 %23, -3008035520727976633
  %901 = sub i64 0, %23
  %902 = sub i64 -3008035520727976633, %901
  %903 = xor i64 -6533860246829528442, %896
  %904 = xor i64 %903, %899
  %905 = xor i64 %904, %900
  %906 = xor i64 %905, %902
  %907 = mul i64 %895, %906
  %908 = trunc i64 %907 to i32
  %909 = mul i32 %.reload45, %908
  %910 = sub i32 0, %909
  %911 = add i32 -2, %910
  %912 = sub i32 0, %911
  %913 = mul i32 %870, %912
  %914 = srem i32 %913, 4
  %915 = add i64 %39, 5605251918403198509
  %916 = add i64 3375723757798481760, %39
  %917 = add i64 %916, 2229528160604716749
  %918 = add i64 %87, 5455002842805577783
  %919 = sub i64 0, %87
  %920 = add i64 -5455002842805577783, %919
  %921 = sub i64 0, %920
  %922 = xor i64 %918, %917
  %923 = xor i64 %922, %915
  %924 = xor i64 %923, %921
  %925 = xor i64 %924, -1152192670484824611
  %926 = and i64 %85, 7099873794542886416
  %927 = xor i64 %85, -1
  %928 = xor i64 7099873794542886416, %927
  %929 = and i64 %928, 7099873794542886416
  %930 = add i64 %51, 4444880609991847956
  %931 = and i64 4444880609991847956, %51
  %932 = or i64 4444880609991847956, %51
  %933 = add i64 %931, %932
  %934 = add i64 %21, -2777539643826945883
  %935 = add i64 4832099997102670330, %21
  %936 = add i64 %935, -7609639640929616213
  %937 = xor i64 %929, %926
  %938 = xor i64 %937, %934
  %939 = xor i64 %938, %930
  %940 = xor i64 %939, %936
  %941 = xor i64 %940, 0
  %942 = xor i64 %941, %933
  %943 = mul i64 %925, %942
  %944 = trunc i64 %943 to i32
  %945 = icmp eq i32 %914, %944
  %.reload44 = load i32, i32* %.reg2mem18, align 4
  %946 = mul i32 %.reload44, %.reload44
  %.reload43 = load i32, i32* %.reg2mem18, align 4
  %947 = mul i32 %946, %.reload43
  %.reload42 = load i32, i32* %.reg2mem18, align 4
  %948 = add i32 %947, %.reload42
  %949 = srem i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = xor i1 %945, true
  %952 = xor i1 %950, true
  %953 = or i1 %951, %952
  %954 = xor i1 %953, true
  %955 = and i1 %954, true
  store i1 %955, i1* %.reg2mem50, align 1
  %956 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 10
  %957 = load i32, i32* %956, align 4
  %958 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %959 = load i32, i32* %958, align 4
  %960 = srem i32 %957, %959
  %961 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 9
  %962 = load i32, i32* %961, align 4
  %963 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %964 = load i32, i32* %963, align 4
  %965 = srem i32 %962, %964
  %.reload52 = load i1, i1* %.reg2mem50, align 1
  %966 = select i1 %.reload52, i32 %960, i32 %965
  store i32 %966, i32* %dispatcher, align 4
  %967 = load i8*, i8** %82, align 8
  %968 = load i8, i8* %967, align 1
  %969 = and i8 %968, 1
  %970 = or i64 %139, 5064381990333067206
  %971 = xor i64 %139, -1
  %972 = and i64 5064381990333067206, %971
  %973 = add i64 %972, %139
  %974 = add i64 %242, -601426696642154825
  %975 = add i64 -4712104100560101003, %242
  %976 = add i64 %975, 4110677403917946178
  %977 = xor i64 %973, -7822954712292133399
  %978 = xor i64 %977, %974
  %979 = xor i64 %978, %976
  %980 = xor i64 %979, %970
  %981 = and i64 %135, -5680354360945271379
  %982 = xor i64 %135, -1
  %983 = xor i64 -5680354360945271379, %982
  %984 = and i64 %983, -5680354360945271379
  %985 = and i64 %11, -6845229143839821006
  %986 = or i64 6845229143839821005, %11
  %987 = sub i64 %986, 6845229143839821005
  %988 = xor i64 %987, %981
  %989 = xor i64 %988, 5417662924279788121
  %990 = xor i64 %989, %985
  %991 = xor i64 %990, %984
  %992 = mul i64 %980, %991
  %993 = trunc i64 %992 to i8
  %994 = icmp eq i8 %969, %993
  %995 = mul i8 %968, %968
  %996 = sub i8 0, %995
  %997 = sub i8 0, %968
  %998 = add i8 %996, %997
  %999 = sub i8 0, %998
  %1000 = srem i8 %999, 2
  %1001 = icmp eq i8 %1000, 0
  %1002 = or i1 %994, %1001
  %1003 = add i64 %67, 3350645218915102244
  %1004 = xor i64 3350645218915102244, %67
  %1005 = and i64 3350645218915102244, %67
  %1006 = mul i64 2, %1005
  %1007 = add i64 %1004, %1006
  %1008 = or i64 %29, -9117055065078379232
  %1009 = and i64 -9117055065078379232, %29
  %1010 = xor i64 -9117055065078379232, %29
  %1011 = or i64 %1009, %1010
  %1012 = xor i64 %1008, %1011
  %1013 = xor i64 %1012, -2134417034670227125
  %1014 = xor i64 %1013, %1007
  %1015 = xor i64 %1014, %1003
  %1016 = or i64 %123, -8521329693381912665
  %1017 = xor i64 %123, -1
  %1018 = and i64 %1017, -7545847210258285372
  %1019 = and i64 %123, 7545847210258285371
  %1020 = or i64 %1018, %1019
  %1021 = xor i64 2232066035292646243, %1020
  %1022 = xor i64 %123, -1
  %1023 = or i64 8521329693381912664, %1022
  %1024 = xor i64 %1023, -1
  %1025 = and i64 %1024, -1
  %1026 = or i64 %1021, %1025
  %1027 = and i64 %236, -1474168392890515244
  %1028 = or i64 1474168392890515243, %236
  %1029 = sub i64 %1028, 1474168392890515243
  %1030 = xor i64 -1468183939131455870, %1029
  %1031 = xor i64 %1030, %1026
  %1032 = xor i64 %1031, %1016
  %1033 = xor i64 %1032, %1027
  %1034 = mul i64 %1015, %1033
  %1035 = trunc i64 %1034 to i32
  %1036 = select i1 %1002, i32 %1035, i32 595012113
  %1037 = or i64 %35, 974520102991672480
  %1038 = xor i64 %35, -1
  %1039 = and i64 %1038, -1928928874413124249
  %1040 = and i64 %35, 1928928874413124248
  %1041 = or i64 %1039, %1040
  %1042 = xor i64 -1676146419421470265, %1041
  %1043 = xor i64 %35, -1
  %1044 = or i64 -974520102991672481, %1043
  %1045 = xor i64 %1044, -1
  %1046 = and i64 %1045, -1
  %1047 = or i64 %1042, %1046
  %1048 = add i64 %121, -456739549712018598
  %1049 = xor i64 -456739549712018598, %121
  %1050 = and i64 -456739549712018598, %121
  %1051 = mul i64 2, %1050
  %1052 = add i64 %1049, %1051
  %1053 = xor i64 %1037, -3549609841729380743
  %1054 = xor i64 %1053, %1047
  %1055 = xor i64 %1054, %1048
  %1056 = xor i64 %1055, %1052
  %1057 = add i64 %57, -8721246355016802560
  %1058 = add i64 5970941118927993041, %57
  %1059 = add i64 %1058, 3754556599764756015
  %1060 = add i64 %45, -3702935968779824926
  %1061 = sub i64 0, %45
  %1062 = add i64 3702935968779824926, %1061
  %1063 = sub i64 0, %1062
  %1064 = xor i64 %1057, %1063
  %1065 = xor i64 %1064, %1060
  %1066 = xor i64 %1065, -3237296383387061633
  %1067 = xor i64 %1066, %1059
  %1068 = mul i64 %1056, %1067
  %1069 = trunc i64 %1068 to i32
  %1070 = xor i32 %1036, %1069
  store i32 %1070, i32* %4, align 4
  %1071 = call i8** @bf14862898971591998804(i32* %4)
  %1072 = load i8*, i8** %1071, align 8
  indirectbr i8* %1072, [label %loopEnd, label %763]

1073:                                             ; preds = %1073, %loopStart
  %1074 = and i64 %5, -4690863425001238215
  %1075 = xor i64 %5, -1
  %1076 = or i64 4690863425001238214, %1075
  %1077 = xor i64 %1076, -1
  %1078 = and i64 %1077, -1
  %1079 = add i64 %23, 7604131266196929049
  %1080 = sub i64 0, %23
  %1081 = sub i64 7604131266196929049, %1080
  %1082 = xor i64 %1074, -6960117371001797817
  %1083 = xor i64 %1082, %1078
  %1084 = xor i64 %1083, %1079
  %1085 = xor i64 %1084, %1081
  %1086 = and i64 %125, -1670470209068311591
  %1087 = or i64 1670470209068311590, %125
  %1088 = sub i64 %1087, 1670470209068311590
  %1089 = add i64 %254, -2959355273673862923
  %1090 = sub i64 0, %254
  %1091 = add i64 2959355273673862923, %1090
  %1092 = sub i64 0, %1091
  %1093 = xor i64 %1089, %1086
  %1094 = xor i64 %1093, %1088
  %1095 = xor i64 %1094, %1092
  %1096 = xor i64 %1095, 6806424873117324011
  %1097 = mul i64 %1085, %1096
  %1098 = mul i64 %1097, 4
  %1099 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 8
  %1100 = load i32, i32* %1099, align 4
  %1101 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 6
  %1102 = load i32, i32* %1101, align 4
  %1103 = add i32 %1100, %1102
  %1104 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 6
  %1105 = load i32, i32* %1104, align 4
  %1106 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  %1107 = load i32, i32* %1106, align 4
  %1108 = add i32 %1105, %1107
  %.reload51 = load i1, i1* %.reg2mem50, align 1
  %1109 = select i1 %.reload51, i32 %1103, i32 %1108
  store i32 %1109, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem171, align 4
  store i1 false, i1* %.reg2mem173, align 1
  %1110 = load i8*, i8** %72, align 8
  %1111 = load i8, i8* %1110, align 1
  %1112 = xor i8 %1111, -1
  %1113 = or i8 %1112, -2
  %1114 = xor i8 %1113, -1
  %1115 = and i8 %1114, -1
  %1116 = icmp eq i8 %1115, 0
  %1117 = mul i8 %1111, %1111
  %1118 = add i8 %1117, %1111
  %1119 = mul i8 %1118, 3
  %1120 = srem i8 %1119, 2
  %1121 = icmp eq i8 %1120, 0
  %1122 = or i1 %1116, %1121
  %1123 = add i64 %105, -2794861657034737260
  %1124 = and i64 -2794861657034737260, %105
  %1125 = or i64 -2794861657034737260, %105
  %1126 = add i64 %1124, %1125
  %1127 = or i64 %218, 4546947046578180007
  %1128 = xor i64 %218, -1
  %1129 = and i64 4546947046578180007, %1128
  %1130 = add i64 %1129, %218
  %1131 = and i64 %7, 1729778749147739499
  %1132 = xor i64 %7, -1
  %1133 = or i64 -1729778749147739500, %1132
  %1134 = xor i64 %1133, -1
  %1135 = and i64 %1134, -1
  %1136 = xor i64 %1135, %1123
  %1137 = xor i64 %1136, %1131
  %1138 = xor i64 %1137, %1127
  %1139 = xor i64 %1138, %1126
  %1140 = xor i64 %1139, %1130
  %1141 = xor i64 %1140, -6061753624947804807
  %1142 = or i64 %9, -1033534420916253197
  %1143 = and i64 -1033534420916253197, %9
  %1144 = xor i64 -1033534420916253197, %9
  %1145 = or i64 %1143, %1144
  %1146 = add i64 %129, 6228462681817776960
  %1147 = add i64 -4136499393573994171, %129
  %1148 = add i64 %1147, -8081781998317780485
  %1149 = and i64 %63, -7883253624681150118
  %1150 = xor i64 %63, -1
  %1151 = or i64 7883253624681150117, %1150
  %1152 = xor i64 %1151, -1
  %1153 = and i64 %1152, -1
  %1154 = xor i64 %1142, %1153
  %1155 = xor i64 %1154, %1146
  %1156 = xor i64 %1155, -4894363811773251205
  %1157 = xor i64 %1156, %1148
  %1158 = xor i64 %1157, %1145
  %1159 = xor i64 %1158, %1149
  %1160 = mul i64 %1141, %1159
  %1161 = trunc i64 %1160 to i32
  %1162 = select i1 %1122, i32 %1161, i32 595012113
  %1163 = add i64 %125, 6081486613672371332
  %1164 = xor i64 6081486613672371332, %125
  %1165 = and i64 6081486613672371332, %125
  %1166 = mul i64 2, %1165
  %1167 = add i64 %1164, %1166
  %1168 = or i64 %31, 5397479148863583438
  %1169 = and i64 5397479148863583438, %31
  %1170 = xor i64 5397479148863583438, %31
  %1171 = or i64 %1169, %1170
  %1172 = or i64 %224, -5145100095918567635
  %1173 = and i64 -5145100095918567635, %224
  %1174 = xor i64 -5145100095918567635, %224
  %1175 = or i64 %1173, %1174
  %1176 = xor i64 1000438546365805865, %1168
  %1177 = xor i64 %1176, %1163
  %1178 = xor i64 %1177, %1171
  %1179 = xor i64 %1178, %1167
  %1180 = xor i64 %1179, %1175
  %1181 = xor i64 %1180, %1172
  %1182 = add i64 %81, -6412464867462943368
  %1183 = add i64 5801384234442082097, %81
  %1184 = sub i64 %1183, -6232894971804526151
  %1185 = and i64 %75, 1256170098334686373
  %1186 = or i64 -1256170098334686374, %75
  %1187 = sub i64 %1186, -1256170098334686374
  %1188 = and i64 %33, 3801268959205699492
  %1189 = xor i64 %33, -1
  %1190 = or i64 -3801268959205699493, %1189
  %1191 = xor i64 %1190, -1
  %1192 = and i64 %1191, -1
  %1193 = xor i64 %1192, %1187
  %1194 = xor i64 %1193, %1188
  %1195 = xor i64 %1194, %1182
  %1196 = xor i64 %1195, %1184
  %1197 = xor i64 %1196, %1185
  %1198 = xor i64 %1197, 8062140383006638818
  %1199 = mul i64 %1181, %1198
  %1200 = trunc i64 %1199 to i32
  %1201 = xor i32 %1162, %1200
  store i32 %1201, i32* %4, align 4
  %1202 = call i8** @bf14862898971591998804(i32* %4)
  %1203 = load i8*, i8** %1202, align 8
  indirectbr i8* %1203, [label %loopEnd, label %1073]

1204:                                             ; preds = %1204, %loopStart
  %1205 = mul i64 45, 4
  %1206 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 11
  %1207 = load i32, i32* %1206, align 4
  %1208 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %1209 = load i32, i32* %1208, align 4
  %1210 = srem i32 %1207, %1209
  store i32 %1210, i32* %dispatcher, align 4
  %1211 = load i8*, i8** %70, align 8
  %1212 = load i8, i8* %1211, align 1
  %1213 = xor i8 %1212, -2
  %1214 = and i8 %1213, %1212
  %1215 = icmp eq i8 %1214, 1
  %1216 = mul i8 %1212, %1212
  %1217 = add i8 %1216, %1212
  %1218 = srem i8 %1217, 2
  %1219 = icmp eq i8 %1218, 0
  %1220 = xor i1 %1215, true
  %1221 = and i1 %1220, true
  %1222 = and i1 %1215, false
  %1223 = or i1 %1221, %1222
  %1224 = xor i1 %1219, true
  %1225 = and i1 %1224, true
  %1226 = and i1 %1219, false
  %1227 = or i1 %1225, %1226
  %1228 = xor i1 %1223, %1227
  %1229 = xor i1 %1215, true
  %1230 = xor i1 %1219, true
  %1231 = or i1 %1229, %1230
  %1232 = xor i1 %1231, true
  %1233 = and i1 %1232, true
  %1234 = or i1 %1228, %1233
  %1235 = select i1 %1234, i32 595012126, i32 595012113
  %1236 = xor i32 %1235, -805233134
  %1237 = xor i32 %1236, -805233123
  store i32 %1237, i32* %4, align 4
  %1238 = call i8** @bf14862898971591998804(i32* %4)
  %1239 = load i8*, i8** %1238, align 8
  indirectbr i8* %1239, [label %loopEnd, label %1204]

1240:                                             ; preds = %1240, %loopStart
  %1241 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 39
  %1242 = load i32, i32* %1241, align 4
  %1243 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 29
  %1244 = load i32, i32* %1243, align 4
  %1245 = sub i32 %1242, %1244
  store i32 %1245, i32* %dispatcher, align 4
  %1246 = load i8*, i8** %54, align 8
  %1247 = load i8, i8* %1246, align 1
  %1248 = mul i8 %1247, %1247
  %1249 = xor i8 %1248, %1247
  %1250 = and i8 %1248, %1247
  %1251 = mul i8 2, %1250
  %1252 = add i8 %1249, %1251
  %1253 = mul i8 %1252, 3
  %1254 = srem i8 %1253, 2
  %1255 = or i64 %53, -5819074678375137187
  %1256 = xor i64 %53, -1
  %1257 = and i64 %1256, 2696412012381833804
  %1258 = and i64 %53, -2696412012381833805
  %1259 = or i64 %1257, %1258
  %1260 = xor i64 -8478613329019450863, %1259
  %1261 = xor i64 %53, -1
  %1262 = or i64 5819074678375137186, %1261
  %1263 = xor i64 %1262, -1
  %1264 = and i64 %1263, -1
  %1265 = or i64 %1260, %1264
  %1266 = or i64 %99, 3464434011238587759
  %1267 = and i64 3464434011238587759, %99
  %1268 = xor i64 3464434011238587759, %99
  %1269 = or i64 %1267, %1268
  %1270 = add i64 %69, 1018398736084137712
  %1271 = sub i64 0, %69
  %1272 = add i64 -1018398736084137712, %1271
  %1273 = sub i64 0, %1272
  %1274 = xor i64 %1265, %1269
  %1275 = xor i64 %1274, -5791831112380547281
  %1276 = xor i64 %1275, %1273
  %1277 = xor i64 %1276, %1266
  %1278 = xor i64 %1277, %1270
  %1279 = xor i64 %1278, %1255
  %1280 = or i64 %119, -6953487172743065060
  %1281 = xor i64 %119, -1
  %1282 = and i64 %1281, -8851202912056621701
  %1283 = and i64 %119, 8851202912056621700
  %1284 = or i64 %1282, %1283
  %1285 = xor i64 1921477491849713511, %1284
  %1286 = xor i64 %119, -1
  %1287 = or i64 6953487172743065059, %1286
  %1288 = xor i64 %1287, -1
  %1289 = and i64 %1288, -1
  %1290 = or i64 %1285, %1289
  %1291 = add i64 %31, 5743075460036454489
  %1292 = xor i64 5743075460036454489, %31
  %1293 = and i64 5743075460036454489, %31
  %1294 = mul i64 2, %1293
  %1295 = add i64 %1292, %1294
  %1296 = xor i64 %1280, 0
  %1297 = xor i64 %1296, %1290
  %1298 = xor i64 %1297, %1291
  %1299 = xor i64 %1298, %1295
  %1300 = mul i64 %1279, %1299
  %1301 = trunc i64 %1300 to i8
  %1302 = icmp eq i8 %1254, %1301
  %1303 = mul i8 %1247, %1247
  %1304 = add i8 %1303, %1247
  %1305 = srem i8 %1304, 2
  %1306 = and i64 %93, -8642688535759496362
  %1307 = xor i64 %93, -1
  %1308 = or i64 8642688535759496361, %1307
  %1309 = xor i64 %1308, -1
  %1310 = and i64 %1309, -1
  %1311 = and i64 %85, 1691332022526755257
  %1312 = xor i64 %85, -1
  %1313 = or i64 -1691332022526755258, %1312
  %1314 = xor i64 %1313, -1
  %1315 = and i64 %1314, -1
  %1316 = add i64 %27, 4596451115995990862
  %1317 = and i64 4596451115995990862, %27
  %1318 = or i64 4596451115995990862, %27
  %1319 = add i64 %1317, %1318
  %1320 = xor i64 %1311, %1310
  %1321 = xor i64 %1320, %1316
  %1322 = xor i64 %1321, 332390853067419885
  %1323 = xor i64 %1322, %1319
  %1324 = xor i64 %1323, %1315
  %1325 = xor i64 %1324, %1306
  %1326 = or i64 %49, -724932006781633765
  %1327 = and i64 -724932006781633765, %49
  %1328 = xor i64 -724932006781633765, %49
  %1329 = or i64 %1327, %1328
  %1330 = add i64 %215, -8077143848940748142
  %1331 = and i64 -8077143848940748142, %215
  %1332 = or i64 -8077143848940748142, %215
  %1333 = add i64 %1331, %1332
  %1334 = xor i64 0, %1330
  %1335 = xor i64 %1334, %1326
  %1336 = xor i64 %1335, %1329
  %1337 = xor i64 %1336, %1333
  %1338 = mul i64 %1325, %1337
  %1339 = trunc i64 %1338 to i8
  %1340 = icmp eq i8 %1305, %1339
  %1341 = and i1 %1302, %1340
  %1342 = select i1 %1341, i32 595012135, i32 595012113
  %1343 = xor i32 %1342, 54
  store i32 %1343, i32* %4, align 4
  %1344 = call i8** @bf14862898971591998804(i32* %4)
  %1345 = load i8*, i8** %1344, align 8
  indirectbr i8* %1345, [label %loopEnd, label %1240]

1346:                                             ; preds = %1346, %loopStart
  %1347 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 9
  %1348 = load i32, i32* %1347, align 4
  %1349 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 7
  %1350 = load i32, i32* %1349, align 4
  %1351 = add i32 %1348, %1350
  store i32 %1351, i32* %dispatcher, align 4
  %1352 = load i8*, i8** %20, align 8
  %1353 = load i8, i8* %1352, align 1
  %1354 = and i8 %1353, 1
  %1355 = icmp eq i8 %1354, 1
  %1356 = mul i8 %1353, %1353
  %1357 = xor i8 %1356, %1353
  %1358 = and i8 %1356, %1353
  %1359 = mul i8 2, %1358
  %1360 = add i8 %1357, %1359
  %1361 = srem i8 %1360, 2
  %1362 = or i64 %45, -6193092095134276256
  %1363 = xor i64 %45, -1
  %1364 = and i64 -6193092095134276256, %1363
  %1365 = add i64 %1364, %45
  %1366 = and i64 %139, -3866978600030892309
  %1367 = xor i64 %139, -1
  %1368 = or i64 3866978600030892308, %1367
  %1369 = xor i64 %1368, -1
  %1370 = and i64 %1369, -1
  %1371 = add i64 %17, -3757332278769425799
  %1372 = sub i64 0, %17
  %1373 = add i64 3757332278769425799, %1372
  %1374 = sub i64 0, %1373
  %1375 = xor i64 %1366, %1374
  %1376 = xor i64 %1375, %1362
  %1377 = xor i64 %1376, %1365
  %1378 = xor i64 %1377, %1371
  %1379 = xor i64 %1378, %1370
  %1380 = xor i64 %1379, -4273766946266883273
  %1381 = add i64 %236, -5351123154603870339
  %1382 = add i64 -6160045436090848512, %236
  %1383 = add i64 %1382, 808922281486978173
  %1384 = or i64 %139, -351465697753130256
  %1385 = and i64 -351465697753130256, %139
  %1386 = xor i64 -351465697753130256, %139
  %1387 = or i64 %1385, %1386
  %1388 = add i64 %107, 5994145078781605830
  %1389 = add i64 -5254332544726050133, %107
  %1390 = sub i64 %1389, 7198266450201895653
  %1391 = xor i64 %1388, %1387
  %1392 = xor i64 %1391, %1381
  %1393 = xor i64 %1392, %1390
  %1394 = xor i64 %1393, 0
  %1395 = xor i64 %1394, %1383
  %1396 = xor i64 %1395, %1384
  %1397 = mul i64 %1380, %1396
  %1398 = trunc i64 %1397 to i8
  %1399 = icmp eq i8 %1361, %1398
  %1400 = and i1 %1355, %1399
  %1401 = xor i1 %1355, %1399
  %1402 = or i1 %1400, %1401
  %1403 = select i1 %1402, i32 595012097, i32 595012113
  %1404 = xor i32 %1403, 16
  store i32 %1404, i32* %4, align 4
  %1405 = call i8** @bf14862898971591998804(i32* %4)
  %1406 = load i8*, i8** %1405, align 8
  indirectbr i8* %1406, [label %loopEnd, label %1346]

1407:                                             ; preds = %1407, %loopStart
  %1408 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 52
  %1409 = load i32, i32* %1408, align 4
  %1410 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 41
  %1411 = load i32, i32* %1410, align 4
  %1412 = sub i32 %1409, -562318747
  %1413 = sub i32 %1412, %1411
  %1414 = add i32 %1413, -562318747
  %1415 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 63
  %1416 = load i32, i32* %1415, align 4
  %1417 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %1418 = load i32, i32* %1417, align 4
  %1419 = srem i32 %1416, %1418
  %.reload49 = load i1, i1* %.reg2mem48, align 1
  %1420 = select i1 %.reload49, i32 %1414, i32 %1419
  store i32 %1420, i32* %dispatcher, align 4
  %.reload23 = load i32, i32* %.reg2mem18, align 4
  store i32 %.reload23, i32* %.reg2mem207, align 4
  store i1 true, i1* %.reg2mem209, align 1
  %1421 = load i8*, i8** %52, align 8
  %1422 = load i8, i8* %1421, align 1
  %1423 = xor i8 %1422, -1
  %1424 = sext i32 %262 to i64
  %1425 = or i64 %1424, 3772299675610832215
  %1426 = xor i64 %1424, -1
  %1427 = and i64 3772299675610832215, %1426
  %1428 = add i64 %1427, %1424
  %1429 = add i64 %83, -3213493246549967465
  %1430 = sub i64 0, %83
  %1431 = add i64 3213493246549967465, %1430
  %1432 = sub i64 0, %1431
  %1433 = xor i64 %1432, %1429
  %1434 = xor i64 %1433, %1425
  %1435 = xor i64 %1434, %1428
  %1436 = xor i64 %1435, 5603641160097693933
  %1437 = add i64 %135, 7863938001720315840
  %1438 = add i64 9212189969795524905, %135
  %1439 = add i64 %1438, -1348251968075209065
  %1440 = and i64 %245, -3468277767517457131
  %1441 = xor i64 %245, -1
  %1442 = xor i64 -3468277767517457131, %1441
  %1443 = and i64 %1442, -3468277767517457131
  %1444 = xor i64 %1440, %1443
  %1445 = xor i64 %1444, %1437
  %1446 = xor i64 %1445, %1439
  %1447 = xor i64 %1446, 8613755135177055461
  %1448 = mul i64 %1436, %1447
  %1449 = trunc i64 %1448 to i8
  %1450 = or i8 %1423, %1449
  %1451 = or i64 %23, 5577796258201127840
  %1452 = xor i64 %23, -1
  %1453 = and i64 5577796258201127840, %1452
  %1454 = add i64 %1453, %23
  %1455 = or i64 %43, -8988994918911132635
  %1456 = xor i64 %43, -1
  %1457 = and i64 %1456, 1466284922114376109
  %1458 = and i64 %43, -1466284922114376110
  %1459 = or i64 %1457, %1458
  %1460 = xor i64 -7558756645377852024, %1459
  %1461 = xor i64 %43, -1
  %1462 = or i64 8988994918911132634, %1461
  %1463 = xor i64 %1462, -1
  %1464 = and i64 %1463, -1
  %1465 = or i64 %1460, %1464
  %1466 = xor i64 %1454, %1455
  %1467 = xor i64 %1466, %1465
  %1468 = xor i64 %1467, %1451
  %1469 = xor i64 %1468, 6426373916526700703
  %1470 = and i64 %83, -2421679123597409500
  %1471 = or i64 2421679123597409499, %83
  %1472 = sub i64 %1471, 2421679123597409499
  %1473 = or i64 %224, -3561651015710031089
  %1474 = xor i64 %224, -1
  %1475 = and i64 %1474, 2107453760527932704
  %1476 = and i64 %224, -2107453760527932705
  %1477 = or i64 %1475, %1476
  %1478 = xor i64 -3193800619716125137, %1477
  %1479 = xor i64 %224, -1
  %1480 = or i64 3561651015710031088, %1479
  %1481 = xor i64 %1480, -1
  %1482 = and i64 %1481, -1
  %1483 = or i64 %1478, %1482
  %1484 = add i64 %91, -7349854501617473459
  %1485 = sub i64 0, %91
  %1486 = add i64 7349854501617473459, %1485
  %1487 = sub i64 0, %1486
  %1488 = xor i64 %1487, %1472
  %1489 = xor i64 %1488, %1473
  %1490 = xor i64 %1489, -25080172735812703
  %1491 = xor i64 %1490, %1483
  %1492 = xor i64 %1491, %1470
  %1493 = xor i64 %1492, %1484
  %1494 = mul i64 %1469, %1493
  %1495 = trunc i64 %1494 to i8
  %1496 = xor i8 %1422, %1495
  %1497 = sub i8 %1450, %1496
  %1498 = or i64 %81, 5152040570769118745
  %1499 = xor i64 %81, -1
  %1500 = and i64 5152040570769118745, %1499
  %1501 = add i64 %1500, %81
  %1502 = add i64 %242, 7636086470993809559
  %1503 = and i64 7636086470993809559, %242
  %1504 = or i64 7636086470993809559, %242
  %1505 = add i64 %1503, %1504
  %1506 = xor i64 %1501, 1465750319811867785
  %1507 = xor i64 %1506, %1498
  %1508 = xor i64 %1507, %1502
  %1509 = xor i64 %1508, %1505
  %1510 = and i64 %139, 2604379927777123753
  %1511 = xor i64 %139, -1
  %1512 = xor i64 2604379927777123753, %1511
  %1513 = and i64 %1512, 2604379927777123753
  %1514 = or i64 %91, -5193885521369588591
  %1515 = xor i64 %91, -1
  %1516 = and i64 -5193885521369588591, %1515
  %1517 = add i64 %1516, %91
  %1518 = and i64 %29, -6944450443938069104
  %1519 = xor i64 %29, -1
  %1520 = xor i64 -6944450443938069104, %1519
  %1521 = and i64 %1520, -6944450443938069104
  %1522 = xor i64 %1510, %1513
  %1523 = xor i64 %1522, 0
  %1524 = xor i64 %1523, %1517
  %1525 = xor i64 %1524, %1518
  %1526 = xor i64 %1525, %1521
  %1527 = xor i64 %1526, %1514
  %1528 = mul i64 %1509, %1527
  %1529 = trunc i64 %1528 to i8
  %1530 = icmp eq i8 %1497, %1529
  %1531 = mul i8 %1422, %1422
  %1532 = sub i8 0, %1422
  %1533 = sub i8 %1531, %1532
  %1534 = mul i8 %1533, 3
  %1535 = srem i8 %1534, 2
  %1536 = or i64 %129, 5615569265139396786
  %1537 = xor i64 %129, -1
  %1538 = and i64 5615569265139396786, %1537
  %1539 = add i64 %1538, %129
  %1540 = or i64 %129, 7285292016456684476
  %1541 = xor i64 %129, -1
  %1542 = and i64 7285292016456684476, %1541
  %1543 = add i64 %1542, %129
  %1544 = and i64 %129, 9004387863172342760
  %1545 = or i64 -9004387863172342761, %129
  %1546 = sub i64 %1545, -9004387863172342761
  %1547 = xor i64 %1539, %1544
  %1548 = xor i64 %1547, %1536
  %1549 = xor i64 %1548, %1546
  %1550 = xor i64 %1549, %1540
  %1551 = xor i64 %1550, %1543
  %1552 = xor i64 %1551, -9221514947095876063
  %1553 = or i64 %141, -2026437210933029947
  %1554 = xor i64 %141, -1
  %1555 = and i64 %1554, 7412620469063791870
  %1556 = and i64 %141, -7412620469063791871
  %1557 = or i64 %1555, %1556
  %1558 = xor i64 -8845547830557661381, %1557
  %1559 = xor i64 %141, -1
  %1560 = or i64 2026437210933029946, %1559
  %1561 = xor i64 %1560, -1
  %1562 = and i64 %1561, -1
  %1563 = or i64 %1558, %1562
  %1564 = and i64 %35, 3417539051685840515
  %1565 = xor i64 %35, -1
  %1566 = xor i64 3417539051685840515, %1565
  %1567 = and i64 %1566, 3417539051685840515
  %1568 = xor i64 0, %1567
  %1569 = xor i64 %1568, %1563
  %1570 = xor i64 %1569, %1564
  %1571 = xor i64 %1570, %1553
  %1572 = mul i64 %1552, %1571
  %1573 = trunc i64 %1572 to i8
  %1574 = icmp eq i8 %1535, %1573
  %1575 = and i1 %1530, %1574
  %1576 = xor i1 %1530, %1574
  %1577 = or i1 %1575, %1576
  %1578 = select i1 %1577, i32 595012145, i32 595012113
  %1579 = xor i32 %1578, -1
  %1580 = add i64 %105, -1327938176407262660
  %1581 = add i64 7750977581868544501, %105
  %1582 = add i64 %1581, -9078915758275807161
  %1583 = or i64 %113, -9031243633137240399
  %1584 = and i64 -9031243633137240399, %113
  %1585 = xor i64 -9031243633137240399, %113
  %1586 = or i64 %1584, %1585
  %1587 = and i64 %227, 1776365584623153908
  %1588 = xor i64 %227, -1
  %1589 = or i64 -1776365584623153909, %1588
  %1590 = xor i64 %1589, -1
  %1591 = and i64 %1590, -1
  %1592 = xor i64 %1580, %1591
  %1593 = xor i64 %1592, -8490080551701397349
  %1594 = xor i64 %1593, %1587
  %1595 = xor i64 %1594, %1583
  %1596 = xor i64 %1595, %1582
  %1597 = xor i64 %1596, %1586
  %1598 = add i64 %45, 6748699406904628878
  %1599 = sub i64 0, %45
  %1600 = add i64 -6748699406904628878, %1599
  %1601 = sub i64 0, %1600
  %1602 = or i64 %23, -6813779211149584512
  %1603 = and i64 -6813779211149584512, %23
  %1604 = xor i64 -6813779211149584512, %23
  %1605 = or i64 %1603, %1604
  %1606 = xor i64 %1602, %1601
  %1607 = xor i64 %1606, 8842042214409095039
  %1608 = xor i64 %1607, %1598
  %1609 = xor i64 %1608, %1605
  %1610 = mul i64 %1597, %1609
  %1611 = trunc i64 %1610 to i32
  %1612 = and i32 %1579, %1611
  %1613 = and i32 %1578, -1256851942
  %1614 = or i32 %1612, %1613
  %1615 = xor i32 %1614, 1256851909
  store i32 %1615, i32* %4, align 4
  %1616 = call i8** @bf14862898971591998804(i32* %4)
  %1617 = load i8*, i8** %1616, align 8
  indirectbr i8* %1617, [label %loopEnd, label %1407]

.preheader:                                       ; preds = %.preheader, %loopStart
  %.reload6 = load i32, i32* %.reg2mem, align 4
  %1618 = and i32 %.reload6, 1
  %1619 = icmp eq i32 %1618, 1
  %.reload5 = load i32, i32* %.reg2mem, align 4
  %1620 = mul i32 %.reload5, %.reload5
  store i32 %1620, i32* %.reg2mem53, align 4
  %.reload4 = load i32, i32* %.reg2mem, align 4
  %.reload55 = load i32, i32* %.reg2mem53, align 4
  %1621 = add i32 %.reload55, %.reload4
  store i32 %1621, i32* %.reg2mem56, align 4
  %.reload74 = load i32, i32* %.reg2mem56, align 4
  %1622 = srem i32 %.reload74, 2
  store i32 %1622, i32* %.reg2mem75, align 4
  %.reload77 = load i32, i32* %.reg2mem75, align 4
  %1623 = icmp eq i32 %.reload77, 0
  %1624 = or i1 %1619, %1623
  %1625 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 10
  %1626 = load i32, i32* %1625, align 4
  %1627 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 9
  %1628 = load i32, i32* %1627, align 4
  %1629 = add i32 %1626, %1628
  %1630 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 15
  %1631 = load i32, i32* %1630, align 4
  %1632 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %1633 = load i32, i32* %1632, align 4
  %1634 = srem i32 %1631, %1633
  %1635 = select i1 %1624, i32 %1629, i32 %1634
  store i32 %1635, i32* %dispatcher, align 4
  %1636 = load i8*, i8** %74, align 8
  %1637 = load i8, i8* %1636, align 1
  %1638 = or i64 %31, 6948443061098174530
  %1639 = xor i64 %31, -1
  %1640 = and i64 %1639, -5014339702566849812
  %1641 = and i64 %31, 5014339702566849811
  %1642 = or i64 %1640, %1641
  %1643 = xor i64 -2736877140550767954, %1642
  %1644 = xor i64 %31, -1
  %1645 = or i64 -6948443061098174531, %1644
  %1646 = xor i64 %1645, -1
  %1647 = and i64 %1646, -1
  %1648 = or i64 %1643, %1647
  %1649 = and i64 %61, 4546557325574434106
  %1650 = xor i64 %61, -1
  %1651 = or i64 -4546557325574434107, %1650
  %1652 = xor i64 %1651, -1
  %1653 = and i64 %1652, -1
  %1654 = add i64 %117, 8045119775609404323
  %1655 = sub i64 0, %117
  %1656 = sub i64 8045119775609404323, %1655
  %1657 = xor i64 6011357517034523245, %1648
  %1658 = xor i64 %1657, %1656
  %1659 = xor i64 %1658, %1649
  %1660 = xor i64 %1659, %1638
  %1661 = xor i64 %1660, %1653
  %1662 = xor i64 %1661, %1654
  %1663 = add i64 %65, -6339689194225488913
  %1664 = sub i64 0, %65
  %1665 = add i64 6339689194225488913, %1664
  %1666 = sub i64 0, %1665
  %1667 = and i64 %7, -5672411766003784565
  %1668 = xor i64 %7, -1
  %1669 = xor i64 -5672411766003784565, %1668
  %1670 = and i64 %1669, -5672411766003784565
  %1671 = or i64 %97, -6970024344530287211
  %1672 = xor i64 %97, -1
  %1673 = and i64 -6970024344530287211, %1672
  %1674 = add i64 %1673, %97
  %1675 = xor i64 %1667, %1666
  %1676 = xor i64 %1675, %1671
  %1677 = xor i64 %1676, %1670
  %1678 = xor i64 %1677, 7547515787058355914
  %1679 = xor i64 %1678, %1663
  %1680 = xor i64 %1679, %1674
  %1681 = mul i64 %1662, %1680
  %1682 = trunc i64 %1681 to i8
  %1683 = mul i8 %1637, %1682
  %1684 = mul i8 %1637, 2
  %1685 = add i8 2, %1684
  %1686 = mul i8 %1683, %1685
  %1687 = srem i8 %1686, 4
  %1688 = or i64 %103, 5426147283024873398
  %1689 = xor i64 %103, -1
  %1690 = and i64 5426147283024873398, %1689
  %1691 = add i64 %1690, %103
  %1692 = or i64 %69, -1356696008075300182
  %1693 = xor i64 %69, -1
  %1694 = and i64 -1356696008075300182, %1693
  %1695 = add i64 %1694, %69
  %1696 = or i64 %43, -4543822190016100506
  %1697 = and i64 -4543822190016100506, %43
  %1698 = xor i64 -4543822190016100506, %43
  %1699 = or i64 %1697, %1698
  %1700 = xor i64 %1688, %1692
  %1701 = xor i64 %1700, -1309568047690237515
  %1702 = xor i64 %1701, %1695
  %1703 = xor i64 %1702, %1696
  %1704 = xor i64 %1703, %1699
  %1705 = xor i64 %1704, %1691
  %1706 = sext i32 %dispatcher1 to i64
  %1707 = add i64 %1706, -2625996725278039783
  %1708 = and i64 -2625996725278039783, %1706
  %1709 = or i64 -2625996725278039783, %1706
  %1710 = add i64 %1708, %1709
  %1711 = and i64 %19, 7840263014629320414
  %1712 = xor i64 %19, -1
  %1713 = xor i64 7840263014629320414, %1712
  %1714 = and i64 %1713, 7840263014629320414
  %1715 = add i64 %53, -5150349718016323881
  %1716 = and i64 -5150349718016323881, %53
  %1717 = or i64 -5150349718016323881, %53
  %1718 = add i64 %1716, %1717
  %1719 = xor i64 %1710, %1711
  %1720 = xor i64 %1719, %1718
  %1721 = xor i64 %1720, 0
  %1722 = xor i64 %1721, %1715
  %1723 = xor i64 %1722, %1714
  %1724 = xor i64 %1723, %1707
  %1725 = mul i64 %1705, %1724
  %1726 = trunc i64 %1725 to i8
  %1727 = icmp eq i8 %1687, %1726
  %1728 = mul i8 %1637, %1637
  %1729 = and i8 %1728, %1637
  %1730 = or i8 %1728, %1637
  %1731 = add i8 %1729, %1730
  %1732 = and i64 %17, -3470194438871751895
  %1733 = or i64 3470194438871751894, %17
  %1734 = sub i64 %1733, 3470194438871751894
  %1735 = or i64 %33, -1830337666419458117
  %1736 = xor i64 %33, -1
  %1737 = and i64 -1830337666419458117, %1736
  %1738 = add i64 %1737, %33
  %1739 = xor i64 %1735, -7682008245087981513
  %1740 = xor i64 %1739, %1734
  %1741 = xor i64 %1740, %1732
  %1742 = xor i64 %1741, %1738
  %1743 = and i64 %77, -6699628774062727636
  %1744 = or i64 6699628774062727635, %77
  %1745 = sub i64 %1744, 6699628774062727635
  %1746 = or i64 %57, 5793511018404737487
  %1747 = and i64 5793511018404737487, %57
  %1748 = xor i64 5793511018404737487, %57
  %1749 = or i64 %1747, %1748
  %1750 = or i64 %21, 3226886955438437897
  %1751 = and i64 3226886955438437897, %21
  %1752 = xor i64 3226886955438437897, %21
  %1753 = or i64 %1751, %1752
  %1754 = xor i64 %1753, %1745
  %1755 = xor i64 %1754, %1749
  %1756 = xor i64 %1755, %1750
  %1757 = xor i64 %1756, 6705896600107748110
  %1758 = xor i64 %1757, %1746
  %1759 = xor i64 %1758, %1743
  %1760 = mul i64 %1742, %1759
  %1761 = trunc i64 %1760 to i8
  %1762 = srem i8 %1731, %1761
  %1763 = icmp eq i8 %1762, 0
  %1764 = or i1 %1727, %1763
  %1765 = select i1 %1764, i32 595012112, i32 595012113
  %1766 = xor i32 %1765, -1
  %1767 = and i32 %1766, 1
  %1768 = and i32 %1765, -2
  %1769 = or i32 %1767, %1768
  store i32 %1769, i32* %4, align 4
  %1770 = call i8** @bf14862898971591998804(i32* %4)
  %1771 = load i8*, i8** %1770, align 8
  indirectbr i8* %1771, [label %loopEnd, label %.preheader]

1772:                                             ; preds = %1772, %loopStart
  %1773 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 35
  %1774 = load i32, i32* %1773, align 4
  %1775 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %1776 = load i32, i32* %1775, align 4
  %1777 = sub i32 %1774, %1776
  store i32 %1777, i32* %dispatcher, align 4
  %1778 = load i8*, i8** %68, align 8
  %1779 = load i8, i8* %1778, align 1
  %1780 = or i64 %71, 7266774874235452078
  %1781 = and i64 7266774874235452078, %71
  %1782 = xor i64 7266774874235452078, %71
  %1783 = or i64 %1781, %1782
  %1784 = and i64 %23, -6897655972500547653
  %1785 = xor i64 %23, -1
  %1786 = or i64 6897655972500547652, %1785
  %1787 = xor i64 %1786, -1
  %1788 = and i64 %1787, -1
  %1789 = xor i64 %1780, %1783
  %1790 = xor i64 %1789, %1788
  %1791 = xor i64 %1790, %1784
  %1792 = xor i64 %1791, -7280539971961931353
  %1793 = add i64 %51, -4269546756330247104
  %1794 = and i64 -4269546756330247104, %51
  %1795 = or i64 -4269546756330247104, %51
  %1796 = add i64 %1794, %1795
  %1797 = and i64 %63, -8063791098494240346
  %1798 = xor i64 %63, -1
  %1799 = xor i64 -8063791098494240346, %1798
  %1800 = and i64 %1799, -8063791098494240346
  %1801 = xor i64 %1797, %1793
  %1802 = xor i64 %1801, %1796
  %1803 = xor i64 %1802, -6832235245849921303
  %1804 = xor i64 %1803, %1800
  %1805 = mul i64 %1792, %1804
  %1806 = trunc i64 %1805 to i8
  %1807 = xor i8 %1779, %1806
  %1808 = or i8 %1807, 1
  %1809 = or i64 %29, -3295484835385693358
  %1810 = xor i64 %29, -1
  %1811 = and i64 -3295484835385693358, %1810
  %1812 = add i64 %1811, %29
  %1813 = or i64 %218, -6580723241098997980
  %1814 = xor i64 %218, -1
  %1815 = and i64 %1814, 6448594805768465986
  %1816 = and i64 %218, -6448594805768465987
  %1817 = or i64 %1815, %1816
  %1818 = xor i64 -156902665687588506, %1817
  %1819 = xor i64 %218, -1
  %1820 = or i64 6580723241098997979, %1819
  %1821 = xor i64 %1820, -1
  %1822 = and i64 %1821, -1
  %1823 = or i64 %1818, %1822
  %1824 = and i64 %137, -5848416569960115158
  %1825 = xor i64 %137, -1
  %1826 = or i64 5848416569960115157, %1825
  %1827 = xor i64 %1826, -1
  %1828 = and i64 %1827, -1
  %1829 = xor i64 %1824, %1823
  %1830 = xor i64 %1829, -3291764370427555211
  %1831 = xor i64 %1830, %1809
  %1832 = xor i64 %1831, %1828
  %1833 = xor i64 %1832, %1812
  %1834 = xor i64 %1833, %1813
  %1835 = or i64 %101, 612729045126643278
  %1836 = and i64 612729045126643278, %101
  %1837 = xor i64 612729045126643278, %101
  %1838 = or i64 %1836, %1837
  %1839 = add i64 %139, -5195636033435902935
  %1840 = xor i64 -5195636033435902935, %139
  %1841 = and i64 -5195636033435902935, %139
  %1842 = mul i64 2, %1841
  %1843 = add i64 %1840, %1842
  %1844 = or i64 %121, -2326022569019516895
  %1845 = xor i64 %121, -1
  %1846 = and i64 -2326022569019516895, %1845
  %1847 = add i64 %1846, %121
  %1848 = xor i64 %1843, %1839
  %1849 = xor i64 %1848, %1847
  %1850 = xor i64 %1849, %1835
  %1851 = xor i64 %1850, %1838
  %1852 = xor i64 %1851, %1844
  %1853 = xor i64 %1852, 1852673529525890851
  %1854 = mul i64 %1834, %1853
  %1855 = trunc i64 %1854 to i8
  %1856 = xor i8 %1779, %1855
  %1857 = sub i8 %1808, %1856
  %1858 = icmp eq i8 %1857, 0
  %1859 = mul i8 %1779, %1779
  %1860 = add i8 %1859, %1779
  %1861 = mul i8 %1860, 3
  %1862 = srem i8 %1861, 2
  %1863 = icmp eq i8 %1862, 0
  %1864 = or i1 %1858, %1863
  %1865 = select i1 %1864, i32 595012138, i32 595012113
  %1866 = xor i32 %1865, 59
  store i32 %1866, i32* %4, align 4
  %1867 = call i8** @bf14862898971591998804(i32* %4)
  %1868 = load i8*, i8** %1867, align 8
  indirectbr i8* %1868, [label %loopEnd, label %1772]

1869:                                             ; preds = %1869, %loopStart
  %.reload41 = load i32, i32* %.reg2mem18, align 4
  %1870 = srem i32 %.reload41, 2
  store i32 %1870, i32* %.reg2mem78, align 4
  %.reload80 = load i32, i32* %.reg2mem78, align 4
  %1871 = icmp eq i32 %.reload80, 0
  %1872 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 51
  %1873 = load i32, i32* %1872, align 4
  %1874 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 37
  %1875 = load i32, i32* %1874, align 4
  %1876 = add i32 %1873, -1272920660
  %1877 = sub i32 %1876, %1875
  %1878 = sub i32 %1877, -1272920660
  %1879 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 25
  %1880 = load i32, i32* %1879, align 4
  %1881 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %1882 = load i32, i32* %1881, align 4
  %1883 = srem i32 %1880, %1882
  %1884 = select i1 %1871, i32 %1878, i32 %1883
  store i32 %1884, i32* %dispatcher, align 4
  %1885 = load i8*, i8** %124, align 8
  %1886 = load i8, i8* %1885, align 1
  %1887 = xor i8 %1886, -2
  %1888 = and i8 %1887, %1886
  %1889 = icmp eq i8 %1888, 1
  %1890 = mul i8 %1886, %1886
  %1891 = add i8 %1890, %1886
  %1892 = srem i8 %1891, 2
  %1893 = icmp eq i8 %1892, 0
  %1894 = or i1 %1889, %1893
  %1895 = select i1 %1894, i32 595012128, i32 595012113
  %1896 = add i64 %67, -3226328516504013418
  %1897 = add i64 7134468204145870809, %67
  %1898 = sub i64 %1897, -8085947353059667389
  %1899 = and i64 %95, -4247756782309066154
  %1900 = or i64 4247756782309066153, %95
  %1901 = sub i64 %1900, 4247756782309066153
  %1902 = xor i64 %1901, %1899
  %1903 = xor i64 %1902, %1896
  %1904 = xor i64 %1903, 7085650381288024337
  %1905 = xor i64 %1904, %1898
  %1906 = or i64 %63, 6149132810497157455
  %1907 = and i64 6149132810497157455, %63
  %1908 = xor i64 6149132810497157455, %63
  %1909 = or i64 %1907, %1908
  %1910 = add i64 %83, 6246485668667488595
  %1911 = sub i64 0, %83
  %1912 = sub i64 6246485668667488595, %1911
  %1913 = xor i64 %1909, %1906
  %1914 = xor i64 %1913, %1912
  %1915 = xor i64 %1914, %1910
  %1916 = xor i64 %1915, -6868917972429773535
  %1917 = mul i64 %1905, %1916
  %1918 = trunc i64 %1917 to i32
  %1919 = xor i32 %1895, %1918
  store i32 %1919, i32* %4, align 4
  %1920 = call i8** @bf14862898971591998804(i32* %4)
  %1921 = load i8*, i8** %1920, align 8
  indirectbr i8* %1921, [label %loopEnd, label %1869]

1922:                                             ; preds = %1922, %loopStart
  %.reload40 = load i32, i32* %.reg2mem18, align 4
  %1923 = srem i32 %.reload40, 2
  %1924 = icmp eq i32 %1923, 0
  %1925 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 11
  %1926 = load i32, i32* %1925, align 4
  %1927 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 10
  %1928 = load i32, i32* %1927, align 4
  %1929 = sub i32 0, %1926
  %1930 = sub i32 0, %1928
  %1931 = add i32 %1929, %1930
  %1932 = sub i32 0, %1931
  %1933 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 32
  %1934 = load i32, i32* %1933, align 4
  %1935 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 12
  %1936 = load i32, i32* %1935, align 4
  %1937 = sub i32 %1934, %1936
  %1938 = select i1 %1924, i32 %1932, i32 %1937
  store i32 %1938, i32* %dispatcher, align 4
  %1939 = load i8*, i8** %118, align 8
  %1940 = load i8, i8* %1939, align 1
  %1941 = mul i8 %1940, 2
  %1942 = and i64 %67, 5078990687620888193
  %1943 = xor i64 %67, -1
  %1944 = or i64 -5078990687620888194, %1943
  %1945 = xor i64 %1944, -1
  %1946 = and i64 %1945, -1
  %1947 = or i64 %239, 7530806054477282684
  %1948 = and i64 7530806054477282684, %239
  %1949 = xor i64 7530806054477282684, %239
  %1950 = or i64 %1948, %1949
  %1951 = xor i64 -3916836840862409603, %1946
  %1952 = xor i64 %1951, %1947
  %1953 = xor i64 %1952, %1942
  %1954 = xor i64 %1953, %1950
  %1955 = or i64 %23, 5274750034558351752
  %1956 = xor i64 %23, -1
  %1957 = and i64 5274750034558351752, %1956
  %1958 = add i64 %1957, %23
  %1959 = or i64 %27, -7083896414742679318
  %1960 = xor i64 %27, -1
  %1961 = and i64 -7083896414742679318, %1960
  %1962 = add i64 %1961, %27
  %1963 = xor i64 %1955, %1959
  %1964 = xor i64 %1963, 2213743801375095210
  %1965 = xor i64 %1964, %1958
  %1966 = xor i64 %1965, %1962
  %1967 = mul i64 %1954, %1966
  %1968 = trunc i64 %1967 to i8
  %1969 = mul i8 %1940, %1968
  %1970 = or i64 %93, 6472004433265475114
  %1971 = xor i64 %93, -1
  %1972 = and i64 %1971, 442103930786566119
  %1973 = and i64 %93, -442103930786566120
  %1974 = or i64 %1972, %1973
  %1975 = xor i64 6914017819564503501, %1974
  %1976 = xor i64 %93, -1
  %1977 = or i64 -6472004433265475115, %1976
  %1978 = xor i64 %1977, -1
  %1979 = and i64 %1978, -1
  %1980 = or i64 %1975, %1979
  %1981 = add i64 %23, -1641891128802302812
  %1982 = add i64 5065868660537483242, %23
  %1983 = add i64 %1982, -6707759789339786054
  %1984 = xor i64 %1981, %1983
  %1985 = xor i64 %1984, %1970
  %1986 = xor i64 %1985, %1980
  %1987 = xor i64 %1986, 2811901764371400949
  %1988 = and i64 %93, 6444794199333559801
  %1989 = xor i64 %93, -1
  %1990 = xor i64 6444794199333559801, %1989
  %1991 = and i64 %1990, 6444794199333559801
  %1992 = or i64 %65, -2469356404490082246
  %1993 = and i64 -2469356404490082246, %65
  %1994 = xor i64 -2469356404490082246, %65
  %1995 = or i64 %1993, %1994
  %1996 = xor i64 %1991, %1992
  %1997 = xor i64 %1996, -1142760873412835654
  %1998 = xor i64 %1997, %1995
  %1999 = xor i64 %1998, %1988
  %2000 = mul i64 %1987, %1999
  %2001 = trunc i64 %2000 to i8
  %2002 = add i8 %2001, %1969
  %2003 = mul i8 %1941, %2002
  %2004 = srem i8 %2003, 4
  %2005 = icmp eq i8 %2004, 0
  %2006 = mul i8 %1940, %1940
  %2007 = xor i8 %2006, %1940
  %2008 = and i8 %2006, %1940
  %2009 = mul i8 2, %2008
  %2010 = add i8 %2007, %2009
  %2011 = srem i8 %2010, 2
  %2012 = icmp eq i8 %2011, 0
  %2013 = and i1 %2005, %2012
  %2014 = select i1 %2013, i32 595012111, i32 595012113
  %2015 = xor i32 %2014, 30
  store i32 %2015, i32* %4, align 4
  %2016 = call i8** @bf14862898971591998804(i32* %4)
  %2017 = load i8*, i8** %2016, align 8
  indirectbr i8* %2017, [label %loopEnd, label %1922]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %lt.cast = bitcast i1* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  store i64 1996855465712537073, i64* %213, align 8
  %2018 = call i8** @lk14802275186744156584(i64* %213)
  %2019 = load i8*, i8** %2018, align 8
  %2020 = bitcast i8* %2019 to i1 (i32, i32, i1*)*
  %.reload39 = load i32, i32* %.reg2mem18, align 4
  %.reload73 = load i32, i32* %.reg2mem56, align 4
  %targetBlock = call i1 %2020(i32 %.reload39, i32 %.reload73, i1* %.loc)
  %.reload = load i1, i1* %.loc, align 1
  store i1 %.reload, i1* %.reload.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  %2021 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  %2022 = load i32, i32* %2021, align 4
  %2023 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 46
  %2024 = load i32, i32* %2023, align 4
  %2025 = sub i32 0, %2024
  %2026 = add i32 %2022, %2025
  %2027 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 12
  %2028 = load i32, i32* %2027, align 4
  %2029 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 11
  %2030 = load i32, i32* %2029, align 4
  %2031 = add i32 %2028, 432562622
  %2032 = add i32 %2031, %2030
  %2033 = sub i32 %2032, 432562622
  %2034 = select i1 %targetBlock, i32 %2026, i32 %2033
  store i32 %2034, i32* %dispatcher, align 4
  %2035 = load i8*, i8** %118, align 8
  %2036 = load i8, i8* %2035, align 1
  %2037 = add i64 %105, -8175877703063272257
  %2038 = add i64 -6235400589704242662, %105
  %2039 = sub i64 %2038, 1940477113359029595
  %2040 = and i64 %87, 462899230028503849
  %2041 = xor i64 %87, -1
  %2042 = xor i64 462899230028503849, %2041
  %2043 = and i64 %2042, 462899230028503849
  %2044 = xor i64 1774729357657653309, %2043
  %2045 = xor i64 %2044, %2040
  %2046 = xor i64 %2045, %2037
  %2047 = xor i64 %2046, %2039
  %2048 = or i64 %13, -8018890853395698851
  %2049 = xor i64 %13, -1
  %2050 = and i64 %2049, 2822036744104941126
  %2051 = and i64 %13, -2822036744104941127
  %2052 = or i64 %2050, %2051
  %2053 = xor i64 -5215504583941292773, %2052
  %2054 = xor i64 %13, -1
  %2055 = or i64 8018890853395698850, %2054
  %2056 = xor i64 %2055, -1
  %2057 = and i64 %2056, -1
  %2058 = or i64 %2053, %2057
  %2059 = and i64 %79, 1427604236441941217
  %2060 = xor i64 %79, -1
  %2061 = xor i64 1427604236441941217, %2060
  %2062 = and i64 %2061, 1427604236441941217
  %2063 = and i64 %242, 7520243752795051664
  %2064 = or i64 -7520243752795051665, %242
  %2065 = sub i64 %2064, -7520243752795051665
  %2066 = xor i64 -428854685716556011, %2063
  %2067 = xor i64 %2066, %2048
  %2068 = xor i64 %2067, %2065
  %2069 = xor i64 %2068, %2059
  %2070 = xor i64 %2069, %2062
  %2071 = xor i64 %2070, %2058
  %2072 = mul i64 %2047, %2071
  %2073 = trunc i64 %2072 to i8
  %2074 = and i8 %2036, %2073
  %2075 = icmp eq i8 %2074, 0
  %2076 = mul i8 %2036, %2036
  %2077 = add i8 %2076, %2036
  %2078 = mul i8 %2077, 3
  %2079 = srem i8 %2078, 2
  %2080 = icmp eq i8 %2079, 0
  %2081 = or i1 %2075, %2080
  %2082 = select i1 %2081, i32 595012138, i32 595012113
  %2083 = xor i32 %2082, 59
  store i32 %2083, i32* %4, align 4
  %2084 = call i8** @bf14862898971591998804(i32* %4)
  %2085 = load i8*, i8** %2084, align 8
  indirectbr i8* %2085, [label %loopEnd, label %codeRepl]

2086:                                             ; preds = %2086, %loopStart
  %2087 = add i64 22, 61
  %2088 = add i64 24, 70
  %2089 = sub i64 0, -52
  %2090 = sdiv i64 79, 116
  %2091 = sub i64 90, 81
  %2092 = sdiv i64 6, 36
  %2093 = or i64 %139, -8321819372089398247
  %2094 = and i64 -8321819372089398247, %139
  %2095 = xor i64 -8321819372089398247, %139
  %2096 = or i64 %2094, %2095
  %2097 = or i64 %141, -345778581509272057
  %2098 = xor i64 %141, -1
  %2099 = and i64 %2098, -7046685100986656847
  %2100 = and i64 %141, 7046685100986656846
  %2101 = or i64 %2099, %2100
  %2102 = xor i64 7279691708132268470, %2101
  %2103 = xor i64 %141, -1
  %2104 = or i64 345778581509272056, %2103
  %2105 = xor i64 %2104, -1
  %2106 = and i64 %2105, -1
  %2107 = or i64 %2102, %2106
  %2108 = add i64 %239, 8001547130751638307
  %2109 = add i64 -5690476903495944546, %239
  %2110 = sub i64 %2109, 4754720039461968763
  %2111 = xor i64 %2107, %2093
  %2112 = xor i64 %2111, %2097
  %2113 = xor i64 %2112, %2110
  %2114 = xor i64 %2113, %2108
  %2115 = xor i64 %2114, %2096
  %2116 = xor i64 %2115, 7916908564861803751
  %2117 = and i64 %119, -5268225958977468381
  %2118 = xor i64 %119, -1
  %2119 = or i64 5268225958977468380, %2118
  %2120 = xor i64 %2119, -1
  %2121 = and i64 %2120, -1
  %2122 = or i64 %233, 1459439974909003757
  %2123 = xor i64 %233, -1
  %2124 = and i64 1459439974909003757, %2123
  %2125 = add i64 %2124, %233
  %2126 = xor i64 %2121, %2125
  %2127 = xor i64 %2126, %2122
  %2128 = xor i64 %2127, 4902334049634212452
  %2129 = xor i64 %2128, %2117
  %2130 = mul i64 %2116, %2129
  %2131 = sdiv i64 %2130, 60
  %2132 = add i64 %89, 7424755167659197888
  %2133 = xor i64 7424755167659197888, %89
  %2134 = and i64 7424755167659197888, %89
  %2135 = mul i64 2, %2134
  %2136 = add i64 %2133, %2135
  %2137 = or i64 %139, 1939866263881472794
  %2138 = and i64 1939866263881472794, %139
  %2139 = xor i64 1939866263881472794, %139
  %2140 = or i64 %2138, %2139
  %2141 = and i64 %87, 6519391531457828605
  %2142 = xor i64 %87, -1
  %2143 = xor i64 6519391531457828605, %2142
  %2144 = and i64 %2143, 6519391531457828605
  %2145 = xor i64 4601910605192675819, %2132
  %2146 = xor i64 %2145, %2144
  %2147 = xor i64 %2146, %2137
  %2148 = xor i64 %2147, %2141
  %2149 = xor i64 %2148, %2140
  %2150 = xor i64 %2149, %2136
  %2151 = or i64 %107, 8725965329604791841
  %2152 = xor i64 %107, -1
  %2153 = and i64 %2152, 8326964644342364292
  %2154 = and i64 %107, -8326964644342364293
  %2155 = or i64 %2153, %2154
  %2156 = xor i64 763229320225535653, %2155
  %2157 = xor i64 %107, -1
  %2158 = or i64 -8725965329604791842, %2157
  %2159 = xor i64 %2158, -1
  %2160 = and i64 %2159, -1
  %2161 = or i64 %2156, %2160
  %2162 = or i64 %254, 6698677088410891560
  %2163 = xor i64 %254, -1
  %2164 = and i64 %2163, 6312008989449900414
  %2165 = and i64 %254, -6312008989449900415
  %2166 = or i64 %2164, %2165
  %2167 = xor i64 823800195941442646, %2166
  %2168 = xor i64 %254, -1
  %2169 = or i64 -6698677088410891561, %2168
  %2170 = xor i64 %2169, -1
  %2171 = and i64 %2170, -1
  %2172 = or i64 %2167, %2171
  %2173 = xor i64 -6995607363064630837, %2172
  %2174 = xor i64 %2173, %2151
  %2175 = xor i64 %2174, %2162
  %2176 = xor i64 %2175, %2161
  %2177 = mul i64 %2150, %2176
  %2178 = sdiv i64 56, %2177
  %2179 = sub i64 8, 118
  %2180 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 21
  %2181 = load i32, i32* %2180, align 4
  %2182 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %2183 = load i32, i32* %2182, align 4
  %2184 = srem i32 %2181, %2183
  store i32 %2184, i32* %dispatcher, align 4
  %2185 = load i8*, i8** %14, align 8
  %2186 = load i8, i8* %2185, align 1
  %2187 = mul i8 %2186, %2186
  %2188 = add i8 %2187, 34
  %2189 = add i8 %2188, %2186
  %2190 = sub i8 %2189, 34
  %2191 = mul i8 %2190, 3
  %2192 = srem i8 %2191, 2
  %2193 = icmp eq i8 %2192, 0
  %2194 = mul i8 %2186, %2186
  %2195 = add i8 %2194, %2186
  %2196 = srem i8 %2195, 2
  %2197 = icmp eq i8 %2196, 0
  %2198 = and i1 %2193, %2197
  %2199 = or i64 %43, 1855222714530373042
  %2200 = and i64 1855222714530373042, %43
  %2201 = xor i64 1855222714530373042, %43
  %2202 = or i64 %2200, %2201
  %2203 = and i64 %47, -3694003883063667794
  %2204 = xor i64 %47, -1
  %2205 = xor i64 -3694003883063667794, %2204
  %2206 = and i64 %2205, -3694003883063667794
  %2207 = and i64 %141, -5054575998760604192
  %2208 = xor i64 %141, -1
  %2209 = xor i64 -5054575998760604192, %2208
  %2210 = and i64 %2209, -5054575998760604192
  %2211 = xor i64 %2207, %2203
  %2212 = xor i64 %2211, 1356676136685613661
  %2213 = xor i64 %2212, %2206
  %2214 = xor i64 %2213, %2202
  %2215 = xor i64 %2214, %2210
  %2216 = xor i64 %2215, %2199
  %2217 = or i64 %215, -1154734133156988512
  %2218 = and i64 -1154734133156988512, %215
  %2219 = xor i64 -1154734133156988512, %215
  %2220 = or i64 %2218, %2219
  %2221 = or i64 %65, -74505697788836522
  %2222 = xor i64 %65, -1
  %2223 = and i64 %2222, 7957201274347506642
  %2224 = and i64 %65, -7957201274347506643
  %2225 = or i64 %2223, %2224
  %2226 = xor i64 -8026851528712581500, %2225
  %2227 = xor i64 %65, -1
  %2228 = or i64 74505697788836521, %2227
  %2229 = xor i64 %2228, -1
  %2230 = and i64 %2229, -1
  %2231 = or i64 %2226, %2230
  %2232 = xor i64 %2221, %2220
  %2233 = xor i64 %2232, %2231
  %2234 = xor i64 %2233, %2217
  %2235 = xor i64 %2234, -5720924948358790331
  %2236 = mul i64 %2216, %2235
  %2237 = trunc i64 %2236 to i32
  %2238 = select i1 %2198, i32 595012143, i32 %2237
  %2239 = add i64 %137, -3973280442283492282
  %2240 = sub i64 0, %137
  %2241 = add i64 3973280442283492282, %2240
  %2242 = sub i64 0, %2241
  %2243 = or i64 %131, 5605520097186122340
  %2244 = xor i64 %131, -1
  %2245 = and i64 %2244, -7955321545583035505
  %2246 = and i64 %131, 7955321545583035504
  %2247 = or i64 %2245, %2246
  %2248 = xor i64 -2570486798566985237, %2247
  %2249 = xor i64 %131, -1
  %2250 = or i64 -5605520097186122341, %2249
  %2251 = xor i64 %2250, -1
  %2252 = and i64 %2251, -1
  %2253 = or i64 %2248, %2252
  %2254 = xor i64 6630960201355926685, %2253
  %2255 = xor i64 %2254, %2242
  %2256 = xor i64 %2255, %2243
  %2257 = xor i64 %2256, %2239
  %2258 = and i64 %45, -4181522757400686703
  %2259 = xor i64 %45, -1
  %2260 = xor i64 -4181522757400686703, %2259
  %2261 = and i64 %2260, -4181522757400686703
  %2262 = or i64 %21, -2079013935771684493
  %2263 = xor i64 %21, -1
  %2264 = and i64 %2263, -989758869825505461
  %2265 = and i64 %21, 989758869825505460
  %2266 = or i64 %2264, %2265
  %2267 = xor i64 1253813079964108344, %2266
  %2268 = xor i64 %21, -1
  %2269 = or i64 2079013935771684492, %2268
  %2270 = xor i64 %2269, -1
  %2271 = and i64 %2270, -1
  %2272 = or i64 %2267, %2271
  %2273 = xor i64 %2258, %2272
  %2274 = xor i64 %2273, %2262
  %2275 = xor i64 %2274, %2261
  %2276 = xor i64 %2275, 8881536582514956758
  %2277 = mul i64 %2257, %2276
  %2278 = trunc i64 %2277 to i32
  %2279 = xor i32 %2238, %2278
  store i32 %2279, i32* %4, align 4
  %2280 = call i8** @bf14862898971591998804(i32* %4)
  %2281 = load i8*, i8** %2280, align 8
  indirectbr i8* %2281, [label %loopEnd, label %2086]

2282:                                             ; preds = %2282, %loopStart
  %2283 = add i64 43, 40
  %2284 = sub i64 2353206769585018528, 2353206769585018434
  %2285 = add i64 23, 29
  %2286 = or i64 %35, -2242030638015028055
  %2287 = xor i64 %35, -1
  %2288 = and i64 %2287, -2693969754326057279
  %2289 = and i64 %35, 2693969754326057278
  %2290 = or i64 %2288, %2289
  %2291 = xor i64 4215278865379875432, %2290
  %2292 = xor i64 %35, -1
  %2293 = or i64 2242030638015028054, %2292
  %2294 = xor i64 %2293, -1
  %2295 = and i64 %2294, -1
  %2296 = or i64 %2291, %2295
  %2297 = add i64 %35, -704576142767314394
  %2298 = and i64 -704576142767314394, %35
  %2299 = or i64 -704576142767314394, %35
  %2300 = add i64 %2298, %2299
  %2301 = add i64 %47, -4810900112269613474
  %2302 = add i64 1963227406211412126, %47
  %2303 = sub i64 %2302, 6774127518481025600
  %2304 = xor i64 %2301, -6665081402911643483
  %2305 = xor i64 %2304, %2303
  %2306 = xor i64 %2305, %2296
  %2307 = xor i64 %2306, %2297
  %2308 = xor i64 %2307, %2286
  %2309 = xor i64 %2308, %2300
  %2310 = and i64 %111, 8761698252604048677
  %2311 = or i64 -8761698252604048678, %111
  %2312 = sub i64 %2311, -8761698252604048678
  %2313 = or i64 %139, -6927431123854210542
  %2314 = xor i64 %139, -1
  %2315 = and i64 %2314, 8699988333883765271
  %2316 = and i64 %139, -8699988333883765272
  %2317 = or i64 %2315, %2316
  %2318 = xor i64 -1774344228894115835, %2317
  %2319 = xor i64 %139, -1
  %2320 = or i64 6927431123854210541, %2319
  %2321 = xor i64 %2320, -1
  %2322 = and i64 %2321, -1
  %2323 = or i64 %2318, %2322
  %2324 = xor i64 %2310, %2323
  %2325 = xor i64 %2324, %2313
  %2326 = xor i64 %2325, %2312
  %2327 = xor i64 %2326, -8141230779894350109
  %2328 = mul i64 %2309, %2327
  %2329 = and i64 %73, 28116169043586012
  %2330 = or i64 -28116169043586013, %73
  %2331 = sub i64 %2330, -28116169043586013
  %2332 = or i64 %236, 6484187612551123442
  %2333 = and i64 6484187612551123442, %236
  %2334 = xor i64 6484187612551123442, %236
  %2335 = or i64 %2333, %2334
  %2336 = or i64 %103, 6857503384403435573
  %2337 = xor i64 %103, -1
  %2338 = and i64 %2337, -1961967668866537861
  %2339 = and i64 %103, 1961967668866537860
  %2340 = or i64 %2338, %2339
  %2341 = xor i64 -4904685861052922290, %2340
  %2342 = xor i64 %103, -1
  %2343 = or i64 -6857503384403435574, %2342
  %2344 = xor i64 %2343, -1
  %2345 = and i64 %2344, -1
  %2346 = or i64 %2341, %2345
  %2347 = xor i64 %2332, %2336
  %2348 = xor i64 %2347, %2329
  %2349 = xor i64 %2348, -8185298216653249957
  %2350 = xor i64 %2349, %2346
  %2351 = xor i64 %2350, %2335
  %2352 = xor i64 %2351, %2331
  %2353 = or i64 %133, 2933227572128041585
  %2354 = and i64 2933227572128041585, %133
  %2355 = xor i64 2933227572128041585, %133
  %2356 = or i64 %2354, %2355
  %2357 = or i64 %257, 9121348759052931076
  %2358 = xor i64 %257, -1
  %2359 = and i64 9121348759052931076, %2358
  %2360 = add i64 %2359, %257
  %2361 = or i64 %139, -3660247273808503676
  %2362 = and i64 -3660247273808503676, %139
  %2363 = xor i64 -3660247273808503676, %139
  %2364 = or i64 %2362, %2363
  %2365 = xor i64 %2361, %2353
  %2366 = xor i64 %2365, %2364
  %2367 = xor i64 %2366, %2357
  %2368 = xor i64 %2367, %2356
  %2369 = xor i64 %2368, 3468132562456150940
  %2370 = xor i64 %2369, %2360
  %2371 = mul i64 %2352, %2370
  %2372 = sdiv i64 %2328, %2371
  %2373 = add i64 3061237509131382914, -3061237509131382905
  %2374 = sdiv i64 6, 36
  %2375 = sdiv i64 60, 60
  %2376 = sdiv i64 56, 89
  %2377 = add i64 %101, -540044097115062681
  %2378 = sub i64 0, %101
  %2379 = sub i64 -540044097115062681, %2378
  %2380 = and i64 %61, -5928800585902855429
  %2381 = xor i64 %61, -1
  %2382 = or i64 5928800585902855428, %2381
  %2383 = xor i64 %2382, -1
  %2384 = and i64 %2383, -1
  %2385 = xor i64 %2384, -8611251965960143499
  %2386 = xor i64 %2385, %2377
  %2387 = xor i64 %2386, %2380
  %2388 = xor i64 %2387, %2379
  %2389 = and i64 %227, 5416731129516795333
  %2390 = or i64 -5416731129516795334, %227
  %2391 = sub i64 %2390, -5416731129516795334
  %2392 = or i64 %107, 6073350617174483930
  %2393 = and i64 6073350617174483930, %107
  %2394 = xor i64 6073350617174483930, %107
  %2395 = or i64 %2393, %2394
  %2396 = xor i64 %2392, %2395
  %2397 = xor i64 %2396, 1329272043419162344
  %2398 = xor i64 %2397, %2391
  %2399 = xor i64 %2398, %2389
  %2400 = mul i64 %2388, %2399
  %2401 = add i64 %2400, -118
  %2402 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  %2403 = load i32, i32* %2402, align 4
  %2404 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %2405 = load i32, i32* %2404, align 4
  %2406 = sub i32 %2403, %2405
  %2407 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 26
  %2408 = load i32, i32* %2407, align 4
  %2409 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 12
  %2410 = load i32, i32* %2409, align 4
  %2411 = sub i32 %2408, %2410
  %.reload.reload = load i1, i1* %.reload.reg2mem, align 1
  %2412 = select i1 %.reload.reload, i32 %2406, i32 %2411
  store i32 %2412, i32* %dispatcher, align 4
  %2413 = load i8*, i8** %140, align 8
  %2414 = load i8, i8* %2413, align 1
  %2415 = mul i8 %2414, %2414
  %2416 = add i8 %2415, %2414
  %2417 = or i64 %87, 4381511559694131967
  %2418 = xor i64 %87, -1
  %2419 = and i64 4381511559694131967, %2418
  %2420 = add i64 %2419, %87
  %2421 = add i64 %93, 3203234184718580590
  %2422 = add i64 7059745231043003323, %93
  %2423 = sub i64 %2422, 3856511046324422733
  %2424 = xor i64 %2417, %2421
  %2425 = xor i64 %2424, %2423
  %2426 = xor i64 %2425, -665895854963461485
  %2427 = xor i64 %2426, %2420
  %2428 = add i64 %224, 6819136194411602623
  %2429 = add i64 8488107997424054746, %224
  %2430 = add i64 %2429, -1668971803012452123
  %2431 = and i64 %236, -3089665379065658928
  %2432 = xor i64 %236, -1
  %2433 = or i64 3089665379065658927, %2432
  %2434 = xor i64 %2433, -1
  %2435 = and i64 %2434, -1
  %2436 = xor i64 %2435, %2428
  %2437 = xor i64 %2436, %2431
  %2438 = xor i64 %2437, -4849642575308885295
  %2439 = xor i64 %2438, %2430
  %2440 = mul i64 %2427, %2439
  %2441 = trunc i64 %2440 to i8
  %2442 = mul i8 %2416, %2441
  %2443 = and i64 %93, 8319616581447247508
  %2444 = or i64 -8319616581447247509, %93
  %2445 = sub i64 %2444, -8319616581447247509
  %2446 = add i64 %73, -931994543733783734
  %2447 = add i64 -7148555197694716958, %73
  %2448 = sub i64 %2447, -6216560653960933224
  %2449 = xor i64 8795809700084840093, %2446
  %2450 = xor i64 %2449, %2443
  %2451 = xor i64 %2450, %2445
  %2452 = xor i64 %2451, %2448
  %2453 = or i64 %81, 1101024377702545633
  %2454 = and i64 1101024377702545633, %81
  %2455 = xor i64 1101024377702545633, %81
  %2456 = or i64 %2454, %2455
  %2457 = and i64 %254, 1531965636937194684
  %2458 = xor i64 %254, -1
  %2459 = xor i64 1531965636937194684, %2458
  %2460 = and i64 %2459, 1531965636937194684
  %2461 = and i64 %59, -6442715024174369099
  %2462 = or i64 6442715024174369098, %59
  %2463 = sub i64 %2462, 6442715024174369098
  %2464 = xor i64 %2456, %2461
  %2465 = xor i64 %2464, %2460
  %2466 = xor i64 %2465, %2453
  %2467 = xor i64 %2466, %2463
  %2468 = xor i64 %2467, %2457
  %2469 = xor i64 %2468, 8679923833253166954
  %2470 = mul i64 %2452, %2469
  %2471 = trunc i64 %2470 to i8
  %2472 = srem i8 %2442, %2471
  %2473 = icmp eq i8 %2472, 0
  %2474 = mul i8 %2414, %2414
  %2475 = add i8 %2474, %2414
  %2476 = srem i8 %2475, 2
  %2477 = icmp eq i8 %2476, 0
  %2478 = and i1 %2473, %2477
  %2479 = add i64 %218, 8169682412475167348
  %2480 = sub i64 0, %218
  %2481 = sub i64 8169682412475167348, %2480
  %2482 = add i64 %91, 6959931762670064954
  %2483 = and i64 6959931762670064954, %91
  %2484 = or i64 6959931762670064954, %91
  %2485 = add i64 %2483, %2484
  %2486 = xor i64 %2485, 5374384098332483695
  %2487 = xor i64 %2486, %2482
  %2488 = xor i64 %2487, %2481
  %2489 = xor i64 %2488, %2479
  %2490 = and i64 %257, 2539490428513564399
  %2491 = or i64 -2539490428513564400, %257
  %2492 = sub i64 %2491, -2539490428513564400
  %2493 = or i64 %111, 3876726062327153187
  %2494 = xor i64 %111, -1
  %2495 = and i64 3876726062327153187, %2494
  %2496 = add i64 %2495, %111
  %2497 = or i64 %95, -2222684079219063796
  %2498 = xor i64 %95, -1
  %2499 = and i64 -2222684079219063796, %2498
  %2500 = add i64 %2499, %95
  %2501 = xor i64 %2496, %2492
  %2502 = xor i64 %2501, %2493
  %2503 = xor i64 %2502, %2497
  %2504 = xor i64 %2503, -3181058588472238721
  %2505 = xor i64 %2504, %2500
  %2506 = xor i64 %2505, %2490
  %2507 = mul i64 %2489, %2506
  %2508 = trunc i64 %2507 to i32
  %2509 = select i1 %2478, i32 595012111, i32 %2508
  %2510 = xor i32 %2509, 30
  store i32 %2510, i32* %4, align 4
  %2511 = call i8** @bf14862898971591998804(i32* %4)
  %2512 = load i8*, i8** %2511, align 8
  indirectbr i8* %2512, [label %loopEnd, label %2282]

2513:                                             ; preds = %2513, %loopStart
  %2514 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  %2515 = load i32, i32* %2514, align 4
  %2516 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 17
  %2517 = load i32, i32* %2516, align 4
  %2518 = sub i32 %2515, %2517
  store i32 %2518, i32* %dispatcher, align 4
  %2519 = load i8*, i8** %126, align 8
  %2520 = load i8, i8* %2519, align 1
  %2521 = and i8 %2520, 1
  %2522 = icmp eq i8 %2521, 1
  %2523 = mul i8 %2520, %2520
  %2524 = and i8 %2523, %2520
  %2525 = or i8 %2523, %2520
  %2526 = add i8 %2524, %2525
  %2527 = srem i8 %2526, 2
  %2528 = icmp eq i8 %2527, 0
  %2529 = or i1 %2522, %2528
  %2530 = select i1 %2529, i32 595012134, i32 595012113
  %2531 = or i32 %2530, 55
  %2532 = and i32 %2530, 55
  %2533 = sub i32 %2531, %2532
  store i32 %2533, i32* %4, align 4
  %2534 = call i8** @bf14862898971591998804(i32* %4)
  %2535 = load i8*, i8** %2534, align 8
  indirectbr i8* %2535, [label %loopEnd, label %2513]

codeRepl1:                                        ; preds = %codeRepl1, %loopStart
  store i64 1996855465712537077, i64* %213, align 8
  %2536 = call i8** @lk14802275186744156584(i64* %213)
  %2537 = load i8*, i8** %2536, align 8
  %2538 = bitcast i8* %2537 to void ()*
  call void %2538()
  %2539 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 14
  %2540 = load i32, i32* %2539, align 4
  %2541 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 13
  %2542 = load i32, i32* %2541, align 4
  %2543 = add i32 %2540, %2542
  store i32 %2543, i32* %dispatcher, align 4
  %2544 = load i8*, i8** %140, align 8
  %2545 = load i8, i8* %2544, align 1
  %2546 = mul i8 %2545, %2545
  %2547 = xor i8 %2546, %2545
  %2548 = and i8 %2546, %2545
  %2549 = mul i8 2, %2548
  %2550 = add i8 %2547, %2549
  %2551 = mul i8 %2550, 3
  %2552 = srem i8 %2551, 2
  %2553 = add i64 %33, 8211082507109154848
  %2554 = add i64 9105862395680900472, %33
  %2555 = sub i64 %2554, 894779888571745624
  %2556 = and i64 %41, 5934405593712532452
  %2557 = xor i64 %41, -1
  %2558 = or i64 -5934405593712532453, %2557
  %2559 = xor i64 %2558, -1
  %2560 = and i64 %2559, -1
  %2561 = or i64 %135, -2046588729520002444
  %2562 = xor i64 %135, -1
  %2563 = and i64 -2046588729520002444, %2562
  %2564 = add i64 %2563, %135
  %2565 = xor i64 4075221853531628853, %2556
  %2566 = xor i64 %2565, %2561
  %2567 = xor i64 %2566, %2564
  %2568 = xor i64 %2567, %2555
  %2569 = xor i64 %2568, %2560
  %2570 = xor i64 %2569, %2553
  %2571 = and i64 %245, -7971034123097400893
  %2572 = or i64 7971034123097400892, %245
  %2573 = sub i64 %2572, 7971034123097400892
  %2574 = add i64 %53, 9117287241034659095
  %2575 = add i64 -3621842270709160181, %53
  %2576 = add i64 %2575, -5707614561965732340
  %2577 = add i64 %71, 3257794350092485717
  %2578 = and i64 3257794350092485717, %71
  %2579 = or i64 3257794350092485717, %71
  %2580 = add i64 %2578, %2579
  %2581 = xor i64 %2580, %2577
  %2582 = xor i64 %2581, %2576
  %2583 = xor i64 %2582, %2571
  %2584 = xor i64 %2583, %2574
  %2585 = xor i64 %2584, %2573
  %2586 = xor i64 %2585, 0
  %2587 = mul i64 %2570, %2586
  %2588 = trunc i64 %2587 to i8
  %2589 = icmp eq i8 %2552, %2588
  %2590 = mul i8 %2545, %2545
  %2591 = add i8 %2590, %2545
  %2592 = srem i8 %2591, 2
  %2593 = icmp eq i8 %2592, 0
  %2594 = xor i1 %2589, true
  %2595 = xor i1 %2593, true
  %2596 = or i1 %2594, %2595
  %2597 = xor i1 %2596, true
  %2598 = and i1 %2597, true
  %2599 = or i64 %81, 3723359762508170854
  %2600 = and i64 3723359762508170854, %81
  %2601 = xor i64 3723359762508170854, %81
  %2602 = or i64 %2600, %2601
  %2603 = add i64 %49, -2240960838264346547
  %2604 = and i64 -2240960838264346547, %49
  %2605 = or i64 -2240960838264346547, %49
  %2606 = add i64 %2604, %2605
  %2607 = xor i64 %2602, %2603
  %2608 = xor i64 %2607, %2599
  %2609 = xor i64 %2608, %2606
  %2610 = xor i64 %2609, -4447938347870682899
  %2611 = add i64 %83, 3121516513164887518
  %2612 = and i64 3121516513164887518, %83
  %2613 = or i64 3121516513164887518, %83
  %2614 = add i64 %2612, %2613
  %2615 = add i64 %105, -172236739493723328
  %2616 = sub i64 0, %105
  %2617 = sub i64 -172236739493723328, %2616
  %2618 = xor i64 %2617, %2615
  %2619 = xor i64 %2618, %2611
  %2620 = xor i64 %2619, %2614
  %2621 = xor i64 %2620, 6484405512703065397
  %2622 = mul i64 %2610, %2621
  %2623 = trunc i64 %2622 to i32
  %2624 = select i1 %2598, i32 595012161, i32 %2623
  %2625 = xor i32 %2624, 80
  store i32 %2625, i32* %4, align 4
  %2626 = call i8** @bf14862898971591998804(i32* %4)
  %2627 = load i8*, i8** %2626, align 8
  indirectbr i8* %2627, [label %loopEnd, label %codeRepl1]

2628:                                             ; preds = %2628, %loopStart
  %2629 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 21
  %2630 = load i32, i32* %2629, align 4
  %2631 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %2632 = load i32, i32* %2631, align 4
  %2633 = sub i32 %2630, %2632
  store i32 %2633, i32* %dispatcher, align 4
  %2634 = load i8*, i8** %142, align 8
  %2635 = load i8, i8* %2634, align 1
  %2636 = xor i8 %2635, -1
  %2637 = or i8 %2636, -2
  %2638 = xor i8 %2637, -1
  %2639 = and i8 %2638, -1
  %2640 = or i64 %89, 2991674871647876288
  %2641 = xor i64 %89, -1
  %2642 = and i64 %2641, -6028153484532644790
  %2643 = and i64 %89, 6028153484532644789
  %2644 = or i64 %2642, %2643
  %2645 = xor i64 -8803655283349999478, %2644
  %2646 = xor i64 %89, -1
  %2647 = or i64 -2991674871647876289, %2646
  %2648 = xor i64 %2647, -1
  %2649 = and i64 %2648, -1
  %2650 = or i64 %2645, %2649
  %2651 = and i64 %97, -735283973029970433
  %2652 = xor i64 %97, -1
  %2653 = xor i64 -735283973029970433, %2652
  %2654 = and i64 %2653, -735283973029970433
  %2655 = xor i64 %2650, 1643950023076848331
  %2656 = xor i64 %2655, %2654
  %2657 = xor i64 %2656, %2651
  %2658 = xor i64 %2657, %2640
  %2659 = or i64 %125, -5768971744435983125
  %2660 = xor i64 %125, -1
  %2661 = and i64 %2660, -8130577870511568101
  %2662 = and i64 %125, 8130577870511568100
  %2663 = or i64 %2661, %2662
  %2664 = xor i64 2367235626683672560, %2663
  %2665 = xor i64 %125, -1
  %2666 = or i64 5768971744435983124, %2665
  %2667 = xor i64 %2666, -1
  %2668 = and i64 %2667, -1
  %2669 = or i64 %2664, %2668
  %2670 = and i64 %21, -591730413923118441
  %2671 = or i64 591730413923118440, %21
  %2672 = sub i64 %2671, 591730413923118440
  %2673 = add i64 %233, 2241719558220364037
  %2674 = sub i64 0, %233
  %2675 = add i64 -2241719558220364037, %2674
  %2676 = sub i64 0, %2675
  %2677 = xor i64 %2676, %2672
  %2678 = xor i64 %2677, %2673
  %2679 = xor i64 %2678, %2670
  %2680 = xor i64 %2679, -7849204242097687837
  %2681 = xor i64 %2680, %2659
  %2682 = xor i64 %2681, %2669
  %2683 = mul i64 %2658, %2682
  %2684 = trunc i64 %2683 to i8
  %2685 = icmp eq i8 %2639, %2684
  %2686 = mul i8 %2635, %2635
  %2687 = add i8 %2686, %2635
  %2688 = and i64 %47, -501208898861005011
  %2689 = xor i64 %47, -1
  %2690 = xor i64 -501208898861005011, %2689
  %2691 = and i64 %2690, -501208898861005011
  %2692 = and i64 %121, -6339710701346484670
  %2693 = xor i64 %121, -1
  %2694 = or i64 6339710701346484669, %2693
  %2695 = xor i64 %2694, -1
  %2696 = and i64 %2695, -1
  %2697 = xor i64 -5389019095012354415, %2696
  %2698 = xor i64 %2697, %2688
  %2699 = xor i64 %2698, %2691
  %2700 = xor i64 %2699, %2692
  %2701 = add i64 %13, 5734962640276231701
  %2702 = add i64 -3646543668107789813, %13
  %2703 = sub i64 %2702, 9065237765325530102
  %2704 = add i64 %13, -7699235042031773605
  %2705 = xor i64 -7699235042031773605, %13
  %2706 = and i64 -7699235042031773605, %13
  %2707 = mul i64 2, %2706
  %2708 = add i64 %2705, %2707
  %2709 = or i64 %113, -3636222167331476842
  %2710 = xor i64 %113, -1
  %2711 = and i64 %2710, 1349348022550902766
  %2712 = and i64 %113, -1349348022550902767
  %2713 = or i64 %2711, %2712
  %2714 = xor i64 -2364297630792819336, %2713
  %2715 = xor i64 %113, -1
  %2716 = or i64 3636222167331476841, %2715
  %2717 = xor i64 %2716, -1
  %2718 = and i64 %2717, -1
  %2719 = or i64 %2714, %2718
  %2720 = xor i64 %2709, %2704
  %2721 = xor i64 %2720, %2719
  %2722 = xor i64 %2721, %2708
  %2723 = xor i64 %2722, %2701
  %2724 = xor i64 %2723, -7174676990586170142
  %2725 = xor i64 %2724, %2703
  %2726 = mul i64 %2700, %2725
  %2727 = trunc i64 %2726 to i8
  %2728 = srem i8 %2687, %2727
  %2729 = icmp eq i8 %2728, 0
  %2730 = and i1 %2685, %2729
  %2731 = xor i1 %2685, %2729
  %2732 = or i1 %2730, %2731
  %2733 = select i1 %2732, i32 595012118, i32 595012113
  %2734 = add i64 %111, -5440943134812470278
  %2735 = xor i64 -5440943134812470278, %111
  %2736 = and i64 -5440943134812470278, %111
  %2737 = mul i64 2, %2736
  %2738 = add i64 %2735, %2737
  %2739 = and i64 %218, -7174058421710557650
  %2740 = or i64 7174058421710557649, %218
  %2741 = sub i64 %2740, 7174058421710557649
  %2742 = and i64 %242, -1304324508494806824
  %2743 = xor i64 %242, -1
  %2744 = or i64 1304324508494806823, %2743
  %2745 = xor i64 %2744, -1
  %2746 = and i64 %2745, -1
  %2747 = xor i64 %2734, %2738
  %2748 = xor i64 %2747, -4732902138979833457
  %2749 = xor i64 %2748, %2739
  %2750 = xor i64 %2749, %2742
  %2751 = xor i64 %2750, %2741
  %2752 = xor i64 %2751, %2746
  %2753 = or i64 %51, -4990450766634731162
  %2754 = xor i64 %51, -1
  %2755 = and i64 -4990450766634731162, %2754
  %2756 = add i64 %2755, %51
  %2757 = and i64 %242, 3809561822699721643
  %2758 = xor i64 %242, -1
  %2759 = xor i64 3809561822699721643, %2758
  %2760 = and i64 %2759, 3809561822699721643
  %2761 = xor i64 %2756, %2757
  %2762 = xor i64 %2761, %2753
  %2763 = xor i64 %2762, %2760
  %2764 = xor i64 %2763, 4304947623328962057
  %2765 = mul i64 %2752, %2764
  %2766 = trunc i64 %2765 to i32
  %2767 = xor i32 %2733, %2766
  store i32 %2767, i32* %4, align 4
  %2768 = call i8** @bf14862898971591998804(i32* %4)
  %2769 = load i8*, i8** %2768, align 8
  indirectbr i8* %2769, [label %loopEnd, label %2628]

2770:                                             ; preds = %2770, %loopStart
  %2771 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 15
  %2772 = load i32, i32* %2771, align 4
  %2773 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 14
  %2774 = load i32, i32* %2773, align 4
  %2775 = add i32 %2772, %2774
  store i32 %2775, i32* %dispatcher, align 4
  %2776 = load i8*, i8** %142, align 8
  %2777 = load i8, i8* %2776, align 1
  %2778 = mul i8 %2777, %2777
  %2779 = add i8 %2778, %2777
  %2780 = mul i8 %2779, 3
  %2781 = srem i8 %2780, 2
  %2782 = icmp eq i8 %2781, 0
  %2783 = mul i8 %2777, %2777
  %2784 = xor i8 %2783, %2777
  %2785 = and i8 %2783, %2777
  %2786 = mul i8 2, %2785
  %2787 = add i8 %2784, %2786
  %2788 = mul i8 39, %2787
  %2789 = add i8 23, %2788
  %2790 = mul i8 -105, %2789
  %2791 = add i8 111, %2790
  %2792 = srem i8 %2791, 2
  %2793 = icmp eq i8 %2792, 0
  %2794 = and i1 %2782, %2793
  %2795 = select i1 %2794, i32 595012129, i32 595012113
  %2796 = or i64 %73, -7734827447990793446
  %2797 = and i64 -7734827447990793446, %73
  %2798 = xor i64 -7734827447990793446, %73
  %2799 = or i64 %2797, %2798
  %2800 = and i64 %101, 478985373705772431
  %2801 = or i64 -478985373705772432, %101
  %2802 = sub i64 %2801, -478985373705772432
  %2803 = xor i64 %2802, %2799
  %2804 = xor i64 %2803, %2800
  %2805 = xor i64 %2804, 8591386621361852651
  %2806 = xor i64 %2805, %2796
  %2807 = and i64 %111, -2485178489068489434
  %2808 = xor i64 %111, -1
  %2809 = xor i64 -2485178489068489434, %2808
  %2810 = and i64 %2809, -2485178489068489434
  %2811 = add i64 %53, -6494006679776416290
  %2812 = and i64 -6494006679776416290, %53
  %2813 = or i64 -6494006679776416290, %53
  %2814 = add i64 %2812, %2813
  %2815 = sext i32 %262 to i64
  %2816 = add i64 %2815, -6259095465331519303
  %2817 = sub i64 0, %2815
  %2818 = add i64 6259095465331519303, %2817
  %2819 = sub i64 0, %2818
  %2820 = xor i64 %2810, %2814
  %2821 = xor i64 %2820, %2819
  %2822 = xor i64 %2821, %2807
  %2823 = xor i64 %2822, %2816
  %2824 = xor i64 %2823, %2811
  %2825 = xor i64 %2824, 5725687043002234000
  %2826 = mul i64 %2806, %2825
  %2827 = trunc i64 %2826 to i32
  %2828 = or i32 %2795, %2827
  %2829 = and i32 %2795, 48
  %2830 = sub i32 %2828, %2829
  store i32 %2830, i32* %4, align 4
  %2831 = call i8** @bf14862898971591998804(i32* %4)
  %2832 = load i8*, i8** %2831, align 8
  indirectbr i8* %2832, [label %loopEnd, label %2770]

2833:                                             ; preds = %2833, %loopStart
  %2834 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  %2835 = load i32, i32* %2834, align 4
  %2836 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 13
  %2837 = load i32, i32* %2836, align 4
  %2838 = sub i32 %2835, %2837
  store i32 %2838, i32* %dispatcher, align 4
  %2839 = load i8*, i8** %118, align 8
  %2840 = load i8, i8* %2839, align 1
  %2841 = mul i8 %2840, 2
  %2842 = mul i8 %2840, 2
  %2843 = add i8 2, %2842
  %2844 = mul i8 %2841, %2843
  %2845 = srem i8 %2844, 4
  %2846 = icmp eq i8 %2845, 0
  %2847 = mul i8 %2840, %2840
  %2848 = mul i8 %2847, %2840
  %2849 = add i8 %2848, %2840
  %2850 = srem i8 %2849, 2
  %2851 = icmp eq i8 %2850, 0
  %2852 = add i64 %117, -7464722743924507572
  %2853 = and i64 -7464722743924507572, %117
  %2854 = or i64 -7464722743924507572, %117
  %2855 = add i64 %2853, %2854
  %2856 = add i64 %53, 6824924479098765932
  %2857 = xor i64 6824924479098765932, %53
  %2858 = and i64 6824924479098765932, %53
  %2859 = mul i64 2, %2858
  %2860 = add i64 %2857, %2859
  %2861 = or i64 %93, 8265247394178125188
  %2862 = xor i64 %93, -1
  %2863 = and i64 8265247394178125188, %2862
  %2864 = add i64 %2863, %93
  %2865 = xor i64 7591013098349626123, %2860
  %2866 = xor i64 %2865, %2855
  %2867 = xor i64 %2866, %2864
  %2868 = xor i64 %2867, %2856
  %2869 = xor i64 %2868, %2861
  %2870 = xor i64 %2869, %2852
  %2871 = and i64 %79, -4762179931539948707
  %2872 = xor i64 %79, -1
  %2873 = xor i64 -4762179931539948707, %2872
  %2874 = and i64 %2873, -4762179931539948707
  %2875 = or i64 %9, -5474543569120142945
  %2876 = xor i64 %9, -1
  %2877 = and i64 %2876, -6084774434066550998
  %2878 = and i64 %9, 6084774434066550997
  %2879 = or i64 %2877, %2878
  %2880 = xor i64 2272077303748261557, %2879
  %2881 = xor i64 %9, -1
  %2882 = or i64 5474543569120142944, %2881
  %2883 = xor i64 %2882, -1
  %2884 = and i64 %2883, -1
  %2885 = or i64 %2880, %2884
  %2886 = add i64 %81, -7587253399793208426
  %2887 = add i64 -1733852258991135815, %81
  %2888 = add i64 %2887, -5853401140802072611
  %2889 = xor i64 6808169993540251811, %2875
  %2890 = xor i64 %2889, %2888
  %2891 = xor i64 %2890, %2871
  %2892 = xor i64 %2891, %2886
  %2893 = xor i64 %2892, %2885
  %2894 = xor i64 %2893, %2874
  %2895 = mul i64 %2870, %2894
  %2896 = trunc i64 %2895 to i1
  %2897 = xor i1 %2846, %2896
  %2898 = xor i1 %2851, true
  %2899 = or i1 %2897, %2898
  %2900 = xor i1 %2899, true
  %2901 = and i64 %99, -4083137158136828392
  %2902 = xor i64 %99, -1
  %2903 = or i64 4083137158136828391, %2902
  %2904 = xor i64 %2903, -1
  %2905 = and i64 %2904, -1
  %2906 = and i64 %95, 2626264990073649383
  %2907 = xor i64 %95, -1
  %2908 = xor i64 2626264990073649383, %2907
  %2909 = and i64 %2908, 2626264990073649383
  %2910 = xor i64 %2909, %2901
  %2911 = xor i64 %2910, %2905
  %2912 = xor i64 %2911, %2906
  %2913 = xor i64 %2912, -2443214191340239361
  %2914 = and i64 %9, -4432671980496419619
  %2915 = xor i64 %9, -1
  %2916 = xor i64 -4432671980496419619, %2915
  %2917 = and i64 %2916, -4432671980496419619
  %2918 = add i64 %45, 7553569839860647930
  %2919 = xor i64 7553569839860647930, %45
  %2920 = and i64 7553569839860647930, %45
  %2921 = mul i64 2, %2920
  %2922 = add i64 %2919, %2921
  %2923 = and i64 %137, 9138178210592212650
  %2924 = xor i64 %137, -1
  %2925 = or i64 -9138178210592212651, %2924
  %2926 = xor i64 %2925, -1
  %2927 = and i64 %2926, -1
  %2928 = xor i64 %2923, %2918
  %2929 = xor i64 %2928, %2927
  %2930 = xor i64 %2929, -8048820309490189825
  %2931 = xor i64 %2930, %2917
  %2932 = xor i64 %2931, %2922
  %2933 = xor i64 %2932, %2914
  %2934 = mul i64 %2913, %2933
  %2935 = trunc i64 %2934 to i1
  %2936 = and i1 %2900, %2935
  %2937 = select i1 %2936, i32 595012106, i32 595012113
  %2938 = xor i32 %2937, 27
  store i32 %2938, i32* %4, align 4
  %2939 = call i8** @bf14862898971591998804(i32* %4)
  %2940 = load i8*, i8** %2939, align 8
  indirectbr i8* %2940, [label %loopEnd, label %2833]

2941:                                             ; preds = %2941, %loopStart
  %.reload3 = load i32, i32* %.reg2mem, align 4
  %2942 = srem i32 %.reload3, 2
  %2943 = icmp eq i32 %2942, 0
  %2944 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 40
  %2945 = load i32, i32* %2944, align 4
  %2946 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  %2947 = load i32, i32* %2946, align 4
  %2948 = sub i32 %2945, %2947
  %2949 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 41
  %2950 = load i32, i32* %2949, align 4
  %2951 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  %2952 = load i32, i32* %2951, align 4
  %2953 = sub i32 %2950, %2952
  %2954 = select i1 %2943, i32 %2948, i32 %2953
  store i32 %2954, i32* %dispatcher, align 4
  %2955 = load i8*, i8** %110, align 8
  %2956 = load i8, i8* %2955, align 1
  %2957 = mul i8 %2956, 2
  %2958 = mul i8 %2956, 2
  %2959 = add i8 100, %2958
  %2960 = sub i8 %2959, 98
  %2961 = mul i8 %2957, %2960
  %2962 = or i64 %47, -1748815784734160940
  %2963 = xor i64 %47, -1
  %2964 = and i64 -1748815784734160940, %2963
  %2965 = add i64 %2964, %47
  %2966 = and i64 %67, 7505204486990570949
  %2967 = xor i64 %67, -1
  %2968 = xor i64 7505204486990570949, %2967
  %2969 = and i64 %2968, 7505204486990570949
  %2970 = xor i64 %2969, %2962
  %2971 = xor i64 %2970, %2965
  %2972 = xor i64 %2971, %2966
  %2973 = xor i64 %2972, -4337253127210436127
  %2974 = add i64 %215, 399366080424216896
  %2975 = and i64 399366080424216896, %215
  %2976 = or i64 399366080424216896, %215
  %2977 = add i64 %2975, %2976
  %2978 = add i64 %133, 6892161080086078250
  %2979 = and i64 6892161080086078250, %133
  %2980 = or i64 6892161080086078250, %133
  %2981 = add i64 %2979, %2980
  %2982 = add i64 %77, -5352835912767496918
  %2983 = add i64 6180893083545452226, %77
  %2984 = sub i64 %2983, -6913015077396602472
  %2985 = xor i64 %2981, %2977
  %2986 = xor i64 %2985, %2978
  %2987 = xor i64 %2986, %2974
  %2988 = xor i64 %2987, %2982
  %2989 = xor i64 %2988, %2984
  %2990 = xor i64 %2989, -725154336764974972
  %2991 = mul i64 %2973, %2990
  %2992 = trunc i64 %2991 to i8
  %2993 = srem i8 %2961, %2992
  %2994 = icmp eq i8 %2993, 0
  %2995 = mul i8 %2956, %2956
  %2996 = xor i8 %2995, %2956
  %2997 = and i8 %2995, %2956
  %2998 = mul i8 2, %2997
  %2999 = add i8 %2996, %2998
  %3000 = mul i8 39, %2999
  %3001 = add i8 23, %3000
  %3002 = mul i8 -105, %3001
  %3003 = add i8 111, %3002
  %3004 = srem i8 %3003, 2
  %3005 = icmp eq i8 %3004, 0
  %3006 = xor i1 %2994, true
  %3007 = or i1 %3006, %3005
  %3008 = xor i1 %2994, true
  %3009 = sub i1 %3007, %3008
  %3010 = select i1 %3009, i32 595012143, i32 595012113
  %3011 = or i32 %3010, 62
  %3012 = and i32 %3010, 62
  %3013 = sub i32 %3011, %3012
  store i32 %3013, i32* %4, align 4
  %3014 = call i8** @bf14862898971591998804(i32* %4)
  %3015 = load i8*, i8** %3014, align 8
  indirectbr i8* %3015, [label %loopEnd, label %2941]

3016:                                             ; preds = %3016, %loopStart
  %3017 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 32
  %3018 = load i32, i32* %3017, align 4
  %3019 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %3020 = load i32, i32* %3019, align 4
  %3021 = srem i32 %3018, %3020
  store i32 %3021, i32* %dispatcher, align 4
  %3022 = load i8*, i8** %80, align 8
  %3023 = load i8, i8* %3022, align 1
  %3024 = mul i8 %3023, %3023
  %3025 = add i8 %3024, %3023
  %3026 = mul i8 %3025, 3
  %3027 = srem i8 %3026, 2
  %3028 = add i64 %83, -2571259342970210338
  %3029 = sub i64 0, %83
  %3030 = sub i64 -2571259342970210338, %3029
  %3031 = add i64 %89, -8710678871490553229
  %3032 = sub i64 0, %89
  %3033 = sub i64 -8710678871490553229, %3032
  %3034 = add i64 %218, 5189700411022835917
  %3035 = sub i64 0, %218
  %3036 = sub i64 5189700411022835917, %3035
  %3037 = xor i64 %3031, %3028
  %3038 = xor i64 %3037, -8538498693974667635
  %3039 = xor i64 %3038, %3033
  %3040 = xor i64 %3039, %3030
  %3041 = xor i64 %3040, %3036
  %3042 = xor i64 %3041, %3034
  %3043 = add i64 %77, -7351779989596886339
  %3044 = add i64 -5276731605987025365, %77
  %3045 = sub i64 %3044, 2075048383609860974
  %3046 = or i64 %79, -5203066824447589149
  %3047 = xor i64 %79, -1
  %3048 = and i64 %3047, 5278928526509237471
  %3049 = and i64 %79, -5278928526509237472
  %3050 = or i64 %3048, %3049
  %3051 = xor i64 -105698471189880772, %3050
  %3052 = xor i64 %79, -1
  %3053 = or i64 5203066824447589148, %3052
  %3054 = xor i64 %3053, -1
  %3055 = and i64 %3054, -1
  %3056 = or i64 %3051, %3055
  %3057 = add i64 %31, 8703956194521921701
  %3058 = add i64 2949395899852922996, %31
  %3059 = add i64 %3058, 5754560294668998705
  %3060 = xor i64 %3046, %3057
  %3061 = xor i64 %3060, %3059
  %3062 = xor i64 %3061, %3056
  %3063 = xor i64 %3062, %3043
  %3064 = xor i64 %3063, %3045
  %3065 = xor i64 %3064, 0
  %3066 = mul i64 %3042, %3065
  %3067 = trunc i64 %3066 to i8
  %3068 = icmp eq i8 %3027, %3067
  %3069 = mul i8 %3023, %3023
  %3070 = add i8 %3069, %3023
  %3071 = srem i8 %3070, 2
  %3072 = icmp eq i8 %3071, 0
  %3073 = and i1 %3068, %3072
  %3074 = select i1 %3073, i32 595012121, i32 595012113
  %3075 = xor i32 %3074, 8
  store i32 %3075, i32* %4, align 4
  %3076 = call i8** @bf14862898971591998804(i32* %4)
  %3077 = load i8*, i8** %3076, align 8
  indirectbr i8* %3077, [label %loopEnd, label %3016]

3078:                                             ; preds = %3078, %loopStart
  %3079 = sdiv i64 31, 31
  %3080 = mul i64 95, 98
  %3081 = and i64 %133, 7303868504025930350
  %3082 = xor i64 %133, -1
  %3083 = xor i64 7303868504025930350, %3082
  %3084 = and i64 %3083, 7303868504025930350
  %3085 = and i64 %139, -5656372127225018343
  %3086 = xor i64 %139, -1
  %3087 = or i64 5656372127225018342, %3086
  %3088 = xor i64 %3087, -1
  %3089 = and i64 %3088, -1
  %3090 = or i64 %53, -1045223917617247440
  %3091 = xor i64 %53, -1
  %3092 = and i64 -1045223917617247440, %3091
  %3093 = add i64 %3092, %53
  %3094 = xor i64 -5698598221703429241, %3084
  %3095 = xor i64 %3094, %3090
  %3096 = xor i64 %3095, %3089
  %3097 = xor i64 %3096, %3081
  %3098 = xor i64 %3097, %3093
  %3099 = xor i64 %3098, %3085
  %3100 = add i64 %135, 5698700505672926714
  %3101 = sub i64 0, %135
  %3102 = sub i64 5698700505672926714, %3101
  %3103 = and i64 %113, -7106519929096923441
  %3104 = or i64 7106519929096923440, %113
  %3105 = sub i64 %3104, 7106519929096923440
  %3106 = or i64 %21, 2297498388127685948
  %3107 = and i64 2297498388127685948, %21
  %3108 = xor i64 2297498388127685948, %21
  %3109 = or i64 %3107, %3108
  %3110 = xor i64 %3106, %3103
  %3111 = xor i64 %3110, %3102
  %3112 = xor i64 %3111, %3105
  %3113 = xor i64 %3112, 4412560385323676460
  %3114 = xor i64 %3113, %3109
  %3115 = xor i64 %3114, %3100
  %3116 = mul i64 %3099, %3115
  %3117 = sub i64 %3116, 106
  %3118 = sdiv i64 37, 15
  %3119 = sub i64 9, -69
  %.reload79 = load i32, i32* %.reg2mem78, align 4
  %3120 = srem i32 %.reload79, 2
  %3121 = icmp eq i32 %3120, 0
  %.reload29 = load i32, i32* %.reg2mem18, align 4
  %3122 = mul i32 %.reload29, 2
  %.reload28 = load i32, i32* %.reg2mem18, align 4
  %3123 = and i64 %248, -7340379486823387677
  %3124 = xor i64 %248, -1
  %3125 = xor i64 -7340379486823387677, %3124
  %3126 = and i64 %3125, -7340379486823387677
  %3127 = and i64 %35, -8855119436935570532
  %3128 = xor i64 %35, -1
  %3129 = or i64 8855119436935570531, %3128
  %3130 = xor i64 %3129, -1
  %3131 = and i64 %3130, -1
  %3132 = xor i64 -3252852086689421957, %3127
  %3133 = xor i64 %3132, %3126
  %3134 = xor i64 %3133, %3131
  %3135 = xor i64 %3134, %3123
  %3136 = add i64 %224, -4224074397943903758
  %3137 = sub i64 0, %224
  %3138 = add i64 4224074397943903758, %3137
  %3139 = sub i64 0, %3138
  %3140 = add i64 %63, -6221148853256886774
  %3141 = xor i64 -6221148853256886774, %63
  %3142 = and i64 -6221148853256886774, %63
  %3143 = mul i64 2, %3142
  %3144 = add i64 %3141, %3143
  %3145 = and i64 %25, -4041076089992326945
  %3146 = xor i64 %25, -1
  %3147 = xor i64 -4041076089992326945, %3146
  %3148 = and i64 %3147, -4041076089992326945
  %3149 = xor i64 %3145, %3136
  %3150 = xor i64 %3149, %3140
  %3151 = xor i64 %3150, %3139
  %3152 = xor i64 %3151, 1129047910311650150
  %3153 = xor i64 %3152, %3144
  %3154 = xor i64 %3153, %3148
  %3155 = mul i64 %3135, %3154
  %3156 = trunc i64 %3155 to i32
  %3157 = mul i32 %.reload28, %3156
  %3158 = add i32 1454263032, %3157
  %3159 = and i64 %109, -2003013076465801588
  %3160 = xor i64 %109, -1
  %3161 = xor i64 -2003013076465801588, %3160
  %3162 = and i64 %3161, -2003013076465801588
  %3163 = or i64 %93, -7003928051812693226
  %3164 = xor i64 %93, -1
  %3165 = and i64 %3164, 8932411126771628758
  %3166 = and i64 %93, -8932411126771628759
  %3167 = or i64 %3165, %3166
  %3168 = xor i64 -1928877562604834368, %3167
  %3169 = xor i64 %93, -1
  %3170 = or i64 7003928051812693225, %3169
  %3171 = xor i64 %3170, -1
  %3172 = and i64 %3171, -1
  %3173 = or i64 %3168, %3172
  %3174 = and i64 %129, -5825400818618500019
  %3175 = or i64 5825400818618500018, %129
  %3176 = sub i64 %3175, 5825400818618500018
  %3177 = xor i64 %3162, %3173
  %3178 = xor i64 %3177, %3163
  %3179 = xor i64 %3178, %3176
  %3180 = xor i64 %3179, %3174
  %3181 = xor i64 %3180, %3159
  %3182 = xor i64 %3181, -1209994233323940125
  %3183 = add i64 %236, -1562436603394038247
  %3184 = add i64 7298854696088263258, %236
  %3185 = sub i64 %3184, 8861291299482301505
  %3186 = and i64 %57, -4629491858554883558
  %3187 = xor i64 %57, -1
  %3188 = xor i64 -4629491858554883558, %3187
  %3189 = and i64 %3188, -4629491858554883558
  %3190 = and i64 %230, 8707560950404432504
  %3191 = xor i64 %230, -1
  %3192 = or i64 -8707560950404432505, %3191
  %3193 = xor i64 %3192, -1
  %3194 = and i64 %3193, -1
  %3195 = xor i64 %3189, -2765731149049611538
  %3196 = xor i64 %3195, %3190
  %3197 = xor i64 %3196, %3185
  %3198 = xor i64 %3197, %3194
  %3199 = xor i64 %3198, %3186
  %3200 = xor i64 %3199, %3183
  %3201 = mul i64 %3182, %3200
  %3202 = trunc i64 %3201 to i32
  %3203 = add i32 %3158, %3202
  %3204 = mul i32 %3122, %3203
  %3205 = srem i32 %3204, 4
  %3206 = icmp eq i32 %3205, 0
  %.reload27 = load i32, i32* %.reg2mem18, align 4
  %3207 = mul i32 %.reload27, %.reload27
  %.reload26 = load i32, i32* %.reg2mem18, align 4
  %3208 = add i32 %3207, %.reload26
  %3209 = srem i32 %3208, 2
  %3210 = icmp eq i32 %3209, 0
  %3211 = and i1 %3206, %3210
  store i1 %3211, i1* %.reg2mem81, align 1
  %3212 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 47
  %3213 = load i32, i32* %3212, align 4
  %3214 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 21
  %3215 = load i32, i32* %3214, align 4
  %3216 = sub i32 %3213, %3215
  %3217 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 17
  %3218 = load i32, i32* %3217, align 4
  %3219 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  %3220 = load i32, i32* %3219, align 4
  %3221 = add i32 %3218, %3220
  %.reload83 = load i1, i1* %.reg2mem81, align 1
  %3222 = select i1 %.reload83, i32 %3216, i32 %3221
  store i32 %3222, i32* %dispatcher, align 4
  %3223 = load i8*, i8** %38, align 8
  %3224 = load i8, i8* %3223, align 1
  %3225 = and i8 %3224, 1
  %3226 = icmp eq i8 %3225, 1
  %3227 = mul i8 %3224, %3224
  %3228 = add i8 %3227, %3224
  %3229 = add i64 %31, -5971947453209875929
  %3230 = sub i64 0, %31
  %3231 = sub i64 -5971947453209875929, %3230
  %3232 = and i64 %251, 2316718145955528760
  %3233 = xor i64 %251, -1
  %3234 = xor i64 2316718145955528760, %3233
  %3235 = and i64 %3234, 2316718145955528760
  %3236 = xor i64 %3229, 1699486875953913125
  %3237 = xor i64 %3236, %3231
  %3238 = xor i64 %3237, %3232
  %3239 = xor i64 %3238, %3235
  %3240 = and i64 %129, -1887489118729861670
  %3241 = xor i64 %129, -1
  %3242 = or i64 1887489118729861669, %3241
  %3243 = xor i64 %3242, -1
  %3244 = and i64 %3243, -1
  %3245 = and i64 %53, 3052978922267551515
  %3246 = or i64 -3052978922267551516, %53
  %3247 = sub i64 %3246, -3052978922267551516
  %3248 = xor i64 %3244, %3245
  %3249 = xor i64 %3248, 373454688397684058
  %3250 = xor i64 %3249, %3240
  %3251 = xor i64 %3250, %3247
  %3252 = mul i64 %3239, %3251
  %3253 = trunc i64 %3252 to i8
  %3254 = srem i8 %3228, %3253
  %3255 = icmp eq i8 %3254, 0
  %3256 = or i1 %3226, %3255
  %3257 = select i1 %3256, i32 595012103, i32 595012113
  %3258 = xor i32 %3257, 22
  store i32 %3258, i32* %4, align 4
  %3259 = call i8** @bf14862898971591998804(i32* %4)
  %3260 = load i8*, i8** %3259, align 8
  indirectbr i8* %3260, [label %loopEnd, label %3078]

3261:                                             ; preds = %3261, %loopStart
  %3262 = add i64 %17, 6622102139070783708
  %3263 = add i64 9106084251957046772, %17
  %3264 = sub i64 %3263, 2483982112886263064
  %3265 = and i64 %49, 7633944082675654861
  %3266 = or i64 -7633944082675654862, %49
  %3267 = sub i64 %3266, -7633944082675654862
  %3268 = add i64 %39, -6908710437272893498
  %3269 = xor i64 -6908710437272893498, %39
  %3270 = and i64 -6908710437272893498, %39
  %3271 = mul i64 2, %3270
  %3272 = add i64 %3269, %3271
  %3273 = xor i64 -6315760022786533005, %3267
  %3274 = xor i64 %3273, %3268
  %3275 = xor i64 %3274, %3272
  %3276 = xor i64 %3275, %3262
  %3277 = xor i64 %3276, %3265
  %3278 = xor i64 %3277, %3264
  %3279 = or i64 %117, -8170758313462866624
  %3280 = xor i64 %117, -1
  %3281 = and i64 %3280, 565566804114228160
  %3282 = and i64 %117, -565566804114228161
  %3283 = or i64 %3281, %3282
  %3284 = xor i64 -8556013998007214464, %3283
  %3285 = xor i64 %117, -1
  %3286 = or i64 8170758313462866623, %3285
  %3287 = xor i64 %3286, -1
  %3288 = and i64 %3287, -1
  %3289 = or i64 %3284, %3288
  %3290 = and i64 %71, -5347335833808689336
  %3291 = or i64 5347335833808689335, %71
  %3292 = sub i64 %3291, 5347335833808689335
  %3293 = xor i64 %3292, -4172237335725819810
  %3294 = xor i64 %3293, %3289
  %3295 = xor i64 %3294, %3290
  %3296 = xor i64 %3295, %3279
  %3297 = mul i64 %3278, %3296
  %3298 = mul i64 3, %3297
  %3299 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  %3300 = load i32, i32* %3299, align 4
  %3301 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  %3302 = load i32, i32* %3301, align 4
  %3303 = add i32 %3300, %3302
  store i32 %3303, i32* %dispatcher, align 4
  %3304 = load i8*, i8** %52, align 8
  %3305 = load i8, i8* %3304, align 1
  %3306 = and i8 %3305, 1
  %3307 = icmp eq i8 %3306, 0
  %3308 = mul i8 %3305, %3305
  %3309 = and i8 %3308, %3305
  %3310 = or i8 %3308, %3305
  %3311 = add i8 %3309, %3310
  %3312 = mul i8 %3311, 3
  %3313 = srem i8 %3312, 2
  %3314 = icmp eq i8 %3313, 0
  %3315 = and i1 %3307, %3314
  %3316 = xor i1 %3307, %3314
  %3317 = or i1 %3315, %3316
  %3318 = select i1 %3317, i32 595012151, i32 595012113
  %3319 = xor i32 %3318, 38
  store i32 %3319, i32* %4, align 4
  %3320 = call i8** @bf14862898971591998804(i32* %4)
  %3321 = load i8*, i8** %3320, align 8
  indirectbr i8* %3321, [label %loopEnd, label %3261]

3322:                                             ; preds = %3322, %loopStart
  %3323 = mul i64 3, 58
  %3324 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  %3325 = load i32, i32* %3324, align 4
  %3326 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  %3327 = load i32, i32* %3326, align 4
  %3328 = add i32 %3325, %3327
  %3329 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 15
  %3330 = load i32, i32* %3329, align 4
  %3331 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 14
  %3332 = load i32, i32* %3331, align 4
  %3333 = and i64 %9, 5742203205703198047
  %3334 = xor i64 %9, -1
  %3335 = or i64 -5742203205703198048, %3334
  %3336 = xor i64 %3335, -1
  %3337 = and i64 %3336, -1
  %3338 = or i64 %39, -4370448440846003692
  %3339 = xor i64 %39, -1
  %3340 = and i64 -4370448440846003692, %3339
  %3341 = add i64 %3340, %39
  %3342 = xor i64 %3341, %3337
  %3343 = xor i64 %3342, %3333
  %3344 = xor i64 %3343, -1868834766330162445
  %3345 = xor i64 %3344, %3338
  %3346 = or i64 %242, -120713623694718726
  %3347 = xor i64 %242, -1
  %3348 = and i64 -120713623694718726, %3347
  %3349 = add i64 %3348, %242
  %3350 = and i64 %141, -6522837400956519897
  %3351 = xor i64 %141, -1
  %3352 = xor i64 -6522837400956519897, %3351
  %3353 = and i64 %3352, -6522837400956519897
  %3354 = xor i64 %3350, %3346
  %3355 = xor i64 %3354, %3353
  %3356 = xor i64 %3355, %3349
  %3357 = xor i64 %3356, 0
  %3358 = mul i64 %3345, %3357
  %3359 = trunc i64 %3358 to i32
  %3360 = sub i32 %3359, %3330
  %3361 = sub i32 0, %3332
  %3362 = add i32 %3360, %3361
  %3363 = sub i32 0, %3362
  %.reload82 = load i1, i1* %.reg2mem81, align 1
  %3364 = select i1 %.reload82, i32 %3328, i32 %3363
  store i32 %3364, i32* %dispatcher, align 4
  %3365 = load i8*, i8** %78, align 8
  %3366 = load i8, i8* %3365, align 1
  %3367 = and i8 %3366, 1
  %3368 = icmp eq i8 %3367, 1
  %3369 = mul i8 %3366, %3366
  %3370 = add i8 %3369, %3366
  %3371 = srem i8 %3370, 2
  %3372 = icmp eq i8 %3371, 0
  %3373 = or i1 %3368, %3372
  %3374 = select i1 %3373, i32 595012150, i32 595012113
  %3375 = or i32 %3374, 39
  %3376 = and i32 %3374, 39
  %3377 = sub i32 %3375, %3376
  store i32 %3377, i32* %4, align 4
  %3378 = call i8** @bf14862898971591998804(i32* %4)
  %3379 = load i8*, i8** %3378, align 8
  indirectbr i8* %3379, [label %loopEnd, label %3322]

3380:                                             ; preds = %3380, %loopStart
  %3381 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 32
  %3382 = load i32, i32* %3381, align 4
  %3383 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %3384 = load i32, i32* %3383, align 4
  %3385 = srem i32 %3382, %3384
  store i32 %3385, i32* %dispatcher, align 4
  %3386 = load i8*, i8** %124, align 8
  %3387 = load i8, i8* %3386, align 1
  %3388 = mul i8 %3387, 2
  %3389 = mul i8 %3387, 2
  %3390 = add i8 2, %3389
  %3391 = mul i8 %3388, %3390
  %3392 = srem i8 %3391, 4
  %3393 = icmp eq i8 %3392, 0
  %3394 = mul i8 %3387, %3387
  %3395 = and i8 %3394, %3387
  %3396 = or i8 %3394, %3387
  %3397 = add i8 %3395, %3396
  %3398 = srem i8 %3397, 2
  %3399 = icmp eq i8 %3398, 0
  %3400 = and i1 %3393, %3399
  %3401 = xor i1 %3393, %3399
  %3402 = or i1 %3400, %3401
  %3403 = select i1 %3402, i32 595012165, i32 595012113
  %3404 = xor i32 %3403, 84
  store i32 %3404, i32* %4, align 4
  %3405 = call i8** @bf14862898971591998804(i32* %4)
  %3406 = load i8*, i8** %3405, align 8
  indirectbr i8* %3406, [label %loopEnd, label %3380]

3407:                                             ; preds = %3407, %loopStart
  %3408 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  %3409 = load i32, i32* %3408, align 4
  %3410 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %3411 = load i32, i32* %3410, align 4
  %3412 = srem i32 %3409, %3411
  store i32 %3412, i32* %dispatcher, align 4
  %.reload25 = load i32, i32* %.reg2mem18, align 4
  store i32 %.reload25, i32* %.reg2mem175, align 4
  store double 0.000000e+00, double* %.reg2mem177, align 8
  %3413 = load i8*, i8** %94, align 8
  %3414 = load i8, i8* %3413, align 1
  %3415 = mul i8 %3414, 2
  %3416 = mul i8 %3414, 2
  %3417 = add i8 2, %3416
  %3418 = mul i8 %3415, %3417
  %3419 = srem i8 %3418, 4
  %3420 = icmp eq i8 %3419, 0
  %3421 = mul i8 %3414, %3414
  %3422 = add i8 %3421, %3414
  %3423 = srem i8 %3422, 2
  %3424 = icmp eq i8 %3423, 0
  %3425 = and i1 %3420, %3424
  %3426 = select i1 %3425, i32 595012105, i32 595012113
  %3427 = or i32 %3426, 24
  %3428 = and i32 %3426, 24
  %3429 = sub i32 %3427, %3428
  store i32 %3429, i32* %4, align 4
  %3430 = call i8** @bf14862898971591998804(i32* %4)
  %3431 = load i8*, i8** %3430, align 8
  indirectbr i8* %3431, [label %loopEnd, label %3407]

3432:                                             ; preds = %3432, %loopStart
  %.reload11.reload94 = load i32, i32* %.reload11.reg2mem, align 4
  %3433 = mul i32 %.reload11.reload94, 2
  %.reload11.reload95 = load i32, i32* %.reload11.reg2mem, align 4
  %3434 = mul i32 %.reload11.reload95, 2
  %3435 = add i32 2, %3434
  %3436 = mul i32 %3433, %3435
  %3437 = srem i32 %3436, 4
  %3438 = and i64 %99, 3128131696757687870
  %3439 = xor i64 %99, -1
  %3440 = xor i64 3128131696757687870, %3439
  %3441 = and i64 %3440, 3128131696757687870
  %3442 = or i64 %49, 6234838345614543303
  %3443 = and i64 6234838345614543303, %49
  %3444 = xor i64 6234838345614543303, %49
  %3445 = or i64 %3443, %3444
  %3446 = add i64 %139, -7682407832396846008
  %3447 = sub i64 0, %139
  %3448 = sub i64 -7682407832396846008, %3447
  %3449 = xor i64 %3445, 2388795592248273871
  %3450 = xor i64 %3449, %3448
  %3451 = xor i64 %3450, %3442
  %3452 = xor i64 %3451, %3441
  %3453 = xor i64 %3452, %3446
  %3454 = xor i64 %3453, %3438
  %3455 = and i64 %93, 3533977761243745990
  %3456 = xor i64 %93, -1
  %3457 = xor i64 3533977761243745990, %3456
  %3458 = and i64 %3457, 3533977761243745990
  %3459 = add i64 %53, -5938104184720963492
  %3460 = sub i64 0, %53
  %3461 = add i64 5938104184720963492, %3460
  %3462 = sub i64 0, %3461
  %3463 = and i64 %129, -1932054885225509410
  %3464 = xor i64 %129, -1
  %3465 = or i64 1932054885225509409, %3464
  %3466 = xor i64 %3465, -1
  %3467 = and i64 %3466, -1
  %3468 = xor i64 %3462, %3467
  %3469 = xor i64 %3468, %3455
  %3470 = xor i64 %3469, %3463
  %3471 = xor i64 %3470, %3459
  %3472 = xor i64 %3471, %3458
  %3473 = xor i64 %3472, 0
  %3474 = mul i64 %3454, %3473
  %3475 = trunc i64 %3474 to i32
  %3476 = icmp eq i32 %3437, %3475
  %.reload11.reload96 = load i32, i32* %.reload11.reg2mem, align 4
  %3477 = mul i32 %.reload11.reload96, %.reload11.reload96
  %.reload11.reload97 = load i32, i32* %.reload11.reg2mem, align 4
  %3478 = add i32 %3477, %.reload11.reload97
  %3479 = srem i32 %3478, 2
  %3480 = icmp eq i32 %3479, 0
  %3481 = xor i1 %3480, true
  %3482 = xor i1 %3476, %3481
  %3483 = and i1 %3482, %3476
  %3484 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 19
  %3485 = load i32, i32* %3484, align 4
  %3486 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  %3487 = load i32, i32* %3486, align 4
  %3488 = add i32 %3485, %3487
  %3489 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 20
  %3490 = load i32, i32* %3489, align 4
  %3491 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  %3492 = load i32, i32* %3491, align 4
  %3493 = add i32 %3490, %3492
  %3494 = select i1 %3483, i32 %3488, i32 %3493
  store i32 %3494, i32* %dispatcher, align 4
  %3495 = load i8*, i8** %50, align 8
  %3496 = load i8, i8* %3495, align 1
  %3497 = mul i8 %3496, %3496
  %3498 = add i8 %3497, %3496
  %3499 = mul i8 %3498, 3
  %3500 = srem i8 %3499, 2
  %3501 = icmp eq i8 %3500, 0
  %3502 = mul i8 %3496, %3496
  %3503 = add i8 %3502, %3496
  %3504 = srem i8 %3503, 2
  %3505 = add i64 %71, -8766135055006707732
  %3506 = xor i64 -8766135055006707732, %71
  %3507 = and i64 -8766135055006707732, %71
  %3508 = mul i64 2, %3507
  %3509 = add i64 %3506, %3508
  %3510 = or i64 %31, 1215372581169460876
  %3511 = xor i64 %31, -1
  %3512 = and i64 %3511, 354478765656777140
  %3513 = and i64 %31, -354478765656777141
  %3514 = or i64 %3512, %3513
  %3515 = xor i64 1456494893114251064, %3514
  %3516 = xor i64 %31, -1
  %3517 = or i64 -1215372581169460877, %3516
  %3518 = xor i64 %3517, -1
  %3519 = and i64 %3518, -1
  %3520 = or i64 %3515, %3519
  %3521 = xor i64 7055746067411118239, %3520
  %3522 = xor i64 %3521, %3505
  %3523 = xor i64 %3522, %3509
  %3524 = xor i64 %3523, %3510
  %3525 = or i64 %139, -7181268375999871096
  %3526 = xor i64 %139, -1
  %3527 = and i64 -7181268375999871096, %3526
  %3528 = add i64 %3527, %139
  %3529 = or i64 %101, 8717415373683593323
  %3530 = and i64 8717415373683593323, %101
  %3531 = xor i64 8717415373683593323, %101
  %3532 = or i64 %3530, %3531
  %3533 = xor i64 %3525, 0
  %3534 = xor i64 %3533, %3529
  %3535 = xor i64 %3534, %3528
  %3536 = xor i64 %3535, %3532
  %3537 = mul i64 %3524, %3536
  %3538 = trunc i64 %3537 to i8
  %3539 = icmp eq i8 %3504, %3538
  %3540 = and i1 %3501, %3539
  %3541 = add i64 %111, 7942093432031607044
  %3542 = add i64 -3057271075393408915, %111
  %3543 = sub i64 %3542, 7447379566284535657
  %3544 = and i64 %121, -1259060014044085478
  %3545 = or i64 1259060014044085477, %121
  %3546 = sub i64 %3545, 1259060014044085477
  %3547 = add i64 %135, -8335867011505973771
  %3548 = add i64 6225548116209925070, %135
  %3549 = add i64 %3548, 3885328945993652775
  %3550 = xor i64 3462894080604350069, %3543
  %3551 = xor i64 %3550, %3541
  %3552 = xor i64 %3551, %3547
  %3553 = xor i64 %3552, %3546
  %3554 = xor i64 %3553, %3544
  %3555 = xor i64 %3554, %3549
  %3556 = or i64 %105, -2838085032194922802
  %3557 = xor i64 %105, -1
  %3558 = and i64 %3557, 7330900170847383526
  %3559 = and i64 %105, -7330900170847383527
  %3560 = or i64 %3558, %3559
  %3561 = xor i64 -4818413521557632728, %3560
  %3562 = xor i64 %105, -1
  %3563 = or i64 2838085032194922801, %3562
  %3564 = xor i64 %3563, -1
  %3565 = and i64 %3564, -1
  %3566 = or i64 %3561, %3565
  %3567 = add i64 %123, 3475325333168472667
  %3568 = sub i64 0, %123
  %3569 = sub i64 3475325333168472667, %3568
  %3570 = and i64 %107, 3128522382581622114
  %3571 = xor i64 %107, -1
  %3572 = or i64 -3128522382581622115, %3571
  %3573 = xor i64 %3572, -1
  %3574 = and i64 %3573, -1
  %3575 = xor i64 %3566, %3569
  %3576 = xor i64 %3575, -3522254140059224195
  %3577 = xor i64 %3576, %3570
  %3578 = xor i64 %3577, %3574
  %3579 = xor i64 %3578, %3556
  %3580 = xor i64 %3579, %3567
  %3581 = mul i64 %3555, %3580
  %3582 = trunc i64 %3581 to i32
  %3583 = or i64 %227, -5205069025040584085
  %3584 = xor i64 %227, -1
  %3585 = and i64 -5205069025040584085, %3584
  %3586 = add i64 %3585, %227
  %3587 = or i64 %233, 863864848057707466
  %3588 = xor i64 %233, -1
  %3589 = and i64 863864848057707466, %3588
  %3590 = add i64 %3589, %233
  %3591 = or i64 %215, -2631184764092549188
  %3592 = xor i64 %215, -1
  %3593 = and i64 -2631184764092549188, %3592
  %3594 = add i64 %3593, %215
  %3595 = xor i64 -6749494441785754239, %3590
  %3596 = xor i64 %3595, %3583
  %3597 = xor i64 %3596, %3587
  %3598 = xor i64 %3597, %3594
  %3599 = xor i64 %3598, %3591
  %3600 = xor i64 %3599, %3586
  %3601 = add i64 %113, 6091557499435137570
  %3602 = sub i64 0, %113
  %3603 = add i64 -6091557499435137570, %3602
  %3604 = sub i64 0, %3603
  %3605 = add i64 %111, 4596212147967429712
  %3606 = sub i64 0, %111
  %3607 = sub i64 4596212147967429712, %3606
  %3608 = xor i64 %3601, -2419117695886191471
  %3609 = xor i64 %3608, %3604
  %3610 = xor i64 %3609, %3607
  %3611 = xor i64 %3610, %3605
  %3612 = mul i64 %3600, %3611
  %3613 = trunc i64 %3612 to i32
  %3614 = select i1 %3540, i32 %3582, i32 %3613
  %3615 = xor i32 %3614, 48
  store i32 %3615, i32* %4, align 4
  %3616 = call i8** @bf14862898971591998804(i32* %4)
  %3617 = load i8*, i8** %3616, align 8
  indirectbr i8* %3617, [label %loopEnd, label %3432]

3618:                                             ; preds = %3618, %loopStart
  %3619 = add i32 78, -70
  %3620 = mul i32 64, 108
  %3621 = or i64 %73, -4419540601564362400
  %3622 = xor i64 %73, -1
  %3623 = and i64 %3622, 6254972293760147873
  %3624 = and i64 %73, -6254972293760147874
  %3625 = or i64 %3623, %3624
  %3626 = xor i64 -7753928535895643967, %3625
  %3627 = xor i64 %73, -1
  %3628 = or i64 4419540601564362399, %3627
  %3629 = xor i64 %3628, -1
  %3630 = and i64 %3629, -1
  %3631 = or i64 %3626, %3630
  %3632 = or i64 %139, -3900182722187798469
  %3633 = and i64 -3900182722187798469, %139
  %3634 = xor i64 -3900182722187798469, %139
  %3635 = or i64 %3633, %3634
  %3636 = xor i64 %3635, %3632
  %3637 = xor i64 %3636, 7820529433286386347
  %3638 = xor i64 %3637, %3621
  %3639 = xor i64 %3638, %3631
  %3640 = add i64 %69, -5622873793710166661
  %3641 = add i64 7911957766020042342, %69
  %3642 = add i64 %3641, 4911912513979342613
  %3643 = and i64 %123, 5979982932735601953
  %3644 = xor i64 %123, -1
  %3645 = xor i64 5979982932735601953, %3644
  %3646 = and i64 %3645, 5979982932735601953
  %3647 = xor i64 %3640, %3646
  %3648 = xor i64 %3647, %3642
  %3649 = xor i64 %3648, %3643
  %3650 = xor i64 %3649, 1276612651047356731
  %3651 = mul i64 %3639, %3650
  %3652 = trunc i64 %3651 to i32
  %3653 = mul i32 %3652, 36
  %3654 = sext i32 %dispatcher1 to i64
  %3655 = and i64 %3654, -8025524730976787056
  %3656 = xor i64 %3654, -1
  %3657 = or i64 8025524730976787055, %3656
  %3658 = xor i64 %3657, -1
  %3659 = and i64 %3658, -1
  %3660 = and i64 %29, -4119039359419436623
  %3661 = or i64 4119039359419436622, %29
  %3662 = sub i64 %3661, 4119039359419436622
  %3663 = xor i64 -582030188614863775, %3660
  %3664 = xor i64 %3663, %3655
  %3665 = xor i64 %3664, %3659
  %3666 = xor i64 %3665, %3662
  %3667 = and i64 %61, -7368521521423664126
  %3668 = or i64 7368521521423664125, %61
  %3669 = sub i64 %3668, 7368521521423664125
  %3670 = or i64 %230, -5408039562261481325
  %3671 = and i64 -5408039562261481325, %230
  %3672 = xor i64 -5408039562261481325, %230
  %3673 = or i64 %3671, %3672
  %3674 = xor i64 -4046330263616814322, %3667
  %3675 = xor i64 %3674, %3669
  %3676 = xor i64 %3675, %3673
  %3677 = xor i64 %3676, %3670
  %3678 = mul i64 %3666, %3677
  %3679 = trunc i64 %3678 to i32
  %3680 = add i32 102, %3679
  %3681 = sdiv i32 116, 36
  %3682 = mul i32 5, 4
  %3683 = or i64 %224, 6056173914918918388
  %3684 = and i64 6056173914918918388, %224
  %3685 = xor i64 6056173914918918388, %224
  %3686 = or i64 %3684, %3685
  %3687 = and i64 %59, 7834785465551816828
  %3688 = xor i64 %59, -1
  %3689 = or i64 -7834785465551816829, %3688
  %3690 = xor i64 %3689, -1
  %3691 = and i64 %3690, -1
  %3692 = xor i64 %3691, %3683
  %3693 = xor i64 %3692, %3687
  %3694 = xor i64 %3693, 8102615100967887829
  %3695 = xor i64 %3694, %3686
  %3696 = and i64 %227, 6133809838003959705
  %3697 = xor i64 %227, -1
  %3698 = or i64 -6133809838003959706, %3697
  %3699 = xor i64 %3698, -1
  %3700 = and i64 %3699, -1
  %3701 = add i64 %19, 1487541325124586508
  %3702 = and i64 1487541325124586508, %19
  %3703 = or i64 1487541325124586508, %19
  %3704 = add i64 %3702, %3703
  %3705 = xor i64 %3700, %3701
  %3706 = xor i64 %3705, 1977520771784876817
  %3707 = xor i64 %3706, %3704
  %3708 = xor i64 %3707, %3696
  %3709 = mul i64 %3695, %3708
  %3710 = trunc i64 %3709 to i32
  %3711 = or i64 %224, 1365196196220882344
  %3712 = and i64 1365196196220882344, %224
  %3713 = xor i64 1365196196220882344, %224
  %3714 = or i64 %3712, %3713
  %3715 = or i64 %93, 2109603066219208922
  %3716 = xor i64 %93, -1
  %3717 = and i64 %3716, 8605829782998722214
  %3718 = and i64 %93, -8605829782998722215
  %3719 = or i64 %3717, %3718
  %3720 = xor i64 7649606238913660540, %3719
  %3721 = xor i64 %93, -1
  %3722 = or i64 -2109603066219208923, %3721
  %3723 = xor i64 %3722, -1
  %3724 = and i64 %3723, -1
  %3725 = or i64 %3720, %3724
  %3726 = and i64 %230, 8288346531624551637
  %3727 = xor i64 %230, -1
  %3728 = xor i64 8288346531624551637, %3727
  %3729 = and i64 %3728, 8288346531624551637
  %3730 = xor i64 %3714, %3711
  %3731 = xor i64 %3730, %3725
  %3732 = xor i64 %3731, %3715
  %3733 = xor i64 %3732, %3729
  %3734 = xor i64 %3733, -4377905887269337639
  %3735 = xor i64 %3734, %3726
  %3736 = add i64 %236, 5281938992353083055
  %3737 = sub i64 0, %236
  %3738 = sub i64 5281938992353083055, %3737
  %3739 = and i64 %125, 2059338619626551644
  %3740 = xor i64 %125, -1
  %3741 = xor i64 2059338619626551644, %3740
  %3742 = and i64 %3741, 2059338619626551644
  %3743 = or i64 %239, 2623122967892505671
  %3744 = xor i64 %239, -1
  %3745 = and i64 2623122967892505671, %3744
  %3746 = add i64 %3745, %239
  %3747 = xor i64 -5796770165558210705, %3742
  %3748 = xor i64 %3747, %3736
  %3749 = xor i64 %3748, %3743
  %3750 = xor i64 %3749, %3739
  %3751 = xor i64 %3750, %3738
  %3752 = xor i64 %3751, %3746
  %3753 = mul i64 %3735, %3752
  %3754 = trunc i64 %3753 to i32
  %3755 = mul i32 %3710, %3754
  %3756 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 32
  %3757 = load i32, i32* %3756, align 4
  %3758 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %3759 = load i32, i32* %3758, align 4
  %3760 = sub i32 %3757, %3759
  store i32 %3760, i32* %dispatcher, align 4
  %3761 = load i8*, i8** %38, align 8
  %3762 = load i8, i8* %3761, align 1
  %3763 = mul i8 %3762, 2
  %3764 = mul i8 %3762, 2
  %3765 = add i8 2, %3764
  %3766 = mul i8 %3763, %3765
  %3767 = srem i8 %3766, 4
  %3768 = icmp eq i8 %3767, 0
  %3769 = mul i8 %3762, %3762
  %3770 = add i8 %3769, %3762
  %3771 = srem i8 %3770, 2
  %3772 = icmp eq i8 %3771, 0
  %3773 = xor i1 %3768, true
  %3774 = and i1 %3773, true
  %3775 = and i1 %3768, false
  %3776 = or i1 %3774, %3775
  %3777 = xor i1 %3772, true
  %3778 = and i1 %3777, true
  %3779 = and i1 %3772, false
  %3780 = or i1 %3778, %3779
  %3781 = xor i1 %3776, %3780
  %3782 = xor i1 %3768, true
  %3783 = xor i1 %3772, true
  %3784 = or i1 %3782, %3783
  %3785 = xor i1 %3784, true
  %3786 = and i1 %3785, true
  %3787 = or i1 %3781, %3786
  %3788 = select i1 %3787, i32 595012132, i32 595012113
  %3789 = xor i32 %3788, 53
  store i32 %3789, i32* %4, align 4
  %3790 = call i8** @bf14862898971591998804(i32* %4)
  %3791 = load i8*, i8** %3790, align 8
  indirectbr i8* %3791, [label %loopEnd, label %3618]

3792:                                             ; preds = %3792, %loopStart
  store i64 1996855465712537075, i64* %213, align 8
  %3793 = call i8** @lk14802275186744156584(i64* %213)
  %3794 = load i8*, i8** %3793, align 8
  %3795 = bitcast i8* %3794 to i32 (float, float*, float*, i8*, float*)*
  %.reload9.reload = load float, float* %.reload9.reg2mem, align 4
  %3796 = call i32 %3795(float %.reload9.reload, float* %0, float* %1, i8* %2, float* %3)
  %3797 = icmp eq i32 %3796, 0
  %3798 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 20
  %3799 = load i32, i32* %3798, align 4
  %3800 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 19
  %3801 = load i32, i32* %3800, align 4
  %3802 = sub i32 0, %3801
  %3803 = sub i32 %3799, %3802
  %3804 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 25
  %3805 = load i32, i32* %3804, align 4
  %3806 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 24
  %3807 = load i32, i32* %3806, align 4
  %3808 = sub i32 %3805, 1414173025
  %3809 = add i32 %3808, %3807
  %3810 = add i32 %3809, 1414173025
  %3811 = select i1 %3797, i32 %3803, i32 %3810
  store i32 %3811, i32* %dispatcher, align 4
  %.reload10.reload91 = load double, double* %.reload10.reg2mem, align 8
  store i32 %3796, i32* %.reg2mem175, align 4
  store double %.reload10.reload91, double* %.reg2mem177, align 8
  store i32 %3796, i32* %.ph.reg2mem181, align 4
  %3812 = load i8*, i8** %126, align 8
  %3813 = load i8, i8* %3812, align 1
  %3814 = mul i8 %3813, %3813
  %3815 = add i8 %3814, %3813
  %3816 = mul i8 %3815, 3
  %3817 = srem i8 %3816, 2
  %3818 = icmp eq i8 %3817, 0
  %3819 = mul i8 %3813, %3813
  %3820 = add i8 %3819, %3813
  %3821 = srem i8 %3820, 2
  %3822 = icmp eq i8 %3821, 0
  %3823 = and i1 %3818, %3822
  %3824 = select i1 %3823, i32 595012134, i32 595012113
  %3825 = xor i32 %3824, 55
  store i32 %3825, i32* %4, align 4
  %3826 = call i8** @bf14862898971591998804(i32* %4)
  %3827 = load i8*, i8** %3826, align 8
  indirectbr i8* %3827, [label %loopEnd, label %3792]

3828:                                             ; preds = %3828, %loopStart
  %.reload178 = load double, double* %.reg2mem177, align 8
  %.reload176 = load i32, i32* %.reg2mem175, align 4
  store double %.reload178, double* %.reg2mem88, align 8
  store i32 %.reload176, i32* %.reg2mem84, align 4
  %3829 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 34
  %3830 = load i32, i32* %3829, align 4
  %3831 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %3832 = load i32, i32* %3831, align 4
  %3833 = sub i32 %3830, %3832
  store i32 %3833, i32* %dispatcher, align 4
  %3834 = load i8*, i8** %32, align 8
  %3835 = load i8, i8* %3834, align 1
  %3836 = mul i8 %3835, 2
  %3837 = mul i8 %3835, 2
  %3838 = sub i8 0, %3837
  %3839 = sub i8 2, %3838
  %3840 = mul i8 %3836, %3839
  %3841 = srem i8 %3840, 4
  %3842 = or i64 %230, 3944972389118123309
  %3843 = xor i64 %230, -1
  %3844 = and i64 %3843, -8044189243300343441
  %3845 = and i64 %230, 8044189243300343440
  %3846 = or i64 %3844, %3845
  %3847 = xor i64 -6421543746486367166, %3846
  %3848 = xor i64 %230, -1
  %3849 = or i64 -3944972389118123310, %3848
  %3850 = xor i64 %3849, -1
  %3851 = and i64 %3850, -1
  %3852 = or i64 %3847, %3851
  %3853 = sext i32 %dispatcher1 to i64
  %3854 = and i64 %3853, 6714767828408483290
  %3855 = xor i64 %3853, -1
  %3856 = xor i64 6714767828408483290, %3855
  %3857 = and i64 %3856, 6714767828408483290
  %3858 = or i64 %242, -1271691259502374758
  %3859 = xor i64 %242, -1
  %3860 = and i64 -1271691259502374758, %3859
  %3861 = add i64 %3860, %242
  %3862 = xor i64 %3854, %3842
  %3863 = xor i64 %3862, %3858
  %3864 = xor i64 %3863, %3852
  %3865 = xor i64 %3864, 1657133476878928511
  %3866 = xor i64 %3865, %3857
  %3867 = xor i64 %3866, %3861
  %3868 = add i64 %81, 455357579100592708
  %3869 = xor i64 455357579100592708, %81
  %3870 = and i64 455357579100592708, %81
  %3871 = mul i64 2, %3870
  %3872 = add i64 %3869, %3871
  %3873 = add i64 %9, 3990556132664060562
  %3874 = xor i64 3990556132664060562, %9
  %3875 = and i64 3990556132664060562, %9
  %3876 = mul i64 2, %3875
  %3877 = add i64 %3874, %3876
  %3878 = xor i64 0, %3877
  %3879 = xor i64 %3878, %3873
  %3880 = xor i64 %3879, %3868
  %3881 = xor i64 %3880, %3872
  %3882 = mul i64 %3867, %3881
  %3883 = trunc i64 %3882 to i8
  %3884 = icmp eq i8 %3841, %3883
  %3885 = mul i8 %3835, %3835
  %3886 = add i8 %3885, %3835
  %3887 = srem i8 %3886, 2
  %3888 = icmp eq i8 %3887, 0
  %3889 = xor i1 %3884, true
  %3890 = or i1 %3889, %3888
  %3891 = xor i1 %3884, true
  %3892 = sub i1 %3890, %3891
  %3893 = or i64 %97, -3656466185842510812
  %3894 = xor i64 %97, -1
  %3895 = and i64 %3894, -5788324869120461283
  %3896 = and i64 %97, 5788324869120461282
  %3897 = or i64 %3895, %3896
  %3898 = xor i64 7127547102160405049, %3897
  %3899 = xor i64 %97, -1
  %3900 = or i64 3656466185842510811, %3899
  %3901 = xor i64 %3900, -1
  %3902 = and i64 %3901, -1
  %3903 = or i64 %3898, %3902
  %3904 = or i64 %224, 6013458974263757944
  %3905 = xor i64 %224, -1
  %3906 = and i64 6013458974263757944, %3905
  %3907 = add i64 %3906, %224
  %3908 = add i64 %51, -4606999983311763245
  %3909 = xor i64 -4606999983311763245, %51
  %3910 = and i64 -4606999983311763245, %51
  %3911 = mul i64 2, %3910
  %3912 = add i64 %3909, %3911
  %3913 = xor i64 -55725486211475909, %3908
  %3914 = xor i64 %3913, %3904
  %3915 = xor i64 %3914, %3907
  %3916 = xor i64 %3915, %3903
  %3917 = xor i64 %3916, %3893
  %3918 = xor i64 %3917, %3912
  %3919 = or i64 %251, 4810185133752104612
  %3920 = and i64 4810185133752104612, %251
  %3921 = xor i64 4810185133752104612, %251
  %3922 = or i64 %3920, %3921
  %3923 = or i64 %93, -7048052683635276953
  %3924 = xor i64 %93, -1
  %3925 = and i64 -7048052683635276953, %3924
  %3926 = add i64 %3925, %93
  %3927 = xor i64 %3919, %3926
  %3928 = xor i64 %3927, -1863858976139337693
  %3929 = xor i64 %3928, %3923
  %3930 = xor i64 %3929, %3922
  %3931 = mul i64 %3918, %3930
  %3932 = trunc i64 %3931 to i32
  %3933 = select i1 %3892, i32 595012150, i32 %3932
  %3934 = xor i32 %3933, 39
  store i32 %3934, i32* %4, align 4
  %3935 = call i8** @bf14862898971591998804(i32* %4)
  %3936 = load i8*, i8** %3935, align 8
  indirectbr i8* %3936, [label %loopEnd, label %3828]

codeRepl2:                                        ; preds = %codeRepl2, %loopStart
  %lt.cast14 = bitcast float* %.loc3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast14)
  %lt.cast15 = bitcast double* %.loc4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast15)
  %lt.cast16 = bitcast i32* %.loc5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast16)
  %lt.cast17 = bitcast i32* %.loc6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast17)
  %lt.cast18 = bitcast i32* %.loc7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast18)
  store i64 1996855465712537074, i64* %213, align 8
  %3937 = call i8** @lk14802275186744156584(i64* %213)
  %3938 = load i8*, i8** %3937, align 8
  %3939 = bitcast i8* %3938 to i1 (double, i32, float*, double*, i32*, i32*, i32*)*
  %.reload24 = load i32, i32* %.reg2mem18, align 4
  %.reload89 = load double, double* %.reg2mem88, align 8
  %targetBlock8 = call i1 %3939(double %.reload89, i32 %.reload24, float* %.loc3, double* %.loc4, i32* %.loc5, i32* %.loc6, i32* %.loc7)
  %.reload9 = load float, float* %.loc3, align 4
  store float %.reload9, float* %.reload9.reg2mem, align 4
  %.reload10 = load double, double* %.loc4, align 8
  store double %.reload10, double* %.reload10.reg2mem, align 8
  %.reload11 = load i32, i32* %.loc5, align 4
  store i32 %.reload11, i32* %.reload11.reg2mem, align 4
  %.reload12 = load i32, i32* %.loc6, align 4
  store i32 %.reload12, i32* %.reload12.reg2mem, align 4
  %.reload13 = load i32, i32* %.loc7, align 4
  store i32 %.reload13, i32* %.reload13.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast14)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast15)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast16)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast17)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast18)
  %3940 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 39
  %3941 = load i32, i32* %3940, align 4
  %3942 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %3943 = load i32, i32* %3942, align 4
  %3944 = srem i32 %3941, %3943
  %3945 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 35
  %3946 = load i32, i32* %3945, align 4
  %3947 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %3948 = load i32, i32* %3947, align 4
  %3949 = sub i32 0, %3948
  %3950 = add i32 %3946, %3949
  %3951 = select i1 %targetBlock8, i32 %3944, i32 %3950
  store i32 %3951, i32* %dispatcher, align 4
  %3952 = load i8*, i8** %18, align 8
  %3953 = load i8, i8* %3952, align 1
  %3954 = xor i8 %3953, -1
  %3955 = or i8 %3954, -2
  %3956 = and i64 %257, 9087993074270705738
  %3957 = xor i64 %257, -1
  %3958 = xor i64 9087993074270705738, %3957
  %3959 = and i64 %3958, 9087993074270705738
  %3960 = and i64 %221, 9182889100655885225
  %3961 = or i64 -9182889100655885226, %221
  %3962 = sub i64 %3961, -9182889100655885226
  %3963 = add i64 %139, 1318765297306448033
  %3964 = sub i64 0, %139
  %3965 = sub i64 1318765297306448033, %3964
  %3966 = xor i64 %3965, %3959
  %3967 = xor i64 %3966, %3956
  %3968 = xor i64 %3967, %3960
  %3969 = xor i64 %3968, -2870385826888533879
  %3970 = xor i64 %3969, %3963
  %3971 = xor i64 %3970, %3962
  %3972 = add i64 %236, 3881985203536726983
  %3973 = sub i64 0, %236
  %3974 = sub i64 3881985203536726983, %3973
  %3975 = and i64 %137, -7301881382448214435
  %3976 = xor i64 %137, -1
  %3977 = or i64 7301881382448214434, %3976
  %3978 = xor i64 %3977, -1
  %3979 = and i64 %3978, -1
  %3980 = xor i64 %3974, %3972
  %3981 = xor i64 %3980, %3975
  %3982 = xor i64 %3981, 8942936214706649927
  %3983 = xor i64 %3982, %3979
  %3984 = mul i64 %3971, %3983
  %3985 = trunc i64 %3984 to i8
  %3986 = xor i8 %3955, %3985
  %3987 = and i8 %3986, -1
  %3988 = icmp eq i8 %3987, 1
  %3989 = mul i8 %3953, %3953
  %3990 = add i8 %3989, %3953
  %3991 = srem i8 %3990, 2
  %3992 = icmp eq i8 %3991, 0
  %3993 = xor i1 %3988, true
  %3994 = and i1 %3993, true
  %3995 = and i1 %3988, false
  %3996 = or i1 %3994, %3995
  %3997 = xor i1 %3992, true
  %3998 = and i1 %3997, true
  %3999 = and i1 %3992, false
  %4000 = or i1 %3998, %3999
  %4001 = xor i1 %3996, %4000
  %4002 = xor i1 %3988, true
  %4003 = xor i1 %3992, true
  %4004 = or i1 %4002, %4003
  %4005 = xor i1 %4004, true
  %4006 = and i1 %4005, true
  %4007 = or i1 %4001, %4006
  %4008 = select i1 %4007, i32 595012131, i32 595012113
  %4009 = xor i32 %4008, 50
  store i32 %4009, i32* %4, align 4
  %4010 = call i8** @bf14862898971591998804(i32* %4)
  %4011 = load i8*, i8** %4010, align 8
  indirectbr i8* %4011, [label %loopEnd, label %codeRepl2]

4012:                                             ; preds = %4012, %loopStart
  %4013 = sub i32 34, -113
  %4014 = sdiv i32 81, 67
  %4015 = sdiv i32 37, 77
  %4016 = add i32 1761447303, -1761447179
  %4017 = sub i32 106, 43
  %4018 = or i64 %119, 4673071552294038537
  %4019 = xor i64 %119, -1
  %4020 = and i64 4673071552294038537, %4019
  %4021 = add i64 %4020, %119
  %4022 = and i64 %71, -3737220715960912128
  %4023 = xor i64 %71, -1
  %4024 = xor i64 -3737220715960912128, %4023
  %4025 = and i64 %4024, -3737220715960912128
  %4026 = or i64 %99, -7874100240850248656
  %4027 = xor i64 %99, -1
  %4028 = and i64 %4027, 2091407878295023917
  %4029 = and i64 %99, -2091407878295023918
  %4030 = or i64 %4028, %4029
  %4031 = xor i64 -8088535373447697123, %4030
  %4032 = xor i64 %99, -1
  %4033 = or i64 7874100240850248655, %4032
  %4034 = xor i64 %4033, -1
  %4035 = and i64 %4034, -1
  %4036 = or i64 %4031, %4035
  %4037 = xor i64 8168138800808915637, %4022
  %4038 = xor i64 %4037, %4036
  %4039 = xor i64 %4038, %4021
  %4040 = xor i64 %4039, %4025
  %4041 = xor i64 %4040, %4026
  %4042 = xor i64 %4041, %4018
  %4043 = add i64 %53, 1898259572019680349
  %4044 = xor i64 1898259572019680349, %53
  %4045 = and i64 1898259572019680349, %53
  %4046 = mul i64 2, %4045
  %4047 = add i64 %4044, %4046
  %4048 = add i64 %35, -9052363518926148537
  %4049 = xor i64 -9052363518926148537, %35
  %4050 = and i64 -9052363518926148537, %35
  %4051 = mul i64 2, %4050
  %4052 = add i64 %4049, %4051
  %4053 = xor i64 %4043, %4047
  %4054 = xor i64 %4053, %4048
  %4055 = xor i64 %4054, 2245923574549396257
  %4056 = xor i64 %4055, %4052
  %4057 = mul i64 %4042, %4056
  %4058 = trunc i64 %4057 to i32
  %4059 = add i32 0, %4058
  %4060 = sdiv i32 75, 99
  %4061 = sub i32 60, 94
  %4062 = sdiv i32 53, 50
  %4063 = and i64 %81, -6485513803725988801
  %4064 = xor i64 %81, -1
  %4065 = xor i64 -6485513803725988801, %4064
  %4066 = and i64 %4065, -6485513803725988801
  %4067 = add i64 %107, -738336861878002969
  %4068 = add i64 -1400947558082883123, %107
  %4069 = add i64 %4068, 662610696204880154
  %4070 = xor i64 -2273173287854731845, %4063
  %4071 = xor i64 %4070, %4066
  %4072 = xor i64 %4071, %4067
  %4073 = xor i64 %4072, %4069
  %4074 = or i64 %61, 1721289427557624717
  %4075 = xor i64 %61, -1
  %4076 = and i64 1721289427557624717, %4075
  %4077 = add i64 %4076, %61
  %4078 = add i64 %117, -1535471362401695058
  %4079 = xor i64 -1535471362401695058, %117
  %4080 = and i64 -1535471362401695058, %117
  %4081 = mul i64 2, %4080
  %4082 = add i64 %4079, %4081
  %4083 = and i64 %63, 7867371298905722800
  %4084 = or i64 -7867371298905722801, %63
  %4085 = sub i64 %4084, -7867371298905722801
  %4086 = xor i64 %4082, -2129752609364608365
  %4087 = xor i64 %4086, %4077
  %4088 = xor i64 %4087, %4085
  %4089 = xor i64 %4088, %4078
  %4090 = xor i64 %4089, %4074
  %4091 = xor i64 %4090, %4083
  %4092 = mul i64 %4073, %4091
  %4093 = trunc i64 %4092 to i32
  %4094 = add i32 %4093, 47
  %4095 = mul i32 %4016, 33
  %4096 = sdiv i32 %4061, 118
  %4097 = sdiv i32 %4059, 103
  %4098 = sdiv i32 %4062, 40
  %4099 = sub i32 %4061, 51
  %4100 = mul i32 %4014, 103
  %4101 = add i32 %4014, 52
  %4102 = sub i32 0, %4095
  %4103 = sub i32 0, %4102
  %4104 = sub i32 0, %4096
  %4105 = sub i32 %4103, %4104
  %4106 = sub i32 0, %4105
  %4107 = sub i32 0, %4097
  %4108 = add i32 %4106, %4107
  %4109 = sub i32 0, %4108
  %4110 = add i32 %4109, %4098
  %4111 = and i32 %4110, %4099
  %4112 = or i32 %4110, %4099
  %4113 = add i32 %4111, %4112
  %4114 = add i32 %4113, %4100
  %4115 = and i32 %4114, %4101
  %4116 = or i32 %4114, %4101
  %4117 = add i32 %4115, %4116
  %4118 = and i32 %4117, 1
  %4119 = icmp eq i32 %4118, 0
  %4120 = mul i32 %4117, %4117
  %4121 = add i32 %4120, %4117
  %4122 = mul i32 %4121, 3
  %4123 = srem i32 %4122, 2
  %4124 = icmp eq i32 %4123, 0
  %4125 = xor i1 %4119, true
  %4126 = and i1 %4125, true
  %4127 = and i1 %4119, false
  %4128 = or i1 %4126, %4127
  %4129 = xor i1 %4124, true
  %4130 = and i1 %4129, true
  %4131 = or i64 %248, -3880081691058969807
  %4132 = xor i64 %248, -1
  %4133 = and i64 %4132, 7491269184841481493
  %4134 = and i64 %248, -7491269184841481494
  %4135 = or i64 %4133, %4134
  %4136 = xor i64 -5921815831274021340, %4135
  %4137 = xor i64 %248, -1
  %4138 = or i64 3880081691058969806, %4137
  %4139 = xor i64 %4138, -1
  %4140 = and i64 %4139, -1
  %4141 = or i64 %4136, %4140
  %4142 = add i64 %245, -3583231088390541228
  %4143 = and i64 -3583231088390541228, %245
  %4144 = or i64 -3583231088390541228, %245
  %4145 = add i64 %4143, %4144
  %4146 = xor i64 %4131, %4141
  %4147 = xor i64 %4146, %4145
  %4148 = xor i64 %4147, 7496838625449664337
  %4149 = xor i64 %4148, %4142
  %4150 = add i64 %111, 2836830607698689824
  %4151 = and i64 2836830607698689824, %111
  %4152 = or i64 2836830607698689824, %111
  %4153 = add i64 %4151, %4152
  %4154 = sext i32 %262 to i64
  %4155 = add i64 %4154, -1307053743169811991
  %4156 = sub i64 0, %4154
  %4157 = add i64 1307053743169811991, %4156
  %4158 = sub i64 0, %4157
  %4159 = or i64 %67, 2212347925168348535
  %4160 = xor i64 %67, -1
  %4161 = and i64 %4160, -3194325449930380114
  %4162 = and i64 %67, 3194325449930380113
  %4163 = or i64 %4161, %4162
  %4164 = xor i64 -3667989095061933607, %4163
  %4165 = xor i64 %67, -1
  %4166 = or i64 -2212347925168348536, %4165
  %4167 = xor i64 %4166, -1
  %4168 = and i64 %4167, -1
  %4169 = or i64 %4164, %4168
  %4170 = xor i64 %4159, %4150
  %4171 = xor i64 %4170, %4169
  %4172 = xor i64 %4171, %4155
  %4173 = xor i64 %4172, 0
  %4174 = xor i64 %4173, %4153
  %4175 = xor i64 %4174, %4158
  %4176 = mul i64 %4149, %4175
  %4177 = trunc i64 %4176 to i1
  %4178 = and i1 %4124, %4177
  %4179 = or i1 %4130, %4178
  %4180 = xor i1 %4128, %4179
  %4181 = xor i1 %4119, true
  %4182 = xor i1 %4124, true
  %4183 = or i1 %4181, %4182
  %4184 = xor i1 %4183, true
  %4185 = and i1 %4184, true
  %4186 = or i1 %4180, %4185
  %4187 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  %4188 = load i32, i32* %4187, align 4
  %4189 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %4190 = load i32, i32* %4189, align 4
  %4191 = srem i32 %4188, %4190
  %4192 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 35
  %4193 = load i32, i32* %4192, align 4
  %4194 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %4195 = load i32, i32* %4194, align 4
  %4196 = add i32 %4193, -627105739
  %4197 = sub i32 %4196, %4195
  %4198 = sub i32 %4197, -627105739
  %4199 = select i1 %4186, i32 %4191, i32 %4198
  store i32 %4199, i32* %dispatcher, align 4
  store i32 0, i32* %.reg2mem175, align 4
  store double 0.000000e+00, double* %.reg2mem177, align 8
  %4200 = load i8*, i8** %102, align 8
  %4201 = load i8, i8* %4200, align 1
  %4202 = mul i8 %4201, 2
  %4203 = mul i8 %4201, 2
  %4204 = add i8 2, %4203
  %4205 = mul i8 %4202, %4204
  %4206 = srem i8 %4205, 4
  %4207 = add i64 %215, -477099602833285321
  %4208 = sub i64 0, %215
  %4209 = sub i64 -477099602833285321, %4208
  %4210 = add i64 %109, 1580423397686976377
  %4211 = sub i64 0, %109
  %4212 = add i64 -1580423397686976377, %4211
  %4213 = sub i64 0, %4212
  %4214 = or i64 %23, -5134423880983390144
  %4215 = and i64 -5134423880983390144, %23
  %4216 = xor i64 -5134423880983390144, %23
  %4217 = or i64 %4215, %4216
  %4218 = xor i64 %4214, %4209
  %4219 = xor i64 %4218, 452002374860293213
  %4220 = xor i64 %4219, %4213
  %4221 = xor i64 %4220, %4217
  %4222 = xor i64 %4221, %4210
  %4223 = xor i64 %4222, %4207
  %4224 = and i64 %25, 558047542549623220
  %4225 = or i64 -558047542549623221, %25
  %4226 = sub i64 %4225, -558047542549623221
  %4227 = sext i32 %262 to i64
  %4228 = add i64 %4227, -8600117937361859977
  %4229 = add i64 -7772445994888875856, %4227
  %4230 = add i64 %4229, -827671942472984121
  %4231 = add i64 %7, 5981656055296586531
  %4232 = add i64 2061538863503791839, %7
  %4233 = add i64 %4232, 3920117191792794692
  %4234 = xor i64 %4233, %4230
  %4235 = xor i64 %4234, 0
  %4236 = xor i64 %4235, %4224
  %4237 = xor i64 %4236, %4226
  %4238 = xor i64 %4237, %4231
  %4239 = xor i64 %4238, %4228
  %4240 = mul i64 %4223, %4239
  %4241 = trunc i64 %4240 to i8
  %4242 = icmp eq i8 %4206, %4241
  %4243 = mul i8 %4201, %4201
  %4244 = add i8 %4243, %4201
  %4245 = and i64 %236, -5691486284762687668
  %4246 = or i64 5691486284762687667, %236
  %4247 = sub i64 %4246, 5691486284762687667
  %4248 = add i64 %27, -2420072346161943210
  %4249 = sub i64 0, %27
  %4250 = sub i64 -2420072346161943210, %4249
  %4251 = or i64 %141, -3120481118851296053
  %4252 = and i64 -3120481118851296053, %141
  %4253 = xor i64 -3120481118851296053, %141
  %4254 = or i64 %4252, %4253
  %4255 = xor i64 %4251, %4247
  %4256 = xor i64 %4255, %4248
  %4257 = xor i64 %4256, %4254
  %4258 = xor i64 %4257, %4250
  %4259 = xor i64 %4258, %4245
  %4260 = xor i64 %4259, -5679223941900819257
  %4261 = or i64 %107, -6038509334246984888
  %4262 = xor i64 %107, -1
  %4263 = and i64 %4262, 4286256909491422654
  %4264 = and i64 %107, -4286256909491422655
  %4265 = or i64 %4263, %4264
  %4266 = xor i64 -7545446701237061898, %4265
  %4267 = xor i64 %107, -1
  %4268 = or i64 6038509334246984887, %4267
  %4269 = xor i64 %4268, -1
  %4270 = and i64 %4269, -1
  %4271 = or i64 %4266, %4270
  %4272 = add i64 %224, -8536548877303163408
  %4273 = add i64 5702384119995639370, %224
  %4274 = sub i64 %4273, -4207811076410748838
  %4275 = add i64 %57, -8762340702362087509
  %4276 = sub i64 0, %57
  %4277 = sub i64 -8762340702362087509, %4276
  %4278 = xor i64 %4271, %4272
  %4279 = xor i64 %4278, %4275
  %4280 = xor i64 %4279, %4277
  %4281 = xor i64 %4280, %4261
  %4282 = xor i64 %4281, 6140410462241536494
  %4283 = xor i64 %4282, %4274
  %4284 = mul i64 %4260, %4283
  %4285 = trunc i64 %4284 to i8
  %4286 = srem i8 %4244, %4285
  %4287 = icmp eq i8 %4286, 0
  %4288 = xor i1 %4242, true
  %4289 = and i1 %4288, true
  %4290 = and i64 %77, -7145021513013613174
  %4291 = xor i64 %77, -1
  %4292 = xor i64 -7145021513013613174, %4291
  %4293 = and i64 %4292, -7145021513013613174
  %4294 = and i64 %15, -2851540630452465825
  %4295 = xor i64 %15, -1
  %4296 = xor i64 -2851540630452465825, %4295
  %4297 = and i64 %4296, -2851540630452465825
  %4298 = xor i64 %4297, %4294
  %4299 = xor i64 %4298, %4290
  %4300 = xor i64 %4299, 8605678054812385141
  %4301 = xor i64 %4300, %4293
  %4302 = and i64 %103, -2814018978529861257
  %4303 = or i64 2814018978529861256, %103
  %4304 = sub i64 %4303, 2814018978529861256
  %4305 = add i64 %135, 9055903930741756818
  %4306 = sub i64 0, %135
  %4307 = add i64 -9055903930741756818, %4306
  %4308 = sub i64 0, %4307
  %4309 = xor i64 0, %4305
  %4310 = xor i64 %4309, %4302
  %4311 = xor i64 %4310, %4308
  %4312 = xor i64 %4311, %4304
  %4313 = mul i64 %4301, %4312
  %4314 = trunc i64 %4313 to i1
  %4315 = and i1 %4242, %4314
  %4316 = or i1 %4289, %4315
  %4317 = xor i1 %4287, true
  %4318 = and i1 %4317, true
  %4319 = or i64 %25, 3890082103791465068
  %4320 = and i64 3890082103791465068, %25
  %4321 = xor i64 3890082103791465068, %25
  %4322 = or i64 %4320, %4321
  %4323 = and i64 %39, 3529315288247224234
  %4324 = xor i64 %39, -1
  %4325 = xor i64 3529315288247224234, %4324
  %4326 = and i64 %4325, 3529315288247224234
  %4327 = xor i64 -2494377560870215761, %4326
  %4328 = xor i64 %4327, %4322
  %4329 = xor i64 %4328, %4323
  %4330 = xor i64 %4329, %4319
  %4331 = and i64 %125, 1888370293745310325
  %4332 = xor i64 %125, -1
  %4333 = xor i64 1888370293745310325, %4332
  %4334 = and i64 %4333, 1888370293745310325
  %4335 = and i64 %45, 1949399517305261976
  %4336 = xor i64 %45, -1
  %4337 = or i64 -1949399517305261977, %4336
  %4338 = xor i64 %4337, -1
  %4339 = and i64 %4338, -1
  %4340 = and i64 %19, -3171823851332398473
  %4341 = xor i64 %19, -1
  %4342 = xor i64 -3171823851332398473, %4341
  %4343 = and i64 %4342, -3171823851332398473
  %4344 = xor i64 0, %4340
  %4345 = xor i64 %4344, %4335
  %4346 = xor i64 %4345, %4331
  %4347 = xor i64 %4346, %4343
  %4348 = xor i64 %4347, %4334
  %4349 = xor i64 %4348, %4339
  %4350 = mul i64 %4330, %4349
  %4351 = trunc i64 %4350 to i1
  %4352 = and i1 %4287, %4351
  %4353 = or i1 %4318, %4352
  %4354 = xor i1 %4316, %4353
  %4355 = xor i1 %4242, true
  %4356 = xor i1 %4287, true
  %4357 = or i1 %4355, %4356
  %4358 = xor i1 %4357, true
  %4359 = and i1 %4358, true
  %4360 = or i1 %4354, %4359
  %4361 = add i64 %77, 5560072311537378125
  %4362 = add i64 -2259662838230034136, %77
  %4363 = add i64 %4362, 7819735149767412261
  %4364 = and i64 %39, -5301712203156762946
  %4365 = xor i64 %39, -1
  %4366 = or i64 5301712203156762945, %4365
  %4367 = xor i64 %4366, -1
  %4368 = and i64 %4367, -1
  %4369 = xor i64 %4368, %4363
  %4370 = xor i64 %4369, -1015299273093409545
  %4371 = xor i64 %4370, %4364
  %4372 = xor i64 %4371, %4361
  %4373 = or i64 %51, 4149039540461268652
  %4374 = xor i64 %51, -1
  %4375 = and i64 4149039540461268652, %4374
  %4376 = add i64 %4375, %51
  %4377 = and i64 %69, -2766945293005279047
  %4378 = or i64 2766945293005279046, %69
  %4379 = sub i64 %4378, 2766945293005279046
  %4380 = and i64 %51, -8657879645145637836
  %4381 = xor i64 %51, -1
  %4382 = or i64 8657879645145637835, %4381
  %4383 = xor i64 %4382, -1
  %4384 = and i64 %4383, -1
  %4385 = xor i64 %4373, %4384
  %4386 = xor i64 %4385, %4376
  %4387 = xor i64 %4386, %4377
  %4388 = xor i64 %4387, %4380
  %4389 = xor i64 %4388, %4379
  %4390 = xor i64 %4389, -7436953168696428579
  %4391 = mul i64 %4372, %4390
  %4392 = trunc i64 %4391 to i32
  %4393 = select i1 %4360, i32 %4392, i32 595012113
  %4394 = xor i32 %4393, 42
  store i32 %4394, i32* %4, align 4
  %4395 = call i8** @bf14862898971591998804(i32* %4)
  %4396 = load i8*, i8** %4395, align 8
  indirectbr i8* %4396, [label %loopEnd, label %4012]

4397:                                             ; preds = %4397, %loopStart
  %.reload12.reload = load i32, i32* %.reload12.reg2mem, align 4
  %4398 = srem i32 %.reload12.reload, 2
  %4399 = icmp eq i32 %4398, 0
  %4400 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 40
  %4401 = load i32, i32* %4400, align 4
  %4402 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %4403 = load i32, i32* %4402, align 4
  %4404 = srem i32 %4401, %4403
  %4405 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 41
  %4406 = load i32, i32* %4405, align 4
  %4407 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %4408 = load i32, i32* %4407, align 4
  %4409 = srem i32 %4406, %4408
  %4410 = select i1 %4399, i32 %4404, i32 %4409
  store i32 %4410, i32* %dispatcher, align 4
  %4411 = load i8*, i8** %86, align 8
  %4412 = load i8, i8* %4411, align 1
  %4413 = mul i8 %4412, 2
  %4414 = mul i8 %4412, 2
  %4415 = add i8 2, %4414
  %4416 = mul i8 %4413, %4415
  %4417 = srem i8 %4416, 4
  %4418 = icmp eq i8 %4417, 0
  %4419 = mul i8 %4412, %4412
  %4420 = sub i8 0, %4412
  %4421 = sub i8 %4419, %4420
  %4422 = srem i8 %4421, 2
  %4423 = icmp eq i8 %4422, 0
  %4424 = or i1 %4418, %4423
  %4425 = select i1 %4424, i32 595012146, i32 595012113
  %4426 = xor i32 %4425, -1
  %4427 = and i32 %4426, 35
  %4428 = or i64 %248, -6781182330713645349
  %4429 = xor i64 %248, -1
  %4430 = and i64 %4429, 7160065203410347198
  %4431 = and i64 %248, -7160065203410347199
  %4432 = or i64 %4430, %4431
  %4433 = xor i64 -4415269515227497883, %4432
  %4434 = xor i64 %248, -1
  %4435 = or i64 6781182330713645348, %4434
  %4436 = xor i64 %4435, -1
  %4437 = and i64 %4436, -1
  %4438 = or i64 %4433, %4437
  %4439 = add i64 %115, -8844762423242359699
  %4440 = xor i64 -8844762423242359699, %115
  %4441 = and i64 -8844762423242359699, %115
  %4442 = mul i64 2, %4441
  %4443 = add i64 %4440, %4442
  %4444 = and i64 %35, -1985834714933247463
  %4445 = or i64 1985834714933247462, %35
  %4446 = sub i64 %4445, 1985834714933247462
  %4447 = xor i64 -7532742941466570577, %4438
  %4448 = xor i64 %4447, %4439
  %4449 = xor i64 %4448, %4446
  %4450 = xor i64 %4449, %4444
  %4451 = xor i64 %4450, %4428
  %4452 = xor i64 %4451, %4443
  %4453 = or i64 %113, -5523125939460820549
  %4454 = xor i64 %113, -1
  %4455 = and i64 -5523125939460820549, %4454
  %4456 = add i64 %4455, %113
  %4457 = or i64 %51, -5064379418692944985
  %4458 = xor i64 %51, -1
  %4459 = and i64 -5064379418692944985, %4458
  %4460 = add i64 %4459, %51
  %4461 = xor i64 %4453, %4456
  %4462 = xor i64 %4461, %4457
  %4463 = xor i64 %4462, -7818817863060218652
  %4464 = xor i64 %4463, %4460
  %4465 = mul i64 %4452, %4464
  %4466 = trunc i64 %4465 to i32
  %4467 = and i32 %4425, %4466
  %4468 = or i32 %4427, %4467
  store i32 %4468, i32* %4, align 4
  %4469 = call i8** @bf14862898971591998804(i32* %4)
  %4470 = load i8*, i8** %4469, align 8
  indirectbr i8* %4470, [label %loopEnd, label %4397]

4471:                                             ; preds = %4471, %loopStart
  %.reload10.reload90 = load double, double* %.reload10.reg2mem, align 8
  %4472 = fcmp olt double %.reload10.reload90, 6.280000e+00
  %4473 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 42
  %4474 = load i32, i32* %4473, align 4
  %4475 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %4476 = load i32, i32* %4475, align 4
  %4477 = add i32 %4474, -1278876664
  %4478 = sub i32 %4477, %4476
  %4479 = sub i32 %4478, -1278876664
  store i32 %4479, i32* %dispatcher, align 4
  store i1 %4472, i1* %.reg2mem179, align 1
  %4480 = load i8*, i8** %98, align 8
  %4481 = load i8, i8* %4480, align 1
  %4482 = mul i8 %4481, 2
  %4483 = mul i8 %4481, 2
  %4484 = and i64 %67, 8378924606978104696
  %4485 = xor i64 %67, -1
  %4486 = xor i64 8378924606978104696, %4485
  %4487 = and i64 %4486, 8378924606978104696
  %4488 = add i64 %79, -314521180325412748
  %4489 = xor i64 -314521180325412748, %79
  %4490 = and i64 -314521180325412748, %79
  %4491 = mul i64 2, %4490
  %4492 = add i64 %4489, %4491
  %4493 = xor i64 %4487, %4484
  %4494 = xor i64 %4493, %4488
  %4495 = xor i64 %4494, 1704282911257323097
  %4496 = xor i64 %4495, %4492
  %4497 = and i64 %230, 4713249751627274145
  %4498 = xor i64 %230, -1
  %4499 = xor i64 4713249751627274145, %4498
  %4500 = and i64 %4499, 4713249751627274145
  %4501 = or i64 %95, 5039595768155694564
  %4502 = and i64 5039595768155694564, %95
  %4503 = xor i64 5039595768155694564, %95
  %4504 = or i64 %4502, %4503
  %4505 = xor i64 %4504, %4501
  %4506 = xor i64 %4505, 0
  %4507 = xor i64 %4506, %4497
  %4508 = xor i64 %4507, %4500
  %4509 = mul i64 %4496, %4508
  %4510 = trunc i64 %4509 to i8
  %4511 = sub i8 %4510, %4483
  %4512 = sub i8 2, %4511
  %4513 = mul i8 %4482, %4512
  %4514 = srem i8 %4513, 4
  %4515 = icmp eq i8 %4514, 0
  %4516 = mul i8 %4481, %4481
  %4517 = sub i8 %4516, 82
  %4518 = add i8 %4517, %4481
  %4519 = add i8 %4518, 82
  %4520 = srem i8 %4519, 2
  %4521 = icmp eq i8 %4520, 0
  %4522 = and i1 %4515, %4521
  %4523 = select i1 %4522, i32 595012096, i32 595012113
  %4524 = xor i32 %4523, 17
  store i32 %4524, i32* %4, align 4
  %4525 = call i8** @bf14862898971591998804(i32* %4)
  %4526 = load i8*, i8** %4525, align 8
  indirectbr i8* %4526, [label %loopEnd, label %4471]

4527:                                             ; preds = %4527, %loopStart
  %4528 = or i64 %117, -1626647001163464326
  %4529 = xor i64 %117, -1
  %4530 = and i64 -1626647001163464326, %4529
  %4531 = add i64 %4530, %117
  %4532 = or i64 %55, 7954493067889635740
  %4533 = xor i64 %55, -1
  %4534 = and i64 %4533, -9125499381612959924
  %4535 = and i64 %55, 9125499381612959923
  %4536 = or i64 %4534, %4535
  %4537 = xor i64 -1207035181635479856, %4536
  %4538 = xor i64 %55, -1
  %4539 = or i64 -7954493067889635741, %4538
  %4540 = xor i64 %4539, -1
  %4541 = and i64 %4540, -1
  %4542 = or i64 %4537, %4541
  %4543 = add i64 %254, -6451943568292273600
  %4544 = and i64 -6451943568292273600, %254
  %4545 = or i64 -6451943568292273600, %254
  %4546 = add i64 %4544, %4545
  %4547 = xor i64 %4532, %4531
  %4548 = xor i64 %4547, %4543
  %4549 = xor i64 %4548, %4528
  %4550 = xor i64 %4549, %4542
  %4551 = xor i64 %4550, %4546
  %4552 = xor i64 %4551, -8484953680916494447
  %4553 = and i64 %87, 5919098198389640612
  %4554 = xor i64 %87, -1
  %4555 = or i64 -5919098198389640613, %4554
  %4556 = xor i64 %4555, -1
  %4557 = and i64 %4556, -1
  %4558 = add i64 %33, 5964843814631725385
  %4559 = xor i64 5964843814631725385, %33
  %4560 = and i64 5964843814631725385, %33
  %4561 = mul i64 2, %4560
  %4562 = add i64 %4559, %4561
  %4563 = xor i64 %4557, %4562
  %4564 = xor i64 %4563, %4553
  %4565 = xor i64 %4564, 408596376479737081
  %4566 = xor i64 %4565, %4558
  %4567 = mul i64 %4552, %4566
  %4568 = add i64 %27, 1656885441053948857
  %4569 = xor i64 1656885441053948857, %27
  %4570 = and i64 1656885441053948857, %27
  %4571 = mul i64 2, %4570
  %4572 = add i64 %4569, %4571
  %4573 = and i64 %39, -191543417765655221
  %4574 = xor i64 %39, -1
  %4575 = or i64 191543417765655220, %4574
  %4576 = xor i64 %4575, -1
  %4577 = and i64 %4576, -1
  %4578 = xor i64 %4577, -6175917729362054421
  %4579 = xor i64 %4578, %4573
  %4580 = xor i64 %4579, %4572
  %4581 = xor i64 %4580, %4568
  %4582 = add i64 %11, 4654454294938618043
  %4583 = and i64 4654454294938618043, %11
  %4584 = or i64 4654454294938618043, %11
  %4585 = add i64 %4583, %4584
  %4586 = sext i32 %dispatcher1 to i64
  %4587 = or i64 %4586, -1356566486989793489
  %4588 = and i64 -1356566486989793489, %4586
  %4589 = xor i64 -1356566486989793489, %4586
  %4590 = or i64 %4588, %4589
  %4591 = xor i64 %4590, %4587
  %4592 = xor i64 %4591, %4582
  %4593 = xor i64 %4592, 1927819376909896308
  %4594 = xor i64 %4593, %4585
  %4595 = mul i64 %4581, %4594
  %4596 = mul i64 %4567, %4595
  %.reload10.reload = load double, double* %.reload10.reg2mem, align 8
  %4597 = fcmp olt double %.reload10.reload, 6.280000e+00
  store i1 %4597, i1* %.reg2mem102, align 1
  %4598 = mul i64 97, 110
  %4599 = and i64 %139, 8404499753882247032
  %4600 = xor i64 %139, -1
  %4601 = or i64 -8404499753882247033, %4600
  %4602 = xor i64 %4601, -1
  %4603 = and i64 %4602, -1
  %4604 = or i64 %215, -1620357883430176756
  %4605 = xor i64 %215, -1
  %4606 = and i64 %4605, -3269008311388813126
  %4607 = and i64 %215, 3269008311388813125
  %4608 = or i64 %4606, %4607
  %4609 = xor i64 4260813534381551798, %4608
  %4610 = xor i64 %215, -1
  %4611 = or i64 1620357883430176755, %4610
  %4612 = xor i64 %4611, -1
  %4613 = and i64 %4612, -1
  %4614 = or i64 %4609, %4613
  %4615 = xor i64 3079968695211309155, %4603
  %4616 = xor i64 %4615, %4604
  %4617 = xor i64 %4616, %4614
  %4618 = xor i64 %4617, %4599
  %4619 = add i64 %45, 1641558052600219313
  %4620 = add i64 -4287590900231395470, %45
  %4621 = sub i64 %4620, -5929148952831614783
  %4622 = add i64 %77, -5368375456137842569
  %4623 = add i64 8220787158172685573, %77
  %4624 = add i64 %4623, 4857581459399023474
  %4625 = xor i64 %4622, -5584953270171370775
  %4626 = xor i64 %4625, %4619
  %4627 = xor i64 %4626, %4621
  %4628 = xor i64 %4627, %4624
  %4629 = mul i64 %4618, %4628
  %4630 = sdiv i64 43, %4629
  %4631 = sdiv i64 87, 45
  %4632 = and i64 %242, 1570329639512719125
  %4633 = xor i64 %242, -1
  %4634 = xor i64 1570329639512719125, %4633
  %4635 = and i64 %4634, 1570329639512719125
  %4636 = and i64 %117, -7034800773176038244
  %4637 = or i64 7034800773176038243, %117
  %4638 = sub i64 %4637, 7034800773176038243
  %4639 = xor i64 4469973593463434849, %4638
  %4640 = xor i64 %4639, %4636
  %4641 = xor i64 %4640, %4632
  %4642 = xor i64 %4641, %4635
  %4643 = or i64 %121, -4024940901423746507
  %4644 = xor i64 %121, -1
  %4645 = and i64 -4024940901423746507, %4644
  %4646 = add i64 %4645, %121
  %4647 = and i64 %97, -8539410401238232891
  %4648 = or i64 8539410401238232890, %97
  %4649 = sub i64 %4648, 8539410401238232890
  %4650 = xor i64 %4646, -878799350246751733
  %4651 = xor i64 %4650, %4647
  %4652 = xor i64 %4651, %4643
  %4653 = xor i64 %4652, %4649
  %4654 = mul i64 %4642, %4653
  %4655 = mul i64 %4654, 62
  %4656 = and i64 %33, 5206695917650851112
  %4657 = or i64 -5206695917650851113, %33
  %4658 = sub i64 %4657, -5206695917650851113
  %4659 = or i64 %248, -2569292140628541630
  %4660 = and i64 -2569292140628541630, %248
  %4661 = xor i64 -2569292140628541630, %248
  %4662 = or i64 %4660, %4661
  %4663 = and i64 %215, 1634769522965290786
  %4664 = xor i64 %215, -1
  %4665 = xor i64 1634769522965290786, %4664
  %4666 = and i64 %4665, 1634769522965290786
  %4667 = xor i64 %4658, %4656
  %4668 = xor i64 %4667, %4666
  %4669 = xor i64 %4668, %4663
  %4670 = xor i64 %4669, -511474221094582783
  %4671 = xor i64 %4670, %4659
  %4672 = xor i64 %4671, %4662
  %4673 = add i64 %79, -5860328748191271178
  %4674 = add i64 8276662697566580887, %79
  %4675 = sub i64 %4674, -4309752627951699551
  %4676 = and i64 %53, -3264122721330314500
  %4677 = or i64 3264122721330314499, %53
  %4678 = sub i64 %4677, 3264122721330314499
  %4679 = add i64 %242, -8024416310995784294
  %4680 = and i64 -8024416310995784294, %242
  %4681 = or i64 -8024416310995784294, %242
  %4682 = add i64 %4680, %4681
  %4683 = xor i64 %4679, %4682
  %4684 = xor i64 %4683, %4675
  %4685 = xor i64 %4684, %4673
  %4686 = xor i64 %4685, %4676
  %4687 = xor i64 %4686, %4678
  %4688 = xor i64 %4687, 1504246813391057986
  %4689 = mul i64 %4672, %4688
  %4690 = and i64 %65, -2235311356634210147
  %4691 = xor i64 %65, -1
  %4692 = xor i64 -2235311356634210147, %4691
  %4693 = and i64 %4692, -2235311356634210147
  %4694 = and i64 %129, -3848995542841956154
  %4695 = xor i64 %129, -1
  %4696 = xor i64 -3848995542841956154, %4695
  %4697 = and i64 %4696, -3848995542841956154
  %4698 = xor i64 %4690, %4693
  %4699 = xor i64 %4698, %4697
  %4700 = xor i64 %4699, 9040364418132686025
  %4701 = xor i64 %4700, %4694
  %4702 = and i64 %117, -9181218871195023493
  %4703 = xor i64 %117, -1
  %4704 = or i64 9181218871195023492, %4703
  %4705 = xor i64 %4704, -1
  %4706 = and i64 %4705, -1
  %4707 = or i64 %221, 8403289602065499735
  %4708 = xor i64 %221, -1
  %4709 = and i64 %4708, -394084198621111009
  %4710 = and i64 %221, 394084198621111008
  %4711 = or i64 %4709, %4710
  %4712 = xor i64 -8207364070655845560, %4711
  %4713 = xor i64 %221, -1
  %4714 = or i64 -8403289602065499736, %4713
  %4715 = xor i64 %4714, -1
  %4716 = and i64 %4715, -1
  %4717 = or i64 %4712, %4716
  %4718 = or i64 %137, -2982564309429808527
  %4719 = xor i64 %137, -1
  %4720 = and i64 %4719, -1774752205582897599
  %4721 = and i64 %137, 1774752205582897598
  %4722 = or i64 %4720, %4721
  %4723 = xor i64 3586305482111745072, %4722
  %4724 = xor i64 %137, -1
  %4725 = or i64 2982564309429808526, %4724
  %4726 = xor i64 %4725, -1
  %4727 = and i64 %4726, -1
  %4728 = or i64 %4723, %4727
  %4729 = xor i64 1202924255337375622, %4706
  %4730 = xor i64 %4729, %4707
  %4731 = xor i64 %4730, %4717
  %4732 = xor i64 %4731, %4728
  %4733 = xor i64 %4732, %4718
  %4734 = xor i64 %4733, %4702
  %4735 = mul i64 %4701, %4734
  %4736 = sdiv i64 %4689, %4735
  %4737 = add i64 0, 108
  %.reload54 = load i32, i32* %.reg2mem53, align 4
  %4738 = srem i32 %.reload54, 2
  %4739 = icmp eq i32 %4738, 0
  %.reload13.reload101 = load i32, i32* %.reload13.reg2mem, align 4
  %4740 = mul i32 %.reload13.reload101, 2
  %.reload13.reload100 = load i32, i32* %.reload13.reg2mem, align 4
  %4741 = mul i32 %.reload13.reload100, 2
  %4742 = and i64 %107, -8942383711526245579
  %4743 = xor i64 %107, -1
  %4744 = xor i64 -8942383711526245579, %4743
  %4745 = and i64 %4744, -8942383711526245579
  %4746 = and i64 %239, 2110506280248494415
  %4747 = or i64 -2110506280248494416, %239
  %4748 = sub i64 %4747, -2110506280248494416
  %4749 = and i64 %135, 8169287692325042984
  %4750 = xor i64 %135, -1
  %4751 = xor i64 8169287692325042984, %4750
  %4752 = and i64 %4751, 8169287692325042984
  %4753 = xor i64 %4749, %4752
  %4754 = xor i64 %4753, %4746
  %4755 = xor i64 %4754, %4745
  %4756 = xor i64 %4755, %4748
  %4757 = xor i64 %4756, %4742
  %4758 = xor i64 %4757, -7392003513578652679
  %4759 = and i64 %21, -156978379572604149
  %4760 = xor i64 %21, -1
  %4761 = or i64 156978379572604148, %4760
  %4762 = xor i64 %4761, -1
  %4763 = and i64 %4762, -1
  %4764 = and i64 %245, -2718393620571179581
  %4765 = or i64 2718393620571179580, %245
  %4766 = sub i64 %4765, 2718393620571179580
  %4767 = xor i64 4797974352152145042, %4759
  %4768 = xor i64 %4767, %4764
  %4769 = xor i64 %4768, %4763
  %4770 = xor i64 %4769, %4766
  %4771 = mul i64 %4758, %4770
  %4772 = trunc i64 %4771 to i32
  %4773 = and i32 %4772, %4741
  %4774 = or i32 2, %4741
  %4775 = add i32 %4773, %4774
  %4776 = mul i32 %4740, %4775
  %4777 = srem i32 %4776, 4
  %4778 = and i64 %53, -624165471000215348
  %4779 = xor i64 %53, -1
  %4780 = xor i64 -624165471000215348, %4779
  %4781 = and i64 %4780, -624165471000215348
  %4782 = and i64 %79, 956674051284846870
  %4783 = xor i64 %79, -1
  %4784 = xor i64 956674051284846870, %4783
  %4785 = and i64 %4784, 956674051284846870
  %4786 = add i64 %115, 1051707650694448917
  %4787 = and i64 1051707650694448917, %115
  %4788 = or i64 1051707650694448917, %115
  %4789 = add i64 %4787, %4788
  %4790 = xor i64 %4782, %4789
  %4791 = xor i64 %4790, %4786
  %4792 = xor i64 %4791, %4778
  %4793 = xor i64 %4792, %4785
  %4794 = xor i64 %4793, -6243053719957077597
  %4795 = xor i64 %4794, %4781
  %4796 = and i64 %131, -1644797536678143231
  %4797 = or i64 1644797536678143230, %131
  %4798 = sub i64 %4797, 1644797536678143230
  %4799 = and i64 %7, 3087660387957839873
  %4800 = xor i64 %7, -1
  %4801 = xor i64 3087660387957839873, %4800
  %4802 = and i64 %4801, 3087660387957839873
  %4803 = xor i64 0, %4802
  %4804 = xor i64 %4803, %4798
  %4805 = xor i64 %4804, %4796
  %4806 = xor i64 %4805, %4799
  %4807 = mul i64 %4795, %4806
  %4808 = trunc i64 %4807 to i32
  %4809 = icmp eq i32 %4777, %4808
  %.reload13.reload99 = load i32, i32* %.reload13.reg2mem, align 4
  %4810 = mul i32 %.reload13.reload99, %.reload13.reload99
  %.reload13.reload98 = load i32, i32* %.reload13.reg2mem, align 4
  %4811 = and i32 %4810, %.reload13.reload98
  %4812 = or i32 %4810, %.reload13.reload98
  %4813 = add i32 %4811, %4812
  %4814 = srem i32 %4813, 2
  %4815 = icmp eq i32 %4814, 0
  %4816 = and i1 %4809, %4815
  store i1 %4816, i1* %.reg2mem114, align 1
  %4817 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 43
  %4818 = load i32, i32* %4817, align 4
  %4819 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %4820 = load i32, i32* %4819, align 4
  %4821 = srem i32 %4818, %4820
  %4822 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 67
  %4823 = load i32, i32* %4822, align 4
  %4824 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 28
  %4825 = load i32, i32* %4824, align 4
  %4826 = sub i32 %4823, %4825
  %.reload116 = load i1, i1* %.reg2mem114, align 1
  %4827 = select i1 %.reload116, i32 %4821, i32 %4826
  store i32 %4827, i32* %dispatcher, align 4
  %4828 = load i8*, i8** %122, align 8
  %4829 = load i8, i8* %4828, align 1
  %4830 = add i64 %67, 5598942091796865936
  %4831 = sub i64 0, %67
  %4832 = add i64 -5598942091796865936, %4831
  %4833 = sub i64 0, %4832
  %4834 = add i64 %45, -7121281406823838322
  %4835 = sub i64 0, %45
  %4836 = add i64 7121281406823838322, %4835
  %4837 = sub i64 0, %4836
  %4838 = and i64 %91, -5491799188453038951
  %4839 = xor i64 %91, -1
  %4840 = xor i64 -5491799188453038951, %4839
  %4841 = and i64 %4840, -5491799188453038951
  %4842 = xor i64 %4834, %4830
  %4843 = xor i64 %4842, -2910043788913740005
  %4844 = xor i64 %4843, %4833
  %4845 = xor i64 %4844, %4838
  %4846 = xor i64 %4845, %4841
  %4847 = xor i64 %4846, %4837
  %4848 = and i64 %27, -7040356030092414473
  %4849 = xor i64 %27, -1
  %4850 = xor i64 -7040356030092414473, %4849
  %4851 = and i64 %4850, -7040356030092414473
  %4852 = add i64 %25, 8140400286131827380
  %4853 = sub i64 0, %25
  %4854 = sub i64 8140400286131827380, %4853
  %4855 = add i64 %107, 251401486461350402
  %4856 = add i64 1622222145944509191, %107
  %4857 = sub i64 %4856, 1370820659483158789
  %4858 = xor i64 -3079872555348060634, %4848
  %4859 = xor i64 %4858, %4854
  %4860 = xor i64 %4859, %4857
  %4861 = xor i64 %4860, %4851
  %4862 = xor i64 %4861, %4855
  %4863 = xor i64 %4862, %4852
  %4864 = mul i64 %4847, %4863
  %4865 = trunc i64 %4864 to i8
  %4866 = mul i8 %4829, %4865
  %4867 = mul i8 %4829, 2
  %4868 = add i8 2, %4867
  %4869 = mul i8 %4866, %4868
  %4870 = srem i8 %4869, 4
  %4871 = icmp eq i8 %4870, 0
  %4872 = mul i8 %4829, %4829
  %4873 = add i8 %4872, %4829
  %4874 = srem i8 %4873, 2
  %4875 = icmp eq i8 %4874, 0
  %4876 = and i1 %4871, %4875
  %4877 = add i64 %75, -3330549730479577876
  %4878 = sub i64 0, %75
  %4879 = sub i64 -3330549730479577876, %4878
  %4880 = add i64 %69, 8528994220305465521
  %4881 = sub i64 0, %69
  %4882 = add i64 -8528994220305465521, %4881
  %4883 = sub i64 0, %4882
  %4884 = and i64 %236, -1574794821517885308
  %4885 = xor i64 %236, -1
  %4886 = or i64 1574794821517885307, %4885
  %4887 = xor i64 %4886, -1
  %4888 = and i64 %4887, -1
  %4889 = xor i64 8607775514185256545, %4884
  %4890 = xor i64 %4889, %4877
  %4891 = xor i64 %4890, %4888
  %4892 = xor i64 %4891, %4880
  %4893 = xor i64 %4892, %4883
  %4894 = xor i64 %4893, %4879
  %4895 = add i64 %131, -7528977135084492911
  %4896 = and i64 -7528977135084492911, %131
  %4897 = or i64 -7528977135084492911, %131
  %4898 = add i64 %4896, %4897
  %4899 = add i64 %121, 1084724319404181661
  %4900 = and i64 1084724319404181661, %121
  %4901 = or i64 1084724319404181661, %121
  %4902 = add i64 %4900, %4901
  %4903 = and i64 %107, 5500165213428423663
  %4904 = or i64 -5500165213428423664, %107
  %4905 = sub i64 %4904, -5500165213428423664
  %4906 = xor i64 %4902, %4898
  %4907 = xor i64 %4906, %4895
  %4908 = xor i64 %4907, %4899
  %4909 = xor i64 %4908, %4905
  %4910 = xor i64 %4909, %4903
  %4911 = xor i64 %4910, -2204701172128245327
  %4912 = mul i64 %4894, %4911
  %4913 = trunc i64 %4912 to i32
  %4914 = select i1 %4876, i32 595012104, i32 %4913
  %4915 = xor i32 %4914, 25
  store i32 %4915, i32* %4, align 4
  %4916 = call i8** @bf14862898971591998804(i32* %4)
  %4917 = load i8*, i8** %4916, align 8
  indirectbr i8* %4917, [label %loopEnd, label %4527]

4918:                                             ; preds = %4918, %loopStart
  %4919 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 41
  %4920 = load i32, i32* %4919, align 4
  %4921 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %4922 = load i32, i32* %4921, align 4
  %4923 = sub i32 0, %4922
  %4924 = add i32 %4920, %4923
  %4925 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 39
  %4926 = load i32, i32* %4925, align 4
  %4927 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %4928 = load i32, i32* %4927, align 4
  %4929 = srem i32 %4926, %4928
  %.reload115 = load i1, i1* %.reg2mem114, align 1
  %4930 = select i1 %.reload115, i32 %4924, i32 %4929
  store i32 %4930, i32* %dispatcher, align 4
  %4931 = load i8*, i8** %54, align 8
  %4932 = load i8, i8* %4931, align 1
  %4933 = mul i8 %4932, 2
  %4934 = mul i8 %4932, 2
  %4935 = sub i8 0, %4934
  %4936 = add i8 -2, %4935
  %4937 = sub i8 0, %4936
  %4938 = mul i8 %4933, %4937
  %4939 = srem i8 %4938, 4
  %4940 = icmp eq i8 %4939, 0
  %4941 = mul i8 %4932, %4932
  %4942 = add i8 %4941, %4932
  %4943 = srem i8 %4942, 2
  %4944 = icmp eq i8 %4943, 0
  %4945 = xor i1 %4944, true
  %4946 = and i1 %4940, %4945
  %4947 = add i1 %4946, %4944
  %4948 = or i64 %87, 686540933250005392
  %4949 = and i64 686540933250005392, %87
  %4950 = xor i64 686540933250005392, %87
  %4951 = or i64 %4949, %4950
  %4952 = or i64 %236, -2912480450611137015
  %4953 = xor i64 %236, -1
  %4954 = and i64 %4953, 5010919888595492718
  %4955 = and i64 %236, -5010919888595492719
  %4956 = or i64 %4954, %4955
  %4957 = xor i64 -7917724652076455577, %4956
  %4958 = xor i64 %236, -1
  %4959 = or i64 2912480450611137014, %4958
  %4960 = xor i64 %4959, -1
  %4961 = and i64 %4960, -1
  %4962 = or i64 %4957, %4961
  %4963 = xor i64 %4962, %4951
  %4964 = xor i64 %4963, %4948
  %4965 = xor i64 %4964, %4952
  %4966 = xor i64 %4965, -1217907715938636615
  %4967 = and i64 %95, -5989732757178148882
  %4968 = xor i64 %95, -1
  %4969 = xor i64 -5989732757178148882, %4968
  %4970 = and i64 %4969, -5989732757178148882
  %4971 = add i64 %221, -1628415132201139850
  %4972 = sub i64 0, %221
  %4973 = add i64 1628415132201139850, %4972
  %4974 = sub i64 0, %4973
  %4975 = xor i64 %4971, %4974
  %4976 = xor i64 %4975, %4967
  %4977 = xor i64 %4976, %4970
  %4978 = xor i64 %4977, -8304171334113022951
  %4979 = mul i64 %4966, %4978
  %4980 = trunc i64 %4979 to i32
  %4981 = select i1 %4947, i32 595012111, i32 %4980
  %4982 = xor i32 %4981, 30
  store i32 %4982, i32* %4, align 4
  %4983 = call i8** @bf14862898971591998804(i32* %4)
  %4984 = load i8*, i8** %4983, align 8
  indirectbr i8* %4984, [label %loopEnd, label %4918]

4985:                                             ; preds = %4985, %loopStart
  %4986 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 24
  %4987 = load i32, i32* %4986, align 4
  %4988 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 23
  %4989 = load i32, i32* %4988, align 4
  %4990 = add i32 %4987, %4989
  store i32 %4990, i32* %dispatcher, align 4
  %4991 = load i8*, i8** %28, align 8
  %4992 = load i8, i8* %4991, align 1
  %4993 = and i8 %4992, 1
  %4994 = icmp eq i8 %4993, 0
  %4995 = mul i8 %4992, %4992
  %4996 = add i8 %4995, %4992
  %4997 = mul i8 %4996, 3
  %4998 = srem i8 %4997, 2
  %4999 = icmp eq i8 %4998, 0
  %5000 = or i1 %4994, %4999
  %5001 = select i1 %5000, i32 595012156, i32 595012113
  %5002 = xor i32 %5001, 45
  store i32 %5002, i32* %4, align 4
  %5003 = call i8** @bf14862898971591998804(i32* %4)
  %5004 = load i8*, i8** %5003, align 8
  indirectbr i8* %5004, [label %loopEnd, label %4985]

5005:                                             ; preds = %5005, %loopStart
  %5006 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 42
  %5007 = load i32, i32* %5006, align 4
  %5008 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %5009 = load i32, i32* %5008, align 4
  %5010 = and i64 %221, -4517869003352472310
  %5011 = xor i64 %221, -1
  %5012 = xor i64 -4517869003352472310, %5011
  %5013 = and i64 %5012, -4517869003352472310
  %5014 = sext i32 %262 to i64
  %5015 = and i64 %5014, 7987121738821908620
  %5016 = xor i64 %5014, -1
  %5017 = xor i64 7987121738821908620, %5016
  %5018 = and i64 %5017, 7987121738821908620
  %5019 = xor i64 %5010, %5013
  %5020 = xor i64 %5019, -3207989517913588191
  %5021 = xor i64 %5020, %5018
  %5022 = xor i64 %5021, %5015
  %5023 = add i64 %257, -3107924562038676269
  %5024 = add i64 5179147968539013221, %257
  %5025 = add i64 %5024, -8287072530577689490
  %5026 = and i64 %83, -8356450390157235775
  %5027 = xor i64 %83, -1
  %5028 = xor i64 -8356450390157235775, %5027
  %5029 = and i64 %5028, -8356450390157235775
  %5030 = xor i64 %5025, %5023
  %5031 = xor i64 %5030, %5029
  %5032 = xor i64 %5031, %5026
  %5033 = xor i64 %5032, 1311332470932817225
  %5034 = mul i64 %5022, %5033
  %5035 = trunc i64 %5034 to i32
  %5036 = add i32 %5007, %5035
  %5037 = sub i32 %5036, %5009
  %5038 = sub i32 %5037, 1515347049
  store i32 %5038, i32* %dispatcher, align 4
  %.reload113 = load i1, i1* %.reg2mem102, align 1
  store i1 %.reload113, i1* %.reg2mem179, align 1
  %5039 = load i8*, i8** %36, align 8
  %5040 = load i8, i8* %5039, align 1
  %5041 = and i8 %5040, 1
  %5042 = icmp eq i8 %5041, 1
  %5043 = mul i8 %5040, %5040
  %5044 = add i8 %5043, %5040
  %5045 = srem i8 %5044, 2
  %5046 = icmp eq i8 %5045, 0
  %5047 = and i1 %5042, %5046
  %5048 = xor i1 %5042, %5046
  %5049 = or i1 %5047, %5048
  %5050 = select i1 %5049, i32 595012141, i32 595012113
  %5051 = xor i32 %5050, -1
  %5052 = and i32 %5051, 1414533235
  %5053 = and i32 %5050, -1414533236
  %5054 = or i32 %5052, %5053
  %5055 = add i64 %55, 3642602106880356866
  %5056 = sub i64 0, %55
  %5057 = add i64 -3642602106880356866, %5056
  %5058 = sub i64 0, %5057
  %5059 = and i64 %87, 5403887691791501559
  %5060 = or i64 -5403887691791501560, %87
  %5061 = sub i64 %5060, -5403887691791501560
  %5062 = or i64 %221, -6541572085050258725
  %5063 = xor i64 %221, -1
  %5064 = and i64 -6541572085050258725, %5063
  %5065 = add i64 %5064, %221
  %5066 = xor i64 %5062, %5058
  %5067 = xor i64 %5066, %5065
  %5068 = xor i64 %5067, -3947391937381735973
  %5069 = xor i64 %5068, %5061
  %5070 = xor i64 %5069, %5055
  %5071 = xor i64 %5070, %5059
  %5072 = or i64 %73, 783955297430124639
  %5073 = xor i64 %73, -1
  %5074 = and i64 %5073, -2594476402165019821
  %5075 = and i64 %73, 2594476402165019820
  %5076 = or i64 %5074, %5075
  %5077 = xor i64 -3377776389287988468, %5076
  %5078 = xor i64 %73, -1
  %5079 = or i64 -783955297430124640, %5078
  %5080 = xor i64 %5079, -1
  %5081 = and i64 %5080, -1
  %5082 = or i64 %5077, %5081
  %5083 = and i64 %221, -3387416355717932250
  %5084 = xor i64 %221, -1
  %5085 = or i64 3387416355717932249, %5084
  %5086 = xor i64 %5085, -1
  %5087 = and i64 %5086, -1
  %5088 = xor i64 -7653602770800035939, %5083
  %5089 = xor i64 %5088, %5072
  %5090 = xor i64 %5089, %5082
  %5091 = xor i64 %5090, %5087
  %5092 = mul i64 %5071, %5091
  %5093 = trunc i64 %5092 to i32
  %5094 = xor i32 %5054, %5093
  store i32 %5094, i32* %4, align 4
  %5095 = call i8** @bf14862898971591998804(i32* %4)
  %5096 = load i8*, i8** %5095, align 8
  indirectbr i8* %5096, [label %loopEnd, label %5005]

5097:                                             ; preds = %5097, %loopStart
  %.reload180 = load i1, i1* %.reg2mem179, align 1
  store i1 %.reload180, i1* %.reg2mem117, align 1
  %5098 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 19
  %5099 = load i32, i32* %5098, align 4
  %5100 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 17
  %5101 = load i32, i32* %5100, align 4
  %5102 = add i32 %5099, %5101
  %5103 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 25
  %5104 = load i32, i32* %5103, align 4
  %5105 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 24
  %5106 = load i32, i32* %5105, align 4
  %5107 = add i32 %5104, %5106
  %.reload118 = load i1, i1* %.reg2mem117, align 1
  %5108 = select i1 %.reload118, i32 %5102, i32 %5107
  store i32 %5108, i32* %dispatcher, align 4
  %.reload87 = load i32, i32* %.reg2mem84, align 4
  store i32 %.reload87, i32* %.ph.reg2mem181, align 4
  %5109 = load i8*, i8** %18, align 8
  %5110 = load i8, i8* %5109, align 1
  %5111 = and i8 %5110, 1
  %5112 = icmp eq i8 %5111, 1
  %5113 = mul i8 %5110, %5110
  %5114 = add i8 %5113, %5110
  %5115 = srem i8 %5114, 2
  %5116 = icmp eq i8 %5115, 0
  %5117 = or i1 %5112, %5116
  %5118 = select i1 %5117, i32 595012125, i32 595012113
  %5119 = xor i32 %5118, -1
  %5120 = and i32 %5119, 12
  %5121 = and i32 %5118, -13
  %5122 = or i32 %5120, %5121
  store i32 %5122, i32* %4, align 4
  %5123 = call i8** @bf14862898971591998804(i32* %4)
  %5124 = load i8*, i8** %5123, align 8
  indirectbr i8* %5124, [label %loopEnd, label %5097]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %.ph.reload182 = load i32, i32* %.ph.reg2mem181, align 4
  store i32 %.ph.reload182, i32* %.ph.reg2mem, align 4
  %.reload72 = load i32, i32* %.reg2mem56, align 4
  %5125 = mul i32 %.reload72, 2
  %.reload71 = load i32, i32* %.reg2mem56, align 4
  %5126 = mul i32 %.reload71, 2
  %5127 = add i32 2, %5126
  %5128 = mul i32 %5125, %5127
  %5129 = srem i32 %5128, 4
  %5130 = icmp eq i32 %5129, 0
  store i1 %5130, i1* %.reg2mem121, align 1
  %.reload76 = load i32, i32* %.reg2mem75, align 4
  %5131 = srem i32 %.reload76, 2
  %5132 = icmp eq i32 %5131, 0
  %5133 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 64
  %5134 = load i32, i32* %5133, align 4
  %5135 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 20
  %5136 = load i32, i32* %5135, align 4
  %5137 = sub i32 %5134, %5136
  %5138 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 52
  %5139 = load i32, i32* %5138, align 4
  %5140 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %5141 = load i32, i32* %5140, align 4
  %5142 = srem i32 %5139, %5141
  %5143 = select i1 %5132, i32 %5137, i32 %5142
  store i32 %5143, i32* %dispatcher, align 4
  %5144 = load i8*, i8** %78, align 8
  %5145 = load i8, i8* %5144, align 1
  %5146 = and i8 %5145, 1
  %5147 = icmp eq i8 %5146, 1
  %5148 = mul i8 %5145, %5145
  %5149 = add i8 %5148, %5145
  %5150 = srem i8 %5149, 2
  %5151 = and i64 %242, 4749870345128376712
  %5152 = xor i64 %242, -1
  %5153 = or i64 -4749870345128376713, %5152
  %5154 = xor i64 %5153, -1
  %5155 = and i64 %5154, -1
  %5156 = and i64 %239, -8813458305247729186
  %5157 = xor i64 %239, -1
  %5158 = xor i64 -8813458305247729186, %5157
  %5159 = and i64 %5158, -8813458305247729186
  %5160 = or i64 %123, -3672875358466345949
  %5161 = and i64 -3672875358466345949, %123
  %5162 = xor i64 -3672875358466345949, %123
  %5163 = or i64 %5161, %5162
  %5164 = xor i64 %5159, %5160
  %5165 = xor i64 %5164, %5163
  %5166 = xor i64 %5165, %5156
  %5167 = xor i64 %5166, %5151
  %5168 = xor i64 %5167, -5900858103374315149
  %5169 = xor i64 %5168, %5155
  %5170 = and i64 %123, 7701686250525657678
  %5171 = xor i64 %123, -1
  %5172 = xor i64 7701686250525657678, %5171
  %5173 = and i64 %5172, 7701686250525657678
  %5174 = add i64 %133, 4946920155572481085
  %5175 = sub i64 0, %133
  %5176 = add i64 -4946920155572481085, %5175
  %5177 = sub i64 0, %5176
  %5178 = and i64 %33, 1067008010378234545
  %5179 = xor i64 %33, -1
  %5180 = or i64 -1067008010378234546, %5179
  %5181 = xor i64 %5180, -1
  %5182 = and i64 %5181, -1
  %5183 = xor i64 %5177, 0
  %5184 = xor i64 %5183, %5174
  %5185 = xor i64 %5184, %5182
  %5186 = xor i64 %5185, %5170
  %5187 = xor i64 %5186, %5173
  %5188 = xor i64 %5187, %5178
  %5189 = mul i64 %5169, %5188
  %5190 = trunc i64 %5189 to i8
  %5191 = icmp eq i8 %5150, %5190
  %5192 = or i1 %5147, %5191
  %5193 = select i1 %5192, i32 595012156, i32 595012113
  %5194 = xor i32 %5193, 45
  store i32 %5194, i32* %4, align 4
  %5195 = call i8** @bf14862898971591998804(i32* %4)
  %5196 = load i8*, i8** %5195, align 8
  indirectbr i8* %5196, [label %loopEnd, label %.loopexit]

5197:                                             ; preds = %5197, %loopStart
  %5198 = add i64 20, 101
  %.reload70 = load i32, i32* %.reg2mem56, align 4
  %5199 = mul i32 %.reload70, %.reload70
  store i32 %5199, i32* %.reg2mem125, align 4
  %5200 = add i64 38, 103
  %.reload59 = load i32, i32* %.reg2mem56, align 4
  %.reload127 = load i32, i32* %.reg2mem125, align 4
  %5201 = mul i32 %.reload127, %.reload59
  store i32 %5201, i32* %.reg2mem128, align 4
  %5202 = sdiv i64 89, 27
  %.reload58 = load i32, i32* %.reg2mem56, align 4
  %.reload130 = load i32, i32* %.reg2mem128, align 4
  %5203 = add i32 %.reload130, %.reload58
  store i32 %5203, i32* %.reg2mem131, align 4
  %5204 = and i64 %105, -4563776230895254905
  %5205 = xor i64 %105, -1
  %5206 = xor i64 -4563776230895254905, %5205
  %5207 = and i64 %5206, -4563776230895254905
  %5208 = add i64 %9, -5264169667880072597
  %5209 = add i64 7377872438957023125, %9
  %5210 = sub i64 %5209, -5804701966872455894
  %5211 = xor i64 53614062697740979, %5204
  %5212 = xor i64 %5211, %5207
  %5213 = xor i64 %5212, %5210
  %5214 = xor i64 %5213, %5208
  %5215 = and i64 %93, 2750821317346702854
  %5216 = or i64 -2750821317346702855, %93
  %5217 = sub i64 %5216, -2750821317346702855
  %5218 = or i64 %129, 8737117913344220005
  %5219 = xor i64 %129, -1
  %5220 = and i64 %5219, -3594005560819189908
  %5221 = and i64 %129, 3594005560819189907
  %5222 = or i64 %5220, %5221
  %5223 = xor i64 -5233186578603283447, %5222
  %5224 = xor i64 %129, -1
  %5225 = or i64 -8737117913344220006, %5224
  %5226 = xor i64 %5225, -1
  %5227 = and i64 %5226, -1
  %5228 = or i64 %5223, %5227
  %5229 = xor i64 %5228, %5218
  %5230 = xor i64 %5229, %5217
  %5231 = xor i64 %5230, %5215
  %5232 = xor i64 %5231, 6487548968272231120
  %5233 = mul i64 %5214, %5232
  %5234 = sub i64 0, %5233
  %.ph.reload120 = load i32, i32* %.ph.reg2mem, align 4
  %5235 = srem i32 %.ph.reload120, 2
  %5236 = add i64 %17, 7241267042377326044
  %5237 = add i64 4168976076119447456, %17
  %5238 = sub i64 %5237, -3072290966257878588
  %5239 = or i64 %91, -1063773220757636085
  %5240 = xor i64 %91, -1
  %5241 = and i64 -1063773220757636085, %5240
  %5242 = add i64 %5241, %91
  %5243 = and i64 %29, 574347568859739071
  %5244 = xor i64 %29, -1
  %5245 = or i64 -574347568859739072, %5244
  %5246 = xor i64 %5245, -1
  %5247 = and i64 %5246, -1
  %5248 = xor i64 %5242, %5247
  %5249 = xor i64 %5248, %5236
  %5250 = xor i64 %5249, %5239
  %5251 = xor i64 %5250, -8757642536891611159
  %5252 = xor i64 %5251, %5238
  %5253 = xor i64 %5252, %5243
  %5254 = add i64 %33, 3519300461307788677
  %5255 = xor i64 3519300461307788677, %33
  %5256 = and i64 3519300461307788677, %33
  %5257 = mul i64 2, %5256
  %5258 = add i64 %5255, %5257
  %5259 = or i64 %131, -3526835115893949509
  %5260 = xor i64 %131, -1
  %5261 = and i64 -3526835115893949509, %5260
  %5262 = add i64 %5261, %131
  %5263 = or i64 %67, -7009995300266175266
  %5264 = and i64 -7009995300266175266, %67
  %5265 = xor i64 -7009995300266175266, %67
  %5266 = or i64 %5264, %5265
  %5267 = xor i64 %5266, %5262
  %5268 = xor i64 %5267, %5259
  %5269 = xor i64 %5268, %5254
  %5270 = xor i64 %5269, 0
  %5271 = xor i64 %5270, %5263
  %5272 = xor i64 %5271, %5258
  %5273 = mul i64 %5253, %5272
  %5274 = trunc i64 %5273 to i32
  %5275 = icmp eq i32 %5235, %5274
  %.reload11.reload93 = load i32, i32* %.reload11.reg2mem, align 4
  %5276 = and i32 %.reload11.reload93, 1
  %5277 = and i64 %89, 8970052842073231750
  %5278 = xor i64 %89, -1
  %5279 = xor i64 8970052842073231750, %5278
  %5280 = and i64 %5279, 8970052842073231750
  %5281 = and i64 %53, 8734085083066894490
  %5282 = or i64 -8734085083066894491, %53
  %5283 = sub i64 %5282, -8734085083066894491
  %5284 = or i64 %45, 2273430079375858397
  %5285 = xor i64 %45, -1
  %5286 = and i64 %5285, 955380567590468357
  %5287 = and i64 %45, -955380567590468358
  %5288 = or i64 %5286, %5287
  %5289 = xor i64 1355276779164049880, %5288
  %5290 = xor i64 %45, -1
  %5291 = or i64 -2273430079375858398, %5290
  %5292 = xor i64 %5291, -1
  %5293 = and i64 %5292, -1
  %5294 = or i64 %5289, %5293
  %5295 = xor i64 %5294, %5284
  %5296 = xor i64 %5295, %5281
  %5297 = xor i64 %5296, %5283
  %5298 = xor i64 %5297, %5277
  %5299 = xor i64 %5298, %5280
  %5300 = xor i64 %5299, 5704506590582157559
  %5301 = or i64 %43, -9126368839392964364
  %5302 = xor i64 %43, -1
  %5303 = and i64 %5302, -1194215808468258149
  %5304 = and i64 %43, 1194215808468258148
  %5305 = or i64 %5303, %5304
  %5306 = xor i64 7941487611940315759, %5305
  %5307 = xor i64 %43, -1
  %5308 = or i64 9126368839392964363, %5307
  %5309 = xor i64 %5308, -1
  %5310 = and i64 %5309, -1
  %5311 = or i64 %5306, %5310
  %5312 = add i64 %13, 5589204798966297222
  %5313 = sub i64 0, %13
  %5314 = sub i64 5589204798966297222, %5313
  %5315 = and i64 %55, -4833880522324300869
  %5316 = xor i64 %55, -1
  %5317 = xor i64 -4833880522324300869, %5316
  %5318 = and i64 %5317, -4833880522324300869
  %5319 = xor i64 %5318, 0
  %5320 = xor i64 %5319, %5311
  %5321 = xor i64 %5320, %5314
  %5322 = xor i64 %5321, %5301
  %5323 = xor i64 %5322, %5315
  %5324 = xor i64 %5323, %5312
  %5325 = mul i64 %5300, %5324
  %5326 = trunc i64 %5325 to i32
  %5327 = icmp eq i32 %5276, %5326
  %.reload11.reload92 = load i32, i32* %.reload11.reg2mem, align 4
  %5328 = mul i32 %.reload11.reload92, %.reload11.reload92
  %.reload11.reload = load i32, i32* %.reload11.reg2mem, align 4
  %5329 = add i32 %5328, %.reload11.reload
  %5330 = mul i32 %5329, 3
  %5331 = srem i32 %5330, 2
  %5332 = icmp eq i32 %5331, 0
  %5333 = or i1 %5327, %5332
  store i1 %5333, i1* %.reg2mem135, align 1
  %5334 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 26
  %5335 = load i32, i32* %5334, align 4
  %5336 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 25
  %5337 = load i32, i32* %5336, align 4
  %5338 = add i32 %5335, %5337
  %5339 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 46
  %5340 = load i32, i32* %5339, align 4
  %5341 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %5342 = load i32, i32* %5341, align 4
  %5343 = sub i32 %5340, %5342
  %.reload136 = load i1, i1* %.reg2mem135, align 1
  %5344 = select i1 %.reload136, i32 %5338, i32 %5343
  store i32 %5344, i32* %dispatcher, align 4
  %5345 = load i8*, i8** %98, align 8
  %5346 = load i8, i8* %5345, align 1
  %5347 = xor i8 %5346, -1
  %5348 = or i8 %5347, 1
  %5349 = xor i8 %5346, -1
  %5350 = sub i8 %5348, %5349
  %5351 = icmp eq i8 %5350, 1
  %5352 = mul i8 %5346, %5346
  %5353 = add i8 %5352, %5346
  %5354 = srem i8 %5353, 2
  %5355 = and i64 %230, -1958097909328301733
  %5356 = xor i64 %230, -1
  %5357 = or i64 1958097909328301732, %5356
  %5358 = xor i64 %5357, -1
  %5359 = and i64 %5358, -1
  %5360 = and i64 %93, 396919775911008209
  %5361 = xor i64 %93, -1
  %5362 = xor i64 396919775911008209, %5361
  %5363 = and i64 %5362, 396919775911008209
  %5364 = xor i64 %5360, %5355
  %5365 = xor i64 %5364, %5363
  %5366 = xor i64 %5365, 8964993168101930045
  %5367 = xor i64 %5366, %5359
  %5368 = add i64 %71, 3469775783322989837
  %5369 = sub i64 0, %71
  %5370 = sub i64 3469775783322989837, %5369
  %5371 = and i64 %55, 7855489321761886550
  %5372 = or i64 -7855489321761886551, %55
  %5373 = sub i64 %5372, -7855489321761886551
  %5374 = xor i64 %5370, 0
  %5375 = xor i64 %5374, %5368
  %5376 = xor i64 %5375, %5373
  %5377 = xor i64 %5376, %5371
  %5378 = mul i64 %5367, %5377
  %5379 = trunc i64 %5378 to i8
  %5380 = icmp eq i8 %5354, %5379
  %5381 = or i1 %5351, %5380
  %5382 = and i64 %49, 6717535838103208063
  %5383 = xor i64 %49, -1
  %5384 = xor i64 6717535838103208063, %5383
  %5385 = and i64 %5384, 6717535838103208063
  %5386 = and i64 %236, 3759019756698833256
  %5387 = or i64 -3759019756698833257, %236
  %5388 = sub i64 %5387, -3759019756698833257
  %5389 = add i64 %245, -3070666387915467353
  %5390 = xor i64 -3070666387915467353, %245
  %5391 = and i64 -3070666387915467353, %245
  %5392 = mul i64 2, %5391
  %5393 = add i64 %5390, %5392
  %5394 = xor i64 %5382, 6512145322041997453
  %5395 = xor i64 %5394, %5388
  %5396 = xor i64 %5395, %5389
  %5397 = xor i64 %5396, %5385
  %5398 = xor i64 %5397, %5393
  %5399 = xor i64 %5398, %5386
  %5400 = add i64 %43, -5098292539195367319
  %5401 = and i64 -5098292539195367319, %43
  %5402 = or i64 -5098292539195367319, %43
  %5403 = add i64 %5401, %5402
  %5404 = or i64 %83, 1318558074791396873
  %5405 = xor i64 %83, -1
  %5406 = and i64 1318558074791396873, %5405
  %5407 = add i64 %5406, %83
  %5408 = xor i64 %5404, -4530218682844092790
  %5409 = xor i64 %5408, %5407
  %5410 = xor i64 %5409, %5403
  %5411 = xor i64 %5410, %5400
  %5412 = mul i64 %5399, %5411
  %5413 = trunc i64 %5412 to i32
  %5414 = select i1 %5381, i32 %5413, i32 595012113
  %5415 = xor i32 %5414, 19
  store i32 %5415, i32* %4, align 4
  %5416 = call i8** @bf14862898971591998804(i32* %4)
  %5417 = load i8*, i8** %5416, align 8
  indirectbr i8* %5417, [label %loopEnd, label %5197]

5418:                                             ; preds = %5418, %loopStart
  %.reload134 = load i32, i32* %.reg2mem131, align 4
  %5419 = or i64 %15, -8997093433647406695
  %5420 = xor i64 %15, -1
  %5421 = and i64 %5420, -3943324132299503251
  %5422 = and i64 %15, 3943324132299503250
  %5423 = or i64 %5421, %5422
  %5424 = xor i64 5360858782809352436, %5423
  %5425 = xor i64 %15, -1
  %5426 = or i64 8997093433647406694, %5425
  %5427 = xor i64 %5426, -1
  %5428 = and i64 %5427, -1
  %5429 = or i64 %5424, %5428
  %5430 = add i64 %254, -2538920789877459002
  %5431 = xor i64 -2538920789877459002, %254
  %5432 = and i64 -2538920789877459002, %254
  %5433 = mul i64 2, %5432
  %5434 = add i64 %5431, %5433
  %5435 = xor i64 %5429, %5430
  %5436 = xor i64 %5435, %5419
  %5437 = xor i64 %5436, %5434
  %5438 = xor i64 %5437, 6127697035070171351
  %5439 = or i64 %137, -7223955744018390644
  %5440 = xor i64 %137, -1
  %5441 = and i64 -7223955744018390644, %5440
  %5442 = add i64 %5441, %137
  %5443 = or i64 %218, -1030575183025153521
  %5444 = and i64 -1030575183025153521, %218
  %5445 = xor i64 -1030575183025153521, %218
  %5446 = or i64 %5444, %5445
  %5447 = xor i64 %5446, %5439
  %5448 = xor i64 %5447, -2637076320745810482
  %5449 = xor i64 %5448, %5443
  %5450 = xor i64 %5449, %5442
  %5451 = mul i64 %5438, %5450
  %5452 = trunc i64 %5451 to i32
  %5453 = srem i32 %.reload134, %5452
  %5454 = sub i64 93, 50
  %5455 = icmp eq i32 %5453, 0
  %5456 = mul i64 45, 64
  %.reload124 = load i1, i1* %.reg2mem121, align 1
  %5457 = xor i1 %.reload124, true
  %5458 = and i1 %5457, false
  %5459 = and i1 %.reload124, true
  %5460 = or i1 %5458, %5459
  %5461 = xor i1 %5460, true
  %5462 = xor i1 %5455, true
  %5463 = or i1 %5461, %5462
  %5464 = add i64 %105, -8547410570198369088
  %5465 = xor i64 -8547410570198369088, %105
  %5466 = and i64 -8547410570198369088, %105
  %5467 = mul i64 2, %5466
  %5468 = add i64 %5465, %5467
  %5469 = and i64 %67, -2291377665734887816
  %5470 = xor i64 %67, -1
  %5471 = xor i64 -2291377665734887816, %5470
  %5472 = and i64 %5471, -2291377665734887816
  %5473 = or i64 %53, -2745846939014542171
  %5474 = and i64 -2745846939014542171, %53
  %5475 = xor i64 -2745846939014542171, %53
  %5476 = or i64 %5474, %5475
  %5477 = xor i64 -4014254347408023715, %5468
  %5478 = xor i64 %5477, %5469
  %5479 = xor i64 %5478, %5473
  %5480 = xor i64 %5479, %5464
  %5481 = xor i64 %5480, %5476
  %5482 = xor i64 %5481, %5472
  %5483 = or i64 %89, 5275032128413573677
  %5484 = xor i64 %89, -1
  %5485 = and i64 5275032128413573677, %5484
  %5486 = add i64 %5485, %89
  %5487 = and i64 %41, -6721072445247300287
  %5488 = or i64 6721072445247300286, %41
  %5489 = sub i64 %5488, 6721072445247300286
  %5490 = xor i64 %5489, %5487
  %5491 = xor i64 %5490, %5483
  %5492 = xor i64 %5491, %5486
  %5493 = xor i64 %5492, -376767855834501899
  %5494 = mul i64 %5482, %5493
  %5495 = trunc i64 %5494 to i1
  %5496 = or i1 %5463, %5495
  %5497 = and i1 %5463, true
  %5498 = sub i1 %5496, %5497
  %5499 = xor i1 %5498, false
  %5500 = and i1 %5499, %5498
  %5501 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 47
  %5502 = load i32, i32* %5501, align 4
  %5503 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %5504 = load i32, i32* %5503, align 4
  %5505 = sub i32 %5502, -1360765104
  %5506 = sub i32 %5505, %5504
  %5507 = or i64 %5, -2064436945604024739
  %5508 = xor i64 %5, -1
  %5509 = and i64 %5508, -6004928848548000456
  %5510 = and i64 %5, 6004928848548000455
  %5511 = or i64 %5509, %5510
  %5512 = xor i64 5761107288783416165, %5511
  %5513 = xor i64 %5, -1
  %5514 = or i64 2064436945604024738, %5513
  %5515 = xor i64 %5514, -1
  %5516 = and i64 %5515, -1
  %5517 = or i64 %5512, %5516
  %5518 = and i64 %37, -1688316314254318701
  %5519 = xor i64 %37, -1
  %5520 = xor i64 -1688316314254318701, %5519
  %5521 = and i64 %5520, -1688316314254318701
  %5522 = and i64 %127, -6423512117873476532
  %5523 = or i64 6423512117873476531, %127
  %5524 = sub i64 %5523, 6423512117873476531
  %5525 = xor i64 5645585066318962105, %5524
  %5526 = xor i64 %5525, %5522
  %5527 = xor i64 %5526, %5518
  %5528 = xor i64 %5527, %5517
  %5529 = xor i64 %5528, %5507
  %5530 = xor i64 %5529, %5521
  %5531 = and i64 %137, 8302473095393227762
  %5532 = xor i64 %137, -1
  %5533 = xor i64 8302473095393227762, %5532
  %5534 = and i64 %5533, 8302473095393227762
  %5535 = and i64 %139, -1567193001630793967
  %5536 = xor i64 %139, -1
  %5537 = or i64 1567193001630793966, %5536
  %5538 = xor i64 %5537, -1
  %5539 = and i64 %5538, -1
  %5540 = and i64 %71, -8306904856613477982
  %5541 = xor i64 %71, -1
  %5542 = xor i64 -8306904856613477982, %5541
  %5543 = and i64 %5542, -8306904856613477982
  %5544 = xor i64 %5539, %5540
  %5545 = xor i64 %5544, %5531
  %5546 = xor i64 %5545, -9214981381227904560
  %5547 = xor i64 %5546, %5534
  %5548 = xor i64 %5547, %5543
  %5549 = xor i64 %5548, %5535
  %5550 = mul i64 %5530, %5549
  %5551 = trunc i64 %5550 to i32
  %5552 = add i32 %5506, %5551
  store i32 %5552, i32* %dispatcher, align 4
  store i32 %5453, i32* %.reg2mem183, align 4
  store i1 %5455, i1* %.reg2mem185, align 1
  store i1 %5461, i1* %.reg2mem187, align 1
  store i1 %5462, i1* %.reg2mem189, align 1
  store i1 %5463, i1* %.reg2mem191, align 1
  store i1 %5498, i1* %.reg2mem193, align 1
  store i1 %5500, i1* %.reg2mem195, align 1
  %5553 = load i8*, i8** %46, align 8
  %5554 = load i8, i8* %5553, align 1
  %5555 = mul i8 %5554, %5554
  %5556 = add i8 %5555, %5554
  %5557 = mul i8 %5556, 3
  %5558 = or i64 %71, 678126580190010897
  %5559 = xor i64 %71, -1
  %5560 = and i64 %5559, 9047659447766508313
  %5561 = and i64 %71, -9047659447766508314
  %5562 = or i64 %5560, %5561
  %5563 = xor i64 8423577232549461256, %5562
  %5564 = xor i64 %71, -1
  %5565 = or i64 -678126580190010898, %5564
  %5566 = xor i64 %5565, -1
  %5567 = and i64 %5566, -1
  %5568 = or i64 %5563, %5567
  %5569 = and i64 %109, 2013763583538771862
  %5570 = or i64 -2013763583538771863, %109
  %5571 = sub i64 %5570, -2013763583538771863
  %5572 = xor i64 %5558, %5569
  %5573 = xor i64 %5572, %5568
  %5574 = xor i64 %5573, %5571
  %5575 = xor i64 %5574, -7576048292145856101
  %5576 = add i64 %89, 379151411986266666
  %5577 = and i64 379151411986266666, %89
  %5578 = or i64 379151411986266666, %89
  %5579 = add i64 %5577, %5578
  %5580 = or i64 %49, -6316532212990549840
  %5581 = xor i64 %49, -1
  %5582 = and i64 -6316532212990549840, %5581
  %5583 = add i64 %5582, %49
  %5584 = xor i64 %5580, 5538820156578265382
  %5585 = xor i64 %5584, %5583
  %5586 = xor i64 %5585, %5576
  %5587 = xor i64 %5586, %5579
  %5588 = mul i64 %5575, %5587
  %5589 = trunc i64 %5588 to i8
  %5590 = srem i8 %5557, %5589
  %5591 = icmp eq i8 %5590, 0
  %5592 = mul i8 %5554, %5554
  %5593 = xor i8 %5592, %5554
  %5594 = and i8 %5592, %5554
  %5595 = mul i8 2, %5594
  %5596 = add i8 %5593, %5595
  %5597 = and i64 %125, 7409186400232866954
  %5598 = xor i64 %125, -1
  %5599 = xor i64 7409186400232866954, %5598
  %5600 = and i64 %5599, 7409186400232866954
  %5601 = and i64 %135, -6735550567347846845
  %5602 = xor i64 %135, -1
  %5603 = or i64 6735550567347846844, %5602
  %5604 = xor i64 %5603, -1
  %5605 = and i64 %5604, -1
  %5606 = xor i64 %5597, 3891746265383335127
  %5607 = xor i64 %5606, %5600
  %5608 = xor i64 %5607, %5601
  %5609 = xor i64 %5608, %5605
  %5610 = add i64 %83, -6158694876807677934
  %5611 = add i64 -1202729561675796927, %83
  %5612 = add i64 %5611, -4955965315131881007
  %5613 = or i64 %101, -8324032978783356794
  %5614 = and i64 -8324032978783356794, %101
  %5615 = xor i64 -8324032978783356794, %101
  %5616 = or i64 %5614, %5615
  %5617 = add i64 %105, 2068378450006496015
  %5618 = and i64 2068378450006496015, %105
  %5619 = or i64 2068378450006496015, %105
  %5620 = add i64 %5618, %5619
  %5621 = xor i64 %5610, %5617
  %5622 = xor i64 %5621, %5616
  %5623 = xor i64 %5622, %5620
  %5624 = xor i64 %5623, %5612
  %5625 = xor i64 %5624, %5613
  %5626 = xor i64 %5625, 6733611961540154673
  %5627 = mul i64 %5609, %5626
  %5628 = trunc i64 %5627 to i8
  %5629 = mul i8 %5628, %5596
  %5630 = add i8 23, %5629
  %5631 = mul i8 -105, %5630
  %5632 = add i8 111, %5631
  %5633 = srem i8 %5632, 2
  %5634 = icmp eq i8 %5633, 0
  %5635 = xor i1 %5634, true
  %5636 = xor i1 %5591, %5635
  %5637 = and i1 %5636, %5591
  %5638 = add i64 %15, -7868795480818697977
  %5639 = sub i64 0, %15
  %5640 = add i64 7868795480818697977, %5639
  %5641 = sub i64 0, %5640
  %5642 = or i64 %248, -3740539948609748120
  %5643 = and i64 -3740539948609748120, %248
  %5644 = xor i64 -3740539948609748120, %248
  %5645 = or i64 %5643, %5644
  %5646 = or i64 %215, 3148851148787741504
  %5647 = and i64 3148851148787741504, %215
  %5648 = xor i64 3148851148787741504, %215
  %5649 = or i64 %5647, %5648
  %5650 = xor i64 %5641, 3559866302584007555
  %5651 = xor i64 %5650, %5638
  %5652 = xor i64 %5651, %5642
  %5653 = xor i64 %5652, %5646
  %5654 = xor i64 %5653, %5649
  %5655 = xor i64 %5654, %5645
  %5656 = or i64 %7, 4980252034277870177
  %5657 = xor i64 %7, -1
  %5658 = and i64 4980252034277870177, %5657
  %5659 = add i64 %5658, %7
  %5660 = or i64 %65, -8749939445071644444
  %5661 = and i64 -8749939445071644444, %65
  %5662 = xor i64 -8749939445071644444, %65
  %5663 = or i64 %5661, %5662
  %5664 = xor i64 %5663, -2586576274433541157
  %5665 = xor i64 %5664, %5656
  %5666 = xor i64 %5665, %5660
  %5667 = xor i64 %5666, %5659
  %5668 = mul i64 %5655, %5667
  %5669 = trunc i64 %5668 to i32
  %5670 = select i1 %5637, i32 595012162, i32 %5669
  %5671 = xor i32 %5670, -1028090009
  %5672 = and i64 %65, -6393250916180937869
  %5673 = xor i64 %65, -1
  %5674 = or i64 6393250916180937868, %5673
  %5675 = xor i64 %5674, -1
  %5676 = and i64 %5675, -1
  %5677 = or i64 %95, -4048567419393881532
  %5678 = and i64 -4048567419393881532, %95
  %5679 = xor i64 -4048567419393881532, %95
  %5680 = or i64 %5678, %5679
  %5681 = xor i64 %5677, 920387339818014449
  %5682 = xor i64 %5681, %5676
  %5683 = xor i64 %5682, %5680
  %5684 = xor i64 %5683, %5672
  %5685 = add i64 %5, -6348218210500624698
  %5686 = sub i64 0, %5
  %5687 = add i64 6348218210500624698, %5686
  %5688 = sub i64 0, %5687
  %5689 = or i64 %43, 7217989689346400336
  %5690 = xor i64 %43, -1
  %5691 = and i64 %5690, -7134295204718891239
  %5692 = and i64 %43, 7134295204718891238
  %5693 = or i64 %5691, %5692
  %5694 = xor i64 -516058882555408567, %5693
  %5695 = xor i64 %43, -1
  %5696 = or i64 -7217989689346400337, %5695
  %5697 = xor i64 %5696, -1
  %5698 = and i64 %5697, -1
  %5699 = or i64 %5694, %5698
  %5700 = xor i64 %5699, %5689
  %5701 = xor i64 %5700, %5685
  %5702 = xor i64 %5701, -290673961275796876
  %5703 = xor i64 %5702, %5688
  %5704 = mul i64 %5684, %5703
  %5705 = trunc i64 %5704 to i32
  %5706 = xor i32 %5671, %5705
  store i32 %5706, i32* %4, align 4
  %5707 = call i8** @bf14862898971591998804(i32* %4)
  %5708 = load i8*, i8** %5707, align 8
  indirectbr i8* %5708, [label %loopEnd, label %5418]

codeRepl19:                                       ; preds = %codeRepl19, %loopStart
  %lt.cast39 = bitcast i32* %.loc20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast39)
  %lt.cast40 = bitcast i64* %.loc21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast40)
  %lt.cast41 = bitcast i1* %.loc22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast41)
  %lt.cast42 = bitcast i64* %.loc23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast42)
  %lt.cast43 = bitcast i1* %.loc24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast43)
  %lt.cast44 = bitcast i1* %.loc25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast44)
  %lt.cast45 = bitcast i1* %.loc26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast45)
  %lt.cast46 = bitcast i1* %.loc27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast46)
  %lt.cast47 = bitcast i1* %.loc28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast47)
  store i64 1996855465712537084, i64* %213, align 8
  %5709 = call i8** @lk14802275186744156584(i64* %213)
  %5710 = load i8*, i8** %5709, align 8
  %5711 = bitcast i8* %5710 to i1 (i32, i1, i1, i32*, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*)*
  %.reload123 = load i1, i1* %.reg2mem121, align 1
  %.reload133 = load i32, i32* %.reg2mem131, align 4
  %.reload137 = load i1, i1* %.reg2mem135, align 1
  %targetBlock29 = call i1 %5711(i32 %.reload133, i1 %.reload123, i1 %.reload137, i32* %.loc20, i64* %.loc21, i1* %.loc22, i64* %.loc23, i1* %.loc24, i1* %.loc25, i1* %.loc26, i1* %.loc27, i1* %.loc28)
  %.reload30 = load i32, i32* %.loc20, align 4
  %.reload31 = load i64, i64* %.loc21, align 8
  %.reload32 = load i1, i1* %.loc22, align 1
  %.reload33 = load i64, i64* %.loc23, align 8
  %.reload34 = load i1, i1* %.loc24, align 1
  %.reload35 = load i1, i1* %.loc25, align 1
  %.reload36 = load i1, i1* %.loc26, align 1
  %.reload37 = load i1, i1* %.loc27, align 1
  %.reload38 = load i1, i1* %.loc28, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast39)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast40)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast41)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast42)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast43)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast44)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast45)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast46)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast47)
  %5712 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 27
  %5713 = load i32, i32* %5712, align 4
  %5714 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 26
  %5715 = load i32, i32* %5714, align 4
  %5716 = add i32 %5713, %5715
  %5717 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 46
  %5718 = load i32, i32* %5717, align 4
  %5719 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %5720 = load i32, i32* %5719, align 4
  %5721 = srem i32 %5718, %5720
  %5722 = select i1 %targetBlock29, i32 %5716, i32 %5721
  store i32 %5722, i32* %dispatcher, align 4
  store i32 0, i32* %.ph.reg2mem181, align 4
  store i32 %.reload30, i32* %.reg2mem183, align 4
  store i1 %.reload32, i1* %.reg2mem185, align 1
  store i1 %.reload34, i1* %.reg2mem187, align 1
  store i1 %.reload35, i1* %.reg2mem189, align 1
  store i1 %.reload36, i1* %.reg2mem191, align 1
  store i1 %.reload37, i1* %.reg2mem193, align 1
  store i1 %.reload38, i1* %.reg2mem195, align 1
  %5723 = load i8*, i8** %112, align 8
  %5724 = load i8, i8* %5723, align 1
  %5725 = xor i8 %5724, -1
  %5726 = or i8 %5725, 1
  %5727 = add i64 %23, 5272047275065801953
  %5728 = sub i64 0, %23
  %5729 = sub i64 5272047275065801953, %5728
  %5730 = add i64 %75, -6211981581104603278
  %5731 = add i64 -302017612444690838, %75
  %5732 = add i64 %5731, -5909963968659912440
  %5733 = add i64 %51, 9176727798858206585
  %5734 = sub i64 0, %51
  %5735 = add i64 -9176727798858206585, %5734
  %5736 = sub i64 0, %5735
  %5737 = xor i64 %5736, %5732
  %5738 = xor i64 %5737, %5729
  %5739 = xor i64 %5738, %5733
  %5740 = xor i64 %5739, 9179414846171240527
  %5741 = xor i64 %5740, %5730
  %5742 = xor i64 %5741, %5727
  %5743 = and i64 %141, -4790300866176865515
  %5744 = xor i64 %141, -1
  %5745 = xor i64 -4790300866176865515, %5744
  %5746 = and i64 %5745, -4790300866176865515
  %5747 = and i64 %115, -3879131208608244810
  %5748 = xor i64 %115, -1
  %5749 = xor i64 -3879131208608244810, %5748
  %5750 = and i64 %5749, -3879131208608244810
  %5751 = and i64 %248, -2498753087594068003
  %5752 = xor i64 %248, -1
  %5753 = or i64 2498753087594068002, %5752
  %5754 = xor i64 %5753, -1
  %5755 = and i64 %5754, -1
  %5756 = xor i64 %5747, %5746
  %5757 = xor i64 %5756, %5743
  %5758 = xor i64 %5757, %5750
  %5759 = xor i64 %5758, %5751
  %5760 = xor i64 %5759, 7703607240060727377
  %5761 = xor i64 %5760, %5755
  %5762 = mul i64 %5742, %5761
  %5763 = trunc i64 %5762 to i8
  %5764 = xor i8 %5724, %5763
  %5765 = sub i8 %5726, %5764
  %5766 = icmp eq i8 %5765, 1
  %5767 = mul i8 %5724, %5724
  %5768 = add i8 %5767, %5724
  %5769 = srem i8 %5768, 2
  %5770 = and i64 %111, -2348615065451039663
  %5771 = xor i64 %111, -1
  %5772 = or i64 2348615065451039662, %5771
  %5773 = xor i64 %5772, -1
  %5774 = and i64 %5773, -1
  %5775 = add i64 %135, 7625860510697902482
  %5776 = sub i64 0, %135
  %5777 = add i64 -7625860510697902482, %5776
  %5778 = sub i64 0, %5777
  %5779 = xor i64 -8536332226629161419, %5774
  %5780 = xor i64 %5779, %5778
  %5781 = xor i64 %5780, %5770
  %5782 = xor i64 %5781, %5775
  %5783 = add i64 %63, -4001567112216382418
  %5784 = sub i64 0, %63
  %5785 = add i64 4001567112216382418, %5784
  %5786 = sub i64 0, %5785
  %5787 = or i64 %87, 6755845899173678083
  %5788 = xor i64 %87, -1
  %5789 = and i64 6755845899173678083, %5788
  %5790 = add i64 %5789, %87
  %5791 = add i64 %101, 8997818388647965691
  %5792 = and i64 8997818388647965691, %101
  %5793 = or i64 8997818388647965691, %101
  %5794 = add i64 %5792, %5793
  %5795 = xor i64 %5787, %5794
  %5796 = xor i64 %5795, 0
  %5797 = xor i64 %5796, %5783
  %5798 = xor i64 %5797, %5786
  %5799 = xor i64 %5798, %5790
  %5800 = xor i64 %5799, %5791
  %5801 = mul i64 %5782, %5800
  %5802 = trunc i64 %5801 to i8
  %5803 = icmp eq i8 %5769, %5802
  %5804 = or i1 %5766, %5803
  %5805 = select i1 %5804, i32 595012109, i32 595012113
  %5806 = or i64 %45, -9201028197820640287
  %5807 = xor i64 %45, -1
  %5808 = and i64 %5807, -546576999185908017
  %5809 = and i64 %45, 546576999185908016
  %5810 = or i64 %5808, %5809
  %5811 = xor i64 8657407802732686638, %5810
  %5812 = xor i64 %45, -1
  %5813 = or i64 9201028197820640286, %5812
  %5814 = xor i64 %5813, -1
  %5815 = and i64 %5814, -1
  %5816 = or i64 %5811, %5815
  %5817 = or i64 %67, -3316587759967178272
  %5818 = xor i64 %67, -1
  %5819 = and i64 -3316587759967178272, %5818
  %5820 = add i64 %5819, %67
  %5821 = add i64 %9, 6074065770971229272
  %5822 = add i64 -4803878004087681282, %9
  %5823 = add i64 %5822, -7568800298650641062
  %5824 = xor i64 %5821, %5823
  %5825 = xor i64 %5824, %5820
  %5826 = xor i64 %5825, 5216476776229937843
  %5827 = xor i64 %5826, %5817
  %5828 = xor i64 %5827, %5816
  %5829 = xor i64 %5828, %5806
  %5830 = and i64 %129, -6464374786603938376
  %5831 = xor i64 %129, -1
  %5832 = xor i64 -6464374786603938376, %5831
  %5833 = and i64 %5832, -6464374786603938376
  %5834 = and i64 %224, -5550598865004314934
  %5835 = or i64 5550598865004314933, %224
  %5836 = sub i64 %5835, 5550598865004314933
  %5837 = or i64 %71, -6104703208793922599
  %5838 = xor i64 %71, -1
  %5839 = and i64 -6104703208793922599, %5838
  %5840 = add i64 %5839, %71
  %5841 = xor i64 %5840, %5833
  %5842 = xor i64 %5841, %5837
  %5843 = xor i64 %5842, %5836
  %5844 = xor i64 %5843, %5834
  %5845 = xor i64 %5844, -5590637797270543483
  %5846 = xor i64 %5845, %5830
  %5847 = mul i64 %5829, %5846
  %5848 = trunc i64 %5847 to i32
  %5849 = xor i32 %5805, %5848
  %5850 = and i32 %5849, -1454428851
  %5851 = and i32 %5805, 1454428850
  %5852 = or i32 %5850, %5851
  %5853 = and i64 %61, 8933705977392028453
  %5854 = xor i64 %61, -1
  %5855 = or i64 -8933705977392028454, %5854
  %5856 = xor i64 %5855, -1
  %5857 = and i64 %5856, -1
  %5858 = and i64 %93, 5089456234865692898
  %5859 = xor i64 %93, -1
  %5860 = xor i64 5089456234865692898, %5859
  %5861 = and i64 %5860, 5089456234865692898
  %5862 = xor i64 5288224458109207299, %5858
  %5863 = xor i64 %5862, %5857
  %5864 = xor i64 %5863, %5861
  %5865 = xor i64 %5864, %5853
  %5866 = add i64 %218, -6945879724303967502
  %5867 = sub i64 0, %218
  %5868 = add i64 6945879724303967502, %5867
  %5869 = sub i64 0, %5868
  %5870 = or i64 %55, 1218762966904643280
  %5871 = xor i64 %55, -1
  %5872 = and i64 %5871, 3072274662899278327
  %5873 = and i64 %55, -3072274662899278328
  %5874 = or i64 %5872, %5873
  %5875 = xor i64 4200455411969294119, %5874
  %5876 = xor i64 %55, -1
  %5877 = or i64 -1218762966904643281, %5876
  %5878 = xor i64 %5877, -1
  %5879 = and i64 %5878, -1
  %5880 = or i64 %5875, %5879
  %5881 = xor i64 %5880, %5870
  %5882 = xor i64 %5881, %5869
  %5883 = xor i64 %5882, %5866
  %5884 = xor i64 %5883, -8564325246786522085
  %5885 = mul i64 %5865, %5884
  %5886 = trunc i64 %5885 to i32
  %5887 = xor i32 %5852, %5886
  store i32 %5887, i32* %4, align 4
  %5888 = call i8** @bf14862898971591998804(i32* %4)
  %5889 = load i8*, i8** %5888, align 8
  indirectbr i8* %5889, [label %loopEnd, label %codeRepl19]

5890:                                             ; preds = %5890, %loopStart
  %.reload196 = load i1, i1* %.reg2mem195, align 1
  %.reload194 = load i1, i1* %.reg2mem193, align 1
  %.reload192 = load i1, i1* %.reg2mem191, align 1
  %.reload190 = load i1, i1* %.reg2mem189, align 1
  %.reload188 = load i1, i1* %.reg2mem187, align 1
  %.reload186 = load i1, i1* %.reg2mem185, align 1
  %.reload184 = load i32, i32* %.reg2mem183, align 4
  store i1 %.reload196, i1* %.reg2mem150, align 1
  store i1 %.reload194, i1* %.reg2mem148, align 1
  store i1 %.reload192, i1* %.reg2mem146, align 1
  store i1 %.reload190, i1* %.reg2mem144, align 1
  store i1 %.reload188, i1* %.reg2mem142, align 1
  store i1 %.reload186, i1* %.reg2mem140, align 1
  store i32 %.reload184, i32* %.reg2mem138, align 4
  %5891 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 28
  %5892 = load i32, i32* %5891, align 4
  %5893 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 26
  %5894 = load i32, i32* %5893, align 4
  %5895 = add i32 %5892, %5894
  store i32 %5895, i32* %dispatcher, align 4
  %5896 = load i8*, i8** %96, align 8
  %5897 = load i8, i8* %5896, align 1
  %5898 = xor i8 %5897, -1
  %5899 = or i8 %5898, 1
  %5900 = xor i8 %5897, -1
  %5901 = sub i8 %5899, %5900
  %5902 = icmp eq i8 %5901, 1
  %5903 = mul i8 %5897, %5897
  %5904 = sub i8 0, %5897
  %5905 = sub i8 %5903, %5904
  %5906 = srem i8 %5905, 2
  %5907 = icmp eq i8 %5906, 0
  %5908 = or i1 %5902, %5907
  %5909 = add i64 %65, 5971651926880853977
  %5910 = and i64 5971651926880853977, %65
  %5911 = or i64 5971651926880853977, %65
  %5912 = add i64 %5910, %5911
  %5913 = add i64 %81, -1943687122968637618
  %5914 = sub i64 0, %81
  %5915 = sub i64 -1943687122968637618, %5914
  %5916 = or i64 %25, -6454208134658433232
  %5917 = xor i64 %25, -1
  %5918 = and i64 %5917, -96308343322558868
  %5919 = and i64 %25, 96308343322558867
  %5920 = or i64 %5918, %5919
  %5921 = xor i64 6397314857076875612, %5920
  %5922 = xor i64 %25, -1
  %5923 = or i64 6454208134658433231, %5922
  %5924 = xor i64 %5923, -1
  %5925 = and i64 %5924, -1
  %5926 = or i64 %5921, %5925
  %5927 = xor i64 %5916, %5913
  %5928 = xor i64 %5927, %5915
  %5929 = xor i64 %5928, %5912
  %5930 = xor i64 %5929, %5909
  %5931 = xor i64 %5930, %5926
  %5932 = xor i64 %5931, 7645686549091827821
  %5933 = add i64 %67, 6204176789665203223
  %5934 = sub i64 0, %67
  %5935 = add i64 -6204176789665203223, %5934
  %5936 = sub i64 0, %5935
  %5937 = add i64 %251, -7569932839405623136
  %5938 = add i64 4906833211555539458, %251
  %5939 = sub i64 %5938, -5969978022748389022
  %5940 = xor i64 %5939, %5933
  %5941 = xor i64 %5940, -4265127298156788609
  %5942 = xor i64 %5941, %5937
  %5943 = xor i64 %5942, %5936
  %5944 = mul i64 %5932, %5943
  %5945 = trunc i64 %5944 to i32
  %5946 = select i1 %5908, i32 %5945, i32 595012113
  %5947 = xor i32 %5946, -1
  %5948 = and i64 %81, 3649416655073774361
  %5949 = or i64 -3649416655073774362, %81
  %5950 = sub i64 %5949, -3649416655073774362
  %5951 = add i64 %83, -3608406681839827903
  %5952 = sub i64 0, %83
  %5953 = add i64 3608406681839827903, %5952
  %5954 = sub i64 0, %5953
  %5955 = add i64 %139, -5011561007833434360
  %5956 = sub i64 0, %139
  %5957 = sub i64 -5011561007833434360, %5956
  %5958 = xor i64 %5951, 7812414495978037221
  %5959 = xor i64 %5958, %5948
  %5960 = xor i64 %5959, %5957
  %5961 = xor i64 %5960, %5950
  %5962 = xor i64 %5961, %5955
  %5963 = xor i64 %5962, %5954
  %5964 = or i64 %123, -5436244183082561433
  %5965 = and i64 -5436244183082561433, %123
  %5966 = xor i64 -5436244183082561433, %123
  %5967 = or i64 %5965, %5966
  %5968 = and i64 %221, 5314118106347921384
  %5969 = xor i64 %221, -1
  %5970 = xor i64 5314118106347921384, %5969
  %5971 = and i64 %5970, 5314118106347921384
  %5972 = add i64 %131, 4618195045270858075
  %5973 = add i64 1857306215104374970, %131
  %5974 = add i64 %5973, 2760888830166483105
  %5975 = xor i64 %5964, %5968
  %5976 = xor i64 %5975, -8747842277035604489
  %5977 = xor i64 %5976, %5974
  %5978 = xor i64 %5977, %5967
  %5979 = xor i64 %5978, %5971
  %5980 = xor i64 %5979, %5972
  %5981 = mul i64 %5963, %5980
  %5982 = trunc i64 %5981 to i32
  %5983 = and i32 %5947, %5982
  %5984 = and i32 %5946, -1086996212
  %5985 = or i32 %5983, %5984
  %5986 = xor i32 %5985, 1086996209
  store i32 %5986, i32* %4, align 4
  %5987 = call i8** @bf14862898971591998804(i32* %4)
  %5988 = load i8*, i8** %5987, align 8
  indirectbr i8* %5988, [label %loopEnd, label %5890]

codeRepl48:                                       ; preds = %codeRepl48, %loopStart
  store i64 1996855465712537080, i64* %213, align 8
  %5989 = call i8** @lk14802275186744156584(i64* %213)
  %5990 = load i8*, i8** %5989, align 8
  %5991 = bitcast i8* %5990 to void ()*
  call void %5991()
  %5992 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 59
  %5993 = load i32, i32* %5992, align 4
  %5994 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 9
  %5995 = load i32, i32* %5994, align 4
  %5996 = sub i32 %5993, %5995
  store i32 %5996, i32* %dispatcher, align 4
  %.reload126 = load i32, i32* %.reg2mem125, align 4
  %.reload129 = load i32, i32* %.reg2mem128, align 4
  %.reload132 = load i32, i32* %.reg2mem131, align 4
  %.reload139 = load i32, i32* %.reg2mem138, align 4
  %.reload141 = load i1, i1* %.reg2mem140, align 1
  %.reload143 = load i1, i1* %.reg2mem142, align 1
  %.reload145 = load i1, i1* %.reg2mem144, align 1
  %.reload147 = load i1, i1* %.reg2mem146, align 1
  %.reload149 = load i1, i1* %.reg2mem148, align 1
  %.reload151 = load i1, i1* %.reg2mem150, align 1
  store i32 %.reload139, i32* %.reg2mem197, align 4
  store i1 %.reload151, i1* %.reg2mem199, align 1
  %5997 = load i8*, i8** %88, align 8
  %5998 = load i8, i8* %5997, align 1
  %5999 = and i8 %5998, 1
  %6000 = icmp eq i8 %5999, 0
  %6001 = mul i8 %5998, %5998
  %6002 = add i8 %6001, %5998
  %6003 = mul i8 %6002, 3
  %6004 = srem i8 %6003, 2
  %6005 = icmp eq i8 %6004, 0
  %6006 = xor i1 %6000, true
  %6007 = and i1 %6006, false
  %6008 = and i1 %6000, true
  %6009 = or i1 %6007, %6008
  %6010 = xor i1 %6005, true
  %6011 = and i1 %6010, false
  %6012 = and i1 %6005, true
  %6013 = or i1 %6011, %6012
  %6014 = xor i1 %6009, %6013
  %6015 = xor i1 %6000, true
  %6016 = xor i1 %6005, true
  %6017 = or i1 %6015, %6016
  %6018 = xor i1 %6017, true
  %6019 = and i1 %6018, true
  %6020 = or i1 %6014, %6019
  %6021 = select i1 %6020, i32 595012118, i32 595012113
  %6022 = xor i32 %6021, -1
  %6023 = and i64 %79, -4253563033987265830
  %6024 = xor i64 %79, -1
  %6025 = or i64 4253563033987265829, %6024
  %6026 = xor i64 %6025, -1
  %6027 = and i64 %6026, -1
  %6028 = or i64 %37, -1187109952876666272
  %6029 = and i64 -1187109952876666272, %37
  %6030 = xor i64 -1187109952876666272, %37
  %6031 = or i64 %6029, %6030
  %6032 = or i64 %33, 7192634823551703148
  %6033 = and i64 7192634823551703148, %33
  %6034 = xor i64 7192634823551703148, %33
  %6035 = or i64 %6033, %6034
  %6036 = xor i64 %6023, %6032
  %6037 = xor i64 %6036, %6031
  %6038 = xor i64 %6037, %6028
  %6039 = xor i64 %6038, %6027
  %6040 = xor i64 %6039, 6693801813926486707
  %6041 = xor i64 %6040, %6035
  %6042 = or i64 %51, -710115524366479817
  %6043 = and i64 -710115524366479817, %51
  %6044 = xor i64 -710115524366479817, %51
  %6045 = or i64 %6043, %6044
  %6046 = add i64 %95, 8152590649428932259
  %6047 = sub i64 0, %95
  %6048 = add i64 -8152590649428932259, %6047
  %6049 = sub i64 0, %6048
  %6050 = or i64 %127, 5831938616993939293
  %6051 = xor i64 %127, -1
  %6052 = and i64 5831938616993939293, %6051
  %6053 = add i64 %6052, %127
  %6054 = xor i64 %6049, %6053
  %6055 = xor i64 %6054, %6042
  %6056 = xor i64 %6055, %6046
  %6057 = xor i64 %6056, %6045
  %6058 = xor i64 %6057, 603564310046803805
  %6059 = xor i64 %6058, %6050
  %6060 = mul i64 %6041, %6059
  %6061 = trunc i64 %6060 to i32
  %6062 = and i32 %6022, %6061
  %6063 = and i32 %6021, -8
  %6064 = or i32 %6062, %6063
  store i32 %6064, i32* %4, align 4
  %6065 = call i8** @bf14862898971591998804(i32* %4)
  %6066 = load i8*, i8** %6065, align 8
  indirectbr i8* %6066, [label %loopEnd, label %codeRepl48]

codeRepl49:                                       ; preds = %codeRepl49, %loopStart
  %lt.cast70 = bitcast i32* %.loc50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast70)
  %lt.cast71 = bitcast i32* %.loc51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast71)
  %lt.cast72 = bitcast i32* %.loc52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast72)
  %lt.cast73 = bitcast i32* %.loc53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast73)
  %lt.cast74 = bitcast i1* %.loc54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast74)
  %lt.cast75 = bitcast i1* %.loc55 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast75)
  %lt.cast76 = bitcast i1* %.loc56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast76)
  %lt.cast77 = bitcast i1* %.loc57 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast77)
  %lt.cast78 = bitcast i1* %.loc58 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast78)
  %lt.cast79 = bitcast i1* %.loc59 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast79)
  store i64 1996855465712537081, i64* %213, align 8
  %6067 = call i8** @lk14802275186744156584(i64* %213)
  %6068 = load i8*, i8** %6067, align 8
  %6069 = bitcast i8* %6068 to void (i32, i1, i32*, i32*, i32*, i32*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.reload57 = load i32, i32* %.reg2mem56, align 4
  %.reload122 = load i1, i1* %.reg2mem121, align 1
  call void %6069(i32 %.reload57, i1 %.reload122, i32* %.loc50, i32* %.loc51, i32* %.loc52, i32* %.loc53, i1* %.loc54, i1* %.loc55, i1* %.loc56, i1* %.loc57, i1* %.loc58, i1* %.loc59)
  %.reload60 = load i32, i32* %.loc50, align 4
  %.reload61 = load i32, i32* %.loc51, align 4
  %.reload62 = load i32, i32* %.loc52, align 4
  %.reload63 = load i32, i32* %.loc53, align 4
  %.reload64 = load i1, i1* %.loc54, align 1
  %.reload65 = load i1, i1* %.loc55, align 1
  %.reload66 = load i1, i1* %.loc56, align 1
  %.reload67 = load i1, i1* %.loc57, align 1
  %.reload68 = load i1, i1* %.loc58, align 1
  %.reload69 = load i1, i1* %.loc59, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast70)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast71)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast72)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast73)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast74)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast75)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast76)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast77)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast78)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast79)
  %6070 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 50
  %6071 = load i32, i32* %6070, align 4
  %6072 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %6073 = load i32, i32* %6072, align 4
  %6074 = sub i32 %6071, -1324652622
  %6075 = sub i32 %6074, %6073
  %6076 = add i32 %6075, -1324652622
  store i32 %6076, i32* %dispatcher, align 4
  store i32 %.reload63, i32* %.reg2mem197, align 4
  store i1 %.reload69, i1* %.reg2mem199, align 1
  %6077 = load i8*, i8** %98, align 8
  %6078 = load i8, i8* %6077, align 1
  %6079 = and i8 %6078, 1
  %6080 = icmp eq i8 %6079, 1
  %6081 = mul i8 %6078, %6078
  %6082 = add i8 %6081, %6078
  %6083 = srem i8 %6082, 2
  %6084 = icmp eq i8 %6083, 0
  %6085 = or i1 %6080, %6084
  %6086 = select i1 %6085, i32 595012102, i32 595012113
  %6087 = xor i32 %6086, -1
  %6088 = and i32 %6087, -1509112510
  %6089 = and i32 %6086, 1509112509
  %6090 = or i32 %6088, %6089
  %6091 = and i64 %233, -1939191152806198229
  %6092 = xor i64 %233, -1
  %6093 = or i64 1939191152806198228, %6092
  %6094 = xor i64 %6093, -1
  %6095 = and i64 %6094, -1
  %6096 = and i64 %117, -8878263086471231440
  %6097 = xor i64 %117, -1
  %6098 = or i64 8878263086471231439, %6097
  %6099 = xor i64 %6098, -1
  %6100 = and i64 %6099, -1
  %6101 = xor i64 %6095, 7104323110314272659
  %6102 = xor i64 %6101, %6100
  %6103 = xor i64 %6102, %6096
  %6104 = xor i64 %6103, %6091
  %6105 = or i64 %245, -2059453515351985072
  %6106 = xor i64 %245, -1
  %6107 = and i64 -2059453515351985072, %6106
  %6108 = add i64 %6107, %245
  %6109 = and i64 %27, 831431911711466451
  %6110 = xor i64 %27, -1
  %6111 = or i64 -831431911711466452, %6110
  %6112 = xor i64 %6111, -1
  %6113 = and i64 %6112, -1
  %6114 = xor i64 8913882667484176503, %6105
  %6115 = xor i64 %6114, %6109
  %6116 = xor i64 %6115, %6108
  %6117 = xor i64 %6116, %6113
  %6118 = mul i64 %6104, %6117
  %6119 = trunc i64 %6118 to i32
  %6120 = xor i32 %6090, %6119
  store i32 %6120, i32* %4, align 4
  %6121 = call i8** @bf14862898971591998804(i32* %4)
  %6122 = load i8*, i8** %6121, align 8
  indirectbr i8* %6122, [label %loopEnd, label %codeRepl49]

6123:                                             ; preds = %6123, %loopStart
  %.reload200 = load i1, i1* %.reg2mem199, align 1
  %.reload198 = load i32, i32* %.reg2mem197, align 4
  store i32 %.reload198, i32* %.reg2mem152, align 4
  %6124 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 51
  %6125 = load i32, i32* %6124, align 4
  %6126 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %6127 = load i32, i32* %6126, align 4
  %6128 = sub i32 %6125, 1620863293
  %6129 = sub i32 %6128, %6127
  %6130 = add i32 %6129, 1620863293
  %6131 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  %6132 = load i32, i32* %6131, align 4
  %6133 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %6134 = load i32, i32* %6133, align 4
  %6135 = srem i32 %6132, %6134
  %6136 = select i1 %.reload200, i32 %6130, i32 %6135
  store i32 %6136, i32* %dispatcher, align 4
  %6137 = load i8*, i8** %108, align 8
  %6138 = load i8, i8* %6137, align 1
  %6139 = mul i8 %6138, 2
  %6140 = mul i8 %6138, 2
  %6141 = add i8 2, %6140
  %6142 = mul i8 %6139, %6141
  %6143 = and i64 %81, 3692161314230030327
  %6144 = or i64 -3692161314230030328, %81
  %6145 = sub i64 %6144, -3692161314230030328
  %6146 = add i64 %107, -2409861812680025091
  %6147 = xor i64 -2409861812680025091, %107
  %6148 = and i64 -2409861812680025091, %107
  %6149 = mul i64 2, %6148
  %6150 = add i64 %6147, %6149
  %6151 = xor i64 %6146, %6143
  %6152 = xor i64 %6151, -3158082666154130291
  %6153 = xor i64 %6152, %6145
  %6154 = xor i64 %6153, %6150
  %6155 = and i64 %221, -1006025079293661733
  %6156 = xor i64 %221, -1
  %6157 = xor i64 -1006025079293661733, %6156
  %6158 = and i64 %6157, -1006025079293661733
  %6159 = or i64 %39, 6943605771503317820
  %6160 = and i64 6943605771503317820, %39
  %6161 = xor i64 6943605771503317820, %39
  %6162 = or i64 %6160, %6161
  %6163 = xor i64 %6158, %6159
  %6164 = xor i64 %6163, %6155
  %6165 = xor i64 %6164, -376027795827230444
  %6166 = xor i64 %6165, %6162
  %6167 = mul i64 %6154, %6166
  %6168 = trunc i64 %6167 to i8
  %6169 = srem i8 %6142, %6168
  %6170 = icmp eq i8 %6169, 0
  %6171 = mul i8 %6138, %6138
  %6172 = add i8 %6171, %6138
  %6173 = srem i8 %6172, 2
  %6174 = icmp eq i8 %6173, 0
  %6175 = or i1 %6170, %6174
  %6176 = select i1 %6175, i32 595012111, i32 595012113
  %6177 = or i32 %6176, 30
  %6178 = and i64 %221, -6788933581896980613
  %6179 = xor i64 %221, -1
  %6180 = or i64 6788933581896980612, %6179
  %6181 = xor i64 %6180, -1
  %6182 = and i64 %6181, -1
  %6183 = or i64 %15, -4960472069826762059
  %6184 = xor i64 %15, -1
  %6185 = and i64 %6184, 8635037526923690537
  %6186 = and i64 %15, -8635037526923690538
  %6187 = or i64 %6185, %6186
  %6188 = xor i64 -3675768464551778148, %6187
  %6189 = xor i64 %15, -1
  %6190 = or i64 4960472069826762058, %6189
  %6191 = xor i64 %6190, -1
  %6192 = and i64 %6191, -1
  %6193 = or i64 %6188, %6192
  %6194 = or i64 %141, -2904244241003674529
  %6195 = xor i64 %141, -1
  %6196 = and i64 %6195, -4344191142527242804
  %6197 = and i64 %141, 4344191142527242803
  %6198 = or i64 %6196, %6197
  %6199 = xor i64 1442375002270951827, %6198
  %6200 = xor i64 %141, -1
  %6201 = or i64 2904244241003674528, %6200
  %6202 = xor i64 %6201, -1
  %6203 = and i64 %6202, -1
  %6204 = or i64 %6199, %6203
  %6205 = xor i64 %6178, 3999654387015735213
  %6206 = xor i64 %6205, %6204
  %6207 = xor i64 %6206, %6182
  %6208 = xor i64 %6207, %6183
  %6209 = xor i64 %6208, %6194
  %6210 = xor i64 %6209, %6193
  %6211 = add i64 %111, -5037381010445581992
  %6212 = and i64 -5037381010445581992, %111
  %6213 = or i64 -5037381010445581992, %111
  %6214 = add i64 %6212, %6213
  %6215 = or i64 %115, -5667158029922890540
  %6216 = xor i64 %115, -1
  %6217 = and i64 %6216, -1905988657592514609
  %6218 = and i64 %115, 1905988657592514608
  %6219 = or i64 %6217, %6218
  %6220 = xor i64 6113254578050288411, %6219
  %6221 = xor i64 %115, -1
  %6222 = or i64 5667158029922890539, %6221
  %6223 = xor i64 %6222, -1
  %6224 = and i64 %6223, -1
  %6225 = or i64 %6220, %6224
  %6226 = add i64 %45, 218282488924784634
  %6227 = add i64 -6549839716668992185, %45
  %6228 = sub i64 %6227, -6768122205593776819
  %6229 = xor i64 4140710045618093142, %6225
  %6230 = xor i64 %6229, %6226
  %6231 = xor i64 %6230, %6214
  %6232 = xor i64 %6231, %6228
  %6233 = xor i64 %6232, %6211
  %6234 = xor i64 %6233, %6215
  %6235 = mul i64 %6210, %6234
  %6236 = trunc i64 %6235 to i32
  %6237 = and i32 %6176, %6236
  %6238 = sub i32 %6177, %6237
  store i32 %6238, i32* %4, align 4
  %6239 = call i8** @bf14862898971591998804(i32* %4)
  %6240 = load i8*, i8** %6239, align 8
  indirectbr i8* %6240, [label %loopEnd, label %6123]

6241:                                             ; preds = %6241, %loopStart
  %6242 = and i64 %47, -2209895273185651056
  %6243 = xor i64 %47, -1
  %6244 = or i64 2209895273185651055, %6243
  %6245 = xor i64 %6244, -1
  %6246 = and i64 %6245, -1
  %6247 = or i64 %35, -3624354433782151874
  %6248 = and i64 -3624354433782151874, %35
  %6249 = xor i64 -3624354433782151874, %35
  %6250 = or i64 %6248, %6249
  %6251 = or i64 %215, -4448800178915612467
  %6252 = xor i64 %215, -1
  %6253 = and i64 -4448800178915612467, %6252
  %6254 = add i64 %6253, %215
  %6255 = xor i64 %6246, %6250
  %6256 = xor i64 %6255, %6254
  %6257 = xor i64 %6256, 5034467425994418443
  %6258 = xor i64 %6257, %6242
  %6259 = xor i64 %6258, %6251
  %6260 = xor i64 %6259, %6247
  %6261 = or i64 %39, 9023025654983850959
  %6262 = xor i64 %39, -1
  %6263 = and i64 %6262, 1247177402663849748
  %6264 = and i64 %39, -1247177402663849749
  %6265 = or i64 %6263, %6264
  %6266 = xor i64 7815688446573294811, %6265
  %6267 = xor i64 %39, -1
  %6268 = or i64 -9023025654983850960, %6267
  %6269 = xor i64 %6268, -1
  %6270 = and i64 %6269, -1
  %6271 = or i64 %6266, %6270
  %6272 = and i64 %53, -7103952896479083308
  %6273 = or i64 7103952896479083307, %53
  %6274 = sub i64 %6273, 7103952896479083307
  %6275 = xor i64 -142954344979388592, %6271
  %6276 = xor i64 %6275, %6272
  %6277 = xor i64 %6276, %6274
  %6278 = xor i64 %6277, %6261
  %6279 = mul i64 %6260, %6278
  %6280 = trunc i64 %6279 to i32
  %6281 = add i32 %6280, 48
  %6282 = add i32 46, 15
  %6283 = sdiv i32 3, 25
  %6284 = add i32 14, 92
  %6285 = add i64 %61, 6257198845853455509
  %6286 = sub i64 0, %61
  %6287 = add i64 -6257198845853455509, %6286
  %6288 = sub i64 0, %6287
  %6289 = add i64 %129, -4867285949364840226
  %6290 = and i64 -4867285949364840226, %129
  %6291 = or i64 -4867285949364840226, %129
  %6292 = add i64 %6290, %6291
  %6293 = xor i64 %6285, -4277062461412911639
  %6294 = xor i64 %6293, %6292
  %6295 = xor i64 %6294, %6289
  %6296 = xor i64 %6295, %6288
  %6297 = and i64 %131, -5957797630584642778
  %6298 = xor i64 %131, -1
  %6299 = or i64 5957797630584642777, %6298
  %6300 = xor i64 %6299, -1
  %6301 = and i64 %6300, -1
  %6302 = add i64 %119, -5594194056693242681
  %6303 = add i64 9168038007369247418, %119
  %6304 = sub i64 %6303, -3684512009647061517
  %6305 = or i64 %69, -4534055899707559161
  %6306 = xor i64 %69, -1
  %6307 = and i64 -4534055899707559161, %6306
  %6308 = add i64 %6307, %69
  %6309 = xor i64 -2559018159140284309, %6297
  %6310 = xor i64 %6309, %6305
  %6311 = xor i64 %6310, %6304
  %6312 = xor i64 %6311, %6308
  %6313 = xor i64 %6312, %6301
  %6314 = xor i64 %6313, %6302
  %6315 = mul i64 %6296, %6314
  %6316 = trunc i64 %6315 to i32
  %6317 = sub i32 %6316, 101
  %.reload13.reload = load i32, i32* %.reload13.reg2mem, align 4
  %6318 = srem i32 %.reload13.reload, 2
  %6319 = icmp eq i32 %6318, 0
  %6320 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 55
  %6321 = load i32, i32* %6320, align 4
  %6322 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %6323 = load i32, i32* %6322, align 4
  %6324 = srem i32 %6321, %6323
  %6325 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 30
  %6326 = load i32, i32* %6325, align 4
  %6327 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 29
  %6328 = load i32, i32* %6327, align 4
  %6329 = and i32 %6326, %6328
  %6330 = or i32 %6326, %6328
  %6331 = add i32 %6329, %6330
  %6332 = select i1 %6319, i32 %6324, i32 %6331
  store i32 %6332, i32* %dispatcher, align 4
  %6333 = load i8*, i8** %140, align 8
  %6334 = load i8, i8* %6333, align 1
  %6335 = mul i8 %6334, 2
  %6336 = mul i8 %6334, 2
  %6337 = add i8 2, %6336
  %6338 = mul i8 %6335, %6337
  %6339 = srem i8 %6338, 4
  %6340 = icmp eq i8 %6339, 0
  %6341 = mul i8 %6334, %6334
  %6342 = and i8 %6341, %6334
  %6343 = or i8 %6341, %6334
  %6344 = add i8 %6342, %6343
  %6345 = srem i8 %6344, 2
  %6346 = icmp eq i8 %6345, 0
  %6347 = or i1 %6340, %6346
  %6348 = select i1 %6347, i32 595012101, i32 595012113
  %6349 = xor i32 %6348, 20
  store i32 %6349, i32* %4, align 4
  %6350 = call i8** @bf14862898971591998804(i32* %4)
  %6351 = load i8*, i8** %6350, align 8
  indirectbr i8* %6351, [label %loopEnd, label %6241]

codeRepl80:                                       ; preds = %codeRepl80, %loopStart
  %lt.cast87 = bitcast i32* %.loc81 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast87)
  %lt.cast88 = bitcast i32* %.loc82 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast88)
  %lt.cast89 = bitcast i32* %.loc83 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast89)
  store i64 1996855465712537079, i64* %213, align 8
  %6352 = call i8** @lk14802275186744156584(i64* %213)
  %6353 = load i8*, i8** %6352, align 8
  %6354 = bitcast i8* %6353 to void (i32*, i32*, i32*)*
  call void %6354(i32* %.loc81, i32* %.loc82, i32* %.loc83)
  %.reload84 = load i32, i32* %.loc81, align 4
  %.reload85 = load i32, i32* %.loc82, align 4
  %.reload86 = load i32, i32* %.loc83, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast87)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast88)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast89)
  %6355 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 61
  %6356 = load i32, i32* %6355, align 4
  %6357 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %6358 = load i32, i32* %6357, align 4
  %6359 = srem i32 %6356, %6358
  store i32 %6359, i32* %dispatcher, align 4
  %6360 = load i8*, i8** %12, align 8
  %6361 = load i8, i8* %6360, align 1
  %6362 = mul i8 %6361, %6361
  %6363 = add i8 %6362, %6361
  %6364 = mul i8 %6363, 3
  %6365 = srem i8 %6364, 2
  %6366 = icmp eq i8 %6365, 0
  %6367 = mul i8 %6361, %6361
  %6368 = add i8 %6367, %6361
  %6369 = srem i8 %6368, 2
  %6370 = add i64 %45, 1779239558476398531
  %6371 = sub i64 0, %45
  %6372 = add i64 -1779239558476398531, %6371
  %6373 = sub i64 0, %6372
  %6374 = or i64 %27, 8850236714604180458
  %6375 = and i64 8850236714604180458, %27
  %6376 = xor i64 8850236714604180458, %27
  %6377 = or i64 %6375, %6376
  %6378 = and i64 %27, 8191415692812350762
  %6379 = xor i64 %27, -1
  %6380 = or i64 -8191415692812350763, %6379
  %6381 = xor i64 %6380, -1
  %6382 = and i64 %6381, -1
  %6383 = xor i64 %6378, %6382
  %6384 = xor i64 %6383, %6370
  %6385 = xor i64 %6384, %6377
  %6386 = xor i64 %6385, -5643492538019979823
  %6387 = xor i64 %6386, %6374
  %6388 = xor i64 %6387, %6373
  %6389 = add i64 %15, -4092172049487465293
  %6390 = add i64 3915095467804521851, %15
  %6391 = add i64 %6390, -8007267517291987144
  %6392 = or i64 %97, -6519782948636684603
  %6393 = xor i64 %97, -1
  %6394 = and i64 %6393, -2415671376635026243
  %6395 = and i64 %97, 2415671376635026242
  %6396 = or i64 %6394, %6395
  %6397 = xor i64 8934258053059684984, %6396
  %6398 = xor i64 %97, -1
  %6399 = or i64 6519782948636684602, %6398
  %6400 = xor i64 %6399, -1
  %6401 = and i64 %6400, -1
  %6402 = or i64 %6397, %6401
  %6403 = add i64 %89, 4920069917025419796
  %6404 = sub i64 0, %89
  %6405 = add i64 -4920069917025419796, %6404
  %6406 = sub i64 0, %6405
  %6407 = xor i64 %6406, %6389
  %6408 = xor i64 %6407, %6392
  %6409 = xor i64 %6408, %6402
  %6410 = xor i64 %6409, %6391
  %6411 = xor i64 %6410, 0
  %6412 = xor i64 %6411, %6403
  %6413 = mul i64 %6388, %6412
  %6414 = trunc i64 %6413 to i8
  %6415 = icmp eq i8 %6369, %6414
  %6416 = and i1 %6366, %6415
  %6417 = select i1 %6416, i32 595012125, i32 595012113
  %6418 = xor i32 %6417, 12
  store i32 %6418, i32* %4, align 4
  %6419 = call i8** @bf14862898971591998804(i32* %4)
  %6420 = load i8*, i8** %6419, align 8
  indirectbr i8* %6420, [label %loopEnd, label %codeRepl80]

6421:                                             ; preds = %6421, %loopStart
  %6422 = add i64 86, 80
  %.reload16 = load i32, i32* %.reg2mem15, align 4
  %6423 = add i64 %27, 3379451885628857445
  %6424 = sub i64 0, %27
  %6425 = add i64 -3379451885628857445, %6424
  %6426 = sub i64 0, %6425
  %6427 = sext i32 %dispatcher1 to i64
  %6428 = and i64 %6427, 4778521022249686316
  %6429 = xor i64 %6427, -1
  %6430 = or i64 -4778521022249686317, %6429
  %6431 = xor i64 %6430, -1
  %6432 = and i64 %6431, -1
  %6433 = xor i64 6563460663534389361, %6428
  %6434 = xor i64 %6433, %6423
  %6435 = xor i64 %6434, %6432
  %6436 = xor i64 %6435, %6426
  %6437 = and i64 %113, -8911474316351199421
  %6438 = xor i64 %113, -1
  %6439 = or i64 8911474316351199420, %6438
  %6440 = xor i64 %6439, -1
  %6441 = and i64 %6440, -1
  %6442 = add i64 %79, -1387095546629559448
  %6443 = and i64 -1387095546629559448, %79
  %6444 = or i64 -1387095546629559448, %79
  %6445 = add i64 %6443, %6444
  %6446 = xor i64 %6445, 6876970308361154850
  %6447 = xor i64 %6446, %6437
  %6448 = xor i64 %6447, %6441
  %6449 = xor i64 %6448, %6442
  %6450 = mul i64 %6436, %6449
  %6451 = trunc i64 %6450 to i32
  %6452 = srem i32 %.reload16, %6451
  %6453 = icmp eq i32 %6452, 0
  %.reload157 = load i32, i32* %.reg2mem152, align 4
  %6454 = mul i32 %.reload157, 2
  %.reload156 = load i32, i32* %.reg2mem152, align 4
  %6455 = and i64 %55, -7600786607661682109
  %6456 = xor i64 %55, -1
  %6457 = xor i64 -7600786607661682109, %6456
  %6458 = and i64 %6457, -7600786607661682109
  %6459 = or i64 %99, -4532978511902532457
  %6460 = xor i64 %99, -1
  %6461 = and i64 -4532978511902532457, %6460
  %6462 = add i64 %6461, %99
  %6463 = and i64 %101, -6535053919104238242
  %6464 = or i64 6535053919104238241, %101
  %6465 = sub i64 %6464, 6535053919104238241
  %6466 = xor i64 %6462, %6465
  %6467 = xor i64 %6466, %6455
  %6468 = xor i64 %6467, 6168580046733522383
  %6469 = xor i64 %6468, %6458
  %6470 = xor i64 %6469, %6459
  %6471 = xor i64 %6470, %6463
  %6472 = add i64 %83, -468999214790506123
  %6473 = and i64 -468999214790506123, %83
  %6474 = or i64 -468999214790506123, %83
  %6475 = add i64 %6473, %6474
  %6476 = and i64 %19, 8190507093052367294
  %6477 = xor i64 %19, -1
  %6478 = xor i64 8190507093052367294, %6477
  %6479 = and i64 %6478, 8190507093052367294
  %6480 = xor i64 -8841404780434464162, %6472
  %6481 = xor i64 %6480, %6479
  %6482 = xor i64 %6481, %6475
  %6483 = xor i64 %6482, %6476
  %6484 = mul i64 %6471, %6483
  %6485 = trunc i64 %6484 to i32
  %6486 = mul i32 %.reload156, %6485
  %6487 = or i64 %248, 8976359759714882517
  %6488 = and i64 8976359759714882517, %248
  %6489 = xor i64 8976359759714882517, %248
  %6490 = or i64 %6488, %6489
  %6491 = or i64 %55, -1329135583116726743
  %6492 = xor i64 %55, -1
  %6493 = and i64 -1329135583116726743, %6492
  %6494 = add i64 %6493, %55
  %6495 = xor i64 %6487, %6494
  %6496 = xor i64 %6495, -7679545053686999379
  %6497 = xor i64 %6496, %6490
  %6498 = xor i64 %6497, %6491
  %6499 = and i64 %113, -4783025314065745793
  %6500 = or i64 4783025314065745792, %113
  %6501 = sub i64 %6500, 4783025314065745792
  %6502 = and i64 %67, -7552711610088947147
  %6503 = xor i64 %67, -1
  %6504 = or i64 7552711610088947146, %6503
  %6505 = xor i64 %6504, -1
  %6506 = and i64 %6505, -1
  %6507 = xor i64 -6333058475593958838, %6499
  %6508 = xor i64 %6507, %6502
  %6509 = xor i64 %6508, %6506
  %6510 = xor i64 %6509, %6501
  %6511 = mul i64 %6498, %6510
  %6512 = trunc i64 %6511 to i32
  %6513 = add i32 %6512, %6486
  %6514 = mul i32 %6454, %6513
  %6515 = srem i32 %6514, 4
  %6516 = icmp eq i32 %6515, 0
  %.reload155 = load i32, i32* %.reg2mem152, align 4
  %6517 = mul i32 %.reload155, %.reload155
  %.reload154 = load i32, i32* %.reg2mem152, align 4
  %6518 = mul i32 %6517, %.reload154
  %.reload153 = load i32, i32* %.reg2mem152, align 4
  %6519 = add i32 %6518, -1632847669
  %6520 = add i32 %6519, %.reload153
  %6521 = sub i32 %6520, -1632847669
  %6522 = srem i32 %6521, 2
  %6523 = icmp eq i32 %6522, 0
  %6524 = xor i1 %6516, true
  %6525 = xor i1 %6523, true
  %6526 = or i1 %6524, %6525
  %6527 = xor i1 %6526, true
  %6528 = add i64 %119, 4800645026576379935
  %6529 = and i64 4800645026576379935, %119
  %6530 = or i64 4800645026576379935, %119
  %6531 = add i64 %6529, %6530
  %6532 = add i64 %103, -5077675311231615833
  %6533 = xor i64 -5077675311231615833, %103
  %6534 = and i64 -5077675311231615833, %103
  %6535 = mul i64 2, %6534
  %6536 = add i64 %6533, %6535
  %6537 = and i64 %21, -348988393787553584
  %6538 = or i64 348988393787553583, %21
  %6539 = sub i64 %6538, 348988393787553583
  %6540 = xor i64 %6532, %6528
  %6541 = xor i64 %6540, %6537
  %6542 = xor i64 %6541, 7783032340865486531
  %6543 = xor i64 %6542, %6536
  %6544 = xor i64 %6543, %6539
  %6545 = xor i64 %6544, %6531
  %6546 = add i64 %91, -6667873484218838666
  %6547 = add i64 5687710883089348264, %91
  %6548 = add i64 %6547, 6091159706401364686
  %6549 = or i64 %61, -5864755645249623349
  %6550 = xor i64 %61, -1
  %6551 = and i64 %6550, -2200329685873029171
  %6552 = and i64 %61, 2200329685873029170
  %6553 = or i64 %6551, %6552
  %6554 = xor i64 5758670292359013638, %6553
  %6555 = xor i64 %61, -1
  %6556 = or i64 5864755645249623348, %6555
  %6557 = xor i64 %6556, -1
  %6558 = and i64 %6557, -1
  %6559 = or i64 %6554, %6558
  %6560 = xor i64 %6549, %6559
  %6561 = xor i64 %6560, %6546
  %6562 = xor i64 %6561, -2975643701803970069
  %6563 = xor i64 %6562, %6548
  %6564 = mul i64 %6545, %6563
  %6565 = trunc i64 %6564 to i1
  %6566 = and i1 %6527, %6565
  store i1 %6566, i1* %.reg2mem158, align 1
  %6567 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 54
  %6568 = load i32, i32* %6567, align 4
  %6569 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %6570 = load i32, i32* %6569, align 4
  %6571 = sub i32 0, %6570
  %6572 = add i32 %6568, %6571
  %6573 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  %6574 = load i32, i32* %6573, align 4
  %6575 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 7
  %6576 = load i32, i32* %6575, align 4
  %6577 = sub i32 %6574, %6576
  %.reload160 = load i1, i1* %.reg2mem158, align 1
  %6578 = select i1 %.reload160, i32 %6572, i32 %6577
  store i32 %6578, i32* %dispatcher, align 4
  %6579 = load i8*, i8** %138, align 8
  %6580 = load i8, i8* %6579, align 1
  %6581 = xor i8 %6580, -1
  %6582 = or i8 %6581, 1
  %6583 = xor i8 %6580, -1
  %6584 = sub i8 %6582, %6583
  %6585 = icmp eq i8 %6584, 0
  %6586 = mul i8 %6580, %6580
  %6587 = sub i8 %6586, 6
  %6588 = add i8 %6587, %6580
  %6589 = add i8 %6588, 6
  %6590 = mul i8 %6589, 3
  %6591 = srem i8 %6590, 2
  %6592 = icmp eq i8 %6591, 0
  %6593 = or i1 %6585, %6592
  %6594 = select i1 %6593, i32 595012140, i32 595012113
  %6595 = xor i32 %6594, 61
  store i32 %6595, i32* %4, align 4
  %6596 = call i8** @bf14862898971591998804(i32* %4)
  %6597 = load i8*, i8** %6596, align 8
  indirectbr i8* %6597, [label %loopEnd, label %6421]

codeRepl90:                                       ; preds = %codeRepl90, %loopStart
  %lt.cast113 = bitcast i32* %.loc91 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast113)
  %lt.cast114 = bitcast i64* %.loc92 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast114)
  %lt.cast115 = bitcast i32* %.loc93 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast115)
  %lt.cast116 = bitcast i64* %.loc94 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast116)
  %lt.cast117 = bitcast i32* %.loc95 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast117)
  %lt.cast118 = bitcast i64* %.loc96 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast118)
  %lt.cast119 = bitcast i64* %.loc97 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast119)
  %lt.cast120 = bitcast i64* %.loc98 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast120)
  %lt.cast121 = bitcast i64* %.loc99 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast121)
  %lt.cast122 = bitcast i64* %.loc100 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast122)
  %lt.cast123 = bitcast i64* %.loc101 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast123)
  store i64 1996855465712537083, i64* %213, align 8
  %6598 = call i8** @lk14802275186744156584(i64* %213)
  %6599 = load i8*, i8** %6598, align 8
  %6600 = bitcast i8* %6599 to void (i32*, i64*, i32*, i64*, i32*, i64*, i64*, i64*, i64*, i64*, i64*)*
  call void %6600(i32* %.loc91, i64* %.loc92, i32* %.loc93, i64* %.loc94, i32* %.loc95, i64* %.loc96, i64* %.loc97, i64* %.loc98, i64* %.loc99, i64* %.loc100, i64* %.loc101)
  %.reload102 = load i32, i32* %.loc91, align 4
  %.reload103 = load i64, i64* %.loc92, align 8
  %.reload104 = load i32, i32* %.loc93, align 4
  %.reload105 = load i64, i64* %.loc94, align 8
  %.reload106 = load i32, i32* %.loc95, align 4
  %.reload107 = load i64, i64* %.loc96, align 8
  %.reload108 = load i64, i64* %.loc97, align 8
  %.reload109 = load i64, i64* %.loc98, align 8
  %.reload110 = load i64, i64* %.loc99, align 8
  %.reload111 = load i64, i64* %.loc100, align 8
  %.reload112 = load i64, i64* %.loc101, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast113)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast114)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast115)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast116)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast117)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast118)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast119)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast120)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast121)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast122)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast123)
  %6601 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 56
  %6602 = load i32, i32* %6601, align 4
  %6603 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %6604 = load i32, i32* %6603, align 4
  %6605 = add i32 %6602, 2046617175
  %6606 = sub i32 %6605, %6604
  %6607 = add i64 %19, 972550632096093757
  %6608 = add i64 1671328495413884450, %19
  %6609 = sub i64 %6608, 698777863317790693
  %6610 = add i64 %135, 9040683881482197290
  %6611 = and i64 9040683881482197290, %135
  %6612 = or i64 9040683881482197290, %135
  %6613 = add i64 %6611, %6612
  %6614 = or i64 %15, 708381025694225636
  %6615 = and i64 708381025694225636, %15
  %6616 = xor i64 708381025694225636, %15
  %6617 = or i64 %6615, %6616
  %6618 = xor i64 %6607, %6610
  %6619 = xor i64 %6618, %6613
  %6620 = xor i64 %6619, %6609
  %6621 = xor i64 %6620, %6617
  %6622 = xor i64 %6621, %6614
  %6623 = xor i64 %6622, 31195274718269793
  %6624 = and i64 %230, 395809590141703937
  %6625 = xor i64 %230, -1
  %6626 = or i64 -395809590141703938, %6625
  %6627 = xor i64 %6626, -1
  %6628 = and i64 %6627, -1
  %6629 = add i64 %101, -2173886921840454675
  %6630 = sub i64 0, %101
  %6631 = sub i64 -2173886921840454675, %6630
  %6632 = xor i64 %6631, %6624
  %6633 = xor i64 %6632, 2226118052531894967
  %6634 = xor i64 %6633, %6628
  %6635 = xor i64 %6634, %6629
  %6636 = mul i64 %6623, %6635
  %6637 = trunc i64 %6636 to i32
  %6638 = sub i32 %6606, %6637
  store i32 %6638, i32* %dispatcher, align 4
  store i32 %.reload102, i32* %.reg2mem201, align 4
  store i32 %.reload104, i32* %.reg2mem203, align 4
  store i32 %.reload106, i32* %.reg2mem205, align 4
  %6639 = load i8*, i8** %140, align 8
  %6640 = load i8, i8* %6639, align 1
  %6641 = mul i8 %6640, 2
  %6642 = mul i8 %6640, 2
  %6643 = add i8 2, %6642
  %6644 = mul i8 %6641, %6643
  %6645 = srem i8 %6644, 4
  %6646 = icmp eq i8 %6645, 0
  %6647 = mul i8 %6640, %6640
  %6648 = and i8 %6647, %6640
  %6649 = or i8 %6647, %6640
  %6650 = add i8 %6648, %6649
  %6651 = srem i8 %6650, 2
  %6652 = icmp eq i8 %6651, 0
  %6653 = and i1 %6646, %6652
  %6654 = xor i1 %6646, %6652
  %6655 = or i1 %6653, %6654
  %6656 = select i1 %6655, i32 595012100, i32 595012113
  %6657 = xor i32 %6656, 21
  store i32 %6657, i32* %4, align 4
  %6658 = call i8** @bf14862898971591998804(i32* %4)
  %6659 = load i8*, i8** %6658, align 8
  indirectbr i8* %6659, [label %loopEnd, label %codeRepl90]

6660:                                             ; preds = %6660, %loopStart
  %6661 = add i32 42, 90
  %6662 = and i64 %139, 3032059842985630357
  %6663 = or i64 -3032059842985630358, %139
  %6664 = sub i64 %6663, -3032059842985630358
  %6665 = and i64 %129, 3274446150298876998
  %6666 = or i64 -3274446150298876999, %129
  %6667 = sub i64 %6666, -3274446150298876999
  %6668 = or i64 %57, -5076298992082544870
  %6669 = xor i64 %57, -1
  %6670 = and i64 %6669, 2469168964520286761
  %6671 = and i64 %57, -2469168964520286762
  %6672 = or i64 %6670, %6671
  %6673 = xor i64 -7221208774691156685, %6672
  %6674 = xor i64 %57, -1
  %6675 = or i64 5076298992082544869, %6674
  %6676 = xor i64 %6675, -1
  %6677 = and i64 %6676, -1
  %6678 = or i64 %6673, %6677
  %6679 = xor i64 -46024147859043461, %6662
  %6680 = xor i64 %6679, %6665
  %6681 = xor i64 %6680, %6667
  %6682 = xor i64 %6681, %6678
  %6683 = xor i64 %6682, %6668
  %6684 = xor i64 %6683, %6664
  %6685 = and i64 %19, 7499617662196471817
  %6686 = xor i64 %19, -1
  %6687 = or i64 -7499617662196471818, %6686
  %6688 = xor i64 %6687, -1
  %6689 = and i64 %6688, -1
  %6690 = or i64 %47, -757947647563175891
  %6691 = xor i64 %47, -1
  %6692 = and i64 %6691, 3022041216359070285
  %6693 = and i64 %47, -3022041216359070286
  %6694 = or i64 %6692, %6693
  %6695 = xor i64 -2554868267545226656, %6694
  %6696 = xor i64 %47, -1
  %6697 = or i64 757947647563175890, %6696
  %6698 = xor i64 %6697, -1
  %6699 = and i64 %6698, -1
  %6700 = or i64 %6695, %6699
  %6701 = xor i64 -3594163406836912475, %6700
  %6702 = xor i64 %6701, %6690
  %6703 = xor i64 %6702, %6689
  %6704 = xor i64 %6703, %6685
  %6705 = mul i64 %6684, %6704
  %6706 = add i64 %79, 1045312058131873537
  %6707 = add i64 -363858866817846691, %79
  %6708 = sub i64 %6707, -1409170924949720228
  %6709 = add i64 %131, 5529690950061146800
  %6710 = add i64 -5028615643703278515, %131
  %6711 = sub i64 %6710, 7888437479945126301
  %6712 = or i64 %215, 5115681415950888339
  %6713 = xor i64 %215, -1
  %6714 = and i64 5115681415950888339, %6713
  %6715 = add i64 %6714, %215
  %6716 = xor i64 %6708, %6706
  %6717 = xor i64 %6716, %6712
  %6718 = xor i64 %6717, 5542879070971028131
  %6719 = xor i64 %6718, %6715
  %6720 = xor i64 %6719, %6709
  %6721 = xor i64 %6720, %6711
  %6722 = add i64 %71, 5284063358690660590
  %6723 = xor i64 5284063358690660590, %71
  %6724 = and i64 5284063358690660590, %71
  %6725 = mul i64 2, %6724
  %6726 = add i64 %6723, %6725
  %6727 = or i64 %117, 6437740268826169403
  %6728 = xor i64 %117, -1
  %6729 = and i64 6437740268826169403, %6728
  %6730 = add i64 %6729, %117
  %6731 = sext i32 %dispatcher1 to i64
  %6732 = add i64 %6731, 6404646094394506514
  %6733 = sub i64 0, %6731
  %6734 = add i64 -6404646094394506514, %6733
  %6735 = sub i64 0, %6734
  %6736 = xor i64 %6730, %6722
  %6737 = xor i64 %6736, %6726
  %6738 = xor i64 %6737, -5808817261929624893
  %6739 = xor i64 %6738, %6735
  %6740 = xor i64 %6739, %6732
  %6741 = xor i64 %6740, %6727
  %6742 = mul i64 %6721, %6741
  %6743 = sdiv i64 %6705, %6742
  %6744 = sub i32 116, 0
  %6745 = and i64 %65, 8117131541202898926
  %6746 = xor i64 %65, -1
  %6747 = xor i64 8117131541202898926, %6746
  %6748 = and i64 %6747, 8117131541202898926
  %6749 = and i64 %39, 3898186850113584583
  %6750 = or i64 -3898186850113584584, %39
  %6751 = sub i64 %6750, -3898186850113584584
  %6752 = or i64 %125, 7301246536091028201
  %6753 = xor i64 %125, -1
  %6754 = and i64 7301246536091028201, %6753
  %6755 = add i64 %6754, %125
  %6756 = xor i64 %6755, %6752
  %6757 = xor i64 %6756, %6748
  %6758 = xor i64 %6757, %6751
  %6759 = xor i64 %6758, %6745
  %6760 = xor i64 %6759, %6749
  %6761 = xor i64 %6760, -3707175748486193905
  %6762 = or i64 %83, 8027446291882709816
  %6763 = and i64 8027446291882709816, %83
  %6764 = xor i64 8027446291882709816, %83
  %6765 = or i64 %6763, %6764
  %6766 = add i64 %35, -4859786281040488566
  %6767 = sub i64 0, %35
  %6768 = add i64 4859786281040488566, %6767
  %6769 = sub i64 0, %6768
  %6770 = xor i64 -3480064610151680835, %6765
  %6771 = xor i64 %6770, %6762
  %6772 = xor i64 %6771, %6766
  %6773 = xor i64 %6772, %6769
  %6774 = mul i64 %6761, %6773
  %6775 = mul i64 %6774, 110
  %6776 = or i64 %95, 6492183727903172860
  %6777 = xor i64 %95, -1
  %6778 = and i64 6492183727903172860, %6777
  %6779 = add i64 %6778, %95
  %6780 = and i64 %31, 968391160897496573
  %6781 = xor i64 %31, -1
  %6782 = or i64 -968391160897496574, %6781
  %6783 = xor i64 %6782, -1
  %6784 = and i64 %6783, -1
  %6785 = xor i64 %6776, -1932293011212318783
  %6786 = xor i64 %6785, %6784
  %6787 = xor i64 %6786, %6780
  %6788 = xor i64 %6787, %6779
  %6789 = and i64 %43, 4632498327473445567
  %6790 = or i64 -4632498327473445568, %43
  %6791 = sub i64 %6790, -4632498327473445568
  %6792 = and i64 %83, -8129845233207739970
  %6793 = or i64 8129845233207739969, %83
  %6794 = sub i64 %6793, 8129845233207739969
  %6795 = xor i64 %6791, -7490422158925125959
  %6796 = xor i64 %6795, %6789
  %6797 = xor i64 %6796, %6792
  %6798 = xor i64 %6797, %6794
  %6799 = mul i64 %6788, %6798
  %6800 = trunc i64 %6799 to i32
  %6801 = sdiv i32 49, %6800
  %6802 = or i64 %77, -4060073762700516248
  %6803 = and i64 -4060073762700516248, %77
  %6804 = xor i64 -4060073762700516248, %77
  %6805 = or i64 %6803, %6804
  %6806 = and i64 %242, 5759828802669262451
  %6807 = xor i64 %242, -1
  %6808 = xor i64 5759828802669262451, %6807
  %6809 = and i64 %6808, 5759828802669262451
  %6810 = and i64 %67, -5220176990592108801
  %6811 = xor i64 %67, -1
  %6812 = xor i64 -5220176990592108801, %6811
  %6813 = and i64 %6812, -5220176990592108801
  %6814 = xor i64 %6813, %6802
  %6815 = xor i64 %6814, %6810
  %6816 = xor i64 %6815, %6806
  %6817 = xor i64 %6816, %6805
  %6818 = xor i64 %6817, -5884179417880293193
  %6819 = xor i64 %6818, %6809
  %6820 = or i64 %59, 8166002110245833885
  %6821 = and i64 8166002110245833885, %59
  %6822 = xor i64 8166002110245833885, %59
  %6823 = or i64 %6821, %6822
  %6824 = and i64 %7, 671613938720663242
  %6825 = xor i64 %7, -1
  %6826 = or i64 -671613938720663243, %6825
  %6827 = xor i64 %6826, -1
  %6828 = and i64 %6827, -1
  %6829 = xor i64 %6820, %6828
  %6830 = xor i64 %6829, %6823
  %6831 = xor i64 %6830, -2360833285970247232
  %6832 = xor i64 %6831, %6824
  %6833 = mul i64 %6819, %6832
  %6834 = sdiv i64 9, %6833
  %6835 = and i64 %119, 1555134633048779443
  %6836 = xor i64 %119, -1
  %6837 = xor i64 1555134633048779443, %6836
  %6838 = and i64 %6837, 1555134633048779443
  %6839 = add i64 %9, 1945285673649342297
  %6840 = sub i64 0, %9
  %6841 = add i64 -1945285673649342297, %6840
  %6842 = sub i64 0, %6841
  %6843 = xor i64 %6842, %6838
  %6844 = xor i64 %6843, -7723445585700547911
  %6845 = xor i64 %6844, %6835
  %6846 = xor i64 %6845, %6839
  %6847 = and i64 %89, -6189125784424682776
  %6848 = or i64 6189125784424682775, %89
  %6849 = sub i64 %6848, 6189125784424682775
  %6850 = and i64 %230, 7087120706236936626
  %6851 = xor i64 %230, -1
  %6852 = xor i64 7087120706236936626, %6851
  %6853 = and i64 %6852, 7087120706236936626
  %6854 = and i64 %9, 2164780971130574523
  %6855 = xor i64 %9, -1
  %6856 = or i64 -2164780971130574524, %6855
  %6857 = xor i64 %6856, -1
  %6858 = and i64 %6857, -1
  %6859 = xor i64 8431948940690093325, %6849
  %6860 = xor i64 %6859, %6847
  %6861 = xor i64 %6860, %6854
  %6862 = xor i64 %6861, %6850
  %6863 = xor i64 %6862, %6853
  %6864 = xor i64 %6863, %6858
  %6865 = mul i64 %6846, %6864
  %6866 = sub i64 %6865, 9
  %6867 = add i64 %35, -5636012559172027010
  %6868 = sub i64 0, %35
  %6869 = sub i64 -5636012559172027010, %6868
  %6870 = and i64 %239, -4180634639493433512
  %6871 = xor i64 %239, -1
  %6872 = xor i64 -4180634639493433512, %6871
  %6873 = and i64 %6872, -4180634639493433512
  %6874 = and i64 %133, -4222073604564434339
  %6875 = xor i64 %133, -1
  %6876 = or i64 4222073604564434338, %6875
  %6877 = xor i64 %6876, -1
  %6878 = and i64 %6877, -1
  %6879 = xor i64 %6870, %6869
  %6880 = xor i64 %6879, %6878
  %6881 = xor i64 %6880, -2739595437981784787
  %6882 = xor i64 %6881, %6873
  %6883 = xor i64 %6882, %6867
  %6884 = xor i64 %6883, %6874
  %6885 = or i64 %69, 8697130018212420093
  %6886 = and i64 8697130018212420093, %69
  %6887 = xor i64 8697130018212420093, %69
  %6888 = or i64 %6886, %6887
  %6889 = add i64 %251, 2209201938589652953
  %6890 = sub i64 0, %251
  %6891 = add i64 -2209201938589652953, %6890
  %6892 = sub i64 0, %6891
  %6893 = xor i64 %6888, %6885
  %6894 = xor i64 %6893, %6889
  %6895 = xor i64 %6894, %6892
  %6896 = xor i64 %6895, -6284997442214844671
  %6897 = mul i64 %6884, %6896
  %6898 = sdiv i64 %6897, 67
  %6899 = sdiv i64 11, 96
  %6900 = sdiv i64 24, 42
  %6901 = mul i64 30, 125
  %6902 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 56
  %6903 = load i32, i32* %6902, align 4
  %6904 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %6905 = load i32, i32* %6904, align 4
  %6906 = sub i32 0, %6905
  %6907 = add i32 %6903, %6906
  %6908 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 29
  %6909 = load i32, i32* %6908, align 4
  %6910 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 28
  %6911 = load i32, i32* %6910, align 4
  %6912 = add i32 %6909, %6911
  %.reload159 = load i1, i1* %.reg2mem158, align 1
  %6913 = select i1 %.reload159, i32 %6907, i32 %6912
  store i32 %6913, i32* %dispatcher, align 4
  store i32 %6661, i32* %.reg2mem201, align 4
  store i32 %6744, i32* %.reg2mem203, align 4
  store i32 %6801, i32* %.reg2mem205, align 4
  %6914 = load i8*, i8** %120, align 8
  %6915 = load i8, i8* %6914, align 1
  %6916 = mul i8 %6915, %6915
  %6917 = add i8 %6916, %6915
  %6918 = mul i8 %6917, 3
  %6919 = srem i8 %6918, 2
  %6920 = icmp eq i8 %6919, 0
  %6921 = mul i8 %6915, %6915
  %6922 = add i8 %6921, %6915
  %6923 = srem i8 %6922, 2
  %6924 = icmp eq i8 %6923, 0
  %6925 = xor i1 %6924, true
  %6926 = xor i1 %6920, %6925
  %6927 = and i1 %6926, %6920
  %6928 = select i1 %6927, i32 595012137, i32 595012113
  %6929 = xor i32 %6928, 56
  store i32 %6929, i32* %4, align 4
  %6930 = call i8** @bf14862898971591998804(i32* %4)
  %6931 = load i8*, i8** %6930, align 8
  indirectbr i8* %6931, [label %loopEnd, label %6660]

6932:                                             ; preds = %6932, %loopStart
  %.reload206 = load i32, i32* %.reg2mem205, align 4
  %.reload204 = load i32, i32* %.reg2mem203, align 4
  %.reload202 = load i32, i32* %.reg2mem201, align 4
  store i32 %.reload206, i32* %.reg2mem165, align 4
  store i32 %.reload204, i32* %.reg2mem163, align 4
  store i32 %.reload202, i32* %.reg2mem161, align 4
  %6933 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 60
  %6934 = load i32, i32* %6933, align 4
  %6935 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 3
  %6936 = load i32, i32* %6935, align 4
  %6937 = sub i32 %6934, %6936
  store i32 %6937, i32* %dispatcher, align 4
  %6938 = load i8*, i8** %60, align 8
  %6939 = load i8, i8* %6938, align 1
  %6940 = mul i8 %6939, 2
  %6941 = and i64 %35, -8354424354490937613
  %6942 = xor i64 %35, -1
  %6943 = or i64 8354424354490937612, %6942
  %6944 = xor i64 %6943, -1
  %6945 = and i64 %6944, -1
  %6946 = or i64 %77, -6971204288814680606
  %6947 = xor i64 %77, -1
  %6948 = and i64 -6971204288814680606, %6947
  %6949 = add i64 %6948, %77
  %6950 = xor i64 %6949, -5846691110185610683
  %6951 = xor i64 %6950, %6945
  %6952 = xor i64 %6951, %6946
  %6953 = xor i64 %6952, %6941
  %6954 = and i64 %233, 1497706178506400480
  %6955 = xor i64 %233, -1
  %6956 = or i64 -1497706178506400481, %6955
  %6957 = xor i64 %6956, -1
  %6958 = and i64 %6957, -1
  %6959 = add i64 %115, -231501598834349233
  %6960 = sub i64 0, %115
  %6961 = add i64 231501598834349233, %6960
  %6962 = sub i64 0, %6961
  %6963 = xor i64 %6954, -4947390243120160486
  %6964 = xor i64 %6963, %6958
  %6965 = xor i64 %6964, %6962
  %6966 = xor i64 %6965, %6959
  %6967 = mul i64 %6953, %6966
  %6968 = trunc i64 %6967 to i8
  %6969 = mul i8 %6939, %6968
  %6970 = and i64 %123, -840660062484304748
  %6971 = xor i64 %123, -1
  %6972 = or i64 840660062484304747, %6971
  %6973 = xor i64 %6972, -1
  %6974 = and i64 %6973, -1
  %6975 = and i64 %61, -8251279058576852078
  %6976 = or i64 8251279058576852077, %61
  %6977 = sub i64 %6976, 8251279058576852077
  %6978 = xor i64 2866260481798949709, %6970
  %6979 = xor i64 %6978, %6974
  %6980 = xor i64 %6979, %6975
  %6981 = xor i64 %6980, %6977
  %6982 = and i64 %141, 4426170638683696404
  %6983 = or i64 -4426170638683696405, %141
  %6984 = sub i64 %6983, -4426170638683696405
  %6985 = add i64 %139, -8767124937670334533
  %6986 = add i64 -7406812484803866997, %139
  %6987 = add i64 %6986, -1360312452866467536
  %6988 = xor i64 %6985, 0
  %6989 = xor i64 %6988, %6987
  %6990 = xor i64 %6989, %6984
  %6991 = xor i64 %6990, %6982
  %6992 = mul i64 %6981, %6991
  %6993 = trunc i64 %6992 to i8
  %6994 = sub i8 %6993, %6969
  %6995 = sub i8 2, %6994
  %6996 = mul i8 %6940, %6995
  %6997 = srem i8 %6996, 4
  %6998 = icmp eq i8 %6997, 0
  %6999 = mul i8 %6939, %6939
  %7000 = add i8 %6999, %6939
  %7001 = srem i8 %7000, 2
  %7002 = add i64 %81, -5058402876407656812
  %7003 = sub i64 0, %81
  %7004 = sub i64 -5058402876407656812, %7003
  %7005 = or i64 %77, -5297901149846455618
  %7006 = xor i64 %77, -1
  %7007 = and i64 %7006, 5204174315058121923
  %7008 = and i64 %77, -5204174315058121924
  %7009 = or i64 %7007, %7008
  %7010 = xor i64 -125289289016347011, %7009
  %7011 = xor i64 %77, -1
  %7012 = or i64 5297901149846455617, %7011
  %7013 = xor i64 %7012, -1
  %7014 = and i64 %7013, -1
  %7015 = or i64 %7010, %7014
  %7016 = xor i64 %7015, %7005
  %7017 = xor i64 %7016, -1998732448471350089
  %7018 = xor i64 %7017, %7002
  %7019 = xor i64 %7018, %7004
  %7020 = and i64 %233, 7112180024926623141
  %7021 = xor i64 %233, -1
  %7022 = or i64 -7112180024926623142, %7021
  %7023 = xor i64 %7022, -1
  %7024 = and i64 %7023, -1
  %7025 = and i64 %19, 8328837528891438740
  %7026 = or i64 -8328837528891438741, %19
  %7027 = sub i64 %7026, -8328837528891438741
  %7028 = add i64 %254, -2067256866733626964
  %7029 = xor i64 -2067256866733626964, %254
  %7030 = and i64 -2067256866733626964, %254
  %7031 = mul i64 2, %7030
  %7032 = add i64 %7029, %7031
  %7033 = xor i64 %7020, %7028
  %7034 = xor i64 %7033, 0
  %7035 = xor i64 %7034, %7024
  %7036 = xor i64 %7035, %7027
  %7037 = xor i64 %7036, %7032
  %7038 = xor i64 %7037, %7025
  %7039 = mul i64 %7019, %7038
  %7040 = trunc i64 %7039 to i8
  %7041 = icmp eq i8 %7001, %7040
  %7042 = and i1 %6998, %7041
  %7043 = select i1 %7042, i32 595012102, i32 595012113
  %7044 = xor i32 %7043, 23
  store i32 %7044, i32* %4, align 4
  %7045 = call i8** @bf14862898971591998804(i32* %4)
  %7046 = load i8*, i8** %7045, align 8
  indirectbr i8* %7046, [label %loopEnd, label %6932]

codeRepl124:                                      ; preds = %codeRepl124, %loopStart
  store i64 1996855465712537078, i64* %213, align 8
  %7047 = call i8** @lk14802275186744156584(i64* %213)
  %7048 = load i8*, i8** %7047, align 8
  %7049 = bitcast i8* %7048 to void ()*
  call void %7049()
  %7050 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 33
  %7051 = load i32, i32* %7050, align 4
  %7052 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 31
  %7053 = load i32, i32* %7052, align 4
  %7054 = add i32 %7051, %7053
  store i32 %7054, i32* %dispatcher, align 4
  %.reload162 = load i32, i32* %.reg2mem161, align 4
  %.reload164 = load i32, i32* %.reg2mem163, align 4
  %.reload166 = load i32, i32* %.reg2mem165, align 4
  %7055 = load i8*, i8** %42, align 8
  %7056 = load i8, i8* %7055, align 1
  %7057 = mul i8 %7056, 2
  %7058 = mul i8 %7056, 2
  %7059 = add i8 2, %7058
  %7060 = mul i8 %7057, %7059
  %7061 = srem i8 %7060, 4
  %7062 = icmp eq i8 %7061, 0
  %7063 = mul i8 %7056, %7056
  %7064 = add i8 %7063, %7056
  %7065 = srem i8 %7064, 2
  %7066 = add i64 %89, -3371627118404516583
  %7067 = sub i64 0, %89
  %7068 = sub i64 -3371627118404516583, %7067
  %7069 = or i64 %45, 715630849074402050
  %7070 = and i64 715630849074402050, %45
  %7071 = xor i64 715630849074402050, %45
  %7072 = or i64 %7070, %7071
  %7073 = xor i64 %7068, 2432473691367310503
  %7074 = xor i64 %7073, %7072
  %7075 = xor i64 %7074, %7069
  %7076 = xor i64 %7075, %7066
  %7077 = add i64 %11, 4884358556403453495
  %7078 = xor i64 4884358556403453495, %11
  %7079 = and i64 4884358556403453495, %11
  %7080 = mul i64 2, %7079
  %7081 = add i64 %7078, %7080
  %7082 = and i64 %127, -7111972121357425575
  %7083 = xor i64 %127, -1
  %7084 = xor i64 -7111972121357425575, %7083
  %7085 = and i64 %7084, -7111972121357425575
  %7086 = add i64 %129, 1577529262313052753
  %7087 = sub i64 0, %129
  %7088 = add i64 -1577529262313052753, %7087
  %7089 = sub i64 0, %7088
  %7090 = xor i64 %7085, %7086
  %7091 = xor i64 %7090, 0
  %7092 = xor i64 %7091, %7077
  %7093 = xor i64 %7092, %7082
  %7094 = xor i64 %7093, %7089
  %7095 = xor i64 %7094, %7081
  %7096 = mul i64 %7076, %7095
  %7097 = trunc i64 %7096 to i8
  %7098 = icmp eq i8 %7065, %7097
  %7099 = xor i1 %7062, true
  %7100 = xor i1 %7098, true
  %7101 = or i1 %7099, %7100
  %7102 = or i64 %129, 8749491354420891404
  %7103 = xor i64 %129, -1
  %7104 = and i64 %7103, 1212291680208619589
  %7105 = and i64 %129, -1212291680208619590
  %7106 = or i64 %7104, %7105
  %7107 = xor i64 7619700086173648713, %7106
  %7108 = xor i64 %129, -1
  %7109 = or i64 -8749491354420891405, %7108
  %7110 = xor i64 %7109, -1
  %7111 = and i64 %7110, -1
  %7112 = or i64 %7107, %7111
  %7113 = or i64 %53, -2750661451393618404
  %7114 = xor i64 %53, -1
  %7115 = and i64 -2750661451393618404, %7114
  %7116 = add i64 %7115, %53
  %7117 = xor i64 %7116, %7112
  %7118 = xor i64 %7117, %7102
  %7119 = xor i64 %7118, %7113
  %7120 = xor i64 %7119, 2738721212737513067
  %7121 = and i64 %69, 4085744074687833123
  %7122 = or i64 -4085744074687833124, %69
  %7123 = sub i64 %7122, -4085744074687833124
  %7124 = add i64 %41, -5067829275201397032
  %7125 = and i64 -5067829275201397032, %41
  %7126 = or i64 -5067829275201397032, %41
  %7127 = add i64 %7125, %7126
  %7128 = xor i64 %7121, %7124
  %7129 = xor i64 %7128, 5195110443934324291
  %7130 = xor i64 %7129, %7127
  %7131 = xor i64 %7130, %7123
  %7132 = mul i64 %7120, %7131
  %7133 = trunc i64 %7132 to i1
  %7134 = xor i1 %7101, %7133
  %7135 = and i64 %23, 5660998739050645083
  %7136 = xor i64 %23, -1
  %7137 = or i64 -5660998739050645084, %7136
  %7138 = xor i64 %7137, -1
  %7139 = and i64 %7138, -1
  %7140 = or i64 %121, 7297043607819791841
  %7141 = xor i64 %121, -1
  %7142 = and i64 %7141, 6811784805039492313
  %7143 = and i64 %121, -6811784805039492314
  %7144 = or i64 %7142, %7143
  %7145 = xor i64 4308850070933627192, %7144
  %7146 = xor i64 %121, -1
  %7147 = or i64 -7297043607819791842, %7146
  %7148 = xor i64 %7147, -1
  %7149 = and i64 %7148, -1
  %7150 = or i64 %7145, %7149
  %7151 = xor i64 %7139, %7135
  %7152 = xor i64 %7151, %7140
  %7153 = xor i64 %7152, -8321429696952944217
  %7154 = xor i64 %7153, %7150
  %7155 = or i64 %61, 689652626123024807
  %7156 = xor i64 %61, -1
  %7157 = and i64 %7156, -3893164417602215040
  %7158 = and i64 %61, 3893164417602215039
  %7159 = or i64 %7157, %7158
  %7160 = xor i64 -4581690249849386457, %7159
  %7161 = xor i64 %61, -1
  %7162 = or i64 -689652626123024808, %7161
  %7163 = xor i64 %7162, -1
  %7164 = and i64 %7163, -1
  %7165 = or i64 %7160, %7164
  %7166 = and i64 %23, -2234291851327590477
  %7167 = or i64 2234291851327590476, %23
  %7168 = sub i64 %7167, 2234291851327590476
  %7169 = and i64 %242, -6648499200138601437
  %7170 = xor i64 %242, -1
  %7171 = or i64 6648499200138601436, %7170
  %7172 = xor i64 %7171, -1
  %7173 = and i64 %7172, -1
  %7174 = xor i64 %7166, -5840253817006760425
  %7175 = xor i64 %7174, %7173
  %7176 = xor i64 %7175, %7165
  %7177 = xor i64 %7176, %7168
  %7178 = xor i64 %7177, %7169
  %7179 = xor i64 %7178, %7155
  %7180 = mul i64 %7154, %7179
  %7181 = trunc i64 %7180 to i1
  %7182 = and i1 %7134, %7181
  %7183 = select i1 %7182, i32 595012150, i32 595012113
  %7184 = xor i32 %7183, 39
  store i32 %7184, i32* %4, align 4
  %7185 = call i8** @bf14862898971591998804(i32* %4)
  %7186 = load i8*, i8** %7185, align 8
  indirectbr i8* %7186, [label %loopEnd, label %codeRepl124]

7187:                                             ; preds = %7187, %loopStart
  %7188 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 63
  %7189 = load i32, i32* %7188, align 4
  %7190 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  %7191 = load i32, i32* %7190, align 4
  %7192 = sub i32 %7189, %7191
  store i32 %7192, i32* %dispatcher, align 4
  %7193 = load i8*, i8** %102, align 8
  %7194 = load i8, i8* %7193, align 1
  %7195 = mul i8 %7194, 2
  %7196 = mul i8 %7194, 2
  %7197 = add i8 2, %7196
  %7198 = mul i8 %7195, %7197
  %7199 = srem i8 %7198, 4
  %7200 = icmp eq i8 %7199, 0
  %7201 = mul i8 %7194, %7194
  %7202 = add i8 %7201, %7194
  %7203 = srem i8 %7202, 2
  %7204 = icmp eq i8 %7203, 0
  %7205 = and i1 %7200, %7204
  %7206 = add i64 %61, -7336884157910295
  %7207 = add i64 6080148622583025025, %61
  %7208 = sub i64 %7207, 6087485506740935320
  %7209 = add i64 %221, 6823287318898107810
  %7210 = add i64 -656671987134215752, %221
  %7211 = add i64 %7210, 7479959306032323562
  %7212 = or i64 %39, -1739133323608611277
  %7213 = and i64 -1739133323608611277, %39
  %7214 = xor i64 -1739133323608611277, %39
  %7215 = or i64 %7213, %7214
  %7216 = xor i64 %7212, %7211
  %7217 = xor i64 %7216, %7208
  %7218 = xor i64 %7217, %7206
  %7219 = xor i64 %7218, -1395699985887862773
  %7220 = xor i64 %7219, %7215
  %7221 = xor i64 %7220, %7209
  %7222 = or i64 %59, 7278045083252410689
  %7223 = xor i64 %59, -1
  %7224 = and i64 %7223, -3004881965935848591
  %7225 = and i64 %59, 3004881965935848590
  %7226 = or i64 %7224, %7225
  %7227 = xor i64 -5526958304516679120, %7226
  %7228 = xor i64 %59, -1
  %7229 = or i64 -7278045083252410690, %7228
  %7230 = xor i64 %7229, -1
  %7231 = and i64 %7230, -1
  %7232 = or i64 %7227, %7231
  %7233 = and i64 %31, -680724757488559013
  %7234 = xor i64 %31, -1
  %7235 = xor i64 -680724757488559013, %7234
  %7236 = and i64 %7235, -680724757488559013
  %7237 = add i64 %9, 3422366847254994588
  %7238 = sub i64 0, %9
  %7239 = add i64 -3422366847254994588, %7238
  %7240 = sub i64 0, %7239
  %7241 = xor i64 %7237, %7232
  %7242 = xor i64 %7241, %7240
  %7243 = xor i64 %7242, %7236
  %7244 = xor i64 %7243, %7233
  %7245 = xor i64 %7244, 5492579850016506089
  %7246 = xor i64 %7245, %7222
  %7247 = mul i64 %7221, %7246
  %7248 = trunc i64 %7247 to i32
  %7249 = select i1 %7205, i32 %7248, i32 595012113
  %7250 = xor i32 %7249, -1
  %7251 = and i32 %7250, 18
  %7252 = and i32 %7249, -19
  %7253 = or i32 %7251, %7252
  store i32 %7253, i32* %4, align 4
  %7254 = call i8** @bf14862898971591998804(i32* %4)
  %7255 = load i8*, i8** %7254, align 8
  indirectbr i8* %7255, [label %loopEnd, label %7187]

7256:                                             ; preds = %7256, %loopStart
  %7257 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 63
  %7258 = load i32, i32* %7257, align 4
  %7259 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 69
  %7260 = load i32, i32* %7259, align 4
  %7261 = srem i32 %7258, %7260
  store i32 %7261, i32* %dispatcher, align 4
  %.reload119 = load i1, i1* %.reg2mem117, align 1
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  store i32 %.ph.reload, i32* %.reg2mem207, align 4
  store i1 %.reload119, i1* %.reg2mem209, align 1
  %7262 = load i8*, i8** %46, align 8
  %7263 = load i8, i8* %7262, align 1
  %7264 = mul i8 %7263, 2
  %7265 = mul i8 %7263, 2
  %7266 = add i8 2, %7265
  %7267 = mul i8 %7264, %7266
  %7268 = srem i8 %7267, 4
  %7269 = icmp eq i8 %7268, 0
  %7270 = mul i8 %7263, %7263
  %7271 = xor i8 %7270, %7263
  %7272 = and i8 %7270, %7263
  %7273 = mul i8 2, %7272
  %7274 = add i8 %7271, %7273
  %7275 = srem i8 %7274, 2
  %7276 = icmp eq i8 %7275, 0
  %7277 = and i1 %7269, %7276
  %7278 = add i64 %79, 106229510259053569
  %7279 = add i64 3136658342078484778, %79
  %7280 = add i64 %7279, -3030428831819431209
  %7281 = and i64 %221, 6703182340596462475
  %7282 = xor i64 %221, -1
  %7283 = xor i64 6703182340596462475, %7282
  %7284 = and i64 %7283, 6703182340596462475
  %7285 = sext i32 %dispatcher1 to i64
  %7286 = add i64 %7285, 7765918533461466511
  %7287 = add i64 -4873199017547882613, %7285
  %7288 = add i64 %7287, -5807626522700202492
  %7289 = xor i64 %7278, %7288
  %7290 = xor i64 %7289, %7286
  %7291 = xor i64 %7290, %7280
  %7292 = xor i64 %7291, -4822171103470159771
  %7293 = xor i64 %7292, %7284
  %7294 = xor i64 %7293, %7281
  %7295 = add i64 %133, -7632972851623679123
  %7296 = add i64 5433741749173135989, %133
  %7297 = add i64 %7296, 5380029472912736504
  %7298 = and i64 %75, 3122645258627450259
  %7299 = xor i64 %75, -1
  %7300 = xor i64 3122645258627450259, %7299
  %7301 = and i64 %7300, 3122645258627450259
  %7302 = xor i64 %7301, %7295
  %7303 = xor i64 %7302, %7297
  %7304 = xor i64 %7303, %7298
  %7305 = xor i64 %7304, 8346576772614746685
  %7306 = mul i64 %7294, %7305
  %7307 = trunc i64 %7306 to i32
  %7308 = select i1 %7277, i32 595012147, i32 %7307
  %7309 = or i64 %19, 7130374240990313943
  %7310 = xor i64 %19, -1
  %7311 = and i64 %7310, 7941729887386105709
  %7312 = and i64 %19, -7941729887386105710
  %7313 = or i64 %7311, %7312
  %7314 = xor i64 919469731404237498, %7313
  %7315 = xor i64 %19, -1
  %7316 = or i64 -7130374240990313944, %7315
  %7317 = xor i64 %7316, -1
  %7318 = and i64 %7317, -1
  %7319 = or i64 %7314, %7318
  %7320 = add i64 %7, -1155012522893002347
  %7321 = sub i64 0, %7
  %7322 = sub i64 -1155012522893002347, %7321
  %7323 = xor i64 -5451773514940805995, %7320
  %7324 = xor i64 %7323, %7309
  %7325 = xor i64 %7324, %7322
  %7326 = xor i64 %7325, %7319
  %7327 = and i64 %85, -255239983210344732
  %7328 = xor i64 %85, -1
  %7329 = xor i64 -255239983210344732, %7328
  %7330 = and i64 %7329, -255239983210344732
  %7331 = or i64 %37, 8995545852517497778
  %7332 = xor i64 %37, -1
  %7333 = and i64 8995545852517497778, %7332
  %7334 = add i64 %7333, %37
  %7335 = and i64 %248, -8807588811264354888
  %7336 = xor i64 %248, -1
  %7337 = or i64 8807588811264354887, %7336
  %7338 = xor i64 %7337, -1
  %7339 = and i64 %7338, -1
  %7340 = xor i64 %7331, %7335
  %7341 = xor i64 %7340, %7334
  %7342 = xor i64 %7341, 846865865137475566
  %7343 = xor i64 %7342, %7330
  %7344 = xor i64 %7343, %7339
  %7345 = xor i64 %7344, %7327
  %7346 = mul i64 %7326, %7345
  %7347 = trunc i64 %7346 to i32
  %7348 = xor i32 %7308, %7347
  %7349 = xor i32 %7348, 856010148
  store i32 %7349, i32* %4, align 4
  %7350 = call i8** @bf14862898971591998804(i32* %4)
  %7351 = load i8*, i8** %7350, align 8
  indirectbr i8* %7351, [label %loopEnd, label %7256]

7352:                                             ; preds = %7352, %loopStart
  %.reload210 = load i1, i1* %.reg2mem209, align 1
  %.reload208 = load i32, i32* %.reg2mem207, align 4
  store i1 %.reload210, i1* %.reg2mem169, align 1
  store i32 %.reload208, i32* %.reg2mem167, align 4
  %.reload22 = load i32, i32* %.reg2mem18, align 4
  %7353 = mul i32 %.reload22, %.reload22
  %.reload21 = load i32, i32* %.reg2mem18, align 4
  %7354 = add i32 %7353, %.reload21
  %7355 = mul i32 %7354, 3
  %7356 = srem i32 %7355, 2
  %7357 = icmp eq i32 %7356, 0
  %.reload20 = load i32, i32* %.reg2mem18, align 4
  %7358 = mul i32 %.reload20, %.reload20
  %.reload19 = load i32, i32* %.reg2mem18, align 4
  %7359 = add i32 %7358, %.reload19
  %7360 = srem i32 %7359, 2
  %7361 = icmp eq i32 %7360, 0
  %7362 = xor i1 %7357, true
  %7363 = xor i1 %7361, true
  %7364 = xor i1 %7363, true
  %7365 = and i1 %7362, %7364
  %7366 = add i1 %7365, %7363
  %7367 = xor i1 %7366, true
  %7368 = and i1 %7367, true
  %7369 = and i64 %93, -7220020659376874394
  %7370 = xor i64 %93, -1
  %7371 = xor i64 -7220020659376874394, %7370
  %7372 = and i64 %7371, -7220020659376874394
  %7373 = add i64 %129, 797689510827002632
  %7374 = add i64 1244221294956611256, %129
  %7375 = add i64 %7374, -446531784129608624
  %7376 = xor i64 9049920366294049237, %7372
  %7377 = xor i64 %7376, %7375
  %7378 = xor i64 %7377, %7369
  %7379 = xor i64 %7378, %7373
  %7380 = and i64 %251, 1804452664656866538
  %7381 = or i64 -1804452664656866539, %251
  %7382 = sub i64 %7381, -1804452664656866539
  %7383 = or i64 %109, -6015402656737632532
  %7384 = xor i64 %109, -1
  %7385 = and i64 %7384, -8470636741608692316
  %7386 = and i64 %109, 8470636741608692315
  %7387 = or i64 %7385, %7386
  %7388 = xor i64 2807642407229520712, %7387
  %7389 = xor i64 %109, -1
  %7390 = or i64 6015402656737632531, %7389
  %7391 = xor i64 %7390, -1
  %7392 = and i64 %7391, -1
  %7393 = or i64 %7388, %7392
  %7394 = xor i64 %7380, %7382
  %7395 = xor i64 %7394, %7383
  %7396 = xor i64 %7395, %7393
  %7397 = xor i64 %7396, 0
  %7398 = mul i64 %7379, %7397
  %7399 = trunc i64 %7398 to i1
  %7400 = and i1 %7366, %7399
  %7401 = or i1 %7368, %7400
  %7402 = and i1 %7401, true
  %7403 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 34
  %7404 = load i32, i32* %7403, align 4
  %7405 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 33
  %7406 = load i32, i32* %7405, align 4
  %7407 = add i32 %7404, 54103651
  %7408 = add i32 %7407, %7406
  %7409 = sub i32 %7408, 54103651
  %7410 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  %7411 = load i32, i32* %7410, align 4
  %7412 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %7413 = load i32, i32* %7412, align 4
  %7414 = sub i32 %7411, %7413
  %7415 = select i1 %7402, i32 %7409, i32 %7414
  store i32 %7415, i32* %dispatcher, align 4
  %7416 = load i8*, i8** %42, align 8
  %7417 = load i8, i8* %7416, align 1
  %7418 = xor i8 %7417, -2
  %7419 = and i8 %7418, %7417
  %7420 = icmp eq i8 %7419, 1
  %7421 = mul i8 %7417, %7417
  %7422 = add i8 %7421, %7417
  %7423 = srem i8 %7422, 2
  %7424 = icmp eq i8 %7423, 0
  %7425 = and i1 %7420, %7424
  %7426 = xor i1 %7420, %7424
  %7427 = or i1 %7425, %7426
  %7428 = select i1 %7427, i32 595012160, i32 595012113
  %7429 = xor i32 %7428, -1
  %7430 = and i32 %7429, 81
  %7431 = and i32 %7428, -82
  %7432 = or i32 %7430, %7431
  store i32 %7432, i32* %4, align 4
  %7433 = call i8** @bf14862898971591998804(i32* %4)
  %7434 = load i8*, i8** %7433, align 8
  indirectbr i8* %7434, [label %loopEnd, label %7352]

7435:                                             ; preds = %7435, %loopStart
  %7436 = sub i32 38, 80
  %7437 = and i64 %218, -841929283006640703
  %7438 = or i64 841929283006640702, %218
  %7439 = sub i64 %7438, 841929283006640702
  %7440 = or i64 %81, -5439777814142019473
  %7441 = and i64 -5439777814142019473, %81
  %7442 = xor i64 -5439777814142019473, %81
  %7443 = or i64 %7441, %7442
  %7444 = xor i64 %7440, %7437
  %7445 = xor i64 %7444, %7443
  %7446 = xor i64 %7445, %7439
  %7447 = xor i64 %7446, -7740781735472607969
  %7448 = and i64 %257, -2893944411858430847
  %7449 = xor i64 %257, -1
  %7450 = or i64 2893944411858430846, %7449
  %7451 = xor i64 %7450, -1
  %7452 = and i64 %7451, -1
  %7453 = add i64 %101, -4742937160783572492
  %7454 = add i64 -6409776611931451211, %101
  %7455 = add i64 %7454, 1666839451147878719
  %7456 = add i64 %65, 3221360732449565630
  %7457 = sub i64 0, %65
  %7458 = sub i64 3221360732449565630, %7457
  %7459 = xor i64 %7455, %7458
  %7460 = xor i64 %7459, %7448
  %7461 = xor i64 %7460, %7452
  %7462 = xor i64 %7461, -4276761950946622610
  %7463 = xor i64 %7462, %7456
  %7464 = xor i64 %7463, %7453
  %7465 = mul i64 %7447, %7464
  %7466 = trunc i64 %7465 to i32
  %7467 = or i64 %7, -8612608629221152183
  %7468 = xor i64 %7, -1
  %7469 = and i64 %7468, 5288371169028365154
  %7470 = and i64 %7, -5288371169028365155
  %7471 = or i64 %7469, %7470
  %7472 = xor i64 -4531237387659546325, %7471
  %7473 = xor i64 %7, -1
  %7474 = or i64 8612608629221152182, %7473
  %7475 = xor i64 %7474, -1
  %7476 = and i64 %7475, -1
  %7477 = or i64 %7472, %7476
  %7478 = or i64 %9, -1973837513069203906
  %7479 = xor i64 %9, -1
  %7480 = and i64 %7479, 4415247807239074480
  %7481 = and i64 %9, -4415247807239074481
  %7482 = or i64 %7480, %7481
  %7483 = xor i64 -2747871690944553842, %7482
  %7484 = xor i64 %9, -1
  %7485 = or i64 1973837513069203905, %7484
  %7486 = xor i64 %7485, -1
  %7487 = and i64 %7486, -1
  %7488 = or i64 %7483, %7487
  %7489 = and i64 %111, 4223577464288634766
  %7490 = xor i64 %111, -1
  %7491 = or i64 -4223577464288634767, %7490
  %7492 = xor i64 %7491, -1
  %7493 = and i64 %7492, -1
  %7494 = xor i64 -2741103465671528485, %7467
  %7495 = xor i64 %7494, %7493
  %7496 = xor i64 %7495, %7477
  %7497 = xor i64 %7496, %7488
  %7498 = xor i64 %7497, %7489
  %7499 = xor i64 %7498, %7478
  %7500 = or i64 %47, 289803102224069231
  %7501 = xor i64 %47, -1
  %7502 = and i64 %7501, -7354264832092796887
  %7503 = and i64 %47, 7354264832092796886
  %7504 = or i64 %7502, %7503
  %7505 = xor i64 -7064474928398386618, %7504
  %7506 = xor i64 %47, -1
  %7507 = or i64 -289803102224069232, %7506
  %7508 = xor i64 %7507, -1
  %7509 = and i64 %7508, -1
  %7510 = or i64 %7505, %7509
  %7511 = add i64 %47, 815224169936883116
  %7512 = and i64 815224169936883116, %47
  %7513 = or i64 815224169936883116, %47
  %7514 = add i64 %7512, %7513
  %7515 = and i64 %19, 5458558405875679436
  %7516 = xor i64 %19, -1
  %7517 = xor i64 5458558405875679436, %7516
  %7518 = and i64 %7517, 5458558405875679436
  %7519 = xor i64 %7514, %7510
  %7520 = xor i64 %7519, %7500
  %7521 = xor i64 %7520, -5109422896921504132
  %7522 = xor i64 %7521, %7515
  %7523 = xor i64 %7522, %7511
  %7524 = xor i64 %7523, %7518
  %7525 = mul i64 %7499, %7524
  %7526 = trunc i64 %7525 to i32
  %7527 = mul i32 %7466, %7526
  %7528 = add i64 %55, -4790088594991372732
  %7529 = sub i64 0, %55
  %7530 = sub i64 -4790088594991372732, %7529
  %7531 = add i64 %141, -1968070646388673648
  %7532 = add i64 5113424148025875400, %141
  %7533 = sub i64 %7532, 7081494794414549048
  %7534 = xor i64 %7533, %7530
  %7535 = xor i64 %7534, %7528
  %7536 = xor i64 %7535, 7226079940418666651
  %7537 = xor i64 %7536, %7531
  %7538 = and i64 %87, -6030647920388966799
  %7539 = xor i64 %87, -1
  %7540 = xor i64 -6030647920388966799, %7539
  %7541 = and i64 %7540, -6030647920388966799
  %7542 = add i64 %85, -4119031759989877220
  %7543 = add i64 4748662620962148035, %85
  %7544 = add i64 %7543, -8867694380952025255
  %7545 = xor i64 %7544, %7541
  %7546 = xor i64 %7545, 879757608512018736
  %7547 = xor i64 %7546, %7542
  %7548 = xor i64 %7547, %7538
  %7549 = mul i64 %7537, %7548
  %7550 = trunc i64 %7549 to i32
  %7551 = add i32 13, %7550
  %7552 = mul i32 119, 54
  %7553 = add i32 77, 1
  %7554 = sub i32 22, 81
  %7555 = and i64 %105, 389096145775292412
  %7556 = xor i64 %105, -1
  %7557 = or i64 -389096145775292413, %7556
  %7558 = xor i64 %7557, -1
  %7559 = and i64 %7558, -1
  %7560 = add i64 %25, 536040742053777523
  %7561 = xor i64 536040742053777523, %25
  %7562 = and i64 536040742053777523, %25
  %7563 = mul i64 2, %7562
  %7564 = add i64 %7561, %7563
  %7565 = xor i64 -53685709084902481, %7560
  %7566 = xor i64 %7565, %7559
  %7567 = xor i64 %7566, %7564
  %7568 = xor i64 %7567, %7555
  %7569 = and i64 %13, -858361329586971620
  %7570 = xor i64 %13, -1
  %7571 = or i64 858361329586971619, %7570
  %7572 = xor i64 %7571, -1
  %7573 = and i64 %7572, -1
  %7574 = or i64 %47, -8523247644462608184
  %7575 = xor i64 %47, -1
  %7576 = and i64 -8523247644462608184, %7575
  %7577 = add i64 %7576, %47
  %7578 = xor i64 %7569, -4344210502795148559
  %7579 = xor i64 %7578, %7577
  %7580 = xor i64 %7579, %7574
  %7581 = xor i64 %7580, %7573
  %7582 = mul i64 %7568, %7581
  %7583 = trunc i64 %7582 to i32
  %7584 = add i32 %7583, 2135536215
  %7585 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  %7586 = load i32, i32* %7585, align 4
  %7587 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %7588 = load i32, i32* %7587, align 4
  %7589 = add i32 %7586, -1164162060
  %7590 = sub i32 %7589, %7588
  %7591 = sub i32 %7590, -1164162060
  store i32 %7591, i32* %dispatcher, align 4
  %7592 = load i8*, i8** %94, align 8
  %7593 = load i8, i8* %7592, align 1
  %7594 = mul i8 %7593, 2
  %7595 = mul i8 %7593, 2
  %7596 = add i8 2, %7595
  %7597 = mul i8 %7594, %7596
  %7598 = srem i8 %7597, 4
  %7599 = icmp eq i8 %7598, 0
  %7600 = mul i8 %7593, %7593
  %7601 = mul i8 %7600, %7593
  %7602 = add i8 %7601, %7593
  %7603 = srem i8 %7602, 2
  %7604 = icmp eq i8 %7603, 0
  %7605 = and i1 %7599, %7604
  %7606 = select i1 %7605, i32 595012162, i32 595012113
  %7607 = xor i32 %7606, -1
  %7608 = and i32 %7607, 895525149
  %7609 = and i32 %7606, -895525150
  %7610 = or i32 %7608, %7609
  %7611 = xor i32 %7610, 895525198
  store i32 %7611, i32* %4, align 4
  %7612 = call i8** @bf14862898971591998804(i32* %4)
  %7613 = load i8*, i8** %7612, align 8
  indirectbr i8* %7613, [label %loopEnd, label %7435]

7614:                                             ; preds = %7614, %loopStart
  %7615 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 66
  %7616 = load i32, i32* %7615, align 4
  %7617 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 2
  %7618 = load i32, i32* %7617, align 4
  %7619 = or i64 %137, 7163061559139928460
  %7620 = xor i64 %137, -1
  %7621 = and i64 7163061559139928460, %7620
  %7622 = add i64 %7621, %137
  %7623 = and i64 %9, -4342552117907880181
  %7624 = xor i64 %9, -1
  %7625 = or i64 4342552117907880180, %7624
  %7626 = xor i64 %7625, -1
  %7627 = and i64 %7626, -1
  %7628 = sext i32 %dispatcher1 to i64
  %7629 = or i64 %7628, 1938371829288840639
  %7630 = xor i64 %7628, -1
  %7631 = and i64 1938371829288840639, %7630
  %7632 = add i64 %7631, %7628
  %7633 = xor i64 %7629, %7623
  %7634 = xor i64 %7633, %7622
  %7635 = xor i64 %7634, -176582327703264185
  %7636 = xor i64 %7635, %7632
  %7637 = xor i64 %7636, %7627
  %7638 = xor i64 %7637, %7619
  %7639 = add i64 %233, -5765976296648314090
  %7640 = sub i64 0, %233
  %7641 = add i64 5765976296648314090, %7640
  %7642 = sub i64 0, %7641
  %7643 = and i64 %125, 7462775926924869703
  %7644 = xor i64 %125, -1
  %7645 = xor i64 7462775926924869703, %7644
  %7646 = and i64 %7645, 7462775926924869703
  %7647 = add i64 %227, -2392113956614306931
  %7648 = sub i64 0, %227
  %7649 = sub i64 -2392113956614306931, %7648
  %7650 = xor i64 %7642, %7646
  %7651 = xor i64 %7650, %7643
  %7652 = xor i64 %7651, -2101677683806749717
  %7653 = xor i64 %7652, %7639
  %7654 = xor i64 %7653, %7647
  %7655 = xor i64 %7654, %7649
  %7656 = mul i64 %7638, %7655
  %7657 = trunc i64 %7656 to i32
  %7658 = add i32 %7616, %7657
  %7659 = sub i32 %7658, %7618
  %7660 = sub i32 %7659, -440653267
  %7661 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 35
  %7662 = load i32, i32* %7661, align 4
  %7663 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 34
  %7664 = load i32, i32* %7663, align 4
  %7665 = and i32 %7662, %7664
  %7666 = or i32 %7662, %7664
  %7667 = add i32 %7665, %7666
  %.reload170 = load i1, i1* %.reg2mem169, align 1
  %7668 = select i1 %.reload170, i32 %7660, i32 %7667
  store i32 %7668, i32* %dispatcher, align 4
  %.reload168 = load i32, i32* %.reg2mem167, align 4
  store i32 %.reload168, i32* %.reg2mem211, align 4
  %7669 = load i8*, i8** %132, align 8
  %7670 = load i8, i8* %7669, align 1
  %7671 = mul i8 %7670, 2
  %7672 = mul i8 %7670, 2
  %7673 = add i8 2, %7672
  %7674 = mul i8 %7671, %7673
  %7675 = srem i8 %7674, 4
  %7676 = icmp eq i8 %7675, 0
  %7677 = mul i8 %7670, %7670
  %7678 = add i8 %7677, %7670
  %7679 = srem i8 %7678, 2
  %7680 = icmp eq i8 %7679, 0
  %7681 = xor i1 %7676, true
  %7682 = and i1 %7681, false
  %7683 = and i1 %7676, true
  %7684 = or i1 %7682, %7683
  %7685 = xor i1 %7680, true
  %7686 = and i1 %7685, false
  %7687 = and i1 %7680, true
  %7688 = or i1 %7686, %7687
  %7689 = xor i1 %7684, %7688
  %7690 = xor i1 %7676, true
  %7691 = xor i1 %7680, true
  %7692 = or i1 %7690, %7691
  %7693 = xor i1 %7692, true
  %7694 = and i1 %7693, true
  %7695 = or i1 %7689, %7694
  %7696 = select i1 %7695, i32 595012114, i32 595012113
  %7697 = xor i32 %7696, -1
  %7698 = and i64 %67, 7220992642750260
  %7699 = or i64 -7220992642750261, %67
  %7700 = sub i64 %7699, -7220992642750261
  %7701 = and i64 %29, -1368264147927450713
  %7702 = or i64 1368264147927450712, %29
  %7703 = sub i64 %7702, 1368264147927450712
  %7704 = add i64 %39, -7645383578244522553
  %7705 = and i64 -7645383578244522553, %39
  %7706 = or i64 -7645383578244522553, %39
  %7707 = add i64 %7705, %7706
  %7708 = xor i64 %7707, %7701
  %7709 = xor i64 %7708, %7703
  %7710 = xor i64 %7709, %7700
  %7711 = xor i64 %7710, %7704
  %7712 = xor i64 %7711, -518421314430190141
  %7713 = xor i64 %7712, %7698
  %7714 = add i64 %135, 7252584091844625667
  %7715 = sub i64 0, %135
  %7716 = sub i64 7252584091844625667, %7715
  %7717 = add i64 %11, 8304311513377735416
  %7718 = add i64 4350199742593897810, %11
  %7719 = sub i64 %7718, -3954111770783837606
  %7720 = and i64 %17, 4864570314863539195
  %7721 = xor i64 %17, -1
  %7722 = xor i64 4864570314863539195, %7721
  %7723 = and i64 %7722, 4864570314863539195
  %7724 = xor i64 %7723, 5124665993617297601
  %7725 = xor i64 %7724, %7720
  %7726 = xor i64 %7725, %7714
  %7727 = xor i64 %7726, %7716
  %7728 = xor i64 %7727, %7717
  %7729 = xor i64 %7728, %7719
  %7730 = mul i64 %7713, %7729
  %7731 = trunc i64 %7730 to i32
  %7732 = and i32 %7697, %7731
  %7733 = and i32 %7696, -4
  %7734 = or i32 %7732, %7733
  store i32 %7734, i32* %4, align 4
  %7735 = call i8** @bf14862898971591998804(i32* %4)
  %7736 = load i8*, i8** %7735, align 8
  indirectbr i8* %7736, [label %loopEnd, label %7614]

7737:                                             ; preds = %7737, %loopStart
  store i64 1996855465712537072, i64* %213, align 8
  %7738 = call i8** @lk14802275186744156584(i64* %213)
  %7739 = load i8*, i8** %7738, align 8
  %7740 = bitcast i8* %7739 to i32 (i8*, ...)*
  %7741 = call i32 (i8*, ...) %7740(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  store i64 1996855465712537087, i64* %213, align 8
  %7742 = call i8** @lk14802275186744156584(i64* %213)
  %7743 = load i8*, i8** %7742, align 8
  %7744 = bitcast i8* %7743 to i32 (float*, float*, i8*, i64)*
  %7745 = add i64 %81, 7320969490465726214
  %7746 = add i64 1498573796400696750, %81
  %7747 = add i64 %7746, 5822395694065029464
  %7748 = or i64 %109, -6023610494146591504
  %7749 = and i64 -6023610494146591504, %109
  %7750 = xor i64 -6023610494146591504, %109
  %7751 = or i64 %7749, %7750
  %7752 = or i64 %135, -4807710138407375202
  %7753 = and i64 -4807710138407375202, %135
  %7754 = xor i64 -4807710138407375202, %135
  %7755 = or i64 %7753, %7754
  %7756 = xor i64 8579986934478059791, %7751
  %7757 = xor i64 %7756, %7747
  %7758 = xor i64 %7757, %7748
  %7759 = xor i64 %7758, %7745
  %7760 = xor i64 %7759, %7752
  %7761 = xor i64 %7760, %7755
  %7762 = or i64 %107, -3260053536435079398
  %7763 = and i64 -3260053536435079398, %107
  %7764 = xor i64 -3260053536435079398, %107
  %7765 = or i64 %7763, %7764
  %7766 = and i64 %27, -9134966389531370248
  %7767 = xor i64 %27, -1
  %7768 = or i64 9134966389531370247, %7767
  %7769 = xor i64 %7768, -1
  %7770 = and i64 %7769, -1
  %7771 = xor i64 %7766, %7765
  %7772 = xor i64 %7771, %7770
  %7773 = xor i64 %7772, -3593408669461066976
  %7774 = xor i64 %7773, %7762
  %7775 = mul i64 %7761, %7774
  %7776 = call i32 %7744(float* %0, float* %1, i8* %2, i64 %7775)
  %7777 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 64
  %7778 = load i32, i32* %7777, align 4
  %7779 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %7780 = load i32, i32* %7779, align 4
  %7781 = sub i32 %7778, %7780
  store i32 %7781, i32* %dispatcher, align 4
  store i32 %7776, i32* %.reg2mem211, align 4
  %7782 = load i8*, i8** %88, align 8
  %7783 = load i8, i8* %7782, align 1
  %7784 = mul i8 %7783, 2
  %7785 = mul i8 %7783, 2
  %7786 = add i8 2, %7785
  %7787 = mul i8 %7784, %7786
  %7788 = srem i8 %7787, 4
  %7789 = icmp eq i8 %7788, 0
  %7790 = mul i8 %7783, %7783
  %7791 = mul i8 %7790, %7783
  %7792 = add i8 %7791, %7783
  %7793 = srem i8 %7792, 2
  %7794 = icmp eq i8 %7793, 0
  %7795 = xor i1 %7789, true
  %7796 = or i1 %7795, %7794
  %7797 = or i64 %83, -2675294318104279
  %7798 = and i64 -2675294318104279, %83
  %7799 = xor i64 -2675294318104279, %83
  %7800 = or i64 %7798, %7799
  %7801 = add i64 %81, 4806894796844368809
  %7802 = and i64 4806894796844368809, %81
  %7803 = or i64 4806894796844368809, %81
  %7804 = add i64 %7802, %7803
  %7805 = and i64 %55, -8879208135962161840
  %7806 = xor i64 %55, -1
  %7807 = xor i64 -8879208135962161840, %7806
  %7808 = and i64 %7807, -8879208135962161840
  %7809 = xor i64 %7805, %7808
  %7810 = xor i64 %7809, -3826329222717867191
  %7811 = xor i64 %7810, %7797
  %7812 = xor i64 %7811, %7804
  %7813 = xor i64 %7812, %7801
  %7814 = xor i64 %7813, %7800
  %7815 = or i64 %85, -7589302534036006867
  %7816 = xor i64 %85, -1
  %7817 = and i64 %7816, -8945445298504954947
  %7818 = and i64 %85, 8945445298504954946
  %7819 = or i64 %7817, %7818
  %7820 = xor i64 1546429481267450768, %7819
  %7821 = xor i64 %85, -1
  %7822 = or i64 7589302534036006866, %7821
  %7823 = xor i64 %7822, -1
  %7824 = and i64 %7823, -1
  %7825 = or i64 %7820, %7824
  %7826 = or i64 %49, 4610535907326059635
  %7827 = xor i64 %49, -1
  %7828 = and i64 %7827, 6038972268215169539
  %7829 = and i64 %49, -6038972268215169540
  %7830 = or i64 %7828, %7829
  %7831 = xor i64 7797231456886724208, %7830
  %7832 = xor i64 %49, -1
  %7833 = or i64 -4610535907326059636, %7832
  %7834 = xor i64 %7833, -1
  %7835 = and i64 %7834, -1
  %7836 = or i64 %7831, %7835
  %7837 = xor i64 -1153366224408844551, %7836
  %7838 = xor i64 %7837, %7815
  %7839 = xor i64 %7838, %7826
  %7840 = xor i64 %7839, %7825
  %7841 = mul i64 %7814, %7840
  %7842 = trunc i64 %7841 to i1
  %7843 = xor i1 %7789, %7842
  %7844 = sub i1 %7796, %7843
  %7845 = select i1 %7844, i32 595012151, i32 595012113
  %7846 = xor i32 %7845, 1089576137
  %7847 = xor i32 %7846, 1089576175
  store i32 %7847, i32* %4, align 4
  %7848 = call i8** @bf14862898971591998804(i32* %4)
  %7849 = load i8*, i8** %7848, align 8
  indirectbr i8* %7849, [label %loopEnd, label %7737]

7850:                                             ; preds = %loopStart
  %.reload212 = load i32, i32* %.reg2mem211, align 4
  ret i32 %.reload212

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %7851 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %7851, align 4
  %7852 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %7852, align 4
  %7853 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 4
  %7854 = add i64 %51, -242054337897799912
  %7855 = sub i64 0, %51
  %7856 = add i64 242054337897799912, %7855
  %7857 = sub i64 0, %7856
  %7858 = or i64 %129, -6626183259904382530
  %7859 = xor i64 %129, -1
  %7860 = and i64 %7859, -8035862885198396580
  %7861 = and i64 %129, 8035862885198396579
  %7862 = or i64 %7860, %7861
  %7863 = xor i64 3779065610500270818, %7862
  %7864 = xor i64 %129, -1
  %7865 = or i64 6626183259904382529, %7864
  %7866 = xor i64 %7865, -1
  %7867 = and i64 %7866, -1
  %7868 = or i64 %7863, %7867
  %7869 = add i64 %215, -6896404370601809821
  %7870 = and i64 -6896404370601809821, %215
  %7871 = or i64 -6896404370601809821, %215
  %7872 = add i64 %7870, %7871
  %7873 = xor i64 2772469338029719923, %7857
  %7874 = xor i64 %7873, %7868
  %7875 = xor i64 %7874, %7854
  %7876 = xor i64 %7875, %7869
  %7877 = xor i64 %7876, %7872
  %7878 = xor i64 %7877, %7858
  %7879 = and i64 %99, 5418991640142296436
  %7880 = xor i64 %99, -1
  %7881 = or i64 -5418991640142296437, %7880
  %7882 = xor i64 %7881, -1
  %7883 = and i64 %7882, -1
  %7884 = add i64 %125, 7899985545057471835
  %7885 = sub i64 0, %125
  %7886 = sub i64 7899985545057471835, %7885
  %7887 = or i64 %21, 2887734942392088525
  %7888 = xor i64 %21, -1
  %7889 = and i64 2887734942392088525, %7888
  %7890 = add i64 %7889, %21
  %7891 = xor i64 %7890, %7887
  %7892 = xor i64 %7891, %7879
  %7893 = xor i64 %7892, %7886
  %7894 = xor i64 %7893, %7884
  %7895 = xor i64 %7894, 6511752014832433
  %7896 = xor i64 %7895, %7883
  %7897 = mul i64 %7878, %7896
  %7898 = trunc i64 %7897 to i32
  store i32 %7898, i32* %7853, align 4
  %7899 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %7899, align 4
  %7900 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %7900, align 4
  %7901 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 10
  store i32 9, i32* %7901, align 4
  %7902 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 12
  store i32 11, i32* %7902, align 4
  %7903 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 14
  store i32 13, i32* %7903, align 4
  %7904 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 16
  store i32 15, i32* %7904, align 4
  %7905 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 18
  store i32 17, i32* %7905, align 4
  %7906 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 20
  store i32 19, i32* %7906, align 4
  %7907 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 22
  store i32 21, i32* %7907, align 4
  %7908 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 24
  store i32 23, i32* %7908, align 4
  %7909 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 26
  store i32 25, i32* %7909, align 4
  %7910 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 28
  store i32 27, i32* %7910, align 4
  %7911 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 30
  store i32 29, i32* %7911, align 4
  %7912 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 32
  store i32 31, i32* %7912, align 4
  %7913 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 34
  store i32 33, i32* %7913, align 4
  %7914 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 36
  store i32 35, i32* %7914, align 4
  %7915 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 38
  store i32 37, i32* %7915, align 4
  %7916 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 40
  store i32 39, i32* %7916, align 4
  %7917 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 42
  store i32 41, i32* %7917, align 4
  %7918 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 44
  store i32 43, i32* %7918, align 4
  %7919 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 46
  store i32 45, i32* %7919, align 4
  %7920 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 48
  store i32 47, i32* %7920, align 4
  %7921 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 50
  store i32 49, i32* %7921, align 4
  %7922 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 52
  %7923 = add i64 %93, 4740168870339873262
  %7924 = add i64 8965114402383972010, %93
  %7925 = add i64 %7924, -4224945532044098748
  %7926 = and i64 %93, -1389751894208269004
  %7927 = xor i64 %93, -1
  %7928 = xor i64 -1389751894208269004, %7927
  %7929 = and i64 %7928, -1389751894208269004
  %7930 = xor i64 %7923, %7929
  %7931 = xor i64 %7930, %7926
  %7932 = xor i64 %7931, %7925
  %7933 = xor i64 %7932, 4541906781406342769
  %7934 = and i64 %87, -754669308564288426
  %7935 = xor i64 %87, -1
  %7936 = xor i64 -754669308564288426, %7935
  %7937 = and i64 %7936, -754669308564288426
  %7938 = sext i32 %dispatcher1 to i64
  %7939 = and i64 %7938, -7928791942028887756
  %7940 = xor i64 %7938, -1
  %7941 = or i64 7928791942028887755, %7940
  %7942 = xor i64 %7941, -1
  %7943 = and i64 %7942, -1
  %7944 = or i64 %129, -181414924554980771
  %7945 = and i64 -181414924554980771, %129
  %7946 = xor i64 -181414924554980771, %129
  %7947 = or i64 %7945, %7946
  %7948 = xor i64 %7947, %7934
  %7949 = xor i64 %7948, 1728417854780109539
  %7950 = xor i64 %7949, %7943
  %7951 = xor i64 %7950, %7944
  %7952 = xor i64 %7951, %7939
  %7953 = xor i64 %7952, %7937
  %7954 = mul i64 %7933, %7953
  %7955 = trunc i64 %7954 to i32
  store i32 %7955, i32* %7922, align 4
  %7956 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 54
  store i32 53, i32* %7956, align 4
  %7957 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 56
  %7958 = add i64 %35, -5135953006401094985
  %7959 = and i64 -5135953006401094985, %35
  %7960 = or i64 -5135953006401094985, %35
  %7961 = add i64 %7959, %7960
  %7962 = add i64 %135, 4951303289361614786
  %7963 = xor i64 4951303289361614786, %135
  %7964 = and i64 4951303289361614786, %135
  %7965 = mul i64 2, %7964
  %7966 = add i64 %7963, %7965
  %7967 = xor i64 %7958, %7962
  %7968 = xor i64 %7967, %7961
  %7969 = xor i64 %7968, %7966
  %7970 = xor i64 %7969, -106429734642586969
  %7971 = add i64 %25, -5786047903719412142
  %7972 = sub i64 0, %25
  %7973 = add i64 5786047903719412142, %7972
  %7974 = sub i64 0, %7973
  %7975 = and i64 %71, -1909740351846191085
  %7976 = or i64 1909740351846191084, %71
  %7977 = sub i64 %7976, 1909740351846191084
  %7978 = xor i64 %7975, -3224021788696363023
  %7979 = xor i64 %7978, %7974
  %7980 = xor i64 %7979, %7977
  %7981 = xor i64 %7980, %7971
  %7982 = mul i64 %7970, %7981
  %7983 = trunc i64 %7982 to i32
  store i32 %7983, i32* %7957, align 4
  %7984 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 58
  store i32 57, i32* %7984, align 4
  %7985 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 60
  store i32 59, i32* %7985, align 4
  %7986 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 62
  store i32 61, i32* %7986, align 4
  %7987 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 64
  store i32 63, i32* %7987, align 4
  %7988 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 66
  store i32 65, i32* %7988, align 4
  %7989 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 68
  store i32 67, i32* %7989, align 4
  %7990 = getelementptr inbounds [70 x i32], [70 x i32]* %lookupTable, i32 0, i32 0
  %7991 = load i32, i32* %7990, align 4
  store i32 %7991, i32* %dispatcher, align 4
  %7992 = load i8*, i8** %124, align 8
  %7993 = load i8, i8* %7992, align 1
  %7994 = mul i8 %7993, 2
  %7995 = mul i8 %7993, 2
  %7996 = xor i8 2, %7995
  %7997 = and i8 2, %7995
  %7998 = mul i8 2, %7997
  %7999 = add i8 %7996, %7998
  %8000 = mul i8 39, %7999
  %8001 = add i8 23, %8000
  %8002 = mul i8 -105, %8001
  %8003 = add i8 111, %8002
  %8004 = mul i8 %7994, %8003
  %8005 = or i64 %15, -4315543945974037386
  %8006 = xor i64 %15, -1
  %8007 = and i64 %8006, -4848835232803825476
  %8008 = and i64 %15, 4848835232803825475
  %8009 = or i64 %8007, %8008
  %8010 = xor i64 8694587958016416970, %8009
  %8011 = xor i64 %15, -1
  %8012 = or i64 4315543945974037385, %8011
  %8013 = xor i64 %8012, -1
  %8014 = and i64 %8013, -1
  %8015 = or i64 %8010, %8014
  %8016 = or i64 %115, -7851005403124279687
  %8017 = xor i64 %115, -1
  %8018 = and i64 %8017, 8103472625534827418
  %8019 = and i64 %115, -8103472625534827419
  %8020 = or i64 %8018, %8019
  %8021 = xor i64 -2053939098879513117, %8020
  %8022 = xor i64 %115, -1
  %8023 = or i64 7851005403124279686, %8022
  %8024 = xor i64 %8023, -1
  %8025 = and i64 %8024, -1
  %8026 = or i64 %8021, %8025
  %8027 = xor i64 %8015, %8026
  %8028 = xor i64 %8027, -2648957458240426891
  %8029 = xor i64 %8028, %8016
  %8030 = xor i64 %8029, %8005
  %8031 = add i64 %15, 5143920225251260715
  %8032 = add i64 -6284762318551461631, %15
  %8033 = sub i64 %8032, 7018061529906829270
  %8034 = add i64 %101, -8804447524672527114
  %8035 = add i64 -566080293859858911, %101
  %8036 = add i64 %8035, -8238367230812668203
  %8037 = xor i64 %8031, %8033
  %8038 = xor i64 %8037, %8034
  %8039 = xor i64 %8038, 1794871551329898356
  %8040 = xor i64 %8039, %8036
  %8041 = mul i64 %8030, %8040
  %8042 = trunc i64 %8041 to i8
  %8043 = srem i8 %8004, %8042
  %8044 = or i64 %89, 7556035367127655730
  %8045 = and i64 7556035367127655730, %89
  %8046 = xor i64 7556035367127655730, %89
  %8047 = or i64 %8045, %8046
  %8048 = or i64 %39, 7442793414465104438
  %8049 = and i64 7442793414465104438, %39
  %8050 = xor i64 7442793414465104438, %39
  %8051 = or i64 %8049, %8050
  %8052 = or i64 %215, -2420566510694674751
  %8053 = xor i64 %215, -1
  %8054 = and i64 -2420566510694674751, %8053
  %8055 = add i64 %8054, %215
  %8056 = xor i64 %8051, %8052
  %8057 = xor i64 %8056, -3420603306963032607
  %8058 = xor i64 %8057, %8055
  %8059 = xor i64 %8058, %8048
  %8060 = xor i64 %8059, %8047
  %8061 = xor i64 %8060, %8044
  %8062 = or i64 %123, -2306359240879434870
  %8063 = xor i64 %123, -1
  %8064 = and i64 %8063, 7580034875718129935
  %8065 = and i64 %123, -7580034875718129936
  %8066 = or i64 %8064, %8065
  %8067 = xor i64 -5273825172884731259, %8066
  %8068 = xor i64 %123, -1
  %8069 = or i64 2306359240879434869, %8068
  %8070 = xor i64 %8069, -1
  %8071 = and i64 %8070, -1
  %8072 = or i64 %8067, %8071
  %8073 = add i64 %71, 4725002092544413824
  %8074 = add i64 6784392337487134035, %71
  %8075 = sub i64 %8074, 2059390244942720211
  %8076 = xor i64 %8073, 0
  %8077 = xor i64 %8076, %8062
  %8078 = xor i64 %8077, %8072
  %8079 = xor i64 %8078, %8075
  %8080 = mul i64 %8061, %8079
  %8081 = trunc i64 %8080 to i8
  %8082 = icmp eq i8 %8043, %8081
  %8083 = mul i8 %7993, %7993
  %8084 = mul i8 %8083, %7993
  %8085 = xor i8 %8084, %7993
  %8086 = and i8 %8084, %7993
  %8087 = mul i8 2, %8086
  %8088 = add i8 %8085, %8087
  %8089 = and i64 %59, -3949141431428220417
  %8090 = xor i64 %59, -1
  %8091 = or i64 3949141431428220416, %8090
  %8092 = xor i64 %8091, -1
  %8093 = and i64 %8092, -1
  %8094 = and i64 %87, 827746849310151395
  %8095 = xor i64 %87, -1
  %8096 = xor i64 827746849310151395, %8095
  %8097 = and i64 %8096, 827746849310151395
  %8098 = or i64 %77, -358157999671616873
  %8099 = and i64 -358157999671616873, %77
  %8100 = xor i64 -358157999671616873, %77
  %8101 = or i64 %8099, %8100
  %8102 = xor i64 %8101, %8097
  %8103 = xor i64 %8102, -5063634342016808237
  %8104 = xor i64 %8103, %8089
  %8105 = xor i64 %8104, %8093
  %8106 = xor i64 %8105, %8098
  %8107 = xor i64 %8106, %8094
  %8108 = and i64 %85, -4952830267580616125
  %8109 = or i64 4952830267580616124, %85
  %8110 = sub i64 %8109, 4952830267580616124
  %8111 = and i64 %101, -851120048670865121
  %8112 = xor i64 %101, -1
  %8113 = or i64 851120048670865120, %8112
  %8114 = xor i64 %8113, -1
  %8115 = and i64 %8114, -1
  %8116 = and i64 %103, 1730496014490718084
  %8117 = or i64 -1730496014490718085, %103
  %8118 = sub i64 %8117, -1730496014490718085
  %8119 = xor i64 %8108, -6202118269048669514
  %8120 = xor i64 %8119, %8116
  %8121 = xor i64 %8120, %8110
  %8122 = xor i64 %8121, %8118
  %8123 = xor i64 %8122, %8115
  %8124 = xor i64 %8123, %8111
  %8125 = mul i64 %8107, %8124
  %8126 = trunc i64 %8125 to i8
  %8127 = srem i8 %8088, %8126
  %8128 = icmp eq i8 %8127, 0
  %8129 = and i1 %8082, %8128
  %8130 = select i1 %8129, i32 595012117, i32 595012138
  %8131 = xor i32 %8130, 63
  store i32 %8131, i32* %4, align 4
  %8132 = call i8** @bf14862898971591998804(i32* %4)
  %8133 = load i8*, i8** %8132, align 8
  indirectbr i8* %8133, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %8134 = load i8*, i8** %10, align 8
  %8135 = load i8, i8* %8134, align 1
  %8136 = and i8 %8135, 1
  %8137 = icmp eq i8 %8136, 1
  %8138 = mul i8 %8135, %8135
  %8139 = add i8 %8138, %8135
  %8140 = srem i8 %8139, 2
  %8141 = icmp eq i8 %8140, 0
  %8142 = or i1 %8137, %8141
  %8143 = select i1 %8142, i32 595012142, i32 595012113
  %8144 = or i32 %8143, 63
  %8145 = and i32 %8143, 63
  %8146 = sub i32 %8144, %8145
  store i32 %8146, i32* %4, align 4
  %8147 = call i8** @bf14862898971591998804(i32* %4)
  %8148 = load i8*, i8** %8147, align 8
  indirectbr i8* %8148, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %7737, %7614, %7435, %7352, %7256, %7187, %codeRepl124, %6932, %6660, %codeRepl90, %6421, %codeRepl80, %6241, %6123, %codeRepl49, %codeRepl48, %5890, %codeRepl19, %5418, %5197, %.loopexit, %5097, %5005, %4985, %4918, %4527, %4471, %4397, %4012, %codeRepl2, %3828, %3792, %3618, %3432, %3407, %3380, %3322, %3261, %3078, %3016, %2941, %2833, %2770, %2628, %codeRepl1, %2513, %2282, %2086, %codeRepl, %1922, %1869, %1772, %.preheader, %1407, %1346, %1240, %1204, %1073, %763, %594, %557, %502, %405, %EntryBasicBlockSplit
  %8149 = load i8*, i8** %114, align 8
  %8150 = load i8, i8* %8149, align 1
  %8151 = mul i8 %8150, 2
  %8152 = mul i8 %8150, 2
  %8153 = xor i8 2, %8152
  %8154 = and i8 2, %8152
  %8155 = mul i8 2, %8154
  %8156 = add i8 %8153, %8155
  %8157 = mul i8 %8151, %8156
  %8158 = srem i8 %8157, 4
  %8159 = add i64 %13, -3497552545862506374
  %8160 = and i64 -3497552545862506374, %13
  %8161 = or i64 -3497552545862506374, %13
  %8162 = add i64 %8160, %8161
  %8163 = and i64 %123, 1658787972298257249
  %8164 = xor i64 %123, -1
  %8165 = or i64 -1658787972298257250, %8164
  %8166 = xor i64 %8165, -1
  %8167 = and i64 %8166, -1
  %8168 = or i64 %21, -2191601911947259538
  %8169 = xor i64 %21, -1
  %8170 = and i64 %8169, -3839852814952730313
  %8171 = and i64 %21, 3839852814952730312
  %8172 = or i64 %8170, %8171
  %8173 = xor i64 3108547630907809881, %8172
  %8174 = xor i64 %21, -1
  %8175 = or i64 2191601911947259537, %8174
  %8176 = xor i64 %8175, -1
  %8177 = and i64 %8176, -1
  %8178 = or i64 %8173, %8177
  %8179 = xor i64 %8168, %8162
  %8180 = xor i64 %8179, %8159
  %8181 = xor i64 %8180, %8167
  %8182 = xor i64 %8181, 5505854673598740167
  %8183 = xor i64 %8182, %8163
  %8184 = xor i64 %8183, %8178
  %8185 = and i64 %248, -7554843577772605823
  %8186 = or i64 7554843577772605822, %248
  %8187 = sub i64 %8186, 7554843577772605822
  %8188 = and i64 %61, -458508407062308817
  %8189 = xor i64 %61, -1
  %8190 = xor i64 -458508407062308817, %8189
  %8191 = and i64 %8190, -458508407062308817
  %8192 = xor i64 %8185, 0
  %8193 = xor i64 %8192, %8191
  %8194 = xor i64 %8193, %8188
  %8195 = xor i64 %8194, %8187
  %8196 = mul i64 %8184, %8195
  %8197 = trunc i64 %8196 to i8
  %8198 = icmp eq i8 %8158, %8197
  %8199 = mul i8 %8150, %8150
  %8200 = mul i8 %8199, %8150
  %8201 = add i8 %8200, %8150
  %8202 = srem i8 %8201, 2
  %8203 = icmp eq i8 %8202, 0
  %8204 = xor i1 %8203, true
  %8205 = xor i1 %8198, %8204
  %8206 = and i1 %8205, %8198
  %8207 = and i64 %127, -7742784234945450995
  %8208 = or i64 7742784234945450994, %127
  %8209 = sub i64 %8208, 7742784234945450994
  %8210 = add i64 %61, 5547641969024746199
  %8211 = sub i64 0, %61
  %8212 = sub i64 5547641969024746199, %8211
  %8213 = xor i64 %8209, %8212
  %8214 = xor i64 %8213, %8207
  %8215 = xor i64 %8214, -2142916312243426069
  %8216 = xor i64 %8215, %8210
  %8217 = or i64 %27, -6737836614079598772
  %8218 = xor i64 %27, -1
  %8219 = and i64 %8218, 7982304723949951234
  %8220 = and i64 %27, -7982304723949951235
  %8221 = or i64 %8219, %8220
  %8222 = xor i64 -3695007132767242674, %8221
  %8223 = xor i64 %27, -1
  %8224 = or i64 6737836614079598771, %8223
  %8225 = xor i64 %8224, -1
  %8226 = and i64 %8225, -1
  %8227 = or i64 %8222, %8226
  %8228 = or i64 %230, 7877892385609643695
  %8229 = xor i64 %230, -1
  %8230 = and i64 %8229, 7786070932628068636
  %8231 = and i64 %230, -7786070932628068637
  %8232 = or i64 %8230, %8231
  %8233 = xor i64 98598842664890291, %8232
  %8234 = xor i64 %230, -1
  %8235 = or i64 -7877892385609643696, %8234
  %8236 = xor i64 %8235, -1
  %8237 = and i64 %8236, -1
  %8238 = or i64 %8233, %8237
  %8239 = add i64 %41, 6324708399940367256
  %8240 = sub i64 0, %41
  %8241 = sub i64 6324708399940367256, %8240
  %8242 = xor i64 %8228, %8239
  %8243 = xor i64 %8242, %8238
  %8244 = xor i64 %8243, %8217
  %8245 = xor i64 %8244, -8418300119154094727
  %8246 = xor i64 %8245, %8227
  %8247 = xor i64 %8246, %8241
  %8248 = mul i64 %8216, %8247
  %8249 = trunc i64 %8248 to i32
  %8250 = select i1 %8206, i32 %8249, i32 595012117
  %8251 = xor i32 %8250, -1
  %8252 = and i32 %8251, 6
  %8253 = and i32 %8250, -7
  %8254 = or i32 %8252, %8253
  store i32 %8254, i32* %4, align 4
  %8255 = call i8** @bf14862898971591998804(i32* %4)
  %8256 = load i8*, i8** %8255, align 8
  indirectbr i8* %8256, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @wait() unnamed_addr #6 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %3, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10704982355254502734, i32 0, i64 %4
  store i8* bitcast (i32 (i32)* @"\01_usleep" to i8*), i8** %5, align 8
  store i64 1996855465712537074, i64* %2, align 8
  %6 = alloca i8**, align 8
  call void @"9941920946239825184"(i32 12, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* %2, i8*** %6, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %7 = load i8**, i8*** %6, align 8
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to i32 (i32)*
  %10 = call i32 %9(i32 30000)
  ret void
}

; Function Attrs: nofree noinline nosync nounwind ssp uwtable
define internal fastcc i32 @inner_loop(float %0, float* readonly %1, float* readonly %2, i8* %3, float* %4) unnamed_addr #7 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h11804894491772278134(i64 595012098)
  %7 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %6
  store i8* blockaddress(@inner_loop, %"18"), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012104)
  %9 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %8
  store i8* blockaddress(@inner_loop, %"17"), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012101)
  %11 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %10
  store i8* blockaddress(@inner_loop, %"15"), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012107)
  %13 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %12
  store i8* blockaddress(@inner_loop, %"10"), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012105)
  %15 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %14
  store i8* blockaddress(@inner_loop, %codeRepl21), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012103)
  %17 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %16
  store i8* blockaddress(@inner_loop, %codeRepl13), i8** %17, align 8
  %18 = call i64 @h11804894491772278134(i64 595012113)
  %19 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %18
  store i8* blockaddress(@inner_loop, %codeRepl26), i8** %19, align 8
  %20 = call i64 @h11804894491772278134(i64 595012096)
  %21 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %20
  store i8* blockaddress(@inner_loop, %"7"), i8** %21, align 8
  %22 = call i64 @h11804894491772278134(i64 595012111)
  %23 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %22
  store i8* blockaddress(@inner_loop, %"5"), i8** %23, align 8
  %24 = call i64 @h11804894491772278134(i64 595012110)
  %25 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %24
  store i8* blockaddress(@inner_loop, %"16"), i8** %25, align 8
  %26 = call i64 @h11804894491772278134(i64 595012108)
  %27 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %26
  store i8* blockaddress(@inner_loop, %"11"), i8** %27, align 8
  %28 = call i64 @h11804894491772278134(i64 595012102)
  %29 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %28
  store i8* blockaddress(@inner_loop, %EntryBasicBlockSplit), i8** %29, align 8
  %30 = call i64 @h11804894491772278134(i64 595012097)
  %31 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %30
  store i8* blockaddress(@inner_loop, %"6"), i8** %31, align 8
  %32 = call i64 @h11804894491772278134(i64 595012106)
  %33 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %32
  store i8* blockaddress(@inner_loop, %"12"), i8** %33, align 8
  %34 = call i64 @h11804894491772278134(i64 595012109)
  %35 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %34
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %35, align 8
  %36 = call i64 @h11804894491772278134(i64 595012112)
  %37 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %36
  store i8* blockaddress(@inner_loop, %"14"), i8** %37, align 8
  %38 = call i64 @h11804894491772278134(i64 595012115)
  %39 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %38
  store i8* blockaddress(@inner_loop, %"3"), i8** %39, align 8
  %40 = call i64 @h11804894491772278134(i64 595012099)
  %41 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %40
  store i8* blockaddress(@inner_loop, %"2"), i8** %41, align 8
  %42 = call i64 @h11804894491772278134(i64 595012100)
  %43 = getelementptr [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %42
  store i8* blockaddress(@inner_loop, %BogusBasciBlock), i8** %43, align 8
  %.reg2mem105 = alloca i32, align 4
  %.reg2mem103 = alloca i1, align 1
  %.reg2mem101 = alloca i1, align 1
  %.reg2mem99 = alloca double, align 8
  %.reg2mem97 = alloca i1, align 1
  %.reload24.reg2mem = alloca i1, align 1
  %.reload18.reg2mem = alloca i1, align 1
  %.reload17.reg2mem = alloca i1, align 1
  %.reg2mem90 = alloca float*, align 8
  %.reg2mem87 = alloca i64, align 8
  %.reload8.reg2mem = alloca i32, align 4
  %.reload7.reg2mem = alloca i32, align 4
  %.reload6.reg2mem = alloca i32, align 4
  %.reload5.reg2mem = alloca i32, align 4
  %.reload.reg2mem = alloca float, align 4
  %.reg2mem81 = alloca double, align 8
  %.reg2mem79 = alloca float, align 4
  %.reg2mem77 = alloca float, align 4
  %.reg2mem74 = alloca float, align 4
  %.reg2mem72 = alloca i1, align 1
  %.reg2mem70 = alloca i1, align 1
  %.reg2mem66 = alloca i8**, align 8
  %.reg2mem62 = alloca i8**, align 8
  %.reg2mem59 = alloca i8**, align 8
  %.reg2mem55 = alloca i8**, align 8
  %.reg2mem52 = alloca i8**, align 8
  %.reg2mem49 = alloca i8**, align 8
  %.reg2mem45 = alloca i8**, align 8
  %.reg2mem42 = alloca i8**, align 8
  %.reg2mem39 = alloca i8**, align 8
  %.reg2mem36 = alloca i8**, align 8
  %.reg2mem32 = alloca i8**, align 8
  %.reg2mem27 = alloca i8**, align 8
  %.reg2mem23 = alloca i8**, align 8
  %.reg2mem20 = alloca i8**, align 8
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem11 = alloca i8**, align 8
  %.reg2mem4 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 19, align 8
  %44 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop, %BogusBasciBlock), i8** %44, align 8
  %45 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %45, i8*** %.reg2mem, align 8
  %.reload3 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop, %EntryBasicBlockSplit), i8** %.reload3, align 8
  %46 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %46, i8*** %.reg2mem4, align 8
  %.reload10 = load i8**, i8*** %.reg2mem4, align 8
  store i8* blockaddress(@inner_loop, %"2"), i8** %.reload10, align 8
  %47 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %47, i8*** %.reg2mem11, align 8
  %.reload14 = load i8**, i8*** %.reg2mem11, align 8
  store i8* blockaddress(@inner_loop, %"3"), i8** %.reload14, align 8
  %48 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %48, i8*** %.reg2mem15, align 8
  %.reload19 = load i8**, i8*** %.reg2mem15, align 8
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %.reload19, align 8
  %49 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %49, i8*** %.reg2mem20, align 8
  %.reload22 = load i8**, i8*** %.reg2mem20, align 8
  store i8* blockaddress(@inner_loop, %"5"), i8** %.reload22, align 8
  %50 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %50, i8*** %.reg2mem23, align 8
  %.reload26 = load i8**, i8*** %.reg2mem23, align 8
  store i8* blockaddress(@inner_loop, %"6"), i8** %.reload26, align 8
  %51 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %51, i8*** %.reg2mem27, align 8
  %.reload31 = load i8**, i8*** %.reg2mem27, align 8
  store i8* blockaddress(@inner_loop, %"7"), i8** %.reload31, align 8
  %52 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %52, i8*** %.reg2mem32, align 8
  %.reload35 = load i8**, i8*** %.reg2mem32, align 8
  store i8* blockaddress(@inner_loop, %codeRepl13), i8** %.reload35, align 8
  %53 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %53, i8*** %.reg2mem36, align 8
  %.reload38 = load i8**, i8*** %.reg2mem36, align 8
  store i8* blockaddress(@inner_loop, %codeRepl21), i8** %.reload38, align 8
  %54 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %54, i8*** %.reg2mem39, align 8
  %.reload41 = load i8**, i8*** %.reg2mem39, align 8
  store i8* blockaddress(@inner_loop, %"10"), i8** %.reload41, align 8
  %55 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %55, i8*** %.reg2mem42, align 8
  %.reload44 = load i8**, i8*** %.reg2mem42, align 8
  store i8* blockaddress(@inner_loop, %"11"), i8** %.reload44, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %56, i8*** %.reg2mem45, align 8
  %.reload48 = load i8**, i8*** %.reg2mem45, align 8
  store i8* blockaddress(@inner_loop, %"12"), i8** %.reload48, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 13
  store i8** %57, i8*** %.reg2mem49, align 8
  %.reload51 = load i8**, i8*** %.reg2mem49, align 8
  store i8* blockaddress(@inner_loop, %codeRepl26), i8** %.reload51, align 8
  %58 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8** %58, i8*** %.reg2mem52, align 8
  %.reload54 = load i8**, i8*** %.reg2mem52, align 8
  store i8* blockaddress(@inner_loop, %"14"), i8** %.reload54, align 8
  %59 = getelementptr i8*, i8** %JumpTable, i32 15
  store i8** %59, i8*** %.reg2mem55, align 8
  %.reload58 = load i8**, i8*** %.reg2mem55, align 8
  store i8* blockaddress(@inner_loop, %"15"), i8** %.reload58, align 8
  %60 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8** %60, i8*** %.reg2mem59, align 8
  %.reload61 = load i8**, i8*** %.reg2mem59, align 8
  store i8* blockaddress(@inner_loop, %"16"), i8** %.reload61, align 8
  %61 = getelementptr i8*, i8** %JumpTable, i32 17
  store i8** %61, i8*** %.reg2mem62, align 8
  %.reload65 = load i8**, i8*** %.reg2mem62, align 8
  store i8* blockaddress(@inner_loop, %"17"), i8** %.reload65, align 8
  %62 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8** %62, i8*** %.reg2mem66, align 8
  %.reload69 = load i8**, i8*** %.reg2mem66, align 8
  store i8* blockaddress(@inner_loop, %"18"), i8** %.reload69, align 8
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537073, i64* %64, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable4065199750022294924, i32 0, i64 %65
  store i8* bitcast (i1 (double, float*, float, float, float*, float, float*, i32*, i32*, i32*, i32*)* @inner_loop..split to i8*), i8** %66, align 8
  %67 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537075, i64* %67, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable4065199750022294924, i32 0, i64 %68
  store i8* bitcast (i1 (i32, i1*, i1*)* @inner_loop..loopexit to i8*), i8** %69, align 8
  %70 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537072, i64* %70, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable4065199750022294924, i32 0, i64 %71
  store i8* bitcast (i1 (i32, i1*)* @inner_loop.extracted to i8*), i8** %72, align 8
  %73 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %73, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable4065199750022294924, i32 0, i64 %74
  store i8* bitcast (void ()* @inner_loop..split.24 to i8*), i8** %75, align 8
  %.loc22 = alloca i1, align 1
  %.loc15 = alloca i1, align 1
  %.loc14 = alloca i1, align 1
  %.loc4 = alloca i32, align 4
  %.loc3 = alloca i32, align 4
  %.loc2 = alloca i32, align 4
  %.loc1 = alloca i32, align 4
  %.loc = alloca float, align 4
  %76 = icmp eq float* %1, null
  %77 = icmp eq float* %2, null
  %78 = select i1 %76, i1 true, i1 %77
  %79 = icmp eq i8* %3, null
  %80 = select i1 %78, i1 true, i1 %79
  store i1 %80, i1* %.reg2mem70, align 1
  %81 = icmp eq float* %4, null
  store i1 %81, i1* %.reg2mem72, align 1
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %82 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %82, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

BogusBasciBlock:                                  ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %83 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop, %codeRepl21), i8** %83, align 8
  %84 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop, %"10"), i8** %84, align 8
  %85 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop, %codeRepl13), i8** %85, align 8
  %86 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@inner_loop, %codeRepl26), i8** %86, align 8
  %87 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@inner_loop, %EntryBasicBlockSplit), i8** %87, align 8
  %88 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@inner_loop, %"7"), i8** %88, align 8
  %89 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@inner_loop, %"12"), i8** %89, align 8
  %90 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8* blockaddress(@inner_loop, %"3"), i8** %90, align 8
  %91 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8* blockaddress(@inner_loop, %codeRepl), i8** %91, align 8
  %92 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8* blockaddress(@inner_loop, %BogusBasciBlock), i8** %92, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  %93 = load i8*, i8** %.reload2, align 8
  indirectbr i8* %93, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

EntryBasicBlockSplit:                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload71 = load i1, i1* %.reg2mem70, align 1
  %.reload73 = load i1, i1* %.reg2mem72, align 1
  %94 = select i1 %.reload71, i1 true, i1 %.reload73
  %.reload9 = load i8**, i8*** %.reg2mem4, align 8
  %.reload68 = load i8**, i8*** %.reg2mem66, align 8
  %95 = select i1 %94, i8** %.reload68, i8** %.reload9
  %96 = load i8*, i8** %95, align 8
  store i32 2, i32* %.reg2mem105, align 4
  indirectbr i8* %96, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"2":                                              ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %97 = fpext float %0 to double
  %98 = call double @llvm.cos.f64(double %97)
  %99 = fptrunc double %98 to float
  store float %99, float* %.reg2mem74, align 4
  %100 = call double @llvm.sin.f64(double %97)
  %101 = fptrunc double %100 to float
  store float %101, float* %.reg2mem77, align 4
  %.reload76 = load float, float* %.reg2mem74, align 4
  %102 = fadd float %.reload76, 2.000000e+00
  store float %102, float* %.reg2mem79, align 4
  %.reload13 = load i8**, i8*** %.reg2mem11, align 8
  %103 = load i8*, i8** %.reload13, align 8
  store double 0.000000e+00, double* %.reg2mem99, align 8
  indirectbr i8* %103, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"3":                                              ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload100 = load double, double* %.reg2mem99, align 8
  store double %.reload100, double* %.reg2mem81, align 8
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  %104 = load i8*, i8** %.reload16, align 8
  indirectbr i8* %104, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

codeRepl:                                         ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast = bitcast float* %.loc to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %lt.cast9 = bitcast i32* %.loc1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast9)
  %lt.cast10 = bitcast i32* %.loc2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast10)
  %lt.cast11 = bitcast i32* %.loc3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast11)
  %lt.cast12 = bitcast i32* %.loc4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast12)
  store i64 1996855465712537073, i64* %63, align 8
  %105 = call i8** @lk1507460811145017318(i64* %63)
  %106 = load i8*, i8** %105, align 8
  %107 = bitcast i8* %106 to i1 (double, float*, float, float, float*, float, float*, i32*, i32*, i32*, i32*)*
  %.reload75 = load float, float* %.reg2mem74, align 4
  %.reload78 = load float, float* %.reg2mem77, align 4
  %.reload80 = load float, float* %.reg2mem79, align 4
  %.reload83 = load double, double* %.reg2mem81, align 8
  %targetBlock = call i1 %107(double %.reload83, float* %1, float %.reload80, float %.reload78, float* %2, float %.reload75, float* %.loc, i32* %.loc1, i32* %.loc2, i32* %.loc3, i32* %.loc4)
  %.reload = load float, float* %.loc, align 4
  store float %.reload, float* %.reload.reg2mem, align 4
  %.reload5 = load i32, i32* %.loc1, align 4
  store i32 %.reload5, i32* %.reload5.reg2mem, align 4
  %.reload6 = load i32, i32* %.loc2, align 4
  store i32 %.reload6, i32* %.reload6.reg2mem, align 4
  %.reload7 = load i32, i32* %.loc3, align 4
  store i32 %.reload7, i32* %.reload7.reg2mem, align 4
  %.reload8 = load i32, i32* %.loc4, align 4
  store i32 %.reload8, i32* %.reload8.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast9)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast10)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast11)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast12)
  %.reload21 = load i8**, i8*** %.reg2mem20, align 8
  %.reload30 = load i8**, i8*** %.reg2mem27, align 8
  %108 = select i1 %targetBlock, i8** %.reload21, i8** %.reload30
  %109 = load i8*, i8** %108, align 8
  indirectbr i8* %109, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"5":                                              ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload6.reload = load i32, i32* %.reload6.reg2mem, align 4
  %110 = mul nsw i32 %.reload6.reload, 80
  %.reload5.reload = load i32, i32* %.reload5.reg2mem, align 4
  %111 = and i32 %110, %.reload5.reload
  %112 = or i32 %110, %.reload5.reload
  %113 = add i32 %111, %112
  %114 = sext i32 %113 to i64
  store i64 %114, i64* %.reg2mem87, align 8
  %.reload89 = load i64, i64* %.reg2mem87, align 8
  %115 = getelementptr inbounds float, float* %4, i64 %.reload89
  store float* %115, float** %.reg2mem90, align 8
  %.reload92 = load float*, float** %.reg2mem90, align 8
  %116 = load float, float* %.reload92, align 4, !tbaa !10
  %.reload.reload84 = load float, float* %.reload.reg2mem, align 4
  %117 = fcmp ogt float %.reload.reload84, %116
  %.reload25 = load i8**, i8*** %.reg2mem23, align 8
  %.reload29 = load i8**, i8*** %.reg2mem27, align 8
  %118 = select i1 %117, i8** %.reload25, i8** %.reload29
  %119 = load i8*, i8** %118, align 8
  indirectbr i8* %119, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"6":                                              ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload.reload = load float, float* %.reload.reg2mem, align 4
  %.reload91 = load float*, float** %.reg2mem90, align 8
  store float %.reload.reload, float* %.reload91, align 4, !tbaa !10
  %120 = load i8*, i8** @CHARS, align 8, !tbaa !14
  %.reload7.reload86 = load i32, i32* %.reload7.reg2mem, align 4
  %121 = icmp sgt i32 %.reload7.reload86, 0
  %.reload7.reload85 = load i32, i32* %.reload7.reg2mem, align 4
  %122 = select i1 %121, i32 %.reload7.reload85, i32 0
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %120, i64 %123
  %125 = load i8, i8* %124, align 1, !tbaa !16
  %.reload88 = load i64, i64* %.reg2mem87, align 8
  %126 = getelementptr inbounds i8, i8* %3, i64 %.reload88
  store i8 %125, i8* %126, align 1, !tbaa !16
  %.reload28 = load i8**, i8*** %.reg2mem27, align 8
  %127 = load i8*, i8** %.reload28, align 8
  indirectbr i8* %127, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"7":                                              ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload82 = load double, double* %.reg2mem81, align 8
  %128 = fadd double %.reload82, 2.000000e-02
  %129 = fptrunc double %128 to float
  %130 = fpext float %129 to double
  %131 = fcmp olt double %130, 6.280000e+00
  %.reload12 = load i8**, i8*** %.reg2mem11, align 8
  %.reload34 = load i8**, i8*** %.reg2mem32, align 8
  %132 = select i1 %131, i8** %.reload12, i8** %.reload34
  %133 = load i8*, i8** %132, align 8
  store double %130, double* %.reg2mem99, align 8
  indirectbr i8* %133, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

codeRepl13:                                       ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast19 = bitcast i1* %.loc14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast19)
  %lt.cast20 = bitcast i1* %.loc15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast20)
  store i64 1996855465712537075, i64* %63, align 8
  %134 = call i8** @lk1507460811145017318(i64* %63)
  %135 = load i8*, i8** %134, align 8
  %136 = bitcast i8* %135 to i1 (i32, i1*, i1*)*
  %.reload8.reload = load i32, i32* %.reload8.reg2mem, align 4
  %targetBlock16 = call i1 %136(i32 %.reload8.reload, i1* %.loc14, i1* %.loc15)
  %.reload17 = load i1, i1* %.loc14, align 1
  store i1 %.reload17, i1* %.reload17.reg2mem, align 1
  %.reload18 = load i1, i1* %.loc15, align 1
  store i1 %.reload18, i1* %.reload18.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast19)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast20)
  %.reload37 = load i8**, i8*** %.reg2mem36, align 8
  %.reload53 = load i8**, i8*** %.reg2mem52, align 8
  %137 = select i1 %targetBlock16, i8** %.reload37, i8** %.reload53
  %138 = load i8*, i8** %137, align 8
  indirectbr i8* %138, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

codeRepl21:                                       ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %lt.cast25 = bitcast i1* %.loc22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast25)
  store i64 1996855465712537072, i64* %63, align 8
  %139 = call i8** @lk1507460811145017318(i64* %63)
  %140 = load i8*, i8** %139, align 8
  %141 = bitcast i8* %140 to i1 (i32, i1*)*
  %.reload7.reload = load i32, i32* %.reload7.reg2mem, align 4
  %targetBlock23 = call i1 %141(i32 %.reload7.reload, i1* %.loc22)
  %.reload24 = load i1, i1* %.loc22, align 1
  store i1 %.reload24, i1* %.reload24.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast25)
  %.reload40 = load i8**, i8*** %.reg2mem39, align 8
  %.reload43 = load i8**, i8*** %.reg2mem42, align 8
  %142 = select i1 %targetBlock23, i8** %.reload43, i8** %.reload40
  %143 = load i8*, i8** %142, align 8
  indirectbr i8* %143, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"10":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %144 = sub i64 3, 1
  %.reload17.reload94 = load i1, i1* %.reload17.reg2mem, align 1
  %.reload18.reload96 = load i1, i1* %.reload18.reg2mem, align 1
  %145 = and i1 %.reload18.reload96, %.reload17.reload94
  %146 = or i1 %.reload18.reload96, %.reload17.reload94
  %147 = add i1 %145, %146
  %148 = mul i64 118, 44
  %149 = mul i64 65, 30
  %150 = add i64 %65, -5060542698934545698
  %151 = add i64 4950378322926627985, %65
  %152 = add i64 %151, 8435823051848377933
  %153 = add i64 %24, 7187634604127749577
  %154 = xor i64 7187634604127749577, %24
  %155 = and i64 7187634604127749577, %24
  %156 = mul i64 2, %155
  %157 = add i64 %154, %156
  %158 = or i64 %65, -7218012441817079901
  %159 = xor i64 %65, -1
  %160 = and i64 %159, 5621453473935729409
  %161 = and i64 %65, -5621453473935729410
  %162 = or i64 %160, %161
  %163 = xor i64 -3037926662190154590, %162
  %164 = xor i64 %65, -1
  %165 = or i64 7218012441817079900, %164
  %166 = xor i64 %165, -1
  %167 = and i64 %166, -1
  %168 = or i64 %163, %167
  %169 = xor i64 1912225193396077643, %158
  %170 = xor i64 %169, %152
  %171 = xor i64 %170, %150
  %172 = xor i64 %171, %168
  %173 = xor i64 %172, %157
  %174 = xor i64 %173, %153
  %175 = and i64 %38, -5414680213266308208
  %176 = xor i64 %38, -1
  %177 = xor i64 -5414680213266308208, %176
  %178 = and i64 %177, -5414680213266308208
  %179 = add i64 %22, -4008544367435052145
  %180 = add i64 3580743348504797571, %22
  %181 = add i64 %180, -7589287715939849716
  %182 = xor i64 -1564049464695119298, %179
  %183 = xor i64 %182, %181
  %184 = xor i64 %183, %178
  %185 = xor i64 %184, %175
  %186 = mul i64 %174, %185
  %187 = add i64 %186, 9
  %188 = add i64 40, 48
  %189 = sdiv i64 39, 114
  %190 = sdiv i64 98, 103
  %191 = and i64 %8, -3986855270243414136
  %192 = xor i64 %8, -1
  %193 = xor i64 -3986855270243414136, %192
  %194 = and i64 %193, -3986855270243414136
  %195 = or i64 %24, -7467765448731424416
  %196 = and i64 -7467765448731424416, %24
  %197 = xor i64 -7467765448731424416, %24
  %198 = or i64 %196, %197
  %199 = add i64 %12, 6817485691110163508
  %200 = add i64 2117302350861748843, %12
  %201 = sub i64 %200, -4700183340248414665
  %202 = xor i64 %198, %199
  %203 = xor i64 %202, %191
  %204 = xor i64 %203, %194
  %205 = xor i64 %204, %201
  %206 = xor i64 %205, -9163173664788749595
  %207 = xor i64 %206, %195
  %208 = or i64 %30, 2158673470585912940
  %209 = and i64 2158673470585912940, %30
  %210 = xor i64 2158673470585912940, %30
  %211 = or i64 %209, %210
  %212 = or i64 %40, 7668580895518921615
  %213 = and i64 7668580895518921615, %40
  %214 = xor i64 7668580895518921615, %40
  %215 = or i64 %213, %214
  %216 = and i64 %12, 213103962434285458
  %217 = or i64 -213103962434285459, %12
  %218 = sub i64 %217, -213103962434285459
  %219 = xor i64 %216, -333262074370786457
  %220 = xor i64 %219, %215
  %221 = xor i64 %220, %208
  %222 = xor i64 %221, %212
  %223 = xor i64 %222, %218
  %224 = xor i64 %223, %211
  %225 = mul i64 %207, %224
  %226 = sub i64 2590234599060492620, %225
  %227 = sub i64 117, 110
  %.reload33 = load i8**, i8*** %.reg2mem32, align 8
  %.reload47 = load i8**, i8*** %.reg2mem45, align 8
  %.reload24.reload = load i1, i1* %.reload24.reg2mem, align 1
  %228 = select i1 %.reload24.reload, i8** %.reload47, i8** %.reload33
  %229 = load i8*, i8** %228, align 8
  store i1 %147, i1* %.reg2mem101, align 1
  indirectbr i8* %229, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"11":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %230 = sub i64 2294124275970412650, 2294124275970412648
  %.reload17.reload93 = load i1, i1* %.reload17.reg2mem, align 1
  %.reload18.reload95 = load i1, i1* %.reload18.reg2mem, align 1
  %231 = sub i1 %.reload18.reload95, true
  %232 = add i1 %231, %.reload17.reload93
  %233 = add i1 %232, true
  %234 = mul i64 118, 44
  %235 = mul i64 65, 30
  %236 = sub i64 -9200570818401444679, -9200570818401444730
  %237 = add i64 40, 48
  %238 = sdiv i64 39, 114
  %239 = sdiv i64 98, 103
  %240 = and i64 %30, -4473150524352869559
  %241 = or i64 4473150524352869558, %30
  %242 = sub i64 %241, 4473150524352869558
  %243 = and i64 %26, 1346010809069382492
  %244 = xor i64 %26, -1
  %245 = or i64 -1346010809069382493, %244
  %246 = xor i64 %245, -1
  %247 = and i64 %246, -1
  %248 = xor i64 %240, %243
  %249 = xor i64 %248, %242
  %250 = xor i64 %249, -1737934717822257043
  %251 = xor i64 %250, %247
  %252 = add i64 %74, 5439119043531882155
  %253 = and i64 5439119043531882155, %74
  %254 = or i64 5439119043531882155, %74
  %255 = add i64 %253, %254
  %256 = and i64 %6, 3661529996196796764
  %257 = xor i64 %6, -1
  %258 = xor i64 3661529996196796764, %257
  %259 = and i64 %258, 3661529996196796764
  %260 = or i64 %16, 7755428334739511123
  %261 = and i64 7755428334739511123, %16
  %262 = xor i64 7755428334739511123, %16
  %263 = or i64 %261, %262
  %264 = xor i64 %255, %263
  %265 = xor i64 %264, %260
  %266 = xor i64 %265, %256
  %267 = xor i64 %266, %259
  %268 = xor i64 %267, 5594160110917840446
  %269 = xor i64 %268, %252
  %270 = mul i64 %251, %269
  %271 = or i64 %42, 5739259344073849422
  %272 = xor i64 %42, -1
  %273 = and i64 5739259344073849422, %272
  %274 = add i64 %273, %42
  %275 = add i64 %14, 6631646706602710724
  %276 = and i64 6631646706602710724, %14
  %277 = or i64 6631646706602710724, %14
  %278 = add i64 %276, %277
  %279 = xor i64 %274, %275
  %280 = xor i64 %279, %271
  %281 = xor i64 %280, 3023552717606885061
  %282 = xor i64 %281, %278
  %283 = or i64 %10, -5831815785474084790
  %284 = xor i64 %10, -1
  %285 = and i64 %284, 2038375694669769193
  %286 = and i64 %10, -2038375694669769194
  %287 = or i64 %285, %286
  %288 = xor i64 -5523390528905160285, %287
  %289 = xor i64 %10, -1
  %290 = or i64 5831815785474084789, %289
  %291 = xor i64 %290, -1
  %292 = and i64 %291, -1
  %293 = or i64 %288, %292
  %294 = and i64 %38, 5562662596008564223
  %295 = xor i64 %38, -1
  %296 = xor i64 5562662596008564223, %295
  %297 = and i64 %296, 5562662596008564223
  %298 = or i64 %14, -6587679036945280319
  %299 = xor i64 %14, -1
  %300 = and i64 -6587679036945280319, %299
  %301 = add i64 %300, %14
  %302 = xor i64 2879472249323854617, %283
  %303 = xor i64 %302, %297
  %304 = xor i64 %303, %294
  %305 = xor i64 %304, %301
  %306 = xor i64 %305, %293
  %307 = xor i64 %306, %298
  %308 = mul i64 %282, %307
  %309 = sub i64 %270, %308
  %310 = add i64 117, -110
  %.reload46 = load i8**, i8*** %.reg2mem45, align 8
  %311 = load i8*, i8** %.reload46, align 8
  store i1 %233, i1* %.reg2mem101, align 1
  indirectbr i8* %311, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"12":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload102 = load i1, i1* %.reg2mem101, align 1
  store i1 %.reload102, i1* %.reg2mem97, align 1
  %.reload50 = load i8**, i8*** %.reg2mem49, align 8
  %312 = load i8*, i8** %.reload50, align 8
  indirectbr i8* %312, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

codeRepl26:                                       ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %63, align 8
  %313 = call i8** @lk1507460811145017318(i64* %63)
  %314 = load i8*, i8** %313, align 8
  %315 = bitcast i8* %314 to void ()*
  call void %315()
  %.reload57 = load i8**, i8*** %.reg2mem55, align 8
  %316 = load i8*, i8** %.reload57, align 8
  %.reload98 = load i1, i1* %.reg2mem97, align 1
  store i1 %.reload98, i1* %.reg2mem103, align 1
  indirectbr i8* %316, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"14":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload17.reload = load i1, i1* %.reload17.reg2mem, align 1
  %.reload18.reload = load i1, i1* %.reload18.reg2mem, align 1
  %317 = add i1 %.reload18.reload, %.reload17.reload
  %.reload56 = load i8**, i8*** %.reg2mem55, align 8
  %318 = load i8*, i8** %.reload56, align 8
  store i1 %317, i1* %.reg2mem103, align 1
  indirectbr i8* %318, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"15":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload104 = load i1, i1* %.reg2mem103, align 1
  %.reload60 = load i8**, i8*** %.reg2mem59, align 8
  %.reload64 = load i8**, i8*** %.reg2mem62, align 8
  %319 = select i1 %.reload104, i8** %.reload60, i8** %.reload64
  %320 = load i8*, i8** %319, align 8
  indirectbr i8* %320, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"16":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %321 = mul i32 126, 54
  %322 = and i64 %26, 7818702022188596591
  %323 = or i64 -7818702022188596592, %26
  %324 = sub i64 %323, -7818702022188596592
  %325 = and i64 %32, -6438798442948364974
  %326 = xor i64 %32, -1
  %327 = xor i64 -6438798442948364974, %326
  %328 = and i64 %327, -6438798442948364974
  %329 = add i64 %28, 7810827018129002044
  %330 = add i64 -3451609134233919787, %28
  %331 = sub i64 %330, 7184307921346629785
  %332 = xor i64 %325, %322
  %333 = xor i64 %332, 1407100434356217469
  %334 = xor i64 %333, %328
  %335 = xor i64 %334, %324
  %336 = xor i64 %335, %331
  %337 = xor i64 %336, %329
  %338 = and i64 %38, 3775271489818313657
  %339 = xor i64 %38, -1
  %340 = xor i64 3775271489818313657, %339
  %341 = and i64 %340, 3775271489818313657
  %342 = or i64 %6, -5285488748621255054
  %343 = xor i64 %6, -1
  %344 = and i64 %343, -5291388880196514531
  %345 = and i64 %6, 5291388880196514530
  %346 = or i64 %344, %345
  %347 = xor i64 15514270422033263, %346
  %348 = xor i64 %6, -1
  %349 = or i64 5285488748621255053, %348
  %350 = xor i64 %349, -1
  %351 = and i64 %350, -1
  %352 = or i64 %347, %351
  %353 = xor i64 %352, %342
  %354 = xor i64 %353, %341
  %355 = xor i64 %354, 3334065483641910301
  %356 = xor i64 %355, %338
  %357 = mul i64 %337, %356
  %358 = trunc i64 %357 to i32
  %359 = add i32 %358, 33
  %360 = add i64 %40, -3447420421571103767
  %361 = add i64 4631471961132407104, %40
  %362 = sub i64 %361, 8078892382703510871
  %363 = and i64 %12, 8912587183936187943
  %364 = or i64 -8912587183936187944, %12
  %365 = sub i64 %364, -8912587183936187944
  %366 = xor i64 %365, %362
  %367 = xor i64 %366, %360
  %368 = xor i64 %367, %363
  %369 = xor i64 %368, -1382167529508948679
  %370 = add i64 %34, 468806690727364183
  %371 = and i64 468806690727364183, %34
  %372 = or i64 468806690727364183, %34
  %373 = add i64 %371, %372
  %374 = or i64 %14, -204083496790596457
  %375 = xor i64 %14, -1
  %376 = and i64 -204083496790596457, %375
  %377 = add i64 %376, %14
  %378 = or i64 %71, 6596429217027601624
  %379 = xor i64 %71, -1
  %380 = and i64 %379, 1194699764500924584
  %381 = and i64 %71, -1194699764500924585
  %382 = or i64 %380, %381
  %383 = xor i64 5413138148519722096, %382
  %384 = xor i64 %71, -1
  %385 = or i64 -6596429217027601625, %384
  %386 = xor i64 %385, -1
  %387 = and i64 %386, -1
  %388 = or i64 %383, %387
  %389 = xor i64 %373, 1656801825297669256
  %390 = xor i64 %389, %374
  %391 = xor i64 %390, %377
  %392 = xor i64 %391, %378
  %393 = xor i64 %392, %370
  %394 = xor i64 %393, %388
  %395 = mul i64 %369, %394
  %396 = trunc i64 %395 to i32
  %397 = add i32 -1982104108, %396
  %398 = add i32 126, 33
  %399 = mul i32 49, 1
  %400 = mul i32 15, 103
  %401 = add i64 %38, 5330821338565158604
  %402 = sub i64 0, %38
  %403 = sub i64 5330821338565158604, %402
  %404 = or i64 %22, 1555724809497604070
  %405 = and i64 1555724809497604070, %22
  %406 = xor i64 1555724809497604070, %22
  %407 = or i64 %405, %406
  %408 = xor i64 %404, -5362615948086309697
  %409 = xor i64 %408, %407
  %410 = xor i64 %409, %403
  %411 = xor i64 %410, %401
  %412 = or i64 %18, -7125699939831839456
  %413 = xor i64 %18, -1
  %414 = and i64 -7125699939831839456, %413
  %415 = add i64 %414, %18
  %416 = and i64 %34, 4992728509216944098
  %417 = xor i64 %34, -1
  %418 = xor i64 4992728509216944098, %417
  %419 = and i64 %418, 4992728509216944098
  %420 = xor i64 %415, %416
  %421 = xor i64 %420, %419
  %422 = xor i64 %421, 2192110065417795664
  %423 = xor i64 %422, %412
  %424 = mul i64 %411, %423
  %425 = trunc i64 %424 to i32
  %426 = sub i32 963429399, %425
  %427 = and i64 %71, 198033044325606516
  %428 = xor i64 %71, -1
  %429 = xor i64 198033044325606516, %428
  %430 = and i64 %429, 198033044325606516
  %431 = add i64 %28, -3481668808158879012
  %432 = add i64 1677042274504405868, %28
  %433 = sub i64 %432, 5158711082663284880
  %434 = xor i64 %433, %431
  %435 = xor i64 %434, %430
  %436 = xor i64 %435, %427
  %437 = xor i64 %436, 5265861247039900883
  %438 = or i64 %71, 243520332586214868
  %439 = xor i64 %71, -1
  %440 = and i64 %439, 1099438688583787214
  %441 = and i64 %71, -1099438688583787215
  %442 = or i64 %440, %441
  %443 = xor i64 873933461100513050, %442
  %444 = xor i64 %71, -1
  %445 = or i64 -243520332586214869, %444
  %446 = xor i64 %445, -1
  %447 = and i64 %446, -1
  %448 = or i64 %443, %447
  %449 = add i64 %16, 6896835993466775581
  %450 = add i64 -7018466584226403141, %16
  %451 = add i64 %450, -4531441496016372894
  %452 = xor i64 %451, %448
  %453 = xor i64 %452, %438
  %454 = xor i64 %453, %449
  %455 = xor i64 %454, -7774004836405415014
  %456 = mul i64 %437, %455
  %457 = trunc i64 %456 to i32
  %458 = add i32 5, %457
  %459 = sdiv i32 23, 63
  %.reload63 = load i8**, i8*** %.reg2mem62, align 8
  %460 = load i8*, i8** %.reload63, align 8
  indirectbr i8* %460, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"17":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload67 = load i8**, i8*** %.reg2mem66, align 8
  %461 = load i8*, i8** %.reload67, align 8
  store i32 0, i32* %.reg2mem105, align 4
  indirectbr i8* %461, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %"3", label %codeRepl, label %"5", label %"6", label %"7", label %codeRepl13, label %codeRepl21, label %"10", label %"11", label %"12", label %codeRepl26, label %"14", label %"15", label %"16", label %"17", label %"18"]

"18":                                             ; preds = %"17", %"16", %"15", %"14", %codeRepl26, %"12", %"11", %"10", %codeRepl21, %codeRepl13, %"7", %"6", %"5", %codeRepl, %"3", %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload106 = load i32, i32* %.reg2mem105, align 4
  ret i32 %.reload106
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double) #8

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double) #8

declare i32 @"\01_usleep"(i32) local_unnamed_addr #5

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render..split(i64 %0, i64* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = and i64 %0, -8082807294142584116
  %3 = or i64 8082807294142584115, %0
  %4 = sub i64 %3, 8082807294142584115
  %5 = and i64 %0, 3808003831184126871
  %6 = xor i64 %0, -1
  %7 = or i64 -3808003831184126872, %6
  %8 = xor i64 %7, -1
  %9 = and i64 %8, -1
  %10 = or i64 %0, 4999862401474963064
  %11 = xor i64 %0, -1
  %12 = and i64 %11, -5016654461301260035
  %13 = and i64 %0, 5016654461301260034
  %14 = or i64 %12, %13
  %15 = xor i64 -71398961524660603, %14
  %16 = xor i64 %0, -1
  %17 = or i64 -4999862401474963065, %16
  %18 = xor i64 %17, -1
  %19 = and i64 %18, -1
  %20 = or i64 %15, %19
  %21 = xor i64 %5, -5670055717449282027
  %22 = xor i64 %21, %4
  %23 = xor i64 %22, %10
  %24 = xor i64 %23, %20
  %25 = xor i64 %24, %9
  %26 = xor i64 %25, %2
  %27 = add i64 %0, -3755927998815885619
  %28 = xor i64 -3755927998815885619, %0
  %29 = and i64 -3755927998815885619, %0
  %30 = mul i64 2, %29
  %31 = add i64 %28, %30
  %32 = add i64 %0, 5321875013829964050
  %33 = and i64 5321875013829964050, %0
  %34 = or i64 5321875013829964050, %0
  %35 = add i64 %33, %34
  %36 = xor i64 %32, %27
  %37 = xor i64 %36, %31
  %38 = xor i64 %37, %35
  %39 = xor i64 %38, 2653753795056908362
  %40 = mul i64 %26, %39
  %41 = call i64 @h11804894491772278134(i64 %40)
  %42 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %41
  store i8* blockaddress(@render..split, %loopEnd), i8** %42, align 8
  %43 = call i64 @h11804894491772278134(i64 595012245)
  %44 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %43
  store i8* blockaddress(@render..split, %BogusBasicBlock), i8** %44, align 8
  %45 = call i64 @h11804894491772278134(i64 595012224)
  %46 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %45
  store i8* blockaddress(@render..split, %defaultSwitchBasicBlock), i8** %46, align 8
  %47 = call i64 @h11804894491772278134(i64 595012154)
  %48 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %47
  store i8* blockaddress(@render..split, %.exitStub1), i8** %48, align 8
  %49 = call i64 @h11804894491772278134(i64 595012218)
  %50 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %49
  store i8* blockaddress(@render..split, %.split), i8** %50, align 8
  %51 = or i64 %0, 2665407536757205189
  %52 = xor i64 %0, -1
  %53 = and i64 2665407536757205189, %52
  %54 = add i64 %53, %0
  %55 = add i64 %0, -7746088707306338009
  %56 = add i64 -6083875523505266670, %0
  %57 = add i64 %56, -1662213183801071339
  %58 = add i64 %0, -2302321127194982673
  %59 = and i64 -2302321127194982673, %0
  %60 = or i64 -2302321127194982673, %0
  %61 = add i64 %59, %60
  %62 = xor i64 %54, %51
  %63 = xor i64 %62, %58
  %64 = xor i64 %63, %61
  %65 = xor i64 %64, -6917755510337564015
  %66 = xor i64 %65, %57
  %67 = xor i64 %66, %55
  %68 = add i64 %0, -2362775177369575944
  %69 = and i64 -2362775177369575944, %0
  %70 = or i64 -2362775177369575944, %0
  %71 = add i64 %69, %70
  %72 = and i64 %0, -5427663625343625807
  %73 = or i64 5427663625343625806, %0
  %74 = sub i64 %73, 5427663625343625806
  %75 = and i64 %0, -880082937179228629
  %76 = xor i64 %0, -1
  %77 = xor i64 -880082937179228629, %76
  %78 = and i64 %77, -880082937179228629
  %79 = xor i64 %75, %68
  %80 = xor i64 %79, %78
  %81 = xor i64 %80, -2967844423302123572
  %82 = xor i64 %81, %72
  %83 = xor i64 %82, %74
  %84 = xor i64 %83, %71
  %85 = mul i64 %67, %84
  %86 = call i64 @h11804894491772278134(i64 %85)
  %87 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %86
  store i8* blockaddress(@render..split, %.exitStub), i8** %87, align 8
  %88 = call i64 @h11804894491772278134(i64 595012177)
  %89 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %88
  store i8* blockaddress(@render..split, %EntryBasicBlockSplit), i8** %89, align 8
  %90 = call i64 @h11804894491772278134(i64 595012223)
  %91 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %90
  store i8* blockaddress(@render..split, %loopStart), i8** %91, align 8
  %lookupTable = alloca [9 x i32], align 4
  %92 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %92, align 4
  %93 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %93, align 4
  %94 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %94, align 4
  %95 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %95, align 4
  %96 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %96, align 4
  %97 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %97, align 4
  %98 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %99 = add i64 %0, 2437210084701865149
  %100 = sub i64 0, %0
  %101 = sub i64 2437210084701865149, %100
  %102 = add i64 %0, 70064638996851944
  %103 = xor i64 70064638996851944, %0
  %104 = and i64 70064638996851944, %0
  %105 = mul i64 2, %104
  %106 = add i64 %103, %105
  %107 = add i64 %0, -3835501686473922372
  %108 = add i64 -4238618093638217830, %0
  %109 = add i64 %108, 403116407164295458
  %110 = xor i64 %101, %102
  %111 = xor i64 %110, %109
  %112 = xor i64 %111, %106
  %113 = xor i64 %112, %107
  %114 = xor i64 %113, 7840081346551158141
  %115 = xor i64 %114, %99
  %116 = or i64 %0, -7967209288756775866
  %117 = xor i64 %0, -1
  %118 = and i64 -7967209288756775866, %117
  %119 = add i64 %118, %0
  %120 = and i64 %0, 3327371482610652932
  %121 = xor i64 %0, -1
  %122 = xor i64 3327371482610652932, %121
  %123 = and i64 %122, 3327371482610652932
  %124 = add i64 %0, 1804792757966347078
  %125 = add i64 -8595936815101920879, %0
  %126 = add i64 %125, -8046014500641283659
  %127 = xor i64 %120, %119
  %128 = xor i64 %127, -1479320133029895297
  %129 = xor i64 %128, %123
  %130 = xor i64 %129, %124
  %131 = xor i64 %130, %116
  %132 = xor i64 %131, %126
  %133 = mul i64 %115, %132
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %98, align 4
  %135 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %135, align 4
  %136 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %136, align 4
  %dispatcher = alloca i32, align 4
  %137 = add i64 %0, -1274153521564658786
  %138 = sub i64 0, %0
  %139 = sub i64 -1274153521564658786, %138
  %140 = add i64 %0, -8096354307559232318
  %141 = sub i64 0, %0
  %142 = sub i64 -8096354307559232318, %141
  %143 = xor i64 %140, -2637916864192049789
  %144 = xor i64 %143, %137
  %145 = xor i64 %144, %142
  %146 = xor i64 %145, %139
  %147 = or i64 %0, 8585071375287949786
  %148 = xor i64 %0, -1
  %149 = and i64 %148, -6119725984849718626
  %150 = and i64 %0, 6119725984849718625
  %151 = or i64 %149, %150
  %152 = xor i64 -2578854710301193404, %151
  %153 = xor i64 %0, -1
  %154 = or i64 -8585071375287949787, %153
  %155 = xor i64 %154, -1
  %156 = and i64 %155, -1
  %157 = or i64 %152, %156
  %158 = and i64 %0, -4749494845824804232
  %159 = xor i64 %0, -1
  %160 = xor i64 -4749494845824804232, %159
  %161 = and i64 %160, -4749494845824804232
  %162 = xor i64 %147, %157
  %163 = xor i64 %162, 0
  %164 = xor i64 %163, %161
  %165 = xor i64 %164, %158
  %166 = mul i64 %146, %165
  %167 = trunc i64 %166 to i32
  store i32 %167, i32* %dispatcher, align 4
  store i32 595012223, i32* %1, align 4
  %168 = call i8** @bf777061424148142830(i32* %1)
  %169 = load i8*, i8** %168, align 8
  indirectbr i8* %169, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %170 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %171 = load i32, i32* %170, align 4
  %172 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %173 = load i32, i32* %172, align 4
  %174 = add i32 %171, 79604055
  %175 = add i32 %174, %173
  %176 = sub i32 %175, 79604055
  store i32 %176, i32* %dispatcher, align 4
  %177 = load i8*, i8** %87, align 8
  %178 = load i8, i8* %177, align 1
  %179 = and i8 %178, 1
  %180 = icmp eq i8 %179, 0
  %181 = mul i8 %178, %178
  %182 = add i8 %181, %178
  %183 = mul i8 %182, 3
  %184 = srem i8 %183, 2
  %185 = add i64 %86, 902163845427677692
  %186 = xor i64 902163845427677692, %86
  %187 = and i64 902163845427677692, %86
  %188 = mul i64 2, %187
  %189 = add i64 %186, %188
  %190 = and i64 %43, -6982494875822812335
  %191 = xor i64 %43, -1
  %192 = xor i64 -6982494875822812335, %191
  %193 = and i64 %192, -6982494875822812335
  %194 = add i64 %0, 7730023393869279474
  %195 = sub i64 0, %0
  %196 = sub i64 7730023393869279474, %195
  %197 = xor i64 %193, %194
  %198 = xor i64 %197, %189
  %199 = xor i64 %198, %190
  %200 = xor i64 %199, %196
  %201 = xor i64 %200, %185
  %202 = xor i64 %201, 6470798086565249947
  %203 = add i64 %43, -6910391934331450001
  %204 = and i64 -6910391934331450001, %43
  %205 = or i64 -6910391934331450001, %43
  %206 = add i64 %204, %205
  %207 = and i64 %90, 1140983142622275986
  %208 = or i64 -1140983142622275987, %90
  %209 = sub i64 %208, -1140983142622275987
  %210 = add i64 %86, -1333392176941108617
  %211 = and i64 -1333392176941108617, %86
  %212 = or i64 -1333392176941108617, %86
  %213 = add i64 %211, %212
  %214 = xor i64 %207, %206
  %215 = xor i64 %214, %210
  %216 = xor i64 %215, %213
  %217 = xor i64 %216, 0
  %218 = xor i64 %217, %203
  %219 = xor i64 %218, %209
  %220 = mul i64 %202, %219
  %221 = trunc i64 %220 to i8
  %222 = icmp eq i8 %184, %221
  %223 = or i1 %180, %222
  %224 = select i1 %223, i32 595012224, i32 595012114
  %225 = xor i32 %224, 146
  store i32 %225, i32* %1, align 4
  %226 = call i8** @bf777061424148142830(i32* %1)
  %227 = load i8*, i8** %226, align 8
  indirectbr i8* %227, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %228 = srem i64 %0, 2
  store i64 %228, i64* %.out, align 8
  %229 = icmp eq i64 %228, 0
  %230 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %231 = load i32, i32* %230, align 4
  %232 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %233 = load i32, i32* %232, align 4
  %234 = sub i32 %231, %233
  %235 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %238 = load i32, i32* %237, align 4
  %239 = sub i32 0, %238
  %240 = add i32 %236, %239
  %241 = select i1 %229, i32 %234, i32 %240
  store i32 %241, i32* %dispatcher, align 4
  %242 = load i8*, i8** %42, align 8
  %243 = load i8, i8* %242, align 1
  %244 = xor i8 %243, -2
  %245 = and i8 %244, %243
  %246 = icmp eq i8 %245, 1
  %247 = mul i8 %243, %243
  %248 = add i8 %247, %243
  %249 = srem i8 %248, 2
  %250 = icmp eq i8 %249, 0
  %251 = or i1 %246, %250
  %252 = select i1 %251, i32 595012154, i32 595012114
  %253 = add i64 %88, -3215940450646148578
  %254 = xor i64 -3215940450646148578, %88
  %255 = and i64 -3215940450646148578, %88
  %256 = mul i64 2, %255
  %257 = add i64 %254, %256
  %258 = add i64 %45, 3586228751577779439
  %259 = sub i64 0, %45
  %260 = sub i64 3586228751577779439, %259
  %261 = and i64 %90, 7069975032333201302
  %262 = xor i64 %90, -1
  %263 = or i64 -7069975032333201303, %262
  %264 = xor i64 %263, -1
  %265 = and i64 %264, -1
  %266 = xor i64 %257, -5201620944508040023
  %267 = xor i64 %266, %258
  %268 = xor i64 %267, %265
  %269 = xor i64 %268, %260
  %270 = xor i64 %269, %253
  %271 = xor i64 %270, %261
  %272 = and i64 %86, -1337968463889027161
  %273 = or i64 1337968463889027160, %86
  %274 = sub i64 %273, 1337968463889027160
  %275 = add i64 %43, 4521332689833400868
  %276 = and i64 4521332689833400868, %43
  %277 = or i64 4521332689833400868, %43
  %278 = add i64 %276, %277
  %279 = add i64 %0, 150873489817483133
  %280 = xor i64 150873489817483133, %0
  %281 = and i64 150873489817483133, %0
  %282 = mul i64 2, %281
  %283 = add i64 %280, %282
  %284 = xor i64 %283, 527063674066546664
  %285 = xor i64 %284, %272
  %286 = xor i64 %285, %279
  %287 = xor i64 %286, %275
  %288 = xor i64 %287, %278
  %289 = xor i64 %288, %274
  %290 = mul i64 %271, %289
  %291 = trunc i64 %290 to i32
  %292 = xor i32 %252, %291
  store i32 %292, i32* %1, align 4
  %293 = call i8** @bf777061424148142830(i32* %1)
  %294 = load i8*, i8** %293, align 8
  indirectbr i8* %294, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %295 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %295, align 4
  %296 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %296, align 4
  %297 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %297, align 4
  %298 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %298, align 4
  %299 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %299, align 4
  %300 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %301 = load i32, i32* %300, align 4
  store i32 %301, i32* %dispatcher, align 4
  %302 = load i8*, i8** %89, align 8
  %303 = load i8, i8* %302, align 1
  %304 = xor i8 %303, -1
  %305 = or i8 %304, 1
  %306 = xor i8 %303, -1
  %307 = sub i8 %305, %306
  %308 = icmp eq i8 %307, 0
  %309 = mul i8 %303, %303
  %310 = add i8 %309, %303
  %311 = mul i8 %310, 3
  %312 = srem i8 %311, 2
  %313 = and i64 %86, -671103039927721669
  %314 = xor i64 %86, -1
  %315 = or i64 671103039927721668, %314
  %316 = xor i64 %315, -1
  %317 = and i64 %316, -1
  %318 = add i64 %45, 387273330219202582
  %319 = add i64 -644477482694048907, %45
  %320 = sub i64 %319, -1031750812913251489
  %321 = xor i64 %317, %320
  %322 = xor i64 %321, %313
  %323 = xor i64 %322, %318
  %324 = xor i64 %323, 6251266353804593563
  %325 = and i64 %86, 3842032551183411428
  %326 = xor i64 %86, -1
  %327 = xor i64 3842032551183411428, %326
  %328 = and i64 %327, 3842032551183411428
  %329 = or i64 %47, 6923526788482848801
  %330 = and i64 6923526788482848801, %47
  %331 = xor i64 6923526788482848801, %47
  %332 = or i64 %330, %331
  %333 = xor i64 %329, 0
  %334 = xor i64 %333, %325
  %335 = xor i64 %334, %328
  %336 = xor i64 %335, %332
  %337 = mul i64 %324, %336
  %338 = trunc i64 %337 to i8
  %339 = icmp eq i8 %312, %338
  %340 = xor i1 %308, true
  %341 = or i64 %43, -4539444479085128365
  %342 = xor i64 %43, -1
  %343 = and i64 %342, 3724119409932207565
  %344 = and i64 %43, -3724119409932207566
  %345 = or i64 %343, %344
  %346 = xor i64 -959797151899037538, %345
  %347 = xor i64 %43, -1
  %348 = or i64 4539444479085128364, %347
  %349 = xor i64 %348, -1
  %350 = and i64 %349, -1
  %351 = or i64 %346, %350
  %352 = add i64 %90, -1163388298364417297
  %353 = add i64 4447963151789558636, %90
  %354 = add i64 %353, -5611351450153975933
  %355 = xor i64 %351, 107759102097081059
  %356 = xor i64 %355, %341
  %357 = xor i64 %356, %352
  %358 = xor i64 %357, %354
  %359 = and i64 %90, -3830097672363806730
  %360 = or i64 3830097672363806729, %90
  %361 = sub i64 %360, 3830097672363806729
  %362 = add i64 %47, -2875612877276128753
  %363 = sub i64 0, %47
  %364 = sub i64 -2875612877276128753, %363
  %365 = or i64 %49, -5489813953056476334
  %366 = xor i64 %49, -1
  %367 = and i64 %366, -5511951637410590987
  %368 = and i64 %49, 5511951637410590986
  %369 = or i64 %367, %368
  %370 = xor i64 23044096131579303, %369
  %371 = xor i64 %49, -1
  %372 = or i64 5489813953056476333, %371
  %373 = xor i64 %372, -1
  %374 = and i64 %373, -1
  %375 = or i64 %370, %374
  %376 = xor i64 %375, %362
  %377 = xor i64 %376, %364
  %378 = xor i64 %377, %359
  %379 = xor i64 %378, -1280335982055812405
  %380 = xor i64 %379, %365
  %381 = xor i64 %380, %361
  %382 = mul i64 %358, %381
  %383 = trunc i64 %382 to i1
  %384 = and i1 %340, %383
  %385 = and i1 %308, false
  %386 = or i1 %384, %385
  %387 = xor i1 %339, true
  %388 = and i1 %387, true
  %389 = and i1 %339, false
  %390 = or i1 %388, %389
  %391 = xor i1 %386, %390
  %392 = and i64 %90, 6500357506983563514
  %393 = xor i64 %90, -1
  %394 = or i64 -6500357506983563515, %393
  %395 = xor i64 %394, -1
  %396 = and i64 %395, -1
  %397 = add i64 %90, 5605293582481865124
  %398 = sub i64 0, %90
  %399 = sub i64 5605293582481865124, %398
  %400 = xor i64 %399, %392
  %401 = xor i64 %400, %396
  %402 = xor i64 %401, %397
  %403 = xor i64 %402, 4180803564585815583
  %404 = add i64 %90, -4483787810679650477
  %405 = sub i64 0, %90
  %406 = sub i64 -4483787810679650477, %405
  %407 = or i64 %86, -6692106771801024819
  %408 = xor i64 %86, -1
  %409 = and i64 %408, -1751597195064235443
  %410 = and i64 %86, 1751597195064235442
  %411 = or i64 %409, %410
  %412 = xor i64 4940958935855168640, %411
  %413 = xor i64 %86, -1
  %414 = or i64 6692106771801024818, %413
  %415 = xor i64 %414, -1
  %416 = and i64 %415, -1
  %417 = or i64 %412, %416
  %418 = and i64 %0, 1897352758005394718
  %419 = or i64 -1897352758005394719, %0
  %420 = sub i64 %419, -1897352758005394719
  %421 = xor i64 %417, %406
  %422 = xor i64 %421, %418
  %423 = xor i64 %422, %407
  %424 = xor i64 %423, 8144501153303686623
  %425 = xor i64 %424, %404
  %426 = xor i64 %425, %420
  %427 = mul i64 %403, %426
  %428 = trunc i64 %427 to i1
  %429 = xor i1 %308, %428
  %430 = xor i1 %339, true
  %431 = or i1 %429, %430
  %432 = xor i1 %431, true
  %433 = and i1 %432, true
  %434 = or i1 %391, %433
  %435 = select i1 %434, i32 595012114, i32 595012177
  %436 = add i64 %88, -4368568247882711221
  %437 = sub i64 0, %88
  %438 = add i64 4368568247882711221, %437
  %439 = sub i64 0, %438
  %440 = and i64 %86, -2858688612086681451
  %441 = xor i64 %86, -1
  %442 = xor i64 -2858688612086681451, %441
  %443 = and i64 %442, -2858688612086681451
  %444 = xor i64 %439, %443
  %445 = xor i64 %444, %440
  %446 = xor i64 %445, %436
  %447 = xor i64 %446, 6111787579725075327
  %448 = add i64 %41, 8993319291802198940
  %449 = xor i64 8993319291802198940, %41
  %450 = and i64 8993319291802198940, %41
  %451 = mul i64 2, %450
  %452 = add i64 %449, %451
  %453 = add i64 %41, 2784489314145143588
  %454 = and i64 2784489314145143588, %41
  %455 = or i64 2784489314145143588, %41
  %456 = add i64 %454, %455
  %457 = add i64 %41, 2116022865751103657
  %458 = and i64 2116022865751103657, %41
  %459 = or i64 2116022865751103657, %41
  %460 = add i64 %458, %459
  %461 = xor i64 %448, %452
  %462 = xor i64 %461, %456
  %463 = xor i64 %462, %460
  %464 = xor i64 %463, %453
  %465 = xor i64 %464, 913137998777640253
  %466 = xor i64 %465, %457
  %467 = mul i64 %447, %466
  %468 = trunc i64 %467 to i32
  %469 = xor i32 %435, %468
  store i32 %469, i32* %1, align 4
  %470 = call i8** @bf777061424148142830(i32* %1)
  %471 = load i8*, i8** %470, align 8
  indirectbr i8* %471, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %472 = load i8*, i8** %48, align 8
  %473 = load i8, i8* %472, align 1
  %474 = mul i8 %473, 2
  %475 = mul i8 %473, 2
  %476 = add i8 2, %475
  %477 = mul i8 %474, %476
  %478 = srem i8 %477, 4
  %479 = icmp eq i8 %478, 0
  %480 = mul i8 %473, %473
  %481 = add i8 %480, %473
  %482 = and i64 %90, 1450820135236016814
  %483 = xor i64 %90, -1
  %484 = xor i64 1450820135236016814, %483
  %485 = and i64 %484, 1450820135236016814
  %486 = add i64 %86, -3020283401903804831
  %487 = xor i64 -3020283401903804831, %86
  %488 = and i64 -3020283401903804831, %86
  %489 = mul i64 2, %488
  %490 = add i64 %487, %489
  %491 = xor i64 %485, %482
  %492 = xor i64 %491, %486
  %493 = xor i64 %492, %490
  %494 = xor i64 %493, 1078601600611820801
  %495 = sext i32 %dispatcher1 to i64
  %496 = add i64 %495, -2278948995130392471
  %497 = add i64 -110910767048396864, %495
  %498 = add i64 %497, -2168038228081995607
  %499 = add i64 %0, 7961851801744171412
  %500 = xor i64 7961851801744171412, %0
  %501 = and i64 7961851801744171412, %0
  %502 = mul i64 2, %501
  %503 = add i64 %500, %502
  %504 = add i64 %90, -5089353806615207653
  %505 = xor i64 -5089353806615207653, %90
  %506 = and i64 -5089353806615207653, %90
  %507 = mul i64 2, %506
  %508 = add i64 %505, %507
  %509 = xor i64 %496, %498
  %510 = xor i64 %509, %499
  %511 = xor i64 %510, 2995793083681781250
  %512 = xor i64 %511, %504
  %513 = xor i64 %512, %503
  %514 = xor i64 %513, %508
  %515 = mul i64 %494, %514
  %516 = trunc i64 %515 to i8
  %517 = srem i8 %481, %516
  %518 = icmp eq i8 %517, 0
  %519 = or i1 %479, %518
  %520 = select i1 %519, i32 595012245, i32 595012114
  %521 = xor i32 %520, 135
  store i32 %521, i32* %1, align 4
  %522 = call i8** @bf777061424148142830(i32* %1)
  %523 = load i8*, i8** %522, align 8
  indirectbr i8* %523, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %524 = load i8*, i8** %48, align 8
  %525 = load i8, i8* %524, align 1
  %526 = and i64 %86, 7920428081233351933
  %527 = or i64 -7920428081233351934, %86
  %528 = sub i64 %527, -7920428081233351934
  %529 = and i64 %86, 7333036697871435563
  %530 = xor i64 %86, -1
  %531 = or i64 -7333036697871435564, %530
  %532 = xor i64 %531, -1
  %533 = and i64 %532, -1
  %534 = xor i64 -3685129103570591813, %526
  %535 = xor i64 %534, %528
  %536 = xor i64 %535, %529
  %537 = xor i64 %536, %533
  %538 = add i64 %90, -574354663635994753
  %539 = add i64 -48940647945002506, %90
  %540 = add i64 %539, -525414015690992247
  %541 = add i64 %90, 9153626514597594052
  %542 = sub i64 0, %90
  %543 = add i64 -9153626514597594052, %542
  %544 = sub i64 0, %543
  %545 = add i64 %41, 7996863543275851076
  %546 = add i64 3579893322849051038, %41
  %547 = sub i64 %546, -4416970220426800038
  %548 = xor i64 %547, %541
  %549 = xor i64 %548, %538
  %550 = xor i64 %549, %544
  %551 = xor i64 %550, 2273346087576050406
  %552 = xor i64 %551, %545
  %553 = xor i64 %552, %540
  %554 = mul i64 %537, %553
  %555 = trunc i64 %554 to i8
  %556 = mul i8 %525, %555
  %557 = mul i8 %525, 2
  %558 = add i8 2, %557
  %559 = mul i8 %556, %558
  %560 = srem i8 %559, 4
  %561 = icmp eq i8 %560, 0
  %562 = mul i8 %525, %525
  %563 = add i8 %562, %525
  %564 = srem i8 %563, 2
  %565 = icmp eq i8 %564, 0
  %566 = and i1 %561, %565
  %567 = and i64 %47, -8919082743021248236
  %568 = xor i64 %47, -1
  %569 = or i64 8919082743021248235, %568
  %570 = xor i64 %569, -1
  %571 = and i64 %570, -1
  %572 = add i64 %49, -9043035251942745363
  %573 = add i64 -4485000204666030599, %49
  %574 = sub i64 %573, 4558035047276714764
  %575 = or i64 %88, -7365685746957229445
  %576 = xor i64 %88, -1
  %577 = and i64 %576, 6838491198234068805
  %578 = and i64 %88, -6838491198234068806
  %579 = or i64 %577, %578
  %580 = xor i64 -4098029001554762434, %579
  %581 = xor i64 %88, -1
  %582 = or i64 7365685746957229444, %581
  %583 = xor i64 %582, -1
  %584 = and i64 %583, -1
  %585 = or i64 %580, %584
  %586 = xor i64 -3999327806974142641, %572
  %587 = xor i64 %586, %574
  %588 = xor i64 %587, %567
  %589 = xor i64 %588, %575
  %590 = xor i64 %589, %585
  %591 = xor i64 %590, %571
  %592 = add i64 %88, -1625865872748735760
  %593 = and i64 -1625865872748735760, %88
  %594 = or i64 -1625865872748735760, %88
  %595 = add i64 %593, %594
  %596 = and i64 %86, 1374416622489383151
  %597 = xor i64 %86, -1
  %598 = xor i64 1374416622489383151, %597
  %599 = and i64 %598, 1374416622489383151
  %600 = xor i64 %595, %599
  %601 = xor i64 %600, -1558310135584234586
  %602 = xor i64 %601, %592
  %603 = xor i64 %602, %596
  %604 = mul i64 %591, %603
  %605 = trunc i64 %604 to i32
  %606 = select i1 %566, i32 %605, i32 595012223
  %607 = or i64 %45, -2125260554977848011
  %608 = and i64 -2125260554977848011, %45
  %609 = xor i64 -2125260554977848011, %45
  %610 = or i64 %608, %609
  %611 = add i64 %43, 8219245893268584618
  %612 = add i64 3763087571966834108, %43
  %613 = sub i64 %612, -4456158321301750510
  %614 = xor i64 %607, %613
  %615 = xor i64 %614, 506382201062642787
  %616 = xor i64 %615, %610
  %617 = xor i64 %616, %611
  %618 = or i64 %0, -526078485125780801
  %619 = and i64 -526078485125780801, %0
  %620 = xor i64 -526078485125780801, %0
  %621 = or i64 %619, %620
  %622 = sext i32 %dispatcher1 to i64
  %623 = or i64 %622, -5544341576238400665
  %624 = xor i64 %622, -1
  %625 = and i64 -5544341576238400665, %624
  %626 = add i64 %625, %622
  %627 = add i64 %86, 3012160453659549280
  %628 = add i64 -480919208276027024, %86
  %629 = add i64 %628, 3493079661935576304
  %630 = xor i64 %623, %626
  %631 = xor i64 %630, 6512522566964630839
  %632 = xor i64 %631, %621
  %633 = xor i64 %632, %627
  %634 = xor i64 %633, %629
  %635 = xor i64 %634, %618
  %636 = mul i64 %617, %635
  %637 = trunc i64 %636 to i32
  %638 = xor i32 %606, %637
  store i32 %638, i32* %1, align 4
  %639 = call i8** @bf777061424148142830(i32* %1)
  %640 = load i8*, i8** %639, align 8
  indirectbr i8* %640, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render..split.1(i1 %0) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012182)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@render..split.1, %loopEnd), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012106)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@render..split.1, %defaultSwitchBasicBlock), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012177)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@render..split.1, %BogusBasicBlock), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012098)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@render..split.1, %.exitStub1), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012160)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@render..split.1, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012209)
  %13 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %12
  store i8* blockaddress(@render..split.1, %.split), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012127)
  %15 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %14
  store i8* blockaddress(@render..split.1, %.exitStub), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012275)
  %17 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %16
  store i8* blockaddress(@render..split.1, %loopStart), i8** %17, align 8
  %lookupTable = alloca [9 x i32], align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %26, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012275, i32* %1, align 4
  %27 = call i8** @bf777061424148142830(i32* %1)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 %30, -1026846054
  %34 = sub i32 %33, %32
  %35 = add i32 %34, -1026846054
  store i32 %35, i32* %dispatcher, align 4
  %36 = load i8*, i8** %3, align 8
  %37 = load i8, i8* %36, align 1
  %38 = and i8 %37, 1
  %39 = icmp eq i8 %38, 0
  %40 = mul i8 %37, %37
  %41 = add i8 %40, %37
  %42 = mul i8 %41, 3
  %43 = add i64 %14, -8227058194391671574
  %44 = add i64 4228804091837397780, %14
  %45 = sub i64 %44, -5990881787480482262
  %46 = add i64 %14, 5145712167676833817
  %47 = add i64 4854082563605599518, %14
  %48 = add i64 %47, 291629604071234299
  %49 = and i64 %12, 143924497465923635
  %50 = xor i64 %12, -1
  %51 = or i64 -143924497465923636, %50
  %52 = xor i64 %51, -1
  %53 = and i64 %52, -1
  %54 = xor i64 %49, %46
  %55 = xor i64 %54, -7375660913254513661
  %56 = xor i64 %55, %53
  %57 = xor i64 %56, %48
  %58 = xor i64 %57, %43
  %59 = xor i64 %58, %45
  %60 = add i64 %8, 4630518381142897747
  %61 = and i64 4630518381142897747, %8
  %62 = or i64 4630518381142897747, %8
  %63 = add i64 %61, %62
  %64 = or i64 %10, 5140449455784664363
  %65 = xor i64 %10, -1
  %66 = and i64 5140449455784664363, %65
  %67 = add i64 %66, %10
  %68 = sext i32 %dispatcher1 to i64
  %69 = or i64 %68, 916474562330935237
  %70 = and i64 916474562330935237, %68
  %71 = xor i64 916474562330935237, %68
  %72 = or i64 %70, %71
  %73 = xor i64 %72, 4271103492793371990
  %74 = xor i64 %73, %67
  %75 = xor i64 %74, %69
  %76 = xor i64 %75, %60
  %77 = xor i64 %76, %63
  %78 = xor i64 %77, %64
  %79 = mul i64 %59, %78
  %80 = trunc i64 %79 to i8
  %81 = srem i8 %42, %80
  %82 = icmp eq i8 %81, 0
  %83 = or i1 %39, %82
  %84 = or i64 %12, 5850116036627033403
  %85 = and i64 5850116036627033403, %12
  %86 = xor i64 5850116036627033403, %12
  %87 = or i64 %85, %86
  %88 = add i64 %4, 4516217702699811917
  %89 = and i64 4516217702699811917, %4
  %90 = or i64 4516217702699811917, %4
  %91 = add i64 %89, %90
  %92 = xor i64 %87, %91
  %93 = xor i64 %92, %88
  %94 = xor i64 %93, 8023970269961077903
  %95 = xor i64 %94, %84
  %96 = and i64 %6, 1684642434945683106
  %97 = xor i64 %6, -1
  %98 = or i64 -1684642434945683107, %97
  %99 = xor i64 %98, -1
  %100 = and i64 %99, -1
  %101 = or i64 %4, 5197654595061552409
  %102 = xor i64 %4, -1
  %103 = and i64 5197654595061552409, %102
  %104 = add i64 %103, %4
  %105 = xor i64 %96, %100
  %106 = xor i64 %105, 475082515262707530
  %107 = xor i64 %106, %101
  %108 = xor i64 %107, %104
  %109 = mul i64 %95, %108
  %110 = trunc i64 %109 to i32
  %111 = select i1 %83, i32 595012127, i32 %110
  %112 = xor i32 %111, 73
  store i32 %112, i32* %1, align 4
  %113 = call i8** @bf777061424148142830(i32* %1)
  %114 = load i8*, i8** %113, align 8
  indirectbr i8* %114, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %115 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %118 = load i32, i32* %117, align 4
  %119 = sub i32 %116, %118
  %120 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = add i32 %121, -957987179
  %125 = sub i32 %124, %123
  %126 = sub i32 %125, -957987179
  %127 = select i1 %0, i32 %119, i32 %126
  store i32 %127, i32* %dispatcher, align 4
  %128 = load i8*, i8** %17, align 8
  %129 = load i8, i8* %128, align 1
  %130 = xor i8 %129, -1
  %131 = or i8 %130, 1
  %132 = xor i8 %129, -1
  %133 = sub i8 %131, %132
  %134 = icmp eq i8 %133, 0
  %135 = mul i8 %129, %129
  %136 = sub i8 0, %129
  %137 = sub i8 %135, %136
  %138 = mul i8 %137, 3
  %139 = srem i8 %138, 2
  %140 = icmp eq i8 %139, 0
  %141 = xor i1 %140, true
  %142 = and i1 %134, %141
  %143 = add i1 %142, %140
  %144 = and i64 %16, 4608567798530154549
  %145 = xor i64 %16, -1
  %146 = xor i64 4608567798530154549, %145
  %147 = and i64 %146, 4608567798530154549
  %148 = and i64 %14, 7086973856282325919
  %149 = or i64 -7086973856282325920, %14
  %150 = sub i64 %149, -7086973856282325920
  %151 = xor i64 %150, %147
  %152 = xor i64 %151, %148
  %153 = xor i64 %152, %144
  %154 = xor i64 %153, -8737849279130006299
  %155 = or i64 %10, 3835121461640866580
  %156 = xor i64 %10, -1
  %157 = and i64 %156, 5302596072161392585
  %158 = and i64 %10, -5302596072161392586
  %159 = or i64 %157, %158
  %160 = xor i64 8984555563901459677, %159
  %161 = xor i64 %10, -1
  %162 = or i64 -3835121461640866581, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = or i64 %160, %164
  %166 = add i64 %10, -6598197647886036928
  %167 = xor i64 -6598197647886036928, %10
  %168 = and i64 -6598197647886036928, %10
  %169 = mul i64 2, %168
  %170 = add i64 %167, %169
  %171 = xor i64 %166, -1566896283571777122
  %172 = xor i64 %171, %155
  %173 = xor i64 %172, %165
  %174 = xor i64 %173, %170
  %175 = mul i64 %154, %174
  %176 = trunc i64 %175 to i32
  %177 = select i1 %143, i32 595012160, i32 %176
  %178 = or i32 %177, 22
  %179 = and i32 %177, 22
  %180 = sub i32 %178, %179
  store i32 %180, i32* %1, align 4
  %181 = call i8** @bf777061424148142830(i32* %1)
  %182 = load i8*, i8** %181, align 8
  indirectbr i8* %182, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  %183 = and i64 %14, -7910807984138269453
  %184 = xor i64 %14, -1
  %185 = or i64 7910807984138269452, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = or i64 %4, -1859970782223025829
  %189 = xor i64 %4, -1
  %190 = and i64 %189, -1018152464373205534
  %191 = and i64 %4, 1018152464373205533
  %192 = or i64 %190, %191
  %193 = xor i64 1724533238718074041, %192
  %194 = xor i64 %4, -1
  %195 = or i64 1859970782223025828, %194
  %196 = xor i64 %195, -1
  %197 = and i64 %196, -1
  %198 = or i64 %193, %197
  %199 = add i64 %6, -2296362560605216162
  %200 = add i64 -5185638016044115743, %6
  %201 = sub i64 %200, -2889275455438899581
  %202 = xor i64 3851270933670951727, %198
  %203 = xor i64 %202, %188
  %204 = xor i64 %203, %201
  %205 = xor i64 %204, %199
  %206 = xor i64 %205, %183
  %207 = xor i64 %206, %187
  %208 = add i64 %2, -7144171459926475505
  %209 = xor i64 -7144171459926475505, %2
  %210 = and i64 -7144171459926475505, %2
  %211 = mul i64 2, %210
  %212 = add i64 %209, %211
  %213 = add i64 %2, -5332971986712694605
  %214 = add i64 -7783771696827128974, %2
  %215 = add i64 %214, 2450799710114434369
  %216 = or i64 %4, -1522336398943342919
  %217 = xor i64 %4, -1
  %218 = and i64 %217, -6523467220373837634
  %219 = and i64 %4, 6523467220373837633
  %220 = or i64 %218, %219
  %221 = xor i64 5739958930568889863, %220
  %222 = xor i64 %4, -1
  %223 = or i64 1522336398943342918, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = or i64 %221, %225
  %227 = xor i64 %216, %226
  %228 = xor i64 %227, 0
  %229 = xor i64 %228, %215
  %230 = xor i64 %229, %212
  %231 = xor i64 %230, %208
  %232 = xor i64 %231, %213
  %233 = mul i64 %207, %232
  %234 = trunc i64 %233 to i1
  ret i1 %234

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %235 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %236 = and i64 %2, 3055385609456371248
  %237 = xor i64 %2, -1
  %238 = xor i64 3055385609456371248, %237
  %239 = and i64 %238, 3055385609456371248
  %240 = or i64 %4, 4498884882645215006
  %241 = xor i64 %4, -1
  %242 = and i64 %241, 3039819295354149465
  %243 = and i64 %4, -3039819295354149466
  %244 = or i64 %242, %243
  %245 = xor i64 1459347139594763591, %244
  %246 = xor i64 %4, -1
  %247 = or i64 -4498884882645215007, %246
  %248 = xor i64 %247, -1
  %249 = and i64 %248, -1
  %250 = or i64 %245, %249
  %251 = xor i64 %240, -3626427424746241113
  %252 = xor i64 %251, %239
  %253 = xor i64 %252, %250
  %254 = xor i64 %253, %236
  %255 = add i64 %16, 7613676278501691456
  %256 = add i64 4480778266160843276, %16
  %257 = sub i64 %256, -3132898012340848180
  %258 = and i64 %14, 744133989043447171
  %259 = xor i64 %14, -1
  %260 = xor i64 744133989043447171, %259
  %261 = and i64 %260, 744133989043447171
  %262 = xor i64 7573928682903538665, %257
  %263 = xor i64 %262, %255
  %264 = xor i64 %263, %261
  %265 = xor i64 %264, %258
  %266 = mul i64 %254, %265
  %267 = trunc i64 %266 to i32
  store i32 %267, i32* %235, align 4
  %268 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %268, align 4
  %269 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %269, align 4
  %270 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %270, align 4
  %271 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %271, align 4
  %272 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %273 = load i32, i32* %272, align 4
  store i32 %273, i32* %dispatcher, align 4
  %274 = load i8*, i8** %17, align 8
  %275 = load i8, i8* %274, align 1
  %276 = xor i8 %275, -2
  %277 = and i8 %276, %275
  %278 = add i64 %12, 3699845038517781032
  %279 = sub i64 0, %12
  %280 = add i64 -3699845038517781032, %279
  %281 = sub i64 0, %280
  %282 = and i64 %12, -3023257659123232825
  %283 = xor i64 %12, -1
  %284 = xor i64 -3023257659123232825, %283
  %285 = and i64 %284, -3023257659123232825
  %286 = xor i64 %281, %278
  %287 = xor i64 %286, -8419958316438445939
  %288 = xor i64 %287, %282
  %289 = xor i64 %288, %285
  %290 = and i64 %14, 6738012654598839469
  %291 = xor i64 %14, -1
  %292 = xor i64 6738012654598839469, %291
  %293 = and i64 %292, 6738012654598839469
  %294 = add i64 %4, -1611290482170619912
  %295 = sub i64 0, %4
  %296 = sub i64 -1611290482170619912, %295
  %297 = xor i64 %294, %290
  %298 = xor i64 %297, %296
  %299 = xor i64 %298, 0
  %300 = xor i64 %299, %293
  %301 = mul i64 %289, %300
  %302 = trunc i64 %301 to i8
  %303 = icmp eq i8 %277, %302
  %304 = mul i8 %275, %275
  %305 = add i8 %304, %275
  %306 = add i64 %10, 3036800528298313482
  %307 = and i64 3036800528298313482, %10
  %308 = or i64 3036800528298313482, %10
  %309 = add i64 %307, %308
  %310 = and i64 %12, 1859794001915670533
  %311 = or i64 -1859794001915670534, %12
  %312 = sub i64 %311, -1859794001915670534
  %313 = or i64 %6, 3630148178115429813
  %314 = xor i64 %6, -1
  %315 = and i64 3630148178115429813, %314
  %316 = add i64 %315, %6
  %317 = xor i64 7644399960906663915, %313
  %318 = xor i64 %317, %316
  %319 = xor i64 %318, %309
  %320 = xor i64 %319, %306
  %321 = xor i64 %320, %312
  %322 = xor i64 %321, %310
  %323 = add i64 %12, 7019553836845628052
  %324 = add i64 8084708142391776641, %12
  %325 = sub i64 %324, 1065154305546148589
  %326 = sext i32 %dispatcher1 to i64
  %327 = and i64 %326, -8660402499281209571
  %328 = or i64 8660402499281209570, %326
  %329 = sub i64 %328, 8660402499281209570
  %330 = xor i64 %329, %325
  %331 = xor i64 %330, -8278043405222036919
  %332 = xor i64 %331, %323
  %333 = xor i64 %332, %327
  %334 = mul i64 %322, %333
  %335 = trunc i64 %334 to i8
  %336 = mul i8 %305, %335
  %337 = or i64 %2, -4358828418253464829
  %338 = and i64 -4358828418253464829, %2
  %339 = xor i64 -4358828418253464829, %2
  %340 = or i64 %338, %339
  %341 = and i64 %10, 9160490913282654753
  %342 = xor i64 %10, -1
  %343 = or i64 -9160490913282654754, %342
  %344 = xor i64 %343, -1
  %345 = and i64 %344, -1
  %346 = xor i64 %340, %341
  %347 = xor i64 %346, %337
  %348 = xor i64 %347, %345
  %349 = xor i64 %348, -3100099568178003815
  %350 = and i64 %6, 1475495060335505260
  %351 = xor i64 %6, -1
  %352 = or i64 -1475495060335505261, %351
  %353 = xor i64 %352, -1
  %354 = and i64 %353, -1
  %355 = or i64 %2, 3792994980963934249
  %356 = and i64 3792994980963934249, %2
  %357 = xor i64 3792994980963934249, %2
  %358 = or i64 %356, %357
  %359 = and i64 %2, 7613234499123475330
  %360 = xor i64 %2, -1
  %361 = or i64 -7613234499123475331, %360
  %362 = xor i64 %361, -1
  %363 = and i64 %362, -1
  %364 = xor i64 -1965376995011614894, %355
  %365 = xor i64 %364, %350
  %366 = xor i64 %365, %354
  %367 = xor i64 %366, %358
  %368 = xor i64 %367, %363
  %369 = xor i64 %368, %359
  %370 = mul i64 %349, %369
  %371 = trunc i64 %370 to i8
  %372 = srem i8 %336, %371
  %373 = icmp eq i8 %372, 0
  %374 = or i1 %303, %373
  %375 = and i64 %8, 4285342022491147801
  %376 = or i64 -4285342022491147802, %8
  %377 = sub i64 %376, -4285342022491147802
  %378 = or i64 %10, 8977981186381369606
  %379 = and i64 8977981186381369606, %10
  %380 = xor i64 8977981186381369606, %10
  %381 = or i64 %379, %380
  %382 = or i64 %10, 4420090330996211201
  %383 = xor i64 %10, -1
  %384 = and i64 4420090330996211201, %383
  %385 = add i64 %384, %10
  %386 = xor i64 %378, %381
  %387 = xor i64 %386, -1480819723469782755
  %388 = xor i64 %387, %377
  %389 = xor i64 %388, %375
  %390 = xor i64 %389, %385
  %391 = xor i64 %390, %382
  %392 = or i64 %4, 2662980195012462808
  %393 = and i64 2662980195012462808, %4
  %394 = xor i64 2662980195012462808, %4
  %395 = or i64 %393, %394
  %396 = add i64 %16, 5200629075569067873
  %397 = sub i64 0, %16
  %398 = add i64 -5200629075569067873, %397
  %399 = sub i64 0, %398
  %400 = add i64 %2, -7707831636937469912
  %401 = add i64 6894330189038160521, %2
  %402 = add i64 %401, 3844582247733921183
  %403 = xor i64 %400, 3140886950116036114
  %404 = xor i64 %403, %395
  %405 = xor i64 %404, %396
  %406 = xor i64 %405, %402
  %407 = xor i64 %406, %399
  %408 = xor i64 %407, %392
  %409 = mul i64 %391, %408
  %410 = trunc i64 %409 to i32
  %411 = select i1 %374, i32 %410, i32 595012160
  %412 = xor i32 %411, 74
  store i32 %412, i32* %1, align 4
  %413 = call i8** @bf777061424148142830(i32* %1)
  %414 = load i8*, i8** %413, align 8
  indirectbr i8* %414, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %415 = load i8*, i8** %9, align 8
  %416 = load i8, i8* %415, align 1
  %417 = mul i8 %416, 2
  %418 = mul i8 %416, 2
  %419 = add i8 2, %418
  %420 = mul i8 %417, %419
  %421 = srem i8 %420, 4
  %422 = icmp eq i8 %421, 0
  %423 = mul i8 %416, %416
  %424 = and i8 %423, %416
  %425 = or i8 %423, %416
  %426 = add i8 %424, %425
  %427 = srem i8 %426, 2
  %428 = icmp eq i8 %427, 0
  %429 = and i1 %422, %428
  %430 = select i1 %429, i32 595012098, i32 595012182
  %431 = xor i32 %430, 84
  store i32 %431, i32* %1, align 4
  %432 = call i8** @bf777061424148142830(i32* %1)
  %433 = load i8*, i8** %432, align 8
  indirectbr i8* %433, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %434 = load i8*, i8** %15, align 8
  %435 = load i8, i8* %434, align 1
  %436 = mul i8 %435, 2
  %437 = and i64 %4, -747996616641253857
  %438 = xor i64 %4, -1
  %439 = xor i64 -747996616641253857, %438
  %440 = and i64 %439, -747996616641253857
  %441 = add i64 %10, 903306630147835317
  %442 = add i64 3496883346002073272, %10
  %443 = sub i64 %442, 2593576715854237955
  %444 = sext i32 %dispatcher1 to i64
  %445 = and i64 %444, 4638653668210871565
  %446 = xor i64 %444, -1
  %447 = xor i64 4638653668210871565, %446
  %448 = and i64 %447, 4638653668210871565
  %449 = xor i64 %448, %441
  %450 = xor i64 %449, %440
  %451 = xor i64 %450, 8377357168077568601
  %452 = xor i64 %451, %437
  %453 = xor i64 %452, %443
  %454 = xor i64 %453, %445
  %455 = or i64 %16, 1451101178008266711
  %456 = xor i64 %16, -1
  %457 = and i64 %456, -5441166419851545183
  %458 = and i64 %16, 5441166419851545182
  %459 = or i64 %457, %458
  %460 = xor i64 -6890983323181280650, %459
  %461 = xor i64 %16, -1
  %462 = or i64 -1451101178008266712, %461
  %463 = xor i64 %462, -1
  %464 = and i64 %463, -1
  %465 = or i64 %460, %464
  %466 = add i64 %10, -5624449832663799287
  %467 = add i64 -7340807487145184799, %10
  %468 = sub i64 %467, -1716357654481385512
  %469 = and i64 %4, -5546486176854431571
  %470 = xor i64 %4, -1
  %471 = or i64 5546486176854431570, %470
  %472 = xor i64 %471, -1
  %473 = and i64 %472, -1
  %474 = xor i64 3437070027628698578, %468
  %475 = xor i64 %474, %466
  %476 = xor i64 %475, %473
  %477 = xor i64 %476, %465
  %478 = xor i64 %477, %469
  %479 = xor i64 %478, %455
  %480 = mul i64 %454, %479
  %481 = trunc i64 %480 to i8
  %482 = mul i8 %435, %481
  %483 = sext i32 %dispatcher1 to i64
  %484 = add i64 %483, 2912700912802262830
  %485 = and i64 2912700912802262830, %483
  %486 = or i64 2912700912802262830, %483
  %487 = add i64 %485, %486
  %488 = or i64 %14, 6655352187180664113
  %489 = and i64 6655352187180664113, %14
  %490 = xor i64 6655352187180664113, %14
  %491 = or i64 %489, %490
  %492 = sext i32 %dispatcher1 to i64
  %493 = add i64 %492, -6519967531000291194
  %494 = sub i64 0, %492
  %495 = add i64 6519967531000291194, %494
  %496 = sub i64 0, %495
  %497 = xor i64 %493, -828878851123465867
  %498 = xor i64 %497, %488
  %499 = xor i64 %498, %491
  %500 = xor i64 %499, %487
  %501 = xor i64 %500, %496
  %502 = xor i64 %501, %484
  %503 = add i64 %14, 1327913807407420039
  %504 = sub i64 0, %14
  %505 = add i64 -1327913807407420039, %504
  %506 = sub i64 0, %505
  %507 = or i64 %10, 200455047420728484
  %508 = xor i64 %10, -1
  %509 = and i64 %508, -2642658767827497568
  %510 = and i64 %10, 2642658767827497567
  %511 = or i64 %509, %510
  %512 = xor i64 -2766534981384644348, %511
  %513 = xor i64 %10, -1
  %514 = or i64 -200455047420728485, %513
  %515 = xor i64 %514, -1
  %516 = and i64 %515, -1
  %517 = or i64 %512, %516
  %518 = or i64 %4, -1775649917750473791
  %519 = xor i64 %4, -1
  %520 = and i64 -1775649917750473791, %519
  %521 = add i64 %520, %4
  %522 = xor i64 %503, %507
  %523 = xor i64 %522, %506
  %524 = xor i64 %523, %518
  %525 = xor i64 %524, 6499095557906214330
  %526 = xor i64 %525, %517
  %527 = xor i64 %526, %521
  %528 = mul i64 %502, %527
  %529 = trunc i64 %528 to i8
  %530 = add i8 %529, %482
  %531 = mul i8 %436, %530
  %532 = srem i8 %531, 4
  %533 = or i64 %14, -2285769098666732211
  %534 = xor i64 %14, -1
  %535 = and i64 %534, -6816017858299439691
  %536 = and i64 %14, 6816017858299439690
  %537 = or i64 %535, %536
  %538 = xor i64 4697239857417699576, %537
  %539 = xor i64 %14, -1
  %540 = or i64 2285769098666732210, %539
  %541 = xor i64 %540, -1
  %542 = and i64 %541, -1
  %543 = or i64 %538, %542
  %544 = sext i32 %dispatcher1 to i64
  %545 = or i64 %544, -7462349763470643916
  %546 = xor i64 %544, -1
  %547 = and i64 -7462349763470643916, %546
  %548 = add i64 %547, %544
  %549 = add i64 %2, 6098532625932006816
  %550 = add i64 1403960719757141663, %2
  %551 = sub i64 %550, -4694571906174865153
  %552 = xor i64 %533, %549
  %553 = xor i64 %552, %548
  %554 = xor i64 %553, %543
  %555 = xor i64 %554, %551
  %556 = xor i64 %555, 1542458660574593353
  %557 = xor i64 %556, %545
  %558 = add i64 %4, 6512638347154003058
  %559 = and i64 6512638347154003058, %4
  %560 = or i64 6512638347154003058, %4
  %561 = add i64 %559, %560
  %562 = or i64 %10, -3161639639362939116
  %563 = xor i64 %10, -1
  %564 = and i64 %563, 6170580748889661966
  %565 = and i64 %10, -6170580748889661967
  %566 = or i64 %564, %565
  %567 = xor i64 -9097879274121792230, %566
  %568 = xor i64 %10, -1
  %569 = or i64 3161639639362939115, %568
  %570 = xor i64 %569, -1
  %571 = and i64 %570, -1
  %572 = or i64 %567, %571
  %573 = add i64 %16, -2396028112708494901
  %574 = add i64 -4153675058131183417, %16
  %575 = sub i64 %574, -1757646945422688516
  %576 = xor i64 %573, %572
  %577 = xor i64 %576, %562
  %578 = xor i64 %577, %575
  %579 = xor i64 %578, %561
  %580 = xor i64 %579, %558
  %581 = xor i64 %580, 0
  %582 = mul i64 %557, %581
  %583 = trunc i64 %582 to i8
  %584 = icmp eq i8 %532, %583
  %585 = mul i8 %435, %435
  %586 = mul i8 %585, %435
  %587 = add i8 %586, %435
  %588 = srem i8 %587, 2
  %589 = or i64 %12, 2249002448420498703
  %590 = xor i64 %12, -1
  %591 = and i64 2249002448420498703, %590
  %592 = add i64 %591, %12
  %593 = and i64 %6, -4681752477426789312
  %594 = xor i64 %6, -1
  %595 = xor i64 -4681752477426789312, %594
  %596 = and i64 %595, -4681752477426789312
  %597 = and i64 %14, 3739125904885371526
  %598 = xor i64 %14, -1
  %599 = or i64 -3739125904885371527, %598
  %600 = xor i64 %599, -1
  %601 = and i64 %600, -1
  %602 = xor i64 %601, %593
  %603 = xor i64 %602, %592
  %604 = xor i64 %603, -4141338526638300849
  %605 = xor i64 %604, %596
  %606 = xor i64 %605, %597
  %607 = xor i64 %606, %589
  %608 = add i64 %12, 4955503212103003296
  %609 = add i64 1239237169809162490, %12
  %610 = sub i64 %609, -3716266042293840806
  %611 = add i64 %16, -7358753357838836053
  %612 = and i64 -7358753357838836053, %16
  %613 = or i64 -7358753357838836053, %16
  %614 = add i64 %612, %613
  %615 = or i64 %14, 1627935120822501984
  %616 = xor i64 %14, -1
  %617 = and i64 %616, -2211925313047404964
  %618 = and i64 %14, 2211925313047404963
  %619 = or i64 %617, %618
  %620 = xor i64 -587086451395568580, %619
  %621 = xor i64 %14, -1
  %622 = or i64 -1627935120822501985, %621
  %623 = xor i64 %622, -1
  %624 = and i64 %623, -1
  %625 = or i64 %620, %624
  %626 = xor i64 %611, %625
  %627 = xor i64 %626, %614
  %628 = xor i64 %627, %608
  %629 = xor i64 %628, %610
  %630 = xor i64 %629, 0
  %631 = xor i64 %630, %615
  %632 = mul i64 %607, %631
  %633 = trunc i64 %632 to i8
  %634 = icmp eq i8 %588, %633
  %635 = xor i1 %634, true
  %636 = xor i1 %584, %635
  %637 = and i1 %636, %584
  %638 = add i64 %14, 1514338461451730149
  %639 = add i64 63801182823664842, %14
  %640 = add i64 %639, 1450537278628065307
  %641 = or i64 %12, 5893315364549091200
  %642 = and i64 5893315364549091200, %12
  %643 = xor i64 5893315364549091200, %12
  %644 = or i64 %642, %643
  %645 = xor i64 %641, %640
  %646 = xor i64 %645, 101433252493398289
  %647 = xor i64 %646, %638
  %648 = xor i64 %647, %644
  %649 = and i64 %2, 2203091436236519491
  %650 = xor i64 %2, -1
  %651 = or i64 -2203091436236519492, %650
  %652 = xor i64 %651, -1
  %653 = and i64 %652, -1
  %654 = sext i32 %dispatcher1 to i64
  %655 = and i64 %654, 5914961452461089776
  %656 = xor i64 %654, -1
  %657 = or i64 -5914961452461089777, %656
  %658 = xor i64 %657, -1
  %659 = and i64 %658, -1
  %660 = xor i64 2975220384192038464, %659
  %661 = xor i64 %660, %649
  %662 = xor i64 %661, %655
  %663 = xor i64 %662, %653
  %664 = mul i64 %648, %663
  %665 = trunc i64 %664 to i32
  %666 = select i1 %637, i32 %665, i32 595012275
  %667 = or i64 %6, -7122920212394983097
  %668 = and i64 -7122920212394983097, %6
  %669 = xor i64 -7122920212394983097, %6
  %670 = or i64 %668, %669
  %671 = and i64 %8, 2528936047424488007
  %672 = or i64 -2528936047424488008, %8
  %673 = sub i64 %672, -2528936047424488008
  %674 = add i64 %4, 3410088179910512352
  %675 = sub i64 0, %4
  %676 = add i64 -3410088179910512352, %675
  %677 = sub i64 0, %676
  %678 = xor i64 %671, %677
  %679 = xor i64 %678, 2624510508673349305
  %680 = xor i64 %679, %673
  %681 = xor i64 %680, %674
  %682 = xor i64 %681, %670
  %683 = xor i64 %682, %667
  %684 = or i64 %2, 5442090298969791906
  %685 = and i64 5442090298969791906, %2
  %686 = xor i64 5442090298969791906, %2
  %687 = or i64 %685, %686
  %688 = add i64 %8, -1153880198998356615
  %689 = sub i64 0, %8
  %690 = sub i64 -1153880198998356615, %689
  %691 = add i64 %12, -2025979990722295578
  %692 = sub i64 0, %12
  %693 = add i64 2025979990722295578, %692
  %694 = sub i64 0, %693
  %695 = xor i64 %694, %687
  %696 = xor i64 %695, %688
  %697 = xor i64 %696, %684
  %698 = xor i64 %697, %691
  %699 = xor i64 %698, -5968081593590063349
  %700 = xor i64 %699, %690
  %701 = mul i64 %683, %700
  %702 = trunc i64 %701 to i32
  %703 = or i32 %666, %702
  %704 = and i32 %666, 243
  %705 = sub i32 %703, %704
  store i32 %705, i32* %1, align 4
  %706 = call i8** @bf777061424148142830(i32* %1)
  %707 = load i8*, i8** %706, align 8
  indirectbr i8* %707, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted(i1 %0, i1 %1, i1 %2, i32 %3, i32 %4, i1* %.out, i1* %.out1, i1* %.out2, i1* %.out3, i1* %.out4, i1* %.out5, i1* %.out6) #1 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h11804894491772278134(i64 595012102)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %6
  store i8* blockaddress(@render.extracted, %loopEnd), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012104)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %8
  store i8* blockaddress(@render.extracted, %defaultSwitchBasicBlock), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012099)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %10
  store i8* blockaddress(@render.extracted, %.exitStub7), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012101)
  %13 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %12
  store i8* blockaddress(@render.extracted, %BogusBasicBlock), i8** %13, align 8
  %14 = sext i32 %3 to i64
  %15 = add i64 %14, 6208850680446527580
  %16 = sub i64 0, %14
  %17 = add i64 -6208850680446527580, %16
  %18 = sub i64 0, %17
  %19 = sext i32 %3 to i64
  %20 = add i64 %19, 8825653098918108545
  %21 = add i64 -7366335620025598068, %19
  %22 = add i64 %21, -2254755354765845003
  %23 = xor i64 %15, -5722876007060221117
  %24 = xor i64 %23, %22
  %25 = xor i64 %24, %18
  %26 = xor i64 %25, %20
  %27 = sext i32 %4 to i64
  %28 = or i64 %27, 2583962596105981961
  %29 = and i64 2583962596105981961, %27
  %30 = xor i64 2583962596105981961, %27
  %31 = or i64 %29, %30
  %32 = sext i32 %3 to i64
  %33 = and i64 %32, 7839476914780462004
  %34 = xor i64 %32, -1
  %35 = xor i64 7839476914780462004, %34
  %36 = and i64 %35, 7839476914780462004
  %37 = sext i32 %3 to i64
  %38 = add i64 %37, 7998402153435210780
  %39 = add i64 1236980866638857549, %37
  %40 = sub i64 %39, -6761421286796353231
  %41 = xor i64 %36, %31
  %42 = xor i64 %41, %33
  %43 = xor i64 %42, %28
  %44 = xor i64 %43, -7672981394930519850
  %45 = xor i64 %44, %40
  %46 = xor i64 %45, %38
  %47 = mul i64 %26, %46
  %48 = call i64 @h11804894491772278134(i64 %47)
  %49 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %48
  store i8* blockaddress(@render.extracted, %codeRepl), i8** %49, align 8
  %50 = sext i32 %3 to i64
  %51 = and i64 %50, 4437161673647517250
  %52 = xor i64 %50, -1
  %53 = or i64 -4437161673647517251, %52
  %54 = xor i64 %53, -1
  %55 = and i64 %54, -1
  %56 = sext i32 %3 to i64
  %57 = and i64 %56, 5452729967951439473
  %58 = or i64 -5452729967951439474, %56
  %59 = sub i64 %58, -5452729967951439474
  %60 = xor i64 %55, %59
  %61 = xor i64 %60, %51
  %62 = xor i64 %61, %57
  %63 = xor i64 %62, 6430573544236831699
  %64 = sext i32 %4 to i64
  %65 = and i64 %64, -2960616551866635172
  %66 = xor i64 %64, -1
  %67 = or i64 2960616551866635171, %66
  %68 = xor i64 %67, -1
  %69 = and i64 %68, -1
  %70 = sext i32 %3 to i64
  %71 = or i64 %70, 772315885352167986
  %72 = xor i64 %70, -1
  %73 = and i64 772315885352167986, %72
  %74 = add i64 %73, %70
  %75 = xor i64 6987108620987651197, %65
  %76 = xor i64 %75, %69
  %77 = xor i64 %76, %71
  %78 = xor i64 %77, %74
  %79 = mul i64 %63, %78
  %80 = call i64 @h11804894491772278134(i64 %79)
  %81 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %80
  store i8* blockaddress(@render.extracted, %709), i8** %81, align 8
  %82 = call i64 @h11804894491772278134(i64 595012096)
  %83 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %82
  store i8* blockaddress(@render.extracted, %EntryBasicBlockSplit), i8** %83, align 8
  %84 = sext i32 %4 to i64
  %85 = add i64 %84, -8806922043790306444
  %86 = sub i64 0, %84
  %87 = add i64 8806922043790306444, %86
  %88 = sub i64 0, %87
  %89 = sext i32 %3 to i64
  %90 = or i64 %89, -4919192789703224610
  %91 = xor i64 %89, -1
  %92 = and i64 -4919192789703224610, %91
  %93 = add i64 %92, %89
  %94 = xor i64 %90, %88
  %95 = xor i64 %94, -7726639789811034763
  %96 = xor i64 %95, %93
  %97 = xor i64 %96, %85
  %98 = sext i32 %4 to i64
  %99 = add i64 %98, -7817268583276200352
  %100 = and i64 -7817268583276200352, %98
  %101 = or i64 -7817268583276200352, %98
  %102 = add i64 %100, %101
  %103 = sext i32 %4 to i64
  %104 = and i64 %103, -3101637913536999876
  %105 = xor i64 %103, -1
  %106 = xor i64 -3101637913536999876, %105
  %107 = and i64 %106, -3101637913536999876
  %108 = sext i32 %4 to i64
  %109 = add i64 %108, 413186427752058314
  %110 = sub i64 0, %108
  %111 = add i64 -413186427752058314, %110
  %112 = sub i64 0, %111
  %113 = xor i64 %107, %104
  %114 = xor i64 %113, %112
  %115 = xor i64 %114, 2719742279977768157
  %116 = xor i64 %115, %99
  %117 = xor i64 %116, %102
  %118 = xor i64 %117, %109
  %119 = mul i64 %97, %118
  %120 = call i64 @h11804894491772278134(i64 %119)
  %121 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %120
  store i8* blockaddress(@render.extracted, %.exitStub), i8** %121, align 8
  %122 = call i64 @h11804894491772278134(i64 595012100)
  %123 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %122
  store i8* blockaddress(@render.extracted, %loopStart), i8** %123, align 8
  %.reg2mem2 = alloca i1, align 1
  %124 = sext i32 %3 to i64
  %125 = or i64 %124, 6690596127839899092
  %126 = and i64 6690596127839899092, %124
  %127 = xor i64 6690596127839899092, %124
  %128 = or i64 %126, %127
  %129 = sext i32 %3 to i64
  %130 = or i64 %129, -4797267047686217612
  %131 = xor i64 %129, -1
  %132 = and i64 -4797267047686217612, %131
  %133 = add i64 %132, %129
  %134 = xor i64 %130, %128
  %135 = xor i64 %134, 1511600494900718179
  %136 = xor i64 %135, %125
  %137 = xor i64 %136, %133
  %138 = sext i32 %4 to i64
  %139 = add i64 %138, -6973498869838010331
  %140 = sub i64 0, %138
  %141 = sub i64 -6973498869838010331, %140
  %142 = sext i32 %4 to i64
  %143 = and i64 %142, -1428362369937610154
  %144 = or i64 1428362369937610153, %142
  %145 = sub i64 %144, 1428362369937610153
  %146 = xor i64 -1024184110323128501, %141
  %147 = xor i64 %146, %139
  %148 = xor i64 %147, %143
  %149 = xor i64 %148, %145
  %150 = mul i64 %137, %149
  %151 = trunc i64 %150 to i32
  %.reg2mem = alloca i8**, i32 %151, align 8
  %lookupTable = alloca [10 x i32], align 4
  %152 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %152, align 4
  %153 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %153, align 4
  %154 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %154, align 4
  %155 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %155, align 4
  %156 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %156, align 4
  %157 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %157, align 4
  %158 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %158, align 4
  %159 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %160 = sext i32 %3 to i64
  %161 = and i64 %160, -4261991486513135507
  %162 = xor i64 %160, -1
  %163 = or i64 4261991486513135506, %162
  %164 = xor i64 %163, -1
  %165 = and i64 %164, -1
  %166 = sext i32 %3 to i64
  %167 = or i64 %166, 4824625257674815605
  %168 = xor i64 %166, -1
  %169 = and i64 %168, -7978833160004826289
  %170 = and i64 %166, 7978833160004826288
  %171 = or i64 %169, %170
  %172 = xor i64 -3192490699327294662, %171
  %173 = xor i64 %166, -1
  %174 = or i64 -4824625257674815606, %173
  %175 = xor i64 %174, -1
  %176 = and i64 %175, -1
  %177 = or i64 %172, %176
  %178 = sext i32 %3 to i64
  %179 = or i64 %178, 6859153174786922851
  %180 = and i64 6859153174786922851, %178
  %181 = xor i64 6859153174786922851, %178
  %182 = or i64 %180, %181
  %183 = xor i64 %182, %161
  %184 = xor i64 %183, %167
  %185 = xor i64 %184, %179
  %186 = xor i64 %185, -3779025688425445499
  %187 = xor i64 %186, %165
  %188 = xor i64 %187, %177
  %189 = sext i32 %3 to i64
  %190 = and i64 %189, -4132493093188626919
  %191 = xor i64 %189, -1
  %192 = or i64 4132493093188626918, %191
  %193 = xor i64 %192, -1
  %194 = and i64 %193, -1
  %195 = sext i32 %4 to i64
  %196 = or i64 %195, -2348460252013869151
  %197 = xor i64 %195, -1
  %198 = and i64 -2348460252013869151, %197
  %199 = add i64 %198, %195
  %200 = xor i64 %190, 1335040933464794420
  %201 = xor i64 %200, %199
  %202 = xor i64 %201, %196
  %203 = xor i64 %202, %194
  %204 = mul i64 %188, %203
  %205 = trunc i64 %204 to i32
  store i32 %205, i32* %159, align 4
  %206 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %206, align 4
  %207 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %208 = sext i32 %4 to i64
  %209 = or i64 %208, -3334913949737721028
  %210 = xor i64 %208, -1
  %211 = and i64 -3334913949737721028, %210
  %212 = add i64 %211, %208
  %213 = sext i32 %4 to i64
  %214 = or i64 %213, 6653250734187438379
  %215 = xor i64 %213, -1
  %216 = and i64 %215, 2601660644469074847
  %217 = and i64 %213, -2601660644469074848
  %218 = or i64 %216, %217
  %219 = xor i64 8669408223379851956, %218
  %220 = xor i64 %213, -1
  %221 = or i64 -6653250734187438380, %220
  %222 = xor i64 %221, -1
  %223 = and i64 %222, -1
  %224 = or i64 %219, %223
  %225 = sext i32 %3 to i64
  %226 = add i64 %225, 8809912621869950057
  %227 = sub i64 0, %225
  %228 = sub i64 8809912621869950057, %227
  %229 = xor i64 %212, %214
  %230 = xor i64 %229, %226
  %231 = xor i64 %230, %228
  %232 = xor i64 %231, -4798534839906732829
  %233 = xor i64 %232, %209
  %234 = xor i64 %233, %224
  %235 = sext i32 %4 to i64
  %236 = and i64 %235, -504974858415134768
  %237 = xor i64 %235, -1
  %238 = or i64 504974858415134767, %237
  %239 = xor i64 %238, -1
  %240 = and i64 %239, -1
  %241 = sext i32 %4 to i64
  %242 = add i64 %241, 7159256285917756106
  %243 = sub i64 0, %241
  %244 = sub i64 7159256285917756106, %243
  %245 = sext i32 %3 to i64
  %246 = and i64 %245, 6996800820265871087
  %247 = or i64 -6996800820265871088, %245
  %248 = sub i64 %247, -6996800820265871088
  %249 = xor i64 %240, %244
  %250 = xor i64 %249, %242
  %251 = xor i64 %250, %246
  %252 = xor i64 %251, %236
  %253 = xor i64 %252, %248
  %254 = xor i64 %253, 4045371651815744706
  %255 = mul i64 %234, %254
  %256 = trunc i64 %255 to i32
  store i32 %256, i32* %207, align 4
  %257 = alloca i64, align 8
  %258 = alloca i64, align 8
  %259 = sext i32 %4 to i64
  %260 = or i64 %259, 1964824439788662485
  %261 = xor i64 %259, -1
  %262 = and i64 %261, 5048632138858786945
  %263 = and i64 %259, -5048632138858786946
  %264 = or i64 %262, %263
  %265 = xor i64 6725049916031737428, %264
  %266 = xor i64 %259, -1
  %267 = or i64 -1964824439788662486, %266
  %268 = xor i64 %267, -1
  %269 = and i64 %268, -1
  %270 = or i64 %265, %269
  %271 = sext i32 %4 to i64
  %272 = or i64 %271, 7387140487259268861
  %273 = xor i64 %271, -1
  %274 = and i64 %273, 6378867611196704202
  %275 = and i64 %271, -6378867611196704203
  %276 = or i64 %274, %275
  %277 = xor i64 4468185911986840375, %276
  %278 = xor i64 %271, -1
  %279 = or i64 -7387140487259268862, %278
  %280 = xor i64 %279, -1
  %281 = and i64 %280, -1
  %282 = or i64 %277, %281
  %283 = xor i64 -80701171570083365, %272
  %284 = xor i64 %283, %270
  %285 = xor i64 %284, %260
  %286 = xor i64 %285, %282
  %287 = sext i32 %3 to i64
  %288 = or i64 %287, -5912539474605519378
  %289 = and i64 -5912539474605519378, %287
  %290 = xor i64 -5912539474605519378, %287
  %291 = or i64 %289, %290
  %292 = sext i32 %3 to i64
  %293 = and i64 %292, -3054153213325595299
  %294 = or i64 3054153213325595298, %292
  %295 = sub i64 %294, 3054153213325595298
  %296 = xor i64 %293, %295
  %297 = xor i64 %296, %288
  %298 = xor i64 %297, 0
  %299 = xor i64 %298, %291
  %300 = mul i64 %286, %299
  %301 = sext i32 %3 to i64
  %302 = or i64 %301, 5986922113588849022
  %303 = xor i64 %301, -1
  %304 = and i64 %303, -7030365082586909141
  %305 = and i64 %301, 7030365082586909140
  %306 = or i64 %304, %305
  %307 = xor i64 -3640331518125269163, %306
  %308 = xor i64 %301, -1
  %309 = or i64 -5986922113588849023, %308
  %310 = xor i64 %309, -1
  %311 = and i64 %310, -1
  %312 = or i64 %307, %311
  %313 = sext i32 %4 to i64
  %314 = and i64 %313, 5504468537744859211
  %315 = xor i64 %313, -1
  %316 = or i64 -5504468537744859212, %315
  %317 = xor i64 %316, -1
  %318 = and i64 %317, -1
  %319 = sext i32 %3 to i64
  %320 = or i64 %319, -6240093517173378978
  %321 = xor i64 %319, -1
  %322 = and i64 -6240093517173378978, %321
  %323 = add i64 %322, %319
  %324 = xor i64 %314, %323
  %325 = xor i64 %324, %302
  %326 = xor i64 %325, %318
  %327 = xor i64 %326, 4678089336620626969
  %328 = xor i64 %327, %312
  %329 = xor i64 %328, %320
  %330 = sext i32 %3 to i64
  %331 = or i64 %330, 5575757451887042087
  %332 = xor i64 %330, -1
  %333 = and i64 5575757451887042087, %332
  %334 = add i64 %333, %330
  %335 = sext i32 %4 to i64
  %336 = add i64 %335, -4835301060215713885
  %337 = xor i64 -4835301060215713885, %335
  %338 = and i64 -4835301060215713885, %335
  %339 = mul i64 2, %338
  %340 = add i64 %337, %339
  %341 = xor i64 0, %331
  %342 = xor i64 %341, %340
  %343 = xor i64 %342, %334
  %344 = xor i64 %343, %336
  %345 = mul i64 %329, %344
  %346 = trunc i64 %345 to i32
  %347 = sext i32 %4 to i64
  %348 = or i64 %347, -5736193003495269630
  %349 = xor i64 %347, -1
  %350 = and i64 %349, 1719060580492335963
  %351 = and i64 %347, -1719060580492335964
  %352 = or i64 %350, %351
  %353 = xor i64 -6359180909680656295, %352
  %354 = xor i64 %347, -1
  %355 = or i64 5736193003495269629, %354
  %356 = xor i64 %355, -1
  %357 = and i64 %356, -1
  %358 = or i64 %353, %357
  %359 = sext i32 %3 to i64
  %360 = add i64 %359, -5951704474379215846
  %361 = add i64 -6469042440749736497, %359
  %362 = add i64 %361, 517337966370520651
  %363 = sext i32 %4 to i64
  %364 = add i64 %363, -3031526388384089596
  %365 = and i64 -3031526388384089596, %363
  %366 = or i64 -3031526388384089596, %363
  %367 = add i64 %365, %366
  %368 = xor i64 %364, %367
  %369 = xor i64 %368, 7551635627215876165
  %370 = xor i64 %369, %362
  %371 = xor i64 %370, %348
  %372 = xor i64 %371, %358
  %373 = xor i64 %372, %360
  %374 = sext i32 %4 to i64
  %375 = and i64 %374, 8270519127068150883
  %376 = or i64 -8270519127068150884, %374
  %377 = sub i64 %376, -8270519127068150884
  %378 = sext i32 %4 to i64
  %379 = add i64 %378, -8468858150221281103
  %380 = sub i64 0, %378
  %381 = add i64 8468858150221281103, %380
  %382 = sub i64 0, %381
  %383 = xor i64 %382, 0
  %384 = xor i64 %383, %379
  %385 = xor i64 %384, %375
  %386 = xor i64 %385, %377
  %387 = mul i64 %373, %386
  %388 = sext i32 %3 to i64
  %389 = add i64 %388, -3698021845358875105
  %390 = and i64 -3698021845358875105, %388
  %391 = or i64 -3698021845358875105, %388
  %392 = add i64 %390, %391
  %393 = sext i32 %4 to i64
  %394 = or i64 %393, 421949641812412906
  %395 = and i64 421949641812412906, %393
  %396 = xor i64 421949641812412906, %393
  %397 = or i64 %395, %396
  %398 = xor i64 %392, %394
  %399 = xor i64 %398, %389
  %400 = xor i64 %399, 6151094760044499817
  %401 = xor i64 %400, %397
  %402 = sext i32 %3 to i64
  %403 = and i64 %402, -2781422883694399165
  %404 = xor i64 %402, -1
  %405 = xor i64 -2781422883694399165, %404
  %406 = and i64 %405, -2781422883694399165
  %407 = sext i32 %4 to i64
  %408 = or i64 %407, -1444263403135375076
  %409 = xor i64 %407, -1
  %410 = and i64 %409, -885770627109280758
  %411 = and i64 %407, 885770627109280757
  %412 = or i64 %410, %411
  %413 = xor i64 1747940196359982358, %412
  %414 = xor i64 %407, -1
  %415 = or i64 1444263403135375075, %414
  %416 = xor i64 %415, -1
  %417 = and i64 %416, -1
  %418 = or i64 %413, %417
  %419 = sext i32 %4 to i64
  %420 = or i64 %419, 6255295056048253523
  %421 = xor i64 %419, -1
  %422 = and i64 6255295056048253523, %421
  %423 = add i64 %422, %419
  %424 = xor i64 %420, %406
  %425 = xor i64 %424, 0
  %426 = xor i64 %425, %423
  %427 = xor i64 %426, %403
  %428 = xor i64 %427, %418
  %429 = xor i64 %428, %408
  %430 = mul i64 %401, %429
  %431 = trunc i64 %430 to i1
  %432 = sext i32 %3 to i64
  %433 = or i64 %432, -1376228041250000025
  %434 = and i64 -1376228041250000025, %432
  %435 = xor i64 -1376228041250000025, %432
  %436 = or i64 %434, %435
  %437 = sext i32 %3 to i64
  %438 = or i64 %437, 6294714047430625251
  %439 = xor i64 %437, -1
  %440 = and i64 %439, 4202276832945023795
  %441 = and i64 %437, -4202276832945023796
  %442 = or i64 %440, %441
  %443 = xor i64 7857142598887615696, %442
  %444 = xor i64 %437, -1
  %445 = or i64 -6294714047430625252, %444
  %446 = xor i64 %445, -1
  %447 = and i64 %446, -1
  %448 = or i64 %443, %447
  %449 = sext i32 %4 to i64
  %450 = or i64 %449, -5783684554836142658
  %451 = xor i64 %449, -1
  %452 = and i64 -5783684554836142658, %451
  %453 = add i64 %452, %449
  %454 = xor i64 %433, %436
  %455 = xor i64 %454, %453
  %456 = xor i64 %455, %438
  %457 = xor i64 %456, %448
  %458 = xor i64 %457, -8591434010949246701
  %459 = xor i64 %458, %450
  %460 = sext i32 %3 to i64
  %461 = and i64 %460, -5843450048537986682
  %462 = xor i64 %460, -1
  %463 = or i64 5843450048537986681, %462
  %464 = xor i64 %463, -1
  %465 = and i64 %464, -1
  %466 = sext i32 %3 to i64
  %467 = add i64 %466, 890933239332379238
  %468 = add i64 -5407491332921306491, %466
  %469 = sub i64 %468, -6298424572253685729
  %470 = sext i32 %4 to i64
  %471 = add i64 %470, 6558864148047993810
  %472 = sub i64 0, %470
  %473 = add i64 -6558864148047993810, %472
  %474 = sub i64 0, %473
  %475 = xor i64 %461, %465
  %476 = xor i64 %475, %474
  %477 = xor i64 %476, 0
  %478 = xor i64 %477, %471
  %479 = xor i64 %478, %469
  %480 = xor i64 %479, %467
  %481 = mul i64 %459, %480
  %482 = trunc i64 %481 to i1
  %483 = sext i32 %3 to i64
  %484 = or i64 %483, 3943611533640420770
  %485 = xor i64 %483, -1
  %486 = and i64 %485, 5536148457759619307
  %487 = and i64 %483, -5536148457759619308
  %488 = or i64 %486, %487
  %489 = xor i64 8822231142956791113, %488
  %490 = xor i64 %483, -1
  %491 = or i64 -3943611533640420771, %490
  %492 = xor i64 %491, -1
  %493 = and i64 %492, -1
  %494 = or i64 %489, %493
  %495 = sext i32 %3 to i64
  %496 = and i64 %495, -5074472561455106096
  %497 = or i64 5074472561455106095, %495
  %498 = sub i64 %497, 5074472561455106095
  %499 = xor i64 %494, %498
  %500 = xor i64 %499, %484
  %501 = xor i64 %500, 8630829687969298749
  %502 = xor i64 %501, %496
  %503 = sext i32 %4 to i64
  %504 = and i64 %503, 949653247131482444
  %505 = xor i64 %503, -1
  %506 = or i64 -949653247131482445, %505
  %507 = xor i64 %506, -1
  %508 = and i64 %507, -1
  %509 = sext i32 %4 to i64
  %510 = add i64 %509, -6569982402823683488
  %511 = add i64 362012555033797440, %509
  %512 = sub i64 %511, 6931994957857480928
  %513 = sext i32 %4 to i64
  %514 = and i64 %513, -4670481606587852892
  %515 = or i64 4670481606587852891, %513
  %516 = sub i64 %515, 4670481606587852891
  %517 = xor i64 %508, %510
  %518 = xor i64 %517, 0
  %519 = xor i64 %518, %512
  %520 = xor i64 %519, %514
  %521 = xor i64 %520, %504
  %522 = xor i64 %521, %516
  %523 = mul i64 %502, %522
  %524 = trunc i64 %523 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %258, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %300, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %346, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 %387, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %431, i1 false, i1 %482, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %524, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %525 = load i64, i64* %258, align 8
  %526 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1252163288438473641, i32 0, i64 %525
  store i8** %526, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012100, i32* %5, align 4
  %527 = call i8** @bf6100004335245622257(i32* %5)
  %528 = load i8*, i8** %527, align 8
  indirectbr i8* %528, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %709
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub7
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i1, i1*, i1*, i1, i1*, i1*, i1*, i32, i32, i1*)* @render.extracted.extracted to i8*), i8** %.reload, align 8
  %529 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %530 = load i32, i32* %529, align 4
  %531 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  %532 = load i32, i32* %531, align 4
  %533 = sub i32 0, %532
  %534 = add i32 %530, %533
  store i32 %534, i32* %dispatcher, align 4
  %535 = load i8*, i8** %11, align 8
  %536 = load i8, i8* %535, align 1
  %537 = add i64 %525, -9094840759300036494
  %538 = add i64 -1526129509401342524, %525
  %539 = add i64 %538, -7568711249898693970
  %540 = and i64 %80, 6487294449672543141
  %541 = xor i64 %80, -1
  %542 = or i64 -6487294449672543142, %541
  %543 = xor i64 %542, -1
  %544 = and i64 %543, -1
  %545 = xor i64 %539, 1506553358778880753
  %546 = xor i64 %545, %544
  %547 = xor i64 %546, %537
  %548 = xor i64 %547, %540
  %549 = sext i32 %4 to i64
  %550 = add i64 %549, 99121569262117060
  %551 = sub i64 0, %549
  %552 = add i64 -99121569262117060, %551
  %553 = sub i64 0, %552
  %554 = or i64 %80, -5181261205372697691
  %555 = xor i64 %80, -1
  %556 = and i64 -5181261205372697691, %555
  %557 = add i64 %556, %80
  %558 = xor i64 1944974186481826850, %553
  %559 = xor i64 %558, %550
  %560 = xor i64 %559, %554
  %561 = xor i64 %560, %557
  %562 = mul i64 %548, %561
  %563 = trunc i64 %562 to i8
  %564 = mul i8 %536, %563
  %565 = mul i8 %536, 2
  %566 = add i8 2, %565
  %567 = mul i8 %564, %566
  %568 = srem i8 %567, 4
  %569 = icmp eq i8 %568, 0
  %570 = mul i8 %536, %536
  %571 = mul i8 %570, %536
  %572 = add i8 %571, %536
  %573 = srem i8 %572, 2
  %574 = icmp eq i8 %573, 0
  %575 = xor i1 %569, true
  %576 = xor i1 %574, true
  %577 = or i1 %575, %576
  %578 = xor i1 %577, true
  %579 = and i1 %578, true
  %580 = add i64 %80, 4029060641946034467
  %581 = add i64 8500031330629410751, %80
  %582 = sub i64 %581, 4470970688683376284
  %583 = or i64 %6, -56519123938077720
  %584 = and i64 -56519123938077720, %6
  %585 = xor i64 -56519123938077720, %6
  %586 = or i64 %584, %585
  %587 = sext i32 %dispatcher1 to i64
  %588 = add i64 %587, 1901899578716768999
  %589 = sub i64 0, %587
  %590 = sub i64 1901899578716768999, %589
  %591 = xor i64 -3897870921504409029, %588
  %592 = xor i64 %591, %580
  %593 = xor i64 %592, %583
  %594 = xor i64 %593, %586
  %595 = xor i64 %594, %582
  %596 = xor i64 %595, %590
  %597 = sext i32 %4 to i64
  %598 = add i64 %597, -5599618191757437913
  %599 = add i64 -411309632541793943, %597
  %600 = add i64 %599, -5188308559215643970
  %601 = and i64 %48, -2863953963035450731
  %602 = xor i64 %48, -1
  %603 = or i64 2863953963035450730, %602
  %604 = xor i64 %603, -1
  %605 = and i64 %604, -1
  %606 = or i64 %525, 3673160698608650698
  %607 = and i64 3673160698608650698, %525
  %608 = xor i64 3673160698608650698, %525
  %609 = or i64 %607, %608
  %610 = xor i64 %600, %606
  %611 = xor i64 %610, %598
  %612 = xor i64 %611, %605
  %613 = xor i64 %612, %609
  %614 = xor i64 %613, -7634900099007494491
  %615 = xor i64 %614, %601
  %616 = mul i64 %596, %615
  %617 = trunc i64 %616 to i32
  %618 = select i1 %579, i32 %617, i32 595012102
  %619 = and i64 %120, 2937932435629603425
  %620 = xor i64 %120, -1
  %621 = xor i64 2937932435629603425, %620
  %622 = and i64 %621, 2937932435629603425
  %623 = and i64 %48, -8871392659219360555
  %624 = or i64 8871392659219360554, %48
  %625 = sub i64 %624, 8871392659219360554
  %626 = add i64 %80, -5786151190520826577
  %627 = sub i64 0, %80
  %628 = sub i64 -5786151190520826577, %627
  %629 = xor i64 %623, %622
  %630 = xor i64 %629, %619
  %631 = xor i64 %630, %628
  %632 = xor i64 %631, %626
  %633 = xor i64 %632, %625
  %634 = xor i64 %633, -8328945745282016983
  %635 = and i64 %48, 4687170805399382185
  %636 = xor i64 %48, -1
  %637 = xor i64 4687170805399382185, %636
  %638 = and i64 %637, 4687170805399382185
  %639 = add i64 %8, -1840537609243838817
  %640 = and i64 -1840537609243838817, %8
  %641 = or i64 -1840537609243838817, %8
  %642 = add i64 %640, %641
  %643 = sext i32 %4 to i64
  %644 = add i64 %643, 5881005185592562609
  %645 = sub i64 0, %643
  %646 = sub i64 5881005185592562609, %645
  %647 = xor i64 -225538215575606041, %635
  %648 = xor i64 %647, %642
  %649 = xor i64 %648, %646
  %650 = xor i64 %649, %638
  %651 = xor i64 %650, %644
  %652 = xor i64 %651, %639
  %653 = mul i64 %634, %652
  %654 = trunc i64 %653 to i32
  %655 = xor i32 %618, %654
  %656 = and i32 %655, -766118490
  %657 = and i64 %12, -8485534435826519384
  %658 = or i64 8485534435826519383, %12
  %659 = sub i64 %658, 8485534435826519383
  %660 = or i64 %525, 1886329559408232802
  %661 = and i64 1886329559408232802, %525
  %662 = xor i64 1886329559408232802, %525
  %663 = or i64 %661, %662
  %664 = and i64 %525, -6095872606793192104
  %665 = xor i64 %525, -1
  %666 = or i64 6095872606793192103, %665
  %667 = xor i64 %666, -1
  %668 = and i64 %667, -1
  %669 = xor i64 %657, %659
  %670 = xor i64 %669, %668
  %671 = xor i64 %670, %664
  %672 = xor i64 %671, -6416849172458680391
  %673 = xor i64 %672, %663
  %674 = xor i64 %673, %660
  %675 = and i64 %525, 8647669950566066000
  %676 = xor i64 %525, -1
  %677 = or i64 -8647669950566066001, %676
  %678 = xor i64 %677, -1
  %679 = and i64 %678, -1
  %680 = and i64 %122, 9153286134640034490
  %681 = xor i64 %122, -1
  %682 = or i64 -9153286134640034491, %681
  %683 = xor i64 %682, -1
  %684 = and i64 %683, -1
  %685 = or i64 %48, 2948978740778735510
  %686 = xor i64 %48, -1
  %687 = and i64 %686, -6737133440693237382
  %688 = and i64 %48, 6737133440693237381
  %689 = or i64 %687, %688
  %690 = xor i64 -8472391993839280404, %689
  %691 = xor i64 %48, -1
  %692 = or i64 -2948978740778735511, %691
  %693 = xor i64 %692, -1
  %694 = and i64 %693, -1
  %695 = or i64 %690, %694
  %696 = xor i64 %695, %684
  %697 = xor i64 %696, %680
  %698 = xor i64 %697, 1526505312321118113
  %699 = xor i64 %698, %675
  %700 = xor i64 %699, %679
  %701 = xor i64 %700, %685
  %702 = mul i64 %674, %701
  %703 = trunc i64 %702 to i32
  %704 = and i32 %618, %703
  %705 = or i32 %656, %704
  %706 = xor i32 %705, -766118489
  store i32 %706, i32* %5, align 4
  %707 = call i8** @bf6100004335245622257(i32* %5)
  %708 = load i8*, i8** %707, align 8
  indirectbr i8* %708, [label %loopEnd, label %EntryBasicBlockSplit]

709:                                              ; preds = %709, %loopStart
  %710 = or i64 %8, -5612505722194885326
  %711 = xor i64 %8, -1
  %712 = and i64 -5612505722194885326, %711
  %713 = add i64 %712, %8
  %714 = add i64 %48, 6133947783531464942
  %715 = xor i64 6133947783531464942, %48
  %716 = and i64 6133947783531464942, %48
  %717 = mul i64 2, %716
  %718 = add i64 %715, %717
  %719 = and i64 %82, -8591096672744669152
  %720 = or i64 8591096672744669151, %82
  %721 = sub i64 %720, 8591096672744669151
  %722 = xor i64 %714, %718
  %723 = xor i64 %722, %713
  %724 = xor i64 %723, %719
  %725 = xor i64 %724, %721
  %726 = xor i64 %725, 5917941492821691737
  %727 = xor i64 %726, %710
  %728 = sext i32 %4 to i64
  %729 = add i64 %728, -1864139729788765274
  %730 = xor i64 -1864139729788765274, %728
  %731 = and i64 -1864139729788765274, %728
  %732 = mul i64 2, %731
  %733 = add i64 %730, %732
  %734 = or i64 %80, -9187014016942478178
  %735 = and i64 -9187014016942478178, %80
  %736 = xor i64 -9187014016942478178, %80
  %737 = or i64 %735, %736
  %738 = xor i64 -4595974380590841295, %734
  %739 = xor i64 %738, %733
  %740 = xor i64 %739, %737
  %741 = xor i64 %740, %729
  %742 = mul i64 %727, %741
  %743 = sub i64 78, %742
  %744 = xor i1 %0, true
  %745 = and i1 %744, true
  %746 = and i1 %0, false
  %747 = or i1 %745, %746
  %748 = xor i1 %1, true
  %749 = and i1 %748, true
  %750 = and i1 %1, false
  %751 = or i1 %749, %750
  %752 = xor i1 %747, %751
  %753 = xor i1 %0, true
  %754 = xor i1 %1, true
  %755 = or i1 %753, %754
  %756 = xor i1 %755, true
  %757 = and i1 %756, true
  %758 = or i1 %752, %757
  store i1 %758, i1* %.out, align 1
  %759 = add i64 45, 7
  %760 = xor i1 %2, true
  store i1 %760, i1* %.reg2mem2, align 1
  %761 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %762 = load i32, i32* %761, align 4
  %763 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %764 = load i32, i32* %763, align 4
  %765 = add i32 %762, %764
  store i32 %765, i32* %dispatcher, align 4
  %766 = load i8*, i8** %81, align 8
  %767 = load i8, i8* %766, align 1
  %768 = mul i8 %767, 2
  %769 = mul i8 %767, 2
  %770 = add i8 2, %769
  %771 = mul i8 %768, %770
  %772 = srem i8 %771, 4
  %773 = icmp eq i8 %772, 0
  %774 = mul i8 %767, %767
  %775 = xor i8 %774, %767
  %776 = and i8 %774, %767
  %777 = mul i8 2, %776
  %778 = add i8 %775, %777
  %779 = srem i8 %778, 2
  %780 = icmp eq i8 %779, 0
  %781 = xor i1 %773, true
  %782 = and i1 %781, false
  %783 = and i1 %773, true
  %784 = or i1 %782, %783
  %785 = xor i1 %780, true
  %786 = and i1 %785, false
  %787 = or i64 %8, -6425315724037040060
  %788 = and i64 -6425315724037040060, %8
  %789 = xor i64 -6425315724037040060, %8
  %790 = or i64 %788, %789
  %791 = and i64 %80, -7211263280277994945
  %792 = or i64 7211263280277994944, %80
  %793 = sub i64 %792, 7211263280277994944
  %794 = or i64 %122, -8154152983230951840
  %795 = xor i64 %122, -1
  %796 = and i64 -8154152983230951840, %795
  %797 = add i64 %796, %122
  %798 = xor i64 3230164172813914717, %790
  %799 = xor i64 %798, %793
  %800 = xor i64 %799, %791
  %801 = xor i64 %800, %797
  %802 = xor i64 %801, %794
  %803 = xor i64 %802, %787
  %804 = or i64 %82, 2393255569381882074
  %805 = xor i64 %82, -1
  %806 = and i64 2393255569381882074, %805
  %807 = add i64 %806, %82
  %808 = add i64 %80, -6421514226270190495
  %809 = add i64 7286757346907601873, %80
  %810 = sub i64 %809, -4738472500531759248
  %811 = or i64 %120, -4801976955272888488
  %812 = xor i64 %120, -1
  %813 = and i64 -4801976955272888488, %812
  %814 = add i64 %813, %120
  %815 = xor i64 %810, %811
  %816 = xor i64 %815, %814
  %817 = xor i64 %816, %807
  %818 = xor i64 %817, 4229067075775697397
  %819 = xor i64 %818, %804
  %820 = xor i64 %819, %808
  %821 = mul i64 %803, %820
  %822 = trunc i64 %821 to i1
  %823 = and i1 %780, %822
  %824 = or i1 %786, %823
  %825 = xor i1 %784, %824
  %826 = xor i1 %773, true
  %827 = xor i1 %780, true
  %828 = or i1 %826, %827
  %829 = xor i1 %828, true
  %830 = and i1 %829, true
  %831 = or i1 %825, %830
  %832 = select i1 %831, i32 595012103, i32 595012102
  %833 = xor i32 %832, -1
  %834 = or i64 %82, -567561738089329894
  %835 = xor i64 %82, -1
  %836 = and i64 %835, -7221269535025598933
  %837 = and i64 %82, 7221269535025598932
  %838 = or i64 %836, %837
  %839 = xor i64 7194350893094397233, %838
  %840 = xor i64 %82, -1
  %841 = or i64 567561738089329893, %840
  %842 = xor i64 %841, -1
  %843 = and i64 %842, -1
  %844 = or i64 %839, %843
  %845 = add i64 %10, 1180711401925312067
  %846 = add i64 85459047747818881, %10
  %847 = sub i64 %846, -1095252354177493186
  %848 = xor i64 %834, %844
  %849 = xor i64 %848, -9159367316125890331
  %850 = xor i64 %849, %845
  %851 = xor i64 %850, %847
  %852 = sext i32 %dispatcher1 to i64
  %853 = and i64 %852, 7499968375183777926
  %854 = or i64 -7499968375183777927, %852
  %855 = sub i64 %854, -7499968375183777927
  %856 = sext i32 %4 to i64
  %857 = or i64 %856, -8608895416879352427
  %858 = xor i64 %856, -1
  %859 = and i64 -8608895416879352427, %858
  %860 = add i64 %859, %856
  %861 = sext i32 %3 to i64
  %862 = and i64 %861, 3252518388944484330
  %863 = or i64 -3252518388944484331, %861
  %864 = sub i64 %863, -3252518388944484331
  %865 = xor i64 %862, 4801717317277332717
  %866 = xor i64 %865, %855
  %867 = xor i64 %866, %853
  %868 = xor i64 %867, %857
  %869 = xor i64 %868, %864
  %870 = xor i64 %869, %860
  %871 = mul i64 %851, %870
  %872 = trunc i64 %871 to i32
  %873 = and i32 %833, %872
  %874 = and i32 %832, -2
  %875 = or i32 %873, %874
  store i32 %875, i32* %5, align 4
  %876 = call i8** @bf6100004335245622257(i32* %5)
  %877 = load i8*, i8** %876, align 8
  indirectbr i8* %877, [label %loopEnd, label %709]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %257, align 8
  %878 = call i8** @lk4155444237337359759(i64* %257)
  %879 = load i8*, i8** %878, align 8
  %880 = bitcast i8* %879 to i1 (i1, i1*, i1*, i1, i1*, i1*, i1*, i32, i32, i1*)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %targetBlock = call i1 %880(i1 %.reload3, i1* %.out1, i1* %.out2, i1 %2, i1* %.out3, i1* %.out4, i1* %.out5, i32 %3, i32 %4, i1* %.out6)
  %881 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %882 = load i32, i32* %881, align 4
  %883 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %884 = load i32, i32* %883, align 4
  %885 = add i32 %882, %884
  %886 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %887 = load i32, i32* %886, align 4
  %888 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %889 = load i32, i32* %888, align 4
  %890 = add i32 %887, %889
  %891 = select i1 %targetBlock, i32 %885, i32 %890
  store i32 %891, i32* %dispatcher, align 4
  %892 = load i8*, i8** %13, align 8
  %893 = load i8, i8* %892, align 1
  %894 = xor i8 %893, -1
  %895 = or i64 %12, 5988554507537117149
  %896 = xor i64 %12, -1
  %897 = and i64 5988554507537117149, %896
  %898 = add i64 %897, %12
  %899 = sext i32 %3 to i64
  %900 = and i64 %899, 5692208017323354940
  %901 = xor i64 %899, -1
  %902 = xor i64 5692208017323354940, %901
  %903 = and i64 %902, 5692208017323354940
  %904 = sext i32 %3 to i64
  %905 = and i64 %904, -1700268894542468309
  %906 = or i64 1700268894542468308, %904
  %907 = sub i64 %906, 1700268894542468308
  %908 = xor i64 %905, %907
  %909 = xor i64 %908, %895
  %910 = xor i64 %909, 7880765353791342411
  %911 = xor i64 %910, %898
  %912 = xor i64 %911, %903
  %913 = xor i64 %912, %900
  %914 = and i64 %48, -2310559855148335441
  %915 = xor i64 %48, -1
  %916 = xor i64 -2310559855148335441, %915
  %917 = and i64 %916, -2310559855148335441
  %918 = add i64 %6, 867544909852233852
  %919 = and i64 867544909852233852, %6
  %920 = or i64 867544909852233852, %6
  %921 = add i64 %919, %920
  %922 = xor i64 %921, %914
  %923 = xor i64 %922, %917
  %924 = xor i64 %923, 4440734176263884346
  %925 = xor i64 %924, %918
  %926 = mul i64 %913, %925
  %927 = trunc i64 %926 to i8
  %928 = or i8 %894, %927
  %929 = xor i8 %928, -1
  %930 = and i8 %929, -1
  %931 = icmp eq i8 %930, 0
  %932 = mul i8 %893, %893
  %933 = xor i8 %932, %893
  %934 = and i8 %932, %893
  %935 = mul i8 2, %934
  %936 = add i8 %933, %935
  %937 = mul i8 %936, 3
  %938 = srem i8 %937, 2
  %939 = icmp eq i8 %938, 0
  %940 = or i1 %931, %939
  %941 = sext i32 %3 to i64
  %942 = or i64 %941, -9213028669113120139
  %943 = xor i64 %941, -1
  %944 = and i64 %943, -7675859360261970527
  %945 = and i64 %941, 7675859360261970526
  %946 = or i64 %944, %945
  %947 = xor i64 1539494023788474324, %946
  %948 = xor i64 %941, -1
  %949 = or i64 9213028669113120138, %948
  %950 = xor i64 %949, -1
  %951 = and i64 %950, -1
  %952 = or i64 %947, %951
  %953 = or i64 %10, -7602768623647537095
  %954 = and i64 -7602768623647537095, %10
  %955 = xor i64 -7602768623647537095, %10
  %956 = or i64 %954, %955
  %957 = add i64 %48, 929913119213345014
  %958 = sub i64 0, %48
  %959 = add i64 -929913119213345014, %958
  %960 = sub i64 0, %959
  %961 = xor i64 %956, %957
  %962 = xor i64 %961, %942
  %963 = xor i64 %962, 6243559297924364691
  %964 = xor i64 %963, %960
  %965 = xor i64 %964, %952
  %966 = xor i64 %965, %953
  %967 = add i64 %8, -532639145662735551
  %968 = add i64 978913962058535206, %8
  %969 = sub i64 %968, 1511553107721270757
  %970 = or i64 %6, 8103939358311115452
  %971 = and i64 8103939358311115452, %6
  %972 = xor i64 8103939358311115452, %6
  %973 = or i64 %971, %972
  %974 = xor i64 %969, %967
  %975 = xor i64 %974, %970
  %976 = xor i64 %975, %973
  %977 = xor i64 %976, 6135388413198711202
  %978 = mul i64 %966, %977
  %979 = trunc i64 %978 to i32
  %980 = select i1 %940, i32 595012097, i32 %979
  %981 = xor i32 %980, 7
  store i32 %981, i32* %5, align 4
  %982 = call i8** @bf6100004335245622257(i32* %5)
  %983 = load i8*, i8** %982, align 8
  indirectbr i8* %983, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  %984 = add i64 %48, 6839548180523953615
  %985 = add i64 5690510043068488301, %48
  %986 = sub i64 %985, -1149038137455465314
  %987 = sext i32 %4 to i64
  %988 = and i64 %987, 6039962715969245022
  %989 = or i64 -6039962715969245023, %987
  %990 = sub i64 %989, -6039962715969245023
  %991 = xor i64 %988, %990
  %992 = xor i64 %991, %986
  %993 = xor i64 %992, 3432728393573743273
  %994 = xor i64 %993, %984
  %995 = sext i32 %dispatcher1 to i64
  %996 = add i64 %995, 481028203425589240
  %997 = sub i64 0, %995
  %998 = add i64 -481028203425589240, %997
  %999 = sub i64 0, %998
  %1000 = add i64 %8, 4139329111380657898
  %1001 = sub i64 0, %8
  %1002 = add i64 -4139329111380657898, %1001
  %1003 = sub i64 0, %1002
  %1004 = add i64 %10, 2202349045820520088
  %1005 = sub i64 0, %10
  %1006 = add i64 -2202349045820520088, %1005
  %1007 = sub i64 0, %1006
  %1008 = xor i64 %996, 7258149063804651929
  %1009 = xor i64 %1008, %1007
  %1010 = xor i64 %1009, %1003
  %1011 = xor i64 %1010, %1000
  %1012 = xor i64 %1011, %1004
  %1013 = xor i64 %1012, %999
  %1014 = mul i64 %994, %1013
  %1015 = trunc i64 %1014 to i1
  ret i1 %1015

.exitStub7:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %1016 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %1016, align 4
  %1017 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  %1018 = add i64 %12, -1740659364940989083
  %1019 = xor i64 -1740659364940989083, %12
  %1020 = and i64 -1740659364940989083, %12
  %1021 = mul i64 2, %1020
  %1022 = add i64 %1019, %1021
  %1023 = or i64 %12, -5602311898251423519
  %1024 = xor i64 %12, -1
  %1025 = and i64 %1024, -6460591111741742286
  %1026 = and i64 %12, 6460591111741742285
  %1027 = or i64 %1025, %1026
  %1028 = xor i64 1447847493555581907, %1027
  %1029 = xor i64 %12, -1
  %1030 = or i64 5602311898251423518, %1029
  %1031 = xor i64 %1030, -1
  %1032 = and i64 %1031, -1
  %1033 = or i64 %1028, %1032
  %1034 = xor i64 %1033, %1018
  %1035 = xor i64 %1034, 4935215494545942439
  %1036 = xor i64 %1035, %1023
  %1037 = xor i64 %1036, %1022
  %1038 = and i64 %6, 4127387690015494782
  %1039 = xor i64 %6, -1
  %1040 = or i64 -4127387690015494783, %1039
  %1041 = xor i64 %1040, -1
  %1042 = and i64 %1041, -1
  %1043 = and i64 %10, 1440060509966043898
  %1044 = xor i64 %10, -1
  %1045 = or i64 -1440060509966043899, %1044
  %1046 = xor i64 %1045, -1
  %1047 = and i64 %1046, -1
  %1048 = add i64 %120, 3710656860850182329
  %1049 = add i64 5819167557480140134, %120
  %1050 = sub i64 %1049, 2108510696629957805
  %1051 = xor i64 %1048, %1042
  %1052 = xor i64 %1051, %1043
  %1053 = xor i64 %1052, %1050
  %1054 = xor i64 %1053, %1047
  %1055 = xor i64 %1054, -8587679323972693993
  %1056 = xor i64 %1055, %1038
  %1057 = mul i64 %1037, %1056
  %1058 = trunc i64 %1057 to i32
  store i32 %1058, i32* %1017, align 4
  %1059 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %1059, align 4
  %1060 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %1060, align 4
  %1061 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %1061, align 4
  %1062 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %1063 = load i32, i32* %1062, align 4
  store i32 %1063, i32* %dispatcher, align 4
  %1064 = load i8*, i8** %9, align 8
  %1065 = load i8, i8* %1064, align 1
  %1066 = mul i8 %1065, 2
  %1067 = mul i8 %1065, 2
  %1068 = add i64 %10, -2012047323805751072
  %1069 = add i64 -4799417877316251310, %10
  %1070 = add i64 %1069, 2787370553510500238
  %1071 = add i64 %82, -3659728164336627446
  %1072 = add i64 3025219182883308361, %82
  %1073 = sub i64 %1072, 6684947347219935807
  %1074 = xor i64 %1073, -725312578876760657
  %1075 = xor i64 %1074, %1071
  %1076 = xor i64 %1075, %1070
  %1077 = xor i64 %1076, %1068
  %1078 = sext i32 %3 to i64
  %1079 = and i64 %1078, -8730497436052909421
  %1080 = xor i64 %1078, -1
  %1081 = or i64 8730497436052909420, %1080
  %1082 = xor i64 %1081, -1
  %1083 = and i64 %1082, -1
  %1084 = or i64 %82, -4814162750698417468
  %1085 = xor i64 %82, -1
  %1086 = and i64 -4814162750698417468, %1085
  %1087 = add i64 %1086, %82
  %1088 = xor i64 %1079, %1084
  %1089 = xor i64 %1088, %1087
  %1090 = xor i64 %1089, 8280066811364094622
  %1091 = xor i64 %1090, %1083
  %1092 = mul i64 %1077, %1091
  %1093 = trunc i64 %1092 to i8
  %1094 = add i8 %1093, %1067
  %1095 = mul i8 %1066, %1094
  %1096 = srem i8 %1095, 4
  %1097 = icmp eq i8 %1096, 0
  %1098 = mul i8 %1065, %1065
  %1099 = mul i8 %1098, %1065
  %1100 = add i8 %1099, %1065
  %1101 = srem i8 %1100, 2
  %1102 = icmp eq i8 %1101, 0
  %1103 = xor i1 %1097, true
  %1104 = xor i1 %1102, true
  %1105 = or i1 %1103, %1104
  %1106 = xor i1 %1105, true
  %1107 = and i1 %1106, true
  %1108 = select i1 %1107, i32 595012098, i32 595012096
  %1109 = xor i32 %1108, 2
  store i32 %1109, i32* %5, align 4
  %1110 = call i8** @bf6100004335245622257(i32* %5)
  %1111 = load i8*, i8** %1110, align 8
  indirectbr i8* %1111, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1112 = load i8*, i8** %83, align 8
  %1113 = load i8, i8* %1112, align 1
  %1114 = and i8 %1113, 1
  %1115 = add i64 %8, 2509439937985255947
  %1116 = sub i64 0, %8
  %1117 = sub i64 2509439937985255947, %1116
  %1118 = add i64 %8, 2462042686849619122
  %1119 = xor i64 2462042686849619122, %8
  %1120 = and i64 2462042686849619122, %8
  %1121 = mul i64 2, %1120
  %1122 = add i64 %1119, %1121
  %1123 = or i64 %48, 1058826940579327093
  %1124 = and i64 1058826940579327093, %48
  %1125 = xor i64 1058826940579327093, %48
  %1126 = or i64 %1124, %1125
  %1127 = xor i64 %1122, %1126
  %1128 = xor i64 %1127, -546594677633385019
  %1129 = xor i64 %1128, %1117
  %1130 = xor i64 %1129, %1118
  %1131 = xor i64 %1130, %1123
  %1132 = xor i64 %1131, %1115
  %1133 = add i64 %80, -3563439405646962257
  %1134 = add i64 1405677096590174461, %80
  %1135 = sub i64 %1134, 4969116502237136718
  %1136 = add i64 %12, -777988244329952747
  %1137 = and i64 -777988244329952747, %12
  %1138 = or i64 -777988244329952747, %12
  %1139 = add i64 %1137, %1138
  %1140 = xor i64 %1135, %1133
  %1141 = xor i64 %1140, 0
  %1142 = xor i64 %1141, %1139
  %1143 = xor i64 %1142, %1136
  %1144 = mul i64 %1132, %1143
  %1145 = trunc i64 %1144 to i8
  %1146 = icmp eq i8 %1114, %1145
  %1147 = mul i8 %1113, %1113
  %1148 = and i8 %1147, %1113
  %1149 = or i8 %1147, %1113
  %1150 = add i8 %1148, %1149
  %1151 = mul i8 %1150, 3
  %1152 = srem i8 %1151, 2
  %1153 = icmp eq i8 %1152, 0
  %1154 = or i64 %120, 6969244869193732596
  %1155 = and i64 6969244869193732596, %120
  %1156 = xor i64 6969244869193732596, %120
  %1157 = or i64 %1155, %1156
  %1158 = add i64 %12, 8813661233376898266
  %1159 = add i64 -7977274566394106848, %12
  %1160 = add i64 %1159, -1655808273938546502
  %1161 = xor i64 %1157, %1158
  %1162 = xor i64 %1161, %1160
  %1163 = xor i64 %1162, %1154
  %1164 = xor i64 %1163, 7875864109897239585
  %1165 = or i64 %10, 3321066314574226336
  %1166 = and i64 3321066314574226336, %10
  %1167 = xor i64 3321066314574226336, %10
  %1168 = or i64 %1166, %1167
  %1169 = or i64 %48, -6034359563095619237
  %1170 = xor i64 %48, -1
  %1171 = and i64 -6034359563095619237, %1170
  %1172 = add i64 %1171, %48
  %1173 = add i64 %80, 6355483716133790584
  %1174 = sub i64 0, %80
  %1175 = sub i64 6355483716133790584, %1174
  %1176 = xor i64 7737054545837438945, %1168
  %1177 = xor i64 %1176, %1173
  %1178 = xor i64 %1177, %1172
  %1179 = xor i64 %1178, %1169
  %1180 = xor i64 %1179, %1165
  %1181 = xor i64 %1180, %1175
  %1182 = mul i64 %1164, %1181
  %1183 = trunc i64 %1182 to i1
  %1184 = xor i1 %1146, %1183
  %1185 = and i1 %1184, true
  %1186 = and i1 %1146, false
  %1187 = or i1 %1185, %1186
  %1188 = xor i1 %1153, true
  %1189 = sext i32 %3 to i64
  %1190 = add i64 %1189, -5151842171043469627
  %1191 = xor i64 -5151842171043469627, %1189
  %1192 = and i64 -5151842171043469627, %1189
  %1193 = mul i64 2, %1192
  %1194 = add i64 %1191, %1193
  %1195 = add i64 %80, -2430111976946542981
  %1196 = sub i64 0, %80
  %1197 = add i64 2430111976946542981, %1196
  %1198 = sub i64 0, %1197
  %1199 = and i64 %80, 3209137609639033950
  %1200 = or i64 -3209137609639033951, %80
  %1201 = sub i64 %1200, -3209137609639033951
  %1202 = xor i64 %1190, %1195
  %1203 = xor i64 %1202, -594448086255417187
  %1204 = xor i64 %1203, %1194
  %1205 = xor i64 %1204, %1199
  %1206 = xor i64 %1205, %1198
  %1207 = xor i64 %1206, %1201
  %1208 = or i64 %120, -7745133404794241100
  %1209 = xor i64 %120, -1
  %1210 = and i64 %1209, -7513593545773849925
  %1211 = and i64 %120, 7513593545773849924
  %1212 = or i64 %1210, %1211
  %1213 = xor i64 232384319652453647, %1212
  %1214 = xor i64 %120, -1
  %1215 = or i64 7745133404794241099, %1214
  %1216 = xor i64 %1215, -1
  %1217 = and i64 %1216, -1
  %1218 = or i64 %1213, %1217
  %1219 = add i64 %6, -3614915627131222565
  %1220 = sub i64 0, %6
  %1221 = add i64 3614915627131222565, %1220
  %1222 = sub i64 0, %1221
  %1223 = xor i64 %1222, -6175536395301487179
  %1224 = xor i64 %1223, %1208
  %1225 = xor i64 %1224, %1219
  %1226 = xor i64 %1225, %1218
  %1227 = mul i64 %1207, %1226
  %1228 = trunc i64 %1227 to i1
  %1229 = and i1 %1188, %1228
  %1230 = and i1 %1153, false
  %1231 = or i1 %1229, %1230
  %1232 = xor i1 %1187, %1231
  %1233 = xor i1 %1146, true
  %1234 = xor i1 %1153, true
  %1235 = or i1 %1233, %1234
  %1236 = xor i1 %1235, true
  %1237 = and i1 %1236, true
  %1238 = or i1 %1232, %1237
  %1239 = select i1 %1238, i32 595012102, i32 595012102
  %1240 = xor i32 %1239, 0
  store i32 %1240, i32* %5, align 4
  %1241 = call i8** @bf6100004335245622257(i32* %5)
  %1242 = load i8*, i8** %1241, align 8
  indirectbr i8* %1242, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %709, %EntryBasicBlockSplit
  %1243 = load i8*, i8** %121, align 8
  %1244 = load i8, i8* %1243, align 1
  %1245 = and i64 %12, 869436318058330168
  %1246 = xor i64 %12, -1
  %1247 = xor i64 869436318058330168, %1246
  %1248 = and i64 %1247, 869436318058330168
  %1249 = and i64 %6, 6100449577774407533
  %1250 = xor i64 %6, -1
  %1251 = xor i64 6100449577774407533, %1250
  %1252 = and i64 %1251, 6100449577774407533
  %1253 = xor i64 %1245, %1248
  %1254 = xor i64 %1253, %1252
  %1255 = xor i64 %1254, -1382924121376568643
  %1256 = xor i64 %1255, %1249
  %1257 = or i64 %10, -8231608569905545322
  %1258 = xor i64 %10, -1
  %1259 = and i64 %1258, 428264223944166117
  %1260 = and i64 %10, -428264223944166118
  %1261 = or i64 %1259, %1260
  %1262 = xor i64 -8632569715672959629, %1261
  %1263 = xor i64 %10, -1
  %1264 = or i64 8231608569905545321, %1263
  %1265 = xor i64 %1264, -1
  %1266 = and i64 %1265, -1
  %1267 = or i64 %1262, %1266
  %1268 = sext i32 %3 to i64
  %1269 = or i64 %1268, -7422005568956300628
  %1270 = xor i64 %1268, -1
  %1271 = and i64 %1270, -7179295706434464809
  %1272 = and i64 %1268, 7179295706434464808
  %1273 = or i64 %1271, %1272
  %1274 = xor i64 333752174517358971, %1273
  %1275 = xor i64 %1268, -1
  %1276 = or i64 7422005568956300627, %1275
  %1277 = xor i64 %1276, -1
  %1278 = and i64 %1277, -1
  %1279 = or i64 %1274, %1278
  %1280 = add i64 %122, 7818571551229396494
  %1281 = xor i64 7818571551229396494, %122
  %1282 = and i64 7818571551229396494, %122
  %1283 = mul i64 2, %1282
  %1284 = add i64 %1281, %1283
  %1285 = xor i64 %1257, %1269
  %1286 = xor i64 %1285, %1284
  %1287 = xor i64 %1286, %1267
  %1288 = xor i64 %1287, 6969619900495429930
  %1289 = xor i64 %1288, %1279
  %1290 = xor i64 %1289, %1280
  %1291 = mul i64 %1256, %1290
  %1292 = trunc i64 %1291 to i8
  %1293 = mul i8 %1244, %1292
  %1294 = mul i8 %1244, 2
  %1295 = add i8 2, %1294
  %1296 = mul i8 %1293, %1295
  %1297 = srem i8 %1296, 4
  %1298 = icmp eq i8 %1297, 0
  %1299 = mul i8 %1244, %1244
  %1300 = add i8 %1299, %1244
  %1301 = add i64 %48, 3122336614908850565
  %1302 = and i64 3122336614908850565, %48
  %1303 = or i64 3122336614908850565, %48
  %1304 = add i64 %1302, %1303
  %1305 = add i64 %122, 7809090188329836357
  %1306 = sub i64 0, %122
  %1307 = sub i64 7809090188329836357, %1306
  %1308 = sext i32 %dispatcher1 to i64
  %1309 = add i64 %1308, -5062942313887906899
  %1310 = add i64 5388801382150988408, %1308
  %1311 = sub i64 %1310, -7995000377670656309
  %1312 = xor i64 %1311, %1305
  %1313 = xor i64 %1312, %1304
  %1314 = xor i64 %1313, %1309
  %1315 = xor i64 %1314, %1307
  %1316 = xor i64 %1315, %1301
  %1317 = xor i64 %1316, 2868393434616033799
  %1318 = and i64 %120, 2081469765785734846
  %1319 = or i64 -2081469765785734847, %120
  %1320 = sub i64 %1319, -2081469765785734847
  %1321 = add i64 %8, 4041362923852656815
  %1322 = sub i64 0, %8
  %1323 = add i64 -4041362923852656815, %1322
  %1324 = sub i64 0, %1323
  %1325 = sext i32 %4 to i64
  %1326 = and i64 %1325, -3997021028306073698
  %1327 = xor i64 %1325, -1
  %1328 = or i64 3997021028306073697, %1327
  %1329 = xor i64 %1328, -1
  %1330 = and i64 %1329, -1
  %1331 = xor i64 %1320, -6095684059370768530
  %1332 = xor i64 %1331, %1318
  %1333 = xor i64 %1332, %1326
  %1334 = xor i64 %1333, %1321
  %1335 = xor i64 %1334, %1324
  %1336 = xor i64 %1335, %1330
  %1337 = mul i64 %1317, %1336
  %1338 = trunc i64 %1337 to i8
  %1339 = srem i8 %1300, %1338
  %1340 = and i64 %525, 170765418039371873
  %1341 = xor i64 %525, -1
  %1342 = or i64 -170765418039371874, %1341
  %1343 = xor i64 %1342, -1
  %1344 = and i64 %1343, -1
  %1345 = and i64 %10, 2110703247237045814
  %1346 = xor i64 %10, -1
  %1347 = or i64 -2110703247237045815, %1346
  %1348 = xor i64 %1347, -1
  %1349 = and i64 %1348, -1
  %1350 = xor i64 -5429431013392669993, %1344
  %1351 = xor i64 %1350, %1349
  %1352 = xor i64 %1351, %1340
  %1353 = xor i64 %1352, %1345
  %1354 = and i64 %82, 8867072853628584670
  %1355 = or i64 -8867072853628584671, %82
  %1356 = sub i64 %1355, -8867072853628584671
  %1357 = or i64 %8, 4279334003701720508
  %1358 = xor i64 %8, -1
  %1359 = and i64 %1358, 1061575943604887460
  %1360 = and i64 %8, -1061575943604887461
  %1361 = or i64 %1359, %1360
  %1362 = xor i64 3879928217688046104, %1361
  %1363 = xor i64 %8, -1
  %1364 = or i64 -4279334003701720509, %1363
  %1365 = xor i64 %1364, -1
  %1366 = and i64 %1365, -1
  %1367 = or i64 %1362, %1366
  %1368 = and i64 %120, 3070609894844204614
  %1369 = xor i64 %120, -1
  %1370 = xor i64 3070609894844204614, %1369
  %1371 = and i64 %1370, 3070609894844204614
  %1372 = xor i64 %1368, %1356
  %1373 = xor i64 %1372, %1371
  %1374 = xor i64 %1373, %1354
  %1375 = xor i64 %1374, 0
  %1376 = xor i64 %1375, %1357
  %1377 = xor i64 %1376, %1367
  %1378 = mul i64 %1353, %1377
  %1379 = trunc i64 %1378 to i8
  %1380 = icmp eq i8 %1339, %1379
  %1381 = or i1 %1298, %1380
  %1382 = select i1 %1381, i32 595012096, i32 595012100
  %1383 = xor i32 %1382, 4
  store i32 %1383, i32* %5, align 4
  %1384 = call i8** @bf6100004335245622257(i32* %5)
  %1385 = load i8*, i8** %1384, align 8
  indirectbr i8* %1385, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.2(i1 %.reload16, i1 %.reload17, i1 %.reload15, i1 %.reload14, i1 %.reload12, i1 %0, i1 %1, i1 %.reload18, i64* %.out, i1* %.out1, i64* %.out2, i1* %.out3, i1* %.out4, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9, i1* %.out10, i1* %.out11, i1* %.out12, i1* %.out13, i1* %.out14, i1* %.out15, i1* %.out16, i1* %.out17, i1* %.out18, i1* %.out19, i1* %.out20, i1* %.out21, i1* %.out22, i1* %.out23, i1* %.out24, i1* %.out25) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012098)
  %4 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.2, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012097)
  %6 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.2, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012101)
  %8 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.2, %.exitStub26), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012099)
  %10 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.2, %codeRepl), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012104)
  %12 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %11
  store i8* blockaddress(@render.extracted.2, %.exitStub), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012096)
  %14 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %13
  store i8* blockaddress(@render.extracted.2, %loopEnd), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012102)
  %16 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %15
  store i8* blockaddress(@render.extracted.2, %EntryBasicBlockSplit), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012103)
  %18 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %17
  store i8* blockaddress(@render.extracted.2, %145), i8** %18, align 8
  %19 = call i64 @h11804894491772278134(i64 595012100)
  %20 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %19
  store i8* blockaddress(@render.extracted.2, %loopStart), i8** %20, align 8
  %.reg2mem10 = alloca i1, align 1
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %21, align 4
  %22 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %22, align 4
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %23, align 4
  %24 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %26, align 4
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %27, align 4
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %28, align 4
  %29 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %29, align 4
  %30 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %30, align 4
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %32, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2052736990690125031, i32 0, i64 %33
  store i8** %34, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012100, i32* %2, align 4
  %35 = call i8** @bf1506284653360689564(i32* %2)
  %36 = load i8*, i8** %35, align 8
  indirectbr i8* %36, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %145
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub26
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i1, i1, i1, i1*, i1, i1*, i1*, i1*, i1, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1)* @render.extracted.2.extracted to i8*), i8** %.reload, align 8
  %37 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %40 = load i32, i32* %39, align 4
  %41 = srem i32 %38, %40
  store i32 %41, i32* %dispatcher, align 4
  %42 = load i8*, i8** %12, align 8
  %43 = load i8, i8* %42, align 1
  %44 = mul i8 %43, %43
  %45 = xor i8 %44, %43
  %46 = and i8 %44, %43
  %47 = mul i8 2, %46
  %48 = add i8 %45, %47
  %49 = mul i8 39, %48
  %50 = add i8 23, %49
  %51 = mul i8 -105, %50
  %52 = or i64 %15, -5093774104725055514
  %53 = xor i64 %15, -1
  %54 = and i64 %53, 8270481041427406237
  %55 = and i64 %15, -8270481041427406238
  %56 = or i64 %54, %55
  %57 = xor i64 -3780242194730481029, %56
  %58 = xor i64 %15, -1
  %59 = or i64 5093774104725055513, %58
  %60 = xor i64 %59, -1
  %61 = and i64 %60, -1
  %62 = or i64 %57, %61
  %63 = and i64 %17, -4781092478353575567
  %64 = xor i64 %17, -1
  %65 = xor i64 -4781092478353575567, %64
  %66 = and i64 %65, -4781092478353575567
  %67 = or i64 %9, 5645215332243613908
  %68 = xor i64 %9, -1
  %69 = and i64 5645215332243613908, %68
  %70 = add i64 %69, %9
  %71 = xor i64 %66, %52
  %72 = xor i64 %71, %63
  %73 = xor i64 %72, %62
  %74 = xor i64 %73, -2020029643530040623
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, %70
  %77 = or i64 %17, 8602292831967528507
  %78 = xor i64 %17, -1
  %79 = and i64 8602292831967528507, %78
  %80 = add i64 %79, %17
  %81 = and i64 %9, -7643597435019306724
  %82 = or i64 7643597435019306723, %9
  %83 = sub i64 %82, 7643597435019306723
  %84 = and i64 %33, -6836229660923201850
  %85 = or i64 6836229660923201849, %33
  %86 = sub i64 %85, 6836229660923201849
  %87 = xor i64 %83, %86
  %88 = xor i64 %87, %77
  %89 = xor i64 %88, %84
  %90 = xor i64 %89, %81
  %91 = xor i64 %90, 6451430529723115327
  %92 = xor i64 %91, %80
  %93 = mul i64 %76, %92
  %94 = trunc i64 %93 to i8
  %95 = add i8 %94, %51
  %96 = mul i8 %95, 3
  %97 = srem i8 %96, 2
  %98 = icmp eq i8 %97, 0
  %99 = mul i8 %43, %43
  %100 = add i8 %99, -98
  %101 = add i8 %100, %43
  %102 = or i64 %19, 7203274626686184992
  %103 = and i64 7203274626686184992, %19
  %104 = xor i64 7203274626686184992, %19
  %105 = or i64 %103, %104
  %106 = or i64 %9, 981288171715784675
  %107 = and i64 981288171715784675, %9
  %108 = xor i64 981288171715784675, %9
  %109 = or i64 %107, %108
  %110 = xor i64 424114604044755511, %102
  %111 = xor i64 %110, %109
  %112 = xor i64 %111, %105
  %113 = xor i64 %112, %106
  %114 = add i64 %5, 8891890672937182571
  %115 = sub i64 0, %5
  %116 = add i64 -8891890672937182571, %115
  %117 = sub i64 0, %116
  %118 = add i64 %7, 360567709997820374
  %119 = sub i64 0, %7
  %120 = sub i64 360567709997820374, %119
  %121 = add i64 %11, -1218978895835033487
  %122 = xor i64 -1218978895835033487, %11
  %123 = and i64 -1218978895835033487, %11
  %124 = mul i64 2, %123
  %125 = add i64 %122, %124
  %126 = xor i64 %117, %125
  %127 = xor i64 %126, %118
  %128 = xor i64 %127, %121
  %129 = xor i64 %128, -4054631636798354094
  %130 = xor i64 %129, %114
  %131 = xor i64 %130, %120
  %132 = mul i64 %113, %131
  %133 = trunc i64 %132 to i8
  %134 = sub i8 %101, %133
  %135 = srem i8 %134, 2
  %136 = icmp eq i8 %135, 0
  %137 = xor i1 %98, true
  %138 = or i1 %137, %136
  %139 = xor i1 %98, true
  %140 = sub i1 %138, %139
  %141 = select i1 %140, i32 595012101, i32 595012096
  %142 = xor i32 %141, 5
  store i32 %142, i32* %2, align 4
  %143 = call i8** @bf1506284653360689564(i32* %2)
  %144 = load i8*, i8** %143, align 8
  indirectbr i8* %144, [label %loopEnd, label %EntryBasicBlockSplit]

145:                                              ; preds = %145, %loopStart
  %146 = sdiv i64 17, 101
  store i64 %146, i64* %.out, align 8
  %147 = and i1 %.reload16, %.reload17
  %148 = xor i1 %.reload16, %.reload17
  %149 = or i1 %147, %148
  store i1 %149, i1* %.out1, align 1
  %150 = add i64 3, -80
  store i64 %150, i64* %.out2, align 8
  %151 = or i1 %.reload15, true
  %152 = and i1 %.reload15, true
  %153 = sub i1 %151, %152
  store i1 %153, i1* %.out3, align 1
  %154 = xor i1 %153, false
  %155 = xor i1 %154, true
  %156 = add i64 %7, -3441846997299014212
  %157 = sub i64 0, %7
  %158 = sub i64 -3441846997299014212, %157
  %159 = and i64 %17, 7983613686081337457
  %160 = or i64 -7983613686081337458, %17
  %161 = sub i64 %160, -7983613686081337458
  %162 = xor i64 %161, %156
  %163 = xor i64 %162, -7960097204947807365
  %164 = xor i64 %163, %158
  %165 = xor i64 %164, %159
  %166 = or i64 %5, -6248421252838206053
  %167 = xor i64 %5, -1
  %168 = and i64 -6248421252838206053, %167
  %169 = add i64 %168, %5
  %170 = or i64 %5, 3447891529382573706
  %171 = and i64 3447891529382573706, %5
  %172 = xor i64 3447891529382573706, %5
  %173 = or i64 %171, %172
  %174 = xor i64 %169, %173
  %175 = xor i64 %174, %166
  %176 = xor i64 %175, 215980564546540467
  %177 = xor i64 %176, %170
  %178 = mul i64 %165, %177
  %179 = trunc i64 %178 to i1
  %180 = xor i1 %155, %179
  %181 = and i1 %180, true
  %182 = and i1 %155, false
  %183 = or i1 %181, %182
  %184 = xor i1 %183, false
  %185 = xor i1 %155, true
  %186 = or i1 %185, false
  %187 = xor i1 %186, true
  %188 = and i1 %187, true
  %189 = or i1 %184, %188
  %190 = xor i1 %189, true
  %191 = xor i1 %190, true
  %192 = or i1 %191, false
  %193 = xor i1 %192, true
  %194 = and i1 %193, true
  store i1 %194, i1* %.out4, align 1
  %195 = or i64 %15, -6531330216302532272
  %196 = and i64 -6531330216302532272, %15
  %197 = xor i64 -6531330216302532272, %15
  %198 = or i64 %196, %197
  %199 = and i64 %13, -3113461133075608466
  %200 = xor i64 %13, -1
  %201 = or i64 3113461133075608465, %200
  %202 = xor i64 %201, -1
  %203 = and i64 %202, -1
  %204 = xor i64 %195, %203
  %205 = xor i64 %204, %198
  %206 = xor i64 %205, 394797568571808895
  %207 = xor i64 %206, %199
  %208 = sext i32 %dispatcher1 to i64
  %209 = or i64 %208, 2428023398326067604
  %210 = and i64 2428023398326067604, %208
  %211 = xor i64 2428023398326067604, %208
  %212 = or i64 %210, %211
  %213 = or i64 %19, 8055832741984261215
  %214 = xor i64 %19, -1
  %215 = and i64 %214, 1432594218361301114
  %216 = and i64 %19, -1432594218361301115
  %217 = or i64 %215, %216
  %218 = xor i64 8947959679470468133, %217
  %219 = xor i64 %19, -1
  %220 = or i64 -8055832741984261216, %219
  %221 = xor i64 %220, -1
  %222 = and i64 %221, -1
  %223 = or i64 %218, %222
  %224 = or i64 %15, -3474960821545185562
  %225 = xor i64 %15, -1
  %226 = and i64 -3474960821545185562, %225
  %227 = add i64 %226, %15
  %228 = xor i64 %223, %227
  %229 = xor i64 %228, %213
  %230 = xor i64 %229, %212
  %231 = xor i64 %230, %209
  %232 = xor i64 %231, %224
  %233 = xor i64 %232, 0
  %234 = mul i64 %207, %233
  %235 = trunc i64 %234 to i1
  %236 = xor i1 %.reload15, %235
  %237 = xor i1 %236, true
  %238 = xor i1 %237, true
  %239 = and i1 %238, false
  %240 = add i64 %19, 6151228757098154857
  %241 = add i64 4698531220397402513, %19
  %242 = sub i64 %241, -1452697536700752344
  %243 = or i64 %9, 2734742011430283674
  %244 = xor i64 %9, -1
  %245 = and i64 %244, 6146898818063024086
  %246 = and i64 %9, -6146898818063024087
  %247 = or i64 %245, %246
  %248 = xor i64 8123907374399985228, %247
  %249 = xor i64 %9, -1
  %250 = or i64 -2734742011430283675, %249
  %251 = xor i64 %250, -1
  %252 = and i64 %251, -1
  %253 = or i64 %248, %252
  %254 = add i64 %7, -8780266212821937726
  %255 = and i64 -8780266212821937726, %7
  %256 = or i64 -8780266212821937726, %7
  %257 = add i64 %255, %256
  %258 = xor i64 %253, %240
  %259 = xor i64 %258, %257
  %260 = xor i64 %259, %242
  %261 = xor i64 %260, %243
  %262 = xor i64 %261, -7894965419711705095
  %263 = xor i64 %262, %254
  %264 = and i64 %17, -3676760535931103215
  %265 = or i64 3676760535931103214, %17
  %266 = sub i64 %265, 3676760535931103214
  %267 = and i64 %11, -9192653436648099454
  %268 = xor i64 %11, -1
  %269 = xor i64 -9192653436648099454, %268
  %270 = and i64 %269, -9192653436648099454
  %271 = xor i64 -8343116179390578103, %266
  %272 = xor i64 %271, %267
  %273 = xor i64 %272, %264
  %274 = xor i64 %273, %270
  %275 = mul i64 %263, %274
  %276 = trunc i64 %275 to i1
  %277 = and i1 %237, %276
  %278 = or i1 %239, %277
  %279 = xor i1 %278, true
  %280 = xor i1 %237, true
  %281 = or i1 %280, false
  %282 = xor i1 %281, true
  %283 = and i1 %282, true
  %284 = or i1 %279, %283
  %285 = xor i1 %.reload15, true
  %286 = sub i1 false, %285
  %287 = add i1 %284, %286
  store i1 %287, i1* %.out5, align 1
  %288 = xor i1 %287, true
  %289 = xor i1 %288, true
  %290 = xor i1 %194, %289
  %291 = and i1 %290, %194
  %292 = xor i1 %291, %287
  %293 = and i1 %291, %287
  %294 = mul i1 false, %293
  %295 = add i1 %292, %294
  store i1 %295, i1* %.out6, align 1
  %296 = xor i1 %149, %295
  store i1 %296, i1* %.reg2mem2, align 1
  %.reload6 = load i1, i1* %.reg2mem2, align 1
  store i1 %.reload6, i1* %.out7, align 1
  %297 = xor i1 %.reload14, true
  %298 = and i1 %297, false
  %299 = or i64 %5, 1995174554627462979
  %300 = and i64 1995174554627462979, %5
  %301 = xor i64 1995174554627462979, %5
  %302 = or i64 %300, %301
  %303 = or i64 %19, -3959803120872419836
  %304 = and i64 -3959803120872419836, %19
  %305 = xor i64 -3959803120872419836, %19
  %306 = or i64 %304, %305
  %307 = add i64 %7, 7788340373639187181
  %308 = sub i64 0, %7
  %309 = add i64 -7788340373639187181, %308
  %310 = sub i64 0, %309
  %311 = xor i64 7938890050993984531, %299
  %312 = xor i64 %311, %303
  %313 = xor i64 %312, %307
  %314 = xor i64 %313, %310
  %315 = xor i64 %314, %302
  %316 = xor i64 %315, %306
  %317 = and i64 %17, -7573257517476650903
  %318 = xor i64 %17, -1
  %319 = xor i64 -7573257517476650903, %318
  %320 = and i64 %319, -7573257517476650903
  %321 = add i64 %13, -2308869661601995842
  %322 = sub i64 0, %13
  %323 = add i64 2308869661601995842, %322
  %324 = sub i64 0, %323
  %325 = or i64 %5, 7278453328084190799
  %326 = and i64 7278453328084190799, %5
  %327 = xor i64 7278453328084190799, %5
  %328 = or i64 %326, %327
  %329 = xor i64 %317, %324
  %330 = xor i64 %329, %328
  %331 = xor i64 %330, %320
  %332 = xor i64 %331, 6964900330483602971
  %333 = xor i64 %332, %325
  %334 = xor i64 %333, %321
  %335 = mul i64 %316, %334
  %336 = trunc i64 %335 to i1
  %337 = and i1 %.reload14, %336
  %338 = or i1 %298, %337
  %339 = xor i1 %338, true
  store i1 %339, i1* %.out8, align 1
  %340 = xor i1 %.reload15, true
  store i1 %340, i1* %.out9, align 1
  %341 = xor i1 %339, true
  %342 = sext i32 %dispatcher1 to i64
  %343 = and i64 %342, 7898214669272116088
  %344 = xor i64 %342, -1
  %345 = or i64 -7898214669272116089, %344
  %346 = xor i64 %345, -1
  %347 = and i64 %346, -1
  %348 = and i64 %17, -7166308075938647153
  %349 = xor i64 %17, -1
  %350 = xor i64 -7166308075938647153, %349
  %351 = and i64 %350, -7166308075938647153
  %352 = xor i64 -4749697252733283337, %347
  %353 = xor i64 %352, %343
  %354 = xor i64 %353, %348
  %355 = xor i64 %354, %351
  %356 = sext i32 %dispatcher1 to i64
  %357 = add i64 %356, 1667262248578004904
  %358 = add i64 -5442783380529507969, %356
  %359 = sub i64 %358, -7110045629107512873
  %360 = and i64 %17, 4164526708536026568
  %361 = or i64 -4164526708536026569, %17
  %362 = sub i64 %361, -4164526708536026569
  %363 = xor i64 %362, %360
  %364 = xor i64 %363, %357
  %365 = xor i64 %364, 9103651324248956359
  %366 = xor i64 %365, %359
  %367 = mul i64 %355, %366
  %368 = trunc i64 %367 to i1
  %369 = xor i1 %341, %368
  %370 = and i1 %369, %341
  %371 = xor i1 %339, true
  %372 = or i1 %371, true
  %373 = xor i1 %339, true
  %374 = sub i1 %372, %373
  %375 = or i1 %370, %374
  %376 = xor i1 %340, true
  %377 = xor i1 %376, true
  %378 = or i1 %377, true
  %379 = xor i1 %378, true
  %380 = and i1 %379, true
  %381 = and i1 %340, true
  %382 = xor i1 %381, true
  %383 = and i1 %380, %382
  %384 = add i1 %383, %381
  %385 = xor i1 %375, %384
  %386 = or i1 %339, true
  %387 = and i1 %339, true
  %388 = sub i1 %386, %387
  %389 = or i64 %13, -691861722947588346
  %390 = xor i64 %13, -1
  %391 = and i64 -691861722947588346, %390
  %392 = add i64 %391, %13
  %393 = and i64 %5, -6593381464283096696
  %394 = xor i64 %5, -1
  %395 = xor i64 -6593381464283096696, %394
  %396 = and i64 %395, -6593381464283096696
  %397 = xor i64 %396, %389
  %398 = xor i64 %397, %392
  %399 = xor i64 %398, 8024590684814798597
  %400 = xor i64 %399, %393
  %401 = and i64 %19, -5390328055711153296
  %402 = or i64 5390328055711153295, %19
  %403 = sub i64 %402, 5390328055711153295
  %404 = add i64 %17, 5452767764851719334
  %405 = sub i64 0, %17
  %406 = add i64 -5452767764851719334, %405
  %407 = sub i64 0, %406
  %408 = xor i64 %407, %404
  %409 = xor i64 %408, %401
  %410 = xor i64 %409, 7786161099544004045
  %411 = xor i64 %410, %403
  %412 = mul i64 %400, %411
  %413 = trunc i64 %412 to i1
  %414 = xor i1 %340, %413
  %415 = or i1 %388, %414
  %416 = xor i1 %415, true
  %417 = and i1 %416, true
  %418 = and i1 %415, false
  %419 = or i1 %417, %418
  %420 = and i1 %419, true
  %421 = and i1 %385, %420
  %422 = xor i1 %385, %420
  %423 = or i1 %421, %422
  store i1 %423, i1* %.out10, align 1
  %424 = xor i1 %423, false
  %425 = xor i1 %424, true
  store i1 %425, i1* %.out11, align 1
  %426 = and i1 %425, true
  store i1 %426, i1* %.reg2mem7, align 1
  %.reload9 = load i1, i1* %.reg2mem7, align 1
  store i1 %.reload9, i1* %.out12, align 1
  %.reload5 = load i1, i1* %.reg2mem2, align 1
  %427 = xor i1 %.reload5, true
  %428 = and i1 %427, true
  %.reload4 = load i1, i1* %.reg2mem2, align 1
  %429 = and i1 %.reload4, false
  %430 = xor i1 %429, true
  %431 = and i1 %428, %430
  %432 = add i1 %431, %429
  store i1 %432, i1* %.reg2mem10, align 1
  %433 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %434 = load i32, i32* %433, align 4
  %435 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %436 = load i32, i32* %435, align 4
  %437 = add i32 %434, %436
  store i32 %437, i32* %dispatcher, align 4
  %438 = load i8*, i8** %20, align 8
  %439 = load i8, i8* %438, align 1
  %440 = xor i8 %439, -1
  %441 = or i8 %440, 1
  %442 = xor i8 %439, -1
  %443 = sub i8 %441, %442
  %444 = or i64 %13, 651831713109817593
  %445 = and i64 651831713109817593, %13
  %446 = xor i64 651831713109817593, %13
  %447 = or i64 %445, %446
  %448 = or i64 %7, -8651386591750875486
  %449 = and i64 -8651386591750875486, %7
  %450 = xor i64 -8651386591750875486, %7
  %451 = or i64 %449, %450
  %452 = xor i64 -7500159348427425299, %447
  %453 = xor i64 %452, %444
  %454 = xor i64 %453, %448
  %455 = xor i64 %454, %451
  %456 = add i64 %9, 6725357239705740675
  %457 = sub i64 0, %9
  %458 = sub i64 6725357239705740675, %457
  %459 = and i64 %33, 2247630050406296460
  %460 = or i64 -2247630050406296461, %33
  %461 = sub i64 %460, -2247630050406296461
  %462 = xor i64 -622566817028846619, %459
  %463 = xor i64 %462, %456
  %464 = xor i64 %463, %461
  %465 = xor i64 %464, %458
  %466 = mul i64 %455, %465
  %467 = trunc i64 %466 to i8
  %468 = icmp eq i8 %443, %467
  %469 = mul i8 %439, %439
  %470 = add i8 %469, %439
  %471 = srem i8 %470, 2
  %472 = icmp eq i8 %471, 0
  %473 = and i1 %468, %472
  %474 = xor i1 %468, %472
  %475 = or i1 %473, %474
  %476 = select i1 %475, i32 595012097, i32 595012096
  %477 = or i64 %9, 5709146282889637606
  %478 = xor i64 %9, -1
  %479 = and i64 %478, 3591800504225456410
  %480 = and i64 %9, -3591800504225456411
  %481 = or i64 %479, %480
  %482 = xor i64 9142964530392698876, %481
  %483 = xor i64 %9, -1
  %484 = or i64 -5709146282889637607, %483
  %485 = xor i64 %484, -1
  %486 = and i64 %485, -1
  %487 = or i64 %482, %486
  %488 = add i64 %7, 7830733488762405246
  %489 = add i64 -3504416322403104679, %7
  %490 = add i64 %489, -7111594262544041691
  %491 = or i64 %7, 9179291757051559520
  %492 = xor i64 %7, -1
  %493 = and i64 %492, 1189709851169733139
  %494 = and i64 %7, -1189709851169733140
  %495 = or i64 %493, %494
  %496 = xor i64 8061962261620294771, %495
  %497 = xor i64 %7, -1
  %498 = or i64 -9179291757051559521, %497
  %499 = xor i64 %498, -1
  %500 = and i64 %499, -1
  %501 = or i64 %496, %500
  %502 = xor i64 %490, %487
  %503 = xor i64 %502, %477
  %504 = xor i64 %503, %501
  %505 = xor i64 %504, %491
  %506 = xor i64 %505, %488
  %507 = xor i64 %506, -8788812059777180335
  %508 = and i64 %13, 4372622947849343070
  %509 = or i64 -4372622947849343071, %13
  %510 = sub i64 %509, -4372622947849343071
  %511 = sext i32 %dispatcher1 to i64
  %512 = and i64 %511, -8230118902040413526
  %513 = xor i64 %511, -1
  %514 = or i64 8230118902040413525, %513
  %515 = xor i64 %514, -1
  %516 = and i64 %515, -1
  %517 = xor i64 %510, %508
  %518 = xor i64 %517, %512
  %519 = xor i64 %518, -6645571946030462031
  %520 = xor i64 %519, %516
  %521 = mul i64 %507, %520
  %522 = trunc i64 %521 to i32
  %523 = xor i32 %476, %522
  store i32 %523, i32* %2, align 4
  %524 = call i8** @bf1506284653360689564(i32* %2)
  %525 = load i8*, i8** %524, align 8
  indirectbr i8* %525, [label %loopEnd, label %145]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %31, align 8
  %526 = alloca i8**, align 8
  %527 = or i64 %33, -5075245746090895217
  %528 = and i64 -5075245746090895217, %33
  %529 = xor i64 -5075245746090895217, %33
  %530 = or i64 %528, %529
  %531 = add i64 %17, 3276296152164181474
  %532 = add i64 -5720891585082842509, %17
  %533 = sub i64 %532, -8997187737247023983
  %534 = and i64 %5, 5721868852687528412
  %535 = xor i64 %5, -1
  %536 = xor i64 5721868852687528412, %535
  %537 = and i64 %536, 5721868852687528412
  %538 = xor i64 %530, %534
  %539 = xor i64 %538, %531
  %540 = xor i64 %539, %527
  %541 = xor i64 %540, %533
  %542 = xor i64 %541, %537
  %543 = xor i64 %542, -4317195518887104125
  %544 = or i64 %33, 3079576832420836614
  %545 = and i64 3079576832420836614, %33
  %546 = xor i64 3079576832420836614, %33
  %547 = or i64 %545, %546
  %548 = add i64 %9, 10562189001728745
  %549 = sub i64 0, %9
  %550 = sub i64 10562189001728745, %549
  %551 = xor i64 %547, %548
  %552 = xor i64 %551, %544
  %553 = xor i64 %552, 0
  %554 = xor i64 %553, %550
  %555 = mul i64 %543, %554
  %556 = trunc i64 %555 to i1
  %557 = or i64 %33, 2552924490992323430
  %558 = and i64 2552924490992323430, %33
  %559 = xor i64 2552924490992323430, %33
  %560 = or i64 %558, %559
  %561 = or i64 %11, -3932211262186795591
  %562 = and i64 -3932211262186795591, %11
  %563 = xor i64 -3932211262186795591, %11
  %564 = or i64 %562, %563
  %565 = and i64 %11, -8564789766926646871
  %566 = xor i64 %11, -1
  %567 = xor i64 -8564789766926646871, %566
  %568 = and i64 %567, -8564789766926646871
  %569 = xor i64 %568, -7250718650015182213
  %570 = xor i64 %569, %561
  %571 = xor i64 %570, %557
  %572 = xor i64 %571, %564
  %573 = xor i64 %572, %565
  %574 = xor i64 %573, %560
  %575 = add i64 %15, -8363039215782883874
  %576 = sub i64 0, %15
  %577 = add i64 8363039215782883874, %576
  %578 = sub i64 0, %577
  %579 = add i64 %11, 5431945314374424226
  %580 = xor i64 5431945314374424226, %11
  %581 = and i64 5431945314374424226, %11
  %582 = mul i64 2, %581
  %583 = add i64 %580, %582
  %584 = xor i64 %575, %583
  %585 = xor i64 %584, %579
  %586 = xor i64 %585, 0
  %587 = xor i64 %586, %578
  %588 = mul i64 %574, %587
  %589 = and i64 %13, -4610639353779500350
  %590 = or i64 4610639353779500349, %13
  %591 = sub i64 %590, 4610639353779500349
  %592 = or i64 %17, 15568500616204277
  %593 = and i64 15568500616204277, %17
  %594 = xor i64 15568500616204277, %17
  %595 = or i64 %593, %594
  %596 = or i64 %15, -7131914019420867049
  %597 = xor i64 %15, -1
  %598 = and i64 -7131914019420867049, %597
  %599 = add i64 %598, %15
  %600 = xor i64 %589, %599
  %601 = xor i64 %600, 7638612301141234213
  %602 = xor i64 %601, %596
  %603 = xor i64 %602, %595
  %604 = xor i64 %603, %591
  %605 = xor i64 %604, %592
  %606 = add i64 %11, -1979810430293337108
  %607 = and i64 -1979810430293337108, %11
  %608 = or i64 -1979810430293337108, %11
  %609 = add i64 %607, %608
  %610 = and i64 %3, -2187995926297701503
  %611 = xor i64 %3, -1
  %612 = xor i64 -2187995926297701503, %611
  %613 = and i64 %612, -2187995926297701503
  %614 = add i64 %19, -3496742870532476734
  %615 = xor i64 -3496742870532476734, %19
  %616 = and i64 -3496742870532476734, %19
  %617 = mul i64 2, %616
  %618 = add i64 %615, %617
  %619 = xor i64 0, %606
  %620 = xor i64 %619, %610
  %621 = xor i64 %620, %614
  %622 = xor i64 %621, %609
  %623 = xor i64 %622, %618
  %624 = xor i64 %623, %613
  %625 = mul i64 %605, %624
  %626 = add i64 %5, -2467831205598591985
  %627 = add i64 7744687983918083617, %5
  %628 = sub i64 %627, -8234224884192876014
  %629 = add i64 %17, -1899761125383162162
  %630 = and i64 -1899761125383162162, %17
  %631 = or i64 -1899761125383162162, %17
  %632 = add i64 %630, %631
  %633 = xor i64 %626, 1701414810740031223
  %634 = xor i64 %633, %629
  %635 = xor i64 %634, %628
  %636 = xor i64 %635, %632
  %637 = or i64 %17, 1236564693903307484
  %638 = xor i64 %17, -1
  %639 = and i64 %638, 8947120544410590192
  %640 = and i64 %17, -8947120544410590193
  %641 = or i64 %639, %640
  %642 = xor i64 7855306560926656812, %641
  %643 = xor i64 %17, -1
  %644 = or i64 -1236564693903307485, %643
  %645 = xor i64 %644, -1
  %646 = and i64 %645, -1
  %647 = or i64 %642, %646
  %648 = or i64 %11, 1145564183766011558
  %649 = xor i64 %11, -1
  %650 = and i64 1145564183766011558, %649
  %651 = add i64 %650, %11
  %652 = xor i64 %651, %647
  %653 = xor i64 %652, 0
  %654 = xor i64 %653, %648
  %655 = xor i64 %654, %637
  %656 = mul i64 %636, %655
  %657 = trunc i64 %656 to i1
  %658 = add i64 %5, 2102475481967104863
  %659 = sub i64 0, %5
  %660 = sub i64 2102475481967104863, %659
  %661 = add i64 %9, 5663913194945950979
  %662 = add i64 -4371215476458439404, %9
  %663 = add i64 %662, -8411615402305161233
  %664 = xor i64 %661, %660
  %665 = xor i64 %664, %658
  %666 = xor i64 %665, 1784155917609501663
  %667 = xor i64 %666, %663
  %668 = sext i32 %dispatcher1 to i64
  %669 = and i64 %668, 8226056440205525515
  %670 = xor i64 %668, -1
  %671 = or i64 -8226056440205525516, %670
  %672 = xor i64 %671, -1
  %673 = and i64 %672, -1
  %674 = or i64 %5, -7666720522511970947
  %675 = xor i64 %5, -1
  %676 = and i64 -7666720522511970947, %675
  %677 = add i64 %676, %5
  %678 = xor i64 %669, %674
  %679 = xor i64 %678, %673
  %680 = xor i64 %679, 0
  %681 = xor i64 %680, %677
  %682 = mul i64 %667, %681
  %683 = trunc i64 %682 to i1
  %684 = and i64 %13, 3972291047959696722
  %685 = xor i64 %13, -1
  %686 = xor i64 3972291047959696722, %685
  %687 = and i64 %686, 3972291047959696722
  %688 = or i64 %19, 5172667922993893068
  %689 = xor i64 %19, -1
  %690 = and i64 5172667922993893068, %689
  %691 = add i64 %690, %19
  %692 = and i64 %33, 357665479074548695
  %693 = or i64 -357665479074548696, %33
  %694 = sub i64 %693, -357665479074548696
  %695 = xor i64 %691, %688
  %696 = xor i64 %695, %684
  %697 = xor i64 %696, %692
  %698 = xor i64 %697, 8190027660035497867
  %699 = xor i64 %698, %687
  %700 = xor i64 %699, %694
  %701 = or i64 %13, 2303521871741592190
  %702 = xor i64 %13, -1
  %703 = and i64 %702, 7193565279454323509
  %704 = and i64 %13, -7193565279454323510
  %705 = or i64 %703, %704
  %706 = xor i64 8945113622354673995, %705
  %707 = xor i64 %13, -1
  %708 = or i64 -2303521871741592191, %707
  %709 = xor i64 %708, -1
  %710 = and i64 %709, -1
  %711 = or i64 %706, %710
  %712 = add i64 %17, 2671796984408562222
  %713 = xor i64 2671796984408562222, %17
  %714 = and i64 2671796984408562222, %17
  %715 = mul i64 2, %714
  %716 = add i64 %713, %715
  %717 = xor i64 %711, %712
  %718 = xor i64 %717, 0
  %719 = xor i64 %718, %716
  %720 = xor i64 %719, %701
  %721 = mul i64 %700, %720
  %722 = trunc i64 %721 to i32
  call void @"9941920946239825184"(i32 10, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* %31, i8*** %526, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %556, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 %588, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %625, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %657, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %683, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %722, i32 0, i1* null, i1* null)
  %723 = load i8**, i8*** %526, align 8
  %724 = load i8*, i8** %723, align 8
  %725 = bitcast i8* %724 to i1 (i1, i1, i1, i1*, i1, i1*, i1*, i1*, i1, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %.reload8 = load i1, i1* %.reg2mem7, align 1
  %.reload11 = load i1, i1* %.reg2mem10, align 1
  %targetBlock = call i1 %725(i1 %.reload8, i1 %.reload11, i1 %.reload3, i1* %.out13, i1 %.reload12, i1* %.out14, i1* %.out15, i1* %.out16, i1 %0, i1* %.out17, i1 %1, i1* %.out18, i1* %.out19, i1* %.out20, i1* %.out21, i1* %.out22, i1* %.out23, i1* %.out24, i1* %.out25, i1 %.reload18)
  %726 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %727 = load i32, i32* %726, align 4
  %728 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %729 = load i32, i32* %728, align 4
  %730 = add i32 %727, %729
  %731 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %732 = load i32, i32* %731, align 4
  %733 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %734 = load i32, i32* %733, align 4
  %735 = sub i32 %732, -623982517
  %736 = sub i32 %735, %734
  %737 = add i32 %736, -623982517
  %738 = select i1 %targetBlock, i32 %730, i32 %737
  store i32 %738, i32* %dispatcher, align 4
  %739 = load i8*, i8** %10, align 8
  %740 = load i8, i8* %739, align 1
  %741 = mul i8 %740, 2
  %742 = or i64 %19, 4650172828985512448
  %743 = xor i64 %19, -1
  %744 = and i64 4650172828985512448, %743
  %745 = add i64 %744, %19
  %746 = and i64 %19, 2472821662180504693
  %747 = or i64 -2472821662180504694, %19
  %748 = sub i64 %747, -2472821662180504694
  %749 = xor i64 -4501467147622928613, %745
  %750 = xor i64 %749, %746
  %751 = xor i64 %750, %748
  %752 = xor i64 %751, %742
  %753 = sext i32 %dispatcher1 to i64
  %754 = and i64 %753, -3782119127996039217
  %755 = xor i64 %753, -1
  %756 = xor i64 -3782119127996039217, %755
  %757 = and i64 %756, -3782119127996039217
  %758 = sext i32 %dispatcher1 to i64
  %759 = or i64 %758, -4302214609460471281
  %760 = xor i64 %758, -1
  %761 = and i64 %760, -5602348829873672766
  %762 = and i64 %758, 5602348829873672765
  %763 = or i64 %761, %762
  %764 = xor i64 8505896653231830989, %763
  %765 = xor i64 %758, -1
  %766 = or i64 4302214609460471280, %765
  %767 = xor i64 %766, -1
  %768 = and i64 %767, -1
  %769 = or i64 %764, %768
  %770 = xor i64 %754, -28072298020788698
  %771 = xor i64 %770, %759
  %772 = xor i64 %771, %769
  %773 = xor i64 %772, %757
  %774 = mul i64 %752, %773
  %775 = trunc i64 %774 to i8
  %776 = mul i8 %740, %775
  %777 = sub i8 0, %776
  %778 = sub i8 2, %777
  %779 = mul i8 %741, %778
  %780 = srem i8 %779, 4
  %781 = icmp eq i8 %780, 0
  %782 = mul i8 %740, %740
  %783 = add i8 %782, %740
  %784 = srem i8 %783, 2
  %785 = icmp eq i8 %784, 0
  %786 = or i1 %781, %785
  %787 = select i1 %786, i32 595012103, i32 595012096
  %788 = xor i32 %787, 7
  store i32 %788, i32* %2, align 4
  %789 = call i8** @bf1506284653360689564(i32* %2)
  %790 = load i8*, i8** %789, align 8
  indirectbr i8* %790, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  %791 = or i64 %5, 9178699641402542479
  %792 = xor i64 %5, -1
  %793 = and i64 %792, 2231861718499060526
  %794 = and i64 %5, -2231861718499060527
  %795 = or i64 %793, %794
  %796 = xor i64 7032477303785398945, %795
  %797 = xor i64 %5, -1
  %798 = or i64 -9178699641402542480, %797
  %799 = xor i64 %798, -1
  %800 = and i64 %799, -1
  %801 = or i64 %796, %800
  %802 = add i64 %3, -1350744636384807491
  %803 = sub i64 0, %3
  %804 = sub i64 -1350744636384807491, %803
  %805 = add i64 %7, -2674380930063892214
  %806 = and i64 -2674380930063892214, %7
  %807 = or i64 -2674380930063892214, %7
  %808 = add i64 %806, %807
  %809 = xor i64 %804, -8681685390326576911
  %810 = xor i64 %809, %805
  %811 = xor i64 %810, %791
  %812 = xor i64 %811, %801
  %813 = xor i64 %812, %802
  %814 = xor i64 %813, %808
  %815 = add i64 %3, 4160195849555263342
  %816 = and i64 4160195849555263342, %3
  %817 = or i64 4160195849555263342, %3
  %818 = add i64 %816, %817
  %819 = or i64 %33, -3990857110734153569
  %820 = and i64 -3990857110734153569, %33
  %821 = xor i64 -3990857110734153569, %33
  %822 = or i64 %820, %821
  %823 = xor i64 %818, 3308596057377286161
  %824 = xor i64 %823, %819
  %825 = xor i64 %824, %822
  %826 = xor i64 %825, %815
  %827 = mul i64 %814, %826
  %828 = trunc i64 %827 to i1
  ret i1 %828

.exitStub26:                                      ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %829 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %829, align 4
  %830 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  %831 = add i64 %15, -3284193289384168261
  %832 = xor i64 -3284193289384168261, %15
  %833 = and i64 -3284193289384168261, %15
  %834 = mul i64 2, %833
  %835 = add i64 %832, %834
  %836 = add i64 %5, -1094835020987334381
  %837 = sub i64 0, %5
  %838 = add i64 1094835020987334381, %837
  %839 = sub i64 0, %838
  %840 = xor i64 %831, %835
  %841 = xor i64 %840, -6666593216218541549
  %842 = xor i64 %841, %839
  %843 = xor i64 %842, %836
  %844 = or i64 %3, -7024730139484973409
  %845 = xor i64 %3, -1
  %846 = and i64 -7024730139484973409, %845
  %847 = add i64 %846, %3
  %848 = and i64 %15, 812530991237997808
  %849 = xor i64 %15, -1
  %850 = xor i64 812530991237997808, %849
  %851 = and i64 %850, 812530991237997808
  %852 = and i64 %15, -7071079873675701460
  %853 = or i64 7071079873675701459, %15
  %854 = sub i64 %853, 7071079873675701459
  %855 = xor i64 %854, %851
  %856 = xor i64 %855, %852
  %857 = xor i64 %856, %848
  %858 = xor i64 %857, -3866478165683681253
  %859 = xor i64 %858, %847
  %860 = xor i64 %859, %844
  %861 = mul i64 %843, %860
  %862 = trunc i64 %861 to i32
  store i32 %862, i32* %830, align 4
  %863 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %863, align 4
  %864 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %864, align 4
  %865 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %865, align 4
  %866 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %867 = load i32, i32* %866, align 4
  store i32 %867, i32* %dispatcher, align 4
  %868 = load i8*, i8** %4, align 8
  %869 = load i8, i8* %868, align 1
  %870 = add i64 %15, 4529542021805765057
  %871 = sub i64 0, %15
  %872 = sub i64 4529542021805765057, %871
  %873 = or i64 %3, -200707086876865624
  %874 = xor i64 %3, -1
  %875 = and i64 %874, -3464618059337753917
  %876 = and i64 %3, 3464618059337753916
  %877 = or i64 %875, %876
  %878 = xor i64 3665303155941839211, %877
  %879 = xor i64 %3, -1
  %880 = or i64 200707086876865623, %879
  %881 = xor i64 %880, -1
  %882 = and i64 %881, -1
  %883 = or i64 %878, %882
  %884 = xor i64 %873, %883
  %885 = xor i64 %884, %872
  %886 = xor i64 %885, %870
  %887 = xor i64 %886, 9105264216892955851
  %888 = or i64 %17, 765590394967431094
  %889 = xor i64 %17, -1
  %890 = and i64 %889, -2307315617349772643
  %891 = and i64 %17, 2307315617349772642
  %892 = or i64 %890, %891
  %893 = xor i64 -3070002749302387413, %892
  %894 = xor i64 %17, -1
  %895 = or i64 -765590394967431095, %894
  %896 = xor i64 %895, -1
  %897 = and i64 %896, -1
  %898 = or i64 %893, %897
  %899 = add i64 %5, -5124151277527338412
  %900 = xor i64 -5124151277527338412, %5
  %901 = and i64 -5124151277527338412, %5
  %902 = mul i64 2, %901
  %903 = add i64 %900, %902
  %904 = add i64 %3, 4567066955238826188
  %905 = xor i64 4567066955238826188, %3
  %906 = and i64 4567066955238826188, %3
  %907 = mul i64 2, %906
  %908 = add i64 %905, %907
  %909 = xor i64 %908, %888
  %910 = xor i64 %909, %898
  %911 = xor i64 %910, %903
  %912 = xor i64 %911, 1769294859337159110
  %913 = xor i64 %912, %904
  %914 = xor i64 %913, %899
  %915 = mul i64 %887, %914
  %916 = trunc i64 %915 to i8
  %917 = mul i8 %869, %916
  %918 = mul i8 %869, 2
  %919 = add i8 2, %918
  %920 = mul i8 %917, %919
  %921 = srem i8 %920, 4
  %922 = icmp eq i8 %921, 0
  %923 = mul i8 %869, %869
  %924 = add i8 %923, -31
  %925 = add i8 %924, %869
  %926 = sub i8 %925, -31
  %927 = srem i8 %926, 2
  %928 = icmp eq i8 %927, 0
  %929 = and i1 %922, %928
  %930 = select i1 %929, i32 595012103, i32 595012102
  %931 = xor i32 %930, 1
  store i32 %931, i32* %2, align 4
  %932 = call i8** @bf1506284653360689564(i32* %2)
  %933 = load i8*, i8** %932, align 8
  indirectbr i8* %933, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %934 = load i8*, i8** %6, align 8
  %935 = load i8, i8* %934, align 1
  %936 = mul i8 %935, 2
  %937 = mul i8 %935, 2
  %938 = add i8 2, %937
  %939 = mul i8 %936, %938
  %940 = srem i8 %939, 4
  %941 = and i64 %11, -1129387627354392368
  %942 = xor i64 %11, -1
  %943 = xor i64 -1129387627354392368, %942
  %944 = and i64 %943, -1129387627354392368
  %945 = or i64 %3, 4567052419620452523
  %946 = and i64 4567052419620452523, %3
  %947 = xor i64 4567052419620452523, %3
  %948 = or i64 %946, %947
  %949 = xor i64 %941, %944
  %950 = xor i64 %949, -2792000604759888415
  %951 = xor i64 %950, %948
  %952 = xor i64 %951, %945
  %953 = add i64 %19, -8936850812284574436
  %954 = and i64 -8936850812284574436, %19
  %955 = or i64 -8936850812284574436, %19
  %956 = add i64 %954, %955
  %957 = and i64 %13, -7086750490943700473
  %958 = or i64 7086750490943700472, %13
  %959 = sub i64 %958, 7086750490943700472
  %960 = xor i64 %956, %953
  %961 = xor i64 %960, %959
  %962 = xor i64 %961, %957
  %963 = xor i64 %962, 0
  %964 = mul i64 %952, %963
  %965 = trunc i64 %964 to i8
  %966 = icmp eq i8 %940, %965
  %967 = mul i8 %935, %935
  %968 = add i8 %967, %935
  %969 = srem i8 %968, 2
  %970 = icmp eq i8 %969, 0
  %971 = or i1 %966, %970
  %972 = select i1 %971, i32 595012103, i32 595012096
  %973 = xor i32 %972, 7
  store i32 %973, i32* %2, align 4
  %974 = call i8** @bf1506284653360689564(i32* %2)
  %975 = load i8*, i8** %974, align 8
  indirectbr i8* %975, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %145, %EntryBasicBlockSplit
  %976 = load i8*, i8** %20, align 8
  %977 = load i8, i8* %976, align 1
  %978 = or i64 %7, 7384246037308797787
  %979 = and i64 7384246037308797787, %7
  %980 = xor i64 7384246037308797787, %7
  %981 = or i64 %979, %980
  %982 = or i64 %13, -626181535335848008
  %983 = and i64 -626181535335848008, %13
  %984 = xor i64 -626181535335848008, %13
  %985 = or i64 %983, %984
  %986 = xor i64 %981, %982
  %987 = xor i64 %986, %985
  %988 = xor i64 %987, %978
  %989 = xor i64 %988, -3579533507082833851
  %990 = or i64 %5, 7350709402346128453
  %991 = xor i64 %5, -1
  %992 = and i64 7350709402346128453, %991
  %993 = add i64 %992, %5
  %994 = add i64 %15, 2652155479705379459
  %995 = add i64 -7021149623826362062, %15
  %996 = add i64 %995, -8773438970177810095
  %997 = and i64 %17, -4415890728258247480
  %998 = xor i64 %17, -1
  %999 = or i64 4415890728258247479, %998
  %1000 = xor i64 %999, -1
  %1001 = and i64 %1000, -1
  %1002 = xor i64 %994, -1202538296229010803
  %1003 = xor i64 %1002, %996
  %1004 = xor i64 %1003, %1001
  %1005 = xor i64 %1004, %997
  %1006 = xor i64 %1005, %993
  %1007 = xor i64 %1006, %990
  %1008 = mul i64 %989, %1007
  %1009 = trunc i64 %1008 to i8
  %1010 = and i8 %977, %1009
  %1011 = add i64 %15, 1987780838096358000
  %1012 = add i64 1992576321581385645, %15
  %1013 = sub i64 %1012, 4795483485027645
  %1014 = or i64 %17, 9102786714392045057
  %1015 = xor i64 %17, -1
  %1016 = and i64 9102786714392045057, %1015
  %1017 = add i64 %1016, %17
  %1018 = xor i64 1556194116745157981, %1014
  %1019 = xor i64 %1018, %1013
  %1020 = xor i64 %1019, %1011
  %1021 = xor i64 %1020, %1017
  %1022 = and i64 %17, 2002875916087775913
  %1023 = xor i64 %17, -1
  %1024 = or i64 -2002875916087775914, %1023
  %1025 = xor i64 %1024, -1
  %1026 = and i64 %1025, -1
  %1027 = add i64 %9, 2183970848959721126
  %1028 = add i64 -8438662979269044297, %9
  %1029 = add i64 %1028, -7824110245480786193
  %1030 = or i64 %33, 2352664483613502104
  %1031 = and i64 2352664483613502104, %33
  %1032 = xor i64 2352664483613502104, %33
  %1033 = or i64 %1031, %1032
  %1034 = xor i64 3511070726221684469, %1022
  %1035 = xor i64 %1034, %1029
  %1036 = xor i64 %1035, %1030
  %1037 = xor i64 %1036, %1033
  %1038 = xor i64 %1037, %1027
  %1039 = xor i64 %1038, %1026
  %1040 = mul i64 %1021, %1039
  %1041 = trunc i64 %1040 to i8
  %1042 = icmp eq i8 %1010, %1041
  %1043 = mul i8 %977, %977
  %1044 = add i8 %1043, %977
  %1045 = srem i8 %1044, 2
  %1046 = sext i32 %dispatcher1 to i64
  %1047 = add i64 %1046, 5901259016284418779
  %1048 = add i64 1132694093279710555, %1046
  %1049 = sub i64 %1048, -4768564923004708224
  %1050 = and i64 %7, -6299136533113145242
  %1051 = xor i64 %7, -1
  %1052 = or i64 6299136533113145241, %1051
  %1053 = xor i64 %1052, -1
  %1054 = and i64 %1053, -1
  %1055 = xor i64 %1047, %1050
  %1056 = xor i64 %1055, %1049
  %1057 = xor i64 %1056, %1054
  %1058 = xor i64 %1057, 1149411940011277895
  %1059 = or i64 %33, 1644323028052197242
  %1060 = and i64 1644323028052197242, %33
  %1061 = xor i64 1644323028052197242, %33
  %1062 = or i64 %1060, %1061
  %1063 = and i64 %5, 3472045859942203935
  %1064 = or i64 -3472045859942203936, %5
  %1065 = sub i64 %1064, -3472045859942203936
  %1066 = sext i32 %dispatcher1 to i64
  %1067 = and i64 %1066, -806533028850364096
  %1068 = xor i64 %1066, -1
  %1069 = xor i64 -806533028850364096, %1068
  %1070 = and i64 %1069, -806533028850364096
  %1071 = xor i64 %1059, %1067
  %1072 = xor i64 %1071, %1062
  %1073 = xor i64 %1072, 0
  %1074 = xor i64 %1073, %1063
  %1075 = xor i64 %1074, %1065
  %1076 = xor i64 %1075, %1070
  %1077 = mul i64 %1058, %1076
  %1078 = trunc i64 %1077 to i8
  %1079 = icmp eq i8 %1045, %1078
  %1080 = or i1 %1042, %1079
  %1081 = select i1 %1080, i32 595012099, i32 595012100
  %1082 = xor i32 %1081, 7
  store i32 %1082, i32* %2, align 4
  %1083 = call i8** @bf1506284653360689564(i32* %2)
  %1084 = load i8*, i8** %1083, align 8
  indirectbr i8* %1084, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.3(i1 %.reload16, i1 %.reload17, i1 %.reload15, i1 %.reload14, i1 %.reload12, i1 %0, i1 %1, i64* %.out, i1* %.out1, i64* %.out2, i1* %.out3, i1* %.out4, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9, i1* %.out10, i1* %.out11, i1* %.out12, i1* %.out13, i1* %.out14, i1* %.out15, i1* %.out16, i1* %.out17, i1* %.out18, i1* %.out19, i1* %.out20, i1* %.out21, i1* %.out22, i1* %.out23, i1* %.out24, i1* %.out25) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012099)
  %4 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.3, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012100)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.3, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012097)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.3, %.exitStub), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012102)
  %10 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.3, %codeRepl), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012103)
  %12 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %11
  store i8* blockaddress(@render.extracted.3, %EntryBasicBlockSplit), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012098)
  %14 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %13
  store i8* blockaddress(@render.extracted.3, %56), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012096)
  %16 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %15
  store i8* blockaddress(@render.extracted.3, %loopEnd), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012101)
  %18 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %17
  store i8* blockaddress(@render.extracted.3, %loopStart), i8** %18, align 8
  %.reg2mem8 = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %27, align 4
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %29, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11790647338376632081, i32 0, i64 %30
  store i8** %31, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012101, i32* %2, align 4
  %32 = call i8** @bf14033556120813692093(i32* %2)
  %33 = load i8*, i8** %32, align 8
  indirectbr i8* %33, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %56
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (void (i1, i1*, i1, i1*, i1*, i1*, i1, i1*)* @render.extracted.3.extracted to i8*), i8** %.reload, align 8
  %34 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %35, %37
  store i32 %38, i32* %dispatcher, align 4
  %39 = load i8*, i8** %8, align 8
  %40 = load i8, i8* %39, align 1
  %41 = and i8 %40, 1
  %42 = icmp eq i8 %41, 0
  %43 = mul i8 %40, %40
  %44 = add i8 %43, %40
  %45 = mul i8 %44, 3
  %46 = srem i8 %45, 2
  %47 = icmp eq i8 %46, 0
  %48 = and i1 %42, %47
  %49 = xor i1 %42, %47
  %50 = or i1 %48, %49
  %51 = select i1 %50, i32 595012102, i32 595012096
  %52 = xor i32 %51, -381010440
  %53 = xor i32 %52, -381010434
  store i32 %53, i32* %2, align 4
  %54 = call i8** @bf14033556120813692093(i32* %2)
  %55 = load i8*, i8** %54, align 8
  indirectbr i8* %55, [label %loopEnd, label %EntryBasicBlockSplit]

56:                                               ; preds = %56, %loopStart
  %57 = and i64 %11, 2308581014873340289
  %58 = xor i64 %11, -1
  %59 = xor i64 2308581014873340289, %58
  %60 = and i64 %59, 2308581014873340289
  %61 = or i64 %7, 4540473402237708435
  %62 = xor i64 %7, -1
  %63 = and i64 4540473402237708435, %62
  %64 = add i64 %63, %7
  %65 = sext i32 %dispatcher1 to i64
  %66 = add i64 %65, -433755984940127200
  %67 = and i64 -433755984940127200, %65
  %68 = or i64 -433755984940127200, %65
  %69 = add i64 %67, %68
  %70 = xor i64 %61, -4073598509827576517
  %71 = xor i64 %70, %60
  %72 = xor i64 %71, %69
  %73 = xor i64 %72, %66
  %74 = xor i64 %73, %64
  %75 = xor i64 %74, %57
  %76 = and i64 %30, 4579169048193783809
  %77 = xor i64 %30, -1
  %78 = or i64 -4579169048193783810, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = and i64 %3, 3125309306423261931
  %82 = xor i64 %3, -1
  %83 = xor i64 3125309306423261931, %82
  %84 = and i64 %83, 3125309306423261931
  %85 = xor i64 %81, %84
  %86 = xor i64 %85, %80
  %87 = xor i64 %86, %76
  %88 = xor i64 %87, 6086685547038630691
  %89 = mul i64 %75, %88
  %90 = sdiv i64 %89, 101
  store i64 %90, i64* %.out, align 8
  %91 = or i1 %.reload16, %.reload17
  store i1 %91, i1* %.out1, align 1
  %92 = sub i64 3, 80
  store i64 %92, i64* %.out2, align 8
  %93 = xor i1 %.reload15, true
  %94 = and i1 %93, true
  %95 = and i64 %13, -2454893257551398098
  %96 = xor i64 %13, -1
  %97 = or i64 2454893257551398097, %96
  %98 = xor i64 %97, -1
  %99 = and i64 %98, -1
  %100 = add i64 %30, 2856936888540288307
  %101 = and i64 2856936888540288307, %30
  %102 = or i64 2856936888540288307, %30
  %103 = add i64 %101, %102
  %104 = xor i64 %103, 8611821182737516515
  %105 = xor i64 %104, %100
  %106 = xor i64 %105, %95
  %107 = xor i64 %106, %99
  %108 = sext i32 %dispatcher1 to i64
  %109 = or i64 %108, 3721281874614650967
  %110 = xor i64 %108, -1
  %111 = and i64 3721281874614650967, %110
  %112 = add i64 %111, %108
  %113 = add i64 %17, 6921955531456438748
  %114 = and i64 6921955531456438748, %17
  %115 = or i64 6921955531456438748, %17
  %116 = add i64 %114, %115
  %117 = add i64 %3, -6658413388346062019
  %118 = add i64 4936072147051620314, %3
  %119 = sub i64 %118, -6852258538311869283
  %120 = xor i64 %109, %113
  %121 = xor i64 %120, %119
  %122 = xor i64 %121, %117
  %123 = xor i64 %122, %116
  %124 = xor i64 %123, %112
  %125 = xor i64 %124, 0
  %126 = mul i64 %107, %125
  %127 = trunc i64 %126 to i1
  %128 = and i1 %.reload15, %127
  %129 = or i1 %94, %128
  %130 = or i64 %15, 514319877556423572
  %131 = xor i64 %15, -1
  %132 = and i64 %131, 3605105841780477572
  %133 = and i64 %15, -3605105841780477573
  %134 = or i64 %132, %133
  %135 = xor i64 3829418257516758288, %134
  %136 = xor i64 %15, -1
  %137 = or i64 -514319877556423573, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = or i64 %135, %139
  %141 = or i64 %30, -796224667328357060
  %142 = xor i64 %30, -1
  %143 = and i64 %142, -1433344309387203309
  %144 = and i64 %30, 1433344309387203308
  %145 = or i64 %143, %144
  %146 = xor i64 1794826374009630767, %145
  %147 = xor i64 %30, -1
  %148 = or i64 796224667328357059, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = or i64 %146, %150
  %152 = xor i64 %141, 4816586405062127567
  %153 = xor i64 %152, %140
  %154 = xor i64 %153, %130
  %155 = xor i64 %154, %151
  %156 = and i64 %3, -8701825544290762865
  %157 = or i64 8701825544290762864, %3
  %158 = sub i64 %157, 8701825544290762864
  %159 = and i64 %5, -4276726077662297809
  %160 = xor i64 %5, -1
  %161 = or i64 4276726077662297808, %160
  %162 = xor i64 %161, -1
  %163 = and i64 %162, -1
  %164 = xor i64 %158, %159
  %165 = xor i64 %164, 0
  %166 = xor i64 %165, %163
  %167 = xor i64 %166, %156
  %168 = mul i64 %155, %167
  %169 = trunc i64 %168 to i1
  %170 = xor i1 %129, %169
  store i1 %170, i1* %.out3, align 1
  %171 = and i1 %170, false
  store i1 %171, i1* %.out4, align 1
  %172 = and i1 %.reload15, true
  store i1 %172, i1* %.out5, align 1
  %173 = xor i1 %172, true
  %174 = and i1 %171, %173
  %175 = add i1 %174, %172
  store i1 %175, i1* %.out6, align 1
  %176 = xor i1 %91, %175
  store i1 %176, i1* %.out7, align 1
  %177 = xor i1 %.reload14, true
  %178 = and i1 %177, true
  %179 = and i1 %.reload14, false
  %180 = or i1 %178, %179
  store i1 %180, i1* %.out8, align 1
  %181 = xor i1 %.reload15, true
  store i1 %181, i1* %.out9, align 1
  %182 = xor i1 %181, true
  %183 = and i1 %180, %182
  %184 = add i1 %183, %181
  store i1 %184, i1* %.out10, align 1
  %185 = xor i1 %184, true
  store i1 %185, i1* %.out11, align 1
  %186 = and i1 %185, true
  store i1 %186, i1* %.out12, align 1
  %187 = or i1 %176, %186
  store i1 %187, i1* %.out13, align 1
  %188 = or i1 %.reload12, %187
  store i1 %188, i1* %.out14, align 1
  %189 = and i1 %.reload12, %187
  store i1 %189, i1* %.out15, align 1
  %190 = sub i1 %188, %189
  store i1 %190, i1* %.reg2mem2, align 1
  %.reload4 = load i1, i1* %.reg2mem2, align 1
  store i1 %.reload4, i1* %.out16, align 1
  %191 = xor i1 %0, true
  store i1 %191, i1* %.out17, align 1
  %192 = xor i1 %1, true
  store i1 %192, i1* %.out18, align 1
  %193 = or i1 %191, %192
  store i1 %193, i1* %.out19, align 1
  %194 = or i1 %193, true
  store i1 %194, i1* %.reg2mem5, align 1
  %.reload7 = load i1, i1* %.reg2mem5, align 1
  store i1 %.reload7, i1* %.out20, align 1
  %195 = xor i1 %193, false
  %196 = and i1 %195, %193
  store i1 %196, i1* %.reg2mem8, align 1
  %197 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %200 = load i32, i32* %199, align 4
  %201 = srem i32 %198, %200
  store i32 %201, i32* %dispatcher, align 4
  %202 = load i8*, i8** %14, align 8
  %203 = load i8, i8* %202, align 1
  %204 = mul i8 %203, %203
  %205 = add i8 %204, %203
  %206 = mul i8 %205, 3
  %207 = srem i8 %206, 2
  %208 = and i64 %13, -7923557207379473300
  %209 = xor i64 %13, -1
  %210 = xor i64 -7923557207379473300, %209
  %211 = and i64 %210, -7923557207379473300
  %212 = or i64 %5, -2002048154330079432
  %213 = xor i64 %5, -1
  %214 = and i64 -2002048154330079432, %213
  %215 = add i64 %214, %5
  %216 = and i64 %7, 4473077869925683778
  %217 = xor i64 %7, -1
  %218 = xor i64 4473077869925683778, %217
  %219 = and i64 %218, 4473077869925683778
  %220 = xor i64 %216, %215
  %221 = xor i64 %220, %219
  %222 = xor i64 %221, 2039734521504364085
  %223 = xor i64 %222, %208
  %224 = xor i64 %223, %212
  %225 = xor i64 %224, %211
  %226 = or i64 %5, -7779185688330547331
  %227 = and i64 -7779185688330547331, %5
  %228 = xor i64 -7779185688330547331, %5
  %229 = or i64 %227, %228
  %230 = and i64 %11, -8365282774571101960
  %231 = xor i64 %11, -1
  %232 = or i64 8365282774571101959, %231
  %233 = xor i64 %232, -1
  %234 = and i64 %233, -1
  %235 = xor i64 %229, %226
  %236 = xor i64 %235, %230
  %237 = xor i64 %236, %234
  %238 = xor i64 %237, 0
  %239 = mul i64 %225, %238
  %240 = trunc i64 %239 to i8
  %241 = icmp eq i8 %207, %240
  %242 = mul i8 %203, %203
  %243 = add i8 %242, %203
  %244 = sext i32 %dispatcher1 to i64
  %245 = add i64 %244, 2591527334257754680
  %246 = sub i64 0, %244
  %247 = add i64 -2591527334257754680, %246
  %248 = sub i64 0, %247
  %249 = add i64 %5, 8871868693062182791
  %250 = sub i64 0, %5
  %251 = add i64 -8871868693062182791, %250
  %252 = sub i64 0, %251
  %253 = or i64 %13, 114482911519922210
  %254 = xor i64 %13, -1
  %255 = and i64 %254, -7102104564584256574
  %256 = and i64 %13, 7102104564584256573
  %257 = or i64 %255, %256
  %258 = xor i64 -7140747346723654688, %257
  %259 = xor i64 %13, -1
  %260 = or i64 -114482911519922211, %259
  %261 = xor i64 %260, -1
  %262 = and i64 %261, -1
  %263 = or i64 %258, %262
  %264 = xor i64 -4754148800523689477, %263
  %265 = xor i64 %264, %253
  %266 = xor i64 %265, %252
  %267 = xor i64 %266, %249
  %268 = xor i64 %267, %245
  %269 = xor i64 %268, %248
  %270 = or i64 %9, -1984626569195215531
  %271 = xor i64 %9, -1
  %272 = and i64 -1984626569195215531, %271
  %273 = add i64 %272, %9
  %274 = and i64 %7, -5525119609268794695
  %275 = xor i64 %7, -1
  %276 = xor i64 -5525119609268794695, %275
  %277 = and i64 %276, -5525119609268794695
  %278 = xor i64 %277, %273
  %279 = xor i64 %278, %270
  %280 = xor i64 %279, 4620817493039809126
  %281 = xor i64 %280, %274
  %282 = mul i64 %269, %281
  %283 = trunc i64 %282 to i8
  %284 = srem i8 %243, %283
  %285 = icmp eq i8 %284, 0
  %286 = and i1 %241, %285
  %287 = select i1 %286, i32 595012096, i32 595012096
  %288 = xor i32 %287, 0
  store i32 %288, i32* %2, align 4
  %289 = call i8** @bf14033556120813692093(i32* %2)
  %290 = load i8*, i8** %289, align 8
  indirectbr i8* %290, [label %loopEnd, label %56]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %28, align 8
  %291 = call i8** @lk17476166181081627056(i64* %28)
  %292 = load i8*, i8** %291, align 8
  %293 = bitcast i8* %292 to void (i1, i1*, i1, i1*, i1*, i1*, i1, i1*)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %.reload6 = load i1, i1* %.reg2mem5, align 1
  %.reload9 = load i1, i1* %.reg2mem8, align 1
  call void %293(i1 %.reload9, i1* %.out21, i1 %.reload6, i1* %.out22, i1* %.out23, i1* %.out24, i1 %.reload3, i1* %.out25)
  %294 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %295 = load i32, i32* %294, align 4
  %296 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %297 = load i32, i32* %296, align 4
  %298 = srem i32 %295, %297
  store i32 %298, i32* %dispatcher, align 4
  %299 = load i8*, i8** %10, align 8
  %300 = load i8, i8* %299, align 1
  %301 = and i8 %300, 1
  %302 = icmp eq i8 %301, 1
  %303 = mul i8 %300, %300
  %304 = add i8 %303, %300
  %305 = srem i8 %304, 2
  %306 = and i64 %7, -4609095926466579433
  %307 = or i64 4609095926466579432, %7
  %308 = sub i64 %307, 4609095926466579432
  %309 = or i64 %3, 1718056702307921093
  %310 = and i64 1718056702307921093, %3
  %311 = xor i64 1718056702307921093, %3
  %312 = or i64 %310, %311
  %313 = and i64 %7, -3617915412716304940
  %314 = xor i64 %7, -1
  %315 = xor i64 -3617915412716304940, %314
  %316 = and i64 %315, -3617915412716304940
  %317 = xor i64 %308, %309
  %318 = xor i64 %317, %316
  %319 = xor i64 %318, %313
  %320 = xor i64 %319, 5014432214856635193
  %321 = xor i64 %320, %312
  %322 = xor i64 %321, %306
  %323 = or i64 %7, 477110022728080208
  %324 = xor i64 %7, -1
  %325 = and i64 477110022728080208, %324
  %326 = add i64 %325, %7
  %327 = or i64 %7, -1035776923487912862
  %328 = xor i64 %7, -1
  %329 = and i64 -1035776923487912862, %328
  %330 = add i64 %329, %7
  %331 = sext i32 %dispatcher1 to i64
  %332 = or i64 %331, -7873361252431342893
  %333 = xor i64 %331, -1
  %334 = and i64 %333, -5697063249563255950
  %335 = and i64 %331, 5697063249563255949
  %336 = or i64 %334, %335
  %337 = xor i64 2473536740063193505, %336
  %338 = xor i64 %331, -1
  %339 = or i64 7873361252431342892, %338
  %340 = xor i64 %339, -1
  %341 = and i64 %340, -1
  %342 = or i64 %337, %341
  %343 = xor i64 %330, %327
  %344 = xor i64 %343, %326
  %345 = xor i64 %344, 0
  %346 = xor i64 %345, %323
  %347 = xor i64 %346, %342
  %348 = xor i64 %347, %332
  %349 = mul i64 %322, %348
  %350 = trunc i64 %349 to i8
  %351 = icmp eq i8 %305, %350
  %352 = and i1 %302, %351
  %353 = xor i1 %302, %351
  %354 = or i1 %352, %353
  %355 = select i1 %354, i32 595012102, i32 595012096
  %356 = or i32 %355, 6
  %357 = and i32 %355, 6
  %358 = sub i32 %356, %357
  store i32 %358, i32* %2, align 4
  %359 = call i8** @bf14033556120813692093(i32* %2)
  %360 = load i8*, i8** %359, align 8
  indirectbr i8* %360, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %361 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %361, align 4
  %362 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %362, align 4
  %363 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %363, align 4
  %364 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %364, align 4
  %365 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %365, align 4
  %366 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %367 = load i32, i32* %366, align 4
  store i32 %367, i32* %dispatcher, align 4
  %368 = load i8*, i8** %6, align 8
  %369 = load i8, i8* %368, align 1
  %370 = and i8 %369, 1
  %371 = icmp eq i8 %370, 0
  %372 = mul i8 %369, %369
  %373 = xor i8 %372, %369
  %374 = and i8 %372, %369
  %375 = add i64 %15, 5495032772215711468
  %376 = sub i64 0, %15
  %377 = add i64 -5495032772215711468, %376
  %378 = sub i64 0, %377
  %379 = or i64 %3, -841422194427119769
  %380 = xor i64 %3, -1
  %381 = and i64 %380, -7063040475588772066
  %382 = and i64 %3, 7063040475588772065
  %383 = or i64 %381, %382
  %384 = xor i64 7613793542021417081, %383
  %385 = xor i64 %3, -1
  %386 = or i64 841422194427119768, %385
  %387 = xor i64 %386, -1
  %388 = and i64 %387, -1
  %389 = or i64 %384, %388
  %390 = add i64 %7, 2810272294622188345
  %391 = sub i64 0, %7
  %392 = sub i64 2810272294622188345, %391
  %393 = xor i64 %389, %379
  %394 = xor i64 %393, -7975070383729152007
  %395 = xor i64 %394, %378
  %396 = xor i64 %395, %390
  %397 = xor i64 %396, %375
  %398 = xor i64 %397, %392
  %399 = sext i32 %dispatcher1 to i64
  %400 = or i64 %399, -3725193848265238186
  %401 = and i64 -3725193848265238186, %399
  %402 = xor i64 -3725193848265238186, %399
  %403 = or i64 %401, %402
  %404 = add i64 %17, 824239623731101897
  %405 = sub i64 0, %17
  %406 = add i64 -824239623731101897, %405
  %407 = sub i64 0, %406
  %408 = xor i64 %400, %404
  %409 = xor i64 %408, 2076433935909733522
  %410 = xor i64 %409, %407
  %411 = xor i64 %410, %403
  %412 = mul i64 %398, %411
  %413 = trunc i64 %412 to i8
  %414 = mul i8 %413, %374
  %415 = add i8 %373, %414
  %416 = and i64 %7, -6722426788482442349
  %417 = xor i64 %7, -1
  %418 = xor i64 -6722426788482442349, %417
  %419 = and i64 %418, -6722426788482442349
  %420 = or i64 %7, -2123190324978413074
  %421 = xor i64 %7, -1
  %422 = and i64 %421, 1561927393945484654
  %423 = and i64 %7, -1561927393945484655
  %424 = or i64 %422, %423
  %425 = xor i64 -637825499391857536, %424
  %426 = xor i64 %7, -1
  %427 = or i64 2123190324978413073, %426
  %428 = xor i64 %427, -1
  %429 = and i64 %428, -1
  %430 = or i64 %425, %429
  %431 = and i64 %17, -1484559415078722217
  %432 = xor i64 %17, -1
  %433 = xor i64 -1484559415078722217, %432
  %434 = and i64 %433, -1484559415078722217
  %435 = xor i64 %434, %430
  %436 = xor i64 %435, %431
  %437 = xor i64 %436, %416
  %438 = xor i64 %437, %420
  %439 = xor i64 %438, -5357500725084274415
  %440 = xor i64 %439, %419
  %441 = or i64 %11, -1845201264838493272
  %442 = and i64 -1845201264838493272, %11
  %443 = xor i64 -1845201264838493272, %11
  %444 = or i64 %442, %443
  %445 = and i64 %9, 904308234481002292
  %446 = or i64 -904308234481002293, %9
  %447 = sub i64 %446, -904308234481002293
  %448 = xor i64 %445, -8902982423007089225
  %449 = xor i64 %448, %441
  %450 = xor i64 %449, %444
  %451 = xor i64 %450, %447
  %452 = mul i64 %440, %451
  %453 = trunc i64 %452 to i8
  %454 = mul i8 %453, %415
  %455 = add i8 23, %454
  %456 = mul i8 -105, %455
  %457 = add i8 111, %456
  %458 = and i64 %30, -6268822541563685296
  %459 = or i64 6268822541563685295, %30
  %460 = sub i64 %459, 6268822541563685295
  %461 = or i64 %15, 8397434696077018202
  %462 = and i64 8397434696077018202, %15
  %463 = xor i64 8397434696077018202, %15
  %464 = or i64 %462, %463
  %465 = add i64 %7, 4776150822837152378
  %466 = xor i64 4776150822837152378, %7
  %467 = and i64 4776150822837152378, %7
  %468 = mul i64 2, %467
  %469 = add i64 %466, %468
  %470 = xor i64 %465, %461
  %471 = xor i64 %470, %460
  %472 = xor i64 %471, %464
  %473 = xor i64 %472, %458
  %474 = xor i64 %473, %469
  %475 = xor i64 %474, 1681000223025335471
  %476 = or i64 %30, 2725842497299493638
  %477 = xor i64 %30, -1
  %478 = and i64 2725842497299493638, %477
  %479 = add i64 %478, %30
  %480 = or i64 %3, -1882084647771982102
  %481 = xor i64 %3, -1
  %482 = and i64 -1882084647771982102, %481
  %483 = add i64 %482, %3
  %484 = xor i64 %479, -4890760800609804563
  %485 = xor i64 %484, %480
  %486 = xor i64 %485, %483
  %487 = xor i64 %486, %476
  %488 = mul i64 %475, %487
  %489 = trunc i64 %488 to i8
  %490 = mul i8 %457, %489
  %491 = srem i8 %490, 2
  %492 = icmp eq i8 %491, 0
  %493 = or i1 %371, %492
  %494 = select i1 %493, i32 595012096, i32 595012103
  %495 = xor i32 %494, -1
  %496 = add i64 %9, -7609657904268678701
  %497 = xor i64 -7609657904268678701, %9
  %498 = and i64 -7609657904268678701, %9
  %499 = mul i64 2, %498
  %500 = add i64 %497, %499
  %501 = and i64 %11, 4108888200167573556
  %502 = xor i64 %11, -1
  %503 = xor i64 4108888200167573556, %502
  %504 = and i64 %503, 4108888200167573556
  %505 = xor i64 %500, %504
  %506 = xor i64 %505, %496
  %507 = xor i64 %506, %501
  %508 = xor i64 %507, 9158297948512429291
  %509 = add i64 %30, -3239820718491342902
  %510 = add i64 -8215756879894585209, %30
  %511 = add i64 %510, 4975936161403242307
  %512 = sext i32 %dispatcher1 to i64
  %513 = or i64 %512, -2862300494862146930
  %514 = xor i64 %512, -1
  %515 = and i64 %514, 2884391790889822344
  %516 = and i64 %512, -2884391790889822345
  %517 = or i64 %515, %516
  %518 = xor i64 -1134770971566454266, %517
  %519 = xor i64 %512, -1
  %520 = or i64 2862300494862146929, %519
  %521 = xor i64 %520, -1
  %522 = and i64 %521, -1
  %523 = or i64 %518, %522
  %524 = xor i64 %509, %513
  %525 = xor i64 %524, 4474379973141573939
  %526 = xor i64 %525, %523
  %527 = xor i64 %526, %511
  %528 = mul i64 %508, %527
  %529 = trunc i64 %528 to i32
  %530 = and i32 %495, %529
  %531 = and i32 %494, -1077499346
  %532 = or i32 %530, %531
  %533 = xor i32 %532, 1077499350
  store i32 %533, i32* %2, align 4
  %534 = call i8** @bf14033556120813692093(i32* %2)
  %535 = load i8*, i8** %534, align 8
  indirectbr i8* %535, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %536 = load i8*, i8** %8, align 8
  %537 = load i8, i8* %536, align 1
  %538 = add i64 %11, -6130219661618146741
  %539 = sub i64 0, %11
  %540 = sub i64 -6130219661618146741, %539
  %541 = or i64 %17, -1232804590047206836
  %542 = xor i64 %17, -1
  %543 = and i64 %542, -370121220459803373
  %544 = and i64 %17, 370121220459803372
  %545 = or i64 %543, %544
  %546 = xor i64 1457233852390649695, %545
  %547 = xor i64 %17, -1
  %548 = or i64 1232804590047206835, %547
  %549 = xor i64 %548, -1
  %550 = and i64 %549, -1
  %551 = or i64 %546, %550
  %552 = xor i64 %538, %540
  %553 = xor i64 %552, %551
  %554 = xor i64 %553, 552943893156957971
  %555 = xor i64 %554, %541
  %556 = or i64 %30, -7871466189566873122
  %557 = xor i64 %30, -1
  %558 = and i64 %557, -5422304769260159300
  %559 = and i64 %30, 5422304769260159299
  %560 = or i64 %558, %559
  %561 = xor i64 2739021723696959330, %560
  %562 = xor i64 %30, -1
  %563 = or i64 7871466189566873121, %562
  %564 = xor i64 %563, -1
  %565 = and i64 %564, -1
  %566 = or i64 %561, %565
  %567 = and i64 %5, -6319865317388365096
  %568 = xor i64 %5, -1
  %569 = xor i64 -6319865317388365096, %568
  %570 = and i64 %569, -6319865317388365096
  %571 = xor i64 %567, %556
  %572 = xor i64 %571, 1696953911337063195
  %573 = xor i64 %572, %570
  %574 = xor i64 %573, %566
  %575 = mul i64 %555, %574
  %576 = trunc i64 %575 to i8
  %577 = and i8 %537, %576
  %578 = icmp eq i8 %577, 0
  %579 = mul i8 %537, %537
  %580 = add i8 %579, %537
  %581 = mul i8 %580, 3
  %582 = srem i8 %581, 2
  %583 = icmp eq i8 %582, 0
  %584 = or i1 %578, %583
  %585 = select i1 %584, i32 595012098, i32 595012096
  %586 = xor i32 %585, -1
  %587 = and i32 %586, 833681871
  %588 = and i32 %585, -833681872
  %589 = or i32 %587, %588
  %590 = xor i32 %589, 833681869
  store i32 %590, i32* %2, align 4
  %591 = call i8** @bf14033556120813692093(i32* %2)
  %592 = load i8*, i8** %591, align 8
  indirectbr i8* %592, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %56, %EntryBasicBlockSplit
  %593 = load i8*, i8** %4, align 8
  %594 = load i8, i8* %593, align 1
  %595 = mul i8 %594, %594
  %596 = add i8 %595, %594
  %597 = mul i8 %596, 3
  %598 = or i64 %3, 364645327436095831
  %599 = xor i64 %3, -1
  %600 = and i64 364645327436095831, %599
  %601 = add i64 %600, %3
  %602 = and i64 %9, -6670369144690569365
  %603 = xor i64 %9, -1
  %604 = or i64 6670369144690569364, %603
  %605 = xor i64 %604, -1
  %606 = and i64 %605, -1
  %607 = add i64 %11, 3552908225001426725
  %608 = add i64 -1121450274310331907, %11
  %609 = sub i64 %608, -4674358499311758632
  %610 = xor i64 %601, 4260756404974043751
  %611 = xor i64 %610, %606
  %612 = xor i64 %611, %602
  %613 = xor i64 %612, %598
  %614 = xor i64 %613, %607
  %615 = xor i64 %614, %609
  %616 = add i64 %15, -3091703555079818675
  %617 = sub i64 0, %15
  %618 = sub i64 -3091703555079818675, %617
  %619 = and i64 %15, -1034089972561662971
  %620 = or i64 1034089972561662970, %15
  %621 = sub i64 %620, 1034089972561662970
  %622 = and i64 %3, -472100670882648592
  %623 = xor i64 %3, -1
  %624 = xor i64 -472100670882648592, %623
  %625 = and i64 %624, -472100670882648592
  %626 = xor i64 %625, -6792937171966594386
  %627 = xor i64 %626, %621
  %628 = xor i64 %627, %618
  %629 = xor i64 %628, %619
  %630 = xor i64 %629, %622
  %631 = xor i64 %630, %616
  %632 = mul i64 %615, %631
  %633 = trunc i64 %632 to i8
  %634 = srem i8 %597, %633
  %635 = icmp eq i8 %634, 0
  %636 = mul i8 %594, %594
  %637 = add i8 %636, %594
  %638 = srem i8 %637, 2
  %639 = icmp eq i8 %638, 0
  %640 = and i1 %635, %639
  %641 = select i1 %640, i32 595012098, i32 595012101
  %642 = xor i32 %641, -792942731
  %643 = xor i32 %642, -792942734
  store i32 %643, i32* %2, align 4
  %644 = call i8** @bf14033556120813692093(i32* %2)
  %645 = load i8*, i8** %644, align 8
  indirectbr i8* %645, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render..split.4() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012280)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@render..split.4, %.exitStub), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012277)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@render..split.4, %.split), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012101)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@render..split.4, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012255)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@render..split.4, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split.4, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render..split.4, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render..split.4, %.split), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render..split.4, %.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

BogusBasciBlock:                                  ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render..split.4, %BogusBasciBlock), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render..split.4, %EntryBasicBlockSplit), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

.split:                                           ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %18 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

.exitStub:                                        ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.5(i64 %0, i64* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012103)
  %3 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.5, %BogusBasicBlock), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012098)
  %5 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.5, %.exitStub1), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012097)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.5, %defaultSwitchBasicBlock), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012100)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.5, %.exitStub), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012105)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.5, %codeRepl), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012101)
  %13 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %12
  store i8* blockaddress(@render.extracted.5, %EntryBasicBlockSplit), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012104)
  %15 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %14
  store i8* blockaddress(@render.extracted.5, %535), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012099)
  %17 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %16
  store i8* blockaddress(@render.extracted.5, %loopEnd), i8** %17, align 8
  %18 = call i64 @h11804894491772278134(i64 595012102)
  %19 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %18
  store i8* blockaddress(@render.extracted.5, %loopStart), i8** %19, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %20 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %20, align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  %22 = add i64 %0, -467421725106340433
  %23 = sub i64 0, %0
  %24 = sub i64 -467421725106340433, %23
  %25 = add i64 %0, -7583056299546212626
  %26 = add i64 -1996648820317101737, %0
  %27 = sub i64 %26, 5586407479229110889
  %28 = xor i64 %24, 5440179243065838161
  %29 = xor i64 %28, %25
  %30 = xor i64 %29, %22
  %31 = xor i64 %30, %27
  %32 = or i64 %0, 7509704013158878049
  %33 = xor i64 %0, -1
  %34 = and i64 %33, -2205844319759725400
  %35 = and i64 %0, 2205844319759725399
  %36 = or i64 %34, %35
  %37 = xor i64 -8551051169894398007, %36
  %38 = xor i64 %0, -1
  %39 = or i64 -7509704013158878050, %38
  %40 = xor i64 %39, -1
  %41 = and i64 %40, -1
  %42 = or i64 %37, %41
  %43 = add i64 %0, 739274170330004257
  %44 = sub i64 0, %0
  %45 = add i64 -739274170330004257, %44
  %46 = sub i64 0, %45
  %47 = or i64 %0, -7220667028772613939
  %48 = xor i64 %0, -1
  %49 = and i64 %48, -6186970327838421895
  %50 = and i64 %0, 6186970327838421894
  %51 = or i64 %49, %50
  %52 = xor i64 3596263787321957556, %51
  %53 = xor i64 %0, -1
  %54 = or i64 7220667028772613938, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = xor i64 %43, %47
  %59 = xor i64 %58, %57
  %60 = xor i64 %59, %46
  %61 = xor i64 %60, %32
  %62 = xor i64 %61, %42
  %63 = xor i64 %62, 3549057824279364254
  %64 = mul i64 %31, %63
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %21, align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %66, align 4
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %67, align 4
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %68, align 4
  %69 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %70 = or i64 %0, 4042355662557627654
  %71 = and i64 4042355662557627654, %0
  %72 = xor i64 4042355662557627654, %0
  %73 = or i64 %71, %72
  %74 = add i64 %0, 1969510604031737866
  %75 = sub i64 0, %0
  %76 = add i64 -1969510604031737866, %75
  %77 = sub i64 0, %76
  %78 = xor i64 %70, %77
  %79 = xor i64 %78, %73
  %80 = xor i64 %79, %74
  %81 = xor i64 %80, 1253807438371549075
  %82 = or i64 %0, 2606808031285391988
  %83 = xor i64 %0, -1
  %84 = and i64 %83, 9171321349898949819
  %85 = and i64 %0, -9171321349898949820
  %86 = or i64 %84, %85
  %87 = xor i64 6587123836863932111, %86
  %88 = xor i64 %0, -1
  %89 = or i64 -2606808031285391989, %88
  %90 = xor i64 %89, -1
  %91 = and i64 %90, -1
  %92 = or i64 %87, %91
  %93 = and i64 %0, 9165920349988761777
  %94 = or i64 -9165920349988761778, %0
  %95 = sub i64 %94, -9165920349988761778
  %96 = xor i64 %82, %93
  %97 = xor i64 %96, %95
  %98 = xor i64 %97, %92
  %99 = xor i64 %98, 1363469400282303798
  %100 = mul i64 %81, %99
  %101 = trunc i64 %100 to i32
  store i32 %101, i32* %69, align 4
  %102 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %102, align 4
  %103 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %103, align 4
  %104 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %104, align 4
  %105 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %105, align 4
  %106 = alloca i64, align 8
  %107 = alloca i64, align 8
  %108 = and i64 %0, 2077118730318388083
  %109 = xor i64 %0, -1
  %110 = or i64 -2077118730318388084, %109
  %111 = xor i64 %110, -1
  %112 = and i64 %111, -1
  %113 = add i64 %0, -4067472800682240843
  %114 = xor i64 -4067472800682240843, %0
  %115 = and i64 -4067472800682240843, %0
  %116 = mul i64 2, %115
  %117 = add i64 %114, %116
  %118 = and i64 %0, 5973715927561398646
  %119 = xor i64 %0, -1
  %120 = xor i64 5973715927561398646, %119
  %121 = and i64 %120, 5973715927561398646
  %122 = xor i64 %117, %108
  %123 = xor i64 %122, %121
  %124 = xor i64 %123, %112
  %125 = xor i64 %124, %113
  %126 = xor i64 %125, 6573982290633748845
  %127 = xor i64 %126, %118
  %128 = and i64 %0, -7858395199104250082
  %129 = xor i64 %0, -1
  %130 = xor i64 -7858395199104250082, %129
  %131 = and i64 %130, -7858395199104250082
  %132 = add i64 %0, -8336820551452437455
  %133 = add i64 1052203640810995051, %0
  %134 = add i64 %133, 9057719881446119110
  %135 = or i64 %0, 6868089799527297416
  %136 = and i64 6868089799527297416, %0
  %137 = xor i64 6868089799527297416, %0
  %138 = or i64 %136, %137
  %139 = xor i64 6523699820125995130, %135
  %140 = xor i64 %139, %132
  %141 = xor i64 %140, %131
  %142 = xor i64 %141, %138
  %143 = xor i64 %142, %134
  %144 = xor i64 %143, %128
  %145 = mul i64 %127, %144
  %146 = add i64 %0, -1086446147418668397
  %147 = xor i64 -1086446147418668397, %0
  %148 = and i64 -1086446147418668397, %0
  %149 = mul i64 2, %148
  %150 = add i64 %147, %149
  %151 = or i64 %0, -4562923519786517578
  %152 = xor i64 %0, -1
  %153 = and i64 %152, 5525556437953805689
  %154 = and i64 %0, -5525556437953805690
  %155 = or i64 %153, %154
  %156 = xor i64 -8357689741360855345, %155
  %157 = xor i64 %0, -1
  %158 = or i64 4562923519786517577, %157
  %159 = xor i64 %158, -1
  %160 = and i64 %159, -1
  %161 = or i64 %156, %160
  %162 = add i64 %0, 4575535534599859283
  %163 = add i64 8237765858978346008, %0
  %164 = sub i64 %163, 3662230324378486725
  %165 = xor i64 %161, %164
  %166 = xor i64 %165, %151
  %167 = xor i64 %166, %162
  %168 = xor i64 %167, %146
  %169 = xor i64 %168, %150
  %170 = xor i64 %169, -8471990761846689055
  %171 = or i64 %0, 8215274689494366559
  %172 = and i64 8215274689494366559, %0
  %173 = xor i64 8215274689494366559, %0
  %174 = or i64 %172, %173
  %175 = and i64 %0, 5481555193454549862
  %176 = xor i64 %0, -1
  %177 = xor i64 5481555193454549862, %176
  %178 = and i64 %177, 5481555193454549862
  %179 = or i64 %0, 3005020258309802660
  %180 = and i64 3005020258309802660, %0
  %181 = xor i64 3005020258309802660, %0
  %182 = or i64 %180, %181
  %183 = xor i64 %182, %171
  %184 = xor i64 %183, %179
  %185 = xor i64 %184, %178
  %186 = xor i64 %185, 0
  %187 = xor i64 %186, %175
  %188 = xor i64 %187, %174
  %189 = mul i64 %170, %188
  %190 = trunc i64 %189 to i32
  %191 = and i64 %0, -3341861581685552115
  %192 = xor i64 %0, -1
  %193 = xor i64 -3341861581685552115, %192
  %194 = and i64 %193, -3341861581685552115
  %195 = add i64 %0, -8065772754310930161
  %196 = add i64 650537415928255967, %0
  %197 = add i64 %196, -8716310170239186128
  %198 = and i64 %0, -7119600526780244587
  %199 = xor i64 %0, -1
  %200 = or i64 7119600526780244586, %199
  %201 = xor i64 %200, -1
  %202 = and i64 %201, -1
  %203 = xor i64 %202, %191
  %204 = xor i64 %203, %197
  %205 = xor i64 %204, %194
  %206 = xor i64 %205, -689116298414505657
  %207 = xor i64 %206, %198
  %208 = xor i64 %207, %195
  %209 = add i64 %0, 6334691631080188634
  %210 = xor i64 6334691631080188634, %0
  %211 = and i64 6334691631080188634, %0
  %212 = mul i64 2, %211
  %213 = add i64 %210, %212
  %214 = or i64 %0, 1515963740807909932
  %215 = and i64 1515963740807909932, %0
  %216 = xor i64 1515963740807909932, %0
  %217 = or i64 %215, %216
  %218 = or i64 %0, -7031698164134771994
  %219 = xor i64 %0, -1
  %220 = and i64 -7031698164134771994, %219
  %221 = add i64 %220, %0
  %222 = xor i64 %217, %213
  %223 = xor i64 %222, %221
  %224 = xor i64 %223, %209
  %225 = xor i64 %224, 0
  %226 = xor i64 %225, %214
  %227 = xor i64 %226, %218
  %228 = mul i64 %208, %227
  %229 = trunc i64 %228 to i32
  %230 = or i64 %0, 3700646046934449303
  %231 = and i64 3700646046934449303, %0
  %232 = xor i64 3700646046934449303, %0
  %233 = or i64 %231, %232
  %234 = add i64 %0, -5813537165031979497
  %235 = and i64 -5813537165031979497, %0
  %236 = or i64 -5813537165031979497, %0
  %237 = add i64 %235, %236
  %238 = xor i64 %230, %233
  %239 = xor i64 %238, 8302658079379525909
  %240 = xor i64 %239, %237
  %241 = xor i64 %240, %234
  %242 = or i64 %0, 2669910671286730789
  %243 = xor i64 %0, -1
  %244 = and i64 %243, 3313603165873154739
  %245 = and i64 %0, -3313603165873154740
  %246 = or i64 %244, %245
  %247 = xor i64 644337015095601814, %246
  %248 = xor i64 %0, -1
  %249 = or i64 -2669910671286730790, %248
  %250 = xor i64 %249, -1
  %251 = and i64 %250, -1
  %252 = or i64 %247, %251
  %253 = add i64 %0, -3270509224914786030
  %254 = add i64 6518592684844196535, %0
  %255 = sub i64 %254, -8657642163950569051
  %256 = or i64 %0, -3228294546621419000
  %257 = xor i64 %0, -1
  %258 = and i64 %257, 5483066992880740224
  %259 = and i64 %0, -5483066992880740225
  %260 = or i64 %258, %259
  %261 = xor i64 -6979155177309743736, %260
  %262 = xor i64 %0, -1
  %263 = or i64 3228294546621418999, %262
  %264 = xor i64 %263, -1
  %265 = and i64 %264, -1
  %266 = or i64 %261, %265
  %267 = xor i64 %266, %253
  %268 = xor i64 %267, %256
  %269 = xor i64 %268, 0
  %270 = xor i64 %269, %242
  %271 = xor i64 %270, %255
  %272 = xor i64 %271, %252
  %273 = mul i64 %241, %272
  %274 = trunc i64 %273 to i32
  %275 = or i64 %0, -7929764446603536141
  %276 = xor i64 %0, -1
  %277 = and i64 %276, 2230428123060968686
  %278 = and i64 %0, -2230428123060968687
  %279 = or i64 %277, %278
  %280 = xor i64 -8140322639228206051, %279
  %281 = xor i64 %0, -1
  %282 = or i64 7929764446603536140, %281
  %283 = xor i64 %282, -1
  %284 = and i64 %283, -1
  %285 = or i64 %280, %284
  %286 = or i64 %0, -7316122589545575390
  %287 = and i64 -7316122589545575390, %0
  %288 = xor i64 -7316122589545575390, %0
  %289 = or i64 %287, %288
  %290 = xor i64 %285, %286
  %291 = xor i64 %290, %275
  %292 = xor i64 %291, 23261701539498347
  %293 = xor i64 %292, %289
  %294 = and i64 %0, -5896438318779429787
  %295 = or i64 5896438318779429786, %0
  %296 = sub i64 %295, 5896438318779429786
  %297 = or i64 %0, 4697824677136937470
  %298 = xor i64 %0, -1
  %299 = and i64 %298, 2025148087358876325
  %300 = and i64 %0, -2025148087358876326
  %301 = or i64 %299, %300
  %302 = xor i64 6712830559717546843, %301
  %303 = xor i64 %0, -1
  %304 = or i64 -4697824677136937471, %303
  %305 = xor i64 %304, -1
  %306 = and i64 %305, -1
  %307 = or i64 %302, %306
  %308 = add i64 %0, 5776808834059936481
  %309 = sub i64 0, %0
  %310 = add i64 -5776808834059936481, %309
  %311 = sub i64 0, %310
  %312 = xor i64 %297, %294
  %313 = xor i64 %312, %308
  %314 = xor i64 %313, %311
  %315 = xor i64 %314, 0
  %316 = xor i64 %315, %296
  %317 = xor i64 %316, %307
  %318 = mul i64 %293, %317
  %319 = trunc i64 %318 to i32
  %320 = or i64 %0, -9028214925407947376
  %321 = and i64 -9028214925407947376, %0
  %322 = xor i64 -9028214925407947376, %0
  %323 = or i64 %321, %322
  %324 = or i64 %0, -6161162746163344920
  %325 = xor i64 %0, -1
  %326 = and i64 -6161162746163344920, %325
  %327 = add i64 %326, %0
  %328 = and i64 %0, 1317785752639761998
  %329 = xor i64 %0, -1
  %330 = or i64 -1317785752639761999, %329
  %331 = xor i64 %330, -1
  %332 = and i64 %331, -1
  %333 = xor i64 %332, %320
  %334 = xor i64 %333, %323
  %335 = xor i64 %334, %328
  %336 = xor i64 %335, -615281988743322629
  %337 = xor i64 %336, %327
  %338 = xor i64 %337, %324
  %339 = add i64 %0, 4055786707829775762
  %340 = add i64 2116772991585440475, %0
  %341 = sub i64 %340, -1939013716244335287
  %342 = and i64 %0, 1661099283039431619
  %343 = or i64 -1661099283039431620, %0
  %344 = sub i64 %343, -1661099283039431620
  %345 = xor i64 %339, %344
  %346 = xor i64 %345, %341
  %347 = xor i64 %346, %342
  %348 = xor i64 %347, 0
  %349 = mul i64 %338, %348
  %350 = add i64 %0, -3377018268252633912
  %351 = sub i64 0, %0
  %352 = add i64 3377018268252633912, %351
  %353 = sub i64 0, %352
  %354 = and i64 %0, 3923206669724553787
  %355 = xor i64 %0, -1
  %356 = xor i64 3923206669724553787, %355
  %357 = and i64 %356, 3923206669724553787
  %358 = xor i64 %357, %354
  %359 = xor i64 %358, %350
  %360 = xor i64 %359, 6073966883681282745
  %361 = xor i64 %360, %353
  %362 = and i64 %0, -6474742255304473142
  %363 = or i64 6474742255304473141, %0
  %364 = sub i64 %363, 6474742255304473141
  %365 = or i64 %0, 5073172561722203109
  %366 = xor i64 %0, -1
  %367 = and i64 5073172561722203109, %366
  %368 = add i64 %367, %0
  %369 = xor i64 %362, %364
  %370 = xor i64 %369, %365
  %371 = xor i64 %370, 0
  %372 = xor i64 %371, %368
  %373 = mul i64 %361, %372
  %374 = or i64 %0, 7504424980607924683
  %375 = xor i64 %0, -1
  %376 = and i64 7504424980607924683, %375
  %377 = add i64 %376, %0
  %378 = and i64 %0, 5912143903838807137
  %379 = or i64 -5912143903838807138, %0
  %380 = sub i64 %379, -5912143903838807138
  %381 = xor i64 %377, %380
  %382 = xor i64 %381, %378
  %383 = xor i64 %382, %374
  %384 = xor i64 %383, -47350968643937795
  %385 = and i64 %0, -4449231100884284411
  %386 = xor i64 %0, -1
  %387 = xor i64 -4449231100884284411, %386
  %388 = and i64 %387, -4449231100884284411
  %389 = add i64 %0, -4199137534217321202
  %390 = sub i64 0, %0
  %391 = add i64 4199137534217321202, %390
  %392 = sub i64 0, %391
  %393 = or i64 %0, -6664944839414907893
  %394 = xor i64 %0, -1
  %395 = and i64 %394, 62568209826904801
  %396 = and i64 %0, -62568209826904802
  %397 = or i64 %395, %396
  %398 = xor i64 -6674595714935355670, %397
  %399 = xor i64 %0, -1
  %400 = or i64 6664944839414907892, %399
  %401 = xor i64 %400, -1
  %402 = and i64 %401, -1
  %403 = or i64 %398, %402
  %404 = xor i64 %403, %389
  %405 = xor i64 %404, %388
  %406 = xor i64 %405, 0
  %407 = xor i64 %406, %393
  %408 = xor i64 %407, %385
  %409 = xor i64 %408, %392
  %410 = mul i64 %384, %409
  %411 = and i64 %0, -8936845504875717498
  %412 = xor i64 %0, -1
  %413 = or i64 8936845504875717497, %412
  %414 = xor i64 %413, -1
  %415 = and i64 %414, -1
  %416 = or i64 %0, -5934026472993506533
  %417 = and i64 -5934026472993506533, %0
  %418 = xor i64 -5934026472993506533, %0
  %419 = or i64 %417, %418
  %420 = add i64 %0, 747691776304984732
  %421 = and i64 747691776304984732, %0
  %422 = or i64 747691776304984732, %0
  %423 = add i64 %421, %422
  %424 = xor i64 %416, %423
  %425 = xor i64 %424, %415
  %426 = xor i64 %425, %411
  %427 = xor i64 %426, %419
  %428 = xor i64 %427, 3530911338412898383
  %429 = xor i64 %428, %420
  %430 = or i64 %0, -872333183716135224
  %431 = xor i64 %0, -1
  %432 = and i64 -872333183716135224, %431
  %433 = add i64 %432, %0
  %434 = or i64 %0, 6624404475742378575
  %435 = and i64 6624404475742378575, %0
  %436 = xor i64 6624404475742378575, %0
  %437 = or i64 %435, %436
  %438 = xor i64 %430, %434
  %439 = xor i64 %438, %433
  %440 = xor i64 %439, %437
  %441 = xor i64 %440, 0
  %442 = mul i64 %429, %441
  %443 = trunc i64 %442 to i1
  %444 = and i64 %0, -755181345885032987
  %445 = or i64 755181345885032986, %0
  %446 = sub i64 %445, 755181345885032986
  %447 = and i64 %0, 4992656402433788338
  %448 = xor i64 %0, -1
  %449 = xor i64 4992656402433788338, %448
  %450 = and i64 %449, 4992656402433788338
  %451 = xor i64 %447, %444
  %452 = xor i64 %451, -5456630134686456865
  %453 = xor i64 %452, %446
  %454 = xor i64 %453, %450
  %455 = or i64 %0, -5738646158130718352
  %456 = xor i64 %0, -1
  %457 = and i64 %456, 7925196414337884522
  %458 = and i64 %0, -7925196414337884523
  %459 = or i64 %457, %458
  %460 = xor i64 -2474781186409727974, %459
  %461 = xor i64 %0, -1
  %462 = or i64 5738646158130718351, %461
  %463 = xor i64 %462, -1
  %464 = and i64 %463, -1
  %465 = or i64 %460, %464
  %466 = or i64 %0, -7460303725428440604
  %467 = xor i64 %0, -1
  %468 = and i64 %467, -3688733221509595314
  %469 = and i64 %0, 3688733221509595313
  %470 = or i64 %468, %469
  %471 = xor i64 6105000809671196330, %470
  %472 = xor i64 %0, -1
  %473 = or i64 7460303725428440603, %472
  %474 = xor i64 %473, -1
  %475 = and i64 %474, -1
  %476 = or i64 %471, %475
  %477 = xor i64 %465, 0
  %478 = xor i64 %477, %476
  %479 = xor i64 %478, %455
  %480 = xor i64 %479, %466
  %481 = mul i64 %454, %480
  %482 = trunc i64 %481 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %145, i64* %107, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %190, i32 %229, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %274, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %319, i1* null, i1* null, i8* null, i64 %349, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %373, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %410, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %443, i1* null, i1 false, i1 false, i1 %482, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %483 = load i64, i64* %107, align 8
  %484 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8012535776871168785, i32 0, i64 %483
  store i8** %484, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  %485 = and i64 %0, -3309501304785523
  %486 = xor i64 %0, -1
  %487 = xor i64 -3309501304785523, %486
  %488 = and i64 %487, -3309501304785523
  %489 = and i64 %0, -5990297766305461057
  %490 = xor i64 %0, -1
  %491 = xor i64 -5990297766305461057, %490
  %492 = and i64 %491, -5990297766305461057
  %493 = and i64 %0, -176846784495793290
  %494 = or i64 176846784495793289, %0
  %495 = sub i64 %494, 176846784495793289
  %496 = xor i64 %485, %492
  %497 = xor i64 %496, %489
  %498 = xor i64 %497, %495
  %499 = xor i64 %498, %488
  %500 = xor i64 %499, %493
  %501 = xor i64 %500, 8997678304326688019
  %502 = add i64 %0, 7444716310948793452
  %503 = and i64 7444716310948793452, %0
  %504 = or i64 7444716310948793452, %0
  %505 = add i64 %503, %504
  %506 = add i64 %0, 2994537741175048783
  %507 = add i64 -8850127931165509129, %0
  %508 = add i64 %507, -6602078401368993704
  %509 = xor i64 %502, -1038155906764526430
  %510 = xor i64 %509, %506
  %511 = xor i64 %510, %505
  %512 = xor i64 %511, %508
  %513 = mul i64 %501, %512
  %514 = trunc i64 %513 to i32
  store i32 %514, i32* %1, align 4
  %515 = call i8** @bf1197571377139792254(i32* %1)
  %516 = load i8*, i8** %515, align 8
  indirectbr i8* %516, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %535
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub1
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i64)* @render.extracted.5.extracted to i8*), i8** %.reload, align 8
  %517 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %518 = load i32, i32* %517, align 4
  %519 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %520 = load i32, i32* %519, align 4
  %521 = srem i32 %518, %520
  store i32 %521, i32* %dispatcher, align 4
  %522 = load i8*, i8** %3, align 8
  %523 = load i8, i8* %522, align 1
  %524 = and i8 %523, 1
  %525 = icmp eq i8 %524, 1
  %526 = mul i8 %523, %523
  %527 = add i8 %526, %523
  %528 = srem i8 %527, 2
  %529 = icmp eq i8 %528, 0
  %530 = or i1 %525, %529
  %531 = select i1 %530, i32 595012103, i32 595012099
  %532 = xor i32 %531, 4
  store i32 %532, i32* %1, align 4
  %533 = call i8** @bf1197571377139792254(i32* %1)
  %534 = load i8*, i8** %533, align 8
  indirectbr i8* %534, [label %loopEnd, label %EntryBasicBlockSplit]

535:                                              ; preds = %535, %loopStart
  %536 = sdiv i64 44, 45
  store i64 %536, i64* %.out, align 8
  %537 = mul i64 54, 8
  %538 = add i64 51, 8
  %539 = mul i64 119, 30
  %540 = add i64 20, 144
  %541 = sdiv i64 59, 88
  %542 = add i64 %483, -4237788161292849488
  %543 = add i64 -2566028897080732645, %483
  %544 = sub i64 %543, 1671759264212116843
  %545 = add i64 %14, -7497656278635232481
  %546 = add i64 -6212083947166777004, %14
  %547 = sub i64 %546, 1285572331468455477
  %548 = xor i64 %545, %542
  %549 = xor i64 %548, %544
  %550 = xor i64 %549, -4399075651066656877
  %551 = xor i64 %550, %547
  %552 = add i64 %16, -1942036805168002066
  %553 = add i64 -1478572985685212211, %16
  %554 = sub i64 %553, 463463819482789855
  %555 = and i64 %16, -8213931992856713621
  %556 = or i64 8213931992856713620, %16
  %557 = sub i64 %556, 8213931992856713620
  %558 = and i64 %16, -1439486630874392436
  %559 = or i64 1439486630874392435, %16
  %560 = sub i64 %559, 1439486630874392435
  %561 = xor i64 %558, %555
  %562 = xor i64 %561, %560
  %563 = xor i64 %562, %554
  %564 = xor i64 %563, %557
  %565 = xor i64 %564, -5265130811727179495
  %566 = xor i64 %565, %552
  %567 = mul i64 %551, %566
  %568 = sub i64 62, %567
  %569 = mul i64 68, 5
  %570 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %571 = load i32, i32* %570, align 4
  %572 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %573 = load i32, i32* %572, align 4
  %574 = srem i32 %571, %573
  store i32 %574, i32* %dispatcher, align 4
  %575 = load i8*, i8** %11, align 8
  %576 = load i8, i8* %575, align 1
  %577 = and i8 %576, 1
  %578 = icmp eq i8 %577, 0
  %579 = mul i8 %576, %576
  %580 = sub i8 %579, 103
  %581 = add i8 %580, %576
  %582 = add i8 %581, 103
  %583 = mul i8 %582, 3
  %584 = srem i8 %583, 2
  %585 = icmp eq i8 %584, 0
  %586 = or i1 %578, %585
  %587 = select i1 %586, i32 595012104, i32 595012099
  %588 = xor i32 %587, 11
  store i32 %588, i32* %1, align 4
  %589 = call i8** @bf1197571377139792254(i32* %1)
  %590 = load i8*, i8** %589, align 8
  indirectbr i8* %590, [label %loopEnd, label %535]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %106, align 8
  %591 = call i8** @lk6108643113584584359(i64* %106)
  %592 = load i8*, i8** %591, align 8
  %593 = bitcast i8* %592 to i1 (i64)*
  %targetBlock = call i1 %593(i64 %0)
  %594 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %595 = load i32, i32* %594, align 4
  %596 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %597 = load i32, i32* %596, align 4
  %598 = srem i32 %595, %597
  %599 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %600 = load i32, i32* %599, align 4
  %601 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %602 = load i32, i32* %601, align 4
  %603 = srem i32 %600, %602
  %604 = select i1 %targetBlock, i32 %598, i32 %603
  store i32 %604, i32* %dispatcher, align 4
  %605 = load i8*, i8** %5, align 8
  %606 = load i8, i8* %605, align 1
  %607 = mul i8 %606, 2
  %608 = mul i8 %606, 2
  %609 = add i8 -85, %608
  %610 = sub i8 %609, -87
  %611 = mul i8 %607, %610
  %612 = srem i8 %611, 4
  %613 = icmp eq i8 %612, 0
  %614 = mul i8 %606, %606
  %615 = mul i8 %614, %606
  %616 = sub i8 0, %615
  %617 = or i64 %16, -1660513985842923866
  %618 = and i64 -1660513985842923866, %16
  %619 = xor i64 -1660513985842923866, %16
  %620 = or i64 %618, %619
  %621 = or i64 %8, 4756961892440467621
  %622 = and i64 4756961892440467621, %8
  %623 = xor i64 4756961892440467621, %8
  %624 = or i64 %622, %623
  %625 = xor i64 %620, 2954556406067203613
  %626 = xor i64 %625, %624
  %627 = xor i64 %626, %617
  %628 = xor i64 %627, %621
  %629 = add i64 %18, 5557915494984786483
  %630 = and i64 5557915494984786483, %18
  %631 = or i64 5557915494984786483, %18
  %632 = add i64 %630, %631
  %633 = and i64 %6, -3647982357466783310
  %634 = xor i64 %6, -1
  %635 = xor i64 -3647982357466783310, %634
  %636 = and i64 %635, -3647982357466783310
  %637 = or i64 %12, 1098318681342794083
  %638 = and i64 1098318681342794083, %12
  %639 = xor i64 1098318681342794083, %12
  %640 = or i64 %638, %639
  %641 = xor i64 %633, %640
  %642 = xor i64 %641, %629
  %643 = xor i64 %642, %632
  %644 = xor i64 %643, %637
  %645 = xor i64 %644, %636
  %646 = xor i64 %645, 0
  %647 = mul i64 %628, %646
  %648 = trunc i64 %647 to i8
  %649 = sub i8 %648, %606
  %650 = add i8 %616, %649
  %651 = or i64 %0, 530614957443034808
  %652 = xor i64 %0, -1
  %653 = and i64 %652, -8921302781706856456
  %654 = and i64 %0, 8921302781706856455
  %655 = or i64 %653, %654
  %656 = xor i64 -8976741558446573248, %655
  %657 = xor i64 %0, -1
  %658 = or i64 -530614957443034809, %657
  %659 = xor i64 %658, -1
  %660 = and i64 %659, -1
  %661 = or i64 %656, %660
  %662 = sext i32 %dispatcher1 to i64
  %663 = or i64 %662, -8814743298490832465
  %664 = xor i64 %662, -1
  %665 = and i64 %664, -9176948555661696295
  %666 = and i64 %662, 9176948555661696294
  %667 = or i64 %665, %666
  %668 = xor i64 364598352843819894, %667
  %669 = xor i64 %662, -1
  %670 = or i64 8814743298490832464, %669
  %671 = xor i64 %670, -1
  %672 = and i64 %671, -1
  %673 = or i64 %668, %672
  %674 = xor i64 %663, -7316381222572288107
  %675 = xor i64 %674, %673
  %676 = xor i64 %675, %661
  %677 = xor i64 %676, %651
  %678 = and i64 %10, 3856596574153312686
  %679 = xor i64 %10, -1
  %680 = or i64 -3856596574153312687, %679
  %681 = xor i64 %680, -1
  %682 = and i64 %681, -1
  %683 = add i64 %8, -7668264530045432878
  %684 = sub i64 0, %8
  %685 = add i64 7668264530045432878, %684
  %686 = sub i64 0, %685
  %687 = or i64 %483, 4000142185465403747
  %688 = xor i64 %483, -1
  %689 = and i64 %688, -4805542745718580105
  %690 = and i64 %483, 4805542745718580104
  %691 = or i64 %689, %690
  %692 = xor i64 -8445352889546357484, %691
  %693 = xor i64 %483, -1
  %694 = or i64 -4000142185465403748, %693
  %695 = xor i64 %694, -1
  %696 = and i64 %695, -1
  %697 = or i64 %692, %696
  %698 = xor i64 %682, %697
  %699 = xor i64 %698, %686
  %700 = xor i64 %699, %678
  %701 = xor i64 %700, %683
  %702 = xor i64 %701, 0
  %703 = xor i64 %702, %687
  %704 = mul i64 %677, %703
  %705 = trunc i64 %704 to i8
  %706 = sub i8 %705, %650
  %707 = srem i8 %706, 2
  %708 = icmp eq i8 %707, 0
  %709 = and i1 %613, %708
  %710 = or i64 %6, 9185442726285998166
  %711 = xor i64 %6, -1
  %712 = and i64 %711, -1140995097987481104
  %713 = and i64 %6, 1140995097987481103
  %714 = or i64 %712, %713
  %715 = xor i64 -8119039605295646298, %714
  %716 = xor i64 %6, -1
  %717 = or i64 -9185442726285998167, %716
  %718 = xor i64 %717, -1
  %719 = and i64 %718, -1
  %720 = or i64 %715, %719
  %721 = and i64 %14, 5371910146838884044
  %722 = xor i64 %14, -1
  %723 = or i64 -5371910146838884045, %722
  %724 = xor i64 %723, -1
  %725 = and i64 %724, -1
  %726 = xor i64 %725, %720
  %727 = xor i64 %726, %721
  %728 = xor i64 %727, 4660898111977972875
  %729 = xor i64 %728, %710
  %730 = add i64 %12, 1438896670867706793
  %731 = add i64 -4660860280415640240, %12
  %732 = sub i64 %731, -6099756951283347033
  %733 = and i64 %10, 8648026760205942726
  %734 = xor i64 %10, -1
  %735 = xor i64 8648026760205942726, %734
  %736 = and i64 %735, 8648026760205942726
  %737 = add i64 %8, -6584867891493133721
  %738 = and i64 -6584867891493133721, %8
  %739 = or i64 -6584867891493133721, %8
  %740 = add i64 %738, %739
  %741 = xor i64 %730, %736
  %742 = xor i64 %741, %732
  %743 = xor i64 %742, 2923465577584027497
  %744 = xor i64 %743, %740
  %745 = xor i64 %744, %737
  %746 = xor i64 %745, %733
  %747 = mul i64 %729, %746
  %748 = trunc i64 %747 to i32
  %749 = select i1 %709, i32 595012097, i32 %748
  %750 = xor i32 %749, 2
  store i32 %750, i32* %1, align 4
  %751 = call i8** @bf1197571377139792254(i32* %1)
  %752 = load i8*, i8** %751, align 8
  indirectbr i8* %752, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  %753 = or i64 %4, 8418626829647430857
  %754 = xor i64 %4, -1
  %755 = and i64 %754, 6748954795091560572
  %756 = and i64 %4, -6748954795091560573
  %757 = or i64 %755, %756
  %758 = xor i64 2989795177250376885, %757
  %759 = xor i64 %4, -1
  %760 = or i64 -8418626829647430858, %759
  %761 = xor i64 %760, -1
  %762 = and i64 %761, -1
  %763 = or i64 %758, %762
  %764 = add i64 %14, -7423260366752994233
  %765 = and i64 -7423260366752994233, %14
  %766 = or i64 -7423260366752994233, %14
  %767 = add i64 %765, %766
  %768 = sext i32 %dispatcher1 to i64
  %769 = add i64 %768, 8192760132178136776
  %770 = add i64 7325759619368471556, %768
  %771 = sub i64 %770, -867000512809665220
  %772 = xor i64 %753, %767
  %773 = xor i64 %772, %763
  %774 = xor i64 %773, %764
  %775 = xor i64 %774, %771
  %776 = xor i64 %775, -3232782932940146153
  %777 = xor i64 %776, %769
  %778 = add i64 %12, -8793707991150017833
  %779 = xor i64 -8793707991150017833, %12
  %780 = and i64 -8793707991150017833, %12
  %781 = mul i64 2, %780
  %782 = add i64 %779, %781
  %783 = and i64 %483, 8057486670335363936
  %784 = or i64 -8057486670335363937, %483
  %785 = sub i64 %784, -8057486670335363937
  %786 = and i64 %4, 373989248263490513
  %787 = or i64 -373989248263490514, %4
  %788 = sub i64 %787, -373989248263490514
  %789 = xor i64 %783, %786
  %790 = xor i64 %789, %782
  %791 = xor i64 %790, %788
  %792 = xor i64 %791, %778
  %793 = xor i64 %792, %785
  %794 = xor i64 %793, -6424483748386005593
  %795 = mul i64 %777, %794
  %796 = trunc i64 %795 to i1
  ret i1 %796

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %797 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %797, align 4
  %798 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %798, align 4
  %799 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %799, align 4
  %800 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %800, align 4
  %801 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %801, align 4
  %802 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %803 = load i32, i32* %802, align 4
  store i32 %803, i32* %dispatcher, align 4
  %804 = load i8*, i8** %9, align 8
  %805 = load i8, i8* %804, align 1
  %806 = xor i8 %805, -2
  %807 = and i8 %806, %805
  %808 = or i64 %12, 7537806951687890327
  %809 = and i64 7537806951687890327, %12
  %810 = xor i64 7537806951687890327, %12
  %811 = or i64 %809, %810
  %812 = add i64 %12, 6291132446450235679
  %813 = sub i64 0, %12
  %814 = add i64 -6291132446450235679, %813
  %815 = sub i64 0, %814
  %816 = xor i64 %808, %811
  %817 = xor i64 %816, %812
  %818 = xor i64 %817, %815
  %819 = xor i64 %818, -6565272034919132035
  %820 = add i64 %10, 2966566417978939431
  %821 = add i64 -2701820763654002527, %10
  %822 = add i64 %821, 5668387181632941958
  %823 = add i64 %0, -7592826834735920447
  %824 = add i64 -6288702484401704145, %0
  %825 = add i64 %824, -1304124350334216302
  %826 = xor i64 %825, %823
  %827 = xor i64 %826, %822
  %828 = xor i64 %827, 1476639710558307541
  %829 = xor i64 %828, %820
  %830 = mul i64 %819, %829
  %831 = trunc i64 %830 to i8
  %832 = icmp eq i8 %807, %831
  %833 = mul i8 %805, %805
  %834 = add i8 %833, %805
  %835 = srem i8 %834, 2
  %836 = icmp eq i8 %835, 0
  %837 = or i1 %832, %836
  %838 = or i64 %10, 430171671714996625
  %839 = and i64 430171671714996625, %10
  %840 = xor i64 430171671714996625, %10
  %841 = or i64 %839, %840
  %842 = and i64 %0, -550452368978826413
  %843 = or i64 550452368978826412, %0
  %844 = sub i64 %843, 550452368978826412
  %845 = xor i64 %841, %844
  %846 = xor i64 %845, %838
  %847 = xor i64 %846, %842
  %848 = xor i64 %847, 182341896675934099
  %849 = or i64 %12, 1250205853233533605
  %850 = xor i64 %12, -1
  %851 = and i64 1250205853233533605, %850
  %852 = add i64 %851, %12
  %853 = and i64 %0, 317624548289178651
  %854 = xor i64 %0, -1
  %855 = xor i64 317624548289178651, %854
  %856 = and i64 %855, 317624548289178651
  %857 = xor i64 %853, %856
  %858 = xor i64 %857, %852
  %859 = xor i64 %858, %849
  %860 = xor i64 %859, 7186774332683349053
  %861 = mul i64 %848, %860
  %862 = trunc i64 %861 to i32
  %863 = select i1 %837, i32 %862, i32 595012101
  %864 = xor i32 %863, 2
  store i32 %864, i32* %1, align 4
  %865 = call i8** @bf1197571377139792254(i32* %1)
  %866 = load i8*, i8** %865, align 8
  indirectbr i8* %866, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %867 = load i8*, i8** %7, align 8
  %868 = load i8, i8* %867, align 1
  %869 = mul i8 %868, 2
  %870 = mul i8 %868, 2
  %871 = and i64 %14, 1744842989753169967
  %872 = xor i64 %14, -1
  %873 = xor i64 1744842989753169967, %872
  %874 = and i64 %873, 1744842989753169967
  %875 = and i64 %483, -7995479831885136942
  %876 = or i64 7995479831885136941, %483
  %877 = sub i64 %876, 7995479831885136941
  %878 = xor i64 %875, %874
  %879 = xor i64 %878, -422546460021397939
  %880 = xor i64 %879, %871
  %881 = xor i64 %880, %877
  %882 = add i64 %10, -6316242279984868760
  %883 = sub i64 0, %10
  %884 = sub i64 -6316242279984868760, %883
  %885 = and i64 %483, -4794704153577984893
  %886 = xor i64 %483, -1
  %887 = xor i64 -4794704153577984893, %886
  %888 = and i64 %887, -4794704153577984893
  %889 = xor i64 %884, %882
  %890 = xor i64 %889, %888
  %891 = xor i64 %890, %885
  %892 = xor i64 %891, -1352157689974918947
  %893 = mul i64 %881, %892
  %894 = trunc i64 %893 to i8
  %895 = add i8 %894, %870
  %896 = add i8 %895, -119
  %897 = mul i8 %869, %896
  %898 = srem i8 %897, 4
  %899 = icmp eq i8 %898, 0
  %900 = mul i8 %868, %868
  %901 = add i8 %900, %868
  %902 = srem i8 %901, 2
  %903 = icmp eq i8 %902, 0
  %904 = or i1 %899, %903
  %905 = add i64 %18, 3822556564214566402
  %906 = xor i64 3822556564214566402, %18
  %907 = and i64 3822556564214566402, %18
  %908 = mul i64 2, %907
  %909 = add i64 %906, %908
  %910 = or i64 %4, 6308402001748836440
  %911 = xor i64 %4, -1
  %912 = and i64 6308402001748836440, %911
  %913 = add i64 %912, %4
  %914 = and i64 %0, -4999566564362446407
  %915 = or i64 4999566564362446406, %0
  %916 = sub i64 %915, 4999566564362446406
  %917 = xor i64 -4982934676162283151, %914
  %918 = xor i64 %917, %913
  %919 = xor i64 %918, %909
  %920 = xor i64 %919, %905
  %921 = xor i64 %920, %916
  %922 = xor i64 %921, %910
  %923 = add i64 %4, 5712846575480958098
  %924 = xor i64 5712846575480958098, %4
  %925 = and i64 5712846575480958098, %4
  %926 = mul i64 2, %925
  %927 = add i64 %924, %926
  %928 = add i64 %4, -8827753035647237290
  %929 = sub i64 0, %4
  %930 = sub i64 -8827753035647237290, %929
  %931 = xor i64 %927, %930
  %932 = xor i64 %931, %928
  %933 = xor i64 %932, 2410508022513234321
  %934 = xor i64 %933, %923
  %935 = mul i64 %922, %934
  %936 = trunc i64 %935 to i32
  %937 = and i64 %14, -2429816997846757492
  %938 = or i64 2429816997846757491, %14
  %939 = sub i64 %938, 2429816997846757491
  %940 = and i64 %18, 80827415083141569
  %941 = xor i64 %18, -1
  %942 = or i64 -80827415083141570, %941
  %943 = xor i64 %942, -1
  %944 = and i64 %943, -1
  %945 = and i64 %16, -9060455745863935918
  %946 = xor i64 %16, -1
  %947 = xor i64 -9060455745863935918, %946
  %948 = and i64 %947, -9060455745863935918
  %949 = xor i64 %940, %944
  %950 = xor i64 %949, %948
  %951 = xor i64 %950, %937
  %952 = xor i64 %951, %945
  %953 = xor i64 %952, -3053029567215970563
  %954 = xor i64 %953, %939
  %955 = or i64 %12, 7625764779316103043
  %956 = xor i64 %12, -1
  %957 = and i64 7625764779316103043, %956
  %958 = add i64 %957, %12
  %959 = add i64 %12, 4054307491121692762
  %960 = add i64 -2203464034574926578, %12
  %961 = sub i64 %960, -6257771525696619340
  %962 = add i64 %10, -6691870072728670409
  %963 = add i64 -7820762391824844141, %10
  %964 = add i64 %963, 1128892319096173732
  %965 = xor i64 %962, %955
  %966 = xor i64 %965, %958
  %967 = xor i64 %966, %961
  %968 = xor i64 %967, %964
  %969 = xor i64 %968, %959
  %970 = xor i64 %969, 6751355177491322111
  %971 = mul i64 %954, %970
  %972 = trunc i64 %971 to i32
  %973 = select i1 %904, i32 %936, i32 %972
  %974 = xor i32 %973, 2
  store i32 %974, i32* %1, align 4
  %975 = call i8** @bf1197571377139792254(i32* %1)
  %976 = load i8*, i8** %975, align 8
  indirectbr i8* %976, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %535, %EntryBasicBlockSplit
  %977 = load i8*, i8** %3, align 8
  %978 = load i8, i8* %977, align 1
  %979 = mul i8 %978, 2
  %980 = mul i8 %978, 2
  %981 = and i8 2, %980
  %982 = or i8 2, %980
  %983 = add i8 %981, %982
  %984 = mul i8 %979, %983
  %985 = srem i8 %984, 4
  %986 = icmp eq i8 %985, 0
  %987 = mul i8 %978, %978
  %988 = xor i8 %987, %978
  %989 = and i8 %987, %978
  %990 = mul i8 2, %989
  %991 = add i8 %988, %990
  %992 = mul i8 39, %991
  %993 = add i8 23, %992
  %994 = mul i8 -105, %993
  %995 = or i64 %18, 4205708025549844373
  %996 = xor i64 %18, -1
  %997 = and i64 %996, -8767731465746368625
  %998 = and i64 %18, 8767731465746368624
  %999 = or i64 %997, %998
  %1000 = xor i64 -4895571648985147366, %999
  %1001 = xor i64 %18, -1
  %1002 = or i64 -4205708025549844374, %1001
  %1003 = xor i64 %1002, -1
  %1004 = and i64 %1003, -1
  %1005 = or i64 %1000, %1004
  %1006 = or i64 %483, 5055878063778346697
  %1007 = xor i64 %483, -1
  %1008 = and i64 %1007, 5890705033080771360
  %1009 = and i64 %483, -5890705033080771361
  %1010 = or i64 %1008, %1009
  %1011 = xor i64 1699523144950228457, %1010
  %1012 = xor i64 %483, -1
  %1013 = or i64 -5055878063778346698, %1012
  %1014 = xor i64 %1013, -1
  %1015 = and i64 %1014, -1
  %1016 = or i64 %1011, %1015
  %1017 = or i64 %18, 5258312455704069830
  %1018 = and i64 5258312455704069830, %18
  %1019 = xor i64 5258312455704069830, %18
  %1020 = or i64 %1018, %1019
  %1021 = xor i64 1007278204462010619, %1016
  %1022 = xor i64 %1021, %1017
  %1023 = xor i64 %1022, %1005
  %1024 = xor i64 %1023, %995
  %1025 = xor i64 %1024, %1006
  %1026 = xor i64 %1025, %1020
  %1027 = and i64 %18, 5050121708799176325
  %1028 = xor i64 %18, -1
  %1029 = xor i64 5050121708799176325, %1028
  %1030 = and i64 %1029, 5050121708799176325
  %1031 = or i64 %16, 6073509354410817108
  %1032 = xor i64 %16, -1
  %1033 = and i64 6073509354410817108, %1032
  %1034 = add i64 %1033, %16
  %1035 = add i64 %2, 610034972585249113
  %1036 = sub i64 0, %2
  %1037 = sub i64 610034972585249113, %1036
  %1038 = xor i64 %1027, 718734306911812637
  %1039 = xor i64 %1038, %1030
  %1040 = xor i64 %1039, %1035
  %1041 = xor i64 %1040, %1037
  %1042 = xor i64 %1041, %1031
  %1043 = xor i64 %1042, %1034
  %1044 = mul i64 %1026, %1043
  %1045 = trunc i64 %1044 to i8
  %1046 = add i8 %1045, %994
  %1047 = srem i8 %1046, 2
  %1048 = and i64 %14, -6183931718166249595
  %1049 = xor i64 %14, -1
  %1050 = xor i64 -6183931718166249595, %1049
  %1051 = and i64 %1050, -6183931718166249595
  %1052 = sext i32 %dispatcher1 to i64
  %1053 = and i64 %1052, 9200602108110874565
  %1054 = xor i64 %1052, -1
  %1055 = or i64 -9200602108110874566, %1054
  %1056 = xor i64 %1055, -1
  %1057 = and i64 %1056, -1
  %1058 = and i64 %10, 3372019341465286977
  %1059 = or i64 -3372019341465286978, %10
  %1060 = sub i64 %1059, -3372019341465286978
  %1061 = xor i64 %1051, %1048
  %1062 = xor i64 %1061, %1060
  %1063 = xor i64 %1062, %1058
  %1064 = xor i64 %1063, -8195076090547734821
  %1065 = xor i64 %1064, %1057
  %1066 = xor i64 %1065, %1053
  %1067 = or i64 %483, 2905412490634467446
  %1068 = xor i64 %483, -1
  %1069 = and i64 %1068, -7224901121482581657
  %1070 = and i64 %483, 7224901121482581656
  %1071 = or i64 %1069, %1070
  %1072 = xor i64 -5482596045668646639, %1071
  %1073 = xor i64 %483, -1
  %1074 = or i64 -2905412490634467447, %1073
  %1075 = xor i64 %1074, -1
  %1076 = and i64 %1075, -1
  %1077 = or i64 %1072, %1076
  %1078 = or i64 %8, -3151848305367370224
  %1079 = xor i64 %8, -1
  %1080 = and i64 -3151848305367370224, %1079
  %1081 = add i64 %1080, %8
  %1082 = or i64 %10, 6516783546786025093
  %1083 = xor i64 %10, -1
  %1084 = and i64 %1083, -6749303957469608071
  %1085 = and i64 %10, 6749303957469608070
  %1086 = or i64 %1084, %1085
  %1087 = xor i64 -565795675847505412, %1086
  %1088 = xor i64 %10, -1
  %1089 = or i64 -6516783546786025094, %1088
  %1090 = xor i64 %1089, -1
  %1091 = and i64 %1090, -1
  %1092 = or i64 %1087, %1091
  %1093 = xor i64 %1078, %1082
  %1094 = xor i64 %1093, %1081
  %1095 = xor i64 %1094, %1067
  %1096 = xor i64 %1095, %1092
  %1097 = xor i64 %1096, %1077
  %1098 = xor i64 %1097, 0
  %1099 = mul i64 %1066, %1098
  %1100 = trunc i64 %1099 to i8
  %1101 = icmp eq i8 %1047, %1100
  %1102 = xor i1 %986, true
  %1103 = or i1 %1102, %1101
  %1104 = add i64 %18, -8746718364339419708
  %1105 = sub i64 0, %18
  %1106 = sub i64 -8746718364339419708, %1105
  %1107 = add i64 %483, 8451030674957810445
  %1108 = sub i64 0, %483
  %1109 = add i64 -8451030674957810445, %1108
  %1110 = sub i64 0, %1109
  %1111 = or i64 %6, -2311421525271479483
  %1112 = xor i64 %6, -1
  %1113 = and i64 -2311421525271479483, %1112
  %1114 = add i64 %1113, %6
  %1115 = xor i64 %1114, %1107
  %1116 = xor i64 %1115, %1106
  %1117 = xor i64 %1116, %1104
  %1118 = xor i64 %1117, 320568131458134543
  %1119 = xor i64 %1118, %1111
  %1120 = xor i64 %1119, %1110
  %1121 = and i64 %0, 2709148399214796986
  %1122 = or i64 -2709148399214796987, %0
  %1123 = sub i64 %1122, -2709148399214796987
  %1124 = add i64 %483, -1742836928137198591
  %1125 = xor i64 -1742836928137198591, %483
  %1126 = and i64 -1742836928137198591, %483
  %1127 = mul i64 2, %1126
  %1128 = add i64 %1125, %1127
  %1129 = or i64 %14, 809856843643062422
  %1130 = xor i64 %14, -1
  %1131 = and i64 809856843643062422, %1130
  %1132 = add i64 %1131, %14
  %1133 = xor i64 %1128, %1123
  %1134 = xor i64 %1133, %1132
  %1135 = xor i64 %1134, %1129
  %1136 = xor i64 %1135, 8243789124092771567
  %1137 = xor i64 %1136, %1124
  %1138 = xor i64 %1137, %1121
  %1139 = mul i64 %1120, %1138
  %1140 = trunc i64 %1139 to i1
  %1141 = xor i1 %986, %1140
  %1142 = sub i1 %1103, %1141
  %1143 = or i64 %6, 5490218296921762804
  %1144 = xor i64 %6, -1
  %1145 = and i64 5490218296921762804, %1144
  %1146 = add i64 %1145, %6
  %1147 = add i64 %18, 7315203784409331443
  %1148 = sub i64 0, %18
  %1149 = sub i64 7315203784409331443, %1148
  %1150 = or i64 %18, 8142713470228525668
  %1151 = xor i64 %18, -1
  %1152 = and i64 8142713470228525668, %1151
  %1153 = add i64 %1152, %18
  %1154 = xor i64 %1143, %1147
  %1155 = xor i64 %1154, %1150
  %1156 = xor i64 %1155, %1153
  %1157 = xor i64 %1156, %1146
  %1158 = xor i64 %1157, %1149
  %1159 = xor i64 %1158, -5941724068852853509
  %1160 = and i64 %12, -7833627737205819107
  %1161 = or i64 7833627737205819106, %12
  %1162 = sub i64 %1161, 7833627737205819106
  %1163 = add i64 %14, 3590033693928778007
  %1164 = and i64 3590033693928778007, %14
  %1165 = or i64 3590033693928778007, %14
  %1166 = add i64 %1164, %1165
  %1167 = and i64 %10, 414123401983686424
  %1168 = or i64 -414123401983686425, %10
  %1169 = sub i64 %1168, -414123401983686425
  %1170 = xor i64 %1169, %1167
  %1171 = xor i64 %1170, %1166
  %1172 = xor i64 %1171, %1160
  %1173 = xor i64 %1172, %1162
  %1174 = xor i64 %1173, %1163
  %1175 = xor i64 %1174, 8528423030907495218
  %1176 = mul i64 %1159, %1175
  %1177 = trunc i64 %1176 to i32
  %1178 = select i1 %1142, i32 595012098, i32 %1177
  %1179 = xor i32 %1178, -1
  %1180 = and i32 %1179, -995165162
  %1181 = and i32 %1178, 995165161
  %1182 = or i32 %1180, %1181
  %1183 = add i64 %18, 7643588117305188648
  %1184 = add i64 7904214373735787149, %18
  %1185 = sub i64 %1184, 260626256430598501
  %1186 = and i64 %483, 7908003701380825377
  %1187 = xor i64 %483, -1
  %1188 = or i64 -7908003701380825378, %1187
  %1189 = xor i64 %1188, -1
  %1190 = and i64 %1189, -1
  %1191 = xor i64 -3987060647167891819, %1186
  %1192 = xor i64 %1191, %1190
  %1193 = xor i64 %1192, %1183
  %1194 = xor i64 %1193, %1185
  %1195 = or i64 %4, -2215827234417096988
  %1196 = xor i64 %4, -1
  %1197 = and i64 %1196, -6927499029060853417
  %1198 = and i64 %4, 6927499029060853416
  %1199 = or i64 %1197, %1198
  %1200 = xor i64 9143249013625595827, %1199
  %1201 = xor i64 %4, -1
  %1202 = or i64 2215827234417096987, %1201
  %1203 = xor i64 %1202, -1
  %1204 = and i64 %1203, -1
  %1205 = or i64 %1200, %1204
  %1206 = or i64 %16, -1716031978982731631
  %1207 = xor i64 %16, -1
  %1208 = and i64 %1207, -5470345630964397504
  %1209 = and i64 %16, 5470345630964397503
  %1210 = or i64 %1208, %1209
  %1211 = xor i64 6645628187852659409, %1210
  %1212 = xor i64 %16, -1
  %1213 = or i64 1716031978982731630, %1212
  %1214 = xor i64 %1213, -1
  %1215 = and i64 %1214, -1
  %1216 = or i64 %1211, %1215
  %1217 = add i64 %8, 715620237107105995
  %1218 = add i64 -8445950516886644260, %8
  %1219 = sub i64 %1218, -9161570753993750255
  %1220 = xor i64 %1205, %1195
  %1221 = xor i64 %1220, %1206
  %1222 = xor i64 %1221, %1217
  %1223 = xor i64 %1222, %1219
  %1224 = xor i64 %1223, %1216
  %1225 = xor i64 %1224, -1100521280658751158
  %1226 = mul i64 %1194, %1225
  %1227 = trunc i64 %1226 to i32
  %1228 = xor i32 %1182, %1227
  store i32 %1228, i32* %1, align 4
  %1229 = call i8** @bf1197571377139792254(i32* %1)
  %1230 = load i8*, i8** %1229, align 8
  indirectbr i8* %1230, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.6(i64 %0, i64 %.reload189, i64* %.out, i64* %.out1, i1* %.out2) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012100)
  %3 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.6, %loopEnd), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012096)
  %5 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.6, %BogusBasicBlock), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012105)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.6, %.exitStub3), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012099)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.6, %defaultSwitchBasicBlock), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012101)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.6, %codeRepl), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012104)
  %13 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %12
  store i8* blockaddress(@render.extracted.6, %.exitStub), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012103)
  %15 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %14
  store i8* blockaddress(@render.extracted.6, %431), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012098)
  %17 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %16
  store i8* blockaddress(@render.extracted.6, %EntryBasicBlockSplit), i8** %17, align 8
  %18 = call i64 @h11804894491772278134(i64 595012097)
  %19 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %18
  store i8* blockaddress(@render.extracted.6, %loopStart), i8** %19, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %20 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %20, align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %21, align 4
  %22 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %22, align 4
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %24, align 4
  %25 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %25, align 4
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %26, align 4
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %27, align 4
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  %29 = and i64 %0, 6010560663716671039
  %30 = xor i64 %0, -1
  %31 = or i64 -6010560663716671040, %30
  %32 = xor i64 %31, -1
  %33 = and i64 %32, -1
  %34 = or i64 %.reload189, 680915133541932609
  %35 = xor i64 %.reload189, -1
  %36 = and i64 %35, 6875863466722990690
  %37 = and i64 %.reload189, -6875863466722990691
  %38 = or i64 %36, %37
  %39 = xor i64 6203956772100129827, %38
  %40 = xor i64 %.reload189, -1
  %41 = or i64 -680915133541932610, %40
  %42 = xor i64 %41, -1
  %43 = and i64 %42, -1
  %44 = or i64 %39, %43
  %45 = or i64 %.reload189, 5774548155496476220
  %46 = and i64 5774548155496476220, %.reload189
  %47 = xor i64 5774548155496476220, %.reload189
  %48 = or i64 %46, %47
  %49 = xor i64 %48, %45
  %50 = xor i64 %49, 9060206306905281405
  %51 = xor i64 %50, %44
  %52 = xor i64 %51, %34
  %53 = xor i64 %52, %33
  %54 = xor i64 %53, %29
  %55 = and i64 %.reload189, 1528053124731750427
  %56 = or i64 -1528053124731750428, %.reload189
  %57 = sub i64 %56, -1528053124731750428
  %58 = add i64 %.reload189, 2087362190436258817
  %59 = xor i64 2087362190436258817, %.reload189
  %60 = and i64 2087362190436258817, %.reload189
  %61 = mul i64 2, %60
  %62 = add i64 %59, %61
  %63 = or i64 %.reload189, -6816482820236983709
  %64 = xor i64 %.reload189, -1
  %65 = and i64 %64, -5153958852089177304
  %66 = and i64 %.reload189, 5153958852089177303
  %67 = or i64 %65, %66
  %68 = xor i64 1810316511517497675, %67
  %69 = xor i64 %.reload189, -1
  %70 = or i64 6816482820236983708, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = or i64 %68, %72
  %74 = xor i64 %55, %73
  %75 = xor i64 %74, %57
  %76 = xor i64 %75, %63
  %77 = xor i64 %76, 8119622024547235113
  %78 = xor i64 %77, %58
  %79 = xor i64 %78, %62
  %80 = mul i64 %54, %79
  %81 = trunc i64 %80 to i32
  store i32 %81, i32* %28, align 4
  %82 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %82, align 4
  %83 = alloca i64, align 8
  %84 = alloca i64, align 8
  %85 = and i64 %0, -1751416418614247670
  %86 = or i64 1751416418614247669, %0
  %87 = sub i64 %86, 1751416418614247669
  %88 = and i64 %.reload189, 8196857093666598186
  %89 = or i64 -8196857093666598187, %.reload189
  %90 = sub i64 %89, -8196857093666598187
  %91 = xor i64 904970108102174869, %90
  %92 = xor i64 %91, %88
  %93 = xor i64 %92, %85
  %94 = xor i64 %93, %87
  %95 = add i64 %.reload189, -3138775877159351712
  %96 = add i64 2980631808339569182, %.reload189
  %97 = sub i64 %96, 6119407685498920894
  %98 = and i64 %.reload189, -3439886483034801018
  %99 = or i64 3439886483034801017, %.reload189
  %100 = sub i64 %99, 3439886483034801017
  %101 = or i64 %0, 3632014864789977704
  %102 = xor i64 %0, -1
  %103 = and i64 3632014864789977704, %102
  %104 = add i64 %103, %0
  %105 = xor i64 %97, 0
  %106 = xor i64 %105, %95
  %107 = xor i64 %106, %104
  %108 = xor i64 %107, %98
  %109 = xor i64 %108, %100
  %110 = xor i64 %109, %101
  %111 = mul i64 %94, %110
  %112 = trunc i64 %111 to i1
  %113 = add i64 %.reload189, 2251200215068622375
  %114 = add i64 8009981855340353385, %.reload189
  %115 = sub i64 %114, 5758781640271731010
  %116 = or i64 %0, -8921956456082202937
  %117 = and i64 -8921956456082202937, %0
  %118 = xor i64 -8921956456082202937, %0
  %119 = or i64 %117, %118
  %120 = and i64 %0, -4737667534250746386
  %121 = or i64 4737667534250746385, %0
  %122 = sub i64 %121, 4737667534250746385
  %123 = xor i64 -4405241532079345523, %115
  %124 = xor i64 %123, %120
  %125 = xor i64 %124, %113
  %126 = xor i64 %125, %116
  %127 = xor i64 %126, %122
  %128 = xor i64 %127, %119
  %129 = add i64 %.reload189, 1766362439411058697
  %130 = sub i64 0, %.reload189
  %131 = add i64 -1766362439411058697, %130
  %132 = sub i64 0, %131
  %133 = and i64 %.reload189, -3755134967570560181
  %134 = xor i64 %.reload189, -1
  %135 = or i64 3755134967570560180, %134
  %136 = xor i64 %135, -1
  %137 = and i64 %136, -1
  %138 = xor i64 %129, %137
  %139 = xor i64 %138, 0
  %140 = xor i64 %139, %133
  %141 = xor i64 %140, %132
  %142 = mul i64 %128, %141
  %143 = add i64 %.reload189, -4112138840035456428
  %144 = add i64 -5304575420803972762, %.reload189
  %145 = sub i64 %144, -1192436580768516334
  %146 = and i64 %.reload189, -8958698004044347657
  %147 = or i64 8958698004044347656, %.reload189
  %148 = sub i64 %147, 8958698004044347656
  %149 = or i64 %0, 1587459451493602256
  %150 = xor i64 %0, -1
  %151 = and i64 %150, 758396444517607525
  %152 = and i64 %0, -758396444517607526
  %153 = or i64 %151, %152
  %154 = xor i64 2054086154885069749, %153
  %155 = xor i64 %0, -1
  %156 = or i64 -1587459451493602257, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = xor i64 %143, %145
  %161 = xor i64 %160, -1858582825510936345
  %162 = xor i64 %161, %159
  %163 = xor i64 %162, %146
  %164 = xor i64 %163, %148
  %165 = xor i64 %164, %149
  %166 = or i64 %.reload189, -147549394019082147
  %167 = xor i64 %.reload189, -1
  %168 = and i64 %167, -5416192244873939899
  %169 = and i64 %.reload189, 5416192244873939898
  %170 = or i64 %168, %169
  %171 = xor i64 5270932587076588568, %170
  %172 = xor i64 %.reload189, -1
  %173 = or i64 147549394019082146, %172
  %174 = xor i64 %173, -1
  %175 = and i64 %174, -1
  %176 = or i64 %171, %175
  %177 = and i64 %.reload189, -8552716570126544691
  %178 = xor i64 %.reload189, -1
  %179 = xor i64 -8552716570126544691, %178
  %180 = and i64 %179, -8552716570126544691
  %181 = or i64 %0, -6528214520394804122
  %182 = and i64 -6528214520394804122, %0
  %183 = xor i64 -6528214520394804122, %0
  %184 = or i64 %182, %183
  %185 = xor i64 %176, %166
  %186 = xor i64 %185, %180
  %187 = xor i64 %186, %181
  %188 = xor i64 %187, %177
  %189 = xor i64 %188, 0
  %190 = xor i64 %189, %184
  %191 = mul i64 %165, %190
  %192 = trunc i64 %191 to i1
  %193 = or i64 %.reload189, -6495191972772861940
  %194 = xor i64 %.reload189, -1
  %195 = and i64 -6495191972772861940, %194
  %196 = add i64 %195, %.reload189
  %197 = and i64 %.reload189, -5361350322229961217
  %198 = xor i64 %.reload189, -1
  %199 = xor i64 -5361350322229961217, %198
  %200 = and i64 %199, -5361350322229961217
  %201 = xor i64 %196, 6371626056366471691
  %202 = xor i64 %201, %200
  %203 = xor i64 %202, %193
  %204 = xor i64 %203, %197
  %205 = and i64 %.reload189, 7935953795430560694
  %206 = xor i64 %.reload189, -1
  %207 = xor i64 7935953795430560694, %206
  %208 = and i64 %207, 7935953795430560694
  %209 = and i64 %0, -2828546899443953339
  %210 = or i64 2828546899443953338, %0
  %211 = sub i64 %210, 2828546899443953338
  %212 = and i64 %.reload189, 8490627018521794945
  %213 = xor i64 %.reload189, -1
  %214 = xor i64 8490627018521794945, %213
  %215 = and i64 %214, 8490627018521794945
  %216 = xor i64 0, %215
  %217 = xor i64 %216, %208
  %218 = xor i64 %217, %209
  %219 = xor i64 %218, %211
  %220 = xor i64 %219, %212
  %221 = xor i64 %220, %205
  %222 = mul i64 %204, %221
  %223 = and i64 %0, 1174243402444624504
  %224 = or i64 -1174243402444624505, %0
  %225 = sub i64 %224, -1174243402444624505
  %226 = and i64 %.reload189, 4636571293579262509
  %227 = or i64 -4636571293579262510, %.reload189
  %228 = sub i64 %227, -4636571293579262510
  %229 = or i64 %.reload189, -6835316665742305275
  %230 = xor i64 %.reload189, -1
  %231 = and i64 %230, -5562891476644797382
  %232 = and i64 %.reload189, 5562891476644797381
  %233 = or i64 %231, %232
  %234 = xor i64 1434590106120272959, %233
  %235 = xor i64 %.reload189, -1
  %236 = or i64 6835316665742305274, %235
  %237 = xor i64 %236, -1
  %238 = and i64 %237, -1
  %239 = or i64 %234, %238
  %240 = xor i64 %223, %228
  %241 = xor i64 %240, %225
  %242 = xor i64 %241, -4027240169020034205
  %243 = xor i64 %242, %226
  %244 = xor i64 %243, %229
  %245 = xor i64 %244, %239
  %246 = or i64 %0, -6843854641266766077
  %247 = xor i64 %0, -1
  %248 = and i64 -6843854641266766077, %247
  %249 = add i64 %248, %0
  %250 = or i64 %.reload189, 5126062937680287438
  %251 = and i64 5126062937680287438, %.reload189
  %252 = xor i64 5126062937680287438, %.reload189
  %253 = or i64 %251, %252
  %254 = xor i64 0, %246
  %255 = xor i64 %254, %253
  %256 = xor i64 %255, %250
  %257 = xor i64 %256, %249
  %258 = mul i64 %245, %257
  %259 = or i64 %0, 6709527484382451185
  %260 = and i64 6709527484382451185, %0
  %261 = xor i64 6709527484382451185, %0
  %262 = or i64 %260, %261
  %263 = or i64 %0, 3533586056278958680
  %264 = xor i64 %0, -1
  %265 = and i64 3533586056278958680, %264
  %266 = add i64 %265, %0
  %267 = or i64 %.reload189, -8289282317169249878
  %268 = xor i64 %.reload189, -1
  %269 = and i64 -8289282317169249878, %268
  %270 = add i64 %269, %.reload189
  %271 = xor i64 %267, %262
  %272 = xor i64 %271, 1258114068081255245
  %273 = xor i64 %272, %270
  %274 = xor i64 %273, %259
  %275 = xor i64 %274, %263
  %276 = xor i64 %275, %266
  %277 = or i64 %.reload189, 1670897091417790867
  %278 = xor i64 %.reload189, -1
  %279 = and i64 1670897091417790867, %278
  %280 = add i64 %279, %.reload189
  %281 = add i64 %0, 5711854929967939199
  %282 = add i64 7750524409161361034, %0
  %283 = add i64 %282, -2038669479193421835
  %284 = and i64 %0, -2002066227147894316
  %285 = xor i64 %0, -1
  %286 = or i64 2002066227147894315, %285
  %287 = xor i64 %286, -1
  %288 = and i64 %287, -1
  %289 = xor i64 %283, %284
  %290 = xor i64 %289, %277
  %291 = xor i64 %290, %281
  %292 = xor i64 %291, %288
  %293 = xor i64 %292, 0
  %294 = xor i64 %293, %280
  %295 = mul i64 %276, %294
  %296 = trunc i64 %295 to i1
  %297 = or i64 %.reload189, -6684741049902248453
  %298 = and i64 -6684741049902248453, %.reload189
  %299 = xor i64 -6684741049902248453, %.reload189
  %300 = or i64 %298, %299
  %301 = add i64 %0, 8095692089050157980
  %302 = sub i64 0, %0
  %303 = add i64 -8095692089050157980, %302
  %304 = sub i64 0, %303
  %305 = or i64 %.reload189, 871058792443312743
  %306 = xor i64 %.reload189, -1
  %307 = and i64 871058792443312743, %306
  %308 = add i64 %307, %.reload189
  %309 = xor i64 %300, %305
  %310 = xor i64 %309, %308
  %311 = xor i64 %310, -6577913302635942857
  %312 = xor i64 %311, %301
  %313 = xor i64 %312, %304
  %314 = xor i64 %313, %297
  %315 = and i64 %0, 956885601862836704
  %316 = or i64 -956885601862836705, %0
  %317 = sub i64 %316, -956885601862836705
  %318 = add i64 %.reload189, -6116659609598239194
  %319 = sub i64 0, %.reload189
  %320 = add i64 6116659609598239194, %319
  %321 = sub i64 0, %320
  %322 = xor i64 %318, %317
  %323 = xor i64 %322, %315
  %324 = xor i64 %323, %321
  %325 = xor i64 %324, 0
  %326 = mul i64 %314, %325
  %327 = trunc i64 %326 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %84, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %112, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %142, i1 false, i1* null, i1 false, i1 %192, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %222, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %258, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %296, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %327, i32 0, i1* null, i1* null)
  %328 = load i64, i64* %84, align 8
  %329 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2936378647060095639, i32 0, i64 %328
  store i8** %329, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012097, i32* %1, align 4
  %330 = call i8** @bf10630721613528520237(i32* %1)
  %331 = load i8*, i8** %330, align 8
  indirectbr i8* %331, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %431
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub3
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i1, i1*)* @render.extracted.6.extracted to i8*), i8** %.reload, align 8
  %332 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  %333 = load i32, i32* %332, align 4
  %334 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %335 = load i32, i32* %334, align 4
  %336 = add i32 %333, 2054037874
  %337 = sub i32 %336, %335
  %338 = sub i32 %337, 2054037874
  store i32 %338, i32* %dispatcher, align 4
  %339 = load i8*, i8** %5, align 8
  %340 = load i8, i8* %339, align 1
  %341 = and i64 %18, -4387046818772144182
  %342 = or i64 4387046818772144181, %18
  %343 = sub i64 %342, 4387046818772144181
  %344 = and i64 %4, -5291369723926598798
  %345 = or i64 5291369723926598797, %4
  %346 = sub i64 %345, 5291369723926598797
  %347 = or i64 %14, 7808388823721430854
  %348 = xor i64 %14, -1
  %349 = and i64 %348, 6133548261149999275
  %350 = and i64 %14, -6133548261149999276
  %351 = or i64 %349, %350
  %352 = xor i64 4125937063784894445, %351
  %353 = xor i64 %14, -1
  %354 = or i64 -7808388823721430855, %353
  %355 = xor i64 %354, -1
  %356 = and i64 %355, -1
  %357 = or i64 %352, %356
  %358 = xor i64 %343, %357
  %359 = xor i64 %358, %346
  %360 = xor i64 %359, %347
  %361 = xor i64 %360, %341
  %362 = xor i64 %361, %344
  %363 = xor i64 %362, -2580723375035463069
  %364 = sext i32 %dispatcher1 to i64
  %365 = add i64 %364, -5309184508859241506
  %366 = add i64 -8340363056579168739, %364
  %367 = add i64 %366, 3031178547719927233
  %368 = and i64 %2, 7606707294223994270
  %369 = xor i64 %2, -1
  %370 = xor i64 7606707294223994270, %369
  %371 = and i64 %370, 7606707294223994270
  %372 = xor i64 %365, %367
  %373 = xor i64 %372, %368
  %374 = xor i64 %373, %371
  %375 = xor i64 %374, -2724497839860349109
  %376 = mul i64 %363, %375
  %377 = trunc i64 %376 to i8
  %378 = and i8 %340, %377
  %379 = icmp eq i8 %378, 1
  %380 = mul i8 %340, %340
  %381 = xor i8 %380, %340
  %382 = and i8 %380, %340
  %383 = mul i8 2, %382
  %384 = add i8 %381, %383
  %385 = sext i32 %dispatcher1 to i64
  %386 = and i64 %385, -3929304900328719329
  %387 = xor i64 %385, -1
  %388 = or i64 3929304900328719328, %387
  %389 = xor i64 %388, -1
  %390 = and i64 %389, -1
  %391 = add i64 %14, -6025860145922348467
  %392 = add i64 -8268552623052967882, %14
  %393 = sub i64 %392, -2242692477130619415
  %394 = or i64 %2, -1587020199185969827
  %395 = and i64 -1587020199185969827, %2
  %396 = xor i64 -1587020199185969827, %2
  %397 = or i64 %395, %396
  %398 = xor i64 %390, %393
  %399 = xor i64 %398, %394
  %400 = xor i64 %399, -478769784751352135
  %401 = xor i64 %400, %391
  %402 = xor i64 %401, %397
  %403 = xor i64 %402, %386
  %404 = and i64 %16, 386816550358233410
  %405 = xor i64 %16, -1
  %406 = or i64 -386816550358233411, %405
  %407 = xor i64 %406, -1
  %408 = and i64 %407, -1
  %409 = and i64 %18, 6473670470002142480
  %410 = or i64 -6473670470002142481, %18
  %411 = sub i64 %410, -6473670470002142481
  %412 = xor i64 -9028168042308444705, %408
  %413 = xor i64 %412, %409
  %414 = xor i64 %413, %404
  %415 = xor i64 %414, %411
  %416 = mul i64 %403, %415
  %417 = trunc i64 %416 to i8
  %418 = mul i8 %417, %384
  %419 = add i8 23, %418
  %420 = mul i8 -105, %419
  %421 = add i8 111, %420
  %422 = srem i8 %421, 2
  %423 = icmp eq i8 %422, 0
  %424 = and i1 %379, %423
  %425 = xor i1 %379, %423
  %426 = or i1 %424, %425
  %427 = select i1 %426, i32 595012105, i32 595012100
  %428 = xor i32 %427, 13
  store i32 %428, i32* %1, align 4
  %429 = call i8** @bf10630721613528520237(i32* %1)
  %430 = load i8*, i8** %429, align 8
  indirectbr i8* %430, [label %loopEnd, label %EntryBasicBlockSplit]

431:                                              ; preds = %431, %loopStart
  %432 = and i64 %16, -7310366347511222089
  %433 = xor i64 %16, -1
  %434 = or i64 7310366347511222088, %433
  %435 = xor i64 %434, -1
  %436 = and i64 %435, -1
  %437 = or i64 %6, -7947646320976987884
  %438 = and i64 -7947646320976987884, %6
  %439 = xor i64 -7947646320976987884, %6
  %440 = or i64 %438, %439
  %441 = and i64 %0, -6441534714629349175
  %442 = xor i64 %0, -1
  %443 = xor i64 -6441534714629349175, %442
  %444 = and i64 %443, -6441534714629349175
  %445 = xor i64 %436, 2157711948490293435
  %446 = xor i64 %445, %441
  %447 = xor i64 %446, %440
  %448 = xor i64 %447, %437
  %449 = xor i64 %448, %444
  %450 = xor i64 %449, %432
  %451 = and i64 %328, 112546855687783606
  %452 = xor i64 %328, -1
  %453 = xor i64 112546855687783606, %452
  %454 = and i64 %453, 112546855687783606
  %455 = add i64 %328, 7802889447619619707
  %456 = sub i64 0, %328
  %457 = add i64 -7802889447619619707, %456
  %458 = sub i64 0, %457
  %459 = xor i64 %455, %454
  %460 = xor i64 %459, -1384899035297535989
  %461 = xor i64 %460, %451
  %462 = xor i64 %461, %458
  %463 = mul i64 %450, %462
  %464 = add i64 30, %463
  %465 = add i64 3005582360032351690, -3005582360032351793
  store i64 %465, i64* %.out, align 8
  %466 = mul i64 29, 17
  %467 = or i64 %2, -9092525172163434683
  %468 = xor i64 %2, -1
  %469 = and i64 %468, -6075014170907418446
  %470 = and i64 %2, 6075014170907418445
  %471 = or i64 %469, %470
  %472 = xor i64 3053979633809606647, %471
  %473 = xor i64 %2, -1
  %474 = or i64 9092525172163434682, %473
  %475 = xor i64 %474, -1
  %476 = and i64 %475, -1
  %477 = or i64 %472, %476
  %478 = add i64 %.reload189, 9175807213880171403
  %479 = add i64 8154327901785381958, %.reload189
  %480 = sub i64 %479, -1021479312094789445
  %481 = xor i64 %480, %467
  %482 = xor i64 %481, %477
  %483 = xor i64 %482, 2702019968774699075
  %484 = xor i64 %483, %478
  %485 = and i64 %14, 5855129851649737266
  %486 = xor i64 %14, -1
  %487 = xor i64 5855129851649737266, %486
  %488 = and i64 %487, 5855129851649737266
  %489 = add i64 %12, 6334497660447948317
  %490 = sub i64 0, %12
  %491 = sub i64 6334497660447948317, %490
  %492 = xor i64 %489, %491
  %493 = xor i64 %492, %485
  %494 = xor i64 %493, %488
  %495 = xor i64 %494, -554538757942056622
  %496 = mul i64 %484, %495
  %497 = sub i64 %496, 30
  store i64 %497, i64* %.out1, align 8
  %498 = add i64 59, -33
  %499 = add i64 82, 53
  %500 = add i64 114, 20
  %501 = mul i64 101, 108
  %502 = srem i64 %0, 2
  %503 = icmp eq i64 %502, 0
  %504 = and i64 %.reload189, 1
  %505 = icmp eq i64 %504, 1
  %506 = mul i64 %.reload189, %.reload189
  %507 = add i64 %506, %.reload189
  %508 = srem i64 %507, 2
  %509 = icmp eq i64 %508, 0
  %510 = or i1 %505, %509
  store i1 %510, i1* %.reg2mem2, align 1
  %511 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %512 = load i32, i32* %511, align 4
  %513 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %514 = load i32, i32* %513, align 4
  %515 = srem i32 %512, %514
  store i32 %515, i32* %dispatcher, align 4
  %516 = load i8*, i8** %5, align 8
  %517 = load i8, i8* %516, align 1
  %518 = mul i8 %517, 2
  %519 = mul i8 %517, 2
  %520 = add i8 2, %519
  %521 = mul i8 %518, %520
  %522 = srem i8 %521, 4
  %523 = and i64 %0, 4934060270700328720
  %524 = xor i64 %0, -1
  %525 = xor i64 4934060270700328720, %524
  %526 = and i64 %525, 4934060270700328720
  %527 = or i64 %16, -3101415759400964027
  %528 = xor i64 %16, -1
  %529 = and i64 %528, -2056392947754042805
  %530 = and i64 %16, 2056392947754042804
  %531 = or i64 %529, %530
  %532 = xor i64 4000242443405167118, %531
  %533 = xor i64 %16, -1
  %534 = or i64 3101415759400964026, %533
  %535 = xor i64 %534, -1
  %536 = and i64 %535, -1
  %537 = or i64 %532, %536
  %538 = xor i64 %537, -8692944275087931227
  %539 = xor i64 %538, %523
  %540 = xor i64 %539, %526
  %541 = xor i64 %540, %527
  %542 = add i64 %8, 7265475854256225502
  %543 = sub i64 0, %8
  %544 = add i64 -7265475854256225502, %543
  %545 = sub i64 0, %544
  %546 = or i64 %16, 2017999185507715109
  %547 = xor i64 %16, -1
  %548 = and i64 %547, -8778007037438121816
  %549 = and i64 %16, 8778007037438121815
  %550 = or i64 %548, %549
  %551 = xor i64 -7336611688958386035, %550
  %552 = xor i64 %16, -1
  %553 = or i64 -2017999185507715110, %552
  %554 = xor i64 %553, -1
  %555 = and i64 %554, -1
  %556 = or i64 %551, %555
  %557 = and i64 %0, -7613870922534000240
  %558 = xor i64 %0, -1
  %559 = or i64 7613870922534000239, %558
  %560 = xor i64 %559, -1
  %561 = and i64 %560, -1
  %562 = xor i64 %556, %542
  %563 = xor i64 %562, %557
  %564 = xor i64 %563, %546
  %565 = xor i64 %564, %545
  %566 = xor i64 %565, 0
  %567 = xor i64 %566, %561
  %568 = mul i64 %541, %567
  %569 = trunc i64 %568 to i8
  %570 = icmp eq i8 %522, %569
  %571 = mul i8 %517, %517
  %572 = add i8 %571, %517
  %573 = srem i8 %572, 2
  %574 = and i64 %328, 8393573026480232757
  %575 = xor i64 %328, -1
  %576 = or i64 -8393573026480232758, %575
  %577 = xor i64 %576, -1
  %578 = and i64 %577, -1
  %579 = or i64 %14, -5452625297083541874
  %580 = xor i64 %14, -1
  %581 = and i64 -5452625297083541874, %580
  %582 = add i64 %581, %14
  %583 = or i64 %328, 5525511090009362239
  %584 = xor i64 %328, -1
  %585 = and i64 5525511090009362239, %584
  %586 = add i64 %585, %328
  %587 = xor i64 %574, %579
  %588 = xor i64 %587, -1296636617997979357
  %589 = xor i64 %588, %578
  %590 = xor i64 %589, %582
  %591 = xor i64 %590, %586
  %592 = xor i64 %591, %583
  %593 = add i64 %18, -7620118506180478827
  %594 = and i64 -7620118506180478827, %18
  %595 = or i64 -7620118506180478827, %18
  %596 = add i64 %594, %595
  %597 = and i64 %6, 4325643796400491790
  %598 = xor i64 %6, -1
  %599 = xor i64 4325643796400491790, %598
  %600 = and i64 %599, 4325643796400491790
  %601 = add i64 %0, -3079281756172781414
  %602 = add i64 7037545099866773194, %0
  %603 = add i64 %602, 8329917217669997008
  %604 = xor i64 %596, %600
  %605 = xor i64 %604, %601
  %606 = xor i64 %605, %593
  %607 = xor i64 %606, %597
  %608 = xor i64 %607, %603
  %609 = xor i64 %608, 0
  %610 = mul i64 %592, %609
  %611 = trunc i64 %610 to i8
  %612 = icmp eq i8 %573, %611
  %613 = and i1 %570, %612
  %614 = xor i1 %570, %612
  %615 = or i1 %613, %614
  %616 = select i1 %615, i32 595012103, i32 595012100
  %617 = xor i32 %616, 3
  store i32 %617, i32* %1, align 4
  %618 = call i8** @bf10630721613528520237(i32* %1)
  %619 = load i8*, i8** %618, align 8
  indirectbr i8* %619, [label %loopEnd, label %431]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %83, align 8
  %620 = call i8** @lk11760273921675393270(i64* %83)
  %621 = load i8*, i8** %620, align 8
  %622 = bitcast i8* %621 to i1 (i1, i1*)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %targetBlock = call i1 %622(i1 %.reload3, i1* %.out2)
  %623 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %624 = load i32, i32* %623, align 4
  %625 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %626 = load i32, i32* %625, align 4
  %627 = srem i32 %624, %626
  %628 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %629 = load i32, i32* %628, align 4
  %630 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %631 = load i32, i32* %630, align 4
  %632 = sub i32 %629, %631
  %633 = select i1 %targetBlock, i32 %627, i32 %632
  store i32 %633, i32* %dispatcher, align 4
  %634 = load i8*, i8** %11, align 8
  %635 = load i8, i8* %634, align 1
  %636 = mul i8 %635, 2
  %637 = mul i8 %635, 2
  %638 = or i64 %10, -6488317893528044745
  %639 = xor i64 %10, -1
  %640 = and i64 %639, 6929152303929875077
  %641 = and i64 %10, -6929152303929875078
  %642 = or i64 %640, %641
  %643 = xor i64 -4189027089495432782, %642
  %644 = xor i64 %10, -1
  %645 = or i64 6488317893528044744, %644
  %646 = xor i64 %645, -1
  %647 = and i64 %646, -1
  %648 = or i64 %643, %647
  %649 = or i64 %10, -5881036478310879470
  %650 = xor i64 %10, -1
  %651 = and i64 %650, -4749704382319550208
  %652 = and i64 %10, 4749704382319550207
  %653 = or i64 %651, %652
  %654 = xor i64 1186686940172275218, %653
  %655 = xor i64 %10, -1
  %656 = or i64 5881036478310879469, %655
  %657 = xor i64 %656, -1
  %658 = and i64 %657, -1
  %659 = or i64 %654, %658
  %660 = xor i64 %648, %649
  %661 = xor i64 %660, %638
  %662 = xor i64 %661, 118353252160042147
  %663 = xor i64 %662, %659
  %664 = or i64 %8, -4117450453167089742
  %665 = xor i64 %8, -1
  %666 = and i64 %665, -55955007256263974
  %667 = and i64 %8, 55955007256263973
  %668 = or i64 %666, %667
  %669 = xor i64 4171131051086861672, %668
  %670 = xor i64 %8, -1
  %671 = or i64 4117450453167089741, %670
  %672 = xor i64 %671, -1
  %673 = and i64 %672, -1
  %674 = or i64 %669, %673
  %675 = and i64 %6, 775618179535064647
  %676 = or i64 -775618179535064648, %6
  %677 = sub i64 %676, -775618179535064648
  %678 = and i64 %6, -5495497729316231904
  %679 = or i64 5495497729316231903, %6
  %680 = sub i64 %679, 5495497729316231903
  %681 = xor i64 1281487786796039702, %664
  %682 = xor i64 %681, %680
  %683 = xor i64 %682, %678
  %684 = xor i64 %683, %674
  %685 = xor i64 %684, %677
  %686 = xor i64 %685, %675
  %687 = mul i64 %663, %686
  %688 = trunc i64 %687 to i8
  %689 = add i8 %688, %637
  %690 = mul i8 %636, %689
  %691 = srem i8 %690, 4
  %692 = icmp eq i8 %691, 0
  %693 = mul i8 %635, %635
  %694 = and i8 %693, %635
  %695 = or i8 %693, %635
  %696 = add i8 %694, %695
  %697 = srem i8 %696, 2
  %698 = icmp eq i8 %697, 0
  %699 = or i1 %692, %698
  %700 = select i1 %699, i32 595012096, i32 595012100
  %701 = xor i32 %700, -1
  %702 = and i32 %701, 4
  %703 = and i32 %700, -5
  %704 = or i32 %702, %703
  store i32 %704, i32* %1, align 4
  %705 = call i8** @bf10630721613528520237(i32* %1)
  %706 = load i8*, i8** %705, align 8
  indirectbr i8* %706, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub3:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %707 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %708 = add i64 %16, 6342676706715094598
  %709 = and i64 6342676706715094598, %16
  %710 = or i64 6342676706715094598, %16
  %711 = add i64 %709, %710
  %712 = sext i32 %dispatcher1 to i64
  %713 = add i64 %712, -4764339817707908956
  %714 = add i64 8084204844637685691, %712
  %715 = add i64 %714, 5598199411363956969
  %716 = xor i64 -995724519144423125, %708
  %717 = xor i64 %716, %713
  %718 = xor i64 %717, %711
  %719 = xor i64 %718, %715
  %720 = add i64 %2, -3336610267345268786
  %721 = sub i64 0, %2
  %722 = add i64 3336610267345268786, %721
  %723 = sub i64 0, %722
  %724 = and i64 %4, -4385550740943584928
  %725 = or i64 4385550740943584927, %4
  %726 = sub i64 %725, 4385550740943584927
  %727 = xor i64 %726, %720
  %728 = xor i64 %727, %724
  %729 = xor i64 %728, %723
  %730 = xor i64 %729, 2965937861435279997
  %731 = mul i64 %719, %730
  %732 = trunc i64 %731 to i32
  store i32 %732, i32* %707, align 4
  %733 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %733, align 4
  %734 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %735 = and i64 %10, -4692336773254973909
  %736 = xor i64 %10, -1
  %737 = xor i64 -4692336773254973909, %736
  %738 = and i64 %737, -4692336773254973909
  %739 = sext i32 %dispatcher1 to i64
  %740 = and i64 %739, -312262086691040970
  %741 = or i64 312262086691040969, %739
  %742 = sub i64 %741, 312262086691040969
  %743 = xor i64 %742, %738
  %744 = xor i64 %743, %740
  %745 = xor i64 %744, %735
  %746 = xor i64 %745, -5243546584920411627
  %747 = add i64 %0, 3176786655449871433
  %748 = sub i64 0, %0
  %749 = sub i64 3176786655449871433, %748
  %750 = sext i32 %dispatcher1 to i64
  %751 = add i64 %750, -6240508227721595374
  %752 = add i64 150661321179072974, %750
  %753 = sub i64 %752, 6391169548900668348
  %754 = xor i64 %751, -3885587546046584905
  %755 = xor i64 %754, %747
  %756 = xor i64 %755, %753
  %757 = xor i64 %756, %749
  %758 = mul i64 %746, %757
  %759 = trunc i64 %758 to i32
  store i32 %759, i32* %734, align 4
  %760 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %760, align 4
  %761 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %761, align 4
  %762 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %763 = load i32, i32* %762, align 4
  store i32 %763, i32* %dispatcher, align 4
  %764 = load i8*, i8** %9, align 8
  %765 = load i8, i8* %764, align 1
  %766 = and i8 %765, 1
  %767 = or i64 %16, 3812415411097387665
  %768 = xor i64 %16, -1
  %769 = and i64 3812415411097387665, %768
  %770 = add i64 %769, %16
  %771 = add i64 %0, 6684856009596650306
  %772 = xor i64 6684856009596650306, %0
  %773 = and i64 6684856009596650306, %0
  %774 = mul i64 2, %773
  %775 = add i64 %772, %774
  %776 = or i64 %12, 3457304626993227269
  %777 = xor i64 %12, -1
  %778 = and i64 3457304626993227269, %777
  %779 = add i64 %778, %12
  %780 = xor i64 %775, 802278804262396087
  %781 = xor i64 %780, %776
  %782 = xor i64 %781, %779
  %783 = xor i64 %782, %767
  %784 = xor i64 %783, %771
  %785 = xor i64 %784, %770
  %786 = or i64 %10, 5980536310277590268
  %787 = xor i64 %10, -1
  %788 = and i64 5980536310277590268, %787
  %789 = add i64 %788, %10
  %790 = or i64 %16, 1064676593739329277
  %791 = xor i64 %16, -1
  %792 = and i64 1064676593739329277, %791
  %793 = add i64 %792, %16
  %794 = xor i64 %786, %789
  %795 = xor i64 %794, %790
  %796 = xor i64 %795, %793
  %797 = xor i64 %796, 0
  %798 = mul i64 %785, %797
  %799 = trunc i64 %798 to i8
  %800 = icmp eq i8 %766, %799
  %801 = mul i8 %765, %765
  %802 = add i8 %801, %765
  %803 = mul i8 %802, 3
  %804 = srem i8 %803, 2
  %805 = icmp eq i8 %804, 0
  %806 = or i1 %800, %805
  %807 = select i1 %806, i32 595012105, i32 595012098
  %808 = or i64 %0, -1724568330774357052
  %809 = xor i64 %0, -1
  %810 = and i64 -1724568330774357052, %809
  %811 = add i64 %810, %0
  %812 = or i64 %8, -2506420600437867004
  %813 = xor i64 %8, -1
  %814 = and i64 %813, -5831092015205526214
  %815 = and i64 %8, 5831092015205526213
  %816 = or i64 %814, %815
  %817 = xor i64 8224886881878485822, %816
  %818 = xor i64 %8, -1
  %819 = or i64 2506420600437867003, %818
  %820 = xor i64 %819, -1
  %821 = and i64 %820, -1
  %822 = or i64 %817, %821
  %823 = or i64 %10, 6964045821288411585
  %824 = and i64 6964045821288411585, %10
  %825 = xor i64 6964045821288411585, %10
  %826 = or i64 %824, %825
  %827 = xor i64 -8318403313514885161, %812
  %828 = xor i64 %827, %823
  %829 = xor i64 %828, %811
  %830 = xor i64 %829, %826
  %831 = xor i64 %830, %822
  %832 = xor i64 %831, %808
  %833 = and i64 %10, -6534878826939424501
  %834 = xor i64 %10, -1
  %835 = or i64 6534878826939424500, %834
  %836 = xor i64 %835, -1
  %837 = and i64 %836, -1
  %838 = add i64 %16, -2435456820128224426
  %839 = sub i64 0, %16
  %840 = add i64 2435456820128224426, %839
  %841 = sub i64 0, %840
  %842 = add i64 %4, 4401585706592088273
  %843 = and i64 4401585706592088273, %4
  %844 = or i64 4401585706592088273, %4
  %845 = add i64 %843, %844
  %846 = xor i64 %837, %833
  %847 = xor i64 %846, %845
  %848 = xor i64 %847, 8537456920034728685
  %849 = xor i64 %848, %838
  %850 = xor i64 %849, %841
  %851 = xor i64 %850, %842
  %852 = mul i64 %832, %851
  %853 = trunc i64 %852 to i32
  %854 = xor i32 %807, %853
  store i32 %854, i32* %1, align 4
  %855 = call i8** @bf10630721613528520237(i32* %1)
  %856 = load i8*, i8** %855, align 8
  indirectbr i8* %856, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %857 = load i8*, i8** %17, align 8
  %858 = load i8, i8* %857, align 1
  %859 = mul i8 %858, 2
  %860 = mul i8 %858, 2
  %861 = add i8 0, %860
  %862 = sub i8 %861, -2
  %863 = mul i8 %859, %862
  %864 = and i64 %4, -3376929185616405760
  %865 = xor i64 %4, -1
  %866 = xor i64 -3376929185616405760, %865
  %867 = and i64 %866, -3376929185616405760
  %868 = and i64 %8, -3329792441627328608
  %869 = xor i64 %8, -1
  %870 = or i64 3329792441627328607, %869
  %871 = xor i64 %870, -1
  %872 = and i64 %871, -1
  %873 = and i64 %0, 228118661619711767
  %874 = or i64 -228118661619711768, %0
  %875 = sub i64 %874, -228118661619711768
  %876 = xor i64 %872, %868
  %877 = xor i64 %876, %867
  %878 = xor i64 %877, %864
  %879 = xor i64 %878, %873
  %880 = xor i64 %879, -3886897046577476819
  %881 = xor i64 %880, %875
  %882 = add i64 %10, -4555328274294943282
  %883 = xor i64 -4555328274294943282, %10
  %884 = and i64 -4555328274294943282, %10
  %885 = mul i64 2, %884
  %886 = add i64 %883, %885
  %887 = and i64 %2, 880234739426075421
  %888 = xor i64 %2, -1
  %889 = xor i64 880234739426075421, %888
  %890 = and i64 %889, 880234739426075421
  %891 = xor i64 %887, %890
  %892 = xor i64 %891, %886
  %893 = xor i64 %892, -7311649047838854508
  %894 = xor i64 %893, %882
  %895 = mul i64 %881, %894
  %896 = trunc i64 %895 to i8
  %897 = srem i8 %863, %896
  %898 = icmp eq i8 %897, 0
  %899 = mul i8 %858, %858
  %900 = mul i8 %899, %858
  %901 = add i8 %900, %858
  %902 = srem i8 %901, 2
  %903 = icmp eq i8 %902, 0
  %904 = and i1 %898, %903
  %905 = select i1 %904, i32 595012101, i32 595012100
  %906 = xor i32 %905, 1
  store i32 %906, i32* %1, align 4
  %907 = call i8** @bf10630721613528520237(i32* %1)
  %908 = load i8*, i8** %907, align 8
  indirectbr i8* %908, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %431, %EntryBasicBlockSplit
  %909 = load i8*, i8** %5, align 8
  %910 = load i8, i8* %909, align 1
  %911 = mul i8 %910, 2
  %912 = mul i8 %910, 2
  %913 = add i8 -111, %912
  %914 = sub i8 %913, -113
  %915 = mul i8 %911, %914
  %916 = and i64 %8, 2067136876478762480
  %917 = xor i64 %8, -1
  %918 = xor i64 2067136876478762480, %917
  %919 = and i64 %918, 2067136876478762480
  %920 = or i64 %16, -6631444097932216319
  %921 = xor i64 %16, -1
  %922 = and i64 -6631444097932216319, %921
  %923 = add i64 %922, %16
  %924 = or i64 %8, 5343220766590636696
  %925 = and i64 5343220766590636696, %8
  %926 = xor i64 5343220766590636696, %8
  %927 = or i64 %925, %926
  %928 = xor i64 %919, %927
  %929 = xor i64 %928, -752978327765279067
  %930 = xor i64 %929, %923
  %931 = xor i64 %930, %916
  %932 = xor i64 %931, %920
  %933 = xor i64 %932, %924
  %934 = add i64 %.reload189, -1514352828504299474
  %935 = and i64 -1514352828504299474, %.reload189
  %936 = or i64 -1514352828504299474, %.reload189
  %937 = add i64 %935, %936
  %938 = add i64 %328, 8798239276647306787
  %939 = sub i64 0, %328
  %940 = add i64 -8798239276647306787, %939
  %941 = sub i64 0, %940
  %942 = or i64 %0, -8590107421821491629
  %943 = xor i64 %0, -1
  %944 = and i64 -8590107421821491629, %943
  %945 = add i64 %944, %0
  %946 = xor i64 %938, %941
  %947 = xor i64 %946, %942
  %948 = xor i64 %947, -5423636374988495692
  %949 = xor i64 %948, %934
  %950 = xor i64 %949, %937
  %951 = xor i64 %950, %945
  %952 = mul i64 %933, %951
  %953 = trunc i64 %952 to i8
  %954 = srem i8 %915, %953
  %955 = icmp eq i8 %954, 0
  %956 = mul i8 %910, %910
  %957 = mul i8 %956, %910
  %958 = sub i8 %957, -92
  %959 = add i8 %958, %910
  %960 = add i8 %959, -92
  %961 = srem i8 %960, 2
  %962 = icmp eq i8 %961, 0
  %963 = and i1 %955, %962
  %964 = sext i32 %dispatcher1 to i64
  %965 = add i64 %964, -7133916326029424609
  %966 = xor i64 -7133916326029424609, %964
  %967 = and i64 -7133916326029424609, %964
  %968 = mul i64 2, %967
  %969 = add i64 %966, %968
  %970 = and i64 %10, 2658135335576833120
  %971 = xor i64 %10, -1
  %972 = or i64 -2658135335576833121, %971
  %973 = xor i64 %972, -1
  %974 = and i64 %973, -1
  %975 = and i64 %328, 2496809769174577520
  %976 = xor i64 %328, -1
  %977 = or i64 -2496809769174577521, %976
  %978 = xor i64 %977, -1
  %979 = and i64 %978, -1
  %980 = xor i64 %970, %974
  %981 = xor i64 %980, %979
  %982 = xor i64 %981, %969
  %983 = xor i64 %982, %965
  %984 = xor i64 %983, %975
  %985 = xor i64 %984, -3498360561001806621
  %986 = sext i32 %dispatcher1 to i64
  %987 = add i64 %986, -6884059908239508817
  %988 = sub i64 0, %986
  %989 = sub i64 -6884059908239508817, %988
  %990 = add i64 %8, -3597160465571674042
  %991 = and i64 -3597160465571674042, %8
  %992 = or i64 -3597160465571674042, %8
  %993 = add i64 %991, %992
  %994 = xor i64 %989, %993
  %995 = xor i64 %994, %987
  %996 = xor i64 %995, %990
  %997 = xor i64 %996, 3938768188567547595
  %998 = mul i64 %985, %997
  %999 = trunc i64 %998 to i32
  %1000 = select i1 %963, i32 %999, i32 595012097
  %1001 = xor i32 %1000, 1533557676
  %1002 = xor i32 %1001, 1533557676
  store i32 %1002, i32* %1, align 4
  %1003 = call i8** @bf10630721613528520237(i32* %1)
  %1004 = load i8*, i8** %1003, align 8
  indirectbr i8* %1004, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.7(i64* %.out, i64* %.out1) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012214)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.7, %loopEnd), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012252)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.7, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012142)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.7, %BogusBasicBlock), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012152)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.7, %.exitStub), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012096)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.7, %83), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012271)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@render.extracted.7, %EntryBasicBlockSplit), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012162)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@render.extracted.7, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012162, i32* %0, align 4
  %23 = call i8** @bf777061424148142830(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %83
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %26, %28
  %30 = or i32 %26, %28
  %31 = add i32 %29, %30
  store i32 %31, i32* %dispatcher, align 4
  %32 = load i8*, i8** %8, align 8
  %33 = load i8, i8* %32, align 1
  %34 = mul i8 %33, %33
  %35 = add i8 %34, 23
  %36 = add i8 %35, %33
  %37 = sub i8 %36, 23
  %38 = mul i8 %37, 3
  %39 = add i64 %7, -6495578313363767987
  %40 = add i64 8728531553424703896, %7
  %41 = add i64 %40, 3222634206921079733
  %42 = add i64 %9, 284271674270654001
  %43 = add i64 -8852709098285155445, %9
  %44 = add i64 %43, 9136980772555809446
  %45 = add i64 %1, 1615644704719699400
  %46 = add i64 -7401912908469633774, %1
  %47 = add i64 %46, 9017557613189333174
  %48 = xor i64 %45, 3754910747128674161
  %49 = xor i64 %48, %42
  %50 = xor i64 %49, %41
  %51 = xor i64 %50, %39
  %52 = xor i64 %51, %47
  %53 = xor i64 %52, %44
  %54 = or i64 %11, 1717899490852920167
  %55 = and i64 1717899490852920167, %11
  %56 = xor i64 1717899490852920167, %11
  %57 = or i64 %55, %56
  %58 = sext i32 %dispatcher1 to i64
  %59 = or i64 %58, 9139421346519252823
  %60 = xor i64 %58, -1
  %61 = and i64 9139421346519252823, %60
  %62 = add i64 %61, %58
  %63 = xor i64 1980279634780115746, %57
  %64 = xor i64 %63, %59
  %65 = xor i64 %64, %62
  %66 = xor i64 %65, %54
  %67 = mul i64 %53, %66
  %68 = trunc i64 %67 to i8
  %69 = srem i8 %38, %68
  %70 = icmp eq i8 %69, 0
  %71 = mul i8 %33, %33
  %72 = add i8 %71, %33
  %73 = srem i8 %72, 2
  %74 = icmp eq i8 %73, 0
  %75 = xor i1 %70, true
  %76 = or i1 %75, %74
  %77 = xor i1 %70, true
  %78 = sub i1 %76, %77
  %79 = select i1 %78, i32 595012152, i32 595012214
  %80 = xor i32 %79, 78
  store i32 %80, i32* %0, align 4
  %81 = call i8** @bf777061424148142830(i32* %0)
  %82 = load i8*, i8** %81, align 8
  indirectbr i8* %82, [label %loopEnd, label %EntryBasicBlockSplit]

83:                                               ; preds = %83, %loopStart
  %84 = and i64 %11, 4912155088274963949
  %85 = or i64 -4912155088274963950, %11
  %86 = sub i64 %85, -4912155088274963950
  %87 = and i64 %9, 1752576990613863554
  %88 = xor i64 %9, -1
  %89 = or i64 -1752576990613863555, %88
  %90 = xor i64 %89, -1
  %91 = and i64 %90, -1
  %92 = and i64 %11, -1059110510913812833
  %93 = or i64 1059110510913812832, %11
  %94 = sub i64 %93, 1059110510913812832
  %95 = xor i64 %87, 6609122770476784049
  %96 = xor i64 %95, %91
  %97 = xor i64 %96, %92
  %98 = xor i64 %97, %94
  %99 = xor i64 %98, %84
  %100 = xor i64 %99, %86
  %101 = add i64 %9, -5598184759967503985
  %102 = sub i64 0, %9
  %103 = add i64 5598184759967503985, %102
  %104 = sub i64 0, %103
  %105 = and i64 %7, -4418720111956624133
  %106 = xor i64 %7, -1
  %107 = or i64 4418720111956624132, %106
  %108 = xor i64 %107, -1
  %109 = and i64 %108, -1
  %110 = and i64 %11, -3584743705046218292
  %111 = xor i64 %11, -1
  %112 = xor i64 -3584743705046218292, %111
  %113 = and i64 %112, -3584743705046218292
  %114 = xor i64 %110, %104
  %115 = xor i64 %114, %101
  %116 = xor i64 %115, %105
  %117 = xor i64 %116, 4637520695774849847
  %118 = xor i64 %117, %113
  %119 = xor i64 %118, %109
  %120 = mul i64 %100, %119
  %121 = sub i64 %120, 110
  store i64 %121, i64* %.out, align 8
  %122 = and i64 %11, 9104094465416834905
  %123 = xor i64 %11, -1
  %124 = or i64 -9104094465416834906, %123
  %125 = xor i64 %124, -1
  %126 = and i64 %125, -1
  %127 = or i64 %3, 2294850307332484380
  %128 = xor i64 %3, -1
  %129 = and i64 2294850307332484380, %128
  %130 = add i64 %129, %3
  %131 = xor i64 4129145799123938999, %126
  %132 = xor i64 %131, %122
  %133 = xor i64 %132, %127
  %134 = xor i64 %133, %130
  %135 = add i64 %9, 8732850147608963889
  %136 = sub i64 0, %9
  %137 = add i64 -8732850147608963889, %136
  %138 = sub i64 0, %137
  %139 = and i64 %9, -3564671038932053404
  %140 = or i64 3564671038932053403, %9
  %141 = sub i64 %140, 3564671038932053403
  %142 = and i64 %11, 393221434049853540
  %143 = or i64 -393221434049853541, %11
  %144 = sub i64 %143, -393221434049853541
  %145 = xor i64 %141, %144
  %146 = xor i64 %145, %138
  %147 = xor i64 %146, 8165532794068593978
  %148 = xor i64 %147, %142
  %149 = xor i64 %148, %139
  %150 = xor i64 %149, %135
  %151 = mul i64 %134, %150
  %152 = sub i64 %151, 30
  store i64 %152, i64* %.out1, align 8
  %153 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %154, %156
  store i32 %157, i32* %dispatcher, align 4
  %158 = load i8*, i8** %2, align 8
  %159 = load i8, i8* %158, align 1
  %160 = mul i8 %159, %159
  %161 = add i8 %160, %159
  %162 = mul i8 %161, 3
  %163 = sext i32 %dispatcher1 to i64
  %164 = and i64 %163, 4779571717764133417
  %165 = or i64 -4779571717764133418, %163
  %166 = sub i64 %165, -4779571717764133418
  %167 = and i64 %9, 4679846689426668746
  %168 = or i64 -4679846689426668747, %9
  %169 = sub i64 %168, -4679846689426668747
  %170 = xor i64 %166, %169
  %171 = xor i64 %170, %164
  %172 = xor i64 %171, %167
  %173 = xor i64 %172, 1001061916240742659
  %174 = sext i32 %dispatcher1 to i64
  %175 = or i64 %174, 6300401043452357373
  %176 = xor i64 %174, -1
  %177 = and i64 %176, -2472775260729141502
  %178 = and i64 %174, 2472775260729141501
  %179 = or i64 %177, %178
  %180 = xor i64 -8448342377912336897, %179
  %181 = xor i64 %174, -1
  %182 = or i64 -6300401043452357374, %181
  %183 = xor i64 %182, -1
  %184 = and i64 %183, -1
  %185 = or i64 %180, %184
  %186 = and i64 %5, -8736142922369016927
  %187 = or i64 8736142922369016926, %5
  %188 = sub i64 %187, 8736142922369016926
  %189 = sext i32 %dispatcher1 to i64
  %190 = and i64 %189, 5970895494761424788
  %191 = xor i64 %189, -1
  %192 = or i64 -5970895494761424789, %191
  %193 = xor i64 %192, -1
  %194 = and i64 %193, -1
  %195 = xor i64 -3622026315971144874, %185
  %196 = xor i64 %195, %190
  %197 = xor i64 %196, %194
  %198 = xor i64 %197, %186
  %199 = xor i64 %198, %175
  %200 = xor i64 %199, %188
  %201 = mul i64 %173, %200
  %202 = trunc i64 %201 to i8
  %203 = srem i8 %162, %202
  %204 = icmp eq i8 %203, 0
  %205 = mul i8 %159, %159
  %206 = add i8 %205, %159
  %207 = srem i8 %206, 2
  %208 = icmp eq i8 %207, 0
  %209 = and i1 %204, %208
  %210 = select i1 %209, i32 595012142, i32 595012214
  %211 = xor i32 %210, 88
  store i32 %211, i32* %0, align 4
  %212 = call i8** @bf777061424148142830(i32* %0)
  %213 = load i8*, i8** %212, align 8
  indirectbr i8* %213, [label %loopEnd, label %83]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %214 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %215 = and i64 %7, -3320574646987091825
  %216 = or i64 3320574646987091824, %7
  %217 = sub i64 %216, 3320574646987091824
  %218 = and i64 %3, -3124880576965244051
  %219 = xor i64 %3, -1
  %220 = or i64 3124880576965244050, %219
  %221 = xor i64 %220, -1
  %222 = and i64 %221, -1
  %223 = xor i64 %217, %222
  %224 = xor i64 %223, %218
  %225 = xor i64 %224, -2104885272419962987
  %226 = xor i64 %225, %215
  %227 = add i64 %13, 3385282796550053149
  %228 = add i64 8604323996893388518, %13
  %229 = add i64 %228, -5219041200343335369
  %230 = add i64 %3, -8977951248633400033
  %231 = sub i64 0, %3
  %232 = add i64 8977951248633400033, %231
  %233 = sub i64 0, %232
  %234 = xor i64 %233, %229
  %235 = xor i64 %234, %230
  %236 = xor i64 %235, %227
  %237 = xor i64 %236, -8613089076806083517
  %238 = mul i64 %226, %237
  %239 = trunc i64 %238 to i32
  store i32 %239, i32* %214, align 4
  %240 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %240, align 4
  %241 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %241, align 4
  %242 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %242, align 4
  %243 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %244 = load i32, i32* %243, align 4
  store i32 %244, i32* %dispatcher, align 4
  %245 = load i8*, i8** %14, align 8
  %246 = load i8, i8* %245, align 1
  %247 = mul i8 %246, 2
  %248 = mul i8 %246, 2
  %249 = add i8 2, %248
  %250 = mul i8 %247, %249
  %251 = srem i8 %250, 4
  %252 = icmp eq i8 %251, 0
  %253 = mul i8 %246, %246
  %254 = mul i8 %253, %246
  %255 = sub i8 0, %254
  %256 = sub i8 0, %246
  %257 = add i8 %255, %256
  %258 = sub i8 0, %257
  %259 = srem i8 %258, 2
  %260 = icmp eq i8 %259, 0
  %261 = and i1 %252, %260
  %262 = select i1 %261, i32 595012142, i32 595012271
  %263 = xor i32 %262, 129
  store i32 %263, i32* %0, align 4
  %264 = call i8** @bf777061424148142830(i32* %0)
  %265 = load i8*, i8** %264, align 8
  indirectbr i8* %265, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %266 = load i8*, i8** %8, align 8
  %267 = load i8, i8* %266, align 1
  %268 = mul i8 %267, 2
  %269 = mul i8 %267, 2
  %270 = add i8 -81, %269
  %271 = add i64 %9, 7516760026773610570
  %272 = add i64 5591581088549018593, %9
  %273 = sub i64 %272, -1925178938224591977
  %274 = add i64 %13, 8717438517990542789
  %275 = add i64 -4569951841647299867, %13
  %276 = sub i64 %275, 5159353714071708960
  %277 = and i64 %11, -402525487500888225
  %278 = or i64 402525487500888224, %11
  %279 = sub i64 %278, 402525487500888224
  %280 = xor i64 %279, %274
  %281 = xor i64 %280, %273
  %282 = xor i64 %281, 7129863088959167051
  %283 = xor i64 %282, %271
  %284 = xor i64 %283, %277
  %285 = xor i64 %284, %276
  %286 = and i64 %11, 4537161844995861975
  %287 = or i64 -4537161844995861976, %11
  %288 = sub i64 %287, -4537161844995861976
  %289 = and i64 %3, 526985545173837994
  %290 = xor i64 %3, -1
  %291 = or i64 -526985545173837995, %290
  %292 = xor i64 %291, -1
  %293 = and i64 %292, -1
  %294 = or i64 %3, -2865313500605685196
  %295 = xor i64 %3, -1
  %296 = and i64 %295, -4127002072465081006
  %297 = and i64 %3, 4127002072465081005
  %298 = or i64 %296, %297
  %299 = xor i64 2199355267147013990, %298
  %300 = xor i64 %3, -1
  %301 = or i64 2865313500605685195, %300
  %302 = xor i64 %301, -1
  %303 = and i64 %302, -1
  %304 = or i64 %299, %303
  %305 = xor i64 %286, %294
  %306 = xor i64 %305, 5614270109376933145
  %307 = xor i64 %306, %288
  %308 = xor i64 %307, %304
  %309 = xor i64 %308, %293
  %310 = xor i64 %309, %289
  %311 = mul i64 %285, %310
  %312 = trunc i64 %311 to i8
  %313 = add i8 %270, %312
  %314 = mul i8 %268, %313
  %315 = srem i8 %314, 4
  %316 = icmp eq i8 %315, 0
  %317 = mul i8 %267, %267
  %318 = xor i8 %317, %267
  %319 = and i8 %317, %267
  %320 = mul i8 2, %319
  %321 = add i8 %318, %320
  %322 = mul i8 39, %321
  %323 = add i8 23, %322
  %324 = mul i8 -105, %323
  %325 = add i8 111, %324
  %326 = add i64 %13, 4545593547103407573
  %327 = sub i64 0, %13
  %328 = add i64 -4545593547103407573, %327
  %329 = sub i64 0, %328
  %330 = sext i32 %dispatcher1 to i64
  %331 = and i64 %330, 763791705523300952
  %332 = xor i64 %330, -1
  %333 = xor i64 763791705523300952, %332
  %334 = and i64 %333, 763791705523300952
  %335 = sext i32 %dispatcher1 to i64
  %336 = add i64 %335, 1185448808383841256
  %337 = add i64 -7056159893296164248, %335
  %338 = sub i64 %337, -8241608701680005504
  %339 = xor i64 %331, %329
  %340 = xor i64 %339, %334
  %341 = xor i64 %340, %326
  %342 = xor i64 %341, 3323580602754671103
  %343 = xor i64 %342, %336
  %344 = xor i64 %343, %338
  %345 = or i64 %9, -5267079692548160461
  %346 = and i64 -5267079692548160461, %9
  %347 = xor i64 -5267079692548160461, %9
  %348 = or i64 %346, %347
  %349 = sext i32 %dispatcher1 to i64
  %350 = or i64 %349, -245497220537292188
  %351 = xor i64 %349, -1
  %352 = and i64 -245497220537292188, %351
  %353 = add i64 %352, %349
  %354 = and i64 %1, -2885717667336598909
  %355 = xor i64 %1, -1
  %356 = xor i64 -2885717667336598909, %355
  %357 = and i64 %356, -2885717667336598909
  %358 = xor i64 %354, %353
  %359 = xor i64 %358, -1902979778163262466
  %360 = xor i64 %359, %348
  %361 = xor i64 %360, %357
  %362 = xor i64 %361, %350
  %363 = xor i64 %362, %345
  %364 = mul i64 %344, %363
  %365 = trunc i64 %364 to i8
  %366 = srem i8 %325, %365
  %367 = icmp eq i8 %366, 0
  %368 = or i1 %316, %367
  %369 = select i1 %368, i32 595012096, i32 595012214
  %370 = or i64 %11, -7954556153521958489
  %371 = xor i64 %11, -1
  %372 = and i64 -7954556153521958489, %371
  %373 = add i64 %372, %11
  %374 = or i64 %13, 5874808741477710891
  %375 = xor i64 %13, -1
  %376 = and i64 %375, 1313016722596509202
  %377 = and i64 %13, -1313016722596509203
  %378 = or i64 %376, %377
  %379 = xor i64 4881698226608032313, %378
  %380 = xor i64 %13, -1
  %381 = or i64 -5874808741477710892, %380
  %382 = xor i64 %381, -1
  %383 = and i64 %382, -1
  %384 = or i64 %379, %383
  %385 = xor i64 %384, 59422603239598219
  %386 = xor i64 %385, %374
  %387 = xor i64 %386, %370
  %388 = xor i64 %387, %373
  %389 = or i64 %1, 4783424110975125310
  %390 = and i64 4783424110975125310, %1
  %391 = xor i64 4783424110975125310, %1
  %392 = or i64 %390, %391
  %393 = and i64 %5, -2640449101354697813
  %394 = xor i64 %5, -1
  %395 = xor i64 -2640449101354697813, %394
  %396 = and i64 %395, -2640449101354697813
  %397 = xor i64 -5415246452888921566, %396
  %398 = xor i64 %397, %389
  %399 = xor i64 %398, %392
  %400 = xor i64 %399, %393
  %401 = mul i64 %388, %400
  %402 = trunc i64 %401 to i32
  %403 = xor i32 %369, %402
  store i32 %403, i32* %0, align 4
  %404 = call i8** @bf777061424148142830(i32* %0)
  %405 = load i8*, i8** %404, align 8
  indirectbr i8* %405, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %83, %EntryBasicBlockSplit
  %406 = load i8*, i8** %10, align 8
  %407 = load i8, i8* %406, align 1
  %408 = mul i8 %407, 2
  %409 = add i64 %9, -8316258519551809046
  %410 = add i64 8444057329319361205, %9
  %411 = add i64 %410, 1686428224838381365
  %412 = or i64 %5, -8322351759448827067
  %413 = and i64 -8322351759448827067, %5
  %414 = xor i64 -8322351759448827067, %5
  %415 = or i64 %413, %414
  %416 = and i64 %1, -5641318579747771813
  %417 = or i64 5641318579747771812, %1
  %418 = sub i64 %417, 5641318579747771812
  %419 = xor i64 %411, %418
  %420 = xor i64 %419, -303549409671256633
  %421 = xor i64 %420, %409
  %422 = xor i64 %421, %415
  %423 = xor i64 %422, %412
  %424 = xor i64 %423, %416
  %425 = or i64 %11, 7902982660619620702
  %426 = and i64 7902982660619620702, %11
  %427 = xor i64 7902982660619620702, %11
  %428 = or i64 %426, %427
  %429 = and i64 %9, -1269120530716388658
  %430 = or i64 1269120530716388657, %9
  %431 = sub i64 %430, 1269120530716388657
  %432 = and i64 %3, -6178810034649791626
  %433 = or i64 6178810034649791625, %3
  %434 = sub i64 %433, 6178810034649791625
  %435 = xor i64 %431, %432
  %436 = xor i64 %435, %428
  %437 = xor i64 %436, -5549972840248731666
  %438 = xor i64 %437, %434
  %439 = xor i64 %438, %425
  %440 = xor i64 %439, %429
  %441 = mul i64 %424, %440
  %442 = trunc i64 %441 to i8
  %443 = mul i8 %407, %442
  %444 = add i8 2, %443
  %445 = mul i8 %408, %444
  %446 = srem i8 %445, 4
  %447 = icmp eq i8 %446, 0
  %448 = mul i8 %407, %407
  %449 = add i8 %448, %407
  %450 = srem i8 %449, 2
  %451 = icmp eq i8 %450, 0
  %452 = and i1 %447, %451
  %453 = select i1 %452, i32 595012152, i32 595012162
  %454 = xor i32 %453, -1
  %455 = and i32 %454, 965446335
  %456 = and i32 %453, -965446336
  %457 = or i32 %455, %456
  %458 = xor i32 %457, 965446341
  store i32 %458, i32* %0, align 4
  %459 = call i8** @bf777061424148142830(i32* %0)
  %460 = load i8*, i8** %459, align 8
  indirectbr i8* %460, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.8(i64 %0, i64 %1, i64 %2, i1* %.out, i1* %.out1) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h11804894491772278134(i64 595012102)
  %5 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.8, %defaultSwitchBasicBlock), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012097)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.8, %.exitStub2), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012101)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.8, %codeRepl), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012105)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.8, %209), i8** %11, align 8
  %12 = or i64 %0, 6866528566263382731
  %13 = xor i64 %0, -1
  %14 = and i64 %13, 8663052926079505579
  %15 = and i64 %0, -8663052926079505580
  %16 = or i64 %14, %15
  %17 = xor i64 2842782799760660064, %16
  %18 = xor i64 %0, -1
  %19 = or i64 -6866528566263382732, %18
  %20 = xor i64 %19, -1
  %21 = and i64 %20, -1
  %22 = or i64 %17, %21
  %23 = or i64 %0, -9168880682801098455
  %24 = xor i64 %0, -1
  %25 = and i64 -9168880682801098455, %24
  %26 = add i64 %25, %0
  %27 = add i64 %2, -6532639119069437365
  %28 = xor i64 -6532639119069437365, %2
  %29 = and i64 -6532639119069437365, %2
  %30 = mul i64 2, %29
  %31 = add i64 %28, %30
  %32 = xor i64 %12, %27
  %33 = xor i64 %32, %31
  %34 = xor i64 %33, %23
  %35 = xor i64 %34, -6965697794811319137
  %36 = xor i64 %35, %22
  %37 = xor i64 %36, %26
  %38 = or i64 %0, 2692400100964007785
  %39 = xor i64 %0, -1
  %40 = and i64 2692400100964007785, %39
  %41 = add i64 %40, %0
  %42 = and i64 %2, -3339577918237182859
  %43 = xor i64 %2, -1
  %44 = xor i64 -3339577918237182859, %43
  %45 = and i64 %44, -3339577918237182859
  %46 = xor i64 %45, -8311199743894482696
  %47 = xor i64 %46, %38
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %41
  %50 = mul i64 %37, %49
  %51 = call i64 @h11804894491772278134(i64 %50)
  %52 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %51
  store i8* blockaddress(@render.extracted.8, %EntryBasicBlockSplit), i8** %52, align 8
  %53 = call i64 @h11804894491772278134(i64 595012098)
  %54 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %53
  store i8* blockaddress(@render.extracted.8, %.exitStub), i8** %54, align 8
  %55 = call i64 @h11804894491772278134(i64 595012096)
  %56 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %55
  store i8* blockaddress(@render.extracted.8, %loopEnd), i8** %56, align 8
  %57 = call i64 @h11804894491772278134(i64 595012100)
  %58 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %57
  store i8* blockaddress(@render.extracted.8, %BogusBasicBlock), i8** %58, align 8
  %59 = call i64 @h11804894491772278134(i64 595012099)
  %60 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %59
  store i8* blockaddress(@render.extracted.8, %loopStart), i8** %60, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %61, align 4
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %62, align 4
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %63, align 4
  %64 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %65, align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %66, align 4
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %67, align 4
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %68, align 4
  %69 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %69, align 4
  %70 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %70, align 4
  %71 = alloca i64, align 8
  %72 = alloca i64, align 8
  %73 = and i64 %1, -4118238548784028181
  %74 = xor i64 %1, -1
  %75 = xor i64 -4118238548784028181, %74
  %76 = and i64 %75, -4118238548784028181
  %77 = or i64 %0, -4457293320894833592
  %78 = xor i64 %0, -1
  %79 = and i64 %78, -3592396473664846831
  %80 = and i64 %0, 3592396473664846830
  %81 = or i64 %79, %80
  %82 = xor i64 865180582433314905, %81
  %83 = xor i64 %0, -1
  %84 = or i64 4457293320894833591, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = and i64 %2, -5532095470267119191
  %89 = or i64 5532095470267119190, %2
  %90 = sub i64 %89, 5532095470267119190
  %91 = xor i64 %90, %73
  %92 = xor i64 %91, %77
  %93 = xor i64 %92, %76
  %94 = xor i64 %93, %88
  %95 = xor i64 %94, 1501751222984946161
  %96 = xor i64 %95, %87
  %97 = and i64 %1, -7123157533607622189
  %98 = xor i64 %1, -1
  %99 = or i64 7123157533607622188, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %100, -1
  %102 = add i64 %0, -1393586412628681715
  %103 = xor i64 -1393586412628681715, %0
  %104 = and i64 -1393586412628681715, %0
  %105 = mul i64 2, %104
  %106 = add i64 %103, %105
  %107 = and i64 %2, -5405618932670439488
  %108 = or i64 5405618932670439487, %2
  %109 = sub i64 %108, 5405618932670439487
  %110 = xor i64 0, %101
  %111 = xor i64 %110, %109
  %112 = xor i64 %111, %106
  %113 = xor i64 %112, %102
  %114 = xor i64 %113, %107
  %115 = xor i64 %114, %97
  %116 = mul i64 %96, %115
  %117 = trunc i64 %116 to i1
  %118 = and i64 %0, 1231061840420941157
  %119 = xor i64 %0, -1
  %120 = xor i64 1231061840420941157, %119
  %121 = and i64 %120, 1231061840420941157
  %122 = or i64 %1, -2276880357860026533
  %123 = xor i64 %1, -1
  %124 = and i64 -2276880357860026533, %123
  %125 = add i64 %124, %1
  %126 = add i64 %2, 2394092035513024676
  %127 = sub i64 0, %2
  %128 = sub i64 2394092035513024676, %127
  %129 = xor i64 %126, %122
  %130 = xor i64 %129, -6239448404607561361
  %131 = xor i64 %130, %121
  %132 = xor i64 %131, %125
  %133 = xor i64 %132, %118
  %134 = xor i64 %133, %128
  %135 = add i64 %1, -7103364528824533571
  %136 = and i64 -7103364528824533571, %1
  %137 = or i64 -7103364528824533571, %1
  %138 = add i64 %136, %137
  %139 = and i64 %1, 7122295017267026539
  %140 = xor i64 %1, -1
  %141 = xor i64 7122295017267026539, %140
  %142 = and i64 %141, 7122295017267026539
  %143 = xor i64 %139, %138
  %144 = xor i64 %143, %142
  %145 = xor i64 %144, %135
  %146 = xor i64 %145, 0
  %147 = mul i64 %134, %146
  %148 = trunc i64 %147 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %72, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %117, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 %148, i1* null, i1* null)
  %149 = load i64, i64* %72, align 8
  %150 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13584920069806577051, i32 0, i64 %149
  store i8** %150, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012099, i32* %3, align 4
  %151 = call i8** @bf2869133644047347425(i32* %3)
  %152 = load i8*, i8** %151, align 8
  indirectbr i8* %152, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %209
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub2
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i64, i64, i1*)* @render.extracted.8.extracted to i8*), i8** %.reload, align 8
  %153 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  %156 = load i32, i32* %155, align 4
  %157 = sub i32 %154, %156
  store i32 %157, i32* %dispatcher, align 4
  %158 = load i8*, i8** %7, align 8
  %159 = load i8, i8* %158, align 1
  %160 = mul i8 %159, 2
  %161 = add i64 %2, -2153076393834132463
  %162 = sub i64 0, %2
  %163 = sub i64 -2153076393834132463, %162
  %164 = and i64 %0, -3642638470618600487
  %165 = or i64 3642638470618600486, %0
  %166 = sub i64 %165, 3642638470618600486
  %167 = xor i64 %164, %166
  %168 = xor i64 %167, 2863488314738486497
  %169 = xor i64 %168, %163
  %170 = xor i64 %169, %161
  %171 = add i64 %1, 6146517086385675269
  %172 = sub i64 0, %1
  %173 = add i64 -6146517086385675269, %172
  %174 = sub i64 0, %173
  %175 = add i64 %6, -8154421658586207949
  %176 = and i64 -8154421658586207949, %6
  %177 = or i64 -8154421658586207949, %6
  %178 = add i64 %176, %177
  %179 = add i64 %6, 5811253708784669089
  %180 = and i64 5811253708784669089, %6
  %181 = or i64 5811253708784669089, %6
  %182 = add i64 %180, %181
  %183 = xor i64 %175, %174
  %184 = xor i64 %183, %171
  %185 = xor i64 %184, 5877085387145621058
  %186 = xor i64 %185, %182
  %187 = xor i64 %186, %179
  %188 = xor i64 %187, %178
  %189 = mul i64 %170, %188
  %190 = trunc i64 %189 to i8
  %191 = mul i8 %159, %190
  %192 = add i8 -57, %191
  %193 = add i8 %192, 59
  %194 = mul i8 %160, %193
  %195 = srem i8 %194, 4
  %196 = icmp eq i8 %195, 0
  %197 = mul i8 %159, %159
  %198 = add i8 %197, -126
  %199 = add i8 %198, %159
  %200 = sub i8 %199, -126
  %201 = srem i8 %200, 2
  %202 = icmp eq i8 %201, 0
  %203 = or i1 %196, %202
  %204 = select i1 %203, i32 595012104, i32 595012096
  %205 = xor i32 %204, 2068956359
  %206 = xor i32 %205, 2068956367
  store i32 %206, i32* %3, align 4
  %207 = call i8** @bf2869133644047347425(i32* %3)
  %208 = load i8*, i8** %207, align 8
  indirectbr i8* %208, [label %loopEnd, label %EntryBasicBlockSplit]

209:                                              ; preds = %209, %loopStart
  %210 = add i64 %10, -932256710028894036
  %211 = xor i64 -932256710028894036, %10
  %212 = and i64 -932256710028894036, %10
  %213 = mul i64 2, %212
  %214 = add i64 %211, %213
  %215 = and i64 %55, 4339114961410156833
  %216 = xor i64 %55, -1
  %217 = xor i64 4339114961410156833, %216
  %218 = and i64 %217, 4339114961410156833
  %219 = xor i64 %210, %218
  %220 = xor i64 %219, %215
  %221 = xor i64 %220, %214
  %222 = xor i64 %221, -8376832037403637687
  %223 = or i64 %6, 6976644252976758387
  %224 = xor i64 %6, -1
  %225 = and i64 6976644252976758387, %224
  %226 = add i64 %225, %6
  %227 = and i64 %53, 738279327185738568
  %228 = xor i64 %53, -1
  %229 = or i64 -738279327185738569, %228
  %230 = xor i64 %229, -1
  %231 = and i64 %230, -1
  %232 = xor i64 %227, %226
  %233 = xor i64 %232, -3981361466702840480
  %234 = xor i64 %233, %223
  %235 = xor i64 %234, %231
  %236 = mul i64 %222, %235
  %237 = and i64 %4, 6413779599515912224
  %238 = xor i64 %4, -1
  %239 = or i64 -6413779599515912225, %238
  %240 = xor i64 %239, -1
  %241 = and i64 %240, -1
  %242 = add i64 %10, -2343006313398850821
  %243 = xor i64 -2343006313398850821, %10
  %244 = and i64 -2343006313398850821, %10
  %245 = mul i64 2, %244
  %246 = add i64 %243, %245
  %247 = or i64 %53, -2013476028503178191
  %248 = and i64 -2013476028503178191, %53
  %249 = xor i64 -2013476028503178191, %53
  %250 = or i64 %248, %249
  %251 = xor i64 %241, %250
  %252 = xor i64 %251, %246
  %253 = xor i64 %252, %237
  %254 = xor i64 %253, 4815153450885417855
  %255 = xor i64 %254, %242
  %256 = xor i64 %255, %247
  %257 = or i64 %55, 1520503764827274917
  %258 = and i64 1520503764827274917, %55
  %259 = xor i64 1520503764827274917, %55
  %260 = or i64 %258, %259
  %261 = and i64 %55, 9122785414516373167
  %262 = xor i64 %55, -1
  %263 = xor i64 9122785414516373167, %262
  %264 = and i64 %263, 9122785414516373167
  %265 = xor i64 %261, %260
  %266 = xor i64 %265, %257
  %267 = xor i64 %266, 5093338809889314768
  %268 = xor i64 %267, %264
  %269 = mul i64 %256, %268
  %270 = mul i64 %236, %269
  %271 = icmp eq i64 %0, 1761
  store i1 %271, i1* %.out, align 1
  %272 = sub i64 50, 118
  %273 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %276 = load i32, i32* %275, align 4
  %277 = srem i32 %274, %276
  store i32 %277, i32* %dispatcher, align 4
  %278 = load i8*, i8** %60, align 8
  %279 = load i8, i8* %278, align 1
  %280 = and i8 %279, 1
  %281 = icmp eq i8 %280, 1
  %282 = mul i8 %279, %279
  %283 = xor i8 %282, %279
  %284 = and i8 %282, %279
  %285 = mul i8 2, %284
  %286 = add i8 %283, %285
  %287 = add i64 %59, -1457750533820160301
  %288 = add i64 8854775506168247418, %59
  %289 = add i64 %288, 8134218033721143897
  %290 = or i64 %6, 3363938056147438916
  %291 = xor i64 %6, -1
  %292 = and i64 3363938056147438916, %291
  %293 = add i64 %292, %6
  %294 = xor i64 -757198756534635, %289
  %295 = xor i64 %294, %287
  %296 = xor i64 %295, %290
  %297 = xor i64 %296, %293
  %298 = and i64 %1, 8202724141231636708
  %299 = or i64 -8202724141231636709, %1
  %300 = sub i64 %299, -8202724141231636709
  %301 = and i64 %57, -939038523078317904
  %302 = xor i64 %57, -1
  %303 = or i64 939038523078317903, %302
  %304 = xor i64 %303, -1
  %305 = and i64 %304, -1
  %306 = xor i64 %300, %305
  %307 = xor i64 %306, 637506562460084602
  %308 = xor i64 %307, %301
  %309 = xor i64 %308, %298
  %310 = mul i64 %297, %309
  %311 = trunc i64 %310 to i8
  %312 = srem i8 %286, %311
  %313 = icmp eq i8 %312, 0
  %314 = or i1 %281, %313
  %315 = select i1 %314, i32 595012101, i32 595012096
  %316 = xor i32 %315, 5
  store i32 %316, i32* %3, align 4
  %317 = call i8** @bf2869133644047347425(i32* %3)
  %318 = load i8*, i8** %317, align 8
  indirectbr i8* %318, [label %loopEnd, label %209]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %71, align 8
  %319 = add i64 %57, -4800724934808230921
  %320 = add i64 4211545915482711904, %57
  %321 = add i64 %320, -9012270850290942825
  %322 = add i64 %59, 341511837046767068
  %323 = and i64 341511837046767068, %59
  %324 = or i64 341511837046767068, %59
  %325 = add i64 %323, %324
  %326 = add i64 %0, 4095859765322589897
  %327 = sub i64 0, %0
  %328 = sub i64 4095859765322589897, %327
  %329 = xor i64 %325, 4320930349184578689
  %330 = xor i64 %329, %321
  %331 = xor i64 %330, %319
  %332 = xor i64 %331, %322
  %333 = xor i64 %332, %326
  %334 = xor i64 %333, %328
  %335 = or i64 %4, 3787997834697956277
  %336 = xor i64 %4, -1
  %337 = and i64 3787997834697956277, %336
  %338 = add i64 %337, %4
  %339 = or i64 %53, 1047595100644517894
  %340 = xor i64 %53, -1
  %341 = and i64 1047595100644517894, %340
  %342 = add i64 %341, %53
  %343 = xor i64 %342, -4955767599388800127
  %344 = xor i64 %343, %338
  %345 = xor i64 %344, %339
  %346 = xor i64 %345, %335
  %347 = mul i64 %334, %346
  %348 = trunc i64 %347 to i32
  %349 = alloca i8**, i32 %348, align 8
  %350 = and i64 %10, -6482484215909063571
  %351 = or i64 6482484215909063570, %10
  %352 = sub i64 %351, 6482484215909063570
  %353 = or i64 %0, 5948956432477495444
  %354 = and i64 5948956432477495444, %0
  %355 = xor i64 5948956432477495444, %0
  %356 = or i64 %354, %355
  %357 = xor i64 4657983871361674473, %352
  %358 = xor i64 %357, %350
  %359 = xor i64 %358, %356
  %360 = xor i64 %359, %353
  %361 = and i64 %149, 4144528163588370433
  %362 = xor i64 %149, -1
  %363 = xor i64 4144528163588370433, %362
  %364 = and i64 %363, 4144528163588370433
  %365 = or i64 %53, 8812685218201797897
  %366 = xor i64 %53, -1
  %367 = and i64 8812685218201797897, %366
  %368 = add i64 %367, %53
  %369 = xor i64 %365, %361
  %370 = xor i64 %369, %368
  %371 = xor i64 %370, -908351952253527352
  %372 = xor i64 %371, %364
  %373 = mul i64 %360, %372
  %374 = trunc i64 %373 to i32
  %375 = and i64 %51, -6863689457348101486
  %376 = xor i64 %51, -1
  %377 = or i64 6863689457348101485, %376
  %378 = xor i64 %377, -1
  %379 = and i64 %378, -1
  %380 = or i64 %6, 261380939248560327
  %381 = xor i64 %6, -1
  %382 = and i64 %381, -3617082426795402551
  %383 = and i64 %6, 3617082426795402550
  %384 = or i64 %382, %383
  %385 = xor i64 -3572174576006024690, %384
  %386 = xor i64 %6, -1
  %387 = or i64 -261380939248560328, %386
  %388 = xor i64 %387, -1
  %389 = and i64 %388, -1
  %390 = or i64 %385, %389
  %391 = or i64 %57, -6180730379760118336
  %392 = and i64 -6180730379760118336, %57
  %393 = xor i64 -6180730379760118336, %57
  %394 = or i64 %392, %393
  %395 = xor i64 -4363343317757950647, %390
  %396 = xor i64 %395, %379
  %397 = xor i64 %396, %394
  %398 = xor i64 %397, %391
  %399 = xor i64 %398, %375
  %400 = xor i64 %399, %380
  %401 = and i64 %57, -1488199664727250580
  %402 = xor i64 %57, -1
  %403 = xor i64 -1488199664727250580, %402
  %404 = and i64 %403, -1488199664727250580
  %405 = add i64 %4, 5908683744668688980
  %406 = sub i64 0, %4
  %407 = add i64 -5908683744668688980, %406
  %408 = sub i64 0, %407
  %409 = add i64 %1, -7233692362124279215
  %410 = and i64 -7233692362124279215, %1
  %411 = or i64 -7233692362124279215, %1
  %412 = add i64 %410, %411
  %413 = xor i64 %408, %409
  %414 = xor i64 %413, 0
  %415 = xor i64 %414, %401
  %416 = xor i64 %415, %405
  %417 = xor i64 %416, %404
  %418 = xor i64 %417, %412
  %419 = mul i64 %400, %418
  %420 = trunc i64 %419 to i1
  %421 = add i64 %59, 3381319008939901873
  %422 = add i64 4446087787780062574, %59
  %423 = add i64 %422, -1064768778840160701
  %424 = add i64 %55, -9087970612045104536
  %425 = xor i64 -9087970612045104536, %55
  %426 = and i64 -9087970612045104536, %55
  %427 = mul i64 2, %426
  %428 = add i64 %425, %427
  %429 = add i64 %57, -6217120406299228483
  %430 = add i64 -5572967340950571703, %57
  %431 = sub i64 %430, 644153065348656780
  %432 = xor i64 %421, %431
  %433 = xor i64 %432, %423
  %434 = xor i64 %433, %428
  %435 = xor i64 %434, %429
  %436 = xor i64 %435, %424
  %437 = xor i64 %436, -5876621534821929603
  %438 = and i64 %59, 3825973869178349829
  %439 = or i64 -3825973869178349830, %59
  %440 = sub i64 %439, -3825973869178349830
  %441 = or i64 %149, 5261336007349228371
  %442 = xor i64 %149, -1
  %443 = and i64 5261336007349228371, %442
  %444 = add i64 %443, %149
  %445 = xor i64 %444, 0
  %446 = xor i64 %445, %438
  %447 = xor i64 %446, %441
  %448 = xor i64 %447, %440
  %449 = mul i64 %437, %448
  %450 = add i64 %4, 4791662105909243483
  %451 = sub i64 0, %4
  %452 = add i64 -4791662105909243483, %451
  %453 = sub i64 0, %452
  %454 = or i64 %1, 5009808528397733849
  %455 = and i64 5009808528397733849, %1
  %456 = xor i64 5009808528397733849, %1
  %457 = or i64 %455, %456
  %458 = xor i64 %454, -1928021605131246691
  %459 = xor i64 %458, %453
  %460 = xor i64 %459, %457
  %461 = xor i64 %460, %450
  %462 = and i64 %0, -1963588911006156976
  %463 = or i64 1963588911006156975, %0
  %464 = sub i64 %463, 1963588911006156975
  %465 = add i64 %51, -3132991855924975550
  %466 = xor i64 -3132991855924975550, %51
  %467 = and i64 -3132991855924975550, %51
  %468 = mul i64 2, %467
  %469 = add i64 %466, %468
  %470 = xor i64 0, %462
  %471 = xor i64 %470, %464
  %472 = xor i64 %471, %469
  %473 = xor i64 %472, %465
  %474 = mul i64 %461, %473
  %475 = trunc i64 %474 to i1
  %476 = add i64 %6, -2931615998536619091
  %477 = sub i64 0, %6
  %478 = sub i64 -2931615998536619091, %477
  %479 = or i64 %53, 8525140419474812859
  %480 = xor i64 %53, -1
  %481 = and i64 %480, 755225404936741947
  %482 = and i64 %53, -755225404936741948
  %483 = or i64 %481, %482
  %484 = xor i64 8949914193092676480, %483
  %485 = xor i64 %53, -1
  %486 = or i64 -8525140419474812860, %485
  %487 = xor i64 %486, -1
  %488 = and i64 %487, -1
  %489 = or i64 %484, %488
  %490 = add i64 %0, -3212972493227477770
  %491 = xor i64 -3212972493227477770, %0
  %492 = and i64 -3212972493227477770, %0
  %493 = mul i64 2, %492
  %494 = add i64 %491, %493
  %495 = xor i64 -7626291409621298873, %478
  %496 = xor i64 %495, %490
  %497 = xor i64 %496, %489
  %498 = xor i64 %497, %494
  %499 = xor i64 %498, %479
  %500 = xor i64 %499, %476
  %501 = or i64 %8, -2044912032472376243
  %502 = xor i64 %8, -1
  %503 = and i64 -2044912032472376243, %502
  %504 = add i64 %503, %8
  %505 = add i64 %4, 4776778553777389554
  %506 = add i64 6106118178444686045, %4
  %507 = add i64 %506, -1329339624667296491
  %508 = sext i32 %dispatcher1 to i64
  %509 = and i64 %508, -3592754629949971603
  %510 = xor i64 %508, -1
  %511 = xor i64 -3592754629949971603, %510
  %512 = and i64 %511, -3592754629949971603
  %513 = xor i64 0, %512
  %514 = xor i64 %513, %501
  %515 = xor i64 %514, %507
  %516 = xor i64 %515, %509
  %517 = xor i64 %516, %504
  %518 = xor i64 %517, %505
  %519 = mul i64 %500, %518
  %520 = trunc i64 %519 to i1
  %521 = and i64 %6, 9192105885664371375
  %522 = xor i64 %6, -1
  %523 = xor i64 9192105885664371375, %522
  %524 = and i64 %523, 9192105885664371375
  %525 = and i64 %4, -7428991481892437267
  %526 = xor i64 %4, -1
  %527 = xor i64 -7428991481892437267, %526
  %528 = and i64 %527, -7428991481892437267
  %529 = xor i64 %528, %524
  %530 = xor i64 %529, 6475379072849957273
  %531 = xor i64 %530, %521
  %532 = xor i64 %531, %525
  %533 = add i64 %1, -7016924700888125623
  %534 = xor i64 -7016924700888125623, %1
  %535 = and i64 -7016924700888125623, %1
  %536 = mul i64 2, %535
  %537 = add i64 %534, %536
  %538 = add i64 %55, 4241464809809981074
  %539 = and i64 4241464809809981074, %55
  %540 = or i64 4241464809809981074, %55
  %541 = add i64 %539, %540
  %542 = xor i64 %533, %541
  %543 = xor i64 %542, %538
  %544 = xor i64 %543, %537
  %545 = xor i64 %544, 0
  %546 = mul i64 %532, %545
  %547 = trunc i64 %546 to i1
  call void @"9941920946239825184"(i32 %374, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* %71, i8*** %349, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %420, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %449, i64* null, i1* null, i8* null, float* null, i1* null, i1 %475, i1 false, i1 %520, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %547, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %548 = load i8**, i8*** %349, align 8
  %549 = load i8*, i8** %548, align 8
  %550 = bitcast i8* %549 to i1 (i64, i64, i1*)*
  %targetBlock = call i1 %550(i64 %1, i64 %2, i1* %.out1)
  %551 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %552 = load i32, i32* %551, align 4
  %553 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %554 = load i32, i32* %553, align 4
  %555 = srem i32 %552, %554
  %556 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %557 = load i32, i32* %556, align 4
  %558 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %559 = load i32, i32* %558, align 4
  %560 = srem i32 %557, %559
  %561 = select i1 %targetBlock, i32 %555, i32 %560
  store i32 %561, i32* %dispatcher, align 4
  %562 = load i8*, i8** %58, align 8
  %563 = load i8, i8* %562, align 1
  %564 = mul i8 %563, 2
  %565 = mul i8 %563, 2
  %566 = add i8 2, %565
  %567 = mul i8 %564, %566
  %568 = srem i8 %567, 4
  %569 = icmp eq i8 %568, 0
  %570 = mul i8 %563, %563
  %571 = mul i8 %570, %563
  %572 = sub i8 0, %563
  %573 = sub i8 %571, %572
  %574 = srem i8 %573, 2
  %575 = icmp eq i8 %574, 0
  %576 = and i1 %569, %575
  %577 = and i64 %2, -2600027893579829857
  %578 = xor i64 %2, -1
  %579 = xor i64 -2600027893579829857, %578
  %580 = and i64 %579, -2600027893579829857
  %581 = add i64 %59, 3013329106638144436
  %582 = add i64 1851485433789923986, %59
  %583 = sub i64 %582, -1161843672848220450
  %584 = xor i64 %581, %577
  %585 = xor i64 %584, 4321104932685660869
  %586 = xor i64 %585, %580
  %587 = xor i64 %586, %583
  %588 = and i64 %2, 7555773236134744141
  %589 = xor i64 %2, -1
  %590 = or i64 -7555773236134744142, %589
  %591 = xor i64 %590, -1
  %592 = and i64 %591, -1
  %593 = add i64 %2, 1642748539998220864
  %594 = sub i64 0, %2
  %595 = add i64 -1642748539998220864, %594
  %596 = sub i64 0, %595
  %597 = add i64 %4, -7459467184766888418
  %598 = xor i64 -7459467184766888418, %4
  %599 = and i64 -7459467184766888418, %4
  %600 = mul i64 2, %599
  %601 = add i64 %598, %600
  %602 = xor i64 %588, -704403000427994624
  %603 = xor i64 %602, %592
  %604 = xor i64 %603, %596
  %605 = xor i64 %604, %601
  %606 = xor i64 %605, %593
  %607 = xor i64 %606, %597
  %608 = mul i64 %587, %607
  %609 = trunc i64 %608 to i32
  %610 = select i1 %576, i32 595012099, i32 %609
  %611 = xor i32 %610, -1
  %612 = and i32 %611, 642942306
  %613 = and i32 %610, -642942307
  %614 = or i32 %612, %613
  %615 = xor i32 %614, 642942305
  store i32 %615, i32* %3, align 4
  %616 = call i8** @bf2869133644047347425(i32* %3)
  %617 = load i8*, i8** %616, align 8
  indirectbr i8* %617, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub2:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %618 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %618, align 4
  %619 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  %620 = add i64 %149, 7922085637029648759
  %621 = xor i64 7922085637029648759, %149
  %622 = and i64 7922085637029648759, %149
  %623 = mul i64 2, %622
  %624 = add i64 %621, %623
  %625 = add i64 %4, -76630616988183688
  %626 = xor i64 -76630616988183688, %4
  %627 = and i64 -76630616988183688, %4
  %628 = mul i64 2, %627
  %629 = add i64 %626, %628
  %630 = xor i64 %629, %624
  %631 = xor i64 %630, -9206150812406308233
  %632 = xor i64 %631, %625
  %633 = xor i64 %632, %620
  %634 = and i64 %59, 6917975164933644478
  %635 = xor i64 %59, -1
  %636 = xor i64 6917975164933644478, %635
  %637 = and i64 %636, 6917975164933644478
  %638 = and i64 %55, -1511525723638237579
  %639 = xor i64 %55, -1
  %640 = xor i64 -1511525723638237579, %639
  %641 = and i64 %640, -1511525723638237579
  %642 = xor i64 %637, %638
  %643 = xor i64 %642, 4297121748865210183
  %644 = xor i64 %643, %641
  %645 = xor i64 %644, %634
  %646 = mul i64 %633, %645
  %647 = trunc i64 %646 to i32
  store i32 %647, i32* %619, align 4
  %648 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %648, align 4
  %649 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %650 = or i64 %59, -490999422109289462
  %651 = xor i64 %59, -1
  %652 = and i64 -490999422109289462, %651
  %653 = add i64 %652, %59
  %654 = add i64 %55, 4845262339066014617
  %655 = sub i64 0, %55
  %656 = sub i64 4845262339066014617, %655
  %657 = xor i64 %653, %650
  %658 = xor i64 %657, %654
  %659 = xor i64 %658, 7785898351671391479
  %660 = xor i64 %659, %656
  %661 = and i64 %8, -7132741043378628531
  %662 = xor i64 %8, -1
  %663 = or i64 7132741043378628530, %662
  %664 = xor i64 %663, -1
  %665 = and i64 %664, -1
  %666 = or i64 %6, -4206274860123969706
  %667 = and i64 -4206274860123969706, %6
  %668 = xor i64 -4206274860123969706, %6
  %669 = or i64 %667, %668
  %670 = and i64 %2, 4135284822793384371
  %671 = xor i64 %2, -1
  %672 = or i64 -4135284822793384372, %671
  %673 = xor i64 %672, -1
  %674 = and i64 %673, -1
  %675 = xor i64 %670, %665
  %676 = xor i64 %675, -6911227435282464797
  %677 = xor i64 %676, %674
  %678 = xor i64 %677, %666
  %679 = xor i64 %678, %669
  %680 = xor i64 %679, %661
  %681 = mul i64 %660, %680
  %682 = trunc i64 %681 to i32
  store i32 %682, i32* %649, align 4
  %683 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %683, align 4
  %684 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %685 = load i32, i32* %684, align 4
  store i32 %685, i32* %dispatcher, align 4
  %686 = load i8*, i8** %11, align 8
  %687 = load i8, i8* %686, align 1
  %688 = sext i32 %dispatcher1 to i64
  %689 = add i64 %688, -8010992826576279475
  %690 = and i64 -8010992826576279475, %688
  %691 = or i64 -8010992826576279475, %688
  %692 = add i64 %690, %691
  %693 = or i64 %0, 1425612235379823506
  %694 = xor i64 %0, -1
  %695 = and i64 1425612235379823506, %694
  %696 = add i64 %695, %0
  %697 = xor i64 %692, %696
  %698 = xor i64 %697, %693
  %699 = xor i64 %698, %689
  %700 = xor i64 %699, 2047801496103006883
  %701 = add i64 %2, -470667573856656145
  %702 = add i64 7419535966730307700, %2
  %703 = sub i64 %702, 7890203540586963845
  %704 = add i64 %53, 2504059690198988706
  %705 = xor i64 2504059690198988706, %53
  %706 = and i64 2504059690198988706, %53
  %707 = mul i64 2, %706
  %708 = add i64 %705, %707
  %709 = add i64 %51, -1348787651296803620
  %710 = xor i64 -1348787651296803620, %51
  %711 = and i64 -1348787651296803620, %51
  %712 = mul i64 2, %711
  %713 = add i64 %710, %712
  %714 = xor i64 %701, %709
  %715 = xor i64 %714, %703
  %716 = xor i64 %715, %708
  %717 = xor i64 %716, %704
  %718 = xor i64 %717, 4293095187579085334
  %719 = xor i64 %718, %713
  %720 = mul i64 %700, %719
  %721 = trunc i64 %720 to i8
  %722 = mul i8 %687, %721
  %723 = mul i8 %687, 2
  %724 = add i8 2, %723
  %725 = mul i8 %722, %724
  %726 = srem i8 %725, 4
  %727 = icmp eq i8 %726, 0
  %728 = mul i8 %687, %687
  %729 = add i8 %728, %687
  %730 = or i64 %55, -6343287628361771632
  %731 = xor i64 %55, -1
  %732 = and i64 -6343287628361771632, %731
  %733 = add i64 %732, %55
  %734 = and i64 %55, 409899351967807825
  %735 = xor i64 %55, -1
  %736 = xor i64 409899351967807825, %735
  %737 = and i64 %736, 409899351967807825
  %738 = or i64 %55, -5089819179796220525
  %739 = xor i64 %55, -1
  %740 = and i64 %739, -727374364618200453
  %741 = and i64 %55, 727374364618200452
  %742 = or i64 %740, %741
  %743 = xor i64 5528886192096042984, %742
  %744 = xor i64 %55, -1
  %745 = or i64 5089819179796220524, %744
  %746 = xor i64 %745, -1
  %747 = and i64 %746, -1
  %748 = or i64 %743, %747
  %749 = xor i64 %737, %733
  %750 = xor i64 %749, %738
  %751 = xor i64 %750, %734
  %752 = xor i64 %751, %730
  %753 = xor i64 %752, %748
  %754 = xor i64 %753, -2600001846727595221
  %755 = or i64 %57, -6214553234377267995
  %756 = and i64 -6214553234377267995, %57
  %757 = xor i64 -6214553234377267995, %57
  %758 = or i64 %756, %757
  %759 = and i64 %53, 548852833871234003
  %760 = or i64 -548852833871234004, %53
  %761 = sub i64 %760, -548852833871234004
  %762 = or i64 %51, 5117115294339165659
  %763 = and i64 5117115294339165659, %51
  %764 = xor i64 5117115294339165659, %51
  %765 = or i64 %763, %764
  %766 = xor i64 %759, 2986212714756994822
  %767 = xor i64 %766, %762
  %768 = xor i64 %767, %765
  %769 = xor i64 %768, %755
  %770 = xor i64 %769, %761
  %771 = xor i64 %770, %758
  %772 = mul i64 %754, %771
  %773 = trunc i64 %772 to i8
  %774 = srem i8 %729, %773
  %775 = icmp eq i8 %774, 0
  %776 = and i1 %727, %775
  %777 = select i1 %776, i32 595012096, i32 595012104
  %778 = xor i32 %777, 8
  store i32 %778, i32* %3, align 4
  %779 = call i8** @bf2869133644047347425(i32* %3)
  %780 = load i8*, i8** %779, align 8
  indirectbr i8* %780, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %781 = load i8*, i8** %9, align 8
  %782 = load i8, i8* %781, align 1
  %783 = mul i8 %782, %782
  %784 = add i8 %783, %782
  %785 = or i64 %0, 6832058859523112210
  %786 = xor i64 %0, -1
  %787 = and i64 6832058859523112210, %786
  %788 = add i64 %787, %0
  %789 = add i64 %0, -686120466076891902
  %790 = and i64 -686120466076891902, %0
  %791 = or i64 -686120466076891902, %0
  %792 = add i64 %790, %791
  %793 = xor i64 %789, %785
  %794 = xor i64 %793, 7060285964737566517
  %795 = xor i64 %794, %788
  %796 = xor i64 %795, %792
  %797 = and i64 %0, 2581777990331087580
  %798 = xor i64 %0, -1
  %799 = xor i64 2581777990331087580, %798
  %800 = and i64 %799, 2581777990331087580
  %801 = and i64 %10, 5770600361768155424
  %802 = or i64 -5770600361768155425, %10
  %803 = sub i64 %802, -5770600361768155425
  %804 = xor i64 %803, 399439224773085527
  %805 = xor i64 %804, %800
  %806 = xor i64 %805, %801
  %807 = xor i64 %806, %797
  %808 = mul i64 %796, %807
  %809 = trunc i64 %808 to i8
  %810 = mul i8 %784, %809
  %811 = srem i8 %810, 2
  %812 = icmp eq i8 %811, 0
  %813 = mul i8 %782, %782
  %814 = add i8 %813, %782
  %815 = srem i8 %814, 2
  %816 = icmp eq i8 %815, 0
  %817 = xor i1 %812, true
  %818 = xor i1 %816, true
  %819 = or i1 %817, %818
  %820 = xor i1 %819, true
  %821 = and i1 %820, true
  %822 = select i1 %821, i32 595012096, i32 595012096
  %823 = xor i32 %822, 0
  store i32 %823, i32* %3, align 4
  %824 = call i8** @bf2869133644047347425(i32* %3)
  %825 = load i8*, i8** %824, align 8
  indirectbr i8* %825, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %209, %EntryBasicBlockSplit
  %826 = load i8*, i8** %5, align 8
  %827 = load i8, i8* %826, align 1
  %828 = mul i8 %827, 2
  %829 = mul i8 %827, 2
  %830 = add i8 -96, %829
  %831 = add i8 %830, 98
  %832 = mul i8 %828, %831
  %833 = srem i8 %832, 4
  %834 = add i64 %55, 4229330759524091578
  %835 = and i64 4229330759524091578, %55
  %836 = or i64 4229330759524091578, %55
  %837 = add i64 %835, %836
  %838 = and i64 %1, -6798726773115006446
  %839 = xor i64 %1, -1
  %840 = or i64 6798726773115006445, %839
  %841 = xor i64 %840, -1
  %842 = and i64 %841, -1
  %843 = xor i64 %842, %838
  %844 = xor i64 %843, %837
  %845 = xor i64 %844, %834
  %846 = xor i64 %845, -159022022809528761
  %847 = sext i32 %dispatcher1 to i64
  %848 = add i64 %847, 3254193322575808316
  %849 = xor i64 3254193322575808316, %847
  %850 = and i64 3254193322575808316, %847
  %851 = mul i64 2, %850
  %852 = add i64 %849, %851
  %853 = or i64 %53, -5113420602141664284
  %854 = xor i64 %53, -1
  %855 = and i64 -5113420602141664284, %854
  %856 = add i64 %855, %53
  %857 = add i64 %2, -7647596497272453116
  %858 = add i64 7018573835434999730, %2
  %859 = sub i64 %858, -3780573741002098770
  %860 = xor i64 %853, %848
  %861 = xor i64 %860, %857
  %862 = xor i64 %861, %852
  %863 = xor i64 %862, 0
  %864 = xor i64 %863, %859
  %865 = xor i64 %864, %856
  %866 = mul i64 %846, %865
  %867 = trunc i64 %866 to i8
  %868 = icmp eq i8 %833, %867
  %869 = mul i8 %827, %827
  %870 = xor i8 %869, %827
  %871 = and i8 %869, %827
  %872 = mul i8 2, %871
  %873 = add i8 %870, %872
  %874 = mul i8 39, %873
  %875 = add i8 23, %874
  %876 = mul i8 -105, %875
  %877 = add i8 111, %876
  %878 = srem i8 %877, 2
  %879 = icmp eq i8 %878, 0
  %880 = or i1 %868, %879
  %881 = select i1 %880, i32 595012100, i32 595012099
  %882 = xor i32 %881, 7
  store i32 %882, i32* %3, align 4
  %883 = call i8** @bf2869133644047347425(i32* %3)
  %884 = load i8*, i8** %883, align 8
  indirectbr i8* %884, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.9(i8* %0, i64 %1, i64 %2, i32* %.out, i64* %.out1, i64* %.out2) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h11804894491772278134(i64 595012099)
  %5 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.9, %loopEnd), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012102)
  %7 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.9, %defaultSwitchBasicBlock), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012105)
  %9 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.9, %BogusBasicBlock), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012103)
  %11 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.9, %.exitStub3), i8** %11, align 8
  %12 = add i64 %2, 2219057203214497612
  %13 = sub i64 0, %2
  %14 = sub i64 2219057203214497612, %13
  %15 = add i64 %1, 8487613758202685530
  %16 = xor i64 8487613758202685530, %1
  %17 = and i64 8487613758202685530, %1
  %18 = mul i64 2, %17
  %19 = add i64 %16, %18
  %20 = and i64 %1, 4397732043586148690
  %21 = xor i64 %1, -1
  %22 = or i64 -4397732043586148691, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = xor i64 %15, -5201799189099413399
  %26 = xor i64 %25, %19
  %27 = xor i64 %26, %20
  %28 = xor i64 %27, %24
  %29 = xor i64 %28, %12
  %30 = xor i64 %29, %14
  %31 = or i64 %2, 2241305175005431430
  %32 = xor i64 %2, -1
  %33 = and i64 %32, 8630886126979878290
  %34 = and i64 %2, -8630886126979878291
  %35 = or i64 %33, %34
  %36 = xor i64 7556378383518141204, %35
  %37 = xor i64 %2, -1
  %38 = or i64 -2241305175005431431, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = or i64 %36, %40
  %42 = and i64 %2, -3418418019246120282
  %43 = xor i64 %2, -1
  %44 = or i64 3418418019246120281, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = or i64 %1, -7274512709102974981
  %48 = and i64 -7274512709102974981, %1
  %49 = xor i64 -7274512709102974981, %1
  %50 = or i64 %48, %49
  %51 = xor i64 3478652999672060260, %50
  %52 = xor i64 %51, %41
  %53 = xor i64 %52, %31
  %54 = xor i64 %53, %42
  %55 = xor i64 %54, %47
  %56 = xor i64 %55, %46
  %57 = mul i64 %30, %56
  %58 = call i64 @h11804894491772278134(i64 %57)
  %59 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %58
  store i8* blockaddress(@render.extracted.9, %loopStart), i8** %59, align 8
  %60 = call i64 @h11804894491772278134(i64 595012104)
  %61 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %60
  store i8* blockaddress(@render.extracted.9, %.exitStub), i8** %61, align 8
  %62 = or i64 %2, 8670010864247112717
  %63 = and i64 8670010864247112717, %2
  %64 = xor i64 8670010864247112717, %2
  %65 = or i64 %63, %64
  %66 = and i64 %1, -336213913169002602
  %67 = or i64 336213913169002601, %1
  %68 = sub i64 %67, 336213913169002601
  %69 = xor i64 %68, %66
  %70 = xor i64 %69, -2223122706986320271
  %71 = xor i64 %70, %62
  %72 = xor i64 %71, %65
  %73 = and i64 %2, 8499561126536211921
  %74 = xor i64 %2, -1
  %75 = or i64 -8499561126536211922, %74
  %76 = xor i64 %75, -1
  %77 = and i64 %76, -1
  %78 = add i64 %1, 3896138492340233565
  %79 = xor i64 3896138492340233565, %1
  %80 = and i64 3896138492340233565, %1
  %81 = mul i64 2, %80
  %82 = add i64 %79, %81
  %83 = add i64 %1, -7616690579623136357
  %84 = add i64 -4983904631612170970, %1
  %85 = add i64 %84, -2632785948010965387
  %86 = xor i64 %73, %85
  %87 = xor i64 %86, %82
  %88 = xor i64 %87, %83
  %89 = xor i64 %88, %78
  %90 = xor i64 %89, %77
  %91 = xor i64 %90, 9147504245803011874
  %92 = mul i64 %72, %91
  %93 = call i64 @h11804894491772278134(i64 %92)
  %94 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %93
  store i8* blockaddress(@render.extracted.9, %500), i8** %94, align 8
  %95 = call i64 @h11804894491772278134(i64 595012101)
  %96 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %95
  store i8* blockaddress(@render.extracted.9, %codeRepl), i8** %96, align 8
  %97 = or i64 %2, -4935482653108667301
  %98 = xor i64 %2, -1
  %99 = and i64 -4935482653108667301, %98
  %100 = add i64 %99, %2
  %101 = add i64 %2, 7023173914921203212
  %102 = sub i64 0, %2
  %103 = add i64 -7023173914921203212, %102
  %104 = sub i64 0, %103
  %105 = add i64 %2, 8228257408996281385
  %106 = xor i64 8228257408996281385, %2
  %107 = and i64 8228257408996281385, %2
  %108 = mul i64 2, %107
  %109 = add i64 %106, %108
  %110 = xor i64 %104, %97
  %111 = xor i64 %110, %105
  %112 = xor i64 %111, -6448133781658558921
  %113 = xor i64 %112, %100
  %114 = xor i64 %113, %101
  %115 = xor i64 %114, %109
  %116 = or i64 %1, 5858463368643773849
  %117 = xor i64 %1, -1
  %118 = and i64 %117, 8979600652661950005
  %119 = and i64 %1, -8979600652661950006
  %120 = or i64 %118, %119
  %121 = xor i64 3301281821054895020, %120
  %122 = xor i64 %1, -1
  %123 = or i64 -5858463368643773850, %122
  %124 = xor i64 %123, -1
  %125 = and i64 %124, -1
  %126 = or i64 %121, %125
  %127 = or i64 %2, 927552609474749557
  %128 = xor i64 %2, -1
  %129 = and i64 %128, -5924905416339519766
  %130 = and i64 %2, 5924905416339519765
  %131 = or i64 %129, %130
  %132 = xor i64 -6838199515935071585, %131
  %133 = xor i64 %2, -1
  %134 = or i64 -927552609474749558, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = or i64 %132, %136
  %138 = xor i64 %116, %126
  %139 = xor i64 %138, %137
  %140 = xor i64 %139, %127
  %141 = xor i64 %140, 8799439323844650496
  %142 = mul i64 %115, %141
  %143 = call i64 @h11804894491772278134(i64 %142)
  %144 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %143
  store i8* blockaddress(@render.extracted.9, %EntryBasicBlockSplit), i8** %144, align 8
  %.reg2mem4 = alloca i64, align 8
  %145 = add i64 %2, -8218146268419579587
  %146 = sub i64 0, %2
  %147 = sub i64 -8218146268419579587, %146
  %148 = or i64 %2, -5373909530663204124
  %149 = xor i64 %2, -1
  %150 = and i64 %149, -3378969332847315382
  %151 = and i64 %2, 3378969332847315381
  %152 = or i64 %150, %151
  %153 = xor i64 7239383063435263150, %152
  %154 = xor i64 %2, -1
  %155 = or i64 5373909530663204123, %154
  %156 = xor i64 %155, -1
  %157 = and i64 %156, -1
  %158 = or i64 %153, %157
  %159 = or i64 %2, 1079350914385410622
  %160 = xor i64 %2, -1
  %161 = and i64 %160, -552879241035309552
  %162 = and i64 %2, 552879241035309551
  %163 = or i64 %161, %162
  %164 = xor i64 -672909145950100434, %163
  %165 = xor i64 %2, -1
  %166 = or i64 -1079350914385410623, %165
  %167 = xor i64 %166, -1
  %168 = and i64 %167, -1
  %169 = or i64 %164, %168
  %170 = xor i64 %159, 1943515955969707475
  %171 = xor i64 %170, %145
  %172 = xor i64 %171, %148
  %173 = xor i64 %172, %147
  %174 = xor i64 %173, %169
  %175 = xor i64 %174, %158
  %176 = add i64 %2, 8672377904858529191
  %177 = xor i64 8672377904858529191, %2
  %178 = and i64 8672377904858529191, %2
  %179 = mul i64 2, %178
  %180 = add i64 %177, %179
  %181 = or i64 %2, 4692326250643103542
  %182 = xor i64 %2, -1
  %183 = and i64 4692326250643103542, %182
  %184 = add i64 %183, %2
  %185 = xor i64 -2276651828497477029, %176
  %186 = xor i64 %185, %184
  %187 = xor i64 %186, %181
  %188 = xor i64 %187, %180
  %189 = mul i64 %175, %188
  %190 = trunc i64 %189 to i32
  %.reg2mem2 = alloca i1, i32 %190, align 1
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [10 x i32], align 4
  %191 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %191, align 4
  %192 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %192, align 4
  %193 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %193, align 4
  %194 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %194, align 4
  %195 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %195, align 4
  %196 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %196, align 4
  %197 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %198 = add i64 %1, -8363412733925571270
  %199 = xor i64 -8363412733925571270, %1
  %200 = and i64 -8363412733925571270, %1
  %201 = mul i64 2, %200
  %202 = add i64 %199, %201
  %203 = add i64 %2, -8125949606286921359
  %204 = sub i64 0, %2
  %205 = add i64 8125949606286921359, %204
  %206 = sub i64 0, %205
  %207 = and i64 %2, 1845393360162930769
  %208 = xor i64 %2, -1
  %209 = or i64 -1845393360162930770, %208
  %210 = xor i64 %209, -1
  %211 = and i64 %210, -1
  %212 = xor i64 %206, %198
  %213 = xor i64 %212, %207
  %214 = xor i64 %213, 5035005522391957505
  %215 = xor i64 %214, %211
  %216 = xor i64 %215, %203
  %217 = xor i64 %216, %202
  %218 = add i64 %1, 2732810104813937477
  %219 = and i64 2732810104813937477, %1
  %220 = or i64 2732810104813937477, %1
  %221 = add i64 %219, %220
  %222 = add i64 %1, 4346344145124586596
  %223 = and i64 4346344145124586596, %1
  %224 = or i64 4346344145124586596, %1
  %225 = add i64 %223, %224
  %226 = xor i64 %225, %221
  %227 = xor i64 %226, %218
  %228 = xor i64 %227, -2121145014408478717
  %229 = xor i64 %228, %222
  %230 = mul i64 %217, %229
  %231 = trunc i64 %230 to i32
  store i32 %231, i32* %197, align 4
  %232 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %232, align 4
  %233 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %233, align 4
  %234 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %234, align 4
  %235 = alloca i64, align 8
  %236 = alloca i64, align 8
  %237 = add i64 %1, 4161449333462790826
  %238 = sub i64 0, %1
  %239 = sub i64 4161449333462790826, %238
  %240 = add i64 %1, -157714026600182818
  %241 = xor i64 -157714026600182818, %1
  %242 = and i64 -157714026600182818, %1
  %243 = mul i64 2, %242
  %244 = add i64 %241, %243
  %245 = xor i64 %244, 919133842885548713
  %246 = xor i64 %245, %239
  %247 = xor i64 %246, %237
  %248 = xor i64 %247, %240
  %249 = add i64 %1, 5560932361407761876
  %250 = sub i64 0, %1
  %251 = add i64 -5560932361407761876, %250
  %252 = sub i64 0, %251
  %253 = or i64 %2, -5263447672847440461
  %254 = xor i64 %2, -1
  %255 = and i64 -5263447672847440461, %254
  %256 = add i64 %255, %2
  %257 = or i64 %1, 3527499781294127990
  %258 = and i64 3527499781294127990, %1
  %259 = xor i64 3527499781294127990, %1
  %260 = or i64 %258, %259
  %261 = xor i64 %260, %257
  %262 = xor i64 %261, %256
  %263 = xor i64 %262, %249
  %264 = xor i64 %263, %253
  %265 = xor i64 %264, %252
  %266 = xor i64 %265, 2951097313530795938
  %267 = mul i64 %248, %266
  %268 = add i64 %2, 4828659281179977882
  %269 = and i64 4828659281179977882, %2
  %270 = or i64 4828659281179977882, %2
  %271 = add i64 %269, %270
  %272 = or i64 %2, -6224427593104271731
  %273 = xor i64 %2, -1
  %274 = and i64 -6224427593104271731, %273
  %275 = add i64 %274, %2
  %276 = add i64 %1, 6109906527345628423
  %277 = xor i64 6109906527345628423, %1
  %278 = and i64 6109906527345628423, %1
  %279 = mul i64 2, %278
  %280 = add i64 %277, %279
  %281 = xor i64 %268, %276
  %282 = xor i64 %281, %272
  %283 = xor i64 %282, -4822585349076399929
  %284 = xor i64 %283, %271
  %285 = xor i64 %284, %280
  %286 = xor i64 %285, %275
  %287 = and i64 %1, -3699836777829324076
  %288 = xor i64 %1, -1
  %289 = xor i64 -3699836777829324076, %288
  %290 = and i64 %289, -3699836777829324076
  %291 = add i64 %2, -4557533496560125470
  %292 = sub i64 0, %2
  %293 = add i64 4557533496560125470, %292
  %294 = sub i64 0, %293
  %295 = xor i64 %287, 0
  %296 = xor i64 %295, %294
  %297 = xor i64 %296, %291
  %298 = xor i64 %297, %290
  %299 = mul i64 %286, %298
  %300 = trunc i64 %299 to i1
  %301 = or i64 %2, -5969944051216867920
  %302 = and i64 -5969944051216867920, %2
  %303 = xor i64 -5969944051216867920, %2
  %304 = or i64 %302, %303
  %305 = or i64 %2, -6062582784639549921
  %306 = xor i64 %2, -1
  %307 = and i64 -6062582784639549921, %306
  %308 = add i64 %307, %2
  %309 = or i64 %1, -4019398650384439681
  %310 = xor i64 %1, -1
  %311 = and i64 -4019398650384439681, %310
  %312 = add i64 %311, %1
  %313 = xor i64 %312, %305
  %314 = xor i64 %313, %309
  %315 = xor i64 %314, %304
  %316 = xor i64 %315, %301
  %317 = xor i64 %316, -4036880869525664651
  %318 = xor i64 %317, %308
  %319 = add i64 %2, 6168562046467053057
  %320 = add i64 8003593164514824658, %2
  %321 = sub i64 %320, 1835031118047771601
  %322 = and i64 %1, 1845479808314061515
  %323 = xor i64 %1, -1
  %324 = or i64 -1845479808314061516, %323
  %325 = xor i64 %324, -1
  %326 = and i64 %325, -1
  %327 = xor i64 %322, %319
  %328 = xor i64 %327, %321
  %329 = xor i64 %328, 0
  %330 = xor i64 %329, %326
  %331 = mul i64 %318, %330
  %332 = trunc i64 %331 to i1
  %333 = and i64 %2, -7852761082784125151
  %334 = xor i64 %2, -1
  %335 = or i64 7852761082784125150, %334
  %336 = xor i64 %335, -1
  %337 = and i64 %336, -1
  %338 = or i64 %2, -2065029341789853922
  %339 = and i64 -2065029341789853922, %2
  %340 = xor i64 -2065029341789853922, %2
  %341 = or i64 %339, %340
  %342 = and i64 %2, -3420197263180663189
  %343 = xor i64 %2, -1
  %344 = xor i64 -3420197263180663189, %343
  %345 = and i64 %344, -3420197263180663189
  %346 = xor i64 %338, %342
  %347 = xor i64 %346, %337
  %348 = xor i64 %347, %341
  %349 = xor i64 %348, %345
  %350 = xor i64 %349, %333
  %351 = xor i64 %350, 3848197179815195041
  %352 = or i64 %2, 7083485828136200727
  %353 = xor i64 %2, -1
  %354 = and i64 7083485828136200727, %353
  %355 = add i64 %354, %2
  %356 = and i64 %2, -1499014156696679192
  %357 = or i64 1499014156696679191, %2
  %358 = sub i64 %357, 1499014156696679191
  %359 = or i64 %2, -630569078657836763
  %360 = xor i64 %2, -1
  %361 = and i64 -630569078657836763, %360
  %362 = add i64 %361, %2
  %363 = xor i64 %358, %356
  %364 = xor i64 %363, %355
  %365 = xor i64 %364, 0
  %366 = xor i64 %365, %352
  %367 = xor i64 %366, %359
  %368 = xor i64 %367, %362
  %369 = mul i64 %351, %368
  %370 = trunc i64 %369 to i1
  %371 = and i64 %1, -1978508048225877845
  %372 = or i64 1978508048225877844, %1
  %373 = sub i64 %372, 1978508048225877844
  %374 = add i64 %2, -7952310888378524229
  %375 = sub i64 0, %2
  %376 = sub i64 -7952310888378524229, %375
  %377 = xor i64 -3935153029461441327, %376
  %378 = xor i64 %377, %371
  %379 = xor i64 %378, %374
  %380 = xor i64 %379, %373
  %381 = add i64 %2, 5410251704082759940
  %382 = and i64 5410251704082759940, %2
  %383 = or i64 5410251704082759940, %2
  %384 = add i64 %382, %383
  %385 = or i64 %1, 8360207167724130084
  %386 = and i64 8360207167724130084, %1
  %387 = xor i64 8360207167724130084, %1
  %388 = or i64 %386, %387
  %389 = and i64 %1, -4534765433295533551
  %390 = or i64 4534765433295533550, %1
  %391 = sub i64 %390, 4534765433295533550
  %392 = xor i64 %385, %391
  %393 = xor i64 %392, %381
  %394 = xor i64 %393, %384
  %395 = xor i64 %394, 0
  %396 = xor i64 %395, %389
  %397 = xor i64 %396, %388
  %398 = mul i64 %380, %397
  %399 = trunc i64 %398 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %267, i64* %236, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %300, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %332, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %370, i1* null, i1* null, i1* null, i32 0, i32 %399, i1* null, i1* null)
  %400 = load i64, i64* %236, align 8
  %401 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7736138858792283958, i32 0, i64 %400
  store i8** %401, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012100, i32* %3, align 4
  %402 = call i8** @bf11348756035212192102(i32* %3)
  %403 = load i8*, i8** %402, align 8
  indirectbr i8* %403, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %500
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub3
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i64, i1)* @render.extracted.9.extracted to i8*), i8** %.reload, align 8
  %404 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %407 = load i32, i32* %406, align 4
  %408 = srem i32 %405, %407
  store i32 %408, i32* %dispatcher, align 4
  %409 = load i8*, i8** %96, align 8
  %410 = load i8, i8* %409, align 1
  %411 = xor i8 %410, -2
  %412 = and i8 %411, %410
  %413 = or i64 %143, 7193706940046500608
  %414 = xor i64 %143, -1
  %415 = and i64 7193706940046500608, %414
  %416 = add i64 %415, %143
  %417 = and i64 %143, 2110262811041309444
  %418 = xor i64 %143, -1
  %419 = xor i64 2110262811041309444, %418
  %420 = and i64 %419, 2110262811041309444
  %421 = or i64 %95, -4912116336521247273
  %422 = xor i64 %95, -1
  %423 = and i64 %422, -1727110737546160723
  %424 = and i64 %95, 1727110737546160722
  %425 = or i64 %423, %424
  %426 = xor i64 6042909141592068218, %425
  %427 = xor i64 %95, -1
  %428 = or i64 4912116336521247272, %427
  %429 = xor i64 %428, -1
  %430 = and i64 %429, -1
  %431 = or i64 %426, %430
  %432 = xor i64 %421, %420
  %433 = xor i64 %432, 1055937189766242525
  %434 = xor i64 %433, %417
  %435 = xor i64 %434, %431
  %436 = xor i64 %435, %413
  %437 = xor i64 %436, %416
  %438 = add i64 %4, -3059428735789241319
  %439 = sub i64 0, %4
  %440 = add i64 3059428735789241319, %439
  %441 = sub i64 0, %440
  %442 = add i64 %10, -1039241293440967290
  %443 = sub i64 0, %10
  %444 = add i64 1039241293440967290, %443
  %445 = sub i64 0, %444
  %446 = xor i64 0, %442
  %447 = xor i64 %446, %438
  %448 = xor i64 %447, %445
  %449 = xor i64 %448, %441
  %450 = mul i64 %437, %449
  %451 = trunc i64 %450 to i8
  %452 = icmp eq i8 %412, %451
  %453 = mul i8 %410, %410
  %454 = sub i8 0, %453
  %455 = sub i8 0, %410
  %456 = add i8 %454, %455
  %457 = sub i8 0, %456
  %458 = or i64 %1, 172229466661754736
  %459 = xor i64 %1, -1
  %460 = and i64 172229466661754736, %459
  %461 = add i64 %460, %1
  %462 = or i64 %93, 8679165359183057575
  %463 = xor i64 %93, -1
  %464 = and i64 8679165359183057575, %463
  %465 = add i64 %464, %93
  %466 = and i64 %2, -2085533339619788989
  %467 = xor i64 %2, -1
  %468 = or i64 2085533339619788988, %467
  %469 = xor i64 %468, -1
  %470 = and i64 %469, -1
  %471 = xor i64 %465, 6185594230630353093
  %472 = xor i64 %471, %458
  %473 = xor i64 %472, %462
  %474 = xor i64 %473, %466
  %475 = xor i64 %474, %461
  %476 = xor i64 %475, %470
  %477 = and i64 %4, -4976145707477518737
  %478 = or i64 4976145707477518736, %4
  %479 = sub i64 %478, 4976145707477518736
  %480 = or i64 %58, -1317941266456717899
  %481 = and i64 -1317941266456717899, %58
  %482 = xor i64 -1317941266456717899, %58
  %483 = or i64 %481, %482
  %484 = xor i64 -5352407796947213785, %480
  %485 = xor i64 %484, %477
  %486 = xor i64 %485, %479
  %487 = xor i64 %486, %483
  %488 = mul i64 %476, %487
  %489 = trunc i64 %488 to i8
  %490 = mul i8 %457, %489
  %491 = srem i8 %490, 2
  %492 = icmp eq i8 %491, 0
  %493 = or i1 %452, %492
  %494 = select i1 %493, i32 595012096, i32 595012099
  %495 = or i32 %494, 3
  %496 = and i32 %494, 3
  %497 = sub i32 %495, %496
  store i32 %497, i32* %3, align 4
  %498 = call i8** @bf11348756035212192102(i32* %3)
  %499 = load i8*, i8** %498, align 8
  indirectbr i8* %499, [label %loopEnd, label %EntryBasicBlockSplit]

500:                                              ; preds = %500, %loopStart
  %501 = getelementptr inbounds i8, i8* %0, i64 %1
  %502 = load i8, i8* %501, align 1, !tbaa !16
  %503 = sext i8 %502 to i32
  store i32 %503, i32* %.out, align 4
  %504 = and i64 %2, 1
  store i64 %504, i64* %.out1, align 8
  %505 = icmp eq i64 %504, 0
  store i1 %505, i1* %.reg2mem2, align 1
  %506 = mul i64 %2, %2
  %507 = sub i64 0, %506
  %508 = sub i64 0, %2
  %509 = add i64 %507, %508
  %510 = sub i64 0, %509
  store i64 %510, i64* %.out2, align 8
  %511 = mul i64 %510, 3
  store i64 %511, i64* %.reg2mem4, align 8
  %512 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %513 = load i32, i32* %512, align 4
  %514 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %515 = load i32, i32* %514, align 4
  %516 = sub i32 %513, %515
  store i32 %516, i32* %dispatcher, align 4
  %517 = load i8*, i8** %59, align 8
  %518 = load i8, i8* %517, align 1
  %519 = mul i8 %518, %518
  %520 = add i8 %519, %518
  %521 = mul i8 %520, 3
  %522 = srem i8 %521, 2
  %523 = icmp eq i8 %522, 0
  %524 = mul i8 %518, %518
  %525 = add i8 %524, %518
  %526 = srem i8 %525, 2
  %527 = icmp eq i8 %526, 0
  %528 = xor i1 %523, true
  %529 = or i1 %528, %527
  %530 = or i64 %143, 6379745347061735285
  %531 = xor i64 %143, -1
  %532 = and i64 6379745347061735285, %531
  %533 = add i64 %532, %143
  %534 = or i64 %4, 8900166362308905525
  %535 = xor i64 %4, -1
  %536 = and i64 %535, -6386294993365605787
  %537 = and i64 %4, 6386294993365605786
  %538 = or i64 %536, %537
  %539 = xor i64 -2531888663204468656, %538
  %540 = xor i64 %4, -1
  %541 = or i64 -8900166362308905526, %540
  %542 = xor i64 %541, -1
  %543 = and i64 %542, -1
  %544 = or i64 %539, %543
  %545 = or i64 %58, 1532969981377156430
  %546 = and i64 1532969981377156430, %58
  %547 = xor i64 1532969981377156430, %58
  %548 = or i64 %546, %547
  %549 = xor i64 %530, %544
  %550 = xor i64 %549, %548
  %551 = xor i64 %550, 7742790417052950429
  %552 = xor i64 %551, %545
  %553 = xor i64 %552, %534
  %554 = xor i64 %553, %533
  %555 = or i64 %143, -1829045724013669952
  %556 = and i64 -1829045724013669952, %143
  %557 = xor i64 -1829045724013669952, %143
  %558 = or i64 %556, %557
  %559 = and i64 %8, -7384734445168822849
  %560 = xor i64 %8, -1
  %561 = xor i64 -7384734445168822849, %560
  %562 = and i64 %561, -7384734445168822849
  %563 = and i64 %1, 7069977322544084256
  %564 = xor i64 %1, -1
  %565 = or i64 -7069977322544084257, %564
  %566 = xor i64 %565, -1
  %567 = and i64 %566, -1
  %568 = xor i64 %567, %558
  %569 = xor i64 %568, %559
  %570 = xor i64 %569, %555
  %571 = xor i64 %570, %563
  %572 = xor i64 %571, %562
  %573 = xor i64 %572, 2609281761268670133
  %574 = mul i64 %554, %573
  %575 = trunc i64 %574 to i1
  %576 = xor i1 %523, %575
  %577 = sub i1 %529, %576
  %578 = select i1 %577, i32 595012096, i32 595012099
  %579 = xor i32 %578, 3
  store i32 %579, i32* %3, align 4
  %580 = call i8** @bf11348756035212192102(i32* %3)
  %581 = load i8*, i8** %580, align 8
  indirectbr i8* %581, [label %loopEnd, label %500]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %235, align 8
  %582 = call i8** @lk7634065167745351151(i64* %235)
  %583 = load i8*, i8** %582, align 8
  %584 = bitcast i8* %583 to i1 (i64, i1)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %.reload5 = load i64, i64* %.reg2mem4, align 8
  %targetBlock = call i1 %584(i64 %.reload5, i1 %.reload3)
  %585 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %586 = load i32, i32* %585, align 4
  %587 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %588 = load i32, i32* %587, align 4
  %589 = add i32 %586, %588
  %590 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %591 = load i32, i32* %590, align 4
  %592 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %593 = load i32, i32* %592, align 4
  %594 = sub i32 %591, 1570609756
  %595 = sub i32 %594, %593
  %596 = add i32 %595, 1570609756
  %597 = select i1 %targetBlock, i32 %589, i32 %596
  store i32 %597, i32* %dispatcher, align 4
  %598 = load i8*, i8** %59, align 8
  %599 = load i8, i8* %598, align 1
  %600 = mul i8 %599, 2
  %601 = mul i8 %599, 2
  %602 = and i64 %4, -4488513350189988335
  %603 = xor i64 %4, -1
  %604 = or i64 4488513350189988334, %603
  %605 = xor i64 %604, -1
  %606 = and i64 %605, -1
  %607 = add i64 %10, -1111965856564365063
  %608 = add i64 -8810499835836229730, %10
  %609 = sub i64 %608, -7698533979271864667
  %610 = xor i64 %606, -2395539571719287637
  %611 = xor i64 %610, %609
  %612 = xor i64 %611, %607
  %613 = xor i64 %612, %602
  %614 = and i64 %4, -3722933718796606218
  %615 = xor i64 %4, -1
  %616 = or i64 3722933718796606217, %615
  %617 = xor i64 %616, -1
  %618 = and i64 %617, -1
  %619 = add i64 %1, 6524607133660413418
  %620 = sub i64 0, %1
  %621 = add i64 -6524607133660413418, %620
  %622 = sub i64 0, %621
  %623 = xor i64 %619, %614
  %624 = xor i64 %623, 955503752591940614
  %625 = xor i64 %624, %622
  %626 = xor i64 %625, %618
  %627 = mul i64 %613, %626
  %628 = trunc i64 %627 to i8
  %629 = add i8 %628, %601
  %630 = mul i8 %600, %629
  %631 = srem i8 %630, 4
  %632 = icmp eq i8 %631, 0
  %633 = mul i8 %599, %599
  %634 = add i8 %633, %599
  %635 = srem i8 %634, 2
  %636 = icmp eq i8 %635, 0
  %637 = add i64 %143, -6673308592533316823
  %638 = and i64 -6673308592533316823, %143
  %639 = or i64 -6673308592533316823, %143
  %640 = add i64 %638, %639
  %641 = and i64 %4, 5949608456807401989
  %642 = xor i64 %4, -1
  %643 = or i64 -5949608456807401990, %642
  %644 = xor i64 %643, -1
  %645 = and i64 %644, -1
  %646 = or i64 %60, -1497296661373641611
  %647 = xor i64 %60, -1
  %648 = and i64 -1497296661373641611, %647
  %649 = add i64 %648, %60
  %650 = xor i64 %641, %640
  %651 = xor i64 %650, %637
  %652 = xor i64 %651, %649
  %653 = xor i64 %652, %645
  %654 = xor i64 %653, -3738414248447397871
  %655 = xor i64 %654, %646
  %656 = add i64 %143, 6365751396273161777
  %657 = and i64 6365751396273161777, %143
  %658 = or i64 6365751396273161777, %143
  %659 = add i64 %657, %658
  %660 = add i64 %400, 7031937340603207914
  %661 = xor i64 7031937340603207914, %400
  %662 = and i64 7031937340603207914, %400
  %663 = mul i64 2, %662
  %664 = add i64 %661, %663
  %665 = xor i64 760586358156574961, %659
  %666 = xor i64 %665, %660
  %667 = xor i64 %666, %664
  %668 = xor i64 %667, %656
  %669 = mul i64 %655, %668
  %670 = trunc i64 %669 to i1
  %671 = xor i1 %632, %670
  %672 = and i1 %671, true
  %673 = and i1 %632, false
  %674 = or i1 %672, %673
  %675 = xor i1 %636, true
  %676 = and i1 %675, true
  %677 = and i64 %10, -8471814731691600170
  %678 = xor i64 %10, -1
  %679 = xor i64 -8471814731691600170, %678
  %680 = and i64 %679, -8471814731691600170
  %681 = or i64 %400, -3591316062007045618
  %682 = xor i64 %400, -1
  %683 = and i64 %682, -4300423367794459913
  %684 = and i64 %400, 4300423367794459912
  %685 = or i64 %683, %684
  %686 = xor i64 754571375279614201, %685
  %687 = xor i64 %400, -1
  %688 = or i64 3591316062007045617, %687
  %689 = xor i64 %688, -1
  %690 = and i64 %689, -1
  %691 = or i64 %686, %690
  %692 = xor i64 %681, 1212900468327549323
  %693 = xor i64 %692, %677
  %694 = xor i64 %693, %691
  %695 = xor i64 %694, %680
  %696 = add i64 %93, 6388047747332471846
  %697 = sub i64 0, %93
  %698 = add i64 -6388047747332471846, %697
  %699 = sub i64 0, %698
  %700 = or i64 %400, -578617597777954707
  %701 = and i64 -578617597777954707, %400
  %702 = xor i64 -578617597777954707, %400
  %703 = or i64 %701, %702
  %704 = xor i64 %700, 0
  %705 = xor i64 %704, %703
  %706 = xor i64 %705, %699
  %707 = xor i64 %706, %696
  %708 = mul i64 %695, %707
  %709 = trunc i64 %708 to i1
  %710 = and i1 %636, %709
  %711 = or i1 %676, %710
  %712 = xor i1 %674, %711
  %713 = xor i1 %632, true
  %714 = xor i1 %636, true
  %715 = or i1 %713, %714
  %716 = xor i1 %715, true
  %717 = sext i32 %dispatcher1 to i64
  %718 = and i64 %717, 8815704063966105133
  %719 = or i64 -8815704063966105134, %717
  %720 = sub i64 %719, -8815704063966105134
  %721 = or i64 %8, 2563867769428994207
  %722 = xor i64 %8, -1
  %723 = and i64 2563867769428994207, %722
  %724 = add i64 %723, %8
  %725 = xor i64 %718, %724
  %726 = xor i64 %725, %720
  %727 = xor i64 %726, %721
  %728 = xor i64 %727, 8275889990072562333
  %729 = add i64 %10, 6642633608990893437
  %730 = and i64 6642633608990893437, %10
  %731 = or i64 6642633608990893437, %10
  %732 = add i64 %730, %731
  %733 = and i64 %143, 307189888747857136
  %734 = xor i64 %143, -1
  %735 = xor i64 307189888747857136, %734
  %736 = and i64 %735, 307189888747857136
  %737 = xor i64 %733, %732
  %738 = xor i64 %737, %729
  %739 = xor i64 %738, %736
  %740 = xor i64 %739, 2000767272143922101
  %741 = mul i64 %728, %740
  %742 = trunc i64 %741 to i1
  %743 = and i1 %716, %742
  %744 = or i1 %712, %743
  %745 = select i1 %744, i32 595012102, i32 595012099
  %746 = and i64 %143, 4630037140956087031
  %747 = xor i64 %143, -1
  %748 = or i64 -4630037140956087032, %747
  %749 = xor i64 %748, -1
  %750 = and i64 %749, -1
  %751 = add i64 %58, -952132499563158625
  %752 = add i64 -212709504103632599, %58
  %753 = sub i64 %752, 739422995459526026
  %754 = and i64 %143, -4350604599495886809
  %755 = or i64 4350604599495886808, %143
  %756 = sub i64 %755, 4350604599495886808
  %757 = xor i64 %753, %746
  %758 = xor i64 %757, -5979106157033323393
  %759 = xor i64 %758, %750
  %760 = xor i64 %759, %754
  %761 = xor i64 %760, %751
  %762 = xor i64 %761, %756
  %763 = sext i32 %dispatcher1 to i64
  %764 = or i64 %763, 5203820333708978931
  %765 = xor i64 %763, -1
  %766 = and i64 %765, -4265727952810060946
  %767 = and i64 %763, 4265727952810060945
  %768 = or i64 %766, %767
  %769 = xor i64 -8288109841837131363, %768
  %770 = xor i64 %763, -1
  %771 = or i64 -5203820333708978932, %770
  %772 = xor i64 %771, -1
  %773 = and i64 %772, -1
  %774 = or i64 %769, %773
  %775 = add i64 %143, -2884092320030910945
  %776 = add i64 -5986263393653831298, %143
  %777 = sub i64 %776, -3102171073622920353
  %778 = xor i64 -3948558986716436101, %774
  %779 = xor i64 %778, %764
  %780 = xor i64 %779, %777
  %781 = xor i64 %780, %775
  %782 = mul i64 %762, %781
  %783 = trunc i64 %782 to i32
  %784 = xor i32 %745, %783
  store i32 %784, i32* %3, align 4
  %785 = call i8** @bf11348756035212192102(i32* %3)
  %786 = load i8*, i8** %785, align 8
  indirectbr i8* %786, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub3:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %787 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %787, align 4
  %788 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %788, align 4
  %789 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %789, align 4
  %790 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %790, align 4
  %791 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  %792 = add i64 %6, -5111151999724700383
  %793 = sub i64 0, %6
  %794 = sub i64 -5111151999724700383, %793
  %795 = or i64 %2, -8135638201882437340
  %796 = xor i64 %2, -1
  %797 = and i64 -8135638201882437340, %796
  %798 = add i64 %797, %2
  %799 = or i64 %58, -3145673068147772505
  %800 = and i64 -3145673068147772505, %58
  %801 = xor i64 -3145673068147772505, %58
  %802 = or i64 %800, %801
  %803 = xor i64 %794, %795
  %804 = xor i64 %803, -5947357588994237053
  %805 = xor i64 %804, %802
  %806 = xor i64 %805, %792
  %807 = xor i64 %806, %798
  %808 = xor i64 %807, %799
  %809 = or i64 %58, 9141003157124889941
  %810 = xor i64 %58, -1
  %811 = and i64 %810, 6893134335736205617
  %812 = and i64 %58, -6893134335736205618
  %813 = or i64 %811, %812
  %814 = xor i64 2409998476981955684, %813
  %815 = xor i64 %58, -1
  %816 = or i64 -9141003157124889942, %815
  %817 = xor i64 %816, -1
  %818 = and i64 %817, -1
  %819 = or i64 %814, %818
  %820 = or i64 %93, -5424187960668871325
  %821 = and i64 -5424187960668871325, %93
  %822 = xor i64 -5424187960668871325, %93
  %823 = or i64 %821, %822
  %824 = or i64 %143, -7938984533651408683
  %825 = xor i64 %143, -1
  %826 = and i64 %825, 7863227053146295010
  %827 = and i64 %143, -7863227053146295011
  %828 = or i64 %826, %827
  %829 = xor i64 -230592916145966537, %828
  %830 = xor i64 %143, -1
  %831 = or i64 7938984533651408682, %830
  %832 = xor i64 %831, -1
  %833 = and i64 %832, -1
  %834 = or i64 %829, %833
  %835 = xor i64 %824, -8111249813486227411
  %836 = xor i64 %835, %819
  %837 = xor i64 %836, %834
  %838 = xor i64 %837, %820
  %839 = xor i64 %838, %823
  %840 = xor i64 %839, %809
  %841 = mul i64 %808, %840
  %842 = trunc i64 %841 to i32
  store i32 %842, i32* %791, align 4
  %843 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %844 = load i32, i32* %843, align 4
  store i32 %844, i32* %dispatcher, align 4
  %845 = load i8*, i8** %59, align 8
  %846 = load i8, i8* %845, align 1
  %847 = and i8 %846, 1
  %848 = icmp eq i8 %847, 1
  %849 = mul i8 %846, %846
  %850 = sub i8 0, %846
  %851 = sub i8 %849, %850
  %852 = add i64 %58, -8558860925643176474
  %853 = sub i64 0, %58
  %854 = sub i64 -8558860925643176474, %853
  %855 = add i64 %6, 1210899191002642403
  %856 = sub i64 0, %6
  %857 = add i64 -1210899191002642403, %856
  %858 = sub i64 0, %857
  %859 = xor i64 %858, %855
  %860 = xor i64 %859, %852
  %861 = xor i64 %860, %854
  %862 = xor i64 %861, -4411513079754729959
  %863 = or i64 %1, -2144284497437217169
  %864 = xor i64 %1, -1
  %865 = and i64 %864, 4323423074663298460
  %866 = and i64 %1, -4323423074663298461
  %867 = or i64 %865, %866
  %868 = xor i64 -2755610347868464141, %867
  %869 = xor i64 %1, -1
  %870 = or i64 2144284497437217168, %869
  %871 = xor i64 %870, -1
  %872 = and i64 %871, -1
  %873 = or i64 %868, %872
  %874 = and i64 %143, -4685425886373156396
  %875 = xor i64 %143, -1
  %876 = or i64 4685425886373156395, %875
  %877 = xor i64 %876, -1
  %878 = and i64 %877, -1
  %879 = or i64 %58, -2543957988026104952
  %880 = and i64 -2543957988026104952, %58
  %881 = xor i64 -2543957988026104952, %58
  %882 = or i64 %880, %881
  %883 = xor i64 %874, %882
  %884 = xor i64 %883, -7139652739418010542
  %885 = xor i64 %884, %878
  %886 = xor i64 %885, %873
  %887 = xor i64 %886, %863
  %888 = xor i64 %887, %879
  %889 = mul i64 %862, %888
  %890 = trunc i64 %889 to i8
  %891 = srem i8 %851, %890
  %892 = icmp eq i8 %891, 0
  %893 = or i1 %848, %892
  %894 = add i64 %95, 7149868773542527558
  %895 = xor i64 7149868773542527558, %95
  %896 = and i64 7149868773542527558, %95
  %897 = mul i64 2, %896
  %898 = add i64 %895, %897
  %899 = and i64 %1, -2514011781679674442
  %900 = xor i64 %1, -1
  %901 = or i64 2514011781679674441, %900
  %902 = xor i64 %901, -1
  %903 = and i64 %902, -1
  %904 = xor i64 %903, %898
  %905 = xor i64 %904, %894
  %906 = xor i64 %905, 944501024945461817
  %907 = xor i64 %906, %899
  %908 = or i64 %60, 5351197883107060175
  %909 = xor i64 %60, -1
  %910 = and i64 %909, -2435206619318404326
  %911 = and i64 %60, 2435206619318404325
  %912 = or i64 %910, %911
  %913 = xor i64 -7748673626471951659, %912
  %914 = xor i64 %60, -1
  %915 = or i64 -5351197883107060176, %914
  %916 = xor i64 %915, -1
  %917 = and i64 %916, -1
  %918 = or i64 %913, %917
  %919 = and i64 %143, -8096986084100998679
  %920 = xor i64 %143, -1
  %921 = xor i64 -8096986084100998679, %920
  %922 = and i64 %921, -8096986084100998679
  %923 = or i64 %6, -7848714583312534858
  %924 = xor i64 %6, -1
  %925 = and i64 -7848714583312534858, %924
  %926 = add i64 %925, %6
  %927 = xor i64 3340994187937991204, %919
  %928 = xor i64 %927, %926
  %929 = xor i64 %928, %923
  %930 = xor i64 %929, %908
  %931 = xor i64 %930, %918
  %932 = xor i64 %931, %922
  %933 = mul i64 %907, %932
  %934 = trunc i64 %933 to i32
  %935 = select i1 %893, i32 %934, i32 595012096
  %936 = xor i32 %935, 4
  store i32 %936, i32* %3, align 4
  %937 = call i8** @bf11348756035212192102(i32* %3)
  %938 = load i8*, i8** %937, align 8
  indirectbr i8* %938, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %939 = load i8*, i8** %144, align 8
  %940 = load i8, i8* %939, align 1
  %941 = mul i8 %940, %940
  %942 = sub i8 0, %940
  %943 = sub i8 %941, %942
  %944 = mul i8 %943, 3
  %945 = srem i8 %944, 2
  %946 = icmp eq i8 %945, 0
  %947 = mul i8 %940, %940
  %948 = add i8 %947, %940
  %949 = srem i8 %948, 2
  %950 = icmp eq i8 %949, 0
  %951 = xor i1 %946, true
  %952 = or i1 %951, %950
  %953 = xor i1 %946, true
  %954 = sub i1 %952, %953
  %955 = select i1 %954, i32 595012099, i32 595012099
  %956 = xor i32 %955, 0
  store i32 %956, i32* %3, align 4
  %957 = call i8** @bf11348756035212192102(i32* %3)
  %958 = load i8*, i8** %957, align 8
  indirectbr i8* %958, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %500, %EntryBasicBlockSplit
  %959 = load i8*, i8** %96, align 8
  %960 = load i8, i8* %959, align 1
  %961 = mul i8 %960, 2
  %962 = mul i8 %960, 2
  %963 = sub i8 0, %962
  %964 = sub i8 2, %963
  %965 = mul i8 %961, %964
  %966 = srem i8 %965, 4
  %967 = add i64 %95, -8983314834346900511
  %968 = add i64 -835927014132084845, %95
  %969 = sub i64 %968, 8147387820214815666
  %970 = add i64 %6, -7355782227361283671
  %971 = add i64 -4594234575949282884, %6
  %972 = add i64 %971, -2761547651412000787
  %973 = xor i64 %972, -4160349755111167009
  %974 = xor i64 %973, %970
  %975 = xor i64 %974, %969
  %976 = xor i64 %975, %967
  %977 = or i64 %8, 2830869724870275807
  %978 = and i64 2830869724870275807, %8
  %979 = xor i64 2830869724870275807, %8
  %980 = or i64 %978, %979
  %981 = or i64 %93, 4433795904797758095
  %982 = xor i64 %93, -1
  %983 = and i64 4433795904797758095, %982
  %984 = add i64 %983, %93
  %985 = or i64 %10, 3264489827273082347
  %986 = xor i64 %10, -1
  %987 = and i64 3264489827273082347, %986
  %988 = add i64 %987, %10
  %989 = xor i64 %980, %985
  %990 = xor i64 %989, %988
  %991 = xor i64 %990, %981
  %992 = xor i64 %991, %977
  %993 = xor i64 %992, 0
  %994 = xor i64 %993, %984
  %995 = mul i64 %976, %994
  %996 = trunc i64 %995 to i8
  %997 = icmp eq i8 %966, %996
  %998 = mul i8 %960, %960
  %999 = sub i8 0, %998
  %1000 = sub i8 0, %960
  %1001 = add i8 %999, %1000
  %1002 = sub i8 0, %1001
  %1003 = srem i8 %1002, 2
  %1004 = icmp eq i8 %1003, 0
  %1005 = and i1 %997, %1004
  %1006 = select i1 %1005, i32 595012101, i32 595012100
  %1007 = xor i32 %1006, -875902262
  %1008 = xor i32 %1007, -875902261
  store i32 %1008, i32* %3, align 4
  %1009 = call i8** @bf11348756035212192102(i32* %3)
  %1010 = load i8*, i8** %1009, align 8
  indirectbr i8* %1010, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.10(i64 %.reload224) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012193)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@render.extracted.10, %.exitStub), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012131)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.10, %.exitStub1), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012146)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.10, %"2"), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012231)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.10, %EntryBasicBlockSplit), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012197)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.10, %BogusBasciBlock), i8** %10, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %11 = and i64 %.reload224, 2409587189295182065
  %12 = or i64 -2409587189295182066, %.reload224
  %13 = sub i64 %12, -2409587189295182066
  %14 = and i64 %.reload224, 6547949186492900814
  %15 = xor i64 %.reload224, -1
  %16 = or i64 -6547949186492900815, %15
  %17 = xor i64 %16, -1
  %18 = and i64 %17, -1
  %19 = or i64 %.reload224, -7463597777395051060
  %20 = and i64 -7463597777395051060, %.reload224
  %21 = xor i64 -7463597777395051060, %.reload224
  %22 = or i64 %20, %21
  %23 = xor i64 %14, %18
  %24 = xor i64 %23, %13
  %25 = xor i64 %24, %19
  %26 = xor i64 %25, %11
  %27 = xor i64 %26, %22
  %28 = xor i64 %27, -3335841762385409211
  %29 = or i64 %.reload224, 1822927715859085572
  %30 = and i64 1822927715859085572, %.reload224
  %31 = xor i64 1822927715859085572, %.reload224
  %32 = or i64 %30, %31
  %33 = or i64 %.reload224, -4859720709249703052
  %34 = xor i64 %.reload224, -1
  %35 = and i64 %34, -2876866584969441504
  %36 = and i64 %.reload224, 2876866584969441503
  %37 = or i64 %35, %36
  %38 = xor i64 7250123418496625748, %37
  %39 = xor i64 %.reload224, -1
  %40 = or i64 4859720709249703051, %39
  %41 = xor i64 %40, -1
  %42 = and i64 %41, -1
  %43 = or i64 %38, %42
  %44 = or i64 %.reload224, 8254121305462103730
  %45 = xor i64 %.reload224, -1
  %46 = and i64 8254121305462103730, %45
  %47 = add i64 %46, %.reload224
  %48 = xor i64 %44, %32
  %49 = xor i64 %48, %33
  %50 = xor i64 %49, 2790043167755685313
  %51 = xor i64 %50, %29
  %52 = xor i64 %51, %43
  %53 = xor i64 %52, %47
  %54 = mul i64 %28, %53
  %55 = trunc i64 %54 to i32
  %JumpTable = alloca i8*, i32 %55, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.10, %BogusBasciBlock), i8** %56, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %57, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.10, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %58 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %58, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.10, %"2"), i8** %.reload5, align 8
  %59 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %59, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.10, %.exitStub), i8** %.reload8, align 8
  %60 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %60, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.10, %.exitStub1), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %61 = load i8*, i8** %.reload, align 8
  indirectbr i8* %61, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %62 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.10, %.exitStub1), i8** %62, align 8
  %63 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.10, %.exitStub), i8** %63, align 8
  %64 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.10, %EntryBasicBlockSplit), i8** %64, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %65 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %65, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %66 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %66, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %67 = and i64 %7, -3456613471860617585
  %68 = xor i64 %7, -1
  %69 = xor i64 -3456613471860617585, %68
  %70 = and i64 %69, -3456613471860617585
  %71 = add i64 %7, 5058799913075813514
  %72 = sub i64 0, %7
  %73 = sub i64 5058799913075813514, %72
  %74 = xor i64 %73, %71
  %75 = xor i64 %74, %67
  %76 = xor i64 %75, 7827982993356026095
  %77 = xor i64 %76, %70
  %78 = or i64 %1, -5422630732880025019
  %79 = and i64 -5422630732880025019, %1
  %80 = xor i64 -5422630732880025019, %1
  %81 = or i64 %79, %80
  %82 = or i64 %3, -4354163731533111009
  %83 = xor i64 %3, -1
  %84 = and i64 -4354163731533111009, %83
  %85 = add i64 %84, %3
  %86 = add i64 %5, 4143071063669619109
  %87 = xor i64 4143071063669619109, %5
  %88 = and i64 4143071063669619109, %5
  %89 = mul i64 2, %88
  %90 = add i64 %87, %89
  %91 = xor i64 868691323358575646, %85
  %92 = xor i64 %91, %82
  %93 = xor i64 %92, %90
  %94 = xor i64 %93, %86
  %95 = xor i64 %94, %78
  %96 = xor i64 %95, %81
  %97 = mul i64 %77, %96
  %98 = srem i64 %.reload224, %97
  %99 = icmp eq i64 %98, 0
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %100 = select i1 %99, i8** %.reload7, i8** %.reload10
  %101 = load i8*, i8** %100, align 8
  indirectbr i8* %101, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %102 = or i64 %5, -4822934183579897475
  %103 = and i64 -4822934183579897475, %5
  %104 = xor i64 -4822934183579897475, %5
  %105 = or i64 %103, %104
  %106 = or i64 %9, -3984975396146697863
  %107 = xor i64 %9, -1
  %108 = and i64 -3984975396146697863, %107
  %109 = add i64 %108, %9
  %110 = and i64 %1, -8307304277826909475
  %111 = or i64 8307304277826909474, %1
  %112 = sub i64 %111, 8307304277826909474
  %113 = xor i64 %106, 6235873505281402981
  %114 = xor i64 %113, %110
  %115 = xor i64 %114, %105
  %116 = xor i64 %115, %102
  %117 = xor i64 %116, %109
  %118 = xor i64 %117, %112
  %119 = add i64 %1, -5360776961501430687
  %120 = xor i64 -5360776961501430687, %1
  %121 = and i64 -5360776961501430687, %1
  %122 = mul i64 2, %121
  %123 = add i64 %120, %122
  %124 = or i64 %1, 7813606352938797937
  %125 = xor i64 %1, -1
  %126 = and i64 7813606352938797937, %125
  %127 = add i64 %126, %1
  %128 = or i64 %.reload224, 5573593412997672213
  %129 = and i64 5573593412997672213, %.reload224
  %130 = xor i64 5573593412997672213, %.reload224
  %131 = or i64 %129, %130
  %132 = xor i64 %131, %124
  %133 = xor i64 %132, %123
  %134 = xor i64 %133, %119
  %135 = xor i64 %134, 4334234595660597613
  %136 = xor i64 %135, %127
  %137 = xor i64 %136, %128
  %138 = mul i64 %118, %137
  %139 = trunc i64 %138 to i1
  ret i1 %139

.exitStub1:                                       ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.11(i64 %.reload223, i32 %0, i1* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = sext i32 %0 to i64
  %3 = add i64 %2, 128641346100816944
  %4 = and i64 128641346100816944, %2
  %5 = or i64 128641346100816944, %2
  %6 = add i64 %4, %5
  %7 = add i64 %.reload223, -8706117452901034108
  %8 = add i64 -3518752367380534654, %.reload223
  %9 = sub i64 %8, 5187365085520499454
  %10 = xor i64 %6, %7
  %11 = xor i64 %10, %3
  %12 = xor i64 %11, %9
  %13 = xor i64 %12, -1829629410232699971
  %14 = or i64 %.reload223, 4986824248887897466
  %15 = xor i64 %.reload223, -1
  %16 = and i64 4986824248887897466, %15
  %17 = add i64 %16, %.reload223
  %18 = or i64 %.reload223, 5884166410559633397
  %19 = xor i64 %.reload223, -1
  %20 = and i64 %19, -9003292521402517494
  %21 = and i64 %.reload223, 9003292521402517493
  %22 = or i64 %20, %21
  %23 = xor i64 -3268167422281117697, %22
  %24 = xor i64 %.reload223, -1
  %25 = or i64 -5884166410559633398, %24
  %26 = xor i64 %25, -1
  %27 = and i64 %26, -1
  %28 = or i64 %23, %27
  %29 = and i64 %.reload223, -1653342644961513400
  %30 = or i64 1653342644961513399, %.reload223
  %31 = sub i64 %30, 1653342644961513399
  %32 = xor i64 -3780278531145363265, %17
  %33 = xor i64 %32, %31
  %34 = xor i64 %33, %28
  %35 = xor i64 %34, %14
  %36 = xor i64 %35, %18
  %37 = xor i64 %36, %29
  %38 = mul i64 %13, %37
  %39 = call i64 @h11804894491772278134(i64 %38)
  %40 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %39
  store i8* blockaddress(@render.extracted.11, %.exitStub1), i8** %40, align 8
  %41 = call i64 @h11804894491772278134(i64 595012100)
  %42 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %41
  store i8* blockaddress(@render.extracted.11, %codeRepl), i8** %42, align 8
  %43 = call i64 @h11804894491772278134(i64 595012102)
  %44 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %43
  store i8* blockaddress(@render.extracted.11, %.exitStub), i8** %44, align 8
  %45 = call i64 @h11804894491772278134(i64 595012101)
  %46 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %45
  store i8* blockaddress(@render.extracted.11, %"2"), i8** %46, align 8
  %47 = call i64 @h11804894491772278134(i64 595012096)
  %48 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %47
  store i8* blockaddress(@render.extracted.11, %EntryBasicBlockSplit), i8** %48, align 8
  %49 = sext i32 %0 to i64
  %50 = and i64 %49, 4686594059736917770
  %51 = xor i64 %49, -1
  %52 = or i64 -4686594059736917771, %51
  %53 = xor i64 %52, -1
  %54 = and i64 %53, -1
  %55 = add i64 %.reload223, -3185123645300884860
  %56 = and i64 -3185123645300884860, %.reload223
  %57 = or i64 -3185123645300884860, %.reload223
  %58 = add i64 %56, %57
  %59 = xor i64 %54, %50
  %60 = xor i64 %59, %58
  %61 = xor i64 %60, %55
  %62 = xor i64 %61, -6693070974933071045
  %63 = sext i32 %0 to i64
  %64 = or i64 %63, -3798472223590053661
  %65 = xor i64 %63, -1
  %66 = and i64 -3798472223590053661, %65
  %67 = add i64 %66, %63
  %68 = add i64 %.reload223, -5547007234839023096
  %69 = xor i64 -5547007234839023096, %.reload223
  %70 = and i64 -5547007234839023096, %.reload223
  %71 = mul i64 2, %70
  %72 = add i64 %69, %71
  %73 = xor i64 1712925778120307699, %68
  %74 = xor i64 %73, %67
  %75 = xor i64 %74, %72
  %76 = xor i64 %75, %64
  %77 = mul i64 %62, %76
  %78 = call i64 @h11804894491772278134(i64 %77)
  %79 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %78
  store i8* blockaddress(@render.extracted.11, %BogusBasciBlock), i8** %79, align 8
  %.reg2mem17 = alloca i64, align 8
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %80 = sext i32 %0 to i64
  %81 = add i64 %80, -5390362431970907290
  %82 = and i64 -5390362431970907290, %80
  %83 = or i64 -5390362431970907290, %80
  %84 = add i64 %82, %83
  %85 = or i64 %.reload223, 4716985803876143575
  %86 = and i64 4716985803876143575, %.reload223
  %87 = xor i64 4716985803876143575, %.reload223
  %88 = or i64 %86, %87
  %89 = or i64 %.reload223, -8234775288121502275
  %90 = xor i64 %.reload223, -1
  %91 = and i64 -8234775288121502275, %90
  %92 = add i64 %91, %.reload223
  %93 = xor i64 %81, %89
  %94 = xor i64 %93, %84
  %95 = xor i64 %94, %85
  %96 = xor i64 %95, %92
  %97 = xor i64 %96, %88
  %98 = xor i64 %97, 7381023557918492959
  %99 = sext i32 %0 to i64
  %100 = or i64 %99, 3993675560049066488
  %101 = and i64 3993675560049066488, %99
  %102 = xor i64 3993675560049066488, %99
  %103 = or i64 %101, %102
  %104 = add i64 %.reload223, -2947684709619983270
  %105 = sub i64 0, %.reload223
  %106 = add i64 2947684709619983270, %105
  %107 = sub i64 0, %106
  %108 = sext i32 %0 to i64
  %109 = or i64 %108, 242590824866850715
  %110 = xor i64 %108, -1
  %111 = and i64 242590824866850715, %110
  %112 = add i64 %111, %108
  %113 = xor i64 %109, %104
  %114 = xor i64 %113, %107
  %115 = xor i64 %114, %103
  %116 = xor i64 %115, %100
  %117 = xor i64 %116, -6238056476910636321
  %118 = xor i64 %117, %112
  %119 = mul i64 %98, %118
  %120 = trunc i64 %119 to i32
  %.reg2mem9 = alloca i8**, i32 %120, align 8
  %.reg2mem6 = alloca i8**, align 8
  %121 = sext i32 %0 to i64
  %122 = and i64 %121, 4050267959562838169
  %123 = xor i64 %121, -1
  %124 = xor i64 4050267959562838169, %123
  %125 = and i64 %124, 4050267959562838169
  %126 = sext i32 %0 to i64
  %127 = add i64 %126, 4275411354608876734
  %128 = and i64 4275411354608876734, %126
  %129 = or i64 4275411354608876734, %126
  %130 = add i64 %128, %129
  %131 = xor i64 %125, -4261840220946016683
  %132 = xor i64 %131, %130
  %133 = xor i64 %132, %122
  %134 = xor i64 %133, %127
  %135 = sext i32 %0 to i64
  %136 = add i64 %135, -240988378249694044
  %137 = add i64 -3596666255569362634, %135
  %138 = add i64 %137, 3355677877319668590
  %139 = or i64 %.reload223, 5669179073550737760
  %140 = and i64 5669179073550737760, %.reload223
  %141 = xor i64 5669179073550737760, %.reload223
  %142 = or i64 %140, %141
  %143 = and i64 %.reload223, 8004320246469133611
  %144 = xor i64 %.reload223, -1
  %145 = xor i64 8004320246469133611, %144
  %146 = and i64 %145, 8004320246469133611
  %147 = xor i64 %143, %138
  %148 = xor i64 %147, %136
  %149 = xor i64 %148, 2206191739101247229
  %150 = xor i64 %149, %142
  %151 = xor i64 %150, %146
  %152 = xor i64 %151, %139
  %153 = mul i64 %134, %152
  %154 = trunc i64 %153 to i32
  %.reg2mem3 = alloca i8**, i32 %154, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %155 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.11, %BogusBasciBlock), i8** %155, align 8
  %156 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %156, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.11, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %157 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %157, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.11, %"2"), i8** %.reload5, align 8
  %158 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %158, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.11, %codeRepl), i8** %.reload8, align 8
  %159 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %159, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.11, %.exitStub), i8** %.reload11, align 8
  %160 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %160, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@render.extracted.11, %.exitStub1), i8** %.reload14, align 8
  %161 = sext i32 %0 to i64
  %162 = and i64 %161, -8089444310307581829
  %163 = or i64 8089444310307581828, %161
  %164 = sub i64 %163, 8089444310307581828
  %165 = sext i32 %0 to i64
  %166 = add i64 %165, 4207680041229670101
  %167 = xor i64 4207680041229670101, %165
  %168 = and i64 4207680041229670101, %165
  %169 = mul i64 2, %168
  %170 = add i64 %167, %169
  %171 = sext i32 %0 to i64
  %172 = or i64 %171, -4581868705544859101
  %173 = and i64 -4581868705544859101, %171
  %174 = xor i64 -4581868705544859101, %171
  %175 = or i64 %173, %174
  %176 = xor i64 %172, %175
  %177 = xor i64 %176, 3086184506116197239
  %178 = xor i64 %177, %170
  %179 = xor i64 %178, %164
  %180 = xor i64 %179, %162
  %181 = xor i64 %180, %166
  %182 = add i64 %.reload223, -3045586200752178983
  %183 = sub i64 0, %.reload223
  %184 = sub i64 -3045586200752178983, %183
  %185 = sext i32 %0 to i64
  %186 = and i64 %185, 738307087893309134
  %187 = or i64 -738307087893309135, %185
  %188 = sub i64 %187, -738307087893309135
  %189 = sext i32 %0 to i64
  %190 = add i64 %189, -7653535134132256028
  %191 = add i64 -863308388256566374, %189
  %192 = add i64 %191, -6790226745875689654
  %193 = xor i64 %190, %192
  %194 = xor i64 %193, %186
  %195 = xor i64 %194, %182
  %196 = xor i64 %195, 4462357525281865287
  %197 = xor i64 %196, %184
  %198 = xor i64 %197, %188
  %199 = mul i64 %181, %198
  %200 = trunc i64 %199 to i32
  %201 = alloca i64, i32 %200, align 8
  %202 = alloca i64, align 8
  %203 = sext i32 %0 to i64
  %204 = and i64 %203, -3889918628118408074
  %205 = xor i64 %203, -1
  %206 = or i64 3889918628118408073, %205
  %207 = xor i64 %206, -1
  %208 = and i64 %207, -1
  %209 = and i64 %.reload223, 4768329551493044880
  %210 = xor i64 %.reload223, -1
  %211 = or i64 -4768329551493044881, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = add i64 %.reload223, 6043842761942514211
  %215 = add i64 5608352254027785468, %.reload223
  %216 = add i64 %215, 435490507914728743
  %217 = xor i64 %204, %208
  %218 = xor i64 %217, %216
  %219 = xor i64 %218, -2193578964106753791
  %220 = xor i64 %219, %214
  %221 = xor i64 %220, %209
  %222 = xor i64 %221, %213
  %223 = sext i32 %0 to i64
  %224 = and i64 %223, -7203419946824471672
  %225 = or i64 7203419946824471671, %223
  %226 = sub i64 %225, 7203419946824471671
  %227 = add i64 %.reload223, -221199164632762563
  %228 = sub i64 0, %.reload223
  %229 = sub i64 -221199164632762563, %228
  %230 = xor i64 %227, %229
  %231 = xor i64 %230, 0
  %232 = xor i64 %231, %226
  %233 = xor i64 %232, %224
  %234 = mul i64 %222, %233
  %235 = trunc i64 %234 to i1
  %236 = or i64 %.reload223, -5075494322121360272
  %237 = and i64 -5075494322121360272, %.reload223
  %238 = xor i64 -5075494322121360272, %.reload223
  %239 = or i64 %237, %238
  %240 = add i64 %.reload223, 1896848847002113332
  %241 = add i64 -5075896230555874924, %.reload223
  %242 = sub i64 %241, -6972745077557988256
  %243 = or i64 %.reload223, 2945002596135765026
  %244 = xor i64 %.reload223, -1
  %245 = and i64 %244, 4223560398634750173
  %246 = and i64 %.reload223, -4223560398634750174
  %247 = or i64 %245, %246
  %248 = xor i64 1316134712066872575, %247
  %249 = xor i64 %.reload223, -1
  %250 = or i64 -2945002596135765027, %249
  %251 = xor i64 %250, -1
  %252 = and i64 %251, -1
  %253 = or i64 %248, %252
  %254 = xor i64 %240, %236
  %255 = xor i64 %254, %243
  %256 = xor i64 %255, %253
  %257 = xor i64 %256, 3469578856753754335
  %258 = xor i64 %257, %242
  %259 = xor i64 %258, %239
  %260 = or i64 %.reload223, 4881781379310018086
  %261 = and i64 4881781379310018086, %.reload223
  %262 = xor i64 4881781379310018086, %.reload223
  %263 = or i64 %261, %262
  %264 = add i64 %.reload223, 5740081873775816110
  %265 = sub i64 0, %.reload223
  %266 = add i64 -5740081873775816110, %265
  %267 = sub i64 0, %266
  %268 = add i64 %.reload223, 2639527921049484708
  %269 = sub i64 0, %.reload223
  %270 = add i64 -2639527921049484708, %269
  %271 = sub i64 0, %270
  %272 = xor i64 %260, 0
  %273 = xor i64 %272, %268
  %274 = xor i64 %273, %264
  %275 = xor i64 %274, %267
  %276 = xor i64 %275, %263
  %277 = xor i64 %276, %271
  %278 = mul i64 %259, %277
  %279 = trunc i64 %278 to i32
  %280 = or i64 %.reload223, 445296417673852757
  %281 = xor i64 %.reload223, -1
  %282 = and i64 %281, 6946424593171275264
  %283 = and i64 %.reload223, -6946424593171275265
  %284 = or i64 %282, %283
  %285 = xor i64 7370328697497643349, %284
  %286 = xor i64 %.reload223, -1
  %287 = or i64 -445296417673852758, %286
  %288 = xor i64 %287, -1
  %289 = and i64 %288, -1
  %290 = or i64 %285, %289
  %291 = add i64 %.reload223, 7402183463763426696
  %292 = sub i64 0, %.reload223
  %293 = add i64 -7402183463763426696, %292
  %294 = sub i64 0, %293
  %295 = add i64 %.reload223, 1088254932258203312
  %296 = add i64 -5431382039845685895, %.reload223
  %297 = add i64 %296, 6519636972103889207
  %298 = xor i64 %297, %295
  %299 = xor i64 %298, %290
  %300 = xor i64 %299, %291
  %301 = xor i64 %300, %280
  %302 = xor i64 %301, -96766145388222567
  %303 = xor i64 %302, %294
  %304 = sext i32 %0 to i64
  %305 = and i64 %304, -3250802558695094701
  %306 = xor i64 %304, -1
  %307 = xor i64 -3250802558695094701, %306
  %308 = and i64 %307, -3250802558695094701
  %309 = or i64 %.reload223, -1420698763617893844
  %310 = xor i64 %.reload223, -1
  %311 = and i64 -1420698763617893844, %310
  %312 = add i64 %311, %.reload223
  %313 = xor i64 %305, %312
  %314 = xor i64 %313, %308
  %315 = xor i64 %314, 0
  %316 = xor i64 %315, %309
  %317 = mul i64 %303, %316
  %318 = trunc i64 %317 to i32
  %319 = add i64 %.reload223, 6860093558090610144
  %320 = xor i64 6860093558090610144, %.reload223
  %321 = and i64 6860093558090610144, %.reload223
  %322 = mul i64 2, %321
  %323 = add i64 %320, %322
  %324 = or i64 %.reload223, -6831684201513523511
  %325 = xor i64 %.reload223, -1
  %326 = and i64 %325, -6082113474907177505
  %327 = and i64 %.reload223, 6082113474907177504
  %328 = or i64 %326, %327
  %329 = xor i64 767588234777139990, %328
  %330 = xor i64 %.reload223, -1
  %331 = or i64 6831684201513523510, %330
  %332 = xor i64 %331, -1
  %333 = and i64 %332, -1
  %334 = or i64 %329, %333
  %335 = sext i32 %0 to i64
  %336 = or i64 %335, 7201152381992602663
  %337 = xor i64 %335, -1
  %338 = and i64 7201152381992602663, %337
  %339 = add i64 %338, %335
  %340 = xor i64 %339, %336
  %341 = xor i64 %340, %323
  %342 = xor i64 %341, %319
  %343 = xor i64 %342, %324
  %344 = xor i64 %343, -3476993559813223283
  %345 = xor i64 %344, %334
  %346 = or i64 %.reload223, -1365394260852383996
  %347 = xor i64 %.reload223, -1
  %348 = and i64 %347, -8605752064382989484
  %349 = and i64 %.reload223, 8605752064382989483
  %350 = or i64 %348, %349
  %351 = xor i64 7322605813885260880, %350
  %352 = xor i64 %.reload223, -1
  %353 = or i64 1365394260852383995, %352
  %354 = xor i64 %353, -1
  %355 = and i64 %354, -1
  %356 = or i64 %351, %355
  %357 = add i64 %.reload223, 6600894011303268791
  %358 = sub i64 0, %.reload223
  %359 = add i64 -6600894011303268791, %358
  %360 = sub i64 0, %359
  %361 = xor i64 %356, %357
  %362 = xor i64 %361, %360
  %363 = xor i64 %362, %346
  %364 = xor i64 %363, 0
  %365 = mul i64 %345, %364
  %366 = trunc i64 %365 to i32
  %367 = sext i32 %0 to i64
  %368 = and i64 %367, 7180522312128721498
  %369 = xor i64 %367, -1
  %370 = xor i64 7180522312128721498, %369
  %371 = and i64 %370, 7180522312128721498
  %372 = sext i32 %0 to i64
  %373 = add i64 %372, -6584466605551492775
  %374 = add i64 7275017308472928808, %372
  %375 = add i64 %374, 4587260159685130033
  %376 = xor i64 %373, %371
  %377 = xor i64 %376, -2781908557828241673
  %378 = xor i64 %377, %375
  %379 = xor i64 %378, %368
  %380 = sext i32 %0 to i64
  %381 = or i64 %380, 892035893433631881
  %382 = xor i64 %380, -1
  %383 = and i64 %382, -3651131669571583861
  %384 = and i64 %380, 3651131669571583860
  %385 = or i64 %383, %384
  %386 = xor i64 -4524509055229410302, %385
  %387 = xor i64 %380, -1
  %388 = or i64 -892035893433631882, %387
  %389 = xor i64 %388, -1
  %390 = and i64 %389, -1
  %391 = or i64 %386, %390
  %392 = add i64 %.reload223, 5927890680744080681
  %393 = xor i64 5927890680744080681, %.reload223
  %394 = and i64 5927890680744080681, %.reload223
  %395 = mul i64 2, %394
  %396 = add i64 %393, %395
  %397 = sext i32 %0 to i64
  %398 = or i64 %397, 10557512448453539
  %399 = and i64 10557512448453539, %397
  %400 = xor i64 10557512448453539, %397
  %401 = or i64 %399, %400
  %402 = xor i64 %392, %381
  %403 = xor i64 %402, 0
  %404 = xor i64 %403, %398
  %405 = xor i64 %404, %391
  %406 = xor i64 %405, %401
  %407 = xor i64 %406, %396
  %408 = mul i64 %379, %407
  %409 = trunc i64 %408 to i1
  %410 = sext i32 %0 to i64
  %411 = or i64 %410, -3549097631450427225
  %412 = and i64 -3549097631450427225, %410
  %413 = xor i64 -3549097631450427225, %410
  %414 = or i64 %412, %413
  %415 = sext i32 %0 to i64
  %416 = add i64 %415, -3448215507822283570
  %417 = add i64 -5120338102259071902, %415
  %418 = add i64 %417, 1672122594436788332
  %419 = add i64 %.reload223, -7374225049460705039
  %420 = sub i64 0, %.reload223
  %421 = add i64 7374225049460705039, %420
  %422 = sub i64 0, %421
  %423 = xor i64 1927429545257506159, %418
  %424 = xor i64 %423, %411
  %425 = xor i64 %424, %422
  %426 = xor i64 %425, %414
  %427 = xor i64 %426, %419
  %428 = xor i64 %427, %416
  %429 = and i64 %.reload223, 6459730059014610325
  %430 = xor i64 %.reload223, -1
  %431 = xor i64 6459730059014610325, %430
  %432 = and i64 %431, 6459730059014610325
  %433 = sext i32 %0 to i64
  %434 = and i64 %433, -4202891163673716802
  %435 = xor i64 %433, -1
  %436 = or i64 4202891163673716801, %435
  %437 = xor i64 %436, -1
  %438 = and i64 %437, -1
  %439 = xor i64 %429, %434
  %440 = xor i64 %439, %438
  %441 = xor i64 %440, 0
  %442 = xor i64 %441, %432
  %443 = mul i64 %428, %442
  %444 = trunc i64 %443 to i1
  %445 = or i64 %.reload223, -8419225501799194202
  %446 = and i64 -8419225501799194202, %.reload223
  %447 = xor i64 -8419225501799194202, %.reload223
  %448 = or i64 %446, %447
  %449 = sext i32 %0 to i64
  %450 = or i64 %449, -8317977108224751177
  %451 = and i64 -8317977108224751177, %449
  %452 = xor i64 -8317977108224751177, %449
  %453 = or i64 %451, %452
  %454 = xor i64 %450, %453
  %455 = xor i64 %454, 6172454451999591105
  %456 = xor i64 %455, %448
  %457 = xor i64 %456, %445
  %458 = sext i32 %0 to i64
  %459 = or i64 %458, -7105481735805675101
  %460 = and i64 -7105481735805675101, %458
  %461 = xor i64 -7105481735805675101, %458
  %462 = or i64 %460, %461
  %463 = sext i32 %0 to i64
  %464 = add i64 %463, -3688104613188805733
  %465 = add i64 8169434069174923244, %463
  %466 = sub i64 %465, -6589205391345822639
  %467 = and i64 %.reload223, 6924762416313238681
  %468 = xor i64 %.reload223, -1
  %469 = or i64 -6924762416313238682, %468
  %470 = xor i64 %469, -1
  %471 = and i64 %470, -1
  %472 = xor i64 %466, %471
  %473 = xor i64 %472, %464
  %474 = xor i64 %473, 0
  %475 = xor i64 %474, %459
  %476 = xor i64 %475, %462
  %477 = xor i64 %476, %467
  %478 = mul i64 %457, %477
  %479 = trunc i64 %478 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %202, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %235, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %279, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %318, i32 %366, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %409, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %444, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %479, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %480 = load i64, i64* %202, align 8
  %481 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5267233781939814659, i32 0, i64 %480
  store i8** %481, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %482 = load i8*, i8** %.reload, align 8
  indirectbr i8* %482, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %483 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.11, %.exitStub1), i8** %483, align 8
  %484 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.11, %BogusBasciBlock), i8** %484, align 8
  %485 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.11, %EntryBasicBlockSplit), i8** %485, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %486 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %486, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i64, i32, i1*)* @render.extracted.11.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %487 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %487, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %488 = sdiv i64 118, 47
  %489 = add i64 %47, -8346102021918154747
  %490 = sub i64 0, %47
  %491 = add i64 8346102021918154747, %490
  %492 = sub i64 0, %491
  %493 = or i64 %47, -1846924058091014138
  %494 = xor i64 %47, -1
  %495 = and i64 %494, -1858874201933764007
  %496 = and i64 %47, 1858874201933764006
  %497 = or i64 %495, %496
  %498 = xor i64 30851857413116511, %497
  %499 = xor i64 %47, -1
  %500 = or i64 1846924058091014137, %499
  %501 = xor i64 %500, -1
  %502 = and i64 %501, -1
  %503 = or i64 %498, %502
  %504 = sext i32 %0 to i64
  %505 = add i64 %504, 6046259930263830627
  %506 = sub i64 0, %504
  %507 = add i64 -6046259930263830627, %506
  %508 = sub i64 0, %507
  %509 = xor i64 %493, %503
  %510 = xor i64 %509, %508
  %511 = xor i64 %510, %505
  %512 = xor i64 %511, %489
  %513 = xor i64 %512, -1443450173458727253
  %514 = xor i64 %513, %492
  %515 = and i64 %39, 5646464086681533760
  %516 = xor i64 %39, -1
  %517 = xor i64 5646464086681533760, %516
  %518 = and i64 %517, 5646464086681533760
  %519 = sext i32 %0 to i64
  %520 = and i64 %519, 1731222213698649032
  %521 = or i64 -1731222213698649033, %519
  %522 = sub i64 %521, -1731222213698649033
  %523 = xor i64 %522, %515
  %524 = xor i64 %523, %518
  %525 = xor i64 %524, -6412943867547284141
  %526 = xor i64 %525, %520
  %527 = mul i64 %514, %526
  %528 = sdiv i64 %527, 57
  %529 = sub i64 66, 43
  %530 = srem i64 %.reload223, 2
  store i64 %530, i64* %.reg2mem17, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %531 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %531, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %201, align 8
  %532 = and i64 %39, -374753107383268518
  %533 = xor i64 %39, -1
  %534 = xor i64 -374753107383268518, %533
  %535 = and i64 %534, -374753107383268518
  %536 = add i64 %480, 4956732993497191054
  %537 = add i64 1606100637347122370, %480
  %538 = sub i64 %537, -3350632356150068684
  %539 = add i64 %47, -2333751578809985877
  %540 = add i64 622397425607272854, %47
  %541 = sub i64 %540, 2956149004417258731
  %542 = xor i64 969011420837125369, %535
  %543 = xor i64 %542, %539
  %544 = xor i64 %543, %541
  %545 = xor i64 %544, %532
  %546 = xor i64 %545, %538
  %547 = xor i64 %546, %536
  %548 = or i64 %45, -7925507762879723219
  %549 = and i64 -7925507762879723219, %45
  %550 = xor i64 -7925507762879723219, %45
  %551 = or i64 %549, %550
  %552 = or i64 %39, 1695264110104242958
  %553 = xor i64 %39, -1
  %554 = and i64 %553, 1032025711206020294
  %555 = and i64 %39, -1032025711206020295
  %556 = or i64 %554, %555
  %557 = xor i64 1861310816477405128, %556
  %558 = xor i64 %39, -1
  %559 = or i64 -1695264110104242959, %558
  %560 = xor i64 %559, -1
  %561 = and i64 %560, -1
  %562 = or i64 %557, %561
  %563 = and i64 %41, -5706642352707641124
  %564 = xor i64 %41, -1
  %565 = or i64 5706642352707641123, %564
  %566 = xor i64 %565, -1
  %567 = and i64 %566, -1
  %568 = xor i64 %563, %562
  %569 = xor i64 %568, %567
  %570 = xor i64 %569, %548
  %571 = xor i64 %570, -4210162227996859063
  %572 = xor i64 %571, %551
  %573 = xor i64 %572, %552
  %574 = mul i64 %547, %573
  %575 = trunc i64 %574 to i32
  %576 = alloca i8**, i32 %575, align 8
  %577 = and i64 %39, 9210716829188217446
  %578 = or i64 -9210716829188217447, %39
  %579 = sub i64 %578, -9210716829188217447
  %580 = or i64 %45, -8771092132863578695
  %581 = and i64 -8771092132863578695, %45
  %582 = xor i64 -8771092132863578695, %45
  %583 = or i64 %581, %582
  %584 = add i64 %480, -7022240064359374358
  %585 = sub i64 0, %480
  %586 = add i64 7022240064359374358, %585
  %587 = sub i64 0, %586
  %588 = xor i64 %580, %583
  %589 = xor i64 %588, %579
  %590 = xor i64 %589, %577
  %591 = xor i64 %590, %587
  %592 = xor i64 %591, %584
  %593 = xor i64 %592, 3507404687951201137
  %594 = add i64 %43, 4303001207894017613
  %595 = xor i64 4303001207894017613, %43
  %596 = and i64 4303001207894017613, %43
  %597 = mul i64 2, %596
  %598 = add i64 %595, %597
  %599 = and i64 %480, -4049059498767298746
  %600 = or i64 4049059498767298745, %480
  %601 = sub i64 %600, 4049059498767298745
  %602 = xor i64 %601, %599
  %603 = xor i64 %602, %594
  %604 = xor i64 %603, %598
  %605 = xor i64 %604, 0
  %606 = mul i64 %593, %605
  %607 = trunc i64 %606 to i1
  %608 = and i64 %480, -4419269906022702324
  %609 = xor i64 %480, -1
  %610 = or i64 4419269906022702323, %609
  %611 = xor i64 %610, -1
  %612 = and i64 %611, -1
  %613 = add i64 %45, -5356682657573933119
  %614 = and i64 -5356682657573933119, %45
  %615 = or i64 -5356682657573933119, %45
  %616 = add i64 %614, %615
  %617 = and i64 %39, 8764889332283323116
  %618 = xor i64 %39, -1
  %619 = xor i64 8764889332283323116, %618
  %620 = and i64 %619, 8764889332283323116
  %621 = xor i64 %616, %613
  %622 = xor i64 %621, %620
  %623 = xor i64 %622, %612
  %624 = xor i64 %623, %608
  %625 = xor i64 %624, 1699101062006633355
  %626 = xor i64 %625, %617
  %627 = add i64 %39, 8909477440545071259
  %628 = xor i64 8909477440545071259, %39
  %629 = and i64 8909477440545071259, %39
  %630 = mul i64 2, %629
  %631 = add i64 %628, %630
  %632 = and i64 %39, 5616924414447398451
  %633 = or i64 -5616924414447398452, %39
  %634 = sub i64 %633, -5616924414447398452
  %635 = xor i64 0, %632
  %636 = xor i64 %635, %631
  %637 = xor i64 %636, %627
  %638 = xor i64 %637, %634
  %639 = mul i64 %626, %638
  %640 = trunc i64 %639 to i1
  %641 = sext i32 %0 to i64
  %642 = or i64 %641, 2034513727885997740
  %643 = xor i64 %641, -1
  %644 = and i64 2034513727885997740, %643
  %645 = add i64 %644, %641
  %646 = or i64 %45, 2528126879657607975
  %647 = xor i64 %45, -1
  %648 = and i64 2528126879657607975, %647
  %649 = add i64 %648, %45
  %650 = add i64 %41, -1515179216622086638
  %651 = add i64 8506811602528888132, %41
  %652 = add i64 %651, 8424753254558576846
  %653 = xor i64 %650, %652
  %654 = xor i64 %653, %642
  %655 = xor i64 %654, -8355882211843011437
  %656 = xor i64 %655, %649
  %657 = xor i64 %656, %645
  %658 = xor i64 %657, %646
  %659 = and i64 %41, 1511415663025267219
  %660 = xor i64 %41, -1
  %661 = or i64 -1511415663025267220, %660
  %662 = xor i64 %661, -1
  %663 = and i64 %662, -1
  %664 = or i64 %43, 711824748038220731
  %665 = and i64 711824748038220731, %43
  %666 = xor i64 711824748038220731, %43
  %667 = or i64 %665, %666
  %668 = sext i32 %0 to i64
  %669 = or i64 %668, -2357888184278056559
  %670 = xor i64 %668, -1
  %671 = and i64 -2357888184278056559, %670
  %672 = add i64 %671, %668
  %673 = xor i64 0, %659
  %674 = xor i64 %673, %664
  %675 = xor i64 %674, %663
  %676 = xor i64 %675, %667
  %677 = xor i64 %676, %672
  %678 = xor i64 %677, %669
  %679 = mul i64 %658, %678
  %680 = trunc i64 %679 to i1
  call void @"9941920946239825184"(i32 2, i64* null, i8*** null, i64* null, i8*** null, i64* %201, i8*** %576, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %607, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %640, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %680, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %681 = load i8**, i8*** %576, align 8
  %682 = load i8*, i8** %681, align 8
  %683 = bitcast i8* %682 to i1 (i64, i32, i1*)*
  %.reload18 = load i64, i64* %.reg2mem17, align 8
  %targetBlock = call i1 %683(i64 %.reload18, i32 %0, i1* %.out)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %684 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %685 = load i8*, i8** %684, align 8
  indirectbr i8* %685, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.extracted(i1 %0, i1* %.out1, i1* %.out2, i1 %1, i1* %.out3, i1* %.out4, i1* %.out5, i32 %2, i32 %3, i1* %.out6) #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h11804894491772278134(i64 595012151)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.extracted, %loopEnd), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012129)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.extracted, %defaultSwitchBasicBlock), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012119)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.extracted, %BogusBasicBlock), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012142)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@render.extracted.extracted, %.exitStub.exitStub), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012148)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@render.extracted.extracted, %.exitStub7.exitStub), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012149)
  %16 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %15
  store i8* blockaddress(@render.extracted.extracted, %143), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012194)
  %18 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %17
  store i8* blockaddress(@render.extracted.extracted, %EntryBasicBlockSplit), i8** %18, align 8
  %19 = call i64 @h11804894491772278134(i64 595012155)
  %20 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %19
  store i8* blockaddress(@render.extracted.extracted, %loopStart), i8** %20, align 8
  %lookupTable = alloca [9 x i32], align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %28 = sext i32 %2 to i64
  %29 = add i64 %28, -7964074146046254449
  %30 = add i64 6763672038320533295, %28
  %31 = add i64 %30, 3718997889342763872
  %32 = sext i32 %2 to i64
  %33 = or i64 %32, -686780249349056557
  %34 = xor i64 %32, -1
  %35 = and i64 %34, 4130443938053864602
  %36 = and i64 %32, -4130443938053864603
  %37 = or i64 %35, %36
  %38 = xor i64 -3518901336696018103, %37
  %39 = xor i64 %32, -1
  %40 = or i64 686780249349056556, %39
  %41 = xor i64 %40, -1
  %42 = and i64 %41, -1
  %43 = or i64 %38, %42
  %44 = sext i32 %3 to i64
  %45 = or i64 %44, -5439838348444348088
  %46 = xor i64 %44, -1
  %47 = and i64 -5439838348444348088, %46
  %48 = add i64 %47, %44
  %49 = xor i64 %48, -6875738740391305837
  %50 = xor i64 %49, %45
  %51 = xor i64 %50, %29
  %52 = xor i64 %51, %33
  %53 = xor i64 %52, %31
  %54 = xor i64 %53, %43
  %55 = sext i32 %3 to i64
  %56 = add i64 %55, -7460790443356525895
  %57 = add i64 -1983546686079284680, %55
  %58 = add i64 %57, -5477243757277241215
  %59 = sext i32 %3 to i64
  %60 = add i64 %59, 3161999950785294418
  %61 = sub i64 0, %59
  %62 = sub i64 3161999950785294418, %61
  %63 = xor i64 %58, %62
  %64 = xor i64 %63, %56
  %65 = xor i64 %64, %60
  %66 = xor i64 %65, 8206691829073910225
  %67 = mul i64 %54, %66
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* %27, align 4
  %69 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %69, align 4
  %70 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %70, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012155, i32* %4, align 4
  %71 = call i8** @bf777061424148142830(i32* %4)
  %72 = load i8*, i8** %71, align 8
  indirectbr i8* %72, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %143
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub7.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %73 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %76 = load i32, i32* %75, align 4
  %77 = srem i32 %74, %76
  store i32 %77, i32* %dispatcher, align 4
  %78 = load i8*, i8** %18, align 8
  %79 = load i8, i8* %78, align 1
  %80 = xor i8 %79, -1
  %81 = or i8 %80, -2
  %82 = xor i8 %81, -1
  %83 = and i8 %82, -1
  %84 = icmp eq i8 %83, 0
  %85 = mul i8 %79, %79
  %86 = add i8 %85, %79
  %87 = mul i8 %86, 3
  %88 = srem i8 %87, 2
  %89 = sext i32 %3 to i64
  %90 = and i64 %89, 9115638869973512597
  %91 = or i64 -9115638869973512598, %89
  %92 = sub i64 %91, -9115638869973512598
  %93 = and i64 %13, 5897512107868952921
  %94 = xor i64 %13, -1
  %95 = or i64 -5897512107868952922, %94
  %96 = xor i64 %95, -1
  %97 = and i64 %96, -1
  %98 = add i64 %9, 4485017700320592870
  %99 = xor i64 4485017700320592870, %9
  %100 = and i64 4485017700320592870, %9
  %101 = mul i64 2, %100
  %102 = add i64 %99, %101
  %103 = xor i64 %90, %98
  %104 = xor i64 %103, %97
  %105 = xor i64 %104, %92
  %106 = xor i64 %105, %102
  %107 = xor i64 %106, 5103134145827513249
  %108 = xor i64 %107, %93
  %109 = or i64 %15, 8561916843077281480
  %110 = and i64 8561916843077281480, %15
  %111 = xor i64 8561916843077281480, %15
  %112 = or i64 %110, %111
  %113 = sext i32 %2 to i64
  %114 = or i64 %113, -5460351284854486270
  %115 = xor i64 %113, -1
  %116 = and i64 -5460351284854486270, %115
  %117 = add i64 %116, %113
  %118 = or i64 %5, -6228603182247738525
  %119 = xor i64 %5, -1
  %120 = and i64 %119, -8871102746020963097
  %121 = and i64 %5, 8871102746020963096
  %122 = or i64 %120, %121
  %123 = xor i64 3273005759757819780, %122
  %124 = xor i64 %5, -1
  %125 = or i64 6228603182247738524, %124
  %126 = xor i64 %125, -1
  %127 = and i64 %126, -1
  %128 = or i64 %123, %127
  %129 = xor i64 %114, %112
  %130 = xor i64 %129, %109
  %131 = xor i64 %130, %118
  %132 = xor i64 %131, %128
  %133 = xor i64 %132, %117
  %134 = xor i64 %133, 0
  %135 = mul i64 %108, %134
  %136 = trunc i64 %135 to i8
  %137 = icmp eq i8 %88, %136
  %138 = or i1 %84, %137
  %139 = select i1 %138, i32 595012119, i32 595012151
  %140 = xor i32 %139, 32
  store i32 %140, i32* %4, align 4
  %141 = call i8** @bf777061424148142830(i32* %4)
  %142 = load i8*, i8** %141, align 8
  indirectbr i8* %142, [label %loopEnd, label %EntryBasicBlockSplit]

143:                                              ; preds = %143, %loopStart
  store i1 %0, i1* %.out1, align 1
  %144 = sdiv i64 121, 112
  %145 = xor i1 %0, true
  %146 = or i1 %145, true
  %147 = xor i1 %146, true
  %148 = and i1 %147, true
  store i1 %148, i1* %.out2, align 1
  %149 = mul i64 114, 9
  %150 = xor i1 %1, true
  %151 = or i1 %150, true
  %152 = xor i1 %1, true
  %153 = sub i1 %151, %152
  store i1 %153, i1* %.out3, align 1
  %154 = sub i64 1, -110
  %155 = xor i1 %148, true
  %156 = mul i64 21, 117
  %157 = and i1 %155, false
  store i1 %157, i1* %.out4, align 1
  %158 = mul i64 12, 70
  %159 = add i64 %13, 380140686914380532
  %160 = xor i64 380140686914380532, %13
  %161 = and i64 380140686914380532, %13
  %162 = mul i64 2, %161
  %163 = add i64 %160, %162
  %164 = add i64 %5, 2826877373361169070
  %165 = sub i64 0, %5
  %166 = add i64 -2826877373361169070, %165
  %167 = sub i64 0, %166
  %168 = xor i64 %164, %167
  %169 = xor i64 %168, %159
  %170 = xor i64 %169, %163
  %171 = xor i64 %170, 2851730050757270921
  %172 = and i64 %17, -656232052912120901
  %173 = or i64 656232052912120900, %17
  %174 = sub i64 %173, 656232052912120900
  %175 = sext i32 %3 to i64
  %176 = or i64 %175, -4482819967076510964
  %177 = xor i64 %175, -1
  %178 = and i64 %177, -3885795308963356364
  %179 = and i64 %175, 3885795308963356363
  %180 = or i64 %178, %179
  %181 = xor i64 854332890148532792, %180
  %182 = xor i64 %175, -1
  %183 = or i64 4482819967076510963, %182
  %184 = xor i64 %183, -1
  %185 = and i64 %184, -1
  %186 = or i64 %181, %185
  %187 = and i64 %7, -3634618012132827424
  %188 = xor i64 %7, -1
  %189 = xor i64 -3634618012132827424, %188
  %190 = and i64 %189, -3634618012132827424
  %191 = xor i64 %172, %174
  %192 = xor i64 %191, %176
  %193 = xor i64 %192, %186
  %194 = xor i64 %193, 1896622811436935353
  %195 = xor i64 %194, %187
  %196 = xor i64 %195, %190
  %197 = mul i64 %171, %196
  %198 = trunc i64 %197 to i1
  %199 = and i1 %148, %198
  store i1 %199, i1* %.out5, align 1
  %200 = srem i32 %2, 2
  %201 = icmp eq i32 %200, 0
  %202 = mul i32 %3, 2
  %203 = mul i32 %3, 2
  %204 = add i32 2, %203
  %205 = mul i32 %202, %204
  %206 = srem i32 %205, 4
  %207 = icmp eq i32 %206, 0
  %208 = mul i32 %3, %3
  %209 = and i32 %208, %3
  %210 = or i32 %208, %3
  %211 = add i32 %209, %210
  %212 = srem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = or i1 %207, %213
  store i1 %214, i1* %.out6, align 1
  %215 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %218 = load i32, i32* %217, align 4
  %219 = srem i32 %216, %218
  %220 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %223 = load i32, i32* %222, align 4
  %224 = srem i32 %221, %223
  %225 = select i1 %214, i32 %219, i32 %224
  store i32 %225, i32* %dispatcher, align 4
  %226 = load i8*, i8** %12, align 8
  %227 = load i8, i8* %226, align 1
  %228 = and i64 %13, 736259403512574752
  %229 = or i64 -736259403512574753, %13
  %230 = sub i64 %229, -736259403512574753
  %231 = add i64 %19, 5946305706360877326
  %232 = and i64 5946305706360877326, %19
  %233 = or i64 5946305706360877326, %19
  %234 = add i64 %232, %233
  %235 = and i64 %17, -1225771792502814639
  %236 = xor i64 %17, -1
  %237 = or i64 1225771792502814638, %236
  %238 = xor i64 %237, -1
  %239 = and i64 %238, -1
  %240 = xor i64 -1021017174793814387, %234
  %241 = xor i64 %240, %235
  %242 = xor i64 %241, %231
  %243 = xor i64 %242, %228
  %244 = xor i64 %243, %239
  %245 = xor i64 %244, %230
  %246 = and i64 %9, -1330642021274689199
  %247 = xor i64 %9, -1
  %248 = xor i64 -1330642021274689199, %247
  %249 = and i64 %248, -1330642021274689199
  %250 = sext i32 %2 to i64
  %251 = and i64 %250, 4061186149024508413
  %252 = xor i64 %250, -1
  %253 = xor i64 4061186149024508413, %252
  %254 = and i64 %253, 4061186149024508413
  %255 = xor i64 %249, -4797241858040999749
  %256 = xor i64 %255, %254
  %257 = xor i64 %256, %251
  %258 = xor i64 %257, %246
  %259 = mul i64 %245, %258
  %260 = trunc i64 %259 to i8
  %261 = xor i8 %227, %260
  %262 = or i8 %261, -2
  %263 = sext i32 %3 to i64
  %264 = add i64 %263, 6799560381475468083
  %265 = xor i64 6799560381475468083, %263
  %266 = and i64 6799560381475468083, %263
  %267 = mul i64 2, %266
  %268 = add i64 %265, %267
  %269 = or i64 %19, -2227600261844904696
  %270 = xor i64 %19, -1
  %271 = and i64 -2227600261844904696, %270
  %272 = add i64 %271, %19
  %273 = or i64 %7, 7031566705098538504
  %274 = xor i64 %7, -1
  %275 = and i64 %274, -5451611364516945665
  %276 = and i64 %7, 5451611364516945664
  %277 = or i64 %275, %276
  %278 = xor i64 -3043631869160546569, %277
  %279 = xor i64 %7, -1
  %280 = or i64 -7031566705098538505, %279
  %281 = xor i64 %280, -1
  %282 = and i64 %281, -1
  %283 = or i64 %278, %282
  %284 = xor i64 %269, 9104989885893656199
  %285 = xor i64 %284, %273
  %286 = xor i64 %285, %272
  %287 = xor i64 %286, %268
  %288 = xor i64 %287, %264
  %289 = xor i64 %288, %283
  %290 = sext i32 %2 to i64
  %291 = and i64 %290, 4262737927573381885
  %292 = xor i64 %290, -1
  %293 = or i64 -4262737927573381886, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %294, -1
  %296 = or i64 %13, 3334321292981750891
  %297 = and i64 3334321292981750891, %13
  %298 = xor i64 3334321292981750891, %13
  %299 = or i64 %297, %298
  %300 = xor i64 %295, %296
  %301 = xor i64 %300, %299
  %302 = xor i64 %301, %291
  %303 = xor i64 %302, 2361108604911226825
  %304 = mul i64 %289, %303
  %305 = trunc i64 %304 to i8
  %306 = xor i8 %262, %305
  %307 = and i8 %306, -1
  %308 = icmp eq i8 %307, 0
  %309 = mul i8 %227, %227
  %310 = xor i8 %309, %227
  %311 = and i8 %309, %227
  %312 = mul i8 2, %311
  %313 = add i8 %310, %312
  %314 = mul i8 39, %313
  %315 = add i8 23, %314
  %316 = mul i8 -105, %315
  %317 = add i8 111, %316
  %318 = mul i8 %317, 3
  %319 = srem i8 %318, 2
  %320 = icmp eq i8 %319, 0
  %321 = or i1 %308, %320
  %322 = select i1 %321, i32 595012148, i32 595012151
  %323 = xor i32 %322, 3
  store i32 %323, i32* %4, align 4
  %324 = call i8** @bf777061424148142830(i32* %4)
  %325 = load i8*, i8** %324, align 8
  indirectbr i8* %325, [label %loopEnd, label %143]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub7.exitStub:                              ; preds = %loopStart
  %326 = and i64 %5, -6689095588730082708
  %327 = xor i64 %5, -1
  %328 = or i64 6689095588730082707, %327
  %329 = xor i64 %328, -1
  %330 = and i64 %329, -1
  %331 = or i64 %11, 6639767403356578860
  %332 = xor i64 %11, -1
  %333 = and i64 6639767403356578860, %332
  %334 = add i64 %333, %11
  %335 = xor i64 %331, -8067267752797741181
  %336 = xor i64 %335, %334
  %337 = xor i64 %336, %326
  %338 = xor i64 %337, %330
  %339 = sext i32 %dispatcher1 to i64
  %340 = or i64 %339, -3057986017818034365
  %341 = xor i64 %339, -1
  %342 = and i64 -3057986017818034365, %341
  %343 = add i64 %342, %339
  %344 = or i64 %9, 2856442596868263111
  %345 = xor i64 %9, -1
  %346 = and i64 2856442596868263111, %345
  %347 = add i64 %346, %9
  %348 = xor i64 %340, %347
  %349 = xor i64 %348, %343
  %350 = xor i64 %349, 0
  %351 = xor i64 %350, %344
  %352 = mul i64 %338, %351
  %353 = trunc i64 %352 to i1
  ret i1 %353

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %354 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %354, align 4
  %355 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %355, align 4
  %356 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %356, align 4
  %357 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %357, align 4
  %358 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %358, align 4
  %359 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %360 = load i32, i32* %359, align 4
  store i32 %360, i32* %dispatcher, align 4
  %361 = load i8*, i8** %10, align 8
  %362 = load i8, i8* %361, align 1
  %363 = mul i8 %362, %362
  %364 = add i8 %363, %362
  %365 = mul i8 %364, 3
  %366 = srem i8 %365, 2
  %367 = icmp eq i8 %366, 0
  %368 = mul i8 %362, %362
  %369 = add i8 %368, %362
  %370 = add i64 %17, -1721595894369034172
  %371 = sub i64 0, %17
  %372 = sub i64 -1721595894369034172, %371
  %373 = and i64 %19, 2672913062149140342
  %374 = xor i64 %19, -1
  %375 = xor i64 2672913062149140342, %374
  %376 = and i64 %375, 2672913062149140342
  %377 = xor i64 %372, -5004085987448246291
  %378 = xor i64 %377, %373
  %379 = xor i64 %378, %376
  %380 = xor i64 %379, %370
  %381 = and i64 %5, -3867531446771448001
  %382 = xor i64 %5, -1
  %383 = xor i64 -3867531446771448001, %382
  %384 = and i64 %383, -3867531446771448001
  %385 = or i64 %11, 1276837921432462735
  %386 = xor i64 %11, -1
  %387 = and i64 %386, 6080396296494904886
  %388 = and i64 %11, -6080396296494904887
  %389 = or i64 %387, %388
  %390 = xor i64 5033288685992743865, %389
  %391 = xor i64 %11, -1
  %392 = or i64 -1276837921432462736, %391
  %393 = xor i64 %392, -1
  %394 = and i64 %393, -1
  %395 = or i64 %390, %394
  %396 = xor i64 4456860661217037258, %384
  %397 = xor i64 %396, %395
  %398 = xor i64 %397, %381
  %399 = xor i64 %398, %385
  %400 = mul i64 %380, %399
  %401 = trunc i64 %400 to i8
  %402 = srem i8 %369, %401
  %403 = icmp eq i8 %402, 0
  %404 = and i1 %367, %403
  %405 = select i1 %404, i32 595012142, i32 595012194
  %406 = xor i32 %405, 76
  store i32 %406, i32* %4, align 4
  %407 = call i8** @bf777061424148142830(i32* %4)
  %408 = load i8*, i8** %407, align 8
  indirectbr i8* %408, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %409 = load i8*, i8** %10, align 8
  %410 = load i8, i8* %409, align 1
  %411 = mul i8 %410, 2
  %412 = mul i8 %410, 2
  %413 = add i8 2, %412
  %414 = mul i8 %411, %413
  %415 = srem i8 %414, 4
  %416 = icmp eq i8 %415, 0
  %417 = mul i8 %410, %410
  %418 = add i8 %417, %410
  %419 = srem i8 %418, 2
  %420 = icmp eq i8 %419, 0
  %421 = or i1 %416, %420
  %422 = and i64 %19, -2164417318269018424
  %423 = or i64 2164417318269018423, %19
  %424 = sub i64 %423, 2164417318269018423
  %425 = add i64 %19, -3400271287646943838
  %426 = sub i64 0, %19
  %427 = sub i64 -3400271287646943838, %426
  %428 = or i64 %9, 6125306079439408990
  %429 = xor i64 %9, -1
  %430 = and i64 %429, -6734815592410453498
  %431 = and i64 %9, 6734815592410453497
  %432 = or i64 %430, %431
  %433 = xor i64 -610143690947943080, %432
  %434 = xor i64 %9, -1
  %435 = or i64 -6125306079439408991, %434
  %436 = xor i64 %435, -1
  %437 = and i64 %436, -1
  %438 = or i64 %433, %437
  %439 = xor i64 %422, %428
  %440 = xor i64 %439, %425
  %441 = xor i64 %440, %424
  %442 = xor i64 %441, -3401744517457928279
  %443 = xor i64 %442, %438
  %444 = xor i64 %443, %427
  %445 = or i64 %7, -7904043013248177417
  %446 = xor i64 %7, -1
  %447 = and i64 %446, 4286099156026751794
  %448 = and i64 %7, -4286099156026751795
  %449 = or i64 %447, %448
  %450 = xor i64 -6254239049620631099, %449
  %451 = xor i64 %7, -1
  %452 = or i64 7904043013248177416, %451
  %453 = xor i64 %452, -1
  %454 = and i64 %453, -1
  %455 = or i64 %450, %454
  %456 = or i64 %5, -388295983648475129
  %457 = xor i64 %5, -1
  %458 = and i64 %457, 3161287944167668648
  %459 = and i64 %5, -3161287944167668649
  %460 = or i64 %458, %459
  %461 = xor i64 -3367750794358209617, %460
  %462 = xor i64 %5, -1
  %463 = or i64 388295983648475128, %462
  %464 = xor i64 %463, -1
  %465 = and i64 %464, -1
  %466 = or i64 %461, %465
  %467 = sext i32 %2 to i64
  %468 = and i64 %467, 3620764014254778320
  %469 = or i64 -3620764014254778321, %467
  %470 = sub i64 %469, -3620764014254778321
  %471 = xor i64 %456, -5872033966431525153
  %472 = xor i64 %471, %468
  %473 = xor i64 %472, %470
  %474 = xor i64 %473, %445
  %475 = xor i64 %474, %466
  %476 = xor i64 %475, %455
  %477 = mul i64 %444, %476
  %478 = trunc i64 %477 to i32
  %479 = select i1 %421, i32 595012148, i32 %478
  %480 = xor i32 %479, 3
  store i32 %480, i32* %4, align 4
  %481 = call i8** @bf777061424148142830(i32* %4)
  %482 = load i8*, i8** %481, align 8
  indirectbr i8* %482, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %143, %EntryBasicBlockSplit
  %483 = load i8*, i8** %6, align 8
  %484 = load i8, i8* %483, align 1
  %485 = mul i8 %484, %484
  %486 = sub i8 0, %485
  %487 = sub i8 0, %484
  %488 = add i8 %486, %487
  %489 = or i64 %15, -3678546886943432383
  %490 = xor i64 %15, -1
  %491 = and i64 %490, 2722624731775403092
  %492 = and i64 %15, -2722624731775403093
  %493 = or i64 %491, %492
  %494 = xor i64 -1640548468534237931, %493
  %495 = xor i64 %15, -1
  %496 = or i64 3678546886943432382, %495
  %497 = xor i64 %496, -1
  %498 = and i64 %497, -1
  %499 = or i64 %494, %498
  %500 = and i64 %7, 8492795718041745589
  %501 = or i64 -8492795718041745590, %7
  %502 = sub i64 %501, -8492795718041745590
  %503 = xor i64 8948542134611561303, %489
  %504 = xor i64 %503, %502
  %505 = xor i64 %504, %500
  %506 = xor i64 %505, %499
  %507 = sext i32 %3 to i64
  %508 = add i64 %507, -444119819393763316
  %509 = sub i64 0, %507
  %510 = sub i64 -444119819393763316, %509
  %511 = sext i32 %2 to i64
  %512 = add i64 %511, -8259373222588969697
  %513 = and i64 -8259373222588969697, %511
  %514 = or i64 -8259373222588969697, %511
  %515 = add i64 %513, %514
  %516 = and i64 %15, 1402085220282382892
  %517 = or i64 -1402085220282382893, %15
  %518 = sub i64 %517, -1402085220282382893
  %519 = xor i64 %510, 0
  %520 = xor i64 %519, %516
  %521 = xor i64 %520, %515
  %522 = xor i64 %521, %512
  %523 = xor i64 %522, %508
  %524 = xor i64 %523, %518
  %525 = mul i64 %506, %524
  %526 = trunc i64 %525 to i8
  %527 = sub i8 %526, %488
  %528 = or i64 %19, 1548205908240252730
  %529 = and i64 1548205908240252730, %19
  %530 = xor i64 1548205908240252730, %19
  %531 = or i64 %529, %530
  %532 = or i64 %15, -3409103863469800891
  %533 = xor i64 %15, -1
  %534 = and i64 %533, -4899824248404247465
  %535 = and i64 %15, 4899824248404247464
  %536 = or i64 %534, %535
  %537 = xor i64 7831827747159440914, %536
  %538 = xor i64 %15, -1
  %539 = or i64 3409103863469800890, %538
  %540 = xor i64 %539, -1
  %541 = and i64 %540, -1
  %542 = or i64 %537, %541
  %543 = sext i32 %dispatcher1 to i64
  %544 = or i64 %543, -6821004925344679414
  %545 = xor i64 %543, -1
  %546 = and i64 %545, 1475843623048015237
  %547 = and i64 %543, -1475843623048015238
  %548 = or i64 %546, %547
  %549 = xor i64 -5391420235126499441, %548
  %550 = xor i64 %543, -1
  %551 = or i64 6821004925344679413, %550
  %552 = xor i64 %551, -1
  %553 = and i64 %552, -1
  %554 = or i64 %549, %553
  %555 = xor i64 %528, %532
  %556 = xor i64 %555, %554
  %557 = xor i64 %556, %531
  %558 = xor i64 %557, %542
  %559 = xor i64 %558, 2975429697230303619
  %560 = xor i64 %559, %544
  %561 = sext i32 %dispatcher1 to i64
  %562 = add i64 %561, -1390615915269206395
  %563 = xor i64 -1390615915269206395, %561
  %564 = and i64 -1390615915269206395, %561
  %565 = mul i64 2, %564
  %566 = add i64 %563, %565
  %567 = add i64 %5, 8968446500312278034
  %568 = and i64 8968446500312278034, %5
  %569 = or i64 8968446500312278034, %5
  %570 = add i64 %568, %569
  %571 = xor i64 %566, 6532651866055012225
  %572 = xor i64 %571, %567
  %573 = xor i64 %572, %562
  %574 = xor i64 %573, %570
  %575 = mul i64 %560, %574
  %576 = trunc i64 %575 to i8
  %577 = mul i8 %527, %576
  %578 = srem i8 %577, 2
  %579 = icmp eq i8 %578, 0
  %580 = mul i8 %484, %484
  %581 = sub i8 0, %484
  %582 = sub i8 %580, %581
  %583 = srem i8 %582, 2
  %584 = icmp eq i8 %583, 0
  %585 = and i1 %579, %584
  %586 = or i64 %13, 354756017613517034
  %587 = xor i64 %13, -1
  %588 = and i64 %587, -4598013524224104741
  %589 = and i64 %13, 4598013524224104740
  %590 = or i64 %588, %589
  %591 = xor i64 -4261307154991475151, %590
  %592 = xor i64 %13, -1
  %593 = or i64 -354756017613517035, %592
  %594 = xor i64 %593, -1
  %595 = and i64 %594, -1
  %596 = or i64 %591, %595
  %597 = sext i32 %2 to i64
  %598 = add i64 %597, 9180375481175090036
  %599 = sub i64 0, %597
  %600 = sub i64 9180375481175090036, %599
  %601 = xor i64 -2102057499153205057, %586
  %602 = xor i64 %601, %600
  %603 = xor i64 %602, %598
  %604 = xor i64 %603, %596
  %605 = and i64 %17, -5581406823598243241
  %606 = xor i64 %17, -1
  %607 = or i64 5581406823598243240, %606
  %608 = xor i64 %607, -1
  %609 = and i64 %608, -1
  %610 = add i64 %7, 3221404495327710999
  %611 = sub i64 0, %7
  %612 = add i64 -3221404495327710999, %611
  %613 = sub i64 0, %612
  %614 = xor i64 947331064995303813, %613
  %615 = xor i64 %614, %609
  %616 = xor i64 %615, %605
  %617 = xor i64 %616, %610
  %618 = mul i64 %604, %617
  %619 = trunc i64 %618 to i32
  %620 = select i1 %585, i32 595012129, i32 %619
  %621 = xor i32 %620, 26
  store i32 %621, i32* %4, align 4
  %622 = call i8** @bf777061424148142830(i32* %4)
  %623 = load i8*, i8** %622, align 8
  indirectbr i8* %623, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.2.extracted(i1 %0, i1 %1, i1 %2, i1* %.out13, i1 %.reload12, i1* %.out14, i1* %.out15, i1* %.out16, i1 %3, i1* %.out17, i1 %4, i1* %.out18, i1* %.out19, i1* %.out20, i1* %.out21, i1* %.out22, i1* %.out23, i1* %.out24, i1* %.out25, i1 %.reload18) #1 {
entry:
  %5 = alloca i32, align 4
  %6 = call i64 @h11804894491772278134(i64 595012114)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.2.extracted, %defaultSwitchBasicBlock), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012259)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.2.extracted, %BogusBasicBlock), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012275)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.2.extracted, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012253)
  %13 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %12
  store i8* blockaddress(@render.extracted.2.extracted, %.exitStub26.exitStub), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012162)
  %15 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %14
  store i8* blockaddress(@render.extracted.2.extracted, %loopStart), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012110)
  %17 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %16
  store i8* blockaddress(@render.extracted.2.extracted, %108), i8** %17, align 8
  %18 = call i64 @h11804894491772278134(i64 595012170)
  %19 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %18
  store i8* blockaddress(@render.extracted.2.extracted, %loopEnd), i8** %19, align 8
  %20 = call i64 @h11804894491772278134(i64 595012106)
  %21 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %20
  store i8* blockaddress(@render.extracted.2.extracted, %.exitStub.exitStub), i8** %21, align 8
  %lookupTable = alloca [9 x i32], align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %27, align 4
  %28 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %28, align 4
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %29, align 4
  %30 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %30, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012162, i32* %5, align 4
  %31 = call i8** @bf777061424148142830(i32* %5)
  %32 = load i8*, i8** %31, align 8
  indirectbr i8* %32, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %108
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub26.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %33 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %36 = load i32, i32* %35, align 4
  %37 = srem i32 %34, %36
  store i32 %37, i32* %dispatcher, align 4
  %38 = load i8*, i8** %17, align 8
  %39 = load i8, i8* %38, align 1
  %40 = add i64 %6, 120208316021806285
  %41 = sub i64 0, %6
  %42 = sub i64 120208316021806285, %41
  %43 = and i64 %8, 315126323667354981
  %44 = or i64 -315126323667354982, %8
  %45 = sub i64 %44, -315126323667354982
  %46 = xor i64 %45, -5933543256355140079
  %47 = xor i64 %46, %40
  %48 = xor i64 %47, %43
  %49 = xor i64 %48, %42
  %50 = and i64 %6, 5417066636002393249
  %51 = xor i64 %6, -1
  %52 = xor i64 5417066636002393249, %51
  %53 = and i64 %52, 5417066636002393249
  %54 = or i64 %14, 6656272837868274815
  %55 = and i64 6656272837868274815, %14
  %56 = xor i64 6656272837868274815, %14
  %57 = or i64 %55, %56
  %58 = xor i64 %54, %53
  %59 = xor i64 %58, %57
  %60 = xor i64 %59, %50
  %61 = xor i64 %60, -2058060955205089822
  %62 = mul i64 %49, %61
  %63 = trunc i64 %62 to i8
  %64 = mul i8 %39, %63
  %65 = mul i8 %39, 2
  %66 = add i8 2, %65
  %67 = mul i8 %64, %66
  %68 = srem i8 %67, 4
  %69 = icmp eq i8 %68, 0
  %70 = mul i8 %39, %39
  %71 = add i8 %70, %39
  %72 = srem i8 %71, 2
  %73 = add i64 %18, 1535878405894635843
  %74 = and i64 1535878405894635843, %18
  %75 = or i64 1535878405894635843, %18
  %76 = add i64 %74, %75
  %77 = add i64 %14, -3225440844412751763
  %78 = sub i64 0, %14
  %79 = sub i64 -3225440844412751763, %78
  %80 = add i64 %18, 6501420965720723803
  %81 = sub i64 0, %18
  %82 = sub i64 6501420965720723803, %81
  %83 = xor i64 %79, %82
  %84 = xor i64 %83, %77
  %85 = xor i64 %84, -6224163353225533457
  %86 = xor i64 %85, %80
  %87 = xor i64 %86, %76
  %88 = xor i64 %87, %73
  %89 = and i64 %20, -5431089264840866742
  %90 = or i64 5431089264840866741, %20
  %91 = sub i64 %90, 5431089264840866741
  %92 = and i64 %20, -3470914021930273630
  %93 = xor i64 %20, -1
  %94 = xor i64 -3470914021930273630, %93
  %95 = and i64 %94, -3470914021930273630
  %96 = xor i64 %95, %91
  %97 = xor i64 %96, %92
  %98 = xor i64 %97, 0
  %99 = xor i64 %98, %89
  %100 = mul i64 %88, %99
  %101 = trunc i64 %100 to i8
  %102 = icmp eq i8 %72, %101
  %103 = or i1 %69, %102
  %104 = select i1 %103, i32 595012170, i32 595012170
  %105 = xor i32 %104, 0
  store i32 %105, i32* %5, align 4
  %106 = call i8** @bf777061424148142830(i32* %5)
  %107 = load i8*, i8** %106, align 8
  indirectbr i8* %107, [label %loopEnd, label %EntryBasicBlockSplit]

108:                                              ; preds = %108, %loopStart
  %109 = xor i1 %0, true
  %110 = xor i1 %109, true
  %111 = or i1 %110, false
  %112 = xor i1 %111, true
  %113 = and i1 %112, true
  %114 = xor i1 %0, true
  %115 = or i1 %114, false
  %116 = xor i1 %0, true
  %117 = sub i1 %115, %116
  %118 = or i1 %113, %117
  %119 = xor i1 %1, %118
  %120 = xor i1 %2, true
  %121 = xor i1 %0, true
  %122 = or i1 %120, %121
  %123 = or i1 %122, true
  %124 = and i1 %122, true
  %125 = sub i1 %123, %124
  %126 = and i1 %125, true
  %127 = xor i1 %126, true
  %128 = and i1 %119, %127
  %129 = add i1 %128, %126
  store i1 %129, i1* %.out13, align 1
  %130 = or i1 %.reload12, %129
  store i1 %130, i1* %.out14, align 1
  %131 = xor i1 %.reload12, true
  %132 = and i64 %18, -3405936591788691894
  %133 = xor i64 %18, -1
  %134 = xor i64 -3405936591788691894, %133
  %135 = and i64 %134, -3405936591788691894
  %136 = add i64 %16, -8963932875980978829
  %137 = sub i64 0, %16
  %138 = add i64 8963932875980978829, %137
  %139 = sub i64 0, %138
  %140 = and i64 %20, -7702660508808660139
  %141 = xor i64 %20, -1
  %142 = or i64 7702660508808660138, %141
  %143 = xor i64 %142, -1
  %144 = and i64 %143, -1
  %145 = xor i64 %132, 1657562270059887959
  %146 = xor i64 %145, %136
  %147 = xor i64 %146, %140
  %148 = xor i64 %147, %135
  %149 = xor i64 %148, %139
  %150 = xor i64 %149, %144
  %151 = and i64 %6, 7064199774664047227
  %152 = or i64 -7064199774664047228, %6
  %153 = sub i64 %152, -7064199774664047228
  %154 = add i64 %20, -6351619430836169223
  %155 = sub i64 0, %20
  %156 = sub i64 -6351619430836169223, %155
  %157 = xor i64 %151, %156
  %158 = xor i64 %157, -2116893556907983257
  %159 = xor i64 %158, %154
  %160 = xor i64 %159, %153
  %161 = mul i64 %150, %160
  %162 = trunc i64 %161 to i1
  %163 = xor i1 %129, %162
  %164 = or i1 %131, %163
  %165 = xor i1 %164, true
  %166 = add i64 %20, -8851204530863476239
  %167 = sub i64 0, %20
  %168 = sub i64 -8851204530863476239, %167
  %169 = or i64 %14, -954338784172307642
  %170 = xor i64 %14, -1
  %171 = and i64 %170, 3691543459577057983
  %172 = and i64 %14, -3691543459577057984
  %173 = or i64 %171, %172
  %174 = xor i64 -4468838733234710023, %173
  %175 = xor i64 %14, -1
  %176 = or i64 954338784172307641, %175
  %177 = xor i64 %176, -1
  %178 = and i64 %177, -1
  %179 = or i64 %174, %178
  %180 = add i64 %18, 3163689982149337766
  %181 = sub i64 0, %18
  %182 = sub i64 3163689982149337766, %181
  %183 = xor i64 4571947623159406147, %179
  %184 = xor i64 %183, %166
  %185 = xor i64 %184, %182
  %186 = xor i64 %185, %169
  %187 = xor i64 %186, %168
  %188 = xor i64 %187, %180
  %189 = and i64 %10, -2066648733664743982
  %190 = or i64 2066648733664743981, %10
  %191 = sub i64 %190, 2066648733664743981
  %192 = and i64 %18, -8375039735331430911
  %193 = xor i64 %18, -1
  %194 = or i64 8375039735331430910, %193
  %195 = xor i64 %194, -1
  %196 = and i64 %195, -1
  %197 = add i64 %20, 7392823623955467944
  %198 = add i64 6487227792522083471, %20
  %199 = sub i64 %198, -905595831433384473
  %200 = xor i64 %197, %189
  %201 = xor i64 %200, %192
  %202 = xor i64 %201, %196
  %203 = xor i64 %202, %199
  %204 = xor i64 %203, %191
  %205 = xor i64 %204, 814886415537217131
  %206 = mul i64 %188, %205
  %207 = trunc i64 %206 to i1
  %208 = and i1 %165, %207
  store i1 %208, i1* %.out15, align 1
  %209 = add i1 %130, false
  %210 = sub i1 %209, %208
  %211 = sub i1 %210, false
  store i1 %211, i1* %.out16, align 1
  %212 = or i1 %3, true
  %213 = and i1 %3, true
  %214 = sub i1 %212, %213
  store i1 %214, i1* %.out17, align 1
  %215 = xor i1 %4, true
  store i1 %215, i1* %.out18, align 1
  %216 = or i1 %214, %215
  store i1 %216, i1* %.out19, align 1
  %217 = or i1 %216, true
  store i1 %217, i1* %.out20, align 1
  %218 = and i1 %216, true
  store i1 %218, i1* %.out21, align 1
  %219 = sub i1 %217, %218
  store i1 %219, i1* %.out22, align 1
  %220 = xor i1 %219, false
  store i1 %220, i1* %.out23, align 1
  %221 = add i64 %14, -8888432424171774332
  %222 = sub i64 0, %14
  %223 = add i64 8888432424171774332, %222
  %224 = sub i64 0, %223
  %225 = add i64 %16, 4045974958609553854
  %226 = xor i64 4045974958609553854, %16
  %227 = and i64 4045974958609553854, %16
  %228 = mul i64 2, %227
  %229 = add i64 %226, %228
  %230 = xor i64 -4690847680512969207, %221
  %231 = xor i64 %230, %224
  %232 = xor i64 %231, %229
  %233 = xor i64 %232, %225
  %234 = and i64 %16, 3765369437964932471
  %235 = xor i64 %16, -1
  %236 = or i64 -3765369437964932472, %235
  %237 = xor i64 %236, -1
  %238 = and i64 %237, -1
  %239 = or i64 %12, 1463867363362803034
  %240 = and i64 1463867363362803034, %12
  %241 = xor i64 1463867363362803034, %12
  %242 = or i64 %240, %241
  %243 = add i64 %12, 2249339147163155846
  %244 = add i64 -576511158314862470, %12
  %245 = add i64 %244, 2825850305478018316
  %246 = xor i64 -5873224929592002503, %234
  %247 = xor i64 %246, %239
  %248 = xor i64 %247, %245
  %249 = xor i64 %248, %238
  %250 = xor i64 %249, %243
  %251 = xor i64 %250, %242
  %252 = mul i64 %233, %251
  %253 = trunc i64 %252 to i1
  %254 = xor i1 %219, %253
  %255 = xor i1 %220, %254
  %256 = and i1 %255, %220
  store i1 %256, i1* %.out24, align 1
  %257 = add i64 %10, -2521716033325076574
  %258 = xor i64 -2521716033325076574, %10
  %259 = and i64 -2521716033325076574, %10
  %260 = mul i64 2, %259
  %261 = add i64 %258, %260
  %262 = or i64 %10, -1941693652304948447
  %263 = xor i64 %10, -1
  %264 = and i64 -1941693652304948447, %263
  %265 = add i64 %264, %10
  %266 = or i64 %6, 4617167792054070373
  %267 = xor i64 %6, -1
  %268 = and i64 4617167792054070373, %267
  %269 = add i64 %268, %6
  %270 = xor i64 %265, %262
  %271 = xor i64 %270, %257
  %272 = xor i64 %271, -1435642048224093263
  %273 = xor i64 %272, %269
  %274 = xor i64 %273, %261
  %275 = xor i64 %274, %266
  %276 = add i64 %10, 4734630462278409727
  %277 = sub i64 0, %10
  %278 = sub i64 4734630462278409727, %277
  %279 = or i64 %18, -8797529353446935044
  %280 = xor i64 %18, -1
  %281 = and i64 %280, 923264511077076092
  %282 = and i64 %18, -923264511077076093
  %283 = or i64 %281, %282
  %284 = xor i64 -8558812346514900608, %283
  %285 = xor i64 %18, -1
  %286 = or i64 8797529353446935043, %285
  %287 = xor i64 %286, -1
  %288 = and i64 %287, -1
  %289 = or i64 %284, %288
  %290 = add i64 %8, -723065956165753866
  %291 = sub i64 0, %8
  %292 = add i64 723065956165753866, %291
  %293 = sub i64 0, %292
  %294 = xor i64 6211280647751093585, %289
  %295 = xor i64 %294, %279
  %296 = xor i64 %295, %278
  %297 = xor i64 %296, %293
  %298 = xor i64 %297, %290
  %299 = xor i64 %298, %276
  %300 = mul i64 %275, %299
  %301 = trunc i64 %300 to i1
  %302 = xor i1 %256, %301
  %303 = and i1 %211, %302
  %304 = add i1 %303, %256
  store i1 %304, i1* %.out25, align 1
  %305 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %308 = load i32, i32* %307, align 4
  %309 = srem i32 %306, %308
  %310 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %311 = load i32, i32* %310, align 4
  %312 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %313 = load i32, i32* %312, align 4
  %314 = srem i32 %311, %313
  %315 = select i1 %.reload18, i32 %309, i32 %314
  store i32 %315, i32* %dispatcher, align 4
  %316 = load i8*, i8** %9, align 8
  %317 = load i8, i8* %316, align 1
  %318 = mul i8 %317, %317
  %319 = add i8 %318, %317
  %320 = and i64 %6, 2345588795553723896
  %321 = xor i64 %6, -1
  %322 = or i64 -2345588795553723897, %321
  %323 = xor i64 %322, -1
  %324 = and i64 %323, -1
  %325 = add i64 %12, -3156413315190237409
  %326 = sub i64 0, %12
  %327 = sub i64 -3156413315190237409, %326
  %328 = xor i64 %324, %320
  %329 = xor i64 %328, %327
  %330 = xor i64 %329, %325
  %331 = xor i64 %330, 8015140439745231573
  %332 = or i64 %20, 8867878208893834546
  %333 = xor i64 %20, -1
  %334 = and i64 %333, 4796199561256681928
  %335 = and i64 %20, -4796199561256681929
  %336 = or i64 %334, %335
  %337 = xor i64 4151912216584361210, %336
  %338 = xor i64 %20, -1
  %339 = or i64 -8867878208893834547, %338
  %340 = xor i64 %339, -1
  %341 = and i64 %340, -1
  %342 = or i64 %337, %341
  %343 = and i64 %12, 4757870427356912200
  %344 = xor i64 %12, -1
  %345 = xor i64 4757870427356912200, %344
  %346 = and i64 %345, 4757870427356912200
  %347 = xor i64 %346, -9204620366145107081
  %348 = xor i64 %347, %332
  %349 = xor i64 %348, %342
  %350 = xor i64 %349, %343
  %351 = mul i64 %331, %350
  %352 = trunc i64 %351 to i8
  %353 = mul i8 %319, %352
  %354 = srem i8 %353, 2
  %355 = icmp eq i8 %354, 0
  %356 = mul i8 %317, %317
  %357 = or i64 %12, -190853098611015328
  %358 = xor i64 %12, -1
  %359 = and i64 -190853098611015328, %358
  %360 = add i64 %359, %12
  %361 = and i64 %8, -6139606436945655482
  %362 = xor i64 %8, -1
  %363 = or i64 6139606436945655481, %362
  %364 = xor i64 %363, -1
  %365 = and i64 %364, -1
  %366 = xor i64 -9168540648911450103, %360
  %367 = xor i64 %366, %361
  %368 = xor i64 %367, %357
  %369 = xor i64 %368, %365
  %370 = or i64 %6, -4293233053863784380
  %371 = xor i64 %6, -1
  %372 = and i64 -4293233053863784380, %371
  %373 = add i64 %372, %6
  %374 = and i64 %10, -7858318540119839211
  %375 = or i64 7858318540119839210, %10
  %376 = sub i64 %375, 7858318540119839210
  %377 = add i64 %12, 7286106230446245777
  %378 = add i64 8718678944367895618, %12
  %379 = sub i64 %378, 1432572713921649841
  %380 = xor i64 0, %374
  %381 = xor i64 %380, %379
  %382 = xor i64 %381, %373
  %383 = xor i64 %382, %376
  %384 = xor i64 %383, %370
  %385 = xor i64 %384, %377
  %386 = mul i64 %369, %385
  %387 = trunc i64 %386 to i8
  %388 = sub i8 %387, %356
  %389 = sub i8 0, %317
  %390 = add i8 %388, %389
  %391 = sub i8 0, %390
  %392 = srem i8 %391, 2
  %393 = icmp eq i8 %392, 0
  %394 = and i1 %355, %393
  %395 = select i1 %394, i32 595012259, i32 595012170
  %396 = xor i32 %395, 233
  store i32 %396, i32* %5, align 4
  %397 = call i8** @bf777061424148142830(i32* %5)
  %398 = load i8*, i8** %397, align 8
  indirectbr i8* %398, [label %loopEnd, label %108]

.exitStub.exitStub:                               ; preds = %loopStart
  %399 = add i64 %20, 2840301374206510406
  %400 = sub i64 0, %20
  %401 = add i64 -2840301374206510406, %400
  %402 = sub i64 0, %401
  %403 = and i64 %20, -55382577672495638
  %404 = or i64 55382577672495637, %20
  %405 = sub i64 %404, 55382577672495637
  %406 = xor i64 %405, %399
  %407 = xor i64 %406, 5660807127958701061
  %408 = xor i64 %407, %402
  %409 = xor i64 %408, %403
  %410 = add i64 %6, 5619723693930209839
  %411 = add i64 -7847122543883327783, %6
  %412 = sub i64 %411, 4979897835896013994
  %413 = add i64 %20, -7361594953832094466
  %414 = sub i64 0, %20
  %415 = sub i64 -7361594953832094466, %414
  %416 = xor i64 %410, -4308745246602696499
  %417 = xor i64 %416, %413
  %418 = xor i64 %417, %412
  %419 = xor i64 %418, %415
  %420 = mul i64 %409, %419
  %421 = trunc i64 %420 to i1
  ret i1 %421

.exitStub26.exitStub:                             ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %422 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %422, align 4
  %423 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %423, align 4
  %424 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %424, align 4
  %425 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %425, align 4
  %426 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %426, align 4
  %427 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %428 = load i32, i32* %427, align 4
  store i32 %428, i32* %dispatcher, align 4
  %429 = load i8*, i8** %7, align 8
  %430 = load i8, i8* %429, align 1
  %431 = and i8 %430, 1
  %432 = add i64 %20, 9158914752413891645
  %433 = sub i64 0, %20
  %434 = add i64 -9158914752413891645, %433
  %435 = sub i64 0, %434
  %436 = or i64 %6, -2138458182863168060
  %437 = and i64 -2138458182863168060, %6
  %438 = xor i64 -2138458182863168060, %6
  %439 = or i64 %437, %438
  %440 = sext i32 %dispatcher1 to i64
  %441 = or i64 %440, 4204990771373903511
  %442 = and i64 4204990771373903511, %440
  %443 = xor i64 4204990771373903511, %440
  %444 = or i64 %442, %443
  %445 = xor i64 %435, %436
  %446 = xor i64 %445, %432
  %447 = xor i64 %446, %439
  %448 = xor i64 %447, 4672437233666170753
  %449 = xor i64 %448, %441
  %450 = xor i64 %449, %444
  %451 = or i64 %6, -8919444166432121282
  %452 = xor i64 %6, -1
  %453 = and i64 %452, 8042656327749469549
  %454 = and i64 %6, -8042656327749469550
  %455 = or i64 %453, %454
  %456 = xor i64 -1465211837452903597, %455
  %457 = xor i64 %6, -1
  %458 = or i64 8919444166432121281, %457
  %459 = xor i64 %458, -1
  %460 = and i64 %459, -1
  %461 = or i64 %456, %460
  %462 = and i64 %18, 3754486499672400744
  %463 = or i64 -3754486499672400745, %18
  %464 = sub i64 %463, -3754486499672400745
  %465 = add i64 %18, -4865216344468122912
  %466 = and i64 -4865216344468122912, %18
  %467 = or i64 -4865216344468122912, %18
  %468 = add i64 %466, %467
  %469 = xor i64 %451, %464
  %470 = xor i64 %469, %465
  %471 = xor i64 %470, %461
  %472 = xor i64 %471, %468
  %473 = xor i64 %472, %462
  %474 = xor i64 %473, 9026680697930457217
  %475 = mul i64 %450, %474
  %476 = trunc i64 %475 to i8
  %477 = icmp eq i8 %431, %476
  %478 = mul i8 %430, %430
  %479 = add i8 %478, %430
  %480 = srem i8 %479, 2
  %481 = icmp eq i8 %480, 0
  %482 = or i1 %477, %481
  %483 = select i1 %482, i32 595012106, i32 595012275
  %484 = xor i32 %483, 185
  store i32 %484, i32* %5, align 4
  %485 = call i8** @bf777061424148142830(i32* %5)
  %486 = load i8*, i8** %485, align 8
  indirectbr i8* %486, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %487 = load i8*, i8** %11, align 8
  %488 = load i8, i8* %487, align 1
  %489 = and i64 %10, -6991027664050983101
  %490 = or i64 6991027664050983100, %10
  %491 = sub i64 %490, 6991027664050983100
  %492 = and i64 %16, -8732910766477289319
  %493 = xor i64 %16, -1
  %494 = or i64 8732910766477289318, %493
  %495 = xor i64 %494, -1
  %496 = and i64 %495, -1
  %497 = xor i64 -3300215245177028699, %491
  %498 = xor i64 %497, %496
  %499 = xor i64 %498, %489
  %500 = xor i64 %499, %492
  %501 = or i64 %16, 8361806985434633245
  %502 = xor i64 %16, -1
  %503 = and i64 8361806985434633245, %502
  %504 = add i64 %503, %16
  %505 = or i64 %16, -4789745538409222189
  %506 = and i64 -4789745538409222189, %16
  %507 = xor i64 -4789745538409222189, %16
  %508 = or i64 %506, %507
  %509 = or i64 %18, -2468110016165220344
  %510 = and i64 -2468110016165220344, %18
  %511 = xor i64 -2468110016165220344, %18
  %512 = or i64 %510, %511
  %513 = xor i64 %512, %509
  %514 = xor i64 %513, %504
  %515 = xor i64 %514, %505
  %516 = xor i64 %515, %501
  %517 = xor i64 %516, 8907973787452297261
  %518 = xor i64 %517, %508
  %519 = mul i64 %500, %518
  %520 = trunc i64 %519 to i8
  %521 = and i8 %488, %520
  %522 = icmp eq i8 %521, 0
  %523 = mul i8 %488, %488
  %524 = add i8 %523, %488
  %525 = mul i8 %524, 3
  %526 = srem i8 %525, 2
  %527 = icmp eq i8 %526, 0
  %528 = or i1 %522, %527
  %529 = select i1 %528, i32 595012162, i32 595012170
  %530 = xor i32 %529, 8
  store i32 %530, i32* %5, align 4
  %531 = call i8** @bf777061424148142830(i32* %5)
  %532 = load i8*, i8** %531, align 8
  indirectbr i8* %532, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %108, %EntryBasicBlockSplit
  %533 = load i8*, i8** %19, align 8
  %534 = load i8, i8* %533, align 1
  %535 = mul i8 %534, 2
  %536 = mul i8 %534, 2
  %537 = xor i8 2, %536
  %538 = and i8 2, %536
  %539 = mul i8 2, %538
  %540 = add i8 %537, %539
  %541 = mul i8 39, %540
  %542 = add i8 23, %541
  %543 = mul i8 -105, %542
  %544 = add i8 111, %543
  %545 = mul i8 %535, %544
  %546 = srem i8 %545, 4
  %547 = icmp eq i8 %546, 0
  %548 = mul i8 %534, %534
  %549 = add i8 %548, %534
  %550 = srem i8 %549, 2
  %551 = icmp eq i8 %550, 0
  %552 = or i1 %547, %551
  %553 = select i1 %552, i32 595012275, i32 595012162
  %554 = xor i32 %553, 241
  store i32 %554, i32* %5, align 4
  %555 = call i8** @bf777061424148142830(i32* %5)
  %556 = load i8*, i8** %555, align 8
  indirectbr i8* %556, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @render.extracted.3.extracted(i1 %0, i1* %.out21, i1 %1, i1* %.out22, i1* %.out23, i1* %.out24, i1 %2, i1* %.out25) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h11804894491772278134(i64 595012221)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.3.extracted, %.exitStub.exitStub), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012102)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.3.extracted, %"2"), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012106)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.3.extracted, %EntryBasicBlockSplit), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012255)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.3.extracted, %BogusBasciBlock), i8** %11, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.3.extracted, %BogusBasciBlock), i8** %12, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %13, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.3.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %14, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.3.extracted, %"2"), i8** %.reload5, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %15, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.3.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %17 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.3.extracted, %"2"), i8** %17, align 8
  %18 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.3.extracted, %.exitStub.exitStub), i8** %18, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %19 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %19, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %20 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %20, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 %0, i1* %.out21, align 1
  %21 = sub i1 %1, %0
  store i1 %21, i1* %.out22, align 1
  %22 = xor i1 %21, true
  %23 = xor i1 %22, true
  store i1 %23, i1* %.out23, align 1
  %24 = and i1 %23, %21
  store i1 %24, i1* %.out24, align 1
  %25 = xor i1 %2, true
  %26 = and i1 %25, false
  %27 = and i1 %2, true
  %28 = or i1 %26, %27
  %29 = xor i1 %24, true
  %30 = and i1 %29, false
  %31 = and i1 %24, true
  %32 = or i1 %30, %31
  %33 = xor i1 %28, %32
  %34 = xor i1 %2, true
  %35 = xor i1 %24, true
  %36 = or i1 %34, %35
  %37 = or i64 %10, 5065648224211033290
  %38 = and i64 5065648224211033290, %10
  %39 = xor i64 5065648224211033290, %10
  %40 = or i64 %38, %39
  %41 = or i64 %8, 2010802012481462636
  %42 = xor i64 %8, -1
  %43 = and i64 2010802012481462636, %42
  %44 = add i64 %43, %8
  %45 = add i64 %6, 5993641410114647199
  %46 = add i64 -7351179792960755792, %6
  %47 = sub i64 %46, 5101922870634148625
  %48 = xor i64 4627053897913202233, %37
  %49 = xor i64 %48, %44
  %50 = xor i64 %49, %40
  %51 = xor i64 %50, %45
  %52 = xor i64 %51, %47
  %53 = xor i64 %52, %41
  %54 = add i64 %6, 2968898161044665447
  %55 = xor i64 2968898161044665447, %6
  %56 = and i64 2968898161044665447, %6
  %57 = mul i64 2, %56
  %58 = add i64 %55, %57
  %59 = and i64 %10, 4731331150423536009
  %60 = xor i64 %10, -1
  %61 = xor i64 4731331150423536009, %60
  %62 = and i64 %61, 4731331150423536009
  %63 = or i64 %4, -7099344998764058321
  %64 = xor i64 %4, -1
  %65 = and i64 -7099344998764058321, %64
  %66 = add i64 %65, %4
  %67 = xor i64 %63, %54
  %68 = xor i64 %67, %66
  %69 = xor i64 %68, %62
  %70 = xor i64 %69, %58
  %71 = xor i64 %70, %59
  %72 = xor i64 %71, -8809573411609176055
  %73 = mul i64 %53, %72
  %74 = trunc i64 %73 to i1
  %75 = xor i1 %36, %74
  %76 = and i1 %75, true
  %77 = or i1 %33, %76
  store i1 %77, i1* %.out25, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %78 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %78, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.5.extracted(i64 %0) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012175)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.5.extracted, %loopEnd), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012198)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.5.extracted, %defaultSwitchBasicBlock), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012261)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.5.extracted, %BogusBasicBlock), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012239)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.5.extracted, %loopStart), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012214)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.5.extracted, %.exitStub1.exitStub), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012190)
  %13 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %12
  store i8* blockaddress(@render.extracted.5.extracted, %EntryBasicBlockSplit), i8** %13, align 8
  %14 = add i64 %0, 8704950164710995259
  %15 = sub i64 0, %0
  %16 = add i64 -8704950164710995259, %15
  %17 = sub i64 0, %16
  %18 = and i64 %0, -8870949379467418139
  %19 = or i64 8870949379467418138, %0
  %20 = sub i64 %19, 8870949379467418138
  %21 = xor i64 -1661762571360746357, %14
  %22 = xor i64 %21, %20
  %23 = xor i64 %22, %18
  %24 = xor i64 %23, %17
  %25 = or i64 %0, 6113482852527918041
  %26 = xor i64 %0, -1
  %27 = and i64 6113482852527918041, %26
  %28 = add i64 %27, %0
  %29 = add i64 %0, -8291046321986982519
  %30 = sub i64 0, %0
  %31 = sub i64 -8291046321986982519, %30
  %32 = xor i64 %31, %29
  %33 = xor i64 %32, %28
  %34 = xor i64 %33, %25
  %35 = xor i64 %34, -599857035959198384
  %36 = mul i64 %24, %35
  %37 = call i64 @h11804894491772278134(i64 %36)
  %38 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %37
  store i8* blockaddress(@render.extracted.5.extracted, %.exitStub.exitStub), i8** %38, align 8
  %39 = call i64 @h11804894491772278134(i64 595012167)
  %40 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %39
  store i8* blockaddress(@render.extracted.5.extracted, %179), i8** %40, align 8
  %lookupTable = alloca [9 x i32], align 4
  %41 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %41, align 4
  %42 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %42, align 4
  %43 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %43, align 4
  %44 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %45, align 4
  %46 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %46, align 4
  %47 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %47, align 4
  %48 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %48, align 4
  %49 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %49, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012239, i32* %1, align 4
  %50 = call i8** @bf777061424148142830(i32* %1)
  %51 = load i8*, i8** %50, align 8
  indirectbr i8* %51, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %179
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub1.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %52 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  %55 = load i32, i32* %54, align 4
  %56 = sub i32 %53, %55
  store i32 %56, i32* %dispatcher, align 4
  %57 = load i8*, i8** %40, align 8
  %58 = load i8, i8* %57, align 1
  %59 = mul i8 %58, 2
  %60 = mul i8 %58, 2
  %61 = add i8 44, %60
  %62 = add i8 %61, -42
  %63 = mul i8 %59, %62
  %64 = sext i32 %dispatcher1 to i64
  %65 = or i64 %64, -244561780711038936
  %66 = xor i64 %64, -1
  %67 = and i64 -244561780711038936, %66
  %68 = add i64 %67, %64
  %69 = or i64 %0, 2563844730307025635
  %70 = xor i64 %0, -1
  %71 = and i64 %70, 8192634581873887426
  %72 = and i64 %0, -8192634581873887427
  %73 = or i64 %71, %72
  %74 = xor i64 5919575492743762465, %73
  %75 = xor i64 %0, -1
  %76 = or i64 -2563844730307025636, %75
  %77 = xor i64 %76, -1
  %78 = and i64 %77, -1
  %79 = or i64 %74, %78
  %80 = xor i64 -5183649090769554455, %79
  %81 = xor i64 %80, %69
  %82 = xor i64 %81, %65
  %83 = xor i64 %82, %68
  %84 = or i64 %4, 640568859613246820
  %85 = xor i64 %4, -1
  %86 = and i64 640568859613246820, %85
  %87 = add i64 %86, %4
  %88 = or i64 %0, 8211297871717915966
  %89 = xor i64 %0, -1
  %90 = and i64 8211297871717915966, %89
  %91 = add i64 %90, %0
  %92 = xor i64 8583378921898791268, %91
  %93 = xor i64 %92, %88
  %94 = xor i64 %93, %84
  %95 = xor i64 %94, %87
  %96 = mul i64 %83, %95
  %97 = trunc i64 %96 to i8
  %98 = srem i8 %63, %97
  %99 = icmp eq i8 %98, 0
  %100 = mul i8 %58, %58
  %101 = mul i8 %100, %58
  %102 = add i8 %101, %58
  %103 = srem i8 %102, 2
  %104 = icmp eq i8 %103, 0
  %105 = or i64 %37, 8869915614715276293
  %106 = xor i64 %37, -1
  %107 = and i64 8869915614715276293, %106
  %108 = add i64 %107, %37
  %109 = and i64 %10, 6702618461731923276
  %110 = xor i64 %10, -1
  %111 = or i64 -6702618461731923277, %110
  %112 = xor i64 %111, -1
  %113 = and i64 %112, -1
  %114 = or i64 %10, 6510218056707953489
  %115 = and i64 6510218056707953489, %10
  %116 = xor i64 6510218056707953489, %10
  %117 = or i64 %115, %116
  %118 = xor i64 %109, %117
  %119 = xor i64 %118, -3571793058550781979
  %120 = xor i64 %119, %105
  %121 = xor i64 %120, %113
  %122 = xor i64 %121, %108
  %123 = xor i64 %122, %114
  %124 = add i64 %4, 9150392075408540515
  %125 = add i64 -7059310360093502715, %4
  %126 = add i64 %125, -2237041638207508386
  %127 = or i64 %39, -4262645846062474111
  %128 = and i64 -4262645846062474111, %39
  %129 = xor i64 -4262645846062474111, %39
  %130 = or i64 %128, %129
  %131 = xor i64 %127, 1498984243384417773
  %132 = xor i64 %131, %126
  %133 = xor i64 %132, %130
  %134 = xor i64 %133, %124
  %135 = mul i64 %123, %134
  %136 = trunc i64 %135 to i1
  %137 = xor i1 %99, %136
  %138 = xor i1 %104, true
  %139 = or i1 %137, %138
  %140 = xor i1 %139, true
  %141 = and i1 %140, true
  %142 = select i1 %141, i32 595012261, i32 595012175
  %143 = or i64 %0, 417124557770611871
  %144 = xor i64 %0, -1
  %145 = and i64 417124557770611871, %144
  %146 = add i64 %145, %0
  %147 = add i64 %0, -4901242142635774464
  %148 = sub i64 0, %0
  %149 = add i64 4901242142635774464, %148
  %150 = sub i64 0, %149
  %151 = and i64 %12, 7141959689292781613
  %152 = xor i64 %12, -1
  %153 = or i64 -7141959689292781614, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = xor i64 %150, %147
  %157 = xor i64 %156, 2242561634512994305
  %158 = xor i64 %157, %146
  %159 = xor i64 %158, %155
  %160 = xor i64 %159, %143
  %161 = xor i64 %160, %151
  %162 = and i64 %12, 7878380094901223935
  %163 = xor i64 %12, -1
  %164 = xor i64 7878380094901223935, %163
  %165 = and i64 %164, 7878380094901223935
  %166 = add i64 %2, 5724765773739206984
  %167 = sub i64 0, %2
  %168 = add i64 -5724765773739206984, %167
  %169 = sub i64 0, %168
  %170 = xor i64 %169, %165
  %171 = xor i64 %170, %166
  %172 = xor i64 %171, -5365197041616682774
  %173 = xor i64 %172, %162
  %174 = mul i64 %161, %173
  %175 = trunc i64 %174 to i32
  %176 = xor i32 %142, %175
  store i32 %176, i32* %1, align 4
  %177 = call i8** @bf777061424148142830(i32* %1)
  %178 = load i8*, i8** %177, align 8
  indirectbr i8* %178, [label %loopEnd, label %EntryBasicBlockSplit]

179:                                              ; preds = %179, %loopStart
  %180 = srem i64 %0, 2
  %181 = icmp eq i64 %180, 0
  %182 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %185 = load i32, i32* %184, align 4
  %186 = srem i32 %183, %185
  %187 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %190 = load i32, i32* %189, align 4
  %191 = srem i32 %188, %190
  %192 = select i1 %181, i32 %186, i32 %191
  store i32 %192, i32* %dispatcher, align 4
  %193 = load i8*, i8** %38, align 8
  %194 = load i8, i8* %193, align 1
  %195 = mul i8 %194, 2
  %196 = mul i8 %194, 2
  %197 = add i8 2, %196
  %198 = mul i8 %195, %197
  %199 = srem i8 %198, 4
  %200 = icmp eq i8 %199, 0
  %201 = mul i8 %194, %194
  %202 = add i8 %201, %194
  %203 = srem i8 %202, 2
  %204 = icmp eq i8 %203, 0
  %205 = and i64 %37, -3937479445812075877
  %206 = or i64 3937479445812075876, %37
  %207 = sub i64 %206, 3937479445812075876
  %208 = sext i32 %dispatcher1 to i64
  %209 = add i64 %208, -4768286771321955909
  %210 = xor i64 -4768286771321955909, %208
  %211 = and i64 -4768286771321955909, %208
  %212 = mul i64 2, %211
  %213 = add i64 %210, %212
  %214 = xor i64 %205, %207
  %215 = xor i64 %214, %209
  %216 = xor i64 %215, %213
  %217 = xor i64 %216, -7427149604393166543
  %218 = or i64 %6, -7798327913002046479
  %219 = xor i64 %6, -1
  %220 = and i64 %219, 8679734482896204654
  %221 = and i64 %6, -8679734482896204655
  %222 = or i64 %220, %221
  %223 = xor i64 -1463007341757376353, %222
  %224 = xor i64 %6, -1
  %225 = or i64 7798327913002046478, %224
  %226 = xor i64 %225, -1
  %227 = and i64 %226, -1
  %228 = or i64 %223, %227
  %229 = add i64 %2, -494661845105374794
  %230 = add i64 4070426452804710921, %2
  %231 = sub i64 %230, 4565088297910085715
  %232 = xor i64 %229, -4043664272095944751
  %233 = xor i64 %232, %231
  %234 = xor i64 %233, %228
  %235 = xor i64 %234, %218
  %236 = mul i64 %217, %235
  %237 = trunc i64 %236 to i1
  %238 = xor i1 %200, %237
  %239 = xor i1 %204, true
  %240 = or i1 %238, %239
  %241 = xor i1 %240, true
  %242 = and i1 %241, true
  %243 = select i1 %242, i32 595012175, i32 595012175
  %244 = xor i32 %243, 0
  store i32 %244, i32* %1, align 4
  %245 = call i8** @bf777061424148142830(i32* %1)
  %246 = load i8*, i8** %245, align 8
  indirectbr i8* %246, [label %loopEnd, label %179]

.exitStub.exitStub:                               ; preds = %loopStart
  %247 = and i64 %12, 2102998599909592430
  %248 = xor i64 %12, -1
  %249 = xor i64 2102998599909592430, %248
  %250 = and i64 %249, 2102998599909592430
  %251 = add i64 %10, -7540738734691077802
  %252 = add i64 -8141283418696257995, %10
  %253 = add i64 %252, 600544684005180193
  %254 = or i64 %39, -3447618728777292051
  %255 = and i64 -3447618728777292051, %39
  %256 = xor i64 -3447618728777292051, %39
  %257 = or i64 %255, %256
  %258 = xor i64 %257, -6414548635168862719
  %259 = xor i64 %258, %253
  %260 = xor i64 %259, %250
  %261 = xor i64 %260, %254
  %262 = xor i64 %261, %247
  %263 = xor i64 %262, %251
  %264 = and i64 %12, 5157541583542424461
  %265 = or i64 -5157541583542424462, %12
  %266 = sub i64 %265, -5157541583542424462
  %267 = or i64 %2, -5123590629369537615
  %268 = xor i64 %2, -1
  %269 = and i64 -5123590629369537615, %268
  %270 = add i64 %269, %2
  %271 = and i64 %39, 80516929656652996
  %272 = xor i64 %39, -1
  %273 = or i64 -80516929656652997, %272
  %274 = xor i64 %273, -1
  %275 = and i64 %274, -1
  %276 = xor i64 8487242860095664641, %266
  %277 = xor i64 %276, %275
  %278 = xor i64 %277, %267
  %279 = xor i64 %278, %271
  %280 = xor i64 %279, %270
  %281 = xor i64 %280, %264
  %282 = mul i64 %263, %281
  %283 = trunc i64 %282 to i1
  ret i1 %283

.exitStub1.exitStub:                              ; preds = %loopStart
  %284 = add i64 %4, -5277624410552170132
  %285 = and i64 -5277624410552170132, %4
  %286 = or i64 -5277624410552170132, %4
  %287 = add i64 %285, %286
  %288 = or i64 %39, 4544348563462549657
  %289 = xor i64 %39, -1
  %290 = and i64 4544348563462549657, %289
  %291 = add i64 %290, %39
  %292 = add i64 %37, -1028128740981101283
  %293 = sub i64 0, %37
  %294 = sub i64 -1028128740981101283, %293
  %295 = xor i64 %287, %288
  %296 = xor i64 %295, %292
  %297 = xor i64 %296, 4050354117044312441
  %298 = xor i64 %297, %284
  %299 = xor i64 %298, %294
  %300 = xor i64 %299, %291
  %301 = add i64 %39, 5338254141003105562
  %302 = add i64 1593779191789727606, %39
  %303 = add i64 %302, 3744474949213377956
  %304 = or i64 %37, 3809156012988821465
  %305 = xor i64 %37, -1
  %306 = and i64 %305, 5217126229673234248
  %307 = and i64 %37, -5217126229673234249
  %308 = or i64 %306, %307
  %309 = xor i64 8987535160840167569, %308
  %310 = xor i64 %37, -1
  %311 = or i64 -3809156012988821466, %310
  %312 = xor i64 %311, -1
  %313 = and i64 %312, -1
  %314 = or i64 %309, %313
  %315 = or i64 %6, 8845594672661227479
  %316 = and i64 8845594672661227479, %6
  %317 = xor i64 8845594672661227479, %6
  %318 = or i64 %316, %317
  %319 = xor i64 %303, 0
  %320 = xor i64 %319, %314
  %321 = xor i64 %320, %315
  %322 = xor i64 %321, %301
  %323 = xor i64 %322, %318
  %324 = xor i64 %323, %304
  %325 = mul i64 %300, %324
  %326 = trunc i64 %325 to i1
  ret i1 %326

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %327 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %327, align 4
  %328 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %328, align 4
  %329 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %329, align 4
  %330 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %330, align 4
  %331 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %331, align 4
  %332 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %333 = load i32, i32* %332, align 4
  store i32 %333, i32* %dispatcher, align 4
  %334 = load i8*, i8** %3, align 8
  %335 = load i8, i8* %334, align 1
  %336 = mul i8 %335, %335
  %337 = add i8 %336, %335
  %338 = mul i8 %337, 3
  %339 = srem i8 %338, 2
  %340 = icmp eq i8 %339, 0
  %341 = mul i8 %335, %335
  %342 = add i8 %341, %335
  %343 = srem i8 %342, 2
  %344 = icmp eq i8 %343, 0
  %345 = and i1 %340, %344
  %346 = select i1 %345, i32 595012239, i32 595012190
  %347 = or i64 %37, 7443592238091288616
  %348 = xor i64 %37, -1
  %349 = and i64 %348, -6959731152494527790
  %350 = and i64 %37, 6959731152494527789
  %351 = or i64 %349, %350
  %352 = xor i64 -565515285862368518, %351
  %353 = xor i64 %37, -1
  %354 = or i64 -7443592238091288617, %353
  %355 = xor i64 %354, -1
  %356 = and i64 %355, -1
  %357 = or i64 %352, %356
  %358 = sext i32 %dispatcher1 to i64
  %359 = and i64 %358, 6477195536287699512
  %360 = xor i64 %358, -1
  %361 = xor i64 6477195536287699512, %360
  %362 = and i64 %361, 6477195536287699512
  %363 = xor i64 %359, %362
  %364 = xor i64 %363, %357
  %365 = xor i64 %364, -5002843073744265769
  %366 = xor i64 %365, %347
  %367 = add i64 %12, -7229963259331273161
  %368 = sub i64 0, %12
  %369 = sub i64 -7229963259331273161, %368
  %370 = and i64 %2, 3107334209312186755
  %371 = or i64 -3107334209312186756, %2
  %372 = sub i64 %371, -3107334209312186756
  %373 = and i64 %12, -4207384795488542907
  %374 = or i64 4207384795488542906, %12
  %375 = sub i64 %374, 4207384795488542906
  %376 = xor i64 %372, %370
  %377 = xor i64 %376, %373
  %378 = xor i64 %377, %367
  %379 = xor i64 %378, -5710842154137429479
  %380 = xor i64 %379, %369
  %381 = xor i64 %380, %375
  %382 = mul i64 %366, %381
  %383 = trunc i64 %382 to i32
  %384 = xor i32 %346, %383
  %385 = and i32 %384, 332672929
  %386 = and i32 %346, -332672930
  %387 = or i32 %385, %386
  %388 = xor i32 %387, 332672880
  store i32 %388, i32* %1, align 4
  %389 = call i8** @bf777061424148142830(i32* %1)
  %390 = load i8*, i8** %389, align 8
  indirectbr i8* %390, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %391 = load i8*, i8** %38, align 8
  %392 = load i8, i8* %391, align 1
  %393 = mul i8 %392, %392
  %394 = xor i8 %393, %392
  %395 = and i8 %393, %392
  %396 = mul i8 2, %395
  %397 = add i8 %394, %396
  %398 = mul i8 39, %397
  %399 = add i8 23, %398
  %400 = mul i8 -105, %399
  %401 = add i8 111, %400
  %402 = mul i8 %401, 3
  %403 = srem i8 %402, 2
  %404 = or i64 %4, -173732025062433116
  %405 = and i64 -173732025062433116, %4
  %406 = xor i64 -173732025062433116, %4
  %407 = or i64 %405, %406
  %408 = add i64 %39, -2597865965383806987
  %409 = add i64 -7380729148736767095, %39
  %410 = add i64 %409, 4782863183352960108
  %411 = xor i64 %408, -32891340610061375
  %412 = xor i64 %411, %410
  %413 = xor i64 %412, %404
  %414 = xor i64 %413, %407
  %415 = sext i32 %dispatcher1 to i64
  %416 = add i64 %415, -6708079817085480183
  %417 = and i64 -6708079817085480183, %415
  %418 = or i64 -6708079817085480183, %415
  %419 = add i64 %417, %418
  %420 = add i64 %12, 2812499883858117184
  %421 = add i64 -7569749481953834209, %12
  %422 = add i64 %421, -8064494707897600223
  %423 = add i64 %37, -7135472133963669004
  %424 = add i64 -7891483101709793815, %37
  %425 = sub i64 %424, -756010967746124811
  %426 = xor i64 0, %425
  %427 = xor i64 %426, %420
  %428 = xor i64 %427, %419
  %429 = xor i64 %428, %422
  %430 = xor i64 %429, %416
  %431 = xor i64 %430, %423
  %432 = mul i64 %414, %431
  %433 = trunc i64 %432 to i8
  %434 = icmp eq i8 %403, %433
  %435 = mul i8 %392, %392
  %436 = add i8 %435, %392
  %437 = srem i8 %436, 2
  %438 = icmp eq i8 %437, 0
  %439 = and i1 %434, %438
  %440 = sext i32 %dispatcher1 to i64
  %441 = add i64 %440, -6261317411602853096
  %442 = sub i64 0, %440
  %443 = add i64 6261317411602853096, %442
  %444 = sub i64 0, %443
  %445 = or i64 %39, -1201894063159297327
  %446 = xor i64 %39, -1
  %447 = and i64 -1201894063159297327, %446
  %448 = add i64 %447, %39
  %449 = xor i64 %441, %448
  %450 = xor i64 %449, %445
  %451 = xor i64 %450, -998193182379151635
  %452 = xor i64 %451, %444
  %453 = and i64 %12, -7968019636090331348
  %454 = xor i64 %12, -1
  %455 = or i64 7968019636090331347, %454
  %456 = xor i64 %455, -1
  %457 = and i64 %456, -1
  %458 = add i64 %2, -6680470424709500423
  %459 = xor i64 -6680470424709500423, %2
  %460 = and i64 -6680470424709500423, %2
  %461 = mul i64 2, %460
  %462 = add i64 %459, %461
  %463 = or i64 %8, -1001649636893342892
  %464 = xor i64 %8, -1
  %465 = and i64 -1001649636893342892, %464
  %466 = add i64 %465, %8
  %467 = xor i64 %462, %458
  %468 = xor i64 %467, %457
  %469 = xor i64 %468, 5754350458643913387
  %470 = xor i64 %469, %463
  %471 = xor i64 %470, %466
  %472 = xor i64 %471, %453
  %473 = mul i64 %452, %472
  %474 = trunc i64 %473 to i32
  %475 = select i1 %439, i32 595012208, i32 %474
  %476 = xor i32 %475, 63
  store i32 %476, i32* %1, align 4
  %477 = call i8** @bf777061424148142830(i32* %1)
  %478 = load i8*, i8** %477, align 8
  indirectbr i8* %478, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %179, %EntryBasicBlockSplit
  %479 = load i8*, i8** %3, align 8
  %480 = load i8, i8* %479, align 1
  %481 = mul i8 %480, 2
  %482 = mul i8 %480, 2
  %483 = sub i8 0, %482
  %484 = add i8 -2, %483
  %485 = sub i8 0, %484
  %486 = mul i8 %481, %485
  %487 = srem i8 %486, 4
  %488 = icmp eq i8 %487, 0
  %489 = mul i8 %480, %480
  %490 = mul i8 %489, %480
  %491 = add i8 %490, %480
  %492 = srem i8 %491, 2
  %493 = icmp eq i8 %492, 0
  %494 = xor i1 %488, true
  %495 = or i1 %494, %493
  %496 = xor i1 %488, true
  %497 = sub i1 %495, %496
  %498 = select i1 %497, i32 595012167, i32 595012239
  %499 = xor i32 %498, 200
  store i32 %499, i32* %1, align 4
  %500 = call i8** @bf777061424148142830(i32* %1)
  %501 = load i8*, i8** %500, align 8
  indirectbr i8* %501, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.6.extracted(i1 %0, i1* %.out2) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012173)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@render.extracted.6.extracted, %.exitStub3.exitStub), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012152)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@render.extracted.6.extracted, %.exitStub.exitStub), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012201)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@render.extracted.6.extracted, %EntryBasicBlockSplit), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012175)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@render.extracted.6.extracted, %"2"), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012109)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@render.extracted.6.extracted, %BogusBasciBlock), i8** %11, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.6.extracted, %BogusBasciBlock), i8** %12, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %13, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.6.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %14, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.6.extracted, %"2"), i8** %.reload5, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %15, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.6.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %16, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.6.extracted, %.exitStub3.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %17 = load i8*, i8** %.reload, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %18 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.6.extracted, %.exitStub3.exitStub), i8** %18, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.6.extracted, %EntryBasicBlockSplit), i8** %19, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.6.extracted, %.exitStub.exitStub), i8** %20, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %21 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %21, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %22 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %22, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 %0, i1* %.out2, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %23 = select i1 %0, i8** %.reload7, i8** %.reload10
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub3.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub3.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.8.extracted(i64 %0, i64 %1, i1* %.out1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = add i64 %0, -3297228120001144910
  %4 = xor i64 -3297228120001144910, %0
  %5 = and i64 -3297228120001144910, %0
  %6 = mul i64 2, %5
  %7 = add i64 %4, %6
  %8 = and i64 %0, 8440064292465673767
  %9 = xor i64 %0, -1
  %10 = xor i64 8440064292465673767, %9
  %11 = and i64 %10, 8440064292465673767
  %12 = add i64 %1, 7936422764213707830
  %13 = xor i64 7936422764213707830, %1
  %14 = and i64 7936422764213707830, %1
  %15 = mul i64 2, %14
  %16 = add i64 %13, %15
  %17 = xor i64 %16, 7311065226807919769
  %18 = xor i64 %17, %7
  %19 = xor i64 %18, %11
  %20 = xor i64 %19, %3
  %21 = xor i64 %20, %8
  %22 = xor i64 %21, %12
  %23 = add i64 %1, -5586780131313952207
  %24 = sub i64 0, %1
  %25 = sub i64 -5586780131313952207, %24
  %26 = and i64 %1, 3688914085441930856
  %27 = xor i64 %1, -1
  %28 = xor i64 3688914085441930856, %27
  %29 = and i64 %28, 3688914085441930856
  %30 = xor i64 %23, -7091455405663522845
  %31 = xor i64 %30, %25
  %32 = xor i64 %31, %26
  %33 = xor i64 %32, %29
  %34 = mul i64 %22, %33
  %35 = call i64 @h11804894491772278134(i64 %34)
  %36 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %35
  store i8* blockaddress(@render.extracted.8.extracted, %.exitStub2.exitStub), i8** %36, align 8
  %37 = call i64 @h11804894491772278134(i64 595012102)
  %38 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %37
  store i8* blockaddress(@render.extracted.8.extracted, %.exitStub.exitStub), i8** %38, align 8
  %39 = call i64 @h11804894491772278134(i64 595012193)
  %40 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %39
  store i8* blockaddress(@render.extracted.8.extracted, %"2"), i8** %40, align 8
  %41 = call i64 @h11804894491772278134(i64 595012259)
  %42 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %41
  store i8* blockaddress(@render.extracted.8.extracted, %EntryBasicBlockSplit), i8** %42, align 8
  %43 = call i64 @h11804894491772278134(i64 595012169)
  %44 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %43
  store i8* blockaddress(@render.extracted.8.extracted, %BogusBasciBlock), i8** %44, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %45 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.8.extracted, %BogusBasciBlock), i8** %45, align 8
  %46 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %46, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@render.extracted.8.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %47 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %47, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@render.extracted.8.extracted, %"2"), i8** %.reload5, align 8
  %48 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %48, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@render.extracted.8.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %49 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %49, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@render.extracted.8.extracted, %.exitStub2.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %50 = load i8*, i8** %.reload, align 8
  indirectbr i8* %50, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %51 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@render.extracted.8.extracted, %.exitStub2.exitStub), i8** %51, align 8
  %52 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@render.extracted.8.extracted, %.exitStub.exitStub), i8** %52, align 8
  %53 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@render.extracted.8.extracted, %"2"), i8** %53, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %54 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %54, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %55 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %55, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %56 = mul i64 48, 88
  %57 = sub i64 4955188612026699939, 4955188612026699801
  %58 = add i64 -4695764800124702477, 4695764800124702653
  %59 = add i64 %0, 8736811569269223347
  %60 = add i64 -478637872132367638, %0
  %61 = sub i64 %60, -9215449441401590985
  %62 = or i64 %41, 7187462620531914000
  %63 = xor i64 %41, -1
  %64 = and i64 %63, 531802205931926510
  %65 = and i64 %41, -531802205931926511
  %66 = or i64 %64, %65
  %67 = xor i64 7268713478740018942, %66
  %68 = xor i64 %41, -1
  %69 = or i64 -7187462620531914001, %68
  %70 = xor i64 %69, -1
  %71 = and i64 %70, -1
  %72 = or i64 %67, %71
  %73 = xor i64 %61, 3984015280972353399
  %74 = xor i64 %73, %62
  %75 = xor i64 %74, %59
  %76 = xor i64 %75, %72
  %77 = or i64 %43, 7902613464513957749
  %78 = xor i64 %43, -1
  %79 = and i64 %78, -6853803413572549880
  %80 = and i64 %43, 6853803413572549879
  %81 = or i64 %79, %80
  %82 = xor i64 -3654144393957028739, %81
  %83 = xor i64 %43, -1
  %84 = or i64 -7902613464513957750, %83
  %85 = xor i64 %84, -1
  %86 = and i64 %85, -1
  %87 = or i64 %82, %86
  %88 = add i64 %39, 8229843099699549790
  %89 = sub i64 0, %39
  %90 = add i64 -8229843099699549790, %89
  %91 = sub i64 0, %90
  %92 = xor i64 %87, %88
  %93 = xor i64 %92, %91
  %94 = xor i64 %93, %77
  %95 = xor i64 %94, -4495478154938005549
  %96 = mul i64 %76, %95
  %97 = add i64 %41, 7248900728198509829
  %98 = sub i64 0, %41
  %99 = add i64 -7248900728198509829, %98
  %100 = sub i64 0, %99
  %101 = add i64 %35, -8684060713542681215
  %102 = and i64 -8684060713542681215, %35
  %103 = or i64 -8684060713542681215, %35
  %104 = add i64 %102, %103
  %105 = and i64 %39, 2666197516162299241
  %106 = xor i64 %39, -1
  %107 = or i64 -2666197516162299242, %106
  %108 = xor i64 %107, -1
  %109 = and i64 %108, -1
  %110 = xor i64 %100, %104
  %111 = xor i64 %110, -7782236836745734835
  %112 = xor i64 %111, %109
  %113 = xor i64 %112, %101
  %114 = xor i64 %113, %97
  %115 = xor i64 %114, %105
  %116 = and i64 %41, -5673427855358680539
  %117 = xor i64 %41, -1
  %118 = xor i64 -5673427855358680539, %117
  %119 = and i64 %118, -5673427855358680539
  %120 = or i64 %0, -1140468541007296138
  %121 = xor i64 %0, -1
  %122 = and i64 %121, 7867782306680734825
  %123 = and i64 %0, -7867782306680734826
  %124 = or i64 %122, %123
  %125 = xor i64 -7132637804352271073, %124
  %126 = xor i64 %0, -1
  %127 = or i64 1140468541007296137, %126
  %128 = xor i64 %127, -1
  %129 = and i64 %128, -1
  %130 = or i64 %125, %129
  %131 = xor i64 -575430747873690925, %119
  %132 = xor i64 %131, %116
  %133 = xor i64 %132, %120
  %134 = xor i64 %133, %130
  %135 = mul i64 %115, %134
  %136 = sub i64 %96, %135
  %137 = mul i64 80, 42
  %138 = srem i64 %0, 2
  %139 = icmp eq i64 %138, 0
  %140 = or i64 %1, 6816641788433665482
  %141 = xor i64 %1, -1
  %142 = and i64 %141, 5772666090065336541
  %143 = and i64 %1, -5772666090065336542
  %144 = or i64 %142, %143
  %145 = xor i64 1046298213250077975, %144
  %146 = xor i64 %1, -1
  %147 = or i64 -6816641788433665483, %146
  %148 = xor i64 %147, -1
  %149 = and i64 %148, -1
  %150 = or i64 %145, %149
  %151 = and i64 %43, -3368052278825884064
  %152 = or i64 3368052278825884063, %43
  %153 = sub i64 %152, 3368052278825884063
  %154 = or i64 %39, 2936861620138312977
  %155 = xor i64 %39, -1
  %156 = and i64 %155, -6816899814485987240
  %157 = and i64 %39, 6816899814485987239
  %158 = or i64 %156, %157
  %159 = xor i64 -8528597609207532215, %158
  %160 = xor i64 %39, -1
  %161 = or i64 -2936861620138312978, %160
  %162 = xor i64 %161, -1
  %163 = and i64 %162, -1
  %164 = or i64 %159, %163
  %165 = xor i64 %151, %153
  %166 = xor i64 %165, %150
  %167 = xor i64 %166, %140
  %168 = xor i64 %167, %164
  %169 = xor i64 %168, 1181015191270767473
  %170 = xor i64 %169, %154
  %171 = add i64 %0, 1942403150589602679
  %172 = and i64 1942403150589602679, %0
  %173 = or i64 1942403150589602679, %0
  %174 = add i64 %172, %173
  %175 = and i64 %35, -4120876720555561064
  %176 = or i64 4120876720555561063, %35
  %177 = sub i64 %176, 4120876720555561063
  %178 = add i64 %35, 9017923039146747609
  %179 = add i64 -6017094176142562504, %35
  %180 = add i64 %179, -3411726858420241503
  %181 = xor i64 %175, %174
  %182 = xor i64 %181, %171
  %183 = xor i64 %182, 7134238780208096657
  %184 = xor i64 %183, %177
  %185 = xor i64 %184, %178
  %186 = xor i64 %185, %180
  %187 = mul i64 %170, %186
  %188 = and i64 %1, %187
  %189 = and i64 %43, -3360921431907495612
  %190 = xor i64 %43, -1
  %191 = xor i64 -3360921431907495612, %190
  %192 = and i64 %191, -3360921431907495612
  %193 = or i64 %37, -9163101064981874168
  %194 = xor i64 %37, -1
  %195 = and i64 -9163101064981874168, %194
  %196 = add i64 %195, %37
  %197 = xor i64 %189, 3927779897019959327
  %198 = xor i64 %197, %192
  %199 = xor i64 %198, %196
  %200 = xor i64 %199, %193
  %201 = add i64 %41, 8876294091302125856
  %202 = sub i64 0, %41
  %203 = add i64 -8876294091302125856, %202
  %204 = sub i64 0, %203
  %205 = and i64 %1, 7075406815619273690
  %206 = xor i64 %1, -1
  %207 = or i64 -7075406815619273691, %206
  %208 = xor i64 %207, -1
  %209 = and i64 %208, -1
  %210 = xor i64 7330210056499229663, %201
  %211 = xor i64 %210, %204
  %212 = xor i64 %211, %205
  %213 = xor i64 %212, %209
  %214 = mul i64 %200, %213
  %215 = icmp eq i64 %188, %214
  %216 = mul i64 %1, %1
  %217 = add i64 %216, %1
  %218 = srem i64 %217, 2
  %219 = icmp eq i64 %218, 0
  %220 = and i1 %215, %219
  %221 = xor i1 %215, %219
  %222 = or i1 %220, %221
  store i1 %222, i1* %.out1, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %223 = select i1 %222, i8** %.reload7, i8** %.reload10
  %224 = load i8*, i8** %223, align 8
  indirectbr i8* %224, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub2.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.9.extracted(i64 %0, i1 %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012219)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.9.extracted, %loopEnd), i8** %4, align 8
  %5 = or i64 %0, -7002857252182891733
  %6 = xor i64 %0, -1
  %7 = and i64 -7002857252182891733, %6
  %8 = add i64 %7, %0
  %9 = and i64 %0, -1578813770754492935
  %10 = xor i64 %0, -1
  %11 = or i64 1578813770754492934, %10
  %12 = xor i64 %11, -1
  %13 = and i64 %12, -1
  %14 = xor i64 %13, %5
  %15 = xor i64 %14, -8956186732640116761
  %16 = xor i64 %15, %9
  %17 = xor i64 %16, %8
  %18 = or i64 %0, -3451737119695446946
  %19 = and i64 -3451737119695446946, %0
  %20 = xor i64 -3451737119695446946, %0
  %21 = or i64 %19, %20
  %22 = add i64 %0, 5463260612430795758
  %23 = sub i64 0, %0
  %24 = sub i64 5463260612430795758, %23
  %25 = xor i64 %22, %21
  %26 = xor i64 %25, %18
  %27 = xor i64 %26, %24
  %28 = xor i64 %27, -2632076027597960093
  %29 = mul i64 %17, %28
  %30 = call i64 @h11804894491772278134(i64 %29)
  %31 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %30
  store i8* blockaddress(@render.extracted.9.extracted, %defaultSwitchBasicBlock), i8** %31, align 8
  %32 = call i64 @h11804894491772278134(i64 595012253)
  %33 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %32
  store i8* blockaddress(@render.extracted.9.extracted, %BogusBasicBlock), i8** %33, align 8
  %34 = or i64 %0, -8011492211753361702
  %35 = xor i64 %0, -1
  %36 = and i64 -8011492211753361702, %35
  %37 = add i64 %36, %0
  %38 = or i64 %0, 4520556666785047442
  %39 = xor i64 %0, -1
  %40 = and i64 4520556666785047442, %39
  %41 = add i64 %40, %0
  %42 = and i64 %0, -2306105767882306055
  %43 = xor i64 %0, -1
  %44 = or i64 2306105767882306054, %43
  %45 = xor i64 %44, -1
  %46 = and i64 %45, -1
  %47 = xor i64 4656272017006204449, %34
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %37
  %50 = xor i64 %49, %38
  %51 = xor i64 %50, %46
  %52 = xor i64 %51, %41
  %53 = and i64 %0, -4832187690536585185
  %54 = xor i64 %0, -1
  %55 = or i64 4832187690536585184, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = and i64 %0, -3465242790813330160
  %59 = xor i64 %0, -1
  %60 = or i64 3465242790813330159, %59
  %61 = xor i64 %60, -1
  %62 = and i64 %61, -1
  %63 = add i64 %0, -6633682853268576027
  %64 = xor i64 -6633682853268576027, %0
  %65 = and i64 -6633682853268576027, %0
  %66 = mul i64 2, %65
  %67 = add i64 %64, %66
  %68 = xor i64 %53, %58
  %69 = xor i64 %68, %62
  %70 = xor i64 %69, %67
  %71 = xor i64 %70, 3670263092394198440
  %72 = xor i64 %71, %63
  %73 = xor i64 %72, %57
  %74 = mul i64 %52, %73
  %75 = call i64 @h11804894491772278134(i64 %74)
  %76 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %75
  store i8* blockaddress(@render.extracted.9.extracted, %loopStart), i8** %76, align 8
  %77 = call i64 @h11804894491772278134(i64 595012199)
  %78 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %77
  store i8* blockaddress(@render.extracted.9.extracted, %.exitStub.exitStub), i8** %78, align 8
  %79 = add i64 %0, 3323522891936959563
  %80 = add i64 -2454746192725702237, %0
  %81 = add i64 %80, 5778269084662661800
  %82 = or i64 %0, 5133631348897650728
  %83 = and i64 5133631348897650728, %0
  %84 = xor i64 5133631348897650728, %0
  %85 = or i64 %83, %84
  %86 = and i64 %0, -5697224219264692353
  %87 = or i64 5697224219264692352, %0
  %88 = sub i64 %87, 5697224219264692352
  %89 = xor i64 %86, %79
  %90 = xor i64 %89, %88
  %91 = xor i64 %90, %81
  %92 = xor i64 %91, %85
  %93 = xor i64 %92, %82
  %94 = xor i64 %93, 148066488365499751
  %95 = or i64 %0, 400103155169727255
  %96 = xor i64 %0, -1
  %97 = and i64 400103155169727255, %96
  %98 = add i64 %97, %0
  %99 = add i64 %0, -1650100372374624611
  %100 = and i64 -1650100372374624611, %0
  %101 = or i64 -1650100372374624611, %0
  %102 = add i64 %100, %101
  %103 = and i64 %0, -6731003446252805359
  %104 = or i64 6731003446252805358, %0
  %105 = sub i64 %104, 6731003446252805358
  %106 = xor i64 -2451991307945818233, %99
  %107 = xor i64 %106, %98
  %108 = xor i64 %107, %95
  %109 = xor i64 %108, %103
  %110 = xor i64 %109, %105
  %111 = xor i64 %110, %102
  %112 = mul i64 %94, %111
  %113 = call i64 @h11804894491772278134(i64 %112)
  %114 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %113
  store i8* blockaddress(@render.extracted.9.extracted, %341), i8** %114, align 8
  %115 = call i64 @h11804894491772278134(i64 595012249)
  %116 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %115
  store i8* blockaddress(@render.extracted.9.extracted, %.exitStub3.exitStub), i8** %116, align 8
  %117 = call i64 @h11804894491772278134(i64 595012250)
  %118 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %117
  store i8* blockaddress(@render.extracted.9.extracted, %EntryBasicBlockSplit), i8** %118, align 8
  %lookupTable = alloca [9 x i32], align 4
  %119 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %119, align 4
  %120 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %120, align 4
  %121 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %121, align 4
  %122 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %122, align 4
  %123 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %123, align 4
  %124 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %125 = or i64 %0, -978390851499187495
  %126 = xor i64 %0, -1
  %127 = and i64 %126, 3898423522770235259
  %128 = and i64 %0, -3898423522770235260
  %129 = or i64 %127, %128
  %130 = xor i64 -4290253422183510622, %129
  %131 = xor i64 %0, -1
  %132 = or i64 978390851499187494, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = or i64 %130, %134
  %136 = add i64 %0, 1958364908812554594
  %137 = and i64 1958364908812554594, %0
  %138 = or i64 1958364908812554594, %0
  %139 = add i64 %137, %138
  %140 = xor i64 2735267629855205915, %139
  %141 = xor i64 %140, %125
  %142 = xor i64 %141, %136
  %143 = xor i64 %142, %135
  %144 = and i64 %0, -6882143824362337718
  %145 = xor i64 %0, -1
  %146 = or i64 6882143824362337717, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = or i64 %0, -5426484528202782363
  %150 = xor i64 %0, -1
  %151 = and i64 %150, -476420178258373712
  %152 = and i64 %0, 476420178258373711
  %153 = or i64 %151, %152
  %154 = xor i64 5607592098867264213, %153
  %155 = xor i64 %0, -1
  %156 = or i64 5426484528202782362, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %154, %158
  %160 = xor i64 %144, %149
  %161 = xor i64 %160, %148
  %162 = xor i64 %161, %159
  %163 = xor i64 %162, -1892421559010475994
  %164 = mul i64 %143, %163
  %165 = trunc i64 %164 to i32
  store i32 %165, i32* %124, align 4
  %166 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %166, align 4
  %167 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %167, align 4
  %168 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %168, align 4
  %dispatcher = alloca i32, align 4
  %169 = and i64 %0, -7115357513446861809
  %170 = xor i64 %0, -1
  %171 = or i64 7115357513446861808, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = and i64 %0, 6641322477828200889
  %175 = or i64 -6641322477828200890, %0
  %176 = sub i64 %175, -6641322477828200890
  %177 = add i64 %0, -2851126396150365847
  %178 = and i64 -2851126396150365847, %0
  %179 = or i64 -2851126396150365847, %0
  %180 = add i64 %178, %179
  %181 = xor i64 %176, %180
  %182 = xor i64 %181, %169
  %183 = xor i64 %182, %173
  %184 = xor i64 %183, %177
  %185 = xor i64 %184, %174
  %186 = xor i64 %185, -2241982274395299447
  %187 = or i64 %0, 2806105647807838420
  %188 = xor i64 %0, -1
  %189 = and i64 %188, 5423125256714986210
  %190 = and i64 %0, -5423125256714986211
  %191 = or i64 %189, %190
  %192 = xor i64 7904808590148344374, %191
  %193 = xor i64 %0, -1
  %194 = or i64 -2806105647807838421, %193
  %195 = xor i64 %194, -1
  %196 = and i64 %195, -1
  %197 = or i64 %192, %196
  %198 = add i64 %0, -8350376051507540995
  %199 = xor i64 -8350376051507540995, %0
  %200 = and i64 -8350376051507540995, %0
  %201 = mul i64 2, %200
  %202 = add i64 %199, %201
  %203 = add i64 %0, 3500814630332766959
  %204 = sub i64 0, %0
  %205 = add i64 -3500814630332766959, %204
  %206 = sub i64 0, %205
  %207 = xor i64 %202, %206
  %208 = xor i64 %207, %197
  %209 = xor i64 %208, %187
  %210 = xor i64 %209, 0
  %211 = xor i64 %210, %198
  %212 = xor i64 %211, %203
  %213 = mul i64 %186, %212
  %214 = trunc i64 %213 to i32
  store i32 %214, i32* %dispatcher, align 4
  store i32 595012264, i32* %2, align 4
  %215 = call i8** @bf777061424148142830(i32* %2)
  %216 = load i8*, i8** %215, align 8
  indirectbr i8* %216, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %341
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub3.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %217 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %220 = load i32, i32* %219, align 4
  %221 = sub i32 %218, %220
  store i32 %221, i32* %dispatcher, align 4
  %222 = load i8*, i8** %116, align 8
  %223 = load i8, i8* %222, align 1
  %224 = mul i8 %223, 2
  %225 = mul i8 %223, 2
  %226 = and i8 2, %225
  %227 = or i8 2, %225
  %228 = add i8 %226, %227
  %229 = mul i8 %224, %228
  %230 = srem i8 %229, 4
  %231 = icmp eq i8 %230, 0
  %232 = mul i8 %223, %223
  %233 = mul i8 %232, %223
  %234 = add i64 %117, -3912140014165491091
  %235 = xor i64 -3912140014165491091, %117
  %236 = and i64 -3912140014165491091, %117
  %237 = mul i64 2, %236
  %238 = add i64 %235, %237
  %239 = and i64 %113, 4666950606635309319
  %240 = or i64 -4666950606635309320, %113
  %241 = sub i64 %240, -4666950606635309320
  %242 = xor i64 %239, %238
  %243 = xor i64 %242, %234
  %244 = xor i64 %243, %241
  %245 = xor i64 %244, 1502019729008650131
  %246 = or i64 %115, -2756745441399140741
  %247 = xor i64 %115, -1
  %248 = and i64 -2756745441399140741, %247
  %249 = add i64 %248, %115
  %250 = and i64 %113, -3864330146098136333
  %251 = xor i64 %113, -1
  %252 = xor i64 -3864330146098136333, %251
  %253 = and i64 %252, -3864330146098136333
  %254 = xor i64 %246, %249
  %255 = xor i64 %254, %250
  %256 = xor i64 %255, -667279320513649036
  %257 = xor i64 %256, %253
  %258 = mul i64 %245, %257
  %259 = trunc i64 %258 to i8
  %260 = sub i8 %233, %259
  %261 = add i8 %260, %223
  %262 = or i64 %115, -3094095299625032723
  %263 = xor i64 %115, -1
  %264 = and i64 -3094095299625032723, %263
  %265 = add i64 %264, %115
  %266 = and i64 %75, -4620478660567678702
  %267 = xor i64 %75, -1
  %268 = xor i64 -4620478660567678702, %267
  %269 = and i64 %268, -4620478660567678702
  %270 = or i64 %0, -2895105228227482048
  %271 = xor i64 %0, -1
  %272 = and i64 %271, 7643314053145844283
  %273 = and i64 %0, -7643314053145844284
  %274 = or i64 %272, %273
  %275 = xor i64 -4773810653441969029, %274
  %276 = xor i64 %0, -1
  %277 = or i64 2895105228227482047, %276
  %278 = xor i64 %277, -1
  %279 = and i64 %278, -1
  %280 = or i64 %275, %279
  %281 = xor i64 %262, %280
  %282 = xor i64 %281, %265
  %283 = xor i64 %282, %266
  %284 = xor i64 %283, %270
  %285 = xor i64 %284, %269
  %286 = xor i64 %285, -4175067261750715561
  %287 = and i64 %115, -8012081616519400501
  %288 = xor i64 %115, -1
  %289 = xor i64 -8012081616519400501, %288
  %290 = and i64 %289, -8012081616519400501
  %291 = and i64 %113, 2528103051777066210
  %292 = or i64 -2528103051777066211, %113
  %293 = sub i64 %292, -2528103051777066211
  %294 = xor i64 -5466016167077527868, %287
  %295 = xor i64 %294, %293
  %296 = xor i64 %295, %290
  %297 = xor i64 %296, %291
  %298 = mul i64 %286, %297
  %299 = trunc i64 %298 to i8
  %300 = add i8 %261, %299
  %301 = srem i8 %300, 2
  %302 = icmp eq i8 %301, 0
  %303 = and i1 %231, %302
  %304 = or i64 %32, 6363719737714402675
  %305 = xor i64 %32, -1
  %306 = and i64 %305, -1634095709987440384
  %307 = and i64 %32, 1634095709987440383
  %308 = or i64 %306, %307
  %309 = xor i64 -5691705510010643341, %308
  %310 = xor i64 %32, -1
  %311 = or i64 -6363719737714402676, %310
  %312 = xor i64 %311, -1
  %313 = and i64 %312, -1
  %314 = or i64 %309, %313
  %315 = and i64 %113, -6018520386153545669
  %316 = xor i64 %113, -1
  %317 = or i64 6018520386153545668, %316
  %318 = xor i64 %317, -1
  %319 = and i64 %318, -1
  %320 = xor i64 %315, %319
  %321 = xor i64 %320, %304
  %322 = xor i64 %321, %314
  %323 = xor i64 %322, -5356820319074422117
  %324 = add i64 %32, -8932134656877396088
  %325 = add i64 2691699267372102100, %32
  %326 = add i64 %325, 6822910149460053428
  %327 = or i64 %30, -8537890336270904784
  %328 = and i64 -8537890336270904784, %30
  %329 = xor i64 -8537890336270904784, %30
  %330 = or i64 %328, %329
  %331 = xor i64 %330, %326
  %332 = xor i64 %331, -8018605905435070939
  %333 = xor i64 %332, %324
  %334 = xor i64 %333, %327
  %335 = mul i64 %323, %334
  %336 = trunc i64 %335 to i32
  %337 = select i1 %303, i32 %336, i32 595012219
  %338 = xor i32 %337, 28
  store i32 %338, i32* %2, align 4
  %339 = call i8** @bf777061424148142830(i32* %2)
  %340 = load i8*, i8** %339, align 8
  indirectbr i8* %340, [label %loopEnd, label %EntryBasicBlockSplit]

341:                                              ; preds = %341, %loopStart
  %342 = srem i64 %0, 2
  %343 = icmp eq i64 %342, 0
  %344 = or i1 %1, %343
  %345 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %346 = load i32, i32* %345, align 4
  %347 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %348 = load i32, i32* %347, align 4
  %349 = xor i32 %346, %348
  %350 = and i32 %346, %348
  %351 = and i64 %117, -4725585663332361933
  %352 = or i64 4725585663332361932, %117
  %353 = sub i64 %352, 4725585663332361932
  %354 = add i64 %75, -8620851258699770607
  %355 = and i64 -8620851258699770607, %75
  %356 = or i64 -8620851258699770607, %75
  %357 = add i64 %355, %356
  %358 = and i64 %77, 4467078566468556976
  %359 = xor i64 %77, -1
  %360 = or i64 -4467078566468556977, %359
  %361 = xor i64 %360, -1
  %362 = and i64 %361, -1
  %363 = xor i64 %351, %357
  %364 = xor i64 %363, %362
  %365 = xor i64 %364, 7221487393490377273
  %366 = xor i64 %365, %354
  %367 = xor i64 %366, %358
  %368 = xor i64 %367, %353
  %369 = or i64 %75, 6574236877979751246
  %370 = and i64 6574236877979751246, %75
  %371 = xor i64 6574236877979751246, %75
  %372 = or i64 %370, %371
  %373 = add i64 %113, 7148004322896196462
  %374 = sub i64 0, %113
  %375 = add i64 -7148004322896196462, %374
  %376 = sub i64 0, %375
  %377 = add i64 %32, -1628232619581942989
  %378 = xor i64 -1628232619581942989, %32
  %379 = and i64 -1628232619581942989, %32
  %380 = mul i64 2, %379
  %381 = add i64 %378, %380
  %382 = xor i64 %381, %373
  %383 = xor i64 %382, %369
  %384 = xor i64 %383, %372
  %385 = xor i64 %384, %376
  %386 = xor i64 %385, 2378172754346534930
  %387 = xor i64 %386, %377
  %388 = mul i64 %368, %387
  %389 = trunc i64 %388 to i32
  %390 = mul i32 %389, %350
  %391 = add i32 %349, %390
  %392 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %393 = load i32, i32* %392, align 4
  %394 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %395 = load i32, i32* %394, align 4
  %396 = sub i32 0, %395
  %397 = sub i32 %393, %396
  %398 = select i1 %344, i32 %391, i32 %397
  store i32 %398, i32* %dispatcher, align 4
  %399 = load i8*, i8** %116, align 8
  %400 = load i8, i8* %399, align 1
  %401 = mul i8 %400, 2
  %402 = mul i8 %400, 2
  %403 = sub i8 0, %402
  %404 = add i64 %0, -6640598317984884306
  %405 = and i64 -6640598317984884306, %0
  %406 = or i64 -6640598317984884306, %0
  %407 = add i64 %405, %406
  %408 = add i64 %3, -8776998482577535195
  %409 = xor i64 -8776998482577535195, %3
  %410 = and i64 -8776998482577535195, %3
  %411 = mul i64 2, %410
  %412 = add i64 %409, %411
  %413 = xor i64 %407, %412
  %414 = xor i64 %413, 8276164915692130843
  %415 = xor i64 %414, %404
  %416 = xor i64 %415, %408
  %417 = add i64 %30, -3262811190240159876
  %418 = sub i64 0, %30
  %419 = sub i64 -3262811190240159876, %418
  %420 = or i64 %32, 3576235350267075466
  %421 = xor i64 %32, -1
  %422 = and i64 %421, -2543456009309142289
  %423 = and i64 %32, 2543456009309142288
  %424 = or i64 %422, %423
  %425 = xor i64 -1363883536656443035, %424
  %426 = xor i64 %32, -1
  %427 = or i64 -3576235350267075467, %426
  %428 = xor i64 %427, -1
  %429 = and i64 %428, -1
  %430 = or i64 %425, %429
  %431 = add i64 %3, -1845655788762862552
  %432 = sub i64 0, %3
  %433 = add i64 1845655788762862552, %432
  %434 = sub i64 0, %433
  %435 = xor i64 %434, %419
  %436 = xor i64 %435, -5875238100664946650
  %437 = xor i64 %436, %430
  %438 = xor i64 %437, %431
  %439 = xor i64 %438, %417
  %440 = xor i64 %439, %420
  %441 = mul i64 %416, %440
  %442 = trunc i64 %441 to i8
  %443 = sub i8 %442, %403
  %444 = mul i8 %401, %443
  %445 = and i64 %3, -5242529802661218280
  %446 = or i64 5242529802661218279, %3
  %447 = sub i64 %446, 5242529802661218279
  %448 = add i64 %0, 115692506922666102
  %449 = sub i64 0, %0
  %450 = add i64 -115692506922666102, %449
  %451 = sub i64 0, %450
  %452 = xor i64 %447, %445
  %453 = xor i64 %452, %451
  %454 = xor i64 %453, %448
  %455 = xor i64 %454, 7922282172039233919
  %456 = and i64 %115, -5276419990254058790
  %457 = xor i64 %115, -1
  %458 = xor i64 -5276419990254058790, %457
  %459 = and i64 %458, -5276419990254058790
  %460 = sext i32 %dispatcher1 to i64
  %461 = or i64 %460, 7457659513818148477
  %462 = xor i64 %460, -1
  %463 = and i64 7457659513818148477, %462
  %464 = add i64 %463, %460
  %465 = or i64 %113, -780314928438493966
  %466 = xor i64 %113, -1
  %467 = and i64 %466, 296325048998631014
  %468 = and i64 %113, -296325048998631015
  %469 = or i64 %467, %468
  %470 = xor i64 -1065380883795531116, %469
  %471 = xor i64 %113, -1
  %472 = or i64 780314928438493965, %471
  %473 = xor i64 %472, -1
  %474 = and i64 %473, -1
  %475 = or i64 %470, %474
  %476 = xor i64 %456, %461
  %477 = xor i64 %476, %475
  %478 = xor i64 %477, 8917678854965492220
  %479 = xor i64 %478, %464
  %480 = xor i64 %479, %459
  %481 = xor i64 %480, %465
  %482 = mul i64 %455, %481
  %483 = trunc i64 %482 to i8
  %484 = srem i8 %444, %483
  %485 = icmp eq i8 %484, 0
  %486 = mul i8 %400, %400
  %487 = add i8 %486, %400
  %488 = srem i8 %487, 2
  %489 = icmp eq i8 %488, 0
  %490 = and i1 %485, %489
  %491 = select i1 %490, i32 595012264, i32 595012219
  %492 = xor i32 %491, -798494620
  %493 = xor i32 %492, -798494537
  store i32 %493, i32* %2, align 4
  %494 = call i8** @bf777061424148142830(i32* %2)
  %495 = load i8*, i8** %494, align 8
  indirectbr i8* %495, [label %loopEnd, label %341]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub3.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %496 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %496, align 4
  %497 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %497, align 4
  %498 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %498, align 4
  %499 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %499, align 4
  %500 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %501 = or i64 %113, -431606713029560568
  %502 = xor i64 %113, -1
  %503 = and i64 -431606713029560568, %502
  %504 = add i64 %503, %113
  %505 = and i64 %0, 3882905403691662528
  %506 = or i64 -3882905403691662529, %0
  %507 = sub i64 %506, -3882905403691662529
  %508 = xor i64 %507, %501
  %509 = xor i64 %508, %504
  %510 = xor i64 %509, -4015579368962013059
  %511 = xor i64 %510, %505
  %512 = or i64 %117, 3865415716192937278
  %513 = and i64 3865415716192937278, %117
  %514 = xor i64 3865415716192937278, %117
  %515 = or i64 %513, %514
  %516 = add i64 %77, -7962394519643497190
  %517 = sub i64 0, %77
  %518 = add i64 7962394519643497190, %517
  %519 = sub i64 0, %518
  %520 = add i64 %3, -6334967938278927376
  %521 = and i64 -6334967938278927376, %3
  %522 = or i64 -6334967938278927376, %3
  %523 = add i64 %521, %522
  %524 = xor i64 %520, %519
  %525 = xor i64 %524, %512
  %526 = xor i64 %525, %516
  %527 = xor i64 %526, %515
  %528 = xor i64 %527, %523
  %529 = xor i64 %528, 2123033177621763539
  %530 = mul i64 %511, %529
  %531 = trunc i64 %530 to i32
  store i32 %531, i32* %500, align 4
  %532 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %533 = load i32, i32* %532, align 4
  store i32 %533, i32* %dispatcher, align 4
  %534 = load i8*, i8** %116, align 8
  %535 = load i8, i8* %534, align 1
  %536 = mul i8 %535, 2
  %537 = mul i8 %535, 2
  %538 = add i8 2, %537
  %539 = mul i8 %536, %538
  %540 = and i64 %117, -6978895220033441416
  %541 = xor i64 %117, -1
  %542 = xor i64 -6978895220033441416, %541
  %543 = and i64 %542, -6978895220033441416
  %544 = and i64 %113, -1620366703615685403
  %545 = or i64 1620366703615685402, %113
  %546 = sub i64 %545, 1620366703615685402
  %547 = xor i64 %546, %540
  %548 = xor i64 %547, %543
  %549 = xor i64 %548, %544
  %550 = xor i64 %549, -7868551315169564295
  %551 = add i64 %77, 8784212780855409284
  %552 = and i64 8784212780855409284, %77
  %553 = or i64 8784212780855409284, %77
  %554 = add i64 %552, %553
  %555 = and i64 %117, -2246002953358449908
  %556 = xor i64 %117, -1
  %557 = or i64 2246002953358449907, %556
  %558 = xor i64 %557, -1
  %559 = and i64 %558, -1
  %560 = xor i64 %559, %554
  %561 = xor i64 %560, %555
  %562 = xor i64 %561, %551
  %563 = xor i64 %562, 6225012796641362724
  %564 = mul i64 %550, %563
  %565 = trunc i64 %564 to i8
  %566 = srem i8 %539, %565
  %567 = add i64 %75, -6669094087239994715
  %568 = add i64 1344631058952041858, %75
  %569 = sub i64 %568, 8013725146192036573
  %570 = and i64 %0, -6855042777609801589
  %571 = or i64 6855042777609801588, %0
  %572 = sub i64 %571, 6855042777609801588
  %573 = xor i64 %570, -6060274315184356447
  %574 = xor i64 %573, %569
  %575 = xor i64 %574, %567
  %576 = xor i64 %575, %572
  %577 = and i64 %0, 6311775011640816688
  %578 = xor i64 %0, -1
  %579 = xor i64 6311775011640816688, %578
  %580 = and i64 %579, 6311775011640816688
  %581 = add i64 %75, -7442146006504339318
  %582 = and i64 -7442146006504339318, %75
  %583 = or i64 -7442146006504339318, %75
  %584 = add i64 %582, %583
  %585 = xor i64 %581, %577
  %586 = xor i64 %585, 0
  %587 = xor i64 %586, %580
  %588 = xor i64 %587, %584
  %589 = mul i64 %576, %588
  %590 = trunc i64 %589 to i8
  %591 = icmp eq i8 %566, %590
  %592 = mul i8 %535, %535
  %593 = add i8 %592, %535
  %594 = srem i8 %593, 2
  %595 = icmp eq i8 %594, 0
  %596 = and i1 %591, %595
  %597 = select i1 %596, i32 595012199, i32 595012250
  %598 = xor i32 %597, -220788822
  %599 = xor i32 %598, -220788905
  store i32 %599, i32* %2, align 4
  %600 = call i8** @bf777061424148142830(i32* %2)
  %601 = load i8*, i8** %600, align 8
  indirectbr i8* %601, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %602 = load i8*, i8** %33, align 8
  %603 = load i8, i8* %602, align 1
  %604 = mul i8 %603, 2
  %605 = mul i8 %603, 2
  %606 = and i64 %113, -791115192544925047
  %607 = xor i64 %113, -1
  %608 = or i64 791115192544925046, %607
  %609 = xor i64 %608, -1
  %610 = and i64 %609, -1
  %611 = and i64 %0, 1294739667797822425
  %612 = or i64 -1294739667797822426, %0
  %613 = sub i64 %612, -1294739667797822426
  %614 = xor i64 %606, %613
  %615 = xor i64 %614, -1324908599671513481
  %616 = xor i64 %615, %610
  %617 = xor i64 %616, %611
  %618 = and i64 %32, 5524895647353207140
  %619 = xor i64 %32, -1
  %620 = or i64 -5524895647353207141, %619
  %621 = xor i64 %620, -1
  %622 = and i64 %621, -1
  %623 = add i64 %0, -8956724730241133786
  %624 = xor i64 -8956724730241133786, %0
  %625 = and i64 -8956724730241133786, %0
  %626 = mul i64 2, %625
  %627 = add i64 %624, %626
  %628 = xor i64 %618, %623
  %629 = xor i64 %628, 0
  %630 = xor i64 %629, %627
  %631 = xor i64 %630, %622
  %632 = mul i64 %617, %631
  %633 = trunc i64 %632 to i8
  %634 = sub i8 %633, %605
  %635 = sub i8 2, %634
  %636 = mul i8 %604, %635
  %637 = add i64 %115, 4882963179750455444
  %638 = and i64 4882963179750455444, %115
  %639 = or i64 4882963179750455444, %115
  %640 = add i64 %638, %639
  %641 = and i64 %115, -4019271470406104967
  %642 = xor i64 %115, -1
  %643 = xor i64 -4019271470406104967, %642
  %644 = and i64 %643, -4019271470406104967
  %645 = xor i64 %640, %644
  %646 = xor i64 %645, %641
  %647 = xor i64 %646, -7585412739856872489
  %648 = xor i64 %647, %637
  %649 = or i64 %32, 8037527383885026375
  %650 = xor i64 %32, -1
  %651 = and i64 8037527383885026375, %650
  %652 = add i64 %651, %32
  %653 = or i64 %117, 203738392392945788
  %654 = and i64 203738392392945788, %117
  %655 = xor i64 203738392392945788, %117
  %656 = or i64 %654, %655
  %657 = xor i64 8388462285576560540, %656
  %658 = xor i64 %657, %653
  %659 = xor i64 %658, %652
  %660 = xor i64 %659, %649
  %661 = mul i64 %648, %660
  %662 = trunc i64 %661 to i8
  %663 = srem i8 %636, %662
  %664 = icmp eq i8 %663, 0
  %665 = mul i8 %603, %603
  %666 = add i8 %665, %603
  %667 = srem i8 %666, 2
  %668 = icmp eq i8 %667, 0
  %669 = or i1 %664, %668
  %670 = and i64 %3, -2285803557683213542
  %671 = or i64 2285803557683213541, %3
  %672 = sub i64 %671, 2285803557683213541
  %673 = and i64 %75, 5909627029634676591
  %674 = xor i64 %75, -1
  %675 = or i64 -5909627029634676592, %674
  %676 = xor i64 %675, -1
  %677 = and i64 %676, -1
  %678 = xor i64 6259175978819955523, %670
  %679 = xor i64 %678, %677
  %680 = xor i64 %679, %673
  %681 = xor i64 %680, %672
  %682 = add i64 %113, -2599435997561010996
  %683 = add i64 -1720966361103241151, %113
  %684 = sub i64 %683, 878469636457769845
  %685 = or i64 %3, -6039953646497859518
  %686 = and i64 -6039953646497859518, %3
  %687 = xor i64 -6039953646497859518, %3
  %688 = or i64 %686, %687
  %689 = xor i64 %682, %685
  %690 = xor i64 %689, %688
  %691 = xor i64 %690, %684
  %692 = xor i64 %691, -7817186896180239255
  %693 = mul i64 %681, %692
  %694 = trunc i64 %693 to i32
  %695 = or i64 %117, -9044001777415787479
  %696 = and i64 -9044001777415787479, %117
  %697 = xor i64 -9044001777415787479, %117
  %698 = or i64 %696, %697
  %699 = or i64 %32, -9068554087442719390
  %700 = xor i64 %32, -1
  %701 = and i64 -9068554087442719390, %700
  %702 = add i64 %701, %32
  %703 = xor i64 %702, %695
  %704 = xor i64 %703, 1891197003079343335
  %705 = xor i64 %704, %699
  %706 = xor i64 %705, %698
  %707 = add i64 %0, -5600251205115796832
  %708 = sub i64 0, %0
  %709 = add i64 5600251205115796832, %708
  %710 = sub i64 0, %709
  %711 = add i64 %75, -6010888132506608352
  %712 = sub i64 0, %75
  %713 = add i64 6010888132506608352, %712
  %714 = sub i64 0, %713
  %715 = xor i64 %711, %710
  %716 = xor i64 %715, 3172392950535315277
  %717 = xor i64 %716, %707
  %718 = xor i64 %717, %714
  %719 = mul i64 %706, %718
  %720 = trunc i64 %719 to i32
  %721 = select i1 %669, i32 %694, i32 %720
  %722 = xor i32 %721, 0
  store i32 %722, i32* %2, align 4
  %723 = call i8** @bf777061424148142830(i32* %2)
  %724 = load i8*, i8** %723, align 8
  indirectbr i8* %724, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %341, %EntryBasicBlockSplit
  %725 = load i8*, i8** %4, align 8
  %726 = load i8, i8* %725, align 1
  %727 = mul i8 %726, 2
  %728 = mul i8 %726, 2
  %729 = sub i8 0, %728
  %730 = sub i8 2, %729
  %731 = mul i8 %727, %730
  %732 = srem i8 %731, 4
  %733 = icmp eq i8 %732, 0
  %734 = mul i8 %726, %726
  %735 = mul i8 %734, %726
  %736 = add i8 %735, %726
  %737 = and i64 %30, -8491119365383191403
  %738 = xor i64 %30, -1
  %739 = or i64 8491119365383191402, %738
  %740 = xor i64 %739, -1
  %741 = and i64 %740, -1
  %742 = or i64 %77, -7057414704619990197
  %743 = xor i64 %77, -1
  %744 = and i64 -7057414704619990197, %743
  %745 = add i64 %744, %77
  %746 = add i64 %30, -2210764545925722463
  %747 = add i64 1648575406823693334, %30
  %748 = add i64 %747, -3859339952749415797
  %749 = xor i64 %745, -4834366445325641259
  %750 = xor i64 %749, %737
  %751 = xor i64 %750, %741
  %752 = xor i64 %751, %748
  %753 = xor i64 %752, %742
  %754 = xor i64 %753, %746
  %755 = or i64 %30, 7217995543243816871
  %756 = and i64 7217995543243816871, %30
  %757 = xor i64 7217995543243816871, %30
  %758 = or i64 %756, %757
  %759 = or i64 %32, -8921909689825167276
  %760 = xor i64 %32, -1
  %761 = and i64 %760, 6578306776934552633
  %762 = and i64 %32, -6578306776934552634
  %763 = or i64 %761, %762
  %764 = xor i64 -2349237154156090259, %763
  %765 = xor i64 %32, -1
  %766 = or i64 8921909689825167275, %765
  %767 = xor i64 %766, -1
  %768 = and i64 %767, -1
  %769 = or i64 %764, %768
  %770 = xor i64 4820129307812736762, %759
  %771 = xor i64 %770, %769
  %772 = xor i64 %771, %755
  %773 = xor i64 %772, %758
  %774 = mul i64 %754, %773
  %775 = trunc i64 %774 to i8
  %776 = srem i8 %736, %775
  %777 = icmp eq i8 %776, 0
  %778 = xor i1 %733, true
  %779 = xor i1 %777, true
  %780 = or i1 %778, %779
  %781 = add i64 %32, 4792227596369037510
  %782 = xor i64 4792227596369037510, %32
  %783 = and i64 4792227596369037510, %32
  %784 = mul i64 2, %783
  %785 = add i64 %782, %784
  %786 = or i64 %0, 3953679032965958349
  %787 = and i64 3953679032965958349, %0
  %788 = xor i64 3953679032965958349, %0
  %789 = or i64 %787, %788
  %790 = xor i64 %786, %781
  %791 = xor i64 %790, %785
  %792 = xor i64 %791, 5519891504697835567
  %793 = xor i64 %792, %789
  %794 = and i64 %117, -4382147893611657531
  %795 = or i64 4382147893611657530, %117
  %796 = sub i64 %795, 4382147893611657530
  %797 = sext i32 %dispatcher1 to i64
  %798 = and i64 %797, 3101136291954332179
  %799 = xor i64 %797, -1
  %800 = xor i64 3101136291954332179, %799
  %801 = and i64 %800, 3101136291954332179
  %802 = xor i64 %801, %796
  %803 = xor i64 %802, -7919162674950748465
  %804 = xor i64 %803, %798
  %805 = xor i64 %804, %794
  %806 = mul i64 %793, %805
  %807 = trunc i64 %806 to i1
  %808 = xor i1 %780, %807
  %809 = and i1 %808, true
  %810 = or i64 %32, -8427377028060826177
  %811 = xor i64 %32, -1
  %812 = and i64 %811, 8854805744292918845
  %813 = and i64 %32, -8854805744292918846
  %814 = or i64 %812, %813
  %815 = xor i64 -1015166068390411390, %814
  %816 = xor i64 %32, -1
  %817 = or i64 8427377028060826176, %816
  %818 = xor i64 %817, -1
  %819 = and i64 %818, -1
  %820 = or i64 %815, %819
  %821 = or i64 %77, -3819680280200795622
  %822 = xor i64 %77, -1
  %823 = and i64 %822, -3779451414481012539
  %824 = and i64 %77, 3779451414481012538
  %825 = or i64 %823, %824
  %826 = xor i64 103993954236879583, %825
  %827 = xor i64 %77, -1
  %828 = or i64 3819680280200795621, %827
  %829 = xor i64 %828, -1
  %830 = and i64 %829, -1
  %831 = or i64 %826, %830
  %832 = xor i64 %810, 5148871098535338831
  %833 = xor i64 %832, %821
  %834 = xor i64 %833, %820
  %835 = xor i64 %834, %831
  %836 = and i64 %115, 7353760497248714731
  %837 = xor i64 %115, -1
  %838 = xor i64 7353760497248714731, %837
  %839 = and i64 %838, 7353760497248714731
  %840 = or i64 %115, 4915314330409567204
  %841 = xor i64 %115, -1
  %842 = and i64 %841, -5697071800440421303
  %843 = and i64 %115, 5697071800440421302
  %844 = or i64 %842, %843
  %845 = xor i64 -803510768645863507, %844
  %846 = xor i64 %115, -1
  %847 = or i64 -4915314330409567205, %846
  %848 = xor i64 %847, -1
  %849 = and i64 %848, -1
  %850 = or i64 %845, %849
  %851 = xor i64 %839, %836
  %852 = xor i64 %851, %840
  %853 = xor i64 %852, 5156581497553054485
  %854 = xor i64 %853, %850
  %855 = mul i64 %835, %854
  %856 = trunc i64 %855 to i32
  %857 = select i1 %809, i32 %856, i32 595012264
  %858 = xor i32 %857, 976180576
  %859 = and i64 %113, -7335490285817611216
  %860 = or i64 7335490285817611215, %113
  %861 = sub i64 %860, 7335490285817611215
  %862 = and i64 %32, 7043854000124531191
  %863 = or i64 -7043854000124531192, %32
  %864 = sub i64 %863, -7043854000124531192
  %865 = xor i64 %861, 4170042807129449549
  %866 = xor i64 %865, %859
  %867 = xor i64 %866, %862
  %868 = xor i64 %867, %864
  %869 = add i64 %30, 2042713274038052659
  %870 = sub i64 0, %30
  %871 = add i64 -2042713274038052659, %870
  %872 = sub i64 0, %871
  %873 = and i64 %0, -6379218188726128344
  %874 = or i64 6379218188726128343, %0
  %875 = sub i64 %874, 6379218188726128343
  %876 = or i64 %117, -8887879211315488014
  %877 = xor i64 %117, -1
  %878 = and i64 -8887879211315488014, %877
  %879 = add i64 %878, %117
  %880 = xor i64 %873, %869
  %881 = xor i64 %880, %872
  %882 = xor i64 %881, %879
  %883 = xor i64 %882, 1438828120694055423
  %884 = xor i64 %883, %876
  %885 = xor i64 %884, %875
  %886 = mul i64 %868, %885
  %887 = trunc i64 %886 to i32
  %888 = xor i32 %858, %887
  store i32 %888, i32* %2, align 4
  %889 = call i8** @bf777061424148142830(i32* %2)
  %890 = load i8*, i8** %889, align 8
  indirectbr i8* %890, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @render.extracted.11.extracted(i64 %0, i32 %1, i1* %.out) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012200)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@render.extracted.11.extracted, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012222)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@render.extracted.11.extracted, %loopEnd), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012205)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@render.extracted.11.extracted, %.exitStub.exitStub), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012204)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@render.extracted.11.extracted, %255), i8** %10, align 8
  %11 = or i64 %0, 5405881390394755989
  %12 = xor i64 %0, -1
  %13 = and i64 %12, 8864029811040553032
  %14 = and i64 %0, -8864029811040553033
  %15 = or i64 %13, %14
  %16 = xor i64 3460682465320125405, %15
  %17 = xor i64 %0, -1
  %18 = or i64 -5405881390394755990, %17
  %19 = xor i64 %18, -1
  %20 = and i64 %19, -1
  %21 = or i64 %16, %20
  %22 = sext i32 %1 to i64
  %23 = add i64 %22, 7312796285313163649
  %24 = sub i64 0, %22
  %25 = sub i64 7312796285313163649, %24
  %26 = xor i64 -2406689071486643705, %25
  %27 = xor i64 %26, %23
  %28 = xor i64 %27, %21
  %29 = xor i64 %28, %11
  %30 = and i64 %0, 6536892116285611077
  %31 = xor i64 %0, -1
  %32 = xor i64 6536892116285611077, %31
  %33 = and i64 %32, 6536892116285611077
  %34 = sext i32 %1 to i64
  %35 = or i64 %34, -7723671043078604681
  %36 = and i64 -7723671043078604681, %34
  %37 = xor i64 -7723671043078604681, %34
  %38 = or i64 %36, %37
  %39 = or i64 %0, 2999234333512615498
  %40 = and i64 2999234333512615498, %0
  %41 = xor i64 2999234333512615498, %0
  %42 = or i64 %40, %41
  %43 = xor i64 194453392275517232, %30
  %44 = xor i64 %43, %39
  %45 = xor i64 %44, %35
  %46 = xor i64 %45, %42
  %47 = xor i64 %46, %33
  %48 = xor i64 %47, %38
  %49 = mul i64 %29, %48
  %50 = call i64 @h11804894491772278134(i64 %49)
  %51 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %50
  store i8* blockaddress(@render.extracted.11.extracted, %EntryBasicBlockSplit), i8** %51, align 8
  %52 = call i64 @h11804894491772278134(i64 595012262)
  %53 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %52
  store i8* blockaddress(@render.extracted.11.extracted, %BogusBasicBlock), i8** %53, align 8
  %54 = call i64 @h11804894491772278134(i64 595012251)
  %55 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %54
  store i8* blockaddress(@render.extracted.11.extracted, %.exitStub1.exitStub), i8** %55, align 8
  %56 = call i64 @h11804894491772278134(i64 595012107)
  %57 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %56
  store i8* blockaddress(@render.extracted.11.extracted, %loopStart), i8** %57, align 8
  %lookupTable = alloca [9 x i32], align 4
  %58 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %58, align 4
  %59 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %59, align 4
  %60 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %60, align 4
  %61 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %62, align 4
  %63 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %64 = or i64 %0, 6790136586748196994
  %65 = and i64 6790136586748196994, %0
  %66 = xor i64 6790136586748196994, %0
  %67 = or i64 %65, %66
  %68 = or i64 %0, 2441308008959659144
  %69 = xor i64 %0, -1
  %70 = and i64 2441308008959659144, %69
  %71 = add i64 %70, %0
  %72 = xor i64 %67, %71
  %73 = xor i64 %72, %64
  %74 = xor i64 %73, 2997190559128818407
  %75 = xor i64 %74, %68
  %76 = sext i32 %1 to i64
  %77 = add i64 %76, -7961576735926004190
  %78 = xor i64 -7961576735926004190, %76
  %79 = and i64 -7961576735926004190, %76
  %80 = mul i64 2, %79
  %81 = add i64 %78, %80
  %82 = add i64 %0, 2661381948021711329
  %83 = and i64 2661381948021711329, %0
  %84 = or i64 2661381948021711329, %0
  %85 = add i64 %83, %84
  %86 = xor i64 7750877782768861614, %77
  %87 = xor i64 %86, %81
  %88 = xor i64 %87, %85
  %89 = xor i64 %88, %82
  %90 = mul i64 %75, %89
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %63, align 4
  %92 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %92, align 4
  %93 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %93, align 4
  %94 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %94, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012107, i32* %2, align 4
  %95 = call i8** @bf777061424148142830(i32* %2)
  %96 = load i8*, i8** %95, align 8
  indirectbr i8* %96, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %255
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub1.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %97 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %100 = load i32, i32* %99, align 4
  %101 = srem i32 %98, %100
  store i32 %101, i32* %dispatcher, align 4
  %102 = load i8*, i8** %57, align 8
  %103 = load i8, i8* %102, align 1
  %104 = mul i8 %103, 2
  %105 = mul i8 %103, 2
  %106 = add i8 2, %105
  %107 = mul i8 %104, %106
  %108 = srem i8 %107, 4
  %109 = icmp eq i8 %108, 0
  %110 = mul i8 %103, %103
  %111 = mul i8 %110, %103
  %112 = sext i32 %1 to i64
  %113 = and i64 %112, 2272319575561169039
  %114 = xor i64 %112, -1
  %115 = or i64 -2272319575561169040, %114
  %116 = xor i64 %115, -1
  %117 = and i64 %116, -1
  %118 = or i64 %52, 4051879079023433751
  %119 = xor i64 %52, -1
  %120 = and i64 4051879079023433751, %119
  %121 = add i64 %120, %52
  %122 = or i64 %7, 7367316307919253709
  %123 = xor i64 %7, -1
  %124 = and i64 %123, 8246979489935114324
  %125 = and i64 %7, -8246979489935114325
  %126 = or i64 %124, %125
  %127 = xor i64 1463352133708148889, %126
  %128 = xor i64 %7, -1
  %129 = or i64 -7367316307919253710, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = or i64 %127, %131
  %133 = xor i64 %118, %113
  %134 = xor i64 %133, %117
  %135 = xor i64 %134, %132
  %136 = xor i64 %135, %122
  %137 = xor i64 %136, 7923952894840489417
  %138 = xor i64 %137, %121
  %139 = sext i32 %1 to i64
  %140 = and i64 %139, 325970075377326246
  %141 = or i64 -325970075377326247, %139
  %142 = sub i64 %141, -325970075377326247
  %143 = or i64 %7, 3182327689976973981
  %144 = and i64 3182327689976973981, %7
  %145 = xor i64 3182327689976973981, %7
  %146 = or i64 %144, %145
  %147 = or i64 %54, -7811271205110789389
  %148 = xor i64 %54, -1
  %149 = and i64 -7811271205110789389, %148
  %150 = add i64 %149, %54
  %151 = xor i64 %143, %147
  %152 = xor i64 %151, %140
  %153 = xor i64 %152, -4086272426066355498
  %154 = xor i64 %153, %146
  %155 = xor i64 %154, %150
  %156 = xor i64 %155, %142
  %157 = mul i64 %138, %156
  %158 = trunc i64 %157 to i8
  %159 = sub i8 %111, %158
  %160 = add i8 %159, %103
  %161 = add i8 %160, 6
  %162 = and i64 %5, -268137643508706918
  %163 = xor i64 %5, -1
  %164 = xor i64 -268137643508706918, %163
  %165 = and i64 %164, -268137643508706918
  %166 = or i64 %3, 1272348431134500611
  %167 = and i64 1272348431134500611, %3
  %168 = xor i64 1272348431134500611, %3
  %169 = or i64 %167, %168
  %170 = sext i32 %1 to i64
  %171 = and i64 %170, 6053174967781809824
  %172 = or i64 -6053174967781809825, %170
  %173 = sub i64 %172, -6053174967781809825
  %174 = xor i64 %165, %169
  %175 = xor i64 %174, %162
  %176 = xor i64 %175, -706675987954620231
  %177 = xor i64 %176, %166
  %178 = xor i64 %177, %173
  %179 = xor i64 %178, %171
  %180 = or i64 %5, -7153289009098432065
  %181 = xor i64 %5, -1
  %182 = and i64 %181, 3032404775203815635
  %183 = and i64 %5, -3032404775203815636
  %184 = or i64 %182, %183
  %185 = xor i64 -5282953705316703892, %184
  %186 = xor i64 %5, -1
  %187 = or i64 7153289009098432064, %186
  %188 = xor i64 %187, -1
  %189 = and i64 %188, -1
  %190 = or i64 %185, %189
  %191 = add i64 %52, 12430964528221585
  %192 = and i64 12430964528221585, %52
  %193 = or i64 12430964528221585, %52
  %194 = add i64 %192, %193
  %195 = add i64 %54, -8986037636478856
  %196 = add i64 3389220091444382840, %54
  %197 = sub i64 %196, 3398206129080861696
  %198 = xor i64 %197, %195
  %199 = xor i64 %198, %180
  %200 = xor i64 %199, %191
  %201 = xor i64 %200, -5699833286716966126
  %202 = xor i64 %201, %194
  %203 = xor i64 %202, %190
  %204 = mul i64 %179, %203
  %205 = trunc i64 %204 to i8
  %206 = srem i8 %161, %205
  %207 = icmp eq i8 %206, 0
  %208 = and i1 %109, %207
  %209 = select i1 %208, i32 595012107, i32 595012222
  %210 = and i64 %50, 3158539831153023951
  %211 = xor i64 %50, -1
  %212 = or i64 -3158539831153023952, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = and i64 %9, -3866984654678141213
  %216 = or i64 3866984654678141212, %9
  %217 = sub i64 %216, 3866984654678141212
  %218 = xor i64 %214, 3540446813520742959
  %219 = xor i64 %218, %210
  %220 = xor i64 %219, %217
  %221 = xor i64 %220, %215
  %222 = sext i32 %dispatcher1 to i64
  %223 = add i64 %222, 2487226240241410652
  %224 = xor i64 2487226240241410652, %222
  %225 = and i64 2487226240241410652, %222
  %226 = mul i64 2, %225
  %227 = add i64 %224, %226
  %228 = and i64 %52, 359802333184439823
  %229 = xor i64 %52, -1
  %230 = or i64 -359802333184439824, %229
  %231 = xor i64 %230, -1
  %232 = and i64 %231, -1
  %233 = or i64 %52, -6738053171063461548
  %234 = xor i64 %52, -1
  %235 = and i64 %234, 4863011372341965848
  %236 = and i64 %52, -4863011372341965849
  %237 = or i64 %235, %236
  %238 = xor i64 -2233429977134408372, %237
  %239 = xor i64 %52, -1
  %240 = or i64 6738053171063461547, %239
  %241 = xor i64 %240, -1
  %242 = and i64 %241, -1
  %243 = or i64 %238, %242
  %244 = xor i64 -378037188556633445, %232
  %245 = xor i64 %244, %223
  %246 = xor i64 %245, %243
  %247 = xor i64 %246, %227
  %248 = xor i64 %247, %233
  %249 = xor i64 %248, %228
  %250 = mul i64 %221, %249
  %251 = trunc i64 %250 to i32
  %252 = xor i32 %209, %251
  store i32 %252, i32* %2, align 4
  %253 = call i8** @bf777061424148142830(i32* %2)
  %254 = load i8*, i8** %253, align 8
  indirectbr i8* %254, [label %loopEnd, label %EntryBasicBlockSplit]

255:                                              ; preds = %255, %loopStart
  %256 = icmp eq i64 %0, 0
  %257 = or i64 %0, -4770302646317177961
  %258 = xor i64 %0, -1
  %259 = and i64 -4770302646317177961, %258
  %260 = add i64 %259, %0
  %261 = or i64 %3, -4938037589715787777
  %262 = xor i64 %3, -1
  %263 = and i64 %262, 8111065812887912255
  %264 = and i64 %3, -8111065812887912256
  %265 = or i64 %263, %264
  %266 = xor i64 -3753508841526304576, %265
  %267 = xor i64 %3, -1
  %268 = or i64 4938037589715787776, %267
  %269 = xor i64 %268, -1
  %270 = and i64 %269, -1
  %271 = or i64 %266, %270
  %272 = xor i64 -8157885679948757835, %257
  %273 = xor i64 %272, %260
  %274 = xor i64 %273, %271
  %275 = xor i64 %274, %261
  %276 = sext i32 %1 to i64
  %277 = add i64 %276, 3209419774824196009
  %278 = add i64 -5155492604656795608, %276
  %279 = sub i64 %278, -8364912379480991617
  %280 = add i64 %9, 4943883383064416919
  %281 = and i64 4943883383064416919, %9
  %282 = or i64 4943883383064416919, %9
  %283 = add i64 %281, %282
  %284 = and i64 %3, 4292010066185161222
  %285 = or i64 -4292010066185161223, %3
  %286 = sub i64 %285, -4292010066185161223
  %287 = xor i64 %277, %286
  %288 = xor i64 %287, %284
  %289 = xor i64 %288, -6564048286873382086
  %290 = xor i64 %289, %280
  %291 = xor i64 %290, %283
  %292 = xor i64 %291, %279
  %293 = mul i64 %275, %292
  %294 = trunc i64 %293 to i32
  %295 = mul i32 %1, %294
  %296 = mul i32 %1, 2
  %297 = add i32 2, %296
  %298 = mul i32 %295, %297
  %299 = srem i32 %298, 4
  %300 = icmp eq i32 %299, 0
  %301 = mul i32 %1, %1
  %302 = mul i32 %301, %1
  %303 = add i32 %302, %1
  %304 = and i64 %52, -7977350065551660638
  %305 = xor i64 %52, -1
  %306 = or i64 7977350065551660637, %305
  %307 = xor i64 %306, -1
  %308 = and i64 %307, -1
  %309 = sext i32 %1 to i64
  %310 = or i64 %309, 593296891251283092
  %311 = and i64 593296891251283092, %309
  %312 = xor i64 593296891251283092, %309
  %313 = or i64 %311, %312
  %314 = xor i64 %313, -1891734232956466431
  %315 = xor i64 %314, %310
  %316 = xor i64 %315, %304
  %317 = xor i64 %316, %308
  %318 = sext i32 %dispatcher1 to i64
  %319 = or i64 %318, 6398374178475933671
  %320 = xor i64 %318, -1
  %321 = and i64 6398374178475933671, %320
  %322 = add i64 %321, %318
  %323 = and i64 %52, -7376752447696260273
  %324 = xor i64 %52, -1
  %325 = or i64 7376752447696260272, %324
  %326 = xor i64 %325, -1
  %327 = and i64 %326, -1
  %328 = add i64 %5, -71118893161408166
  %329 = sub i64 0, %5
  %330 = sub i64 -71118893161408166, %329
  %331 = xor i64 %323, %322
  %332 = xor i64 %331, -8032348873004160510
  %333 = xor i64 %332, %327
  %334 = xor i64 %333, %330
  %335 = xor i64 %334, %328
  %336 = xor i64 %335, %319
  %337 = mul i64 %317, %336
  %338 = trunc i64 %337 to i32
  %339 = srem i32 %303, %338
  %340 = icmp eq i32 %339, 0
  %341 = and i1 %300, %340
  store i1 %341, i1* %.out, align 1
  %342 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = sub i32 0, %345
  %347 = sub i32 %343, %346
  %348 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %349 = load i32, i32* %348, align 4
  %350 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %351 = load i32, i32* %350, align 4
  %352 = srem i32 %349, %351
  %353 = select i1 %341, i32 %347, i32 %352
  store i32 %353, i32* %dispatcher, align 4
  %354 = load i8*, i8** %55, align 8
  %355 = load i8, i8* %354, align 1
  %356 = and i8 %355, 1
  %357 = icmp eq i8 %356, 1
  %358 = mul i8 %355, %355
  %359 = add i8 %358, %355
  %360 = srem i8 %359, 2
  %361 = add i64 %56, 3724272778862980164
  %362 = and i64 3724272778862980164, %56
  %363 = or i64 3724272778862980164, %56
  %364 = add i64 %362, %363
  %365 = or i64 %54, -3835007438911385301
  %366 = xor i64 %54, -1
  %367 = and i64 %366, 1483833360473641462
  %368 = and i64 %54, -1483833360473641463
  %369 = or i64 %367, %368
  %370 = xor i64 -2427172356665179939, %369
  %371 = xor i64 %54, -1
  %372 = or i64 3835007438911385300, %371
  %373 = xor i64 %372, -1
  %374 = and i64 %373, -1
  %375 = or i64 %370, %374
  %376 = xor i64 %365, %375
  %377 = xor i64 %376, %364
  %378 = xor i64 %377, %361
  %379 = xor i64 %378, 5205060876223080653
  %380 = add i64 %0, 3815543683511911258
  %381 = and i64 3815543683511911258, %0
  %382 = or i64 3815543683511911258, %0
  %383 = add i64 %381, %382
  %384 = sext i32 %dispatcher1 to i64
  %385 = add i64 %384, 2494532349804810329
  %386 = sub i64 0, %384
  %387 = sub i64 2494532349804810329, %386
  %388 = xor i64 %383, %385
  %389 = xor i64 %388, 0
  %390 = xor i64 %389, %387
  %391 = xor i64 %390, %380
  %392 = mul i64 %379, %391
  %393 = trunc i64 %392 to i8
  %394 = icmp eq i8 %360, %393
  %395 = xor i1 %394, true
  %396 = and i1 %357, %395
  %397 = add i1 %396, %394
  %398 = select i1 %397, i32 595012200, i32 595012222
  %399 = xor i32 %398, 22
  store i32 %399, i32* %2, align 4
  %400 = call i8** @bf777061424148142830(i32* %2)
  %401 = load i8*, i8** %400, align 8
  indirectbr i8* %401, [label %loopEnd, label %255]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub1.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %402 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %402, align 4
  %403 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %403, align 4
  %404 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %404, align 4
  %405 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %405, align 4
  %406 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %406, align 4
  %407 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %408 = load i32, i32* %407, align 4
  store i32 %408, i32* %dispatcher, align 4
  %409 = load i8*, i8** %53, align 8
  %410 = load i8, i8* %409, align 1
  %411 = mul i8 %410, 2
  %412 = mul i8 %410, 2
  %413 = add i8 2, %412
  %414 = mul i8 %411, %413
  %415 = srem i8 %414, 4
  %416 = add i64 %52, -6945090757676813479
  %417 = sub i64 0, %52
  %418 = sub i64 -6945090757676813479, %417
  %419 = add i64 %5, -5855129010175389349
  %420 = and i64 -5855129010175389349, %5
  %421 = or i64 -5855129010175389349, %5
  %422 = add i64 %420, %421
  %423 = or i64 %3, 8222360087342177459
  %424 = xor i64 %3, -1
  %425 = and i64 %424, 8163873760966549902
  %426 = and i64 %3, -8163873760966549903
  %427 = or i64 %425, %426
  %428 = xor i64 238786442139696445, %427
  %429 = xor i64 %3, -1
  %430 = or i64 -8222360087342177460, %429
  %431 = xor i64 %430, -1
  %432 = and i64 %431, -1
  %433 = or i64 %428, %432
  %434 = xor i64 %433, %418
  %435 = xor i64 %434, %416
  %436 = xor i64 %435, %422
  %437 = xor i64 %436, %423
  %438 = xor i64 %437, 5367080365886575931
  %439 = xor i64 %438, %419
  %440 = sext i32 %1 to i64
  %441 = or i64 %440, 8890652487155310735
  %442 = and i64 8890652487155310735, %440
  %443 = xor i64 8890652487155310735, %440
  %444 = or i64 %442, %443
  %445 = add i64 %0, 1592171447299751800
  %446 = add i64 -6414527694696133850, %0
  %447 = sub i64 %446, -8006699141995885650
  %448 = xor i64 %441, %444
  %449 = xor i64 %448, %445
  %450 = xor i64 %449, 0
  %451 = xor i64 %450, %447
  %452 = mul i64 %439, %451
  %453 = trunc i64 %452 to i8
  %454 = icmp eq i8 %415, %453
  %455 = mul i8 %410, %410
  %456 = add i8 %455, %410
  %457 = srem i8 %456, 2
  %458 = icmp eq i8 %457, 0
  %459 = and i1 %454, %458
  %460 = add i64 %50, -8452866177724654153
  %461 = add i64 186312531571054566, %50
  %462 = sub i64 %461, 8639178709295708719
  %463 = or i64 %3, 4662257783989671787
  %464 = and i64 4662257783989671787, %3
  %465 = xor i64 4662257783989671787, %3
  %466 = or i64 %464, %465
  %467 = xor i64 %463, %466
  %468 = xor i64 %467, %460
  %469 = xor i64 %468, %462
  %470 = xor i64 %469, -1332659958775029679
  %471 = and i64 %5, 5231729142064746648
  %472 = xor i64 %5, -1
  %473 = or i64 -5231729142064746649, %472
  %474 = xor i64 %473, -1
  %475 = and i64 %474, -1
  %476 = or i64 %7, -2820767823770804995
  %477 = xor i64 %7, -1
  %478 = and i64 -2820767823770804995, %477
  %479 = add i64 %478, %7
  %480 = xor i64 %476, 207777005238611142
  %481 = xor i64 %480, %475
  %482 = xor i64 %481, %471
  %483 = xor i64 %482, %479
  %484 = mul i64 %470, %483
  %485 = trunc i64 %484 to i32
  %486 = select i1 %459, i32 %485, i32 595012176
  %487 = xor i32 %486, 246
  store i32 %487, i32* %2, align 4
  %488 = call i8** @bf777061424148142830(i32* %2)
  %489 = load i8*, i8** %488, align 8
  indirectbr i8* %489, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %490 = load i8*, i8** %6, align 8
  %491 = load i8, i8* %490, align 1
  %492 = mul i8 %491, 2
  %493 = mul i8 %491, 2
  %494 = add i8 2, %493
  %495 = mul i8 %492, %494
  %496 = srem i8 %495, 4
  %497 = icmp eq i8 %496, 0
  %498 = mul i8 %491, %491
  %499 = and i8 %498, %491
  %500 = or i8 %498, %491
  %501 = add i8 %499, %500
  %502 = srem i8 %501, 2
  %503 = icmp eq i8 %502, 0
  %504 = or i1 %497, %503
  %505 = select i1 %504, i32 595012251, i32 595012222
  %506 = xor i32 %505, 229
  store i32 %506, i32* %2, align 4
  %507 = call i8** @bf777061424148142830(i32* %2)
  %508 = load i8*, i8** %507, align 8
  indirectbr i8* %508, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %255, %EntryBasicBlockSplit
  %509 = load i8*, i8** %53, align 8
  %510 = load i8, i8* %509, align 1
  %511 = mul i8 %510, 2
  %512 = mul i8 %510, 2
  %513 = add i8 2, %512
  %514 = mul i8 %511, %513
  %515 = or i64 %52, -3919266235291140089
  %516 = xor i64 %52, -1
  %517 = and i64 %516, -5088553977017639334
  %518 = and i64 %52, 5088553977017639333
  %519 = or i64 %517, %518
  %520 = xor i64 8140866562039766621, %519
  %521 = xor i64 %52, -1
  %522 = or i64 3919266235291140088, %521
  %523 = xor i64 %522, -1
  %524 = and i64 %523, -1
  %525 = or i64 %520, %524
  %526 = add i64 %5, 8444454079746257076
  %527 = add i64 2240921255184183684, %5
  %528 = sub i64 %527, -6203532824562073392
  %529 = or i64 %0, 6662000891962398689
  %530 = xor i64 %0, -1
  %531 = and i64 %530, -7563416240826616346
  %532 = and i64 %0, 7563416240826616345
  %533 = or i64 %531, %532
  %534 = xor i64 -3783736703641263609, %533
  %535 = xor i64 %0, -1
  %536 = or i64 -6662000891962398690, %535
  %537 = xor i64 %536, -1
  %538 = and i64 %537, -1
  %539 = or i64 %534, %538
  %540 = xor i64 %539, 7374817165643640365
  %541 = xor i64 %540, %525
  %542 = xor i64 %541, %528
  %543 = xor i64 %542, %526
  %544 = xor i64 %543, %515
  %545 = xor i64 %544, %529
  %546 = add i64 %5, -6421796944645175331
  %547 = add i64 -771695056764973207, %5
  %548 = add i64 %547, -5650101887880202124
  %549 = add i64 %0, -4458338749812302373
  %550 = add i64 7630838426909295955, %0
  %551 = sub i64 %550, -6357566896987953288
  %552 = or i64 %0, 2742905452475509557
  %553 = and i64 2742905452475509557, %0
  %554 = xor i64 2742905452475509557, %0
  %555 = or i64 %553, %554
  %556 = xor i64 %551, %555
  %557 = xor i64 %556, %549
  %558 = xor i64 %557, %546
  %559 = xor i64 %558, %552
  %560 = xor i64 %559, %548
  %561 = xor i64 %560, -9023506453074262380
  %562 = mul i64 %545, %561
  %563 = trunc i64 %562 to i8
  %564 = srem i8 %514, %563
  %565 = icmp eq i8 %564, 0
  %566 = mul i8 %510, %510
  %567 = mul i8 %566, %510
  %568 = add i8 %567, %510
  %569 = srem i8 %568, 2
  %570 = icmp eq i8 %569, 0
  %571 = xor i1 %570, true
  %572 = xor i1 %565, %571
  %573 = and i1 %572, %565
  %574 = or i64 %9, -2447571727053286144
  %575 = and i64 -2447571727053286144, %9
  %576 = xor i64 -2447571727053286144, %9
  %577 = or i64 %575, %576
  %578 = or i64 %3, 6932394020046856065
  %579 = xor i64 %3, -1
  %580 = and i64 %579, 2238222732939228564
  %581 = and i64 %3, -2238222732939228565
  %582 = or i64 %580, %581
  %583 = xor i64 9167934755925436949, %582
  %584 = xor i64 %3, -1
  %585 = or i64 -6932394020046856066, %584
  %586 = xor i64 %585, -1
  %587 = and i64 %586, -1
  %588 = or i64 %583, %587
  %589 = xor i64 %588, %577
  %590 = xor i64 %589, -7096891178063380007
  %591 = xor i64 %590, %574
  %592 = xor i64 %591, %578
  %593 = or i64 %7, -2649800168533512531
  %594 = xor i64 %7, -1
  %595 = and i64 %594, -4444317682670618214
  %596 = and i64 %7, 4444317682670618213
  %597 = or i64 %595, %596
  %598 = xor i64 1830880736742479671, %597
  %599 = xor i64 %7, -1
  %600 = or i64 2649800168533512530, %599
  %601 = xor i64 %600, -1
  %602 = and i64 %601, -1
  %603 = or i64 %598, %602
  %604 = or i64 %52, 1346683301055683429
  %605 = xor i64 %52, -1
  %606 = and i64 %605, -1544942803536013803
  %607 = and i64 %52, 1544942803536013802
  %608 = or i64 %606, %607
  %609 = xor i64 -558688351902806672, %608
  %610 = xor i64 %52, -1
  %611 = or i64 -1346683301055683430, %610
  %612 = xor i64 %611, -1
  %613 = and i64 %612, -1
  %614 = or i64 %609, %613
  %615 = xor i64 %593, %603
  %616 = xor i64 %615, %604
  %617 = xor i64 %616, 8226491258352029260
  %618 = xor i64 %617, %614
  %619 = mul i64 %592, %618
  %620 = trunc i64 %619 to i32
  %621 = select i1 %573, i32 %620, i32 595012107
  %622 = xor i32 %621, 103
  store i32 %622, i32* %2, align 4
  %623 = call i8** @bf777061424148142830(i32* %2)
  %624 = load i8*, i8** %623, align 8
  indirectbr i8* %624, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @clear..split(i8* %0, float* %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012125)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@clear..split, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012194)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@clear..split, %.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012114)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@clear..split, %loopEnd), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012132)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@clear..split, %.exitStub1), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012262)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@clear..split, %BogusBasicBlock), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012192)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@clear..split, %.split), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012222)
  %16 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %15
  store i8* blockaddress(@clear..split, %EntryBasicBlockSplit), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012193)
  %18 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %17
  store i8* blockaddress(@clear..split, %loopStart), i8** %18, align 8
  %lookupTable = alloca [9 x i32], align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %26, align 4
  %27 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %27, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012193, i32* %2, align 4
  %28 = call i8** @bf777061424148142830(i32* %2)
  %29 = load i8*, i8** %28, align 8
  indirectbr i8* %29, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %30 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %31, %33
  store i32 %34, i32* %dispatcher, align 4
  %35 = load i8*, i8** %16, align 8
  %36 = load i8, i8* %35, align 1
  %37 = mul i8 %36, 2
  %38 = mul i8 %36, 2
  %39 = add i8 2, %38
  %40 = mul i8 %37, %39
  %41 = srem i8 %40, 4
  %42 = icmp eq i8 %41, 0
  %43 = mul i8 %36, %36
  %44 = mul i8 %43, %36
  %45 = and i8 %44, %36
  %46 = or i8 %44, %36
  %47 = add i8 %45, %46
  %48 = or i64 %13, -6960327708068540543
  %49 = xor i64 %13, -1
  %50 = and i64 %49, -1025090834989966717
  %51 = and i64 %13, 1025090834989966716
  %52 = or i64 %50, %51
  %53 = xor i64 7971889771547858178, %52
  %54 = xor i64 %13, -1
  %55 = or i64 6960327708068540542, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = or i64 %53, %57
  %59 = and i64 %7, 3534070946316403516
  %60 = or i64 -3534070946316403517, %7
  %61 = sub i64 %60, -3534070946316403517
  %62 = xor i64 %61, %59
  %63 = xor i64 %62, 5345187128520349991
  %64 = xor i64 %63, %48
  %65 = xor i64 %64, %58
  %66 = and i64 %3, -6943984923041570728
  %67 = xor i64 %3, -1
  %68 = or i64 6943984923041570727, %67
  %69 = xor i64 %68, -1
  %70 = and i64 %69, -1
  %71 = or i64 %5, 8864297346649035579
  %72 = xor i64 %5, -1
  %73 = and i64 8864297346649035579, %72
  %74 = add i64 %73, %5
  %75 = and i64 %15, 848290579442961069
  %76 = or i64 -848290579442961070, %15
  %77 = sub i64 %76, -848290579442961070
  %78 = xor i64 %77, %70
  %79 = xor i64 %78, %71
  %80 = xor i64 %79, %75
  %81 = xor i64 %80, 6163119935142989102
  %82 = xor i64 %81, %74
  %83 = xor i64 %82, %66
  %84 = mul i64 %65, %83
  %85 = trunc i64 %84 to i8
  %86 = srem i8 %47, %85
  %87 = icmp eq i8 %86, 0
  %88 = and i1 %42, %87
  %89 = and i64 %3, -3698545241682071220
  %90 = xor i64 %3, -1
  %91 = xor i64 -3698545241682071220, %90
  %92 = and i64 %91, -3698545241682071220
  %93 = or i64 %9, -3143095677984073138
  %94 = xor i64 %9, -1
  %95 = and i64 %94, -2286611629510811750
  %96 = and i64 %9, 2286611629510811749
  %97 = or i64 %95, %96
  %98 = xor i64 3757455595163780564, %97
  %99 = xor i64 %9, -1
  %100 = or i64 3143095677984073137, %99
  %101 = xor i64 %100, -1
  %102 = and i64 %101, -1
  %103 = or i64 %98, %102
  %104 = and i64 %11, 1711616461613599235
  %105 = or i64 -1711616461613599236, %11
  %106 = sub i64 %105, -1711616461613599236
  %107 = xor i64 -2396704323990930863, %104
  %108 = xor i64 %107, %103
  %109 = xor i64 %108, %89
  %110 = xor i64 %109, %93
  %111 = xor i64 %110, %92
  %112 = xor i64 %111, %106
  %113 = and i64 %3, -7793102680105808019
  %114 = or i64 7793102680105808018, %3
  %115 = sub i64 %114, 7793102680105808018
  %116 = sext i32 %dispatcher1 to i64
  %117 = or i64 %116, -4173278373035990301
  %118 = xor i64 %116, -1
  %119 = and i64 %118, 1200485088801630939
  %120 = and i64 %116, -1200485088801630940
  %121 = or i64 %119, %120
  %122 = xor i64 -2973092920481937352, %121
  %123 = xor i64 %116, -1
  %124 = or i64 4173278373035990300, %123
  %125 = xor i64 %124, -1
  %126 = and i64 %125, -1
  %127 = or i64 %122, %126
  %128 = xor i64 %127, %117
  %129 = xor i64 %128, %113
  %130 = xor i64 %129, 6947751046925327076
  %131 = xor i64 %130, %115
  %132 = mul i64 %112, %131
  %133 = trunc i64 %132 to i32
  %134 = select i1 %88, i32 %133, i32 595012114
  %135 = xor i32 %134, -1
  %136 = and i32 %135, 54
  %137 = add i64 %17, -7996486952792646028
  %138 = xor i64 -7996486952792646028, %17
  %139 = and i64 -7996486952792646028, %17
  %140 = mul i64 2, %139
  %141 = add i64 %138, %140
  %142 = add i64 %9, 5589039578106777915
  %143 = add i64 4468510419760653532, %9
  %144 = sub i64 %143, -1120529158346124383
  %145 = add i64 %13, -2527071532726343262
  %146 = add i64 -9177286872462367200, %13
  %147 = add i64 %146, 6650215339736023938
  %148 = xor i64 %142, -1567994745933633681
  %149 = xor i64 %148, %137
  %150 = xor i64 %149, %141
  %151 = xor i64 %150, %147
  %152 = xor i64 %151, %144
  %153 = xor i64 %152, %145
  %154 = add i64 %13, -4393373482473661738
  %155 = add i64 -8665002448656145991, %13
  %156 = sub i64 %155, -4271628966182484253
  %157 = and i64 %17, 1516366096818033559
  %158 = or i64 -1516366096818033560, %17
  %159 = sub i64 %158, -1516366096818033560
  %160 = or i64 %15, -2260736041596018237
  %161 = xor i64 %15, -1
  %162 = and i64 -2260736041596018237, %161
  %163 = add i64 %162, %15
  %164 = xor i64 %163, %157
  %165 = xor i64 %164, %156
  %166 = xor i64 %165, %160
  %167 = xor i64 %166, -4723246343141216185
  %168 = xor i64 %167, %154
  %169 = xor i64 %168, %159
  %170 = mul i64 %153, %169
  %171 = trunc i64 %170 to i32
  %172 = and i32 %134, %171
  %173 = or i32 %136, %172
  store i32 %173, i32* %2, align 4
  %174 = call i8** @bf777061424148142830(i32* %2)
  %175 = load i8*, i8** %174, align 8
  indirectbr i8* %175, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %176 = icmp eq i8* %0, null
  %177 = icmp eq float* %1, null
  %178 = select i1 %176, i1 true, i1 %177
  %179 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %182 = load i32, i32* %181, align 4
  %183 = srem i32 %180, %182
  %184 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %187 = load i32, i32* %186, align 4
  %188 = sub i32 %185, 1465618380
  %189 = sub i32 %188, %187
  %190 = add i32 %189, 1465618380
  %191 = select i1 %178, i32 %183, i32 %190
  store i32 %191, i32* %dispatcher, align 4
  %192 = load i8*, i8** %16, align 8
  %193 = load i8, i8* %192, align 1
  %194 = and i8 %193, 1
  %195 = or i64 %13, 7338087418366721670
  %196 = xor i64 %13, -1
  %197 = and i64 7338087418366721670, %196
  %198 = add i64 %197, %13
  %199 = and i64 %13, -1613909357663258322
  %200 = xor i64 %13, -1
  %201 = xor i64 -1613909357663258322, %200
  %202 = and i64 %201, -1613909357663258322
  %203 = xor i64 %198, %195
  %204 = xor i64 %203, -1344303985974073883
  %205 = xor i64 %204, %202
  %206 = xor i64 %205, %199
  %207 = and i64 %5, -6331543461451056624
  %208 = or i64 6331543461451056623, %5
  %209 = sub i64 %208, 6331543461451056623
  %210 = and i64 %5, -7164745002382971941
  %211 = xor i64 %5, -1
  %212 = or i64 7164745002382971940, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = add i64 %5, -4227328098062233293
  %216 = xor i64 -4227328098062233293, %5
  %217 = and i64 -4227328098062233293, %5
  %218 = mul i64 2, %217
  %219 = add i64 %216, %218
  %220 = xor i64 %210, %219
  %221 = xor i64 %220, %214
  %222 = xor i64 %221, %207
  %223 = xor i64 %222, %209
  %224 = xor i64 %223, 0
  %225 = xor i64 %224, %215
  %226 = mul i64 %206, %225
  %227 = trunc i64 %226 to i8
  %228 = icmp eq i8 %194, %227
  %229 = mul i8 %193, %193
  %230 = xor i8 %229, %193
  %231 = and i8 %229, %193
  %232 = mul i8 2, %231
  %233 = add i8 %230, %232
  %234 = mul i8 %233, 3
  %235 = srem i8 %234, 2
  %236 = icmp eq i8 %235, 0
  %237 = or i1 %228, %236
  %238 = select i1 %237, i32 595012193, i32 595012114
  %239 = xor i32 %238, 115
  store i32 %239, i32* %2, align 4
  %240 = call i8** @bf777061424148142830(i32* %2)
  %241 = load i8*, i8** %240, align 8
  indirectbr i8* %241, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %242 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %242, align 4
  %243 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %243, align 4
  %244 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %244, align 4
  %245 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %245, align 4
  %246 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %246, align 4
  %247 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %248 = load i32, i32* %247, align 4
  store i32 %248, i32* %dispatcher, align 4
  %249 = load i8*, i8** %8, align 8
  %250 = load i8, i8* %249, align 1
  %251 = mul i8 %250, %250
  %252 = sub i8 %251, -115
  %253 = add i8 %252, %250
  %254 = add i8 %253, -115
  %255 = mul i8 %254, 3
  %256 = add i64 %15, -4288867494235742083
  %257 = add i64 6263408679184727837, %15
  %258 = add i64 %257, 7894467900289081696
  %259 = and i64 %13, 2480177156676387063
  %260 = xor i64 %13, -1
  %261 = xor i64 2480177156676387063, %260
  %262 = and i64 %261, 2480177156676387063
  %263 = xor i64 %256, %262
  %264 = xor i64 %263, %259
  %265 = xor i64 %264, 8803004607626975903
  %266 = xor i64 %265, %258
  %267 = and i64 %11, 7161140115113146632
  %268 = xor i64 %11, -1
  %269 = xor i64 7161140115113146632, %268
  %270 = and i64 %269, 7161140115113146632
  %271 = add i64 %11, 7800800943360739974
  %272 = add i64 8164186402954587685, %11
  %273 = add i64 %272, -363385459593847711
  %274 = xor i64 %267, -6767148202162257218
  %275 = xor i64 %274, %273
  %276 = xor i64 %275, %271
  %277 = xor i64 %276, %270
  %278 = mul i64 %266, %277
  %279 = trunc i64 %278 to i8
  %280 = srem i8 %255, %279
  %281 = and i64 %11, 4084126721598395827
  %282 = or i64 -4084126721598395828, %11
  %283 = sub i64 %282, -4084126721598395828
  %284 = and i64 %11, -4061586733357269360
  %285 = or i64 4061586733357269359, %11
  %286 = sub i64 %285, 4061586733357269359
  %287 = or i64 %7, 1871415641216617703
  %288 = xor i64 %7, -1
  %289 = and i64 1871415641216617703, %288
  %290 = add i64 %289, %7
  %291 = xor i64 %286, %283
  %292 = xor i64 %291, %287
  %293 = xor i64 %292, 1813358303195256541
  %294 = xor i64 %293, %290
  %295 = xor i64 %294, %284
  %296 = xor i64 %295, %281
  %297 = add i64 %13, -4144520622758625052
  %298 = sub i64 0, %13
  %299 = add i64 4144520622758625052, %298
  %300 = sub i64 0, %299
  %301 = or i64 %15, 3814725599848993650
  %302 = xor i64 %15, -1
  %303 = and i64 %302, -1052383454817531974
  %304 = and i64 %15, 1052383454817531973
  %305 = or i64 %303, %304
  %306 = xor i64 -4209301690277636920, %305
  %307 = xor i64 %15, -1
  %308 = or i64 -3814725599848993651, %307
  %309 = xor i64 %308, -1
  %310 = and i64 %309, -1
  %311 = or i64 %306, %310
  %312 = xor i64 %300, 0
  %313 = xor i64 %312, %301
  %314 = xor i64 %313, %297
  %315 = xor i64 %314, %311
  %316 = mul i64 %296, %315
  %317 = trunc i64 %316 to i8
  %318 = icmp eq i8 %280, %317
  %319 = mul i8 %250, %250
  %320 = add i8 %319, %250
  %321 = or i64 %15, 493196549733825105
  %322 = xor i64 %15, -1
  %323 = and i64 493196549733825105, %322
  %324 = add i64 %323, %15
  %325 = or i64 %13, -5659823863466566090
  %326 = and i64 -5659823863466566090, %13
  %327 = xor i64 -5659823863466566090, %13
  %328 = or i64 %326, %327
  %329 = and i64 %15, -7031806264830750568
  %330 = or i64 7031806264830750567, %15
  %331 = sub i64 %330, 7031806264830750567
  %332 = xor i64 4878027051519463521, %329
  %333 = xor i64 %332, %324
  %334 = xor i64 %333, %321
  %335 = xor i64 %334, %331
  %336 = xor i64 %335, %328
  %337 = xor i64 %336, %325
  %338 = or i64 %9, 8168253536144044231
  %339 = and i64 8168253536144044231, %9
  %340 = xor i64 8168253536144044231, %9
  %341 = or i64 %339, %340
  %342 = add i64 %17, -1427081118657949016
  %343 = and i64 -1427081118657949016, %17
  %344 = or i64 -1427081118657949016, %17
  %345 = add i64 %343, %344
  %346 = xor i64 -4052380782040406206, %342
  %347 = xor i64 %346, %341
  %348 = xor i64 %347, %345
  %349 = xor i64 %348, %338
  %350 = mul i64 %337, %349
  %351 = trunc i64 %350 to i8
  %352 = srem i8 %320, %351
  %353 = icmp eq i8 %352, 0
  %354 = and i1 %318, %353
  %355 = select i1 %354, i32 595012132, i32 595012222
  %356 = xor i32 %355, 90
  store i32 %356, i32* %2, align 4
  %357 = call i8** @bf777061424148142830(i32* %2)
  %358 = load i8*, i8** %357, align 8
  indirectbr i8* %358, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %359 = load i8*, i8** %8, align 8
  %360 = load i8, i8* %359, align 1
  %361 = mul i8 %360, 2
  %362 = mul i8 %360, 2
  %363 = add i8 2, %362
  %364 = mul i8 %361, %363
  %365 = srem i8 %364, 4
  %366 = icmp eq i8 %365, 0
  %367 = mul i8 %360, %360
  %368 = mul i8 %367, %360
  %369 = add i8 %368, %360
  %370 = srem i8 %369, 2
  %371 = icmp eq i8 %370, 0
  %372 = xor i1 %371, true
  %373 = xor i1 %366, %372
  %374 = and i1 %373, %366
  %375 = select i1 %374, i32 595012193, i32 595012114
  %376 = xor i32 %375, -115367388
  %377 = xor i32 %376, -115367337
  store i32 %377, i32* %2, align 4
  %378 = call i8** @bf777061424148142830(i32* %2)
  %379 = load i8*, i8** %378, align 8
  indirectbr i8* %379, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %380 = load i8*, i8** %10, align 8
  %381 = load i8, i8* %380, align 1
  %382 = mul i8 %381, 2
  %383 = mul i8 %381, 2
  %384 = xor i8 2, %383
  %385 = and i8 2, %383
  %386 = mul i8 2, %385
  %387 = add i8 %384, %386
  %388 = mul i8 39, %387
  %389 = add i8 23, %388
  %390 = mul i8 -105, %389
  %391 = sext i32 %dispatcher1 to i64
  %392 = add i64 %391, 1162234829516698497
  %393 = add i64 -8290230419298097559, %391
  %394 = add i64 %393, -8994278824894755560
  %395 = add i64 %11, 8341417511916469850
  %396 = add i64 1675292251209375830, %11
  %397 = sub i64 %396, -6666125260707094020
  %398 = add i64 %5, -2785798431623262591
  %399 = add i64 -7094365659092268443, %5
  %400 = add i64 %399, 4308567227469005852
  %401 = xor i64 %400, %398
  %402 = xor i64 %401, -6074007199953328097
  %403 = xor i64 %402, %397
  %404 = xor i64 %403, %392
  %405 = xor i64 %404, %395
  %406 = xor i64 %405, %394
  %407 = add i64 %13, -7326722413333622942
  %408 = add i64 5061121438478951867, %13
  %409 = sub i64 %408, -6058900221896976807
  %410 = add i64 %13, -78295726115634584
  %411 = sub i64 0, %13
  %412 = add i64 78295726115634584, %411
  %413 = sub i64 0, %412
  %414 = xor i64 %413, %407
  %415 = xor i64 %414, %410
  %416 = xor i64 %415, 2288963400901402033
  %417 = xor i64 %416, %409
  %418 = mul i64 %406, %417
  %419 = trunc i64 %418 to i8
  %420 = add i8 %419, %390
  %421 = mul i8 %382, %420
  %422 = srem i8 %421, 4
  %423 = icmp eq i8 %422, 0
  %424 = mul i8 %381, %381
  %425 = add i8 %424, -3
  %426 = add i8 %425, %381
  %427 = sub i8 %426, -3
  %428 = and i64 %13, -5267661542597544561
  %429 = xor i64 %13, -1
  %430 = or i64 5267661542597544560, %429
  %431 = xor i64 %430, -1
  %432 = and i64 %431, -1
  %433 = and i64 %3, 3359964277256585395
  %434 = xor i64 %3, -1
  %435 = or i64 -3359964277256585396, %434
  %436 = xor i64 %435, -1
  %437 = and i64 %436, -1
  %438 = xor i64 %432, %433
  %439 = xor i64 %438, %428
  %440 = xor i64 %439, %437
  %441 = xor i64 %440, 58607188275232419
  %442 = and i64 %5, 8065882348460370338
  %443 = or i64 -8065882348460370339, %5
  %444 = sub i64 %443, -8065882348460370339
  %445 = or i64 %11, 4742224783163688498
  %446 = xor i64 %11, -1
  %447 = and i64 4742224783163688498, %446
  %448 = add i64 %447, %11
  %449 = xor i64 %448, %444
  %450 = xor i64 %449, 116336032459999766
  %451 = xor i64 %450, %442
  %452 = xor i64 %451, %445
  %453 = mul i64 %441, %452
  %454 = trunc i64 %453 to i8
  %455 = srem i8 %427, %454
  %456 = icmp eq i8 %455, 0
  %457 = and i1 %423, %456
  %458 = select i1 %457, i32 595012262, i32 595012193
  %459 = xor i32 %458, 199
  store i32 %459, i32* %2, align 4
  %460 = call i8** @bf777061424148142830(i32* %2)
  %461 = load i8*, i8** %460, align 8
  indirectbr i8* %461, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @clear.extracted(i64 %0) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = add i64 %0, 8496810892894074421
  %3 = sub i64 0, %0
  %4 = add i64 -8496810892894074421, %3
  %5 = sub i64 0, %4
  %6 = or i64 %0, -3247640823529288592
  %7 = xor i64 %0, -1
  %8 = and i64 %7, 491462288287880772
  %9 = and i64 %0, -491462288287880773
  %10 = or i64 %8, %9
  %11 = xor i64 -3153634951667344844, %10
  %12 = xor i64 %0, -1
  %13 = or i64 3247640823529288591, %12
  %14 = xor i64 %13, -1
  %15 = and i64 %14, -1
  %16 = or i64 %11, %15
  %17 = xor i64 2519724093347050535, %2
  %18 = xor i64 %17, %5
  %19 = xor i64 %18, %6
  %20 = xor i64 %19, %16
  %21 = add i64 %0, -5327426854065012435
  %22 = add i64 -2720737276349261299, %0
  %23 = add i64 %22, -2606689577715751136
  %24 = add i64 %0, 2853197772008113648
  %25 = add i64 -215268083430125279, %0
  %26 = add i64 %25, 3068465855438238927
  %27 = xor i64 %26, %23
  %28 = xor i64 %27, %24
  %29 = xor i64 %28, %21
  %30 = xor i64 %29, 5247529945084310620
  %31 = mul i64 %20, %30
  %32 = call i64 @h11804894491772278134(i64 %31)
  %33 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %32
  store i8* blockaddress(@clear.extracted, %.exitStub), i8** %33, align 8
  %34 = call i64 @h11804894491772278134(i64 595012096)
  %35 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %34
  store i8* blockaddress(@clear.extracted, %codeRepl), i8** %35, align 8
  %36 = call i64 @h11804894491772278134(i64 595012101)
  %37 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %36
  store i8* blockaddress(@clear.extracted, %"2"), i8** %37, align 8
  %38 = and i64 %0, 7543243063672738045
  %39 = or i64 -7543243063672738046, %0
  %40 = sub i64 %39, -7543243063672738046
  %41 = and i64 %0, -4291170463331436176
  %42 = or i64 4291170463331436175, %0
  %43 = sub i64 %42, 4291170463331436175
  %44 = xor i64 %43, %40
  %45 = xor i64 %44, %38
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, 951620516086880495
  %48 = or i64 %0, 5807587064581773124
  %49 = xor i64 %0, -1
  %50 = and i64 %49, -7601894283235627960
  %51 = and i64 %0, 7601894283235627959
  %52 = or i64 %50, %51
  %53 = xor i64 -4172562208332039412, %52
  %54 = xor i64 %0, -1
  %55 = or i64 -5807587064581773125, %54
  %56 = xor i64 %55, -1
  %57 = and i64 %56, -1
  %58 = or i64 %53, %57
  %59 = or i64 %0, 519879288411597659
  %60 = xor i64 %0, -1
  %61 = and i64 %60, -2816988175044399574
  %62 = and i64 %0, 2816988175044399573
  %63 = or i64 %61, %62
  %64 = xor i64 -2315141186633104015, %63
  %65 = xor i64 %0, -1
  %66 = or i64 -519879288411597660, %65
  %67 = xor i64 %66, -1
  %68 = and i64 %67, -1
  %69 = or i64 %64, %68
  %70 = add i64 %0, -5596287836150044490
  %71 = sub i64 0, %0
  %72 = sub i64 -5596287836150044490, %71
  %73 = xor i64 %72, %48
  %74 = xor i64 %73, %58
  %75 = xor i64 %74, %69
  %76 = xor i64 %75, %59
  %77 = xor i64 %76, %70
  %78 = xor i64 %77, -6133957276936259539
  %79 = mul i64 %47, %78
  %80 = call i64 @h11804894491772278134(i64 %79)
  %81 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %80
  store i8* blockaddress(@clear.extracted, %.exitStub1), i8** %81, align 8
  %82 = call i64 @h11804894491772278134(i64 595012102)
  %83 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %82
  store i8* blockaddress(@clear.extracted, %EntryBasicBlockSplit), i8** %83, align 8
  %84 = call i64 @h11804894491772278134(i64 595012098)
  %85 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %84
  store i8* blockaddress(@clear.extracted, %BogusBasciBlock), i8** %85, align 8
  %.reg2mem17 = alloca i64, align 8
  %86 = or i64 %0, 8842737244918050899
  %87 = and i64 8842737244918050899, %0
  %88 = xor i64 8842737244918050899, %0
  %89 = or i64 %87, %88
  %90 = add i64 %0, -5966668745147149069
  %91 = xor i64 -5966668745147149069, %0
  %92 = and i64 -5966668745147149069, %0
  %93 = mul i64 2, %92
  %94 = add i64 %91, %93
  %95 = xor i64 %89, %86
  %96 = xor i64 %95, 6778109637513441569
  %97 = xor i64 %96, %90
  %98 = xor i64 %97, %94
  %99 = add i64 %0, -5466632290104537523
  %100 = sub i64 0, %0
  %101 = sub i64 -5466632290104537523, %100
  %102 = and i64 %0, 1313601681953108129
  %103 = or i64 -1313601681953108130, %0
  %104 = sub i64 %103, -1313601681953108130
  %105 = xor i64 %104, %101
  %106 = xor i64 %105, %99
  %107 = xor i64 %106, %102
  %108 = xor i64 %107, -5375481931832175903
  %109 = mul i64 %98, %108
  %110 = trunc i64 %109 to i32
  %.reg2mem15 = alloca i8**, i32 %110, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %111 = add i64 %0, -7026289360546153742
  %112 = add i64 6182428574695131956, %0
  %113 = add i64 %112, 5238026138468265918
  %114 = add i64 %0, -5272693807785058561
  %115 = add i64 6932986480355360470, %0
  %116 = add i64 %115, 6241063785569132585
  %117 = and i64 %0, -8483669688251962175
  %118 = xor i64 %0, -1
  %119 = or i64 8483669688251962174, %118
  %120 = xor i64 %119, -1
  %121 = and i64 %120, -1
  %122 = xor i64 %117, %114
  %123 = xor i64 %122, %111
  %124 = xor i64 %123, 7454597249561982795
  %125 = xor i64 %124, %121
  %126 = xor i64 %125, %113
  %127 = xor i64 %126, %116
  %128 = or i64 %0, -514395934703409161
  %129 = and i64 -514395934703409161, %0
  %130 = xor i64 -514395934703409161, %0
  %131 = or i64 %129, %130
  %132 = add i64 %0, 5382366625334753343
  %133 = xor i64 5382366625334753343, %0
  %134 = and i64 5382366625334753343, %0
  %135 = mul i64 2, %134
  %136 = add i64 %133, %135
  %137 = add i64 %0, -6678593823745149499
  %138 = add i64 4279173725561406349, %0
  %139 = sub i64 %138, -7488976524402995768
  %140 = xor i64 %132, %131
  %141 = xor i64 %140, %128
  %142 = xor i64 %141, -680915185755334045
  %143 = xor i64 %142, %137
  %144 = xor i64 %143, %136
  %145 = xor i64 %144, %139
  %146 = mul i64 %127, %145
  %147 = trunc i64 %146 to i32
  %.reg2mem6 = alloca i8**, i32 %147, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %148 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted, %BogusBasciBlock), i8** %148, align 8
  %149 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %149, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@clear.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %150 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %150, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@clear.extracted, %"2"), i8** %.reload5, align 8
  %151 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %151, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@clear.extracted, %codeRepl), i8** %.reload8, align 8
  %152 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %152, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@clear.extracted, %.exitStub), i8** %.reload11, align 8
  %153 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %153, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@clear.extracted, %.exitStub1), i8** %.reload14, align 8
  %154 = alloca i64, align 8
  %155 = alloca i64, align 8
  %156 = add i64 %0, 1058028151858714589
  %157 = and i64 1058028151858714589, %0
  %158 = or i64 1058028151858714589, %0
  %159 = add i64 %157, %158
  %160 = and i64 %0, 2779634041638445714
  %161 = xor i64 %0, -1
  %162 = or i64 -2779634041638445715, %161
  %163 = xor i64 %162, -1
  %164 = and i64 %163, -1
  %165 = and i64 %0, -6737971177767084683
  %166 = or i64 6737971177767084682, %0
  %167 = sub i64 %166, 6737971177767084682
  %168 = xor i64 %165, -2186624492068917147
  %169 = xor i64 %168, %160
  %170 = xor i64 %169, %164
  %171 = xor i64 %170, %167
  %172 = xor i64 %171, %156
  %173 = xor i64 %172, %159
  %174 = add i64 %0, -4378882133729804381
  %175 = and i64 -4378882133729804381, %0
  %176 = or i64 -4378882133729804381, %0
  %177 = add i64 %175, %176
  %178 = or i64 %0, -6445185626319636498
  %179 = xor i64 %0, -1
  %180 = and i64 %179, -6104490890917696352
  %181 = and i64 %0, 6104490890917696351
  %182 = or i64 %180, %181
  %183 = xor i64 992590936342895438, %182
  %184 = xor i64 %0, -1
  %185 = or i64 6445185626319636497, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = or i64 %183, %187
  %189 = xor i64 %177, %178
  %190 = xor i64 %189, %188
  %191 = xor i64 %190, %174
  %192 = xor i64 %191, -8619140125493911030
  %193 = mul i64 %173, %192
  %194 = add i64 %0, -7651614530461389634
  %195 = sub i64 0, %0
  %196 = sub i64 -7651614530461389634, %195
  %197 = add i64 %0, -3746542828697283949
  %198 = sub i64 0, %0
  %199 = sub i64 -3746542828697283949, %198
  %200 = xor i64 %197, 4330697378087629507
  %201 = xor i64 %200, %196
  %202 = xor i64 %201, %199
  %203 = xor i64 %202, %194
  %204 = or i64 %0, 8239248485598963106
  %205 = xor i64 %0, -1
  %206 = and i64 %205, 8018803090525053778
  %207 = and i64 %0, -8018803090525053779
  %208 = or i64 %206, %207
  %209 = xor i64 2098451153632216816, %208
  %210 = xor i64 %0, -1
  %211 = or i64 -8239248485598963107, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = or i64 %209, %213
  %215 = or i64 %0, -6413588066008816310
  %216 = and i64 -6413588066008816310, %0
  %217 = xor i64 -6413588066008816310, %0
  %218 = or i64 %216, %217
  %219 = xor i64 %218, %214
  %220 = xor i64 %219, 0
  %221 = xor i64 %220, %215
  %222 = xor i64 %221, %204
  %223 = mul i64 %203, %222
  %224 = add i64 %0, -3881583752591947975
  %225 = sub i64 0, %0
  %226 = sub i64 -3881583752591947975, %225
  %227 = add i64 %0, -4987956355985775777
  %228 = sub i64 0, %0
  %229 = add i64 4987956355985775777, %228
  %230 = sub i64 0, %229
  %231 = or i64 %0, 7207406415549977785
  %232 = xor i64 %0, -1
  %233 = and i64 7207406415549977785, %232
  %234 = add i64 %233, %0
  %235 = xor i64 -4789194135016412541, %234
  %236 = xor i64 %235, %227
  %237 = xor i64 %236, %230
  %238 = xor i64 %237, %224
  %239 = xor i64 %238, %226
  %240 = xor i64 %239, %231
  %241 = and i64 %0, -1974038367081980719
  %242 = xor i64 %0, -1
  %243 = xor i64 -1974038367081980719, %242
  %244 = and i64 %243, -1974038367081980719
  %245 = and i64 %0, 3085315268839218688
  %246 = or i64 -3085315268839218689, %0
  %247 = sub i64 %246, -3085315268839218689
  %248 = xor i64 %247, 0
  %249 = xor i64 %248, %244
  %250 = xor i64 %249, %245
  %251 = xor i64 %250, %241
  %252 = mul i64 %240, %251
  %253 = trunc i64 %252 to i1
  %254 = or i64 %0, 8484859887952354857
  %255 = xor i64 %0, -1
  %256 = and i64 8484859887952354857, %255
  %257 = add i64 %256, %0
  %258 = or i64 %0, -1772132254185710832
  %259 = xor i64 %0, -1
  %260 = and i64 -1772132254185710832, %259
  %261 = add i64 %260, %0
  %262 = or i64 %0, 2791691499676276194
  %263 = xor i64 %0, -1
  %264 = and i64 2791691499676276194, %263
  %265 = add i64 %264, %0
  %266 = xor i64 %261, %254
  %267 = xor i64 %266, %265
  %268 = xor i64 %267, -7201852121891709839
  %269 = xor i64 %268, %262
  %270 = xor i64 %269, %257
  %271 = xor i64 %270, %258
  %272 = add i64 %0, -5093745847358478706
  %273 = and i64 -5093745847358478706, %0
  %274 = or i64 -5093745847358478706, %0
  %275 = add i64 %273, %274
  %276 = or i64 %0, 2161066709790108799
  %277 = xor i64 %0, -1
  %278 = and i64 %277, -8348747750431787665
  %279 = and i64 %0, 8348747750431787664
  %280 = or i64 %278, %279
  %281 = xor i64 -7935645327533680368, %280
  %282 = xor i64 %0, -1
  %283 = or i64 -2161066709790108800, %282
  %284 = xor i64 %283, -1
  %285 = and i64 %284, -1
  %286 = or i64 %281, %285
  %287 = add i64 %0, -1217330525722410214
  %288 = sub i64 0, %0
  %289 = add i64 1217330525722410214, %288
  %290 = sub i64 0, %289
  %291 = xor i64 %272, %290
  %292 = xor i64 %291, %287
  %293 = xor i64 %292, %276
  %294 = xor i64 %293, 0
  %295 = xor i64 %294, %286
  %296 = xor i64 %295, %275
  %297 = mul i64 %271, %296
  %298 = trunc i64 %297 to i1
  %299 = and i64 %0, 3503710337393700494
  %300 = xor i64 %0, -1
  %301 = or i64 -3503710337393700495, %300
  %302 = xor i64 %301, -1
  %303 = and i64 %302, -1
  %304 = and i64 %0, -6284243171406335321
  %305 = or i64 6284243171406335320, %0
  %306 = sub i64 %305, 6284243171406335320
  %307 = and i64 %0, 4027834809721616801
  %308 = or i64 -4027834809721616802, %0
  %309 = sub i64 %308, -4027834809721616802
  %310 = xor i64 %309, -8534626590965394701
  %311 = xor i64 %310, %304
  %312 = xor i64 %311, %303
  %313 = xor i64 %312, %307
  %314 = xor i64 %313, %299
  %315 = xor i64 %314, %306
  %316 = add i64 %0, -3388175938969076926
  %317 = sub i64 0, %0
  %318 = sub i64 -3388175938969076926, %317
  %319 = or i64 %0, 883333191711167353
  %320 = xor i64 %0, -1
  %321 = and i64 883333191711167353, %320
  %322 = add i64 %321, %0
  %323 = xor i64 %322, %319
  %324 = xor i64 %323, %316
  %325 = xor i64 %324, %318
  %326 = xor i64 %325, 0
  %327 = mul i64 %315, %326
  %328 = trunc i64 %327 to i1
  %329 = add i64 %0, -5542257450406316672
  %330 = sub i64 0, %0
  %331 = sub i64 -5542257450406316672, %330
  %332 = and i64 %0, 5346579998278215307
  %333 = or i64 -5346579998278215308, %0
  %334 = sub i64 %333, -5346579998278215308
  %335 = or i64 %0, -5411215347245326746
  %336 = xor i64 %0, -1
  %337 = and i64 %336, -1836790300742432107
  %338 = and i64 %0, 1836790300742432106
  %339 = or i64 %337, %338
  %340 = xor i64 5937407576920659187, %339
  %341 = xor i64 %0, -1
  %342 = or i64 5411215347245326745, %341
  %343 = xor i64 %342, -1
  %344 = and i64 %343, -1
  %345 = or i64 %340, %344
  %346 = xor i64 %332, %329
  %347 = xor i64 %346, %331
  %348 = xor i64 %347, %335
  %349 = xor i64 %348, -9186083999645759631
  %350 = xor i64 %349, %345
  %351 = xor i64 %350, %334
  %352 = add i64 %0, 7866926886302050607
  %353 = sub i64 0, %0
  %354 = add i64 -7866926886302050607, %353
  %355 = sub i64 0, %354
  %356 = or i64 %0, 8086506426304644417
  %357 = xor i64 %0, -1
  %358 = and i64 %357, -4650413325394687544
  %359 = and i64 %0, 4650413325394687543
  %360 = or i64 %358, %359
  %361 = xor i64 -3508476217301529463, %360
  %362 = xor i64 %0, -1
  %363 = or i64 -8086506426304644418, %362
  %364 = xor i64 %363, -1
  %365 = and i64 %364, -1
  %366 = or i64 %361, %365
  %367 = xor i64 %366, 0
  %368 = xor i64 %367, %352
  %369 = xor i64 %368, %355
  %370 = xor i64 %369, %356
  %371 = mul i64 %351, %370
  %372 = trunc i64 %371 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %193, i64* %155, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %223, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %253, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %298, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %328, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 %372, i1* null, i1* null)
  %373 = load i64, i64* %155, align 8
  %374 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11422090804462279601, i32 0, i64 %373
  store i8** %374, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %375 = load i8*, i8** %.reload, align 8
  indirectbr i8* %375, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %376 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted, %"2"), i8** %376, align 8
  %377 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@clear.extracted, %BogusBasciBlock), i8** %377, align 8
  %378 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@clear.extracted, %codeRepl), i8** %378, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %379 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %379, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i64, i64)* @clear.extracted.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %380 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %380, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %381 = mul i64 %0, 2
  store i64 %381, i64* %.reg2mem17, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %382 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %382, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %154, align 8
  %383 = call i8** @lk5170062957344361398(i64* %154)
  %384 = load i8*, i8** %383, align 8
  %385 = bitcast i8* %384 to i1 (i64, i64)*
  %.reload18 = load i64, i64* %.reg2mem17, align 8
  %targetBlock = call i1 %385(i64 %0, i64 %.reload18)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %386 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %387 = load i8*, i8** %386, align 8
  indirectbr i8* %387, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %388 = and i64 %0, -2509865304176308774
  %389 = xor i64 %0, -1
  %390 = or i64 2509865304176308773, %389
  %391 = xor i64 %390, -1
  %392 = and i64 %391, -1
  %393 = and i64 %82, 3295356750758534216
  %394 = or i64 -3295356750758534217, %82
  %395 = sub i64 %394, -3295356750758534217
  %396 = add i64 %36, 1941404881911024271
  %397 = add i64 7525045235139510674, %36
  %398 = add i64 %397, -5583640353228486403
  %399 = xor i64 2458313178095444715, %393
  %400 = xor i64 %399, %398
  %401 = xor i64 %400, %396
  %402 = xor i64 %401, %395
  %403 = xor i64 %402, %392
  %404 = xor i64 %403, %388
  %405 = or i64 %84, 9221097979627390618
  %406 = and i64 9221097979627390618, %84
  %407 = xor i64 9221097979627390618, %84
  %408 = or i64 %406, %407
  %409 = or i64 %80, -6907942308416180363
  %410 = and i64 -6907942308416180363, %80
  %411 = xor i64 -6907942308416180363, %80
  %412 = or i64 %410, %411
  %413 = or i64 %80, 5797359246284473394
  %414 = and i64 5797359246284473394, %80
  %415 = xor i64 5797359246284473394, %80
  %416 = or i64 %414, %415
  %417 = xor i64 %413, %408
  %418 = xor i64 %417, %409
  %419 = xor i64 %418, 0
  %420 = xor i64 %419, %416
  %421 = xor i64 %420, %412
  %422 = xor i64 %421, %405
  %423 = mul i64 %404, %422
  %424 = trunc i64 %423 to i1
  ret i1 %424
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @clear.extracted.12(i8* %0, float* %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012100)
  %4 = getelementptr [5 x i8*], [5 x i8*]* @obfsblockAddrLookupTable5293587490885567911, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.12, %"2"), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012097)
  %6 = getelementptr [5 x i8*], [5 x i8*]* @obfsblockAddrLookupTable5293587490885567911, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.12, %.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012099)
  %8 = getelementptr [5 x i8*], [5 x i8*]* @obfsblockAddrLookupTable5293587490885567911, i32 0, i64 %7
  store i8* blockaddress(@clear.extracted.12, %EntryBasicBlockSplit), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012098)
  %10 = getelementptr [5 x i8*], [5 x i8*]* @obfsblockAddrLookupTable5293587490885567911, i32 0, i64 %9
  store i8* blockaddress(@clear.extracted.12, %BogusBasciBlock), i8** %10, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted.12, %BogusBasciBlock), i8** %11, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %12, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@clear.extracted.12, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %13, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@clear.extracted.12, %"2"), i8** %.reload5, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %14, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@clear.extracted.12, %.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %15 = load i8*, i8** %.reload, align 8
  indirectbr i8* %15, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %16 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted.12, %.exitStub), i8** %16, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@clear.extracted.12, %"2"), i8** %17, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %18 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %19 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %19, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %20 = add i64 %5, -6059638721812011955
  %21 = sub i64 0, %5
  %22 = sub i64 -6059638721812011955, %21
  %23 = or i64 %5, 3412535346504195613
  %24 = xor i64 %5, -1
  %25 = and i64 3412535346504195613, %24
  %26 = add i64 %25, %5
  %27 = xor i64 8454701347157400947, %20
  %28 = xor i64 %27, %22
  %29 = xor i64 %28, %26
  %30 = xor i64 %29, %23
  %31 = and i64 %5, 1596914950059210107
  %32 = xor i64 %5, -1
  %33 = or i64 -1596914950059210108, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = add i64 %3, -6868679419905638042
  %37 = add i64 -3308387028886193881, %3
  %38 = sub i64 %37, 3560292391019444161
  %39 = xor i64 -2578147965226179168, %36
  %40 = xor i64 %39, %31
  %41 = xor i64 %40, %35
  %42 = xor i64 %41, %38
  %43 = mul i64 %30, %42
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1760) %0, i8 32, i64 %43, i1 false) #12
  %44 = bitcast float* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(7040) %44, i8 0, i64 7040, i1 false) #12
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %45 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %45, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub]

.exitStub:                                        ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @clear.extracted.extracted(i64 %0, i64 %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012277)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub1.exitStub), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012108)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012103)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@clear.extracted.extracted, %"2"), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012240)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@clear.extracted.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = add i64 %1, 8109193011049490185
  %12 = and i64 8109193011049490185, %1
  %13 = or i64 8109193011049490185, %1
  %14 = add i64 %12, %13
  %15 = or i64 %0, -4507379070713927103
  %16 = and i64 -4507379070713927103, %0
  %17 = xor i64 -4507379070713927103, %0
  %18 = or i64 %16, %17
  %19 = xor i64 %11, %15
  %20 = xor i64 %19, %18
  %21 = xor i64 %20, %14
  %22 = xor i64 %21, -3634637080296597663
  %23 = and i64 %0, -886219554145808235
  %24 = xor i64 %0, -1
  %25 = xor i64 -886219554145808235, %24
  %26 = and i64 %25, -886219554145808235
  %27 = and i64 %0, 6327814028447666051
  %28 = xor i64 %0, -1
  %29 = xor i64 6327814028447666051, %28
  %30 = and i64 %29, 6327814028447666051
  %31 = add i64 %1, -8401617191373795467
  %32 = sub i64 0, %1
  %33 = sub i64 -8401617191373795467, %32
  %34 = xor i64 -3310959451502520259, %27
  %35 = xor i64 %34, %23
  %36 = xor i64 %35, %26
  %37 = xor i64 %36, %30
  %38 = xor i64 %37, %33
  %39 = xor i64 %38, %31
  %40 = mul i64 %22, %39
  %41 = call i64 @h11804894491772278134(i64 %40)
  %42 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %41
  store i8* blockaddress(@clear.extracted.extracted, %BogusBasciBlock), i8** %42, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %43 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted.extracted, %BogusBasciBlock), i8** %43, align 8
  %44 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %44, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@clear.extracted.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %45 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %45, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@clear.extracted.extracted, %"2"), i8** %.reload5, align 8
  %46 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %46, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %47 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %47, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub1.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %48 = load i8*, i8** %.reload, align 8
  indirectbr i8* %48, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %49 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@clear.extracted.extracted, %"2"), i8** %49, align 8
  %50 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@clear.extracted.extracted, %BogusBasciBlock), i8** %50, align 8
  %51 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@clear.extracted.extracted, %.exitStub.exitStub), i8** %51, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %52 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %52, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %53 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %53, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %54 = mul i64 %0, 2
  %55 = add i64 -4138029822301158700, %54
  %56 = sub i64 %55, -4138029822301158702
  %57 = mul i64 %1, %56
  %58 = srem i64 %57, 4
  %59 = icmp eq i64 %58, 0
  %60 = mul i64 %0, %0
  %61 = mul i64 %60, %0
  %62 = add i64 %61, %0
  %63 = srem i64 %62, 2
  %64 = add i64 %0, -7541949718960841286
  %65 = add i64 -5959124885686712818, %0
  %66 = add i64 %65, -1582824833274128468
  %67 = or i64 %7, -8356433082319659255
  %68 = xor i64 %7, -1
  %69 = and i64 -8356433082319659255, %68
  %70 = add i64 %69, %7
  %71 = xor i64 %64, %66
  %72 = xor i64 %71, %67
  %73 = xor i64 %72, 2216500624678858303
  %74 = xor i64 %73, %70
  %75 = add i64 %7, -9067785429899758310
  %76 = sub i64 0, %7
  %77 = add i64 9067785429899758310, %76
  %78 = sub i64 0, %77
  %79 = and i64 %5, 1646372169768344582
  %80 = xor i64 %5, -1
  %81 = xor i64 1646372169768344582, %80
  %82 = and i64 %81, 1646372169768344582
  %83 = and i64 %0, 8678478381745516158
  %84 = xor i64 %0, -1
  %85 = xor i64 8678478381745516158, %84
  %86 = and i64 %85, 8678478381745516158
  %87 = xor i64 %79, %82
  %88 = xor i64 %87, %75
  %89 = xor i64 %88, %83
  %90 = xor i64 %89, %86
  %91 = xor i64 %90, %78
  %92 = xor i64 %91, 0
  %93 = mul i64 %74, %92
  %94 = icmp eq i64 %63, %93
  %95 = xor i1 %94, true
  %96 = and i1 %95, true
  %97 = and i1 %94, false
  %98 = or i1 %96, %97
  %99 = xor i1 %59, false
  %100 = xor i1 %98, false
  %101 = xor i1 %99, %100
  %102 = and i1 %101, %59
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %103 = select i1 %102, i8** %.reload7, i8** %.reload10
  %104 = load i8*, i8** %103, align 8
  indirectbr i8* %104, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted(i32 %0, i64 %1, i32 %2, i32* %.out, i1* %.out1, i1* %.out2) #6 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h11804894491772278134(i64 595012098)
  %5 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %4
  store i8* blockaddress(@main.extracted, %.exitStub3), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012102)
  %7 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %6
  store i8* blockaddress(@main.extracted, %codeRepl), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012100)
  %9 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %8
  store i8* blockaddress(@main.extracted, %"2"), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012097)
  %11 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %10
  store i8* blockaddress(@main.extracted, %.exitStub), i8** %11, align 8
  %12 = sext i32 %2 to i64
  %13 = and i64 %12, 2509682610508504169
  %14 = or i64 -2509682610508504170, %12
  %15 = sub i64 %14, -2509682610508504170
  %16 = or i64 %1, 7649900280407683401
  %17 = xor i64 %1, -1
  %18 = and i64 7649900280407683401, %17
  %19 = add i64 %18, %1
  %20 = xor i64 %15, %16
  %21 = xor i64 %20, %13
  %22 = xor i64 %21, -3663128146777886893
  %23 = xor i64 %22, %19
  %24 = sext i32 %0 to i64
  %25 = add i64 %24, -5539960968590032067
  %26 = and i64 -5539960968590032067, %24
  %27 = or i64 -5539960968590032067, %24
  %28 = add i64 %26, %27
  %29 = sext i32 %2 to i64
  %30 = add i64 %29, 9197693139301646812
  %31 = sub i64 0, %29
  %32 = sub i64 9197693139301646812, %31
  %33 = add i64 %1, -869429433088904454
  %34 = and i64 -869429433088904454, %1
  %35 = or i64 -869429433088904454, %1
  %36 = add i64 %34, %35
  %37 = xor i64 %28, %33
  %38 = xor i64 %37, %25
  %39 = xor i64 %38, %36
  %40 = xor i64 %39, %32
  %41 = xor i64 %40, 1625820792418874513
  %42 = xor i64 %41, %30
  %43 = mul i64 %23, %42
  %44 = call i64 @h11804894491772278134(i64 %43)
  %45 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %44
  store i8* blockaddress(@main.extracted, %EntryBasicBlockSplit), i8** %45, align 8
  %46 = call i64 @h11804894491772278134(i64 595012101)
  %47 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %46
  store i8* blockaddress(@main.extracted, %BogusBasciBlock), i8** %47, align 8
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %48 = sext i32 %0 to i64
  %49 = add i64 %48, -7654356683741376659
  %50 = sub i64 0, %48
  %51 = add i64 7654356683741376659, %50
  %52 = sub i64 0, %51
  %53 = sext i32 %0 to i64
  %54 = add i64 %53, -9083707294715504533
  %55 = sub i64 0, %53
  %56 = sub i64 -9083707294715504533, %55
  %57 = sext i32 %2 to i64
  %58 = and i64 %57, 7293503118058577959
  %59 = xor i64 %57, -1
  %60 = or i64 -7293503118058577960, %59
  %61 = xor i64 %60, -1
  %62 = and i64 %61, -1
  %63 = xor i64 %54, %58
  %64 = xor i64 %63, %52
  %65 = xor i64 %64, %56
  %66 = xor i64 %65, %62
  %67 = xor i64 %66, %49
  %68 = xor i64 %67, 3048092439030422265
  %69 = sext i32 %0 to i64
  %70 = and i64 %69, 6611739878173156961
  %71 = or i64 -6611739878173156962, %69
  %72 = sub i64 %71, -6611739878173156962
  %73 = sext i32 %0 to i64
  %74 = or i64 %73, -3259293826385128697
  %75 = and i64 -3259293826385128697, %73
  %76 = xor i64 -3259293826385128697, %73
  %77 = or i64 %75, %76
  %78 = xor i64 %74, -6983645886250399927
  %79 = xor i64 %78, %70
  %80 = xor i64 %79, %77
  %81 = xor i64 %80, %72
  %82 = mul i64 %68, %81
  %83 = trunc i64 %82 to i32
  %.reg2mem = alloca i8**, i32 %83, align 8
  %84 = sext i32 %2 to i64
  %85 = add i64 %84, -3802135075432109736
  %86 = and i64 -3802135075432109736, %84
  %87 = or i64 -3802135075432109736, %84
  %88 = add i64 %86, %87
  %89 = sext i32 %2 to i64
  %90 = and i64 %89, 6334087860854384784
  %91 = xor i64 %89, -1
  %92 = xor i64 6334087860854384784, %91
  %93 = and i64 %92, 6334087860854384784
  %94 = add i64 %1, -4517243260000017650
  %95 = sub i64 0, %1
  %96 = sub i64 -4517243260000017650, %95
  %97 = xor i64 %93, %90
  %98 = xor i64 %97, %94
  %99 = xor i64 %98, 9170376044426241053
  %100 = xor i64 %99, %85
  %101 = xor i64 %100, %96
  %102 = xor i64 %101, %88
  %103 = sext i32 %2 to i64
  %104 = add i64 %103, 2455919384266260098
  %105 = and i64 2455919384266260098, %103
  %106 = or i64 2455919384266260098, %103
  %107 = add i64 %105, %106
  %108 = sext i32 %0 to i64
  %109 = and i64 %108, 2306852606705228388
  %110 = or i64 -2306852606705228389, %108
  %111 = sub i64 %110, -2306852606705228389
  %112 = xor i64 %109, 2327294796518159678
  %113 = xor i64 %112, %104
  %114 = xor i64 %113, %107
  %115 = xor i64 %114, %111
  %116 = mul i64 %102, %115
  %117 = trunc i64 %116 to i32
  %JumpTable = alloca i8*, i32 %117, align 8
  %118 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted, %BogusBasciBlock), i8** %118, align 8
  %119 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %119, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %120 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %120, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted, %"2"), i8** %.reload5, align 8
  %121 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %121, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted, %codeRepl), i8** %.reload8, align 8
  %122 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %122, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted, %.exitStub), i8** %.reload11, align 8
  %123 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %123, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@main.extracted, %.exitStub3), i8** %.reload14, align 8
  %124 = alloca i64, align 8
  %125 = alloca i64, align 8
  %126 = sext i32 %2 to i64
  %127 = or i64 %126, 2290488623348254607
  %128 = xor i64 %126, -1
  %129 = and i64 %128, -5430481087349219879
  %130 = and i64 %126, 5430481087349219878
  %131 = or i64 %129, %130
  %132 = xor i64 -6094921168229393834, %131
  %133 = xor i64 %126, -1
  %134 = or i64 -2290488623348254608, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = or i64 %132, %136
  %138 = and i64 %1, -3712067973719107308
  %139 = xor i64 %1, -1
  %140 = xor i64 -3712067973719107308, %139
  %141 = and i64 %140, -3712067973719107308
  %142 = xor i64 %137, %127
  %143 = xor i64 %142, %141
  %144 = xor i64 %143, %138
  %145 = xor i64 %144, -7127220088974105561
  %146 = sext i32 %0 to i64
  %147 = add i64 %146, -6670450064265087493
  %148 = sub i64 0, %146
  %149 = add i64 6670450064265087493, %148
  %150 = sub i64 0, %149
  %151 = sext i32 %0 to i64
  %152 = and i64 %151, -9157186259141737514
  %153 = xor i64 %151, -1
  %154 = or i64 9157186259141737513, %153
  %155 = xor i64 %154, -1
  %156 = and i64 %155, -1
  %157 = xor i64 %156, 0
  %158 = xor i64 %157, %147
  %159 = xor i64 %158, %152
  %160 = xor i64 %159, %150
  %161 = mul i64 %145, %160
  %162 = trunc i64 %161 to i1
  %163 = sext i32 %0 to i64
  %164 = and i64 %163, -2040266858143259445
  %165 = xor i64 %163, -1
  %166 = xor i64 -2040266858143259445, %165
  %167 = and i64 %166, -2040266858143259445
  %168 = sext i32 %0 to i64
  %169 = add i64 %168, -3113124867939739459
  %170 = and i64 -3113124867939739459, %168
  %171 = or i64 -3113124867939739459, %168
  %172 = add i64 %170, %171
  %173 = xor i64 %169, -1898123481967574515
  %174 = xor i64 %173, %164
  %175 = xor i64 %174, %167
  %176 = xor i64 %175, %172
  %177 = and i64 %1, 1247657876431401981
  %178 = xor i64 %1, -1
  %179 = or i64 -1247657876431401982, %178
  %180 = xor i64 %179, -1
  %181 = and i64 %180, -1
  %182 = add i64 %1, 9160531324309545409
  %183 = xor i64 9160531324309545409, %1
  %184 = and i64 9160531324309545409, %1
  %185 = mul i64 2, %184
  %186 = add i64 %183, %185
  %187 = xor i64 %177, %182
  %188 = xor i64 %187, 0
  %189 = xor i64 %188, %186
  %190 = xor i64 %189, %181
  %191 = mul i64 %176, %190
  %192 = sext i32 %0 to i64
  %193 = add i64 %192, -3970118825227900845
  %194 = and i64 -3970118825227900845, %192
  %195 = or i64 -3970118825227900845, %192
  %196 = add i64 %194, %195
  %197 = or i64 %1, 4374660072593423446
  %198 = xor i64 %1, -1
  %199 = and i64 %198, -2695162821736114629
  %200 = and i64 %1, 2695162821736114628
  %201 = or i64 %199, %200
  %202 = xor i64 -1860776537589568915, %201
  %203 = xor i64 %1, -1
  %204 = or i64 -4374660072593423447, %203
  %205 = xor i64 %204, -1
  %206 = and i64 %205, -1
  %207 = or i64 %202, %206
  %208 = sext i32 %0 to i64
  %209 = add i64 %208, -7404531830038798135
  %210 = sub i64 0, %208
  %211 = sub i64 -7404531830038798135, %210
  %212 = xor i64 8699973528838267151, %211
  %213 = xor i64 %212, %207
  %214 = xor i64 %213, %196
  %215 = xor i64 %214, %193
  %216 = xor i64 %215, %197
  %217 = xor i64 %216, %209
  %218 = sext i32 %0 to i64
  %219 = and i64 %218, -4969608354311931045
  %220 = xor i64 %218, -1
  %221 = or i64 4969608354311931044, %220
  %222 = xor i64 %221, -1
  %223 = and i64 %222, -1
  %224 = or i64 %1, 326149220391754300
  %225 = and i64 326149220391754300, %1
  %226 = xor i64 326149220391754300, %1
  %227 = or i64 %225, %226
  %228 = sext i32 %0 to i64
  %229 = and i64 %228, -1190425859163694962
  %230 = xor i64 %228, -1
  %231 = xor i64 -1190425859163694962, %230
  %232 = and i64 %231, -1190425859163694962
  %233 = xor i64 %227, %219
  %234 = xor i64 %233, %224
  %235 = xor i64 %234, %232
  %236 = xor i64 %235, %223
  %237 = xor i64 %236, %229
  %238 = xor i64 %237, 0
  %239 = mul i64 %217, %238
  %240 = trunc i64 %239 to i1
  %241 = sext i32 %2 to i64
  %242 = or i64 %241, 1478273693881646059
  %243 = xor i64 %241, -1
  %244 = and i64 1478273693881646059, %243
  %245 = add i64 %244, %241
  %246 = sext i32 %2 to i64
  %247 = or i64 %246, -335978647662573308
  %248 = xor i64 %246, -1
  %249 = and i64 -335978647662573308, %248
  %250 = add i64 %249, %246
  %251 = add i64 %1, 4768943491793037102
  %252 = xor i64 4768943491793037102, %1
  %253 = and i64 4768943491793037102, %1
  %254 = mul i64 2, %253
  %255 = add i64 %252, %254
  %256 = xor i64 %251, -493126558675524677
  %257 = xor i64 %256, %255
  %258 = xor i64 %257, %250
  %259 = xor i64 %258, %242
  %260 = xor i64 %259, %245
  %261 = xor i64 %260, %247
  %262 = sext i32 %2 to i64
  %263 = add i64 %262, 3172512746818300591
  %264 = sub i64 0, %262
  %265 = add i64 -3172512746818300591, %264
  %266 = sub i64 0, %265
  %267 = and i64 %1, -8214948128753107175
  %268 = or i64 8214948128753107174, %1
  %269 = sub i64 %268, 8214948128753107174
  %270 = add i64 %1, 6704696448450816064
  %271 = xor i64 6704696448450816064, %1
  %272 = and i64 6704696448450816064, %1
  %273 = mul i64 2, %272
  %274 = add i64 %271, %273
  %275 = xor i64 %263, 0
  %276 = xor i64 %275, %269
  %277 = xor i64 %276, %274
  %278 = xor i64 %277, %267
  %279 = xor i64 %278, %270
  %280 = xor i64 %279, %266
  %281 = mul i64 %261, %280
  %282 = trunc i64 %281 to i1
  %283 = sext i32 %0 to i64
  %284 = add i64 %283, -7674664692932826256
  %285 = sub i64 0, %283
  %286 = add i64 7674664692932826256, %285
  %287 = sub i64 0, %286
  %288 = sext i32 %0 to i64
  %289 = and i64 %288, 5178176326943574507
  %290 = or i64 -5178176326943574508, %288
  %291 = sub i64 %290, -5178176326943574508
  %292 = xor i64 %291, %289
  %293 = xor i64 %292, %284
  %294 = xor i64 %293, %287
  %295 = xor i64 %294, -3668391125747163389
  %296 = sext i32 %2 to i64
  %297 = or i64 %296, 8529079145071280088
  %298 = and i64 8529079145071280088, %296
  %299 = xor i64 8529079145071280088, %296
  %300 = or i64 %298, %299
  %301 = sext i32 %2 to i64
  %302 = or i64 %301, -3377522623092781358
  %303 = xor i64 %301, -1
  %304 = and i64 -3377522623092781358, %303
  %305 = add i64 %304, %301
  %306 = xor i64 %302, 0
  %307 = xor i64 %306, %297
  %308 = xor i64 %307, %300
  %309 = xor i64 %308, %305
  %310 = mul i64 %295, %309
  %311 = trunc i64 %310 to i1
  %312 = sext i32 %0 to i64
  %313 = or i64 %312, -5820173809848568619
  %314 = xor i64 %312, -1
  %315 = and i64 -5820173809848568619, %314
  %316 = add i64 %315, %312
  %317 = sext i32 %0 to i64
  %318 = or i64 %317, 2523827175019295476
  %319 = and i64 2523827175019295476, %317
  %320 = xor i64 2523827175019295476, %317
  %321 = or i64 %319, %320
  %322 = sext i32 %0 to i64
  %323 = or i64 %322, -2074916751859684005
  %324 = and i64 -2074916751859684005, %322
  %325 = xor i64 -2074916751859684005, %322
  %326 = or i64 %324, %325
  %327 = xor i64 %323, %318
  %328 = xor i64 %327, %321
  %329 = xor i64 %328, %313
  %330 = xor i64 %329, -633393234243610661
  %331 = xor i64 %330, %316
  %332 = xor i64 %331, %326
  %333 = or i64 %1, 4307069228362091078
  %334 = and i64 4307069228362091078, %1
  %335 = xor i64 4307069228362091078, %1
  %336 = or i64 %334, %335
  %337 = or i64 %1, 2734601144400503247
  %338 = xor i64 %1, -1
  %339 = and i64 %338, 7544774074509280464
  %340 = and i64 %1, -7544774074509280465
  %341 = or i64 %339, %340
  %342 = xor i64 5568469266223441183, %341
  %343 = xor i64 %1, -1
  %344 = or i64 -2734601144400503248, %343
  %345 = xor i64 %344, -1
  %346 = and i64 %345, -1
  %347 = or i64 %342, %346
  %348 = xor i64 %336, %333
  %349 = xor i64 %348, %347
  %350 = xor i64 %349, %337
  %351 = xor i64 %350, 0
  %352 = mul i64 %332, %351
  %353 = trunc i64 %352 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %125, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 %162, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %191, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %240, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %282, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %311, i1* null, i1* null, i1* null, i32 0, i32 %353, i1* null, i1* null)
  %354 = load i64, i64* %125, align 8
  %355 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable3231250603839710514, i32 0, i64 %354
  store i8* bitcast (void ()* @wait to i8*), i8** %355, align 8
  %356 = sext i32 %0 to i64
  %357 = and i64 %356, 1336549411199728466
  %358 = xor i64 %356, -1
  %359 = xor i64 1336549411199728466, %358
  %360 = and i64 %359, 1336549411199728466
  %361 = sext i32 %2 to i64
  %362 = add i64 %361, 8205530251426470385
  %363 = add i64 -5341393637478162902, %361
  %364 = sub i64 %363, 4899820184804918329
  %365 = xor i64 %362, %360
  %366 = xor i64 %365, -5590067284275182843
  %367 = xor i64 %366, %357
  %368 = xor i64 %367, %364
  %369 = sext i32 %2 to i64
  %370 = add i64 %369, 2080754290973019263
  %371 = add i64 -7327388058797158688, %369
  %372 = add i64 %371, -9038601723939373665
  %373 = add i64 %1, -8457462469354054494
  %374 = xor i64 -8457462469354054494, %1
  %375 = and i64 -8457462469354054494, %1
  %376 = mul i64 2, %375
  %377 = add i64 %374, %376
  %378 = xor i64 %373, %377
  %379 = xor i64 %378, %372
  %380 = xor i64 %379, %370
  %381 = xor i64 %380, 2757772853845201357
  %382 = mul i64 %368, %381
  %383 = trunc i64 %382 to i32
  %384 = alloca i64, i32 %383, align 8
  %385 = or i64 %1, 2512467651795772110
  %386 = xor i64 %1, -1
  %387 = and i64 %386, 7693378982979696102
  %388 = and i64 %1, -7693378982979696103
  %389 = or i64 %387, %388
  %390 = xor i64 5195548034402326312, %389
  %391 = xor i64 %1, -1
  %392 = or i64 -2512467651795772111, %391
  %393 = xor i64 %392, -1
  %394 = and i64 %393, -1
  %395 = or i64 %390, %394
  %396 = add i64 %1, -4579367729159448635
  %397 = add i64 -2160121057390947203, %1
  %398 = add i64 %397, -2419246671768501432
  %399 = xor i64 %395, 1756652360643897889
  %400 = xor i64 %399, %396
  %401 = xor i64 %400, %385
  %402 = xor i64 %401, %398
  %403 = add i64 %1, 6357123285884876082
  %404 = add i64 -1159996585183711109, %1
  %405 = sub i64 %404, -7517119871068587191
  %406 = sext i32 %2 to i64
  %407 = and i64 %406, -3426408779969507845
  %408 = xor i64 %406, -1
  %409 = or i64 3426408779969507844, %408
  %410 = xor i64 %409, -1
  %411 = and i64 %410, -1
  %412 = xor i64 %403, %411
  %413 = xor i64 %412, %407
  %414 = xor i64 %413, %405
  %415 = xor i64 %414, 1116329467270315411
  %416 = mul i64 %402, %415
  %417 = sext i32 %0 to i64
  %418 = and i64 %417, 6410207018722972120
  %419 = xor i64 %417, -1
  %420 = or i64 -6410207018722972121, %419
  %421 = xor i64 %420, -1
  %422 = and i64 %421, -1
  %423 = sext i32 %2 to i64
  %424 = and i64 %423, 81475869020366479
  %425 = xor i64 %423, -1
  %426 = xor i64 81475869020366479, %425
  %427 = and i64 %426, 81475869020366479
  %428 = or i64 %1, 5623578509700128230
  %429 = xor i64 %1, -1
  %430 = and i64 5623578509700128230, %429
  %431 = add i64 %430, %1
  %432 = xor i64 %428, %427
  %433 = xor i64 %432, %418
  %434 = xor i64 %433, %422
  %435 = xor i64 %434, %424
  %436 = xor i64 %435, -7861557751284784703
  %437 = xor i64 %436, %431
  %438 = add i64 %1, 6343343986278435770
  %439 = sub i64 0, %1
  %440 = sub i64 6343343986278435770, %439
  %441 = sext i32 %2 to i64
  %442 = add i64 %441, 5739694087843762366
  %443 = add i64 -8082636482294306222, %441
  %444 = sub i64 %443, 4624413503571483028
  %445 = xor i64 %438, %440
  %446 = xor i64 %445, %442
  %447 = xor i64 %446, 0
  %448 = xor i64 %447, %444
  %449 = mul i64 %437, %448
  %450 = trunc i64 %449 to i1
  %451 = add i64 %1, -5258463348622713875
  %452 = add i64 2172320589863233297, %1
  %453 = sub i64 %452, 7430783938485947172
  %454 = and i64 %1, -4828984112333019487
  %455 = xor i64 %1, -1
  %456 = or i64 4828984112333019486, %455
  %457 = xor i64 %456, -1
  %458 = and i64 %457, -1
  %459 = xor i64 %454, %458
  %460 = xor i64 %459, 7094729353438327939
  %461 = xor i64 %460, %451
  %462 = xor i64 %461, %453
  %463 = sext i32 %2 to i64
  %464 = add i64 %463, 2739235751920195135
  %465 = add i64 -2755080770643845808, %463
  %466 = add i64 %465, 5494316522564040943
  %467 = sext i32 %2 to i64
  %468 = and i64 %467, 2328312903125742960
  %469 = xor i64 %467, -1
  %470 = or i64 -2328312903125742961, %469
  %471 = xor i64 %470, -1
  %472 = and i64 %471, -1
  %473 = sext i32 %0 to i64
  %474 = and i64 %473, -8786521233302043888
  %475 = or i64 8786521233302043887, %473
  %476 = sub i64 %475, 8786521233302043887
  %477 = xor i64 %466, %464
  %478 = xor i64 %477, %476
  %479 = xor i64 %478, %472
  %480 = xor i64 %479, %474
  %481 = xor i64 %480, %468
  %482 = xor i64 %481, 0
  %483 = mul i64 %462, %482
  %484 = trunc i64 %483 to i1
  %485 = sext i32 %0 to i64
  %486 = or i64 %485, 4553984699984371272
  %487 = and i64 4553984699984371272, %485
  %488 = xor i64 4553984699984371272, %485
  %489 = or i64 %487, %488
  %490 = sext i32 %0 to i64
  %491 = and i64 %490, 9083522846554519215
  %492 = xor i64 %490, -1
  %493 = xor i64 9083522846554519215, %492
  %494 = and i64 %493, 9083522846554519215
  %495 = sext i32 %2 to i64
  %496 = add i64 %495, -2841258150218691859
  %497 = xor i64 -2841258150218691859, %495
  %498 = and i64 -2841258150218691859, %495
  %499 = mul i64 2, %498
  %500 = add i64 %497, %499
  %501 = xor i64 %496, %491
  %502 = xor i64 %501, %494
  %503 = xor i64 %502, %486
  %504 = xor i64 %503, -1336379076431809143
  %505 = xor i64 %504, %500
  %506 = xor i64 %505, %489
  %507 = and i64 %1, 996664833145656646
  %508 = or i64 -996664833145656647, %1
  %509 = sub i64 %508, -996664833145656647
  %510 = or i64 %1, -7935444639358954354
  %511 = xor i64 %1, -1
  %512 = and i64 -7935444639358954354, %511
  %513 = add i64 %512, %1
  %514 = xor i64 %507, 0
  %515 = xor i64 %514, %509
  %516 = xor i64 %515, %513
  %517 = xor i64 %516, %510
  %518 = mul i64 %506, %517
  %519 = trunc i64 %518 to i1
  %520 = sext i32 %0 to i64
  %521 = add i64 %520, -5784545874188199079
  %522 = and i64 -5784545874188199079, %520
  %523 = or i64 -5784545874188199079, %520
  %524 = add i64 %522, %523
  %525 = sext i32 %0 to i64
  %526 = or i64 %525, 1662145794975341418
  %527 = and i64 1662145794975341418, %525
  %528 = xor i64 1662145794975341418, %525
  %529 = or i64 %527, %528
  %530 = xor i64 %521, 9024928814575509525
  %531 = xor i64 %530, %529
  %532 = xor i64 %531, %524
  %533 = xor i64 %532, %526
  %534 = sext i32 %2 to i64
  %535 = add i64 %534, -6595171538675832607
  %536 = add i64 3463121899772188069, %534
  %537 = add i64 %536, 8388450635261530940
  %538 = sext i32 %2 to i64
  %539 = add i64 %538, -2403022904929902058
  %540 = add i64 -6315734210122246023, %538
  %541 = add i64 %540, 3912711305192343965
  %542 = and i64 %1, -7098646775806847855
  %543 = xor i64 %1, -1
  %544 = xor i64 -7098646775806847855, %543
  %545 = and i64 %544, -7098646775806847855
  %546 = xor i64 %542, %541
  %547 = xor i64 %546, %537
  %548 = xor i64 %547, %535
  %549 = xor i64 %548, %539
  %550 = xor i64 %549, %545
  %551 = xor i64 %550, 0
  %552 = mul i64 %533, %551
  %553 = sext i32 %0 to i64
  %554 = add i64 %553, 5751545137119775106
  %555 = sub i64 0, %553
  %556 = add i64 -5751545137119775106, %555
  %557 = sub i64 0, %556
  %558 = sext i32 %0 to i64
  %559 = add i64 %558, -8774996216164698063
  %560 = sub i64 0, %558
  %561 = sub i64 -8774996216164698063, %560
  %562 = sext i32 %0 to i64
  %563 = add i64 %562, -7796701196633912219
  %564 = sub i64 0, %562
  %565 = sub i64 -7796701196633912219, %564
  %566 = xor i64 4678250322855565889, %557
  %567 = xor i64 %566, %563
  %568 = xor i64 %567, %565
  %569 = xor i64 %568, %559
  %570 = xor i64 %569, %561
  %571 = xor i64 %570, %554
  %572 = sext i32 %0 to i64
  %573 = or i64 %572, -3638019936012082936
  %574 = xor i64 %572, -1
  %575 = and i64 %574, -9081524357581783616
  %576 = and i64 %572, 9081524357581783615
  %577 = or i64 %575, %576
  %578 = xor i64 5509267468951117000, %577
  %579 = xor i64 %572, -1
  %580 = or i64 3638019936012082935, %579
  %581 = xor i64 %580, -1
  %582 = and i64 %581, -1
  %583 = or i64 %578, %582
  %584 = sext i32 %2 to i64
  %585 = and i64 %584, 4215556364102711933
  %586 = xor i64 %584, -1
  %587 = xor i64 4215556364102711933, %586
  %588 = and i64 %587, 4215556364102711933
  %589 = xor i64 %588, 0
  %590 = xor i64 %589, %583
  %591 = xor i64 %590, %573
  %592 = xor i64 %591, %585
  %593 = mul i64 %571, %592
  %594 = trunc i64 %593 to i1
  %595 = sext i32 %2 to i64
  %596 = add i64 %595, 4302836289029514440
  %597 = and i64 4302836289029514440, %595
  %598 = or i64 4302836289029514440, %595
  %599 = add i64 %597, %598
  %600 = or i64 %1, -985511286936625402
  %601 = xor i64 %1, -1
  %602 = and i64 %601, 6778476263132097567
  %603 = and i64 %1, -6778476263132097568
  %604 = or i64 %602, %603
  %605 = xor i64 -6033910305092340967, %604
  %606 = xor i64 %1, -1
  %607 = or i64 985511286936625401, %606
  %608 = xor i64 %607, -1
  %609 = and i64 %608, -1
  %610 = or i64 %605, %609
  %611 = xor i64 %596, %600
  %612 = xor i64 %611, %599
  %613 = xor i64 %612, %610
  %614 = xor i64 %613, 5886960086407416483
  %615 = sext i32 %0 to i64
  %616 = add i64 %615, -6354748821747901306
  %617 = sub i64 0, %615
  %618 = sub i64 -6354748821747901306, %617
  %619 = add i64 %1, 2072073038931719312
  %620 = and i64 2072073038931719312, %1
  %621 = or i64 2072073038931719312, %1
  %622 = add i64 %620, %621
  %623 = and i64 %1, -1227443981638589542
  %624 = xor i64 %1, -1
  %625 = or i64 1227443981638589541, %624
  %626 = xor i64 %625, -1
  %627 = and i64 %626, -1
  %628 = xor i64 %623, 0
  %629 = xor i64 %628, %618
  %630 = xor i64 %629, %619
  %631 = xor i64 %630, %616
  %632 = xor i64 %631, %627
  %633 = xor i64 %632, %622
  %634 = mul i64 %614, %633
  %635 = sext i32 %0 to i64
  %636 = and i64 %635, -1514778252049789189
  %637 = xor i64 %635, -1
  %638 = xor i64 -1514778252049789189, %637
  %639 = and i64 %638, -1514778252049789189
  %640 = sext i32 %2 to i64
  %641 = or i64 %640, -5188253291280381708
  %642 = xor i64 %640, -1
  %643 = and i64 -5188253291280381708, %642
  %644 = add i64 %643, %640
  %645 = xor i64 %644, %641
  %646 = xor i64 %645, 2735315789692233039
  %647 = xor i64 %646, %639
  %648 = xor i64 %647, %636
  %649 = or i64 %1, 8322994461710413183
  %650 = and i64 8322994461710413183, %1
  %651 = xor i64 8322994461710413183, %1
  %652 = or i64 %650, %651
  %653 = sext i32 %0 to i64
  %654 = or i64 %653, -7340826579477336814
  %655 = xor i64 %653, -1
  %656 = and i64 -7340826579477336814, %655
  %657 = add i64 %656, %653
  %658 = sext i32 %2 to i64
  %659 = add i64 %658, -6978827945740102267
  %660 = add i64 -8513160584966585522, %658
  %661 = sub i64 %660, -1534332639226483255
  %662 = xor i64 0, %659
  %663 = xor i64 %662, %661
  %664 = xor i64 %663, %657
  %665 = xor i64 %664, %652
  %666 = xor i64 %665, %654
  %667 = xor i64 %666, %649
  %668 = mul i64 %648, %667
  %669 = trunc i64 %668 to i1
  %670 = sext i32 %0 to i64
  %671 = and i64 %670, 8999651614972620920
  %672 = xor i64 %670, -1
  %673 = or i64 -8999651614972620921, %672
  %674 = xor i64 %673, -1
  %675 = and i64 %674, -1
  %676 = sext i32 %0 to i64
  %677 = or i64 %676, -1037544056336786479
  %678 = xor i64 %676, -1
  %679 = and i64 %678, -6604980278869521774
  %680 = and i64 %676, 6604980278869521773
  %681 = or i64 %679, %680
  %682 = xor i64 6183304041213186371, %681
  %683 = xor i64 %676, -1
  %684 = or i64 1037544056336786478, %683
  %685 = xor i64 %684, -1
  %686 = and i64 %685, -1
  %687 = or i64 %682, %686
  %688 = xor i64 960291892366184915, %671
  %689 = xor i64 %688, %677
  %690 = xor i64 %689, %687
  %691 = xor i64 %690, %675
  %692 = sext i32 %2 to i64
  %693 = and i64 %692, 7935110708732215481
  %694 = xor i64 %692, -1
  %695 = or i64 -7935110708732215482, %694
  %696 = xor i64 %695, -1
  %697 = and i64 %696, -1
  %698 = sext i32 %2 to i64
  %699 = or i64 %698, -7471962113021276817
  %700 = and i64 -7471962113021276817, %698
  %701 = xor i64 -7471962113021276817, %698
  %702 = or i64 %700, %701
  %703 = and i64 %1, -2018311461736745787
  %704 = xor i64 %1, -1
  %705 = or i64 2018311461736745786, %704
  %706 = xor i64 %705, -1
  %707 = and i64 %706, -1
  %708 = xor i64 %699, %697
  %709 = xor i64 %708, %702
  %710 = xor i64 %709, %703
  %711 = xor i64 %710, %707
  %712 = xor i64 %711, %693
  %713 = xor i64 %712, 0
  %714 = mul i64 %691, %713
  %715 = trunc i64 %714 to i1
  %716 = sext i32 %0 to i64
  %717 = and i64 %716, -1736529142610879626
  %718 = or i64 1736529142610879625, %716
  %719 = sub i64 %718, 1736529142610879625
  %720 = sext i32 %0 to i64
  %721 = add i64 %720, 4202742251763423215
  %722 = sub i64 0, %720
  %723 = sub i64 4202742251763423215, %722
  %724 = sext i32 %2 to i64
  %725 = add i64 %724, -8425874039715602010
  %726 = add i64 -6865539339047962028, %724
  %727 = sub i64 %726, 1560334700667639982
  %728 = xor i64 %717, -6814237424727770637
  %729 = xor i64 %728, %723
  %730 = xor i64 %729, %725
  %731 = xor i64 %730, %721
  %732 = xor i64 %731, %719
  %733 = xor i64 %732, %727
  %734 = sext i32 %0 to i64
  %735 = or i64 %734, 3470534972719958420
  %736 = xor i64 %734, -1
  %737 = and i64 3470534972719958420, %736
  %738 = add i64 %737, %734
  %739 = sext i32 %2 to i64
  %740 = add i64 %739, 161447980279653209
  %741 = and i64 161447980279653209, %739
  %742 = or i64 161447980279653209, %739
  %743 = add i64 %741, %742
  %744 = xor i64 %740, %743
  %745 = xor i64 %744, %735
  %746 = xor i64 %745, 0
  %747 = xor i64 %746, %738
  %748 = mul i64 %733, %747
  %749 = trunc i64 %748 to i1
  %750 = add i64 %1, 522831938760941266
  %751 = xor i64 522831938760941266, %1
  %752 = and i64 522831938760941266, %1
  %753 = mul i64 2, %752
  %754 = add i64 %751, %753
  %755 = sext i32 %2 to i64
  %756 = add i64 %755, -3128495506145658192
  %757 = and i64 -3128495506145658192, %755
  %758 = or i64 -3128495506145658192, %755
  %759 = add i64 %757, %758
  %760 = sext i32 %2 to i64
  %761 = and i64 %760, 6099813679509728073
  %762 = xor i64 %760, -1
  %763 = xor i64 6099813679509728073, %762
  %764 = and i64 %763, 6099813679509728073
  %765 = xor i64 %761, %756
  %766 = xor i64 %765, %754
  %767 = xor i64 %766, %750
  %768 = xor i64 %767, %759
  %769 = xor i64 %768, -2580867168825962275
  %770 = xor i64 %769, %764
  %771 = sext i32 %0 to i64
  %772 = add i64 %771, 4894589998391471300
  %773 = sub i64 0, %771
  %774 = sub i64 4894589998391471300, %773
  %775 = or i64 %1, -5291102270055583218
  %776 = xor i64 %1, -1
  %777 = and i64 -5291102270055583218, %776
  %778 = add i64 %777, %1
  %779 = add i64 %1, 5385429802009221373
  %780 = sub i64 0, %1
  %781 = sub i64 5385429802009221373, %780
  %782 = xor i64 %779, %772
  %783 = xor i64 %782, 0
  %784 = xor i64 %783, %781
  %785 = xor i64 %784, %775
  %786 = xor i64 %785, %778
  %787 = xor i64 %786, %774
  %788 = mul i64 %770, %787
  %789 = trunc i64 %788 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %416, i64* %384, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %450, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %484, i1* null, i1 %519, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 %552, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %594, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %634, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %669, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %715, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %749, i1 false, i1 false, i1 %789, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %790 = load i64, i64* %384, align 8
  %791 = getelementptr [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable3231250603839710514, i32 0, i64 %790
  store i8** %791, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %792 = load i8*, i8** %.reload, align 8
  indirectbr i8* %792, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %793 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted, %codeRepl), i8** %793, align 8
  %794 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted, %BogusBasciBlock), i8** %794, align 8
  %795 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted, %"2"), i8** %795, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %796 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %796, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i64, i32, i1*)* @main.extracted.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %797 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %797, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %798 = and i64 %10, -760977704931717
  %799 = xor i64 %10, -1
  %800 = xor i64 -760977704931717, %799
  %801 = and i64 %800, -760977704931717
  %802 = and i64 %46, 6169475493794201834
  %803 = or i64 -6169475493794201835, %46
  %804 = sub i64 %803, -6169475493794201835
  %805 = add i64 %790, -4277375026289415214
  %806 = add i64 1388319644056052737, %790
  %807 = sub i64 %806, 5665694670345467951
  %808 = xor i64 %801, %805
  %809 = xor i64 %808, -2819850506295545729
  %810 = xor i64 %809, %804
  %811 = xor i64 %810, %802
  %812 = xor i64 %811, %807
  %813 = xor i64 %812, %798
  %814 = and i64 %1, -4091192565232012442
  %815 = xor i64 %1, -1
  %816 = xor i64 -4091192565232012442, %815
  %817 = and i64 %816, -4091192565232012442
  %818 = or i64 %10, 2534246567411273739
  %819 = and i64 2534246567411273739, %10
  %820 = xor i64 2534246567411273739, %10
  %821 = or i64 %819, %820
  %822 = xor i64 %818, 1141010107306996035
  %823 = xor i64 %822, %817
  %824 = xor i64 %823, %821
  %825 = xor i64 %824, %814
  %826 = mul i64 %813, %825
  %827 = add i64 %826, -43
  store i64 1996855465712537074, i64* %124, align 8
  %828 = alloca i8**, align 8
  %829 = add i64 %1, 1458916672973575916
  %830 = xor i64 1458916672973575916, %1
  %831 = and i64 1458916672973575916, %1
  %832 = mul i64 2, %831
  %833 = add i64 %830, %832
  %834 = add i64 %354, 6591928147730270745
  %835 = xor i64 6591928147730270745, %354
  %836 = and i64 6591928147730270745, %354
  %837 = mul i64 2, %836
  %838 = add i64 %835, %837
  %839 = add i64 %1, 2105444509909929872
  %840 = sub i64 0, %1
  %841 = add i64 -2105444509909929872, %840
  %842 = sub i64 0, %841
  %843 = xor i64 -6417717212771377891, %833
  %844 = xor i64 %843, %829
  %845 = xor i64 %844, %842
  %846 = xor i64 %845, %834
  %847 = xor i64 %846, %839
  %848 = xor i64 %847, %838
  %849 = or i64 %8, 4245148446536332634
  %850 = xor i64 %8, -1
  %851 = and i64 %850, -8946192699106424677
  %852 = and i64 %8, 8946192699106424676
  %853 = or i64 %851, %852
  %854 = xor i64 -5102172491941872191, %853
  %855 = xor i64 %8, -1
  %856 = or i64 -4245148446536332635, %855
  %857 = xor i64 %856, -1
  %858 = and i64 %857, -1
  %859 = or i64 %854, %858
  %860 = and i64 %6, 2072996258530536109
  %861 = xor i64 %6, -1
  %862 = or i64 -2072996258530536110, %861
  %863 = xor i64 %862, -1
  %864 = and i64 %863, -1
  %865 = xor i64 0, %860
  %866 = xor i64 %865, %859
  %867 = xor i64 %866, %849
  %868 = xor i64 %867, %864
  %869 = mul i64 %848, %868
  %870 = and i64 %354, 978071033784837470
  %871 = xor i64 %354, -1
  %872 = xor i64 978071033784837470, %871
  %873 = and i64 %872, 978071033784837470
  %874 = and i64 %6, 315428340218355296
  %875 = xor i64 %6, -1
  %876 = xor i64 315428340218355296, %875
  %877 = and i64 %876, 315428340218355296
  %878 = xor i64 %877, %870
  %879 = xor i64 %878, 3913344235205130021
  %880 = xor i64 %879, %873
  %881 = xor i64 %880, %874
  %882 = add i64 %1, -8264249441200583944
  %883 = add i64 5912330441879276434, %1
  %884 = add i64 %883, 4270164190629691238
  %885 = sext i32 %2 to i64
  %886 = add i64 %885, 8238332489844069009
  %887 = sub i64 0, %885
  %888 = add i64 -8238332489844069009, %887
  %889 = sub i64 0, %888
  %890 = xor i64 0, %886
  %891 = xor i64 %890, %889
  %892 = xor i64 %891, %884
  %893 = xor i64 %892, %882
  %894 = mul i64 %881, %893
  %895 = trunc i64 %894 to i1
  %896 = add i64 %1, 7203126908363383750
  %897 = sub i64 0, %1
  %898 = add i64 -7203126908363383750, %897
  %899 = sub i64 0, %898
  %900 = sext i32 %2 to i64
  %901 = or i64 %900, -5487788480491100338
  %902 = and i64 -5487788480491100338, %900
  %903 = xor i64 -5487788480491100338, %900
  %904 = or i64 %902, %903
  %905 = xor i64 -8954854832883559585, %896
  %906 = xor i64 %905, %899
  %907 = xor i64 %906, %904
  %908 = xor i64 %907, %901
  %909 = and i64 %10, 2557290199317573158
  %910 = or i64 -2557290199317573159, %10
  %911 = sub i64 %910, -2557290199317573159
  %912 = add i64 %10, -7656149100203339942
  %913 = sub i64 0, %10
  %914 = sub i64 -7656149100203339942, %913
  %915 = or i64 %46, 5163514447724748897
  %916 = xor i64 %46, -1
  %917 = and i64 %916, -1378112597355740400
  %918 = and i64 %46, 1378112597355740399
  %919 = or i64 %917, %918
  %920 = xor i64 -6091249421400022159, %919
  %921 = xor i64 %46, -1
  %922 = or i64 -5163514447724748898, %921
  %923 = xor i64 %922, -1
  %924 = and i64 %923, -1
  %925 = or i64 %920, %924
  %926 = xor i64 %911, 0
  %927 = xor i64 %926, %925
  %928 = xor i64 %927, %909
  %929 = xor i64 %928, %915
  %930 = xor i64 %929, %912
  %931 = xor i64 %930, %914
  %932 = mul i64 %908, %931
  %933 = trunc i64 %932 to i32
  %934 = sext i32 %2 to i64
  %935 = or i64 %934, -1548706770661012092
  %936 = xor i64 %934, -1
  %937 = and i64 -1548706770661012092, %936
  %938 = add i64 %937, %934
  %939 = or i64 %44, 2994445820739904070
  %940 = xor i64 %44, -1
  %941 = and i64 %940, 1878661690875230338
  %942 = and i64 %44, -1878661690875230339
  %943 = or i64 %941, %942
  %944 = xor i64 3718900449736809156, %943
  %945 = xor i64 %44, -1
  %946 = or i64 -2994445820739904071, %945
  %947 = xor i64 %946, -1
  %948 = and i64 %947, -1
  %949 = or i64 %944, %948
  %950 = xor i64 %949, %935
  %951 = xor i64 %950, %939
  %952 = xor i64 %951, %938
  %953 = xor i64 %952, -1799258520909741181
  %954 = or i64 %6, -4901226616423730615
  %955 = xor i64 %6, -1
  %956 = and i64 -4901226616423730615, %955
  %957 = add i64 %956, %6
  %958 = sext i32 %0 to i64
  %959 = add i64 %958, 5076366308416667379
  %960 = sub i64 0, %958
  %961 = sub i64 5076366308416667379, %960
  %962 = sext i32 %2 to i64
  %963 = or i64 %962, 6042847880347959198
  %964 = xor i64 %962, -1
  %965 = and i64 %964, -581971790343249140
  %966 = and i64 %962, 581971790343249139
  %967 = or i64 %965, %966
  %968 = xor i64 -6615530996171907950, %967
  %969 = xor i64 %962, -1
  %970 = or i64 -6042847880347959199, %969
  %971 = xor i64 %970, -1
  %972 = and i64 %971, -1
  %973 = or i64 %968, %972
  %974 = xor i64 %957, %959
  %975 = xor i64 %974, %961
  %976 = xor i64 %975, %954
  %977 = xor i64 %976, 0
  %978 = xor i64 %977, %963
  %979 = xor i64 %978, %973
  %980 = mul i64 %953, %979
  %981 = trunc i64 %980 to i1
  %982 = or i64 %8, 7170223039108919238
  %983 = and i64 7170223039108919238, %8
  %984 = xor i64 7170223039108919238, %8
  %985 = or i64 %983, %984
  %986 = sext i32 %0 to i64
  %987 = and i64 %986, 5241932463301499790
  %988 = xor i64 %986, -1
  %989 = or i64 -5241932463301499791, %988
  %990 = xor i64 %989, -1
  %991 = and i64 %990, -1
  %992 = xor i64 %987, %985
  %993 = xor i64 %992, 2059161661964648113
  %994 = xor i64 %993, %982
  %995 = xor i64 %994, %991
  %996 = and i64 %1, -577098020381425281
  %997 = xor i64 %1, -1
  %998 = or i64 577098020381425280, %997
  %999 = xor i64 %998, -1
  %1000 = and i64 %999, -1
  %1001 = add i64 %790, 3513251945726839167
  %1002 = and i64 3513251945726839167, %790
  %1003 = or i64 3513251945726839167, %790
  %1004 = add i64 %1002, %1003
  %1005 = and i64 %1, 812374910525274635
  %1006 = or i64 -812374910525274636, %1
  %1007 = sub i64 %1006, -812374910525274636
  %1008 = xor i64 %996, %1001
  %1009 = xor i64 %1008, %1000
  %1010 = xor i64 %1009, %1007
  %1011 = xor i64 %1010, %1005
  %1012 = xor i64 %1011, 0
  %1013 = xor i64 %1012, %1004
  %1014 = mul i64 %995, %1013
  %1015 = add i64 %8, -2375150658951585085
  %1016 = sub i64 0, %8
  %1017 = sub i64 -2375150658951585085, %1016
  %1018 = add i64 %10, 7475088763902486479
  %1019 = and i64 7475088763902486479, %10
  %1020 = or i64 7475088763902486479, %10
  %1021 = add i64 %1019, %1020
  %1022 = xor i64 %1018, %1021
  %1023 = xor i64 %1022, %1015
  %1024 = xor i64 %1023, %1017
  %1025 = xor i64 %1024, 5989885849529378121
  %1026 = or i64 %790, 664661420245348188
  %1027 = xor i64 %790, -1
  %1028 = and i64 664661420245348188, %1027
  %1029 = add i64 %1028, %790
  %1030 = or i64 %44, -3460241189374272749
  %1031 = xor i64 %44, -1
  %1032 = and i64 -3460241189374272749, %1031
  %1033 = add i64 %1032, %44
  %1034 = add i64 %790, -6501445293317631954
  %1035 = add i64 -6537283088798038467, %790
  %1036 = add i64 %1035, 35837795480406513
  %1037 = xor i64 %1030, 0
  %1038 = xor i64 %1037, %1026
  %1039 = xor i64 %1038, %1034
  %1040 = xor i64 %1039, %1036
  %1041 = xor i64 %1040, %1029
  %1042 = xor i64 %1041, %1033
  %1043 = mul i64 %1025, %1042
  %1044 = trunc i64 %1043 to i1
  %1045 = or i64 %10, 5123374527476125700
  %1046 = and i64 5123374527476125700, %10
  %1047 = xor i64 5123374527476125700, %10
  %1048 = or i64 %1046, %1047
  %1049 = or i64 %354, -4540404539292490496
  %1050 = xor i64 %354, -1
  %1051 = and i64 %1050, -8948153370402667534
  %1052 = and i64 %354, 8948153370402667533
  %1053 = or i64 %1051, %1052
  %1054 = xor i64 4840520552765007602, %1053
  %1055 = xor i64 %354, -1
  %1056 = or i64 4540404539292490495, %1055
  %1057 = xor i64 %1056, -1
  %1058 = and i64 %1057, -1
  %1059 = or i64 %1054, %1058
  %1060 = xor i64 2088866992895278621, %1049
  %1061 = xor i64 %1060, %1048
  %1062 = xor i64 %1061, %1045
  %1063 = xor i64 %1062, %1059
  %1064 = and i64 %46, -4841200274335577779
  %1065 = xor i64 %46, -1
  %1066 = xor i64 -4841200274335577779, %1065
  %1067 = and i64 %1066, -4841200274335577779
  %1068 = and i64 %354, 6944449723491362099
  %1069 = xor i64 %354, -1
  %1070 = xor i64 6944449723491362099, %1069
  %1071 = and i64 %1070, 6944449723491362099
  %1072 = or i64 %46, -6996178262922874068
  %1073 = xor i64 %46, -1
  %1074 = and i64 -6996178262922874068, %1073
  %1075 = add i64 %1074, %46
  %1076 = xor i64 0, %1075
  %1077 = xor i64 %1076, %1071
  %1078 = xor i64 %1077, %1072
  %1079 = xor i64 %1078, %1067
  %1080 = xor i64 %1079, %1068
  %1081 = xor i64 %1080, %1064
  %1082 = mul i64 %1063, %1081
  %1083 = trunc i64 %1082 to i1
  %1084 = or i64 %1, -1850793220926865505
  %1085 = xor i64 %1, -1
  %1086 = and i64 -1850793220926865505, %1085
  %1087 = add i64 %1086, %1
  %1088 = and i64 %4, -6073018615968413091
  %1089 = xor i64 %4, -1
  %1090 = or i64 6073018615968413090, %1089
  %1091 = xor i64 %1090, -1
  %1092 = and i64 %1091, -1
  %1093 = xor i64 -1968858482906057245, %1087
  %1094 = xor i64 %1093, %1088
  %1095 = xor i64 %1094, %1092
  %1096 = xor i64 %1095, %1084
  %1097 = add i64 %354, -4449552286418600727
  %1098 = and i64 -4449552286418600727, %354
  %1099 = or i64 -4449552286418600727, %354
  %1100 = add i64 %1098, %1099
  %1101 = add i64 %8, -4561320936817044840
  %1102 = add i64 1831616350348592054, %8
  %1103 = sub i64 %1102, 6392937287165636894
  %1104 = xor i64 %1103, %1100
  %1105 = xor i64 %1104, %1101
  %1106 = xor i64 %1105, 0
  %1107 = xor i64 %1106, %1097
  %1108 = mul i64 %1096, %1107
  %1109 = trunc i64 %1108 to i1
  %1110 = and i64 %354, -8873129695929797074
  %1111 = xor i64 %354, -1
  %1112 = or i64 8873129695929797073, %1111
  %1113 = xor i64 %1112, -1
  %1114 = and i64 %1113, -1
  %1115 = add i64 %46, 7490702525881111222
  %1116 = add i64 -5620168661080895454, %46
  %1117 = add i64 %1116, -5335872886747544940
  %1118 = add i64 %354, 7466413604867480913
  %1119 = add i64 4685077633932505903, %354
  %1120 = add i64 %1119, 2781335970934975010
  %1121 = xor i64 %1120, %1110
  %1122 = xor i64 %1121, %1117
  %1123 = xor i64 %1122, %1115
  %1124 = xor i64 %1123, %1118
  %1125 = xor i64 %1124, %1114
  %1126 = xor i64 %1125, -6514391366886686937
  %1127 = add i64 %44, -2263072214638234007
  %1128 = xor i64 -2263072214638234007, %44
  %1129 = and i64 -2263072214638234007, %44
  %1130 = mul i64 2, %1129
  %1131 = add i64 %1128, %1130
  %1132 = or i64 %46, 5176920308653623216
  %1133 = xor i64 %46, -1
  %1134 = and i64 %1133, 1515750973068546980
  %1135 = and i64 %46, -1515750973068546981
  %1136 = or i64 %1134, %1135
  %1137 = xor i64 5967580587366159380, %1136
  %1138 = xor i64 %46, -1
  %1139 = or i64 -5176920308653623217, %1138
  %1140 = xor i64 %1139, -1
  %1141 = and i64 %1140, -1
  %1142 = or i64 %1137, %1141
  %1143 = xor i64 %1127, %1131
  %1144 = xor i64 %1143, %1132
  %1145 = xor i64 %1144, %1142
  %1146 = xor i64 %1145, 0
  %1147 = mul i64 %1126, %1146
  %1148 = trunc i64 %1147 to i1
  %1149 = and i64 %44, 7582369620998010355
  %1150 = xor i64 %44, -1
  %1151 = or i64 -7582369620998010356, %1150
  %1152 = xor i64 %1151, -1
  %1153 = and i64 %1152, -1
  %1154 = and i64 %10, 3567788103250007347
  %1155 = or i64 -3567788103250007348, %10
  %1156 = sub i64 %1155, -3567788103250007348
  %1157 = xor i64 %1154, %1149
  %1158 = xor i64 %1157, %1156
  %1159 = xor i64 %1158, %1153
  %1160 = xor i64 %1159, -1943555842255459265
  %1161 = or i64 %10, 5189204440610282985
  %1162 = xor i64 %10, -1
  %1163 = and i64 5189204440610282985, %1162
  %1164 = add i64 %1163, %10
  %1165 = add i64 %354, 8947913234384036858
  %1166 = xor i64 8947913234384036858, %354
  %1167 = and i64 8947913234384036858, %354
  %1168 = mul i64 2, %1167
  %1169 = add i64 %1166, %1168
  %1170 = xor i64 %1169, %1165
  %1171 = xor i64 %1170, 0
  %1172 = xor i64 %1171, %1164
  %1173 = xor i64 %1172, %1161
  %1174 = mul i64 %1160, %1173
  %1175 = trunc i64 %1174 to i1
  %1176 = and i64 %44, 191873062452419412
  %1177 = xor i64 %44, -1
  %1178 = xor i64 191873062452419412, %1177
  %1179 = and i64 %1178, 191873062452419412
  %1180 = or i64 %8, 6304043088474539922
  %1181 = xor i64 %8, -1
  %1182 = and i64 %1181, -8031770293331304601
  %1183 = and i64 %8, 8031770293331304600
  %1184 = or i64 %1182, %1183
  %1185 = xor i64 -4038287745221928715, %1184
  %1186 = xor i64 %8, -1
  %1187 = or i64 -6304043088474539923, %1186
  %1188 = xor i64 %1187, -1
  %1189 = and i64 %1188, -1
  %1190 = or i64 %1185, %1189
  %1191 = xor i64 %1180, 1066091185430464365
  %1192 = xor i64 %1191, %1179
  %1193 = xor i64 %1192, %1176
  %1194 = xor i64 %1193, %1190
  %1195 = and i64 %1, 2487964571873098421
  %1196 = xor i64 %1, -1
  %1197 = or i64 -2487964571873098422, %1196
  %1198 = xor i64 %1197, -1
  %1199 = and i64 %1198, -1
  %1200 = or i64 %46, 3364709514134846480
  %1201 = xor i64 %46, -1
  %1202 = and i64 %1201, -592450949219864066
  %1203 = and i64 %46, 592450949219864065
  %1204 = or i64 %1202, %1203
  %1205 = xor i64 -2776776510440583698, %1204
  %1206 = xor i64 %46, -1
  %1207 = or i64 -3364709514134846481, %1206
  %1208 = xor i64 %1207, -1
  %1209 = and i64 %1208, -1
  %1210 = or i64 %1205, %1209
  %1211 = xor i64 0, %1200
  %1212 = xor i64 %1211, %1195
  %1213 = xor i64 %1212, %1199
  %1214 = xor i64 %1213, %1210
  %1215 = mul i64 %1194, %1214
  %1216 = trunc i64 %1215 to i32
  call void @"9941920946239825184"(i32 22, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %869, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %895, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %933, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %981, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* %124, i8*** %828, i64 0, i32 0, i1* null, i1* null, i64 %1014, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %1044, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %1083, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %1109, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %1148, i1* null, i1* null, i1 %1175, i1* null, i1* null, i1* null, i32 0, i32 %1216, i1* null, i1* null)
  %1217 = load i8**, i8*** %828, align 8
  %1218 = load i8*, i8** %1217, align 8
  %1219 = bitcast i8* %1218 to void ()*
  call void %1219()
  %1220 = add i64 -6007130814663859286, 6007130814663859393
  %1221 = srem i32 %0, 2
  store i32 %1221, i32* %.out, align 4
  %1222 = or i64 %44, 2379785407930999626
  %1223 = xor i64 %44, -1
  %1224 = and i64 %1223, -3566603445446805646
  %1225 = and i64 %44, 3566603445446805645
  %1226 = or i64 %1224, %1225
  %1227 = xor i64 -1187170018721803208, %1226
  %1228 = xor i64 %44, -1
  %1229 = or i64 -2379785407930999627, %1228
  %1230 = xor i64 %1229, -1
  %1231 = and i64 %1230, -1
  %1232 = or i64 %1227, %1231
  %1233 = sext i32 %2 to i64
  %1234 = and i64 %1233, -7200524734083643432
  %1235 = xor i64 %1233, -1
  %1236 = xor i64 -7200524734083643432, %1235
  %1237 = and i64 %1236, -7200524734083643432
  %1238 = xor i64 %1232, %1234
  %1239 = xor i64 %1238, %1237
  %1240 = xor i64 %1239, %1222
  %1241 = xor i64 %1240, 5677799545069814401
  %1242 = or i64 %354, 2074035972333410883
  %1243 = and i64 2074035972333410883, %354
  %1244 = xor i64 2074035972333410883, %354
  %1245 = or i64 %1243, %1244
  %1246 = or i64 %4, 6305490573242100711
  %1247 = xor i64 %4, -1
  %1248 = and i64 %1247, -2107819544911180507
  %1249 = and i64 %4, 2107819544911180506
  %1250 = or i64 %1248, %1249
  %1251 = xor i64 -5386833958789257534, %1250
  %1252 = xor i64 %4, -1
  %1253 = or i64 -6305490573242100712, %1252
  %1254 = xor i64 %1253, -1
  %1255 = and i64 %1254, -1
  %1256 = or i64 %1251, %1255
  %1257 = xor i64 %1242, %1256
  %1258 = xor i64 %1257, %1246
  %1259 = xor i64 %1258, %1245
  %1260 = xor i64 %1259, 1120044606183217117
  %1261 = mul i64 %1241, %1260
  %1262 = sdiv i64 122, %1261
  %1263 = icmp eq i32 %1221, 0
  store i1 %1263, i1* %.out1, align 1
  %1264 = add i64 105, -12
  %1265 = mul i64 105, 106
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %1266 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %1266, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537075, i64* %124, align 8
  %1267 = sext i32 %0 to i64
  %1268 = or i64 %1267, 3486539182840162794
  %1269 = xor i64 %1267, -1
  %1270 = and i64 %1269, 7137327392560720661
  %1271 = and i64 %1267, -7137327392560720662
  %1272 = or i64 %1270, %1271
  %1273 = xor i64 6011827871433360127, %1272
  %1274 = xor i64 %1267, -1
  %1275 = or i64 -3486539182840162795, %1274
  %1276 = xor i64 %1275, -1
  %1277 = and i64 %1276, -1
  %1278 = or i64 %1273, %1277
  %1279 = add i64 %4, 1792433241231455941
  %1280 = add i64 -8648435494804993084, %4
  %1281 = sub i64 %1280, 8005875337673102591
  %1282 = add i64 %46, -7306539722138640103
  %1283 = sub i64 0, %46
  %1284 = sub i64 -7306539722138640103, %1283
  %1285 = xor i64 %1281, %1279
  %1286 = xor i64 %1285, %1284
  %1287 = xor i64 %1286, %1268
  %1288 = xor i64 %1287, 4873566930211922631
  %1289 = xor i64 %1288, %1282
  %1290 = xor i64 %1289, %1278
  %1291 = and i64 %10, -4852664201185607995
  %1292 = or i64 4852664201185607994, %10
  %1293 = sub i64 %1292, 4852664201185607994
  %1294 = and i64 %354, 5047313389875365159
  %1295 = xor i64 %354, -1
  %1296 = xor i64 5047313389875365159, %1295
  %1297 = and i64 %1296, 5047313389875365159
  %1298 = add i64 %790, -8944614804776256252
  %1299 = add i64 1598339065283043185, %790
  %1300 = add i64 %1299, 7903790203650252179
  %1301 = xor i64 %1298, %1294
  %1302 = xor i64 %1301, %1293
  %1303 = xor i64 %1302, -7208554411841765641
  %1304 = xor i64 %1303, %1300
  %1305 = xor i64 %1304, %1297
  %1306 = xor i64 %1305, %1291
  %1307 = mul i64 %1290, %1306
  %1308 = trunc i64 %1307 to i32
  %1309 = alloca i8**, i32 %1308, align 8
  %1310 = or i64 %6, 6057757199171933409
  %1311 = xor i64 %6, -1
  %1312 = and i64 %1311, -6312254079484674977
  %1313 = and i64 %6, 6312254079484674976
  %1314 = or i64 %1312, %1313
  %1315 = xor i64 -254694962057484098, %1314
  %1316 = xor i64 %6, -1
  %1317 = or i64 -6057757199171933410, %1316
  %1318 = xor i64 %1317, -1
  %1319 = and i64 %1318, -1
  %1320 = or i64 %1315, %1319
  %1321 = sext i32 %0 to i64
  %1322 = or i64 %1321, 7385962595015465205
  %1323 = xor i64 %1321, -1
  %1324 = and i64 7385962595015465205, %1323
  %1325 = add i64 %1324, %1321
  %1326 = add i64 %354, -240285347964966474
  %1327 = xor i64 -240285347964966474, %354
  %1328 = and i64 -240285347964966474, %354
  %1329 = mul i64 2, %1328
  %1330 = add i64 %1327, %1329
  %1331 = xor i64 %1322, %1325
  %1332 = xor i64 %1331, %1330
  %1333 = xor i64 %1332, %1310
  %1334 = xor i64 %1333, %1326
  %1335 = xor i64 %1334, -5612656985609784139
  %1336 = xor i64 %1335, %1320
  %1337 = and i64 %8, 5184875722277463617
  %1338 = xor i64 %8, -1
  %1339 = xor i64 5184875722277463617, %1338
  %1340 = and i64 %1339, 5184875722277463617
  %1341 = add i64 %10, -3800558260158606698
  %1342 = xor i64 -3800558260158606698, %10
  %1343 = and i64 -3800558260158606698, %10
  %1344 = mul i64 2, %1343
  %1345 = add i64 %1342, %1344
  %1346 = or i64 %354, 1721432544969954840
  %1347 = xor i64 %354, -1
  %1348 = and i64 1721432544969954840, %1347
  %1349 = add i64 %1348, %354
  %1350 = xor i64 %1337, %1346
  %1351 = xor i64 %1350, %1340
  %1352 = xor i64 %1351, 0
  %1353 = xor i64 %1352, %1349
  %1354 = xor i64 %1353, %1341
  %1355 = xor i64 %1354, %1345
  %1356 = mul i64 %1336, %1355
  %1357 = trunc i64 %1356 to i1
  %1358 = add i64 %1, 8754772585693912806
  %1359 = and i64 8754772585693912806, %1
  %1360 = or i64 8754772585693912806, %1
  %1361 = add i64 %1359, %1360
  %1362 = and i64 %354, 8246396686551854148
  %1363 = xor i64 %354, -1
  %1364 = or i64 -8246396686551854149, %1363
  %1365 = xor i64 %1364, -1
  %1366 = and i64 %1365, -1
  %1367 = xor i64 -8467850041316965469, %1366
  %1368 = xor i64 %1367, %1362
  %1369 = xor i64 %1368, %1361
  %1370 = xor i64 %1369, %1358
  %1371 = or i64 %10, 2944836686132938458
  %1372 = xor i64 %10, -1
  %1373 = and i64 %1372, 6945965178418753089
  %1374 = and i64 %10, -6945965178418753090
  %1375 = or i64 %1373, %1374
  %1376 = xor i64 5240835206329395355, %1375
  %1377 = xor i64 %10, -1
  %1378 = or i64 -2944836686132938459, %1377
  %1379 = xor i64 %1378, -1
  %1380 = and i64 %1379, -1
  %1381 = or i64 %1376, %1380
  %1382 = and i64 %46, 5222126393677655089
  %1383 = xor i64 %46, -1
  %1384 = xor i64 5222126393677655089, %1383
  %1385 = and i64 %1384, 5222126393677655089
  %1386 = sext i32 %2 to i64
  %1387 = add i64 %1386, -1354957826780895151
  %1388 = add i64 6521667484871645206, %1386
  %1389 = sub i64 %1388, 7876625311652540357
  %1390 = xor i64 %1381, 0
  %1391 = xor i64 %1390, %1387
  %1392 = xor i64 %1391, %1385
  %1393 = xor i64 %1392, %1371
  %1394 = xor i64 %1393, %1389
  %1395 = xor i64 %1394, %1382
  %1396 = mul i64 %1370, %1395
  %1397 = trunc i64 %1396 to i1
  %1398 = sext i32 %0 to i64
  %1399 = and i64 %1398, 5607997438549793045
  %1400 = xor i64 %1398, -1
  %1401 = or i64 -5607997438549793046, %1400
  %1402 = xor i64 %1401, -1
  %1403 = and i64 %1402, -1
  %1404 = or i64 %44, 3278949765094047478
  %1405 = and i64 3278949765094047478, %44
  %1406 = xor i64 3278949765094047478, %44
  %1407 = or i64 %1405, %1406
  %1408 = or i64 %6, -3422541624053365712
  %1409 = xor i64 %6, -1
  %1410 = and i64 -3422541624053365712, %1409
  %1411 = add i64 %1410, %6
  %1412 = xor i64 %1408, %1399
  %1413 = xor i64 %1412, %1407
  %1414 = xor i64 %1413, %1403
  %1415 = xor i64 %1414, %1404
  %1416 = xor i64 %1415, %1411
  %1417 = xor i64 %1416, 1724228056745652671
  %1418 = and i64 %1, -8428588395401030680
  %1419 = xor i64 %1, -1
  %1420 = or i64 8428588395401030679, %1419
  %1421 = xor i64 %1420, -1
  %1422 = and i64 %1421, -1
  %1423 = and i64 %44, -2319568459795472074
  %1424 = xor i64 %44, -1
  %1425 = or i64 2319568459795472073, %1424
  %1426 = xor i64 %1425, -1
  %1427 = and i64 %1426, -1
  %1428 = add i64 %46, -8031312306226874208
  %1429 = and i64 -8031312306226874208, %46
  %1430 = or i64 -8031312306226874208, %46
  %1431 = add i64 %1429, %1430
  %1432 = xor i64 %1428, %1422
  %1433 = xor i64 %1432, %1427
  %1434 = xor i64 %1433, %1418
  %1435 = xor i64 %1434, %1423
  %1436 = xor i64 %1435, %1431
  %1437 = xor i64 %1436, 0
  %1438 = mul i64 %1417, %1437
  %1439 = and i64 %46, 5019836600727167050
  %1440 = xor i64 %46, -1
  %1441 = xor i64 5019836600727167050, %1440
  %1442 = and i64 %1441, 5019836600727167050
  %1443 = sext i32 %2 to i64
  %1444 = add i64 %1443, -4503577199061225392
  %1445 = add i64 -997703872276554971, %1443
  %1446 = add i64 %1445, -3505873326784670421
  %1447 = xor i64 %1442, %1444
  %1448 = xor i64 %1447, -458205036752705549
  %1449 = xor i64 %1448, %1439
  %1450 = xor i64 %1449, %1446
  %1451 = add i64 %790, 6154374951008090290
  %1452 = add i64 2920025379712876031, %790
  %1453 = sub i64 %1452, -3234349571295214259
  %1454 = add i64 %354, 6691194083457004690
  %1455 = xor i64 6691194083457004690, %354
  %1456 = and i64 6691194083457004690, %354
  %1457 = mul i64 2, %1456
  %1458 = add i64 %1455, %1457
  %1459 = xor i64 %1454, %1458
  %1460 = xor i64 %1459, %1453
  %1461 = xor i64 %1460, %1451
  %1462 = xor i64 %1461, 0
  %1463 = mul i64 %1450, %1462
  %1464 = trunc i64 %1463 to i1
  %1465 = or i64 %354, -3451777369221006666
  %1466 = xor i64 %354, -1
  %1467 = and i64 %1466, 1129883973832848740
  %1468 = and i64 %354, -1129883973832848741
  %1469 = or i64 %1467, %1468
  %1470 = xor i64 -2326401979377528878, %1469
  %1471 = xor i64 %354, -1
  %1472 = or i64 3451777369221006665, %1471
  %1473 = xor i64 %1472, -1
  %1474 = and i64 %1473, -1
  %1475 = or i64 %1470, %1474
  %1476 = add i64 %10, -1922465979385439978
  %1477 = and i64 -1922465979385439978, %10
  %1478 = or i64 -1922465979385439978, %10
  %1479 = add i64 %1477, %1478
  %1480 = xor i64 %1479, %1465
  %1481 = xor i64 %1480, 3395785357375140163
  %1482 = xor i64 %1481, %1476
  %1483 = xor i64 %1482, %1475
  %1484 = add i64 %10, -8894796722558464144
  %1485 = xor i64 -8894796722558464144, %10
  %1486 = and i64 -8894796722558464144, %10
  %1487 = mul i64 2, %1486
  %1488 = add i64 %1485, %1487
  %1489 = and i64 %354, 2506278180436585183
  %1490 = xor i64 %354, -1
  %1491 = or i64 -2506278180436585184, %1490
  %1492 = xor i64 %1491, -1
  %1493 = and i64 %1492, -1
  %1494 = xor i64 %1489, 0
  %1495 = xor i64 %1494, %1484
  %1496 = xor i64 %1495, %1493
  %1497 = xor i64 %1496, %1488
  %1498 = mul i64 %1483, %1497
  %1499 = trunc i64 %1498 to i1
  %1500 = add i64 %790, 1259686929871220766
  %1501 = xor i64 1259686929871220766, %790
  %1502 = and i64 1259686929871220766, %790
  %1503 = mul i64 2, %1502
  %1504 = add i64 %1501, %1503
  %1505 = and i64 %44, 479415123260990636
  %1506 = xor i64 %44, -1
  %1507 = xor i64 479415123260990636, %1506
  %1508 = and i64 %1507, 479415123260990636
  %1509 = xor i64 %1508, %1504
  %1510 = xor i64 %1509, -1586624081548285757
  %1511 = xor i64 %1510, %1505
  %1512 = xor i64 %1511, %1500
  %1513 = sext i32 %2 to i64
  %1514 = add i64 %1513, 8466514914673675413
  %1515 = add i64 -7396117270420733958, %1513
  %1516 = sub i64 %1515, 2584111888615142245
  %1517 = and i64 %4, -6094321584999763134
  %1518 = xor i64 %4, -1
  %1519 = or i64 6094321584999763133, %1518
  %1520 = xor i64 %1519, -1
  %1521 = and i64 %1520, -1
  %1522 = sext i32 %2 to i64
  %1523 = add i64 %1522, 8391941656250847177
  %1524 = and i64 8391941656250847177, %1522
  %1525 = or i64 8391941656250847177, %1522
  %1526 = add i64 %1524, %1525
  %1527 = xor i64 %1516, %1514
  %1528 = xor i64 %1527, %1521
  %1529 = xor i64 %1528, 0
  %1530 = xor i64 %1529, %1517
  %1531 = xor i64 %1530, %1523
  %1532 = xor i64 %1531, %1526
  %1533 = mul i64 %1512, %1532
  %1534 = trunc i64 %1533 to i1
  call void @"9941920946239825184"(i32 22, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %1357, i1* null, i1 false, i1 false, i1 %1397, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* %124, i8*** %1309, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %1438, i64* null, i1* null, i8* null, float* null, i1* null, i1 %1464, i1 false, i1 false, i1* null, i1 %1499, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %1534, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1535 = load i8**, i8*** %1309, align 8
  %1536 = load i8*, i8** %1535, align 8
  %1537 = bitcast i8* %1536 to i1 (i64, i32, i1*)*
  %targetBlock = call i1 %1537(i64 %1, i32 %2, i1* %.out2)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %1538 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %1539 = load i8*, i8** %1538, align 8
  indirectbr i8* %1539, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub3:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main..split(i1 %0) #6 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012253)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@main..split, %defaultSwitchBasicBlock), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012242)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@main..split, %BogusBasicBlock), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012153)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@main..split, %loopStart), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012224)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@main..split, %.exitStub1), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012106)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@main..split, %.exitStub), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012129)
  %13 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %12
  store i8* blockaddress(@main..split, %EntryBasicBlockSplit), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012164)
  %15 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %14
  store i8* blockaddress(@main..split, %loopEnd), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012270)
  %17 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %16
  store i8* blockaddress(@main..split, %.split), i8** %17, align 8
  %lookupTable = alloca [9 x i32], align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %26, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012153, i32* %1, align 4
  %27 = call i8** @bf777061424148142830(i32* %1)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %.exitStub1
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %32 = load i32, i32* %31, align 4
  %33 = srem i32 %30, %32
  store i32 %33, i32* %dispatcher, align 4
  %34 = load i8*, i8** %3, align 8
  %35 = load i8, i8* %34, align 1
  %36 = xor i8 %35, -1
  %37 = or i8 %36, 1
  %38 = or i64 %14, 2430640921857170394
  %39 = xor i64 %14, -1
  %40 = and i64 %39, -4764227382888820682
  %41 = and i64 %14, 4764227382888820681
  %42 = or i64 %40, %41
  %43 = xor i64 -7180620832460633108, %42
  %44 = xor i64 %14, -1
  %45 = or i64 -2430640921857170395, %44
  %46 = xor i64 %45, -1
  %47 = and i64 %46, -1
  %48 = or i64 %43, %47
  %49 = or i64 %2, 3741546805185242952
  %50 = and i64 3741546805185242952, %2
  %51 = xor i64 3741546805185242952, %2
  %52 = or i64 %50, %51
  %53 = or i64 %2, 4781891094541507371
  %54 = xor i64 %2, -1
  %55 = and i64 4781891094541507371, %54
  %56 = add i64 %55, %2
  %57 = xor i64 %48, %38
  %58 = xor i64 %57, %52
  %59 = xor i64 %58, -2836524609399541583
  %60 = xor i64 %59, %49
  %61 = xor i64 %60, %53
  %62 = xor i64 %61, %56
  %63 = and i64 %10, -3034117064654690096
  %64 = xor i64 %10, -1
  %65 = xor i64 -3034117064654690096, %64
  %66 = and i64 %65, -3034117064654690096
  %67 = or i64 %16, 308196932200223550
  %68 = xor i64 %16, -1
  %69 = and i64 308196932200223550, %68
  %70 = add i64 %69, %16
  %71 = xor i64 %70, 6721621070678210735
  %72 = xor i64 %71, %63
  %73 = xor i64 %72, %66
  %74 = xor i64 %73, %67
  %75 = mul i64 %62, %74
  %76 = trunc i64 %75 to i8
  %77 = xor i8 %35, %76
  %78 = sub i8 %37, %77
  %79 = icmp eq i8 %78, 1
  %80 = mul i8 %35, %35
  %81 = add i8 %80, %35
  %82 = srem i8 %81, 2
  %83 = icmp eq i8 %82, 0
  %84 = xor i1 %79, true
  %85 = add i64 %10, -361240546822601574
  %86 = sub i64 0, %10
  %87 = sub i64 -361240546822601574, %86
  %88 = add i64 %8, 4645433729614246363
  %89 = sub i64 0, %8
  %90 = add i64 -4645433729614246363, %89
  %91 = sub i64 0, %90
  %92 = xor i64 %87, %91
  %93 = xor i64 %92, %88
  %94 = xor i64 %93, -2423926391785918759
  %95 = xor i64 %94, %85
  %96 = or i64 %8, -3957735257789623959
  %97 = xor i64 %8, -1
  %98 = and i64 %97, -6674705622693026548
  %99 = and i64 %8, 6674705622693026547
  %100 = or i64 %98, %99
  %101 = xor i64 7660027413903799397, %100
  %102 = xor i64 %8, -1
  %103 = or i64 3957735257789623958, %102
  %104 = xor i64 %103, -1
  %105 = and i64 %104, -1
  %106 = or i64 %101, %105
  %107 = and i64 %12, -153374227820898255
  %108 = xor i64 %12, -1
  %109 = xor i64 -153374227820898255, %108
  %110 = and i64 %109, -153374227820898255
  %111 = xor i64 %96, %106
  %112 = xor i64 %111, %107
  %113 = xor i64 %112, %110
  %114 = xor i64 %113, 0
  %115 = mul i64 %95, %114
  %116 = trunc i64 %115 to i1
  %117 = and i1 %84, %116
  %118 = and i1 %79, true
  %119 = or i1 %117, %118
  %120 = add i64 %10, 6736802226177867587
  %121 = xor i64 6736802226177867587, %10
  %122 = and i64 6736802226177867587, %10
  %123 = mul i64 2, %122
  %124 = add i64 %121, %123
  %125 = and i64 %12, -7880987486380842953
  %126 = xor i64 %12, -1
  %127 = or i64 7880987486380842952, %126
  %128 = xor i64 %127, -1
  %129 = and i64 %128, -1
  %130 = xor i64 %124, -7834406947357031505
  %131 = xor i64 %130, %120
  %132 = xor i64 %131, %125
  %133 = xor i64 %132, %129
  %134 = and i64 %6, -4877231418183028443
  %135 = xor i64 %6, -1
  %136 = xor i64 -4877231418183028443, %135
  %137 = and i64 %136, -4877231418183028443
  %138 = add i64 %2, 1594798555665399563
  %139 = sub i64 0, %2
  %140 = sub i64 1594798555665399563, %139
  %141 = xor i64 %134, %140
  %142 = xor i64 %141, 2159536834626892623
  %143 = xor i64 %142, %137
  %144 = xor i64 %143, %138
  %145 = mul i64 %133, %144
  %146 = trunc i64 %145 to i1
  %147 = xor i1 %83, %146
  %148 = and i1 %147, false
  %149 = and i1 %83, true
  %150 = or i1 %148, %149
  %151 = xor i1 %119, %150
  %152 = xor i1 %79, true
  %153 = xor i1 %83, true
  %154 = or i1 %152, %153
  %155 = xor i1 %154, true
  %156 = and i1 %155, true
  %157 = or i1 %151, %156
  %158 = select i1 %157, i32 595012270, i32 595012164
  %159 = xor i32 %158, -1
  %160 = and i32 %159, 1802249137
  %161 = or i64 %12, 894493912139132965
  %162 = xor i64 %12, -1
  %163 = and i64 %162, -7283507798521759072
  %164 = and i64 %12, 7283507798521759071
  %165 = or i64 %163, %164
  %166 = xor i64 -7601467838399788411, %165
  %167 = xor i64 %12, -1
  %168 = or i64 -894493912139132966, %167
  %169 = xor i64 %168, -1
  %170 = and i64 %169, -1
  %171 = or i64 %166, %170
  %172 = or i64 %8, 4924730040302289438
  %173 = xor i64 %8, -1
  %174 = and i64 %173, 5943223570041529190
  %175 = and i64 %8, -5943223570041529191
  %176 = or i64 %174, %175
  %177 = xor i64 1595037020657557880, %176
  %178 = xor i64 %8, -1
  %179 = or i64 -4924730040302289439, %178
  %180 = xor i64 %179, -1
  %181 = and i64 %180, -1
  %182 = or i64 %177, %181
  %183 = xor i64 %171, -6211187495698370079
  %184 = xor i64 %183, %172
  %185 = xor i64 %184, %182
  %186 = xor i64 %185, %161
  %187 = add i64 %16, 232825922448070347
  %188 = and i64 232825922448070347, %16
  %189 = or i64 232825922448070347, %16
  %190 = add i64 %188, %189
  %191 = add i64 %8, -4420327619173439740
  %192 = add i64 -170392221890961418, %8
  %193 = sub i64 %192, 4249935397282478322
  %194 = add i64 %2, 5826851093676158936
  %195 = sub i64 0, %2
  %196 = add i64 -5826851093676158936, %195
  %197 = sub i64 0, %196
  %198 = xor i64 -4783981921181441522, %187
  %199 = xor i64 %198, %197
  %200 = xor i64 %199, %190
  %201 = xor i64 %200, %191
  %202 = xor i64 %201, %193
  %203 = xor i64 %202, %194
  %204 = mul i64 %186, %203
  %205 = trunc i64 %204 to i32
  %206 = and i32 %158, %205
  %207 = or i32 %160, %206
  %208 = xor i32 %207, 1802249051
  store i32 %208, i32* %1, align 4
  %209 = call i8** @bf777061424148142830(i32* %1)
  %210 = load i8*, i8** %209, align 8
  indirectbr i8* %210, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %211 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %214 = load i32, i32* %213, align 4
  %215 = srem i32 %212, %214
  %216 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %217 = load i32, i32* %216, align 4
  %218 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %219 = load i32, i32* %218, align 4
  %220 = sub i32 %217, -628789191
  %221 = sub i32 %220, %219
  %222 = add i32 %221, -628789191
  %223 = select i1 %0, i32 %215, i32 %222
  store i32 %223, i32* %dispatcher, align 4
  %224 = load i8*, i8** %13, align 8
  %225 = load i8, i8* %224, align 1
  %226 = mul i8 %225, 2
  %227 = mul i8 %225, 2
  %228 = xor i8 2, %227
  %229 = and i8 2, %227
  %230 = mul i8 2, %229
  %231 = add i8 %228, %230
  %232 = mul i8 %226, %231
  %233 = srem i8 %232, 4
  %234 = icmp eq i8 %233, 0
  %235 = mul i8 %225, %225
  %236 = sub i8 %235, 90
  %237 = add i8 %236, %225
  %238 = add i8 %237, 90
  %239 = srem i8 %238, 2
  %240 = icmp eq i8 %239, 0
  %241 = and i1 %234, %240
  %242 = select i1 %241, i32 595012242, i32 595012164
  %243 = and i64 %10, 2867854097842973672
  %244 = or i64 -2867854097842973673, %10
  %245 = sub i64 %244, -2867854097842973673
  %246 = or i64 %4, 1451301320453543777
  %247 = xor i64 %4, -1
  %248 = and i64 1451301320453543777, %247
  %249 = add i64 %248, %4
  %250 = xor i64 %249, %245
  %251 = xor i64 %250, 6282981208312051211
  %252 = xor i64 %251, %246
  %253 = xor i64 %252, %243
  %254 = sext i32 %dispatcher1 to i64
  %255 = or i64 %254, -3692147011448891383
  %256 = and i64 -3692147011448891383, %254
  %257 = xor i64 -3692147011448891383, %254
  %258 = or i64 %256, %257
  %259 = sext i32 %dispatcher1 to i64
  %260 = or i64 %259, -4530873910682007214
  %261 = xor i64 %259, -1
  %262 = and i64 -4530873910682007214, %261
  %263 = add i64 %262, %259
  %264 = add i64 %6, 3003057467510477761
  %265 = add i64 -2047473374558176729, %6
  %266 = sub i64 %265, -5050530842068654490
  %267 = xor i64 -2838029291803969982, %264
  %268 = xor i64 %267, %266
  %269 = xor i64 %268, %260
  %270 = xor i64 %269, %258
  %271 = xor i64 %270, %255
  %272 = xor i64 %271, %263
  %273 = mul i64 %253, %272
  %274 = trunc i64 %273 to i32
  %275 = xor i32 %242, %274
  store i32 %275, i32* %1, align 4
  %276 = call i8** @bf777061424148142830(i32* %1)
  %277 = load i8*, i8** %276, align 8
  indirectbr i8* %277, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub1:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %278 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %278, align 4
  %279 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %279, align 4
  %280 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %281 = add i64 %12, -6172419997838278598
  %282 = sub i64 0, %12
  %283 = sub i64 -6172419997838278598, %282
  %284 = sext i32 %dispatcher1 to i64
  %285 = add i64 %284, 4618432314371131017
  %286 = xor i64 4618432314371131017, %284
  %287 = and i64 4618432314371131017, %284
  %288 = mul i64 2, %287
  %289 = add i64 %286, %288
  %290 = add i64 %16, -4223562965518836565
  %291 = xor i64 -4223562965518836565, %16
  %292 = and i64 -4223562965518836565, %16
  %293 = mul i64 2, %292
  %294 = add i64 %291, %293
  %295 = xor i64 %289, 279760707596742359
  %296 = xor i64 %295, %283
  %297 = xor i64 %296, %285
  %298 = xor i64 %297, %290
  %299 = xor i64 %298, %281
  %300 = xor i64 %299, %294
  %301 = add i64 %8, 341905949157849156
  %302 = sub i64 0, %8
  %303 = sub i64 341905949157849156, %302
  %304 = and i64 %10, -5619164802572976374
  %305 = xor i64 %10, -1
  %306 = or i64 5619164802572976373, %305
  %307 = xor i64 %306, -1
  %308 = and i64 %307, -1
  %309 = xor i64 %304, %303
  %310 = xor i64 %309, %308
  %311 = xor i64 %310, 7183052733215354549
  %312 = xor i64 %311, %301
  %313 = mul i64 %300, %312
  %314 = trunc i64 %313 to i32
  store i32 %314, i32* %280, align 4
  %315 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %315, align 4
  %316 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %316, align 4
  %317 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %318 = load i32, i32* %317, align 4
  store i32 %318, i32* %dispatcher, align 4
  %319 = load i8*, i8** %13, align 8
  %320 = load i8, i8* %319, align 1
  %321 = mul i8 %320, 2
  %322 = mul i8 %320, 2
  %323 = add i8 2, %322
  %324 = mul i8 %321, %323
  %325 = srem i8 %324, 4
  %326 = icmp eq i8 %325, 0
  %327 = mul i8 %320, %320
  %328 = add i64 %6, -403371426581567365
  %329 = sub i64 0, %6
  %330 = add i64 403371426581567365, %329
  %331 = sub i64 0, %330
  %332 = or i64 %8, -770012283885766192
  %333 = and i64 -770012283885766192, %8
  %334 = xor i64 -770012283885766192, %8
  %335 = or i64 %333, %334
  %336 = xor i64 %331, %332
  %337 = xor i64 %336, 8767623872146880969
  %338 = xor i64 %337, %335
  %339 = xor i64 %338, %328
  %340 = and i64 %16, 1951052363294932647
  %341 = xor i64 %16, -1
  %342 = or i64 -1951052363294932648, %341
  %343 = xor i64 %342, -1
  %344 = and i64 %343, -1
  %345 = add i64 %12, -12642729472306064
  %346 = add i64 8889632456872940024, %12
  %347 = sub i64 %346, 8902275186345246088
  %348 = and i64 %16, -626091775324318986
  %349 = or i64 626091775324318985, %16
  %350 = sub i64 %349, 626091775324318985
  %351 = xor i64 0, %347
  %352 = xor i64 %351, %348
  %353 = xor i64 %352, %350
  %354 = xor i64 %353, %344
  %355 = xor i64 %354, %345
  %356 = xor i64 %355, %340
  %357 = mul i64 %339, %356
  %358 = trunc i64 %357 to i8
  %359 = sub i8 %358, %320
  %360 = sub i8 %327, %359
  %361 = srem i8 %360, 2
  %362 = icmp eq i8 %361, 0
  %363 = and i1 %326, %362
  %364 = add i64 %2, 8839434601517068173
  %365 = xor i64 8839434601517068173, %2
  %366 = and i64 8839434601517068173, %2
  %367 = mul i64 2, %366
  %368 = add i64 %365, %367
  %369 = and i64 %16, -17850470903027549
  %370 = or i64 17850470903027548, %16
  %371 = sub i64 %370, 17850470903027548
  %372 = xor i64 %364, %369
  %373 = xor i64 %372, %368
  %374 = xor i64 %373, -903713027664879429
  %375 = xor i64 %374, %371
  %376 = sext i32 %dispatcher1 to i64
  %377 = or i64 %376, -4974940651699836440
  %378 = xor i64 %376, -1
  %379 = and i64 -4974940651699836440, %378
  %380 = add i64 %379, %376
  %381 = or i64 %2, -4574431696158715901
  %382 = xor i64 %2, -1
  %383 = and i64 %382, 3391382068817253531
  %384 = and i64 %2, -3391382068817253532
  %385 = or i64 %383, %384
  %386 = xor i64 -1183102419641875304, %385
  %387 = xor i64 %2, -1
  %388 = or i64 4574431696158715900, %387
  %389 = xor i64 %388, -1
  %390 = and i64 %389, -1
  %391 = or i64 %386, %390
  %392 = xor i64 %380, -7785002208447224790
  %393 = xor i64 %392, %381
  %394 = xor i64 %393, %377
  %395 = xor i64 %394, %391
  %396 = mul i64 %375, %395
  %397 = trunc i64 %396 to i32
  %398 = select i1 %363, i32 %397, i32 595012129
  %399 = xor i32 %398, 143
  store i32 %399, i32* %1, align 4
  %400 = call i8** @bf777061424148142830(i32* %1)
  %401 = load i8*, i8** %400, align 8
  indirectbr i8* %401, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %402 = load i8*, i8** %17, align 8
  %403 = load i8, i8* %402, align 1
  %404 = and i8 %403, 1
  %405 = icmp eq i8 %404, 1
  %406 = mul i8 %403, %403
  %407 = sub i8 0, %406
  %408 = sub i8 0, %403
  %409 = add i8 %407, %408
  %410 = sub i8 0, %409
  %411 = srem i8 %410, 2
  %412 = icmp eq i8 %411, 0
  %413 = and i1 %405, %412
  %414 = xor i1 %405, %412
  %415 = or i1 %413, %414
  %416 = select i1 %415, i32 595012242, i32 595012164
  %417 = or i32 %416, 214
  %418 = and i32 %416, 214
  %419 = sub i32 %417, %418
  store i32 %419, i32* %1, align 4
  %420 = call i8** @bf777061424148142830(i32* %1)
  %421 = load i8*, i8** %420, align 8
  indirectbr i8* %421, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %422 = load i8*, i8** %5, align 8
  %423 = load i8, i8* %422, align 1
  %424 = mul i8 %423, 2
  %425 = mul i8 %423, 2
  %426 = add i8 2, %425
  %427 = mul i8 %424, %426
  %428 = and i64 %16, -5012171021603097099
  %429 = or i64 5012171021603097098, %16
  %430 = sub i64 %429, 5012171021603097098
  %431 = and i64 %16, 6850493884148669096
  %432 = xor i64 %16, -1
  %433 = or i64 -6850493884148669097, %432
  %434 = xor i64 %433, -1
  %435 = and i64 %434, -1
  %436 = sext i32 %dispatcher1 to i64
  %437 = add i64 %436, 1114714155676529428
  %438 = sub i64 0, %436
  %439 = add i64 -1114714155676529428, %438
  %440 = sub i64 0, %439
  %441 = xor i64 %430, %431
  %442 = xor i64 %441, %428
  %443 = xor i64 %442, %437
  %444 = xor i64 %443, %440
  %445 = xor i64 %444, %435
  %446 = xor i64 %445, -8745813831791290009
  %447 = and i64 %16, 4521774154382554497
  %448 = or i64 -4521774154382554498, %16
  %449 = sub i64 %448, -4521774154382554498
  %450 = add i64 %14, 7709255630369467872
  %451 = sub i64 0, %14
  %452 = sub i64 7709255630369467872, %451
  %453 = xor i64 -5605809512192882340, %452
  %454 = xor i64 %453, %450
  %455 = xor i64 %454, %447
  %456 = xor i64 %455, %449
  %457 = mul i64 %446, %456
  %458 = trunc i64 %457 to i8
  %459 = srem i8 %427, %458
  %460 = icmp eq i8 %459, 0
  %461 = mul i8 %423, %423
  %462 = xor i8 %461, %423
  %463 = and i8 %461, %423
  %464 = mul i8 2, %463
  %465 = add i8 %462, %464
  %466 = add i64 %12, -4604771348145332399
  %467 = xor i64 -4604771348145332399, %12
  %468 = and i64 -4604771348145332399, %12
  %469 = mul i64 2, %468
  %470 = add i64 %467, %469
  %471 = or i64 %16, 145484542954432101
  %472 = xor i64 %16, -1
  %473 = and i64 %472, -2605048986286396091
  %474 = and i64 %16, 2605048986286396090
  %475 = or i64 %473, %474
  %476 = xor i64 -2747797394485441760, %475
  %477 = xor i64 %16, -1
  %478 = or i64 -145484542954432102, %477
  %479 = xor i64 %478, -1
  %480 = and i64 %479, -1
  %481 = or i64 %476, %480
  %482 = or i64 %10, 3891997028198162742
  %483 = xor i64 %10, -1
  %484 = and i64 3891997028198162742, %483
  %485 = add i64 %484, %10
  %486 = xor i64 1705481974675466763, %482
  %487 = xor i64 %486, %485
  %488 = xor i64 %487, %466
  %489 = xor i64 %488, %481
  %490 = xor i64 %489, %471
  %491 = xor i64 %490, %470
  %492 = or i64 %16, 4331439064708827373
  %493 = xor i64 %16, -1
  %494 = and i64 %493, 7773472895107711603
  %495 = and i64 %16, -7773472895107711604
  %496 = or i64 %494, %495
  %497 = xor i64 6340136477791193758, %496
  %498 = xor i64 %16, -1
  %499 = or i64 -4331439064708827374, %498
  %500 = xor i64 %499, -1
  %501 = and i64 %500, -1
  %502 = or i64 %497, %501
  %503 = or i64 %16, -6725949628952602292
  %504 = xor i64 %16, -1
  %505 = and i64 -6725949628952602292, %504
  %506 = add i64 %505, %16
  %507 = or i64 %8, 418547634167636026
  %508 = xor i64 %8, -1
  %509 = and i64 418547634167636026, %508
  %510 = add i64 %509, %8
  %511 = xor i64 %492, %506
  %512 = xor i64 %511, %502
  %513 = xor i64 %512, %510
  %514 = xor i64 %513, 7645620245852955462
  %515 = xor i64 %514, %503
  %516 = xor i64 %515, %507
  %517 = mul i64 %491, %516
  %518 = trunc i64 %517 to i8
  %519 = srem i8 %465, %518
  %520 = icmp eq i8 %519, 0
  %521 = and i1 %460, %520
  %522 = or i64 %6, 7112583243144599438
  %523 = and i64 7112583243144599438, %6
  %524 = xor i64 7112583243144599438, %6
  %525 = or i64 %523, %524
  %526 = add i64 %8, 4240028411669294963
  %527 = add i64 7406217547790395697, %8
  %528 = sub i64 %527, 3166189136121100734
  %529 = xor i64 %525, %528
  %530 = xor i64 %529, %522
  %531 = xor i64 %530, 251678461157333567
  %532 = xor i64 %531, %526
  %533 = or i64 %4, 8893435144502400688
  %534 = and i64 8893435144502400688, %4
  %535 = xor i64 8893435144502400688, %4
  %536 = or i64 %534, %535
  %537 = and i64 %16, 9027239441767308107
  %538 = xor i64 %16, -1
  %539 = or i64 -9027239441767308108, %538
  %540 = xor i64 %539, -1
  %541 = and i64 %540, -1
  %542 = xor i64 %533, -4696309475378745977
  %543 = xor i64 %542, %541
  %544 = xor i64 %543, %536
  %545 = xor i64 %544, %537
  %546 = mul i64 %532, %545
  %547 = trunc i64 %546 to i32
  %548 = select i1 %521, i32 595012242, i32 %547
  %549 = or i64 %2, -1432391499050551166
  %550 = and i64 -1432391499050551166, %2
  %551 = xor i64 -1432391499050551166, %2
  %552 = or i64 %550, %551
  %553 = or i64 %8, 4644052066178173949
  %554 = and i64 4644052066178173949, %8
  %555 = xor i64 4644052066178173949, %8
  %556 = or i64 %554, %555
  %557 = sext i32 %dispatcher1 to i64
  %558 = or i64 %557, 6425693228734936229
  %559 = and i64 6425693228734936229, %557
  %560 = xor i64 6425693228734936229, %557
  %561 = or i64 %559, %560
  %562 = xor i64 %549, %556
  %563 = xor i64 %562, %558
  %564 = xor i64 %563, %561
  %565 = xor i64 %564, 276259087702921705
  %566 = xor i64 %565, %553
  %567 = xor i64 %566, %552
  %568 = sext i32 %dispatcher1 to i64
  %569 = and i64 %568, 5918624466899534028
  %570 = xor i64 %568, -1
  %571 = or i64 -5918624466899534029, %570
  %572 = xor i64 %571, -1
  %573 = and i64 %572, -1
  %574 = and i64 %10, 7607881359864825220
  %575 = or i64 -7607881359864825221, %10
  %576 = sub i64 %575, -7607881359864825221
  %577 = xor i64 %573, %574
  %578 = xor i64 %577, %576
  %579 = xor i64 %578, -7445733909753909901
  %580 = xor i64 %579, %569
  %581 = mul i64 %567, %580
  %582 = trunc i64 %581 to i32
  %583 = or i32 %548, %582
  %584 = and i32 %548, 171
  %585 = sub i32 %583, %584
  store i32 %585, i32* %1, align 4
  %586 = call i8** @bf777061424148142830(i32* %1)
  %587 = load i8*, i8** %586, align 8
  indirectbr i8* %587, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.13(i1 %0, i64* %.out, i64* %.out1, i64* %.out2) #6 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012097)
  %3 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.13, %.exitStub3), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012096)
  %5 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.13, %.exitStub), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012099)
  %7 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %6
  store i8* blockaddress(@main.extracted.13, %codeRepl), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012100)
  %9 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %8
  store i8* blockaddress(@main.extracted.13, %"2"), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012098)
  %11 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %10
  store i8* blockaddress(@main.extracted.13, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012101)
  %13 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %12
  store i8* blockaddress(@main.extracted.13, %BogusBasciBlock), i8** %13, align 8
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.13, %BogusBasciBlock), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %15, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.13, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %16, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.13, %"2"), i8** %.reload5, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %17, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.13, %codeRepl), i8** %.reload8, align 8
  %18 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %18, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.13, %.exitStub), i8** %.reload11, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %19, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@main.extracted.13, %.exitStub3), i8** %.reload14, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %21, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3399976269554154823, i32 0, i64 %22
  store i8** %23, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %24 = load i8*, i8** %.reload, align 8
  indirectbr i8* %24, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %25 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.13, %EntryBasicBlockSplit), i8** %25, align 8
  %26 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.13, %.exitStub3), i8** %26, align 8
  %27 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.13, %.exitStub), i8** %27, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %28 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %28, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i64*, i64*, i1)* @main.extracted.13.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %29 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %29, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %30 = mul i64 8, 123
  store i64 %30, i64* %.out, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %31 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %31, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %20, align 8
  %32 = call i8** @lk17440691223701217449(i64* %20)
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast i8* %33 to i1 (i64*, i64*, i1)*
  %targetBlock = call i1 %34(i64* %.out1, i64* %.out2, i1 %0)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %35 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %36 = load i8*, i8** %35, align 8
  indirectbr i8* %36, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub3]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub3:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main..split.14() #6 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012163)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@main..split.14, %loopEnd), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012212)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main..split.14, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012280)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main..split.14, %.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012103)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main..split.14, %.split), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012134)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main..split.14, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012149)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@main..split.14, %BogusBasicBlock), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012173)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@main..split.14, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012173, i32* %0, align 4
  %23 = call i8** @bf777061424148142830(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 %26, %28
  store i32 %29, i32* %dispatcher, align 4
  %30 = load i8*, i8** %12, align 8
  %31 = load i8, i8* %30, align 1
  %32 = mul i8 %31, 2
  %33 = mul i8 %31, 2
  %34 = add i8 2, %33
  %35 = mul i8 %32, %34
  %36 = srem i8 %35, 4
  %37 = icmp eq i8 %36, 0
  %38 = mul i8 %31, %31
  %39 = add i8 %38, %31
  %40 = srem i8 %39, 2
  %41 = icmp eq i8 %40, 0
  %42 = or i1 %37, %41
  %43 = select i1 %42, i32 595012103, i32 595012163
  %44 = xor i32 %43, 68
  store i32 %44, i32* %0, align 4
  %45 = call i8** @bf777061424148142830(i32* %0)
  %46 = load i8*, i8** %45, align 8
  indirectbr i8* %46, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %47 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %50 = load i32, i32* %49, align 4
  %51 = srem i32 %48, %50
  store i32 %51, i32* %dispatcher, align 4
  %52 = load i8*, i8** %2, align 8
  %53 = load i8, i8* %52, align 1
  %54 = and i8 %53, 1
  %55 = sext i32 %dispatcher1 to i64
  %56 = or i64 %55, -8060934005949842104
  %57 = xor i64 %55, -1
  %58 = and i64 -8060934005949842104, %57
  %59 = add i64 %58, %55
  %60 = and i64 %7, -721091791240307815
  %61 = or i64 721091791240307814, %7
  %62 = sub i64 %61, 721091791240307814
  %63 = xor i64 %59, %62
  %64 = xor i64 %63, %56
  %65 = xor i64 %64, -425472488322528641
  %66 = xor i64 %65, %60
  %67 = add i64 %11, 2487356863188283829
  %68 = sub i64 0, %11
  %69 = add i64 -2487356863188283829, %68
  %70 = sub i64 0, %69
  %71 = add i64 %5, 4927602347242612336
  %72 = xor i64 4927602347242612336, %5
  %73 = and i64 4927602347242612336, %5
  %74 = mul i64 2, %73
  %75 = add i64 %72, %74
  %76 = xor i64 %67, %75
  %77 = xor i64 %76, %71
  %78 = xor i64 %77, 0
  %79 = xor i64 %78, %70
  %80 = mul i64 %66, %79
  %81 = trunc i64 %80 to i8
  %82 = icmp eq i8 %54, %81
  %83 = mul i8 %53, %53
  %84 = add i8 %83, %53
  %85 = mul i8 %84, 3
  %86 = srem i8 %85, 2
  %87 = icmp eq i8 %86, 0
  %88 = or i1 %82, %87
  %89 = select i1 %88, i32 595012103, i32 595012163
  %90 = xor i32 %89, 68
  store i32 %90, i32* %0, align 4
  %91 = call i8** @bf777061424148142830(i32* %0)
  %92 = load i8*, i8** %91, align 8
  indirectbr i8* %92, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %93 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %93, align 4
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %94, align 4
  %95 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %95, align 4
  %96 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %96, align 4
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %98 = load i32, i32* %97, align 4
  store i32 %98, i32* %dispatcher, align 4
  %99 = load i8*, i8** %14, align 8
  %100 = load i8, i8* %99, align 1
  %101 = mul i8 %100, 2
  %102 = mul i8 %100, 2
  %103 = add i8 117, %102
  %104 = sub i8 %103, 115
  %105 = mul i8 %101, %104
  %106 = srem i8 %105, 4
  %107 = icmp eq i8 %106, 0
  %108 = mul i8 %100, %100
  %109 = add i8 %108, %100
  %110 = srem i8 %109, 2
  %111 = icmp eq i8 %110, 0
  %112 = or i1 %107, %111
  %113 = select i1 %112, i32 595012134, i32 595012134
  %114 = xor i32 %113, 0
  store i32 %114, i32* %0, align 4
  %115 = call i8** @bf777061424148142830(i32* %0)
  %116 = load i8*, i8** %115, align 8
  indirectbr i8* %116, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %117 = load i8*, i8** %2, align 8
  %118 = load i8, i8* %117, align 1
  %119 = and i8 %118, 1
  %120 = icmp eq i8 %119, 1
  %121 = mul i8 %118, %118
  %122 = add i8 %121, %118
  %123 = srem i8 %122, 2
  %124 = icmp eq i8 %123, 0
  %125 = or i1 %120, %124
  %126 = select i1 %125, i32 595012280, i32 595012163
  %127 = xor i32 %126, 251
  store i32 %127, i32* %0, align 4
  %128 = call i8** @bf777061424148142830(i32* %0)
  %129 = load i8*, i8** %128, align 8
  indirectbr i8* %129, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %130 = load i8*, i8** %14, align 8
  %131 = load i8, i8* %130, align 1
  %132 = and i64 %13, 2638632970089436661
  %133 = or i64 -2638632970089436662, %13
  %134 = sub i64 %133, -2638632970089436662
  %135 = and i64 %1, 8532558384401576072
  %136 = xor i64 %1, -1
  %137 = or i64 -8532558384401576073, %136
  %138 = xor i64 %137, -1
  %139 = and i64 %138, -1
  %140 = xor i64 -1311745847709422351, %139
  %141 = xor i64 %140, %135
  %142 = xor i64 %141, %134
  %143 = xor i64 %142, %132
  %144 = and i64 %5, 8044571066757706417
  %145 = xor i64 %5, -1
  %146 = or i64 -8044571066757706418, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = add i64 %13, -7490038349348550592
  %150 = add i64 -5273187635114431860, %13
  %151 = sub i64 %150, 2216850714234118732
  %152 = xor i64 %148, %144
  %153 = xor i64 %152, %151
  %154 = xor i64 %153, -5815360140915915759
  %155 = xor i64 %154, %149
  %156 = mul i64 %143, %155
  %157 = trunc i64 %156 to i8
  %158 = and i8 %131, %157
  %159 = icmp eq i8 %158, 0
  %160 = mul i8 %131, %131
  %161 = add i8 %160, %131
  %162 = or i64 %13, 6517757210781852434
  %163 = and i64 6517757210781852434, %13
  %164 = xor i64 6517757210781852434, %13
  %165 = or i64 %163, %164
  %166 = sext i32 %dispatcher1 to i64
  %167 = or i64 %166, 4127502603329524649
  %168 = and i64 4127502603329524649, %166
  %169 = xor i64 4127502603329524649, %166
  %170 = or i64 %168, %169
  %171 = xor i64 %162, -4319192246878734023
  %172 = xor i64 %171, %167
  %173 = xor i64 %172, %165
  %174 = xor i64 %173, %170
  %175 = and i64 %13, -902815427085768626
  %176 = xor i64 %13, -1
  %177 = or i64 902815427085768625, %176
  %178 = xor i64 %177, -1
  %179 = and i64 %178, -1
  %180 = and i64 %11, 203438734669022489
  %181 = xor i64 %11, -1
  %182 = xor i64 203438734669022489, %181
  %183 = and i64 %182, 203438734669022489
  %184 = add i64 %11, -7458375909651087736
  %185 = add i64 -6921212105226019987, %11
  %186 = add i64 %185, -537163804425067749
  %187 = xor i64 %184, %186
  %188 = xor i64 %187, %179
  %189 = xor i64 %188, %175
  %190 = xor i64 %189, %183
  %191 = xor i64 %190, %180
  %192 = xor i64 %191, 7718337682630602523
  %193 = mul i64 %174, %192
  %194 = trunc i64 %193 to i8
  %195 = mul i8 %161, %194
  %196 = srem i8 %195, 2
  %197 = icmp eq i8 %196, 0
  %198 = or i1 %159, %197
  %199 = select i1 %198, i32 595012212, i32 595012173
  %200 = xor i32 %199, 57
  store i32 %200, i32* %0, align 4
  %201 = call i8** @bf777061424148142830(i32* %0)
  %202 = load i8*, i8** %201, align 8
  indirectbr i8* %202, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.15(i32 %0, i32 %1, i1* %.out) #6 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012099)
  %4 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.15, %.exitStub1), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012100)
  %6 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.15, %BogusBasciBlock), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012098)
  %8 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.15, %.exitStub), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012096)
  %10 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %9
  store i8* blockaddress(@main.extracted.15, %"2"), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012097)
  %12 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %11
  store i8* blockaddress(@main.extracted.15, %codeRepl), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012101)
  %14 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %13
  store i8* blockaddress(@main.extracted.15, %EntryBasicBlockSplit), i8** %14, align 8
  %.reg2mem15 = alloca i8**, align 8
  %15 = sext i32 %1 to i64
  %16 = add i64 %15, -8704575546406126271
  %17 = sub i64 0, %15
  %18 = add i64 8704575546406126271, %17
  %19 = sub i64 0, %18
  %20 = sext i32 %0 to i64
  %21 = add i64 %20, -148196875493197981
  %22 = and i64 -148196875493197981, %20
  %23 = or i64 -148196875493197981, %20
  %24 = add i64 %22, %23
  %25 = sext i32 %1 to i64
  %26 = or i64 %25, -8430263354863608040
  %27 = xor i64 %25, -1
  %28 = and i64 %27, 3057066787819529173
  %29 = and i64 %25, -3057066787819529174
  %30 = or i64 %28, %29
  %31 = xor i64 -6814700299106894643, %30
  %32 = xor i64 %25, -1
  %33 = or i64 8430263354863608039, %32
  %34 = xor i64 %33, -1
  %35 = and i64 %34, -1
  %36 = or i64 %31, %35
  %37 = xor i64 %16, %36
  %38 = xor i64 %37, %19
  %39 = xor i64 %38, %21
  %40 = xor i64 %39, %24
  %41 = xor i64 %40, 7317682371047006525
  %42 = xor i64 %41, %26
  %43 = sext i32 %0 to i64
  %44 = and i64 %43, -2996283423470987106
  %45 = xor i64 %43, -1
  %46 = xor i64 -2996283423470987106, %45
  %47 = and i64 %46, -2996283423470987106
  %48 = sext i32 %1 to i64
  %49 = and i64 %48, -9199437921731528984
  %50 = xor i64 %48, -1
  %51 = or i64 9199437921731528983, %50
  %52 = xor i64 %51, -1
  %53 = and i64 %52, -1
  %54 = sext i32 %1 to i64
  %55 = and i64 %54, -7939067353069778338
  %56 = xor i64 %54, -1
  %57 = xor i64 -7939067353069778338, %56
  %58 = and i64 %57, -7939067353069778338
  %59 = xor i64 %44, %49
  %60 = xor i64 %59, %53
  %61 = xor i64 %60, %58
  %62 = xor i64 %61, %55
  %63 = xor i64 %62, %47
  %64 = xor i64 %63, -8342741500618228203
  %65 = mul i64 %42, %64
  %66 = trunc i64 %65 to i32
  %.reg2mem12 = alloca i8**, i32 %66, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %67 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15, %BogusBasciBlock), i8** %67, align 8
  %68 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %68, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.15, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %69 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %69, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.15, %"2"), i8** %.reload5, align 8
  %70 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %70, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.15, %codeRepl), i8** %.reload8, align 8
  %71 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %71, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.15, %.exitStub), i8** %.reload11, align 8
  %72 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %72, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@main.extracted.15, %.exitStub1), i8** %.reload14, align 8
  %73 = sext i32 %0 to i64
  %74 = or i64 %73, -3806568481640615475
  %75 = xor i64 %73, -1
  %76 = and i64 %75, -2301275109913828344
  %77 = and i64 %73, 2301275109913828343
  %78 = or i64 %76, %77
  %79 = xor i64 3115470976020616645, %78
  %80 = xor i64 %73, -1
  %81 = or i64 3806568481640615474, %80
  %82 = xor i64 %81, -1
  %83 = and i64 %82, -1
  %84 = or i64 %79, %83
  %85 = sext i32 %1 to i64
  %86 = or i64 %85, 5905351875024938361
  %87 = and i64 5905351875024938361, %85
  %88 = xor i64 5905351875024938361, %85
  %89 = or i64 %87, %88
  %90 = sext i32 %1 to i64
  %91 = add i64 %90, 8893082735960801890
  %92 = xor i64 8893082735960801890, %90
  %93 = and i64 8893082735960801890, %90
  %94 = mul i64 2, %93
  %95 = add i64 %92, %94
  %96 = xor i64 %89, %74
  %97 = xor i64 %96, %84
  %98 = xor i64 %97, %91
  %99 = xor i64 %98, %86
  %100 = xor i64 %99, -1185059866989827407
  %101 = xor i64 %100, %95
  %102 = sext i32 %1 to i64
  %103 = add i64 %102, 4300906117658150701
  %104 = sub i64 0, %102
  %105 = sub i64 4300906117658150701, %104
  %106 = sext i32 %1 to i64
  %107 = add i64 %106, 4650454304034383536
  %108 = add i64 2938669324572360820, %106
  %109 = add i64 %108, 1711784979462022716
  %110 = sext i32 %1 to i64
  %111 = and i64 %110, 2865078251154278818
  %112 = xor i64 %110, -1
  %113 = or i64 -2865078251154278819, %112
  %114 = xor i64 %113, -1
  %115 = and i64 %114, -1
  %116 = xor i64 %105, %109
  %117 = xor i64 %116, %111
  %118 = xor i64 %117, %107
  %119 = xor i64 %118, -634995781230256559
  %120 = xor i64 %119, %103
  %121 = xor i64 %120, %115
  %122 = mul i64 %101, %121
  %123 = trunc i64 %122 to i32
  %124 = alloca i64, i32 %123, align 8
  %125 = alloca i64, align 8
  %126 = sext i32 %0 to i64
  %127 = or i64 %126, 7463364637570895892
  %128 = xor i64 %126, -1
  %129 = and i64 %128, -2809548373791245922
  %130 = and i64 %126, 2809548373791245921
  %131 = or i64 %129, %130
  %132 = xor i64 -4714907913900693110, %131
  %133 = xor i64 %126, -1
  %134 = or i64 -7463364637570895893, %133
  %135 = xor i64 %134, -1
  %136 = and i64 %135, -1
  %137 = or i64 %132, %136
  %138 = sext i32 %1 to i64
  %139 = add i64 %138, 3935195044474207537
  %140 = add i64 -5241281433086772469, %138
  %141 = add i64 %140, 9176476477560980006
  %142 = sext i32 %0 to i64
  %143 = or i64 %142, 2606260602386475727
  %144 = xor i64 %142, -1
  %145 = and i64 %144, 7956681477685195994
  %146 = and i64 %142, -7956681477685195995
  %147 = or i64 %145, %146
  %148 = xor i64 5350421013308661269, %147
  %149 = xor i64 %142, -1
  %150 = or i64 -2606260602386475728, %149
  %151 = xor i64 %150, -1
  %152 = and i64 %151, -1
  %153 = or i64 %148, %152
  %154 = xor i64 %143, %141
  %155 = xor i64 %154, %139
  %156 = xor i64 %155, %153
  %157 = xor i64 %156, %137
  %158 = xor i64 %157, %127
  %159 = xor i64 %158, 2058074555546822269
  %160 = sext i32 %0 to i64
  %161 = add i64 %160, 5808042616068870540
  %162 = xor i64 5808042616068870540, %160
  %163 = and i64 5808042616068870540, %160
  %164 = mul i64 2, %163
  %165 = add i64 %162, %164
  %166 = sext i32 %1 to i64
  %167 = and i64 %166, 1768375906221903339
  %168 = xor i64 %166, -1
  %169 = or i64 -1768375906221903340, %168
  %170 = xor i64 %169, -1
  %171 = and i64 %170, -1
  %172 = sext i32 %1 to i64
  %173 = add i64 %172, -852368638949185344
  %174 = sub i64 0, %172
  %175 = add i64 852368638949185344, %174
  %176 = sub i64 0, %175
  %177 = xor i64 %173, %161
  %178 = xor i64 %177, %165
  %179 = xor i64 %178, %171
  %180 = xor i64 %179, 0
  %181 = xor i64 %180, %167
  %182 = xor i64 %181, %176
  %183 = mul i64 %159, %182
  %184 = trunc i64 %183 to i1
  %185 = sext i32 %0 to i64
  %186 = add i64 %185, 4337586764847237331
  %187 = xor i64 4337586764847237331, %185
  %188 = and i64 4337586764847237331, %185
  %189 = mul i64 2, %188
  %190 = add i64 %187, %189
  %191 = sext i32 %1 to i64
  %192 = and i64 %191, -4252452631528346483
  %193 = xor i64 %191, -1
  %194 = xor i64 -4252452631528346483, %193
  %195 = and i64 %194, -4252452631528346483
  %196 = sext i32 %1 to i64
  %197 = add i64 %196, 7843174073151931012
  %198 = add i64 -6301353955602097459, %196
  %199 = add i64 %198, -4302216044955523145
  %200 = xor i64 -4024125264224477259, %195
  %201 = xor i64 %200, %199
  %202 = xor i64 %201, %197
  %203 = xor i64 %202, %192
  %204 = xor i64 %203, %190
  %205 = xor i64 %204, %186
  %206 = sext i32 %1 to i64
  %207 = add i64 %206, 3754499247137289665
  %208 = and i64 3754499247137289665, %206
  %209 = or i64 3754499247137289665, %206
  %210 = add i64 %208, %209
  %211 = sext i32 %1 to i64
  %212 = and i64 %211, 1589149833098225944
  %213 = xor i64 %211, -1
  %214 = or i64 -1589149833098225945, %213
  %215 = xor i64 %214, -1
  %216 = and i64 %215, -1
  %217 = xor i64 0, %216
  %218 = xor i64 %217, %210
  %219 = xor i64 %218, %207
  %220 = xor i64 %219, %212
  %221 = mul i64 %205, %220
  %222 = trunc i64 %221 to i1
  %223 = sext i32 %1 to i64
  %224 = or i64 %223, 6171621870343830756
  %225 = xor i64 %223, -1
  %226 = and i64 %225, -5765588085915538428
  %227 = and i64 %223, 5765588085915538427
  %228 = or i64 %226, %227
  %229 = xor i64 -406866260829695776, %228
  %230 = xor i64 %223, -1
  %231 = or i64 -6171621870343830757, %230
  %232 = xor i64 %231, -1
  %233 = and i64 %232, -1
  %234 = or i64 %229, %233
  %235 = sext i32 %0 to i64
  %236 = and i64 %235, 7306941384040259873
  %237 = or i64 -7306941384040259874, %235
  %238 = sub i64 %237, -7306941384040259874
  %239 = sext i32 %0 to i64
  %240 = add i64 %239, -8234642215930784941
  %241 = sub i64 0, %239
  %242 = add i64 8234642215930784941, %241
  %243 = sub i64 0, %242
  %244 = xor i64 %234, %240
  %245 = xor i64 %244, 3768208935272605143
  %246 = xor i64 %245, %224
  %247 = xor i64 %246, %243
  %248 = xor i64 %247, %238
  %249 = xor i64 %248, %236
  %250 = sext i32 %0 to i64
  %251 = or i64 %250, 6043661516675164375
  %252 = xor i64 %250, -1
  %253 = and i64 %252, 8681188359313540407
  %254 = and i64 %250, -8681188359313540408
  %255 = or i64 %253, %254
  %256 = xor i64 3145378349216230880, %255
  %257 = xor i64 %250, -1
  %258 = or i64 -6043661516675164376, %257
  %259 = xor i64 %258, -1
  %260 = and i64 %259, -1
  %261 = or i64 %256, %260
  %262 = sext i32 %1 to i64
  %263 = and i64 %262, 2025884324189806131
  %264 = xor i64 %262, -1
  %265 = xor i64 2025884324189806131, %264
  %266 = and i64 %265, 2025884324189806131
  %267 = sext i32 %0 to i64
  %268 = or i64 %267, -3407420581706092565
  %269 = xor i64 %267, -1
  %270 = and i64 -3407420581706092565, %269
  %271 = add i64 %270, %267
  %272 = xor i64 %261, 0
  %273 = xor i64 %272, %263
  %274 = xor i64 %273, %266
  %275 = xor i64 %274, %268
  %276 = xor i64 %275, %251
  %277 = xor i64 %276, %271
  %278 = mul i64 %249, %277
  %279 = trunc i64 %278 to i32
  %280 = sext i32 %1 to i64
  %281 = or i64 %280, 528742865004859696
  %282 = and i64 528742865004859696, %280
  %283 = xor i64 528742865004859696, %280
  %284 = or i64 %282, %283
  %285 = sext i32 %1 to i64
  %286 = add i64 %285, 6202156824697256793
  %287 = sub i64 0, %285
  %288 = add i64 -6202156824697256793, %287
  %289 = sub i64 0, %288
  %290 = sext i32 %1 to i64
  %291 = add i64 %290, 5977652831727832836
  %292 = add i64 7840434630083962553, %290
  %293 = add i64 %292, -1862781798356129717
  %294 = xor i64 %291, %289
  %295 = xor i64 %294, -8448038935207065639
  %296 = xor i64 %295, %281
  %297 = xor i64 %296, %293
  %298 = xor i64 %297, %286
  %299 = xor i64 %298, %284
  %300 = sext i32 %0 to i64
  %301 = add i64 %300, 598409255573200894
  %302 = and i64 598409255573200894, %300
  %303 = or i64 598409255573200894, %300
  %304 = add i64 %302, %303
  %305 = sext i32 %1 to i64
  %306 = and i64 %305, -8147793083083653948
  %307 = xor i64 %305, -1
  %308 = xor i64 -8147793083083653948, %307
  %309 = and i64 %308, -8147793083083653948
  %310 = sext i32 %1 to i64
  %311 = or i64 %310, 7872222439248881458
  %312 = xor i64 %310, -1
  %313 = and i64 7872222439248881458, %312
  %314 = add i64 %313, %310
  %315 = xor i64 %301, %314
  %316 = xor i64 %315, %309
  %317 = xor i64 %316, %306
  %318 = xor i64 %317, %304
  %319 = xor i64 %318, %311
  %320 = xor i64 %319, 0
  %321 = mul i64 %299, %320
  %322 = trunc i64 %321 to i1
  %323 = sext i32 %0 to i64
  %324 = add i64 %323, -9106612771492593157
  %325 = add i64 7271806163441624358, %323
  %326 = add i64 %325, 2068325138775334101
  %327 = sext i32 %0 to i64
  %328 = and i64 %327, -3311391128519994719
  %329 = xor i64 %327, -1
  %330 = or i64 3311391128519994718, %329
  %331 = xor i64 %330, -1
  %332 = and i64 %331, -1
  %333 = sext i32 %0 to i64
  %334 = and i64 %333, -656192035206644700
  %335 = xor i64 %333, -1
  %336 = or i64 656192035206644699, %335
  %337 = xor i64 %336, -1
  %338 = and i64 %337, -1
  %339 = xor i64 %338, %326
  %340 = xor i64 %339, %332
  %341 = xor i64 %340, %334
  %342 = xor i64 %341, %328
  %343 = xor i64 %342, 7128422982711135093
  %344 = xor i64 %343, %324
  %345 = sext i32 %1 to i64
  %346 = or i64 %345, 7731750237425054299
  %347 = xor i64 %345, -1
  %348 = and i64 7731750237425054299, %347
  %349 = add i64 %348, %345
  %350 = sext i32 %1 to i64
  %351 = add i64 %350, -2223473210591311503
  %352 = and i64 -2223473210591311503, %350
  %353 = or i64 -2223473210591311503, %350
  %354 = add i64 %352, %353
  %355 = sext i32 %0 to i64
  %356 = add i64 %355, -4800320770279847229
  %357 = sub i64 0, %355
  %358 = sub i64 -4800320770279847229, %357
  %359 = xor i64 %358, %351
  %360 = xor i64 %359, %346
  %361 = xor i64 %360, %356
  %362 = xor i64 %361, 0
  %363 = xor i64 %362, %349
  %364 = xor i64 %363, %354
  %365 = mul i64 %344, %364
  %366 = sext i32 %1 to i64
  %367 = or i64 %366, -1207462570672157751
  %368 = xor i64 %366, -1
  %369 = and i64 -1207462570672157751, %368
  %370 = add i64 %369, %366
  %371 = sext i32 %0 to i64
  %372 = and i64 %371, -2862803957346453998
  %373 = or i64 2862803957346453997, %371
  %374 = sub i64 %373, 2862803957346453997
  %375 = sext i32 %1 to i64
  %376 = or i64 %375, 7850515975376703384
  %377 = xor i64 %375, -1
  %378 = and i64 7850515975376703384, %377
  %379 = add i64 %378, %375
  %380 = xor i64 %367, %379
  %381 = xor i64 %380, %374
  %382 = xor i64 %381, -1227878492525726155
  %383 = xor i64 %382, %370
  %384 = xor i64 %383, %372
  %385 = xor i64 %384, %376
  %386 = sext i32 %0 to i64
  %387 = or i64 %386, 6067663110117635671
  %388 = xor i64 %386, -1
  %389 = and i64 6067663110117635671, %388
  %390 = add i64 %389, %386
  %391 = sext i32 %0 to i64
  %392 = and i64 %391, 4035574882427582686
  %393 = or i64 -4035574882427582687, %391
  %394 = sub i64 %393, -4035574882427582687
  %395 = xor i64 0, %387
  %396 = xor i64 %395, %392
  %397 = xor i64 %396, %390
  %398 = xor i64 %397, %394
  %399 = mul i64 %385, %398
  %400 = sext i32 %0 to i64
  %401 = or i64 %400, 4126522117531229798
  %402 = and i64 4126522117531229798, %400
  %403 = xor i64 4126522117531229798, %400
  %404 = or i64 %402, %403
  %405 = sext i32 %0 to i64
  %406 = or i64 %405, 7630954064030043841
  %407 = xor i64 %405, -1
  %408 = and i64 7630954064030043841, %407
  %409 = add i64 %408, %405
  %410 = sext i32 %0 to i64
  %411 = add i64 %410, 5318491046089167973
  %412 = and i64 5318491046089167973, %410
  %413 = or i64 5318491046089167973, %410
  %414 = add i64 %412, %413
  %415 = xor i64 %414, -2926053670303208403
  %416 = xor i64 %415, %411
  %417 = xor i64 %416, %404
  %418 = xor i64 %417, %409
  %419 = xor i64 %418, %401
  %420 = xor i64 %419, %406
  %421 = sext i32 %1 to i64
  %422 = or i64 %421, -2915382824477244346
  %423 = xor i64 %421, -1
  %424 = and i64 %423, 8572289555741241094
  %425 = and i64 %421, -8572289555741241095
  %426 = or i64 %424, %425
  %427 = xor i64 -6810400128080467136, %426
  %428 = xor i64 %421, -1
  %429 = or i64 2915382824477244345, %428
  %430 = xor i64 %429, -1
  %431 = and i64 %430, -1
  %432 = or i64 %427, %431
  %433 = sext i32 %1 to i64
  %434 = and i64 %433, 909717394479209238
  %435 = xor i64 %433, -1
  %436 = xor i64 909717394479209238, %435
  %437 = and i64 %436, 909717394479209238
  %438 = sext i32 %1 to i64
  %439 = or i64 %438, -4514912993278164048
  %440 = xor i64 %438, -1
  %441 = and i64 -4514912993278164048, %440
  %442 = add i64 %441, %438
  %443 = xor i64 %434, 0
  %444 = xor i64 %443, %437
  %445 = xor i64 %444, %442
  %446 = xor i64 %445, %422
  %447 = xor i64 %446, %439
  %448 = xor i64 %447, %432
  %449 = mul i64 %420, %448
  %450 = trunc i64 %449 to i1
  %451 = sext i32 %1 to i64
  %452 = or i64 %451, 7492644690185942779
  %453 = and i64 7492644690185942779, %451
  %454 = xor i64 7492644690185942779, %451
  %455 = or i64 %453, %454
  %456 = sext i32 %0 to i64
  %457 = or i64 %456, -8908247211473385118
  %458 = xor i64 %456, -1
  %459 = and i64 %458, -3077142274033787003
  %460 = and i64 %456, 3077142274033787002
  %461 = or i64 %459, %460
  %462 = xor i64 5842372941041571559, %461
  %463 = xor i64 %456, -1
  %464 = or i64 8908247211473385117, %463
  %465 = xor i64 %464, -1
  %466 = and i64 %465, -1
  %467 = or i64 %462, %466
  %468 = xor i64 %452, %455
  %469 = xor i64 %468, %467
  %470 = xor i64 %469, 5802196394826132767
  %471 = xor i64 %470, %457
  %472 = sext i32 %1 to i64
  %473 = add i64 %472, 7215662918226845693
  %474 = sub i64 0, %472
  %475 = add i64 -7215662918226845693, %474
  %476 = sub i64 0, %475
  %477 = sext i32 %1 to i64
  %478 = add i64 %477, -870441318022805176
  %479 = add i64 2723399895702305543, %477
  %480 = add i64 %479, -3593841213725110719
  %481 = xor i64 %476, %480
  %482 = xor i64 %481, %473
  %483 = xor i64 %482, %478
  %484 = xor i64 %483, 0
  %485 = mul i64 %471, %484
  %486 = trunc i64 %485 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %125, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %184, i1* null, i1 %222, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %279, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %322, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %365, i64 0, i1* null, i1* null, i1* null, i64 %399, i64* null, i1* null, i8* null, float* null, i1* null, i1 %450, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %486, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %487 = load i64, i64* %125, align 8
  %488 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9221784372211060696, i32 0, i64 %487
  store i8** %488, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %489 = load i8*, i8** %.reload, align 8
  indirectbr i8* %489, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %490 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15, %codeRepl), i8** %490, align 8
  %491 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.15, %"2"), i8** %491, align 8
  %492 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.15, %BogusBasciBlock), i8** %492, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %493 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %493, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.15.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %494 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %494, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %495 = add i64 %5, -1110351761631093144
  %496 = xor i64 -1110351761631093144, %5
  %497 = and i64 -1110351761631093144, %5
  %498 = mul i64 2, %497
  %499 = add i64 %496, %498
  %500 = and i64 %9, -1844351427189087471
  %501 = xor i64 %9, -1
  %502 = xor i64 -1844351427189087471, %501
  %503 = and i64 %502, -1844351427189087471
  %504 = xor i64 5399233885016906417, %503
  %505 = xor i64 %504, %500
  %506 = xor i64 %505, %499
  %507 = xor i64 %506, %495
  %508 = or i64 %11, -7907407413974298340
  %509 = and i64 -7907407413974298340, %11
  %510 = xor i64 -7907407413974298340, %11
  %511 = or i64 %509, %510
  %512 = add i64 %11, -5602424845382219486
  %513 = sub i64 0, %11
  %514 = sub i64 -5602424845382219486, %513
  %515 = add i64 %5, -9104586470691511325
  %516 = add i64 -2257315221845137657, %5
  %517 = add i64 %516, -6847271248846373668
  %518 = xor i64 %517, -349115391137947419
  %519 = xor i64 %518, %511
  %520 = xor i64 %519, %512
  %521 = xor i64 %520, %508
  %522 = xor i64 %521, %514
  %523 = xor i64 %522, %515
  %524 = mul i64 %507, %523
  %525 = mul i64 %524, 102
  %526 = or i64 %13, -422270977172552281
  %527 = and i64 -422270977172552281, %13
  %528 = xor i64 -422270977172552281, %13
  %529 = or i64 %527, %528
  %530 = and i64 %3, 6043044636949614176
  %531 = xor i64 %3, -1
  %532 = xor i64 6043044636949614176, %531
  %533 = and i64 %532, 6043044636949614176
  %534 = and i64 %13, 2973586168149437232
  %535 = or i64 -2973586168149437233, %13
  %536 = sub i64 %535, -2973586168149437233
  %537 = xor i64 %530, %534
  %538 = xor i64 %537, %529
  %539 = xor i64 %538, %536
  %540 = xor i64 %539, %526
  %541 = xor i64 %540, %533
  %542 = xor i64 %541, -8888881885153618441
  %543 = add i64 %7, 722128140844354535
  %544 = sub i64 0, %7
  %545 = sub i64 722128140844354535, %544
  %546 = sext i32 %0 to i64
  %547 = add i64 %546, 2516631900262233418
  %548 = and i64 2516631900262233418, %546
  %549 = or i64 2516631900262233418, %546
  %550 = add i64 %548, %549
  %551 = xor i64 %545, 8920382488556213214
  %552 = xor i64 %551, %547
  %553 = xor i64 %552, %543
  %554 = xor i64 %553, %550
  %555 = mul i64 %542, %554
  %556 = add i64 %555, -5257715657346867583
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %557 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %557, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %124, align 8
  %558 = call i8** @lk274587686926290325(i64* %124)
  %559 = load i8*, i8** %558, align 8
  %560 = bitcast i8* %559 to i1 (i32, i32, i1*)*
  %targetBlock = call i1 %560(i32 %0, i32 %1, i1* %.out)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %561 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %562 = load i8*, i8** %561, align 8
  indirectbr i8* %562, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %563 = sext i32 %0 to i64
  %564 = and i64 %563, 3887036017302290062
  %565 = or i64 -3887036017302290063, %563
  %566 = sub i64 %565, -3887036017302290063
  %567 = add i64 %13, -4872334269199125641
  %568 = sub i64 0, %13
  %569 = add i64 4872334269199125641, %568
  %570 = sub i64 0, %569
  %571 = add i64 %487, -1644882866483436665
  %572 = add i64 5262397364721488380, %487
  %573 = add i64 %572, -6907280231204925045
  %574 = xor i64 %564, %570
  %575 = xor i64 %574, %573
  %576 = xor i64 %575, %566
  %577 = xor i64 %576, %567
  %578 = xor i64 %577, 3623653471575312237
  %579 = xor i64 %578, %571
  %580 = add i64 %9, -7614489590234975132
  %581 = xor i64 -7614489590234975132, %9
  %582 = and i64 -7614489590234975132, %9
  %583 = mul i64 2, %582
  %584 = add i64 %581, %583
  %585 = sext i32 %1 to i64
  %586 = add i64 %585, -4397307959137813142
  %587 = sub i64 0, %585
  %588 = sub i64 -4397307959137813142, %587
  %589 = xor i64 %580, %586
  %590 = xor i64 %589, %588
  %591 = xor i64 %590, %584
  %592 = xor i64 %591, 5233354832061700709
  %593 = mul i64 %579, %592
  %594 = trunc i64 %593 to i1
  ret i1 %594

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @main.extracted.16(i8* %0, i8* %1, i8* %2, i8* %3) #6 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h11804894491772278134(i64 595012184)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.16, %.ret.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012265)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.16, %"2"), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012142)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main.extracted.16, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012258)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@main.extracted.16, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.16, %BogusBasciBlock), i8** %13, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %14, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.16, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %15, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.16, %"2"), i8** %.reload5, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %16, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.16, %.ret.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %17 = load i8*, i8** %.reload, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.ret.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %18 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.16, %BogusBasciBlock), i8** %18, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.16, %.ret.exitStub), i8** %19, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %20 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %20, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.ret.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %21 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %21, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.ret.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %22 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %22, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.ret.exitStub]

.ret.exitStub:                                    ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.extracted(i64 %0, i32 %1, i1* %.out2) #6 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012126)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.extracted, %loopEnd), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012169)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.extracted, %BogusBasicBlock), i8** %6, align 8
  %7 = sext i32 %1 to i64
  %8 = and i64 %7, -6775508632837832651
  %9 = or i64 6775508632837832650, %7
  %10 = sub i64 %9, 6775508632837832650
  %11 = add i64 %0, 8867139061173255915
  %12 = add i64 5632200656533054096, %0
  %13 = add i64 %12, 3234938404640201819
  %14 = add i64 %0, -7336839726066287458
  %15 = and i64 -7336839726066287458, %0
  %16 = or i64 -7336839726066287458, %0
  %17 = add i64 %15, %16
  %18 = xor i64 %13, %8
  %19 = xor i64 %18, %11
  %20 = xor i64 %19, %14
  %21 = xor i64 %20, %17
  %22 = xor i64 %21, %10
  %23 = xor i64 %22, 2207854695785150191
  %24 = sext i32 %1 to i64
  %25 = add i64 %24, -1969207345922402127
  %26 = and i64 -1969207345922402127, %24
  %27 = or i64 -1969207345922402127, %24
  %28 = add i64 %26, %27
  %29 = sext i32 %1 to i64
  %30 = and i64 %29, 6454150720698658384
  %31 = or i64 -6454150720698658385, %29
  %32 = sub i64 %31, -6454150720698658385
  %33 = xor i64 %30, 4883580876036702761
  %34 = xor i64 %33, %25
  %35 = xor i64 %34, %32
  %36 = xor i64 %35, %28
  %37 = mul i64 %23, %36
  %38 = call i64 @h11804894491772278134(i64 %37)
  %39 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %38
  store i8* blockaddress(@main.extracted.extracted, %.exitStub.exitStub), i8** %39, align 8
  %40 = call i64 @h11804894491772278134(i64 595012171)
  %41 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %40
  store i8* blockaddress(@main.extracted.extracted, %365), i8** %41, align 8
  %42 = call i64 @h11804894491772278134(i64 595012267)
  %43 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %42
  store i8* blockaddress(@main.extracted.extracted, %defaultSwitchBasicBlock), i8** %43, align 8
  %44 = call i64 @h11804894491772278134(i64 595012279)
  %45 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %44
  store i8* blockaddress(@main.extracted.extracted, %.exitStub3.exitStub), i8** %45, align 8
  %46 = call i64 @h11804894491772278134(i64 595012187)
  %47 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %46
  store i8* blockaddress(@main.extracted.extracted, %EntryBasicBlockSplit), i8** %47, align 8
  %48 = call i64 @h11804894491772278134(i64 595012237)
  %49 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %48
  store i8* blockaddress(@main.extracted.extracted, %loopStart), i8** %49, align 8
  %lookupTable = alloca [9 x i32], align 4
  %50 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %51 = sext i32 %1 to i64
  %52 = or i64 %51, 4563855618644797843
  %53 = xor i64 %51, -1
  %54 = and i64 4563855618644797843, %53
  %55 = add i64 %54, %51
  %56 = sext i32 %1 to i64
  %57 = or i64 %56, 3834997480099038733
  %58 = and i64 3834997480099038733, %56
  %59 = xor i64 3834997480099038733, %56
  %60 = or i64 %58, %59
  %61 = add i64 %0, 4864810387404386304
  %62 = sub i64 0, %0
  %63 = add i64 -4864810387404386304, %62
  %64 = sub i64 0, %63
  %65 = xor i64 %64, %55
  %66 = xor i64 %65, 7055313899099492271
  %67 = xor i64 %66, %57
  %68 = xor i64 %67, %52
  %69 = xor i64 %68, %61
  %70 = xor i64 %69, %60
  %71 = or i64 %0, -6794409296163950690
  %72 = xor i64 %0, -1
  %73 = and i64 -6794409296163950690, %72
  %74 = add i64 %73, %0
  %75 = or i64 %0, 39018314522475089
  %76 = and i64 39018314522475089, %0
  %77 = xor i64 39018314522475089, %0
  %78 = or i64 %76, %77
  %79 = sext i32 %1 to i64
  %80 = and i64 %79, 1773855917901364829
  %81 = xor i64 %79, -1
  %82 = xor i64 1773855917901364829, %81
  %83 = and i64 %82, 1773855917901364829
  %84 = xor i64 %78, 1842188637916662291
  %85 = xor i64 %84, %80
  %86 = xor i64 %85, %74
  %87 = xor i64 %86, %83
  %88 = xor i64 %87, %75
  %89 = xor i64 %88, %71
  %90 = mul i64 %70, %89
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %50, align 4
  %92 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  %93 = sext i32 %1 to i64
  %94 = and i64 %93, 2110513680458660428
  %95 = or i64 -2110513680458660429, %93
  %96 = sub i64 %95, -2110513680458660429
  %97 = sext i32 %1 to i64
  %98 = and i64 %97, -582555694576610966
  %99 = xor i64 %97, -1
  %100 = or i64 582555694576610965, %99
  %101 = xor i64 %100, -1
  %102 = and i64 %101, -1
  %103 = sext i32 %1 to i64
  %104 = or i64 %103, 2333132492628386084
  %105 = xor i64 %103, -1
  %106 = and i64 2333132492628386084, %105
  %107 = add i64 %106, %103
  %108 = xor i64 -6807423601966601959, %96
  %109 = xor i64 %108, %94
  %110 = xor i64 %109, %102
  %111 = xor i64 %110, %98
  %112 = xor i64 %111, %107
  %113 = xor i64 %112, %104
  %114 = sext i32 %1 to i64
  %115 = and i64 %114, 7145431245519741666
  %116 = xor i64 %114, -1
  %117 = or i64 -7145431245519741667, %116
  %118 = xor i64 %117, -1
  %119 = and i64 %118, -1
  %120 = or i64 %0, 8613709972668625621
  %121 = xor i64 %0, -1
  %122 = and i64 8613709972668625621, %121
  %123 = add i64 %122, %0
  %124 = sext i32 %1 to i64
  %125 = and i64 %124, -3832776069744846637
  %126 = or i64 3832776069744846636, %124
  %127 = sub i64 %126, 3832776069744846636
  %128 = xor i64 %115, %120
  %129 = xor i64 %128, %119
  %130 = xor i64 %129, %123
  %131 = xor i64 %130, %125
  %132 = xor i64 %131, %127
  %133 = xor i64 %132, -6117900394273130066
  %134 = mul i64 %113, %133
  %135 = trunc i64 %134 to i32
  store i32 %135, i32* %92, align 4
  %136 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %136, align 4
  %137 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %137, align 4
  %138 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %138, align 4
  %139 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %139, align 4
  %140 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %140, align 4
  %141 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %141, align 4
  %142 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %142, align 4
  %143 = sext i32 %1 to i64
  %144 = and i64 %143, -4267176396853233832
  %145 = xor i64 %143, -1
  %146 = or i64 4267176396853233831, %145
  %147 = xor i64 %146, -1
  %148 = and i64 %147, -1
  %149 = sext i32 %1 to i64
  %150 = and i64 %149, 6363665782241402979
  %151 = or i64 -6363665782241402980, %149
  %152 = sub i64 %151, -6363665782241402980
  %153 = or i64 %0, -2366568010277909268
  %154 = xor i64 %0, -1
  %155 = and i64 %154, -1353081002664638182
  %156 = and i64 %0, 1353081002664638181
  %157 = or i64 %155, %156
  %158 = xor i64 3607560399421785590, %157
  %159 = xor i64 %0, -1
  %160 = or i64 2366568010277909267, %159
  %161 = xor i64 %160, -1
  %162 = and i64 %161, -1
  %163 = or i64 %158, %162
  %164 = xor i64 %163, %150
  %165 = xor i64 %164, %152
  %166 = xor i64 %165, %153
  %167 = xor i64 %166, 8570653943591032485
  %168 = xor i64 %167, %148
  %169 = xor i64 %168, %144
  %170 = or i64 %0, 7867330961841061511
  %171 = and i64 7867330961841061511, %0
  %172 = xor i64 7867330961841061511, %0
  %173 = or i64 %171, %172
  %174 = sext i32 %1 to i64
  %175 = add i64 %174, 7311133006787903645
  %176 = xor i64 7311133006787903645, %174
  %177 = and i64 7311133006787903645, %174
  %178 = mul i64 2, %177
  %179 = add i64 %176, %178
  %180 = add i64 %0, 2239810951254300358
  %181 = sub i64 0, %0
  %182 = add i64 -2239810951254300358, %181
  %183 = sub i64 0, %182
  %184 = xor i64 %180, %173
  %185 = xor i64 %184, %170
  %186 = xor i64 %185, 2467071098717774125
  %187 = xor i64 %186, %175
  %188 = xor i64 %187, %183
  %189 = xor i64 %188, %179
  %190 = mul i64 %169, %189
  %191 = trunc i64 %190 to i32
  %dispatcher = alloca i32, i32 %191, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012237, i32* %2, align 4
  %192 = call i8** @bf777061424148142830(i32* %2)
  %193 = load i8*, i8** %192, align 8
  indirectbr i8* %193, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %365
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub3.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %194 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %197 = load i32, i32* %196, align 4
  %198 = add i32 %195, -142872469
  %199 = sub i32 %198, %197
  %200 = sub i32 %199, -142872469
  store i32 %200, i32* %dispatcher, align 4
  %201 = load i8*, i8** %4, align 8
  %202 = load i8, i8* %201, align 1
  %203 = mul i8 %202, 2
  %204 = add i64 %48, -4988058049218172949
  %205 = and i64 -4988058049218172949, %48
  %206 = or i64 -4988058049218172949, %48
  %207 = add i64 %205, %206
  %208 = and i64 %40, 5751152272877186459
  %209 = or i64 -5751152272877186460, %40
  %210 = sub i64 %209, -5751152272877186460
  %211 = add i64 %46, -1159489603669538446
  %212 = and i64 -1159489603669538446, %46
  %213 = or i64 -1159489603669538446, %46
  %214 = add i64 %212, %213
  %215 = xor i64 %204, -1050302016952308145
  %216 = xor i64 %215, %207
  %217 = xor i64 %216, %208
  %218 = xor i64 %217, %211
  %219 = xor i64 %218, %210
  %220 = xor i64 %219, %214
  %221 = and i64 %0, -109394681698460197
  %222 = or i64 109394681698460196, %0
  %223 = sub i64 %222, 109394681698460196
  %224 = add i64 %5, 253949059960121162
  %225 = add i64 2170409189122971717, %5
  %226 = add i64 %225, -1916460129162850555
  %227 = xor i64 4878119529597358430, %221
  %228 = xor i64 %227, %223
  %229 = xor i64 %228, %224
  %230 = xor i64 %229, %226
  %231 = mul i64 %220, %230
  %232 = trunc i64 %231 to i8
  %233 = mul i8 %202, %232
  %234 = add i64 %0, -317559364453248136
  %235 = sub i64 0, %0
  %236 = add i64 317559364453248136, %235
  %237 = sub i64 0, %236
  %238 = add i64 %48, -6907982360533363485
  %239 = add i64 -6107263292897187708, %48
  %240 = sub i64 %239, 800719067636175777
  %241 = and i64 %42, 1217437830700862931
  %242 = or i64 -1217437830700862932, %42
  %243 = sub i64 %242, -1217437830700862932
  %244 = xor i64 %240, %243
  %245 = xor i64 %244, 1763769003386022799
  %246 = xor i64 %245, %234
  %247 = xor i64 %246, %241
  %248 = xor i64 %247, %238
  %249 = xor i64 %248, %237
  %250 = add i64 %42, -4211610396549378305
  %251 = sub i64 0, %42
  %252 = sub i64 -4211610396549378305, %251
  %253 = add i64 %42, 5521159193266985855
  %254 = add i64 3438649012524056186, %42
  %255 = add i64 %254, 2082510180742929669
  %256 = sext i32 %dispatcher1 to i64
  %257 = or i64 %256, 849842419770011819
  %258 = and i64 849842419770011819, %256
  %259 = xor i64 849842419770011819, %256
  %260 = or i64 %258, %259
  %261 = xor i64 -5888278937047980322, %253
  %262 = xor i64 %261, %250
  %263 = xor i64 %262, %255
  %264 = xor i64 %263, %257
  %265 = xor i64 %264, %252
  %266 = xor i64 %265, %260
  %267 = mul i64 %249, %266
  %268 = trunc i64 %267 to i8
  %269 = add i8 %268, %233
  %270 = mul i8 %203, %269
  %271 = srem i8 %270, 4
  %272 = and i64 %46, -8351317622373200151
  %273 = xor i64 %46, -1
  %274 = xor i64 -8351317622373200151, %273
  %275 = and i64 %274, -8351317622373200151
  %276 = add i64 %40, -1125581860554898991
  %277 = and i64 -1125581860554898991, %40
  %278 = or i64 -1125581860554898991, %40
  %279 = add i64 %277, %278
  %280 = xor i64 2827733529637878881, %276
  %281 = xor i64 %280, %279
  %282 = xor i64 %281, %272
  %283 = xor i64 %282, %275
  %284 = sext i32 %1 to i64
  %285 = or i64 %284, 4384161058530591076
  %286 = xor i64 %284, -1
  %287 = and i64 %286, -3174157130075422875
  %288 = and i64 %284, 3174157130075422874
  %289 = or i64 %287, %288
  %290 = xor i64 -1214692439449289215, %289
  %291 = xor i64 %284, -1
  %292 = or i64 -4384161058530591077, %291
  %293 = xor i64 %292, -1
  %294 = and i64 %293, -1
  %295 = or i64 %290, %294
  %296 = add i64 %44, -1707984338327593350
  %297 = sub i64 0, %44
  %298 = sub i64 -1707984338327593350, %297
  %299 = add i64 %5, -7134568758664969868
  %300 = add i64 -4811460439603828675, %5
  %301 = sub i64 %300, 2323108319061141193
  %302 = xor i64 0, %295
  %303 = xor i64 %302, %285
  %304 = xor i64 %303, %299
  %305 = xor i64 %304, %296
  %306 = xor i64 %305, %301
  %307 = xor i64 %306, %298
  %308 = mul i64 %283, %307
  %309 = trunc i64 %308 to i8
  %310 = icmp eq i8 %271, %309
  %311 = mul i8 %202, %202
  %312 = add i8 %311, %202
  %313 = srem i8 %312, 2
  %314 = or i64 %40, 8014063228596377024
  %315 = xor i64 %40, -1
  %316 = and i64 %315, 6370640560046269700
  %317 = and i64 %40, -6370640560046269701
  %318 = or i64 %316, %317
  %319 = xor i64 3989806493124866244, %318
  %320 = xor i64 %40, -1
  %321 = or i64 -8014063228596377025, %320
  %322 = xor i64 %321, -1
  %323 = and i64 %322, -1
  %324 = or i64 %319, %323
  %325 = and i64 %5, 6486161490507745140
  %326 = or i64 -6486161490507745141, %5
  %327 = sub i64 %326, -6486161490507745141
  %328 = or i64 %3, -7717625400514887295
  %329 = xor i64 %3, -1
  %330 = and i64 -7717625400514887295, %329
  %331 = add i64 %330, %3
  %332 = xor i64 8789210444518860059, %331
  %333 = xor i64 %332, %325
  %334 = xor i64 %333, %324
  %335 = xor i64 %334, %314
  %336 = xor i64 %335, %328
  %337 = xor i64 %336, %327
  %338 = and i64 %5, 938407934332708560
  %339 = or i64 -938407934332708561, %5
  %340 = sub i64 %339, -938407934332708561
  %341 = sext i32 %1 to i64
  %342 = add i64 %341, -5811898392825832703
  %343 = xor i64 -5811898392825832703, %341
  %344 = and i64 -5811898392825832703, %341
  %345 = mul i64 2, %344
  %346 = add i64 %343, %345
  %347 = or i64 %0, -1265881409614937559
  %348 = and i64 -1265881409614937559, %0
  %349 = xor i64 -1265881409614937559, %0
  %350 = or i64 %348, %349
  %351 = xor i64 %350, %347
  %352 = xor i64 %351, %346
  %353 = xor i64 %352, 0
  %354 = xor i64 %353, %342
  %355 = xor i64 %354, %338
  %356 = xor i64 %355, %340
  %357 = mul i64 %337, %356
  %358 = trunc i64 %357 to i8
  %359 = icmp eq i8 %313, %358
  %360 = or i1 %310, %359
  %361 = select i1 %360, i32 595012171, i32 595012126
  %362 = xor i32 %361, 85
  store i32 %362, i32* %2, align 4
  %363 = call i8** @bf777061424148142830(i32* %2)
  %364 = load i8*, i8** %363, align 8
  indirectbr i8* %364, [label %loopEnd, label %EntryBasicBlockSplit]

365:                                              ; preds = %365, %loopStart
  %366 = add i64 3, -7
  %367 = sub i64 69, 125
  %368 = srem i64 %0, 2
  %369 = icmp eq i64 %368, 0
  %370 = add i64 %40, 8928306213948553995
  %371 = and i64 8928306213948553995, %40
  %372 = or i64 8928306213948553995, %40
  %373 = add i64 %371, %372
  %374 = or i64 %3, 5263431041034131937
  %375 = and i64 5263431041034131937, %3
  %376 = xor i64 5263431041034131937, %3
  %377 = or i64 %375, %376
  %378 = or i64 %48, 2411516400007850153
  %379 = and i64 2411516400007850153, %48
  %380 = xor i64 2411516400007850153, %48
  %381 = or i64 %379, %380
  %382 = xor i64 %378, %374
  %383 = xor i64 %382, %370
  %384 = xor i64 %383, -5647874311818749517
  %385 = xor i64 %384, %373
  %386 = xor i64 %385, %381
  %387 = xor i64 %386, %377
  %388 = and i64 %5, 5605602305947027907
  %389 = xor i64 %5, -1
  %390 = or i64 -5605602305947027908, %389
  %391 = xor i64 %390, -1
  %392 = and i64 %391, -1
  %393 = add i64 %44, 1109676834154531561
  %394 = xor i64 1109676834154531561, %44
  %395 = and i64 1109676834154531561, %44
  %396 = mul i64 2, %395
  %397 = add i64 %394, %396
  %398 = xor i64 -2409081634247542026, %388
  %399 = xor i64 %398, %393
  %400 = xor i64 %399, %397
  %401 = xor i64 %400, %392
  %402 = mul i64 %387, %401
  %403 = trunc i64 %402 to i32
  %404 = mul i32 %1, %403
  %405 = mul i32 %1, 2
  %406 = sub i32 0, %405
  %407 = sub i32 2, %406
  %408 = mul i32 %404, %407
  %409 = srem i32 %408, 4
  %410 = icmp eq i32 %409, 0
  %411 = mul i32 %1, %1
  %412 = mul i32 %411, %1
  %413 = add i32 %412, 5430144
  %414 = add i32 %413, %1
  %415 = sub i32 %414, 5430144
  %416 = srem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = xor i1 %410, true
  %419 = xor i1 %417, true
  %420 = or i1 %418, %419
  %421 = xor i1 %420, true
  %422 = and i1 %421, true
  store i1 %422, i1* %.out2, align 1
  %423 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %424 = load i32, i32* %423, align 4
  %425 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %426 = load i32, i32* %425, align 4
  %427 = add i32 %424, %426
  %428 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %429 = load i32, i32* %428, align 4
  %430 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %431 = load i32, i32* %430, align 4
  %432 = srem i32 %429, %431
  %433 = select i1 %422, i32 %427, i32 %432
  store i32 %433, i32* %dispatcher, align 4
  %434 = load i8*, i8** %4, align 8
  %435 = load i8, i8* %434, align 1
  %436 = mul i8 %435, %435
  %437 = sub i8 %436, 22
  %438 = add i8 %437, %435
  %439 = add i8 %438, 22
  %440 = mul i8 %439, 3
  %441 = srem i8 %440, 2
  %442 = icmp eq i8 %441, 0
  %443 = mul i8 %435, %435
  %444 = and i8 %443, %435
  %445 = or i8 %443, %435
  %446 = add i8 %444, %445
  %447 = srem i8 %446, 2
  %448 = icmp eq i8 %447, 0
  %449 = and i1 %442, %448
  %450 = select i1 %449, i32 595012187, i32 595012126
  %451 = xor i32 %450, 69
  store i32 %451, i32* %2, align 4
  %452 = call i8** @bf777061424148142830(i32* %2)
  %453 = load i8*, i8** %452, align 8
  indirectbr i8* %453, [label %loopEnd, label %365]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub3.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %454 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %455 = sext i32 %1 to i64
  %456 = and i64 %455, -8858328393902321075
  %457 = xor i64 %455, -1
  %458 = or i64 8858328393902321074, %457
  %459 = xor i64 %458, -1
  %460 = and i64 %459, -1
  %461 = or i64 %46, -1104680186590011203
  %462 = xor i64 %46, -1
  %463 = and i64 -1104680186590011203, %462
  %464 = add i64 %463, %46
  %465 = xor i64 -4764500421373857587, %464
  %466 = xor i64 %465, %456
  %467 = xor i64 %466, %461
  %468 = xor i64 %467, %460
  %469 = add i64 %48, -434422725766792162
  %470 = and i64 -434422725766792162, %48
  %471 = or i64 -434422725766792162, %48
  %472 = add i64 %470, %471
  %473 = add i64 %40, 6395647194471691859
  %474 = sub i64 0, %40
  %475 = add i64 -6395647194471691859, %474
  %476 = sub i64 0, %475
  %477 = or i64 %40, -2659572735075012698
  %478 = xor i64 %40, -1
  %479 = and i64 %478, -3389962026591670168
  %480 = and i64 %40, 3389962026591670167
  %481 = or i64 %479, %480
  %482 = xor i64 856567727664046030, %481
  %483 = xor i64 %40, -1
  %484 = or i64 2659572735075012697, %483
  %485 = xor i64 %484, -1
  %486 = and i64 %485, -1
  %487 = or i64 %482, %486
  %488 = xor i64 %487, %473
  %489 = xor i64 %488, %472
  %490 = xor i64 %489, %476
  %491 = xor i64 %490, -496641296077782021
  %492 = xor i64 %491, %469
  %493 = xor i64 %492, %477
  %494 = mul i64 %468, %493
  %495 = trunc i64 %494 to i32
  store i32 %495, i32* %454, align 4
  %496 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %496, align 4
  %497 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %497, align 4
  %498 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %499 = or i64 %3, 2732549596385114944
  %500 = and i64 2732549596385114944, %3
  %501 = xor i64 2732549596385114944, %3
  %502 = or i64 %500, %501
  %503 = sext i32 %dispatcher1 to i64
  %504 = add i64 %503, 2027862523193128999
  %505 = sub i64 0, %503
  %506 = add i64 -2027862523193128999, %505
  %507 = sub i64 0, %506
  %508 = sext i32 %1 to i64
  %509 = or i64 %508, -7850450156796845360
  %510 = xor i64 %508, -1
  %511 = and i64 %510, 6703053627081378170
  %512 = and i64 %508, -6703053627081378171
  %513 = or i64 %511, %512
  %514 = xor i64 -3599608725844612182, %513
  %515 = xor i64 %508, -1
  %516 = or i64 7850450156796845359, %515
  %517 = xor i64 %516, -1
  %518 = and i64 %517, -1
  %519 = or i64 %514, %518
  %520 = xor i64 %502, %504
  %521 = xor i64 %520, %519
  %522 = xor i64 %521, %509
  %523 = xor i64 %522, %507
  %524 = xor i64 %523, %499
  %525 = xor i64 %524, -3414840847449504535
  %526 = and i64 %5, 2901752184098682407
  %527 = or i64 -2901752184098682408, %5
  %528 = sub i64 %527, -2901752184098682408
  %529 = or i64 %5, 6208579309766241094
  %530 = xor i64 %5, -1
  %531 = and i64 %530, 2279984389000397474
  %532 = and i64 %5, -2279984389000397475
  %533 = or i64 %531, %532
  %534 = xor i64 5300011376095980004, %533
  %535 = xor i64 %5, -1
  %536 = or i64 -6208579309766241095, %535
  %537 = xor i64 %536, -1
  %538 = and i64 %537, -1
  %539 = or i64 %534, %538
  %540 = or i64 %3, 2338004167463158946
  %541 = xor i64 %3, -1
  %542 = and i64 2338004167463158946, %541
  %543 = add i64 %542, %3
  %544 = xor i64 %526, %543
  %545 = xor i64 %544, %529
  %546 = xor i64 %545, -5023000542620868419
  %547 = xor i64 %546, %540
  %548 = xor i64 %547, %539
  %549 = xor i64 %548, %528
  %550 = mul i64 %525, %549
  %551 = trunc i64 %550 to i32
  store i32 %551, i32* %498, align 4
  %552 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %552, align 4
  %553 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %554 = load i32, i32* %553, align 4
  store i32 %554, i32* %dispatcher, align 4
  %555 = load i8*, i8** %47, align 8
  %556 = load i8, i8* %555, align 1
  %557 = mul i8 %556, %556
  %558 = add i8 %557, -37
  %559 = add i8 %558, %556
  %560 = sub i8 %559, -37
  %561 = mul i8 %560, 3
  %562 = srem i8 %561, 2
  %563 = sext i32 %dispatcher1 to i64
  %564 = or i64 %563, -8017102516863297440
  %565 = xor i64 %563, -1
  %566 = and i64 %565, 7691192362822931458
  %567 = and i64 %563, -7691192362822931459
  %568 = or i64 %566, %567
  %569 = xor i64 -432032166650901406, %568
  %570 = xor i64 %563, -1
  %571 = or i64 8017102516863297439, %570
  %572 = xor i64 %571, -1
  %573 = and i64 %572, -1
  %574 = or i64 %569, %573
  %575 = or i64 %0, -2947174717964712716
  %576 = xor i64 %0, -1
  %577 = and i64 %576, 1119086068526837248
  %578 = and i64 %0, -1119086068526837249
  %579 = or i64 %577, %578
  %580 = xor i64 -2837757130208777484, %579
  %581 = xor i64 %0, -1
  %582 = or i64 2947174717964712715, %581
  %583 = xor i64 %582, -1
  %584 = and i64 %583, -1
  %585 = or i64 %580, %584
  %586 = sext i32 %dispatcher1 to i64
  %587 = or i64 %586, 1342343529745327371
  %588 = and i64 1342343529745327371, %586
  %589 = xor i64 1342343529745327371, %586
  %590 = or i64 %588, %589
  %591 = xor i64 %585, %575
  %592 = xor i64 %591, %564
  %593 = xor i64 %592, %574
  %594 = xor i64 %593, %587
  %595 = xor i64 %594, %590
  %596 = xor i64 %595, 4745876683897717633
  %597 = or i64 %44, -7562332563902174148
  %598 = xor i64 %44, -1
  %599 = and i64 %598, -2523863521665075030
  %600 = and i64 %44, 2523863521665075029
  %601 = or i64 %599, %600
  %602 = xor i64 5473102691174175894, %601
  %603 = xor i64 %44, -1
  %604 = or i64 7562332563902174147, %603
  %605 = xor i64 %604, -1
  %606 = and i64 %605, -1
  %607 = or i64 %602, %606
  %608 = add i64 %38, -8103937242556131898
  %609 = xor i64 -8103937242556131898, %38
  %610 = and i64 -8103937242556131898, %38
  %611 = mul i64 2, %610
  %612 = add i64 %609, %611
  %613 = add i64 %46, -3463881521165539497
  %614 = sub i64 0, %46
  %615 = sub i64 -3463881521165539497, %614
  %616 = xor i64 %613, %615
  %617 = xor i64 %616, %612
  %618 = xor i64 %617, %597
  %619 = xor i64 %618, %607
  %620 = xor i64 %619, %608
  %621 = xor i64 %620, 0
  %622 = mul i64 %596, %621
  %623 = trunc i64 %622 to i8
  %624 = icmp eq i8 %562, %623
  %625 = mul i8 %556, %556
  %626 = xor i8 %625, %556
  %627 = and i8 %625, %556
  %628 = and i64 %40, 4268980691117481369
  %629 = or i64 -4268980691117481370, %40
  %630 = sub i64 %629, -4268980691117481370
  %631 = sext i32 %dispatcher1 to i64
  %632 = or i64 %631, -1343200360621487661
  %633 = and i64 -1343200360621487661, %631
  %634 = xor i64 -1343200360621487661, %631
  %635 = or i64 %633, %634
  %636 = xor i64 %632, %635
  %637 = xor i64 %636, 4831014598680659087
  %638 = xor i64 %637, %630
  %639 = xor i64 %638, %628
  %640 = and i64 %38, 8206065978295384990
  %641 = or i64 -8206065978295384991, %38
  %642 = sub i64 %641, -8206065978295384991
  %643 = add i64 %5, 1691261367225557402
  %644 = add i64 606673743196712817, %5
  %645 = add i64 %644, 1084587624028844585
  %646 = and i64 %42, 6280493792406449403
  %647 = or i64 -6280493792406449404, %42
  %648 = sub i64 %647, -6280493792406449404
  %649 = xor i64 %642, %646
  %650 = xor i64 %649, %645
  %651 = xor i64 %650, %640
  %652 = xor i64 %651, %648
  %653 = xor i64 %652, %643
  %654 = xor i64 %653, 161282221813314782
  %655 = mul i64 %639, %654
  %656 = trunc i64 %655 to i8
  %657 = mul i8 %656, %627
  %658 = add i8 %626, %657
  %659 = and i64 %42, -6570782148301447886
  %660 = xor i64 %42, -1
  %661 = or i64 6570782148301447885, %660
  %662 = xor i64 %661, -1
  %663 = and i64 %662, -1
  %664 = or i64 %40, -3330666493125671145
  %665 = xor i64 %40, -1
  %666 = and i64 -3330666493125671145, %665
  %667 = add i64 %666, %40
  %668 = add i64 %40, -3974597951898302687
  %669 = and i64 -3974597951898302687, %40
  %670 = or i64 -3974597951898302687, %40
  %671 = add i64 %669, %670
  %672 = xor i64 %664, -2269138764475910715
  %673 = xor i64 %672, %671
  %674 = xor i64 %673, %659
  %675 = xor i64 %674, %663
  %676 = xor i64 %675, %667
  %677 = xor i64 %676, %668
  %678 = or i64 %46, -2322154856656913591
  %679 = xor i64 %46, -1
  %680 = and i64 -2322154856656913591, %679
  %681 = add i64 %680, %46
  %682 = add i64 %42, 4861405619067187616
  %683 = add i64 -772523526399348991, %42
  %684 = sub i64 %683, -5633929145466536607
  %685 = and i64 %46, 2569668476954771699
  %686 = xor i64 %46, -1
  %687 = xor i64 2569668476954771699, %686
  %688 = and i64 %687, 2569668476954771699
  %689 = xor i64 %678, -767530908848576261
  %690 = xor i64 %689, %685
  %691 = xor i64 %690, %684
  %692 = xor i64 %691, %681
  %693 = xor i64 %692, %688
  %694 = xor i64 %693, %682
  %695 = mul i64 %677, %694
  %696 = trunc i64 %695 to i8
  %697 = mul i8 %696, %658
  %698 = add i8 23, %697
  %699 = mul i8 -105, %698
  %700 = add i8 111, %699
  %701 = add i64 %42, -5582518578399025761
  %702 = add i64 -6208289450604875302, %42
  %703 = sub i64 %702, -625770872205849541
  %704 = and i64 %40, 1261583835289961818
  %705 = xor i64 %40, -1
  %706 = or i64 -1261583835289961819, %705
  %707 = xor i64 %706, -1
  %708 = and i64 %707, -1
  %709 = and i64 %46, -4907327048355753354
  %710 = xor i64 %46, -1
  %711 = or i64 4907327048355753353, %710
  %712 = xor i64 %711, -1
  %713 = and i64 %712, -1
  %714 = xor i64 %708, -258425570431719257
  %715 = xor i64 %714, %703
  %716 = xor i64 %715, %701
  %717 = xor i64 %716, %713
  %718 = xor i64 %717, %704
  %719 = xor i64 %718, %709
  %720 = or i64 %44, 2761652656338449561
  %721 = xor i64 %44, -1
  %722 = and i64 %721, -7525017090990909255
  %723 = and i64 %44, 7525017090990909254
  %724 = or i64 %722, %723
  %725 = xor i64 -5637775941751051232, %724
  %726 = xor i64 %44, -1
  %727 = or i64 -2761652656338449562, %726
  %728 = xor i64 %727, -1
  %729 = and i64 %728, -1
  %730 = or i64 %725, %729
  %731 = add i64 %0, 752138178742415919
  %732 = xor i64 752138178742415919, %0
  %733 = and i64 752138178742415919, %0
  %734 = mul i64 2, %733
  %735 = add i64 %732, %734
  %736 = sext i32 %1 to i64
  %737 = or i64 %736, -5529826529297183098
  %738 = xor i64 %736, -1
  %739 = and i64 -5529826529297183098, %738
  %740 = add i64 %739, %736
  %741 = xor i64 %740, %737
  %742 = xor i64 %741, %730
  %743 = xor i64 %742, -4607896836004250066
  %744 = xor i64 %743, %720
  %745 = xor i64 %744, %735
  %746 = xor i64 %745, %731
  %747 = mul i64 %719, %746
  %748 = trunc i64 %747 to i8
  %749 = srem i8 %700, %748
  %750 = icmp eq i8 %749, 0
  %751 = and i1 %624, %750
  %752 = select i1 %751, i32 595012267, i32 595012187
  %753 = xor i32 %752, 240
  store i32 %753, i32* %2, align 4
  %754 = call i8** @bf777061424148142830(i32* %2)
  %755 = load i8*, i8** %754, align 8
  indirectbr i8* %755, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %756 = load i8*, i8** %45, align 8
  %757 = load i8, i8* %756, align 1
  %758 = mul i8 %757, %757
  %759 = add i8 %758, %757
  %760 = mul i8 %759, 3
  %761 = srem i8 %760, 2
  %762 = icmp eq i8 %761, 0
  %763 = mul i8 %757, %757
  %764 = xor i8 %763, %757
  %765 = and i8 %763, %757
  %766 = mul i8 2, %765
  %767 = add i8 %764, %766
  %768 = mul i8 39, %767
  %769 = add i64 %0, -468332501042442999
  %770 = sub i64 0, %0
  %771 = sub i64 -468332501042442999, %770
  %772 = or i64 %42, -4072958638779629135
  %773 = and i64 -4072958638779629135, %42
  %774 = xor i64 -4072958638779629135, %42
  %775 = or i64 %773, %774
  %776 = xor i64 %771, %769
  %777 = xor i64 %776, 3978773138766396915
  %778 = xor i64 %777, %775
  %779 = xor i64 %778, %772
  %780 = or i64 %3, 1935772940983082770
  %781 = and i64 1935772940983082770, %3
  %782 = xor i64 1935772940983082770, %3
  %783 = or i64 %781, %782
  %784 = and i64 %42, -7326715980406855340
  %785 = or i64 7326715980406855339, %42
  %786 = sub i64 %785, 7326715980406855339
  %787 = xor i64 %786, %784
  %788 = xor i64 %787, %780
  %789 = xor i64 %788, 2542081215937636941
  %790 = xor i64 %789, %783
  %791 = mul i64 %779, %790
  %792 = trunc i64 %791 to i8
  %793 = add i8 %792, %768
  %794 = and i64 %48, 8045039883019101261
  %795 = xor i64 %48, -1
  %796 = xor i64 8045039883019101261, %795
  %797 = and i64 %796, 8045039883019101261
  %798 = sext i32 %dispatcher1 to i64
  %799 = add i64 %798, 2604260806898883512
  %800 = sub i64 0, %798
  %801 = add i64 -2604260806898883512, %800
  %802 = sub i64 0, %801
  %803 = sext i32 %1 to i64
  %804 = add i64 %803, 5337030207097785484
  %805 = add i64 -8855171399091541830, %803
  %806 = sub i64 %805, 4254542467520224302
  %807 = xor i64 %799, %802
  %808 = xor i64 %807, %794
  %809 = xor i64 %808, %806
  %810 = xor i64 %809, -3819369926650269881
  %811 = xor i64 %810, %804
  %812 = xor i64 %811, %797
  %813 = add i64 %3, -5442625573863099073
  %814 = add i64 -1642242787730632131, %3
  %815 = add i64 %814, -3800382786132466942
  %816 = sext i32 %dispatcher1 to i64
  %817 = add i64 %816, -1703664073329007699
  %818 = and i64 -1703664073329007699, %816
  %819 = or i64 -1703664073329007699, %816
  %820 = add i64 %818, %819
  %821 = add i64 %5, -7802308012229951546
  %822 = xor i64 -7802308012229951546, %5
  %823 = and i64 -7802308012229951546, %5
  %824 = mul i64 2, %823
  %825 = add i64 %822, %824
  %826 = xor i64 %817, -870359112649757647
  %827 = xor i64 %826, %815
  %828 = xor i64 %827, %820
  %829 = xor i64 %828, %825
  %830 = xor i64 %829, %821
  %831 = xor i64 %830, %813
  %832 = mul i64 %812, %831
  %833 = trunc i64 %832 to i8
  %834 = mul i8 %833, %793
  %835 = add i8 111, %834
  %836 = srem i8 %835, 2
  %837 = icmp eq i8 %836, 0
  %838 = xor i1 %762, true
  %839 = or i1 %838, %837
  %840 = xor i1 %762, true
  %841 = sub i1 %839, %840
  %842 = select i1 %841, i32 595012187, i32 595012126
  %843 = xor i32 %842, 69
  store i32 %843, i32* %2, align 4
  %844 = call i8** @bf777061424148142830(i32* %2)
  %845 = load i8*, i8** %844, align 8
  indirectbr i8* %845, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %365, %EntryBasicBlockSplit
  %846 = load i8*, i8** %6, align 8
  %847 = load i8, i8* %846, align 1
  %848 = xor i8 %847, -1
  %849 = add i64 %44, -4596868077707652196
  %850 = sub i64 0, %44
  %851 = sub i64 -4596868077707652196, %850
  %852 = sext i32 %dispatcher1 to i64
  %853 = and i64 %852, -3876320626753707084
  %854 = or i64 3876320626753707083, %852
  %855 = sub i64 %854, 3876320626753707083
  %856 = xor i64 %851, 6779526719114622549
  %857 = xor i64 %856, %849
  %858 = xor i64 %857, %855
  %859 = xor i64 %858, %853
  %860 = or i64 %48, -9138238068345297717
  %861 = and i64 -9138238068345297717, %48
  %862 = xor i64 -9138238068345297717, %48
  %863 = or i64 %861, %862
  %864 = or i64 %3, 8595206479642371266
  %865 = xor i64 %3, -1
  %866 = and i64 8595206479642371266, %865
  %867 = add i64 %866, %3
  %868 = and i64 %40, -5610614188977365414
  %869 = or i64 5610614188977365413, %40
  %870 = sub i64 %869, 5610614188977365413
  %871 = xor i64 %860, %867
  %872 = xor i64 %871, 6480067851041806077
  %873 = xor i64 %872, %870
  %874 = xor i64 %873, %864
  %875 = xor i64 %874, %868
  %876 = xor i64 %875, %863
  %877 = mul i64 %859, %876
  %878 = trunc i64 %877 to i8
  %879 = or i8 %848, %878
  %880 = xor i8 %847, -1
  %881 = sub i8 %879, %880
  %882 = icmp eq i8 %881, 1
  %883 = mul i8 %847, %847
  %884 = add i8 %883, 92
  %885 = add i8 %884, %847
  %886 = sub i8 %885, 92
  %887 = srem i8 %886, 2
  %888 = or i64 %0, -8035216776390061972
  %889 = xor i64 %0, -1
  %890 = and i64 -8035216776390061972, %889
  %891 = add i64 %890, %0
  %892 = and i64 %42, -8142727198732974948
  %893 = xor i64 %42, -1
  %894 = or i64 8142727198732974947, %893
  %895 = xor i64 %894, -1
  %896 = and i64 %895, -1
  %897 = xor i64 %896, %891
  %898 = xor i64 %897, %892
  %899 = xor i64 %898, -1575501366123510683
  %900 = xor i64 %899, %888
  %901 = add i64 %3, -8966481223547967270
  %902 = xor i64 -8966481223547967270, %3
  %903 = and i64 -8966481223547967270, %3
  %904 = mul i64 2, %903
  %905 = add i64 %902, %904
  %906 = or i64 %3, 8709618912605719488
  %907 = xor i64 %3, -1
  %908 = and i64 %907, -3424691132506256104
  %909 = and i64 %3, 3424691132506256103
  %910 = or i64 %908, %909
  %911 = xor i64 -6293844464944576808, %910
  %912 = xor i64 %3, -1
  %913 = or i64 -8709618912605719489, %912
  %914 = xor i64 %913, -1
  %915 = and i64 %914, -1
  %916 = or i64 %911, %915
  %917 = xor i64 %906, %905
  %918 = xor i64 %917, %916
  %919 = xor i64 %918, %901
  %920 = xor i64 %919, 0
  %921 = mul i64 %900, %920
  %922 = trunc i64 %921 to i8
  %923 = icmp eq i8 %887, %922
  %924 = or i1 %882, %923
  %925 = select i1 %924, i32 595012267, i32 595012237
  %926 = xor i32 %925, -1
  %927 = and i32 %926, 38
  %928 = and i32 %925, -39
  %929 = or i32 %927, %928
  store i32 %929, i32* %2, align 4
  %930 = call i8** @bf777061424148142830(i32* %2)
  %931 = load i8*, i8** %930, align 8
  indirectbr i8* %931, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.13.extracted(i64* %.out1, i64* %.out2, i1 %0) #6 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012190)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@main.extracted.13.extracted, %BogusBasicBlock), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012170)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@main.extracted.13.extracted, %loopEnd), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012171)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@main.extracted.13.extracted, %.exitStub3.exitStub), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012109)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@main.extracted.13.extracted, %.exitStub.exitStub), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012165)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@main.extracted.13.extracted, %83), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012256)
  %13 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %12
  store i8* blockaddress(@main.extracted.13.extracted, %defaultSwitchBasicBlock), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012155)
  %15 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %14
  store i8* blockaddress(@main.extracted.13.extracted, %EntryBasicBlockSplit), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012131)
  %17 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %16
  store i8* blockaddress(@main.extracted.13.extracted, %loopStart), i8** %17, align 8
  %lookupTable = alloca [9 x i32], align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %25, align 4
  %26 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %26, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012131, i32* %1, align 4
  %27 = call i8** @bf777061424148142830(i32* %1)
  %28 = load i8*, i8** %27, align 8
  indirectbr i8* %28, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %83
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub3.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %30, %32
  store i32 %33, i32* %dispatcher, align 4
  %34 = load i8*, i8** %17, align 8
  %35 = load i8, i8* %34, align 1
  %36 = xor i8 %35, -2
  %37 = and i8 %36, %35
  %38 = icmp eq i8 %37, 1
  %39 = mul i8 %35, %35
  %40 = add i8 %39, %35
  %41 = srem i8 %40, 2
  %42 = icmp eq i8 %41, 0
  %43 = or i1 %38, %42
  %44 = select i1 %43, i32 595012190, i32 595012170
  %45 = or i64 %12, 5427931130214394993
  %46 = and i64 5427931130214394993, %12
  %47 = xor i64 5427931130214394993, %12
  %48 = or i64 %46, %47
  %49 = sext i32 %dispatcher1 to i64
  %50 = and i64 %49, -3528025423575289535
  %51 = xor i64 %49, -1
  %52 = xor i64 -3528025423575289535, %51
  %53 = and i64 %52, -3528025423575289535
  %54 = xor i64 %53, 5549161854163488699
  %55 = xor i64 %54, %48
  %56 = xor i64 %55, %50
  %57 = xor i64 %56, %45
  %58 = or i64 %14, -7563529122993062661
  %59 = xor i64 %14, -1
  %60 = and i64 %59, 118520082624571293
  %61 = and i64 %14, -118520082624571294
  %62 = or i64 %60, %61
  %63 = xor i64 -7589159972219692186, %62
  %64 = xor i64 %14, -1
  %65 = or i64 7563529122993062660, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = or i64 %63, %67
  %69 = and i64 %4, -5331688043854800743
  %70 = xor i64 %4, -1
  %71 = or i64 5331688043854800742, %70
  %72 = xor i64 %71, -1
  %73 = and i64 %72, -1
  %74 = xor i64 %58, -2378149510904853252
  %75 = xor i64 %74, %68
  %76 = xor i64 %75, %69
  %77 = xor i64 %76, %73
  %78 = mul i64 %57, %77
  %79 = trunc i64 %78 to i32
  %80 = xor i32 %44, %79
  store i32 %80, i32* %1, align 4
  %81 = call i8** @bf777061424148142830(i32* %1)
  %82 = load i8*, i8** %81, align 8
  indirectbr i8* %82, [label %loopEnd, label %EntryBasicBlockSplit]

83:                                               ; preds = %83, %loopStart
  %84 = sub i64 37, 68
  store i64 %84, i64* %.out1, align 8
  %85 = and i64 %10, 7917564529291992925
  %86 = xor i64 %10, -1
  %87 = xor i64 7917564529291992925, %86
  %88 = and i64 %87, 7917564529291992925
  %89 = sext i32 %dispatcher1 to i64
  %90 = and i64 %89, -4802639793308502395
  %91 = or i64 4802639793308502394, %89
  %92 = sub i64 %91, 4802639793308502394
  %93 = and i64 %12, 2917896908164072447
  %94 = xor i64 %12, -1
  %95 = xor i64 2917896908164072447, %94
  %96 = and i64 %95, 2917896908164072447
  %97 = xor i64 -7938596835990690561, %96
  %98 = xor i64 %97, %92
  %99 = xor i64 %98, %88
  %100 = xor i64 %99, %85
  %101 = xor i64 %100, %90
  %102 = xor i64 %101, %93
  %103 = add i64 %10, -5142646650954537666
  %104 = sub i64 0, %10
  %105 = add i64 5142646650954537666, %104
  %106 = sub i64 0, %105
  %107 = sext i32 %dispatcher1 to i64
  %108 = add i64 %107, 9129698879735374099
  %109 = sub i64 0, %107
  %110 = sub i64 9129698879735374099, %109
  %111 = and i64 %2, -8027681143314797102
  %112 = xor i64 %2, -1
  %113 = xor i64 -8027681143314797102, %112
  %114 = and i64 %113, -8027681143314797102
  %115 = xor i64 %114, %106
  %116 = xor i64 %115, %111
  %117 = xor i64 %116, %110
  %118 = xor i64 %117, -5269872529254920996
  %119 = xor i64 %118, %108
  %120 = xor i64 %119, %103
  %121 = mul i64 %102, %120
  %122 = sub i64 0, %121
  store i64 %122, i64* %.out2, align 8
  %123 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %126 = load i32, i32* %125, align 4
  %127 = sub i32 %124, %126
  %128 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %131 = load i32, i32* %130, align 4
  %132 = add i32 %129, -184726395
  %133 = sub i32 %132, %131
  %134 = sub i32 %133, -184726395
  %135 = select i1 %0, i32 %127, i32 %134
  store i32 %135, i32* %dispatcher, align 4
  %136 = load i8*, i8** %9, align 8
  %137 = load i8, i8* %136, align 1
  %138 = mul i8 %137, 2
  %139 = mul i8 %137, 2
  %140 = add i8 2, %139
  %141 = mul i8 %138, %140
  %142 = srem i8 %141, 4
  %143 = icmp eq i8 %142, 0
  %144 = mul i8 %137, %137
  %145 = mul i8 %144, %137
  %146 = add i8 %145, %137
  %147 = srem i8 %146, 2
  %148 = icmp eq i8 %147, 0
  %149 = xor i1 %143, true
  %150 = or i1 %149, %148
  %151 = xor i1 %143, true
  %152 = sub i1 %150, %151
  %153 = select i1 %152, i32 595012165, i32 595012170
  %154 = add i64 %4, 1591150933374594029
  %155 = xor i64 1591150933374594029, %4
  %156 = and i64 1591150933374594029, %4
  %157 = mul i64 2, %156
  %158 = add i64 %155, %157
  %159 = or i64 %6, -8689126861175431531
  %160 = xor i64 %6, -1
  %161 = and i64 %160, 6054155362671640060
  %162 = and i64 %6, -6054155362671640061
  %163 = or i64 %161, %162
  %164 = xor i64 -3211441391540051095, %163
  %165 = xor i64 %6, -1
  %166 = or i64 8689126861175431530, %165
  %167 = xor i64 %166, -1
  %168 = and i64 %167, -1
  %169 = or i64 %164, %168
  %170 = xor i64 1618425378636030101, %154
  %171 = xor i64 %170, %169
  %172 = xor i64 %171, %158
  %173 = xor i64 %172, %159
  %174 = or i64 %2, 3651854263661519593
  %175 = xor i64 %2, -1
  %176 = and i64 %175, -7910779773968834799
  %177 = and i64 %2, 7910779773968834798
  %178 = or i64 %176, %177
  %179 = xor i64 -6873973318400836104, %178
  %180 = xor i64 %2, -1
  %181 = or i64 -3651854263661519594, %180
  %182 = xor i64 %181, -1
  %183 = and i64 %182, -1
  %184 = or i64 %179, %183
  %185 = or i64 %10, -1997608481957571250
  %186 = xor i64 %10, -1
  %187 = and i64 -1997608481957571250, %186
  %188 = add i64 %187, %10
  %189 = xor i64 -7688821810205146007, %174
  %190 = xor i64 %189, %184
  %191 = xor i64 %190, %188
  %192 = xor i64 %191, %185
  %193 = mul i64 %173, %192
  %194 = trunc i64 %193 to i32
  %195 = xor i32 %153, %194
  %196 = xor i32 %195, -131550958
  store i32 %196, i32* %1, align 4
  %197 = call i8** @bf777061424148142830(i32* %1)
  %198 = load i8*, i8** %197, align 8
  indirectbr i8* %198, [label %loopEnd, label %83]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub3.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %199 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %199, align 4
  %200 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %201 = add i64 %8, -5748623633890834511
  %202 = and i64 -5748623633890834511, %8
  %203 = or i64 -5748623633890834511, %8
  %204 = add i64 %202, %203
  %205 = or i64 %6, 7094661385015553864
  %206 = and i64 7094661385015553864, %6
  %207 = xor i64 7094661385015553864, %6
  %208 = or i64 %206, %207
  %209 = or i64 %6, 2597949261184369559
  %210 = and i64 2597949261184369559, %6
  %211 = xor i64 2597949261184369559, %6
  %212 = or i64 %210, %211
  %213 = xor i64 %212, %201
  %214 = xor i64 %213, -8639641759393775133
  %215 = xor i64 %214, %205
  %216 = xor i64 %215, %208
  %217 = xor i64 %216, %209
  %218 = xor i64 %217, %204
  %219 = or i64 %4, -5081358276811661249
  %220 = xor i64 %4, -1
  %221 = and i64 %220, -6680739084721216138
  %222 = and i64 %4, 6680739084721216137
  %223 = or i64 %221, %222
  %224 = xor i64 1887673049310414153, %223
  %225 = xor i64 %4, -1
  %226 = or i64 5081358276811661248, %225
  %227 = xor i64 %226, -1
  %228 = and i64 %227, -1
  %229 = or i64 %224, %228
  %230 = and i64 %12, -1956850802257947415
  %231 = xor i64 %12, -1
  %232 = xor i64 -1956850802257947415, %231
  %233 = and i64 %232, -1956850802257947415
  %234 = xor i64 %229, -4899160880395629621
  %235 = xor i64 %234, %233
  %236 = xor i64 %235, %230
  %237 = xor i64 %236, %219
  %238 = mul i64 %218, %237
  %239 = trunc i64 %238 to i32
  store i32 %239, i32* %200, align 4
  %240 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %240, align 4
  %241 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %241, align 4
  %242 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %242, align 4
  %243 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %244 = load i32, i32* %243, align 4
  store i32 %244, i32* %dispatcher, align 4
  %245 = load i8*, i8** %15, align 8
  %246 = load i8, i8* %245, align 1
  %247 = mul i8 %246, 2
  %248 = mul i8 %246, 2
  %249 = xor i8 2, %248
  %250 = and i8 2, %248
  %251 = mul i8 2, %250
  %252 = add i8 %249, %251
  %253 = mul i8 %247, %252
  %254 = srem i8 %253, 4
  %255 = icmp eq i8 %254, 0
  %256 = mul i8 %246, %246
  %257 = add i8 %256, %246
  %258 = srem i8 %257, 2
  %259 = icmp eq i8 %258, 0
  %260 = or i1 %255, %259
  %261 = select i1 %260, i32 595012165, i32 595012155
  %262 = xor i32 %261, 126
  store i32 %262, i32* %1, align 4
  %263 = call i8** @bf777061424148142830(i32* %1)
  %264 = load i8*, i8** %263, align 8
  indirectbr i8* %264, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %265 = load i8*, i8** %13, align 8
  %266 = load i8, i8* %265, align 1
  %267 = or i64 %10, -5133049567236715745
  %268 = xor i64 %10, -1
  %269 = and i64 %268, 8076191882211207563
  %270 = and i64 %10, -8076191882211207564
  %271 = or i64 %269, %270
  %272 = xor i64 -3974467183710985580, %271
  %273 = xor i64 %10, -1
  %274 = or i64 5133049567236715744, %273
  %275 = xor i64 %274, -1
  %276 = and i64 %275, -1
  %277 = or i64 %272, %276
  %278 = add i64 %2, -4966878150779790459
  %279 = add i64 5550129889604063299, %2
  %280 = add i64 %279, 7929736033325697858
  %281 = and i64 %16, -747592925661266196
  %282 = or i64 747592925661266195, %16
  %283 = sub i64 %282, 747592925661266195
  %284 = xor i64 -8539121576867883723, %277
  %285 = xor i64 %284, %267
  %286 = xor i64 %285, %280
  %287 = xor i64 %286, %281
  %288 = xor i64 %287, %283
  %289 = xor i64 %288, %278
  %290 = sext i32 %dispatcher1 to i64
  %291 = and i64 %290, 3279276313520871929
  %292 = or i64 -3279276313520871930, %290
  %293 = sub i64 %292, -3279276313520871930
  %294 = and i64 %2, 7383451652231053733
  %295 = xor i64 %2, -1
  %296 = xor i64 7383451652231053733, %295
  %297 = and i64 %296, 7383451652231053733
  %298 = and i64 %6, -765831968039180148
  %299 = or i64 765831968039180147, %6
  %300 = sub i64 %299, 765831968039180147
  %301 = xor i64 %298, %291
  %302 = xor i64 %301, %294
  %303 = xor i64 %302, %297
  %304 = xor i64 %303, %300
  %305 = xor i64 %304, 7837176560696273466
  %306 = xor i64 %305, %293
  %307 = mul i64 %289, %306
  %308 = trunc i64 %307 to i8
  %309 = mul i8 %266, %308
  %310 = mul i8 %266, 2
  %311 = add i8 2, %310
  %312 = mul i8 %309, %311
  %313 = srem i8 %312, 4
  %314 = icmp eq i8 %313, 0
  %315 = mul i8 %266, %266
  %316 = mul i8 %315, %266
  %317 = add i8 %316, %266
  %318 = srem i8 %317, 2
  %319 = icmp eq i8 %318, 0
  %320 = and i1 %314, %319
  %321 = select i1 %320, i32 595012190, i32 595012170
  %322 = xor i32 %321, -1
  %323 = and i32 %322, 796466509
  %324 = and i32 %321, -796466510
  %325 = or i32 %323, %324
  %326 = xor i32 %325, 796466521
  store i32 %326, i32* %1, align 4
  %327 = call i8** @bf777061424148142830(i32* %1)
  %328 = load i8*, i8** %327, align 8
  indirectbr i8* %328, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %83, %EntryBasicBlockSplit
  %329 = load i8*, i8** %9, align 8
  %330 = load i8, i8* %329, align 1
  %331 = xor i8 %330, -2
  %332 = and i8 %331, %330
  %333 = icmp eq i8 %332, 1
  %334 = mul i8 %330, %330
  %335 = add i8 %334, %330
  %336 = srem i8 %335, 2
  %337 = sext i32 %dispatcher1 to i64
  %338 = or i64 %337, 4522398032229109890
  %339 = xor i64 %337, -1
  %340 = and i64 %339, -1009465297570907762
  %341 = and i64 %337, 1009465297570907761
  %342 = or i64 %340, %341
  %343 = xor i64 -3512981819961988852, %342
  %344 = xor i64 %337, -1
  %345 = or i64 -4522398032229109891, %344
  %346 = xor i64 %345, -1
  %347 = and i64 %346, -1
  %348 = or i64 %343, %347
  %349 = add i64 %12, 5285784116218396782
  %350 = xor i64 5285784116218396782, %12
  %351 = and i64 5285784116218396782, %12
  %352 = mul i64 2, %351
  %353 = add i64 %350, %352
  %354 = xor i64 %338, %348
  %355 = xor i64 %354, %349
  %356 = xor i64 %355, -5458000493579269701
  %357 = xor i64 %356, %353
  %358 = add i64 %6, -455195830040382329
  %359 = and i64 -455195830040382329, %6
  %360 = or i64 -455195830040382329, %6
  %361 = add i64 %359, %360
  %362 = and i64 %4, -3839909319871538719
  %363 = xor i64 %4, -1
  %364 = xor i64 -3839909319871538719, %363
  %365 = and i64 %364, -3839909319871538719
  %366 = add i64 %4, -5609048573959925699
  %367 = add i64 5283933911959860556, %4
  %368 = add i64 %367, 7553761587789765361
  %369 = xor i64 %358, %361
  %370 = xor i64 %369, %366
  %371 = xor i64 %370, %368
  %372 = xor i64 %371, %362
  %373 = xor i64 %372, %365
  %374 = xor i64 %373, 0
  %375 = mul i64 %357, %374
  %376 = trunc i64 %375 to i8
  %377 = icmp eq i8 %336, %376
  %378 = or i1 %333, %377
  %379 = select i1 %378, i32 595012170, i32 595012131
  %380 = or i64 %12, -3469070321789883540
  %381 = and i64 -3469070321789883540, %12
  %382 = xor i64 -3469070321789883540, %12
  %383 = or i64 %381, %382
  %384 = add i64 %6, 5807784588650572648
  %385 = sub i64 0, %6
  %386 = sub i64 5807784588650572648, %385
  %387 = xor i64 %384, %383
  %388 = xor i64 %387, %380
  %389 = xor i64 %388, %386
  %390 = xor i64 %389, -3708321315492852575
  %391 = and i64 %14, -127102305351184514
  %392 = or i64 127102305351184513, %14
  %393 = sub i64 %392, 127102305351184513
  %394 = add i64 %14, 9208076114452724080
  %395 = and i64 9208076114452724080, %14
  %396 = or i64 9208076114452724080, %14
  %397 = add i64 %395, %396
  %398 = and i64 %4, 4854658901362597846
  %399 = xor i64 %4, -1
  %400 = xor i64 4854658901362597846, %399
  %401 = and i64 %400, 4854658901362597846
  %402 = xor i64 1612622700031661769, %391
  %403 = xor i64 %402, %401
  %404 = xor i64 %403, %394
  %405 = xor i64 %404, %393
  %406 = xor i64 %405, %397
  %407 = xor i64 %406, %398
  %408 = mul i64 %390, %407
  %409 = trunc i64 %408 to i32
  %410 = or i32 %379, %409
  %411 = and i32 %379, 105
  %412 = sub i32 %410, %411
  store i32 %412, i32* %1, align 4
  %413 = call i8** @bf777061424148142830(i32* %1)
  %414 = load i8*, i8** %413, align 8
  indirectbr i8* %414, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i1 @main.extracted.15.extracted(i32 %0, i32 %1, i1* %.out) #6 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012132)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub1.exitStub), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012108)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012201)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main.extracted.15.extracted, %"2"), i8** %8, align 8
  %9 = sext i32 %1 to i64
  %10 = and i64 %9, 3093322410242605045
  %11 = or i64 -3093322410242605046, %9
  %12 = sub i64 %11, -3093322410242605046
  %13 = sext i32 %0 to i64
  %14 = and i64 %13, -505815100486552608
  %15 = or i64 505815100486552607, %13
  %16 = sub i64 %15, 505815100486552607
  %17 = sext i32 %0 to i64
  %18 = and i64 %17, -914473702007168279
  %19 = or i64 914473702007168278, %17
  %20 = sub i64 %19, 914473702007168278
  %21 = xor i64 %12, %20
  %22 = xor i64 %21, %10
  %23 = xor i64 %22, %18
  %24 = xor i64 %23, %14
  %25 = xor i64 %24, 2465026538818865441
  %26 = xor i64 %25, %16
  %27 = sext i32 %0 to i64
  %28 = add i64 %27, -1616519043523356444
  %29 = xor i64 -1616519043523356444, %27
  %30 = and i64 -1616519043523356444, %27
  %31 = mul i64 2, %30
  %32 = add i64 %29, %31
  %33 = sext i32 %0 to i64
  %34 = or i64 %33, 3615109001547354856
  %35 = xor i64 %33, -1
  %36 = and i64 3615109001547354856, %35
  %37 = add i64 %36, %33
  %38 = xor i64 %34, %32
  %39 = xor i64 %38, %37
  %40 = xor i64 %39, %28
  %41 = xor i64 %40, 3030915645867965368
  %42 = mul i64 %26, %41
  %43 = call i64 @h11804894491772278134(i64 %42)
  %44 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %43
  store i8* blockaddress(@main.extracted.15.extracted, %EntryBasicBlockSplit), i8** %44, align 8
  %45 = sext i32 %1 to i64
  %46 = and i64 %45, 1398624135848245701
  %47 = xor i64 %45, -1
  %48 = xor i64 1398624135848245701, %47
  %49 = and i64 %48, 1398624135848245701
  %50 = sext i32 %0 to i64
  %51 = add i64 %50, 5242734743687518918
  %52 = sub i64 0, %50
  %53 = sub i64 5242734743687518918, %52
  %54 = sext i32 %0 to i64
  %55 = and i64 %54, 7448702247656964031
  %56 = or i64 -7448702247656964032, %54
  %57 = sub i64 %56, -7448702247656964032
  %58 = xor i64 %57, %53
  %59 = xor i64 %58, %46
  %60 = xor i64 %59, %49
  %61 = xor i64 %60, %51
  %62 = xor i64 %61, 7966927938794445589
  %63 = xor i64 %62, %55
  %64 = sext i32 %0 to i64
  %65 = or i64 %64, 6076078364164256816
  %66 = xor i64 %64, -1
  %67 = and i64 6076078364164256816, %66
  %68 = add i64 %67, %64
  %69 = sext i32 %0 to i64
  %70 = or i64 %69, -4382686943838026393
  %71 = xor i64 %69, -1
  %72 = and i64 -4382686943838026393, %71
  %73 = add i64 %72, %69
  %74 = sext i32 %1 to i64
  %75 = and i64 %74, 756507610680035583
  %76 = xor i64 %74, -1
  %77 = or i64 -756507610680035584, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = xor i64 %68, %70
  %81 = xor i64 %80, %75
  %82 = xor i64 %81, 1728072292384211983
  %83 = xor i64 %82, %79
  %84 = xor i64 %83, %73
  %85 = xor i64 %84, %65
  %86 = mul i64 %63, %85
  %87 = call i64 @h11804894491772278134(i64 %86)
  %88 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %87
  store i8* blockaddress(@main.extracted.15.extracted, %BogusBasciBlock), i8** %88, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %89 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15.extracted, %BogusBasciBlock), i8** %89, align 8
  %90 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %90, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %91 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %91, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %"2"), i8** %.reload5, align 8
  %92 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %92, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %93 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %93, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub1.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %94 = load i8*, i8** %.reload, align 8
  indirectbr i8* %94, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %95 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main.extracted.15.extracted, %EntryBasicBlockSplit), i8** %95, align 8
  %96 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main.extracted.15.extracted, %.exitStub.exitStub), i8** %96, align 8
  %97 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main.extracted.15.extracted, %"2"), i8** %97, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %98 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %98, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %99 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %99, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %100 = srem i32 %0, 2
  %101 = icmp eq i32 %100, 0
  %102 = sext i32 %1 to i64
  %103 = or i64 %102, -5487978752702731718
  %104 = xor i64 %102, -1
  %105 = and i64 -5487978752702731718, %104
  %106 = add i64 %105, %102
  %107 = sext i32 %0 to i64
  %108 = or i64 %107, -5272218503771880793
  %109 = and i64 -5272218503771880793, %107
  %110 = xor i64 -5272218503771880793, %107
  %111 = or i64 %109, %110
  %112 = xor i64 %106, 5969681018694625137
  %113 = xor i64 %112, %111
  %114 = xor i64 %113, %103
  %115 = xor i64 %114, %108
  %116 = sext i32 %0 to i64
  %117 = and i64 %116, -6491774026788762909
  %118 = xor i64 %116, -1
  %119 = or i64 6491774026788762908, %118
  %120 = xor i64 %119, -1
  %121 = and i64 %120, -1
  %122 = sext i32 %1 to i64
  %123 = and i64 %122, -4425220369180969619
  %124 = xor i64 %122, -1
  %125 = or i64 4425220369180969618, %124
  %126 = xor i64 %125, -1
  %127 = and i64 %126, -1
  %128 = xor i64 %123, %127
  %129 = xor i64 %128, %117
  %130 = xor i64 %129, %121
  %131 = xor i64 %130, 8073910012134880034
  %132 = mul i64 %115, %131
  %133 = trunc i64 %132 to i32
  %134 = mul i32 %1, %133
  %135 = mul i32 %1, 2
  %136 = add i32 2, %135
  %137 = mul i32 %134, %136
  %138 = srem i32 %137, 4
  %139 = icmp eq i32 %138, 0
  %140 = mul i32 %1, %1
  %141 = add i32 %140, %1
  %142 = srem i32 %141, 2
  %143 = add i64 %43, -131103779213754488
  %144 = and i64 -131103779213754488, %43
  %145 = or i64 -131103779213754488, %43
  %146 = add i64 %144, %145
  %147 = or i64 %87, -769140800201483719
  %148 = xor i64 %87, -1
  %149 = and i64 -769140800201483719, %148
  %150 = add i64 %149, %87
  %151 = sext i32 %0 to i64
  %152 = add i64 %151, -4858016429004458751
  %153 = sub i64 0, %151
  %154 = add i64 4858016429004458751, %153
  %155 = sub i64 0, %154
  %156 = xor i64 %143, %150
  %157 = xor i64 %156, -4454211785141293215
  %158 = xor i64 %157, %146
  %159 = xor i64 %158, %147
  %160 = xor i64 %159, %152
  %161 = xor i64 %160, %155
  %162 = sext i32 %0 to i64
  %163 = or i64 %162, -2653396592630123165
  %164 = and i64 -2653396592630123165, %162
  %165 = xor i64 -2653396592630123165, %162
  %166 = or i64 %164, %165
  %167 = and i64 %3, -1695435052315271884
  %168 = or i64 1695435052315271883, %3
  %169 = sub i64 %168, 1695435052315271883
  %170 = and i64 %5, 7532941908216339276
  %171 = or i64 -7532941908216339277, %5
  %172 = sub i64 %171, -7532941908216339277
  %173 = xor i64 %170, %169
  %174 = xor i64 %173, %167
  %175 = xor i64 %174, 0
  %176 = xor i64 %175, %172
  %177 = xor i64 %176, %166
  %178 = xor i64 %177, %163
  %179 = mul i64 %161, %178
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %142, %180
  %182 = xor i1 %139, true
  %183 = and i1 %182, true
  %184 = and i1 %139, false
  %185 = or i1 %183, %184
  %186 = xor i1 %181, true
  %187 = and i1 %186, true
  %188 = and i1 %181, false
  %189 = or i1 %187, %188
  %190 = xor i1 %185, %189
  %191 = or i64 %7, 4975662603655600574
  %192 = and i64 4975662603655600574, %7
  %193 = xor i64 4975662603655600574, %7
  %194 = or i64 %192, %193
  %195 = and i64 %5, 8510272610366068819
  %196 = xor i64 %5, -1
  %197 = xor i64 8510272610366068819, %196
  %198 = and i64 %197, 8510272610366068819
  %199 = xor i64 %191, -3656103983676845933
  %200 = xor i64 %199, %194
  %201 = xor i64 %200, %198
  %202 = xor i64 %201, %195
  %203 = or i64 %43, 4495673932241372160
  %204 = xor i64 %43, -1
  %205 = and i64 4495673932241372160, %204
  %206 = add i64 %205, %43
  %207 = add i64 %7, -2042475310111890945
  %208 = xor i64 -2042475310111890945, %7
  %209 = and i64 -2042475310111890945, %7
  %210 = mul i64 2, %209
  %211 = add i64 %208, %210
  %212 = sext i32 %1 to i64
  %213 = or i64 %212, -6764201684881510701
  %214 = xor i64 %212, -1
  %215 = and i64 %214, 770111966097636628
  %216 = and i64 %212, -770111966097636629
  %217 = or i64 %215, %216
  %218 = xor i64 -6300739669939252281, %217
  %219 = xor i64 %212, -1
  %220 = or i64 6764201684881510700, %219
  %221 = xor i64 %220, -1
  %222 = and i64 %221, -1
  %223 = or i64 %218, %222
  %224 = xor i64 %203, -3395667609995014757
  %225 = xor i64 %224, %211
  %226 = xor i64 %225, %207
  %227 = xor i64 %226, %213
  %228 = xor i64 %227, %223
  %229 = xor i64 %228, %206
  %230 = mul i64 %202, %229
  %231 = trunc i64 %230 to i1
  %232 = xor i1 %139, %231
  %233 = xor i1 %181, true
  %234 = or i1 %232, %233
  %235 = xor i1 %234, true
  %236 = and i1 %235, true
  %237 = or i1 %190, %236
  store i1 %237, i1* %.out, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %238 = select i1 %237, i8** %.reload7, i8** %.reload10
  %239 = load i8*, i8** %238, align 8
  indirectbr i8* %239, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted(i32 %0, i32 %1, i1* %.out) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012100)
  %4 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted, %"2"), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012098)
  %6 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted, %.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012102)
  %8 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted, %codeRepl), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012101)
  %10 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012096)
  %12 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted, %.exitStub1), i8** %12, align 8
  %13 = sext i32 %0 to i64
  %14 = add i64 %13, 7136655058478831453
  %15 = add i64 8004352999939916877, %13
  %16 = add i64 %15, -867697941461085424
  %17 = sext i32 %0 to i64
  %18 = and i64 %17, 1127555882023588282
  %19 = xor i64 %17, -1
  %20 = xor i64 1127555882023588282, %19
  %21 = and i64 %20, 1127555882023588282
  %22 = sext i32 %0 to i64
  %23 = add i64 %22, 1348877651264646894
  %24 = sub i64 0, %22
  %25 = add i64 -1348877651264646894, %24
  %26 = sub i64 0, %25
  %27 = xor i64 %14, %26
  %28 = xor i64 %27, %23
  %29 = xor i64 %28, %18
  %30 = xor i64 %29, -2268896590715438353
  %31 = xor i64 %30, %21
  %32 = xor i64 %31, %16
  %33 = sext i32 %1 to i64
  %34 = add i64 %33, 5239568171850894617
  %35 = sub i64 0, %33
  %36 = sub i64 5239568171850894617, %35
  %37 = sext i32 %1 to i64
  %38 = add i64 %37, -2754256433954714095
  %39 = and i64 -2754256433954714095, %37
  %40 = or i64 -2754256433954714095, %37
  %41 = add i64 %39, %40
  %42 = xor i64 %34, %38
  %43 = xor i64 %42, 6906284268177691181
  %44 = xor i64 %43, %36
  %45 = xor i64 %44, %41
  %46 = mul i64 %32, %45
  %47 = call i64 @h11804894491772278134(i64 %46)
  %48 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %47
  store i8* blockaddress(@main_loop.extracted, %BogusBasciBlock), i8** %48, align 8
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %49 = sext i32 %0 to i64
  %50 = or i64 %49, 887744597805526013
  %51 = xor i64 %49, -1
  %52 = and i64 887744597805526013, %51
  %53 = add i64 %52, %49
  %54 = sext i32 %1 to i64
  %55 = and i64 %54, -8377907218729373003
  %56 = xor i64 %54, -1
  %57 = or i64 8377907218729373002, %56
  %58 = xor i64 %57, -1
  %59 = and i64 %58, -1
  %60 = xor i64 %59, %55
  %61 = xor i64 %60, %50
  %62 = xor i64 %61, -4719726161535337027
  %63 = xor i64 %62, %53
  %64 = sext i32 %0 to i64
  %65 = add i64 %64, 4292620562020363065
  %66 = xor i64 4292620562020363065, %64
  %67 = and i64 4292620562020363065, %64
  %68 = mul i64 2, %67
  %69 = add i64 %66, %68
  %70 = sext i32 %1 to i64
  %71 = and i64 %70, -4100927157625728196
  %72 = xor i64 %70, -1
  %73 = or i64 4100927157625728195, %72
  %74 = xor i64 %73, -1
  %75 = and i64 %74, -1
  %76 = xor i64 %75, %71
  %77 = xor i64 %76, %69
  %78 = xor i64 %77, -1587312152856517227
  %79 = xor i64 %78, %65
  %80 = mul i64 %63, %79
  %81 = trunc i64 %80 to i32
  %.reg2mem6 = alloca i8**, i32 %81, align 8
  %.reg2mem3 = alloca i8**, align 8
  %82 = sext i32 %1 to i64
  %83 = add i64 %82, -5785046477644550716
  %84 = xor i64 -5785046477644550716, %82
  %85 = and i64 -5785046477644550716, %82
  %86 = mul i64 2, %85
  %87 = add i64 %84, %86
  %88 = sext i32 %0 to i64
  %89 = and i64 %88, 8706609175835380705
  %90 = or i64 -8706609175835380706, %88
  %91 = sub i64 %90, -8706609175835380706
  %92 = sext i32 %0 to i64
  %93 = or i64 %92, -8573607309308267989
  %94 = xor i64 %92, -1
  %95 = and i64 -8573607309308267989, %94
  %96 = add i64 %95, %92
  %97 = xor i64 %87, %91
  %98 = xor i64 %97, %83
  %99 = xor i64 %98, %93
  %100 = xor i64 %99, %96
  %101 = xor i64 %100, -1263541864266599071
  %102 = xor i64 %101, %89
  %103 = sext i32 %0 to i64
  %104 = and i64 %103, -4351983976557752199
  %105 = xor i64 %103, -1
  %106 = or i64 4351983976557752198, %105
  %107 = xor i64 %106, -1
  %108 = and i64 %107, -1
  %109 = sext i32 %0 to i64
  %110 = add i64 %109, 7229098259386725646
  %111 = sub i64 0, %109
  %112 = add i64 -7229098259386725646, %111
  %113 = sub i64 0, %112
  %114 = xor i64 %108, %113
  %115 = xor i64 %114, %110
  %116 = xor i64 %115, -2482060033267241311
  %117 = xor i64 %116, %104
  %118 = mul i64 %102, %117
  %119 = trunc i64 %118 to i32
  %.reg2mem = alloca i8**, i32 %119, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %120 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted, %BogusBasciBlock), i8** %120, align 8
  %121 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %121, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %122 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %122, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted, %"2"), i8** %.reload5, align 8
  %123 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %123, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted, %codeRepl), i8** %.reload8, align 8
  %124 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %124, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted, %.exitStub), i8** %.reload11, align 8
  %125 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %125, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@main_loop.extracted, %.exitStub1), i8** %.reload14, align 8
  %126 = alloca i64, align 8
  %127 = alloca i64, align 8
  %128 = sext i32 %0 to i64
  %129 = or i64 %128, 1538449541801212989
  %130 = xor i64 %128, -1
  %131 = and i64 %130, -5279283371215713360
  %132 = and i64 %128, 5279283371215713359
  %133 = or i64 %131, %132
  %134 = xor i64 -6636726901884586099, %133
  %135 = xor i64 %128, -1
  %136 = or i64 -1538449541801212990, %135
  %137 = xor i64 %136, -1
  %138 = and i64 %137, -1
  %139 = or i64 %134, %138
  %140 = sext i32 %0 to i64
  %141 = or i64 %140, -323691500787496301
  %142 = xor i64 %140, -1
  %143 = and i64 %142, 978940213595071399
  %144 = and i64 %140, -978940213595071400
  %145 = or i64 %143, %144
  %146 = xor i64 -713854919985960652, %145
  %147 = xor i64 %140, -1
  %148 = or i64 323691500787496300, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = or i64 %146, %150
  %152 = sext i32 %1 to i64
  %153 = and i64 %152, 2083640886022120157
  %154 = xor i64 %152, -1
  %155 = or i64 -2083640886022120158, %154
  %156 = xor i64 %155, -1
  %157 = and i64 %156, -1
  %158 = xor i64 %129, %153
  %159 = xor i64 %158, %141
  %160 = xor i64 %159, 4754182219846936735
  %161 = xor i64 %160, %157
  %162 = xor i64 %161, %139
  %163 = xor i64 %162, %151
  %164 = sext i32 %0 to i64
  %165 = add i64 %164, -7016145231350938408
  %166 = sub i64 0, %164
  %167 = add i64 7016145231350938408, %166
  %168 = sub i64 0, %167
  %169 = sext i32 %0 to i64
  %170 = or i64 %169, -4780670543671729988
  %171 = xor i64 %169, -1
  %172 = and i64 -4780670543671729988, %171
  %173 = add i64 %172, %169
  %174 = xor i64 %168, %165
  %175 = xor i64 %174, %170
  %176 = xor i64 %175, %173
  %177 = xor i64 %176, 1719449571088245454
  %178 = mul i64 %163, %177
  %179 = sext i32 %0 to i64
  %180 = and i64 %179, -9071520593998560040
  %181 = or i64 9071520593998560039, %179
  %182 = sub i64 %181, 9071520593998560039
  %183 = sext i32 %1 to i64
  %184 = and i64 %183, -3985497960190070810
  %185 = xor i64 %183, -1
  %186 = or i64 3985497960190070809, %185
  %187 = xor i64 %186, -1
  %188 = and i64 %187, -1
  %189 = sext i32 %0 to i64
  %190 = and i64 %189, 1447347609774592969
  %191 = xor i64 %189, -1
  %192 = or i64 -1447347609774592970, %191
  %193 = xor i64 %192, -1
  %194 = and i64 %193, -1
  %195 = xor i64 %184, 7720813118137102093
  %196 = xor i64 %195, %194
  %197 = xor i64 %196, %190
  %198 = xor i64 %197, %182
  %199 = xor i64 %198, %180
  %200 = xor i64 %199, %188
  %201 = sext i32 %0 to i64
  %202 = and i64 %201, -1950992752925574418
  %203 = xor i64 %201, -1
  %204 = xor i64 -1950992752925574418, %203
  %205 = and i64 %204, -1950992752925574418
  %206 = sext i32 %1 to i64
  %207 = or i64 %206, -6166766905847988985
  %208 = xor i64 %206, -1
  %209 = and i64 -6166766905847988985, %208
  %210 = add i64 %209, %206
  %211 = xor i64 %210, 0
  %212 = xor i64 %211, %202
  %213 = xor i64 %212, %207
  %214 = xor i64 %213, %205
  %215 = mul i64 %200, %214
  %216 = trunc i64 %215 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %178, i64* %127, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 %216, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %217 = load i64, i64* %127, align 8
  %218 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable714670702284029050, i32 0, i64 %217
  store i8** %218, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %219 = load i8*, i8** %.reload, align 8
  indirectbr i8* %219, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %220 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted, %codeRepl), i8** %220, align 8
  %221 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted, %"2"), i8** %221, align 8
  %222 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted, %.exitStub1), i8** %222, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %223 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %223, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i32, i1, i1*)* @main_loop.extracted.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %224 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %224, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %225 = sub i64 15, 2
  %226 = srem i32 %0, 2
  %227 = icmp eq i32 %226, 0
  %228 = mul i32 %1, %1
  %229 = add i32 %228, %1
  %230 = mul i32 %229, 3
  %231 = srem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  store i1 %232, i1* %.reg2mem17, align 1
  %233 = mul i32 %1, %1
  %234 = add i32 %233, %1
  store i32 %234, i32* %.reg2mem19, align 4
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %235 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %235, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %236 = sext i32 %0 to i64
  %237 = add i64 %236, -5695433615000442914
  %238 = sub i64 0, %236
  %239 = add i64 5695433615000442914, %238
  %240 = sub i64 0, %239
  %241 = sext i32 %0 to i64
  %242 = or i64 %241, 4283042909496493155
  %243 = and i64 4283042909496493155, %241
  %244 = xor i64 4283042909496493155, %241
  %245 = or i64 %243, %244
  %246 = xor i64 5169844510950538211, %245
  %247 = xor i64 %246, %242
  %248 = xor i64 %247, %240
  %249 = xor i64 %248, %237
  %250 = or i64 %3, -2486611468243503184
  %251 = xor i64 %3, -1
  %252 = and i64 -2486611468243503184, %251
  %253 = add i64 %252, %3
  %254 = and i64 %217, 8244876344261327508
  %255 = or i64 -8244876344261327509, %217
  %256 = sub i64 %255, -8244876344261327509
  %257 = xor i64 %250, %253
  %258 = xor i64 %257, 1345621158090440934
  %259 = xor i64 %258, %254
  %260 = xor i64 %259, %256
  %261 = mul i64 %249, %260
  store i64 %261, i64* %126, align 8
  %262 = alloca i8**, align 8
  %263 = or i64 %7, 3741268505379599412
  %264 = and i64 3741268505379599412, %7
  %265 = xor i64 3741268505379599412, %7
  %266 = or i64 %264, %265
  %267 = or i64 %47, 2398149523249456726
  %268 = xor i64 %47, -1
  %269 = and i64 2398149523249456726, %268
  %270 = add i64 %269, %47
  %271 = add i64 %217, -123985850282388360
  %272 = and i64 -123985850282388360, %217
  %273 = or i64 -123985850282388360, %217
  %274 = add i64 %272, %273
  %275 = xor i64 %271, %274
  %276 = xor i64 %275, %267
  %277 = xor i64 %276, %266
  %278 = xor i64 %277, %270
  %279 = xor i64 %278, 8140383463771830619
  %280 = xor i64 %279, %263
  %281 = add i64 %217, 4777585198983280141
  %282 = add i64 2499442290964223218, %217
  %283 = sub i64 %282, -2278142908019056923
  %284 = sext i32 %1 to i64
  %285 = or i64 %284, -4086878086429927918
  %286 = xor i64 %284, -1
  %287 = and i64 %286, 3143862785197411029
  %288 = and i64 %284, -3143862785197411030
  %289 = or i64 %287, %288
  %290 = xor i64 -1375497278520353593, %289
  %291 = xor i64 %284, -1
  %292 = or i64 4086878086429927917, %291
  %293 = xor i64 %292, -1
  %294 = and i64 %293, -1
  %295 = or i64 %290, %294
  %296 = and i64 %5, 6456878828893028781
  %297 = xor i64 %5, -1
  %298 = xor i64 6456878828893028781, %297
  %299 = and i64 %298, 6456878828893028781
  %300 = xor i64 %281, %283
  %301 = xor i64 %300, %295
  %302 = xor i64 %301, %299
  %303 = xor i64 %302, 0
  %304 = xor i64 %303, %296
  %305 = xor i64 %304, %285
  %306 = mul i64 %280, %305
  %307 = trunc i64 %306 to i1
  %308 = add i64 %11, -6719377332891884283
  %309 = xor i64 -6719377332891884283, %11
  %310 = and i64 -6719377332891884283, %11
  %311 = mul i64 2, %310
  %312 = add i64 %309, %311
  %313 = or i64 %5, 3677817146315181791
  %314 = and i64 3677817146315181791, %5
  %315 = xor i64 3677817146315181791, %5
  %316 = or i64 %314, %315
  %317 = and i64 %47, -30683329755990395
  %318 = or i64 30683329755990394, %47
  %319 = sub i64 %318, 30683329755990394
  %320 = xor i64 %313, 8594824225450666909
  %321 = xor i64 %320, %308
  %322 = xor i64 %321, %312
  %323 = xor i64 %322, %316
  %324 = xor i64 %323, %319
  %325 = xor i64 %324, %317
  %326 = add i64 %7, -2898777732882525767
  %327 = and i64 -2898777732882525767, %7
  %328 = or i64 -2898777732882525767, %7
  %329 = add i64 %327, %328
  %330 = sext i32 %1 to i64
  %331 = and i64 %330, -5629164755353678454
  %332 = or i64 5629164755353678453, %330
  %333 = sub i64 %332, 5629164755353678453
  %334 = and i64 %47, -8184318970071162307
  %335 = xor i64 %47, -1
  %336 = xor i64 -8184318970071162307, %335
  %337 = and i64 %336, -8184318970071162307
  %338 = xor i64 %329, %337
  %339 = xor i64 %338, 0
  %340 = xor i64 %339, %326
  %341 = xor i64 %340, %331
  %342 = xor i64 %341, %334
  %343 = xor i64 %342, %333
  %344 = mul i64 %325, %343
  %345 = trunc i64 %344 to i32
  %346 = or i64 %3, 5526543932305407351
  %347 = and i64 5526543932305407351, %3
  %348 = xor i64 5526543932305407351, %3
  %349 = or i64 %347, %348
  %350 = sext i32 %1 to i64
  %351 = and i64 %350, 5298234504399930225
  %352 = xor i64 %350, -1
  %353 = xor i64 5298234504399930225, %352
  %354 = and i64 %353, 5298234504399930225
  %355 = xor i64 3975986984735889703, %346
  %356 = xor i64 %355, %354
  %357 = xor i64 %356, %351
  %358 = xor i64 %357, %349
  %359 = and i64 %9, 8496350010044276067
  %360 = xor i64 %9, -1
  %361 = xor i64 8496350010044276067, %360
  %362 = and i64 %361, 8496350010044276067
  %363 = and i64 %5, 852625120275984123
  %364 = xor i64 %5, -1
  %365 = xor i64 852625120275984123, %364
  %366 = and i64 %365, 852625120275984123
  %367 = xor i64 %363, %359
  %368 = xor i64 %367, %366
  %369 = xor i64 %368, %362
  %370 = xor i64 %369, 0
  %371 = mul i64 %358, %370
  %372 = trunc i64 %371 to i32
  %373 = or i64 %5, -6121202812227534731
  %374 = and i64 -6121202812227534731, %5
  %375 = xor i64 -6121202812227534731, %5
  %376 = or i64 %374, %375
  %377 = add i64 %217, 1664586680682702724
  %378 = xor i64 1664586680682702724, %217
  %379 = and i64 1664586680682702724, %217
  %380 = mul i64 2, %379
  %381 = add i64 %378, %380
  %382 = add i64 %7, 1553531154651177798
  %383 = sub i64 0, %7
  %384 = sub i64 1553531154651177798, %383
  %385 = xor i64 %382, %377
  %386 = xor i64 %385, %376
  %387 = xor i64 %386, -1938543340842127265
  %388 = xor i64 %387, %373
  %389 = xor i64 %388, %381
  %390 = xor i64 %389, %384
  %391 = and i64 %7, 9218686494751614403
  %392 = xor i64 %7, -1
  %393 = or i64 -9218686494751614404, %392
  %394 = xor i64 %393, -1
  %395 = and i64 %394, -1
  %396 = or i64 %11, 7754013190578120347
  %397 = xor i64 %11, -1
  %398 = and i64 7754013190578120347, %397
  %399 = add i64 %398, %11
  %400 = xor i64 %395, %391
  %401 = xor i64 %400, %399
  %402 = xor i64 %401, 0
  %403 = xor i64 %402, %396
  %404 = mul i64 %390, %403
  %405 = and i64 %5, 1036996630372217307
  %406 = xor i64 %5, -1
  %407 = or i64 -1036996630372217308, %406
  %408 = xor i64 %407, -1
  %409 = and i64 %408, -1
  %410 = sext i32 %0 to i64
  %411 = add i64 %410, 319496429308767565
  %412 = add i64 -8688106290307800436, %410
  %413 = add i64 %412, 9007602719616568001
  %414 = add i64 %11, -8771257902854350339
  %415 = and i64 -8771257902854350339, %11
  %416 = or i64 -8771257902854350339, %11
  %417 = add i64 %415, %416
  %418 = xor i64 %417, %414
  %419 = xor i64 %418, %405
  %420 = xor i64 %419, %413
  %421 = xor i64 %420, %411
  %422 = xor i64 %421, -3388225556676554553
  %423 = xor i64 %422, %409
  %424 = add i64 %3, -8043882300920065049
  %425 = add i64 8807520635148626186, %3
  %426 = add i64 %425, 1595341137640860381
  %427 = and i64 %3, -4682717209990157250
  %428 = xor i64 %3, -1
  %429 = or i64 4682717209990157249, %428
  %430 = xor i64 %429, -1
  %431 = and i64 %430, -1
  %432 = xor i64 %424, %431
  %433 = xor i64 %432, 0
  %434 = xor i64 %433, %426
  %435 = xor i64 %434, %427
  %436 = mul i64 %423, %435
  %437 = trunc i64 %436 to i1
  %438 = and i64 %11, -5959197549687309361
  %439 = xor i64 %11, -1
  %440 = xor i64 -5959197549687309361, %439
  %441 = and i64 %440, -5959197549687309361
  %442 = and i64 %217, -7284817898987514195
  %443 = xor i64 %217, -1
  %444 = or i64 7284817898987514194, %443
  %445 = xor i64 %444, -1
  %446 = and i64 %445, -1
  %447 = xor i64 -6160863046103876971, %441
  %448 = xor i64 %447, %438
  %449 = xor i64 %448, %442
  %450 = xor i64 %449, %446
  %451 = sext i32 %1 to i64
  %452 = add i64 %451, 2941089169606773786
  %453 = xor i64 2941089169606773786, %451
  %454 = and i64 2941089169606773786, %451
  %455 = mul i64 2, %454
  %456 = add i64 %453, %455
  %457 = and i64 %5, -1509122002823283325
  %458 = xor i64 %5, -1
  %459 = or i64 1509122002823283324, %458
  %460 = xor i64 %459, -1
  %461 = and i64 %460, -1
  %462 = or i64 %47, -6993433750035149899
  %463 = xor i64 %47, -1
  %464 = and i64 -6993433750035149899, %463
  %465 = add i64 %464, %47
  %466 = xor i64 %465, %462
  %467 = xor i64 %466, %461
  %468 = xor i64 %467, %457
  %469 = xor i64 %468, %456
  %470 = xor i64 %469, 0
  %471 = xor i64 %470, %452
  %472 = mul i64 %450, %471
  %473 = trunc i64 %472 to i1
  call void @"9941920946239825184"(i32 1, i64* null, i8*** null, i64* %126, i8*** %262, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %307, i32 %345, i32 %372, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %404, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %437, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %473, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %474 = load i8**, i8*** %262, align 8
  %475 = load i8*, i8** %474, align 8
  %476 = bitcast i8* %475 to i1 (i32, i1, i1*)*
  %.reload18 = load i1, i1* %.reg2mem17, align 1
  %.reload20 = load i32, i32* %.reg2mem19, align 4
  %targetBlock = call i1 %476(i32 %.reload20, i1 %.reload18, i1* %.out)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %477 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %478 = load i8*, i8** %477, align 8
  indirectbr i8* %478, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop..split() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012160)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@main_loop..split, %.split), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012148)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop..split, %EntryBasicBlockSplit), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012132)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop..split, %.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012233)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop..split, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop..split, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop..split, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop..split, %.split), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop..split, %.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

BogusBasciBlock:                                  ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop..split, %.split), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop..split, %EntryBasicBlockSplit), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

.split:                                           ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %18 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %.exitStub]

.exitStub:                                        ; preds = %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop..split.17(double %0, i32 %1, float* %.out, double* %.out1, i32* %.out2, i32* %.out3, i32* %.out4) #1 {
entry:
  %2 = sext i32 %1 to i64
  %3 = and i64 %2, -5479289214274404397
  %4 = xor i64 %2, -1
  %5 = xor i64 -5479289214274404397, %4
  %6 = and i64 %5, -5479289214274404397
  %7 = sext i32 %1 to i64
  %8 = and i64 %7, -551756991844012489
  %9 = xor i64 %7, -1
  %10 = xor i64 -551756991844012489, %9
  %11 = and i64 %10, -551756991844012489
  %12 = xor i64 %6, -1116729077204875207
  %13 = xor i64 %12, %3
  %14 = xor i64 %13, %11
  %15 = xor i64 %14, %8
  %16 = sext i32 %1 to i64
  %17 = or i64 %16, 4383065504128462717
  %18 = and i64 4383065504128462717, %16
  %19 = xor i64 4383065504128462717, %16
  %20 = or i64 %18, %19
  %21 = sext i32 %1 to i64
  %22 = or i64 %21, 1268245098087822762
  %23 = xor i64 %21, -1
  %24 = and i64 %23, 6424887210347999246
  %25 = and i64 %21, -6424887210347999247
  %26 = or i64 %24, %25
  %27 = xor i64 5237825810950882724, %26
  %28 = xor i64 %21, -1
  %29 = or i64 -1268245098087822763, %28
  %30 = xor i64 %29, -1
  %31 = and i64 %30, -1
  %32 = or i64 %27, %31
  %33 = xor i64 %22, %32
  %34 = xor i64 %33, %20
  %35 = xor i64 %34, -3570419639452244471
  %36 = xor i64 %35, %17
  %37 = mul i64 %15, %36
  %38 = trunc i64 %37 to i32
  %39 = alloca i32, i32 %38, align 4
  %40 = call i64 @h11804894491772278134(i64 595012105)
  %41 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %40
  store i8* blockaddress(@main_loop..split.17, %loopEnd), i8** %41, align 8
  %42 = call i64 @h11804894491772278134(i64 595012101)
  %43 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %42
  store i8* blockaddress(@main_loop..split.17, %BogusBasicBlock), i8** %43, align 8
  %44 = call i64 @h11804894491772278134(i64 595012102)
  %45 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %44
  store i8* blockaddress(@main_loop..split.17, %.exitStub5), i8** %45, align 8
  %46 = call i64 @h11804894491772278134(i64 595012099)
  %47 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %46
  store i8* blockaddress(@main_loop..split.17, %defaultSwitchBasicBlock), i8** %47, align 8
  %48 = call i64 @h11804894491772278134(i64 595012098)
  %49 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %48
  store i8* blockaddress(@main_loop..split.17, %.exitStub), i8** %49, align 8
  %50 = call i64 @h11804894491772278134(i64 595012096)
  %51 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %50
  store i8* blockaddress(@main_loop..split.17, %codeRepl), i8** %51, align 8
  %52 = call i64 @h11804894491772278134(i64 595012100)
  %53 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %52
  store i8* blockaddress(@main_loop..split.17, %.split), i8** %53, align 8
  %54 = call i64 @h11804894491772278134(i64 595012104)
  %55 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %54
  store i8* blockaddress(@main_loop..split.17, %EntryBasicBlockSplit), i8** %55, align 8
  %56 = call i64 @h11804894491772278134(i64 595012103)
  %57 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %56
  store i8* blockaddress(@main_loop..split.17, %loopStart), i8** %57, align 8
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem2 = alloca i1, align 1
  %58 = sext i32 %1 to i64
  %59 = and i64 %58, -8209558939697705947
  %60 = xor i64 %58, -1
  %61 = or i64 8209558939697705946, %60
  %62 = xor i64 %61, -1
  %63 = and i64 %62, -1
  %64 = sext i32 %1 to i64
  %65 = add i64 %64, -6591837801600022035
  %66 = xor i64 -6591837801600022035, %64
  %67 = and i64 -6591837801600022035, %64
  %68 = mul i64 2, %67
  %69 = add i64 %66, %68
  %70 = sext i32 %1 to i64
  %71 = or i64 %70, -5559264565107811584
  %72 = xor i64 %70, -1
  %73 = and i64 %72, -1116066616563340301
  %74 = and i64 %70, 1116066616563340300
  %75 = or i64 %73, %74
  %76 = xor i64 4781530905456210163, %75
  %77 = xor i64 %70, -1
  %78 = or i64 5559264565107811583, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = or i64 %76, %80
  %82 = xor i64 %81, %59
  %83 = xor i64 %82, %63
  %84 = xor i64 %83, %65
  %85 = xor i64 %84, 1531408352238351025
  %86 = xor i64 %85, %69
  %87 = xor i64 %86, %71
  %88 = sext i32 %1 to i64
  %89 = and i64 %88, 4091624634067210653
  %90 = or i64 -4091624634067210654, %88
  %91 = sub i64 %90, -4091624634067210654
  %92 = sext i32 %1 to i64
  %93 = and i64 %92, -5916869001604388538
  %94 = xor i64 %92, -1
  %95 = xor i64 -5916869001604388538, %94
  %96 = and i64 %95, -5916869001604388538
  %97 = sext i32 %1 to i64
  %98 = add i64 %97, -208018514031094361
  %99 = and i64 -208018514031094361, %97
  %100 = or i64 -208018514031094361, %97
  %101 = add i64 %99, %100
  %102 = xor i64 %101, %89
  %103 = xor i64 %102, %96
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, 2094418874654348881
  %106 = xor i64 %105, %91
  %107 = xor i64 %106, %93
  %108 = mul i64 %87, %107
  %109 = trunc i64 %108 to i32
  %.reg2mem = alloca i8**, i32 %109, align 8
  %lookupTable = alloca [10 x i32], align 4
  %110 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %110, align 4
  %111 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %111, align 4
  %112 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %112, align 4
  %113 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %113, align 4
  %114 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %114, align 4
  %115 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %115, align 4
  %116 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %116, align 4
  %117 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %117, align 4
  %118 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %118, align 4
  %119 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %119, align 4
  %120 = alloca i64, align 8
  %121 = sext i32 %1 to i64
  %122 = or i64 %121, 1833946158377325868
  %123 = xor i64 %121, -1
  %124 = and i64 %123, 7914963190350937173
  %125 = and i64 %121, -7914963190350937174
  %126 = or i64 %124, %125
  %127 = xor i64 8405094895008426361, %126
  %128 = xor i64 %121, -1
  %129 = or i64 -1833946158377325869, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = or i64 %127, %131
  %133 = sext i32 %1 to i64
  %134 = and i64 %133, -7435289942459682372
  %135 = or i64 7435289942459682371, %133
  %136 = sub i64 %135, 7435289942459682371
  %137 = xor i64 %132, %136
  %138 = xor i64 %137, %134
  %139 = xor i64 %138, -1154869052165941037
  %140 = xor i64 %139, %122
  %141 = sext i32 %1 to i64
  %142 = and i64 %141, -7351146861328391228
  %143 = or i64 7351146861328391227, %141
  %144 = sub i64 %143, 7351146861328391227
  %145 = sext i32 %1 to i64
  %146 = or i64 %145, -6949888177573294341
  %147 = and i64 -6949888177573294341, %145
  %148 = xor i64 -6949888177573294341, %145
  %149 = or i64 %147, %148
  %150 = xor i64 1091635862965682011, %144
  %151 = xor i64 %150, %146
  %152 = xor i64 %151, %142
  %153 = xor i64 %152, %149
  %154 = mul i64 %140, %153
  %155 = trunc i64 %154 to i32
  %156 = alloca i64, i32 %155, align 8
  %157 = sext i32 %1 to i64
  %158 = and i64 %157, 5276805928863368476
  %159 = xor i64 %157, -1
  %160 = xor i64 5276805928863368476, %159
  %161 = and i64 %160, 5276805928863368476
  %162 = sext i32 %1 to i64
  %163 = and i64 %162, 9196543290503150587
  %164 = xor i64 %162, -1
  %165 = xor i64 9196543290503150587, %164
  %166 = and i64 %165, 9196543290503150587
  %167 = sext i32 %1 to i64
  %168 = or i64 %167, -1409918916893654079
  %169 = xor i64 %167, -1
  %170 = and i64 -1409918916893654079, %169
  %171 = add i64 %170, %167
  %172 = xor i64 %163, -4629839983773481597
  %173 = xor i64 %172, %168
  %174 = xor i64 %173, %158
  %175 = xor i64 %174, %161
  %176 = xor i64 %175, %166
  %177 = xor i64 %176, %171
  %178 = sext i32 %1 to i64
  %179 = add i64 %178, -2785634665618014295
  %180 = sub i64 0, %178
  %181 = add i64 2785634665618014295, %180
  %182 = sub i64 0, %181
  %183 = sext i32 %1 to i64
  %184 = and i64 %183, 3163458722837038939
  %185 = xor i64 %183, -1
  %186 = xor i64 3163458722837038939, %185
  %187 = and i64 %186, 3163458722837038939
  %188 = xor i64 440496013493401047, %179
  %189 = xor i64 %188, %184
  %190 = xor i64 %189, %182
  %191 = xor i64 %190, %187
  %192 = mul i64 %177, %191
  %193 = trunc i64 %192 to i32
  %194 = sext i32 %1 to i64
  %195 = add i64 %194, -3792558473048803935
  %196 = sub i64 0, %194
  %197 = sub i64 -3792558473048803935, %196
  %198 = sext i32 %1 to i64
  %199 = and i64 %198, -5646398000022657172
  %200 = xor i64 %198, -1
  %201 = xor i64 -5646398000022657172, %200
  %202 = and i64 %201, -5646398000022657172
  %203 = sext i32 %1 to i64
  %204 = or i64 %203, 6492736176649352908
  %205 = xor i64 %203, -1
  %206 = and i64 %205, 5883741499637285031
  %207 = and i64 %203, -5883741499637285032
  %208 = or i64 %206, %207
  %209 = xor i64 846090275273700971, %208
  %210 = xor i64 %203, -1
  %211 = or i64 -6492736176649352909, %210
  %212 = xor i64 %211, -1
  %213 = and i64 %212, -1
  %214 = or i64 %209, %213
  %215 = xor i64 %197, %204
  %216 = xor i64 %215, %199
  %217 = xor i64 %216, %214
  %218 = xor i64 %217, %202
  %219 = xor i64 %218, -7498606955077393355
  %220 = xor i64 %219, %195
  %221 = sext i32 %1 to i64
  %222 = or i64 %221, 4059947551737521109
  %223 = xor i64 %221, -1
  %224 = and i64 %223, 3506818647685442431
  %225 = and i64 %221, -3506818647685442432
  %226 = or i64 %224, %225
  %227 = xor i64 647792888902158506, %226
  %228 = xor i64 %221, -1
  %229 = or i64 -4059947551737521110, %228
  %230 = xor i64 %229, -1
  %231 = and i64 %230, -1
  %232 = or i64 %227, %231
  %233 = sext i32 %1 to i64
  %234 = and i64 %233, 1901631045559350719
  %235 = xor i64 %233, -1
  %236 = xor i64 1901631045559350719, %235
  %237 = and i64 %236, 1901631045559350719
  %238 = sext i32 %1 to i64
  %239 = add i64 %238, -1021819213191604841
  %240 = sub i64 0, %238
  %241 = sub i64 -1021819213191604841, %240
  %242 = xor i64 %241, %222
  %243 = xor i64 %242, %237
  %244 = xor i64 %243, %234
  %245 = xor i64 %244, %239
  %246 = xor i64 %245, %232
  %247 = xor i64 %246, 0
  %248 = mul i64 %220, %247
  %249 = trunc i64 %248 to i1
  %250 = sext i32 %1 to i64
  %251 = add i64 %250, -1939272305233742309
  %252 = xor i64 -1939272305233742309, %250
  %253 = and i64 -1939272305233742309, %250
  %254 = mul i64 2, %253
  %255 = add i64 %252, %254
  %256 = sext i32 %1 to i64
  %257 = and i64 %256, 2262307318760435424
  %258 = xor i64 %256, -1
  %259 = xor i64 2262307318760435424, %258
  %260 = and i64 %259, 2262307318760435424
  %261 = xor i64 %260, %255
  %262 = xor i64 %261, %251
  %263 = xor i64 %262, 3870161176298534737
  %264 = xor i64 %263, %257
  %265 = sext i32 %1 to i64
  %266 = add i64 %265, -5066269053934164003
  %267 = add i64 3321584904898677518, %265
  %268 = add i64 %267, -8387853958832841521
  %269 = sext i32 %1 to i64
  %270 = and i64 %269, -6195334965840844062
  %271 = xor i64 %269, -1
  %272 = xor i64 -6195334965840844062, %271
  %273 = and i64 %272, -6195334965840844062
  %274 = xor i64 %273, %270
  %275 = xor i64 %274, %266
  %276 = xor i64 %275, %268
  %277 = xor i64 %276, 0
  %278 = mul i64 %264, %277
  %279 = trunc i64 %278 to i32
  %280 = sext i32 %1 to i64
  %281 = and i64 %280, 3893393043245931552
  %282 = xor i64 %280, -1
  %283 = xor i64 3893393043245931552, %282
  %284 = and i64 %283, 3893393043245931552
  %285 = sext i32 %1 to i64
  %286 = or i64 %285, 8472210308804632060
  %287 = xor i64 %285, -1
  %288 = and i64 %287, 5310970418334372364
  %289 = and i64 %285, -5310970418334372365
  %290 = or i64 %288, %289
  %291 = xor i64 4334447561820491760, %290
  %292 = xor i64 %285, -1
  %293 = or i64 -8472210308804632061, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %294, -1
  %296 = or i64 %291, %295
  %297 = sext i32 %1 to i64
  %298 = add i64 %297, -6508740379933317412
  %299 = add i64 1952716261820249844, %297
  %300 = add i64 %299, -8461456641753567256
  %301 = xor i64 %281, %284
  %302 = xor i64 %301, %300
  %303 = xor i64 %302, %298
  %304 = xor i64 %303, -7121210023117303925
  %305 = xor i64 %304, %296
  %306 = xor i64 %305, %286
  %307 = sext i32 %1 to i64
  %308 = or i64 %307, -2870617699452885621
  %309 = xor i64 %307, -1
  %310 = and i64 -2870617699452885621, %309
  %311 = add i64 %310, %307
  %312 = sext i32 %1 to i64
  %313 = or i64 %312, 5954816682973602529
  %314 = xor i64 %312, -1
  %315 = and i64 5954816682973602529, %314
  %316 = add i64 %315, %312
  %317 = sext i32 %1 to i64
  %318 = or i64 %317, 1305254403032515104
  %319 = xor i64 %317, -1
  %320 = and i64 1305254403032515104, %319
  %321 = add i64 %320, %317
  %322 = xor i64 %318, %321
  %323 = xor i64 %322, %308
  %324 = xor i64 %323, %316
  %325 = xor i64 %324, %313
  %326 = xor i64 %325, 0
  %327 = xor i64 %326, %311
  %328 = mul i64 %306, %327
  %329 = sext i32 %1 to i64
  %330 = or i64 %329, 1540579158260618021
  %331 = xor i64 %329, -1
  %332 = and i64 %331, 7653817917616326325
  %333 = and i64 %329, -7653817917616326326
  %334 = or i64 %332, %333
  %335 = xor i64 9175783306089993616, %334
  %336 = xor i64 %329, -1
  %337 = or i64 -1540579158260618022, %336
  %338 = xor i64 %337, -1
  %339 = and i64 %338, -1
  %340 = or i64 %335, %339
  %341 = sext i32 %1 to i64
  %342 = or i64 %341, 2768628528888131657
  %343 = and i64 2768628528888131657, %341
  %344 = xor i64 2768628528888131657, %341
  %345 = or i64 %343, %344
  %346 = sext i32 %1 to i64
  %347 = and i64 %346, 8668011605339831638
  %348 = or i64 -8668011605339831639, %346
  %349 = sub i64 %348, -8668011605339831639
  %350 = xor i64 %349, %342
  %351 = xor i64 %350, %345
  %352 = xor i64 %351, -7540141715203077275
  %353 = xor i64 %352, %347
  %354 = xor i64 %353, %330
  %355 = xor i64 %354, %340
  %356 = sext i32 %1 to i64
  %357 = add i64 %356, 6137320745235620088
  %358 = and i64 6137320745235620088, %356
  %359 = or i64 6137320745235620088, %356
  %360 = add i64 %358, %359
  %361 = sext i32 %1 to i64
  %362 = or i64 %361, -5155763011809531728
  %363 = xor i64 %361, -1
  %364 = and i64 -5155763011809531728, %363
  %365 = add i64 %364, %361
  %366 = sext i32 %1 to i64
  %367 = add i64 %366, -2575909554549282104
  %368 = sub i64 0, %366
  %369 = add i64 2575909554549282104, %368
  %370 = sub i64 0, %369
  %371 = xor i64 %360, %365
  %372 = xor i64 %371, %370
  %373 = xor i64 %372, %362
  %374 = xor i64 %373, %357
  %375 = xor i64 %374, 0
  %376 = xor i64 %375, %367
  %377 = mul i64 %355, %376
  %378 = trunc i64 %377 to i32
  %379 = sext i32 %1 to i64
  %380 = add i64 %379, 2502083891771615063
  %381 = sub i64 0, %379
  %382 = add i64 -2502083891771615063, %381
  %383 = sub i64 0, %382
  %384 = sext i32 %1 to i64
  %385 = and i64 %384, 3392730514805884294
  %386 = or i64 -3392730514805884295, %384
  %387 = sub i64 %386, -3392730514805884295
  %388 = xor i64 -8785537728244905633, %385
  %389 = xor i64 %388, %387
  %390 = xor i64 %389, %383
  %391 = xor i64 %390, %380
  %392 = sext i32 %1 to i64
  %393 = and i64 %392, 1484258241934604039
  %394 = or i64 -1484258241934604040, %392
  %395 = sub i64 %394, -1484258241934604040
  %396 = sext i32 %1 to i64
  %397 = and i64 %396, -7157323026576369772
  %398 = or i64 7157323026576369771, %396
  %399 = sub i64 %398, 7157323026576369771
  %400 = sext i32 %1 to i64
  %401 = add i64 %400, 4795414943612071768
  %402 = sub i64 0, %400
  %403 = sub i64 4795414943612071768, %402
  %404 = xor i64 %395, %403
  %405 = xor i64 %404, %397
  %406 = xor i64 %405, 0
  %407 = xor i64 %406, %393
  %408 = xor i64 %407, %401
  %409 = xor i64 %408, %399
  %410 = mul i64 %391, %409
  %411 = sext i32 %1 to i64
  %412 = or i64 %411, -5237423130442607743
  %413 = and i64 -5237423130442607743, %411
  %414 = xor i64 -5237423130442607743, %411
  %415 = or i64 %413, %414
  %416 = sext i32 %1 to i64
  %417 = add i64 %416, 2735965565813442026
  %418 = and i64 2735965565813442026, %416
  %419 = or i64 2735965565813442026, %416
  %420 = add i64 %418, %419
  %421 = xor i64 %412, %420
  %422 = xor i64 %421, %417
  %423 = xor i64 %422, 5768171093233151541
  %424 = xor i64 %423, %415
  %425 = sext i32 %1 to i64
  %426 = or i64 %425, 7328760973867935431
  %427 = xor i64 %425, -1
  %428 = and i64 7328760973867935431, %427
  %429 = add i64 %428, %425
  %430 = sext i32 %1 to i64
  %431 = and i64 %430, -2999435718034289482
  %432 = xor i64 %430, -1
  %433 = xor i64 -2999435718034289482, %432
  %434 = and i64 %433, -2999435718034289482
  %435 = xor i64 0, %434
  %436 = xor i64 %435, %431
  %437 = xor i64 %436, %429
  %438 = xor i64 %437, %426
  %439 = mul i64 %424, %438
  %440 = sext i32 %1 to i64
  %441 = or i64 %440, 9148811262209473557
  %442 = and i64 9148811262209473557, %440
  %443 = xor i64 9148811262209473557, %440
  %444 = or i64 %442, %443
  %445 = sext i32 %1 to i64
  %446 = and i64 %445, 3710247578864814239
  %447 = xor i64 %445, -1
  %448 = xor i64 3710247578864814239, %447
  %449 = and i64 %448, 3710247578864814239
  %450 = sext i32 %1 to i64
  %451 = and i64 %450, 4449496360503616685
  %452 = xor i64 %450, -1
  %453 = xor i64 4449496360503616685, %452
  %454 = and i64 %453, 4449496360503616685
  %455 = xor i64 7012487149352679575, %446
  %456 = xor i64 %455, %454
  %457 = xor i64 %456, %451
  %458 = xor i64 %457, %444
  %459 = xor i64 %458, %441
  %460 = xor i64 %459, %449
  %461 = sext i32 %1 to i64
  %462 = or i64 %461, -8639449609103017353
  %463 = and i64 -8639449609103017353, %461
  %464 = xor i64 -8639449609103017353, %461
  %465 = or i64 %463, %464
  %466 = sext i32 %1 to i64
  %467 = or i64 %466, -6935913249487333832
  %468 = xor i64 %466, -1
  %469 = and i64 %468, 950171398594989522
  %470 = and i64 %466, -950171398594989523
  %471 = or i64 %469, %470
  %472 = xor i64 -7885520924477465622, %471
  %473 = xor i64 %466, -1
  %474 = or i64 6935913249487333831, %473
  %475 = xor i64 %474, -1
  %476 = and i64 %475, -1
  %477 = or i64 %472, %476
  %478 = sext i32 %1 to i64
  %479 = add i64 %478, -295606035605808841
  %480 = and i64 -295606035605808841, %478
  %481 = or i64 -295606035605808841, %478
  %482 = add i64 %480, %481
  %483 = xor i64 %477, 0
  %484 = xor i64 %483, %479
  %485 = xor i64 %484, %482
  %486 = xor i64 %485, %462
  %487 = xor i64 %486, %467
  %488 = xor i64 %487, %465
  %489 = mul i64 %460, %488
  %490 = trunc i64 %489 to i1
  %491 = sext i32 %1 to i64
  %492 = add i64 %491, 3836424490251427587
  %493 = xor i64 3836424490251427587, %491
  %494 = and i64 3836424490251427587, %491
  %495 = mul i64 2, %494
  %496 = add i64 %493, %495
  %497 = sext i32 %1 to i64
  %498 = and i64 %497, -2925605405259492964
  %499 = xor i64 %497, -1
  %500 = or i64 2925605405259492963, %499
  %501 = xor i64 %500, -1
  %502 = and i64 %501, -1
  %503 = xor i64 %492, %498
  %504 = xor i64 %503, -3614690549954100397
  %505 = xor i64 %504, %496
  %506 = xor i64 %505, %502
  %507 = sext i32 %1 to i64
  %508 = and i64 %507, -4578154413600888113
  %509 = or i64 4578154413600888112, %507
  %510 = sub i64 %509, 4578154413600888112
  %511 = sext i32 %1 to i64
  %512 = or i64 %511, 2615755236175011338
  %513 = xor i64 %511, -1
  %514 = and i64 2615755236175011338, %513
  %515 = add i64 %514, %511
  %516 = sext i32 %1 to i64
  %517 = and i64 %516, -4685554732601391816
  %518 = xor i64 %516, -1
  %519 = or i64 4685554732601391815, %518
  %520 = xor i64 %519, -1
  %521 = and i64 %520, -1
  %522 = xor i64 %510, %517
  %523 = xor i64 %522, %515
  %524 = xor i64 %523, %521
  %525 = xor i64 %524, %508
  %526 = xor i64 %525, 0
  %527 = xor i64 %526, %512
  %528 = mul i64 %506, %527
  %529 = trunc i64 %528 to i1
  %530 = sext i32 %1 to i64
  %531 = and i64 %530, 6611374106360900959
  %532 = xor i64 %530, -1
  %533 = or i64 -6611374106360900960, %532
  %534 = xor i64 %533, -1
  %535 = and i64 %534, -1
  %536 = sext i32 %1 to i64
  %537 = and i64 %536, -970416992563057849
  %538 = or i64 970416992563057848, %536
  %539 = sub i64 %538, 970416992563057848
  %540 = xor i64 %539, %535
  %541 = xor i64 %540, 9106072616377161835
  %542 = xor i64 %541, %537
  %543 = xor i64 %542, %531
  %544 = sext i32 %1 to i64
  %545 = add i64 %544, -556377928856396358
  %546 = sub i64 0, %544
  %547 = sub i64 -556377928856396358, %546
  %548 = sext i32 %1 to i64
  %549 = and i64 %548, 5975573731043543409
  %550 = or i64 -5975573731043543410, %548
  %551 = sub i64 %550, -5975573731043543410
  %552 = sext i32 %1 to i64
  %553 = add i64 %552, 5176605513325629918
  %554 = add i64 6249947276467000869, %552
  %555 = add i64 %554, -1073341763141370951
  %556 = xor i64 %555, %549
  %557 = xor i64 %556, %545
  %558 = xor i64 %557, %551
  %559 = xor i64 %558, %547
  %560 = xor i64 %559, 0
  %561 = xor i64 %560, %553
  %562 = mul i64 %543, %561
  %563 = trunc i64 %562 to i1
  %564 = sext i32 %1 to i64
  %565 = and i64 %564, 1999127532759654924
  %566 = xor i64 %564, -1
  %567 = or i64 -1999127532759654925, %566
  %568 = xor i64 %567, -1
  %569 = and i64 %568, -1
  %570 = sext i32 %1 to i64
  %571 = and i64 %570, -3988627774537789736
  %572 = xor i64 %570, -1
  %573 = xor i64 -3988627774537789736, %572
  %574 = and i64 %573, -3988627774537789736
  %575 = xor i64 %574, %571
  %576 = xor i64 %575, %569
  %577 = xor i64 %576, %565
  %578 = xor i64 %577, -3666798559820113119
  %579 = sext i32 %1 to i64
  %580 = add i64 %579, -84738349802107844
  %581 = sub i64 0, %579
  %582 = sub i64 -84738349802107844, %581
  %583 = sext i32 %1 to i64
  %584 = add i64 %583, 7601469647733941027
  %585 = add i64 -2078237498952842496, %583
  %586 = sub i64 %585, 8767036927022768093
  %587 = sext i32 %1 to i64
  %588 = add i64 %587, 571727442066928682
  %589 = and i64 571727442066928682, %587
  %590 = or i64 571727442066928682, %587
  %591 = add i64 %589, %590
  %592 = xor i64 %588, 0
  %593 = xor i64 %592, %591
  %594 = xor i64 %593, %582
  %595 = xor i64 %594, %584
  %596 = xor i64 %595, %586
  %597 = xor i64 %596, %580
  %598 = mul i64 %578, %597
  %599 = trunc i64 %598 to i1
  call void @"9941920946239825184"(i32 %193, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %156, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %249, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %279, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 %328, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 %378, i1* null, i1* null, i64 0, i64 0, i64 %410, i1* null, i1* null, i1* null, i64 %439, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %490, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %529, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 %563, i1 false, i1 false, i1 false, i1 %599, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %600 = load i64, i64* %156, align 8
  %601 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3092705622466298772, i32 0, i64 %600
  store i8** %601, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012103, i32* %39, align 4
  %602 = call i8** @bf9506738072890574186(i32* %39)
  %603 = load i8*, i8** %602, align 8
  indirectbr i8* %603, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub5
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i1)* @main_loop..split.17.extracted to i8*), i8** %.reload, align 8
  %604 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %605 = load i32, i32* %604, align 4
  %606 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  %607 = load i32, i32* %606, align 4
  %608 = add i32 %605, -231050721
  %609 = sub i32 %608, %607
  %610 = sub i32 %609, -231050721
  store i32 %610, i32* %dispatcher, align 4
  %611 = load i8*, i8** %47, align 8
  %612 = load i8, i8* %611, align 1
  %613 = and i8 %612, 1
  %614 = icmp eq i8 %613, 1
  %615 = mul i8 %612, %612
  %616 = and i8 %615, %612
  %617 = or i8 %615, %612
  %618 = add i8 %616, %617
  %619 = srem i8 %618, 2
  %620 = icmp eq i8 %619, 0
  %621 = or i1 %614, %620
  %622 = select i1 %621, i32 595012098, i32 595012105
  %623 = and i64 %40, 2856277722246886659
  %624 = xor i64 %40, -1
  %625 = or i64 -2856277722246886660, %624
  %626 = xor i64 %625, -1
  %627 = and i64 %626, -1
  %628 = and i64 %46, 7518283185842537962
  %629 = or i64 -7518283185842537963, %46
  %630 = sub i64 %629, -7518283185842537963
  %631 = xor i64 %628, -7347621235081057547
  %632 = xor i64 %631, %627
  %633 = xor i64 %632, %630
  %634 = xor i64 %633, %623
  %635 = or i64 %46, -2104206021527140231
  %636 = xor i64 %46, -1
  %637 = and i64 -2104206021527140231, %636
  %638 = add i64 %637, %46
  %639 = and i64 %40, 5202145859829986541
  %640 = xor i64 %40, -1
  %641 = or i64 -5202145859829986542, %640
  %642 = xor i64 %641, -1
  %643 = and i64 %642, -1
  %644 = sext i32 %1 to i64
  %645 = add i64 %644, -6226720282493690254
  %646 = sub i64 0, %644
  %647 = add i64 6226720282493690254, %646
  %648 = sub i64 0, %647
  %649 = xor i64 %639, %645
  %650 = xor i64 %649, %635
  %651 = xor i64 %650, %638
  %652 = xor i64 %651, %643
  %653 = xor i64 %652, -8441096799757672705
  %654 = xor i64 %653, %648
  %655 = mul i64 %634, %654
  %656 = trunc i64 %655 to i32
  %657 = xor i32 %622, %656
  store i32 %657, i32* %39, align 4
  %658 = call i8** @bf9506738072890574186(i32* %39)
  %659 = load i8*, i8** %658, align 8
  indirectbr i8* %659, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %660 = fadd double %0, 7.000000e-02
  %661 = fptrunc double %660 to float
  store float %661, float* %.out, align 4
  %662 = fpext float %661 to double
  store double %662, double* %.out1, align 8
  %663 = and i32 %1, 1
  store i32 %663, i32* %.out2, align 4
  %664 = icmp eq i32 %663, 0
  store i1 %664, i1* %.reg2mem2, align 1
  %665 = mul i32 %1, %1
  store i32 %665, i32* %.out3, align 4
  %666 = add i32 %665, %1
  store i32 %666, i32* %.out4, align 4
  %667 = mul i32 %666, 3
  %668 = srem i32 %667, 2
  store i32 %668, i32* %.reg2mem4, align 4
  %669 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %670 = load i32, i32* %669, align 4
  %671 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %672 = load i32, i32* %671, align 4
  %673 = srem i32 %670, %672
  store i32 %673, i32* %dispatcher, align 4
  %674 = load i8*, i8** %41, align 8
  %675 = load i8, i8* %674, align 1
  %676 = mul i8 %675, 2
  %677 = mul i8 %675, 2
  %678 = add i8 2, %677
  %679 = mul i8 %676, %678
  %680 = srem i8 %679, 4
  %681 = icmp eq i8 %680, 0
  %682 = mul i8 %675, %675
  %683 = or i64 %52, 2922674649189779698
  %684 = xor i64 %52, -1
  %685 = and i64 2922674649189779698, %684
  %686 = add i64 %685, %52
  %687 = sext i32 %dispatcher1 to i64
  %688 = and i64 %687, 49534592728872219
  %689 = xor i64 %687, -1
  %690 = xor i64 49534592728872219, %689
  %691 = and i64 %690, 49534592728872219
  %692 = sext i32 %1 to i64
  %693 = or i64 %692, -6310041254050506806
  %694 = xor i64 %692, -1
  %695 = and i64 %694, 1955927348517632486
  %696 = and i64 %692, -1955927348517632487
  %697 = or i64 %695, %696
  %698 = xor i64 -5527355564736172500, %697
  %699 = xor i64 %692, -1
  %700 = or i64 6310041254050506805, %699
  %701 = xor i64 %700, -1
  %702 = and i64 %701, -1
  %703 = or i64 %698, %702
  %704 = xor i64 %686, %693
  %705 = xor i64 %704, %691
  %706 = xor i64 %705, %703
  %707 = xor i64 %706, %688
  %708 = xor i64 %707, %683
  %709 = xor i64 %708, 5518617160872706443
  %710 = add i64 %44, -405011390039868620
  %711 = add i64 -7732507498276093937, %44
  %712 = sub i64 %711, -7327496108236225317
  %713 = add i64 %54, 8624970031290951953
  %714 = and i64 8624970031290951953, %54
  %715 = or i64 8624970031290951953, %54
  %716 = add i64 %714, %715
  %717 = xor i64 %710, 0
  %718 = xor i64 %717, %713
  %719 = xor i64 %718, %716
  %720 = xor i64 %719, %712
  %721 = mul i64 %709, %720
  %722 = trunc i64 %721 to i8
  %723 = sub i8 %722, %675
  %724 = sub i8 %682, %723
  %725 = srem i8 %724, 2
  %726 = sext i32 %1 to i64
  %727 = add i64 %726, 2435691820672359568
  %728 = add i64 5926560292272728153, %726
  %729 = add i64 %728, -3490868471600368585
  %730 = add i64 %56, 8797546163871221260
  %731 = sub i64 0, %56
  %732 = sub i64 8797546163871221260, %731
  %733 = xor i64 %727, %730
  %734 = xor i64 %733, %729
  %735 = xor i64 %734, %732
  %736 = xor i64 %735, -4306135260534474289
  %737 = and i64 %40, -5948173945532785346
  %738 = xor i64 %40, -1
  %739 = xor i64 -5948173945532785346, %738
  %740 = and i64 %739, -5948173945532785346
  %741 = or i64 %54, -4893394432963127334
  %742 = and i64 -4893394432963127334, %54
  %743 = xor i64 -4893394432963127334, %54
  %744 = or i64 %742, %743
  %745 = xor i64 %744, 0
  %746 = xor i64 %745, %740
  %747 = xor i64 %746, %737
  %748 = xor i64 %747, %741
  %749 = mul i64 %736, %748
  %750 = trunc i64 %749 to i8
  %751 = icmp eq i8 %725, %750
  %752 = xor i1 %681, true
  %753 = or i1 %752, %751
  %754 = xor i1 %681, true
  %755 = sub i1 %753, %754
  %756 = select i1 %755, i32 595012100, i32 595012105
  %757 = add i64 %42, -1958991177516950675
  %758 = add i64 -4558220483198605211, %42
  %759 = sub i64 %758, -2599229305681654536
  %760 = sext i32 %dispatcher1 to i64
  %761 = add i64 %760, 6282505404315311356
  %762 = sub i64 0, %760
  %763 = add i64 -6282505404315311356, %762
  %764 = sub i64 0, %763
  %765 = and i64 %44, 4910083384696747001
  %766 = xor i64 %44, -1
  %767 = or i64 -4910083384696747002, %766
  %768 = xor i64 %767, -1
  %769 = and i64 %768, -1
  %770 = xor i64 -8350952446909532395, %769
  %771 = xor i64 %770, %757
  %772 = xor i64 %771, %764
  %773 = xor i64 %772, %759
  %774 = xor i64 %773, %765
  %775 = xor i64 %774, %761
  %776 = sext i32 %1 to i64
  %777 = add i64 %776, 4989354833036851446
  %778 = and i64 4989354833036851446, %776
  %779 = or i64 4989354833036851446, %776
  %780 = add i64 %778, %779
  %781 = or i64 %40, -2880515666958328372
  %782 = and i64 -2880515666958328372, %40
  %783 = xor i64 -2880515666958328372, %40
  %784 = or i64 %782, %783
  %785 = add i64 %46, -681277556988873364
  %786 = add i64 -4582217120412697045, %46
  %787 = add i64 %786, 3900939563423823681
  %788 = xor i64 %777, %780
  %789 = xor i64 %788, %784
  %790 = xor i64 %789, %787
  %791 = xor i64 %790, %785
  %792 = xor i64 %791, 4721997537603548151
  %793 = xor i64 %792, %781
  %794 = mul i64 %775, %793
  %795 = trunc i64 %794 to i32
  %796 = xor i32 %756, %795
  %797 = xor i32 %796, 169808974
  store i32 %797, i32* %39, align 4
  %798 = call i8** @bf9506738072890574186(i32* %39)
  %799 = load i8*, i8** %798, align 8
  indirectbr i8* %799, [label %loopEnd, label %.split]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %120, align 8
  %800 = alloca i8**, align 8
  %801 = and i64 %42, -3165159992718881848
  %802 = xor i64 %42, -1
  %803 = or i64 3165159992718881847, %802
  %804 = xor i64 %803, -1
  %805 = and i64 %804, -1
  %806 = and i64 %54, -8592735429347111737
  %807 = or i64 8592735429347111736, %54
  %808 = sub i64 %807, 8592735429347111736
  %809 = xor i64 %805, %806
  %810 = xor i64 %809, -2595080301195917573
  %811 = xor i64 %810, %801
  %812 = xor i64 %811, %808
  %813 = add i64 %48, -251103901868720730
  %814 = add i64 -3882228676106544855, %48
  %815 = add i64 %814, 3631124774237824125
  %816 = and i64 %600, 9129539832272952063
  %817 = xor i64 %600, -1
  %818 = or i64 -9129539832272952064, %817
  %819 = xor i64 %818, -1
  %820 = and i64 %819, -1
  %821 = xor i64 %816, %820
  %822 = xor i64 %821, %813
  %823 = xor i64 %822, %815
  %824 = xor i64 %823, 0
  %825 = mul i64 %812, %824
  %826 = trunc i64 %825 to i1
  %827 = add i64 %48, -3106572095190595697
  %828 = add i64 7742969333210026541, %48
  %829 = add i64 %828, 7597202645308929378
  %830 = add i64 %44, 5815023400179336132
  %831 = sub i64 0, %44
  %832 = sub i64 5815023400179336132, %831
  %833 = and i64 %48, 4805516307069976901
  %834 = or i64 -4805516307069976902, %48
  %835 = sub i64 %834, -4805516307069976902
  %836 = xor i64 6449066177739077145, %833
  %837 = xor i64 %836, %829
  %838 = xor i64 %837, %835
  %839 = xor i64 %838, %827
  %840 = xor i64 %839, %830
  %841 = xor i64 %840, %832
  %842 = and i64 %42, 3088122936042334832
  %843 = xor i64 %42, -1
  %844 = or i64 -3088122936042334833, %843
  %845 = xor i64 %844, -1
  %846 = and i64 %845, -1
  %847 = or i64 %56, -6073298694309705427
  %848 = xor i64 %56, -1
  %849 = and i64 %848, -1055681394221056666
  %850 = and i64 %56, 1055681394221056665
  %851 = or i64 %849, %850
  %852 = xor i64 6552236486860043339, %851
  %853 = xor i64 %56, -1
  %854 = or i64 6073298694309705426, %853
  %855 = xor i64 %854, -1
  %856 = and i64 %855, -1
  %857 = or i64 %852, %856
  %858 = or i64 %600, 7108805460258924812
  %859 = xor i64 %600, -1
  %860 = and i64 7108805460258924812, %859
  %861 = add i64 %860, %600
  %862 = xor i64 %842, %847
  %863 = xor i64 %862, %846
  %864 = xor i64 %863, %861
  %865 = xor i64 %864, %858
  %866 = xor i64 %865, %857
  %867 = xor i64 %866, 0
  %868 = mul i64 %841, %867
  %869 = or i64 %56, -2943628991756757281
  %870 = xor i64 %56, -1
  %871 = and i64 -2943628991756757281, %870
  %872 = add i64 %871, %56
  %873 = sext i32 %1 to i64
  %874 = add i64 %873, 5234078694915599897
  %875 = add i64 -4683358528754471809, %873
  %876 = add i64 %875, -8529306850039479910
  %877 = xor i64 %872, %869
  %878 = xor i64 %877, %874
  %879 = xor i64 %878, -247497239694023901
  %880 = xor i64 %879, %876
  %881 = and i64 %52, 8938132550186631408
  %882 = xor i64 %52, -1
  %883 = xor i64 8938132550186631408, %882
  %884 = and i64 %883, 8938132550186631408
  %885 = and i64 %50, -1859335442628554484
  %886 = xor i64 %50, -1
  %887 = xor i64 -1859335442628554484, %886
  %888 = and i64 %887, -1859335442628554484
  %889 = add i64 %600, 4001466715863796589
  %890 = sub i64 0, %600
  %891 = sub i64 4001466715863796589, %890
  %892 = xor i64 %881, 0
  %893 = xor i64 %892, %884
  %894 = xor i64 %893, %888
  %895 = xor i64 %894, %891
  %896 = xor i64 %895, %889
  %897 = xor i64 %896, %885
  %898 = mul i64 %880, %897
  %899 = trunc i64 %898 to i1
  %900 = or i64 %42, -6601745276237189934
  %901 = xor i64 %42, -1
  %902 = and i64 %901, -9195569434692840405
  %903 = and i64 %42, 9195569434692840404
  %904 = or i64 %902, %903
  %905 = xor i64 2594959556739430649, %904
  %906 = xor i64 %42, -1
  %907 = or i64 6601745276237189933, %906
  %908 = xor i64 %907, -1
  %909 = and i64 %908, -1
  %910 = or i64 %905, %909
  %911 = or i64 %48, 4969166657613959159
  %912 = xor i64 %48, -1
  %913 = and i64 %912, 978015976187384647
  %914 = and i64 %48, -978015976187384648
  %915 = or i64 %913, %914
  %916 = xor i64 5288522176910449840, %915
  %917 = xor i64 %48, -1
  %918 = or i64 -4969166657613959160, %917
  %919 = xor i64 %918, -1
  %920 = and i64 %919, -1
  %921 = or i64 %916, %920
  %922 = xor i64 %910, %911
  %923 = xor i64 %922, -5908480880395031649
  %924 = xor i64 %923, %900
  %925 = xor i64 %924, %921
  %926 = add i64 %50, 4843375663811281387
  %927 = add i64 -8496687722963937163, %50
  %928 = sub i64 %927, 5106680686934333066
  %929 = and i64 %600, 3826193998152515854
  %930 = xor i64 %600, -1
  %931 = or i64 -3826193998152515855, %930
  %932 = xor i64 %931, -1
  %933 = and i64 %932, -1
  %934 = or i64 %50, 4769811845956882092
  %935 = xor i64 %50, -1
  %936 = and i64 %935, -6098879753183047129
  %937 = and i64 %50, 6098879753183047128
  %938 = or i64 %936, %937
  %939 = xor i64 -1626455086668047221, %938
  %940 = xor i64 %50, -1
  %941 = or i64 -4769811845956882093, %940
  %942 = xor i64 %941, -1
  %943 = and i64 %942, -1
  %944 = or i64 %939, %943
  %945 = xor i64 %944, %929
  %946 = xor i64 %945, %928
  %947 = xor i64 %946, %926
  %948 = xor i64 %947, %933
  %949 = xor i64 %948, %934
  %950 = xor i64 %949, 0
  %951 = mul i64 %925, %950
  %952 = trunc i64 %951 to i1
  %953 = or i64 %40, 4788866211587641046
  %954 = xor i64 %40, -1
  %955 = and i64 %954, -4690508605981257504
  %956 = and i64 %40, 4690508605981257503
  %957 = or i64 %955, %956
  %958 = xor i64 -246977574471836106, %957
  %959 = xor i64 %40, -1
  %960 = or i64 -4788866211587641047, %959
  %961 = xor i64 %960, -1
  %962 = and i64 %961, -1
  %963 = or i64 %958, %962
  %964 = add i64 %42, -3225365971608329099
  %965 = add i64 -5758185192644156111, %42
  %966 = add i64 %965, 2532819221035827012
  %967 = add i64 %50, 7561380279396248003
  %968 = xor i64 7561380279396248003, %50
  %969 = and i64 7561380279396248003, %50
  %970 = mul i64 2, %969
  %971 = add i64 %968, %970
  %972 = xor i64 %964, %963
  %973 = xor i64 %972, %966
  %974 = xor i64 %973, -8360188316232285589
  %975 = xor i64 %974, %967
  %976 = xor i64 %975, %971
  %977 = xor i64 %976, %953
  %978 = or i64 %54, -9074932517184379299
  %979 = xor i64 %54, -1
  %980 = and i64 -9074932517184379299, %979
  %981 = add i64 %980, %54
  %982 = or i64 %44, -8180964517860434472
  %983 = and i64 -8180964517860434472, %44
  %984 = xor i64 -8180964517860434472, %44
  %985 = or i64 %983, %984
  %986 = xor i64 0, %982
  %987 = xor i64 %986, %985
  %988 = xor i64 %987, %981
  %989 = xor i64 %988, %978
  %990 = mul i64 %977, %989
  %991 = add i64 %50, -6550873549503734049
  %992 = sub i64 0, %50
  %993 = sub i64 -6550873549503734049, %992
  %994 = or i64 %52, -184807495064722468
  %995 = and i64 -184807495064722468, %52
  %996 = xor i64 -184807495064722468, %52
  %997 = or i64 %995, %996
  %998 = xor i64 %993, %991
  %999 = xor i64 %998, %997
  %1000 = xor i64 %999, 6480901338247761333
  %1001 = xor i64 %1000, %994
  %1002 = add i64 %48, 7850932769737884783
  %1003 = add i64 286618853957472588, %48
  %1004 = add i64 %1003, 7564313915780412195
  %1005 = or i64 %48, -6507808716769191113
  %1006 = xor i64 %48, -1
  %1007 = and i64 %1006, 8949788648159297829
  %1008 = and i64 %48, -8949788648159297830
  %1009 = or i64 %1007, %1008
  %1010 = xor i64 -2766451347118892526, %1009
  %1011 = xor i64 %48, -1
  %1012 = or i64 6507808716769191112, %1011
  %1013 = xor i64 %1012, -1
  %1014 = and i64 %1013, -1
  %1015 = or i64 %1010, %1014
  %1016 = or i64 %46, -4402039745514765711
  %1017 = xor i64 %46, -1
  %1018 = and i64 %1017, -1554299407340539903
  %1019 = and i64 %46, 1554299407340539902
  %1020 = or i64 %1018, %1019
  %1021 = xor i64 2920255330160800368, %1020
  %1022 = xor i64 %46, -1
  %1023 = or i64 4402039745514765710, %1022
  %1024 = xor i64 %1023, -1
  %1025 = and i64 %1024, -1
  %1026 = or i64 %1021, %1025
  %1027 = xor i64 %1004, %1005
  %1028 = xor i64 %1027, %1026
  %1029 = xor i64 %1028, %1002
  %1030 = xor i64 %1029, %1016
  %1031 = xor i64 %1030, %1015
  %1032 = xor i64 %1031, 0
  %1033 = mul i64 %1001, %1032
  %1034 = trunc i64 %1033 to i1
  call void @"9941920946239825184"(i32 11, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %826, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* %120, i8*** %800, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %868, i1 false, i1* null, i1 %899, i1 %952, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %990, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %1034, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1035 = load i8**, i8*** %800, align 8
  %1036 = load i8*, i8** %1035, align 8
  %1037 = bitcast i8* %1036 to i1 (i32, i1)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %.reload5 = load i32, i32* %.reg2mem4, align 4
  %targetBlock = call i1 %1037(i32 %.reload5, i1 %.reload3)
  %1038 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %1039 = load i32, i32* %1038, align 4
  %1040 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %1041 = load i32, i32* %1040, align 4
  %1042 = xor i32 %1039, %1041
  %1043 = and i32 %1039, %1041
  %1044 = add i64 %40, -6070503589933992219
  %1045 = xor i64 -6070503589933992219, %40
  %1046 = and i64 -6070503589933992219, %40
  %1047 = mul i64 2, %1046
  %1048 = add i64 %1045, %1047
  %1049 = add i64 %54, -6876565085565320131
  %1050 = and i64 -6876565085565320131, %54
  %1051 = or i64 -6876565085565320131, %54
  %1052 = add i64 %1050, %1051
  %1053 = add i64 %46, 5987429791282928436
  %1054 = and i64 5987429791282928436, %46
  %1055 = or i64 5987429791282928436, %46
  %1056 = add i64 %1054, %1055
  %1057 = xor i64 -8782678577239020951, %1056
  %1058 = xor i64 %1057, %1053
  %1059 = xor i64 %1058, %1052
  %1060 = xor i64 %1059, %1044
  %1061 = xor i64 %1060, %1048
  %1062 = xor i64 %1061, %1049
  %1063 = add i64 %54, -1779903206991118901
  %1064 = add i64 -6360126512402841301, %54
  %1065 = sub i64 %1064, -4580223305411722400
  %1066 = or i64 %600, 348874789571813074
  %1067 = xor i64 %600, -1
  %1068 = and i64 %1067, -1177109676861750764
  %1069 = and i64 %600, 1177109676861750763
  %1070 = or i64 %1068, %1069
  %1071 = xor i64 -1477916003970097978, %1070
  %1072 = xor i64 %600, -1
  %1073 = or i64 -348874789571813075, %1072
  %1074 = xor i64 %1073, -1
  %1075 = and i64 %1074, -1
  %1076 = or i64 %1071, %1075
  %1077 = sext i32 %1 to i64
  %1078 = and i64 %1077, -1198170710270896419
  %1079 = xor i64 %1077, -1
  %1080 = xor i64 -1198170710270896419, %1079
  %1081 = and i64 %1080, -1198170710270896419
  %1082 = xor i64 %1076, %1066
  %1083 = xor i64 %1082, %1081
  %1084 = xor i64 %1083, -7169247367444034638
  %1085 = xor i64 %1084, %1078
  %1086 = xor i64 %1085, %1063
  %1087 = xor i64 %1086, %1065
  %1088 = mul i64 %1062, %1087
  %1089 = trunc i64 %1088 to i32
  %1090 = mul i32 %1089, %1043
  %1091 = add i32 %1042, %1090
  %1092 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %1093 = load i32, i32* %1092, align 4
  %1094 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %1095 = load i32, i32* %1094, align 4
  %1096 = srem i32 %1093, %1095
  %1097 = select i1 %targetBlock, i32 %1091, i32 %1096
  store i32 %1097, i32* %dispatcher, align 4
  %1098 = load i8*, i8** %55, align 8
  %1099 = load i8, i8* %1098, align 1
  %1100 = and i8 %1099, 1
  %1101 = icmp eq i8 %1100, 1
  %1102 = mul i8 %1099, %1099
  %1103 = add i8 %1102, %1099
  %1104 = add i64 %48, 8878222735438549667
  %1105 = add i64 -1896169818032735485, %48
  %1106 = sub i64 %1105, 7672351520238266464
  %1107 = or i64 %48, -7237801828207542212
  %1108 = xor i64 %48, -1
  %1109 = and i64 %1108, 7771458118434847659
  %1110 = and i64 %48, -7771458118434847660
  %1111 = or i64 %1109, %1110
  %1112 = xor i64 -1128175421668050025, %1111
  %1113 = xor i64 %48, -1
  %1114 = or i64 7237801828207542211, %1113
  %1115 = xor i64 %1114, -1
  %1116 = and i64 %1115, -1
  %1117 = or i64 %1112, %1116
  %1118 = xor i64 %1117, %1106
  %1119 = xor i64 %1118, 8892226824144903543
  %1120 = xor i64 %1119, %1104
  %1121 = xor i64 %1120, %1107
  %1122 = add i64 %44, -7838444851861221355
  %1123 = xor i64 -7838444851861221355, %44
  %1124 = and i64 -7838444851861221355, %44
  %1125 = mul i64 2, %1124
  %1126 = add i64 %1123, %1125
  %1127 = and i64 %56, 8237499655610946100
  %1128 = or i64 -8237499655610946101, %56
  %1129 = sub i64 %1128, -8237499655610946101
  %1130 = sext i32 %dispatcher1 to i64
  %1131 = add i64 %1130, -5251439465128851056
  %1132 = and i64 -5251439465128851056, %1130
  %1133 = or i64 -5251439465128851056, %1130
  %1134 = add i64 %1132, %1133
  %1135 = xor i64 %1131, %1126
  %1136 = xor i64 %1135, %1122
  %1137 = xor i64 %1136, %1129
  %1138 = xor i64 %1137, %1127
  %1139 = xor i64 %1138, %1134
  %1140 = xor i64 %1139, -6553574792137992050
  %1141 = mul i64 %1121, %1140
  %1142 = trunc i64 %1141 to i8
  %1143 = srem i8 %1103, %1142
  %1144 = or i64 %44, 7466972018947916779
  %1145 = and i64 7466972018947916779, %44
  %1146 = xor i64 7466972018947916779, %44
  %1147 = or i64 %1145, %1146
  %1148 = add i64 %50, -1549007503902835341
  %1149 = and i64 -1549007503902835341, %50
  %1150 = or i64 -1549007503902835341, %50
  %1151 = add i64 %1149, %1150
  %1152 = xor i64 %1148, %1151
  %1153 = xor i64 %1152, %1147
  %1154 = xor i64 %1153, %1144
  %1155 = xor i64 %1154, 6791797842642309175
  %1156 = sext i32 %1 to i64
  %1157 = and i64 %1156, -4591919363281709057
  %1158 = xor i64 %1156, -1
  %1159 = xor i64 -4591919363281709057, %1158
  %1160 = and i64 %1159, -4591919363281709057
  %1161 = and i64 %44, 3421722884953017915
  %1162 = xor i64 %44, -1
  %1163 = or i64 -3421722884953017916, %1162
  %1164 = xor i64 %1163, -1
  %1165 = and i64 %1164, -1
  %1166 = xor i64 %1161, %1165
  %1167 = xor i64 %1166, %1157
  %1168 = xor i64 %1167, %1160
  %1169 = xor i64 %1168, 0
  %1170 = mul i64 %1155, %1169
  %1171 = trunc i64 %1170 to i8
  %1172 = icmp eq i8 %1143, %1171
  %1173 = or i1 %1101, %1172
  %1174 = and i64 %48, -1757375305350657037
  %1175 = or i64 1757375305350657036, %48
  %1176 = sub i64 %1175, 1757375305350657036
  %1177 = or i64 %50, 2579639500608350534
  %1178 = xor i64 %50, -1
  %1179 = and i64 %1178, -6638931842487880502
  %1180 = and i64 %50, 6638931842487880501
  %1181 = or i64 %1179, %1180
  %1182 = xor i64 -9218447476172169844, %1181
  %1183 = xor i64 %50, -1
  %1184 = or i64 -2579639500608350535, %1183
  %1185 = xor i64 %1184, -1
  %1186 = and i64 %1185, -1
  %1187 = or i64 %1182, %1186
  %1188 = add i64 %54, -7360982298119447850
  %1189 = sub i64 0, %54
  %1190 = sub i64 -7360982298119447850, %1189
  %1191 = xor i64 %1187, 6210364700976033699
  %1192 = xor i64 %1191, %1177
  %1193 = xor i64 %1192, %1174
  %1194 = xor i64 %1193, %1190
  %1195 = xor i64 %1194, %1176
  %1196 = xor i64 %1195, %1188
  %1197 = and i64 %56, 2794146918234243107
  %1198 = xor i64 %56, -1
  %1199 = xor i64 2794146918234243107, %1198
  %1200 = and i64 %1199, 2794146918234243107
  %1201 = sext i32 %1 to i64
  %1202 = or i64 %1201, 8346468108463589286
  %1203 = and i64 8346468108463589286, %1201
  %1204 = xor i64 8346468108463589286, %1201
  %1205 = or i64 %1203, %1204
  %1206 = add i64 %40, 6901339599404133743
  %1207 = xor i64 6901339599404133743, %40
  %1208 = and i64 6901339599404133743, %40
  %1209 = mul i64 2, %1208
  %1210 = add i64 %1207, %1209
  %1211 = xor i64 %1202, %1205
  %1212 = xor i64 %1211, 1203557802536020579
  %1213 = xor i64 %1212, %1206
  %1214 = xor i64 %1213, %1197
  %1215 = xor i64 %1214, %1200
  %1216 = xor i64 %1215, %1210
  %1217 = mul i64 %1196, %1216
  %1218 = trunc i64 %1217 to i32
  %1219 = select i1 %1173, i32 595012100, i32 %1218
  %1220 = xor i32 %1219, 13
  store i32 %1220, i32* %39, align 4
  %1221 = call i8** @bf9506738072890574186(i32* %39)
  %1222 = load i8*, i8** %1221, align 8
  indirectbr i8* %1222, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret i1 true

.exitStub5:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %1223 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %1223, align 4
  %1224 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %1224, align 4
  %1225 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %1225, align 4
  %1226 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %1226, align 4
  %1227 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %1227, align 4
  %1228 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %1229 = load i32, i32* %1228, align 4
  store i32 %1229, i32* %dispatcher, align 4
  %1230 = load i8*, i8** %41, align 8
  %1231 = load i8, i8* %1230, align 1
  %1232 = mul i8 %1231, 2
  %1233 = mul i8 %1231, 2
  %1234 = add i8 2, %1233
  %1235 = mul i8 %1232, %1234
  %1236 = add i64 %42, -3365879032884360056
  %1237 = xor i64 -3365879032884360056, %42
  %1238 = and i64 -3365879032884360056, %42
  %1239 = mul i64 2, %1238
  %1240 = add i64 %1237, %1239
  %1241 = sext i32 %1 to i64
  %1242 = add i64 %1241, -796057774856535995
  %1243 = and i64 -796057774856535995, %1241
  %1244 = or i64 -796057774856535995, %1241
  %1245 = add i64 %1243, %1244
  %1246 = xor i64 %1242, %1236
  %1247 = xor i64 %1246, 6119626522376493391
  %1248 = xor i64 %1247, %1240
  %1249 = xor i64 %1248, %1245
  %1250 = or i64 %40, 4608449975382592931
  %1251 = xor i64 %40, -1
  %1252 = and i64 %1251, -7942836765952153983
  %1253 = and i64 %40, 7942836765952153982
  %1254 = or i64 %1252, %1253
  %1255 = xor i64 -5894683195926631646, %1254
  %1256 = xor i64 %40, -1
  %1257 = or i64 -4608449975382592932, %1256
  %1258 = xor i64 %1257, -1
  %1259 = and i64 %1258, -1
  %1260 = or i64 %1255, %1259
  %1261 = add i64 %48, -3855967323450510360
  %1262 = sub i64 0, %48
  %1263 = add i64 3855967323450510360, %1262
  %1264 = sub i64 0, %1263
  %1265 = and i64 %54, 873694296109025354
  %1266 = or i64 -873694296109025355, %54
  %1267 = sub i64 %1266, -873694296109025355
  %1268 = xor i64 %1267, %1261
  %1269 = xor i64 %1268, %1265
  %1270 = xor i64 %1269, 3150019352551519932
  %1271 = xor i64 %1270, %1264
  %1272 = xor i64 %1271, %1260
  %1273 = xor i64 %1272, %1250
  %1274 = mul i64 %1249, %1273
  %1275 = trunc i64 %1274 to i8
  %1276 = srem i8 %1235, %1275
  %1277 = icmp eq i8 %1276, 0
  %1278 = mul i8 %1231, %1231
  %1279 = add i8 %1278, %1231
  %1280 = srem i8 %1279, 2
  %1281 = or i64 %40, 5454823852011609610
  %1282 = xor i64 %40, -1
  %1283 = and i64 5454823852011609610, %1282
  %1284 = add i64 %1283, %40
  %1285 = add i64 %40, 6302621747272496984
  %1286 = sub i64 0, %40
  %1287 = add i64 -6302621747272496984, %1286
  %1288 = sub i64 0, %1287
  %1289 = and i64 %54, 6166505584408294666
  %1290 = or i64 -6166505584408294667, %54
  %1291 = sub i64 %1290, -6166505584408294667
  %1292 = xor i64 %1288, %1289
  %1293 = xor i64 %1292, %1291
  %1294 = xor i64 %1293, %1281
  %1295 = xor i64 %1294, %1285
  %1296 = xor i64 %1295, %1284
  %1297 = xor i64 %1296, 4687984552094425511
  %1298 = sext i32 %1 to i64
  %1299 = or i64 %1298, 3382089923318578428
  %1300 = and i64 3382089923318578428, %1298
  %1301 = xor i64 3382089923318578428, %1298
  %1302 = or i64 %1300, %1301
  %1303 = add i64 %44, -3127779988171996185
  %1304 = add i64 -9009771248557683712, %44
  %1305 = sub i64 %1304, -5881991260385687527
  %1306 = xor i64 %1305, 0
  %1307 = xor i64 %1306, %1299
  %1308 = xor i64 %1307, %1302
  %1309 = xor i64 %1308, %1303
  %1310 = mul i64 %1297, %1309
  %1311 = trunc i64 %1310 to i8
  %1312 = icmp eq i8 %1280, %1311
  %1313 = or i1 %1277, %1312
  %1314 = select i1 %1313, i32 595012102, i32 595012104
  %1315 = xor i32 %1314, 14
  store i32 %1315, i32* %39, align 4
  %1316 = call i8** @bf9506738072890574186(i32* %39)
  %1317 = load i8*, i8** %1316, align 8
  indirectbr i8* %1317, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1318 = load i8*, i8** %53, align 8
  %1319 = load i8, i8* %1318, align 1
  %1320 = mul i8 %1319, 2
  %1321 = mul i8 %1319, 2
  %1322 = xor i8 2, %1321
  %1323 = and i8 2, %1321
  %1324 = mul i8 2, %1323
  %1325 = add i8 %1322, %1324
  %1326 = mul i8 %1320, %1325
  %1327 = srem i8 %1326, 4
  %1328 = add i64 %40, 8554729821966830843
  %1329 = xor i64 8554729821966830843, %40
  %1330 = and i64 8554729821966830843, %40
  %1331 = mul i64 2, %1330
  %1332 = add i64 %1329, %1331
  %1333 = sext i32 %1 to i64
  %1334 = add i64 %1333, 8919765231513061022
  %1335 = and i64 8919765231513061022, %1333
  %1336 = or i64 8919765231513061022, %1333
  %1337 = add i64 %1335, %1336
  %1338 = sext i32 %1 to i64
  %1339 = or i64 %1338, 5231688333384683288
  %1340 = xor i64 %1338, -1
  %1341 = and i64 5231688333384683288, %1340
  %1342 = add i64 %1341, %1338
  %1343 = xor i64 %1342, %1332
  %1344 = xor i64 %1343, %1328
  %1345 = xor i64 %1344, %1339
  %1346 = xor i64 %1345, 3385252779353850937
  %1347 = xor i64 %1346, %1337
  %1348 = xor i64 %1347, %1334
  %1349 = add i64 %42, -8838086641879536383
  %1350 = sub i64 0, %42
  %1351 = add i64 8838086641879536383, %1350
  %1352 = sub i64 0, %1351
  %1353 = add i64 %56, -4966138644510507294
  %1354 = and i64 -4966138644510507294, %56
  %1355 = or i64 -4966138644510507294, %56
  %1356 = add i64 %1354, %1355
  %1357 = and i64 %54, 7798542795920550553
  %1358 = xor i64 %54, -1
  %1359 = or i64 -7798542795920550554, %1358
  %1360 = xor i64 %1359, -1
  %1361 = and i64 %1360, -1
  %1362 = xor i64 %1361, %1353
  %1363 = xor i64 %1362, %1356
  %1364 = xor i64 %1363, %1357
  %1365 = xor i64 %1364, %1352
  %1366 = xor i64 %1365, %1349
  %1367 = xor i64 %1366, 0
  %1368 = mul i64 %1348, %1367
  %1369 = trunc i64 %1368 to i8
  %1370 = icmp eq i8 %1327, %1369
  %1371 = mul i8 %1319, %1319
  %1372 = sub i8 %1371, -66
  %1373 = add i8 %1372, %1319
  %1374 = sext i32 %1 to i64
  %1375 = or i64 %1374, 4653087467476594312
  %1376 = xor i64 %1374, -1
  %1377 = and i64 %1376, -8280053748638201328
  %1378 = and i64 %1374, 8280053748638201327
  %1379 = or i64 %1377, %1378
  %1380 = xor i64 -3637711568025361256, %1379
  %1381 = xor i64 %1374, -1
  %1382 = or i64 -4653087467476594313, %1381
  %1383 = xor i64 %1382, -1
  %1384 = and i64 %1383, -1
  %1385 = or i64 %1380, %1384
  %1386 = or i64 %54, -8070599366560339411
  %1387 = and i64 -8070599366560339411, %54
  %1388 = xor i64 -8070599366560339411, %54
  %1389 = or i64 %1387, %1388
  %1390 = sext i32 %1 to i64
  %1391 = and i64 %1390, -1783500311066861648
  %1392 = or i64 1783500311066861647, %1390
  %1393 = sub i64 %1392, 1783500311066861647
  %1394 = xor i64 %1389, %1375
  %1395 = xor i64 %1394, 8583090326518504181
  %1396 = xor i64 %1395, %1391
  %1397 = xor i64 %1396, %1385
  %1398 = xor i64 %1397, %1393
  %1399 = xor i64 %1398, %1386
  %1400 = and i64 %40, 3721747391906615956
  %1401 = xor i64 %40, -1
  %1402 = or i64 -3721747391906615957, %1401
  %1403 = xor i64 %1402, -1
  %1404 = and i64 %1403, -1
  %1405 = add i64 %54, 4250016889830719596
  %1406 = and i64 4250016889830719596, %54
  %1407 = or i64 4250016889830719596, %54
  %1408 = add i64 %1406, %1407
  %1409 = and i64 %48, 4921136729584836419
  %1410 = xor i64 %48, -1
  %1411 = xor i64 4921136729584836419, %1410
  %1412 = and i64 %1411, 4921136729584836419
  %1413 = xor i64 %1412, %1408
  %1414 = xor i64 %1413, -4133050412998032634
  %1415 = xor i64 %1414, %1405
  %1416 = xor i64 %1415, %1400
  %1417 = xor i64 %1416, %1409
  %1418 = xor i64 %1417, %1404
  %1419 = mul i64 %1399, %1418
  %1420 = trunc i64 %1419 to i8
  %1421 = add i8 %1373, %1420
  %1422 = srem i8 %1421, 2
  %1423 = icmp eq i8 %1422, 0
  %1424 = xor i1 %1423, true
  %1425 = xor i1 %1370, %1424
  %1426 = and i1 %1425, %1370
  %1427 = select i1 %1426, i32 595012101, i32 595012105
  %1428 = xor i32 %1427, -1995462415
  %1429 = xor i32 %1428, -1995462403
  store i32 %1429, i32* %39, align 4
  %1430 = call i8** @bf9506738072890574186(i32* %39)
  %1431 = load i8*, i8** %1430, align 8
  indirectbr i8* %1431, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %.split, %EntryBasicBlockSplit
  %1432 = load i8*, i8** %51, align 8
  %1433 = load i8, i8* %1432, align 1
  %1434 = mul i8 %1433, %1433
  %1435 = add i8 %1434, %1433
  %1436 = mul i8 %1435, 3
  %1437 = srem i8 %1436, 2
  %1438 = icmp eq i8 %1437, 0
  %1439 = mul i8 %1433, %1433
  %1440 = add i8 %1439, %1433
  %1441 = sext i32 %1 to i64
  %1442 = or i64 %1441, 4409888448095598542
  %1443 = and i64 4409888448095598542, %1441
  %1444 = xor i64 4409888448095598542, %1441
  %1445 = or i64 %1443, %1444
  %1446 = add i64 %56, 6459389562294239453
  %1447 = add i64 -5608388817665506498, %56
  %1448 = add i64 %1447, -6378965693749805665
  %1449 = xor i64 %1448, %1446
  %1450 = xor i64 %1449, %1442
  %1451 = xor i64 %1450, %1445
  %1452 = xor i64 %1451, 620950103134244807
  %1453 = add i64 %44, -8626956505736945827
  %1454 = add i64 -6842826525470349020, %44
  %1455 = sub i64 %1454, 1784129980266596807
  %1456 = or i64 %56, 6810504202707044605
  %1457 = and i64 6810504202707044605, %56
  %1458 = xor i64 6810504202707044605, %56
  %1459 = or i64 %1457, %1458
  %1460 = and i64 %52, -5873049120181078351
  %1461 = xor i64 %52, -1
  %1462 = xor i64 -5873049120181078351, %1461
  %1463 = and i64 %1462, -5873049120181078351
  %1464 = xor i64 -2695054281250176018, %1459
  %1465 = xor i64 %1464, %1456
  %1466 = xor i64 %1465, %1453
  %1467 = xor i64 %1466, %1455
  %1468 = xor i64 %1467, %1463
  %1469 = xor i64 %1468, %1460
  %1470 = mul i64 %1452, %1469
  %1471 = trunc i64 %1470 to i8
  %1472 = srem i8 %1440, %1471
  %1473 = icmp eq i8 %1472, 0
  %1474 = and i1 %1438, %1473
  %1475 = and i64 %56, -6652800392889368665
  %1476 = or i64 6652800392889368664, %56
  %1477 = sub i64 %1476, 6652800392889368664
  %1478 = or i64 %48, -1828560974762738636
  %1479 = xor i64 %48, -1
  %1480 = and i64 %1479, 872351883868323261
  %1481 = and i64 %48, -872351883868323262
  %1482 = or i64 %1480, %1481
  %1483 = xor i64 -1547951766639558263, %1482
  %1484 = xor i64 %48, -1
  %1485 = or i64 1828560974762738635, %1484
  %1486 = xor i64 %1485, -1
  %1487 = and i64 %1486, -1
  %1488 = or i64 %1483, %1487
  %1489 = xor i64 -1708636744692812165, %1475
  %1490 = xor i64 %1489, %1478
  %1491 = xor i64 %1490, %1488
  %1492 = xor i64 %1491, %1477
  %1493 = and i64 %52, 7012982547579856557
  %1494 = or i64 -7012982547579856558, %52
  %1495 = sub i64 %1494, -7012982547579856558
  %1496 = sext i32 %1 to i64
  %1497 = and i64 %1496, -406148899791883426
  %1498 = or i64 406148899791883425, %1496
  %1499 = sub i64 %1498, 406148899791883425
  %1500 = add i64 %50, 1978208702901123502
  %1501 = add i64 -4211082577593640536, %50
  %1502 = sub i64 %1501, -6189291280494764038
  %1503 = xor i64 %1499, %1497
  %1504 = xor i64 %1503, %1502
  %1505 = xor i64 %1504, 2363123852772797157
  %1506 = xor i64 %1505, %1500
  %1507 = xor i64 %1506, %1495
  %1508 = xor i64 %1507, %1493
  %1509 = mul i64 %1492, %1508
  %1510 = trunc i64 %1509 to i32
  %1511 = select i1 %1474, i32 595012098, i32 %1510
  %1512 = xor i32 %1511, 5
  store i32 %1512, i32* %39, align 4
  %1513 = call i8** @bf9506738072890574186(i32* %39)
  %1514 = load i8*, i8** %1513, align 8
  indirectbr i8* %1514, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.18(i32 %0, i1 %1, i1 %2, i32* %.out, i64* %.out1, i1* %.out2, i64* %.out3, i1* %.out4, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8) #1 {
entry:
  %3 = alloca i32, align 4
  %4 = call i64 @h11804894491772278134(i64 595012100)
  %5 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.18, %.loopexit.exitStub), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012097)
  %7 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %6
  store i8* blockaddress(@main_loop.extracted.18, %"2"), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012096)
  %9 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %8
  store i8* blockaddress(@main_loop.extracted.18, %BogusBasciBlock), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012102)
  %11 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %10
  store i8* blockaddress(@main_loop.extracted.18, %.exitStub), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012098)
  %13 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %12
  store i8* blockaddress(@main_loop.extracted.18, %EntryBasicBlockSplit), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012099)
  %15 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %14
  store i8* blockaddress(@main_loop.extracted.18, %codeRepl), i8** %15, align 8
  %.reg2mem20 = alloca i1, align 1
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %16 = sext i32 %0 to i64
  %17 = or i64 %16, 3366678175407466491
  %18 = xor i64 %16, -1
  %19 = and i64 %18, -6088797768370029535
  %20 = and i64 %16, 6088797768370029534
  %21 = or i64 %19, %20
  %22 = xor i64 -8847064980891886630, %21
  %23 = xor i64 %16, -1
  %24 = or i64 -3366678175407466492, %23
  %25 = xor i64 %24, -1
  %26 = and i64 %25, -1
  %27 = or i64 %22, %26
  %28 = sext i32 %0 to i64
  %29 = or i64 %28, -3573143269464819094
  %30 = and i64 -3573143269464819094, %28
  %31 = xor i64 -3573143269464819094, %28
  %32 = or i64 %30, %31
  %33 = xor i64 -5936072174772124553, %17
  %34 = xor i64 %33, %27
  %35 = xor i64 %34, %29
  %36 = xor i64 %35, %32
  %37 = sext i32 %0 to i64
  %38 = or i64 %37, 7685313239248065672
  %39 = and i64 7685313239248065672, %37
  %40 = xor i64 7685313239248065672, %37
  %41 = or i64 %39, %40
  %42 = sext i32 %0 to i64
  %43 = and i64 %42, 3421338988310220014
  %44 = or i64 -3421338988310220015, %42
  %45 = sub i64 %44, -3421338988310220015
  %46 = sext i32 %0 to i64
  %47 = or i64 %46, 1774494316133492190
  %48 = xor i64 %46, -1
  %49 = and i64 %48, -7801442734182090415
  %50 = and i64 %46, 7801442734182090414
  %51 = or i64 %49, %50
  %52 = xor i64 -8422874765000172401, %51
  %53 = xor i64 %46, -1
  %54 = or i64 -1774494316133492191, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = xor i64 %47, %41
  %59 = xor i64 %58, %45
  %60 = xor i64 %59, %38
  %61 = xor i64 %60, 3052037477007004999
  %62 = xor i64 %61, %57
  %63 = xor i64 %62, %43
  %64 = mul i64 %36, %63
  %65 = trunc i64 %64 to i32
  %.reg2mem3 = alloca i8**, i32 %65, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %66 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18, %BogusBasciBlock), i8** %66, align 8
  %67 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %67, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.18, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %68 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %68, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.18, %"2"), i8** %.reload5, align 8
  %69 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %69, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.18, %codeRepl), i8** %.reload8, align 8
  %70 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %70, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted.18, %.exitStub), i8** %.reload11, align 8
  %71 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %71, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@main_loop.extracted.18, %.loopexit.exitStub), i8** %.reload14, align 8
  %72 = alloca i64, align 8
  %73 = alloca i64, align 8
  %74 = sext i32 %0 to i64
  %75 = and i64 %74, -856598916459415943
  %76 = xor i64 %74, -1
  %77 = xor i64 -856598916459415943, %76
  %78 = and i64 %77, -856598916459415943
  %79 = sext i32 %0 to i64
  %80 = and i64 %79, -3934624709885659572
  %81 = xor i64 %79, -1
  %82 = or i64 3934624709885659571, %81
  %83 = xor i64 %82, -1
  %84 = and i64 %83, -1
  %85 = xor i64 %75, %78
  %86 = xor i64 %85, %84
  %87 = xor i64 %86, -2769941945552165123
  %88 = xor i64 %87, %80
  %89 = sext i32 %0 to i64
  %90 = or i64 %89, 5321557185933239850
  %91 = and i64 5321557185933239850, %89
  %92 = xor i64 5321557185933239850, %89
  %93 = or i64 %91, %92
  %94 = sext i32 %0 to i64
  %95 = or i64 %94, -4855666083108517720
  %96 = and i64 -4855666083108517720, %94
  %97 = xor i64 -4855666083108517720, %94
  %98 = or i64 %96, %97
  %99 = xor i64 %93, %90
  %100 = xor i64 %99, 0
  %101 = xor i64 %100, %98
  %102 = xor i64 %101, %95
  %103 = mul i64 %88, %102
  %104 = trunc i64 %103 to i1
  %105 = sext i32 %0 to i64
  %106 = add i64 %105, 3702213303153250359
  %107 = xor i64 3702213303153250359, %105
  %108 = and i64 3702213303153250359, %105
  %109 = mul i64 2, %108
  %110 = add i64 %107, %109
  %111 = sext i32 %0 to i64
  %112 = add i64 %111, -2682521375552326044
  %113 = add i64 -2511612614603785530, %111
  %114 = add i64 %113, -170908760948540514
  %115 = sext i32 %0 to i64
  %116 = and i64 %115, -8060092880733818420
  %117 = xor i64 %115, -1
  %118 = xor i64 -8060092880733818420, %117
  %119 = and i64 %118, -8060092880733818420
  %120 = xor i64 1621324328225433293, %114
  %121 = xor i64 %120, %112
  %122 = xor i64 %121, %116
  %123 = xor i64 %122, %110
  %124 = xor i64 %123, %119
  %125 = xor i64 %124, %106
  %126 = sext i32 %0 to i64
  %127 = and i64 %126, -4864186757958900873
  %128 = xor i64 %126, -1
  %129 = xor i64 -4864186757958900873, %128
  %130 = and i64 %129, -4864186757958900873
  %131 = sext i32 %0 to i64
  %132 = or i64 %131, -2042893336338011914
  %133 = and i64 -2042893336338011914, %131
  %134 = xor i64 -2042893336338011914, %131
  %135 = or i64 %133, %134
  %136 = sext i32 %0 to i64
  %137 = or i64 %136, -4900696216121500442
  %138 = xor i64 %136, -1
  %139 = and i64 -4900696216121500442, %138
  %140 = add i64 %139, %136
  %141 = xor i64 0, %135
  %142 = xor i64 %141, %132
  %143 = xor i64 %142, %127
  %144 = xor i64 %143, %137
  %145 = xor i64 %144, %130
  %146 = xor i64 %145, %140
  %147 = mul i64 %125, %146
  %148 = trunc i64 %147 to i1
  %149 = sext i32 %0 to i64
  %150 = and i64 %149, 7574243632615375968
  %151 = xor i64 %149, -1
  %152 = or i64 -7574243632615375969, %151
  %153 = xor i64 %152, -1
  %154 = and i64 %153, -1
  %155 = sext i32 %0 to i64
  %156 = and i64 %155, 2715504105218852395
  %157 = or i64 -2715504105218852396, %155
  %158 = sub i64 %157, -2715504105218852396
  %159 = sext i32 %0 to i64
  %160 = or i64 %159, 4833409461410165296
  %161 = xor i64 %159, -1
  %162 = and i64 %161, -682393314442023173
  %163 = and i64 %159, 682393314442023172
  %164 = or i64 %162, %163
  %165 = xor i64 -5362627520685826869, %164
  %166 = xor i64 %159, -1
  %167 = or i64 -4833409461410165297, %166
  %168 = xor i64 %167, -1
  %169 = and i64 %168, -1
  %170 = or i64 %165, %169
  %171 = xor i64 %160, %154
  %172 = xor i64 %171, %170
  %173 = xor i64 %172, %156
  %174 = xor i64 %173, 4703542601272208469
  %175 = xor i64 %174, %150
  %176 = xor i64 %175, %158
  %177 = sext i32 %0 to i64
  %178 = add i64 %177, 431207350848768273
  %179 = sub i64 0, %177
  %180 = sub i64 431207350848768273, %179
  %181 = sext i32 %0 to i64
  %182 = or i64 %181, 9040646463261211206
  %183 = and i64 9040646463261211206, %181
  %184 = xor i64 9040646463261211206, %181
  %185 = or i64 %183, %184
  %186 = xor i64 0, %185
  %187 = xor i64 %186, %178
  %188 = xor i64 %187, %180
  %189 = xor i64 %188, %182
  %190 = mul i64 %176, %189
  %191 = trunc i64 %190 to i1
  %192 = sext i32 %0 to i64
  %193 = and i64 %192, -7813031793558394678
  %194 = xor i64 %192, -1
  %195 = or i64 7813031793558394677, %194
  %196 = xor i64 %195, -1
  %197 = and i64 %196, -1
  %198 = sext i32 %0 to i64
  %199 = and i64 %198, -7909147456823113934
  %200 = xor i64 %198, -1
  %201 = xor i64 -7909147456823113934, %200
  %202 = and i64 %201, -7909147456823113934
  %203 = sext i32 %0 to i64
  %204 = and i64 %203, -3558952191775210974
  %205 = xor i64 %203, -1
  %206 = or i64 3558952191775210973, %205
  %207 = xor i64 %206, -1
  %208 = and i64 %207, -1
  %209 = xor i64 %208, %204
  %210 = xor i64 %209, %197
  %211 = xor i64 %210, %199
  %212 = xor i64 %211, %193
  %213 = xor i64 %212, -1120116978746574951
  %214 = xor i64 %213, %202
  %215 = sext i32 %0 to i64
  %216 = add i64 %215, -4278293173672556437
  %217 = sub i64 0, %215
  %218 = sub i64 -4278293173672556437, %217
  %219 = sext i32 %0 to i64
  %220 = and i64 %219, -9157215421449642549
  %221 = xor i64 %219, -1
  %222 = or i64 9157215421449642548, %221
  %223 = xor i64 %222, -1
  %224 = and i64 %223, -1
  %225 = sext i32 %0 to i64
  %226 = add i64 %225, -6508084459459435841
  %227 = xor i64 -6508084459459435841, %225
  %228 = and i64 -6508084459459435841, %225
  %229 = mul i64 2, %228
  %230 = add i64 %227, %229
  %231 = xor i64 %230, %218
  %232 = xor i64 %231, %224
  %233 = xor i64 %232, %220
  %234 = xor i64 %233, %226
  %235 = xor i64 %234, 0
  %236 = xor i64 %235, %216
  %237 = mul i64 %214, %236
  %238 = trunc i64 %237 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %73, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %104, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %148, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %191, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %238, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %239 = load i64, i64* %73, align 8
  %240 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6692509614401912191, i32 0, i64 %239
  store i8** %240, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %241 = load i8*, i8** %.reload, align 8
  indirectbr i8* %241, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.loopexit.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %242 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18, %BogusBasciBlock), i8** %242, align 8
  %243 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.18, %.exitStub), i8** %243, align 8
  %244 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.18, %.loopexit.exitStub), i8** %244, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %245 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %245, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.loopexit.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i1, i1, i1*, i1, i1*, i1*, i1*, i1*, i1)* @main_loop.extracted.18.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %246 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %246, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.loopexit.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %247 = srem i32 %0, 2
  store i32 %247, i32* %.out, align 4
  %248 = sub i64 93, 50
  store i64 %248, i64* %.out1, align 8
  %249 = icmp eq i32 %247, 0
  store i1 %249, i1* %.reg2mem17, align 1
  %.reload19 = load i1, i1* %.reg2mem17, align 1
  store i1 %.reload19, i1* %.out2, align 1
  %250 = mul i64 45, 64
  store i64 %250, i64* %.out3, align 8
  %251 = and i64 %14, -693749235088300660
  %252 = xor i64 %14, -1
  %253 = xor i64 -693749235088300660, %252
  %254 = and i64 %253, -693749235088300660
  %255 = add i64 %4, -2822938991751888859
  %256 = xor i64 -2822938991751888859, %4
  %257 = and i64 -2822938991751888859, %4
  %258 = mul i64 2, %257
  %259 = add i64 %256, %258
  %260 = add i64 %12, -7040111037466898004
  %261 = add i64 4718527811727847700, %12
  %262 = add i64 %261, 6688105224514805912
  %263 = xor i64 -3939970396899098837, %251
  %264 = xor i64 %263, %260
  %265 = xor i64 %264, %262
  %266 = xor i64 %265, %259
  %267 = xor i64 %266, %255
  %268 = xor i64 %267, %254
  %269 = and i64 %8, 5015915665881320336
  %270 = xor i64 %8, -1
  %271 = xor i64 5015915665881320336, %270
  %272 = and i64 %271, 5015915665881320336
  %273 = add i64 %6, 6124081571640570966
  %274 = sub i64 0, %6
  %275 = add i64 -6124081571640570966, %274
  %276 = sub i64 0, %275
  %277 = and i64 %8, -8375647414312231981
  %278 = xor i64 %8, -1
  %279 = or i64 8375647414312231980, %278
  %280 = xor i64 %279, -1
  %281 = and i64 %280, -1
  %282 = xor i64 %273, -9494139423258749
  %283 = xor i64 %282, %272
  %284 = xor i64 %283, %276
  %285 = xor i64 %284, %277
  %286 = xor i64 %285, %281
  %287 = xor i64 %286, %269
  %288 = mul i64 %268, %287
  %289 = trunc i64 %288 to i1
  %290 = xor i1 %1, %289
  store i1 %290, i1* %.reg2mem20, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %291 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %291, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.loopexit.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %72, align 8
  %292 = call i8** @lk12171961596319746782(i64* %72)
  %293 = load i8*, i8** %292, align 8
  %294 = bitcast i8* %293 to i1 (i1, i1, i1*, i1, i1*, i1*, i1*, i1*, i1)*
  %.reload18 = load i1, i1* %.reg2mem17, align 1
  %.reload21 = load i1, i1* %.reg2mem20, align 1
  %targetBlock = call i1 %294(i1 %.reload21, i1 %1, i1* %.out4, i1 %.reload18, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1 %2)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %295 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %296 = load i8*, i8** %295, align 8
  indirectbr i8* %296, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.loopexit.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.loopexit.exitStub:                               ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %297 = add i64 %10, 3262845108863846355
  %298 = sub i64 0, %10
  %299 = add i64 -3262845108863846355, %298
  %300 = sub i64 0, %299
  %301 = or i64 %239, 6233521726059977207
  %302 = and i64 6233521726059977207, %239
  %303 = xor i64 6233521726059977207, %239
  %304 = or i64 %302, %303
  %305 = sext i32 %0 to i64
  %306 = add i64 %305, 815186920989086503
  %307 = sub i64 0, %305
  %308 = sub i64 815186920989086503, %307
  %309 = xor i64 %297, %306
  %310 = xor i64 %309, %300
  %311 = xor i64 %310, %301
  %312 = xor i64 %311, %308
  %313 = xor i64 %312, -3170599065913996401
  %314 = xor i64 %313, %304
  %315 = and i64 %8, 3429574882726754668
  %316 = xor i64 %8, -1
  %317 = or i64 -3429574882726754669, %316
  %318 = xor i64 %317, -1
  %319 = and i64 %318, -1
  %320 = and i64 %14, 8448783843849491368
  %321 = xor i64 %14, -1
  %322 = or i64 -8448783843849491369, %321
  %323 = xor i64 %322, -1
  %324 = and i64 %323, -1
  %325 = add i64 %10, 1076451190581231774
  %326 = sub i64 0, %10
  %327 = add i64 -1076451190581231774, %326
  %328 = sub i64 0, %327
  %329 = xor i64 %324, %328
  %330 = xor i64 %329, %319
  %331 = xor i64 %330, %325
  %332 = xor i64 %331, %320
  %333 = xor i64 %332, %315
  %334 = xor i64 %333, 0
  %335 = mul i64 %314, %334
  %336 = trunc i64 %335 to i1
  ret i1 %336
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop..split.19() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012118)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@main_loop..split.19, %loopEnd), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012196)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop..split.19, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012158)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop..split.19, %defaultSwitchBasicBlock), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012124)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop..split.19, %.split), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012274)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main_loop..split.19, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012277)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@main_loop..split.19, %.exitStub), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012265)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@main_loop..split.19, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012265, i32* %0, align 4
  %23 = call i8** @bf777061424148142830(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = srem i32 %26, %28
  store i32 %29, i32* %dispatcher, align 4
  %30 = load i8*, i8** %12, align 8
  %31 = load i8, i8* %30, align 1
  %32 = mul i8 %31, 2
  %33 = mul i8 %31, 2
  %34 = sub i8 0, %33
  %35 = add i8 -2, %34
  %36 = sub i8 0, %35
  %37 = mul i8 %32, %36
  %38 = srem i8 %37, 4
  %39 = icmp eq i8 %38, 0
  %40 = mul i8 %31, %31
  %41 = add i8 %40, %31
  %42 = srem i8 %41, 2
  %43 = icmp eq i8 %42, 0
  %44 = and i64 %3, -1711883686872530763
  %45 = xor i64 %3, -1
  %46 = or i64 1711883686872530762, %45
  %47 = xor i64 %46, -1
  %48 = and i64 %47, -1
  %49 = or i64 %9, -355961316192827739
  %50 = and i64 -355961316192827739, %9
  %51 = xor i64 -355961316192827739, %9
  %52 = or i64 %50, %51
  %53 = xor i64 -7263938210675230219, %44
  %54 = xor i64 %53, %48
  %55 = xor i64 %54, %52
  %56 = xor i64 %55, %49
  %57 = or i64 %11, 6326554961549244186
  %58 = xor i64 %11, -1
  %59 = and i64 6326554961549244186, %58
  %60 = add i64 %59, %11
  %61 = sext i32 %dispatcher1 to i64
  %62 = or i64 %61, 8656576076494162952
  %63 = xor i64 %61, -1
  %64 = and i64 8656576076494162952, %63
  %65 = add i64 %64, %61
  %66 = add i64 %3, 3773024542354677256
  %67 = and i64 3773024542354677256, %3
  %68 = or i64 3773024542354677256, %3
  %69 = add i64 %67, %68
  %70 = xor i64 %69, %66
  %71 = xor i64 %70, %65
  %72 = xor i64 %71, %62
  %73 = xor i64 %72, %60
  %74 = xor i64 %73, %57
  %75 = xor i64 %74, 5471610913870522973
  %76 = mul i64 %56, %75
  %77 = trunc i64 %76 to i1
  %78 = xor i1 %39, %77
  %79 = xor i1 %43, true
  %80 = or i1 %78, %79
  %81 = xor i1 %80, true
  %82 = and i1 %81, true
  %83 = select i1 %82, i32 595012277, i32 595012118
  %84 = or i32 %83, 163
  %85 = and i32 %83, 163
  %86 = sub i32 %84, %85
  store i32 %86, i32* %0, align 4
  %87 = call i8** @bf777061424148142830(i32* %0)
  %88 = load i8*, i8** %87, align 8
  indirectbr i8* %88, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %89 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %92 = load i32, i32* %91, align 4
  %93 = srem i32 %90, %92
  store i32 %93, i32* %dispatcher, align 4
  %94 = load i8*, i8** %8, align 8
  %95 = load i8, i8* %94, align 1
  %96 = mul i8 %95, 2
  %97 = mul i8 %95, 2
  %98 = add i64 %5, -581894403626325673
  %99 = add i64 462675241661699621, %5
  %100 = add i64 %99, -1044569645288025294
  %101 = and i64 %13, -4939738081754087713
  %102 = xor i64 %13, -1
  %103 = or i64 4939738081754087712, %102
  %104 = xor i64 %103, -1
  %105 = and i64 %104, -1
  %106 = and i64 %9, -951335650882074288
  %107 = or i64 951335650882074287, %9
  %108 = sub i64 %107, 951335650882074287
  %109 = xor i64 %101, %106
  %110 = xor i64 %109, %108
  %111 = xor i64 %110, %105
  %112 = xor i64 %111, %98
  %113 = xor i64 %112, -9037705936393127533
  %114 = xor i64 %113, %100
  %115 = or i64 %13, 5534005904014685296
  %116 = and i64 5534005904014685296, %13
  %117 = xor i64 5534005904014685296, %13
  %118 = or i64 %116, %117
  %119 = and i64 %9, -4627793300893147265
  %120 = xor i64 %9, -1
  %121 = or i64 4627793300893147264, %120
  %122 = xor i64 %121, -1
  %123 = and i64 %122, -1
  %124 = or i64 %5, -5741064937450919031
  %125 = xor i64 %5, -1
  %126 = and i64 %125, -5707003138079657927
  %127 = and i64 %5, 5707003138079657926
  %128 = or i64 %126, %127
  %129 = xor i64 44760265219201968, %128
  %130 = xor i64 %5, -1
  %131 = or i64 5741064937450919030, %130
  %132 = xor i64 %131, -1
  %133 = and i64 %132, -1
  %134 = or i64 %129, %133
  %135 = xor i64 %123, %119
  %136 = xor i64 %135, %118
  %137 = xor i64 %136, 5170069458018343222
  %138 = xor i64 %137, %115
  %139 = xor i64 %138, %134
  %140 = xor i64 %139, %124
  %141 = mul i64 %114, %140
  %142 = trunc i64 %141 to i8
  %143 = add i8 %142, %97
  %144 = mul i8 %96, %143
  %145 = srem i8 %144, 4
  %146 = icmp eq i8 %145, 0
  %147 = mul i8 %95, %95
  %148 = mul i8 %147, %95
  %149 = add i8 %148, -19
  %150 = add i8 %149, %95
  %151 = sub i8 %150, -19
  %152 = srem i8 %151, 2
  %153 = icmp eq i8 %152, 0
  %154 = xor i1 %146, true
  %155 = xor i1 %153, true
  %156 = or i1 %154, %155
  %157 = xor i1 %156, true
  %158 = and i1 %157, true
  %159 = sext i32 %dispatcher1 to i64
  %160 = or i64 %159, 8828745568796987409
  %161 = and i64 8828745568796987409, %159
  %162 = xor i64 8828745568796987409, %159
  %163 = or i64 %161, %162
  %164 = or i64 %5, 5602838207915202966
  %165 = xor i64 %5, -1
  %166 = and i64 %165, -1642191587155232505
  %167 = and i64 %5, 1642191587155232504
  %168 = or i64 %166, %167
  %169 = xor i64 -6560472685355229039, %168
  %170 = xor i64 %5, -1
  %171 = or i64 -5602838207915202967, %170
  %172 = xor i64 %171, -1
  %173 = and i64 %172, -1
  %174 = or i64 %169, %173
  %175 = add i64 %7, 3954142694178449671
  %176 = xor i64 3954142694178449671, %7
  %177 = and i64 3954142694178449671, %7
  %178 = mul i64 2, %177
  %179 = add i64 %176, %178
  %180 = xor i64 -7502279406357476263, %164
  %181 = xor i64 %180, %163
  %182 = xor i64 %181, %174
  %183 = xor i64 %182, %160
  %184 = xor i64 %183, %179
  %185 = xor i64 %184, %175
  %186 = add i64 %11, 142707463724721364
  %187 = and i64 142707463724721364, %11
  %188 = or i64 142707463724721364, %11
  %189 = add i64 %187, %188
  %190 = and i64 %5, 5667367296849501709
  %191 = xor i64 %5, -1
  %192 = xor i64 5667367296849501709, %191
  %193 = and i64 %192, 5667367296849501709
  %194 = add i64 %5, -575957243529422773
  %195 = and i64 -575957243529422773, %5
  %196 = or i64 -575957243529422773, %5
  %197 = add i64 %195, %196
  %198 = xor i64 %194, %186
  %199 = xor i64 %198, %193
  %200 = xor i64 %199, %197
  %201 = xor i64 %200, 1603216090888849276
  %202 = xor i64 %201, %190
  %203 = xor i64 %202, %189
  %204 = mul i64 %185, %203
  %205 = trunc i64 %204 to i32
  %206 = select i1 %158, i32 %205, i32 595012118
  %207 = or i64 %11, -9068458769373933924
  %208 = xor i64 %11, -1
  %209 = and i64 -9068458769373933924, %208
  %210 = add i64 %209, %11
  %211 = sext i32 %dispatcher1 to i64
  %212 = add i64 %211, -7108112612798786905
  %213 = sub i64 0, %211
  %214 = sub i64 -7108112612798786905, %213
  %215 = and i64 %11, -4770378452015154898
  %216 = xor i64 %11, -1
  %217 = xor i64 -4770378452015154898, %216
  %218 = and i64 %217, -4770378452015154898
  %219 = xor i64 %214, -8242378860130060435
  %220 = xor i64 %219, %215
  %221 = xor i64 %220, %207
  %222 = xor i64 %221, %212
  %223 = xor i64 %222, %218
  %224 = xor i64 %223, %210
  %225 = add i64 %13, 8135663463123594870
  %226 = add i64 406539752639634084, %13
  %227 = sub i64 %226, -7729123710483960786
  %228 = add i64 %13, -9001219280251061112
  %229 = and i64 -9001219280251061112, %13
  %230 = or i64 -9001219280251061112, %13
  %231 = add i64 %229, %230
  %232 = or i64 %5, -7937045578490713958
  %233 = xor i64 %5, -1
  %234 = and i64 %233, 4998060844499531155
  %235 = and i64 %5, -4998060844499531156
  %236 = or i64 %234, %235
  %237 = xor i64 -3132993777143702263, %236
  %238 = xor i64 %5, -1
  %239 = or i64 7937045578490713957, %238
  %240 = xor i64 %239, -1
  %241 = and i64 %240, -1
  %242 = or i64 %237, %241
  %243 = xor i64 %232, %228
  %244 = xor i64 %243, %231
  %245 = xor i64 %244, %225
  %246 = xor i64 %245, -2009753960456560469
  %247 = xor i64 %246, %242
  %248 = xor i64 %247, %227
  %249 = mul i64 %224, %248
  %250 = trunc i64 %249 to i32
  %251 = xor i32 %206, %250
  %252 = xor i32 %251, 1527571909
  store i32 %252, i32* %0, align 4
  %253 = call i8** @bf777061424148142830(i32* %0)
  %254 = load i8*, i8** %253, align 8
  indirectbr i8* %254, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %255 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %255, align 4
  %256 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %256, align 4
  %257 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %257, align 4
  %258 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %258, align 4
  %259 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %260 = load i32, i32* %259, align 4
  store i32 %260, i32* %dispatcher, align 4
  %261 = load i8*, i8** %2, align 8
  %262 = load i8, i8* %261, align 1
  %263 = mul i8 %262, %262
  %264 = add i8 %263, %262
  %265 = mul i8 %264, 3
  %266 = srem i8 %265, 2
  %267 = icmp eq i8 %266, 0
  %268 = mul i8 %262, %262
  %269 = add i8 %268, %262
  %270 = srem i8 %269, 2
  %271 = icmp eq i8 %270, 0
  %272 = xor i1 %267, true
  %273 = xor i1 %271, true
  %274 = or i1 %272, %273
  %275 = xor i1 %274, true
  %276 = and i1 %275, true
  %277 = add i64 %5, -6879581388547999478
  %278 = sub i64 0, %5
  %279 = sub i64 -6879581388547999478, %278
  %280 = or i64 %5, 1289486507384632490
  %281 = xor i64 %5, -1
  %282 = and i64 1289486507384632490, %281
  %283 = add i64 %282, %5
  %284 = add i64 %7, -5940372293883797001
  %285 = xor i64 -5940372293883797001, %7
  %286 = and i64 -5940372293883797001, %7
  %287 = mul i64 2, %286
  %288 = add i64 %285, %287
  %289 = xor i64 %280, %277
  %290 = xor i64 %289, %283
  %291 = xor i64 %290, %279
  %292 = xor i64 %291, %284
  %293 = xor i64 %292, -7814320472566814785
  %294 = xor i64 %293, %288
  %295 = add i64 %3, -7874072208767572962
  %296 = add i64 3027831736549087649, %3
  %297 = sub i64 %296, -7544840128392891005
  %298 = or i64 %11, 9025973163524654327
  %299 = and i64 9025973163524654327, %11
  %300 = xor i64 9025973163524654327, %11
  %301 = or i64 %299, %300
  %302 = and i64 %5, 1647120542455853718
  %303 = xor i64 %5, -1
  %304 = or i64 -1647120542455853719, %303
  %305 = xor i64 %304, -1
  %306 = and i64 %305, -1
  %307 = xor i64 %295, %298
  %308 = xor i64 %307, %302
  %309 = xor i64 %308, %306
  %310 = xor i64 %309, %301
  %311 = xor i64 %310, %297
  %312 = xor i64 %311, -7087248708026968766
  %313 = mul i64 %294, %312
  %314 = trunc i64 %313 to i32
  %315 = select i1 %276, i32 %314, i32 595012274
  %316 = or i32 %315, 140
  %317 = add i64 %11, -8304997480515319828
  %318 = add i64 5225638041258386861, %11
  %319 = sub i64 %318, -4916108551935844927
  %320 = or i64 %7, 1813160593352715992
  %321 = and i64 1813160593352715992, %7
  %322 = xor i64 1813160593352715992, %7
  %323 = or i64 %321, %322
  %324 = xor i64 %319, %320
  %325 = xor i64 %324, %317
  %326 = xor i64 %325, -1638016027089076379
  %327 = xor i64 %326, %323
  %328 = add i64 %13, -4337043813077102550
  %329 = and i64 -4337043813077102550, %13
  %330 = or i64 -4337043813077102550, %13
  %331 = add i64 %329, %330
  %332 = or i64 %9, -444397427537180732
  %333 = xor i64 %9, -1
  %334 = and i64 -444397427537180732, %333
  %335 = add i64 %334, %9
  %336 = xor i64 %331, 8990462385206358940
  %337 = xor i64 %336, %332
  %338 = xor i64 %337, %335
  %339 = xor i64 %338, %328
  %340 = mul i64 %327, %339
  %341 = trunc i64 %340 to i32
  %342 = and i32 %315, %341
  %343 = sub i32 %316, %342
  store i32 %343, i32* %0, align 4
  %344 = call i8** @bf777061424148142830(i32* %0)
  %345 = load i8*, i8** %344, align 8
  indirectbr i8* %345, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %346 = load i8*, i8** %6, align 8
  %347 = load i8, i8* %346, align 1
  %348 = xor i8 %347, -1
  %349 = or i8 %348, -2
  %350 = xor i8 %349, -1
  %351 = and i8 %350, -1
  %352 = and i64 %3, -7261083509759764911
  %353 = xor i64 %3, -1
  %354 = xor i64 -7261083509759764911, %353
  %355 = and i64 %354, -7261083509759764911
  %356 = or i64 %5, 8844713446281600122
  %357 = and i64 8844713446281600122, %5
  %358 = xor i64 8844713446281600122, %5
  %359 = or i64 %357, %358
  %360 = add i64 %5, -80131602579607715
  %361 = and i64 -80131602579607715, %5
  %362 = or i64 -80131602579607715, %5
  %363 = add i64 %361, %362
  %364 = xor i64 %352, %359
  %365 = xor i64 %364, %363
  %366 = xor i64 %365, %360
  %367 = xor i64 %366, -3180156395832870091
  %368 = xor i64 %367, %355
  %369 = xor i64 %368, %356
  %370 = or i64 %7, -8749436080658708751
  %371 = xor i64 %7, -1
  %372 = and i64 -8749436080658708751, %371
  %373 = add i64 %372, %7
  %374 = or i64 %3, -8933842509679611126
  %375 = xor i64 %3, -1
  %376 = and i64 -8933842509679611126, %375
  %377 = add i64 %376, %3
  %378 = or i64 %9, -5390022283338484404
  %379 = and i64 -5390022283338484404, %9
  %380 = xor i64 -5390022283338484404, %9
  %381 = or i64 %379, %380
  %382 = xor i64 %373, %374
  %383 = xor i64 %382, %381
  %384 = xor i64 %383, %370
  %385 = xor i64 %384, 0
  %386 = xor i64 %385, %378
  %387 = xor i64 %386, %377
  %388 = mul i64 %369, %387
  %389 = trunc i64 %388 to i8
  %390 = icmp eq i8 %351, %389
  %391 = mul i8 %347, %347
  %392 = add i8 %391, %347
  %393 = mul i8 %392, 3
  %394 = and i64 %9, -6636273255257986473
  %395 = xor i64 %9, -1
  %396 = xor i64 -6636273255257986473, %395
  %397 = and i64 %396, -6636273255257986473
  %398 = add i64 %3, 2571146407883016919
  %399 = sub i64 0, %3
  %400 = add i64 -2571146407883016919, %399
  %401 = sub i64 0, %400
  %402 = xor i64 %397, 8363118293225890299
  %403 = xor i64 %402, %401
  %404 = xor i64 %403, %394
  %405 = xor i64 %404, %398
  %406 = add i64 %5, -1811959110120507770
  %407 = add i64 3851407341025162995, %5
  %408 = sub i64 %407, 5663366451145670765
  %409 = or i64 %1, -993542066739188334
  %410 = xor i64 %1, -1
  %411 = and i64 %410, -6795925782960583240
  %412 = and i64 %1, 6795925782960583239
  %413 = or i64 %411, %412
  %414 = xor i64 6018567498825015338, %413
  %415 = xor i64 %1, -1
  %416 = or i64 993542066739188333, %415
  %417 = xor i64 %416, -1
  %418 = and i64 %417, -1
  %419 = or i64 %414, %418
  %420 = sext i32 %dispatcher1 to i64
  %421 = or i64 %420, -4760374773467767539
  %422 = xor i64 %420, -1
  %423 = and i64 -4760374773467767539, %422
  %424 = add i64 %423, %420
  %425 = xor i64 %424, 927801916546482790
  %426 = xor i64 %425, %419
  %427 = xor i64 %426, %408
  %428 = xor i64 %427, %406
  %429 = xor i64 %428, %421
  %430 = xor i64 %429, %409
  %431 = mul i64 %405, %430
  %432 = trunc i64 %431 to i8
  %433 = srem i8 %393, %432
  %434 = icmp eq i8 %433, 0
  %435 = or i1 %390, %434
  %436 = sext i32 %dispatcher1 to i64
  %437 = add i64 %436, -2563757923816211250
  %438 = sub i64 0, %436
  %439 = sub i64 -2563757923816211250, %438
  %440 = add i64 %5, -7312662411677126117
  %441 = add i64 3315364890485515078, %5
  %442 = add i64 %441, 7818716771546910421
  %443 = and i64 %3, -5470310218734409769
  %444 = or i64 5470310218734409768, %3
  %445 = sub i64 %444, 5470310218734409768
  %446 = xor i64 %440, %442
  %447 = xor i64 %446, %443
  %448 = xor i64 %447, -6191653147764814175
  %449 = xor i64 %448, %445
  %450 = xor i64 %449, %437
  %451 = xor i64 %450, %439
  %452 = or i64 %5, 4797107631611115094
  %453 = xor i64 %5, -1
  %454 = and i64 4797107631611115094, %453
  %455 = add i64 %454, %5
  %456 = and i64 %13, -3367876569866319392
  %457 = or i64 3367876569866319391, %13
  %458 = sub i64 %457, 3367876569866319391
  %459 = xor i64 %458, -317049555127090204
  %460 = xor i64 %459, %456
  %461 = xor i64 %460, %455
  %462 = xor i64 %461, %452
  %463 = mul i64 %451, %462
  %464 = trunc i64 %463 to i32
  %465 = select i1 %435, i32 %464, i32 595012118
  %466 = xor i32 %465, -1
  %467 = and i32 %466, 521681429
  %468 = and i32 %465, -521681430
  %469 = or i32 %467, %468
  %470 = xor i32 %469, 521681511
  store i32 %470, i32* %0, align 4
  %471 = call i8** @bf777061424148142830(i32* %0)
  %472 = load i8*, i8** %471, align 8
  indirectbr i8* %472, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %473 = load i8*, i8** %2, align 8
  %474 = load i8, i8* %473, align 1
  %475 = mul i8 %474, 2
  %476 = mul i8 %474, 2
  %477 = add i8 2, %476
  %478 = mul i8 %475, %477
  %479 = or i64 %3, 6794789982125990949
  %480 = xor i64 %3, -1
  %481 = and i64 6794789982125990949, %480
  %482 = add i64 %481, %3
  %483 = and i64 %1, 6796608667275859896
  %484 = xor i64 %1, -1
  %485 = or i64 -6796608667275859897, %484
  %486 = xor i64 %485, -1
  %487 = and i64 %486, -1
  %488 = xor i64 %479, -3498694267687436535
  %489 = xor i64 %488, %482
  %490 = xor i64 %489, %483
  %491 = xor i64 %490, %487
  %492 = or i64 %3, -4848316390913772568
  %493 = and i64 -4848316390913772568, %3
  %494 = xor i64 -4848316390913772568, %3
  %495 = or i64 %493, %494
  %496 = and i64 %11, -7529083228369922613
  %497 = xor i64 %11, -1
  %498 = xor i64 -7529083228369922613, %497
  %499 = and i64 %498, -7529083228369922613
  %500 = sext i32 %dispatcher1 to i64
  %501 = or i64 %500, -6389439648038112619
  %502 = and i64 -6389439648038112619, %500
  %503 = xor i64 -6389439648038112619, %500
  %504 = or i64 %502, %503
  %505 = xor i64 %496, %492
  %506 = xor i64 %505, %495
  %507 = xor i64 %506, %504
  %508 = xor i64 %507, %501
  %509 = xor i64 %508, 6891237834490313956
  %510 = xor i64 %509, %499
  %511 = mul i64 %491, %510
  %512 = trunc i64 %511 to i8
  %513 = srem i8 %478, %512
  %514 = icmp eq i8 %513, 0
  %515 = mul i8 %474, %474
  %516 = add i8 %515, %474
  %517 = srem i8 %516, 2
  %518 = icmp eq i8 %517, 0
  %519 = and i1 %514, %518
  %520 = or i64 %13, 7366960989109311289
  %521 = xor i64 %13, -1
  %522 = and i64 7366960989109311289, %521
  %523 = add i64 %522, %13
  %524 = add i64 %13, 5572859307512180255
  %525 = sub i64 0, %13
  %526 = sub i64 5572859307512180255, %525
  %527 = xor i64 %524, %523
  %528 = xor i64 %527, %526
  %529 = xor i64 %528, -3160478009668306621
  %530 = xor i64 %529, %520
  %531 = and i64 %3, 7288541222856781169
  %532 = xor i64 %3, -1
  %533 = or i64 -7288541222856781170, %532
  %534 = xor i64 %533, -1
  %535 = and i64 %534, -1
  %536 = add i64 %1, -8920815049142635756
  %537 = sub i64 0, %1
  %538 = sub i64 -8920815049142635756, %537
  %539 = or i64 %7, -4292871295512783354
  %540 = xor i64 %7, -1
  %541 = and i64 -4292871295512783354, %540
  %542 = add i64 %541, %7
  %543 = xor i64 -3464915898291755101, %538
  %544 = xor i64 %543, %531
  %545 = xor i64 %544, %542
  %546 = xor i64 %545, %535
  %547 = xor i64 %546, %536
  %548 = xor i64 %547, %539
  %549 = mul i64 %530, %548
  %550 = trunc i64 %549 to i32
  %551 = and i64 %7, 5179336059563921690
  %552 = xor i64 %7, -1
  %553 = xor i64 5179336059563921690, %552
  %554 = and i64 %553, 5179336059563921690
  %555 = add i64 %7, 1158332281360559010
  %556 = sub i64 0, %7
  %557 = sub i64 1158332281360559010, %556
  %558 = and i64 %3, 2150435921510042534
  %559 = or i64 -2150435921510042535, %3
  %560 = sub i64 %559, -2150435921510042535
  %561 = xor i64 %551, %557
  %562 = xor i64 %561, 277791876439594847
  %563 = xor i64 %562, %555
  %564 = xor i64 %563, %558
  %565 = xor i64 %564, %554
  %566 = xor i64 %565, %560
  %567 = add i64 %5, 8228598505664387854
  %568 = sub i64 0, %5
  %569 = sub i64 8228598505664387854, %568
  %570 = add i64 %9, -8532554648099874111
  %571 = add i64 -2916038737885481585, %9
  %572 = add i64 %571, -5616515910214392526
  %573 = xor i64 %572, %570
  %574 = xor i64 %573, %567
  %575 = xor i64 %574, %569
  %576 = xor i64 %575, 3430082500654293751
  %577 = mul i64 %566, %576
  %578 = trunc i64 %577 to i32
  %579 = select i1 %519, i32 %550, i32 %578
  %580 = xor i32 %579, -1
  %581 = add i64 %5, -5015067887675278627
  %582 = add i64 -4867239319862899851, %5
  %583 = sub i64 %582, 147828567812378776
  %584 = add i64 %11, -4946543358315092806
  %585 = add i64 -2679172452829811272, %11
  %586 = add i64 %585, -2267370905485281534
  %587 = xor i64 %586, %584
  %588 = xor i64 %587, %583
  %589 = xor i64 %588, 4204003613730999443
  %590 = xor i64 %589, %581
  %591 = and i64 %9, -236474338936550677
  %592 = xor i64 %9, -1
  %593 = xor i64 -236474338936550677, %592
  %594 = and i64 %593, -236474338936550677
  %595 = and i64 %9, 4414701052853116
  %596 = or i64 -4414701052853117, %9
  %597 = sub i64 %596, -4414701052853117
  %598 = and i64 %1, 1329837438858532955
  %599 = or i64 -1329837438858532956, %1
  %600 = sub i64 %599, -1329837438858532956
  %601 = xor i64 %598, %591
  %602 = xor i64 %601, 0
  %603 = xor i64 %602, %600
  %604 = xor i64 %603, %594
  %605 = xor i64 %604, %595
  %606 = xor i64 %605, %597
  %607 = mul i64 %590, %606
  %608 = trunc i64 %607 to i32
  %609 = and i32 %580, %608
  %610 = and i64 %3, 1133979502167183066
  %611 = xor i64 %3, -1
  %612 = xor i64 1133979502167183066, %611
  %613 = and i64 %612, 1133979502167183066
  %614 = and i64 %9, 952316885114850185
  %615 = or i64 -952316885114850186, %9
  %616 = sub i64 %615, -952316885114850186
  %617 = or i64 %1, -8764442790499780144
  %618 = and i64 -8764442790499780144, %1
  %619 = xor i64 -8764442790499780144, %1
  %620 = or i64 %618, %619
  %621 = xor i64 %616, %620
  %622 = xor i64 %621, %614
  %623 = xor i64 %622, -4368455261218942335
  %624 = xor i64 %623, %610
  %625 = xor i64 %624, %613
  %626 = xor i64 %625, %617
  %627 = or i64 %7, -4300549440352103144
  %628 = and i64 -4300549440352103144, %7
  %629 = xor i64 -4300549440352103144, %7
  %630 = or i64 %628, %629
  %631 = or i64 %13, 2978462608562389897
  %632 = and i64 2978462608562389897, %13
  %633 = xor i64 2978462608562389897, %13
  %634 = or i64 %632, %633
  %635 = add i64 %5, 6218350227166490621
  %636 = sub i64 0, %5
  %637 = sub i64 6218350227166490621, %636
  %638 = xor i64 %634, %631
  %639 = xor i64 %638, %635
  %640 = xor i64 %639, %627
  %641 = xor i64 %640, -6362606789382008193
  %642 = xor i64 %641, %637
  %643 = xor i64 %642, %630
  %644 = mul i64 %626, %643
  %645 = trunc i64 %644 to i32
  %646 = and i32 %579, %645
  %647 = or i32 %609, %646
  store i32 %647, i32* %0, align 4
  %648 = call i8** @bf777061424148142830(i32* %0)
  %649 = load i8*, i8** %648, align 8
  indirectbr i8* %649, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.20(i32 %0, i1 %1, i32* %.out, i32* %.out1, i32* %.out2, i32* %.out3, i1* %.out4, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012098)
  %4 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable2201829288081703202, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.20, %codeRepl), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012097)
  %6 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable2201829288081703202, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.20, %"2"), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012100)
  %8 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable2201829288081703202, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012101)
  %10 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable2201829288081703202, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.20, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012099)
  %12 = getelementptr [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable2201829288081703202, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.20, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %13 = sext i32 %0 to i64
  %14 = or i64 %13, -6313704614359587833
  %15 = xor i64 %13, -1
  %16 = and i64 %15, -3890212816240463181
  %17 = and i64 %13, 3890212816240463180
  %18 = or i64 %16, %17
  %19 = xor i64 7089236549254682292, %18
  %20 = xor i64 %13, -1
  %21 = or i64 6313704614359587832, %20
  %22 = xor i64 %21, -1
  %23 = and i64 %22, -1
  %24 = or i64 %19, %23
  %25 = sext i32 %0 to i64
  %26 = and i64 %25, 5953341176994942986
  %27 = or i64 -5953341176994942987, %25
  %28 = sub i64 %27, -5953341176994942987
  %29 = xor i64 -5256784904189062439, %26
  %30 = xor i64 %29, %14
  %31 = xor i64 %30, %24
  %32 = xor i64 %31, %28
  %33 = sext i32 %0 to i64
  %34 = or i64 %33, 83707385564386173
  %35 = and i64 83707385564386173, %33
  %36 = xor i64 83707385564386173, %33
  %37 = or i64 %35, %36
  %38 = sext i32 %0 to i64
  %39 = and i64 %38, 6390095596224184990
  %40 = xor i64 %38, -1
  %41 = or i64 -6390095596224184991, %40
  %42 = xor i64 %41, -1
  %43 = and i64 %42, -1
  %44 = sext i32 %0 to i64
  %45 = or i64 %44, 8899606087906472712
  %46 = and i64 8899606087906472712, %44
  %47 = xor i64 8899606087906472712, %44
  %48 = or i64 %46, %47
  %49 = xor i64 %37, %48
  %50 = xor i64 %49, %45
  %51 = xor i64 %50, -6481963552220607127
  %52 = xor i64 %51, %39
  %53 = xor i64 %52, %43
  %54 = xor i64 %53, %34
  %55 = mul i64 %32, %54
  %56 = trunc i64 %55 to i32
  %.reg2mem6 = alloca i8**, i32 %56, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20, %BogusBasciBlock), i8** %57, align 8
  %58 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %58, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.20, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %59 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %59, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.20, %"2"), i8** %.reload5, align 8
  %60 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %60, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.20, %codeRepl), i8** %.reload8, align 8
  %61 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %61, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub), i8** %.reload11, align 8
  %62 = alloca i64, align 8
  %63 = alloca i64, align 8
  %64 = sext i32 %0 to i64
  %65 = add i64 %64, 1489185150729601258
  %66 = sub i64 0, %64
  %67 = sub i64 1489185150729601258, %66
  %68 = sext i32 %0 to i64
  %69 = add i64 %68, -2910140540154081744
  %70 = add i64 5076397518527825552, %68
  %71 = sub i64 %70, 7986538058681907296
  %72 = xor i64 %67, 359572553983417003
  %73 = xor i64 %72, %65
  %74 = xor i64 %73, %71
  %75 = xor i64 %74, %69
  %76 = sext i32 %0 to i64
  %77 = add i64 %76, -3608530518342754433
  %78 = sub i64 0, %76
  %79 = add i64 3608530518342754433, %78
  %80 = sub i64 0, %79
  %81 = sext i32 %0 to i64
  %82 = and i64 %81, -1888201896986148543
  %83 = xor i64 %81, -1
  %84 = xor i64 -1888201896986148543, %83
  %85 = and i64 %84, -1888201896986148543
  %86 = sext i32 %0 to i64
  %87 = and i64 %86, -4619836893131054032
  %88 = xor i64 %86, -1
  %89 = xor i64 -4619836893131054032, %88
  %90 = and i64 %89, -4619836893131054032
  %91 = xor i64 %87, %90
  %92 = xor i64 %91, 0
  %93 = xor i64 %92, %85
  %94 = xor i64 %93, %82
  %95 = xor i64 %94, %77
  %96 = xor i64 %95, %80
  %97 = mul i64 %75, %96
  %98 = trunc i64 %97 to i1
  %99 = sext i32 %0 to i64
  %100 = add i64 %99, 1969609062818923275
  %101 = sub i64 0, %99
  %102 = add i64 -1969609062818923275, %101
  %103 = sub i64 0, %102
  %104 = sext i32 %0 to i64
  %105 = and i64 %104, -5086340008580947152
  %106 = xor i64 %104, -1
  %107 = xor i64 -5086340008580947152, %106
  %108 = and i64 %107, -5086340008580947152
  %109 = xor i64 -6869164844194673107, %100
  %110 = xor i64 %109, %103
  %111 = xor i64 %110, %108
  %112 = xor i64 %111, %105
  %113 = sext i32 %0 to i64
  %114 = or i64 %113, 1848101156537665164
  %115 = and i64 1848101156537665164, %113
  %116 = xor i64 1848101156537665164, %113
  %117 = or i64 %115, %116
  %118 = sext i32 %0 to i64
  %119 = or i64 %118, 6677624698979491204
  %120 = xor i64 %118, -1
  %121 = and i64 %120, 6037732579146033677
  %122 = and i64 %118, -6037732579146033678
  %123 = or i64 %121, %122
  %124 = xor i64 1108419330401466249, %123
  %125 = xor i64 %118, -1
  %126 = or i64 -6677624698979491205, %125
  %127 = xor i64 %126, -1
  %128 = and i64 %127, -1
  %129 = or i64 %124, %128
  %130 = xor i64 %117, %114
  %131 = xor i64 %130, %119
  %132 = xor i64 %131, %129
  %133 = xor i64 %132, 0
  %134 = mul i64 %112, %133
  %135 = trunc i64 %134 to i32
  %136 = sext i32 %0 to i64
  %137 = and i64 %136, -1305764455681197414
  %138 = or i64 1305764455681197413, %136
  %139 = sub i64 %138, 1305764455681197413
  %140 = sext i32 %0 to i64
  %141 = or i64 %140, 2928778795985848062
  %142 = xor i64 %140, -1
  %143 = and i64 %142, 8537564302731052211
  %144 = and i64 %140, -8537564302731052212
  %145 = or i64 %143, %144
  %146 = xor i64 6836070282352509517, %145
  %147 = xor i64 %140, -1
  %148 = or i64 -2928778795985848063, %147
  %149 = xor i64 %148, -1
  %150 = and i64 %149, -1
  %151 = or i64 %146, %150
  %152 = sext i32 %0 to i64
  %153 = add i64 %152, -7228387917299478459
  %154 = xor i64 -7228387917299478459, %152
  %155 = and i64 -7228387917299478459, %152
  %156 = mul i64 2, %155
  %157 = add i64 %154, %156
  %158 = xor i64 %151, %137
  %159 = xor i64 %158, %139
  %160 = xor i64 %159, %153
  %161 = xor i64 %160, -7164971161372871297
  %162 = xor i64 %161, %157
  %163 = xor i64 %162, %141
  %164 = sext i32 %0 to i64
  %165 = and i64 %164, -3999379496548157177
  %166 = xor i64 %164, -1
  %167 = xor i64 -3999379496548157177, %166
  %168 = and i64 %167, -3999379496548157177
  %169 = sext i32 %0 to i64
  %170 = or i64 %169, 911323627838612537
  %171 = xor i64 %169, -1
  %172 = and i64 911323627838612537, %171
  %173 = add i64 %172, %169
  %174 = xor i64 %173, %165
  %175 = xor i64 %174, %170
  %176 = xor i64 %175, %168
  %177 = xor i64 %176, 0
  %178 = mul i64 %163, %177
  %179 = trunc i64 %178 to i1
  %180 = sext i32 %0 to i64
  %181 = and i64 %180, -1303198477954267577
  %182 = xor i64 %180, -1
  %183 = xor i64 -1303198477954267577, %182
  %184 = and i64 %183, -1303198477954267577
  %185 = sext i32 %0 to i64
  %186 = or i64 %185, -204680526088996603
  %187 = xor i64 %185, -1
  %188 = and i64 %187, -3141125650027880756
  %189 = and i64 %185, 3141125650027880755
  %190 = or i64 %188, %189
  %191 = xor i64 2972568135401351113, %190
  %192 = xor i64 %185, -1
  %193 = or i64 204680526088996602, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = or i64 %191, %195
  %197 = sext i32 %0 to i64
  %198 = and i64 %197, 2807139760874456692
  %199 = xor i64 %197, -1
  %200 = or i64 -2807139760874456693, %199
  %201 = xor i64 %200, -1
  %202 = and i64 %201, -1
  %203 = xor i64 %198, -6046804579656446325
  %204 = xor i64 %203, %184
  %205 = xor i64 %204, %186
  %206 = xor i64 %205, %196
  %207 = xor i64 %206, %202
  %208 = xor i64 %207, %181
  %209 = sext i32 %0 to i64
  %210 = or i64 %209, 6047073485619224607
  %211 = and i64 6047073485619224607, %209
  %212 = xor i64 6047073485619224607, %209
  %213 = or i64 %211, %212
  %214 = sext i32 %0 to i64
  %215 = or i64 %214, 2446144789371858900
  %216 = and i64 2446144789371858900, %214
  %217 = xor i64 2446144789371858900, %214
  %218 = or i64 %216, %217
  %219 = xor i64 %213, %210
  %220 = xor i64 %219, %218
  %221 = xor i64 %220, %215
  %222 = xor i64 %221, 0
  %223 = mul i64 %208, %222
  %224 = sext i32 %0 to i64
  %225 = add i64 %224, 6590601997176108662
  %226 = add i64 5867968273076926396, %224
  %227 = sub i64 %226, -722633724099182266
  %228 = sext i32 %0 to i64
  %229 = add i64 %228, -1806882289233146262
  %230 = add i64 -4877507325503897264, %228
  %231 = sub i64 %230, -3070625036270751002
  %232 = xor i64 %225, %231
  %233 = xor i64 %232, %227
  %234 = xor i64 %233, %229
  %235 = xor i64 %234, -779673151625374813
  %236 = sext i32 %0 to i64
  %237 = or i64 %236, -29374119680026317
  %238 = xor i64 %236, -1
  %239 = and i64 -29374119680026317, %238
  %240 = add i64 %239, %236
  %241 = sext i32 %0 to i64
  %242 = add i64 %241, -2113297636561403415
  %243 = sub i64 0, %241
  %244 = sub i64 -2113297636561403415, %243
  %245 = sext i32 %0 to i64
  %246 = or i64 %245, 9070529239878705705
  %247 = and i64 9070529239878705705, %245
  %248 = xor i64 9070529239878705705, %245
  %249 = or i64 %247, %248
  %250 = xor i64 %249, %246
  %251 = xor i64 %250, %244
  %252 = xor i64 %251, 0
  %253 = xor i64 %252, %240
  %254 = xor i64 %253, %242
  %255 = xor i64 %254, %237
  %256 = mul i64 %235, %255
  %257 = trunc i64 %256 to i1
  %258 = sext i32 %0 to i64
  %259 = or i64 %258, 5221407788248783269
  %260 = xor i64 %258, -1
  %261 = and i64 5221407788248783269, %260
  %262 = add i64 %261, %258
  %263 = sext i32 %0 to i64
  %264 = and i64 %263, -4119868474923477873
  %265 = xor i64 %263, -1
  %266 = xor i64 -4119868474923477873, %265
  %267 = and i64 %266, -4119868474923477873
  %268 = sext i32 %0 to i64
  %269 = or i64 %268, 4114493248227481018
  %270 = xor i64 %268, -1
  %271 = and i64 %270, -3642681525465184327
  %272 = and i64 %268, 3642681525465184326
  %273 = or i64 %271, %272
  %274 = xor i64 -834566998660574717, %273
  %275 = xor i64 %268, -1
  %276 = or i64 -4114493248227481019, %275
  %277 = xor i64 %276, -1
  %278 = and i64 %277, -1
  %279 = or i64 %274, %278
  %280 = xor i64 %264, %279
  %281 = xor i64 %280, %269
  %282 = xor i64 %281, %262
  %283 = xor i64 %282, 1628960907193611261
  %284 = xor i64 %283, %267
  %285 = xor i64 %284, %259
  %286 = sext i32 %0 to i64
  %287 = add i64 %286, 5610725328571464556
  %288 = and i64 5610725328571464556, %286
  %289 = or i64 5610725328571464556, %286
  %290 = add i64 %288, %289
  %291 = sext i32 %0 to i64
  %292 = or i64 %291, -7972503285598105219
  %293 = xor i64 %291, -1
  %294 = and i64 %293, 2660412757741751645
  %295 = and i64 %291, -2660412757741751646
  %296 = or i64 %294, %295
  %297 = xor i64 -5354685610498515936, %296
  %298 = xor i64 %291, -1
  %299 = or i64 7972503285598105218, %298
  %300 = xor i64 %299, -1
  %301 = and i64 %300, -1
  %302 = or i64 %297, %301
  %303 = sext i32 %0 to i64
  %304 = add i64 %303, 7756885320872557384
  %305 = sub i64 0, %303
  %306 = add i64 -7756885320872557384, %305
  %307 = sub i64 0, %306
  %308 = xor i64 %304, %302
  %309 = xor i64 %308, %307
  %310 = xor i64 %309, %287
  %311 = xor i64 %310, 0
  %312 = xor i64 %311, %290
  %313 = xor i64 %312, %292
  %314 = mul i64 %285, %313
  %315 = trunc i64 %314 to i1
  %316 = sext i32 %0 to i64
  %317 = add i64 %316, 4425787729432862081
  %318 = sub i64 0, %316
  %319 = sub i64 4425787729432862081, %318
  %320 = sext i32 %0 to i64
  %321 = add i64 %320, -6224163733070433555
  %322 = add i64 -1686604548701767145, %320
  %323 = add i64 %322, -4537559184368666410
  %324 = xor i64 %321, 5840116802457704699
  %325 = xor i64 %324, %323
  %326 = xor i64 %325, %317
  %327 = xor i64 %326, %319
  %328 = sext i32 %0 to i64
  %329 = add i64 %328, -1886032256991190694
  %330 = sub i64 0, %328
  %331 = add i64 1886032256991190694, %330
  %332 = sub i64 0, %331
  %333 = sext i32 %0 to i64
  %334 = or i64 %333, -6188066218885789263
  %335 = and i64 -6188066218885789263, %333
  %336 = xor i64 -6188066218885789263, %333
  %337 = or i64 %335, %336
  %338 = sext i32 %0 to i64
  %339 = or i64 %338, -4148580847387958469
  %340 = and i64 -4148580847387958469, %338
  %341 = xor i64 -4148580847387958469, %338
  %342 = or i64 %340, %341
  %343 = xor i64 %339, %332
  %344 = xor i64 %343, %334
  %345 = xor i64 %344, %342
  %346 = xor i64 %345, 0
  %347 = xor i64 %346, %329
  %348 = xor i64 %347, %337
  %349 = mul i64 %327, %348
  %350 = trunc i64 %349 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %63, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %98, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %135, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %179, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %223, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %257, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %315, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 %350, i1* null, i1* null)
  %351 = load i64, i64* %63, align 8
  %352 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12181580443857829625, i32 0, i64 %351
  store i8** %352, i8*** %.reg2mem12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %353 = load i8*, i8** %.reload, align 8
  indirectbr i8* %353, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %354 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20, %BogusBasciBlock), i8** %354, align 8
  %355 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.20, %.exitStub), i8** %355, align 8
  %356 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.20, %EntryBasicBlockSplit), i8** %356, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %357 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %357, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  store i8* bitcast (void (i32, i32*, i1*, i1, i1*, i1*, i1*, i1*, i1*)* @main_loop.extracted.20.extracted to i8*), i8** %.reload13, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %358 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %358, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %359 = mul i32 %0, %0
  store i32 %359, i32* %.out, align 4
  %360 = mul i32 %359, %0
  store i32 %360, i32* %.out1, align 4
  %361 = add i32 %360, %0
  store i32 %361, i32* %.out2, align 4
  %362 = srem i32 %361, 2
  store i32 %362, i32* %.reg2mem14, align 4
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %363 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %363, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %62, align 8
  %364 = call i8** @lk15309315699111240189(i64* %62)
  %365 = load i8*, i8** %364, align 8
  %366 = bitcast i8* %365 to void (i32, i32*, i1*, i1, i1*, i1*, i1*, i1*, i1*)*
  %.reload15 = load i32, i32* %.reg2mem14, align 4
  call void %366(i32 %.reload15, i32* %.out3, i1* %.out4, i1 %1, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %367 = load i8*, i8** %.reload10, align 8
  indirectbr i8* %367, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.21(i32* %.out, i32* %.out1, i32* %.out2) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012097)
  %2 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.21, %defaultSwitchBasicBlock), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012104)
  %4 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.21, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012100)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.21, %loopStart), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012101)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.21, %125), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012102)
  %10 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.21, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012098)
  %12 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.21, %.exitStub), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012096)
  %14 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %13
  store i8* blockaddress(@main_loop.extracted.21, %loopEnd), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012103)
  %16 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %15
  store i8* blockaddress(@main_loop.extracted.21, %codeRepl), i8** %16, align 8
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %17 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %17, align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %25, align 4
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %27, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10990634260413618745, i32 0, i64 %28
  store i8** %29, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012100, i32* %0, align 4
  %30 = call i8** @bf17974093100361806345(i32* %0)
  %31 = load i8*, i8** %30, align 8
  indirectbr i8* %31, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %125
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (void ()* @main_loop.extracted.21.extracted to i8*), i8** %.reload, align 8
  %32 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %35 = load i32, i32* %34, align 4
  %36 = sub i32 %33, %35
  store i32 %36, i32* %dispatcher, align 4
  %37 = load i8*, i8** %6, align 8
  %38 = load i8, i8* %37, align 1
  %39 = mul i8 %38, %38
  %40 = add i8 %39, %38
  %41 = add i64 %15, 3027901406654021415
  %42 = sub i64 0, %15
  %43 = add i64 -3027901406654021415, %42
  %44 = sub i64 0, %43
  %45 = add i64 %1, -1662214418612483280
  %46 = sub i64 0, %1
  %47 = sub i64 -1662214418612483280, %46
  %48 = xor i64 %41, 1197003895118501455
  %49 = xor i64 %48, %47
  %50 = xor i64 %49, %44
  %51 = xor i64 %50, %45
  %52 = add i64 %5, 8859502762697439267
  %53 = and i64 8859502762697439267, %5
  %54 = or i64 8859502762697439267, %5
  %55 = add i64 %53, %54
  %56 = or i64 %1, -4036772846592525951
  %57 = xor i64 %1, -1
  %58 = and i64 -4036772846592525951, %57
  %59 = add i64 %58, %1
  %60 = xor i64 %59, -5645766315020533235
  %61 = xor i64 %60, %52
  %62 = xor i64 %61, %56
  %63 = xor i64 %62, %55
  %64 = mul i64 %51, %63
  %65 = trunc i64 %64 to i8
  %66 = mul i8 %40, %65
  %67 = srem i8 %66, 2
  %68 = icmp eq i8 %67, 0
  %69 = mul i8 %38, %38
  %70 = add i8 %69, %38
  %71 = srem i8 %70, 2
  %72 = icmp eq i8 %71, 0
  %73 = xor i1 %68, true
  %74 = or i1 %73, %72
  %75 = xor i1 %68, true
  %76 = sub i1 %74, %75
  %77 = and i64 %5, 5584347180241880399
  %78 = or i64 -5584347180241880400, %5
  %79 = sub i64 %78, -5584347180241880400
  %80 = or i64 %11, 4182720205006260807
  %81 = xor i64 %11, -1
  %82 = and i64 4182720205006260807, %81
  %83 = add i64 %82, %11
  %84 = or i64 %7, 6554441514618619269
  %85 = and i64 6554441514618619269, %7
  %86 = xor i64 6554441514618619269, %7
  %87 = or i64 %85, %86
  %88 = xor i64 %83, -8345006539632247951
  %89 = xor i64 %88, %77
  %90 = xor i64 %89, %80
  %91 = xor i64 %90, %84
  %92 = xor i64 %91, %79
  %93 = xor i64 %92, %87
  %94 = and i64 %7, -75516763798019274
  %95 = xor i64 %7, -1
  %96 = xor i64 -75516763798019274, %95
  %97 = and i64 %96, -75516763798019274
  %98 = or i64 %1, -7040085812246959133
  %99 = xor i64 %1, -1
  %100 = and i64 -7040085812246959133, %99
  %101 = add i64 %100, %1
  %102 = or i64 %13, -645379970022309496
  %103 = xor i64 %13, -1
  %104 = and i64 %103, 7518168240580668935
  %105 = and i64 %13, -7518168240580668936
  %106 = or i64 %104, %105
  %107 = xor i64 -6962916349542387825, %106
  %108 = xor i64 %13, -1
  %109 = or i64 645379970022309495, %108
  %110 = xor i64 %109, -1
  %111 = and i64 %110, -1
  %112 = or i64 %107, %111
  %113 = xor i64 -6206418176552416768, %97
  %114 = xor i64 %113, %101
  %115 = xor i64 %114, %94
  %116 = xor i64 %115, %112
  %117 = xor i64 %116, %98
  %118 = xor i64 %117, %102
  %119 = mul i64 %93, %118
  %120 = trunc i64 %119 to i32
  %121 = select i1 %76, i32 595012103, i32 %120
  %122 = xor i32 %121, 7
  store i32 %122, i32* %0, align 4
  %123 = call i8** @bf17974093100361806345(i32* %0)
  %124 = load i8*, i8** %123, align 8
  indirectbr i8* %124, [label %loopEnd, label %EntryBasicBlockSplit]

125:                                              ; preds = %125, %loopStart
  %126 = sub i32 304496159, 304496027
  store i32 %126, i32* %.out, align 4
  %127 = sub i32 1127702153, 1127702037
  store i32 %127, i32* %.out1, align 4
  %128 = or i64 %11, -5371659168537960225
  %129 = and i64 -5371659168537960225, %11
  %130 = xor i64 -5371659168537960225, %11
  %131 = or i64 %129, %130
  %132 = or i64 %28, 8124960169473227233
  %133 = and i64 8124960169473227233, %28
  %134 = xor i64 8124960169473227233, %28
  %135 = or i64 %133, %134
  %136 = or i64 %15, 900020415011429520
  %137 = and i64 900020415011429520, %15
  %138 = xor i64 900020415011429520, %15
  %139 = or i64 %137, %138
  %140 = xor i64 %139, %136
  %141 = xor i64 %140, %128
  %142 = xor i64 %141, %131
  %143 = xor i64 %142, %135
  %144 = xor i64 %143, %132
  %145 = xor i64 %144, -173577888325881891
  %146 = or i64 %5, 8366811708607236407
  %147 = xor i64 %5, -1
  %148 = and i64 %147, 7286813879235595670
  %149 = and i64 %5, -7286813879235595671
  %150 = or i64 %148, %149
  %151 = xor i64 1225846023870760097, %150
  %152 = xor i64 %5, -1
  %153 = or i64 -8366811708607236408, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = or i64 %151, %155
  %157 = add i64 %28, 5519791844496798041
  %158 = xor i64 5519791844496798041, %28
  %159 = and i64 5519791844496798041, %28
  %160 = mul i64 2, %159
  %161 = add i64 %158, %160
  %162 = add i64 %5, 819759352802246982
  %163 = add i64 1053996266931496189, %5
  %164 = sub i64 %163, 234236914129249207
  %165 = xor i64 %164, %162
  %166 = xor i64 %165, %161
  %167 = xor i64 %166, %157
  %168 = xor i64 %167, 7158082953231390541
  %169 = xor i64 %168, %146
  %170 = xor i64 %169, %156
  %171 = mul i64 %145, %170
  %172 = trunc i64 %171 to i32
  %173 = sdiv i32 49, %172
  store i32 %173, i32* %.out2, align 4
  %174 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %177 = load i32, i32* %176, align 4
  %178 = add i32 %175, %177
  store i32 %178, i32* %dispatcher, align 4
  %179 = load i8*, i8** %6, align 8
  %180 = load i8, i8* %179, align 1
  %181 = xor i8 %180, -2
  %182 = and i8 %181, %180
  %183 = icmp eq i8 %182, 0
  %184 = mul i8 %180, %180
  %185 = add i8 %184, %180
  %186 = mul i8 %185, 3
  %187 = srem i8 %186, 2
  %188 = icmp eq i8 %187, 0
  %189 = or i1 %183, %188
  %190 = or i64 %13, -2833642567189666507
  %191 = xor i64 %13, -1
  %192 = and i64 %191, 5895319244995762635
  %193 = and i64 %13, -5895319244995762636
  %194 = or i64 %192, %193
  %195 = xor i64 -8539809474326233858, %194
  %196 = xor i64 %13, -1
  %197 = or i64 2833642567189666506, %196
  %198 = xor i64 %197, -1
  %199 = and i64 %198, -1
  %200 = or i64 %195, %199
  %201 = or i64 %1, -65181962998319247
  %202 = xor i64 %1, -1
  %203 = and i64 %202, -5376536127698748720
  %204 = and i64 %1, 5376536127698748719
  %205 = or i64 %203, %204
  %206 = xor i64 5366841296097824161, %205
  %207 = xor i64 %1, -1
  %208 = or i64 65181962998319246, %207
  %209 = xor i64 %208, -1
  %210 = and i64 %209, -1
  %211 = or i64 %206, %210
  %212 = and i64 %1, 9171081476760116252
  %213 = or i64 -9171081476760116253, %1
  %214 = sub i64 %213, -9171081476760116253
  %215 = xor i64 %201, %214
  %216 = xor i64 %215, 1774707204215809367
  %217 = xor i64 %216, %211
  %218 = xor i64 %217, %200
  %219 = xor i64 %218, %212
  %220 = xor i64 %219, %190
  %221 = and i64 %5, -8523505699090899688
  %222 = xor i64 %5, -1
  %223 = or i64 8523505699090899687, %222
  %224 = xor i64 %223, -1
  %225 = and i64 %224, -1
  %226 = sext i32 %dispatcher1 to i64
  %227 = add i64 %226, 4433020359250943720
  %228 = xor i64 4433020359250943720, %226
  %229 = and i64 4433020359250943720, %226
  %230 = mul i64 2, %229
  %231 = add i64 %228, %230
  %232 = xor i64 -8745780322000574976, %231
  %233 = xor i64 %232, %227
  %234 = xor i64 %233, %221
  %235 = xor i64 %234, %225
  %236 = mul i64 %220, %235
  %237 = trunc i64 %236 to i32
  %238 = select i1 %189, i32 595012098, i32 %237
  %239 = or i64 %28, -8565388110899811406
  %240 = xor i64 %28, -1
  %241 = and i64 %240, 7120801762673092187
  %242 = and i64 %28, -7120801762673092188
  %243 = or i64 %241, %242
  %244 = xor i64 -1444657547915260439, %243
  %245 = xor i64 %28, -1
  %246 = or i64 8565388110899811405, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = or i64 %244, %248
  %250 = sext i32 %dispatcher1 to i64
  %251 = and i64 %250, 9212757561478606167
  %252 = or i64 -9212757561478606168, %250
  %253 = sub i64 %252, -9212757561478606168
  %254 = add i64 %15, -6967875387614778932
  %255 = xor i64 -6967875387614778932, %15
  %256 = and i64 -6967875387614778932, %15
  %257 = mul i64 2, %256
  %258 = add i64 %255, %257
  %259 = xor i64 %249, %239
  %260 = xor i64 %259, %254
  %261 = xor i64 %260, %253
  %262 = xor i64 %261, -2336133588313056017
  %263 = xor i64 %262, %258
  %264 = xor i64 %263, %251
  %265 = add i64 %15, 1420736604649232834
  %266 = sub i64 0, %15
  %267 = sub i64 1420736604649232834, %266
  %268 = add i64 %28, -5504040685483193505
  %269 = sub i64 0, %28
  %270 = add i64 5504040685483193505, %269
  %271 = sub i64 0, %270
  %272 = and i64 %3, -7607543610167396577
  %273 = or i64 7607543610167396576, %3
  %274 = sub i64 %273, 7607543610167396576
  %275 = xor i64 %274, %271
  %276 = xor i64 %275, %267
  %277 = xor i64 %276, %272
  %278 = xor i64 %277, -1893666974714977250
  %279 = xor i64 %278, %265
  %280 = xor i64 %279, %268
  %281 = mul i64 %264, %280
  %282 = trunc i64 %281 to i32
  %283 = xor i32 %238, %282
  store i32 %283, i32* %0, align 4
  %284 = call i8** @bf17974093100361806345(i32* %0)
  %285 = load i8*, i8** %284, align 8
  indirectbr i8* %285, [label %loopEnd, label %125]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  %286 = or i64 %3, -6353482816524071293
  %287 = xor i64 %3, -1
  %288 = and i64 %287, -1195004060828219045
  %289 = and i64 %3, 1195004060828219044
  %290 = or i64 %288, %289
  %291 = xor i64 5240390242819082200, %290
  %292 = xor i64 %3, -1
  %293 = or i64 6353482816524071292, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %294, -1
  %296 = or i64 %291, %295
  %297 = add i64 %1, 7405408335205735864
  %298 = sub i64 0, %1
  %299 = sub i64 7405408335205735864, %298
  %300 = xor i64 %299, %286
  %301 = xor i64 %300, -2111606719446938723
  %302 = xor i64 %301, %296
  %303 = xor i64 %302, %297
  %304 = or i64 %7, 3972577541939450565
  %305 = xor i64 %7, -1
  %306 = and i64 3972577541939450565, %305
  %307 = add i64 %306, %7
  %308 = add i64 %3, 217131823106556942
  %309 = sub i64 0, %3
  %310 = add i64 -217131823106556942, %309
  %311 = sub i64 0, %310
  %312 = xor i64 %308, %307
  %313 = xor i64 %312, %304
  %314 = xor i64 %313, -8419383671339081702
  %315 = xor i64 %314, %311
  %316 = mul i64 %303, %315
  store i64 %316, i64* %26, align 8
  %317 = call i8** @lk531628682323968284(i64* %26)
  %318 = load i8*, i8** %317, align 8
  %319 = bitcast i8* %318 to void ()*
  call void %319()
  %320 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %323 = load i32, i32* %322, align 4
  %324 = srem i32 %321, %323
  store i32 %324, i32* %dispatcher, align 4
  %325 = load i8*, i8** %4, align 8
  %326 = load i8, i8* %325, align 1
  %327 = mul i8 %326, 2
  %328 = mul i8 %326, 2
  %329 = or i64 %3, 1255393551867958496
  %330 = xor i64 %3, -1
  %331 = and i64 %330, -6839110646700415244
  %332 = and i64 %3, 6839110646700415243
  %333 = or i64 %331, %332
  %334 = xor i64 -5730103943465029100, %333
  %335 = xor i64 %3, -1
  %336 = or i64 -1255393551867958497, %335
  %337 = xor i64 %336, -1
  %338 = and i64 %337, -1
  %339 = or i64 %334, %338
  %340 = add i64 %7, -1027195379935661864
  %341 = xor i64 -1027195379935661864, %7
  %342 = and i64 -1027195379935661864, %7
  %343 = mul i64 2, %342
  %344 = add i64 %341, %343
  %345 = or i64 %13, -3537700793498991659
  %346 = xor i64 %13, -1
  %347 = and i64 %346, -7685830837935048069
  %348 = and i64 %13, 7685830837935048068
  %349 = or i64 %347, %348
  %350 = xor i64 6607341738430527918, %349
  %351 = xor i64 %13, -1
  %352 = or i64 3537700793498991658, %351
  %353 = xor i64 %352, -1
  %354 = and i64 %353, -1
  %355 = or i64 %350, %354
  %356 = xor i64 %355, %344
  %357 = xor i64 %356, %339
  %358 = xor i64 %357, %345
  %359 = xor i64 %358, %329
  %360 = xor i64 %359, %340
  %361 = xor i64 %360, 7229374202177637589
  %362 = or i64 %7, 6807347942358290540
  %363 = and i64 6807347942358290540, %7
  %364 = xor i64 6807347942358290540, %7
  %365 = or i64 %363, %364
  %366 = sext i32 %dispatcher1 to i64
  %367 = add i64 %366, -7478010548419890457
  %368 = sub i64 0, %366
  %369 = add i64 7478010548419890457, %368
  %370 = sub i64 0, %369
  %371 = xor i64 -4420213363939862278, %367
  %372 = xor i64 %371, %362
  %373 = xor i64 %372, %365
  %374 = xor i64 %373, %370
  %375 = mul i64 %361, %374
  %376 = trunc i64 %375 to i8
  %377 = xor i8 %376, %328
  %378 = and i64 %13, 2048084540675828154
  %379 = xor i64 %13, -1
  %380 = or i64 -2048084540675828155, %379
  %381 = xor i64 %380, -1
  %382 = and i64 %381, -1
  %383 = and i64 %28, -4147959857846451204
  %384 = xor i64 %28, -1
  %385 = or i64 4147959857846451203, %384
  %386 = xor i64 %385, -1
  %387 = and i64 %386, -1
  %388 = xor i64 8547133255200222253, %378
  %389 = xor i64 %388, %382
  %390 = xor i64 %389, %383
  %391 = xor i64 %390, %387
  %392 = and i64 %5, 7372866142237396602
  %393 = xor i64 %5, -1
  %394 = xor i64 7372866142237396602, %393
  %395 = and i64 %394, 7372866142237396602
  %396 = add i64 %11, -2903166953945063939
  %397 = add i64 8356803156417173854, %11
  %398 = sub i64 %397, -7186773963347313823
  %399 = and i64 %13, -2550182074363295813
  %400 = or i64 2550182074363295812, %13
  %401 = sub i64 %400, 2550182074363295812
  %402 = xor i64 4782840342667855690, %399
  %403 = xor i64 %402, %392
  %404 = xor i64 %403, %395
  %405 = xor i64 %404, %396
  %406 = xor i64 %405, %401
  %407 = xor i64 %406, %398
  %408 = mul i64 %391, %407
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, %328
  %411 = mul i8 2, %410
  %412 = add i8 %377, %411
  %413 = mul i8 39, %412
  %414 = add i8 23, %413
  %415 = mul i8 -105, %414
  %416 = add i8 111, %415
  %417 = mul i8 %327, %416
  %418 = srem i8 %417, 4
  %419 = and i64 %13, 284879220034295914
  %420 = or i64 -284879220034295915, %13
  %421 = sub i64 %420, -284879220034295915
  %422 = add i64 %9, 8683584011351005731
  %423 = sub i64 0, %9
  %424 = sub i64 8683584011351005731, %423
  %425 = xor i64 %419, 6269963680143267751
  %426 = xor i64 %425, %424
  %427 = xor i64 %426, %421
  %428 = xor i64 %427, %422
  %429 = and i64 %15, -3734212737365683686
  %430 = or i64 3734212737365683685, %15
  %431 = sub i64 %430, 3734212737365683685
  %432 = or i64 %7, 8158415109645570268
  %433 = and i64 8158415109645570268, %7
  %434 = xor i64 8158415109645570268, %7
  %435 = or i64 %433, %434
  %436 = xor i64 %432, %435
  %437 = xor i64 %436, %429
  %438 = xor i64 %437, 0
  %439 = xor i64 %438, %431
  %440 = mul i64 %428, %439
  %441 = trunc i64 %440 to i8
  %442 = icmp eq i8 %418, %441
  %443 = mul i8 %326, %326
  %444 = mul i8 %443, %326
  %445 = add i8 %444, %326
  %446 = srem i8 %445, 2
  %447 = icmp eq i8 %446, 0
  %448 = and i1 %442, %447
  %449 = and i64 %9, -5852397608689165548
  %450 = xor i64 %9, -1
  %451 = or i64 5852397608689165547, %450
  %452 = xor i64 %451, -1
  %453 = and i64 %452, -1
  %454 = add i64 %11, 3948881603359379274
  %455 = sub i64 0, %11
  %456 = sub i64 3948881603359379274, %455
  %457 = add i64 %28, 7515317898219645712
  %458 = sub i64 0, %28
  %459 = add i64 -7515317898219645712, %458
  %460 = sub i64 0, %459
  %461 = xor i64 %454, %457
  %462 = xor i64 %461, %453
  %463 = xor i64 %462, %456
  %464 = xor i64 %463, -6908637477895709411
  %465 = xor i64 %464, %460
  %466 = xor i64 %465, %449
  %467 = sext i32 %dispatcher1 to i64
  %468 = or i64 %467, -4560534660897254931
  %469 = and i64 -4560534660897254931, %467
  %470 = xor i64 -4560534660897254931, %467
  %471 = or i64 %469, %470
  %472 = or i64 %5, 916628147871760347
  %473 = and i64 916628147871760347, %5
  %474 = xor i64 916628147871760347, %5
  %475 = or i64 %473, %474
  %476 = xor i64 6624392633024984073, %471
  %477 = xor i64 %476, %472
  %478 = xor i64 %477, %475
  %479 = xor i64 %478, %468
  %480 = mul i64 %466, %479
  %481 = trunc i64 %480 to i32
  %482 = or i64 %7, -3018982087452410346
  %483 = xor i64 %7, -1
  %484 = and i64 -3018982087452410346, %483
  %485 = add i64 %484, %7
  %486 = sext i32 %dispatcher1 to i64
  %487 = add i64 %486, 8110059563801260572
  %488 = sub i64 0, %486
  %489 = sub i64 8110059563801260572, %488
  %490 = add i64 %3, -1292073142295527438
  %491 = and i64 -1292073142295527438, %3
  %492 = or i64 -1292073142295527438, %3
  %493 = add i64 %491, %492
  %494 = xor i64 %490, %482
  %495 = xor i64 %494, %489
  %496 = xor i64 %495, %485
  %497 = xor i64 %496, %493
  %498 = xor i64 %497, 8889849936644891307
  %499 = xor i64 %498, %487
  %500 = or i64 %13, 3993005879255626509
  %501 = xor i64 %13, -1
  %502 = and i64 3993005879255626509, %501
  %503 = add i64 %502, %13
  %504 = and i64 %15, -8329867489484464860
  %505 = or i64 8329867489484464859, %15
  %506 = sub i64 %505, 8329867489484464859
  %507 = add i64 %28, -402360521930111851
  %508 = and i64 -402360521930111851, %28
  %509 = or i64 -402360521930111851, %28
  %510 = add i64 %508, %509
  %511 = xor i64 4005769386302733824, %504
  %512 = xor i64 %511, %510
  %513 = xor i64 %512, %503
  %514 = xor i64 %513, %500
  %515 = xor i64 %514, %506
  %516 = xor i64 %515, %507
  %517 = mul i64 %499, %516
  %518 = trunc i64 %517 to i32
  %519 = select i1 %448, i32 %481, i32 %518
  %520 = or i32 %519, 5
  %521 = and i32 %519, 5
  %522 = sub i32 %520, %521
  store i32 %522, i32* %0, align 4
  %523 = call i8** @bf17974093100361806345(i32* %0)
  %524 = load i8*, i8** %523, align 8
  indirectbr i8* %524, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %525 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %525, align 4
  %526 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %526, align 4
  %527 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %527, align 4
  %528 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %528, align 4
  %529 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %529, align 4
  %530 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %531 = load i32, i32* %530, align 4
  store i32 %531, i32* %dispatcher, align 4
  %532 = load i8*, i8** %12, align 8
  %533 = load i8, i8* %532, align 1
  %534 = mul i8 %533, %533
  %535 = add i8 %534, %533
  %536 = and i64 %5, -8579873110532697990
  %537 = xor i64 %5, -1
  %538 = or i64 8579873110532697989, %537
  %539 = xor i64 %538, -1
  %540 = and i64 %539, -1
  %541 = add i64 %3, 3050772656029732970
  %542 = and i64 3050772656029732970, %3
  %543 = or i64 3050772656029732970, %3
  %544 = add i64 %542, %543
  %545 = add i64 %7, 1295550870746836838
  %546 = sub i64 0, %7
  %547 = add i64 -1295550870746836838, %546
  %548 = sub i64 0, %547
  %549 = xor i64 %540, %545
  %550 = xor i64 %549, %536
  %551 = xor i64 %550, %548
  %552 = xor i64 %551, -3143320309209560925
  %553 = xor i64 %552, %544
  %554 = xor i64 %553, %541
  %555 = add i64 %9, 3419451063719664688
  %556 = sub i64 0, %9
  %557 = add i64 -3419451063719664688, %556
  %558 = sub i64 0, %557
  %559 = add i64 %13, -6075191179128003124
  %560 = sub i64 0, %13
  %561 = sub i64 -6075191179128003124, %560
  %562 = xor i64 -6825400646460784351, %555
  %563 = xor i64 %562, %559
  %564 = xor i64 %563, %561
  %565 = xor i64 %564, %558
  %566 = mul i64 %554, %565
  %567 = trunc i64 %566 to i8
  %568 = mul i8 %535, %567
  %569 = srem i8 %568, 2
  %570 = icmp eq i8 %569, 0
  %571 = mul i8 %533, %533
  %572 = add i8 %571, %533
  %573 = and i64 %11, 902996180261635534
  %574 = xor i64 %11, -1
  %575 = or i64 -902996180261635535, %574
  %576 = xor i64 %575, -1
  %577 = and i64 %576, -1
  %578 = or i64 %7, -2098300344156558381
  %579 = xor i64 %7, -1
  %580 = and i64 %579, -6182891519832301534
  %581 = and i64 %7, 6182891519832301533
  %582 = or i64 %580, %581
  %583 = xor i64 5246871822093847537, %582
  %584 = xor i64 %7, -1
  %585 = or i64 2098300344156558380, %584
  %586 = xor i64 %585, -1
  %587 = and i64 %586, -1
  %588 = or i64 %583, %587
  %589 = xor i64 -2342337193077614843, %577
  %590 = xor i64 %589, %588
  %591 = xor i64 %590, %573
  %592 = xor i64 %591, %578
  %593 = or i64 %5, 2095255933063546663
  %594 = xor i64 %5, -1
  %595 = and i64 2095255933063546663, %594
  %596 = add i64 %595, %5
  %597 = or i64 %28, -2994320034766481220
  %598 = and i64 -2994320034766481220, %28
  %599 = xor i64 -2994320034766481220, %28
  %600 = or i64 %598, %599
  %601 = xor i64 693648524531186586, %600
  %602 = xor i64 %601, %593
  %603 = xor i64 %602, %597
  %604 = xor i64 %603, %596
  %605 = mul i64 %592, %604
  %606 = trunc i64 %605 to i8
  %607 = srem i8 %572, %606
  %608 = icmp eq i8 %607, 0
  %609 = and i1 %570, %608
  %610 = and i64 %1, -4598933833171503252
  %611 = xor i64 %1, -1
  %612 = xor i64 -4598933833171503252, %611
  %613 = and i64 %612, -4598933833171503252
  %614 = or i64 %1, 3110607778191597601
  %615 = xor i64 %1, -1
  %616 = and i64 %615, 7100476344343716444
  %617 = and i64 %1, -7100476344343716445
  %618 = or i64 %616, %617
  %619 = xor i64 5306063717648466557, %618
  %620 = xor i64 %1, -1
  %621 = or i64 -3110607778191597602, %620
  %622 = xor i64 %621, -1
  %623 = and i64 %622, -1
  %624 = or i64 %619, %623
  %625 = xor i64 %613, %610
  %626 = xor i64 %625, %624
  %627 = xor i64 %626, %614
  %628 = xor i64 %627, -3695057114640182811
  %629 = or i64 %11, -4966638136874486187
  %630 = xor i64 %11, -1
  %631 = and i64 %630, -7935604908976507239
  %632 = and i64 %11, 7935604908976507238
  %633 = or i64 %631, %632
  %634 = xor i64 3084373711578185932, %633
  %635 = xor i64 %11, -1
  %636 = or i64 4966638136874486186, %635
  %637 = xor i64 %636, -1
  %638 = and i64 %637, -1
  %639 = or i64 %634, %638
  %640 = add i64 %1, -6658526447717467393
  %641 = sub i64 0, %1
  %642 = sub i64 -6658526447717467393, %641
  %643 = add i64 %1, -5237691104993259274
  %644 = sub i64 0, %1
  %645 = sub i64 -5237691104993259274, %644
  %646 = xor i64 %639, 2504795715205822862
  %647 = xor i64 %646, %643
  %648 = xor i64 %647, %629
  %649 = xor i64 %648, %645
  %650 = xor i64 %649, %642
  %651 = xor i64 %650, %640
  %652 = mul i64 %628, %651
  %653 = trunc i64 %652 to i32
  %654 = select i1 %609, i32 595012102, i32 %653
  %655 = xor i32 %654, 0
  store i32 %655, i32* %0, align 4
  %656 = call i8** @bf17974093100361806345(i32* %0)
  %657 = load i8*, i8** %656, align 8
  indirectbr i8* %657, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %658 = load i8*, i8** %4, align 8
  %659 = load i8, i8* %658, align 1
  %660 = sext i32 %dispatcher1 to i64
  %661 = or i64 %660, -2936327451697554379
  %662 = and i64 -2936327451697554379, %660
  %663 = xor i64 -2936327451697554379, %660
  %664 = or i64 %662, %663
  %665 = sext i32 %dispatcher1 to i64
  %666 = and i64 %665, 2678008539638209731
  %667 = xor i64 %665, -1
  %668 = or i64 -2678008539638209732, %667
  %669 = xor i64 %668, -1
  %670 = and i64 %669, -1
  %671 = xor i64 %664, %666
  %672 = xor i64 %671, %661
  %673 = xor i64 %672, %670
  %674 = xor i64 %673, -7930472347048291219
  %675 = or i64 %9, -1500895890739495864
  %676 = and i64 -1500895890739495864, %9
  %677 = xor i64 -1500895890739495864, %9
  %678 = or i64 %676, %677
  %679 = and i64 %5, -7918883085695263703
  %680 = xor i64 %5, -1
  %681 = or i64 7918883085695263702, %680
  %682 = xor i64 %681, -1
  %683 = and i64 %682, -1
  %684 = xor i64 %678, %679
  %685 = xor i64 %684, 1297844761101882725
  %686 = xor i64 %685, %675
  %687 = xor i64 %686, %683
  %688 = mul i64 %674, %687
  %689 = trunc i64 %688 to i8
  %690 = and i8 %659, %689
  %691 = icmp eq i8 %690, 1
  %692 = mul i8 %659, %659
  %693 = add i8 %692, %659
  %694 = srem i8 %693, 2
  %695 = icmp eq i8 %694, 0
  %696 = or i1 %691, %695
  %697 = select i1 %696, i32 595012096, i32 595012096
  %698 = xor i32 %697, 0
  store i32 %698, i32* %0, align 4
  %699 = call i8** @bf17974093100361806345(i32* %0)
  %700 = load i8*, i8** %699, align 8
  indirectbr i8* %700, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %125, %EntryBasicBlockSplit
  %701 = load i8*, i8** %16, align 8
  %702 = load i8, i8* %701, align 1
  %703 = mul i8 %702, 2
  %704 = mul i8 %702, 2
  %705 = add i8 2, %704
  %706 = mul i8 %703, %705
  %707 = srem i8 %706, 4
  %708 = icmp eq i8 %707, 0
  %709 = mul i8 %702, %702
  %710 = add i8 %709, %702
  %711 = srem i8 %710, 2
  %712 = icmp eq i8 %711, 0
  %713 = and i1 %708, %712
  %714 = select i1 %713, i32 595012096, i32 595012100
  %715 = xor i32 %714, -1
  %716 = and i32 %715, 4
  %717 = and i32 %714, -5
  %718 = or i32 %716, %717
  store i32 %718, i32* %0, align 4
  %719 = call i8** @bf17974093100361806345(i32* %0)
  %720 = load i8*, i8** %719, align 8
  indirectbr i8* %720, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.22(i32* %.out, i64* %.out1, i32* %.out2, i64* %.out3, i32* %.out4, i64* %.out5, i64* %.out6, i64* %.out7, i64* %.out8, i64* %.out9, i64* %.out10) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012102)
  %2 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.22, %defaultSwitchBasicBlock), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012100)
  %4 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.22, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012097)
  %6 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.22, %loopEnd), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012096)
  %8 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.22, %.exitStub), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012103)
  %10 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.22, %loopStart), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012104)
  %12 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.22, %85), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012101)
  %14 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %13
  store i8* blockaddress(@main_loop.extracted.22, %EntryBasicBlockSplit), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012098)
  %16 = getelementptr [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %15
  store i8* blockaddress(@main_loop.extracted.22, %codeRepl), i8** %16, align 8
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem = alloca i8**, align 8
  %lookupTable = alloca [9 x i32], align 4
  %17 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %17, align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %23, align 4
  %24 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %24, align 4
  %25 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %25, align 4
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %27, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12646564381111741682, i32 0, i64 %28
  store i8** %29, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012103, i32* %0, align 4
  %30 = call i8** @bf698711486529780441(i32* %0)
  %31 = load i8*, i8** %30, align 8
  indirectbr i8* %31, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %85
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (void (i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*, i64*, i64*, i64*, i64*)* @main_loop.extracted.22.extracted to i8*), i8** %.reload, align 8
  %32 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = sub i32 %33, %35
  store i32 %36, i32* %dispatcher, align 4
  %37 = load i8*, i8** %10, align 8
  %38 = load i8, i8* %37, align 1
  %39 = mul i8 %38, 2
  %40 = mul i8 %38, 2
  %41 = add i8 2, %40
  %42 = mul i8 %39, %41
  %43 = srem i8 %42, 4
  %44 = add i64 %13, 5685234618180421479
  %45 = add i64 -3378183784867563176, %13
  %46 = sub i64 %45, -9063418403047984655
  %47 = add i64 %9, 490623069124009217
  %48 = sub i64 0, %9
  %49 = add i64 -490623069124009217, %48
  %50 = sub i64 0, %49
  %51 = add i64 %3, 742446881817221395
  %52 = add i64 -6006425008348252149, %3
  %53 = add i64 %52, 6748871890165473544
  %54 = xor i64 %47, %44
  %55 = xor i64 %54, %51
  %56 = xor i64 %55, %53
  %57 = xor i64 %56, %46
  %58 = xor i64 %57, %50
  %59 = xor i64 %58, 1905675338009475411
  %60 = add i64 %5, -8200308052152802013
  %61 = sub i64 0, %5
  %62 = add i64 8200308052152802013, %61
  %63 = sub i64 0, %62
  %64 = and i64 %5, -4288636350795951723
  %65 = xor i64 %5, -1
  %66 = or i64 4288636350795951722, %65
  %67 = xor i64 %66, -1
  %68 = and i64 %67, -1
  %69 = xor i64 %68, %60
  %70 = xor i64 %69, 0
  %71 = xor i64 %70, %63
  %72 = xor i64 %71, %64
  %73 = mul i64 %59, %72
  %74 = trunc i64 %73 to i8
  %75 = icmp eq i8 %43, %74
  %76 = mul i8 %38, %38
  %77 = add i8 %76, %38
  %78 = srem i8 %77, 2
  %79 = icmp eq i8 %78, 0
  %80 = or i1 %75, %79
  %81 = select i1 %80, i32 595012096, i32 595012097
  %82 = xor i32 %81, 1
  store i32 %82, i32* %0, align 4
  %83 = call i8** @bf698711486529780441(i32* %0)
  %84 = load i8*, i8** %83, align 8
  indirectbr i8* %84, [label %loopEnd, label %EntryBasicBlockSplit]

85:                                               ; preds = %85, %loopStart
  %86 = add i32 -1613380684, 1613380816
  store i32 %86, i32* %.reg2mem2, align 4
  %87 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = sub i32 0, %90
  %92 = add i32 %88, %91
  store i32 %92, i32* %dispatcher, align 4
  %93 = load i8*, i8** %14, align 8
  %94 = load i8, i8* %93, align 1
  %95 = mul i8 %94, %94
  %96 = add i8 %95, %94
  %97 = mul i8 %96, 3
  %98 = srem i8 %97, 2
  %99 = icmp eq i8 %98, 0
  %100 = mul i8 %94, %94
  %101 = add i8 %100, %94
  %102 = srem i8 %101, 2
  %103 = icmp eq i8 %102, 0
  %104 = and i64 %11, 7179341894509295962
  %105 = or i64 -7179341894509295963, %11
  %106 = sub i64 %105, -7179341894509295963
  %107 = or i64 %11, 4444927189148223005
  %108 = xor i64 %11, -1
  %109 = and i64 4444927189148223005, %108
  %110 = add i64 %109, %11
  %111 = add i64 %5, -7994997697809324936
  %112 = sub i64 0, %5
  %113 = sub i64 -7994997697809324936, %112
  %114 = xor i64 %113, -5557628213628029595
  %115 = xor i64 %114, %106
  %116 = xor i64 %115, %104
  %117 = xor i64 %116, %110
  %118 = xor i64 %117, %111
  %119 = xor i64 %118, %107
  %120 = or i64 %7, -4923583391551405338
  %121 = and i64 -4923583391551405338, %7
  %122 = xor i64 -4923583391551405338, %7
  %123 = or i64 %121, %122
  %124 = and i64 %13, -3985517860495759621
  %125 = xor i64 %13, -1
  %126 = xor i64 -3985517860495759621, %125
  %127 = and i64 %126, -3985517860495759621
  %128 = add i64 %1, 381111606986855605
  %129 = sub i64 0, %1
  %130 = sub i64 381111606986855605, %129
  %131 = xor i64 %124, 1824745944695370861
  %132 = xor i64 %131, %120
  %133 = xor i64 %132, %128
  %134 = xor i64 %133, %127
  %135 = xor i64 %134, %123
  %136 = xor i64 %135, %130
  %137 = mul i64 %119, %136
  %138 = trunc i64 %137 to i1
  %139 = xor i1 %99, %138
  %140 = and i64 %9, 2303970694152820599
  %141 = xor i64 %9, -1
  %142 = or i64 -2303970694152820600, %141
  %143 = xor i64 %142, -1
  %144 = and i64 %143, -1
  %145 = and i64 %11, 694950360881252845
  %146 = xor i64 %11, -1
  %147 = xor i64 694950360881252845, %146
  %148 = and i64 %147, 694950360881252845
  %149 = xor i64 5833234117797317155, %144
  %150 = xor i64 %149, %148
  %151 = xor i64 %150, %145
  %152 = xor i64 %151, %140
  %153 = sext i32 %dispatcher1 to i64
  %154 = and i64 %153, -2089475970538924879
  %155 = xor i64 %153, -1
  %156 = or i64 2089475970538924878, %155
  %157 = xor i64 %156, -1
  %158 = and i64 %157, -1
  %159 = or i64 %1, 2180840803604540525
  %160 = xor i64 %1, -1
  %161 = and i64 %160, -7199212738669693048
  %162 = and i64 %1, 7199212738669693047
  %163 = or i64 %161, %162
  %164 = xor i64 -9055431530181649435, %163
  %165 = xor i64 %1, -1
  %166 = or i64 -2180840803604540526, %165
  %167 = xor i64 %166, -1
  %168 = and i64 %167, -1
  %169 = or i64 %164, %168
  %170 = sext i32 %dispatcher1 to i64
  %171 = or i64 %170, -8608962854539220670
  %172 = and i64 -8608962854539220670, %170
  %173 = xor i64 -8608962854539220670, %170
  %174 = or i64 %172, %173
  %175 = xor i64 %169, %171
  %176 = xor i64 %175, %158
  %177 = xor i64 %176, %154
  %178 = xor i64 %177, %174
  %179 = xor i64 %178, -4042138375870057077
  %180 = xor i64 %179, %159
  %181 = mul i64 %152, %180
  %182 = trunc i64 %181 to i1
  %183 = xor i1 %103, %182
  %184 = or i1 %139, %183
  %185 = xor i1 %184, true
  %186 = and i1 %185, true
  %187 = or i64 %28, -4488059550378004264
  %188 = xor i64 %28, -1
  %189 = and i64 %188, 6845858042856574791
  %190 = and i64 %28, -6845858042856574792
  %191 = or i64 %189, %190
  %192 = xor i64 -7010299220181844065, %191
  %193 = xor i64 %28, -1
  %194 = or i64 4488059550378004263, %193
  %195 = xor i64 %194, -1
  %196 = and i64 %195, -1
  %197 = or i64 %192, %196
  %198 = and i64 %28, 3744038839140154280
  %199 = xor i64 %28, -1
  %200 = xor i64 3744038839140154280, %199
  %201 = and i64 %200, 3744038839140154280
  %202 = and i64 %1, 1024785640900120929
  %203 = or i64 -1024785640900120930, %1
  %204 = sub i64 %203, -1024785640900120930
  %205 = xor i64 5915228318147795041, %187
  %206 = xor i64 %205, %204
  %207 = xor i64 %206, %198
  %208 = xor i64 %207, %197
  %209 = xor i64 %208, %202
  %210 = xor i64 %209, %201
  %211 = or i64 %13, -1100735141200960252
  %212 = and i64 -1100735141200960252, %13
  %213 = xor i64 -1100735141200960252, %13
  %214 = or i64 %212, %213
  %215 = and i64 %13, -5116115168997198047
  %216 = or i64 5116115168997198046, %13
  %217 = sub i64 %216, 5116115168997198046
  %218 = xor i64 %211, %214
  %219 = xor i64 %218, %217
  %220 = xor i64 %219, -7970969389560482399
  %221 = xor i64 %220, %215
  %222 = mul i64 %210, %221
  %223 = trunc i64 %222 to i32
  %224 = select i1 %186, i32 %223, i32 595012097
  %225 = or i64 %9, 8751238178070467380
  %226 = xor i64 %9, -1
  %227 = and i64 %226, 3331773432906712289
  %228 = and i64 %9, -3331773432906712290
  %229 = or i64 %227, %228
  %230 = xor i64 6291091662769166293, %229
  %231 = xor i64 %9, -1
  %232 = or i64 -8751238178070467381, %231
  %233 = xor i64 %232, -1
  %234 = and i64 %233, -1
  %235 = or i64 %230, %234
  %236 = or i64 %15, 8881260309921092855
  %237 = xor i64 %15, -1
  %238 = and i64 %237, -2240244094756069018
  %239 = and i64 %15, 2240244094756069017
  %240 = or i64 %238, %239
  %241 = xor i64 -7230072977105439343, %240
  %242 = xor i64 %15, -1
  %243 = or i64 -8881260309921092856, %242
  %244 = xor i64 %243, -1
  %245 = and i64 %244, -1
  %246 = or i64 %241, %245
  %247 = xor i64 8047601998764551347, %225
  %248 = xor i64 %247, %235
  %249 = xor i64 %248, %246
  %250 = xor i64 %249, %236
  %251 = or i64 %7, -735031193339945142
  %252 = xor i64 %7, -1
  %253 = and i64 %252, -1110305111157178799
  %254 = and i64 %7, 1110305111157178798
  %255 = or i64 %253, %254
  %256 = xor i64 386115929819898139, %255
  %257 = xor i64 %7, -1
  %258 = or i64 735031193339945141, %257
  %259 = xor i64 %258, -1
  %260 = and i64 %259, -1
  %261 = or i64 %256, %260
  %262 = sext i32 %dispatcher1 to i64
  %263 = or i64 %262, -2137434766588200635
  %264 = xor i64 %262, -1
  %265 = and i64 -2137434766588200635, %264
  %266 = add i64 %265, %262
  %267 = add i64 %13, 5339525053232713137
  %268 = sub i64 0, %13
  %269 = add i64 -5339525053232713137, %268
  %270 = sub i64 0, %269
  %271 = xor i64 %267, 0
  %272 = xor i64 %271, %251
  %273 = xor i64 %272, %261
  %274 = xor i64 %273, %270
  %275 = xor i64 %274, %266
  %276 = xor i64 %275, %263
  %277 = mul i64 %250, %276
  %278 = trunc i64 %277 to i32
  %279 = xor i32 %224, %278
  store i32 %279, i32* %0, align 4
  %280 = call i8** @bf698711486529780441(i32* %0)
  %281 = load i8*, i8** %280, align 8
  indirectbr i8* %281, [label %loopEnd, label %85]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %26, align 8
  %282 = alloca i8**, align 8
  %283 = sext i32 %dispatcher1 to i64
  %284 = and i64 %283, 4485431843369013742
  %285 = or i64 -4485431843369013743, %283
  %286 = sub i64 %285, -4485431843369013743
  %287 = and i64 %15, 5202470048697557621
  %288 = or i64 -5202470048697557622, %15
  %289 = sub i64 %288, -5202470048697557622
  %290 = xor i64 %284, 1718427724639910875
  %291 = xor i64 %290, %286
  %292 = xor i64 %291, %289
  %293 = xor i64 %292, %287
  %294 = add i64 %13, 5163876839751986402
  %295 = and i64 5163876839751986402, %13
  %296 = or i64 5163876839751986402, %13
  %297 = add i64 %295, %296
  %298 = and i64 %5, -2378797595293042855
  %299 = xor i64 %5, -1
  %300 = xor i64 -2378797595293042855, %299
  %301 = and i64 %300, -2378797595293042855
  %302 = xor i64 0, %298
  %303 = xor i64 %302, %297
  %304 = xor i64 %303, %294
  %305 = xor i64 %304, %301
  %306 = mul i64 %293, %305
  %307 = trunc i64 %306 to i1
  %308 = add i64 %7, 650119462494719646
  %309 = xor i64 650119462494719646, %7
  %310 = and i64 650119462494719646, %7
  %311 = mul i64 2, %310
  %312 = add i64 %309, %311
  %313 = or i64 %9, -3626401420553190700
  %314 = and i64 -3626401420553190700, %9
  %315 = xor i64 -3626401420553190700, %9
  %316 = or i64 %314, %315
  %317 = xor i64 %308, %313
  %318 = xor i64 %317, %312
  %319 = xor i64 %318, %316
  %320 = xor i64 %319, 7419776491550532441
  %321 = or i64 %11, 922289672913902256
  %322 = and i64 922289672913902256, %11
  %323 = xor i64 922289672913902256, %11
  %324 = or i64 %322, %323
  %325 = or i64 %11, 6322641016997578376
  %326 = and i64 6322641016997578376, %11
  %327 = xor i64 6322641016997578376, %11
  %328 = or i64 %326, %327
  %329 = add i64 %11, -3627489978977832490
  %330 = add i64 9052833426799053200, %11
  %331 = add i64 %330, 5766420667932665926
  %332 = xor i64 %331, 0
  %333 = xor i64 %332, %329
  %334 = xor i64 %333, %328
  %335 = xor i64 %334, %325
  %336 = xor i64 %335, %324
  %337 = xor i64 %336, %321
  %338 = mul i64 %320, %337
  %339 = and i64 %9, -4826712171320421295
  %340 = xor i64 %9, -1
  %341 = xor i64 -4826712171320421295, %340
  %342 = and i64 %341, -4826712171320421295
  %343 = sext i32 %dispatcher1 to i64
  %344 = add i64 %343, -9476451725636209
  %345 = sub i64 0, %343
  %346 = add i64 9476451725636209, %345
  %347 = sub i64 0, %346
  %348 = xor i64 %339, %344
  %349 = xor i64 %348, %347
  %350 = xor i64 %349, 7370498111325937269
  %351 = xor i64 %350, %342
  %352 = or i64 %13, 1411571224936259453
  %353 = xor i64 %13, -1
  %354 = and i64 1411571224936259453, %353
  %355 = add i64 %354, %13
  %356 = add i64 %15, -1021197833389088902
  %357 = add i64 -7882259205096705411, %15
  %358 = add i64 %357, 6861061371707616509
  %359 = sext i32 %dispatcher1 to i64
  %360 = add i64 %359, 1596289080036061257
  %361 = add i64 5613911309627867136, %359
  %362 = sub i64 %361, 4017622229591805879
  %363 = xor i64 %362, 0
  %364 = xor i64 %363, %360
  %365 = xor i64 %364, %358
  %366 = xor i64 %365, %356
  %367 = xor i64 %366, %355
  %368 = xor i64 %367, %352
  %369 = mul i64 %351, %368
  %370 = trunc i64 %369 to i1
  %371 = and i64 %1, 4567201503105757235
  %372 = xor i64 %1, -1
  %373 = or i64 -4567201503105757236, %372
  %374 = xor i64 %373, -1
  %375 = and i64 %374, -1
  %376 = and i64 %1, 8717598944113153972
  %377 = xor i64 %1, -1
  %378 = xor i64 8717598944113153972, %377
  %379 = and i64 %378, 8717598944113153972
  %380 = xor i64 %371, %379
  %381 = xor i64 %380, 8416423479301213703
  %382 = xor i64 %381, %376
  %383 = xor i64 %382, %375
  %384 = or i64 %1, 2310131238439974996
  %385 = xor i64 %1, -1
  %386 = and i64 %385, -3835017138334742443
  %387 = and i64 %1, 3835017138334742442
  %388 = or i64 %386, %387
  %389 = xor i64 -1528844373750796287, %388
  %390 = xor i64 %1, -1
  %391 = or i64 -2310131238439974997, %390
  %392 = xor i64 %391, -1
  %393 = and i64 %392, -1
  %394 = or i64 %389, %393
  %395 = and i64 %9, 5768755115350630633
  %396 = xor i64 %9, -1
  %397 = xor i64 5768755115350630633, %396
  %398 = and i64 %397, 5768755115350630633
  %399 = xor i64 %394, %384
  %400 = xor i64 %399, 0
  %401 = xor i64 %400, %395
  %402 = xor i64 %401, %398
  %403 = mul i64 %383, %402
  %404 = trunc i64 %403 to i1
  %405 = and i64 %28, 8864928740624977090
  %406 = xor i64 %28, -1
  %407 = xor i64 8864928740624977090, %406
  %408 = and i64 %407, 8864928740624977090
  %409 = and i64 %13, 417249543102457231
  %410 = xor i64 %13, -1
  %411 = or i64 -417249543102457232, %410
  %412 = xor i64 %411, -1
  %413 = and i64 %412, -1
  %414 = xor i64 8133587118294881399, %405
  %415 = xor i64 %414, %413
  %416 = xor i64 %415, %409
  %417 = xor i64 %416, %408
  %418 = add i64 %15, 7522070199104956349
  %419 = add i64 -3304561801523590765, %15
  %420 = add i64 %419, -7620112073081004502
  %421 = or i64 %15, 8181502545735429702
  %422 = xor i64 %15, -1
  %423 = and i64 %422, 3939213046700701563
  %424 = and i64 %15, -3939213046700701564
  %425 = or i64 %423, %424
  %426 = xor i64 5125215479160265021, %425
  %427 = xor i64 %15, -1
  %428 = or i64 -8181502545735429703, %427
  %429 = xor i64 %428, -1
  %430 = and i64 %429, -1
  %431 = or i64 %426, %430
  %432 = xor i64 %431, 0
  %433 = xor i64 %432, %421
  %434 = xor i64 %433, %420
  %435 = xor i64 %434, %418
  %436 = mul i64 %417, %435
  %437 = trunc i64 %436 to i32
  %438 = or i64 %11, 6961602458126568994
  %439 = xor i64 %11, -1
  %440 = and i64 %439, 7297118673391360044
  %441 = and i64 %11, -7297118673391360045
  %442 = or i64 %440, %441
  %443 = xor i64 421093474608240142, %442
  %444 = xor i64 %11, -1
  %445 = or i64 -6961602458126568995, %444
  %446 = xor i64 %445, -1
  %447 = and i64 %446, -1
  %448 = or i64 %443, %447
  %449 = add i64 %5, -7946044565410365057
  %450 = xor i64 -7946044565410365057, %5
  %451 = and i64 -7946044565410365057, %5
  %452 = mul i64 2, %451
  %453 = add i64 %450, %452
  %454 = or i64 %9, -7746753061042690743
  %455 = xor i64 %9, -1
  %456 = and i64 -7746753061042690743, %455
  %457 = add i64 %456, %9
  %458 = xor i64 -684727789097185101, %454
  %459 = xor i64 %458, %448
  %460 = xor i64 %459, %457
  %461 = xor i64 %460, %438
  %462 = xor i64 %461, %449
  %463 = xor i64 %462, %453
  %464 = and i64 %28, -2973845329208581327
  %465 = or i64 2973845329208581326, %28
  %466 = sub i64 %465, 2973845329208581326
  %467 = add i64 %15, 2946408240711960411
  %468 = sub i64 0, %15
  %469 = add i64 -2946408240711960411, %468
  %470 = sub i64 0, %469
  %471 = xor i64 %467, 0
  %472 = xor i64 %471, %464
  %473 = xor i64 %472, %470
  %474 = xor i64 %473, %466
  %475 = mul i64 %463, %474
  %476 = sext i32 %dispatcher1 to i64
  %477 = add i64 %476, 747429812351596932
  %478 = sub i64 0, %476
  %479 = sub i64 747429812351596932, %478
  %480 = add i64 %3, 4500837492660597260
  %481 = sub i64 0, %3
  %482 = sub i64 4500837492660597260, %481
  %483 = add i64 %3, 1276743894272172218
  %484 = xor i64 1276743894272172218, %3
  %485 = and i64 1276743894272172218, %3
  %486 = mul i64 2, %485
  %487 = add i64 %484, %486
  %488 = xor i64 %482, %487
  %489 = xor i64 %488, 6473034491208514871
  %490 = xor i64 %489, %483
  %491 = xor i64 %490, %477
  %492 = xor i64 %491, %479
  %493 = xor i64 %492, %480
  %494 = add i64 %13, 7499075542947721179
  %495 = and i64 7499075542947721179, %13
  %496 = or i64 7499075542947721179, %13
  %497 = add i64 %495, %496
  %498 = or i64 %5, -7062282802886893073
  %499 = xor i64 %5, -1
  %500 = and i64 %499, 256618958457320485
  %501 = and i64 %5, -256618958457320486
  %502 = or i64 %500, %501
  %503 = xor i64 -7029544385726835254, %502
  %504 = xor i64 %5, -1
  %505 = or i64 7062282802886893072, %504
  %506 = xor i64 %505, -1
  %507 = and i64 %506, -1
  %508 = or i64 %503, %507
  %509 = or i64 %11, 673971820856105857
  %510 = and i64 673971820856105857, %11
  %511 = xor i64 673971820856105857, %11
  %512 = or i64 %510, %511
  %513 = xor i64 %509, %498
  %514 = xor i64 %513, %508
  %515 = xor i64 %514, %497
  %516 = xor i64 %515, %512
  %517 = xor i64 %516, %494
  %518 = xor i64 %517, 0
  %519 = mul i64 %493, %518
  %520 = trunc i64 %519 to i1
  %521 = and i64 %15, -2405113409842106134
  %522 = or i64 2405113409842106133, %15
  %523 = sub i64 %522, 2405113409842106133
  %524 = or i64 %9, -7317742155194059440
  %525 = and i64 -7317742155194059440, %9
  %526 = xor i64 -7317742155194059440, %9
  %527 = or i64 %525, %526
  %528 = xor i64 %521, 8922258540732347389
  %529 = xor i64 %528, %523
  %530 = xor i64 %529, %527
  %531 = xor i64 %530, %524
  %532 = sext i32 %dispatcher1 to i64
  %533 = and i64 %532, -4709304303211866789
  %534 = xor i64 %532, -1
  %535 = or i64 4709304303211866788, %534
  %536 = xor i64 %535, -1
  %537 = and i64 %536, -1
  %538 = and i64 %15, 2769420312924029841
  %539 = xor i64 %15, -1
  %540 = or i64 -2769420312924029842, %539
  %541 = xor i64 %540, -1
  %542 = and i64 %541, -1
  %543 = xor i64 %538, %533
  %544 = xor i64 %543, 0
  %545 = xor i64 %544, %542
  %546 = xor i64 %545, %537
  %547 = mul i64 %531, %546
  %548 = trunc i64 %547 to i32
  %549 = add i64 %15, -4080085172280290456
  %550 = add i64 -5218013989166362539, %15
  %551 = add i64 %550, 1137928816886072083
  %552 = and i64 %1, 6138148160730787959
  %553 = xor i64 %1, -1
  %554 = xor i64 6138148160730787959, %553
  %555 = and i64 %554, 6138148160730787959
  %556 = add i64 %28, -3948261789626469961
  %557 = add i64 -3351098638130415137, %28
  %558 = add i64 %557, -597163151496054824
  %559 = xor i64 %558, %549
  %560 = xor i64 %559, %555
  %561 = xor i64 %560, %552
  %562 = xor i64 %561, %551
  %563 = xor i64 %562, %556
  %564 = xor i64 %563, -2301951884989672525
  %565 = and i64 %5, 5708090823207591627
  %566 = xor i64 %5, -1
  %567 = xor i64 5708090823207591627, %566
  %568 = and i64 %567, 5708090823207591627
  %569 = or i64 %15, -7725793038578926699
  %570 = xor i64 %15, -1
  %571 = and i64 -7725793038578926699, %570
  %572 = add i64 %571, %15
  %573 = or i64 %15, -8268819300776283848
  %574 = and i64 -8268819300776283848, %15
  %575 = xor i64 -8268819300776283848, %15
  %576 = or i64 %574, %575
  %577 = xor i64 %565, %568
  %578 = xor i64 %577, %569
  %579 = xor i64 %578, %573
  %580 = xor i64 %579, %572
  %581 = xor i64 %580, 0
  %582 = xor i64 %581, %576
  %583 = mul i64 %564, %582
  %584 = trunc i64 %583 to i1
  %585 = or i64 %28, -439715460365634639
  %586 = xor i64 %28, -1
  %587 = and i64 -439715460365634639, %586
  %588 = add i64 %587, %28
  %589 = and i64 %7, -497506788325541026
  %590 = xor i64 %7, -1
  %591 = xor i64 -497506788325541026, %590
  %592 = and i64 %591, -497506788325541026
  %593 = xor i64 %592, %589
  %594 = xor i64 %593, 2038271034863715373
  %595 = xor i64 %594, %588
  %596 = xor i64 %595, %585
  %597 = and i64 %3, -4582236291975263589
  %598 = xor i64 %3, -1
  %599 = or i64 4582236291975263588, %598
  %600 = xor i64 %599, -1
  %601 = and i64 %600, -1
  %602 = and i64 %11, 8761631192338080798
  %603 = or i64 -8761631192338080799, %11
  %604 = sub i64 %603, -8761631192338080799
  %605 = xor i64 %597, %602
  %606 = xor i64 %605, 0
  %607 = xor i64 %606, %601
  %608 = xor i64 %607, %604
  %609 = mul i64 %596, %608
  %610 = trunc i64 %609 to i1
  call void @"9941920946239825184"(i32 6, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* %26, i8*** %282, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %307, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %338, i1 false, i1* null, i1 %370, i1 %404, i1 false, i32 %437, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %475, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %520, i1* null, i64* null, i8*** null, i64 0, i32 %548, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %584, i1* null, i1 %610, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %611 = load i8**, i8*** %282, align 8
  %612 = load i8*, i8** %611, align 8
  %613 = bitcast i8* %612 to void (i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*, i64*, i64*, i64*, i64*)*
  %.reload3 = load i32, i32* %.reg2mem2, align 4
  call void %613(i32 %.reload3, i32* %.out, i64* %.out1, i32* %.out2, i64* %.out3, i32* %.out4, i64* %.out5, i64* %.out6, i64* %.out7, i64* %.out8, i64* %.out9, i64* %.out10)
  %614 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  %615 = load i32, i32* %614, align 4
  %616 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %617 = load i32, i32* %616, align 4
  %618 = srem i32 %615, %617
  store i32 %618, i32* %dispatcher, align 4
  %619 = load i8*, i8** %6, align 8
  %620 = load i8, i8* %619, align 1
  %621 = and i8 %620, 1
  %622 = icmp eq i8 %621, 1
  %623 = mul i8 %620, %620
  %624 = xor i8 %623, %620
  %625 = and i8 %623, %620
  %626 = mul i8 2, %625
  %627 = add i8 %624, %626
  %628 = mul i8 39, %627
  %629 = add i8 23, %628
  %630 = mul i8 -105, %629
  %631 = add i64 %5, 1141742797601296784
  %632 = add i64 -4277331666606566289, %5
  %633 = sub i64 %632, -5419074464207863073
  %634 = or i64 %28, 4862734957031317571
  %635 = and i64 4862734957031317571, %28
  %636 = xor i64 4862734957031317571, %28
  %637 = or i64 %635, %636
  %638 = xor i64 %634, %631
  %639 = xor i64 %638, %637
  %640 = xor i64 %639, %633
  %641 = xor i64 %640, -431500407095596409
  %642 = add i64 %1, 6019573582610115404
  %643 = xor i64 6019573582610115404, %1
  %644 = and i64 6019573582610115404, %1
  %645 = mul i64 2, %644
  %646 = add i64 %643, %645
  %647 = and i64 %9, -5954223909039044814
  %648 = xor i64 %9, -1
  %649 = or i64 5954223909039044813, %648
  %650 = xor i64 %649, -1
  %651 = and i64 %650, -1
  %652 = xor i64 7261500058411379929, %646
  %653 = xor i64 %652, %651
  %654 = xor i64 %653, %647
  %655 = xor i64 %654, %642
  %656 = mul i64 %641, %655
  %657 = trunc i64 %656 to i8
  %658 = add i8 %657, %630
  %659 = srem i8 %658, 2
  %660 = icmp eq i8 %659, 0
  %661 = and i1 %622, %660
  %662 = xor i1 %622, %660
  %663 = or i1 %661, %662
  %664 = select i1 %663, i32 595012100, i32 595012097
  %665 = xor i32 %664, 5
  store i32 %665, i32* %0, align 4
  %666 = call i8** @bf698711486529780441(i32* %0)
  %667 = load i8*, i8** %666, align 8
  indirectbr i8* %667, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %668 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %668, align 4
  %669 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %669, align 4
  %670 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %670, align 4
  %671 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %671, align 4
  %672 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %673 = add i64 %1, -7613337616410697309
  %674 = sub i64 0, %1
  %675 = sub i64 -7613337616410697309, %674
  %676 = or i64 %3, 5025883385389013223
  %677 = xor i64 %3, -1
  %678 = and i64 %677, -206166074585076589
  %679 = and i64 %3, 206166074585076588
  %680 = or i64 %678, %679
  %681 = xor i64 -5144224289100598156, %680
  %682 = xor i64 %3, -1
  %683 = or i64 -5025883385389013224, %682
  %684 = xor i64 %683, -1
  %685 = and i64 %684, -1
  %686 = or i64 %681, %685
  %687 = xor i64 %675, %686
  %688 = xor i64 %687, %673
  %689 = xor i64 %688, %676
  %690 = xor i64 %689, -7383420978297338533
  %691 = add i64 %5, 8925669187391332538
  %692 = add i64 5685216775470774906, %5
  %693 = add i64 %692, 3240452411920557632
  %694 = and i64 %7, 6961946824044737365
  %695 = or i64 -6961946824044737366, %7
  %696 = sub i64 %695, -6961946824044737366
  %697 = xor i64 %694, -5402359283321408571
  %698 = xor i64 %697, %691
  %699 = xor i64 %698, %693
  %700 = xor i64 %699, %696
  %701 = mul i64 %690, %700
  %702 = trunc i64 %701 to i32
  store i32 %702, i32* %672, align 4
  %703 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %704 = load i32, i32* %703, align 4
  store i32 %704, i32* %dispatcher, align 4
  %705 = load i8*, i8** %4, align 8
  %706 = load i8, i8* %705, align 1
  %707 = and i8 %706, 1
  %708 = icmp eq i8 %707, 0
  %709 = mul i8 %706, %706
  %710 = add i8 %709, %706
  %711 = mul i8 %710, 3
  %712 = or i64 %3, 8204581299627226634
  %713 = and i64 8204581299627226634, %3
  %714 = xor i64 8204581299627226634, %3
  %715 = or i64 %713, %714
  %716 = or i64 %11, -4984960691717007391
  %717 = xor i64 %11, -1
  %718 = and i64 -4984960691717007391, %717
  %719 = add i64 %718, %11
  %720 = xor i64 %712, %715
  %721 = xor i64 %720, %719
  %722 = xor i64 %721, -1961831498746090079
  %723 = xor i64 %722, %716
  %724 = or i64 %11, -5595662861801870395
  %725 = xor i64 %11, -1
  %726 = and i64 %725, -8106692320846666143
  %727 = and i64 %11, 8106692320846666142
  %728 = or i64 %726, %727
  %729 = xor i64 4406499621996072356, %728
  %730 = xor i64 %11, -1
  %731 = or i64 5595662861801870394, %730
  %732 = xor i64 %731, -1
  %733 = and i64 %732, -1
  %734 = or i64 %729, %733
  %735 = or i64 %28, 1306100808192359746
  %736 = xor i64 %28, -1
  %737 = and i64 %736, 4022582034363194783
  %738 = and i64 %28, -4022582034363194784
  %739 = or i64 %737, %738
  %740 = xor i64 2734572073257132253, %739
  %741 = xor i64 %28, -1
  %742 = or i64 -1306100808192359747, %741
  %743 = xor i64 %742, -1
  %744 = and i64 %743, -1
  %745 = or i64 %740, %744
  %746 = and i64 %15, -7274365325149715749
  %747 = xor i64 %15, -1
  %748 = or i64 7274365325149715748, %747
  %749 = xor i64 %748, -1
  %750 = and i64 %749, -1
  %751 = xor i64 %745, %746
  %752 = xor i64 %751, %750
  %753 = xor i64 %752, %734
  %754 = xor i64 %753, -3774801036677747518
  %755 = xor i64 %754, %724
  %756 = xor i64 %755, %735
  %757 = mul i64 %723, %756
  %758 = trunc i64 %757 to i8
  %759 = srem i8 %711, %758
  %760 = icmp eq i8 %759, 0
  %761 = or i1 %708, %760
  %762 = select i1 %761, i32 595012102, i32 595012101
  %763 = xor i32 %762, 3
  store i32 %763, i32* %0, align 4
  %764 = call i8** @bf698711486529780441(i32* %0)
  %765 = load i8*, i8** %764, align 8
  indirectbr i8* %765, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %766 = load i8*, i8** %2, align 8
  %767 = load i8, i8* %766, align 1
  %768 = mul i8 %767, 2
  %769 = mul i8 %767, 2
  %770 = and i8 2, %769
  %771 = or i8 2, %769
  %772 = add i8 %770, %771
  %773 = mul i8 %768, %772
  %774 = srem i8 %773, 4
  %775 = icmp eq i8 %774, 0
  %776 = mul i8 %767, %767
  %777 = add i8 %776, %767
  %778 = add i64 %15, -1272651528848120287
  %779 = sub i64 0, %15
  %780 = add i64 1272651528848120287, %779
  %781 = sub i64 0, %780
  %782 = and i64 %13, -3588863311980766780
  %783 = or i64 3588863311980766779, %13
  %784 = sub i64 %783, 3588863311980766779
  %785 = xor i64 -2079234903282549257, %781
  %786 = xor i64 %785, %782
  %787 = xor i64 %786, %778
  %788 = xor i64 %787, %784
  %789 = or i64 %9, 9143756038148332622
  %790 = and i64 9143756038148332622, %9
  %791 = xor i64 9143756038148332622, %9
  %792 = or i64 %790, %791
  %793 = sext i32 %dispatcher1 to i64
  %794 = add i64 %793, 6786064998923325572
  %795 = sub i64 0, %793
  %796 = sub i64 6786064998923325572, %795
  %797 = add i64 %9, 6382404266670368833
  %798 = and i64 6382404266670368833, %9
  %799 = or i64 6382404266670368833, %9
  %800 = add i64 %798, %799
  %801 = xor i64 %800, %789
  %802 = xor i64 %801, %797
  %803 = xor i64 %802, %792
  %804 = xor i64 %803, %794
  %805 = xor i64 %804, 8992208676644431758
  %806 = xor i64 %805, %796
  %807 = mul i64 %788, %806
  %808 = trunc i64 %807 to i8
  %809 = srem i8 %777, %808
  %810 = sext i32 %dispatcher1 to i64
  %811 = and i64 %810, -6464019068894303089
  %812 = or i64 6464019068894303088, %810
  %813 = sub i64 %812, 6464019068894303088
  %814 = or i64 %15, -7971372945771838096
  %815 = xor i64 %15, -1
  %816 = and i64 -7971372945771838096, %815
  %817 = add i64 %816, %15
  %818 = xor i64 %814, -7581848388890543687
  %819 = xor i64 %818, %811
  %820 = xor i64 %819, %817
  %821 = xor i64 %820, %813
  %822 = and i64 %28, 2537668174987022158
  %823 = xor i64 %28, -1
  %824 = or i64 -2537668174987022159, %823
  %825 = xor i64 %824, -1
  %826 = and i64 %825, -1
  %827 = sext i32 %dispatcher1 to i64
  %828 = or i64 %827, 4370346195899954067
  %829 = xor i64 %827, -1
  %830 = and i64 %829, -3916631746854498367
  %831 = and i64 %827, 3916631746854498366
  %832 = or i64 %830, %831
  %833 = xor i64 -791575148634244014, %832
  %834 = xor i64 %827, -1
  %835 = or i64 -4370346195899954068, %834
  %836 = xor i64 %835, -1
  %837 = and i64 %836, -1
  %838 = or i64 %833, %837
  %839 = add i64 %5, -6603869487979556217
  %840 = sub i64 0, %5
  %841 = sub i64 -6603869487979556217, %840
  %842 = xor i64 %826, %828
  %843 = xor i64 %842, %838
  %844 = xor i64 %843, %841
  %845 = xor i64 %844, %822
  %846 = xor i64 %845, %839
  %847 = xor i64 %846, 0
  %848 = mul i64 %821, %847
  %849 = trunc i64 %848 to i8
  %850 = icmp eq i8 %809, %849
  %851 = xor i1 %775, true
  %852 = xor i1 %850, true
  %853 = or i1 %851, %852
  %854 = xor i1 %853, true
  %855 = and i1 %854, true
  %856 = select i1 %855, i32 595012098, i32 595012097
  %857 = xor i32 %856, 1222751514
  %858 = xor i32 %857, 1222751513
  store i32 %858, i32* %0, align 4
  %859 = call i8** @bf698711486529780441(i32* %0)
  %860 = load i8*, i8** %859, align 8
  indirectbr i8* %860, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %85, %EntryBasicBlockSplit
  %861 = load i8*, i8** %14, align 8
  %862 = load i8, i8* %861, align 1
  %863 = and i8 %862, 1
  %864 = icmp eq i8 %863, 0
  %865 = mul i8 %862, %862
  %866 = add i8 %865, %862
  %867 = mul i8 %866, 3
  %868 = sext i32 %dispatcher1 to i64
  %869 = or i64 %868, -7906749825151274318
  %870 = xor i64 %868, -1
  %871 = and i64 -7906749825151274318, %870
  %872 = add i64 %871, %868
  %873 = or i64 %13, -4027507839381545914
  %874 = xor i64 %13, -1
  %875 = and i64 -4027507839381545914, %874
  %876 = add i64 %875, %13
  %877 = add i64 %28, 1861963367114737258
  %878 = sub i64 0, %28
  %879 = sub i64 1861963367114737258, %878
  %880 = xor i64 %876, -3655184605877626681
  %881 = xor i64 %880, %872
  %882 = xor i64 %881, %877
  %883 = xor i64 %882, %879
  %884 = xor i64 %883, %869
  %885 = xor i64 %884, %873
  %886 = or i64 %7, 1159755715244784945
  %887 = xor i64 %7, -1
  %888 = and i64 1159755715244784945, %887
  %889 = add i64 %888, %7
  %890 = and i64 %3, 1713146119829100188
  %891 = or i64 -1713146119829100189, %3
  %892 = sub i64 %891, -1713146119829100189
  %893 = xor i64 %889, %890
  %894 = xor i64 %893, %886
  %895 = xor i64 %894, %892
  %896 = xor i64 %895, -6680905327254285842
  %897 = mul i64 %885, %896
  %898 = trunc i64 %897 to i8
  %899 = srem i8 %867, %898
  %900 = icmp eq i8 %899, 0
  %901 = or i1 %864, %900
  %902 = select i1 %901, i32 595012103, i32 595012103
  %903 = xor i32 %902, 0
  store i32 %903, i32* %0, align 4
  %904 = call i8** @bf698711486529780441(i32* %0)
  %905 = load i8*, i8** %904, align 8
  indirectbr i8* %905, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop..split.23() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012150)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@main_loop..split.23, %loopEnd), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012191)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop..split.23, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012110)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop..split.23, %.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012264)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop..split.23, %BogusBasicBlock), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012233)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main_loop..split.23, %.split), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012124)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@main_loop..split.23, %EntryBasicBlockSplit), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012195)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@main_loop..split.23, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012195, i32* %0, align 4
  %23 = call i8** @bf777061424148142830(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 %26, %28
  store i32 %29, i32* %dispatcher, align 4
  %30 = load i8*, i8** %6, align 8
  %31 = load i8, i8* %30, align 1
  %32 = mul i8 %31, 2
  %33 = mul i8 %31, 2
  %34 = add i8 2, %33
  %35 = mul i8 %32, %34
  %36 = srem i8 %35, 4
  %37 = icmp eq i8 %36, 0
  %38 = mul i8 %31, %31
  %39 = sub i8 0, %38
  %40 = or i64 %7, -3494358913944004680
  %41 = xor i64 %7, -1
  %42 = and i64 %41, 4601503964776906686
  %43 = and i64 %7, -4601503964776906687
  %44 = or i64 %42, %43
  %45 = xor i64 -1127491531298445306, %44
  %46 = xor i64 %7, -1
  %47 = or i64 3494358913944004679, %46
  %48 = xor i64 %47, -1
  %49 = and i64 %48, -1
  %50 = or i64 %45, %49
  %51 = and i64 %7, 5758398508219822348
  %52 = or i64 -5758398508219822349, %7
  %53 = sub i64 %52, -5758398508219822349
  %54 = add i64 %1, -3243073402647234427
  %55 = add i64 3134773142833645380, %1
  %56 = sub i64 %55, 6377846545480879807
  %57 = xor i64 %40, %51
  %58 = xor i64 %57, 395329409822439883
  %59 = xor i64 %58, %50
  %60 = xor i64 %59, %54
  %61 = xor i64 %60, %56
  %62 = xor i64 %61, %53
  %63 = and i64 %11, -740436536648632729
  %64 = xor i64 %11, -1
  %65 = or i64 740436536648632728, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = add i64 %5, 5767839736749628388
  %69 = add i64 6243165142897301012, %5
  %70 = add i64 %69, -475325406147672624
  %71 = xor i64 %63, 0
  %72 = xor i64 %71, %70
  %73 = xor i64 %72, %68
  %74 = xor i64 %73, %67
  %75 = mul i64 %62, %74
  %76 = trunc i64 %75 to i8
  %77 = sub i8 %76, %31
  %78 = add i8 %39, %77
  %79 = sub i8 0, %78
  %80 = srem i8 %79, 2
  %81 = icmp eq i8 %80, 0
  %82 = and i1 %37, %81
  %83 = select i1 %82, i32 595012191, i32 595012150
  %84 = xor i32 %83, -985899471
  %85 = xor i32 %84, -985899432
  store i32 %85, i32* %0, align 4
  %86 = call i8** @bf777061424148142830(i32* %0)
  %87 = load i8*, i8** %86, align 8
  indirectbr i8* %87, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %88 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  %91 = load i32, i32* %90, align 4
  %92 = add i32 %89, %91
  store i32 %92, i32* %dispatcher, align 4
  %93 = load i8*, i8** %14, align 8
  %94 = load i8, i8* %93, align 1
  %95 = mul i8 %94, %94
  %96 = add i8 %95, %94
  %97 = mul i8 %96, 3
  %98 = and i64 %9, -6154599609832727458
  %99 = or i64 6154599609832727457, %9
  %100 = sub i64 %99, 6154599609832727457
  %101 = and i64 %7, -6753311594308201753
  %102 = xor i64 %7, -1
  %103 = or i64 6753311594308201752, %102
  %104 = xor i64 %103, -1
  %105 = and i64 %104, -1
  %106 = xor i64 %105, 7903609190858542873
  %107 = xor i64 %106, %98
  %108 = xor i64 %107, %100
  %109 = xor i64 %108, %101
  %110 = add i64 %13, 7779603861634107636
  %111 = xor i64 7779603861634107636, %13
  %112 = and i64 7779603861634107636, %13
  %113 = mul i64 2, %112
  %114 = add i64 %111, %113
  %115 = add i64 %9, -219582616061179748
  %116 = sub i64 0, %9
  %117 = sub i64 -219582616061179748, %116
  %118 = and i64 %9, -8623046073289623123
  %119 = xor i64 %9, -1
  %120 = or i64 8623046073289623122, %119
  %121 = xor i64 %120, -1
  %122 = and i64 %121, -1
  %123 = xor i64 %115, %122
  %124 = xor i64 %123, %117
  %125 = xor i64 %124, %114
  %126 = xor i64 %125, %118
  %127 = xor i64 %126, %110
  %128 = xor i64 %127, -694100752311895470
  %129 = mul i64 %109, %128
  %130 = trunc i64 %129 to i8
  %131 = srem i8 %97, %130
  %132 = icmp eq i8 %131, 0
  %133 = mul i8 %94, %94
  %134 = add i8 %133, %94
  %135 = srem i8 %134, 2
  %136 = and i64 %7, 1250479677228615891
  %137 = xor i64 %7, -1
  %138 = or i64 -1250479677228615892, %137
  %139 = xor i64 %138, -1
  %140 = and i64 %139, -1
  %141 = sext i32 %dispatcher1 to i64
  %142 = add i64 %141, -2755932215954404623
  %143 = xor i64 -2755932215954404623, %141
  %144 = and i64 -2755932215954404623, %141
  %145 = mul i64 2, %144
  %146 = add i64 %143, %145
  %147 = or i64 %11, 1963724350610409891
  %148 = and i64 1963724350610409891, %11
  %149 = xor i64 1963724350610409891, %11
  %150 = or i64 %148, %149
  %151 = xor i64 -5439522942653161247, %146
  %152 = xor i64 %151, %147
  %153 = xor i64 %152, %136
  %154 = xor i64 %153, %142
  %155 = xor i64 %154, %140
  %156 = xor i64 %155, %150
  %157 = or i64 %5, 6383762762920527424
  %158 = xor i64 %5, -1
  %159 = and i64 6383762762920527424, %158
  %160 = add i64 %159, %5
  %161 = add i64 %11, -7476528976623425312
  %162 = and i64 -7476528976623425312, %11
  %163 = or i64 -7476528976623425312, %11
  %164 = add i64 %162, %163
  %165 = add i64 %5, -4134509594944072906
  %166 = sub i64 0, %5
  %167 = add i64 4134509594944072906, %166
  %168 = sub i64 0, %167
  %169 = xor i64 %160, %164
  %170 = xor i64 %169, %168
  %171 = xor i64 %170, %161
  %172 = xor i64 %171, %165
  %173 = xor i64 %172, 0
  %174 = xor i64 %173, %157
  %175 = mul i64 %156, %174
  %176 = trunc i64 %175 to i8
  %177 = icmp eq i8 %135, %176
  %178 = and i1 %132, %177
  %179 = or i64 %9, 2465703345562126602
  %180 = xor i64 %9, -1
  %181 = and i64 %180, 7069482515722915316
  %182 = and i64 %9, -7069482515722915317
  %183 = or i64 %181, %182
  %184 = xor i64 4624115745834845438, %183
  %185 = xor i64 %9, -1
  %186 = or i64 -2465703345562126603, %185
  %187 = xor i64 %186, -1
  %188 = and i64 %187, -1
  %189 = or i64 %184, %188
  %190 = or i64 %13, -6982926049966002598
  %191 = xor i64 %13, -1
  %192 = and i64 -6982926049966002598, %191
  %193 = add i64 %192, %13
  %194 = xor i64 %179, 1901987981852232015
  %195 = xor i64 %194, %193
  %196 = xor i64 %195, %189
  %197 = xor i64 %196, %190
  %198 = and i64 %5, -3117105599894496128
  %199 = xor i64 %5, -1
  %200 = xor i64 -3117105599894496128, %199
  %201 = and i64 %200, -3117105599894496128
  %202 = and i64 %7, 3476358479592459446
  %203 = or i64 -3476358479592459447, %7
  %204 = sub i64 %203, -3476358479592459447
  %205 = xor i64 %201, 6646832949484413101
  %206 = xor i64 %205, %198
  %207 = xor i64 %206, %202
  %208 = xor i64 %207, %204
  %209 = mul i64 %197, %208
  %210 = trunc i64 %209 to i32
  %211 = select i1 %178, i32 %210, i32 595012150
  %212 = xor i32 %211, -1
  %213 = and i32 %212, 85
  %214 = and i32 %211, -86
  %215 = or i32 %213, %214
  store i32 %215, i32* %0, align 4
  %216 = call i8** @bf777061424148142830(i32* %0)
  %217 = load i8*, i8** %216, align 8
  indirectbr i8* %217, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %218 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %218, align 4
  %219 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  %220 = add i64 %1, 239330919021827013
  %221 = sub i64 0, %1
  %222 = sub i64 239330919021827013, %221
  %223 = add i64 %5, 4030165778503721522
  %224 = sub i64 0, %5
  %225 = sub i64 4030165778503721522, %224
  %226 = or i64 %9, 7732694392118363360
  %227 = xor i64 %9, -1
  %228 = and i64 7732694392118363360, %227
  %229 = add i64 %228, %9
  %230 = xor i64 %226, %222
  %231 = xor i64 %230, -1266054579843138107
  %232 = xor i64 %231, %225
  %233 = xor i64 %232, %220
  %234 = xor i64 %233, %229
  %235 = xor i64 %234, %223
  %236 = add i64 %3, 8365907092705265107
  %237 = add i64 1976180755151338395, %3
  %238 = sub i64 %237, -6389726337553926712
  %239 = add i64 %5, 71172627318588927
  %240 = add i64 2593268752627545681, %5
  %241 = sub i64 %240, 2522096125308956754
  %242 = or i64 %7, -4081076010820121059
  %243 = xor i64 %7, -1
  %244 = and i64 -4081076010820121059, %243
  %245 = add i64 %244, %7
  %246 = xor i64 %239, %242
  %247 = xor i64 %246, 7831005881185138957
  %248 = xor i64 %247, %236
  %249 = xor i64 %248, %245
  %250 = xor i64 %249, %238
  %251 = xor i64 %250, %241
  %252 = mul i64 %235, %251
  %253 = trunc i64 %252 to i32
  store i32 %253, i32* %219, align 4
  %254 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %254, align 4
  %255 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %255, align 4
  %256 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %257 = load i32, i32* %256, align 4
  store i32 %257, i32* %dispatcher, align 4
  %258 = load i8*, i8** %10, align 8
  %259 = load i8, i8* %258, align 1
  %260 = xor i8 %259, -1
  %261 = or i8 %260, 1
  %262 = xor i8 %259, -1
  %263 = sub i8 %261, %262
  %264 = add i64 %9, -3830320164069347300
  %265 = sub i64 0, %9
  %266 = add i64 3830320164069347300, %265
  %267 = sub i64 0, %266
  %268 = and i64 %5, 6208066210094440587
  %269 = or i64 -6208066210094440588, %5
  %270 = sub i64 %269, -6208066210094440588
  %271 = add i64 %5, 6764859869418110752
  %272 = xor i64 6764859869418110752, %5
  %273 = and i64 6764859869418110752, %5
  %274 = mul i64 2, %273
  %275 = add i64 %272, %274
  %276 = xor i64 3296025566335259227, %270
  %277 = xor i64 %276, %264
  %278 = xor i64 %277, %267
  %279 = xor i64 %278, %271
  %280 = xor i64 %279, %268
  %281 = xor i64 %280, %275
  %282 = add i64 %5, 7226431322171828567
  %283 = add i64 -8600896005803479265, %5
  %284 = sub i64 %283, 2619416745734243784
  %285 = or i64 %13, -3327918213632679036
  %286 = and i64 -3327918213632679036, %13
  %287 = xor i64 -3327918213632679036, %13
  %288 = or i64 %286, %287
  %289 = sext i32 %dispatcher1 to i64
  %290 = or i64 %289, -541190905119963154
  %291 = xor i64 %289, -1
  %292 = and i64 -541190905119963154, %291
  %293 = add i64 %292, %289
  %294 = xor i64 %285, %290
  %295 = xor i64 %294, %282
  %296 = xor i64 %295, %284
  %297 = xor i64 %296, %293
  %298 = xor i64 %297, %288
  %299 = xor i64 %298, 0
  %300 = mul i64 %281, %299
  %301 = trunc i64 %300 to i8
  %302 = icmp eq i8 %263, %301
  %303 = mul i8 %259, %259
  %304 = add i8 %303, %259
  %305 = mul i8 %304, 3
  %306 = srem i8 %305, 2
  %307 = icmp eq i8 %306, 0
  %308 = or i1 %302, %307
  %309 = and i64 %1, 5037696149307398007
  %310 = xor i64 %1, -1
  %311 = or i64 -5037696149307398008, %310
  %312 = xor i64 %311, -1
  %313 = and i64 %312, -1
  %314 = add i64 %1, 4265097083140621010
  %315 = and i64 4265097083140621010, %1
  %316 = or i64 4265097083140621010, %1
  %317 = add i64 %315, %316
  %318 = add i64 %11, -8391546121016520637
  %319 = xor i64 -8391546121016520637, %11
  %320 = and i64 -8391546121016520637, %11
  %321 = mul i64 2, %320
  %322 = add i64 %319, %321
  %323 = xor i64 -5780445742145644841, %314
  %324 = xor i64 %323, %322
  %325 = xor i64 %324, %309
  %326 = xor i64 %325, %313
  %327 = xor i64 %326, %317
  %328 = xor i64 %327, %318
  %329 = and i64 %3, -767623704647975764
  %330 = or i64 767623704647975763, %3
  %331 = sub i64 %330, 767623704647975763
  %332 = or i64 %1, 7767924402585529395
  %333 = xor i64 %1, -1
  %334 = and i64 %333, -4314467572738520957
  %335 = and i64 %1, 4314467572738520956
  %336 = or i64 %334, %335
  %337 = xor i64 -5777317273978510160, %336
  %338 = xor i64 %1, -1
  %339 = or i64 -7767924402585529396, %338
  %340 = xor i64 %339, -1
  %341 = and i64 %340, -1
  %342 = or i64 %337, %341
  %343 = or i64 %9, -2421208017396812914
  %344 = xor i64 %9, -1
  %345 = and i64 %344, 7190198173640687424
  %346 = and i64 %9, -7190198173640687425
  %347 = or i64 %345, %346
  %348 = xor i64 -4778720499955938098, %347
  %349 = xor i64 %9, -1
  %350 = or i64 2421208017396812913, %349
  %351 = xor i64 %350, -1
  %352 = and i64 %351, -1
  %353 = or i64 %348, %352
  %354 = xor i64 %332, %342
  %355 = xor i64 %354, %353
  %356 = xor i64 %355, %331
  %357 = xor i64 %356, 3886931477032746682
  %358 = xor i64 %357, %343
  %359 = xor i64 %358, %329
  %360 = mul i64 %328, %359
  %361 = trunc i64 %360 to i32
  %362 = select i1 %308, i32 %361, i32 595012124
  %363 = xor i32 %362, 42
  store i32 %363, i32* %0, align 4
  %364 = call i8** @bf777061424148142830(i32* %0)
  %365 = load i8*, i8** %364, align 8
  indirectbr i8* %365, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %366 = load i8*, i8** %10, align 8
  %367 = load i8, i8* %366, align 1
  %368 = and i8 %367, 1
  %369 = icmp eq i8 %368, 0
  %370 = mul i8 %367, %367
  %371 = sub i8 %370, -107
  %372 = add i8 %371, %367
  %373 = add i64 %5, 1778718513224159136
  %374 = and i64 1778718513224159136, %5
  %375 = or i64 1778718513224159136, %5
  %376 = add i64 %374, %375
  %377 = or i64 %1, -7833289996431105014
  %378 = xor i64 %1, -1
  %379 = and i64 %378, 4376240394209354971
  %380 = and i64 %1, -4376240394209354972
  %381 = or i64 %379, %380
  %382 = xor i64 -5768804135838547759, %381
  %383 = xor i64 %1, -1
  %384 = or i64 7833289996431105013, %383
  %385 = xor i64 %384, -1
  %386 = and i64 %385, -1
  %387 = or i64 %382, %386
  %388 = add i64 %5, -1664479195042169042
  %389 = and i64 -1664479195042169042, %5
  %390 = or i64 -1664479195042169042, %5
  %391 = add i64 %389, %390
  %392 = xor i64 %377, %376
  %393 = xor i64 %392, %387
  %394 = xor i64 %393, %388
  %395 = xor i64 %394, %373
  %396 = xor i64 %395, 2694118263366509467
  %397 = xor i64 %396, %391
  %398 = add i64 %9, 4687079376597967323
  %399 = and i64 4687079376597967323, %9
  %400 = or i64 4687079376597967323, %9
  %401 = add i64 %399, %400
  %402 = add i64 %3, 1741975233796804898
  %403 = and i64 1741975233796804898, %3
  %404 = or i64 1741975233796804898, %3
  %405 = add i64 %403, %404
  %406 = and i64 %13, 3181499336618555361
  %407 = xor i64 %13, -1
  %408 = or i64 -3181499336618555362, %407
  %409 = xor i64 %408, -1
  %410 = and i64 %409, -1
  %411 = xor i64 %398, %410
  %412 = xor i64 %411, %402
  %413 = xor i64 %412, %401
  %414 = xor i64 %413, %406
  %415 = xor i64 %414, %405
  %416 = xor i64 %415, 690519388905629583
  %417 = mul i64 %397, %416
  %418 = trunc i64 %417 to i8
  %419 = add i8 %372, %418
  %420 = mul i8 %419, 3
  %421 = and i64 %7, 8312996809336153711
  %422 = xor i64 %7, -1
  %423 = xor i64 8312996809336153711, %422
  %424 = and i64 %423, 8312996809336153711
  %425 = add i64 %11, 2327088963382605691
  %426 = add i64 4018847416514455732, %11
  %427 = sub i64 %426, 1691758453131850041
  %428 = and i64 %1, 6184493461803773873
  %429 = xor i64 %1, -1
  %430 = or i64 -6184493461803773874, %429
  %431 = xor i64 %430, -1
  %432 = and i64 %431, -1
  %433 = xor i64 2835609180719890269, %421
  %434 = xor i64 %433, %428
  %435 = xor i64 %434, %432
  %436 = xor i64 %435, %424
  %437 = xor i64 %436, %425
  %438 = xor i64 %437, %427
  %439 = or i64 %1, -8257412743566114362
  %440 = xor i64 %1, -1
  %441 = and i64 -8257412743566114362, %440
  %442 = add i64 %441, %1
  %443 = or i64 %5, -8242658428816174714
  %444 = xor i64 %5, -1
  %445 = and i64 %444, -8714500121327639365
  %446 = and i64 %5, 8714500121327639364
  %447 = or i64 %445, %446
  %448 = xor i64 762183226556069181, %447
  %449 = xor i64 %5, -1
  %450 = or i64 8242658428816174713, %449
  %451 = xor i64 %450, -1
  %452 = and i64 %451, -1
  %453 = or i64 %448, %452
  %454 = xor i64 2551454453619497450, %443
  %455 = xor i64 %454, %442
  %456 = xor i64 %455, %453
  %457 = xor i64 %456, %439
  %458 = mul i64 %438, %457
  %459 = trunc i64 %458 to i8
  %460 = srem i8 %420, %459
  %461 = icmp eq i8 %460, 0
  %462 = or i1 %369, %461
  %463 = or i64 %7, 5484260035833599395
  %464 = xor i64 %7, -1
  %465 = and i64 5484260035833599395, %464
  %466 = add i64 %465, %7
  %467 = add i64 %9, 1337214862937460499
  %468 = and i64 1337214862937460499, %9
  %469 = or i64 1337214862937460499, %9
  %470 = add i64 %468, %469
  %471 = add i64 %7, 4363984400797127910
  %472 = sub i64 0, %7
  %473 = add i64 -4363984400797127910, %472
  %474 = sub i64 0, %473
  %475 = xor i64 %463, %474
  %476 = xor i64 %475, -9194686548726538271
  %477 = xor i64 %476, %470
  %478 = xor i64 %477, %466
  %479 = xor i64 %478, %471
  %480 = xor i64 %479, %467
  %481 = and i64 %5, -6044256363980271189
  %482 = xor i64 %5, -1
  %483 = or i64 6044256363980271188, %482
  %484 = xor i64 %483, -1
  %485 = and i64 %484, -1
  %486 = and i64 %13, 6870576882905384369
  %487 = xor i64 %13, -1
  %488 = xor i64 6870576882905384369, %487
  %489 = and i64 %488, 6870576882905384369
  %490 = add i64 %9, -7861755556309990253
  %491 = sub i64 0, %9
  %492 = add i64 7861755556309990253, %491
  %493 = sub i64 0, %492
  %494 = xor i64 -5131363653381382232, %489
  %495 = xor i64 %494, %485
  %496 = xor i64 %495, %481
  %497 = xor i64 %496, %493
  %498 = xor i64 %497, %486
  %499 = xor i64 %498, %490
  %500 = mul i64 %480, %499
  %501 = trunc i64 %500 to i32
  %502 = select i1 %462, i32 %501, i32 595012150
  %503 = xor i32 %502, 158
  store i32 %503, i32* %0, align 4
  %504 = call i8** @bf777061424148142830(i32* %0)
  %505 = load i8*, i8** %504, align 8
  indirectbr i8* %505, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %506 = load i8*, i8** %2, align 8
  %507 = load i8, i8* %506, align 1
  %508 = mul i8 %507, 2
  %509 = mul i8 %507, 2
  %510 = sub i8 0, %509
  %511 = sub i8 2, %510
  %512 = mul i8 %508, %511
  %513 = srem i8 %512, 4
  %514 = icmp eq i8 %513, 0
  %515 = mul i8 %507, %507
  %516 = mul i8 %515, %507
  %517 = add i8 %516, %507
  %518 = srem i8 %517, 2
  %519 = icmp eq i8 %518, 0
  %520 = xor i1 %519, true
  %521 = xor i1 %514, %520
  %522 = and i1 %521, %514
  %523 = add i64 %1, -3840330406697505958
  %524 = add i64 -5809839012032468008, %1
  %525 = add i64 %524, 1969508605334962050
  %526 = add i64 %3, -2165999893309609019
  %527 = xor i64 -2165999893309609019, %3
  %528 = and i64 -2165999893309609019, %3
  %529 = mul i64 2, %528
  %530 = add i64 %527, %529
  %531 = xor i64 %530, %525
  %532 = xor i64 %531, 9118304537243548099
  %533 = xor i64 %532, %523
  %534 = xor i64 %533, %526
  %535 = sext i32 %dispatcher1 to i64
  %536 = or i64 %535, 7220229454051735398
  %537 = xor i64 %535, -1
  %538 = and i64 7220229454051735398, %537
  %539 = add i64 %538, %535
  %540 = or i64 %7, 630096457212680043
  %541 = xor i64 %7, -1
  %542 = and i64 630096457212680043, %541
  %543 = add i64 %542, %7
  %544 = xor i64 %543, %536
  %545 = xor i64 %544, %539
  %546 = xor i64 %545, %540
  %547 = xor i64 %546, -4949101678830001439
  %548 = mul i64 %534, %547
  %549 = trunc i64 %548 to i32
  %550 = select i1 %522, i32 595012124, i32 %549
  %551 = and i64 %13, -9021326035908550197
  %552 = or i64 9021326035908550196, %13
  %553 = sub i64 %552, 9021326035908550196
  %554 = add i64 %9, -752043994178982244
  %555 = sub i64 0, %9
  %556 = add i64 752043994178982244, %555
  %557 = sub i64 0, %556
  %558 = xor i64 %551, %554
  %559 = xor i64 %558, %557
  %560 = xor i64 %559, %553
  %561 = xor i64 %560, 6166968157388024907
  %562 = add i64 %7, 8852942762758865016
  %563 = add i64 -4633002463071380165, %7
  %564 = sub i64 %563, 4960798847879306435
  %565 = and i64 %7, -242061351145097025
  %566 = xor i64 %7, -1
  %567 = xor i64 -242061351145097025, %566
  %568 = and i64 %567, -242061351145097025
  %569 = xor i64 %564, %568
  %570 = xor i64 %569, -4469769606590971235
  %571 = xor i64 %570, %565
  %572 = xor i64 %571, %562
  %573 = mul i64 %561, %572
  %574 = trunc i64 %573 to i32
  %575 = xor i32 %550, %574
  %576 = add i64 %3, 101482897405030565
  %577 = and i64 101482897405030565, %3
  %578 = or i64 101482897405030565, %3
  %579 = add i64 %577, %578
  %580 = or i64 %7, -6665899543618071615
  %581 = xor i64 %7, -1
  %582 = and i64 -6665899543618071615, %581
  %583 = add i64 %582, %7
  %584 = xor i64 %576, %580
  %585 = xor i64 %584, %583
  %586 = xor i64 %585, 7411832831489530401
  %587 = xor i64 %586, %579
  %588 = or i64 %3, 8096335004292146664
  %589 = xor i64 %3, -1
  %590 = and i64 8096335004292146664, %589
  %591 = add i64 %590, %3
  %592 = and i64 %9, 1035498866535782419
  %593 = xor i64 %9, -1
  %594 = xor i64 1035498866535782419, %593
  %595 = and i64 %594, 1035498866535782419
  %596 = and i64 %3, 414678035745611423
  %597 = or i64 -414678035745611424, %3
  %598 = sub i64 %597, -414678035745611424
  %599 = xor i64 %592, %595
  %600 = xor i64 %599, -4024020312333629793
  %601 = xor i64 %600, %591
  %602 = xor i64 %601, %588
  %603 = xor i64 %602, %598
  %604 = xor i64 %603, %596
  %605 = mul i64 %587, %604
  %606 = trunc i64 %605 to i32
  %607 = and i32 %575, %606
  %608 = and i32 %550, -128
  %609 = or i32 %607, %608
  store i32 %609, i32* %0, align 4
  %610 = call i8** @bf777061424148142830(i32* %0)
  %611 = load i8*, i8** %610, align 8
  indirectbr i8* %611, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.extracted(i32 %0, i1 %1, i1* %.out) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012276)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.extracted, %"2"), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012216)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub1.exitStub), i8** %6, align 8
  %7 = sext i32 %0 to i64
  %8 = add i64 %7, 3356058380134522090
  %9 = sub i64 0, %7
  %10 = add i64 -3356058380134522090, %9
  %11 = sub i64 0, %10
  %12 = sext i32 %0 to i64
  %13 = or i64 %12, 6559841815124983955
  %14 = and i64 6559841815124983955, %12
  %15 = xor i64 6559841815124983955, %12
  %16 = or i64 %14, %15
  %17 = xor i64 %8, %13
  %18 = xor i64 %17, %16
  %19 = xor i64 %18, 7631550726292439527
  %20 = xor i64 %19, %11
  %21 = sext i32 %0 to i64
  %22 = add i64 %21, -7206025670596797266
  %23 = sub i64 0, %21
  %24 = add i64 7206025670596797266, %23
  %25 = sub i64 0, %24
  %26 = sext i32 %0 to i64
  %27 = add i64 %26, -1249879208600282188
  %28 = sub i64 0, %26
  %29 = add i64 1249879208600282188, %28
  %30 = sub i64 0, %29
  %31 = sext i32 %0 to i64
  %32 = and i64 %31, 1639628123352736492
  %33 = xor i64 %31, -1
  %34 = or i64 -1639628123352736493, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, -1
  %37 = xor i64 %32, %30
  %38 = xor i64 %37, %27
  %39 = xor i64 %38, %22
  %40 = xor i64 %39, %36
  %41 = xor i64 %40, %25
  %42 = xor i64 %41, -5098879331046546946
  %43 = mul i64 %20, %42
  %44 = call i64 @h11804894491772278134(i64 %43)
  %45 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %44
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub.exitStub), i8** %45, align 8
  %46 = sext i32 %0 to i64
  %47 = add i64 %46, 5533793826486786259
  %48 = sub i64 0, %46
  %49 = sub i64 5533793826486786259, %48
  %50 = sext i32 %0 to i64
  %51 = add i64 %50, 6845537063974809398
  %52 = sub i64 0, %50
  %53 = sub i64 6845537063974809398, %52
  %54 = xor i64 %49, %51
  %55 = xor i64 %54, -5847165016159480039
  %56 = xor i64 %55, %53
  %57 = xor i64 %56, %47
  %58 = sext i32 %0 to i64
  %59 = or i64 %58, -1736707289474596237
  %60 = xor i64 %58, -1
  %61 = and i64 %60, -3231995772021790568
  %62 = and i64 %58, 3231995772021790567
  %63 = or i64 %61, %62
  %64 = xor i64 3801140425597299435, %63
  %65 = xor i64 %58, -1
  %66 = or i64 1736707289474596236, %65
  %67 = xor i64 %66, -1
  %68 = and i64 %67, -1
  %69 = or i64 %64, %68
  %70 = sext i32 %0 to i64
  %71 = or i64 %70, 8481744826677616589
  %72 = xor i64 %70, -1
  %73 = and i64 %72, -840018064628257351
  %74 = and i64 %70, 840018064628257350
  %75 = or i64 %73, %74
  %76 = xor i64 -9087527383408594316, %75
  %77 = xor i64 %70, -1
  %78 = or i64 -8481744826677616590, %77
  %79 = xor i64 %78, -1
  %80 = and i64 %79, -1
  %81 = or i64 %76, %80
  %82 = xor i64 2129660645216047651, %81
  %83 = xor i64 %82, %59
  %84 = xor i64 %83, %69
  %85 = xor i64 %84, %71
  %86 = mul i64 %57, %85
  %87 = call i64 @h11804894491772278134(i64 %86)
  %88 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %87
  store i8* blockaddress(@main_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %88, align 8
  %89 = call i64 @h11804894491772278134(i64 595012220)
  %90 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %89
  store i8* blockaddress(@main_loop.extracted.extracted, %BogusBasciBlock), i8** %90, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %91 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.extracted, %BogusBasciBlock), i8** %91, align 8
  %92 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %92, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %93 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %93, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.extracted, %"2"), i8** %.reload5, align 8
  %94 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %94, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %95 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %95, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub1.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %96 = load i8*, i8** %.reload, align 8
  indirectbr i8* %96, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %97 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.extracted, %BogusBasciBlock), i8** %97, align 8
  %98 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub.exitStub), i8** %98, align 8
  %99 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.extracted, %.exitStub1.exitStub), i8** %99, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %100 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %100, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %101 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %101, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %102 = srem i32 %0, 2
  %103 = icmp eq i32 %102, 0
  %104 = and i1 %1, %103
  store i1 %104, i1* %.out, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %105 = select i1 %104, i8** %.reload7, i8** %.reload10
  %106 = load i8*, i8** %105, align 8
  indirectbr i8* %106, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub1.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop..split.17.extracted(i32 %0, i1 %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012224)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop..split.17.extracted, %.exitStub5.exitStub), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012125)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop..split.17.extracted, %.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012131)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop..split.17.extracted, %"2"), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012237)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main_loop..split.17.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012101)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@main_loop..split.17.extracted, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop..split.17.extracted, %BogusBasciBlock), i8** %13, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %14, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop..split.17.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %15, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop..split.17.extracted, %"2"), i8** %.reload5, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %16, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop..split.17.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %17, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop..split.17.extracted, %.exitStub5.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %18 = load i8*, i8** %.reload, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %19 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop..split.17.extracted, %.exitStub5.exitStub), i8** %19, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop..split.17.extracted, %"2"), i8** %20, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop..split.17.extracted, %.exitStub.exitStub), i8** %21, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %22 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %22, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %23 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %23, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %24 = sext i32 %0 to i64
  %25 = add i64 %24, 6518943323101823619
  %26 = add i64 -8009768268819539229, %24
  %27 = sub i64 %26, 3918032481788188768
  %28 = add i64 %5, 8966658312031800098
  %29 = add i64 -5736103208226062159, %5
  %30 = add i64 %29, -3743982553451689359
  %31 = xor i64 %30, %27
  %32 = xor i64 %31, -4780127156138742475
  %33 = xor i64 %32, %25
  %34 = xor i64 %33, %28
  %35 = or i64 %9, 1460359986205663402
  %36 = xor i64 %9, -1
  %37 = and i64 1460359986205663402, %36
  %38 = add i64 %37, %9
  %39 = and i64 %5, -5023591800537130739
  %40 = or i64 5023591800537130738, %5
  %41 = sub i64 %40, 5023591800537130738
  %42 = xor i64 %39, %41
  %43 = xor i64 %42, 0
  %44 = xor i64 %43, %35
  %45 = xor i64 %44, %38
  %46 = mul i64 %34, %45
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %0, %47
  %49 = or i1 %1, %48
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %50 = select i1 %49, i8** %.reload7, i8** %.reload10
  %51 = load i8*, i8** %50, align 8
  indirectbr i8* %51, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub5.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @main_loop.extracted.18.extracted(i1 %0, i1 %1, i1* %.out4, i1 %2, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1 %3) #1 {
entry:
  %4 = alloca i32, align 4
  %5 = call i64 @h11804894491772278134(i64 595012185)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.loopexit.exitStub.exitStub), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012100)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.18.extracted, %"2"), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012169)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.18.extracted, %EntryBasicBlockSplit), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012211)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.exitStub.exitStub), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012197)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@main_loop.extracted.18.extracted, %BogusBasciBlock), i8** %14, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18.extracted, %BogusBasciBlock), i8** %15, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %16, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %17, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %"2"), i8** %.reload5, align 8
  %18 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %18, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %19, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.loopexit.exitStub.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %20 = load i8*, i8** %.reload, align 8
  indirectbr i8* %20, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %21 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.18.extracted, %BogusBasciBlock), i8** %21, align 8
  %22 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.18.extracted, %.loopexit.exitStub.exitStub), i8** %22, align 8
  %23 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@main_loop.extracted.18.extracted, %EntryBasicBlockSplit), i8** %23, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %24 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %24, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %25 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %25, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %26 = xor i1 %0, true
  %27 = or i1 %26, false
  %28 = xor i1 %27, true
  %29 = or i64 %7, -1920450192045159659
  %30 = xor i64 %7, -1
  %31 = and i64 %30, -8938663291932402168
  %32 = and i64 %7, 8938663291932402167
  %33 = or i64 %31, %32
  %34 = xor i64 7397810696019957021, %33
  %35 = xor i64 %7, -1
  %36 = or i64 1920450192045159658, %35
  %37 = xor i64 %36, -1
  %38 = and i64 %37, -1
  %39 = or i64 %34, %38
  %40 = and i64 %9, -4506338072065009950
  %41 = or i64 4506338072065009949, %9
  %42 = sub i64 %41, 4506338072065009949
  %43 = add i64 %11, -9121800290114561905
  %44 = sub i64 0, %11
  %45 = add i64 9121800290114561905, %44
  %46 = sub i64 0, %45
  %47 = xor i64 %39, %40
  %48 = xor i64 %47, %43
  %49 = xor i64 %48, -3578044843841408513
  %50 = xor i64 %49, %46
  %51 = xor i64 %50, %42
  %52 = xor i64 %51, %29
  %53 = or i64 %9, -4292519040567196169
  %54 = xor i64 %9, -1
  %55 = and i64 -4292519040567196169, %54
  %56 = add i64 %55, %9
  %57 = or i64 %13, 4370060523700475264
  %58 = xor i64 %13, -1
  %59 = and i64 %58, 1384004477800961553
  %60 = and i64 %13, -1384004477800961554
  %61 = or i64 %59, %60
  %62 = xor i64 3427637725799351185, %61
  %63 = xor i64 %13, -1
  %64 = or i64 -4370060523700475265, %63
  %65 = xor i64 %64, -1
  %66 = and i64 %65, -1
  %67 = or i64 %62, %66
  %68 = or i64 %5, 6829127718682026473
  %69 = and i64 6829127718682026473, %5
  %70 = xor i64 6829127718682026473, %5
  %71 = or i64 %69, %70
  %72 = xor i64 6517114270165093887, %56
  %73 = xor i64 %72, %68
  %74 = xor i64 %73, %53
  %75 = xor i64 %74, %57
  %76 = xor i64 %75, %71
  %77 = xor i64 %76, %67
  %78 = mul i64 %52, %77
  %79 = trunc i64 %78 to i1
  %80 = and i1 %28, %79
  %81 = xor i1 %1, true
  %82 = and i1 %81, %1
  %83 = and i1 %80, %82
  %84 = xor i1 %80, %82
  %85 = or i1 %83, %84
  store i1 %85, i1* %.out4, align 1
  %86 = xor i1 %2, true
  %87 = add i64 %11, -6152961812309886348
  %88 = sub i64 0, %11
  %89 = sub i64 -6152961812309886348, %88
  %90 = add i64 %5, -4548885938023921222
  %91 = sub i64 0, %5
  %92 = sub i64 -4548885938023921222, %91
  %93 = xor i64 %89, %92
  %94 = xor i64 %93, %87
  %95 = xor i64 %94, %90
  %96 = xor i64 %95, 4339945338042864215
  %97 = add i64 %11, -4728997043986605057
  %98 = add i64 2095218104931908977, %11
  %99 = add i64 %98, -6824215148918514034
  %100 = or i64 %13, -7164695501729058202
  %101 = xor i64 %13, -1
  %102 = and i64 -7164695501729058202, %101
  %103 = add i64 %102, %13
  %104 = add i64 %11, 5311906906088456778
  %105 = xor i64 5311906906088456778, %11
  %106 = and i64 5311906906088456778, %11
  %107 = mul i64 2, %106
  %108 = add i64 %105, %107
  %109 = xor i64 %108, %104
  %110 = xor i64 %109, %99
  %111 = xor i64 %110, %103
  %112 = xor i64 %111, %100
  %113 = xor i64 %112, 6171256543609796967
  %114 = xor i64 %113, %97
  %115 = mul i64 %96, %114
  %116 = trunc i64 %115 to i1
  %117 = and i1 %86, %116
  %118 = and i1 %2, false
  %119 = or i1 %117, %118
  store i1 %119, i1* %.out5, align 1
  %120 = or i1 %85, %119
  store i1 %120, i1* %.out6, align 1
  %121 = xor i1 %120, true
  store i1 %121, i1* %.out7, align 1
  %122 = and i1 %121, true
  store i1 %122, i1* %.out8, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %123 = select i1 %3, i8** %.reload7, i8** %.reload10
  %124 = load i8*, i8** %123, align 8
  indirectbr i8* %124, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.loopexit.exitStub.exitStub:                      ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %125 = or i64 %13, -2793920567120815597
  %126 = xor i64 %13, -1
  %127 = and i64 -2793920567120815597, %126
  %128 = add i64 %127, %13
  %129 = add i64 %13, 7340336472579388936
  %130 = add i64 5131764005917011499, %13
  %131 = add i64 %130, 2208572466662377437
  %132 = xor i64 %131, %128
  %133 = xor i64 %132, 8195341123089145165
  %134 = xor i64 %133, %125
  %135 = xor i64 %134, %129
  %136 = and i64 %9, 1154829114885142352
  %137 = or i64 -1154829114885142353, %9
  %138 = sub i64 %137, -1154829114885142353
  %139 = and i64 %11, -3139404876795671104
  %140 = xor i64 %11, -1
  %141 = or i64 3139404876795671103, %140
  %142 = xor i64 %141, -1
  %143 = and i64 %142, -1
  %144 = xor i64 0, %138
  %145 = xor i64 %144, %136
  %146 = xor i64 %145, %139
  %147 = xor i64 %146, %143
  %148 = mul i64 %135, %147
  %149 = trunc i64 %148 to i1
  ret i1 %149
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.20.extracted(i32 %0, i32* %.out3, i1* %.out4, i1 %1, i1* %.out5, i1* %.out6, i1* %.out7, i1* %.out8, i1* %.out9) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012161)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012141)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.20.extracted, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012146)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.20.extracted, %"2"), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012150)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@main_loop.extracted.20.extracted, %BogusBasciBlock), i8** %10, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20.extracted, %BogusBasciBlock), i8** %11, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %12, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %13, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %"2"), i8** %.reload5, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %14, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.20.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %15 = load i8*, i8** %.reload, align 8
  indirectbr i8* %15, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %16 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.20.extracted, %"2"), i8** %16, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.20.extracted, %EntryBasicBlockSplit), i8** %17, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %18 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %19 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %19, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i32 %0, i32* %.out3, align 4
  %20 = add i64 %5, 7021639699843536737
  %21 = add i64 -5264215285813091856, %5
  %22 = sub i64 %21, 6160889088052923023
  %23 = or i64 %9, -7408185313512466708
  %24 = and i64 -7408185313512466708, %9
  %25 = xor i64 -7408185313512466708, %9
  %26 = or i64 %24, %25
  %27 = xor i64 %23, %20
  %28 = xor i64 %27, %22
  %29 = xor i64 %28, -5778088136940761773
  %30 = xor i64 %29, %26
  %31 = add i64 %3, -3286943216593135785
  %32 = add i64 2903722687516569744, %3
  %33 = add i64 %32, -6190665904109705529
  %34 = and i64 %3, -4060454266571808461
  %35 = xor i64 %3, -1
  %36 = xor i64 -4060454266571808461, %35
  %37 = and i64 %36, -4060454266571808461
  %38 = add i64 %7, -6024477173073427802
  %39 = sub i64 0, %7
  %40 = add i64 6024477173073427802, %39
  %41 = sub i64 0, %40
  %42 = xor i64 %33, 0
  %43 = xor i64 %42, %38
  %44 = xor i64 %43, %31
  %45 = xor i64 %44, %34
  %46 = xor i64 %45, %41
  %47 = xor i64 %46, %37
  %48 = mul i64 %30, %47
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %0, %49
  store i1 %50, i1* %.out4, align 1
  %51 = xor i1 %1, true
  store i1 %51, i1* %.out5, align 1
  %52 = xor i1 %50, false
  %53 = xor i1 %52, true
  %54 = and i1 %53, true
  %55 = and i1 %52, false
  %56 = or i1 %54, %55
  store i1 %56, i1* %.out6, align 1
  %57 = xor i1 %56, true
  %58 = xor i1 %51, %57
  %59 = and i1 %58, %51
  %60 = or i64 %9, 8669123480816347975
  %61 = and i64 8669123480816347975, %9
  %62 = xor i64 8669123480816347975, %9
  %63 = or i64 %61, %62
  %64 = add i64 %7, -8382469405384838066
  %65 = add i64 -6503019585544126026, %7
  %66 = add i64 %65, -1879449819840712040
  %67 = xor i64 %63, -2127865893245119625
  %68 = xor i64 %67, %66
  %69 = xor i64 %68, %64
  %70 = xor i64 %69, %60
  %71 = sext i32 %0 to i64
  %72 = add i64 %71, -1600269219533654037
  %73 = sub i64 0, %71
  %74 = add i64 1600269219533654037, %73
  %75 = sub i64 0, %74
  %76 = and i64 %3, 6738641896954503525
  %77 = xor i64 %3, -1
  %78 = xor i64 6738641896954503525, %77
  %79 = and i64 %78, 6738641896954503525
  %80 = or i64 %5, -8473499952588337945
  %81 = and i64 -8473499952588337945, %5
  %82 = xor i64 -8473499952588337945, %5
  %83 = or i64 %81, %82
  %84 = xor i64 %79, %80
  %85 = xor i64 %84, %72
  %86 = xor i64 %85, %76
  %87 = xor i64 %86, %83
  %88 = xor i64 %87, 0
  %89 = xor i64 %88, %75
  %90 = mul i64 %70, %89
  %91 = trunc i64 %90 to i1
  %92 = xor i1 %51, %91
  %93 = xor i1 %56, false
  %94 = xor i1 %92, %93
  %95 = or i1 %59, %94
  store i1 %95, i1* %.out7, align 1
  %96 = add i64 %7, -400232449062349034
  %97 = add i64 -5995808403079698452, %7
  %98 = sub i64 %97, -5595575954017349418
  %99 = or i64 %7, 7306814049448922229
  %100 = xor i64 %7, -1
  %101 = and i64 %100, -2186883694314010430
  %102 = and i64 %7, 2186883694314010429
  %103 = or i64 %101, %102
  %104 = xor i64 -8880636155256814409, %103
  %105 = xor i64 %7, -1
  %106 = or i64 -7306814049448922230, %105
  %107 = xor i64 %106, -1
  %108 = and i64 %107, -1
  %109 = or i64 %104, %108
  %110 = xor i64 -3207081242832953463, %98
  %111 = xor i64 %110, %109
  %112 = xor i64 %111, %96
  %113 = xor i64 %112, %99
  %114 = sext i32 %0 to i64
  %115 = or i64 %114, 1554991592629056038
  %116 = xor i64 %114, -1
  %117 = and i64 %116, 1316338725475664109
  %118 = and i64 %114, -1316338725475664110
  %119 = or i64 %117, %118
  %120 = xor i64 563200117470851787, %119
  %121 = xor i64 %114, -1
  %122 = or i64 -1554991592629056039, %121
  %123 = xor i64 %122, -1
  %124 = and i64 %123, -1
  %125 = or i64 %120, %124
  %126 = add i64 %5, -7945868404267212342
  %127 = add i64 4627029076412988926, %5
  %128 = add i64 %127, 5873846593029350348
  %129 = xor i64 %125, %128
  %130 = xor i64 %129, %126
  %131 = xor i64 %130, %115
  %132 = xor i64 %131, 3249414199318972089
  %133 = mul i64 %113, %132
  %134 = trunc i64 %133 to i1
  %135 = xor i1 %95, %134
  store i1 %135, i1* %.out8, align 1
  %136 = and i1 %135, true
  store i1 %136, i1* %.out9, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %137 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %137, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.21.extracted() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012193)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub.exitStub), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012243)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@main_loop.extracted.21.extracted, %EntryBasicBlockSplit), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012264)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@main_loop.extracted.21.extracted, %"2"), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012272)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@main_loop.extracted.21.extracted, %BogusBasciBlock), i8** %8, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %9 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.21.extracted, %BogusBasciBlock), i8** %9, align 8
  %10 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %10, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %11 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %11, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %"2"), i8** %.reload5, align 8
  %12 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %12, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %13 = load i8*, i8** %.reload, align 8
  indirectbr i8* %13, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.21.extracted, %.exitStub.exitStub), i8** %14, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.21.extracted, %"2"), i8** %15, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %16 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %16, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %17 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %17, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %18 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @main_loop.extracted.22.extracted(i32 %0, i32* %.out, i64* %.out1, i32* %.out2, i64* %.out3, i32* %.out4, i64* %.out5, i64* %.out6, i64* %.out7, i64* %.out8, i64* %.out9, i64* %.out10) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012244)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@main_loop.extracted.22.extracted, %"2"), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012121)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@main_loop.extracted.22.extracted, %.exitStub.exitStub), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012142)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@main_loop.extracted.22.extracted, %EntryBasicBlockSplit), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012184)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@main_loop.extracted.22.extracted, %BogusBasciBlock), i8** %9, align 8
  %.reg2mem6 = alloca i8**, align 8
  %10 = sext i32 %0 to i64
  %11 = and i64 %10, 5083053609461057543
  %12 = xor i64 %10, -1
  %13 = xor i64 5083053609461057543, %12
  %14 = and i64 %13, 5083053609461057543
  %15 = sext i32 %0 to i64
  %16 = and i64 %15, 4808019260558507487
  %17 = xor i64 %15, -1
  %18 = xor i64 4808019260558507487, %17
  %19 = and i64 %18, 4808019260558507487
  %20 = sext i32 %0 to i64
  %21 = and i64 %20, -139608781739174656
  %22 = or i64 139608781739174655, %20
  %23 = sub i64 %22, 139608781739174655
  %24 = xor i64 783005178220038161, %23
  %25 = xor i64 %24, %14
  %26 = xor i64 %25, %19
  %27 = xor i64 %26, %16
  %28 = xor i64 %27, %11
  %29 = xor i64 %28, %21
  %30 = sext i32 %0 to i64
  %31 = and i64 %30, -1707683890656460357
  %32 = xor i64 %30, -1
  %33 = xor i64 -1707683890656460357, %32
  %34 = and i64 %33, -1707683890656460357
  %35 = sext i32 %0 to i64
  %36 = and i64 %35, -3501630750250602545
  %37 = xor i64 %35, -1
  %38 = or i64 3501630750250602544, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = sext i32 %0 to i64
  %42 = add i64 %41, 5438918766430689538
  %43 = add i64 -6804447923226778852, %41
  %44 = add i64 %43, -6203377384052083226
  %45 = xor i64 %31, 2519322605288761585
  %46 = xor i64 %45, %40
  %47 = xor i64 %46, %36
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %44
  %50 = xor i64 %49, %34
  %51 = mul i64 %29, %50
  %52 = trunc i64 %51 to i32
  %.reg2mem3 = alloca i8**, i32 %52, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 4, align 8
  %53 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.22.extracted, %BogusBasciBlock), i8** %53, align 8
  %54 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %54, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@main_loop.extracted.22.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %55 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %55, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@main_loop.extracted.22.extracted, %"2"), i8** %.reload5, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %56, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@main_loop.extracted.22.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %57 = load i8*, i8** %.reload, align 8
  indirectbr i8* %57, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %58 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@main_loop.extracted.22.extracted, %EntryBasicBlockSplit), i8** %58, align 8
  %59 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@main_loop.extracted.22.extracted, %"2"), i8** %59, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %60 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %60, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %61 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %61, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i32 %0, i32* %.out, align 4
  %62 = sext i32 %0 to i64
  %63 = or i64 %62, 8741617849220775926
  %64 = xor i64 %62, -1
  %65 = and i64 %64, -3344775541263347440
  %66 = and i64 %62, 3344775541263347439
  %67 = or i64 %65, %66
  %68 = xor i64 -6285741659014435098, %67
  %69 = xor i64 %62, -1
  %70 = or i64 -8741617849220775927, %69
  %71 = xor i64 %70, -1
  %72 = and i64 %71, -1
  %73 = or i64 %68, %72
  %74 = add i64 %8, 2450394282079208338
  %75 = and i64 2450394282079208338, %8
  %76 = or i64 2450394282079208338, %8
  %77 = add i64 %75, %76
  %78 = add i64 %4, -2818178308276774961
  %79 = xor i64 -2818178308276774961, %4
  %80 = and i64 -2818178308276774961, %4
  %81 = mul i64 2, %80
  %82 = add i64 %79, %81
  %83 = xor i64 %73, %74
  %84 = xor i64 %83, %82
  %85 = xor i64 %84, %77
  %86 = xor i64 %85, -7897959669277101453
  %87 = xor i64 %86, %78
  %88 = xor i64 %87, %63
  %89 = add i64 %2, 5431105028106049367
  %90 = add i64 -2278364540459883460, %2
  %91 = sub i64 %90, -7709469568565932827
  %92 = or i64 %2, 1594930147195938590
  %93 = xor i64 %2, -1
  %94 = and i64 1594930147195938590, %93
  %95 = add i64 %94, %2
  %96 = and i64 %2, 1171312003705691654
  %97 = or i64 -1171312003705691655, %2
  %98 = sub i64 %97, -1171312003705691655
  %99 = xor i64 %92, %89
  %100 = xor i64 %99, -5302141816108596771
  %101 = xor i64 %100, %91
  %102 = xor i64 %101, %98
  %103 = xor i64 %102, %95
  %104 = xor i64 %103, %96
  %105 = mul i64 %88, %104
  %106 = sdiv i64 %105, 41
  store i64 %106, i64* %.out1, align 8
  %107 = sub i32 116, 0
  store i32 %107, i32* %.out2, align 4
  %108 = mul i64 19, 110
  store i64 %108, i64* %.out3, align 8
  %109 = sdiv i32 49, 121
  store i32 %109, i32* %.out4, align 4
  %110 = sdiv i64 9, 64
  store i64 %110, i64* %.out5, align 8
  %111 = add i64 799406975313555879, -799406975313555787
  store i64 %111, i64* %.out6, align 8
  %112 = sdiv i64 45, 67
  store i64 %112, i64* %.out7, align 8
  %113 = sdiv i64 11, 96
  store i64 %113, i64* %.out8, align 8
  %114 = sdiv i64 24, 42
  store i64 %114, i64* %.out9, align 8
  %115 = sext i32 %0 to i64
  %116 = or i64 %115, 2202883275590049130
  %117 = xor i64 %115, -1
  %118 = and i64 %117, 4163208802595504322
  %119 = and i64 %115, -4163208802595504323
  %120 = or i64 %118, %119
  %121 = xor i64 2834038447504465320, %120
  %122 = xor i64 %115, -1
  %123 = or i64 -2202883275590049131, %122
  %124 = xor i64 %123, -1
  %125 = and i64 %124, -1
  %126 = or i64 %121, %125
  %127 = and i64 %8, -436446519630663559
  %128 = xor i64 %8, -1
  %129 = or i64 436446519630663558, %128
  %130 = xor i64 %129, -1
  %131 = and i64 %130, -1
  %132 = and i64 %2, 1155541322886059335
  %133 = or i64 -1155541322886059336, %2
  %134 = sub i64 %133, -1155541322886059336
  %135 = xor i64 %132, %116
  %136 = xor i64 %135, -8742549229869033135
  %137 = xor i64 %136, %126
  %138 = xor i64 %137, %134
  %139 = xor i64 %138, %127
  %140 = xor i64 %139, %131
  %141 = or i64 %6, -1367696715738552906
  %142 = xor i64 %6, -1
  %143 = and i64 -1367696715738552906, %142
  %144 = add i64 %143, %6
  %145 = sext i32 %0 to i64
  %146 = or i64 %145, -8666525961336144301
  %147 = xor i64 %145, -1
  %148 = and i64 %147, 3589926909581192824
  %149 = and i64 %145, -3589926909581192825
  %150 = or i64 %148, %149
  %151 = xor i64 -5301956054665899989, %150
  %152 = xor i64 %145, -1
  %153 = or i64 8666525961336144300, %152
  %154 = xor i64 %153, -1
  %155 = and i64 %154, -1
  %156 = or i64 %151, %155
  %157 = xor i64 %146, %141
  %158 = xor i64 %157, %156
  %159 = xor i64 %158, 5829911537402336958
  %160 = xor i64 %159, %144
  %161 = mul i64 %140, %160
  %162 = mul i64 %161, 125
  store i64 %162, i64* %.out10, align 8
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %163 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %163, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop..split(double %0, float* %1, float %2, float %3, float* %4, float %5, float* %.out, i32* %.out1, i32* %.out2, i32* %.out3, i32* %.out4) #1 {
entry:
  %6 = alloca i32, align 4
  %7 = call i64 @h11804894491772278134(i64 595012096)
  %8 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %7
  store i8* blockaddress(@inner_loop..split, %.exitStub5), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012098)
  %10 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %9
  store i8* blockaddress(@inner_loop..split, %.exitStub), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012101)
  %12 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %11
  store i8* blockaddress(@inner_loop..split, %EntryBasicBlockSplit), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012099)
  %14 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %13
  store i8* blockaddress(@inner_loop..split, %codeRepl), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012097)
  %16 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %15
  store i8* blockaddress(@inner_loop..split, %.split), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012100)
  %18 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %17
  store i8* blockaddress(@inner_loop..split, %BogusBasciBlock), i8** %18, align 8
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem15 = alloca i8**, align 8
  %.reg2mem12 = alloca i8**, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %19 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop..split, %BogusBasciBlock), i8** %19, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %20, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop..split, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %21, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop..split, %.split), i8** %.reload5, align 8
  %22 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %22, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop..split, %codeRepl), i8** %.reload8, align 8
  %23 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %23, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@inner_loop..split, %.exitStub), i8** %.reload11, align 8
  %24 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %24, i8*** %.reg2mem12, align 8
  %.reload14 = load i8**, i8*** %.reg2mem12, align 8
  store i8* blockaddress(@inner_loop..split, %.exitStub5), i8** %.reload14, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %26, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12852019627141998670, i32 0, i64 %27
  store i8** %28, i8*** %.reg2mem15, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %29 = load i8*, i8** %.reload, align 8
  indirectbr i8* %29, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5]

BogusBasciBlock:                                  ; preds = %codeRepl, %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %30 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop..split, %.exitStub), i8** %30, align 8
  %31 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop..split, %.split), i8** %31, align 8
  %32 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop..split, %codeRepl), i8** %32, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %33 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %33, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload16 = load i8**, i8*** %.reg2mem15, align 8
  store i8* bitcast (i1 (i1, i1)* @inner_loop..split.extracted to i8*), i8** %.reload16, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %34 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %34, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5]

.split:                                           ; preds = %codeRepl, %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %35 = call double @llvm.sin.f64(double %0)
  %36 = fptrunc double %35 to float
  %37 = load float, float* %1, align 4, !tbaa !10
  %38 = fpext float %37 to double
  %39 = call double @llvm.sin.f64(double %38)
  %40 = fptrunc double %39 to float
  %41 = call double @llvm.cos.f64(double %38)
  %42 = fptrunc double %41 to float
  %43 = fmul float %2, %36
  %44 = fmul float %43, %40
  %45 = fmul float %3, %42
  %46 = fadd float %44, %45
  %47 = fadd float %46, 5.000000e+00
  %48 = fdiv float 1.000000e+00, %47
  store float %48, float* %.out, align 4
  %49 = call double @llvm.cos.f64(double %0)
  %50 = fptrunc double %49 to float
  %51 = load float, float* %4, align 4, !tbaa !10
  %52 = fpext float %51 to double
  %53 = call double @llvm.cos.f64(double %52)
  %54 = fptrunc double %53 to float
  %55 = call double @llvm.sin.f64(double %52)
  %56 = fptrunc double %55 to float
  %57 = fmul float %43, %42
  %58 = fmul float %3, %40
  %59 = fsub float %57, %58
  %60 = fmul float %48, 3.000000e+01
  %61 = fmul float %2, %50
  %62 = fmul float %61, %54
  %63 = fmul float %59, %56
  %64 = fsub float %62, %63
  %65 = fmul float %64, %60
  %66 = fadd float %65, 4.000000e+01
  %67 = fptosi float %66 to i32
  store i32 %67, i32* %.out1, align 4
  %68 = fmul float %48, 1.500000e+01
  %69 = fmul float %61, %56
  %70 = fmul float %59, %54
  %71 = fadd float %69, %70
  %72 = fmul float %71, %68
  %73 = fadd float %72, 1.200000e+01
  %74 = fptosi float %73 to i32
  store i32 %74, i32* %.out2, align 4
  %75 = fmul float %5, %36
  %76 = fmul float %75, %42
  %77 = fsub float %58, %76
  %78 = fmul float %77, %54
  %79 = fmul float %75, %40
  %80 = fsub float %78, %79
  %81 = fsub float %80, %45
  %82 = fmul float %5, %50
  %83 = fmul float %82, %56
  %84 = fsub float %81, %83
  %85 = fmul float %84, 8.000000e+00
  %86 = fptosi float %85 to i32
  store i32 %86, i32* %.out3, align 4
  %87 = sub i32 %74, -6241248
  %88 = add i32 %87, -1
  %89 = add i32 %88, -6241248
  store i32 %89, i32* %.out4, align 4
  %90 = icmp ult i32 %89, 21
  %91 = icmp sgt i32 %67, 0
  %92 = select i1 %90, i1 %91, i1 false
  store i1 %92, i1* %.reg2mem17, align 1
  %93 = icmp slt i32 %67, 80
  store i1 %93, i1* %.reg2mem19, align 1
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %94 = load i8*, i8** %.reload7, align 8
  indirectbr i8* %94, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5]

codeRepl:                                         ; preds = %codeRepl, %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %25, align 8
  %95 = alloca i8**, align 8
  %96 = add i64 %11, 4593549172979975760
  %97 = and i64 4593549172979975760, %11
  %98 = or i64 4593549172979975760, %11
  %99 = add i64 %97, %98
  %100 = and i64 %17, -1027533898349355586
  %101 = or i64 1027533898349355585, %17
  %102 = sub i64 %101, 1027533898349355585
  %103 = xor i64 %99, %102
  %104 = xor i64 %103, 1787358702755056449
  %105 = xor i64 %104, %100
  %106 = xor i64 %105, %96
  %107 = or i64 %17, -1200909190187357424
  %108 = xor i64 %17, -1
  %109 = and i64 %108, 3289920390669753849
  %110 = and i64 %17, -3289920390669753850
  %111 = or i64 %109, %110
  %112 = xor i64 -4396174736870197527, %111
  %113 = xor i64 %17, -1
  %114 = or i64 1200909190187357423, %113
  %115 = xor i64 %114, -1
  %116 = and i64 %115, -1
  %117 = or i64 %112, %116
  %118 = and i64 %9, 7896687291460942225
  %119 = or i64 -7896687291460942226, %9
  %120 = sub i64 %119, -7896687291460942226
  %121 = add i64 %17, -3714295299125799504
  %122 = sub i64 0, %17
  %123 = add i64 3714295299125799504, %122
  %124 = sub i64 0, %123
  %125 = xor i64 %117, %120
  %126 = xor i64 %125, %107
  %127 = xor i64 %126, %118
  %128 = xor i64 %127, 0
  %129 = xor i64 %128, %121
  %130 = xor i64 %129, %124
  %131 = mul i64 %106, %130
  %132 = add i64 %11, -4144391456515996139
  %133 = xor i64 -4144391456515996139, %11
  %134 = and i64 -4144391456515996139, %11
  %135 = mul i64 2, %134
  %136 = add i64 %133, %135
  %137 = and i64 %15, 7483205858477190797
  %138 = or i64 -7483205858477190798, %15
  %139 = sub i64 %138, -7483205858477190798
  %140 = or i64 %13, -3051089607055907524
  %141 = and i64 -3051089607055907524, %13
  %142 = xor i64 -3051089607055907524, %13
  %143 = or i64 %141, %142
  %144 = xor i64 %140, %143
  %145 = xor i64 %144, %137
  %146 = xor i64 %145, %139
  %147 = xor i64 %146, %132
  %148 = xor i64 %147, %136
  %149 = xor i64 %148, -9126270189248788369
  %150 = or i64 %27, 7814617550248773021
  %151 = and i64 7814617550248773021, %27
  %152 = xor i64 7814617550248773021, %27
  %153 = or i64 %151, %152
  %154 = add i64 %17, -4052406813218833569
  %155 = add i64 -3994547051461952448, %17
  %156 = add i64 %155, -57859761756881121
  %157 = add i64 %9, -5862517352787236468
  %158 = add i64 -3037114344504531337, %9
  %159 = add i64 %158, -2825403008282705131
  %160 = xor i64 %159, %150
  %161 = xor i64 %160, %156
  %162 = xor i64 %161, %157
  %163 = xor i64 %162, %154
  %164 = xor i64 %163, %153
  %165 = xor i64 %164, 0
  %166 = mul i64 %149, %165
  %167 = trunc i64 %166 to i1
  %168 = add i64 %13, -1297379743054916771
  %169 = xor i64 -1297379743054916771, %13
  %170 = and i64 -1297379743054916771, %13
  %171 = mul i64 2, %170
  %172 = add i64 %169, %171
  %173 = or i64 %17, 3613784678282716746
  %174 = xor i64 %17, -1
  %175 = and i64 %174, 7429609107273254257
  %176 = and i64 %17, -7429609107273254258
  %177 = or i64 %175, %176
  %178 = xor i64 6142338257906426683, %177
  %179 = xor i64 %17, -1
  %180 = or i64 -3613784678282716747, %179
  %181 = xor i64 %180, -1
  %182 = and i64 %181, -1
  %183 = or i64 %178, %182
  %184 = add i64 %13, 7169084491794274609
  %185 = xor i64 7169084491794274609, %13
  %186 = and i64 7169084491794274609, %13
  %187 = mul i64 2, %186
  %188 = add i64 %185, %187
  %189 = xor i64 %168, %188
  %190 = xor i64 %189, %172
  %191 = xor i64 %190, %173
  %192 = xor i64 %191, 92321387602942869
  %193 = xor i64 %192, %183
  %194 = xor i64 %193, %184
  %195 = add i64 %11, -1582553923804468379
  %196 = sub i64 0, %11
  %197 = add i64 1582553923804468379, %196
  %198 = sub i64 0, %197
  %199 = and i64 %27, -6822977922343730056
  %200 = xor i64 %27, -1
  %201 = or i64 6822977922343730055, %200
  %202 = xor i64 %201, -1
  %203 = and i64 %202, -1
  %204 = xor i64 0, %198
  %205 = xor i64 %204, %203
  %206 = xor i64 %205, %195
  %207 = xor i64 %206, %199
  %208 = mul i64 %194, %207
  %209 = trunc i64 %208 to i32
  %210 = and i64 %27, 1694385377202437938
  %211 = xor i64 %27, -1
  %212 = or i64 -1694385377202437939, %211
  %213 = xor i64 %212, -1
  %214 = and i64 %213, -1
  %215 = and i64 %11, 4255809517577360557
  %216 = or i64 -4255809517577360558, %11
  %217 = sub i64 %216, -4255809517577360558
  %218 = and i64 %11, 1433575284204935267
  %219 = xor i64 %11, -1
  %220 = xor i64 1433575284204935267, %219
  %221 = and i64 %220, 1433575284204935267
  %222 = xor i64 %221, %215
  %223 = xor i64 %222, %218
  %224 = xor i64 %223, %217
  %225 = xor i64 %224, %214
  %226 = xor i64 %225, -8942548178275440625
  %227 = xor i64 %226, %210
  %228 = add i64 %9, 8462347340452054307
  %229 = sub i64 0, %9
  %230 = sub i64 8462347340452054307, %229
  %231 = add i64 %11, -7736036041088912393
  %232 = add i64 3259417931435981337, %11
  %233 = sub i64 %232, -7451290101184657886
  %234 = xor i64 %228, %230
  %235 = xor i64 %234, %233
  %236 = xor i64 %235, %231
  %237 = xor i64 %236, 0
  %238 = mul i64 %227, %237
  %239 = trunc i64 %238 to i1
  %240 = add i64 %11, 4487304957410457845
  %241 = add i64 3742600958853064760, %11
  %242 = sub i64 %241, -744703998557393085
  %243 = and i64 %27, -391479934036695374
  %244 = or i64 391479934036695373, %27
  %245 = sub i64 %244, 391479934036695373
  %246 = xor i64 %245, 8837454640875547843
  %247 = xor i64 %246, %243
  %248 = xor i64 %247, %240
  %249 = xor i64 %248, %242
  %250 = and i64 %9, -5742845095494650636
  %251 = xor i64 %9, -1
  %252 = or i64 5742845095494650635, %251
  %253 = xor i64 %252, -1
  %254 = and i64 %253, -1
  %255 = and i64 %13, 1534916532103218631
  %256 = xor i64 %13, -1
  %257 = xor i64 1534916532103218631, %256
  %258 = and i64 %257, 1534916532103218631
  %259 = xor i64 %254, %255
  %260 = xor i64 %259, %250
  %261 = xor i64 %260, 0
  %262 = xor i64 %261, %258
  %263 = mul i64 %249, %262
  %264 = trunc i64 %263 to i1
  %265 = add i64 %15, -8453657103471551245
  %266 = sub i64 0, %15
  %267 = add i64 8453657103471551245, %266
  %268 = sub i64 0, %267
  %269 = add i64 %15, -3919752590724757792
  %270 = add i64 -4415331518253718356, %15
  %271 = sub i64 %270, -495578927528960564
  %272 = xor i64 %271, %269
  %273 = xor i64 %272, %265
  %274 = xor i64 %273, %268
  %275 = xor i64 %274, -5565583698487077773
  %276 = and i64 %11, 1768876418712784287
  %277 = xor i64 %11, -1
  %278 = xor i64 1768876418712784287, %277
  %279 = and i64 %278, 1768876418712784287
  %280 = or i64 %27, -6221510671082713527
  %281 = xor i64 %27, -1
  %282 = and i64 -6221510671082713527, %281
  %283 = add i64 %282, %27
  %284 = xor i64 0, %276
  %285 = xor i64 %284, %280
  %286 = xor i64 %285, %279
  %287 = xor i64 %286, %283
  %288 = mul i64 %275, %287
  %289 = trunc i64 %288 to i1
  %290 = and i64 %9, -7309691617343232938
  %291 = or i64 7309691617343232937, %9
  %292 = sub i64 %291, 7309691617343232937
  %293 = add i64 %27, 5483017113102580782
  %294 = add i64 -3958776935635688224, %27
  %295 = add i64 %294, -9004950024971282610
  %296 = xor i64 %292, %290
  %297 = xor i64 %296, 6577866635251148269
  %298 = xor i64 %297, %293
  %299 = xor i64 %298, %295
  %300 = and i64 %11, -5815080497807552382
  %301 = or i64 5815080497807552381, %11
  %302 = sub i64 %301, 5815080497807552381
  %303 = and i64 %7, 8799376743694191453
  %304 = or i64 -8799376743694191454, %7
  %305 = sub i64 %304, -8799376743694191454
  %306 = xor i64 %300, %302
  %307 = xor i64 %306, %305
  %308 = xor i64 %307, 0
  %309 = xor i64 %308, %303
  %310 = mul i64 %299, %309
  %311 = trunc i64 %310 to i1
  call void @"9941920946239825184"(i32 0, i64* %25, i8*** %95, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %131, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %167, i1* null, i32 %209, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %239, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %264, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %289, i1 %311, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %312 = load i8**, i8*** %95, align 8
  %313 = load i8*, i8** %312, align 8
  %314 = bitcast i8* %313 to i1 (i1, i1)*
  %.reload18 = load i1, i1* %.reg2mem17, align 1
  %.reload20 = load i1, i1* %.reg2mem19, align 1
  %targetBlock = call i1 %314(i1 %.reload18, i1 %.reload20)
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %.reload13 = load i8**, i8*** %.reg2mem12, align 8
  %315 = select i1 %targetBlock, i8** %.reload10, i8** %.reload13
  %316 = load i8*, i8** %315, align 8
  indirectbr i8* %316, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5]

.exitStub:                                        ; preds = %codeRepl, %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub5:                                       ; preds = %codeRepl, %.split, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop..loopexit(i32 %.reload8, i1* %.out, i1* %.out1) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012103)
  %2 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %1
  store i8* blockaddress(@inner_loop..loopexit, %loopEnd), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012100)
  %4 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %3
  store i8* blockaddress(@inner_loop..loopexit, %BogusBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012104)
  %6 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %5
  store i8* blockaddress(@inner_loop..loopexit, %.exitStub2), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012101)
  %8 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %7
  store i8* blockaddress(@inner_loop..loopexit, %codeRepl), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012105)
  %10 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %9
  store i8* blockaddress(@inner_loop..loopexit, %defaultSwitchBasicBlock), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012097)
  %12 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %11
  store i8* blockaddress(@inner_loop..loopexit, %.loopexit), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012098)
  %14 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %13
  store i8* blockaddress(@inner_loop..loopexit, %.exitStub), i8** %14, align 8
  %15 = call i64 @h11804894491772278134(i64 595012096)
  %16 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %15
  store i8* blockaddress(@inner_loop..loopexit, %EntryBasicBlockSplit), i8** %16, align 8
  %17 = call i64 @h11804894491772278134(i64 595012102)
  %18 = getelementptr [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %17
  store i8* blockaddress(@inner_loop..loopexit, %loopStart), i8** %18, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem = alloca i8**, align 8
  %19 = sext i32 %.reload8 to i64
  %20 = and i64 %19, 5144444366357004063
  %21 = xor i64 %19, -1
  %22 = or i64 -5144444366357004064, %21
  %23 = xor i64 %22, -1
  %24 = and i64 %23, -1
  %25 = sext i32 %.reload8 to i64
  %26 = and i64 %25, -8538348911322450258
  %27 = xor i64 %25, -1
  %28 = or i64 8538348911322450257, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, -1
  %31 = xor i64 %26, %30
  %32 = xor i64 %31, %24
  %33 = xor i64 %32, %20
  %34 = xor i64 %33, 7974440166520596899
  %35 = sext i32 %.reload8 to i64
  %36 = and i64 %35, 1931029495734706530
  %37 = or i64 -1931029495734706531, %35
  %38 = sub i64 %37, -1931029495734706531
  %39 = sext i32 %.reload8 to i64
  %40 = or i64 %39, -3030717669566404471
  %41 = xor i64 %39, -1
  %42 = and i64 %41, -1190422889524522725
  %43 = and i64 %39, 1190422889524522724
  %44 = or i64 %42, %43
  %45 = xor i64 4218323528025061778, %44
  %46 = xor i64 %39, -1
  %47 = or i64 3030717669566404470, %46
  %48 = xor i64 %47, -1
  %49 = and i64 %48, -1
  %50 = or i64 %45, %49
  %51 = xor i64 %36, %50
  %52 = xor i64 %51, %40
  %53 = xor i64 %52, %38
  %54 = xor i64 %53, -8992566465828793845
  %55 = mul i64 %34, %54
  %56 = trunc i64 %55 to i32
  %lookupTable = alloca [10 x i32], i32 %56, align 4
  %57 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %57, align 4
  %58 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %58, align 4
  %59 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %59, align 4
  %60 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %61, align 4
  %62 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %62, align 4
  %63 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  %64 = sext i32 %.reload8 to i64
  %65 = or i64 %64, -2578449572371751262
  %66 = and i64 -2578449572371751262, %64
  %67 = xor i64 -2578449572371751262, %64
  %68 = or i64 %66, %67
  %69 = sext i32 %.reload8 to i64
  %70 = add i64 %69, -6508419798937698458
  %71 = add i64 -7092395844620160417, %69
  %72 = sub i64 %71, -583976045682461959
  %73 = xor i64 %65, -8069199815242110135
  %74 = xor i64 %73, %68
  %75 = xor i64 %74, %70
  %76 = xor i64 %75, %72
  %77 = sext i32 %.reload8 to i64
  %78 = add i64 %77, -2464122267470006244
  %79 = add i64 1520641641827835679, %77
  %80 = add i64 %79, -3984763909297841923
  %81 = sext i32 %.reload8 to i64
  %82 = add i64 %81, 2145354700929391236
  %83 = sub i64 0, %81
  %84 = add i64 -2145354700929391236, %83
  %85 = sub i64 0, %84
  %86 = xor i64 -8134285067424848661, %82
  %87 = xor i64 %86, %80
  %88 = xor i64 %87, %85
  %89 = xor i64 %88, %78
  %90 = mul i64 %76, %89
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %63, align 4
  %92 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %93 = sext i32 %.reload8 to i64
  %94 = or i64 %93, 1083649377943322971
  %95 = xor i64 %93, -1
  %96 = and i64 %95, 2394344593713890463
  %97 = and i64 %93, -2394344593713890464
  %98 = or i64 %96, %97
  %99 = xor i64 3329161671461766596, %98
  %100 = xor i64 %93, -1
  %101 = or i64 -1083649377943322972, %100
  %102 = xor i64 %101, -1
  %103 = and i64 %102, -1
  %104 = or i64 %99, %103
  %105 = sext i32 %.reload8 to i64
  %106 = and i64 %105, -3483802312034406458
  %107 = or i64 3483802312034406457, %105
  %108 = sub i64 %107, 3483802312034406457
  %109 = xor i64 %104, %106
  %110 = xor i64 %109, %108
  %111 = xor i64 %110, %94
  %112 = xor i64 %111, 4329919763989920103
  %113 = sext i32 %.reload8 to i64
  %114 = add i64 %113, -7473018944574391670
  %115 = sub i64 0, %113
  %116 = add i64 7473018944574391670, %115
  %117 = sub i64 0, %116
  %118 = sext i32 %.reload8 to i64
  %119 = add i64 %118, -6243506529930088720
  %120 = sub i64 0, %118
  %121 = add i64 6243506529930088720, %120
  %122 = sub i64 0, %121
  %123 = sext i32 %.reload8 to i64
  %124 = and i64 %123, -6980907205442272751
  %125 = or i64 6980907205442272750, %123
  %126 = sub i64 %125, 6980907205442272750
  %127 = xor i64 %119, %117
  %128 = xor i64 %127, %114
  %129 = xor i64 %128, 1586033167221672284
  %130 = xor i64 %129, %124
  %131 = xor i64 %130, %126
  %132 = xor i64 %131, %122
  %133 = mul i64 %112, %132
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %92, align 4
  %135 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %135, align 4
  %136 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  store i32 6, i32* %136, align 4
  %137 = sext i32 %.reload8 to i64
  %138 = and i64 %137, 6979704383310676949
  %139 = xor i64 %137, -1
  %140 = or i64 -6979704383310676950, %139
  %141 = xor i64 %140, -1
  %142 = and i64 %141, -1
  %143 = sext i32 %.reload8 to i64
  %144 = add i64 %143, -4106426514423677148
  %145 = add i64 -824616198797107186, %143
  %146 = sub i64 %145, 3281810315626569962
  %147 = xor i64 -8002784843778682819, %144
  %148 = xor i64 %147, %138
  %149 = xor i64 %148, %142
  %150 = xor i64 %149, %146
  %151 = sext i32 %.reload8 to i64
  %152 = or i64 %151, 7882650249175955330
  %153 = xor i64 %151, -1
  %154 = and i64 7882650249175955330, %153
  %155 = add i64 %154, %151
  %156 = sext i32 %.reload8 to i64
  %157 = add i64 %156, -4180370040994013259
  %158 = xor i64 -4180370040994013259, %156
  %159 = and i64 -4180370040994013259, %156
  %160 = mul i64 2, %159
  %161 = add i64 %158, %160
  %162 = xor i64 %155, %152
  %163 = xor i64 %162, %157
  %164 = xor i64 %163, %161
  %165 = xor i64 %164, -4464211569216583915
  %166 = mul i64 %150, %165
  %167 = trunc i64 %166 to i32
  %168 = alloca i64, i32 %167, align 8
  %169 = alloca i64, align 8
  %170 = sext i32 %.reload8 to i64
  %171 = and i64 %170, 2178645519948003025
  %172 = or i64 -2178645519948003026, %170
  %173 = sub i64 %172, -2178645519948003026
  %174 = sext i32 %.reload8 to i64
  %175 = and i64 %174, 8356580833494917039
  %176 = xor i64 %174, -1
  %177 = or i64 -8356580833494917040, %176
  %178 = xor i64 %177, -1
  %179 = and i64 %178, -1
  %180 = xor i64 -5781774775029178745, %175
  %181 = xor i64 %180, %173
  %182 = xor i64 %181, %171
  %183 = xor i64 %182, %179
  %184 = sext i32 %.reload8 to i64
  %185 = or i64 %184, -2923329636657550454
  %186 = xor i64 %184, -1
  %187 = and i64 %186, 2889503993142415816
  %188 = and i64 %184, -2889503993142415817
  %189 = or i64 %187, %188
  %190 = xor i64 -38373241324815806, %189
  %191 = xor i64 %184, -1
  %192 = or i64 2923329636657550453, %191
  %193 = xor i64 %192, -1
  %194 = and i64 %193, -1
  %195 = or i64 %190, %194
  %196 = sext i32 %.reload8 to i64
  %197 = add i64 %196, -3369614601027197096
  %198 = add i64 8372795885317436981, %196
  %199 = sub i64 %198, -6704333587364917539
  %200 = sext i32 %.reload8 to i64
  %201 = or i64 %200, -2354159255275923944
  %202 = and i64 -2354159255275923944, %200
  %203 = xor i64 -2354159255275923944, %200
  %204 = or i64 %202, %203
  %205 = xor i64 8076589110009537555, %197
  %206 = xor i64 %205, %201
  %207 = xor i64 %206, %195
  %208 = xor i64 %207, %185
  %209 = xor i64 %208, %204
  %210 = xor i64 %209, %199
  %211 = mul i64 %183, %210
  %212 = trunc i64 %211 to i32
  %213 = sext i32 %.reload8 to i64
  %214 = and i64 %213, 6493121768326087408
  %215 = xor i64 %213, -1
  %216 = xor i64 6493121768326087408, %215
  %217 = and i64 %216, 6493121768326087408
  %218 = sext i32 %.reload8 to i64
  %219 = and i64 %218, -4438727908797118653
  %220 = xor i64 %218, -1
  %221 = xor i64 -4438727908797118653, %220
  %222 = and i64 %221, -4438727908797118653
  %223 = sext i32 %.reload8 to i64
  %224 = or i64 %223, 2611720514002793889
  %225 = xor i64 %223, -1
  %226 = and i64 %225, 1499327413664857438
  %227 = and i64 %223, -1499327413664857439
  %228 = or i64 %226, %227
  %229 = xor i64 3526353342911678719, %228
  %230 = xor i64 %223, -1
  %231 = or i64 -2611720514002793890, %230
  %232 = xor i64 %231, -1
  %233 = and i64 %232, -1
  %234 = or i64 %229, %233
  %235 = xor i64 %217, 8556962998649590383
  %236 = xor i64 %235, %234
  %237 = xor i64 %236, %224
  %238 = xor i64 %237, %222
  %239 = xor i64 %238, %219
  %240 = xor i64 %239, %214
  %241 = sext i32 %.reload8 to i64
  %242 = and i64 %241, 5308443215506793188
  %243 = or i64 -5308443215506793189, %241
  %244 = sub i64 %243, -5308443215506793189
  %245 = sext i32 %.reload8 to i64
  %246 = or i64 %245, -6953022378047574844
  %247 = xor i64 %245, -1
  %248 = and i64 %247, -451664360732304378
  %249 = and i64 %245, 451664360732304377
  %250 = or i64 %248, %249
  %251 = xor i64 7366406111277691074, %250
  %252 = xor i64 %245, -1
  %253 = or i64 6953022378047574843, %252
  %254 = xor i64 %253, -1
  %255 = and i64 %254, -1
  %256 = or i64 %251, %255
  %257 = sext i32 %.reload8 to i64
  %258 = or i64 %257, -3228950787095417178
  %259 = and i64 -3228950787095417178, %257
  %260 = xor i64 -3228950787095417178, %257
  %261 = or i64 %259, %260
  %262 = xor i64 %256, %244
  %263 = xor i64 %262, %261
  %264 = xor i64 %263, %242
  %265 = xor i64 %264, 0
  %266 = xor i64 %265, %246
  %267 = xor i64 %266, %258
  %268 = mul i64 %240, %267
  %269 = trunc i64 %268 to i1
  %270 = sext i32 %.reload8 to i64
  %271 = and i64 %270, -947322678895066574
  %272 = xor i64 %270, -1
  %273 = xor i64 -947322678895066574, %272
  %274 = and i64 %273, -947322678895066574
  %275 = sext i32 %.reload8 to i64
  %276 = and i64 %275, -7599851443920394247
  %277 = xor i64 %275, -1
  %278 = xor i64 -7599851443920394247, %277
  %279 = and i64 %278, -7599851443920394247
  %280 = xor i64 %271, %274
  %281 = xor i64 %280, %276
  %282 = xor i64 %281, -4159028490651372543
  %283 = xor i64 %282, %279
  %284 = sext i32 %.reload8 to i64
  %285 = and i64 %284, -6877797317562514722
  %286 = or i64 6877797317562514721, %284
  %287 = sub i64 %286, 6877797317562514721
  %288 = sext i32 %.reload8 to i64
  %289 = or i64 %288, -6391253732902448990
  %290 = xor i64 %288, -1
  %291 = and i64 %290, -6725980120490809183
  %292 = and i64 %288, 6725980120490809182
  %293 = or i64 %291, %292
  %294 = xor i64 424798657263155203, %293
  %295 = xor i64 %288, -1
  %296 = or i64 6391253732902448989, %295
  %297 = xor i64 %296, -1
  %298 = and i64 %297, -1
  %299 = or i64 %294, %298
  %300 = sext i32 %.reload8 to i64
  %301 = or i64 %300, -1381360561357294111
  %302 = xor i64 %300, -1
  %303 = and i64 -1381360561357294111, %302
  %304 = add i64 %303, %300
  %305 = xor i64 %285, %287
  %306 = xor i64 %305, %301
  %307 = xor i64 %306, 0
  %308 = xor i64 %307, %299
  %309 = xor i64 %308, %289
  %310 = xor i64 %309, %304
  %311 = mul i64 %283, %310
  %312 = trunc i64 %311 to i1
  %313 = sext i32 %.reload8 to i64
  %314 = and i64 %313, -5255159514722819573
  %315 = or i64 5255159514722819572, %313
  %316 = sub i64 %315, 5255159514722819572
  %317 = sext i32 %.reload8 to i64
  %318 = add i64 %317, -8561715934171298026
  %319 = add i64 5460518168468357700, %317
  %320 = sub i64 %319, -4424509971069895890
  %321 = sext i32 %.reload8 to i64
  %322 = or i64 %321, 2908699227151077506
  %323 = xor i64 %321, -1
  %324 = and i64 2908699227151077506, %323
  %325 = add i64 %324, %321
  %326 = xor i64 6463754568391074751, %322
  %327 = xor i64 %326, %325
  %328 = xor i64 %327, %318
  %329 = xor i64 %328, %320
  %330 = xor i64 %329, %316
  %331 = xor i64 %330, %314
  %332 = sext i32 %.reload8 to i64
  %333 = and i64 %332, -4737284533389820602
  %334 = xor i64 %332, -1
  %335 = xor i64 -4737284533389820602, %334
  %336 = and i64 %335, -4737284533389820602
  %337 = sext i32 %.reload8 to i64
  %338 = add i64 %337, -4545425643342667970
  %339 = and i64 -4545425643342667970, %337
  %340 = or i64 -4545425643342667970, %337
  %341 = add i64 %339, %340
  %342 = sext i32 %.reload8 to i64
  %343 = and i64 %342, 6374839965014497377
  %344 = or i64 -6374839965014497378, %342
  %345 = sub i64 %344, -6374839965014497378
  %346 = xor i64 %333, %338
  %347 = xor i64 %346, %345
  %348 = xor i64 %347, 0
  %349 = xor i64 %348, %336
  %350 = xor i64 %349, %341
  %351 = xor i64 %350, %343
  %352 = mul i64 %331, %351
  %353 = trunc i64 %352 to i1
  %354 = sext i32 %.reload8 to i64
  %355 = or i64 %354, 3407110501949023944
  %356 = xor i64 %354, -1
  %357 = and i64 3407110501949023944, %356
  %358 = add i64 %357, %354
  %359 = sext i32 %.reload8 to i64
  %360 = add i64 %359, 3045322704254169633
  %361 = add i64 7975358117742560179, %359
  %362 = sub i64 %361, 4930035413488390546
  %363 = xor i64 %360, %355
  %364 = xor i64 %363, %358
  %365 = xor i64 %364, %362
  %366 = xor i64 %365, 4585455831559503569
  %367 = sext i32 %.reload8 to i64
  %368 = or i64 %367, -6383003964114775044
  %369 = and i64 -6383003964114775044, %367
  %370 = xor i64 -6383003964114775044, %367
  %371 = or i64 %369, %370
  %372 = sext i32 %.reload8 to i64
  %373 = and i64 %372, 8827214339862809539
  %374 = xor i64 %372, -1
  %375 = or i64 -8827214339862809540, %374
  %376 = xor i64 %375, -1
  %377 = and i64 %376, -1
  %378 = xor i64 0, %368
  %379 = xor i64 %378, %373
  %380 = xor i64 %379, %377
  %381 = xor i64 %380, %371
  %382 = mul i64 %366, %381
  %383 = sext i32 %.reload8 to i64
  %384 = add i64 %383, -8994477962193522369
  %385 = and i64 -8994477962193522369, %383
  %386 = or i64 -8994477962193522369, %383
  %387 = add i64 %385, %386
  %388 = sext i32 %.reload8 to i64
  %389 = or i64 %388, 2189126912600105745
  %390 = and i64 2189126912600105745, %388
  %391 = xor i64 2189126912600105745, %388
  %392 = or i64 %390, %391
  %393 = xor i64 -6702804767600309845, %384
  %394 = xor i64 %393, %387
  %395 = xor i64 %394, %392
  %396 = xor i64 %395, %389
  %397 = sext i32 %.reload8 to i64
  %398 = or i64 %397, 4898035318440137987
  %399 = and i64 4898035318440137987, %397
  %400 = xor i64 4898035318440137987, %397
  %401 = or i64 %399, %400
  %402 = sext i32 %.reload8 to i64
  %403 = add i64 %402, -5092722951913941022
  %404 = xor i64 -5092722951913941022, %402
  %405 = and i64 -5092722951913941022, %402
  %406 = mul i64 2, %405
  %407 = add i64 %404, %406
  %408 = sext i32 %.reload8 to i64
  %409 = and i64 %408, 7422888451289705709
  %410 = or i64 -7422888451289705710, %408
  %411 = sub i64 %410, -7422888451289705710
  %412 = xor i64 %398, %407
  %413 = xor i64 %412, %409
  %414 = xor i64 %413, %403
  %415 = xor i64 %414, %401
  %416 = xor i64 %415, 0
  %417 = xor i64 %416, %411
  %418 = mul i64 %396, %417
  %419 = sext i32 %.reload8 to i64
  %420 = or i64 %419, 1101754364072892001
  %421 = xor i64 %419, -1
  %422 = and i64 1101754364072892001, %421
  %423 = add i64 %422, %419
  %424 = sext i32 %.reload8 to i64
  %425 = and i64 %424, 5343384709823156985
  %426 = xor i64 %424, -1
  %427 = xor i64 5343384709823156985, %426
  %428 = and i64 %427, 5343384709823156985
  %429 = xor i64 -7873213813300623327, %425
  %430 = xor i64 %429, %420
  %431 = xor i64 %430, %423
  %432 = xor i64 %431, %428
  %433 = sext i32 %.reload8 to i64
  %434 = and i64 %433, 7615222681471391119
  %435 = xor i64 %433, -1
  %436 = or i64 -7615222681471391120, %435
  %437 = xor i64 %436, -1
  %438 = and i64 %437, -1
  %439 = sext i32 %.reload8 to i64
  %440 = and i64 %439, -4670769585191038066
  %441 = xor i64 %439, -1
  %442 = xor i64 -4670769585191038066, %441
  %443 = and i64 %442, -4670769585191038066
  %444 = xor i64 %434, %443
  %445 = xor i64 %444, %438
  %446 = xor i64 %445, 0
  %447 = xor i64 %446, %440
  %448 = mul i64 %432, %447
  %449 = trunc i64 %448 to i1
  %450 = sext i32 %.reload8 to i64
  %451 = or i64 %450, 2626176361722516579
  %452 = and i64 2626176361722516579, %450
  %453 = xor i64 2626176361722516579, %450
  %454 = or i64 %452, %453
  %455 = sext i32 %.reload8 to i64
  %456 = add i64 %455, 402863441506600608
  %457 = sub i64 0, %455
  %458 = add i64 -402863441506600608, %457
  %459 = sub i64 0, %458
  %460 = sext i32 %.reload8 to i64
  %461 = add i64 %460, 7353968761726094354
  %462 = xor i64 7353968761726094354, %460
  %463 = and i64 7353968761726094354, %460
  %464 = mul i64 2, %463
  %465 = add i64 %462, %464
  %466 = xor i64 %456, -7087694828415777125
  %467 = xor i64 %466, %454
  %468 = xor i64 %467, %451
  %469 = xor i64 %468, %461
  %470 = xor i64 %469, %459
  %471 = xor i64 %470, %465
  %472 = sext i32 %.reload8 to i64
  %473 = add i64 %472, -445747877932540470
  %474 = and i64 -445747877932540470, %472
  %475 = or i64 -445747877932540470, %472
  %476 = add i64 %474, %475
  %477 = sext i32 %.reload8 to i64
  %478 = and i64 %477, -2576296252561552980
  %479 = xor i64 %477, -1
  %480 = or i64 2576296252561552979, %479
  %481 = xor i64 %480, -1
  %482 = and i64 %481, -1
  %483 = sext i32 %.reload8 to i64
  %484 = and i64 %483, 7523333480934265582
  %485 = xor i64 %483, -1
  %486 = xor i64 7523333480934265582, %485
  %487 = and i64 %486, 7523333480934265582
  %488 = xor i64 %484, %478
  %489 = xor i64 %488, %487
  %490 = xor i64 %489, 0
  %491 = xor i64 %490, %473
  %492 = xor i64 %491, %482
  %493 = xor i64 %492, %476
  %494 = mul i64 %471, %493
  %495 = trunc i64 %494 to i1
  %496 = sext i32 %.reload8 to i64
  %497 = and i64 %496, 759585938826625693
  %498 = or i64 -759585938826625694, %496
  %499 = sub i64 %498, -759585938826625694
  %500 = sext i32 %.reload8 to i64
  %501 = and i64 %500, 1094886170349430791
  %502 = or i64 -1094886170349430792, %500
  %503 = sub i64 %502, -1094886170349430792
  %504 = sext i32 %.reload8 to i64
  %505 = or i64 %504, 4457975773683632544
  %506 = xor i64 %504, -1
  %507 = and i64 %506, -7943384058751613048
  %508 = and i64 %504, 7943384058751613047
  %509 = or i64 %507, %508
  %510 = xor i64 -6044245146958442968, %509
  %511 = xor i64 %504, -1
  %512 = or i64 -4457975773683632545, %511
  %513 = xor i64 %512, -1
  %514 = and i64 %513, -1
  %515 = or i64 %510, %514
  %516 = xor i64 %497, %505
  %517 = xor i64 %516, 609339827732476797
  %518 = xor i64 %517, %515
  %519 = xor i64 %518, %501
  %520 = xor i64 %519, %503
  %521 = xor i64 %520, %499
  %522 = sext i32 %.reload8 to i64
  %523 = add i64 %522, -2180502831431041977
  %524 = and i64 -2180502831431041977, %522
  %525 = or i64 -2180502831431041977, %522
  %526 = add i64 %524, %525
  %527 = sext i32 %.reload8 to i64
  %528 = and i64 %527, -6369525760709146968
  %529 = xor i64 %527, -1
  %530 = or i64 6369525760709146967, %529
  %531 = xor i64 %530, -1
  %532 = and i64 %531, -1
  %533 = sext i32 %.reload8 to i64
  %534 = add i64 %533, 7404496252319140617
  %535 = sub i64 0, %533
  %536 = add i64 -7404496252319140617, %535
  %537 = sub i64 0, %536
  %538 = xor i64 %526, %523
  %539 = xor i64 %538, %537
  %540 = xor i64 %539, %528
  %541 = xor i64 %540, 0
  %542 = xor i64 %541, %532
  %543 = xor i64 %542, %534
  %544 = mul i64 %521, %543
  %545 = trunc i64 %544 to i1
  call void @"9941920946239825184"(i32 %212, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %169, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %269, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %312, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %353, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %382, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %418, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %449, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %495, i1 false, i1 %545, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %546 = load i64, i64* %169, align 8
  %547 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3945980122852926304, i32 0, i64 %546
  store i8** %547, i8*** %.reg2mem, align 8
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012102, i32* %0, align 4
  %548 = call i8** @bf15658819879636911971(i32* %0)
  %549 = load i8*, i8** %548, align 8
  indirectbr i8* %549, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.loopexit
    i32 2, label %codeRepl
    i32 3, label %.exitStub
    i32 4, label %.exitStub2
    i32 5, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %.reload = load i8**, i8*** %.reg2mem, align 8
  store i8* bitcast (i1 (i32, i1*, i1, i1*)* @inner_loop..loopexit.extracted to i8*), i8** %.reload, align 8
  %550 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %551 = load i32, i32* %550, align 4
  %552 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 9
  %553 = load i32, i32* %552, align 4
  %554 = srem i32 %551, %553
  store i32 %554, i32* %dispatcher, align 4
  %555 = load i8*, i8** %18, align 8
  %556 = load i8, i8* %555, align 1
  %557 = mul i8 %556, 2
  %558 = mul i8 %556, 2
  %559 = sext i32 %.reload8 to i64
  %560 = add i64 %559, 8329220460342538467
  %561 = sub i64 0, %559
  %562 = add i64 -8329220460342538467, %561
  %563 = sub i64 0, %562
  %564 = add i64 %13, -3917843594359107874
  %565 = add i64 -6311325711908618634, %13
  %566 = add i64 %565, 2393482117549510760
  %567 = xor i64 %564, %566
  %568 = xor i64 %567, %560
  %569 = xor i64 %568, -5152484980772935943
  %570 = xor i64 %569, %563
  %571 = sext i32 %.reload8 to i64
  %572 = add i64 %571, 7566429983273824671
  %573 = and i64 7566429983273824671, %571
  %574 = or i64 7566429983273824671, %571
  %575 = add i64 %573, %574
  %576 = and i64 %1, -9181407497269470859
  %577 = xor i64 %1, -1
  %578 = or i64 9181407497269470858, %577
  %579 = xor i64 %578, -1
  %580 = and i64 %579, -1
  %581 = xor i64 %580, %572
  %582 = xor i64 %581, %575
  %583 = xor i64 %582, %576
  %584 = xor i64 %583, -7397854554346817902
  %585 = mul i64 %570, %584
  %586 = trunc i64 %585 to i8
  %587 = add i8 %586, %558
  %588 = mul i8 %557, %587
  %589 = srem i8 %588, 4
  %590 = icmp eq i8 %589, 0
  %591 = mul i8 %556, %556
  %592 = sub i8 %591, -5
  %593 = add i8 %592, %556
  %594 = add i8 %593, -5
  %595 = srem i8 %594, 2
  %596 = icmp eq i8 %595, 0
  %597 = or i1 %590, %596
  %598 = select i1 %597, i32 595012097, i32 595012103
  %599 = xor i32 %598, -1073829714
  %600 = xor i32 %599, -1073829720
  store i32 %600, i32* %0, align 4
  %601 = call i8** @bf15658819879636911971(i32* %0)
  %602 = load i8*, i8** %601, align 8
  indirectbr i8* %602, [label %loopEnd, label %EntryBasicBlockSplit]

.loopexit:                                        ; preds = %.loopexit, %loopStart
  %603 = mul i32 %.reload8, 2
  %604 = mul i32 %.reload8, 2
  %605 = sub i32 0, %604
  %606 = sub i32 2, %605
  %607 = mul i32 %603, %606
  %608 = srem i32 %607, 4
  %609 = icmp eq i32 %608, 0
  store i1 %609, i1* %.reg2mem2, align 1
  %610 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 7
  %611 = load i32, i32* %610, align 4
  %612 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %613 = load i32, i32* %612, align 4
  %614 = sub i32 %611, %613
  store i32 %614, i32* %dispatcher, align 4
  %615 = load i8*, i8** %12, align 8
  %616 = load i8, i8* %615, align 1
  %617 = or i64 %11, -8563685087954513639
  %618 = and i64 -8563685087954513639, %11
  %619 = xor i64 -8563685087954513639, %11
  %620 = or i64 %618, %619
  %621 = and i64 %17, -4403494898531617462
  %622 = xor i64 %17, -1
  %623 = xor i64 -4403494898531617462, %622
  %624 = and i64 %623, -4403494898531617462
  %625 = add i64 %7, -2306416748455825380
  %626 = sub i64 0, %7
  %627 = sub i64 -2306416748455825380, %626
  %628 = xor i64 %620, %617
  %629 = xor i64 %628, %621
  %630 = xor i64 %629, %627
  %631 = xor i64 %630, %624
  %632 = xor i64 %631, %625
  %633 = xor i64 %632, 5804025869948281991
  %634 = add i64 %7, -7421187119652333373
  %635 = add i64 72784741955455204, %7
  %636 = sub i64 %635, 7493971861607788577
  %637 = add i64 %13, 802311663843056939
  %638 = sub i64 0, %13
  %639 = add i64 -802311663843056939, %638
  %640 = sub i64 0, %639
  %641 = sext i32 %dispatcher1 to i64
  %642 = add i64 %641, 5328072167510519468
  %643 = add i64 989679325106673209, %641
  %644 = sub i64 %643, -4338392842403846259
  %645 = xor i64 %637, %634
  %646 = xor i64 %645, %640
  %647 = xor i64 %646, %636
  %648 = xor i64 %647, %642
  %649 = xor i64 %648, %644
  %650 = xor i64 %649, -4567767664969956754
  %651 = mul i64 %633, %650
  %652 = trunc i64 %651 to i8
  %653 = mul i8 %616, %652
  %654 = mul i8 %616, 2
  %655 = sext i32 %dispatcher1 to i64
  %656 = add i64 %655, 2734710803283244981
  %657 = add i64 5580347481198749990, %655
  %658 = add i64 %657, -2845636677915505009
  %659 = add i64 %11, -6860215305708419221
  %660 = sub i64 0, %11
  %661 = sub i64 -6860215305708419221, %660
  %662 = xor i64 %661, %656
  %663 = xor i64 %662, 2320671540109756497
  %664 = xor i64 %663, %659
  %665 = xor i64 %664, %658
  %666 = or i64 %3, 4362597784990202478
  %667 = xor i64 %3, -1
  %668 = and i64 %667, -5320923638352496933
  %669 = and i64 %3, 5320923638352496932
  %670 = or i64 %668, %669
  %671 = xor i64 -8456836827268379467, %670
  %672 = xor i64 %3, -1
  %673 = or i64 -4362597784990202479, %672
  %674 = xor i64 %673, -1
  %675 = and i64 %674, -1
  %676 = or i64 %671, %675
  %677 = sext i32 %dispatcher1 to i64
  %678 = and i64 %677, 2041398143790866519
  %679 = xor i64 %677, -1
  %680 = or i64 -2041398143790866520, %679
  %681 = xor i64 %680, -1
  %682 = and i64 %681, -1
  %683 = or i64 %3, -3270579716068996341
  %684 = and i64 -3270579716068996341, %3
  %685 = xor i64 -3270579716068996341, %3
  %686 = or i64 %684, %685
  %687 = xor i64 %666, %682
  %688 = xor i64 %687, %676
  %689 = xor i64 %688, 5405153196073615714
  %690 = xor i64 %689, %683
  %691 = xor i64 %690, %686
  %692 = xor i64 %691, %678
  %693 = mul i64 %665, %692
  %694 = trunc i64 %693 to i8
  %695 = add i8 %694, %654
  %696 = mul i8 %653, %695
  %697 = srem i8 %696, 4
  %698 = sext i32 %dispatcher1 to i64
  %699 = or i64 %698, -292735906258623823
  %700 = xor i64 %698, -1
  %701 = and i64 %700, -1602803513184695710
  %702 = and i64 %698, 1602803513184695709
  %703 = or i64 %701, %702
  %704 = xor i64 1310068709440825555, %703
  %705 = xor i64 %698, -1
  %706 = or i64 292735906258623822, %705
  %707 = xor i64 %706, -1
  %708 = and i64 %707, -1
  %709 = or i64 %704, %708
  %710 = or i64 %3, 5059880051234148770
  %711 = and i64 5059880051234148770, %3
  %712 = xor i64 5059880051234148770, %3
  %713 = or i64 %711, %712
  %714 = xor i64 -7488736302950618765, %710
  %715 = xor i64 %714, %713
  %716 = xor i64 %715, %699
  %717 = xor i64 %716, %709
  %718 = add i64 %546, 6779525030897336007
  %719 = sub i64 0, %546
  %720 = sub i64 6779525030897336007, %719
  %721 = or i64 %13, -4937397731579416385
  %722 = xor i64 %13, -1
  %723 = and i64 -4937397731579416385, %722
  %724 = add i64 %723, %13
  %725 = or i64 %13, 8061533363597247633
  %726 = xor i64 %13, -1
  %727 = and i64 8061533363597247633, %726
  %728 = add i64 %727, %13
  %729 = xor i64 %721, %720
  %730 = xor i64 %729, 0
  %731 = xor i64 %730, %725
  %732 = xor i64 %731, %718
  %733 = xor i64 %732, %728
  %734 = xor i64 %733, %724
  %735 = mul i64 %717, %734
  %736 = trunc i64 %735 to i8
  %737 = icmp eq i8 %697, %736
  %738 = mul i8 %616, %616
  %739 = mul i8 %738, %616
  %740 = add i8 %739, %616
  %741 = add i64 %5, 790351008773683290
  %742 = add i64 -225327004788495596, %5
  %743 = sub i64 %742, -1015678013562178886
  %744 = add i64 %5, -6921741264154701055
  %745 = and i64 -6921741264154701055, %5
  %746 = or i64 -6921741264154701055, %5
  %747 = add i64 %745, %746
  %748 = xor i64 %744, -6984897081910894245
  %749 = xor i64 %748, %747
  %750 = xor i64 %749, %743
  %751 = xor i64 %750, %741
  %752 = or i64 %17, -283459171061317130
  %753 = xor i64 %17, -1
  %754 = and i64 %753, 3172947171886129197
  %755 = and i64 %17, -3172947171886129198
  %756 = or i64 %754, %755
  %757 = xor i64 -3451901608935677477, %756
  %758 = xor i64 %17, -1
  %759 = or i64 283459171061317129, %758
  %760 = xor i64 %759, -1
  %761 = and i64 %760, -1
  %762 = or i64 %757, %761
  %763 = and i64 %13, 6406538353164110645
  %764 = xor i64 %13, -1
  %765 = xor i64 6406538353164110645, %764
  %766 = and i64 %765, 6406538353164110645
  %767 = xor i64 %763, %766
  %768 = xor i64 %767, 1292848836368584102
  %769 = xor i64 %768, %762
  %770 = xor i64 %769, %752
  %771 = mul i64 %751, %770
  %772 = trunc i64 %771 to i8
  %773 = srem i8 %740, %772
  %774 = icmp eq i8 %773, 0
  %775 = and i1 %737, %774
  %776 = select i1 %775, i32 595012104, i32 595012103
  %777 = xor i32 %776, -1
  %778 = add i64 %11, -4069030013237198193
  %779 = sub i64 0, %11
  %780 = sub i64 -4069030013237198193, %779
  %781 = sext i32 %.reload8 to i64
  %782 = and i64 %781, 8996950032068110173
  %783 = xor i64 %781, -1
  %784 = or i64 -8996950032068110174, %783
  %785 = xor i64 %784, -1
  %786 = and i64 %785, -1
  %787 = xor i64 %786, -2470317253436614323
  %788 = xor i64 %787, %782
  %789 = xor i64 %788, %780
  %790 = xor i64 %789, %778
  %791 = and i64 %7, -7546890411487794451
  %792 = xor i64 %7, -1
  %793 = xor i64 -7546890411487794451, %792
  %794 = and i64 %793, -7546890411487794451
  %795 = and i64 %1, 2326568275925641752
  %796 = xor i64 %1, -1
  %797 = xor i64 2326568275925641752, %796
  %798 = and i64 %797, 2326568275925641752
  %799 = xor i64 %791, %795
  %800 = xor i64 %799, %798
  %801 = xor i64 %800, %794
  %802 = xor i64 %801, 4067972233652990155
  %803 = mul i64 %790, %802
  %804 = trunc i64 %803 to i32
  %805 = and i32 %777, %804
  %806 = and i32 %776, -16
  %807 = or i32 %805, %806
  store i32 %807, i32* %0, align 4
  %808 = call i8** @bf15658819879636911971(i32* %0)
  %809 = load i8*, i8** %808, align 8
  indirectbr i8* %809, [label %loopEnd, label %.loopexit]

codeRepl:                                         ; preds = %codeRepl, %loopStart
  store i64 1996855465712537074, i64* %168, align 8
  %810 = alloca i8**, align 8
  %811 = or i64 %13, -804045200437273504
  %812 = xor i64 %13, -1
  %813 = and i64 %812, 8304193989755034018
  %814 = and i64 %13, -8304193989755034019
  %815 = or i64 %813, %814
  %816 = xor i64 -8653357403970189886, %815
  %817 = xor i64 %13, -1
  %818 = or i64 804045200437273503, %817
  %819 = xor i64 %818, -1
  %820 = and i64 %819, -1
  %821 = or i64 %816, %820
  %822 = or i64 %1, 7170729996961333121
  %823 = xor i64 %1, -1
  %824 = and i64 %823, -1210049710033444537
  %825 = and i64 %1, 1210049710033444536
  %826 = or i64 %824, %825
  %827 = xor i64 -8307304288380887354, %826
  %828 = xor i64 %1, -1
  %829 = or i64 -7170729996961333122, %828
  %830 = xor i64 %829, -1
  %831 = and i64 %830, -1
  %832 = or i64 %827, %831
  %833 = sext i32 %dispatcher1 to i64
  %834 = add i64 %833, -8440870454952265429
  %835 = add i64 -6658612702035190152, %833
  %836 = sub i64 %835, 1782257752917075277
  %837 = xor i64 3111980438046321815, %832
  %838 = xor i64 %837, %822
  %839 = xor i64 %838, %821
  %840 = xor i64 %839, %836
  %841 = xor i64 %840, %834
  %842 = xor i64 %841, %811
  %843 = add i64 %17, -7938000740371894348
  %844 = add i64 -9090498063783940170, %17
  %845 = sub i64 %844, -1152497323412045822
  %846 = sext i32 %.reload8 to i64
  %847 = or i64 %846, -8401940358805613816
  %848 = and i64 -8401940358805613816, %846
  %849 = xor i64 -8401940358805613816, %846
  %850 = or i64 %848, %849
  %851 = or i64 %1, -6467917551738655975
  %852 = xor i64 %1, -1
  %853 = and i64 %852, -8134727159498563630
  %854 = and i64 %1, 8134727159498563629
  %855 = or i64 %853, %854
  %856 = xor i64 2965325680495555787, %855
  %857 = xor i64 %1, -1
  %858 = or i64 6467917551738655974, %857
  %859 = xor i64 %858, -1
  %860 = and i64 %859, -1
  %861 = or i64 %856, %860
  %862 = xor i64 %861, %843
  %863 = xor i64 %862, %851
  %864 = xor i64 %863, 0
  %865 = xor i64 %864, %850
  %866 = xor i64 %865, %847
  %867 = xor i64 %866, %845
  %868 = mul i64 %842, %867
  %869 = trunc i64 %868 to i32
  %870 = or i64 %9, -8337204722056186842
  %871 = xor i64 %9, -1
  %872 = and i64 %871, -1021162384909108070
  %873 = and i64 %9, 1021162384909108069
  %874 = or i64 %872, %873
  %875 = xor i64 9050078296689199292, %874
  %876 = xor i64 %9, -1
  %877 = or i64 8337204722056186841, %876
  %878 = xor i64 %877, -1
  %879 = and i64 %878, -1
  %880 = or i64 %875, %879
  %881 = and i64 %7, -2649778166943174667
  %882 = or i64 2649778166943174666, %7
  %883 = sub i64 %882, 2649778166943174666
  %884 = xor i64 %883, %880
  %885 = xor i64 %884, %870
  %886 = xor i64 %885, %881
  %887 = xor i64 %886, 607938634798864653
  %888 = and i64 %13, 3747935792607789706
  %889 = or i64 -3747935792607789707, %13
  %890 = sub i64 %889, -3747935792607789707
  %891 = or i64 %11, 2633618915823123055
  %892 = xor i64 %11, -1
  %893 = and i64 %892, 547105824901765036
  %894 = and i64 %11, -547105824901765037
  %895 = or i64 %893, %894
  %896 = xor i64 2529839547050880451, %895
  %897 = xor i64 %11, -1
  %898 = or i64 -2633618915823123056, %897
  %899 = xor i64 %898, -1
  %900 = and i64 %899, -1
  %901 = or i64 %896, %900
  %902 = xor i64 %890, 0
  %903 = xor i64 %902, %891
  %904 = xor i64 %903, %888
  %905 = xor i64 %904, %901
  %906 = mul i64 %887, %905
  %907 = trunc i64 %906 to i1
  %908 = sext i32 %dispatcher1 to i64
  %909 = add i64 %908, -8208235090155756445
  %910 = and i64 -8208235090155756445, %908
  %911 = or i64 -8208235090155756445, %908
  %912 = add i64 %910, %911
  %913 = add i64 %546, 5299084415442543655
  %914 = and i64 5299084415442543655, %546
  %915 = or i64 5299084415442543655, %546
  %916 = add i64 %914, %915
  %917 = xor i64 %909, 4133816278053297573
  %918 = xor i64 %917, %916
  %919 = xor i64 %918, %913
  %920 = xor i64 %919, %912
  %921 = add i64 %11, -7881339969642909971
  %922 = sub i64 0, %11
  %923 = sub i64 -7881339969642909971, %922
  %924 = and i64 %1, 2802578756913786538
  %925 = xor i64 %1, -1
  %926 = xor i64 2802578756913786538, %925
  %927 = and i64 %926, 2802578756913786538
  %928 = sext i32 %.reload8 to i64
  %929 = and i64 %928, -1253293523417166699
  %930 = or i64 1253293523417166698, %928
  %931 = sub i64 %930, 1253293523417166698
  %932 = xor i64 %931, 0
  %933 = xor i64 %932, %924
  %934 = xor i64 %933, %921
  %935 = xor i64 %934, %929
  %936 = xor i64 %935, %927
  %937 = xor i64 %936, %923
  %938 = mul i64 %920, %937
  %939 = trunc i64 %938 to i1
  %940 = sext i32 %.reload8 to i64
  %941 = and i64 %940, 2292503963913986251
  %942 = xor i64 %940, -1
  %943 = xor i64 2292503963913986251, %942
  %944 = and i64 %943, 2292503963913986251
  %945 = add i64 %546, 34541606842816416
  %946 = add i64 6152659977138050738, %546
  %947 = sub i64 %946, 6118118370295234322
  %948 = sext i32 %.reload8 to i64
  %949 = and i64 %948, 8724370214080748119
  %950 = xor i64 %948, -1
  %951 = xor i64 8724370214080748119, %950
  %952 = and i64 %951, 8724370214080748119
  %953 = xor i64 %941, %949
  %954 = xor i64 %953, 350950809879745829
  %955 = xor i64 %954, %945
  %956 = xor i64 %955, %944
  %957 = xor i64 %956, %947
  %958 = xor i64 %957, %952
  %959 = or i64 %11, 4078444949469795770
  %960 = xor i64 %11, -1
  %961 = and i64 4078444949469795770, %960
  %962 = add i64 %961, %11
  %963 = add i64 %5, -8927097180601219128
  %964 = sub i64 0, %5
  %965 = sub i64 -8927097180601219128, %964
  %966 = xor i64 %962, 0
  %967 = xor i64 %966, %963
  %968 = xor i64 %967, %959
  %969 = xor i64 %968, %965
  %970 = mul i64 %958, %969
  %971 = trunc i64 %970 to i1
  %972 = and i64 %546, 3360104133466540691
  %973 = or i64 -3360104133466540692, %546
  %974 = sub i64 %973, -3360104133466540692
  %975 = or i64 %7, -7408791617415931491
  %976 = xor i64 %7, -1
  %977 = and i64 -7408791617415931491, %976
  %978 = add i64 %977, %7
  %979 = xor i64 %972, 3897283195395190689
  %980 = xor i64 %979, %975
  %981 = xor i64 %980, %974
  %982 = xor i64 %981, %978
  %983 = or i64 %13, -5132664431084274734
  %984 = xor i64 %13, -1
  %985 = and i64 -5132664431084274734, %984
  %986 = add i64 %985, %13
  %987 = or i64 %3, -5588969230828187049
  %988 = xor i64 %3, -1
  %989 = and i64 -5588969230828187049, %988
  %990 = add i64 %989, %3
  %991 = and i64 %546, 832219262939434559
  %992 = xor i64 %546, -1
  %993 = xor i64 832219262939434559, %992
  %994 = and i64 %993, 832219262939434559
  %995 = xor i64 %990, %991
  %996 = xor i64 %995, %986
  %997 = xor i64 %996, %994
  %998 = xor i64 %997, %987
  %999 = xor i64 %998, %983
  %1000 = xor i64 %999, 0
  %1001 = mul i64 %982, %1000
  %1002 = trunc i64 %1001 to i1
  %1003 = and i64 %17, -5348132496092253173
  %1004 = xor i64 %17, -1
  %1005 = or i64 5348132496092253172, %1004
  %1006 = xor i64 %1005, -1
  %1007 = and i64 %1006, -1
  %1008 = and i64 %3, 2181164501711119860
  %1009 = xor i64 %3, -1
  %1010 = or i64 -2181164501711119861, %1009
  %1011 = xor i64 %1010, -1
  %1012 = and i64 %1011, -1
  %1013 = xor i64 %1012, %1007
  %1014 = xor i64 %1013, 7365432557200145797
  %1015 = xor i64 %1014, %1003
  %1016 = xor i64 %1015, %1008
  %1017 = add i64 %15, 651061206406778123
  %1018 = add i64 1088303180589072605, %15
  %1019 = sub i64 %1018, 437241974182294482
  %1020 = or i64 %9, -5356227484351113565
  %1021 = and i64 -5356227484351113565, %9
  %1022 = xor i64 -5356227484351113565, %9
  %1023 = or i64 %1021, %1022
  %1024 = and i64 %11, -6768822964153417193
  %1025 = xor i64 %11, -1
  %1026 = or i64 6768822964153417192, %1025
  %1027 = xor i64 %1026, -1
  %1028 = and i64 %1027, -1
  %1029 = xor i64 0, %1023
  %1030 = xor i64 %1029, %1020
  %1031 = xor i64 %1030, %1024
  %1032 = xor i64 %1031, %1017
  %1033 = xor i64 %1032, %1028
  %1034 = xor i64 %1033, %1019
  %1035 = mul i64 %1016, %1034
  %1036 = trunc i64 %1035 to i1
  call void @"9941920946239825184"(i32 3, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* %168, i8*** %810, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %869, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %907, i1 false, i1* null, i1 %939, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %971, i1 false, i1 %1002, i1 %1036, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %1037 = load i8**, i8*** %810, align 8
  %1038 = load i8*, i8** %1037, align 8
  %1039 = bitcast i8* %1038 to i1 (i32, i1*, i1, i1*)*
  %.reload3 = load i1, i1* %.reg2mem2, align 1
  %targetBlock = call i1 %1039(i32 %.reload8, i1* %.out, i1 %.reload3, i1* %.out1)
  %1040 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 5
  %1041 = load i32, i32* %1040, align 4
  %1042 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %1043 = load i32, i32* %1042, align 4
  %1044 = add i32 %1041, %1043
  %1045 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  %1046 = load i32, i32* %1045, align 4
  %1047 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %1048 = load i32, i32* %1047, align 4
  %1049 = sub i32 %1046, %1048
  %1050 = select i1 %targetBlock, i32 %1044, i32 %1049
  store i32 %1050, i32* %dispatcher, align 4
  %1051 = load i8*, i8** %18, align 8
  %1052 = load i8, i8* %1051, align 1
  %1053 = xor i8 %1052, -1
  %1054 = add i64 %5, 8957055873913504400
  %1055 = sub i64 0, %5
  %1056 = sub i64 8957055873913504400, %1055
  %1057 = or i64 %17, 2789915764753563218
  %1058 = xor i64 %17, -1
  %1059 = and i64 %1058, 1619808263204579440
  %1060 = and i64 %17, -1619808263204579441
  %1061 = or i64 %1059, %1060
  %1062 = xor i64 3516592862884582946, %1061
  %1063 = xor i64 %17, -1
  %1064 = or i64 -2789915764753563219, %1063
  %1065 = xor i64 %1064, -1
  %1066 = and i64 %1065, -1
  %1067 = or i64 %1062, %1066
  %1068 = sext i32 %dispatcher1 to i64
  %1069 = add i64 %1068, 2316423644098728764
  %1070 = sub i64 0, %1068
  %1071 = sub i64 2316423644098728764, %1070
  %1072 = xor i64 %1057, %1054
  %1073 = xor i64 %1072, %1069
  %1074 = xor i64 %1073, %1071
  %1075 = xor i64 %1074, -8039322434850342359
  %1076 = xor i64 %1075, %1067
  %1077 = xor i64 %1076, %1056
  %1078 = or i64 %11, 7808605940376962247
  %1079 = xor i64 %11, -1
  %1080 = and i64 7808605940376962247, %1079
  %1081 = add i64 %1080, %11
  %1082 = add i64 %5, 3869104716084316797
  %1083 = xor i64 3869104716084316797, %5
  %1084 = and i64 3869104716084316797, %5
  %1085 = mul i64 2, %1084
  %1086 = add i64 %1083, %1085
  %1087 = and i64 %7, 8425588846065997225
  %1088 = or i64 -8425588846065997226, %7
  %1089 = sub i64 %1088, -8425588846065997226
  %1090 = xor i64 %1082, %1086
  %1091 = xor i64 %1090, %1089
  %1092 = xor i64 %1091, %1081
  %1093 = xor i64 %1092, %1087
  %1094 = xor i64 %1093, -9205986755384503090
  %1095 = xor i64 %1094, %1078
  %1096 = mul i64 %1077, %1095
  %1097 = trunc i64 %1096 to i8
  %1098 = or i8 %1053, %1097
  %1099 = xor i8 %1098, -1
  %1100 = and i8 %1099, -1
  %1101 = icmp eq i8 %1100, 0
  %1102 = mul i8 %1052, %1052
  %1103 = add i8 %1102, %1052
  %1104 = mul i8 %1103, 3
  %1105 = srem i8 %1104, 2
  %1106 = icmp eq i8 %1105, 0
  %1107 = or i1 %1101, %1106
  %1108 = select i1 %1107, i32 595012104, i32 595012103
  %1109 = or i64 %13, 2734771137978615789
  %1110 = xor i64 %13, -1
  %1111 = and i64 2734771137978615789, %1110
  %1112 = add i64 %1111, %13
  %1113 = and i64 %1, -7920844136035983559
  %1114 = xor i64 %1, -1
  %1115 = xor i64 -7920844136035983559, %1114
  %1116 = and i64 %1115, -7920844136035983559
  %1117 = add i64 %1, -5451913731961366283
  %1118 = sub i64 0, %1
  %1119 = sub i64 -5451913731961366283, %1118
  %1120 = xor i64 %1116, %1109
  %1121 = xor i64 %1120, %1117
  %1122 = xor i64 %1121, %1112
  %1123 = xor i64 %1122, 1648800413065991889
  %1124 = xor i64 %1123, %1119
  %1125 = xor i64 %1124, %1113
  %1126 = sext i32 %.reload8 to i64
  %1127 = add i64 %1126, 2880728627931328397
  %1128 = add i64 8372557300692366494, %1126
  %1129 = sub i64 %1128, 5491828672761038097
  %1130 = add i64 %5, 2706240511132340707
  %1131 = add i64 8470246589577509886, %5
  %1132 = add i64 %1131, -5764006078445169179
  %1133 = add i64 %5, 1267225751944776564
  %1134 = sub i64 0, %5
  %1135 = add i64 -1267225751944776564, %1134
  %1136 = sub i64 0, %1135
  %1137 = xor i64 %1136, %1127
  %1138 = xor i64 %1137, %1132
  %1139 = xor i64 %1138, 93170773153210591
  %1140 = xor i64 %1139, %1129
  %1141 = xor i64 %1140, %1133
  %1142 = xor i64 %1141, %1130
  %1143 = mul i64 %1125, %1142
  %1144 = trunc i64 %1143 to i32
  %1145 = xor i32 %1108, %1144
  store i32 %1145, i32* %0, align 4
  %1146 = call i8** @bf15658819879636911971(i32* %0)
  %1147 = load i8*, i8** %1146, align 8
  indirectbr i8* %1147, [label %loopEnd, label %codeRepl]

.exitStub:                                        ; preds = %loopStart
  %1148 = add i64 %3, -3092557827610468419
  %1149 = sub i64 0, %3
  %1150 = add i64 3092557827610468419, %1149
  %1151 = sub i64 0, %1150
  %1152 = and i64 %546, 2673862510135127283
  %1153 = xor i64 %546, -1
  %1154 = xor i64 2673862510135127283, %1153
  %1155 = and i64 %1154, 2673862510135127283
  %1156 = sext i32 %dispatcher1 to i64
  %1157 = and i64 %1156, -1184445550241893715
  %1158 = xor i64 %1156, -1
  %1159 = or i64 1184445550241893714, %1158
  %1160 = xor i64 %1159, -1
  %1161 = and i64 %1160, -1
  %1162 = xor i64 %1155, %1152
  %1163 = xor i64 %1162, %1161
  %1164 = xor i64 %1163, %1148
  %1165 = xor i64 %1164, %1157
  %1166 = xor i64 %1165, 1063556136347810205
  %1167 = xor i64 %1166, %1151
  %1168 = and i64 %546, 3635815183699584684
  %1169 = xor i64 %546, -1
  %1170 = xor i64 3635815183699584684, %1169
  %1171 = and i64 %1170, 3635815183699584684
  %1172 = and i64 %11, -4070158430088914449
  %1173 = xor i64 %11, -1
  %1174 = xor i64 -4070158430088914449, %1173
  %1175 = and i64 %1174, -4070158430088914449
  %1176 = xor i64 %1172, %1168
  %1177 = xor i64 %1176, %1175
  %1178 = xor i64 %1177, %1171
  %1179 = xor i64 %1178, -4993107857032047435
  %1180 = mul i64 %1167, %1179
  %1181 = trunc i64 %1180 to i1
  ret i1 %1181

.exitStub2:                                       ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %1182 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %1182, align 4
  %1183 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %1183, align 4
  %1184 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %1184, align 4
  %1185 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %1185, align 4
  %1186 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 8
  store i32 7, i32* %1186, align 4
  %1187 = getelementptr inbounds [10 x i32], [10 x i32]* %lookupTable, i32 0, i32 0
  %1188 = load i32, i32* %1187, align 4
  store i32 %1188, i32* %dispatcher, align 4
  %1189 = load i8*, i8** %4, align 8
  %1190 = load i8, i8* %1189, align 1
  %1191 = xor i8 %1190, -2
  %1192 = and i8 %1191, %1190
  %1193 = icmp eq i8 %1192, 0
  %1194 = mul i8 %1190, %1190
  %1195 = sub i8 0, %1194
  %1196 = sub i8 0, %1190
  %1197 = add i8 %1195, %1196
  %1198 = sub i8 0, %1197
  %1199 = mul i8 %1198, 3
  %1200 = srem i8 %1199, 2
  %1201 = icmp eq i8 %1200, 0
  %1202 = xor i1 %1201, true
  %1203 = and i1 %1193, %1202
  %1204 = add i1 %1203, %1201
  %1205 = sext i32 %dispatcher1 to i64
  %1206 = and i64 %1205, -1765318913181144849
  %1207 = xor i64 %1205, -1
  %1208 = or i64 1765318913181144848, %1207
  %1209 = xor i64 %1208, -1
  %1210 = and i64 %1209, -1
  %1211 = or i64 %7, 8736444618879943927
  %1212 = and i64 8736444618879943927, %7
  %1213 = xor i64 8736444618879943927, %7
  %1214 = or i64 %1212, %1213
  %1215 = add i64 %1, 8128429138840358851
  %1216 = add i64 1444885268624816457, %1
  %1217 = sub i64 %1216, -6683543870215542394
  %1218 = xor i64 -8107928680839820823, %1210
  %1219 = xor i64 %1218, %1206
  %1220 = xor i64 %1219, %1211
  %1221 = xor i64 %1220, %1217
  %1222 = xor i64 %1221, %1214
  %1223 = xor i64 %1222, %1215
  %1224 = add i64 %546, -304733192626921888
  %1225 = sub i64 0, %546
  %1226 = add i64 304733192626921888, %1225
  %1227 = sub i64 0, %1226
  %1228 = or i64 %9, 5439182748502936917
  %1229 = xor i64 %9, -1
  %1230 = and i64 5439182748502936917, %1229
  %1231 = add i64 %1230, %9
  %1232 = xor i64 %1231, %1224
  %1233 = xor i64 %1232, %1227
  %1234 = xor i64 %1233, -8216621440091525521
  %1235 = xor i64 %1234, %1228
  %1236 = mul i64 %1223, %1235
  %1237 = trunc i64 %1236 to i32
  %1238 = select i1 %1204, i32 %1237, i32 595012096
  %1239 = xor i32 %1238, -1
  %1240 = and i32 %1239, -413711612
  %1241 = and i32 %1238, 413711611
  %1242 = or i32 %1240, %1241
  %1243 = xor i32 %1242, -413711613
  store i32 %1243, i32* %0, align 4
  %1244 = call i8** @bf15658819879636911971(i32* %0)
  %1245 = load i8*, i8** %1244, align 8
  indirectbr i8* %1245, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %1246 = load i8*, i8** %18, align 8
  %1247 = load i8, i8* %1246, align 1
  %1248 = and i8 %1247, 1
  %1249 = icmp eq i8 %1248, 0
  %1250 = mul i8 %1247, %1247
  %1251 = add i8 %1250, %1247
  %1252 = mul i8 %1251, 3
  %1253 = srem i8 %1252, 2
  %1254 = icmp eq i8 %1253, 0
  %1255 = and i1 %1249, %1254
  %1256 = xor i1 %1249, %1254
  %1257 = or i1 %1255, %1256
  %1258 = select i1 %1257, i32 595012097, i32 595012103
  %1259 = xor i32 %1258, 6
  store i32 %1259, i32* %0, align 4
  %1260 = call i8** @bf15658819879636911971(i32* %0)
  %1261 = load i8*, i8** %1260, align 8
  indirectbr i8* %1261, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %codeRepl, %.loopexit, %EntryBasicBlockSplit
  %1262 = load i8*, i8** %2, align 8
  %1263 = load i8, i8* %1262, align 1
  %1264 = mul i8 %1263, 2
  %1265 = mul i8 %1263, 2
  %1266 = add i8 2, %1265
  %1267 = mul i8 %1264, %1266
  %1268 = srem i8 %1267, 4
  %1269 = icmp eq i8 %1268, 0
  %1270 = mul i8 %1263, %1263
  %1271 = add i8 %1270, %1263
  %1272 = srem i8 %1271, 2
  %1273 = and i64 %11, 117766956821644275
  %1274 = xor i64 %11, -1
  %1275 = or i64 -117766956821644276, %1274
  %1276 = xor i64 %1275, -1
  %1277 = and i64 %1276, -1
  %1278 = sext i32 %dispatcher1 to i64
  %1279 = or i64 %1278, 2086971274015879348
  %1280 = xor i64 %1278, -1
  %1281 = and i64 2086971274015879348, %1280
  %1282 = add i64 %1281, %1278
  %1283 = sext i32 %.reload8 to i64
  %1284 = and i64 %1283, -6235410746323275303
  %1285 = or i64 6235410746323275302, %1283
  %1286 = sub i64 %1285, 6235410746323275302
  %1287 = xor i64 %1284, %1286
  %1288 = xor i64 %1287, %1279
  %1289 = xor i64 %1288, %1273
  %1290 = xor i64 %1289, 2740361638039530537
  %1291 = xor i64 %1290, %1282
  %1292 = xor i64 %1291, %1277
  %1293 = or i64 %5, 3007225821082679864
  %1294 = xor i64 %5, -1
  %1295 = and i64 3007225821082679864, %1294
  %1296 = add i64 %1295, %5
  %1297 = sext i32 %dispatcher1 to i64
  %1298 = or i64 %1297, 2563040101243841182
  %1299 = and i64 2563040101243841182, %1297
  %1300 = xor i64 2563040101243841182, %1297
  %1301 = or i64 %1299, %1300
  %1302 = or i64 %1, -3860420996144214920
  %1303 = xor i64 %1, -1
  %1304 = and i64 %1303, 6274918872810141474
  %1305 = and i64 %1, -6274918872810141475
  %1306 = or i64 %1304, %1305
  %1307 = xor i64 -7099367399993672870, %1306
  %1308 = xor i64 %1, -1
  %1309 = or i64 3860420996144214919, %1308
  %1310 = xor i64 %1309, -1
  %1311 = and i64 %1310, -1
  %1312 = or i64 %1307, %1311
  %1313 = xor i64 %1298, %1302
  %1314 = xor i64 %1313, %1293
  %1315 = xor i64 %1314, %1312
  %1316 = xor i64 %1315, %1296
  %1317 = xor i64 %1316, %1301
  %1318 = xor i64 %1317, 0
  %1319 = mul i64 %1292, %1318
  %1320 = trunc i64 %1319 to i8
  %1321 = icmp eq i8 %1272, %1320
  %1322 = and i1 %1269, %1321
  %1323 = select i1 %1322, i32 595012096, i32 595012102
  %1324 = xor i32 %1323, 6
  store i32 %1324, i32* %0, align 4
  %1325 = call i8** @bf15658819879636911971(i32* %0)
  %1326 = load i8*, i8** %1325, align 8
  indirectbr i8* %1326, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted(i32 %.reload7, i1* %.out) #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012099)
  %2 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %1
  store i8* blockaddress(@inner_loop.extracted, %.exitStub1), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012097)
  %4 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %3
  store i8* blockaddress(@inner_loop.extracted, %"2"), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012102)
  %6 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %5
  store i8* blockaddress(@inner_loop.extracted, %codeRepl), i8** %6, align 8
  %7 = sext i32 %.reload7 to i64
  %8 = and i64 %7, -5506906891839459504
  %9 = xor i64 %7, -1
  %10 = xor i64 -5506906891839459504, %9
  %11 = and i64 %10, -5506906891839459504
  %12 = sext i32 %.reload7 to i64
  %13 = add i64 %12, -2763522444939005442
  %14 = and i64 -2763522444939005442, %12
  %15 = or i64 -2763522444939005442, %12
  %16 = add i64 %14, %15
  %17 = xor i64 %13, %8
  %18 = xor i64 %17, -7271320238125215281
  %19 = xor i64 %18, %11
  %20 = xor i64 %19, %16
  %21 = sext i32 %.reload7 to i64
  %22 = and i64 %21, 3345386108492749692
  %23 = xor i64 %21, -1
  %24 = xor i64 3345386108492749692, %23
  %25 = and i64 %24, 3345386108492749692
  %26 = sext i32 %.reload7 to i64
  %27 = add i64 %26, 1693658553122585936
  %28 = add i64 4117118409457640396, %26
  %29 = add i64 %28, -2423459856335054460
  %30 = sext i32 %.reload7 to i64
  %31 = add i64 %30, -4109887712704969259
  %32 = add i64 4709405935563052153, %30
  %33 = add i64 %32, -8819293648268021412
  %34 = xor i64 %33, %27
  %35 = xor i64 %34, %22
  %36 = xor i64 %35, %25
  %37 = xor i64 %36, -7451890982052514304
  %38 = xor i64 %37, %31
  %39 = xor i64 %38, %29
  %40 = mul i64 %20, %39
  %41 = call i64 @h11804894491772278134(i64 %40)
  %42 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %41
  store i8* blockaddress(@inner_loop.extracted, %.exitStub), i8** %42, align 8
  %43 = call i64 @h11804894491772278134(i64 595012101)
  %44 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %43
  store i8* blockaddress(@inner_loop.extracted, %EntryBasicBlockSplit), i8** %44, align 8
  %45 = call i64 @h11804894491772278134(i64 595012100)
  %46 = getelementptr [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %45
  store i8* blockaddress(@inner_loop.extracted, %BogusBasciBlock), i8** %46, align 8
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem16 = alloca i8**, align 8
  %.reg2mem13 = alloca i8**, align 8
  %47 = sext i32 %.reload7 to i64
  %48 = and i64 %47, 7668877221900281804
  %49 = xor i64 %47, -1
  %50 = or i64 -7668877221900281805, %49
  %51 = xor i64 %50, -1
  %52 = and i64 %51, -1
  %53 = sext i32 %.reload7 to i64
  %54 = add i64 %53, -3436491700457344128
  %55 = add i64 291041513256063588, %53
  %56 = add i64 %55, -3727533213713407716
  %57 = sext i32 %.reload7 to i64
  %58 = or i64 %57, 5134469807400307815
  %59 = and i64 5134469807400307815, %57
  %60 = xor i64 5134469807400307815, %57
  %61 = or i64 %59, %60
  %62 = xor i64 -7090969111920837643, %58
  %63 = xor i64 %62, %54
  %64 = xor i64 %63, %52
  %65 = xor i64 %64, %61
  %66 = xor i64 %65, %56
  %67 = xor i64 %66, %48
  %68 = sext i32 %.reload7 to i64
  %69 = and i64 %68, 1306300348137934007
  %70 = xor i64 %68, -1
  %71 = or i64 -1306300348137934008, %70
  %72 = xor i64 %71, -1
  %73 = and i64 %72, -1
  %74 = sext i32 %.reload7 to i64
  %75 = add i64 %74, -4077342691708164253
  %76 = xor i64 -4077342691708164253, %74
  %77 = and i64 -4077342691708164253, %74
  %78 = mul i64 2, %77
  %79 = add i64 %76, %78
  %80 = sext i32 %.reload7 to i64
  %81 = or i64 %80, -1047641011715070831
  %82 = and i64 -1047641011715070831, %80
  %83 = xor i64 -1047641011715070831, %80
  %84 = or i64 %82, %83
  %85 = xor i64 %81, %79
  %86 = xor i64 %85, %84
  %87 = xor i64 %86, %75
  %88 = xor i64 %87, %69
  %89 = xor i64 %88, %73
  %90 = xor i64 %89, 498935052761012317
  %91 = mul i64 %67, %90
  %92 = trunc i64 %91 to i32
  %.reg2mem10 = alloca i8**, i32 %92, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 6, align 8
  %93 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted, %BogusBasciBlock), i8** %93, align 8
  %94 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %94, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %95 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %95, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop.extracted, %"2"), i8** %.reload5, align 8
  %96 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %96, i8*** %.reg2mem6, align 8
  %.reload9 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop.extracted, %codeRepl), i8** %.reload9, align 8
  %97 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %97, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@inner_loop.extracted, %.exitStub), i8** %.reload12, align 8
  %98 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %98, i8*** %.reg2mem13, align 8
  %.reload15 = load i8**, i8*** %.reg2mem13, align 8
  store i8* blockaddress(@inner_loop.extracted, %.exitStub1), i8** %.reload15, align 8
  %99 = alloca i64, align 8
  %100 = alloca i64, align 8
  %101 = sext i32 %.reload7 to i64
  %102 = or i64 %101, -3036301583426308011
  %103 = xor i64 %101, -1
  %104 = and i64 %103, -1800048783443558491
  %105 = and i64 %101, 1800048783443558490
  %106 = or i64 %104, %105
  %107 = xor i64 3663699080826308592, %106
  %108 = xor i64 %101, -1
  %109 = or i64 3036301583426308010, %108
  %110 = xor i64 %109, -1
  %111 = and i64 %110, -1
  %112 = or i64 %107, %111
  %113 = sext i32 %.reload7 to i64
  %114 = add i64 %113, 8532439632740196697
  %115 = and i64 8532439632740196697, %113
  %116 = or i64 8532439632740196697, %113
  %117 = add i64 %115, %116
  %118 = sext i32 %.reload7 to i64
  %119 = add i64 %118, 8192592514629901896
  %120 = add i64 -8906422822924869059, %118
  %121 = add i64 %120, -1347728736154780661
  %122 = xor i64 %117, 8529770140565310711
  %123 = xor i64 %122, %119
  %124 = xor i64 %123, %121
  %125 = xor i64 %124, %112
  %126 = xor i64 %125, %102
  %127 = xor i64 %126, %114
  %128 = sext i32 %.reload7 to i64
  %129 = or i64 %128, -6934238310969486763
  %130 = and i64 -6934238310969486763, %128
  %131 = xor i64 -6934238310969486763, %128
  %132 = or i64 %130, %131
  %133 = sext i32 %.reload7 to i64
  %134 = and i64 %133, 3779496593779117925
  %135 = or i64 -3779496593779117926, %133
  %136 = sub i64 %135, -3779496593779117926
  %137 = sext i32 %.reload7 to i64
  %138 = add i64 %137, -330828352743229809
  %139 = xor i64 -330828352743229809, %137
  %140 = and i64 -330828352743229809, %137
  %141 = mul i64 2, %140
  %142 = add i64 %139, %141
  %143 = xor i64 %138, %129
  %144 = xor i64 %143, 4624833829093555998
  %145 = xor i64 %144, %132
  %146 = xor i64 %145, %142
  %147 = xor i64 %146, %134
  %148 = xor i64 %147, %136
  %149 = mul i64 %127, %148
  %150 = sext i32 %.reload7 to i64
  %151 = add i64 %150, 8938438844031017124
  %152 = add i64 4590500014430063548, %150
  %153 = add i64 %152, 4347938829600953576
  %154 = sext i32 %.reload7 to i64
  %155 = add i64 %154, 343890050691097398
  %156 = and i64 343890050691097398, %154
  %157 = or i64 343890050691097398, %154
  %158 = add i64 %156, %157
  %159 = xor i64 %158, %151
  %160 = xor i64 %159, %153
  %161 = xor i64 %160, -8039175879413596155
  %162 = xor i64 %161, %155
  %163 = sext i32 %.reload7 to i64
  %164 = add i64 %163, -476817953746847457
  %165 = add i64 -2106755903330864829, %163
  %166 = sub i64 %165, -1629937949584017372
  %167 = sext i32 %.reload7 to i64
  %168 = add i64 %167, 7515234787598599994
  %169 = xor i64 7515234787598599994, %167
  %170 = and i64 7515234787598599994, %167
  %171 = mul i64 2, %170
  %172 = add i64 %169, %171
  %173 = xor i64 0, %172
  %174 = xor i64 %173, %164
  %175 = xor i64 %174, %166
  %176 = xor i64 %175, %168
  %177 = mul i64 %162, %176
  %178 = trunc i64 %177 to i1
  %179 = sext i32 %.reload7 to i64
  %180 = and i64 %179, 904287880085461562
  %181 = xor i64 %179, -1
  %182 = or i64 -904287880085461563, %181
  %183 = xor i64 %182, -1
  %184 = and i64 %183, -1
  %185 = sext i32 %.reload7 to i64
  %186 = or i64 %185, -6739249652750887657
  %187 = xor i64 %185, -1
  %188 = and i64 %187, -1988637774318913888
  %189 = and i64 %185, 1988637774318913887
  %190 = or i64 %188, %189
  %191 = xor i64 5052916042915374007, %190
  %192 = xor i64 %185, -1
  %193 = or i64 6739249652750887656, %192
  %194 = xor i64 %193, -1
  %195 = and i64 %194, -1
  %196 = or i64 %191, %195
  %197 = sext i32 %.reload7 to i64
  %198 = and i64 %197, -8461811559799642362
  %199 = or i64 8461811559799642361, %197
  %200 = sub i64 %199, 8461811559799642361
  %201 = xor i64 %180, %196
  %202 = xor i64 %201, %184
  %203 = xor i64 %202, %198
  %204 = xor i64 %203, %186
  %205 = xor i64 %204, %200
  %206 = xor i64 %205, -67973746901425763
  %207 = sext i32 %.reload7 to i64
  %208 = add i64 %207, -1936758892946803741
  %209 = xor i64 -1936758892946803741, %207
  %210 = and i64 -1936758892946803741, %207
  %211 = mul i64 2, %210
  %212 = add i64 %209, %211
  %213 = sext i32 %.reload7 to i64
  %214 = and i64 %213, 2377056820188276675
  %215 = xor i64 %213, -1
  %216 = or i64 -2377056820188276676, %215
  %217 = xor i64 %216, -1
  %218 = and i64 %217, -1
  %219 = xor i64 %212, 0
  %220 = xor i64 %219, %208
  %221 = xor i64 %220, %218
  %222 = xor i64 %221, %214
  %223 = mul i64 %206, %222
  %224 = sext i32 %.reload7 to i64
  %225 = add i64 %224, -2927727937383793212
  %226 = sub i64 0, %224
  %227 = sub i64 -2927727937383793212, %226
  %228 = sext i32 %.reload7 to i64
  %229 = add i64 %228, 3467946472896535685
  %230 = add i64 -5742300633943355675, %228
  %231 = add i64 %230, 9210247106839891360
  %232 = sext i32 %.reload7 to i64
  %233 = and i64 %232, -6870262783466570934
  %234 = xor i64 %232, -1
  %235 = or i64 6870262783466570933, %234
  %236 = xor i64 %235, -1
  %237 = and i64 %236, -1
  %238 = xor i64 %225, %229
  %239 = xor i64 %238, -180082039163842155
  %240 = xor i64 %239, %233
  %241 = xor i64 %240, %237
  %242 = xor i64 %241, %231
  %243 = xor i64 %242, %227
  %244 = sext i32 %.reload7 to i64
  %245 = and i64 %244, -1553523139705802053
  %246 = or i64 1553523139705802052, %244
  %247 = sub i64 %246, 1553523139705802052
  %248 = sext i32 %.reload7 to i64
  %249 = or i64 %248, -3459649975138031254
  %250 = xor i64 %248, -1
  %251 = and i64 -3459649975138031254, %250
  %252 = add i64 %251, %248
  %253 = sext i32 %.reload7 to i64
  %254 = and i64 %253, 7939954775389302199
  %255 = or i64 -7939954775389302200, %253
  %256 = sub i64 %255, -7939954775389302200
  %257 = xor i64 %245, %254
  %258 = xor i64 %257, %252
  %259 = xor i64 %258, %247
  %260 = xor i64 %259, %256
  %261 = xor i64 %260, %249
  %262 = xor i64 %261, 0
  %263 = mul i64 %243, %262
  %264 = sext i32 %.reload7 to i64
  %265 = and i64 %264, -5861031123229011433
  %266 = or i64 5861031123229011432, %264
  %267 = sub i64 %266, 5861031123229011432
  %268 = sext i32 %.reload7 to i64
  %269 = or i64 %268, 2246046596207181385
  %270 = xor i64 %268, -1
  %271 = and i64 2246046596207181385, %270
  %272 = add i64 %271, %268
  %273 = xor i64 %265, %269
  %274 = xor i64 %273, 4670463237891493449
  %275 = xor i64 %274, %267
  %276 = xor i64 %275, %272
  %277 = sext i32 %.reload7 to i64
  %278 = and i64 %277, -6821007536434220490
  %279 = or i64 6821007536434220489, %277
  %280 = sub i64 %279, 6821007536434220489
  %281 = sext i32 %.reload7 to i64
  %282 = or i64 %281, 6582873936348548339
  %283 = xor i64 %281, -1
  %284 = and i64 %283, 5730880910966833760
  %285 = and i64 %281, -5730880910966833761
  %286 = or i64 %284, %285
  %287 = xor i64 1500610327904341651, %286
  %288 = xor i64 %281, -1
  %289 = or i64 -6582873936348548340, %288
  %290 = xor i64 %289, -1
  %291 = and i64 %290, -1
  %292 = or i64 %287, %291
  %293 = xor i64 %280, %292
  %294 = xor i64 %293, %278
  %295 = xor i64 %294, 0
  %296 = xor i64 %295, %282
  %297 = mul i64 %276, %296
  %298 = trunc i64 %297 to i1
  %299 = sext i32 %.reload7 to i64
  %300 = and i64 %299, 7431797353514781512
  %301 = xor i64 %299, -1
  %302 = xor i64 7431797353514781512, %301
  %303 = and i64 %302, 7431797353514781512
  %304 = sext i32 %.reload7 to i64
  %305 = and i64 %304, -6662281812575791632
  %306 = xor i64 %304, -1
  %307 = xor i64 -6662281812575791632, %306
  %308 = and i64 %307, -6662281812575791632
  %309 = xor i64 329720999895476063, %300
  %310 = xor i64 %309, %308
  %311 = xor i64 %310, %303
  %312 = xor i64 %311, %305
  %313 = sext i32 %.reload7 to i64
  %314 = add i64 %313, -4345419790068614329
  %315 = add i64 6909964899584099551, %313
  %316 = sub i64 %315, -7191359384056837736
  %317 = sext i32 %.reload7 to i64
  %318 = or i64 %317, -832013005128983317
  %319 = and i64 -832013005128983317, %317
  %320 = xor i64 -832013005128983317, %317
  %321 = or i64 %319, %320
  %322 = sext i32 %.reload7 to i64
  %323 = or i64 %322, 251133033666241076
  %324 = xor i64 %322, -1
  %325 = and i64 %324, -3029707652930048019
  %326 = and i64 %322, 3029707652930048018
  %327 = or i64 %325, %326
  %328 = xor i64 -2988027470481420839, %327
  %329 = xor i64 %322, -1
  %330 = or i64 -251133033666241077, %329
  %331 = xor i64 %330, -1
  %332 = and i64 %331, -1
  %333 = or i64 %328, %332
  %334 = xor i64 %323, %318
  %335 = xor i64 %334, 0
  %336 = xor i64 %335, %316
  %337 = xor i64 %336, %321
  %338 = xor i64 %337, %314
  %339 = xor i64 %338, %333
  %340 = mul i64 %312, %339
  %341 = trunc i64 %340 to i32
  %342 = sext i32 %.reload7 to i64
  %343 = add i64 %342, -9116155363305156144
  %344 = sub i64 0, %342
  %345 = sub i64 -9116155363305156144, %344
  %346 = sext i32 %.reload7 to i64
  %347 = and i64 %346, 6151927562028290920
  %348 = xor i64 %346, -1
  %349 = xor i64 6151927562028290920, %348
  %350 = and i64 %349, 6151927562028290920
  %351 = xor i64 %345, %350
  %352 = xor i64 %351, %343
  %353 = xor i64 %352, -6554002808590907227
  %354 = xor i64 %353, %347
  %355 = sext i32 %.reload7 to i64
  %356 = and i64 %355, 3218246372386882301
  %357 = xor i64 %355, -1
  %358 = or i64 -3218246372386882302, %357
  %359 = xor i64 %358, -1
  %360 = and i64 %359, -1
  %361 = sext i32 %.reload7 to i64
  %362 = or i64 %361, -493587504128285381
  %363 = xor i64 %361, -1
  %364 = and i64 %363, 8035441896414668482
  %365 = and i64 %361, -8035441896414668483
  %366 = or i64 %364, %365
  %367 = xor i64 -7591394331789179911, %366
  %368 = xor i64 %361, -1
  %369 = or i64 493587504128285380, %368
  %370 = xor i64 %369, -1
  %371 = and i64 %370, -1
  %372 = or i64 %367, %371
  %373 = xor i64 %360, 0
  %374 = xor i64 %373, %356
  %375 = xor i64 %374, %362
  %376 = xor i64 %375, %372
  %377 = mul i64 %354, %376
  %378 = trunc i64 %377 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %149, i64* %100, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %178, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %223, i32 0, i1* null, i1* null, i64 0, i64 %263, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %298, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %341, i32 %378, i1* null, i1* null)
  %379 = load i64, i64* %100, align 8
  %380 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14640128482458840838, i32 0, i64 %379
  store i8** %380, i8*** %.reg2mem16, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %381 = load i8*, i8** %.reload, align 8
  indirectbr i8* %381, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

BogusBasciBlock:                                  ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %382 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop.extracted, %BogusBasciBlock), i8** %382, align 8
  %383 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop.extracted, %.exitStub1), i8** %383, align 8
  %384 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop.extracted, %.exitStub), i8** %384, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %385 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %385, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

EntryBasicBlockSplit:                             ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload17 = load i8**, i8*** %.reg2mem16, align 8
  store i8* bitcast (i1 (i32, i32, i1*)* @inner_loop.extracted.extracted to i8*), i8** %.reload17, align 8
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %386 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %386, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

"2":                                              ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %387 = srem i32 %.reload7, 2
  %388 = icmp eq i32 %387, 0
  %389 = mul i32 %.reload7, 2
  %390 = and i64 %41, 9000785237390130028
  %391 = xor i64 %41, -1
  %392 = or i64 -9000785237390130029, %391
  %393 = xor i64 %392, -1
  %394 = and i64 %393, -1
  %395 = or i64 %45, 4097680992729706351
  %396 = xor i64 %45, -1
  %397 = and i64 4097680992729706351, %396
  %398 = add i64 %397, %45
  %399 = add i64 %5, 1937726930312069468
  %400 = add i64 7318537654042511576, %5
  %401 = sub i64 %400, 5380810723730442108
  %402 = xor i64 %395, %399
  %403 = xor i64 %402, %394
  %404 = xor i64 %403, %398
  %405 = xor i64 %404, %401
  %406 = xor i64 %405, %390
  %407 = xor i64 %406, 2570663280009479671
  %408 = sext i32 %.reload7 to i64
  %409 = or i64 %408, -4400379549260081085
  %410 = and i64 -4400379549260081085, %408
  %411 = xor i64 -4400379549260081085, %408
  %412 = or i64 %410, %411
  %413 = or i64 %5, -4089803481129562326
  %414 = xor i64 %5, -1
  %415 = and i64 -4089803481129562326, %414
  %416 = add i64 %415, %5
  %417 = add i64 %45, -7607678728488049282
  %418 = sub i64 0, %45
  %419 = add i64 7607678728488049282, %418
  %420 = sub i64 0, %419
  %421 = xor i64 %416, %412
  %422 = xor i64 %421, %413
  %423 = xor i64 %422, %417
  %424 = xor i64 %423, %409
  %425 = xor i64 %424, %420
  %426 = xor i64 %425, 7260543169122703246
  %427 = mul i64 %407, %426
  %428 = trunc i64 %427 to i32
  %429 = mul i32 %.reload7, %428
  %430 = add i32 2, %429
  %431 = mul i32 %389, %430
  %432 = srem i32 %431, 4
  store i32 %432, i32* %.reg2mem18, align 4
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  %433 = load i8*, i8** %.reload8, align 8
  indirectbr i8* %433, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

codeRepl:                                         ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i64 1996855465712537074, i64* %99, align 8
  %434 = call i8** @lk2798420644471863674(i64* %99)
  %435 = load i8*, i8** %434, align 8
  %436 = bitcast i8* %435 to i1 (i32, i32, i1*)*
  %.reload19 = load i32, i32* %.reg2mem18, align 4
  %targetBlock = call i1 %436(i32 %.reload19, i32 %.reload7, i1* %.out)
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %.reload14 = load i8**, i8*** %.reg2mem13, align 8
  %437 = select i1 %targetBlock, i8** %.reload11, i8** %.reload14
  %438 = load i8*, i8** %437, align 8
  indirectbr i8* %438, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %codeRepl, label %.exitStub, label %.exitStub1]

.exitStub:                                        ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub1:                                       ; preds = %codeRepl, %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal void @inner_loop..split.24() #1 {
entry:
  %0 = alloca i32, align 4
  %1 = call i64 @h11804894491772278134(i64 595012167)
  %2 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %1
  store i8* blockaddress(@inner_loop..split.24, %loopEnd), i8** %2, align 8
  %3 = call i64 @h11804894491772278134(i64 595012164)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@inner_loop..split.24, %defaultSwitchBasicBlock), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012245)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@inner_loop..split.24, %EntryBasicBlockSplit), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012246)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@inner_loop..split.24, %.split), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012149)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@inner_loop..split.24, %BogusBasicBlock), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012192)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@inner_loop..split.24, %.exitStub), i8** %12, align 8
  %13 = call i64 @h11804894491772278134(i64 595012170)
  %14 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %13
  store i8* blockaddress(@inner_loop..split.24, %loopStart), i8** %14, align 8
  %lookupTable = alloca [8 x i32], align 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %15, align 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %16, align 4
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 -1, i32* %17, align 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %22, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012170, i32* %0, align 4
  %23 = call i8** @bf777061424148142830(i32* %0)
  %24 = load i8*, i8** %23, align 8
  indirectbr i8* %24, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %.split
    i32 2, label %.exitStub
    i32 3, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = srem i32 %26, %28
  store i32 %29, i32* %dispatcher, align 4
  %30 = load i8*, i8** %6, align 8
  %31 = load i8, i8* %30, align 1
  %32 = mul i8 %31, 2
  %33 = mul i8 %31, 2
  %34 = add i8 2, %33
  %35 = mul i8 %32, %34
  %36 = srem i8 %35, 4
  %37 = icmp eq i8 %36, 0
  %38 = mul i8 %31, %31
  %39 = add i8 %38, %31
  %40 = srem i8 %39, 2
  %41 = icmp eq i8 %40, 0
  %42 = xor i1 %37, true
  %43 = or i64 %13, 3703618935630614309
  %44 = xor i64 %13, -1
  %45 = and i64 3703618935630614309, %44
  %46 = add i64 %45, %13
  %47 = or i64 %9, 7562939352640670892
  %48 = xor i64 %9, -1
  %49 = and i64 %48, 756593117119891181
  %50 = and i64 %9, -756593117119891182
  %51 = or i64 %49, %50
  %52 = xor i64 7100769422475233857, %51
  %53 = xor i64 %9, -1
  %54 = or i64 -7562939352640670893, %53
  %55 = xor i64 %54, -1
  %56 = and i64 %55, -1
  %57 = or i64 %52, %56
  %58 = or i64 %7, 145973783883434467
  %59 = xor i64 %7, -1
  %60 = and i64 %59, -2892692113588696510
  %61 = and i64 %7, 2892692113588696509
  %62 = or i64 %60, %61
  %63 = xor i64 -3036114738370280543, %62
  %64 = xor i64 %7, -1
  %65 = or i64 -145973783883434468, %64
  %66 = xor i64 %65, -1
  %67 = and i64 %66, -1
  %68 = or i64 %63, %67
  %69 = xor i64 %46, -1688032280506258575
  %70 = xor i64 %69, %58
  %71 = xor i64 %70, %47
  %72 = xor i64 %71, %43
  %73 = xor i64 %72, %68
  %74 = xor i64 %73, %57
  %75 = and i64 %5, 221205914383560143
  %76 = xor i64 %5, -1
  %77 = or i64 -221205914383560144, %76
  %78 = xor i64 %77, -1
  %79 = and i64 %78, -1
  %80 = sext i32 %dispatcher1 to i64
  %81 = add i64 %80, 3572883687251389355
  %82 = add i64 4883253982173018627, %80
  %83 = sub i64 %82, 1310370294921629272
  %84 = xor i64 %79, %83
  %85 = xor i64 %84, 4988570368088290705
  %86 = xor i64 %85, %81
  %87 = xor i64 %86, %75
  %88 = mul i64 %74, %87
  %89 = trunc i64 %88 to i1
  %90 = and i1 %42, %89
  %91 = and i1 %37, false
  %92 = or i1 %90, %91
  %93 = xor i1 %41, true
  %94 = and i1 %93, true
  %95 = and i1 %41, false
  %96 = or i1 %94, %95
  %97 = xor i1 %92, %96
  %98 = xor i1 %37, true
  %99 = xor i1 %41, true
  %100 = or i1 %98, %99
  %101 = or i64 %13, 3291719328314224555
  %102 = xor i64 %13, -1
  %103 = and i64 %102, 935437169752612372
  %104 = and i64 %13, -935437169752612373
  %105 = or i64 %103, %104
  %106 = xor i64 2402070547358413247, %105
  %107 = xor i64 %13, -1
  %108 = or i64 -3291719328314224556, %107
  %109 = xor i64 %108, -1
  %110 = and i64 %109, -1
  %111 = or i64 %106, %110
  %112 = and i64 %5, -4864343024194881452
  %113 = xor i64 %5, -1
  %114 = or i64 4864343024194881451, %113
  %115 = xor i64 %114, -1
  %116 = and i64 %115, -1
  %117 = xor i64 %101, %111
  %118 = xor i64 %117, %112
  %119 = xor i64 %118, %116
  %120 = xor i64 %119, -3722182550026836437
  %121 = or i64 %5, -7731592004645679620
  %122 = and i64 -7731592004645679620, %5
  %123 = xor i64 -7731592004645679620, %5
  %124 = or i64 %122, %123
  %125 = or i64 %5, 5236917555896756840
  %126 = xor i64 %5, -1
  %127 = and i64 %126, -3602868283756919262
  %128 = and i64 %5, 3602868283756919261
  %129 = or i64 %127, %128
  %130 = xor i64 -8742244821632127926, %129
  %131 = xor i64 %5, -1
  %132 = or i64 -5236917555896756841, %131
  %133 = xor i64 %132, -1
  %134 = and i64 %133, -1
  %135 = or i64 %130, %134
  %136 = xor i64 -7113022690384713597, %135
  %137 = xor i64 %136, %124
  %138 = xor i64 %137, %121
  %139 = xor i64 %138, %125
  %140 = mul i64 %120, %139
  %141 = trunc i64 %140 to i1
  %142 = xor i1 %100, %141
  %143 = and i1 %142, true
  %144 = or i1 %97, %143
  %145 = add i64 %13, 1849167580319792677
  %146 = add i64 5487358399867932921, %13
  %147 = add i64 %146, -3638190819548140244
  %148 = and i64 %5, -8369001993935132262
  %149 = xor i64 %5, -1
  %150 = or i64 8369001993935132261, %149
  %151 = xor i64 %150, -1
  %152 = and i64 %151, -1
  %153 = xor i64 %145, %148
  %154 = xor i64 %153, %147
  %155 = xor i64 %154, %152
  %156 = xor i64 %155, -8878914571006651545
  %157 = sext i32 %dispatcher1 to i64
  %158 = or i64 %157, 4221522943413062729
  %159 = and i64 4221522943413062729, %157
  %160 = xor i64 4221522943413062729, %157
  %161 = or i64 %159, %160
  %162 = add i64 %7, -7933564553764595486
  %163 = add i64 -8199606950388059784, %7
  %164 = sub i64 %163, -266042396623464298
  %165 = xor i64 %158, %164
  %166 = xor i64 %165, %161
  %167 = xor i64 %166, %162
  %168 = xor i64 %167, -5420028732991999837
  %169 = mul i64 %156, %168
  %170 = trunc i64 %169 to i32
  %171 = select i1 %144, i32 %170, i32 595012167
  %172 = xor i32 %171, 210
  store i32 %172, i32* %0, align 4
  %173 = call i8** @bf777061424148142830(i32* %0)
  %174 = load i8*, i8** %173, align 8
  indirectbr i8* %174, [label %loopEnd, label %EntryBasicBlockSplit]

.split:                                           ; preds = %.split, %loopStart
  %175 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 5
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 7
  %178 = load i32, i32* %177, align 4
  %179 = srem i32 %176, %178
  store i32 %179, i32* %dispatcher, align 4
  %180 = load i8*, i8** %12, align 8
  %181 = load i8, i8* %180, align 1
  %182 = mul i8 %181, 2
  %183 = mul i8 %181, 2
  %184 = add i8 2, %183
  %185 = mul i8 %182, %184
  %186 = srem i8 %185, 4
  %187 = icmp eq i8 %186, 0
  %188 = mul i8 %181, %181
  %189 = mul i8 %188, %181
  %190 = xor i8 %189, %181
  %191 = and i8 %189, %181
  %192 = mul i8 2, %191
  %193 = add i8 %190, %192
  %194 = mul i8 39, %193
  %195 = add i64 %13, -23385462149255277
  %196 = and i64 -23385462149255277, %13
  %197 = or i64 -23385462149255277, %13
  %198 = add i64 %196, %197
  %199 = or i64 %5, -755355928400966045
  %200 = xor i64 %5, -1
  %201 = and i64 %200, 4826892331017294676
  %202 = and i64 %5, -4826892331017294677
  %203 = or i64 %201, %202
  %204 = xor i64 -5226147227113939657, %203
  %205 = xor i64 %5, -1
  %206 = or i64 755355928400966044, %205
  %207 = xor i64 %206, -1
  %208 = and i64 %207, -1
  %209 = or i64 %204, %208
  %210 = xor i64 %195, %198
  %211 = xor i64 %210, -3729610056609742629
  %212 = xor i64 %211, %199
  %213 = xor i64 %212, %209
  %214 = add i64 %5, -4945309294495458395
  %215 = add i64 -4579044500181431862, %5
  %216 = add i64 %215, -366264794314026533
  %217 = add i64 %5, -7704470833633869570
  %218 = xor i64 -7704470833633869570, %5
  %219 = and i64 -7704470833633869570, %5
  %220 = mul i64 2, %219
  %221 = add i64 %218, %220
  %222 = or i64 %1, -1041315620320952165
  %223 = xor i64 %1, -1
  %224 = and i64 -1041315620320952165, %223
  %225 = add i64 %224, %1
  %226 = xor i64 -233816735794015115, %225
  %227 = xor i64 %226, %222
  %228 = xor i64 %227, %216
  %229 = xor i64 %228, %217
  %230 = xor i64 %229, %221
  %231 = xor i64 %230, %214
  %232 = mul i64 %213, %231
  %233 = trunc i64 %232 to i8
  %234 = add i8 %233, %194
  %235 = mul i8 -105, %234
  %236 = add i8 111, %235
  %237 = srem i8 %236, 2
  %238 = icmp eq i8 %237, 0
  %239 = or i64 %9, 2167079731325723955
  %240 = xor i64 %9, -1
  %241 = and i64 %240, -1425337669961369671
  %242 = and i64 %9, 1425337669961369670
  %243 = or i64 %241, %242
  %244 = xor i64 -996652897747447158, %243
  %245 = xor i64 %9, -1
  %246 = or i64 -2167079731325723956, %245
  %247 = xor i64 %246, -1
  %248 = and i64 %247, -1
  %249 = or i64 %244, %248
  %250 = add i64 %9, 745858625534383736
  %251 = add i64 -7621659556092317123, %9
  %252 = sub i64 %251, -8367518181626700859
  %253 = or i64 %5, 2867720683420985258
  %254 = xor i64 %5, -1
  %255 = and i64 2867720683420985258, %254
  %256 = add i64 %255, %5
  %257 = xor i64 %250, %239
  %258 = xor i64 %257, %252
  %259 = xor i64 %258, %249
  %260 = xor i64 %259, %256
  %261 = xor i64 %260, -995933411659744373
  %262 = xor i64 %261, %253
  %263 = sext i32 %dispatcher1 to i64
  %264 = or i64 %263, 7564814711725288062
  %265 = xor i64 %263, -1
  %266 = and i64 %265, 1037385730347674342
  %267 = and i64 %263, -1037385730347674343
  %268 = or i64 %266, %267
  %269 = xor i64 7394372055688691864, %268
  %270 = xor i64 %263, -1
  %271 = or i64 -7564814711725288063, %270
  %272 = xor i64 %271, -1
  %273 = and i64 %272, -1
  %274 = or i64 %269, %273
  %275 = sext i32 %dispatcher1 to i64
  %276 = and i64 %275, -103882088220790541
  %277 = xor i64 %275, -1
  %278 = xor i64 -103882088220790541, %277
  %279 = and i64 %278, -103882088220790541
  %280 = xor i64 -2824529190918728669, %279
  %281 = xor i64 %280, %274
  %282 = xor i64 %281, %264
  %283 = xor i64 %282, %276
  %284 = mul i64 %262, %283
  %285 = trunc i64 %284 to i1
  %286 = xor i1 %238, %285
  %287 = xor i1 %187, %286
  %288 = and i1 %287, %187
  %289 = select i1 %288, i32 595012246, i32 595012167
  %290 = xor i32 %289, -1
  %291 = and i32 %290, 329388754
  %292 = and i32 %289, -329388755
  %293 = or i32 %291, %292
  %294 = xor i32 %293, 329388547
  store i32 %294, i32* %0, align 4
  %295 = call i8** @bf777061424148142830(i32* %0)
  %296 = load i8*, i8** %295, align 8
  indirectbr i8* %296, [label %loopEnd, label %.split]

.exitStub:                                        ; preds = %loopStart
  ret void

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %297 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %297, align 4
  %298 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %298, align 4
  %299 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %299, align 4
  %300 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %300, align 4
  %301 = getelementptr inbounds [8 x i32], [8 x i32]* %lookupTable, i32 0, i32 0
  %302 = load i32, i32* %301, align 4
  store i32 %302, i32* %dispatcher, align 4
  %303 = load i8*, i8** %14, align 8
  %304 = load i8, i8* %303, align 1
  %305 = mul i8 %304, 2
  %306 = mul i8 %304, 2
  %307 = add i8 2, %306
  %308 = mul i8 %305, %307
  %309 = srem i8 %308, 4
  %310 = icmp eq i8 %309, 0
  %311 = mul i8 %304, %304
  %312 = add i8 %311, -121
  %313 = add i8 %312, %304
  %314 = sub i8 %313, -121
  %315 = srem i8 %314, 2
  %316 = icmp eq i8 %315, 0
  %317 = and i1 %310, %316
  %318 = select i1 %317, i32 595012164, i32 595012245
  %319 = xor i32 %318, 209
  store i32 %319, i32* %0, align 4
  %320 = call i8** @bf777061424148142830(i32* %0)
  %321 = load i8*, i8** %320, align 8
  indirectbr i8* %321, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %322 = load i8*, i8** %6, align 8
  %323 = load i8, i8* %322, align 1
  %324 = and i8 %323, 1
  %325 = icmp eq i8 %324, 0
  %326 = mul i8 %323, %323
  %327 = add i8 %326, %323
  %328 = mul i8 %327, 3
  %329 = srem i8 %328, 2
  %330 = icmp eq i8 %329, 0
  %331 = or i1 %325, %330
  %332 = select i1 %331, i32 595012149, i32 595012167
  %333 = xor i32 %332, 114
  store i32 %333, i32* %0, align 4
  %334 = call i8** @bf777061424148142830(i32* %0)
  %335 = load i8*, i8** %334, align 8
  indirectbr i8* %335, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %.split, %EntryBasicBlockSplit
  %336 = load i8*, i8** %8, align 8
  %337 = load i8, i8* %336, align 1
  %338 = and i8 %337, 1
  %339 = icmp eq i8 %338, 0
  %340 = mul i8 %337, %337
  %341 = xor i8 %340, %337
  %342 = and i8 %340, %337
  %343 = or i64 %3, 4830579303231916029
  %344 = xor i64 %3, -1
  %345 = and i64 4830579303231916029, %344
  %346 = add i64 %345, %3
  %347 = and i64 %7, -4810753940171990881
  %348 = or i64 4810753940171990880, %7
  %349 = sub i64 %348, 4810753940171990880
  %350 = and i64 %1, 3301078953047516763
  %351 = xor i64 %1, -1
  %352 = xor i64 3301078953047516763, %351
  %353 = and i64 %352, 3301078953047516763
  %354 = xor i64 %353, %349
  %355 = xor i64 %354, %347
  %356 = xor i64 %355, %350
  %357 = xor i64 %356, -528428906818812479
  %358 = xor i64 %357, %346
  %359 = xor i64 %358, %343
  %360 = and i64 %9, -1564420148322840154
  %361 = xor i64 %9, -1
  %362 = or i64 1564420148322840153, %361
  %363 = xor i64 %362, -1
  %364 = and i64 %363, -1
  %365 = or i64 %9, -216038122561508349
  %366 = xor i64 %9, -1
  %367 = and i64 %366, 4783806945474688589
  %368 = and i64 %9, -4783806945474688590
  %369 = or i64 %367, %368
  %370 = xor i64 -4655871633090160050, %369
  %371 = xor i64 %9, -1
  %372 = or i64 216038122561508348, %371
  %373 = xor i64 %372, -1
  %374 = and i64 %373, -1
  %375 = or i64 %370, %374
  %376 = and i64 %3, 1792482160236951025
  %377 = or i64 -1792482160236951026, %3
  %378 = sub i64 %377, -1792482160236951026
  %379 = xor i64 %364, -843255411883535230
  %380 = xor i64 %379, %375
  %381 = xor i64 %380, %378
  %382 = xor i64 %381, %365
  %383 = xor i64 %382, %376
  %384 = xor i64 %383, %360
  %385 = mul i64 %359, %384
  %386 = trunc i64 %385 to i8
  %387 = mul i8 %386, %342
  %388 = add i8 %341, %387
  %389 = mul i8 39, %388
  %390 = add i8 23, %389
  %391 = mul i8 -105, %390
  %392 = add i8 111, %391
  %393 = or i64 %7, 2357072054047210050
  %394 = xor i64 %7, -1
  %395 = and i64 2357072054047210050, %394
  %396 = add i64 %395, %7
  %397 = or i64 %7, -3192056493672217788
  %398 = xor i64 %7, -1
  %399 = and i64 %398, 3479671386916893369
  %400 = and i64 %7, -3479671386916893370
  %401 = or i64 %399, %400
  %402 = xor i64 -2019355121561505283, %401
  %403 = xor i64 %7, -1
  %404 = or i64 3192056493672217787, %403
  %405 = xor i64 %404, -1
  %406 = and i64 %405, -1
  %407 = or i64 %402, %406
  %408 = xor i64 -4571803435070959385, %393
  %409 = xor i64 %408, %397
  %410 = xor i64 %409, %396
  %411 = xor i64 %410, %407
  %412 = add i64 %5, -8181494050572122387
  %413 = xor i64 -8181494050572122387, %5
  %414 = and i64 -8181494050572122387, %5
  %415 = mul i64 2, %414
  %416 = add i64 %413, %415
  %417 = and i64 %5, -6060575188107744118
  %418 = xor i64 %5, -1
  %419 = xor i64 -6060575188107744118, %418
  %420 = and i64 %419, -6060575188107744118
  %421 = or i64 %11, 9188367526166183103
  %422 = and i64 9188367526166183103, %11
  %423 = xor i64 9188367526166183103, %11
  %424 = or i64 %422, %423
  %425 = xor i64 %424, %412
  %426 = xor i64 %425, %420
  %427 = xor i64 %426, %421
  %428 = xor i64 %427, %417
  %429 = xor i64 %428, 3429507753239267461
  %430 = xor i64 %429, %416
  %431 = mul i64 %411, %430
  %432 = trunc i64 %431 to i8
  %433 = mul i8 %392, %432
  %434 = srem i8 %433, 2
  %435 = sext i32 %dispatcher1 to i64
  %436 = and i64 %435, 6974898554489678632
  %437 = or i64 -6974898554489678633, %435
  %438 = sub i64 %437, -6974898554489678633
  %439 = or i64 %13, -5367720319884803611
  %440 = and i64 -5367720319884803611, %13
  %441 = xor i64 -5367720319884803611, %13
  %442 = or i64 %440, %441
  %443 = xor i64 %442, %436
  %444 = xor i64 %443, %438
  %445 = xor i64 %444, 2893777283784847363
  %446 = xor i64 %445, %439
  %447 = or i64 %1, -3204779148238992757
  %448 = xor i64 %1, -1
  %449 = and i64 -3204779148238992757, %448
  %450 = add i64 %449, %1
  %451 = add i64 %1, -7486366620323597058
  %452 = xor i64 -7486366620323597058, %1
  %453 = and i64 -7486366620323597058, %1
  %454 = mul i64 2, %453
  %455 = add i64 %452, %454
  %456 = xor i64 %447, %450
  %457 = xor i64 %456, %455
  %458 = xor i64 %457, 0
  %459 = xor i64 %458, %451
  %460 = mul i64 %446, %459
  %461 = trunc i64 %460 to i8
  %462 = icmp eq i8 %434, %461
  %463 = or i1 %339, %462
  %464 = select i1 %463, i32 595012192, i32 595012170
  %465 = xor i32 %464, 42
  store i32 %465, i32* %0, align 4
  %466 = call i8** @bf777061424148142830(i32* %0)
  %467 = load i8*, i8** %466, align 8
  indirectbr i8* %467, [label %loopStart, label %loopEnd]
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop..split.extracted(i1 %0, i1 %1) #1 {
entry:
  %2 = alloca i32, align 4
  %3 = call i64 @h11804894491772278134(i64 595012270)
  %4 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %3
  store i8* blockaddress(@inner_loop..split.extracted, %.exitStub.exitStub), i8** %4, align 8
  %5 = call i64 @h11804894491772278134(i64 595012101)
  %6 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  store i8* blockaddress(@inner_loop..split.extracted, %"2"), i8** %6, align 8
  %7 = call i64 @h11804894491772278134(i64 595012244)
  %8 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %7
  store i8* blockaddress(@inner_loop..split.extracted, %EntryBasicBlockSplit), i8** %8, align 8
  %9 = call i64 @h11804894491772278134(i64 595012126)
  %10 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %9
  store i8* blockaddress(@inner_loop..split.extracted, %.exitStub5.exitStub), i8** %10, align 8
  %11 = call i64 @h11804894491772278134(i64 595012257)
  %12 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %11
  store i8* blockaddress(@inner_loop..split.extracted, %BogusBasciBlock), i8** %12, align 8
  %.reg2mem9 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %13 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop..split.extracted, %BogusBasciBlock), i8** %13, align 8
  %14 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %14, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop..split.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %15 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %15, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop..split.extracted, %"2"), i8** %.reload5, align 8
  %16 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %16, i8*** %.reg2mem6, align 8
  %.reload8 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop..split.extracted, %.exitStub.exitStub), i8** %.reload8, align 8
  %17 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %17, i8*** %.reg2mem9, align 8
  %.reload11 = load i8**, i8*** %.reg2mem9, align 8
  store i8* blockaddress(@inner_loop..split.extracted, %.exitStub5.exitStub), i8** %.reload11, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %18 = load i8*, i8** %.reload, align 8
  indirectbr i8* %18, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %19 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop..split.extracted, %EntryBasicBlockSplit), i8** %19, align 8
  %20 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop..split.extracted, %.exitStub5.exitStub), i8** %20, align 8
  %21 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop..split.extracted, %BogusBasciBlock), i8** %21, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %22 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %22, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %23 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %23, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %24 = select i1 %0, i1 %1, i1 false
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload10 = load i8**, i8*** %.reg2mem9, align 8
  %25 = select i1 %24, i8** %.reload7, i8** %.reload10
  %26 = load i8*, i8** %25, align 8
  indirectbr i8* %26, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub5.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %27 = add i64 %11, 4223775821840330302
  %28 = sub i64 0, %11
  %29 = add i64 -4223775821840330302, %28
  %30 = sub i64 0, %29
  %31 = or i64 %7, -3250489243226654933
  %32 = xor i64 %7, -1
  %33 = and i64 %32, -4220091869377287625
  %34 = and i64 %7, 4220091869377287624
  %35 = or i64 %33, %34
  %36 = xor i64 1696952765051280668, %35
  %37 = xor i64 %7, -1
  %38 = or i64 3250489243226654932, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %39, -1
  %41 = or i64 %36, %40
  %42 = add i64 %9, -1925428629362210885
  %43 = add i64 -6953182902362503677, %9
  %44 = add i64 %43, 5027754273000292792
  %45 = xor i64 %41, %30
  %46 = xor i64 %45, %44
  %47 = xor i64 %46, %27
  %48 = xor i64 %47, %42
  %49 = xor i64 %48, %31
  %50 = xor i64 %49, 920839931912533869
  %51 = and i64 %7, -7334536121269547571
  %52 = or i64 7334536121269547570, %7
  %53 = sub i64 %52, 7334536121269547570
  %54 = and i64 %5, -366505236823327132
  %55 = xor i64 %5, -1
  %56 = or i64 366505236823327131, %55
  %57 = xor i64 %56, -1
  %58 = and i64 %57, -1
  %59 = xor i64 %53, %58
  %60 = xor i64 %59, -2194123061120243099
  %61 = xor i64 %60, %54
  %62 = xor i64 %61, %51
  %63 = mul i64 %50, %62
  %64 = trunc i64 %63 to i1
  ret i1 %64

.exitStub5.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop..loopexit.extracted(i32 %.reload8, i1* %.out, i1 %0, i1* %.out1) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012201)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@inner_loop..loopexit.extracted, %.exitStub.exitStub), i8** %3, align 8
  %4 = sext i32 %.reload8 to i64
  %5 = or i64 %4, 6449032492048884168
  %6 = xor i64 %4, -1
  %7 = and i64 %6, 8498733778069424420
  %8 = and i64 %4, -8498733778069424421
  %9 = or i64 %7, %8
  %10 = xor i64 3210505464952891628, %9
  %11 = xor i64 %4, -1
  %12 = or i64 -6449032492048884169, %11
  %13 = xor i64 %12, -1
  %14 = and i64 %13, -1
  %15 = or i64 %10, %14
  %16 = sext i32 %.reload8 to i64
  %17 = or i64 %16, 5782266863101521963
  %18 = and i64 5782266863101521963, %16
  %19 = xor i64 5782266863101521963, %16
  %20 = or i64 %18, %19
  %21 = xor i64 %17, -1499233173198214899
  %22 = xor i64 %21, %15
  %23 = xor i64 %22, %20
  %24 = xor i64 %23, %5
  %25 = sext i32 %.reload8 to i64
  %26 = or i64 %25, -7743590060120935356
  %27 = xor i64 %25, -1
  %28 = and i64 -7743590060120935356, %27
  %29 = add i64 %28, %25
  %30 = sext i32 %.reload8 to i64
  %31 = and i64 %30, 561111460346713750
  %32 = or i64 -561111460346713751, %30
  %33 = sub i64 %32, -561111460346713751
  %34 = sext i32 %.reload8 to i64
  %35 = and i64 %34, -5334160882468819041
  %36 = xor i64 %34, -1
  %37 = xor i64 -5334160882468819041, %36
  %38 = and i64 %37, -5334160882468819041
  %39 = xor i64 %29, %38
  %40 = xor i64 %39, %26
  %41 = xor i64 %40, -256715798417493511
  %42 = xor i64 %41, %31
  %43 = xor i64 %42, %33
  %44 = xor i64 %43, %35
  %45 = mul i64 %24, %44
  %46 = call i64 @h11804894491772278134(i64 %45)
  %47 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %46
  store i8* blockaddress(@inner_loop..loopexit.extracted, %"2"), i8** %47, align 8
  %48 = call i64 @h11804894491772278134(i64 595012191)
  %49 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %48
  store i8* blockaddress(@inner_loop..loopexit.extracted, %.exitStub2.exitStub), i8** %49, align 8
  %50 = call i64 @h11804894491772278134(i64 595012190)
  %51 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %50
  store i8* blockaddress(@inner_loop..loopexit.extracted, %EntryBasicBlockSplit), i8** %51, align 8
  %52 = call i64 @h11804894491772278134(i64 595012155)
  %53 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %52
  store i8* blockaddress(@inner_loop..loopexit.extracted, %BogusBasciBlock), i8** %53, align 8
  %.reg2mem10 = alloca i8**, align 8
  %.reg2mem6 = alloca i8**, align 8
  %.reg2mem3 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 5, align 8
  %54 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop..loopexit.extracted, %BogusBasciBlock), i8** %54, align 8
  %55 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %55, i8*** %.reg2mem, align 8
  %.reload2 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@inner_loop..loopexit.extracted, %EntryBasicBlockSplit), i8** %.reload2, align 8
  %56 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %56, i8*** %.reg2mem3, align 8
  %.reload5 = load i8**, i8*** %.reg2mem3, align 8
  store i8* blockaddress(@inner_loop..loopexit.extracted, %"2"), i8** %.reload5, align 8
  %57 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %57, i8*** %.reg2mem6, align 8
  %.reload9 = load i8**, i8*** %.reg2mem6, align 8
  store i8* blockaddress(@inner_loop..loopexit.extracted, %.exitStub.exitStub), i8** %.reload9, align 8
  %58 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %58, i8*** %.reg2mem10, align 8
  %.reload12 = load i8**, i8*** %.reg2mem10, align 8
  store i8* blockaddress(@inner_loop..loopexit.extracted, %.exitStub2.exitStub), i8** %.reload12, align 8
  %.reload = load i8**, i8*** %.reg2mem, align 8
  %59 = load i8*, i8** %.reload, align 8
  indirectbr i8* %59, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

BogusBasciBlock:                                  ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %60 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@inner_loop..loopexit.extracted, %BogusBasciBlock), i8** %60, align 8
  %61 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@inner_loop..loopexit.extracted, %.exitStub2.exitStub), i8** %61, align 8
  %62 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@inner_loop..loopexit.extracted, %"2"), i8** %62, align 8
  %.reload1 = load i8**, i8*** %.reg2mem, align 8
  %63 = load i8*, i8** %.reload1, align 8
  indirectbr i8* %63, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

EntryBasicBlockSplit:                             ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload4 = load i8**, i8*** %.reg2mem3, align 8
  %64 = load i8*, i8** %.reload4, align 8
  indirectbr i8* %64, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

"2":                                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %65 = mul i32 %.reload8, %.reload8
  %66 = add i32 %65, %.reload8
  %67 = sext i32 %.reload8 to i64
  %68 = and i64 %67, 1805234488582557470
  %69 = xor i64 %67, -1
  %70 = xor i64 1805234488582557470, %69
  %71 = and i64 %70, 1805234488582557470
  %72 = add i64 %52, 2246126826266013259
  %73 = sub i64 0, %52
  %74 = sub i64 2246126826266013259, %73
  %75 = xor i64 %74, %68
  %76 = xor i64 %75, 8341743565877732251
  %77 = xor i64 %76, %72
  %78 = xor i64 %77, %71
  %79 = or i64 %50, 4247919960256022616
  %80 = and i64 4247919960256022616, %50
  %81 = xor i64 4247919960256022616, %50
  %82 = or i64 %80, %81
  %83 = or i64 %50, -2494291148801066574
  %84 = and i64 -2494291148801066574, %50
  %85 = xor i64 -2494291148801066574, %50
  %86 = or i64 %84, %85
  %87 = xor i64 -7784101995382860506, %86
  %88 = xor i64 %87, %83
  %89 = xor i64 %88, %82
  %90 = xor i64 %89, %79
  %91 = mul i64 %78, %90
  %92 = trunc i64 %91 to i32
  %93 = srem i32 %66, %92
  %94 = icmp eq i32 %93, 0
  store i1 %94, i1* %.out, align 1
  %95 = xor i1 %94, true
  %96 = xor i1 %95, true
  %97 = xor i1 %0, %96
  %98 = and i1 %97, %0
  store i1 %98, i1* %.out1, align 1
  %99 = srem i32 %.reload8, 2
  %100 = icmp eq i32 %99, 0
  %.reload7 = load i8**, i8*** %.reg2mem6, align 8
  %.reload11 = load i8**, i8*** %.reg2mem10, align 8
  %101 = select i1 %100, i8** %.reload7, i8** %.reload11
  %102 = load i8*, i8** %101, align 8
  indirectbr i8* %102, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %"2", label %.exitStub.exitStub, label %.exitStub2.exitStub]

.exitStub.exitStub:                               ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 true

.exitStub2.exitStub:                              ; preds = %"2", %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret i1 false
}

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal i1 @inner_loop.extracted.extracted(i32 %0, i32 %.reload7, i1* %.out) #1 {
entry:
  %1 = alloca i32, align 4
  %2 = call i64 @h11804894491772278134(i64 595012274)
  %3 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %2
  store i8* blockaddress(@inner_loop.extracted.extracted, %BogusBasicBlock), i8** %3, align 8
  %4 = call i64 @h11804894491772278134(i64 595012154)
  %5 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %4
  store i8* blockaddress(@inner_loop.extracted.extracted, %loopEnd), i8** %5, align 8
  %6 = call i64 @h11804894491772278134(i64 595012124)
  %7 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %6
  store i8* blockaddress(@inner_loop.extracted.extracted, %defaultSwitchBasicBlock), i8** %7, align 8
  %8 = call i64 @h11804894491772278134(i64 595012171)
  %9 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %8
  store i8* blockaddress(@inner_loop.extracted.extracted, %loopStart), i8** %9, align 8
  %10 = call i64 @h11804894491772278134(i64 595012268)
  %11 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %10
  store i8* blockaddress(@inner_loop.extracted.extracted, %EntryBasicBlockSplit), i8** %11, align 8
  %12 = call i64 @h11804894491772278134(i64 595012156)
  %13 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %12
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub1.exitStub), i8** %13, align 8
  %14 = call i64 @h11804894491772278134(i64 595012228)
  %15 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %14
  store i8* blockaddress(@inner_loop.extracted.extracted, %.exitStub.exitStub), i8** %15, align 8
  %16 = call i64 @h11804894491772278134(i64 595012151)
  %17 = getelementptr [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %16
  store i8* blockaddress(@inner_loop.extracted.extracted, %100), i8** %17, align 8
  %lookupTable = alloca [9 x i32], align 4
  %18 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -3, i32* %18, align 4
  %19 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  store i32 -2, i32* %19, align 4
  %20 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %21 = sext i32 %.reload7 to i64
  %22 = add i64 %21, -8664593708407769854
  %23 = sub i64 0, %21
  %24 = sub i64 -8664593708407769854, %23
  %25 = sext i32 %0 to i64
  %26 = add i64 %25, 5624684527092764834
  %27 = xor i64 5624684527092764834, %25
  %28 = and i64 5624684527092764834, %25
  %29 = mul i64 2, %28
  %30 = add i64 %27, %29
  %31 = sext i32 %0 to i64
  %32 = add i64 %31, 6745764871296552526
  %33 = sub i64 0, %31
  %34 = add i64 -6745764871296552526, %33
  %35 = sub i64 0, %34
  %36 = xor i64 %24, %22
  %37 = xor i64 %36, %32
  %38 = xor i64 %37, %26
  %39 = xor i64 %38, 691579965655374497
  %40 = xor i64 %39, %35
  %41 = xor i64 %40, %30
  %42 = sext i32 %0 to i64
  %43 = and i64 %42, -2196945385150771577
  %44 = xor i64 %42, -1
  %45 = or i64 2196945385150771576, %44
  %46 = xor i64 %45, -1
  %47 = and i64 %46, -1
  %48 = sext i32 %0 to i64
  %49 = add i64 %48, -2824261278794263755
  %50 = and i64 -2824261278794263755, %48
  %51 = or i64 -2824261278794263755, %48
  %52 = add i64 %50, %51
  %53 = sext i32 %0 to i64
  %54 = or i64 %53, -7261491278824362814
  %55 = and i64 -7261491278824362814, %53
  %56 = xor i64 -7261491278824362814, %53
  %57 = or i64 %55, %56
  %58 = xor i64 %52, %54
  %59 = xor i64 %58, %47
  %60 = xor i64 %59, -3637326103942793569
  %61 = xor i64 %60, %57
  %62 = xor i64 %61, %49
  %63 = xor i64 %62, %43
  %64 = mul i64 %41, %63
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %20, align 4
  %66 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 1, i32* %67, align 4
  %68 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  store i32 2, i32* %68, align 4
  %69 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 3, i32* %69, align 4
  %70 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 7
  store i32 4, i32* %70, align 4
  %71 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  store i32 5, i32* %71, align 4
  %dispatcher = alloca i32, align 4
  store i32 0, i32* %dispatcher, align 4
  store i32 595012171, i32* %1, align 4
  %72 = call i8** @bf777061424148142830(i32* %1)
  %73 = load i8*, i8** %72, align 8
  indirectbr i8* %73, [label %loopStart]

loopStart:                                        ; preds = %loopEnd, %entry
  %dispatcher1 = load i32, i32* %dispatcher, align 4
  switch i32 %dispatcher1, label %defaultSwitchBasicBlock [
    i32 0, label %EntryBasicBlockSplit
    i32 1, label %100
    i32 2, label %.exitStub.exitStub
    i32 3, label %.exitStub1.exitStub
    i32 4, label %BogusBasicBlock
  ]

EntryBasicBlockSplit:                             ; preds = %BogusBasicBlock, %EntryBasicBlockSplit, %loopStart
  %74 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = sub i32 %75, -606136845
  %79 = sub i32 %78, %77
  %80 = add i32 %79, -606136845
  store i32 %80, i32* %dispatcher, align 4
  %81 = load i8*, i8** %3, align 8
  %82 = load i8, i8* %81, align 1
  %83 = mul i8 %82, 2
  %84 = mul i8 %82, 2
  %85 = and i8 2, %84
  %86 = or i8 2, %84
  %87 = add i8 %85, %86
  %88 = mul i8 %83, %87
  %89 = srem i8 %88, 4
  %90 = icmp eq i8 %89, 0
  %91 = mul i8 %82, %82
  %92 = add i8 %91, %82
  %93 = srem i8 %92, 2
  %94 = icmp eq i8 %93, 0
  %95 = or i1 %90, %94
  %96 = select i1 %95, i32 595012151, i32 595012154
  %97 = xor i32 %96, 13
  store i32 %97, i32* %1, align 4
  %98 = call i8** @bf777061424148142830(i32* %1)
  %99 = load i8*, i8** %98, align 8
  indirectbr i8* %99, [label %loopEnd, label %EntryBasicBlockSplit]

100:                                              ; preds = %100, %loopStart
  %101 = icmp eq i32 %0, 0
  %102 = mul i32 %.reload7, %.reload7
  %103 = mul i32 %102, %.reload7
  %104 = add i32 %103, %.reload7
  %105 = srem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = xor i1 %101, true
  %108 = xor i1 %106, true
  %109 = or i1 %107, %108
  %110 = xor i1 %109, true
  %111 = and i1 %110, true
  store i1 %111, i1* %.out, align 1
  %112 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 5
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 3
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %113, %115
  %117 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = sub i32 %118, %120
  %122 = select i1 %111, i32 %116, i32 %121
  store i32 %122, i32* %dispatcher, align 4
  %123 = load i8*, i8** %17, align 8
  %124 = load i8, i8* %123, align 1
  %125 = mul i8 %124, 2
  %126 = mul i8 %124, 2
  %127 = add i8 2, %126
  %128 = mul i8 %125, %127
  %129 = or i64 %14, 4549259272114241099
  %130 = and i64 4549259272114241099, %14
  %131 = xor i64 4549259272114241099, %14
  %132 = or i64 %130, %131
  %133 = add i64 %14, -2266931156991876276
  %134 = and i64 -2266931156991876276, %14
  %135 = or i64 -2266931156991876276, %14
  %136 = add i64 %134, %135
  %137 = xor i64 %129, %132
  %138 = xor i64 %137, %133
  %139 = xor i64 %138, -4883082692242777753
  %140 = xor i64 %139, %136
  %141 = or i64 %2, 4669326792763499336
  %142 = and i64 4669326792763499336, %2
  %143 = xor i64 4669326792763499336, %2
  %144 = or i64 %142, %143
  %145 = sext i32 %.reload7 to i64
  %146 = or i64 %145, 6173607689453470526
  %147 = and i64 6173607689453470526, %145
  %148 = xor i64 6173607689453470526, %145
  %149 = or i64 %147, %148
  %150 = xor i64 %149, %144
  %151 = xor i64 %150, %146
  %152 = xor i64 %151, %141
  %153 = xor i64 %152, 3659590347370580316
  %154 = mul i64 %140, %153
  %155 = trunc i64 %154 to i8
  %156 = srem i8 %128, %155
  %157 = icmp eq i8 %156, 0
  %158 = mul i8 %124, %124
  %159 = add i8 %158, %124
  %160 = srem i8 %159, 2
  %161 = or i64 %2, 7892986252846688703
  %162 = and i64 7892986252846688703, %2
  %163 = xor i64 7892986252846688703, %2
  %164 = or i64 %162, %163
  %165 = or i64 %4, -1790994411898095633
  %166 = xor i64 %4, -1
  %167 = and i64 -1790994411898095633, %166
  %168 = add i64 %167, %4
  %169 = add i64 %8, -3467733951882294661
  %170 = and i64 -3467733951882294661, %8
  %171 = or i64 -3467733951882294661, %8
  %172 = add i64 %170, %171
  %173 = xor i64 %168, 9118006038807356839
  %174 = xor i64 %173, %164
  %175 = xor i64 %174, %169
  %176 = xor i64 %175, %161
  %177 = xor i64 %176, %165
  %178 = xor i64 %177, %172
  %179 = and i64 %2, 8707259642612589979
  %180 = or i64 -8707259642612589980, %2
  %181 = sub i64 %180, -8707259642612589980
  %182 = sext i32 %dispatcher1 to i64
  %183 = or i64 %182, -619863951825248860
  %184 = and i64 -619863951825248860, %182
  %185 = xor i64 -619863951825248860, %182
  %186 = or i64 %184, %185
  %187 = xor i64 %183, %186
  %188 = xor i64 %187, %179
  %189 = xor i64 %188, 0
  %190 = xor i64 %189, %181
  %191 = mul i64 %178, %190
  %192 = trunc i64 %191 to i8
  %193 = icmp eq i8 %160, %192
  %194 = or i1 %157, %193
  %195 = or i64 %8, -6714046272715346135
  %196 = xor i64 %8, -1
  %197 = and i64 -6714046272715346135, %196
  %198 = add i64 %197, %8
  %199 = or i64 %2, 6377520436347654977
  %200 = and i64 6377520436347654977, %2
  %201 = xor i64 6377520436347654977, %2
  %202 = or i64 %200, %201
  %203 = add i64 %10, -7295114350143110336
  %204 = xor i64 -7295114350143110336, %10
  %205 = and i64 -7295114350143110336, %10
  %206 = mul i64 2, %205
  %207 = add i64 %204, %206
  %208 = xor i64 %195, 1639925396027282013
  %209 = xor i64 %208, %202
  %210 = xor i64 %209, %198
  %211 = xor i64 %210, %207
  %212 = xor i64 %211, %199
  %213 = xor i64 %212, %203
  %214 = and i64 %8, 1999496987271484291
  %215 = xor i64 %8, -1
  %216 = or i64 -1999496987271484292, %215
  %217 = xor i64 %216, -1
  %218 = and i64 %217, -1
  %219 = and i64 %14, 2418635425879132915
  %220 = or i64 -2418635425879132916, %14
  %221 = sub i64 %220, -2418635425879132916
  %222 = xor i64 %221, %214
  %223 = xor i64 %222, %218
  %224 = xor i64 %223, 7496745118729267052
  %225 = xor i64 %224, %219
  %226 = mul i64 %213, %225
  %227 = trunc i64 %226 to i32
  %228 = select i1 %194, i32 %227, i32 595012154
  %229 = xor i32 %228, 6
  store i32 %229, i32* %1, align 4
  %230 = call i8** @bf777061424148142830(i32* %1)
  %231 = load i8*, i8** %230, align 8
  indirectbr i8* %231, [label %loopEnd, label %100]

.exitStub.exitStub:                               ; preds = %loopStart
  ret i1 true

.exitStub1.exitStub:                              ; preds = %loopStart
  ret i1 false

BogusBasicBlock:                                  ; preds = %BogusBasicBlock, %loopStart
  %232 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  store i32 -1, i32* %232, align 4
  %233 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 2
  store i32 1, i32* %233, align 4
  %234 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 4
  store i32 3, i32* %234, align 4
  %235 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 6
  store i32 5, i32* %235, align 4
  %236 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 8
  %237 = or i64 %10, 1993827727053822715
  %238 = xor i64 %10, -1
  %239 = and i64 1993827727053822715, %238
  %240 = add i64 %239, %10
  %241 = and i64 %2, -6724808383670292322
  %242 = xor i64 %2, -1
  %243 = xor i64 -6724808383670292322, %242
  %244 = and i64 %243, -6724808383670292322
  %245 = or i64 %8, -6007034801289530272
  %246 = and i64 -6007034801289530272, %8
  %247 = xor i64 -6007034801289530272, %8
  %248 = or i64 %246, %247
  %249 = xor i64 %241, %240
  %250 = xor i64 %249, %244
  %251 = xor i64 %250, %237
  %252 = xor i64 %251, %245
  %253 = xor i64 %252, 2007826797237515405
  %254 = xor i64 %253, %248
  %255 = or i64 %4, -156597488275965631
  %256 = xor i64 %4, -1
  %257 = and i64 -156597488275965631, %256
  %258 = add i64 %257, %4
  %259 = and i64 %12, 390314120004966548
  %260 = xor i64 %12, -1
  %261 = xor i64 390314120004966548, %260
  %262 = and i64 %261, 390314120004966548
  %263 = xor i64 %258, %255
  %264 = xor i64 %263, -3990004289695333405
  %265 = xor i64 %264, %262
  %266 = xor i64 %265, %259
  %267 = mul i64 %254, %266
  %268 = trunc i64 %267 to i32
  store i32 %268, i32* %236, align 4
  %269 = getelementptr inbounds [9 x i32], [9 x i32]* %lookupTable, i32 0, i32 0
  %270 = load i32, i32* %269, align 4
  store i32 %270, i32* %dispatcher, align 4
  %271 = load i8*, i8** %9, align 8
  %272 = load i8, i8* %271, align 1
  %273 = and i64 %10, -4104880126827576460
  %274 = xor i64 %10, -1
  %275 = xor i64 -4104880126827576460, %274
  %276 = and i64 %275, -4104880126827576460
  %277 = or i64 %14, 6405030353905372083
  %278 = xor i64 %14, -1
  %279 = and i64 %278, 6979633461088383188
  %280 = and i64 %14, -6979633461088383189
  %281 = or i64 %279, %280
  %282 = xor i64 4053132517455543143, %281
  %283 = xor i64 %14, -1
  %284 = or i64 -6405030353905372084, %283
  %285 = xor i64 %284, -1
  %286 = and i64 %285, -1
  %287 = or i64 %282, %286
  %288 = and i64 %4, -4560772006684193217
  %289 = xor i64 %4, -1
  %290 = or i64 4560772006684193216, %289
  %291 = xor i64 %290, -1
  %292 = and i64 %291, -1
  %293 = xor i64 %277, %276
  %294 = xor i64 %293, %273
  %295 = xor i64 %294, 6835536688988636165
  %296 = xor i64 %295, %287
  %297 = xor i64 %296, %288
  %298 = xor i64 %297, %292
  %299 = and i64 %12, 3954356247470038426
  %300 = xor i64 %12, -1
  %301 = or i64 -3954356247470038427, %300
  %302 = xor i64 %301, -1
  %303 = and i64 %302, -1
  %304 = add i64 %10, -8008381660224941314
  %305 = sub i64 0, %10
  %306 = add i64 8008381660224941314, %305
  %307 = sub i64 0, %306
  %308 = xor i64 %304, %303
  %309 = xor i64 %308, %307
  %310 = xor i64 %309, %299
  %311 = xor i64 %310, -2732590583040061030
  %312 = mul i64 %298, %311
  %313 = trunc i64 %312 to i8
  %314 = mul i8 %272, %313
  %315 = mul i8 %272, 2
  %316 = xor i8 2, %315
  %317 = and i8 2, %315
  %318 = mul i8 2, %317
  %319 = add i8 %316, %318
  %320 = mul i8 39, %319
  %321 = add i8 23, %320
  %322 = sext i32 %dispatcher1 to i64
  %323 = and i64 %322, 4703409240248485875
  %324 = xor i64 %322, -1
  %325 = xor i64 4703409240248485875, %324
  %326 = and i64 %325, 4703409240248485875
  %327 = add i64 %10, 8639454393136677874
  %328 = and i64 8639454393136677874, %10
  %329 = or i64 8639454393136677874, %10
  %330 = add i64 %328, %329
  %331 = xor i64 %326, %327
  %332 = xor i64 %331, -6112823091939817919
  %333 = xor i64 %332, %323
  %334 = xor i64 %333, %330
  %335 = sext i32 %dispatcher1 to i64
  %336 = and i64 %335, 6198949833430759417
  %337 = or i64 -6198949833430759418, %335
  %338 = sub i64 %337, -6198949833430759418
  %339 = sext i32 %.reload7 to i64
  %340 = and i64 %339, -5824320614822410185
  %341 = or i64 5824320614822410184, %339
  %342 = sub i64 %341, 5824320614822410184
  %343 = xor i64 %336, %340
  %344 = xor i64 %343, %338
  %345 = xor i64 %344, 7488948367544549591
  %346 = xor i64 %345, %342
  %347 = mul i64 %334, %346
  %348 = trunc i64 %347 to i8
  %349 = mul i8 %348, %321
  %350 = add i8 111, %349
  %351 = mul i8 %314, %350
  %352 = sext i32 %0 to i64
  %353 = and i64 %352, -7454240576964523173
  %354 = xor i64 %352, -1
  %355 = or i64 7454240576964523172, %354
  %356 = xor i64 %355, -1
  %357 = and i64 %356, -1
  %358 = and i64 %10, 7169773901844007396
  %359 = xor i64 %10, -1
  %360 = or i64 -7169773901844007397, %359
  %361 = xor i64 %360, -1
  %362 = and i64 %361, -1
  %363 = add i64 %2, -334474504373386040
  %364 = sub i64 0, %2
  %365 = sub i64 -334474504373386040, %364
  %366 = xor i64 %365, %358
  %367 = xor i64 %366, -4112200450359314303
  %368 = xor i64 %367, %353
  %369 = xor i64 %368, %362
  %370 = xor i64 %369, %357
  %371 = xor i64 %370, %363
  %372 = sext i32 %.reload7 to i64
  %373 = add i64 %372, 2843377472212500567
  %374 = sub i64 0, %372
  %375 = sub i64 2843377472212500567, %374
  %376 = or i64 %2, -1675355492605251200
  %377 = xor i64 %2, -1
  %378 = and i64 %377, -6839405643036079215
  %379 = and i64 %2, 6839405643036079214
  %380 = or i64 %378, %379
  %381 = xor i64 5308193390012922385, %380
  %382 = xor i64 %2, -1
  %383 = or i64 1675355492605251199, %382
  %384 = xor i64 %383, -1
  %385 = and i64 %384, -1
  %386 = or i64 %381, %385
  %387 = xor i64 %386, %375
  %388 = xor i64 %387, %376
  %389 = xor i64 %388, %373
  %390 = xor i64 %389, 8818980253093993988
  %391 = mul i64 %371, %390
  %392 = trunc i64 %391 to i8
  %393 = srem i8 %351, %392
  %394 = icmp eq i8 %393, 0
  %395 = mul i8 %272, %272
  %396 = xor i8 %395, %272
  %397 = and i8 %395, %272
  %398 = mul i8 2, %397
  %399 = add i8 %396, %398
  %400 = mul i8 39, %399
  %401 = add i8 23, %400
  %402 = mul i8 -105, %401
  %403 = add i8 111, %402
  %404 = and i64 %6, 6387999933361481874
  %405 = or i64 -6387999933361481875, %6
  %406 = sub i64 %405, -6387999933361481875
  %407 = sext i32 %.reload7 to i64
  %408 = add i64 %407, 484667689511454468
  %409 = add i64 8317621804304902236, %407
  %410 = add i64 %409, -7832954114793447768
  %411 = xor i64 %410, %408
  %412 = xor i64 %411, -8461174163161113221
  %413 = xor i64 %412, %404
  %414 = xor i64 %413, %406
  %415 = sext i32 %0 to i64
  %416 = and i64 %415, -2891550894398252953
  %417 = xor i64 %415, -1
  %418 = or i64 2891550894398252952, %417
  %419 = xor i64 %418, -1
  %420 = and i64 %419, -1
  %421 = sext i32 %.reload7 to i64
  %422 = add i64 %421, -1013896544705795008
  %423 = add i64 -8373676052481130692, %421
  %424 = add i64 %423, 7359779507775335684
  %425 = xor i64 %420, -7497859219855019162
  %426 = xor i64 %425, %424
  %427 = xor i64 %426, %422
  %428 = xor i64 %427, %416
  %429 = mul i64 %414, %428
  %430 = trunc i64 %429 to i8
  %431 = srem i8 %403, %430
  %432 = icmp eq i8 %431, 0
  %433 = and i1 %394, %432
  %434 = select i1 %433, i32 595012171, i32 595012268
  %435 = xor i32 %434, 231
  store i32 %435, i32* %1, align 4
  %436 = call i8** @bf777061424148142830(i32* %1)
  %437 = load i8*, i8** %436, align 8
  indirectbr i8* %437, [label %EntryBasicBlockSplit, label %BogusBasicBlock]

defaultSwitchBasicBlock:                          ; preds = %defaultSwitchBasicBlock, %loopStart
  %438 = load i8*, i8** %3, align 8
  %439 = load i8, i8* %438, align 1
  %440 = mul i8 %439, 2
  %441 = mul i8 %439, 2
  %442 = add i8 2, %441
  %443 = mul i8 %440, %442
  %444 = srem i8 %443, 4
  %445 = icmp eq i8 %444, 0
  %446 = mul i8 %439, %439
  %447 = mul i8 %446, %439
  %448 = add i8 %447, %439
  %449 = srem i8 %448, 2
  %450 = icmp eq i8 %449, 0
  %451 = and i1 %445, %450
  %452 = select i1 %451, i32 595012268, i32 595012154
  %453 = or i32 %452, 150
  %454 = and i32 %452, 150
  %455 = sub i32 %453, %454
  store i32 %455, i32* %1, align 4
  %456 = call i8** @bf777061424148142830(i32* %1)
  %457 = load i8*, i8** %456, align 8
  indirectbr i8* %457, [label %loopEnd, label %defaultSwitchBasicBlock]

loopEnd:                                          ; preds = %loopEnd, %defaultSwitchBasicBlock, %100, %EntryBasicBlockSplit
  %458 = load i8*, i8** %9, align 8
  %459 = load i8, i8* %458, align 1
  %460 = and i8 %459, 1
  %461 = icmp eq i8 %460, 0
  %462 = mul i8 %459, %459
  %463 = xor i8 %462, %459
  %464 = and i8 %462, %459
  %465 = sext i32 %0 to i64
  %466 = or i64 %465, -265522152223969753
  %467 = xor i64 %465, -1
  %468 = and i64 %467, 1536164076125476429
  %469 = and i64 %465, -1536164076125476430
  %470 = or i64 %468, %469
  %471 = xor i64 -1657007913352447894, %470
  %472 = xor i64 %465, -1
  %473 = or i64 265522152223969752, %472
  %474 = xor i64 %473, -1
  %475 = and i64 %474, -1
  %476 = or i64 %471, %475
  %477 = or i64 %8, -8752929120947939948
  %478 = and i64 -8752929120947939948, %8
  %479 = xor i64 -8752929120947939948, %8
  %480 = or i64 %478, %479
  %481 = xor i64 %476, %466
  %482 = xor i64 %481, %477
  %483 = xor i64 %482, 8803547993003896335
  %484 = xor i64 %483, %480
  %485 = add i64 %16, -4013650842317797550
  %486 = xor i64 -4013650842317797550, %16
  %487 = and i64 -4013650842317797550, %16
  %488 = mul i64 2, %487
  %489 = add i64 %486, %488
  %490 = or i64 %16, 6183100081967342018
  %491 = xor i64 %16, -1
  %492 = and i64 6183100081967342018, %491
  %493 = add i64 %492, %16
  %494 = sext i32 %dispatcher1 to i64
  %495 = and i64 %494, -342539506832116741
  %496 = xor i64 %494, -1
  %497 = or i64 342539506832116740, %496
  %498 = xor i64 %497, -1
  %499 = and i64 %498, -1
  %500 = xor i64 %499, %490
  %501 = xor i64 %500, %495
  %502 = xor i64 %501, %489
  %503 = xor i64 %502, 2655921558406758878
  %504 = xor i64 %503, %485
  %505 = xor i64 %504, %493
  %506 = mul i64 %484, %505
  %507 = trunc i64 %506 to i8
  %508 = mul i8 %507, %464
  %509 = add i8 %463, %508
  %510 = mul i8 39, %509
  %511 = add i8 23, %510
  %512 = mul i8 -105, %511
  %513 = add i8 111, %512
  %514 = mul i8 %513, 3
  %515 = srem i8 %514, 2
  %516 = sext i32 %dispatcher1 to i64
  %517 = or i64 %516, 6072879609302855820
  %518 = and i64 6072879609302855820, %516
  %519 = xor i64 6072879609302855820, %516
  %520 = or i64 %518, %519
  %521 = or i64 %12, 2073278108351084903
  %522 = and i64 2073278108351084903, %12
  %523 = xor i64 2073278108351084903, %12
  %524 = or i64 %522, %523
  %525 = xor i64 %524, 8117225620112520561
  %526 = xor i64 %525, %521
  %527 = xor i64 %526, %520
  %528 = xor i64 %527, %517
  %529 = and i64 %12, 1109114377898948634
  %530 = xor i64 %12, -1
  %531 = xor i64 1109114377898948634, %530
  %532 = and i64 %531, 1109114377898948634
  %533 = add i64 %14, -8238082648321053663
  %534 = and i64 -8238082648321053663, %14
  %535 = or i64 -8238082648321053663, %14
  %536 = add i64 %534, %535
  %537 = sext i32 %0 to i64
  %538 = add i64 %537, 376661661557207592
  %539 = sub i64 0, %537
  %540 = add i64 -376661661557207592, %539
  %541 = sub i64 0, %540
  %542 = xor i64 %536, %532
  %543 = xor i64 %542, %533
  %544 = xor i64 %543, %538
  %545 = xor i64 %544, %529
  %546 = xor i64 %545, 0
  %547 = xor i64 %546, %541
  %548 = mul i64 %528, %547
  %549 = trunc i64 %548 to i8
  %550 = icmp eq i8 %515, %549
  %551 = or i1 %461, %550
  %552 = select i1 %551, i32 595012156, i32 595012171
  %553 = xor i32 %552, 119
  store i32 %553, i32* %1, align 4
  %554 = call i8** @bf777061424148142830(i32* %1)
  %555 = load i8*, i8** %554, align 8
  indirectbr i8* %555, [label %loopStart, label %loopEnd]
}

; Function Attrs: noinline
define internal i64 @m12654978418463392530(i64 %0) #10 {
  %2 = alloca i32, align 4
  %3 = xor i64 1996855465712537074, %0
  ret i64 %3
}

; Function Attrs: noinline
define internal i8** @lk4104490460174343886(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable15196418527574027084, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk1150942098745952095(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable2339431414740645237, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk15438226847016391286(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [12 x i8*], [12 x i8*]* @obfsfuncAddrLookupTable16569491712965296280, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk14802275186744156584(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk16981593920911698396(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10704982355254502734, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk1507460811145017318(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @obfsfuncAddrLookupTable4065199750022294924, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk4155444237337359759(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1252163288438473641, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk16694588968120012916(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2052736990690125031, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk17476166181081627056(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11790647338376632081, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk6108643113584584359(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable8012535776871168785, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk11760273921675393270(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2936378647060095639, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk14136176891458644934(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13584920069806577051, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk7634065167745351151(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7736138858792283958, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk10336912531144989429(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5267233781939814659, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk5170062957344361398(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable11422090804462279601, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk16527391568973528520(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable3231250603839710514, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk17440691223701217449(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3399976269554154823, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk274587686926290325(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9221784372211060696, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk10042805741926783964(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable714670702284029050, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk5630561103844911684(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3092705622466298772, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk12171961596319746782(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable6692509614401912191, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk15309315699111240189(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12181580443857829625, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk531628682323968284(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10990634260413618745, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk5923456252723256686(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12646564381111741682, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk11342274254818950462(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12852019627141998670, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk10900153557675762282(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3945980122852926304, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @lk2798420644471863674(i64* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i64, i64* %0, align 8
  %4 = alloca i64, align 8
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3, i64* %4, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable14640128482458840838, i32 0, i64 %5
  ret i8** %6
}

define internal void @"9941920946239825184"(i32 %0, i64* %1, i8*** %2, i64* %3, i8*** %4, i64* %5, i8*** %6, i64* %7, i8*** %8, i64* %9, i8*** %10, i64 %11, i64* %12, i64* %13, i8*** %14, double %15, float* %16, float %17, float %18, float* %19, float %20, float* %21, i32* %22, i32* %23, i32* %24, i32* %25, i1* %26, i64* %27, i8*** %28, i1 %29, i1 %30, i1* %31, i1 %32, i1* %33, i1* %34, i1* %35, i1* %36, i1 %37, i1* %38, i64* %39, i8*** %40, i64* %41, i8*** %42, i64* %43, i8*** %44, i64* %45, i64* %46, i1 %47, i1* %48, i32 %49, i32 %50, i1* %51, i1* %52, i64 %53, i1 %54, i1* %55, i1 %56, i1 %57, i1 %58, i32 %59, i32 %60, i1* %61, i1* %62, i1* %63, i1* %64, i1* %65, i1* %66, i1* %67, i1* %68, i64 %69, i1* %70, i64 %71, i32 %72, i1* %73, i1* %74, i8* %75, i64 %76, i64 %77, i32* %78, i64* %79, i64* %80, i1* %81, float* %82, float* %83, i8* %84, float* %85, i32* %86, i1 %87, i1* %88, i64* %89, i8*** %90, i64 %91, i32 %92, i1* %93, i1* %94, i64 %95, i64 %96, i64 %97, i1* %98, i1* %99, i1* %100, i64 %101, i64* %102, i1* %103, i8* %104, float* %105, i1* %106, i1 %107, i1 %108, i1 %109, i1* %110, i1 %111, i1* %112, i1* %113, i1* %114, i1 %115, i1* %116, i1 %117, i1* %118, i1* %119, i1* %120, i1* %121, i1* %122, i1* %123, i1* %124, i1* %125, i1 %126, i1* %127, i1 %128, i1 %129, i1 %130, i1 %131, i1 %132, i1 %133, i1 %134, i1 %135, i64* %136, i1* %137, i64* %138, i1* %139, i1* %140, i1* %141, i1* %142, i1* %143, i1* %144, i1* %145, i1* %146, i1* %147, i1* %148, i1* %149, i1* %150, i1* %151, i1* %152, i1* %153, i1* %154, i1* %155, i1* %156, i1* %157, i1* %158, i1* %159, i1* %160, i1* %161, i1* %162, i1 %163, i1* %164, i1* %165, i1 %166, i1* %167, i1* %168, i1* %169, i32 %170, i32 %171, i1* %172, i1* %173) #11 {
entry:
  %174 = alloca i32, align 4
  %175 = call i64 @h11804894491772278134(i64 595012207)
  %176 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %175
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot56), i8** %176, align 8
  %177 = call i64 @h11804894491772278134(i64 595012197)
  %178 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %177
  store i8* blockaddress(@"9941920946239825184", %codeRepl52), i8** %178, align 8
  %179 = add i64 %96, -4947859620440571813
  %180 = add i64 4028702388712919412, %96
  %181 = sub i64 %180, 8976562009153491225
  %182 = sext i32 %0 to i64
  %183 = and i64 %182, -1822320589968506834
  %184 = xor i64 %182, -1
  %185 = or i64 1822320589968506833, %184
  %186 = xor i64 %185, -1
  %187 = and i64 %186, -1
  %188 = sext i32 %49 to i64
  %189 = or i64 %188, -6152067381495648373
  %190 = xor i64 %188, -1
  %191 = and i64 %190, -7072712670384396075
  %192 = and i64 %188, 7072712670384396074
  %193 = or i64 %191, %192
  %194 = xor i64 3983392103210829662, %193
  %195 = xor i64 %188, -1
  %196 = or i64 6152067381495648372, %195
  %197 = xor i64 %196, -1
  %198 = and i64 %197, -1
  %199 = or i64 %194, %198
  %200 = xor i64 %179, %189
  %201 = xor i64 %200, %183
  %202 = xor i64 %201, %187
  %203 = xor i64 %202, 3468833991027426353
  %204 = xor i64 %203, %181
  %205 = xor i64 %204, %199
  %206 = add i64 %71, 7985116105028211587
  %207 = xor i64 7985116105028211587, %71
  %208 = and i64 7985116105028211587, %71
  %209 = mul i64 2, %208
  %210 = add i64 %207, %209
  %211 = sext i32 %72 to i64
  %212 = and i64 %211, -862168672274208349
  %213 = or i64 862168672274208348, %211
  %214 = sub i64 %213, 862168672274208348
  %215 = xor i64 %210, 1377974156875987689
  %216 = xor i64 %215, %212
  %217 = xor i64 %216, %214
  %218 = xor i64 %217, %206
  %219 = mul i64 %205, %218
  %220 = call i64 @h11804894491772278134(i64 %219)
  %221 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %220
  store i8* blockaddress(@"9941920946239825184", %"178"), i8** %221, align 8
  %222 = call i64 @h11804894491772278134(i64 595012136)
  %223 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %222
  store i8* blockaddress(@"9941920946239825184", %.exitStub7.exitStub), i8** %223, align 8
  %224 = call i64 @h11804894491772278134(i64 595012138)
  %225 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %224
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot49), i8** %225, align 8
  %226 = call i64 @h11804894491772278134(i64 595012113)
  %227 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %226
  store i8* blockaddress(@"9941920946239825184", %.exitStub148), i8** %227, align 8
  %228 = call i64 @h11804894491772278134(i64 595012097)
  %229 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %228
  store i8* blockaddress(@"9941920946239825184", %.exitStub47), i8** %229, align 8
  %230 = call i64 @h11804894491772278134(i64 595012241)
  %231 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %230
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub57), i8** %231, align 8
  %232 = call i64 @h11804894491772278134(i64 595012175)
  %233 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %232
  store i8* blockaddress(@"9941920946239825184", %.split42), i8** %233, align 8
  %234 = call i64 @h11804894491772278134(i64 595012250)
  %235 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %234
  store i8* blockaddress(@"9941920946239825184", %.exitStub40), i8** %235, align 8
  %236 = call i64 @h11804894491772278134(i64 595012265)
  %237 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %236
  store i8* blockaddress(@"9941920946239825184", %codeRepl38), i8** %237, align 8
  %238 = sext i32 %0 to i64
  %239 = and i64 %238, -1505381966878615219
  %240 = xor i64 %238, -1
  %241 = or i64 1505381966878615218, %240
  %242 = xor i64 %241, -1
  %243 = and i64 %242, -1
  %244 = or i64 %95, -5392305416947146656
  %245 = xor i64 %95, -1
  %246 = and i64 -5392305416947146656, %245
  %247 = add i64 %246, %95
  %248 = sext i32 %50 to i64
  %249 = and i64 %248, 6206236041846581868
  %250 = or i64 -6206236041846581869, %248
  %251 = sub i64 %250, -6206236041846581869
  %252 = xor i64 %251, %239
  %253 = xor i64 %252, %244
  %254 = xor i64 %253, %249
  %255 = xor i64 %254, %247
  %256 = xor i64 %255, %243
  %257 = xor i64 %256, -5881209600368791847
  %258 = add i64 %71, -8816413860466680452
  %259 = sub i64 0, %71
  %260 = sub i64 -8816413860466680452, %259
  %261 = sext i32 %50 to i64
  %262 = and i64 %261, -9122414848363482313
  %263 = xor i64 %261, -1
  %264 = or i64 9122414848363482312, %263
  %265 = xor i64 %264, -1
  %266 = and i64 %265, -1
  %267 = add i64 %96, -7240231532844890305
  %268 = and i64 -7240231532844890305, %96
  %269 = or i64 -7240231532844890305, %96
  %270 = add i64 %268, %269
  %271 = xor i64 %266, %258
  %272 = xor i64 %271, %260
  %273 = xor i64 %272, 667257630523971915
  %274 = xor i64 %273, %267
  %275 = xor i64 %274, %270
  %276 = xor i64 %275, %262
  %277 = mul i64 %257, %276
  %278 = call i64 @h11804894491772278134(i64 %277)
  %279 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %278
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot37), i8** %279, align 8
  %280 = call i64 @h11804894491772278134(i64 595012100)
  %281 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %280
  store i8* blockaddress(@"9941920946239825184", %"155"), i8** %281, align 8
  %282 = call i64 @h11804894491772278134(i64 595012137)
  %283 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %282
  store i8* blockaddress(@"9941920946239825184", %.split31), i8** %283, align 8
  %284 = call i64 @h11804894491772278134(i64 595012242)
  %285 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %284
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot30), i8** %285, align 8
  %286 = call i64 @h11804894491772278134(i64 595012279)
  %287 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %286
  store i8* blockaddress(@"9941920946239825184", %"150"), i8** %287, align 8
  %288 = call i64 @h11804894491772278134(i64 595012143)
  %289 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %288
  store i8* blockaddress(@"9941920946239825184", %"149"), i8** %289, align 8
  %290 = call i64 @h11804894491772278134(i64 595012269)
  %291 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %290
  store i8* blockaddress(@"9941920946239825184", %"148"), i8** %291, align 8
  %292 = call i64 @h11804894491772278134(i64 595012149)
  %293 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %292
  store i8* blockaddress(@"9941920946239825184", %"144"), i8** %293, align 8
  %294 = sext i32 %170 to i64
  %295 = or i64 %294, 339165093820096059
  %296 = xor i64 %294, -1
  %297 = and i64 339165093820096059, %296
  %298 = add i64 %297, %294
  %299 = and i64 %101, -7606695726446970248
  %300 = xor i64 %101, -1
  %301 = or i64 7606695726446970247, %300
  %302 = xor i64 %301, -1
  %303 = and i64 %302, -1
  %304 = or i64 %76, 4033622339936392952
  %305 = xor i64 %76, -1
  %306 = and i64 4033622339936392952, %305
  %307 = add i64 %306, %76
  %308 = xor i64 %298, %303
  %309 = xor i64 %308, %304
  %310 = xor i64 %309, %295
  %311 = xor i64 %310, %299
  %312 = xor i64 %311, 4647860194430195019
  %313 = xor i64 %312, %307
  %314 = and i64 %53, -4989021911070917915
  %315 = xor i64 %53, -1
  %316 = xor i64 -4989021911070917915, %315
  %317 = and i64 %316, -4989021911070917915
  %318 = sext i32 %92 to i64
  %319 = or i64 %318, -3085919651981604470
  %320 = and i64 -3085919651981604470, %318
  %321 = xor i64 -3085919651981604470, %318
  %322 = or i64 %320, %321
  %323 = or i64 %53, -1893193744215901908
  %324 = xor i64 %53, -1
  %325 = and i64 %324, 4245013400321074188
  %326 = and i64 %53, -4245013400321074189
  %327 = or i64 %325, %326
  %328 = xor i64 -2354442094620320480, %327
  %329 = xor i64 %53, -1
  %330 = or i64 1893193744215901907, %329
  %331 = xor i64 %330, -1
  %332 = and i64 %331, -1
  %333 = or i64 %328, %332
  %334 = xor i64 %323, 4408957880717684611
  %335 = xor i64 %334, %322
  %336 = xor i64 %335, %314
  %337 = xor i64 %336, %333
  %338 = xor i64 %337, %319
  %339 = xor i64 %338, %317
  %340 = mul i64 %313, %339
  %341 = call i64 @h11804894491772278134(i64 %340)
  %342 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %341
  store i8* blockaddress(@"9941920946239825184", %"141"), i8** %342, align 8
  %343 = call i64 @h11804894491772278134(i64 595012186)
  %344 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %343
  store i8* blockaddress(@"9941920946239825184", %codeRepl80), i8** %344, align 8
  %345 = call i64 @h11804894491772278134(i64 595012123)
  %346 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %345
  store i8* blockaddress(@"9941920946239825184", %"137"), i8** %346, align 8
  %347 = call i64 @h11804894491772278134(i64 595012133)
  %348 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %347
  store i8* blockaddress(@"9941920946239825184", %"130"), i8** %348, align 8
  %349 = or i64 %11, -2708130739585851620
  %350 = xor i64 %11, -1
  %351 = and i64 -2708130739585851620, %350
  %352 = add i64 %351, %11
  %353 = add i64 %95, 5395154457104415619
  %354 = sub i64 0, %95
  %355 = sub i64 5395154457104415619, %354
  %356 = or i64 %76, -2667866936838377903
  %357 = and i64 -2667866936838377903, %76
  %358 = xor i64 -2667866936838377903, %76
  %359 = or i64 %357, %358
  %360 = xor i64 %349, %352
  %361 = xor i64 %360, 5815270402411492303
  %362 = xor i64 %361, %356
  %363 = xor i64 %362, %355
  %364 = xor i64 %363, %353
  %365 = xor i64 %364, %359
  %366 = sext i32 %0 to i64
  %367 = or i64 %366, -4895148614946961113
  %368 = xor i64 %366, -1
  %369 = and i64 -4895148614946961113, %368
  %370 = add i64 %369, %366
  %371 = add i64 %91, 7334144010039885783
  %372 = add i64 -4172783385054359499, %91
  %373 = sub i64 %372, 6939816678615306334
  %374 = xor i64 %370, %373
  %375 = xor i64 %374, -4273710161987940614
  %376 = xor i64 %375, %367
  %377 = xor i64 %376, %371
  %378 = mul i64 %365, %377
  %379 = call i64 @h11804894491772278134(i64 %378)
  %380 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %379
  store i8* blockaddress(@"9941920946239825184", %"128"), i8** %380, align 8
  %381 = call i64 @h11804894491772278134(i64 595012176)
  %382 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %381
  store i8* blockaddress(@"9941920946239825184", %.exitStub2655), i8** %382, align 8
  %383 = call i64 @h11804894491772278134(i64 595012240)
  %384 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %383
  store i8* blockaddress(@"9941920946239825184", %"127"), i8** %384, align 8
  %385 = call i64 @h11804894491772278134(i64 595012260)
  %386 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %385
  store i8* blockaddress(@"9941920946239825184", %"126"), i8** %386, align 8
  %387 = call i64 @h11804894491772278134(i64 595012190)
  %388 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %387
  store i8* blockaddress(@"9941920946239825184", %"123"), i8** %388, align 8
  %389 = call i64 @h11804894491772278134(i64 595012215)
  %390 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %389
  store i8* blockaddress(@"9941920946239825184", %"122"), i8** %390, align 8
  %391 = call i64 @h11804894491772278134(i64 595012227)
  %392 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %391
  store i8* blockaddress(@"9941920946239825184", %"121"), i8** %392, align 8
  %393 = call i64 @h11804894491772278134(i64 595012183)
  %394 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %393
  store i8* blockaddress(@"9941920946239825184", %"118"), i8** %394, align 8
  %395 = call i64 @h11804894491772278134(i64 595012140)
  %396 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %395
  store i8* blockaddress(@"9941920946239825184", %"117"), i8** %396, align 8
  %397 = sext i32 %49 to i64
  %398 = or i64 %397, -4505284540110344424
  %399 = xor i64 %397, -1
  %400 = and i64 %399, 34564756575623113
  %401 = and i64 %397, -34564756575623114
  %402 = or i64 %400, %401
  %403 = xor i64 -4539399854084196143, %402
  %404 = xor i64 %397, -1
  %405 = or i64 4505284540110344423, %404
  %406 = xor i64 %405, -1
  %407 = and i64 %406, -1
  %408 = or i64 %403, %407
  %409 = sext i32 %0 to i64
  %410 = and i64 %409, -7943492938239977025
  %411 = or i64 7943492938239977024, %409
  %412 = sub i64 %411, 7943492938239977024
  %413 = add i64 %11, 8427201663238131521
  %414 = sub i64 0, %11
  %415 = add i64 -8427201663238131521, %414
  %416 = sub i64 0, %415
  %417 = xor i64 %412, 7838880506608832543
  %418 = xor i64 %417, %408
  %419 = xor i64 %418, %413
  %420 = xor i64 %419, %416
  %421 = xor i64 %420, %398
  %422 = xor i64 %421, %410
  %423 = sext i32 %170 to i64
  %424 = or i64 %423, 8704075095242923292
  %425 = xor i64 %423, -1
  %426 = and i64 %425, -4478085597063494750
  %427 = and i64 %423, 4478085597063494749
  %428 = or i64 %426, %427
  %429 = xor i64 -5111107500774809922, %428
  %430 = xor i64 %423, -1
  %431 = or i64 -8704075095242923293, %430
  %432 = xor i64 %431, -1
  %433 = and i64 %432, -1
  %434 = or i64 %429, %433
  %435 = add i64 %97, 4756076980603028059
  %436 = and i64 4756076980603028059, %97
  %437 = or i64 4756076980603028059, %97
  %438 = add i64 %436, %437
  %439 = xor i64 %438, %424
  %440 = xor i64 %439, %434
  %441 = xor i64 %440, -243808935604022153
  %442 = xor i64 %441, %435
  %443 = mul i64 %422, %442
  %444 = call i64 @h11804894491772278134(i64 %443)
  %445 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %444
  store i8* blockaddress(@"9941920946239825184", %"116"), i8** %445, align 8
  %446 = call i64 @h11804894491772278134(i64 595012174)
  %447 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %446
  store i8* blockaddress(@"9941920946239825184", %"115"), i8** %447, align 8
  %448 = call i64 @h11804894491772278134(i64 595012154)
  %449 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %448
  store i8* blockaddress(@"9941920946239825184", %"113"), i8** %449, align 8
  %450 = call i64 @h11804894491772278134(i64 595012228)
  %451 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %450
  store i8* blockaddress(@"9941920946239825184", %"111"), i8** %451, align 8
  %452 = call i64 @h11804894491772278134(i64 595012253)
  %453 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %452
  store i8* blockaddress(@"9941920946239825184", %"110"), i8** %453, align 8
  %454 = add i64 %96, -1932054803042471310
  %455 = xor i64 -1932054803042471310, %96
  %456 = and i64 -1932054803042471310, %96
  %457 = mul i64 2, %456
  %458 = add i64 %455, %457
  %459 = or i64 %76, -8589839513126464062
  %460 = xor i64 %76, -1
  %461 = and i64 %460, -3906458525409040742
  %462 = and i64 %76, 3906458525409040741
  %463 = or i64 %461, %462
  %464 = xor i64 4684793449999315800, %463
  %465 = xor i64 %76, -1
  %466 = or i64 8589839513126464061, %465
  %467 = xor i64 %466, -1
  %468 = and i64 %467, -1
  %469 = or i64 %464, %468
  %470 = sext i32 %0 to i64
  %471 = add i64 %470, -4371168372783905003
  %472 = and i64 -4371168372783905003, %470
  %473 = or i64 -4371168372783905003, %470
  %474 = add i64 %472, %473
  %475 = xor i64 1304938874458157583, %471
  %476 = xor i64 %475, %474
  %477 = xor i64 %476, %458
  %478 = xor i64 %477, %454
  %479 = xor i64 %478, %469
  %480 = xor i64 %479, %459
  %481 = and i64 %91, 241604066751373193
  %482 = xor i64 %91, -1
  %483 = or i64 -241604066751373194, %482
  %484 = xor i64 %483, -1
  %485 = and i64 %484, -1
  %486 = add i64 %69, -3537183772109694170
  %487 = add i64 3091587352215396755, %69
  %488 = sub i64 %487, 6628771124325090925
  %489 = xor i64 -405665177759054025, %481
  %490 = xor i64 %489, %485
  %491 = xor i64 %490, %488
  %492 = xor i64 %491, %486
  %493 = mul i64 %480, %492
  %494 = call i64 @h11804894491772278134(i64 %493)
  %495 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %494
  store i8* blockaddress(@"9941920946239825184", %"108"), i8** %495, align 8
  %496 = add i64 %101, 9115862239644839131
  %497 = sub i64 0, %101
  %498 = sub i64 9115862239644839131, %497
  %499 = sext i32 %60 to i64
  %500 = and i64 %499, 8409366797717600087
  %501 = xor i64 %499, -1
  %502 = or i64 -8409366797717600088, %501
  %503 = xor i64 %502, -1
  %504 = and i64 %503, -1
  %505 = xor i64 %496, %500
  %506 = xor i64 %505, 8525794877986437021
  %507 = xor i64 %506, %504
  %508 = xor i64 %507, %498
  %509 = or i64 %71, -7527945327615174283
  %510 = xor i64 %71, -1
  %511 = and i64 %510, 6829081614211894496
  %512 = and i64 %71, -6829081614211894497
  %513 = or i64 %511, %512
  %514 = xor i64 -3944423128201964139, %513
  %515 = xor i64 %71, -1
  %516 = or i64 7527945327615174282, %515
  %517 = xor i64 %516, -1
  %518 = and i64 %517, -1
  %519 = or i64 %514, %518
  %520 = sext i32 %92 to i64
  %521 = or i64 %520, 7340502415519069917
  %522 = xor i64 %520, -1
  %523 = and i64 %522, -5413257485086055639
  %524 = and i64 %520, 5413257485086055638
  %525 = or i64 %523, %524
  %526 = xor i64 -3369102701952395788, %525
  %527 = xor i64 %520, -1
  %528 = or i64 -7340502415519069918, %527
  %529 = xor i64 %528, -1
  %530 = and i64 %529, -1
  %531 = or i64 %526, %530
  %532 = and i64 %11, 7980225950087148400
  %533 = xor i64 %11, -1
  %534 = xor i64 7980225950087148400, %533
  %535 = and i64 %534, 7980225950087148400
  %536 = xor i64 %531, %509
  %537 = xor i64 %536, -285798718598080373
  %538 = xor i64 %537, %519
  %539 = xor i64 %538, %532
  %540 = xor i64 %539, %521
  %541 = xor i64 %540, %535
  %542 = mul i64 %508, %541
  %543 = call i64 @h11804894491772278134(i64 %542)
  %544 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %543
  store i8* blockaddress(@"9941920946239825184", %"145"), i8** %544, align 8
  %545 = call i64 @h11804894491772278134(i64 595012277)
  %546 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %545
  store i8* blockaddress(@"9941920946239825184", %"131"), i8** %546, align 8
  %547 = call i64 @h11804894491772278134(i64 595012096)
  %548 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %547
  store i8* blockaddress(@"9941920946239825184", %"107"), i8** %548, align 8
  %549 = call i64 @h11804894491772278134(i64 595012163)
  %550 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %549
  store i8* blockaddress(@"9941920946239825184", %"104"), i8** %550, align 8
  %551 = call i64 @h11804894491772278134(i64 595012119)
  %552 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %551
  store i8* blockaddress(@"9941920946239825184", %"103"), i8** %552, align 8
  %553 = call i64 @h11804894491772278134(i64 595012219)
  %554 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %553
  store i8* blockaddress(@"9941920946239825184", %"102"), i8** %554, align 8
  %555 = call i64 @h11804894491772278134(i64 595012194)
  %556 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %555
  store i8* blockaddress(@"9941920946239825184", %"100"), i8** %556, align 8
  %557 = call i64 @h11804894491772278134(i64 595012254)
  %558 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %557
  store i8* blockaddress(@"9941920946239825184", %.exitStub144), i8** %558, align 8
  %559 = call i64 @h11804894491772278134(i64 595012158)
  %560 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %559
  store i8* blockaddress(@"9941920946239825184", %"98"), i8** %560, align 8
  %561 = call i64 @h11804894491772278134(i64 595012229)
  %562 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %561
  store i8* blockaddress(@"9941920946239825184", %.preheader), i8** %562, align 8
  %563 = call i64 @h11804894491772278134(i64 595012270)
  %564 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %563
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot23), i8** %564, align 8
  %565 = sext i32 %0 to i64
  %566 = and i64 %565, -6355087614686139835
  %567 = xor i64 %565, -1
  %568 = or i64 6355087614686139834, %567
  %569 = xor i64 %568, -1
  %570 = and i64 %569, -1
  %571 = sext i32 %60 to i64
  %572 = add i64 %571, -3839329434822428138
  %573 = add i64 -7643225139536684175, %571
  %574 = sub i64 %573, -3803895704714256037
  %575 = xor i64 %570, %566
  %576 = xor i64 %575, 6200742612491505781
  %577 = xor i64 %576, %572
  %578 = xor i64 %577, %574
  %579 = add i64 %11, -5517924309376794210
  %580 = and i64 -5517924309376794210, %11
  %581 = or i64 -5517924309376794210, %11
  %582 = add i64 %580, %581
  %583 = or i64 %69, -3243968262327079867
  %584 = xor i64 %69, -1
  %585 = and i64 %584, 1473459846080121287
  %586 = and i64 %69, -1473459846080121288
  %587 = or i64 %585, %586
  %588 = xor i64 -4140536622419401342, %587
  %589 = xor i64 %69, -1
  %590 = or i64 3243968262327079866, %589
  %591 = xor i64 %590, -1
  %592 = and i64 %591, -1
  %593 = or i64 %588, %592
  %594 = sext i32 %59 to i64
  %595 = and i64 %594, 8812806084718816251
  %596 = or i64 -8812806084718816252, %594
  %597 = sub i64 %596, -8812806084718816252
  %598 = xor i64 %583, %595
  %599 = xor i64 %598, %593
  %600 = xor i64 %599, %582
  %601 = xor i64 %600, %579
  %602 = xor i64 %601, -7054595664920544855
  %603 = xor i64 %602, %597
  %604 = mul i64 %578, %603
  %605 = call i64 @h11804894491772278134(i64 %604)
  %606 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %605
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot18), i8** %606, align 8
  %607 = call i64 @h11804894491772278134(i64 595012129)
  %608 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %607
  store i8* blockaddress(@"9941920946239825184", %"95"), i8** %608, align 8
  %609 = or i64 %101, 8853977992015964644
  %610 = xor i64 %101, -1
  %611 = and i64 %610, -8722162101191994417
  %612 = and i64 %101, 8722162101191994416
  %613 = or i64 %611, %612
  %614 = xor i64 -276124937105737173, %613
  %615 = xor i64 %101, -1
  %616 = or i64 -8853977992015964645, %615
  %617 = xor i64 %616, -1
  %618 = and i64 %617, -1
  %619 = or i64 %614, %618
  %620 = or i64 %11, 7628257244487734901
  %621 = and i64 7628257244487734901, %11
  %622 = xor i64 7628257244487734901, %11
  %623 = or i64 %621, %622
  %624 = xor i64 %620, %609
  %625 = xor i64 %624, %623
  %626 = xor i64 %625, -6372993682217898305
  %627 = xor i64 %626, %619
  %628 = or i64 %77, 5313469321167766684
  %629 = xor i64 %77, -1
  %630 = and i64 %629, -196599764165576368
  %631 = and i64 %77, 196599764165576367
  %632 = or i64 %630, %631
  %633 = xor i64 -5406371532377670196, %632
  %634 = xor i64 %77, -1
  %635 = or i64 -5313469321167766685, %634
  %636 = xor i64 %635, -1
  %637 = and i64 %636, -1
  %638 = or i64 %633, %637
  %639 = sext i32 %59 to i64
  %640 = add i64 %639, -449137172263203614
  %641 = and i64 -449137172263203614, %639
  %642 = or i64 -449137172263203614, %639
  %643 = add i64 %641, %642
  %644 = sext i32 %171 to i64
  %645 = or i64 %644, -6533892922161095522
  %646 = and i64 -6533892922161095522, %644
  %647 = xor i64 -6533892922161095522, %644
  %648 = or i64 %646, %647
  %649 = xor i64 %648, -354533312679758349
  %650 = xor i64 %649, %643
  %651 = xor i64 %650, %645
  %652 = xor i64 %651, %638
  %653 = xor i64 %652, %640
  %654 = xor i64 %653, %628
  %655 = mul i64 %627, %654
  %656 = call i64 @h11804894491772278134(i64 %655)
  %657 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %656
  store i8* blockaddress(@"9941920946239825184", %"147"), i8** %657, align 8
  %658 = call i64 @h11804894491772278134(i64 595012258)
  %659 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %658
  store i8* blockaddress(@"9941920946239825184", %"88"), i8** %659, align 8
  %660 = call i64 @h11804894491772278134(i64 595012118)
  %661 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %660
  store i8* blockaddress(@"9941920946239825184", %"86"), i8** %661, align 8
  %662 = call i64 @h11804894491772278134(i64 595012273)
  %663 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %662
  store i8* blockaddress(@"9941920946239825184", %"139"), i8** %663, align 8
  %664 = call i64 @h11804894491772278134(i64 595012236)
  %665 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %664
  store i8* blockaddress(@"9941920946239825184", %NodeBlock23), i8** %665, align 8
  %666 = call i64 @h11804894491772278134(i64 595012267)
  %667 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %666
  store i8* blockaddress(@"9941920946239825184", %"82"), i8** %667, align 8
  %668 = call i64 @h11804894491772278134(i64 595012116)
  %669 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %668
  store i8* blockaddress(@"9941920946239825184", %codeRepl49), i8** %669, align 8
  %670 = call i64 @h11804894491772278134(i64 595012171)
  %671 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %670
  store i8* blockaddress(@"9941920946239825184", %.loopexit), i8** %671, align 8
  %672 = call i64 @h11804894491772278134(i64 595012161)
  %673 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %672
  store i8* blockaddress(@"9941920946239825184", %EntryBasicBlockSplit), i8** %673, align 8
  %674 = call i64 @h11804894491772278134(i64 595012156)
  %675 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %674
  store i8* blockaddress(@"9941920946239825184", %.exitStub122), i8** %675, align 8
  %676 = call i64 @h11804894491772278134(i64 595012256)
  %677 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %676
  store i8* blockaddress(@"9941920946239825184", %NodeBlock49), i8** %677, align 8
  %678 = call i64 @h11804894491772278134(i64 595012245)
  %679 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %678
  store i8* blockaddress(@"9941920946239825184", %codeRepl19), i8** %679, align 8
  %680 = call i64 @h11804894491772278134(i64 595012231)
  %681 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %680
  store i8* blockaddress(@"9941920946239825184", %.exitStub32), i8** %681, align 8
  %682 = call i64 @h11804894491772278134(i64 595012144)
  %683 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %682
  store i8* blockaddress(@"9941920946239825184", %codeRepl24), i8** %683, align 8
  %684 = call i64 @h11804894491772278134(i64 595012232)
  %685 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %684
  store i8* blockaddress(@"9941920946239825184", %"99"), i8** %685, align 8
  %686 = call i64 @h11804894491772278134(i64 595012146)
  %687 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %686
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub17), i8** %687, align 8
  %688 = sext i32 %60 to i64
  %689 = add i64 %688, 6232223817265553371
  %690 = add i64 6638350970857538334, %688
  %691 = add i64 %690, -406127153591984963
  %692 = and i64 %53, 3058803975337050553
  %693 = or i64 -3058803975337050554, %53
  %694 = sub i64 %693, -3058803975337050554
  %695 = or i64 %91, 911597893196991768
  %696 = and i64 911597893196991768, %91
  %697 = xor i64 911597893196991768, %91
  %698 = or i64 %696, %697
  %699 = xor i64 %694, %695
  %700 = xor i64 %699, %692
  %701 = xor i64 %700, 1734295673525311161
  %702 = xor i64 %701, %691
  %703 = xor i64 %702, %698
  %704 = xor i64 %703, %689
  %705 = sext i32 %92 to i64
  %706 = and i64 %705, 4705315296054655017
  %707 = or i64 -4705315296054655018, %705
  %708 = sub i64 %707, -4705315296054655018
  %709 = sext i32 %60 to i64
  %710 = add i64 %709, -407169733387167106
  %711 = and i64 -407169733387167106, %709
  %712 = or i64 -407169733387167106, %709
  %713 = add i64 %711, %712
  %714 = sext i32 %0 to i64
  %715 = and i64 %714, 4299553415747765018
  %716 = or i64 -4299553415747765019, %714
  %717 = sub i64 %716, -4299553415747765019
  %718 = xor i64 %708, %715
  %719 = xor i64 %718, %713
  %720 = xor i64 %719, %717
  %721 = xor i64 %720, %706
  %722 = xor i64 %721, -2084984287487076554
  %723 = xor i64 %722, %710
  %724 = mul i64 %704, %723
  %725 = call i64 @h11804894491772278134(i64 %724)
  %726 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %725
  store i8* blockaddress(@"9941920946239825184", %.exitStub1.exitStub36), i8** %726, align 8
  %727 = call i64 @h11804894491772278134(i64 595012199)
  %728 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %727
  store i8* blockaddress(@"9941920946239825184", %"90"), i8** %728, align 8
  %729 = add i64 %96, 6287674663118856300
  %730 = sub i64 0, %96
  %731 = sub i64 6287674663118856300, %730
  %732 = sext i32 %50 to i64
  %733 = or i64 %732, -1311684011410037930
  %734 = xor i64 %732, -1
  %735 = and i64 %734, -1401888415827757227
  %736 = and i64 %732, 1401888415827757226
  %737 = or i64 %735, %736
  %738 = xor i64 90225643215754243, %737
  %739 = xor i64 %732, -1
  %740 = or i64 1311684011410037929, %739
  %741 = xor i64 %740, -1
  %742 = and i64 %741, -1
  %743 = or i64 %738, %742
  %744 = xor i64 %733, %729
  %745 = xor i64 %744, %731
  %746 = xor i64 %745, %743
  %747 = xor i64 %746, -6633015917672780287
  %748 = sext i32 %49 to i64
  %749 = add i64 %748, -708211915418767819
  %750 = and i64 -708211915418767819, %748
  %751 = or i64 -708211915418767819, %748
  %752 = add i64 %750, %751
  %753 = sext i32 %92 to i64
  %754 = or i64 %753, 7594181598652631189
  %755 = and i64 7594181598652631189, %753
  %756 = xor i64 7594181598652631189, %753
  %757 = or i64 %755, %756
  %758 = and i64 %101, -472241228501081161
  %759 = or i64 472241228501081160, %101
  %760 = sub i64 %759, 472241228501081160
  %761 = xor i64 %754, %757
  %762 = xor i64 %761, %758
  %763 = xor i64 %762, %749
  %764 = xor i64 %763, 6689760375175820413
  %765 = xor i64 %764, %760
  %766 = xor i64 %765, %752
  %767 = mul i64 %747, %766
  %768 = call i64 @h11804894491772278134(i64 %767)
  %769 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %768
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot41), i8** %769, align 8
  %770 = call i64 @h11804894491772278134(i64 595012233)
  %771 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %770
  store i8* blockaddress(@"9941920946239825184", %"125"), i8** %771, align 8
  %772 = call i64 @h11804894491772278134(i64 595012247)
  %773 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %772
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot16), i8** %773, align 8
  %774 = call i64 @h11804894491772278134(i64 595012162)
  %775 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %774
  store i8* blockaddress(@"9941920946239825184", %codeRepl1929), i8** %775, align 8
  %776 = call i64 @h11804894491772278134(i64 595012147)
  %777 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %776
  store i8* blockaddress(@"9941920946239825184", %"91"), i8** %777, align 8
  %778 = call i64 @h11804894491772278134(i64 595012172)
  %779 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %778
  store i8* blockaddress(@"9941920946239825184", %.exitStub3), i8** %779, align 8
  %780 = call i64 @h11804894491772278134(i64 595012237)
  %781 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %780
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot11), i8** %781, align 8
  %782 = call i64 @h11804894491772278134(i64 595012131)
  %783 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %782
  store i8* blockaddress(@"9941920946239825184", %"119"), i8** %783, align 8
  %784 = call i64 @h11804894491772278134(i64 595012114)
  %785 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %784
  store i8* blockaddress(@"9941920946239825184", %NodeBlock39), i8** %785, align 8
  %786 = call i64 @h11804894491772278134(i64 595012187)
  %787 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %786
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub9), i8** %787, align 8
  %788 = call i64 @h11804894491772278134(i64 595012166)
  %789 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %788
  store i8* blockaddress(@"9941920946239825184", %"64"), i8** %789, align 8
  %790 = call i64 @h11804894491772278134(i64 595012142)
  %791 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %790
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot8), i8** %791, align 8
  %792 = call i64 @h11804894491772278134(i64 595012200)
  %793 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %792
  store i8* blockaddress(@"9941920946239825184", %codeRepl90), i8** %793, align 8
  %794 = call i64 @h11804894491772278134(i64 595012218)
  %795 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %794
  store i8* blockaddress(@"9941920946239825184", %"33"), i8** %795, align 8
  %796 = sext i32 %92 to i64
  %797 = or i64 %796, 8311891431146336104
  %798 = xor i64 %796, -1
  %799 = and i64 8311891431146336104, %798
  %800 = add i64 %799, %796
  %801 = and i64 %53, 8141700326148910589
  %802 = or i64 -8141700326148910590, %53
  %803 = sub i64 %802, -8141700326148910590
  %804 = xor i64 %797, %800
  %805 = xor i64 %804, %801
  %806 = xor i64 %805, -131399190526338719
  %807 = xor i64 %806, %803
  %808 = or i64 %11, -1952763140168971788
  %809 = xor i64 %11, -1
  %810 = and i64 %809, -3787410446409470267
  %811 = and i64 %11, 3787410446409470266
  %812 = or i64 %810, %811
  %813 = xor i64 3428943588726695729, %812
  %814 = xor i64 %11, -1
  %815 = or i64 1952763140168971787, %814
  %816 = xor i64 %815, -1
  %817 = and i64 %816, -1
  %818 = or i64 %813, %817
  %819 = sext i32 %171 to i64
  %820 = or i64 %819, 8652429700330685766
  %821 = and i64 8652429700330685766, %819
  %822 = xor i64 8652429700330685766, %819
  %823 = or i64 %821, %822
  %824 = xor i64 %823, -4435795940612155129
  %825 = xor i64 %824, %820
  %826 = xor i64 %825, %808
  %827 = xor i64 %826, %818
  %828 = mul i64 %807, %827
  %829 = call i64 @h11804894491772278134(i64 %828)
  %830 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %829
  store i8* blockaddress(@"9941920946239825184", %.exitStub7), i8** %830, align 8
  %831 = call i64 @h11804894491772278134(i64 595012110)
  %832 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %831
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot51), i8** %832, align 8
  %833 = sext i32 %49 to i64
  %834 = add i64 %833, -4793136344431340
  %835 = and i64 -4793136344431340, %833
  %836 = or i64 -4793136344431340, %833
  %837 = add i64 %835, %836
  %838 = and i64 %97, 1269950974851329614
  %839 = or i64 -1269950974851329615, %97
  %840 = sub i64 %839, -1269950974851329615
  %841 = xor i64 %840, %834
  %842 = xor i64 %841, -8632941408056039449
  %843 = xor i64 %842, %838
  %844 = xor i64 %843, %837
  %845 = sext i32 %59 to i64
  %846 = and i64 %845, -8751853100585893552
  %847 = xor i64 %845, -1
  %848 = or i64 8751853100585893551, %847
  %849 = xor i64 %848, -1
  %850 = and i64 %849, -1
  %851 = sext i32 %0 to i64
  %852 = and i64 %851, 1290214608667275275
  %853 = or i64 -1290214608667275276, %851
  %854 = sub i64 %853, -1290214608667275276
  %855 = and i64 %71, 3619379538581252063
  %856 = xor i64 %71, -1
  %857 = xor i64 3619379538581252063, %856
  %858 = and i64 %857, 3619379538581252063
  %859 = xor i64 %855, %850
  %860 = xor i64 %859, %852
  %861 = xor i64 %860, %854
  %862 = xor i64 %861, %846
  %863 = xor i64 %862, %858
  %864 = xor i64 %863, 2200780671572113218
  %865 = mul i64 %844, %864
  %866 = call i64 @h11804894491772278134(i64 %865)
  %867 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %866
  store i8* blockaddress(@"9941920946239825184", %"59"), i8** %867, align 8
  %868 = call i64 @h11804894491772278134(i64 595012261)
  %869 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %868
  store i8* blockaddress(@"9941920946239825184", %"114"), i8** %869, align 8
  %870 = sext i32 %50 to i64
  %871 = add i64 %870, -8035765952025092718
  %872 = add i64 6479024335515983114, %870
  %873 = sub i64 %872, -3931953786168475784
  %874 = and i64 %101, -1452820042627965110
  %875 = xor i64 %101, -1
  %876 = xor i64 -1452820042627965110, %875
  %877 = and i64 %876, -1452820042627965110
  %878 = add i64 %77, -4494158539301981428
  %879 = and i64 -4494158539301981428, %77
  %880 = or i64 -4494158539301981428, %77
  %881 = add i64 %879, %880
  %882 = xor i64 %871, %877
  %883 = xor i64 %882, %873
  %884 = xor i64 %883, %874
  %885 = xor i64 %884, -870227415312059263
  %886 = xor i64 %885, %878
  %887 = xor i64 %886, %881
  %888 = add i64 %76, -1260961428192295311
  %889 = sub i64 0, %76
  %890 = sub i64 -1260961428192295311, %889
  %891 = sext i32 %171 to i64
  %892 = or i64 %891, 3582404294644619503
  %893 = xor i64 %891, -1
  %894 = and i64 3582404294644619503, %893
  %895 = add i64 %894, %891
  %896 = sext i32 %170 to i64
  %897 = and i64 %896, -6506061039481329990
  %898 = xor i64 %896, -1
  %899 = xor i64 -6506061039481329990, %898
  %900 = and i64 %899, -6506061039481329990
  %901 = xor i64 %895, %900
  %902 = xor i64 %901, %890
  %903 = xor i64 %902, %897
  %904 = xor i64 %903, %892
  %905 = xor i64 %904, 6024053525968439332
  %906 = xor i64 %905, %888
  %907 = mul i64 %887, %906
  %908 = call i64 @h11804894491772278134(i64 %907)
  %909 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %908
  store i8* blockaddress(@"9941920946239825184", %.exitStub3.exitStub), i8** %909, align 8
  %910 = call i64 @h11804894491772278134(i64 595012152)
  %911 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %910
  store i8* blockaddress(@"9941920946239825184", %"40"), i8** %911, align 8
  %912 = call i64 @h11804894491772278134(i64 595012145)
  %913 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %912
  store i8* blockaddress(@"9941920946239825184", %.exitStub26), i8** %913, align 8
  %914 = call i64 @h11804894491772278134(i64 595012191)
  %915 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %914
  store i8* blockaddress(@"9941920946239825184", %NodeBlock57), i8** %915, align 8
  %916 = call i64 @h11804894491772278134(i64 595012276)
  %917 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %916
  store i8* blockaddress(@"9941920946239825184", %.loopexit.exitStub.exitStub), i8** %917, align 8
  %918 = call i64 @h11804894491772278134(i64 595012151)
  %919 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %918
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub3), i8** %919, align 8
  %920 = call i64 @h11804894491772278134(i64 595012208)
  %921 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %920
  store i8* blockaddress(@"9941920946239825184", %NodeBlock29), i8** %921, align 8
  %922 = call i64 @h11804894491772278134(i64 595012275)
  %923 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %922
  store i8* blockaddress(@"9941920946239825184", %"55"), i8** %923, align 8
  %924 = call i64 @h11804894491772278134(i64 595012281)
  %925 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %924
  store i8* blockaddress(@"9941920946239825184", %"93"), i8** %925, align 8
  %926 = sext i32 %171 to i64
  %927 = and i64 %926, -7886560377085316746
  %928 = xor i64 %926, -1
  %929 = xor i64 -7886560377085316746, %928
  %930 = and i64 %929, -7886560377085316746
  %931 = sext i32 %50 to i64
  %932 = and i64 %931, 5637731417765835106
  %933 = xor i64 %931, -1
  %934 = xor i64 5637731417765835106, %933
  %935 = and i64 %934, 5637731417765835106
  %936 = xor i64 %930, %932
  %937 = xor i64 %936, %927
  %938 = xor i64 %937, %935
  %939 = xor i64 %938, 1763784485668132445
  %940 = and i64 %53, -2132469528891957349
  %941 = or i64 2132469528891957348, %53
  %942 = sub i64 %941, 2132469528891957348
  %943 = sext i32 %72 to i64
  %944 = and i64 %943, -6456337127640806169
  %945 = or i64 6456337127640806168, %943
  %946 = sub i64 %945, 6456337127640806168
  %947 = add i64 %69, -4804456884332384731
  %948 = add i64 -1750173480682343466, %69
  %949 = add i64 %948, -3054283403650041265
  %950 = xor i64 %940, %944
  %951 = xor i64 %950, %946
  %952 = xor i64 %951, %942
  %953 = xor i64 %952, 7792709218717368568
  %954 = xor i64 %953, %947
  %955 = xor i64 %954, %949
  %956 = mul i64 %939, %955
  %957 = call i64 @h11804894491772278134(i64 %956)
  %958 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %957
  store i8* blockaddress(@"9941920946239825184", %NodeBlock11), i8** %958, align 8
  %959 = and i64 %101, 4754329612461997725
  %960 = xor i64 %101, -1
  %961 = xor i64 4754329612461997725, %960
  %962 = and i64 %961, 4754329612461997725
  %963 = sext i32 %170 to i64
  %964 = and i64 %963, 8257240356912530522
  %965 = xor i64 %963, -1
  %966 = xor i64 8257240356912530522, %965
  %967 = and i64 %966, 8257240356912530522
  %968 = sext i32 %60 to i64
  %969 = add i64 %968, 8527184299005598942
  %970 = sub i64 0, %968
  %971 = sub i64 8527184299005598942, %970
  %972 = xor i64 %969, %964
  %973 = xor i64 %972, %971
  %974 = xor i64 %973, %959
  %975 = xor i64 %974, 215137674540122625
  %976 = xor i64 %975, %967
  %977 = xor i64 %976, %962
  %978 = add i64 %76, 112468564871846524
  %979 = and i64 112468564871846524, %76
  %980 = or i64 112468564871846524, %76
  %981 = add i64 %979, %980
  %982 = and i64 %97, 3827633583345739186
  %983 = or i64 -3827633583345739187, %97
  %984 = sub i64 %983, -3827633583345739187
  %985 = xor i64 4984906787120421959, %984
  %986 = xor i64 %985, %981
  %987 = xor i64 %986, %982
  %988 = xor i64 %987, %978
  %989 = mul i64 %977, %988
  %990 = call i64 @h11804894491772278134(i64 %989)
  %991 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %990
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot2), i8** %991, align 8
  %992 = call i64 @h11804894491772278134(i64 595012235)
  %993 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %992
  store i8* blockaddress(@"9941920946239825184", %"53"), i8** %993, align 8
  %994 = call i64 @h11804894491772278134(i64 595012271)
  %995 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %994
  store i8* blockaddress(@"9941920946239825184", %"48"), i8** %995, align 8
  %996 = call i64 @h11804894491772278134(i64 595012168)
  %997 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %996
  store i8* blockaddress(@"9941920946239825184", %"52"), i8** %997, align 8
  %998 = call i64 @h11804894491772278134(i64 595012188)
  %999 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %998
  store i8* blockaddress(@"9941920946239825184", %.exitStub54), i8** %999, align 8
  %1000 = or i64 %11, 7023653505017792925
  %1001 = xor i64 %11, -1
  %1002 = and i64 %1001, 8056338708823990532
  %1003 = and i64 %11, -8056338708823990533
  %1004 = or i64 %1002, %1003
  %1005 = xor i64 1059712577227827353, %1004
  %1006 = xor i64 %11, -1
  %1007 = or i64 -7023653505017792926, %1006
  %1008 = xor i64 %1007, -1
  %1009 = and i64 %1008, -1
  %1010 = or i64 %1005, %1009
  %1011 = add i64 %91, 6172287735602346228
  %1012 = add i64 -3092875141144930684, %91
  %1013 = add i64 %1012, -9181581196962274704
  %1014 = xor i64 %1013, %1011
  %1015 = xor i64 %1014, 3286233516175254695
  %1016 = xor i64 %1015, %1010
  %1017 = xor i64 %1016, %1000
  %1018 = sext i32 %50 to i64
  %1019 = and i64 %1018, 6802889871348708272
  %1020 = or i64 -6802889871348708273, %1018
  %1021 = sub i64 %1020, -6802889871348708273
  %1022 = or i64 %91, 4103931247680353996
  %1023 = xor i64 %91, -1
  %1024 = and i64 %1023, -2987941926979254506
  %1025 = and i64 %91, 2987941926979254505
  %1026 = or i64 %1024, %1025
  %1027 = xor i64 -1261952255482187302, %1026
  %1028 = xor i64 %91, -1
  %1029 = or i64 -4103931247680353997, %1028
  %1030 = xor i64 %1029, -1
  %1031 = and i64 %1030, -1
  %1032 = or i64 %1027, %1031
  %1033 = xor i64 %1019, %1021
  %1034 = xor i64 %1033, %1022
  %1035 = xor i64 %1034, %1032
  %1036 = xor i64 %1035, -6459911896123435434
  %1037 = mul i64 %1017, %1036
  %1038 = call i64 @h11804894491772278134(i64 %1037)
  %1039 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1038
  store i8* blockaddress(@"9941920946239825184", %codeRepl124), i8** %1039, align 8
  %1040 = and i64 %77, 2776605363374413655
  %1041 = xor i64 %77, -1
  %1042 = or i64 -2776605363374413656, %1041
  %1043 = xor i64 %1042, -1
  %1044 = and i64 %1043, -1
  %1045 = and i64 %69, 8610670511048574
  %1046 = xor i64 %69, -1
  %1047 = or i64 -8610670511048575, %1046
  %1048 = xor i64 %1047, -1
  %1049 = and i64 %1048, -1
  %1050 = xor i64 %1045, %1040
  %1051 = xor i64 %1050, 1413372361311377009
  %1052 = xor i64 %1051, %1044
  %1053 = xor i64 %1052, %1049
  %1054 = or i64 %11, 3615884516060518043
  %1055 = and i64 3615884516060518043, %11
  %1056 = xor i64 3615884516060518043, %11
  %1057 = or i64 %1055, %1056
  %1058 = and i64 %101, 8692094348937368651
  %1059 = xor i64 %101, -1
  %1060 = xor i64 8692094348937368651, %1059
  %1061 = and i64 %1060, 8692094348937368651
  %1062 = add i64 %77, -5947616411463072537
  %1063 = xor i64 -5947616411463072537, %77
  %1064 = and i64 -5947616411463072537, %77
  %1065 = mul i64 2, %1064
  %1066 = add i64 %1063, %1065
  %1067 = xor i64 %1066, %1062
  %1068 = xor i64 %1067, %1061
  %1069 = xor i64 %1068, %1054
  %1070 = xor i64 %1069, %1057
  %1071 = xor i64 %1070, %1058
  %1072 = xor i64 %1071, -685276792250768301
  %1073 = mul i64 %1053, %1072
  %1074 = call i64 @h11804894491772278134(i64 %1073)
  %1075 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1074
  store i8* blockaddress(@"9941920946239825184", %"77"), i8** %1075, align 8
  %1076 = call i64 @h11804894491772278134(i64 595012223)
  %1077 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1076
  store i8* blockaddress(@"9941920946239825184", %.exitStub1), i8** %1077, align 8
  %1078 = sext i32 %170 to i64
  %1079 = or i64 %1078, 8653725574191447457
  %1080 = xor i64 %1078, -1
  %1081 = and i64 %1080, -2289465690346608113
  %1082 = and i64 %1078, 2289465690346608112
  %1083 = or i64 %1081, %1082
  %1084 = xor i64 -7484390378786334802, %1083
  %1085 = xor i64 %1078, -1
  %1086 = or i64 -8653725574191447458, %1085
  %1087 = xor i64 %1086, -1
  %1088 = and i64 %1087, -1
  %1089 = or i64 %1084, %1088
  %1090 = add i64 %101, 631845565408179041
  %1091 = sub i64 0, %101
  %1092 = sub i64 631845565408179041, %1091
  %1093 = add i64 %96, 5959866482166714612
  %1094 = sub i64 0, %96
  %1095 = sub i64 5959866482166714612, %1094
  %1096 = xor i64 %1093, %1090
  %1097 = xor i64 %1096, 2175014234157633223
  %1098 = xor i64 %1097, %1089
  %1099 = xor i64 %1098, %1092
  %1100 = xor i64 %1099, %1095
  %1101 = xor i64 %1100, %1079
  %1102 = or i64 %53, 2966175961378335112
  %1103 = xor i64 %53, -1
  %1104 = and i64 %1103, 3811269037936290064
  %1105 = and i64 %53, -3811269037936290065
  %1106 = or i64 %1104, %1105
  %1107 = xor i64 2147550363788574872, %1106
  %1108 = xor i64 %53, -1
  %1109 = or i64 -2966175961378335113, %1108
  %1110 = xor i64 %1109, -1
  %1111 = and i64 %1110, -1
  %1112 = or i64 %1107, %1111
  %1113 = or i64 %76, -5382315961269563285
  %1114 = xor i64 %76, -1
  %1115 = and i64 %1114, 7187914602581712487
  %1116 = and i64 %76, -7187914602581712488
  %1117 = or i64 %1115, %1116
  %1118 = xor i64 -2986249284121981428, %1117
  %1119 = xor i64 %76, -1
  %1120 = or i64 5382315961269563284, %1119
  %1121 = xor i64 %1120, -1
  %1122 = and i64 %1121, -1
  %1123 = or i64 %1118, %1122
  %1124 = xor i64 7338961530513384659, %1112
  %1125 = xor i64 %1124, %1113
  %1126 = xor i64 %1125, %1123
  %1127 = xor i64 %1126, %1102
  %1128 = mul i64 %1101, %1127
  %1129 = call i64 @h11804894491772278134(i64 %1128)
  %1130 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1129
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot34), i8** %1130, align 8
  %1131 = call i64 @h11804894491772278134(i64 595012198)
  %1132 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1131
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub), i8** %1132, align 8
  %1133 = call i64 @h11804894491772278134(i64 595012164)
  %1134 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1133
  store i8* blockaddress(@"9941920946239825184", %"92"), i8** %1134, align 8
  %1135 = call i64 @h11804894491772278134(i64 595012210)
  %1136 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1135
  store i8* blockaddress(@"9941920946239825184", %.exitStub21), i8** %1136, align 8
  %1137 = call i64 @h11804894491772278134(i64 595012141)
  %1138 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1137
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot1), i8** %1138, align 8
  %1139 = call i64 @h11804894491772278134(i64 595012148)
  %1140 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1139
  store i8* blockaddress(@"9941920946239825184", %"136"), i8** %1140, align 8
  %1141 = call i64 @h11804894491772278134(i64 595012264)
  %1142 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1141
  store i8* blockaddress(@"9941920946239825184", %"46"), i8** %1142, align 8
  %1143 = call i64 @h11804894491772278134(i64 595012165)
  %1144 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1143
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot4), i8** %1144, align 8
  %1145 = or i64 %53, -4349456538518198240
  %1146 = and i64 -4349456538518198240, %53
  %1147 = xor i64 -4349456538518198240, %53
  %1148 = or i64 %1146, %1147
  %1149 = or i64 %77, -280188816694605624
  %1150 = xor i64 %77, -1
  %1151 = and i64 -280188816694605624, %1150
  %1152 = add i64 %1151, %77
  %1153 = or i64 %69, -6286171592984776640
  %1154 = and i64 -6286171592984776640, %69
  %1155 = xor i64 -6286171592984776640, %69
  %1156 = or i64 %1154, %1155
  %1157 = xor i64 %1156, %1153
  %1158 = xor i64 %1157, %1148
  %1159 = xor i64 %1158, %1149
  %1160 = xor i64 %1159, -2888190360625962747
  %1161 = xor i64 %1160, %1145
  %1162 = xor i64 %1161, %1152
  %1163 = sext i32 %50 to i64
  %1164 = or i64 %1163, 2596342471187843724
  %1165 = and i64 2596342471187843724, %1163
  %1166 = xor i64 2596342471187843724, %1163
  %1167 = or i64 %1165, %1166
  %1168 = or i64 %53, -9222119459037270144
  %1169 = and i64 -9222119459037270144, %53
  %1170 = xor i64 -9222119459037270144, %53
  %1171 = or i64 %1169, %1170
  %1172 = sext i32 %59 to i64
  %1173 = add i64 %1172, 9158481176492140601
  %1174 = sub i64 0, %1172
  %1175 = sub i64 9158481176492140601, %1174
  %1176 = xor i64 %1167, %1175
  %1177 = xor i64 %1176, %1164
  %1178 = xor i64 %1177, %1173
  %1179 = xor i64 %1178, %1168
  %1180 = xor i64 %1179, -684241874164294312
  %1181 = xor i64 %1180, %1171
  %1182 = mul i64 %1162, %1181
  %1183 = call i64 @h11804894491772278134(i64 %1182)
  %1184 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1183
  store i8* blockaddress(@"9941920946239825184", %codeRepl), i8** %1184, align 8
  %1185 = call i64 @h11804894491772278134(i64 595012189)
  %1186 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1185
  store i8* blockaddress(@"9941920946239825184", %.exitStub), i8** %1186, align 8
  %1187 = sext i32 %59 to i64
  %1188 = or i64 %1187, -5862689382150935123
  %1189 = xor i64 %1187, -1
  %1190 = and i64 -5862689382150935123, %1189
  %1191 = add i64 %1190, %1187
  %1192 = or i64 %95, 3060932711000538868
  %1193 = xor i64 %95, -1
  %1194 = and i64 %1193, -3760695314513928012
  %1195 = and i64 %95, 3760695314513928011
  %1196 = or i64 %1194, %1195
  %1197 = xor i64 -2182612373999411648, %1196
  %1198 = xor i64 %95, -1
  %1199 = or i64 -3060932711000538869, %1198
  %1200 = xor i64 %1199, -1
  %1201 = and i64 %1200, -1
  %1202 = or i64 %1197, %1201
  %1203 = or i64 %95, -2246264644996764937
  %1204 = and i64 -2246264644996764937, %95
  %1205 = xor i64 -2246264644996764937, %95
  %1206 = or i64 %1204, %1205
  %1207 = xor i64 %1206, %1191
  %1208 = xor i64 %1207, %1188
  %1209 = xor i64 %1208, %1192
  %1210 = xor i64 %1209, -5265724296811992447
  %1211 = xor i64 %1210, %1203
  %1212 = xor i64 %1211, %1202
  %1213 = sext i32 %60 to i64
  %1214 = add i64 %1213, 6729852141201595065
  %1215 = sub i64 0, %1213
  %1216 = add i64 -6729852141201595065, %1215
  %1217 = sub i64 0, %1216
  %1218 = sext i32 %0 to i64
  %1219 = add i64 %1218, 4490496034451325434
  %1220 = and i64 4490496034451325434, %1218
  %1221 = or i64 4490496034451325434, %1218
  %1222 = add i64 %1220, %1221
  %1223 = xor i64 %1222, %1214
  %1224 = xor i64 %1223, %1217
  %1225 = xor i64 %1224, %1219
  %1226 = xor i64 %1225, 7584401778976822134
  %1227 = mul i64 %1212, %1226
  %1228 = call i64 @h11804894491772278134(i64 %1227)
  %1229 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1228
  store i8* blockaddress(@"9941920946239825184", %LeafBlock), i8** %1229, align 8
  %1230 = call i64 @h11804894491772278134(i64 595012217)
  %1231 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1230
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot), i8** %1231, align 8
  %1232 = call i64 @h11804894491772278134(i64 595012255)
  %1233 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1232
  store i8* blockaddress(@"9941920946239825184", %.exitStub1.exitStub), i8** %1233, align 8
  %1234 = call i64 @h11804894491772278134(i64 595012104)
  %1235 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1234
  store i8* blockaddress(@"9941920946239825184", %"39"), i8** %1235, align 8
  %1236 = call i64 @h11804894491772278134(i64 595012202)
  %1237 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1236
  store i8* blockaddress(@"9941920946239825184", %"73"), i8** %1237, align 8
  %1238 = call i64 @h11804894491772278134(i64 595012121)
  %1239 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1238
  store i8* blockaddress(@"9941920946239825184", %"37"), i8** %1239, align 8
  %1240 = call i64 @h11804894491772278134(i64 595012205)
  %1241 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1240
  store i8* blockaddress(@"9941920946239825184", %"146"), i8** %1241, align 8
  %1242 = call i64 @h11804894491772278134(i64 595012125)
  %1243 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1242
  store i8* blockaddress(@"9941920946239825184", %codeRepl48), i8** %1243, align 8
  %1244 = or i64 %77, -6304237312124624829
  %1245 = xor i64 %77, -1
  %1246 = and i64 %1245, 4305280464513446546
  %1247 = and i64 %77, -4305280464513446547
  %1248 = or i64 %1246, %1247
  %1249 = xor i64 -7836909497396440367, %1248
  %1250 = xor i64 %77, -1
  %1251 = or i64 6304237312124624828, %1250
  %1252 = xor i64 %1251, -1
  %1253 = and i64 %1252, -1
  %1254 = or i64 %1249, %1253
  %1255 = sext i32 %49 to i64
  %1256 = and i64 %1255, 5825663043201022272
  %1257 = xor i64 %1255, -1
  %1258 = xor i64 5825663043201022272, %1257
  %1259 = and i64 %1258, 5825663043201022272
  %1260 = xor i64 %1256, %1244
  %1261 = xor i64 %1260, %1259
  %1262 = xor i64 %1261, %1254
  %1263 = xor i64 %1262, -595844354624773519
  %1264 = or i64 %11, -2441827674554621007
  %1265 = xor i64 %11, -1
  %1266 = and i64 %1265, 7007525738150933092
  %1267 = and i64 %11, -7007525738150933093
  %1268 = or i64 %1266, %1267
  %1269 = xor i64 -4673793981965889067, %1268
  %1270 = xor i64 %11, -1
  %1271 = or i64 2441827674554621006, %1270
  %1272 = xor i64 %1271, -1
  %1273 = and i64 %1272, -1
  %1274 = or i64 %1269, %1273
  %1275 = sext i32 %72 to i64
  %1276 = and i64 %1275, 4049008409149577051
  %1277 = or i64 -4049008409149577052, %1275
  %1278 = sub i64 %1277, -4049008409149577052
  %1279 = xor i64 %1274, %1276
  %1280 = xor i64 %1279, %1264
  %1281 = xor i64 %1280, %1278
  %1282 = xor i64 %1281, 2971448714262996403
  %1283 = mul i64 %1263, %1282
  %1284 = call i64 @h11804894491772278134(i64 %1283)
  %1285 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1284
  store i8* blockaddress(@"9941920946239825184", %NodeBlock33), i8** %1285, align 8
  %1286 = call i64 @h11804894491772278134(i64 595012181)
  %1287 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1286
  store i8* blockaddress(@"9941920946239825184", %NodeBlock), i8** %1287, align 8
  %1288 = call i64 @h11804894491772278134(i64 595012268)
  %1289 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1288
  store i8* blockaddress(@"9941920946239825184", %"94"), i8** %1289, align 8
  %1290 = call i64 @h11804894491772278134(i64 595012203)
  %1291 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1290
  store i8* blockaddress(@"9941920946239825184", %"106"), i8** %1291, align 8
  %1292 = call i64 @h11804894491772278134(i64 595012105)
  %1293 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1292
  store i8* blockaddress(@"9941920946239825184", %NodeBlock3), i8** %1293, align 8
  %1294 = call i64 @h11804894491772278134(i64 595012262)
  %1295 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1294
  store i8* blockaddress(@"9941920946239825184", %NodeBlock5), i8** %1295, align 8
  %1296 = call i64 @h11804894491772278134(i64 595012130)
  %1297 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1296
  store i8* blockaddress(@"9941920946239825184", %codeRepl12), i8** %1297, align 8
  %1298 = call i64 @h11804894491772278134(i64 595012170)
  %1299 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1298
  store i8* blockaddress(@"9941920946239825184", %NodeBlock27), i8** %1299, align 8
  %1300 = call i64 @h11804894491772278134(i64 595012107)
  %1301 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1300
  store i8* blockaddress(@"9941920946239825184", %NodeBlock7), i8** %1301, align 8
  %1302 = call i64 @h11804894491772278134(i64 595012230)
  %1303 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1302
  store i8* blockaddress(@"9941920946239825184", %.exitStub2), i8** %1303, align 8
  %1304 = or i64 %76, -1537030914793667100
  %1305 = xor i64 %76, -1
  %1306 = and i64 %1305, -8190425794852233043
  %1307 = and i64 %76, 8190425794852233042
  %1308 = or i64 %1306, %1307
  %1309 = xor i64 7277427378401109321, %1308
  %1310 = xor i64 %76, -1
  %1311 = or i64 1537030914793667099, %1310
  %1312 = xor i64 %1311, -1
  %1313 = and i64 %1312, -1
  %1314 = or i64 %1309, %1313
  %1315 = sext i32 %60 to i64
  %1316 = and i64 %1315, -1230664476257690571
  %1317 = xor i64 %1315, -1
  %1318 = or i64 1230664476257690570, %1317
  %1319 = xor i64 %1318, -1
  %1320 = and i64 %1319, -1
  %1321 = xor i64 %1320, %1304
  %1322 = xor i64 %1321, %1316
  %1323 = xor i64 %1322, %1314
  %1324 = xor i64 %1323, -3493283877906782281
  %1325 = and i64 %91, 9115186452918550225
  %1326 = xor i64 %91, -1
  %1327 = or i64 -9115186452918550226, %1326
  %1328 = xor i64 %1327, -1
  %1329 = and i64 %1328, -1
  %1330 = sext i32 %49 to i64
  %1331 = add i64 %1330, -7357356254662373658
  %1332 = xor i64 -7357356254662373658, %1330
  %1333 = and i64 -7357356254662373658, %1330
  %1334 = mul i64 2, %1333
  %1335 = add i64 %1332, %1334
  %1336 = xor i64 672436556514360578, %1331
  %1337 = xor i64 %1336, %1335
  %1338 = xor i64 %1337, %1325
  %1339 = xor i64 %1338, %1329
  %1340 = mul i64 %1324, %1339
  %1341 = call i64 @h11804894491772278134(i64 %1340)
  %1342 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1341
  store i8* blockaddress(@"9941920946239825184", %codeRepl2), i8** %1342, align 8
  %1343 = call i64 @h11804894491772278134(i64 595012155)
  %1344 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1343
  store i8* blockaddress(@"9941920946239825184", %NodeBlock19), i8** %1344, align 8
  %1345 = or i64 %91, -6325285395274312430
  %1346 = xor i64 %91, -1
  %1347 = and i64 %1346, -7269372046105153026
  %1348 = and i64 %91, 7269372046105153025
  %1349 = or i64 %1347, %1348
  %1350 = xor i64 3685654036390487276, %1349
  %1351 = xor i64 %91, -1
  %1352 = or i64 6325285395274312429, %1351
  %1353 = xor i64 %1352, -1
  %1354 = and i64 %1353, -1
  %1355 = or i64 %1350, %1354
  %1356 = sext i32 %59 to i64
  %1357 = and i64 %1356, -5436684974047881860
  %1358 = xor i64 %1356, -1
  %1359 = xor i64 -5436684974047881860, %1358
  %1360 = and i64 %1359, -5436684974047881860
  %1361 = or i64 %11, -6084457671418315938
  %1362 = and i64 -6084457671418315938, %11
  %1363 = xor i64 -6084457671418315938, %11
  %1364 = or i64 %1362, %1363
  %1365 = xor i64 %1360, %1364
  %1366 = xor i64 %1365, %1361
  %1367 = xor i64 %1366, %1355
  %1368 = xor i64 %1367, %1345
  %1369 = xor i64 %1368, -9177569120771038849
  %1370 = xor i64 %1369, %1357
  %1371 = add i64 %96, 3146296088303659630
  %1372 = and i64 3146296088303659630, %96
  %1373 = or i64 3146296088303659630, %96
  %1374 = add i64 %1372, %1373
  %1375 = or i64 %77, 4819803020625139321
  %1376 = xor i64 %77, -1
  %1377 = and i64 %1376, -2960013387235762135
  %1378 = and i64 %77, 2960013387235762134
  %1379 = or i64 %1377, %1378
  %1380 = xor i64 -7779815737826331056, %1379
  %1381 = xor i64 %77, -1
  %1382 = or i64 -4819803020625139322, %1381
  %1383 = xor i64 %1382, -1
  %1384 = and i64 %1383, -1
  %1385 = or i64 %1380, %1384
  %1386 = add i64 %95, 5318949141381537951
  %1387 = sub i64 0, %95
  %1388 = sub i64 5318949141381537951, %1387
  %1389 = xor i64 %1388, -7239400073390435928
  %1390 = xor i64 %1389, %1386
  %1391 = xor i64 %1390, %1374
  %1392 = xor i64 %1391, %1375
  %1393 = xor i64 %1392, %1371
  %1394 = xor i64 %1393, %1385
  %1395 = mul i64 %1370, %1394
  %1396 = call i64 @h11804894491772278134(i64 %1395)
  %1397 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1396
  store i8* blockaddress(@"9941920946239825184", %.exitStub26.exitStub), i8** %1397, align 8
  %1398 = call i64 @h11804894491772278134(i64 595012239)
  %1399 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1398
  store i8* blockaddress(@"9941920946239825184", %NodeBlock9), i8** %1399, align 8
  %1400 = call i64 @h11804894491772278134(i64 595012109)
  %1401 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1400
  store i8* blockaddress(@"9941920946239825184", %.exitStub715), i8** %1401, align 8
  %1402 = call i64 @h11804894491772278134(i64 595012248)
  %1403 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1402
  store i8* blockaddress(@"9941920946239825184", %"68"), i8** %1403, align 8
  %1404 = call i64 @h11804894491772278134(i64 595012126)
  %1405 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1404
  store i8* blockaddress(@"9941920946239825184", %NodeBlock17), i8** %1405, align 8
  %1406 = call i64 @h11804894491772278134(i64 595012274)
  %1407 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1406
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub35), i8** %1407, align 8
  %1408 = call i64 @h11804894491772278134(i64 595012213)
  %1409 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1408
  store i8* blockaddress(@"9941920946239825184", %"36"), i8** %1409, align 8
  %1410 = call i64 @h11804894491772278134(i64 595012224)
  %1411 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1410
  store i8* blockaddress(@"9941920946239825184", %"112"), i8** %1411, align 8
  %1412 = add i64 %53, 8353190522546050958
  %1413 = sub i64 0, %53
  %1414 = add i64 -8353190522546050958, %1413
  %1415 = sub i64 0, %1414
  %1416 = sext i32 %171 to i64
  %1417 = or i64 %1416, -1718041318227345458
  %1418 = and i64 -1718041318227345458, %1416
  %1419 = xor i64 -1718041318227345458, %1416
  %1420 = or i64 %1418, %1419
  %1421 = xor i64 %1417, %1420
  %1422 = xor i64 %1421, 2795581519585783293
  %1423 = xor i64 %1422, %1415
  %1424 = xor i64 %1423, %1412
  %1425 = or i64 %101, 6984502583867556714
  %1426 = xor i64 %101, -1
  %1427 = and i64 %1426, -8226677695531961960
  %1428 = and i64 %101, 8226677695531961959
  %1429 = or i64 %1427, %1428
  %1430 = xor i64 -1353041274415254798, %1429
  %1431 = xor i64 %101, -1
  %1432 = or i64 -6984502583867556715, %1431
  %1433 = xor i64 %1432, -1
  %1434 = and i64 %1433, -1
  %1435 = or i64 %1430, %1434
  %1436 = sext i32 %60 to i64
  %1437 = add i64 %1436, 1968196120990281661
  %1438 = add i64 -6324691214014497938, %1436
  %1439 = sub i64 %1438, -8292887335004779599
  %1440 = and i64 %71, 6036181483836639431
  %1441 = or i64 -6036181483836639432, %71
  %1442 = sub i64 %1441, -6036181483836639432
  %1443 = xor i64 %1439, %1425
  %1444 = xor i64 %1443, %1442
  %1445 = xor i64 %1444, %1437
  %1446 = xor i64 %1445, -2829176150985402051
  %1447 = xor i64 %1446, %1440
  %1448 = xor i64 %1447, %1435
  %1449 = mul i64 %1424, %1448
  %1450 = call i64 @h11804894491772278134(i64 %1449)
  %1451 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1450
  store i8* blockaddress(@"9941920946239825184", %NodeBlock13), i8** %1451, align 8
  %1452 = call i64 @h11804894491772278134(i64 595012234)
  %1453 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1452
  store i8* blockaddress(@"9941920946239825184", %NodeBlock43), i8** %1453, align 8
  %1454 = call i64 @h11804894491772278134(i64 595012185)
  %1455 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1454
  store i8* blockaddress(@"9941920946239825184", %NodeBlock41), i8** %1455, align 8
  %1456 = and i64 %91, -819780117907925315
  %1457 = or i64 819780117907925314, %91
  %1458 = sub i64 %1457, 819780117907925314
  %1459 = add i64 %97, 4633478493751515783
  %1460 = xor i64 4633478493751515783, %97
  %1461 = and i64 4633478493751515783, %97
  %1462 = mul i64 2, %1461
  %1463 = add i64 %1460, %1462
  %1464 = sext i32 %170 to i64
  %1465 = and i64 %1464, -1151395801815569306
  %1466 = xor i64 %1464, -1
  %1467 = or i64 1151395801815569305, %1466
  %1468 = xor i64 %1467, -1
  %1469 = and i64 %1468, -1
  %1470 = xor i64 %1456, %1458
  %1471 = xor i64 %1470, -7234260787070532093
  %1472 = xor i64 %1471, %1463
  %1473 = xor i64 %1472, %1469
  %1474 = xor i64 %1473, %1459
  %1475 = xor i64 %1474, %1465
  %1476 = and i64 %101, -278840936397805616
  %1477 = xor i64 %101, -1
  %1478 = or i64 278840936397805615, %1477
  %1479 = xor i64 %1478, -1
  %1480 = and i64 %1479, -1
  %1481 = sext i32 %72 to i64
  %1482 = or i64 %1481, -6054329083496138914
  %1483 = xor i64 %1481, -1
  %1484 = and i64 -6054329083496138914, %1483
  %1485 = add i64 %1484, %1481
  %1486 = xor i64 %1480, -8556619088482609636
  %1487 = xor i64 %1486, %1485
  %1488 = xor i64 %1487, %1482
  %1489 = xor i64 %1488, %1476
  %1490 = mul i64 %1475, %1489
  %1491 = call i64 @h11804894491772278134(i64 %1490)
  %1492 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1491
  store i8* blockaddress(@"9941920946239825184", %LeafBlock47), i8** %1492, align 8
  %1493 = call i64 @h11804894491772278134(i64 595012195)
  %1494 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1493
  store i8* blockaddress(@"9941920946239825184", %NodeBlock31), i8** %1494, align 8
  %1495 = call i64 @h11804894491772278134(i64 595012115)
  %1496 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1495
  store i8* blockaddress(@"9941920946239825184", %NodeBlock45), i8** %1496, align 8
  %1497 = call i64 @h11804894491772278134(i64 595012106)
  %1498 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1497
  store i8* blockaddress(@"9941920946239825184", %"133"), i8** %1498, align 8
  %1499 = call i64 @h11804894491772278134(i64 595012222)
  %1500 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1499
  store i8* blockaddress(@"9941920946239825184", %"96"), i8** %1500, align 8
  %1501 = call i64 @h11804894491772278134(i64 595012182)
  %1502 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1501
  store i8* blockaddress(@"9941920946239825184", %"124"), i8** %1502, align 8
  %1503 = call i64 @h11804894491772278134(i64 595012266)
  %1504 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1503
  store i8* blockaddress(@"9941920946239825184", %NodeBlock55), i8** %1504, align 8
  %1505 = call i64 @h11804894491772278134(i64 595012216)
  %1506 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1505
  store i8* blockaddress(@"9941920946239825184", %"142"), i8** %1506, align 8
  %1507 = call i64 @h11804894491772278134(i64 595012212)
  %1508 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1507
  store i8* blockaddress(@"9941920946239825184", %"87"), i8** %1508, align 8
  %1509 = call i64 @h11804894491772278134(i64 595012211)
  %1510 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1509
  store i8* blockaddress(@"9941920946239825184", %"35"), i8** %1510, align 8
  %1511 = call i64 @h11804894491772278134(i64 595012117)
  %1512 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1511
  store i8* blockaddress(@"9941920946239825184", %.exitStub14), i8** %1512, align 8
  %1513 = call i64 @h11804894491772278134(i64 595012150)
  %1514 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1513
  store i8* blockaddress(@"9941920946239825184", %"183"), i8** %1514, align 8
  %1515 = call i64 @h11804894491772278134(i64 595012220)
  %1516 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1515
  store i8* blockaddress(@"9941920946239825184", %"34"), i8** %1516, align 8
  %1517 = call i64 @h11804894491772278134(i64 595012135)
  %1518 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1517
  store i8* blockaddress(@"9941920946239825184", %NodeBlock15), i8** %1518, align 8
  %1519 = call i64 @h11804894491772278134(i64 595012209)
  %1520 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1519
  store i8* blockaddress(@"9941920946239825184", %NodeBlock21), i8** %1520, align 8
  %1521 = call i64 @h11804894491772278134(i64 595012252)
  %1522 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1521
  store i8* blockaddress(@"9941920946239825184", %.exitStub133), i8** %1522, align 8
  %1523 = call i64 @h11804894491772278134(i64 595012272)
  %1524 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1523
  store i8* blockaddress(@"9941920946239825184", %BogusBasciBlock), i8** %1524, align 8
  %1525 = call i64 @h11804894491772278134(i64 595012225)
  %1526 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1525
  store i8* blockaddress(@"9941920946239825184", %"174"), i8** %1526, align 8
  %1527 = call i64 @h11804894491772278134(i64 595012282)
  %1528 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1527
  store i8* blockaddress(@"9941920946239825184", %codeRepl1), i8** %1528, align 8
  %1529 = call i64 @h11804894491772278134(i64 595012192)
  %1530 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1529
  store i8* blockaddress(@"9941920946239825184", %codeRepl5), i8** %1530, align 8
  %1531 = call i64 @h11804894491772278134(i64 595012278)
  %1532 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1531
  store i8* blockaddress(@"9941920946239825184", %"38"), i8** %1532, align 8
  %1533 = call i64 @h11804894491772278134(i64 595012179)
  %1534 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1533
  store i8* blockaddress(@"9941920946239825184", %.exitStub5), i8** %1534, align 8
  %1535 = call i64 @h11804894491772278134(i64 595012226)
  %1536 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1535
  store i8* blockaddress(@"9941920946239825184", %"109"), i8** %1536, align 8
  %1537 = call i64 @h11804894491772278134(i64 595012204)
  %1538 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1537
  store i8* blockaddress(@"9941920946239825184", %NodeBlock37), i8** %1538, align 8
  %1539 = call i64 @h11804894491772278134(i64 595012111)
  %1540 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1539
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot45), i8** %1540, align 8
  %1541 = call i64 @h11804894491772278134(i64 595012244)
  %1542 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1541
  store i8* blockaddress(@"9941920946239825184", %"51"), i8** %1542, align 8
  %1543 = call i64 @h11804894491772278134(i64 595012124)
  %1544 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1543
  store i8* blockaddress(@"9941920946239825184", %.exitStub43), i8** %1544, align 8
  %1545 = add i64 %53, 1886890005525222794
  %1546 = sub i64 0, %53
  %1547 = sub i64 1886890005525222794, %1546
  %1548 = sext i32 %50 to i64
  %1549 = and i64 %1548, -9149604877361792026
  %1550 = xor i64 %1548, -1
  %1551 = xor i64 -9149604877361792026, %1550
  %1552 = and i64 %1551, -9149604877361792026
  %1553 = add i64 %11, 6007728175595301445
  %1554 = add i64 -3956529458456538371, %11
  %1555 = sub i64 %1554, 8482486439657711800
  %1556 = xor i64 %1547, %1553
  %1557 = xor i64 %1556, %1555
  %1558 = xor i64 %1557, 3764699615867189119
  %1559 = xor i64 %1558, %1549
  %1560 = xor i64 %1559, %1545
  %1561 = xor i64 %1560, %1552
  %1562 = sext i32 %171 to i64
  %1563 = and i64 %1562, 6133013408570336423
  %1564 = xor i64 %1562, -1
  %1565 = xor i64 6133013408570336423, %1564
  %1566 = and i64 %1565, 6133013408570336423
  %1567 = or i64 %76, 1581489106592461759
  %1568 = and i64 1581489106592461759, %76
  %1569 = xor i64 1581489106592461759, %76
  %1570 = or i64 %1568, %1569
  %1571 = sext i32 %59 to i64
  %1572 = and i64 %1571, -3504473030305837244
  %1573 = or i64 3504473030305837243, %1571
  %1574 = sub i64 %1573, 3504473030305837243
  %1575 = xor i64 %1572, %1567
  %1576 = xor i64 %1575, %1563
  %1577 = xor i64 %1576, 8679624923524625856
  %1578 = xor i64 %1577, %1566
  %1579 = xor i64 %1578, %1570
  %1580 = xor i64 %1579, %1574
  %1581 = mul i64 %1561, %1580
  %1582 = call i64 @h11804894491772278134(i64 %1581)
  %1583 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1582
  store i8* blockaddress(@"9941920946239825184", %NodeBlock51), i8** %1583, align 8
  %1584 = call i64 @h11804894491772278134(i64 595012127)
  %1585 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1584
  store i8* blockaddress(@"9941920946239825184", %.exitStub3.exitStub10), i8** %1585, align 8
  %1586 = call i64 @h11804894491772278134(i64 595012112)
  %1587 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1586
  store i8* blockaddress(@"9941920946239825184", %.split), i8** %1587, align 8
  %1588 = call i64 @h11804894491772278134(i64 595012177)
  %1589 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1588
  store i8* blockaddress(@"9941920946239825184", %"89"), i8** %1589, align 8
  %1590 = and i64 %11, -1782840519855163698
  %1591 = or i64 1782840519855163697, %11
  %1592 = sub i64 %1591, 1782840519855163697
  %1593 = sext i32 %50 to i64
  %1594 = and i64 %1593, -7773280888961373449
  %1595 = xor i64 %1593, -1
  %1596 = xor i64 -7773280888961373449, %1595
  %1597 = and i64 %1596, -7773280888961373449
  %1598 = or i64 %76, -8425525185298472291
  %1599 = xor i64 %76, -1
  %1600 = and i64 %1599, -5821435219293232316
  %1601 = and i64 %76, 5821435219293232315
  %1602 = or i64 %1600, %1601
  %1603 = xor i64 2604381277267771865, %1602
  %1604 = xor i64 %76, -1
  %1605 = or i64 8425525185298472290, %1604
  %1606 = xor i64 %1605, -1
  %1607 = and i64 %1606, -1
  %1608 = or i64 %1603, %1607
  %1609 = xor i64 %1598, %1594
  %1610 = xor i64 %1609, %1608
  %1611 = xor i64 %1610, %1597
  %1612 = xor i64 %1611, 5627804325156200955
  %1613 = xor i64 %1612, %1590
  %1614 = xor i64 %1613, %1592
  %1615 = sext i32 %170 to i64
  %1616 = or i64 %1615, -2356666099432433229
  %1617 = xor i64 %1615, -1
  %1618 = and i64 %1617, 3735776634348084211
  %1619 = and i64 %1615, -3735776634348084212
  %1620 = or i64 %1618, %1619
  %1621 = xor i64 -1399680890353073600, %1620
  %1622 = xor i64 %1615, -1
  %1623 = or i64 2356666099432433228, %1622
  %1624 = xor i64 %1623, -1
  %1625 = and i64 %1624, -1
  %1626 = or i64 %1621, %1625
  %1627 = sext i32 %0 to i64
  %1628 = and i64 %1627, 6739744682926228843
  %1629 = xor i64 %1627, -1
  %1630 = xor i64 6739744682926228843, %1629
  %1631 = and i64 %1630, 6739744682926228843
  %1632 = sext i32 %72 to i64
  %1633 = add i64 %1632, -5196233150427574999
  %1634 = add i64 8868408345245259146, %1632
  %1635 = sub i64 %1634, -4382102578036717471
  %1636 = xor i64 8374784184071328226, %1626
  %1637 = xor i64 %1636, %1631
  %1638 = xor i64 %1637, %1633
  %1639 = xor i64 %1638, %1628
  %1640 = xor i64 %1639, %1616
  %1641 = xor i64 %1640, %1635
  %1642 = mul i64 %1614, %1641
  %1643 = call i64 @h11804894491772278134(i64 %1642)
  %1644 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1643
  store i8* blockaddress(@"9941920946239825184", %"157"), i8** %1644, align 8
  %1645 = call i64 @h11804894491772278134(i64 595012098)
  %1646 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1645
  store i8* blockaddress(@"9941920946239825184", %NodeBlock25), i8** %1646, align 8
  %1647 = call i64 @h11804894491772278134(i64 595012139)
  %1648 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1647
  store i8* blockaddress(@"9941920946239825184", %NodeBlock53), i8** %1648, align 8
  %1649 = call i64 @h11804894491772278134(i64 595012178)
  %1650 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1649
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub50), i8** %1650, align 8
  %1651 = call i64 @h11804894491772278134(i64 595012257)
  %1652 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1651
  store i8* blockaddress(@"9941920946239825184", %.split46), i8** %1652, align 8
  %1653 = call i64 @h11804894491772278134(i64 595012103)
  %1654 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1653
  store i8* blockaddress(@"9941920946239825184", %"161"), i8** %1654, align 8
  %1655 = call i64 @h11804894491772278134(i64 595012128)
  %1656 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1655
  store i8* blockaddress(@"9941920946239825184", %NodeBlock1), i8** %1656, align 8
  %1657 = call i64 @h11804894491772278134(i64 595012108)
  %1658 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1657
  store i8* blockaddress(@"9941920946239825184", %codeRepl27), i8** %1658, align 8
  %1659 = call i64 @h11804894491772278134(i64 595012251)
  %1660 = getelementptr [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %1659
  store i8* blockaddress(@"9941920946239825184", %NodeBlock35), i8** %1660, align 8
  %1661 = add i64 %101, -9027482449756643347
  %1662 = add i64 -1728760021447271256, %101
  %1663 = sub i64 %1662, 7298722428309372091
  %1664 = and i64 %91, 1380383612826193885
  %1665 = xor i64 %91, -1
  %1666 = xor i64 1380383612826193885, %1665
  %1667 = and i64 %1666, 1380383612826193885
  %1668 = xor i64 %1663, 1399771252922100085
  %1669 = xor i64 %1668, %1661
  %1670 = xor i64 %1669, %1667
  %1671 = xor i64 %1670, %1664
  %1672 = or i64 %77, 274530402174788155
  %1673 = xor i64 %77, -1
  %1674 = and i64 %1673, -2942743673605163521
  %1675 = and i64 %77, 2942743673605163520
  %1676 = or i64 %1674, %1675
  %1677 = xor i64 -3105770934086133820, %1676
  %1678 = xor i64 %77, -1
  %1679 = or i64 -274530402174788156, %1678
  %1680 = xor i64 %1679, -1
  %1681 = and i64 %1680, -1
  %1682 = or i64 %1677, %1681
  %1683 = or i64 %97, -4137802448205114935
  %1684 = xor i64 %97, -1
  %1685 = and i64 %1684, -3886423570183667781
  %1686 = and i64 %97, 3886423570183667780
  %1687 = or i64 %1685, %1686
  %1688 = xor i64 901622358492655218, %1687
  %1689 = xor i64 %97, -1
  %1690 = or i64 4137802448205114934, %1689
  %1691 = xor i64 %1690, -1
  %1692 = and i64 %1691, -1
  %1693 = or i64 %1688, %1692
  %1694 = xor i64 %1672, %1693
  %1695 = xor i64 %1694, %1682
  %1696 = xor i64 %1695, 3263096999742349021
  %1697 = xor i64 %1696, %1683
  %1698 = mul i64 %1671, %1697
  %1699 = trunc i64 %1698 to i32
  %.reg2mem995 = alloca i32, i32 %1699, align 4
  %.reg2mem993 = alloca i1, align 1
  %1700 = and i64 %95, -3631425356750819932
  %1701 = or i64 3631425356750819931, %95
  %1702 = sub i64 %1701, 3631425356750819931
  %1703 = or i64 %101, -6508084038054024058
  %1704 = and i64 -6508084038054024058, %101
  %1705 = xor i64 -6508084038054024058, %101
  %1706 = or i64 %1704, %1705
  %1707 = sext i32 %49 to i64
  %1708 = add i64 %1707, -7622016159307992413
  %1709 = xor i64 -7622016159307992413, %1707
  %1710 = and i64 -7622016159307992413, %1707
  %1711 = mul i64 2, %1710
  %1712 = add i64 %1709, %1711
  %1713 = xor i64 %1700, %1706
  %1714 = xor i64 %1713, %1703
  %1715 = xor i64 %1714, 6509492922473226295
  %1716 = xor i64 %1715, %1708
  %1717 = xor i64 %1716, %1702
  %1718 = xor i64 %1717, %1712
  %1719 = or i64 %69, 6453030503859374352
  %1720 = and i64 6453030503859374352, %69
  %1721 = xor i64 6453030503859374352, %69
  %1722 = or i64 %1720, %1721
  %1723 = or i64 %96, -8204627986589782219
  %1724 = and i64 -8204627986589782219, %96
  %1725 = xor i64 -8204627986589782219, %96
  %1726 = or i64 %1724, %1725
  %1727 = xor i64 %1719, %1723
  %1728 = xor i64 %1727, -5376328335201528441
  %1729 = xor i64 %1728, %1726
  %1730 = xor i64 %1729, %1722
  %1731 = mul i64 %1718, %1730
  %1732 = trunc i64 %1731 to i32
  %.reg2mem991 = alloca i32, i32 %1732, align 4
  %.reg2mem989 = alloca i32, align 4
  %1733 = sext i32 %170 to i64
  %1734 = add i64 %1733, 6892435423672443213
  %1735 = xor i64 6892435423672443213, %1733
  %1736 = and i64 6892435423672443213, %1733
  %1737 = mul i64 2, %1736
  %1738 = add i64 %1735, %1737
  %1739 = sext i32 %170 to i64
  %1740 = add i64 %1739, -7906137838593196649
  %1741 = and i64 -7906137838593196649, %1739
  %1742 = or i64 -7906137838593196649, %1739
  %1743 = add i64 %1741, %1742
  %1744 = xor i64 %1743, %1738
  %1745 = xor i64 %1744, -124312665150251747
  %1746 = xor i64 %1745, %1740
  %1747 = xor i64 %1746, %1734
  %1748 = sext i32 %72 to i64
  %1749 = and i64 %1748, -1515792333728024432
  %1750 = xor i64 %1748, -1
  %1751 = xor i64 -1515792333728024432, %1750
  %1752 = and i64 %1751, -1515792333728024432
  %1753 = and i64 %96, -1246221121565617533
  %1754 = xor i64 %96, -1
  %1755 = or i64 1246221121565617532, %1754
  %1756 = xor i64 %1755, -1
  %1757 = and i64 %1756, -1
  %1758 = sext i32 %170 to i64
  %1759 = add i64 %1758, 6543548624056765969
  %1760 = sub i64 0, %1758
  %1761 = sub i64 6543548624056765969, %1760
  %1762 = xor i64 %1759, %1757
  %1763 = xor i64 %1762, %1753
  %1764 = xor i64 %1763, %1752
  %1765 = xor i64 %1764, %1749
  %1766 = xor i64 %1765, %1761
  %1767 = xor i64 %1766, -4613355175336571595
  %1768 = mul i64 %1747, %1767
  %1769 = trunc i64 %1768 to i32
  %.reg2mem987 = alloca i32, i32 %1769, align 4
  %.reg2mem985 = alloca i32, align 4
  %.reg2mem983 = alloca i1, align 1
  %.reg2mem981 = alloca i32, align 4
  %.reg2mem979 = alloca i1, align 1
  %.reg2mem977 = alloca i1, align 1
  %.reg2mem975 = alloca i1, align 1
  %.reg2mem973 = alloca i1, align 1
  %.reg2mem971 = alloca i1, align 1
  %1770 = add i64 %95, 1790827273807621009
  %1771 = add i64 4661358864173173574, %95
  %1772 = add i64 %1771, -2870531590365552565
  %1773 = add i64 %96, 2810189017504058283
  %1774 = sub i64 0, %96
  %1775 = sub i64 2810189017504058283, %1774
  %1776 = xor i64 %1772, -2866669380266317559
  %1777 = xor i64 %1776, %1775
  %1778 = xor i64 %1777, %1770
  %1779 = xor i64 %1778, %1773
  %1780 = sext i32 %50 to i64
  %1781 = or i64 %1780, -9042025573367920996
  %1782 = xor i64 %1780, -1
  %1783 = and i64 %1782, 8802277298885004569
  %1784 = and i64 %1780, -8802277298885004570
  %1785 = or i64 %1783, %1784
  %1786 = xor i64 -530372296575104123, %1785
  %1787 = xor i64 %1780, -1
  %1788 = or i64 9042025573367920995, %1787
  %1789 = xor i64 %1788, -1
  %1790 = and i64 %1789, -1
  %1791 = or i64 %1786, %1790
  %1792 = or i64 %96, 6037158225323436914
  %1793 = xor i64 %96, -1
  %1794 = and i64 %1793, -2787833757929583860
  %1795 = and i64 %96, 2787833757929583859
  %1796 = or i64 %1794, %1795
  %1797 = xor i64 -8464563204700708738, %1796
  %1798 = xor i64 %96, -1
  %1799 = or i64 -6037158225323436915, %1798
  %1800 = xor i64 %1799, -1
  %1801 = and i64 %1800, -1
  %1802 = or i64 %1797, %1801
  %1803 = or i64 %96, -1910255477892854351
  %1804 = xor i64 %96, -1
  %1805 = and i64 -1910255477892854351, %1804
  %1806 = add i64 %1805, %96
  %1807 = xor i64 %1806, %1802
  %1808 = xor i64 %1807, %1791
  %1809 = xor i64 %1808, %1781
  %1810 = xor i64 %1809, %1803
  %1811 = xor i64 %1810, 8876429398314825017
  %1812 = xor i64 %1811, %1792
  %1813 = mul i64 %1779, %1812
  %1814 = trunc i64 %1813 to i32
  %.reg2mem969 = alloca i1, i32 %1814, align 1
  %.reg2mem967 = alloca i32, align 4
  %.ph.reg2mem965 = alloca i32, align 4
  %.reg2mem963 = alloca i1, align 1
  %.reg2mem961 = alloca double, align 8
  %1815 = and i64 %71, -7548450554780072115
  %1816 = xor i64 %71, -1
  %1817 = or i64 7548450554780072114, %1816
  %1818 = xor i64 %1817, -1
  %1819 = and i64 %1818, -1
  %1820 = and i64 %91, 802805791516236902
  %1821 = or i64 -802805791516236903, %91
  %1822 = sub i64 %1821, -802805791516236903
  %1823 = xor i64 %1820, %1822
  %1824 = xor i64 %1823, %1815
  %1825 = xor i64 %1824, -3148295096113981897
  %1826 = xor i64 %1825, %1819
  %1827 = sext i32 %59 to i64
  %1828 = add i64 %1827, 5633578420433709564
  %1829 = add i64 8895593004742952002, %1827
  %1830 = sub i64 %1829, 3262014584309242438
  %1831 = or i64 %53, 6067614582455047360
  %1832 = and i64 6067614582455047360, %53
  %1833 = xor i64 6067614582455047360, %53
  %1834 = or i64 %1832, %1833
  %1835 = xor i64 8111661014648094599, %1828
  %1836 = xor i64 %1835, %1830
  %1837 = xor i64 %1836, %1831
  %1838 = xor i64 %1837, %1834
  %1839 = mul i64 %1826, %1838
  %1840 = trunc i64 %1839 to i32
  %.reg2mem959 = alloca i32, i32 %1840, align 4
  %.reg2mem957 = alloca i1, align 1
  %.reg2mem955 = alloca i32, align 4
  %.reg2mem953 = alloca i1, align 1
  %.reg2mem950 = alloca i1, align 1
  %.reg2mem945 = alloca i1, align 1
  %.reg2mem942 = alloca i64*, align 8
  %.reg2mem939 = alloca i64*, align 8
  %1841 = sext i32 %171 to i64
  %1842 = add i64 %1841, 6751140910618635413
  %1843 = xor i64 6751140910618635413, %1841
  %1844 = and i64 6751140910618635413, %1841
  %1845 = mul i64 2, %1844
  %1846 = add i64 %1843, %1845
  %1847 = add i64 %77, -5750760297252962763
  %1848 = sub i64 0, %77
  %1849 = add i64 5750760297252962763, %1848
  %1850 = sub i64 0, %1849
  %1851 = sext i32 %171 to i64
  %1852 = or i64 %1851, -2150364228383641110
  %1853 = xor i64 %1851, -1
  %1854 = and i64 %1853, -9033106189550030409
  %1855 = and i64 %1851, 9033106189550030408
  %1856 = or i64 %1854, %1855
  %1857 = xor i64 6956841959256260701, %1856
  %1858 = xor i64 %1851, -1
  %1859 = or i64 2150364228383641109, %1858
  %1860 = xor i64 %1859, -1
  %1861 = and i64 %1860, -1
  %1862 = or i64 %1857, %1861
  %1863 = xor i64 %1846, -9164415160186230139
  %1864 = xor i64 %1863, %1862
  %1865 = xor i64 %1864, %1852
  %1866 = xor i64 %1865, %1850
  %1867 = xor i64 %1866, %1842
  %1868 = xor i64 %1867, %1847
  %1869 = sext i32 %72 to i64
  %1870 = or i64 %1869, -4677263153636327343
  %1871 = xor i64 %1869, -1
  %1872 = and i64 %1871, 620659317309150776
  %1873 = and i64 %1869, -620659317309150777
  %1874 = or i64 %1872, %1873
  %1875 = xor i64 -5221356775600269719, %1874
  %1876 = xor i64 %1869, -1
  %1877 = or i64 4677263153636327342, %1876
  %1878 = xor i64 %1877, -1
  %1879 = and i64 %1878, -1
  %1880 = or i64 %1875, %1879
  %1881 = or i64 %97, -9098274497551947858
  %1882 = and i64 -9098274497551947858, %97
  %1883 = xor i64 -9098274497551947858, %97
  %1884 = or i64 %1882, %1883
  %1885 = sext i32 %59 to i64
  %1886 = and i64 %1885, -6374775090397691150
  %1887 = or i64 6374775090397691149, %1885
  %1888 = sub i64 %1887, 6374775090397691149
  %1889 = xor i64 %1880, %1886
  %1890 = xor i64 %1889, 5660115738410499661
  %1891 = xor i64 %1890, %1870
  %1892 = xor i64 %1891, %1884
  %1893 = xor i64 %1892, %1881
  %1894 = xor i64 %1893, %1888
  %1895 = mul i64 %1868, %1894
  %1896 = trunc i64 %1895 to i32
  %.reg2mem937 = alloca i1, i32 %1896, align 1
  %.reg2mem935 = alloca i32, align 4
  %.reg2mem933 = alloca i32, align 4
  %.reg2mem931 = alloca i32, align 4
  %.reg2mem929 = alloca i32, align 4
  %.reg2mem926 = alloca i1, align 1
  %.reg2mem920 = alloca i32, align 4
  %.reg2mem918 = alloca i1, align 1
  %.reg2mem916 = alloca i1, align 1
  %.reg2mem914 = alloca i1, align 1
  %.reg2mem912 = alloca i1, align 1
  %.reg2mem910 = alloca i1, align 1
  %.reg2mem908 = alloca i1, align 1
  %.reg2mem906 = alloca i32, align 4
  %.reg2mem903 = alloca i1, align 1
  %.reg2mem899 = alloca i32, align 4
  %.reg2mem896 = alloca i32, align 4
  %.reg2mem893 = alloca i32, align 4
  %.reg2mem889 = alloca i1, align 1
  %.ph.reg2mem = alloca i32, align 4
  %.reg2mem885 = alloca i1, align 1
  %.reg2mem882 = alloca i1, align 1
  %.reg2mem880 = alloca i1, align 1
  %.reload13.reg2mem = alloca i32, align 4
  %.reload12.reg2mem = alloca i32, align 4
  %.reload11.reg2mem = alloca i32, align 4
  %.reload10.reg2mem = alloca double, align 8
  %1897 = or i64 %77, -806933857794767449
  %1898 = and i64 -806933857794767449, %77
  %1899 = xor i64 -806933857794767449, %77
  %1900 = or i64 %1898, %1899
  %1901 = sext i32 %60 to i64
  %1902 = add i64 %1901, -5307232842621150394
  %1903 = sub i64 0, %1901
  %1904 = sub i64 -5307232842621150394, %1903
  %1905 = xor i64 %1897, %1904
  %1906 = xor i64 %1905, -8628336657481491427
  %1907 = xor i64 %1906, %1900
  %1908 = xor i64 %1907, %1902
  %1909 = and i64 %69, -5026774257681344970
  %1910 = or i64 5026774257681344969, %69
  %1911 = sub i64 %1910, 5026774257681344969
  %1912 = or i64 %95, 9074651573753670042
  %1913 = and i64 9074651573753670042, %95
  %1914 = xor i64 9074651573753670042, %95
  %1915 = or i64 %1913, %1914
  %1916 = and i64 %101, 2263778392901932328
  %1917 = xor i64 %101, -1
  %1918 = or i64 -2263778392901932329, %1917
  %1919 = xor i64 %1918, -1
  %1920 = and i64 %1919, -1
  %1921 = xor i64 %1909, 4228912478458086965
  %1922 = xor i64 %1921, %1915
  %1923 = xor i64 %1922, %1912
  %1924 = xor i64 %1923, %1916
  %1925 = xor i64 %1924, %1911
  %1926 = xor i64 %1925, %1920
  %1927 = mul i64 %1908, %1926
  %1928 = trunc i64 %1927 to i32
  %.reload9.reg2mem = alloca float, i32 %1928, align 4
  %.reg2mem866 = alloca double, align 8
  %.reg2mem864 = alloca i32, align 4
  %.reg2mem861 = alloca i1, align 1
  %1929 = sext i32 %59 to i64
  %1930 = or i64 %1929, -6305603867686546598
  %1931 = xor i64 %1929, -1
  %1932 = and i64 %1931, 5212697959366366908
  %1933 = and i64 %1929, -5212697959366366909
  %1934 = or i64 %1932, %1933
  %1935 = xor i64 -2293801579555764762, %1934
  %1936 = xor i64 %1929, -1
  %1937 = or i64 6305603867686546597, %1936
  %1938 = xor i64 %1937, -1
  %1939 = and i64 %1938, -1
  %1940 = or i64 %1935, %1939
  %1941 = sext i32 %170 to i64
  %1942 = add i64 %1941, 3689129049164617121
  %1943 = xor i64 3689129049164617121, %1941
  %1944 = and i64 3689129049164617121, %1941
  %1945 = mul i64 2, %1944
  %1946 = add i64 %1943, %1945
  %1947 = add i64 %95, -8891062447203338203
  %1948 = sub i64 0, %95
  %1949 = sub i64 -8891062447203338203, %1948
  %1950 = xor i64 %1930, 7720499917491803393
  %1951 = xor i64 %1950, %1940
  %1952 = xor i64 %1951, %1949
  %1953 = xor i64 %1952, %1942
  %1954 = xor i64 %1953, %1946
  %1955 = xor i64 %1954, %1947
  %1956 = or i64 %101, 1872049790289611366
  %1957 = xor i64 %101, -1
  %1958 = and i64 1872049790289611366, %1957
  %1959 = add i64 %1958, %101
  %1960 = and i64 %95, 3367421703933690032
  %1961 = xor i64 %95, -1
  %1962 = xor i64 3367421703933690032, %1961
  %1963 = and i64 %1962, 3367421703933690032
  %1964 = sext i32 %50 to i64
  %1965 = or i64 %1964, -1377983937324791218
  %1966 = xor i64 %1964, -1
  %1967 = and i64 -1377983937324791218, %1966
  %1968 = add i64 %1967, %1964
  %1969 = xor i64 %1965, %1968
  %1970 = xor i64 %1969, %1959
  %1971 = xor i64 %1970, %1956
  %1972 = xor i64 %1971, %1960
  %1973 = xor i64 %1972, 1339626490436840193
  %1974 = xor i64 %1973, %1963
  %1975 = mul i64 %1955, %1974
  %1976 = trunc i64 %1975 to i32
  %.reload.reg2mem = alloca i1, i32 %1976, align 1
  %.reg2mem858 = alloca i32, align 4
  %1977 = and i64 %11, 5448982799939519485
  %1978 = or i64 -5448982799939519486, %11
  %1979 = sub i64 %1978, -5448982799939519486
  %1980 = sext i32 %92 to i64
  %1981 = add i64 %1980, 6416354847550708588
  %1982 = add i64 -8904802960632839252, %1980
  %1983 = sub i64 %1982, 3125586265526003776
  %1984 = xor i64 %1981, %1983
  %1985 = xor i64 %1984, -2169538234416350005
  %1986 = xor i64 %1985, %1979
  %1987 = xor i64 %1986, %1977
  %1988 = or i64 %69, -3327492177225613389
  %1989 = xor i64 %69, -1
  %1990 = and i64 -3327492177225613389, %1989
  %1991 = add i64 %1990, %69
  %1992 = and i64 %97, -9209774496642005031
  %1993 = or i64 9209774496642005030, %97
  %1994 = sub i64 %1993, 9209774496642005030
  %1995 = add i64 %53, -6365975760890089604
  %1996 = add i64 6849355410590498168, %53
  %1997 = add i64 %1996, 5231412902228963844
  %1998 = xor i64 %1992, %1991
  %1999 = xor i64 %1998, 6160544802117470435
  %2000 = xor i64 %1999, %1995
  %2001 = xor i64 %2000, %1988
  %2002 = xor i64 %2001, %1994
  %2003 = xor i64 %2002, %1997
  %2004 = mul i64 %1987, %2003
  %2005 = trunc i64 %2004 to i32
  %.reg2mem855 = alloca i32, i32 %2005, align 4
  %.reg2mem846 = alloca i32, align 4
  %2006 = or i64 %71, 1938355053070737614
  %2007 = xor i64 %71, -1
  %2008 = and i64 %2007, 7410497131869316316
  %2009 = and i64 %71, -7410497131869316317
  %2010 = or i64 %2008, %2009
  %2011 = xor i64 8948991416806294546, %2010
  %2012 = xor i64 %71, -1
  %2013 = or i64 -1938355053070737615, %2012
  %2014 = xor i64 %2013, -1
  %2015 = and i64 %2014, -1
  %2016 = or i64 %2011, %2015
  %2017 = sext i32 %170 to i64
  %2018 = or i64 %2017, -1332147567678387156
  %2019 = xor i64 %2017, -1
  %2020 = and i64 -1332147567678387156, %2019
  %2021 = add i64 %2020, %2017
  %2022 = xor i64 -6002083560555398665, %2018
  %2023 = xor i64 %2022, %2016
  %2024 = xor i64 %2023, %2021
  %2025 = xor i64 %2024, %2006
  %2026 = sext i32 %49 to i64
  %2027 = add i64 %2026, -468077839786489752
  %2028 = and i64 -468077839786489752, %2026
  %2029 = or i64 -468077839786489752, %2026
  %2030 = add i64 %2028, %2029
  %2031 = sext i32 %50 to i64
  %2032 = or i64 %2031, 5099245538236427387
  %2033 = and i64 5099245538236427387, %2031
  %2034 = xor i64 5099245538236427387, %2031
  %2035 = or i64 %2033, %2034
  %2036 = sext i32 %60 to i64
  %2037 = and i64 %2036, -1028679456635965963
  %2038 = xor i64 %2036, -1
  %2039 = or i64 1028679456635965962, %2038
  %2040 = xor i64 %2039, -1
  %2041 = and i64 %2040, -1
  %2042 = xor i64 %2037, %2041
  %2043 = xor i64 %2042, 2040081625798599
  %2044 = xor i64 %2043, %2035
  %2045 = xor i64 %2044, %2030
  %2046 = xor i64 %2045, %2027
  %2047 = xor i64 %2046, %2032
  %2048 = mul i64 %2025, %2047
  %2049 = trunc i64 %2048 to i32
  %.reg2mem843 = alloca i32, i32 %2049, align 4
  %.reg2mem840 = alloca i1, align 1
  %.reg2mem838 = alloca i1, align 1
  %.reg2mem817 = alloca i32, align 4
  %2050 = sext i32 %0 to i64
  %2051 = or i64 %2050, 2321629182094311105
  %2052 = xor i64 %2050, -1
  %2053 = and i64 2321629182094311105, %2052
  %2054 = add i64 %2053, %2050
  %2055 = or i64 %97, -2559328816635163533
  %2056 = xor i64 %97, -1
  %2057 = and i64 -2559328816635163533, %2056
  %2058 = add i64 %2057, %97
  %2059 = or i64 %91, -3783015628021721004
  %2060 = xor i64 %91, -1
  %2061 = and i64 -3783015628021721004, %2060
  %2062 = add i64 %2061, %91
  %2063 = xor i64 %2051, %2062
  %2064 = xor i64 %2063, %2058
  %2065 = xor i64 %2064, %2055
  %2066 = xor i64 %2065, %2054
  %2067 = xor i64 %2066, %2059
  %2068 = xor i64 %2067, -1286147849734856311
  %2069 = sext i32 %171 to i64
  %2070 = add i64 %2069, -1743599737558760725
  %2071 = add i64 8241825021402378655, %2069
  %2072 = add i64 %2071, 8461319314748412236
  %2073 = and i64 %69, -6583517699626236002
  %2074 = or i64 6583517699626236001, %69
  %2075 = sub i64 %2074, 6583517699626236001
  %2076 = or i64 %71, -18145315324088107
  %2077 = and i64 -18145315324088107, %71
  %2078 = xor i64 -18145315324088107, %71
  %2079 = or i64 %2077, %2078
  %2080 = xor i64 %2079, %2075
  %2081 = xor i64 %2080, %2073
  %2082 = xor i64 %2081, %2072
  %2083 = xor i64 %2082, -3632625566054816583
  %2084 = xor i64 %2083, %2076
  %2085 = xor i64 %2084, %2070
  %2086 = mul i64 %2068, %2085
  %2087 = trunc i64 %2086 to i32
  %.reg2mem814 = alloca i32, i32 %2087, align 4
  %.reg2mem805 = alloca i32, align 4
  %.loc.reg2mem = alloca i1*, align 8
  %.loc3.reg2mem = alloca float*, align 8
  %2088 = or i64 %96, 1930914244102226196
  %2089 = xor i64 %96, -1
  %2090 = and i64 1930914244102226196, %2089
  %2091 = add i64 %2090, %96
  %2092 = sext i32 %60 to i64
  %2093 = and i64 %2092, -2799367484848697329
  %2094 = xor i64 %2092, -1
  %2095 = xor i64 -2799367484848697329, %2094
  %2096 = and i64 %2095, -2799367484848697329
  %2097 = sext i32 %0 to i64
  %2098 = and i64 %2097, -4985121235647302931
  %2099 = xor i64 %2097, -1
  %2100 = or i64 4985121235647302930, %2099
  %2101 = xor i64 %2100, -1
  %2102 = and i64 %2101, -1
  %2103 = xor i64 -6190660037553970699, %2093
  %2104 = xor i64 %2103, %2088
  %2105 = xor i64 %2104, %2096
  %2106 = xor i64 %2105, %2098
  %2107 = xor i64 %2106, %2102
  %2108 = xor i64 %2107, %2091
  %2109 = add i64 %71, -7711476796014937468
  %2110 = xor i64 -7711476796014937468, %71
  %2111 = and i64 -7711476796014937468, %71
  %2112 = mul i64 2, %2111
  %2113 = add i64 %2110, %2112
  %2114 = sext i32 %49 to i64
  %2115 = add i64 %2114, 8055210396577209857
  %2116 = add i64 -3938654282217828380, %2114
  %2117 = sub i64 %2116, 6452879394914513379
  %2118 = sext i32 %171 to i64
  %2119 = or i64 %2118, 6540503544689135063
  %2120 = and i64 6540503544689135063, %2118
  %2121 = xor i64 6540503544689135063, %2118
  %2122 = or i64 %2120, %2121
  %2123 = xor i64 %2109, %2115
  %2124 = xor i64 %2123, %2117
  %2125 = xor i64 %2124, 8867050817035256413
  %2126 = xor i64 %2125, %2113
  %2127 = xor i64 %2126, %2122
  %2128 = xor i64 %2127, %2119
  %2129 = mul i64 %2108, %2128
  %2130 = trunc i64 %2129 to i32
  %.loc4.reg2mem = alloca double*, i32 %2130, align 8
  %.loc5.reg2mem = alloca i32*, align 8
  %.loc6.reg2mem = alloca i32*, align 8
  %2131 = and i64 %95, 3056193754500926367
  %2132 = xor i64 %95, -1
  %2133 = or i64 -3056193754500926368, %2132
  %2134 = xor i64 %2133, -1
  %2135 = and i64 %2134, -1
  %2136 = sext i32 %72 to i64
  %2137 = add i64 %2136, -6132614642002558803
  %2138 = add i64 9212165742126632888, %2136
  %2139 = add i64 %2138, 3101963689580359925
  %2140 = xor i64 %2137, %2139
  %2141 = xor i64 %2140, -2238825273004189405
  %2142 = xor i64 %2141, %2135
  %2143 = xor i64 %2142, %2131
  %2144 = add i64 %97, -4567679112755330863
  %2145 = sub i64 0, %97
  %2146 = add i64 4567679112755330863, %2145
  %2147 = sub i64 0, %2146
  %2148 = sext i32 %49 to i64
  %2149 = add i64 %2148, -5113007557613889080
  %2150 = sub i64 0, %2148
  %2151 = add i64 5113007557613889080, %2150
  %2152 = sub i64 0, %2151
  %2153 = sext i32 %49 to i64
  %2154 = add i64 %2153, -1169678427890617564
  %2155 = add i64 -5498724020774161243, %2153
  %2156 = add i64 %2155, 4329045592883543679
  %2157 = xor i64 %2156, %2147
  %2158 = xor i64 %2157, %2144
  %2159 = xor i64 %2158, 129730242134662795
  %2160 = xor i64 %2159, %2149
  %2161 = xor i64 %2160, %2152
  %2162 = xor i64 %2161, %2154
  %2163 = mul i64 %2143, %2162
  %2164 = trunc i64 %2163 to i32
  %.loc7.reg2mem = alloca i32*, i32 %2164, align 8
  %.loc20.reg2mem = alloca i32*, align 8
  %2165 = add i64 %53, -8980296929107507207
  %2166 = sub i64 0, %53
  %2167 = sub i64 -8980296929107507207, %2166
  %2168 = add i64 %69, -6859696785443154379
  %2169 = sub i64 0, %69
  %2170 = add i64 6859696785443154379, %2169
  %2171 = sub i64 0, %2170
  %2172 = xor i64 %2167, %2171
  %2173 = xor i64 %2172, 2271829427752718167
  %2174 = xor i64 %2173, %2168
  %2175 = xor i64 %2174, %2165
  %2176 = or i64 %69, 9117617176070293465
  %2177 = xor i64 %69, -1
  %2178 = and i64 %2177, 1493101307231904150
  %2179 = and i64 %69, -1493101307231904151
  %2180 = or i64 %2178, %2179
  %2181 = xor i64 7651834818129372751, %2180
  %2182 = xor i64 %69, -1
  %2183 = or i64 -9117617176070293466, %2182
  %2184 = xor i64 %2183, -1
  %2185 = and i64 %2184, -1
  %2186 = or i64 %2181, %2185
  %2187 = or i64 %91, 3299753274292752278
  %2188 = xor i64 %91, -1
  %2189 = and i64 3299753274292752278, %2188
  %2190 = add i64 %2189, %91
  %2191 = sext i32 %60 to i64
  %2192 = and i64 %2191, 1635770253111674917
  %2193 = xor i64 %2191, -1
  %2194 = xor i64 1635770253111674917, %2193
  %2195 = and i64 %2194, 1635770253111674917
  %2196 = xor i64 3650270928790981735, %2195
  %2197 = xor i64 %2196, %2187
  %2198 = xor i64 %2197, %2190
  %2199 = xor i64 %2198, %2186
  %2200 = xor i64 %2199, %2176
  %2201 = xor i64 %2200, %2192
  %2202 = mul i64 %2175, %2201
  %2203 = trunc i64 %2202 to i32
  %.loc21.reg2mem = alloca i64*, i32 %2203, align 8
  %.loc22.reg2mem = alloca i1*, align 8
  %2204 = sext i32 %60 to i64
  %2205 = add i64 %2204, 7963260316609349868
  %2206 = add i64 3793928021493847591, %2204
  %2207 = add i64 %2206, 4169332295115502277
  %2208 = add i64 %101, 5401188398129026815
  %2209 = and i64 5401188398129026815, %101
  %2210 = or i64 5401188398129026815, %101
  %2211 = add i64 %2209, %2210
  %2212 = or i64 %11, -1641336851686368289
  %2213 = xor i64 %11, -1
  %2214 = and i64 %2213, 4083212739274831841
  %2215 = and i64 %11, -4083212739274831842
  %2216 = or i64 %2214, %2215
  %2217 = xor i64 -3345417448770065346, %2216
  %2218 = xor i64 %11, -1
  %2219 = or i64 1641336851686368288, %2218
  %2220 = xor i64 %2219, -1
  %2221 = and i64 %2220, -1
  %2222 = or i64 %2217, %2221
  %2223 = xor i64 %2211, %2212
  %2224 = xor i64 %2223, %2222
  %2225 = xor i64 %2224, %2208
  %2226 = xor i64 %2225, %2207
  %2227 = xor i64 %2226, 465845501410404957
  %2228 = xor i64 %2227, %2205
  %2229 = or i64 %101, 9156007920002649993
  %2230 = xor i64 %101, -1
  %2231 = and i64 9156007920002649993, %2230
  %2232 = add i64 %2231, %101
  %2233 = sext i32 %50 to i64
  %2234 = or i64 %2233, 3456216372789165946
  %2235 = and i64 3456216372789165946, %2233
  %2236 = xor i64 3456216372789165946, %2233
  %2237 = or i64 %2235, %2236
  %2238 = sext i32 %170 to i64
  %2239 = add i64 %2238, -7725866077311893044
  %2240 = and i64 -7725866077311893044, %2238
  %2241 = or i64 -7725866077311893044, %2238
  %2242 = add i64 %2240, %2241
  %2243 = xor i64 7311717262486288885, %2234
  %2244 = xor i64 %2243, %2232
  %2245 = xor i64 %2244, %2237
  %2246 = xor i64 %2245, %2242
  %2247 = xor i64 %2246, %2239
  %2248 = xor i64 %2247, %2229
  %2249 = mul i64 %2228, %2248
  %2250 = trunc i64 %2249 to i32
  %.loc23.reg2mem = alloca i64*, i32 %2250, align 8
  %.loc24.reg2mem = alloca i1*, align 8
  %.loc25.reg2mem = alloca i1*, align 8
  %.loc26.reg2mem = alloca i1*, align 8
  %.loc27.reg2mem = alloca i1*, align 8
  %.loc28.reg2mem = alloca i1*, align 8
  %.loc50.reg2mem = alloca i32*, align 8
  %.loc51.reg2mem = alloca i32*, align 8
  %.loc52.reg2mem = alloca i32*, align 8
  %.loc53.reg2mem = alloca i32*, align 8
  %.loc54.reg2mem = alloca i1*, align 8
  %.loc55.reg2mem = alloca i1*, align 8
  %.loc56.reg2mem = alloca i1*, align 8
  %.loc57.reg2mem = alloca i1*, align 8
  %.loc58.reg2mem = alloca i1*, align 8
  %.loc59.reg2mem = alloca i1*, align 8
  %.loc81.reg2mem = alloca i32*, align 8
  %.loc82.reg2mem = alloca i32*, align 8
  %.loc83.reg2mem = alloca i32*, align 8
  %.loc91.reg2mem = alloca i32*, align 8
  %.loc92.reg2mem = alloca i64*, align 8
  %.loc93.reg2mem = alloca i32*, align 8
  %.loc94.reg2mem = alloca i64*, align 8
  %.loc95.reg2mem = alloca i32*, align 8
  %.loc96.reg2mem = alloca i64*, align 8
  %.loc97.reg2mem = alloca i64*, align 8
  %2251 = sext i32 %49 to i64
  %2252 = add i64 %2251, 7846454114010876644
  %2253 = add i64 -4240742133902741453, %2251
  %2254 = add i64 %2253, -6359547825795933519
  %2255 = sext i32 %49 to i64
  %2256 = or i64 %2255, -7422117253114753287
  %2257 = and i64 -7422117253114753287, %2255
  %2258 = xor i64 -7422117253114753287, %2255
  %2259 = or i64 %2257, %2258
  %2260 = or i64 %91, 2976163965517006164
  %2261 = xor i64 %91, -1
  %2262 = and i64 2976163965517006164, %2261
  %2263 = add i64 %2262, %91
  %2264 = xor i64 %2256, -185213859295228455
  %2265 = xor i64 %2264, %2252
  %2266 = xor i64 %2265, %2260
  %2267 = xor i64 %2266, %2254
  %2268 = xor i64 %2267, %2259
  %2269 = xor i64 %2268, %2263
  %2270 = add i64 %101, -4105000706640017365
  %2271 = sub i64 0, %101
  %2272 = sub i64 -4105000706640017365, %2271
  %2273 = sext i32 %49 to i64
  %2274 = and i64 %2273, 4440153453472427477
  %2275 = xor i64 %2273, -1
  %2276 = xor i64 4440153453472427477, %2275
  %2277 = and i64 %2276, 4440153453472427477
  %2278 = xor i64 %2274, 579938721343545961
  %2279 = xor i64 %2278, %2272
  %2280 = xor i64 %2279, %2270
  %2281 = xor i64 %2280, %2277
  %2282 = mul i64 %2269, %2281
  %2283 = trunc i64 %2282 to i32
  %.loc98.reg2mem = alloca i64*, i32 %2283, align 8
  %2284 = add i64 %91, -74788655907702510
  %2285 = and i64 -74788655907702510, %91
  %2286 = or i64 -74788655907702510, %91
  %2287 = add i64 %2285, %2286
  %2288 = or i64 %69, -4535767459557502054
  %2289 = xor i64 %69, -1
  %2290 = and i64 %2289, -2196500364258121088
  %2291 = and i64 %69, 2196500364258121087
  %2292 = or i64 %2290, %2291
  %2293 = xor i64 2344617323445123354, %2292
  %2294 = xor i64 %69, -1
  %2295 = or i64 4535767459557502053, %2294
  %2296 = xor i64 %2295, -1
  %2297 = and i64 %2296, -1
  %2298 = or i64 %2293, %2297
  %2299 = sext i32 %171 to i64
  %2300 = and i64 %2299, -7341904819210643670
  %2301 = or i64 7341904819210643669, %2299
  %2302 = sub i64 %2301, 7341904819210643669
  %2303 = xor i64 %2298, %2284
  %2304 = xor i64 %2303, %2300
  %2305 = xor i64 %2304, %2302
  %2306 = xor i64 %2305, %2288
  %2307 = xor i64 %2306, %2287
  %2308 = xor i64 %2307, -5522243535792658955
  %2309 = sext i32 %170 to i64
  %2310 = and i64 %2309, -4249495959930227
  %2311 = xor i64 %2309, -1
  %2312 = or i64 4249495959930226, %2311
  %2313 = xor i64 %2312, -1
  %2314 = and i64 %2313, -1
  %2315 = and i64 %69, -4025627730177998136
  %2316 = xor i64 %69, -1
  %2317 = xor i64 -4025627730177998136, %2316
  %2318 = and i64 %2317, -4025627730177998136
  %2319 = add i64 %101, -7710318430773556274
  %2320 = sub i64 0, %101
  %2321 = add i64 7710318430773556274, %2320
  %2322 = sub i64 0, %2321
  %2323 = xor i64 %2315, %2314
  %2324 = xor i64 %2323, %2310
  %2325 = xor i64 %2324, %2319
  %2326 = xor i64 %2325, -5977168171939652003
  %2327 = xor i64 %2326, %2322
  %2328 = xor i64 %2327, %2318
  %2329 = mul i64 %2308, %2328
  %2330 = trunc i64 %2329 to i32
  %.loc99.reg2mem = alloca i64*, i32 %2330, align 8
  %.loc100.reg2mem = alloca i64*, align 8
  %.loc101.reg2mem = alloca i64*, align 8
  %.reg2mem696 = alloca i64*, align 8
  %.reg2mem694 = alloca i64, align 8
  %.reg2mem692 = alloca i1, align 1
  %.reg2mem689 = alloca i64*, align 8
  %.reg2mem687 = alloca i64, align 8
  %.reg2mem684 = alloca i64*, align 8
  %.reg2mem682 = alloca i1, align 1
  %.reg2mem679 = alloca i64*, align 8
  %.reg2mem676 = alloca i64*, align 8
  %.reg2mem674 = alloca i1, align 1
  %.reg2mem672 = alloca i1, align 1
  %.reg2mem669 = alloca i64*, align 8
  %.reg2mem666 = alloca i8**, align 8
  %.reg2mem663 = alloca i8**, align 8
  %.reg2mem660 = alloca i8**, align 8
  %.reg2mem657 = alloca i8**, align 8
  %.reg2mem654 = alloca i8**, align 8
  %.reg2mem651 = alloca i8**, align 8
  %.reg2mem648 = alloca i8**, align 8
  %.reg2mem645 = alloca i8**, align 8
  %.reg2mem642 = alloca i8**, align 8
  %.reg2mem639 = alloca i8**, align 8
  %.reg2mem636 = alloca i8**, align 8
  %.reg2mem633 = alloca i8**, align 8
  %.reg2mem630 = alloca i8**, align 8
  %.reg2mem627 = alloca i8**, align 8
  %2331 = sext i32 %92 to i64
  %2332 = add i64 %2331, 2395934860914321595
  %2333 = xor i64 2395934860914321595, %2331
  %2334 = and i64 2395934860914321595, %2331
  %2335 = mul i64 2, %2334
  %2336 = add i64 %2333, %2335
  %2337 = and i64 %97, -8033073212941871792
  %2338 = or i64 8033073212941871791, %97
  %2339 = sub i64 %2338, 8033073212941871791
  %2340 = sext i32 %0 to i64
  %2341 = or i64 %2340, -4415309579486757856
  %2342 = and i64 -4415309579486757856, %2340
  %2343 = xor i64 -4415309579486757856, %2340
  %2344 = or i64 %2342, %2343
  %2345 = xor i64 %2344, -44557647906344733
  %2346 = xor i64 %2345, %2341
  %2347 = xor i64 %2346, %2339
  %2348 = xor i64 %2347, %2336
  %2349 = xor i64 %2348, %2332
  %2350 = xor i64 %2349, %2337
  %2351 = sext i32 %50 to i64
  %2352 = add i64 %2351, -3583360277775143395
  %2353 = and i64 -3583360277775143395, %2351
  %2354 = or i64 -3583360277775143395, %2351
  %2355 = add i64 %2353, %2354
  %2356 = sext i32 %49 to i64
  %2357 = add i64 %2356, 8170887152334854945
  %2358 = add i64 -7215174789932999851, %2356
  %2359 = add i64 %2358, -3060682131441696820
  %2360 = and i64 %96, 6998543707306680886
  %2361 = or i64 -6998543707306680887, %96
  %2362 = sub i64 %2361, -6998543707306680887
  %2363 = xor i64 %2360, -4372140177065454389
  %2364 = xor i64 %2363, %2352
  %2365 = xor i64 %2364, %2355
  %2366 = xor i64 %2365, %2362
  %2367 = xor i64 %2366, %2357
  %2368 = xor i64 %2367, %2359
  %2369 = mul i64 %2350, %2368
  %2370 = trunc i64 %2369 to i32
  %.reg2mem624 = alloca i8**, i32 %2370, align 8
  %2371 = and i64 %101, 6676681035746592970
  %2372 = xor i64 %101, -1
  %2373 = xor i64 6676681035746592970, %2372
  %2374 = and i64 %2373, 6676681035746592970
  %2375 = sext i32 %59 to i64
  %2376 = add i64 %2375, 7372934923871330327
  %2377 = add i64 4398340276340997031, %2375
  %2378 = add i64 %2377, 2974594647530333296
  %2379 = xor i64 %2374, %2371
  %2380 = xor i64 %2379, 3196943578586562071
  %2381 = xor i64 %2380, %2376
  %2382 = xor i64 %2381, %2378
  %2383 = sext i32 %59 to i64
  %2384 = add i64 %2383, 6451199428346048421
  %2385 = and i64 6451199428346048421, %2383
  %2386 = or i64 6451199428346048421, %2383
  %2387 = add i64 %2385, %2386
  %2388 = and i64 %97, -484487495337662883
  %2389 = xor i64 %97, -1
  %2390 = or i64 484487495337662882, %2389
  %2391 = xor i64 %2390, -1
  %2392 = and i64 %2391, -1
  %2393 = sext i32 %171 to i64
  %2394 = add i64 %2393, -4004190304888327391
  %2395 = sub i64 0, %2393
  %2396 = add i64 4004190304888327391, %2395
  %2397 = sub i64 0, %2396
  %2398 = xor i64 %2394, -6779213611106772569
  %2399 = xor i64 %2398, %2392
  %2400 = xor i64 %2399, %2387
  %2401 = xor i64 %2400, %2388
  %2402 = xor i64 %2401, %2384
  %2403 = xor i64 %2402, %2397
  %2404 = mul i64 %2382, %2403
  %2405 = trunc i64 %2404 to i32
  %.reg2mem621 = alloca i8**, i32 %2405, align 8
  %.reg2mem618 = alloca i8**, align 8
  %2406 = and i64 %69, 895218616809676601
  %2407 = xor i64 %69, -1
  %2408 = or i64 -895218616809676602, %2407
  %2409 = xor i64 %2408, -1
  %2410 = and i64 %2409, -1
  %2411 = sext i32 %0 to i64
  %2412 = add i64 %2411, -4007673048500390442
  %2413 = xor i64 -4007673048500390442, %2411
  %2414 = and i64 -4007673048500390442, %2411
  %2415 = mul i64 2, %2414
  %2416 = add i64 %2413, %2415
  %2417 = xor i64 %2416, %2406
  %2418 = xor i64 %2417, -7750349489104597829
  %2419 = xor i64 %2418, %2410
  %2420 = xor i64 %2419, %2412
  %2421 = add i64 %77, -1363104446119969322
  %2422 = sub i64 0, %77
  %2423 = add i64 1363104446119969322, %2422
  %2424 = sub i64 0, %2423
  %2425 = add i64 %71, 2695965792427476288
  %2426 = xor i64 2695965792427476288, %71
  %2427 = and i64 2695965792427476288, %71
  %2428 = mul i64 2, %2427
  %2429 = add i64 %2426, %2428
  %2430 = sext i32 %170 to i64
  %2431 = or i64 %2430, -6930326951785225707
  %2432 = xor i64 %2430, -1
  %2433 = and i64 %2432, 3003041199917905041
  %2434 = and i64 %2430, -3003041199917905042
  %2435 = or i64 %2433, %2434
  %2436 = xor i64 -5296661608741824892, %2435
  %2437 = xor i64 %2430, -1
  %2438 = or i64 6930326951785225706, %2437
  %2439 = xor i64 %2438, -1
  %2440 = and i64 %2439, -1
  %2441 = or i64 %2436, %2440
  %2442 = xor i64 %2441, %2421
  %2443 = xor i64 %2442, %2424
  %2444 = xor i64 %2443, %2431
  %2445 = xor i64 %2444, %2425
  %2446 = xor i64 %2445, 195857313165875315
  %2447 = xor i64 %2446, %2429
  %2448 = mul i64 %2420, %2447
  %2449 = trunc i64 %2448 to i32
  %.reg2mem615 = alloca i8**, i32 %2449, align 8
  %.reg2mem612 = alloca i8**, align 8
  %2450 = sext i32 %171 to i64
  %2451 = and i64 %2450, 5878859771491955298
  %2452 = xor i64 %2450, -1
  %2453 = xor i64 5878859771491955298, %2452
  %2454 = and i64 %2453, 5878859771491955298
  %2455 = sext i32 %170 to i64
  %2456 = and i64 %2455, 4838517128704084913
  %2457 = or i64 -4838517128704084914, %2455
  %2458 = sub i64 %2457, -4838517128704084914
  %2459 = xor i64 %2451, %2456
  %2460 = xor i64 %2459, -8897377195392373851
  %2461 = xor i64 %2460, %2458
  %2462 = xor i64 %2461, %2454
  %2463 = add i64 %69, -2358949393133235113
  %2464 = and i64 -2358949393133235113, %69
  %2465 = or i64 -2358949393133235113, %69
  %2466 = add i64 %2464, %2465
  %2467 = or i64 %95, 4082710307195425493
  %2468 = xor i64 %95, -1
  %2469 = and i64 4082710307195425493, %2468
  %2470 = add i64 %2469, %95
  %2471 = xor i64 %2470, -1021086913862892499
  %2472 = xor i64 %2471, %2463
  %2473 = xor i64 %2472, %2466
  %2474 = xor i64 %2473, %2467
  %2475 = mul i64 %2462, %2474
  %2476 = trunc i64 %2475 to i32
  %.reg2mem609 = alloca i8**, i32 %2476, align 8
  %.reg2mem606 = alloca i8**, align 8
  %.reg2mem603 = alloca i8**, align 8
  %.reg2mem600 = alloca i8**, align 8
  %.reg2mem597 = alloca i8**, align 8
  %.reg2mem594 = alloca i8**, align 8
  %.reg2mem591 = alloca i8**, align 8
  %.reg2mem588 = alloca i8**, align 8
  %.reg2mem585 = alloca i8**, align 8
  %.reg2mem582 = alloca i8**, align 8
  %2477 = and i64 %77, 5546148008721323990
  %2478 = xor i64 %77, -1
  %2479 = xor i64 5546148008721323990, %2478
  %2480 = and i64 %2479, 5546148008721323990
  %2481 = sext i32 %60 to i64
  %2482 = or i64 %2481, -3463070762001431199
  %2483 = xor i64 %2481, -1
  %2484 = and i64 -3463070762001431199, %2483
  %2485 = add i64 %2484, %2481
  %2486 = xor i64 %2477, %2482
  %2487 = xor i64 %2486, -9140553069146694091
  %2488 = xor i64 %2487, %2485
  %2489 = xor i64 %2488, %2480
  %2490 = sext i32 %170 to i64
  %2491 = add i64 %2490, -6627105529154911957
  %2492 = add i64 -7205342144347119091, %2490
  %2493 = sub i64 %2492, -578236615192207134
  %2494 = sext i32 %72 to i64
  %2495 = or i64 %2494, -7509579570954095080
  %2496 = xor i64 %2494, -1
  %2497 = and i64 -7509579570954095080, %2496
  %2498 = add i64 %2497, %2494
  %2499 = sext i32 %60 to i64
  %2500 = and i64 %2499, -506089103679992579
  %2501 = or i64 506089103679992578, %2499
  %2502 = sub i64 %2501, 506089103679992578
  %2503 = xor i64 %2498, %2493
  %2504 = xor i64 %2503, %2502
  %2505 = xor i64 %2504, %2491
  %2506 = xor i64 %2505, %2495
  %2507 = xor i64 %2506, %2500
  %2508 = xor i64 %2507, 2055169221056873501
  %2509 = mul i64 %2489, %2508
  %2510 = trunc i64 %2509 to i32
  %.reg2mem579 = alloca i8**, i32 %2510, align 8
  %.reg2mem576 = alloca i8**, align 8
  %.reg2mem573 = alloca i8**, align 8
  %.reg2mem570 = alloca i8**, align 8
  %.reg2mem567 = alloca i8**, align 8
  %.reg2mem564 = alloca i8**, align 8
  %.reg2mem559 = alloca i8**, align 8
  %2511 = sext i32 %92 to i64
  %2512 = or i64 %2511, 7382737979337335977
  %2513 = and i64 7382737979337335977, %2511
  %2514 = xor i64 7382737979337335977, %2511
  %2515 = or i64 %2513, %2514
  %2516 = add i64 %97, 5733533243316019563
  %2517 = and i64 5733533243316019563, %97
  %2518 = or i64 5733533243316019563, %97
  %2519 = add i64 %2517, %2518
  %2520 = and i64 %96, -4371311553999026105
  %2521 = xor i64 %96, -1
  %2522 = xor i64 -4371311553999026105, %2521
  %2523 = and i64 %2522, -4371311553999026105
  %2524 = xor i64 %2516, %2523
  %2525 = xor i64 %2524, 3733227008264429637
  %2526 = xor i64 %2525, %2520
  %2527 = xor i64 %2526, %2512
  %2528 = xor i64 %2527, %2519
  %2529 = xor i64 %2528, %2515
  %2530 = and i64 %76, 5187342972308657981
  %2531 = xor i64 %76, -1
  %2532 = or i64 -5187342972308657982, %2531
  %2533 = xor i64 %2532, -1
  %2534 = and i64 %2533, -1
  %2535 = sext i32 %92 to i64
  %2536 = add i64 %2535, -4688052483908056281
  %2537 = xor i64 -4688052483908056281, %2535
  %2538 = and i64 -4688052483908056281, %2535
  %2539 = mul i64 2, %2538
  %2540 = add i64 %2537, %2539
  %2541 = or i64 %76, 6868612690243643445
  %2542 = xor i64 %76, -1
  %2543 = and i64 6868612690243643445, %2542
  %2544 = add i64 %2543, %76
  %2545 = xor i64 %2540, %2544
  %2546 = xor i64 %2545, %2541
  %2547 = xor i64 %2546, %2530
  %2548 = xor i64 %2547, %2536
  %2549 = xor i64 %2548, %2534
  %2550 = xor i64 %2549, 228114474884477581
  %2551 = mul i64 %2529, %2550
  %2552 = trunc i64 %2551 to i32
  %.reg2mem556 = alloca i8**, i32 %2552, align 8
  %2553 = sext i32 %60 to i64
  %2554 = or i64 %2553, 2141283102809586144
  %2555 = xor i64 %2553, -1
  %2556 = and i64 %2555, 4087575059243424350
  %2557 = and i64 %2553, -4087575059243424351
  %2558 = or i64 %2556, %2557
  %2559 = xor i64 2670254693811332030, %2558
  %2560 = xor i64 %2553, -1
  %2561 = or i64 -2141283102809586145, %2560
  %2562 = xor i64 %2561, -1
  %2563 = and i64 %2562, -1
  %2564 = or i64 %2559, %2563
  %2565 = sext i32 %49 to i64
  %2566 = or i64 %2565, 6277598175322468338
  %2567 = xor i64 %2565, -1
  %2568 = and i64 6277598175322468338, %2567
  %2569 = add i64 %2568, %2565
  %2570 = xor i64 %2564, %2569
  %2571 = xor i64 %2570, %2566
  %2572 = xor i64 %2571, -4522536045316837679
  %2573 = xor i64 %2572, %2554
  %2574 = sext i32 %49 to i64
  %2575 = or i64 %2574, -8879911646773675068
  %2576 = and i64 -8879911646773675068, %2574
  %2577 = xor i64 -8879911646773675068, %2574
  %2578 = or i64 %2576, %2577
  %2579 = sext i32 %0 to i64
  %2580 = add i64 %2579, -6513639884265825004
  %2581 = and i64 -6513639884265825004, %2579
  %2582 = or i64 -6513639884265825004, %2579
  %2583 = add i64 %2581, %2582
  %2584 = xor i64 %2575, %2580
  %2585 = xor i64 %2584, %2578
  %2586 = xor i64 %2585, 2381013912422689329
  %2587 = xor i64 %2586, %2583
  %2588 = mul i64 %2573, %2587
  %2589 = trunc i64 %2588 to i32
  %.reg2mem552 = alloca i8**, i32 %2589, align 8
  %.reg2mem549 = alloca i8**, align 8
  %.reg2mem545 = alloca i8**, align 8
  %.reg2mem541 = alloca i8**, align 8
  %.reg2mem537 = alloca i8**, align 8
  %.reg2mem534 = alloca i8**, align 8
  %.reg2mem530 = alloca i8**, align 8
  %.reg2mem527 = alloca i8**, align 8
  %.reg2mem524 = alloca i8**, align 8
  %.reg2mem521 = alloca i8**, align 8
  %.reg2mem518 = alloca i8**, align 8
  %.reg2mem514 = alloca i8**, align 8
  %.reg2mem510 = alloca i8**, align 8
  %.reg2mem507 = alloca i8**, align 8
  %.reg2mem504 = alloca i8**, align 8
  %.reg2mem500 = alloca i8**, align 8
  %.reg2mem497 = alloca i8**, align 8
  %.reg2mem494 = alloca i8**, align 8
  %.reg2mem491 = alloca i8**, align 8
  %2590 = sext i32 %72 to i64
  %2591 = add i64 %2590, 3404244592494407270
  %2592 = and i64 3404244592494407270, %2590
  %2593 = or i64 3404244592494407270, %2590
  %2594 = add i64 %2592, %2593
  %2595 = or i64 %71, 3705041015991648891
  %2596 = xor i64 %71, -1
  %2597 = and i64 %2596, 8494695325726448818
  %2598 = and i64 %71, -8494695325726448819
  %2599 = or i64 %2597, %2598
  %2600 = xor i64 5082817168076693193, %2599
  %2601 = xor i64 %71, -1
  %2602 = or i64 -3705041015991648892, %2601
  %2603 = xor i64 %2602, -1
  %2604 = and i64 %2603, -1
  %2605 = or i64 %2600, %2604
  %2606 = or i64 %71, -2183283085832156897
  %2607 = xor i64 %71, -1
  %2608 = and i64 -2183283085832156897, %2607
  %2609 = add i64 %2608, %71
  %2610 = xor i64 %2605, %2609
  %2611 = xor i64 %2610, %2594
  %2612 = xor i64 %2611, %2591
  %2613 = xor i64 %2612, %2595
  %2614 = xor i64 %2613, -8244815814501956311
  %2615 = xor i64 %2614, %2606
  %2616 = and i64 %11, 4297557063585534466
  %2617 = or i64 -4297557063585534467, %11
  %2618 = sub i64 %2617, -4297557063585534467
  %2619 = add i64 %71, 391676490372567925
  %2620 = xor i64 391676490372567925, %71
  %2621 = and i64 391676490372567925, %71
  %2622 = mul i64 2, %2621
  %2623 = add i64 %2620, %2622
  %2624 = sext i32 %72 to i64
  %2625 = or i64 %2624, -8932224149926954446
  %2626 = xor i64 %2624, -1
  %2627 = and i64 -8932224149926954446, %2626
  %2628 = add i64 %2627, %2624
  %2629 = xor i64 %2616, %2618
  %2630 = xor i64 %2629, %2619
  %2631 = xor i64 %2630, %2628
  %2632 = xor i64 %2631, -6266340757089687783
  %2633 = xor i64 %2632, %2625
  %2634 = xor i64 %2633, %2623
  %2635 = mul i64 %2615, %2634
  %2636 = trunc i64 %2635 to i32
  %.reg2mem486 = alloca i8**, i32 %2636, align 8
  %.reg2mem482 = alloca i8**, align 8
  %.reg2mem478 = alloca i8**, align 8
  %.reg2mem475 = alloca i8**, align 8
  %.reg2mem472 = alloca i8**, align 8
  %.reg2mem469 = alloca i8**, align 8
  %.reg2mem466 = alloca i8**, align 8
  %.reg2mem462 = alloca i8**, align 8
  %.reg2mem457 = alloca i8**, align 8
  %.reg2mem454 = alloca i8**, align 8
  %.reg2mem449 = alloca i8**, align 8
  %.reg2mem445 = alloca i8**, align 8
  %2637 = or i64 %76, 8254651891322194903
  %2638 = and i64 8254651891322194903, %76
  %2639 = xor i64 8254651891322194903, %76
  %2640 = or i64 %2638, %2639
  %2641 = and i64 %76, -2360417115045528001
  %2642 = xor i64 %76, -1
  %2643 = or i64 2360417115045528000, %2642
  %2644 = xor i64 %2643, -1
  %2645 = and i64 %2644, -1
  %2646 = sext i32 %170 to i64
  %2647 = add i64 %2646, -1700040322631276813
  %2648 = sub i64 0, %2646
  %2649 = add i64 1700040322631276813, %2648
  %2650 = sub i64 0, %2649
  %2651 = xor i64 %2645, %2641
  %2652 = xor i64 %2651, %2647
  %2653 = xor i64 %2652, %2640
  %2654 = xor i64 %2653, %2650
  %2655 = xor i64 %2654, 996655748620994829
  %2656 = xor i64 %2655, %2637
  %2657 = sext i32 %92 to i64
  %2658 = or i64 %2657, -4388043746516058055
  %2659 = xor i64 %2657, -1
  %2660 = and i64 %2659, 5275564373558454785
  %2661 = and i64 %2657, -5275564373558454786
  %2662 = or i64 %2660, %2661
  %2663 = xor i64 -8490384059118048712, %2662
  %2664 = xor i64 %2657, -1
  %2665 = or i64 4388043746516058054, %2664
  %2666 = xor i64 %2665, -1
  %2667 = and i64 %2666, -1
  %2668 = or i64 %2663, %2667
  %2669 = or i64 %96, -3423518867080261031
  %2670 = and i64 -3423518867080261031, %96
  %2671 = xor i64 -3423518867080261031, %96
  %2672 = or i64 %2670, %2671
  %2673 = and i64 %53, -4535812333382207102
  %2674 = xor i64 %53, -1
  %2675 = or i64 4535812333382207101, %2674
  %2676 = xor i64 %2675, -1
  %2677 = and i64 %2676, -1
  %2678 = xor i64 %2672, %2658
  %2679 = xor i64 %2678, %2669
  %2680 = xor i64 %2679, %2668
  %2681 = xor i64 %2680, %2673
  %2682 = xor i64 %2681, %2677
  %2683 = xor i64 %2682, -3798097292524311099
  %2684 = mul i64 %2656, %2683
  %2685 = trunc i64 %2684 to i32
  %.reg2mem442 = alloca i8**, i32 %2685, align 8
  %.reg2mem439 = alloca i8**, align 8
  %.reg2mem435 = alloca i8**, align 8
  %.reg2mem431 = alloca i8**, align 8
  %2686 = sext i32 %72 to i64
  %2687 = add i64 %2686, -7629952543252165096
  %2688 = add i64 -5372032726957904171, %2686
  %2689 = add i64 %2688, -2257919816294260925
  %2690 = add i64 %76, 7100257349659412338
  %2691 = sub i64 0, %76
  %2692 = sub i64 7100257349659412338, %2691
  %2693 = add i64 %77, 8751878523573983697
  %2694 = add i64 7830251159529474845, %77
  %2695 = sub i64 %2694, -921627364044508852
  %2696 = xor i64 8901034134449230035, %2693
  %2697 = xor i64 %2696, %2690
  %2698 = xor i64 %2697, %2687
  %2699 = xor i64 %2698, %2692
  %2700 = xor i64 %2699, %2689
  %2701 = xor i64 %2700, %2695
  %2702 = sext i32 %49 to i64
  %2703 = add i64 %2702, -3849871594655245759
  %2704 = add i64 -7153227563651146434, %2702
  %2705 = sub i64 %2704, -3303355968995900675
  %2706 = add i64 %71, 2788961462197961396
  %2707 = sub i64 0, %71
  %2708 = sub i64 2788961462197961396, %2707
  %2709 = xor i64 %2703, %2705
  %2710 = xor i64 %2709, %2706
  %2711 = xor i64 %2710, %2708
  %2712 = xor i64 %2711, -6664677683295565989
  %2713 = mul i64 %2701, %2712
  %2714 = trunc i64 %2713 to i32
  %.reg2mem428 = alloca i8**, i32 %2714, align 8
  %2715 = sext i32 %171 to i64
  %2716 = and i64 %2715, 5519694807173588880
  %2717 = xor i64 %2715, -1
  %2718 = xor i64 5519694807173588880, %2717
  %2719 = and i64 %2718, 5519694807173588880
  %2720 = and i64 %95, 5845933283716902453
  %2721 = xor i64 %95, -1
  %2722 = or i64 -5845933283716902454, %2721
  %2723 = xor i64 %2722, -1
  %2724 = and i64 %2723, -1
  %2725 = sext i32 %72 to i64
  %2726 = or i64 %2725, -5228977752416552314
  %2727 = xor i64 %2725, -1
  %2728 = and i64 -5228977752416552314, %2727
  %2729 = add i64 %2728, %2725
  %2730 = xor i64 %2719, %2726
  %2731 = xor i64 %2730, %2720
  %2732 = xor i64 %2731, %2729
  %2733 = xor i64 %2732, -7880530051569764069
  %2734 = xor i64 %2733, %2724
  %2735 = xor i64 %2734, %2716
  %2736 = sext i32 %50 to i64
  %2737 = or i64 %2736, 4161675186758237295
  %2738 = xor i64 %2736, -1
  %2739 = and i64 4161675186758237295, %2738
  %2740 = add i64 %2739, %2736
  %2741 = add i64 %71, 2847730057572401669
  %2742 = sub i64 0, %71
  %2743 = sub i64 2847730057572401669, %2742
  %2744 = and i64 %76, -4667942991784088258
  %2745 = xor i64 %76, -1
  %2746 = or i64 4667942991784088257, %2745
  %2747 = xor i64 %2746, -1
  %2748 = and i64 %2747, -1
  %2749 = xor i64 %2737, %2744
  %2750 = xor i64 %2749, %2743
  %2751 = xor i64 %2750, %2748
  %2752 = xor i64 %2751, -1821719878627624685
  %2753 = xor i64 %2752, %2741
  %2754 = xor i64 %2753, %2740
  %2755 = mul i64 %2735, %2754
  %2756 = trunc i64 %2755 to i32
  %.reg2mem425 = alloca i8**, i32 %2756, align 8
  %.reg2mem422 = alloca i8**, align 8
  %2757 = sext i32 %50 to i64
  %2758 = or i64 %2757, -8973726177573823204
  %2759 = and i64 -8973726177573823204, %2757
  %2760 = xor i64 -8973726177573823204, %2757
  %2761 = or i64 %2759, %2760
  %2762 = and i64 %91, -1423826012451186337
  %2763 = xor i64 %91, -1
  %2764 = or i64 1423826012451186336, %2763
  %2765 = xor i64 %2764, -1
  %2766 = and i64 %2765, -1
  %2767 = or i64 %101, -2845809113710537067
  %2768 = and i64 -2845809113710537067, %101
  %2769 = xor i64 -2845809113710537067, %101
  %2770 = or i64 %2768, %2769
  %2771 = xor i64 %2767, %2770
  %2772 = xor i64 %2771, %2758
  %2773 = xor i64 %2772, 3175176798144886211
  %2774 = xor i64 %2773, %2761
  %2775 = xor i64 %2774, %2766
  %2776 = xor i64 %2775, %2762
  %2777 = and i64 %11, -2882329057551459763
  %2778 = xor i64 %11, -1
  %2779 = xor i64 -2882329057551459763, %2778
  %2780 = and i64 %2779, -2882329057551459763
  %2781 = or i64 %11, 3478386938448845986
  %2782 = and i64 3478386938448845986, %11
  %2783 = xor i64 3478386938448845986, %11
  %2784 = or i64 %2782, %2783
  %2785 = and i64 %95, -7016608198875016433
  %2786 = xor i64 %95, -1
  %2787 = xor i64 -7016608198875016433, %2786
  %2788 = and i64 %2787, -7016608198875016433
  %2789 = xor i64 %2777, 4258824960746169067
  %2790 = xor i64 %2789, %2785
  %2791 = xor i64 %2790, %2781
  %2792 = xor i64 %2791, %2784
  %2793 = xor i64 %2792, %2780
  %2794 = xor i64 %2793, %2788
  %2795 = mul i64 %2776, %2794
  %2796 = trunc i64 %2795 to i32
  %.reg2mem419 = alloca i8**, i32 %2796, align 8
  %.reg2mem414 = alloca i8**, align 8
  %.reg2mem411 = alloca i8**, align 8
  %.reg2mem407 = alloca i8**, align 8
  %.reg2mem404 = alloca i8**, align 8
  %2797 = sext i32 %72 to i64
  %2798 = and i64 %2797, 801980484077690116
  %2799 = xor i64 %2797, -1
  %2800 = xor i64 801980484077690116, %2799
  %2801 = and i64 %2800, 801980484077690116
  %2802 = sext i32 %171 to i64
  %2803 = add i64 %2802, -1860097452244250950
  %2804 = sub i64 0, %2802
  %2805 = sub i64 -1860097452244250950, %2804
  %2806 = xor i64 %2803, %2801
  %2807 = xor i64 %2806, -2049413309363144711
  %2808 = xor i64 %2807, %2805
  %2809 = xor i64 %2808, %2798
  %2810 = add i64 %97, 8474459174802243652
  %2811 = sub i64 0, %97
  %2812 = sub i64 8474459174802243652, %2811
  %2813 = add i64 %96, -2260010753932740406
  %2814 = add i64 -467365527438166337, %96
  %2815 = add i64 %2814, -1792645226494574069
  %2816 = xor i64 %2812, 3898298827151202889
  %2817 = xor i64 %2816, %2815
  %2818 = xor i64 %2817, %2813
  %2819 = xor i64 %2818, %2810
  %2820 = mul i64 %2809, %2819
  %2821 = trunc i64 %2820 to i32
  %.reg2mem401 = alloca i8**, i32 %2821, align 8
  %.reg2mem397 = alloca i8**, align 8
  %.reg2mem394 = alloca i8**, align 8
  %.reg2mem391 = alloca i8**, align 8
  %.reg2mem388 = alloca i8**, align 8
  %2822 = add i64 %101, -6383570321979549704
  %2823 = sub i64 0, %101
  %2824 = sub i64 -6383570321979549704, %2823
  %2825 = add i64 %97, -6948070713621613483
  %2826 = xor i64 -6948070713621613483, %97
  %2827 = and i64 -6948070713621613483, %97
  %2828 = mul i64 2, %2827
  %2829 = add i64 %2826, %2828
  %2830 = add i64 %71, -7110309494542816998
  %2831 = add i64 5008175098972339486, %71
  %2832 = add i64 %2831, 6328259480194395132
  %2833 = xor i64 %2830, %2822
  %2834 = xor i64 %2833, %2825
  %2835 = xor i64 %2834, %2824
  %2836 = xor i64 %2835, 7832625546672657331
  %2837 = xor i64 %2836, %2832
  %2838 = xor i64 %2837, %2829
  %2839 = or i64 %95, 8952851112568033128
  %2840 = and i64 8952851112568033128, %95
  %2841 = xor i64 8952851112568033128, %95
  %2842 = or i64 %2840, %2841
  %2843 = add i64 %97, 1075991908572502400
  %2844 = add i64 4763775365144529587, %97
  %2845 = add i64 %2844, -3687783456572027187
  %2846 = xor i64 4780192459370664827, %2842
  %2847 = xor i64 %2846, %2839
  %2848 = xor i64 %2847, %2845
  %2849 = xor i64 %2848, %2843
  %2850 = mul i64 %2838, %2849
  %2851 = trunc i64 %2850 to i32
  %.reg2mem384 = alloca i8**, i32 %2851, align 8
  %.reg2mem381 = alloca i8**, align 8
  %.reg2mem378 = alloca i8**, align 8
  %.reg2mem375 = alloca i8**, align 8
  %.reg2mem371 = alloca i8**, align 8
  %.reg2mem368 = alloca i8**, align 8
  %.reg2mem364 = alloca i8**, align 8
  %.reg2mem361 = alloca i8**, align 8
  %2852 = add i64 %97, -4310222039658806140
  %2853 = sub i64 0, %97
  %2854 = add i64 4310222039658806140, %2853
  %2855 = sub i64 0, %2854
  %2856 = or i64 %97, -3827381500963241549
  %2857 = and i64 -3827381500963241549, %97
  %2858 = xor i64 -3827381500963241549, %97
  %2859 = or i64 %2857, %2858
  %2860 = xor i64 %2859, %2855
  %2861 = xor i64 %2860, %2852
  %2862 = xor i64 %2861, %2856
  %2863 = xor i64 %2862, -4270044395856621471
  %2864 = add i64 %95, -1261149179998039901
  %2865 = add i64 2283630661201883163, %95
  %2866 = sub i64 %2865, 3544779841199923064
  %2867 = and i64 %76, 6883976289148419660
  %2868 = xor i64 %76, -1
  %2869 = xor i64 6883976289148419660, %2868
  %2870 = and i64 %2869, 6883976289148419660
  %2871 = xor i64 %2866, %2870
  %2872 = xor i64 %2871, %2864
  %2873 = xor i64 %2872, %2867
  %2874 = xor i64 %2873, -7106497284457819231
  %2875 = mul i64 %2863, %2874
  %2876 = trunc i64 %2875 to i32
  %.reg2mem358 = alloca i8**, i32 %2876, align 8
  %.reg2mem355 = alloca i8**, align 8
  %.reg2mem350 = alloca i8**, align 8
  %.reg2mem347 = alloca i8**, align 8
  %.reg2mem344 = alloca i8**, align 8
  %.reg2mem341 = alloca i8**, align 8
  %2877 = sext i32 %59 to i64
  %2878 = and i64 %2877, 5877617292581854984
  %2879 = or i64 -5877617292581854985, %2877
  %2880 = sub i64 %2879, -5877617292581854985
  %2881 = add i64 %77, 7669216255045295878
  %2882 = sub i64 0, %77
  %2883 = sub i64 7669216255045295878, %2882
  %2884 = xor i64 %2878, %2881
  %2885 = xor i64 %2884, -4046295629056616991
  %2886 = xor i64 %2885, %2880
  %2887 = xor i64 %2886, %2883
  %2888 = sext i32 %72 to i64
  %2889 = and i64 %2888, 2411408167727452359
  %2890 = or i64 -2411408167727452360, %2888
  %2891 = sub i64 %2890, -2411408167727452360
  %2892 = or i64 %71, 1144091765044988137
  %2893 = and i64 1144091765044988137, %71
  %2894 = xor i64 1144091765044988137, %71
  %2895 = or i64 %2893, %2894
  %2896 = xor i64 -490620357775348191, %2895
  %2897 = xor i64 %2896, %2891
  %2898 = xor i64 %2897, %2889
  %2899 = xor i64 %2898, %2892
  %2900 = mul i64 %2887, %2899
  %2901 = trunc i64 %2900 to i32
  %.reg2mem338 = alloca i8**, i32 %2901, align 8
  %.reg2mem335 = alloca i8**, align 8
  %.reg2mem332 = alloca i8**, align 8
  %.reg2mem329 = alloca i8**, align 8
  %.reg2mem326 = alloca i8**, align 8
  %.reg2mem323 = alloca i8**, align 8
  %.reg2mem320 = alloca i8**, align 8
  %.reg2mem317 = alloca i8**, align 8
  %.reg2mem314 = alloca i8**, align 8
  %.reg2mem311 = alloca i8**, align 8
  %.reg2mem308 = alloca i8**, align 8
  %.reg2mem305 = alloca i8**, align 8
  %2902 = or i64 %101, 2947068769983407224
  %2903 = xor i64 %101, -1
  %2904 = and i64 %2903, -8870509477156168091
  %2905 = and i64 %101, 8870509477156168090
  %2906 = or i64 %2904, %2905
  %2907 = xor i64 -6051841954271135203, %2906
  %2908 = xor i64 %101, -1
  %2909 = or i64 -2947068769983407225, %2908
  %2910 = xor i64 %2909, -1
  %2911 = and i64 %2910, -1
  %2912 = or i64 %2907, %2911
  %2913 = add i64 %95, -1595246747617140898
  %2914 = and i64 -1595246747617140898, %95
  %2915 = or i64 -1595246747617140898, %95
  %2916 = add i64 %2914, %2915
  %2917 = and i64 %101, -3639666401493410442
  %2918 = xor i64 %101, -1
  %2919 = or i64 3639666401493410441, %2918
  %2920 = xor i64 %2919, -1
  %2921 = and i64 %2920, -1
  %2922 = xor i64 %2912, %2916
  %2923 = xor i64 %2922, %2917
  %2924 = xor i64 %2923, %2902
  %2925 = xor i64 %2924, %2921
  %2926 = xor i64 %2925, %2913
  %2927 = xor i64 %2926, -6049841662171152061
  %2928 = sext i32 %0 to i64
  %2929 = and i64 %2928, -3625273631991448437
  %2930 = xor i64 %2928, -1
  %2931 = xor i64 -3625273631991448437, %2930
  %2932 = and i64 %2931, -3625273631991448437
  %2933 = or i64 %69, -8119957950994620623
  %2934 = xor i64 %69, -1
  %2935 = and i64 %2934, -1938022787303846929
  %2936 = and i64 %69, 1938022787303846928
  %2937 = or i64 %2935, %2936
  %2938 = xor i64 7659180170007221470, %2937
  %2939 = xor i64 %69, -1
  %2940 = or i64 8119957950994620622, %2939
  %2941 = xor i64 %2940, -1
  %2942 = and i64 %2941, -1
  %2943 = or i64 %2938, %2942
  %2944 = sext i32 %92 to i64
  %2945 = add i64 %2944, 5896119082989697069
  %2946 = add i64 1647343613167636867, %2944
  %2947 = sub i64 %2946, -4248775469822060202
  %2948 = xor i64 %2947, %2945
  %2949 = xor i64 %2948, %2933
  %2950 = xor i64 %2949, %2932
  %2951 = xor i64 %2950, %2929
  %2952 = xor i64 %2951, -7001900833104948373
  %2953 = xor i64 %2952, %2943
  %2954 = mul i64 %2927, %2953
  %2955 = trunc i64 %2954 to i32
  %.reg2mem302 = alloca i8**, i32 %2955, align 8
  %.reg2mem299 = alloca i8**, align 8
  %.reg2mem296 = alloca i8**, align 8
  %2956 = sext i32 %92 to i64
  %2957 = or i64 %2956, 8230162609119367255
  %2958 = and i64 8230162609119367255, %2956
  %2959 = xor i64 8230162609119367255, %2956
  %2960 = or i64 %2958, %2959
  %2961 = sext i32 %92 to i64
  %2962 = and i64 %2961, -1896377163917238640
  %2963 = xor i64 %2961, -1
  %2964 = xor i64 -1896377163917238640, %2963
  %2965 = and i64 %2964, -1896377163917238640
  %2966 = xor i64 %2957, 655928057192078595
  %2967 = xor i64 %2966, %2965
  %2968 = xor i64 %2967, %2960
  %2969 = xor i64 %2968, %2962
  %2970 = sext i32 %49 to i64
  %2971 = add i64 %2970, -3315558224091867585
  %2972 = add i64 996233951853144073, %2970
  %2973 = add i64 %2972, -4311792175945011658
  %2974 = add i64 %77, -8459889146771770749
  %2975 = add i64 1671663782221994940, %77
  %2976 = add i64 %2975, 8315191144715785927
  %2977 = xor i64 -2395442564356508245, %2974
  %2978 = xor i64 %2977, %2976
  %2979 = xor i64 %2978, %2973
  %2980 = xor i64 %2979, %2971
  %2981 = mul i64 %2969, %2980
  %2982 = trunc i64 %2981 to i32
  %.reg2mem293 = alloca i8**, i32 %2982, align 8
  %.reg2mem290 = alloca i8**, align 8
  %.reg2mem287 = alloca i8**, align 8
  %.reg2mem284 = alloca i8**, align 8
  %2983 = or i64 %96, -779254111826745489
  %2984 = xor i64 %96, -1
  %2985 = and i64 %2984, 4307479532080479215
  %2986 = and i64 %96, -4307479532080479216
  %2987 = or i64 %2985, %2986
  %2988 = xor i64 -3537378167530333056, %2987
  %2989 = xor i64 %96, -1
  %2990 = or i64 779254111826745488, %2989
  %2991 = xor i64 %2990, -1
  %2992 = and i64 %2991, -1
  %2993 = or i64 %2988, %2992
  %2994 = sext i32 %49 to i64
  %2995 = and i64 %2994, 2995910914038418542
  %2996 = or i64 -2995910914038418543, %2994
  %2997 = sub i64 %2996, -2995910914038418543
  %2998 = xor i64 %2995, -5486952827800099697
  %2999 = xor i64 %2998, %2993
  %3000 = xor i64 %2999, %2997
  %3001 = xor i64 %3000, %2983
  %3002 = sext i32 %170 to i64
  %3003 = add i64 %3002, -7657864421663977292
  %3004 = sub i64 0, %3002
  %3005 = sub i64 -7657864421663977292, %3004
  %3006 = and i64 %77, 7943459867667737353
  %3007 = xor i64 %77, -1
  %3008 = or i64 -7943459867667737354, %3007
  %3009 = xor i64 %3008, -1
  %3010 = and i64 %3009, -1
  %3011 = xor i64 %3010, %3006
  %3012 = xor i64 %3011, 3328956858236811887
  %3013 = xor i64 %3012, %3005
  %3014 = xor i64 %3013, %3003
  %3015 = mul i64 %3001, %3014
  %3016 = trunc i64 %3015 to i32
  %.reg2mem281 = alloca i8**, i32 %3016, align 8
  %3017 = sext i32 %72 to i64
  %3018 = and i64 %3017, 5573919063202023609
  %3019 = xor i64 %3017, -1
  %3020 = or i64 -5573919063202023610, %3019
  %3021 = xor i64 %3020, -1
  %3022 = and i64 %3021, -1
  %3023 = sext i32 %60 to i64
  %3024 = add i64 %3023, 3740132198758335276
  %3025 = sub i64 0, %3023
  %3026 = add i64 -3740132198758335276, %3025
  %3027 = sub i64 0, %3026
  %3028 = sext i32 %0 to i64
  %3029 = or i64 %3028, 7007121469105089839
  %3030 = xor i64 %3028, -1
  %3031 = and i64 7007121469105089839, %3030
  %3032 = add i64 %3031, %3028
  %3033 = xor i64 %3022, %3027
  %3034 = xor i64 %3033, %3018
  %3035 = xor i64 %3034, -2329915273648659427
  %3036 = xor i64 %3035, %3032
  %3037 = xor i64 %3036, %3024
  %3038 = xor i64 %3037, %3029
  %3039 = sext i32 %50 to i64
  %3040 = or i64 %3039, -5936449947782622213
  %3041 = xor i64 %3039, -1
  %3042 = and i64 %3041, 7065247768045060112
  %3043 = and i64 %3039, -7065247768045060113
  %3044 = or i64 %3042, %3043
  %3045 = xor i64 -3489811076634815509, %3044
  %3046 = xor i64 %3039, -1
  %3047 = or i64 5936449947782622212, %3046
  %3048 = xor i64 %3047, -1
  %3049 = and i64 %3048, -1
  %3050 = or i64 %3045, %3049
  %3051 = add i64 %69, -8969742219788174994
  %3052 = xor i64 -8969742219788174994, %69
  %3053 = and i64 -8969742219788174994, %69
  %3054 = mul i64 2, %3053
  %3055 = add i64 %3052, %3054
  %3056 = sext i32 %50 to i64
  %3057 = add i64 %3056, -1348945648244244073
  %3058 = sub i64 0, %3056
  %3059 = sub i64 -1348945648244244073, %3058
  %3060 = xor i64 8635907495993130549, %3040
  %3061 = xor i64 %3060, %3050
  %3062 = xor i64 %3061, %3059
  %3063 = xor i64 %3062, %3057
  %3064 = xor i64 %3063, %3051
  %3065 = xor i64 %3064, %3055
  %3066 = mul i64 %3038, %3065
  %3067 = trunc i64 %3066 to i32
  %.reg2mem278 = alloca i8**, i32 %3067, align 8
  %.reg2mem275 = alloca i8**, align 8
  %.reg2mem272 = alloca i8**, align 8
  %.reg2mem269 = alloca i8**, align 8
  %.reg2mem266 = alloca i8**, align 8
  %3068 = sext i32 %171 to i64
  %3069 = or i64 %3068, -607001763853923949
  %3070 = xor i64 %3068, -1
  %3071 = and i64 -607001763853923949, %3070
  %3072 = add i64 %3071, %3068
  %3073 = and i64 %71, 6604494498848110104
  %3074 = or i64 -6604494498848110105, %71
  %3075 = sub i64 %3074, -6604494498848110105
  %3076 = xor i64 %3073, %3069
  %3077 = xor i64 %3076, %3072
  %3078 = xor i64 %3077, 2254058987555989325
  %3079 = xor i64 %3078, %3075
  %3080 = sext i32 %50 to i64
  %3081 = and i64 %3080, -2154618255624835968
  %3082 = xor i64 %3080, -1
  %3083 = or i64 2154618255624835967, %3082
  %3084 = xor i64 %3083, -1
  %3085 = and i64 %3084, -1
  %3086 = sext i32 %59 to i64
  %3087 = and i64 %3086, 3897440676339917677
  %3088 = xor i64 %3086, -1
  %3089 = or i64 -3897440676339917678, %3088
  %3090 = xor i64 %3089, -1
  %3091 = and i64 %3090, -1
  %3092 = add i64 %101, -7269190961793038863
  %3093 = sub i64 0, %101
  %3094 = sub i64 -7269190961793038863, %3093
  %3095 = xor i64 %3085, %3087
  %3096 = xor i64 %3095, %3094
  %3097 = xor i64 %3096, %3081
  %3098 = xor i64 %3097, %3091
  %3099 = xor i64 %3098, %3092
  %3100 = xor i64 %3099, -6393206063684097659
  %3101 = mul i64 %3079, %3100
  %3102 = trunc i64 %3101 to i32
  %.reg2mem263 = alloca i8**, i32 %3102, align 8
  %.reg2mem260 = alloca i8**, align 8
  %.reg2mem257 = alloca i8**, align 8
  %3103 = sext i32 %72 to i64
  %3104 = or i64 %3103, 250585244394978502
  %3105 = xor i64 %3103, -1
  %3106 = and i64 250585244394978502, %3105
  %3107 = add i64 %3106, %3103
  %3108 = and i64 %11, -331436109091448581
  %3109 = or i64 331436109091448580, %11
  %3110 = sub i64 %3109, 331436109091448580
  %3111 = sext i32 %60 to i64
  %3112 = or i64 %3111, 4373114247085036156
  %3113 = xor i64 %3111, -1
  %3114 = and i64 4373114247085036156, %3113
  %3115 = add i64 %3114, %3111
  %3116 = xor i64 %3112, 7388656071087393581
  %3117 = xor i64 %3116, %3104
  %3118 = xor i64 %3117, %3115
  %3119 = xor i64 %3118, %3107
  %3120 = xor i64 %3119, %3108
  %3121 = xor i64 %3120, %3110
  %3122 = and i64 %95, -6792335874649379337
  %3123 = xor i64 %95, -1
  %3124 = xor i64 -6792335874649379337, %3123
  %3125 = and i64 %3124, -6792335874649379337
  %3126 = sext i32 %50 to i64
  %3127 = add i64 %3126, 8823884247788753758
  %3128 = sub i64 0, %3126
  %3129 = add i64 -8823884247788753758, %3128
  %3130 = sub i64 0, %3129
  %3131 = xor i64 %3125, 3973686161265458341
  %3132 = xor i64 %3131, %3127
  %3133 = xor i64 %3132, %3122
  %3134 = xor i64 %3133, %3130
  %3135 = mul i64 %3121, %3134
  %3136 = trunc i64 %3135 to i32
  %.reg2mem254 = alloca i8**, i32 %3136, align 8
  %.reg2mem251 = alloca i8**, align 8
  %.reg2mem248 = alloca i8**, align 8
  %.reg2mem245 = alloca i8**, align 8
  %3137 = add i64 %101, 2876118255334247681
  %3138 = xor i64 2876118255334247681, %101
  %3139 = and i64 2876118255334247681, %101
  %3140 = mul i64 2, %3139
  %3141 = add i64 %3138, %3140
  %3142 = sext i32 %60 to i64
  %3143 = add i64 %3142, -3630645001391046143
  %3144 = xor i64 -3630645001391046143, %3142
  %3145 = and i64 -3630645001391046143, %3142
  %3146 = mul i64 2, %3145
  %3147 = add i64 %3144, %3146
  %3148 = xor i64 %3141, %3147
  %3149 = xor i64 %3148, %3143
  %3150 = xor i64 %3149, %3137
  %3151 = xor i64 %3150, 5769032735376247581
  %3152 = sext i32 %92 to i64
  %3153 = add i64 %3152, -1468657471171163178
  %3154 = and i64 -1468657471171163178, %3152
  %3155 = or i64 -1468657471171163178, %3152
  %3156 = add i64 %3154, %3155
  %3157 = and i64 %101, -2491378613879908906
  %3158 = xor i64 %101, -1
  %3159 = or i64 2491378613879908905, %3158
  %3160 = xor i64 %3159, -1
  %3161 = and i64 %3160, -1
  %3162 = add i64 %91, 560606517293481198
  %3163 = xor i64 560606517293481198, %91
  %3164 = and i64 560606517293481198, %91
  %3165 = mul i64 2, %3164
  %3166 = add i64 %3163, %3165
  %3167 = xor i64 %3161, %3156
  %3168 = xor i64 %3167, %3166
  %3169 = xor i64 %3168, 79413693618294581
  %3170 = xor i64 %3169, %3162
  %3171 = xor i64 %3170, %3153
  %3172 = xor i64 %3171, %3157
  %3173 = mul i64 %3151, %3172
  %3174 = trunc i64 %3173 to i32
  %.reg2mem242 = alloca i8**, i32 %3174, align 8
  %.reg2mem239 = alloca i8**, align 8
  %3175 = or i64 %76, 3580554802387129166
  %3176 = xor i64 %76, -1
  %3177 = and i64 %3176, 7357559376834054518
  %3178 = and i64 %76, -7357559376834054519
  %3179 = or i64 %3177, %3178
  %3180 = xor i64 6317392328937134648, %3179
  %3181 = xor i64 %76, -1
  %3182 = or i64 -3580554802387129167, %3181
  %3183 = xor i64 %3182, -1
  %3184 = and i64 %3183, -1
  %3185 = or i64 %3180, %3184
  %3186 = sext i32 %59 to i64
  %3187 = and i64 %3186, -2212022121356067061
  %3188 = or i64 2212022121356067060, %3186
  %3189 = sub i64 %3188, 2212022121356067060
  %3190 = add i64 %91, -2951081957522197951
  %3191 = xor i64 -2951081957522197951, %91
  %3192 = and i64 -2951081957522197951, %91
  %3193 = mul i64 2, %3192
  %3194 = add i64 %3191, %3193
  %3195 = xor i64 %3187, -7884189341737121405
  %3196 = xor i64 %3195, %3185
  %3197 = xor i64 %3196, %3189
  %3198 = xor i64 %3197, %3194
  %3199 = xor i64 %3198, %3190
  %3200 = xor i64 %3199, %3175
  %3201 = add i64 %97, -4749389659115758444
  %3202 = and i64 -4749389659115758444, %97
  %3203 = or i64 -4749389659115758444, %97
  %3204 = add i64 %3202, %3203
  %3205 = sext i32 %0 to i64
  %3206 = add i64 %3205, -2930657751150267035
  %3207 = add i64 -4114276485917733377, %3205
  %3208 = add i64 %3207, 1183618734767466342
  %3209 = add i64 %11, -276498580923376307
  %3210 = sub i64 0, %11
  %3211 = add i64 276498580923376307, %3210
  %3212 = sub i64 0, %3211
  %3213 = xor i64 %3206, %3204
  %3214 = xor i64 %3213, -6627569610273862357
  %3215 = xor i64 %3214, %3212
  %3216 = xor i64 %3215, %3209
  %3217 = xor i64 %3216, %3208
  %3218 = xor i64 %3217, %3201
  %3219 = mul i64 %3200, %3218
  %3220 = trunc i64 %3219 to i32
  %.reg2mem236 = alloca i8**, i32 %3220, align 8
  %3221 = or i64 %76, 3877536610162816065
  %3222 = and i64 3877536610162816065, %76
  %3223 = xor i64 3877536610162816065, %76
  %3224 = or i64 %3222, %3223
  %3225 = or i64 %101, -702881024535357131
  %3226 = and i64 -702881024535357131, %101
  %3227 = xor i64 -702881024535357131, %101
  %3228 = or i64 %3226, %3227
  %3229 = xor i64 -2237493760136507595, %3221
  %3230 = xor i64 %3229, %3228
  %3231 = xor i64 %3230, %3224
  %3232 = xor i64 %3231, %3225
  %3233 = or i64 %69, 4238243571108723289
  %3234 = xor i64 %69, -1
  %3235 = and i64 %3234, 2107179803157593101
  %3236 = and i64 %69, -2107179803157593102
  %3237 = or i64 %3235, %3236
  %3238 = xor i64 2877642722390394452, %3237
  %3239 = xor i64 %69, -1
  %3240 = or i64 -4238243571108723290, %3239
  %3241 = xor i64 %3240, -1
  %3242 = and i64 %3241, -1
  %3243 = or i64 %3238, %3242
  %3244 = or i64 %96, 4491830535986743713
  %3245 = xor i64 %96, -1
  %3246 = and i64 %3245, 3506041600149753854
  %3247 = and i64 %96, -3506041600149753855
  %3248 = or i64 %3246, %3247
  %3249 = xor i64 1076859835235239519, %3248
  %3250 = xor i64 %96, -1
  %3251 = or i64 -4491830535986743714, %3250
  %3252 = xor i64 %3251, -1
  %3253 = and i64 %3252, -1
  %3254 = or i64 %3249, %3253
  %3255 = xor i64 %3243, %3254
  %3256 = xor i64 %3255, 1641287385438882589
  %3257 = xor i64 %3256, %3244
  %3258 = xor i64 %3257, %3233
  %3259 = mul i64 %3232, %3258
  %3260 = trunc i64 %3259 to i32
  %.reg2mem233 = alloca i8**, i32 %3260, align 8
  %.reg2mem230 = alloca i8**, align 8
  %.reg2mem227 = alloca i8**, align 8
  %.reg2mem224 = alloca i8**, align 8
  %.reg2mem221 = alloca i8**, align 8
  %.reg2mem218 = alloca i8**, align 8
  %.reg2mem215 = alloca i8**, align 8
  %.reg2mem212 = alloca i8**, align 8
  %.reg2mem209 = alloca i8**, align 8
  %.reg2mem206 = alloca i8**, align 8
  %.reg2mem203 = alloca i8**, align 8
  %3261 = and i64 %76, -5095789886423437783
  %3262 = or i64 5095789886423437782, %76
  %3263 = sub i64 %3262, 5095789886423437782
  %3264 = sext i32 %171 to i64
  %3265 = and i64 %3264, 4771608564710184987
  %3266 = or i64 -4771608564710184988, %3264
  %3267 = sub i64 %3266, -4771608564710184988
  %3268 = sext i32 %50 to i64
  %3269 = and i64 %3268, -1053969675419868004
  %3270 = or i64 1053969675419868003, %3268
  %3271 = sub i64 %3270, 1053969675419868003
  %3272 = xor i64 -2750031165103107325, %3265
  %3273 = xor i64 %3272, %3267
  %3274 = xor i64 %3273, %3263
  %3275 = xor i64 %3274, %3271
  %3276 = xor i64 %3275, %3269
  %3277 = xor i64 %3276, %3261
  %3278 = add i64 %97, -2480366405578644972
  %3279 = add i64 -1231066126669200237, %97
  %3280 = sub i64 %3279, 1249300278909444735
  %3281 = add i64 %71, 387316680555036962
  %3282 = sub i64 0, %71
  %3283 = sub i64 387316680555036962, %3282
  %3284 = xor i64 %3278, 7071148050843234219
  %3285 = xor i64 %3284, %3281
  %3286 = xor i64 %3285, %3283
  %3287 = xor i64 %3286, %3280
  %3288 = mul i64 %3277, %3287
  %3289 = trunc i64 %3288 to i32
  %.reg2mem200 = alloca i8**, i32 %3289, align 8
  %.reg2mem197 = alloca i8**, align 8
  %.reg2mem194 = alloca i8**, align 8
  %.reg2mem191 = alloca i8**, align 8
  %.reg2mem188 = alloca i8**, align 8
  %.reg2mem185 = alloca i8**, align 8
  %.reg2mem182 = alloca i8**, align 8
  %.reg2mem178 = alloca i8**, align 8
  %.reg2mem175 = alloca i8**, align 8
  %.reg2mem172 = alloca i8**, align 8
  %.reg2mem169 = alloca i8**, align 8
  %.reg2mem166 = alloca i8**, align 8
  %3290 = sext i32 %170 to i64
  %3291 = add i64 %3290, 3176038111750866427
  %3292 = sub i64 0, %3290
  %3293 = sub i64 3176038111750866427, %3292
  %3294 = sext i32 %60 to i64
  %3295 = and i64 %3294, 6997719400222182615
  %3296 = xor i64 %3294, -1
  %3297 = xor i64 6997719400222182615, %3296
  %3298 = and i64 %3297, 6997719400222182615
  %3299 = sext i32 %0 to i64
  %3300 = add i64 %3299, 717946790265434945
  %3301 = and i64 717946790265434945, %3299
  %3302 = or i64 717946790265434945, %3299
  %3303 = add i64 %3301, %3302
  %3304 = xor i64 %3303, %3298
  %3305 = xor i64 %3304, %3300
  %3306 = xor i64 %3305, %3291
  %3307 = xor i64 %3306, -6388679095080733375
  %3308 = xor i64 %3307, %3295
  %3309 = xor i64 %3308, %3293
  %3310 = sext i32 %50 to i64
  %3311 = or i64 %3310, -5945270691932288817
  %3312 = xor i64 %3310, -1
  %3313 = and i64 -5945270691932288817, %3312
  %3314 = add i64 %3313, %3310
  %3315 = sext i32 %72 to i64
  %3316 = and i64 %3315, -624325359191777470
  %3317 = xor i64 %3315, -1
  %3318 = xor i64 -624325359191777470, %3317
  %3319 = and i64 %3318, -624325359191777470
  %3320 = or i64 %11, -7032392646797622529
  %3321 = xor i64 %11, -1
  %3322 = and i64 %3321, -5273031685893858424
  %3323 = and i64 %11, 5273031685893858423
  %3324 = or i64 %3322, %3323
  %3325 = xor i64 2933393372702169463, %3324
  %3326 = xor i64 %11, -1
  %3327 = or i64 7032392646797622528, %3326
  %3328 = xor i64 %3327, -1
  %3329 = and i64 %3328, -1
  %3330 = or i64 %3325, %3329
  %3331 = xor i64 %3330, %3316
  %3332 = xor i64 %3331, %3314
  %3333 = xor i64 %3332, %3311
  %3334 = xor i64 %3333, -1198439511179142463
  %3335 = xor i64 %3334, %3320
  %3336 = xor i64 %3335, %3319
  %3337 = mul i64 %3309, %3336
  %3338 = trunc i64 %3337 to i32
  %.reg2mem163 = alloca i8**, i32 %3338, align 8
  %.reg2mem160 = alloca i8**, align 8
  %.reg2mem157 = alloca i8**, align 8
  %3339 = sext i32 %170 to i64
  %3340 = or i64 %3339, -175554376301498025
  %3341 = and i64 -175554376301498025, %3339
  %3342 = xor i64 -175554376301498025, %3339
  %3343 = or i64 %3341, %3342
  %3344 = sext i32 %50 to i64
  %3345 = or i64 %3344, 6046904239202271291
  %3346 = and i64 6046904239202271291, %3344
  %3347 = xor i64 6046904239202271291, %3344
  %3348 = or i64 %3346, %3347
  %3349 = add i64 %91, -1757315610130764737
  %3350 = add i64 -8969011809709412671, %91
  %3351 = add i64 %3350, 7211696199578647934
  %3352 = xor i64 %3351, %3348
  %3353 = xor i64 %3352, %3340
  %3354 = xor i64 %3353, %3349
  %3355 = xor i64 %3354, %3345
  %3356 = xor i64 %3355, 1827451354888836879
  %3357 = xor i64 %3356, %3343
  %3358 = sext i32 %170 to i64
  %3359 = and i64 %3358, 987452355362804008
  %3360 = xor i64 %3358, -1
  %3361 = xor i64 987452355362804008, %3360
  %3362 = and i64 %3361, 987452355362804008
  %3363 = sext i32 %72 to i64
  %3364 = add i64 %3363, -2081446019508787483
  %3365 = sub i64 0, %3363
  %3366 = sub i64 -2081446019508787483, %3365
  %3367 = or i64 %91, 6201911147392248197
  %3368 = and i64 6201911147392248197, %91
  %3369 = xor i64 6201911147392248197, %91
  %3370 = or i64 %3368, %3369
  %3371 = xor i64 %3367, -8731672971411621905
  %3372 = xor i64 %3371, %3359
  %3373 = xor i64 %3372, %3370
  %3374 = xor i64 %3373, %3364
  %3375 = xor i64 %3374, %3366
  %3376 = xor i64 %3375, %3362
  %3377 = mul i64 %3357, %3376
  %3378 = trunc i64 %3377 to i32
  %.reg2mem154 = alloca i8**, i32 %3378, align 8
  %.reg2mem151 = alloca i8**, align 8
  %.reg2mem148 = alloca i8**, align 8
  %.reg2mem145 = alloca i8**, align 8
  %.reg2mem142 = alloca i8**, align 8
  %.reg2mem139 = alloca i8**, align 8
  %.reg2mem136 = alloca i8**, align 8
  %.reg2mem133 = alloca i8**, align 8
  %.reg2mem130 = alloca i8**, align 8
  %.reg2mem127 = alloca i8**, align 8
  %3379 = sext i32 %50 to i64
  %3380 = or i64 %3379, -313290992610011211
  %3381 = and i64 -313290992610011211, %3379
  %3382 = xor i64 -313290992610011211, %3379
  %3383 = or i64 %3381, %3382
  %3384 = or i64 %11, -2985042967160509604
  %3385 = and i64 -2985042967160509604, %11
  %3386 = xor i64 -2985042967160509604, %11
  %3387 = or i64 %3385, %3386
  %3388 = add i64 %53, 3983084730316055385
  %3389 = add i64 -7573000350726604422, %53
  %3390 = add i64 %3389, -6890658992666891809
  %3391 = xor i64 %3388, %3390
  %3392 = xor i64 %3391, %3383
  %3393 = xor i64 %3392, %3387
  %3394 = xor i64 %3393, %3384
  %3395 = xor i64 %3394, 3728385837128489345
  %3396 = xor i64 %3395, %3380
  %3397 = sext i32 %171 to i64
  %3398 = add i64 %3397, 8645335839734477615
  %3399 = sub i64 0, %3397
  %3400 = add i64 -8645335839734477615, %3399
  %3401 = sub i64 0, %3400
  %3402 = or i64 %53, -6277323820876795195
  %3403 = xor i64 %53, -1
  %3404 = and i64 %3403, 1672654220722215671
  %3405 = and i64 %53, -1672654220722215672
  %3406 = or i64 %3404, %3405
  %3407 = xor i64 -4624069712416937934, %3406
  %3408 = xor i64 %53, -1
  %3409 = or i64 6277323820876795194, %3408
  %3410 = xor i64 %3409, -1
  %3411 = and i64 %3410, -1
  %3412 = or i64 %3407, %3411
  %3413 = add i64 %69, -7101705778589513649
  %3414 = add i64 -5455952212605090634, %69
  %3415 = add i64 %3414, -1645753565984423015
  %3416 = xor i64 %3415, %3398
  %3417 = xor i64 %3416, %3402
  %3418 = xor i64 %3417, %3412
  %3419 = xor i64 %3418, 3994961084707907201
  %3420 = xor i64 %3419, %3401
  %3421 = xor i64 %3420, %3413
  %3422 = mul i64 %3396, %3421
  %3423 = trunc i64 %3422 to i32
  %.reg2mem124 = alloca i8**, i32 %3423, align 8
  %.reg2mem121 = alloca i8**, align 8
  %.reg2mem118 = alloca i8**, align 8
  %.reg2mem115 = alloca i8**, align 8
  %.reg2mem101 = alloca i8**, align 8
  %.reg2mem98 = alloca i8**, align 8
  %.reg2mem95 = alloca i8**, align 8
  %.reg2mem92 = alloca i8**, align 8
  %.reg2mem89 = alloca i8**, align 8
  %.reg2mem84 = alloca i8**, align 8
  %.reg2mem81 = alloca i8**, align 8
  %.reg2mem78 = alloca i8**, align 8
  %.reg2mem75 = alloca i8**, align 8
  %.reg2mem72 = alloca i8**, align 8
  %.reg2mem = alloca i8**, align 8
  %JumpTable = alloca i8*, i32 186, align 8
  %3424 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@"9941920946239825184", %BogusBasciBlock), i8** %3424, align 8
  %3425 = getelementptr i8*, i8** %JumpTable, i32 1
  store i8** %3425, i8*** %.reg2mem, align 8
  %.reload71 = load i8**, i8*** %.reg2mem, align 8
  store i8* blockaddress(@"9941920946239825184", %EntryBasicBlockSplit), i8** %.reload71, align 8
  %3426 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8** %3426, i8*** %.reg2mem72, align 8
  %.reload74 = load i8**, i8*** %.reg2mem72, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock57), i8** %.reload74, align 8
  %3427 = getelementptr i8*, i8** %JumpTable, i32 3
  store i8** %3427, i8*** %.reg2mem75, align 8
  %.reload77 = load i8**, i8*** %.reg2mem75, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock55), i8** %.reload77, align 8
  %3428 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8** %3428, i8*** %.reg2mem78, align 8
  %.reload80 = load i8**, i8*** %.reg2mem78, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock53), i8** %.reload80, align 8
  %3429 = getelementptr i8*, i8** %JumpTable, i32 5
  store i8** %3429, i8*** %.reg2mem81, align 8
  %.reload83 = load i8**, i8*** %.reg2mem81, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock51), i8** %.reload83, align 8
  %3430 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8** %3430, i8*** %.reg2mem84, align 8
  %.reload88 = load i8**, i8*** %.reg2mem84, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock49), i8** %.reload88, align 8
  %3431 = getelementptr i8*, i8** %JumpTable, i32 7
  store i8** %3431, i8*** %.reg2mem89, align 8
  %.reload91 = load i8**, i8*** %.reg2mem89, align 8
  store i8* blockaddress(@"9941920946239825184", %LeafBlock47), i8** %.reload91, align 8
  %3432 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8** %3432, i8*** %.reg2mem92, align 8
  %.reload94 = load i8**, i8*** %.reg2mem92, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock45), i8** %.reload94, align 8
  %3433 = getelementptr i8*, i8** %JumpTable, i32 9
  store i8** %3433, i8*** %.reg2mem95, align 8
  %.reload97 = load i8**, i8*** %.reg2mem95, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock43), i8** %.reload97, align 8
  %3434 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8** %3434, i8*** %.reg2mem98, align 8
  %.reload100 = load i8**, i8*** %.reg2mem98, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock41), i8** %.reload100, align 8
  %3435 = getelementptr i8*, i8** %JumpTable, i32 11
  store i8** %3435, i8*** %.reg2mem101, align 8
  %.reload114 = load i8**, i8*** %.reg2mem101, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock39), i8** %.reload114, align 8
  %3436 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8** %3436, i8*** %.reg2mem115, align 8
  %.reload117 = load i8**, i8*** %.reg2mem115, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock37), i8** %.reload117, align 8
  %3437 = getelementptr i8*, i8** %JumpTable, i32 13
  store i8** %3437, i8*** %.reg2mem118, align 8
  %.reload120 = load i8**, i8*** %.reg2mem118, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock35), i8** %.reload120, align 8
  %3438 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8** %3438, i8*** %.reg2mem121, align 8
  %.reload123 = load i8**, i8*** %.reg2mem121, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock33), i8** %.reload123, align 8
  %3439 = getelementptr i8*, i8** %JumpTable, i32 15
  store i8** %3439, i8*** %.reg2mem124, align 8
  %.reload126 = load i8**, i8*** %.reg2mem124, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock31), i8** %.reload126, align 8
  %3440 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8** %3440, i8*** %.reg2mem127, align 8
  %.reload129 = load i8**, i8*** %.reg2mem127, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock29), i8** %.reload129, align 8
  %3441 = getelementptr i8*, i8** %JumpTable, i32 17
  store i8** %3441, i8*** %.reg2mem130, align 8
  %.reload132 = load i8**, i8*** %.reg2mem130, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock27), i8** %.reload132, align 8
  %3442 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8** %3442, i8*** %.reg2mem133, align 8
  %.reload135 = load i8**, i8*** %.reg2mem133, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock25), i8** %.reload135, align 8
  %3443 = getelementptr i8*, i8** %JumpTable, i32 19
  store i8** %3443, i8*** %.reg2mem136, align 8
  %.reload138 = load i8**, i8*** %.reg2mem136, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock23), i8** %.reload138, align 8
  %3444 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8** %3444, i8*** %.reg2mem139, align 8
  %.reload141 = load i8**, i8*** %.reg2mem139, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock21), i8** %.reload141, align 8
  %3445 = getelementptr i8*, i8** %JumpTable, i32 21
  store i8** %3445, i8*** %.reg2mem142, align 8
  %.reload144 = load i8**, i8*** %.reg2mem142, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock19), i8** %.reload144, align 8
  %3446 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8** %3446, i8*** %.reg2mem145, align 8
  %.reload147 = load i8**, i8*** %.reg2mem145, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock17), i8** %.reload147, align 8
  %3447 = getelementptr i8*, i8** %JumpTable, i32 23
  store i8** %3447, i8*** %.reg2mem148, align 8
  %.reload150 = load i8**, i8*** %.reg2mem148, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock15), i8** %.reload150, align 8
  %3448 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8** %3448, i8*** %.reg2mem151, align 8
  %.reload153 = load i8**, i8*** %.reg2mem151, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock13), i8** %.reload153, align 8
  %3449 = getelementptr i8*, i8** %JumpTable, i32 25
  store i8** %3449, i8*** %.reg2mem154, align 8
  %.reload156 = load i8**, i8*** %.reg2mem154, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock11), i8** %.reload156, align 8
  %3450 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8** %3450, i8*** %.reg2mem157, align 8
  %.reload159 = load i8**, i8*** %.reg2mem157, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock9), i8** %.reload159, align 8
  %3451 = getelementptr i8*, i8** %JumpTable, i32 27
  store i8** %3451, i8*** %.reg2mem160, align 8
  %.reload162 = load i8**, i8*** %.reg2mem160, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock7), i8** %.reload162, align 8
  %3452 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8** %3452, i8*** %.reg2mem163, align 8
  %.reload165 = load i8**, i8*** %.reg2mem163, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock5), i8** %.reload165, align 8
  %3453 = getelementptr i8*, i8** %JumpTable, i32 29
  store i8** %3453, i8*** %.reg2mem166, align 8
  %.reload168 = load i8**, i8*** %.reg2mem166, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock3), i8** %.reload168, align 8
  %3454 = getelementptr i8*, i8** %JumpTable, i32 30
  store i8** %3454, i8*** %.reg2mem169, align 8
  %.reload171 = load i8**, i8*** %.reg2mem169, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock1), i8** %.reload171, align 8
  %3455 = getelementptr i8*, i8** %JumpTable, i32 31
  store i8** %3455, i8*** %.reg2mem172, align 8
  %.reload174 = load i8**, i8*** %.reg2mem172, align 8
  store i8* blockaddress(@"9941920946239825184", %NodeBlock), i8** %.reload174, align 8
  %3456 = getelementptr i8*, i8** %JumpTable, i32 32
  store i8** %3456, i8*** %.reg2mem175, align 8
  %.reload177 = load i8**, i8*** %.reg2mem175, align 8
  store i8* blockaddress(@"9941920946239825184", %LeafBlock), i8** %.reload177, align 8
  %3457 = getelementptr i8*, i8** %JumpTable, i32 33
  store i8** %3457, i8*** %.reg2mem178, align 8
  %.reload181 = load i8**, i8*** %.reg2mem178, align 8
  store i8* blockaddress(@"9941920946239825184", %"33"), i8** %.reload181, align 8
  %3458 = getelementptr i8*, i8** %JumpTable, i32 34
  store i8** %3458, i8*** %.reg2mem182, align 8
  %.reload184 = load i8**, i8*** %.reg2mem182, align 8
  store i8* blockaddress(@"9941920946239825184", %"34"), i8** %.reload184, align 8
  %3459 = getelementptr i8*, i8** %JumpTable, i32 35
  store i8** %3459, i8*** %.reg2mem185, align 8
  %.reload187 = load i8**, i8*** %.reg2mem185, align 8
  store i8* blockaddress(@"9941920946239825184", %"35"), i8** %.reload187, align 8
  %3460 = getelementptr i8*, i8** %JumpTable, i32 36
  store i8** %3460, i8*** %.reg2mem188, align 8
  %.reload190 = load i8**, i8*** %.reg2mem188, align 8
  store i8* blockaddress(@"9941920946239825184", %"36"), i8** %.reload190, align 8
  %3461 = getelementptr i8*, i8** %JumpTable, i32 37
  store i8** %3461, i8*** %.reg2mem191, align 8
  %.reload193 = load i8**, i8*** %.reg2mem191, align 8
  store i8* blockaddress(@"9941920946239825184", %"37"), i8** %.reload193, align 8
  %3462 = getelementptr i8*, i8** %JumpTable, i32 38
  store i8** %3462, i8*** %.reg2mem194, align 8
  %.reload196 = load i8**, i8*** %.reg2mem194, align 8
  store i8* blockaddress(@"9941920946239825184", %"38"), i8** %.reload196, align 8
  %3463 = getelementptr i8*, i8** %JumpTable, i32 39
  store i8** %3463, i8*** %.reg2mem197, align 8
  %.reload199 = load i8**, i8*** %.reg2mem197, align 8
  store i8* blockaddress(@"9941920946239825184", %"39"), i8** %.reload199, align 8
  %3464 = getelementptr i8*, i8** %JumpTable, i32 40
  store i8** %3464, i8*** %.reg2mem200, align 8
  %.reload202 = load i8**, i8*** %.reg2mem200, align 8
  store i8* blockaddress(@"9941920946239825184", %"40"), i8** %.reload202, align 8
  %3465 = getelementptr i8*, i8** %JumpTable, i32 41
  store i8** %3465, i8*** %.reg2mem203, align 8
  %.reload205 = load i8**, i8*** %.reg2mem203, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot), i8** %.reload205, align 8
  %3466 = getelementptr i8*, i8** %JumpTable, i32 42
  store i8** %3466, i8*** %.reg2mem206, align 8
  %.reload208 = load i8**, i8*** %.reg2mem206, align 8
  store i8* blockaddress(@"9941920946239825184", %.split), i8** %.reload208, align 8
  %3467 = getelementptr i8*, i8** %JumpTable, i32 43
  store i8** %3467, i8*** %.reg2mem209, align 8
  %.reload211 = load i8**, i8*** %.reg2mem209, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl), i8** %.reload211, align 8
  %3468 = getelementptr i8*, i8** %JumpTable, i32 44
  store i8** %3468, i8*** %.reg2mem212, align 8
  %.reload214 = load i8**, i8*** %.reg2mem212, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub), i8** %.reload214, align 8
  %3469 = getelementptr i8*, i8** %JumpTable, i32 45
  store i8** %3469, i8*** %.reg2mem215, align 8
  %.reload217 = load i8**, i8*** %.reg2mem215, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub5), i8** %.reload217, align 8
  %3470 = getelementptr i8*, i8** %JumpTable, i32 46
  store i8** %3470, i8*** %.reg2mem218, align 8
  %.reload220 = load i8**, i8*** %.reg2mem218, align 8
  store i8* blockaddress(@"9941920946239825184", %"46"), i8** %.reload220, align 8
  %3471 = getelementptr i8*, i8** %JumpTable, i32 47
  store i8** %3471, i8*** %.reg2mem221, align 8
  %.reload223 = load i8**, i8*** %.reg2mem221, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot1), i8** %.reload223, align 8
  %3472 = getelementptr i8*, i8** %JumpTable, i32 48
  store i8** %3472, i8*** %.reg2mem224, align 8
  %.reload226 = load i8**, i8*** %.reg2mem224, align 8
  store i8* blockaddress(@"9941920946239825184", %"48"), i8** %.reload226, align 8
  %3473 = getelementptr i8*, i8** %JumpTable, i32 49
  store i8** %3473, i8*** %.reg2mem227, align 8
  %.reload229 = load i8**, i8*** %.reg2mem227, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub), i8** %.reload229, align 8
  %3474 = getelementptr i8*, i8** %JumpTable, i32 50
  store i8** %3474, i8*** %.reg2mem230, align 8
  %.reload232 = load i8**, i8*** %.reg2mem230, align 8
  store i8* blockaddress(@"9941920946239825184", %.loopexit.exitStub.exitStub), i8** %.reload232, align 8
  %3475 = getelementptr i8*, i8** %JumpTable, i32 51
  store i8** %3475, i8*** %.reg2mem233, align 8
  %.reload235 = load i8**, i8*** %.reg2mem233, align 8
  store i8* blockaddress(@"9941920946239825184", %"51"), i8** %.reload235, align 8
  %3476 = getelementptr i8*, i8** %JumpTable, i32 52
  store i8** %3476, i8*** %.reg2mem236, align 8
  %.reload238 = load i8**, i8*** %.reg2mem236, align 8
  store i8* blockaddress(@"9941920946239825184", %"52"), i8** %.reload238, align 8
  %3477 = getelementptr i8*, i8** %JumpTable, i32 53
  store i8** %3477, i8*** %.reg2mem239, align 8
  %.reload241 = load i8**, i8*** %.reg2mem239, align 8
  store i8* blockaddress(@"9941920946239825184", %"53"), i8** %.reload241, align 8
  %3478 = getelementptr i8*, i8** %JumpTable, i32 54
  store i8** %3478, i8*** %.reg2mem242, align 8
  %.reload244 = load i8**, i8*** %.reg2mem242, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot2), i8** %.reload244, align 8
  %3479 = getelementptr i8*, i8** %JumpTable, i32 55
  store i8** %3479, i8*** %.reg2mem245, align 8
  %.reload247 = load i8**, i8*** %.reg2mem245, align 8
  store i8* blockaddress(@"9941920946239825184", %"55"), i8** %.reload247, align 8
  %3480 = getelementptr i8*, i8** %JumpTable, i32 56
  store i8** %3480, i8*** %.reg2mem248, align 8
  %.reload250 = load i8**, i8*** %.reg2mem248, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub3), i8** %.reload250, align 8
  %3481 = getelementptr i8*, i8** %JumpTable, i32 57
  store i8** %3481, i8*** %.reg2mem251, align 8
  %.reload253 = load i8**, i8*** %.reg2mem251, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub3.exitStub), i8** %.reload253, align 8
  %3482 = getelementptr i8*, i8** %JumpTable, i32 58
  store i8** %3482, i8*** %.reg2mem254, align 8
  %.reload256 = load i8**, i8*** %.reg2mem254, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot4), i8** %.reload256, align 8
  %3483 = getelementptr i8*, i8** %JumpTable, i32 59
  store i8** %3483, i8*** %.reg2mem257, align 8
  %.reload259 = load i8**, i8*** %.reg2mem257, align 8
  store i8* blockaddress(@"9941920946239825184", %"59"), i8** %.reload259, align 8
  %3484 = getelementptr i8*, i8** %JumpTable, i32 60
  store i8** %3484, i8*** %.reg2mem260, align 8
  %.reload262 = load i8**, i8*** %.reg2mem260, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl5), i8** %.reload262, align 8
  %3485 = getelementptr i8*, i8** %JumpTable, i32 61
  store i8** %3485, i8*** %.reg2mem263, align 8
  %.reload265 = load i8**, i8*** %.reg2mem263, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub7), i8** %.reload265, align 8
  %3486 = getelementptr i8*, i8** %JumpTable, i32 62
  store i8** %3486, i8*** %.reg2mem266, align 8
  %.reload268 = load i8**, i8*** %.reg2mem266, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub1), i8** %.reload268, align 8
  %3487 = getelementptr i8*, i8** %JumpTable, i32 63
  store i8** %3487, i8*** %.reg2mem269, align 8
  %.reload271 = load i8**, i8*** %.reg2mem269, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot8), i8** %.reload271, align 8
  %3488 = getelementptr i8*, i8** %JumpTable, i32 64
  store i8** %3488, i8*** %.reg2mem272, align 8
  %.reload274 = load i8**, i8*** %.reg2mem272, align 8
  store i8* blockaddress(@"9941920946239825184", %"64"), i8** %.reload274, align 8
  %3489 = getelementptr i8*, i8** %JumpTable, i32 65
  store i8** %3489, i8*** %.reg2mem275, align 8
  %.reload277 = load i8**, i8*** %.reg2mem275, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub9), i8** %.reload277, align 8
  %3490 = getelementptr i8*, i8** %JumpTable, i32 66
  store i8** %3490, i8*** %.reg2mem278, align 8
  %.reload280 = load i8**, i8*** %.reg2mem278, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub3.exitStub10), i8** %.reload280, align 8
  %3491 = getelementptr i8*, i8** %JumpTable, i32 67
  store i8** %3491, i8*** %.reg2mem281, align 8
  %.reload283 = load i8**, i8*** %.reg2mem281, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot11), i8** %.reload283, align 8
  %3492 = getelementptr i8*, i8** %JumpTable, i32 68
  store i8** %3492, i8*** %.reg2mem284, align 8
  %.reload286 = load i8**, i8*** %.reg2mem284, align 8
  store i8* blockaddress(@"9941920946239825184", %"68"), i8** %.reload286, align 8
  %3493 = getelementptr i8*, i8** %JumpTable, i32 69
  store i8** %3493, i8*** %.reg2mem287, align 8
  %.reload289 = load i8**, i8*** %.reg2mem287, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl12), i8** %.reload289, align 8
  %3494 = getelementptr i8*, i8** %JumpTable, i32 70
  store i8** %3494, i8*** %.reg2mem290, align 8
  %.reload292 = load i8**, i8*** %.reg2mem290, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub14), i8** %.reload292, align 8
  %3495 = getelementptr i8*, i8** %JumpTable, i32 71
  store i8** %3495, i8*** %.reg2mem293, align 8
  %.reload295 = load i8**, i8*** %.reg2mem293, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub715), i8** %.reload295, align 8
  %3496 = getelementptr i8*, i8** %JumpTable, i32 72
  store i8** %3496, i8*** %.reg2mem296, align 8
  %.reload298 = load i8**, i8*** %.reg2mem296, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot16), i8** %.reload298, align 8
  %3497 = getelementptr i8*, i8** %JumpTable, i32 73
  store i8** %3497, i8*** %.reg2mem299, align 8
  %.reload301 = load i8**, i8*** %.reg2mem299, align 8
  store i8* blockaddress(@"9941920946239825184", %"73"), i8** %.reload301, align 8
  %3498 = getelementptr i8*, i8** %JumpTable, i32 74
  store i8** %3498, i8*** %.reg2mem302, align 8
  %.reload304 = load i8**, i8*** %.reg2mem302, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub17), i8** %.reload304, align 8
  %3499 = getelementptr i8*, i8** %JumpTable, i32 75
  store i8** %3499, i8*** %.reg2mem305, align 8
  %.reload307 = load i8**, i8*** %.reg2mem305, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub1.exitStub), i8** %.reload307, align 8
  %3500 = getelementptr i8*, i8** %JumpTable, i32 76
  store i8** %3500, i8*** %.reg2mem308, align 8
  %.reload310 = load i8**, i8*** %.reg2mem308, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot18), i8** %.reload310, align 8
  %3501 = getelementptr i8*, i8** %JumpTable, i32 77
  store i8** %3501, i8*** %.reg2mem311, align 8
  %.reload313 = load i8**, i8*** %.reg2mem311, align 8
  store i8* blockaddress(@"9941920946239825184", %"77"), i8** %.reload313, align 8
  %3502 = getelementptr i8*, i8** %JumpTable, i32 78
  store i8** %3502, i8*** %.reg2mem314, align 8
  %.reload316 = load i8**, i8*** %.reg2mem314, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl19), i8** %.reload316, align 8
  %3503 = getelementptr i8*, i8** %JumpTable, i32 79
  store i8** %3503, i8*** %.reg2mem317, align 8
  %.reload319 = load i8**, i8*** %.reg2mem317, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub21), i8** %.reload319, align 8
  %3504 = getelementptr i8*, i8** %JumpTable, i32 80
  store i8** %3504, i8*** %.reg2mem320, align 8
  %.reload322 = load i8**, i8*** %.reg2mem320, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub122), i8** %.reload322, align 8
  %3505 = getelementptr i8*, i8** %JumpTable, i32 81
  store i8** %3505, i8*** %.reg2mem323, align 8
  %.reload325 = load i8**, i8*** %.reg2mem323, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot23), i8** %.reload325, align 8
  %3506 = getelementptr i8*, i8** %JumpTable, i32 82
  store i8** %3506, i8*** %.reg2mem326, align 8
  %.reload328 = load i8**, i8*** %.reg2mem326, align 8
  store i8* blockaddress(@"9941920946239825184", %"82"), i8** %.reload328, align 8
  %3507 = getelementptr i8*, i8** %JumpTable, i32 83
  store i8** %3507, i8*** %.reg2mem329, align 8
  %.reload331 = load i8**, i8*** %.reg2mem329, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl24), i8** %.reload331, align 8
  %3508 = getelementptr i8*, i8** %JumpTable, i32 84
  store i8** %3508, i8*** %.reg2mem332, align 8
  %.reload334 = load i8**, i8*** %.reg2mem332, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub26), i8** %.reload334, align 8
  %3509 = getelementptr i8*, i8** %JumpTable, i32 85
  store i8** %3509, i8*** %.reg2mem335, align 8
  %.reload337 = load i8**, i8*** %.reg2mem335, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub3), i8** %.reload337, align 8
  %3510 = getelementptr i8*, i8** %JumpTable, i32 86
  store i8** %3510, i8*** %.reg2mem338, align 8
  %.reload340 = load i8**, i8*** %.reg2mem338, align 8
  store i8* blockaddress(@"9941920946239825184", %"86"), i8** %.reload340, align 8
  %3511 = getelementptr i8*, i8** %JumpTable, i32 87
  store i8** %3511, i8*** %.reg2mem341, align 8
  %.reload343 = load i8**, i8*** %.reg2mem341, align 8
  store i8* blockaddress(@"9941920946239825184", %"87"), i8** %.reload343, align 8
  %3512 = getelementptr i8*, i8** %JumpTable, i32 88
  store i8** %3512, i8*** %.reg2mem344, align 8
  %.reload346 = load i8**, i8*** %.reg2mem344, align 8
  store i8* blockaddress(@"9941920946239825184", %"88"), i8** %.reload346, align 8
  %3513 = getelementptr i8*, i8** %JumpTable, i32 89
  store i8** %3513, i8*** %.reg2mem347, align 8
  %.reload349 = load i8**, i8*** %.reg2mem347, align 8
  store i8* blockaddress(@"9941920946239825184", %"89"), i8** %.reload349, align 8
  %3514 = getelementptr i8*, i8** %JumpTable, i32 90
  store i8** %3514, i8*** %.reg2mem350, align 8
  %.reload354 = load i8**, i8*** %.reg2mem350, align 8
  store i8* blockaddress(@"9941920946239825184", %"90"), i8** %.reload354, align 8
  %3515 = getelementptr i8*, i8** %JumpTable, i32 91
  store i8** %3515, i8*** %.reg2mem355, align 8
  %.reload357 = load i8**, i8*** %.reg2mem355, align 8
  store i8* blockaddress(@"9941920946239825184", %"91"), i8** %.reload357, align 8
  %3516 = getelementptr i8*, i8** %JumpTable, i32 92
  store i8** %3516, i8*** %.reg2mem358, align 8
  %.reload360 = load i8**, i8*** %.reg2mem358, align 8
  store i8* blockaddress(@"9941920946239825184", %"92"), i8** %.reload360, align 8
  %3517 = getelementptr i8*, i8** %JumpTable, i32 93
  store i8** %3517, i8*** %.reg2mem361, align 8
  %.reload363 = load i8**, i8*** %.reg2mem361, align 8
  store i8* blockaddress(@"9941920946239825184", %"93"), i8** %.reload363, align 8
  %3518 = getelementptr i8*, i8** %JumpTable, i32 94
  store i8** %3518, i8*** %.reg2mem364, align 8
  %.reload367 = load i8**, i8*** %.reg2mem364, align 8
  store i8* blockaddress(@"9941920946239825184", %"94"), i8** %.reload367, align 8
  %3519 = getelementptr i8*, i8** %JumpTable, i32 95
  store i8** %3519, i8*** %.reg2mem368, align 8
  %.reload370 = load i8**, i8*** %.reg2mem368, align 8
  store i8* blockaddress(@"9941920946239825184", %"95"), i8** %.reload370, align 8
  %3520 = getelementptr i8*, i8** %JumpTable, i32 96
  store i8** %3520, i8*** %.reg2mem371, align 8
  %.reload374 = load i8**, i8*** %.reg2mem371, align 8
  store i8* blockaddress(@"9941920946239825184", %"96"), i8** %.reload374, align 8
  %3521 = getelementptr i8*, i8** %JumpTable, i32 97
  store i8** %3521, i8*** %.reg2mem375, align 8
  %.reload377 = load i8**, i8*** %.reg2mem375, align 8
  store i8* blockaddress(@"9941920946239825184", %.preheader), i8** %.reload377, align 8
  %3522 = getelementptr i8*, i8** %JumpTable, i32 98
  store i8** %3522, i8*** %.reg2mem378, align 8
  %.reload380 = load i8**, i8*** %.reg2mem378, align 8
  store i8* blockaddress(@"9941920946239825184", %"98"), i8** %.reload380, align 8
  %3523 = getelementptr i8*, i8** %JumpTable, i32 99
  store i8** %3523, i8*** %.reg2mem381, align 8
  %.reload383 = load i8**, i8*** %.reg2mem381, align 8
  store i8* blockaddress(@"9941920946239825184", %"99"), i8** %.reload383, align 8
  %3524 = getelementptr i8*, i8** %JumpTable, i32 100
  store i8** %3524, i8*** %.reg2mem384, align 8
  %.reload387 = load i8**, i8*** %.reg2mem384, align 8
  store i8* blockaddress(@"9941920946239825184", %"100"), i8** %.reload387, align 8
  %3525 = getelementptr i8*, i8** %JumpTable, i32 101
  store i8** %3525, i8*** %.reg2mem388, align 8
  %.reload390 = load i8**, i8*** %.reg2mem388, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl27), i8** %.reload390, align 8
  %3526 = getelementptr i8*, i8** %JumpTable, i32 102
  store i8** %3526, i8*** %.reg2mem391, align 8
  %.reload393 = load i8**, i8*** %.reg2mem391, align 8
  store i8* blockaddress(@"9941920946239825184", %"102"), i8** %.reload393, align 8
  %3527 = getelementptr i8*, i8** %JumpTable, i32 103
  store i8** %3527, i8*** %.reg2mem394, align 8
  %.reload396 = load i8**, i8*** %.reg2mem394, align 8
  store i8* blockaddress(@"9941920946239825184", %"103"), i8** %.reload396, align 8
  %3528 = getelementptr i8*, i8** %JumpTable, i32 104
  store i8** %3528, i8*** %.reg2mem397, align 8
  %.reload400 = load i8**, i8*** %.reg2mem397, align 8
  store i8* blockaddress(@"9941920946239825184", %"104"), i8** %.reload400, align 8
  %3529 = getelementptr i8*, i8** %JumpTable, i32 105
  store i8** %3529, i8*** %.reg2mem401, align 8
  %.reload403 = load i8**, i8*** %.reg2mem401, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl1), i8** %.reload403, align 8
  %3530 = getelementptr i8*, i8** %JumpTable, i32 106
  store i8** %3530, i8*** %.reg2mem404, align 8
  %.reload406 = load i8**, i8*** %.reg2mem404, align 8
  store i8* blockaddress(@"9941920946239825184", %"106"), i8** %.reload406, align 8
  %3531 = getelementptr i8*, i8** %JumpTable, i32 107
  store i8** %3531, i8*** %.reg2mem407, align 8
  %.reload410 = load i8**, i8*** %.reg2mem407, align 8
  store i8* blockaddress(@"9941920946239825184", %"107"), i8** %.reload410, align 8
  %3532 = getelementptr i8*, i8** %JumpTable, i32 108
  store i8** %3532, i8*** %.reg2mem411, align 8
  %.reload413 = load i8**, i8*** %.reg2mem411, align 8
  store i8* blockaddress(@"9941920946239825184", %"108"), i8** %.reload413, align 8
  %3533 = getelementptr i8*, i8** %JumpTable, i32 109
  store i8** %3533, i8*** %.reg2mem414, align 8
  %.reload418 = load i8**, i8*** %.reg2mem414, align 8
  store i8* blockaddress(@"9941920946239825184", %"109"), i8** %.reload418, align 8
  %3534 = getelementptr i8*, i8** %JumpTable, i32 110
  store i8** %3534, i8*** %.reg2mem419, align 8
  %.reload421 = load i8**, i8*** %.reg2mem419, align 8
  store i8* blockaddress(@"9941920946239825184", %"110"), i8** %.reload421, align 8
  %3535 = getelementptr i8*, i8** %JumpTable, i32 111
  store i8** %3535, i8*** %.reg2mem422, align 8
  %.reload424 = load i8**, i8*** %.reg2mem422, align 8
  store i8* blockaddress(@"9941920946239825184", %"111"), i8** %.reload424, align 8
  %3536 = getelementptr i8*, i8** %JumpTable, i32 112
  store i8** %3536, i8*** %.reg2mem425, align 8
  %.reload427 = load i8**, i8*** %.reg2mem425, align 8
  store i8* blockaddress(@"9941920946239825184", %"112"), i8** %.reload427, align 8
  %3537 = getelementptr i8*, i8** %JumpTable, i32 113
  store i8** %3537, i8*** %.reg2mem428, align 8
  %.reload430 = load i8**, i8*** %.reg2mem428, align 8
  store i8* blockaddress(@"9941920946239825184", %"113"), i8** %.reload430, align 8
  %3538 = getelementptr i8*, i8** %JumpTable, i32 114
  store i8** %3538, i8*** %.reg2mem431, align 8
  %.reload434 = load i8**, i8*** %.reg2mem431, align 8
  store i8* blockaddress(@"9941920946239825184", %"114"), i8** %.reload434, align 8
  %3539 = getelementptr i8*, i8** %JumpTable, i32 115
  store i8** %3539, i8*** %.reg2mem435, align 8
  %.reload438 = load i8**, i8*** %.reg2mem435, align 8
  store i8* blockaddress(@"9941920946239825184", %"115"), i8** %.reload438, align 8
  %3540 = getelementptr i8*, i8** %JumpTable, i32 116
  store i8** %3540, i8*** %.reg2mem439, align 8
  %.reload441 = load i8**, i8*** %.reg2mem439, align 8
  store i8* blockaddress(@"9941920946239825184", %"116"), i8** %.reload441, align 8
  %3541 = getelementptr i8*, i8** %JumpTable, i32 117
  store i8** %3541, i8*** %.reg2mem442, align 8
  %.reload444 = load i8**, i8*** %.reg2mem442, align 8
  store i8* blockaddress(@"9941920946239825184", %"117"), i8** %.reload444, align 8
  %3542 = getelementptr i8*, i8** %JumpTable, i32 118
  store i8** %3542, i8*** %.reg2mem445, align 8
  %.reload448 = load i8**, i8*** %.reg2mem445, align 8
  store i8* blockaddress(@"9941920946239825184", %"118"), i8** %.reload448, align 8
  %3543 = getelementptr i8*, i8** %JumpTable, i32 119
  store i8** %3543, i8*** %.reg2mem449, align 8
  %.reload453 = load i8**, i8*** %.reg2mem449, align 8
  store i8* blockaddress(@"9941920946239825184", %"119"), i8** %.reload453, align 8
  %3544 = getelementptr i8*, i8** %JumpTable, i32 120
  store i8** %3544, i8*** %.reg2mem454, align 8
  %.reload456 = load i8**, i8*** %.reg2mem454, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl2), i8** %.reload456, align 8
  %3545 = getelementptr i8*, i8** %JumpTable, i32 121
  store i8** %3545, i8*** %.reg2mem457, align 8
  %.reload461 = load i8**, i8*** %.reg2mem457, align 8
  store i8* blockaddress(@"9941920946239825184", %"121"), i8** %.reload461, align 8
  %3546 = getelementptr i8*, i8** %JumpTable, i32 122
  store i8** %3546, i8*** %.reg2mem462, align 8
  %.reload465 = load i8**, i8*** %.reg2mem462, align 8
  store i8* blockaddress(@"9941920946239825184", %"122"), i8** %.reload465, align 8
  %3547 = getelementptr i8*, i8** %JumpTable, i32 123
  store i8** %3547, i8*** %.reg2mem466, align 8
  %.reload468 = load i8**, i8*** %.reg2mem466, align 8
  store i8* blockaddress(@"9941920946239825184", %"123"), i8** %.reload468, align 8
  %3548 = getelementptr i8*, i8** %JumpTable, i32 124
  store i8** %3548, i8*** %.reg2mem469, align 8
  %.reload471 = load i8**, i8*** %.reg2mem469, align 8
  store i8* blockaddress(@"9941920946239825184", %"124"), i8** %.reload471, align 8
  %3549 = getelementptr i8*, i8** %JumpTable, i32 125
  store i8** %3549, i8*** %.reg2mem472, align 8
  %.reload474 = load i8**, i8*** %.reg2mem472, align 8
  store i8* blockaddress(@"9941920946239825184", %"125"), i8** %.reload474, align 8
  %3550 = getelementptr i8*, i8** %JumpTable, i32 126
  store i8** %3550, i8*** %.reg2mem475, align 8
  %.reload477 = load i8**, i8*** %.reg2mem475, align 8
  store i8* blockaddress(@"9941920946239825184", %"126"), i8** %.reload477, align 8
  %3551 = getelementptr i8*, i8** %JumpTable, i32 127
  store i8** %3551, i8*** %.reg2mem478, align 8
  %.reload481 = load i8**, i8*** %.reg2mem478, align 8
  store i8* blockaddress(@"9941920946239825184", %"127"), i8** %.reload481, align 8
  %3552 = getelementptr i8*, i8** %JumpTable, i32 128
  store i8** %3552, i8*** %.reg2mem482, align 8
  %.reload485 = load i8**, i8*** %.reg2mem482, align 8
  store i8* blockaddress(@"9941920946239825184", %"128"), i8** %.reload485, align 8
  %3553 = getelementptr i8*, i8** %JumpTable, i32 129
  store i8** %3553, i8*** %.reg2mem486, align 8
  %.reload490 = load i8**, i8*** %.reg2mem486, align 8
  store i8* blockaddress(@"9941920946239825184", %.loopexit), i8** %.reload490, align 8
  %3554 = getelementptr i8*, i8** %JumpTable, i32 130
  store i8** %3554, i8*** %.reg2mem491, align 8
  %.reload493 = load i8**, i8*** %.reg2mem491, align 8
  store i8* blockaddress(@"9941920946239825184", %"130"), i8** %.reload493, align 8
  %3555 = getelementptr i8*, i8** %JumpTable, i32 131
  store i8** %3555, i8*** %.reg2mem494, align 8
  %.reload496 = load i8**, i8*** %.reg2mem494, align 8
  store i8* blockaddress(@"9941920946239825184", %"131"), i8** %.reload496, align 8
  %3556 = getelementptr i8*, i8** %JumpTable, i32 132
  store i8** %3556, i8*** %.reg2mem497, align 8
  %.reload499 = load i8**, i8*** %.reg2mem497, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl1929), i8** %.reload499, align 8
  %3557 = getelementptr i8*, i8** %JumpTable, i32 133
  store i8** %3557, i8*** %.reg2mem500, align 8
  %.reload503 = load i8**, i8*** %.reg2mem500, align 8
  store i8* blockaddress(@"9941920946239825184", %"133"), i8** %.reload503, align 8
  %3558 = getelementptr i8*, i8** %JumpTable, i32 134
  store i8** %3558, i8*** %.reg2mem504, align 8
  %.reload506 = load i8**, i8*** %.reg2mem504, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl48), i8** %.reload506, align 8
  %3559 = getelementptr i8*, i8** %JumpTable, i32 135
  store i8** %3559, i8*** %.reg2mem507, align 8
  %.reload509 = load i8**, i8*** %.reg2mem507, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl49), i8** %.reload509, align 8
  %3560 = getelementptr i8*, i8** %JumpTable, i32 136
  store i8** %3560, i8*** %.reg2mem510, align 8
  %.reload513 = load i8**, i8*** %.reg2mem510, align 8
  store i8* blockaddress(@"9941920946239825184", %"136"), i8** %.reload513, align 8
  %3561 = getelementptr i8*, i8** %JumpTable, i32 137
  store i8** %3561, i8*** %.reg2mem514, align 8
  %.reload517 = load i8**, i8*** %.reg2mem514, align 8
  store i8* blockaddress(@"9941920946239825184", %"137"), i8** %.reload517, align 8
  %3562 = getelementptr i8*, i8** %JumpTable, i32 138
  store i8** %3562, i8*** %.reg2mem518, align 8
  %.reload520 = load i8**, i8*** %.reg2mem518, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl80), i8** %.reload520, align 8
  %3563 = getelementptr i8*, i8** %JumpTable, i32 139
  store i8** %3563, i8*** %.reg2mem521, align 8
  %.reload523 = load i8**, i8*** %.reg2mem521, align 8
  store i8* blockaddress(@"9941920946239825184", %"139"), i8** %.reload523, align 8
  %3564 = getelementptr i8*, i8** %JumpTable, i32 140
  store i8** %3564, i8*** %.reg2mem524, align 8
  %.reload526 = load i8**, i8*** %.reg2mem524, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl90), i8** %.reload526, align 8
  %3565 = getelementptr i8*, i8** %JumpTable, i32 141
  store i8** %3565, i8*** %.reg2mem527, align 8
  %.reload529 = load i8**, i8*** %.reg2mem527, align 8
  store i8* blockaddress(@"9941920946239825184", %"141"), i8** %.reload529, align 8
  %3566 = getelementptr i8*, i8** %JumpTable, i32 142
  store i8** %3566, i8*** %.reg2mem530, align 8
  %.reload533 = load i8**, i8*** %.reg2mem530, align 8
  store i8* blockaddress(@"9941920946239825184", %"142"), i8** %.reload533, align 8
  %3567 = getelementptr i8*, i8** %JumpTable, i32 143
  store i8** %3567, i8*** %.reg2mem534, align 8
  %.reload536 = load i8**, i8*** %.reg2mem534, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl124), i8** %.reload536, align 8
  %3568 = getelementptr i8*, i8** %JumpTable, i32 144
  store i8** %3568, i8*** %.reg2mem537, align 8
  %.reload540 = load i8**, i8*** %.reg2mem537, align 8
  store i8* blockaddress(@"9941920946239825184", %"144"), i8** %.reload540, align 8
  %3569 = getelementptr i8*, i8** %JumpTable, i32 145
  store i8** %3569, i8*** %.reg2mem541, align 8
  %.reload544 = load i8**, i8*** %.reg2mem541, align 8
  store i8* blockaddress(@"9941920946239825184", %"145"), i8** %.reload544, align 8
  %3570 = getelementptr i8*, i8** %JumpTable, i32 146
  store i8** %3570, i8*** %.reg2mem545, align 8
  %.reload548 = load i8**, i8*** %.reg2mem545, align 8
  store i8* blockaddress(@"9941920946239825184", %"146"), i8** %.reload548, align 8
  %3571 = getelementptr i8*, i8** %JumpTable, i32 147
  store i8** %3571, i8*** %.reg2mem549, align 8
  %.reload551 = load i8**, i8*** %.reg2mem549, align 8
  store i8* blockaddress(@"9941920946239825184", %"147"), i8** %.reload551, align 8
  %3572 = getelementptr i8*, i8** %JumpTable, i32 148
  store i8** %3572, i8*** %.reg2mem552, align 8
  %.reload555 = load i8**, i8*** %.reg2mem552, align 8
  store i8* blockaddress(@"9941920946239825184", %"148"), i8** %.reload555, align 8
  %3573 = getelementptr i8*, i8** %JumpTable, i32 149
  store i8** %3573, i8*** %.reg2mem556, align 8
  %.reload558 = load i8**, i8*** %.reg2mem556, align 8
  store i8* blockaddress(@"9941920946239825184", %"149"), i8** %.reload558, align 8
  %3574 = getelementptr i8*, i8** %JumpTable, i32 150
  store i8** %3574, i8*** %.reg2mem559, align 8
  %.reload563 = load i8**, i8*** %.reg2mem559, align 8
  store i8* blockaddress(@"9941920946239825184", %"150"), i8** %.reload563, align 8
  %3575 = getelementptr i8*, i8** %JumpTable, i32 151
  store i8** %3575, i8*** %.reg2mem564, align 8
  %.reload566 = load i8**, i8*** %.reg2mem564, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot30), i8** %.reload566, align 8
  %3576 = getelementptr i8*, i8** %JumpTable, i32 152
  store i8** %3576, i8*** %.reg2mem567, align 8
  %.reload569 = load i8**, i8*** %.reg2mem567, align 8
  store i8* blockaddress(@"9941920946239825184", %.split31), i8** %.reload569, align 8
  %3577 = getelementptr i8*, i8** %JumpTable, i32 153
  store i8** %3577, i8*** %.reg2mem570, align 8
  %.reload572 = load i8**, i8*** %.reg2mem570, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub32), i8** %.reload572, align 8
  %3578 = getelementptr i8*, i8** %JumpTable, i32 154
  store i8** %3578, i8*** %.reg2mem573, align 8
  %.reload575 = load i8**, i8*** %.reg2mem573, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub133), i8** %.reload575, align 8
  %3579 = getelementptr i8*, i8** %JumpTable, i32 155
  store i8** %3579, i8*** %.reg2mem576, align 8
  %.reload578 = load i8**, i8*** %.reg2mem576, align 8
  store i8* blockaddress(@"9941920946239825184", %"155"), i8** %.reload578, align 8
  %3580 = getelementptr i8*, i8** %JumpTable, i32 156
  store i8** %3580, i8*** %.reg2mem579, align 8
  %.reload581 = load i8**, i8*** %.reg2mem579, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot34), i8** %.reload581, align 8
  %3581 = getelementptr i8*, i8** %JumpTable, i32 157
  store i8** %3581, i8*** %.reg2mem582, align 8
  %.reload584 = load i8**, i8*** %.reg2mem582, align 8
  store i8* blockaddress(@"9941920946239825184", %"157"), i8** %.reload584, align 8
  %3582 = getelementptr i8*, i8** %JumpTable, i32 158
  store i8** %3582, i8*** %.reg2mem585, align 8
  %.reload587 = load i8**, i8*** %.reg2mem585, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub35), i8** %.reload587, align 8
  %3583 = getelementptr i8*, i8** %JumpTable, i32 159
  store i8** %3583, i8*** %.reg2mem588, align 8
  %.reload590 = load i8**, i8*** %.reg2mem588, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub1.exitStub36), i8** %.reload590, align 8
  %3584 = getelementptr i8*, i8** %JumpTable, i32 160
  store i8** %3584, i8*** %.reg2mem591, align 8
  %.reload593 = load i8**, i8*** %.reg2mem591, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot37), i8** %.reload593, align 8
  %3585 = getelementptr i8*, i8** %JumpTable, i32 161
  store i8** %3585, i8*** %.reg2mem594, align 8
  %.reload596 = load i8**, i8*** %.reg2mem594, align 8
  store i8* blockaddress(@"9941920946239825184", %"161"), i8** %.reload596, align 8
  %3586 = getelementptr i8*, i8** %JumpTable, i32 162
  store i8** %3586, i8*** %.reg2mem597, align 8
  %.reload599 = load i8**, i8*** %.reg2mem597, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl38), i8** %.reload599, align 8
  %3587 = getelementptr i8*, i8** %JumpTable, i32 163
  store i8** %3587, i8*** %.reg2mem600, align 8
  %.reload602 = load i8**, i8*** %.reg2mem600, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub40), i8** %.reload602, align 8
  %3588 = getelementptr i8*, i8** %JumpTable, i32 164
  store i8** %3588, i8*** %.reg2mem603, align 8
  %.reload605 = load i8**, i8*** %.reg2mem603, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub2), i8** %.reload605, align 8
  %3589 = getelementptr i8*, i8** %JumpTable, i32 165
  store i8** %3589, i8*** %.reg2mem606, align 8
  %.reload608 = load i8**, i8*** %.reg2mem606, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot41), i8** %.reload608, align 8
  %3590 = getelementptr i8*, i8** %JumpTable, i32 166
  store i8** %3590, i8*** %.reg2mem609, align 8
  %.reload611 = load i8**, i8*** %.reg2mem609, align 8
  store i8* blockaddress(@"9941920946239825184", %.split42), i8** %.reload611, align 8
  %3591 = getelementptr i8*, i8** %JumpTable, i32 167
  store i8** %3591, i8*** %.reg2mem612, align 8
  %.reload614 = load i8**, i8*** %.reg2mem612, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub43), i8** %.reload614, align 8
  %3592 = getelementptr i8*, i8** %JumpTable, i32 168
  store i8** %3592, i8*** %.reg2mem615, align 8
  %.reload617 = load i8**, i8*** %.reg2mem615, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub144), i8** %.reload617, align 8
  %3593 = getelementptr i8*, i8** %JumpTable, i32 169
  store i8** %3593, i8*** %.reg2mem618, align 8
  %.reload620 = load i8**, i8*** %.reg2mem618, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot45), i8** %.reload620, align 8
  %3594 = getelementptr i8*, i8** %JumpTable, i32 170
  store i8** %3594, i8*** %.reg2mem621, align 8
  %.reload623 = load i8**, i8*** %.reg2mem621, align 8
  store i8* blockaddress(@"9941920946239825184", %.split46), i8** %.reload623, align 8
  %3595 = getelementptr i8*, i8** %JumpTable, i32 171
  store i8** %3595, i8*** %.reg2mem624, align 8
  %.reload626 = load i8**, i8*** %.reg2mem624, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub47), i8** %.reload626, align 8
  %3596 = getelementptr i8*, i8** %JumpTable, i32 172
  store i8** %3596, i8*** %.reg2mem627, align 8
  %.reload629 = load i8**, i8*** %.reg2mem627, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub148), i8** %.reload629, align 8
  %3597 = getelementptr i8*, i8** %JumpTable, i32 173
  store i8** %3597, i8*** %.reg2mem630, align 8
  %.reload632 = load i8**, i8*** %.reg2mem630, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot49), i8** %.reload632, align 8
  %3598 = getelementptr i8*, i8** %JumpTable, i32 174
  store i8** %3598, i8*** %.reg2mem633, align 8
  %.reload635 = load i8**, i8*** %.reg2mem633, align 8
  store i8* blockaddress(@"9941920946239825184", %"174"), i8** %.reload635, align 8
  %3599 = getelementptr i8*, i8** %JumpTable, i32 175
  store i8** %3599, i8*** %.reg2mem636, align 8
  %.reload638 = load i8**, i8*** %.reg2mem636, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub50), i8** %.reload638, align 8
  %3600 = getelementptr i8*, i8** %JumpTable, i32 176
  store i8** %3600, i8*** %.reg2mem639, align 8
  %.reload641 = load i8**, i8*** %.reg2mem639, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub26.exitStub), i8** %.reload641, align 8
  %3601 = getelementptr i8*, i8** %JumpTable, i32 177
  store i8** %3601, i8*** %.reg2mem642, align 8
  %.reload644 = load i8**, i8*** %.reg2mem642, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot51), i8** %.reload644, align 8
  %3602 = getelementptr i8*, i8** %JumpTable, i32 178
  store i8** %3602, i8*** %.reg2mem645, align 8
  %.reload647 = load i8**, i8*** %.reg2mem645, align 8
  store i8* blockaddress(@"9941920946239825184", %"178"), i8** %.reload647, align 8
  %3603 = getelementptr i8*, i8** %JumpTable, i32 179
  store i8** %3603, i8*** %.reg2mem648, align 8
  %.reload650 = load i8**, i8*** %.reg2mem648, align 8
  store i8* blockaddress(@"9941920946239825184", %codeRepl52), i8** %.reload650, align 8
  %3604 = getelementptr i8*, i8** %JumpTable, i32 180
  store i8** %3604, i8*** %.reg2mem651, align 8
  %.reload653 = load i8**, i8*** %.reg2mem651, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub54), i8** %.reload653, align 8
  %3605 = getelementptr i8*, i8** %JumpTable, i32 181
  store i8** %3605, i8*** %.reg2mem654, align 8
  %.reload656 = load i8**, i8*** %.reg2mem654, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub2655), i8** %.reload656, align 8
  %3606 = getelementptr i8*, i8** %JumpTable, i32 182
  store i8** %3606, i8*** %.reg2mem657, align 8
  %.reload659 = load i8**, i8*** %.reg2mem657, align 8
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot56), i8** %.reload659, align 8
  %3607 = getelementptr i8*, i8** %JumpTable, i32 183
  store i8** %3607, i8*** %.reg2mem660, align 8
  %.reload662 = load i8**, i8*** %.reg2mem660, align 8
  store i8* blockaddress(@"9941920946239825184", %"183"), i8** %.reload662, align 8
  %3608 = getelementptr i8*, i8** %JumpTable, i32 184
  store i8** %3608, i8*** %.reg2mem663, align 8
  %.reload665 = load i8**, i8*** %.reg2mem663, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub57), i8** %.reload665, align 8
  %3609 = getelementptr i8*, i8** %JumpTable, i32 185
  store i8** %3609, i8*** %.reg2mem666, align 8
  %.reload668 = load i8**, i8*** %.reg2mem666, align 8
  store i8* blockaddress(@"9941920946239825184", %.exitStub7.exitStub), i8** %.reload668, align 8
  %.reload59 = load i8**, i8*** %.reg2mem, align 8
  %3610 = load i8*, i8** %.reload59, align 8
  indirectbr i8* %3610, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

BogusBasciBlock:                                  ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3611 = getelementptr i8*, i8** %JumpTable, i32 0
  store i8* blockaddress(@"9941920946239825184", %"53"), i8** %3611, align 8
  %3612 = getelementptr i8*, i8** %JumpTable, i32 2
  store i8* blockaddress(@"9941920946239825184", %.loopexit.exitStub.exitStub), i8** %3612, align 8
  %3613 = getelementptr i8*, i8** %JumpTable, i32 4
  store i8* blockaddress(@"9941920946239825184", %.split), i8** %3613, align 8
  %3614 = getelementptr i8*, i8** %JumpTable, i32 6
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub35), i8** %3614, align 8
  %3615 = getelementptr i8*, i8** %JumpTable, i32 8
  store i8* blockaddress(@"9941920946239825184", %"157"), i8** %3615, align 8
  %3616 = getelementptr i8*, i8** %JumpTable, i32 10
  store i8* blockaddress(@"9941920946239825184", %.exitStub3.exitStub10), i8** %3616, align 8
  %3617 = getelementptr i8*, i8** %JumpTable, i32 12
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot51), i8** %3617, align 8
  %3618 = getelementptr i8*, i8** %JumpTable, i32 14
  store i8* blockaddress(@"9941920946239825184", %.exitStub148), i8** %3618, align 8
  %3619 = getelementptr i8*, i8** %JumpTable, i32 16
  store i8* blockaddress(@"9941920946239825184", %"113"), i8** %3619, align 8
  %3620 = getelementptr i8*, i8** %JumpTable, i32 18
  store i8* blockaddress(@"9941920946239825184", %NodeBlock57), i8** %3620, align 8
  %3621 = getelementptr i8*, i8** %JumpTable, i32 20
  store i8* blockaddress(@"9941920946239825184", %"145"), i8** %3621, align 8
  %3622 = getelementptr i8*, i8** %JumpTable, i32 22
  store i8* blockaddress(@"9941920946239825184", %NodeBlock55), i8** %3622, align 8
  %3623 = getelementptr i8*, i8** %JumpTable, i32 24
  store i8* blockaddress(@"9941920946239825184", %NodeBlock43), i8** %3623, align 8
  %3624 = getelementptr i8*, i8** %JumpTable, i32 26
  store i8* blockaddress(@"9941920946239825184", %NodeBlock27), i8** %3624, align 8
  %3625 = getelementptr i8*, i8** %JumpTable, i32 28
  store i8* blockaddress(@"9941920946239825184", %NodeBlock15), i8** %3625, align 8
  %3626 = getelementptr i8*, i8** %JumpTable, i32 30
  store i8* blockaddress(@"9941920946239825184", %codeRepl2), i8** %3626, align 8
  %3627 = getelementptr i8*, i8** %JumpTable, i32 32
  store i8* blockaddress(@"9941920946239825184", %"137"), i8** %3627, align 8
  %3628 = getelementptr i8*, i8** %JumpTable, i32 34
  store i8* blockaddress(@"9941920946239825184", %.loopexit), i8** %3628, align 8
  %3629 = getelementptr i8*, i8** %JumpTable, i32 36
  store i8* blockaddress(@"9941920946239825184", %NodeBlock33), i8** %3629, align 8
  %3630 = getelementptr i8*, i8** %JumpTable, i32 38
  store i8* blockaddress(@"9941920946239825184", %NodeBlock41), i8** %3630, align 8
  %3631 = getelementptr i8*, i8** %JumpTable, i32 40
  store i8* blockaddress(@"9941920946239825184", %"94"), i8** %3631, align 8
  %3632 = getelementptr i8*, i8** %JumpTable, i32 42
  store i8* blockaddress(@"9941920946239825184", %NodeBlock39), i8** %3632, align 8
  %3633 = getelementptr i8*, i8** %JumpTable, i32 44
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot45), i8** %3633, align 8
  %3634 = getelementptr i8*, i8** %JumpTable, i32 46
  store i8* blockaddress(@"9941920946239825184", %LeafBlock), i8** %3634, align 8
  %3635 = getelementptr i8*, i8** %JumpTable, i32 48
  store i8* blockaddress(@"9941920946239825184", %.preheader), i8** %3635, align 8
  %3636 = getelementptr i8*, i8** %JumpTable, i32 50
  store i8* blockaddress(@"9941920946239825184", %"133"), i8** %3636, align 8
  %3637 = getelementptr i8*, i8** %JumpTable, i32 52
  store i8* blockaddress(@"9941920946239825184", %"109"), i8** %3637, align 8
  %3638 = getelementptr i8*, i8** %JumpTable, i32 54
  store i8* blockaddress(@"9941920946239825184", %NodeBlock11), i8** %3638, align 8
  %3639 = getelementptr i8*, i8** %JumpTable, i32 56
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub), i8** %3639, align 8
  %3640 = getelementptr i8*, i8** %JumpTable, i32 58
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub9), i8** %3640, align 8
  %3641 = getelementptr i8*, i8** %JumpTable, i32 60
  store i8* blockaddress(@"9941920946239825184", %"104"), i8** %3641, align 8
  %3642 = getelementptr i8*, i8** %JumpTable, i32 62
  store i8* blockaddress(@"9941920946239825184", %"111"), i8** %3642, align 8
  %3643 = getelementptr i8*, i8** %JumpTable, i32 64
  store i8* blockaddress(@"9941920946239825184", %"110"), i8** %3643, align 8
  %3644 = getelementptr i8*, i8** %JumpTable, i32 66
  store i8* blockaddress(@"9941920946239825184", %NodeBlock1), i8** %3644, align 8
  %3645 = getelementptr i8*, i8** %JumpTable, i32 68
  store i8* blockaddress(@"9941920946239825184", %NodeBlock35), i8** %3645, align 8
  %3646 = getelementptr i8*, i8** %JumpTable, i32 70
  store i8* blockaddress(@"9941920946239825184", %.exitStub2655), i8** %3646, align 8
  %3647 = getelementptr i8*, i8** %JumpTable, i32 72
  store i8* blockaddress(@"9941920946239825184", %"115"), i8** %3647, align 8
  %3648 = getelementptr i8*, i8** %JumpTable, i32 74
  store i8* blockaddress(@"9941920946239825184", %NodeBlock19), i8** %3648, align 8
  %3649 = getelementptr i8*, i8** %JumpTable, i32 76
  store i8* blockaddress(@"9941920946239825184", %"38"), i8** %3649, align 8
  %3650 = getelementptr i8*, i8** %JumpTable, i32 78
  store i8* blockaddress(@"9941920946239825184", %.exitStub3), i8** %3650, align 8
  %3651 = getelementptr i8*, i8** %JumpTable, i32 80
  store i8* blockaddress(@"9941920946239825184", %"112"), i8** %3651, align 8
  %3652 = getelementptr i8*, i8** %JumpTable, i32 82
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot8), i8** %3652, align 8
  %3653 = getelementptr i8*, i8** %JumpTable, i32 84
  store i8* blockaddress(@"9941920946239825184", %"128"), i8** %3653, align 8
  %3654 = getelementptr i8*, i8** %JumpTable, i32 86
  store i8* blockaddress(@"9941920946239825184", %"95"), i8** %3654, align 8
  %3655 = getelementptr i8*, i8** %JumpTable, i32 88
  store i8* blockaddress(@"9941920946239825184", %.exitStub5), i8** %3655, align 8
  %3656 = getelementptr i8*, i8** %JumpTable, i32 90
  store i8* blockaddress(@"9941920946239825184", %"119"), i8** %3656, align 8
  %3657 = getelementptr i8*, i8** %JumpTable, i32 92
  store i8* blockaddress(@"9941920946239825184", %"90"), i8** %3657, align 8
  %3658 = getelementptr i8*, i8** %JumpTable, i32 94
  store i8* blockaddress(@"9941920946239825184", %.exitStub21), i8** %3658, align 8
  %3659 = getelementptr i8*, i8** %JumpTable, i32 96
  store i8* blockaddress(@"9941920946239825184", %"127"), i8** %3659, align 8
  %3660 = getelementptr i8*, i8** %JumpTable, i32 98
  store i8* blockaddress(@"9941920946239825184", %codeRepl), i8** %3660, align 8
  %3661 = getelementptr i8*, i8** %JumpTable, i32 100
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub17), i8** %3661, align 8
  %3662 = getelementptr i8*, i8** %JumpTable, i32 102
  store i8* blockaddress(@"9941920946239825184", %"48"), i8** %3662, align 8
  %3663 = getelementptr i8*, i8** %JumpTable, i32 104
  store i8* blockaddress(@"9941920946239825184", %.exitStub40), i8** %3663, align 8
  %3664 = getelementptr i8*, i8** %JumpTable, i32 106
  store i8* blockaddress(@"9941920946239825184", %.exitStub144), i8** %3664, align 8
  %3665 = getelementptr i8*, i8** %JumpTable, i32 108
  store i8* blockaddress(@"9941920946239825184", %.exitStub1.exitStub), i8** %3665, align 8
  %3666 = getelementptr i8*, i8** %JumpTable, i32 110
  store i8* blockaddress(@"9941920946239825184", %"89"), i8** %3666, align 8
  %3667 = getelementptr i8*, i8** %JumpTable, i32 112
  store i8* blockaddress(@"9941920946239825184", %"87"), i8** %3667, align 8
  %3668 = getelementptr i8*, i8** %JumpTable, i32 114
  store i8* blockaddress(@"9941920946239825184", %"36"), i8** %3668, align 8
  %3669 = getelementptr i8*, i8** %JumpTable, i32 116
  store i8* blockaddress(@"9941920946239825184", %.split42), i8** %3669, align 8
  %3670 = getelementptr i8*, i8** %JumpTable, i32 118
  store i8* blockaddress(@"9941920946239825184", %codeRepl5), i8** %3670, align 8
  %3671 = getelementptr i8*, i8** %JumpTable, i32 120
  store i8* blockaddress(@"9941920946239825184", %.split31), i8** %3671, align 8
  %3672 = getelementptr i8*, i8** %JumpTable, i32 122
  store i8* blockaddress(@"9941920946239825184", %"161"), i8** %3672, align 8
  %3673 = getelementptr i8*, i8** %JumpTable, i32 124
  store i8* blockaddress(@"9941920946239825184", %newFuncRoot2), i8** %3673, align 8
  %3674 = getelementptr i8*, i8** %JumpTable, i32 126
  store i8* blockaddress(@"9941920946239825184", %EntryBasicBlockSplit), i8** %3674, align 8
  %3675 = getelementptr i8*, i8** %JumpTable, i32 128
  store i8* blockaddress(@"9941920946239825184", %NodeBlock9), i8** %3675, align 8
  %3676 = getelementptr i8*, i8** %JumpTable, i32 130
  store i8* blockaddress(@"9941920946239825184", %"46"), i8** %3676, align 8
  %3677 = getelementptr i8*, i8** %JumpTable, i32 132
  store i8* blockaddress(@"9941920946239825184", %.exitStub.exitStub57), i8** %3677, align 8
  %3678 = getelementptr i8*, i8** %JumpTable, i32 134
  store i8* blockaddress(@"9941920946239825184", %.exitStub122), i8** %3678, align 8
  %3679 = getelementptr i8*, i8** %JumpTable, i32 136
  store i8* blockaddress(@"9941920946239825184", %codeRepl27), i8** %3679, align 8
  %3680 = getelementptr i8*, i8** %JumpTable, i32 138
  store i8* blockaddress(@"9941920946239825184", %NodeBlock53), i8** %3680, align 8
  %3681 = getelementptr i8*, i8** %JumpTable, i32 140
  store i8* blockaddress(@"9941920946239825184", %codeRepl12), i8** %3681, align 8
  %3682 = getelementptr i8*, i8** %JumpTable, i32 142
  store i8* blockaddress(@"9941920946239825184", %NodeBlock7), i8** %3682, align 8
  %3683 = getelementptr i8*, i8** %JumpTable, i32 144
  store i8* blockaddress(@"9941920946239825184", %"55"), i8** %3683, align 8
  %3684 = getelementptr i8*, i8** %JumpTable, i32 146
  store i8* blockaddress(@"9941920946239825184", %.exitStub14), i8** %3684, align 8
  %3685 = getelementptr i8*, i8** %JumpTable, i32 148
  store i8* blockaddress(@"9941920946239825184", %NodeBlock49), i8** %3685, align 8
  %3686 = getelementptr i8*, i8** %JumpTable, i32 150
  store i8* blockaddress(@"9941920946239825184", %"150"), i8** %3686, align 8
  %3687 = getelementptr i8*, i8** %JumpTable, i32 152
  store i8* blockaddress(@"9941920946239825184", %"107"), i8** %3687, align 8
  %3688 = getelementptr i8*, i8** %JumpTable, i32 154
  store i8* blockaddress(@"9941920946239825184", %"121"), i8** %3688, align 8
  %3689 = getelementptr i8*, i8** %JumpTable, i32 156
  store i8* blockaddress(@"9941920946239825184", %LeafBlock47), i8** %3689, align 8
  %3690 = getelementptr i8*, i8** %JumpTable, i32 158
  store i8* blockaddress(@"9941920946239825184", %"147"), i8** %3690, align 8
  %3691 = getelementptr i8*, i8** %JumpTable, i32 160
  store i8* blockaddress(@"9941920946239825184", %"92"), i8** %3691, align 8
  %3692 = getelementptr i8*, i8** %JumpTable, i32 162
  store i8* blockaddress(@"9941920946239825184", %"88"), i8** %3692, align 8
  %3693 = getelementptr i8*, i8** %JumpTable, i32 164
  store i8* blockaddress(@"9941920946239825184", %codeRepl124), i8** %3693, align 8
  %3694 = getelementptr i8*, i8** %JumpTable, i32 166
  store i8* blockaddress(@"9941920946239825184", %"114"), i8** %3694, align 8
  %3695 = getelementptr i8*, i8** %JumpTable, i32 168
  store i8* blockaddress(@"9941920946239825184", %.exitStub1.exitStub36), i8** %3695, align 8
  %3696 = getelementptr i8*, i8** %JumpTable, i32 170
  store i8* blockaddress(@"9941920946239825184", %codeRepl19), i8** %3696, align 8
  %3697 = getelementptr i8*, i8** %JumpTable, i32 172
  store i8* blockaddress(@"9941920946239825184", %"93"), i8** %3697, align 8
  %3698 = getelementptr i8*, i8** %JumpTable, i32 174
  store i8* blockaddress(@"9941920946239825184", %"82"), i8** %3698, align 8
  %3699 = getelementptr i8*, i8** %JumpTable, i32 176
  store i8* blockaddress(@"9941920946239825184", %"117"), i8** %3699, align 8
  %3700 = getelementptr i8*, i8** %JumpTable, i32 178
  store i8* blockaddress(@"9941920946239825184", %"68"), i8** %3700, align 8
  %3701 = getelementptr i8*, i8** %JumpTable, i32 180
  store i8* blockaddress(@"9941920946239825184", %"96"), i8** %3701, align 8
  %3702 = getelementptr i8*, i8** %JumpTable, i32 182
  store i8* blockaddress(@"9941920946239825184", %codeRepl49), i8** %3702, align 8
  %3703 = getelementptr i8*, i8** %JumpTable, i32 184
  store i8* blockaddress(@"9941920946239825184", %"103"), i8** %3703, align 8
  %.reload70 = load i8**, i8*** %.reg2mem, align 8
  %3704 = load i8*, i8** %.reload70, align 8
  indirectbr i8* %3704, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

EntryBasicBlockSplit:                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload73 = load i8**, i8*** %.reg2mem72, align 8
  %3705 = load i8*, i8** %.reload73, align 8
  indirectbr i8* %3705, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock57:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot58 = icmp slt i32 %0, 15
  %.reload76 = load i8**, i8*** %.reg2mem75, align 8
  %.reload134 = load i8**, i8*** %.reg2mem133, align 8
  %3706 = select i1 %Pivot58, i8** %.reload134, i8** %.reload76
  %3707 = load i8*, i8** %3706, align 8
  indirectbr i8* %3707, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock55:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot56 = icmp slt i32 %0, 22
  %.reload79 = load i8**, i8*** %.reg2mem78, align 8
  %.reload116 = load i8**, i8*** %.reg2mem115, align 8
  %3708 = select i1 %Pivot56, i8** %.reload116, i8** %.reload79
  %3709 = load i8*, i8** %3708, align 8
  indirectbr i8* %3709, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock53:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot54 = icmp slt i32 %0, 26
  %.reload82 = load i8**, i8*** %.reg2mem81, align 8
  %.reload96 = load i8**, i8*** %.reg2mem95, align 8
  %3710 = select i1 %Pivot54, i8** %.reload96, i8** %.reload82
  %3711 = load i8*, i8** %3710, align 8
  indirectbr i8* %3711, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock51:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot52 = icmp slt i32 %0, 28
  %.reload87 = load i8**, i8*** %.reg2mem84, align 8
  %.reload93 = load i8**, i8*** %.reg2mem92, align 8
  %3712 = select i1 %Pivot52, i8** %.reload93, i8** %.reload87
  %3713 = load i8*, i8** %3712, align 8
  indirectbr i8* %3713, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock49:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot50 = icmp slt i32 %0, 29
  %.reload90 = load i8**, i8*** %.reg2mem89, align 8
  %.reload643 = load i8**, i8*** %.reg2mem642, align 8
  %3714 = select i1 %Pivot50, i8** %.reload643, i8** %.reload90
  %3715 = load i8*, i8** %3714, align 8
  indirectbr i8* %3715, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

LeafBlock47:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %SwitchLeaf48 = icmp eq i32 %0, 29
  %.reload180 = load i8**, i8*** %.reg2mem178, align 8
  %.reload658 = load i8**, i8*** %.reg2mem657, align 8
  %3716 = select i1 %SwitchLeaf48, i8** %.reload658, i8** %.reload180
  %3717 = load i8*, i8** %3716, align 8
  indirectbr i8* %3717, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock45:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot46 = icmp slt i32 %0, 27
  %.reload619 = load i8**, i8*** %.reg2mem618, align 8
  %.reload631 = load i8**, i8*** %.reg2mem630, align 8
  %3718 = select i1 %Pivot46, i8** %.reload619, i8** %.reload631
  %3719 = load i8*, i8** %3718, align 8
  indirectbr i8* %3719, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock43:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot44 = icmp slt i32 %0, 24
  %.reload99 = load i8**, i8*** %.reg2mem98, align 8
  %.reload113 = load i8**, i8*** %.reg2mem101, align 8
  %3720 = select i1 %Pivot44, i8** %.reload113, i8** %.reload99
  %3721 = load i8*, i8** %3720, align 8
  indirectbr i8* %3721, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock41:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot42 = icmp slt i32 %0, 25
  %.reload592 = load i8**, i8*** %.reg2mem591, align 8
  %.reload607 = load i8**, i8*** %.reg2mem606, align 8
  %3722 = select i1 %Pivot42, i8** %.reload592, i8** %.reload607
  %3723 = load i8*, i8** %3722, align 8
  indirectbr i8* %3723, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock39:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3724 = and i64 %922, 165331262732746360
  %3725 = or i64 -165331262732746361, %922
  %3726 = sub i64 %3725, -165331262732746361
  %3727 = and i64 %770, 709854711796580558
  %3728 = or i64 -709854711796580559, %770
  %3729 = sub i64 %3728, -709854711796580559
  %3730 = add i64 %1651, 4202234385537405404
  %3731 = and i64 4202234385537405404, %1651
  %3732 = or i64 4202234385537405404, %1651
  %3733 = add i64 %3731, %3732
  %3734 = xor i64 %3733, %3724
  %3735 = xor i64 %3734, %3726
  %3736 = xor i64 %3735, %3730
  %3737 = xor i64 %3736, 7093600841892047351
  %3738 = xor i64 %3737, %3727
  %3739 = xor i64 %3738, %3729
  %3740 = and i64 %672, 6914316731245285176
  %3741 = or i64 -6914316731245285177, %672
  %3742 = sub i64 %3741, -6914316731245285177
  %3743 = add i64 %220, -1040253896391822434
  %3744 = sub i64 0, %220
  %3745 = add i64 1040253896391822434, %3744
  %3746 = sub i64 0, %3745
  %3747 = and i64 %494, 2942145328907600078
  %3748 = xor i64 %494, -1
  %3749 = or i64 -2942145328907600079, %3748
  %3750 = xor i64 %3749, -1
  %3751 = and i64 %3750, -1
  %3752 = xor i64 %3743, %3742
  %3753 = xor i64 %3752, %3747
  %3754 = xor i64 %3753, %3746
  %3755 = xor i64 %3754, -6475356570672606495
  %3756 = xor i64 %3755, %3751
  %3757 = xor i64 %3756, %3740
  %3758 = mul i64 %3739, %3757
  %3759 = trunc i64 %3758 to i32
  %Pivot40 = icmp slt i32 %0, %3759
  %.reload577 = load i8**, i8*** %.reg2mem576, align 8
  %.reload580 = load i8**, i8*** %.reg2mem579, align 8
  %3760 = select i1 %Pivot40, i8** %.reload577, i8** %.reload580
  %3761 = load i8*, i8** %3760, align 8
  indirectbr i8* %3761, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock37:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot38 = icmp slt i32 %0, 18
  %.reload119 = load i8**, i8*** %.reg2mem118, align 8
  %.reload128 = load i8**, i8*** %.reg2mem127, align 8
  %3762 = select i1 %Pivot38, i8** %.reload128, i8** %.reload119
  %3763 = load i8*, i8** %3762, align 8
  indirectbr i8* %3763, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock35:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot36 = icmp slt i32 %0, 20
  %.reload122 = load i8**, i8*** %.reg2mem121, align 8
  %.reload125 = load i8**, i8*** %.reg2mem124, align 8
  %3764 = select i1 %Pivot36, i8** %.reload125, i8** %.reload122
  %3765 = load i8*, i8** %3764, align 8
  indirectbr i8* %3765, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock33:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot34 = icmp slt i32 %0, 21
  %.reload339 = load i8**, i8*** %.reg2mem338, align 8
  %.reload565 = load i8**, i8*** %.reg2mem564, align 8
  %3766 = select i1 %Pivot34, i8** %.reload339, i8** %.reload565
  %3767 = load i8*, i8** %3766, align 8
  indirectbr i8* %3767, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock31:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot32 = icmp slt i32 %0, 19
  %.reload309 = load i8**, i8*** %.reg2mem308, align 8
  %.reload324 = load i8**, i8*** %.reg2mem323, align 8
  %3768 = select i1 %Pivot32, i8** %.reload309, i8** %.reload324
  %3769 = load i8*, i8** %3768, align 8
  indirectbr i8* %3769, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock29:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot30 = icmp slt i32 %0, 16
  %.reload131 = load i8**, i8*** %.reg2mem130, align 8
  %.reload270 = load i8**, i8*** %.reg2mem269, align 8
  %3770 = select i1 %Pivot30, i8** %.reload270, i8** %.reload131
  %3771 = load i8*, i8** %3770, align 8
  indirectbr i8* %3771, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock27:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot28 = icmp slt i32 %0, 17
  %.reload282 = load i8**, i8*** %.reg2mem281, align 8
  %.reload297 = load i8**, i8*** %.reg2mem296, align 8
  %3772 = select i1 %Pivot28, i8** %.reload282, i8** %.reload297
  %3773 = load i8*, i8** %3772, align 8
  indirectbr i8* %3773, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock25:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot26 = icmp slt i32 %0, 7
  %.reload137 = load i8**, i8*** %.reg2mem136, align 8
  %.reload158 = load i8**, i8*** %.reg2mem157, align 8
  %3774 = select i1 %Pivot26, i8** %.reload158, i8** %.reload137
  %3775 = load i8*, i8** %3774, align 8
  indirectbr i8* %3775, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock23:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot24 = icmp slt i32 %0, 11
  %.reload140 = load i8**, i8*** %.reg2mem139, align 8
  %.reload149 = load i8**, i8*** %.reg2mem148, align 8
  %3776 = select i1 %Pivot24, i8** %.reload149, i8** %.reload140
  %3777 = load i8*, i8** %3776, align 8
  indirectbr i8* %3777, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock21:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot22 = icmp slt i32 %0, 13
  %.reload143 = load i8**, i8*** %.reg2mem142, align 8
  %.reload146 = load i8**, i8*** %.reg2mem145, align 8
  %3778 = select i1 %Pivot22, i8** %.reload146, i8** %.reload143
  %3779 = load i8*, i8** %3778, align 8
  indirectbr i8* %3779, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock19:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot20 = icmp slt i32 %0, 14
  %.reload243 = load i8**, i8*** %.reg2mem242, align 8
  %.reload255 = load i8**, i8*** %.reg2mem254, align 8
  %3780 = select i1 %Pivot20, i8** %.reload243, i8** %.reload255
  %3781 = load i8*, i8** %3780, align 8
  indirectbr i8* %3781, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock17:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot18 = icmp slt i32 %0, 12
  %.reload237 = load i8**, i8*** %.reg2mem236, align 8
  %.reload240 = load i8**, i8*** %.reg2mem239, align 8
  %3782 = select i1 %Pivot18, i8** %.reload237, i8** %.reload240
  %3783 = load i8*, i8** %3782, align 8
  indirectbr i8* %3783, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock15:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot16 = icmp slt i32 %0, 9
  %.reload152 = load i8**, i8*** %.reg2mem151, align 8
  %.reload155 = load i8**, i8*** %.reg2mem154, align 8
  %3784 = select i1 %Pivot16, i8** %.reload155, i8** %.reload152
  %3785 = load i8*, i8** %3784, align 8
  indirectbr i8* %3785, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock13:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot14 = icmp slt i32 %0, 10
  %.reload222 = load i8**, i8*** %.reg2mem221, align 8
  %.reload234 = load i8**, i8*** %.reg2mem233, align 8
  %3786 = select i1 %Pivot14, i8** %.reload222, i8** %.reload234
  %3787 = load i8*, i8** %3786, align 8
  indirectbr i8* %3787, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock11:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot12 = icmp slt i32 %0, 8
  %.reload204 = load i8**, i8*** %.reg2mem203, align 8
  %.reload219 = load i8**, i8*** %.reg2mem218, align 8
  %3788 = select i1 %Pivot12, i8** %.reload204, i8** %.reload219
  %3789 = load i8*, i8** %3788, align 8
  indirectbr i8* %3789, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock9:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot10 = icmp slt i32 %0, 3
  %.reload161 = load i8**, i8*** %.reg2mem160, align 8
  %.reload170 = load i8**, i8*** %.reg2mem169, align 8
  %3790 = select i1 %Pivot10, i8** %.reload170, i8** %.reload161
  %3791 = load i8*, i8** %3790, align 8
  indirectbr i8* %3791, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock7:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot8 = icmp slt i32 %0, 5
  %.reload164 = load i8**, i8*** %.reg2mem163, align 8
  %.reload167 = load i8**, i8*** %.reg2mem166, align 8
  %3792 = select i1 %Pivot8, i8** %.reload167, i8** %.reload164
  %3793 = load i8*, i8** %3792, align 8
  indirectbr i8* %3793, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock5:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot6 = icmp slt i32 %0, 6
  %.reload198 = load i8**, i8*** %.reg2mem197, align 8
  %.reload201 = load i8**, i8*** %.reg2mem200, align 8
  %3794 = select i1 %Pivot6, i8** %.reload198, i8** %.reload201
  %3795 = load i8*, i8** %3794, align 8
  indirectbr i8* %3795, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock3:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot4 = icmp slt i32 %0, 4
  %.reload192 = load i8**, i8*** %.reg2mem191, align 8
  %.reload195 = load i8**, i8*** %.reg2mem194, align 8
  %3796 = select i1 %Pivot4, i8** %.reload192, i8** %.reload195
  %3797 = load i8*, i8** %3796, align 8
  indirectbr i8* %3797, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock1:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot2 = icmp slt i32 %0, 1
  %.reload173 = load i8**, i8*** %.reg2mem172, align 8
  %.reload176 = load i8**, i8*** %.reg2mem175, align 8
  %3798 = select i1 %Pivot2, i8** %.reload176, i8** %.reload173
  %3799 = load i8*, i8** %3798, align 8
  indirectbr i8* %3799, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

NodeBlock:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %Pivot = icmp slt i32 %0, 2
  %.reload186 = load i8**, i8*** %.reg2mem185, align 8
  %.reload189 = load i8**, i8*** %.reg2mem188, align 8
  %3800 = select i1 %Pivot, i8** %.reload186, i8** %.reload189
  %3801 = load i8*, i8** %3800, align 8
  indirectbr i8* %3801, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

LeafBlock:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %SwitchLeaf = icmp eq i32 %0, 0
  %.reload179 = load i8**, i8*** %.reg2mem178, align 8
  %.reload183 = load i8**, i8*** %.reg2mem182, align 8
  %3802 = select i1 %SwitchLeaf, i8** %.reload183, i8** %.reload179
  %3803 = load i8*, i8** %3802, align 8
  indirectbr i8* %3803, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"33":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  ret void

"34":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %3804 = load i64, i64* %1, align 8
  %3805 = or i64 %1292, 6701451191479779092
  %3806 = xor i64 %1292, -1
  %3807 = and i64 %3806, -7333489276302821640
  %3808 = and i64 %1292, 7333489276302821639
  %3809 = or i64 %3807, %3808
  %3810 = xor i64 -4090851750845593108, %3809
  %3811 = xor i64 %1292, -1
  %3812 = or i64 -6701451191479779093, %3811
  %3813 = xor i64 %3812, -1
  %3814 = and i64 %3813, -1
  %3815 = or i64 %3810, %3814
  %3816 = and i64 %547, 771229992072046171
  %3817 = xor i64 %547, -1
  %3818 = xor i64 771229992072046171, %3817
  %3819 = and i64 %3818, 771229992072046171
  %3820 = and i64 %1236, 4627965336515657291
  %3821 = xor i64 %1236, -1
  %3822 = xor i64 4627965336515657291, %3821
  %3823 = and i64 %3822, 4627965336515657291
  %3824 = xor i64 %3816, %3823
  %3825 = xor i64 %3824, %3819
  %3826 = xor i64 %3825, %3805
  %3827 = xor i64 %3826, %3815
  %3828 = xor i64 %3827, %3820
  %3829 = xor i64 %3828, 4981412179968682659
  %3830 = add i64 %1400, 4511769848473202526
  %3831 = add i64 8689394788872926458, %1400
  %3832 = sub i64 %3831, 4177624940399723932
  %3833 = and i64 %1343, 3422940526034454980
  %3834 = xor i64 %1343, -1
  %3835 = xor i64 3422940526034454980, %3834
  %3836 = and i64 %3835, 3422940526034454980
  %3837 = and i64 %341, -3281401563350959014
  %3838 = xor i64 %341, -1
  %3839 = xor i64 -3281401563350959014, %3838
  %3840 = and i64 %3839, -3281401563350959014
  %3841 = xor i64 %3833, %3840
  %3842 = xor i64 %3841, %3837
  %3843 = xor i64 %3842, 5392997260983965963
  %3844 = xor i64 %3843, %3836
  %3845 = xor i64 %3844, %3832
  %3846 = xor i64 %3845, %3830
  %3847 = mul i64 %3829, %3846
  %3848 = trunc i64 %3847 to i32
  %3849 = alloca i64, i32 %3848, align 8
  %3850 = and i64 %391, 1966666158318384764
  %3851 = xor i64 %391, -1
  %3852 = xor i64 1966666158318384764, %3851
  %3853 = and i64 %3852, 1966666158318384764
  %3854 = or i64 %1454, -5221077070847426853
  %3855 = and i64 -5221077070847426853, %1454
  %3856 = xor i64 -5221077070847426853, %1454
  %3857 = or i64 %3855, %3856
  %3858 = add i64 %389, 2275874801529487582
  %3859 = and i64 2275874801529487582, %389
  %3860 = or i64 2275874801529487582, %389
  %3861 = add i64 %3859, %3860
  %3862 = xor i64 %3857, %3854
  %3863 = xor i64 %3862, %3858
  %3864 = xor i64 %3863, %3861
  %3865 = xor i64 %3864, -8705389296263649193
  %3866 = xor i64 %3865, %3853
  %3867 = xor i64 %3866, %3850
  %3868 = add i64 %772, -4350097014992670739
  %3869 = sub i64 0, %772
  %3870 = add i64 4350097014992670739, %3869
  %3871 = sub i64 0, %3870
  %3872 = add i64 %776, -107377355773955335
  %3873 = add i64 -1162955642271307076, %776
  %3874 = add i64 %3873, 1055578286497351741
  %3875 = or i64 %341, -5485509234136600325
  %3876 = and i64 -5485509234136600325, %341
  %3877 = xor i64 -5485509234136600325, %341
  %3878 = or i64 %3876, %3877
  %3879 = xor i64 %3868, %3872
  %3880 = xor i64 %3879, %3874
  %3881 = xor i64 %3880, %3871
  %3882 = xor i64 %3881, 0
  %3883 = xor i64 %3882, %3878
  %3884 = xor i64 %3883, %3875
  %3885 = mul i64 %3867, %3884
  %3886 = trunc i64 %3885 to i1
  %3887 = or i64 %686, -2199658542407543854
  %3888 = xor i64 %686, -1
  %3889 = and i64 %3888, -8513461338859302607
  %3890 = and i64 %686, 8513461338859302606
  %3891 = or i64 %3889, %3890
  %3892 = xor i64 7539907795011764963, %3891
  %3893 = xor i64 %686, -1
  %3894 = or i64 2199658542407543853, %3893
  %3895 = xor i64 %3894, -1
  %3896 = and i64 %3895, -1
  %3897 = or i64 %3892, %3896
  %3898 = add i64 %1292, 7936118395030843379
  %3899 = sub i64 0, %1292
  %3900 = add i64 -7936118395030843379, %3899
  %3901 = sub i64 0, %3900
  %3902 = add i64 %393, -8577800682531346274
  %3903 = sub i64 0, %393
  %3904 = add i64 8577800682531346274, %3903
  %3905 = sub i64 0, %3904
  %3906 = xor i64 %3898, %3901
  %3907 = xor i64 %3906, %3905
  %3908 = xor i64 %3907, %3902
  %3909 = xor i64 %3908, %3897
  %3910 = xor i64 %3909, -7041752114438906075
  %3911 = xor i64 %3910, %3887
  %3912 = sext i32 %50 to i64
  %3913 = add i64 %3912, 6713272880128953216
  %3914 = sub i64 0, %3912
  %3915 = add i64 -6713272880128953216, %3914
  %3916 = sub i64 0, %3915
  %3917 = add i64 %607, 2814088012837902447
  %3918 = xor i64 2814088012837902447, %607
  %3919 = and i64 2814088012837902447, %607
  %3920 = mul i64 2, %3919
  %3921 = add i64 %3918, %3920
  %3922 = xor i64 %3916, 0
  %3923 = xor i64 %3922, %3917
  %3924 = xor i64 %3923, %3921
  %3925 = xor i64 %3924, %3913
  %3926 = mul i64 %3911, %3925
  %3927 = trunc i64 %3926 to i32
  %3928 = add i64 %866, -985666194941661309
  %3929 = xor i64 -985666194941661309, %866
  %3930 = and i64 -985666194941661309, %866
  %3931 = mul i64 2, %3930
  %3932 = add i64 %3929, %3931
  %3933 = and i64 %1533, 8101441367255959939
  %3934 = xor i64 %1533, -1
  %3935 = xor i64 8101441367255959939, %3934
  %3936 = and i64 %3935, 8101441367255959939
  %3937 = xor i64 %3933, %3928
  %3938 = xor i64 %3937, 10675989230024253
  %3939 = xor i64 %3938, %3936
  %3940 = xor i64 %3939, %3932
  %3941 = and i64 %393, 2435859610762991154
  %3942 = or i64 -2435859610762991155, %393
  %3943 = sub i64 %3942, -2435859610762991155
  %3944 = and i64 %666, -92162458681904626
  %3945 = xor i64 %666, -1
  %3946 = xor i64 -92162458681904626, %3945
  %3947 = and i64 %3946, -92162458681904626
  %3948 = and i64 %444, -1527842875752452366
  %3949 = xor i64 %444, -1
  %3950 = xor i64 -1527842875752452366, %3949
  %3951 = and i64 %3950, -1527842875752452366
  %3952 = xor i64 %3951, %3944
  %3953 = xor i64 %3952, %3947
  %3954 = xor i64 %3953, %3948
  %3955 = xor i64 %3954, %3943
  %3956 = xor i64 %3955, %3941
  %3957 = xor i64 %3956, 0
  %3958 = mul i64 %3940, %3957
  %3959 = or i64 %1653, -6362097292380085374
  %3960 = xor i64 %1653, -1
  %3961 = and i64 %3960, 1139992255729403120
  %3962 = and i64 %1653, -1139992255729403121
  %3963 = or i64 %3961, %3962
  %3964 = xor i64 -6311976491453814926, %3963
  %3965 = xor i64 %1653, -1
  %3966 = or i64 6362097292380085373, %3965
  %3967 = xor i64 %3966, -1
  %3968 = and i64 %3967, -1
  %3969 = or i64 %3964, %3968
  %3970 = add i64 %920, -5790281396475144254
  %3971 = sub i64 0, %920
  %3972 = add i64 5790281396475144254, %3971
  %3973 = sub i64 0, %3972
  %3974 = xor i64 -7833507739916931795, %3969
  %3975 = xor i64 %3974, %3959
  %3976 = xor i64 %3975, %3973
  %3977 = xor i64 %3976, %3970
  %3978 = add i64 %1183, -2453554671189664526
  %3979 = and i64 -2453554671189664526, %1183
  %3980 = or i64 -2453554671189664526, %1183
  %3981 = add i64 %3979, %3980
  %3982 = and i64 %1076, 6079518023967854955
  %3983 = xor i64 %1076, -1
  %3984 = or i64 -6079518023967854956, %3983
  %3985 = xor i64 %3984, -1
  %3986 = and i64 %3985, -1
  %3987 = xor i64 %3981, %3986
  %3988 = xor i64 %3987, 0
  %3989 = xor i64 %3988, %3982
  %3990 = xor i64 %3989, %3978
  %3991 = mul i64 %3977, %3990
  %3992 = trunc i64 %3991 to i1
  %3993 = add i64 %916, 3861247857857417008
  %3994 = xor i64 3861247857857417008, %916
  %3995 = and i64 3861247857857417008, %916
  %3996 = mul i64 2, %3995
  %3997 = add i64 %3994, %3996
  %3998 = and i64 %1525, -3035028744089692726
  %3999 = xor i64 %1525, -1
  %4000 = xor i64 -3035028744089692726, %3999
  %4001 = and i64 %4000, -3035028744089692726
  %4002 = xor i64 3360138341984012033, %3997
  %4003 = xor i64 %4002, %3993
  %4004 = xor i64 %4003, %3998
  %4005 = xor i64 %4004, %4001
  %4006 = add i64 %768, 8654340033481110593
  %4007 = and i64 8654340033481110593, %768
  %4008 = or i64 8654340033481110593, %768
  %4009 = add i64 %4007, %4008
  %4010 = and i64 %1495, 5524953766596888209
  %4011 = xor i64 %1495, -1
  %4012 = or i64 -5524953766596888210, %4011
  %4013 = xor i64 %4012, -1
  %4014 = and i64 %4013, -1
  %4015 = xor i64 %4014, %4010
  %4016 = xor i64 %4015, %4009
  %4017 = xor i64 %4016, %4006
  %4018 = xor i64 %4017, 0
  %4019 = mul i64 %4005, %4018
  %4020 = trunc i64 %4019 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %3804, i64* %3849, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %3886, i32 0, i32 %3927, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %3958, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %3992, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %4020, i32 0, i1* null, i1* null)
  %4021 = load i64, i64* %3849, align 8
  %4022 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12852019627141998670, i32 0, i64 %4021
  store i8** %4022, i8*** %2, align 8
  ret void

"35":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4023 = load i64, i64* %3, align 8
  %4024 = alloca i64, align 8
  %4025 = and i64 %725, -3378837644773915918
  %4026 = or i64 3378837644773915917, %725
  %4027 = sub i64 %4026, 3378837644773915917
  %4028 = add i64 %1539, -4851439093743560303
  %4029 = add i64 -755413395258852542, %1539
  %4030 = add i64 %4029, -4096025698484707761
  %4031 = or i64 %395, -1803544283466237796
  %4032 = and i64 -1803544283466237796, %395
  %4033 = xor i64 -1803544283466237796, %395
  %4034 = or i64 %4032, %4033
  %4035 = xor i64 %4034, %4030
  %4036 = xor i64 %4035, -632669842001372929
  %4037 = xor i64 %4036, %4027
  %4038 = xor i64 %4037, %4025
  %4039 = xor i64 %4038, %4028
  %4040 = xor i64 %4039, %4031
  %4041 = and i64 %1531, 8812945048169599927
  %4042 = or i64 -8812945048169599928, %1531
  %4043 = sub i64 %4042, -8812945048169599928
  %4044 = or i64 %656, -7197788799519159093
  %4045 = xor i64 %656, -1
  %4046 = and i64 %4045, -1546168586621021164
  %4047 = and i64 %656, 1546168586621021163
  %4048 = or i64 %4046, %4047
  %4049 = xor i64 8545218434088442079, %4048
  %4050 = xor i64 %656, -1
  %4051 = or i64 7197788799519159092, %4050
  %4052 = xor i64 %4051, -1
  %4053 = and i64 %4052, -1
  %4054 = or i64 %4049, %4053
  %4055 = add i64 %177, -4905452814683829633
  %4056 = sub i64 0, %177
  %4057 = add i64 4905452814683829633, %4056
  %4058 = sub i64 0, %4057
  %4059 = xor i64 %4043, %4055
  %4060 = xor i64 %4059, %4054
  %4061 = xor i64 %4060, %4044
  %4062 = xor i64 %4061, 0
  %4063 = xor i64 %4062, %4058
  %4064 = xor i64 %4063, %4041
  %4065 = mul i64 %4040, %4064
  %4066 = trunc i64 %4065 to i1
  %4067 = add i64 %101, 1710015488510745425
  %4068 = and i64 1710015488510745425, %101
  %4069 = or i64 1710015488510745425, %101
  %4070 = add i64 %4068, %4069
  %4071 = and i64 %1511, 8420672903242579745
  %4072 = xor i64 %1511, -1
  %4073 = or i64 -8420672903242579746, %4072
  %4074 = xor i64 %4073, -1
  %4075 = and i64 %4074, -1
  %4076 = add i64 %1135, -6979696261502845581
  %4077 = sub i64 0, %1135
  %4078 = add i64 6979696261502845581, %4077
  %4079 = sub i64 0, %4078
  %4080 = xor i64 %4067, %4070
  %4081 = xor i64 %4080, %4076
  %4082 = xor i64 %4081, %4079
  %4083 = xor i64 %4082, -8045454940708183987
  %4084 = xor i64 %4083, %4075
  %4085 = xor i64 %4084, %4071
  %4086 = sext i32 %170 to i64
  %4087 = and i64 %4086, 6340948938441951646
  %4088 = xor i64 %4086, -1
  %4089 = or i64 -6340948938441951647, %4088
  %4090 = xor i64 %4089, -1
  %4091 = and i64 %4090, -1
  %4092 = or i64 %1525, 3722377064869353642
  %4093 = xor i64 %1525, -1
  %4094 = and i64 3722377064869353642, %4093
  %4095 = add i64 %4094, %1525
  %4096 = xor i64 %4095, %4091
  %4097 = xor i64 %4096, %4092
  %4098 = xor i64 %4097, %4087
  %4099 = xor i64 %4098, 0
  %4100 = mul i64 %4085, %4099
  %4101 = trunc i64 %4100 to i32
  %4102 = or i64 %341, 7907070822870268697
  %4103 = and i64 7907070822870268697, %341
  %4104 = xor i64 7907070822870268697, %341
  %4105 = or i64 %4103, %4104
  %4106 = or i64 %912, -310835120537667553
  %4107 = xor i64 %912, -1
  %4108 = and i64 -310835120537667553, %4107
  %4109 = add i64 %4108, %912
  %4110 = add i64 %450, 1328355643449921939
  %4111 = xor i64 1328355643449921939, %450
  %4112 = and i64 1328355643449921939, %450
  %4113 = mul i64 2, %4112
  %4114 = add i64 %4111, %4113
  %4115 = xor i64 -8619597036473660189, %4114
  %4116 = xor i64 %4115, %4102
  %4117 = xor i64 %4116, %4106
  %4118 = xor i64 %4117, %4110
  %4119 = xor i64 %4118, %4105
  %4120 = xor i64 %4119, %4109
  %4121 = add i64 %1649, -1434543277094502535
  %4122 = and i64 -1434543277094502535, %1649
  %4123 = or i64 -1434543277094502535, %1649
  %4124 = add i64 %4122, %4123
  %4125 = add i64 %910, 5704763277710775223
  %4126 = and i64 5704763277710775223, %910
  %4127 = or i64 5704763277710775223, %910
  %4128 = add i64 %4126, %4127
  %4129 = xor i64 %4128, %4121
  %4130 = xor i64 %4129, %4124
  %4131 = xor i64 %4130, 0
  %4132 = xor i64 %4131, %4125
  %4133 = mul i64 %4120, %4132
  %4134 = trunc i64 %4133 to i32
  %4135 = or i64 %684, -4976413108623188055
  %4136 = xor i64 %684, -1
  %4137 = and i64 %4136, 7226210854641171635
  %4138 = and i64 %684, -7226210854641171636
  %4139 = or i64 %4137, %4138
  %4140 = xor i64 -2398005342444215526, %4139
  %4141 = xor i64 %684, -1
  %4142 = or i64 4976413108623188054, %4141
  %4143 = xor i64 %4142, -1
  %4144 = and i64 %4143, -1
  %4145 = or i64 %4140, %4144
  %4146 = or i64 %1645, 1253792153853221566
  %4147 = xor i64 %1645, -1
  %4148 = and i64 %4147, -5541011401325426005
  %4149 = and i64 %1645, 5541011401325426004
  %4150 = or i64 %4148, %4149
  %4151 = xor i64 -6738508542119243755, %4150
  %4152 = xor i64 %1645, -1
  %4153 = or i64 -1253792153853221567, %4152
  %4154 = xor i64 %4153, -1
  %4155 = and i64 %4154, -1
  %4156 = or i64 %4151, %4155
  %4157 = xor i64 -1272821657412683817, %4145
  %4158 = xor i64 %4157, %4135
  %4159 = xor i64 %4158, %4146
  %4160 = xor i64 %4159, %4156
  %4161 = and i64 %674, -7129032147529637689
  %4162 = xor i64 %674, -1
  %4163 = or i64 7129032147529637688, %4162
  %4164 = xor i64 %4163, -1
  %4165 = and i64 %4164, -1
  %4166 = or i64 %1296, -7760638341655161156
  %4167 = xor i64 %1296, -1
  %4168 = and i64 -7760638341655161156, %4167
  %4169 = add i64 %4168, %1296
  %4170 = or i64 %1302, 2782813472605991613
  %4171 = xor i64 %1302, -1
  %4172 = and i64 2782813472605991613, %4171
  %4173 = add i64 %4172, %1302
  %4174 = xor i64 %4165, 0
  %4175 = xor i64 %4174, %4166
  %4176 = xor i64 %4175, %4170
  %4177 = xor i64 %4176, %4161
  %4178 = xor i64 %4177, %4173
  %4179 = xor i64 %4178, %4169
  %4180 = mul i64 %4160, %4179
  %4181 = or i64 %557, 3574194783211069092
  %4182 = and i64 3574194783211069092, %557
  %4183 = xor i64 3574194783211069092, %557
  %4184 = or i64 %4182, %4183
  %4185 = and i64 %786, 7446356979365800828
  %4186 = or i64 -7446356979365800829, %786
  %4187 = sub i64 %4186, -7446356979365800829
  %4188 = xor i64 %4187, 6459949722044036829
  %4189 = xor i64 %4188, %4184
  %4190 = xor i64 %4189, %4181
  %4191 = xor i64 %4190, %4185
  %4192 = or i64 %1541, -7545995560579447483
  %4193 = xor i64 %1541, -1
  %4194 = and i64 -7545995560579447483, %4193
  %4195 = add i64 %4194, %1541
  %4196 = or i64 %868, -2106339412416184828
  %4197 = and i64 -2106339412416184828, %868
  %4198 = xor i64 -2106339412416184828, %868
  %4199 = or i64 %4197, %4198
  %4200 = or i64 %1588, -7635848300695224775
  %4201 = and i64 -7635848300695224775, %1588
  %4202 = xor i64 -7635848300695224775, %1588
  %4203 = or i64 %4201, %4202
  %4204 = xor i64 %4192, %4200
  %4205 = xor i64 %4204, 0
  %4206 = xor i64 %4205, %4199
  %4207 = xor i64 %4206, %4195
  %4208 = xor i64 %4207, %4203
  %4209 = xor i64 %4208, %4196
  %4210 = mul i64 %4191, %4209
  %4211 = add i64 %1527, -3592935698660971746
  %4212 = sub i64 0, %1527
  %4213 = sub i64 -3592935698660971746, %4212
  %4214 = and i64 %1396, -559968467699653865
  %4215 = or i64 559968467699653864, %1396
  %4216 = sub i64 %4215, 559968467699653864
  %4217 = and i64 %236, -5148241499930334356
  %4218 = or i64 5148241499930334355, %236
  %4219 = sub i64 %4218, 5148241499930334355
  %4220 = xor i64 %4213, %4211
  %4221 = xor i64 %4220, %4217
  %4222 = xor i64 %4221, %4214
  %4223 = xor i64 %4222, -1663722396773879999
  %4224 = xor i64 %4223, %4219
  %4225 = xor i64 %4224, %4216
  %4226 = or i64 %1491, 5917831710461758925
  %4227 = xor i64 %1491, -1
  %4228 = and i64 %4227, -5929463704755580440
  %4229 = and i64 %1491, 5929463704755580439
  %4230 = or i64 %4228, %4229
  %4231 = xor i64 -29822349295133659, %4230
  %4232 = xor i64 %1491, -1
  %4233 = or i64 -5917831710461758926, %4232
  %4234 = xor i64 %4233, -1
  %4235 = and i64 %4234, -1
  %4236 = or i64 %4231, %4235
  %4237 = and i64 %385, -2442635032676753925
  %4238 = xor i64 %385, -1
  %4239 = or i64 2442635032676753924, %4238
  %4240 = xor i64 %4239, -1
  %4241 = and i64 %4240, -1
  %4242 = xor i64 %4226, %4236
  %4243 = xor i64 %4242, 0
  %4244 = xor i64 %4243, %4241
  %4245 = xor i64 %4244, %4237
  %4246 = mul i64 %4225, %4245
  %4247 = trunc i64 %4246 to i1
  %4248 = or i64 %1505, 5571682942553537033
  %4249 = xor i64 %1505, -1
  %4250 = and i64 %4249, -1950607892557142064
  %4251 = and i64 %1505, 1950607892557142063
  %4252 = or i64 %4250, %4251
  %4253 = xor i64 -6215930206514881063, %4252
  %4254 = xor i64 %1505, -1
  %4255 = or i64 -5571682942553537034, %4254
  %4256 = xor i64 %4255, -1
  %4257 = and i64 %4256, -1
  %4258 = or i64 %4253, %4257
  %4259 = and i64 %226, 4373005141912807493
  %4260 = or i64 -4373005141912807494, %226
  %4261 = sub i64 %4260, -4373005141912807494
  %4262 = add i64 %549, 2858909173980407795
  %4263 = sub i64 0, %549
  %4264 = sub i64 2858909173980407795, %4263
  %4265 = xor i64 %4261, 3170944903723504941
  %4266 = xor i64 %4265, %4258
  %4267 = xor i64 %4266, %4259
  %4268 = xor i64 %4267, %4248
  %4269 = xor i64 %4268, %4262
  %4270 = xor i64 %4269, %4264
  %4271 = and i64 %686, 1242297208032209274
  %4272 = xor i64 %686, -1
  %4273 = or i64 -1242297208032209275, %4272
  %4274 = xor i64 %4273, -1
  %4275 = and i64 %4274, -1
  %4276 = or i64 %230, 8052006977262053811
  %4277 = and i64 8052006977262053811, %230
  %4278 = xor i64 8052006977262053811, %230
  %4279 = or i64 %4277, %4278
  %4280 = xor i64 %4279, 0
  %4281 = xor i64 %4280, %4275
  %4282 = xor i64 %4281, %4271
  %4283 = xor i64 %4282, %4276
  %4284 = mul i64 %4270, %4283
  %4285 = trunc i64 %4284 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %4023, i64* %4024, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %4066, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %4101, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %4134, i1* null, i1* null, i8* null, i64 %4180, i64 %4210, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %4247, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %4285, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %4286 = load i64, i64* %4024, align 8
  %4287 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable714670702284029050, i32 0, i64 %4286
  store i8** %4287, i8*** %4, align 8
  ret void

"36":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4288 = load i64, i64* %5, align 8
  %4289 = alloca i64, align 8
  %4290 = add i64 %1521, -4026160836985653597
  %4291 = add i64 8638133213079193052, %1521
  %4292 = add i64 %4291, 5782450023644704967
  %4293 = and i64 %1236, -6540914901806595676
  %4294 = xor i64 %1236, -1
  %4295 = or i64 6540914901806595675, %4294
  %4296 = xor i64 %4295, -1
  %4297 = and i64 %4296, -1
  %4298 = xor i64 %4292, %4293
  %4299 = xor i64 %4298, %4290
  %4300 = xor i64 %4299, %4297
  %4301 = xor i64 %4300, -8171253638586305269
  %4302 = or i64 %543, 8564907355498923022
  %4303 = xor i64 %543, -1
  %4304 = and i64 %4303, 7269436461876735027
  %4305 = and i64 %543, -7269436461876735028
  %4306 = or i64 %4304, %4305
  %4307 = xor i64 1314646668511782973, %4306
  %4308 = xor i64 %543, -1
  %4309 = or i64 -8564907355498923023, %4308
  %4310 = xor i64 %4309, -1
  %4311 = and i64 %4310, -1
  %4312 = or i64 %4307, %4311
  %4313 = and i64 %788, 2279632215593354165
  %4314 = xor i64 %788, -1
  %4315 = or i64 -2279632215593354166, %4314
  %4316 = xor i64 %4315, -1
  %4317 = and i64 %4316, -1
  %4318 = xor i64 %4317, %4312
  %4319 = xor i64 %4318, %4313
  %4320 = xor i64 %4319, %4302
  %4321 = xor i64 %4320, 0
  %4322 = mul i64 %4301, %4321
  %4323 = trunc i64 %4322 to i1
  %4324 = sext i32 %92 to i64
  %4325 = or i64 %4324, -5391460627113237064
  %4326 = xor i64 %4324, -1
  %4327 = and i64 %4326, 5418518029856266003
  %4328 = and i64 %4324, -5418518029856266004
  %4329 = or i64 %4327, %4328
  %4330 = xor i64 -135144893347990869, %4329
  %4331 = xor i64 %4324, -1
  %4332 = or i64 5391460627113237063, %4331
  %4333 = xor i64 %4332, -1
  %4334 = and i64 %4333, -1
  %4335 = or i64 %4330, %4334
  %4336 = and i64 %776, -9107771088125113035
  %4337 = or i64 9107771088125113034, %776
  %4338 = sub i64 %4337, 9107771088125113034
  %4339 = add i64 %224, -3418429949161915930
  %4340 = and i64 -3418429949161915930, %224
  %4341 = or i64 -3418429949161915930, %224
  %4342 = add i64 %4340, %4341
  %4343 = xor i64 4202884439753011567, %4338
  %4344 = xor i64 %4343, %4342
  %4345 = xor i64 %4344, %4325
  %4346 = xor i64 %4345, %4336
  %4347 = xor i64 %4346, %4335
  %4348 = xor i64 %4347, %4339
  %4349 = or i64 %1452, -2353562648386982666
  %4350 = and i64 -2353562648386982666, %1452
  %4351 = xor i64 -2353562648386982666, %1452
  %4352 = or i64 %4350, %4351
  %4353 = add i64 %1139, 8326081425849815500
  %4354 = sub i64 0, %1139
  %4355 = sub i64 8326081425849815500, %4354
  %4356 = add i64 %684, -5865431090444431009
  %4357 = sub i64 0, %684
  %4358 = sub i64 -5865431090444431009, %4357
  %4359 = xor i64 %4353, %4355
  %4360 = xor i64 %4359, %4349
  %4361 = xor i64 %4360, 0
  %4362 = xor i64 %4361, %4352
  %4363 = xor i64 %4362, %4356
  %4364 = xor i64 %4363, %4358
  %4365 = mul i64 %4348, %4364
  %4366 = trunc i64 %4365 to i32
  %4367 = and i64 %345, -1690643525299799288
  %4368 = or i64 1690643525299799287, %345
  %4369 = sub i64 %4368, 1690643525299799287
  %4370 = add i64 %345, 1987968465353496785
  %4371 = sub i64 0, %345
  %4372 = add i64 -1987968465353496785, %4371
  %4373 = sub i64 0, %4372
  %4374 = or i64 %1292, -761465676181330872
  %4375 = xor i64 %1292, -1
  %4376 = and i64 -761465676181330872, %4375
  %4377 = add i64 %4376, %1292
  %4378 = xor i64 %4367, %4370
  %4379 = xor i64 %4378, %4373
  %4380 = xor i64 %4379, %4374
  %4381 = xor i64 %4380, %4369
  %4382 = xor i64 %4381, 6633913170897328709
  %4383 = xor i64 %4382, %4377
  %4384 = or i64 %1232, 953807736414407707
  %4385 = xor i64 %1232, -1
  %4386 = and i64 953807736414407707, %4385
  %4387 = add i64 %4386, %1232
  %4388 = or i64 %1657, -6089214032316176184
  %4389 = xor i64 %1657, -1
  %4390 = and i64 %4389, 8991938274066574538
  %4391 = and i64 %1657, -8991938274066574539
  %4392 = or i64 %4390, %4391
  %4393 = xor i64 -2902838096636525566, %4392
  %4394 = xor i64 %1657, -1
  %4395 = or i64 6089214032316176183, %4394
  %4396 = xor i64 %4395, -1
  %4397 = and i64 %4396, -1
  %4398 = or i64 %4393, %4397
  %4399 = xor i64 %4388, %4384
  %4400 = xor i64 %4399, %4398
  %4401 = xor i64 %4400, %4387
  %4402 = xor i64 %4401, 0
  %4403 = mul i64 %4383, %4402
  %4404 = and i64 %101, -6748915481809363577
  %4405 = or i64 6748915481809363576, %101
  %4406 = sub i64 %4405, 6748915481809363576
  %4407 = and i64 %236, -1478696435191114822
  %4408 = xor i64 %236, -1
  %4409 = xor i64 -1478696435191114822, %4408
  %4410 = and i64 %4409, -1478696435191114822
  %4411 = xor i64 %4404, 4534613531537828117
  %4412 = xor i64 %4411, %4410
  %4413 = xor i64 %4412, %4406
  %4414 = xor i64 %4413, %4407
  %4415 = or i64 %912, 6244333323099099084
  %4416 = xor i64 %912, -1
  %4417 = and i64 %4416, -5484563751190789800
  %4418 = and i64 %912, 5484563751190789799
  %4419 = or i64 %4417, %4418
  %4420 = xor i64 -1924516702616367468, %4419
  %4421 = xor i64 %912, -1
  %4422 = or i64 -6244333323099099085, %4421
  %4423 = xor i64 %4422, -1
  %4424 = and i64 %4423, -1
  %4425 = or i64 %4420, %4424
  %4426 = and i64 %1076, -6786124404443835717
  %4427 = xor i64 %1076, -1
  %4428 = or i64 6786124404443835716, %4427
  %4429 = xor i64 %4428, -1
  %4430 = and i64 %4429, -1
  %4431 = xor i64 %4426, %4430
  %4432 = xor i64 %4431, 0
  %4433 = xor i64 %4432, %4425
  %4434 = xor i64 %4433, %4415
  %4435 = mul i64 %4414, %4434
  %4436 = add i64 %1541, -1636413906714368263
  %4437 = and i64 -1636413906714368263, %1541
  %4438 = or i64 -1636413906714368263, %1541
  %4439 = add i64 %4437, %4438
  %4440 = and i64 %1645, -5872434453706978149
  %4441 = xor i64 %1645, -1
  %4442 = xor i64 -5872434453706978149, %4441
  %4443 = and i64 %4442, -5872434453706978149
  %4444 = or i64 %918, -220281505780806852
  %4445 = xor i64 %918, -1
  %4446 = and i64 -220281505780806852, %4445
  %4447 = add i64 %4446, %918
  %4448 = xor i64 %4436, %4443
  %4449 = xor i64 %4448, %4447
  %4450 = xor i64 %4449, %4444
  %4451 = xor i64 %4450, %4440
  %4452 = xor i64 %4451, %4439
  %4453 = xor i64 %4452, 8650692709822428161
  %4454 = add i64 %662, -8800032478686631187
  %4455 = add i64 4077047816324128020, %662
  %4456 = sub i64 %4455, -5569663778698792409
  %4457 = add i64 %1300, 5361890178765941309
  %4458 = xor i64 5361890178765941309, %1300
  %4459 = and i64 5361890178765941309, %1300
  %4460 = mul i64 2, %4459
  %4461 = add i64 %4458, %4460
  %4462 = xor i64 %4457, %4454
  %4463 = xor i64 %4462, %4461
  %4464 = xor i64 %4463, %4456
  %4465 = xor i64 %4464, 0
  %4466 = mul i64 %4453, %4465
  %4467 = trunc i64 %4466 to i1
  %4468 = or i64 %1139, 9219565959470609260
  %4469 = xor i64 %1139, -1
  %4470 = and i64 9219565959470609260, %4469
  %4471 = add i64 %4470, %1139
  %4472 = or i64 %1523, -1564533294438640541
  %4473 = xor i64 %1523, -1
  %4474 = and i64 -1564533294438640541, %4473
  %4475 = add i64 %4474, %1523
  %4476 = add i64 %450, -3644148528096578193
  %4477 = xor i64 -3644148528096578193, %450
  %4478 = and i64 -3644148528096578193, %450
  %4479 = mul i64 2, %4478
  %4480 = add i64 %4477, %4479
  %4481 = xor i64 %4468, %4480
  %4482 = xor i64 %4481, %4475
  %4483 = xor i64 %4482, %4472
  %4484 = xor i64 %4483, %4476
  %4485 = xor i64 %4484, %4471
  %4486 = xor i64 %4485, -3534405035262421339
  %4487 = sext i32 %59 to i64
  %4488 = add i64 %4487, 6992006178189241853
  %4489 = and i64 6992006178189241853, %4487
  %4490 = or i64 6992006178189241853, %4487
  %4491 = add i64 %4489, %4490
  %4492 = and i64 %1074, 7269390149378286961
  %4493 = xor i64 %1074, -1
  %4494 = xor i64 7269390149378286961, %4493
  %4495 = and i64 %4494, 7269390149378286961
  %4496 = add i64 %784, 6584101686847839781
  %4497 = xor i64 6584101686847839781, %784
  %4498 = and i64 6584101686847839781, %784
  %4499 = mul i64 2, %4498
  %4500 = add i64 %4497, %4499
  %4501 = xor i64 %4500, 0
  %4502 = xor i64 %4501, %4488
  %4503 = xor i64 %4502, %4491
  %4504 = xor i64 %4503, %4495
  %4505 = xor i64 %4504, %4496
  %4506 = xor i64 %4505, %4492
  %4507 = mul i64 %4486, %4506
  %4508 = trunc i64 %4507 to i1
  %4509 = add i64 %1288, 2525448639099840905
  %4510 = and i64 2525448639099840905, %1288
  %4511 = or i64 2525448639099840905, %1288
  %4512 = add i64 %4510, %4511
  %4513 = add i64 %452, 407618796662259543
  %4514 = sub i64 0, %452
  %4515 = add i64 -407618796662259543, %4514
  %4516 = sub i64 0, %4515
  %4517 = xor i64 %4512, %4509
  %4518 = xor i64 %4517, %4516
  %4519 = xor i64 %4518, -1299770270924329655
  %4520 = xor i64 %4519, %4513
  %4521 = add i64 %1452, 482861020915759506
  %4522 = add i64 -330097094019026565, %1452
  %4523 = sub i64 %4522, -812958114934786071
  %4524 = add i64 %666, 5162436834113413156
  %4525 = add i64 2214648646005541069, %666
  %4526 = add i64 %4525, 2947788188107872087
  %4527 = xor i64 %4524, %4526
  %4528 = xor i64 %4527, 0
  %4529 = xor i64 %4528, %4523
  %4530 = xor i64 %4529, %4521
  %4531 = mul i64 %4520, %4530
  %4532 = trunc i64 %4531 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %4288, i64* %4289, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %4323, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %4366, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %4403, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %4435, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 %4467, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %4508, i1 false, i1 %4532, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %4533 = load i64, i64* %4289, align 8
  %4534 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5267233781939814659, i32 0, i64 %4533
  store i8** %4534, i8*** %6, align 8
  ret void

"37":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4535 = load i64, i64* %7, align 8
  %4536 = alloca i64, align 8
  %4537 = or i64 %1499, -1519242609372812257
  %4538 = xor i64 %1499, -1
  %4539 = and i64 -1519242609372812257, %4538
  %4540 = add i64 %4539, %1499
  %4541 = or i64 %1647, 357835930415712332
  %4542 = and i64 357835930415712332, %1647
  %4543 = xor i64 357835930415712332, %1647
  %4544 = or i64 %4542, %4543
  %4545 = xor i64 %4540, %4537
  %4546 = xor i64 %4545, %4541
  %4547 = xor i64 %4546, %4544
  %4548 = xor i64 %4547, 4742232280723088821
  %4549 = add i64 %1286, 6548723816003339723
  %4550 = xor i64 6548723816003339723, %1286
  %4551 = and i64 6548723816003339723, %1286
  %4552 = mul i64 2, %4551
  %4553 = add i64 %4550, %4552
  %4554 = or i64 %1343, -4406933618991324169
  %4555 = xor i64 %1343, -1
  %4556 = and i64 -4406933618991324169, %4555
  %4557 = add i64 %4556, %1343
  %4558 = xor i64 %4557, %4553
  %4559 = xor i64 %4558, %4554
  %4560 = xor i64 %4559, %4549
  %4561 = xor i64 %4560, 0
  %4562 = mul i64 %4548, %4561
  %4563 = trunc i64 %4562 to i1
  %4564 = add i64 %1296, 6484623391189681265
  %4565 = add i64 -5923148159820647041, %1296
  %4566 = sub i64 %4565, 6038972522699223310
  %4567 = and i64 %1582, 1881527390740646976
  %4568 = xor i64 %1582, -1
  %4569 = xor i64 1881527390740646976, %4568
  %4570 = and i64 %4569, 1881527390740646976
  %4571 = xor i64 %4564, %4567
  %4572 = xor i64 %4571, %4570
  %4573 = xor i64 %4572, %4566
  %4574 = xor i64 %4573, -105801141926246061
  %4575 = add i64 %1491, 1225713515167075387
  %4576 = sub i64 0, %1491
  %4577 = sub i64 1225713515167075387, %4576
  %4578 = and i64 %957, 6025650855771151230
  %4579 = xor i64 %957, -1
  %4580 = xor i64 6025650855771151230, %4579
  %4581 = and i64 %4580, 6025650855771151230
  %4582 = and i64 %656, 6934926814573721766
  %4583 = or i64 -6934926814573721767, %656
  %4584 = sub i64 %4583, -6934926814573721767
  %4585 = xor i64 %4578, 0
  %4586 = xor i64 %4585, %4575
  %4587 = xor i64 %4586, %4584
  %4588 = xor i64 %4587, %4577
  %4589 = xor i64 %4588, %4582
  %4590 = xor i64 %4589, %4581
  %4591 = mul i64 %4574, %4590
  %4592 = trunc i64 %4591 to i1
  %4593 = and i64 %1288, -3368615145632210293
  %4594 = xor i64 %1288, -1
  %4595 = xor i64 -3368615145632210293, %4594
  %4596 = and i64 %4595, -3368615145632210293
  %4597 = or i64 %668, -7635581241073891750
  %4598 = xor i64 %668, -1
  %4599 = and i64 -7635581241073891750, %4598
  %4600 = add i64 %4599, %668
  %4601 = xor i64 %4596, %4593
  %4602 = xor i64 %4601, %4600
  %4603 = xor i64 %4602, %4597
  %4604 = xor i64 %4603, -1185864868001823237
  %4605 = add i64 %1586, -3312874142708452739
  %4606 = add i64 34218131912901425, %1586
  %4607 = sub i64 %4606, 3347092274621354164
  %4608 = and i64 %553, 5544572696232073376
  %4609 = xor i64 %553, -1
  %4610 = or i64 -5544572696232073377, %4609
  %4611 = xor i64 %4610, -1
  %4612 = and i64 %4611, -1
  %4613 = xor i64 %4605, %4612
  %4614 = xor i64 %4613, 0
  %4615 = xor i64 %4614, %4607
  %4616 = xor i64 %4615, %4608
  %4617 = mul i64 %4604, %4616
  %4618 = add i64 %1586, 7138359162619753519
  %4619 = sub i64 0, %1586
  %4620 = sub i64 7138359162619753519, %4619
  %4621 = or i64 %1523, 1994045399088691974
  %4622 = xor i64 %1523, -1
  %4623 = and i64 1994045399088691974, %4622
  %4624 = add i64 %4623, %1523
  %4625 = and i64 %910, 5204831196260557722
  %4626 = xor i64 %910, -1
  %4627 = xor i64 5204831196260557722, %4626
  %4628 = and i64 %4627, 5204831196260557722
  %4629 = xor i64 %4620, -184765000771796977
  %4630 = xor i64 %4629, %4628
  %4631 = xor i64 %4630, %4624
  %4632 = xor i64 %4631, %4618
  %4633 = xor i64 %4632, %4621
  %4634 = xor i64 %4633, %4625
  %4635 = or i64 %345, -5345998245193118075
  %4636 = xor i64 %345, -1
  %4637 = and i64 -5345998245193118075, %4636
  %4638 = add i64 %4637, %345
  %4639 = and i64 %725, 192198165347061725
  %4640 = xor i64 %725, -1
  %4641 = or i64 -192198165347061726, %4640
  %4642 = xor i64 %4641, -1
  %4643 = and i64 %4642, -1
  %4644 = xor i64 0, %4635
  %4645 = xor i64 %4644, %4639
  %4646 = xor i64 %4645, %4638
  %4647 = xor i64 %4646, %4643
  %4648 = mul i64 %4634, %4647
  %4649 = trunc i64 %4648 to i32
  %4650 = and i64 %656, -3624093841365134129
  %4651 = or i64 3624093841365134128, %656
  %4652 = sub i64 %4651, 3624093841365134128
  %4653 = or i64 %1240, 4757492137483168219
  %4654 = xor i64 %1240, -1
  %4655 = and i64 %4654, 5479617282646276840
  %4656 = and i64 %1240, -5479617282646276841
  %4657 = or i64 %4655, %4656
  %4658 = xor i64 1012609554788979507, %4657
  %4659 = xor i64 %1240, -1
  %4660 = or i64 -4757492137483168220, %4659
  %4661 = xor i64 %4660, -1
  %4662 = and i64 %4661, -1
  %4663 = or i64 %4658, %4662
  %4664 = xor i64 %4650, %4653
  %4665 = xor i64 %4664, %4663
  %4666 = xor i64 %4665, 753343544664751663
  %4667 = xor i64 %4666, %4652
  %4668 = or i64 %95, 7010204798955309215
  %4669 = xor i64 %95, -1
  %4670 = and i64 7010204798955309215, %4669
  %4671 = add i64 %4670, %95
  %4672 = add i64 %725, -1897274954017307296
  %4673 = add i64 1952762234586373288, %725
  %4674 = sub i64 %4673, 3850037188603680584
  %4675 = add i64 %1501, -1933801814583195369
  %4676 = xor i64 -1933801814583195369, %1501
  %4677 = and i64 -1933801814583195369, %1501
  %4678 = mul i64 2, %4677
  %4679 = add i64 %4676, %4678
  %4680 = xor i64 %4674, %4679
  %4681 = xor i64 %4680, %4672
  %4682 = xor i64 %4681, %4671
  %4683 = xor i64 %4682, %4675
  %4684 = xor i64 %4683, %4668
  %4685 = xor i64 %4684, 0
  %4686 = mul i64 %4667, %4685
  %4687 = trunc i64 %4686 to i1
  %4688 = or i64 %770, 2141138469564215776
  %4689 = xor i64 %770, -1
  %4690 = and i64 %4689, -6560094969441276359
  %4691 = and i64 %770, 6560094969441276358
  %4692 = or i64 %4690, %4691
  %4693 = xor i64 -5097223232987308071, %4692
  %4694 = xor i64 %770, -1
  %4695 = or i64 -2141138469564215777, %4694
  %4696 = xor i64 %4695, -1
  %4697 = and i64 %4696, -1
  %4698 = or i64 %4693, %4697
  %4699 = and i64 %446, 7510775121800450750
  %4700 = xor i64 %446, -1
  %4701 = xor i64 7510775121800450750, %4700
  %4702 = and i64 %4701, 7510775121800450750
  %4703 = xor i64 %4702, %4699
  %4704 = xor i64 %4703, %4698
  %4705 = xor i64 %4704, %4688
  %4706 = xor i64 %4705, -1356084725324214897
  %4707 = add i64 %1038, 3958241763221300620
  %4708 = xor i64 3958241763221300620, %1038
  %4709 = and i64 3958241763221300620, %1038
  %4710 = mul i64 2, %4709
  %4711 = add i64 %4708, %4710
  %4712 = and i64 %1238, -8638818904421577022
  %4713 = xor i64 %1238, -1
  %4714 = xor i64 -8638818904421577022, %4713
  %4715 = and i64 %4714, -8638818904421577022
  %4716 = xor i64 %4712, %4711
  %4717 = xor i64 %4716, 0
  %4718 = xor i64 %4717, %4707
  %4719 = xor i64 %4718, %4715
  %4720 = mul i64 %4706, %4719
  %4721 = trunc i64 %4720 to i1
  %4722 = add i64 %990, 2992939645210253987
  %4723 = add i64 -6362099132842415151, %990
  %4724 = add i64 %4723, -9091705295656882478
  %4725 = add i64 %1493, -6244488789567876646
  %4726 = xor i64 -6244488789567876646, %1493
  %4727 = and i64 -6244488789567876646, %1493
  %4728 = mul i64 2, %4727
  %4729 = add i64 %4726, %4728
  %4730 = add i64 %912, 3627294927186884962
  %4731 = xor i64 3627294927186884962, %912
  %4732 = and i64 3627294927186884962, %912
  %4733 = mul i64 2, %4732
  %4734 = add i64 %4731, %4733
  %4735 = xor i64 -3973690943209275761, %4722
  %4736 = xor i64 %4735, %4724
  %4737 = xor i64 %4736, %4730
  %4738 = xor i64 %4737, %4734
  %4739 = xor i64 %4738, %4725
  %4740 = xor i64 %4739, %4729
  %4741 = add i64 %996, 682578201351581912
  %4742 = sub i64 0, %996
  %4743 = sub i64 682578201351581912, %4742
  %4744 = or i64 %341, -5551857060562755198
  %4745 = and i64 -5551857060562755198, %341
  %4746 = xor i64 -5551857060562755198, %341
  %4747 = or i64 %4745, %4746
  %4748 = add i64 %908, 8810079597834184173
  %4749 = add i64 2028125265639858759, %908
  %4750 = sub i64 %4749, -6781954332194325414
  %4751 = xor i64 %4750, %4743
  %4752 = xor i64 %4751, %4747
  %4753 = xor i64 %4752, %4741
  %4754 = xor i64 %4753, %4744
  %4755 = xor i64 %4754, %4748
  %4756 = xor i64 %4755, 0
  %4757 = mul i64 %4740, %4756
  %4758 = trunc i64 %4757 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %4535, i64* %4536, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %4563, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %4592, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %4617, i1* null, i64 0, i32 %4649, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %4687, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %4721, i1* null, i1* null, i1* null, i32 %4758, i32 0, i1* null, i1* null)
  %4759 = load i64, i64* %4536, align 8
  %4760 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3945980122852926304, i32 0, i64 %4759
  store i8** %4760, i8*** %8, align 8
  ret void

"38":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4761 = load i64, i64* %9, align 8
  %4762 = alloca i64, align 8
  %4763 = add i64 %674, 7232667030906650372
  %4764 = add i64 9014876623800467789, %674
  %4765 = add i64 %4764, -1782209592893817417
  %4766 = or i64 %1284, 6021743383668348899
  %4767 = xor i64 %1284, -1
  %4768 = and i64 6021743383668348899, %4767
  %4769 = add i64 %4768, %1284
  %4770 = xor i64 %4765, %4769
  %4771 = xor i64 %4770, %4763
  %4772 = xor i64 %4771, 5248827528172619185
  %4773 = xor i64 %4772, %4766
  %4774 = or i64 %778, -7132408765443602328
  %4775 = xor i64 %778, -1
  %4776 = and i64 -7132408765443602328, %4775
  %4777 = add i64 %4776, %778
  %4778 = or i64 %670, -3185748087452822880
  %4779 = and i64 -3185748087452822880, %670
  %4780 = xor i64 -3185748087452822880, %670
  %4781 = or i64 %4779, %4780
  %4782 = and i64 %282, 8184057220292620253
  %4783 = or i64 -8184057220292620254, %282
  %4784 = sub i64 %4783, -8184057220292620254
  %4785 = xor i64 0, %4778
  %4786 = xor i64 %4785, %4777
  %4787 = xor i64 %4786, %4782
  %4788 = xor i64 %4787, %4784
  %4789 = xor i64 %4788, %4781
  %4790 = xor i64 %4789, %4774
  %4791 = mul i64 %4773, %4790
  %4792 = trunc i64 %4791 to i32
  %4793 = add i64 %1531, 2425760239772529345
  %4794 = add i64 -2134351237334781035, %1531
  %4795 = sub i64 %4794, -4560111477107310380
  %4796 = add i64 %998, -2014795371977009632
  %4797 = sub i64 0, %998
  %4798 = sub i64 -2014795371977009632, %4797
  %4799 = sext i32 %171 to i64
  %4800 = or i64 %4799, 2358540050724991030
  %4801 = xor i64 %4799, -1
  %4802 = and i64 %4801, -5924974765296465948
  %4803 = and i64 %4799, 5924974765296465947
  %4804 = or i64 %4802, %4803
  %4805 = xor i64 -8251309776153643054, %4804
  %4806 = xor i64 %4799, -1
  %4807 = or i64 -2358540050724991031, %4806
  %4808 = xor i64 %4807, -1
  %4809 = and i64 %4808, -1
  %4810 = or i64 %4805, %4809
  %4811 = xor i64 %4798, -1525200438475117867
  %4812 = xor i64 %4811, %4795
  %4813 = xor i64 %4812, %4793
  %4814 = xor i64 %4813, %4796
  %4815 = xor i64 %4814, %4800
  %4816 = xor i64 %4815, %4810
  %4817 = and i64 %676, 658229684399302959
  %4818 = xor i64 %676, -1
  %4819 = or i64 -658229684399302960, %4818
  %4820 = xor i64 %4819, -1
  %4821 = and i64 %4820, -1
  %4822 = and i64 %1586, -1715136002851091520
  %4823 = xor i64 %1586, -1
  %4824 = xor i64 -1715136002851091520, %4823
  %4825 = and i64 %4824, -1715136002851091520
  %4826 = sext i32 %171 to i64
  %4827 = add i64 %4826, -7876990356430324691
  %4828 = add i64 -3659623630713523244, %4826
  %4829 = sub i64 %4828, 4217366725716801447
  %4830 = xor i64 %4821, %4829
  %4831 = xor i64 %4830, %4817
  %4832 = xor i64 %4831, 0
  %4833 = xor i64 %4832, %4827
  %4834 = xor i64 %4833, %4822
  %4835 = xor i64 %4834, %4825
  %4836 = mul i64 %4816, %4835
  %4837 = and i64 %1509, 1887922738952065595
  %4838 = xor i64 %1509, -1
  %4839 = xor i64 1887922738952065595, %4838
  %4840 = and i64 %4839, 1887922738952065595
  %4841 = add i64 %284, -6381317927288811476
  %4842 = sub i64 0, %284
  %4843 = add i64 6381317927288811476, %4842
  %4844 = sub i64 0, %4843
  %4845 = or i64 %387, 8173965328677025348
  %4846 = and i64 8173965328677025348, %387
  %4847 = xor i64 8173965328677025348, %387
  %4848 = or i64 %4846, %4847
  %4849 = xor i64 %4841, %4837
  %4850 = xor i64 %4849, 8693403365459226857
  %4851 = xor i64 %4850, %4848
  %4852 = xor i64 %4851, %4844
  %4853 = xor i64 %4852, %4840
  %4854 = xor i64 %4853, %4845
  %4855 = and i64 %236, -7629073501956135567
  %4856 = or i64 7629073501956135566, %236
  %4857 = sub i64 %4856, 7629073501956135566
  %4858 = or i64 %234, -7333466199705324854
  %4859 = and i64 -7333466199705324854, %234
  %4860 = xor i64 -7333466199705324854, %234
  %4861 = or i64 %4859, %4860
  %4862 = add i64 %1649, -1493156863431221803
  %4863 = add i64 7383188552724713530, %1649
  %4864 = sub i64 %4863, 8876345416155935333
  %4865 = xor i64 0, %4857
  %4866 = xor i64 %4865, %4864
  %4867 = xor i64 %4866, %4855
  %4868 = xor i64 %4867, %4862
  %4869 = xor i64 %4868, %4861
  %4870 = xor i64 %4869, %4858
  %4871 = mul i64 %4854, %4870
  %4872 = and i64 %829, 4007899099256438089
  %4873 = or i64 -4007899099256438090, %829
  %4874 = sub i64 %4873, -4007899099256438090
  %4875 = and i64 %684, 1660447904867942199
  %4876 = xor i64 %684, -1
  %4877 = or i64 -1660447904867942200, %4876
  %4878 = xor i64 %4877, -1
  %4879 = and i64 %4878, -1
  %4880 = xor i64 %4872, %4874
  %4881 = xor i64 %4880, 1398718986586547735
  %4882 = xor i64 %4881, %4875
  %4883 = xor i64 %4882, %4879
  %4884 = and i64 %278, -7111715967341433159
  %4885 = or i64 7111715967341433158, %278
  %4886 = sub i64 %4885, 7111715967341433158
  %4887 = add i64 %1541, 8624729584211808921
  %4888 = add i64 -8186831998372837192, %1541
  %4889 = sub i64 %4888, 1635182491124905503
  %4890 = or i64 %792, 3114972565426082540
  %4891 = xor i64 %792, -1
  %4892 = and i64 %4891, -1370583117208590479
  %4893 = and i64 %792, 1370583117208590478
  %4894 = or i64 %4892, %4893
  %4895 = xor i64 -4053188116487506531, %4894
  %4896 = xor i64 %792, -1
  %4897 = or i64 -3114972565426082541, %4896
  %4898 = xor i64 %4897, -1
  %4899 = and i64 %4898, -1
  %4900 = or i64 %4895, %4899
  %4901 = xor i64 %4889, %4884
  %4902 = xor i64 %4901, %4887
  %4903 = xor i64 %4902, %4890
  %4904 = xor i64 %4903, 0
  %4905 = xor i64 %4904, %4900
  %4906 = xor i64 %4905, %4886
  %4907 = mul i64 %4883, %4906
  %4908 = or i64 %1588, -7941662867997729337
  %4909 = xor i64 %1588, -1
  %4910 = and i64 %4909, 3424638811325569976
  %4911 = and i64 %1588, -3424638811325569977
  %4912 = or i64 %4910, %4911
  %4913 = xor i64 -4733483970270443905, %4912
  %4914 = xor i64 %1588, -1
  %4915 = or i64 7941662867997729336, %4914
  %4916 = xor i64 %4915, -1
  %4917 = and i64 %4916, -1
  %4918 = or i64 %4913, %4917
  %4919 = or i64 %1499, 7689844642817538130
  %4920 = xor i64 %1499, -1
  %4921 = and i64 %4920, 7664604814199414051
  %4922 = and i64 %1499, -7664604814199414052
  %4923 = or i64 %4921, %4922
  %4924 = xor i64 65853659657708913, %4923
  %4925 = xor i64 %1499, -1
  %4926 = or i64 -7689844642817538131, %4925
  %4927 = xor i64 %4926, -1
  %4928 = and i64 %4927, -1
  %4929 = or i64 %4924, %4928
  %4930 = xor i64 %4929, %4918
  %4931 = xor i64 %4930, 4080825477423601505
  %4932 = xor i64 %4931, %4908
  %4933 = xor i64 %4932, %4919
  %4934 = and i64 %1643, 2887795797261313407
  %4935 = or i64 -2887795797261313408, %1643
  %4936 = sub i64 %4935, -2887795797261313408
  %4937 = add i64 %236, 6998580568509837497
  %4938 = add i64 -5526068988719905217, %236
  %4939 = sub i64 %4938, 5922094516479808902
  %4940 = xor i64 %4934, %4936
  %4941 = xor i64 %4940, 0
  %4942 = xor i64 %4941, %4939
  %4943 = xor i64 %4942, %4937
  %4944 = mul i64 %4933, %4943
  %4945 = trunc i64 %4944 to i1
  %4946 = add i64 %674, -3238700984056851844
  %4947 = add i64 -5698914947045343727, %674
  %4948 = add i64 %4947, 2460213962988491883
  %4949 = add i64 %1647, 1330539235142005785
  %4950 = and i64 1330539235142005785, %1647
  %4951 = or i64 1330539235142005785, %1647
  %4952 = add i64 %4950, %4951
  %4953 = or i64 %555, -271058499463588711
  %4954 = and i64 -271058499463588711, %555
  %4955 = xor i64 -271058499463588711, %555
  %4956 = or i64 %4954, %4955
  %4957 = xor i64 %4956, %4952
  %4958 = xor i64 %4957, %4948
  %4959 = xor i64 %4958, %4946
  %4960 = xor i64 %4959, %4949
  %4961 = xor i64 %4960, %4953
  %4962 = xor i64 %4961, -4366677170595137857
  %4963 = add i64 %228, 4064611094930271094
  %4964 = sub i64 0, %228
  %4965 = sub i64 4064611094930271094, %4964
  %4966 = and i64 %1535, -8392268342350263352
  %4967 = xor i64 %1535, -1
  %4968 = xor i64 -8392268342350263352, %4967
  %4969 = and i64 %4968, -8392268342350263352
  %4970 = xor i64 %4966, %4969
  %4971 = xor i64 %4970, %4965
  %4972 = xor i64 %4971, 0
  %4973 = xor i64 %4972, %4963
  %4974 = mul i64 %4962, %4973
  %4975 = trunc i64 %4974 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %4761, i64* %4762, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %4792, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %4836, i32 0, i1* null, i1* null, i64 %4871, i64 %4907, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %4945, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 %4975, i1* null, i1* null)
  %4976 = load i64, i64* %4762, align 8
  %4977 = getelementptr inbounds [3 x i8*], [3 x i8*]* @obfsfuncAddrLookupTable2339431414740645237, i32 0, i64 %4976
  store i8** %4977, i8*** %10, align 8
  ret void

"39":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4978 = xor i64 1996855465712537074, %11
  store i64 %4978, i64* %12, align 8
  ret void

"40":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %4979 = load i64, i64* %13, align 8
  %4980 = alloca i64, align 8
  %4981 = and i64 %236, -8254792193322723902
  %4982 = or i64 8254792193322723901, %236
  %4983 = sub i64 %4982, 8254792193322723901
  %4984 = and i64 %656, -8303393221370774919
  %4985 = or i64 8303393221370774918, %656
  %4986 = sub i64 %4985, 8303393221370774918
  %4987 = xor i64 %4986, %4984
  %4988 = xor i64 %4987, %4983
  %4989 = xor i64 %4988, 2241027020972329843
  %4990 = xor i64 %4989, %4981
  %4991 = add i64 %1294, 8459851325038864944
  %4992 = sub i64 0, %1294
  %4993 = sub i64 8459851325038864944, %4992
  %4994 = and i64 %1343, -7009839137253664723
  %4995 = or i64 7009839137253664722, %1343
  %4996 = sub i64 %4995, 7009839137253664722
  %4997 = xor i64 %4993, %4994
  %4998 = xor i64 %4997, 0
  %4999 = xor i64 %4998, %4996
  %5000 = xor i64 %4999, %4991
  %5001 = mul i64 %4990, %5000
  %5002 = trunc i64 %5001 to i1
  %5003 = add i64 %670, -5825490361498659622
  %5004 = and i64 -5825490361498659622, %670
  %5005 = or i64 -5825490361498659622, %670
  %5006 = add i64 %5004, %5005
  %5007 = or i64 %668, -2135458090833479354
  %5008 = and i64 -2135458090833479354, %668
  %5009 = xor i64 -2135458090833479354, %668
  %5010 = or i64 %5008, %5009
  %5011 = or i64 %1529, -34807639613043717
  %5012 = xor i64 %1529, -1
  %5013 = and i64 -34807639613043717, %5012
  %5014 = add i64 %5013, %1529
  %5015 = xor i64 %5010, %5007
  %5016 = xor i64 %5015, %5011
  %5017 = xor i64 %5016, %5006
  %5018 = xor i64 %5017, -642882274103022619
  %5019 = xor i64 %5018, %5014
  %5020 = xor i64 %5019, %5003
  %5021 = add i64 %97, -2350864423328202800
  %5022 = sub i64 0, %97
  %5023 = add i64 2350864423328202800, %5022
  %5024 = sub i64 0, %5023
  %5025 = add i64 %1515, 2464861030095236294
  %5026 = add i64 -9186043431115561401, %1515
  %5027 = sub i64 %5026, 6795839612498753921
  %5028 = and i64 %1521, 4516420406510586767
  %5029 = or i64 -4516420406510586768, %1521
  %5030 = sub i64 %5029, -4516420406510586768
  %5031 = xor i64 %5027, 0
  %5032 = xor i64 %5031, %5025
  %5033 = xor i64 %5032, %5021
  %5034 = xor i64 %5033, %5028
  %5035 = xor i64 %5034, %5024
  %5036 = xor i64 %5035, %5030
  %5037 = mul i64 %5020, %5036
  %5038 = trunc i64 %5037 to i32
  %5039 = or i64 %557, -6459410986615092297
  %5040 = xor i64 %557, -1
  %5041 = and i64 -6459410986615092297, %5040
  %5042 = add i64 %5041, %557
  %5043 = add i64 %1521, -6658816867579563003
  %5044 = add i64 7604438548002955145, %1521
  %5045 = sub i64 %5044, -4183488658127033468
  %5046 = or i64 %1228, -821635510385084325
  %5047 = xor i64 %1228, -1
  %5048 = and i64 %5047, -8145159205672673567
  %5049 = and i64 %1228, 8145159205672673566
  %5050 = or i64 %5048, %5049
  %5051 = xor i64 8822096473249736378, %5050
  %5052 = xor i64 %1228, -1
  %5053 = or i64 821635510385084324, %5052
  %5054 = xor i64 %5053, -1
  %5055 = and i64 %5054, -1
  %5056 = or i64 %5051, %5055
  %5057 = xor i64 %5042, %5046
  %5058 = xor i64 %5057, %5043
  %5059 = xor i64 %5058, %5039
  %5060 = xor i64 %5059, 489495876827651865
  %5061 = xor i64 %5060, %5045
  %5062 = xor i64 %5061, %5056
  %5063 = and i64 %786, 4916081683172729796
  %5064 = xor i64 %786, -1
  %5065 = or i64 -4916081683172729797, %5064
  %5066 = xor i64 %5065, -1
  %5067 = and i64 %5066, -1
  %5068 = and i64 %1400, 7883911783688447249
  %5069 = xor i64 %1400, -1
  %5070 = or i64 -7883911783688447250, %5069
  %5071 = xor i64 %5070, -1
  %5072 = and i64 %5071, -1
  %5073 = xor i64 %5068, %5063
  %5074 = xor i64 %5073, 0
  %5075 = xor i64 %5074, %5072
  %5076 = xor i64 %5075, %5067
  %5077 = mul i64 %5062, %5076
  %5078 = add i64 %908, -8149256918704786904
  %5079 = add i64 -2303519000578824225, %908
  %5080 = sub i64 %5079, 5845737918125962679
  %5081 = add i64 %280, -6594983927335462524
  %5082 = add i64 -6396733912647181846, %280
  %5083 = add i64 %5082, -198250014688280678
  %5084 = xor i64 %5080, %5081
  %5085 = xor i64 %5084, %5083
  %5086 = xor i64 %5085, 7633124248013943455
  %5087 = xor i64 %5086, %5078
  %5088 = or i64 %1537, 3085398576510545253
  %5089 = and i64 3085398576510545253, %1537
  %5090 = xor i64 3085398576510545253, %1537
  %5091 = or i64 %5089, %5090
  %5092 = or i64 %395, -2142893811131868934
  %5093 = xor i64 %395, -1
  %5094 = and i64 %5093, -5703766913290892537
  %5095 = and i64 %395, 5703766913290892536
  %5096 = or i64 %5094, %5095
  %5097 = xor i64 5952297838677431293, %5096
  %5098 = xor i64 %395, -1
  %5099 = or i64 2142893811131868933, %5098
  %5100 = xor i64 %5099, -1
  %5101 = and i64 %5100, -1
  %5102 = or i64 %5097, %5101
  %5103 = xor i64 %5102, 0
  %5104 = xor i64 %5103, %5091
  %5105 = xor i64 %5104, %5088
  %5106 = xor i64 %5105, %5092
  %5107 = mul i64 %5087, %5106
  %5108 = trunc i64 %5107 to i1
  %5109 = and i64 %97, -4457754479351850177
  %5110 = or i64 4457754479351850176, %97
  %5111 = sub i64 %5110, 4457754479351850176
  %5112 = or i64 %1645, 3625096693503413349
  %5113 = and i64 3625096693503413349, %1645
  %5114 = xor i64 3625096693503413349, %1645
  %5115 = or i64 %5113, %5114
  %5116 = xor i64 %5109, %5111
  %5117 = xor i64 %5116, %5115
  %5118 = xor i64 %5117, -8111061846494303287
  %5119 = xor i64 %5118, %5112
  %5120 = and i64 %678, 8739800982875095874
  %5121 = xor i64 %678, -1
  %5122 = xor i64 8739800982875095874, %5121
  %5123 = and i64 %5122, 8739800982875095874
  %5124 = or i64 %555, -3225883597330760973
  %5125 = and i64 -3225883597330760973, %555
  %5126 = xor i64 -3225883597330760973, %555
  %5127 = or i64 %5125, %5126
  %5128 = add i64 %230, 6440171879108852474
  %5129 = add i64 -7764128173841843455, %230
  %5130 = add i64 %5129, -4242444020758855687
  %5131 = xor i64 %5124, 0
  %5132 = xor i64 %5131, %5120
  %5133 = xor i64 %5132, %5123
  %5134 = xor i64 %5133, %5130
  %5135 = xor i64 %5134, %5127
  %5136 = xor i64 %5135, %5128
  %5137 = mul i64 %5119, %5136
  %5138 = trunc i64 %5137 to i1
  %5139 = add i64 %1543, -3611713707344700057
  %5140 = sub i64 0, %1543
  %5141 = add i64 3611713707344700057, %5140
  %5142 = sub i64 0, %5141
  %5143 = and i64 %545, 2633759869321530650
  %5144 = or i64 -2633759869321530651, %545
  %5145 = sub i64 %5144, -2633759869321530651
  %5146 = and i64 %1296, -1537732311930025328
  %5147 = or i64 1537732311930025327, %1296
  %5148 = sub i64 %5147, 1537732311930025327
  %5149 = xor i64 8308571018986810897, %5145
  %5150 = xor i64 %5149, %5146
  %5151 = xor i64 %5150, %5142
  %5152 = xor i64 %5151, %5148
  %5153 = xor i64 %5152, %5143
  %5154 = xor i64 %5153, %5139
  %5155 = add i64 %1137, 5985944684220009131
  %5156 = sub i64 0, %1137
  %5157 = add i64 -5985944684220009131, %5156
  %5158 = sub i64 0, %5157
  %5159 = and i64 %1141, -7835326341137351424
  %5160 = or i64 7835326341137351423, %1141
  %5161 = sub i64 %5160, 7835326341137351423
  %5162 = and i64 %998, -1118503024949811730
  %5163 = xor i64 %998, -1
  %5164 = xor i64 -1118503024949811730, %5163
  %5165 = and i64 %5164, -1118503024949811730
  %5166 = xor i64 %5165, 0
  %5167 = xor i64 %5166, %5162
  %5168 = xor i64 %5167, %5159
  %5169 = xor i64 %5168, %5155
  %5170 = xor i64 %5169, %5161
  %5171 = xor i64 %5170, %5158
  %5172 = mul i64 %5154, %5171
  %5173 = trunc i64 %5172 to i1
  %5174 = add i64 %234, 5026997505693489488
  %5175 = and i64 5026997505693489488, %234
  %5176 = or i64 5026997505693489488, %234
  %5177 = add i64 %5175, %5176
  %5178 = add i64 %1659, 1958850334648831777
  %5179 = xor i64 1958850334648831777, %1659
  %5180 = and i64 1958850334648831777, %1659
  %5181 = mul i64 2, %5180
  %5182 = add i64 %5179, %5181
  %5183 = and i64 %1410, -479340225081025593
  %5184 = xor i64 %1410, -1
  %5185 = or i64 479340225081025592, %5184
  %5186 = xor i64 %5185, -1
  %5187 = and i64 %5186, -1
  %5188 = xor i64 %5183, %5174
  %5189 = xor i64 %5188, -4282307613798567909
  %5190 = xor i64 %5189, %5187
  %5191 = xor i64 %5190, %5177
  %5192 = xor i64 %5191, %5182
  %5193 = xor i64 %5192, %5178
  %5194 = add i64 %234, 7646887173951644880
  %5195 = xor i64 7646887173951644880, %234
  %5196 = and i64 7646887173951644880, %234
  %5197 = mul i64 2, %5196
  %5198 = add i64 %5195, %5197
  %5199 = or i64 %1238, -4527434909446430986
  %5200 = xor i64 %1238, -1
  %5201 = and i64 -4527434909446430986, %5200
  %5202 = add i64 %5201, %1238
  %5203 = xor i64 %5198, %5202
  %5204 = xor i64 %5203, 0
  %5205 = xor i64 %5204, %5194
  %5206 = xor i64 %5205, %5199
  %5207 = mul i64 %5193, %5206
  %5208 = trunc i64 %5207 to i1
  %5209 = add i64 %794, 7174297197537076932
  %5210 = sub i64 0, %794
  %5211 = add i64 -7174297197537076932, %5210
  %5212 = sub i64 0, %5211
  %5213 = add i64 %1234, 6596496671131510609
  %5214 = sub i64 0, %1234
  %5215 = add i64 -6596496671131510609, %5214
  %5216 = sub i64 0, %5215
  %5217 = or i64 %561, -9164397774502548207
  %5218 = and i64 -9164397774502548207, %561
  %5219 = xor i64 -9164397774502548207, %561
  %5220 = or i64 %5218, %5219
  %5221 = xor i64 %5213, %5212
  %5222 = xor i64 %5221, %5216
  %5223 = xor i64 %5222, 1228823186921317035
  %5224 = xor i64 %5223, %5209
  %5225 = xor i64 %5224, %5217
  %5226 = xor i64 %5225, %5220
  %5227 = and i64 %1131, 4218055366637654345
  %5228 = xor i64 %1131, -1
  %5229 = xor i64 4218055366637654345, %5228
  %5230 = and i64 %5229, 4218055366637654345
  %5231 = and i64 %658, 3339777300031346187
  %5232 = xor i64 %658, -1
  %5233 = or i64 -3339777300031346188, %5232
  %5234 = xor i64 %5233, -1
  %5235 = and i64 %5234, -1
  %5236 = or i64 %770, 9037702270220618387
  %5237 = xor i64 %770, -1
  %5238 = and i64 9037702270220618387, %5237
  %5239 = add i64 %5238, %770
  %5240 = xor i64 %5227, %5231
  %5241 = xor i64 %5240, %5239
  %5242 = xor i64 %5241, 0
  %5243 = xor i64 %5242, %5230
  %5244 = xor i64 %5243, %5236
  %5245 = xor i64 %5244, %5235
  %5246 = mul i64 %5226, %5245
  %5247 = trunc i64 %5246 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %4979, i64* %4980, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %5002, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %5038, i32 0, i1* null, i1* null, i64 %5077, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %5108, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %5138, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %5173, i1 false, i1 false, i1 %5208, i1 false, i1 %5247, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5248 = load i64, i64* %4980, align 8
  %5249 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12646564381111741682, i32 0, i64 %5248
  store i8** %5249, i8*** %14, align 8
  ret void

newFuncRoot:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5250 = alloca i64, align 8
  store i64* %5250, i64** %.reg2mem669, align 8
  %5251 = alloca i64, align 8
  %5252 = or i64 %684, 3589127719147319306
  %5253 = and i64 3589127719147319306, %684
  %5254 = xor i64 3589127719147319306, %684
  %5255 = or i64 %5253, %5254
  %5256 = and i64 %668, 618519153058218653
  %5257 = xor i64 %668, -1
  %5258 = xor i64 618519153058218653, %5257
  %5259 = and i64 %5258, 618519153058218653
  %5260 = xor i64 %5255, %5252
  %5261 = xor i64 %5260, %5259
  %5262 = xor i64 %5261, 4940908692934345103
  %5263 = xor i64 %5262, %5256
  %5264 = or i64 %286, -5206948109593457488
  %5265 = xor i64 %286, -1
  %5266 = and i64 -5206948109593457488, %5265
  %5267 = add i64 %5266, %286
  %5268 = or i64 %686, 2605180310557567177
  %5269 = xor i64 %686, -1
  %5270 = and i64 2605180310557567177, %5269
  %5271 = add i64 %5270, %686
  %5272 = or i64 %868, 1573478961118716490
  %5273 = and i64 1573478961118716490, %868
  %5274 = xor i64 1573478961118716490, %868
  %5275 = or i64 %5273, %5274
  %5276 = xor i64 %5264, %5267
  %5277 = xor i64 %5276, %5268
  %5278 = xor i64 %5277, %5275
  %5279 = xor i64 %5278, 0
  %5280 = xor i64 %5279, %5272
  %5281 = xor i64 %5280, %5271
  %5282 = mul i64 %5263, %5281
  %5283 = trunc i64 %5282 to i1
  %5284 = or i64 %607, 113608178849388188
  %5285 = xor i64 %607, -1
  %5286 = and i64 %5285, 6725962070343840589
  %5287 = and i64 %607, -6725962070343840590
  %5288 = or i64 %5286, %5287
  %5289 = xor i64 6684736952798668241, %5288
  %5290 = xor i64 %607, -1
  %5291 = or i64 -113608178849388189, %5290
  %5292 = xor i64 %5291, -1
  %5293 = and i64 %5292, -1
  %5294 = or i64 %5289, %5293
  %5295 = and i64 %1135, 8266221632451162200
  %5296 = xor i64 %1135, -1
  %5297 = xor i64 8266221632451162200, %5296
  %5298 = and i64 %5297, 8266221632451162200
  %5299 = add i64 %1497, 1719493271983271154
  %5300 = add i64 2587020818211734458, %1497
  %5301 = sub i64 %5300, 867527546228463304
  %5302 = xor i64 %5298, %5299
  %5303 = xor i64 %5302, %5295
  %5304 = xor i64 %5303, %5284
  %5305 = xor i64 %5304, %5294
  %5306 = xor i64 %5305, -6894921752739314901
  %5307 = xor i64 %5306, %5301
  %5308 = or i64 %96, -6339776372847368416
  %5309 = and i64 -6339776372847368416, %96
  %5310 = xor i64 -6339776372847368416, %96
  %5311 = or i64 %5309, %5310
  %5312 = add i64 %381, -577112844453481182
  %5313 = add i64 2884071197740679006, %381
  %5314 = sub i64 %5313, 3461184042194160188
  %5315 = xor i64 %5308, %5314
  %5316 = xor i64 %5315, 0
  %5317 = xor i64 %5316, %5311
  %5318 = xor i64 %5317, %5312
  %5319 = mul i64 %5307, %5318
  %5320 = trunc i64 %5319 to i32
  %5321 = add i64 %559, -2471287095292308735
  %5322 = sub i64 0, %559
  %5323 = sub i64 -2471287095292308735, %5322
  %5324 = add i64 %1529, 3216749200762467316
  %5325 = sub i64 0, %1529
  %5326 = add i64 -3216749200762467316, %5325
  %5327 = sub i64 0, %5326
  %5328 = add i64 %1493, 6757667478014933413
  %5329 = sub i64 0, %1493
  %5330 = sub i64 6757667478014933413, %5329
  %5331 = xor i64 %5323, %5328
  %5332 = xor i64 %5331, %5327
  %5333 = xor i64 %5332, %5330
  %5334 = xor i64 %5333, %5324
  %5335 = xor i64 %5334, %5321
  %5336 = xor i64 %5335, -4757068122716372067
  %5337 = add i64 %222, 2687281177306188150
  %5338 = add i64 474934985520160794, %222
  %5339 = add i64 %5338, 2212346191786027356
  %5340 = and i64 %96, 3123416345828024773
  %5341 = or i64 -3123416345828024774, %96
  %5342 = sub i64 %5341, -3123416345828024774
  %5343 = sext i32 %171 to i64
  %5344 = or i64 %5343, -8370593360569007313
  %5345 = xor i64 %5343, -1
  %5346 = and i64 %5345, -7675105657928760515
  %5347 = and i64 %5343, 7675105657928760514
  %5348 = or i64 %5346, %5347
  %5349 = xor i64 2209334070085304338, %5348
  %5350 = xor i64 %5343, -1
  %5351 = or i64 8370593360569007312, %5350
  %5352 = xor i64 %5351, -1
  %5353 = and i64 %5352, -1
  %5354 = or i64 %5349, %5353
  %5355 = xor i64 %5337, %5340
  %5356 = xor i64 %5355, 0
  %5357 = xor i64 %5356, %5354
  %5358 = xor i64 %5357, %5342
  %5359 = xor i64 %5358, %5344
  %5360 = xor i64 %5359, %5339
  %5361 = mul i64 %5336, %5360
  %5362 = add i64 %1234, -5595343531914355302
  %5363 = add i64 2212917146321061756, %1234
  %5364 = add i64 %5363, -7808260678235417058
  %5365 = or i64 %547, -6520638807571041315
  %5366 = xor i64 %547, -1
  %5367 = and i64 %5366, 6217897935359571471
  %5368 = and i64 %547, -6217897935359571472
  %5369 = or i64 %5367, %5368
  %5370 = xor i64 -880347387776465454, %5369
  %5371 = xor i64 %547, -1
  %5372 = or i64 6520638807571041314, %5371
  %5373 = xor i64 %5372, -1
  %5374 = and i64 %5373, -1
  %5375 = or i64 %5370, %5374
  %5376 = or i64 %1286, -1736354149176921874
  %5377 = xor i64 %1286, -1
  %5378 = and i64 -1736354149176921874, %5377
  %5379 = add i64 %5378, %1286
  %5380 = xor i64 %5375, %5376
  %5381 = xor i64 %5380, %5362
  %5382 = xor i64 %5381, %5364
  %5383 = xor i64 %5382, %5365
  %5384 = xor i64 %5383, %5379
  %5385 = xor i64 %5384, -45222030210249805
  %5386 = or i64 %868, 2718686040803546811
  %5387 = and i64 2718686040803546811, %868
  %5388 = xor i64 2718686040803546811, %868
  %5389 = or i64 %5387, %5388
  %5390 = or i64 %829, -2631680019929994791
  %5391 = and i64 -2631680019929994791, %829
  %5392 = xor i64 -2631680019929994791, %829
  %5393 = or i64 %5391, %5392
  %5394 = or i64 %347, -3655718614051444547
  %5395 = and i64 -3655718614051444547, %347
  %5396 = xor i64 -3655718614051444547, %347
  %5397 = or i64 %5395, %5396
  %5398 = xor i64 %5389, %5397
  %5399 = xor i64 %5398, 0
  %5400 = xor i64 %5399, %5390
  %5401 = xor i64 %5400, %5393
  %5402 = xor i64 %5401, %5394
  %5403 = xor i64 %5402, %5386
  %5404 = mul i64 %5385, %5403
  %5405 = add i64 %1653, -7835657618530933907
  %5406 = sub i64 0, %1653
  %5407 = add i64 7835657618530933907, %5406
  %5408 = sub i64 0, %5407
  %5409 = add i64 %11, 8547965671799571153
  %5410 = add i64 -3115947631290480602, %11
  %5411 = add i64 %5410, -6782830770619499861
  %5412 = add i64 %1525, -140815504733094614
  %5413 = sub i64 0, %1525
  %5414 = sub i64 -140815504733094614, %5413
  %5415 = xor i64 %5405, -5402921656783304985
  %5416 = xor i64 %5415, %5412
  %5417 = xor i64 %5416, %5414
  %5418 = xor i64 %5417, %5411
  %5419 = xor i64 %5418, %5408
  %5420 = xor i64 %5419, %5409
  %5421 = or i64 %772, 4584715594004692251
  %5422 = and i64 4584715594004692251, %772
  %5423 = xor i64 4584715594004692251, %772
  %5424 = or i64 %5422, %5423
  %5425 = and i64 %1655, 5997982198095807770
  %5426 = or i64 -5997982198095807771, %1655
  %5427 = sub i64 %5426, -5997982198095807771
  %5428 = xor i64 %5427, %5424
  %5429 = xor i64 %5428, 0
  %5430 = xor i64 %5429, %5425
  %5431 = xor i64 %5430, %5421
  %5432 = mul i64 %5420, %5431
  %5433 = trunc i64 %5432 to i1
  %5434 = and i64 %990, -2320084989502219812
  %5435 = xor i64 %990, -1
  %5436 = xor i64 -2320084989502219812, %5435
  %5437 = and i64 %5436, -2320084989502219812
  %5438 = and i64 %1509, 7769326250678367012
  %5439 = or i64 -7769326250678367013, %1509
  %5440 = sub i64 %5439, -7769326250678367013
  %5441 = or i64 %868, -770329890311258422
  %5442 = xor i64 %868, -1
  %5443 = and i64 -770329890311258422, %5442
  %5444 = add i64 %5443, %868
  %5445 = xor i64 %5437, 8464140740130051171
  %5446 = xor i64 %5445, %5438
  %5447 = xor i64 %5446, %5444
  %5448 = xor i64 %5447, %5434
  %5449 = xor i64 %5448, %5440
  %5450 = xor i64 %5449, %5441
  %5451 = or i64 %97, 1378263544181952534
  %5452 = xor i64 %97, -1
  %5453 = and i64 %5452, -3679654360450673067
  %5454 = and i64 %97, 3679654360450673066
  %5455 = or i64 %5453, %5454
  %5456 = xor i64 -2319443148636895677, %5455
  %5457 = xor i64 %97, -1
  %5458 = or i64 -1378263544181952535, %5457
  %5459 = xor i64 %5458, -1
  %5460 = and i64 %5459, -1
  %5461 = or i64 %5456, %5460
  %5462 = and i64 %53, -2138902903986500864
  %5463 = xor i64 %53, -1
  %5464 = or i64 2138902903986500863, %5463
  %5465 = xor i64 %5464, -1
  %5466 = and i64 %5465, -1
  %5467 = and i64 %1588, -3907657757728786506
  %5468 = xor i64 %1588, -1
  %5469 = or i64 3907657757728786505, %5468
  %5470 = xor i64 %5469, -1
  %5471 = and i64 %5470, -1
  %5472 = xor i64 0, %5451
  %5473 = xor i64 %5472, %5462
  %5474 = xor i64 %5473, %5466
  %5475 = xor i64 %5474, %5467
  %5476 = xor i64 %5475, %5461
  %5477 = xor i64 %5476, %5471
  %5478 = mul i64 %5450, %5477
  %5479 = trunc i64 %5478 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %5251, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %5283, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %5320, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %5361, i64 %5404, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %5433, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %5479, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5480 = load i64, i64* %5251, align 8
  %5481 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable12852019627141998670, i32 0, i64 %5480
  store i8* bitcast (i1 (i1, i1)* @inner_loop..split.extracted to i8*), i8** %5481, align 8
  %.reload207 = load i8**, i8*** %.reg2mem206, align 8
  %5482 = load i8*, i8** %.reload207, align 8
  indirectbr i8* %5482, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.split:                                           ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5483 = call double @llvm.sin.f64(double %15)
  %5484 = fptrunc double %5483 to float
  %5485 = load float, float* %16, align 4, !tbaa !10
  %5486 = fpext float %5485 to double
  %5487 = call double @llvm.sin.f64(double %5486)
  %5488 = fptrunc double %5487 to float
  %5489 = call double @llvm.cos.f64(double %5486)
  %5490 = fptrunc double %5489 to float
  %5491 = fmul float %17, %5484
  %5492 = fmul float %5491, %5488
  %5493 = fmul float %18, %5490
  %5494 = fadd float %5492, %5493
  %5495 = fadd float %5494, 5.000000e+00
  %5496 = fdiv float 1.000000e+00, %5495
  store float %5496, float* %21, align 4
  %5497 = call double @llvm.cos.f64(double %15)
  %5498 = fptrunc double %5497 to float
  %5499 = load float, float* %19, align 4, !tbaa !10
  %5500 = fpext float %5499 to double
  %5501 = call double @llvm.cos.f64(double %5500)
  %5502 = fptrunc double %5501 to float
  %5503 = call double @llvm.sin.f64(double %5500)
  %5504 = fptrunc double %5503 to float
  %5505 = fmul float %5491, %5490
  %5506 = fmul float %18, %5488
  %5507 = fsub float %5505, %5506
  %5508 = fmul float %5496, 3.000000e+01
  %5509 = fmul float %17, %5498
  %5510 = fmul float %5509, %5502
  %5511 = fmul float %5507, %5504
  %5512 = fsub float %5510, %5511
  %5513 = fmul float %5512, %5508
  %5514 = fadd float %5513, 4.000000e+01
  %5515 = fptosi float %5514 to i32
  store i32 %5515, i32* %22, align 4
  %5516 = fmul float %5496, 1.500000e+01
  %5517 = fmul float %5509, %5504
  %5518 = fmul float %5507, %5502
  %5519 = fadd float %5517, %5518
  %5520 = fmul float %5519, %5516
  %5521 = fadd float %5520, 1.200000e+01
  %5522 = fptosi float %5521 to i32
  store i32 %5522, i32* %23, align 4
  %5523 = fmul float %20, %5484
  %5524 = fmul float %5523, %5490
  %5525 = fsub float %5506, %5524
  %5526 = fmul float %5525, %5502
  %5527 = fmul float %5523, %5488
  %5528 = fsub float %5526, %5527
  %5529 = fsub float %5528, %5493
  %5530 = fmul float %20, %5498
  %5531 = fmul float %5530, %5504
  %5532 = fsub float %5529, %5531
  %5533 = fmul float %5532, 8.000000e+00
  %5534 = fptosi float %5533 to i32
  store i32 %5534, i32* %24, align 4
  %5535 = sub i32 0, %5522
  %5536 = add i32 %5535, 1
  %5537 = sub i32 0, %5536
  store i32 %5537, i32* %25, align 4
  %5538 = icmp ult i32 %5537, 21
  %5539 = icmp sgt i32 %5515, 0
  %5540 = select i1 %5538, i1 %5539, i1 false
  store i1 %5540, i1* %.reg2mem672, align 1
  %5541 = icmp slt i32 %5515, 80
  store i1 %5541, i1* %.reg2mem674, align 1
  %.reload210 = load i8**, i8*** %.reg2mem209, align 8
  %5542 = load i8*, i8** %.reload210, align 8
  indirectbr i8* %5542, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl:                                         ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload671 = load i64*, i64** %.reg2mem669, align 8
  store i64 1996855465712537074, i64* %.reload671, align 8
  %5543 = alloca i8**, align 8
  %.reload670 = load i64*, i64** %.reg2mem669, align 8
  %5544 = or i64 %220, -2891315762163370984
  %5545 = xor i64 %220, -1
  %5546 = and i64 %5545, 1083977053177002534
  %5547 = and i64 %220, -1083977053177002535
  %5548 = or i64 %5546, %5547
  %5549 = xor i64 -2822361957065454018, %5548
  %5550 = xor i64 %220, -1
  %5551 = or i64 2891315762163370983, %5550
  %5552 = xor i64 %5551, -1
  %5553 = and i64 %5552, -1
  %5554 = or i64 %5549, %5553
  %5555 = add i64 %788, -7956573542050583703
  %5556 = sub i64 0, %788
  %5557 = add i64 7956573542050583703, %5556
  %5558 = sub i64 0, %5557
  %5559 = or i64 %555, 6761791451072222440
  %5560 = xor i64 %555, -1
  %5561 = and i64 6761791451072222440, %5560
  %5562 = add i64 %5561, %555
  %5563 = xor i64 %5555, %5558
  %5564 = xor i64 %5563, %5562
  %5565 = xor i64 %5564, %5554
  %5566 = xor i64 %5565, 2874516308171214579
  %5567 = xor i64 %5566, %5544
  %5568 = xor i64 %5567, %5559
  %5569 = add i64 %1228, -7537497538788207896
  %5570 = sub i64 0, %1228
  %5571 = add i64 7537497538788207896, %5570
  %5572 = sub i64 0, %5571
  %5573 = or i64 %666, -649736053585500384
  %5574 = xor i64 %666, -1
  %5575 = and i64 -649736053585500384, %5574
  %5576 = add i64 %5575, %666
  %5577 = xor i64 0, %5572
  %5578 = xor i64 %5577, %5573
  %5579 = xor i64 %5578, %5569
  %5580 = xor i64 %5579, %5576
  %5581 = mul i64 %5568, %5580
  %5582 = trunc i64 %5581 to i32
  %5583 = or i64 %912, -46083486940039631
  %5584 = and i64 -46083486940039631, %912
  %5585 = xor i64 -46083486940039631, %912
  %5586 = or i64 %5584, %5585
  %5587 = and i64 %1292, 4739104380507337627
  %5588 = or i64 -4739104380507337628, %1292
  %5589 = sub i64 %5588, -4739104380507337628
  %5590 = xor i64 712995536676835487, %5583
  %5591 = xor i64 %5590, %5589
  %5592 = xor i64 %5591, %5587
  %5593 = xor i64 %5592, %5586
  %5594 = add i64 %543, 6264400062428524672
  %5595 = xor i64 6264400062428524672, %543
  %5596 = and i64 6264400062428524672, %543
  %5597 = mul i64 2, %5596
  %5598 = add i64 %5595, %5597
  %5599 = or i64 %1038, 2574712629797898362
  %5600 = xor i64 %1038, -1
  %5601 = and i64 2574712629797898362, %5600
  %5602 = add i64 %5601, %1038
  %5603 = xor i64 %5602, %5594
  %5604 = xor i64 %5603, %5598
  %5605 = xor i64 %5604, 0
  %5606 = xor i64 %5605, %5599
  %5607 = mul i64 %5593, %5606
  %5608 = add i64 %656, -3238544487384579842
  %5609 = sub i64 0, %656
  %5610 = add i64 3238544487384579842, %5609
  %5611 = sub i64 0, %5610
  %5612 = add i64 %1647, -2957641249551786521
  %5613 = and i64 -2957641249551786521, %1647
  %5614 = or i64 -2957641249551786521, %1647
  %5615 = add i64 %5613, %5614
  %5616 = xor i64 1263232205876771681, %5608
  %5617 = xor i64 %5616, %5611
  %5618 = xor i64 %5617, %5615
  %5619 = xor i64 %5618, %5612
  %5620 = sext i32 %59 to i64
  %5621 = and i64 %5620, 5237358842659006293
  %5622 = xor i64 %5620, -1
  %5623 = xor i64 5237358842659006293, %5622
  %5624 = and i64 %5623, 5237358842659006293
  %5625 = or i64 %1527, -9018730980966932794
  %5626 = xor i64 %1527, -1
  %5627 = and i64 -9018730980966932794, %5626
  %5628 = add i64 %5627, %1527
  %5629 = xor i64 %5628, %5621
  %5630 = xor i64 %5629, %5625
  %5631 = xor i64 %5630, 0
  %5632 = xor i64 %5631, %5624
  %5633 = mul i64 %5619, %5632
  %5634 = or i64 %1645, -2733292511185710271
  %5635 = and i64 -2733292511185710271, %1645
  %5636 = xor i64 -2733292511185710271, %1645
  %5637 = or i64 %5635, %5636
  %5638 = add i64 %660, -6860165386636225291
  %5639 = sub i64 0, %660
  %5640 = add i64 6860165386636225291, %5639
  %5641 = sub i64 0, %5640
  %5642 = xor i64 %5637, %5641
  %5643 = xor i64 %5642, %5634
  %5644 = xor i64 %5643, -4085235010984072585
  %5645 = xor i64 %5644, %5638
  %5646 = add i64 %1497, 7766828039880728920
  %5647 = add i64 -3115351929642844259, %1497
  %5648 = sub i64 %5647, 7564564104185978437
  %5649 = or i64 %1290, 3019062527520677341
  %5650 = xor i64 %1290, -1
  %5651 = and i64 %5650, -5915170378038702150
  %5652 = and i64 %1290, 5915170378038702149
  %5653 = or i64 %5651, %5652
  %5654 = xor i64 -8931541043379760537, %5653
  %5655 = xor i64 %1290, -1
  %5656 = or i64 -3019062527520677342, %5655
  %5657 = xor i64 %5656, -1
  %5658 = and i64 %5657, -1
  %5659 = or i64 %5654, %5658
  %5660 = xor i64 %5648, %5649
  %5661 = xor i64 %5660, %5659
  %5662 = xor i64 %5661, %5646
  %5663 = xor i64 %5662, 0
  %5664 = mul i64 %5645, %5663
  %5665 = trunc i64 %5664 to i1
  call void @"9941920946239825184"(i32 0, i64* %.reload670, i8*** %5543, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %5582, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %5607, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %5633, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %5665, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5666 = load i8**, i8*** %5543, align 8
  %5667 = load i8*, i8** %5666, align 8
  %5668 = bitcast i8* %5667 to i1 (i1, i1)*
  %.reload673 = load i1, i1* %.reg2mem672, align 1
  %.reload675 = load i1, i1* %.reg2mem674, align 1
  %targetBlock = call i1 %5668(i1 %.reload673, i1 %.reload675)
  %.reload213 = load i8**, i8*** %.reg2mem212, align 8
  %.reload216 = load i8**, i8*** %.reg2mem215, align 8
  %5669 = select i1 %targetBlock, i8** %.reload213, i8** %.reload216
  %5670 = load i8*, i8** %5669, align 8
  indirectbr i8* %5670, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %26, align 1
  ret void

.exitStub5:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5671 = or i64 %286, -6478604213609306157
  %5672 = xor i64 %286, -1
  %5673 = and i64 %5672, -7216067491447012797
  %5674 = and i64 %286, 7216067491447012796
  %5675 = or i64 %5673, %5674
  %5676 = xor i64 4453003485192480144, %5675
  %5677 = xor i64 %286, -1
  %5678 = or i64 6478604213609306156, %5677
  %5679 = xor i64 %5678, -1
  %5680 = and i64 %5679, -1
  %5681 = or i64 %5676, %5680
  %5682 = and i64 %786, -8878234587988435725
  %5683 = xor i64 %786, -1
  %5684 = xor i64 -8878234587988435725, %5683
  %5685 = and i64 %5684, -8878234587988435725
  %5686 = xor i64 %5681, %5682
  %5687 = xor i64 %5686, %5685
  %5688 = xor i64 %5687, %5671
  %5689 = xor i64 %5688, -1488732995925924767
  %5690 = or i64 %866, -8162727174802224909
  %5691 = and i64 -8162727174802224909, %866
  %5692 = xor i64 -8162727174802224909, %866
  %5693 = or i64 %5691, %5692
  %5694 = and i64 %95, -1600442536027624808
  %5695 = or i64 1600442536027624807, %95
  %5696 = sub i64 %5695, 1600442536027624807
  %5697 = xor i64 %5690, %5693
  %5698 = xor i64 %5697, %5694
  %5699 = xor i64 %5698, %5696
  %5700 = xor i64 %5699, 0
  %5701 = mul i64 %5689, %5700
  %5702 = trunc i64 %5701 to i1
  store i1 %5702, i1* %26, align 1
  ret void

"46":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5703 = load i64, i64* %27, align 8
  %5704 = alloca i64, align 8
  %5705 = and i64 %607, 8272259540555783723
  %5706 = xor i64 %607, -1
  %5707 = or i64 -8272259540555783724, %5706
  %5708 = xor i64 %5707, -1
  %5709 = and i64 %5708, -1
  %5710 = and i64 %1588, -1966556114861749168
  %5711 = xor i64 %1588, -1
  %5712 = xor i64 -1966556114861749168, %5711
  %5713 = and i64 %5712, -1966556114861749168
  %5714 = xor i64 %5710, %5713
  %5715 = xor i64 %5714, 8731793271659632695
  %5716 = xor i64 %5715, %5709
  %5717 = xor i64 %5716, %5705
  %5718 = or i64 %452, -204981723743239247
  %5719 = xor i64 %452, -1
  %5720 = and i64 -204981723743239247, %5719
  %5721 = add i64 %5720, %452
  %5722 = add i64 %1143, -2059994356709554955
  %5723 = xor i64 -2059994356709554955, %1143
  %5724 = and i64 -2059994356709554955, %1143
  %5725 = mul i64 2, %5724
  %5726 = add i64 %5723, %5725
  %5727 = sext i32 %60 to i64
  %5728 = or i64 %5727, 3365947287774381249
  %5729 = xor i64 %5727, -1
  %5730 = and i64 3365947287774381249, %5729
  %5731 = add i64 %5730, %5727
  %5732 = xor i64 %5721, %5722
  %5733 = xor i64 %5732, %5726
  %5734 = xor i64 %5733, %5728
  %5735 = xor i64 %5734, 0
  %5736 = xor i64 %5735, %5718
  %5737 = xor i64 %5736, %5731
  %5738 = mul i64 %5717, %5737
  %5739 = trunc i64 %5738 to i32
  %5740 = or i64 %1396, -3282749059375942454
  %5741 = xor i64 %1396, -1
  %5742 = and i64 -3282749059375942454, %5741
  %5743 = add i64 %5742, %1396
  %5744 = or i64 %389, -4948914299854296267
  %5745 = xor i64 %389, -1
  %5746 = and i64 -4948914299854296267, %5745
  %5747 = add i64 %5746, %389
  %5748 = or i64 %1398, -459598363992298053
  %5749 = xor i64 %1398, -1
  %5750 = and i64 %5749, -2934203629955863468
  %5751 = and i64 %1398, 2934203629955863467
  %5752 = or i64 %5750, %5751
  %5753 = xor i64 3375642401920172527, %5752
  %5754 = xor i64 %1398, -1
  %5755 = or i64 459598363992298052, %5754
  %5756 = xor i64 %5755, -1
  %5757 = and i64 %5756, -1
  %5758 = or i64 %5753, %5757
  %5759 = xor i64 %5740, %5744
  %5760 = xor i64 %5759, %5758
  %5761 = xor i64 %5760, %5743
  %5762 = xor i64 %5761, %5747
  %5763 = xor i64 %5762, %5748
  %5764 = xor i64 %5763, -4663160596370690647
  %5765 = or i64 %1531, 5826864895388120803
  %5766 = xor i64 %1531, -1
  %5767 = and i64 %5766, -262444514170564642
  %5768 = and i64 %1531, 262444514170564641
  %5769 = or i64 %5767, %5768
  %5770 = xor i64 -6014923599640495811, %5769
  %5771 = xor i64 %1531, -1
  %5772 = or i64 -5826864895388120804, %5771
  %5773 = xor i64 %5772, -1
  %5774 = and i64 %5773, -1
  %5775 = or i64 %5770, %5774
  %5776 = add i64 %1651, 152905238960839163
  %5777 = sub i64 0, %1651
  %5778 = sub i64 152905238960839163, %5777
  %5779 = and i64 %1290, 5715096557580784423
  %5780 = xor i64 %1290, -1
  %5781 = or i64 -5715096557580784424, %5780
  %5782 = xor i64 %5781, -1
  %5783 = and i64 %5782, -1
  %5784 = xor i64 %5778, %5779
  %5785 = xor i64 %5784, %5765
  %5786 = xor i64 %5785, 0
  %5787 = xor i64 %5786, %5776
  %5788 = xor i64 %5787, %5783
  %5789 = xor i64 %5788, %5775
  %5790 = mul i64 %5764, %5789
  %5791 = and i64 %1655, 8907896663442653262
  %5792 = xor i64 %1655, -1
  %5793 = or i64 -8907896663442653263, %5792
  %5794 = xor i64 %5793, -1
  %5795 = and i64 %5794, -1
  %5796 = and i64 %908, -4969072422079107028
  %5797 = xor i64 %908, -1
  %5798 = or i64 4969072422079107027, %5797
  %5799 = xor i64 %5798, -1
  %5800 = and i64 %5799, -1
  %5801 = xor i64 %5796, -3053308063055821515
  %5802 = xor i64 %5801, %5800
  %5803 = xor i64 %5802, %5791
  %5804 = xor i64 %5803, %5795
  %5805 = or i64 %924, 3230849071384878154
  %5806 = xor i64 %924, -1
  %5807 = and i64 3230849071384878154, %5806
  %5808 = add i64 %5807, %924
  %5809 = or i64 %224, 8439297967165702086
  %5810 = xor i64 %224, -1
  %5811 = and i64 8439297967165702086, %5810
  %5812 = add i64 %5811, %224
  %5813 = and i64 %908, 1321616077238387377
  %5814 = or i64 -1321616077238387378, %908
  %5815 = sub i64 %5814, -1321616077238387378
  %5816 = xor i64 %5812, %5805
  %5817 = xor i64 %5816, %5813
  %5818 = xor i64 %5817, %5808
  %5819 = xor i64 %5818, %5809
  %5820 = xor i64 %5819, 0
  %5821 = xor i64 %5820, %5815
  %5822 = mul i64 %5804, %5821
  %5823 = trunc i64 %5822 to i32
  %5824 = add i64 %1129, -6923242023125876674
  %5825 = xor i64 -6923242023125876674, %1129
  %5826 = and i64 -6923242023125876674, %1129
  %5827 = mul i64 2, %5826
  %5828 = add i64 %5825, %5827
  %5829 = add i64 %222, 5440437939867063066
  %5830 = xor i64 5440437939867063066, %222
  %5831 = and i64 5440437939867063066, %222
  %5832 = mul i64 2, %5831
  %5833 = add i64 %5830, %5832
  %5834 = and i64 %175, 6677504840136832973
  %5835 = or i64 -6677504840136832974, %175
  %5836 = sub i64 %5835, -6677504840136832974
  %5837 = xor i64 %5833, %5834
  %5838 = xor i64 %5837, 659198991999571685
  %5839 = xor i64 %5838, %5836
  %5840 = xor i64 %5839, %5828
  %5841 = xor i64 %5840, %5829
  %5842 = xor i64 %5841, %5824
  %5843 = or i64 %561, -497654095071306525
  %5844 = xor i64 %561, -1
  %5845 = and i64 %5844, 4703882250600720604
  %5846 = and i64 %561, -4703882250600720605
  %5847 = or i64 %5845, %5846
  %5848 = xor i64 -5165503700225772481, %5847
  %5849 = xor i64 %561, -1
  %5850 = or i64 497654095071306524, %5849
  %5851 = xor i64 %5850, -1
  %5852 = and i64 %5851, -1
  %5853 = or i64 %5848, %5852
  %5854 = and i64 %549, -2970740105927090369
  %5855 = xor i64 %549, -1
  %5856 = or i64 2970740105927090368, %5855
  %5857 = xor i64 %5856, -1
  %5858 = and i64 %5857, -1
  %5859 = xor i64 %5853, 0
  %5860 = xor i64 %5859, %5843
  %5861 = xor i64 %5860, %5854
  %5862 = xor i64 %5861, %5858
  %5863 = mul i64 %5842, %5862
  %5864 = sext i32 %49 to i64
  %5865 = or i64 %5864, 2407469904122829406
  %5866 = and i64 2407469904122829406, %5864
  %5867 = xor i64 2407469904122829406, %5864
  %5868 = or i64 %5866, %5867
  %5869 = and i64 %776, -1309675128985282414
  %5870 = or i64 1309675128985282413, %776
  %5871 = sub i64 %5870, 1309675128985282413
  %5872 = xor i64 %5869, 3902100428343612915
  %5873 = xor i64 %5872, %5865
  %5874 = xor i64 %5873, %5871
  %5875 = xor i64 %5874, %5868
  %5876 = add i64 %1232, -4592870430357986510
  %5877 = and i64 -4592870430357986510, %1232
  %5878 = or i64 -4592870430357986510, %1232
  %5879 = add i64 %5877, %5878
  %5880 = add i64 %607, 2225208270526202661
  %5881 = and i64 2225208270526202661, %607
  %5882 = or i64 2225208270526202661, %607
  %5883 = add i64 %5881, %5882
  %5884 = xor i64 %5876, %5880
  %5885 = xor i64 %5884, 0
  %5886 = xor i64 %5885, %5879
  %5887 = xor i64 %5886, %5883
  %5888 = mul i64 %5875, %5887
  %5889 = and i64 %220, 128823768540886244
  %5890 = or i64 -128823768540886245, %220
  %5891 = sub i64 %5890, -128823768540886245
  %5892 = add i64 %996, 5431544584142067171
  %5893 = add i64 -7473966064334168024, %996
  %5894 = sub i64 %5893, 5541233425233316421
  %5895 = add i64 %1535, 2925643596755504890
  %5896 = xor i64 2925643596755504890, %1535
  %5897 = and i64 2925643596755504890, %1535
  %5898 = mul i64 2, %5897
  %5899 = add i64 %5896, %5898
  %5900 = xor i64 %5892, 1068141395156708403
  %5901 = xor i64 %5900, %5899
  %5902 = xor i64 %5901, %5894
  %5903 = xor i64 %5902, %5889
  %5904 = xor i64 %5903, %5891
  %5905 = xor i64 %5904, %5895
  %5906 = add i64 %286, -2643266709332526764
  %5907 = add i64 8408020592310070918, %286
  %5908 = add i64 %5907, 7395456772066953934
  %5909 = and i64 %547, 386339405475133215
  %5910 = xor i64 %547, -1
  %5911 = or i64 -386339405475133216, %5910
  %5912 = xor i64 %5911, -1
  %5913 = and i64 %5912, -1
  %5914 = xor i64 0, %5906
  %5915 = xor i64 %5914, %5908
  %5916 = xor i64 %5915, %5909
  %5917 = xor i64 %5916, %5913
  %5918 = mul i64 %5905, %5917
  %5919 = trunc i64 %5918 to i1
  %5920 = and i64 %1655, -5233735935241148316
  %5921 = or i64 5233735935241148315, %1655
  %5922 = sub i64 %5921, 5233735935241148315
  %5923 = and i64 %391, 2459707781084924758
  %5924 = or i64 -2459707781084924759, %391
  %5925 = sub i64 %5924, -2459707781084924759
  %5926 = and i64 %553, 7247183978058978211
  %5927 = xor i64 %553, -1
  %5928 = or i64 -7247183978058978212, %5927
  %5929 = xor i64 %5928, -1
  %5930 = and i64 %5929, -1
  %5931 = xor i64 %5923, %5926
  %5932 = xor i64 %5931, 5996564022398573295
  %5933 = xor i64 %5932, %5925
  %5934 = xor i64 %5933, %5920
  %5935 = xor i64 %5934, %5930
  %5936 = xor i64 %5935, %5922
  %5937 = or i64 %918, -7339673113397324823
  %5938 = xor i64 %918, -1
  %5939 = and i64 -7339673113397324823, %5938
  %5940 = add i64 %5939, %918
  %5941 = or i64 %343, -7640288975114982457
  %5942 = xor i64 %343, -1
  %5943 = and i64 -7640288975114982457, %5942
  %5944 = add i64 %5943, %343
  %5945 = add i64 %727, -6660124884397026252
  %5946 = sub i64 0, %727
  %5947 = add i64 6660124884397026252, %5946
  %5948 = sub i64 0, %5947
  %5949 = xor i64 %5941, %5948
  %5950 = xor i64 %5949, %5945
  %5951 = xor i64 %5950, %5937
  %5952 = xor i64 %5951, %5940
  %5953 = xor i64 %5952, 0
  %5954 = xor i64 %5953, %5944
  %5955 = mul i64 %5936, %5954
  %5956 = trunc i64 %5955 to i1
  %5957 = and i64 %1232, -2015738462467737954
  %5958 = xor i64 %1232, -1
  %5959 = or i64 2015738462467737953, %5958
  %5960 = xor i64 %5959, -1
  %5961 = and i64 %5960, -1
  %5962 = or i64 %1286, -5370121314738651474
  %5963 = xor i64 %1286, -1
  %5964 = and i64 -5370121314738651474, %5963
  %5965 = add i64 %5964, %1286
  %5966 = xor i64 %5957, %5962
  %5967 = xor i64 %5966, 7335647760813824159
  %5968 = xor i64 %5967, %5961
  %5969 = xor i64 %5968, %5965
  %5970 = and i64 %1653, 5756302964219475627
  %5971 = xor i64 %1653, -1
  %5972 = or i64 -5756302964219475628, %5971
  %5973 = xor i64 %5972, -1
  %5974 = and i64 %5973, -1
  %5975 = add i64 %547, -717919605974467559
  %5976 = sub i64 0, %547
  %5977 = add i64 717919605974467559, %5976
  %5978 = sub i64 0, %5977
  %5979 = xor i64 %5978, %5974
  %5980 = xor i64 %5979, 0
  %5981 = xor i64 %5980, %5975
  %5982 = xor i64 %5981, %5970
  %5983 = mul i64 %5969, %5982
  %5984 = trunc i64 %5983 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %5703, i64* %5704, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %5739, i32 0, i1* null, i1* null, i64 %5790, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %5823, i1* null, i1* null, i8* null, i64 0, i64 %5863, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %5888, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %5919, i1 false, i1 %5956, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 %5984, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %5985 = load i64, i64* %5704, align 8
  %5986 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13584920069806577051, i32 0, i64 %5985
  store i8** %5986, i8*** %28, align 8
  ret void

newFuncRoot1:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload225 = load i8**, i8*** %.reg2mem224, align 8
  %5987 = load i8*, i8** %.reload225, align 8
  indirectbr i8* %5987, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"48":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %5988 = xor i1 %29, false
  %5989 = and i1 %5988, %29
  %5990 = and i1 %30, false
  %5991 = or i1 %5989, %5990
  store i1 %5991, i1* %31, align 1
  %5992 = xor i1 %32, true
  store i1 %5992, i1* %33, align 1
  %5993 = or i1 %5991, %5992
  store i1 %5993, i1* %34, align 1
  %5994 = and i64 %662, -5365583055803656922
  %5995 = xor i64 %662, -1
  %5996 = xor i64 -5365583055803656922, %5995
  %5997 = and i64 %5996, -5365583055803656922
  %5998 = or i64 %71, -1536578381697357875
  %5999 = and i64 -1536578381697357875, %71
  %6000 = xor i64 -1536578381697357875, %71
  %6001 = or i64 %5999, %6000
  %6002 = and i64 %918, 7066067020197345157
  %6003 = xor i64 %918, -1
  %6004 = xor i64 7066067020197345157, %6003
  %6005 = and i64 %6004, 7066067020197345157
  %6006 = xor i64 1372172214175589111, %5998
  %6007 = xor i64 %6006, %6002
  %6008 = xor i64 %6007, %5994
  %6009 = xor i64 %6008, %5997
  %6010 = xor i64 %6009, %6001
  %6011 = xor i64 %6010, %6005
  %6012 = add i64 %450, 4547510778170927283
  %6013 = xor i64 4547510778170927283, %450
  %6014 = and i64 4547510778170927283, %450
  %6015 = mul i64 2, %6014
  %6016 = add i64 %6013, %6015
  %6017 = or i64 %446, 5845896775776319449
  %6018 = and i64 5845896775776319449, %446
  %6019 = xor i64 5845896775776319449, %446
  %6020 = or i64 %6018, %6019
  %6021 = xor i64 %6016, %6017
  %6022 = xor i64 %6021, %6012
  %6023 = xor i64 %6022, 791343608092327623
  %6024 = xor i64 %6023, %6020
  %6025 = mul i64 %6011, %6024
  %6026 = trunc i64 %6025 to i1
  %6027 = xor i1 %5993, %6026
  store i1 %6027, i1* %35, align 1
  %6028 = and i1 %6027, true
  store i1 %6028, i1* %36, align 1
  %.reload228 = load i8**, i8*** %.reg2mem227, align 8
  %.reload231 = load i8**, i8*** %.reg2mem230, align 8
  %6029 = select i1 %37, i8** %.reload228, i8** %.reload231
  %6030 = load i8*, i8** %6029, align 8
  indirectbr i8* %6030, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub:                               ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %38, align 1
  ret void

.loopexit.exitStub.exitStub:                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %38, align 1
  ret void

"51":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %6031 = load i64, i64* %39, align 8
  %6032 = alloca i64, align 8
  %6033 = or i64 %1294, -2083840042101481251
  %6034 = and i64 -2083840042101481251, %1294
  %6035 = xor i64 -2083840042101481251, %1294
  %6036 = or i64 %6034, %6035
  %6037 = or i64 %605, 7297419378240282521
  %6038 = and i64 7297419378240282521, %605
  %6039 = xor i64 7297419378240282521, %605
  %6040 = or i64 %6038, %6039
  %6041 = add i64 %1286, 2595648018177803023
  %6042 = add i64 -6492294798689796576, %1286
  %6043 = sub i64 %6042, -9087942816867599599
  %6044 = xor i64 %6043, %6036
  %6045 = xor i64 %6044, -4559181801198167835
  %6046 = xor i64 %6045, %6033
  %6047 = xor i64 %6046, %6037
  %6048 = xor i64 %6047, %6041
  %6049 = xor i64 %6048, %6040
  %6050 = add i64 %559, 3089224111395129508
  %6051 = xor i64 3089224111395129508, %559
  %6052 = and i64 3089224111395129508, %559
  %6053 = mul i64 2, %6052
  %6054 = add i64 %6051, %6053
  %6055 = add i64 %1491, 4927763849349436279
  %6056 = sub i64 0, %1491
  %6057 = sub i64 4927763849349436279, %6056
  %6058 = xor i64 %6050, %6054
  %6059 = xor i64 %6058, 0
  %6060 = xor i64 %6059, %6055
  %6061 = xor i64 %6060, %6057
  %6062 = mul i64 %6049, %6061
  %6063 = trunc i64 %6062 to i1
  %6064 = and i64 %664, 3077460974718926865
  %6065 = xor i64 %664, -1
  %6066 = or i64 -3077460974718926866, %6065
  %6067 = xor i64 %6066, -1
  %6068 = and i64 %6067, -1
  %6069 = add i64 %794, -1530152942020942244
  %6070 = xor i64 -1530152942020942244, %794
  %6071 = and i64 -1530152942020942244, %794
  %6072 = mul i64 2, %6071
  %6073 = add i64 %6070, %6072
  %6074 = add i64 %676, -2265085889671625149
  %6075 = add i64 6570258581007045560, %676
  %6076 = sub i64 %6075, 8835344470678670709
  %6077 = xor i64 %6076, %6068
  %6078 = xor i64 %6077, 2969485569892911219
  %6079 = xor i64 %6078, %6069
  %6080 = xor i64 %6079, %6064
  %6081 = xor i64 %6080, %6074
  %6082 = xor i64 %6081, %6073
  %6083 = and i64 %101, 6022893131376855152
  %6084 = xor i64 %101, -1
  %6085 = or i64 -6022893131376855153, %6084
  %6086 = xor i64 %6085, -1
  %6087 = and i64 %6086, -1
  %6088 = or i64 %780, -6572189699567875614
  %6089 = and i64 -6572189699567875614, %780
  %6090 = xor i64 -6572189699567875614, %780
  %6091 = or i64 %6089, %6090
  %6092 = and i64 %1495, 5223781624866197072
  %6093 = xor i64 %1495, -1
  %6094 = or i64 -5223781624866197073, %6093
  %6095 = xor i64 %6094, -1
  %6096 = and i64 %6095, -1
  %6097 = xor i64 %6092, 0
  %6098 = xor i64 %6097, %6091
  %6099 = xor i64 %6098, %6096
  %6100 = xor i64 %6099, %6087
  %6101 = xor i64 %6100, %6088
  %6102 = xor i64 %6101, %6083
  %6103 = mul i64 %6082, %6102
  %6104 = trunc i64 %6103 to i1
  %6105 = or i64 %868, -5239896541003417934
  %6106 = xor i64 %868, -1
  %6107 = and i64 -5239896541003417934, %6106
  %6108 = add i64 %6107, %868
  %6109 = or i64 %916, -2461878927703950336
  %6110 = and i64 -2461878927703950336, %916
  %6111 = xor i64 -2461878927703950336, %916
  %6112 = or i64 %6110, %6111
  %6113 = and i64 %1533, 4558432253023060784
  %6114 = xor i64 %1533, -1
  %6115 = xor i64 4558432253023060784, %6114
  %6116 = and i64 %6115, 4558432253023060784
  %6117 = xor i64 %6109, %6113
  %6118 = xor i64 %6117, %6112
  %6119 = xor i64 %6118, %6108
  %6120 = xor i64 %6119, %6105
  %6121 = xor i64 %6120, 6805212961685808415
  %6122 = xor i64 %6121, %6116
  %6123 = add i64 %1539, 8684568830075794357
  %6124 = sub i64 0, %1539
  %6125 = add i64 -8684568830075794357, %6124
  %6126 = sub i64 0, %6125
  %6127 = or i64 %768, 7674665080261480943
  %6128 = xor i64 %768, -1
  %6129 = and i64 %6128, 6615194502321857206
  %6130 = and i64 %768, -6615194502321857207
  %6131 = or i64 %6129, %6130
  %6132 = xor i64 3552222330691679065, %6131
  %6133 = xor i64 %768, -1
  %6134 = or i64 -7674665080261480944, %6133
  %6135 = xor i64 %6134, -1
  %6136 = and i64 %6135, -1
  %6137 = or i64 %6132, %6136
  %6138 = xor i64 %6123, %6127
  %6139 = xor i64 %6138, %6126
  %6140 = xor i64 %6139, 0
  %6141 = xor i64 %6140, %6137
  %6142 = mul i64 %6122, %6141
  %6143 = trunc i64 %6142 to i1
  %6144 = add i64 %1507, -4959705082875272933
  %6145 = add i64 6674487207600903980, %1507
  %6146 = add i64 %6145, 6812551783233374703
  %6147 = add i64 %776, -8038413155876365720
  %6148 = add i64 5787372266067740398, %776
  %6149 = sub i64 %6148, -4620958651765445498
  %6150 = xor i64 -1995509652860440645, %6147
  %6151 = xor i64 %6150, %6146
  %6152 = xor i64 %6151, %6149
  %6153 = xor i64 %6152, %6144
  %6154 = sext i32 %170 to i64
  %6155 = and i64 %6154, -7960132307829473137
  %6156 = xor i64 %6154, -1
  %6157 = or i64 7960132307829473136, %6156
  %6158 = xor i64 %6157, -1
  %6159 = and i64 %6158, -1
  %6160 = add i64 %1238, -6496918061535382349
  %6161 = sub i64 0, %1238
  %6162 = sub i64 -6496918061535382349, %6161
  %6163 = xor i64 0, %6160
  %6164 = xor i64 %6163, %6162
  %6165 = xor i64 %6164, %6159
  %6166 = xor i64 %6165, %6155
  %6167 = mul i64 %6153, %6166
  %6168 = trunc i64 %6167 to i1
  %6169 = sext i32 %92 to i64
  %6170 = or i64 %6169, 7527696130762261092
  %6171 = xor i64 %6169, -1
  %6172 = and i64 7527696130762261092, %6171
  %6173 = add i64 %6172, %6169
  %6174 = or i64 %547, 7976148912677488386
  %6175 = and i64 7976148912677488386, %547
  %6176 = xor i64 7976148912677488386, %547
  %6177 = or i64 %6175, %6176
  %6178 = and i64 %1135, 1273624367411485893
  %6179 = or i64 -1273624367411485894, %1135
  %6180 = sub i64 %6179, -1273624367411485894
  %6181 = xor i64 %6170, %6177
  %6182 = xor i64 %6181, %6173
  %6183 = xor i64 %6182, %6180
  %6184 = xor i64 %6183, 7087765065590787711
  %6185 = xor i64 %6184, %6174
  %6186 = xor i64 %6185, %6178
  %6187 = or i64 %1402, -4159443095049790853
  %6188 = and i64 -4159443095049790853, %1402
  %6189 = xor i64 -4159443095049790853, %1402
  %6190 = or i64 %6188, %6189
  %6191 = add i64 %278, -7323053096314097503
  %6192 = sub i64 0, %278
  %6193 = sub i64 -7323053096314097503, %6192
  %6194 = xor i64 %6191, 0
  %6195 = xor i64 %6194, %6187
  %6196 = xor i64 %6195, %6190
  %6197 = xor i64 %6196, %6193
  %6198 = mul i64 %6186, %6197
  %6199 = and i64 %996, -3709042658217384427
  %6200 = xor i64 %996, -1
  %6201 = xor i64 -3709042658217384427, %6200
  %6202 = and i64 %6201, -3709042658217384427
  %6203 = add i64 %1133, 3003496319102732745
  %6204 = add i64 7496213028374844009, %1133
  %6205 = add i64 %6204, -4492716709272111264
  %6206 = xor i64 %6199, %6203
  %6207 = xor i64 %6206, %6202
  %6208 = xor i64 %6207, %6205
  %6209 = xor i64 %6208, -7897492082253956291
  %6210 = add i64 %1503, -4230452131015972422
  %6211 = add i64 8613495007281695838, %1503
  %6212 = sub i64 %6211, -5602796935411883356
  %6213 = sext i32 %171 to i64
  %6214 = add i64 %6213, 5665258094861860652
  %6215 = and i64 5665258094861860652, %6213
  %6216 = or i64 5665258094861860652, %6213
  %6217 = add i64 %6215, %6216
  %6218 = and i64 %395, -7117099561442904912
  %6219 = xor i64 %395, -1
  %6220 = xor i64 -7117099561442904912, %6219
  %6221 = and i64 %6220, -7117099561442904912
  %6222 = xor i64 %6212, 0
  %6223 = xor i64 %6222, %6214
  %6224 = xor i64 %6223, %6221
  %6225 = xor i64 %6224, %6218
  %6226 = xor i64 %6225, %6217
  %6227 = xor i64 %6226, %6210
  %6228 = mul i64 %6209, %6227
  %6229 = add i64 %1286, 4074819281229140325
  %6230 = sub i64 0, %1286
  %6231 = add i64 -4074819281229140325, %6230
  %6232 = sub i64 0, %6231
  %6233 = add i64 %224, 8960025637005382810
  %6234 = and i64 8960025637005382810, %224
  %6235 = or i64 8960025637005382810, %224
  %6236 = add i64 %6234, %6235
  %6237 = and i64 %101, -3610382952414326639
  %6238 = or i64 3610382952414326638, %101
  %6239 = sub i64 %6238, 3610382952414326638
  %6240 = xor i64 %6236, %6237
  %6241 = xor i64 %6240, %6229
  %6242 = xor i64 %6241, %6233
  %6243 = xor i64 %6242, 4764585052268850813
  %6244 = xor i64 %6243, %6232
  %6245 = xor i64 %6244, %6239
  %6246 = and i64 %829, -7971084304786954459
  %6247 = xor i64 %829, -1
  %6248 = or i64 7971084304786954458, %6247
  %6249 = xor i64 %6248, -1
  %6250 = and i64 %6249, -1
  %6251 = or i64 %561, -2283170235389299539
  %6252 = xor i64 %561, -1
  %6253 = and i64 -2283170235389299539, %6252
  %6254 = add i64 %6253, %561
  %6255 = or i64 %228, 2302614541429813152
  %6256 = xor i64 %228, -1
  %6257 = and i64 %6256, 5373904531101838854
  %6258 = and i64 %228, -5373904531101838855
  %6259 = or i64 %6257, %6258
  %6260 = xor i64 6154017206209167782, %6259
  %6261 = xor i64 %228, -1
  %6262 = or i64 -2302614541429813153, %6261
  %6263 = xor i64 %6262, -1
  %6264 = and i64 %6263, -1
  %6265 = or i64 %6260, %6264
  %6266 = xor i64 %6254, %6265
  %6267 = xor i64 %6266, %6246
  %6268 = xor i64 %6267, %6250
  %6269 = xor i64 %6268, 0
  %6270 = xor i64 %6269, %6255
  %6271 = xor i64 %6270, %6251
  %6272 = mul i64 %6245, %6271
  %6273 = trunc i64 %6272 to i1
  %6274 = add i64 %1296, -7262170439137493550
  %6275 = sub i64 0, %1296
  %6276 = sub i64 -7262170439137493550, %6275
  %6277 = add i64 %1511, 1614730709348901243
  %6278 = add i64 3527067539053485832, %1511
  %6279 = add i64 %6278, -1912336829704584589
  %6280 = xor i64 %6279, -8440627739999237367
  %6281 = xor i64 %6280, %6274
  %6282 = xor i64 %6281, %6277
  %6283 = xor i64 %6282, %6276
  %6284 = or i64 %910, 7554183244282604788
  %6285 = xor i64 %910, -1
  %6286 = and i64 %6285, -3656255202491152833
  %6287 = and i64 %910, 3656255202491152832
  %6288 = or i64 %6286, %6287
  %6289 = xor i64 -6514590035629872437, %6288
  %6290 = xor i64 %910, -1
  %6291 = or i64 -7554183244282604789, %6290
  %6292 = xor i64 %6291, -1
  %6293 = and i64 %6292, -1
  %6294 = or i64 %6289, %6293
  %6295 = or i64 %1185, 3010765955540539028
  %6296 = and i64 3010765955540539028, %1185
  %6297 = xor i64 3010765955540539028, %1185
  %6298 = or i64 %6296, %6297
  %6299 = and i64 %91, 4891919393253045502
  %6300 = xor i64 %91, -1
  %6301 = or i64 -4891919393253045503, %6300
  %6302 = xor i64 %6301, -1
  %6303 = and i64 %6302, -1
  %6304 = xor i64 %6298, %6295
  %6305 = xor i64 %6304, %6294
  %6306 = xor i64 %6305, 0
  %6307 = xor i64 %6306, %6303
  %6308 = xor i64 %6307, %6299
  %6309 = xor i64 %6308, %6284
  %6310 = mul i64 %6283, %6309
  %6311 = or i64 %545, 8665067410826330779
  %6312 = xor i64 %545, -1
  %6313 = and i64 %6312, 4837979468316895072
  %6314 = and i64 %545, -4837979468316895073
  %6315 = or i64 %6313, %6314
  %6316 = xor i64 4279391988055762427, %6315
  %6317 = xor i64 %545, -1
  %6318 = or i64 -8665067410826330780, %6317
  %6319 = xor i64 %6318, -1
  %6320 = and i64 %6319, -1
  %6321 = or i64 %6316, %6320
  %6322 = or i64 %177, 3276581080787308908
  %6323 = xor i64 %177, -1
  %6324 = and i64 3276581080787308908, %6323
  %6325 = add i64 %6324, %177
  %6326 = and i64 %1525, -6525732268136407697
  %6327 = xor i64 %1525, -1
  %6328 = or i64 6525732268136407696, %6327
  %6329 = xor i64 %6328, -1
  %6330 = and i64 %6329, -1
  %6331 = xor i64 241223820709932175, %6325
  %6332 = xor i64 %6331, %6326
  %6333 = xor i64 %6332, %6311
  %6334 = xor i64 %6333, %6322
  %6335 = xor i64 %6334, %6321
  %6336 = xor i64 %6335, %6330
  %6337 = and i64 %1653, -5706118272579177546
  %6338 = or i64 5706118272579177545, %1653
  %6339 = sub i64 %6338, 5706118272579177545
  %6340 = and i64 %1582, -6532543893805232119
  %6341 = xor i64 %1582, -1
  %6342 = xor i64 -6532543893805232119, %6341
  %6343 = and i64 %6342, -6532543893805232119
  %6344 = xor i64 %6337, %6340
  %6345 = xor i64 %6344, %6339
  %6346 = xor i64 %6345, %6343
  %6347 = xor i64 %6346, 0
  %6348 = mul i64 %6336, %6347
  %6349 = trunc i64 %6348 to i1
  %6350 = and i64 %1406, -2892595621220444190
  %6351 = or i64 2892595621220444189, %1406
  %6352 = sub i64 %6351, 2892595621220444189
  %6353 = and i64 %1493, 5207214756672845108
  %6354 = or i64 -5207214756672845109, %1493
  %6355 = sub i64 %6354, -5207214756672845109
  %6356 = xor i64 8468155412589558653, %6350
  %6357 = xor i64 %6356, %6352
  %6358 = xor i64 %6357, %6353
  %6359 = xor i64 %6358, %6355
  %6360 = or i64 %992, -3355181908039734381
  %6361 = xor i64 %992, -1
  %6362 = and i64 %6361, 1305035331361787687
  %6363 = and i64 %992, -1305035331361787688
  %6364 = or i64 %6362, %6363
  %6365 = xor i64 -4362979318752729932, %6364
  %6366 = xor i64 %992, -1
  %6367 = or i64 3355181908039734380, %6366
  %6368 = xor i64 %6367, -1
  %6369 = and i64 %6368, -1
  %6370 = or i64 %6365, %6369
  %6371 = or i64 %551, -2938091716574669250
  %6372 = and i64 -2938091716574669250, %551
  %6373 = xor i64 -2938091716574669250, %551
  %6374 = or i64 %6372, %6373
  %6375 = and i64 %1541, -913545294833019915
  %6376 = xor i64 %1541, -1
  %6377 = xor i64 -913545294833019915, %6376
  %6378 = and i64 %6377, -913545294833019915
  %6379 = xor i64 %6371, 0
  %6380 = xor i64 %6379, %6378
  %6381 = xor i64 %6380, %6370
  %6382 = xor i64 %6381, %6375
  %6383 = xor i64 %6382, %6374
  %6384 = xor i64 %6383, %6360
  %6385 = mul i64 %6359, %6384
  %6386 = trunc i64 %6385 to i1
  %6387 = add i64 %1491, 1253929221680916923
  %6388 = and i64 1253929221680916923, %1491
  %6389 = or i64 1253929221680916923, %1491
  %6390 = add i64 %6388, %6389
  %6391 = and i64 %379, 7438100721886059192
  %6392 = xor i64 %379, -1
  %6393 = or i64 -7438100721886059193, %6392
  %6394 = xor i64 %6393, -1
  %6395 = and i64 %6394, -1
  %6396 = xor i64 %6395, %6390
  %6397 = xor i64 %6396, -7893842898464168847
  %6398 = xor i64 %6397, %6391
  %6399 = xor i64 %6398, %6387
  %6400 = and i64 %1588, 3879213377884643167
  %6401 = xor i64 %1588, -1
  %6402 = or i64 -3879213377884643168, %6401
  %6403 = xor i64 %6402, -1
  %6404 = and i64 %6403, -1
  %6405 = or i64 %547, 4226417804465930281
  %6406 = xor i64 %547, -1
  %6407 = and i64 %6406, 8851938801884532268
  %6408 = and i64 %547, -8851938801884532269
  %6409 = or i64 %6407, %6408
  %6410 = xor i64 4647477222423596549, %6409
  %6411 = xor i64 %547, -1
  %6412 = or i64 -4226417804465930282, %6411
  %6413 = xor i64 %6412, -1
  %6414 = and i64 %6413, -1
  %6415 = or i64 %6410, %6414
  %6416 = and i64 %1582, 4121056552648377378
  %6417 = xor i64 %1582, -1
  %6418 = or i64 -4121056552648377379, %6417
  %6419 = xor i64 %6418, -1
  %6420 = and i64 %6419, -1
  %6421 = xor i64 %6416, %6400
  %6422 = xor i64 %6421, %6405
  %6423 = xor i64 %6422, %6420
  %6424 = xor i64 %6423, %6404
  %6425 = xor i64 %6424, %6415
  %6426 = xor i64 %6425, 0
  %6427 = mul i64 %6399, %6426
  %6428 = trunc i64 %6427 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %6031, i64* %6032, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %6063, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %6104, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %6143, i1 %6168, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %6198, i64 %6228, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %6273, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %6310, i64* null, i1* null, i8* null, float* null, i1* null, i1 %6349, i1 %6386, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %6428, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %6429 = load i64, i64* %6032, align 8
  %6430 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2052736990690125031, i32 0, i64 %6429
  store i8** %6430, i8*** %40, align 8
  ret void

"52":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %6431 = load i64, i64* %41, align 8
  %6432 = alloca i64, align 8
  %6433 = add i64 %551, -5424718848194795479
  %6434 = add i64 8448391674818411264, %551
  %6435 = add i64 %6434, 4573633550696344873
  %6436 = add i64 %1288, 3239087190803134450
  %6437 = add i64 6974735095580028129, %1288
  %6438 = add i64 %6437, -3735647904776893679
  %6439 = and i64 %222, 3144466372199108292
  %6440 = or i64 -3144466372199108293, %222
  %6441 = sub i64 %6440, -3144466372199108293
  %6442 = xor i64 %6439, %6436
  %6443 = xor i64 %6442, %6441
  %6444 = xor i64 %6443, %6433
  %6445 = xor i64 %6444, %6438
  %6446 = xor i64 %6445, %6435
  %6447 = xor i64 %6446, 6159063078255678309
  %6448 = or i64 %607, 4896502876669322829
  %6449 = xor i64 %607, -1
  %6450 = and i64 4896502876669322829, %6449
  %6451 = add i64 %6450, %607
  %6452 = and i64 %1517, 5178427348537989222
  %6453 = xor i64 %1517, -1
  %6454 = or i64 -5178427348537989223, %6453
  %6455 = xor i64 %6454, -1
  %6456 = and i64 %6455, -1
  %6457 = xor i64 %6451, %6452
  %6458 = xor i64 %6457, %6456
  %6459 = xor i64 %6458, %6448
  %6460 = xor i64 %6459, 0
  %6461 = mul i64 %6447, %6460
  %6462 = trunc i64 %6461 to i1
  %6463 = or i64 %53, -1801735765622227346
  %6464 = xor i64 %53, -1
  %6465 = and i64 %6464, 4430939703183956562
  %6466 = and i64 %53, -4430939703183956563
  %6467 = or i64 %6465, %6466
  %6468 = xor i64 -2629206136585444292, %6467
  %6469 = xor i64 %53, -1
  %6470 = or i64 1801735765622227345, %6469
  %6471 = xor i64 %6470, -1
  %6472 = and i64 %6471, -1
  %6473 = or i64 %6468, %6472
  %6474 = add i64 %666, 3254207250281484019
  %6475 = xor i64 3254207250281484019, %666
  %6476 = and i64 3254207250281484019, %666
  %6477 = mul i64 2, %6476
  %6478 = add i64 %6475, %6477
  %6479 = and i64 %1501, 7575796564651043574
  %6480 = xor i64 %1501, -1
  %6481 = xor i64 7575796564651043574, %6480
  %6482 = and i64 %6481, 7575796564651043574
  %6483 = xor i64 %6479, %6473
  %6484 = xor i64 %6483, %6463
  %6485 = xor i64 %6484, %6478
  %6486 = xor i64 %6485, %6482
  %6487 = xor i64 %6486, %6474
  %6488 = xor i64 %6487, -9189069409734692039
  %6489 = or i64 %1398, -6015305193953151742
  %6490 = xor i64 %1398, -1
  %6491 = and i64 %6490, -4094191598011995095
  %6492 = and i64 %1398, 4094191598011995094
  %6493 = or i64 %6491, %6492
  %6494 = xor i64 7758529688070723883, %6493
  %6495 = xor i64 %1398, -1
  %6496 = or i64 6015305193953151741, %6495
  %6497 = xor i64 %6496, -1
  %6498 = and i64 %6497, -1
  %6499 = or i64 %6494, %6498
  %6500 = add i64 %95, -6336868741887956219
  %6501 = sub i64 0, %95
  %6502 = sub i64 -6336868741887956219, %6501
  %6503 = add i64 %1584, -3887401145441953558
  %6504 = xor i64 -3887401145441953558, %1584
  %6505 = and i64 -3887401145441953558, %1584
  %6506 = mul i64 2, %6505
  %6507 = add i64 %6504, %6506
  %6508 = xor i64 %6500, 0
  %6509 = xor i64 %6508, %6489
  %6510 = xor i64 %6509, %6503
  %6511 = xor i64 %6510, %6507
  %6512 = xor i64 %6511, %6499
  %6513 = xor i64 %6512, %6502
  %6514 = mul i64 %6488, %6513
  %6515 = trunc i64 %6514 to i1
  %6516 = or i64 %1503, 3796020148336791715
  %6517 = xor i64 %1503, -1
  %6518 = and i64 %6517, -552736956393969622
  %6519 = and i64 %1503, 552736956393969621
  %6520 = or i64 %6518, %6519
  %6521 = xor i64 -3676515520888227703, %6520
  %6522 = xor i64 %1503, -1
  %6523 = or i64 -3796020148336791716, %6522
  %6524 = xor i64 %6523, -1
  %6525 = and i64 %6524, -1
  %6526 = or i64 %6521, %6525
  %6527 = or i64 %676, 2823463876431666862
  %6528 = and i64 2823463876431666862, %676
  %6529 = xor i64 2823463876431666862, %676
  %6530 = or i64 %6528, %6529
  %6531 = xor i64 %6530, %6516
  %6532 = xor i64 %6531, -2743730930985852729
  %6533 = xor i64 %6532, %6526
  %6534 = xor i64 %6533, %6527
  %6535 = or i64 %341, -5077477669478507374
  %6536 = and i64 -5077477669478507374, %341
  %6537 = xor i64 -5077477669478507374, %341
  %6538 = or i64 %6536, %6537
  %6539 = add i64 %1450, -7957072793472144005
  %6540 = xor i64 -7957072793472144005, %1450
  %6541 = and i64 -7957072793472144005, %1450
  %6542 = mul i64 2, %6541
  %6543 = add i64 %6540, %6542
  %6544 = and i64 %866, -8666241341860296960
  %6545 = xor i64 %866, -1
  %6546 = or i64 8666241341860296959, %6545
  %6547 = xor i64 %6546, -1
  %6548 = and i64 %6547, -1
  %6549 = xor i64 %6543, %6548
  %6550 = xor i64 %6549, %6539
  %6551 = xor i64 %6550, %6535
  %6552 = xor i64 %6551, %6544
  %6553 = xor i64 %6552, 0
  %6554 = xor i64 %6553, %6538
  %6555 = mul i64 %6534, %6554
  %6556 = trunc i64 %6555 to i32
  %6557 = sext i32 %171 to i64
  %6558 = or i64 %6557, 4142681882984149479
  %6559 = and i64 4142681882984149479, %6557
  %6560 = xor i64 4142681882984149479, %6557
  %6561 = or i64 %6559, %6560
  %6562 = and i64 %1655, -6911894551475015443
  %6563 = or i64 6911894551475015442, %1655
  %6564 = sub i64 %6563, 6911894551475015442
  %6565 = xor i64 -7034220521998588147, %6562
  %6566 = xor i64 %6565, %6564
  %6567 = xor i64 %6566, %6558
  %6568 = xor i64 %6567, %6561
  %6569 = or i64 %1501, -7492133514555460943
  %6570 = xor i64 %1501, -1
  %6571 = and i64 -7492133514555460943, %6570
  %6572 = add i64 %6571, %1501
  %6573 = and i64 %446, -7011351694513840406
  %6574 = xor i64 %446, -1
  %6575 = xor i64 -7011351694513840406, %6574
  %6576 = and i64 %6575, -7011351694513840406
  %6577 = add i64 %829, 345736363219279462
  %6578 = xor i64 345736363219279462, %829
  %6579 = and i64 345736363219279462, %829
  %6580 = mul i64 2, %6579
  %6581 = add i64 %6578, %6580
  %6582 = xor i64 %6569, %6577
  %6583 = xor i64 %6582, %6573
  %6584 = xor i64 %6583, 0
  %6585 = xor i64 %6584, %6572
  %6586 = xor i64 %6585, %6581
  %6587 = xor i64 %6586, %6576
  %6588 = mul i64 %6568, %6587
  %6589 = trunc i64 %6588 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %6431, i64* %6432, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %6462, i1* null, i1 %6515, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %6556, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %6589, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %6590 = load i64, i64* %6432, align 8
  %6591 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable3092705622466298772, i32 0, i64 %6590
  store i8** %6591, i8*** %42, align 8
  ret void

"53":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %6592 = load i64, i64* %43, align 8
  %6593 = alloca i64, align 8
  %6594 = and i64 %1234, -1445441421126218006
  %6595 = xor i64 %1234, -1
  %6596 = or i64 1445441421126218005, %6595
  %6597 = xor i64 %6596, -1
  %6598 = and i64 %6597, -1
  %6599 = add i64 %1450, 4111326653733249190
  %6600 = xor i64 4111326653733249190, %1450
  %6601 = and i64 4111326653733249190, %1450
  %6602 = mul i64 2, %6601
  %6603 = add i64 %6600, %6602
  %6604 = and i64 %543, 8738174207802161870
  %6605 = xor i64 %543, -1
  %6606 = xor i64 8738174207802161870, %6605
  %6607 = and i64 %6606, 8738174207802161870
  %6608 = xor i64 %6594, %6607
  %6609 = xor i64 %6608, %6604
  %6610 = xor i64 %6609, %6599
  %6611 = xor i64 %6610, %6603
  %6612 = xor i64 %6611, %6598
  %6613 = xor i64 %6612, -7725463726679211513
  %6614 = add i64 %912, -1860261057268333617
  %6615 = add i64 848036594466559009, %912
  %6616 = sub i64 %6615, 2708297651734892626
  %6617 = or i64 %1507, 7785243635911004318
  %6618 = xor i64 %1507, -1
  %6619 = and i64 7785243635911004318, %6618
  %6620 = add i64 %6619, %1507
  %6621 = xor i64 0, %6617
  %6622 = xor i64 %6621, %6620
  %6623 = xor i64 %6622, %6614
  %6624 = xor i64 %6623, %6616
  %6625 = mul i64 %6613, %6624
  %6626 = add i64 %547, -4299396753952188062
  %6627 = and i64 -4299396753952188062, %547
  %6628 = or i64 -4299396753952188062, %547
  %6629 = add i64 %6627, %6628
  %6630 = and i64 %1242, 7465997992097897356
  %6631 = or i64 -7465997992097897357, %1242
  %6632 = sub i64 %6631, -7465997992097897357
  %6633 = add i64 %175, -2145537952401532098
  %6634 = add i64 -2155545575674207792, %175
  %6635 = add i64 %6634, 10007623272675694
  %6636 = xor i64 %6629, %6632
  %6637 = xor i64 %6636, %6630
  %6638 = xor i64 %6637, %6626
  %6639 = xor i64 %6638, %6635
  %6640 = xor i64 %6639, -3602815807792885329
  %6641 = xor i64 %6640, %6633
  %6642 = add i64 %1294, 330314747137794211
  %6643 = sub i64 0, %1294
  %6644 = sub i64 330314747137794211, %6643
  %6645 = and i64 %992, 5162230073598596067
  %6646 = or i64 -5162230073598596068, %992
  %6647 = sub i64 %6646, -5162230073598596068
  %6648 = xor i64 %6647, %6645
  %6649 = xor i64 %6648, %6642
  %6650 = xor i64 %6649, %6644
  %6651 = xor i64 %6650, 0
  %6652 = mul i64 %6641, %6651
  %6653 = trunc i64 %6652 to i1
  %6654 = sext i32 %170 to i64
  %6655 = add i64 %6654, 7597634954816784015
  %6656 = xor i64 7597634954816784015, %6654
  %6657 = and i64 7597634954816784015, %6654
  %6658 = mul i64 2, %6657
  %6659 = add i64 %6656, %6658
  %6660 = or i64 %682, 6284081510425369940
  %6661 = xor i64 %682, -1
  %6662 = and i64 6284081510425369940, %6661
  %6663 = add i64 %6662, %682
  %6664 = or i64 %1501, 1564120740892420156
  %6665 = xor i64 %1501, -1
  %6666 = and i64 %6665, -853884338337688064
  %6667 = and i64 %1501, 853884338337688063
  %6668 = or i64 %6666, %6667
  %6669 = xor i64 -2192484248430412228, %6668
  %6670 = xor i64 %1501, -1
  %6671 = or i64 -1564120740892420157, %6670
  %6672 = xor i64 %6671, -1
  %6673 = and i64 %6672, -1
  %6674 = or i64 %6669, %6673
  %6675 = xor i64 %6663, %6655
  %6676 = xor i64 %6675, -213440654712912821
  %6677 = xor i64 %6676, %6659
  %6678 = xor i64 %6677, %6660
  %6679 = xor i64 %6678, %6674
  %6680 = xor i64 %6679, %6664
  %6681 = or i64 %96, 6420365089639645428
  %6682 = xor i64 %96, -1
  %6683 = and i64 %6682, -5122716167669116154
  %6684 = and i64 %96, 5122716167669116153
  %6685 = or i64 %6683, %6684
  %6686 = xor i64 -2165724815470308366, %6685
  %6687 = xor i64 %96, -1
  %6688 = or i64 -6420365089639645429, %6687
  %6689 = xor i64 %6688, -1
  %6690 = and i64 %6689, -1
  %6691 = or i64 %6686, %6690
  %6692 = and i64 %1499, -3276514688295504257
  %6693 = or i64 3276514688295504256, %1499
  %6694 = sub i64 %6693, 3276514688295504256
  %6695 = xor i64 %6691, 0
  %6696 = xor i64 %6695, %6692
  %6697 = xor i64 %6696, %6681
  %6698 = xor i64 %6697, %6694
  %6699 = mul i64 %6680, %6698
  %6700 = trunc i64 %6699 to i32
  %6701 = add i64 %1230, -7250257421596281919
  %6702 = xor i64 -7250257421596281919, %1230
  %6703 = and i64 -7250257421596281919, %1230
  %6704 = mul i64 2, %6703
  %6705 = add i64 %6702, %6704
  %6706 = add i64 %393, -921694476495606490
  %6707 = xor i64 -921694476495606490, %393
  %6708 = and i64 -921694476495606490, %393
  %6709 = mul i64 2, %6708
  %6710 = add i64 %6707, %6709
  %6711 = xor i64 %6701, %6705
  %6712 = xor i64 %6711, %6706
  %6713 = xor i64 %6712, %6710
  %6714 = xor i64 %6713, 2226279751730796057
  %6715 = and i64 %1543, -3764005490411958219
  %6716 = xor i64 %1543, -1
  %6717 = xor i64 -3764005490411958219, %6716
  %6718 = and i64 %6717, -3764005490411958219
  %6719 = add i64 %1129, -2888078489496359877
  %6720 = xor i64 -2888078489496359877, %1129
  %6721 = and i64 -2888078489496359877, %1129
  %6722 = mul i64 2, %6721
  %6723 = add i64 %6720, %6722
  %6724 = and i64 %1647, -7373696880796030038
  %6725 = xor i64 %1647, -1
  %6726 = or i64 7373696880796030037, %6725
  %6727 = xor i64 %6726, -1
  %6728 = and i64 %6727, -1
  %6729 = xor i64 %6715, %6723
  %6730 = xor i64 %6729, %6719
  %6731 = xor i64 %6730, 0
  %6732 = xor i64 %6731, %6718
  %6733 = xor i64 %6732, %6728
  %6734 = xor i64 %6733, %6724
  %6735 = mul i64 %6714, %6734
  %6736 = and i64 %1582, -6977243312575373223
  %6737 = or i64 6977243312575373222, %1582
  %6738 = sub i64 %6737, 6977243312575373222
  %6739 = or i64 %280, 126739492354685900
  %6740 = xor i64 %280, -1
  %6741 = and i64 %6740, 3580924618583063419
  %6742 = and i64 %280, -3580924618583063420
  %6743 = or i64 %6741, %6742
  %6744 = xor i64 3491339823313600695, %6743
  %6745 = xor i64 %280, -1
  %6746 = or i64 -126739492354685901, %6745
  %6747 = xor i64 %6746, -1
  %6748 = and i64 %6747, -1
  %6749 = or i64 %6744, %6748
  %6750 = xor i64 %6736, %6749
  %6751 = xor i64 %6750, 2606865362223905169
  %6752 = xor i64 %6751, %6739
  %6753 = xor i64 %6752, %6738
  %6754 = and i64 %1503, 5913910261887788073
  %6755 = or i64 -5913910261887788074, %1503
  %6756 = sub i64 %6755, -5913910261887788074
  %6757 = add i64 %1135, -2670200625012084589
  %6758 = sub i64 0, %1135
  %6759 = sub i64 -2670200625012084589, %6758
  %6760 = and i64 %543, 6984672963904811236
  %6761 = xor i64 %543, -1
  %6762 = xor i64 6984672963904811236, %6761
  %6763 = and i64 %6762, 6984672963904811236
  %6764 = xor i64 %6763, %6754
  %6765 = xor i64 %6764, %6757
  %6766 = xor i64 %6765, 0
  %6767 = xor i64 %6766, %6756
  %6768 = xor i64 %6767, %6759
  %6769 = xor i64 %6768, %6760
  %6770 = mul i64 %6753, %6769
  %6771 = trunc i64 %6770 to i32
  %6772 = or i64 %1499, 6535047468964353034
  %6773 = and i64 6535047468964353034, %1499
  %6774 = xor i64 6535047468964353034, %1499
  %6775 = or i64 %6773, %6774
  %6776 = and i64 %662, -3488830013865601555
  %6777 = or i64 3488830013865601554, %662
  %6778 = sub i64 %6777, 3488830013865601554
  %6779 = or i64 %1300, 4875699939901135969
  %6780 = xor i64 %1300, -1
  %6781 = and i64 %6780, 8208558097000514187
  %6782 = and i64 %1300, -8208558097000514188
  %6783 = or i64 %6781, %6782
  %6784 = xor i64 3621843367449337578, %6783
  %6785 = xor i64 %1300, -1
  %6786 = or i64 -4875699939901135970, %6785
  %6787 = xor i64 %6786, -1
  %6788 = and i64 %6787, -1
  %6789 = or i64 %6784, %6788
  %6790 = xor i64 %6779, %6775
  %6791 = xor i64 %6790, %6776
  %6792 = xor i64 %6791, %6772
  %6793 = xor i64 %6792, %6789
  %6794 = xor i64 %6793, -1477618664926486241
  %6795 = xor i64 %6794, %6778
  %6796 = or i64 %1133, 5642938737824929547
  %6797 = xor i64 %1133, -1
  %6798 = and i64 %6797, 4104397726780593341
  %6799 = and i64 %1133, -4104397726780593342
  %6800 = or i64 %6798, %6799
  %6801 = xor i64 8555151674345587638, %6800
  %6802 = xor i64 %1133, -1
  %6803 = or i64 -5642938737824929548, %6802
  %6804 = xor i64 %6803, -1
  %6805 = and i64 %6804, -1
  %6806 = or i64 %6801, %6805
  %6807 = add i64 %662, 5840600458223003530
  %6808 = add i64 9073101996191301195, %662
  %6809 = sub i64 %6808, 3232501537968297665
  %6810 = xor i64 %6806, 0
  %6811 = xor i64 %6810, %6796
  %6812 = xor i64 %6811, %6807
  %6813 = xor i64 %6812, %6809
  %6814 = mul i64 %6795, %6813
  %6815 = trunc i64 %6814 to i1
  %6816 = and i64 %446, -2671062692846502059
  %6817 = or i64 2671062692846502058, %446
  %6818 = sub i64 %6817, 2671062692846502058
  %6819 = add i64 %1286, 1163763963832961408
  %6820 = xor i64 1163763963832961408, %1286
  %6821 = and i64 1163763963832961408, %1286
  %6822 = mul i64 2, %6821
  %6823 = add i64 %6820, %6822
  %6824 = and i64 %1404, 302269111280679321
  %6825 = or i64 -302269111280679322, %1404
  %6826 = sub i64 %6825, -302269111280679322
  %6827 = xor i64 %6819, %6818
  %6828 = xor i64 %6827, 2289590742060639425
  %6829 = xor i64 %6828, %6826
  %6830 = xor i64 %6829, %6824
  %6831 = xor i64 %6830, %6816
  %6832 = xor i64 %6831, %6823
  %6833 = or i64 %1517, -5459577860895473823
  %6834 = xor i64 %1517, -1
  %6835 = and i64 %6834, -8160231797591076451
  %6836 = and i64 %1517, 8160231797591076450
  %6837 = or i64 %6835, %6836
  %6838 = xor i64 4249892501709680380, %6837
  %6839 = xor i64 %1517, -1
  %6840 = or i64 5459577860895473822, %6839
  %6841 = xor i64 %6840, -1
  %6842 = and i64 %6841, -1
  %6843 = or i64 %6838, %6842
  %6844 = and i64 %1240, 1639371962553324077
  %6845 = or i64 -1639371962553324078, %1240
  %6846 = sub i64 %6845, -1639371962553324078
  %6847 = xor i64 %6833, %6844
  %6848 = xor i64 %6847, %6843
  %6849 = xor i64 %6848, 0
  %6850 = xor i64 %6849, %6846
  %6851 = mul i64 %6832, %6850
  %6852 = trunc i64 %6851 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %6592, i64* %6593, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %6625, i1 %6653, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %6700, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %6735, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 %6771, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %6815, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %6852, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %6853 = load i64, i64* %6593, align 8
  %6854 = getelementptr inbounds [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable10704982355254502734, i32 0, i64 %6853
  store i8** %6854, i8*** %44, align 8
  ret void

newFuncRoot2:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload246 = load i8**, i8*** %.reg2mem245, align 8
  %6855 = load i8*, i8** %.reload246, align 8
  indirectbr i8* %6855, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"55":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %6856 = add i64 -3429960306736513484, 3429960306736513453
  store i64 %6856, i64* %45, align 8
  %6857 = add i64 126, 94
  store i64 %6857, i64* %46, align 8
  %.reload249 = load i8**, i8*** %.reg2mem248, align 8
  %.reload252 = load i8**, i8*** %.reg2mem251, align 8
  %6858 = select i1 %47, i8** %.reload249, i8** %.reload252
  %6859 = load i8*, i8** %6858, align 8
  indirectbr i8* %6859, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub3:                              ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %48, align 1
  ret void

.exitStub3.exitStub:                              ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %48, align 1
  ret void

newFuncRoot4:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %6860 = alloca i64, align 8
  store i64* %6860, i64** %.reg2mem676, align 8
  %6861 = alloca i64, align 8
  %6862 = or i64 %395, 1493951648205002757
  %6863 = xor i64 %395, -1
  %6864 = and i64 %6863, -6565215122515988054
  %6865 = and i64 %395, 6565215122515988053
  %6866 = or i64 %6864, %6865
  %6867 = xor i64 -5739768753903162961, %6866
  %6868 = xor i64 %395, -1
  %6869 = or i64 -1493951648205002758, %6868
  %6870 = xor i64 %6869, -1
  %6871 = and i64 %6870, -1
  %6872 = or i64 %6867, %6871
  %6873 = add i64 %1543, 2319435992359820136
  %6874 = and i64 2319435992359820136, %1543
  %6875 = or i64 2319435992359820136, %1543
  %6876 = add i64 %6874, %6875
  %6877 = xor i64 %6872, %6862
  %6878 = xor i64 %6877, %6876
  %6879 = xor i64 %6878, 2743929993753718427
  %6880 = xor i64 %6879, %6873
  %6881 = and i64 %829, 1047771860953800937
  %6882 = or i64 -1047771860953800938, %829
  %6883 = sub i64 %6882, -1047771860953800938
  %6884 = and i64 %494, 5207958316117413975
  %6885 = xor i64 %494, -1
  %6886 = xor i64 5207958316117413975, %6885
  %6887 = and i64 %6886, 5207958316117413975
  %6888 = or i64 %446, -6710328696757435236
  %6889 = xor i64 %446, -1
  %6890 = and i64 %6889, 6782539824328378180
  %6891 = and i64 %446, -6782539824328378181
  %6892 = or i64 %6890, %6891
  %6893 = xor i64 -234060107311135784, %6892
  %6894 = xor i64 %446, -1
  %6895 = or i64 6710328696757435235, %6894
  %6896 = xor i64 %6895, -1
  %6897 = and i64 %6896, -1
  %6898 = or i64 %6893, %6897
  %6899 = xor i64 %6883, 0
  %6900 = xor i64 %6899, %6898
  %6901 = xor i64 %6900, %6884
  %6902 = xor i64 %6901, %6888
  %6903 = xor i64 %6902, %6887
  %6904 = xor i64 %6903, %6881
  %6905 = mul i64 %6880, %6904
  %6906 = trunc i64 %6905 to i1
  %6907 = or i64 %549, -8939031728076824241
  %6908 = xor i64 %549, -1
  %6909 = and i64 -8939031728076824241, %6908
  %6910 = add i64 %6909, %549
  %6911 = add i64 %547, -5023946374792444833
  %6912 = xor i64 -5023946374792444833, %547
  %6913 = and i64 -5023946374792444833, %547
  %6914 = mul i64 2, %6913
  %6915 = add i64 %6912, %6914
  %6916 = add i64 %1240, -8734249676022492130
  %6917 = add i64 5482096518191903896, %1240
  %6918 = add i64 %6917, 4230397879495155590
  %6919 = xor i64 %6907, %6918
  %6920 = xor i64 %6919, %6910
  %6921 = xor i64 %6920, %6915
  %6922 = xor i64 %6921, -4126571449016640475
  %6923 = xor i64 %6922, %6911
  %6924 = xor i64 %6923, %6916
  %6925 = and i64 %1234, 2445793322222308289
  %6926 = xor i64 %1234, -1
  %6927 = xor i64 2445793322222308289, %6926
  %6928 = and i64 %6927, 2445793322222308289
  %6929 = or i64 %868, -2332410817731709
  %6930 = xor i64 %868, -1
  %6931 = and i64 -2332410817731709, %6930
  %6932 = add i64 %6931, %868
  %6933 = xor i64 %6928, %6932
  %6934 = xor i64 %6933, %6925
  %6935 = xor i64 %6934, 0
  %6936 = xor i64 %6935, %6929
  %6937 = mul i64 %6924, %6936
  %6938 = trunc i64 %6937 to i1
  %6939 = or i64 %607, -7953443635920945655
  %6940 = xor i64 %607, -1
  %6941 = and i64 %6940, -6346743455966726468
  %6942 = and i64 %607, 6346743455966726467
  %6943 = or i64 %6941, %6942
  %6944 = xor i64 3923874781279439029, %6943
  %6945 = xor i64 %607, -1
  %6946 = or i64 7953443635920945654, %6945
  %6947 = xor i64 %6946, -1
  %6948 = and i64 %6947, -1
  %6949 = or i64 %6944, %6948
  %6950 = sext i32 %170 to i64
  %6951 = add i64 %6950, -6146839202757091810
  %6952 = sub i64 0, %6950
  %6953 = add i64 6146839202757091810, %6952
  %6954 = sub i64 0, %6953
  %6955 = xor i64 5840653501137944985, %6951
  %6956 = xor i64 %6955, %6949
  %6957 = xor i64 %6956, %6954
  %6958 = xor i64 %6957, %6939
  %6959 = and i64 %1651, 84588331603229480
  %6960 = xor i64 %1651, -1
  %6961 = xor i64 84588331603229480, %6960
  %6962 = and i64 %6961, 84588331603229480
  %6963 = and i64 %680, 384194334489571484
  %6964 = xor i64 %680, -1
  %6965 = or i64 -384194334489571485, %6964
  %6966 = xor i64 %6965, -1
  %6967 = and i64 %6966, -1
  %6968 = xor i64 %6963, %6967
  %6969 = xor i64 %6968, 0
  %6970 = xor i64 %6969, %6959
  %6971 = xor i64 %6970, %6962
  %6972 = mul i64 %6958, %6971
  %6973 = and i64 %1341, 8214890521014772262
  %6974 = xor i64 %1341, -1
  %6975 = xor i64 8214890521014772262, %6974
  %6976 = and i64 %6975, 8214890521014772262
  %6977 = sext i32 %72 to i64
  %6978 = add i64 %6977, -2420383624118901790
  %6979 = and i64 -2420383624118901790, %6977
  %6980 = or i64 -2420383624118901790, %6977
  %6981 = add i64 %6979, %6980
  %6982 = or i64 %1649, 149951013837791963
  %6983 = and i64 149951013837791963, %1649
  %6984 = xor i64 149951013837791963, %1649
  %6985 = or i64 %6983, %6984
  %6986 = xor i64 %6978, 1053541026491230339
  %6987 = xor i64 %6986, %6981
  %6988 = xor i64 %6987, %6973
  %6989 = xor i64 %6988, %6982
  %6990 = xor i64 %6989, %6976
  %6991 = xor i64 %6990, %6985
  %6992 = and i64 %452, -435637922964729466
  %6993 = xor i64 %452, -1
  %6994 = or i64 435637922964729465, %6993
  %6995 = xor i64 %6994, -1
  %6996 = and i64 %6995, -1
  %6997 = and i64 %1404, -6871228709374989607
  %6998 = or i64 6871228709374989606, %1404
  %6999 = sub i64 %6998, 6871228709374989606
  %7000 = and i64 %784, -6207204197114691437
  %7001 = xor i64 %784, -1
  %7002 = or i64 6207204197114691436, %7001
  %7003 = xor i64 %7002, -1
  %7004 = and i64 %7003, -1
  %7005 = xor i64 %7000, %7004
  %7006 = xor i64 %7005, 0
  %7007 = xor i64 %7006, %6997
  %7008 = xor i64 %7007, %6992
  %7009 = xor i64 %7008, %6999
  %7010 = xor i64 %7009, %6996
  %7011 = mul i64 %6991, %7010
  %7012 = trunc i64 %7011 to i1
  %7013 = and i64 %393, -7669635853847718788
  %7014 = xor i64 %393, -1
  %7015 = or i64 7669635853847718787, %7014
  %7016 = xor i64 %7015, -1
  %7017 = and i64 %7016, -1
  %7018 = or i64 %1294, 3665537147971609615
  %7019 = xor i64 %1294, -1
  %7020 = and i64 3665537147971609615, %7019
  %7021 = add i64 %7020, %1294
  %7022 = and i64 %1533, -3555251437732148236
  %7023 = xor i64 %1533, -1
  %7024 = xor i64 -3555251437732148236, %7023
  %7025 = and i64 %7024, -3555251437732148236
  %7026 = xor i64 %7013, %7021
  %7027 = xor i64 %7026, 7116442779943427373
  %7028 = xor i64 %7027, %7018
  %7029 = xor i64 %7028, %7025
  %7030 = xor i64 %7029, %7017
  %7031 = xor i64 %7030, %7022
  %7032 = or i64 %778, -5396961763812939947
  %7033 = xor i64 %778, -1
  %7034 = and i64 %7033, -5786574255061907870
  %7035 = and i64 %778, 5786574255061907869
  %7036 = or i64 %7034, %7035
  %7037 = xor i64 1921865517238133047, %7036
  %7038 = xor i64 %778, -1
  %7039 = or i64 5396961763812939946, %7038
  %7040 = xor i64 %7039, -1
  %7041 = and i64 %7040, -1
  %7042 = or i64 %7037, %7041
  %7043 = or i64 %387, -6557369554604142406
  %7044 = and i64 -6557369554604142406, %387
  %7045 = xor i64 -6557369554604142406, %387
  %7046 = or i64 %7044, %7045
  %7047 = and i64 %553, -4312737407926669060
  %7048 = xor i64 %553, -1
  %7049 = xor i64 -4312737407926669060, %7048
  %7050 = and i64 %7049, -4312737407926669060
  %7051 = xor i64 %7050, %7043
  %7052 = xor i64 %7051, %7042
  %7053 = xor i64 %7052, %7032
  %7054 = xor i64 %7053, 0
  %7055 = xor i64 %7054, %7047
  %7056 = xor i64 %7055, %7046
  %7057 = mul i64 %7031, %7056
  %7058 = trunc i64 %7057 to i1
  %7059 = add i64 %605, -407244042358638078
  %7060 = sub i64 0, %605
  %7061 = sub i64 -407244042358638078, %7060
  %7062 = add i64 %395, 3972895054527419765
  %7063 = and i64 3972895054527419765, %395
  %7064 = or i64 3972895054527419765, %395
  %7065 = add i64 %7063, %7064
  %7066 = or i64 %561, 5536552835691027385
  %7067 = xor i64 %561, -1
  %7068 = and i64 %7067, -7266969388090671872
  %7069 = and i64 %561, 7266969388090671871
  %7070 = or i64 %7068, %7069
  %7071 = xor i64 -2885891812919335239, %7070
  %7072 = xor i64 %561, -1
  %7073 = or i64 -5536552835691027386, %7072
  %7074 = xor i64 %7073, -1
  %7075 = and i64 %7074, -1
  %7076 = or i64 %7071, %7075
  %7077 = xor i64 %7066, %7062
  %7078 = xor i64 %7077, %7061
  %7079 = xor i64 %7078, 8467976506423021501
  %7080 = xor i64 %7079, %7076
  %7081 = xor i64 %7080, %7065
  %7082 = xor i64 %7081, %7059
  %7083 = or i64 %772, -6388159539074564007
  %7084 = xor i64 %772, -1
  %7085 = and i64 %7084, -8027713374039785015
  %7086 = and i64 %772, 8027713374039785014
  %7087 = or i64 %7085, %7086
  %7088 = xor i64 4021546820932256144, %7087
  %7089 = xor i64 %772, -1
  %7090 = or i64 6388159539074564006, %7089
  %7091 = xor i64 %7090, -1
  %7092 = and i64 %7091, -1
  %7093 = or i64 %7088, %7092
  %7094 = or i64 %658, -7276432583998717657
  %7095 = xor i64 %658, -1
  %7096 = and i64 %7095, -8095957909321406161
  %7097 = and i64 %658, 8095957909321406160
  %7098 = or i64 %7096, %7097
  %7099 = xor i64 1486621295281956872, %7098
  %7100 = xor i64 %658, -1
  %7101 = or i64 7276432583998717656, %7100
  %7102 = xor i64 %7101, -1
  %7103 = and i64 %7102, -1
  %7104 = or i64 %7099, %7103
  %7105 = and i64 %1137, 4516862729825840531
  %7106 = xor i64 %1137, -1
  %7107 = xor i64 4516862729825840531, %7106
  %7108 = and i64 %7107, 4516862729825840531
  %7109 = xor i64 %7083, 0
  %7110 = xor i64 %7109, %7108
  %7111 = xor i64 %7110, %7094
  %7112 = xor i64 %7111, %7104
  %7113 = xor i64 %7112, %7093
  %7114 = xor i64 %7113, %7105
  %7115 = mul i64 %7082, %7114
  %7116 = trunc i64 %7115 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %6861, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %6906, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %6938, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %6972, i1 false, i1* null, i1 false, i1 %7012, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %7058, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 %7116, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %7117 = load i64, i64* %6861, align 8
  %7118 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable9221784372211060696, i32 0, i64 %7117
  store i8* bitcast (i1 (i32, i32, i1*)* @main.extracted.15.extracted to i8*), i8** %7118, align 8
  %.reload258 = load i8**, i8*** %.reg2mem257, align 8
  %7119 = load i8*, i8** %.reload258, align 8
  indirectbr i8* %7119, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"59":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %7120 = mul i64 85, 102
  %7121 = sub i64 45, 122
  %.reload261 = load i8**, i8*** %.reg2mem260, align 8
  %7122 = load i8*, i8** %.reload261, align 8
  indirectbr i8* %7122, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl5:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload678 = load i64*, i64** %.reg2mem676, align 8
  store i64 1996855465712537074, i64* %.reload678, align 8
  %.reload677 = load i64*, i64** %.reg2mem676, align 8
  %7123 = call i8** @lk274587686926290325(i64* %.reload677)
  %7124 = load i8*, i8** %7123, align 8
  %7125 = bitcast i8* %7124 to i1 (i32, i32, i1*)*
  %targetBlock6 = call i1 %7125(i32 %49, i32 %50, i1* %51)
  %.reload264 = load i8**, i8*** %.reg2mem263, align 8
  %.reload267 = load i8**, i8*** %.reg2mem266, align 8
  %7126 = select i1 %targetBlock6, i8** %.reload264, i8** %.reload267
  %7127 = load i8*, i8** %7126, align 8
  indirectbr i8* %7127, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub7:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %52, align 1
  ret void

.exitStub1:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %52, align 1
  ret void

newFuncRoot8:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload273 = load i8**, i8*** %.reg2mem272, align 8
  %7128 = load i8*, i8** %.reload273, align 8
  indirectbr i8* %7128, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"64":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %7129 = srem i64 %53, 2
  %7130 = icmp eq i64 %7129, 0
  %7131 = or i1 %54, %7130
  %.reload276 = load i8**, i8*** %.reg2mem275, align 8
  %.reload279 = load i8**, i8*** %.reg2mem278, align 8
  %7132 = select i1 %7131, i8** %.reload276, i8** %.reload279
  %7133 = load i8*, i8** %7132, align 8
  indirectbr i8* %7133, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub9:                              ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %55, align 1
  ret void

.exitStub3.exitStub10:                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %55, align 1
  ret void

newFuncRoot11:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %7134 = alloca i64, align 8
  store i64* %7134, i64** %.reg2mem679, align 8
  %7135 = alloca i64, align 8
  %7136 = add i64 %1288, 4893505814720736552
  %7137 = sub i64 0, %1288
  %7138 = sub i64 4893505814720736552, %7137
  %7139 = sext i32 %0 to i64
  %7140 = or i64 %7139, 8428974499119405768
  %7141 = and i64 8428974499119405768, %7139
  %7142 = xor i64 8428974499119405768, %7139
  %7143 = or i64 %7141, %7142
  %7144 = xor i64 %7136, %7138
  %7145 = xor i64 %7144, %7140
  %7146 = xor i64 %7145, %7143
  %7147 = xor i64 %7146, 4926444443998205319
  %7148 = add i64 %1230, -3873811740546237485
  %7149 = xor i64 -3873811740546237485, %1230
  %7150 = and i64 -3873811740546237485, %1230
  %7151 = mul i64 2, %7150
  %7152 = add i64 %7149, %7151
  %7153 = add i64 %1531, 8300166251800089779
  %7154 = add i64 8405205065358499463, %1531
  %7155 = sub i64 %7154, 105038813558409684
  %7156 = or i64 %393, 5035254413199213774
  %7157 = xor i64 %393, -1
  %7158 = and i64 %7157, 3456854914949894972
  %7159 = and i64 %393, -3456854914949894973
  %7160 = or i64 %7158, %7159
  %7161 = xor i64 7645394795104557042, %7160
  %7162 = xor i64 %393, -1
  %7163 = or i64 -5035254413199213775, %7162
  %7164 = xor i64 %7163, -1
  %7165 = and i64 %7164, -1
  %7166 = or i64 %7161, %7165
  %7167 = xor i64 %7148, %7152
  %7168 = xor i64 %7167, %7153
  %7169 = xor i64 %7168, 0
  %7170 = xor i64 %7169, %7166
  %7171 = xor i64 %7170, %7155
  %7172 = xor i64 %7171, %7156
  %7173 = mul i64 %7147, %7172
  %7174 = trunc i64 %7173 to i1
  %7175 = add i64 %1499, -522102089197199628
  %7176 = add i64 7181150901036851367, %1499
  %7177 = sub i64 %7176, 7703252990234050995
  %7178 = or i64 %391, 4228673622428724300
  %7179 = and i64 4228673622428724300, %391
  %7180 = xor i64 4228673622428724300, %391
  %7181 = or i64 %7179, %7180
  %7182 = xor i64 %7177, 8096026711670118965
  %7183 = xor i64 %7182, %7178
  %7184 = xor i64 %7183, %7181
  %7185 = xor i64 %7184, %7175
  %7186 = and i64 %53, 316026597947563612
  %7187 = xor i64 %53, -1
  %7188 = xor i64 316026597947563612, %7187
  %7189 = and i64 %7188, 316026597947563612
  %7190 = or i64 %772, -1769647561216484979
  %7191 = and i64 -1769647561216484979, %772
  %7192 = xor i64 -1769647561216484979, %772
  %7193 = or i64 %7191, %7192
  %7194 = xor i64 %7186, %7189
  %7195 = xor i64 %7194, %7190
  %7196 = xor i64 %7195, 0
  %7197 = xor i64 %7196, %7193
  %7198 = mul i64 %7185, %7197
  %7199 = trunc i64 %7198 to i32
  %7200 = add i64 %1515, -3547984730331819498
  %7201 = xor i64 -3547984730331819498, %1515
  %7202 = and i64 -3547984730331819498, %1515
  %7203 = mul i64 2, %7202
  %7204 = add i64 %7201, %7203
  %7205 = add i64 %776, 3177904627498654758
  %7206 = add i64 7450769485427748373, %776
  %7207 = add i64 %7206, -4272864857929093615
  %7208 = and i64 %1135, 8518223068935325818
  %7209 = xor i64 %1135, -1
  %7210 = or i64 -8518223068935325819, %7209
  %7211 = xor i64 %7210, -1
  %7212 = and i64 %7211, -1
  %7213 = xor i64 %7200, %7207
  %7214 = xor i64 %7213, %7205
  %7215 = xor i64 %7214, -7149689952102795441
  %7216 = xor i64 %7215, %7208
  %7217 = xor i64 %7216, %7212
  %7218 = xor i64 %7217, %7204
  %7219 = sext i32 %171 to i64
  %7220 = and i64 %7219, -4413551192835364580
  %7221 = xor i64 %7219, -1
  %7222 = or i64 4413551192835364579, %7221
  %7223 = xor i64 %7222, -1
  %7224 = and i64 %7223, -1
  %7225 = and i64 %1341, -4290971410271030317
  %7226 = xor i64 %1341, -1
  %7227 = xor i64 -4290971410271030317, %7226
  %7228 = and i64 %7227, -4290971410271030317
  %7229 = xor i64 %7228, %7225
  %7230 = xor i64 %7229, %7224
  %7231 = xor i64 %7230, %7220
  %7232 = xor i64 %7231, 0
  %7233 = mul i64 %7218, %7232
  %7234 = trunc i64 %7233 to i1
  %7235 = or i64 %446, -6773376026934347141
  %7236 = and i64 -6773376026934347141, %446
  %7237 = xor i64 -6773376026934347141, %446
  %7238 = or i64 %7236, %7237
  %7239 = or i64 %916, -778858767787080805
  %7240 = xor i64 %916, -1
  %7241 = and i64 -778858767787080805, %7240
  %7242 = add i64 %7241, %916
  %7243 = xor i64 %7239, %7242
  %7244 = xor i64 %7243, %7235
  %7245 = xor i64 %7244, -1517450858442032391
  %7246 = xor i64 %7245, %7238
  %7247 = and i64 %924, 287484376465419588
  %7248 = or i64 -287484376465419589, %924
  %7249 = sub i64 %7248, -287484376465419589
  %7250 = add i64 %1499, -4017141220405945321
  %7251 = add i64 6320262084960094812, %1499
  %7252 = sub i64 %7251, -8109340768343511483
  %7253 = add i64 %778, -8531629196197936624
  %7254 = sub i64 0, %778
  %7255 = sub i64 -8531629196197936624, %7254
  %7256 = xor i64 %7252, %7253
  %7257 = xor i64 %7256, %7250
  %7258 = xor i64 %7257, %7249
  %7259 = xor i64 %7258, 0
  %7260 = xor i64 %7259, %7247
  %7261 = xor i64 %7260, %7255
  %7262 = mul i64 %7246, %7261
  %7263 = trunc i64 %7262 to i1
  %7264 = and i64 %1497, 884731417315107332
  %7265 = or i64 -884731417315107333, %1497
  %7266 = sub i64 %7265, -884731417315107333
  %7267 = or i64 %1501, -8207456881072355051
  %7268 = and i64 -8207456881072355051, %1501
  %7269 = xor i64 -8207456881072355051, %1501
  %7270 = or i64 %7268, %7269
  %7271 = add i64 %1141, -1769837814091930620
  %7272 = sub i64 0, %1141
  %7273 = add i64 1769837814091930620, %7272
  %7274 = sub i64 0, %7273
  %7275 = xor i64 %7266, %7267
  %7276 = xor i64 %7275, %7270
  %7277 = xor i64 %7276, %7271
  %7278 = xor i64 %7277, -1962274530469732119
  %7279 = xor i64 %7278, %7264
  %7280 = xor i64 %7279, %7274
  %7281 = and i64 %1525, 1494869481749827445
  %7282 = xor i64 %1525, -1
  %7283 = or i64 -1494869481749827446, %7282
  %7284 = xor i64 %7283, -1
  %7285 = and i64 %7284, -1
  %7286 = add i64 %383, 203678348275003309
  %7287 = sub i64 0, %383
  %7288 = add i64 -203678348275003309, %7287
  %7289 = sub i64 0, %7288
  %7290 = and i64 %1586, 4618248599708654182
  %7291 = xor i64 %1586, -1
  %7292 = or i64 -4618248599708654183, %7291
  %7293 = xor i64 %7292, -1
  %7294 = and i64 %7293, -1
  %7295 = xor i64 %7281, %7289
  %7296 = xor i64 %7295, 0
  %7297 = xor i64 %7296, %7286
  %7298 = xor i64 %7297, %7285
  %7299 = xor i64 %7298, %7294
  %7300 = xor i64 %7299, %7290
  %7301 = mul i64 %7280, %7300
  %7302 = trunc i64 %7301 to i32
  %7303 = and i64 %1076, -7973347169935910644
  %7304 = xor i64 %1076, -1
  %7305 = or i64 7973347169935910643, %7304
  %7306 = xor i64 %7305, -1
  %7307 = and i64 %7306, -1
  %7308 = or i64 %444, 1912451711655180739
  %7309 = xor i64 %444, -1
  %7310 = and i64 1912451711655180739, %7309
  %7311 = add i64 %7310, %444
  %7312 = xor i64 %7307, 3566616903743149025
  %7313 = xor i64 %7312, %7303
  %7314 = xor i64 %7313, %7311
  %7315 = xor i64 %7314, %7308
  %7316 = sext i32 %0 to i64
  %7317 = or i64 %7316, -1044027667119474108
  %7318 = and i64 -1044027667119474108, %7316
  %7319 = xor i64 -1044027667119474108, %7316
  %7320 = or i64 %7318, %7319
  %7321 = and i64 %1655, -8757155950564757655
  %7322 = xor i64 %1655, -1
  %7323 = xor i64 -8757155950564757655, %7322
  %7324 = and i64 %7323, -8757155950564757655
  %7325 = or i64 %1228, -1607809721691974424
  %7326 = xor i64 %1228, -1
  %7327 = and i64 -1607809721691974424, %7326
  %7328 = add i64 %7327, %1228
  %7329 = xor i64 %7321, 0
  %7330 = xor i64 %7329, %7325
  %7331 = xor i64 %7330, %7320
  %7332 = xor i64 %7331, %7328
  %7333 = xor i64 %7332, %7324
  %7334 = xor i64 %7333, %7317
  %7335 = mul i64 %7315, %7334
  %7336 = trunc i64 %7335 to i1
  %7337 = and i64 %1649, 5257732359911679460
  %7338 = or i64 -5257732359911679461, %1649
  %7339 = sub i64 %7338, -5257732359911679461
  %7340 = add i64 %1129, -1024193401061968077
  %7341 = and i64 -1024193401061968077, %1129
  %7342 = or i64 -1024193401061968077, %1129
  %7343 = add i64 %7341, %7342
  %7344 = xor i64 %7339, %7340
  %7345 = xor i64 %7344, -7477559512197088923
  %7346 = xor i64 %7345, %7337
  %7347 = xor i64 %7346, %7343
  %7348 = add i64 %278, 1448823322794753851
  %7349 = add i64 6649542865354231417, %278
  %7350 = add i64 %7349, -5200719542559477566
  %7351 = or i64 %1294, 2285525936943395007
  %7352 = and i64 2285525936943395007, %1294
  %7353 = xor i64 2285525936943395007, %1294
  %7354 = or i64 %7352, %7353
  %7355 = xor i64 %7351, %7350
  %7356 = xor i64 %7355, %7348
  %7357 = xor i64 %7356, %7354
  %7358 = xor i64 %7357, 0
  %7359 = mul i64 %7347, %7358
  %7360 = trunc i64 %7359 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %7135, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %7174, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %7199, i32 0, i1* null, i1* null, i64 0, i1 %7234, i1* null, i1 %7263, i1 false, i1 false, i32 %7302, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %7336, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %7360, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %7361 = load i64, i64* %7135, align 8
  %7362 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable1252163288438473641, i32 0, i64 %7361
  store i8* bitcast (i1 (i1, i1*, i1*, i1, i1*, i1*, i1*, i32, i32, i1*)* @render.extracted.extracted to i8*), i8** %7362, align 8
  %.reload285 = load i8**, i8*** %.reg2mem284, align 8
  %7363 = load i8*, i8** %.reload285, align 8
  indirectbr i8* %7363, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"68":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %7364 = sub i64 78, 9
  %7365 = xor i1 %56, true
  %7366 = and i1 %7365, false
  %7367 = and i1 %56, true
  %7368 = or i1 %7366, %7367
  %7369 = xor i1 %57, true
  %7370 = and i1 %7369, false
  %7371 = and i1 %57, true
  %7372 = or i1 %7370, %7371
  %7373 = xor i1 %7368, %7372
  %7374 = xor i1 %56, true
  %7375 = xor i1 %57, true
  %7376 = or i1 %7374, %7375
  %7377 = and i64 %788, 3124624598839146079
  %7378 = xor i64 %788, -1
  %7379 = or i64 -3124624598839146080, %7378
  %7380 = xor i64 %7379, -1
  %7381 = and i64 %7380, -1
  %7382 = or i64 %175, 3101654818607942503
  %7383 = xor i64 %175, -1
  %7384 = and i64 3101654818607942503, %7383
  %7385 = add i64 %7384, %175
  %7386 = and i64 %1240, -2163798318758568181
  %7387 = xor i64 %1240, -1
  %7388 = or i64 2163798318758568180, %7387
  %7389 = xor i64 %7388, -1
  %7390 = and i64 %7389, -1
  %7391 = xor i64 %7390, -5908977989128706163
  %7392 = xor i64 %7391, %7381
  %7393 = xor i64 %7392, %7382
  %7394 = xor i64 %7393, %7386
  %7395 = xor i64 %7394, %7377
  %7396 = xor i64 %7395, %7385
  %7397 = or i64 %1509, -7287911711162926542
  %7398 = and i64 -7287911711162926542, %1509
  %7399 = xor i64 -7287911711162926542, %1509
  %7400 = or i64 %7398, %7399
  %7401 = and i64 %1450, -1574459835323845008
  %7402 = or i64 1574459835323845007, %1450
  %7403 = sub i64 %7402, 1574459835323845007
  %7404 = xor i64 %7403, %7400
  %7405 = xor i64 %7404, %7397
  %7406 = xor i64 %7405, %7401
  %7407 = xor i64 %7406, -2070685452403215547
  %7408 = mul i64 %7396, %7407
  %7409 = trunc i64 %7408 to i1
  %7410 = xor i1 %7376, %7409
  %7411 = and i1 %7410, true
  %7412 = or i1 %7373, %7411
  store i1 %7412, i1* %61, align 1
  %7413 = or i64 %790, -7467733655522806650
  %7414 = xor i64 %790, -1
  %7415 = and i64 -7467733655522806650, %7414
  %7416 = add i64 %7415, %790
  %7417 = sext i32 %72 to i64
  %7418 = and i64 %7417, -3803793544550220928
  %7419 = or i64 3803793544550220927, %7417
  %7420 = sub i64 %7419, 3803793544550220927
  %7421 = or i64 %1288, 5844757784266983302
  %7422 = xor i64 %1288, -1
  %7423 = and i64 5844757784266983302, %7422
  %7424 = add i64 %7423, %1288
  %7425 = xor i64 %7416, %7421
  %7426 = xor i64 %7425, %7418
  %7427 = xor i64 %7426, %7420
  %7428 = xor i64 %7427, %7424
  %7429 = xor i64 %7428, 8005428317807872431
  %7430 = xor i64 %7429, %7413
  %7431 = sext i32 %59 to i64
  %7432 = or i64 %7431, 1279452019512828076
  %7433 = xor i64 %7431, -1
  %7434 = and i64 1279452019512828076, %7433
  %7435 = add i64 %7434, %7431
  %7436 = add i64 %1074, 426208453020570017
  %7437 = sub i64 0, %1074
  %7438 = add i64 -426208453020570017, %7437
  %7439 = sub i64 0, %7438
  %7440 = xor i64 248369298100110211, %7439
  %7441 = xor i64 %7440, %7432
  %7442 = xor i64 %7441, %7435
  %7443 = xor i64 %7442, %7436
  %7444 = mul i64 %7430, %7443
  %7445 = add i64 %7444, 559986254427012775
  %7446 = and i64 %69, -4313652057766024822
  %7447 = or i64 4313652057766024821, %69
  %7448 = sub i64 %7447, 4313652057766024821
  %7449 = and i64 %778, 7980320900877416255
  %7450 = xor i64 %778, -1
  %7451 = xor i64 7980320900877416255, %7450
  %7452 = and i64 %7451, 7980320900877416255
  %7453 = add i64 %444, 992355083437352919
  %7454 = sub i64 0, %444
  %7455 = sub i64 992355083437352919, %7454
  %7456 = xor i64 -2530699880745566587, %7448
  %7457 = xor i64 %7456, %7446
  %7458 = xor i64 %7457, %7455
  %7459 = xor i64 %7458, %7449
  %7460 = xor i64 %7459, %7452
  %7461 = xor i64 %7460, %7453
  %7462 = or i64 %387, 7410478592201484168
  %7463 = and i64 7410478592201484168, %387
  %7464 = xor i64 7410478592201484168, %387
  %7465 = or i64 %7463, %7464
  %7466 = add i64 %395, -4941004329308892007
  %7467 = xor i64 -4941004329308892007, %395
  %7468 = and i64 -4941004329308892007, %395
  %7469 = mul i64 2, %7468
  %7470 = add i64 %7467, %7469
  %7471 = xor i64 %7466, -2877187022222472627
  %7472 = xor i64 %7471, %7470
  %7473 = xor i64 %7472, %7462
  %7474 = xor i64 %7473, %7465
  %7475 = mul i64 %7461, %7474
  %7476 = trunc i64 %7475 to i1
  %7477 = xor i1 %58, %7476
  store i1 %7477, i1* %.reg2mem682, align 1
  %.reload288 = load i8**, i8*** %.reg2mem287, align 8
  %7478 = load i8*, i8** %.reload288, align 8
  indirectbr i8* %7478, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl12:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload681 = load i64*, i64** %.reg2mem679, align 8
  %7479 = or i64 %91, -5808556847688416574
  %7480 = xor i64 %91, -1
  %7481 = and i64 -5808556847688416574, %7480
  %7482 = add i64 %7481, %91
  %7483 = add i64 %788, 3384406775761391621
  %7484 = sub i64 0, %788
  %7485 = sub i64 3384406775761391621, %7484
  %7486 = and i64 %1515, 7724123332863843313
  %7487 = xor i64 %1515, -1
  %7488 = xor i64 7724123332863843313, %7487
  %7489 = and i64 %7488, 7724123332863843313
  %7490 = xor i64 %7485, %7483
  %7491 = xor i64 %7490, %7482
  %7492 = xor i64 %7491, %7489
  %7493 = xor i64 %7492, -196680139442110785
  %7494 = xor i64 %7493, %7486
  %7495 = xor i64 %7494, %7479
  %7496 = or i64 %91, 8887387213010984173
  %7497 = and i64 8887387213010984173, %91
  %7498 = xor i64 8887387213010984173, %91
  %7499 = or i64 %7497, %7498
  %7500 = add i64 %220, -7604557519214184792
  %7501 = add i64 2058506755244829665, %220
  %7502 = add i64 %7501, 8783679799250537159
  %7503 = xor i64 -1257941245833510770, %7502
  %7504 = xor i64 %7503, %7500
  %7505 = xor i64 %7504, %7499
  %7506 = xor i64 %7505, %7496
  %7507 = mul i64 %7495, %7506
  store i64 %7507, i64* %.reload681, align 8
  %.reload680 = load i64*, i64** %.reg2mem679, align 8
  %7508 = call i8** @lk4155444237337359759(i64* %.reload680)
  %7509 = load i8*, i8** %7508, align 8
  %7510 = bitcast i8* %7509 to i1 (i1, i1*, i1*, i1, i1*, i1*, i1*, i32, i32, i1*)*
  %.reload683 = load i1, i1* %.reg2mem682, align 1
  %targetBlock13 = call i1 %7510(i1 %.reload683, i1* %62, i1* %63, i1 %58, i1* %64, i1* %65, i1* %66, i32 %59, i32 %60, i1* %67)
  %.reload291 = load i8**, i8*** %.reg2mem290, align 8
  %.reload294 = load i8**, i8*** %.reg2mem293, align 8
  %7511 = select i1 %targetBlock13, i8** %.reload291, i8** %.reload294
  %7512 = load i8*, i8** %7511, align 8
  indirectbr i8* %7512, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub14:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %68, align 1
  ret void

.exitStub715:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %68, align 1
  ret void

newFuncRoot16:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload300 = load i8**, i8*** %.reg2mem299, align 8
  %7513 = load i8*, i8** %.reload300, align 8
  indirectbr i8* %7513, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"73":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %7514 = srem i64 %69, 2
  %7515 = or i64 %776, 4738295213793660808
  %7516 = xor i64 %776, -1
  %7517 = and i64 4738295213793660808, %7516
  %7518 = add i64 %7517, %776
  %7519 = add i64 %379, 4791570835121952195
  %7520 = add i64 -6925434536628828844, %379
  %7521 = sub i64 %7520, 6729738701958770577
  %7522 = xor i64 %7519, 5710330755883021171
  %7523 = xor i64 %7522, %7515
  %7524 = xor i64 %7523, %7518
  %7525 = xor i64 %7524, %7521
  %7526 = and i64 %226, 6597577229116614564
  %7527 = xor i64 %226, -1
  %7528 = or i64 -6597577229116614565, %7527
  %7529 = xor i64 %7528, -1
  %7530 = and i64 %7529, -1
  %7531 = and i64 %1645, 4432677000055590298
  %7532 = xor i64 %1645, -1
  %7533 = xor i64 4432677000055590298, %7532
  %7534 = and i64 %7533, 4432677000055590298
  %7535 = xor i64 %7526, %7534
  %7536 = xor i64 %7535, %7530
  %7537 = xor i64 %7536, 0
  %7538 = xor i64 %7537, %7531
  %7539 = mul i64 %7525, %7538
  %7540 = icmp eq i64 %7514, %7539
  %.reload303 = load i8**, i8*** %.reg2mem302, align 8
  %.reload306 = load i8**, i8*** %.reg2mem305, align 8
  %7541 = select i1 %7540, i8** %.reload303, i8** %.reload306
  %7542 = load i8*, i8** %7541, align 8
  indirectbr i8* %7542, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub17:                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %70, align 1
  ret void

.exitStub1.exitStub:                              ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %70, align 1
  ret void

newFuncRoot18:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %7543 = alloca i64, align 8
  store i64* %7543, i64** %.reg2mem684, align 8
  %7544 = alloca i64, align 8
  %7545 = and i64 %1341, -4586668952976766716
  %7546 = or i64 4586668952976766715, %1341
  %7547 = sub i64 %7546, 4586668952976766715
  %7548 = and i64 %1236, -8602624968173966061
  %7549 = xor i64 %1236, -1
  %7550 = or i64 8602624968173966060, %7549
  %7551 = xor i64 %7550, -1
  %7552 = and i64 %7551, -1
  %7553 = and i64 %918, -987852817490767412
  %7554 = xor i64 %918, -1
  %7555 = xor i64 -987852817490767412, %7554
  %7556 = and i64 %7555, -987852817490767412
  %7557 = xor i64 %7552, %7545
  %7558 = xor i64 %7557, %7553
  %7559 = xor i64 %7558, %7556
  %7560 = xor i64 %7559, %7547
  %7561 = xor i64 %7560, -2971473318716135805
  %7562 = xor i64 %7561, %7548
  %7563 = sext i32 %50 to i64
  %7564 = or i64 %7563, 5993248367267305606
  %7565 = and i64 5993248367267305606, %7563
  %7566 = xor i64 5993248367267305606, %7563
  %7567 = or i64 %7565, %7566
  %7568 = and i64 %561, 3174945327039452011
  %7569 = xor i64 %561, -1
  %7570 = or i64 -3174945327039452012, %7569
  %7571 = xor i64 %7570, -1
  %7572 = and i64 %7571, -1
  %7573 = xor i64 %7568, 0
  %7574 = xor i64 %7573, %7564
  %7575 = xor i64 %7574, %7567
  %7576 = xor i64 %7575, %7572
  %7577 = mul i64 %7562, %7576
  %7578 = trunc i64 %7577 to i32
  %7579 = add i64 %288, 4232037129357721620
  %7580 = and i64 4232037129357721620, %288
  %7581 = or i64 4232037129357721620, %288
  %7582 = add i64 %7580, %7581
  %7583 = or i64 %794, -4724152230223878761
  %7584 = xor i64 %794, -1
  %7585 = and i64 %7584, -1989092278877721378
  %7586 = and i64 %794, 1989092278877721377
  %7587 = or i64 %7585, %7586
  %7588 = xor i64 6491133538915027273, %7587
  %7589 = xor i64 %794, -1
  %7590 = or i64 4724152230223878760, %7589
  %7591 = xor i64 %7590, -1
  %7592 = and i64 %7591, -1
  %7593 = or i64 %7588, %7592
  %7594 = or i64 %444, 4812720751253602024
  %7595 = and i64 4812720751253602024, %444
  %7596 = xor i64 4812720751253602024, %444
  %7597 = or i64 %7595, %7596
  %7598 = xor i64 %7597, %7583
  %7599 = xor i64 %7598, %7582
  %7600 = xor i64 %7599, %7594
  %7601 = xor i64 %7600, 3877107632099266991
  %7602 = xor i64 %7601, %7579
  %7603 = xor i64 %7602, %7593
  %7604 = and i64 %680, 598647927268658459
  %7605 = xor i64 %680, -1
  %7606 = or i64 -598647927268658460, %7605
  %7607 = xor i64 %7606, -1
  %7608 = and i64 %7607, -1
  %7609 = add i64 %177, -4478845013605958044
  %7610 = add i64 -8432538228448329963, %177
  %7611 = sub i64 %7610, -3953693214842371919
  %7612 = or i64 %1143, 4050318436976856481
  %7613 = xor i64 %1143, -1
  %7614 = and i64 4050318436976856481, %7613
  %7615 = add i64 %7614, %1143
  %7616 = xor i64 %7608, 0
  %7617 = xor i64 %7616, %7611
  %7618 = xor i64 %7617, %7604
  %7619 = xor i64 %7618, %7609
  %7620 = xor i64 %7619, %7612
  %7621 = xor i64 %7620, %7615
  %7622 = mul i64 %7603, %7621
  %7623 = trunc i64 %7622 to i32
  %7624 = and i64 %727, -5575193576791331457
  %7625 = xor i64 %727, -1
  %7626 = or i64 5575193576791331456, %7625
  %7627 = xor i64 %7626, -1
  %7628 = and i64 %7627, -1
  %7629 = and i64 %347, -8490362851806593609
  %7630 = xor i64 %347, -1
  %7631 = xor i64 -8490362851806593609, %7630
  %7632 = and i64 %7631, -8490362851806593609
  %7633 = xor i64 3974840678871533499, %7629
  %7634 = xor i64 %7633, %7628
  %7635 = xor i64 %7634, %7624
  %7636 = xor i64 %7635, %7632
  %7637 = add i64 %1653, -514554411916929808
  %7638 = add i64 661539255744468882, %1653
  %7639 = add i64 %7638, -1176093667661398690
  %7640 = add i64 %1396, 9051029937863783245
  %7641 = and i64 9051029937863783245, %1396
  %7642 = or i64 9051029937863783245, %1396
  %7643 = add i64 %7641, %7642
  %7644 = or i64 %790, 5418300152975401053
  %7645 = xor i64 %790, -1
  %7646 = and i64 %7645, 7582433749846654938
  %7647 = and i64 %790, -7582433749846654939
  %7648 = or i64 %7646, %7647
  %7649 = xor i64 2453226058858749831, %7648
  %7650 = xor i64 %790, -1
  %7651 = or i64 -5418300152975401054, %7650
  %7652 = xor i64 %7651, -1
  %7653 = and i64 %7652, -1
  %7654 = or i64 %7649, %7653
  %7655 = xor i64 %7637, %7643
  %7656 = xor i64 %7655, 0
  %7657 = xor i64 %7656, %7639
  %7658 = xor i64 %7657, %7640
  %7659 = xor i64 %7658, %7644
  %7660 = xor i64 %7659, %7654
  %7661 = mul i64 %7636, %7660
  %7662 = trunc i64 %7661 to i1
  %7663 = or i64 %1296, 6550494534241042716
  %7664 = and i64 6550494534241042716, %1296
  %7665 = xor i64 6550494534241042716, %1296
  %7666 = or i64 %7664, %7665
  %7667 = or i64 %1645, -9051178683619488919
  %7668 = xor i64 %1645, -1
  %7669 = and i64 -9051178683619488919, %7668
  %7670 = add i64 %7669, %1645
  %7671 = and i64 %784, -1802628633711289172
  %7672 = xor i64 %784, -1
  %7673 = xor i64 -1802628633711289172, %7672
  %7674 = and i64 %7673, -1802628633711289172
  %7675 = xor i64 %7670, 1973640714323383287
  %7676 = xor i64 %7675, %7674
  %7677 = xor i64 %7676, %7663
  %7678 = xor i64 %7677, %7666
  %7679 = xor i64 %7678, %7667
  %7680 = xor i64 %7679, %7671
  %7681 = or i64 %222, 2986393851584704383
  %7682 = xor i64 %222, -1
  %7683 = and i64 %7682, -3812247283714448643
  %7684 = and i64 %222, 3812247283714448642
  %7685 = or i64 %7683, %7684
  %7686 = xor i64 -2131926479714562686, %7685
  %7687 = xor i64 %222, -1
  %7688 = or i64 -2986393851584704384, %7687
  %7689 = xor i64 %7688, -1
  %7690 = and i64 %7689, -1
  %7691 = or i64 %7686, %7690
  %7692 = sext i32 %170 to i64
  %7693 = and i64 %7692, 4583636492808907037
  %7694 = or i64 -4583636492808907038, %7692
  %7695 = sub i64 %7694, -4583636492808907038
  %7696 = xor i64 %7693, %7681
  %7697 = xor i64 %7696, 0
  %7698 = xor i64 %7697, %7695
  %7699 = xor i64 %7698, %7691
  %7700 = mul i64 %7680, %7699
  %7701 = or i64 %918, 7453812459771901865
  %7702 = and i64 7453812459771901865, %918
  %7703 = xor i64 7453812459771901865, %918
  %7704 = or i64 %7702, %7703
  %7705 = or i64 %1651, -4356267661888351333
  %7706 = and i64 -4356267661888351333, %1651
  %7707 = xor i64 -4356267661888351333, %1651
  %7708 = or i64 %7706, %7707
  %7709 = add i64 %1523, -7571322781136479775
  %7710 = add i64 -1656498997245048682, %1523
  %7711 = add i64 %7710, -5914823783891431093
  %7712 = xor i64 %7709, -4485594685780116923
  %7713 = xor i64 %7712, %7708
  %7714 = xor i64 %7713, %7711
  %7715 = xor i64 %7714, %7705
  %7716 = xor i64 %7715, %7701
  %7717 = xor i64 %7716, %7704
  %7718 = or i64 %1284, 3163534891276441094
  %7719 = xor i64 %1284, -1
  %7720 = and i64 3163534891276441094, %7719
  %7721 = add i64 %7720, %1284
  %7722 = or i64 %452, -5476056292099605684
  %7723 = and i64 -5476056292099605684, %452
  %7724 = xor i64 -5476056292099605684, %452
  %7725 = or i64 %7723, %7724
  %7726 = add i64 %101, -4248181097803939593
  %7727 = sub i64 0, %101
  %7728 = sub i64 -4248181097803939593, %7727
  %7729 = xor i64 %7721, %7726
  %7730 = xor i64 %7729, %7718
  %7731 = xor i64 %7730, %7728
  %7732 = xor i64 %7731, %7722
  %7733 = xor i64 %7732, 0
  %7734 = xor i64 %7733, %7725
  %7735 = mul i64 %7717, %7734
  %7736 = add i64 %920, -4215259822636050963
  %7737 = and i64 -4215259822636050963, %920
  %7738 = or i64 -4215259822636050963, %920
  %7739 = add i64 %7737, %7738
  %7740 = or i64 %1135, 2873229431379475502
  %7741 = and i64 2873229431379475502, %1135
  %7742 = xor i64 2873229431379475502, %1135
  %7743 = or i64 %7741, %7742
  %7744 = xor i64 %7740, %7743
  %7745 = xor i64 %7744, %7736
  %7746 = xor i64 %7745, 5358763874183448807
  %7747 = xor i64 %7746, %7739
  %7748 = and i64 %998, -2755778062319997060
  %7749 = xor i64 %998, -1
  %7750 = xor i64 -2755778062319997060, %7749
  %7751 = and i64 %7750, -2755778062319997060
  %7752 = or i64 %1659, 5184185599332706997
  %7753 = and i64 5184185599332706997, %1659
  %7754 = xor i64 5184185599332706997, %1659
  %7755 = or i64 %7753, %7754
  %7756 = xor i64 0, %7752
  %7757 = xor i64 %7756, %7755
  %7758 = xor i64 %7757, %7748
  %7759 = xor i64 %7758, %7751
  %7760 = mul i64 %7747, %7759
  %7761 = trunc i64 %7760 to i32
  %7762 = add i64 %725, 495735760018720430
  %7763 = add i64 -6498688986548519950, %725
  %7764 = sub i64 %7763, -6994424746567240380
  %7765 = or i64 %866, -5835183016920500374
  %7766 = xor i64 %866, -1
  %7767 = and i64 -5835183016920500374, %7766
  %7768 = add i64 %7767, %866
  %7769 = add i64 %1139, -3864055664761639561
  %7770 = and i64 -3864055664761639561, %1139
  %7771 = or i64 -3864055664761639561, %1139
  %7772 = add i64 %7770, %7771
  %7773 = xor i64 %7762, %7765
  %7774 = xor i64 %7773, %7769
  %7775 = xor i64 %7774, %7768
  %7776 = xor i64 %7775, %7772
  %7777 = xor i64 %7776, %7764
  %7778 = xor i64 %7777, 360534674761199231
  %7779 = or i64 %1657, -8637129474679377184
  %7780 = and i64 -8637129474679377184, %1657
  %7781 = xor i64 -8637129474679377184, %1657
  %7782 = or i64 %7780, %7781
  %7783 = or i64 %1491, 5408337122163725829
  %7784 = xor i64 %1491, -1
  %7785 = and i64 %7784, 6151002243451264592
  %7786 = and i64 %1491, -6151002243451264593
  %7787 = or i64 %7785, %7786
  %7788 = xor i64 2185083673805293653, %7787
  %7789 = xor i64 %1491, -1
  %7790 = or i64 -5408337122163725830, %7789
  %7791 = xor i64 %7790, -1
  %7792 = and i64 %7791, -1
  %7793 = or i64 %7788, %7792
  %7794 = or i64 %922, 14698853052144263
  %7795 = xor i64 %922, -1
  %7796 = and i64 14698853052144263, %7795
  %7797 = add i64 %7796, %922
  %7798 = xor i64 %7793, %7779
  %7799 = xor i64 %7798, %7782
  %7800 = xor i64 %7799, %7794
  %7801 = xor i64 %7800, 0
  %7802 = xor i64 %7801, %7783
  %7803 = xor i64 %7802, %7797
  %7804 = mul i64 %7778, %7803
  %7805 = or i64 %1527, -5568542124618909826
  %7806 = xor i64 %1527, -1
  %7807 = and i64 %7806, -5149084604347519947
  %7808 = and i64 %1527, 5149084604347519946
  %7809 = or i64 %7807, %7808
  %7810 = xor i64 734744959074474827, %7809
  %7811 = xor i64 %1527, -1
  %7812 = or i64 5568542124618909825, %7811
  %7813 = xor i64 %7812, -1
  %7814 = and i64 %7813, -1
  %7815 = or i64 %7810, %7814
  %7816 = add i64 %222, 2149418139294305099
  %7817 = sub i64 0, %222
  %7818 = sub i64 2149418139294305099, %7817
  %7819 = xor i64 %7818, 4125867308614651903
  %7820 = xor i64 %7819, %7805
  %7821 = xor i64 %7820, %7816
  %7822 = xor i64 %7821, %7815
  %7823 = or i64 %725, -107526179371247568
  %7824 = xor i64 %725, -1
  %7825 = and i64 %7824, -1738903293388720420
  %7826 = and i64 %725, 1738903293388720419
  %7827 = or i64 %7825, %7826
  %7828 = xor i64 1828409945617034988, %7827
  %7829 = xor i64 %725, -1
  %7830 = or i64 107526179371247567, %7829
  %7831 = xor i64 %7830, -1
  %7832 = and i64 %7831, -1
  %7833 = or i64 %7828, %7832
  %7834 = add i64 %1133, -7892054888731140612
  %7835 = and i64 -7892054888731140612, %1133
  %7836 = or i64 -7892054888731140612, %1133
  %7837 = add i64 %7835, %7836
  %7838 = xor i64 %7837, %7833
  %7839 = xor i64 %7838, %7823
  %7840 = xor i64 %7839, %7834
  %7841 = xor i64 %7840, 0
  %7842 = mul i64 %7822, %7841
  %7843 = trunc i64 %7842 to i1
  %7844 = or i64 %175, 888015037151208093
  %7845 = xor i64 %175, -1
  %7846 = and i64 %7845, -7718979164135589722
  %7847 = and i64 %175, 7718979164135589721
  %7848 = or i64 %7846, %7847
  %7849 = xor i64 -7443762300175771077, %7848
  %7850 = xor i64 %175, -1
  %7851 = or i64 -888015037151208094, %7850
  %7852 = xor i64 %7851, -1
  %7853 = and i64 %7852, -1
  %7854 = or i64 %7849, %7853
  %7855 = and i64 %1450, -4490620495345681547
  %7856 = xor i64 %1450, -1
  %7857 = xor i64 -4490620495345681547, %7856
  %7858 = and i64 %7857, -4490620495345681547
  %7859 = or i64 %666, 1835318774152115312
  %7860 = xor i64 %666, -1
  %7861 = and i64 1835318774152115312, %7860
  %7862 = add i64 %7861, %666
  %7863 = xor i64 %7855, 6522976156728732939
  %7864 = xor i64 %7863, %7858
  %7865 = xor i64 %7864, %7862
  %7866 = xor i64 %7865, %7844
  %7867 = xor i64 %7866, %7854
  %7868 = xor i64 %7867, %7859
  %7869 = or i64 %345, 2285701637217779865
  %7870 = xor i64 %345, -1
  %7871 = and i64 %7870, -3098875310795103200
  %7872 = and i64 %345, 3098875310795103199
  %7873 = or i64 %7871, %7872
  %7874 = xor i64 -3799097629272349511, %7873
  %7875 = xor i64 %345, -1
  %7876 = or i64 -2285701637217779866, %7875
  %7877 = xor i64 %7876, -1
  %7878 = and i64 %7877, -1
  %7879 = or i64 %7874, %7878
  %7880 = or i64 %992, 6197053934217961110
  %7881 = xor i64 %992, -1
  %7882 = and i64 %7881, 4361891290929366780
  %7883 = and i64 %992, -4361891290929366781
  %7884 = or i64 %7882, %7883
  %7885 = xor i64 7676621670249437290, %7884
  %7886 = xor i64 %992, -1
  %7887 = or i64 -6197053934217961111, %7886
  %7888 = xor i64 %7887, -1
  %7889 = and i64 %7888, -1
  %7890 = or i64 %7885, %7889
  %7891 = or i64 %1541, 1765008159465463136
  %7892 = xor i64 %1541, -1
  %7893 = and i64 1765008159465463136, %7892
  %7894 = add i64 %7893, %1541
  %7895 = xor i64 %7890, 0
  %7896 = xor i64 %7895, %7879
  %7897 = xor i64 %7896, %7894
  %7898 = xor i64 %7897, %7869
  %7899 = xor i64 %7898, %7891
  %7900 = xor i64 %7899, %7880
  %7901 = mul i64 %7868, %7900
  %7902 = trunc i64 %7901 to i1
  %7903 = add i64 %1539, 1784658405278088454
  %7904 = sub i64 0, %1539
  %7905 = sub i64 1784658405278088454, %7904
  %7906 = and i64 %1242, -1370569226126025258
  %7907 = xor i64 %1242, -1
  %7908 = or i64 1370569226126025257, %7907
  %7909 = xor i64 %7908, -1
  %7910 = and i64 %7909, -1
  %7911 = and i64 %446, -5090868413030276089
  %7912 = xor i64 %446, -1
  %7913 = or i64 5090868413030276088, %7912
  %7914 = xor i64 %7913, -1
  %7915 = and i64 %7914, -1
  %7916 = xor i64 %7915, %7910
  %7917 = xor i64 %7916, %7906
  %7918 = xor i64 %7917, %7911
  %7919 = xor i64 %7918, %7903
  %7920 = xor i64 %7919, %7905
  %7921 = xor i64 %7920, -6393213407036861275
  %7922 = or i64 %288, 4514067297291221005
  %7923 = and i64 4514067297291221005, %288
  %7924 = xor i64 4514067297291221005, %288
  %7925 = or i64 %7923, %7924
  %7926 = and i64 %561, -4956841032499467480
  %7927 = xor i64 %561, -1
  %7928 = or i64 4956841032499467479, %7927
  %7929 = xor i64 %7928, -1
  %7930 = and i64 %7929, -1
  %7931 = add i64 %1074, -9040974499760309048
  %7932 = sub i64 0, %1074
  %7933 = add i64 9040974499760309048, %7932
  %7934 = sub i64 0, %7933
  %7935 = xor i64 %7934, %7930
  %7936 = xor i64 %7935, %7922
  %7937 = xor i64 %7936, %7925
  %7938 = xor i64 %7937, %7931
  %7939 = xor i64 %7938, %7926
  %7940 = xor i64 %7939, 0
  %7941 = mul i64 %7921, %7940
  %7942 = trunc i64 %7941 to i1
  %7943 = add i64 %794, -404991173368889200
  %7944 = and i64 -404991173368889200, %794
  %7945 = or i64 -404991173368889200, %794
  %7946 = add i64 %7944, %7945
  %7947 = add i64 %1302, -2405559433927405758
  %7948 = and i64 -2405559433927405758, %1302
  %7949 = or i64 -2405559433927405758, %1302
  %7950 = add i64 %7948, %7949
  %7951 = xor i64 %7943, %7946
  %7952 = xor i64 %7951, -1610593702891191641
  %7953 = xor i64 %7952, %7950
  %7954 = xor i64 %7953, %7947
  %7955 = and i64 %918, 5827535532399872899
  %7956 = xor i64 %918, -1
  %7957 = or i64 -5827535532399872900, %7956
  %7958 = xor i64 %7957, -1
  %7959 = and i64 %7958, -1
  %7960 = add i64 %686, -6317873759025839084
  %7961 = xor i64 -6317873759025839084, %686
  %7962 = and i64 -6317873759025839084, %686
  %7963 = mul i64 2, %7962
  %7964 = add i64 %7961, %7963
  %7965 = and i64 %234, 8346472889730149556
  %7966 = xor i64 %234, -1
  %7967 = or i64 -8346472889730149557, %7966
  %7968 = xor i64 %7967, -1
  %7969 = and i64 %7968, -1
  %7970 = xor i64 %7969, %7964
  %7971 = xor i64 %7970, %7960
  %7972 = xor i64 %7971, 0
  %7973 = xor i64 %7972, %7955
  %7974 = xor i64 %7973, %7959
  %7975 = xor i64 %7974, %7965
  %7976 = mul i64 %7954, %7975
  %7977 = trunc i64 %7976 to i1
  %7978 = or i64 %1410, 478603289159549904
  %7979 = and i64 478603289159549904, %1410
  %7980 = xor i64 478603289159549904, %1410
  %7981 = or i64 %7979, %7980
  %7982 = and i64 %1131, 1048501671884868551
  %7983 = xor i64 %1131, -1
  %7984 = or i64 -1048501671884868552, %7983
  %7985 = xor i64 %7984, -1
  %7986 = and i64 %7985, -1
  %7987 = add i64 %664, 3044161498188670592
  %7988 = add i64 -3210775181600187789, %664
  %7989 = sub i64 %7988, -6254936679788858381
  %7990 = xor i64 -1117565029751606227, %7989
  %7991 = xor i64 %7990, %7986
  %7992 = xor i64 %7991, %7981
  %7993 = xor i64 %7992, %7987
  %7994 = xor i64 %7993, %7982
  %7995 = xor i64 %7994, %7978
  %7996 = add i64 %1129, 3681713034357055098
  %7997 = xor i64 3681713034357055098, %1129
  %7998 = and i64 3681713034357055098, %1129
  %7999 = mul i64 2, %7998
  %8000 = add i64 %7997, %7999
  %8001 = and i64 %1539, -984389043719111305
  %8002 = xor i64 %1539, -1
  %8003 = or i64 984389043719111304, %8002
  %8004 = xor i64 %8003, -1
  %8005 = and i64 %8004, -1
  %8006 = and i64 %678, 2427887827923229157
  %8007 = or i64 -2427887827923229158, %678
  %8008 = sub i64 %8007, -2427887827923229158
  %8009 = xor i64 %7996, %8005
  %8010 = xor i64 %8009, %8008
  %8011 = xor i64 %8010, %8000
  %8012 = xor i64 %8011, %8001
  %8013 = xor i64 %8012, 0
  %8014 = xor i64 %8013, %8006
  %8015 = mul i64 %7995, %8014
  %8016 = trunc i64 %8015 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %7544, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %7578, i32 %7623, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %7662, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %7700, i64 %7735, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 %7761, i1* null, i1* null, i64 %7804, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %7843, i1 %7902, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %7942, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %7977, i1* null, i1* null, i1* null, i32 0, i32 %8016, i1* null, i1* null)
  %8017 = load i64, i64* %7544, align 8
  %8018 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable5267233781939814659, i32 0, i64 %8017
  store i8* bitcast (i1 (i64, i32, i1*)* @render.extracted.11.extracted to i8*), i8** %8018, align 8
  %.reload312 = load i8**, i8*** %.reg2mem311, align 8
  %8019 = load i8*, i8** %.reload312, align 8
  indirectbr i8* %8019, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"77":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8020 = add i64 %290, 9197222245278146352
  %8021 = xor i64 9197222245278146352, %290
  %8022 = and i64 9197222245278146352, %290
  %8023 = mul i64 2, %8022
  %8024 = add i64 %8021, %8023
  %8025 = and i64 %379, -4705045533006294849
  %8026 = xor i64 %379, -1
  %8027 = xor i64 -4705045533006294849, %8026
  %8028 = and i64 %8027, -4705045533006294849
  %8029 = add i64 %1238, 6714184570052504299
  %8030 = add i64 1479178150642696452, %1238
  %8031 = add i64 %8030, 5235006419409807847
  %8032 = xor i64 %8031, %8025
  %8033 = xor i64 %8032, 5099088147801066633
  %8034 = xor i64 %8033, %8028
  %8035 = xor i64 %8034, %8024
  %8036 = xor i64 %8035, %8020
  %8037 = xor i64 %8036, %8029
  %8038 = or i64 %957, 728433544331237572
  %8039 = xor i64 %957, -1
  %8040 = and i64 %8039, 7189149809820135593
  %8041 = and i64 %957, -7189149809820135594
  %8042 = or i64 %8040, %8041
  %8043 = xor i64 7628842525154011245, %8042
  %8044 = xor i64 %957, -1
  %8045 = or i64 -728433544331237573, %8044
  %8046 = xor i64 %8045, -1
  %8047 = and i64 %8046, -1
  %8048 = or i64 %8043, %8047
  %8049 = add i64 %1139, -1234148699041256235
  %8050 = add i64 -8180581973831079558, %1139
  %8051 = sub i64 %8050, -6946433274789823323
  %8052 = add i64 %1511, -7541692598752748305
  %8053 = sub i64 0, %1511
  %8054 = add i64 7541692598752748305, %8053
  %8055 = sub i64 0, %8054
  %8056 = xor i64 %8051, %8048
  %8057 = xor i64 %8056, %8052
  %8058 = xor i64 %8057, -2002473636668654778
  %8059 = xor i64 %8058, %8055
  %8060 = xor i64 %8059, %8038
  %8061 = xor i64 %8060, %8049
  %8062 = mul i64 %8037, %8061
  %8063 = sdiv i64 %8062, 47
  %8064 = sdiv i64 113, 57
  %8065 = sub i64 66, 43
  %8066 = srem i64 %71, 2
  store i64 %8066, i64* %.reg2mem687, align 8
  %.reload315 = load i8**, i8*** %.reg2mem314, align 8
  %8067 = load i8*, i8** %.reload315, align 8
  indirectbr i8* %8067, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl19:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload686 = load i64*, i64** %.reg2mem684, align 8
  %8068 = or i64 %236, -8604657031211822162
  %8069 = and i64 -8604657031211822162, %236
  %8070 = xor i64 -8604657031211822162, %236
  %8071 = or i64 %8069, %8070
  %8072 = add i64 %666, -3080389850450691249
  %8073 = sub i64 0, %666
  %8074 = sub i64 -3080389850450691249, %8073
  %8075 = and i64 %670, 6540909566065329833
  %8076 = xor i64 %670, -1
  %8077 = or i64 -6540909566065329834, %8076
  %8078 = xor i64 %8077, -1
  %8079 = and i64 %8078, -1
  %8080 = xor i64 %8079, 9191200967888164843
  %8081 = xor i64 %8080, %8075
  %8082 = xor i64 %8081, %8068
  %8083 = xor i64 %8082, %8074
  %8084 = xor i64 %8083, %8071
  %8085 = xor i64 %8084, %8072
  %8086 = or i64 %1588, -7210651709916095165
  %8087 = and i64 -7210651709916095165, %1588
  %8088 = xor i64 -7210651709916095165, %1588
  %8089 = or i64 %8087, %8088
  %8090 = sext i32 %49 to i64
  %8091 = add i64 %8090, -7699375408608148281
  %8092 = sub i64 0, %8090
  %8093 = add i64 7699375408608148281, %8092
  %8094 = sub i64 0, %8093
  %8095 = xor i64 %8091, %8089
  %8096 = xor i64 %8095, %8094
  %8097 = xor i64 %8096, %8086
  %8098 = xor i64 %8097, 8624326072520183638
  %8099 = mul i64 %8085, %8098
  store i64 %8099, i64* %.reload686, align 8
  %8100 = alloca i8**, align 8
  %.reload685 = load i64*, i64** %.reg2mem684, align 8
  %8101 = and i64 %684, 1578250364640075206
  %8102 = xor i64 %684, -1
  %8103 = xor i64 1578250364640075206, %8102
  %8104 = and i64 %8103, 1578250364640075206
  %8105 = and i64 %292, 6619014382054050376
  %8106 = xor i64 %292, -1
  %8107 = or i64 -6619014382054050377, %8106
  %8108 = xor i64 %8107, -1
  %8109 = and i64 %8108, -1
  %8110 = xor i64 %8104, %8105
  %8111 = xor i64 %8110, %8101
  %8112 = xor i64 %8111, 7311647828675631733
  %8113 = xor i64 %8112, %8109
  %8114 = or i64 %1402, 5532593427663540762
  %8115 = xor i64 %1402, -1
  %8116 = and i64 5532593427663540762, %8115
  %8117 = add i64 %8116, %1402
  %8118 = add i64 %1238, -7615723185547889775
  %8119 = sub i64 0, %1238
  %8120 = add i64 7615723185547889775, %8119
  %8121 = sub i64 0, %8120
  %8122 = and i64 %1651, 486687384018836558
  %8123 = or i64 -486687384018836559, %1651
  %8124 = sub i64 %8123, -486687384018836559
  %8125 = xor i64 %8118, %8114
  %8126 = xor i64 %8125, %8117
  %8127 = xor i64 %8126, 0
  %8128 = xor i64 %8127, %8124
  %8129 = xor i64 %8128, %8122
  %8130 = xor i64 %8129, %8121
  %8131 = mul i64 %8113, %8130
  %8132 = trunc i64 %8131 to i32
  %8133 = add i64 %234, 5189094124393006178
  %8134 = add i64 2542849155993041783, %234
  %8135 = add i64 %8134, 2646244968399964395
  %8136 = and i64 %230, -3961516365651465743
  %8137 = xor i64 %230, -1
  %8138 = or i64 3961516365651465742, %8137
  %8139 = xor i64 %8138, -1
  %8140 = and i64 %8139, -1
  %8141 = xor i64 %8133, %8140
  %8142 = xor i64 %8141, %8136
  %8143 = xor i64 %8142, %8135
  %8144 = xor i64 %8143, -8076389719017370191
  %8145 = add i64 %727, -3291647266278464091
  %8146 = sub i64 0, %727
  %8147 = add i64 3291647266278464091, %8146
  %8148 = sub i64 0, %8147
  %8149 = or i64 %1300, 6110732741062503832
  %8150 = xor i64 %1300, -1
  %8151 = and i64 %8150, -3129454406214196183
  %8152 = and i64 %1300, 3129454406214196182
  %8153 = or i64 %8151, %8152
  %8154 = xor i64 -9197372155494184527, %8153
  %8155 = xor i64 %1300, -1
  %8156 = or i64 -6110732741062503833, %8155
  %8157 = xor i64 %8156, -1
  %8158 = and i64 %8157, -1
  %8159 = or i64 %8154, %8158
  %8160 = and i64 %672, 8934607268246219345
  %8161 = xor i64 %672, -1
  %8162 = xor i64 8934607268246219345, %8161
  %8163 = and i64 %8162, 8934607268246219345
  %8164 = xor i64 %8163, %8159
  %8165 = xor i64 %8164, %8148
  %8166 = xor i64 %8165, %8149
  %8167 = xor i64 %8166, 0
  %8168 = xor i64 %8167, %8160
  %8169 = xor i64 %8168, %8145
  %8170 = mul i64 %8144, %8169
  %8171 = trunc i64 %8170 to i32
  %8172 = and i64 %1653, 8481827869332784592
  %8173 = xor i64 %1653, -1
  %8174 = xor i64 8481827869332784592, %8173
  %8175 = and i64 %8174, 8481827869332784592
  %8176 = add i64 %282, -6261020666230237711
  %8177 = and i64 -6261020666230237711, %282
  %8178 = or i64 -6261020666230237711, %282
  %8179 = add i64 %8177, %8178
  %8180 = xor i64 %8172, %8179
  %8181 = xor i64 %8180, 8104446680298191977
  %8182 = xor i64 %8181, %8176
  %8183 = xor i64 %8182, %8175
  %8184 = and i64 %666, 1171825079199255569
  %8185 = xor i64 %666, -1
  %8186 = xor i64 1171825079199255569, %8185
  %8187 = and i64 %8186, 1171825079199255569
  %8188 = and i64 %1527, 4074710342863728747
  %8189 = or i64 -4074710342863728748, %1527
  %8190 = sub i64 %8189, -4074710342863728748
  %8191 = or i64 %957, -8338217767965661644
  %8192 = and i64 -8338217767965661644, %957
  %8193 = xor i64 -8338217767965661644, %957
  %8194 = or i64 %8192, %8193
  %8195 = xor i64 %8190, %8184
  %8196 = xor i64 %8195, %8188
  %8197 = xor i64 %8196, %8187
  %8198 = xor i64 %8197, %8194
  %8199 = xor i64 %8198, %8191
  %8200 = xor i64 %8199, 0
  %8201 = mul i64 %8183, %8200
  %8202 = trunc i64 %8201 to i1
  %8203 = or i64 %232, 6423930227446109491
  %8204 = xor i64 %232, -1
  %8205 = and i64 6423930227446109491, %8204
  %8206 = add i64 %8205, %232
  %8207 = and i64 %53, -1254151927189242938
  %8208 = or i64 1254151927189242937, %53
  %8209 = sub i64 %8208, 1254151927189242937
  %8210 = and i64 %69, -5485465912903729308
  %8211 = xor i64 %69, -1
  %8212 = xor i64 -5485465912903729308, %8211
  %8213 = and i64 %8212, -5485465912903729308
  %8214 = xor i64 %8213, %8203
  %8215 = xor i64 %8214, 8344900011700597319
  %8216 = xor i64 %8215, %8207
  %8217 = xor i64 %8216, %8210
  %8218 = xor i64 %8217, %8206
  %8219 = xor i64 %8218, %8209
  %8220 = and i64 %772, -7746851232547450384
  %8221 = xor i64 %772, -1
  %8222 = or i64 7746851232547450383, %8221
  %8223 = xor i64 %8222, -1
  %8224 = and i64 %8223, -1
  %8225 = add i64 %551, -5975215313344383606
  %8226 = and i64 -5975215313344383606, %551
  %8227 = or i64 -5975215313344383606, %551
  %8228 = add i64 %8226, %8227
  %8229 = add i64 %924, 7487723919565544136
  %8230 = add i64 4635785374985451245, %924
  %8231 = add i64 %8230, 2851938544580092891
  %8232 = xor i64 %8228, %8220
  %8233 = xor i64 %8232, 0
  %8234 = xor i64 %8233, %8224
  %8235 = xor i64 %8234, %8229
  %8236 = xor i64 %8235, %8225
  %8237 = xor i64 %8236, %8231
  %8238 = mul i64 %8219, %8237
  %8239 = trunc i64 %8238 to i1
  %8240 = or i64 %284, 5473766126554469447
  %8241 = and i64 5473766126554469447, %284
  %8242 = xor i64 5473766126554469447, %284
  %8243 = or i64 %8241, %8242
  %8244 = or i64 %682, -8082586852051004984
  %8245 = xor i64 %682, -1
  %8246 = and i64 -8082586852051004984, %8245
  %8247 = add i64 %8246, %682
  %8248 = xor i64 2667423979691262201, %8243
  %8249 = xor i64 %8248, %8247
  %8250 = xor i64 %8249, %8240
  %8251 = xor i64 %8250, %8244
  %8252 = sext i32 %92 to i64
  %8253 = or i64 %8252, 1685319659642940373
  %8254 = xor i64 %8252, -1
  %8255 = and i64 %8254, 7115835645753638657
  %8256 = and i64 %8252, -7115835645753638658
  %8257 = or i64 %8255, %8256
  %8258 = xor i64 8476886777478173908, %8257
  %8259 = xor i64 %8252, -1
  %8260 = or i64 -1685319659642940374, %8259
  %8261 = xor i64 %8260, -1
  %8262 = and i64 %8261, -1
  %8263 = or i64 %8258, %8262
  %8264 = and i64 %992, -175232871294420273
  %8265 = xor i64 %992, -1
  %8266 = or i64 175232871294420272, %8265
  %8267 = xor i64 %8266, -1
  %8268 = and i64 %8267, -1
  %8269 = xor i64 0, %8263
  %8270 = xor i64 %8269, %8264
  %8271 = xor i64 %8270, %8268
  %8272 = xor i64 %8271, %8253
  %8273 = mul i64 %8251, %8272
  %8274 = trunc i64 %8273 to i1
  %8275 = and i64 %446, -4555412154786346254
  %8276 = xor i64 %446, -1
  %8277 = or i64 4555412154786346253, %8276
  %8278 = xor i64 %8277, -1
  %8279 = and i64 %8278, -1
  %8280 = or i64 %345, 1641446773533078448
  %8281 = xor i64 %345, -1
  %8282 = and i64 1641446773533078448, %8281
  %8283 = add i64 %8282, %345
  %8284 = and i64 %1183, 3347373190559692516
  %8285 = xor i64 %1183, -1
  %8286 = or i64 -3347373190559692517, %8285
  %8287 = xor i64 %8286, -1
  %8288 = and i64 %8287, -1
  %8289 = xor i64 %8288, %8283
  %8290 = xor i64 %8289, %8284
  %8291 = xor i64 %8290, %8279
  %8292 = xor i64 %8291, %8275
  %8293 = xor i64 %8292, -5598083581450936805
  %8294 = xor i64 %8293, %8280
  %8295 = or i64 %1493, 5429888654114519486
  %8296 = and i64 5429888654114519486, %1493
  %8297 = xor i64 5429888654114519486, %1493
  %8298 = or i64 %8296, %8297
  %8299 = or i64 %224, 5265474728705223683
  %8300 = xor i64 %224, -1
  %8301 = and i64 %8300, -1609548036553825765
  %8302 = and i64 %224, 1609548036553825764
  %8303 = or i64 %8301, %8302
  %8304 = xor i64 -6864886847994245608, %8303
  %8305 = xor i64 %224, -1
  %8306 = or i64 -5265474728705223684, %8305
  %8307 = xor i64 %8306, -1
  %8308 = and i64 %8307, -1
  %8309 = or i64 %8304, %8308
  %8310 = xor i64 %8309, %8299
  %8311 = xor i64 %8310, %8295
  %8312 = xor i64 %8311, %8298
  %8313 = xor i64 %8312, 0
  %8314 = mul i64 %8294, %8313
  %8315 = trunc i64 %8314 to i1
  call void @"9941920946239825184"(i32 2, i64* null, i8*** null, i64* null, i8*** null, i64* %.reload685, i8*** %8100, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %8132, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %8171, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %8202, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %8239, i1* null, i1 false, i1 false, i1 false, i1 %8274, i1 false, i1 false, i1 false, i1 %8315, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %8316 = load i8**, i8*** %8100, align 8
  %8317 = load i8*, i8** %8316, align 8
  %8318 = bitcast i8* %8317 to i1 (i64, i32, i1*)*
  %.reload688 = load i64, i64* %.reg2mem687, align 8
  %targetBlock20 = call i1 %8318(i64 %.reload688, i32 %72, i1* %73)
  %.reload318 = load i8**, i8*** %.reg2mem317, align 8
  %.reload321 = load i8**, i8*** %.reg2mem320, align 8
  %8319 = select i1 %targetBlock20, i8** %.reload318, i8** %.reload321
  %8320 = load i8*, i8** %8319, align 8
  indirectbr i8* %8320, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub21:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %74, align 1
  ret void

.exitStub122:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8321 = add i64 %656, 5224054217782722067
  %8322 = and i64 5224054217782722067, %656
  %8323 = or i64 5224054217782722067, %656
  %8324 = add i64 %8322, %8323
  %8325 = or i64 %910, 7222744544802407549
  %8326 = xor i64 %910, -1
  %8327 = and i64 7222744544802407549, %8326
  %8328 = add i64 %8327, %910
  %8329 = and i64 %1509, -2369836603642747219
  %8330 = or i64 2369836603642747218, %1509
  %8331 = sub i64 %8330, 2369836603642747218
  %8332 = xor i64 %8328, %8321
  %8333 = xor i64 %8332, %8329
  %8334 = xor i64 %8333, %8325
  %8335 = xor i64 %8334, -5898555259775065305
  %8336 = xor i64 %8335, %8331
  %8337 = xor i64 %8336, %8324
  %8338 = and i64 %1292, 4869706850758198562
  %8339 = or i64 -4869706850758198563, %1292
  %8340 = sub i64 %8339, -4869706850758198563
  %8341 = add i64 %1491, -330495792784438029
  %8342 = sub i64 0, %1491
  %8343 = add i64 330495792784438029, %8342
  %8344 = sub i64 0, %8343
  %8345 = xor i64 0, %8340
  %8346 = xor i64 %8345, %8338
  %8347 = xor i64 %8346, %8344
  %8348 = xor i64 %8347, %8341
  %8349 = mul i64 %8337, %8348
  %8350 = trunc i64 %8349 to i1
  store i1 %8350, i1* %74, align 1
  ret void

newFuncRoot23:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8351 = alloca i64, align 8
  store i64* %8351, i64** %.reg2mem689, align 8
  %8352 = alloca i64, align 8
  %8353 = add i64 %385, -3703911983479622172
  %8354 = sub i64 0, %385
  %8355 = add i64 3703911983479622172, %8354
  %8356 = sub i64 0, %8355
  %8357 = add i64 %727, -1105688569749827829
  %8358 = sub i64 0, %727
  %8359 = sub i64 -1105688569749827829, %8358
  %8360 = xor i64 %8353, %8359
  %8361 = xor i64 %8360, %8357
  %8362 = xor i64 %8361, %8356
  %8363 = xor i64 %8362, 3503726160653480689
  %8364 = or i64 %1537, 4570982847105236910
  %8365 = xor i64 %1537, -1
  %8366 = and i64 4570982847105236910, %8365
  %8367 = add i64 %8366, %1537
  %8368 = add i64 %1284, -4779842745166987826
  %8369 = sub i64 0, %1284
  %8370 = sub i64 -4779842745166987826, %8369
  %8371 = xor i64 0, %8367
  %8372 = xor i64 %8371, %8368
  %8373 = xor i64 %8372, %8364
  %8374 = xor i64 %8373, %8370
  %8375 = mul i64 %8363, %8374
  %8376 = trunc i64 %8375 to i1
  %8377 = add i64 %1586, 3322973974831677708
  %8378 = sub i64 0, %1586
  %8379 = sub i64 3322973974831677708, %8378
  %8380 = add i64 %1038, 1297908110283726596
  %8381 = and i64 1297908110283726596, %1038
  %8382 = or i64 1297908110283726596, %1038
  %8383 = add i64 %8381, %8382
  %8384 = add i64 %1292, -3865910758863096148
  %8385 = and i64 -3865910758863096148, %1292
  %8386 = or i64 -3865910758863096148, %1292
  %8387 = add i64 %8385, %8386
  %8388 = xor i64 %8387, %8379
  %8389 = xor i64 %8388, %8380
  %8390 = xor i64 %8389, %8377
  %8391 = xor i64 %8390, %8384
  %8392 = xor i64 %8391, 6301851912033193905
  %8393 = xor i64 %8392, %8383
  %8394 = sext i32 %0 to i64
  %8395 = or i64 %8394, 1023789575881397148
  %8396 = and i64 1023789575881397148, %8394
  %8397 = xor i64 1023789575881397148, %8394
  %8398 = or i64 %8396, %8397
  %8399 = add i64 %1410, 5428558229489135869
  %8400 = sub i64 0, %1410
  %8401 = add i64 -5428558229489135869, %8400
  %8402 = sub i64 0, %8401
  %8403 = or i64 %1527, 7068323482013640017
  %8404 = xor i64 %1527, -1
  %8405 = and i64 %8404, 6709959944336394234
  %8406 = and i64 %1527, -6709959944336394235
  %8407 = or i64 %8405, %8406
  %8408 = xor i64 4542209825995285163, %8407
  %8409 = xor i64 %1527, -1
  %8410 = or i64 -7068323482013640018, %8409
  %8411 = xor i64 %8410, -1
  %8412 = and i64 %8411, -1
  %8413 = or i64 %8408, %8412
  %8414 = xor i64 %8402, %8413
  %8415 = xor i64 %8414, %8398
  %8416 = xor i64 %8415, 0
  %8417 = xor i64 %8416, %8399
  %8418 = xor i64 %8417, %8403
  %8419 = xor i64 %8418, %8395
  %8420 = mul i64 %8393, %8419
  %8421 = trunc i64 %8420 to i32
  %8422 = add i64 %1143, -5773668057661917912
  %8423 = add i64 4720414678342368616, %1143
  %8424 = sub i64 %8423, -7952661337705265088
  %8425 = add i64 %1537, -2170558369680653437
  %8426 = sub i64 0, %1537
  %8427 = sub i64 -2170558369680653437, %8426
  %8428 = add i64 %1236, 1615179089894266142
  %8429 = add i64 -2433622619288757705, %1236
  %8430 = add i64 %8429, 4048801709183023847
  %8431 = xor i64 -9020553359256228189, %8422
  %8432 = xor i64 %8431, %8427
  %8433 = xor i64 %8432, %8428
  %8434 = xor i64 %8433, %8430
  %8435 = xor i64 %8434, %8424
  %8436 = xor i64 %8435, %8425
  %8437 = add i64 %1406, -2780528204067202430
  %8438 = sub i64 0, %1406
  %8439 = sub i64 -2780528204067202430, %8438
  %8440 = and i64 %662, 476791364319618897
  %8441 = or i64 -476791364319618898, %662
  %8442 = sub i64 %8441, -476791364319618898
  %8443 = xor i64 %8440, %8437
  %8444 = xor i64 %8443, %8439
  %8445 = xor i64 %8444, 0
  %8446 = xor i64 %8445, %8442
  %8447 = mul i64 %8436, %8446
  %8448 = trunc i64 %8447 to i1
  %8449 = or i64 %1491, -2964109787583039352
  %8450 = xor i64 %1491, -1
  %8451 = and i64 %8450, -7119394753254866321
  %8452 = and i64 %1491, 7119394753254866320
  %8453 = or i64 %8451, %8452
  %8454 = xor i64 5471743716428118759, %8453
  %8455 = xor i64 %1491, -1
  %8456 = or i64 2964109787583039351, %8455
  %8457 = xor i64 %8456, -1
  %8458 = and i64 %8457, -1
  %8459 = or i64 %8454, %8458
  %8460 = and i64 %1234, -2389650489250386404
  %8461 = or i64 2389650489250386403, %1234
  %8462 = sub i64 %8461, 2389650489250386403
  %8463 = and i64 %452, -2043704851885170746
  %8464 = or i64 2043704851885170745, %452
  %8465 = sub i64 %8464, 2043704851885170745
  %8466 = xor i64 %8460, 585384671101613313
  %8467 = xor i64 %8466, %8449
  %8468 = xor i64 %8467, %8462
  %8469 = xor i64 %8468, %8465
  %8470 = xor i64 %8469, %8463
  %8471 = xor i64 %8470, %8459
  %8472 = and i64 %998, -3112432892484365498
  %8473 = xor i64 %998, -1
  %8474 = xor i64 -3112432892484365498, %8473
  %8475 = and i64 %8474, -3112432892484365498
  %8476 = add i64 %1539, 2903660086334090188
  %8477 = xor i64 2903660086334090188, %1539
  %8478 = and i64 2903660086334090188, %1539
  %8479 = mul i64 2, %8478
  %8480 = add i64 %8477, %8479
  %8481 = xor i64 0, %8480
  %8482 = xor i64 %8481, %8472
  %8483 = xor i64 %8482, %8476
  %8484 = xor i64 %8483, %8475
  %8485 = mul i64 %8471, %8484
  %8486 = add i64 %282, 5973605117932810088
  %8487 = xor i64 5973605117932810088, %282
  %8488 = and i64 5973605117932810088, %282
  %8489 = mul i64 2, %8488
  %8490 = add i64 %8487, %8489
  %8491 = and i64 %1038, -8814027231560991257
  %8492 = xor i64 %1038, -1
  %8493 = or i64 8814027231560991256, %8492
  %8494 = xor i64 %8493, -1
  %8495 = and i64 %8494, -1
  %8496 = xor i64 -8045060650636525059, %8486
  %8497 = xor i64 %8496, %8490
  %8498 = xor i64 %8497, %8495
  %8499 = xor i64 %8498, %8491
  %8500 = or i64 %1410, 4899320737491811492
  %8501 = and i64 4899320737491811492, %1410
  %8502 = xor i64 4899320737491811492, %1410
  %8503 = or i64 %8501, %8502
  %8504 = or i64 %1343, 6189447760784412274
  %8505 = xor i64 %1343, -1
  %8506 = and i64 6189447760784412274, %8505
  %8507 = add i64 %8506, %1343
  %8508 = xor i64 0, %8500
  %8509 = xor i64 %8508, %8503
  %8510 = xor i64 %8509, %8504
  %8511 = xor i64 %8510, %8507
  %8512 = mul i64 %8499, %8511
  %8513 = add i64 %1408, -748730275077206800
  %8514 = sub i64 0, %1408
  %8515 = sub i64 -748730275077206800, %8514
  %8516 = or i64 %494, -8317699423750587613
  %8517 = and i64 -8317699423750587613, %494
  %8518 = xor i64 -8317699423750587613, %494
  %8519 = or i64 %8517, %8518
  %8520 = and i64 %288, -5405851137265386667
  %8521 = xor i64 %288, -1
  %8522 = xor i64 -5405851137265386667, %8521
  %8523 = and i64 %8522, -5405851137265386667
  %8524 = xor i64 %8523, %8516
  %8525 = xor i64 %8524, %8519
  %8526 = xor i64 %8525, %8515
  %8527 = xor i64 %8526, %8513
  %8528 = xor i64 %8527, -6961202217207051901
  %8529 = xor i64 %8528, %8520
  %8530 = sext i32 %72 to i64
  %8531 = add i64 %8530, -6718326442329024045
  %8532 = xor i64 -6718326442329024045, %8530
  %8533 = and i64 -6718326442329024045, %8530
  %8534 = mul i64 2, %8533
  %8535 = add i64 %8532, %8534
  %8536 = and i64 %910, 5664792861917687506
  %8537 = or i64 -5664792861917687507, %910
  %8538 = sub i64 %8537, -5664792861917687507
  %8539 = xor i64 %8531, %8536
  %8540 = xor i64 %8539, %8538
  %8541 = xor i64 %8540, %8535
  %8542 = xor i64 %8541, 0
  %8543 = mul i64 %8529, %8542
  %8544 = trunc i64 %8543 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %8352, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %8376, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %8421, i1* null, i1* null, i64 0, i1 %8448, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 %8485, i64 %8512, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %8544, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %8545 = load i64, i64* %8352, align 8
  %8546 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable7736138858792283958, i32 0, i64 %8545
  store i8* bitcast (i1 (i64, i1)* @render.extracted.9.extracted to i8*), i8** %8546, align 8
  %.reload327 = load i8**, i8*** %.reg2mem326, align 8
  %8547 = load i8*, i8** %.reload327, align 8
  indirectbr i8* %8547, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"82":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8548 = getelementptr inbounds i8, i8* %75, i64 %76
  %8549 = load i8, i8* %8548, align 1, !tbaa !16
  %8550 = sext i8 %8549 to i32
  store i32 %8550, i32* %78, align 4
  %8551 = or i64 %175, 1322987311231763887
  %8552 = and i64 1322987311231763887, %175
  %8553 = xor i64 1322987311231763887, %175
  %8554 = or i64 %8552, %8553
  %8555 = or i64 %660, 7142827925599418812
  %8556 = and i64 7142827925599418812, %660
  %8557 = xor i64 7142827925599418812, %660
  %8558 = or i64 %8556, %8557
  %8559 = xor i64 %8554, %8555
  %8560 = xor i64 %8559, 8274654680969118997
  %8561 = xor i64 %8560, %8558
  %8562 = xor i64 %8561, %8551
  %8563 = and i64 %1535, 6769609838469311791
  %8564 = or i64 -6769609838469311792, %1535
  %8565 = sub i64 %8564, -6769609838469311792
  %8566 = or i64 %1499, -8339624488890699215
  %8567 = xor i64 %1499, -1
  %8568 = and i64 %8567, 41624331753396651
  %8569 = and i64 %1499, -41624331753396652
  %8570 = or i64 %8568, %8569
  %8571 = xor i64 -8300043207582291046, %8570
  %8572 = xor i64 %1499, -1
  %8573 = or i64 8339624488890699214, %8572
  %8574 = xor i64 %8573, -1
  %8575 = and i64 %8574, -1
  %8576 = or i64 %8571, %8575
  %8577 = xor i64 %8576, %8565
  %8578 = xor i64 %8577, %8563
  %8579 = xor i64 %8578, %8566
  %8580 = xor i64 %8579, 5961640319439741501
  %8581 = mul i64 %8562, %8580
  %8582 = and i64 %77, %8581
  store i64 %8582, i64* %79, align 8
  %8583 = icmp eq i64 %8582, 0
  store i1 %8583, i1* %.reg2mem692, align 1
  %8584 = mul i64 %77, %77
  %8585 = xor i64 %8584, %77
  %8586 = and i64 %8584, %77
  %8587 = mul i64 2, %8586
  %8588 = add i64 %8585, %8587
  store i64 %8588, i64* %80, align 8
  %8589 = mul i64 %8588, 3
  store i64 %8589, i64* %.reg2mem694, align 8
  %.reload330 = load i8**, i8*** %.reg2mem329, align 8
  %8590 = load i8*, i8** %.reload330, align 8
  indirectbr i8* %8590, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl24:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload691 = load i64*, i64** %.reg2mem689, align 8
  store i64 1996855465712537074, i64* %.reload691, align 8
  %.reload690 = load i64*, i64** %.reg2mem689, align 8
  %8591 = call i8** @lk7634065167745351151(i64* %.reload690)
  %8592 = load i8*, i8** %8591, align 8
  %8593 = bitcast i8* %8592 to i1 (i64, i1)*
  %.reload693 = load i1, i1* %.reg2mem692, align 1
  %.reload695 = load i64, i64* %.reg2mem694, align 8
  %targetBlock25 = call i1 %8593(i64 %.reload695, i1 %.reload693)
  %.reload333 = load i8**, i8*** %.reg2mem332, align 8
  %.reload336 = load i8**, i8*** %.reg2mem335, align 8
  %8594 = select i1 %targetBlock25, i8** %.reload333, i8** %.reload336
  %8595 = load i8*, i8** %8594, align 8
  indirectbr i8* %8595, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub26:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8596 = add i64 %1137, 8548262119393531133
  %8597 = xor i64 8548262119393531133, %1137
  %8598 = and i64 8548262119393531133, %1137
  %8599 = mul i64 2, %8598
  %8600 = add i64 %8597, %8599
  %8601 = add i64 %660, -5158173132926316656
  %8602 = and i64 -5158173132926316656, %660
  %8603 = or i64 -5158173132926316656, %660
  %8604 = add i64 %8602, %8603
  %8605 = and i64 %1497, -577678503283931923
  %8606 = xor i64 %1497, -1
  %8607 = xor i64 -577678503283931923, %8606
  %8608 = and i64 %8607, -577678503283931923
  %8609 = xor i64 %8600, %8608
  %8610 = xor i64 %8609, %8604
  %8611 = xor i64 %8610, 2241269251929380189
  %8612 = xor i64 %8611, %8601
  %8613 = xor i64 %8612, %8605
  %8614 = xor i64 %8613, %8596
  %8615 = or i64 %658, 3788266260299649749
  %8616 = and i64 3788266260299649749, %658
  %8617 = xor i64 3788266260299649749, %658
  %8618 = or i64 %8616, %8617
  %8619 = or i64 %553, -3182566468395274734
  %8620 = xor i64 %553, -1
  %8621 = and i64 %8620, 4883932134600858516
  %8622 = and i64 %553, -4883932134600858517
  %8623 = or i64 %8621, %8622
  %8624 = xor i64 -8065253352230537850, %8623
  %8625 = xor i64 %553, -1
  %8626 = or i64 3182566468395274733, %8625
  %8627 = xor i64 %8626, -1
  %8628 = and i64 %8627, -1
  %8629 = or i64 %8624, %8628
  %8630 = xor i64 %8618, %8619
  %8631 = xor i64 %8630, -1383879356177357067
  %8632 = xor i64 %8631, %8615
  %8633 = xor i64 %8632, %8629
  %8634 = mul i64 %8614, %8633
  %8635 = trunc i64 %8634 to i1
  store i1 %8635, i1* %81, align 1
  ret void

.exitStub3:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8636 = add i64 %1143, 1931099237710279016
  %8637 = xor i64 1931099237710279016, %1143
  %8638 = and i64 1931099237710279016, %1143
  %8639 = mul i64 2, %8638
  %8640 = add i64 %8637, %8639
  %8641 = add i64 %1499, 7008119450116161993
  %8642 = add i64 -8380693516983975416, %1499
  %8643 = add i64 %8642, -3057931106609414207
  %8644 = xor i64 %8643, %8641
  %8645 = xor i64 %8644, 2828351865157422423
  %8646 = xor i64 %8645, %8636
  %8647 = xor i64 %8646, %8640
  %8648 = or i64 %391, -1578401118869825917
  %8649 = xor i64 %391, -1
  %8650 = and i64 -1578401118869825917, %8649
  %8651 = add i64 %8650, %391
  %8652 = add i64 %288, -5720265010212256245
  %8653 = sub i64 0, %288
  %8654 = add i64 5720265010212256245, %8653
  %8655 = sub i64 0, %8654
  %8656 = xor i64 %8655, %8648
  %8657 = xor i64 %8656, 0
  %8658 = xor i64 %8657, %8652
  %8659 = xor i64 %8658, %8651
  %8660 = mul i64 %8647, %8659
  %8661 = trunc i64 %8660 to i1
  store i1 %8661, i1* %81, align 1
  ret void

"86":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %8662 = alloca i64, align 8
  store i64* %8662, i64** %.reg2mem696, align 8
  %8663 = and i64 %1645, -5105220714043047539
  %8664 = xor i64 %1645, -1
  %8665 = or i64 5105220714043047538, %8664
  %8666 = xor i64 %8665, -1
  %8667 = and i64 %8666, -1
  %8668 = add i64 %868, 2196364428548580455
  %8669 = add i64 -8575068282688479036, %868
  %8670 = add i64 %8669, -7675311362472492125
  %8671 = xor i64 -4831862098963006561, %8668
  %8672 = xor i64 %8671, %8663
  %8673 = xor i64 %8672, %8670
  %8674 = xor i64 %8673, %8667
  %8675 = add i64 %545, -5641565059823734256
  %8676 = and i64 -5641565059823734256, %545
  %8677 = or i64 -5641565059823734256, %545
  %8678 = add i64 %8676, %8677
  %8679 = or i64 %547, 6625177049245692278
  %8680 = xor i64 %547, -1
  %8681 = and i64 %8680, 1331210172706441173
  %8682 = and i64 %547, -1331210172706441174
  %8683 = or i64 %8681, %8682
  %8684 = xor i64 5298542092917798563, %8683
  %8685 = xor i64 %547, -1
  %8686 = or i64 -6625177049245692279, %8685
  %8687 = xor i64 %8686, -1
  %8688 = and i64 %8687, -1
  %8689 = or i64 %8684, %8688
  %8690 = xor i64 %8679, %8689
  %8691 = xor i64 %8690, %8678
  %8692 = xor i64 %8691, -8448262387911925665
  %8693 = xor i64 %8692, %8675
  %8694 = mul i64 %8674, %8693
  %8695 = trunc i64 %8694 to i32
  %8696 = alloca i64, i32 %8695, align 8
  %8697 = or i64 %1499, -3403006234628838352
  %8698 = xor i64 %1499, -1
  %8699 = and i64 -3403006234628838352, %8698
  %8700 = add i64 %8699, %1499
  %8701 = and i64 %831, -8826369945986035028
  %8702 = or i64 8826369945986035027, %831
  %8703 = sub i64 %8702, 8826369945986035027
  %8704 = add i64 %918, -7181304595133353132
  %8705 = sub i64 0, %918
  %8706 = add i64 7181304595133353132, %8705
  %8707 = sub i64 0, %8706
  %8708 = xor i64 %8700, %8697
  %8709 = xor i64 %8708, %8703
  %8710 = xor i64 %8709, -5050206580904369473
  %8711 = xor i64 %8710, %8701
  %8712 = xor i64 %8711, %8704
  %8713 = xor i64 %8712, %8707
  %8714 = and i64 %1139, 4701623198528279830
  %8715 = or i64 -4701623198528279831, %1139
  %8716 = sub i64 %8715, -4701623198528279831
  %8717 = or i64 %551, 6590344514956813423
  %8718 = and i64 6590344514956813423, %551
  %8719 = xor i64 6590344514956813423, %551
  %8720 = or i64 %8718, %8719
  %8721 = xor i64 %8720, %8716
  %8722 = xor i64 %8721, %8717
  %8723 = xor i64 %8722, -5076539190032178554
  %8724 = xor i64 %8723, %8714
  %8725 = mul i64 %8713, %8724
  %8726 = and i64 %76, 2597672530723921761
  %8727 = xor i64 %76, -1
  %8728 = xor i64 2597672530723921761, %8727
  %8729 = and i64 %8728, 2597672530723921761
  %8730 = or i64 %1537, 2329540080770072564
  %8731 = xor i64 %1537, -1
  %8732 = and i64 %8731, -1545929722236820799
  %8733 = and i64 %1537, 1545929722236820798
  %8734 = or i64 %8732, %8733
  %8735 = xor i64 -3828075867405378251, %8734
  %8736 = xor i64 %1537, -1
  %8737 = or i64 -2329540080770072565, %8736
  %8738 = xor i64 %8737, -1
  %8739 = and i64 %8738, -1
  %8740 = or i64 %8735, %8739
  %8741 = and i64 %1408, -5217340858845266539
  %8742 = xor i64 %1408, -1
  %8743 = xor i64 -5217340858845266539, %8742
  %8744 = and i64 %8743, -5217340858845266539
  %8745 = xor i64 7594327777429989909, %8744
  %8746 = xor i64 %8745, %8726
  %8747 = xor i64 %8746, %8729
  %8748 = xor i64 %8747, %8741
  %8749 = xor i64 %8748, %8730
  %8750 = xor i64 %8749, %8740
  %8751 = sext i32 %50 to i64
  %8752 = and i64 %8751, -2106018592809840003
  %8753 = or i64 2106018592809840002, %8751
  %8754 = sub i64 %8753, 2106018592809840002
  %8755 = add i64 %1501, 8043701032220224802
  %8756 = and i64 8043701032220224802, %1501
  %8757 = or i64 8043701032220224802, %1501
  %8758 = add i64 %8756, %8757
  %8759 = sext i32 %60 to i64
  %8760 = or i64 %8759, -6189420862296023843
  %8761 = xor i64 %8759, -1
  %8762 = and i64 %8761, 5722847169498928839
  %8763 = and i64 %8759, -5722847169498928840
  %8764 = or i64 %8762, %8763
  %8765 = xor i64 -1913640980517402086, %8764
  %8766 = xor i64 %8759, -1
  %8767 = or i64 6189420862296023842, %8766
  %8768 = xor i64 %8767, -1
  %8769 = and i64 %8768, -1
  %8770 = or i64 %8765, %8769
  %8771 = xor i64 %8754, %8760
  %8772 = xor i64 %8771, %8752
  %8773 = xor i64 %8772, %8758
  %8774 = xor i64 %8773, %8770
  %8775 = xor i64 %8774, %8755
  %8776 = xor i64 %8775, 0
  %8777 = mul i64 %8750, %8776
  %8778 = trunc i64 %8777 to i1
  %8779 = and i64 %1284, 6059745538158152195
  %8780 = or i64 -6059745538158152196, %1284
  %8781 = sub i64 %8780, -6059745538158152196
  %8782 = add i64 %778, 6371677783766939370
  %8783 = add i64 7673524664015343755, %778
  %8784 = sub i64 %8783, 1301846880248404385
  %8785 = xor i64 %8784, %8782
  %8786 = xor i64 %8785, %8781
  %8787 = xor i64 %8786, 265685351467436693
  %8788 = xor i64 %8787, %8779
  %8789 = add i64 %1531, 6737663142479020903
  %8790 = add i64 3418159928153554325, %1531
  %8791 = sub i64 %8790, -3319503214325466578
  %8792 = and i64 %664, 1078748657749395014
  %8793 = xor i64 %664, -1
  %8794 = or i64 -1078748657749395015, %8793
  %8795 = xor i64 %8794, -1
  %8796 = and i64 %8795, -1
  %8797 = or i64 %1541, 642653501370759886
  %8798 = and i64 642653501370759886, %1541
  %8799 = xor i64 642653501370759886, %1541
  %8800 = or i64 %8798, %8799
  %8801 = xor i64 %8791, %8797
  %8802 = xor i64 %8801, %8792
  %8803 = xor i64 %8802, 0
  %8804 = xor i64 %8803, %8800
  %8805 = xor i64 %8804, %8796
  %8806 = xor i64 %8805, %8789
  %8807 = mul i64 %8788, %8806
  %8808 = trunc i64 %8807 to i32
  %8809 = and i64 %222, 6641525710689638837
  %8810 = xor i64 %222, -1
  %8811 = xor i64 6641525710689638837, %8810
  %8812 = and i64 %8811, 6641525710689638837
  %8813 = add i64 %543, -7163732210169317341
  %8814 = add i64 6213389290858441100, %543
  %8815 = sub i64 %8814, -5069622572681793175
  %8816 = xor i64 -5942476847944484209, %8812
  %8817 = xor i64 %8816, %8815
  %8818 = xor i64 %8817, %8813
  %8819 = xor i64 %8818, %8809
  %8820 = or i64 %282, 6465620475166171441
  %8821 = and i64 6465620475166171441, %282
  %8822 = xor i64 6465620475166171441, %282
  %8823 = or i64 %8821, %8822
  %8824 = or i64 %1501, 7917855010485886994
  %8825 = xor i64 %1501, -1
  %8826 = and i64 %8825, -3432848134961726880
  %8827 = and i64 %1501, 3432848134961726879
  %8828 = or i64 %8826, %8827
  %8829 = xor i64 -4774433662203553166, %8828
  %8830 = xor i64 %1501, -1
  %8831 = or i64 -7917855010485886995, %8830
  %8832 = xor i64 %8831, -1
  %8833 = and i64 %8832, -1
  %8834 = or i64 %8829, %8833
  %8835 = and i64 %924, 6605284343775011255
  %8836 = xor i64 %924, -1
  %8837 = or i64 -6605284343775011256, %8836
  %8838 = xor i64 %8837, -1
  %8839 = and i64 %8838, -1
  %8840 = xor i64 %8835, %8820
  %8841 = xor i64 %8840, 0
  %8842 = xor i64 %8841, %8834
  %8843 = xor i64 %8842, %8824
  %8844 = xor i64 %8843, %8839
  %8845 = xor i64 %8844, %8823
  %8846 = mul i64 %8819, %8845
  %8847 = add i64 %1141, -5956917963366753012
  %8848 = and i64 -5956917963366753012, %1141
  %8849 = or i64 -5956917963366753012, %1141
  %8850 = add i64 %8848, %8849
  %8851 = add i64 %1296, -6869113107973623684
  %8852 = xor i64 -6869113107973623684, %1296
  %8853 = and i64 -6869113107973623684, %1296
  %8854 = mul i64 2, %8853
  %8855 = add i64 %8852, %8854
  %8856 = xor i64 %8851, %8855
  %8857 = xor i64 %8856, %8847
  %8858 = xor i64 %8857, -4459564670775607925
  %8859 = xor i64 %8858, %8850
  %8860 = or i64 %177, 5940178154597378229
  %8861 = xor i64 %177, -1
  %8862 = and i64 %8861, 1546027840561299959
  %8863 = and i64 %177, -1546027840561299960
  %8864 = or i64 %8862, %8863
  %8865 = xor i64 5123786505928223042, %8864
  %8866 = xor i64 %177, -1
  %8867 = or i64 -5940178154597378230, %8866
  %8868 = xor i64 %8867, -1
  %8869 = and i64 %8868, -1
  %8870 = or i64 %8865, %8869
  %8871 = or i64 %918, -9182164147941791400
  %8872 = xor i64 %918, -1
  %8873 = and i64 %8872, -1787159210404457831
  %8874 = and i64 %918, 1787159210404457830
  %8875 = or i64 %8873, %8874
  %8876 = xor i64 7467208365179698113, %8875
  %8877 = xor i64 %918, -1
  %8878 = or i64 9182164147941791399, %8877
  %8879 = xor i64 %8878, -1
  %8880 = and i64 %8879, -1
  %8881 = or i64 %8876, %8880
  %8882 = xor i64 %8871, %8860
  %8883 = xor i64 %8882, %8870
  %8884 = xor i64 %8883, 0
  %8885 = xor i64 %8884, %8881
  %8886 = mul i64 %8859, %8885
  %8887 = trunc i64 %8886 to i32
  %8888 = sext i32 %0 to i64
  %8889 = and i64 %8888, -4922725764787260544
  %8890 = xor i64 %8888, -1
  %8891 = xor i64 -4922725764787260544, %8890
  %8892 = and i64 %8891, -4922725764787260544
  %8893 = add i64 %1651, 2145688925614820196
  %8894 = add i64 408997960359832866, %1651
  %8895 = add i64 %8894, 1736690965254987330
  %8896 = xor i64 %8892, %8893
  %8897 = xor i64 %8896, %8895
  %8898 = xor i64 %8897, %8889
  %8899 = xor i64 %8898, 1863716388383264501
  %8900 = or i64 %829, -5748982437474903244
  %8901 = xor i64 %829, -1
  %8902 = and i64 %8901, -5765344390150672588
  %8903 = and i64 %829, 5765344390150672587
  %8904 = or i64 %8902, %8903
  %8905 = xor i64 2290893209374454784, %8904
  %8906 = xor i64 %829, -1
  %8907 = or i64 5748982437474903243, %8906
  %8908 = xor i64 %8907, -1
  %8909 = and i64 %8908, -1
  %8910 = or i64 %8905, %8909
  %8911 = and i64 %95, 1081371907920100552
  %8912 = xor i64 %95, -1
  %8913 = xor i64 1081371907920100552, %8912
  %8914 = and i64 %8913, 1081371907920100552
  %8915 = xor i64 %8910, %8914
  %8916 = xor i64 %8915, 0
  %8917 = xor i64 %8916, %8900
  %8918 = xor i64 %8917, %8911
  %8919 = mul i64 %8899, %8918
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %8725, i64* %8696, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %8778, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %8808, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %8846, i32 %8887, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %8919, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %8920 = load i64, i64* %8696, align 8
  %8921 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %8920
  store i8* bitcast (i32 (i8*, i64, float*, i64)* @clear to i8*), i8** %8921, align 8
  %8922 = alloca i64, align 8
  %8923 = and i64 %1493, -3547663579467822134
  %8924 = xor i64 %1493, -1
  %8925 = xor i64 -3547663579467822134, %8924
  %8926 = and i64 %8925, -3547663579467822134
  %8927 = add i64 %990, 4502689349471600669
  %8928 = sub i64 0, %990
  %8929 = sub i64 4502689349471600669, %8928
  %8930 = sext i32 %60 to i64
  %8931 = add i64 %8930, -1074911907765538841
  %8932 = add i64 -6910985686230677472, %8930
  %8933 = sub i64 %8932, -5836073778465138631
  %8934 = xor i64 %8933, %8923
  %8935 = xor i64 %8934, %8927
  %8936 = xor i64 %8935, %8931
  %8937 = xor i64 %8936, %8926
  %8938 = xor i64 %8937, 3132147921305657629
  %8939 = xor i64 %8938, %8929
  %8940 = or i64 %444, 6341402283989930572
  %8941 = and i64 6341402283989930572, %444
  %8942 = xor i64 6341402283989930572, %444
  %8943 = or i64 %8941, %8942
  %8944 = and i64 %1240, -1562251415326308407
  %8945 = xor i64 %1240, -1
  %8946 = xor i64 -1562251415326308407, %8945
  %8947 = and i64 %8946, -1562251415326308407
  %8948 = and i64 %918, -5630236543335167970
  %8949 = or i64 5630236543335167969, %918
  %8950 = sub i64 %8949, 5630236543335167969
  %8951 = xor i64 0, %8948
  %8952 = xor i64 %8951, %8940
  %8953 = xor i64 %8952, %8950
  %8954 = xor i64 %8953, %8947
  %8955 = xor i64 %8954, %8944
  %8956 = xor i64 %8955, %8943
  %8957 = mul i64 %8939, %8956
  %8958 = trunc i64 %8957 to i1
  %8959 = and i64 %391, -2599713767758371236
  %8960 = xor i64 %391, -1
  %8961 = or i64 2599713767758371235, %8960
  %8962 = xor i64 %8961, -1
  %8963 = and i64 %8962, -1
  %8964 = or i64 %547, -2266292893242950794
  %8965 = xor i64 %547, -1
  %8966 = and i64 %8965, -5821043372524128754
  %8967 = and i64 %547, 5821043372524128753
  %8968 = or i64 %8966, %8967
  %8969 = xor i64 5745464450669628792, %8968
  %8970 = xor i64 %547, -1
  %8971 = or i64 2266292893242950793, %8970
  %8972 = xor i64 %8971, -1
  %8973 = and i64 %8972, -1
  %8974 = or i64 %8969, %8973
  %8975 = and i64 %280, 3327501343513403283
  %8976 = or i64 -3327501343513403284, %280
  %8977 = sub i64 %8976, -3327501343513403284
  %8978 = xor i64 %8964, %8977
  %8979 = xor i64 %8978, %8974
  %8980 = xor i64 %8979, %8975
  %8981 = xor i64 %8980, %8963
  %8982 = xor i64 %8981, -84476411994947105
  %8983 = xor i64 %8982, %8959
  %8984 = add i64 %1230, 1823884398499089292
  %8985 = sub i64 0, %1230
  %8986 = sub i64 1823884398499089292, %8985
  %8987 = or i64 %1525, 8431616607520990360
  %8988 = and i64 8431616607520990360, %1525
  %8989 = xor i64 8431616607520990360, %1525
  %8990 = or i64 %8988, %8989
  %8991 = or i64 %234, -6891117615122432246
  %8992 = xor i64 %234, -1
  %8993 = and i64 %8992, -7992712915079137898
  %8994 = and i64 %234, 7992712915079137897
  %8995 = or i64 %8993, %8994
  %8996 = xor i64 3551643531036019356, %8995
  %8997 = xor i64 %234, -1
  %8998 = or i64 6891117615122432245, %8997
  %8999 = xor i64 %8998, -1
  %9000 = and i64 %8999, -1
  %9001 = or i64 %8996, %9000
  %9002 = xor i64 %8991, %8986
  %9003 = xor i64 %9002, 0
  %9004 = xor i64 %9003, %9001
  %9005 = xor i64 %9004, %8987
  %9006 = xor i64 %9005, %8990
  %9007 = xor i64 %9006, %8984
  %9008 = mul i64 %8983, %9007
  %9009 = and i64 %1398, -8626956225292533679
  %9010 = xor i64 %1398, -1
  %9011 = xor i64 -8626956225292533679, %9010
  %9012 = and i64 %9011, -8626956225292533679
  %9013 = or i64 %226, 2671651792030384660
  %9014 = xor i64 %226, -1
  %9015 = and i64 %9014, -8658628408504083460
  %9016 = and i64 %226, 8658628408504083459
  %9017 = or i64 %9015, %9016
  %9018 = xor i64 -6717749482214925848, %9017
  %9019 = xor i64 %226, -1
  %9020 = or i64 -2671651792030384661, %9019
  %9021 = xor i64 %9020, -1
  %9022 = and i64 %9021, -1
  %9023 = or i64 %9018, %9022
  %9024 = xor i64 4976944142943568413, %9009
  %9025 = xor i64 %9024, %9012
  %9026 = xor i64 %9025, %9013
  %9027 = xor i64 %9026, %9023
  %9028 = add i64 %1137, 2881116643892929727
  %9029 = sub i64 0, %1137
  %9030 = sub i64 2881116643892929727, %9029
  %9031 = or i64 %1074, 4061743347535640599
  %9032 = xor i64 %1074, -1
  %9033 = and i64 %9032, -2566409842660166783
  %9034 = and i64 %1074, 2566409842660166782
  %9035 = or i64 %9033, %9034
  %9036 = xor i64 -2000598972627530858, %9035
  %9037 = xor i64 %1074, -1
  %9038 = or i64 -4061743347535640600, %9037
  %9039 = xor i64 %9038, -1
  %9040 = and i64 %9039, -1
  %9041 = or i64 %9036, %9040
  %9042 = xor i64 0, %9030
  %9043 = xor i64 %9042, %9031
  %9044 = xor i64 %9043, %9041
  %9045 = xor i64 %9044, %9028
  %9046 = mul i64 %9027, %9045
  %9047 = add i64 %920, -8656840363542543931
  %9048 = add i64 1900156271949474947, %920
  %9049 = sub i64 %9048, -7889747438217532738
  %9050 = add i64 %1507, 7387564866159035596
  %9051 = sub i64 0, %1507
  %9052 = sub i64 7387564866159035596, %9051
  %9053 = xor i64 %9050, -4872913632202155891
  %9054 = xor i64 %9053, %9049
  %9055 = xor i64 %9054, %9047
  %9056 = xor i64 %9055, %9052
  %9057 = sext i32 %171 to i64
  %9058 = and i64 %9057, 2222268053600008280
  %9059 = xor i64 %9057, -1
  %9060 = xor i64 2222268053600008280, %9059
  %9061 = and i64 %9060, 2222268053600008280
  %9062 = and i64 %278, 2971698839507252520
  %9063 = xor i64 %278, -1
  %9064 = or i64 -2971698839507252521, %9063
  %9065 = xor i64 %9064, -1
  %9066 = and i64 %9065, -1
  %9067 = xor i64 %9061, %9058
  %9068 = xor i64 %9067, %9066
  %9069 = xor i64 %9068, 0
  %9070 = xor i64 %9069, %9062
  %9071 = mul i64 %9056, %9070
  %9072 = trunc i64 %9071 to i1
  %9073 = sext i32 %49 to i64
  %9074 = and i64 %9073, -8381093444908149954
  %9075 = xor i64 %9073, -1
  %9076 = or i64 8381093444908149953, %9075
  %9077 = xor i64 %9076, -1
  %9078 = and i64 %9077, -1
  %9079 = add i64 %1647, -8100950769466054077
  %9080 = add i64 6843186058694955542, %1647
  %9081 = sub i64 %9080, -3502607245548541997
  %9082 = or i64 %1645, -2872924603714245679
  %9083 = and i64 -2872924603714245679, %1645
  %9084 = xor i64 -2872924603714245679, %1645
  %9085 = or i64 %9083, %9084
  %9086 = xor i64 -9006596101289241797, %9074
  %9087 = xor i64 %9086, %9085
  %9088 = xor i64 %9087, %9078
  %9089 = xor i64 %9088, %9082
  %9090 = xor i64 %9089, %9081
  %9091 = xor i64 %9090, %9079
  %9092 = add i64 %1228, -6416760186820516716
  %9093 = sub i64 0, %1228
  %9094 = sub i64 -6416760186820516716, %9093
  %9095 = add i64 %1521, 4643041023272563250
  %9096 = and i64 4643041023272563250, %1521
  %9097 = or i64 4643041023272563250, %1521
  %9098 = add i64 %9096, %9097
  %9099 = add i64 %794, 3056047685374161843
  %9100 = and i64 3056047685374161843, %794
  %9101 = or i64 3056047685374161843, %794
  %9102 = add i64 %9100, %9101
  %9103 = xor i64 %9102, 0
  %9104 = xor i64 %9103, %9099
  %9105 = xor i64 %9104, %9094
  %9106 = xor i64 %9105, %9098
  %9107 = xor i64 %9106, %9092
  %9108 = xor i64 %9107, %9095
  %9109 = mul i64 %9091, %9108
  %9110 = sext i32 %60 to i64
  %9111 = or i64 %9110, 6099479700165041183
  %9112 = xor i64 %9110, -1
  %9113 = and i64 %9112, -1297702482907593267
  %9114 = and i64 %9110, 1297702482907593266
  %9115 = or i64 %9113, %9114
  %9116 = xor i64 -5091295124371170862, %9115
  %9117 = xor i64 %9110, -1
  %9118 = or i64 -6099479700165041184, %9117
  %9119 = xor i64 %9118, -1
  %9120 = and i64 %9119, -1
  %9121 = or i64 %9116, %9120
  %9122 = or i64 %1509, 4508481079817367633
  %9123 = xor i64 %1509, -1
  %9124 = and i64 4508481079817367633, %9123
  %9125 = add i64 %9124, %1509
  %9126 = xor i64 %9122, %9125
  %9127 = xor i64 %9126, %9121
  %9128 = xor i64 %9127, %9111
  %9129 = xor i64 %9128, -8740959477021591153
  %9130 = add i64 %1588, -2029379336207895653
  %9131 = add i64 146191915758598959, %1588
  %9132 = sub i64 %9131, 2175571251966494612
  %9133 = or i64 %1511, 6974881470799932257
  %9134 = xor i64 %1511, -1
  %9135 = and i64 6974881470799932257, %9134
  %9136 = add i64 %9135, %1511
  %9137 = or i64 %918, -4309233541245646419
  %9138 = xor i64 %918, -1
  %9139 = and i64 -4309233541245646419, %9138
  %9140 = add i64 %9139, %918
  %9141 = xor i64 0, %9132
  %9142 = xor i64 %9141, %9137
  %9143 = xor i64 %9142, %9133
  %9144 = xor i64 %9143, %9136
  %9145 = xor i64 %9144, %9130
  %9146 = xor i64 %9145, %9140
  %9147 = mul i64 %9129, %9146
  %9148 = and i64 %998, -4435054129556051586
  %9149 = xor i64 %998, -1
  %9150 = or i64 4435054129556051585, %9149
  %9151 = xor i64 %9150, -1
  %9152 = and i64 %9151, -1
  %9153 = or i64 %545, -7639352166318438921
  %9154 = and i64 -7639352166318438921, %545
  %9155 = xor i64 -7639352166318438921, %545
  %9156 = or i64 %9154, %9155
  %9157 = xor i64 %9153, %9152
  %9158 = xor i64 %9157, %9148
  %9159 = xor i64 %9158, 9062495057877993545
  %9160 = xor i64 %9159, %9156
  %9161 = and i64 %345, 4216661154563014449
  %9162 = or i64 -4216661154563014450, %345
  %9163 = sub i64 %9162, -4216661154563014450
  %9164 = add i64 %1185, -9129261508360096934
  %9165 = xor i64 -9129261508360096934, %1185
  %9166 = and i64 -9129261508360096934, %1185
  %9167 = mul i64 2, %9166
  %9168 = add i64 %9165, %9167
  %9169 = add i64 %1292, 61192900569193653
  %9170 = sub i64 0, %1292
  %9171 = sub i64 61192900569193653, %9170
  %9172 = xor i64 %9163, %9164
  %9173 = xor i64 %9172, %9169
  %9174 = xor i64 %9173, %9168
  %9175 = xor i64 %9174, %9171
  %9176 = xor i64 %9175, %9161
  %9177 = xor i64 %9176, 0
  %9178 = mul i64 %9160, %9177
  %9179 = trunc i64 %9178 to i1
  %9180 = add i64 %1647, 942379351457153315
  %9181 = sub i64 0, %1647
  %9182 = add i64 -942379351457153315, %9181
  %9183 = sub i64 0, %9182
  %9184 = or i64 %553, -2844676973605778150
  %9185 = and i64 -2844676973605778150, %553
  %9186 = xor i64 -2844676973605778150, %553
  %9187 = or i64 %9185, %9186
  %9188 = xor i64 %9187, -8110417299226430475
  %9189 = xor i64 %9188, %9184
  %9190 = xor i64 %9189, %9183
  %9191 = xor i64 %9190, %9180
  %9192 = or i64 %1450, 2538601429246954985
  %9193 = and i64 2538601429246954985, %1450
  %9194 = xor i64 2538601429246954985, %1450
  %9195 = or i64 %9193, %9194
  %9196 = add i64 %1649, -3452122606112838050
  %9197 = sub i64 0, %1649
  %9198 = add i64 3452122606112838050, %9197
  %9199 = sub i64 0, %9198
  %9200 = and i64 %1228, -8446614685602961329
  %9201 = xor i64 %1228, -1
  %9202 = or i64 8446614685602961328, %9201
  %9203 = xor i64 %9202, -1
  %9204 = and i64 %9203, -1
  %9205 = xor i64 %9196, %9195
  %9206 = xor i64 %9205, %9204
  %9207 = xor i64 %9206, %9199
  %9208 = xor i64 %9207, %9192
  %9209 = xor i64 %9208, %9200
  %9210 = xor i64 %9209, 0
  %9211 = mul i64 %9191, %9210
  %9212 = trunc i64 %9211 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537076, i64* %8922, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %8958, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 %9008, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 %9046, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %9072, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 %9109, i64 %9147, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %9179, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %9212, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %9213 = load i64, i64* %8922, align 8
  %9214 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %9213
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %9214, align 8
  %9215 = alloca i64, align 8
  %9216 = and i64 %992, 2782901400547359454
  %9217 = xor i64 %992, -1
  %9218 = or i64 -2782901400547359455, %9217
  %9219 = xor i64 %9218, -1
  %9220 = and i64 %9219, -1
  %9221 = or i64 %1143, 2790271014585616602
  %9222 = xor i64 %1143, -1
  %9223 = and i64 %9222, -1040329982407219243
  %9224 = and i64 %1143, 1040329982407219242
  %9225 = or i64 %9223, %9224
  %9226 = xor i64 -2942810088825671921, %9225
  %9227 = xor i64 %1143, -1
  %9228 = or i64 -2790271014585616603, %9227
  %9229 = xor i64 %9228, -1
  %9230 = and i64 %9229, -1
  %9231 = or i64 %9226, %9230
  %9232 = xor i64 5184471484461196799, %9220
  %9233 = xor i64 %9232, %9216
  %9234 = xor i64 %9233, %9231
  %9235 = xor i64 %9234, %9221
  %9236 = or i64 %1649, -3468231791729006688
  %9237 = xor i64 %1649, -1
  %9238 = and i64 %9237, 2922376865118659453
  %9239 = and i64 %1649, -2922376865118659454
  %9240 = or i64 %9238, %9239
  %9241 = xor i64 -1778917690611530531, %9240
  %9242 = xor i64 %1649, -1
  %9243 = or i64 3468231791729006687, %9242
  %9244 = xor i64 %9243, -1
  %9245 = and i64 %9244, -1
  %9246 = or i64 %9241, %9245
  %9247 = or i64 %1495, -2527048023175249128
  %9248 = and i64 -2527048023175249128, %1495
  %9249 = xor i64 -2527048023175249128, %1495
  %9250 = or i64 %9248, %9249
  %9251 = and i64 %1586, -109155998416780288
  %9252 = or i64 109155998416780287, %1586
  %9253 = sub i64 %9252, 109155998416780287
  %9254 = xor i64 %9251, %9247
  %9255 = xor i64 %9254, %9246
  %9256 = xor i64 %9255, %9236
  %9257 = xor i64 %9256, 0
  %9258 = xor i64 %9257, %9250
  %9259 = xor i64 %9258, %9253
  %9260 = mul i64 %9235, %9259
  %9261 = trunc i64 %9260 to i32
  %9262 = and i64 %450, 8890792554478914033
  %9263 = or i64 -8890792554478914034, %450
  %9264 = sub i64 %9263, -8890792554478914034
  %9265 = and i64 %236, 5818375073366006070
  %9266 = xor i64 %236, -1
  %9267 = or i64 -5818375073366006071, %9266
  %9268 = xor i64 %9267, -1
  %9269 = and i64 %9268, -1
  %9270 = add i64 %284, -205157172673802840
  %9271 = xor i64 -205157172673802840, %284
  %9272 = and i64 -205157172673802840, %284
  %9273 = mul i64 2, %9272
  %9274 = add i64 %9271, %9273
  %9275 = xor i64 %9269, %9274
  %9276 = xor i64 %9275, -5101607661999534449
  %9277 = xor i64 %9276, %9264
  %9278 = xor i64 %9277, %9262
  %9279 = xor i64 %9278, %9270
  %9280 = xor i64 %9279, %9265
  %9281 = add i64 %782, 3581718421045470353
  %9282 = sub i64 0, %782
  %9283 = sub i64 3581718421045470353, %9282
  %9284 = and i64 %1507, -4181026398532025489
  %9285 = or i64 4181026398532025488, %1507
  %9286 = sub i64 %9285, 4181026398532025488
  %9287 = add i64 %1659, -2865259483901582696
  %9288 = add i64 -3974454920354342847, %1659
  %9289 = sub i64 %9288, -1109195436452760151
  %9290 = xor i64 %9287, %9283
  %9291 = xor i64 %9290, %9281
  %9292 = xor i64 %9291, 0
  %9293 = xor i64 %9292, %9289
  %9294 = xor i64 %9293, %9284
  %9295 = xor i64 %9294, %9286
  %9296 = mul i64 %9280, %9295
  %9297 = trunc i64 %9296 to i1
  %9298 = and i64 %1519, -3486903935257381229
  %9299 = xor i64 %1519, -1
  %9300 = or i64 3486903935257381228, %9299
  %9301 = xor i64 %9300, -1
  %9302 = and i64 %9301, -1
  %9303 = or i64 %177, -4709136651521415285
  %9304 = xor i64 %177, -1
  %9305 = and i64 %9304, -1291181333152595808
  %9306 = and i64 %177, 1291181333152595807
  %9307 = or i64 %9305, %9306
  %9308 = xor i64 5814433273272084267, %9307
  %9309 = xor i64 %177, -1
  %9310 = or i64 4709136651521415284, %9309
  %9311 = xor i64 %9310, -1
  %9312 = and i64 %9311, -1
  %9313 = or i64 %9308, %9312
  %9314 = and i64 %1535, 8625562695061310760
  %9315 = xor i64 %1535, -1
  %9316 = xor i64 8625562695061310760, %9315
  %9317 = and i64 %9316, 8625562695061310760
  %9318 = xor i64 %9302, %9303
  %9319 = xor i64 %9318, 5101157923044160933
  %9320 = xor i64 %9319, %9317
  %9321 = xor i64 %9320, %9298
  %9322 = xor i64 %9321, %9313
  %9323 = xor i64 %9322, %9314
  %9324 = add i64 %1183, -1613217365073023911
  %9325 = add i64 -1712308248717010148, %1183
  %9326 = add i64 %9325, 99090883643986237
  %9327 = and i64 %1515, 8334016401051123353
  %9328 = xor i64 %1515, -1
  %9329 = or i64 -8334016401051123354, %9328
  %9330 = xor i64 %9329, -1
  %9331 = and i64 %9330, -1
  %9332 = or i64 %341, 6836705275693056892
  %9333 = and i64 6836705275693056892, %341
  %9334 = xor i64 6836705275693056892, %341
  %9335 = or i64 %9333, %9334
  %9336 = xor i64 %9324, %9327
  %9337 = xor i64 %9336, %9332
  %9338 = xor i64 %9337, %9335
  %9339 = xor i64 %9338, %9326
  %9340 = xor i64 %9339, 0
  %9341 = xor i64 %9340, %9331
  %9342 = mul i64 %9323, %9341
  %9343 = trunc i64 %9342 to i1
  %9344 = and i64 %91, -5368476889887323464
  %9345 = or i64 5368476889887323463, %91
  %9346 = sub i64 %9345, 5368476889887323463
  %9347 = add i64 %1541, -8028467035383191458
  %9348 = add i64 3813135442384993511, %1541
  %9349 = sub i64 %9348, -6605141595941366647
  %9350 = xor i64 %9346, %9349
  %9351 = xor i64 %9350, %9344
  %9352 = xor i64 %9351, %9347
  %9353 = xor i64 %9352, 5526581191388734847
  %9354 = or i64 %829, -8038694080728517687
  %9355 = and i64 -8038694080728517687, %829
  %9356 = xor i64 -8038694080728517687, %829
  %9357 = or i64 %9355, %9356
  %9358 = and i64 %924, 7822475825756740192
  %9359 = or i64 -7822475825756740193, %924
  %9360 = sub i64 %9359, -7822475825756740193
  %9361 = or i64 %1541, 3827467452781333846
  %9362 = xor i64 %1541, -1
  %9363 = and i64 3827467452781333846, %9362
  %9364 = add i64 %9363, %1541
  %9365 = xor i64 0, %9361
  %9366 = xor i64 %9365, %9364
  %9367 = xor i64 %9366, %9360
  %9368 = xor i64 %9367, %9354
  %9369 = xor i64 %9368, %9357
  %9370 = xor i64 %9369, %9358
  %9371 = mul i64 %9353, %9370
  %9372 = trunc i64 %9371 to i1
  %9373 = add i64 %1543, -3874030832835642041
  %9374 = sub i64 0, %1543
  %9375 = sub i64 -3874030832835642041, %9374
  %9376 = add i64 %1653, 7754354270938073268
  %9377 = add i64 1400659918435199228, %1653
  %9378 = sub i64 %9377, -6353694352502874040
  %9379 = xor i64 %9376, %9373
  %9380 = xor i64 %9379, %9378
  %9381 = xor i64 %9380, -2596531322701499761
  %9382 = xor i64 %9381, %9375
  %9383 = and i64 %1230, 3068531728310963404
  %9384 = or i64 -3068531728310963405, %1230
  %9385 = sub i64 %9384, -3068531728310963405
  %9386 = and i64 %448, -3952267302802684838
  %9387 = xor i64 %448, -1
  %9388 = xor i64 -3952267302802684838, %9387
  %9389 = and i64 %9388, -3952267302802684838
  %9390 = or i64 %1286, -5683314372188129378
  %9391 = xor i64 %1286, -1
  %9392 = and i64 -5683314372188129378, %9391
  %9393 = add i64 %9392, %1286
  %9394 = xor i64 %9390, %9393
  %9395 = xor i64 %9394, %9383
  %9396 = xor i64 %9395, %9389
  %9397 = xor i64 %9396, %9386
  %9398 = xor i64 %9397, 0
  %9399 = xor i64 %9398, %9385
  %9400 = mul i64 %9382, %9399
  %9401 = trunc i64 %9400 to i1
  %9402 = or i64 %1408, 3647291089145739602
  %9403 = xor i64 %1408, -1
  %9404 = and i64 %9403, -8791594398739710651
  %9405 = and i64 %1408, 8791594398739710650
  %9406 = or i64 %9404, %9405
  %9407 = xor i64 -5233116167006813161, %9406
  %9408 = xor i64 %1408, -1
  %9409 = or i64 -3647291089145739603, %9408
  %9410 = xor i64 %9409, -1
  %9411 = and i64 %9410, -1
  %9412 = or i64 %9407, %9411
  %9413 = add i64 %345, -3384400464092178785
  %9414 = add i64 -3435389880676450355, %345
  %9415 = add i64 %9414, 50989416584271570
  %9416 = xor i64 %9412, %9415
  %9417 = xor i64 %9416, 3844440734842702581
  %9418 = xor i64 %9417, %9413
  %9419 = xor i64 %9418, %9402
  %9420 = or i64 %69, 4046447450055674791
  %9421 = and i64 4046447450055674791, %69
  %9422 = xor i64 4046447450055674791, %69
  %9423 = or i64 %9421, %9422
  %9424 = add i64 %792, 6588305815044178372
  %9425 = sub i64 0, %792
  %9426 = sub i64 6588305815044178372, %9425
  %9427 = xor i64 %9426, %9420
  %9428 = xor i64 %9427, %9424
  %9429 = xor i64 %9428, 0
  %9430 = xor i64 %9429, %9423
  %9431 = mul i64 %9419, %9430
  %9432 = trunc i64 %9431 to i1
  %9433 = and i64 %1141, -4118272509502074163
  %9434 = xor i64 %1141, -1
  %9435 = xor i64 -4118272509502074163, %9434
  %9436 = and i64 %9435, -4118272509502074163
  %9437 = or i64 %383, 7121277963415561391
  %9438 = xor i64 %383, -1
  %9439 = and i64 7121277963415561391, %9438
  %9440 = add i64 %9439, %383
  %9441 = xor i64 %9437, %9440
  %9442 = xor i64 %9441, %9436
  %9443 = xor i64 %9442, %9433
  %9444 = xor i64 %9443, 8424698591725824617
  %9445 = and i64 %286, 6723823877755943606
  %9446 = xor i64 %286, -1
  %9447 = xor i64 6723823877755943606, %9446
  %9448 = and i64 %9447, 6723823877755943606
  %9449 = or i64 %682, -2482657312314017282
  %9450 = xor i64 %682, -1
  %9451 = and i64 -2482657312314017282, %9450
  %9452 = add i64 %9451, %682
  %9453 = and i64 %770, 9145958884978763809
  %9454 = xor i64 %770, -1
  %9455 = xor i64 9145958884978763809, %9454
  %9456 = and i64 %9455, 9145958884978763809
  %9457 = xor i64 %9452, %9445
  %9458 = xor i64 %9457, %9453
  %9459 = xor i64 %9458, %9449
  %9460 = xor i64 %9459, %9448
  %9461 = xor i64 %9460, %9456
  %9462 = xor i64 %9461, 0
  %9463 = mul i64 %9444, %9462
  %9464 = trunc i64 %9463 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537086, i64* %9215, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %9261, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %9297, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %9343, i1* null, i1 false, i1 false, i1 false, i1 %9372, i1 false, i1 %9401, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %9432, i1* null, i1* null, i1 %9464, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %9465 = load i64, i64* %9215, align 8
  %9466 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %9465
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %9466, align 8
  %9467 = alloca i64, align 8
  %9468 = and i64 %290, 4246227598959421130
  %9469 = xor i64 %290, -1
  %9470 = or i64 -4246227598959421131, %9469
  %9471 = xor i64 %9470, -1
  %9472 = and i64 %9471, -1
  %9473 = and i64 %1341, -2239420161788609866
  %9474 = xor i64 %1341, -1
  %9475 = xor i64 -2239420161788609866, %9474
  %9476 = and i64 %9475, -2239420161788609866
  %9477 = xor i64 %9472, %9473
  %9478 = xor i64 %9477, 2360565928685777775
  %9479 = xor i64 %9478, %9476
  %9480 = xor i64 %9479, %9468
  %9481 = or i64 %91, -2118487514884753136
  %9482 = xor i64 %91, -1
  %9483 = and i64 %9482, 7103214814053433213
  %9484 = and i64 %91, -7103214814053433214
  %9485 = or i64 %9483, %9484
  %9486 = xor i64 -9220505706732206483, %9485
  %9487 = xor i64 %91, -1
  %9488 = or i64 2118487514884753135, %9487
  %9489 = xor i64 %9488, -1
  %9490 = and i64 %9489, -1
  %9491 = or i64 %9486, %9490
  %9492 = add i64 %668, 7752198633677222036
  %9493 = xor i64 7752198633677222036, %668
  %9494 = and i64 7752198633677222036, %668
  %9495 = mul i64 2, %9494
  %9496 = add i64 %9493, %9495
  %9497 = and i64 %95, -7927657064792930875
  %9498 = or i64 7927657064792930874, %95
  %9499 = sub i64 %9498, 7927657064792930874
  %9500 = xor i64 %9497, %9491
  %9501 = xor i64 %9500, %9496
  %9502 = xor i64 %9501, %9492
  %9503 = xor i64 %9502, %9499
  %9504 = xor i64 %9503, %9481
  %9505 = xor i64 %9504, 0
  %9506 = mul i64 %9480, %9505
  %9507 = trunc i64 %9506 to i1
  %9508 = and i64 %1139, 2925141297894358396
  %9509 = xor i64 %1139, -1
  %9510 = xor i64 2925141297894358396, %9509
  %9511 = and i64 %9510, 2925141297894358396
  %9512 = or i64 %1404, -1011817375207402321
  %9513 = xor i64 %1404, -1
  %9514 = and i64 %9513, 801121098124752144
  %9515 = and i64 %1404, -801121098124752145
  %9516 = or i64 %9514, %9515
  %9517 = xor i64 -366082320517946945, %9516
  %9518 = xor i64 %1404, -1
  %9519 = or i64 1011817375207402320, %9518
  %9520 = xor i64 %9519, -1
  %9521 = and i64 %9520, -1
  %9522 = or i64 %9517, %9521
  %9523 = or i64 %69, -8038615475032805891
  %9524 = xor i64 %69, -1
  %9525 = and i64 %9524, -4106914399821250874
  %9526 = and i64 %69, 4106914399821250873
  %9527 = or i64 %9525, %9526
  %9528 = xor i64 6300631312982184763, %9527
  %9529 = xor i64 %69, -1
  %9530 = or i64 8038615475032805890, %9529
  %9531 = xor i64 %9530, -1
  %9532 = and i64 %9531, -1
  %9533 = or i64 %9528, %9532
  %9534 = xor i64 %9533, %9512
  %9535 = xor i64 %9534, %9522
  %9536 = xor i64 %9535, -6631347722228135465
  %9537 = xor i64 %9536, %9523
  %9538 = xor i64 %9537, %9508
  %9539 = xor i64 %9538, %9511
  %9540 = add i64 %1143, 375265797654379911
  %9541 = and i64 375265797654379911, %1143
  %9542 = or i64 375265797654379911, %1143
  %9543 = add i64 %9541, %9542
  %9544 = or i64 %1228, 8692514823693402355
  %9545 = xor i64 %1228, -1
  %9546 = and i64 8692514823693402355, %9545
  %9547 = add i64 %9546, %1228
  %9548 = add i64 %780, 5710151725065793060
  %9549 = xor i64 5710151725065793060, %780
  %9550 = and i64 5710151725065793060, %780
  %9551 = mul i64 2, %9550
  %9552 = add i64 %9549, %9551
  %9553 = xor i64 %9548, %9547
  %9554 = xor i64 %9553, %9540
  %9555 = xor i64 %9554, 0
  %9556 = xor i64 %9555, %9552
  %9557 = xor i64 %9556, %9543
  %9558 = xor i64 %9557, %9544
  %9559 = mul i64 %9539, %9558
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537073, i64* %9467, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %9507, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %9559, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %9560 = load i64, i64* %9467, align 8
  %9561 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %9560
  store i8* bitcast (i1 (i32, i32, i1*)* @main_loop.extracted to i8*), i8** %9561, align 8
  %9562 = alloca i64, align 8
  %9563 = or i64 %379, 9170102720294731092
  %9564 = xor i64 %379, -1
  %9565 = and i64 %9564, -4795518449089280499
  %9566 = and i64 %379, 4795518449089280498
  %9567 = or i64 %9565, %9566
  %9568 = xor i64 -4453960292041147559, %9567
  %9569 = xor i64 %379, -1
  %9570 = or i64 -9170102720294731093, %9569
  %9571 = xor i64 %9570, -1
  %9572 = and i64 %9571, -1
  %9573 = or i64 %9568, %9572
  %9574 = add i64 %345, 5857974304175992307
  %9575 = sub i64 0, %345
  %9576 = sub i64 5857974304175992307, %9575
  %9577 = xor i64 %9574, %9576
  %9578 = xor i64 %9577, %9573
  %9579 = xor i64 %9578, -368339469734478955
  %9580 = xor i64 %9579, %9563
  %9581 = add i64 %1527, 4729081209158542469
  %9582 = and i64 4729081209158542469, %1527
  %9583 = or i64 4729081209158542469, %1527
  %9584 = add i64 %9582, %9583
  %9585 = add i64 %387, 2980832307629375390
  %9586 = and i64 2980832307629375390, %387
  %9587 = or i64 2980832307629375390, %387
  %9588 = add i64 %9586, %9587
  %9589 = add i64 %1230, 5744245565096885122
  %9590 = and i64 5744245565096885122, %1230
  %9591 = or i64 5744245565096885122, %1230
  %9592 = add i64 %9590, %9591
  %9593 = xor i64 %9592, %9581
  %9594 = xor i64 %9593, %9589
  %9595 = xor i64 %9594, %9584
  %9596 = xor i64 %9595, 0
  %9597 = xor i64 %9596, %9588
  %9598 = xor i64 %9597, %9585
  %9599 = mul i64 %9580, %9598
  %9600 = trunc i64 %9599 to i1
  %9601 = or i64 %1517, 9184094046626193114
  %9602 = xor i64 %1517, -1
  %9603 = and i64 9184094046626193114, %9602
  %9604 = add i64 %9603, %1517
  %9605 = or i64 %288, 2784988128262051289
  %9606 = xor i64 %288, -1
  %9607 = and i64 %9606, 1866515423045674156
  %9608 = and i64 %288, -1866515423045674157
  %9609 = or i64 %9607, %9608
  %9610 = xor i64 4558049716001157493, %9609
  %9611 = xor i64 %288, -1
  %9612 = or i64 -2784988128262051290, %9611
  %9613 = xor i64 %9612, -1
  %9614 = and i64 %9613, -1
  %9615 = or i64 %9610, %9614
  %9616 = or i64 %543, -2375856654227313181
  %9617 = and i64 -2375856654227313181, %543
  %9618 = xor i64 -2375856654227313181, %543
  %9619 = or i64 %9617, %9618
  %9620 = xor i64 %9619, %9615
  %9621 = xor i64 %9620, %9601
  %9622 = xor i64 %9621, %9616
  %9623 = xor i64 %9622, %9604
  %9624 = xor i64 %9623, %9605
  %9625 = xor i64 %9624, 3734284945423737011
  %9626 = or i64 %605, -2809385168696039074
  %9627 = xor i64 %605, -1
  %9628 = and i64 -2809385168696039074, %9627
  %9629 = add i64 %9628, %605
  %9630 = or i64 %868, 3742852331697240256
  %9631 = and i64 3742852331697240256, %868
  %9632 = xor i64 3742852331697240256, %868
  %9633 = or i64 %9631, %9632
  %9634 = add i64 %1582, 3864818903449443000
  %9635 = xor i64 3864818903449443000, %1582
  %9636 = and i64 3864818903449443000, %1582
  %9637 = mul i64 2, %9636
  %9638 = add i64 %9635, %9637
  %9639 = xor i64 %9629, %9638
  %9640 = xor i64 %9639, %9626
  %9641 = xor i64 %9640, %9633
  %9642 = xor i64 %9641, %9630
  %9643 = xor i64 %9642, 0
  %9644 = xor i64 %9643, %9634
  %9645 = mul i64 %9625, %9644
  %9646 = trunc i64 %9645 to i1
  %9647 = or i64 %686, 9037238150603713475
  %9648 = xor i64 %686, -1
  %9649 = and i64 9037238150603713475, %9648
  %9650 = add i64 %9649, %686
  %9651 = add i64 %1454, 8191432454070032055
  %9652 = sub i64 0, %1454
  %9653 = sub i64 8191432454070032055, %9652
  %9654 = xor i64 %9651, 3645037368054185955
  %9655 = xor i64 %9654, %9647
  %9656 = xor i64 %9655, %9650
  %9657 = xor i64 %9656, %9653
  %9658 = sext i32 %60 to i64
  %9659 = and i64 %9658, 287298542830590171
  %9660 = xor i64 %9658, -1
  %9661 = xor i64 287298542830590171, %9660
  %9662 = and i64 %9661, 287298542830590171
  %9663 = add i64 %1517, -150802049996469947
  %9664 = sub i64 0, %1517
  %9665 = sub i64 -150802049996469947, %9664
  %9666 = xor i64 0, %9659
  %9667 = xor i64 %9666, %9662
  %9668 = xor i64 %9667, %9665
  %9669 = xor i64 %9668, %9663
  %9670 = mul i64 %9657, %9669
  %9671 = trunc i64 %9670 to i1
  %9672 = add i64 %53, -5575498535972062942
  %9673 = add i64 4681664877970989771, %53
  %9674 = add i64 %9673, 8189580659766498903
  %9675 = and i64 %794, -1392890613634895261
  %9676 = xor i64 %794, -1
  %9677 = or i64 1392890613634895260, %9676
  %9678 = xor i64 %9677, -1
  %9679 = and i64 %9678, -1
  %9680 = xor i64 %9674, -1674710184867999727
  %9681 = xor i64 %9680, %9679
  %9682 = xor i64 %9681, %9675
  %9683 = xor i64 %9682, %9672
  %9684 = or i64 %1228, -2488820170497045314
  %9685 = xor i64 %1228, -1
  %9686 = and i64 %9685, -6657876688901173821
  %9687 = and i64 %1228, 6657876688901173820
  %9688 = or i64 %9686, %9687
  %9689 = xor i64 9146695741891363197, %9688
  %9690 = xor i64 %1228, -1
  %9691 = or i64 2488820170497045313, %9690
  %9692 = xor i64 %9691, -1
  %9693 = and i64 %9692, -1
  %9694 = or i64 %9689, %9693
  %9695 = add i64 %387, -8081378552200377766
  %9696 = and i64 -8081378552200377766, %387
  %9697 = or i64 -8081378552200377766, %387
  %9698 = add i64 %9696, %9697
  %9699 = xor i64 %9698, %9694
  %9700 = xor i64 %9699, 0
  %9701 = xor i64 %9700, %9684
  %9702 = xor i64 %9701, %9695
  %9703 = mul i64 %9683, %9702
  %9704 = trunc i64 %9703 to i1
  %9705 = add i64 %916, -5852713583517361786
  %9706 = and i64 -5852713583517361786, %916
  %9707 = or i64 -5852713583517361786, %916
  %9708 = add i64 %9706, %9707
  %9709 = or i64 %656, -7819286219414154125
  %9710 = xor i64 %656, -1
  %9711 = and i64 -7819286219414154125, %9710
  %9712 = add i64 %9711, %656
  %9713 = or i64 %868, -195079174566293205
  %9714 = xor i64 %868, -1
  %9715 = and i64 %9714, 1847702866331082197
  %9716 = and i64 %868, -1847702866331082198
  %9717 = or i64 %9715, %9716
  %9718 = xor i64 -1950433084121494274, %9717
  %9719 = xor i64 %868, -1
  %9720 = or i64 195079174566293204, %9719
  %9721 = xor i64 %9720, -1
  %9722 = and i64 %9721, -1
  %9723 = or i64 %9718, %9722
  %9724 = xor i64 %9723, -8213748674356005495
  %9725 = xor i64 %9724, %9708
  %9726 = xor i64 %9725, %9713
  %9727 = xor i64 %9726, %9709
  %9728 = xor i64 %9727, %9705
  %9729 = xor i64 %9728, %9712
  %9730 = sext i32 %72 to i64
  %9731 = add i64 %9730, 4469308237216075988
  %9732 = sub i64 0, %9730
  %9733 = sub i64 4469308237216075988, %9732
  %9734 = and i64 %1582, -1279551061693600934
  %9735 = xor i64 %1582, -1
  %9736 = xor i64 -1279551061693600934, %9735
  %9737 = and i64 %9736, -1279551061693600934
  %9738 = xor i64 %9733, %9731
  %9739 = xor i64 %9738, %9737
  %9740 = xor i64 %9739, %9734
  %9741 = xor i64 %9740, 0
  %9742 = mul i64 %9729, %9741
  %9743 = trunc i64 %9742 to i1
  %9744 = or i64 %686, 9080296263063807942
  %9745 = and i64 9080296263063807942, %686
  %9746 = xor i64 9080296263063807942, %686
  %9747 = or i64 %9745, %9746
  %9748 = and i64 %1234, -5811891062695466570
  %9749 = xor i64 %1234, -1
  %9750 = or i64 5811891062695466569, %9749
  %9751 = xor i64 %9750, -1
  %9752 = and i64 %9751, -1
  %9753 = xor i64 9155279197603729519, %9747
  %9754 = xor i64 %9753, %9752
  %9755 = xor i64 %9754, %9744
  %9756 = xor i64 %9755, %9748
  %9757 = add i64 %829, -5177946306880427420
  %9758 = sub i64 0, %829
  %9759 = sub i64 -5177946306880427420, %9758
  %9760 = and i64 %385, -2020692432488291605
  %9761 = xor i64 %385, -1
  %9762 = xor i64 -2020692432488291605, %9761
  %9763 = and i64 %9762, -2020692432488291605
  %9764 = xor i64 0, %9760
  %9765 = xor i64 %9764, %9757
  %9766 = xor i64 %9765, %9763
  %9767 = xor i64 %9766, %9759
  %9768 = mul i64 %9756, %9767
  %9769 = trunc i64 %9768 to i1
  %9770 = and i64 %1588, -4409751775634808448
  %9771 = xor i64 %1588, -1
  %9772 = xor i64 -4409751775634808448, %9771
  %9773 = and i64 %9772, -4409751775634808448
  %9774 = and i64 %829, -6901196546487723792
  %9775 = xor i64 %829, -1
  %9776 = xor i64 -6901196546487723792, %9775
  %9777 = and i64 %9776, -6901196546487723792
  %9778 = xor i64 %9777, 3051415332896602945
  %9779 = xor i64 %9778, %9773
  %9780 = xor i64 %9779, %9770
  %9781 = xor i64 %9780, %9774
  %9782 = add i64 %990, -4097424430380832394
  %9783 = xor i64 -4097424430380832394, %990
  %9784 = and i64 -4097424430380832394, %990
  %9785 = mul i64 2, %9784
  %9786 = add i64 %9783, %9785
  %9787 = add i64 %278, -5932208147092333044
  %9788 = add i64 -9187038625460247227, %278
  %9789 = sub i64 %9788, -3254830478367914183
  %9790 = and i64 %794, -643970963336204244
  %9791 = xor i64 %794, -1
  %9792 = or i64 643970963336204243, %9791
  %9793 = xor i64 %9792, -1
  %9794 = and i64 %9793, -1
  %9795 = xor i64 %9787, %9789
  %9796 = xor i64 %9795, %9790
  %9797 = xor i64 %9796, %9782
  %9798 = xor i64 %9797, %9794
  %9799 = xor i64 %9798, %9786
  %9800 = xor i64 %9799, 0
  %9801 = mul i64 %9781, %9800
  %9802 = trunc i64 %9801 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537077, i64* %9562, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %9600, i1* null, i1 %9646, i1 %9671, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %9704, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %9743, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %9769, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %9802, i32 0, i1* null, i1* null)
  %9803 = load i64, i64* %9562, align 8
  %9804 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %9803
  store i8* bitcast (void ()* @main_loop..split to i8*), i8** %9804, align 8
  %9805 = alloca i64, align 8
  %9806 = or i64 %784, 6204158998331047571
  %9807 = xor i64 %784, -1
  %9808 = and i64 6204158998331047571, %9807
  %9809 = add i64 %9808, %784
  %9810 = or i64 %924, -8009179538071695047
  %9811 = xor i64 %924, -1
  %9812 = and i64 -8009179538071695047, %9811
  %9813 = add i64 %9812, %924
  %9814 = add i64 %957, -3127646960627544838
  %9815 = xor i64 -3127646960627544838, %957
  %9816 = and i64 -3127646960627544838, %957
  %9817 = mul i64 2, %9816
  %9818 = add i64 %9815, %9817
  %9819 = xor i64 %9810, %9813
  %9820 = xor i64 %9819, -6740823676527451233
  %9821 = xor i64 %9820, %9818
  %9822 = xor i64 %9821, %9809
  %9823 = xor i64 %9822, %9806
  %9824 = xor i64 %9823, %9814
  %9825 = add i64 %788, 6848074082922519179
  %9826 = add i64 1332604928221870212, %788
  %9827 = add i64 %9826, 5515469154700648967
  %9828 = and i64 %96, 704673186059787788
  %9829 = or i64 -704673186059787789, %96
  %9830 = sub i64 %9829, -704673186059787789
  %9831 = xor i64 %9827, %9830
  %9832 = xor i64 %9831, %9825
  %9833 = xor i64 %9832, 0
  %9834 = xor i64 %9833, %9828
  %9835 = mul i64 %9824, %9834
  %9836 = trunc i64 %9835 to i1
  %9837 = and i64 %994, -7573894196183790105
  %9838 = xor i64 %994, -1
  %9839 = or i64 7573894196183790104, %9838
  %9840 = xor i64 %9839, -1
  %9841 = and i64 %9840, -1
  %9842 = and i64 %790, 3248849263503903262
  %9843 = xor i64 %790, -1
  %9844 = xor i64 3248849263503903262, %9843
  %9845 = and i64 %9844, 3248849263503903262
  %9846 = or i64 %220, 5960952219431462805
  %9847 = xor i64 %220, -1
  %9848 = and i64 %9847, 1655560077277331368
  %9849 = and i64 %220, -1655560077277331369
  %9850 = or i64 %9848, %9849
  %9851 = xor i64 4917989515695953981, %9850
  %9852 = xor i64 %220, -1
  %9853 = or i64 -5960952219431462806, %9852
  %9854 = xor i64 %9853, -1
  %9855 = and i64 %9854, -1
  %9856 = or i64 %9851, %9855
  %9857 = xor i64 %9845, %9856
  %9858 = xor i64 %9857, 9066998187420324849
  %9859 = xor i64 %9858, %9841
  %9860 = xor i64 %9859, %9846
  %9861 = xor i64 %9860, %9837
  %9862 = xor i64 %9861, %9842
  %9863 = or i64 %1410, -6598320883794376254
  %9864 = xor i64 %1410, -1
  %9865 = and i64 -6598320883794376254, %9864
  %9866 = add i64 %9865, %1410
  %9867 = add i64 %282, -7375725845794003536
  %9868 = and i64 -7375725845794003536, %282
  %9869 = or i64 -7375725845794003536, %282
  %9870 = add i64 %9868, %9869
  %9871 = xor i64 %9867, %9870
  %9872 = xor i64 %9871, %9866
  %9873 = xor i64 %9872, 0
  %9874 = xor i64 %9873, %9863
  %9875 = mul i64 %9862, %9874
  %9876 = trunc i64 %9875 to i32
  %9877 = sext i32 %170 to i64
  %9878 = add i64 %9877, 3216374215794108093
  %9879 = add i64 8349863390380079785, %9877
  %9880 = sub i64 %9879, 5133489174585971692
  %9881 = add i64 %666, -3076852295694413984
  %9882 = and i64 -3076852295694413984, %666
  %9883 = or i64 -3076852295694413984, %666
  %9884 = add i64 %9882, %9883
  %9885 = add i64 %786, -4117257970206634664
  %9886 = sub i64 0, %786
  %9887 = sub i64 -4117257970206634664, %9886
  %9888 = xor i64 %9887, %9884
  %9889 = xor i64 %9888, 1733552681612988201
  %9890 = xor i64 %9889, %9881
  %9891 = xor i64 %9890, %9880
  %9892 = xor i64 %9891, %9885
  %9893 = xor i64 %9892, %9878
  %9894 = and i64 %232, 2893398362824672952
  %9895 = xor i64 %232, -1
  %9896 = xor i64 2893398362824672952, %9895
  %9897 = and i64 %9896, 2893398362824672952
  %9898 = and i64 %1519, 8104782311100704835
  %9899 = or i64 -8104782311100704836, %1519
  %9900 = sub i64 %9899, -8104782311100704836
  %9901 = or i64 %684, 7065816359333687517
  %9902 = xor i64 %684, -1
  %9903 = and i64 7065816359333687517, %9902
  %9904 = add i64 %9903, %684
  %9905 = xor i64 %9898, %9897
  %9906 = xor i64 %9905, %9900
  %9907 = xor i64 %9906, %9901
  %9908 = xor i64 %9907, 0
  %9909 = xor i64 %9908, %9904
  %9910 = xor i64 %9909, %9894
  %9911 = mul i64 %9893, %9910
  %9912 = trunc i64 %9911 to i32
  %9913 = and i64 %1400, 246965710875329410
  %9914 = xor i64 %1400, -1
  %9915 = or i64 -246965710875329411, %9914
  %9916 = xor i64 %9915, -1
  %9917 = and i64 %9916, -1
  %9918 = or i64 %998, 2967985396860228534
  %9919 = xor i64 %998, -1
  %9920 = and i64 %9919, -1349843147173887527
  %9921 = and i64 %998, 1349843147173887526
  %9922 = or i64 %9920, %9921
  %9923 = xor i64 -4290802133481942417, %9922
  %9924 = xor i64 %998, -1
  %9925 = or i64 -2967985396860228535, %9924
  %9926 = xor i64 %9925, -1
  %9927 = and i64 %9926, -1
  %9928 = or i64 %9923, %9927
  %9929 = and i64 %922, -2182773035312125295
  %9930 = xor i64 %922, -1
  %9931 = or i64 2182773035312125294, %9930
  %9932 = xor i64 %9931, -1
  %9933 = and i64 %9932, -1
  %9934 = xor i64 %9933, %9913
  %9935 = xor i64 %9934, %9917
  %9936 = xor i64 %9935, %9918
  %9937 = xor i64 %9936, %9928
  %9938 = xor i64 %9937, -4221488796582447435
  %9939 = xor i64 %9938, %9929
  %9940 = add i64 %1452, 3074672883899400530
  %9941 = add i64 1661553007666125867, %1452
  %9942 = add i64 %9941, 1413119876233274663
  %9943 = add i64 %1302, -1371859518749234439
  %9944 = add i64 2486901536427165095, %1302
  %9945 = sub i64 %9944, 3858761055176399534
  %9946 = xor i64 0, %9940
  %9947 = xor i64 %9946, %9943
  %9948 = xor i64 %9947, %9942
  %9949 = xor i64 %9948, %9945
  %9950 = mul i64 %9939, %9949
  %9951 = or i64 %446, 2153687572783004090
  %9952 = and i64 2153687572783004090, %446
  %9953 = xor i64 2153687572783004090, %446
  %9954 = or i64 %9952, %9953
  %9955 = or i64 %1183, -4037159220775637930
  %9956 = and i64 -4037159220775637930, %1183
  %9957 = xor i64 -4037159220775637930, %1183
  %9958 = or i64 %9956, %9957
  %9959 = xor i64 8701350819866695843, %9958
  %9960 = xor i64 %9959, %9951
  %9961 = xor i64 %9960, %9955
  %9962 = xor i64 %9961, %9954
  %9963 = add i64 %91, -3336871649584746649
  %9964 = add i64 -3079076760839419527, %91
  %9965 = add i64 %9964, -257794888745327122
  %9966 = or i64 %1240, -2109200543812954229
  %9967 = and i64 -2109200543812954229, %1240
  %9968 = xor i64 -2109200543812954229, %1240
  %9969 = or i64 %9967, %9968
  %9970 = and i64 %676, 506866058300935313
  %9971 = xor i64 %676, -1
  %9972 = or i64 -506866058300935314, %9971
  %9973 = xor i64 %9972, -1
  %9974 = and i64 %9973, -1
  %9975 = xor i64 0, %9963
  %9976 = xor i64 %9975, %9974
  %9977 = xor i64 %9976, %9966
  %9978 = xor i64 %9977, %9969
  %9979 = xor i64 %9978, %9970
  %9980 = xor i64 %9979, %9965
  %9981 = mul i64 %9962, %9980
  %9982 = trunc i64 %9981 to i1
  %9983 = add i64 %1535, -3948208501681880314
  %9984 = add i64 4513909401566022466, %1535
  %9985 = sub i64 %9984, 8462117903247902780
  %9986 = or i64 %96, 87027753879138052
  %9987 = xor i64 %96, -1
  %9988 = and i64 %9987, 6622059259080421411
  %9989 = and i64 %96, -6622059259080421412
  %9990 = or i64 %9988, %9989
  %9991 = xor i64 6544689618577776423, %9990
  %9992 = xor i64 %96, -1
  %9993 = or i64 -87027753879138053, %9992
  %9994 = xor i64 %9993, -1
  %9995 = and i64 %9994, -1
  %9996 = or i64 %9991, %9995
  %9997 = add i64 %77, -5502658976531532089
  %9998 = sub i64 0, %77
  %9999 = sub i64 -5502658976531532089, %9998
  %10000 = xor i64 %9996, 3452560749787373851
  %10001 = xor i64 %10000, %9986
  %10002 = xor i64 %10001, %9983
  %10003 = xor i64 %10002, %9997
  %10004 = xor i64 %10003, %9985
  %10005 = xor i64 %10004, %9999
  %10006 = add i64 %1659, -7304137243047921615
  %10007 = sub i64 0, %1659
  %10008 = add i64 7304137243047921615, %10007
  %10009 = sub i64 0, %10008
  %10010 = sext i32 %49 to i64
  %10011 = and i64 %10010, 4655127662631276586
  %10012 = xor i64 %10010, -1
  %10013 = xor i64 4655127662631276586, %10012
  %10014 = and i64 %10013, 4655127662631276586
  %10015 = xor i64 %10006, %10014
  %10016 = xor i64 %10015, %10009
  %10017 = xor i64 %10016, 0
  %10018 = xor i64 %10017, %10011
  %10019 = mul i64 %10005, %10018
  %10020 = trunc i64 %10019 to i1
  %10021 = or i64 %290, 711364087619754584
  %10022 = xor i64 %290, -1
  %10023 = and i64 711364087619754584, %10022
  %10024 = add i64 %10023, %290
  %10025 = add i64 %1531, -2765928637352646944
  %10026 = add i64 1992138874371657156, %1531
  %10027 = sub i64 %10026, 4758067511724304100
  %10028 = xor i64 %10024, %10021
  %10029 = xor i64 %10028, %10025
  %10030 = xor i64 %10029, %10027
  %10031 = xor i64 %10030, -5678697765685705541
  %10032 = add i64 %1232, 2654458979125812879
  %10033 = add i64 842216465517662836, %1232
  %10034 = add i64 %10033, 1812242513608150043
  %10035 = or i64 %1400, 1029092709548149173
  %10036 = xor i64 %1400, -1
  %10037 = and i64 %10036, 1216414643407999601
  %10038 = and i64 %1400, -1216414643407999602
  %10039 = or i64 %10037, %10038
  %10040 = xor i64 2209438867703274436, %10039
  %10041 = xor i64 %1400, -1
  %10042 = or i64 -1029092709548149174, %10041
  %10043 = xor i64 %10042, -1
  %10044 = and i64 %10043, -1
  %10045 = or i64 %10040, %10044
  %10046 = or i64 %1242, -6827249266049953423
  %10047 = and i64 -6827249266049953423, %1242
  %10048 = xor i64 -6827249266049953423, %1242
  %10049 = or i64 %10047, %10048
  %10050 = xor i64 0, %10049
  %10051 = xor i64 %10050, %10032
  %10052 = xor i64 %10051, %10034
  %10053 = xor i64 %10052, %10035
  %10054 = xor i64 %10053, %10045
  %10055 = xor i64 %10054, %10046
  %10056 = mul i64 %10031, %10055
  %10057 = trunc i64 %10056 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537075, i64* %9805, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %9836, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %9876, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %9912, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %9950, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %9982, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %10020, i1* null, i1* null, i1 %10057, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %10058 = load i64, i64* %9805, align 8
  %10059 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %10058
  store i8* bitcast (i32 (float, float*, float*, i8*, float*)* @inner_loop to i8*), i8** %10059, align 8
  %10060 = alloca i64, align 8
  %10061 = and i64 %1139, 418425391545908857
  %10062 = xor i64 %1139, -1
  %10063 = or i64 -418425391545908858, %10062
  %10064 = xor i64 %10063, -1
  %10065 = and i64 %10064, -1
  %10066 = add i64 %1135, -5910610643786958107
  %10067 = add i64 -5475220795760466744, %1135
  %10068 = sub i64 %10067, 435389848026491363
  %10069 = or i64 %1343, -838594047171550051
  %10070 = and i64 -838594047171550051, %1343
  %10071 = xor i64 -838594047171550051, %1343
  %10072 = or i64 %10070, %10071
  %10073 = xor i64 -3142041964930825049, %10068
  %10074 = xor i64 %10073, %10072
  %10075 = xor i64 %10074, %10065
  %10076 = xor i64 %10075, %10069
  %10077 = xor i64 %10076, %10066
  %10078 = xor i64 %10077, %10061
  %10079 = and i64 %1396, 1594770292919377065
  %10080 = or i64 -1594770292919377066, %1396
  %10081 = sub i64 %10080, -1594770292919377066
  %10082 = add i64 %345, 1968902176113977343
  %10083 = and i64 1968902176113977343, %345
  %10084 = or i64 1968902176113977343, %345
  %10085 = add i64 %10083, %10084
  %10086 = and i64 %228, 8323568466312562223
  %10087 = xor i64 %228, -1
  %10088 = or i64 -8323568466312562224, %10087
  %10089 = xor i64 %10088, -1
  %10090 = and i64 %10089, -1
  %10091 = xor i64 %10079, %10081
  %10092 = xor i64 %10091, 0
  %10093 = xor i64 %10092, %10082
  %10094 = xor i64 %10093, %10090
  %10095 = xor i64 %10094, %10085
  %10096 = xor i64 %10095, %10086
  %10097 = mul i64 %10078, %10096
  %10098 = trunc i64 %10097 to i1
  %10099 = and i64 %383, 4874477850871408726
  %10100 = xor i64 %383, -1
  %10101 = xor i64 4874477850871408726, %10100
  %10102 = and i64 %10101, 4874477850871408726
  %10103 = add i64 %957, -6961027540089699658
  %10104 = add i64 -2886954543878394629, %957
  %10105 = add i64 %10104, -4074072996211305029
  %10106 = add i64 %228, 5389844702838868848
  %10107 = sub i64 0, %228
  %10108 = sub i64 5389844702838868848, %10107
  %10109 = xor i64 %10105, %10106
  %10110 = xor i64 %10109, %10108
  %10111 = xor i64 %10110, %10103
  %10112 = xor i64 %10111, %10099
  %10113 = xor i64 %10112, %10102
  %10114 = xor i64 %10113, 3222474880632262709
  %10115 = add i64 %1402, 529299992663798018
  %10116 = sub i64 0, %1402
  %10117 = add i64 -529299992663798018, %10116
  %10118 = sub i64 0, %10117
  %10119 = and i64 %1234, 6292889533067497796
  %10120 = xor i64 %1234, -1
  %10121 = xor i64 6292889533067497796, %10120
  %10122 = and i64 %10121, 6292889533067497796
  %10123 = and i64 %395, 3004550559948362318
  %10124 = or i64 -3004550559948362319, %395
  %10125 = sub i64 %10124, -3004550559948362319
  %10126 = xor i64 %10119, 0
  %10127 = xor i64 %10126, %10122
  %10128 = xor i64 %10127, %10118
  %10129 = xor i64 %10128, %10115
  %10130 = xor i64 %10129, %10125
  %10131 = xor i64 %10130, %10123
  %10132 = mul i64 %10114, %10131
  %10133 = trunc i64 %10132 to i1
  %10134 = add i64 %725, 1560655515208442020
  %10135 = add i64 -9013618778727275019, %725
  %10136 = sub i64 %10135, 7872469779773834577
  %10137 = or i64 %494, 4388290019958164068
  %10138 = and i64 4388290019958164068, %494
  %10139 = xor i64 4388290019958164068, %494
  %10140 = or i64 %10138, %10139
  %10141 = add i64 %1529, -6842114954110755041
  %10142 = xor i64 -6842114954110755041, %1529
  %10143 = and i64 -6842114954110755041, %1529
  %10144 = mul i64 2, %10143
  %10145 = add i64 %10142, %10144
  %10146 = xor i64 %10141, %10145
  %10147 = xor i64 %10146, %10137
  %10148 = xor i64 %10147, 5556527488818371019
  %10149 = xor i64 %10148, %10136
  %10150 = xor i64 %10149, %10140
  %10151 = xor i64 %10150, %10134
  %10152 = or i64 %1129, 6145524294995131069
  %10153 = xor i64 %1129, -1
  %10154 = and i64 %10153, 6134379774058833858
  %10155 = and i64 %1129, -6134379774058833859
  %10156 = or i64 %10154, %10155
  %10157 = xor i64 29546274158648703, %10156
  %10158 = xor i64 %1129, -1
  %10159 = or i64 -6145524294995131070, %10158
  %10160 = xor i64 %10159, -1
  %10161 = and i64 %10160, -1
  %10162 = or i64 %10157, %10161
  %10163 = or i64 %782, 5610025039668962964
  %10164 = xor i64 %782, -1
  %10165 = and i64 %10164, -6170570634200425062
  %10166 = and i64 %782, 6170570634200425061
  %10167 = or i64 %10165, %10166
  %10168 = xor i64 -1763323358884840690, %10167
  %10169 = xor i64 %782, -1
  %10170 = or i64 -5610025039668962965, %10169
  %10171 = xor i64 %10170, -1
  %10172 = and i64 %10171, -1
  %10173 = or i64 %10168, %10172
  %10174 = and i64 %391, -2787702617677423856
  %10175 = xor i64 %391, -1
  %10176 = xor i64 -2787702617677423856, %10175
  %10177 = and i64 %10176, -2787702617677423856
  %10178 = xor i64 %10152, %10163
  %10179 = xor i64 %10178, %10173
  %10180 = xor i64 %10179, %10177
  %10181 = xor i64 %10180, 0
  %10182 = xor i64 %10181, %10162
  %10183 = xor i64 %10182, %10174
  %10184 = mul i64 %10151, %10183
  %10185 = trunc i64 %10184 to i1
  %10186 = add i64 %992, 7138810607467929961
  %10187 = and i64 7138810607467929961, %992
  %10188 = or i64 7138810607467929961, %992
  %10189 = add i64 %10187, %10188
  %10190 = add i64 %1240, 6289390346295957788
  %10191 = sub i64 0, %1240
  %10192 = sub i64 6289390346295957788, %10191
  %10193 = xor i64 %10190, %10192
  %10194 = xor i64 %10193, -5489151055684924499
  %10195 = xor i64 %10194, %10189
  %10196 = xor i64 %10195, %10186
  %10197 = and i64 %1398, -1346763120559346899
  %10198 = xor i64 %1398, -1
  %10199 = xor i64 -1346763120559346899, %10198
  %10200 = and i64 %10199, -1346763120559346899
  %10201 = add i64 %788, 9074238961499250457
  %10202 = and i64 9074238961499250457, %788
  %10203 = or i64 9074238961499250457, %788
  %10204 = add i64 %10202, %10203
  %10205 = add i64 %1515, 286290701750063513
  %10206 = sub i64 0, %1515
  %10207 = sub i64 286290701750063513, %10206
  %10208 = xor i64 %10204, %10205
  %10209 = xor i64 %10208, %10201
  %10210 = xor i64 %10209, %10200
  %10211 = xor i64 %10210, %10207
  %10212 = xor i64 %10211, %10197
  %10213 = xor i64 %10212, 0
  %10214 = mul i64 %10196, %10213
  %10215 = trunc i64 %10214 to i1
  %10216 = add i64 %1588, 1982574630712253144
  %10217 = add i64 6545943079760679367, %1588
  %10218 = sub i64 %10217, 4563368449048426223
  %10219 = or i64 %727, -3641589537844232009
  %10220 = and i64 -3641589537844232009, %727
  %10221 = xor i64 -3641589537844232009, %727
  %10222 = or i64 %10220, %10221
  %10223 = xor i64 -4968356727786693229, %10216
  %10224 = xor i64 %10223, %10219
  %10225 = xor i64 %10224, %10222
  %10226 = xor i64 %10225, %10218
  %10227 = add i64 %1302, -129986658174959627
  %10228 = sub i64 0, %1302
  %10229 = sub i64 -129986658174959627, %10228
  %10230 = and i64 %101, 7168966022311255841
  %10231 = or i64 -7168966022311255842, %101
  %10232 = sub i64 %10231, -7168966022311255842
  %10233 = xor i64 %10230, %10227
  %10234 = xor i64 %10233, %10232
  %10235 = xor i64 %10234, 0
  %10236 = xor i64 %10235, %10229
  %10237 = mul i64 %10226, %10236
  %10238 = trunc i64 %10237 to i1
  %10239 = and i64 %286, -2591867116178870472
  %10240 = or i64 2591867116178870471, %286
  %10241 = sub i64 %10240, 2591867116178870471
  %10242 = add i64 %448, -7243603326904639338
  %10243 = add i64 -6781454920280273191, %448
  %10244 = sub i64 %10243, 462148406624366147
  %10245 = and i64 %831, -8670558479833657707
  %10246 = xor i64 %831, -1
  %10247 = or i64 8670558479833657706, %10246
  %10248 = xor i64 %10247, -1
  %10249 = and i64 %10248, -1
  %10250 = xor i64 %10245, %10249
  %10251 = xor i64 %10250, %10241
  %10252 = xor i64 %10251, %10239
  %10253 = xor i64 %10252, -8610218511829070235
  %10254 = xor i64 %10253, %10244
  %10255 = xor i64 %10254, %10242
  %10256 = or i64 %236, 5145023000138906391
  %10257 = xor i64 %236, -1
  %10258 = and i64 %10257, 7049071024192259543
  %10259 = and i64 %236, -7049071024192259544
  %10260 = or i64 %10258, %10259
  %10261 = xor i64 2789311015198981824, %10260
  %10262 = xor i64 %236, -1
  %10263 = or i64 -5145023000138906392, %10262
  %10264 = xor i64 %10263, -1
  %10265 = and i64 %10264, -1
  %10266 = or i64 %10261, %10265
  %10267 = add i64 %910, 4122089136014786079
  %10268 = add i64 -1240974756810390938, %910
  %10269 = add i64 %10268, 5363063892825177017
  %10270 = xor i64 %10256, 0
  %10271 = xor i64 %10270, %10266
  %10272 = xor i64 %10271, %10269
  %10273 = xor i64 %10272, %10267
  %10274 = mul i64 %10255, %10273
  %10275 = trunc i64 %10274 to i1
  %10276 = or i64 %686, -7856902982546113151
  %10277 = and i64 -7856902982546113151, %686
  %10278 = xor i64 -7856902982546113151, %686
  %10279 = or i64 %10277, %10278
  %10280 = add i64 %543, -6297642482620045729
  %10281 = add i64 7908881799046957063, %543
  %10282 = sub i64 %10281, -4240219792042548824
  %10283 = add i64 %282, -3156988474828024799
  %10284 = and i64 -3156988474828024799, %282
  %10285 = or i64 -3156988474828024799, %282
  %10286 = add i64 %10284, %10285
  %10287 = xor i64 %10283, %10279
  %10288 = xor i64 %10287, %10276
  %10289 = xor i64 %10288, %10280
  %10290 = xor i64 %10289, %10286
  %10291 = xor i64 %10290, %10282
  %10292 = xor i64 %10291, -1704692156932021053
  %10293 = or i64 %1398, -4497966107924770195
  %10294 = and i64 -4497966107924770195, %1398
  %10295 = xor i64 -4497966107924770195, %1398
  %10296 = or i64 %10294, %10295
  %10297 = and i64 %910, 6256346151994782223
  %10298 = xor i64 %910, -1
  %10299 = xor i64 6256346151994782223, %10298
  %10300 = and i64 %10299, 6256346151994782223
  %10301 = add i64 %678, -9047433699733369055
  %10302 = and i64 -9047433699733369055, %678
  %10303 = or i64 -9047433699733369055, %678
  %10304 = add i64 %10302, %10303
  %10305 = xor i64 %10296, %10297
  %10306 = xor i64 %10305, %10300
  %10307 = xor i64 %10306, %10301
  %10308 = xor i64 %10307, %10304
  %10309 = xor i64 %10308, %10293
  %10310 = xor i64 %10309, 0
  %10311 = mul i64 %10292, %10310
  %10312 = trunc i64 %10311 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %10060, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 %10098, i1* null, i1 %10133, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 %10185, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %10215, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %10238, i1 %10275, i1 %10312, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %10313 = load i64, i64* %10060, align 8
  %10314 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %10313
  store i8* bitcast (i1 (double, i32, float*, double*, i32*, i32*, i32*)* @main_loop..split.17 to i8*), i8** %10314, align 8
  %10315 = add i64 %1290, 2360033570914966019
  %10316 = sub i64 0, %1290
  %10317 = add i64 -2360033570914966019, %10316
  %10318 = sub i64 0, %10317
  %10319 = and i64 %778, 5298259678810125554
  %10320 = or i64 -5298259678810125555, %778
  %10321 = sub i64 %10320, -5298259678810125555
  %10322 = xor i64 4886462068578968249, %10321
  %10323 = xor i64 %10322, %10319
  %10324 = xor i64 %10323, %10318
  %10325 = xor i64 %10324, %10315
  %10326 = or i64 %1525, -1963012472080573142
  %10327 = xor i64 %1525, -1
  %10328 = and i64 -1963012472080573142, %10327
  %10329 = add i64 %10328, %1525
  %10330 = add i64 %678, 7570969957836014540
  %10331 = add i64 4652992613251925114, %678
  %10332 = sub i64 %10331, -2917977344584089426
  %10333 = xor i64 %10326, %10332
  %10334 = xor i64 %10333, %10329
  %10335 = xor i64 %10334, %10330
  %10336 = xor i64 %10335, 3521744130700051337
  %10337 = mul i64 %10325, %10336
  %10338 = trunc i64 %10337 to i32
  %10339 = alloca i64, i32 %10338, align 8
  %10340 = add i64 %381, -3306657995159233102
  %10341 = sub i64 0, %381
  %10342 = add i64 3306657995159233102, %10341
  %10343 = sub i64 0, %10342
  %10344 = or i64 %1651, -4302070984008969031
  %10345 = xor i64 %1651, -1
  %10346 = and i64 -4302070984008969031, %10345
  %10347 = add i64 %10346, %1651
  %10348 = xor i64 %10343, %10344
  %10349 = xor i64 %10348, -5252038007699430545
  %10350 = xor i64 %10349, %10347
  %10351 = xor i64 %10350, %10340
  %10352 = add i64 %222, -7457107361495317099
  %10353 = and i64 -7457107361495317099, %222
  %10354 = or i64 -7457107361495317099, %222
  %10355 = add i64 %10353, %10354
  %10356 = sext i32 %49 to i64
  %10357 = and i64 %10356, 5430891840297843464
  %10358 = xor i64 %10356, -1
  %10359 = xor i64 5430891840297843464, %10358
  %10360 = and i64 %10359, 5430891840297843464
  %10361 = xor i64 %10360, %10357
  %10362 = xor i64 %10361, %10355
  %10363 = xor i64 %10362, 0
  %10364 = xor i64 %10363, %10352
  %10365 = mul i64 %10351, %10364
  %10366 = trunc i64 %10365 to i1
  %10367 = add i64 %1519, 2738167098431238652
  %10368 = xor i64 2738167098431238652, %1519
  %10369 = and i64 2738167098431238652, %1519
  %10370 = mul i64 2, %10369
  %10371 = add i64 %10368, %10370
  %10372 = add i64 %910, -1385482624268842393
  %10373 = add i64 1259186415221652142, %910
  %10374 = add i64 %10373, -2644669039490494535
  %10375 = xor i64 %10371, %10372
  %10376 = xor i64 %10375, %10374
  %10377 = xor i64 %10376, %10367
  %10378 = xor i64 %10377, 9190162341127503987
  %10379 = add i64 %770, -2910566077945258612
  %10380 = add i64 3941546842433677659, %770
  %10381 = sub i64 %10380, 6852112920378936271
  %10382 = and i64 %1141, 7737576238343971005
  %10383 = xor i64 %1141, -1
  %10384 = xor i64 7737576238343971005, %10383
  %10385 = and i64 %10384, 7737576238343971005
  %10386 = xor i64 %10379, %10385
  %10387 = xor i64 %10386, 0
  %10388 = xor i64 %10387, %10382
  %10389 = xor i64 %10388, %10381
  %10390 = mul i64 %10378, %10389
  %10391 = trunc i64 %10390 to i32
  %10392 = or i64 %1541, -4377726695669023798
  %10393 = xor i64 %1541, -1
  %10394 = and i64 -4377726695669023798, %10393
  %10395 = add i64 %10394, %1541
  %10396 = and i64 %668, -2175667609365831723
  %10397 = xor i64 %668, -1
  %10398 = or i64 2175667609365831722, %10397
  %10399 = xor i64 %10398, -1
  %10400 = and i64 %10399, -1
  %10401 = add i64 %1517, -6779142793597672070
  %10402 = sub i64 0, %1517
  %10403 = add i64 6779142793597672070, %10402
  %10404 = sub i64 0, %10403
  %10405 = xor i64 %10395, %10400
  %10406 = xor i64 %10405, %10392
  %10407 = xor i64 %10406, %10396
  %10408 = xor i64 %10407, 7177858284706401611
  %10409 = xor i64 %10408, %10404
  %10410 = xor i64 %10409, %10401
  %10411 = add i64 %1296, 7279609876193478663
  %10412 = add i64 3339684905487689402, %1296
  %10413 = sub i64 %10412, -3939924970705789261
  %10414 = and i64 %1513, -4540385689826803271
  %10415 = or i64 4540385689826803270, %1513
  %10416 = sub i64 %10415, 4540385689826803270
  %10417 = add i64 %53, -2855503224598064590
  %10418 = add i64 2392561990693385336, %53
  %10419 = add i64 %10418, -5248065215291449926
  %10420 = xor i64 %10417, %10416
  %10421 = xor i64 %10420, 0
  %10422 = xor i64 %10421, %10413
  %10423 = xor i64 %10422, %10419
  %10424 = xor i64 %10423, %10414
  %10425 = xor i64 %10424, %10411
  %10426 = mul i64 %10410, %10425
  %10427 = trunc i64 %10426 to i1
  %10428 = sext i32 %49 to i64
  %10429 = and i64 %10428, -4862596777133217104
  %10430 = or i64 4862596777133217103, %10428
  %10431 = sub i64 %10430, 4862596777133217103
  %10432 = add i64 %770, -6625804915100134082
  %10433 = and i64 -6625804915100134082, %770
  %10434 = or i64 -6625804915100134082, %770
  %10435 = add i64 %10433, %10434
  %10436 = add i64 %1491, -8779059139403379208
  %10437 = sub i64 0, %1491
  %10438 = sub i64 -8779059139403379208, %10437
  %10439 = xor i64 %10429, %10436
  %10440 = xor i64 %10439, %10432
  %10441 = xor i64 %10440, %10435
  %10442 = xor i64 %10441, 1180465929288634975
  %10443 = xor i64 %10442, %10438
  %10444 = xor i64 %10443, %10431
  %10445 = and i64 %1521, 3317699139184954242
  %10446 = xor i64 %1521, -1
  %10447 = xor i64 3317699139184954242, %10446
  %10448 = and i64 %10447, 3317699139184954242
  %10449 = and i64 %1238, 7996904325564270874
  %10450 = xor i64 %1238, -1
  %10451 = xor i64 7996904325564270874, %10450
  %10452 = and i64 %10451, 7996904325564270874
  %10453 = xor i64 0, %10452
  %10454 = xor i64 %10453, %10445
  %10455 = xor i64 %10454, %10449
  %10456 = xor i64 %10455, %10448
  %10457 = mul i64 %10444, %10456
  %10458 = trunc i64 %10457 to i1
  %10459 = or i64 %1183, 8078155147610327915
  %10460 = xor i64 %1183, -1
  %10461 = and i64 8078155147610327915, %10460
  %10462 = add i64 %10461, %1183
  %10463 = add i64 %1410, -3519958539368541414
  %10464 = and i64 -3519958539368541414, %1410
  %10465 = or i64 -3519958539368541414, %1410
  %10466 = add i64 %10464, %10465
  %10467 = and i64 %727, -7966889562540529761
  %10468 = xor i64 %727, -1
  %10469 = or i64 7966889562540529760, %10468
  %10470 = xor i64 %10469, -1
  %10471 = and i64 %10470, -1
  %10472 = xor i64 %10459, %10462
  %10473 = xor i64 %10472, %10467
  %10474 = xor i64 %10473, 72652114811198837
  %10475 = xor i64 %10474, %10463
  %10476 = xor i64 %10475, %10466
  %10477 = xor i64 %10476, %10471
  %10478 = add i64 %385, 1355580075418575835
  %10479 = xor i64 1355580075418575835, %385
  %10480 = and i64 1355580075418575835, %385
  %10481 = mul i64 2, %10480
  %10482 = add i64 %10479, %10481
  %10483 = and i64 %829, 7794871773073264581
  %10484 = or i64 -7794871773073264582, %829
  %10485 = sub i64 %10484, -7794871773073264582
  %10486 = and i64 %794, -1047943125579166403
  %10487 = xor i64 %794, -1
  %10488 = or i64 1047943125579166402, %10487
  %10489 = xor i64 %10488, -1
  %10490 = and i64 %10489, -1
  %10491 = xor i64 0, %10483
  %10492 = xor i64 %10491, %10485
  %10493 = xor i64 %10492, %10478
  %10494 = xor i64 %10493, %10482
  %10495 = xor i64 %10494, %10490
  %10496 = xor i64 %10495, %10486
  %10497 = mul i64 %10477, %10496
  %10498 = add i64 %1493, 7823689827668754438
  %10499 = sub i64 0, %1493
  %10500 = add i64 -7823689827668754438, %10499
  %10501 = sub i64 0, %10500
  %10502 = and i64 %1511, 3491887441668674501
  %10503 = or i64 -3491887441668674502, %1511
  %10504 = sub i64 %10503, -3491887441668674502
  %10505 = add i64 %232, -3769480895500483558
  %10506 = add i64 4594230807727231328, %232
  %10507 = add i64 %10506, -8363711703227714886
  %10508 = xor i64 %10498, %10501
  %10509 = xor i64 %10508, %10504
  %10510 = xor i64 %10509, -4851684909781938835
  %10511 = xor i64 %10510, %10505
  %10512 = xor i64 %10511, %10507
  %10513 = xor i64 %10512, %10502
  %10514 = and i64 %1343, 7903858819981774354
  %10515 = xor i64 %1343, -1
  %10516 = or i64 -7903858819981774355, %10515
  %10517 = xor i64 %10516, -1
  %10518 = and i64 %10517, -1
  %10519 = and i64 %1139, 3219832100913334021
  %10520 = or i64 -3219832100913334022, %1139
  %10521 = sub i64 %10520, -3219832100913334022
  %10522 = xor i64 %10519, %10518
  %10523 = xor i64 %10522, %10521
  %10524 = xor i64 %10523, %10514
  %10525 = xor i64 %10524, 0
  %10526 = mul i64 %10513, %10525
  %10527 = trunc i64 %10526 to i1
  %10528 = or i64 %1410, 2965247791384525621
  %10529 = xor i64 %1410, -1
  %10530 = and i64 %10529, 3337230717583109172
  %10531 = and i64 %1410, -3337230717583109173
  %10532 = or i64 %10530, %10531
  %10533 = xor i64 537780483588380417, %10532
  %10534 = xor i64 %1410, -1
  %10535 = or i64 -2965247791384525622, %10534
  %10536 = xor i64 %10535, -1
  %10537 = and i64 %10536, -1
  %10538 = or i64 %10533, %10537
  %10539 = add i64 %1133, 2195820238602983097
  %10540 = and i64 2195820238602983097, %1133
  %10541 = or i64 2195820238602983097, %1133
  %10542 = add i64 %10540, %10541
  %10543 = xor i64 %10528, %10538
  %10544 = xor i64 %10543, -5795141486120679849
  %10545 = xor i64 %10544, %10542
  %10546 = xor i64 %10545, %10539
  %10547 = or i64 %912, 8395127024109534384
  %10548 = and i64 8395127024109534384, %912
  %10549 = xor i64 8395127024109534384, %912
  %10550 = or i64 %10548, %10549
  %10551 = add i64 %1645, -7282080344096608412
  %10552 = and i64 -7282080344096608412, %1645
  %10553 = or i64 -7282080344096608412, %1645
  %10554 = add i64 %10552, %10553
  %10555 = add i64 %1531, -4603244155878963884
  %10556 = add i64 -448703913184472437, %1531
  %10557 = add i64 %10556, -4154540242694491447
  %10558 = xor i64 0, %10555
  %10559 = xor i64 %10558, %10557
  %10560 = xor i64 %10559, %10551
  %10561 = xor i64 %10560, %10550
  %10562 = xor i64 %10561, %10547
  %10563 = xor i64 %10562, %10554
  %10564 = mul i64 %10546, %10563
  %10565 = trunc i64 %10564 to i1
  %10566 = and i64 %910, 8868933812408127943
  %10567 = xor i64 %910, -1
  %10568 = xor i64 8868933812408127943, %10567
  %10569 = and i64 %10568, 8868933812408127943
  %10570 = and i64 %1505, -6768437078307252900
  %10571 = or i64 6768437078307252899, %1505
  %10572 = sub i64 %10571, 6768437078307252899
  %10573 = xor i64 -223436215055035137, %10572
  %10574 = xor i64 %10573, %10566
  %10575 = xor i64 %10574, %10569
  %10576 = xor i64 %10575, %10570
  %10577 = or i64 %784, -1131338986344990790
  %10578 = and i64 -1131338986344990790, %784
  %10579 = xor i64 -1131338986344990790, %784
  %10580 = or i64 %10578, %10579
  %10581 = or i64 %76, 8703813878943979842
  %10582 = xor i64 %76, -1
  %10583 = and i64 8703813878943979842, %10582
  %10584 = add i64 %10583, %76
  %10585 = or i64 %391, 9040859775763259352
  %10586 = and i64 9040859775763259352, %391
  %10587 = xor i64 9040859775763259352, %391
  %10588 = or i64 %10586, %10587
  %10589 = xor i64 %10580, %10588
  %10590 = xor i64 %10589, %10577
  %10591 = xor i64 %10590, %10584
  %10592 = xor i64 %10591, %10585
  %10593 = xor i64 %10592, %10581
  %10594 = xor i64 %10593, 0
  %10595 = mul i64 %10576, %10594
  %10596 = trunc i64 %10595 to i1
  %10597 = or i64 %1497, -7280124301389756416
  %10598 = xor i64 %1497, -1
  %10599 = and i64 %10598, 4309883961705650610
  %10600 = and i64 %1497, -4309883961705650611
  %10601 = or i64 %10599, %10600
  %10602 = xor i64 -6829703174569864782, %10601
  %10603 = xor i64 %1497, -1
  %10604 = or i64 7280124301389756415, %10603
  %10605 = xor i64 %10604, -1
  %10606 = and i64 %10605, -1
  %10607 = or i64 %10602, %10606
  %10608 = add i64 %774, 8867350101444824567
  %10609 = add i64 -3421583528577615894, %774
  %10610 = sub i64 %10609, 6157810443687111155
  %10611 = and i64 %994, 1010418555908461921
  %10612 = xor i64 %994, -1
  %10613 = xor i64 1010418555908461921, %10612
  %10614 = and i64 %10613, 1010418555908461921
  %10615 = xor i64 %10610, %10614
  %10616 = xor i64 %10615, %10608
  %10617 = xor i64 %10616, %10597
  %10618 = xor i64 %10617, %10611
  %10619 = xor i64 %10618, -1705638886752995477
  %10620 = xor i64 %10619, %10607
  %10621 = or i64 %1228, -6447061610583152181
  %10622 = xor i64 %1228, -1
  %10623 = and i64 %10622, 6200161632263051552
  %10624 = and i64 %1228, -6200161632263051553
  %10625 = or i64 %10623, %10624
  %10626 = xor i64 -1113504321700777749, %10625
  %10627 = xor i64 %1228, -1
  %10628 = or i64 6447061610583152180, %10627
  %10629 = xor i64 %10628, -1
  %10630 = and i64 %10629, -1
  %10631 = or i64 %10626, %10630
  %10632 = add i64 %684, -6975212222643121199
  %10633 = sub i64 0, %684
  %10634 = sub i64 -6975212222643121199, %10633
  %10635 = and i64 %1505, 3548716057914924766
  %10636 = xor i64 %1505, -1
  %10637 = or i64 -3548716057914924767, %10636
  %10638 = xor i64 %10637, -1
  %10639 = and i64 %10638, -1
  %10640 = xor i64 %10639, %10635
  %10641 = xor i64 %10640, 0
  %10642 = xor i64 %10641, %10632
  %10643 = xor i64 %10642, %10634
  %10644 = xor i64 %10643, %10631
  %10645 = xor i64 %10644, %10621
  %10646 = mul i64 %10620, %10645
  %10647 = trunc i64 %10646 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537084, i64* %10339, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %10366, i1* null, i32 %10391, i32 0, i1* null, i1* null, i64 0, i1 %10427, i1* null, i1 %10458, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %10497, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 %10527, i1 %10565, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %10596, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %10647, i32 0, i1* null, i1* null)
  %10648 = load i64, i64* %10339, align 8
  %10649 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %10648
  store i8* bitcast (i1 (i32, i1, i1, i32*, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*)* @main_loop.extracted.18 to i8*), i8** %10649, align 8
  %10650 = alloca i64, align 8
  %10651 = add i64 %284, -2055216851595789216
  %10652 = xor i64 -2055216851595789216, %284
  %10653 = and i64 -2055216851595789216, %284
  %10654 = mul i64 2, %10653
  %10655 = add i64 %10652, %10654
  %10656 = and i64 %1341, -1898173202460556844
  %10657 = xor i64 %1341, -1
  %10658 = xor i64 -1898173202460556844, %10657
  %10659 = and i64 %10658, -1898173202460556844
  %10660 = add i64 %782, 2418028103208848757
  %10661 = xor i64 2418028103208848757, %782
  %10662 = and i64 2418028103208848757, %782
  %10663 = mul i64 2, %10662
  %10664 = add i64 %10661, %10663
  %10665 = xor i64 %10655, -6714658000460042611
  %10666 = xor i64 %10665, %10659
  %10667 = xor i64 %10666, %10660
  %10668 = xor i64 %10667, %10651
  %10669 = xor i64 %10668, %10656
  %10670 = xor i64 %10669, %10664
  %10671 = or i64 %76, -8161045534069206369
  %10672 = xor i64 %76, -1
  %10673 = and i64 -8161045534069206369, %10672
  %10674 = add i64 %10673, %76
  %10675 = and i64 %1523, -5952279126944087051
  %10676 = or i64 5952279126944087050, %1523
  %10677 = sub i64 %10676, 5952279126944087050
  %10678 = or i64 %1531, 4377063057374349650
  %10679 = xor i64 %1531, -1
  %10680 = and i64 4377063057374349650, %10679
  %10681 = add i64 %10680, %1531
  %10682 = xor i64 0, %10678
  %10683 = xor i64 %10682, %10675
  %10684 = xor i64 %10683, %10677
  %10685 = xor i64 %10684, %10674
  %10686 = xor i64 %10685, %10671
  %10687 = xor i64 %10686, %10681
  %10688 = mul i64 %10670, %10687
  %10689 = trunc i64 %10688 to i32
  %10690 = and i64 %831, -8414777948178113627
  %10691 = xor i64 %831, -1
  %10692 = or i64 8414777948178113626, %10691
  %10693 = xor i64 %10692, -1
  %10694 = and i64 %10693, -1
  %10695 = or i64 %868, -4058994641257747924
  %10696 = xor i64 %868, -1
  %10697 = and i64 -4058994641257747924, %10696
  %10698 = add i64 %10697, %868
  %10699 = xor i64 -6140251536007218293, %10694
  %10700 = xor i64 %10699, %10698
  %10701 = xor i64 %10700, %10695
  %10702 = xor i64 %10701, %10690
  %10703 = and i64 %224, -8104143259300924999
  %10704 = xor i64 %224, -1
  %10705 = xor i64 -8104143259300924999, %10704
  %10706 = and i64 %10705, -8104143259300924999
  %10707 = add i64 %1398, 4867578347225385427
  %10708 = sub i64 0, %1398
  %10709 = add i64 -4867578347225385427, %10708
  %10710 = sub i64 0, %10709
  %10711 = or i64 %543, -4313524969944792399
  %10712 = xor i64 %543, -1
  %10713 = and i64 -4313524969944792399, %10712
  %10714 = add i64 %10713, %543
  %10715 = xor i64 %10707, %10714
  %10716 = xor i64 %10715, 0
  %10717 = xor i64 %10716, %10703
  %10718 = xor i64 %10717, %10710
  %10719 = xor i64 %10718, %10711
  %10720 = xor i64 %10719, %10706
  %10721 = mul i64 %10702, %10720
  %10722 = sext i32 %72 to i64
  %10723 = add i64 %10722, -7323447106367252788
  %10724 = sub i64 0, %10722
  %10725 = add i64 7323447106367252788, %10724
  %10726 = sub i64 0, %10725
  %10727 = or i64 %387, 8513120811030693843
  %10728 = and i64 8513120811030693843, %387
  %10729 = xor i64 8513120811030693843, %387
  %10730 = or i64 %10728, %10729
  %10731 = xor i64 3908654551347801513, %10727
  %10732 = xor i64 %10731, %10726
  %10733 = xor i64 %10732, %10730
  %10734 = xor i64 %10733, %10723
  %10735 = add i64 %1543, -6925326862509758169
  %10736 = sub i64 0, %1543
  %10737 = sub i64 -6925326862509758169, %10736
  %10738 = or i64 %1143, -1019135269215998297
  %10739 = xor i64 %1143, -1
  %10740 = and i64 -1019135269215998297, %10739
  %10741 = add i64 %10740, %1143
  %10742 = xor i64 %10737, 0
  %10743 = xor i64 %10742, %10738
  %10744 = xor i64 %10743, %10741
  %10745 = xor i64 %10744, %10735
  %10746 = mul i64 %10734, %10745
  %10747 = trunc i64 %10746 to i1
  %10748 = add i64 %561, -2017377106294538983
  %10749 = add i64 8846658248207641206, %561
  %10750 = sub i64 %10749, -7582708719207371427
  %10751 = and i64 %559, 4112464698467794874
  %10752 = xor i64 %559, -1
  %10753 = xor i64 4112464698467794874, %10752
  %10754 = and i64 %10753, 4112464698467794874
  %10755 = xor i64 %10750, %10748
  %10756 = xor i64 %10755, %10754
  %10757 = xor i64 %10756, 2066648022050930775
  %10758 = xor i64 %10757, %10751
  %10759 = add i64 %727, 2908805800031277872
  %10760 = and i64 2908805800031277872, %727
  %10761 = or i64 2908805800031277872, %727
  %10762 = add i64 %10760, %10761
  %10763 = add i64 %1507, -3102789537942515579
  %10764 = xor i64 -3102789537942515579, %1507
  %10765 = and i64 -3102789537942515579, %1507
  %10766 = mul i64 2, %10765
  %10767 = add i64 %10764, %10766
  %10768 = or i64 %920, -8492401826532401213
  %10769 = xor i64 %920, -1
  %10770 = and i64 -8492401826532401213, %10769
  %10771 = add i64 %10770, %920
  %10772 = xor i64 %10767, %10763
  %10773 = xor i64 %10772, %10768
  %10774 = xor i64 %10773, %10759
  %10775 = xor i64 %10774, %10771
  %10776 = xor i64 %10775, 0
  %10777 = xor i64 %10776, %10762
  %10778 = mul i64 %10758, %10777
  %10779 = trunc i64 %10778 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537080, i64* %10650, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %10689, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %10721, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 %10747, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %10779, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %10780 = load i64, i64* %10650, align 8
  %10781 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %10780
  store i8* bitcast (void ()* @main_loop..split.19 to i8*), i8** %10781, align 8
  %10782 = alloca i64, align 8
  %10783 = add i64 %450, 7303299178360969443
  %10784 = add i64 -248730625994074379, %450
  %10785 = sub i64 %10784, -7552029804355043822
  %10786 = add i64 %97, 1878161024335272034
  %10787 = sub i64 0, %97
  %10788 = add i64 -1878161024335272034, %10787
  %10789 = sub i64 0, %10788
  %10790 = xor i64 %10785, %10783
  %10791 = xor i64 %10790, %10789
  %10792 = xor i64 %10791, %10786
  %10793 = xor i64 %10792, -64753154724323127
  %10794 = and i64 %1406, 100138194297426689
  %10795 = xor i64 %1406, -1
  %10796 = or i64 -100138194297426690, %10795
  %10797 = xor i64 %10796, -1
  %10798 = and i64 %10797, -1
  %10799 = or i64 %1038, 130367568780734129
  %10800 = xor i64 %1038, -1
  %10801 = and i64 %10800, 4642994898833997842
  %10802 = and i64 %1038, -4642994898833997843
  %10803 = or i64 %10801, %10802
  %10804 = xor i64 4728801453842083491, %10803
  %10805 = xor i64 %1038, -1
  %10806 = or i64 -130367568780734130, %10805
  %10807 = xor i64 %10806, -1
  %10808 = and i64 %10807, -1
  %10809 = or i64 %10804, %10808
  %10810 = xor i64 0, %10799
  %10811 = xor i64 %10810, %10794
  %10812 = xor i64 %10811, %10809
  %10813 = xor i64 %10812, %10798
  %10814 = mul i64 %10793, %10813
  %10815 = trunc i64 %10814 to i1
  %10816 = or i64 %1515, -141125378889286094
  %10817 = xor i64 %1515, -1
  %10818 = and i64 -141125378889286094, %10817
  %10819 = add i64 %10818, %1515
  %10820 = or i64 %494, -1299529023446891153
  %10821 = and i64 -1299529023446891153, %494
  %10822 = xor i64 -1299529023446891153, %494
  %10823 = or i64 %10821, %10822
  %10824 = add i64 %1298, 7427854028624270222
  %10825 = and i64 7427854028624270222, %1298
  %10826 = or i64 7427854028624270222, %1298
  %10827 = add i64 %10825, %10826
  %10828 = xor i64 -4312085057400892189, %10823
  %10829 = xor i64 %10828, %10816
  %10830 = xor i64 %10829, %10827
  %10831 = xor i64 %10830, %10820
  %10832 = xor i64 %10831, %10819
  %10833 = xor i64 %10832, %10824
  %10834 = and i64 %1535, 7232853398460299474
  %10835 = or i64 -7232853398460299475, %1535
  %10836 = sub i64 %10835, -7232853398460299475
  %10837 = or i64 %563, -4270609936767508007
  %10838 = xor i64 %563, -1
  %10839 = and i64 %10838, 1666752288472878178
  %10840 = and i64 %563, -1666752288472878179
  %10841 = or i64 %10839, %10840
  %10842 = xor i64 -3199032914234380869, %10841
  %10843 = xor i64 %563, -1
  %10844 = or i64 4270609936767508006, %10843
  %10845 = xor i64 %10844, -1
  %10846 = and i64 %10845, -1
  %10847 = or i64 %10842, %10846
  %10848 = or i64 %395, -9081894984778417839
  %10849 = and i64 -9081894984778417839, %395
  %10850 = xor i64 -9081894984778417839, %395
  %10851 = or i64 %10849, %10850
  %10852 = xor i64 %10848, %10834
  %10853 = xor i64 %10852, 0
  %10854 = xor i64 %10853, %10836
  %10855 = xor i64 %10854, %10837
  %10856 = xor i64 %10855, %10851
  %10857 = xor i64 %10856, %10847
  %10858 = mul i64 %10833, %10857
  %10859 = and i64 %684, -2584472498225546496
  %10860 = xor i64 %684, -1
  %10861 = xor i64 -2584472498225546496, %10860
  %10862 = and i64 %10861, -2584472498225546496
  %10863 = add i64 %1341, -54381570956269772
  %10864 = and i64 -54381570956269772, %1341
  %10865 = or i64 -54381570956269772, %1341
  %10866 = add i64 %10864, %10865
  %10867 = and i64 %1655, -2503841840722967592
  %10868 = xor i64 %1655, -1
  %10869 = or i64 2503841840722967591, %10868
  %10870 = xor i64 %10869, -1
  %10871 = and i64 %10870, -1
  %10872 = xor i64 %10859, %10871
  %10873 = xor i64 %10872, %10866
  %10874 = xor i64 %10873, %10867
  %10875 = xor i64 %10874, %10862
  %10876 = xor i64 %10875, %10863
  %10877 = xor i64 %10876, 5631190012930560501
  %10878 = or i64 %1398, -556508900780448646
  %10879 = and i64 -556508900780448646, %1398
  %10880 = xor i64 -556508900780448646, %1398
  %10881 = or i64 %10879, %10880
  %10882 = or i64 %69, -7214209683920498892
  %10883 = xor i64 %69, -1
  %10884 = and i64 -7214209683920498892, %10883
  %10885 = add i64 %10884, %69
  %10886 = sext i32 %170 to i64
  %10887 = or i64 %10886, -400793017589135669
  %10888 = and i64 -400793017589135669, %10886
  %10889 = xor i64 -400793017589135669, %10886
  %10890 = or i64 %10888, %10889
  %10891 = xor i64 %10881, %10885
  %10892 = xor i64 %10891, %10882
  %10893 = xor i64 %10892, 0
  %10894 = xor i64 %10893, %10878
  %10895 = xor i64 %10894, %10890
  %10896 = xor i64 %10895, %10887
  %10897 = mul i64 %10877, %10896
  %10898 = trunc i64 %10897 to i32
  %10899 = add i64 %1131, 196106977164785914
  %10900 = sub i64 0, %1131
  %10901 = sub i64 196106977164785914, %10900
  %10902 = sext i32 %72 to i64
  %10903 = or i64 %10902, -505275539866611735
  %10904 = and i64 -505275539866611735, %10902
  %10905 = xor i64 -505275539866611735, %10902
  %10906 = or i64 %10904, %10905
  %10907 = xor i64 -6851775900940012663, %10903
  %10908 = xor i64 %10907, %10906
  %10909 = xor i64 %10908, %10901
  %10910 = xor i64 %10909, %10899
  %10911 = or i64 %347, 9016954236094522826
  %10912 = xor i64 %347, -1
  %10913 = and i64 9016954236094522826, %10912
  %10914 = add i64 %10913, %347
  %10915 = or i64 %684, 2039026230227560332
  %10916 = and i64 2039026230227560332, %684
  %10917 = xor i64 2039026230227560332, %684
  %10918 = or i64 %10916, %10917
  %10919 = and i64 %280, 6553401015636040868
  %10920 = or i64 -6553401015636040869, %280
  %10921 = sub i64 %10920, -6553401015636040869
  %10922 = xor i64 %10919, %10921
  %10923 = xor i64 %10922, %10918
  %10924 = xor i64 %10923, %10915
  %10925 = xor i64 %10924, %10914
  %10926 = xor i64 %10925, 0
  %10927 = xor i64 %10926, %10911
  %10928 = mul i64 %10910, %10927
  %10929 = trunc i64 %10928 to i32
  %10930 = or i64 %1495, 6706676511739876457
  %10931 = xor i64 %1495, -1
  %10932 = and i64 %10931, -3465081093390124906
  %10933 = and i64 %1495, 3465081093390124905
  %10934 = or i64 %10932, %10933
  %10935 = xor i64 -7855568732624966401, %10934
  %10936 = xor i64 %1495, -1
  %10937 = or i64 -6706676511739876458, %10936
  %10938 = xor i64 %10937, -1
  %10939 = and i64 %10938, -1
  %10940 = or i64 %10935, %10939
  %10941 = add i64 %1406, 2925076563198201620
  %10942 = add i64 6070895429689099997, %1406
  %10943 = sub i64 %10942, 3145818866490898377
  %10944 = and i64 %684, -6292539175555456088
  %10945 = xor i64 %684, -1
  %10946 = or i64 6292539175555456087, %10945
  %10947 = xor i64 %10946, -1
  %10948 = and i64 %10947, -1
  %10949 = xor i64 -8334908952170677749, %10944
  %10950 = xor i64 %10949, %10948
  %10951 = xor i64 %10950, %10930
  %10952 = xor i64 %10951, %10941
  %10953 = xor i64 %10952, %10940
  %10954 = xor i64 %10953, %10943
  %10955 = and i64 %69, -1020912900234842888
  %10956 = or i64 1020912900234842887, %69
  %10957 = sub i64 %10956, 1020912900234842887
  %10958 = or i64 %784, -3868712514212500035
  %10959 = xor i64 %784, -1
  %10960 = and i64 %10959, -1420425720590166720
  %10961 = and i64 %784, 1420425720590166719
  %10962 = or i64 %10960, %10961
  %10963 = xor i64 2739930345924491517, %10962
  %10964 = xor i64 %784, -1
  %10965 = or i64 3868712514212500034, %10964
  %10966 = xor i64 %10965, -1
  %10967 = and i64 %10966, -1
  %10968 = or i64 %10963, %10967
  %10969 = and i64 %494, 7676328089383425449
  %10970 = xor i64 %494, -1
  %10971 = xor i64 7676328089383425449, %10970
  %10972 = and i64 %10971, 7676328089383425449
  %10973 = xor i64 %10955, %10972
  %10974 = xor i64 %10973, %10969
  %10975 = xor i64 %10974, 0
  %10976 = xor i64 %10975, %10968
  %10977 = xor i64 %10976, %10958
  %10978 = xor i64 %10977, %10957
  %10979 = mul i64 %10954, %10978
  %10980 = trunc i64 %10979 to i1
  %10981 = and i64 %1396, -8907336996373005430
  %10982 = xor i64 %1396, -1
  %10983 = xor i64 -8907336996373005430, %10982
  %10984 = and i64 %10983, -8907336996373005430
  %10985 = or i64 %924, -4412761117494968114
  %10986 = xor i64 %924, -1
  %10987 = and i64 -4412761117494968114, %10986
  %10988 = add i64 %10987, %924
  %10989 = xor i64 %10985, -917271272665683307
  %10990 = xor i64 %10989, %10984
  %10991 = xor i64 %10990, %10981
  %10992 = xor i64 %10991, %10988
  %10993 = or i64 %1645, 4577480790937951343
  %10994 = xor i64 %1645, -1
  %10995 = and i64 %10994, 647224904857759560
  %10996 = and i64 %1645, -647224904857759561
  %10997 = or i64 %10995, %10996
  %10998 = xor i64 3998384041443390247, %10997
  %10999 = xor i64 %1645, -1
  %11000 = or i64 -4577480790937951344, %10999
  %11001 = xor i64 %11000, -1
  %11002 = and i64 %11001, -1
  %11003 = or i64 %10998, %11002
  %11004 = and i64 %868, -4312748193617968252
  %11005 = xor i64 %868, -1
  %11006 = or i64 4312748193617968251, %11005
  %11007 = xor i64 %11006, -1
  %11008 = and i64 %11007, -1
  %11009 = xor i64 %10993, %11003
  %11010 = xor i64 %11009, 0
  %11011 = xor i64 %11010, %11008
  %11012 = xor i64 %11011, %11004
  %11013 = mul i64 %10992, %11012
  %11014 = and i64 %551, -983021794910203513
  %11015 = xor i64 %551, -1
  %11016 = or i64 983021794910203512, %11015
  %11017 = xor i64 %11016, -1
  %11018 = and i64 %11017, -1
  %11019 = or i64 %1076, -6593011793438777689
  %11020 = xor i64 %1076, -1
  %11021 = and i64 %11020, -2510008054533953629
  %11022 = and i64 %1076, 2510008054533953628
  %11023 = or i64 %11021, %11022
  %11024 = xor i64 8766892525563459844, %11023
  %11025 = xor i64 %1076, -1
  %11026 = or i64 6593011793438777688, %11025
  %11027 = xor i64 %11026, -1
  %11028 = and i64 %11027, -1
  %11029 = or i64 %11024, %11028
  %11030 = xor i64 -1195916079591115777, %11014
  %11031 = xor i64 %11030, %11018
  %11032 = xor i64 %11031, %11029
  %11033 = xor i64 %11032, %11019
  %11034 = or i64 %792, 946924297264271087
  %11035 = xor i64 %792, -1
  %11036 = and i64 946924297264271087, %11035
  %11037 = add i64 %11036, %792
  %11038 = or i64 %676, -5767506505205098575
  %11039 = xor i64 %676, -1
  %11040 = and i64 -5767506505205098575, %11039
  %11041 = add i64 %11040, %676
  %11042 = add i64 %605, 4755477635803117467
  %11043 = add i64 1517561639651759733, %605
  %11044 = add i64 %11043, 3237915996151357734
  %11045 = xor i64 0, %11034
  %11046 = xor i64 %11045, %11037
  %11047 = xor i64 %11046, %11044
  %11048 = xor i64 %11047, %11041
  %11049 = xor i64 %11048, %11042
  %11050 = xor i64 %11049, %11038
  %11051 = mul i64 %11033, %11050
  %11052 = trunc i64 %11051 to i1
  %11053 = add i64 %1647, -8588345581544248881
  %11054 = add i64 -8903700332931216801, %1647
  %11055 = sub i64 %11054, -315354751386967920
  %11056 = or i64 %444, 7643391109497904754
  %11057 = xor i64 %444, -1
  %11058 = and i64 7643391109497904754, %11057
  %11059 = add i64 %11058, %444
  %11060 = xor i64 %11059, %11053
  %11061 = xor i64 %11060, %11055
  %11062 = xor i64 %11061, %11056
  %11063 = xor i64 %11062, -6440231073795655297
  %11064 = or i64 %998, -8733558777454645417
  %11065 = xor i64 %998, -1
  %11066 = and i64 %11065, -9175290248810571293
  %11067 = and i64 %998, 9175290248810571292
  %11068 = or i64 %11066, %11067
  %11069 = xor i64 461329454641739444, %11068
  %11070 = xor i64 %998, -1
  %11071 = or i64 8733558777454645416, %11070
  %11072 = xor i64 %11071, -1
  %11073 = and i64 %11072, -1
  %11074 = or i64 %11069, %11073
  %11075 = and i64 %96, 8546362479903275209
  %11076 = xor i64 %96, -1
  %11077 = or i64 -8546362479903275210, %11076
  %11078 = xor i64 %11077, -1
  %11079 = and i64 %11078, -1
  %11080 = xor i64 %11074, %11075
  %11081 = xor i64 %11080, %11064
  %11082 = xor i64 %11081, %11079
  %11083 = xor i64 %11082, 0
  %11084 = mul i64 %11063, %11083
  %11085 = trunc i64 %11084 to i1
  %11086 = add i64 %772, 4132030349720535231
  %11087 = add i64 -5333396886102414001, %772
  %11088 = add i64 %11087, -8981316837886602384
  %11089 = or i64 %1131, 9012438535527879313
  %11090 = xor i64 %1131, -1
  %11091 = and i64 9012438535527879313, %11090
  %11092 = add i64 %11091, %1131
  %11093 = xor i64 %11092, %11089
  %11094 = xor i64 %11093, -5939826028634714943
  %11095 = xor i64 %11094, %11086
  %11096 = xor i64 %11095, %11088
  %11097 = and i64 %1238, 1631029244604342728
  %11098 = xor i64 %1238, -1
  %11099 = xor i64 1631029244604342728, %11098
  %11100 = and i64 %11099, 1631029244604342728
  %11101 = and i64 %1230, 6836651131206603087
  %11102 = or i64 -6836651131206603088, %1230
  %11103 = sub i64 %11102, -6836651131206603088
  %11104 = or i64 %788, -6518880304097062906
  %11105 = xor i64 %788, -1
  %11106 = and i64 -6518880304097062906, %11105
  %11107 = add i64 %11106, %788
  %11108 = xor i64 %11104, %11107
  %11109 = xor i64 %11108, %11103
  %11110 = xor i64 %11109, 0
  %11111 = xor i64 %11110, %11097
  %11112 = xor i64 %11111, %11100
  %11113 = xor i64 %11112, %11101
  %11114 = mul i64 %11096, %11113
  %11115 = trunc i64 %11114 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537081, i64* %10782, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %10815, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 %10858, i1 false, i1* null, i1 false, i1 false, i1 false, i32 %10898, i32 %10929, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 %10980, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 %11013, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 %11052, i1 %11085, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %11115, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %11116 = load i64, i64* %10782, align 8
  %11117 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %11116
  store i8* bitcast (void (i32, i1, i32*, i32*, i32*, i32*, i1*, i1*, i1*, i1*, i1*, i1*)* @main_loop.extracted.20 to i8*), i8** %11117, align 8
  %11118 = and i64 %1527, -5269870624424215871
  %11119 = xor i64 %1527, -1
  %11120 = xor i64 -5269870624424215871, %11119
  %11121 = and i64 %11120, -5269870624424215871
  %11122 = and i64 %1296, 3990881928334066788
  %11123 = or i64 -3990881928334066789, %1296
  %11124 = sub i64 %11123, -3990881928334066789
  %11125 = xor i64 %11122, %11121
  %11126 = xor i64 %11125, %11124
  %11127 = xor i64 %11126, 5658497055320989351
  %11128 = xor i64 %11127, %11118
  %11129 = add i64 %1657, -7225819574577724423
  %11130 = add i64 -2146982297672453417, %1657
  %11131 = add i64 %11130, -5078837276905271006
  %11132 = and i64 %448, 1003138498666214160
  %11133 = xor i64 %448, -1
  %11134 = or i64 -1003138498666214161, %11133
  %11135 = xor i64 %11134, -1
  %11136 = and i64 %11135, -1
  %11137 = xor i64 %11131, %11136
  %11138 = xor i64 %11137, %11132
  %11139 = xor i64 %11138, 441965861982660887
  %11140 = xor i64 %11139, %11129
  %11141 = mul i64 %11128, %11140
  %11142 = trunc i64 %11141 to i32
  %11143 = alloca i64, i32 %11142, align 8
  %11144 = and i64 %605, -8902752605709605995
  %11145 = xor i64 %605, -1
  %11146 = xor i64 -8902752605709605995, %11145
  %11147 = and i64 %11146, -8902752605709605995
  %11148 = sext i32 %170 to i64
  %11149 = or i64 %11148, 2126894939271737553
  %11150 = and i64 2126894939271737553, %11148
  %11151 = xor i64 2126894939271737553, %11148
  %11152 = or i64 %11150, %11151
  %11153 = and i64 %97, -2093050638705705377
  %11154 = xor i64 %97, -1
  %11155 = xor i64 -2093050638705705377, %11154
  %11156 = and i64 %11155, -2093050638705705377
  %11157 = xor i64 %11144, %11149
  %11158 = xor i64 %11157, %11156
  %11159 = xor i64 %11158, -4627842182416139187
  %11160 = xor i64 %11159, %11153
  %11161 = xor i64 %11160, %11147
  %11162 = xor i64 %11161, %11152
  %11163 = add i64 %782, -1976030125633934991
  %11164 = sub i64 0, %782
  %11165 = sub i64 -1976030125633934991, %11164
  %11166 = or i64 %672, -620110459249673926
  %11167 = xor i64 %672, -1
  %11168 = and i64 -620110459249673926, %11167
  %11169 = add i64 %11168, %672
  %11170 = add i64 %778, -1880710812828872634
  %11171 = add i64 -8756650123928561779, %778
  %11172 = sub i64 %11171, -6875939311099689145
  %11173 = xor i64 %11166, %11169
  %11174 = xor i64 %11173, %11172
  %11175 = xor i64 %11174, %11165
  %11176 = xor i64 %11175, 0
  %11177 = xor i64 %11176, %11163
  %11178 = xor i64 %11177, %11170
  %11179 = mul i64 %11162, %11178
  %11180 = trunc i64 %11179 to i32
  %11181 = add i64 %1588, 4873103667527684195
  %11182 = add i64 -6344373994968255128, %1588
  %11183 = sub i64 %11182, 7229266411213612293
  %11184 = and i64 %391, -3325926956938922263
  %11185 = xor i64 %391, -1
  %11186 = xor i64 -3325926956938922263, %11185
  %11187 = and i64 %11186, -3325926956938922263
  %11188 = or i64 %76, 5403533492069536765
  %11189 = and i64 5403533492069536765, %76
  %11190 = xor i64 5403533492069536765, %76
  %11191 = or i64 %11189, %11190
  %11192 = xor i64 %11187, %11184
  %11193 = xor i64 %11192, %11188
  %11194 = xor i64 %11193, %11191
  %11195 = xor i64 %11194, %11181
  %11196 = xor i64 %11195, 1864444762714243589
  %11197 = xor i64 %11196, %11183
  %11198 = and i64 %1655, 4561067716560472153
  %11199 = or i64 -4561067716560472154, %1655
  %11200 = sub i64 %11199, -4561067716560472154
  %11201 = add i64 %1491, 2162608644436633973
  %11202 = xor i64 2162608644436633973, %1491
  %11203 = and i64 2162608644436633973, %1491
  %11204 = mul i64 2, %11203
  %11205 = add i64 %11202, %11204
  %11206 = add i64 %1302, -3515603142310313133
  %11207 = add i64 6741001916470257657, %1302
  %11208 = add i64 %11207, 8190139014928980826
  %11209 = xor i64 %11200, %11198
  %11210 = xor i64 %11209, %11205
  %11211 = xor i64 %11210, %11201
  %11212 = xor i64 %11211, %11208
  %11213 = xor i64 %11212, 0
  %11214 = xor i64 %11213, %11206
  %11215 = mul i64 %11197, %11214
  %11216 = trunc i64 %11215 to i32
  %11217 = add i64 %992, -4329421453006122457
  %11218 = add i64 7881915599531451706, %992
  %11219 = sub i64 %11218, -6235407021171977453
  %11220 = or i64 %778, -1465088105431088628
  %11221 = xor i64 %778, -1
  %11222 = and i64 %11221, 910855534334404411
  %11223 = and i64 %778, -910855534334404412
  %11224 = or i64 %11222, %11223
  %11225 = xor i64 -1797230468617067209, %11224
  %11226 = xor i64 %778, -1
  %11227 = or i64 1465088105431088627, %11226
  %11228 = xor i64 %11227, -1
  %11229 = and i64 %11228, -1
  %11230 = or i64 %11225, %11229
  %11231 = or i64 %347, 7117961829139985616
  %11232 = xor i64 %347, -1
  %11233 = and i64 %11232, -5803525214614677754
  %11234 = and i64 %347, 5803525214614677753
  %11235 = or i64 %11233, %11234
  %11236 = xor i64 -3621553794506873898, %11235
  %11237 = xor i64 %347, -1
  %11238 = or i64 -7117961829139985617, %11237
  %11239 = xor i64 %11238, -1
  %11240 = and i64 %11239, -1
  %11241 = or i64 %11236, %11240
  %11242 = xor i64 %11217, %11241
  %11243 = xor i64 %11242, %11220
  %11244 = xor i64 %11243, %11231
  %11245 = xor i64 %11244, %11230
  %11246 = xor i64 %11245, %11219
  %11247 = xor i64 %11246, -8415400780655912167
  %11248 = or i64 %1655, 5890243476906080005
  %11249 = xor i64 %1655, -1
  %11250 = and i64 5890243476906080005, %11249
  %11251 = add i64 %11250, %1655
  %11252 = add i64 %1499, 3420149260004091311
  %11253 = add i64 8320978297169096569, %1499
  %11254 = sub i64 %11253, 4900829037165005258
  %11255 = xor i64 0, %11252
  %11256 = xor i64 %11255, %11251
  %11257 = xor i64 %11256, %11248
  %11258 = xor i64 %11257, %11254
  %11259 = mul i64 %11247, %11258
  %11260 = or i64 %232, 6811712066389326339
  %11261 = xor i64 %232, -1
  %11262 = and i64 %11261, -9085269697582194175
  %11263 = and i64 %232, 9085269697582194174
  %11264 = or i64 %11262, %11263
  %11265 = xor i64 -2350118898153646078, %11264
  %11266 = xor i64 %232, -1
  %11267 = or i64 -6811712066389326340, %11266
  %11268 = xor i64 %11267, -1
  %11269 = and i64 %11268, -1
  %11270 = or i64 %11265, %11269
  %11271 = and i64 %1511, 4087964797310535917
  %11272 = or i64 -4087964797310535918, %1511
  %11273 = sub i64 %11272, -4087964797310535918
  %11274 = sext i32 %0 to i64
  %11275 = add i64 %11274, 6317726349800511983
  %11276 = add i64 7304657410629693818, %11274
  %11277 = sub i64 %11276, 986931060829181835
  %11278 = xor i64 -4916220588793744185, %11271
  %11279 = xor i64 %11278, %11260
  %11280 = xor i64 %11279, %11273
  %11281 = xor i64 %11280, %11277
  %11282 = xor i64 %11281, %11270
  %11283 = xor i64 %11282, %11275
  %11284 = sext i32 %171 to i64
  %11285 = or i64 %11284, -2037673600600788725
  %11286 = and i64 -2037673600600788725, %11284
  %11287 = xor i64 -2037673600600788725, %11284
  %11288 = or i64 %11286, %11287
  %11289 = add i64 %674, -8504113434136612721
  %11290 = add i64 1040355316755607018, %674
  %11291 = sub i64 %11290, -8902275322817331877
  %11292 = xor i64 %11289, %11291
  %11293 = xor i64 %11292, 0
  %11294 = xor i64 %11293, %11285
  %11295 = xor i64 %11294, %11288
  %11296 = mul i64 %11283, %11295
  %11297 = trunc i64 %11296 to i1
  %11298 = and i64 %1400, -8720529921695646048
  %11299 = xor i64 %1400, -1
  %11300 = or i64 8720529921695646047, %11299
  %11301 = xor i64 %11300, -1
  %11302 = and i64 %11301, -1
  %11303 = and i64 %1286, 1868602212362182484
  %11304 = xor i64 %1286, -1
  %11305 = or i64 -1868602212362182485, %11304
  %11306 = xor i64 %11305, -1
  %11307 = and i64 %11306, -1
  %11308 = xor i64 -8955044434536533907, %11303
  %11309 = xor i64 %11308, %11298
  %11310 = xor i64 %11309, %11302
  %11311 = xor i64 %11310, %11307
  %11312 = and i64 %788, -8480702219329773427
  %11313 = or i64 8480702219329773426, %788
  %11314 = sub i64 %11313, 8480702219329773426
  %11315 = or i64 %1288, -2769434525428853771
  %11316 = xor i64 %1288, -1
  %11317 = and i64 -2769434525428853771, %11316
  %11318 = add i64 %11317, %1288
  %11319 = xor i64 %11315, %11318
  %11320 = xor i64 %11319, %11312
  %11321 = xor i64 %11320, %11314
  %11322 = xor i64 %11321, 0
  %11323 = mul i64 %11311, %11322
  %11324 = trunc i64 %11323 to i1
  %11325 = or i64 %776, 8081456976638687666
  %11326 = xor i64 %776, -1
  %11327 = and i64 %11326, 5287242464023080459
  %11328 = and i64 %776, -5287242464023080460
  %11329 = or i64 %11327, %11328
  %11330 = xor i64 4127291014791714745, %11329
  %11331 = xor i64 %776, -1
  %11332 = or i64 -8081456976638687667, %11331
  %11333 = xor i64 %11332, -1
  %11334 = and i64 %11333, -1
  %11335 = or i64 %11330, %11334
  %11336 = add i64 %1294, 228492024955671043
  %11337 = add i64 3933769467092238745, %1294
  %11338 = add i64 %11337, -3705277442136567702
  %11339 = xor i64 %11338, -3901068224662592407
  %11340 = xor i64 %11339, %11336
  %11341 = xor i64 %11340, %11325
  %11342 = xor i64 %11341, %11335
  %11343 = add i64 %1643, -6990701390349152815
  %11344 = and i64 -6990701390349152815, %1643
  %11345 = or i64 -6990701390349152815, %1643
  %11346 = add i64 %11344, %11345
  %11347 = add i64 %1402, -4888844485415238231
  %11348 = sub i64 0, %1402
  %11349 = add i64 4888844485415238231, %11348
  %11350 = sub i64 0, %11349
  %11351 = add i64 %786, 7891027753966423660
  %11352 = sub i64 0, %786
  %11353 = sub i64 7891027753966423660, %11352
  %11354 = xor i64 %11343, %11350
  %11355 = xor i64 %11354, %11351
  %11356 = xor i64 %11355, 0
  %11357 = xor i64 %11356, %11347
  %11358 = xor i64 %11357, %11346
  %11359 = xor i64 %11358, %11353
  %11360 = mul i64 %11342, %11359
  %11361 = trunc i64 %11360 to i1
  %11362 = or i64 %220, -7831356649903480608
  %11363 = and i64 -7831356649903480608, %220
  %11364 = xor i64 -7831356649903480608, %220
  %11365 = or i64 %11363, %11364
  %11366 = and i64 %96, -8733444866805954690
  %11367 = xor i64 %96, -1
  %11368 = xor i64 -8733444866805954690, %11367
  %11369 = and i64 %11368, -8733444866805954690
  %11370 = and i64 %792, -4490364260655728312
  %11371 = or i64 4490364260655728311, %792
  %11372 = sub i64 %11371, 4490364260655728311
  %11373 = xor i64 %11372, %11369
  %11374 = xor i64 %11373, %11365
  %11375 = xor i64 %11374, %11366
  %11376 = xor i64 %11375, %11370
  %11377 = xor i64 %11376, %11362
  %11378 = xor i64 %11377, 3151015990679737327
  %11379 = or i64 %284, -1218824668746119922
  %11380 = xor i64 %284, -1
  %11381 = and i64 -1218824668746119922, %11380
  %11382 = add i64 %11381, %284
  %11383 = add i64 %1454, -2210851909253450231
  %11384 = sub i64 0, %1454
  %11385 = sub i64 -2210851909253450231, %11384
  %11386 = xor i64 0, %11382
  %11387 = xor i64 %11386, %11385
  %11388 = xor i64 %11387, %11383
  %11389 = xor i64 %11388, %11379
  %11390 = mul i64 %11378, %11389
  %11391 = trunc i64 %11390 to i1
  %11392 = and i64 %660, -2490705468154096159
  %11393 = or i64 2490705468154096158, %660
  %11394 = sub i64 %11393, 2490705468154096158
  %11395 = or i64 %674, 5559341390097228031
  %11396 = xor i64 %674, -1
  %11397 = and i64 5559341390097228031, %11396
  %11398 = add i64 %11397, %674
  %11399 = add i64 %998, 2674155498447924717
  %11400 = and i64 2674155498447924717, %998
  %11401 = or i64 2674155498447924717, %998
  %11402 = add i64 %11400, %11401
  %11403 = xor i64 %11399, -2200844217456654309
  %11404 = xor i64 %11403, %11392
  %11405 = xor i64 %11404, %11398
  %11406 = xor i64 %11405, %11394
  %11407 = xor i64 %11406, %11395
  %11408 = xor i64 %11407, %11402
  %11409 = or i64 %220, 9059947954248046271
  %11410 = xor i64 %220, -1
  %11411 = and i64 %11410, 5534398507298305387
  %11412 = and i64 %220, -5534398507298305388
  %11413 = or i64 %11411, %11412
  %11414 = xor i64 3563830233315206100, %11413
  %11415 = xor i64 %220, -1
  %11416 = or i64 -9059947954248046272, %11415
  %11417 = xor i64 %11416, -1
  %11418 = and i64 %11417, -1
  %11419 = or i64 %11414, %11418
  %11420 = or i64 %918, -4629332489278202860
  %11421 = xor i64 %918, -1
  %11422 = and i64 -4629332489278202860, %11421
  %11423 = add i64 %11422, %918
  %11424 = xor i64 0, %11423
  %11425 = xor i64 %11424, %11420
  %11426 = xor i64 %11425, %11409
  %11427 = xor i64 %11426, %11419
  %11428 = mul i64 %11408, %11427
  %11429 = trunc i64 %11428 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537079, i64* %11143, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %11180, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %11216, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 %11259, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %11297, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %11324, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %11361, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %11391, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %11429, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %11430 = load i64, i64* %11143, align 8
  %11431 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %11430
  store i8* bitcast (void (i32*, i32*, i32*)* @main_loop.extracted.21 to i8*), i8** %11431, align 8
  %11432 = alloca i64, align 8
  %11433 = and i64 %1507, -430187589900957540
  %11434 = xor i64 %1507, -1
  %11435 = or i64 430187589900957539, %11434
  %11436 = xor i64 %11435, -1
  %11437 = and i64 %11436, -1
  %11438 = or i64 %101, -576871037573399508
  %11439 = xor i64 %101, -1
  %11440 = and i64 -576871037573399508, %11439
  %11441 = add i64 %11440, %101
  %11442 = xor i64 %11441, %11433
  %11443 = xor i64 %11442, %11437
  %11444 = xor i64 %11443, %11438
  %11445 = xor i64 %11444, -3185779205112435231
  %11446 = add i64 %670, -2866510761395555706
  %11447 = xor i64 -2866510761395555706, %670
  %11448 = and i64 -2866510761395555706, %670
  %11449 = mul i64 2, %11448
  %11450 = add i64 %11447, %11449
  %11451 = or i64 %393, -4668552269535378073
  %11452 = xor i64 %393, -1
  %11453 = and i64 %11452, 7053973407520097286
  %11454 = and i64 %393, -7053973407520097287
  %11455 = or i64 %11453, %11454
  %11456 = xor i64 -2391051849260498591, %11455
  %11457 = xor i64 %393, -1
  %11458 = or i64 4668552269535378072, %11457
  %11459 = xor i64 %11458, -1
  %11460 = and i64 %11459, -1
  %11461 = or i64 %11456, %11460
  %11462 = xor i64 %11446, 0
  %11463 = xor i64 %11462, %11451
  %11464 = xor i64 %11463, %11461
  %11465 = xor i64 %11464, %11450
  %11466 = mul i64 %11445, %11465
  %11467 = and i64 %1493, 14650886725519049
  %11468 = xor i64 %1493, -1
  %11469 = xor i64 14650886725519049, %11468
  %11470 = and i64 %11469, 14650886725519049
  %11471 = and i64 %1529, -8954801632610763324
  %11472 = xor i64 %1529, -1
  %11473 = xor i64 -8954801632610763324, %11472
  %11474 = and i64 %11473, -8954801632610763324
  %11475 = and i64 %563, 8519329638787859153
  %11476 = xor i64 %563, -1
  %11477 = xor i64 8519329638787859153, %11476
  %11478 = and i64 %11477, 8519329638787859153
  %11479 = xor i64 %11467, %11471
  %11480 = xor i64 %11479, %11478
  %11481 = xor i64 %11480, %11470
  %11482 = xor i64 %11481, %11475
  %11483 = xor i64 %11482, -4538443236201147351
  %11484 = xor i64 %11483, %11474
  %11485 = sext i32 %92 to i64
  %11486 = or i64 %11485, -5913093235206516277
  %11487 = and i64 -5913093235206516277, %11485
  %11488 = xor i64 -5913093235206516277, %11485
  %11489 = or i64 %11487, %11488
  %11490 = and i64 %222, -815926735292327316
  %11491 = xor i64 %222, -1
  %11492 = xor i64 -815926735292327316, %11491
  %11493 = and i64 %11492, -815926735292327316
  %11494 = add i64 %1533, 5341708707539287909
  %11495 = xor i64 5341708707539287909, %1533
  %11496 = and i64 5341708707539287909, %1533
  %11497 = mul i64 2, %11496
  %11498 = add i64 %11495, %11497
  %11499 = xor i64 %11489, %11493
  %11500 = xor i64 %11499, %11486
  %11501 = xor i64 %11500, %11498
  %11502 = xor i64 %11501, %11494
  %11503 = xor i64 %11502, 0
  %11504 = xor i64 %11503, %11490
  %11505 = mul i64 %11484, %11504
  %11506 = or i64 %1507, -5840449962733603119
  %11507 = xor i64 %1507, -1
  %11508 = and i64 -5840449962733603119, %11507
  %11509 = add i64 %11508, %1507
  %11510 = add i64 %383, -4823266618997089340
  %11511 = add i64 -539707722951609405, %383
  %11512 = add i64 %11511, -4283558896045479935
  %11513 = xor i64 %11512, 8716709287772523537
  %11514 = xor i64 %11513, %11510
  %11515 = xor i64 %11514, %11506
  %11516 = xor i64 %11515, %11509
  %11517 = or i64 %656, -4089675700182193092
  %11518 = xor i64 %656, -1
  %11519 = and i64 %11518, -8198840107537927502
  %11520 = and i64 %656, 8198840107537927501
  %11521 = or i64 %11519, %11520
  %11522 = xor i64 5262829736273256078, %11521
  %11523 = xor i64 %656, -1
  %11524 = or i64 4089675700182193091, %11523
  %11525 = xor i64 %11524, -1
  %11526 = and i64 %11525, -1
  %11527 = or i64 %11522, %11526
  %11528 = and i64 %559, 7096289681458956680
  %11529 = xor i64 %559, -1
  %11530 = or i64 -7096289681458956681, %11529
  %11531 = xor i64 %11530, -1
  %11532 = and i64 %11531, -1
  %11533 = xor i64 %11517, %11532
  %11534 = xor i64 %11533, %11528
  %11535 = xor i64 %11534, %11527
  %11536 = xor i64 %11535, 0
  %11537 = mul i64 %11516, %11536
  %11538 = trunc i64 %11537 to i1
  %11539 = and i64 %831, -5404445090908889163
  %11540 = or i64 5404445090908889162, %831
  %11541 = sub i64 %11540, 5404445090908889162
  %11542 = or i64 %1509, -387478044789552105
  %11543 = xor i64 %1509, -1
  %11544 = and i64 %11543, 7776448786926585581
  %11545 = and i64 %1509, -7776448786926585582
  %11546 = or i64 %11544, %11545
  %11547 = xor i64 -7965715190492132614, %11546
  %11548 = xor i64 %1509, -1
  %11549 = or i64 387478044789552104, %11548
  %11550 = xor i64 %11549, -1
  %11551 = and i64 %11550, -1
  %11552 = or i64 %11547, %11551
  %11553 = or i64 %234, 87967004477354214
  %11554 = xor i64 %234, -1
  %11555 = and i64 %11554, 6983525685954265012
  %11556 = and i64 %234, -6983525685954265013
  %11557 = or i64 %11555, %11556
  %11558 = xor i64 7048962560989417298, %11557
  %11559 = xor i64 %234, -1
  %11560 = or i64 -87967004477354215, %11559
  %11561 = xor i64 %11560, -1
  %11562 = and i64 %11561, -1
  %11563 = or i64 %11558, %11562
  %11564 = xor i64 %11553, 7343607958940973407
  %11565 = xor i64 %11564, %11552
  %11566 = xor i64 %11565, %11541
  %11567 = xor i64 %11566, %11563
  %11568 = xor i64 %11567, %11539
  %11569 = xor i64 %11568, %11542
  %11570 = or i64 %768, -2494416418282623430
  %11571 = and i64 -2494416418282623430, %768
  %11572 = xor i64 -2494416418282623430, %768
  %11573 = or i64 %11571, %11572
  %11574 = or i64 %1586, 3224197994553251178
  %11575 = xor i64 %1586, -1
  %11576 = and i64 %11575, -8934436317918172583
  %11577 = and i64 %1586, 8934436317918172582
  %11578 = or i64 %11576, %11577
  %11579 = xor i64 -6288107552278511821, %11578
  %11580 = xor i64 %1586, -1
  %11581 = or i64 -3224197994553251179, %11580
  %11582 = xor i64 %11581, -1
  %11583 = and i64 %11582, -1
  %11584 = or i64 %11579, %11583
  %11585 = xor i64 0, %11573
  %11586 = xor i64 %11585, %11574
  %11587 = xor i64 %11586, %11570
  %11588 = xor i64 %11587, %11584
  %11589 = mul i64 %11569, %11588
  %11590 = trunc i64 %11589 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537083, i64* %11432, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %11466, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 %11505, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 %11538, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %11590, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %11591 = load i64, i64* %11432, align 8
  %11592 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %11591
  store i8* bitcast (void (i32*, i64*, i32*, i64*, i32*, i64*, i64*, i64*, i64*, i64*, i64*)* @main_loop.extracted.22 to i8*), i8** %11592, align 8
  %11593 = alloca i64, align 8
  %11594 = or i64 %1519, -1617817555366632893
  %11595 = and i64 -1617817555366632893, %1519
  %11596 = xor i64 -1617817555366632893, %1519
  %11597 = or i64 %11595, %11596
  %11598 = or i64 %224, 1881037377544740085
  %11599 = and i64 1881037377544740085, %224
  %11600 = xor i64 1881037377544740085, %224
  %11601 = or i64 %11599, %11600
  %11602 = or i64 %1531, 6457422716479079736
  %11603 = and i64 6457422716479079736, %1531
  %11604 = xor i64 6457422716479079736, %1531
  %11605 = or i64 %11603, %11604
  %11606 = xor i64 %11594, %11597
  %11607 = xor i64 %11606, %11605
  %11608 = xor i64 %11607, %11602
  %11609 = xor i64 %11608, %11601
  %11610 = xor i64 %11609, %11598
  %11611 = xor i64 %11610, 3872577211763520707
  %11612 = or i64 %1298, 4407782102374326889
  %11613 = xor i64 %1298, -1
  %11614 = and i64 %11613, -2149977222422172572
  %11615 = and i64 %1298, 2149977222422172571
  %11616 = or i64 %11614, %11615
  %11617 = xor i64 -2377292107099353587, %11616
  %11618 = xor i64 %1298, -1
  %11619 = or i64 -4407782102374326890, %11618
  %11620 = xor i64 %11619, -1
  %11621 = and i64 %11620, -1
  %11622 = or i64 %11617, %11621
  %11623 = or i64 %1517, -749182189967868657
  %11624 = and i64 -749182189967868657, %1517
  %11625 = xor i64 -749182189967868657, %1517
  %11626 = or i64 %11624, %11625
  %11627 = add i64 %1137, 1067966561332910136
  %11628 = add i64 8520381406681954832, %1137
  %11629 = sub i64 %11628, 7452414845349044696
  %11630 = xor i64 %11627, 0
  %11631 = xor i64 %11630, %11626
  %11632 = xor i64 %11631, %11612
  %11633 = xor i64 %11632, %11622
  %11634 = xor i64 %11633, %11629
  %11635 = xor i64 %11634, %11623
  %11636 = mul i64 %11611, %11635
  %11637 = trunc i64 %11636 to i1
  %11638 = or i64 %1232, -5318337879566855118
  %11639 = xor i64 %1232, -1
  %11640 = and i64 -5318337879566855118, %11639
  %11641 = add i64 %11640, %1232
  %11642 = add i64 %1296, 5438113359677246735
  %11643 = add i64 1417545803252575688, %1296
  %11644 = sub i64 %11643, -4020567556424671047
  %11645 = xor i64 %11641, %11638
  %11646 = xor i64 %11645, 7794844950859636949
  %11647 = xor i64 %11646, %11644
  %11648 = xor i64 %11647, %11642
  %11649 = or i64 %664, 7695097952555570085
  %11650 = xor i64 %664, -1
  %11651 = and i64 7695097952555570085, %11650
  %11652 = add i64 %11651, %664
  %11653 = or i64 %1137, -5791385991394064226
  %11654 = xor i64 %1137, -1
  %11655 = and i64 %11654, -1494733723941322566
  %11656 = and i64 %1137, 1494733723941322565
  %11657 = or i64 %11655, %11656
  %11658 = xor i64 4963387382883076132, %11657
  %11659 = xor i64 %1137, -1
  %11660 = or i64 5791385991394064225, %11659
  %11661 = xor i64 %11660, -1
  %11662 = and i64 %11661, -1
  %11663 = or i64 %11658, %11662
  %11664 = add i64 %1183, 6330671872690946944
  %11665 = add i64 6493747263799990967, %1183
  %11666 = sub i64 %11665, 163075391109044023
  %11667 = xor i64 0, %11666
  %11668 = xor i64 %11667, %11649
  %11669 = xor i64 %11668, %11653
  %11670 = xor i64 %11669, %11652
  %11671 = xor i64 %11670, %11664
  %11672 = xor i64 %11671, %11663
  %11673 = mul i64 %11648, %11672
  %11674 = trunc i64 %11673 to i1
  %11675 = or i64 %230, 2193404524616846729
  %11676 = and i64 2193404524616846729, %230
  %11677 = xor i64 2193404524616846729, %230
  %11678 = or i64 %11676, %11677
  %11679 = or i64 %780, 6774874216615930313
  %11680 = xor i64 %780, -1
  %11681 = and i64 6774874216615930313, %11680
  %11682 = add i64 %11681, %780
  %11683 = or i64 %1588, -1248272726143990656
  %11684 = xor i64 %1588, -1
  %11685 = and i64 -1248272726143990656, %11684
  %11686 = add i64 %11685, %1588
  %11687 = xor i64 %11678, %11683
  %11688 = xor i64 %11687, %11675
  %11689 = xor i64 %11688, %11682
  %11690 = xor i64 %11689, %11686
  %11691 = xor i64 %11690, %11679
  %11692 = xor i64 %11691, 3263879055184685907
  %11693 = or i64 %868, -7300674659664117167
  %11694 = xor i64 %868, -1
  %11695 = and i64 %11694, -45603908219717498
  %11696 = and i64 %868, 45603908219717497
  %11697 = or i64 %11695, %11696
  %11698 = xor i64 7346268671816760023, %11697
  %11699 = xor i64 %868, -1
  %11700 = or i64 7300674659664117166, %11699
  %11701 = xor i64 %11700, -1
  %11702 = and i64 %11701, -1
  %11703 = or i64 %11698, %11702
  %11704 = add i64 %1539, 5179714125711151878
  %11705 = add i64 -1696123950036551020, %1539
  %11706 = sub i64 %11705, -6875838075747702898
  %11707 = add i64 %448, 8099654974779217554
  %11708 = add i64 -1146044725021661295, %448
  %11709 = add i64 %11708, -9201044373908672767
  %11710 = xor i64 %11704, 0
  %11711 = xor i64 %11710, %11693
  %11712 = xor i64 %11711, %11706
  %11713 = xor i64 %11712, %11707
  %11714 = xor i64 %11713, %11703
  %11715 = xor i64 %11714, %11709
  %11716 = mul i64 %11692, %11715
  %11717 = trunc i64 %11716 to i32
  %11718 = sext i32 %49 to i64
  %11719 = add i64 %11718, -155491115023968442
  %11720 = add i64 -8382821810313269084, %11718
  %11721 = add i64 %11720, 8227330695289300642
  %11722 = and i64 %782, -9018938281792513590
  %11723 = xor i64 %782, -1
  %11724 = or i64 9018938281792513589, %11723
  %11725 = xor i64 %11724, -1
  %11726 = and i64 %11725, -1
  %11727 = and i64 %563, 8305480913001902984
  %11728 = xor i64 %563, -1
  %11729 = xor i64 8305480913001902984, %11728
  %11730 = and i64 %11729, 8305480913001902984
  %11731 = xor i64 -5293736534536737485, %11721
  %11732 = xor i64 %11731, %11722
  %11733 = xor i64 %11732, %11727
  %11734 = xor i64 %11733, %11719
  %11735 = xor i64 %11734, %11730
  %11736 = xor i64 %11735, %11726
  %11737 = add i64 %543, -2263431645143945666
  %11738 = add i64 8579840759693883074, %543
  %11739 = add i64 %11738, 7603471668871722876
  %11740 = add i64 %792, 2180954401845891079
  %11741 = sub i64 0, %792
  %11742 = sub i64 2180954401845891079, %11741
  %11743 = and i64 %1513, 1223878485210681522
  %11744 = xor i64 %1513, -1
  %11745 = xor i64 1223878485210681522, %11744
  %11746 = and i64 %11745, 1223878485210681522
  %11747 = xor i64 0, %11739
  %11748 = xor i64 %11747, %11743
  %11749 = xor i64 %11748, %11746
  %11750 = xor i64 %11749, %11737
  %11751 = xor i64 %11750, %11742
  %11752 = xor i64 %11751, %11740
  %11753 = mul i64 %11736, %11752
  %11754 = trunc i64 %11753 to i32
  %11755 = add i64 %1513, -1780214670721636303
  %11756 = sub i64 0, %1513
  %11757 = sub i64 -1780214670721636303, %11756
  %11758 = and i64 %774, -4619920756452801934
  %11759 = xor i64 %774, -1
  %11760 = xor i64 -4619920756452801934, %11759
  %11761 = and i64 %11760, -4619920756452801934
  %11762 = xor i64 %11755, %11757
  %11763 = xor i64 %11762, %11761
  %11764 = xor i64 %11763, 821612822819506027
  %11765 = xor i64 %11764, %11758
  %11766 = and i64 %278, 6445546739647692155
  %11767 = xor i64 %278, -1
  %11768 = or i64 -6445546739647692156, %11767
  %11769 = xor i64 %11768, -1
  %11770 = and i64 %11769, -1
  %11771 = add i64 %1410, -7324372663724817617
  %11772 = add i64 8559939628454968580, %1410
  %11773 = sub i64 %11772, -2562431781529765419
  %11774 = xor i64 %11770, %11773
  %11775 = xor i64 %11774, %11771
  %11776 = xor i64 %11775, 0
  %11777 = xor i64 %11776, %11766
  %11778 = mul i64 %11765, %11777
  %11779 = trunc i64 %11778 to i1
  %11780 = add i64 %77, 7647618073307515308
  %11781 = and i64 7647618073307515308, %77
  %11782 = or i64 7647618073307515308, %77
  %11783 = add i64 %11781, %11782
  %11784 = and i64 %1659, -6180819687037027973
  %11785 = xor i64 %1659, -1
  %11786 = xor i64 -6180819687037027973, %11785
  %11787 = and i64 %11786, -6180819687037027973
  %11788 = or i64 %1288, -3612542057655586266
  %11789 = and i64 -3612542057655586266, %1288
  %11790 = xor i64 -3612542057655586266, %1288
  %11791 = or i64 %11789, %11790
  %11792 = xor i64 %11780, 5770558226649321747
  %11793 = xor i64 %11792, %11784
  %11794 = xor i64 %11793, %11787
  %11795 = xor i64 %11794, %11791
  %11796 = xor i64 %11795, %11783
  %11797 = xor i64 %11796, %11788
  %11798 = add i64 %557, -1580658179173326674
  %11799 = sub i64 0, %557
  %11800 = add i64 1580658179173326674, %11799
  %11801 = sub i64 0, %11800
  %11802 = add i64 %1586, 2779766473922574039
  %11803 = add i64 -5391020429609425407, %1586
  %11804 = add i64 %11803, 8170786903531999446
  %11805 = xor i64 %11802, %11801
  %11806 = xor i64 %11805, %11804
  %11807 = xor i64 %11806, 0
  %11808 = xor i64 %11807, %11798
  %11809 = mul i64 %11797, %11808
  %11810 = trunc i64 %11809 to i1
  %11811 = and i64 %1497, -6247244170071872333
  %11812 = xor i64 %1497, -1
  %11813 = xor i64 -6247244170071872333, %11812
  %11814 = and i64 %11813, -6247244170071872333
  %11815 = add i64 %957, -3563993020063266415
  %11816 = add i64 -357870713328720676, %957
  %11817 = add i64 %11816, -3206122306734545739
  %11818 = xor i64 %11811, 6097162321550424935
  %11819 = xor i64 %11818, %11814
  %11820 = xor i64 %11819, %11817
  %11821 = xor i64 %11820, %11815
  %11822 = add i64 %391, -8728275565814628953
  %11823 = sub i64 0, %391
  %11824 = add i64 8728275565814628953, %11823
  %11825 = sub i64 0, %11824
  %11826 = and i64 %1655, -8330187358532135590
  %11827 = or i64 8330187358532135589, %1655
  %11828 = sub i64 %11827, 8330187358532135589
  %11829 = and i64 %234, 4270760573737663652
  %11830 = xor i64 %234, -1
  %11831 = or i64 -4270760573737663653, %11830
  %11832 = xor i64 %11831, -1
  %11833 = and i64 %11832, -1
  %11834 = xor i64 0, %11829
  %11835 = xor i64 %11834, %11833
  %11836 = xor i64 %11835, %11828
  %11837 = xor i64 %11836, %11825
  %11838 = xor i64 %11837, %11822
  %11839 = xor i64 %11838, %11826
  %11840 = mul i64 %11821, %11839
  %11841 = trunc i64 %11840 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537078, i64* %11593, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %11637, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 %11674, i1 false, i32 %11717, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 %11754, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 %11779, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 %11810, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %11841, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %11842 = load i64, i64* %11593, align 8
  %11843 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %11842
  store i8* bitcast (void ()* @main_loop..split.23 to i8*), i8** %11843, align 8
  %11844 = alloca i64, align 8
  %11845 = and i64 %1501, -6221343708232502482
  %11846 = xor i64 %1501, -1
  %11847 = or i64 6221343708232502481, %11846
  %11848 = xor i64 %11847, -1
  %11849 = and i64 %11848, -1
  %11850 = or i64 %1505, -9001469740964501896
  %11851 = and i64 -9001469740964501896, %1505
  %11852 = xor i64 -9001469740964501896, %1505
  %11853 = or i64 %11851, %11852
  %11854 = xor i64 %11853, %11849
  %11855 = xor i64 %11854, %11850
  %11856 = xor i64 %11855, %11845
  %11857 = xor i64 %11856, -1104131708869584749
  %11858 = or i64 %1288, -156610545494572054
  %11859 = and i64 -156610545494572054, %1288
  %11860 = xor i64 -156610545494572054, %1288
  %11861 = or i64 %11859, %11860
  %11862 = and i64 %1645, -5087742237947826573
  %11863 = or i64 5087742237947826572, %1645
  %11864 = sub i64 %11863, 5087742237947826572
  %11865 = xor i64 %11858, 0
  %11866 = xor i64 %11865, %11862
  %11867 = xor i64 %11866, %11861
  %11868 = xor i64 %11867, %11864
  %11869 = mul i64 %11857, %11868
  %11870 = trunc i64 %11869 to i1
  %11871 = and i64 %69, -7196654431789225746
  %11872 = xor i64 %69, -1
  %11873 = xor i64 -7196654431789225746, %11872
  %11874 = and i64 %11873, -7196654431789225746
  %11875 = or i64 %1288, 6996101756930481899
  %11876 = xor i64 %1288, -1
  %11877 = and i64 %11876, -2610478254234158103
  %11878 = and i64 %1288, 2610478254234158102
  %11879 = or i64 %11877, %11878
  %11880 = xor i64 -4984760617623722750, %11879
  %11881 = xor i64 %1288, -1
  %11882 = or i64 -6996101756930481900, %11881
  %11883 = xor i64 %11882, -1
  %11884 = and i64 %11883, -1
  %11885 = or i64 %11880, %11884
  %11886 = add i64 %957, 8859848429404893457
  %11887 = sub i64 0, %957
  %11888 = sub i64 8859848429404893457, %11887
  %11889 = xor i64 2237382055719556441, %11874
  %11890 = xor i64 %11889, %11871
  %11891 = xor i64 %11890, %11875
  %11892 = xor i64 %11891, %11888
  %11893 = xor i64 %11892, %11885
  %11894 = xor i64 %11893, %11886
  %11895 = or i64 %666, -4806257258524878067
  %11896 = xor i64 %666, -1
  %11897 = and i64 -4806257258524878067, %11896
  %11898 = add i64 %11897, %666
  %11899 = add i64 %792, 2123263217665785355
  %11900 = xor i64 2123263217665785355, %792
  %11901 = and i64 2123263217665785355, %792
  %11902 = mul i64 2, %11901
  %11903 = add i64 %11900, %11902
  %11904 = xor i64 %11899, %11903
  %11905 = xor i64 %11904, 0
  %11906 = xor i64 %11905, %11898
  %11907 = xor i64 %11906, %11895
  %11908 = mul i64 %11894, %11907
  %11909 = trunc i64 %11908 to i32
  %11910 = add i64 %1531, 6395117997286341262
  %11911 = xor i64 6395117997286341262, %1531
  %11912 = and i64 6395117997286341262, %1531
  %11913 = mul i64 2, %11912
  %11914 = add i64 %11911, %11913
  %11915 = add i64 %682, -5176559443901517824
  %11916 = sub i64 0, %682
  %11917 = add i64 5176559443901517824, %11916
  %11918 = sub i64 0, %11917
  %11919 = xor i64 7713485713207450603, %11910
  %11920 = xor i64 %11919, %11918
  %11921 = xor i64 %11920, %11914
  %11922 = xor i64 %11921, %11915
  %11923 = and i64 %393, -6784718552903314910
  %11924 = or i64 6784718552903314909, %393
  %11925 = sub i64 %11924, 6784718552903314909
  %11926 = add i64 %1645, -7598481707397978752
  %11927 = sub i64 0, %1645
  %11928 = sub i64 -7598481707397978752, %11927
  %11929 = or i64 %395, 5617159400275113902
  %11930 = xor i64 %395, -1
  %11931 = and i64 5617159400275113902, %11930
  %11932 = add i64 %11931, %395
  %11933 = xor i64 %11932, %11928
  %11934 = xor i64 %11933, %11926
  %11935 = xor i64 %11934, %11925
  %11936 = xor i64 %11935, %11923
  %11937 = xor i64 %11936, 0
  %11938 = xor i64 %11937, %11929
  %11939 = mul i64 %11922, %11938
  %11940 = trunc i64 %11939 to i32
  %11941 = sext i32 %49 to i64
  %11942 = and i64 %11941, 4723815721902444350
  %11943 = xor i64 %11941, -1
  %11944 = or i64 -4723815721902444351, %11943
  %11945 = xor i64 %11944, -1
  %11946 = and i64 %11945, -1
  %11947 = add i64 %1541, -1360362004941235545
  %11948 = add i64 -7729617421798066509, %1541
  %11949 = add i64 %11948, 6369255416856830964
  %11950 = xor i64 %11942, 8348362580001252877
  %11951 = xor i64 %11950, %11947
  %11952 = xor i64 %11951, %11949
  %11953 = xor i64 %11952, %11946
  %11954 = add i64 %922, -8221403775146197172
  %11955 = sub i64 0, %922
  %11956 = add i64 8221403775146197172, %11955
  %11957 = sub i64 0, %11956
  %11958 = add i64 %782, 8868695884933308509
  %11959 = and i64 8868695884933308509, %782
  %11960 = or i64 8868695884933308509, %782
  %11961 = add i64 %11959, %11960
  %11962 = or i64 %1137, -4259685878111055993
  %11963 = and i64 -4259685878111055993, %1137
  %11964 = xor i64 -4259685878111055993, %1137
  %11965 = or i64 %11963, %11964
  %11966 = xor i64 %11962, %11961
  %11967 = xor i64 %11966, %11957
  %11968 = xor i64 %11967, 0
  %11969 = xor i64 %11968, %11958
  %11970 = xor i64 %11969, %11965
  %11971 = xor i64 %11970, %11954
  %11972 = mul i64 %11953, %11971
  %11973 = or i64 %97, 4472926471022133161
  %11974 = and i64 4472926471022133161, %97
  %11975 = xor i64 4472926471022133161, %97
  %11976 = or i64 %11974, %11975
  %11977 = add i64 %284, -6720929485809150908
  %11978 = add i64 16760330921593638, %284
  %11979 = add i64 %11978, -6737689816730744546
  %11980 = and i64 %69, 5892182978563269765
  %11981 = xor i64 %69, -1
  %11982 = or i64 -5892182978563269766, %11981
  %11983 = xor i64 %11982, -1
  %11984 = and i64 %11983, -1
  %11985 = xor i64 %11984, %11976
  %11986 = xor i64 %11985, %11973
  %11987 = xor i64 %11986, -1403124564171674123
  %11988 = xor i64 %11987, %11980
  %11989 = xor i64 %11988, %11977
  %11990 = xor i64 %11989, %11979
  %11991 = or i64 %343, -2777398613312043101
  %11992 = and i64 -2777398613312043101, %343
  %11993 = xor i64 -2777398613312043101, %343
  %11994 = or i64 %11992, %11993
  %11995 = or i64 %662, -8993015537465132623
  %11996 = and i64 -8993015537465132623, %662
  %11997 = xor i64 -8993015537465132623, %662
  %11998 = or i64 %11996, %11997
  %11999 = sext i32 %0 to i64
  %12000 = add i64 %11999, -8873089553554769627
  %12001 = add i64 8973865067421462552, %11999
  %12002 = add i64 %12001, 599789452733319437
  %12003 = xor i64 %12002, %11991
  %12004 = xor i64 %12003, %11998
  %12005 = xor i64 %12004, %11994
  %12006 = xor i64 %12005, %12000
  %12007 = xor i64 %12006, %11995
  %12008 = xor i64 %12007, 0
  %12009 = mul i64 %11990, %12008
  %12010 = or i64 %1450, 4182251399577130923
  %12011 = xor i64 %1450, -1
  %12012 = and i64 4182251399577130923, %12011
  %12013 = add i64 %12012, %1450
  %12014 = and i64 %1398, -1007081472624611100
  %12015 = xor i64 %1398, -1
  %12016 = or i64 1007081472624611099, %12015
  %12017 = xor i64 %12016, -1
  %12018 = and i64 %12017, -1
  %12019 = xor i64 6986165121919479363, %12018
  %12020 = xor i64 %12019, %12014
  %12021 = xor i64 %12020, %12010
  %12022 = xor i64 %12021, %12013
  %12023 = add i64 %1655, -983685186872839481
  %12024 = xor i64 -983685186872839481, %1655
  %12025 = and i64 -983685186872839481, %1655
  %12026 = mul i64 2, %12025
  %12027 = add i64 %12024, %12026
  %12028 = and i64 %563, -5304253308207855267
  %12029 = or i64 5304253308207855266, %563
  %12030 = sub i64 %12029, 5304253308207855266
  %12031 = xor i64 %12028, 0
  %12032 = xor i64 %12031, %12030
  %12033 = xor i64 %12032, %12027
  %12034 = xor i64 %12033, %12023
  %12035 = mul i64 %12022, %12034
  %12036 = or i64 %494, 6725386739969591733
  %12037 = xor i64 %494, -1
  %12038 = and i64 6725386739969591733, %12037
  %12039 = add i64 %12038, %494
  %12040 = and i64 %393, 6785271053175744499
  %12041 = or i64 -6785271053175744500, %393
  %12042 = sub i64 %12041, -6785271053175744500
  %12043 = xor i64 %12036, -5395123796104880759
  %12044 = xor i64 %12043, %12040
  %12045 = xor i64 %12044, %12042
  %12046 = xor i64 %12045, %12039
  %12047 = and i64 %1503, -3679742463799861556
  %12048 = xor i64 %1503, -1
  %12049 = xor i64 -3679742463799861556, %12048
  %12050 = and i64 %12049, -3679742463799861556
  %12051 = and i64 %990, 7914267946156445055
  %12052 = xor i64 %990, -1
  %12053 = xor i64 7914267946156445055, %12052
  %12054 = and i64 %12053, 7914267946156445055
  %12055 = xor i64 %12051, %12050
  %12056 = xor i64 %12055, 0
  %12057 = xor i64 %12056, %12047
  %12058 = xor i64 %12057, %12054
  %12059 = mul i64 %12046, %12058
  %12060 = add i64 %549, 5604820334460296695
  %12061 = and i64 5604820334460296695, %549
  %12062 = or i64 5604820334460296695, %549
  %12063 = add i64 %12061, %12062
  %12064 = add i64 %1659, 4499498183155326138
  %12065 = sub i64 0, %1659
  %12066 = add i64 -4499498183155326138, %12065
  %12067 = sub i64 0, %12066
  %12068 = xor i64 %12064, 8604329985905682797
  %12069 = xor i64 %12068, %12067
  %12070 = xor i64 %12069, %12060
  %12071 = xor i64 %12070, %12063
  %12072 = add i64 %1657, 6037666988121208247
  %12073 = sub i64 0, %1657
  %12074 = sub i64 6037666988121208247, %12073
  %12075 = or i64 %1183, -501644522685084296
  %12076 = xor i64 %1183, -1
  %12077 = and i64 -501644522685084296, %12076
  %12078 = add i64 %12077, %1183
  %12079 = or i64 %234, -150392352928211629
  %12080 = xor i64 %234, -1
  %12081 = and i64 -150392352928211629, %12080
  %12082 = add i64 %12081, %234
  %12083 = xor i64 %12079, %12082
  %12084 = xor i64 %12083, %12075
  %12085 = xor i64 %12084, %12072
  %12086 = xor i64 %12085, %12074
  %12087 = xor i64 %12086, 0
  %12088 = xor i64 %12087, %12078
  %12089 = mul i64 %12071, %12088
  %12090 = or i64 %922, -1561994233942850158
  %12091 = xor i64 %922, -1
  %12092 = and i64 %12091, -3626082284988650968
  %12093 = and i64 %922, 3626082284988650967
  %12094 = or i64 %12092, %12093
  %12095 = xor i64 2882092494295330746, %12094
  %12096 = xor i64 %922, -1
  %12097 = or i64 1561994233942850157, %12096
  %12098 = xor i64 %12097, -1
  %12099 = and i64 %12098, -1
  %12100 = or i64 %12095, %12099
  %12101 = add i64 %228, -1791180457206298176
  %12102 = xor i64 -1791180457206298176, %228
  %12103 = and i64 -1791180457206298176, %228
  %12104 = mul i64 2, %12103
  %12105 = add i64 %12102, %12104
  %12106 = xor i64 %12090, %12105
  %12107 = xor i64 %12106, %12100
  %12108 = xor i64 %12107, -6463920550499142883
  %12109 = xor i64 %12108, %12101
  %12110 = or i64 %1521, -7044265476047371787
  %12111 = and i64 -7044265476047371787, %1521
  %12112 = xor i64 -7044265476047371787, %1521
  %12113 = or i64 %12111, %12112
  %12114 = or i64 %341, -588639538740413973
  %12115 = xor i64 %341, -1
  %12116 = and i64 -588639538740413973, %12115
  %12117 = add i64 %12116, %341
  %12118 = add i64 %347, 3201871262929728472
  %12119 = sub i64 0, %347
  %12120 = sub i64 3201871262929728472, %12119
  %12121 = xor i64 %12118, %12114
  %12122 = xor i64 %12121, %12110
  %12123 = xor i64 %12122, 0
  %12124 = xor i64 %12123, %12120
  %12125 = xor i64 %12124, %12117
  %12126 = xor i64 %12125, %12113
  %12127 = mul i64 %12109, %12126
  %12128 = trunc i64 %12127 to i1
  %12129 = or i64 %1517, -25568851716783109
  %12130 = xor i64 %1517, -1
  %12131 = and i64 -25568851716783109, %12130
  %12132 = add i64 %12131, %1517
  %12133 = and i64 %95, 8813210025634396278
  %12134 = xor i64 %95, -1
  %12135 = or i64 -8813210025634396279, %12134
  %12136 = xor i64 %12135, -1
  %12137 = and i64 %12136, -1
  %12138 = xor i64 %12132, %12137
  %12139 = xor i64 %12138, %12133
  %12140 = xor i64 %12139, 6183597239274822185
  %12141 = xor i64 %12140, %12129
  %12142 = add i64 %395, 6664913845896485685
  %12143 = sub i64 0, %395
  %12144 = sub i64 6664913845896485685, %12143
  %12145 = or i64 %1493, 3806108155819279865
  %12146 = and i64 3806108155819279865, %1493
  %12147 = xor i64 3806108155819279865, %1493
  %12148 = or i64 %12146, %12147
  %12149 = xor i64 0, %12145
  %12150 = xor i64 %12149, %12144
  %12151 = xor i64 %12150, %12148
  %12152 = xor i64 %12151, %12142
  %12153 = mul i64 %12141, %12152
  %12154 = trunc i64 %12153 to i1
  %12155 = or i64 %727, 777041449294219106
  %12156 = xor i64 %727, -1
  %12157 = and i64 %12156, 2592070610631706490
  %12158 = and i64 %727, -2592070610631706491
  %12159 = or i64 %12157, %12158
  %12160 = xor i64 2968005643690115096, %12159
  %12161 = xor i64 %727, -1
  %12162 = or i64 -777041449294219107, %12161
  %12163 = xor i64 %12162, -1
  %12164 = and i64 %12163, -1
  %12165 = or i64 %12160, %12164
  %12166 = and i64 %387, -8308715684711496020
  %12167 = xor i64 %387, -1
  %12168 = or i64 8308715684711496019, %12167
  %12169 = xor i64 %12168, -1
  %12170 = and i64 %12169, -1
  %12171 = or i64 %910, 2432020413272957456
  %12172 = xor i64 %910, -1
  %12173 = and i64 2432020413272957456, %12172
  %12174 = add i64 %12173, %910
  %12175 = xor i64 %12165, %12170
  %12176 = xor i64 %12175, %12174
  %12177 = xor i64 %12176, %12155
  %12178 = xor i64 %12177, %12166
  %12179 = xor i64 %12178, %12171
  %12180 = xor i64 %12179, 2555270118293505893
  %12181 = and i64 %345, 8119181946080747535
  %12182 = or i64 -8119181946080747536, %345
  %12183 = sub i64 %12182, -8119181946080747536
  %12184 = sext i32 %49 to i64
  %12185 = add i64 %12184, 4633794104895448930
  %12186 = and i64 4633794104895448930, %12184
  %12187 = or i64 4633794104895448930, %12184
  %12188 = add i64 %12186, %12187
  %12189 = and i64 %290, -1623111546668599460
  %12190 = xor i64 %290, -1
  %12191 = xor i64 -1623111546668599460, %12190
  %12192 = and i64 %12191, -1623111546668599460
  %12193 = xor i64 %12192, %12181
  %12194 = xor i64 %12193, %12188
  %12195 = xor i64 %12194, %12183
  %12196 = xor i64 %12195, %12185
  %12197 = xor i64 %12196, 0
  %12198 = xor i64 %12197, %12189
  %12199 = mul i64 %12180, %12198
  %12200 = trunc i64 %12199 to i32
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537072, i64* %11844, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 %11870, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 %11909, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %11940, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 %11972, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 %12009, i32 0, i1* null, i1* null, i64 %12035, i64 %12059, i64 %12089, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %12128, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %12154, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 %12200, i1* null, i1* null)
  %12201 = load i64, i64* %11844, align 8
  %12202 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %12201
  store i8* bitcast (i32 (i8*, ...)* @printf to i8*), i8** %12202, align 8
  %12203 = alloca i64, align 8
  %12204 = or i64 %918, -5483247581924453620
  %12205 = xor i64 %918, -1
  %12206 = and i64 %12205, -8921201211508243868
  %12207 = and i64 %918, 8921201211508243867
  %12208 = or i64 %12206, %12207
  %12209 = xor i64 4023422712865870184, %12208
  %12210 = xor i64 %918, -1
  %12211 = or i64 5483247581924453619, %12210
  %12212 = xor i64 %12211, -1
  %12213 = and i64 %12212, -1
  %12214 = or i64 %12209, %12213
  %12215 = add i64 %1133, 7036719612177035635
  %12216 = sub i64 0, %1133
  %12217 = sub i64 7036719612177035635, %12216
  %12218 = and i64 %914, -2292470829656064903
  %12219 = or i64 2292470829656064902, %914
  %12220 = sub i64 %12219, 2292470829656064902
  %12221 = xor i64 3095696155909064901, %12217
  %12222 = xor i64 %12221, %12215
  %12223 = xor i64 %12222, %12204
  %12224 = xor i64 %12223, %12220
  %12225 = xor i64 %12224, %12218
  %12226 = xor i64 %12225, %12214
  %12227 = and i64 %1404, 5010391534485297262
  %12228 = or i64 -5010391534485297263, %1404
  %12229 = sub i64 %12228, -5010391534485297263
  %12230 = and i64 %290, -7616066537036387949
  %12231 = xor i64 %290, -1
  %12232 = xor i64 -7616066537036387949, %12231
  %12233 = and i64 %12232, -7616066537036387949
  %12234 = add i64 %91, -203795315079060520
  %12235 = sub i64 0, %91
  %12236 = add i64 203795315079060520, %12235
  %12237 = sub i64 0, %12236
  %12238 = xor i64 %12233, %12230
  %12239 = xor i64 %12238, %12229
  %12240 = xor i64 %12239, %12234
  %12241 = xor i64 %12240, %12237
  %12242 = xor i64 %12241, 778182568410385985
  %12243 = xor i64 %12242, %12227
  %12244 = mul i64 %12226, %12243
  %12245 = trunc i64 %12244 to i32
  %12246 = or i64 %1396, -8990534425714999222
  %12247 = xor i64 %1396, -1
  %12248 = and i64 %12247, 199767975492786940
  %12249 = and i64 %1396, -199767975492786941
  %12250 = or i64 %12248, %12249
  %12251 = xor i64 -9079675244915369290, %12250
  %12252 = xor i64 %1396, -1
  %12253 = or i64 8990534425714999221, %12252
  %12254 = xor i64 %12253, -1
  %12255 = and i64 %12254, -1
  %12256 = or i64 %12251, %12255
  %12257 = or i64 %1232, -743310474533946997
  %12258 = and i64 -743310474533946997, %1232
  %12259 = xor i64 -743310474533946997, %1232
  %12260 = or i64 %12258, %12259
  %12261 = or i64 %97, 6117661603357229450
  %12262 = and i64 6117661603357229450, %97
  %12263 = xor i64 6117661603357229450, %97
  %12264 = or i64 %12262, %12263
  %12265 = xor i64 %12260, %12261
  %12266 = xor i64 %12265, %12256
  %12267 = xor i64 %12266, 2153633552487361081
  %12268 = xor i64 %12267, %12264
  %12269 = xor i64 %12268, %12257
  %12270 = xor i64 %12269, %12246
  %12271 = and i64 %385, -403455169513669705
  %12272 = xor i64 %385, -1
  %12273 = xor i64 -403455169513669705, %12272
  %12274 = and i64 %12273, -403455169513669705
  %12275 = add i64 %866, 4321170163049986837
  %12276 = xor i64 4321170163049986837, %866
  %12277 = and i64 4321170163049986837, %866
  %12278 = mul i64 2, %12277
  %12279 = add i64 %12276, %12278
  %12280 = or i64 %563, 7137515092891796782
  %12281 = and i64 7137515092891796782, %563
  %12282 = xor i64 7137515092891796782, %563
  %12283 = or i64 %12281, %12282
  %12284 = xor i64 %12280, %12279
  %12285 = xor i64 %12284, 0
  %12286 = xor i64 %12285, %12283
  %12287 = xor i64 %12286, %12274
  %12288 = xor i64 %12287, %12271
  %12289 = xor i64 %12288, %12275
  %12290 = mul i64 %12270, %12289
  %12291 = trunc i64 %12290 to i1
  %12292 = add i64 %1232, 5075887345935576166
  %12293 = xor i64 5075887345935576166, %1232
  %12294 = and i64 5075887345935576166, %1232
  %12295 = mul i64 2, %12294
  %12296 = add i64 %12293, %12295
  %12297 = or i64 %1137, -2789341150385141168
  %12298 = xor i64 %1137, -1
  %12299 = and i64 -2789341150385141168, %12298
  %12300 = add i64 %12299, %1137
  %12301 = add i64 %1135, -1165965273573196257
  %12302 = sub i64 0, %1135
  %12303 = add i64 1165965273573196257, %12302
  %12304 = sub i64 0, %12303
  %12305 = xor i64 %12297, %12296
  %12306 = xor i64 %12305, %12292
  %12307 = xor i64 %12306, %12301
  %12308 = xor i64 %12307, %12300
  %12309 = xor i64 %12308, %12304
  %12310 = xor i64 %12309, 7123610829881351669
  %12311 = add i64 %97, 6296009083414880620
  %12312 = sub i64 0, %97
  %12313 = sub i64 6296009083414880620, %12312
  %12314 = and i64 %1400, 3559448650908511742
  %12315 = xor i64 %1400, -1
  %12316 = xor i64 3559448650908511742, %12315
  %12317 = and i64 %12316, 3559448650908511742
  %12318 = and i64 %1143, 1747744201387635157
  %12319 = xor i64 %1143, -1
  %12320 = xor i64 1747744201387635157, %12319
  %12321 = and i64 %12320, 1747744201387635157
  %12322 = xor i64 %12317, %12311
  %12323 = xor i64 %12322, %12314
  %12324 = xor i64 %12323, %12321
  %12325 = xor i64 %12324, %12313
  %12326 = xor i64 %12325, 0
  %12327 = xor i64 %12326, %12318
  %12328 = mul i64 %12310, %12327
  %12329 = trunc i64 %12328 to i32
  %12330 = and i64 %1523, 4310430037245906583
  %12331 = xor i64 %1523, -1
  %12332 = or i64 -4310430037245906584, %12331
  %12333 = xor i64 %12332, -1
  %12334 = and i64 %12333, -1
  %12335 = and i64 %998, 6337052263163738339
  %12336 = or i64 -6337052263163738340, %998
  %12337 = sub i64 %12336, -6337052263163738340
  %12338 = xor i64 %12337, %12334
  %12339 = xor i64 %12338, 503141322990060695
  %12340 = xor i64 %12339, %12335
  %12341 = xor i64 %12340, %12330
  %12342 = or i64 %1290, -5095770865662318126
  %12343 = xor i64 %1290, -1
  %12344 = and i64 -5095770865662318126, %12343
  %12345 = add i64 %12344, %1290
  %12346 = and i64 %914, -4456778930864991010
  %12347 = or i64 4456778930864991009, %914
  %12348 = sub i64 %12347, 4456778930864991009
  %12349 = or i64 %77, -591695533209594771
  %12350 = xor i64 %77, -1
  %12351 = and i64 %12350, 3769438315757807465
  %12352 = and i64 %77, -3769438315757807466
  %12353 = or i64 %12351, %12352
  %12354 = xor i64 -4357694290975591676, %12353
  %12355 = xor i64 %77, -1
  %12356 = or i64 591695533209594770, %12355
  %12357 = xor i64 %12356, -1
  %12358 = and i64 %12357, -1
  %12359 = or i64 %12354, %12358
  %12360 = xor i64 %12349, %12346
  %12361 = xor i64 %12360, %12359
  %12362 = xor i64 %12361, %12342
  %12363 = xor i64 %12362, %12348
  %12364 = xor i64 %12363, 0
  %12365 = xor i64 %12364, %12345
  %12366 = mul i64 %12341, %12365
  %12367 = sext i32 %0 to i64
  %12368 = add i64 %12367, -6961585092723097707
  %12369 = add i64 952813512631832817, %12367
  %12370 = add i64 %12369, -7914398605354930524
  %12371 = and i64 %1076, 2438035820521611660
  %12372 = xor i64 %1076, -1
  %12373 = or i64 -2438035820521611661, %12372
  %12374 = xor i64 %12373, -1
  %12375 = and i64 %12374, -1
  %12376 = xor i64 -8551673163458280447, %12371
  %12377 = xor i64 %12376, %12368
  %12378 = xor i64 %12377, %12375
  %12379 = xor i64 %12378, %12370
  %12380 = and i64 %389, 7701467015900633486
  %12381 = xor i64 %389, -1
  %12382 = xor i64 7701467015900633486, %12381
  %12383 = and i64 %12382, 7701467015900633486
  %12384 = and i64 %1513, -3923061415772805922
  %12385 = xor i64 %1513, -1
  %12386 = or i64 3923061415772805921, %12385
  %12387 = xor i64 %12386, -1
  %12388 = and i64 %12387, -1
  %12389 = and i64 %1501, 7584469789154199752
  %12390 = xor i64 %1501, -1
  %12391 = or i64 -7584469789154199753, %12390
  %12392 = xor i64 %12391, -1
  %12393 = and i64 %12392, -1
  %12394 = xor i64 0, %12383
  %12395 = xor i64 %12394, %12380
  %12396 = xor i64 %12395, %12384
  %12397 = xor i64 %12396, %12388
  %12398 = xor i64 %12397, %12393
  %12399 = xor i64 %12398, %12389
  %12400 = mul i64 %12379, %12399
  %12401 = trunc i64 %12400 to i1
  %12402 = add i64 %1343, -42284931848591402
  %12403 = add i64 -7959112193949780375, %1343
  %12404 = sub i64 %12403, -7916827262101188973
  %12405 = add i64 %1499, -3202848526964087421
  %12406 = sub i64 0, %1499
  %12407 = sub i64 -3202848526964087421, %12406
  %12408 = and i64 %1450, 884277069726632816
  %12409 = xor i64 %1450, -1
  %12410 = or i64 -884277069726632817, %12409
  %12411 = xor i64 %12410, -1
  %12412 = and i64 %12411, -1
  %12413 = xor i64 %12407, -6318381095673261581
  %12414 = xor i64 %12413, %12412
  %12415 = xor i64 %12414, %12408
  %12416 = xor i64 %12415, %12402
  %12417 = xor i64 %12416, %12405
  %12418 = xor i64 %12417, %12404
  %12419 = add i64 %1513, -7450450174272988974
  %12420 = and i64 -7450450174272988974, %1513
  %12421 = or i64 -7450450174272988974, %1513
  %12422 = add i64 %12420, %12421
  %12423 = sext i32 %92 to i64
  %12424 = or i64 %12423, 8133506135755966707
  %12425 = and i64 8133506135755966707, %12423
  %12426 = xor i64 8133506135755966707, %12423
  %12427 = or i64 %12425, %12426
  %12428 = xor i64 0, %12422
  %12429 = xor i64 %12428, %12427
  %12430 = xor i64 %12429, %12419
  %12431 = xor i64 %12430, %12424
  %12432 = mul i64 %12418, %12431
  %12433 = trunc i64 %12432 to i1
  %12434 = or i64 %1300, -9094592394537113483
  %12435 = and i64 -9094592394537113483, %1300
  %12436 = xor i64 -9094592394537113483, %1300
  %12437 = or i64 %12435, %12436
  %12438 = and i64 %1038, 5794749042567736529
  %12439 = xor i64 %1038, -1
  %12440 = xor i64 5794749042567736529, %12439
  %12441 = and i64 %12440, 5794749042567736529
  %12442 = add i64 %782, -7404824766447060433
  %12443 = add i64 -6219992245497635282, %782
  %12444 = add i64 %12443, -1184832520949425151
  %12445 = xor i64 %12438, %12434
  %12446 = xor i64 %12445, %12442
  %12447 = xor i64 %12446, %12437
  %12448 = xor i64 %12447, %12444
  %12449 = xor i64 %12448, %12441
  %12450 = xor i64 %12449, -3004572915489961261
  %12451 = add i64 %559, -3652587679010265527
  %12452 = xor i64 -3652587679010265527, %559
  %12453 = and i64 -3652587679010265527, %559
  %12454 = mul i64 2, %12453
  %12455 = add i64 %12452, %12454
  %12456 = or i64 %1543, 7041020266977194898
  %12457 = xor i64 %1543, -1
  %12458 = and i64 7041020266977194898, %12457
  %12459 = add i64 %12458, %1543
  %12460 = xor i64 %12456, %12455
  %12461 = xor i64 %12460, %12451
  %12462 = xor i64 %12461, %12459
  %12463 = xor i64 %12462, 0
  %12464 = mul i64 %12450, %12463
  %12465 = trunc i64 %12464 to i1
  %12466 = or i64 %908, -388359619802617627
  %12467 = and i64 -388359619802617627, %908
  %12468 = xor i64 -388359619802617627, %908
  %12469 = or i64 %12467, %12468
  %12470 = or i64 %794, -9070312625254416942
  %12471 = xor i64 %794, -1
  %12472 = and i64 %12471, 6850074222976030242
  %12473 = and i64 %794, -6850074222976030243
  %12474 = or i64 %12472, %12473
  %12475 = xor i64 -2517621527735440400, %12474
  %12476 = xor i64 %794, -1
  %12477 = or i64 9070312625254416941, %12476
  %12478 = xor i64 %12477, -1
  %12479 = and i64 %12478, -1
  %12480 = or i64 %12475, %12479
  %12481 = or i64 %1074, 4651382591605072219
  %12482 = and i64 4651382591605072219, %1074
  %12483 = xor i64 4651382591605072219, %1074
  %12484 = or i64 %12482, %12483
  %12485 = xor i64 %12469, %12470
  %12486 = xor i64 %12485, %12466
  %12487 = xor i64 %12486, %12484
  %12488 = xor i64 %12487, %12481
  %12489 = xor i64 %12488, -2936856291196351025
  %12490 = xor i64 %12489, %12480
  %12491 = and i64 %1076, -2601336675976065153
  %12492 = or i64 2601336675976065152, %1076
  %12493 = sub i64 %12492, 2601336675976065152
  %12494 = add i64 %1232, -1072081182766328531
  %12495 = and i64 -1072081182766328531, %1232
  %12496 = or i64 -1072081182766328531, %1232
  %12497 = add i64 %12495, %12496
  %12498 = add i64 %236, -8041312714794915733
  %12499 = and i64 -8041312714794915733, %236
  %12500 = or i64 -8041312714794915733, %236
  %12501 = add i64 %12499, %12500
  %12502 = xor i64 %12491, 0
  %12503 = xor i64 %12502, %12493
  %12504 = xor i64 %12503, %12498
  %12505 = xor i64 %12504, %12497
  %12506 = xor i64 %12505, %12494
  %12507 = xor i64 %12506, %12501
  %12508 = mul i64 %12490, %12507
  %12509 = trunc i64 %12508 to i1
  %12510 = add i64 %446, -4232219276386023345
  %12511 = xor i64 -4232219276386023345, %446
  %12512 = and i64 -4232219276386023345, %446
  %12513 = mul i64 2, %12512
  %12514 = add i64 %12511, %12513
  %12515 = or i64 %996, -8022581203570099502
  %12516 = xor i64 %996, -1
  %12517 = and i64 -8022581203570099502, %12516
  %12518 = add i64 %12517, %996
  %12519 = xor i64 %12514, -2448341460872308279
  %12520 = xor i64 %12519, %12518
  %12521 = xor i64 %12520, %12515
  %12522 = xor i64 %12521, %12510
  %12523 = and i64 %547, 6924517328043395452
  %12524 = xor i64 %547, -1
  %12525 = xor i64 6924517328043395452, %12524
  %12526 = and i64 %12525, 6924517328043395452
  %12527 = add i64 %770, -2910327598491791676
  %12528 = and i64 -2910327598491791676, %770
  %12529 = or i64 -2910327598491791676, %770
  %12530 = add i64 %12528, %12529
  %12531 = xor i64 0, %12530
  %12532 = xor i64 %12531, %12523
  %12533 = xor i64 %12532, %12527
  %12534 = xor i64 %12533, %12526
  %12535 = mul i64 %12522, %12534
  %12536 = trunc i64 %12535 to i1
  call void @"9941920946239825184"(i32 %12245, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537087, i64* %12203, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %12291, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %12329, i32 0, i1* null, i1* null, i64 %12366, i1 false, i1* null, i1 false, i1 %12401, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 %12433, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 %12465, i1 %12509, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %12536, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %12537 = load i64, i64* %12203, align 8
  %12538 = getelementptr [15 x i8*], [15 x i8*]* @obfsfuncAddrLookupTable4249693396081903176, i32 0, i64 %12537
  store i8* bitcast (i32 (float*, float*, i8*, i64)* @render to i8*), i8** %12538, align 8
  %12539 = add i64 %1543, -7308097248431250731
  %12540 = add i64 69326148978228833, %1543
  %12541 = sub i64 %12540, 7377423397409479564
  %12542 = and i64 %347, -5199397113317312096
  %12543 = xor i64 %347, -1
  %12544 = xor i64 -5199397113317312096, %12543
  %12545 = and i64 %12544, -5199397113317312096
  %12546 = add i64 %1074, -6327406658056920329
  %12547 = add i64 -9146809669049160925, %1074
  %12548 = sub i64 %12547, -2819403010992240596
  %12549 = xor i64 %12539, %12548
  %12550 = xor i64 %12549, %12545
  %12551 = xor i64 %12550, %12542
  %12552 = xor i64 %12551, %12546
  %12553 = xor i64 %12552, %12541
  %12554 = xor i64 %12553, 2870615073817729421
  %12555 = or i64 %71, 5486406932269527526
  %12556 = xor i64 %71, -1
  %12557 = and i64 5486406932269527526, %12556
  %12558 = add i64 %12557, %71
  %12559 = add i64 %996, 2385857022264275301
  %12560 = sub i64 0, %996
  %12561 = sub i64 2385857022264275301, %12560
  %12562 = xor i64 %12559, %12561
  %12563 = xor i64 %12562, %12555
  %12564 = xor i64 %12563, %12558
  %12565 = xor i64 %12564, 7773660934553489733
  %12566 = mul i64 %12554, %12565
  %12567 = trunc i64 %12566 to i32
  %.loc101 = alloca i64, i32 %12567, align 8
  store i64* %.loc101, i64** %.loc101.reg2mem, align 8
  %.loc100 = alloca i64, align 8
  store i64* %.loc100, i64** %.loc100.reg2mem, align 8
  %.loc99 = alloca i64, align 8
  store i64* %.loc99, i64** %.loc99.reg2mem, align 8
  %.loc98 = alloca i64, align 8
  store i64* %.loc98, i64** %.loc98.reg2mem, align 8
  %.loc97 = alloca i64, align 8
  store i64* %.loc97, i64** %.loc97.reg2mem, align 8
  %.loc96 = alloca i64, align 8
  store i64* %.loc96, i64** %.loc96.reg2mem, align 8
  %.loc95 = alloca i32, align 4
  store i32* %.loc95, i32** %.loc95.reg2mem, align 8
  %.loc94 = alloca i64, align 8
  store i64* %.loc94, i64** %.loc94.reg2mem, align 8
  %.loc93 = alloca i32, align 4
  store i32* %.loc93, i32** %.loc93.reg2mem, align 8
  %.loc92 = alloca i64, align 8
  store i64* %.loc92, i64** %.loc92.reg2mem, align 8
  %.loc91 = alloca i32, align 4
  store i32* %.loc91, i32** %.loc91.reg2mem, align 8
  %.loc83 = alloca i32, align 4
  store i32* %.loc83, i32** %.loc83.reg2mem, align 8
  %.loc82 = alloca i32, align 4
  store i32* %.loc82, i32** %.loc82.reg2mem, align 8
  %.loc81 = alloca i32, align 4
  store i32* %.loc81, i32** %.loc81.reg2mem, align 8
  %.loc59 = alloca i1, align 1
  store i1* %.loc59, i1** %.loc59.reg2mem, align 8
  %.loc58 = alloca i1, align 1
  store i1* %.loc58, i1** %.loc58.reg2mem, align 8
  %.loc57 = alloca i1, align 1
  store i1* %.loc57, i1** %.loc57.reg2mem, align 8
  %.loc56 = alloca i1, align 1
  store i1* %.loc56, i1** %.loc56.reg2mem, align 8
  %.loc55 = alloca i1, align 1
  store i1* %.loc55, i1** %.loc55.reg2mem, align 8
  %.loc54 = alloca i1, align 1
  store i1* %.loc54, i1** %.loc54.reg2mem, align 8
  %12568 = and i64 %226, -1158953937296610404
  %12569 = or i64 1158953937296610403, %226
  %12570 = sub i64 %12569, 1158953937296610403
  %12571 = add i64 %1230, 5407627165007627094
  %12572 = sub i64 0, %1230
  %12573 = sub i64 5407627165007627094, %12572
  %12574 = xor i64 %12571, %12568
  %12575 = xor i64 %12574, 6500315561626313007
  %12576 = xor i64 %12575, %12570
  %12577 = xor i64 %12576, %12573
  %12578 = or i64 %1290, -4005349452488374467
  %12579 = xor i64 %1290, -1
  %12580 = and i64 %12579, 5171477139629553624
  %12581 = and i64 %1290, -5171477139629553625
  %12582 = or i64 %12580, %12581
  %12583 = xor i64 -8093279778535362331, %12582
  %12584 = xor i64 %1290, -1
  %12585 = or i64 4005349452488374466, %12584
  %12586 = xor i64 %12585, -1
  %12587 = and i64 %12586, -1
  %12588 = or i64 %12583, %12587
  %12589 = add i64 %1511, 2691603260930677348
  %12590 = and i64 2691603260930677348, %1511
  %12591 = or i64 2691603260930677348, %1511
  %12592 = add i64 %12590, %12591
  %12593 = xor i64 %12578, -2048998259343047217
  %12594 = xor i64 %12593, %12589
  %12595 = xor i64 %12594, %12592
  %12596 = xor i64 %12595, %12588
  %12597 = mul i64 %12577, %12596
  %12598 = trunc i64 %12597 to i32
  %.loc53 = alloca i32, i32 %12598, align 4
  store i32* %.loc53, i32** %.loc53.reg2mem, align 8
  %12599 = or i64 %1294, 1188547970534184768
  %12600 = xor i64 %1294, -1
  %12601 = and i64 1188547970534184768, %12600
  %12602 = add i64 %12601, %1294
  %12603 = or i64 %1404, 8769815898701841086
  %12604 = xor i64 %1404, -1
  %12605 = and i64 %12604, -2409304979010130773
  %12606 = and i64 %1404, 2409304979010130772
  %12607 = or i64 %12605, %12606
  %12608 = xor i64 -6402771791710310891, %12607
  %12609 = xor i64 %1404, -1
  %12610 = or i64 -8769815898701841087, %12609
  %12611 = xor i64 %12610, -1
  %12612 = and i64 %12611, -1
  %12613 = or i64 %12608, %12612
  %12614 = xor i64 %12603, %12602
  %12615 = xor i64 %12614, 556794567453099725
  %12616 = xor i64 %12615, %12613
  %12617 = xor i64 %12616, %12599
  %12618 = or i64 %1302, -978571417114160079
  %12619 = xor i64 %1302, -1
  %12620 = and i64 %12619, 9035929922592360275
  %12621 = and i64 %1302, -9035929922592360276
  %12622 = or i64 %12620, %12621
  %12623 = xor i64 -8138716903003679902, %12622
  %12624 = xor i64 %1302, -1
  %12625 = or i64 978571417114160078, %12624
  %12626 = xor i64 %12625, -1
  %12627 = and i64 %12626, -1
  %12628 = or i64 %12623, %12627
  %12629 = add i64 %292, -953678601395034969
  %12630 = xor i64 -953678601395034969, %292
  %12631 = and i64 -953678601395034969, %292
  %12632 = mul i64 2, %12631
  %12633 = add i64 %12630, %12632
  %12634 = or i64 %1513, 6803271867677633264
  %12635 = xor i64 %1513, -1
  %12636 = and i64 6803271867677633264, %12635
  %12637 = add i64 %12636, %1513
  %12638 = xor i64 %12633, %12629
  %12639 = xor i64 %12638, %12637
  %12640 = xor i64 %12639, %12618
  %12641 = xor i64 %12640, 4952793030917133829
  %12642 = xor i64 %12641, %12628
  %12643 = xor i64 %12642, %12634
  %12644 = mul i64 %12617, %12643
  %12645 = trunc i64 %12644 to i32
  %.loc52 = alloca i32, i32 %12645, align 4
  store i32* %.loc52, i32** %.loc52.reg2mem, align 8
  %.loc51 = alloca i32, align 4
  store i32* %.loc51, i32** %.loc51.reg2mem, align 8
  %12646 = add i64 %234, -3154886361521324704
  %12647 = xor i64 -3154886361521324704, %234
  %12648 = and i64 -3154886361521324704, %234
  %12649 = mul i64 2, %12648
  %12650 = add i64 %12647, %12649
  %12651 = and i64 %992, -4452323124550938956
  %12652 = xor i64 %992, -1
  %12653 = xor i64 -4452323124550938956, %12652
  %12654 = and i64 %12653, -4452323124550938956
  %12655 = xor i64 %12651, %12654
  %12656 = xor i64 %12655, %12646
  %12657 = xor i64 %12656, %12650
  %12658 = xor i64 %12657, 2000232745733158485
  %12659 = and i64 %1185, 1333479996947252929
  %12660 = xor i64 %1185, -1
  %12661 = or i64 -1333479996947252930, %12660
  %12662 = xor i64 %12661, -1
  %12663 = and i64 %12662, -1
  %12664 = or i64 %383, -741470717654195320
  %12665 = xor i64 %383, -1
  %12666 = and i64 %12665, 3508925680981760248
  %12667 = and i64 %383, -3508925680981760249
  %12668 = or i64 %12666, %12667
  %12669 = xor i64 -4249162606461846672, %12668
  %12670 = xor i64 %383, -1
  %12671 = or i64 741470717654195319, %12670
  %12672 = xor i64 %12671, -1
  %12673 = and i64 %12672, -1
  %12674 = or i64 %12669, %12673
  %12675 = xor i64 -7951633453191932163, %12659
  %12676 = xor i64 %12675, %12664
  %12677 = xor i64 %12676, %12674
  %12678 = xor i64 %12677, %12663
  %12679 = mul i64 %12658, %12678
  %12680 = trunc i64 %12679 to i32
  %.loc50 = alloca i32, i32 %12680, align 4
  store i32* %.loc50, i32** %.loc50.reg2mem, align 8
  %.loc28 = alloca i1, align 1
  store i1* %.loc28, i1** %.loc28.reg2mem, align 8
  %.loc27 = alloca i1, align 1
  store i1* %.loc27, i1** %.loc27.reg2mem, align 8
  %.loc26 = alloca i1, align 1
  store i1* %.loc26, i1** %.loc26.reg2mem, align 8
  %12681 = and i64 %236, 2243419707628725333
  %12682 = or i64 -2243419707628725334, %236
  %12683 = sub i64 %12682, -2243419707628725334
  %12684 = or i64 %96, 301179065644833604
  %12685 = xor i64 %96, -1
  %12686 = and i64 %12685, 5202163727398797131
  %12687 = and i64 %96, -5202163727398797132
  %12688 = or i64 %12686, %12687
  %12689 = xor i64 5485327836154536975, %12688
  %12690 = xor i64 %96, -1
  %12691 = or i64 -301179065644833605, %12690
  %12692 = xor i64 %12691, -1
  %12693 = and i64 %12692, -1
  %12694 = or i64 %12689, %12693
  %12695 = xor i64 %12681, %12684
  %12696 = xor i64 %12695, %12683
  %12697 = xor i64 %12696, -2343840255730855853
  %12698 = xor i64 %12697, %12694
  %12699 = add i64 %1284, 7478375704500554160
  %12700 = sub i64 0, %1284
  %12701 = sub i64 7478375704500554160, %12700
  %12702 = or i64 %1298, 6002789368952983713
  %12703 = xor i64 %1298, -1
  %12704 = and i64 6002789368952983713, %12703
  %12705 = add i64 %12704, %1298
  %12706 = add i64 %11, -3381092843610360530
  %12707 = and i64 -3381092843610360530, %11
  %12708 = or i64 -3381092843610360530, %11
  %12709 = add i64 %12707, %12708
  %12710 = xor i64 %12709, %12699
  %12711 = xor i64 %12710, 4343112844475102171
  %12712 = xor i64 %12711, %12702
  %12713 = xor i64 %12712, %12705
  %12714 = xor i64 %12713, %12706
  %12715 = xor i64 %12714, %12701
  %12716 = mul i64 %12698, %12715
  %12717 = trunc i64 %12716 to i32
  %.loc25 = alloca i1, i32 %12717, align 1
  store i1* %.loc25, i1** %.loc25.reg2mem, align 8
  %12718 = and i64 %559, 8097743242600925288
  %12719 = or i64 -8097743242600925289, %559
  %12720 = sub i64 %12719, -8097743242600925289
  %12721 = add i64 %778, -4648225510871767062
  %12722 = and i64 -4648225510871767062, %778
  %12723 = or i64 -4648225510871767062, %778
  %12724 = add i64 %12722, %12723
  %12725 = add i64 %680, -1284726083415975569
  %12726 = sub i64 0, %680
  %12727 = add i64 1284726083415975569, %12726
  %12728 = sub i64 0, %12727
  %12729 = xor i64 %12724, %12725
  %12730 = xor i64 %12729, %12721
  %12731 = xor i64 %12730, %12728
  %12732 = xor i64 %12731, 2324349364205324599
  %12733 = xor i64 %12732, %12720
  %12734 = xor i64 %12733, %12718
  %12735 = or i64 %1649, -7415341157430912074
  %12736 = and i64 -7415341157430912074, %1649
  %12737 = xor i64 -7415341157430912074, %1649
  %12738 = or i64 %12736, %12737
  %12739 = add i64 %786, -7210375521054133301
  %12740 = sub i64 0, %786
  %12741 = sub i64 -7210375521054133301, %12740
  %12742 = xor i64 %12739, %12738
  %12743 = xor i64 %12742, %12741
  %12744 = xor i64 %12743, %12735
  %12745 = xor i64 %12744, 5887297487694396551
  %12746 = mul i64 %12734, %12745
  %12747 = trunc i64 %12746 to i32
  %.loc24 = alloca i1, i32 %12747, align 1
  store i1* %.loc24, i1** %.loc24.reg2mem, align 8
  %.loc23 = alloca i64, align 8
  store i64* %.loc23, i64** %.loc23.reg2mem, align 8
  %.loc22 = alloca i1, align 1
  store i1* %.loc22, i1** %.loc22.reg2mem, align 8
  %.loc21 = alloca i64, align 8
  store i64* %.loc21, i64** %.loc21.reg2mem, align 8
  %.loc20 = alloca i32, align 4
  store i32* %.loc20, i32** %.loc20.reg2mem, align 8
  %.loc7 = alloca i32, align 4
  store i32* %.loc7, i32** %.loc7.reg2mem, align 8
  %.loc6 = alloca i32, align 4
  store i32* %.loc6, i32** %.loc6.reg2mem, align 8
  %.loc5 = alloca i32, align 4
  store i32* %.loc5, i32** %.loc5.reg2mem, align 8
  %.loc4 = alloca double, align 8
  store double* %.loc4, double** %.loc4.reg2mem, align 8
  %.loc3 = alloca float, align 4
  store float* %.loc3, float** %.loc3.reg2mem, align 8
  %.loc = alloca i1, align 1
  store i1* %.loc, i1** %.loc.reg2mem, align 8
  %.reload726 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537082, i64* %.reload726, align 8
  %.reload725 = load i64*, i64** %.reg2mem696, align 8
  %12748 = call i8** @lk14802275186744156584(i64* %.reload725)
  %12749 = load i8*, i8** %12748, align 8
  %12750 = bitcast i8* %12749 to i32 (i8*, i64, float*, i64)*
  %12751 = call i32 %12750(i8* %84, i64 1760, float* %85, i64 7040)
  store i32 %12751, i32* %.reg2mem805, align 4
  %.reload813 = load i32, i32* %.reg2mem805, align 4
  %12752 = icmp eq i32 %.reload813, 0
  %.reload342 = load i8**, i8*** %.reg2mem341, align 8
  %.reload562 = load i8**, i8*** %.reg2mem559, align 8
  %12753 = select i1 %12752, i8** %.reload342, i8** %.reload562
  %12754 = load i8*, i8** %12753, align 8
  %.reload806 = load i32, i32* %.reg2mem805, align 4
  store i32 %.reload806, i32* %.reg2mem995, align 4
  indirectbr i8* %12754, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"87":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload812 = load i32, i32* %.reg2mem805, align 4
  %12755 = srem i32 %.reload812, 2
  store i32 %12755, i32* %.reg2mem814, align 4
  %.reload816 = load i32, i32* %.reg2mem814, align 4
  %12756 = icmp eq i32 %.reload816, 0
  %.reload345 = load i8**, i8*** %.reg2mem344, align 8
  %.reload348 = load i8**, i8*** %.reg2mem347, align 8
  %12757 = select i1 %12756, i8** %.reload345, i8** %.reload348
  %12758 = load i8*, i8** %12757, align 8
  indirectbr i8* %12758, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"88":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload724 = load i64*, i64** %.reg2mem696, align 8
  %12759 = or i64 %557, -1965956106777897118
  %12760 = and i64 -1965956106777897118, %557
  %12761 = xor i64 -1965956106777897118, %557
  %12762 = or i64 %12760, %12761
  %12763 = and i64 %1588, -8256740980442741288
  %12764 = or i64 8256740980442741287, %1588
  %12765 = sub i64 %12764, 8256740980442741287
  %12766 = xor i64 -2769802017937561971, %12765
  %12767 = xor i64 %12766, %12762
  %12768 = xor i64 %12767, %12763
  %12769 = xor i64 %12768, %12759
  %12770 = or i64 %866, -5759731592771189441
  %12771 = xor i64 %866, -1
  %12772 = and i64 %12771, 1158334730745979390
  %12773 = and i64 %866, -1158334730745979391
  %12774 = or i64 %12772, %12773
  %12775 = xor i64 -6916849610684373823, %12774
  %12776 = xor i64 %866, -1
  %12777 = or i64 5759731592771189440, %12776
  %12778 = xor i64 %12777, -1
  %12779 = and i64 %12778, -1
  %12780 = or i64 %12775, %12779
  %12781 = and i64 %1129, 7289618573986749741
  %12782 = or i64 -7289618573986749742, %1129
  %12783 = sub i64 %12782, -7289618573986749742
  %12784 = xor i64 %12783, %12770
  %12785 = xor i64 %12784, %12781
  %12786 = xor i64 %12785, %12780
  %12787 = xor i64 %12786, -6744700353709411644
  %12788 = mul i64 %12769, %12787
  store i64 %12788, i64* %.reload724, align 8
  %.reload723 = load i64*, i64** %.reg2mem696, align 8
  %12789 = call i8** @lk14802275186744156584(i64* %.reload723)
  %12790 = load i8*, i8** %12789, align 8
  %12791 = bitcast i8* %12790 to i32 (float, float*, float*, i8*, float*)*
  %12792 = call i32 %12791(float 0.000000e+00, float* %82, float* %83, i8* %84, float* %85)
  %12793 = icmp eq i32 %12792, 0
  %.reload353 = load i8**, i8*** %.reg2mem350, align 8
  %12794 = load i8*, i8** %.reload353, align 8
  store i32 %12792, i32* %.reg2mem955, align 4
  store i1 %12793, i1* %.reg2mem957, align 1
  indirectbr i8* %12794, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"89":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload722 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537086, i64* %.reload722, align 8
  %.reload721 = load i64*, i64** %.reg2mem696, align 8
  %12795 = call i8** @lk14802275186744156584(i64* %.reload721)
  %12796 = load i8*, i8** %12795, align 8
  %12797 = bitcast i8* %12796 to i32 (float, float*, float*, i8*, float*)*
  %12798 = call i32 %12797(float 0.000000e+00, float* %82, float* %83, i8* %84, float* %85)
  %12799 = icmp eq i32 %12798, 0
  %.reload352 = load i8**, i8*** %.reg2mem350, align 8
  %12800 = load i8*, i8** %.reload352, align 8
  store i32 %12798, i32* %.reg2mem955, align 4
  store i1 %12799, i1* %.reg2mem957, align 1
  indirectbr i8* %12800, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"90":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload958 = load i1, i1* %.reg2mem957, align 1
  %.reload956 = load i32, i32* %.reg2mem955, align 4
  store i1 %.reload958, i1* %.reg2mem838, align 1
  store i32 %.reload956, i32* %.reg2mem817, align 4
  %.reload811 = load i32, i32* %.reg2mem805, align 4
  %12801 = srem i32 %.reload811, 2
  %12802 = icmp eq i32 %12801, 0
  %.reload356 = load i8**, i8*** %.reg2mem355, align 8
  %.reload369 = load i8**, i8*** %.reg2mem368, align 8
  %12803 = select i1 %12802, i8** %.reload356, i8** %.reload369
  %12804 = load i8*, i8** %12803, align 8
  indirectbr i8* %12804, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"91":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %12805 = sdiv i64 29, 64
  %12806 = sdiv i64 103, 14
  %12807 = and i64 %236, 8301543408100515903
  %12808 = xor i64 %236, -1
  %12809 = or i64 -8301543408100515904, %12808
  %12810 = xor i64 %12809, -1
  %12811 = and i64 %12810, -1
  %12812 = and i64 %286, 973150340534660069
  %12813 = xor i64 %286, -1
  %12814 = or i64 -973150340534660070, %12813
  %12815 = xor i64 %12814, -1
  %12816 = and i64 %12815, -1
  %12817 = or i64 %1076, -6656523382049775086
  %12818 = and i64 -6656523382049775086, %1076
  %12819 = xor i64 -6656523382049775086, %1076
  %12820 = or i64 %12818, %12819
  %12821 = xor i64 %12816, %12812
  %12822 = xor i64 %12821, %12807
  %12823 = xor i64 %12822, %12817
  %12824 = xor i64 %12823, %12811
  %12825 = xor i64 %12824, -7341223883550797383
  %12826 = xor i64 %12825, %12820
  %12827 = add i64 %660, -3838384858742595601
  %12828 = sub i64 0, %660
  %12829 = sub i64 -3838384858742595601, %12828
  %12830 = add i64 %1517, 2831318978835506993
  %12831 = xor i64 2831318978835506993, %1517
  %12832 = and i64 2831318978835506993, %1517
  %12833 = mul i64 2, %12832
  %12834 = add i64 %12831, %12833
  %12835 = xor i64 4564245919795475231, %12827
  %12836 = xor i64 %12835, %12834
  %12837 = xor i64 %12836, %12830
  %12838 = xor i64 %12837, %12829
  %12839 = mul i64 %12826, %12838
  %12840 = mul i64 118, %12839
  %12841 = sdiv i64 61, 60
  %12842 = add i64 %1240, -6494891553891715703
  %12843 = add i64 6149685461935647233, %1240
  %12844 = sub i64 %12843, -5802167057882188680
  %12845 = or i64 %605, -703883728531738847
  %12846 = and i64 -703883728531738847, %605
  %12847 = xor i64 -703883728531738847, %605
  %12848 = or i64 %12846, %12847
  %12849 = xor i64 %12844, -2145890223454659933
  %12850 = xor i64 %12849, %12848
  %12851 = xor i64 %12850, %12842
  %12852 = xor i64 %12851, %12845
  %12853 = or i64 %284, 2151907911021436167
  %12854 = xor i64 %284, -1
  %12855 = and i64 2151907911021436167, %12854
  %12856 = add i64 %12855, %284
  %12857 = or i64 %770, 2101963899171761644
  %12858 = and i64 2101963899171761644, %770
  %12859 = xor i64 2101963899171761644, %770
  %12860 = or i64 %12858, %12859
  %12861 = xor i64 %12857, -2843105596566540118
  %12862 = xor i64 %12861, %12853
  %12863 = xor i64 %12862, %12856
  %12864 = xor i64 %12863, %12860
  %12865 = mul i64 %12852, %12864
  %12866 = sdiv i64 %12865, 72
  %12867 = sub i64 110, -48
  %12868 = add i64 7629015634723991285, -7629015634723991207
  %.reload837 = load i32, i32* %.reg2mem817, align 4
  %12869 = srem i32 %.reload837, 2
  %12870 = icmp eq i32 %12869, 0
  %.reload836 = load i32, i32* %.reg2mem817, align 4
  %12871 = mul i32 %.reload836, 2
  %.reload835 = load i32, i32* %.reg2mem817, align 4
  %12872 = mul i32 %.reload835, 2
  %12873 = add i32 2, %12872
  %12874 = mul i32 %12871, %12873
  %12875 = srem i32 %12874, 4
  %12876 = icmp eq i32 %12875, 0
  %.reload834 = load i32, i32* %.reg2mem817, align 4
  %12877 = mul i32 %.reload834, %.reload834
  %.reload833 = load i32, i32* %.reg2mem817, align 4
  %12878 = mul i32 %12877, %.reload833
  %.reload832 = load i32, i32* %.reg2mem817, align 4
  %12879 = sub i32 0, %.reload832
  %12880 = sub i32 %12878, %12879
  %12881 = srem i32 %12880, 2
  %12882 = icmp eq i32 %12881, 0
  %12883 = and i1 %12876, %12882
  store i1 %12883, i1* %.reg2mem840, align 1
  %.reload359 = load i8**, i8*** %.reg2mem358, align 8
  %.reload362 = load i8**, i8*** %.reg2mem361, align 8
  %.reload842 = load i1, i1* %.reg2mem840, align 1
  %12884 = select i1 %.reload842, i8** %.reload362, i8** %.reload359
  %12885 = load i8*, i8** %12884, align 8
  indirectbr i8* %12885, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"92":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %12886 = mul i64 45, 4
  %.reload351 = load i8**, i8*** %.reg2mem350, align 8
  %.reload366 = load i8**, i8*** %.reg2mem364, align 8
  %.reload841 = load i1, i1* %.reg2mem840, align 1
  %12887 = select i1 %.reload841, i8** %.reload366, i8** %.reload351
  %12888 = load i8*, i8** %12887, align 8
  store i32 0, i32* %.reg2mem955, align 4
  store i1 false, i1* %.reg2mem957, align 1
  indirectbr i8* %12888, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"93":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %12889 = mul i64 45, 4
  %.reload365 = load i8**, i8*** %.reg2mem364, align 8
  %12890 = load i8*, i8** %.reload365, align 8
  indirectbr i8* %12890, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"94":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload373 = load i8**, i8*** %.reg2mem371, align 8
  %12891 = load i8*, i8** %.reload373, align 8
  indirectbr i8* %12891, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"95":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload372 = load i8**, i8*** %.reg2mem371, align 8
  %12892 = load i8*, i8** %.reload372, align 8
  indirectbr i8* %12892, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"96":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload376 = load i8**, i8*** %.reg2mem375, align 8
  %.reload547 = load i8**, i8*** %.reg2mem545, align 8
  %.reload839 = load i1, i1* %.reg2mem838, align 1
  %12893 = select i1 %.reload839, i8** %.reload376, i8** %.reload547
  %12894 = load i8*, i8** %12893, align 8
  %.reload822 = load i32, i32* %.reg2mem817, align 4
  store i32 %.reload822, i32* %.reg2mem991, align 4
  store i1 true, i1* %.reg2mem993, align 1
  indirectbr i8* %12894, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.preheader:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload810 = load i32, i32* %.reg2mem805, align 4
  %12895 = xor i32 %.reload810, -2
  %12896 = and i32 %12895, %.reload810
  %12897 = icmp eq i32 %12896, 1
  %.reload809 = load i32, i32* %.reg2mem805, align 4
  %12898 = mul i32 %.reload809, %.reload809
  store i32 %12898, i32* %.reg2mem843, align 4
  %.reload808 = load i32, i32* %.reg2mem805, align 4
  %.reload845 = load i32, i32* %.reg2mem843, align 4
  %12899 = add i32 %.reload845, %.reload808
  store i32 %12899, i32* %.reg2mem846, align 4
  %.reload854 = load i32, i32* %.reg2mem846, align 4
  %12900 = or i64 %1341, 7103777211995079005
  %12901 = xor i64 %1341, -1
  %12902 = and i64 %12901, 6308617759088060232
  %12903 = and i64 %1341, -6308617759088060233
  %12904 = or i64 %12902, %12903
  %12905 = xor i64 3826117747328247317, %12904
  %12906 = xor i64 %1341, -1
  %12907 = or i64 -7103777211995079006, %12906
  %12908 = xor i64 %12907, -1
  %12909 = and i64 %12908, -1
  %12910 = or i64 %12905, %12909
  %12911 = add i64 %686, -4541790183065648667
  %12912 = xor i64 -4541790183065648667, %686
  %12913 = and i64 -4541790183065648667, %686
  %12914 = mul i64 2, %12913
  %12915 = add i64 %12912, %12914
  %12916 = and i64 %1341, -2256518956098900663
  %12917 = xor i64 %1341, -1
  %12918 = or i64 2256518956098900662, %12917
  %12919 = xor i64 %12918, -1
  %12920 = and i64 %12919, -1
  %12921 = xor i64 %12916, %12910
  %12922 = xor i64 %12921, %12915
  %12923 = xor i64 %12922, -2793813229250994495
  %12924 = xor i64 %12923, %12900
  %12925 = xor i64 %12924, %12911
  %12926 = xor i64 %12925, %12920
  %12927 = add i64 %224, 3220900269640541890
  %12928 = sub i64 0, %224
  %12929 = sub i64 3220900269640541890, %12928
  %12930 = and i64 %1535, -7175517071760270730
  %12931 = or i64 7175517071760270729, %1535
  %12932 = sub i64 %12931, 7175517071760270729
  %12933 = xor i64 %12930, %12932
  %12934 = xor i64 %12933, -8616519751614537086
  %12935 = xor i64 %12934, %12929
  %12936 = xor i64 %12935, %12927
  %12937 = mul i64 %12926, %12936
  %12938 = trunc i64 %12937 to i32
  %12939 = srem i32 %.reload854, %12938
  store i32 %12939, i32* %.reg2mem855, align 4
  %.reload857 = load i32, i32* %.reg2mem855, align 4
  %12940 = icmp eq i32 %.reload857, 0
  %12941 = or i1 %12897, %12940
  %.reload379 = load i8**, i8*** %.reg2mem378, align 8
  %.reload382 = load i8**, i8*** %.reg2mem381, align 8
  %12942 = select i1 %12941, i8** %.reload382, i8** %.reload379
  %12943 = load i8*, i8** %12942, align 8
  indirectbr i8* %12943, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"98":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload460 = load i8**, i8*** %.reg2mem457, align 8
  %12944 = load i8*, i8** %.reload460, align 8
  indirectbr i8* %12944, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"99":                                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload831 = load i32, i32* %.reg2mem817, align 4
  %12945 = add i64 %1302, -8834126495383567888
  %12946 = xor i64 -8834126495383567888, %1302
  %12947 = and i64 -8834126495383567888, %1302
  %12948 = mul i64 2, %12947
  %12949 = add i64 %12946, %12948
  %12950 = add i64 %1509, 3987901930056754914
  %12951 = xor i64 3987901930056754914, %1509
  %12952 = and i64 3987901930056754914, %1509
  %12953 = mul i64 2, %12952
  %12954 = add i64 %12951, %12953
  %12955 = xor i64 %12945, -8362252142015034371
  %12956 = xor i64 %12955, %12949
  %12957 = xor i64 %12956, %12950
  %12958 = xor i64 %12957, %12954
  %12959 = add i64 %666, -4790324247830746108
  %12960 = add i64 -992660668439968519, %666
  %12961 = add i64 %12960, -3797663579390777589
  %12962 = and i64 %682, -5012458303653487002
  %12963 = xor i64 %682, -1
  %12964 = xor i64 -5012458303653487002, %12963
  %12965 = and i64 %12964, -5012458303653487002
  %12966 = and i64 %866, 775045095329923908
  %12967 = xor i64 %866, -1
  %12968 = xor i64 775045095329923908, %12967
  %12969 = and i64 %12968, 775045095329923908
  %12970 = xor i64 %12969, %12959
  %12971 = xor i64 %12970, %12962
  %12972 = xor i64 %12971, %12965
  %12973 = xor i64 %12972, %12966
  %12974 = xor i64 %12973, -573187226892119382
  %12975 = xor i64 %12974, %12961
  %12976 = mul i64 %12958, %12975
  %12977 = trunc i64 %12976 to i32
  %12978 = srem i32 %.reload831, %12977
  store i32 %12978, i32* %.reg2mem858, align 4
  %.reload860 = load i32, i32* %.reg2mem858, align 4
  %12979 = icmp eq i32 %.reload860, 0
  %.reload386 = load i8**, i8*** %.reg2mem384, align 8
  %.reload412 = load i8**, i8*** %.reg2mem411, align 8
  %12980 = select i1 %12979, i8** %.reload386, i8** %.reload412
  %12981 = load i8*, i8** %12980, align 8
  indirectbr i8* %12981, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"100":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload830 = load i32, i32* %.reg2mem817, align 4
  %12982 = srem i32 %.reload830, 2
  %12983 = icmp eq i32 %12982, 0
  %.reload389 = load i8**, i8*** %.reg2mem388, align 8
  %.reload405 = load i8**, i8*** %.reg2mem404, align 8
  %12984 = select i1 %12983, i8** %.reload389, i8** %.reload405
  %12985 = load i8*, i8** %12984, align 8
  indirectbr i8* %12985, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl27:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc.reload804 = load i1*, i1** %.loc.reg2mem, align 8
  %lt.cast = bitcast i1* %.loc.reload804 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast)
  %.reload720 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537073, i64* %.reload720, align 8
  %.reload719 = load i64*, i64** %.reg2mem696, align 8
  %12986 = call i8** @lk14802275186744156584(i64* %.reload719)
  %12987 = load i8*, i8** %12986, align 8
  %12988 = bitcast i8* %12987 to i1 (i32, i32, i1*)*
  %.loc.reload803 = load i1*, i1** %.loc.reg2mem, align 8
  %.reload829 = load i32, i32* %.reg2mem817, align 4
  %.reload853 = load i32, i32* %.reg2mem846, align 4
  %targetBlock28 = call i1 %12988(i32 %.reload829, i32 %.reload853, i1* %.loc.reload803)
  %.loc.reload = load i1*, i1** %.loc.reg2mem, align 8
  %.reload = load i1, i1* %.loc.reload, align 1
  store i1 %.reload, i1* %.reload.reg2mem, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast)
  %.reload392 = load i8**, i8*** %.reg2mem391, align 8
  %.reload395 = load i8**, i8*** %.reg2mem394, align 8
  %12989 = select i1 %targetBlock28, i8** %.reload392, i8** %.reload395
  %12990 = load i8*, i8** %12989, align 8
  indirectbr i8* %12990, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"102":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %12991 = add i64 22, 61
  %12992 = add i64 43, 51
  %12993 = add i64 23, 29
  %12994 = sdiv i64 79, 116
  %12995 = and i64 %385, -9171697987694001552
  %12996 = or i64 9171697987694001551, %385
  %12997 = sub i64 %12996, 9171697987694001551
  %12998 = or i64 %230, -6872687839595780375
  %12999 = xor i64 %230, -1
  %13000 = and i64 -6872687839595780375, %12999
  %13001 = add i64 %13000, %230
  %13002 = sext i32 %50 to i64
  %13003 = and i64 %13002, -8995842234539092334
  %13004 = xor i64 %13002, -1
  %13005 = xor i64 -8995842234539092334, %13004
  %13006 = and i64 %13005, -8995842234539092334
  %13007 = xor i64 %12998, %13003
  %13008 = xor i64 %13007, %12997
  %13009 = xor i64 %13008, %13006
  %13010 = xor i64 %13009, %12995
  %13011 = xor i64 %13010, -2242963504783915689
  %13012 = xor i64 %13011, %13001
  %13013 = or i64 %95, -8050891760013012013
  %13014 = and i64 -8050891760013012013, %95
  %13015 = xor i64 -8050891760013012013, %95
  %13016 = or i64 %13014, %13015
  %13017 = and i64 %452, -4030039637595609350
  %13018 = xor i64 %452, -1
  %13019 = or i64 4030039637595609349, %13018
  %13020 = xor i64 %13019, -1
  %13021 = and i64 %13020, -1
  %13022 = and i64 %448, 6196434778247567634
  %13023 = xor i64 %448, -1
  %13024 = xor i64 6196434778247567634, %13023
  %13025 = and i64 %13024, 6196434778247567634
  %13026 = xor i64 %13017, 9149181968486703158
  %13027 = xor i64 %13026, %13022
  %13028 = xor i64 %13027, %13016
  %13029 = xor i64 %13028, %13021
  %13030 = xor i64 %13029, %13013
  %13031 = xor i64 %13030, %13025
  %13032 = mul i64 %13012, %13031
  %13033 = sub i64 %13032, 81
  %13034 = and i64 %1288, 325057284816542404
  %13035 = xor i64 %1288, -1
  %13036 = or i64 -325057284816542405, %13035
  %13037 = xor i64 %13036, -1
  %13038 = and i64 %13037, -1
  %13039 = or i64 %774, -1357911295774898819
  %13040 = and i64 -1357911295774898819, %774
  %13041 = xor i64 -1357911295774898819, %774
  %13042 = or i64 %13040, %13041
  %13043 = xor i64 %13038, 1289660515782152131
  %13044 = xor i64 %13043, %13039
  %13045 = xor i64 %13044, %13034
  %13046 = xor i64 %13045, %13042
  %13047 = and i64 %794, -1211508022564017132
  %13048 = xor i64 %794, -1
  %13049 = or i64 1211508022564017131, %13048
  %13050 = xor i64 %13049, -1
  %13051 = and i64 %13050, -1
  %13052 = and i64 %1038, -7849091061547906401
  %13053 = or i64 7849091061547906400, %1038
  %13054 = sub i64 %13053, 7849091061547906400
  %13055 = sext i32 %50 to i64
  %13056 = and i64 %13055, -6946284712963142626
  %13057 = xor i64 %13055, -1
  %13058 = xor i64 -6946284712963142626, %13057
  %13059 = and i64 %13058, -6946284712963142626
  %13060 = xor i64 %13051, %13047
  %13061 = xor i64 %13060, 6752443771644974466
  %13062 = xor i64 %13061, %13052
  %13063 = xor i64 %13062, %13059
  %13064 = xor i64 %13063, %13056
  %13065 = xor i64 %13064, %13054
  %13066 = mul i64 %13046, %13065
  %13067 = sdiv i64 %13066, 36
  %13068 = sdiv i64 60, 60
  %13069 = sdiv i64 56, 89
  %13070 = sub i64 8, 118
  %.reload399 = load i8**, i8*** %.reg2mem397, align 8
  %13071 = load i8*, i8** %.reload399, align 8
  indirectbr i8* %13071, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"103":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13072 = or i64 %1302, 9066716142913544398
  %13073 = and i64 9066716142913544398, %1302
  %13074 = xor i64 9066716142913544398, %1302
  %13075 = or i64 %13073, %13074
  %13076 = and i64 %770, 5403491783009837422
  %13077 = xor i64 %770, -1
  %13078 = or i64 -5403491783009837423, %13077
  %13079 = xor i64 %13078, -1
  %13080 = and i64 %13079, -1
  %13081 = xor i64 %13076, %13080
  %13082 = xor i64 %13081, %13075
  %13083 = xor i64 %13082, -5643035336600440871
  %13084 = xor i64 %13083, %13072
  %13085 = and i64 %494, 3596859782693446023
  %13086 = or i64 -3596859782693446024, %494
  %13087 = sub i64 %13086, -3596859782693446024
  %13088 = or i64 %922, 31782664202732665
  %13089 = and i64 31782664202732665, %922
  %13090 = xor i64 31782664202732665, %922
  %13091 = or i64 %13089, %13090
  %13092 = xor i64 211555803692147003, %13088
  %13093 = xor i64 %13092, %13091
  %13094 = xor i64 %13093, %13085
  %13095 = xor i64 %13094, %13087
  %13096 = mul i64 %13084, %13095
  %13097 = and i64 %678, 7972727041978988730
  %13098 = or i64 -7972727041978988731, %678
  %13099 = sub i64 %13098, -7972727041978988731
  %13100 = and i64 %561, -3538936561453419119
  %13101 = or i64 3538936561453419118, %561
  %13102 = sub i64 %13101, 3538936561453419118
  %13103 = xor i64 -8285508516718492869, %13102
  %13104 = xor i64 %13103, %13099
  %13105 = xor i64 %13104, %13097
  %13106 = xor i64 %13105, %13100
  %13107 = add i64 %994, -3944549687999678948
  %13108 = add i64 -180397848695572087, %994
  %13109 = add i64 %13108, -3764151839304106861
  %13110 = and i64 %284, -7744398364918399663
  %13111 = or i64 7744398364918399662, %284
  %13112 = sub i64 %13111, 7744398364918399662
  %13113 = and i64 %71, 1292451142731557642
  %13114 = xor i64 %71, -1
  %13115 = or i64 -1292451142731557643, %13114
  %13116 = xor i64 %13115, -1
  %13117 = and i64 %13116, -1
  %13118 = xor i64 %13112, %13110
  %13119 = xor i64 %13118, %13117
  %13120 = xor i64 %13119, %13113
  %13121 = xor i64 %13120, -8672295399663248400
  %13122 = xor i64 %13121, %13107
  %13123 = xor i64 %13122, %13109
  %13124 = mul i64 %13106, %13123
  %13125 = add i64 %13096, %13124
  %13126 = sub i64 2353206769585018528, 2353206769585018434
  %13127 = and i64 %1497, -340315809784266015
  %13128 = xor i64 %1497, -1
  %13129 = xor i64 -340315809784266015, %13128
  %13130 = and i64 %13129, -340315809784266015
  %13131 = or i64 %668, 2087820382232152449
  %13132 = xor i64 %668, -1
  %13133 = and i64 2087820382232152449, %13132
  %13134 = add i64 %13133, %668
  %13135 = xor i64 %13134, %13127
  %13136 = xor i64 %13135, -6983718802484925887
  %13137 = xor i64 %13136, %13131
  %13138 = xor i64 %13137, %13130
  %13139 = add i64 %1493, 8992416471787470563
  %13140 = add i64 -2669523699119100701, %1493
  %13141 = add i64 %13140, -6784803902802980352
  %13142 = add i64 %1655, 8953010841152126670
  %13143 = xor i64 8953010841152126670, %1655
  %13144 = and i64 8953010841152126670, %1655
  %13145 = mul i64 2, %13144
  %13146 = add i64 %13143, %13145
  %13147 = xor i64 6988031559435398109, %13146
  %13148 = xor i64 %13147, %13139
  %13149 = xor i64 %13148, %13142
  %13150 = xor i64 %13149, %13141
  %13151 = mul i64 %13138, %13150
  %13152 = sub i64 4348438123493008721, %13151
  %13153 = add i64 %563, -6176317593594107531
  %13154 = sub i64 0, %563
  %13155 = add i64 6176317593594107531, %13154
  %13156 = sub i64 0, %13155
  %13157 = and i64 %1513, -4199742975260101251
  %13158 = xor i64 %1513, -1
  %13159 = or i64 4199742975260101250, %13158
  %13160 = xor i64 %13159, -1
  %13161 = and i64 %13160, -1
  %13162 = or i64 %232, 9101829729253086198
  %13163 = xor i64 %232, -1
  %13164 = and i64 %13163, -427200525645550642
  %13165 = and i64 %232, 427200525645550641
  %13166 = or i64 %13164, %13165
  %13167 = xor i64 -8916433981739550664, %13166
  %13168 = xor i64 %232, -1
  %13169 = or i64 -9101829729253086199, %13168
  %13170 = xor i64 %13169, -1
  %13171 = and i64 %13170, -1
  %13172 = or i64 %13167, %13171
  %13173 = xor i64 %13153, %13172
  %13174 = xor i64 %13173, 1637893901659784543
  %13175 = xor i64 %13174, %13162
  %13176 = xor i64 %13175, %13161
  %13177 = xor i64 %13176, %13157
  %13178 = xor i64 %13177, %13156
  %13179 = add i64 %1234, -3950825621976328899
  %13180 = add i64 7967849937112644783, %1234
  %13181 = add i64 %13180, 6528068514620577934
  %13182 = or i64 %829, -8333197045013694844
  %13183 = xor i64 %829, -1
  %13184 = and i64 -8333197045013694844, %13183
  %13185 = add i64 %13184, %829
  %13186 = and i64 %912, 296390969566637331
  %13187 = or i64 -296390969566637332, %912
  %13188 = sub i64 %13187, -296390969566637332
  %13189 = xor i64 %13181, %13182
  %13190 = xor i64 %13189, %13188
  %13191 = xor i64 %13190, %13179
  %13192 = xor i64 %13191, %13186
  %13193 = xor i64 %13192, %13185
  %13194 = xor i64 %13193, -6182783089891262452
  %13195 = mul i64 %13178, %13194
  %13196 = sdiv i64 79, %13195
  %13197 = sub i64 90, 81
  %13198 = sdiv i64 6, 36
  %13199 = sdiv i64 60, 60
  %13200 = sdiv i64 56, 89
  %13201 = or i64 %1653, -7611718976883985042
  %13202 = and i64 -7611718976883985042, %1653
  %13203 = xor i64 -7611718976883985042, %1653
  %13204 = or i64 %13202, %13203
  %13205 = or i64 %389, 8535529059171041345
  %13206 = xor i64 %389, -1
  %13207 = and i64 8535529059171041345, %13206
  %13208 = add i64 %13207, %389
  %13209 = and i64 %1537, -2452344232693856650
  %13210 = xor i64 %1537, -1
  %13211 = or i64 2452344232693856649, %13210
  %13212 = xor i64 %13211, -1
  %13213 = and i64 %13212, -1
  %13214 = xor i64 5187893509903669575, %13213
  %13215 = xor i64 %13214, %13204
  %13216 = xor i64 %13215, %13201
  %13217 = xor i64 %13216, %13208
  %13218 = xor i64 %13217, %13205
  %13219 = xor i64 %13218, %13209
  %13220 = add i64 %1519, 6390099426994221495
  %13221 = sub i64 0, %1519
  %13222 = add i64 -6390099426994221495, %13221
  %13223 = sub i64 0, %13222
  %13224 = add i64 %1584, 3506907918113337235
  %13225 = and i64 3506907918113337235, %1584
  %13226 = or i64 3506907918113337235, %1584
  %13227 = add i64 %13225, %13226
  %13228 = or i64 %226, 4105366544571204885
  %13229 = xor i64 %226, -1
  %13230 = and i64 %13229, -3911011933934898602
  %13231 = and i64 %226, 3911011933934898601
  %13232 = or i64 %13230, %13231
  %13233 = xor i64 -1062715092123011261, %13232
  %13234 = xor i64 %226, -1
  %13235 = or i64 -4105366544571204886, %13234
  %13236 = xor i64 %13235, -1
  %13237 = and i64 %13236, -1
  %13238 = or i64 %13233, %13237
  %13239 = xor i64 %13227, -7530024127948127304
  %13240 = xor i64 %13239, %13223
  %13241 = xor i64 %13240, %13228
  %13242 = xor i64 %13241, %13238
  %13243 = xor i64 %13242, %13220
  %13244 = xor i64 %13243, %13224
  %13245 = mul i64 %13219, %13244
  %13246 = sub i64 %13245, 118
  %.reload385 = load i8**, i8*** %.reg2mem384, align 8
  %.reload398 = load i8**, i8*** %.reg2mem397, align 8
  %.reload.reload = load i1, i1* %.reload.reg2mem, align 1
  %13247 = select i1 %.reload.reload, i8** %.reload398, i8** %.reload385
  %13248 = load i8*, i8** %13247, align 8
  indirectbr i8* %13248, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"104":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload402 = load i8**, i8*** %.reg2mem401, align 8
  %13249 = load i8*, i8** %.reload402, align 8
  indirectbr i8* %13249, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl1:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload718 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537077, i64* %.reload718, align 8
  %.reload717 = load i64*, i64** %.reg2mem696, align 8
  %13250 = call i8** @lk14802275186744156584(i64* %.reload717)
  %13251 = load i8*, i8** %13250, align 8
  %13252 = bitcast i8* %13251 to void ()*
  call void %13252()
  %.reload409 = load i8**, i8*** %.reg2mem407, align 8
  %13253 = load i8*, i8** %.reload409, align 8
  indirectbr i8* %13253, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"106":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload408 = load i8**, i8*** %.reg2mem407, align 8
  %13254 = load i8*, i8** %.reload408, align 8
  indirectbr i8* %13254, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"107":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload417 = load i8**, i8*** %.reg2mem414, align 8
  %13255 = load i8*, i8** %.reload417, align 8
  indirectbr i8* %13255, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"108":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload416 = load i8**, i8*** %.reg2mem414, align 8
  %13256 = load i8*, i8** %.reload416, align 8
  indirectbr i8* %13256, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"109":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload807 = load i32, i32* %.reg2mem805, align 4
  %13257 = add i64 %71, -24786258319316289
  %13258 = and i64 -24786258319316289, %71
  %13259 = or i64 -24786258319316289, %71
  %13260 = add i64 %13258, %13259
  %13261 = or i64 %286, -2069381628496967970
  %13262 = and i64 -2069381628496967970, %286
  %13263 = xor i64 -2069381628496967970, %286
  %13264 = or i64 %13262, %13263
  %13265 = or i64 %1533, -2092542708261919956
  %13266 = xor i64 %1533, -1
  %13267 = and i64 %13266, 5602945985363070751
  %13268 = and i64 %1533, -5602945985363070752
  %13269 = or i64 %13267, %13268
  %13270 = xor i64 -5821919779267367885, %13269
  %13271 = xor i64 %1533, -1
  %13272 = or i64 2092542708261919955, %13271
  %13273 = xor i64 %13272, -1
  %13274 = and i64 %13273, -1
  %13275 = or i64 %13270, %13274
  %13276 = xor i64 %13264, %13275
  %13277 = xor i64 %13276, -534145501908882239
  %13278 = xor i64 %13277, %13265
  %13279 = xor i64 %13278, %13260
  %13280 = xor i64 %13279, %13261
  %13281 = xor i64 %13280, %13257
  %13282 = and i64 %1238, -8414016718107318809
  %13283 = xor i64 %1238, -1
  %13284 = or i64 8414016718107318808, %13283
  %13285 = xor i64 %13284, -1
  %13286 = and i64 %13285, -1
  %13287 = and i64 %780, 5993827595173575343
  %13288 = xor i64 %780, -1
  %13289 = or i64 -5993827595173575344, %13288
  %13290 = xor i64 %13289, -1
  %13291 = and i64 %13290, -1
  %13292 = xor i64 %13286, %13287
  %13293 = xor i64 %13292, %13282
  %13294 = xor i64 %13293, -1119552076333267326
  %13295 = xor i64 %13294, %13291
  %13296 = mul i64 %13281, %13295
  %13297 = trunc i64 %13296 to i32
  %13298 = srem i32 %.reload807, %13297
  %13299 = icmp eq i32 %13298, 0
  %.reload420 = load i8**, i8*** %.reg2mem419, align 8
  %.reload423 = load i8**, i8*** %.reg2mem422, align 8
  %13300 = select i1 %13299, i8** %.reload420, i8** %.reload423
  %13301 = load i8*, i8** %13300, align 8
  indirectbr i8* %13301, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"110":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload437 = load i8**, i8*** %.reg2mem435, align 8
  %13302 = load i8*, i8** %.reload437, align 8
  indirectbr i8* %13302, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"111":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13303 = sdiv i64 31, 31
  %13304 = mul i64 95, 98
  %13305 = add i64 -3612749597411197956, 3612749597411197902
  %13306 = sdiv i64 37, 15
  %13307 = sub i64 9, -69
  %.reload859 = load i32, i32* %.reg2mem858, align 4
  %13308 = srem i32 %.reload859, 2
  %13309 = icmp eq i32 %13308, 0
  %.reload828 = load i32, i32* %.reg2mem817, align 4
  %13310 = mul i32 %.reload828, 2
  %.reload827 = load i32, i32* %.reg2mem817, align 4
  %13311 = mul i32 %.reload827, 2
  %13312 = add i32 2, %13311
  %13313 = mul i32 %13310, %13312
  %13314 = srem i32 %13313, 4
  %13315 = or i64 %1232, -1835699691313640733
  %13316 = xor i64 %1232, -1
  %13317 = and i64 -1835699691313640733, %13316
  %13318 = add i64 %13317, %1232
  %13319 = and i64 %379, -7221644086501266663
  %13320 = xor i64 %379, -1
  %13321 = xor i64 -7221644086501266663, %13320
  %13322 = and i64 %13321, -7221644086501266663
  %13323 = and i64 %1543, 6987298289378848615
  %13324 = xor i64 %1543, -1
  %13325 = or i64 -6987298289378848616, %13324
  %13326 = xor i64 %13325, -1
  %13327 = and i64 %13326, -1
  %13328 = xor i64 %13315, -8111677537182477625
  %13329 = xor i64 %13328, %13322
  %13330 = xor i64 %13329, %13323
  %13331 = xor i64 %13330, %13319
  %13332 = xor i64 %13331, %13318
  %13333 = xor i64 %13332, %13327
  %13334 = add i64 %379, -8364289109007575475
  %13335 = add i64 -7992419101970215205, %379
  %13336 = add i64 %13335, -371870007037360270
  %13337 = add i64 %676, 7788594171557311055
  %13338 = and i64 7788594171557311055, %676
  %13339 = or i64 7788594171557311055, %676
  %13340 = add i64 %13338, %13339
  %13341 = and i64 %1286, -1496184039083230449
  %13342 = xor i64 %1286, -1
  %13343 = or i64 1496184039083230448, %13342
  %13344 = xor i64 %13343, -1
  %13345 = and i64 %13344, -1
  %13346 = xor i64 %13334, %13336
  %13347 = xor i64 %13346, %13345
  %13348 = xor i64 %13347, %13341
  %13349 = xor i64 %13348, %13337
  %13350 = xor i64 %13349, %13340
  %13351 = xor i64 %13350, 0
  %13352 = mul i64 %13333, %13351
  %13353 = trunc i64 %13352 to i32
  %13354 = icmp eq i32 %13314, %13353
  %.reload826 = load i32, i32* %.reg2mem817, align 4
  %13355 = mul i32 %.reload826, %.reload826
  %.reload825 = load i32, i32* %.reg2mem817, align 4
  %13356 = add i32 %13355, %.reload825
  %13357 = srem i32 %13356, 2
  %13358 = or i64 %448, -4193473380420656344
  %13359 = xor i64 %448, -1
  %13360 = and i64 %13359, 5973047631096926911
  %13361 = and i64 %448, -5973047631096926912
  %13362 = or i64 %13360, %13361
  %13363 = xor i64 -7554422232324427369, %13362
  %13364 = xor i64 %448, -1
  %13365 = or i64 4193473380420656343, %13364
  %13366 = xor i64 %13365, -1
  %13367 = and i64 %13366, -1
  %13368 = or i64 %13363, %13367
  %13369 = add i64 %768, 8045619754311213487
  %13370 = add i64 1230880357816154207, %768
  %13371 = sub i64 %13370, -6814739396495059280
  %13372 = xor i64 %13369, -4618130702684132067
  %13373 = xor i64 %13372, %13371
  %13374 = xor i64 %13373, %13358
  %13375 = xor i64 %13374, %13368
  %13376 = add i64 %1292, -2051437644020740075
  %13377 = add i64 -1851081632314277968, %1292
  %13378 = add i64 %13377, -200356011706462107
  %13379 = and i64 %656, -8178139328570339079
  %13380 = or i64 8178139328570339078, %656
  %13381 = sub i64 %13380, 8178139328570339078
  %13382 = and i64 %71, -8891760596495918171
  %13383 = or i64 8891760596495918170, %71
  %13384 = sub i64 %13383, 8891760596495918170
  %13385 = xor i64 %13376, 0
  %13386 = xor i64 %13385, %13379
  %13387 = xor i64 %13386, %13384
  %13388 = xor i64 %13387, %13382
  %13389 = xor i64 %13388, %13378
  %13390 = xor i64 %13389, %13381
  %13391 = mul i64 %13375, %13390
  %13392 = trunc i64 %13391 to i32
  %13393 = icmp eq i32 %13357, %13392
  %13394 = and i1 %13354, %13393
  store i1 %13394, i1* %.reg2mem861, align 1
  %.reload426 = load i8**, i8*** %.reg2mem425, align 8
  %.reload429 = load i8**, i8*** %.reg2mem428, align 8
  %.reload863 = load i1, i1* %.reg2mem861, align 1
  %13395 = select i1 %.reload863, i8** %.reload426, i8** %.reload429
  %13396 = load i8*, i8** %13395, align 8
  indirectbr i8* %13396, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"112":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13397 = mul i64 3, 58
  %.reload433 = load i8**, i8*** %.reg2mem431, align 8
  %13398 = load i8*, i8** %.reload433, align 8
  indirectbr i8* %13398, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"113":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13399 = mul i64 3, 58
  %.reload415 = load i8**, i8*** %.reg2mem414, align 8
  %.reload432 = load i8**, i8*** %.reg2mem431, align 8
  %.reload862 = load i1, i1* %.reg2mem861, align 1
  %13400 = select i1 %.reload862, i8** %.reload432, i8** %.reload415
  %13401 = load i8*, i8** %13400, align 8
  indirectbr i8* %13401, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"114":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload436 = load i8**, i8*** %.reg2mem435, align 8
  %13402 = load i8*, i8** %.reload436, align 8
  indirectbr i8* %13402, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"115":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload452 = load i8**, i8*** %.reg2mem449, align 8
  %13403 = load i8*, i8** %.reload452, align 8
  %.reload824 = load i32, i32* %.reg2mem817, align 4
  store i32 %.reload824, i32* %.reg2mem959, align 4
  store double 0.000000e+00, double* %.reg2mem961, align 8
  indirectbr i8* %13403, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"116":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload11.reload872 = load i32, i32* %.reload11.reg2mem, align 4
  %13404 = mul i32 %.reload11.reload872, 2
  %.reload11.reload873 = load i32, i32* %.reload11.reg2mem, align 4
  %13405 = mul i32 %.reload11.reload873, 2
  %13406 = add i32 2, %13405
  %13407 = mul i32 %13404, %13406
  %13408 = srem i32 %13407, 4
  %13409 = icmp eq i32 %13408, 0
  %.reload11.reload874 = load i32, i32* %.reload11.reg2mem, align 4
  %13410 = mul i32 %.reload11.reload874, %.reload11.reload874
  %.reload11.reload875 = load i32, i32* %.reload11.reg2mem, align 4
  %13411 = sub i32 0, %.reload11.reload875
  %13412 = sub i32 %13410, %13411
  %13413 = srem i32 %13412, 2
  %13414 = and i64 %444, -7048893580155880331
  %13415 = xor i64 %444, -1
  %13416 = or i64 7048893580155880330, %13415
  %13417 = xor i64 %13416, -1
  %13418 = and i64 %13417, -1
  %13419 = add i64 %450, -7687104685688545629
  %13420 = add i64 9080812005675769184, %450
  %13421 = sub i64 %13420, -1678827382345236803
  %13422 = add i64 %668, -7525966349486687100
  %13423 = add i64 -6864855962769954799, %668
  %13424 = add i64 %13423, -661110386716732301
  %13425 = xor i64 %13414, %13418
  %13426 = xor i64 %13425, 4673918922766225779
  %13427 = xor i64 %13426, %13422
  %13428 = xor i64 %13427, %13424
  %13429 = xor i64 %13428, %13421
  %13430 = xor i64 %13429, %13419
  %13431 = add i64 %1529, 5161554029612535133
  %13432 = sub i64 0, %1529
  %13433 = sub i64 5161554029612535133, %13432
  %13434 = add i64 %1139, -6903827906730851678
  %13435 = add i64 -4108968712670435506, %1139
  %13436 = sub i64 %13435, 2794859194060416172
  %13437 = add i64 %1535, 5760043657749315843
  %13438 = sub i64 0, %1535
  %13439 = add i64 -5760043657749315843, %13438
  %13440 = sub i64 0, %13439
  %13441 = xor i64 %13431, %13433
  %13442 = xor i64 %13441, %13434
  %13443 = xor i64 %13442, %13437
  %13444 = xor i64 %13443, 0
  %13445 = xor i64 %13444, %13436
  %13446 = xor i64 %13445, %13440
  %13447 = mul i64 %13430, %13446
  %13448 = trunc i64 %13447 to i32
  %13449 = icmp eq i32 %13413, %13448
  %13450 = xor i1 %13449, true
  %13451 = xor i1 %13409, %13450
  %13452 = and i1 %13451, %13409
  %.reload443 = load i8**, i8*** %.reg2mem442, align 8
  %.reload447 = load i8**, i8*** %.reg2mem445, align 8
  %13453 = select i1 %13452, i8** %.reload443, i8** %.reload447
  %13454 = load i8*, i8** %13453, align 8
  indirectbr i8* %13454, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"117":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13455 = or i64 %1515, 304655293574786051
  %13456 = xor i64 %1515, -1
  %13457 = and i64 %13456, 8271880984557810121
  %13458 = and i64 %1515, -8271880984557810122
  %13459 = or i64 %13457, %13458
  %13460 = xor i64 8570848778542112202, %13459
  %13461 = xor i64 %1515, -1
  %13462 = or i64 -304655293574786052, %13461
  %13463 = xor i64 %13462, -1
  %13464 = and i64 %13463, -1
  %13465 = or i64 %13460, %13464
  %13466 = or i64 %381, 482550524918917141
  %13467 = xor i64 %381, -1
  %13468 = and i64 482550524918917141, %13467
  %13469 = add i64 %13468, %381
  %13470 = xor i64 %13469, %13465
  %13471 = xor i64 %13470, %13455
  %13472 = xor i64 %13471, 4291561245920237709
  %13473 = xor i64 %13472, %13466
  %13474 = add i64 %1228, -8639647007202368890
  %13475 = xor i64 -8639647007202368890, %1228
  %13476 = and i64 -8639647007202368890, %1228
  %13477 = mul i64 2, %13476
  %13478 = add i64 %13475, %13477
  %13479 = or i64 %674, -955604154544647305
  %13480 = xor i64 %674, -1
  %13481 = and i64 -955604154544647305, %13480
  %13482 = add i64 %13481, %674
  %13483 = sext i32 %59 to i64
  %13484 = add i64 %13483, -1571568728261439472
  %13485 = add i64 6448316783327465536, %13483
  %13486 = sub i64 %13485, 8019885511588905008
  %13487 = xor i64 %13479, %13486
  %13488 = xor i64 %13487, %13474
  %13489 = xor i64 %13488, %13482
  %13490 = xor i64 %13489, %13478
  %13491 = xor i64 %13490, 3679072997613461766
  %13492 = xor i64 %13491, %13484
  %13493 = mul i64 %13473, %13492
  %13494 = trunc i64 %13493 to i32
  %13495 = sub i32 %13494, 70
  %13496 = mul i32 64, 108
  %13497 = mul i32 105, 36
  %13498 = add i32 102, 78
  %13499 = sdiv i32 116, 36
  %13500 = mul i32 5, 4
  %13501 = and i64 %1517, -6391581933907609691
  %13502 = or i64 6391581933907609690, %1517
  %13503 = sub i64 %13502, 6391581933907609690
  %13504 = or i64 %232, 5475921433253610946
  %13505 = and i64 5475921433253610946, %232
  %13506 = xor i64 5475921433253610946, %232
  %13507 = or i64 %13505, %13506
  %13508 = add i64 %605, -6294465931870006276
  %13509 = sub i64 0, %605
  %13510 = add i64 6294465931870006276, %13509
  %13511 = sub i64 0, %13510
  %13512 = xor i64 %13507, %13504
  %13513 = xor i64 %13512, %13511
  %13514 = xor i64 %13513, -5254689757023380555
  %13515 = xor i64 %13514, %13508
  %13516 = xor i64 %13515, %13503
  %13517 = xor i64 %13516, %13501
  %13518 = or i64 %990, -6458127266656484427
  %13519 = xor i64 %990, -1
  %13520 = and i64 -6458127266656484427, %13519
  %13521 = add i64 %13520, %990
  %13522 = and i64 %678, -6504886564973692060
  %13523 = or i64 6504886564973692059, %678
  %13524 = sub i64 %13523, 6504886564973692059
  %13525 = add i64 %994, 6504049379421550702
  %13526 = xor i64 6504049379421550702, %994
  %13527 = and i64 6504049379421550702, %994
  %13528 = mul i64 2, %13527
  %13529 = add i64 %13526, %13528
  %13530 = xor i64 %13522, %13518
  %13531 = xor i64 %13530, %13525
  %13532 = xor i64 %13531, %13524
  %13533 = xor i64 %13532, %13529
  %13534 = xor i64 %13533, %13521
  %13535 = xor i64 %13534, 4579466054590137371
  %13536 = mul i64 %13517, %13535
  %13537 = trunc i64 %13536 to i32
  %13538 = mul i32 37, %13537
  %.reload446 = load i8**, i8*** %.reg2mem445, align 8
  %13539 = load i8*, i8** %.reload446, align 8
  indirectbr i8* %13539, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"118":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload716 = load i64*, i64** %.reg2mem696, align 8
  %13540 = and i64 %11, 3324315895555282341
  %13541 = xor i64 %11, -1
  %13542 = xor i64 3324315895555282341, %13541
  %13543 = and i64 %13542, 3324315895555282341
  %13544 = and i64 %232, -769018789960476374
  %13545 = xor i64 %232, -1
  %13546 = or i64 769018789960476373, %13545
  %13547 = xor i64 %13546, -1
  %13548 = and i64 %13547, -1
  %13549 = xor i64 %13548, %13540
  %13550 = xor i64 %13549, %13543
  %13551 = xor i64 %13550, %13544
  %13552 = xor i64 %13551, 7575878545439800277
  %13553 = or i64 %1286, -347554370902198959
  %13554 = and i64 -347554370902198959, %1286
  %13555 = xor i64 -347554370902198959, %1286
  %13556 = or i64 %13554, %13555
  %13557 = or i64 %1659, 8343619346387556641
  %13558 = and i64 8343619346387556641, %1659
  %13559 = xor i64 8343619346387556641, %1659
  %13560 = or i64 %13558, %13559
  %13561 = xor i64 %13560, %13556
  %13562 = xor i64 %13561, 3931336881820905127
  %13563 = xor i64 %13562, %13557
  %13564 = xor i64 %13563, %13553
  %13565 = mul i64 %13552, %13564
  store i64 %13565, i64* %.reload716, align 8
  %.reload715 = load i64*, i64** %.reg2mem696, align 8
  %13566 = call i8** @lk14802275186744156584(i64* %.reload715)
  %13567 = load i8*, i8** %13566, align 8
  %13568 = bitcast i8* %13567 to i32 (float, float*, float*, i8*, float*)*
  %.reload9.reload = load float, float* %.reload9.reg2mem, align 4
  %13569 = call i32 %13568(float %.reload9.reload, float* %82, float* %83, i8* %84, float* %85)
  %13570 = icmp eq i32 %13569, 0
  %.reload451 = load i8**, i8*** %.reg2mem449, align 8
  %.reload489 = load i8**, i8*** %.reg2mem486, align 8
  %13571 = select i1 %13570, i8** %.reload451, i8** %.reload489
  %13572 = load i8*, i8** %13571, align 8
  %.reload10.reload869 = load double, double* %.reload10.reg2mem, align 8
  store i32 %13569, i32* %.reg2mem959, align 4
  store double %.reload10.reload869, double* %.reg2mem961, align 8
  store i32 %13569, i32* %.ph.reg2mem965, align 4
  indirectbr i8* %13572, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"119":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload962 = load double, double* %.reg2mem961, align 8
  %.reload960 = load i32, i32* %.reg2mem959, align 4
  store double %.reload962, double* %.reg2mem866, align 8
  store i32 %.reload960, i32* %.reg2mem864, align 4
  %.reload455 = load i8**, i8*** %.reg2mem454, align 8
  %13573 = load i8*, i8** %.reload455, align 8
  indirectbr i8* %13573, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl2:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc3.reload802 = load float*, float** %.loc3.reg2mem, align 8
  %lt.cast14 = bitcast float* %.loc3.reload802 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast14)
  %.loc4.reload800 = load double*, double** %.loc4.reg2mem, align 8
  %lt.cast15 = bitcast double* %.loc4.reload800 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast15)
  %.loc5.reload798 = load i32*, i32** %.loc5.reg2mem, align 8
  %lt.cast16 = bitcast i32* %.loc5.reload798 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast16)
  %.loc6.reload796 = load i32*, i32** %.loc6.reg2mem, align 8
  %lt.cast17 = bitcast i32* %.loc6.reload796 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast17)
  %.loc7.reload794 = load i32*, i32** %.loc7.reg2mem, align 8
  %lt.cast18 = bitcast i32* %.loc7.reload794 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast18)
  %.reload714 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537074, i64* %.reload714, align 8
  %.reload713 = load i64*, i64** %.reg2mem696, align 8
  %13574 = call i8** @lk14802275186744156584(i64* %.reload713)
  %13575 = load i8*, i8** %13574, align 8
  %13576 = bitcast i8* %13575 to i1 (double, i32, float*, double*, i32*, i32*, i32*)*
  %.loc7.reload793 = load i32*, i32** %.loc7.reg2mem, align 8
  %.loc6.reload795 = load i32*, i32** %.loc6.reg2mem, align 8
  %.loc5.reload797 = load i32*, i32** %.loc5.reg2mem, align 8
  %.loc4.reload799 = load double*, double** %.loc4.reg2mem, align 8
  %.loc3.reload801 = load float*, float** %.loc3.reg2mem, align 8
  %.reload823 = load i32, i32* %.reg2mem817, align 4
  %.reload867 = load double, double* %.reg2mem866, align 8
  %targetBlock8 = call i1 %13576(double %.reload867, i32 %.reload823, float* %.loc3.reload801, double* %.loc4.reload799, i32* %.loc5.reload797, i32* %.loc6.reload795, i32* %.loc7.reload793)
  %.loc3.reload = load float*, float** %.loc3.reg2mem, align 8
  %.reload9 = load float, float* %.loc3.reload, align 4
  store float %.reload9, float* %.reload9.reg2mem, align 4
  %.loc4.reload = load double*, double** %.loc4.reg2mem, align 8
  %.reload10 = load double, double* %.loc4.reload, align 8
  store double %.reload10, double* %.reload10.reg2mem, align 8
  %.loc5.reload = load i32*, i32** %.loc5.reg2mem, align 8
  %.reload11 = load i32, i32* %.loc5.reload, align 4
  store i32 %.reload11, i32* %.reload11.reg2mem, align 4
  %.loc6.reload = load i32*, i32** %.loc6.reg2mem, align 8
  %.reload12 = load i32, i32* %.loc6.reload, align 4
  store i32 %.reload12, i32* %.reload12.reg2mem, align 4
  %.loc7.reload = load i32*, i32** %.loc7.reg2mem, align 8
  %.reload13 = load i32, i32* %.loc7.reload, align 4
  store i32 %.reload13, i32* %.reload13.reg2mem, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast14)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast15)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast16)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast17)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast18)
  %.reload459 = load i8**, i8*** %.reg2mem457, align 8
  %.reload464 = load i8**, i8*** %.reg2mem462, align 8
  %13577 = select i1 %targetBlock8, i8** %.reload464, i8** %.reload459
  %13578 = load i8*, i8** %13577, align 8
  indirectbr i8* %13578, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"121":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13579 = add i32 34, 113
  %13580 = sdiv i32 81, 67
  %13581 = add i64 %561, 6747627369036207568
  %13582 = add i64 -7657293178312907654, %561
  %13583 = add i64 %13582, -4041823526360436394
  %13584 = or i64 %387, 3056478804045822858
  %13585 = xor i64 %387, -1
  %13586 = and i64 3056478804045822858, %13585
  %13587 = add i64 %13586, %387
  %13588 = add i64 %389, -5364659744150404845
  %13589 = sub i64 0, %389
  %13590 = add i64 5364659744150404845, %13589
  %13591 = sub i64 0, %13590
  %13592 = xor i64 %13583, %13587
  %13593 = xor i64 %13592, %13591
  %13594 = xor i64 %13593, %13584
  %13595 = xor i64 %13594, 6990572527978046939
  %13596 = xor i64 %13595, %13581
  %13597 = xor i64 %13596, %13588
  %13598 = or i64 %676, 2183900758856391734
  %13599 = xor i64 %676, -1
  %13600 = and i64 %13599, -6488614476607745450
  %13601 = and i64 %676, 6488614476607745449
  %13602 = or i64 %13600, %13601
  %13603 = xor i64 -4918764593863340448, %13602
  %13604 = xor i64 %676, -1
  %13605 = or i64 -2183900758856391735, %13604
  %13606 = xor i64 %13605, -1
  %13607 = and i64 %13606, -1
  %13608 = or i64 %13603, %13607
  %13609 = add i64 %1452, -7866085699851297732
  %13610 = xor i64 -7866085699851297732, %1452
  %13611 = and i64 -7866085699851297732, %1452
  %13612 = mul i64 2, %13611
  %13613 = add i64 %13610, %13612
  %13614 = add i64 %446, 1640800978636482138
  %13615 = sub i64 0, %446
  %13616 = add i64 -1640800978636482138, %13615
  %13617 = sub i64 0, %13616
  %13618 = xor i64 %13598, %13609
  %13619 = xor i64 %13618, %13617
  %13620 = xor i64 %13619, %13608
  %13621 = xor i64 %13620, -83771983172251913
  %13622 = xor i64 %13621, %13613
  %13623 = xor i64 %13622, %13614
  %13624 = mul i64 %13597, %13623
  %13625 = trunc i64 %13624 to i32
  %13626 = sdiv i32 37, %13625
  %13627 = add i32 104, 20
  %13628 = sub i32 106, 43
  %13629 = add i32 -1965412981, 1965413066
  %13630 = sdiv i32 75, 99
  %13631 = sub i32 60, 94
  %13632 = sdiv i32 53, 50
  %13633 = sub i32 97, -47
  %13634 = mul i32 %13627, 33
  %13635 = sdiv i32 %13631, 118
  %13636 = sdiv i32 %13629, 103
  %13637 = add i64 %450, -4333409937238565926
  %13638 = sub i64 0, %450
  %13639 = add i64 4333409937238565926, %13638
  %13640 = sub i64 0, %13639
  %13641 = add i64 %1185, 6507304840942319913
  %13642 = sub i64 0, %1185
  %13643 = add i64 -6507304840942319913, %13642
  %13644 = sub i64 0, %13643
  %13645 = xor i64 %13641, %13644
  %13646 = xor i64 %13645, 5907223274018681121
  %13647 = xor i64 %13646, %13640
  %13648 = xor i64 %13647, %13637
  %13649 = and i64 %1497, 4547330198929399813
  %13650 = xor i64 %1497, -1
  %13651 = or i64 -4547330198929399814, %13650
  %13652 = xor i64 %13651, -1
  %13653 = and i64 %13652, -1
  %13654 = add i64 %912, -3665516000573368432
  %13655 = add i64 8151010595046754168, %912
  %13656 = sub i64 %13655, -6630217478089429016
  %13657 = xor i64 %13653, %13656
  %13658 = xor i64 %13657, 1570397447920481064
  %13659 = xor i64 %13658, %13649
  %13660 = xor i64 %13659, %13654
  %13661 = mul i64 %13648, %13660
  %13662 = trunc i64 %13661 to i32
  %13663 = sdiv i32 %13632, %13662
  %13664 = sub i32 %13631, 51
  %13665 = mul i32 %13580, 103
  %13666 = xor i32 %13580, 52
  %13667 = and i32 %13580, 52
  %13668 = mul i32 2, %13667
  %13669 = add i32 %13666, %13668
  %13670 = add i32 0, %13634
  %13671 = sub i32 0, %13635
  %13672 = sub i32 %13670, %13671
  %13673 = add i32 %13672, %13636
  %13674 = add i32 %13673, %13663
  %13675 = add i32 %13674, %13664
  %13676 = and i32 %13675, %13665
  %13677 = or i32 %13675, %13665
  %13678 = add i32 %13676, %13677
  %13679 = sub i32 0, %13669
  %13680 = sub i32 %13678, %13679
  %13681 = xor i32 %13680, -1
  %13682 = or i32 %13681, -2
  %13683 = xor i32 %13682, -1
  %13684 = and i32 %13683, -1
  %13685 = icmp eq i32 %13684, 0
  %13686 = mul i32 %13680, %13680
  %13687 = add i32 %13686, %13680
  %13688 = mul i32 %13687, 3
  %13689 = srem i32 %13688, 2
  %13690 = icmp eq i32 %13689, 0
  %13691 = or i1 %13685, %13690
  %.reload450 = load i8**, i8*** %.reg2mem449, align 8
  %.reload458 = load i8**, i8*** %.reg2mem457, align 8
  %13692 = select i1 %13691, i8** %.reload450, i8** %.reload458
  %13693 = load i8*, i8** %13692, align 8
  store i32 0, i32* %.reg2mem959, align 4
  store double 0.000000e+00, double* %.reg2mem961, align 8
  indirectbr i8* %13693, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"122":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload12.reload = load i32, i32* %.reload12.reg2mem, align 4
  %13694 = srem i32 %.reload12.reload, 2
  %13695 = icmp eq i32 %13694, 0
  %.reload467 = load i8**, i8*** %.reg2mem466, align 8
  %.reload470 = load i8**, i8*** %.reg2mem469, align 8
  %13696 = select i1 %13695, i8** %.reload467, i8** %.reload470
  %13697 = load i8*, i8** %13696, align 8
  indirectbr i8* %13697, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"123":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload10.reload868 = load double, double* %.reload10.reg2mem, align 8
  %13698 = fcmp olt double %.reload10.reload868, 6.280000e+00
  %.reload484 = load i8**, i8*** %.reg2mem482, align 8
  %13699 = load i8*, i8** %.reload484, align 8
  store i1 %13698, i1* %.reg2mem963, align 1
  indirectbr i8* %13699, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"124":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13700 = mul i64 9, 124
  %.reload10.reload = load double, double* %.reload10.reg2mem, align 8
  %13701 = fcmp olt double %.reload10.reload, 6.280000e+00
  store i1 %13701, i1* %.reg2mem880, align 1
  %13702 = mul i64 97, 110
  %13703 = sdiv i64 43, 27
  %13704 = sdiv i64 87, 45
  %13705 = mul i64 43, 62
  %13706 = and i64 %772, -2841475866808969676
  %13707 = or i64 2841475866808969675, %772
  %13708 = sub i64 %13707, 2841475866808969675
  %13709 = add i64 %224, 7935393393160788753
  %13710 = sub i64 0, %224
  %13711 = sub i64 7935393393160788753, %13710
  %13712 = xor i64 -7124277139455582153, %13711
  %13713 = xor i64 %13712, %13709
  %13714 = xor i64 %13713, %13708
  %13715 = xor i64 %13714, %13706
  %13716 = add i64 %676, 6638550092946932355
  %13717 = xor i64 6638550092946932355, %676
  %13718 = and i64 6638550092946932355, %676
  %13719 = mul i64 2, %13718
  %13720 = add i64 %13717, %13719
  %13721 = and i64 %1649, -473896214903036839
  %13722 = xor i64 %1649, -1
  %13723 = xor i64 -473896214903036839, %13722
  %13724 = and i64 %13723, -473896214903036839
  %13725 = xor i64 %13721, 8874653472743492218
  %13726 = xor i64 %13725, %13720
  %13727 = xor i64 %13726, %13716
  %13728 = xor i64 %13727, %13724
  %13729 = mul i64 %13715, %13728
  %13730 = sdiv i64 66, %13729
  %13731 = add i64 32, 76
  %.reload844 = load i32, i32* %.reg2mem843, align 4
  %13732 = add i64 %1527, -3469292468820160219
  %13733 = add i64 5108236477715705498, %1527
  %13734 = sub i64 %13733, 8577528946535865717
  %13735 = and i64 %727, 4747751668194879442
  %13736 = or i64 -4747751668194879443, %727
  %13737 = sub i64 %13736, -4747751668194879443
  %13738 = add i64 %1131, 993744927861047430
  %13739 = sub i64 0, %1131
  %13740 = add i64 -993744927861047430, %13739
  %13741 = sub i64 0, %13740
  %13742 = xor i64 %13732, %13734
  %13743 = xor i64 %13742, %13741
  %13744 = xor i64 %13743, %13738
  %13745 = xor i64 %13744, 22952127141075399
  %13746 = xor i64 %13745, %13737
  %13747 = xor i64 %13746, %13735
  %13748 = or i64 %177, -8932617333022523009
  %13749 = and i64 -8932617333022523009, %177
  %13750 = xor i64 -8932617333022523009, %177
  %13751 = or i64 %13749, %13750
  %13752 = and i64 %1543, -6380770275609941585
  %13753 = xor i64 %1543, -1
  %13754 = or i64 6380770275609941584, %13753
  %13755 = xor i64 %13754, -1
  %13756 = and i64 %13755, -1
  %13757 = xor i64 %13752, %13751
  %13758 = xor i64 %13757, %13748
  %13759 = xor i64 %13758, %13756
  %13760 = xor i64 %13759, 7353347746431840238
  %13761 = mul i64 %13747, %13760
  %13762 = trunc i64 %13761 to i32
  %13763 = srem i32 %.reload844, %13762
  %13764 = icmp eq i32 %13763, 0
  %.reload13.reload879 = load i32, i32* %.reload13.reg2mem, align 4
  %13765 = or i64 %1396, -782641793538323529
  %13766 = xor i64 %1396, -1
  %13767 = and i64 %13766, -6957219734061715807
  %13768 = and i64 %1396, 6957219734061715806
  %13769 = or i64 %13767, %13768
  %13770 = xor i64 7661048392116593942, %13769
  %13771 = xor i64 %1396, -1
  %13772 = or i64 782641793538323528, %13771
  %13773 = xor i64 %13772, -1
  %13774 = and i64 %13773, -1
  %13775 = or i64 %13770, %13774
  %13776 = or i64 %1230, -3296673937588455947
  %13777 = and i64 -3296673937588455947, %1230
  %13778 = xor i64 -3296673937588455947, %1230
  %13779 = or i64 %13777, %13778
  %13780 = or i64 %379, 4983835011452286981
  %13781 = and i64 4983835011452286981, %379
  %13782 = xor i64 4983835011452286981, %379
  %13783 = or i64 %13781, %13782
  %13784 = xor i64 %13779, -1435601047279673583
  %13785 = xor i64 %13784, %13776
  %13786 = xor i64 %13785, %13780
  %13787 = xor i64 %13786, %13765
  %13788 = xor i64 %13787, %13775
  %13789 = xor i64 %13788, %13783
  %13790 = add i64 %494, -6124337887305340834
  %13791 = add i64 -333270692950369943, %494
  %13792 = add i64 %13791, -5791067194354970891
  %13793 = or i64 %662, -5928384541516360921
  %13794 = xor i64 %662, -1
  %13795 = and i64 %13794, 8057213455193883156
  %13796 = and i64 %662, -8057213455193883157
  %13797 = or i64 %13795, %13796
  %13798 = xor i64 -4437491106160815821, %13797
  %13799 = xor i64 %662, -1
  %13800 = or i64 5928384541516360920, %13799
  %13801 = xor i64 %13800, -1
  %13802 = and i64 %13801, -1
  %13803 = or i64 %13798, %13802
  %13804 = or i64 %916, 8754286129296424259
  %13805 = and i64 8754286129296424259, %916
  %13806 = xor i64 8754286129296424259, %916
  %13807 = or i64 %13805, %13806
  %13808 = xor i64 %13790, %13803
  %13809 = xor i64 %13808, %13804
  %13810 = xor i64 %13809, -7663399447871429662
  %13811 = xor i64 %13810, %13807
  %13812 = xor i64 %13811, %13792
  %13813 = xor i64 %13812, %13793
  %13814 = mul i64 %13789, %13813
  %13815 = trunc i64 %13814 to i32
  %13816 = mul i32 %.reload13.reload879, %13815
  %.reload13.reload878 = load i32, i32* %.reload13.reg2mem, align 4
  %13817 = mul i32 %.reload13.reload878, 2
  %13818 = add i32 -183686277, %13817
  %13819 = sub i32 %13818, -183686279
  %13820 = mul i32 %13816, %13819
  %13821 = srem i32 %13820, 4
  %13822 = icmp eq i32 %13821, 0
  %.reload13.reload877 = load i32, i32* %.reload13.reg2mem, align 4
  %13823 = mul i32 %.reload13.reload877, %.reload13.reload877
  %.reload13.reload876 = load i32, i32* %.reload13.reg2mem, align 4
  %13824 = and i64 %563, -5125240199732567599
  %13825 = xor i64 %563, -1
  %13826 = xor i64 -5125240199732567599, %13825
  %13827 = and i64 %13826, -5125240199732567599
  %13828 = and i64 %282, 1057043452366280500
  %13829 = or i64 -1057043452366280501, %282
  %13830 = sub i64 %13829, -1057043452366280501
  %13831 = xor i64 %13828, %13830
  %13832 = xor i64 %13831, %13827
  %13833 = xor i64 %13832, %13824
  %13834 = xor i64 %13833, -6122824274090726639
  %13835 = or i64 %682, 4375124579089677234
  %13836 = xor i64 %682, -1
  %13837 = and i64 4375124579089677234, %13836
  %13838 = add i64 %13837, %682
  %13839 = add i64 %96, -3863117356277108462
  %13840 = xor i64 -3863117356277108462, %96
  %13841 = and i64 -3863117356277108462, %96
  %13842 = mul i64 2, %13841
  %13843 = add i64 %13840, %13842
  %13844 = or i64 %77, 9169822176573107315
  %13845 = and i64 9169822176573107315, %77
  %13846 = xor i64 9169822176573107315, %77
  %13847 = or i64 %13845, %13846
  %13848 = xor i64 %13839, %13844
  %13849 = xor i64 %13848, %13835
  %13850 = xor i64 %13849, 0
  %13851 = xor i64 %13850, %13847
  %13852 = xor i64 %13851, %13838
  %13853 = xor i64 %13852, %13843
  %13854 = mul i64 %13834, %13853
  %13855 = trunc i64 %13854 to i32
  %13856 = sub i32 %13855, %13823
  %13857 = sub i32 0, %.reload13.reload876
  %13858 = add i32 %13856, %13857
  %13859 = sub i32 0, %13858
  %13860 = srem i32 %13859, 2
  %13861 = icmp eq i32 %13860, 0
  %13862 = and i1 %13822, %13861
  store i1 %13862, i1* %.reg2mem882, align 1
  %.reload473 = load i8**, i8*** %.reg2mem472, align 8
  %.reload476 = load i8**, i8*** %.reg2mem475, align 8
  %.reload884 = load i1, i1* %.reg2mem882, align 1
  %13863 = select i1 %.reload884, i8** %.reload476, i8** %.reload473
  %13864 = load i8*, i8** %13863, align 8
  indirectbr i8* %13864, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"125":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload463 = load i8**, i8*** %.reg2mem462, align 8
  %.reload480 = load i8**, i8*** %.reg2mem478, align 8
  %.reload883 = load i1, i1* %.reg2mem882, align 1
  %13865 = select i1 %.reload883, i8** %.reload480, i8** %.reload463
  %13866 = load i8*, i8** %13865, align 8
  indirectbr i8* %13866, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"126":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload479 = load i8**, i8*** %.reg2mem478, align 8
  %13867 = load i8*, i8** %.reload479, align 8
  indirectbr i8* %13867, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"127":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload483 = load i8**, i8*** %.reg2mem482, align 8
  %13868 = load i8*, i8** %.reload483, align 8
  %.reload881 = load i1, i1* %.reg2mem880, align 1
  store i1 %.reload881, i1* %.reg2mem963, align 1
  indirectbr i8* %13868, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"128":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload964 = load i1, i1* %.reg2mem963, align 1
  store i1 %.reload964, i1* %.reg2mem885, align 1
  %.reload440 = load i8**, i8*** %.reg2mem439, align 8
  %.reload488 = load i8**, i8*** %.reg2mem486, align 8
  %.reload886 = load i1, i1* %.reg2mem885, align 1
  %13869 = select i1 %.reload886, i8** %.reload440, i8** %.reload488
  %13870 = load i8*, i8** %13869, align 8
  %.reload865 = load i32, i32* %.reg2mem864, align 4
  store i32 %.reload865, i32* %.ph.reg2mem965, align 4
  indirectbr i8* %13870, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.loopexit:                                        ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.ph.reload966 = load i32, i32* %.ph.reg2mem965, align 4
  store i32 %.ph.reload966, i32* %.ph.reg2mem, align 4
  %.reload852 = load i32, i32* %.reg2mem846, align 4
  %13871 = mul i32 %.reload852, 2
  %.reload851 = load i32, i32* %.reg2mem846, align 4
  %13872 = mul i32 %.reload851, 2
  %13873 = add i32 2, %13872
  %13874 = mul i32 %13871, %13873
  %13875 = srem i32 %13874, 4
  %13876 = icmp eq i32 %13875, 0
  store i1 %13876, i1* %.reg2mem889, align 1
  %.reload856 = load i32, i32* %.reg2mem855, align 4
  %13877 = srem i32 %.reload856, 2
  %13878 = icmp eq i32 %13877, 0
  %.reload492 = load i8**, i8*** %.reg2mem491, align 8
  %.reload508 = load i8**, i8*** %.reg2mem507, align 8
  %13879 = select i1 %13878, i8** %.reload492, i8** %.reload508
  %13880 = load i8*, i8** %13879, align 8
  indirectbr i8* %13880, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"130":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %13881 = sub i64 0, -121
  %.reload850 = load i32, i32* %.reg2mem846, align 4
  %13882 = mul i32 %.reload850, %.reload850
  store i32 %13882, i32* %.reg2mem893, align 4
  %13883 = add i64 38, 103
  %.reload849 = load i32, i32* %.reg2mem846, align 4
  %.reload895 = load i32, i32* %.reg2mem893, align 4
  %13884 = mul i32 %.reload895, %.reload849
  store i32 %13884, i32* %.reg2mem896, align 4
  %13885 = sdiv i64 89, 27
  %.reload848 = load i32, i32* %.reg2mem846, align 4
  %.reload898 = load i32, i32* %.reg2mem896, align 4
  %13886 = sub i32 %.reload898, -1640784434
  %13887 = add i32 %13886, %.reload848
  %13888 = add i32 %13887, -1640784434
  store i32 %13888, i32* %.reg2mem899, align 4
  %13889 = add i64 %1501, 8087002373096911838
  %13890 = sub i64 0, %1501
  %13891 = sub i64 8087002373096911838, %13890
  %13892 = or i64 %990, 8050774279368920771
  %13893 = xor i64 %990, -1
  %13894 = and i64 8050774279368920771, %13893
  %13895 = add i64 %13894, %990
  %13896 = and i64 %494, -5122071972981452236
  %13897 = or i64 5122071972981452235, %494
  %13898 = sub i64 %13897, 5122071972981452235
  %13899 = xor i64 116727262061218493, %13896
  %13900 = xor i64 %13899, %13892
  %13901 = xor i64 %13900, %13895
  %13902 = xor i64 %13901, %13889
  %13903 = xor i64 %13902, %13898
  %13904 = xor i64 %13903, %13891
  %13905 = add i64 %286, -1895854523941891238
  %13906 = and i64 -1895854523941891238, %286
  %13907 = or i64 -1895854523941891238, %286
  %13908 = add i64 %13906, %13907
  %13909 = or i64 %387, 2038398186511584969
  %13910 = and i64 2038398186511584969, %387
  %13911 = xor i64 2038398186511584969, %387
  %13912 = or i64 %13910, %13911
  %13913 = xor i64 %13909, %13905
  %13914 = xor i64 %13913, %13908
  %13915 = xor i64 %13914, 1698216180289978374
  %13916 = xor i64 %13915, %13912
  %13917 = mul i64 %13904, %13916
  %13918 = add i64 34, %13917
  %.ph.reload888 = load i32, i32* %.ph.reg2mem, align 4
  %13919 = and i64 %990, 3493482052408646232
  %13920 = or i64 -3493482052408646233, %990
  %13921 = sub i64 %13920, -3493482052408646233
  %13922 = add i64 %1143, 4494365642404572159
  %13923 = add i64 8454271203460387619, %1143
  %13924 = add i64 %13923, -3959905561055815460
  %13925 = xor i64 %13922, %13921
  %13926 = xor i64 %13925, -8574515631044548195
  %13927 = xor i64 %13926, %13919
  %13928 = xor i64 %13927, %13924
  %13929 = or i64 %555, 2847923760767202272
  %13930 = xor i64 %555, -1
  %13931 = and i64 %13930, -5170051504091930951
  %13932 = and i64 %555, 5170051504091930950
  %13933 = or i64 %13931, %13932
  %13934 = xor i64 -6933975389965636263, %13933
  %13935 = xor i64 %555, -1
  %13936 = or i64 -2847923760767202273, %13935
  %13937 = xor i64 %13936, -1
  %13938 = and i64 %13937, -1
  %13939 = or i64 %13934, %13938
  %13940 = add i64 %1497, -3334322475816834956
  %13941 = add i64 -7598443868112820245, %1497
  %13942 = sub i64 %13941, -4264121392295985289
  %13943 = and i64 %561, -6996093838079499561
  %13944 = or i64 6996093838079499560, %561
  %13945 = sub i64 %13944, 6996093838079499560
  %13946 = xor i64 %13942, %13943
  %13947 = xor i64 %13946, %13940
  %13948 = xor i64 %13947, %13929
  %13949 = xor i64 %13948, %13939
  %13950 = xor i64 %13949, %13945
  %13951 = xor i64 %13950, 4455329922432977258
  %13952 = mul i64 %13928, %13951
  %13953 = trunc i64 %13952 to i32
  %13954 = srem i32 %.ph.reload888, %13953
  %13955 = icmp eq i32 %13954, 0
  %.reload11.reload871 = load i32, i32* %.reload11.reg2mem, align 4
  %13956 = xor i32 %.reload11.reload871, -1
  %13957 = or i32 %13956, -2
  %13958 = xor i32 %13957, -1
  %13959 = and i32 %13958, -1
  %13960 = add i64 %96, -6514006985477031002
  %13961 = add i64 -4705436772479066410, %96
  %13962 = add i64 %13961, -1808570212997964592
  %13963 = and i64 %1236, 4865759144740315230
  %13964 = or i64 -4865759144740315231, %1236
  %13965 = sub i64 %13964, -4865759144740315231
  %13966 = xor i64 %13963, %13960
  %13967 = xor i64 %13966, %13965
  %13968 = xor i64 %13967, %13962
  %13969 = xor i64 %13968, -5004589299576128727
  %13970 = or i64 %996, 8146756261867223603
  %13971 = xor i64 %996, -1
  %13972 = and i64 8146756261867223603, %13971
  %13973 = add i64 %13972, %996
  %13974 = add i64 %1537, -1296548696447073832
  %13975 = add i64 8854963465489808126, %1537
  %13976 = add i64 %13975, 8295231911772669658
  %13977 = xor i64 %13976, %13970
  %13978 = xor i64 %13977, %13974
  %13979 = xor i64 %13978, 0
  %13980 = xor i64 %13979, %13973
  %13981 = mul i64 %13969, %13980
  %13982 = trunc i64 %13981 to i32
  %13983 = icmp eq i32 %13959, %13982
  %.reload11.reload870 = load i32, i32* %.reload11.reg2mem, align 4
  %13984 = mul i32 %.reload11.reload870, %.reload11.reload870
  %.reload11.reload = load i32, i32* %.reload11.reg2mem, align 4
  %13985 = add i32 %13984, %.reload11.reload
  %13986 = mul i32 %13985, 3
  %13987 = srem i32 %13986, 2
  %13988 = icmp eq i32 %13987, 0
  %13989 = or i1 %13983, %13988
  store i1 %13989, i1* %.reg2mem903, align 1
  %.reload495 = load i8**, i8*** %.reg2mem494, align 8
  %.reload498 = load i8**, i8*** %.reg2mem497, align 8
  %.reload904 = load i1, i1* %.reg2mem903, align 1
  %13990 = select i1 %.reload904, i8** %.reload495, i8** %.reload498
  %13991 = load i8*, i8** %13990, align 8
  indirectbr i8* %13991, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"131":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload902 = load i32, i32* %.reg2mem899, align 4
  %13992 = srem i32 %.reload902, 2
  %13993 = sub i64 1583108973221310737, 1583108973221310694
  %13994 = icmp eq i32 %13992, 0
  %13995 = and i64 %1529, -8845519652564564098
  %13996 = or i64 8845519652564564097, %1529
  %13997 = sub i64 %13996, 8845519652564564097
  %13998 = add i64 %868, 7259856136296588949
  %13999 = add i64 3147462107497452818, %868
  %14000 = add i64 %13999, 4112394028799136131
  %14001 = xor i64 %14000, -2458969866859271661
  %14002 = xor i64 %14001, %13997
  %14003 = xor i64 %14002, %13998
  %14004 = xor i64 %14003, %13995
  %14005 = and i64 %658, 3340839540209800560
  %14006 = or i64 -3340839540209800561, %658
  %14007 = sub i64 %14006, -3340839540209800561
  %14008 = add i64 %1185, 7462852644811826376
  %14009 = sub i64 0, %1185
  %14010 = add i64 -7462852644811826376, %14009
  %14011 = sub i64 0, %14010
  %14012 = xor i64 %14008, %14005
  %14013 = xor i64 %14012, %14011
  %14014 = xor i64 %14013, 4812597340723475647
  %14015 = xor i64 %14014, %14007
  %14016 = mul i64 %14004, %14015
  %14017 = mul i64 %14016, 64
  %.reload892 = load i1, i1* %.reg2mem889, align 1
  %14018 = xor i1 %.reload892, false
  %14019 = xor i1 %14018, true
  %14020 = xor i1 %13994, true
  %14021 = or i1 %14019, %14020
  %14022 = xor i1 %14021, true
  %14023 = xor i1 %14022, false
  %14024 = and i1 %14023, %14022
  %.reload502 = load i8**, i8*** %.reg2mem500, align 8
  %14025 = load i8*, i8** %.reload502, align 8
  store i32 %13992, i32* %.reg2mem967, align 4
  store i1 %13994, i1* %.reg2mem969, align 1
  store i1 %14019, i1* %.reg2mem971, align 1
  store i1 %14020, i1* %.reg2mem973, align 1
  store i1 %14021, i1* %.reg2mem975, align 1
  store i1 %14022, i1* %.reg2mem977, align 1
  store i1 %14024, i1* %.reg2mem979, align 1
  indirectbr i8* %14025, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl1929:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc20.reload792 = load i32*, i32** %.loc20.reg2mem, align 8
  %lt.cast39 = bitcast i32* %.loc20.reload792 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast39)
  %.loc21.reload790 = load i64*, i64** %.loc21.reg2mem, align 8
  %lt.cast40 = bitcast i64* %.loc21.reload790 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast40)
  %.loc22.reload788 = load i1*, i1** %.loc22.reg2mem, align 8
  %lt.cast41 = bitcast i1* %.loc22.reload788 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast41)
  %.loc23.reload786 = load i64*, i64** %.loc23.reg2mem, align 8
  %lt.cast42 = bitcast i64* %.loc23.reload786 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast42)
  %.loc24.reload784 = load i1*, i1** %.loc24.reg2mem, align 8
  %lt.cast43 = bitcast i1* %.loc24.reload784 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast43)
  %.loc25.reload782 = load i1*, i1** %.loc25.reg2mem, align 8
  %lt.cast44 = bitcast i1* %.loc25.reload782 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast44)
  %.loc26.reload780 = load i1*, i1** %.loc26.reg2mem, align 8
  %lt.cast45 = bitcast i1* %.loc26.reload780 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast45)
  %.loc27.reload778 = load i1*, i1** %.loc27.reg2mem, align 8
  %lt.cast46 = bitcast i1* %.loc27.reload778 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast46)
  %.loc28.reload776 = load i1*, i1** %.loc28.reg2mem, align 8
  %lt.cast47 = bitcast i1* %.loc28.reload776 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast47)
  %.reload712 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537084, i64* %.reload712, align 8
  %.reload711 = load i64*, i64** %.reg2mem696, align 8
  %14026 = call i8** @lk14802275186744156584(i64* %.reload711)
  %14027 = load i8*, i8** %14026, align 8
  %14028 = bitcast i8* %14027 to i1 (i32, i1, i1, i32*, i64*, i1*, i64*, i1*, i1*, i1*, i1*, i1*)*
  %.loc28.reload775 = load i1*, i1** %.loc28.reg2mem, align 8
  %.loc27.reload777 = load i1*, i1** %.loc27.reg2mem, align 8
  %.loc26.reload779 = load i1*, i1** %.loc26.reg2mem, align 8
  %.loc25.reload781 = load i1*, i1** %.loc25.reg2mem, align 8
  %.loc24.reload783 = load i1*, i1** %.loc24.reg2mem, align 8
  %.loc23.reload785 = load i64*, i64** %.loc23.reg2mem, align 8
  %.loc22.reload787 = load i1*, i1** %.loc22.reg2mem, align 8
  %.loc21.reload789 = load i64*, i64** %.loc21.reg2mem, align 8
  %.loc20.reload791 = load i32*, i32** %.loc20.reg2mem, align 8
  %.reload891 = load i1, i1* %.reg2mem889, align 1
  %.reload901 = load i32, i32* %.reg2mem899, align 4
  %.reload905 = load i1, i1* %.reg2mem903, align 1
  %targetBlock29 = call i1 %14028(i32 %.reload901, i1 %.reload891, i1 %.reload905, i32* %.loc20.reload791, i64* %.loc21.reload789, i1* %.loc22.reload787, i64* %.loc23.reload785, i1* %.loc24.reload783, i1* %.loc25.reload781, i1* %.loc26.reload779, i1* %.loc27.reload777, i1* %.loc28.reload775)
  %.loc20.reload = load i32*, i32** %.loc20.reg2mem, align 8
  %.reload30 = load i32, i32* %.loc20.reload, align 4
  %.loc21.reload = load i64*, i64** %.loc21.reg2mem, align 8
  %.reload31 = load i64, i64* %.loc21.reload, align 8
  %.loc22.reload = load i1*, i1** %.loc22.reg2mem, align 8
  %.reload32 = load i1, i1* %.loc22.reload, align 1
  %.loc23.reload = load i64*, i64** %.loc23.reg2mem, align 8
  %.reload33 = load i64, i64* %.loc23.reload, align 8
  %.loc24.reload = load i1*, i1** %.loc24.reg2mem, align 8
  %.reload34 = load i1, i1* %.loc24.reload, align 1
  %.loc25.reload = load i1*, i1** %.loc25.reg2mem, align 8
  %.reload35 = load i1, i1* %.loc25.reload, align 1
  %.loc26.reload = load i1*, i1** %.loc26.reg2mem, align 8
  %.reload36 = load i1, i1* %.loc26.reload, align 1
  %.loc27.reload = load i1*, i1** %.loc27.reg2mem, align 8
  %.reload37 = load i1, i1* %.loc27.reload, align 1
  %.loc28.reload = load i1*, i1** %.loc28.reg2mem, align 8
  %.reload38 = load i1, i1* %.loc28.reload, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast39)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast40)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast41)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast42)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast43)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast44)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast45)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast46)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast47)
  %.reload487 = load i8**, i8*** %.reg2mem486, align 8
  %.reload501 = load i8**, i8*** %.reg2mem500, align 8
  %14029 = select i1 %targetBlock29, i8** %.reload501, i8** %.reload487
  %14030 = load i8*, i8** %14029, align 8
  store i32 0, i32* %.ph.reg2mem965, align 4
  store i32 %.reload30, i32* %.reg2mem967, align 4
  store i1 %.reload32, i1* %.reg2mem969, align 1
  store i1 %.reload34, i1* %.reg2mem971, align 1
  store i1 %.reload35, i1* %.reg2mem973, align 1
  store i1 %.reload36, i1* %.reg2mem975, align 1
  store i1 %.reload37, i1* %.reg2mem977, align 1
  store i1 %.reload38, i1* %.reg2mem979, align 1
  indirectbr i8* %14030, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"133":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload980 = load i1, i1* %.reg2mem979, align 1
  %.reload978 = load i1, i1* %.reg2mem977, align 1
  %.reload976 = load i1, i1* %.reg2mem975, align 1
  %.reload974 = load i1, i1* %.reg2mem973, align 1
  %.reload972 = load i1, i1* %.reg2mem971, align 1
  %.reload970 = load i1, i1* %.reg2mem969, align 1
  %.reload968 = load i32, i32* %.reg2mem967, align 4
  store i1 %.reload980, i1* %.reg2mem918, align 1
  store i1 %.reload978, i1* %.reg2mem916, align 1
  store i1 %.reload976, i1* %.reg2mem914, align 1
  store i1 %.reload974, i1* %.reg2mem912, align 1
  store i1 %.reload972, i1* %.reg2mem910, align 1
  store i1 %.reload970, i1* %.reg2mem908, align 1
  store i32 %.reload968, i32* %.reg2mem906, align 4
  %.reload505 = load i8**, i8*** %.reg2mem504, align 8
  %14031 = load i8*, i8** %.reload505, align 8
  indirectbr i8* %14031, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl48:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload710 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537080, i64* %.reload710, align 8
  %.reload709 = load i64*, i64** %.reg2mem696, align 8
  %14032 = call i8** @lk14802275186744156584(i64* %.reload709)
  %14033 = load i8*, i8** %14032, align 8
  %14034 = bitcast i8* %14033 to void ()*
  call void %14034()
  %.reload512 = load i8**, i8*** %.reg2mem510, align 8
  %14035 = load i8*, i8** %.reload512, align 8
  %.reload894 = load i32, i32* %.reg2mem893, align 4
  %.reload897 = load i32, i32* %.reg2mem896, align 4
  %.reload900 = load i32, i32* %.reg2mem899, align 4
  %.reload907 = load i32, i32* %.reg2mem906, align 4
  %.reload909 = load i1, i1* %.reg2mem908, align 1
  %.reload911 = load i1, i1* %.reg2mem910, align 1
  %.reload913 = load i1, i1* %.reg2mem912, align 1
  %.reload915 = load i1, i1* %.reg2mem914, align 1
  %.reload917 = load i1, i1* %.reg2mem916, align 1
  %.reload919 = load i1, i1* %.reg2mem918, align 1
  store i32 %.reload907, i32* %.reg2mem981, align 4
  store i1 %.reload919, i1* %.reg2mem983, align 1
  indirectbr i8* %14035, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl49:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc50.reload774 = load i32*, i32** %.loc50.reg2mem, align 8
  %lt.cast70 = bitcast i32* %.loc50.reload774 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast70)
  %.loc51.reload772 = load i32*, i32** %.loc51.reg2mem, align 8
  %lt.cast71 = bitcast i32* %.loc51.reload772 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast71)
  %.loc52.reload770 = load i32*, i32** %.loc52.reg2mem, align 8
  %lt.cast72 = bitcast i32* %.loc52.reload770 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast72)
  %.loc53.reload768 = load i32*, i32** %.loc53.reg2mem, align 8
  %lt.cast73 = bitcast i32* %.loc53.reload768 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast73)
  %.loc54.reload766 = load i1*, i1** %.loc54.reg2mem, align 8
  %lt.cast74 = bitcast i1* %.loc54.reload766 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast74)
  %.loc55.reload764 = load i1*, i1** %.loc55.reg2mem, align 8
  %lt.cast75 = bitcast i1* %.loc55.reload764 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast75)
  %.loc56.reload762 = load i1*, i1** %.loc56.reg2mem, align 8
  %lt.cast76 = bitcast i1* %.loc56.reload762 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast76)
  %.loc57.reload760 = load i1*, i1** %.loc57.reg2mem, align 8
  %lt.cast77 = bitcast i1* %.loc57.reload760 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast77)
  %.loc58.reload758 = load i1*, i1** %.loc58.reg2mem, align 8
  %lt.cast78 = bitcast i1* %.loc58.reload758 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast78)
  %.loc59.reload756 = load i1*, i1** %.loc59.reg2mem, align 8
  %lt.cast79 = bitcast i1* %.loc59.reload756 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast79)
  %.reload708 = load i64*, i64** %.reg2mem696, align 8
  %14036 = and i64 %96, 5650053806454916879
  %14037 = xor i64 %96, -1
  %14038 = xor i64 5650053806454916879, %14037
  %14039 = and i64 %14038, 5650053806454916879
  %14040 = add i64 %725, 8882256145695821305
  %14041 = add i64 8666563759668688886, %725
  %14042 = add i64 %14041, 215692386027132419
  %14043 = or i64 %1493, -4043178655029963141
  %14044 = and i64 -4043178655029963141, %1493
  %14045 = xor i64 -4043178655029963141, %1493
  %14046 = or i64 %14044, %14045
  %14047 = xor i64 %14046, %14036
  %14048 = xor i64 %14047, %14039
  %14049 = xor i64 %14048, %14042
  %14050 = xor i64 %14049, 5512361230609531547
  %14051 = xor i64 %14050, %14043
  %14052 = xor i64 %14051, %14040
  %14053 = add i64 %1294, 8303838815814399244
  %14054 = add i64 8730761794321937489, %1294
  %14055 = sub i64 %14054, 426922978507538245
  %14056 = add i64 %792, 1832065877651672488
  %14057 = add i64 3562819951157218891, %792
  %14058 = sub i64 %14057, 1730754073505546403
  %14059 = xor i64 %14055, 5459276687262744827
  %14060 = xor i64 %14059, %14056
  %14061 = xor i64 %14060, %14058
  %14062 = xor i64 %14061, %14053
  %14063 = mul i64 %14052, %14062
  store i64 %14063, i64* %.reload708, align 8
  %.reload707 = load i64*, i64** %.reg2mem696, align 8
  %14064 = call i8** @lk14802275186744156584(i64* %.reload707)
  %14065 = load i8*, i8** %14064, align 8
  %14066 = bitcast i8* %14065 to void (i32, i1, i32*, i32*, i32*, i32*, i1*, i1*, i1*, i1*, i1*, i1*)*
  %.loc59.reload755 = load i1*, i1** %.loc59.reg2mem, align 8
  %.loc58.reload757 = load i1*, i1** %.loc58.reg2mem, align 8
  %.loc57.reload759 = load i1*, i1** %.loc57.reg2mem, align 8
  %.loc56.reload761 = load i1*, i1** %.loc56.reg2mem, align 8
  %.loc55.reload763 = load i1*, i1** %.loc55.reg2mem, align 8
  %.loc54.reload765 = load i1*, i1** %.loc54.reg2mem, align 8
  %.loc53.reload767 = load i32*, i32** %.loc53.reg2mem, align 8
  %.loc52.reload769 = load i32*, i32** %.loc52.reg2mem, align 8
  %.loc51.reload771 = load i32*, i32** %.loc51.reg2mem, align 8
  %.loc50.reload773 = load i32*, i32** %.loc50.reg2mem, align 8
  %.reload847 = load i32, i32* %.reg2mem846, align 4
  %.reload890 = load i1, i1* %.reg2mem889, align 1
  call void %14066(i32 %.reload847, i1 %.reload890, i32* %.loc50.reload773, i32* %.loc51.reload771, i32* %.loc52.reload769, i32* %.loc53.reload767, i1* %.loc54.reload765, i1* %.loc55.reload763, i1* %.loc56.reload761, i1* %.loc57.reload759, i1* %.loc58.reload757, i1* %.loc59.reload755)
  %.loc50.reload = load i32*, i32** %.loc50.reg2mem, align 8
  %.reload60 = load i32, i32* %.loc50.reload, align 4
  %.loc51.reload = load i32*, i32** %.loc51.reg2mem, align 8
  %.reload61 = load i32, i32* %.loc51.reload, align 4
  %.loc52.reload = load i32*, i32** %.loc52.reg2mem, align 8
  %.reload62 = load i32, i32* %.loc52.reload, align 4
  %.loc53.reload = load i32*, i32** %.loc53.reg2mem, align 8
  %.reload63 = load i32, i32* %.loc53.reload, align 4
  %.loc54.reload = load i1*, i1** %.loc54.reg2mem, align 8
  %.reload64 = load i1, i1* %.loc54.reload, align 1
  %.loc55.reload = load i1*, i1** %.loc55.reg2mem, align 8
  %.reload65 = load i1, i1* %.loc55.reload, align 1
  %.loc56.reload = load i1*, i1** %.loc56.reg2mem, align 8
  %.reload66 = load i1, i1* %.loc56.reload, align 1
  %.loc57.reload = load i1*, i1** %.loc57.reg2mem, align 8
  %.reload67 = load i1, i1* %.loc57.reload, align 1
  %.loc58.reload = load i1*, i1** %.loc58.reg2mem, align 8
  %.reload68 = load i1, i1* %.loc58.reload, align 1
  %.loc59.reload = load i1*, i1** %.loc59.reg2mem, align 8
  %.reload69 = load i1, i1* %.loc59.reload, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast70)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast71)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast72)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast73)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast74)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast75)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast76)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast77)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast78)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast79)
  %.reload511 = load i8**, i8*** %.reg2mem510, align 8
  %14067 = load i8*, i8** %.reload511, align 8
  store i32 %.reload63, i32* %.reg2mem981, align 4
  store i1 %.reload69, i1* %.reg2mem983, align 1
  indirectbr i8* %14067, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"136":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload984 = load i1, i1* %.reg2mem983, align 1
  %.reload982 = load i32, i32* %.reg2mem981, align 4
  store i32 %.reload982, i32* %.reg2mem920, align 4
  %.reload516 = load i8**, i8*** %.reg2mem514, align 8
  %.reload543 = load i8**, i8*** %.reg2mem541, align 8
  %14068 = select i1 %.reload984, i8** %.reload516, i8** %.reload543
  %14069 = load i8*, i8** %14068, align 8
  indirectbr i8* %14069, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"137":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14070 = sub i32 0, -160
  %14071 = add i32 46, 15
  %14072 = sdiv i32 3, 25
  %14073 = add i32 14, 92
  %14074 = sub i32 99, 101
  %.reload13.reload = load i32, i32* %.reload13.reg2mem, align 4
  %14075 = srem i32 %.reload13.reload, 2
  %14076 = icmp eq i32 %14075, 0
  %.reload519 = load i8**, i8*** %.reg2mem518, align 8
  %.reload522 = load i8**, i8*** %.reg2mem521, align 8
  %14077 = select i1 %14076, i8** %.reload519, i8** %.reload522
  %14078 = load i8*, i8** %14077, align 8
  indirectbr i8* %14078, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl80:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc81.reload754 = load i32*, i32** %.loc81.reg2mem, align 8
  %lt.cast87 = bitcast i32* %.loc81.reload754 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast87)
  %.loc82.reload752 = load i32*, i32** %.loc82.reg2mem, align 8
  %lt.cast88 = bitcast i32* %.loc82.reload752 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast88)
  %.loc83.reload750 = load i32*, i32** %.loc83.reg2mem, align 8
  %lt.cast89 = bitcast i32* %.loc83.reload750 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast89)
  %.reload706 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537079, i64* %.reload706, align 8
  %.reload705 = load i64*, i64** %.reg2mem696, align 8
  %14079 = call i8** @lk14802275186744156584(i64* %.reload705)
  %14080 = load i8*, i8** %14079, align 8
  %14081 = bitcast i8* %14080 to void (i32*, i32*, i32*)*
  %.loc83.reload749 = load i32*, i32** %.loc83.reg2mem, align 8
  %.loc82.reload751 = load i32*, i32** %.loc82.reg2mem, align 8
  %.loc81.reload753 = load i32*, i32** %.loc81.reg2mem, align 8
  call void %14081(i32* %.loc81.reload753, i32* %.loc82.reload751, i32* %.loc83.reload749)
  %.loc81.reload = load i32*, i32** %.loc81.reg2mem, align 8
  %.reload84 = load i32, i32* %.loc81.reload, align 4
  %.loc82.reload = load i32*, i32** %.loc82.reg2mem, align 8
  %.reload85 = load i32, i32* %.loc82.reload, align 4
  %.loc83.reload = load i32*, i32** %.loc83.reg2mem, align 8
  %.reload86 = load i32, i32* %.loc83.reload, align 4
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast87)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast88)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast89)
  %.reload539 = load i8**, i8*** %.reg2mem537, align 8
  %14082 = load i8*, i8** %.reload539, align 8
  indirectbr i8* %14082, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"139":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14083 = add i64 124, 42
  %.reload815 = load i32, i32* %.reg2mem814, align 4
  %14084 = srem i32 %.reload815, 2
  %14085 = icmp eq i32 %14084, 0
  %.reload925 = load i32, i32* %.reg2mem920, align 4
  %14086 = mul i32 %.reload925, 2
  %.reload924 = load i32, i32* %.reg2mem920, align 4
  %14087 = mul i32 %.reload924, 2
  %14088 = add i32 2, %14087
  %14089 = mul i32 %14086, %14088
  %14090 = srem i32 %14089, 4
  %14091 = icmp eq i32 %14090, 0
  %.reload923 = load i32, i32* %.reg2mem920, align 4
  %14092 = mul i32 %.reload923, %.reload923
  %.reload922 = load i32, i32* %.reg2mem920, align 4
  %14093 = mul i32 %14092, %.reload922
  %.reload921 = load i32, i32* %.reg2mem920, align 4
  %14094 = add i32 %14093, 491338090
  %14095 = add i32 %14094, %.reload921
  %14096 = sub i32 %14095, 491338090
  %14097 = srem i32 %14096, 2
  %14098 = icmp eq i32 %14097, 0
  %14099 = and i1 %14091, %14098
  store i1 %14099, i1* %.reg2mem926, align 1
  %.reload525 = load i8**, i8*** %.reg2mem524, align 8
  %.reload528 = load i8**, i8*** %.reg2mem527, align 8
  %.reload928 = load i1, i1* %.reg2mem926, align 1
  %14100 = select i1 %.reload928, i8** %.reload525, i8** %.reload528
  %14101 = load i8*, i8** %14100, align 8
  indirectbr i8* %14101, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl90:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.loc91.reload748 = load i32*, i32** %.loc91.reg2mem, align 8
  %lt.cast113 = bitcast i32* %.loc91.reload748 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast113)
  %.loc92.reload746 = load i64*, i64** %.loc92.reg2mem, align 8
  %lt.cast114 = bitcast i64* %.loc92.reload746 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast114)
  %.loc93.reload744 = load i32*, i32** %.loc93.reg2mem, align 8
  %lt.cast115 = bitcast i32* %.loc93.reload744 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast115)
  %.loc94.reload742 = load i64*, i64** %.loc94.reg2mem, align 8
  %lt.cast116 = bitcast i64* %.loc94.reload742 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast116)
  %.loc95.reload740 = load i32*, i32** %.loc95.reg2mem, align 8
  %lt.cast117 = bitcast i32* %.loc95.reload740 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast117)
  %.loc96.reload738 = load i64*, i64** %.loc96.reg2mem, align 8
  %lt.cast118 = bitcast i64* %.loc96.reload738 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast118)
  %.loc97.reload736 = load i64*, i64** %.loc97.reg2mem, align 8
  %lt.cast119 = bitcast i64* %.loc97.reload736 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast119)
  %.loc98.reload734 = load i64*, i64** %.loc98.reg2mem, align 8
  %lt.cast120 = bitcast i64* %.loc98.reload734 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast120)
  %.loc99.reload732 = load i64*, i64** %.loc99.reg2mem, align 8
  %lt.cast121 = bitcast i64* %.loc99.reload732 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast121)
  %.loc100.reload730 = load i64*, i64** %.loc100.reg2mem, align 8
  %lt.cast122 = bitcast i64* %.loc100.reload730 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast122)
  %.loc101.reload728 = load i64*, i64** %.loc101.reg2mem, align 8
  %lt.cast123 = bitcast i64* %.loc101.reload728 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* %lt.cast123)
  %.reload704 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537083, i64* %.reload704, align 8
  %.reload703 = load i64*, i64** %.reg2mem696, align 8
  %14102 = call i8** @lk14802275186744156584(i64* %.reload703)
  %14103 = load i8*, i8** %14102, align 8
  %14104 = bitcast i8* %14103 to void (i32*, i64*, i32*, i64*, i32*, i64*, i64*, i64*, i64*, i64*, i64*)*
  %.loc101.reload727 = load i64*, i64** %.loc101.reg2mem, align 8
  %.loc100.reload729 = load i64*, i64** %.loc100.reg2mem, align 8
  %.loc99.reload731 = load i64*, i64** %.loc99.reg2mem, align 8
  %.loc98.reload733 = load i64*, i64** %.loc98.reg2mem, align 8
  %.loc97.reload735 = load i64*, i64** %.loc97.reg2mem, align 8
  %.loc96.reload737 = load i64*, i64** %.loc96.reg2mem, align 8
  %.loc95.reload739 = load i32*, i32** %.loc95.reg2mem, align 8
  %.loc94.reload741 = load i64*, i64** %.loc94.reg2mem, align 8
  %.loc93.reload743 = load i32*, i32** %.loc93.reg2mem, align 8
  %.loc92.reload745 = load i64*, i64** %.loc92.reg2mem, align 8
  %.loc91.reload747 = load i32*, i32** %.loc91.reg2mem, align 8
  call void %14104(i32* %.loc91.reload747, i64* %.loc92.reload745, i32* %.loc93.reload743, i64* %.loc94.reload741, i32* %.loc95.reload739, i64* %.loc96.reload737, i64* %.loc97.reload735, i64* %.loc98.reload733, i64* %.loc99.reload731, i64* %.loc100.reload729, i64* %.loc101.reload727)
  %.loc91.reload = load i32*, i32** %.loc91.reg2mem, align 8
  %.reload102 = load i32, i32* %.loc91.reload, align 4
  %.loc92.reload = load i64*, i64** %.loc92.reg2mem, align 8
  %.reload103 = load i64, i64* %.loc92.reload, align 8
  %.loc93.reload = load i32*, i32** %.loc93.reg2mem, align 8
  %.reload104 = load i32, i32* %.loc93.reload, align 4
  %.loc94.reload = load i64*, i64** %.loc94.reg2mem, align 8
  %.reload105 = load i64, i64* %.loc94.reload, align 8
  %.loc95.reload = load i32*, i32** %.loc95.reg2mem, align 8
  %.reload106 = load i32, i32* %.loc95.reload, align 4
  %.loc96.reload = load i64*, i64** %.loc96.reg2mem, align 8
  %.reload107 = load i64, i64* %.loc96.reload, align 8
  %.loc97.reload = load i64*, i64** %.loc97.reg2mem, align 8
  %.reload108 = load i64, i64* %.loc97.reload, align 8
  %.loc98.reload = load i64*, i64** %.loc98.reg2mem, align 8
  %.reload109 = load i64, i64* %.loc98.reload, align 8
  %.loc99.reload = load i64*, i64** %.loc99.reg2mem, align 8
  %.reload110 = load i64, i64* %.loc99.reload, align 8
  %.loc100.reload = load i64*, i64** %.loc100.reg2mem, align 8
  %.reload111 = load i64, i64* %.loc100.reload, align 8
  %.loc101.reload = load i64*, i64** %.loc101.reg2mem, align 8
  %.reload112 = load i64, i64* %.loc101.reload, align 8
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast113)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast114)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast115)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast116)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast117)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast118)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast119)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast120)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast121)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast122)
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* %lt.cast123)
  %.reload532 = load i8**, i8*** %.reg2mem530, align 8
  %14105 = load i8*, i8** %.reload532, align 8
  store i32 %.reload102, i32* %.reg2mem985, align 4
  store i32 %.reload104, i32* %.reg2mem987, align 4
  store i32 %.reload106, i32* %.reg2mem989, align 4
  indirectbr i8* %14105, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"141":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14106 = add i32 42, 90
  %14107 = sdiv i64 71, 41
  %14108 = or i64 %286, -2359253739335609373
  %14109 = xor i64 %286, -1
  %14110 = and i64 %14109, 5433963522735213577
  %14111 = and i64 %286, -5433963522735213578
  %14112 = or i64 %14110, %14111
  %14113 = xor i64 -7769995572060905494, %14112
  %14114 = xor i64 %286, -1
  %14115 = or i64 2359253739335609372, %14114
  %14116 = xor i64 %14115, -1
  %14117 = and i64 %14116, -1
  %14118 = or i64 %14113, %14117
  %14119 = add i64 %1298, 4287436267589422244
  %14120 = sub i64 0, %1298
  %14121 = add i64 -4287436267589422244, %14120
  %14122 = sub i64 0, %14121
  %14123 = or i64 %684, 7213216035616565869
  %14124 = xor i64 %684, -1
  %14125 = and i64 %14124, 6032095294458424521
  %14126 = and i64 %684, -6032095294458424522
  %14127 = or i64 %14125, %14126
  %14128 = xor i64 4011637931162486436, %14127
  %14129 = xor i64 %684, -1
  %14130 = or i64 -7213216035616565870, %14129
  %14131 = xor i64 %14130, -1
  %14132 = and i64 %14131, -1
  %14133 = or i64 %14128, %14132
  %14134 = xor i64 %14119, %14118
  %14135 = xor i64 %14134, %14133
  %14136 = xor i64 %14135, %14108
  %14137 = xor i64 %14136, %14123
  %14138 = xor i64 %14137, %14122
  %14139 = xor i64 %14138, 6354728813258993671
  %14140 = and i64 %393, -5305374846807303726
  %14141 = or i64 5305374846807303725, %393
  %14142 = sub i64 %14141, 5305374846807303725
  %14143 = add i64 %97, 9013103946359961739
  %14144 = sub i64 0, %97
  %14145 = sub i64 9013103946359961739, %14144
  %14146 = xor i64 %14143, %14140
  %14147 = xor i64 %14146, 0
  %14148 = xor i64 %14147, %14142
  %14149 = xor i64 %14148, %14145
  %14150 = mul i64 %14139, %14149
  %14151 = trunc i64 %14150 to i32
  %14152 = add i32 116, %14151
  %14153 = mul i64 19, 110
  %14154 = sdiv i32 49, 121
  %14155 = sdiv i64 9, 64
  %14156 = sub i64 101, 9
  %14157 = sdiv i64 45, 67
  %14158 = sdiv i64 11, 96
  %14159 = sdiv i64 24, 42
  %14160 = mul i64 30, 125
  %.reload515 = load i8**, i8*** %.reg2mem514, align 8
  %.reload531 = load i8**, i8*** %.reg2mem530, align 8
  %.reload927 = load i1, i1* %.reg2mem926, align 1
  %14161 = select i1 %.reload927, i8** %.reload531, i8** %.reload515
  %14162 = load i8*, i8** %14161, align 8
  store i32 %14106, i32* %.reg2mem985, align 4
  store i32 %14152, i32* %.reg2mem987, align 4
  store i32 %14154, i32* %.reg2mem989, align 4
  indirectbr i8* %14162, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"142":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload990 = load i32, i32* %.reg2mem989, align 4
  %.reload988 = load i32, i32* %.reg2mem987, align 4
  %.reload986 = load i32, i32* %.reg2mem985, align 4
  store i32 %.reload990, i32* %.reg2mem933, align 4
  store i32 %.reload988, i32* %.reg2mem931, align 4
  store i32 %.reload986, i32* %.reg2mem929, align 4
  %.reload535 = load i8**, i8*** %.reg2mem534, align 8
  %14163 = load i8*, i8** %.reload535, align 8
  indirectbr i8* %14163, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl124:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload702 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537078, i64* %.reload702, align 8
  %.reload701 = load i64*, i64** %.reg2mem696, align 8
  %14164 = call i8** @lk14802275186744156584(i64* %.reload701)
  %14165 = load i8*, i8** %14164, align 8
  %14166 = bitcast i8* %14165 to void ()*
  call void %14166()
  %.reload538 = load i8**, i8*** %.reg2mem537, align 8
  %14167 = load i8*, i8** %.reload538, align 8
  %.reload930 = load i32, i32* %.reg2mem929, align 4
  %.reload932 = load i32, i32* %.reg2mem931, align 4
  %.reload934 = load i32, i32* %.reg2mem933, align 4
  indirectbr i8* %14167, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"144":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload542 = load i8**, i8*** %.reg2mem541, align 8
  %14168 = load i8*, i8** %.reload542, align 8
  indirectbr i8* %14168, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"145":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload546 = load i8**, i8*** %.reg2mem545, align 8
  %14169 = load i8*, i8** %.reload546, align 8
  %.reload887 = load i1, i1* %.reg2mem885, align 1
  %.ph.reload = load i32, i32* %.ph.reg2mem, align 4
  store i32 %.ph.reload, i32* %.reg2mem991, align 4
  store i1 %.reload887, i1* %.reg2mem993, align 1
  indirectbr i8* %14169, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"146":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload994 = load i1, i1* %.reg2mem993, align 1
  %.reload992 = load i32, i32* %.reg2mem991, align 4
  store i1 %.reload994, i1* %.reg2mem937, align 1
  store i32 %.reload992, i32* %.reg2mem935, align 4
  %.reload821 = load i32, i32* %.reg2mem817, align 4
  %14170 = mul i32 %.reload821, %.reload821
  %.reload820 = load i32, i32* %.reg2mem817, align 4
  %14171 = add i32 %14170, %.reload820
  %14172 = mul i32 %14171, 3
  %14173 = srem i32 %14172, 2
  %14174 = icmp eq i32 %14173, 0
  %.reload819 = load i32, i32* %.reg2mem817, align 4
  %14175 = mul i32 %.reload819, %.reload819
  %.reload818 = load i32, i32* %.reg2mem817, align 4
  %14176 = add i32 %14175, %.reload818
  %14177 = srem i32 %14176, 2
  %14178 = icmp eq i32 %14177, 0
  %14179 = xor i1 %14174, true
  %14180 = xor i1 %14178, false
  %14181 = xor i1 %14180, true
  %14182 = and i1 %14179, %14181
  %14183 = xor i1 %14179, %14181
  %14184 = or i1 %14182, %14183
  %14185 = add i64 %1404, 2141372131924839406
  %14186 = and i64 2141372131924839406, %1404
  %14187 = or i64 2141372131924839406, %1404
  %14188 = add i64 %14186, %14187
  %14189 = and i64 %784, -4387517299291881173
  %14190 = xor i64 %784, -1
  %14191 = xor i64 -4387517299291881173, %14190
  %14192 = and i64 %14191, -4387517299291881173
  %14193 = or i64 %676, -6297904756881954838
  %14194 = xor i64 %676, -1
  %14195 = and i64 -6297904756881954838, %14194
  %14196 = add i64 %14195, %676
  %14197 = xor i64 %14196, %14185
  %14198 = xor i64 %14197, %14188
  %14199 = xor i64 %14198, %14193
  %14200 = xor i64 %14199, %14192
  %14201 = xor i64 %14200, 4067981831184991471
  %14202 = xor i64 %14201, %14189
  %14203 = or i64 %224, 2864395429970906072
  %14204 = xor i64 %224, -1
  %14205 = and i64 2864395429970906072, %14204
  %14206 = add i64 %14205, %224
  %14207 = and i64 %175, 7644750322813383673
  %14208 = or i64 -7644750322813383674, %175
  %14209 = sub i64 %14208, -7644750322813383674
  %14210 = xor i64 %14207, 308664013772384783
  %14211 = xor i64 %14210, %14206
  %14212 = xor i64 %14211, %14209
  %14213 = xor i64 %14212, %14203
  %14214 = mul i64 %14202, %14213
  %14215 = trunc i64 %14214 to i1
  %14216 = xor i1 %14184, %14215
  %14217 = xor i1 %14216, true
  %14218 = or i1 %14217, true
  %14219 = xor i1 %14216, true
  %14220 = sub i1 %14218, %14219
  %.reload550 = load i8**, i8*** %.reg2mem549, align 8
  %.reload554 = load i8**, i8*** %.reg2mem552, align 8
  %14221 = select i1 %14220, i8** %.reload550, i8** %.reload554
  %14222 = load i8*, i8** %14221, align 8
  indirectbr i8* %14222, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"147":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14223 = sub i32 38, 80
  %14224 = mul i32 82, 20
  %14225 = add i32 13, 16
  %14226 = mul i32 119, 54
  %14227 = add i32 77, 1
  %14228 = sub i32 22, 81
  %14229 = sub i32 28, 6
  %.reload553 = load i8**, i8*** %.reg2mem552, align 8
  %14230 = load i8*, i8** %.reload553, align 8
  indirectbr i8* %14230, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"148":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload557 = load i8**, i8*** %.reg2mem556, align 8
  %.reload561 = load i8**, i8*** %.reg2mem559, align 8
  %.reload938 = load i1, i1* %.reg2mem937, align 1
  %14231 = select i1 %.reload938, i8** %.reload561, i8** %.reload557
  %14232 = load i8*, i8** %14231, align 8
  %.reload936 = load i32, i32* %.reg2mem935, align 4
  store i32 %.reload936, i32* %.reg2mem995, align 4
  indirectbr i8* %14232, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"149":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload700 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537072, i64* %.reload700, align 8
  %.reload699 = load i64*, i64** %.reg2mem696, align 8
  %14233 = call i8** @lk14802275186744156584(i64* %.reload699)
  %14234 = load i8*, i8** %14233, align 8
  %14235 = bitcast i8* %14234 to i32 (i8*, ...)*
  %14236 = call i32 (i8*, ...) %14235(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %.reload698 = load i64*, i64** %.reg2mem696, align 8
  store i64 1996855465712537087, i64* %.reload698, align 8
  %.reload697 = load i64*, i64** %.reg2mem696, align 8
  %14237 = call i8** @lk14802275186744156584(i64* %.reload697)
  %14238 = load i8*, i8** %14237, align 8
  %14239 = bitcast i8* %14238 to i32 (float*, float*, i8*, i64)*
  %14240 = call i32 %14239(float* %82, float* %83, i8* %84, i64 1760)
  %.reload560 = load i8**, i8*** %.reg2mem559, align 8
  %14241 = load i8*, i8** %.reload560, align 8
  store i32 %14240, i32* %.reg2mem995, align 4
  indirectbr i8* %14241, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"150":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload996 = load i32, i32* %.reg2mem995, align 4
  store i32 %.reload996, i32* %86, align 4
  ret void

newFuncRoot30:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload568 = load i8**, i8*** %.reg2mem567, align 8
  %14242 = load i8*, i8** %.reload568, align 8
  indirectbr i8* %14242, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.split31:                                         ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload571 = load i8**, i8*** %.reg2mem570, align 8
  %.reload574 = load i8**, i8*** %.reg2mem573, align 8
  %14243 = select i1 %87, i8** %.reload571, i8** %.reload574
  %14244 = load i8*, i8** %14243, align 8
  indirectbr i8* %14244, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub32:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %88, align 1
  ret void

.exitStub133:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %88, align 1
  ret void

"155":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14245 = load i64, i64* %89, align 8
  %14246 = alloca i64, align 8
  %14247 = and i64 %1131, -2227553332099350679
  %14248 = or i64 2227553332099350678, %1131
  %14249 = sub i64 %14248, 2227553332099350678
  %14250 = or i64 %553, -515148417581612613
  %14251 = xor i64 %553, -1
  %14252 = and i64 -515148417581612613, %14251
  %14253 = add i64 %14252, %553
  %14254 = and i64 %1543, 1054191218158995280
  %14255 = xor i64 %1543, -1
  %14256 = or i64 -1054191218158995281, %14255
  %14257 = xor i64 %14256, -1
  %14258 = and i64 %14257, -1
  %14259 = xor i64 %14254, %14247
  %14260 = xor i64 %14259, %14250
  %14261 = xor i64 %14260, %14258
  %14262 = xor i64 %14261, %14249
  %14263 = xor i64 %14262, -3600295535488467945
  %14264 = xor i64 %14263, %14253
  %14265 = or i64 %343, -2909553104403125593
  %14266 = xor i64 %343, -1
  %14267 = and i64 -2909553104403125593, %14266
  %14268 = add i64 %14267, %343
  %14269 = or i64 %1529, -4545328095033265372
  %14270 = xor i64 %1529, -1
  %14271 = and i64 %14270, 7653750829422211943
  %14272 = and i64 %1529, -7653750829422211944
  %14273 = or i64 %14271, %14272
  %14274 = xor i64 -6134934043092877245, %14273
  %14275 = xor i64 %1529, -1
  %14276 = or i64 4545328095033265371, %14275
  %14277 = xor i64 %14276, -1
  %14278 = and i64 %14277, -1
  %14279 = or i64 %14274, %14278
  %14280 = xor i64 0, %14265
  %14281 = xor i64 %14280, %14268
  %14282 = xor i64 %14281, %14279
  %14283 = xor i64 %14282, %14269
  %14284 = mul i64 %14264, %14283
  %14285 = trunc i64 %14284 to i1
  %14286 = and i64 %1657, 6181431130548235018
  %14287 = xor i64 %1657, -1
  %14288 = xor i64 6181431130548235018, %14287
  %14289 = and i64 %14288, 6181431130548235018
  %14290 = and i64 %662, -8455689732497106273
  %14291 = xor i64 %662, -1
  %14292 = xor i64 -8455689732497106273, %14291
  %14293 = and i64 %14292, -8455689732497106273
  %14294 = xor i64 %14286, %14289
  %14295 = xor i64 %14294, %14293
  %14296 = xor i64 %14295, %14290
  %14297 = xor i64 %14296, -7186161267859135865
  %14298 = or i64 %341, 4765278736570799166
  %14299 = xor i64 %341, -1
  %14300 = and i64 4765278736570799166, %14299
  %14301 = add i64 %14300, %341
  %14302 = add i64 %788, -4317608466374346143
  %14303 = xor i64 -4317608466374346143, %788
  %14304 = and i64 -4317608466374346143, %788
  %14305 = mul i64 2, %14304
  %14306 = add i64 %14303, %14305
  %14307 = and i64 %1396, 2140314151832058495
  %14308 = xor i64 %1396, -1
  %14309 = xor i64 2140314151832058495, %14308
  %14310 = and i64 %14309, 2140314151832058495
  %14311 = xor i64 %14306, %14298
  %14312 = xor i64 %14311, %14302
  %14313 = xor i64 %14312, %14301
  %14314 = xor i64 %14313, 0
  %14315 = xor i64 %14314, %14310
  %14316 = xor i64 %14315, %14307
  %14317 = mul i64 %14297, %14316
  %14318 = trunc i64 %14317 to i1
  %14319 = and i64 %662, 4969534640451627686
  %14320 = or i64 -4969534640451627687, %662
  %14321 = sub i64 %14320, -4969534640451627687
  %14322 = or i64 %494, 1419526330096530509
  %14323 = xor i64 %494, -1
  %14324 = and i64 %14323, 2313600591516349117
  %14325 = and i64 %494, -2313600591516349118
  %14326 = or i64 %14324, %14325
  %14327 = xor i64 3722406339637446384, %14326
  %14328 = xor i64 %494, -1
  %14329 = or i64 -1419526330096530510, %14328
  %14330 = xor i64 %14329, -1
  %14331 = and i64 %14330, -1
  %14332 = or i64 %14327, %14331
  %14333 = and i64 %222, 4806483142671700176
  %14334 = xor i64 %222, -1
  %14335 = xor i64 4806483142671700176, %14334
  %14336 = and i64 %14335, 4806483142671700176
  %14337 = xor i64 %14321, %14336
  %14338 = xor i64 %14337, %14319
  %14339 = xor i64 %14338, %14332
  %14340 = xor i64 %14339, %14333
  %14341 = xor i64 %14340, %14322
  %14342 = xor i64 %14341, 2810874350357929323
  %14343 = and i64 %662, -7014287559815988788
  %14344 = xor i64 %662, -1
  %14345 = xor i64 -7014287559815988788, %14344
  %14346 = and i64 %14345, -7014287559815988788
  %14347 = add i64 %666, 8956602007753821206
  %14348 = and i64 8956602007753821206, %666
  %14349 = or i64 8956602007753821206, %666
  %14350 = add i64 %14348, %14349
  %14351 = or i64 %660, 7632474001309222943
  %14352 = and i64 7632474001309222943, %660
  %14353 = xor i64 7632474001309222943, %660
  %14354 = or i64 %14352, %14353
  %14355 = xor i64 %14346, %14350
  %14356 = xor i64 %14355, %14343
  %14357 = xor i64 %14356, %14351
  %14358 = xor i64 %14357, %14354
  %14359 = xor i64 %14358, %14347
  %14360 = xor i64 %14359, 0
  %14361 = mul i64 %14342, %14360
  %14362 = trunc i64 %14361 to i32
  %14363 = or i64 %11, 120702994030183100
  %14364 = and i64 120702994030183100, %11
  %14365 = xor i64 120702994030183100, %11
  %14366 = or i64 %14364, %14365
  %14367 = or i64 %1343, 3579348996850880393
  %14368 = xor i64 %1343, -1
  %14369 = and i64 3579348996850880393, %14368
  %14370 = add i64 %14369, %1343
  %14371 = or i64 %1643, -7863567131197506281
  %14372 = and i64 -7863567131197506281, %1643
  %14373 = xor i64 -7863567131197506281, %1643
  %14374 = or i64 %14372, %14373
  %14375 = xor i64 -5926488439841147455, %14371
  %14376 = xor i64 %14375, %14374
  %14377 = xor i64 %14376, %14366
  %14378 = xor i64 %14377, %14363
  %14379 = xor i64 %14378, %14370
  %14380 = xor i64 %14379, %14367
  %14381 = add i64 %226, 1877306375024253968
  %14382 = sub i64 0, %226
  %14383 = sub i64 1877306375024253968, %14382
  %14384 = add i64 %776, 5515466140593826537
  %14385 = and i64 5515466140593826537, %776
  %14386 = or i64 5515466140593826537, %776
  %14387 = add i64 %14385, %14386
  %14388 = xor i64 %14384, %14387
  %14389 = xor i64 %14388, %14381
  %14390 = xor i64 %14389, %14383
  %14391 = xor i64 %14390, 0
  %14392 = mul i64 %14380, %14391
  %14393 = and i64 %1509, -6118887056074547005
  %14394 = xor i64 %1509, -1
  %14395 = xor i64 -6118887056074547005, %14394
  %14396 = and i64 %14395, -6118887056074547005
  %14397 = sext i32 %60 to i64
  %14398 = and i64 %14397, -5150839290621478667
  %14399 = or i64 5150839290621478666, %14397
  %14400 = sub i64 %14399, 5150839290621478666
  %14401 = or i64 %393, -6148533369312280912
  %14402 = xor i64 %393, -1
  %14403 = and i64 %14402, 4726927600281453434
  %14404 = and i64 %393, -4726927600281453435
  %14405 = or i64 %14403, %14404
  %14406 = xor i64 -1498169385342894646, %14405
  %14407 = xor i64 %393, -1
  %14408 = or i64 6148533369312280911, %14407
  %14409 = xor i64 %14408, -1
  %14410 = and i64 %14409, -1
  %14411 = or i64 %14406, %14410
  %14412 = xor i64 %14411, %14398
  %14413 = xor i64 %14412, %14400
  %14414 = xor i64 %14413, %14401
  %14415 = xor i64 %14414, -8635876161409693159
  %14416 = xor i64 %14415, %14393
  %14417 = xor i64 %14416, %14396
  %14418 = and i64 %543, -6125290885092089059
  %14419 = or i64 6125290885092089058, %543
  %14420 = sub i64 %14419, 6125290885092089058
  %14421 = add i64 %1343, 3094259690090522823
  %14422 = add i64 -2767632876519734994, %1343
  %14423 = sub i64 %14422, -5861892566610257817
  %14424 = xor i64 %14423, %14420
  %14425 = xor i64 %14424, 0
  %14426 = xor i64 %14425, %14418
  %14427 = xor i64 %14426, %14421
  %14428 = mul i64 %14417, %14427
  %14429 = or i64 %383, 9070664802080331708
  %14430 = and i64 9070664802080331708, %383
  %14431 = xor i64 9070664802080331708, %383
  %14432 = or i64 %14430, %14431
  %14433 = add i64 %1535, 1406257910734744478
  %14434 = sub i64 0, %1535
  %14435 = sub i64 1406257910734744478, %14434
  %14436 = xor i64 %14435, %14433
  %14437 = xor i64 %14436, -2195912895115656917
  %14438 = xor i64 %14437, %14432
  %14439 = xor i64 %14438, %14429
  %14440 = or i64 %96, -7205608352508642589
  %14441 = xor i64 %96, -1
  %14442 = and i64 %14441, -5797634456431437723
  %14443 = and i64 %96, 5797634456431437722
  %14444 = or i64 %14442, %14443
  %14445 = xor i64 3713819654342615686, %14444
  %14446 = xor i64 %96, -1
  %14447 = or i64 7205608352508642588, %14446
  %14448 = xor i64 %14447, -1
  %14449 = and i64 %14448, -1
  %14450 = or i64 %14445, %14449
  %14451 = add i64 %1129, 8754348896016324026
  %14452 = add i64 -3659679849774053902, %1129
  %14453 = sub i64 %14452, 6032715327919173688
  %14454 = xor i64 %14453, %14450
  %14455 = xor i64 %14454, 0
  %14456 = xor i64 %14455, %14451
  %14457 = xor i64 %14456, %14440
  %14458 = mul i64 %14439, %14457
  %14459 = and i64 %782, -4002757959477648478
  %14460 = xor i64 %782, -1
  %14461 = or i64 4002757959477648477, %14460
  %14462 = xor i64 %14461, -1
  %14463 = and i64 %14462, -1
  %14464 = add i64 %1531, -7190120591672740333
  %14465 = add i64 -7832014051197138081, %1531
  %14466 = add i64 %14465, 641893459524397748
  %14467 = add i64 %1242, 224897587018689334
  %14468 = sub i64 0, %1242
  %14469 = add i64 -224897587018689334, %14468
  %14470 = sub i64 0, %14469
  %14471 = xor i64 2341404509423664197, %14459
  %14472 = xor i64 %14471, %14466
  %14473 = xor i64 %14472, %14470
  %14474 = xor i64 %14473, %14467
  %14475 = xor i64 %14474, %14464
  %14476 = xor i64 %14475, %14463
  %14477 = add i64 %676, 2673106936899068585
  %14478 = sub i64 0, %676
  %14479 = add i64 -2673106936899068585, %14478
  %14480 = sub i64 0, %14479
  %14481 = or i64 %1404, 8443414166698493990
  %14482 = xor i64 %1404, -1
  %14483 = and i64 %14482, 4046120346885108950
  %14484 = and i64 %1404, -4046120346885108951
  %14485 = or i64 %14483, %14484
  %14486 = xor i64 5551739287600479472, %14485
  %14487 = xor i64 %1404, -1
  %14488 = or i64 -8443414166698493991, %14487
  %14489 = xor i64 %14488, -1
  %14490 = and i64 %14489, -1
  %14491 = or i64 %14486, %14490
  %14492 = add i64 %1535, 1916539604551122718
  %14493 = xor i64 1916539604551122718, %1535
  %14494 = and i64 1916539604551122718, %1535
  %14495 = mul i64 2, %14494
  %14496 = add i64 %14493, %14495
  %14497 = xor i64 %14481, 0
  %14498 = xor i64 %14497, %14496
  %14499 = xor i64 %14498, %14492
  %14500 = xor i64 %14499, %14491
  %14501 = xor i64 %14500, %14480
  %14502 = xor i64 %14501, %14477
  %14503 = mul i64 %14476, %14502
  %14504 = trunc i64 %14503 to i1
  %14505 = and i64 %446, -5422231605441280356
  %14506 = or i64 5422231605441280355, %446
  %14507 = sub i64 %14506, 5422231605441280355
  %14508 = and i64 %998, -3204414370953510541
  %14509 = or i64 3204414370953510540, %998
  %14510 = sub i64 %14509, 3204414370953510540
  %14511 = or i64 %768, 445796124249583173
  %14512 = and i64 445796124249583173, %768
  %14513 = xor i64 445796124249583173, %768
  %14514 = or i64 %14512, %14513
  %14515 = xor i64 %14507, %14510
  %14516 = xor i64 %14515, -1503968420494993747
  %14517 = xor i64 %14516, %14505
  %14518 = xor i64 %14517, %14514
  %14519 = xor i64 %14518, %14511
  %14520 = xor i64 %14519, %14508
  %14521 = and i64 %916, -2925360126526120555
  %14522 = or i64 2925360126526120554, %916
  %14523 = sub i64 %14522, 2925360126526120554
  %14524 = sext i32 %170 to i64
  %14525 = or i64 %14524, -261155089969057793
  %14526 = xor i64 %14524, -1
  %14527 = and i64 %14526, -6821738862641469070
  %14528 = and i64 %14524, 6821738862641469069
  %14529 = or i64 %14527, %14528
  %14530 = xor i64 6716098985093547661, %14529
  %14531 = xor i64 %14524, -1
  %14532 = or i64 261155089969057792, %14531
  %14533 = xor i64 %14532, -1
  %14534 = and i64 %14533, -1
  %14535 = or i64 %14530, %14534
  %14536 = xor i64 %14523, 0
  %14537 = xor i64 %14536, %14525
  %14538 = xor i64 %14537, %14521
  %14539 = xor i64 %14538, %14535
  %14540 = mul i64 %14520, %14539
  %14541 = trunc i64 %14540 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 %14245, i64* %14246, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 %14285, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 %14318, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 %14362, i1* null, i1* null, i8* null, i64 0, i64 %14392, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 %14428, i64 0, i64 %14458, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 %14504, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 %14541, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %14542 = load i64, i64* %14246, align 8
  %14543 = getelementptr inbounds [2 x i8*], [2 x i8*]* @obfsfuncAddrLookupTable3231250603839710514, i32 0, i64 %14542
  store i8** %14543, i8*** %90, align 8
  ret void

newFuncRoot34:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload583 = load i8**, i8*** %.reg2mem582, align 8
  %14544 = load i8*, i8** %.reload583, align 8
  indirectbr i8* %14544, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"157":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14545 = icmp eq i64 %91, 0
  %14546 = mul i32 %92, 2
  %14547 = mul i32 %92, 2
  %14548 = add i32 1898326935, %14547
  %14549 = add i32 %14548, -1898326933
  %14550 = mul i32 %14546, %14549
  %14551 = and i64 %1519, 5042979189399562699
  %14552 = xor i64 %1519, -1
  %14553 = or i64 -5042979189399562700, %14552
  %14554 = xor i64 %14553, -1
  %14555 = and i64 %14554, -1
  %14556 = add i64 %772, -8638703369620309475
  %14557 = add i64 -3061948052051747941, %772
  %14558 = add i64 %14557, -5576755317568561534
  %14559 = xor i64 %14551, %14556
  %14560 = xor i64 %14559, %14555
  %14561 = xor i64 %14560, 144497982948832413
  %14562 = xor i64 %14561, %14558
  %14563 = sext i32 %72 to i64
  %14564 = or i64 %14563, -1915334814087717138
  %14565 = and i64 -1915334814087717138, %14563
  %14566 = xor i64 -1915334814087717138, %14563
  %14567 = or i64 %14565, %14566
  %14568 = and i64 %494, 7947733670487140970
  %14569 = or i64 -7947733670487140971, %494
  %14570 = sub i64 %14569, -7947733670487140971
  %14571 = add i64 %1343, 1045782679792195758
  %14572 = sub i64 0, %1343
  %14573 = add i64 -1045782679792195758, %14572
  %14574 = sub i64 0, %14573
  %14575 = xor i64 %14568, -2802212525160741164
  %14576 = xor i64 %14575, %14570
  %14577 = xor i64 %14576, %14567
  %14578 = xor i64 %14577, %14564
  %14579 = xor i64 %14578, %14571
  %14580 = xor i64 %14579, %14574
  %14581 = mul i64 %14562, %14580
  %14582 = trunc i64 %14581 to i32
  %14583 = srem i32 %14550, %14582
  %14584 = or i64 %1242, -4372463887295859728
  %14585 = and i64 -4372463887295859728, %1242
  %14586 = xor i64 -4372463887295859728, %1242
  %14587 = or i64 %14585, %14586
  %14588 = or i64 %101, 4995417001685971811
  %14589 = and i64 4995417001685971811, %101
  %14590 = xor i64 4995417001685971811, %101
  %14591 = or i64 %14589, %14590
  %14592 = add i64 %395, -4317510051059742157
  %14593 = add i64 -5996772518820551676, %395
  %14594 = sub i64 %14593, -1679262467760809519
  %14595 = xor i64 %14592, %14594
  %14596 = xor i64 %14595, %14588
  %14597 = xor i64 %14596, %14587
  %14598 = xor i64 %14597, %14591
  %14599 = xor i64 %14598, -2866279253054412345
  %14600 = xor i64 %14599, %14584
  %14601 = add i64 %1135, 1243417739641703188
  %14602 = and i64 1243417739641703188, %1135
  %14603 = or i64 1243417739641703188, %1135
  %14604 = add i64 %14602, %14603
  %14605 = and i64 %1647, -76429341814595412
  %14606 = or i64 76429341814595411, %1647
  %14607 = sub i64 %14606, 76429341814595411
  %14608 = and i64 %1511, -5769777334410663600
  %14609 = xor i64 %1511, -1
  %14610 = or i64 5769777334410663599, %14609
  %14611 = xor i64 %14610, -1
  %14612 = and i64 %14611, -1
  %14613 = xor i64 %14601, %14607
  %14614 = xor i64 %14613, %14604
  %14615 = xor i64 %14614, %14605
  %14616 = xor i64 %14615, %14612
  %14617 = xor i64 %14616, 0
  %14618 = xor i64 %14617, %14608
  %14619 = mul i64 %14600, %14618
  %14620 = trunc i64 %14619 to i32
  %14621 = icmp eq i32 %14583, %14620
  %14622 = mul i32 %92, %92
  %14623 = mul i32 %14622, %92
  %14624 = add i32 %14623, 60754203
  %14625 = add i32 %14624, %92
  %14626 = sub i32 %14625, 60754203
  %14627 = srem i32 %14626, 2
  %14628 = icmp eq i32 %14627, 0
  %14629 = and i1 %14621, %14628
  store i1 %14629, i1* %93, align 1
  %.reload586 = load i8**, i8*** %.reg2mem585, align 8
  %.reload589 = load i8**, i8*** %.reg2mem588, align 8
  %14630 = select i1 %14629, i8** %.reload586, i8** %.reload589
  %14631 = load i8*, i8** %14630, align 8
  indirectbr i8* %14631, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub35:                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %94, align 1
  ret void

.exitStub1.exitStub36:                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14632 = and i64 %656, -6948175065419523815
  %14633 = or i64 6948175065419523814, %656
  %14634 = sub i64 %14633, 6948175065419523814
  %14635 = add i64 %563, -370444553629970480
  %14636 = add i64 3935533121684027608, %563
  %14637 = add i64 %14636, -4305977675313998088
  %14638 = or i64 %1535, -1674453309472595738
  %14639 = xor i64 %1535, -1
  %14640 = and i64 %14639, -1710312375761726144
  %14641 = and i64 %1535, 1710312375761726143
  %14642 = or i64 %14640, %14641
  %14643 = xor i64 36198545336579494, %14642
  %14644 = xor i64 %1535, -1
  %14645 = or i64 1674453309472595737, %14644
  %14646 = xor i64 %14645, -1
  %14647 = and i64 %14646, -1
  %14648 = or i64 %14643, %14647
  %14649 = xor i64 %14634, 7205199284787778321
  %14650 = xor i64 %14649, %14637
  %14651 = xor i64 %14650, %14648
  %14652 = xor i64 %14651, %14638
  %14653 = xor i64 %14652, %14632
  %14654 = xor i64 %14653, %14635
  %14655 = or i64 %1653, -3301744861404175056
  %14656 = and i64 -3301744861404175056, %1653
  %14657 = xor i64 -3301744861404175056, %1653
  %14658 = or i64 %14656, %14657
  %14659 = add i64 %391, -7105506700334532677
  %14660 = xor i64 -7105506700334532677, %391
  %14661 = and i64 -7105506700334532677, %391
  %14662 = mul i64 2, %14661
  %14663 = add i64 %14660, %14662
  %14664 = or i64 %555, 4648740577591930951
  %14665 = xor i64 %555, -1
  %14666 = and i64 %14665, 1988243796221603574
  %14667 = and i64 %555, -1988243796221603575
  %14668 = or i64 %14666, %14667
  %14669 = xor i64 6562885804335963825, %14668
  %14670 = xor i64 %555, -1
  %14671 = or i64 -4648740577591930952, %14670
  %14672 = xor i64 %14671, -1
  %14673 = and i64 %14672, -1
  %14674 = or i64 %14669, %14673
  %14675 = xor i64 %14663, 0
  %14676 = xor i64 %14675, %14674
  %14677 = xor i64 %14676, %14658
  %14678 = xor i64 %14677, %14655
  %14679 = xor i64 %14678, %14659
  %14680 = xor i64 %14679, %14664
  %14681 = mul i64 %14654, %14680
  %14682 = trunc i64 %14681 to i1
  store i1 %14682, i1* %94, align 1
  ret void

newFuncRoot37:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14683 = alloca i64, align 8
  store i64* %14683, i64** %.reg2mem939, align 8
  %14684 = alloca i64, align 8
  %14685 = and i64 %1452, -5224567720501134226
  %14686 = or i64 5224567720501134225, %1452
  %14687 = sub i64 %14686, 5224567720501134225
  %14688 = and i64 %278, -6186175914113410575
  %14689 = xor i64 %278, -1
  %14690 = or i64 6186175914113410574, %14689
  %14691 = xor i64 %14690, -1
  %14692 = and i64 %14691, -1
  %14693 = or i64 %452, 582170143593911014
  %14694 = and i64 582170143593911014, %452
  %14695 = xor i64 582170143593911014, %452
  %14696 = or i64 %14694, %14695
  %14697 = xor i64 %14687, %14685
  %14698 = xor i64 %14697, -5270345581974015615
  %14699 = xor i64 %14698, %14692
  %14700 = xor i64 %14699, %14693
  %14701 = xor i64 %14700, %14688
  %14702 = xor i64 %14701, %14696
  %14703 = and i64 %446, 1127656992360417821
  %14704 = or i64 -1127656992360417822, %446
  %14705 = sub i64 %14704, -1127656992360417822
  %14706 = add i64 %1238, 2455621141271898035
  %14707 = xor i64 2455621141271898035, %1238
  %14708 = and i64 2455621141271898035, %1238
  %14709 = mul i64 2, %14708
  %14710 = add i64 %14707, %14709
  %14711 = sext i32 %60 to i64
  %14712 = and i64 %14711, -7574753259715271252
  %14713 = xor i64 %14711, -1
  %14714 = or i64 7574753259715271251, %14713
  %14715 = xor i64 %14714, -1
  %14716 = and i64 %14715, -1
  %14717 = xor i64 0, %14706
  %14718 = xor i64 %14717, %14710
  %14719 = xor i64 %14718, %14716
  %14720 = xor i64 %14719, %14703
  %14721 = xor i64 %14720, %14705
  %14722 = xor i64 %14721, %14712
  %14723 = mul i64 %14702, %14722
  %14724 = trunc i64 %14723 to i1
  %14725 = add i64 %778, -7428553638871561254
  %14726 = add i64 5564675265517157550, %778
  %14727 = sub i64 %14726, -5453515169320832812
  %14728 = add i64 %1657, 2394104248119122175
  %14729 = and i64 2394104248119122175, %1657
  %14730 = or i64 2394104248119122175, %1657
  %14731 = add i64 %14729, %14730
  %14732 = xor i64 %14731, -2689872344903965973
  %14733 = xor i64 %14732, %14725
  %14734 = xor i64 %14733, %14727
  %14735 = xor i64 %14734, %14728
  %14736 = add i64 %1300, 8998318430832609451
  %14737 = add i64 2508901720915205653, %1300
  %14738 = add i64 %14737, 6489416709917403798
  %14739 = or i64 %1302, 5891886622205604133
  %14740 = and i64 5891886622205604133, %1302
  %14741 = xor i64 5891886622205604133, %1302
  %14742 = or i64 %14740, %14741
  %14743 = or i64 %1517, -8568949154094492421
  %14744 = xor i64 %1517, -1
  %14745 = and i64 %14744, -673786086878554669
  %14746 = and i64 %1517, 673786086878554668
  %14747 = or i64 %14745, %14746
  %14748 = xor i64 9201629446590726440, %14747
  %14749 = xor i64 %1517, -1
  %14750 = or i64 8568949154094492420, %14749
  %14751 = xor i64 %14750, -1
  %14752 = and i64 %14751, -1
  %14753 = or i64 %14748, %14752
  %14754 = xor i64 %14736, %14753
  %14755 = xor i64 %14754, %14739
  %14756 = xor i64 %14755, 0
  %14757 = xor i64 %14756, %14743
  %14758 = xor i64 %14757, %14738
  %14759 = xor i64 %14758, %14742
  %14760 = mul i64 %14735, %14759
  %14761 = or i64 %1519, -4127039366592044587
  %14762 = xor i64 %1519, -1
  %14763 = and i64 -4127039366592044587, %14762
  %14764 = add i64 %14763, %1519
  %14765 = and i64 %772, 1685098264230730893
  %14766 = xor i64 %772, -1
  %14767 = or i64 -1685098264230730894, %14766
  %14768 = xor i64 %14767, -1
  %14769 = and i64 %14768, -1
  %14770 = and i64 %551, -77088852596895828
  %14771 = xor i64 %551, -1
  %14772 = or i64 77088852596895827, %14771
  %14773 = xor i64 %14772, -1
  %14774 = and i64 %14773, -1
  %14775 = xor i64 792359406013458361, %14774
  %14776 = xor i64 %14775, %14765
  %14777 = xor i64 %14776, %14769
  %14778 = xor i64 %14777, %14764
  %14779 = xor i64 %14778, %14761
  %14780 = xor i64 %14779, %14770
  %14781 = and i64 %1503, -1268853113195481294
  %14782 = or i64 1268853113195481293, %1503
  %14783 = sub i64 %14782, 1268853113195481293
  %14784 = add i64 %1493, -3742784814176876041
  %14785 = sub i64 0, %1493
  %14786 = add i64 3742784814176876041, %14785
  %14787 = sub i64 0, %14786
  %14788 = and i64 %1586, 7295617893898793449
  %14789 = or i64 -7295617893898793450, %1586
  %14790 = sub i64 %14789, -7295617893898793450
  %14791 = xor i64 %14788, %14790
  %14792 = xor i64 %14791, %14781
  %14793 = xor i64 %14792, 0
  %14794 = xor i64 %14793, %14783
  %14795 = xor i64 %14794, %14784
  %14796 = xor i64 %14795, %14787
  %14797 = mul i64 %14780, %14796
  %14798 = trunc i64 %14797 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %14684, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 %14724, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 %14760, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 %14798, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %14799 = load i64, i64* %14684, align 8
  %14800 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable13584920069806577051, i32 0, i64 %14799
  store i8* bitcast (i1 (i64, i64, i1*)* @render.extracted.8.extracted to i8*), i8** %14800, align 8
  %.reload595 = load i8**, i8*** %.reg2mem594, align 8
  %14801 = load i8*, i8** %.reload595, align 8
  indirectbr i8* %14801, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"161":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %14802 = mul i64 96, 48
  %14803 = icmp eq i64 %95, 1761
  store i1 %14803, i1* %98, align 1
  %14804 = sub i64 50, 118
  %.reload598 = load i8**, i8*** %.reg2mem597, align 8
  %14805 = load i8*, i8** %.reload598, align 8
  indirectbr i8* %14805, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl38:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload941 = load i64*, i64** %.reg2mem939, align 8
  store i64 1996855465712537074, i64* %.reload941, align 8
  %14806 = and i64 %101, 8613475638451453310
  %14807 = xor i64 %101, -1
  %14808 = xor i64 8613475638451453310, %14807
  %14809 = and i64 %14808, 8613475638451453310
  %14810 = add i64 %794, 966346210992153191
  %14811 = add i64 9202799926290973686, %794
  %14812 = add i64 %14811, -8236453715298820495
  %14813 = xor i64 %14806, %14812
  %14814 = xor i64 %14813, %14810
  %14815 = xor i64 %14814, %14809
  %14816 = xor i64 %14815, 107342398058513719
  %14817 = add i64 %1450, -8448476824628708533
  %14818 = add i64 -7858133217443692877, %1450
  %14819 = add i64 %14818, -590343607185015656
  %14820 = or i64 %920, 1469874684121131558
  %14821 = and i64 1469874684121131558, %920
  %14822 = xor i64 1469874684121131558, %920
  %14823 = or i64 %14821, %14822
  %14824 = xor i64 %14819, %14823
  %14825 = xor i64 %14824, %14820
  %14826 = xor i64 %14825, 2939819241863053447
  %14827 = xor i64 %14826, %14817
  %14828 = mul i64 %14816, %14827
  %14829 = trunc i64 %14828 to i32
  %14830 = alloca i8**, i32 %14829, align 8
  %.reload940 = load i64*, i64** %.reg2mem939, align 8
  %14831 = or i64 %996, -3871153393980881314
  %14832 = and i64 -3871153393980881314, %996
  %14833 = xor i64 -3871153393980881314, %996
  %14834 = or i64 %14832, %14833
  %14835 = sext i32 %0 to i64
  %14836 = add i64 %14835, -2388737065004149197
  %14837 = add i64 85333950495052845, %14835
  %14838 = sub i64 %14837, 2474071015499202042
  %14839 = xor i64 %14838, %14836
  %14840 = xor i64 %14839, %14834
  %14841 = xor i64 %14840, -7636043758216744445
  %14842 = xor i64 %14841, %14831
  %14843 = add i64 %278, -7830624365762295585
  %14844 = and i64 -7830624365762295585, %278
  %14845 = or i64 -7830624365762295585, %278
  %14846 = add i64 %14844, %14845
  %14847 = add i64 %1400, 5371817039779623805
  %14848 = add i64 6480613958002777829, %1400
  %14849 = add i64 %14848, -1108796918223154024
  %14850 = xor i64 %14849, -2328876241518181032
  %14851 = xor i64 %14850, %14843
  %14852 = xor i64 %14851, %14847
  %14853 = xor i64 %14852, %14846
  %14854 = mul i64 %14842, %14853
  %14855 = trunc i64 %14854 to i32
  %14856 = and i64 %1302, 7494871349101923876
  %14857 = or i64 -7494871349101923877, %1302
  %14858 = sub i64 %14857, -7494871349101923877
  %14859 = add i64 %563, 7797450260628519457
  %14860 = add i64 -4577152562244499773, %563
  %14861 = add i64 %14860, -6072141250836532386
  %14862 = and i64 %910, -482448373894137950
  %14863 = xor i64 %910, -1
  %14864 = or i64 482448373894137949, %14863
  %14865 = xor i64 %14864, -1
  %14866 = and i64 %14865, -1
  %14867 = xor i64 %14861, %14862
  %14868 = xor i64 %14867, -2733487230070822585
  %14869 = xor i64 %14868, %14866
  %14870 = xor i64 %14869, %14859
  %14871 = xor i64 %14870, %14858
  %14872 = xor i64 %14871, %14856
  %14873 = or i64 %91, -6644051291968720113
  %14874 = xor i64 %91, -1
  %14875 = and i64 -6644051291968720113, %14874
  %14876 = add i64 %14875, %91
  %14877 = add i64 %395, 2457568913133775569
  %14878 = sub i64 0, %395
  %14879 = add i64 -2457568913133775569, %14878
  %14880 = sub i64 0, %14879
  %14881 = xor i64 %14876, %14880
  %14882 = xor i64 %14881, %14873
  %14883 = xor i64 %14882, %14877
  %14884 = xor i64 %14883, 0
  %14885 = mul i64 %14872, %14884
  %14886 = trunc i64 %14885 to i1
  %14887 = and i64 %1228, 5084187940172471809
  %14888 = or i64 -5084187940172471810, %1228
  %14889 = sub i64 %14888, -5084187940172471810
  %14890 = or i64 %553, -2162801932357170047
  %14891 = xor i64 %553, -1
  %14892 = and i64 -2162801932357170047, %14891
  %14893 = add i64 %14892, %553
  %14894 = add i64 %1236, -649497245933003560
  %14895 = add i64 1211105639557604654, %1236
  %14896 = add i64 %14895, -1860602885490608214
  %14897 = xor i64 -5855781286728140319, %14889
  %14898 = xor i64 %14897, %14896
  %14899 = xor i64 %14898, %14893
  %14900 = xor i64 %14899, %14887
  %14901 = xor i64 %14900, %14890
  %14902 = xor i64 %14901, %14894
  %14903 = sext i32 %59 to i64
  %14904 = and i64 %14903, 2277701118852545630
  %14905 = xor i64 %14903, -1
  %14906 = or i64 -2277701118852545631, %14905
  %14907 = xor i64 %14906, -1
  %14908 = and i64 %14907, -1
  %14909 = add i64 %1074, -887484348994609324
  %14910 = sub i64 0, %1074
  %14911 = sub i64 -887484348994609324, %14910
  %14912 = xor i64 %14908, %14911
  %14913 = xor i64 %14912, %14909
  %14914 = xor i64 %14913, 0
  %14915 = xor i64 %14914, %14904
  %14916 = mul i64 %14902, %14915
  %14917 = trunc i64 %14916 to i32
  %14918 = or i64 %290, -4276190235584223740
  %14919 = xor i64 %290, -1
  %14920 = and i64 -4276190235584223740, %14919
  %14921 = add i64 %14920, %290
  %14922 = and i64 %996, -5451213461498990503
  %14923 = xor i64 %996, -1
  %14924 = xor i64 -5451213461498990503, %14923
  %14925 = and i64 %14924, -5451213461498990503
  %14926 = or i64 %393, 586228880133583990
  %14927 = xor i64 %393, -1
  %14928 = and i64 586228880133583990, %14927
  %14929 = add i64 %14928, %393
  %14930 = xor i64 %14926, 5956900520262063965
  %14931 = xor i64 %14930, %14925
  %14932 = xor i64 %14931, %14929
  %14933 = xor i64 %14932, %14922
  %14934 = xor i64 %14933, %14918
  %14935 = xor i64 %14934, %14921
  %14936 = and i64 %563, 971078946635900455
  %14937 = or i64 -971078946635900456, %563
  %14938 = sub i64 %14937, -971078946635900456
  %14939 = and i64 %1074, -1377545003707190540
  %14940 = xor i64 %1074, -1
  %14941 = or i64 1377545003707190539, %14940
  %14942 = xor i64 %14941, -1
  %14943 = and i64 %14942, -1
  %14944 = or i64 %1501, 5554878194255351050
  %14945 = xor i64 %1501, -1
  %14946 = and i64 %14945, 1170181108536743789
  %14947 = and i64 %1501, -1170181108536743790
  %14948 = or i64 %14946, %14947
  %14949 = xor i64 6713659565123295847, %14948
  %14950 = xor i64 %1501, -1
  %14951 = or i64 -5554878194255351051, %14950
  %14952 = xor i64 %14951, -1
  %14953 = and i64 %14952, -1
  %14954 = or i64 %14949, %14953
  %14955 = xor i64 %14944, %14943
  %14956 = xor i64 %14955, %14954
  %14957 = xor i64 %14956, %14938
  %14958 = xor i64 %14957, %14936
  %14959 = xor i64 %14958, %14939
  %14960 = xor i64 %14959, 0
  %14961 = mul i64 %14935, %14960
  %14962 = trunc i64 %14961 to i1
  %14963 = and i64 %1511, 5366604009857890071
  %14964 = or i64 -5366604009857890072, %1511
  %14965 = sub i64 %14964, -5366604009857890072
  %14966 = add i64 %668, -796190763674526616
  %14967 = add i64 -4866015552664709338, %668
  %14968 = add i64 %14967, 4069824788990182722
  %14969 = xor i64 %14968, %14965
  %14970 = xor i64 %14969, -5740958506320395693
  %14971 = xor i64 %14970, %14963
  %14972 = xor i64 %14971, %14966
  %14973 = and i64 %553, 821848633032288275
  %14974 = xor i64 %553, -1
  %14975 = xor i64 821848633032288275, %14974
  %14976 = and i64 %14975, 821848633032288275
  %14977 = or i64 %224, -7768757371429797925
  %14978 = xor i64 %224, -1
  %14979 = and i64 -7768757371429797925, %14978
  %14980 = add i64 %14979, %224
  %14981 = xor i64 0, %14973
  %14982 = xor i64 %14981, %14976
  %14983 = xor i64 %14982, %14980
  %14984 = xor i64 %14983, %14977
  %14985 = mul i64 %14972, %14984
  %14986 = trunc i64 %14985 to i32
  %14987 = or i64 %228, 6870452038856483349
  %14988 = and i64 6870452038856483349, %228
  %14989 = xor i64 6870452038856483349, %228
  %14990 = or i64 %14988, %14989
  %14991 = add i64 %831, 66345031344613410
  %14992 = sub i64 0, %831
  %14993 = add i64 -66345031344613410, %14992
  %14994 = sub i64 0, %14993
  %14995 = or i64 %347, -3225301670115155526
  %14996 = xor i64 %347, -1
  %14997 = and i64 -3225301670115155526, %14996
  %14998 = add i64 %14997, %347
  %14999 = xor i64 %14994, %14990
  %15000 = xor i64 %14999, %14987
  %15001 = xor i64 %15000, %14991
  %15002 = xor i64 %15001, -8094409975853302867
  %15003 = xor i64 %15002, %14995
  %15004 = xor i64 %15003, %14998
  %15005 = add i64 %670, 6627198020693187514
  %15006 = add i64 4918130769238671961, %670
  %15007 = sub i64 %15006, -1709067251454515553
  %15008 = add i64 %391, 8127997706850047699
  %15009 = add i64 6222141292213010798, %391
  %15010 = add i64 %15009, 1905856414637036901
  %15011 = xor i64 %15005, 0
  %15012 = xor i64 %15011, %15007
  %15013 = xor i64 %15012, %15010
  %15014 = xor i64 %15013, %15008
  %15015 = mul i64 %15004, %15014
  %15016 = trunc i64 %15015 to i1
  %15017 = add i64 %1537, 5064305597388239228
  %15018 = add i64 -7053768359622485194, %1537
  %15019 = add i64 %15018, -6328670116698827194
  %15020 = and i64 %994, 4476037353264607014
  %15021 = xor i64 %994, -1
  %15022 = or i64 -4476037353264607015, %15021
  %15023 = xor i64 %15022, -1
  %15024 = and i64 %15023, -1
  %15025 = and i64 %1655, -2580877770641436760
  %15026 = xor i64 %1655, -1
  %15027 = xor i64 -2580877770641436760, %15026
  %15028 = and i64 %15027, -2580877770641436760
  %15029 = xor i64 6852142972248140773, %15019
  %15030 = xor i64 %15029, %15024
  %15031 = xor i64 %15030, %15025
  %15032 = xor i64 %15031, %15020
  %15033 = xor i64 %15032, %15028
  %15034 = xor i64 %15033, %15017
  %15035 = add i64 %1185, -194292608412075882
  %15036 = xor i64 -194292608412075882, %1185
  %15037 = and i64 -194292608412075882, %1185
  %15038 = mul i64 2, %15037
  %15039 = add i64 %15036, %15038
  %15040 = add i64 %543, -8583544681651177950
  %15041 = add i64 -7215006026747804544, %543
  %15042 = add i64 %15041, -1368538654903373406
  %15043 = xor i64 %15039, %15042
  %15044 = xor i64 %15043, 0
  %15045 = xor i64 %15044, %15040
  %15046 = xor i64 %15045, %15035
  %15047 = mul i64 %15034, %15046
  %15048 = trunc i64 %15047 to i1
  call void @"9941920946239825184"(i32 %14855, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* %.reload940, i8*** %14830, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 %14886, i1* null, i32 %14917, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 %14962, i1 false, i1 false, i32 0, i32 %14986, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 %15016, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 %15048, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %15049 = load i8**, i8*** %14830, align 8
  %15050 = load i8*, i8** %15049, align 8
  %15051 = bitcast i8* %15050 to i1 (i64, i64, i1*)*
  %targetBlock39 = call i1 %15051(i64 %96, i64 %97, i1* %99)
  %.reload601 = load i8**, i8*** %.reg2mem600, align 8
  %.reload604 = load i8**, i8*** %.reg2mem603, align 8
  %15052 = select i1 %targetBlock39, i8** %.reload601, i8** %.reload604
  %15053 = load i8*, i8** %15052, align 8
  indirectbr i8* %15053, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub40:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %100, align 1
  ret void

.exitStub2:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %100, align 1
  ret void

newFuncRoot41:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload610 = load i8**, i8*** %.reg2mem609, align 8
  %15054 = load i8*, i8** %.reload610, align 8
  indirectbr i8* %15054, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.split42:                                         ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15055 = or i64 %1228, 1014500891054757902
  %15056 = xor i64 %1228, -1
  %15057 = and i64 %15056, 3924348957179042241
  %15058 = and i64 %1228, -3924348957179042242
  %15059 = or i64 %15057, %15058
  %15060 = xor i64 4062860094704320975, %15059
  %15061 = xor i64 %1228, -1
  %15062 = or i64 -1014500891054757903, %15061
  %15063 = xor i64 %15062, -1
  %15064 = and i64 %15063, -1
  %15065 = or i64 %15060, %15064
  %15066 = add i64 %391, 8483363808596116022
  %15067 = sub i64 0, %391
  %15068 = add i64 -8483363808596116022, %15067
  %15069 = sub i64 0, %15068
  %15070 = and i64 %780, -5184510677322782814
  %15071 = xor i64 %780, -1
  %15072 = or i64 5184510677322782813, %15071
  %15073 = xor i64 %15072, -1
  %15074 = and i64 %15073, -1
  %15075 = xor i64 %15069, 5916584091523834827
  %15076 = xor i64 %15075, %15065
  %15077 = xor i64 %15076, %15055
  %15078 = xor i64 %15077, %15066
  %15079 = xor i64 %15078, %15070
  %15080 = xor i64 %15079, %15074
  %15081 = or i64 %385, 472006949461448246
  %15082 = and i64 472006949461448246, %385
  %15083 = xor i64 472006949461448246, %385
  %15084 = or i64 %15082, %15083
  %15085 = or i64 %1499, -8607311347011702143
  %15086 = xor i64 %1499, -1
  %15087 = and i64 -8607311347011702143, %15086
  %15088 = add i64 %15087, %1499
  %15089 = and i64 %1290, -898747599951317789
  %15090 = or i64 898747599951317788, %1290
  %15091 = sub i64 %15090, 898747599951317788
  %15092 = xor i64 %15088, %15089
  %15093 = xor i64 %15092, %15084
  %15094 = xor i64 %15093, %15085
  %15095 = xor i64 %15094, %15081
  %15096 = xor i64 %15095, %15091
  %15097 = xor i64 %15096, 8994051384596124614
  %15098 = mul i64 %15080, %15097
  %15099 = srem i64 %101, %15098
  store i64 %15099, i64* %102, align 8
  %15100 = and i64 %780, 4400046764804139886
  %15101 = xor i64 %780, -1
  %15102 = or i64 -4400046764804139887, %15101
  %15103 = xor i64 %15102, -1
  %15104 = and i64 %15103, -1
  %15105 = or i64 %1129, -8054629953592163349
  %15106 = xor i64 %1129, -1
  %15107 = and i64 %15106, -8388462682157397839
  %15108 = and i64 %1129, 8388462682157397838
  %15109 = or i64 %15107, %15108
  %15110 = xor i64 1994537293939493722, %15109
  %15111 = xor i64 %1129, -1
  %15112 = or i64 8054629953592163348, %15111
  %15113 = xor i64 %15112, -1
  %15114 = and i64 %15113, -1
  %15115 = or i64 %15110, %15114
  %15116 = xor i64 %15104, %15100
  %15117 = xor i64 %15116, -7762157581181260169
  %15118 = xor i64 %15117, %15105
  %15119 = xor i64 %15118, %15115
  %15120 = add i64 %234, -8378825694816321371
  %15121 = and i64 -8378825694816321371, %234
  %15122 = or i64 -8378825694816321371, %234
  %15123 = add i64 %15121, %15122
  %15124 = add i64 %280, 5209935206457168958
  %15125 = add i64 -9196467604956336460, %280
  %15126 = add i64 %15125, -4040341262296046198
  %15127 = or i64 %387, 4115666019138500343
  %15128 = and i64 4115666019138500343, %387
  %15129 = xor i64 4115666019138500343, %387
  %15130 = or i64 %15128, %15129
  %15131 = xor i64 %15130, %15123
  %15132 = xor i64 %15131, %15126
  %15133 = xor i64 %15132, %15120
  %15134 = xor i64 %15133, 0
  %15135 = xor i64 %15134, %15124
  %15136 = xor i64 %15135, %15127
  %15137 = mul i64 %15119, %15136
  %15138 = icmp eq i64 %15099, %15137
  %.reload613 = load i8**, i8*** %.reg2mem612, align 8
  %.reload616 = load i8**, i8*** %.reg2mem615, align 8
  %15139 = select i1 %15138, i8** %.reload613, i8** %.reload616
  %15140 = load i8*, i8** %15139, align 8
  indirectbr i8* %15140, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub43:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15141 = and i64 %450, 8614960956518102306
  %15142 = xor i64 %450, -1
  %15143 = xor i64 8614960956518102306, %15142
  %15144 = and i64 %15143, 8614960956518102306
  %15145 = and i64 %452, -116182538782953023
  %15146 = or i64 116182538782953022, %452
  %15147 = sub i64 %15146, 116182538782953022
  %15148 = xor i64 %15147, 1442853608307978377
  %15149 = xor i64 %15148, %15141
  %15150 = xor i64 %15149, %15145
  %15151 = xor i64 %15150, %15144
  %15152 = add i64 %1582, 3828022902550509143
  %15153 = and i64 3828022902550509143, %1582
  %15154 = or i64 3828022902550509143, %1582
  %15155 = add i64 %15153, %15154
  %15156 = add i64 %234, 4558946655793023106
  %15157 = and i64 4558946655793023106, %234
  %15158 = or i64 4558946655793023106, %234
  %15159 = add i64 %15157, %15158
  %15160 = or i64 %1501, 154824894205449977
  %15161 = xor i64 %1501, -1
  %15162 = and i64 154824894205449977, %15161
  %15163 = add i64 %15162, %1501
  %15164 = xor i64 %15159, %15160
  %15165 = xor i64 %15164, 7412697011656721849
  %15166 = xor i64 %15165, %15156
  %15167 = xor i64 %15166, %15152
  %15168 = xor i64 %15167, %15163
  %15169 = xor i64 %15168, %15155
  %15170 = mul i64 %15151, %15169
  %15171 = trunc i64 %15170 to i1
  store i1 %15171, i1* %103, align 1
  ret void

.exitStub144:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %103, align 1
  ret void

newFuncRoot45:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload622 = load i8**, i8*** %.reg2mem621, align 8
  %15172 = load i8*, i8** %.reload622, align 8
  indirectbr i8* %15172, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.split46:                                         ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15173 = icmp eq i8* %104, null
  %15174 = icmp eq float* %105, null
  %15175 = select i1 %15173, i1 true, i1 %15174
  %.reload625 = load i8**, i8*** %.reg2mem624, align 8
  %.reload628 = load i8**, i8*** %.reg2mem627, align 8
  %15176 = select i1 %15175, i8** %.reload625, i8** %.reload628
  %15177 = load i8*, i8** %15176, align 8
  indirectbr i8* %15177, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub47:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15178 = or i64 %1643, 9052351198617577897
  %15179 = xor i64 %1643, -1
  %15180 = and i64 %15179, 327671587319555740
  %15181 = and i64 %1643, -327671587319555741
  %15182 = or i64 %15180, %15181
  %15183 = xor i64 8731484510774169397, %15182
  %15184 = xor i64 %1643, -1
  %15185 = or i64 -9052351198617577898, %15184
  %15186 = xor i64 %15185, -1
  %15187 = and i64 %15186, -1
  %15188 = or i64 %15183, %15187
  %15189 = add i64 %1527, 3099027344118962258
  %15190 = and i64 3099027344118962258, %1527
  %15191 = or i64 3099027344118962258, %1527
  %15192 = add i64 %15190, %15191
  %15193 = and i64 %1236, -8687731688708866717
  %15194 = xor i64 %1236, -1
  %15195 = xor i64 -8687731688708866717, %15194
  %15196 = and i64 %15195, -8687731688708866717
  %15197 = xor i64 %15192, %15178
  %15198 = xor i64 %15197, %15188
  %15199 = xor i64 %15198, -7141618215844690523
  %15200 = xor i64 %15199, %15196
  %15201 = xor i64 %15200, %15193
  %15202 = xor i64 %15201, %15189
  %15203 = add i64 %341, -5831936362456009510
  %15204 = add i64 -8401704682631338572, %341
  %15205 = add i64 %15204, 2569768320175329062
  %15206 = and i64 %555, -1049480066892963200
  %15207 = xor i64 %555, -1
  %15208 = or i64 1049480066892963199, %15207
  %15209 = xor i64 %15208, -1
  %15210 = and i64 %15209, -1
  %15211 = xor i64 -1820220080089261523, %15206
  %15212 = xor i64 %15211, %15203
  %15213 = xor i64 %15212, %15205
  %15214 = xor i64 %15213, %15210
  %15215 = mul i64 %15202, %15214
  %15216 = trunc i64 %15215 to i1
  store i1 %15216, i1* %106, align 1
  ret void

.exitStub148:                                     ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %106, align 1
  ret void

newFuncRoot49:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload634 = load i8**, i8*** %.reg2mem633, align 8
  %15217 = load i8*, i8** %.reload634, align 8
  indirectbr i8* %15217, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"174":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15218 = xor i1 %107, true
  %15219 = and i1 %15218, true
  %15220 = and i1 %107, false
  %15221 = or i1 %15219, %15220
  %15222 = xor i1 %108, true
  %15223 = xor i1 %15221, true
  %15224 = xor i1 %15222, %15223
  %15225 = xor i1 %109, true
  %15226 = xor i1 %107, false
  %15227 = xor i1 %15226, true
  %15228 = or i1 %15225, %15227
  %15229 = xor i1 %15228, true
  %15230 = and i1 %15229, true
  %15231 = or i1 %15224, %15230
  store i1 %15231, i1* %110, align 1
  %15232 = xor i1 %111, true
  %15233 = or i64 %555, 1606823256960096229
  %15234 = xor i64 %555, -1
  %15235 = and i64 1606823256960096229, %15234
  %15236 = add i64 %15235, %555
  %15237 = and i64 %71, 9059863871741613041
  %15238 = xor i64 %71, -1
  %15239 = or i64 -9059863871741613042, %15238
  %15240 = xor i64 %15239, -1
  %15241 = and i64 %15240, -1
  %15242 = xor i64 -2472228562210596873, %15233
  %15243 = xor i64 %15242, %15237
  %15244 = xor i64 %15243, %15241
  %15245 = xor i64 %15244, %15236
  %15246 = and i64 %672, -6524666186688865598
  %15247 = xor i64 %672, -1
  %15248 = or i64 6524666186688865597, %15247
  %15249 = xor i64 %15248, -1
  %15250 = and i64 %15249, -1
  %15251 = or i64 %1657, 5988983582703145402
  %15252 = xor i64 %1657, -1
  %15253 = and i64 %15252, 8607091565215299842
  %15254 = and i64 %1657, -8607091565215299843
  %15255 = or i64 %15253, %15254
  %15256 = xor i64 2625507303851419832, %15255
  %15257 = xor i64 %1657, -1
  %15258 = or i64 -5988983582703145403, %15257
  %15259 = xor i64 %15258, -1
  %15260 = and i64 %15259, -1
  %15261 = or i64 %15256, %15260
  %15262 = and i64 %1513, -3360053852571835031
  %15263 = xor i64 %1513, -1
  %15264 = or i64 3360053852571835030, %15263
  %15265 = xor i64 %15264, -1
  %15266 = and i64 %15265, -1
  %15267 = xor i64 %15262, %15246
  %15268 = xor i64 %15267, %15250
  %15269 = xor i64 %15268, %15261
  %15270 = xor i64 %15269, %15251
  %15271 = xor i64 %15270, %15266
  %15272 = xor i64 %15271, 0
  %15273 = mul i64 %15245, %15272
  %15274 = trunc i64 %15273 to i1
  %15275 = and i1 %15232, %15274
  %15276 = and i1 %111, true
  %15277 = or i1 %15275, %15276
  %15278 = xor i1 %15231, true
  %15279 = and i1 %15278, false
  %15280 = and i1 %15231, true
  %15281 = or i1 %15279, %15280
  %15282 = xor i1 %15277, %15281
  %15283 = xor i1 %111, true
  %15284 = xor i1 %15231, true
  %15285 = or i1 %15283, %15284
  %15286 = xor i1 %15285, true
  %15287 = and i1 %15286, true
  %15288 = or i1 %15282, %15287
  store i1 %15288, i1* %112, align 1
  %15289 = xor i1 %15231, true
  %15290 = xor i1 %111, %15289
  %15291 = and i1 %15290, %111
  store i1 %15291, i1* %113, align 1
  %15292 = sub i1 %15288, %15291
  store i1 %15292, i1* %114, align 1
  %15293 = xor i1 %115, false
  %15294 = xor i1 %15293, true
  store i1 %15294, i1* %116, align 1
  %15295 = sext i32 %92 to i64
  %15296 = and i64 %15295, 7504411817797516074
  %15297 = or i64 -7504411817797516075, %15295
  %15298 = sub i64 %15297, -7504411817797516075
  %15299 = or i64 %1076, -8962877167947029254
  %15300 = and i64 -8962877167947029254, %1076
  %15301 = xor i64 -8962877167947029254, %1076
  %15302 = or i64 %15300, %15301
  %15303 = xor i64 935693476839729631, %15298
  %15304 = xor i64 %15303, %15299
  %15305 = xor i64 %15304, %15302
  %15306 = xor i64 %15305, %15296
  %15307 = and i64 %1501, 8443887180277629455
  %15308 = xor i64 %1501, -1
  %15309 = xor i64 8443887180277629455, %15308
  %15310 = and i64 %15309, 8443887180277629455
  %15311 = or i64 %101, 742525293230062363
  %15312 = and i64 742525293230062363, %101
  %15313 = xor i64 742525293230062363, %101
  %15314 = or i64 %15312, %15313
  %15315 = xor i64 %15314, %15311
  %15316 = xor i64 %15315, 4292666321974350367
  %15317 = xor i64 %15316, %15307
  %15318 = xor i64 %15317, %15310
  %15319 = mul i64 %15306, %15318
  %15320 = trunc i64 %15319 to i1
  %15321 = xor i1 %117, %15320
  store i1 %15321, i1* %118, align 1
  %15322 = or i1 %15294, %15321
  store i1 %15322, i1* %119, align 1
  %15323 = or i1 %15322, true
  store i1 %15323, i1* %120, align 1
  %15324 = and i1 %15322, true
  store i1 %15324, i1* %121, align 1
  %15325 = sub i1 %15323, %15324
  store i1 %15325, i1* %122, align 1
  %15326 = xor i1 %15325, true
  %15327 = or i64 %383, -1757296188450680510
  %15328 = xor i64 %383, -1
  %15329 = and i64 %15328, 7413363035583502308
  %15330 = and i64 %383, -7413363035583502309
  %15331 = or i64 %15329, %15330
  %15332 = xor i64 -9116031069906762074, %15331
  %15333 = xor i64 %383, -1
  %15334 = or i64 1757296188450680509, %15333
  %15335 = xor i64 %15334, -1
  %15336 = and i64 %15335, -1
  %15337 = or i64 %15332, %15336
  %15338 = sext i32 %49 to i64
  %15339 = and i64 %15338, -8157449743713995651
  %15340 = or i64 8157449743713995650, %15338
  %15341 = sub i64 %15340, 8157449743713995650
  %15342 = xor i64 %15339, %15341
  %15343 = xor i64 %15342, %15337
  %15344 = xor i64 %15343, %15327
  %15345 = xor i64 %15344, -2037858961514522409
  %15346 = or i64 %448, -5518903346375605834
  %15347 = xor i64 %448, -1
  %15348 = and i64 %15347, -2718290489881162144
  %15349 = and i64 %448, 2718290489881162143
  %15350 = or i64 %15348, %15349
  %15351 = xor i64 7579095922779279318, %15350
  %15352 = xor i64 %448, -1
  %15353 = or i64 5518903346375605833, %15352
  %15354 = xor i64 %15353, -1
  %15355 = and i64 %15354, -1
  %15356 = or i64 %15351, %15355
  %15357 = and i64 %1141, -2258054225048938189
  %15358 = or i64 2258054225048938188, %1141
  %15359 = sub i64 %15358, 2258054225048938188
  %15360 = or i64 %1402, 2618818584969574234
  %15361 = xor i64 %1402, -1
  %15362 = and i64 %15361, -6678759839233175123
  %15363 = and i64 %1402, 6678759839233175122
  %15364 = or i64 %15362, %15363
  %15365 = xor i64 -8716806211928725769, %15364
  %15366 = xor i64 %1402, -1
  %15367 = or i64 -2618818584969574235, %15366
  %15368 = xor i64 %15367, -1
  %15369 = and i64 %15368, -1
  %15370 = or i64 %15365, %15369
  %15371 = xor i64 %15370, 0
  %15372 = xor i64 %15371, %15360
  %15373 = xor i64 %15372, %15357
  %15374 = xor i64 %15373, %15359
  %15375 = xor i64 %15374, %15346
  %15376 = xor i64 %15375, %15356
  %15377 = mul i64 %15345, %15376
  %15378 = trunc i64 %15377 to i1
  %15379 = and i1 %15326, %15378
  %15380 = and i1 %15325, true
  %15381 = or i1 %15379, %15380
  store i1 %15381, i1* %123, align 1
  %15382 = xor i1 %15325, true
  %15383 = xor i1 %15381, %15382
  %15384 = and i1 %15383, %15381
  store i1 %15384, i1* %124, align 1
  %15385 = xor i1 %15384, true
  %15386 = and i1 %15292, %15385
  %15387 = add i1 %15386, %15384
  store i1 %15387, i1* %125, align 1
  %.reload637 = load i8**, i8*** %.reg2mem636, align 8
  %.reload640 = load i8**, i8*** %.reg2mem639, align 8
  %15388 = select i1 %126, i8** %.reload637, i8** %.reload640
  %15389 = load i8*, i8** %15388, align 8
  indirectbr i8* %15389, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub50:                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %127, align 1
  ret void

.exitStub26.exitStub:                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %127, align 1
  ret void

newFuncRoot51:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15390 = alloca i64, align 8
  store i64* %15390, i64** %.reg2mem942, align 8
  %15391 = alloca i64, align 8
  %15392 = and i64 %446, -6672843471892596216
  %15393 = xor i64 %446, -1
  %15394 = or i64 6672843471892596215, %15393
  %15395 = xor i64 %15394, -1
  %15396 = and i64 %15395, -1
  %15397 = and i64 %1537, -2610840461797112870
  %15398 = or i64 2610840461797112869, %1537
  %15399 = sub i64 %15398, 2610840461797112869
  %15400 = xor i64 %15396, %15397
  %15401 = xor i64 %15400, %15392
  %15402 = xor i64 %15401, %15399
  %15403 = xor i64 %15402, 7712603942898375235
  %15404 = or i64 %1495, 4012055639791990882
  %15405 = and i64 4012055639791990882, %1495
  %15406 = xor i64 4012055639791990882, %1495
  %15407 = or i64 %15405, %15406
  %15408 = or i64 %1410, 7796383337633707122
  %15409 = xor i64 %1410, -1
  %15410 = and i64 %15409, -5395956723082765704
  %15411 = and i64 %1410, 5395956723082765703
  %15412 = or i64 %15410, %15411
  %15413 = xor i64 -2796765443481981430, %15412
  %15414 = xor i64 %1410, -1
  %15415 = or i64 -7796383337633707123, %15414
  %15416 = xor i64 %15415, -1
  %15417 = and i64 %15416, -1
  %15418 = or i64 %15413, %15417
  %15419 = xor i64 %15407, %15408
  %15420 = xor i64 %15419, %15418
  %15421 = xor i64 %15420, 0
  %15422 = xor i64 %15421, %15404
  %15423 = mul i64 %15403, %15422
  %15424 = trunc i64 %15423 to i32
  %15425 = or i64 %1296, -5356930002996015483
  %15426 = xor i64 %1296, -1
  %15427 = and i64 -5356930002996015483, %15426
  %15428 = add i64 %15427, %1296
  %15429 = and i64 %670, -601150304962732145
  %15430 = or i64 601150304962732144, %670
  %15431 = sub i64 %15430, 601150304962732144
  %15432 = xor i64 %15428, %15425
  %15433 = xor i64 %15432, %15429
  %15434 = xor i64 %15433, -8186533072380927677
  %15435 = xor i64 %15434, %15431
  %15436 = or i64 %563, 8639861625879304813
  %15437 = xor i64 %563, -1
  %15438 = and i64 %15437, -878398893083882844
  %15439 = and i64 %563, 878398893083882843
  %15440 = or i64 %15438, %15439
  %15441 = xor i64 -8923398312909664055, %15440
  %15442 = xor i64 %563, -1
  %15443 = or i64 -8639861625879304814, %15442
  %15444 = xor i64 %15443, -1
  %15445 = and i64 %15444, -1
  %15446 = or i64 %15441, %15445
  %15447 = or i64 %1341, 514293910895405159
  %15448 = and i64 514293910895405159, %1341
  %15449 = xor i64 514293910895405159, %1341
  %15450 = or i64 %15448, %15449
  %15451 = and i64 %676, -3593073957498275442
  %15452 = xor i64 %676, -1
  %15453 = xor i64 -3593073957498275442, %15452
  %15454 = and i64 %15453, -3593073957498275442
  %15455 = xor i64 %15447, 0
  %15456 = xor i64 %15455, %15450
  %15457 = xor i64 %15456, %15451
  %15458 = xor i64 %15457, %15436
  %15459 = xor i64 %15458, %15454
  %15460 = xor i64 %15459, %15446
  %15461 = mul i64 %15435, %15460
  %15462 = trunc i64 %15461 to i32
  %15463 = and i64 %444, -7403143629158968051
  %15464 = xor i64 %444, -1
  %15465 = xor i64 -7403143629158968051, %15464
  %15466 = and i64 %15465, -7403143629158968051
  %15467 = and i64 %866, -8231159985640676209
  %15468 = xor i64 %866, -1
  %15469 = or i64 8231159985640676208, %15468
  %15470 = xor i64 %15469, -1
  %15471 = and i64 %15470, -1
  %15472 = or i64 %1509, 8397603404800283534
  %15473 = and i64 8397603404800283534, %1509
  %15474 = xor i64 8397603404800283534, %1509
  %15475 = or i64 %15473, %15474
  %15476 = xor i64 %15466, -3111760488496808855
  %15477 = xor i64 %15476, %15467
  %15478 = xor i64 %15477, %15463
  %15479 = xor i64 %15478, %15471
  %15480 = xor i64 %15479, %15475
  %15481 = xor i64 %15480, %15472
  %15482 = and i64 %545, 4789652571588161192
  %15483 = xor i64 %545, -1
  %15484 = xor i64 4789652571588161192, %15483
  %15485 = and i64 %15484, 4789652571588161192
  %15486 = and i64 %1523, 2392822222428046964
  %15487 = xor i64 %1523, -1
  %15488 = xor i64 2392822222428046964, %15487
  %15489 = and i64 %15488, 2392822222428046964
  %15490 = xor i64 %15486, %15485
  %15491 = xor i64 %15490, %15489
  %15492 = xor i64 %15491, 0
  %15493 = xor i64 %15492, %15482
  %15494 = mul i64 %15481, %15493
  %15495 = trunc i64 %15494 to i32
  %15496 = and i64 %1523, -7570696006910281974
  %15497 = xor i64 %1523, -1
  %15498 = xor i64 -7570696006910281974, %15497
  %15499 = and i64 %15498, -7570696006910281974
  %15500 = and i64 %1141, -6737785056912554757
  %15501 = xor i64 %1141, -1
  %15502 = or i64 6737785056912554756, %15501
  %15503 = xor i64 %15502, -1
  %15504 = and i64 %15503, -1
  %15505 = xor i64 %15504, -7257584607798933937
  %15506 = xor i64 %15505, %15496
  %15507 = xor i64 %15506, %15500
  %15508 = xor i64 %15507, %15499
  %15509 = or i64 %379, 4593255609861422932
  %15510 = xor i64 %379, -1
  %15511 = and i64 4593255609861422932, %15510
  %15512 = add i64 %15511, %379
  %15513 = sext i32 %50 to i64
  %15514 = add i64 %15513, -8594905046463012958
  %15515 = sub i64 0, %15513
  %15516 = sub i64 -8594905046463012958, %15515
  %15517 = add i64 %549, -6992660785844809382
  %15518 = add i64 759920063348540081, %549
  %15519 = sub i64 %15518, 7752580849193349463
  %15520 = xor i64 %15512, %15514
  %15521 = xor i64 %15520, 0
  %15522 = xor i64 %15521, %15517
  %15523 = xor i64 %15522, %15509
  %15524 = xor i64 %15523, %15519
  %15525 = xor i64 %15524, %15516
  %15526 = mul i64 %15508, %15525
  %15527 = trunc i64 %15526 to i1
  %15528 = or i64 %563, -6877758526167134683
  %15529 = and i64 -6877758526167134683, %563
  %15530 = xor i64 -6877758526167134683, %563
  %15531 = or i64 %15529, %15530
  %15532 = or i64 %866, 3139889214965918818
  %15533 = and i64 3139889214965918818, %866
  %15534 = xor i64 3139889214965918818, %866
  %15535 = or i64 %15533, %15534
  %15536 = xor i64 -6260643175580135039, %15528
  %15537 = xor i64 %15536, %15532
  %15538 = xor i64 %15537, %15531
  %15539 = xor i64 %15538, %15535
  %15540 = and i64 %220, 4050916148860367399
  %15541 = or i64 -4050916148860367400, %220
  %15542 = sub i64 %15541, -4050916148860367400
  %15543 = and i64 %1491, 5732691525139533774
  %15544 = xor i64 %1491, -1
  %15545 = or i64 -5732691525139533775, %15544
  %15546 = xor i64 %15545, -1
  %15547 = and i64 %15546, -1
  %15548 = add i64 %1139, -5535130512562223184
  %15549 = xor i64 -5535130512562223184, %1139
  %15550 = and i64 -5535130512562223184, %1139
  %15551 = mul i64 2, %15550
  %15552 = add i64 %15549, %15551
  %15553 = xor i64 %15540, %15543
  %15554 = xor i64 %15553, %15542
  %15555 = xor i64 %15554, 0
  %15556 = xor i64 %15555, %15548
  %15557 = xor i64 %15556, %15547
  %15558 = xor i64 %15557, %15552
  %15559 = mul i64 %15539, %15558
  %15560 = trunc i64 %15559 to i1
  call void @"9941920946239825184"(i32 5, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 1996855465712537074, i64* %15391, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 %15424, i32 %15462, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 %15495, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 %15527, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %15560, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 0, i32 0, i1* null, i1* null)
  %15561 = load i64, i64* %15391, align 8
  %15562 = getelementptr [1 x i8*], [1 x i8*]* @obfsfuncAddrLookupTable2052736990690125031, i32 0, i64 %15561
  store i8* bitcast (i1 (i1, i1, i1, i1*, i1, i1*, i1*, i1*, i1, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1)* @render.extracted.2.extracted to i8*), i8** %15562, align 8
  %.reload646 = load i8**, i8*** %.reg2mem645, align 8
  %15563 = load i8*, i8** %.reload646, align 8
  indirectbr i8* %15563, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"178":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %15564 = sdiv i64 17, 101
  store i64 %15564, i64* %136, align 8
  %15565 = or i1 %128, %129
  store i1 %15565, i1* %137, align 1
  %15566 = or i64 %1290, 8891483774249846078
  %15567 = and i64 8891483774249846078, %1290
  %15568 = xor i64 8891483774249846078, %1290
  %15569 = or i64 %15567, %15568
  %15570 = and i64 %868, -5265047598962846121
  %15571 = or i64 5265047598962846120, %868
  %15572 = sub i64 %15571, 5265047598962846120
  %15573 = add i64 %829, -5061122951307172551
  %15574 = sub i64 0, %829
  %15575 = sub i64 -5061122951307172551, %15574
  %15576 = xor i64 %15570, -5664384710431204387
  %15577 = xor i64 %15576, %15573
  %15578 = xor i64 %15577, %15569
  %15579 = xor i64 %15578, %15572
  %15580 = xor i64 %15579, %15575
  %15581 = xor i64 %15580, %15566
  %15582 = or i64 %790, -4356008332781811906
  %15583 = xor i64 %790, -1
  %15584 = and i64 %15583, 5378270290273176741
  %15585 = and i64 %790, -5378270290273176742
  %15586 = or i64 %15584, %15585
  %15587 = xor i64 -8561573971875394661, %15586
  %15588 = xor i64 %790, -1
  %15589 = or i64 4356008332781811905, %15588
  %15590 = xor i64 %15589, -1
  %15591 = and i64 %15590, -1
  %15592 = or i64 %15587, %15591
  %15593 = add i64 %990, 4031072389268336154
  %15594 = xor i64 4031072389268336154, %990
  %15595 = and i64 4031072389268336154, %990
  %15596 = mul i64 2, %15595
  %15597 = add i64 %15594, %15596
  %15598 = add i64 %1653, -6417177688163986918
  %15599 = xor i64 -6417177688163986918, %1653
  %15600 = and i64 -6417177688163986918, %1653
  %15601 = mul i64 2, %15600
  %15602 = add i64 %15599, %15601
  %15603 = xor i64 %15592, %15597
  %15604 = xor i64 %15603, %15598
  %15605 = xor i64 %15604, %15593
  %15606 = xor i64 %15605, %15602
  %15607 = xor i64 %15606, %15582
  %15608 = xor i64 %15607, 6147174302986943839
  %15609 = mul i64 %15581, %15608
  %15610 = add i64 %15609, -80
  store i64 %15610, i64* %138, align 8
  %15611 = xor i1 %130, true
  store i1 %15611, i1* %139, align 1
  %15612 = xor i1 %15611, true
  %15613 = and i1 %15612, true
  %15614 = xor i1 %15612, true
  %15615 = or i1 %15613, %15614
  %15616 = xor i1 %15615, true
  %15617 = xor i1 %15616, true
  %15618 = or i1 %15617, true
  %15619 = xor i1 %15616, true
  %15620 = sub i1 %15618, %15619
  store i1 %15620, i1* %140, align 1
  %15621 = or i64 %1655, -2397980255872853235
  %15622 = xor i64 %1655, -1
  %15623 = and i64 %15622, -8597456454311547661
  %15624 = and i64 %1655, 8597456454311547660
  %15625 = or i64 %15623, %15624
  %15626 = xor i64 6203457035603982334, %15625
  %15627 = xor i64 %1655, -1
  %15628 = or i64 2397980255872853234, %15627
  %15629 = xor i64 %15628, -1
  %15630 = and i64 %15629, -1
  %15631 = or i64 %15626, %15630
  %15632 = and i64 %1238, -2808351173566270779
  %15633 = xor i64 %1238, -1
  %15634 = or i64 2808351173566270778, %15633
  %15635 = xor i64 %15634, -1
  %15636 = and i64 %15635, -1
  %15637 = and i64 %607, -7994574346061378978
  %15638 = xor i64 %607, -1
  %15639 = xor i64 -7994574346061378978, %15638
  %15640 = and i64 %15639, -7994574346061378978
  %15641 = xor i64 %15640, %15632
  %15642 = xor i64 %15641, %15631
  %15643 = xor i64 %15642, -7993505668088467249
  %15644 = xor i64 %15643, %15637
  %15645 = xor i64 %15644, %15621
  %15646 = xor i64 %15645, %15636
  %15647 = add i64 %1404, 134914434783600397
  %15648 = add i64 -8995391189883723689, %1404
  %15649 = sub i64 %15648, -9130305624667324086
  %15650 = and i64 %1655, 7985371339817150345
  %15651 = xor i64 %1655, -1
  %15652 = or i64 -7985371339817150346, %15651
  %15653 = xor i64 %15652, -1
  %15654 = and i64 %15653, -1
  %15655 = or i64 %452, 35787576011617965
  %15656 = xor i64 %452, -1
  %15657 = and i64 %15656, 7513370626827618328
  %15658 = and i64 %452, -7513370626827618329
  %15659 = or i64 %15657, %15658
  %15660 = xor i64 7510876471815143093, %15659
  %15661 = xor i64 %452, -1
  %15662 = or i64 -35787576011617966, %15661
  %15663 = xor i64 %15662, -1
  %15664 = and i64 %15663, -1
  %15665 = or i64 %15660, %15664
  %15666 = xor i64 -1020291712689695185, %15647
  %15667 = xor i64 %15666, %15665
  %15668 = xor i64 %15667, %15649
  %15669 = xor i64 %15668, %15654
  %15670 = xor i64 %15669, %15655
  %15671 = xor i64 %15670, %15650
  %15672 = mul i64 %15646, %15671
  %15673 = trunc i64 %15672 to i1
  %15674 = or i1 %130, %15673
  %15675 = and i1 %130, true
  %15676 = sub i1 %15674, %15675
  %15677 = or i1 %15676, true
  %15678 = add i64 %786, 2060246456510043636
  %15679 = xor i64 2060246456510043636, %786
  %15680 = and i64 2060246456510043636, %786
  %15681 = mul i64 2, %15680
  %15682 = add i64 %15679, %15681
  %15683 = or i64 %450, 7019704034499771344
  %15684 = xor i64 %450, -1
  %15685 = and i64 %15684, 7269597089503587224
  %15686 = and i64 %450, -7269597089503587225
  %15687 = or i64 %15685, %15686
  %15688 = xor i64 398625371868565576, %15687
  %15689 = xor i64 %450, -1
  %15690 = or i64 -7019704034499771345, %15689
  %15691 = xor i64 %15690, -1
  %15692 = and i64 %15691, -1
  %15693 = or i64 %15688, %15692
  %15694 = xor i64 3444330979503766535, %15693
  %15695 = xor i64 %15694, %15683
  %15696 = xor i64 %15695, %15678
  %15697 = xor i64 %15696, %15682
  %15698 = add i64 %908, -7727812731342220693
  %15699 = add i64 -8673841781698014279, %908
  %15700 = sub i64 %15699, -946029050355793586
  %15701 = add i64 %1076, 354556883288336649
  %15702 = xor i64 354556883288336649, %1076
  %15703 = and i64 354556883288336649, %1076
  %15704 = mul i64 2, %15703
  %15705 = add i64 %15702, %15704
  %15706 = or i64 %1643, -1074682426646762975
  %15707 = xor i64 %1643, -1
  %15708 = and i64 %15707, -3544902027722178469
  %15709 = and i64 %1643, 3544902027722178468
  %15710 = or i64 %15708, %15709
  %15711 = xor i64 4600440650835667578, %15710
  %15712 = xor i64 %1643, -1
  %15713 = or i64 1074682426646762974, %15712
  %15714 = xor i64 %15713, -1
  %15715 = and i64 %15714, -1
  %15716 = or i64 %15711, %15715
  %15717 = xor i64 -4071426837734182473, %15706
  %15718 = xor i64 %15717, %15705
  %15719 = xor i64 %15718, %15701
  %15720 = xor i64 %15719, %15716
  %15721 = xor i64 %15720, %15698
  %15722 = xor i64 %15721, %15700
  %15723 = mul i64 %15697, %15722
  %15724 = trunc i64 %15723 to i1
  %15725 = xor i1 %130, %15724
  %15726 = sub i1 %15677, %15725
  store i1 %15726, i1* %141, align 1
  %15727 = xor i1 %15726, true
  %15728 = and i1 %15620, %15727
  %15729 = add i1 %15728, %15726
  store i1 %15729, i1* %142, align 1
  %15730 = xor i1 %15565, %15729
  store i1 %15730, i1* %.reg2mem945, align 1
  %.reload949 = load i1, i1* %.reg2mem945, align 1
  store i1 %.reload949, i1* %143, align 1
  %15731 = xor i1 %131, true
  %15732 = and i1 %15731, true
  %15733 = and i1 %131, false
  %15734 = or i1 %15732, %15733
  store i1 %15734, i1* %144, align 1
  %15735 = and i64 %448, -7153708065343372339
  %15736 = or i64 7153708065343372338, %448
  %15737 = sub i64 %15736, 7153708065343372338
  %15738 = add i64 %1074, -5371383838390333743
  %15739 = sub i64 0, %1074
  %15740 = add i64 5371383838390333743, %15739
  %15741 = sub i64 0, %15740
  %15742 = xor i64 %15735, -7199982664841778835
  %15743 = xor i64 %15742, %15737
  %15744 = xor i64 %15743, %15741
  %15745 = xor i64 %15744, %15738
  %15746 = add i64 %780, 4492407816797156497
  %15747 = add i64 1479932447877299285, %780
  %15748 = sub i64 %15747, -3012475368919857212
  %15749 = add i64 %676, -4118732301009089583
  %15750 = add i64 -5531265187163699285, %676
  %15751 = add i64 %15750, 1412532886154609702
  %15752 = xor i64 %15751, %15746
  %15753 = xor i64 %15752, %15748
  %15754 = xor i64 %15753, 6923912310328051813
  %15755 = xor i64 %15754, %15749
  %15756 = mul i64 %15745, %15755
  %15757 = trunc i64 %15756 to i1
  %15758 = xor i1 %130, %15757
  %15759 = xor i1 %15758, false
  store i1 %15759, i1* %145, align 1
  %15760 = xor i1 %15734, true
  %15761 = and i64 %790, -541103058286209502
  %15762 = xor i64 %790, -1
  %15763 = or i64 541103058286209501, %15762
  %15764 = xor i64 %15763, -1
  %15765 = and i64 %15764, -1
  %15766 = or i64 %69, 7794821895804118287
  %15767 = xor i64 %69, -1
  %15768 = and i64 %15767, -7791606066922624214
  %15769 = and i64 %69, 7791606066922624213
  %15770 = or i64 %15768, %15769
  %15771 = xor i64 -3832178167575003, %15770
  %15772 = xor i64 %69, -1
  %15773 = or i64 -7794821895804118288, %15772
  %15774 = xor i64 %15773, -1
  %15775 = and i64 %15774, -1
  %15776 = or i64 %15771, %15775
  %15777 = xor i64 %15765, %15766
  %15778 = xor i64 %15777, %15776
  %15779 = xor i64 %15778, 933521621407306229
  %15780 = xor i64 %15779, %15761
  %15781 = or i64 %668, -8649926460782806847
  %15782 = xor i64 %668, -1
  %15783 = and i64 %15782, 7535140038390654335
  %15784 = and i64 %668, -7535140038390654336
  %15785 = or i64 %15783, %15784
  %15786 = xor i64 -1195854926571315778, %15785
  %15787 = xor i64 %668, -1
  %15788 = or i64 8649926460782806846, %15787
  %15789 = xor i64 %15788, -1
  %15790 = and i64 %15789, -1
  %15791 = or i64 %15786, %15790
  %15792 = add i64 %1404, 913638140424567170
  %15793 = add i64 976559971737527013, %1404
  %15794 = sub i64 %15793, 62921831312959843
  %15795 = xor i64 %15781, %15792
  %15796 = xor i64 %15795, %15791
  %15797 = xor i64 %15796, 0
  %15798 = xor i64 %15797, %15794
  %15799 = mul i64 %15780, %15798
  %15800 = trunc i64 %15799 to i1
  %15801 = and i1 %15760, %15800
  %15802 = and i1 %15734, true
  %15803 = or i1 %15801, %15802
  %15804 = xor i1 %15759, true
  %15805 = add i64 %395, -4216859873176390833
  %15806 = xor i64 -4216859873176390833, %395
  %15807 = and i64 -4216859873176390833, %395
  %15808 = mul i64 2, %15807
  %15809 = add i64 %15806, %15808
  %15810 = and i64 %1408, 4666930977610705933
  %15811 = or i64 -4666930977610705934, %1408
  %15812 = sub i64 %15811, -4666930977610705934
  %15813 = xor i64 %15812, %15810
  %15814 = xor i64 %15813, %15809
  %15815 = xor i64 %15814, -8284753322959751427
  %15816 = xor i64 %15815, %15805
  %15817 = and i64 %918, -7845281241864345374
  %15818 = or i64 7845281241864345373, %918
  %15819 = sub i64 %15818, 7845281241864345373
  %15820 = or i64 %776, -7393213043320000563
  %15821 = and i64 -7393213043320000563, %776
  %15822 = xor i64 -7393213043320000563, %776
  %15823 = or i64 %15821, %15822
  %15824 = xor i64 %15820, 0
  %15825 = xor i64 %15824, %15819
  %15826 = xor i64 %15825, %15817
  %15827 = xor i64 %15826, %15823
  %15828 = mul i64 %15816, %15827
  %15829 = trunc i64 %15828 to i1
  %15830 = and i1 %15804, %15829
  %15831 = and i1 %15759, true
  %15832 = or i1 %15830, %15831
  %15833 = xor i1 %15803, true
  %15834 = and i1 %15833, true
  %15835 = and i64 %1076, -7332912987719091395
  %15836 = xor i64 %1076, -1
  %15837 = or i64 7332912987719091394, %15836
  %15838 = xor i64 %15837, -1
  %15839 = and i64 %15838, -1
  %15840 = and i64 %924, -175197330403334073
  %15841 = or i64 175197330403334072, %924
  %15842 = sub i64 %15841, 175197330403334072
  %15843 = add i64 %77, -5590385289467899403
  %15844 = sub i64 0, %77
  %15845 = sub i64 -5590385289467899403, %15844
  %15846 = xor i64 %15843, %15839
  %15847 = xor i64 %15846, %15845
  %15848 = xor i64 %15847, %15842
  %15849 = xor i64 %15848, %15840
  %15850 = xor i64 %15849, 5957236728097208289
  %15851 = xor i64 %15850, %15835
  %15852 = and i64 %389, -5246905120682780662
  %15853 = or i64 5246905120682780661, %389
  %15854 = sub i64 %15853, 5246905120682780661
  %15855 = or i64 %1074, 2223115806198434041
  %15856 = xor i64 %1074, -1
  %15857 = and i64 2223115806198434041, %15856
  %15858 = add i64 %15857, %1074
  %15859 = or i64 %1651, -3570199664146971924
  %15860 = xor i64 %1651, -1
  %15861 = and i64 %15860, -155627290066505955
  %15862 = and i64 %1651, 155627290066505954
  %15863 = or i64 %15861, %15862
  %15864 = xor i64 3720821702254898673, %15863
  %15865 = xor i64 %1651, -1
  %15866 = or i64 3570199664146971923, %15865
  %15867 = xor i64 %15866, -1
  %15868 = and i64 %15867, -1
  %15869 = or i64 %15864, %15868
  %15870 = xor i64 %15852, %15869
  %15871 = xor i64 %15870, %15855
  %15872 = xor i64 %15871, %15854
  %15873 = xor i64 %15872, 0
  %15874 = xor i64 %15873, %15858
  %15875 = xor i64 %15874, %15859
  %15876 = mul i64 %15851, %15875
  %15877 = trunc i64 %15876 to i1
  %15878 = and i1 %15803, %15877
  %15879 = or i1 %15834, %15878
  %15880 = xor i1 %15832, true
  %15881 = add i64 %686, -253331725815466333
  %15882 = sub i64 0, %686
  %15883 = sub i64 -253331725815466333, %15882
  %15884 = or i64 %379, 706195968370168820
  %15885 = and i64 706195968370168820, %379
  %15886 = xor i64 706195968370168820, %379
  %15887 = or i64 %15885, %15886
  %15888 = add i64 %920, -5316941702595860399
  %15889 = add i64 -6084946090139015170, %920
  %15890 = add i64 %15889, 768004387543154771
  %15891 = xor i64 %15883, -8874508957792711865
  %15892 = xor i64 %15891, %15881
  %15893 = xor i64 %15892, %15890
  %15894 = xor i64 %15893, %15888
  %15895 = xor i64 %15894, %15887
  %15896 = xor i64 %15895, %15884
  %15897 = add i64 %660, -5965768191911604231
  %15898 = sub i64 0, %660
  %15899 = sub i64 -5965768191911604231, %15898
  %15900 = add i64 %990, -28867887558118810
  %15901 = sub i64 0, %990
  %15902 = sub i64 -28867887558118810, %15901
  %15903 = xor i64 %15897, -935601109622722953
  %15904 = xor i64 %15903, %15899
  %15905 = xor i64 %15904, %15900
  %15906 = xor i64 %15905, %15902
  %15907 = mul i64 %15896, %15906
  %15908 = trunc i64 %15907 to i1
  %15909 = and i1 %15880, %15908
  %15910 = and i1 %15832, false
  %15911 = or i1 %15909, %15910
  %15912 = xor i1 %15879, %15911
  %15913 = xor i1 %15734, true
  %15914 = xor i1 %15759, true
  %15915 = and i1 %15913, %15914
  %15916 = xor i1 %15913, %15914
  %15917 = or i1 %15915, %15916
  %15918 = xor i1 %15917, false
  %15919 = xor i1 %15918, true
  %15920 = xor i1 %15919, false
  %15921 = and i1 %15920, %15919
  %15922 = xor i1 %15912, true
  %15923 = and i1 %15922, true
  %15924 = and i1 %15912, false
  %15925 = or i1 %15923, %15924
  %15926 = xor i1 %15921, true
  %15927 = and i1 %15926, true
  %15928 = and i1 %15921, false
  %15929 = or i1 %15927, %15928
  %15930 = xor i1 %15925, %15929
  %15931 = xor i1 %15912, true
  %15932 = xor i1 %15921, true
  %15933 = or i1 %15931, %15932
  %15934 = add i64 %660, 8547909859970508588
  %15935 = xor i64 8547909859970508588, %660
  %15936 = and i64 8547909859970508588, %660
  %15937 = mul i64 2, %15936
  %15938 = add i64 %15935, %15937
  %15939 = and i64 %101, 6444297592628633980
  %15940 = xor i64 %101, -1
  %15941 = xor i64 6444297592628633980, %15940
  %15942 = and i64 %15941, 6444297592628633980
  %15943 = xor i64 3196291714366830985, %15938
  %15944 = xor i64 %15943, %15939
  %15945 = xor i64 %15944, %15942
  %15946 = xor i64 %15945, %15934
  %15947 = or i64 %69, -5384854923520406193
  %15948 = xor i64 %69, -1
  %15949 = and i64 -5384854923520406193, %15948
  %15950 = add i64 %15949, %69
  %15951 = add i64 %1076, 2689658837629708453
  %15952 = and i64 2689658837629708453, %1076
  %15953 = or i64 2689658837629708453, %1076
  %15954 = add i64 %15952, %15953
  %15955 = xor i64 %15947, %15954
  %15956 = xor i64 %15955, %15950
  %15957 = xor i64 %15956, 2656712737313541305
  %15958 = xor i64 %15957, %15951
  %15959 = mul i64 %15946, %15958
  %15960 = trunc i64 %15959 to i1
  %15961 = xor i1 %15933, %15960
  %15962 = and i1 %15961, true
  %15963 = or i1 %15930, %15962
  store i1 %15963, i1* %146, align 1
  %15964 = xor i1 %15963, true
  %15965 = add i64 %1074, 1433691649130601170
  %15966 = sub i64 0, %1074
  %15967 = sub i64 1433691649130601170, %15966
  %15968 = add i64 %11, -8960957032220128079
  %15969 = and i64 -8960957032220128079, %11
  %15970 = or i64 -8960957032220128079, %11
  %15971 = add i64 %15969, %15970
  %15972 = xor i64 7682210006416272949, %15968
  %15973 = xor i64 %15972, %15967
  %15974 = xor i64 %15973, %15965
  %15975 = xor i64 %15974, %15971
  %15976 = and i64 %1398, 170199317865132918
  %15977 = or i64 -170199317865132919, %1398
  %15978 = sub i64 %15977, -170199317865132919
  %15979 = and i64 %866, 1385505938762296301
  %15980 = xor i64 %866, -1
  %15981 = or i64 -1385505938762296302, %15980
  %15982 = xor i64 %15981, -1
  %15983 = and i64 %15982, -1
  %15984 = and i64 %1647, -3825349245583984287
  %15985 = xor i64 %1647, -1
  %15986 = or i64 3825349245583984286, %15985
  %15987 = xor i64 %15986, -1
  %15988 = and i64 %15987, -1
  %15989 = xor i64 %15988, %15978
  %15990 = xor i64 %15989, %15979
  %15991 = xor i64 %15990, 0
  %15992 = xor i64 %15991, %15976
  %15993 = xor i64 %15992, %15983
  %15994 = xor i64 %15993, %15984
  %15995 = mul i64 %15975, %15994
  %15996 = trunc i64 %15995 to i1
  %15997 = and i1 %15964, %15996
  %15998 = and i1 %15963, true
  %15999 = or i1 %15997, %15998
  %16000 = xor i1 %15999, true
  store i1 %16000, i1* %147, align 1
  %16001 = xor i1 %16000, true
  %16002 = or i1 %16001, true
  %16003 = xor i1 %16000, true
  %16004 = sub i1 %16002, %16003
  store i1 %16004, i1* %.reg2mem950, align 1
  %.reload952 = load i1, i1* %.reg2mem950, align 1
  store i1 %.reload952, i1* %148, align 1
  %.reload948 = load i1, i1* %.reg2mem945, align 1
  %16005 = xor i1 %.reload948, true
  %16006 = xor i1 %16005, true
  %16007 = or i1 %16006, true
  %16008 = xor i1 %16005, true
  %16009 = sub i1 %16007, %16008
  %.reload947 = load i1, i1* %.reg2mem945, align 1
  %16010 = and i1 %.reload947, false
  %16011 = and i1 %16009, %16010
  %16012 = xor i1 %16009, %16010
  %16013 = or i1 %16011, %16012
  store i1 %16013, i1* %.reg2mem953, align 1
  %.reload649 = load i8**, i8*** %.reg2mem648, align 8
  %16014 = load i8*, i8** %.reload649, align 8
  indirectbr i8* %16014, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

codeRepl52:                                       ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload944 = load i64*, i64** %.reg2mem942, align 8
  store i64 1996855465712537074, i64* %.reload944, align 8
  %16015 = alloca i8**, align 8
  %.reload943 = load i64*, i64** %.reg2mem942, align 8
  %16016 = add i64 %1584, -7281978277902899285
  %16017 = and i64 -7281978277902899285, %1584
  %16018 = or i64 -7281978277902899285, %1584
  %16019 = add i64 %16017, %16018
  %16020 = add i64 %1341, 6401691847997039791
  %16021 = add i64 -6370874018796780914, %1341
  %16022 = sub i64 %16021, 5674178206915730911
  %16023 = xor i64 %16022, -2307331898349994205
  %16024 = xor i64 %16023, %16020
  %16025 = xor i64 %16024, %16019
  %16026 = xor i64 %16025, %16016
  %16027 = and i64 %782, -7059989402091202348
  %16028 = or i64 7059989402091202347, %782
  %16029 = sub i64 %16028, 7059989402091202347
  %16030 = and i64 %385, 7033961723671568755
  %16031 = or i64 -7033961723671568756, %385
  %16032 = sub i64 %16031, -7033961723671568756
  %16033 = xor i64 6674431306023179630, %16030
  %16034 = xor i64 %16033, %16029
  %16035 = xor i64 %16034, %16032
  %16036 = xor i64 %16035, %16027
  %16037 = mul i64 %16026, %16036
  %16038 = trunc i64 %16037 to i32
  %16039 = add i64 %668, -5661579522986329328
  %16040 = add i64 6511735502255765384, %668
  %16041 = add i64 %16040, 6273429048467456904
  %16042 = add i64 %1507, 1104589051785323680
  %16043 = sub i64 0, %1507
  %16044 = add i64 -1104589051785323680, %16043
  %16045 = sub i64 0, %16044
  %16046 = xor i64 -5276742842400561987, %16042
  %16047 = xor i64 %16046, %16045
  %16048 = xor i64 %16047, %16041
  %16049 = xor i64 %16048, %16039
  %16050 = add i64 %69, 7995636331143215616
  %16051 = xor i64 7995636331143215616, %69
  %16052 = and i64 7995636331143215616, %69
  %16053 = mul i64 2, %16052
  %16054 = add i64 %16051, %16053
  %16055 = or i64 %916, -580754359387550470
  %16056 = and i64 -580754359387550470, %916
  %16057 = xor i64 -580754359387550470, %916
  %16058 = or i64 %16056, %16057
  %16059 = or i64 %908, -7893933697952665356
  %16060 = xor i64 %908, -1
  %16061 = and i64 -7893933697952665356, %16060
  %16062 = add i64 %16061, %908
  %16063 = xor i64 %16058, %16054
  %16064 = xor i64 %16063, %16055
  %16065 = xor i64 %16064, %16050
  %16066 = xor i64 %16065, %16062
  %16067 = xor i64 %16066, 0
  %16068 = xor i64 %16067, %16059
  %16069 = mul i64 %16049, %16068
  %16070 = trunc i64 %16069 to i1
  %16071 = add i64 %788, 8222645433687007145
  %16072 = sub i64 0, %788
  %16073 = sub i64 8222645433687007145, %16072
  %16074 = add i64 %788, 7625779360769739342
  %16075 = add i64 -8630693067096649285, %788
  %16076 = add i64 %16075, -2190271645843162989
  %16077 = or i64 %1539, 452975665689036389
  %16078 = xor i64 %1539, -1
  %16079 = and i64 %16078, 7014869574709267864
  %16080 = and i64 %1539, -7014869574709267865
  %16081 = or i64 %16079, %16080
  %16082 = xor i64 7426603194626034685, %16081
  %16083 = xor i64 %1539, -1
  %16084 = or i64 -452975665689036390, %16083
  %16085 = xor i64 %16084, -1
  %16086 = and i64 %16085, -1
  %16087 = or i64 %16082, %16086
  %16088 = xor i64 %16074, %16087
  %16089 = xor i64 %16088, %16073
  %16090 = xor i64 %16089, 2685949710115516119
  %16091 = xor i64 %16090, %16071
  %16092 = xor i64 %16091, %16076
  %16093 = xor i64 %16092, %16077
  %16094 = or i64 %1236, -8696312959363372632
  %16095 = xor i64 %1236, -1
  %16096 = and i64 -8696312959363372632, %16095
  %16097 = add i64 %16096, %1236
  %16098 = add i64 %234, -3685858490605263972
  %16099 = add i64 -980561060072491433, %234
  %16100 = add i64 %16099, -2705297430532772539
  %16101 = xor i64 %16097, %16098
  %16102 = xor i64 %16101, %16100
  %16103 = xor i64 %16102, %16094
  %16104 = xor i64 %16103, 0
  %16105 = mul i64 %16093, %16104
  %16106 = trunc i64 %16105 to i1
  %16107 = or i64 %1655, -3812243634627023733
  %16108 = xor i64 %1655, -1
  %16109 = and i64 %16108, -5948343277584548900
  %16110 = and i64 %1655, 5948343277584548899
  %16111 = or i64 %16109, %16110
  %16112 = xor i64 7380007613354907479, %16111
  %16113 = xor i64 %1655, -1
  %16114 = or i64 3812243634627023732, %16113
  %16115 = xor i64 %16114, -1
  %16116 = and i64 %16115, -1
  %16117 = or i64 %16112, %16116
  %16118 = add i64 %230, -7498938886800771716
  %16119 = xor i64 -7498938886800771716, %230
  %16120 = and i64 -7498938886800771716, %230
  %16121 = mul i64 2, %16120
  %16122 = add i64 %16119, %16121
  %16123 = xor i64 %16107, 5140021257852373743
  %16124 = xor i64 %16123, %16122
  %16125 = xor i64 %16124, %16118
  %16126 = xor i64 %16125, %16117
  %16127 = and i64 %1531, -4092606133245643086
  %16128 = or i64 4092606133245643085, %1531
  %16129 = sub i64 %16128, 4092606133245643085
  %16130 = sext i32 %59 to i64
  %16131 = or i64 %16130, -3333956324869190570
  %16132 = and i64 -3333956324869190570, %16130
  %16133 = xor i64 -3333956324869190570, %16130
  %16134 = or i64 %16132, %16133
  %16135 = xor i64 %16129, %16134
  %16136 = xor i64 %16135, %16131
  %16137 = xor i64 %16136, %16127
  %16138 = xor i64 %16137, 0
  %16139 = mul i64 %16126, %16138
  %16140 = trunc i64 %16139 to i1
  %16141 = and i64 %387, -2526874778243982843
  %16142 = xor i64 %387, -1
  %16143 = xor i64 -2526874778243982843, %16142
  %16144 = and i64 %16143, -2526874778243982843
  %16145 = add i64 %1495, -9153644547348167556
  %16146 = sub i64 0, %1495
  %16147 = sub i64 -9153644547348167556, %16146
  %16148 = xor i64 %16141, %16144
  %16149 = xor i64 %16148, -28329197095750079
  %16150 = xor i64 %16149, %16147
  %16151 = xor i64 %16150, %16145
  %16152 = add i64 %290, 6776144121416080868
  %16153 = xor i64 6776144121416080868, %290
  %16154 = and i64 6776144121416080868, %290
  %16155 = mul i64 2, %16154
  %16156 = add i64 %16153, %16155
  %16157 = sext i32 %171 to i64
  %16158 = and i64 %16157, 1105494249127870217
  %16159 = xor i64 %16157, -1
  %16160 = or i64 -1105494249127870218, %16159
  %16161 = xor i64 %16160, -1
  %16162 = and i64 %16161, -1
  %16163 = xor i64 %16158, %16156
  %16164 = xor i64 %16163, 0
  %16165 = xor i64 %16164, %16152
  %16166 = xor i64 %16165, %16162
  %16167 = mul i64 %16151, %16166
  %16168 = trunc i64 %16167 to i32
  call void @"9941920946239825184"(i32 %16038, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64* null, i8*** null, i64 0, i64* null, i64* null, i8*** null, double 0.000000e+00, float* null, float 0.000000e+00, float 0.000000e+00, float* null, float 0.000000e+00, float* null, i32* null, i32* null, i32* null, i32* null, i1* null, i64* null, i8*** null, i1 %16070, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i64* %.reload943, i8*** %16015, i64* null, i8*** null, i64* null, i8*** null, i64* null, i64* null, i1 false, i1* null, i32 0, i32 0, i1* null, i1* null, i64 0, i1 false, i1* null, i1 false, i1 false, i1 false, i32 0, i32 0, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i64 0, i1* null, i64 0, i32 0, i1* null, i1* null, i8* null, i64 0, i64 0, i32* null, i64* null, i64* null, i1* null, float* null, float* null, i8* null, float* null, i32* null, i1 false, i1* null, i64* null, i8*** null, i64 0, i32 0, i1* null, i1* null, i64 0, i64 0, i64 0, i1* null, i1* null, i1* null, i64 0, i64* null, i1* null, i8* null, float* null, i1* null, i1 false, i1 false, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 false, i1* null, i1 false, i1 false, i1 false, i1 %16106, i1 false, i1 false, i1 false, i1 false, i64* null, i1* null, i64* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1* null, i1 %16140, i1* null, i1* null, i1 false, i1* null, i1* null, i1* null, i32 %16168, i32 0, i1* null, i1* null)
  %16169 = load i8**, i8*** %16015, align 8
  %16170 = load i8*, i8** %16169, align 8
  %16171 = bitcast i8* %16170 to i1 (i1, i1, i1, i1*, i1, i1*, i1*, i1*, i1, i1*, i1, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1*, i1)*
  %.reload946 = load i1, i1* %.reg2mem945, align 1
  %.reload951 = load i1, i1* %.reg2mem950, align 1
  %.reload954 = load i1, i1* %.reg2mem953, align 1
  %targetBlock53 = call i1 %16171(i1 %.reload951, i1 %.reload954, i1 %.reload946, i1* %149, i1 %132, i1* %150, i1* %151, i1* %152, i1 %133, i1* %153, i1 %134, i1* %154, i1* %155, i1* %156, i1* %157, i1* %158, i1* %159, i1* %160, i1* %161, i1 %135)
  %.reload652 = load i8**, i8*** %.reg2mem651, align 8
  %.reload655 = load i8**, i8*** %.reg2mem654, align 8
  %16172 = select i1 %targetBlock53, i8** %.reload652, i8** %.reload655
  %16173 = load i8*, i8** %16172, align 8
  indirectbr i8* %16173, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub54:                                      ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %16174 = or i64 %1511, -596568686722301974
  %16175 = and i64 -596568686722301974, %1511
  %16176 = xor i64 -596568686722301974, %1511
  %16177 = or i64 %16175, %16176
  %16178 = and i64 %1410, 757974568827944018
  %16179 = or i64 -757974568827944019, %1410
  %16180 = sub i64 %16179, -757974568827944019
  %16181 = add i64 %1539, -2456001261105420583
  %16182 = xor i64 -2456001261105420583, %1539
  %16183 = and i64 -2456001261105420583, %1539
  %16184 = mul i64 2, %16183
  %16185 = add i64 %16182, %16184
  %16186 = xor i64 %16178, %16185
  %16187 = xor i64 %16186, %16181
  %16188 = xor i64 %16187, %16180
  %16189 = xor i64 %16188, -2762046297923671259
  %16190 = xor i64 %16189, %16177
  %16191 = xor i64 %16190, %16174
  %16192 = and i64 %555, 1048285597887002512
  %16193 = xor i64 %555, -1
  %16194 = or i64 -1048285597887002513, %16193
  %16195 = xor i64 %16194, -1
  %16196 = and i64 %16195, -1
  %16197 = or i64 %1588, -4864207211704316732
  %16198 = xor i64 %1588, -1
  %16199 = and i64 %16198, -4355518906125920490
  %16200 = and i64 %1588, 4355518906125920489
  %16201 = or i64 %16199, %16200
  %16202 = xor i64 9219092676054703058, %16201
  %16203 = xor i64 %1588, -1
  %16204 = or i64 4864207211704316731, %16203
  %16205 = xor i64 %16204, -1
  %16206 = and i64 %16205, -1
  %16207 = or i64 %16202, %16206
  %16208 = and i64 %780, -1344299853782496072
  %16209 = or i64 1344299853782496071, %780
  %16210 = sub i64 %16209, 1344299853782496071
  %16211 = xor i64 8786926858274633901, %16196
  %16212 = xor i64 %16211, %16207
  %16213 = xor i64 %16212, %16210
  %16214 = xor i64 %16213, %16192
  %16215 = xor i64 %16214, %16208
  %16216 = xor i64 %16215, %16197
  %16217 = mul i64 %16191, %16216
  %16218 = trunc i64 %16217 to i1
  store i1 %16218, i1* %162, align 1
  ret void

.exitStub2655:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %162, align 1
  ret void

newFuncRoot56:                                    ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  %.reload661 = load i8**, i8*** %.reg2mem660, align 8
  %16219 = load i8*, i8** %.reload661, align 8
  indirectbr i8* %16219, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

"183":                                            ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 %163, i1* %164, align 1
  %16220 = and i64 %559, 2114301776468216351
  %16221 = xor i64 %559, -1
  %16222 = xor i64 2114301776468216351, %16221
  %16223 = and i64 %16222, 2114301776468216351
  %16224 = add i64 %236, 1436560472610141586
  %16225 = xor i64 1436560472610141586, %236
  %16226 = and i64 1436560472610141586, %236
  %16227 = mul i64 2, %16226
  %16228 = add i64 %16225, %16227
  %16229 = xor i64 %16228, -7819237887703457873
  %16230 = xor i64 %16229, %16223
  %16231 = xor i64 %16230, %16220
  %16232 = xor i64 %16231, %16224
  %16233 = add i64 %1228, 7536929073012108078
  %16234 = xor i64 7536929073012108078, %1228
  %16235 = and i64 7536929073012108078, %1228
  %16236 = mul i64 2, %16235
  %16237 = add i64 %16234, %16236
  %16238 = add i64 %770, -1616791815750629604
  %16239 = sub i64 0, %770
  %16240 = add i64 1616791815750629604, %16239
  %16241 = sub i64 0, %16240
  %16242 = and i64 %91, 525533897249954221
  %16243 = xor i64 %91, -1
  %16244 = xor i64 525533897249954221, %16243
  %16245 = and i64 %16244, 525533897249954221
  %16246 = xor i64 %16233, %16242
  %16247 = xor i64 %16246, %16245
  %16248 = xor i64 %16247, %16237
  %16249 = xor i64 %16248, %16241
  %16250 = xor i64 %16249, %16238
  %16251 = xor i64 %16250, 7200712066310484624
  %16252 = mul i64 %16232, %16251
  %16253 = sdiv i64 121, %16252
  %16254 = and i1 %163, false
  store i1 %16254, i1* %165, align 1
  %16255 = add i64 %232, -9029554338730621386
  %16256 = add i64 6733497141401435464, %232
  %16257 = add i64 %16256, 2683692593577494766
  %16258 = add i64 %998, 811526051196823491
  %16259 = sub i64 0, %998
  %16260 = sub i64 811526051196823491, %16259
  %16261 = sext i32 %72 to i64
  %16262 = or i64 %16261, 8195568690931237725
  %16263 = xor i64 %16261, -1
  %16264 = and i64 8195568690931237725, %16263
  %16265 = add i64 %16264, %16261
  %16266 = xor i64 %16262, %16260
  %16267 = xor i64 %16266, 3111055906053818493
  %16268 = xor i64 %16267, %16265
  %16269 = xor i64 %16268, %16258
  %16270 = xor i64 %16269, %16257
  %16271 = xor i64 %16270, %16255
  %16272 = or i64 %101, 1886210754033723307
  %16273 = and i64 1886210754033723307, %101
  %16274 = xor i64 1886210754033723307, %101
  %16275 = or i64 %16273, %16274
  %16276 = or i64 %768, -8579665308054606830
  %16277 = xor i64 %768, -1
  %16278 = and i64 %16277, -1273286536100265274
  %16279 = and i64 %768, 1273286536100265273
  %16280 = or i64 %16278, %16279
  %16281 = xor i64 7402377920353496788, %16280
  %16282 = xor i64 %768, -1
  %16283 = or i64 8579665308054606829, %16282
  %16284 = xor i64 %16283, -1
  %16285 = and i64 %16284, -1
  %16286 = or i64 %16281, %16285
  %16287 = xor i64 -4891444076765987110, %16286
  %16288 = xor i64 %16287, %16272
  %16289 = xor i64 %16288, %16276
  %16290 = xor i64 %16289, %16275
  %16291 = mul i64 %16271, %16290
  %16292 = add i64 %1284, 2039689828465840340
  %16293 = add i64 -6259094126650520442, %1284
  %16294 = add i64 %16293, 8298783955116360782
  %16295 = add i64 %391, 1033678444724219730
  %16296 = sub i64 0, %391
  %16297 = sub i64 1033678444724219730, %16296
  %16298 = xor i64 -8478320189437219507, %16295
  %16299 = xor i64 %16298, %16294
  %16300 = xor i64 %16299, %16297
  %16301 = xor i64 %16300, %16292
  %16302 = or i64 %543, 156723879543682199
  %16303 = xor i64 %543, -1
  %16304 = and i64 %16303, 3080828740799593563
  %16305 = and i64 %543, -3080828740799593564
  %16306 = or i64 %16304, %16305
  %16307 = xor i64 2949161642478913740, %16306
  %16308 = xor i64 %543, -1
  %16309 = or i64 -156723879543682200, %16308
  %16310 = xor i64 %16309, -1
  %16311 = and i64 %16310, -1
  %16312 = or i64 %16307, %16311
  %16313 = add i64 %177, 4608757162307481115
  %16314 = sub i64 0, %177
  %16315 = add i64 -4608757162307481115, %16314
  %16316 = sub i64 0, %16315
  %16317 = xor i64 -74215067420774483, %16316
  %16318 = xor i64 %16317, %16313
  %16319 = xor i64 %16318, %16312
  %16320 = xor i64 %16319, %16302
  %16321 = mul i64 %16301, %16320
  %16322 = mul i64 %16291, %16321
  %16323 = and i1 %166, true
  store i1 %16323, i1* %167, align 1
  %16324 = or i64 %912, 2867181290313534781
  %16325 = and i64 2867181290313534781, %912
  %16326 = xor i64 2867181290313534781, %912
  %16327 = or i64 %16325, %16326
  %16328 = add i64 %175, 5277544691133043491
  %16329 = and i64 5277544691133043491, %175
  %16330 = or i64 5277544691133043491, %175
  %16331 = add i64 %16329, %16330
  %16332 = or i64 %664, 1090507705274374102
  %16333 = xor i64 %664, -1
  %16334 = and i64 %16333, 6279351591397336238
  %16335 = and i64 %664, -6279351591397336239
  %16336 = or i64 %16334, %16335
  %16337 = xor i64 6343038575154639736, %16336
  %16338 = xor i64 %664, -1
  %16339 = or i64 -1090507705274374103, %16338
  %16340 = xor i64 %16339, -1
  %16341 = and i64 %16340, -1
  %16342 = or i64 %16337, %16341
  %16343 = xor i64 %16327, %16324
  %16344 = xor i64 %16343, %16342
  %16345 = xor i64 %16344, %16332
  %16346 = xor i64 %16345, %16331
  %16347 = xor i64 %16346, 7757014007490904247
  %16348 = xor i64 %16347, %16328
  %16349 = and i64 %660, 6720262664607923233
  %16350 = xor i64 %660, -1
  %16351 = or i64 -6720262664607923234, %16350
  %16352 = xor i64 %16351, -1
  %16353 = and i64 %16352, -1
  %16354 = or i64 %288, -5469681151566883518
  %16355 = xor i64 %288, -1
  %16356 = and i64 -5469681151566883518, %16355
  %16357 = add i64 %16356, %288
  %16358 = or i64 %1655, 1113166396224044304
  %16359 = and i64 1113166396224044304, %1655
  %16360 = xor i64 1113166396224044304, %1655
  %16361 = or i64 %16359, %16360
  %16362 = xor i64 %16353, %16361
  %16363 = xor i64 %16362, -1076375208980554489
  %16364 = xor i64 %16363, %16349
  %16365 = xor i64 %16364, %16357
  %16366 = xor i64 %16365, %16354
  %16367 = xor i64 %16366, %16358
  %16368 = mul i64 %16348, %16367
  %16369 = add i64 %16368, 110
  %16370 = xor i1 %16254, true
  %16371 = and i64 %1517, 445994005585432333
  %16372 = xor i64 %1517, -1
  %16373 = xor i64 445994005585432333, %16372
  %16374 = and i64 %16373, 445994005585432333
  %16375 = add i64 %1535, 5746305075455319394
  %16376 = add i64 -8103614453684903254, %1535
  %16377 = sub i64 %16376, 4596824544569328968
  %16378 = add i64 %1491, -3392938613404662083
  %16379 = sub i64 0, %1491
  %16380 = add i64 3392938613404662083, %16379
  %16381 = sub i64 0, %16380
  %16382 = xor i64 %16377, %16381
  %16383 = xor i64 %16382, %16371
  %16384 = xor i64 %16383, -3073064715706326247
  %16385 = xor i64 %16384, %16378
  %16386 = xor i64 %16385, %16375
  %16387 = xor i64 %16386, %16374
  %16388 = or i64 %11, 177423891614575654
  %16389 = xor i64 %11, -1
  %16390 = and i64 %16389, -4201663946232195516
  %16391 = and i64 %11, 4201663946232195515
  %16392 = or i64 %16390, %16391
  %16393 = xor i64 -4051296895885559198, %16392
  %16394 = xor i64 %11, -1
  %16395 = or i64 -177423891614575655, %16394
  %16396 = xor i64 %16395, -1
  %16397 = and i64 %16396, -1
  %16398 = or i64 %16393, %16397
  %16399 = add i64 %1655, 1262304896760628838
  %16400 = add i64 -5279089052189229569, %1655
  %16401 = sub i64 %16400, -6541393948949858407
  %16402 = or i64 %1511, 7596762721895065266
  %16403 = xor i64 %1511, -1
  %16404 = and i64 %16403, 1840417704160183798
  %16405 = and i64 %1511, -1840417704160183799
  %16406 = or i64 %16404, %16405
  %16407 = xor i64 8135582665999049540, %16406
  %16408 = xor i64 %1511, -1
  %16409 = or i64 -7596762721895065267, %16408
  %16410 = xor i64 %16409, -1
  %16411 = and i64 %16410, -1
  %16412 = or i64 %16407, %16411
  %16413 = xor i64 %16398, %16388
  %16414 = xor i64 %16413, %16399
  %16415 = xor i64 %16414, %16401
  %16416 = xor i64 %16415, -3475107343671676995
  %16417 = xor i64 %16416, %16402
  %16418 = xor i64 %16417, %16412
  %16419 = mul i64 %16387, %16418
  %16420 = mul i64 21, %16419
  %16421 = xor i1 %16370, true
  %16422 = and i1 %16421, %16370
  store i1 %16422, i1* %168, align 1
  %16423 = mul i64 12, 70
  %16424 = and i1 %16254, true
  store i1 %16424, i1* %169, align 1
  %16425 = srem i32 %170, 2
  %16426 = icmp eq i32 %16425, 0
  %16427 = mul i32 %171, 2
  %16428 = mul i32 %171, 2
  %16429 = add i32 2, %16428
  %16430 = mul i32 %16427, %16429
  %16431 = srem i32 %16430, 4
  %16432 = icmp eq i32 %16431, 0
  %16433 = mul i32 %171, %171
  %16434 = add i32 %16433, %171
  %16435 = srem i32 %16434, 2
  %16436 = icmp eq i32 %16435, 0
  %16437 = or i1 %16432, %16436
  store i1 %16437, i1* %172, align 1
  %.reload664 = load i8**, i8*** %.reg2mem663, align 8
  %.reload667 = load i8**, i8*** %.reg2mem666, align 8
  %16438 = select i1 %16437, i8** %.reload664, i8** %.reload667
  %16439 = load i8*, i8** %16438, align 8
  indirectbr i8* %16439, [label %BogusBasciBlock, label %EntryBasicBlockSplit, label %NodeBlock57, label %NodeBlock55, label %NodeBlock53, label %NodeBlock51, label %NodeBlock49, label %LeafBlock47, label %NodeBlock45, label %NodeBlock43, label %NodeBlock41, label %NodeBlock39, label %NodeBlock37, label %NodeBlock35, label %NodeBlock33, label %NodeBlock31, label %NodeBlock29, label %NodeBlock27, label %NodeBlock25, label %NodeBlock23, label %NodeBlock21, label %NodeBlock19, label %NodeBlock17, label %NodeBlock15, label %NodeBlock13, label %NodeBlock11, label %NodeBlock9, label %NodeBlock7, label %NodeBlock5, label %NodeBlock3, label %NodeBlock1, label %NodeBlock, label %LeafBlock, label %"33", label %"34", label %"35", label %"36", label %"37", label %"38", label %"39", label %"40", label %newFuncRoot, label %.split, label %codeRepl, label %.exitStub, label %.exitStub5, label %"46", label %newFuncRoot1, label %"48", label %.exitStub.exitStub, label %.loopexit.exitStub.exitStub, label %"51", label %"52", label %"53", label %newFuncRoot2, label %"55", label %.exitStub.exitStub3, label %.exitStub3.exitStub, label %newFuncRoot4, label %"59", label %codeRepl5, label %.exitStub7, label %.exitStub1, label %newFuncRoot8, label %"64", label %.exitStub.exitStub9, label %.exitStub3.exitStub10, label %newFuncRoot11, label %"68", label %codeRepl12, label %.exitStub14, label %.exitStub715, label %newFuncRoot16, label %"73", label %.exitStub.exitStub17, label %.exitStub1.exitStub, label %newFuncRoot18, label %"77", label %codeRepl19, label %.exitStub21, label %.exitStub122, label %newFuncRoot23, label %"82", label %codeRepl24, label %.exitStub26, label %.exitStub3, label %"86", label %"87", label %"88", label %"89", label %"90", label %"91", label %"92", label %"93", label %"94", label %"95", label %"96", label %.preheader, label %"98", label %"99", label %"100", label %codeRepl27, label %"102", label %"103", label %"104", label %codeRepl1, label %"106", label %"107", label %"108", label %"109", label %"110", label %"111", label %"112", label %"113", label %"114", label %"115", label %"116", label %"117", label %"118", label %"119", label %codeRepl2, label %"121", label %"122", label %"123", label %"124", label %"125", label %"126", label %"127", label %"128", label %.loopexit, label %"130", label %"131", label %codeRepl1929, label %"133", label %codeRepl48, label %codeRepl49, label %"136", label %"137", label %codeRepl80, label %"139", label %codeRepl90, label %"141", label %"142", label %codeRepl124, label %"144", label %"145", label %"146", label %"147", label %"148", label %"149", label %"150", label %newFuncRoot30, label %.split31, label %.exitStub32, label %.exitStub133, label %"155", label %newFuncRoot34, label %"157", label %.exitStub.exitStub35, label %.exitStub1.exitStub36, label %newFuncRoot37, label %"161", label %codeRepl38, label %.exitStub40, label %.exitStub2, label %newFuncRoot41, label %.split42, label %.exitStub43, label %.exitStub144, label %newFuncRoot45, label %.split46, label %.exitStub47, label %.exitStub148, label %newFuncRoot49, label %"174", label %.exitStub.exitStub50, label %.exitStub26.exitStub, label %newFuncRoot51, label %"178", label %codeRepl52, label %.exitStub54, label %.exitStub2655, label %newFuncRoot56, label %"183", label %.exitStub.exitStub57, label %.exitStub7.exitStub]

.exitStub.exitStub57:                             ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 true, i1* %173, align 1
  ret void

.exitStub7.exitStub:                              ; preds = %"183", %newFuncRoot56, %codeRepl52, %"178", %newFuncRoot51, %"174", %newFuncRoot49, %.split46, %newFuncRoot45, %.split42, %newFuncRoot41, %codeRepl38, %"161", %newFuncRoot37, %"157", %newFuncRoot34, %.split31, %newFuncRoot30, %"149", %"148", %"147", %"146", %"145", %"144", %codeRepl124, %"142", %"141", %codeRepl90, %"139", %codeRepl80, %"137", %"136", %codeRepl49, %codeRepl48, %"133", %codeRepl1929, %"131", %"130", %.loopexit, %"128", %"127", %"126", %"125", %"124", %"123", %"122", %"121", %codeRepl2, %"119", %"118", %"117", %"116", %"115", %"114", %"113", %"112", %"111", %"110", %"109", %"108", %"107", %"106", %codeRepl1, %"104", %"103", %"102", %codeRepl27, %"100", %"99", %"98", %.preheader, %"96", %"95", %"94", %"93", %"92", %"91", %"90", %"89", %"88", %"87", %"86", %codeRepl24, %"82", %newFuncRoot23, %codeRepl19, %"77", %newFuncRoot18, %"73", %newFuncRoot16, %codeRepl12, %"68", %newFuncRoot11, %"64", %newFuncRoot8, %codeRepl5, %"59", %newFuncRoot4, %"55", %newFuncRoot2, %"48", %newFuncRoot1, %codeRepl, %.split, %newFuncRoot, %LeafBlock, %NodeBlock, %NodeBlock1, %NodeBlock3, %NodeBlock5, %NodeBlock7, %NodeBlock9, %NodeBlock11, %NodeBlock13, %NodeBlock15, %NodeBlock17, %NodeBlock19, %NodeBlock21, %NodeBlock23, %NodeBlock25, %NodeBlock27, %NodeBlock29, %NodeBlock31, %NodeBlock33, %NodeBlock35, %NodeBlock37, %NodeBlock39, %NodeBlock41, %NodeBlock43, %NodeBlock45, %LeafBlock47, %NodeBlock49, %NodeBlock51, %NodeBlock53, %NodeBlock55, %NodeBlock57, %EntryBasicBlockSplit, %BogusBasciBlock, %entry
  store i1 false, i1* %173, align 1
  ret void
}

; Function Attrs: noinline
define internal i64 @h11804894491772278134(i64 %0) #10 {
  %2 = alloca i32, align 4
  %3 = xor i64 595012096, %0
  ret i64 %3
}

; Function Attrs: noinline
define internal i8** @bf777061424148142830(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [186 x i8*], [186 x i8*]* @obfsblockAddrLookupTable2225311471228186675, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf4367541783002168146(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [58 x i8*], [58 x i8*]* @obfsblockAddrLookupTable13466774680077859934, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2563105590911343727(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [11 x i8*], [11 x i8*]* @obfsblockAddrLookupTable953024091002816246, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf13549976795470178447(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [31 x i8*], [31 x i8*]* @obfsblockAddrLookupTable2165107726949451542, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14862898971591998804(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [70 x i8*], [70 x i8*]* @obfsblockAddrLookupTable273925028288190708, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9697573497052965038(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [20 x i8*], [20 x i8*]* @obfsblockAddrLookupTable11830966694973052798, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf6100004335245622257(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable5457382995501966596, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1506284653360689564(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable7658909545711664131, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14033556120813692093(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1469608314208994637, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1197571377139792254(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17752622897403080987, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf10630721613528520237(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17778203017081165068, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2869133644047347425(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable3781506102938076433, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf11348756035212192102(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable17853995518347047771, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16235262942820273051(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11620099575389990025, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf1440224179025403013(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable11253129521938400687, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf7020390530810900365(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [5 x i8*], [5 x i8*]* @obfsblockAddrLookupTable5293587490885567911, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf2055233266049386021(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7411847914865700813, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf476793788477283144(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable3305384392047029551, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17374749499201147747(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable10123721182278519796, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf14665384891532801934(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable14017839906869768822, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9506738072890574186(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable10753054479158655154, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf12745111092262559403(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable2406509766364924601, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf9526239474610670753(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [6 x i8*], [6 x i8*]* @obfsblockAddrLookupTable2201829288081703202, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf17974093100361806345(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable11059552133823327315, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf698711486529780441(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [9 x i8*], [9 x i8*]* @obfsblockAddrLookupTable1046456830538597625, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16895520698852116127(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable7758783010819204808, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf15658819879636911971(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [10 x i8*], [10 x i8*]* @obfsblockAddrLookupTable15002271783724796336, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf16635592617302135078(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* @obfsblockAddrLookupTable18440005676144863832, i32 0, i64 %5
  ret i8** %6
}

; Function Attrs: noinline
define internal i8** @bf5362083045698301334(i32* %0) #10 {
  %2 = alloca i32, align 4
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = call i64 @h11804894491772278134(i64 %4)
  %6 = getelementptr inbounds [187 x i8*], [187 x i8*]* @obfsblockAddrLookupTable17445040427728598547, i32 0, i64 %5
  ret i8** %6
}

define void @decode13118498550893562315(i8* %0, i32 %1, i8* %2, i32* %3, i8* %4) {
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = zext i32 %1 to i64
  br label %10

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %10, %7
  %11 = phi i64 [ 0, %7 ], [ %25, %10 ]
  %12 = phi i32 [ 0, %7 ], [ %24, %10 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = shl i32 %12, 1
  %16 = sext i8 %14 to i32
  %17 = sub i32 0, %16
  %18 = sub i32 %15, %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %4, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %2, i64 %11
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i32, i32* %3, i64 %19
  %24 = load i32, i32* %23, align 4
  %25 = sub i64 %11, -1
  %26 = icmp eq i64 %25, %8
  br i1 %26, label %9, label %10
}

define internal void @init10752436045149418001() {
  %outArray = alloca [26 x i8], align 1
  %1 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 0
  store i8 36, i8* %1, align 1
  %2 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 1
  store i8 46, i8* %2, align 1
  %3 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 2
  store i8 35, i8* %3, align 1
  %4 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 3
  store i8 44, i8* %4, align 1
  %5 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 4
  store i8 46, i8* %5, align 1
  %6 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 5
  store i8 45, i8* %6, align 1
  %7 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 6
  store i8 126, i8* %7, align 1
  %8 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 7
  store i8 45, i8* %8, align 1
  %9 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 8
  store i8 58, i8* %9, align 1
  %10 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 9
  store i8 33, i8* %10, align 1
  %11 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 10
  store i8 59, i8* %11, align 1
  %12 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 11
  store i8 33, i8* %12, align 1
  %13 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 12
  store i8 61, i8* %13, align 1
  %14 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 13
  store i8 59, i8* %14, align 1
  %15 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 14
  store i8 33, i8* %15, align 1
  %16 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 15
  store i8 35, i8* %16, align 1
  %17 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 16
  store i8 36, i8* %17, align 1
  %18 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 17
  store i8 42, i8* %18, align 1
  %19 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 18
  store i8 42, i8* %19, align 1
  %20 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 19
  store i8 35, i8* %20, align 1
  %21 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 20
  store i8 36, i8* %21, align 1
  %22 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 21
  store i8 46, i8* %22, align 1
  %23 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 22
  store i8 45, i8* %23, align 1
  %24 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 23
  store i8 64, i8* %24, align 1
  %25 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 24
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 25
  store i8 42, i8* %26, align 1
  %nextArray = alloca [26 x i32], align 4
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 0
  store i32 11, i32* %27, align 4
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 1
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 2
  store i32 10, i32* %29, align 4
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 3
  store i32 2, i32* %30, align 4
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 4
  store i32 1, i32* %31, align 4
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 5
  store i32 3, i32* %32, align 4
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 6
  store i32 4, i32* %33, align 4
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 7
  store i32 3, i32* %34, align 4
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 8
  store i32 5, i32* %35, align 4
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 9
  store i32 8, i32* %36, align 4
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 10
  store i32 6, i32* %37, align 4
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 11
  store i32 8, i32* %38, align 4
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 12
  store i32 7, i32* %39, align 4
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 13
  store i32 6, i32* %40, align 4
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 14
  store i32 8, i32* %41, align 4
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 15
  store i32 10, i32* %42, align 4
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 16
  store i32 11, i32* %43, align 4
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 17
  store i32 9, i32* %44, align 4
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 18
  store i32 9, i32* %45, align 4
  %46 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 19
  store i32 10, i32* %46, align 4
  %47 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 20
  store i32 11, i32* %47, align 4
  %48 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 21
  store i32 1, i32* %48, align 4
  %49 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 22
  store i32 3, i32* %49, align 4
  %50 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 23
  store i32 12, i32* %50, align 4
  %51 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 24
  store i32 0, i32* %51, align 4
  %52 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 25
  store i32 9, i32* %52, align 4
  %53 = getelementptr inbounds [26 x i32], [26 x i32]* %nextArray, i32 0, i32 0
  %54 = getelementptr inbounds [26 x i8], [26 x i8]* %outArray, i32 0, i32 0
  br label %55

55:                                               ; preds = %0
  call void @decode13118498550893562315(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32* %53, i8* %54)
  %outArray1 = alloca [10 x i8], align 1
  %56 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 0
  store i8 27, i8* %56, align 1
  %57 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 1
  store i8 0, i8* %57, align 1
  %58 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 2
  store i8 74, i8* %58, align 1
  %59 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 3
  store i8 91, i8* %59, align 1
  %60 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 4
  store i8 27, i8* %60, align 1
  %61 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 5
  store i8 50, i8* %61, align 1
  %62 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 6
  store i8 91, i8* %62, align 1
  %63 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 7
  store i8 74, i8* %63, align 1
  %64 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 8
  store i8 50, i8* %64, align 1
  %65 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 9
  store i8 0, i8* %65, align 1
  %nextArray2 = alloca [10 x i32], align 4
  %66 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 0
  store i32 1, i32* %66, align 4
  %67 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 1
  store i32 0, i32* %67, align 4
  %68 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 2
  store i32 4, i32* %68, align 4
  %69 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 3
  store i32 2, i32* %69, align 4
  %70 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 4
  store i32 1, i32* %70, align 4
  %71 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 5
  store i32 3, i32* %71, align 4
  %72 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 6
  store i32 2, i32* %72, align 4
  %73 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 7
  store i32 4, i32* %73, align 4
  %74 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 8
  store i32 3, i32* %74, align 4
  %75 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 9
  store i32 0, i32* %75, align 4
  %76 = getelementptr inbounds [10 x i32], [10 x i32]* %nextArray2, i32 0, i32 0
  %77 = getelementptr inbounds [10 x i8], [10 x i8]* %outArray1, i32 0, i32 0
  br label %78

78:                                               ; preds = %55
  call void @decode13118498550893562315(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32* %76, i8* %77)
  %outArray3 = alloca [44 x i8], align 1
  %79 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 0
  store i8 116, i8* %79, align 1
  %80 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 1
  store i8 114, i8* %80, align 1
  %81 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 2
  store i8 105, i8* %81, align 1
  %82 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 3
  store i8 111, i8* %82, align 1
  %83 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 4
  store i8 97, i8* %83, align 1
  %84 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 5
  store i8 109, i8* %84, align 1
  %85 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 6
  store i8 101, i8* %85, align 1
  %86 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 7
  store i8 101, i8* %86, align 1
  %87 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 8
  store i8 110, i8* %87, align 1
  %88 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 9
  store i8 32, i8* %88, align 1
  %89 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 10
  store i8 114, i8* %89, align 1
  %90 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 11
  store i8 116, i8* %90, align 1
  %91 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 12
  store i8 32, i8* %91, align 1
  %92 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 13
  store i8 110, i8* %92, align 1
  %93 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 14
  store i8 32, i8* %93, align 1
  %94 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 15
  store i8 101, i8* %94, align 1
  %95 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 16
  store i8 100, i8* %95, align 1
  %96 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 17
  store i8 100, i8* %96, align 1
  %97 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 18
  store i8 101, i8* %97, align 1
  %98 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 19
  store i8 115, i8* %98, align 1
  %99 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 20
  store i8 114, i8* %99, align 1
  %100 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 21
  store i8 58, i8* %100, align 1
  %101 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 22
  store i8 37, i8* %101, align 1
  %102 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 23
  store i8 102, i8* %102, align 1
  %103 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 24
  store i8 32, i8* %103, align 1
  %104 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 25
  store i8 114, i8* %104, align 1
  %105 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 26
  store i8 97, i8* %105, align 1
  %106 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 27
  store i8 101, i8* %106, align 1
  %107 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 28
  store i8 109, i8* %107, align 1
  %108 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 29
  store i8 37, i8* %108, align 1
  %109 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 30
  store i8 101, i8* %109, align 1
  %110 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 31
  store i8 32, i8* %110, align 1
  %111 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 32
  store i8 102, i8* %111, align 1
  %112 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 33
  store i8 100, i8* %112, align 1
  %113 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 34
  store i8 99, i8* %113, align 1
  %114 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 35
  store i8 115, i8* %114, align 1
  %115 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 36
  store i8 10, i8* %115, align 1
  %116 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 37
  store i8 101, i8* %116, align 1
  %117 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 38
  store i8 100, i8* %117, align 1
  %118 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 39
  store i8 99, i8* %118, align 1
  %119 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 40
  store i8 109, i8* %119, align 1
  %120 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 41
  store i8 111, i8* %120, align 1
  %121 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 42
  store i8 37, i8* %121, align 1
  %122 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 43
  store i8 0, i8* %122, align 1
  %nextArray4 = alloca [44 x i32], align 4
  %123 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 0
  store i32 1, i32* %123, align 4
  %124 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 1
  store i32 7, i32* %124, align 4
  %125 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 2
  store i32 2, i32* %125, align 4
  %126 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 3
  store i32 6, i32* %126, align 4
  %127 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 4
  store i32 14, i32* %127, align 4
  %128 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 5
  store i32 3, i32* %128, align 4
  %129 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 6
  store i32 10, i32* %129, align 4
  %130 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 7
  store i32 4, i32* %130, align 4
  %131 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 8
  store i32 8, i32* %131, align 4
  %132 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 9
  store i32 5, i32* %132, align 4
  %133 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 10
  store i32 7, i32* %133, align 4
  %134 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 11
  store i32 1, i32* %134, align 4
  %135 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 12
  store i32 5, i32* %135, align 4
  %136 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 13
  store i32 8, i32* %136, align 4
  %137 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 14
  store i32 11, i32* %137, align 4
  %138 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 15
  store i32 4, i32* %138, align 4
  %139 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 16
  store i32 9, i32* %139, align 4
  %140 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 17
  store i32 9, i32* %140, align 4
  %141 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 18
  store i32 10, i32* %141, align 4
  %142 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 19
  store i32 18, i32* %142, align 4
  %143 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 20
  store i32 7, i32* %143, align 4
  %144 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 21
  store i32 15, i32* %144, align 4
  %145 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 22
  store i32 16, i32* %145, align 4
  %146 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 23
  store i32 12, i32* %146, align 4
  %147 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 24
  store i32 17, i32* %147, align 4
  %148 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 25
  store i32 13, i32* %148, align 4
  %149 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 26
  store i32 14, i32* %149, align 4
  %150 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 27
  store i32 4, i32* %150, align 4
  %151 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 28
  store i32 3, i32* %151, align 4
  %152 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 29
  store i32 16, i32* %152, align 4
  %153 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 30
  store i32 4, i32* %153, align 4
  %154 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 31
  store i32 11, i32* %154, align 4
  %155 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 32
  store i32 12, i32* %155, align 4
  %156 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 33
  store i32 9, i32* %156, align 4
  %157 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 34
  store i32 20, i32* %157, align 4
  %158 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 35
  store i32 18, i32* %158, align 4
  %159 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 36
  store i32 21, i32* %159, align 4
  %160 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 37
  store i32 19, i32* %160, align 4
  %161 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 38
  store i32 9, i32* %161, align 4
  %162 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 39
  store i32 20, i32* %162, align 4
  %163 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 40
  store i32 3, i32* %163, align 4
  %164 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 41
  store i32 6, i32* %164, align 4
  %165 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 42
  store i32 16, i32* %165, align 4
  %166 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 43
  store i32 0, i32* %166, align 4
  %167 = getelementptr inbounds [44 x i32], [44 x i32]* %nextArray4, i32 0, i32 0
  %168 = getelementptr inbounds [44 x i8], [44 x i8]* %outArray3, i32 0, i32 0
  br label %169

169:                                              ; preds = %78
  call void @decode13118498550893562315(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 34, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32* %167, i8* %168)
  %outArray5 = alloca [8 x i8], align 1
  %170 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 0
  store i8 72, i8* %170, align 1
  %171 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 1
  store i8 27, i8* %171, align 1
  %172 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 2
  store i8 91, i8* %172, align 1
  %173 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 3
  store i8 27, i8* %173, align 1
  %174 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 4
  store i8 91, i8* %174, align 1
  %175 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 5
  store i8 72, i8* %175, align 1
  %176 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 6
  store i8 0, i8* %176, align 1
  %177 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 7
  store i8 72, i8* %177, align 1
  %nextArray6 = alloca [8 x i32], align 4
  %178 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 0
  store i32 3, i32* %178, align 4
  %179 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 1
  store i32 1, i32* %179, align 4
  %180 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 2
  store i32 2, i32* %180, align 4
  %181 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 3
  store i32 1, i32* %181, align 4
  %182 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 4
  store i32 2, i32* %182, align 4
  %183 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 5
  store i32 3, i32* %183, align 4
  %184 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 6
  store i32 0, i32* %184, align 4
  %185 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 7
  store i32 3, i32* %185, align 4
  %186 = getelementptr inbounds [8 x i32], [8 x i32]* %nextArray6, i32 0, i32 0
  %187 = getelementptr inbounds [8 x i8], [8 x i8]* %outArray5, i32 0, i32 0
  br label %188

188:                                              ; preds = %169
  call void @decode13118498550893562315(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32* %186, i8* %187)
  ret void
}

attributes #0 = { mustprogress nofree noinline norecurse nosync nounwind ssp willreturn uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #4 = { nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #5 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #6 = { noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #7 = { nofree noinline nosync nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #8 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { argmemonly nocallback nofree nounwind willreturn writeonly }
attributes #10 = { noinline }
attributes #11 = { "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+sm4,+v8.5a,+zcm,+zcz" }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 13, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Apple clang version 14.0.0 (clang-1400.0.29.202)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"float", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C/C++ TBAA"}
!14 = !{!15, !15, i64 0}
!15 = !{!"any pointer", !12, i64 0}
!16 = !{!12, !12, i64 0}
